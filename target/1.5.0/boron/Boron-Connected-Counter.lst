
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.5.0/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a010  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000de030  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000174  2003df04  000de034  0001df04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000778  2003e078  2003e078  0002e078  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000de1a8  000de1a8  0001e1a8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de1d4  000de1d4  0001e1d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010e5eb  00000000  00000000  0001e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014c62  00000000  00000000  0012c7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025d5a  00000000  00000000  00141425  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030b0  00000000  00000000  0016717f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000058b8  00000000  00000000  0016a22f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a0a0  00000000  00000000  0016fae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032d7a  00000000  00000000  001a9b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c02c  00000000  00000000  001dc901  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f848  00000000  00000000  002e8930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fe8d 	bl	d9d50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fe92 	bl	d9d66 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df04 	.word	0x2003df04
   d404c:	000de034 	.word	0x000de034
   d4050:	2003e078 	.word	0x2003e078
   d4054:	2003e078 	.word	0x2003e078
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fcfd 	bl	d8a5c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000de024 	.word	0x000de024
   d4084:	000ddfe4 	.word	0x000ddfe4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bbee 	b.w	d5868 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f8f7 	bl	d5280 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bca3 	b.w	d89e0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bfbb 	b.w	d7014 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bfc1 	b.w	d7024 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bfbf 	b.w	d7024 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  sensorDetect = true;                              // sets the sensor flag for the main loop
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z9sensorISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e07c 	.word	0x2003e07c

000d40c4 <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z11watchdogISRv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e0dc 	.word	0x2003e0dc

000d40d0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d2:	6803      	ldr	r3, [r0, #0]
   d40d4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d8:	d904      	bls.n	d40e4 <nrf_gpio_pin_port_decode+0x14>
   d40da:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <nrf_gpio_pin_port_decode+0x28>)
   d40dc:	2100      	movs	r1, #0
   d40de:	200a      	movs	r0, #10
   d40e0:	f002 fe4e 	bl	d6d80 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e8:	bf83      	ittte	hi
   d40ea:	f003 031f 	andhi.w	r3, r3, #31
   d40ee:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f0:	4802      	ldrhi	r0, [pc, #8]	; (d40fc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40f2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	000d6a91 	.word	0x000d6a91
   d40fc:	50000300 	.word	0x50000300

000d4100 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4100:	b507      	push	{r0, r1, r2, lr}
   d4102:	ab02      	add	r3, sp, #8
   d4104:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4108:	4618      	mov	r0, r3
   d410a:	f7ff ffe1 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d410e:	9a01      	ldr	r2, [sp, #4]
   d4110:	2301      	movs	r3, #1
   d4112:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d411e:	b507      	push	{r0, r1, r2, lr}
   d4120:	ab02      	add	r3, sp, #8
   d4122:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4126:	4618      	mov	r0, r3
   d4128:	f7ff ffd2 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d412c:	9a01      	ldr	r2, [sp, #4]
   d412e:	2301      	movs	r3, #1
   d4130:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4132:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d4136:	b003      	add	sp, #12
   d4138:	f85d fb04 	ldr.w	pc, [sp], #4

000d413c <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d413c:	b538      	push	{r3, r4, r5, lr}
   d413e:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4140:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4142:	b128      	cbz	r0, d4150 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4144:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4146:	210c      	movs	r1, #12
   d4148:	f004 fda7 	bl	d8c9a <_ZdlPvj>
            wakeupSource = next;
   d414c:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d414e:	e7f8      	b.n	d4142 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4150:	4620      	mov	r0, r4
   d4152:	bd38      	pop	{r3, r4, r5, pc}

000d4154 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4154:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4156:	4904      	ldr	r1, [pc, #16]	; (d4168 <_Z9resetFRAM6String+0x14>)
   d4158:	f004 f80f 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d415c:	b118      	cbz	r0, d4166 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d415e:	4803      	ldr	r0, [pc, #12]	; (d416c <_Z9resetFRAM6String+0x18>)
   d4160:	f001 fea0 	bl	d5ea4 <_ZN6MB85RC5eraseEv>
    return 1;
   d4164:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4166:	bd08      	pop	{r3, pc}
   d4168:	000dd44c 	.word	0x000dd44c
   d416c:	2003e088 	.word	0x2003e088

000d4170 <_Z7sendNow6String>:
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4170:	b508      	push	{r3, lr}
   d4172:	4904      	ldr	r1, [pc, #16]	; (d4184 <_Z7sendNow6String+0x14>)
   d4174:	f004 f801 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4178:	b118      	cbz	r0, d4182 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d417a:	4b03      	ldr	r3, [pc, #12]	; (d4188 <_Z7sendNow6String+0x18>)
   d417c:	2205      	movs	r2, #5
   d417e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4180:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4182:	bd08      	pop	{r3, pc}
   d4184:	000dd44c 	.word	0x000dd44c
   d4188:	2003e0d4 	.word	0x2003e0d4

000d418c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d418c:	b510      	push	{r4, lr}
   d418e:	4b03      	ldr	r3, [pc, #12]	; (d419c <_ZN8MB85RC64D1Ev+0x10>)
   d4190:	6003      	str	r3, [r0, #0]
   d4192:	4604      	mov	r4, r0
   d4194:	f001 fe4e 	bl	d5e34 <_ZN6MB85RCD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	bd10      	pop	{r4, pc}
   d419c:	000dcf9c 	.word	0x000dcf9c

000d41a0 <_ZN8MB85RC64D0Ev>:
   d41a0:	b510      	push	{r4, lr}
   d41a2:	4604      	mov	r4, r0
   d41a4:	f7ff fff2 	bl	d418c <_ZN8MB85RC64D1Ev>
   d41a8:	4620      	mov	r0, r4
   d41aa:	2110      	movs	r1, #16
   d41ac:	f004 fd75 	bl	d8c9a <_ZdlPvj>
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d41b4:	b508      	push	{r3, lr}
   d41b6:	490a      	ldr	r1, [pc, #40]	; (d41e0 <_Z11resetCounts6String+0x2c>)
   d41b8:	f003 ffdf 	bl	d817a <_ZNK6String6equalsEPKc>
   d41bc:	2300      	movs	r3, #0
  if (command == "1")
   d41be:	b168      	cbz	r0, d41dc <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41c0:	4a08      	ldr	r2, [pc, #32]	; (d41e4 <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41c2:	4909      	ldr	r1, [pc, #36]	; (d41e8 <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d41c4:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41c6:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables
   d41c8:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d41ca:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d41cc:	4a07      	ldr	r2, [pc, #28]	; (d41ec <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41ce:	614b      	str	r3, [r1, #20]
    current.alertCount = 0;                                           // Reset count variables
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
   d41d0:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d41d2:	4b07      	ldr	r3, [pc, #28]	; (d41f0 <_Z11resetCounts6String+0x3c>)
   d41d4:	2001      	movs	r0, #1
   d41d6:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d41d8:	4b06      	ldr	r3, [pc, #24]	; (d41f4 <_Z11resetCounts6String+0x40>)
   d41da:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
   d41dc:	bd08      	pop	{r3, pc}
   d41de:	bf00      	nop
   d41e0:	000dd44c 	.word	0x000dd44c
   d41e4:	2003e164 	.word	0x2003e164
   d41e8:	2003e188 	.word	0x2003e188
   d41ec:	2003e184 	.word	0x2003e184
   d41f0:	2003e15c 	.word	0x2003e15c
   d41f4:	2003e185 	.word	0x2003e185

000d41f8 <_ZN10CloudClass8syncTimeEv.isra.41>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41f8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41fa:	f002 fe7b 	bl	d6ef4 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41fe:	b120      	cbz	r0, d420a <_ZN10CloudClass8syncTimeEv.isra.41+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d4200:	2000      	movs	r0, #0
    }
   d4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d4206:	f002 be95 	b.w	d6f34 <spark_sync_time>
    }
   d420a:	bd08      	pop	{r3, pc}

000d420c <_ZN10CloudClass12syncTimeDoneEv.isra.43>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d420c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d420e:	2000      	movs	r0, #0
   d4210:	f002 fe98 	bl	d6f44 <spark_sync_time_pending>
   d4214:	b128      	cbz	r0, d4222 <_ZN10CloudClass12syncTimeDoneEv.isra.43+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4216:	f002 fe6d 	bl	d6ef4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d421a:	f080 0001 	eor.w	r0, r0, #1
   d421e:	b2c0      	uxtb	r0, r0
   d4220:	bd08      	pop	{r3, pc}
   d4222:	2001      	movs	r0, #1
    }
   d4224:	bd08      	pop	{r3, pc}

000d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4226:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4228:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d422c:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d422e:	f88d 3000 	strb.w	r3, [sp]
   d4232:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4234:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4236:	f003 fa2d 	bl	d7694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d423a:	4628      	mov	r0, r5
   d423c:	b003      	add	sp, #12
   d423e:	bd30      	pop	{r4, r5, pc}

000d4240 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4240:	b510      	push	{r4, lr}
   d4242:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4244:	6800      	ldr	r0, [r0, #0]
   d4246:	b108      	cbz	r0, d424c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4248:	f002 feec 	bl	d7024 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d424c:	4620      	mov	r0, r4
   d424e:	bd10      	pop	{r4, pc}

000d4250 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>:

inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractDiagnosticData(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
   d4250:	b530      	push	{r4, r5, lr}
   d4252:	b085      	sub	sp, #20
   d4254:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4256:	a904      	add	r1, sp, #16
   d4258:	2200      	movs	r2, #0
   d425a:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d425e:	f002 fda7 	bl	d6db0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4262:	b9d8      	cbnz	r0, d429c <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x4c>
        return ret;
    }
    return get(src, val);
   d4264:	9c00      	ldr	r4, [sp, #0]
}

inline int AbstractIntegerDiagnosticData::get(const diag_source* src, IntType& val) {
    SPARK_ASSERT(src->type == DIAG_TYPE_INT);
   d4266:	88e3      	ldrh	r3, [r4, #6]
   d4268:	2b01      	cmp	r3, #1
   d426a:	d004      	beq.n	d4276 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x26>
   d426c:	4601      	mov	r1, r0
   d426e:	4a0c      	ldr	r2, [pc, #48]	; (d42a0 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d4270:	200a      	movs	r0, #10
   d4272:	f002 fd85 	bl	d6d80 <panic_>
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4276:	6921      	ldr	r1, [r4, #16]
   d4278:	b919      	cbnz	r1, d4282 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x32>
   d427a:	4a09      	ldr	r2, [pc, #36]	; (d42a0 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d427c:	200a      	movs	r0, #10
   d427e:	f002 fd7f 	bl	d6d80 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4282:	2300      	movs	r3, #0
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	230c      	movs	r3, #12
   d4288:	f8ad 3004 	strh.w	r3, [sp, #4]
   d428c:	2304      	movs	r3, #4
   d428e:	9303      	str	r3, [sp, #12]
   d4290:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4292:	6923      	ldr	r3, [r4, #16]
   d4294:	aa01      	add	r2, sp, #4
   d4296:	2101      	movs	r1, #1
   d4298:	4620      	mov	r0, r4
   d429a:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d429c:	b005      	add	sp, #20
   d429e:	bd30      	pop	{r4, r5, pc}
   d42a0:	000d6a91 	.word	0x000d6a91

000d42a4 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d42a4:	6803      	ldr	r3, [r0, #0]
   d42a6:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d42a8:	b120      	cbz	r0, d42b4 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d42aa:	8883      	ldrh	r3, [r0, #4]
   d42ac:	428b      	cmp	r3, r1
   d42ae:	d001      	beq.n	d42b4 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d42b0:	6880      	ldr	r0, [r0, #8]
   d42b2:	e7f9      	b.n	d42a8 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d42b4:	4770      	bx	lr
	...

000d42b8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d42bc:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d42be:	4605      	mov	r5, r0
   d42c0:	460f      	mov	r7, r1
   d42c2:	4616      	mov	r6, r2
        if (valid_) {
   d42c4:	b33b      	cbz	r3, d4316 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d42c6:	2101      	movs	r1, #1
   d42c8:	f7ff ffec 	bl	d42a4 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d42cc:	b150      	cbz	r0, d42e4 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d42ce:	8983      	ldrh	r3, [r0, #12]
   d42d0:	42bb      	cmp	r3, r7
   d42d2:	d104      	bne.n	d42de <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d42d4:	7386      	strb	r6, [r0, #14]
                    return *this;
   d42d6:	e01e      	b.n	d4316 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d42d8:	8883      	ldrh	r3, [r0, #4]
   d42da:	2b01      	cmp	r3, #1
   d42dc:	d0f6      	beq.n	d42cc <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d42de:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d42e0:	2800      	cmp	r0, #0
   d42e2:	d1f9      	bne.n	d42d8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d42e4:	490d      	ldr	r1, [pc, #52]	; (d431c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d42e6:	2010      	movs	r0, #16
   d42e8:	f004 fce2 	bl	d8cb0 <_ZnwjRKSt9nothrow_t>
   d42ec:	4604      	mov	r4, r0
   d42ee:	b188      	cbz	r0, d4314 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d42f0:	f04f 0810 	mov.w	r8, #16
   d42f4:	4642      	mov	r2, r8
   d42f6:	2100      	movs	r1, #0
   d42f8:	f005 fd35 	bl	d9d66 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d42fc:	2302      	movs	r3, #2
   d42fe:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4300:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4302:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4306:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4308:	692b      	ldr	r3, [r5, #16]
   d430a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d430c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d430e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4310:	612c      	str	r4, [r5, #16]
   d4312:	e000      	b.n	d4316 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d4314:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4316:	4628      	mov	r0, r5
   d4318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d431c:	000dd940 	.word	0x000dd940

000d4320 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4320:	2000      	movs	r0, #0
   d4322:	f002 bbdd 	b.w	d6ae0 <hal_timer_millis>

000d4326 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d4326:	b508      	push	{r3, lr}
   d4328:	ed2d 8b02 	vpush	{d8}
   d432c:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4330:	b128      	cbz	r0, d433e <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4332:	3801      	subs	r0, #1
   d4334:	f7ff fff7 	bl	d4326 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d4338:	ee28 0a00 	vmul.f32	s0, s16, s0
   d433c:	e001      	b.n	d4342 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d433e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d4342:	ecbd 8b02 	vpop	{d8}
   d4346:	bd08      	pop	{r3, pc}

000d4348 <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d4348:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d434a:	4d19      	ldr	r5, [pc, #100]	; (d43b0 <_Z17getSignalStrengthv+0x68>)
   d434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d434e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4350:	ac04      	add	r4, sp, #16
   d4352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4358:	e895 0003 	ldmia.w	r5, {r0, r1}
   d435c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4360:	4914      	ldr	r1, [pc, #80]	; (d43b4 <_Z17getSignalStrengthv+0x6c>)
   d4362:	a80e      	add	r0, sp, #56	; 0x38
   d4364:	f002 ff0c 	bl	d7180 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4368:	a80e      	add	r0, sp, #56	; 0x38
   d436a:	f002 ff5c 	bl	d7226 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d436e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4370:	a80e      	add	r0, sp, #56	; 0x38
   d4372:	f002 ffa9 	bl	d72c8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4376:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4378:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d437c:	f002 ff8a 	bl	d7294 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4380:	ab18      	add	r3, sp, #96	; 0x60
   d4382:	ee10 0a10 	vmov	r0, s0
   d4386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d438a:	f004 ff51 	bl	d9230 <__aeabi_f2d>
   d438e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4392:	4628      	mov	r0, r5
   d4394:	f004 ff4c 	bl	d9230 <__aeabi_f2d>
   d4398:	e9cd 0100 	strd	r0, r1, [sp]
   d439c:	4a06      	ldr	r2, [pc, #24]	; (d43b8 <_Z17getSignalStrengthv+0x70>)
   d439e:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d43a2:	4806      	ldr	r0, [pc, #24]	; (d43bc <_Z17getSignalStrengthv+0x74>)
   d43a4:	2140      	movs	r1, #64	; 0x40
   d43a6:	f002 fe5d 	bl	d7064 <snprintf>
}
   d43aa:	b019      	add	sp, #100	; 0x64
   d43ac:	bd30      	pop	{r4, r5, pc}
   d43ae:	bf00      	nop
   d43b0:	000dcfb0 	.word	0x000dcfb0
   d43b4:	2003e1bc 	.word	0x2003e1bc
   d43b8:	000dcff8 	.word	0x000dcff8
   d43bc:	2003e110 	.word	0x2003e110

000d43c0 <_Z17getBatteryContextv>:

void getBatteryContext() {
   d43c0:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d43c2:	4d0e      	ldr	r5, [pc, #56]	; (d43fc <_Z17getBatteryContextv+0x3c>)
   d43c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d43c6:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d43c8:	ac01      	add	r4, sp, #4
   d43ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d43cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d43d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d43d4:	4669      	mov	r1, sp
   d43d6:	2007      	movs	r0, #7
   d43d8:	f7ff ff3a 	bl	d4250 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
   d43dc:	2800      	cmp	r0, #0
        return val;
   d43de:	bfa8      	it	ge
   d43e0:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d43e2:	4a07      	ldr	r2, [pc, #28]	; (d4400 <_Z17getBatteryContextv+0x40>)
   d43e4:	ab08      	add	r3, sp, #32
   d43e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d43ea:	2110      	movs	r1, #16
   d43ec:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d43f0:	4804      	ldr	r0, [pc, #16]	; (d4404 <_Z17getBatteryContextv+0x44>)
   d43f2:	f002 fe37 	bl	d7064 <snprintf>

}
   d43f6:	b009      	add	sp, #36	; 0x24
   d43f8:	bd30      	pop	{r4, r5, pc}
   d43fa:	bf00      	nop
   d43fc:	000dcfd8 	.word	0x000dcfd8
   d4400:	000dd5b6 	.word	0x000dd5b6
   d4404:	2003e0bd 	.word	0x2003e0bd

000d4408 <_Z14getTemperaturev>:

int getTemperature()
{
   d4408:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d440a:	200f      	movs	r0, #15
   d440c:	f004 fbc9 	bl	d8ba2 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4410:	f004 fefc 	bl	d920c <__aeabi_i2d>
   d4414:	a320      	add	r3, pc, #128	; (adr r3, d4498 <_Z14getTemperaturev+0x90>)
   d4416:	e9d3 2300 	ldrd	r2, r3, [r3]
   d441a:	f004 ff5d 	bl	d92d8 <__aeabi_dmul>
   d441e:	f005 fa53 	bl	d98c8 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4422:	eddf 7a15 	vldr	s15, [pc, #84]	; d4478 <_Z14getTemperaturev+0x70>
   d4426:	ee07 0a10 	vmov	s14, r0
   d442a:	ee67 7a27 	vmul.f32	s15, s14, s15
   d442e:	ee17 0a90 	vmov	r0, s15
   d4432:	f004 fefd 	bl	d9230 <__aeabi_f2d>
   d4436:	2200      	movs	r2, #0
   d4438:	4b10      	ldr	r3, [pc, #64]	; (d447c <_Z14getTemperaturev+0x74>)
   d443a:	f004 fd99 	bl	d8f70 <__aeabi_dsub>
   d443e:	2200      	movs	r2, #0
   d4440:	4b0f      	ldr	r3, [pc, #60]	; (d4480 <_Z14getTemperaturev+0x78>)
   d4442:	f004 ff49 	bl	d92d8 <__aeabi_dmul>
   d4446:	f005 f9f7 	bl	d9838 <__aeabi_d2iz>
   d444a:	f004 fedf 	bl	d920c <__aeabi_i2d>
   d444e:	2200      	movs	r2, #0
   d4450:	4b0c      	ldr	r3, [pc, #48]	; (d4484 <_Z14getTemperaturev+0x7c>)
   d4452:	f004 ff41 	bl	d92d8 <__aeabi_dmul>
   d4456:	2200      	movs	r2, #0
   d4458:	4b0b      	ldr	r3, [pc, #44]	; (d4488 <_Z14getTemperaturev+0x80>)
   d445a:	f005 f867 	bl	d952c <__aeabi_ddiv>
   d445e:	2200      	movs	r2, #0
   d4460:	4b0a      	ldr	r3, [pc, #40]	; (d448c <_Z14getTemperaturev+0x84>)
   d4462:	f004 fd87 	bl	d8f74 <__adddf3>
   d4466:	f005 f9e7 	bl	d9838 <__aeabi_d2iz>
   d446a:	4b09      	ldr	r3, [pc, #36]	; (d4490 <_Z14getTemperaturev+0x88>)
   d446c:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d446e:	4b09      	ldr	r3, [pc, #36]	; (d4494 <_Z14getTemperaturev+0x8c>)
   d4470:	2201      	movs	r2, #1
   d4472:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
   d4474:	bd08      	pop	{r3, pc}
   d4476:	bf00      	nop
   d4478:	39800000 	.word	0x39800000
   d447c:	3fe00000 	.word	0x3fe00000
   d4480:	40590000 	.word	0x40590000
   d4484:	40220000 	.word	0x40220000
   d4488:	40140000 	.word	0x40140000
   d448c:	40400000 	.word	0x40400000
   d4490:	2003e164 	.word	0x2003e164
   d4494:	2003e15c 	.word	0x2003e15c
   d4498:	66666666 	.word	0x66666666
   d449c:	400a6666 	.word	0x400a6666

000d44a0 <_Z16takeMeasurementsv>:
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d44a0:	b507      	push	{r0, r1, r2, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d44a2:	4b18      	ldr	r3, [pc, #96]	; (d4504 <_Z16takeMeasurementsv+0x64>)
   d44a4:	2200      	movs	r2, #0
   d44a6:	4611      	mov	r1, r2
   d44a8:	6858      	ldr	r0, [r3, #4]
   d44aa:	f002 fd7b 	bl	d6fa4 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d44ae:	b108      	cbz	r0, d44b4 <_Z16takeMeasurementsv+0x14>
   d44b0:	f7ff ff4a 	bl	d4348 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d44b4:	f7ff ffa8 	bl	d4408 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
   d44b8:	f7ff ff82 	bl	d43c0 <_Z17getBatteryContextv>
    float batteryCharge() const {
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
   d44bc:	a901      	add	r1, sp, #4
   d44be:	2003      	movs	r0, #3
   d44c0:	f7ff fec6 	bl	d4250 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
        if (r) {
   d44c4:	b988      	cbnz	r0, d44ea <_Z16takeMeasurementsv+0x4a>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d44c6:	2006      	movs	r0, #6
   d44c8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d44cc:	f7ff ff2b 	bl	d4326 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d44d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d44d4:	ee30 0a00 	vadd.f32	s0, s0, s0
   d44d8:	ee07 3a10 	vmov	s14, r3
   d44dc:	ee30 0a00 	vadd.f32	s0, s0, s0
   d44e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d44e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d44e8:	e001      	b.n	d44ee <_Z16takeMeasurementsv+0x4e>
            return -1.0f;
   d44ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  //sysStatus.stateOfCharge = int(batteryMonitor.getSoC());
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d44ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d44f2:	4b05      	ldr	r3, [pc, #20]	; (d4508 <_Z16takeMeasurementsv+0x68>)
   d44f4:	edc3 7a02 	vstr	s15, [r3, #8]
  systemStatusWriteNeeded=true;
   d44f8:	4b04      	ldr	r3, [pc, #16]	; (d450c <_Z16takeMeasurementsv+0x6c>)
   d44fa:	2201      	movs	r2, #1
   d44fc:	701a      	strb	r2, [r3, #0]
}
   d44fe:	b003      	add	sp, #12
   d4500:	f85d fb04 	ldr.w	pc, [sp], #4
   d4504:	2003e1bc 	.word	0x2003e1bc
   d4508:	2003e188 	.word	0x2003e188
   d450c:	2003e185 	.word	0x2003e185

000d4510 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d4510:	b510      	push	{r4, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4512:	4c0d      	ldr	r4, [pc, #52]	; (d4548 <_Z11petWatchdogv+0x38>)
   d4514:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4516:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d451a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d451e:	f003 031f 	and.w	r3, r3, #31
   d4522:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4526:	f7ff fdeb 	bl	d4100 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d452a:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d452c:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d4534:	f003 031f 	and.w	r3, r3, #31
   d4538:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d453c:	f7ff fdef 	bl	d411e <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4540:	4b02      	ldr	r3, [pc, #8]	; (d454c <_Z11petWatchdogv+0x3c>)
   d4542:	2200      	movs	r2, #0
   d4544:	701a      	strb	r2, [r3, #0]
   d4546:	bd10      	pop	{r4, pc}
   d4548:	2003e108 	.word	0x2003e108
   d454c:	2003e0dc 	.word	0x2003e0dc

000d4550 <_Z14setPowerConfigv>:
}


// Power Management function
int setPowerConfig() {
   d4550:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4552:	2420      	movs	r4, #32
   d4554:	b090      	sub	sp, #64	; 0x40
   d4556:	4622      	mov	r2, r4
   d4558:	2100      	movs	r1, #0
   d455a:	4668      	mov	r0, sp
   d455c:	f005 fc03 	bl	d9d66 <memset>
   d4560:	4622      	mov	r2, r4
   d4562:	2100      	movs	r1, #0
   d4564:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4568:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d456c:	f005 fbfb 	bl	d9d66 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4570:	2100      	movs	r1, #0
   d4572:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4576:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d457a:	f002 fc7f 	bl	d6e7c <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
   d457e:	4b18      	ldr	r3, [pc, #96]	; (d45e0 <_Z14setPowerConfigv+0x90>)
   d4580:	7959      	ldrb	r1, [r3, #5]
   d4582:	9b00      	ldr	r3, [sp, #0]
   d4584:	b1a1      	cbz	r1, d45b0 <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4586:	f240 2226 	movw	r2, #550	; 0x226
   d458a:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d458e:	f241 32d8 	movw	r2, #5080	; 0x13d8
   d4592:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4596:	f44f 7200 	mov.w	r2, #512	; 0x200
   d459a:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d459e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45a2:	f241 0272 	movw	r2, #4210	; 0x1072
   d45a6:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45aa:	9300      	str	r3, [sp, #0]
   d45ac:	2100      	movs	r1, #0
   d45ae:	e012      	b.n	d45d6 <_Z14setPowerConfigv+0x86>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d45b0:	f44f 7261 	mov.w	r2, #900	; 0x384
   d45b4:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d45b8:	f241 0270 	movw	r2, #4208	; 0x1070
   d45bc:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d45c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d45c4:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d45cc:	f241 0210 	movw	r2, #4112	; 0x1010
   d45d0:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d45d4:	9300      	str	r3, [sp, #0]
   d45d6:	4668      	mov	r0, sp
   d45d8:	f002 fc50 	bl	d6e7c <system_power_management_set_config>
        .batteryChargeVoltage(4112)                                      // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
  }
}
   d45dc:	b010      	add	sp, #64	; 0x40
   d45de:	bd10      	pop	{r4, pc}
   d45e0:	2003e188 	.word	0x2003e188

000d45e4 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d45e4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45e6:	f002 fc85 	bl	d6ef4 <spark_cloud_flag_connected>
  return !Particle.connected();
   d45ea:	f080 0001 	eor.w	r0, r0, #1
}
   d45ee:	b2c0      	uxtb	r0, r0
   d45f0:	bd08      	pop	{r3, pc}
	...

000d45f4 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d45f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d45f6:	f002 fc75 	bl	d6ee4 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d45fa:	f7ff fe91 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45fe:	2500      	movs	r5, #0
   d4600:	4604      	mov	r4, r0
   d4602:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4606:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4608:	f7ff fe8a 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d460c:	1b00      	subs	r0, r0, r4
   d460e:	eb61 0105 	sbc.w	r1, r1, r5
   d4612:	428f      	cmp	r7, r1
   d4614:	bf08      	it	eq
   d4616:	4286      	cmpeq	r6, r0
   d4618:	d305      	bcc.n	d4626 <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d461a:	f7ff ffe3 	bl	d45e4 <_Z12notConnectedv>
   d461e:	b910      	cbnz	r0, d4626 <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4620:	f002 fc50 	bl	d6ec4 <spark_process>
   d4624:	e7f0      	b.n	d4608 <_Z22disconnectFromParticlev+0x14>
   d4626:	f7ff ffdd 	bl	d45e4 <_Z12notConnectedv>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d462a:	4809      	ldr	r0, [pc, #36]	; (d4650 <_Z22disconnectFromParticlev+0x5c>)
   d462c:	2300      	movs	r3, #0
   d462e:	4619      	mov	r1, r3
   d4630:	461a      	mov	r2, r3
   d4632:	6840      	ldr	r0, [r0, #4]
   d4634:	f002 fcc6 	bl	d6fc4 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d4638:	4b06      	ldr	r3, [pc, #24]	; (d4654 <_Z22disconnectFromParticlev+0x60>)
   d463a:	2200      	movs	r2, #0
   d463c:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d463e:	4b06      	ldr	r3, [pc, #24]	; (d4658 <_Z22disconnectFromParticlev+0x64>)
   d4640:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4642:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d4646:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4648:	f002 fd2c 	bl	d70a4 <delay>
  return true;
}
   d464c:	4620      	mov	r0, r4
   d464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4650:	2003e1bc 	.word	0x2003e1bc
   d4654:	2003e188 	.word	0x2003e188
   d4658:	2003e185 	.word	0x2003e185

000d465c <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d465c:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
   d465e:	4d08      	ldr	r5, [pc, #32]	; (d4680 <_Z15resetEverythingv+0x24>)
   d4660:	2400      	movs	r4, #0
   d4662:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
   d4664:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;
   d4666:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4668:	f004 f84f 	bl	d870a <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d466c:	4b05      	ldr	r3, [pc, #20]	; (d4684 <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
   d466e:	4a06      	ldr	r2, [pc, #24]	; (d4688 <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4670:	615c      	str	r4, [r3, #20]
  currentCountsWriteNeeded=true;
   d4672:	2301      	movs	r3, #1
   d4674:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4676:	4a05      	ldr	r2, [pc, #20]	; (d468c <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4678:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d467a:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
   d467c:	7013      	strb	r3, [r2, #0]
   d467e:	bd38      	pop	{r3, r4, r5, pc}
   d4680:	2003e164 	.word	0x2003e164
   d4684:	2003e188 	.word	0x2003e188
   d4688:	2003e15c 	.word	0x2003e15c
   d468c:	2003e185 	.word	0x2003e185

000d4690 <_Z20meterParticlePublishv>:
  systemStatusWriteNeeded = true;
  return 1;
}

bool meterParticlePublish(void)
{
   d4690:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d4692:	4c07      	ldr	r4, [pc, #28]	; (d46b0 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4694:	f002 fa04 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d4698:	6823      	ldr	r3, [r4, #0]
   d469a:	1ac0      	subs	r0, r0, r3
   d469c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46a0:	d304      	bcc.n	d46ac <_Z20meterParticlePublishv+0x1c>
   d46a2:	f002 f9fd 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d46a6:	6020      	str	r0, [r4, #0]
   d46a8:	2001      	movs	r0, #1
   d46aa:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d46ac:	2000      	movs	r0, #0
}
   d46ae:	bd10      	pop	{r4, pc}
   d46b0:	2003e180 	.word	0x2003e180

000d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d46b4:	b508      	push	{r3, lr}
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
  waitUntil(meterParticlePublish);
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
   d46b6:	f7ff ffeb 	bl	d4690 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d46ba:	b118      	cbz	r0, d46c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d46bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d46c0:	f7ff bfe6 	b.w	d4690 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d46c4:	f002 fbfe 	bl	d6ec4 <spark_process>
   d46c8:	e7f5      	b.n	d46b6 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73+0x2>
	...

000d46cc <_Z14fullModemResetv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
  Serial.println(stateTransitionString);
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d46cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d46ce:	f002 fc09 	bl	d6ee4 <spark_cloud_flag_disconnect>
   d46d2:	f002 f9e5 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d46d6:	f643 2597 	movw	r5, #14999	; 0x3a97
   d46da:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46dc:	f002 fc0a 	bl	d6ef4 <spark_cloud_flag_connected>
   d46e0:	b140      	cbz	r0, d46f4 <_Z14fullModemResetv+0x28>
   d46e2:	f002 f9dd 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d46e6:	1b00      	subs	r0, r0, r4
   d46e8:	42a8      	cmp	r0, r5
   d46ea:	d803      	bhi.n	d46f4 <_Z14fullModemResetv+0x28>
		delay(100);
   d46ec:	2064      	movs	r0, #100	; 0x64
   d46ee:	f002 fcd9 	bl	d70a4 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d46f2:	e7f3      	b.n	d46dc <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d46f4:	2100      	movs	r1, #0
   d46f6:	4b09      	ldr	r3, [pc, #36]	; (d471c <_Z14fullModemResetv+0x50>)
   d46f8:	f247 5230 	movw	r2, #30000	; 0x7530
   d46fc:	4608      	mov	r0, r1
   d46fe:	f002 f977 	bl	d69f0 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4706:	f002 fccd 	bl	d70a4 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d470a:	4b05      	ldr	r3, [pc, #20]	; (d4720 <_Z14fullModemResetv+0x54>)
   d470c:	220a      	movs	r2, #10
   d470e:	681b      	ldr	r3, [r3, #0]
   d4710:	2101      	movs	r1, #1
   d4712:	4668      	mov	r0, sp
   d4714:	f003 fe20 	bl	d8358 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4718:	b003      	add	sp, #12
   d471a:	bd30      	pop	{r4, r5, pc}
   d471c:	000dd011 	.word	0x000dd011
   d4720:	2003e0f8 	.word	0x2003e0f8

000d4724 <_Z8isDSTusav>:
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
}

bool isDSTusa() {
   d4724:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4726:	f004 f80b 	bl	d8740 <_ZN9TimeClass3dayEv>
   d472a:	4605      	mov	r5, r0
  int month = Time.month();
   d472c:	f004 f819 	bl	d8762 <_ZN9TimeClass5monthEv>
   d4730:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4732:	f004 f80f 	bl	d8754 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4736:	1f23      	subs	r3, r4, #4
   d4738:	2b06      	cmp	r3, #6
   d473a:	d90e      	bls.n	d475a <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d473c:	1ee3      	subs	r3, r4, #3
   d473e:	2b08      	cmp	r3, #8
   d4740:	d80d      	bhi.n	d475e <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4742:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4744:	1a2d      	subs	r5, r5, r0
   d4746:	d501      	bpl.n	d474c <_Z8isDSTusav+0x28>
   d4748:	2c0b      	cmp	r4, #11
   d474a:	e002      	b.n	d4752 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d474c:	2d07      	cmp	r5, #7
   d474e:	dd06      	ble.n	d475e <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4750:	2c03      	cmp	r4, #3
   d4752:	bf14      	ite	ne
   d4754:	2000      	movne	r0, #0
   d4756:	2001      	moveq	r0, #1
   d4758:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d475a:	2001      	movs	r0, #1
   d475c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d475e:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4760:	bd38      	pop	{r3, r4, r5, pc}

000d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4762:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4764:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4766:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4768:	b17c      	cbz	r4, d478a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d476a:	6863      	ldr	r3, [r4, #4]
   d476c:	3b01      	subs	r3, #1
   d476e:	6063      	str	r3, [r4, #4]
   d4770:	b95b      	cbnz	r3, d478a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4772:	6823      	ldr	r3, [r4, #0]
   d4774:	4620      	mov	r0, r4
   d4776:	689b      	ldr	r3, [r3, #8]
   d4778:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d477a:	68a3      	ldr	r3, [r4, #8]
   d477c:	3b01      	subs	r3, #1
   d477e:	60a3      	str	r3, [r4, #8]
   d4780:	b91b      	cbnz	r3, d478a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4782:	6823      	ldr	r3, [r4, #0]
   d4784:	4620      	mov	r0, r4
   d4786:	68db      	ldr	r3, [r3, #12]
   d4788:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d478a:	4628      	mov	r0, r5
   d478c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4790 <_Z11recordCountv>:
  rtc.loop();                                                         // keeps the clock up to date
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d4790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4794:	4d41      	ldr	r5, [pc, #260]	; (d489c <_Z11recordCountv+0x10c>)
   d4796:	f8df 8134 	ldr.w	r8, [pc, #308]	; d48cc <_Z11recordCountv+0x13c>
   d479a:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d479c:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d47a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d47a4:	f003 031f 	and.w	r3, r3, #31
   d47a8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d47ac:	b0c4      	sub	sp, #272	; 0x110
   d47ae:	f7ff fca7 	bl	d4100 <nrf_gpio_pin_set>
   d47b2:	f002 f975 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
  static byte currentMinutePeriod;                                    // Current minute
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d47b6:	4b3a      	ldr	r3, [pc, #232]	; (d48a0 <_Z11recordCountv+0x110>)
   d47b8:	681a      	ldr	r2, [r3, #0]
   d47ba:	1a80      	subs	r0, r0, r2
   d47bc:	4a39      	ldr	r2, [pc, #228]	; (d48a4 <_Z11recordCountv+0x114>)
   d47be:	6911      	ldr	r1, [r2, #16]
   d47c0:	4288      	cmp	r0, r1
   d47c2:	461c      	mov	r4, r3
   d47c4:	4616      	mov	r6, r2
   d47c6:	d21c      	bcs.n	d4802 <_Z11recordCountv+0x72>
   d47c8:	f898 7000 	ldrb.w	r7, [r8]
   d47cc:	b9cf      	cbnz	r7, d4802 <_Z11recordCountv+0x72>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
   d47ce:	7913      	ldrb	r3, [r2, #4]
   d47d0:	b11b      	cbz	r3, d47da <_Z11recordCountv+0x4a>
   d47d2:	f002 fb8f 	bl	d6ef4 <spark_cloud_flag_connected>
   d47d6:	2800      	cmp	r0, #0
   d47d8:	d150      	bne.n	d487c <_Z11recordCountv+0xec>
    waitUntil(meterParticlePublish);
    Particle.publish("Event","Debounced", PRIVATE);
  }

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d47da:	4b33      	ldr	r3, [pc, #204]	; (d48a8 <_Z11recordCountv+0x118>)
   d47dc:	2201      	movs	r2, #1
   d47de:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47e0:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d47e2:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d47e6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d47ea:	f003 031f 	and.w	r3, r3, #31
   d47ee:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d47f2:	f7ff fc94 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
   d47f6:	4b2d      	ldr	r3, [pc, #180]	; (d48ac <_Z11recordCountv+0x11c>)
   d47f8:	2200      	movs	r2, #0
   d47fa:	701a      	strb	r2, [r3, #0]
}
   d47fc:	b044      	add	sp, #272	; 0x110
   d47fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4802:	f002 f94d 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4806:	4f2a      	ldr	r7, [pc, #168]	; (d48b0 <_Z11recordCountv+0x120>)
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
   d4808:	6020      	str	r0, [r4, #0]
    awokeFromNap = false;                                             // Reset the awoke flag
   d480a:	2300      	movs	r3, #0

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d480c:	783c      	ldrb	r4, [r7, #0]

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag
   d480e:	f888 3000 	strb.w	r3, [r8]

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d4812:	f003 ff8b 	bl	d872c <_ZN9TimeClass6minuteEv>
   d4816:	4284      	cmp	r4, r0
   d4818:	4c26      	ldr	r4, [pc, #152]	; (d48b4 <_Z11recordCountv+0x124>)
   d481a:	d004      	beq.n	d4826 <_Z11recordCountv+0x96>
      currentMinutePeriod = Time.minute();                            // Reset period
   d481c:	f003 ff86 	bl	d872c <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                         // Reset for the new minute
   d4820:	2301      	movs	r3, #1
  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
   d4822:	7038      	strb	r0, [r7, #0]
      current.maxMinValue = 1;                                         // Reset for the new minute
   d4824:	61a3      	str	r3, [r4, #24]
    }
    current.maxMinValue++;
   d4826:	69a3      	ldr	r3, [r4, #24]
   d4828:	4f22      	ldr	r7, [pc, #136]	; (d48b4 <_Z11recordCountv+0x124>)
   d482a:	3301      	adds	r3, #1
   d482c:	61a3      	str	r3, [r4, #24]

    current.lastCountTime = Time.now();
   d482e:	f003 ff6c 	bl	d870a <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                                // Increment the PersonCount
   d4832:	6823      	ldr	r3, [r4, #0]
      currentMinutePeriod = Time.minute();                            // Reset period
      current.maxMinValue = 1;                                         // Reset for the new minute
    }
    current.maxMinValue++;

    current.lastCountTime = Time.now();
   d4834:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                                // Increment the PersonCount
   d4836:	3301      	adds	r3, #1
   d4838:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                                 // Increment the PersonCount
   d483a:	68a3      	ldr	r3, [r4, #8]
   d483c:	3301      	adds	r3, #1
   d483e:	60a3      	str	r3, [r4, #8]
    if (sysStatus.verboseMode && Particle.connected()) {
   d4840:	7933      	ldrb	r3, [r6, #4]
   d4842:	2b00      	cmp	r3, #0
   d4844:	d0c9      	beq.n	d47da <_Z11recordCountv+0x4a>
   d4846:	f002 fb55 	bl	d6ef4 <spark_cloud_flag_connected>
   d484a:	2800      	cmp	r0, #0
   d484c:	d0c5      	beq.n	d47da <_Z11recordCountv+0x4a>
      char data[256];                                                    // Store the date in this character array - not global
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d484e:	68bb      	ldr	r3, [r7, #8]
   d4850:	9300      	str	r3, [sp, #0]
   d4852:	683b      	ldr	r3, [r7, #0]
   d4854:	4a18      	ldr	r2, [pc, #96]	; (d48b8 <_Z11recordCountv+0x128>)
   d4856:	f44f 7180 	mov.w	r1, #256	; 0x100
   d485a:	a804      	add	r0, sp, #16
   d485c:	f002 fc02 	bl	d7064 <snprintf>
      waitUntil(meterParticlePublish);
   d4860:	f7ff ff28 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4864:	4b15      	ldr	r3, [pc, #84]	; (d48bc <_Z11recordCountv+0x12c>)
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
   d4866:	4916      	ldr	r1, [pc, #88]	; (d48c0 <_Z11recordCountv+0x130>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4868:	781b      	ldrb	r3, [r3, #0]
   d486a:	2200      	movs	r2, #0
   d486c:	f88d 2000 	strb.w	r2, [sp]
   d4870:	a802      	add	r0, sp, #8
   d4872:	aa04      	add	r2, sp, #16
   d4874:	f7ff fcd7 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4878:	a803      	add	r0, sp, #12
   d487a:	e00b      	b.n	d4894 <_Z11recordCountv+0x104>
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
    waitUntil(meterParticlePublish);
   d487c:	f7ff ff1a 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4880:	4b0e      	ldr	r3, [pc, #56]	; (d48bc <_Z11recordCountv+0x12c>)
    Particle.publish("Event","Debounced", PRIVATE);
   d4882:	4a10      	ldr	r2, [pc, #64]	; (d48c4 <_Z11recordCountv+0x134>)
   d4884:	781b      	ldrb	r3, [r3, #0]
   d4886:	4910      	ldr	r1, [pc, #64]	; (d48c8 <_Z11recordCountv+0x138>)
   d4888:	f88d 7000 	strb.w	r7, [sp]
   d488c:	a804      	add	r0, sp, #16
   d488e:	f7ff fcca 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4892:	a805      	add	r0, sp, #20
   d4894:	f7ff ff65 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4898:	e79f      	b.n	d47da <_Z11recordCountv+0x4a>
   d489a:	bf00      	nop
   d489c:	2003e108 	.word	0x2003e108
   d48a0:	2003e154 	.word	0x2003e154
   d48a4:	2003e188 	.word	0x2003e188
   d48a8:	2003e15c 	.word	0x2003e15c
   d48ac:	2003e07c 	.word	0x2003e07c
   d48b0:	2003e0d5 	.word	0x2003e0d5
   d48b4:	2003e164 	.word	0x2003e164
   d48b8:	000dd01e 	.word	0x000dd01e
   d48bc:	2003e0b4 	.word	0x2003e0b4
   d48c0:	000dd2ec 	.word	0x000dd2ec
   d48c4:	000dd03b 	.word	0x000dd03b
   d48c8:	000dd045 	.word	0x000dd045
   d48cc:	2003e150 	.word	0x2003e150

000d48d0 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d48d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d48d4:	481f      	ldr	r0, [pc, #124]	; (d4954 <_Z17connectToParticlev+0x84>)
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d48d6:	4d20      	ldr	r5, [pc, #128]	; (d4958 <_Z17connectToParticlev+0x88>)
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	2300      	movs	r3, #0
   d48dc:	461a      	mov	r2, r3
   d48de:	4619      	mov	r1, r3
   d48e0:	f002 fb68 	bl	d6fb4 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d48e4:	f002 faf6 	bl	d6ed4 <spark_cloud_flag_connect>
   d48e8:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48ec:	f240 36e7 	movw	r6, #999	; 0x3e7
   d48f0:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d48f2:	f7ff fd15 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48f6:	f04f 0900 	mov.w	r9, #0
   d48fa:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48fc:	f7ff fd10 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4900:	ebb0 0008 	subs.w	r0, r0, r8
   d4904:	eb61 0109 	sbc.w	r1, r1, r9
   d4908:	428f      	cmp	r7, r1
   d490a:	bf08      	it	eq
   d490c:	4286      	cmpeq	r6, r0
   d490e:	d305      	bcc.n	d491c <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4910:	f002 faf0 	bl	d6ef4 <spark_cloud_flag_connected>
   d4914:	b910      	cbnz	r0, d491c <_Z17connectToParticlev+0x4c>
            spark_process();
   d4916:	f002 fad5 	bl	d6ec4 <spark_process>
   d491a:	e7ef      	b.n	d48fc <_Z17connectToParticlev+0x2c>
   d491c:	f002 faea 	bl	d6ef4 <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4920:	b148      	cbz	r0, d4936 <_Z17connectToParticlev+0x66>
   d4922:	f002 fae7 	bl	d6ef4 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d4926:	b198      	cbz	r0, d4950 <_Z17connectToParticlev+0x80>
    sysStatus.connectedStatus = true;
   d4928:	4a0c      	ldr	r2, [pc, #48]	; (d495c <_Z17connectToParticlev+0x8c>)
   d492a:	2301      	movs	r3, #1
   d492c:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d492e:	4a0c      	ldr	r2, [pc, #48]	; (d4960 <_Z17connectToParticlev+0x90>)
   d4930:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4936:	782b      	ldrb	r3, [r5, #0]
   d4938:	b10b      	cbz	r3, d493e <_Z17connectToParticlev+0x6e>
   d493a:	f7ff ff29 	bl	d4790 <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d493e:	f002 f8af 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4942:	4b08      	ldr	r3, [pc, #32]	; (d4964 <_Z17connectToParticlev+0x94>)
   d4944:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4946:	f002 fabd 	bl	d6ec4 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d494a:	3c01      	subs	r4, #1
   d494c:	d0e9      	beq.n	d4922 <_Z17connectToParticlev+0x52>
   d494e:	e7d0      	b.n	d48f2 <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d4950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4954:	2003e1bc 	.word	0x2003e1bc
   d4958:	2003e07c 	.word	0x2003e07c
   d495c:	2003e188 	.word	0x2003e188
   d4960:	2003e185 	.word	0x2003e185
   d4964:	2003e5f8 	.word	0x2003e5f8

000d4968 <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d4968:	b510      	push	{r4, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d496a:	4c1a      	ldr	r4, [pc, #104]	; (d49d4 <_Z9sendEventv+0x6c>)
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d496c:	b0ca      	sub	sp, #296	; 0x128
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d496e:	69a3      	ldr	r3, [r4, #24]
   d4970:	9306      	str	r3, [sp, #24]
   d4972:	6963      	ldr	r3, [r4, #20]
   d4974:	9305      	str	r3, [sp, #20]
   d4976:	4b18      	ldr	r3, [pc, #96]	; (d49d8 <_Z9sendEventv+0x70>)
   d4978:	695a      	ldr	r2, [r3, #20]
   d497a:	9204      	str	r2, [sp, #16]
   d497c:	6922      	ldr	r2, [r4, #16]
   d497e:	9203      	str	r2, [sp, #12]
   d4980:	4a16      	ldr	r2, [pc, #88]	; (d49dc <_Z9sendEventv+0x74>)
   d4982:	9202      	str	r2, [sp, #8]
   d4984:	689b      	ldr	r3, [r3, #8]
   d4986:	9301      	str	r3, [sp, #4]
   d4988:	68a3      	ldr	r3, [r4, #8]
   d498a:	9300      	str	r3, [sp, #0]
   d498c:	4a14      	ldr	r2, [pc, #80]	; (d49e0 <_Z9sendEventv+0x78>)
   d498e:	6823      	ldr	r3, [r4, #0]
   d4990:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4994:	a80a      	add	r0, sp, #40	; 0x28
   d4996:	f002 fb65 	bl	d7064 <snprintf>
   d499a:	4b12      	ldr	r3, [pc, #72]	; (d49e4 <_Z9sendEventv+0x7c>)
  Particle.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d499c:	4912      	ldr	r1, [pc, #72]	; (d49e8 <_Z9sendEventv+0x80>)
   d499e:	781b      	ldrb	r3, [r3, #0]
   d49a0:	2200      	movs	r2, #0
   d49a2:	f88d 2000 	strb.w	r2, [sp]
   d49a6:	a808      	add	r0, sp, #32
   d49a8:	aa0a      	add	r2, sp, #40	; 0x28
   d49aa:	f7ff fc3c 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d49ae:	a809      	add	r0, sp, #36	; 0x24
   d49b0:	f7ff fed7 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true;                                                // set the data inflight flag
   d49b4:	4b0d      	ldr	r3, [pc, #52]	; (d49ec <_Z9sendEventv+0x84>)
   d49b6:	2201      	movs	r2, #1
   d49b8:	701a      	strb	r2, [r3, #0]
   d49ba:	f002 f871 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d49be:	4b0c      	ldr	r3, [pc, #48]	; (d49f0 <_Z9sendEventv+0x88>)
   d49c0:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d49c2:	f003 fea9 	bl	d8718 <_ZN9TimeClass4hourEv>
   d49c6:	4b0b      	ldr	r3, [pc, #44]	; (d49f4 <_Z9sendEventv+0x8c>)
   d49c8:	6018      	str	r0, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d49ca:	6823      	ldr	r3, [r4, #0]
   d49cc:	6063      	str	r3, [r4, #4]
}
   d49ce:	b04a      	add	sp, #296	; 0x128
   d49d0:	bd10      	pop	{r4, pc}
   d49d2:	bf00      	nop
   d49d4:	2003e164 	.word	0x2003e164
   d49d8:	2003e188 	.word	0x2003e188
   d49dc:	2003e0bd 	.word	0x2003e0bd
   d49e0:	000dd04b 	.word	0x000dd04b
   d49e4:	2003e0b4 	.word	0x2003e0b4
   d49e8:	000dd0b2 	.word	0x000dd0b2
   d49ec:	2003e184 	.word	0x2003e184
   d49f0:	2003e0d0 	.word	0x2003e0d0
   d49f4:	2003e0d8 	.word	0x2003e0d8

000d49f8 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d49fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d49fc:	b094      	sub	sp, #80	; 0x50
   d49fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4a00:	b923      	cbnz	r3, d4a0c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4a02:	491c      	ldr	r1, [pc, #112]	; (d4a74 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4a04:	a804      	add	r0, sp, #16
   d4a06:	f005 fc37 	bl	da278 <strcpy>
   d4a0a:	e017      	b.n	d4a3c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4a0c:	4608      	mov	r0, r1
   d4a0e:	f004 ffe7 	bl	d99e0 <atoi>
   d4a12:	28c8      	cmp	r0, #200	; 0xc8
   d4a14:	d004      	beq.n	d4a20 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4a16:	4620      	mov	r0, r4
   d4a18:	f004 ffe2 	bl	d99e0 <atoi>
   d4a1c:	28c9      	cmp	r0, #201	; 0xc9
   d4a1e:	d11e      	bne.n	d4a5e <_Z14UbidotsHandlerPKcS0_+0x66>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4a20:	4915      	ldr	r1, [pc, #84]	; (d4a78 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4a22:	a804      	add	r0, sp, #16
   d4a24:	f005 fc28 	bl	da278 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4a28:	f003 fe6f 	bl	d870a <_ZN9TimeClass3nowEv>
   d4a2c:	4b13      	ldr	r3, [pc, #76]	; (d4a7c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4a2e:	6298      	str	r0, [r3, #40]	; 0x28
    systemStatusWriteNeeded = true;
   d4a30:	4b13      	ldr	r3, [pc, #76]	; (d4a80 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4a32:	2201      	movs	r2, #1
   d4a34:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4a36:	4b13      	ldr	r3, [pc, #76]	; (d4a84 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4a38:	2200      	movs	r2, #0
   d4a3a:	701a      	strb	r2, [r3, #0]
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  waitUntil(meterParticlePublish);
   d4a3c:	f7ff fe3a 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4a40:	4b11      	ldr	r3, [pc, #68]	; (d4a88 <_Z14UbidotsHandlerPKcS0_+0x90>)
  Particle.publish("Ubidots Hook", responseString, PRIVATE);
   d4a42:	4912      	ldr	r1, [pc, #72]	; (d4a8c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4a44:	781b      	ldrb	r3, [r3, #0]
   d4a46:	2200      	movs	r2, #0
   d4a48:	f88d 2000 	strb.w	r2, [sp]
   d4a4c:	a802      	add	r0, sp, #8
   d4a4e:	aa04      	add	r2, sp, #16
   d4a50:	f7ff fbe9 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4a54:	a803      	add	r0, sp, #12
   d4a56:	f7ff fe84 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4a5a:	b014      	add	sp, #80	; 0x50
   d4a5c:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f004 ffbe 	bl	d99e0 <atoi>
   d4a64:	4a0a      	ldr	r2, [pc, #40]	; (d4a90 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4a66:	4603      	mov	r3, r0
   d4a68:	2140      	movs	r1, #64	; 0x40
   d4a6a:	a804      	add	r0, sp, #16
   d4a6c:	f002 fafa 	bl	d7064 <snprintf>
   d4a70:	e7e4      	b.n	d4a3c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4a72:	bf00      	nop
   d4a74:	000dd0ca 	.word	0x000dd0ca
   d4a78:	000dd0df 	.word	0x000dd0df
   d4a7c:	2003e188 	.word	0x2003e188
   d4a80:	2003e185 	.word	0x2003e185
   d4a84:	2003e184 	.word	0x2003e184
   d4a88:	2003e0b4 	.word	0x2003e0b4
   d4a8c:	000dd0d2 	.word	0x000dd0d2
   d4a90:	000dd0f1 	.word	0x000dd0f1

000d4a94 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d4a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a96:	490d      	ldr	r1, [pc, #52]	; (d4acc <_Z12hardResetNow6String+0x38>)
   d4a98:	f003 fb6f 	bl	d817a <_ZNK6String6equalsEPKc>
   d4a9c:	2400      	movs	r4, #0
  if (command == "1")
   d4a9e:	b190      	cbz	r0, d4ac6 <_Z12hardResetNow6String+0x32>
   d4aa0:	4b0b      	ldr	r3, [pc, #44]	; (d4ad0 <_Z12hardResetNow6String+0x3c>)
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4aa2:	4a0c      	ldr	r2, [pc, #48]	; (d4ad4 <_Z12hardResetNow6String+0x40>)
   d4aa4:	781b      	ldrb	r3, [r3, #0]
   d4aa6:	490c      	ldr	r1, [pc, #48]	; (d4ad8 <_Z12hardResetNow6String+0x44>)
   d4aa8:	f88d 4000 	strb.w	r4, [sp]
   d4aac:	a802      	add	r0, sp, #8
   d4aae:	f7ff fbba 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4ab2:	a803      	add	r0, sp, #12
   d4ab4:	f7ff fe55 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    rtc.setAlarm(10);
   d4ab8:	4623      	mov	r3, r4
   d4aba:	2201      	movs	r2, #1
   d4abc:	210a      	movs	r1, #10
   d4abe:	4807      	ldr	r0, [pc, #28]	; (d4adc <_Z12hardResetNow6String+0x48>)
   d4ac0:	f001 ff09 	bl	d68d6 <_ZN8MCP794108setAlarmEibi>
   d4ac4:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4ac6:	b004      	add	sp, #16
   d4ac8:	bd10      	pop	{r4, pc}
   d4aca:	bf00      	nop
   d4acc:	000dd44c 	.word	0x000dd44c
   d4ad0:	2003e0b4 	.word	0x2003e0b4
   d4ad4:	000dd10e 	.word	0x000dd10e
   d4ad8:	000dd273 	.word	0x000dd273
   d4adc:	2003e098 	.word	0x2003e098

000d4ae0 <_Z11setDebounce6String>:

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4ae0:	b570      	push	{r4, r5, r6, lr}
   d4ae2:	b086      	sub	sp, #24
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4ae4:	a903      	add	r1, sp, #12
   d4ae6:	6800      	ldr	r0, [r0, #0]
   d4ae8:	f006 ff4a 	bl	db980 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4aec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4af4:	d435      	bmi.n	d4b62 <_Z11setDebounce6String+0x82>
   d4af6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4afa:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4b02:	bfcc      	ite	gt
   d4b04:	2501      	movgt	r5, #1
   d4b06:	2500      	movle	r5, #0
   d4b08:	bb5d      	cbnz	r5, d4b62 <_Z11setDebounce6String+0x82>
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b0a:	eddf 7a18 	vldr	s15, [pc, #96]	; d4b6c <_Z11setDebounce6String+0x8c>
  systemStatusWriteNeeded = true;
   d4b0e:	4b18      	ldr	r3, [pc, #96]	; (d4b70 <_Z11setDebounce6String+0x90>)
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b10:	4e18      	ldr	r6, [pc, #96]	; (d4b74 <_Z11setDebounce6String+0x94>)
   d4b12:	ee60 7a27 	vmul.f32	s15, s0, s15
  systemStatusWriteNeeded = true;
   d4b16:	2401      	movs	r4, #1
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  systemStatusWriteNeeded = true;
   d4b1c:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b1e:	ee10 0a10 	vmov	r0, s0
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b22:	edc6 7a04 	vstr	s15, [r6, #16]
  systemStatusWriteNeeded = true;
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b26:	f004 fb83 	bl	d9230 <__aeabi_f2d>
   d4b2a:	4a13      	ldr	r2, [pc, #76]	; (d4b78 <_Z11setDebounce6String+0x98>)
   d4b2c:	e9cd 0100 	strd	r0, r1, [sp]
   d4b30:	2108      	movs	r1, #8
   d4b32:	4812      	ldr	r0, [pc, #72]	; (d4b7c <_Z11setDebounce6String+0x9c>)
   d4b34:	f002 fa96 	bl	d7064 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4b38:	7933      	ldrb	r3, [r6, #4]
   d4b3a:	b1a3      	cbz	r3, d4b66 <_Z11setDebounce6String+0x86>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b3c:	f002 f9da 	bl	d6ef4 <spark_cloud_flag_connected>
   d4b40:	b188      	cbz	r0, d4b66 <_Z11setDebounce6String+0x86>
    waitUntil(meterParticlePublish);
   d4b42:	f7ff fdb7 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4b46:	4b0e      	ldr	r3, [pc, #56]	; (d4b80 <_Z11setDebounce6String+0xa0>)
    Particle.publish("Debounce",debounceStr, PRIVATE);
   d4b48:	4a0c      	ldr	r2, [pc, #48]	; (d4b7c <_Z11setDebounce6String+0x9c>)
   d4b4a:	781b      	ldrb	r3, [r3, #0]
   d4b4c:	490d      	ldr	r1, [pc, #52]	; (d4b84 <_Z11setDebounce6String+0xa4>)
   d4b4e:	f88d 5000 	strb.w	r5, [sp]
   d4b52:	a804      	add	r0, sp, #16
   d4b54:	f7ff fb67 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4b58:	a805      	add	r0, sp, #20
   d4b5a:	f7ff fe02 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b5e:	4620      	mov	r0, r4
   d4b60:	e002      	b.n	d4b68 <_Z11setDebounce6String+0x88>

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4b62:	2000      	movs	r0, #0
   d4b64:	e000      	b.n	d4b68 <_Z11setDebounce6String+0x88>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Debounce",debounceStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4b66:	2001      	movs	r0, #1
}
   d4b68:	b006      	add	sp, #24
   d4b6a:	bd70      	pop	{r4, r5, r6, pc}
   d4b6c:	447a0000 	.word	0x447a0000
   d4b70:	2003e185 	.word	0x2003e185
   d4b74:	2003e188 	.word	0x2003e188
   d4b78:	000dd126 	.word	0x000dd126
   d4b7c:	2003df79 	.word	0x2003df79
   d4b80:	2003e0b4 	.word	0x2003e0b4
   d4b84:	000dd3cc 	.word	0x000dd3cc

000d4b88 <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4b88:	b530      	push	{r4, r5, lr}
   d4b8a:	4922      	ldr	r1, [pc, #136]	; (d4c14 <_Z12setSolarMode6String+0x8c>)
   d4b8c:	b085      	sub	sp, #20
   d4b8e:	4604      	mov	r4, r0
   d4b90:	f003 faf3 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4b94:	4605      	mov	r5, r0
   d4b96:	b1d8      	cbz	r0, d4bd0 <_Z12setSolarMode6String+0x48>
  {
    sysStatus.solarPowerMode = true;
   d4b98:	4b1f      	ldr	r3, [pc, #124]	; (d4c18 <_Z12setSolarMode6String+0x90>)
   d4b9a:	2401      	movs	r4, #1
   d4b9c:	715c      	strb	r4, [r3, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4b9e:	f7ff fcd7 	bl	d4550 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4ba2:	4b1e      	ldr	r3, [pc, #120]	; (d4c1c <_Z12setSolarMode6String+0x94>)
   d4ba4:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4ba6:	f7ff fd85 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4baa:	f002 f9a3 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4bae:	b908      	cbnz	r0, d4bb4 <_Z12setSolarMode6String+0x2c>
    return 1;
   d4bb0:	2001      	movs	r0, #1
   d4bb2:	e02c      	b.n	d4c0e <_Z12setSolarMode6String+0x86>
   d4bb4:	4b1a      	ldr	r3, [pc, #104]	; (d4c20 <_Z12setSolarMode6String+0x98>)
  {
    sysStatus.solarPowerMode = true;
    setPowerConfig();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4bb6:	491b      	ldr	r1, [pc, #108]	; (d4c24 <_Z12setSolarMode6String+0x9c>)
   d4bb8:	781b      	ldrb	r3, [r3, #0]
   d4bba:	2200      	movs	r2, #0
   d4bbc:	f88d 2000 	strb.w	r2, [sp]
   d4bc0:	a802      	add	r0, sp, #8
   d4bc2:	4a19      	ldr	r2, [pc, #100]	; (d4c28 <_Z12setSolarMode6String+0xa0>)
   d4bc4:	f7ff fb2f 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4bc8:	a803      	add	r0, sp, #12
   d4bca:	f7ff fdca 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bce:	e7ef      	b.n	d4bb0 <_Z12setSolarMode6String+0x28>
   d4bd0:	4916      	ldr	r1, [pc, #88]	; (d4c2c <_Z12setSolarMode6String+0xa4>)
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f003 fad1 	bl	d817a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4bd8:	b1c8      	cbz	r0, d4c0e <_Z12setSolarMode6String+0x86>
  {
    sysStatus.solarPowerMode = false;
   d4bda:	4b0f      	ldr	r3, [pc, #60]	; (d4c18 <_Z12setSolarMode6String+0x90>)
   d4bdc:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
   d4bde:	4b0f      	ldr	r3, [pc, #60]	; (d4c1c <_Z12setSolarMode6String+0x94>)
   d4be0:	2401      	movs	r4, #1
   d4be2:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4be4:	f7ff fcb4 	bl	d4550 <_Z14setPowerConfigv>
    waitUntil(meterParticlePublish);
   d4be8:	f7ff fd64 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4bec:	f002 f982 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4bf0:	2800      	cmp	r0, #0
   d4bf2:	d0dd      	beq.n	d4bb0 <_Z12setSolarMode6String+0x28>
   d4bf4:	4b0a      	ldr	r3, [pc, #40]	; (d4c20 <_Z12setSolarMode6String+0x98>)
   d4bf6:	4a0e      	ldr	r2, [pc, #56]	; (d4c30 <_Z12setSolarMode6String+0xa8>)
   d4bf8:	781b      	ldrb	r3, [r3, #0]
   d4bfa:	490a      	ldr	r1, [pc, #40]	; (d4c24 <_Z12setSolarMode6String+0x9c>)
   d4bfc:	f88d 5000 	strb.w	r5, [sp]
   d4c00:	a802      	add	r0, sp, #8
   d4c02:	f7ff fb10 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c06:	a803      	add	r0, sp, #12
   d4c08:	f7ff fdab 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c0c:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4c0e:	b005      	add	sp, #20
   d4c10:	bd30      	pop	{r4, r5, pc}
   d4c12:	bf00      	nop
   d4c14:	000dd44c 	.word	0x000dd44c
   d4c18:	2003e188 	.word	0x2003e188
   d4c1c:	2003e185 	.word	0x2003e185
   d4c20:	2003e0b4 	.word	0x2003e0b4
   d4c24:	000dd15f 	.word	0x000dd15f
   d4c28:	000dd130 	.word	0x000dd130
   d4c2c:	000dd147 	.word	0x000dd147
   d4c30:	000dd149 	.word	0x000dd149

000d4c34 <_Z14setverboseMode6String>:

int setverboseMode(String command) // Function to force sending data in current hour
{
   d4c34:	b530      	push	{r4, r5, lr}
   d4c36:	4920      	ldr	r1, [pc, #128]	; (d4cb8 <_Z14setverboseMode6String+0x84>)
   d4c38:	b085      	sub	sp, #20
   d4c3a:	4604      	mov	r4, r0
   d4c3c:	f003 fa9d 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c40:	4605      	mov	r5, r0
   d4c42:	b1c8      	cbz	r0, d4c78 <_Z14setverboseMode6String+0x44>
  {
    sysStatus.verboseMode = true;
   d4c44:	4b1d      	ldr	r3, [pc, #116]	; (d4cbc <_Z14setverboseMode6String+0x88>)
   d4c46:	2401      	movs	r4, #1
   d4c48:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c4a:	4b1d      	ldr	r3, [pc, #116]	; (d4cc0 <_Z14setverboseMode6String+0x8c>)
   d4c4c:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c4e:	f7ff fd31 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4c52:	f002 f94f 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c56:	b908      	cbnz	r0, d4c5c <_Z14setverboseMode6String+0x28>
    return 1;
   d4c58:	2001      	movs	r0, #1
   d4c5a:	e02a      	b.n	d4cb2 <_Z14setverboseMode6String+0x7e>
   d4c5c:	4b19      	ldr	r3, [pc, #100]	; (d4cc4 <_Z14setverboseMode6String+0x90>)
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c5e:	491a      	ldr	r1, [pc, #104]	; (d4cc8 <_Z14setverboseMode6String+0x94>)
   d4c60:	781b      	ldrb	r3, [r3, #0]
   d4c62:	2200      	movs	r2, #0
   d4c64:	f88d 2000 	strb.w	r2, [sp]
   d4c68:	a802      	add	r0, sp, #8
   d4c6a:	4a18      	ldr	r2, [pc, #96]	; (d4ccc <_Z14setverboseMode6String+0x98>)
   d4c6c:	f7ff fadb 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c70:	a803      	add	r0, sp, #12
   d4c72:	f7ff fd76 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c76:	e7ef      	b.n	d4c58 <_Z14setverboseMode6String+0x24>
   d4c78:	4915      	ldr	r1, [pc, #84]	; (d4cd0 <_Z14setverboseMode6String+0x9c>)
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f003 fa7d 	bl	d817a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4c80:	b1b8      	cbz	r0, d4cb2 <_Z14setverboseMode6String+0x7e>
  {
    sysStatus.verboseMode = false;
   d4c82:	4b0e      	ldr	r3, [pc, #56]	; (d4cbc <_Z14setverboseMode6String+0x88>)
   d4c84:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c86:	4b0e      	ldr	r3, [pc, #56]	; (d4cc0 <_Z14setverboseMode6String+0x8c>)
   d4c88:	2401      	movs	r4, #1
   d4c8a:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c8c:	f7ff fd12 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4c90:	f002 f930 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4c94:	2800      	cmp	r0, #0
   d4c96:	d0df      	beq.n	d4c58 <_Z14setverboseMode6String+0x24>
   d4c98:	4b0a      	ldr	r3, [pc, #40]	; (d4cc4 <_Z14setverboseMode6String+0x90>)
   d4c9a:	4a0e      	ldr	r2, [pc, #56]	; (d4cd4 <_Z14setverboseMode6String+0xa0>)
   d4c9c:	781b      	ldrb	r3, [r3, #0]
   d4c9e:	490a      	ldr	r1, [pc, #40]	; (d4cc8 <_Z14setverboseMode6String+0x94>)
   d4ca0:	f88d 5000 	strb.w	r5, [sp]
   d4ca4:	a802      	add	r0, sp, #8
   d4ca6:	f7ff fabe 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4caa:	a803      	add	r0, sp, #12
   d4cac:	f7ff fd59 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cb0:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4cb2:	b005      	add	sp, #20
   d4cb4:	bd30      	pop	{r4, r5, pc}
   d4cb6:	bf00      	nop
   d4cb8:	000dd44c 	.word	0x000dd44c
   d4cbc:	2003e188 	.word	0x2003e188
   d4cc0:	2003e185 	.word	0x2003e185
   d4cc4:	2003e0b4 	.word	0x2003e0b4
   d4cc8:	000dd15f 	.word	0x000dd15f
   d4ccc:	000dd164 	.word	0x000dd164
   d4cd0:	000dd147 	.word	0x000dd147
   d4cd4:	000dd175 	.word	0x000dd175

000d4cd8 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4cdc:	b0cd      	sub	sp, #308	; 0x134
   d4cde:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4ce0:	f7ff fa8a 	bl	d41f8 <_ZN10CloudClass8syncTimeEv.isra.41>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4ce4:	f7ff fb1c 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4ce8:	2700      	movs	r7, #0
   d4cea:	4606      	mov	r6, r0
   d4cec:	f247 582f 	movw	r8, #29999	; 0x752f
   d4cf0:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4cf4:	f7ff fb14 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4cf8:	1b80      	subs	r0, r0, r6
   d4cfa:	eb61 0107 	sbc.w	r1, r1, r7
   d4cfe:	4589      	cmp	r9, r1
   d4d00:	bf08      	it	eq
   d4d02:	4580      	cmpeq	r8, r0
   d4d04:	d305      	bcc.n	d4d12 <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4d06:	f7ff fa81 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.43>
   d4d0a:	b910      	cbnz	r0, d4d12 <_Z11setTimeZone6String+0x3a>
            spark_process();
   d4d0c:	f002 f8da 	bl	d6ec4 <spark_process>
   d4d10:	e7f0      	b.n	d4cf4 <_Z11setTimeZone6String+0x1c>
   d4d12:	f7ff fa7b 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.43>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d16:	220a      	movs	r2, #10
   d4d18:	a905      	add	r1, sp, #20
   d4d1a:	6820      	ldr	r0, [r4, #0]
   d4d1c:	f006 fed6 	bl	dbacc <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4d20:	f100 030c 	add.w	r3, r0, #12
   d4d24:	b2db      	uxtb	r3, r3
   d4d26:	2b18      	cmp	r3, #24
   d4d28:	d858      	bhi.n	d4ddc <_Z11setTimeZone6String+0x104>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4d2a:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4d2c:	ee07 4a90 	vmov	s15, r4
   d4d30:	4b2f      	ldr	r3, [pc, #188]	; (d4df0 <_Z11setTimeZone6String+0x118>)
   d4d32:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4d36:	ed83 0a06 	vstr	s0, [r3, #24]
  Time.zone(sysStatus.timezone);
   d4d3a:	f003 fbbf 	bl	d84bc <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4d3e:	4b2d      	ldr	r3, [pc, #180]	; (d4df4 <_Z11setTimeZone6String+0x11c>)
   d4d40:	2201      	movs	r2, #1
   d4d42:	701a      	strb	r2, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4d44:	f003 fbac 	bl	d84a0 <_ZN9TimeClass5localEv>
   d4d48:	4605      	mov	r5, r0
   d4d4a:	f003 fcde 	bl	d870a <_ZN9TimeClass3nowEv>
   d4d4e:	1a28      	subs	r0, r5, r0
   d4d50:	f004 fa5c 	bl	d920c <__aeabi_i2d>
   d4d54:	a324      	add	r3, pc, #144	; (adr r3, d4de8 <_Z11setTimeZone6String+0x110>)
   d4d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d5a:	f004 fbe7 	bl	d952c <__aeabi_ddiv>
   d4d5e:	4a26      	ldr	r2, [pc, #152]	; (d4df8 <_Z11setTimeZone6String+0x120>)
   d4d60:	e9cd 0100 	strd	r0, r1, [sp]
   d4d64:	210a      	movs	r1, #10
   d4d66:	4825      	ldr	r0, [pc, #148]	; (d4dfc <_Z11setTimeZone6String+0x124>)
   d4d68:	f002 f97c 	bl	d7064 <snprintf>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4d6c:	4623      	mov	r3, r4
   d4d6e:	4a24      	ldr	r2, [pc, #144]	; (d4e00 <_Z11setTimeZone6String+0x128>)
   d4d70:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d74:	a80c      	add	r0, sp, #48	; 0x30
   d4d76:	f002 f975 	bl	d7064 <snprintf>
  waitUntil(meterParticlePublish);
   d4d7a:	f7ff fc9b 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4d7e:	f002 f8b9 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4d82:	b160      	cbz	r0, d4d9e <_Z11setTimeZone6String+0xc6>
   d4d84:	4b1f      	ldr	r3, [pc, #124]	; (d4e04 <_Z11setTimeZone6String+0x12c>)
   d4d86:	4920      	ldr	r1, [pc, #128]	; (d4e08 <_Z11setTimeZone6String+0x130>)
   d4d88:	781b      	ldrb	r3, [r3, #0]
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	f88d 2000 	strb.w	r2, [sp]
   d4d90:	a808      	add	r0, sp, #32
   d4d92:	aa0c      	add	r2, sp, #48	; 0x30
   d4d94:	f7ff fa47 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4d98:	a809      	add	r0, sp, #36	; 0x24
   d4d9a:	f7ff fce2 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4d9e:	f7ff fc89 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4da2:	f002 f8a7 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4da6:	b1b8      	cbz	r0, d4dd8 <_Z11setTimeZone6String+0x100>
   d4da8:	f003 fcaf 	bl	d870a <_ZN9TimeClass3nowEv>
   d4dac:	4601      	mov	r1, r0
   d4dae:	a808      	add	r0, sp, #32
   d4db0:	f003 fbd4 	bl	d855c <_ZN9TimeClass7timeStrEl>
   d4db4:	9b08      	ldr	r3, [sp, #32]
   d4db6:	9303      	str	r3, [sp, #12]
   d4db8:	4b12      	ldr	r3, [pc, #72]	; (d4e04 <_Z11setTimeZone6String+0x12c>)
   d4dba:	4913      	ldr	r1, [pc, #76]	; (d4e08 <_Z11setTimeZone6String+0x130>)
   d4dbc:	781b      	ldrb	r3, [r3, #0]
   d4dbe:	2200      	movs	r2, #0
   d4dc0:	f88d 2000 	strb.w	r2, [sp]
   d4dc4:	a806      	add	r0, sp, #24
   d4dc6:	9a03      	ldr	r2, [sp, #12]
   d4dc8:	f7ff fa2d 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4dcc:	a807      	add	r0, sp, #28
   d4dce:	f7ff fcc8 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dd2:	a808      	add	r0, sp, #32
   d4dd4:	f003 f95d 	bl	d8092 <_ZN6StringD1Ev>
  return 1;
   d4dd8:	2001      	movs	r0, #1
   d4dda:	e000      	b.n	d4dde <_Z11setTimeZone6String+0x106>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4ddc:	2000      	movs	r0, #0
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  return 1;
}
   d4dde:	b04d      	add	sp, #308	; 0x134
   d4de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4de4:	f3af 8000 	nop.w
   d4de8:	00000000 	.word	0x00000000
   d4dec:	40ac2000 	.word	0x40ac2000
   d4df0:	2003e188 	.word	0x2003e188
   d4df4:	2003e185 	.word	0x2003e185
   d4df8:	000dd18a 	.word	0x000dd18a
   d4dfc:	2003e07d 	.word	0x2003e07d
   d4e00:	000dd194 	.word	0x000dd194
   d4e04:	2003e0b4 	.word	0x2003e0b4
   d4e08:	000dd323 	.word	0x000dd323

000d4e0c <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
   d4e0c:	b510      	push	{r4, lr}
   d4e0e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4e10:	220a      	movs	r2, #10
   d4e12:	a903      	add	r1, sp, #12
   d4e14:	6800      	ldr	r0, [r0, #0]
   d4e16:	f006 fe59 	bl	dbacc <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e1a:	2817      	cmp	r0, #23

int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4e1c:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e1e:	d81d      	bhi.n	d4e5c <_Z11setOpenTime6String+0x50>
  sysStatus.openTime = tempTime;
   d4e20:	4a11      	ldr	r2, [pc, #68]	; (d4e68 <_Z11setOpenTime6String+0x5c>)
   d4e22:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4e24:	4a11      	ldr	r2, [pc, #68]	; (d4e6c <_Z11setOpenTime6String+0x60>)
   d4e26:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4e28:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4e2c:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4e2e:	a806      	add	r0, sp, #24
   d4e30:	4a0f      	ldr	r2, [pc, #60]	; (d4e70 <_Z11setOpenTime6String+0x64>)
   d4e32:	f002 f917 	bl	d7064 <snprintf>
  waitUntil(meterParticlePublish);
   d4e36:	f7ff fc3d 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4e3a:	f002 f85b 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4e3e:	b178      	cbz	r0, d4e60 <_Z11setOpenTime6String+0x54>
   d4e40:	4b0c      	ldr	r3, [pc, #48]	; (d4e74 <_Z11setOpenTime6String+0x68>)
   d4e42:	490d      	ldr	r1, [pc, #52]	; (d4e78 <_Z11setOpenTime6String+0x6c>)
   d4e44:	781b      	ldrb	r3, [r3, #0]
   d4e46:	2200      	movs	r2, #0
   d4e48:	f88d 2000 	strb.w	r2, [sp]
   d4e4c:	a804      	add	r0, sp, #16
   d4e4e:	aa06      	add	r2, sp, #24
   d4e50:	f7ff f9e9 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4e54:	a805      	add	r0, sp, #20
   d4e56:	f7ff fc84 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e5a:	e001      	b.n	d4e60 <_Z11setOpenTime6String+0x54>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e5c:	2000      	movs	r0, #0
   d4e5e:	e000      	b.n	d4e62 <_Z11setOpenTime6String+0x56>
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4e60:	4620      	mov	r0, r4
}
   d4e62:	b046      	add	sp, #280	; 0x118
   d4e64:	bd10      	pop	{r4, pc}
   d4e66:	bf00      	nop
   d4e68:	2003e188 	.word	0x2003e188
   d4e6c:	2003e185 	.word	0x2003e185
   d4e70:	000dd1a8 	.word	0x000dd1a8
   d4e74:	2003e0b4 	.word	0x2003e0b4
   d4e78:	000dd323 	.word	0x000dd323

000d4e7c <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e80:	220a      	movs	r2, #10
   d4e82:	a903      	add	r1, sp, #12
   d4e84:	6800      	ldr	r0, [r0, #0]
   d4e86:	f006 fe21 	bl	dbacc <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e8a:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e8c:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e8e:	d81d      	bhi.n	d4ecc <_Z12setCloseTime6String+0x50>
  sysStatus.closeTime = tempTime;
   d4e90:	4a11      	ldr	r2, [pc, #68]	; (d4ed8 <_Z12setCloseTime6String+0x5c>)
   d4e92:	6250      	str	r0, [r2, #36]	; 0x24
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e94:	4a11      	ldr	r2, [pc, #68]	; (d4edc <_Z12setCloseTime6String+0x60>)
   d4e96:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e98:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e9c:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e9e:	a806      	add	r0, sp, #24
   d4ea0:	4a0f      	ldr	r2, [pc, #60]	; (d4ee0 <_Z12setCloseTime6String+0x64>)
   d4ea2:	f002 f8df 	bl	d7064 <snprintf>
  waitUntil(meterParticlePublish);
   d4ea6:	f7ff fc05 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4eaa:	f002 f823 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4eae:	b178      	cbz	r0, d4ed0 <_Z12setCloseTime6String+0x54>
   d4eb0:	4b0c      	ldr	r3, [pc, #48]	; (d4ee4 <_Z12setCloseTime6String+0x68>)
   d4eb2:	490d      	ldr	r1, [pc, #52]	; (d4ee8 <_Z12setCloseTime6String+0x6c>)
   d4eb4:	781b      	ldrb	r3, [r3, #0]
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	f88d 2000 	strb.w	r2, [sp]
   d4ebc:	a804      	add	r0, sp, #16
   d4ebe:	aa06      	add	r2, sp, #24
   d4ec0:	f7ff f9b1 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4ec4:	a805      	add	r0, sp, #20
   d4ec6:	f7ff fc4c 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eca:	e001      	b.n	d4ed0 <_Z12setCloseTime6String+0x54>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4ecc:	2000      	movs	r0, #0
   d4ece:	e000      	b.n	d4ed2 <_Z12setCloseTime6String+0x56>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4ed0:	4620      	mov	r0, r4
}
   d4ed2:	b046      	add	sp, #280	; 0x118
   d4ed4:	bd10      	pop	{r4, pc}
   d4ed6:	bf00      	nop
   d4ed8:	2003e188 	.word	0x2003e188
   d4edc:	2003e185 	.word	0x2003e185
   d4ee0:	000dd1bc 	.word	0x000dd1bc
   d4ee4:	2003e0b4 	.word	0x2003e0b4
   d4ee8:	000dd323 	.word	0x000dd323

000d4eec <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4eec:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4eee:	4929      	ldr	r1, [pc, #164]	; (d4f94 <_Z15setLowPowerMode6String+0xa8>)
   d4ef0:	b085      	sub	sp, #20
   d4ef2:	4604      	mov	r4, r0
   d4ef4:	f003 f941 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4ef8:	b928      	cbnz	r0, d4f06 <_Z15setLowPowerMode6String+0x1a>
   d4efa:	4927      	ldr	r1, [pc, #156]	; (d4f98 <_Z15setLowPowerMode6String+0xac>)
   d4efc:	4620      	mov	r0, r4
   d4efe:	f003 f93c 	bl	d817a <_ZNK6String6equalsEPKc>
   d4f02:	2800      	cmp	r0, #0
   d4f04:	d043      	beq.n	d4f8e <_Z15setLowPowerMode6String+0xa2>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4f06:	4923      	ldr	r1, [pc, #140]	; (d4f94 <_Z15setLowPowerMode6String+0xa8>)
   d4f08:	4620      	mov	r0, r4
   d4f0a:	f003 f936 	bl	d817a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4f0e:	b1b0      	cbz	r0, d4f3e <_Z15setLowPowerMode6String+0x52>
   d4f10:	f001 fff0 	bl	d6ef4 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4f14:	b170      	cbz	r0, d4f34 <_Z15setLowPowerMode6String+0x48>
      waitUntil(meterParticlePublish);
   d4f16:	f7ff fbcd 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4f1a:	4b20      	ldr	r3, [pc, #128]	; (d4f9c <_Z15setLowPowerMode6String+0xb0>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
   d4f1c:	4920      	ldr	r1, [pc, #128]	; (d4fa0 <_Z15setLowPowerMode6String+0xb4>)
   d4f1e:	781b      	ldrb	r3, [r3, #0]
   d4f20:	2200      	movs	r2, #0
   d4f22:	f88d 2000 	strb.w	r2, [sp]
   d4f26:	a802      	add	r0, sp, #8
   d4f28:	4a1e      	ldr	r2, [pc, #120]	; (d4fa4 <_Z15setLowPowerMode6String+0xb8>)
   d4f2a:	f7ff f97c 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f2e:	a803      	add	r0, sp, #12
   d4f30:	f7ff fc17 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
   d4f34:	4b1c      	ldr	r3, [pc, #112]	; (d4fa8 <_Z15setLowPowerMode6String+0xbc>)
    strcpy(lowPowerModeStr,"True");
   d4f36:	491d      	ldr	r1, [pc, #116]	; (d4fac <_Z15setLowPowerMode6String+0xc0>)
  {
    if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4f38:	2201      	movs	r2, #1
   d4f3a:	719a      	strb	r2, [r3, #6]
   d4f3c:	e021      	b.n	d4f82 <_Z15setLowPowerMode6String+0x96>
   d4f3e:	4916      	ldr	r1, [pc, #88]	; (d4f98 <_Z15setLowPowerMode6String+0xac>)
   d4f40:	4620      	mov	r0, r4
   d4f42:	f003 f91a 	bl	d817a <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4f46:	b1f8      	cbz	r0, d4f88 <_Z15setLowPowerMode6String+0x9c>
   d4f48:	f001 ffd4 	bl	d6ef4 <spark_cloud_flag_connected>
   d4f4c:	4c16      	ldr	r4, [pc, #88]	; (d4fa8 <_Z15setLowPowerMode6String+0xbc>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4f4e:	b918      	cbnz	r0, d4f58 <_Z15setLowPowerMode6String+0x6c>
      connectToParticle();
   d4f50:	f7ff fcbe 	bl	d48d0 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4f54:	2301      	movs	r3, #1
   d4f56:	70e3      	strb	r3, [r4, #3]
    }
    waitUntil(meterParticlePublish);
   d4f58:	f7ff fbac 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d4f5c:	4b0f      	ldr	r3, [pc, #60]	; (d4f9c <_Z15setLowPowerMode6String+0xb0>)
    Particle.publish("Mode","Normal Operations", PRIVATE);
   d4f5e:	4910      	ldr	r1, [pc, #64]	; (d4fa0 <_Z15setLowPowerMode6String+0xb4>)
   d4f60:	781b      	ldrb	r3, [r3, #0]
   d4f62:	4a13      	ldr	r2, [pc, #76]	; (d4fb0 <_Z15setLowPowerMode6String+0xc4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4f64:	2500      	movs	r5, #0
   d4f66:	a802      	add	r0, sp, #8
   d4f68:	f88d 5000 	strb.w	r5, [sp]
   d4f6c:	f7ff f95b 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f70:	a803      	add	r0, sp, #12
   d4f72:	f7ff fbf6 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4f7a:	f002 f893 	bl	d70a4 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4f7e:	490d      	ldr	r1, [pc, #52]	; (d4fb4 <_Z15setLowPowerMode6String+0xc8>)
      sysStatus.connectedStatus = true;
    }
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4f80:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4f82:	480d      	ldr	r0, [pc, #52]	; (d4fb8 <_Z15setLowPowerMode6String+0xcc>)
   d4f84:	f005 f978 	bl	da278 <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4f88:	4b0c      	ldr	r3, [pc, #48]	; (d4fbc <_Z15setLowPowerMode6String+0xd0>)
   d4f8a:	2001      	movs	r0, #1
   d4f8c:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4f8e:	b005      	add	sp, #20
   d4f90:	bd30      	pop	{r4, r5, pc}
   d4f92:	bf00      	nop
   d4f94:	000dd44c 	.word	0x000dd44c
   d4f98:	000dd147 	.word	0x000dd147
   d4f9c:	2003e0b4 	.word	0x2003e0b4
   d4fa0:	000dd15f 	.word	0x000dd15f
   d4fa4:	000dd1d3 	.word	0x000dd1d3
   d4fa8:	2003e188 	.word	0x2003e188
   d4fac:	000dd1e2 	.word	0x000dd1e2
   d4fb0:	000dd1e7 	.word	0x000dd1e7
   d4fb4:	000dd1f9 	.word	0x000dd1f9
   d4fb8:	2003e15d 	.word	0x2003e15d
   d4fbc:	2003e185 	.word	0x2003e185

000d4fc0 <_Z17checkSystemValuesv>:
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fc0:	b530      	push	{r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fc2:	4c3d      	ldr	r4, [pc, #244]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4fc4:	4d3c      	ldr	r5, [pc, #240]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fc6:	b085      	sub	sp, #20
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4fc8:	f7ff fa6a 	bl	d44a0 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fcc:	78a3      	ldrb	r3, [r4, #2]
   d4fce:	2b01      	cmp	r3, #1
   d4fd0:	bf84      	itt	hi
   d4fd2:	2300      	movhi	r3, #0
   d4fd4:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4fd6:	78e3      	ldrb	r3, [r4, #3]
   d4fd8:	2b01      	cmp	r3, #1
   d4fda:	d906      	bls.n	d4fea <_Z17checkSystemValuesv+0x2a>
   d4fdc:	f001 ff8a 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4fe0:	b110      	cbz	r0, d4fe8 <_Z17checkSystemValuesv+0x28>
   d4fe2:	2301      	movs	r3, #1
   d4fe4:	70eb      	strb	r3, [r5, #3]
   d4fe6:	e000      	b.n	d4fea <_Z17checkSystemValuesv+0x2a>
    else sysStatus.connectedStatus = false;
   d4fe8:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fea:	7923      	ldrb	r3, [r4, #4]
   d4fec:	2b01      	cmp	r3, #1
   d4fee:	bf82      	ittt	hi
   d4ff0:	4b31      	ldrhi	r3, [pc, #196]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
   d4ff2:	2200      	movhi	r2, #0
   d4ff4:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
   d4ff6:	7963      	ldrb	r3, [r4, #5]
   d4ff8:	2b01      	cmp	r3, #1
   d4ffa:	bf82      	ittt	hi
   d4ffc:	4b2e      	ldrhi	r3, [pc, #184]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
   d4ffe:	2200      	movhi	r2, #0
   d5000:	715a      	strbhi	r2, [r3, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
   d5002:	79a3      	ldrb	r3, [r4, #6]
   d5004:	2b01      	cmp	r3, #1
   d5006:	d909      	bls.n	d501c <_Z17checkSystemValuesv+0x5c>
   d5008:	492c      	ldr	r1, [pc, #176]	; (d50bc <_Z17checkSystemValuesv+0xfc>)
   d500a:	4668      	mov	r0, sp
   d500c:	f003 f888 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
   d5010:	4668      	mov	r0, sp
   d5012:	f7ff ff6b 	bl	d4eec <_Z15setLowPowerMode6String>
   d5016:	4668      	mov	r0, sp
   d5018:	f003 f83b 	bl	d8092 <_ZN6StringD1Ev>
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d501c:	68a2      	ldr	r2, [r4, #8]
   d501e:	4b26      	ldr	r3, [pc, #152]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5020:	edd4 7a06 	vldr	s15, [r4, #24]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5024:	2a1d      	cmp	r2, #29
   d5026:	bfd4      	ite	le
   d5028:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d502a:	2200      	movgt	r2, #0
   d502c:	71da      	strb	r2, [r3, #7]
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
   d502e:	6922      	ldr	r2, [r4, #16]
   d5030:	f241 7370 	movw	r3, #6000	; 0x1770
   d5034:	429a      	cmp	r2, r3
   d5036:	bf82      	ittt	hi
   d5038:	4b1f      	ldrhi	r3, [pc, #124]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
   d503a:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   d503e:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5040:	6963      	ldr	r3, [r4, #20]
   d5042:	2bff      	cmp	r3, #255	; 0xff
   d5044:	bf88      	it	hi
   d5046:	4b1c      	ldrhi	r3, [pc, #112]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5048:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d504c:	bf88      	it	hi
   d504e:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5050:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5054:	bf88      	it	hi
   d5056:	615a      	strhi	r2, [r3, #20]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d505c:	d406      	bmi.n	d506c <_Z17checkSystemValuesv+0xac>
   d505e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5062:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d506a:	dd01      	ble.n	d5070 <_Z17checkSystemValuesv+0xb0>
   d506c:	4b14      	ldr	r3, [pc, #80]	; (d50c0 <_Z17checkSystemValuesv+0x100>)
   d506e:	61a3      	str	r3, [r4, #24]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5070:	edd4 7a07 	vldr	s15, [r4, #28]
   d5074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d507c:	d406      	bmi.n	d508c <_Z17checkSystemValuesv+0xcc>
   d507e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5082:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d508a:	dd02      	ble.n	d5092 <_Z17checkSystemValuesv+0xd2>
   d508c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5090:	61e3      	str	r3, [r4, #28]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d5092:	6a23      	ldr	r3, [r4, #32]
   d5094:	2b0c      	cmp	r3, #12
   d5096:	bf82      	ittt	hi
   d5098:	4b07      	ldrhi	r3, [pc, #28]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
   d509a:	2200      	movhi	r2, #0
   d509c:	621a      	strhi	r2, [r3, #32]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d509e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d50a0:	3b0c      	subs	r3, #12
   d50a2:	2b0c      	cmp	r3, #12
   d50a4:	bf82      	ittt	hi
   d50a6:	4b04      	ldrhi	r3, [pc, #16]	; (d50b8 <_Z17checkSystemValuesv+0xf8>)
   d50a8:	2218      	movhi	r2, #24
   d50aa:	625a      	strhi	r2, [r3, #36]	; 0x24
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d50ac:	4b05      	ldr	r3, [pc, #20]	; (d50c4 <_Z17checkSystemValuesv+0x104>)
   d50ae:	2201      	movs	r2, #1
   d50b0:	701a      	strb	r2, [r3, #0]
}
   d50b2:	b005      	add	sp, #20
   d50b4:	bd30      	pop	{r4, r5, pc}
   d50b6:	bf00      	nop
   d50b8:	2003e188 	.word	0x2003e188
   d50bc:	000dd44c 	.word	0x000dd44c
   d50c0:	c0a00000 	.word	0xc0a00000
   d50c4:	2003e185 	.word	0x2003e185

000d50c8 <_Z18loadSystemDefaultsv>:
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d50c8:	b570      	push	{r4, r5, r6, lr}
   d50ca:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d50cc:	f7ff fc00 	bl	d48d0 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d50d0:	f7ff f9e6 	bl	d44a0 <_Z16takeMeasurementsv>
  waitUntil(meterParticlePublish);
   d50d4:	f7ff faee 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d50d8:	f001 ff0c 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
   d50dc:	b160      	cbz	r0, d50f8 <_Z18loadSystemDefaultsv+0x30>
   d50de:	4b1b      	ldr	r3, [pc, #108]	; (d514c <_Z18loadSystemDefaultsv+0x84>)
   d50e0:	491b      	ldr	r1, [pc, #108]	; (d5150 <_Z18loadSystemDefaultsv+0x88>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d50e2:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d50e4:	2200      	movs	r2, #0
   d50e6:	f88d 2000 	strb.w	r2, [sp]
   d50ea:	a802      	add	r0, sp, #8
   d50ec:	4a19      	ldr	r2, [pc, #100]	; (d5154 <_Z18loadSystemDefaultsv+0x8c>)
   d50ee:	f7ff f89a 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d50f2:	a803      	add	r0, sp, #12
   d50f4:	f7ff fb35 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 1;
   d50f8:	4c17      	ldr	r4, [pc, #92]	; (d5158 <_Z18loadSystemDefaultsv+0x90>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d50fa:	4918      	ldr	r1, [pc, #96]	; (d515c <_Z18loadSystemDefaultsv+0x94>)
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d50fc:	68a3      	ldr	r3, [r4, #8]
   d50fe:	2b1d      	cmp	r3, #29
   d5100:	bfcc      	ite	gt
   d5102:	2300      	movgt	r3, #0
   d5104:	2301      	movle	r3, #1
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5106:	2501      	movs	r5, #1
  sysStatus.metricUnits = false;
   d5108:	2600      	movs	r6, #0
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d510a:	a802      	add	r0, sp, #8
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d510c:	71e3      	strb	r3, [r4, #7]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d510e:	7025      	strb	r5, [r4, #0]
  sysStatus.metricUnits = false;
   d5110:	70a6      	strb	r6, [r4, #2]
  sysStatus.verboseMode = true;
   d5112:	7125      	strb	r5, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d5114:	f003 f804 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
   d5118:	a802      	add	r0, sp, #8
   d511a:	f7ff fee7 	bl	d4eec <_Z15setLowPowerMode6String>
   d511e:	a802      	add	r0, sp, #8
   d5120:	f002 ffb7 	bl	d8092 <_ZN6StringD1Ev>
  sysStatus.debounce = 1000;
   d5124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5128:	6123      	str	r3, [r4, #16]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d512a:	4b0d      	ldr	r3, [pc, #52]	; (d5160 <_Z18loadSystemDefaultsv+0x98>)
   d512c:	61a3      	str	r3, [r4, #24]
  sysStatus.dstOffset = 1;
   d512e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5132:	61e3      	str	r3, [r4, #28]
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
   d5134:	2318      	movs	r3, #24
   d5136:	6263      	str	r3, [r4, #36]	; 0x24
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5138:	4622      	mov	r2, r4
   d513a:	232c      	movs	r3, #44	; 0x2c
   d513c:	4629      	mov	r1, r5
   d513e:	4809      	ldr	r0, [pc, #36]	; (d5164 <_Z18loadSystemDefaultsv+0x9c>)
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.debounce = 1000;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
   d5140:	6226      	str	r6, [r4, #32]
   d5142:	f000 ff3d 	bl	d5fc0 <_ZN6MB85RC9writeDataEjPKhj>
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d5146:	b006      	add	sp, #24
   d5148:	bd70      	pop	{r4, r5, r6, pc}
   d514a:	bf00      	nop
   d514c:	2003e0b4 	.word	0x2003e0b4
   d5150:	000dd15f 	.word	0x000dd15f
   d5154:	000dd1ff 	.word	0x000dd1ff
   d5158:	2003e188 	.word	0x2003e188
   d515c:	000dd147 	.word	0x000dd147
   d5160:	c0a00000 	.word	0xc0a00000
   d5164:	2003e088 	.word	0x2003e088

000d5168 <_Z22publishStateTransitionv>:
  }
  else return 0;
}

void publishStateTransition(void)
{
   d5168:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d516a:	4d16      	ldr	r5, [pc, #88]	; (d51c4 <_Z22publishStateTransitionv+0x5c>)
   d516c:	4c16      	ldr	r4, [pc, #88]	; (d51c8 <_Z22publishStateTransitionv+0x60>)
   d516e:	4917      	ldr	r1, [pc, #92]	; (d51cc <_Z22publishStateTransitionv+0x64>)
   d5170:	782a      	ldrb	r2, [r5, #0]
   d5172:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d5174:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5176:	230e      	movs	r3, #14
   d5178:	fb03 1202 	mla	r2, r3, r2, r1
   d517c:	9200      	str	r2, [sp, #0]
   d517e:	fb03 1300 	mla	r3, r3, r0, r1
   d5182:	4a13      	ldr	r2, [pc, #76]	; (d51d0 <_Z22publishStateTransitionv+0x68>)
   d5184:	2128      	movs	r1, #40	; 0x28
   d5186:	a804      	add	r0, sp, #16
   d5188:	f001 ff6c 	bl	d7064 <snprintf>
  oldState = state;
   d518c:	782b      	ldrb	r3, [r5, #0]
   d518e:	7023      	strb	r3, [r4, #0]
   d5190:	f001 feb0 	bl	d6ef4 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d5194:	b170      	cbz	r0, d51b4 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d5196:	f7ff fa8d 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d519a:	4b0e      	ldr	r3, [pc, #56]	; (d51d4 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d519c:	490e      	ldr	r1, [pc, #56]	; (d51d8 <_Z22publishStateTransitionv+0x70>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d519e:	781b      	ldrb	r3, [r3, #0]
   d51a0:	2200      	movs	r2, #0
   d51a2:	f88d 2000 	strb.w	r2, [sp]
   d51a6:	a802      	add	r0, sp, #8
   d51a8:	aa04      	add	r2, sp, #16
   d51aa:	f7ff f83c 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d51ae:	a803      	add	r0, sp, #12
   d51b0:	f7ff fad7 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d51b4:	f003 fbd0 	bl	d8958 <_Z16_fetch_usbserialv>
   d51b8:	a904      	add	r1, sp, #16
   d51ba:	f002 ff12 	bl	d7fe2 <_ZN5Print7printlnEPKc>
}
   d51be:	b00f      	add	sp, #60	; 0x3c
   d51c0:	bd30      	pop	{r4, r5, pc}
   d51c2:	bf00      	nop
   d51c4:	2003e0d4 	.word	0x2003e0d4
   d51c8:	2003e0bc 	.word	0x2003e0bc
   d51cc:	2003df04 	.word	0x2003df04
   d51d0:	000dd217 	.word	0x000dd217
   d51d4:	2003e0b4 	.word	0x2003e0b4
   d51d8:	000dd225 	.word	0x000dd225

000d51dc <_Z12dailyCleanupv>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d51dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d51e0:	b087      	sub	sp, #28
  waitUntil(meterParticlePublish);
   d51e2:	f7ff fa67 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d51e6:	4b20      	ldr	r3, [pc, #128]	; (d5268 <_Z12dailyCleanupv+0x8c>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d51e8:	4a20      	ldr	r2, [pc, #128]	; (d526c <_Z12dailyCleanupv+0x90>)
   d51ea:	781b      	ldrb	r3, [r3, #0]
   d51ec:	4920      	ldr	r1, [pc, #128]	; (d5270 <_Z12dailyCleanupv+0x94>)

  sysStatus.verboseMode = false;
   d51ee:	4c21      	ldr	r4, [pc, #132]	; (d5274 <_Z12dailyCleanupv+0x98>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d51f0:	2500      	movs	r5, #0
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d51f2:	a802      	add	r0, sp, #8
   d51f4:	f88d 5000 	strb.w	r5, [sp]
   d51f8:	f7ff f815 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d51fc:	a803      	add	r0, sp, #12
   d51fe:	f7ff fab0 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  sysStatus.verboseMode = false;
   d5202:	7125      	strb	r5, [r4, #4]

  Particle.syncTime();                                                // Set the clock each day
   d5204:	f7fe fff8 	bl	d41f8 <_ZN10CloudClass8syncTimeEv.isra.41>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d5208:	f7ff f88a 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d520c:	2700      	movs	r7, #0
   d520e:	4606      	mov	r6, r0
   d5210:	f247 582f 	movw	r8, #29999	; 0x752f
   d5214:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5218:	f7ff f882 	bl	d4320 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d521c:	1b80      	subs	r0, r0, r6
   d521e:	eb61 0107 	sbc.w	r1, r1, r7
   d5222:	4589      	cmp	r9, r1
   d5224:	bf08      	it	eq
   d5226:	4580      	cmpeq	r8, r0
   d5228:	d305      	bcc.n	d5236 <_Z12dailyCleanupv+0x5a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d522a:	f7fe ffef 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.43>
   d522e:	b910      	cbnz	r0, d5236 <_Z12dailyCleanupv+0x5a>
            spark_process();
   d5230:	f001 fe48 	bl	d6ec4 <spark_process>
   d5234:	e7f0      	b.n	d5218 <_Z12dailyCleanupv+0x3c>
   d5236:	f7fe ffe9 	bl	d420c <_ZN10CloudClass12syncTimeDoneEv.isra.43>

  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {    // If Solar or if the battery is being discharged
   d523a:	7963      	ldrb	r3, [r4, #5]
   d523c:	b91b      	cbnz	r3, d5246 <_Z12dailyCleanupv+0x6a>
   d523e:	4b0d      	ldr	r3, [pc, #52]	; (d5274 <_Z12dailyCleanupv+0x98>)
   d5240:	689b      	ldr	r3, [r3, #8]
   d5242:	2b46      	cmp	r3, #70	; 0x46
   d5244:	dc09      	bgt.n	d525a <_Z12dailyCleanupv+0x7e>
    setLowPowerMode("1");
   d5246:	490c      	ldr	r1, [pc, #48]	; (d5278 <_Z12dailyCleanupv+0x9c>)
   d5248:	a802      	add	r0, sp, #8
   d524a:	f002 ff69 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
   d524e:	a802      	add	r0, sp, #8
   d5250:	f7ff fe4c 	bl	d4eec <_Z15setLowPowerMode6String>
   d5254:	a802      	add	r0, sp, #8
   d5256:	f002 ff1c 	bl	d8092 <_ZN6StringD1Ev>
  }
  systemStatusWriteNeeded=true;
   d525a:	4b08      	ldr	r3, [pc, #32]	; (d527c <_Z12dailyCleanupv+0xa0>)
   d525c:	2201      	movs	r2, #1
   d525e:	701a      	strb	r2, [r3, #0]
}
   d5260:	b007      	add	sp, #28
   d5262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5266:	bf00      	nop
   d5268:	2003e0b4 	.word	0x2003e0b4
   d526c:	000dd236 	.word	0x000dd236
   d5270:	000dd23e 	.word	0x000dd23e
   d5274:	2003e188 	.word	0x2003e188
   d5278:	000dd44c 	.word	0x000dd44c
   d527c:	2003e185 	.word	0x2003e185

000d5280 <loop>:

   digitalWrite(blueLED,LOW);
}

void loop()
{
   d5280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5284:	4c95      	ldr	r4, [pc, #596]	; (d54dc <loop+0x25c>)
   d5286:	7823      	ldrb	r3, [r4, #0]
   d5288:	3b01      	subs	r3, #1

   digitalWrite(blueLED,LOW);
}

void loop()
{
   d528a:	b08b      	sub	sp, #44	; 0x2c
  switch(state) {
   d528c:	2b05      	cmp	r3, #5
   d528e:	f200 821b 	bhi.w	d56c8 <loop+0x448>
   d5292:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5296:	01a7      	.short	0x01a7
   d5298:	00630006 	.word	0x00630006
   d529c:	0145009e 	.word	0x0145009e
   d52a0:	0172      	.short	0x0172
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52a2:	4d8f      	ldr	r5, [pc, #572]	; (d54e0 <loop+0x260>)
   d52a4:	792b      	ldrb	r3, [r5, #4]
   d52a6:	b12b      	cbz	r3, d52b4 <loop+0x34>
   d52a8:	4b8e      	ldr	r3, [pc, #568]	; (d54e4 <loop+0x264>)
   d52aa:	781b      	ldrb	r3, [r3, #0]
   d52ac:	2b02      	cmp	r3, #2
   d52ae:	d001      	beq.n	d52b4 <loop+0x34>
   d52b0:	f7ff ff5a 	bl	d5168 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d52b4:	4b8c      	ldr	r3, [pc, #560]	; (d54e8 <loop+0x268>)
   d52b6:	781b      	ldrb	r3, [r3, #0]
   d52b8:	b10b      	cbz	r3, d52be <loop+0x3e>
   d52ba:	f7ff f929 	bl	d4510 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d52be:	4b8b      	ldr	r3, [pc, #556]	; (d54ec <loop+0x26c>)
   d52c0:	781b      	ldrb	r3, [r3, #0]
   d52c2:	b10b      	cbz	r3, d52c8 <loop+0x48>
   d52c4:	f7ff fa64 	bl	d4790 <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d52c8:	4b89      	ldr	r3, [pc, #548]	; (d54f0 <loop+0x270>)
   d52ca:	4e8a      	ldr	r6, [pc, #552]	; (d54f4 <loop+0x274>)
   d52cc:	6859      	ldr	r1, [r3, #4]
   d52ce:	b169      	cbz	r1, d52ec <loop+0x6c>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d52d0:	681a      	ldr	r2, [r3, #0]
   d52d2:	1a52      	subs	r2, r2, r1
   d52d4:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d52d6:	2200      	movs	r2, #0
   d52d8:	615a      	str	r2, [r3, #20]
   d52da:	619a      	str	r2, [r3, #24]
   d52dc:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
   d52de:	2301      	movs	r3, #1
   d52e0:	7033      	strb	r3, [r6, #0]
      if (Time.hour() == 0) resetEverything();                        // We have reported for the previous day - reset for the next - only needed if no sleep
   d52e2:	f003 fa19 	bl	d8718 <_ZN9TimeClass4hourEv>
   d52e6:	b908      	cbnz	r0, d52ec <loop+0x6c>
   d52e8:	f7ff f9b8 	bl	d465c <_Z15resetEverythingv>
    }
    if (systemStatusWriteNeeded) {
   d52ec:	4f82      	ldr	r7, [pc, #520]	; (d54f8 <loop+0x278>)
   d52ee:	783b      	ldrb	r3, [r7, #0]
   d52f0:	b13b      	cbz	r3, d5302 <loop+0x82>
   d52f2:	232c      	movs	r3, #44	; 0x2c
   d52f4:	4a7a      	ldr	r2, [pc, #488]	; (d54e0 <loop+0x260>)
   d52f6:	4881      	ldr	r0, [pc, #516]	; (d54fc <loop+0x27c>)
   d52f8:	2101      	movs	r1, #1
   d52fa:	f000 fe61 	bl	d5fc0 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d52fe:	2300      	movs	r3, #0
   d5300:	703b      	strb	r3, [r7, #0]
    }
    if (currentCountsWriteNeeded) {
   d5302:	7833      	ldrb	r3, [r6, #0]
   d5304:	b143      	cbz	r3, d5318 <loop+0x98>
   d5306:	231c      	movs	r3, #28
   d5308:	4a79      	ldr	r2, [pc, #484]	; (d54f0 <loop+0x270>)
   d530a:	487c      	ldr	r0, [pc, #496]	; (d54fc <loop+0x27c>)
   d530c:	2150      	movs	r1, #80	; 0x50
   d530e:	f000 fe57 	bl	d5fc0 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d5312:	4b78      	ldr	r3, [pc, #480]	; (d54f4 <loop+0x274>)
   d5314:	2200      	movs	r2, #0
   d5316:	701a      	strb	r2, [r3, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d5318:	79ab      	ldrb	r3, [r5, #6]
   d531a:	b14b      	cbz	r3, d5330 <loop+0xb0>
   d531c:	f001 fbc0 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d5320:	4b77      	ldr	r3, [pc, #476]	; (d5500 <loop+0x280>)
   d5322:	681b      	ldr	r3, [r3, #0]
   d5324:	1ac0      	subs	r0, r0, r3
   d5326:	4b77      	ldr	r3, [pc, #476]	; (d5504 <loop+0x284>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	4298      	cmp	r0, r3
   d532c:	f200 81d2 	bhi.w	d56d4 <loop+0x454>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d5330:	f003 f9f2 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5334:	4b74      	ldr	r3, [pc, #464]	; (d5508 <loop+0x288>)
   d5336:	681b      	ldr	r3, [r3, #0]
   d5338:	4298      	cmp	r0, r3
   d533a:	bf1c      	itt	ne
   d533c:	2305      	movne	r3, #5
   d533e:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5340:	f003 f9ea 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5346:	4298      	cmp	r0, r3
   d5348:	f280 81c7 	bge.w	d56da <loop+0x45a>
   d534c:	f003 f9e4 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5350:	4b63      	ldr	r3, [pc, #396]	; (d54e0 <loop+0x260>)
   d5352:	6a1b      	ldr	r3, [r3, #32]
   d5354:	4298      	cmp	r0, r3
   d5356:	f2c0 81c0 	blt.w	d56da <loop+0x45a>
   d535a:	e1b5      	b.n	d56c8 <loop+0x448>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d535c:	4b60      	ldr	r3, [pc, #384]	; (d54e0 <loop+0x260>)
   d535e:	791a      	ldrb	r2, [r3, #4]
   d5360:	461d      	mov	r5, r3
   d5362:	b12a      	cbz	r2, d5370 <loop+0xf0>
   d5364:	4b5f      	ldr	r3, [pc, #380]	; (d54e4 <loop+0x264>)
   d5366:	781b      	ldrb	r3, [r3, #0]
   d5368:	2b03      	cmp	r3, #3
   d536a:	d001      	beq.n	d5370 <loop+0xf0>
   d536c:	f7ff fefc 	bl	d5168 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5370:	200d      	movs	r0, #13
   d5372:	f002 fc0b 	bl	d7b8c <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5376:	4b65      	ldr	r3, [pc, #404]	; (d550c <loop+0x28c>)
   d5378:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d537a:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d537e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d5382:	f003 031f 	and.w	r3, r3, #31
   d5386:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d538a:	f7fe feb9 	bl	d4100 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d538e:	4b58      	ldr	r3, [pc, #352]	; (d54f0 <loop+0x270>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	b10b      	cbz	r3, d5398 <loop+0x118>
      state = REPORTING_STATE;
   d5394:	2305      	movs	r3, #5
   d5396:	e123      	b.n	d55e0 <loop+0x360>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5398:	78eb      	ldrb	r3, [r5, #3]
   d539a:	b10b      	cbz	r3, d53a0 <loop+0x120>
   d539c:	f7ff f92a 	bl	d45f4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d53a0:	2100      	movs	r1, #0
   d53a2:	2007      	movs	r0, #7
   d53a4:	f003 fbd1 	bl	d8b4a <digitalWrite>
    petWatchdog();
   d53a8:	f7ff f8b2 	bl	d4510 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d53ac:	f003 f9ad 	bl	d870a <_ZN9TimeClass3nowEv>
    rtc.setAlarm(wakeInSeconds);                                // The Real Time Clock will turn the Enable pin back on to wake the device
   d53b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d53b4:	fb90 f1f3 	sdiv	r1, r0, r3
   d53b8:	fb01 0013 	mls	r0, r1, r3, r0
   d53bc:	1a19      	subs	r1, r3, r0
   d53be:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d53c2:	f04f 0300 	mov.w	r3, #0
   d53c6:	f04f 0201 	mov.w	r2, #1
   d53ca:	bfa8      	it	ge
   d53cc:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d53d0:	e15a      	b.n	d5688 <loop+0x408>
    } break;

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53d2:	4d43      	ldr	r5, [pc, #268]	; (d54e0 <loop+0x260>)
   d53d4:	792b      	ldrb	r3, [r5, #4]
   d53d6:	b12b      	cbz	r3, d53e4 <loop+0x164>
   d53d8:	4b42      	ldr	r3, [pc, #264]	; (d54e4 <loop+0x264>)
   d53da:	781b      	ldrb	r3, [r3, #0]
   d53dc:	2b04      	cmp	r3, #4
   d53de:	d001      	beq.n	d53e4 <loop+0x164>
   d53e0:	f7ff fec2 	bl	d5168 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                          // Don't nap until we are done with event
   d53e4:	4b41      	ldr	r3, [pc, #260]	; (d54ec <loop+0x26c>)
   d53e6:	781b      	ldrb	r3, [r3, #0]
   d53e8:	2b00      	cmp	r3, #0
   d53ea:	f040 816d 	bne.w	d56c8 <loop+0x448>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d53ee:	78eb      	ldrb	r3, [r5, #3]
   d53f0:	b10b      	cbz	r3, d53f6 <loop+0x176>
   d53f2:	f7ff f8ff 	bl	d45f4 <_Z22disconnectFromParticlev>
    stayAwake = sysStatus.debounce;                                   // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d53f6:	4b43      	ldr	r3, [pc, #268]	; (d5504 <loop+0x284>)
   d53f8:	692a      	ldr	r2, [r5, #16]
   d53fa:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d53fc:	f003 f985 	bl	d870a <_ZN9TimeClass3nowEv>
   d5400:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
   d5402:	f7ff f885 	bl	d4510 <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5406:	4b42      	ldr	r3, [pc, #264]	; (d5510 <loop+0x290>)
   d5408:	7d1a      	ldrb	r2, [r3, #20]
   d540a:	b10a      	cbz	r2, d5410 <loop+0x190>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d540c:	2201      	movs	r2, #1
   d540e:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
   d5410:	2200      	movs	r2, #0
   d5412:	2104      	movs	r1, #4
   d5414:	483e      	ldr	r0, [pc, #248]	; (d5510 <loop+0x290>)
   d5416:	f7fe ff4f 	bl	d42b8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d541a:	2201      	movs	r2, #1
   d541c:	210d      	movs	r1, #13
   d541e:	f7fe ff4b 	bl	d42b8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d5422:	7d03      	ldrb	r3, [r0, #20]
   d5424:	4605      	mov	r5, r0
   d5426:	b35b      	cbz	r3, d5480 <loop+0x200>
   d5428:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d542c:	fb96 f3f2 	sdiv	r3, r6, r2
   d5430:	fb02 6313 	mls	r3, r2, r3, r6
   d5434:	1ad3      	subs	r3, r2, r3
   d5436:	4293      	cmp	r3, r2
   d5438:	bfa8      	it	ge
   d543a:	4613      	movge	r3, r2
   d543c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d5440:	2104      	movs	r1, #4
   d5442:	435f      	muls	r7, r3
   d5444:	f7fe ff2e 	bl	d42a4 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d5448:	4680      	mov	r8, r0
   d544a:	b108      	cbz	r0, d5450 <loop+0x1d0>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d544c:	60c7      	str	r7, [r0, #12]
   d544e:	e017      	b.n	d5480 <loop+0x200>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d5450:	4930      	ldr	r1, [pc, #192]	; (d5514 <loop+0x294>)
   d5452:	2010      	movs	r0, #16
   d5454:	f003 fc2c 	bl	d8cb0 <_ZnwjRKSt9nothrow_t>
   d5458:	4606      	mov	r6, r0
   d545a:	2800      	cmp	r0, #0
   d545c:	f000 813f 	beq.w	d56de <loop+0x45e>
   d5460:	f04f 0910 	mov.w	r9, #16
   d5464:	464a      	mov	r2, r9
   d5466:	4641      	mov	r1, r8
   d5468:	f004 fc7d 	bl	d9d66 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d546c:	2302      	movs	r3, #2
   d546e:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5470:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d5472:	f8a6 9000 	strh.w	r9, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5476:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5478:	692b      	ldr	r3, [r5, #16]
   d547a:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
   d547c:	60f7      	str	r7, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d547e:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
   d5480:	7d2b      	ldrb	r3, [r5, #20]
   d5482:	b11b      	cbz	r3, d548c <loop+0x20c>
            config_.flags |= f.value();
   d5484:	68eb      	ldr	r3, [r5, #12]
   d5486:	f043 0301 	orr.w	r3, r3, #1
   d548a:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d548c:	4920      	ldr	r1, [pc, #128]	; (d5510 <loop+0x290>)
   d548e:	a803      	add	r0, sp, #12
   d5490:	f002 fefa 	bl	d8288 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d5494:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5496:	b1c3      	cbz	r3, d54ca <loop+0x24a>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5498:	889a      	ldrh	r2, [r3, #4]
   d549a:	2a01      	cmp	r2, #1
   d549c:	d115      	bne.n	d54ca <loop+0x24a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d549e:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                               // Executions starts here after sleep - time or sensor interrupt?
   d54a0:	2b0d      	cmp	r3, #13
   d54a2:	d106      	bne.n	d54b2 <loop+0x232>
      awokeFromNap=true;                                              // Since millis() stops when sleeping - need this to debounce
   d54a4:	4b1c      	ldr	r3, [pc, #112]	; (d5518 <loop+0x298>)
   d54a6:	701a      	strb	r2, [r3, #0]
   d54a8:	f001 fafa 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d54ac:	4b14      	ldr	r3, [pc, #80]	; (d5500 <loop+0x280>)
   d54ae:	6018      	str	r0, [r3, #0]
   d54b0:	e00b      	b.n	d54ca <loop+0x24a>
    }
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d54b2:	2b04      	cmp	r3, #4
   d54b4:	d109      	bne.n	d54ca <loop+0x24a>
   d54b6:	4919      	ldr	r1, [pc, #100]	; (d551c <loop+0x29c>)
   d54b8:	a806      	add	r0, sp, #24
   d54ba:	f002 fe31 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
   d54be:	a806      	add	r0, sp, #24
   d54c0:	f7ff fd14 	bl	d4eec <_Z15setLowPowerMode6String>
   d54c4:	a806      	add	r0, sp, #24
   d54c6:	f002 fde4 	bl	d8092 <_ZN6StringD1Ev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d54ca:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d54cc:	2302      	movs	r3, #2
   d54ce:	7023      	strb	r3, [r4, #0]
   d54d0:	2800      	cmp	r0, #0
   d54d2:	f000 80f9 	beq.w	d56c8 <loop+0x448>
            free(wakeupSource_);
   d54d6:	f001 fda5 	bl	d7024 <free>
    } break;
   d54da:	e0f5      	b.n	d56c8 <loop+0x448>
   d54dc:	2003e0d4 	.word	0x2003e0d4
   d54e0:	2003e188 	.word	0x2003e188
   d54e4:	2003e0bc 	.word	0x2003e0bc
   d54e8:	2003e0dc 	.word	0x2003e0dc
   d54ec:	2003e07c 	.word	0x2003e07c
   d54f0:	2003e164 	.word	0x2003e164
   d54f4:	2003e15c 	.word	0x2003e15c
   d54f8:	2003e185 	.word	0x2003e185
   d54fc:	2003e088 	.word	0x2003e088
   d5500:	2003e10c 	.word	0x2003e10c
   d5504:	2003e0b8 	.word	0x2003e0b8
   d5508:	2003e0d8 	.word	0x2003e0d8
   d550c:	2003e108 	.word	0x2003e108
   d5510:	2003e0e0 	.word	0x2003e0e0
   d5514:	000dd940 	.word	0x000dd940
   d5518:	2003e150 	.word	0x2003e150
   d551c:	000dd147 	.word	0x000dd147

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5520:	4d70      	ldr	r5, [pc, #448]	; (d56e4 <loop+0x464>)
   d5522:	792b      	ldrb	r3, [r5, #4]
   d5524:	b12b      	cbz	r3, d5532 <loop+0x2b2>
   d5526:	4b70      	ldr	r3, [pc, #448]	; (d56e8 <loop+0x468>)
   d5528:	781b      	ldrb	r3, [r3, #0]
   d552a:	2b05      	cmp	r3, #5
   d552c:	d001      	beq.n	d5532 <loop+0x2b2>
   d552e:	f7ff fe1b 	bl	d5168 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d5532:	78eb      	ldrb	r3, [r5, #3]
   d5534:	b90b      	cbnz	r3, d553a <loop+0x2ba>
   d5536:	f7ff f9cb 	bl	d48d0 <_Z17connectToParticlev>
   d553a:	f001 fcdb 	bl	d6ef4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d553e:	b160      	cbz	r0, d555a <loop+0x2da>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house
   d5540:	f003 f8ea 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5544:	6a2b      	ldr	r3, [r5, #32]
   d5546:	4298      	cmp	r0, r3
   d5548:	d101      	bne.n	d554e <loop+0x2ce>
   d554a:	f7ff fe47 	bl	d51dc <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d554e:	f7fe ffa7 	bl	d44a0 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d5552:	f7ff fa09 	bl	d4968 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5556:	2306      	movs	r3, #6
   d5558:	e004      	b.n	d5564 <loop+0x2e4>
   d555a:	f001 faa1 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d555e:	4b63      	ldr	r3, [pc, #396]	; (d56ec <loop+0x46c>)
   d5560:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;
   d5562:	2301      	movs	r3, #1
   d5564:	7023      	strb	r3, [r4, #0]
    }
    if (sysStatus.lowPowerMode) Time.setTime(rtc.getRTCTime());
   d5566:	79ab      	ldrb	r3, [r5, #6]
   d5568:	2b00      	cmp	r3, #0
   d556a:	f000 80ad 	beq.w	d56c8 <loop+0x448>
   d556e:	4860      	ldr	r0, [pc, #384]	; (d56f0 <loop+0x470>)
   d5570:	f000 ffc2 	bl	d64f8 <_ZNK8MCP7941010getRTCTimeEv>
   d5574:	f002 ffe8 	bl	d8548 <_ZN9TimeClass7setTimeEl>
   d5578:	e0a6      	b.n	d56c8 <loop+0x448>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d557a:	4b5a      	ldr	r3, [pc, #360]	; (d56e4 <loop+0x464>)
   d557c:	791b      	ldrb	r3, [r3, #4]
   d557e:	b12b      	cbz	r3, d558c <loop+0x30c>
   d5580:	4b59      	ldr	r3, [pc, #356]	; (d56e8 <loop+0x468>)
   d5582:	781b      	ldrb	r3, [r3, #0]
   d5584:	2b06      	cmp	r3, #6
   d5586:	d001      	beq.n	d558c <loop+0x30c>
   d5588:	f7ff fdee 	bl	d5168 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d558c:	4b59      	ldr	r3, [pc, #356]	; (d56f4 <loop+0x474>)
   d558e:	781b      	ldrb	r3, [r3, #0]
   d5590:	b943      	cbnz	r3, d55a4 <loop+0x324>
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d5592:	4b59      	ldr	r3, [pc, #356]	; (d56f8 <loop+0x478>)
   d5594:	4a59      	ldr	r2, [pc, #356]	; (d56fc <loop+0x47c>)
   d5596:	601a      	str	r2, [r3, #0]
   d5598:	f001 fa82 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d559c:	4b58      	ldr	r3, [pc, #352]	; (d5700 <loop+0x480>)
   d559e:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d55a0:	2302      	movs	r3, #2
   d55a2:	e01d      	b.n	d55e0 <loop+0x360>
   d55a4:	f001 fa7c 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d55a8:	4b56      	ldr	r3, [pc, #344]	; (d5704 <loop+0x484>)
   d55aa:	681b      	ldr	r3, [r3, #0]
   d55ac:	1ac0      	subs	r0, r0, r3
   d55ae:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d55b2:	4298      	cmp	r0, r3
   d55b4:	f240 8088 	bls.w	d56c8 <loop+0x448>
   d55b8:	f001 fa72 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d55bc:	4b4b      	ldr	r3, [pc, #300]	; (d56ec <loop+0x46c>)
   d55be:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d55c0:	f7ff f878 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d55c4:	4b50      	ldr	r3, [pc, #320]	; (d5708 <loop+0x488>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d55c6:	4951      	ldr	r1, [pc, #324]	; (d570c <loop+0x48c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d55c8:	781b      	ldrb	r3, [r3, #0]
   d55ca:	2200      	movs	r2, #0
   d55cc:	f88d 2000 	strb.w	r2, [sp]
   d55d0:	a806      	add	r0, sp, #24
   d55d2:	4a4f      	ldr	r2, [pc, #316]	; (d5710 <loop+0x490>)
   d55d4:	f7fe fe27 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d55d8:	a807      	add	r0, sp, #28
   d55da:	f7ff f8c2 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d55de:	2301      	movs	r3, #1
   d55e0:	7023      	strb	r3, [r4, #0]
   d55e2:	e071      	b.n	d56c8 <loop+0x448>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d55e4:	4c3f      	ldr	r4, [pc, #252]	; (d56e4 <loop+0x464>)
   d55e6:	7923      	ldrb	r3, [r4, #4]
   d55e8:	b12b      	cbz	r3, d55f6 <loop+0x376>
   d55ea:	4b3f      	ldr	r3, [pc, #252]	; (d56e8 <loop+0x468>)
   d55ec:	781b      	ldrb	r3, [r3, #0]
   d55ee:	2b01      	cmp	r3, #1
   d55f0:	d001      	beq.n	d55f6 <loop+0x376>
   d55f2:	f7ff fdb9 	bl	d5168 <_Z22publishStateTransitionv>
   d55f6:	f001 fa53 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d55fa:	4b3c      	ldr	r3, [pc, #240]	; (d56ec <loop+0x46c>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5602:	3330      	adds	r3, #48	; 0x30
   d5604:	4298      	cmp	r0, r3
   d5606:	d95f      	bls.n	d56c8 <loop+0x448>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5608:	6963      	ldr	r3, [r4, #20]
   d560a:	2b03      	cmp	r3, #3
   d560c:	dc18      	bgt.n	d5640 <loop+0x3c0>
        waitUntil(meterParticlePublish);
   d560e:	f7ff f851 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d5612:	f001 fc6f 	bl	d6ef4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5616:	b160      	cbz	r0, d5632 <loop+0x3b2>
   d5618:	4b3b      	ldr	r3, [pc, #236]	; (d5708 <loop+0x488>)
   d561a:	493e      	ldr	r1, [pc, #248]	; (d5714 <loop+0x494>)
   d561c:	781b      	ldrb	r3, [r3, #0]
   d561e:	2200      	movs	r2, #0
   d5620:	f88d 2000 	strb.w	r2, [sp]
   d5624:	a806      	add	r0, sp, #24
   d5626:	4a3c      	ldr	r2, [pc, #240]	; (d5718 <loop+0x498>)
   d5628:	f7fe fdfd 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d562c:	a807      	add	r0, sp, #28
   d562e:	f7ff f898 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5636:	f001 fd35 	bl	d70a4 <delay>
        System.reset();
   d563a:	f002 fe22 	bl	d8282 <_ZN11SystemClass5resetEv>
   d563e:	e043      	b.n	d56c8 <loop+0x448>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5640:	f003 f863 	bl	d870a <_ZN9TimeClass3nowEv>
   d5644:	4b27      	ldr	r3, [pc, #156]	; (d56e4 <loop+0x464>)
   d5646:	4d35      	ldr	r5, [pc, #212]	; (d571c <loop+0x49c>)
   d5648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d564a:	1ac0      	subs	r0, r0, r3
   d564c:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5650:	d91e      	bls.n	d5690 <loop+0x410>
        waitUntil(meterParticlePublish);
   d5652:	f7ff f82f 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d5656:	f001 fc4d 	bl	d6ef4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d565a:	b160      	cbz	r0, d5676 <loop+0x3f6>
   d565c:	4b2a      	ldr	r3, [pc, #168]	; (d5708 <loop+0x488>)
   d565e:	492d      	ldr	r1, [pc, #180]	; (d5714 <loop+0x494>)
   d5660:	781b      	ldrb	r3, [r3, #0]
   d5662:	2200      	movs	r2, #0
   d5664:	f88d 2000 	strb.w	r2, [sp]
   d5668:	a806      	add	r0, sp, #24
   d566a:	4a2d      	ldr	r2, [pc, #180]	; (d5720 <loop+0x4a0>)
   d566c:	f7fe fddb 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5670:	a807      	add	r0, sp, #28
   d5672:	f7ff f876 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d5676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d567a:	f001 fd13 	bl	d70a4 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d567e:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d5680:	2201      	movs	r2, #1
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d5682:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d5684:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d5686:	210a      	movs	r1, #10
   d5688:	4819      	ldr	r0, [pc, #100]	; (d56f0 <loop+0x470>)
   d568a:	f001 f924 	bl	d68d6 <_ZN8MCP794108setAlarmEibi>
   d568e:	e01b      	b.n	d56c8 <loop+0x448>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        waitUntil(meterParticlePublish);
   d5690:	f7ff f810 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d5694:	f001 fc2e 	bl	d6ef4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5698:	b160      	cbz	r0, d56b4 <loop+0x434>
   d569a:	4b1b      	ldr	r3, [pc, #108]	; (d5708 <loop+0x488>)
   d569c:	491d      	ldr	r1, [pc, #116]	; (d5714 <loop+0x494>)
   d569e:	781b      	ldrb	r3, [r3, #0]
   d56a0:	2200      	movs	r2, #0
   d56a2:	f88d 2000 	strb.w	r2, [sp]
   d56a6:	a806      	add	r0, sp, #24
   d56a8:	4a1e      	ldr	r2, [pc, #120]	; (d5724 <loop+0x4a4>)
   d56aa:	f7fe fdbc 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d56ae:	a807      	add	r0, sp, #28
   d56b0:	f7ff f857 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d56b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d56b8:	f001 fcf4 	bl	d70a4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d56bc:	2300      	movs	r3, #0
   d56be:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d56c0:	2301      	movs	r3, #1
   d56c2:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d56c4:	f7ff f802 	bl	d46cc <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d56c8:	4809      	ldr	r0, [pc, #36]	; (d56f0 <loop+0x470>)
   d56ca:	f001 f83d 	bl	d6748 <_ZN8MCP794104loopEv>
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}
   d56ce:	b00b      	add	sp, #44	; 0x2c
   d56d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d56d4:	2304      	movs	r3, #4
   d56d6:	7023      	strb	r3, [r4, #0]
   d56d8:	e62a      	b.n	d5330 <loop+0xb0>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d56da:	2303      	movs	r3, #3
   d56dc:	e780      	b.n	d55e0 <loop+0x360>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d56de:	7528      	strb	r0, [r5, #20]
   d56e0:	e6ce      	b.n	d5480 <loop+0x200>
   d56e2:	bf00      	nop
   d56e4:	2003e188 	.word	0x2003e188
   d56e8:	2003e0bc 	.word	0x2003e0bc
   d56ec:	2003e158 	.word	0x2003e158
   d56f0:	2003e098 	.word	0x2003e098
   d56f4:	2003e184 	.word	0x2003e184
   d56f8:	2003e0b8 	.word	0x2003e0b8
   d56fc:	00015f90 	.word	0x00015f90
   d5700:	2003e10c 	.word	0x2003e10c
   d5704:	2003e0d0 	.word	0x2003e0d0
   d5708:	2003e0b4 	.word	0x2003e0b4
   d570c:	000dd24c 	.word	0x000dd24c
   d5710:	000dd01d 	.word	0x000dd01d
   d5714:	000dd279 	.word	0x000dd279
   d5718:	000dd265 	.word	0x000dd265
   d571c:	2003e185 	.word	0x2003e185
   d5720:	000dd27f 	.word	0x000dd27f
   d5724:	000dd299 	.word	0x000dd299

000d5728 <_Z12setDSTOffset6String>:
    setLowPowerMode("1");
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d5728:	b530      	push	{r4, r5, lr}
   d572a:	ed2d 8b02 	vpush	{d8}
   d572e:	b0cd      	sub	sp, #308	; 0x134
   d5730:	4605      	mov	r5, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5732:	f002 ffea 	bl	d870a <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5736:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5738:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d573a:	a905      	add	r1, sp, #20
   d573c:	6828      	ldr	r0, [r5, #0]
   d573e:	f006 f9c5 	bl	dbacc <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5742:	b2c3      	uxtb	r3, r0
   d5744:	2b02      	cmp	r3, #2
   d5746:	d867      	bhi.n	d5818 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d5748:	b240      	sxtb	r0, r0
   d574a:	ee07 0a90 	vmov	s15, r0
   d574e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d5752:	eeb0 0a48 	vmov.f32	s0, s16
   d5756:	f002 fecd 	bl	d84f4 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d575a:	4b35      	ldr	r3, [pc, #212]	; (d5830 <_Z12setDSTOffset6String+0x108>)
   d575c:	ed83 8a07 	vstr	s16, [r3, #28]
  systemStatusWriteNeeded = true;
   d5760:	4b34      	ldr	r3, [pc, #208]	; (d5834 <_Z12setDSTOffset6String+0x10c>)
   d5762:	2201      	movs	r2, #1
   d5764:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d5766:	ee18 0a10 	vmov	r0, s16
   d576a:	f003 fd61 	bl	d9230 <__aeabi_f2d>
   d576e:	4a32      	ldr	r2, [pc, #200]	; (d5838 <_Z12setDSTOffset6String+0x110>)
   d5770:	e9cd 0100 	strd	r0, r1, [sp]
   d5774:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5778:	a80c      	add	r0, sp, #48	; 0x30
   d577a:	f001 fc73 	bl	d7064 <snprintf>
  waitUntil(meterParticlePublish);
   d577e:	f7fe ff99 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d5782:	f002 ffa1 	bl	d86c8 <_ZN9TimeClass7isValidEv>
   d5786:	b138      	cbz	r0, d5798 <_Z12setDSTOffset6String+0x70>
   d5788:	f7fe ffcc 	bl	d4724 <_Z8isDSTusav>
   d578c:	b110      	cbz	r0, d5794 <_Z12setDSTOffset6String+0x6c>
   d578e:	f002 fecb 	bl	d8528 <_ZN9TimeClass8beginDSTEv>
   d5792:	e001      	b.n	d5798 <_Z12setDSTOffset6String+0x70>
   d5794:	f002 fed2 	bl	d853c <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5798:	f002 fe82 	bl	d84a0 <_ZN9TimeClass5localEv>
   d579c:	4605      	mov	r5, r0
   d579e:	f002 ffb4 	bl	d870a <_ZN9TimeClass3nowEv>
   d57a2:	1a28      	subs	r0, r5, r0
   d57a4:	f003 fd32 	bl	d920c <__aeabi_i2d>
   d57a8:	a31f      	add	r3, pc, #124	; (adr r3, d5828 <_Z12setDSTOffset6String+0x100>)
   d57aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d57ae:	f003 febd 	bl	d952c <__aeabi_ddiv>
   d57b2:	4a22      	ldr	r2, [pc, #136]	; (d583c <_Z12setDSTOffset6String+0x114>)
   d57b4:	e9cd 0100 	strd	r0, r1, [sp]
   d57b8:	210a      	movs	r1, #10
   d57ba:	4821      	ldr	r0, [pc, #132]	; (d5840 <_Z12setDSTOffset6String+0x118>)
   d57bc:	f001 fc52 	bl	d7064 <snprintf>
   d57c0:	f001 fb98 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d57c4:	b160      	cbz	r0, d57e0 <_Z12setDSTOffset6String+0xb8>
   d57c6:	4b1f      	ldr	r3, [pc, #124]	; (d5844 <_Z12setDSTOffset6String+0x11c>)
   d57c8:	491f      	ldr	r1, [pc, #124]	; (d5848 <_Z12setDSTOffset6String+0x120>)
   d57ca:	781b      	ldrb	r3, [r3, #0]
   d57cc:	2200      	movs	r2, #0
   d57ce:	f88d 2000 	strb.w	r2, [sp]
   d57d2:	a808      	add	r0, sp, #32
   d57d4:	aa0c      	add	r2, sp, #48	; 0x30
   d57d6:	f7fe fd26 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d57da:	a809      	add	r0, sp, #36	; 0x24
   d57dc:	f7fe ffc1 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d57e0:	f7fe ff68 	bl	d46b4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.73>
   d57e4:	f001 fb86 	bl	d6ef4 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d57e8:	b1c0      	cbz	r0, d581c <_Z12setDSTOffset6String+0xf4>
   d57ea:	4621      	mov	r1, r4
   d57ec:	a808      	add	r0, sp, #32
   d57ee:	f002 feb5 	bl	d855c <_ZN9TimeClass7timeStrEl>
   d57f2:	9b08      	ldr	r3, [sp, #32]
   d57f4:	9303      	str	r3, [sp, #12]
   d57f6:	4b13      	ldr	r3, [pc, #76]	; (d5844 <_Z12setDSTOffset6String+0x11c>)
   d57f8:	4913      	ldr	r1, [pc, #76]	; (d5848 <_Z12setDSTOffset6String+0x120>)
   d57fa:	781b      	ldrb	r3, [r3, #0]
   d57fc:	2200      	movs	r2, #0
   d57fe:	f88d 2000 	strb.w	r2, [sp]
   d5802:	a806      	add	r0, sp, #24
   d5804:	9a03      	ldr	r2, [sp, #12]
   d5806:	f7fe fd0e 	bl	d4226 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d580a:	a807      	add	r0, sp, #28
   d580c:	f7fe ffa9 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5810:	a808      	add	r0, sp, #32
   d5812:	f002 fc3e 	bl	d8092 <_ZN6StringD1Ev>
   d5816:	e001      	b.n	d581c <_Z12setDSTOffset6String+0xf4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5818:	2000      	movs	r0, #0
   d581a:	e000      	b.n	d581e <_Z12setDSTOffset6String+0xf6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d581c:	2001      	movs	r0, #1
}
   d581e:	b04d      	add	sp, #308	; 0x134
   d5820:	ecbd 8b02 	vpop	{d8}
   d5824:	bd30      	pop	{r4, r5, pc}
   d5826:	bf00      	nop
   d5828:	00000000 	.word	0x00000000
   d582c:	40ac2000 	.word	0x40ac2000
   d5830:	2003e188 	.word	0x2003e188
   d5834:	2003e185 	.word	0x2003e185
   d5838:	000dd2b8 	.word	0x000dd2b8
   d583c:	000dd18a 	.word	0x000dd18a
   d5840:	2003e07d 	.word	0x2003e07d
   d5844:	2003e0b4 	.word	0x2003e0b4
   d5848:	000dd323 	.word	0x000dd323

000d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d584c:	2300      	movs	r3, #0
   d584e:	2202      	movs	r2, #2
   d5850:	f001 bb28 	b.w	d6ea4 <spark_variable>

000d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d5854:	2300      	movs	r3, #0
   d5856:	2204      	movs	r2, #4
   d5858:	f001 bb24 	b.w	d6ea4 <spark_variable>

000d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d585c:	4602      	mov	r2, r0
   d585e:	4801      	ldr	r0, [pc, #4]	; (d5864 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5860:	f001 bdf7 	b.w	d7452 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5864:	000d7427 	.word	0x000d7427

000d5868 <setup>:
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d586c:	2100      	movs	r1, #0
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d586e:	b0ad      	sub	sp, #180	; 0xb4
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5870:	2008      	movs	r0, #8
   d5872:	f003 f959 	bl	d8b28 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5876:	2100      	movs	r1, #0
   d5878:	2004      	movs	r0, #4
   d587a:	f003 f955 	bl	d8b28 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d587e:	2101      	movs	r1, #1
   d5880:	2007      	movs	r0, #7
   d5882:	f003 f951 	bl	d8b28 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5886:	2101      	movs	r1, #1
   d5888:	2005      	movs	r0, #5
   d588a:	f003 f94d 	bl	d8b28 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d588e:	4fac      	ldr	r7, [pc, #688]	; (d5b40 <setup+0x2d8>)
   d5890:	4cac      	ldr	r4, [pc, #688]	; (d5b44 <setup+0x2dc>)
   d5892:	f8df 83ac 	ldr.w	r8, [pc, #940]	; d5c40 <setup+0x3d8>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d5896:	2103      	movs	r1, #3
   d5898:	200d      	movs	r0, #13
   d589a:	f003 f945 	bl	d8b28 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d589e:	2101      	movs	r1, #1
   d58a0:	200c      	movs	r0, #12
   d58a2:	f003 f941 	bl	d8b28 <pinMode>
   d58a6:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d58a8:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d58ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d58b0:	f003 031f 	and.w	r3, r3, #31
   d58b4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d58b8:	f7fe fc31 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d58bc:	2101      	movs	r1, #1
   d58be:	200b      	movs	r0, #11
   d58c0:	f003 f932 	bl	d8b28 <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d58c4:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_set(nrf_pin);
   d58c6:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d58ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d58ce:	f003 031f 	and.w	r3, r3, #31
   d58d2:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d58d6:	2500      	movs	r5, #0
   d58d8:	f7fe fc12 	bl	d4100 <nrf_gpio_pin_set>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
   d58dc:	2101      	movs	r1, #1
   d58de:	2007      	movs	r0, #7
   d58e0:	f003 f933 	bl	d8b4a <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d58e4:	f7fe fe14 	bl	d4510 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d58e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d58ec:	2201      	movs	r2, #1
   d58ee:	4996      	ldr	r1, [pc, #600]	; (d5b48 <setup+0x2e0>)
   d58f0:	9500      	str	r5, [sp, #0]
   d58f2:	2008      	movs	r0, #8
   d58f4:	f002 f922 	bl	d7b3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d58f8:	a804      	add	r0, sp, #16
   d58fa:	f001 fb03 	bl	d6f04 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d58fe:	462b      	mov	r3, r5
   d5900:	227d      	movs	r2, #125	; 0x7d
   d5902:	a90c      	add	r1, sp, #48	; 0x30
   d5904:	a804      	add	r0, sp, #16
   d5906:	f002 fc4a 	bl	d819e <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d590a:	462b      	mov	r3, r5
   d590c:	462a      	mov	r2, r5
   d590e:	498f      	ldr	r1, [pc, #572]	; (d5b4c <setup+0x2e4>)
   d5910:	9501      	str	r5, [sp, #4]
   d5912:	9500      	str	r5, [sp, #0]
   d5914:	a80c      	add	r0, sp, #48	; 0x30
   d5916:	f001 fb05 	bl	d6f24 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
   d591a:	498d      	ldr	r1, [pc, #564]	; (d5b50 <setup+0x2e8>)
   d591c:	488d      	ldr	r0, [pc, #564]	; (d5b54 <setup+0x2ec>)
   d591e:	f7ff ff95 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d5922:	498d      	ldr	r1, [pc, #564]	; (d5b58 <setup+0x2f0>)
   d5924:	488d      	ldr	r0, [pc, #564]	; (d5b5c <setup+0x2f4>)
   d5926:	f7ff ff91 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
   d592a:	498d      	ldr	r1, [pc, #564]	; (d5b60 <setup+0x2f8>)
   d592c:	488d      	ldr	r0, [pc, #564]	; (d5b64 <setup+0x2fc>)
   d592e:	f7ff ff91 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d5932:	498d      	ldr	r1, [pc, #564]	; (d5b68 <setup+0x300>)
   d5934:	488d      	ldr	r0, [pc, #564]	; (d5b6c <setup+0x304>)
   d5936:	f7ff ff89 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Temperature",current.temperature);
   d593a:	498d      	ldr	r1, [pc, #564]	; (d5b70 <setup+0x308>)
   d593c:	488d      	ldr	r0, [pc, #564]	; (d5b74 <setup+0x30c>)
   d593e:	f7ff ff85 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d5942:	498d      	ldr	r1, [pc, #564]	; (d5b78 <setup+0x310>)
   d5944:	488d      	ldr	r0, [pc, #564]	; (d5b7c <setup+0x314>)
   d5946:	f7ff ff85 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d594a:	498d      	ldr	r1, [pc, #564]	; (d5b80 <setup+0x318>)
   d594c:	488d      	ldr	r0, [pc, #564]	; (d5b84 <setup+0x31c>)
   d594e:	f7ff ff7d 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("lowPowerMode",lowPowerModeStr);
   d5952:	498d      	ldr	r1, [pc, #564]	; (d5b88 <setup+0x320>)
   d5954:	488d      	ldr	r0, [pc, #564]	; (d5b8c <setup+0x324>)
   d5956:	f7ff ff7d 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
   d595a:	498d      	ldr	r1, [pc, #564]	; (d5b90 <setup+0x328>)
   d595c:	488d      	ldr	r0, [pc, #564]	; (d5b94 <setup+0x32c>)
   d595e:	f7ff ff75 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
   d5962:	498d      	ldr	r1, [pc, #564]	; (d5b98 <setup+0x330>)
   d5964:	488d      	ldr	r0, [pc, #564]	; (d5b9c <setup+0x334>)
   d5966:	f7ff ff71 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Debounce",debounceStr);
   d596a:	498d      	ldr	r1, [pc, #564]	; (d5ba0 <setup+0x338>)
   d596c:	488d      	ldr	r0, [pc, #564]	; (d5ba4 <setup+0x33c>)
   d596e:	f7ff ff71 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d5972:	498d      	ldr	r1, [pc, #564]	; (d5ba8 <setup+0x340>)
   d5974:	488d      	ldr	r0, [pc, #564]	; (d5bac <setup+0x344>)
   d5976:	f7ff ff69 	bl	d584c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d597a:	498d      	ldr	r1, [pc, #564]	; (d5bb0 <setup+0x348>)
   d597c:	488d      	ldr	r0, [pc, #564]	; (d5bb4 <setup+0x34c>)
   d597e:	f7ff ff69 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d5982:	498d      	ldr	r1, [pc, #564]	; (d5bb8 <setup+0x350>)
   d5984:	488d      	ldr	r0, [pc, #564]	; (d5bbc <setup+0x354>)
   d5986:	f7ff ff65 	bl	d5854 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>


  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d598a:	498d      	ldr	r1, [pc, #564]	; (d5bc0 <setup+0x358>)
   d598c:	488d      	ldr	r0, [pc, #564]	; (d5bc4 <setup+0x35c>)
   d598e:	f7ff ff65 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d5992:	498d      	ldr	r1, [pc, #564]	; (d5bc8 <setup+0x360>)
   d5994:	488d      	ldr	r0, [pc, #564]	; (d5bcc <setup+0x364>)
   d5996:	f7ff ff61 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d599a:	498d      	ldr	r1, [pc, #564]	; (d5bd0 <setup+0x368>)
   d599c:	488d      	ldr	r0, [pc, #564]	; (d5bd4 <setup+0x36c>)
   d599e:	f7ff ff5d 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d59a2:	498d      	ldr	r1, [pc, #564]	; (d5bd8 <setup+0x370>)
   d59a4:	488d      	ldr	r0, [pc, #564]	; (d5bdc <setup+0x374>)
   d59a6:	f7ff ff59 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d59aa:	498d      	ldr	r1, [pc, #564]	; (d5be0 <setup+0x378>)
   d59ac:	488d      	ldr	r0, [pc, #564]	; (d5be4 <setup+0x37c>)
   d59ae:	f7ff ff55 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d59b2:	498d      	ldr	r1, [pc, #564]	; (d5be8 <setup+0x380>)
   d59b4:	488d      	ldr	r0, [pc, #564]	; (d5bec <setup+0x384>)
   d59b6:	f7ff ff51 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d59ba:	498d      	ldr	r1, [pc, #564]	; (d5bf0 <setup+0x388>)
   d59bc:	488d      	ldr	r0, [pc, #564]	; (d5bf4 <setup+0x38c>)
   d59be:	f7ff ff4d 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d59c2:	498d      	ldr	r1, [pc, #564]	; (d5bf8 <setup+0x390>)
   d59c4:	488d      	ldr	r0, [pc, #564]	; (d5bfc <setup+0x394>)
   d59c6:	f7ff ff49 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d59ca:	498d      	ldr	r1, [pc, #564]	; (d5c00 <setup+0x398>)
   d59cc:	488d      	ldr	r0, [pc, #564]	; (d5c04 <setup+0x39c>)
   d59ce:	f7ff ff45 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d59d2:	498d      	ldr	r1, [pc, #564]	; (d5c08 <setup+0x3a0>)
   d59d4:	488d      	ldr	r0, [pc, #564]	; (d5c0c <setup+0x3a4>)
   d59d6:	f7ff ff41 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d59da:	498d      	ldr	r1, [pc, #564]	; (d5c10 <setup+0x3a8>)
   d59dc:	488d      	ldr	r0, [pc, #564]	; (d5c14 <setup+0x3ac>)
   d59de:	f7ff ff3d 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Debounce",setDebounce);
   d59e2:	498d      	ldr	r1, [pc, #564]	; (d5c18 <setup+0x3b0>)
   d59e4:	488d      	ldr	r0, [pc, #564]	; (d5c1c <setup+0x3b4>)
   d59e6:	f7ff ff39 	bl	d585c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d59ea:	488d      	ldr	r0, [pc, #564]	; (d5c20 <setup+0x3b8>)
   d59ec:	f000 fa50 	bl	d5e90 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d59f0:	2301      	movs	r3, #1
   d59f2:	f10d 020f 	add.w	r2, sp, #15
   d59f6:	4629      	mov	r1, r5
   d59f8:	4889      	ldr	r0, [pc, #548]	; (d5c20 <setup+0x3b8>)
   d59fa:	f000 fa8b 	bl	d5f14 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d59fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5a02:	2b02      	cmp	r3, #2
   d5a04:	d01a      	beq.n	d5a3c <setup+0x1d4>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5a06:	4886      	ldr	r0, [pc, #536]	; (d5c20 <setup+0x3b8>)
   d5a08:	f000 fa4c 	bl	d5ea4 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5a0c:	2304      	movs	r3, #4
   d5a0e:	4a85      	ldr	r2, [pc, #532]	; (d5c24 <setup+0x3bc>)
   d5a10:	4883      	ldr	r0, [pc, #524]	; (d5c20 <setup+0x3b8>)
   d5a12:	4629      	mov	r1, r5
   d5a14:	f000 fad4 	bl	d5fc0 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5a18:	2301      	movs	r3, #1
   d5a1a:	f10d 020f 	add.w	r2, sp, #15
   d5a1e:	4629      	mov	r1, r5
   d5a20:	487f      	ldr	r0, [pc, #508]	; (d5c20 <setup+0x3b8>)
   d5a22:	f000 fa77 	bl	d5f14 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5a26:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5a2a:	2b02      	cmp	r3, #2
   d5a2c:	d003      	beq.n	d5a36 <setup+0x1ce>
   d5a2e:	2301      	movs	r3, #1
   d5a30:	f888 3000 	strb.w	r3, [r8]
   d5a34:	e008      	b.n	d5a48 <setup+0x1e0>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5a36:	f7ff fb47 	bl	d50c8 <_Z18loadSystemDefaultsv>
   d5a3a:	e005      	b.n	d5a48 <setup+0x1e0>
   d5a3c:	232c      	movs	r3, #44	; 0x2c
   d5a3e:	4622      	mov	r2, r4
   d5a40:	2101      	movs	r1, #1
   d5a42:	4877      	ldr	r0, [pc, #476]	; (d5c20 <setup+0x3b8>)
   d5a44:	f000 fa66 	bl	d5f14 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a48:	ad2c      	add	r5, sp, #176	; 0xb0
   d5a4a:	2600      	movs	r6, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d5a4c:	f7ff fab8 	bl	d4fc0 <_Z17checkSystemValuesv>
   d5a50:	f845 6d90 	str.w	r6, [r5, #-144]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a54:	4632      	mov	r2, r6
   d5a56:	4631      	mov	r1, r6
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f001 f809 	bl	d6a70 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a5e:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5a60:	2b14      	cmp	r3, #20
   d5a62:	f000 814f 	beq.w	d5d04 <setup+0x49c>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a66:	4632      	mov	r2, r6
   d5a68:	4631      	mov	r1, r6
   d5a6a:	4628      	mov	r0, r5
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a6c:	9608      	str	r6, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a6e:	f000 ffff 	bl	d6a70 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5a72:	9b08      	ldr	r3, [sp, #32]
   d5a74:	2b8c      	cmp	r3, #140	; 0x8c
   d5a76:	f000 8145 	beq.w	d5d04 <setup+0x49c>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec", (float)sysStatus.debounce/1000.0);
   d5a7a:	edd4 7a04 	vldr	s15, [r4, #16]
   d5a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a82:	ee17 0a90 	vmov	r0, s15
   d5a86:	f003 fbd3 	bl	d9230 <__aeabi_f2d>
   d5a8a:	4b67      	ldr	r3, [pc, #412]	; (d5c28 <setup+0x3c0>)
   d5a8c:	2200      	movs	r2, #0
   d5a8e:	f003 fd4d 	bl	d952c <__aeabi_ddiv>
   d5a92:	4a66      	ldr	r2, [pc, #408]	; (d5c2c <setup+0x3c4>)
   d5a94:	e9cd 0100 	strd	r0, r1, [sp]
   d5a98:	2108      	movs	r1, #8
   d5a9a:	4841      	ldr	r0, [pc, #260]	; (d5ba0 <setup+0x338>)
   d5a9c:	f001 fae2 	bl	d7064 <snprintf>

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
   d5aa0:	79a3      	ldrb	r3, [r4, #6]
   d5aa2:	b10b      	cbz	r3, d5aa8 <setup+0x240>
   d5aa4:	4962      	ldr	r1, [pc, #392]	; (d5c30 <setup+0x3c8>)
   d5aa6:	e000      	b.n	d5aaa <setup+0x242>
   d5aa8:	4962      	ldr	r1, [pc, #392]	; (d5c34 <setup+0x3cc>)
   d5aaa:	4837      	ldr	r0, [pc, #220]	; (d5b88 <setup+0x320>)
   d5aac:	f004 fbe4 	bl	da278 <strcpy>

  rtc.setup();                                                        // Start the real time clock
   d5ab0:	4861      	ldr	r0, [pc, #388]	; (d5c38 <setup+0x3d0>)
   d5ab2:	f000 fd31 	bl	d6518 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5ab6:	2100      	movs	r1, #0
   d5ab8:	485f      	ldr	r0, [pc, #380]	; (d5c38 <setup+0x3d0>)
   d5aba:	f000 fe82 	bl	d67c2 <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5abe:	ed94 0a07 	vldr	s0, [r4, #28]
   d5ac2:	f002 fd17 	bl	d84f4 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d5ac6:	f002 fdff 	bl	d86c8 <_ZN9TimeClass7isValidEv>
   d5aca:	b920      	cbnz	r0, d5ad6 <setup+0x26e>
   d5acc:	485a      	ldr	r0, [pc, #360]	; (d5c38 <setup+0x3d0>)
   d5ace:	f000 fd13 	bl	d64f8 <_ZNK8MCP7941010getRTCTimeEv>
   d5ad2:	f002 fd39 	bl	d8548 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5ad6:	f7fe fe25 	bl	d4724 <_Z8isDSTusav>
   d5ada:	b110      	cbz	r0, d5ae2 <setup+0x27a>
   d5adc:	f002 fd24 	bl	d8528 <_ZN9TimeClass8beginDSTEv>
   d5ae0:	e001      	b.n	d5ae6 <setup+0x27e>
   d5ae2:	f002 fd2b 	bl	d853c <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5ae6:	ed94 0a06 	vldr	s0, [r4, #24]
   d5aea:	f8df 9158 	ldr.w	r9, [pc, #344]	; d5c44 <setup+0x3dc>
   d5aee:	f002 fce5 	bl	d84bc <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5af2:	f002 fcd5 	bl	d84a0 <_ZN9TimeClass5localEv>
   d5af6:	4606      	mov	r6, r0
   d5af8:	f002 fe07 	bl	d870a <_ZN9TimeClass3nowEv>
   d5afc:	1a30      	subs	r0, r6, r0
   d5afe:	f003 fb85 	bl	d920c <__aeabi_i2d>
   d5b02:	a30d      	add	r3, pc, #52	; (adr r3, d5b38 <setup+0x2d0>)
   d5b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b08:	f003 fd10 	bl	d952c <__aeabi_ddiv>
   d5b0c:	4e10      	ldr	r6, [pc, #64]	; (d5b50 <setup+0x2e8>)
   d5b0e:	4a4b      	ldr	r2, [pc, #300]	; (d5c3c <setup+0x3d4>)
   d5b10:	e9cd 0100 	strd	r0, r1, [sp]
   d5b14:	210a      	movs	r1, #10
   d5b16:	4826      	ldr	r0, [pc, #152]	; (d5bb0 <setup+0x348>)
   d5b18:	f001 faa4 	bl	d7064 <snprintf>
   d5b1c:	231c      	movs	r3, #28
   d5b1e:	4632      	mov	r2, r6
   d5b20:	2150      	movs	r1, #80	; 0x50
   d5b22:	483f      	ldr	r0, [pc, #252]	; (d5c20 <setup+0x3b8>)
   d5b24:	f000 f9f6 	bl	d5f14 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
   d5b28:	6833      	ldr	r3, [r6, #0]
   d5b2a:	2b00      	cmp	r3, #0
   d5b2c:	f000 808c 	beq.w	d5c48 <setup+0x3e0>
   d5b30:	68f0      	ldr	r0, [r6, #12]
   d5b32:	f002 fc91 	bl	d8458 <_ZN9TimeClass4hourEl>
   d5b36:	e089      	b.n	d5c4c <setup+0x3e4>
   d5b38:	00000000 	.word	0x00000000
   d5b3c:	40ac2000 	.word	0x40ac2000
   d5b40:	2003e108 	.word	0x2003e108
   d5b44:	2003e188 	.word	0x2003e188
   d5b48:	000d40c5 	.word	0x000d40c5
   d5b4c:	000d49f9 	.word	0x000d49f9
   d5b50:	2003e164 	.word	0x2003e164
   d5b54:	000dd2c9 	.word	0x000dd2c9
   d5b58:	2003e16c 	.word	0x2003e16c
   d5b5c:	000dd2d5 	.word	0x000dd2d5
   d5b60:	2003e110 	.word	0x2003e110
   d5b64:	000dd2e0 	.word	0x000dd2e0
   d5b68:	2003e19c 	.word	0x2003e19c
   d5b6c:	000dd2e7 	.word	0x000dd2e7
   d5b70:	2003e174 	.word	0x2003e174
   d5b74:	000dd2f2 	.word	0x000dd2f2
   d5b78:	2003df74 	.word	0x2003df74
   d5b7c:	000dd2fe 	.word	0x000dd2fe
   d5b80:	2003e190 	.word	0x2003e190
   d5b84:	000dd306 	.word	0x000dd306
   d5b88:	2003e15d 	.word	0x2003e15d
   d5b8c:	000dd311 	.word	0x000dd311
   d5b90:	2003e1a8 	.word	0x2003e1a8
   d5b94:	000dd3b5 	.word	0x000dd3b5
   d5b98:	2003e1ac 	.word	0x2003e1ac
   d5b9c:	000dd31e 	.word	0x000dd31e
   d5ba0:	2003df79 	.word	0x2003df79
   d5ba4:	000dd3cc 	.word	0x000dd3cc
   d5ba8:	2003e178 	.word	0x2003e178
   d5bac:	000dd328 	.word	0x000dd328
   d5bb0:	2003e07d 	.word	0x2003e07d
   d5bb4:	000dd32f 	.word	0x000dd32f
   d5bb8:	2003e0bd 	.word	0x2003e0bd
   d5bbc:	000dd33a 	.word	0x000dd33a
   d5bc0:	000d4155 	.word	0x000d4155
   d5bc4:	000dd349 	.word	0x000dd349
   d5bc8:	000d41b5 	.word	0x000d41b5
   d5bcc:	000dd353 	.word	0x000dd353
   d5bd0:	000d4a95 	.word	0x000d4a95
   d5bd4:	000dd35f 	.word	0x000dd35f
   d5bd8:	000d4171 	.word	0x000d4171
   d5bdc:	000dd369 	.word	0x000dd369
   d5be0:	000d4eed 	.word	0x000d4eed
   d5be4:	000dd371 	.word	0x000dd371
   d5be8:	000d4b89 	.word	0x000d4b89
   d5bec:	000dd37e 	.word	0x000dd37e
   d5bf0:	000d4c35 	.word	0x000d4c35
   d5bf4:	000dd389 	.word	0x000dd389
   d5bf8:	000d4cd9 	.word	0x000d4cd9
   d5bfc:	000dd396 	.word	0x000dd396
   d5c00:	000d5729 	.word	0x000d5729
   d5c04:	000dd3a3 	.word	0x000dd3a3
   d5c08:	000d4e0d 	.word	0x000d4e0d
   d5c0c:	000dd3b1 	.word	0x000dd3b1
   d5c10:	000d4e7d 	.word	0x000d4e7d
   d5c14:	000dd3be 	.word	0x000dd3be
   d5c18:	000d4ae1 	.word	0x000d4ae1
   d5c1c:	000dd3c8 	.word	0x000dd3c8
   d5c20:	2003e088 	.word	0x2003e088
   d5c24:	000dcff4 	.word	0x000dcff4
   d5c28:	408f4000 	.word	0x408f4000
   d5c2c:	000dd126 	.word	0x000dd126
   d5c30:	000dd1e2 	.word	0x000dd1e2
   d5c34:	000dd1f9 	.word	0x000dd1f9
   d5c38:	2003e098 	.word	0x2003e098
   d5c3c:	000dd18a 	.word	0x000dd18a
   d5c40:	2003e0d4 	.word	0x2003e0d4
   d5c44:	2003e0d8 	.word	0x2003e0d8
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
   d5c48:	f002 fd66 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5c4c:	f8c9 0000 	str.w	r0, [r9]

  setPowerConfig();                                                        // Executes commands that set up the PMIC for Solar charging
   d5c50:	f7fe fc7e 	bl	d4550 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5c54:	2004      	movs	r0, #4
   d5c56:	f002 ff91 	bl	d8b7c <digitalRead>
   d5c5a:	b908      	cbnz	r0, d5c60 <setup+0x3f8>
   d5c5c:	f7ff fa34 	bl	d50c8 <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  
  if (Time.day() != Time.day(current.lastCountTime)) {    // ******  - These are debug lines
   d5c60:	f002 fd6e 	bl	d8740 <_ZN9TimeClass3dayEv>
   d5c64:	4681      	mov	r9, r0
   d5c66:	68f0      	ldr	r0, [r6, #12]
   d5c68:	f002 fbfe 	bl	d8468 <_ZN9TimeClass3dayEl>
   d5c6c:	4581      	cmp	r9, r0
   d5c6e:	d010      	beq.n	d5c92 <setup+0x42a>
    resetEverything();                                               // Zero the counts for the new day
   d5c70:	f7fe fcf4 	bl	d465c <_Z15resetEverythingv>
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
   d5c74:	7963      	ldrb	r3, [r4, #5]
   d5c76:	b163      	cbz	r3, d5c92 <setup+0x42a>
   d5c78:	4b27      	ldr	r3, [pc, #156]	; (d5d18 <setup+0x4b0>)
   d5c7a:	799b      	ldrb	r3, [r3, #6]
   d5c7c:	b94b      	cbnz	r3, d5c92 <setup+0x42a>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
   d5c7e:	4927      	ldr	r1, [pc, #156]	; (d5d1c <setup+0x4b4>)
   d5c80:	4628      	mov	r0, r5
   d5c82:	f002 fa4d 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
   d5c86:	4628      	mov	r0, r5
   d5c88:	f7ff f930 	bl	d4eec <_Z15setLowPowerMode6String>
   d5c8c:	4628      	mov	r0, r5
   d5c8e:	f002 fa00 	bl	d8092 <_ZN6StringD1Ev>
    }
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
   d5c92:	f002 fd41 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c98:	4d1f      	ldr	r5, [pc, #124]	; (d5d18 <setup+0x4b0>)
   d5c9a:	4298      	cmp	r0, r3
   d5c9c:	da17      	bge.n	d5cce <setup+0x466>
   d5c9e:	f002 fd3b 	bl	d8718 <_ZN9TimeClass4hourEv>
   d5ca2:	6a2b      	ldr	r3, [r5, #32]
   d5ca4:	4298      	cmp	r0, r3
   d5ca6:	db12      	blt.n	d5cce <setup+0x466>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5ca8:	2300      	movs	r3, #0
   d5caa:	9300      	str	r3, [sp, #0]
   d5cac:	2201      	movs	r2, #1
   d5cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5cb2:	491b      	ldr	r1, [pc, #108]	; (d5d20 <setup+0x4b8>)
   d5cb4:	200d      	movs	r0, #13
   d5cb6:	f001 ff41 	bl	d7b3c <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5cba:	78eb      	ldrb	r3, [r5, #3]
   d5cbc:	b113      	cbz	r3, d5cc4 <setup+0x45c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5cbe:	f001 f919 	bl	d6ef4 <spark_cloud_flag_connected>
   d5cc2:	b330      	cbz	r0, d5d12 <setup+0x4aa>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5cc4:	f7fe fbec 	bl	d44a0 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5cc8:	4b16      	ldr	r3, [pc, #88]	; (d5d24 <setup+0x4bc>)
   d5cca:	4a17      	ldr	r2, [pc, #92]	; (d5d28 <setup+0x4c0>)
   d5ccc:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5cce:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5cd0:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5cd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5cd8:	f003 031f 	and.w	r3, r3, #31
   d5cdc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5ce0:	f7fe fa1d 	bl	d411e <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5ce4:	f898 3000 	ldrb.w	r3, [r8]
   d5ce8:	b913      	cbnz	r3, d5cf0 <setup+0x488>
   d5cea:	4b10      	ldr	r3, [pc, #64]	; (d5d2c <setup+0x4c4>)
   d5cec:	2202      	movs	r2, #2
   d5cee:	701a      	strb	r2, [r3, #0]

   digitalWrite(blueLED,LOW);
   d5cf0:	2100      	movs	r1, #0
   d5cf2:	2007      	movs	r0, #7
   d5cf4:	f002 ff29 	bl	d8b4a <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5cf8:	a804      	add	r0, sp, #16
   d5cfa:	f002 f9ca 	bl	d8092 <_ZN6StringD1Ev>
  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

   digitalWrite(blueLED,LOW);
}
   d5cfe:	b02d      	add	sp, #180	; 0xb4
   d5d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5d04:	6963      	ldr	r3, [r4, #20]
   d5d06:	3301      	adds	r3, #1
   d5d08:	6163      	str	r3, [r4, #20]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5d0a:	4b09      	ldr	r3, [pc, #36]	; (d5d30 <setup+0x4c8>)
   d5d0c:	2201      	movs	r2, #1
   d5d0e:	701a      	strb	r2, [r3, #0]
   d5d10:	e6b3      	b.n	d5a7a <setup+0x212>
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5d12:	f7fe fddd 	bl	d48d0 <_Z17connectToParticlev>
   d5d16:	e7d5      	b.n	d5cc4 <setup+0x45c>
   d5d18:	2003e188 	.word	0x2003e188
   d5d1c:	000dd44c 	.word	0x000dd44c
   d5d20:	000d40b9 	.word	0x000d40b9
   d5d24:	2003e0b8 	.word	0x2003e0b8
   d5d28:	00015f90 	.word	0x00015f90
   d5d2c:	2003e0d4 	.word	0x2003e0d4
   d5d30:	2003e185 	.word	0x2003e185

000d5d34 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d34:	4b32      	ldr	r3, [pc, #200]	; (d5e00 <_GLOBAL__sub_I___appProductID+0xcc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d3a:	2400      	movs	r4, #0
   d5d3c:	601c      	str	r4, [r3, #0]
   d5d3e:	4b31      	ldr	r3, [pc, #196]	; (d5e04 <_GLOBAL__sub_I___appProductID+0xd0>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d40:	4d31      	ldr	r5, [pc, #196]	; (d5e08 <_GLOBAL__sub_I___appProductID+0xd4>)
#include "MCP79410RK.h"                             // Real Time Clock
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include "UnitTestCode.h"                           // This code will exercise the device

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5d42:	4e32      	ldr	r6, [pc, #200]	; (d5e0c <_GLOBAL__sub_I___appProductID+0xd8>)
   d5d44:	2701      	movs	r7, #1
   d5d46:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5d48:	f000 fed2 	bl	d6af0 <HAL_Pin_Map>
   d5d4c:	4b30      	ldr	r3, [pc, #192]	; (d5e10 <_GLOBAL__sub_I___appProductID+0xdc>)
   d5d4e:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5d50:	f002 feb0 	bl	d8ab4 <spark_protocol_instance>
   d5d54:	4623      	mov	r3, r4
   d5d56:	4622      	mov	r2, r4
   d5d58:	f642 2170 	movw	r1, #10864	; 0x2a70
   d5d5c:	f002 feb2 	bl	d8ac4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5d60:	f002 fea8 	bl	d8ab4 <spark_protocol_instance>
   d5d64:	4622      	mov	r2, r4
   d5d66:	4623      	mov	r3, r4
   d5d68:	2103      	movs	r1, #3
   d5d6a:	f002 feb3 	bl	d8ad4 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d72:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d74:	602c      	str	r4, [r5, #0]
   d5d76:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d78:	71ac      	strb	r4, [r5, #6]
   d5d7a:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d7c:	2002      	movs	r0, #2
   d5d7e:	f001 f829 	bl	d6dd4 <set_system_mode>
   d5d82:	4632      	mov	r2, r6
   d5d84:	4923      	ldr	r1, [pc, #140]	; (d5e14 <_GLOBAL__sub_I___appProductID+0xe0>)
   d5d86:	4628      	mov	r0, r5
   d5d88:	f002 ff82 	bl	d8c90 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5d8c:	4d22      	ldr	r5, [pc, #136]	; (d5e18 <_GLOBAL__sub_I___appProductID+0xe4>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5d8e:	4621      	mov	r1, r4
   d5d90:	4638      	mov	r0, r7
   d5d92:	f001 f837 	bl	d6e04 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5d96:	4639      	mov	r1, r7
   d5d98:	2004      	movs	r0, #4
   d5d9a:	f000 fe59 	bl	d6a50 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5d9e:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5da2:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5da4:	4642      	mov	r2, r8
   d5da6:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5da8:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5daa:	f003 ffdc 	bl	d9d66 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5dae:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5db0:	4632      	mov	r2, r6
   d5db2:	491a      	ldr	r1, [pc, #104]	; (d5e1c <_GLOBAL__sub_I___appProductID+0xe8>)
   d5db4:	80eb      	strh	r3, [r5, #6]
   d5db6:	4628      	mov	r0, r5
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5db8:	752f      	strb	r7, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5dba:	f8a5 8004 	strh.w	r8, [r5, #4]
   d5dbe:	f002 ff67 	bl	d8c90 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5dc2:	f002 ff1f 	bl	d8c04 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5dc6:	4d16      	ldr	r5, [pc, #88]	; (d5e20 <_GLOBAL__sub_I___appProductID+0xec>)
   d5dc8:	4601      	mov	r1, r0
   d5dca:	4628      	mov	r0, r5
   d5dcc:	f000 fae2 	bl	d6394 <_ZN8MCP79410C1ER7TwoWire>
   d5dd0:	4632      	mov	r2, r6
   d5dd2:	4914      	ldr	r1, [pc, #80]	; (d5e24 <_GLOBAL__sub_I___appProductID+0xf0>)
   d5dd4:	4628      	mov	r0, r5
   d5dd6:	f002 ff5b 	bl	d8c90 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5dda:	f002 ff13 	bl	d8c04 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5dde:	4d12      	ldr	r5, [pc, #72]	; (d5e28 <_GLOBAL__sub_I___appProductID+0xf4>)
   d5de0:	4623      	mov	r3, r4
   d5de2:	4601      	mov	r1, r0
   d5de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5de8:	4628      	mov	r0, r5
   d5dea:	f000 f847 	bl	d5e7c <_ZN6MB85RCC1ER7TwoWireji>
   d5dee:	4b0f      	ldr	r3, [pc, #60]	; (d5e2c <_GLOBAL__sub_I___appProductID+0xf8>)
   d5df0:	602b      	str	r3, [r5, #0]
   d5df2:	4632      	mov	r2, r6
   d5df4:	4628      	mov	r0, r5
   d5df6:	490e      	ldr	r1, [pc, #56]	; (d5e30 <_GLOBAL__sub_I___appProductID+0xfc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5dfc:	f002 bf48 	b.w	d8c90 <__aeabi_atexit>
   d5e00:	2003e0f8 	.word	0x2003e0f8
   d5e04:	2003e0b4 	.word	0x2003e0b4
   d5e08:	2003e0fc 	.word	0x2003e0fc
   d5e0c:	2003e078 	.word	0x2003e078
   d5e10:	2003e108 	.word	0x2003e108
   d5e14:	000d4241 	.word	0x000d4241
   d5e18:	2003e0e0 	.word	0x2003e0e0
   d5e1c:	000d413d 	.word	0x000d413d
   d5e20:	2003e098 	.word	0x2003e098
   d5e24:	000d6107 	.word	0x000d6107
   d5e28:	2003e088 	.word	0x2003e088
   d5e2c:	000dcf9c 	.word	0x000dcf9c
   d5e30:	000d418d 	.word	0x000d418d

000d5e34 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5e34:	4770      	bx	lr

000d5e36 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5e36:	b510      	push	{r4, lr}
}
   d5e38:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5e3a:	4604      	mov	r4, r0
}
   d5e3c:	f002 ff2d 	bl	d8c9a <_ZdlPvj>
   d5e40:	4620      	mov	r0, r4
   d5e42:	bd10      	pop	{r4, pc}

000d5e44 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5e44:	6803      	ldr	r3, [r0, #0]
   d5e46:	b2c9      	uxtb	r1, r1
   d5e48:	689b      	ldr	r3, [r3, #8]
   d5e4a:	4718      	bx	r3

000d5e4c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5e4c:	b40e      	push	{r1, r2, r3}
   d5e4e:	b500      	push	{lr}
   d5e50:	b08c      	sub	sp, #48	; 0x30
   d5e52:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5e54:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5e56:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5e5a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e5c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5e60:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e62:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5e64:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e66:	aa04      	add	r2, sp, #16
   d5e68:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5e6a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5e6c:	f000 ff98 	bl	d6da0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d5e70:	b00c      	add	sp, #48	; 0x30
   d5e72:	f85d eb04 	ldr.w	lr, [sp], #4
   d5e76:	b003      	add	sp, #12
   d5e78:	4770      	bx	lr
	...

000d5e7c <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5e7c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5e7e:	4d03      	ldr	r5, [pc, #12]	; (d5e8c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5e80:	6005      	str	r5, [r0, #0]
   d5e82:	6041      	str	r1, [r0, #4]
   d5e84:	6082      	str	r2, [r0, #8]
   d5e86:	60c3      	str	r3, [r0, #12]
}
   d5e88:	bd30      	pop	{r4, r5, pc}
   d5e8a:	bf00      	nop
   d5e8c:	000dd4d0 	.word	0x000dd4d0

000d5e90 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5e90:	6840      	ldr	r0, [r0, #4]
   d5e92:	f001 bdfd 	b.w	d7a90 <_ZN7TwoWire5beginEv>

000d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5e96:	b510      	push	{r4, lr}
   d5e98:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5e9a:	6800      	ldr	r0, [r0, #0]
   d5e9c:	f001 fe44 	bl	d7b28 <_ZN7TwoWire6unlockEv>
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	bd10      	pop	{r4, pc}

000d5ea4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ea8:	b08a      	sub	sp, #40	; 0x28
   d5eaa:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5eac:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5eae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5eb0:	f001 fe31 	bl	d7b16 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5eb4:	221e      	movs	r2, #30
   d5eb6:	2100      	movs	r1, #0
   d5eb8:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5eba:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5ebc:	f003 ff53 	bl	d9d66 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5ec0:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5ec2:	b1de      	cbz	r6, d5efc <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5ec4:	683b      	ldr	r3, [r7, #0]
   d5ec6:	2e1e      	cmp	r6, #30
   d5ec8:	46b0      	mov	r8, r6
   d5eca:	bf28      	it	cs
   d5ecc:	f04f 081e 	movcs.w	r8, #30
   d5ed0:	68dc      	ldr	r4, [r3, #12]
   d5ed2:	aa02      	add	r2, sp, #8
   d5ed4:	4643      	mov	r3, r8
   d5ed6:	4629      	mov	r1, r5
   d5ed8:	4638      	mov	r0, r7
   d5eda:	47a0      	blx	r4
			if (!result) {
   d5edc:	4604      	mov	r4, r0
   d5ede:	b948      	cbnz	r0, d5ef4 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5ee0:	462a      	mov	r2, r5
   d5ee2:	490a      	ldr	r1, [pc, #40]	; (d5f0c <_ZN6MB85RC5eraseEv+0x68>)
   d5ee4:	480a      	ldr	r0, [pc, #40]	; (d5f10 <_ZN6MB85RC5eraseEv+0x6c>)
   d5ee6:	f7ff ffb1 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
   d5eea:	a801      	add	r0, sp, #4
   d5eec:	f7ff ffd3 	bl	d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	e007      	b.n	d5f04 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5ef4:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5ef8:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5efa:	e7e2      	b.n	d5ec2 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5efc:	a801      	add	r0, sp, #4
   d5efe:	f7ff ffca 	bl	d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5f02:	2001      	movs	r0, #1
}
   d5f04:	b00a      	add	sp, #40	; 0x28
   d5f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f0a:	bf00      	nop
   d5f0c:	000dd44e 	.word	0x000dd44e
   d5f10:	2003e284 	.word	0x2003e284

000d5f14 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5f14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5f18:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5f1a:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f1c:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5f1e:	460e      	mov	r6, r1
   d5f20:	4617      	mov	r7, r2
   d5f22:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5f24:	f001 fdf7 	bl	d7b16 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5f28:	f1b8 0f00 	cmp.w	r8, #0
   d5f2c:	d101      	bne.n	d5f32 <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5f2e:	2401      	movs	r4, #1
   d5f30:	e03f      	b.n	d5fb2 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5f32:	68e1      	ldr	r1, [r4, #12]
   d5f34:	6860      	ldr	r0, [r4, #4]
   d5f36:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f3a:	f001 fde1 	bl	d7b00 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5f3e:	0a31      	lsrs	r1, r6, #8
   d5f40:	6860      	ldr	r0, [r4, #4]
   d5f42:	f7ff ff7f 	bl	d5e44 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5f46:	4631      	mov	r1, r6
   d5f48:	6860      	ldr	r0, [r4, #4]
   d5f4a:	f7ff ff7b 	bl	d5e44 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5f4e:	2100      	movs	r1, #0
   d5f50:	6860      	ldr	r0, [r4, #4]
   d5f52:	f001 fdd8 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5f56:	b108      	cbz	r0, d5f5c <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5f58:	2400      	movs	r4, #0
   d5f5a:	e02a      	b.n	d5fb2 <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5f5c:	68e1      	ldr	r1, [r4, #12]
   d5f5e:	6860      	ldr	r0, [r4, #4]
   d5f60:	f1b8 0f20 	cmp.w	r8, #32
   d5f64:	46c1      	mov	r9, r8
   d5f66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5f6a:	bf28      	it	cs
   d5f6c:	f04f 0920 	movcs.w	r9, #32
   d5f70:	2301      	movs	r3, #1
   d5f72:	464a      	mov	r2, r9
   d5f74:	b2c9      	uxtb	r1, r1
   d5f76:	f001 fdad 	bl	d7ad4 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5f7a:	f002 fe43 	bl	d8c04 <_Z19__fetch_global_Wirev>
   d5f7e:	6803      	ldr	r3, [r0, #0]
   d5f80:	691b      	ldr	r3, [r3, #16]
   d5f82:	4798      	blx	r3
   d5f84:	4548      	cmp	r0, r9
   d5f86:	dbe7      	blt.n	d5f58 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5f88:	463d      	mov	r5, r7
   d5f8a:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5f8e:	f002 fe39 	bl	d8c04 <_Z19__fetch_global_Wirev>
   d5f92:	6803      	ldr	r3, [r0, #0]
   d5f94:	695b      	ldr	r3, [r3, #20]
   d5f96:	4798      	blx	r3
   d5f98:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5f9c:	1bea      	subs	r2, r5, r7
   d5f9e:	ebc5 0308 	rsb	r3, r5, r8
   d5fa2:	4591      	cmp	r9, r2
   d5fa4:	eb05 060a 	add.w	r6, r5, sl
   d5fa8:	443b      	add	r3, r7
   d5faa:	d8f0      	bhi.n	d5f8e <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5fac:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5fae:	462f      	mov	r7, r5
   d5fb0:	e7ba      	b.n	d5f28 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5fb2:	a801      	add	r0, sp, #4
   d5fb4:	f7ff ff6f 	bl	d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5fb8:	4620      	mov	r0, r4
   d5fba:	b002      	add	sp, #8
   d5fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5fc0 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5fc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5fc4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5fc6:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5fc8:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5fca:	460d      	mov	r5, r1
   d5fcc:	4690      	mov	r8, r2
   d5fce:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5fd0:	f001 fda1 	bl	d7b16 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5fd4:	b34f      	cbz	r7, d602a <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5fd6:	68e1      	ldr	r1, [r4, #12]
   d5fd8:	6860      	ldr	r0, [r4, #4]
   d5fda:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5fde:	f001 fd8f 	bl	d7b00 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5fe2:	0a29      	lsrs	r1, r5, #8
   d5fe4:	6860      	ldr	r0, [r4, #4]
   d5fe6:	f7ff ff2d 	bl	d5e44 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5fea:	4629      	mov	r1, r5
   d5fec:	6860      	ldr	r0, [r4, #4]
   d5fee:	f7ff ff29 	bl	d5e44 <_ZN7TwoWire5writeEj>
   d5ff2:	f108 091e 	add.w	r9, r8, #30
   d5ff6:	4646      	mov	r6, r8
   d5ff8:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5ffc:	6860      	ldr	r0, [r4, #4]
   d5ffe:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6002:	6803      	ldr	r3, [r0, #0]
   d6004:	689b      	ldr	r3, [r3, #8]
   d6006:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6008:	45b1      	cmp	r9, r6
   d600a:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d600e:	46b0      	mov	r8, r6
				dataLen--;
   d6010:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6014:	d001      	beq.n	d601a <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d6016:	2f00      	cmp	r7, #0
   d6018:	d1f0      	bne.n	d5ffc <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d601a:	2101      	movs	r1, #1
   d601c:	6860      	ldr	r0, [r4, #4]
   d601e:	f001 fd72 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6022:	2800      	cmp	r0, #0
   d6024:	d0d6      	beq.n	d5fd4 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d6026:	2400      	movs	r4, #0
   d6028:	e000      	b.n	d602c <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d602a:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d602c:	a801      	add	r0, sp, #4
   d602e:	f7ff ff32 	bl	d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6032:	4620      	mov	r0, r4
   d6034:	b002      	add	sp, #8
   d6036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d603a <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d603a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d603e:	b08b      	sub	sp, #44	; 0x2c
   d6040:	460e      	mov	r6, r1
   d6042:	4615      	mov	r5, r2
   d6044:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6046:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6048:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d604a:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d604c:	f001 fd63 	bl	d7b16 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d6050:	42ae      	cmp	r6, r5
   d6052:	d223      	bcs.n	d609c <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6054:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6056:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6058:	b90c      	cbnz	r4, d605e <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d605a:	2401      	movs	r4, #1
   d605c:	e03f      	b.n	d60de <_ZN6MB85RC8moveDataEjjj+0xa4>
   d605e:	2c1e      	cmp	r4, #30
   d6060:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6062:	f8d8 3000 	ldr.w	r3, [r8]
   d6066:	bf28      	it	cs
   d6068:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d606a:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d606c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6070:	aa02      	add	r2, sp, #8
   d6072:	463b      	mov	r3, r7
   d6074:	4631      	mov	r1, r6
   d6076:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d6078:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d607a:	47c8      	blx	r9
				if (!result) {
   d607c:	b908      	cbnz	r0, d6082 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d607e:	2400      	movs	r4, #0
   d6080:	e02d      	b.n	d60de <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d6082:	f8d8 3000 	ldr.w	r3, [r8]
   d6086:	aa02      	add	r2, sp, #8
   d6088:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d608c:	4629      	mov	r1, r5
   d608e:	463b      	mov	r3, r7
   d6090:	4640      	mov	r0, r8
   d6092:	47c8      	blx	r9
				if (!result) {
   d6094:	2800      	cmp	r0, #0
   d6096:	d0f2      	beq.n	d607e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d6098:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d609a:	e7dd      	b.n	d6058 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d609c:	d9dd      	bls.n	d605a <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d609e:	2c00      	cmp	r4, #0
   d60a0:	d0db      	beq.n	d605a <_ZN6MB85RC8moveDataEjjj+0x20>
   d60a2:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d60a4:	f8d8 3000 	ldr.w	r3, [r8]
   d60a8:	4627      	mov	r7, r4
   d60aa:	bf28      	it	cs
   d60ac:	271e      	movcs	r7, #30
   d60ae:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d60b2:	aa02      	add	r2, sp, #8
   d60b4:	463b      	mov	r3, r7
   d60b6:	4631      	mov	r1, r6
   d60b8:	4640      	mov	r0, r8
   d60ba:	47c8      	blx	r9
				if (!result) {
   d60bc:	2800      	cmp	r0, #0
   d60be:	d0de      	beq.n	d607e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d60c0:	f8d8 3000 	ldr.w	r3, [r8]
   d60c4:	aa02      	add	r2, sp, #8
   d60c6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d60ca:	4629      	mov	r1, r5
   d60cc:	463b      	mov	r3, r7
   d60ce:	4640      	mov	r0, r8
   d60d0:	47c8      	blx	r9
				if (!result) {
   d60d2:	2800      	cmp	r0, #0
   d60d4:	d0d3      	beq.n	d607e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d60d6:	443e      	add	r6, r7
				framAddrTo += count;
   d60d8:	443d      	add	r5, r7
				numBytes -= count;
   d60da:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d60dc:	e7df      	b.n	d609e <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d60de:	a801      	add	r0, sp, #4
   d60e0:	f7ff fed9 	bl	d5e96 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	b00b      	add	sp, #44	; 0x2c
   d60e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60ec <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d60ec:	f000 bd00 	b.w	d6af0 <HAL_Pin_Map>

000d60f0 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d60f0:	2040      	movs	r0, #64	; 0x40
   d60f2:	4770      	bx	lr

000d60f4 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d60f4:	2000      	movs	r0, #0
   d60f6:	4770      	bx	lr

000d60f8 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d60f8:	2080      	movs	r0, #128	; 0x80
   d60fa:	4770      	bx	lr

000d60fc <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d60fc:	20ff      	movs	r0, #255	; 0xff
   d60fe:	4770      	bx	lr

000d6100 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6100:	4770      	bx	lr

000d6102 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6102:	4770      	bx	lr

000d6104 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6104:	4770      	bx	lr

000d6106 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d6106:	4770      	bx	lr

000d6108 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d6108:	b510      	push	{r4, lr}

}
   d610a:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d610c:	4604      	mov	r4, r0

}
   d610e:	f002 fdc4 	bl	d8c9a <_ZdlPvj>
   d6112:	4620      	mov	r0, r4
   d6114:	bd10      	pop	{r4, pc}

000d6116 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d6116:	b510      	push	{r4, lr}

}
   d6118:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d611a:	4604      	mov	r4, r0

}
   d611c:	f002 fdbd 	bl	d8c9a <_ZdlPvj>
   d6120:	4620      	mov	r0, r4
   d6122:	bd10      	pop	{r4, pc}

000d6124 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d6124:	b510      	push	{r4, lr}

}
   d6126:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d6128:	4604      	mov	r4, r0

}
   d612a:	f002 fdb6 	bl	d8c9a <_ZdlPvj>
   d612e:	4620      	mov	r0, r4
   d6130:	bd10      	pop	{r4, pc}

000d6132 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d6132:	b510      	push	{r4, lr}

}
   d6134:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d6136:	4604      	mov	r4, r0

}
   d6138:	f002 fdaf 	bl	d8c9a <_ZdlPvj>
   d613c:	4620      	mov	r0, r4
   d613e:	bd10      	pop	{r4, pc}

000d6140 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6140:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d6144:	6803      	ldr	r3, [r0, #0]
   d6146:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6148:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d614a:	4798      	blx	r3
   d614c:	2210      	movs	r2, #16
   d614e:	4601      	mov	r1, r0
   d6150:	4668      	mov	r0, sp
   d6152:	f003 fe08 	bl	d9d66 <memset>

	size_t len = length();
   d6156:	682b      	ldr	r3, [r5, #0]
   d6158:	4628      	mov	r0, r5
   d615a:	689b      	ldr	r3, [r3, #8]
   d615c:	4798      	blx	r3
	size_t offset = 0;
   d615e:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d6160:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d6162:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d6164:	42bc      	cmp	r4, r7
   d6166:	d20e      	bcs.n	d6186 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d6168:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d616a:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d616c:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d616e:	bf28      	it	cs
   d6170:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d6172:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6176:	466a      	mov	r2, sp
   d6178:	4633      	mov	r3, r6
   d617a:	4621      	mov	r1, r4
   d617c:	4628      	mov	r0, r5
   d617e:	47c0      	blx	r8
		if (!bResult) {
   d6180:	b108      	cbz	r0, d6186 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d6182:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d6184:	e7ee      	b.n	d6164 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d6186:	b004      	add	sp, #16
   d6188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d618c <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d618c:	2300      	movs	r3, #0
	rawMonth = 1;
   d618e:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d6190:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d6192:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d6194:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d6196:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d6198:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d619a:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d619c:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d619e:	7443      	strb	r3, [r0, #17]
   d61a0:	4770      	bx	lr
	...

000d61a4 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d61a4:	2201      	movs	r2, #1
   d61a6:	b508      	push	{r3, lr}
   d61a8:	7142      	strb	r2, [r0, #5]
   d61aa:	2202      	movs	r2, #2
   d61ac:	7182      	strb	r2, [r0, #6]
   d61ae:	2203      	movs	r2, #3
   d61b0:	4b06      	ldr	r3, [pc, #24]	; (d61cc <_ZN12MCP79410TimeC1Ev+0x28>)
   d61b2:	71c2      	strb	r2, [r0, #7]
   d61b4:	2204      	movs	r2, #4
   d61b6:	6003      	str	r3, [r0, #0]
   d61b8:	7202      	strb	r2, [r0, #8]
   d61ba:	2300      	movs	r3, #0
   d61bc:	2207      	movs	r2, #7
   d61be:	7103      	strb	r3, [r0, #4]
   d61c0:	7242      	strb	r2, [r0, #9]
   d61c2:	7443      	strb	r3, [r0, #17]
	clear();
   d61c4:	f7ff ffe2 	bl	d618c <_ZN12MCP79410Time5clearEv>
}
   d61c8:	bd08      	pop	{r3, pc}
   d61ca:	bf00      	nop
   d61cc:	000dd630 	.word	0x000dd630

000d61d0 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d61d0:	0903      	lsrs	r3, r0, #4
}
   d61d2:	220a      	movs	r2, #10
   d61d4:	f000 000f 	and.w	r0, r0, #15
   d61d8:	fb02 0003 	mla	r0, r2, r3, r0
   d61dc:	4770      	bx	lr

000d61de <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d61de:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d61e0:	7a80      	ldrb	r0, [r0, #10]
   d61e2:	f7ff fff5 	bl	d61d0 <_ZN12MCP79410Time8bcdToIntEh>
}
   d61e6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d61ea:	bd08      	pop	{r3, pc}

000d61ec <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d61ec:	7ac0      	ldrb	r0, [r0, #11]
   d61ee:	f000 001f 	and.w	r0, r0, #31
   d61f2:	f7ff bfed 	b.w	d61d0 <_ZN12MCP79410Time8bcdToIntEh>

000d61f6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d61f6:	7b00      	ldrb	r0, [r0, #12]
   d61f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d61fc:	f7ff bfe8 	b.w	d61d0 <_ZN12MCP79410Time8bcdToIntEh>

000d6200 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d6200:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6202:	7b81      	ldrb	r1, [r0, #14]
   d6204:	064a      	lsls	r2, r1, #25
   d6206:	d50d      	bpl.n	d6224 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6208:	f001 001f 	and.w	r0, r1, #31
   d620c:	f7ff ffe0 	bl	d61d0 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d6210:	068b      	lsls	r3, r1, #26
   d6212:	d503      	bpl.n	d621c <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d6214:	280c      	cmp	r0, #12
   d6216:	d00b      	beq.n	d6230 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d6218:	300c      	adds	r0, #12
   d621a:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d621c:	280c      	cmp	r0, #12
   d621e:	bf08      	it	eq
   d6220:	2000      	moveq	r0, #0
   d6222:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6224:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d6228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d622c:	f7ff bfd0 	b.w	d61d0 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d6230:	bd08      	pop	{r3, pc}

000d6232 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d6232:	7bc0      	ldrb	r0, [r0, #15]
   d6234:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6238:	f7ff bfca 	b.w	d61d0 <_ZN12MCP79410Time8bcdToIntEh>

000d623c <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d623c:	7c00      	ldrb	r0, [r0, #16]
   d623e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6242:	f7ff bfc5 	b.w	d61d0 <_ZN12MCP79410Time8bcdToIntEh>

000d6246 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d6246:	b510      	push	{r4, lr}
   d6248:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d624a:	2224      	movs	r2, #36	; 0x24
   d624c:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d624e:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6250:	a801      	add	r0, sp, #4
   d6252:	f003 fd88 	bl	d9d66 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6256:	4620      	mov	r0, r4
   d6258:	f7ff ffc1 	bl	d61de <_ZNK12MCP79410Time7getYearEv>
   d625c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6260:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6262:	4620      	mov	r0, r4
   d6264:	f7ff ffc2 	bl	d61ec <_ZNK12MCP79410Time8getMonthEv>
   d6268:	3801      	subs	r0, #1
   d626a:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d626c:	4620      	mov	r0, r4
   d626e:	f7ff ffc2 	bl	d61f6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6272:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d6274:	4620      	mov	r0, r4
   d6276:	f7ff ffc3 	bl	d6200 <_ZNK12MCP79410Time7getHourEv>
   d627a:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d627c:	4620      	mov	r0, r4
   d627e:	f7ff ffd8 	bl	d6232 <_ZNK12MCP79410Time9getMinuteEv>
   d6282:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6284:	4620      	mov	r0, r4
   d6286:	f7ff ffd9 	bl	d623c <_ZNK12MCP79410Time9getSecondEv>
   d628a:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d628c:	a801      	add	r0, sp, #4
   d628e:	f003 fe4f 	bl	d9f30 <mktime>
}
   d6292:	b00a      	add	sp, #40	; 0x28
   d6294:	bd10      	pop	{r4, pc}

000d6296 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d6296:	220a      	movs	r2, #10
   d6298:	fb90 f3f2 	sdiv	r3, r0, r2
   d629c:	fb93 f1f2 	sdiv	r1, r3, r2
   d62a0:	fb02 3111 	mls	r1, r2, r1, r3
   d62a4:	fb02 0313 	mls	r3, r2, r3, r0
   d62a8:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d62ac:	b2c0      	uxtb	r0, r0
   d62ae:	4770      	bx	lr

000d62b0 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d62b0:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d62b2:	b510      	push	{r4, lr}
   d62b4:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d62b6:	fb91 f0f3 	sdiv	r0, r1, r3
   d62ba:	fb00 1013 	mls	r0, r0, r3, r1
   d62be:	f7ff ffea 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d62c2:	72a0      	strb	r0, [r4, #10]
   d62c4:	bd10      	pop	{r4, pc}

000d62c6 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d62c6:	b510      	push	{r4, lr}
   d62c8:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d62ca:	4608      	mov	r0, r1
   d62cc:	f7ff ffe3 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d62d0:	72e0      	strb	r0, [r4, #11]
   d62d2:	bd10      	pop	{r4, pc}

000d62d4 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d62d4:	b510      	push	{r4, lr}
   d62d6:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d62d8:	4608      	mov	r0, r1
   d62da:	f7ff ffdc 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d62de:	7b23      	ldrb	r3, [r4, #12]
   d62e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d62e4:	4318      	orrs	r0, r3
   d62e6:	7320      	strb	r0, [r4, #12]
   d62e8:	bd10      	pop	{r4, pc}

000d62ea <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d62ea:	b510      	push	{r4, lr}
   d62ec:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d62ee:	1c48      	adds	r0, r1, #1
   d62f0:	f7ff ffd1 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d62f4:	7b63      	ldrb	r3, [r4, #13]
   d62f6:	f023 0307 	bic.w	r3, r3, #7
   d62fa:	4318      	orrs	r0, r3
   d62fc:	7360      	strb	r0, [r4, #13]
   d62fe:	bd10      	pop	{r4, pc}

000d6300 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d6300:	b510      	push	{r4, lr}
   d6302:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6304:	4608      	mov	r0, r1
   d6306:	f7ff ffc6 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d630a:	73a0      	strb	r0, [r4, #14]
   d630c:	bd10      	pop	{r4, pc}

000d630e <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d630e:	b510      	push	{r4, lr}
   d6310:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6312:	4608      	mov	r0, r1
   d6314:	f7ff ffbf 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d6318:	73e0      	strb	r0, [r4, #15]
   d631a:	bd10      	pop	{r4, pc}

000d631c <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d631c:	b510      	push	{r4, lr}
   d631e:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d6320:	4608      	mov	r0, r1
   d6322:	f7ff ffb8 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d6326:	7c23      	ldrb	r3, [r4, #16]
   d6328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d632c:	4318      	orrs	r0, r3
   d632e:	7420      	strb	r0, [r4, #16]
   d6330:	bd10      	pop	{r4, pc}

000d6332 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d6332:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6334:	4604      	mov	r4, r0
   d6336:	a802      	add	r0, sp, #8
   d6338:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d633c:	f003 fb62 	bl	d9a04 <gmtime>
   d6340:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d6342:	6941      	ldr	r1, [r0, #20]
   d6344:	4620      	mov	r0, r4
   d6346:	f7ff ffb3 	bl	d62b0 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d634a:	6929      	ldr	r1, [r5, #16]
   d634c:	4620      	mov	r0, r4
   d634e:	3101      	adds	r1, #1
   d6350:	f7ff ffb9 	bl	d62c6 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d6354:	68e9      	ldr	r1, [r5, #12]
   d6356:	4620      	mov	r0, r4
   d6358:	f7ff ffbc 	bl	d62d4 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d635c:	69a9      	ldr	r1, [r5, #24]
   d635e:	4620      	mov	r0, r4
   d6360:	f7ff ffc3 	bl	d62ea <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d6364:	68a9      	ldr	r1, [r5, #8]
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff ffca 	bl	d6300 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d636c:	6869      	ldr	r1, [r5, #4]
   d636e:	4620      	mov	r0, r4
   d6370:	f7ff ffcd 	bl	d630e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6374:	6829      	ldr	r1, [r5, #0]
   d6376:	293b      	cmp	r1, #59	; 0x3b
   d6378:	bfa8      	it	ge
   d637a:	213b      	movge	r1, #59	; 0x3b
   d637c:	4620      	mov	r0, r4
   d637e:	f7ff ffcd 	bl	d631c <_ZN12MCP79410Time9setSecondEi>
}
   d6382:	b003      	add	sp, #12
   d6384:	bd30      	pop	{r4, r5, pc}

000d6386 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6386:	b510      	push	{r4, lr}
   d6388:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d638a:	f7ff ffd2 	bl	d6332 <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d638e:	7a63      	ldrb	r3, [r4, #9]
   d6390:	7463      	strb	r3, [r4, #17]
   d6392:	bd10      	pop	{r4, pc}

000d6394 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6394:	4a08      	ldr	r2, [pc, #32]	; (d63b8 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d6396:	6002      	str	r2, [r0, #0]
   d6398:	2200      	movs	r2, #0
   d639a:	7202      	strb	r2, [r0, #8]
   d639c:	7242      	strb	r2, [r0, #9]
   d639e:	2201      	movs	r2, #1
   d63a0:	7282      	strb	r2, [r0, #10]
   d63a2:	4603      	mov	r3, r0
   d63a4:	2203      	movs	r2, #3
   d63a6:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63a8:	4a04      	ldr	r2, [pc, #16]	; (d63bc <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d63aa:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d63ac:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63ae:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63b0:	4a03      	ldr	r2, [pc, #12]	; (d63c0 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d63b2:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d63b4:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d63b6:	4770      	bx	lr
   d63b8:	000dd640 	.word	0x000dd640
   d63bc:	000dd510 	.word	0x000dd510
   d63c0:	000dd4ec 	.word	0x000dd4ec

000d63c4 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d63c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63c8:	4605      	mov	r5, r0
   d63ca:	460f      	mov	r7, r1
   d63cc:	4691      	mov	r9, r2
   d63ce:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d63d0:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d63d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63d4:	429c      	cmp	r4, r3
   d63d6:	d230      	bcs.n	d643a <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d63d8:	4639      	mov	r1, r7
   d63da:	6868      	ldr	r0, [r5, #4]
   d63dc:	f001 fb8c 	bl	d7af8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d63e0:	eb09 0104 	add.w	r1, r9, r4
   d63e4:	6868      	ldr	r0, [r5, #4]
   d63e6:	f7ff fd2d 	bl	d5e44 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d63ea:	2100      	movs	r1, #0
   d63ec:	6868      	ldr	r0, [r5, #4]
   d63ee:	f001 fb8a 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d63f2:	4606      	mov	r6, r0
   d63f4:	b9d8      	cbnz	r0, d642e <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d63f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d63f8:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d63fa:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d63fc:	2a20      	cmp	r2, #32
   d63fe:	f04f 0301 	mov.w	r3, #1
   d6402:	bf28      	it	cs
   d6404:	2220      	movcs	r2, #32
   d6406:	4639      	mov	r1, r7
   d6408:	f001 fb64 	bl	d7ad4 <_ZN7TwoWire11requestFromEhjh>
   d640c:	eb0a 0804 	add.w	r8, sl, r4
   d6410:	4683      	mov	fp, r0
   d6412:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6414:	ebc8 0306 	rsb	r3, r8, r6
   d6418:	459b      	cmp	fp, r3
   d641a:	d906      	bls.n	d642a <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d641c:	6868      	ldr	r0, [r5, #4]
   d641e:	6803      	ldr	r3, [r0, #0]
   d6420:	695b      	ldr	r3, [r3, #20]
   d6422:	4798      	blx	r3
   d6424:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6428:	e7f4      	b.n	d6414 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d642a:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d642c:	e7d1      	b.n	d63d2 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d642e:	4602      	mov	r2, r0
   d6430:	4904      	ldr	r1, [pc, #16]	; (d6444 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6432:	4805      	ldr	r0, [pc, #20]	; (d6448 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d6434:	f7ff fd0a 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6438:	e000      	b.n	d643c <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d643a:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d643c:	4630      	mov	r0, r6
   d643e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6442:	bf00      	nop
   d6444:	000dd58a 	.word	0x000dd58a
   d6448:	2003e1b4 	.word	0x2003e1b4

000d644c <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d644c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d644e:	2301      	movs	r3, #1
   d6450:	9300      	str	r3, [sp, #0]
   d6452:	460a      	mov	r2, r1
   d6454:	ab03      	add	r3, sp, #12
   d6456:	216f      	movs	r1, #111	; 0x6f
   d6458:	f7ff ffb4 	bl	d63c4 <_ZNK8MCP7941010deviceReadEhhPhj>
   d645c:	b910      	cbnz	r0, d6464 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d645e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6462:	e000      	b.n	d6466 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d6464:	2000      	movs	r0, #0
	}
}
   d6466:	b005      	add	sp, #20
   d6468:	f85d fb04 	ldr.w	pc, [sp], #4

000d646c <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d646c:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d646e:	2103      	movs	r1, #3
   d6470:	f7ff ffec 	bl	d644c <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6474:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6478:	bd08      	pop	{r3, pc}

000d647a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d647a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d647c:	461e      	mov	r6, r3
   d647e:	2b00      	cmp	r3, #0
   d6480:	bf0c      	ite	eq
   d6482:	2307      	moveq	r3, #7
   d6484:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6486:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6488:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d648a:	ab02      	add	r3, sp, #8
   d648c:	460a      	mov	r2, r1
   d648e:	216f      	movs	r1, #111	; 0x6f
   d6490:	f7ff ff98 	bl	d63c4 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6494:	4605      	mov	r5, r0
   d6496:	b9d8      	cbnz	r0, d64d0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d6498:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d649c:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d649e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d64a2:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d64a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d64a8:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d64aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d64ae:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d64b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d64b4:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d64b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d64ba:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d64bc:	b91e      	cbnz	r6, d64c6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d64be:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d64c2:	72a3      	strb	r3, [r4, #10]
   d64c4:	e004      	b.n	d64d0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d64c6:	f002 f953 	bl	d8770 <_ZN9TimeClass4yearEv>
   d64ca:	f7ff fee4 	bl	d6296 <_ZN12MCP79410Time8intToBcdEi>
   d64ce:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d64d0:	4628      	mov	r0, r5
   d64d2:	b004      	add	sp, #16
   d64d4:	bd70      	pop	{r4, r5, r6, pc}

000d64d6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d64d6:	b538      	push	{r3, r4, r5, lr}
   d64d8:	2300      	movs	r3, #0
   d64da:	460c      	mov	r4, r1
   d64dc:	460a      	mov	r2, r1
   d64de:	4619      	mov	r1, r3
   d64e0:	4605      	mov	r5, r0
   d64e2:	f7ff ffca 	bl	d647a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d64e6:	b928      	cbnz	r0, d64f4 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d64e8:	7aa3      	ldrb	r3, [r4, #10]
   d64ea:	b11b      	cbz	r3, d64f4 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d64ec:	4628      	mov	r0, r5
   d64ee:	f7ff ffbd 	bl	d646c <_ZNK8MCP7941020getOscillatorRunningEv>
   d64f2:	b900      	cbnz	r0, d64f6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d64f4:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d64f6:	bd38      	pop	{r3, r4, r5, pc}

000d64f8 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d64f8:	b510      	push	{r4, lr}
   d64fa:	b086      	sub	sp, #24
   d64fc:	4604      	mov	r4, r0
	MCP79410Time time;
   d64fe:	a801      	add	r0, sp, #4
   d6500:	f7ff fe50 	bl	d61a4 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6504:	a901      	add	r1, sp, #4
   d6506:	4620      	mov	r0, r4
   d6508:	f7ff ffe5 	bl	d64d6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d650c:	b110      	cbz	r0, d6514 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d650e:	a801      	add	r0, sp, #4
   d6510:	f7ff fe99 	bl	d6246 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6514:	b006      	add	sp, #24
   d6516:	bd10      	pop	{r4, pc}

000d6518 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6518:	b530      	push	{r4, r5, lr}
   d651a:	4604      	mov	r4, r0
   d651c:	b085      	sub	sp, #20
	wire.begin();
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	f001 fab6 	bl	d7a90 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d6524:	f002 f8d0 	bl	d86c8 <_ZN9TimeClass7isValidEv>
   d6528:	b9c0      	cbnz	r0, d655c <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d652a:	7ae3      	ldrb	r3, [r4, #11]
   d652c:	079b      	lsls	r3, r3, #30
   d652e:	d515      	bpl.n	d655c <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6530:	4620      	mov	r0, r4
   d6532:	f7ff ffe1 	bl	d64f8 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d6536:	4605      	mov	r5, r0
   d6538:	b180      	cbz	r0, d655c <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d653a:	f002 f805 	bl	d8548 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d653e:	4b09      	ldr	r3, [pc, #36]	; (d6564 <_ZN8MCP794105setupEv+0x4c>)
   d6540:	4909      	ldr	r1, [pc, #36]	; (d6568 <_ZN8MCP794105setupEv+0x50>)
   d6542:	681b      	ldr	r3, [r3, #0]
   d6544:	462a      	mov	r2, r5
   d6546:	4668      	mov	r0, sp
   d6548:	f002 f88c 	bl	d8664 <_ZN9TimeClass6formatElPKc>
   d654c:	4807      	ldr	r0, [pc, #28]	; (d656c <_ZN8MCP794105setupEv+0x54>)
   d654e:	9a00      	ldr	r2, [sp, #0]
   d6550:	4907      	ldr	r1, [pc, #28]	; (d6570 <_ZN8MCP794105setupEv+0x58>)
   d6552:	f7ff fc7b 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
   d6556:	4668      	mov	r0, sp
   d6558:	f001 fd9b 	bl	d8092 <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d655c:	2301      	movs	r3, #1
   d655e:	7223      	strb	r3, [r4, #8]
}
   d6560:	b005      	add	sp, #20
   d6562:	bd30      	pop	{r4, r5, pc}
   d6564:	2003df88 	.word	0x2003df88
   d6568:	2003e4b4 	.word	0x2003e4b4
   d656c:	2003e1b4 	.word	0x2003e1b4
   d6570:	000dd5a4 	.word	0x000dd5a4

000d6574 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6578:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d657c:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d657e:	6803      	ldr	r3, [r0, #0]
   d6580:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6582:	4604      	mov	r4, r0
   d6584:	460d      	mov	r5, r1
   d6586:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6588:	4798      	blx	r3
   d658a:	4580      	cmp	r8, r0
   d658c:	d80a      	bhi.n	d65a4 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d658e:	9600      	str	r6, [sp, #0]
   d6590:	463b      	mov	r3, r7
   d6592:	b2ea      	uxtb	r2, r5
   d6594:	2157      	movs	r1, #87	; 0x57
   d6596:	6860      	ldr	r0, [r4, #4]
   d6598:	f7ff ff14 	bl	d63c4 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d659c:	fab0 f080 	clz	r0, r0
   d65a0:	0940      	lsrs	r0, r0, #5
   d65a2:	e000      	b.n	d65a6 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d65a4:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d65a6:	b002      	add	sp, #8
   d65a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65ac <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d65b0:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65b4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d65b6:	6803      	ldr	r3, [r0, #0]
   d65b8:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d65ba:	4605      	mov	r5, r0
   d65bc:	460c      	mov	r4, r1
   d65be:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d65c0:	4798      	blx	r3
   d65c2:	4580      	cmp	r8, r0
   d65c4:	d80c      	bhi.n	d65e0 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d65c6:	f104 0220 	add.w	r2, r4, #32
   d65ca:	9600      	str	r6, [sp, #0]
   d65cc:	463b      	mov	r3, r7
   d65ce:	b2d2      	uxtb	r2, r2
   d65d0:	216f      	movs	r1, #111	; 0x6f
   d65d2:	6868      	ldr	r0, [r5, #4]
   d65d4:	f7ff fef6 	bl	d63c4 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d65d8:	fab0 f080 	clz	r0, r0
   d65dc:	0940      	lsrs	r0, r0, #5
   d65de:	e000      	b.n	d65e2 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d65e0:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d65e2:	b002      	add	sp, #8
   d65e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65e8 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d65e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65ec:	4607      	mov	r7, r0
   d65ee:	4689      	mov	r9, r1
   d65f0:	4692      	mov	sl, r2
   d65f2:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d65f4:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d65f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d65f8:	429c      	cmp	r4, r3
   d65fa:	d228      	bcs.n	d664e <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d65fc:	4649      	mov	r1, r9
   d65fe:	6878      	ldr	r0, [r7, #4]
   d6600:	f001 fa7a 	bl	d7af8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6604:	eb0a 0104 	add.w	r1, sl, r4
   d6608:	6878      	ldr	r0, [r7, #4]
   d660a:	f7ff fc1b 	bl	d5e44 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6610:	1b1e      	subs	r6, r3, r4
   d6612:	2e1f      	cmp	r6, #31
   d6614:	eb0b 0804 	add.w	r8, fp, r4
   d6618:	bf28      	it	cs
   d661a:	261f      	movcs	r6, #31
   d661c:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d661e:	6878      	ldr	r0, [r7, #4]
   d6620:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6624:	6802      	ldr	r2, [r0, #0]
   d6626:	6892      	ldr	r2, [r2, #8]
   d6628:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d662a:	ebc8 0205 	rsb	r2, r8, r5
   d662e:	42b2      	cmp	r2, r6
   d6630:	d3f5      	bcc.n	d661e <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d6632:	2101      	movs	r1, #1
   d6634:	6878      	ldr	r0, [r7, #4]
   d6636:	f001 fa66 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d663a:	4605      	mov	r5, r0
   d663c:	b128      	cbz	r0, d664a <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d663e:	4602      	mov	r2, r0
   d6640:	4905      	ldr	r1, [pc, #20]	; (d6658 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6642:	4806      	ldr	r0, [pc, #24]	; (d665c <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d6644:	f7ff fc02 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6648:	e002      	b.n	d6650 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d664a:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d664c:	e7d3      	b.n	d65f6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d664e:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d6650:	4628      	mov	r0, r5
   d6652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6656:	bf00      	nop
   d6658:	000dd5b9 	.word	0x000dd5b9
   d665c:	2003e1b4 	.word	0x2003e1b4

000d6660 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d6662:	7c13      	ldrb	r3, [r2, #16]
   d6664:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6668:	7bd3      	ldrb	r3, [r2, #15]
   d666a:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d666e:	7b93      	ldrb	r3, [r2, #14]
   d6670:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6674:	7b53      	ldrb	r3, [r2, #13]
   d6676:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d667a:	7b13      	ldrb	r3, [r2, #12]
   d667c:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6680:	7ad3      	ldrb	r3, [r2, #11]
   d6682:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6686:	7a93      	ldrb	r3, [r2, #10]
   d6688:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d668c:	2307      	movs	r3, #7
   d668e:	9300      	str	r3, [sp, #0]
   d6690:	460a      	mov	r2, r1
   d6692:	ab02      	add	r3, sp, #8
   d6694:	216f      	movs	r1, #111	; 0x6f
   d6696:	f7ff ffa7 	bl	d65e8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d669a:	b005      	add	sp, #20
   d669c:	f85d fb04 	ldr.w	pc, [sp], #4

000d66a0 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d66a0:	b510      	push	{r4, lr}
   d66a2:	b086      	sub	sp, #24
   d66a4:	4604      	mov	r4, r0
	MCP79410Time time;
   d66a6:	a801      	add	r0, sp, #4
   d66a8:	f7ff fd7c 	bl	d61a4 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d66ac:	a801      	add	r0, sp, #4
   d66ae:	f7ff fe40 	bl	d6332 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d66b2:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d66b6:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d66b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d66bc:	f88d 3014 	strb.w	r3, [sp, #20]
   d66c0:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d66c4:	b112      	cbz	r2, d66cc <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d66c6:	f043 0308 	orr.w	r3, r3, #8
   d66ca:	e001      	b.n	d66d0 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d66cc:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d66d0:	aa01      	add	r2, sp, #4
   d66d2:	2100      	movs	r1, #0
   d66d4:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d66d6:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d66da:	f7ff ffc1 	bl	d6660 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d66de:	fab0 f080 	clz	r0, r0
   d66e2:	0940      	lsrs	r0, r0, #5
   d66e4:	b006      	add	sp, #24
   d66e6:	bd10      	pop	{r4, pc}

000d66e8 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d66e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d66ea:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d66ec:	f001 ffec 	bl	d86c8 <_ZN9TimeClass7isValidEv>
   d66f0:	4604      	mov	r4, r0
   d66f2:	b1b8      	cbz	r0, d6724 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d66f4:	f002 f809 	bl	d870a <_ZN9TimeClass3nowEv>
   d66f8:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d66fa:	4601      	mov	r1, r0
   d66fc:	4630      	mov	r0, r6
   d66fe:	f7ff ffcf 	bl	d66a0 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6702:	4b0c      	ldr	r3, [pc, #48]	; (d6734 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d6704:	490c      	ldr	r1, [pc, #48]	; (d6738 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d6706:	681b      	ldr	r3, [r3, #0]
   d6708:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d670a:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d670c:	4668      	mov	r0, sp
   d670e:	f001 ffa9 	bl	d8664 <_ZN9TimeClass6formatElPKc>
   d6712:	9a00      	ldr	r2, [sp, #0]
   d6714:	4909      	ldr	r1, [pc, #36]	; (d673c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6716:	480a      	ldr	r0, [pc, #40]	; (d6740 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6718:	f7ff fb98 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
   d671c:	4668      	mov	r0, sp
   d671e:	f001 fcb8 	bl	d8092 <_ZN6StringD1Ev>
   d6722:	e003      	b.n	d672c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d6724:	4907      	ldr	r1, [pc, #28]	; (d6744 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6726:	4806      	ldr	r0, [pc, #24]	; (d6740 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6728:	f7ff fb90 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d672c:	4620      	mov	r0, r4
   d672e:	b004      	add	sp, #16
   d6730:	bd70      	pop	{r4, r5, r6, pc}
   d6732:	bf00      	nop
   d6734:	2003df88 	.word	0x2003df88
   d6738:	2003e4b4 	.word	0x2003e4b4
   d673c:	000dd5d4 	.word	0x000dd5d4
   d6740:	2003e1b4 	.word	0x2003e1b4
   d6744:	000dd5ea 	.word	0x000dd5ea

000d6748 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6748:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d674a:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d674c:	4604      	mov	r4, r0
	if (!timeSet) {
   d674e:	b98d      	cbnz	r5, d6774 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d6750:	f001 ffba 	bl	d86c8 <_ZN9TimeClass7isValidEv>
   d6754:	b170      	cbz	r0, d6774 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6756:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d6758:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d675a:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d675e:	f000 fbf9 	bl	d6f54 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d6762:	b138      	cbz	r0, d6774 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6764:	7ae3      	ldrb	r3, [r4, #11]
   d6766:	07db      	lsls	r3, r3, #31
   d6768:	d502      	bpl.n	d6770 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d676a:	4620      	mov	r0, r4
   d676c:	f7ff ffbc 	bl	d66e8 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d6770:	2301      	movs	r3, #1
   d6772:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d6774:	b003      	add	sp, #12
   d6776:	bd30      	pop	{r4, r5, pc}

000d6778 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d677a:	ab04      	add	r3, sp, #16
   d677c:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6780:	2201      	movs	r2, #1
   d6782:	9200      	str	r2, [sp, #0]
   d6784:	460a      	mov	r2, r1
   d6786:	216f      	movs	r1, #111	; 0x6f
   d6788:	f7ff ff2e 	bl	d65e8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d678c:	b005      	add	sp, #20
   d678e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6792 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6794:	4614      	mov	r4, r2
   d6796:	4605      	mov	r5, r0
   d6798:	460e      	mov	r6, r1
   d679a:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d679c:	f7ff fe56 	bl	d644c <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d67a0:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d67a2:	ea40 0207 	orr.w	r2, r0, r7
   d67a6:	4631      	mov	r1, r6
   d67a8:	4628      	mov	r0, r5
}
   d67aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d67ae:	f7ff bfe3 	b.w	d6778 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d67b2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d67b2:	b113      	cbz	r3, d67ba <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d67b4:	4613      	mov	r3, r2
   d67b6:	22ff      	movs	r2, #255	; 0xff
   d67b8:	e001      	b.n	d67be <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d67ba:	43d2      	mvns	r2, r2
   d67bc:	b2d2      	uxtb	r2, r2
   d67be:	f7ff bfe8 	b.w	d6792 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d67c2 <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d67c2:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d67c4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d67c6:	d80c      	bhi.n	d67e2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d67c8:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d67ca:	f04f 0300 	mov.w	r3, #0
   d67ce:	bf0c      	ite	eq
   d67d0:	2210      	moveq	r2, #16
   d67d2:	2220      	movne	r2, #32
   d67d4:	2107      	movs	r1, #7
   d67d6:	f7ff ffec 	bl	d67b2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d67da:	fab0 f080 	clz	r0, r0
   d67de:	0940      	lsrs	r0, r0, #5
   d67e0:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d67e2:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d67e4:	bd08      	pop	{r3, pc}

000d67e6 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d67e6:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d67e8:	f04f 0300 	mov.w	r3, #0
   d67ec:	f04f 0208 	mov.w	r2, #8
   d67f0:	bf14      	ite	ne
   d67f2:	2114      	movne	r1, #20
   d67f4:	210d      	moveq	r1, #13
   d67f6:	f7ff bfdc 	b.w	d67b2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d67fa <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d67fe:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6802:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6804:	6803      	ldr	r3, [r0, #0]
   d6806:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6808:	4605      	mov	r5, r0
   d680a:	460c      	mov	r4, r1
   d680c:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d680e:	4798      	blx	r3
   d6810:	4580      	cmp	r8, r0
   d6812:	d80c      	bhi.n	d682e <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6814:	f104 0220 	add.w	r2, r4, #32
   d6818:	9600      	str	r6, [sp, #0]
   d681a:	463b      	mov	r3, r7
   d681c:	b2d2      	uxtb	r2, r2
   d681e:	216f      	movs	r1, #111	; 0x6f
   d6820:	6868      	ldr	r0, [r5, #4]
   d6822:	f7ff fee1 	bl	d65e8 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d6826:	fab0 f080 	clz	r0, r0
   d682a:	0940      	lsrs	r0, r0, #5
   d682c:	e000      	b.n	d6830 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d682e:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6830:	b002      	add	sp, #8
   d6832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6836 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6836:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6838:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d683a:	b085      	sub	sp, #20
   d683c:	4606      	mov	r6, r0
   d683e:	460c      	mov	r4, r1
   d6840:	4617      	mov	r7, r2
   d6842:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d6844:	d901      	bls.n	d684a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6846:	2000      	movs	r0, #0
   d6848:	e043      	b.n	d68d2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d684a:	f7ff fe0f 	bl	d646c <_ZNK8MCP7941020getOscillatorRunningEv>
   d684e:	2800      	cmp	r0, #0
   d6850:	d0f9      	beq.n	d6846 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d6852:	4629      	mov	r1, r5
   d6854:	4630      	mov	r0, r6
   d6856:	f7ff ffc6 	bl	d67e6 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d685a:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d685c:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d685e:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d6862:	7be3      	ldrb	r3, [r4, #15]
   d6864:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6868:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d686c:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d686e:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6870:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d6874:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d6878:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d687a:	b117      	cbz	r7, d6882 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d687c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6880:	e001      	b.n	d6886 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d6882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d6886:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d688a:	7c63      	ldrb	r3, [r4, #17]
   d688c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d6890:	011b      	lsls	r3, r3, #4
   d6892:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d6896:	4313      	orrs	r3, r2
   d6898:	2d00      	cmp	r5, #0
   d689a:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d689e:	f04f 0306 	mov.w	r3, #6
   d68a2:	9300      	str	r3, [sp, #0]
   d68a4:	bf08      	it	eq
   d68a6:	220a      	moveq	r2, #10
   d68a8:	ab02      	add	r3, sp, #8
   d68aa:	bf18      	it	ne
   d68ac:	2211      	movne	r2, #17
   d68ae:	216f      	movs	r1, #111	; 0x6f
   d68b0:	4630      	mov	r0, r6
   d68b2:	f7ff fe99 	bl	d65e8 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d68b6:	4604      	mov	r4, r0
   d68b8:	b940      	cbnz	r0, d68cc <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d68ba:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d68bc:	bf0c      	ite	eq
   d68be:	2310      	moveq	r3, #16
   d68c0:	2320      	movne	r3, #32
   d68c2:	22ff      	movs	r2, #255	; 0xff
   d68c4:	2107      	movs	r1, #7
   d68c6:	4630      	mov	r0, r6
   d68c8:	f7ff ff63 	bl	d6792 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d68cc:	fab4 f084 	clz	r0, r4
   d68d0:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d68d2:	b005      	add	sp, #20
   d68d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68d6 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d68d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d68d8:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d68da:	b087      	sub	sp, #28
   d68dc:	4606      	mov	r6, r0
   d68de:	460c      	mov	r4, r1
   d68e0:	4617      	mov	r7, r2
   d68e2:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d68e4:	d901      	bls.n	d68ea <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d68e6:	2000      	movs	r0, #0
   d68e8:	e010      	b.n	d690c <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d68ea:	f7ff fe05 	bl	d64f8 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d68ee:	2800      	cmp	r0, #0
   d68f0:	d0f9      	beq.n	d68e6 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d68f2:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d68f4:	a801      	add	r0, sp, #4
   d68f6:	f7ff fc55 	bl	d61a4 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d68fa:	a801      	add	r0, sp, #4
   d68fc:	f7ff fd43 	bl	d6386 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d6900:	462b      	mov	r3, r5
   d6902:	463a      	mov	r2, r7
   d6904:	a901      	add	r1, sp, #4
   d6906:	4630      	mov	r0, r6
   d6908:	f7ff ff95 	bl	d6836 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d690c:	b007      	add	sp, #28
   d690e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6910 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6910:	b538      	push	{r3, r4, r5, lr}
   d6912:	4605      	mov	r5, r0
   d6914:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6916:	2157      	movs	r1, #87	; 0x57
   d6918:	6868      	ldr	r0, [r5, #4]
   d691a:	f001 f8ed 	bl	d7af8 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d691e:	2101      	movs	r1, #1
   d6920:	6868      	ldr	r0, [r5, #4]
   d6922:	f001 f8f0 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6926:	b108      	cbz	r0, d692c <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d6928:	3c01      	subs	r4, #1
   d692a:	d1f4      	bne.n	d6916 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d692c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6930 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6934:	4605      	mov	r5, r0
   d6936:	18d7      	adds	r7, r2, r3
   d6938:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d693a:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d693e:	42bc      	cmp	r4, r7
   d6940:	d01e      	beq.n	d6980 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6942:	2157      	movs	r1, #87	; 0x57
   d6944:	6868      	ldr	r0, [r5, #4]
   d6946:	f001 f8d7 	bl	d7af8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d694a:	eb08 0104 	add.w	r1, r8, r4
   d694e:	6868      	ldr	r0, [r5, #4]
   d6950:	f7ff fa78 	bl	d5e44 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6954:	6868      	ldr	r0, [r5, #4]
   d6956:	f814 1b01 	ldrb.w	r1, [r4], #1
   d695a:	6803      	ldr	r3, [r0, #0]
   d695c:	689b      	ldr	r3, [r3, #8]
   d695e:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d6960:	2101      	movs	r1, #1
   d6962:	6868      	ldr	r0, [r5, #4]
   d6964:	f001 f8cf 	bl	d7b06 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6968:	4606      	mov	r6, r0
   d696a:	b128      	cbz	r0, d6978 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d696c:	4602      	mov	r2, r0
   d696e:	4906      	ldr	r1, [pc, #24]	; (d6988 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6970:	4806      	ldr	r0, [pc, #24]	; (d698c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6972:	f7ff fa6b 	bl	d5e4c <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6976:	e004      	b.n	d6982 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d6978:	4628      	mov	r0, r5
   d697a:	f7ff ffc9 	bl	d6910 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d697e:	e7de      	b.n	d693e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6980:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d6982:	4630      	mov	r0, r6
   d6984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6988:	000dd5ff 	.word	0x000dd5ff
   d698c:	2003e1b4 	.word	0x2003e1b4

000d6990 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6994:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6998:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d699a:	6803      	ldr	r3, [r0, #0]
   d699c:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d699e:	4604      	mov	r4, r0
   d69a0:	460d      	mov	r5, r1
   d69a2:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d69a4:	4798      	blx	r3
   d69a6:	4580      	cmp	r8, r0
   d69a8:	d80a      	bhi.n	d69c0 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d69aa:	4633      	mov	r3, r6
   d69ac:	463a      	mov	r2, r7
   d69ae:	b2e9      	uxtb	r1, r5
   d69b0:	6860      	ldr	r0, [r4, #4]
   d69b2:	f7ff ffbd 	bl	d6930 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d69b6:	fab0 f080 	clz	r0, r0
   d69ba:	0940      	lsrs	r0, r0, #5
   d69bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d69c0:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d69c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d69c8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d69c8:	b508      	push	{r3, lr}
   d69ca:	f000 f891 	bl	d6af0 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d69d0:	4a02      	ldr	r2, [pc, #8]	; (d69dc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d69d2:	601a      	str	r2, [r3, #0]
   d69d4:	bd08      	pop	{r3, pc}
   d69d6:	bf00      	nop
   d69d8:	2003e1b4 	.word	0x2003e1b4
   d69dc:	000dd620 	.word	0x000dd620

000d69e0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <cellular_signal+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	00030274 	.word	0x00030274

000d69f0 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <cellular_command+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030274 	.word	0x00030274

000d6a00 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <os_thread_is_current+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030248 	.word	0x00030248

000d6a10 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <os_thread_join+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	691b      	ldr	r3, [r3, #16]
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030248 	.word	0x00030248

000d6a20 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <os_thread_cleanup+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	695b      	ldr	r3, [r3, #20]
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030248 	.word	0x00030248

000d6a30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <os_mutex_recursive_create+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030248 	.word	0x00030248

000d6a40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <os_mutex_recursive_destroy+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030248 	.word	0x00030248

000d6a50 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <HAL_Feature_Set+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030234 	.word	0x00030234

000d6a60 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <HAL_Core_System_Reset_Ex+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030234 	.word	0x00030234

000d6a70 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030234 	.word	0x00030234

000d6a80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <HAL_RNG_GetRandomNumber+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	685b      	ldr	r3, [r3, #4]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030218 	.word	0x00030218

000d6a90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <HAL_Delay_Microseconds+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	68db      	ldr	r3, [r3, #12]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030218 	.word	0x00030218

000d6aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	695b      	ldr	r3, [r3, #20]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030218 	.word	0x00030218

000d6ab0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <HAL_RTC_Get_UnixTime+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	69db      	ldr	r3, [r3, #28]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030218 	.word	0x00030218

000d6ac0 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <HAL_RTC_Set_UnixTime+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6a1b      	ldr	r3, [r3, #32]
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030218 	.word	0x00030218

000d6ad0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <HAL_RTC_Time_Is_Valid+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030218 	.word	0x00030218

000d6ae0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <hal_timer_millis+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030218 	.word	0x00030218

000d6af0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <HAL_Pin_Map+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	681b      	ldr	r3, [r3, #0]
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	0003022c 	.word	0x0003022c

000d6b00 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <HAL_Validate_Pin_Function+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	685b      	ldr	r3, [r3, #4]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	0003022c 	.word	0x0003022c

000d6b10 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <HAL_Pin_Mode+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	689b      	ldr	r3, [r3, #8]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	0003022c 	.word	0x0003022c

000d6b20 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <HAL_Get_Pin_Mode+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	68db      	ldr	r3, [r3, #12]
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	0003022c 	.word	0x0003022c

000d6b30 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <HAL_GPIO_Write+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	691b      	ldr	r3, [r3, #16]
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	0003022c 	.word	0x0003022c

000d6b40 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <HAL_GPIO_Read+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	695b      	ldr	r3, [r3, #20]
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	0003022c 	.word	0x0003022c

000d6b50 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <HAL_Interrupts_Attach+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	699b      	ldr	r3, [r3, #24]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	0003022c 	.word	0x0003022c

000d6b60 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <HAL_Interrupts_Detach+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	69db      	ldr	r3, [r3, #28]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	0003022c 	.word	0x0003022c

000d6b70 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <HAL_ADC_Read+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	0003022c 	.word	0x0003022c

000d6b80 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_I2C_Begin+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	68db      	ldr	r3, [r3, #12]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030228 	.word	0x00030228

000d6b90 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <HAL_I2C_Begin_Transmission+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	699b      	ldr	r3, [r3, #24]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030228 	.word	0x00030228

000d6ba0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <HAL_I2C_End_Transmission+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	69db      	ldr	r3, [r3, #28]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030228 	.word	0x00030228

000d6bb0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <HAL_I2C_Write_Data+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6a1b      	ldr	r3, [r3, #32]
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030228 	.word	0x00030228

000d6bc0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <HAL_I2C_Available_Data+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030228 	.word	0x00030228

000d6bd0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <HAL_I2C_Read_Data+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030228 	.word	0x00030228

000d6be0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <HAL_I2C_Peek_Data+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030228 	.word	0x00030228

000d6bf0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_I2C_Flush_Data+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030228 	.word	0x00030228

000d6c00 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_I2C_Is_Enabled+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_I2C_Init+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030228 	.word	0x00030228

000d6c20 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_I2C_Acquire+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030228 	.word	0x00030228

000d6c30 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <HAL_I2C_Release+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030228 	.word	0x00030228

000d6c40 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <HAL_I2C_Request_Data_Ex+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030228 	.word	0x00030228

000d6c50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <inet_inet_ntop+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	695b      	ldr	r3, [r3, #20]
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030264 	.word	0x00030264

000d6c60 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <netdb_freeaddrinfo+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	689b      	ldr	r3, [r3, #8]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030268 	.word	0x00030268

000d6c70 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <netdb_getaddrinfo+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	68db      	ldr	r3, [r3, #12]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030268 	.word	0x00030268

000d6c80 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <HAL_SPI_Init+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	69db      	ldr	r3, [r3, #28]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030230 	.word	0x00030230

000d6c90 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <HAL_SPI_Is_Enabled+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6a1b      	ldr	r3, [r3, #32]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030230 	.word	0x00030230

000d6ca0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <HAL_USART_Init+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	681b      	ldr	r3, [r3, #0]
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	0003023c 	.word	0x0003023c

000d6cb0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <HAL_USART_Write_Data+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	68db      	ldr	r3, [r3, #12]
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	0003023c 	.word	0x0003023c

000d6cc0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <HAL_USART_Available_Data+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	691b      	ldr	r3, [r3, #16]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	0003023c 	.word	0x0003023c

000d6cd0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <HAL_USART_Read_Data+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	695b      	ldr	r3, [r3, #20]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	0003023c 	.word	0x0003023c

000d6ce0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <HAL_USART_Peek_Data+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	699b      	ldr	r3, [r3, #24]
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	0003023c 	.word	0x0003023c

000d6cf0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <HAL_USART_Flush_Data+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	69db      	ldr	r3, [r3, #28]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	0003023c 	.word	0x0003023c

000d6d00 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <HAL_USART_Is_Enabled+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6a1b      	ldr	r3, [r3, #32]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	0003023c 	.word	0x0003023c

000d6d10 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USART_Available_Data_For_Write+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003023c 	.word	0x0003023c

000d6d20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <HAL_USB_USART_Init+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	681b      	ldr	r3, [r3, #0]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	0003024c 	.word	0x0003024c

000d6d30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <HAL_USB_USART_Available_Data+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	691b      	ldr	r3, [r3, #16]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	0003024c 	.word	0x0003024c

000d6d40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	695b      	ldr	r3, [r3, #20]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	0003024c 	.word	0x0003024c

000d6d50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <HAL_USB_USART_Receive_Data+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	699b      	ldr	r3, [r3, #24]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	0003024c 	.word	0x0003024c

000d6d60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <HAL_USB_USART_Send_Data+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	69db      	ldr	r3, [r3, #28]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	0003024c 	.word	0x0003024c

000d6d70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <HAL_USB_USART_Flush_Data+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	6a1b      	ldr	r3, [r3, #32]
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	0003024c 	.word	0x0003024c

000d6d80 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <panic_+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	00030260 	.word	0x00030260

000d6d90 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <log_message+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	00030260 	.word	0x00030260

000d6da0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <log_message_v+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	00030260 	.word	0x00030260

000d6db0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b03      	ldr	r3, [pc, #12]	; (d6dc0 <diag_get_source+0x10>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6dba:	9301      	str	r3, [sp, #4]
   d6dbc:	bd08      	pop	{r3, pc}
   d6dbe:	0000      	.short	0x0000
   d6dc0:	00030260 	.word	0x00030260

000d6dc4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6dc4:	b508      	push	{r3, lr}
   d6dc6:	4b02      	ldr	r3, [pc, #8]	; (d6dd0 <system_mode+0xc>)
   d6dc8:	681b      	ldr	r3, [r3, #0]
   d6dca:	681b      	ldr	r3, [r3, #0]
   d6dcc:	9301      	str	r3, [sp, #4]
   d6dce:	bd08      	pop	{r3, pc}
   d6dd0:	00030220 	.word	0x00030220

000d6dd4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6dd4:	b508      	push	{r3, lr}
   d6dd6:	4b02      	ldr	r3, [pc, #8]	; (d6de0 <set_system_mode+0xc>)
   d6dd8:	681b      	ldr	r3, [r3, #0]
   d6dda:	685b      	ldr	r3, [r3, #4]
   d6ddc:	9301      	str	r3, [sp, #4]
   d6dde:	bd08      	pop	{r3, pc}
   d6de0:	00030220 	.word	0x00030220

000d6de4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6de4:	b508      	push	{r3, lr}
   d6de6:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <system_delay_ms+0xc>)
   d6de8:	681b      	ldr	r3, [r3, #0]
   d6dea:	695b      	ldr	r3, [r3, #20]
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	bd08      	pop	{r3, pc}
   d6df0:	00030220 	.word	0x00030220

000d6df4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6df4:	b508      	push	{r3, lr}
   d6df6:	4b02      	ldr	r3, [pc, #8]	; (d6e00 <system_sleep+0xc>)
   d6df8:	681b      	ldr	r3, [r3, #0]
   d6dfa:	699b      	ldr	r3, [r3, #24]
   d6dfc:	9301      	str	r3, [sp, #4]
   d6dfe:	bd08      	pop	{r3, pc}
   d6e00:	00030220 	.word	0x00030220

000d6e04 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6e04:	b508      	push	{r3, lr}
   d6e06:	4b02      	ldr	r3, [pc, #8]	; (d6e10 <system_thread_set_state+0xc>)
   d6e08:	681b      	ldr	r3, [r3, #0]
   d6e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e0c:	9301      	str	r3, [sp, #4]
   d6e0e:	bd08      	pop	{r3, pc}
   d6e10:	00030220 	.word	0x00030220

000d6e14 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6e14:	b508      	push	{r3, lr}
   d6e16:	4b02      	ldr	r3, [pc, #8]	; (d6e20 <application_thread_current+0xc>)
   d6e18:	681b      	ldr	r3, [r3, #0]
   d6e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e1c:	9301      	str	r3, [sp, #4]
   d6e1e:	bd08      	pop	{r3, pc}
   d6e20:	00030220 	.word	0x00030220

000d6e24 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6e24:	b508      	push	{r3, lr}
   d6e26:	4b02      	ldr	r3, [pc, #8]	; (d6e30 <application_thread_invoke+0xc>)
   d6e28:	681b      	ldr	r3, [r3, #0]
   d6e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e2c:	9301      	str	r3, [sp, #4]
   d6e2e:	bd08      	pop	{r3, pc}
   d6e30:	00030220 	.word	0x00030220

000d6e34 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6e34:	b508      	push	{r3, lr}
   d6e36:	4b02      	ldr	r3, [pc, #8]	; (d6e40 <system_thread_get_state+0xc>)
   d6e38:	681b      	ldr	r3, [r3, #0]
   d6e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6e3c:	9301      	str	r3, [sp, #4]
   d6e3e:	bd08      	pop	{r3, pc}
   d6e40:	00030220 	.word	0x00030220

000d6e44 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6e44:	b508      	push	{r3, lr}
   d6e46:	4b02      	ldr	r3, [pc, #8]	; (d6e50 <system_notify_time_changed+0xc>)
   d6e48:	681b      	ldr	r3, [r3, #0]
   d6e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6e4c:	9301      	str	r3, [sp, #4]
   d6e4e:	bd08      	pop	{r3, pc}
   d6e50:	00030220 	.word	0x00030220

000d6e54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e54:	b508      	push	{r3, lr}
   d6e56:	4b03      	ldr	r3, [pc, #12]	; (d6e64 <system_ctrl_set_app_request_handler+0x10>)
   d6e58:	681b      	ldr	r3, [r3, #0]
   d6e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e5e:	9301      	str	r3, [sp, #4]
   d6e60:	bd08      	pop	{r3, pc}
   d6e62:	0000      	.short	0x0000
   d6e64:	00030220 	.word	0x00030220

000d6e68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b03      	ldr	r3, [pc, #12]	; (d6e78 <system_ctrl_set_result+0x10>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e72:	9301      	str	r3, [sp, #4]
   d6e74:	bd08      	pop	{r3, pc}
   d6e76:	0000      	.short	0x0000
   d6e78:	00030220 	.word	0x00030220

000d6e7c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b03      	ldr	r3, [pc, #12]	; (d6e8c <system_power_management_set_config+0x10>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6e86:	9301      	str	r3, [sp, #4]
   d6e88:	bd08      	pop	{r3, pc}
   d6e8a:	0000      	.short	0x0000
   d6e8c:	00030220 	.word	0x00030220

000d6e90 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b03      	ldr	r3, [pc, #12]	; (d6ea0 <system_sleep_ext+0x10>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6e9a:	9301      	str	r3, [sp, #4]
   d6e9c:	bd08      	pop	{r3, pc}
   d6e9e:	0000      	.short	0x0000
   d6ea0:	00030220 	.word	0x00030220

000d6ea4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6ea4:	b508      	push	{r3, lr}
   d6ea6:	4b02      	ldr	r3, [pc, #8]	; (d6eb0 <spark_variable+0xc>)
   d6ea8:	681b      	ldr	r3, [r3, #0]
   d6eaa:	681b      	ldr	r3, [r3, #0]
   d6eac:	9301      	str	r3, [sp, #4]
   d6eae:	bd08      	pop	{r3, pc}
   d6eb0:	00030244 	.word	0x00030244

000d6eb4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6eb4:	b508      	push	{r3, lr}
   d6eb6:	4b02      	ldr	r3, [pc, #8]	; (d6ec0 <spark_function+0xc>)
   d6eb8:	681b      	ldr	r3, [r3, #0]
   d6eba:	685b      	ldr	r3, [r3, #4]
   d6ebc:	9301      	str	r3, [sp, #4]
   d6ebe:	bd08      	pop	{r3, pc}
   d6ec0:	00030244 	.word	0x00030244

000d6ec4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6ec4:	b508      	push	{r3, lr}
   d6ec6:	4b02      	ldr	r3, [pc, #8]	; (d6ed0 <spark_process+0xc>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	689b      	ldr	r3, [r3, #8]
   d6ecc:	9301      	str	r3, [sp, #4]
   d6ece:	bd08      	pop	{r3, pc}
   d6ed0:	00030244 	.word	0x00030244

000d6ed4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6ed4:	b508      	push	{r3, lr}
   d6ed6:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <spark_cloud_flag_connect+0xc>)
   d6ed8:	681b      	ldr	r3, [r3, #0]
   d6eda:	68db      	ldr	r3, [r3, #12]
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	bd08      	pop	{r3, pc}
   d6ee0:	00030244 	.word	0x00030244

000d6ee4 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6ee4:	b508      	push	{r3, lr}
   d6ee6:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <spark_cloud_flag_disconnect+0xc>)
   d6ee8:	681b      	ldr	r3, [r3, #0]
   d6eea:	691b      	ldr	r3, [r3, #16]
   d6eec:	9301      	str	r3, [sp, #4]
   d6eee:	bd08      	pop	{r3, pc}
   d6ef0:	00030244 	.word	0x00030244

000d6ef4 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b02      	ldr	r3, [pc, #8]	; (d6f00 <spark_cloud_flag_connected+0xc>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	695b      	ldr	r3, [r3, #20]
   d6efc:	9301      	str	r3, [sp, #4]
   d6efe:	bd08      	pop	{r3, pc}
   d6f00:	00030244 	.word	0x00030244

000d6f04 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6f04:	b508      	push	{r3, lr}
   d6f06:	4b02      	ldr	r3, [pc, #8]	; (d6f10 <spark_deviceID+0xc>)
   d6f08:	681b      	ldr	r3, [r3, #0]
   d6f0a:	69db      	ldr	r3, [r3, #28]
   d6f0c:	9301      	str	r3, [sp, #4]
   d6f0e:	bd08      	pop	{r3, pc}
   d6f10:	00030244 	.word	0x00030244

000d6f14 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6f14:	b508      	push	{r3, lr}
   d6f16:	4b02      	ldr	r3, [pc, #8]	; (d6f20 <spark_send_event+0xc>)
   d6f18:	681b      	ldr	r3, [r3, #0]
   d6f1a:	6a1b      	ldr	r3, [r3, #32]
   d6f1c:	9301      	str	r3, [sp, #4]
   d6f1e:	bd08      	pop	{r3, pc}
   d6f20:	00030244 	.word	0x00030244

000d6f24 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6f24:	b508      	push	{r3, lr}
   d6f26:	4b02      	ldr	r3, [pc, #8]	; (d6f30 <spark_subscribe+0xc>)
   d6f28:	681b      	ldr	r3, [r3, #0]
   d6f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f2c:	9301      	str	r3, [sp, #4]
   d6f2e:	bd08      	pop	{r3, pc}
   d6f30:	00030244 	.word	0x00030244

000d6f34 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6f34:	b508      	push	{r3, lr}
   d6f36:	4b02      	ldr	r3, [pc, #8]	; (d6f40 <spark_sync_time+0xc>)
   d6f38:	681b      	ldr	r3, [r3, #0]
   d6f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f3c:	9301      	str	r3, [sp, #4]
   d6f3e:	bd08      	pop	{r3, pc}
   d6f40:	00030244 	.word	0x00030244

000d6f44 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f44:	b508      	push	{r3, lr}
   d6f46:	4b02      	ldr	r3, [pc, #8]	; (d6f50 <spark_sync_time_pending+0xc>)
   d6f48:	681b      	ldr	r3, [r3, #0]
   d6f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f4c:	9301      	str	r3, [sp, #4]
   d6f4e:	bd08      	pop	{r3, pc}
   d6f50:	00030244 	.word	0x00030244

000d6f54 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d6f54:	b508      	push	{r3, lr}
   d6f56:	4b02      	ldr	r3, [pc, #8]	; (d6f60 <spark_sync_time_last+0xc>)
   d6f58:	681b      	ldr	r3, [r3, #0]
   d6f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f5c:	9301      	str	r3, [sp, #4]
   d6f5e:	bd08      	pop	{r3, pc}
   d6f60:	00030244 	.word	0x00030244

000d6f64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6f64:	b508      	push	{r3, lr}
   d6f66:	4b02      	ldr	r3, [pc, #8]	; (d6f70 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6f68:	681b      	ldr	r3, [r3, #0]
   d6f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f6c:	9301      	str	r3, [sp, #4]
   d6f6e:	bd08      	pop	{r3, pc}
   d6f70:	00030244 	.word	0x00030244

000d6f74 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f74:	b508      	push	{r3, lr}
   d6f76:	4b02      	ldr	r3, [pc, #8]	; (d6f80 <network_connect+0xc>)
   d6f78:	681b      	ldr	r3, [r3, #0]
   d6f7a:	685b      	ldr	r3, [r3, #4]
   d6f7c:	9301      	str	r3, [sp, #4]
   d6f7e:	bd08      	pop	{r3, pc}
   d6f80:	00030240 	.word	0x00030240

000d6f84 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6f84:	b508      	push	{r3, lr}
   d6f86:	4b02      	ldr	r3, [pc, #8]	; (d6f90 <network_connecting+0xc>)
   d6f88:	681b      	ldr	r3, [r3, #0]
   d6f8a:	689b      	ldr	r3, [r3, #8]
   d6f8c:	9301      	str	r3, [sp, #4]
   d6f8e:	bd08      	pop	{r3, pc}
   d6f90:	00030240 	.word	0x00030240

000d6f94 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6f94:	b508      	push	{r3, lr}
   d6f96:	4b02      	ldr	r3, [pc, #8]	; (d6fa0 <network_disconnect+0xc>)
   d6f98:	681b      	ldr	r3, [r3, #0]
   d6f9a:	68db      	ldr	r3, [r3, #12]
   d6f9c:	9301      	str	r3, [sp, #4]
   d6f9e:	bd08      	pop	{r3, pc}
   d6fa0:	00030240 	.word	0x00030240

000d6fa4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6fa4:	b508      	push	{r3, lr}
   d6fa6:	4b02      	ldr	r3, [pc, #8]	; (d6fb0 <network_ready+0xc>)
   d6fa8:	681b      	ldr	r3, [r3, #0]
   d6faa:	691b      	ldr	r3, [r3, #16]
   d6fac:	9301      	str	r3, [sp, #4]
   d6fae:	bd08      	pop	{r3, pc}
   d6fb0:	00030240 	.word	0x00030240

000d6fb4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fb4:	b508      	push	{r3, lr}
   d6fb6:	4b02      	ldr	r3, [pc, #8]	; (d6fc0 <network_on+0xc>)
   d6fb8:	681b      	ldr	r3, [r3, #0]
   d6fba:	695b      	ldr	r3, [r3, #20]
   d6fbc:	9301      	str	r3, [sp, #4]
   d6fbe:	bd08      	pop	{r3, pc}
   d6fc0:	00030240 	.word	0x00030240

000d6fc4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fc4:	b508      	push	{r3, lr}
   d6fc6:	4b02      	ldr	r3, [pc, #8]	; (d6fd0 <network_off+0xc>)
   d6fc8:	681b      	ldr	r3, [r3, #0]
   d6fca:	699b      	ldr	r3, [r3, #24]
   d6fcc:	9301      	str	r3, [sp, #4]
   d6fce:	bd08      	pop	{r3, pc}
   d6fd0:	00030240 	.word	0x00030240

000d6fd4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6fd4:	b508      	push	{r3, lr}
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <network_listen+0xc>)
   d6fd8:	681b      	ldr	r3, [r3, #0]
   d6fda:	69db      	ldr	r3, [r3, #28]
   d6fdc:	9301      	str	r3, [sp, #4]
   d6fde:	bd08      	pop	{r3, pc}
   d6fe0:	00030240 	.word	0x00030240

000d6fe4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6fe4:	b508      	push	{r3, lr}
   d6fe6:	4b02      	ldr	r3, [pc, #8]	; (d6ff0 <network_listening+0xc>)
   d6fe8:	681b      	ldr	r3, [r3, #0]
   d6fea:	6a1b      	ldr	r3, [r3, #32]
   d6fec:	9301      	str	r3, [sp, #4]
   d6fee:	bd08      	pop	{r3, pc}
   d6ff0:	00030240 	.word	0x00030240

000d6ff4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6ff4:	b508      	push	{r3, lr}
   d6ff6:	4b02      	ldr	r3, [pc, #8]	; (d7000 <network_set_listen_timeout+0xc>)
   d6ff8:	681b      	ldr	r3, [r3, #0]
   d6ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ffc:	9301      	str	r3, [sp, #4]
   d6ffe:	bd08      	pop	{r3, pc}
   d7000:	00030240 	.word	0x00030240

000d7004 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7004:	b508      	push	{r3, lr}
   d7006:	4b02      	ldr	r3, [pc, #8]	; (d7010 <network_get_listen_timeout+0xc>)
   d7008:	681b      	ldr	r3, [r3, #0]
   d700a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d700c:	9301      	str	r3, [sp, #4]
   d700e:	bd08      	pop	{r3, pc}
   d7010:	00030240 	.word	0x00030240

000d7014 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7014:	b508      	push	{r3, lr}
   d7016:	4b02      	ldr	r3, [pc, #8]	; (d7020 <malloc+0xc>)
   d7018:	681b      	ldr	r3, [r3, #0]
   d701a:	681b      	ldr	r3, [r3, #0]
   d701c:	9301      	str	r3, [sp, #4]
   d701e:	bd08      	pop	{r3, pc}
   d7020:	0003021c 	.word	0x0003021c

000d7024 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7024:	b508      	push	{r3, lr}
   d7026:	4b02      	ldr	r3, [pc, #8]	; (d7030 <free+0xc>)
   d7028:	681b      	ldr	r3, [r3, #0]
   d702a:	685b      	ldr	r3, [r3, #4]
   d702c:	9301      	str	r3, [sp, #4]
   d702e:	bd08      	pop	{r3, pc}
   d7030:	0003021c 	.word	0x0003021c

000d7034 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7034:	b508      	push	{r3, lr}
   d7036:	4b02      	ldr	r3, [pc, #8]	; (d7040 <realloc+0xc>)
   d7038:	681b      	ldr	r3, [r3, #0]
   d703a:	689b      	ldr	r3, [r3, #8]
   d703c:	9301      	str	r3, [sp, #4]
   d703e:	bd08      	pop	{r3, pc}
   d7040:	0003021c 	.word	0x0003021c

000d7044 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <siprintf+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	691b      	ldr	r3, [r3, #16]
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	0003021c 	.word	0x0003021c

000d7054 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <siscanf+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	699b      	ldr	r3, [r3, #24]
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	0003021c 	.word	0x0003021c

000d7064 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <snprintf+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	69db      	ldr	r3, [r3, #28]
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	0003021c 	.word	0x0003021c

000d7074 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <sniprintf+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	6a1b      	ldr	r3, [r3, #32]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	0003021c 	.word	0x0003021c

000d7084 <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <abort+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	0003021c 	.word	0x0003021c

000d7094 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <_malloc_r+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	0003021c 	.word	0x0003021c

000d70a4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d70a4:	2100      	movs	r1, #0
   d70a6:	f7ff be9d 	b.w	d6de4 <system_delay_ms>

000d70aa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d70aa:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d70ac:	6883      	ldr	r3, [r0, #8]
   d70ae:	4604      	mov	r4, r0
   d70b0:	b90b      	cbnz	r3, d70b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d70b2:	f001 fe0e 	bl	d8cd2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d70b6:	68c3      	ldr	r3, [r0, #12]
   d70b8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d70ba:	68a3      	ldr	r3, [r4, #8]
   d70bc:	b11b      	cbz	r3, d70c6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d70be:	2203      	movs	r2, #3
   d70c0:	4621      	mov	r1, r4
   d70c2:	4620      	mov	r0, r4
   d70c4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d70c6:	4620      	mov	r0, r4
   d70c8:	2110      	movs	r1, #16
}
   d70ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d70ce:	f001 bde4 	b.w	d8c9a <_ZdlPvj>

000d70d2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d70d2:	b510      	push	{r4, lr}
   d70d4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d70d6:	6800      	ldr	r0, [r0, #0]
   d70d8:	b108      	cbz	r0, d70de <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d70da:	f7ff fcb1 	bl	d6a40 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d70de:	4620      	mov	r0, r4
   d70e0:	bd10      	pop	{r4, pc}

000d70e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d70e2:	680b      	ldr	r3, [r1, #0]
   d70e4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d70e6:	b113      	cbz	r3, d70ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d70e8:	685a      	ldr	r2, [r3, #4]
   d70ea:	3201      	adds	r2, #1
   d70ec:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d70ee:	4770      	bx	lr

000d70f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70f0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70f2:	4c06      	ldr	r4, [pc, #24]	; (d710c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d70f4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d70f6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70f8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d70fa:	f7ff fc99 	bl	d6a30 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d70fe:	4620      	mov	r0, r4
   d7100:	4a03      	ldr	r2, [pc, #12]	; (d7110 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7102:	4904      	ldr	r1, [pc, #16]	; (d7114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7108:	f001 bdc2 	b.w	d8c90 <__aeabi_atexit>
   d710c:	2003e1b8 	.word	0x2003e1b8
   d7110:	2003e078 	.word	0x2003e078
   d7114:	000d70d3 	.word	0x000d70d3

000d7118 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7118:	2200      	movs	r2, #0
   d711a:	4611      	mov	r1, r2
   d711c:	6840      	ldr	r0, [r0, #4]
   d711e:	f7ff bf41 	b.w	d6fa4 <network_ready>

000d7122 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7122:	2200      	movs	r2, #0
   d7124:	4611      	mov	r1, r2
   d7126:	6840      	ldr	r0, [r0, #4]
   d7128:	f7ff bf5c 	b.w	d6fe4 <network_listening>

000d712c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d712c:	2200      	movs	r2, #0
   d712e:	4611      	mov	r1, r2
   d7130:	6840      	ldr	r0, [r0, #4]
   d7132:	f7ff bf67 	b.w	d7004 <network_get_listen_timeout>

000d7136 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7136:	2200      	movs	r2, #0
   d7138:	6840      	ldr	r0, [r0, #4]
   d713a:	f7ff bf5b 	b.w	d6ff4 <network_set_listen_timeout>

000d713e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d713e:	2200      	movs	r2, #0
   d7140:	f081 0101 	eor.w	r1, r1, #1
   d7144:	6840      	ldr	r0, [r0, #4]
   d7146:	f7ff bf45 	b.w	d6fd4 <network_listen>

000d714a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d714a:	2300      	movs	r3, #0
   d714c:	461a      	mov	r2, r3
   d714e:	4619      	mov	r1, r3
   d7150:	6840      	ldr	r0, [r0, #4]
   d7152:	f7ff bf37 	b.w	d6fc4 <network_off>

000d7156 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d7156:	2300      	movs	r3, #0
   d7158:	461a      	mov	r2, r3
   d715a:	4619      	mov	r1, r3
   d715c:	6840      	ldr	r0, [r0, #4]
   d715e:	f7ff bf29 	b.w	d6fb4 <network_on>

000d7162 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7162:	2200      	movs	r2, #0
   d7164:	4611      	mov	r1, r2
   d7166:	6840      	ldr	r0, [r0, #4]
   d7168:	f7ff bf0c 	b.w	d6f84 <network_connecting>

000d716c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d716c:	2200      	movs	r2, #0
   d716e:	2102      	movs	r1, #2
   d7170:	6840      	ldr	r0, [r0, #4]
   d7172:	f7ff bf0f 	b.w	d6f94 <network_disconnect>

000d7176 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7176:	2300      	movs	r3, #0
   d7178:	461a      	mov	r2, r3
   d717a:	6840      	ldr	r0, [r0, #4]
   d717c:	f7ff befa 	b.w	d6f74 <network_connect>

000d7180 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7180:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d7182:	4b1b      	ldr	r3, [pc, #108]	; (d71f0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7184:	6003      	str	r3, [r0, #0]
   d7186:	2500      	movs	r5, #0
   d7188:	460f      	mov	r7, r1
   d718a:	3328      	adds	r3, #40	; 0x28
   d718c:	2618      	movs	r6, #24
   d718e:	b089      	sub	sp, #36	; 0x24
   d7190:	6043      	str	r3, [r0, #4]
   d7192:	6085      	str	r5, [r0, #8]
   d7194:	60c5      	str	r5, [r0, #12]
   d7196:	4632      	mov	r2, r6
   d7198:	4629      	mov	r1, r5
   d719a:	4604      	mov	r4, r0
   d719c:	3010      	adds	r0, #16
   d719e:	f002 fde2 	bl	d9d66 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d71a2:	462a      	mov	r2, r5
   d71a4:	4629      	mov	r1, r5
   d71a6:	6878      	ldr	r0, [r7, #4]
   d71a8:	f7ff fefc 	bl	d6fa4 <network_ready>
   d71ac:	b908      	cbnz	r0, d71b2 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d71ae:	60a0      	str	r0, [r4, #8]
            return sig;
   d71b0:	e01b      	b.n	d71ea <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d71b2:	4629      	mov	r1, r5
   d71b4:	4632      	mov	r2, r6
   d71b6:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d71b8:	9500      	str	r5, [sp, #0]
   d71ba:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d71bc:	f002 fdd3 	bl	d9d66 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d71c0:	a902      	add	r1, sp, #8
   d71c2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d71c4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d71c8:	f7ff fc0a 	bl	d69e0 <cellular_signal>
   d71cc:	b110      	cbz	r0, d71d4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d71ce:	2301      	movs	r3, #1
   d71d0:	60a3      	str	r3, [r4, #8]
            return sig;
   d71d2:	e00a      	b.n	d71ea <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d71d4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d71d6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d71d8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d71da:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d71dc:	b90b      	cbnz	r3, d71e2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d71de:	2302      	movs	r3, #2
   d71e0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d71e2:	a902      	add	r1, sp, #8
   d71e4:	4620      	mov	r0, r4
   d71e6:	f000 f889 	bl	d72fc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d71ea:	4620      	mov	r0, r4
   d71ec:	b009      	add	sp, #36	; 0x24
   d71ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71f0:	000dd684 	.word	0x000dd684

000d71f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d71f4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d71f6:	4c08      	ldr	r4, [pc, #32]	; (d7218 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d71f8:	2528      	movs	r5, #40	; 0x28
   d71fa:	462a      	mov	r2, r5
   d71fc:	2100      	movs	r1, #0
   d71fe:	4620      	mov	r0, r4
   d7200:	f002 fdb1 	bl	d9d66 <memset>
        cid = -1;
   d7204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7208:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d720a:	4b04      	ldr	r3, [pc, #16]	; (d721c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d720c:	8025      	strh	r5, [r4, #0]
   d720e:	2204      	movs	r2, #4
   d7210:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7212:	4a03      	ldr	r2, [pc, #12]	; (d7220 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7214:	601a      	str	r2, [r3, #0]
   d7216:	bd38      	pop	{r3, r4, r5, pc}
   d7218:	2003e1c4 	.word	0x2003e1c4
   d721c:	2003e1bc 	.word	0x2003e1bc
   d7220:	000dd650 	.word	0x000dd650

000d7224 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7224:	4770      	bx	lr

000d7226 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7226:	7d00      	ldrb	r0, [r0, #20]
   d7228:	4770      	bx	lr
	...

000d722c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d722c:	7d03      	ldrb	r3, [r0, #20]
   d722e:	b11b      	cbz	r3, d7238 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d7230:	6983      	ldr	r3, [r0, #24]
   d7232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7236:	d102      	bne.n	d723e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7238:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7250 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d723c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d723e:	ee07 3a90 	vmov	s15, r3
   d7242:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7254 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d7246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d724a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d724e:	4770      	bx	lr
   d7250:	00000000 	.word	0x00000000
   d7254:	42c80000 	.word	0x42c80000

000d7258 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7258:	7d03      	ldrb	r3, [r0, #20]
   d725a:	b11b      	cbz	r3, d7264 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d725c:	6a03      	ldr	r3, [r0, #32]
   d725e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7262:	d102      	bne.n	d726a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7264:	ed9f 0a05 	vldr	s0, [pc, #20]	; d727c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7268:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d726a:	ee07 3a90 	vmov	s15, r3
   d726e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7280 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d7272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7276:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d727a:	4770      	bx	lr
   d727c:	00000000 	.word	0x00000000
   d7280:	42c80000 	.word	0x42c80000

000d7284 <_ZN14CellularSignalD0Ev>:
   d7284:	b510      	push	{r4, lr}
   d7286:	2128      	movs	r1, #40	; 0x28
   d7288:	4604      	mov	r4, r0
   d728a:	f001 fd06 	bl	d8c9a <_ZdlPvj>
   d728e:	4620      	mov	r0, r4
   d7290:	bd10      	pop	{r4, pc}
	...

000d7294 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7294:	7d03      	ldrb	r3, [r0, #20]
   d7296:	b17b      	cbz	r3, d72b8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7298:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d729a:	2b00      	cmp	r3, #0
   d729c:	db0c      	blt.n	d72b8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d729e:	ee07 3a90 	vmov	s15, r3
   d72a2:	eddf 6a07 	vldr	s13, [pc, #28]	; d72c0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d72a6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d72c4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d72aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d72ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d72b2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d72b6:	4770      	bx	lr
    }

    return -1.0f;
   d72b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d72bc:	4770      	bx	lr
   d72be:	bf00      	nop
   d72c0:	477fff00 	.word	0x477fff00
   d72c4:	42c80000 	.word	0x42c80000

000d72c8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d72c8:	7d03      	ldrb	r3, [r0, #20]
   d72ca:	b17b      	cbz	r3, d72ec <_ZNK14CellularSignal11getStrengthEv+0x24>
   d72cc:	69c3      	ldr	r3, [r0, #28]
   d72ce:	2b00      	cmp	r3, #0
   d72d0:	db0c      	blt.n	d72ec <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d72d2:	ee07 3a90 	vmov	s15, r3
   d72d6:	eddf 6a07 	vldr	s13, [pc, #28]	; d72f4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d72da:	ed9f 0a07 	vldr	s0, [pc, #28]	; d72f8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d72de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d72e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d72e6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d72ea:	4770      	bx	lr
    }

    return -1.0f;
   d72ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d72f0:	4770      	bx	lr
   d72f2:	bf00      	nop
   d72f4:	477fff00 	.word	0x477fff00
   d72f8:	42c80000 	.word	0x42c80000

000d72fc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d72fc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d72fe:	460d      	mov	r5, r1
   d7300:	f100 0410 	add.w	r4, r0, #16
   d7304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7308:	e895 0003 	ldmia.w	r5, {r0, r1}
   d730c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d7310:	2001      	movs	r0, #1
   d7312:	bd30      	pop	{r4, r5, pc}

000d7314 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d7314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7318:	4607      	mov	r7, r0
   d731a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d731c:	4615      	mov	r5, r2
   d731e:	b92a      	cbnz	r2, d732c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d7320:	6803      	ldr	r3, [r0, #0]
   d7322:	b2c9      	uxtb	r1, r1
   d7324:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d7326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d732a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d732c:	2900      	cmp	r1, #0
   d732e:	da07      	bge.n	d7340 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d7330:	2a0a      	cmp	r2, #10
   d7332:	d105      	bne.n	d7340 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d7334:	212d      	movs	r1, #45	; 0x2d
   d7336:	f000 fe45 	bl	d7fc4 <_ZN5Print5printEc>
            val = -n;
   d733a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d733c:	4606      	mov	r6, r0
            val = -n;
   d733e:	e001      	b.n	d7344 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7340:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7342:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7344:	b2ea      	uxtb	r2, r5
   d7346:	4638      	mov	r0, r7
   d7348:	f000 fe55 	bl	d7ff6 <_ZN5Print11printNumberEmh>
    }
}
   d734c:	4430      	add	r0, r6
   d734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7352 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d7352:	b570      	push	{r4, r5, r6, lr}
   d7354:	460d      	mov	r5, r1
   d7356:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7358:	220a      	movs	r2, #10
   d735a:	6881      	ldr	r1, [r0, #8]
   d735c:	4628      	mov	r0, r5
   d735e:	f7ff ffd9 	bl	d7314 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d7362:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7364:	4604      	mov	r4, r0
    n += p.print(',');
   d7366:	4628      	mov	r0, r5
   d7368:	f000 fe2c 	bl	d7fc4 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d736c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d736e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7370:	68f1      	ldr	r1, [r6, #12]
   d7372:	4628      	mov	r0, r5
   d7374:	f7ff ffce 	bl	d7314 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d7378:	4420      	add	r0, r4
   d737a:	bd70      	pop	{r4, r5, r6, pc}

000d737c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d737c:	f1a0 0004 	sub.w	r0, r0, #4
   d7380:	f7ff bfe7 	b.w	d7352 <_ZNK14CellularSignal7printToER5Print>

000d7384 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7384:	4770      	bx	lr

000d7386 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7386:	2000      	movs	r0, #0
   d7388:	4770      	bx	lr

000d738a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d738a:	b510      	push	{r4, lr}
   d738c:	2110      	movs	r1, #16
   d738e:	4604      	mov	r4, r0
   d7390:	f001 fc83 	bl	d8c9a <_ZdlPvj>
   d7394:	4620      	mov	r0, r4
   d7396:	bd10      	pop	{r4, pc}

000d7398 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7398:	b508      	push	{r3, lr}
      { delete this; }
   d739a:	b108      	cbz	r0, d73a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d739c:	f7ff fff5 	bl	d738a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d73a0:	bd08      	pop	{r3, pc}

000d73a2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d73a2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d73a4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d73a6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d73a8:	b113      	cbz	r3, d73b0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d73aa:	2203      	movs	r2, #3
   d73ac:	4601      	mov	r1, r0
   d73ae:	4798      	blx	r3
    }
   d73b0:	4620      	mov	r0, r4
   d73b2:	bd10      	pop	{r4, pc}

000d73b4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d73b4:	2200      	movs	r2, #0
   d73b6:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d73b8:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d73ba:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d73be:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d73c0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d73c4:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d73c6:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73c8:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d73ca:	680c      	ldr	r4, [r1, #0]
   d73cc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d73ce:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d73d0:	bd10      	pop	{r4, pc}

000d73d2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d73d2:	b510      	push	{r4, lr}
   d73d4:	4604      	mov	r4, r0
    free((void*)msg_);
   d73d6:	6800      	ldr	r0, [r0, #0]
   d73d8:	f7ff fe24 	bl	d7024 <free>
}
   d73dc:	4620      	mov	r0, r4
   d73de:	bd10      	pop	{r4, pc}

000d73e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d73e0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d73e2:	68c4      	ldr	r4, [r0, #12]
   d73e4:	b1f4      	cbz	r4, d7424 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d73e6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d73e8:	2b02      	cmp	r3, #2
   d73ea:	d103      	bne.n	d73f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d73ec:	f104 000c 	add.w	r0, r4, #12
   d73f0:	f7ff ffef 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d73f4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d73f6:	b135      	cbz	r5, d7406 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d73f8:	4628      	mov	r0, r5
   d73fa:	f7ff ffd2 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
   d73fe:	2110      	movs	r1, #16
   d7400:	4628      	mov	r0, r5
   d7402:	f001 fc4a 	bl	d8c9a <_ZdlPvj>
   d7406:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7408:	b135      	cbz	r5, d7418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d740a:	4628      	mov	r0, r5
   d740c:	f7ff ffc9 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
   d7410:	2110      	movs	r1, #16
   d7412:	4628      	mov	r0, r5
   d7414:	f001 fc41 	bl	d8c9a <_ZdlPvj>
   d7418:	4620      	mov	r0, r4
   d741a:	2114      	movs	r1, #20
   d741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7420:	f001 bc3b 	b.w	d8c9a <_ZdlPvj>
   d7424:	bd38      	pop	{r3, r4, r5, pc}

000d7426 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7426:	b510      	push	{r4, lr}
   d7428:	b088      	sub	sp, #32
   d742a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d742c:	4668      	mov	r0, sp
   d742e:	f000 fe77 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d7432:	4669      	mov	r1, sp
   d7434:	a804      	add	r0, sp, #16
   d7436:	f000 fe95 	bl	d8164 <_ZN6StringC1ERKS_>
   d743a:	a804      	add	r0, sp, #16
   d743c:	47a0      	blx	r4
   d743e:	4604      	mov	r4, r0
   d7440:	a804      	add	r0, sp, #16
   d7442:	f000 fe26 	bl	d8092 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7446:	4668      	mov	r0, sp
   d7448:	f000 fe23 	bl	d8092 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d744c:	4620      	mov	r0, r4
   d744e:	b008      	add	sp, #32
   d7450:	bd10      	pop	{r4, pc}

000d7452 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7452:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7454:	2410      	movs	r4, #16
   d7456:	b085      	sub	sp, #20
   d7458:	4607      	mov	r7, r0
   d745a:	460e      	mov	r6, r1
   d745c:	4615      	mov	r5, r2
   d745e:	2100      	movs	r1, #0
   d7460:	4622      	mov	r2, r4
   d7462:	4668      	mov	r0, sp
   d7464:	f002 fc7f 	bl	d9d66 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7468:	2200      	movs	r2, #0
   d746a:	4669      	mov	r1, sp
   d746c:	4610      	mov	r0, r2
         size = sizeof(*this);
   d746e:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d7472:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d7474:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d7476:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7478:	f7ff fd1c 	bl	d6eb4 <spark_function>
}
   d747c:	b005      	add	sp, #20
   d747e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7480 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7480:	b513      	push	{r0, r1, r4, lr}
   d7482:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7484:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7488:	2300      	movs	r3, #0
   d748a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d748c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d748e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7490:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7492:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7494:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7496:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7498:	f7fd f963 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d749c:	4620      	mov	r0, r4
   d749e:	b002      	add	sp, #8
   d74a0:	bd10      	pop	{r4, pc}

000d74a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d74a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d74a4:	460c      	mov	r4, r1
   d74a6:	ad02      	add	r5, sp, #8
   d74a8:	f854 3b04 	ldr.w	r3, [r4], #4
   d74ac:	f845 3d08 	str.w	r3, [r5, #-8]!
   d74b0:	4606      	mov	r6, r0
   d74b2:	460f      	mov	r7, r1
   d74b4:	a801      	add	r0, sp, #4
   d74b6:	4621      	mov	r1, r4
   d74b8:	f7ff fe13 	bl	d70e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d74bc:	4629      	mov	r1, r5
   d74be:	4630      	mov	r0, r6
   d74c0:	f7ff ffde 	bl	d7480 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74c4:	a801      	add	r0, sp, #4
   d74c6:	f7fd f94c 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74ca:	4620      	mov	r0, r4
   d74cc:	f7fd f949 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d74d0:	4638      	mov	r0, r7
   d74d2:	2108      	movs	r1, #8
   d74d4:	f001 fbe1 	bl	d8c9a <_ZdlPvj>
        return p;
    }
   d74d8:	4630      	mov	r0, r6
   d74da:	b003      	add	sp, #12
   d74dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74de <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d74de:	b513      	push	{r0, r1, r4, lr}
   d74e0:	460b      	mov	r3, r1
   d74e2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74e4:	c803      	ldmia	r0, {r0, r1}
   d74e6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d74ea:	e893 0003 	ldmia.w	r3, {r0, r1}
   d74ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d74f2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d74f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d74fa:	b002      	add	sp, #8
   d74fc:	bd10      	pop	{r4, pc}
	...

000d7500 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7500:	b538      	push	{r3, r4, r5, lr}
   d7502:	2300      	movs	r3, #0
   d7504:	4604      	mov	r4, r0
   d7506:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7508:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d750a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d750c:	f7fc fdc5 	bl	d409a <_Znwj>
   d7510:	b128      	cbz	r0, d751e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7512:	2301      	movs	r3, #1
   d7514:	6043      	str	r3, [r0, #4]
   d7516:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7518:	4b02      	ldr	r3, [pc, #8]	; (d7524 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d751a:	6003      	str	r3, [r0, #0]
   d751c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d751e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d7520:	4620      	mov	r0, r4
   d7522:	bd38      	pop	{r3, r4, r5, pc}
   d7524:	000dd6b8 	.word	0x000dd6b8

000d7528 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7528:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d752a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d752c:	b90a      	cbnz	r2, d7532 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d752e:	f001 fbd0 	bl	d8cd2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7532:	68c3      	ldr	r3, [r0, #12]
    }
   d7534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7538:	4718      	bx	r3

000d753a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d753a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d753c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d753e:	f100 0110 	add.w	r1, r0, #16
   d7542:	f7ff fff1 	bl	d7528 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7546:	bd08      	pop	{r3, pc}

000d7548 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7548:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d754a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d754c:	b90a      	cbnz	r2, d7552 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d754e:	f001 fbc0 	bl	d8cd2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7552:	68c3      	ldr	r3, [r0, #12]
    }
   d7554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7558:	4718      	bx	r3

000d755a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d755a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d755c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d755e:	f100 0110 	add.w	r1, r0, #16
   d7562:	f7ff fff1 	bl	d7548 <_ZNKSt8functionIFvRKbEEclES1_>
   d7566:	bd08      	pop	{r3, pc}

000d7568 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7568:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d756a:	2300      	movs	r3, #0
   d756c:	6083      	str	r3, [r0, #8]
   d756e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7570:	4604      	mov	r4, r0
   d7572:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7574:	b12b      	cbz	r3, d7582 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7576:	2202      	movs	r2, #2
   d7578:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d757a:	68eb      	ldr	r3, [r5, #12]
   d757c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d757e:	68ab      	ldr	r3, [r5, #8]
   d7580:	60a3      	str	r3, [r4, #8]
	}
    }
   d7582:	4620      	mov	r0, r4
   d7584:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7588:	b5f0      	push	{r4, r5, r6, r7, lr}
   d758a:	b089      	sub	sp, #36	; 0x24
   d758c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d758e:	4668      	mov	r0, sp
   d7590:	f7ff ff10 	bl	d73b4 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7594:	2300      	movs	r3, #0
   d7596:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d759a:	f04f 0202 	mov.w	r2, #2
   d759e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d75a2:	2b00      	cmp	r3, #0
   d75a4:	d103      	bne.n	d75ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d75a6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d75aa:	2900      	cmp	r1, #0
   d75ac:	d1f7      	bne.n	d759e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d75ae:	d002      	beq.n	d75b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d75b0:	f88d 3008 	strb.w	r3, [sp, #8]
   d75b4:	e063      	b.n	d767e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d75b6:	f114 050c 	adds.w	r5, r4, #12
   d75ba:	d003      	beq.n	d75c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d75bc:	4669      	mov	r1, sp
   d75be:	4628      	mov	r0, r5
   d75c0:	f7ff fef8 	bl	d73b4 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d75c4:	f3bf 8f5f 	dmb	sy
   d75c8:	2301      	movs	r3, #1
   d75ca:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d75cc:	2000      	movs	r0, #0
   d75ce:	f104 0308 	add.w	r3, r4, #8
   d75d2:	f3bf 8f5f 	dmb	sy
   d75d6:	e853 6f00 	ldrex	r6, [r3]
   d75da:	e843 0200 	strex	r2, r0, [r3]
   d75de:	2a00      	cmp	r2, #0
   d75e0:	d1f9      	bne.n	d75d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d75e2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d75e6:	2e00      	cmp	r6, #0
   d75e8:	d049      	beq.n	d767e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d75ea:	f7ff fc13 	bl	d6e14 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d75ee:	b120      	cbz	r0, d75fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75f0:	4629      	mov	r1, r5
   d75f2:	4630      	mov	r0, r6
   d75f4:	f7ff ff98 	bl	d7528 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d75f8:	e03a      	b.n	d7670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d75fa:	4631      	mov	r1, r6
   d75fc:	a802      	add	r0, sp, #8
   d75fe:	f7ff ffb3 	bl	d7568 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7602:	68e0      	ldr	r0, [r4, #12]
   d7604:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7608:	b108      	cbz	r0, d760e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d760a:	f002 fe3d 	bl	da288 <strdup>
   d760e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7610:	2010      	movs	r0, #16
   d7612:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7616:	f7fc fd40 	bl	d409a <_Znwj>
   d761a:	4605      	mov	r5, r0
   d761c:	b1e8      	cbz	r0, d765a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d761e:	2700      	movs	r7, #0
   d7620:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7622:	2018      	movs	r0, #24
   d7624:	f7fc fd39 	bl	d409a <_Znwj>
   d7628:	4604      	mov	r4, r0
   d762a:	b188      	cbz	r0, d7650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d762c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d762e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7630:	a802      	add	r0, sp, #8
   d7632:	f7ff ff54 	bl	d74de <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7636:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7638:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d763a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d763c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d763e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7640:	a906      	add	r1, sp, #24
   d7642:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7644:	60e3      	str	r3, [r4, #12]
   d7646:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d764a:	9205      	str	r2, [sp, #20]
   d764c:	f7ff feb2 	bl	d73b4 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7650:	4b0d      	ldr	r3, [pc, #52]	; (d7688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7652:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7654:	4b0d      	ldr	r3, [pc, #52]	; (d768c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7656:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7658:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d765a:	a806      	add	r0, sp, #24
   d765c:	f7ff feb9 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7660:	a802      	add	r0, sp, #8
   d7662:	f7ff fe9e 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7666:	2200      	movs	r2, #0
   d7668:	4629      	mov	r1, r5
   d766a:	4809      	ldr	r0, [pc, #36]	; (d7690 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d766c:	f7ff fbda 	bl	d6e24 <application_thread_invoke>
   d7670:	4630      	mov	r0, r6
   d7672:	f7ff fe96 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7676:	2110      	movs	r1, #16
   d7678:	4630      	mov	r0, r6
   d767a:	f001 fb0e 	bl	d8c9a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d767e:	4668      	mov	r0, sp
   d7680:	f7ff fea7 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
    }
   d7684:	b009      	add	sp, #36	; 0x24
   d7686:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7688:	000d753b 	.word	0x000d753b
   d768c:	000d77b1 	.word	0x000d77b1
   d7690:	000d70ab 	.word	0x000d70ab

000d7694 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7698:	b08b      	sub	sp, #44	; 0x2c
   d769a:	4606      	mov	r6, r0
   d769c:	460f      	mov	r7, r1
   d769e:	4690      	mov	r8, r2
   d76a0:	4699      	mov	r9, r3
   d76a2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d76a6:	f7ff fc25 	bl	d6ef4 <spark_cloud_flag_connected>
   d76aa:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d76ac:	4683      	mov	fp, r0
   d76ae:	bb30      	cbnz	r0, d76fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d76b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d76b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76b6:	a905      	add	r1, sp, #20
   d76b8:	4628      	mov	r0, r5
   d76ba:	f8ad 3018 	strh.w	r3, [sp, #24]
   d76be:	f7ff fe79 	bl	d73b4 <_ZN8particle5ErrorC1EOS0_>
   d76c2:	2014      	movs	r0, #20
   d76c4:	f7fc fce9 	bl	d409a <_Znwj>
   d76c8:	4604      	mov	r4, r0
   d76ca:	b158      	cbz	r0, d76e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d76cc:	2302      	movs	r3, #2
   d76ce:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76d0:	2301      	movs	r3, #1
   d76d2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d76d4:	f8c0 b004 	str.w	fp, [r0, #4]
   d76d8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d76dc:	4629      	mov	r1, r5
   d76de:	300c      	adds	r0, #12
   d76e0:	f7ff fe68 	bl	d73b4 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d76e4:	4630      	mov	r0, r6
   d76e6:	4621      	mov	r1, r4
   d76e8:	f840 4b04 	str.w	r4, [r0], #4
   d76ec:	f7ff ff08 	bl	d7500 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76f0:	4628      	mov	r0, r5
   d76f2:	f7ff fe6e 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d76f6:	a805      	add	r0, sp, #20
   d76f8:	f7ff fe6b 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
   d76fc:	e052      	b.n	d77a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d76fe:	2400      	movs	r4, #0
   d7700:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7702:	2014      	movs	r0, #20
   d7704:	606c      	str	r4, [r5, #4]
   d7706:	60ac      	str	r4, [r5, #8]
   d7708:	9307      	str	r3, [sp, #28]
   d770a:	f7fc fcc6 	bl	d409a <_Znwj>
   d770e:	4601      	mov	r1, r0
   d7710:	b118      	cbz	r0, d771a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7712:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7714:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7716:	6044      	str	r4, [r0, #4]
   d7718:	6084      	str	r4, [r0, #8]
   d771a:	a804      	add	r0, sp, #16
   d771c:	9103      	str	r1, [sp, #12]
   d771e:	f7ff feef 	bl	d7500 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7722:	4b22      	ldr	r3, [pc, #136]	; (d77ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7724:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7726:	2008      	movs	r0, #8
   d7728:	f7fc fcb7 	bl	d409a <_Znwj>
   d772c:	4604      	mov	r4, r0
   d772e:	b128      	cbz	r0, d773c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7730:	9b03      	ldr	r3, [sp, #12]
   d7732:	f840 3b04 	str.w	r3, [r0], #4
   d7736:	a904      	add	r1, sp, #16
   d7738:	f7ff fcd3 	bl	d70e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d773c:	9500      	str	r5, [sp, #0]
   d773e:	fa5f f38a 	uxtb.w	r3, sl
   d7742:	464a      	mov	r2, r9
   d7744:	4641      	mov	r1, r8
   d7746:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7748:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d774a:	f7ff fbe3 	bl	d6f14 <spark_send_event>
   d774e:	b920      	cbnz	r0, d775a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7750:	9b03      	ldr	r3, [sp, #12]
   d7752:	785b      	ldrb	r3, [r3, #1]
   d7754:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7758:	b183      	cbz	r3, d777c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d775a:	9b03      	ldr	r3, [sp, #12]
   d775c:	9305      	str	r3, [sp, #20]
   d775e:	a904      	add	r1, sp, #16
   d7760:	a806      	add	r0, sp, #24
   d7762:	f7ff fcbe 	bl	d70e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7766:	a905      	add	r1, sp, #20
   d7768:	4630      	mov	r0, r6
   d776a:	f7ff fe89 	bl	d7480 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d776e:	a806      	add	r0, sp, #24
   d7770:	f7fc fff7 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7774:	a804      	add	r0, sp, #16
   d7776:	f7fc fff4 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d777a:	e013      	b.n	d77a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d777c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7780:	a905      	add	r1, sp, #20
   d7782:	a803      	add	r0, sp, #12
   d7784:	9205      	str	r2, [sp, #20]
   d7786:	f8ad 3018 	strh.w	r3, [sp, #24]
   d778a:	f7ff fefd 	bl	d7588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d778e:	a805      	add	r0, sp, #20
   d7790:	f7ff fe1f 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7794:	a805      	add	r0, sp, #20
   d7796:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7798:	f7ff fe83 	bl	d74a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d779c:	a806      	add	r0, sp, #24
   d779e:	f7fc ffe0 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77a2:	e7da      	b.n	d775a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d77a4:	4630      	mov	r0, r6
   d77a6:	b00b      	add	sp, #44	; 0x2c
   d77a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77ac:	000d7921 	.word	0x000d7921

000d77b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d77b0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77b4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d77b6:	d006      	beq.n	d77c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d77b8:	2a03      	cmp	r2, #3
   d77ba:	d017      	beq.n	d77ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d77bc:	2a01      	cmp	r2, #1
   d77be:	d122      	bne.n	d7806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d77c0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d77c2:	6003      	str	r3, [r0, #0]
	      break;
   d77c4:	e01f      	b.n	d7806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77c6:	2018      	movs	r0, #24
   d77c8:	680e      	ldr	r6, [r1, #0]
   d77ca:	f7fc fc66 	bl	d409a <_Znwj>
   d77ce:	4605      	mov	r5, r0
   d77d0:	b150      	cbz	r0, d77e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d77d2:	4631      	mov	r1, r6
   d77d4:	f7ff fec8 	bl	d7568 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d77d8:	6930      	ldr	r0, [r6, #16]
   d77da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d77de:	b108      	cbz	r0, d77e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d77e0:	f002 fd52 	bl	da288 <strdup>
   d77e4:	6128      	str	r0, [r5, #16]
   d77e6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77e8:	6025      	str	r5, [r4, #0]
   d77ea:	e00c      	b.n	d7806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77ec:	6804      	ldr	r4, [r0, #0]
   d77ee:	b154      	cbz	r4, d7806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d77f0:	f104 0010 	add.w	r0, r4, #16
   d77f4:	f7ff fded 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77f8:	4620      	mov	r0, r4
   d77fa:	f7ff fdd2 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77fe:	2118      	movs	r1, #24
   d7800:	4620      	mov	r0, r4
   d7802:	f001 fa4a 	bl	d8c9a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7806:	2000      	movs	r0, #0
   d7808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d780a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d780a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d780c:	2300      	movs	r3, #0
   d780e:	6083      	str	r3, [r0, #8]
   d7810:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7812:	4604      	mov	r4, r0
   d7814:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7816:	b12b      	cbz	r3, d7824 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7818:	2202      	movs	r2, #2
   d781a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d781c:	68eb      	ldr	r3, [r5, #12]
   d781e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7820:	68ab      	ldr	r3, [r5, #8]
   d7822:	60a3      	str	r3, [r4, #8]
	}
    }
   d7824:	4620      	mov	r0, r4
   d7826:	bd38      	pop	{r3, r4, r5, pc}

000d7828 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7828:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d782a:	b570      	push	{r4, r5, r6, lr}
   d782c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d782e:	d006      	beq.n	d783e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7830:	2a03      	cmp	r2, #3
   d7832:	d011      	beq.n	d7858 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7834:	2a01      	cmp	r2, #1
   d7836:	d118      	bne.n	d786a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7838:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d783a:	6003      	str	r3, [r0, #0]
	      break;
   d783c:	e015      	b.n	d786a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d783e:	2014      	movs	r0, #20
   d7840:	680e      	ldr	r6, [r1, #0]
   d7842:	f7fc fc2a 	bl	d409a <_Znwj>
   d7846:	4605      	mov	r5, r0
   d7848:	b120      	cbz	r0, d7854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d784a:	4631      	mov	r1, r6
   d784c:	f7ff ffdd 	bl	d780a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7850:	7c33      	ldrb	r3, [r6, #16]
   d7852:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7854:	6025      	str	r5, [r4, #0]
   d7856:	e008      	b.n	d786a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7858:	6804      	ldr	r4, [r0, #0]
   d785a:	b134      	cbz	r4, d786a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d785c:	4620      	mov	r0, r4
   d785e:	f7ff fda0 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7862:	2114      	movs	r1, #20
   d7864:	4620      	mov	r0, r4
   d7866:	f001 fa18 	bl	d8c9a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d786a:	2000      	movs	r0, #0
   d786c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7870 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7870:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7872:	2300      	movs	r3, #0
   d7874:	b087      	sub	sp, #28
   d7876:	460c      	mov	r4, r1
   d7878:	f3bf 8f5f 	dmb	sy
   d787c:	e850 6f00 	ldrex	r6, [r0]
   d7880:	e840 3200 	strex	r2, r3, [r0]
   d7884:	2a00      	cmp	r2, #0
   d7886:	d1f9      	bne.n	d787c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7888:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d788c:	2e00      	cmp	r6, #0
   d788e:	d03f      	beq.n	d7910 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7890:	4618      	mov	r0, r3
   d7892:	f7ff fabf 	bl	d6e14 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7896:	4607      	mov	r7, r0
   d7898:	b120      	cbz	r0, d78a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d789a:	4621      	mov	r1, r4
   d789c:	4630      	mov	r0, r6
   d789e:	f7ff fe53 	bl	d7548 <_ZNKSt8functionIFvRKbEEclES1_>
   d78a2:	e02e      	b.n	d7902 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d78a4:	4631      	mov	r1, r6
   d78a6:	a801      	add	r0, sp, #4
   d78a8:	f7ff ffaf 	bl	d780a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d78ac:	7823      	ldrb	r3, [r4, #0]
   d78ae:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d78b2:	2010      	movs	r0, #16
   d78b4:	f7fc fbf1 	bl	d409a <_Znwj>
   d78b8:	4605      	mov	r5, r0
   d78ba:	b1d0      	cbz	r0, d78f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78bc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78be:	2014      	movs	r0, #20
   d78c0:	f7fc fbeb 	bl	d409a <_Znwj>
   d78c4:	4604      	mov	r4, r0
   d78c6:	b178      	cbz	r0, d78e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78c8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d78ca:	4601      	mov	r1, r0
   d78cc:	a801      	add	r0, sp, #4
   d78ce:	f7ff fe06 	bl	d74de <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78d2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78d6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78d8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78da:	9203      	str	r2, [sp, #12]
   d78dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78de:	60e3      	str	r3, [r4, #12]
   d78e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d78e4:	9204      	str	r2, [sp, #16]
   d78e6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d78e8:	4b0a      	ldr	r3, [pc, #40]	; (d7914 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d78ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d78ec:	4b0a      	ldr	r3, [pc, #40]	; (d7918 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78ee:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d78f0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78f2:	a801      	add	r0, sp, #4
   d78f4:	f7ff fd55 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d78f8:	2200      	movs	r2, #0
   d78fa:	4629      	mov	r1, r5
   d78fc:	4807      	ldr	r0, [pc, #28]	; (d791c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d78fe:	f7ff fa91 	bl	d6e24 <application_thread_invoke>
   d7902:	4630      	mov	r0, r6
   d7904:	f7ff fd4d 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7908:	2110      	movs	r1, #16
   d790a:	4630      	mov	r0, r6
   d790c:	f001 f9c5 	bl	d8c9a <_ZdlPvj>
        }
    }
   d7910:	b007      	add	sp, #28
   d7912:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7914:	000d755b 	.word	0x000d755b
   d7918:	000d7829 	.word	0x000d7829
   d791c:	000d70ab 	.word	0x000d70ab

000d7920 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7920:	b530      	push	{r4, r5, lr}
   d7922:	b085      	sub	sp, #20
   d7924:	4604      	mov	r4, r0
   d7926:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7928:	4668      	mov	r0, sp
   d792a:	4611      	mov	r1, r2
   d792c:	f7ff fdb9 	bl	d74a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7930:	b17c      	cbz	r4, d7952 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7932:	b224      	sxth	r4, r4
   d7934:	4628      	mov	r0, r5
   d7936:	b10d      	cbz	r5, d793c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7938:	f002 fca6 	bl	da288 <strdup>
   d793c:	9002      	str	r0, [sp, #8]
   d793e:	a902      	add	r1, sp, #8
   d7940:	4668      	mov	r0, sp
   d7942:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7946:	f7ff fe1f 	bl	d7588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d794a:	a802      	add	r0, sp, #8
   d794c:	f7ff fd41 	bl	d73d2 <_ZN8particle5ErrorD1Ev>
   d7950:	e01d      	b.n	d798e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7952:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7954:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7958:	f04f 0201 	mov.w	r2, #1
   d795c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7960:	42a3      	cmp	r3, r4
   d7962:	d103      	bne.n	d796c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7964:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7968:	2900      	cmp	r1, #0
   d796a:	d1f7      	bne.n	d795c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d796c:	d002      	beq.n	d7974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d796e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7972:	e00c      	b.n	d798e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7974:	f110 010c 	adds.w	r1, r0, #12
   d7978:	f04f 0301 	mov.w	r3, #1
   d797c:	bf18      	it	ne
   d797e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7980:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7984:	3004      	adds	r0, #4
   d7986:	f800 3c03 	strb.w	r3, [r0, #-3]
   d798a:	f7ff ff71 	bl	d7870 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d798e:	a801      	add	r0, sp, #4
   d7990:	f7fc fee7 	bl	d4762 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7994:	b005      	add	sp, #20
   d7996:	bd30      	pop	{r4, r5, pc}

000d7998 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7998:	2200      	movs	r2, #0
   d799a:	4611      	mov	r1, r2
   d799c:	6840      	ldr	r0, [r0, #4]
   d799e:	f7ff bb21 	b.w	d6fe4 <network_listening>

000d79a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d79a2:	2200      	movs	r2, #0
   d79a4:	4611      	mov	r1, r2
   d79a6:	6840      	ldr	r0, [r0, #4]
   d79a8:	f7ff bb2c 	b.w	d7004 <network_get_listen_timeout>

000d79ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d79ac:	2200      	movs	r2, #0
   d79ae:	6840      	ldr	r0, [r0, #4]
   d79b0:	f7ff bb20 	b.w	d6ff4 <network_set_listen_timeout>

000d79b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d79b4:	2200      	movs	r2, #0
   d79b6:	f081 0101 	eor.w	r1, r1, #1
   d79ba:	6840      	ldr	r0, [r0, #4]
   d79bc:	f7ff bb0a 	b.w	d6fd4 <network_listen>

000d79c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d79c0:	2300      	movs	r3, #0
   d79c2:	461a      	mov	r2, r3
   d79c4:	4619      	mov	r1, r3
   d79c6:	6840      	ldr	r0, [r0, #4]
   d79c8:	f7ff bafc 	b.w	d6fc4 <network_off>

000d79cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d79cc:	2300      	movs	r3, #0
   d79ce:	461a      	mov	r2, r3
   d79d0:	4619      	mov	r1, r3
   d79d2:	6840      	ldr	r0, [r0, #4]
   d79d4:	f7ff baee 	b.w	d6fb4 <network_on>

000d79d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d79d8:	2200      	movs	r2, #0
   d79da:	4611      	mov	r1, r2
   d79dc:	6840      	ldr	r0, [r0, #4]
   d79de:	f7ff bae1 	b.w	d6fa4 <network_ready>

000d79e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d79e2:	2200      	movs	r2, #0
   d79e4:	4611      	mov	r1, r2
   d79e6:	6840      	ldr	r0, [r0, #4]
   d79e8:	f7ff bacc 	b.w	d6f84 <network_connecting>

000d79ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d79ec:	2200      	movs	r2, #0
   d79ee:	2102      	movs	r1, #2
   d79f0:	6840      	ldr	r0, [r0, #4]
   d79f2:	f7ff bacf 	b.w	d6f94 <network_disconnect>

000d79f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d79f6:	2300      	movs	r3, #0
   d79f8:	461a      	mov	r2, r3
   d79fa:	6840      	ldr	r0, [r0, #4]
   d79fc:	f7ff baba 	b.w	d6f74 <network_connect>

000d7a00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7a00:	4b02      	ldr	r3, [pc, #8]	; (d7a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7a02:	2203      	movs	r2, #3
   d7a04:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7a06:	4a02      	ldr	r2, [pc, #8]	; (d7a10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7a08:	601a      	str	r2, [r3, #0]
   d7a0a:	4770      	bx	lr
   d7a0c:	2003e1ec 	.word	0x2003e1ec
   d7a10:	000dd6d4 	.word	0x000dd6d4

000d7a14 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7a14:	4770      	bx	lr

000d7a16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a18:	4606      	mov	r6, r0
   d7a1a:	4615      	mov	r5, r2
   d7a1c:	460c      	mov	r4, r1
   d7a1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a20:	42bc      	cmp	r4, r7
   d7a22:	d006      	beq.n	d7a32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a24:	6833      	ldr	r3, [r6, #0]
   d7a26:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a2a:	689b      	ldr	r3, [r3, #8]
   d7a2c:	4630      	mov	r0, r6
   d7a2e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a30:	e7f6      	b.n	d7a20 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7a32:	4628      	mov	r0, r5
   d7a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a36 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7a36:	2200      	movs	r2, #0
   d7a38:	7c00      	ldrb	r0, [r0, #16]
   d7a3a:	f7ff b8b9 	b.w	d6bb0 <HAL_I2C_Write_Data>

000d7a3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7a3e:	2100      	movs	r1, #0
   d7a40:	7c00      	ldrb	r0, [r0, #16]
   d7a42:	f7ff b8bd 	b.w	d6bc0 <HAL_I2C_Available_Data>

000d7a46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7a46:	2100      	movs	r1, #0
   d7a48:	7c00      	ldrb	r0, [r0, #16]
   d7a4a:	f7ff b8c1 	b.w	d6bd0 <HAL_I2C_Read_Data>

000d7a4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7a4e:	2100      	movs	r1, #0
   d7a50:	7c00      	ldrb	r0, [r0, #16]
   d7a52:	f7ff b8c5 	b.w	d6be0 <HAL_I2C_Peek_Data>

000d7a56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7a56:	2100      	movs	r1, #0
   d7a58:	7c00      	ldrb	r0, [r0, #16]
   d7a5a:	f7ff b8c9 	b.w	d6bf0 <HAL_I2C_Flush_Data>

000d7a5e <_ZN7TwoWireD0Ev>:
   d7a5e:	b510      	push	{r4, lr}
   d7a60:	2114      	movs	r1, #20
   d7a62:	4604      	mov	r4, r0
   d7a64:	f001 f919 	bl	d8c9a <_ZdlPvj>
   d7a68:	4620      	mov	r0, r4
   d7a6a:	bd10      	pop	{r4, pc}

000d7a6c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7a6c:	b510      	push	{r4, lr}
   d7a6e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7a70:	2300      	movs	r3, #0
   d7a72:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a78:	60a3      	str	r3, [r4, #8]
   d7a7a:	4b04      	ldr	r3, [pc, #16]	; (d7a8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7a7c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7a7e:	4608      	mov	r0, r1
   d7a80:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7a82:	4611      	mov	r1, r2
   d7a84:	f7ff f8c4 	bl	d6c10 <HAL_I2C_Init>
}
   d7a88:	4620      	mov	r0, r4
   d7a8a:	bd10      	pop	{r4, pc}
   d7a8c:	000dd708 	.word	0x000dd708

000d7a90 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7a90:	2300      	movs	r3, #0
   d7a92:	461a      	mov	r2, r3
   d7a94:	4619      	mov	r1, r3
   d7a96:	7c00      	ldrb	r0, [r0, #16]
   d7a98:	f7ff b872 	b.w	d6b80 <HAL_I2C_Begin>

000d7a9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7a9c:	b570      	push	{r4, r5, r6, lr}
   d7a9e:	460c      	mov	r4, r1
   d7aa0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7aa2:	2514      	movs	r5, #20
   d7aa4:	4606      	mov	r6, r0
   d7aa6:	462a      	mov	r2, r5
   d7aa8:	2100      	movs	r1, #0
   d7aaa:	a801      	add	r0, sp, #4
   d7aac:	f002 f95b 	bl	d9d66 <memset>
   d7ab0:	7823      	ldrb	r3, [r4, #0]
   d7ab2:	f88d 3008 	strb.w	r3, [sp, #8]
   d7ab6:	6863      	ldr	r3, [r4, #4]
   d7ab8:	9303      	str	r3, [sp, #12]
   d7aba:	68e3      	ldr	r3, [r4, #12]
   d7abc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7abe:	2200      	movs	r2, #0
   d7ac0:	7a23      	ldrb	r3, [r4, #8]
   d7ac2:	7c30      	ldrb	r0, [r6, #16]
   d7ac4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7ac8:	a901      	add	r1, sp, #4
   d7aca:	9305      	str	r3, [sp, #20]
   d7acc:	f7ff f8b8 	bl	d6c40 <HAL_I2C_Request_Data_Ex>
}
   d7ad0:	b006      	add	sp, #24
   d7ad2:	bd70      	pop	{r4, r5, r6, pc}

000d7ad4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ad6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7ad8:	f88d 1000 	strb.w	r1, [sp]
   d7adc:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7ae0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7ae2:	bf18      	it	ne
   d7ae4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7ae6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7ae8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7aea:	f88d 3008 	strb.w	r3, [sp, #8]
   d7aee:	f7ff ffd5 	bl	d7a9c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7af2:	b005      	add	sp, #20
   d7af4:	f85d fb04 	ldr.w	pc, [sp], #4

000d7af8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7af8:	2200      	movs	r2, #0
   d7afa:	7c00      	ldrb	r0, [r0, #16]
   d7afc:	f7ff b848 	b.w	d6b90 <HAL_I2C_Begin_Transmission>

000d7b00 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7b00:	b2c9      	uxtb	r1, r1
   d7b02:	f7ff bff9 	b.w	d7af8 <_ZN7TwoWire17beginTransmissionEh>

000d7b06 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7b06:	2200      	movs	r2, #0
   d7b08:	7c00      	ldrb	r0, [r0, #16]
   d7b0a:	f7ff b849 	b.w	d6ba0 <HAL_I2C_End_Transmission>

000d7b0e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7b0e:	2100      	movs	r1, #0
   d7b10:	7c00      	ldrb	r0, [r0, #16]
   d7b12:	f7ff b875 	b.w	d6c00 <HAL_I2C_Is_Enabled>

000d7b16 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7b16:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d7b18:	2100      	movs	r1, #0
   d7b1a:	7c00      	ldrb	r0, [r0, #16]
   d7b1c:	f7ff f880 	bl	d6c20 <HAL_I2C_Acquire>
}
   d7b20:	fab0 f080 	clz	r0, r0
   d7b24:	0940      	lsrs	r0, r0, #5
   d7b26:	bd08      	pop	{r3, pc}

000d7b28 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7b28:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d7b2a:	2100      	movs	r1, #0
   d7b2c:	7c00      	ldrb	r0, [r0, #16]
   d7b2e:	f7ff f87f 	bl	d6c30 <HAL_I2C_Release>
}
   d7b32:	fab0 f080 	clz	r0, r0
   d7b36:	0940      	lsrs	r0, r0, #5
   d7b38:	bd08      	pop	{r3, pc}

000d7b3a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7b3a:	4700      	bx	r0

000d7b3c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b3e:	b085      	sub	sp, #20
   d7b40:	461c      	mov	r4, r3
   d7b42:	460e      	mov	r6, r1
   d7b44:	4617      	mov	r7, r2
   d7b46:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7b48:	f7ff f80a 	bl	d6b60 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7b4c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7b4e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b50:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7b54:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b56:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7b5a:	bfa5      	ittet	ge
   d7b5c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7b60:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d7b64:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d7b66:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b68:	9300      	str	r3, [sp, #0]
   d7b6a:	4632      	mov	r2, r6
   d7b6c:	463b      	mov	r3, r7
   d7b6e:	4906      	ldr	r1, [pc, #24]	; (d7b88 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7b70:	bfa8      	it	ge
   d7b72:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b76:	4628      	mov	r0, r5
   d7b78:	f7fe ffea 	bl	d6b50 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7b7c:	fab0 f080 	clz	r0, r0
   d7b80:	0940      	lsrs	r0, r0, #5
   d7b82:	b005      	add	sp, #20
   d7b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b86:	bf00      	nop
   d7b88:	000d7b3b 	.word	0x000d7b3b

000d7b8c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d7b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b8e:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d7b90:	f7fe ffe6 	bl	d6b60 <HAL_Interrupts_Detach>
   d7b94:	4607      	mov	r7, r0
   d7b96:	b968      	cbnz	r0, d7bb4 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d7b98:	4d08      	ldr	r5, [pc, #32]	; (d7bbc <_Z15detachInterruptt+0x30>)
   d7b9a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d7b9e:	b15c      	cbz	r4, d7bb8 <_Z15detachInterruptt+0x2c>
   d7ba0:	4620      	mov	r0, r4
   d7ba2:	f7ff fbfe 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d7ba6:	2110      	movs	r1, #16
   d7ba8:	4620      	mov	r0, r4
   d7baa:	f001 f876 	bl	d8c9a <_ZdlPvj>
        handlers[pin] = nullptr;
   d7bae:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d7bb2:	e001      	b.n	d7bb8 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d7bb4:	2000      	movs	r0, #0
   d7bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d7bb8:	2001      	movs	r0, #1
}
   d7bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7bbc:	2003e1f4 	.word	0x2003e1f4

000d7bc0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7bc0:	4770      	bx	lr

000d7bc2 <_ZN9IPAddressD0Ev>:
   d7bc2:	b510      	push	{r4, lr}
   d7bc4:	2118      	movs	r1, #24
   d7bc6:	4604      	mov	r4, r0
   d7bc8:	f001 f867 	bl	d8c9a <_ZdlPvj>
   d7bcc:	4620      	mov	r0, r4
   d7bce:	bd10      	pop	{r4, pc}

000d7bd0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7bd2:	7d03      	ldrb	r3, [r0, #20]
   d7bd4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bd6:	b08d      	sub	sp, #52	; 0x34
   d7bd8:	460e      	mov	r6, r1
   d7bda:	f100 0704 	add.w	r7, r0, #4
   d7bde:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7be2:	d002      	beq.n	d7bea <_ZNK9IPAddress7printToER5Print+0x1a>
   d7be4:	f100 0508 	add.w	r5, r0, #8
   d7be8:	e018      	b.n	d7c1c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7bea:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7bec:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7bee:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7bf2:	232f      	movs	r3, #47	; 0x2f
   d7bf4:	462a      	mov	r2, r5
   d7bf6:	200a      	movs	r0, #10
   d7bf8:	f7ff f82a 	bl	d6c50 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7bfc:	4628      	mov	r0, r5
   d7bfe:	f003 f873 	bl	dace8 <strlen>
   d7c02:	6833      	ldr	r3, [r6, #0]
   d7c04:	4602      	mov	r2, r0
   d7c06:	68db      	ldr	r3, [r3, #12]
   d7c08:	4629      	mov	r1, r5
   d7c0a:	4630      	mov	r0, r6
   d7c0c:	4798      	blx	r3
   d7c0e:	e00f      	b.n	d7c30 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7c10:	b124      	cbz	r4, d7c1c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7c12:	212e      	movs	r1, #46	; 0x2e
   d7c14:	4630      	mov	r0, r6
   d7c16:	f000 f9d5 	bl	d7fc4 <_ZN5Print5printEc>
   d7c1a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7c1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7c20:	220a      	movs	r2, #10
   d7c22:	4630      	mov	r0, r6
   d7c24:	f000 f9e7 	bl	d7ff6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7c28:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7c2a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7c2c:	d1f0      	bne.n	d7c10 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7c2e:	4620      	mov	r0, r4
    }
    return n;
}
   d7c30:	b00d      	add	sp, #52	; 0x34
   d7c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c34 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7c34:	b510      	push	{r4, lr}
   d7c36:	4b05      	ldr	r3, [pc, #20]	; (d7c4c <_ZN9IPAddressC1Ev+0x18>)
   d7c38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7c3a:	2211      	movs	r2, #17
   d7c3c:	f840 3b04 	str.w	r3, [r0], #4
   d7c40:	2100      	movs	r1, #0
   d7c42:	f002 f890 	bl	d9d66 <memset>
{
    clear();
}
   d7c46:	4620      	mov	r0, r4
   d7c48:	bd10      	pop	{r4, pc}
   d7c4a:	bf00      	nop
   d7c4c:	000dd730 	.word	0x000dd730

000d7c50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7c50:	4603      	mov	r3, r0
   d7c52:	4a07      	ldr	r2, [pc, #28]	; (d7c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7c54:	b510      	push	{r4, lr}
   d7c56:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7c5a:	f101 0210 	add.w	r2, r1, #16
   d7c5e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7c62:	f843 4b04 	str.w	r4, [r3], #4
   d7c66:	4291      	cmp	r1, r2
   d7c68:	d1f9      	bne.n	d7c5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7c6a:	780a      	ldrb	r2, [r1, #0]
   d7c6c:	701a      	strb	r2, [r3, #0]
}
   d7c6e:	bd10      	pop	{r4, pc}
   d7c70:	000dd730 	.word	0x000dd730

000d7c74 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7c74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7c76:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7c7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7c7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7c82:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7c86:	2304      	movs	r3, #4
   d7c88:	6041      	str	r1, [r0, #4]
   d7c8a:	7503      	strb	r3, [r0, #20]
   d7c8c:	bd10      	pop	{r4, pc}

000d7c8e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7c8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7c90:	780d      	ldrb	r5, [r1, #0]
   d7c92:	788b      	ldrb	r3, [r1, #2]
   d7c94:	784a      	ldrb	r2, [r1, #1]
   d7c96:	78c9      	ldrb	r1, [r1, #3]
   d7c98:	9100      	str	r1, [sp, #0]
   d7c9a:	4629      	mov	r1, r5
   d7c9c:	f7ff ffea 	bl	d7c74 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7ca0:	b003      	add	sp, #12
   d7ca2:	bd30      	pop	{r4, r5, pc}

000d7ca4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ca4:	4b01      	ldr	r3, [pc, #4]	; (d7cac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7ca6:	4a02      	ldr	r2, [pc, #8]	; (d7cb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7ca8:	601a      	str	r2, [r3, #0]
   d7caa:	4770      	bx	lr
   d7cac:	2003e284 	.word	0x2003e284
   d7cb0:	000dd7ac 	.word	0x000dd7ac

000d7cb4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7cb4:	2200      	movs	r2, #0
   d7cb6:	4611      	mov	r1, r2
   d7cb8:	6840      	ldr	r0, [r0, #4]
   d7cba:	f7ff b993 	b.w	d6fe4 <network_listening>

000d7cbe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7cbe:	2200      	movs	r2, #0
   d7cc0:	4611      	mov	r1, r2
   d7cc2:	6840      	ldr	r0, [r0, #4]
   d7cc4:	f7ff b99e 	b.w	d7004 <network_get_listen_timeout>

000d7cc8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7cc8:	2200      	movs	r2, #0
   d7cca:	6840      	ldr	r0, [r0, #4]
   d7ccc:	f7ff b992 	b.w	d6ff4 <network_set_listen_timeout>

000d7cd0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7cd0:	2200      	movs	r2, #0
   d7cd2:	f081 0101 	eor.w	r1, r1, #1
   d7cd6:	6840      	ldr	r0, [r0, #4]
   d7cd8:	f7ff b97c 	b.w	d6fd4 <network_listen>

000d7cdc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7cdc:	2300      	movs	r3, #0
   d7cde:	461a      	mov	r2, r3
   d7ce0:	2101      	movs	r1, #1
   d7ce2:	6840      	ldr	r0, [r0, #4]
   d7ce4:	f7ff b96e 	b.w	d6fc4 <network_off>

000d7ce8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7ce8:	2300      	movs	r3, #0
   d7cea:	461a      	mov	r2, r3
   d7cec:	4619      	mov	r1, r3
   d7cee:	6840      	ldr	r0, [r0, #4]
   d7cf0:	f7ff b960 	b.w	d6fb4 <network_on>

000d7cf4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7cf4:	2200      	movs	r2, #0
   d7cf6:	4611      	mov	r1, r2
   d7cf8:	6840      	ldr	r0, [r0, #4]
   d7cfa:	f7ff b953 	b.w	d6fa4 <network_ready>

000d7cfe <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7cfe:	2200      	movs	r2, #0
   d7d00:	4611      	mov	r1, r2
   d7d02:	6840      	ldr	r0, [r0, #4]
   d7d04:	f7ff b93e 	b.w	d6f84 <network_connecting>

000d7d08 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d08:	2200      	movs	r2, #0
   d7d0a:	2102      	movs	r1, #2
   d7d0c:	6840      	ldr	r0, [r0, #4]
   d7d0e:	f7ff b941 	b.w	d6f94 <network_disconnect>

000d7d12 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d12:	2300      	movs	r3, #0
   d7d14:	461a      	mov	r2, r3
   d7d16:	6840      	ldr	r0, [r0, #4]
   d7d18:	f7ff b92c 	b.w	d6f74 <network_connect>

000d7d1c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d1c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d1e:	4605      	mov	r5, r0
   d7d20:	b188      	cbz	r0, d7d46 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d22:	6804      	ldr	r4, [r0, #0]
   d7d24:	b14c      	cbz	r4, d7d3a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d26:	68a3      	ldr	r3, [r4, #8]
   d7d28:	b11b      	cbz	r3, d7d32 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d2a:	2203      	movs	r2, #3
   d7d2c:	4621      	mov	r1, r4
   d7d2e:	4620      	mov	r0, r4
   d7d30:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d32:	2110      	movs	r1, #16
   d7d34:	4620      	mov	r0, r4
   d7d36:	f000 ffb0 	bl	d8c9a <_ZdlPvj>
   d7d3a:	4628      	mov	r0, r5
   d7d3c:	2114      	movs	r1, #20
      }
   d7d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d42:	f000 bfaa 	b.w	d8c9a <_ZdlPvj>
   d7d46:	bd38      	pop	{r3, r4, r5, pc}

000d7d48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7d48:	b110      	cbz	r0, d7d50 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7d4a:	6803      	ldr	r3, [r0, #0]
   d7d4c:	685b      	ldr	r3, [r3, #4]
   d7d4e:	4718      	bx	r3
   d7d50:	4770      	bx	lr

000d7d52 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7d52:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7d54:	6803      	ldr	r3, [r0, #0]
   d7d56:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7d58:	b1bb      	cbz	r3, d7d8a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7d5a:	6858      	ldr	r0, [r3, #4]
   d7d5c:	f7fe fe50 	bl	d6a00 <os_thread_is_current>
   d7d60:	b978      	cbnz	r0, d7d82 <_ZN6ThreadD1Ev+0x30>
   d7d62:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7d64:	7c5a      	ldrb	r2, [r3, #17]
   d7d66:	b912      	cbnz	r2, d7d6e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7d68:	6858      	ldr	r0, [r3, #4]
   d7d6a:	f7fe fe51 	bl	d6a10 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d6e:	6823      	ldr	r3, [r4, #0]
   d7d70:	6858      	ldr	r0, [r3, #4]
   d7d72:	f7fe fe55 	bl	d6a20 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d76:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7d78:	2300      	movs	r3, #0
   d7d7a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7d7c:	b128      	cbz	r0, d7d8a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7d7e:	f7ff ffcd 	bl	d7d1c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d82:	6820      	ldr	r0, [r4, #0]
   d7d84:	b108      	cbz	r0, d7d8a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7d86:	f7ff ffc9 	bl	d7d1c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7d8a:	4620      	mov	r0, r4
   d7d8c:	bd10      	pop	{r4, pc}

000d7d8e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7d8e:	b538      	push	{r3, r4, r5, lr}
   d7d90:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d92:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7d96:	b108      	cbz	r0, d7d9c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7d98:	f7fc f983 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7d9c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7da0:	b108      	cbz	r0, d7da6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7da2:	f7fe fe4d 	bl	d6a40 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7da6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7daa:	b135      	cbz	r5, d7dba <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dac:	4628      	mov	r0, r5
   d7dae:	f7ff ffd0 	bl	d7d52 <_ZN6ThreadD1Ev>
   d7db2:	2104      	movs	r1, #4
   d7db4:	4628      	mov	r0, r5
   d7db6:	f000 ff70 	bl	d8c9a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7dba:	6820      	ldr	r0, [r4, #0]
   d7dbc:	b108      	cbz	r0, d7dc2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7dbe:	f7ff ffc3 	bl	d7d48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7dc2:	4620      	mov	r0, r4
   d7dc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7dc8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	4b04      	ldr	r3, [pc, #16]	; (d7ddc <_ZN5spark9MeshClassD1Ev+0x14>)
   d7dcc:	4604      	mov	r4, r0
   d7dce:	f840 3b08 	str.w	r3, [r0], #8
   d7dd2:	f7ff ffdc 	bl	d7d8e <_ZN5spark11MeshPublishD1Ev>
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	bd10      	pop	{r4, pc}
   d7dda:	bf00      	nop
   d7ddc:	000dd818 	.word	0x000dd818

000d7de0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7de0:	b538      	push	{r3, r4, r5, lr}
   d7de2:	4c0e      	ldr	r4, [pc, #56]	; (d7e1c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7de4:	4b0e      	ldr	r3, [pc, #56]	; (d7e20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7de6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7de8:	2500      	movs	r5, #0
   d7dea:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7dec:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7df0:	6063      	str	r3, [r4, #4]
   d7df2:	60a5      	str	r5, [r4, #8]
   d7df4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7df8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7dfc:	f7fe fe18 	bl	d6a30 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e00:	4b08      	ldr	r3, [pc, #32]	; (d7e24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e02:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e06:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e0a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e0c:	4620      	mov	r0, r4
   d7e0e:	4a06      	ldr	r2, [pc, #24]	; (d7e28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7e10:	4906      	ldr	r1, [pc, #24]	; (d7e2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7e16:	f000 bf3b 	b.w	d8c90 <__aeabi_atexit>
   d7e1a:	bf00      	nop
   d7e1c:	2003e288 	.word	0x2003e288
   d7e20:	000dd84c 	.word	0x000dd84c
   d7e24:	000dd818 	.word	0x000dd818
   d7e28:	2003e078 	.word	0x2003e078
   d7e2c:	000d7dc9 	.word	0x000d7dc9

000d7e30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7e30:	2300      	movs	r3, #0
   d7e32:	461a      	mov	r2, r3
   d7e34:	6840      	ldr	r0, [r0, #4]
   d7e36:	f7ff b89d 	b.w	d6f74 <network_connect>

000d7e3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7e3a:	2200      	movs	r2, #0
   d7e3c:	2102      	movs	r1, #2
   d7e3e:	6840      	ldr	r0, [r0, #4]
   d7e40:	f7ff b8a8 	b.w	d6f94 <network_disconnect>

000d7e44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7e44:	2200      	movs	r2, #0
   d7e46:	4611      	mov	r1, r2
   d7e48:	6840      	ldr	r0, [r0, #4]
   d7e4a:	f7ff b89b 	b.w	d6f84 <network_connecting>

000d7e4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7e4e:	2200      	movs	r2, #0
   d7e50:	4611      	mov	r1, r2
   d7e52:	6840      	ldr	r0, [r0, #4]
   d7e54:	f7ff b8a6 	b.w	d6fa4 <network_ready>

000d7e58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7e58:	2300      	movs	r3, #0
   d7e5a:	461a      	mov	r2, r3
   d7e5c:	4619      	mov	r1, r3
   d7e5e:	6840      	ldr	r0, [r0, #4]
   d7e60:	f7ff b8a8 	b.w	d6fb4 <network_on>

000d7e64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7e64:	2300      	movs	r3, #0
   d7e66:	461a      	mov	r2, r3
   d7e68:	4619      	mov	r1, r3
   d7e6a:	6840      	ldr	r0, [r0, #4]
   d7e6c:	f7ff b8aa 	b.w	d6fc4 <network_off>

000d7e70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7e70:	2200      	movs	r2, #0
   d7e72:	f081 0101 	eor.w	r1, r1, #1
   d7e76:	6840      	ldr	r0, [r0, #4]
   d7e78:	f7ff b8ac 	b.w	d6fd4 <network_listen>

000d7e7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7e7c:	2200      	movs	r2, #0
   d7e7e:	6840      	ldr	r0, [r0, #4]
   d7e80:	f7ff b8b8 	b.w	d6ff4 <network_set_listen_timeout>

000d7e84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7e84:	2200      	movs	r2, #0
   d7e86:	4611      	mov	r1, r2
   d7e88:	6840      	ldr	r0, [r0, #4]
   d7e8a:	f7ff b8bb 	b.w	d7004 <network_get_listen_timeout>

000d7e8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7e8e:	2200      	movs	r2, #0
   d7e90:	4611      	mov	r1, r2
   d7e92:	6840      	ldr	r0, [r0, #4]
   d7e94:	f7ff b8a6 	b.w	d6fe4 <network_listening>

000d7e98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e9c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e9e:	b095      	sub	sp, #84	; 0x54
   d7ea0:	4616      	mov	r6, r2
   d7ea2:	460d      	mov	r5, r1
   d7ea4:	4607      	mov	r7, r0
    IPAddress addr;
   d7ea6:	f7ff fec5 	bl	d7c34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7eaa:	4621      	mov	r1, r4
   d7eac:	2220      	movs	r2, #32
   d7eae:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7eb0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7eb2:	f001 ff58 	bl	d9d66 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7eb6:	2340      	movs	r3, #64	; 0x40
   d7eb8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7eba:	4621      	mov	r1, r4
   d7ebc:	466b      	mov	r3, sp
   d7ebe:	aa0c      	add	r2, sp, #48	; 0x30
   d7ec0:	4630      	mov	r0, r6
   d7ec2:	f7fe fed5 	bl	d6c70 <netdb_getaddrinfo>
    if (!r) {
   d7ec6:	4604      	mov	r4, r0
   d7ec8:	2800      	cmp	r0, #0
   d7eca:	d144      	bne.n	d7f56 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ecc:	4602      	mov	r2, r0
   d7ece:	2101      	movs	r1, #1
   d7ed0:	6868      	ldr	r0, [r5, #4]
   d7ed2:	f7ff f867 	bl	d6fa4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ed6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ed8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7eda:	4622      	mov	r2, r4
   d7edc:	6868      	ldr	r0, [r5, #4]
   d7ede:	f7ff f861 	bl	d6fa4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ee2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ee4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7ee6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ee8:	2e00      	cmp	r6, #0
   d7eea:	d034      	beq.n	d7f56 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7eec:	2900      	cmp	r1, #0
   d7eee:	d132      	bne.n	d7f56 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7ef0:	6873      	ldr	r3, [r6, #4]
   d7ef2:	2b02      	cmp	r3, #2
   d7ef4:	d002      	beq.n	d7efc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7ef6:	2b0a      	cmp	r3, #10
   d7ef8:	d009      	beq.n	d7f0e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7efa:	e02a      	b.n	d7f52 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7efc:	f1b8 0f00 	cmp.w	r8, #0
   d7f00:	d027      	beq.n	d7f52 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7f02:	6971      	ldr	r1, [r6, #20]
   d7f04:	4638      	mov	r0, r7
   d7f06:	3104      	adds	r1, #4
   d7f08:	f7ff fec1 	bl	d7c8e <_ZN9IPAddressaSEPKh>
   d7f0c:	e020      	b.n	d7f50 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7f0e:	f1b9 0f00 	cmp.w	r9, #0
   d7f12:	d01e      	beq.n	d7f52 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7f14:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7f16:	2211      	movs	r2, #17
   d7f18:	a801      	add	r0, sp, #4
   d7f1a:	f001 ff24 	bl	d9d66 <memset>
                    a.v = 6;
   d7f1e:	2306      	movs	r3, #6
   d7f20:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f24:	ad01      	add	r5, sp, #4
   d7f26:	f104 0308 	add.w	r3, r4, #8
   d7f2a:	3418      	adds	r4, #24
   d7f2c:	6818      	ldr	r0, [r3, #0]
   d7f2e:	6859      	ldr	r1, [r3, #4]
   d7f30:	462a      	mov	r2, r5
   d7f32:	c203      	stmia	r2!, {r0, r1}
   d7f34:	3308      	adds	r3, #8
   d7f36:	42a3      	cmp	r3, r4
   d7f38:	4615      	mov	r5, r2
   d7f3a:	d1f7      	bne.n	d7f2c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7f3c:	a901      	add	r1, sp, #4
   d7f3e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f40:	ad07      	add	r5, sp, #28
   d7f42:	f7ff fe85 	bl	d7c50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f48:	1d3c      	adds	r4, r7, #4
   d7f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f4c:	682b      	ldr	r3, [r5, #0]
   d7f4e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7f50:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f52:	69f6      	ldr	r6, [r6, #28]
   d7f54:	e7c8      	b.n	d7ee8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7f56:	9800      	ldr	r0, [sp, #0]
   d7f58:	f7fe fe82 	bl	d6c60 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7f5c:	4638      	mov	r0, r7
   d7f5e:	b015      	add	sp, #84	; 0x54
   d7f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7f64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7f64:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7f66:	4a03      	ldr	r2, [pc, #12]	; (d7f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7f68:	601a      	str	r2, [r3, #0]
   d7f6a:	2200      	movs	r2, #0
   d7f6c:	605a      	str	r2, [r3, #4]
   d7f6e:	4770      	bx	lr
   d7f70:	2003e45c 	.word	0x2003e45c
   d7f74:	000dd84c 	.word	0x000dd84c

000d7f78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f7a:	4606      	mov	r6, r0
   d7f7c:	460d      	mov	r5, r1
   d7f7e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7f80:	2400      	movs	r4, #0
  while (size--) {
   d7f82:	42bd      	cmp	r5, r7
   d7f84:	d00c      	beq.n	d7fa0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7f86:	6833      	ldr	r3, [r6, #0]
   d7f88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f8c:	689b      	ldr	r3, [r3, #8]
   d7f8e:	4630      	mov	r0, r6
   d7f90:	4798      	blx	r3
     if (chunk>=0)
   d7f92:	2800      	cmp	r0, #0
   d7f94:	db01      	blt.n	d7f9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7f96:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7f98:	e7f3      	b.n	d7f82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7f9a:	2c00      	cmp	r4, #0
   d7f9c:	bf08      	it	eq
   d7f9e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7fa0:	4620      	mov	r0, r4
   d7fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fa4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7fa4:	b570      	push	{r4, r5, r6, lr}
   d7fa6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7fa8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7faa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7fac:	b149      	cbz	r1, d7fc2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7fae:	f002 fe9b 	bl	dace8 <strlen>
   d7fb2:	682b      	ldr	r3, [r5, #0]
   d7fb4:	4602      	mov	r2, r0
   d7fb6:	4621      	mov	r1, r4
   d7fb8:	4628      	mov	r0, r5
   d7fba:	68db      	ldr	r3, [r3, #12]
    }
   d7fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7fc0:	4718      	bx	r3
    }
   d7fc2:	bd70      	pop	{r4, r5, r6, pc}

000d7fc4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7fc4:	6803      	ldr	r3, [r0, #0]
   d7fc6:	689b      	ldr	r3, [r3, #8]
   d7fc8:	4718      	bx	r3

000d7fca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7fca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7fcc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7fce:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7fd0:	f7ff fff8 	bl	d7fc4 <_ZN5Print5printEc>
  n += print('\n');
   d7fd4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7fd6:	4604      	mov	r4, r0
  n += print('\n');
   d7fd8:	4628      	mov	r0, r5
   d7fda:	f7ff fff3 	bl	d7fc4 <_ZN5Print5printEc>
  return n;
}
   d7fde:	4420      	add	r0, r4
   d7fe0:	bd38      	pop	{r3, r4, r5, pc}

000d7fe2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7fe2:	b538      	push	{r3, r4, r5, lr}
   d7fe4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7fe6:	f7ff ffdd 	bl	d7fa4 <_ZN5Print5writeEPKc>
   d7fea:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7fec:	4628      	mov	r0, r5
   d7fee:	f7ff ffec 	bl	d7fca <_ZN5Print7printlnEv>
  return n;
}
   d7ff2:	4420      	add	r0, r4
   d7ff4:	bd38      	pop	{r3, r4, r5, pc}

000d7ff6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7ff6:	b530      	push	{r4, r5, lr}
   d7ff8:	b08b      	sub	sp, #44	; 0x2c
   d7ffa:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7ffc:	2100      	movs	r1, #0
   d7ffe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8002:	2a01      	cmp	r2, #1
   d8004:	bf98      	it	ls
   d8006:	220a      	movls	r2, #10
   d8008:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d800c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8010:	fb05 3312 	mls	r3, r5, r2, r3
   d8014:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8018:	2b09      	cmp	r3, #9
   d801a:	bf94      	ite	ls
   d801c:	3330      	addls	r3, #48	; 0x30
   d801e:	3337      	addhi	r3, #55	; 0x37
   d8020:	b2db      	uxtb	r3, r3
   d8022:	4621      	mov	r1, r4
   d8024:	f804 3901 	strb.w	r3, [r4], #-1
   d8028:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d802a:	2d00      	cmp	r5, #0
   d802c:	d1ee      	bne.n	d800c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d802e:	f7ff ffb9 	bl	d7fa4 <_ZN5Print5writeEPKc>
}
   d8032:	b00b      	add	sp, #44	; 0x2c
   d8034:	bd30      	pop	{r4, r5, pc}

000d8036 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8036:	b510      	push	{r4, lr}
   d8038:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d803a:	f7ff f9b2 	bl	d73a2 <_ZNSt14_Function_baseD1Ev>
   d803e:	4620      	mov	r0, r4
   d8040:	bd10      	pop	{r4, pc}
	...

000d8044 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8044:	4803      	ldr	r0, [pc, #12]	; (d8054 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8046:	4a04      	ldr	r2, [pc, #16]	; (d8058 <_GLOBAL__sub_I_RGB+0x14>)
   d8048:	4904      	ldr	r1, [pc, #16]	; (d805c <_GLOBAL__sub_I_RGB+0x18>)
   d804a:	2300      	movs	r3, #0
   d804c:	6083      	str	r3, [r0, #8]
   d804e:	f000 be1f 	b.w	d8c90 <__aeabi_atexit>
   d8052:	bf00      	nop
   d8054:	2003e464 	.word	0x2003e464
   d8058:	2003e078 	.word	0x2003e078
   d805c:	000d8037 	.word	0x000d8037

000d8060 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d8060:	4770      	bx	lr

000d8062 <_ZN8SPIClassD0Ev>:
   d8062:	b510      	push	{r4, lr}
   d8064:	210c      	movs	r1, #12
   d8066:	4604      	mov	r4, r0
   d8068:	f000 fe17 	bl	d8c9a <_ZdlPvj>
   d806c:	4620      	mov	r0, r4
   d806e:	bd10      	pop	{r4, pc}

000d8070 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8070:	b510      	push	{r4, lr}
   d8072:	4b05      	ldr	r3, [pc, #20]	; (d8088 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d8074:	6003      	str	r3, [r0, #0]
   d8076:	4604      	mov	r4, r0
{
    _spi = spi;
   d8078:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d807a:	4608      	mov	r0, r1
   d807c:	f7fe fe00 	bl	d6c80 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8080:	2300      	movs	r3, #0
   d8082:	60a3      	str	r3, [r4, #8]
}
   d8084:	4620      	mov	r0, r4
   d8086:	bd10      	pop	{r4, pc}
   d8088:	000dd880 	.word	0x000dd880

000d808c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d808c:	7900      	ldrb	r0, [r0, #4]
   d808e:	f7fe bdff 	b.w	d6c90 <HAL_SPI_Is_Enabled>

000d8092 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8092:	b510      	push	{r4, lr}
   d8094:	4604      	mov	r4, r0
{
	free(buffer);
   d8096:	6800      	ldr	r0, [r0, #0]
   d8098:	f7fe ffc4 	bl	d7024 <free>
}
   d809c:	4620      	mov	r0, r4
   d809e:	bd10      	pop	{r4, pc}

000d80a0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d80a0:	b510      	push	{r4, lr}
   d80a2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d80a4:	6800      	ldr	r0, [r0, #0]
   d80a6:	b108      	cbz	r0, d80ac <_ZN6String10invalidateEv+0xc>
   d80a8:	f7fe ffbc 	bl	d7024 <free>
	buffer = NULL;
   d80ac:	2300      	movs	r3, #0
   d80ae:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d80b0:	60a3      	str	r3, [r4, #8]
   d80b2:	6063      	str	r3, [r4, #4]
   d80b4:	bd10      	pop	{r4, pc}

000d80b6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d80b6:	b538      	push	{r3, r4, r5, lr}
   d80b8:	4604      	mov	r4, r0
   d80ba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d80bc:	6800      	ldr	r0, [r0, #0]
   d80be:	3101      	adds	r1, #1
   d80c0:	f7fe ffb8 	bl	d7034 <realloc>
	if (newbuffer) {
   d80c4:	b110      	cbz	r0, d80cc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d80c6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d80ca:	2001      	movs	r0, #1
	}
	return 0;
}
   d80cc:	bd38      	pop	{r3, r4, r5, pc}

000d80ce <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d80ce:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d80d0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d80d2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d80d4:	b113      	cbz	r3, d80dc <_ZN6String7reserveEj+0xe>
   d80d6:	6843      	ldr	r3, [r0, #4]
   d80d8:	428b      	cmp	r3, r1
   d80da:	d207      	bcs.n	d80ec <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d80dc:	4620      	mov	r0, r4
   d80de:	f7ff ffea 	bl	d80b6 <_ZN6String12changeBufferEj>
   d80e2:	b120      	cbz	r0, d80ee <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d80e4:	68a3      	ldr	r3, [r4, #8]
   d80e6:	b90b      	cbnz	r3, d80ec <_ZN6String7reserveEj+0x1e>
   d80e8:	6822      	ldr	r2, [r4, #0]
   d80ea:	7013      	strb	r3, [r2, #0]
   d80ec:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d80ee:	bd10      	pop	{r4, pc}

000d80f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d80f0:	b570      	push	{r4, r5, r6, lr}
   d80f2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d80f4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d80f6:	4604      	mov	r4, r0
   d80f8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d80fa:	f7ff ffe8 	bl	d80ce <_ZN6String7reserveEj>
   d80fe:	b918      	cbnz	r0, d8108 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8100:	4620      	mov	r0, r4
   d8102:	f7ff ffcd 	bl	d80a0 <_ZN6String10invalidateEv>
		return *this;
   d8106:	e009      	b.n	d811c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8108:	462a      	mov	r2, r5
   d810a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d810c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d810e:	6820      	ldr	r0, [r4, #0]
   d8110:	f001 fe1e 	bl	d9d50 <memcpy>
	buffer[len] = 0;
   d8114:	6822      	ldr	r2, [r4, #0]
   d8116:	68a3      	ldr	r3, [r4, #8]
   d8118:	2100      	movs	r1, #0
   d811a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d811c:	4620      	mov	r0, r4
   d811e:	bd70      	pop	{r4, r5, r6, pc}

000d8120 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8120:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8122:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8124:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8126:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8128:	6043      	str	r3, [r0, #4]
	len = 0;
   d812a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d812c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d812e:	460d      	mov	r5, r1
   d8130:	b139      	cbz	r1, d8142 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8132:	4608      	mov	r0, r1
   d8134:	f002 fdd8 	bl	dace8 <strlen>
   d8138:	4629      	mov	r1, r5
   d813a:	4602      	mov	r2, r0
   d813c:	4620      	mov	r0, r4
   d813e:	f7ff ffd7 	bl	d80f0 <_ZN6String4copyEPKcj>
}
   d8142:	4620      	mov	r0, r4
   d8144:	bd38      	pop	{r3, r4, r5, pc}

000d8146 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8146:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8148:	b510      	push	{r4, lr}
   d814a:	460b      	mov	r3, r1
   d814c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d814e:	d007      	beq.n	d8160 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8150:	6809      	ldr	r1, [r1, #0]
   d8152:	b119      	cbz	r1, d815c <_ZN6StringaSERKS_+0x16>
   d8154:	689a      	ldr	r2, [r3, #8]
   d8156:	f7ff ffcb 	bl	d80f0 <_ZN6String4copyEPKcj>
   d815a:	e001      	b.n	d8160 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d815c:	f7ff ffa0 	bl	d80a0 <_ZN6String10invalidateEv>

	return *this;
}
   d8160:	4620      	mov	r0, r4
   d8162:	bd10      	pop	{r4, pc}

000d8164 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8164:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8166:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8168:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d816a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d816c:	6043      	str	r3, [r0, #4]
	len = 0;
   d816e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8170:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d8172:	f7ff ffe8 	bl	d8146 <_ZN6StringaSERKS_>
}
   d8176:	4620      	mov	r0, r4
   d8178:	bd10      	pop	{r4, pc}

000d817a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d817a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d817c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d817e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8180:	b912      	cbnz	r2, d8188 <_ZNK6String6equalsEPKc+0xe>
   d8182:	b919      	cbnz	r1, d818c <_ZNK6String6equalsEPKc+0x12>
   d8184:	2001      	movs	r0, #1
   d8186:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8188:	b911      	cbnz	r1, d8190 <_ZNK6String6equalsEPKc+0x16>
   d818a:	6803      	ldr	r3, [r0, #0]
   d818c:	7818      	ldrb	r0, [r3, #0]
   d818e:	e002      	b.n	d8196 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d8190:	6800      	ldr	r0, [r0, #0]
   d8192:	f002 f867 	bl	da264 <strcmp>
   d8196:	fab0 f080 	clz	r0, r0
   d819a:	0940      	lsrs	r0, r0, #5
}
   d819c:	bd08      	pop	{r3, pc}

000d819e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d819e:	b570      	push	{r4, r5, r6, lr}
   d81a0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d81a2:	b19a      	cbz	r2, d81cc <_ZNK6String8getBytesEPhjj+0x2e>
   d81a4:	b191      	cbz	r1, d81cc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d81a6:	6885      	ldr	r5, [r0, #8]
   d81a8:	429d      	cmp	r5, r3
   d81aa:	d802      	bhi.n	d81b2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d81ac:	2300      	movs	r3, #0
   d81ae:	700b      	strb	r3, [r1, #0]
		return;
   d81b0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d81b2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d81b4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d81b6:	6801      	ldr	r1, [r0, #0]
   d81b8:	42ac      	cmp	r4, r5
   d81ba:	bf28      	it	cs
   d81bc:	462c      	movcs	r4, r5
   d81be:	4419      	add	r1, r3
   d81c0:	4622      	mov	r2, r4
   d81c2:	4630      	mov	r0, r6
   d81c4:	f002 fdad 	bl	dad22 <strncpy>
	buf[n] = 0;
   d81c8:	2300      	movs	r3, #0
   d81ca:	5533      	strb	r3, [r6, r4]
   d81cc:	bd70      	pop	{r4, r5, r6, pc}

000d81ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d81ce:	b510      	push	{r4, lr}
   d81d0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d81d2:	6800      	ldr	r0, [r0, #0]
   d81d4:	b118      	cbz	r0, d81de <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d81d6:	f7fe ff25 	bl	d7024 <free>
            wakeupSource_ = nullptr;
   d81da:	2300      	movs	r3, #0
   d81dc:	6023      	str	r3, [r4, #0]
   d81de:	bd10      	pop	{r4, pc}

000d81e0 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d81e0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d81e2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d81e6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d81e8:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d81ea:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d81ec:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d81f0:	f8c0 2006 	str.w	r2, [r0, #6]
   d81f4:	889b      	ldrh	r3, [r3, #4]
   d81f6:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d81f8:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d81fa:	f7ff ffe8 	bl	d81ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d81fe:	682b      	ldr	r3, [r5, #0]
   d8200:	b113      	cbz	r3, d8208 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d8202:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8204:	2300      	movs	r3, #0
   d8206:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d8208:	4620      	mov	r0, r4
   d820a:	bd38      	pop	{r3, r4, r5, pc}

000d820c <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d820c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d8210:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d8212:	b90b      	cbnz	r3, d8218 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d8214:	680a      	ldr	r2, [r1, #0]
   d8216:	b19a      	cbz	r2, d8240 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d8218:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d821a:	b15c      	cbz	r4, d8234 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d821c:	88a2      	ldrh	r2, [r4, #4]
   d821e:	2a01      	cmp	r2, #1
   d8220:	d003      	beq.n	d822a <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d8222:	2a04      	cmp	r2, #4
   d8224:	d106      	bne.n	d8234 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d8226:	2202      	movs	r2, #2
   d8228:	e005      	b.n	d8236 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d822a:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d822c:	814c      	strh	r4, [r1, #10]
   d822e:	718a      	strb	r2, [r1, #6]
   d8230:	810b      	strh	r3, [r1, #8]
                    break;
   d8232:	e005      	b.n	d8240 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8234:	2204      	movs	r2, #4
   d8236:	810b      	strh	r3, [r1, #8]
   d8238:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d823c:	718a      	strb	r2, [r1, #6]
   d823e:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d8240:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8244:	6003      	str	r3, [r0, #0]
   d8246:	888b      	ldrh	r3, [r1, #4]
   d8248:	8083      	strh	r3, [r0, #4]
    }
   d824a:	bd10      	pop	{r4, pc}

000d824c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d824c:	b538      	push	{r3, r4, r5, lr}
   d824e:	460c      	mov	r4, r1
   d8250:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d8252:	f7ff ffbc 	bl	d81ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d8256:	b144      	cbz	r4, d826a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d8258:	8820      	ldrh	r0, [r4, #0]
   d825a:	f7fe fedb 	bl	d7014 <malloc>
   d825e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d8260:	b128      	cbz	r0, d826e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d8262:	8822      	ldrh	r2, [r4, #0]
   d8264:	4621      	mov	r1, r4
   d8266:	f001 fd73 	bl	d9d50 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d826a:	2000      	movs	r0, #0
   d826c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d826e:	4801      	ldr	r0, [pc, #4]	; (d8274 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d8270:	bd38      	pop	{r3, r4, r5, pc}
   d8272:	bf00      	nop
   d8274:	fffffefc 	.word	0xfffffefc

000d8278 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d8278:	4601      	mov	r1, r0
   d827a:	2200      	movs	r2, #0
   d827c:	208c      	movs	r0, #140	; 0x8c
   d827e:	f7fe bbef 	b.w	d6a60 <HAL_Core_System_Reset_Ex>

000d8282 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d8282:	2000      	movs	r0, #0
   d8284:	f7ff bff8 	b.w	d8278 <_ZN11SystemClass5resetEm>

000d8288 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d8288:	b5f0      	push	{r4, r5, r6, r7, lr}
   d828a:	4d30      	ldr	r5, [pc, #192]	; (d834c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d828c:	7d0b      	ldrb	r3, [r1, #20]
   d828e:	4604      	mov	r4, r0
   d8290:	b08b      	sub	sp, #44	; 0x2c
   d8292:	4608      	mov	r0, r1
   d8294:	1daf      	adds	r7, r5, #6
   d8296:	b313      	cbz	r3, d82de <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d8298:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d829a:	791b      	ldrb	r3, [r3, #4]
   d829c:	b1fb      	cbz	r3, d82de <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d829e:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d82a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d82a4:	a902      	add	r1, sp, #8
   d82a6:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d82a8:	9202      	str	r2, [sp, #8]
   d82aa:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d82ae:	f88d 200e 	strb.w	r2, [sp, #14]
   d82b2:	f8ad 2010 	strh.w	r2, [sp, #16]
   d82b6:	f8ad 3012 	strh.w	r3, [sp, #18]
   d82ba:	f7fe fde9 	bl	d6e90 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d82be:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d82c0:	b200      	sxth	r0, r0
   d82c2:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d82c6:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d82ca:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d82cc:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d82ce:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d82d2:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d82d4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d82d6:	4628      	mov	r0, r5
   d82d8:	f7ff ffb8 	bl	d824c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d82dc:	e01c      	b.n	d8318 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d82de:	2320      	movs	r3, #32
   d82e0:	2600      	movs	r6, #0
   d82e2:	9302      	str	r3, [sp, #8]
   d82e4:	4b1a      	ldr	r3, [pc, #104]	; (d8350 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d82e6:	9300      	str	r3, [sp, #0]
   d82e8:	491a      	ldr	r1, [pc, #104]	; (d8354 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d82ea:	9603      	str	r6, [sp, #12]
   d82ec:	4633      	mov	r3, r6
   d82ee:	2032      	movs	r0, #50	; 0x32
   d82f0:	aa02      	add	r2, sp, #8
   d82f2:	f7fe fd4d 	bl	d6d90 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d82f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d82fa:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d82fe:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d8300:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d8304:	4811      	ldr	r0, [pc, #68]	; (d834c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8306:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8308:	f88d 600e 	strb.w	r6, [sp, #14]
   d830c:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d8310:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8314:	f7ff ff64 	bl	d81e0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8318:	a802      	add	r0, sp, #8
   d831a:	f7ff ff58 	bl	d81ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d831e:	2300      	movs	r3, #0
   d8320:	6023      	str	r3, [r4, #0]
   d8322:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8324:	71a3      	strb	r3, [r4, #6]
   d8326:	8123      	strh	r3, [r4, #8]
   d8328:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d832c:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d832e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d8332:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d8334:	683b      	ldr	r3, [r7, #0]
   d8336:	f8c4 3006 	str.w	r3, [r4, #6]
   d833a:	88bb      	ldrh	r3, [r7, #4]
   d833c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d833e:	6829      	ldr	r1, [r5, #0]
   d8340:	4620      	mov	r0, r4
   d8342:	f7ff ff83 	bl	d824c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d8346:	4620      	mov	r0, r4
   d8348:	b00b      	add	sp, #44	; 0x2c
   d834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d834c:	2003e474 	.word	0x2003e474
   d8350:	000dd88f 	.word	0x000dd88f
   d8354:	000dd888 	.word	0x000dd888

000d8358 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d8358:	b530      	push	{r4, r5, lr}
   d835a:	4604      	mov	r4, r0
   d835c:	b085      	sub	sp, #20
   d835e:	4608      	mov	r0, r1
   d8360:	4611      	mov	r1, r2
   d8362:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d8364:	2300      	movs	r3, #0
   d8366:	f7fe fd45 	bl	d6df4 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d836a:	4d0d      	ldr	r5, [pc, #52]	; (d83a0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d836c:	f8ad 000c 	strh.w	r0, [sp, #12]
   d8370:	2300      	movs	r3, #0
   d8372:	a901      	add	r1, sp, #4
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	f8ad 3008 	strh.w	r3, [sp, #8]
   d837a:	f88d 300a 	strb.w	r3, [sp, #10]
   d837e:	4628      	mov	r0, r5
   d8380:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8384:	f8ad 300e 	strh.w	r3, [sp, #14]
   d8388:	f7ff ff2a 	bl	d81e0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d838c:	a801      	add	r0, sp, #4
   d838e:	f7ff ff1e 	bl	d81ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d8392:	4620      	mov	r0, r4
   d8394:	4629      	mov	r1, r5
   d8396:	f7ff ff39 	bl	d820c <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d839a:	4620      	mov	r0, r4
   d839c:	b005      	add	sp, #20
   d839e:	bd30      	pop	{r4, r5, pc}
   d83a0:	2003e474 	.word	0x2003e474

000d83a4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d83a4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d83a6:	4c09      	ldr	r4, [pc, #36]	; (d83cc <_GLOBAL__sub_I_System+0x28>)
   d83a8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d83aa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d83ae:	6020      	str	r0, [r4, #0]
   d83b0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d83b2:	71a0      	strb	r0, [r4, #6]
   d83b4:	8120      	strh	r0, [r4, #8]
   d83b6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d83b8:	f7fe fd0c 	bl	d6dd4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d83bc:	4620      	mov	r0, r4
   d83be:	4a04      	ldr	r2, [pc, #16]	; (d83d0 <_GLOBAL__sub_I_System+0x2c>)
   d83c0:	4904      	ldr	r1, [pc, #16]	; (d83d4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d83c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d83c6:	f000 bc63 	b.w	d8c90 <__aeabi_atexit>
   d83ca:	bf00      	nop
   d83cc:	2003e474 	.word	0x2003e474
   d83d0:	2003e078 	.word	0x2003e078
   d83d4:	000d4241 	.word	0x000d4241

000d83d8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d83d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d83da:	4b14      	ldr	r3, [pc, #80]	; (d842c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d83dc:	4f14      	ldr	r7, [pc, #80]	; (d8430 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d83de:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d83e0:	4b14      	ldr	r3, [pc, #80]	; (d8434 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d83e2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d83e4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d83e6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d83e8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d83ea:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d83ec:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d83ee:	d01b      	beq.n	d8428 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d83f0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d83f2:	ad01      	add	r5, sp, #4
   d83f4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d83f8:	f001 fbae 	bl	d9b58 <localtime>
	calendar_time->tm_year += 1900;
   d83fc:	6943      	ldr	r3, [r0, #20]
   d83fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8402:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8404:	4604      	mov	r4, r0
   d8406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d840a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d840c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d840e:	f8d4 e000 	ldr.w	lr, [r4]
   d8412:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8416:	ad01      	add	r5, sp, #4
   d8418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d841a:	4c07      	ldr	r4, [pc, #28]	; (d8438 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d841c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d841e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8422:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8424:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8428:	b00b      	add	sp, #44	; 0x2c
   d842a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d842c:	2003e4b0 	.word	0x2003e4b0
   d8430:	2003e4ac 	.word	0x2003e4ac
   d8434:	2003e4a8 	.word	0x2003e4a8
   d8438:	2003e480 	.word	0x2003e480

000d843c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d843c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d843e:	2000      	movs	r0, #0
   d8440:	f7fe fd80 	bl	d6f44 <spark_sync_time_pending>
   d8444:	b128      	cbz	r0, d8452 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8446:	f7fe fd55 	bl	d6ef4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d844a:	f080 0001 	eor.w	r0, r0, #1
   d844e:	b2c0      	uxtb	r0, r0
   d8450:	bd08      	pop	{r3, pc}
   d8452:	2001      	movs	r0, #1
    }
   d8454:	bd08      	pop	{r3, pc}
	...

000d8458 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d8458:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d845a:	f7ff ffbd 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d845e:	4b01      	ldr	r3, [pc, #4]	; (d8464 <_ZN9TimeClass4hourEl+0xc>)
   d8460:	6898      	ldr	r0, [r3, #8]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	2003e480 	.word	0x2003e480

000d8468 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d8468:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d846a:	f7ff ffb5 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d846e:	4b01      	ldr	r3, [pc, #4]	; (d8474 <_ZN9TimeClass3dayEl+0xc>)
   d8470:	68d8      	ldr	r0, [r3, #12]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	2003e480 	.word	0x2003e480

000d8478 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d8478:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d847a:	f7ff ffad 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d847e:	4b02      	ldr	r3, [pc, #8]	; (d8488 <_ZN9TimeClass7weekdayEl+0x10>)
   d8480:	6998      	ldr	r0, [r3, #24]
}
   d8482:	3001      	adds	r0, #1
   d8484:	bd08      	pop	{r3, pc}
   d8486:	bf00      	nop
   d8488:	2003e480 	.word	0x2003e480

000d848c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d848c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d848e:	f7ff ffa3 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d8492:	4b02      	ldr	r3, [pc, #8]	; (d849c <_ZN9TimeClass5monthEl+0x10>)
   d8494:	6918      	ldr	r0, [r3, #16]
}
   d8496:	3001      	adds	r0, #1
   d8498:	bd08      	pop	{r3, pc}
   d849a:	bf00      	nop
   d849c:	2003e480 	.word	0x2003e480

000d84a0 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d84a0:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d84a2:	f7fe fb05 	bl	d6ab0 <HAL_RTC_Get_UnixTime>
   d84a6:	4b03      	ldr	r3, [pc, #12]	; (d84b4 <_ZN9TimeClass5localEv+0x14>)
   d84a8:	681b      	ldr	r3, [r3, #0]
   d84aa:	4418      	add	r0, r3
   d84ac:	4b02      	ldr	r3, [pc, #8]	; (d84b8 <_ZN9TimeClass5localEv+0x18>)
   d84ae:	681b      	ldr	r3, [r3, #0]
}
   d84b0:	4418      	add	r0, r3
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	2003e4b0 	.word	0x2003e4b0
   d84b8:	2003e4a8 	.word	0x2003e4a8

000d84bc <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d84bc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d84c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d84c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84c8:	d40f      	bmi.n	d84ea <_ZN9TimeClass4zoneEf+0x2e>
   d84ca:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d84ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d84d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84d6:	dc08      	bgt.n	d84ea <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d84d8:	eddf 7a04 	vldr	s15, [pc, #16]	; d84ec <_ZN9TimeClass4zoneEf+0x30>
   d84dc:	4b04      	ldr	r3, [pc, #16]	; (d84f0 <_ZN9TimeClass4zoneEf+0x34>)
   d84de:	ee20 0a27 	vmul.f32	s0, s0, s15
   d84e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d84e6:	ed83 0a00 	vstr	s0, [r3]
   d84ea:	4770      	bx	lr
   d84ec:	45610000 	.word	0x45610000
   d84f0:	2003e4b0 	.word	0x2003e4b0

000d84f4 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d84f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d84f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d84fc:	d40f      	bmi.n	d851e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d84fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d8502:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d850a:	dc08      	bgt.n	d851e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d850c:	eddf 7a04 	vldr	s15, [pc, #16]	; d8520 <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d8510:	4b04      	ldr	r3, [pc, #16]	; (d8524 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d8512:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8516:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d851a:	ed83 0a00 	vstr	s0, [r3]
   d851e:	4770      	bx	lr
   d8520:	45610000 	.word	0x45610000
   d8524:	2003df84 	.word	0x2003df84

000d8528 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d8528:	4b02      	ldr	r3, [pc, #8]	; (d8534 <_ZN9TimeClass8beginDSTEv+0xc>)
   d852a:	681a      	ldr	r2, [r3, #0]
   d852c:	4b02      	ldr	r3, [pc, #8]	; (d8538 <_ZN9TimeClass8beginDSTEv+0x10>)
   d852e:	601a      	str	r2, [r3, #0]
   d8530:	4770      	bx	lr
   d8532:	bf00      	nop
   d8534:	2003df84 	.word	0x2003df84
   d8538:	2003e4a8 	.word	0x2003e4a8

000d853c <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d853c:	4b01      	ldr	r3, [pc, #4]	; (d8544 <_ZN9TimeClass6endDSTEv+0x8>)
   d853e:	2200      	movs	r2, #0
   d8540:	601a      	str	r2, [r3, #0]
   d8542:	4770      	bx	lr
   d8544:	2003e4a8 	.word	0x2003e4a8

000d8548 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8548:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d854a:	f7fe fab9 	bl	d6ac0 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d854e:	2200      	movs	r2, #0
   d8550:	4611      	mov	r1, r2
   d8552:	4610      	mov	r0, r2
}
   d8554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8558:	f7fe bc74 	b.w	d6e44 <system_notify_time_changed>

000d855c <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d855c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d855e:	4b0e      	ldr	r3, [pc, #56]	; (d8598 <_ZN9TimeClass7timeStrEl+0x3c>)
   d8560:	681b      	ldr	r3, [r3, #0]
   d8562:	4419      	add	r1, r3
   d8564:	4b0d      	ldr	r3, [pc, #52]	; (d859c <_ZN9TimeClass7timeStrEl+0x40>)
   d8566:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8568:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d856a:	a802      	add	r0, sp, #8
   d856c:	4419      	add	r1, r3
   d856e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d8572:	f001 faf1 	bl	d9b58 <localtime>
        char* ascstr = asctime(calendar_time);
   d8576:	f001 f9f7 	bl	d9968 <asctime>
   d857a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d857c:	f002 fbb4 	bl	dace8 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d8580:	4428      	add	r0, r5
   d8582:	2300      	movs	r3, #0
   d8584:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d8588:	4629      	mov	r1, r5
   d858a:	4620      	mov	r0, r4
   d858c:	f7ff fdc8 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8590:	4620      	mov	r0, r4
   d8592:	b003      	add	sp, #12
   d8594:	bd30      	pop	{r4, r5, pc}
   d8596:	bf00      	nop
   d8598:	2003e4b0 	.word	0x2003e4b0
   d859c:	2003e4a8 	.word	0x2003e4a8

000d85a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d85a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d85a4:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d85a6:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d85a8:	4607      	mov	r7, r0
   d85aa:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d85ac:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d85ae:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d85b0:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d85b2:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d85b4:	f002 fbb5 	bl	dad22 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d85b8:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d85ba:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d85bc:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d85c0:	f002 fb92 	bl	dace8 <strlen>
   d85c4:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d85c6:	b925      	cbnz	r5, d85d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d85c8:	4924      	ldr	r1, [pc, #144]	; (d865c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d85ca:	a803      	add	r0, sp, #12
   d85cc:	f001 fe54 	bl	da278 <strcpy>
   d85d0:	e013      	b.n	d85fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d85d2:	213c      	movs	r1, #60	; 0x3c
   d85d4:	fb95 f2f1 	sdiv	r2, r5, r1
   d85d8:	2a00      	cmp	r2, #0
   d85da:	bfb8      	it	lt
   d85dc:	4252      	neglt	r2, r2
   d85de:	fb92 f3f1 	sdiv	r3, r2, r1
   d85e2:	fb01 2213 	mls	r2, r1, r3, r2
   d85e6:	9200      	str	r2, [sp, #0]
   d85e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d85ec:	4a1c      	ldr	r2, [pc, #112]	; (d8660 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d85ee:	fb95 f3f3 	sdiv	r3, r5, r3
   d85f2:	2110      	movs	r1, #16
   d85f4:	a803      	add	r0, sp, #12
   d85f6:	f7fe fd35 	bl	d7064 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d85fa:	4625      	mov	r5, r4
   d85fc:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d85fe:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d8602:	45b2      	cmp	sl, r6
   d8604:	d91b      	bls.n	d863e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8606:	782b      	ldrb	r3, [r5, #0]
   d8608:	2b25      	cmp	r3, #37	; 0x25
   d860a:	d116      	bne.n	d863a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d860c:	786b      	ldrb	r3, [r5, #1]
   d860e:	2b7a      	cmp	r3, #122	; 0x7a
   d8610:	d113      	bne.n	d863a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d8612:	a803      	add	r0, sp, #12
   d8614:	f002 fb68 	bl	dace8 <strlen>
   d8618:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d861a:	4430      	add	r0, r6
   d861c:	ebc6 020a 	rsb	r2, r6, sl
   d8620:	1ca9      	adds	r1, r5, #2
   d8622:	4420      	add	r0, r4
   d8624:	f001 fb94 	bl	d9d50 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8628:	4642      	mov	r2, r8
   d862a:	a903      	add	r1, sp, #12
   d862c:	4628      	mov	r0, r5
   d862e:	f001 fb8f 	bl	d9d50 <memcpy>
            len = strlen(format_str);
   d8632:	4620      	mov	r0, r4
   d8634:	f002 fb58 	bl	dace8 <strlen>
   d8638:	4680      	mov	r8, r0
   d863a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d863c:	e7de      	b.n	d85fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d863e:	464b      	mov	r3, r9
   d8640:	4622      	mov	r2, r4
   d8642:	2132      	movs	r1, #50	; 0x32
   d8644:	a807      	add	r0, sp, #28
   d8646:	f001 fe9b 	bl	da380 <strftime>
    return String(buf);
   d864a:	a907      	add	r1, sp, #28
   d864c:	4638      	mov	r0, r7
   d864e:	f7ff fd67 	bl	d8120 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8652:	4638      	mov	r0, r7
   d8654:	b024      	add	sp, #144	; 0x90
   d8656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d865a:	bf00      	nop
   d865c:	000ddead 	.word	0x000ddead
   d8660:	000dd8b6 	.word	0x000dd8b6

000d8664 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d8664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8666:	4605      	mov	r5, r0
   d8668:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d866a:	461c      	mov	r4, r3
   d866c:	b913      	cbnz	r3, d8674 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d866e:	4b12      	ldr	r3, [pc, #72]	; (d86b8 <_ZN9TimeClass6formatElPKc+0x54>)
   d8670:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d8672:	b12c      	cbz	r4, d8680 <_ZN9TimeClass6formatElPKc+0x1c>
   d8674:	4b11      	ldr	r3, [pc, #68]	; (d86bc <_ZN9TimeClass6formatElPKc+0x58>)
   d8676:	4620      	mov	r0, r4
   d8678:	6819      	ldr	r1, [r3, #0]
   d867a:	f001 fdf3 	bl	da264 <strcmp>
   d867e:	b920      	cbnz	r0, d868a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d8680:	9901      	ldr	r1, [sp, #4]
   d8682:	4628      	mov	r0, r5
   d8684:	f7ff ff6a 	bl	d855c <_ZN9TimeClass7timeStrEl>
   d8688:	e013      	b.n	d86b2 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d868a:	4f0d      	ldr	r7, [pc, #52]	; (d86c0 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d868c:	9a01      	ldr	r2, [sp, #4]
   d868e:	683b      	ldr	r3, [r7, #0]
   d8690:	4e0c      	ldr	r6, [pc, #48]	; (d86c4 <_ZN9TimeClass6formatElPKc+0x60>)
   d8692:	441a      	add	r2, r3
   d8694:	6833      	ldr	r3, [r6, #0]
   d8696:	a802      	add	r0, sp, #8
   d8698:	4413      	add	r3, r2
   d869a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d869e:	f001 fa5b 	bl	d9b58 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d86a2:	683a      	ldr	r2, [r7, #0]
   d86a4:	6833      	ldr	r3, [r6, #0]
   d86a6:	4601      	mov	r1, r0
   d86a8:	4413      	add	r3, r2
   d86aa:	4628      	mov	r0, r5
   d86ac:	4622      	mov	r2, r4
   d86ae:	f7ff ff77 	bl	d85a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d86b2:	4628      	mov	r0, r5
   d86b4:	b003      	add	sp, #12
   d86b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d86b8:	2003e4a4 	.word	0x2003e4a4
   d86bc:	2003df88 	.word	0x2003df88
   d86c0:	2003e4b0 	.word	0x2003e4b0
   d86c4:	2003e4a8 	.word	0x2003e4a8

000d86c8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d86c8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d86ca:	2000      	movs	r0, #0
   d86cc:	f7fe fa00 	bl	d6ad0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d86d0:	4604      	mov	r4, r0
   d86d2:	b968      	cbnz	r0, d86f0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d86d4:	f7fe fb76 	bl	d6dc4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d86d8:	2801      	cmp	r0, #1
   d86da:	d10b      	bne.n	d86f4 <_ZN9TimeClass7isValidEv+0x2c>
   d86dc:	4620      	mov	r0, r4
   d86de:	f7fe fba9 	bl	d6e34 <system_thread_get_state>
   d86e2:	b938      	cbnz	r0, d86f4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d86e4:	f7ff feaa 	bl	d843c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d86e8:	b930      	cbnz	r0, d86f8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d86ea:	f7fe fbeb 	bl	d6ec4 <spark_process>
   d86ee:	e7f9      	b.n	d86e4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d86f0:	2001      	movs	r0, #1
   d86f2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d86f4:	2000      	movs	r0, #0
   d86f6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d86f8:	f7ff fea0 	bl	d843c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d86fc:	2000      	movs	r0, #0
   d86fe:	f7fe f9e7 	bl	d6ad0 <HAL_RTC_Time_Is_Valid>
   d8702:	3000      	adds	r0, #0
   d8704:	bf18      	it	ne
   d8706:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8708:	bd10      	pop	{r4, pc}

000d870a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d870a:	b508      	push	{r3, lr}
    (void)isValid();
   d870c:	f7ff ffdc 	bl	d86c8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8710:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8714:	f7fe b9cc 	b.w	d6ab0 <HAL_RTC_Get_UnixTime>

000d8718 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8718:	b508      	push	{r3, lr}
	return hour(now());
   d871a:	f7ff fff6 	bl	d870a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d871e:	f7ff fe5b 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d8722:	4b01      	ldr	r3, [pc, #4]	; (d8728 <_ZN9TimeClass4hourEv+0x10>)
   d8724:	6898      	ldr	r0, [r3, #8]
   d8726:	bd08      	pop	{r3, pc}
   d8728:	2003e480 	.word	0x2003e480

000d872c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d872c:	b508      	push	{r3, lr}
	return minute(now());
   d872e:	f7ff ffec 	bl	d870a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8732:	f7ff fe51 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d8736:	4b01      	ldr	r3, [pc, #4]	; (d873c <_ZN9TimeClass6minuteEv+0x10>)
   d8738:	6858      	ldr	r0, [r3, #4]
   d873a:	bd08      	pop	{r3, pc}
   d873c:	2003e480 	.word	0x2003e480

000d8740 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8740:	b508      	push	{r3, lr}
	return day(now());
   d8742:	f7ff ffe2 	bl	d870a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8746:	f7ff fe47 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d874a:	4b01      	ldr	r3, [pc, #4]	; (d8750 <_ZN9TimeClass3dayEv+0x10>)
   d874c:	68d8      	ldr	r0, [r3, #12]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	2003e480 	.word	0x2003e480

000d8754 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d8754:	b508      	push	{r3, lr}
	return weekday(now());
   d8756:	f7ff ffd8 	bl	d870a <_ZN9TimeClass3nowEv>
}
   d875a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d875e:	f7ff be8b 	b.w	d8478 <_ZN9TimeClass7weekdayEl>

000d8762 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d8762:	b508      	push	{r3, lr}
	return month(now());
   d8764:	f7ff ffd1 	bl	d870a <_ZN9TimeClass3nowEv>
}
   d8768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d876c:	f7ff be8e 	b.w	d848c <_ZN9TimeClass5monthEl>

000d8770 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d8770:	b508      	push	{r3, lr}
	return year(now());
   d8772:	f7ff ffca 	bl	d870a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8776:	f7ff fe2f 	bl	d83d8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d877a:	4b01      	ldr	r3, [pc, #4]	; (d8780 <_ZN9TimeClass4yearEv+0x10>)
   d877c:	6958      	ldr	r0, [r3, #20]
   d877e:	bd08      	pop	{r3, pc}
   d8780:	2003e480 	.word	0x2003e480

000d8784 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8784:	4b02      	ldr	r3, [pc, #8]	; (d8790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8786:	681a      	ldr	r2, [r3, #0]
   d8788:	4b02      	ldr	r3, [pc, #8]	; (d8794 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d878a:	601a      	str	r2, [r3, #0]
   d878c:	4770      	bx	lr
   d878e:	bf00      	nop
   d8790:	2003df88 	.word	0x2003df88
   d8794:	2003e4a4 	.word	0x2003e4a4

000d8798 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8798:	4770      	bx	lr

000d879a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d879a:	7441      	strb	r1, [r0, #17]
   d879c:	4770      	bx	lr

000d879e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d879e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d87a0:	7c00      	ldrb	r0, [r0, #16]
   d87a2:	f7fe fab5 	bl	d6d10 <HAL_USART_Available_Data_For_Write>
}
   d87a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d87aa:	bd08      	pop	{r3, pc}

000d87ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d87ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d87ae:	7c00      	ldrb	r0, [r0, #16]
   d87b0:	f7fe fa86 	bl	d6cc0 <HAL_USART_Available_Data>
}
   d87b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d87b8:	bd08      	pop	{r3, pc}

000d87ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d87ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d87bc:	7c00      	ldrb	r0, [r0, #16]
   d87be:	f7fe fa8f 	bl	d6ce0 <HAL_USART_Peek_Data>
}
   d87c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d87c6:	bf28      	it	cs
   d87c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d87cc:	bd08      	pop	{r3, pc}

000d87ce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d87ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d87d0:	7c00      	ldrb	r0, [r0, #16]
   d87d2:	f7fe fa7d 	bl	d6cd0 <HAL_USART_Read_Data>
}
   d87d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d87da:	bf28      	it	cs
   d87dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d87e0:	bd08      	pop	{r3, pc}

000d87e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d87e2:	7c00      	ldrb	r0, [r0, #16]
   d87e4:	f7fe ba84 	b.w	d6cf0 <HAL_USART_Flush_Data>

000d87e8 <_ZN11USARTSerialD0Ev>:
   d87e8:	b510      	push	{r4, lr}
   d87ea:	2114      	movs	r1, #20
   d87ec:	4604      	mov	r4, r0
   d87ee:	f000 fa54 	bl	d8c9a <_ZdlPvj>
   d87f2:	4620      	mov	r0, r4
   d87f4:	bd10      	pop	{r4, pc}

000d87f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d87f6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d87f8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d87fa:	4604      	mov	r4, r0
   d87fc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d87fe:	b925      	cbnz	r5, d880a <_ZN11USARTSerial5writeEh+0x14>
   d8800:	7c00      	ldrb	r0, [r0, #16]
   d8802:	f7fe fa85 	bl	d6d10 <HAL_USART_Available_Data_For_Write>
   d8806:	2800      	cmp	r0, #0
   d8808:	dd05      	ble.n	d8816 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d880a:	4631      	mov	r1, r6
   d880c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d880e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8812:	f7fe ba4d 	b.w	d6cb0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8816:	4628      	mov	r0, r5
   d8818:	bd70      	pop	{r4, r5, r6, pc}
	...

000d881c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d881c:	b510      	push	{r4, lr}
   d881e:	4604      	mov	r4, r0
   d8820:	4608      	mov	r0, r1
   d8822:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8824:	2200      	movs	r2, #0
   d8826:	6062      	str	r2, [r4, #4]
   d8828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d882c:	60a2      	str	r2, [r4, #8]
   d882e:	4a05      	ldr	r2, [pc, #20]	; (d8844 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8830:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8832:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8834:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8836:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8838:	461a      	mov	r2, r3
   d883a:	f7fe fa31 	bl	d6ca0 <HAL_USART_Init>
}
   d883e:	4620      	mov	r0, r4
   d8840:	bd10      	pop	{r4, pc}
   d8842:	bf00      	nop
   d8844:	000dd8e8 	.word	0x000dd8e8

000d8848 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8848:	7c00      	ldrb	r0, [r0, #16]
   d884a:	f7fe ba59 	b.w	d6d00 <HAL_USART_Is_Enabled>
	...

000d8850 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8850:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8852:	4d0c      	ldr	r5, [pc, #48]	; (d8884 <_Z22__fetch_global_Serial1v+0x34>)
   d8854:	6829      	ldr	r1, [r5, #0]
   d8856:	f011 0401 	ands.w	r4, r1, #1
   d885a:	d111      	bne.n	d8880 <_Z22__fetch_global_Serial1v+0x30>
   d885c:	4628      	mov	r0, r5
   d885e:	f7fb fc22 	bl	d40a6 <__cxa_guard_acquire>
   d8862:	b168      	cbz	r0, d8880 <_Z22__fetch_global_Serial1v+0x30>
   d8864:	4a08      	ldr	r2, [pc, #32]	; (d8888 <_Z22__fetch_global_Serial1v+0x38>)
   d8866:	4b09      	ldr	r3, [pc, #36]	; (d888c <_Z22__fetch_global_Serial1v+0x3c>)
   d8868:	4809      	ldr	r0, [pc, #36]	; (d8890 <_Z22__fetch_global_Serial1v+0x40>)
   d886a:	4621      	mov	r1, r4
   d886c:	f7ff ffd6 	bl	d881c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8870:	4628      	mov	r0, r5
   d8872:	f7fb fc1d 	bl	d40b0 <__cxa_guard_release>
   d8876:	4a07      	ldr	r2, [pc, #28]	; (d8894 <_Z22__fetch_global_Serial1v+0x44>)
   d8878:	4907      	ldr	r1, [pc, #28]	; (d8898 <_Z22__fetch_global_Serial1v+0x48>)
   d887a:	4805      	ldr	r0, [pc, #20]	; (d8890 <_Z22__fetch_global_Serial1v+0x40>)
   d887c:	f000 fa08 	bl	d8c90 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8880:	4803      	ldr	r0, [pc, #12]	; (d8890 <_Z22__fetch_global_Serial1v+0x40>)
   d8882:	bd38      	pop	{r3, r4, r5, pc}
   d8884:	2003e550 	.word	0x2003e550
   d8888:	2003e554 	.word	0x2003e554
   d888c:	2003e4cc 	.word	0x2003e4cc
   d8890:	2003e4b8 	.word	0x2003e4b8
   d8894:	2003e078 	.word	0x2003e078
   d8898:	000d8799 	.word	0x000d8799

000d889c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d889c:	7441      	strb	r1, [r0, #17]
   d889e:	4770      	bx	lr

000d88a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d88a0:	4770      	bx	lr

000d88a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d88a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d88a4:	2100      	movs	r1, #0
   d88a6:	7c00      	ldrb	r0, [r0, #16]
   d88a8:	f7fe fa52 	bl	d6d50 <HAL_USB_USART_Receive_Data>
}
   d88ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d88b0:	bf28      	it	cs
   d88b2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d88b6:	bd08      	pop	{r3, pc}

000d88b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d88b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d88ba:	2101      	movs	r1, #1
   d88bc:	7c00      	ldrb	r0, [r0, #16]
   d88be:	f7fe fa47 	bl	d6d50 <HAL_USB_USART_Receive_Data>
}
   d88c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d88c6:	bf28      	it	cs
   d88c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d88cc:	bd08      	pop	{r3, pc}

000d88ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d88ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d88d0:	7c00      	ldrb	r0, [r0, #16]
   d88d2:	f7fe fa35 	bl	d6d40 <HAL_USB_USART_Available_Data_For_Write>
}
   d88d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88da:	bd08      	pop	{r3, pc}

000d88dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d88dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d88de:	7c00      	ldrb	r0, [r0, #16]
   d88e0:	f7fe fa26 	bl	d6d30 <HAL_USB_USART_Available_Data>
}
   d88e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88e8:	bd08      	pop	{r3, pc}

000d88ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d88ea:	7c00      	ldrb	r0, [r0, #16]
   d88ec:	f7fe ba40 	b.w	d6d70 <HAL_USB_USART_Flush_Data>

000d88f0 <_ZN9USBSerialD0Ev>:
   d88f0:	b510      	push	{r4, lr}
   d88f2:	2114      	movs	r1, #20
   d88f4:	4604      	mov	r4, r0
   d88f6:	f000 f9d0 	bl	d8c9a <_ZdlPvj>
   d88fa:	4620      	mov	r0, r4
   d88fc:	bd10      	pop	{r4, pc}

000d88fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d88fe:	b538      	push	{r3, r4, r5, lr}
   d8900:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8902:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8904:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8906:	f7fe fa1b 	bl	d6d40 <HAL_USB_USART_Available_Data_For_Write>
   d890a:	2800      	cmp	r0, #0
   d890c:	dc01      	bgt.n	d8912 <_ZN9USBSerial5writeEh+0x14>
   d890e:	7c60      	ldrb	r0, [r4, #17]
   d8910:	b128      	cbz	r0, d891e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8912:	4629      	mov	r1, r5
   d8914:	7c20      	ldrb	r0, [r4, #16]
   d8916:	f7fe fa23 	bl	d6d60 <HAL_USB_USART_Send_Data>
   d891a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d891e:	bd38      	pop	{r3, r4, r5, pc}

000d8920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8920:	b510      	push	{r4, lr}
   d8922:	4604      	mov	r4, r0
   d8924:	2300      	movs	r3, #0
   d8926:	6063      	str	r3, [r4, #4]
   d8928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d892c:	60a3      	str	r3, [r4, #8]
   d892e:	4b05      	ldr	r3, [pc, #20]	; (d8944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8930:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8932:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8934:	4608      	mov	r0, r1
{
  _serial = serial;
   d8936:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8938:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d893a:	4611      	mov	r1, r2
   d893c:	f7fe f9f0 	bl	d6d20 <HAL_USB_USART_Init>
}
   d8940:	4620      	mov	r0, r4
   d8942:	bd10      	pop	{r4, pc}
   d8944:	000dd918 	.word	0x000dd918

000d8948 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8948:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d894a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d894c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d894e:	2100      	movs	r1, #0
   d8950:	f001 fa09 	bl	d9d66 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8954:	4620      	mov	r0, r4
   d8956:	bd10      	pop	{r4, pc}

000d8958 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8958:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d895a:	4d0e      	ldr	r5, [pc, #56]	; (d8994 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d895c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d895e:	a801      	add	r0, sp, #4
   d8960:	f7ff fff2 	bl	d8948 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8964:	6829      	ldr	r1, [r5, #0]
   d8966:	f011 0401 	ands.w	r4, r1, #1
   d896a:	d110      	bne.n	d898e <_Z16_fetch_usbserialv+0x36>
   d896c:	4628      	mov	r0, r5
   d896e:	f7fb fb9a 	bl	d40a6 <__cxa_guard_acquire>
   d8972:	b160      	cbz	r0, d898e <_Z16_fetch_usbserialv+0x36>
   d8974:	aa01      	add	r2, sp, #4
   d8976:	4621      	mov	r1, r4
   d8978:	4807      	ldr	r0, [pc, #28]	; (d8998 <_Z16_fetch_usbserialv+0x40>)
   d897a:	f7ff ffd1 	bl	d8920 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d897e:	4628      	mov	r0, r5
   d8980:	f7fb fb96 	bl	d40b0 <__cxa_guard_release>
   d8984:	4a05      	ldr	r2, [pc, #20]	; (d899c <_Z16_fetch_usbserialv+0x44>)
   d8986:	4906      	ldr	r1, [pc, #24]	; (d89a0 <_Z16_fetch_usbserialv+0x48>)
   d8988:	4803      	ldr	r0, [pc, #12]	; (d8998 <_Z16_fetch_usbserialv+0x40>)
   d898a:	f000 f981 	bl	d8c90 <__aeabi_atexit>
	return _usbserial;
}
   d898e:	4802      	ldr	r0, [pc, #8]	; (d8998 <_Z16_fetch_usbserialv+0x40>)
   d8990:	b007      	add	sp, #28
   d8992:	bd30      	pop	{r4, r5, pc}
   d8994:	2003e5d8 	.word	0x2003e5d8
   d8998:	2003e5dc 	.word	0x2003e5dc
   d899c:	2003e078 	.word	0x2003e078
   d89a0:	000d88a1 	.word	0x000d88a1

000d89a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d89a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d89a6:	4b0c      	ldr	r3, [pc, #48]	; (d89d8 <serialEventRun+0x34>)
   d89a8:	b133      	cbz	r3, d89b8 <serialEventRun+0x14>
   d89aa:	f7ff ffd5 	bl	d8958 <_Z16_fetch_usbserialv>
   d89ae:	6803      	ldr	r3, [r0, #0]
   d89b0:	691b      	ldr	r3, [r3, #16]
   d89b2:	4798      	blx	r3
   d89b4:	2800      	cmp	r0, #0
   d89b6:	dc09      	bgt.n	d89cc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d89b8:	4b08      	ldr	r3, [pc, #32]	; (d89dc <serialEventRun+0x38>)
   d89ba:	b163      	cbz	r3, d89d6 <serialEventRun+0x32>
   d89bc:	f7ff ff48 	bl	d8850 <_Z22__fetch_global_Serial1v>
   d89c0:	6803      	ldr	r3, [r0, #0]
   d89c2:	691b      	ldr	r3, [r3, #16]
   d89c4:	4798      	blx	r3
   d89c6:	2800      	cmp	r0, #0
   d89c8:	dc03      	bgt.n	d89d2 <serialEventRun+0x2e>
   d89ca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d89cc:	f3af 8000 	nop.w
   d89d0:	e7f2      	b.n	d89b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d89d2:	f3af 8000 	nop.w
   d89d6:	bd08      	pop	{r3, pc}
	...

000d89e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d89e0:	b508      	push	{r3, lr}
	serialEventRun();
   d89e2:	f7ff ffdf 	bl	d89a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d89e6:	f7fe f85b 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d89ea:	4b01      	ldr	r3, [pc, #4]	; (d89f0 <_post_loop+0x10>)
   d89ec:	6018      	str	r0, [r3, #0]
   d89ee:	bd08      	pop	{r3, pc}
   d89f0:	2003e5f8 	.word	0x2003e5f8

000d89f4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d89f4:	4802      	ldr	r0, [pc, #8]	; (d8a00 <_Z33system_initialize_user_backup_ramv+0xc>)
   d89f6:	4a03      	ldr	r2, [pc, #12]	; (d8a04 <_Z33system_initialize_user_backup_ramv+0x10>)
   d89f8:	4903      	ldr	r1, [pc, #12]	; (d8a08 <_Z33system_initialize_user_backup_ramv+0x14>)
   d89fa:	1a12      	subs	r2, r2, r0
   d89fc:	f001 b9a8 	b.w	d9d50 <memcpy>
   d8a00:	2003f400 	.word	0x2003f400
   d8a04:	2003f404 	.word	0x2003f404
   d8a08:	000de030 	.word	0x000de030

000d8a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8a0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8a0e:	2300      	movs	r3, #0
   d8a10:	9300      	str	r3, [sp, #0]
   d8a12:	461a      	mov	r2, r3
   d8a14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8a18:	f7fe fa26 	bl	d6e68 <system_ctrl_set_result>
}
   d8a1c:	b003      	add	sp, #12
   d8a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8a24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8a24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8a26:	8843      	ldrh	r3, [r0, #2]
   d8a28:	2b0a      	cmp	r3, #10
   d8a2a:	d008      	beq.n	d8a3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8a2c:	2b50      	cmp	r3, #80	; 0x50
   d8a2e:	d109      	bne.n	d8a44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8a30:	4b09      	ldr	r3, [pc, #36]	; (d8a58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8a32:	681b      	ldr	r3, [r3, #0]
   d8a34:	b13b      	cbz	r3, d8a46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8a36:	b003      	add	sp, #12
   d8a38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8a3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8a3e:	f7ff ffe5 	bl	d8a0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8a42:	e006      	b.n	d8a52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8a44:	2300      	movs	r3, #0
   d8a46:	9300      	str	r3, [sp, #0]
   d8a48:	461a      	mov	r2, r3
   d8a4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8a4e:	f7fe fa0b 	bl	d6e68 <system_ctrl_set_result>
        break;
    }
}
   d8a52:	b003      	add	sp, #12
   d8a54:	f85d fb04 	ldr.w	pc, [sp], #4
   d8a58:	2003e5f0 	.word	0x2003e5f0

000d8a5c <module_user_init_hook>:

void module_user_init_hook()
{
   d8a5c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8a5e:	4c10      	ldr	r4, [pc, #64]	; (d8aa0 <module_user_init_hook+0x44>)
   d8a60:	4d10      	ldr	r5, [pc, #64]	; (d8aa4 <module_user_init_hook+0x48>)
   d8a62:	6823      	ldr	r3, [r4, #0]
   d8a64:	42ab      	cmp	r3, r5
   d8a66:	4b10      	ldr	r3, [pc, #64]	; (d8aa8 <module_user_init_hook+0x4c>)
   d8a68:	bf0c      	ite	eq
   d8a6a:	2201      	moveq	r2, #1
   d8a6c:	2200      	movne	r2, #0
   d8a6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8a70:	d002      	beq.n	d8a78 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8a72:	f7ff ffbf 	bl	d89f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8a76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8a78:	f7fe f802 	bl	d6a80 <HAL_RNG_GetRandomNumber>
   d8a7c:	4604      	mov	r4, r0
    srand(seed);
   d8a7e:	f001 fbc9 	bl	da214 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8a82:	4b0a      	ldr	r3, [pc, #40]	; (d8aac <module_user_init_hook+0x50>)
   d8a84:	b113      	cbz	r3, d8a8c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8a86:	4620      	mov	r0, r4
   d8a88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8a8c:	2100      	movs	r1, #0
   d8a8e:	4807      	ldr	r0, [pc, #28]	; (d8aac <module_user_init_hook+0x50>)
   d8a90:	f7fe fa68 	bl	d6f64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8a94:	2100      	movs	r1, #0
   d8a96:	4806      	ldr	r0, [pc, #24]	; (d8ab0 <module_user_init_hook+0x54>)
}
   d8a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8a9c:	f7fe b9da 	b.w	d6e54 <system_ctrl_set_app_request_handler>
   d8aa0:	2003f400 	.word	0x2003f400
   d8aa4:	9a271c1e 	.word	0x9a271c1e
   d8aa8:	2003e5f4 	.word	0x2003e5f4
   d8aac:	00000000 	.word	0x00000000
   d8ab0:	000d8a25 	.word	0x000d8a25

000d8ab4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8ab4:	b508      	push	{r3, lr}
   d8ab6:	4b02      	ldr	r3, [pc, #8]	; (d8ac0 <spark_protocol_instance+0xc>)
   d8ab8:	681b      	ldr	r3, [r3, #0]
   d8aba:	681b      	ldr	r3, [r3, #0]
   d8abc:	9301      	str	r3, [sp, #4]
   d8abe:	bd08      	pop	{r3, pc}
   d8ac0:	0003025c 	.word	0x0003025c

000d8ac4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8ac4:	b508      	push	{r3, lr}
   d8ac6:	4b02      	ldr	r3, [pc, #8]	; (d8ad0 <spark_protocol_set_product_id+0xc>)
   d8ac8:	681b      	ldr	r3, [r3, #0]
   d8aca:	685b      	ldr	r3, [r3, #4]
   d8acc:	9301      	str	r3, [sp, #4]
   d8ace:	bd08      	pop	{r3, pc}
   d8ad0:	0003025c 	.word	0x0003025c

000d8ad4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d8ad4:	b508      	push	{r3, lr}
   d8ad6:	4b02      	ldr	r3, [pc, #8]	; (d8ae0 <spark_protocol_set_product_firmware_version+0xc>)
   d8ad8:	681b      	ldr	r3, [r3, #0]
   d8ada:	689b      	ldr	r3, [r3, #8]
   d8adc:	9301      	str	r3, [sp, #4]
   d8ade:	bd08      	pop	{r3, pc}
   d8ae0:	0003025c 	.word	0x0003025c

000d8ae4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8ae4:	b510      	push	{r4, lr}
   d8ae6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8ae8:	f000 f8b2 	bl	d8c50 <_ZN8particle7globals11instanceSpiEv>
   d8aec:	f7ff face 	bl	d808c <_ZN8SPIClass9isEnabledEv>
   d8af0:	b128      	cbz	r0, d8afe <pinAvailable+0x1a>
   d8af2:	f1a4 030b 	sub.w	r3, r4, #11
   d8af6:	2b02      	cmp	r3, #2
   d8af8:	d801      	bhi.n	d8afe <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d8afa:	2000      	movs	r0, #0
   d8afc:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8afe:	f000 f881 	bl	d8c04 <_Z19__fetch_global_Wirev>
   d8b02:	f7ff f804 	bl	d7b0e <_ZN7TwoWire9isEnabledEv>
   d8b06:	b108      	cbz	r0, d8b0c <pinAvailable+0x28>
   d8b08:	2c01      	cmp	r4, #1
   d8b0a:	d9f6      	bls.n	d8afa <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8b0c:	f7ff fea0 	bl	d8850 <_Z22__fetch_global_Serial1v>
   d8b10:	f7ff fe9a 	bl	d8848 <_ZN11USARTSerial9isEnabledEv>
   d8b14:	b118      	cbz	r0, d8b1e <pinAvailable+0x3a>
   d8b16:	f1a4 0309 	sub.w	r3, r4, #9
   d8b1a:	2b01      	cmp	r3, #1
   d8b1c:	d9ed      	bls.n	d8afa <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8b1e:	2c23      	cmp	r4, #35	; 0x23
   d8b20:	bf8c      	ite	hi
   d8b22:	2000      	movhi	r0, #0
   d8b24:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8b26:	bd10      	pop	{r4, pc}

000d8b28 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b28:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8b2a:	b538      	push	{r3, r4, r5, lr}
   d8b2c:	4604      	mov	r4, r0
   d8b2e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8b30:	d80a      	bhi.n	d8b48 <pinMode+0x20>
   d8b32:	29ff      	cmp	r1, #255	; 0xff
   d8b34:	d008      	beq.n	d8b48 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8b36:	f7ff ffd5 	bl	d8ae4 <pinAvailable>
   d8b3a:	b128      	cbz	r0, d8b48 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8b3c:	4629      	mov	r1, r5
   d8b3e:	4620      	mov	r0, r4
}
   d8b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8b44:	f7fd bfe4 	b.w	d6b10 <HAL_Pin_Mode>
   d8b48:	bd38      	pop	{r3, r4, r5, pc}

000d8b4a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8b4a:	b538      	push	{r3, r4, r5, lr}
   d8b4c:	4604      	mov	r4, r0
   d8b4e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8b50:	f7fd ffe6 	bl	d6b20 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8b54:	28ff      	cmp	r0, #255	; 0xff
   d8b56:	d010      	beq.n	d8b7a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8b58:	2806      	cmp	r0, #6
   d8b5a:	d804      	bhi.n	d8b66 <digitalWrite+0x1c>
   d8b5c:	234d      	movs	r3, #77	; 0x4d
   d8b5e:	fa23 f000 	lsr.w	r0, r3, r0
   d8b62:	07c3      	lsls	r3, r0, #31
   d8b64:	d409      	bmi.n	d8b7a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8b66:	4620      	mov	r0, r4
   d8b68:	f7ff ffbc 	bl	d8ae4 <pinAvailable>
   d8b6c:	b128      	cbz	r0, d8b7a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8b6e:	4629      	mov	r1, r5
   d8b70:	4620      	mov	r0, r4
}
   d8b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8b76:	f7fd bfdb 	b.w	d6b30 <HAL_GPIO_Write>
   d8b7a:	bd38      	pop	{r3, r4, r5, pc}

000d8b7c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8b7c:	b510      	push	{r4, lr}
   d8b7e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8b80:	f7fd ffce 	bl	d6b20 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8b84:	3804      	subs	r0, #4
   d8b86:	b2c0      	uxtb	r0, r0
   d8b88:	2801      	cmp	r0, #1
   d8b8a:	d908      	bls.n	d8b9e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8b8c:	4620      	mov	r0, r4
   d8b8e:	f7ff ffa9 	bl	d8ae4 <pinAvailable>
   d8b92:	b120      	cbz	r0, d8b9e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8b94:	4620      	mov	r0, r4
}
   d8b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8b9a:	f7fd bfd1 	b.w	d6b40 <HAL_GPIO_Read>
}
   d8b9e:	2000      	movs	r0, #0
   d8ba0:	bd10      	pop	{r4, pc}

000d8ba2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8ba2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8ba4:	b510      	push	{r4, lr}
   d8ba6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8ba8:	bf9c      	itt	ls
   d8baa:	340e      	addls	r4, #14
   d8bac:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8bae:	4620      	mov	r0, r4
   d8bb0:	f7ff ff98 	bl	d8ae4 <pinAvailable>
   d8bb4:	b150      	cbz	r0, d8bcc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8bb6:	2103      	movs	r1, #3
   d8bb8:	4620      	mov	r0, r4
   d8bba:	f7fd ffa1 	bl	d6b00 <HAL_Validate_Pin_Function>
   d8bbe:	2803      	cmp	r0, #3
   d8bc0:	d104      	bne.n	d8bcc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8bc2:	4620      	mov	r0, r4
}
   d8bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8bc8:	f7fd bfd2 	b.w	d6b70 <HAL_ADC_Read>
}
   d8bcc:	2000      	movs	r0, #0
   d8bce:	bd10      	pop	{r4, pc}

000d8bd0 <_Z17acquireWireBufferv>:
   d8bd0:	b570      	push	{r4, r5, r6, lr}
   d8bd2:	4604      	mov	r4, r0
   d8bd4:	2514      	movs	r5, #20
   d8bd6:	462a      	mov	r2, r5
   d8bd8:	4e09      	ldr	r6, [pc, #36]	; (d8c00 <_Z17acquireWireBufferv+0x30>)
   d8bda:	2100      	movs	r1, #0
   d8bdc:	f001 f8c3 	bl	d9d66 <memset>
   d8be0:	8025      	strh	r5, [r4, #0]
   d8be2:	2520      	movs	r5, #32
   d8be4:	4631      	mov	r1, r6
   d8be6:	60a5      	str	r5, [r4, #8]
   d8be8:	6125      	str	r5, [r4, #16]
   d8bea:	4628      	mov	r0, r5
   d8bec:	f000 f86f 	bl	d8cce <_ZnajRKSt9nothrow_t>
   d8bf0:	4631      	mov	r1, r6
   d8bf2:	6060      	str	r0, [r4, #4]
   d8bf4:	4628      	mov	r0, r5
   d8bf6:	f000 f86a 	bl	d8cce <_ZnajRKSt9nothrow_t>
   d8bfa:	60e0      	str	r0, [r4, #12]
   d8bfc:	4620      	mov	r0, r4
   d8bfe:	bd70      	pop	{r4, r5, r6, pc}
   d8c00:	000dd940 	.word	0x000dd940

000d8c04 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8c04:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c06:	4d0e      	ldr	r5, [pc, #56]	; (d8c40 <_Z19__fetch_global_Wirev+0x3c>)
   d8c08:	6829      	ldr	r1, [r5, #0]
   d8c0a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8c0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8c10:	d113      	bne.n	d8c3a <_Z19__fetch_global_Wirev+0x36>
   d8c12:	4628      	mov	r0, r5
   d8c14:	f7fb fa47 	bl	d40a6 <__cxa_guard_acquire>
   d8c18:	b178      	cbz	r0, d8c3a <_Z19__fetch_global_Wirev+0x36>
   d8c1a:	a801      	add	r0, sp, #4
   d8c1c:	f7ff ffd8 	bl	d8bd0 <_Z17acquireWireBufferv>
   d8c20:	aa01      	add	r2, sp, #4
   d8c22:	4621      	mov	r1, r4
   d8c24:	4807      	ldr	r0, [pc, #28]	; (d8c44 <_Z19__fetch_global_Wirev+0x40>)
   d8c26:	f7fe ff21 	bl	d7a6c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8c2a:	4628      	mov	r0, r5
   d8c2c:	f7fb fa40 	bl	d40b0 <__cxa_guard_release>
   d8c30:	4a05      	ldr	r2, [pc, #20]	; (d8c48 <_Z19__fetch_global_Wirev+0x44>)
   d8c32:	4906      	ldr	r1, [pc, #24]	; (d8c4c <_Z19__fetch_global_Wirev+0x48>)
   d8c34:	4803      	ldr	r0, [pc, #12]	; (d8c44 <_Z19__fetch_global_Wirev+0x40>)
   d8c36:	f000 f82b 	bl	d8c90 <__aeabi_atexit>
	return wire;
}
   d8c3a:	4802      	ldr	r0, [pc, #8]	; (d8c44 <_Z19__fetch_global_Wirev+0x40>)
   d8c3c:	b007      	add	sp, #28
   d8c3e:	bd30      	pop	{r4, r5, pc}
   d8c40:	2003e5fc 	.word	0x2003e5fc
   d8c44:	2003e600 	.word	0x2003e600
   d8c48:	2003e078 	.word	0x2003e078
   d8c4c:	000d7a15 	.word	0x000d7a15

000d8c50 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d8c50:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d8c52:	4d0b      	ldr	r5, [pc, #44]	; (d8c80 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d8c54:	6829      	ldr	r1, [r5, #0]
   d8c56:	f011 0401 	ands.w	r4, r1, #1
   d8c5a:	d10f      	bne.n	d8c7c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8c5c:	4628      	mov	r0, r5
   d8c5e:	f7fb fa22 	bl	d40a6 <__cxa_guard_acquire>
   d8c62:	b158      	cbz	r0, d8c7c <_ZN8particle7globals11instanceSpiEv+0x2c>
   d8c64:	4621      	mov	r1, r4
   d8c66:	4807      	ldr	r0, [pc, #28]	; (d8c84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8c68:	f7ff fa02 	bl	d8070 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8c6c:	4628      	mov	r0, r5
   d8c6e:	f7fb fa1f 	bl	d40b0 <__cxa_guard_release>
   d8c72:	4a05      	ldr	r2, [pc, #20]	; (d8c88 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d8c74:	4905      	ldr	r1, [pc, #20]	; (d8c8c <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d8c76:	4803      	ldr	r0, [pc, #12]	; (d8c84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8c78:	f000 f80a 	bl	d8c90 <__aeabi_atexit>
    return instance;
}
   d8c7c:	4801      	ldr	r0, [pc, #4]	; (d8c84 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d8c7e:	bd38      	pop	{r3, r4, r5, pc}
   d8c80:	2003e620 	.word	0x2003e620
   d8c84:	2003e614 	.word	0x2003e614
   d8c88:	2003e078 	.word	0x2003e078
   d8c8c:	000d8061 	.word	0x000d8061

000d8c90 <__aeabi_atexit>:
   d8c90:	460b      	mov	r3, r1
   d8c92:	4601      	mov	r1, r0
   d8c94:	4618      	mov	r0, r3
   d8c96:	f000 bea7 	b.w	d99e8 <__cxa_atexit>

000d8c9a <_ZdlPvj>:
   d8c9a:	f7fb ba00 	b.w	d409e <_ZdlPv>
	...

000d8ca0 <_ZSt15get_new_handlerv>:
   d8ca0:	4b02      	ldr	r3, [pc, #8]	; (d8cac <_ZSt15get_new_handlerv+0xc>)
   d8ca2:	6818      	ldr	r0, [r3, #0]
   d8ca4:	f3bf 8f5f 	dmb	sy
   d8ca8:	4770      	bx	lr
   d8caa:	bf00      	nop
   d8cac:	2003e624 	.word	0x2003e624

000d8cb0 <_ZnwjRKSt9nothrow_t>:
   d8cb0:	b510      	push	{r4, lr}
   d8cb2:	2800      	cmp	r0, #0
   d8cb4:	bf14      	ite	ne
   d8cb6:	4604      	movne	r4, r0
   d8cb8:	2401      	moveq	r4, #1
   d8cba:	4620      	mov	r0, r4
   d8cbc:	f7fe f9aa 	bl	d7014 <malloc>
   d8cc0:	b920      	cbnz	r0, d8ccc <_ZnwjRKSt9nothrow_t+0x1c>
   d8cc2:	f7ff ffed 	bl	d8ca0 <_ZSt15get_new_handlerv>
   d8cc6:	b108      	cbz	r0, d8ccc <_ZnwjRKSt9nothrow_t+0x1c>
   d8cc8:	4780      	blx	r0
   d8cca:	e7f6      	b.n	d8cba <_ZnwjRKSt9nothrow_t+0xa>
   d8ccc:	bd10      	pop	{r4, pc}

000d8cce <_ZnajRKSt9nothrow_t>:
   d8cce:	f7ff bfef 	b.w	d8cb0 <_ZnwjRKSt9nothrow_t>

000d8cd2 <_ZSt25__throw_bad_function_callv>:
   d8cd2:	b508      	push	{r3, lr}
   d8cd4:	f7fe f9d6 	bl	d7084 <abort>

000d8cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8cd8:	4b24      	ldr	r3, [pc, #144]	; (d8d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8cda:	681a      	ldr	r2, [r3, #0]
   d8cdc:	07d0      	lsls	r0, r2, #31
   d8cde:	bf5c      	itt	pl
   d8ce0:	2201      	movpl	r2, #1
   d8ce2:	601a      	strpl	r2, [r3, #0]
   d8ce4:	4b22      	ldr	r3, [pc, #136]	; (d8d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8ce6:	681a      	ldr	r2, [r3, #0]
   d8ce8:	07d1      	lsls	r1, r2, #31
   d8cea:	bf5c      	itt	pl
   d8cec:	2201      	movpl	r2, #1
   d8cee:	601a      	strpl	r2, [r3, #0]
   d8cf0:	4b20      	ldr	r3, [pc, #128]	; (d8d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8cf2:	681a      	ldr	r2, [r3, #0]
   d8cf4:	07d2      	lsls	r2, r2, #31
   d8cf6:	bf5c      	itt	pl
   d8cf8:	2201      	movpl	r2, #1
   d8cfa:	601a      	strpl	r2, [r3, #0]
   d8cfc:	4b1e      	ldr	r3, [pc, #120]	; (d8d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8cfe:	681a      	ldr	r2, [r3, #0]
   d8d00:	07d0      	lsls	r0, r2, #31
   d8d02:	bf5c      	itt	pl
   d8d04:	2201      	movpl	r2, #1
   d8d06:	601a      	strpl	r2, [r3, #0]
   d8d08:	4b1c      	ldr	r3, [pc, #112]	; (d8d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8d0a:	681a      	ldr	r2, [r3, #0]
   d8d0c:	07d1      	lsls	r1, r2, #31
   d8d0e:	bf5c      	itt	pl
   d8d10:	2201      	movpl	r2, #1
   d8d12:	601a      	strpl	r2, [r3, #0]
   d8d14:	4b1a      	ldr	r3, [pc, #104]	; (d8d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8d16:	681a      	ldr	r2, [r3, #0]
   d8d18:	07d2      	lsls	r2, r2, #31
   d8d1a:	bf5c      	itt	pl
   d8d1c:	2201      	movpl	r2, #1
   d8d1e:	601a      	strpl	r2, [r3, #0]
   d8d20:	4b18      	ldr	r3, [pc, #96]	; (d8d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8d22:	681a      	ldr	r2, [r3, #0]
   d8d24:	07d0      	lsls	r0, r2, #31
   d8d26:	bf5c      	itt	pl
   d8d28:	2201      	movpl	r2, #1
   d8d2a:	601a      	strpl	r2, [r3, #0]
   d8d2c:	4b16      	ldr	r3, [pc, #88]	; (d8d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8d2e:	681a      	ldr	r2, [r3, #0]
   d8d30:	07d1      	lsls	r1, r2, #31
   d8d32:	bf5c      	itt	pl
   d8d34:	2201      	movpl	r2, #1
   d8d36:	601a      	strpl	r2, [r3, #0]
   d8d38:	4b14      	ldr	r3, [pc, #80]	; (d8d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8d3a:	681a      	ldr	r2, [r3, #0]
   d8d3c:	07d2      	lsls	r2, r2, #31
   d8d3e:	bf5c      	itt	pl
   d8d40:	2201      	movpl	r2, #1
   d8d42:	601a      	strpl	r2, [r3, #0]
   d8d44:	4b12      	ldr	r3, [pc, #72]	; (d8d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8d46:	681a      	ldr	r2, [r3, #0]
   d8d48:	07d0      	lsls	r0, r2, #31
   d8d4a:	bf5c      	itt	pl
   d8d4c:	2201      	movpl	r2, #1
   d8d4e:	601a      	strpl	r2, [r3, #0]
   d8d50:	4b10      	ldr	r3, [pc, #64]	; (d8d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8d52:	681a      	ldr	r2, [r3, #0]
   d8d54:	07d1      	lsls	r1, r2, #31
   d8d56:	bf5c      	itt	pl
   d8d58:	2201      	movpl	r2, #1
   d8d5a:	601a      	strpl	r2, [r3, #0]
   d8d5c:	4b0e      	ldr	r3, [pc, #56]	; (d8d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8d5e:	681a      	ldr	r2, [r3, #0]
   d8d60:	07d2      	lsls	r2, r2, #31
   d8d62:	bf5c      	itt	pl
   d8d64:	2201      	movpl	r2, #1
   d8d66:	601a      	strpl	r2, [r3, #0]
   d8d68:	4770      	bx	lr
   d8d6a:	bf00      	nop
   d8d6c:	2003e654 	.word	0x2003e654
   d8d70:	2003e650 	.word	0x2003e650
   d8d74:	2003e64c 	.word	0x2003e64c
   d8d78:	2003e648 	.word	0x2003e648
   d8d7c:	2003e644 	.word	0x2003e644
   d8d80:	2003e640 	.word	0x2003e640
   d8d84:	2003e63c 	.word	0x2003e63c
   d8d88:	2003e638 	.word	0x2003e638
   d8d8c:	2003e634 	.word	0x2003e634
   d8d90:	2003e630 	.word	0x2003e630
   d8d94:	2003e62c 	.word	0x2003e62c
   d8d98:	2003e628 	.word	0x2003e628

000d8d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8d9c:	4b18      	ldr	r3, [pc, #96]	; (d8e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8d9e:	681a      	ldr	r2, [r3, #0]
   d8da0:	07d1      	lsls	r1, r2, #31
   d8da2:	bf5c      	itt	pl
   d8da4:	2201      	movpl	r2, #1
   d8da6:	601a      	strpl	r2, [r3, #0]
   d8da8:	4b16      	ldr	r3, [pc, #88]	; (d8e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8daa:	681a      	ldr	r2, [r3, #0]
   d8dac:	07d2      	lsls	r2, r2, #31
   d8dae:	bf5c      	itt	pl
   d8db0:	2201      	movpl	r2, #1
   d8db2:	601a      	strpl	r2, [r3, #0]
   d8db4:	4b14      	ldr	r3, [pc, #80]	; (d8e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8db6:	681a      	ldr	r2, [r3, #0]
   d8db8:	07d0      	lsls	r0, r2, #31
   d8dba:	bf5c      	itt	pl
   d8dbc:	2201      	movpl	r2, #1
   d8dbe:	601a      	strpl	r2, [r3, #0]
   d8dc0:	4b12      	ldr	r3, [pc, #72]	; (d8e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8dc2:	681a      	ldr	r2, [r3, #0]
   d8dc4:	07d1      	lsls	r1, r2, #31
   d8dc6:	bf5c      	itt	pl
   d8dc8:	2201      	movpl	r2, #1
   d8dca:	601a      	strpl	r2, [r3, #0]
   d8dcc:	4b10      	ldr	r3, [pc, #64]	; (d8e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8dce:	681a      	ldr	r2, [r3, #0]
   d8dd0:	07d2      	lsls	r2, r2, #31
   d8dd2:	bf5c      	itt	pl
   d8dd4:	2201      	movpl	r2, #1
   d8dd6:	601a      	strpl	r2, [r3, #0]
   d8dd8:	4b0e      	ldr	r3, [pc, #56]	; (d8e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8dda:	681a      	ldr	r2, [r3, #0]
   d8ddc:	07d0      	lsls	r0, r2, #31
   d8dde:	bf5c      	itt	pl
   d8de0:	2201      	movpl	r2, #1
   d8de2:	601a      	strpl	r2, [r3, #0]
   d8de4:	4b0c      	ldr	r3, [pc, #48]	; (d8e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8de6:	681a      	ldr	r2, [r3, #0]
   d8de8:	07d1      	lsls	r1, r2, #31
   d8dea:	bf5c      	itt	pl
   d8dec:	2201      	movpl	r2, #1
   d8dee:	601a      	strpl	r2, [r3, #0]
   d8df0:	4b0a      	ldr	r3, [pc, #40]	; (d8e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8df2:	681a      	ldr	r2, [r3, #0]
   d8df4:	07d2      	lsls	r2, r2, #31
   d8df6:	bf5c      	itt	pl
   d8df8:	2201      	movpl	r2, #1
   d8dfa:	601a      	strpl	r2, [r3, #0]
   d8dfc:	4770      	bx	lr
   d8dfe:	bf00      	nop
   d8e00:	2003e674 	.word	0x2003e674
   d8e04:	2003e670 	.word	0x2003e670
   d8e08:	2003e66c 	.word	0x2003e66c
   d8e0c:	2003e668 	.word	0x2003e668
   d8e10:	2003e664 	.word	0x2003e664
   d8e14:	2003e660 	.word	0x2003e660
   d8e18:	2003e65c 	.word	0x2003e65c
   d8e1c:	2003e658 	.word	0x2003e658

000d8e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8e20:	4b18      	ldr	r3, [pc, #96]	; (d8e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8e22:	681a      	ldr	r2, [r3, #0]
   d8e24:	07d1      	lsls	r1, r2, #31
   d8e26:	bf5c      	itt	pl
   d8e28:	2201      	movpl	r2, #1
   d8e2a:	601a      	strpl	r2, [r3, #0]
   d8e2c:	4b16      	ldr	r3, [pc, #88]	; (d8e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8e2e:	681a      	ldr	r2, [r3, #0]
   d8e30:	07d2      	lsls	r2, r2, #31
   d8e32:	bf5c      	itt	pl
   d8e34:	2201      	movpl	r2, #1
   d8e36:	601a      	strpl	r2, [r3, #0]
   d8e38:	4b14      	ldr	r3, [pc, #80]	; (d8e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8e3a:	681a      	ldr	r2, [r3, #0]
   d8e3c:	07d0      	lsls	r0, r2, #31
   d8e3e:	bf5c      	itt	pl
   d8e40:	2201      	movpl	r2, #1
   d8e42:	601a      	strpl	r2, [r3, #0]
   d8e44:	4b12      	ldr	r3, [pc, #72]	; (d8e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8e46:	681a      	ldr	r2, [r3, #0]
   d8e48:	07d1      	lsls	r1, r2, #31
   d8e4a:	bf5c      	itt	pl
   d8e4c:	2201      	movpl	r2, #1
   d8e4e:	601a      	strpl	r2, [r3, #0]
   d8e50:	4b10      	ldr	r3, [pc, #64]	; (d8e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8e52:	681a      	ldr	r2, [r3, #0]
   d8e54:	07d2      	lsls	r2, r2, #31
   d8e56:	bf5c      	itt	pl
   d8e58:	2201      	movpl	r2, #1
   d8e5a:	601a      	strpl	r2, [r3, #0]
   d8e5c:	4b0e      	ldr	r3, [pc, #56]	; (d8e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8e5e:	681a      	ldr	r2, [r3, #0]
   d8e60:	07d0      	lsls	r0, r2, #31
   d8e62:	bf5c      	itt	pl
   d8e64:	2201      	movpl	r2, #1
   d8e66:	601a      	strpl	r2, [r3, #0]
   d8e68:	4b0c      	ldr	r3, [pc, #48]	; (d8e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8e6a:	681a      	ldr	r2, [r3, #0]
   d8e6c:	07d1      	lsls	r1, r2, #31
   d8e6e:	bf5c      	itt	pl
   d8e70:	2201      	movpl	r2, #1
   d8e72:	601a      	strpl	r2, [r3, #0]
   d8e74:	4b0a      	ldr	r3, [pc, #40]	; (d8ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8e76:	681a      	ldr	r2, [r3, #0]
   d8e78:	07d2      	lsls	r2, r2, #31
   d8e7a:	bf5c      	itt	pl
   d8e7c:	2201      	movpl	r2, #1
   d8e7e:	601a      	strpl	r2, [r3, #0]
   d8e80:	4770      	bx	lr
   d8e82:	bf00      	nop
   d8e84:	2003e694 	.word	0x2003e694
   d8e88:	2003e690 	.word	0x2003e690
   d8e8c:	2003e68c 	.word	0x2003e68c
   d8e90:	2003e688 	.word	0x2003e688
   d8e94:	2003e684 	.word	0x2003e684
   d8e98:	2003e680 	.word	0x2003e680
   d8e9c:	2003e67c 	.word	0x2003e67c
   d8ea0:	2003e678 	.word	0x2003e678

000d8ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8ea4:	4b24      	ldr	r3, [pc, #144]	; (d8f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8ea6:	681a      	ldr	r2, [r3, #0]
   d8ea8:	07d0      	lsls	r0, r2, #31
   d8eaa:	bf5c      	itt	pl
   d8eac:	2201      	movpl	r2, #1
   d8eae:	601a      	strpl	r2, [r3, #0]
   d8eb0:	4b22      	ldr	r3, [pc, #136]	; (d8f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8eb2:	681a      	ldr	r2, [r3, #0]
   d8eb4:	07d1      	lsls	r1, r2, #31
   d8eb6:	bf5c      	itt	pl
   d8eb8:	2201      	movpl	r2, #1
   d8eba:	601a      	strpl	r2, [r3, #0]
   d8ebc:	4b20      	ldr	r3, [pc, #128]	; (d8f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8ebe:	681a      	ldr	r2, [r3, #0]
   d8ec0:	07d2      	lsls	r2, r2, #31
   d8ec2:	bf5c      	itt	pl
   d8ec4:	2201      	movpl	r2, #1
   d8ec6:	601a      	strpl	r2, [r3, #0]
   d8ec8:	4b1e      	ldr	r3, [pc, #120]	; (d8f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8eca:	681a      	ldr	r2, [r3, #0]
   d8ecc:	07d0      	lsls	r0, r2, #31
   d8ece:	bf5c      	itt	pl
   d8ed0:	2201      	movpl	r2, #1
   d8ed2:	601a      	strpl	r2, [r3, #0]
   d8ed4:	4b1c      	ldr	r3, [pc, #112]	; (d8f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8ed6:	681a      	ldr	r2, [r3, #0]
   d8ed8:	07d1      	lsls	r1, r2, #31
   d8eda:	bf5c      	itt	pl
   d8edc:	2201      	movpl	r2, #1
   d8ede:	601a      	strpl	r2, [r3, #0]
   d8ee0:	4b1a      	ldr	r3, [pc, #104]	; (d8f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8ee2:	681a      	ldr	r2, [r3, #0]
   d8ee4:	07d2      	lsls	r2, r2, #31
   d8ee6:	bf5c      	itt	pl
   d8ee8:	2201      	movpl	r2, #1
   d8eea:	601a      	strpl	r2, [r3, #0]
   d8eec:	4b18      	ldr	r3, [pc, #96]	; (d8f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8eee:	681a      	ldr	r2, [r3, #0]
   d8ef0:	07d0      	lsls	r0, r2, #31
   d8ef2:	bf5c      	itt	pl
   d8ef4:	2201      	movpl	r2, #1
   d8ef6:	601a      	strpl	r2, [r3, #0]
   d8ef8:	4b16      	ldr	r3, [pc, #88]	; (d8f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8efa:	681a      	ldr	r2, [r3, #0]
   d8efc:	07d1      	lsls	r1, r2, #31
   d8efe:	bf5c      	itt	pl
   d8f00:	2201      	movpl	r2, #1
   d8f02:	601a      	strpl	r2, [r3, #0]
   d8f04:	4b14      	ldr	r3, [pc, #80]	; (d8f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8f06:	681a      	ldr	r2, [r3, #0]
   d8f08:	07d2      	lsls	r2, r2, #31
   d8f0a:	bf5c      	itt	pl
   d8f0c:	2201      	movpl	r2, #1
   d8f0e:	601a      	strpl	r2, [r3, #0]
   d8f10:	4b12      	ldr	r3, [pc, #72]	; (d8f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8f12:	681a      	ldr	r2, [r3, #0]
   d8f14:	07d0      	lsls	r0, r2, #31
   d8f16:	bf5c      	itt	pl
   d8f18:	2201      	movpl	r2, #1
   d8f1a:	601a      	strpl	r2, [r3, #0]
   d8f1c:	4b10      	ldr	r3, [pc, #64]	; (d8f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8f1e:	681a      	ldr	r2, [r3, #0]
   d8f20:	07d1      	lsls	r1, r2, #31
   d8f22:	bf5c      	itt	pl
   d8f24:	2201      	movpl	r2, #1
   d8f26:	601a      	strpl	r2, [r3, #0]
   d8f28:	4b0e      	ldr	r3, [pc, #56]	; (d8f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8f2a:	681a      	ldr	r2, [r3, #0]
   d8f2c:	07d2      	lsls	r2, r2, #31
   d8f2e:	bf5c      	itt	pl
   d8f30:	2201      	movpl	r2, #1
   d8f32:	601a      	strpl	r2, [r3, #0]
   d8f34:	4770      	bx	lr
   d8f36:	bf00      	nop
   d8f38:	2003e6c4 	.word	0x2003e6c4
   d8f3c:	2003e6c0 	.word	0x2003e6c0
   d8f40:	2003e6bc 	.word	0x2003e6bc
   d8f44:	2003e6b8 	.word	0x2003e6b8
   d8f48:	2003e6b4 	.word	0x2003e6b4
   d8f4c:	2003e6b0 	.word	0x2003e6b0
   d8f50:	2003e6ac 	.word	0x2003e6ac
   d8f54:	2003e6a8 	.word	0x2003e6a8
   d8f58:	2003e6a4 	.word	0x2003e6a4
   d8f5c:	2003e6a0 	.word	0x2003e6a0
   d8f60:	2003e69c 	.word	0x2003e69c
   d8f64:	2003e698 	.word	0x2003e698

000d8f68 <__aeabi_drsub>:
   d8f68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8f6c:	e002      	b.n	d8f74 <__adddf3>
   d8f6e:	bf00      	nop

000d8f70 <__aeabi_dsub>:
   d8f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8f74 <__adddf3>:
   d8f74:	b530      	push	{r4, r5, lr}
   d8f76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8f7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8f7e:	ea94 0f05 	teq	r4, r5
   d8f82:	bf08      	it	eq
   d8f84:	ea90 0f02 	teqeq	r0, r2
   d8f88:	bf1f      	itttt	ne
   d8f8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8f8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8f92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8f96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8f9a:	f000 80e2 	beq.w	d9162 <__adddf3+0x1ee>
   d8f9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8fa2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8fa6:	bfb8      	it	lt
   d8fa8:	426d      	neglt	r5, r5
   d8faa:	dd0c      	ble.n	d8fc6 <__adddf3+0x52>
   d8fac:	442c      	add	r4, r5
   d8fae:	ea80 0202 	eor.w	r2, r0, r2
   d8fb2:	ea81 0303 	eor.w	r3, r1, r3
   d8fb6:	ea82 0000 	eor.w	r0, r2, r0
   d8fba:	ea83 0101 	eor.w	r1, r3, r1
   d8fbe:	ea80 0202 	eor.w	r2, r0, r2
   d8fc2:	ea81 0303 	eor.w	r3, r1, r3
   d8fc6:	2d36      	cmp	r5, #54	; 0x36
   d8fc8:	bf88      	it	hi
   d8fca:	bd30      	pophi	{r4, r5, pc}
   d8fcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8fd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8fd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8fdc:	d002      	beq.n	d8fe4 <__adddf3+0x70>
   d8fde:	4240      	negs	r0, r0
   d8fe0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8fe4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8fe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8fec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8ff0:	d002      	beq.n	d8ff8 <__adddf3+0x84>
   d8ff2:	4252      	negs	r2, r2
   d8ff4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ff8:	ea94 0f05 	teq	r4, r5
   d8ffc:	f000 80a7 	beq.w	d914e <__adddf3+0x1da>
   d9000:	f1a4 0401 	sub.w	r4, r4, #1
   d9004:	f1d5 0e20 	rsbs	lr, r5, #32
   d9008:	db0d      	blt.n	d9026 <__adddf3+0xb2>
   d900a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d900e:	fa22 f205 	lsr.w	r2, r2, r5
   d9012:	1880      	adds	r0, r0, r2
   d9014:	f141 0100 	adc.w	r1, r1, #0
   d9018:	fa03 f20e 	lsl.w	r2, r3, lr
   d901c:	1880      	adds	r0, r0, r2
   d901e:	fa43 f305 	asr.w	r3, r3, r5
   d9022:	4159      	adcs	r1, r3
   d9024:	e00e      	b.n	d9044 <__adddf3+0xd0>
   d9026:	f1a5 0520 	sub.w	r5, r5, #32
   d902a:	f10e 0e20 	add.w	lr, lr, #32
   d902e:	2a01      	cmp	r2, #1
   d9030:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9034:	bf28      	it	cs
   d9036:	f04c 0c02 	orrcs.w	ip, ip, #2
   d903a:	fa43 f305 	asr.w	r3, r3, r5
   d903e:	18c0      	adds	r0, r0, r3
   d9040:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9048:	d507      	bpl.n	d905a <__adddf3+0xe6>
   d904a:	f04f 0e00 	mov.w	lr, #0
   d904e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9052:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9056:	eb6e 0101 	sbc.w	r1, lr, r1
   d905a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d905e:	d31b      	bcc.n	d9098 <__adddf3+0x124>
   d9060:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9064:	d30c      	bcc.n	d9080 <__adddf3+0x10c>
   d9066:	0849      	lsrs	r1, r1, #1
   d9068:	ea5f 0030 	movs.w	r0, r0, rrx
   d906c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9070:	f104 0401 	add.w	r4, r4, #1
   d9074:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9078:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d907c:	f080 809a 	bcs.w	d91b4 <__adddf3+0x240>
   d9080:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9084:	bf08      	it	eq
   d9086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d908a:	f150 0000 	adcs.w	r0, r0, #0
   d908e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9092:	ea41 0105 	orr.w	r1, r1, r5
   d9096:	bd30      	pop	{r4, r5, pc}
   d9098:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d909c:	4140      	adcs	r0, r0
   d909e:	eb41 0101 	adc.w	r1, r1, r1
   d90a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d90a6:	f1a4 0401 	sub.w	r4, r4, #1
   d90aa:	d1e9      	bne.n	d9080 <__adddf3+0x10c>
   d90ac:	f091 0f00 	teq	r1, #0
   d90b0:	bf04      	itt	eq
   d90b2:	4601      	moveq	r1, r0
   d90b4:	2000      	moveq	r0, #0
   d90b6:	fab1 f381 	clz	r3, r1
   d90ba:	bf08      	it	eq
   d90bc:	3320      	addeq	r3, #32
   d90be:	f1a3 030b 	sub.w	r3, r3, #11
   d90c2:	f1b3 0220 	subs.w	r2, r3, #32
   d90c6:	da0c      	bge.n	d90e2 <__adddf3+0x16e>
   d90c8:	320c      	adds	r2, #12
   d90ca:	dd08      	ble.n	d90de <__adddf3+0x16a>
   d90cc:	f102 0c14 	add.w	ip, r2, #20
   d90d0:	f1c2 020c 	rsb	r2, r2, #12
   d90d4:	fa01 f00c 	lsl.w	r0, r1, ip
   d90d8:	fa21 f102 	lsr.w	r1, r1, r2
   d90dc:	e00c      	b.n	d90f8 <__adddf3+0x184>
   d90de:	f102 0214 	add.w	r2, r2, #20
   d90e2:	bfd8      	it	le
   d90e4:	f1c2 0c20 	rsble	ip, r2, #32
   d90e8:	fa01 f102 	lsl.w	r1, r1, r2
   d90ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d90f0:	bfdc      	itt	le
   d90f2:	ea41 010c 	orrle.w	r1, r1, ip
   d90f6:	4090      	lslle	r0, r2
   d90f8:	1ae4      	subs	r4, r4, r3
   d90fa:	bfa2      	ittt	ge
   d90fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9100:	4329      	orrge	r1, r5
   d9102:	bd30      	popge	{r4, r5, pc}
   d9104:	ea6f 0404 	mvn.w	r4, r4
   d9108:	3c1f      	subs	r4, #31
   d910a:	da1c      	bge.n	d9146 <__adddf3+0x1d2>
   d910c:	340c      	adds	r4, #12
   d910e:	dc0e      	bgt.n	d912e <__adddf3+0x1ba>
   d9110:	f104 0414 	add.w	r4, r4, #20
   d9114:	f1c4 0220 	rsb	r2, r4, #32
   d9118:	fa20 f004 	lsr.w	r0, r0, r4
   d911c:	fa01 f302 	lsl.w	r3, r1, r2
   d9120:	ea40 0003 	orr.w	r0, r0, r3
   d9124:	fa21 f304 	lsr.w	r3, r1, r4
   d9128:	ea45 0103 	orr.w	r1, r5, r3
   d912c:	bd30      	pop	{r4, r5, pc}
   d912e:	f1c4 040c 	rsb	r4, r4, #12
   d9132:	f1c4 0220 	rsb	r2, r4, #32
   d9136:	fa20 f002 	lsr.w	r0, r0, r2
   d913a:	fa01 f304 	lsl.w	r3, r1, r4
   d913e:	ea40 0003 	orr.w	r0, r0, r3
   d9142:	4629      	mov	r1, r5
   d9144:	bd30      	pop	{r4, r5, pc}
   d9146:	fa21 f004 	lsr.w	r0, r1, r4
   d914a:	4629      	mov	r1, r5
   d914c:	bd30      	pop	{r4, r5, pc}
   d914e:	f094 0f00 	teq	r4, #0
   d9152:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9156:	bf06      	itte	eq
   d9158:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d915c:	3401      	addeq	r4, #1
   d915e:	3d01      	subne	r5, #1
   d9160:	e74e      	b.n	d9000 <__adddf3+0x8c>
   d9162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9166:	bf18      	it	ne
   d9168:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d916c:	d029      	beq.n	d91c2 <__adddf3+0x24e>
   d916e:	ea94 0f05 	teq	r4, r5
   d9172:	bf08      	it	eq
   d9174:	ea90 0f02 	teqeq	r0, r2
   d9178:	d005      	beq.n	d9186 <__adddf3+0x212>
   d917a:	ea54 0c00 	orrs.w	ip, r4, r0
   d917e:	bf04      	itt	eq
   d9180:	4619      	moveq	r1, r3
   d9182:	4610      	moveq	r0, r2
   d9184:	bd30      	pop	{r4, r5, pc}
   d9186:	ea91 0f03 	teq	r1, r3
   d918a:	bf1e      	ittt	ne
   d918c:	2100      	movne	r1, #0
   d918e:	2000      	movne	r0, #0
   d9190:	bd30      	popne	{r4, r5, pc}
   d9192:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9196:	d105      	bne.n	d91a4 <__adddf3+0x230>
   d9198:	0040      	lsls	r0, r0, #1
   d919a:	4149      	adcs	r1, r1
   d919c:	bf28      	it	cs
   d919e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d91a2:	bd30      	pop	{r4, r5, pc}
   d91a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d91a8:	bf3c      	itt	cc
   d91aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d91ae:	bd30      	popcc	{r4, r5, pc}
   d91b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d91b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d91b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d91bc:	f04f 0000 	mov.w	r0, #0
   d91c0:	bd30      	pop	{r4, r5, pc}
   d91c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d91c6:	bf1a      	itte	ne
   d91c8:	4619      	movne	r1, r3
   d91ca:	4610      	movne	r0, r2
   d91cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d91d0:	bf1c      	itt	ne
   d91d2:	460b      	movne	r3, r1
   d91d4:	4602      	movne	r2, r0
   d91d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d91da:	bf06      	itte	eq
   d91dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d91e0:	ea91 0f03 	teqeq	r1, r3
   d91e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d91e8:	bd30      	pop	{r4, r5, pc}
   d91ea:	bf00      	nop

000d91ec <__aeabi_ui2d>:
   d91ec:	f090 0f00 	teq	r0, #0
   d91f0:	bf04      	itt	eq
   d91f2:	2100      	moveq	r1, #0
   d91f4:	4770      	bxeq	lr
   d91f6:	b530      	push	{r4, r5, lr}
   d91f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d91fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9200:	f04f 0500 	mov.w	r5, #0
   d9204:	f04f 0100 	mov.w	r1, #0
   d9208:	e750      	b.n	d90ac <__adddf3+0x138>
   d920a:	bf00      	nop

000d920c <__aeabi_i2d>:
   d920c:	f090 0f00 	teq	r0, #0
   d9210:	bf04      	itt	eq
   d9212:	2100      	moveq	r1, #0
   d9214:	4770      	bxeq	lr
   d9216:	b530      	push	{r4, r5, lr}
   d9218:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d921c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9220:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9224:	bf48      	it	mi
   d9226:	4240      	negmi	r0, r0
   d9228:	f04f 0100 	mov.w	r1, #0
   d922c:	e73e      	b.n	d90ac <__adddf3+0x138>
   d922e:	bf00      	nop

000d9230 <__aeabi_f2d>:
   d9230:	0042      	lsls	r2, r0, #1
   d9232:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9236:	ea4f 0131 	mov.w	r1, r1, rrx
   d923a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d923e:	bf1f      	itttt	ne
   d9240:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9248:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d924c:	4770      	bxne	lr
   d924e:	f092 0f00 	teq	r2, #0
   d9252:	bf14      	ite	ne
   d9254:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9258:	4770      	bxeq	lr
   d925a:	b530      	push	{r4, r5, lr}
   d925c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9268:	e720      	b.n	d90ac <__adddf3+0x138>
   d926a:	bf00      	nop

000d926c <__aeabi_ul2d>:
   d926c:	ea50 0201 	orrs.w	r2, r0, r1
   d9270:	bf08      	it	eq
   d9272:	4770      	bxeq	lr
   d9274:	b530      	push	{r4, r5, lr}
   d9276:	f04f 0500 	mov.w	r5, #0
   d927a:	e00a      	b.n	d9292 <__aeabi_l2d+0x16>

000d927c <__aeabi_l2d>:
   d927c:	ea50 0201 	orrs.w	r2, r0, r1
   d9280:	bf08      	it	eq
   d9282:	4770      	bxeq	lr
   d9284:	b530      	push	{r4, r5, lr}
   d9286:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d928a:	d502      	bpl.n	d9292 <__aeabi_l2d+0x16>
   d928c:	4240      	negs	r0, r0
   d928e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9292:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9296:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d929a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d929e:	f43f aedc 	beq.w	d905a <__adddf3+0xe6>
   d92a2:	f04f 0203 	mov.w	r2, #3
   d92a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d92aa:	bf18      	it	ne
   d92ac:	3203      	addne	r2, #3
   d92ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d92b2:	bf18      	it	ne
   d92b4:	3203      	addne	r2, #3
   d92b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d92ba:	f1c2 0320 	rsb	r3, r2, #32
   d92be:	fa00 fc03 	lsl.w	ip, r0, r3
   d92c2:	fa20 f002 	lsr.w	r0, r0, r2
   d92c6:	fa01 fe03 	lsl.w	lr, r1, r3
   d92ca:	ea40 000e 	orr.w	r0, r0, lr
   d92ce:	fa21 f102 	lsr.w	r1, r1, r2
   d92d2:	4414      	add	r4, r2
   d92d4:	e6c1      	b.n	d905a <__adddf3+0xe6>
   d92d6:	bf00      	nop

000d92d8 <__aeabi_dmul>:
   d92d8:	b570      	push	{r4, r5, r6, lr}
   d92da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d92de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d92e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d92e6:	bf1d      	ittte	ne
   d92e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d92ec:	ea94 0f0c 	teqne	r4, ip
   d92f0:	ea95 0f0c 	teqne	r5, ip
   d92f4:	f000 f8de 	bleq	d94b4 <__aeabi_dmul+0x1dc>
   d92f8:	442c      	add	r4, r5
   d92fa:	ea81 0603 	eor.w	r6, r1, r3
   d92fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d930a:	bf18      	it	ne
   d930c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9318:	d038      	beq.n	d938c <__aeabi_dmul+0xb4>
   d931a:	fba0 ce02 	umull	ip, lr, r0, r2
   d931e:	f04f 0500 	mov.w	r5, #0
   d9322:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9326:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d932a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d932e:	f04f 0600 	mov.w	r6, #0
   d9332:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9336:	f09c 0f00 	teq	ip, #0
   d933a:	bf18      	it	ne
   d933c:	f04e 0e01 	orrne.w	lr, lr, #1
   d9340:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9344:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9348:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d934c:	d204      	bcs.n	d9358 <__aeabi_dmul+0x80>
   d934e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9352:	416d      	adcs	r5, r5
   d9354:	eb46 0606 	adc.w	r6, r6, r6
   d9358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d935c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d936c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9370:	bf88      	it	hi
   d9372:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9376:	d81e      	bhi.n	d93b6 <__aeabi_dmul+0xde>
   d9378:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d937c:	bf08      	it	eq
   d937e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9382:	f150 0000 	adcs.w	r0, r0, #0
   d9386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d938a:	bd70      	pop	{r4, r5, r6, pc}
   d938c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9390:	ea46 0101 	orr.w	r1, r6, r1
   d9394:	ea40 0002 	orr.w	r0, r0, r2
   d9398:	ea81 0103 	eor.w	r1, r1, r3
   d939c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d93a0:	bfc2      	ittt	gt
   d93a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d93a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d93aa:	bd70      	popgt	{r4, r5, r6, pc}
   d93ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93b0:	f04f 0e00 	mov.w	lr, #0
   d93b4:	3c01      	subs	r4, #1
   d93b6:	f300 80ab 	bgt.w	d9510 <__aeabi_dmul+0x238>
   d93ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d93be:	bfde      	ittt	le
   d93c0:	2000      	movle	r0, #0
   d93c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d93c6:	bd70      	pople	{r4, r5, r6, pc}
   d93c8:	f1c4 0400 	rsb	r4, r4, #0
   d93cc:	3c20      	subs	r4, #32
   d93ce:	da35      	bge.n	d943c <__aeabi_dmul+0x164>
   d93d0:	340c      	adds	r4, #12
   d93d2:	dc1b      	bgt.n	d940c <__aeabi_dmul+0x134>
   d93d4:	f104 0414 	add.w	r4, r4, #20
   d93d8:	f1c4 0520 	rsb	r5, r4, #32
   d93dc:	fa00 f305 	lsl.w	r3, r0, r5
   d93e0:	fa20 f004 	lsr.w	r0, r0, r4
   d93e4:	fa01 f205 	lsl.w	r2, r1, r5
   d93e8:	ea40 0002 	orr.w	r0, r0, r2
   d93ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d93f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d93f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d93f8:	fa21 f604 	lsr.w	r6, r1, r4
   d93fc:	eb42 0106 	adc.w	r1, r2, r6
   d9400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9404:	bf08      	it	eq
   d9406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d940a:	bd70      	pop	{r4, r5, r6, pc}
   d940c:	f1c4 040c 	rsb	r4, r4, #12
   d9410:	f1c4 0520 	rsb	r5, r4, #32
   d9414:	fa00 f304 	lsl.w	r3, r0, r4
   d9418:	fa20 f005 	lsr.w	r0, r0, r5
   d941c:	fa01 f204 	lsl.w	r2, r1, r4
   d9420:	ea40 0002 	orr.w	r0, r0, r2
   d9424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d942c:	f141 0100 	adc.w	r1, r1, #0
   d9430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9434:	bf08      	it	eq
   d9436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d943a:	bd70      	pop	{r4, r5, r6, pc}
   d943c:	f1c4 0520 	rsb	r5, r4, #32
   d9440:	fa00 f205 	lsl.w	r2, r0, r5
   d9444:	ea4e 0e02 	orr.w	lr, lr, r2
   d9448:	fa20 f304 	lsr.w	r3, r0, r4
   d944c:	fa01 f205 	lsl.w	r2, r1, r5
   d9450:	ea43 0302 	orr.w	r3, r3, r2
   d9454:	fa21 f004 	lsr.w	r0, r1, r4
   d9458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d945c:	fa21 f204 	lsr.w	r2, r1, r4
   d9460:	ea20 0002 	bic.w	r0, r0, r2
   d9464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d946c:	bf08      	it	eq
   d946e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9472:	bd70      	pop	{r4, r5, r6, pc}
   d9474:	f094 0f00 	teq	r4, #0
   d9478:	d10f      	bne.n	d949a <__aeabi_dmul+0x1c2>
   d947a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d947e:	0040      	lsls	r0, r0, #1
   d9480:	eb41 0101 	adc.w	r1, r1, r1
   d9484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9488:	bf08      	it	eq
   d948a:	3c01      	subeq	r4, #1
   d948c:	d0f7      	beq.n	d947e <__aeabi_dmul+0x1a6>
   d948e:	ea41 0106 	orr.w	r1, r1, r6
   d9492:	f095 0f00 	teq	r5, #0
   d9496:	bf18      	it	ne
   d9498:	4770      	bxne	lr
   d949a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d949e:	0052      	lsls	r2, r2, #1
   d94a0:	eb43 0303 	adc.w	r3, r3, r3
   d94a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d94a8:	bf08      	it	eq
   d94aa:	3d01      	subeq	r5, #1
   d94ac:	d0f7      	beq.n	d949e <__aeabi_dmul+0x1c6>
   d94ae:	ea43 0306 	orr.w	r3, r3, r6
   d94b2:	4770      	bx	lr
   d94b4:	ea94 0f0c 	teq	r4, ip
   d94b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d94bc:	bf18      	it	ne
   d94be:	ea95 0f0c 	teqne	r5, ip
   d94c2:	d00c      	beq.n	d94de <__aeabi_dmul+0x206>
   d94c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d94c8:	bf18      	it	ne
   d94ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d94ce:	d1d1      	bne.n	d9474 <__aeabi_dmul+0x19c>
   d94d0:	ea81 0103 	eor.w	r1, r1, r3
   d94d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d94d8:	f04f 0000 	mov.w	r0, #0
   d94dc:	bd70      	pop	{r4, r5, r6, pc}
   d94de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d94e2:	bf06      	itte	eq
   d94e4:	4610      	moveq	r0, r2
   d94e6:	4619      	moveq	r1, r3
   d94e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d94ec:	d019      	beq.n	d9522 <__aeabi_dmul+0x24a>
   d94ee:	ea94 0f0c 	teq	r4, ip
   d94f2:	d102      	bne.n	d94fa <__aeabi_dmul+0x222>
   d94f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d94f8:	d113      	bne.n	d9522 <__aeabi_dmul+0x24a>
   d94fa:	ea95 0f0c 	teq	r5, ip
   d94fe:	d105      	bne.n	d950c <__aeabi_dmul+0x234>
   d9500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9504:	bf1c      	itt	ne
   d9506:	4610      	movne	r0, r2
   d9508:	4619      	movne	r1, r3
   d950a:	d10a      	bne.n	d9522 <__aeabi_dmul+0x24a>
   d950c:	ea81 0103 	eor.w	r1, r1, r3
   d9510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9514:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d951c:	f04f 0000 	mov.w	r0, #0
   d9520:	bd70      	pop	{r4, r5, r6, pc}
   d9522:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9526:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d952a:	bd70      	pop	{r4, r5, r6, pc}

000d952c <__aeabi_ddiv>:
   d952c:	b570      	push	{r4, r5, r6, lr}
   d952e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d953a:	bf1d      	ittte	ne
   d953c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9540:	ea94 0f0c 	teqne	r4, ip
   d9544:	ea95 0f0c 	teqne	r5, ip
   d9548:	f000 f8a7 	bleq	d969a <__aeabi_ddiv+0x16e>
   d954c:	eba4 0405 	sub.w	r4, r4, r5
   d9550:	ea81 0e03 	eor.w	lr, r1, r3
   d9554:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9558:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d955c:	f000 8088 	beq.w	d9670 <__aeabi_ddiv+0x144>
   d9560:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9564:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9568:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d956c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9570:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9574:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9578:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d957c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9580:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9584:	429d      	cmp	r5, r3
   d9586:	bf08      	it	eq
   d9588:	4296      	cmpeq	r6, r2
   d958a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d958e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9592:	d202      	bcs.n	d959a <__aeabi_ddiv+0x6e>
   d9594:	085b      	lsrs	r3, r3, #1
   d9596:	ea4f 0232 	mov.w	r2, r2, rrx
   d959a:	1ab6      	subs	r6, r6, r2
   d959c:	eb65 0503 	sbc.w	r5, r5, r3
   d95a0:	085b      	lsrs	r3, r3, #1
   d95a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d95a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d95aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d95ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d95b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d95b6:	bf22      	ittt	cs
   d95b8:	1ab6      	subcs	r6, r6, r2
   d95ba:	4675      	movcs	r5, lr
   d95bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d95c0:	085b      	lsrs	r3, r3, #1
   d95c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d95c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d95ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d95ce:	bf22      	ittt	cs
   d95d0:	1ab6      	subcs	r6, r6, r2
   d95d2:	4675      	movcs	r5, lr
   d95d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d95d8:	085b      	lsrs	r3, r3, #1
   d95da:	ea4f 0232 	mov.w	r2, r2, rrx
   d95de:	ebb6 0e02 	subs.w	lr, r6, r2
   d95e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d95e6:	bf22      	ittt	cs
   d95e8:	1ab6      	subcs	r6, r6, r2
   d95ea:	4675      	movcs	r5, lr
   d95ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d95f0:	085b      	lsrs	r3, r3, #1
   d95f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d95f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d95fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d95fe:	bf22      	ittt	cs
   d9600:	1ab6      	subcs	r6, r6, r2
   d9602:	4675      	movcs	r5, lr
   d9604:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9608:	ea55 0e06 	orrs.w	lr, r5, r6
   d960c:	d018      	beq.n	d9640 <__aeabi_ddiv+0x114>
   d960e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9612:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9616:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d961a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d961e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9622:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9626:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d962a:	d1c0      	bne.n	d95ae <__aeabi_ddiv+0x82>
   d962c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9630:	d10b      	bne.n	d964a <__aeabi_ddiv+0x11e>
   d9632:	ea41 0100 	orr.w	r1, r1, r0
   d9636:	f04f 0000 	mov.w	r0, #0
   d963a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d963e:	e7b6      	b.n	d95ae <__aeabi_ddiv+0x82>
   d9640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9644:	bf04      	itt	eq
   d9646:	4301      	orreq	r1, r0
   d9648:	2000      	moveq	r0, #0
   d964a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d964e:	bf88      	it	hi
   d9650:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9654:	f63f aeaf 	bhi.w	d93b6 <__aeabi_dmul+0xde>
   d9658:	ebb5 0c03 	subs.w	ip, r5, r3
   d965c:	bf04      	itt	eq
   d965e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9666:	f150 0000 	adcs.w	r0, r0, #0
   d966a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d966e:	bd70      	pop	{r4, r5, r6, pc}
   d9670:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9674:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9678:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d967c:	bfc2      	ittt	gt
   d967e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9686:	bd70      	popgt	{r4, r5, r6, pc}
   d9688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d968c:	f04f 0e00 	mov.w	lr, #0
   d9690:	3c01      	subs	r4, #1
   d9692:	e690      	b.n	d93b6 <__aeabi_dmul+0xde>
   d9694:	ea45 0e06 	orr.w	lr, r5, r6
   d9698:	e68d      	b.n	d93b6 <__aeabi_dmul+0xde>
   d969a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d969e:	ea94 0f0c 	teq	r4, ip
   d96a2:	bf08      	it	eq
   d96a4:	ea95 0f0c 	teqeq	r5, ip
   d96a8:	f43f af3b 	beq.w	d9522 <__aeabi_dmul+0x24a>
   d96ac:	ea94 0f0c 	teq	r4, ip
   d96b0:	d10a      	bne.n	d96c8 <__aeabi_ddiv+0x19c>
   d96b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d96b6:	f47f af34 	bne.w	d9522 <__aeabi_dmul+0x24a>
   d96ba:	ea95 0f0c 	teq	r5, ip
   d96be:	f47f af25 	bne.w	d950c <__aeabi_dmul+0x234>
   d96c2:	4610      	mov	r0, r2
   d96c4:	4619      	mov	r1, r3
   d96c6:	e72c      	b.n	d9522 <__aeabi_dmul+0x24a>
   d96c8:	ea95 0f0c 	teq	r5, ip
   d96cc:	d106      	bne.n	d96dc <__aeabi_ddiv+0x1b0>
   d96ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d96d2:	f43f aefd 	beq.w	d94d0 <__aeabi_dmul+0x1f8>
   d96d6:	4610      	mov	r0, r2
   d96d8:	4619      	mov	r1, r3
   d96da:	e722      	b.n	d9522 <__aeabi_dmul+0x24a>
   d96dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96e0:	bf18      	it	ne
   d96e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96e6:	f47f aec5 	bne.w	d9474 <__aeabi_dmul+0x19c>
   d96ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d96ee:	f47f af0d 	bne.w	d950c <__aeabi_dmul+0x234>
   d96f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d96f6:	f47f aeeb 	bne.w	d94d0 <__aeabi_dmul+0x1f8>
   d96fa:	e712      	b.n	d9522 <__aeabi_dmul+0x24a>

000d96fc <__gedf2>:
   d96fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9700:	e006      	b.n	d9710 <__cmpdf2+0x4>
   d9702:	bf00      	nop

000d9704 <__ledf2>:
   d9704:	f04f 0c01 	mov.w	ip, #1
   d9708:	e002      	b.n	d9710 <__cmpdf2+0x4>
   d970a:	bf00      	nop

000d970c <__cmpdf2>:
   d970c:	f04f 0c01 	mov.w	ip, #1
   d9710:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9714:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9718:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d971c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9720:	bf18      	it	ne
   d9722:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9726:	d01b      	beq.n	d9760 <__cmpdf2+0x54>
   d9728:	b001      	add	sp, #4
   d972a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d972e:	bf0c      	ite	eq
   d9730:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9734:	ea91 0f03 	teqne	r1, r3
   d9738:	bf02      	ittt	eq
   d973a:	ea90 0f02 	teqeq	r0, r2
   d973e:	2000      	moveq	r0, #0
   d9740:	4770      	bxeq	lr
   d9742:	f110 0f00 	cmn.w	r0, #0
   d9746:	ea91 0f03 	teq	r1, r3
   d974a:	bf58      	it	pl
   d974c:	4299      	cmppl	r1, r3
   d974e:	bf08      	it	eq
   d9750:	4290      	cmpeq	r0, r2
   d9752:	bf2c      	ite	cs
   d9754:	17d8      	asrcs	r0, r3, #31
   d9756:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d975a:	f040 0001 	orr.w	r0, r0, #1
   d975e:	4770      	bx	lr
   d9760:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9764:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9768:	d102      	bne.n	d9770 <__cmpdf2+0x64>
   d976a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d976e:	d107      	bne.n	d9780 <__cmpdf2+0x74>
   d9770:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9778:	d1d6      	bne.n	d9728 <__cmpdf2+0x1c>
   d977a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d977e:	d0d3      	beq.n	d9728 <__cmpdf2+0x1c>
   d9780:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9784:	4770      	bx	lr
   d9786:	bf00      	nop

000d9788 <__aeabi_cdrcmple>:
   d9788:	4684      	mov	ip, r0
   d978a:	4610      	mov	r0, r2
   d978c:	4662      	mov	r2, ip
   d978e:	468c      	mov	ip, r1
   d9790:	4619      	mov	r1, r3
   d9792:	4663      	mov	r3, ip
   d9794:	e000      	b.n	d9798 <__aeabi_cdcmpeq>
   d9796:	bf00      	nop

000d9798 <__aeabi_cdcmpeq>:
   d9798:	b501      	push	{r0, lr}
   d979a:	f7ff ffb7 	bl	d970c <__cmpdf2>
   d979e:	2800      	cmp	r0, #0
   d97a0:	bf48      	it	mi
   d97a2:	f110 0f00 	cmnmi.w	r0, #0
   d97a6:	bd01      	pop	{r0, pc}

000d97a8 <__aeabi_dcmpeq>:
   d97a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d97ac:	f7ff fff4 	bl	d9798 <__aeabi_cdcmpeq>
   d97b0:	bf0c      	ite	eq
   d97b2:	2001      	moveq	r0, #1
   d97b4:	2000      	movne	r0, #0
   d97b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d97ba:	bf00      	nop

000d97bc <__aeabi_dcmplt>:
   d97bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d97c0:	f7ff ffea 	bl	d9798 <__aeabi_cdcmpeq>
   d97c4:	bf34      	ite	cc
   d97c6:	2001      	movcc	r0, #1
   d97c8:	2000      	movcs	r0, #0
   d97ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d97ce:	bf00      	nop

000d97d0 <__aeabi_dcmple>:
   d97d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d97d4:	f7ff ffe0 	bl	d9798 <__aeabi_cdcmpeq>
   d97d8:	bf94      	ite	ls
   d97da:	2001      	movls	r0, #1
   d97dc:	2000      	movhi	r0, #0
   d97de:	f85d fb08 	ldr.w	pc, [sp], #8
   d97e2:	bf00      	nop

000d97e4 <__aeabi_dcmpge>:
   d97e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d97e8:	f7ff ffce 	bl	d9788 <__aeabi_cdrcmple>
   d97ec:	bf94      	ite	ls
   d97ee:	2001      	movls	r0, #1
   d97f0:	2000      	movhi	r0, #0
   d97f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d97f6:	bf00      	nop

000d97f8 <__aeabi_dcmpgt>:
   d97f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d97fc:	f7ff ffc4 	bl	d9788 <__aeabi_cdrcmple>
   d9800:	bf34      	ite	cc
   d9802:	2001      	movcc	r0, #1
   d9804:	2000      	movcs	r0, #0
   d9806:	f85d fb08 	ldr.w	pc, [sp], #8
   d980a:	bf00      	nop

000d980c <__aeabi_dcmpun>:
   d980c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9814:	d102      	bne.n	d981c <__aeabi_dcmpun+0x10>
   d9816:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d981a:	d10a      	bne.n	d9832 <__aeabi_dcmpun+0x26>
   d981c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9824:	d102      	bne.n	d982c <__aeabi_dcmpun+0x20>
   d9826:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d982a:	d102      	bne.n	d9832 <__aeabi_dcmpun+0x26>
   d982c:	f04f 0000 	mov.w	r0, #0
   d9830:	4770      	bx	lr
   d9832:	f04f 0001 	mov.w	r0, #1
   d9836:	4770      	bx	lr

000d9838 <__aeabi_d2iz>:
   d9838:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d983c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9840:	d215      	bcs.n	d986e <__aeabi_d2iz+0x36>
   d9842:	d511      	bpl.n	d9868 <__aeabi_d2iz+0x30>
   d9844:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9848:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d984c:	d912      	bls.n	d9874 <__aeabi_d2iz+0x3c>
   d984e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9856:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d985a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d985e:	fa23 f002 	lsr.w	r0, r3, r2
   d9862:	bf18      	it	ne
   d9864:	4240      	negne	r0, r0
   d9866:	4770      	bx	lr
   d9868:	f04f 0000 	mov.w	r0, #0
   d986c:	4770      	bx	lr
   d986e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9872:	d105      	bne.n	d9880 <__aeabi_d2iz+0x48>
   d9874:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9878:	bf08      	it	eq
   d987a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d987e:	4770      	bx	lr
   d9880:	f04f 0000 	mov.w	r0, #0
   d9884:	4770      	bx	lr
   d9886:	bf00      	nop

000d9888 <__aeabi_d2uiz>:
   d9888:	004a      	lsls	r2, r1, #1
   d988a:	d211      	bcs.n	d98b0 <__aeabi_d2uiz+0x28>
   d988c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9890:	d211      	bcs.n	d98b6 <__aeabi_d2uiz+0x2e>
   d9892:	d50d      	bpl.n	d98b0 <__aeabi_d2uiz+0x28>
   d9894:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9898:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d989c:	d40e      	bmi.n	d98bc <__aeabi_d2uiz+0x34>
   d989e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d98a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d98a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d98aa:	fa23 f002 	lsr.w	r0, r3, r2
   d98ae:	4770      	bx	lr
   d98b0:	f04f 0000 	mov.w	r0, #0
   d98b4:	4770      	bx	lr
   d98b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d98ba:	d102      	bne.n	d98c2 <__aeabi_d2uiz+0x3a>
   d98bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d98c0:	4770      	bx	lr
   d98c2:	f04f 0000 	mov.w	r0, #0
   d98c6:	4770      	bx	lr

000d98c8 <__aeabi_d2f>:
   d98c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d98cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d98d0:	bf24      	itt	cs
   d98d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d98d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d98da:	d90d      	bls.n	d98f8 <__aeabi_d2f+0x30>
   d98dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d98e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d98e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d98e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d98ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d98f0:	bf08      	it	eq
   d98f2:	f020 0001 	biceq.w	r0, r0, #1
   d98f6:	4770      	bx	lr
   d98f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d98fc:	d121      	bne.n	d9942 <__aeabi_d2f+0x7a>
   d98fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9902:	bfbc      	itt	lt
   d9904:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9908:	4770      	bxlt	lr
   d990a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d990e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9912:	f1c2 0218 	rsb	r2, r2, #24
   d9916:	f1c2 0c20 	rsb	ip, r2, #32
   d991a:	fa10 f30c 	lsls.w	r3, r0, ip
   d991e:	fa20 f002 	lsr.w	r0, r0, r2
   d9922:	bf18      	it	ne
   d9924:	f040 0001 	orrne.w	r0, r0, #1
   d9928:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d992c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9930:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9934:	ea40 000c 	orr.w	r0, r0, ip
   d9938:	fa23 f302 	lsr.w	r3, r3, r2
   d993c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9940:	e7cc      	b.n	d98dc <__aeabi_d2f+0x14>
   d9942:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9946:	d107      	bne.n	d9958 <__aeabi_d2f+0x90>
   d9948:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d994c:	bf1e      	ittt	ne
   d994e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9952:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9956:	4770      	bxne	lr
   d9958:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d995c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9964:	4770      	bx	lr
   d9966:	bf00      	nop

000d9968 <asctime>:
   d9968:	4b09      	ldr	r3, [pc, #36]	; (d9990 <asctime+0x28>)
   d996a:	b570      	push	{r4, r5, r6, lr}
   d996c:	681c      	ldr	r4, [r3, #0]
   d996e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9970:	4606      	mov	r6, r0
   d9972:	b93d      	cbnz	r5, d9984 <asctime+0x1c>
   d9974:	201a      	movs	r0, #26
   d9976:	f7fd fb4d 	bl	d7014 <malloc>
   d997a:	221a      	movs	r2, #26
   d997c:	6420      	str	r0, [r4, #64]	; 0x40
   d997e:	4629      	mov	r1, r5
   d9980:	f000 f9f1 	bl	d9d66 <memset>
   d9984:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9986:	4630      	mov	r0, r6
   d9988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d998c:	f000 b802 	b.w	d9994 <asctime_r>
   d9990:	2003dff0 	.word	0x2003dff0

000d9994 <asctime_r>:
   d9994:	b510      	push	{r4, lr}
   d9996:	460c      	mov	r4, r1
   d9998:	6941      	ldr	r1, [r0, #20]
   d999a:	6903      	ldr	r3, [r0, #16]
   d999c:	6982      	ldr	r2, [r0, #24]
   d999e:	b086      	sub	sp, #24
   d99a0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d99a4:	9104      	str	r1, [sp, #16]
   d99a6:	6801      	ldr	r1, [r0, #0]
   d99a8:	9103      	str	r1, [sp, #12]
   d99aa:	6841      	ldr	r1, [r0, #4]
   d99ac:	9102      	str	r1, [sp, #8]
   d99ae:	6881      	ldr	r1, [r0, #8]
   d99b0:	9101      	str	r1, [sp, #4]
   d99b2:	68c1      	ldr	r1, [r0, #12]
   d99b4:	9100      	str	r1, [sp, #0]
   d99b6:	4907      	ldr	r1, [pc, #28]	; (d99d4 <asctime_r+0x40>)
   d99b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d99bc:	440b      	add	r3, r1
   d99be:	4906      	ldr	r1, [pc, #24]	; (d99d8 <asctime_r+0x44>)
   d99c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d99c4:	440a      	add	r2, r1
   d99c6:	4620      	mov	r0, r4
   d99c8:	4904      	ldr	r1, [pc, #16]	; (d99dc <asctime_r+0x48>)
   d99ca:	f7fd fb3b 	bl	d7044 <siprintf>
   d99ce:	4620      	mov	r0, r4
   d99d0:	b006      	add	sp, #24
   d99d2:	bd10      	pop	{r4, pc}
   d99d4:	000dd956 	.word	0x000dd956
   d99d8:	000dd941 	.word	0x000dd941
   d99dc:	000dd97a 	.word	0x000dd97a

000d99e0 <atoi>:
   d99e0:	220a      	movs	r2, #10
   d99e2:	2100      	movs	r1, #0
   d99e4:	f002 b872 	b.w	dbacc <strtol>

000d99e8 <__cxa_atexit>:
   d99e8:	b510      	push	{r4, lr}
   d99ea:	4c05      	ldr	r4, [pc, #20]	; (d9a00 <__cxa_atexit+0x18>)
   d99ec:	4613      	mov	r3, r2
   d99ee:	b12c      	cbz	r4, d99fc <__cxa_atexit+0x14>
   d99f0:	460a      	mov	r2, r1
   d99f2:	4601      	mov	r1, r0
   d99f4:	2002      	movs	r0, #2
   d99f6:	f3af 8000 	nop.w
   d99fa:	bd10      	pop	{r4, pc}
   d99fc:	4620      	mov	r0, r4
   d99fe:	bd10      	pop	{r4, pc}
   d9a00:	00000000 	.word	0x00000000

000d9a04 <gmtime>:
   d9a04:	b538      	push	{r3, r4, r5, lr}
   d9a06:	4b07      	ldr	r3, [pc, #28]	; (d9a24 <gmtime+0x20>)
   d9a08:	681c      	ldr	r4, [r3, #0]
   d9a0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9a0c:	4605      	mov	r5, r0
   d9a0e:	b91b      	cbnz	r3, d9a18 <gmtime+0x14>
   d9a10:	2024      	movs	r0, #36	; 0x24
   d9a12:	f7fd faff 	bl	d7014 <malloc>
   d9a16:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9a18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9a1a:	4628      	mov	r0, r5
   d9a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9a20:	f000 b802 	b.w	d9a28 <gmtime_r>
   d9a24:	2003dff0 	.word	0x2003dff0

000d9a28 <gmtime_r>:
   d9a28:	6802      	ldr	r2, [r0, #0]
   d9a2a:	4b47      	ldr	r3, [pc, #284]	; (d9b48 <gmtime_r+0x120>)
   d9a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a2e:	fb92 f4f3 	sdiv	r4, r2, r3
   d9a32:	fb03 2214 	mls	r2, r3, r4, r2
   d9a36:	2a00      	cmp	r2, #0
   d9a38:	bfbc      	itt	lt
   d9a3a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9a3e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9a42:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9a46:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9a4a:	fb92 f3f0 	sdiv	r3, r2, r0
   d9a4e:	fb00 2213 	mls	r2, r0, r3, r2
   d9a52:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9a56:	bfac      	ite	ge
   d9a58:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9a5c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9a60:	608b      	str	r3, [r1, #8]
   d9a62:	fb92 f3f0 	sdiv	r3, r2, r0
   d9a66:	fb00 2213 	mls	r2, r0, r3, r2
   d9a6a:	604b      	str	r3, [r1, #4]
   d9a6c:	600a      	str	r2, [r1, #0]
   d9a6e:	2307      	movs	r3, #7
   d9a70:	1ce2      	adds	r2, r4, #3
   d9a72:	fb92 f3f3 	sdiv	r3, r2, r3
   d9a76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9a7a:	1ad3      	subs	r3, r2, r3
   d9a7c:	618b      	str	r3, [r1, #24]
   d9a7e:	4b33      	ldr	r3, [pc, #204]	; (d9b4c <gmtime_r+0x124>)
   d9a80:	4d33      	ldr	r5, [pc, #204]	; (d9b50 <gmtime_r+0x128>)
   d9a82:	fb94 f5f5 	sdiv	r5, r4, r5
   d9a86:	fb03 4405 	mla	r4, r3, r5, r4
   d9a8a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9a8e:	fbb4 f2f2 	udiv	r2, r4, r2
   d9a92:	4422      	add	r2, r4
   d9a94:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9a98:	fbb4 f3f7 	udiv	r3, r4, r7
   d9a9c:	1ad2      	subs	r2, r2, r3
   d9a9e:	482d      	ldr	r0, [pc, #180]	; (d9b54 <gmtime_r+0x12c>)
   d9aa0:	fbb4 f0f0 	udiv	r0, r4, r0
   d9aa4:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9aa8:	1a13      	subs	r3, r2, r0
   d9aaa:	fbb3 f6f6 	udiv	r6, r3, r6
   d9aae:	4434      	add	r4, r6
   d9ab0:	f240 126d 	movw	r2, #365	; 0x16d
   d9ab4:	fbb3 f0f2 	udiv	r0, r3, r2
   d9ab8:	fbb3 f3f7 	udiv	r3, r3, r7
   d9abc:	1ae3      	subs	r3, r4, r3
   d9abe:	fb02 3310 	mls	r3, r2, r0, r3
   d9ac2:	2499      	movs	r4, #153	; 0x99
   d9ac4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9ac8:	3202      	adds	r2, #2
   d9aca:	fbb2 f2f4 	udiv	r2, r2, r4
   d9ace:	2a0a      	cmp	r2, #10
   d9ad0:	fb04 f402 	mul.w	r4, r4, r2
   d9ad4:	f104 0602 	add.w	r6, r4, #2
   d9ad8:	f04f 0405 	mov.w	r4, #5
   d9adc:	fbb6 f4f4 	udiv	r4, r6, r4
   d9ae0:	bf34      	ite	cc
   d9ae2:	2602      	movcc	r6, #2
   d9ae4:	f06f 0609 	mvncs.w	r6, #9
   d9ae8:	4416      	add	r6, r2
   d9aea:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9aee:	fb02 0505 	mla	r5, r2, r5, r0
   d9af2:	1c5f      	adds	r7, r3, #1
   d9af4:	2e01      	cmp	r6, #1
   d9af6:	bf98      	it	ls
   d9af8:	3501      	addls	r5, #1
   d9afa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9afe:	eba7 0704 	sub.w	r7, r7, r4
   d9b02:	d302      	bcc.n	d9b0a <gmtime_r+0xe2>
   d9b04:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9b08:	e014      	b.n	d9b34 <gmtime_r+0x10c>
   d9b0a:	0782      	lsls	r2, r0, #30
   d9b0c:	d105      	bne.n	d9b1a <gmtime_r+0xf2>
   d9b0e:	2464      	movs	r4, #100	; 0x64
   d9b10:	fbb0 f2f4 	udiv	r2, r0, r4
   d9b14:	fb04 0212 	mls	r2, r4, r2, r0
   d9b18:	b94a      	cbnz	r2, d9b2e <gmtime_r+0x106>
   d9b1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9b1e:	fbb0 f4f2 	udiv	r4, r0, r2
   d9b22:	fb02 0014 	mls	r0, r2, r4, r0
   d9b26:	fab0 f280 	clz	r2, r0
   d9b2a:	0952      	lsrs	r2, r2, #5
   d9b2c:	e000      	b.n	d9b30 <gmtime_r+0x108>
   d9b2e:	2201      	movs	r2, #1
   d9b30:	333b      	adds	r3, #59	; 0x3b
   d9b32:	441a      	add	r2, r3
   d9b34:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9b38:	2300      	movs	r3, #0
   d9b3a:	61ca      	str	r2, [r1, #28]
   d9b3c:	614d      	str	r5, [r1, #20]
   d9b3e:	610e      	str	r6, [r1, #16]
   d9b40:	60cf      	str	r7, [r1, #12]
   d9b42:	620b      	str	r3, [r1, #32]
   d9b44:	4608      	mov	r0, r1
   d9b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9b48:	00015180 	.word	0x00015180
   d9b4c:	fffdc54f 	.word	0xfffdc54f
   d9b50:	00023ab1 	.word	0x00023ab1
   d9b54:	00023ab0 	.word	0x00023ab0

000d9b58 <localtime>:
   d9b58:	b538      	push	{r3, r4, r5, lr}
   d9b5a:	4b07      	ldr	r3, [pc, #28]	; (d9b78 <localtime+0x20>)
   d9b5c:	681c      	ldr	r4, [r3, #0]
   d9b5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9b60:	4605      	mov	r5, r0
   d9b62:	b91b      	cbnz	r3, d9b6c <localtime+0x14>
   d9b64:	2024      	movs	r0, #36	; 0x24
   d9b66:	f7fd fa55 	bl	d7014 <malloc>
   d9b6a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9b6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9b6e:	4628      	mov	r0, r5
   d9b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9b74:	f000 b802 	b.w	d9b7c <localtime_r>
   d9b78:	2003dff0 	.word	0x2003dff0

000d9b7c <localtime_r>:
   d9b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b80:	460c      	mov	r4, r1
   d9b82:	4680      	mov	r8, r0
   d9b84:	f002 fdee 	bl	dc764 <__gettzinfo>
   d9b88:	4621      	mov	r1, r4
   d9b8a:	4607      	mov	r7, r0
   d9b8c:	4640      	mov	r0, r8
   d9b8e:	f7ff ff4b 	bl	d9a28 <gmtime_r>
   d9b92:	6946      	ldr	r6, [r0, #20]
   d9b94:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9b98:	07b3      	lsls	r3, r6, #30
   d9b9a:	4604      	mov	r4, r0
   d9b9c:	d105      	bne.n	d9baa <localtime_r+0x2e>
   d9b9e:	2264      	movs	r2, #100	; 0x64
   d9ba0:	fb96 f3f2 	sdiv	r3, r6, r2
   d9ba4:	fb02 6313 	mls	r3, r2, r3, r6
   d9ba8:	b94b      	cbnz	r3, d9bbe <localtime_r+0x42>
   d9baa:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9bae:	fb96 f3f5 	sdiv	r3, r6, r5
   d9bb2:	fb05 6513 	mls	r5, r5, r3, r6
   d9bb6:	fab5 f385 	clz	r3, r5
   d9bba:	095b      	lsrs	r3, r3, #5
   d9bbc:	e000      	b.n	d9bc0 <localtime_r+0x44>
   d9bbe:	2301      	movs	r3, #1
   d9bc0:	4a5f      	ldr	r2, [pc, #380]	; (d9d40 <localtime_r+0x1c4>)
   d9bc2:	2530      	movs	r5, #48	; 0x30
   d9bc4:	fb05 2503 	mla	r5, r5, r3, r2
   d9bc8:	f002 f8ca 	bl	dbd60 <__tz_lock>
   d9bcc:	f002 f8ca 	bl	dbd64 <_tzset_unlocked>
   d9bd0:	4b5c      	ldr	r3, [pc, #368]	; (d9d44 <localtime_r+0x1c8>)
   d9bd2:	681b      	ldr	r3, [r3, #0]
   d9bd4:	b1f3      	cbz	r3, d9c14 <localtime_r+0x98>
   d9bd6:	687b      	ldr	r3, [r7, #4]
   d9bd8:	429e      	cmp	r6, r3
   d9bda:	d105      	bne.n	d9be8 <localtime_r+0x6c>
   d9bdc:	6839      	ldr	r1, [r7, #0]
   d9bde:	f8d8 3000 	ldr.w	r3, [r8]
   d9be2:	69fa      	ldr	r2, [r7, #28]
   d9be4:	b941      	cbnz	r1, d9bf8 <localtime_r+0x7c>
   d9be6:	e00a      	b.n	d9bfe <localtime_r+0x82>
   d9be8:	4630      	mov	r0, r6
   d9bea:	f002 f811 	bl	dbc10 <__tzcalc_limits>
   d9bee:	2800      	cmp	r0, #0
   d9bf0:	d1f4      	bne.n	d9bdc <localtime_r+0x60>
   d9bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9bf6:	e00d      	b.n	d9c14 <localtime_r+0x98>
   d9bf8:	4293      	cmp	r3, r2
   d9bfa:	db08      	blt.n	d9c0e <localtime_r+0x92>
   d9bfc:	e001      	b.n	d9c02 <localtime_r+0x86>
   d9bfe:	4293      	cmp	r3, r2
   d9c00:	da07      	bge.n	d9c12 <localtime_r+0x96>
   d9c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9c04:	4293      	cmp	r3, r2
   d9c06:	bfac      	ite	ge
   d9c08:	2300      	movge	r3, #0
   d9c0a:	2301      	movlt	r3, #1
   d9c0c:	e002      	b.n	d9c14 <localtime_r+0x98>
   d9c0e:	2300      	movs	r3, #0
   d9c10:	e000      	b.n	d9c14 <localtime_r+0x98>
   d9c12:	2301      	movs	r3, #1
   d9c14:	6223      	str	r3, [r4, #32]
   d9c16:	6a23      	ldr	r3, [r4, #32]
   d9c18:	2b01      	cmp	r3, #1
   d9c1a:	bf0c      	ite	eq
   d9c1c:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9c1e:	6a39      	ldrne	r1, [r7, #32]
   d9c20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9c24:	203c      	movs	r0, #60	; 0x3c
   d9c26:	fb91 f6f3 	sdiv	r6, r1, r3
   d9c2a:	fb03 1316 	mls	r3, r3, r6, r1
   d9c2e:	6861      	ldr	r1, [r4, #4]
   d9c30:	fb93 f2f0 	sdiv	r2, r3, r0
   d9c34:	fb00 3012 	mls	r0, r0, r2, r3
   d9c38:	6823      	ldr	r3, [r4, #0]
   d9c3a:	1a89      	subs	r1, r1, r2
   d9c3c:	68a2      	ldr	r2, [r4, #8]
   d9c3e:	6061      	str	r1, [r4, #4]
   d9c40:	1a1b      	subs	r3, r3, r0
   d9c42:	1b92      	subs	r2, r2, r6
   d9c44:	2b3b      	cmp	r3, #59	; 0x3b
   d9c46:	6023      	str	r3, [r4, #0]
   d9c48:	60a2      	str	r2, [r4, #8]
   d9c4a:	dd03      	ble.n	d9c54 <localtime_r+0xd8>
   d9c4c:	3101      	adds	r1, #1
   d9c4e:	6061      	str	r1, [r4, #4]
   d9c50:	3b3c      	subs	r3, #60	; 0x3c
   d9c52:	e004      	b.n	d9c5e <localtime_r+0xe2>
   d9c54:	2b00      	cmp	r3, #0
   d9c56:	da03      	bge.n	d9c60 <localtime_r+0xe4>
   d9c58:	3901      	subs	r1, #1
   d9c5a:	6061      	str	r1, [r4, #4]
   d9c5c:	333c      	adds	r3, #60	; 0x3c
   d9c5e:	6023      	str	r3, [r4, #0]
   d9c60:	6863      	ldr	r3, [r4, #4]
   d9c62:	2b3b      	cmp	r3, #59	; 0x3b
   d9c64:	dd03      	ble.n	d9c6e <localtime_r+0xf2>
   d9c66:	3201      	adds	r2, #1
   d9c68:	60a2      	str	r2, [r4, #8]
   d9c6a:	3b3c      	subs	r3, #60	; 0x3c
   d9c6c:	e004      	b.n	d9c78 <localtime_r+0xfc>
   d9c6e:	2b00      	cmp	r3, #0
   d9c70:	da03      	bge.n	d9c7a <localtime_r+0xfe>
   d9c72:	3a01      	subs	r2, #1
   d9c74:	60a2      	str	r2, [r4, #8]
   d9c76:	333c      	adds	r3, #60	; 0x3c
   d9c78:	6063      	str	r3, [r4, #4]
   d9c7a:	68a3      	ldr	r3, [r4, #8]
   d9c7c:	2b17      	cmp	r3, #23
   d9c7e:	dd22      	ble.n	d9cc6 <localtime_r+0x14a>
   d9c80:	69e2      	ldr	r2, [r4, #28]
   d9c82:	3201      	adds	r2, #1
   d9c84:	61e2      	str	r2, [r4, #28]
   d9c86:	69a2      	ldr	r2, [r4, #24]
   d9c88:	3201      	adds	r2, #1
   d9c8a:	2a06      	cmp	r2, #6
   d9c8c:	bfc8      	it	gt
   d9c8e:	2200      	movgt	r2, #0
   d9c90:	61a2      	str	r2, [r4, #24]
   d9c92:	68e2      	ldr	r2, [r4, #12]
   d9c94:	3b18      	subs	r3, #24
   d9c96:	3201      	adds	r2, #1
   d9c98:	60a3      	str	r3, [r4, #8]
   d9c9a:	6923      	ldr	r3, [r4, #16]
   d9c9c:	60e2      	str	r2, [r4, #12]
   d9c9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9ca2:	428a      	cmp	r2, r1
   d9ca4:	dd46      	ble.n	d9d34 <localtime_r+0x1b8>
   d9ca6:	3301      	adds	r3, #1
   d9ca8:	2b0c      	cmp	r3, #12
   d9caa:	bf0c      	ite	eq
   d9cac:	6963      	ldreq	r3, [r4, #20]
   d9cae:	6123      	strne	r3, [r4, #16]
   d9cb0:	eba2 0201 	sub.w	r2, r2, r1
   d9cb4:	60e2      	str	r2, [r4, #12]
   d9cb6:	bf01      	itttt	eq
   d9cb8:	3301      	addeq	r3, #1
   d9cba:	2200      	moveq	r2, #0
   d9cbc:	6122      	streq	r2, [r4, #16]
   d9cbe:	6163      	streq	r3, [r4, #20]
   d9cc0:	bf08      	it	eq
   d9cc2:	61e2      	streq	r2, [r4, #28]
   d9cc4:	e036      	b.n	d9d34 <localtime_r+0x1b8>
   d9cc6:	2b00      	cmp	r3, #0
   d9cc8:	da34      	bge.n	d9d34 <localtime_r+0x1b8>
   d9cca:	69e2      	ldr	r2, [r4, #28]
   d9ccc:	3a01      	subs	r2, #1
   d9cce:	61e2      	str	r2, [r4, #28]
   d9cd0:	69a2      	ldr	r2, [r4, #24]
   d9cd2:	3a01      	subs	r2, #1
   d9cd4:	bf48      	it	mi
   d9cd6:	2206      	movmi	r2, #6
   d9cd8:	61a2      	str	r2, [r4, #24]
   d9cda:	68e2      	ldr	r2, [r4, #12]
   d9cdc:	3318      	adds	r3, #24
   d9cde:	3a01      	subs	r2, #1
   d9ce0:	60e2      	str	r2, [r4, #12]
   d9ce2:	60a3      	str	r3, [r4, #8]
   d9ce4:	bb32      	cbnz	r2, d9d34 <localtime_r+0x1b8>
   d9ce6:	6923      	ldr	r3, [r4, #16]
   d9ce8:	3b01      	subs	r3, #1
   d9cea:	d401      	bmi.n	d9cf0 <localtime_r+0x174>
   d9cec:	6123      	str	r3, [r4, #16]
   d9cee:	e01d      	b.n	d9d2c <localtime_r+0x1b0>
   d9cf0:	230b      	movs	r3, #11
   d9cf2:	6123      	str	r3, [r4, #16]
   d9cf4:	6963      	ldr	r3, [r4, #20]
   d9cf6:	1e5a      	subs	r2, r3, #1
   d9cf8:	f012 0f03 	tst.w	r2, #3
   d9cfc:	6162      	str	r2, [r4, #20]
   d9cfe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9d02:	d105      	bne.n	d9d10 <localtime_r+0x194>
   d9d04:	2164      	movs	r1, #100	; 0x64
   d9d06:	fb93 f2f1 	sdiv	r2, r3, r1
   d9d0a:	fb01 3212 	mls	r2, r1, r2, r3
   d9d0e:	b94a      	cbnz	r2, d9d24 <localtime_r+0x1a8>
   d9d10:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9d14:	fb93 f2f1 	sdiv	r2, r3, r1
   d9d18:	fb01 3312 	mls	r3, r1, r2, r3
   d9d1c:	fab3 f383 	clz	r3, r3
   d9d20:	095b      	lsrs	r3, r3, #5
   d9d22:	e000      	b.n	d9d26 <localtime_r+0x1aa>
   d9d24:	2301      	movs	r3, #1
   d9d26:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9d2a:	61e3      	str	r3, [r4, #28]
   d9d2c:	6923      	ldr	r3, [r4, #16]
   d9d2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9d32:	60e3      	str	r3, [r4, #12]
   d9d34:	f002 f815 	bl	dbd62 <__tz_unlock>
   d9d38:	4620      	mov	r0, r4
   d9d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9d3e:	bf00      	nop
   d9d40:	000ddb64 	.word	0x000ddb64
   d9d44:	2003e7e4 	.word	0x2003e7e4

000d9d48 <_localeconv_r>:
   d9d48:	4800      	ldr	r0, [pc, #0]	; (d9d4c <_localeconv_r+0x4>)
   d9d4a:	4770      	bx	lr
   d9d4c:	2003dff4 	.word	0x2003dff4

000d9d50 <memcpy>:
   d9d50:	b510      	push	{r4, lr}
   d9d52:	1e43      	subs	r3, r0, #1
   d9d54:	440a      	add	r2, r1
   d9d56:	4291      	cmp	r1, r2
   d9d58:	d004      	beq.n	d9d64 <memcpy+0x14>
   d9d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9d62:	e7f8      	b.n	d9d56 <memcpy+0x6>
   d9d64:	bd10      	pop	{r4, pc}

000d9d66 <memset>:
   d9d66:	4402      	add	r2, r0
   d9d68:	4603      	mov	r3, r0
   d9d6a:	4293      	cmp	r3, r2
   d9d6c:	d002      	beq.n	d9d74 <memset+0xe>
   d9d6e:	f803 1b01 	strb.w	r1, [r3], #1
   d9d72:	e7fa      	b.n	d9d6a <memset+0x4>
   d9d74:	4770      	bx	lr
	...

000d9d78 <validate_structure>:
   d9d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9d7a:	6801      	ldr	r1, [r0, #0]
   d9d7c:	293b      	cmp	r1, #59	; 0x3b
   d9d7e:	4604      	mov	r4, r0
   d9d80:	d911      	bls.n	d9da6 <validate_structure+0x2e>
   d9d82:	223c      	movs	r2, #60	; 0x3c
   d9d84:	4668      	mov	r0, sp
   d9d86:	f002 f977 	bl	dc078 <div>
   d9d8a:	9a01      	ldr	r2, [sp, #4]
   d9d8c:	6863      	ldr	r3, [r4, #4]
   d9d8e:	9900      	ldr	r1, [sp, #0]
   d9d90:	2a00      	cmp	r2, #0
   d9d92:	440b      	add	r3, r1
   d9d94:	6063      	str	r3, [r4, #4]
   d9d96:	bfbb      	ittet	lt
   d9d98:	323c      	addlt	r2, #60	; 0x3c
   d9d9a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9d9e:	6022      	strge	r2, [r4, #0]
   d9da0:	6022      	strlt	r2, [r4, #0]
   d9da2:	bfb8      	it	lt
   d9da4:	6063      	strlt	r3, [r4, #4]
   d9da6:	6861      	ldr	r1, [r4, #4]
   d9da8:	293b      	cmp	r1, #59	; 0x3b
   d9daa:	d911      	bls.n	d9dd0 <validate_structure+0x58>
   d9dac:	223c      	movs	r2, #60	; 0x3c
   d9dae:	4668      	mov	r0, sp
   d9db0:	f002 f962 	bl	dc078 <div>
   d9db4:	9a01      	ldr	r2, [sp, #4]
   d9db6:	68a1      	ldr	r1, [r4, #8]
   d9db8:	9b00      	ldr	r3, [sp, #0]
   d9dba:	2a00      	cmp	r2, #0
   d9dbc:	440b      	add	r3, r1
   d9dbe:	60a3      	str	r3, [r4, #8]
   d9dc0:	bfbb      	ittet	lt
   d9dc2:	323c      	addlt	r2, #60	; 0x3c
   d9dc4:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9dc8:	6062      	strge	r2, [r4, #4]
   d9dca:	6062      	strlt	r2, [r4, #4]
   d9dcc:	bfb8      	it	lt
   d9dce:	60a3      	strlt	r3, [r4, #8]
   d9dd0:	68a1      	ldr	r1, [r4, #8]
   d9dd2:	2917      	cmp	r1, #23
   d9dd4:	d911      	bls.n	d9dfa <validate_structure+0x82>
   d9dd6:	2218      	movs	r2, #24
   d9dd8:	4668      	mov	r0, sp
   d9dda:	f002 f94d 	bl	dc078 <div>
   d9dde:	9a01      	ldr	r2, [sp, #4]
   d9de0:	68e1      	ldr	r1, [r4, #12]
   d9de2:	9b00      	ldr	r3, [sp, #0]
   d9de4:	2a00      	cmp	r2, #0
   d9de6:	440b      	add	r3, r1
   d9de8:	60e3      	str	r3, [r4, #12]
   d9dea:	bfbb      	ittet	lt
   d9dec:	3218      	addlt	r2, #24
   d9dee:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9df2:	60a2      	strge	r2, [r4, #8]
   d9df4:	60a2      	strlt	r2, [r4, #8]
   d9df6:	bfb8      	it	lt
   d9df8:	60e3      	strlt	r3, [r4, #12]
   d9dfa:	6921      	ldr	r1, [r4, #16]
   d9dfc:	290b      	cmp	r1, #11
   d9dfe:	d911      	bls.n	d9e24 <validate_structure+0xac>
   d9e00:	220c      	movs	r2, #12
   d9e02:	4668      	mov	r0, sp
   d9e04:	f002 f938 	bl	dc078 <div>
   d9e08:	9a01      	ldr	r2, [sp, #4]
   d9e0a:	6961      	ldr	r1, [r4, #20]
   d9e0c:	9b00      	ldr	r3, [sp, #0]
   d9e0e:	2a00      	cmp	r2, #0
   d9e10:	440b      	add	r3, r1
   d9e12:	6163      	str	r3, [r4, #20]
   d9e14:	bfbb      	ittet	lt
   d9e16:	320c      	addlt	r2, #12
   d9e18:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9e1c:	6122      	strge	r2, [r4, #16]
   d9e1e:	6122      	strlt	r2, [r4, #16]
   d9e20:	bfb8      	it	lt
   d9e22:	6163      	strlt	r3, [r4, #20]
   d9e24:	6963      	ldr	r3, [r4, #20]
   d9e26:	0799      	lsls	r1, r3, #30
   d9e28:	d112      	bne.n	d9e50 <validate_structure+0xd8>
   d9e2a:	2164      	movs	r1, #100	; 0x64
   d9e2c:	fb93 f2f1 	sdiv	r2, r3, r1
   d9e30:	fb01 3212 	mls	r2, r1, r2, r3
   d9e34:	b972      	cbnz	r2, d9e54 <validate_structure+0xdc>
   d9e36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9e3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9e3e:	fb93 f2f1 	sdiv	r2, r3, r1
   d9e42:	fb01 3312 	mls	r3, r1, r2, r3
   d9e46:	2b00      	cmp	r3, #0
   d9e48:	bf14      	ite	ne
   d9e4a:	231c      	movne	r3, #28
   d9e4c:	231d      	moveq	r3, #29
   d9e4e:	e002      	b.n	d9e56 <validate_structure+0xde>
   d9e50:	231c      	movs	r3, #28
   d9e52:	e000      	b.n	d9e56 <validate_structure+0xde>
   d9e54:	231d      	movs	r3, #29
   d9e56:	68e2      	ldr	r2, [r4, #12]
   d9e58:	2a00      	cmp	r2, #0
   d9e5a:	dd06      	ble.n	d9e6a <validate_structure+0xf2>
   d9e5c:	4f33      	ldr	r7, [pc, #204]	; (d9f2c <validate_structure+0x1b4>)
   d9e5e:	f04f 0e00 	mov.w	lr, #0
   d9e62:	2564      	movs	r5, #100	; 0x64
   d9e64:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9e68:	e039      	b.n	d9ede <validate_structure+0x166>
   d9e6a:	4f30      	ldr	r7, [pc, #192]	; (d9f2c <validate_structure+0x1b4>)
   d9e6c:	260b      	movs	r6, #11
   d9e6e:	2064      	movs	r0, #100	; 0x64
   d9e70:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9e74:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d9e78:	f1be 0f00 	cmp.w	lr, #0
   d9e7c:	dc53      	bgt.n	d9f26 <validate_structure+0x1ae>
   d9e7e:	6921      	ldr	r1, [r4, #16]
   d9e80:	3901      	subs	r1, #1
   d9e82:	6121      	str	r1, [r4, #16]
   d9e84:	3101      	adds	r1, #1
   d9e86:	d118      	bne.n	d9eba <validate_structure+0x142>
   d9e88:	6963      	ldr	r3, [r4, #20]
   d9e8a:	6126      	str	r6, [r4, #16]
   d9e8c:	1e59      	subs	r1, r3, #1
   d9e8e:	078a      	lsls	r2, r1, #30
   d9e90:	6161      	str	r1, [r4, #20]
   d9e92:	d10f      	bne.n	d9eb4 <validate_structure+0x13c>
   d9e94:	fb91 f2f0 	sdiv	r2, r1, r0
   d9e98:	fb00 1112 	mls	r1, r0, r2, r1
   d9e9c:	b961      	cbnz	r1, d9eb8 <validate_structure+0x140>
   d9e9e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9ea2:	fb93 f2f5 	sdiv	r2, r3, r5
   d9ea6:	fb05 3312 	mls	r3, r5, r2, r3
   d9eaa:	2b00      	cmp	r3, #0
   d9eac:	bf14      	ite	ne
   d9eae:	231c      	movne	r3, #28
   d9eb0:	231d      	moveq	r3, #29
   d9eb2:	e002      	b.n	d9eba <validate_structure+0x142>
   d9eb4:	231c      	movs	r3, #28
   d9eb6:	e000      	b.n	d9eba <validate_structure+0x142>
   d9eb8:	231d      	movs	r3, #29
   d9eba:	6922      	ldr	r2, [r4, #16]
   d9ebc:	2a01      	cmp	r2, #1
   d9ebe:	bf14      	ite	ne
   d9ec0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d9ec4:	461a      	moveq	r2, r3
   d9ec6:	4472      	add	r2, lr
   d9ec8:	60e2      	str	r2, [r4, #12]
   d9eca:	e7d3      	b.n	d9e74 <validate_structure+0xfc>
   d9ecc:	428b      	cmp	r3, r1
   d9ece:	da2a      	bge.n	d9f26 <validate_structure+0x1ae>
   d9ed0:	4618      	mov	r0, r3
   d9ed2:	3201      	adds	r2, #1
   d9ed4:	1a09      	subs	r1, r1, r0
   d9ed6:	2a0c      	cmp	r2, #12
   d9ed8:	60e1      	str	r1, [r4, #12]
   d9eda:	6122      	str	r2, [r4, #16]
   d9edc:	d008      	beq.n	d9ef0 <validate_structure+0x178>
   d9ede:	6922      	ldr	r2, [r4, #16]
   d9ee0:	68e1      	ldr	r1, [r4, #12]
   d9ee2:	2a01      	cmp	r2, #1
   d9ee4:	d0f2      	beq.n	d9ecc <validate_structure+0x154>
   d9ee6:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d9eea:	4281      	cmp	r1, r0
   d9eec:	dcf1      	bgt.n	d9ed2 <validate_structure+0x15a>
   d9eee:	e01a      	b.n	d9f26 <validate_structure+0x1ae>
   d9ef0:	6963      	ldr	r3, [r4, #20]
   d9ef2:	f8c4 e010 	str.w	lr, [r4, #16]
   d9ef6:	1c5a      	adds	r2, r3, #1
   d9ef8:	0791      	lsls	r1, r2, #30
   d9efa:	6162      	str	r2, [r4, #20]
   d9efc:	d10f      	bne.n	d9f1e <validate_structure+0x1a6>
   d9efe:	fb92 f1f5 	sdiv	r1, r2, r5
   d9f02:	fb05 2211 	mls	r2, r5, r1, r2
   d9f06:	b962      	cbnz	r2, d9f22 <validate_structure+0x1aa>
   d9f08:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d9f0c:	fb93 f2f6 	sdiv	r2, r3, r6
   d9f10:	fb06 3312 	mls	r3, r6, r2, r3
   d9f14:	2b00      	cmp	r3, #0
   d9f16:	bf14      	ite	ne
   d9f18:	231c      	movne	r3, #28
   d9f1a:	231d      	moveq	r3, #29
   d9f1c:	e7df      	b.n	d9ede <validate_structure+0x166>
   d9f1e:	231c      	movs	r3, #28
   d9f20:	e7dd      	b.n	d9ede <validate_structure+0x166>
   d9f22:	231d      	movs	r3, #29
   d9f24:	e7db      	b.n	d9ede <validate_structure+0x166>
   d9f26:	b003      	add	sp, #12
   d9f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9f2a:	bf00      	nop
   d9f2c:	000ddb34 	.word	0x000ddb34

000d9f30 <mktime>:
   d9f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f34:	4605      	mov	r5, r0
   d9f36:	f002 fc15 	bl	dc764 <__gettzinfo>
   d9f3a:	4681      	mov	r9, r0
   d9f3c:	4628      	mov	r0, r5
   d9f3e:	f7ff ff1b 	bl	d9d78 <validate_structure>
   d9f42:	e895 000c 	ldmia.w	r5, {r2, r3}
   d9f46:	213c      	movs	r1, #60	; 0x3c
   d9f48:	fb01 2303 	mla	r3, r1, r3, r2
   d9f4c:	68aa      	ldr	r2, [r5, #8]
   d9f4e:	68ec      	ldr	r4, [r5, #12]
   d9f50:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d9f54:	fb08 3102 	mla	r1, r8, r2, r3
   d9f58:	692b      	ldr	r3, [r5, #16]
   d9f5a:	4aab      	ldr	r2, [pc, #684]	; (da208 <mktime+0x2d8>)
   d9f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d9f60:	3c01      	subs	r4, #1
   d9f62:	2b01      	cmp	r3, #1
   d9f64:	4414      	add	r4, r2
   d9f66:	696b      	ldr	r3, [r5, #20]
   d9f68:	dd11      	ble.n	d9f8e <mktime+0x5e>
   d9f6a:	079e      	lsls	r6, r3, #30
   d9f6c:	d10f      	bne.n	d9f8e <mktime+0x5e>
   d9f6e:	2064      	movs	r0, #100	; 0x64
   d9f70:	fb93 f2f0 	sdiv	r2, r3, r0
   d9f74:	fb00 3212 	mls	r2, r0, r2, r3
   d9f78:	b942      	cbnz	r2, d9f8c <mktime+0x5c>
   d9f7a:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d9f7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9f82:	fb96 f0f2 	sdiv	r0, r6, r2
   d9f86:	fb02 6210 	mls	r2, r2, r0, r6
   d9f8a:	b902      	cbnz	r2, d9f8e <mktime+0x5e>
   d9f8c:	3401      	adds	r4, #1
   d9f8e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   d9f92:	3210      	adds	r2, #16
   d9f94:	f644 6020 	movw	r0, #20000	; 0x4e20
   d9f98:	4282      	cmp	r2, r0
   d9f9a:	61ec      	str	r4, [r5, #28]
   d9f9c:	461f      	mov	r7, r3
   d9f9e:	f200 812e 	bhi.w	da1fe <mktime+0x2ce>
   d9fa2:	2b46      	cmp	r3, #70	; 0x46
   d9fa4:	dd22      	ble.n	d9fec <mktime+0xbc>
   d9fa6:	2246      	movs	r2, #70	; 0x46
   d9fa8:	f240 1c6d 	movw	ip, #365	; 0x16d
   d9fac:	2664      	movs	r6, #100	; 0x64
   d9fae:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   d9fb2:	0790      	lsls	r0, r2, #30
   d9fb4:	d110      	bne.n	d9fd8 <mktime+0xa8>
   d9fb6:	fb92 f0f6 	sdiv	r0, r2, r6
   d9fba:	fb06 2010 	mls	r0, r6, r0, r2
   d9fbe:	b970      	cbnz	r0, d9fde <mktime+0xae>
   d9fc0:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   d9fc4:	fb98 f0fe 	sdiv	r0, r8, lr
   d9fc8:	fb0e 8010 	mls	r0, lr, r0, r8
   d9fcc:	2800      	cmp	r0, #0
   d9fce:	bf14      	ite	ne
   d9fd0:	4660      	movne	r0, ip
   d9fd2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d9fd6:	e004      	b.n	d9fe2 <mktime+0xb2>
   d9fd8:	f240 106d 	movw	r0, #365	; 0x16d
   d9fdc:	e001      	b.n	d9fe2 <mktime+0xb2>
   d9fde:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d9fe2:	3201      	adds	r2, #1
   d9fe4:	4293      	cmp	r3, r2
   d9fe6:	4404      	add	r4, r0
   d9fe8:	d1e3      	bne.n	d9fb2 <mktime+0x82>
   d9fea:	e044      	b.n	da076 <mktime+0x146>
   d9fec:	d043      	beq.n	da076 <mktime+0x146>
   d9fee:	2245      	movs	r2, #69	; 0x45
   d9ff0:	f240 1e6d 	movw	lr, #365	; 0x16d
   d9ff4:	2664      	movs	r6, #100	; 0x64
   d9ff6:	f44f 77c8 	mov.w	r7, #400	; 0x190
   d9ffa:	429a      	cmp	r2, r3
   d9ffc:	dd1a      	ble.n	da034 <mktime+0x104>
   d9ffe:	0790      	lsls	r0, r2, #30
   da000:	d110      	bne.n	da024 <mktime+0xf4>
   da002:	fb92 f0f6 	sdiv	r0, r2, r6
   da006:	fb06 2010 	mls	r0, r6, r0, r2
   da00a:	b970      	cbnz	r0, da02a <mktime+0xfa>
   da00c:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   da010:	fb9c f0f7 	sdiv	r0, ip, r7
   da014:	fb07 c010 	mls	r0, r7, r0, ip
   da018:	2800      	cmp	r0, #0
   da01a:	bf14      	ite	ne
   da01c:	4670      	movne	r0, lr
   da01e:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da022:	e004      	b.n	da02e <mktime+0xfe>
   da024:	f240 106d 	movw	r0, #365	; 0x16d
   da028:	e001      	b.n	da02e <mktime+0xfe>
   da02a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da02e:	1a24      	subs	r4, r4, r0
   da030:	3a01      	subs	r2, #1
   da032:	e7e2      	b.n	d9ffa <mktime+0xca>
   da034:	2b45      	cmp	r3, #69	; 0x45
   da036:	bfa8      	it	ge
   da038:	2345      	movge	r3, #69	; 0x45
   da03a:	079e      	lsls	r6, r3, #30
   da03c:	461f      	mov	r7, r3
   da03e:	d114      	bne.n	da06a <mktime+0x13a>
   da040:	2264      	movs	r2, #100	; 0x64
   da042:	fb93 f3f2 	sdiv	r3, r3, r2
   da046:	fb02 7313 	mls	r3, r2, r3, r7
   da04a:	b98b      	cbnz	r3, da070 <mktime+0x140>
   da04c:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   da050:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da054:	fb90 f2f3 	sdiv	r2, r0, r3
   da058:	fb03 0312 	mls	r3, r3, r2, r0
   da05c:	2b00      	cmp	r3, #0
   da05e:	f240 136d 	movw	r3, #365	; 0x16d
   da062:	bf08      	it	eq
   da064:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   da068:	e004      	b.n	da074 <mktime+0x144>
   da06a:	f240 136d 	movw	r3, #365	; 0x16d
   da06e:	e001      	b.n	da074 <mktime+0x144>
   da070:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   da074:	1ae4      	subs	r4, r4, r3
   da076:	4865      	ldr	r0, [pc, #404]	; (da20c <mktime+0x2dc>)
   da078:	fb00 1804 	mla	r8, r0, r4, r1
   da07c:	f001 fe70 	bl	dbd60 <__tz_lock>
   da080:	f001 fe70 	bl	dbd64 <_tzset_unlocked>
   da084:	4b62      	ldr	r3, [pc, #392]	; (da210 <mktime+0x2e0>)
   da086:	681e      	ldr	r6, [r3, #0]
   da088:	2e00      	cmp	r6, #0
   da08a:	f000 80a4 	beq.w	da1d6 <mktime+0x2a6>
   da08e:	6a2b      	ldr	r3, [r5, #32]
   da090:	6968      	ldr	r0, [r5, #20]
   da092:	2b01      	cmp	r3, #1
   da094:	bfa8      	it	ge
   da096:	2301      	movge	r3, #1
   da098:	469a      	mov	sl, r3
   da09a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   da09e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da0a2:	4298      	cmp	r0, r3
   da0a4:	d10d      	bne.n	da0c2 <mktime+0x192>
   da0a6:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   da0aa:	f8d9 3020 	ldr.w	r3, [r9, #32]
   da0ae:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da0b2:	f8d9 101c 	ldr.w	r1, [r9, #28]
   da0b6:	1ad6      	subs	r6, r2, r3
   da0b8:	45b0      	cmp	r8, r6
   da0ba:	eba1 0100 	sub.w	r1, r1, r0
   da0be:	da05      	bge.n	da0cc <mktime+0x19c>
   da0c0:	e007      	b.n	da0d2 <mktime+0x1a2>
   da0c2:	f001 fda5 	bl	dbc10 <__tzcalc_limits>
   da0c6:	2800      	cmp	r0, #0
   da0c8:	d1ed      	bne.n	da0a6 <mktime+0x176>
   da0ca:	e076      	b.n	da1ba <mktime+0x28a>
   da0cc:	1a12      	subs	r2, r2, r0
   da0ce:	4590      	cmp	r8, r2
   da0d0:	db73      	blt.n	da1ba <mktime+0x28a>
   da0d2:	f8d9 2000 	ldr.w	r2, [r9]
   da0d6:	b112      	cbz	r2, da0de <mktime+0x1ae>
   da0d8:	4588      	cmp	r8, r1
   da0da:	db77      	blt.n	da1cc <mktime+0x29c>
   da0dc:	e001      	b.n	da0e2 <mktime+0x1b2>
   da0de:	4588      	cmp	r8, r1
   da0e0:	da07      	bge.n	da0f2 <mktime+0x1c2>
   da0e2:	45b0      	cmp	r8, r6
   da0e4:	bfac      	ite	ge
   da0e6:	2600      	movge	r6, #0
   da0e8:	2601      	movlt	r6, #1
   da0ea:	f1ba 0f00 	cmp.w	sl, #0
   da0ee:	da04      	bge.n	da0fa <mktime+0x1ca>
   da0f0:	e064      	b.n	da1bc <mktime+0x28c>
   da0f2:	f1ba 0f00 	cmp.w	sl, #0
   da0f6:	db63      	blt.n	da1c0 <mktime+0x290>
   da0f8:	2601      	movs	r6, #1
   da0fa:	ea8a 0a06 	eor.w	sl, sl, r6
   da0fe:	f1ba 0f01 	cmp.w	sl, #1
   da102:	d15b      	bne.n	da1bc <mktime+0x28c>
   da104:	1a1b      	subs	r3, r3, r0
   da106:	b906      	cbnz	r6, da10a <mktime+0x1da>
   da108:	425b      	negs	r3, r3
   da10a:	682a      	ldr	r2, [r5, #0]
   da10c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   da110:	441a      	add	r2, r3
   da112:	602a      	str	r2, [r5, #0]
   da114:	4628      	mov	r0, r5
   da116:	4498      	add	r8, r3
   da118:	f7ff fe2e 	bl	d9d78 <validate_structure>
   da11c:	68eb      	ldr	r3, [r5, #12]
   da11e:	ebb3 030a 	subs.w	r3, r3, sl
   da122:	d04b      	beq.n	da1bc <mktime+0x28c>
   da124:	2b01      	cmp	r3, #1
   da126:	dc03      	bgt.n	da130 <mktime+0x200>
   da128:	1c98      	adds	r0, r3, #2
   da12a:	bfd8      	it	le
   da12c:	2301      	movle	r3, #1
   da12e:	e001      	b.n	da134 <mktime+0x204>
   da130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da134:	69ea      	ldr	r2, [r5, #28]
   da136:	441c      	add	r4, r3
   da138:	189b      	adds	r3, r3, r2
   da13a:	d51d      	bpl.n	da178 <mktime+0x248>
   da13c:	1e7b      	subs	r3, r7, #1
   da13e:	0799      	lsls	r1, r3, #30
   da140:	d114      	bne.n	da16c <mktime+0x23c>
   da142:	2164      	movs	r1, #100	; 0x64
   da144:	fb93 f2f1 	sdiv	r2, r3, r1
   da148:	fb01 3312 	mls	r3, r1, r2, r3
   da14c:	b98b      	cbnz	r3, da172 <mktime+0x242>
   da14e:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   da152:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da156:	fb97 f3f2 	sdiv	r3, r7, r2
   da15a:	fb02 7713 	mls	r7, r2, r3, r7
   da15e:	2f00      	cmp	r7, #0
   da160:	f240 136d 	movw	r3, #365	; 0x16d
   da164:	bf18      	it	ne
   da166:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   da16a:	e024      	b.n	da1b6 <mktime+0x286>
   da16c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   da170:	e021      	b.n	da1b6 <mktime+0x286>
   da172:	f240 136d 	movw	r3, #365	; 0x16d
   da176:	e01e      	b.n	da1b6 <mktime+0x286>
   da178:	07ba      	lsls	r2, r7, #30
   da17a:	d114      	bne.n	da1a6 <mktime+0x276>
   da17c:	2164      	movs	r1, #100	; 0x64
   da17e:	fb97 f2f1 	sdiv	r2, r7, r1
   da182:	fb01 7212 	mls	r2, r1, r2, r7
   da186:	b98a      	cbnz	r2, da1ac <mktime+0x27c>
   da188:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   da18c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da190:	fb97 f2f1 	sdiv	r2, r7, r1
   da194:	fb01 7712 	mls	r7, r1, r2, r7
   da198:	2f00      	cmp	r7, #0
   da19a:	f240 126d 	movw	r2, #365	; 0x16d
   da19e:	bf08      	it	eq
   da1a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   da1a4:	e004      	b.n	da1b0 <mktime+0x280>
   da1a6:	f240 126d 	movw	r2, #365	; 0x16d
   da1aa:	e001      	b.n	da1b0 <mktime+0x280>
   da1ac:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   da1b0:	429a      	cmp	r2, r3
   da1b2:	bfd8      	it	le
   da1b4:	1a9b      	suble	r3, r3, r2
   da1b6:	61eb      	str	r3, [r5, #28]
   da1b8:	e000      	b.n	da1bc <mktime+0x28c>
   da1ba:	4656      	mov	r6, sl
   da1bc:	2e01      	cmp	r6, #1
   da1be:	d10a      	bne.n	da1d6 <mktime+0x2a6>
   da1c0:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da1c4:	2601      	movs	r6, #1
   da1c6:	eb08 0700 	add.w	r7, r8, r0
   da1ca:	e008      	b.n	da1de <mktime+0x2ae>
   da1cc:	f1ba 0f00 	cmp.w	sl, #0
   da1d0:	f04f 0600 	mov.w	r6, #0
   da1d4:	da91      	bge.n	da0fa <mktime+0x1ca>
   da1d6:	f8d9 0020 	ldr.w	r0, [r9, #32]
   da1da:	eb08 0700 	add.w	r7, r8, r0
   da1de:	f001 fdc0 	bl	dbd62 <__tz_unlock>
   da1e2:	3404      	adds	r4, #4
   da1e4:	2307      	movs	r3, #7
   da1e6:	fb94 f3f3 	sdiv	r3, r4, r3
   da1ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da1ee:	1ae4      	subs	r4, r4, r3
   da1f0:	bf48      	it	mi
   da1f2:	3407      	addmi	r4, #7
   da1f4:	622e      	str	r6, [r5, #32]
   da1f6:	61ac      	str	r4, [r5, #24]
   da1f8:	4638      	mov	r0, r7
   da1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da206:	bf00      	nop
   da208:	000ddb04 	.word	0x000ddb04
   da20c:	00015180 	.word	0x00015180
   da210:	2003e7e4 	.word	0x2003e7e4

000da214 <srand>:
   da214:	b538      	push	{r3, r4, r5, lr}
   da216:	4b12      	ldr	r3, [pc, #72]	; (da260 <srand+0x4c>)
   da218:	681c      	ldr	r4, [r3, #0]
   da21a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da21c:	4605      	mov	r5, r0
   da21e:	b9d3      	cbnz	r3, da256 <srand+0x42>
   da220:	2018      	movs	r0, #24
   da222:	f7fc fef7 	bl	d7014 <malloc>
   da226:	f243 330e 	movw	r3, #13070	; 0x330e
   da22a:	63a0      	str	r0, [r4, #56]	; 0x38
   da22c:	8003      	strh	r3, [r0, #0]
   da22e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da232:	8043      	strh	r3, [r0, #2]
   da234:	f241 2334 	movw	r3, #4660	; 0x1234
   da238:	8083      	strh	r3, [r0, #4]
   da23a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da23e:	80c3      	strh	r3, [r0, #6]
   da240:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da244:	8103      	strh	r3, [r0, #8]
   da246:	2305      	movs	r3, #5
   da248:	8143      	strh	r3, [r0, #10]
   da24a:	230b      	movs	r3, #11
   da24c:	8183      	strh	r3, [r0, #12]
   da24e:	2201      	movs	r2, #1
   da250:	2300      	movs	r3, #0
   da252:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da258:	2200      	movs	r2, #0
   da25a:	611d      	str	r5, [r3, #16]
   da25c:	615a      	str	r2, [r3, #20]
   da25e:	bd38      	pop	{r3, r4, r5, pc}
   da260:	2003dff0 	.word	0x2003dff0

000da264 <strcmp>:
   da264:	f810 2b01 	ldrb.w	r2, [r0], #1
   da268:	f811 3b01 	ldrb.w	r3, [r1], #1
   da26c:	2a01      	cmp	r2, #1
   da26e:	bf28      	it	cs
   da270:	429a      	cmpcs	r2, r3
   da272:	d0f7      	beq.n	da264 <strcmp>
   da274:	1ad0      	subs	r0, r2, r3
   da276:	4770      	bx	lr

000da278 <strcpy>:
   da278:	4603      	mov	r3, r0
   da27a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da27e:	f803 2b01 	strb.w	r2, [r3], #1
   da282:	2a00      	cmp	r2, #0
   da284:	d1f9      	bne.n	da27a <strcpy+0x2>
   da286:	4770      	bx	lr

000da288 <strdup>:
   da288:	4b02      	ldr	r3, [pc, #8]	; (da294 <strdup+0xc>)
   da28a:	4601      	mov	r1, r0
   da28c:	6818      	ldr	r0, [r3, #0]
   da28e:	f000 b803 	b.w	da298 <_strdup_r>
   da292:	bf00      	nop
   da294:	2003dff0 	.word	0x2003dff0

000da298 <_strdup_r>:
   da298:	b570      	push	{r4, r5, r6, lr}
   da29a:	4606      	mov	r6, r0
   da29c:	4608      	mov	r0, r1
   da29e:	460c      	mov	r4, r1
   da2a0:	f000 fd22 	bl	dace8 <strlen>
   da2a4:	1c45      	adds	r5, r0, #1
   da2a6:	4629      	mov	r1, r5
   da2a8:	4630      	mov	r0, r6
   da2aa:	f7fc fef3 	bl	d7094 <_malloc_r>
   da2ae:	4606      	mov	r6, r0
   da2b0:	b118      	cbz	r0, da2ba <_strdup_r+0x22>
   da2b2:	462a      	mov	r2, r5
   da2b4:	4621      	mov	r1, r4
   da2b6:	f7ff fd4b 	bl	d9d50 <memcpy>
   da2ba:	4630      	mov	r0, r6
   da2bc:	bd70      	pop	{r4, r5, r6, pc}

000da2be <iso_year_adjust>:
   da2be:	6941      	ldr	r1, [r0, #20]
   da2c0:	078b      	lsls	r3, r1, #30
   da2c2:	b510      	push	{r4, lr}
   da2c4:	d10c      	bne.n	da2e0 <iso_year_adjust+0x22>
   da2c6:	2900      	cmp	r1, #0
   da2c8:	f240 736c 	movw	r3, #1900	; 0x76c
   da2cc:	bfa8      	it	ge
   da2ce:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da2d2:	440b      	add	r3, r1
   da2d4:	2464      	movs	r4, #100	; 0x64
   da2d6:	fb93 f2f4 	sdiv	r2, r3, r4
   da2da:	fb04 3312 	mls	r3, r4, r2, r3
   da2de:	b983      	cbnz	r3, da302 <iso_year_adjust+0x44>
   da2e0:	2900      	cmp	r1, #0
   da2e2:	f240 736c 	movw	r3, #1900	; 0x76c
   da2e6:	bfa8      	it	ge
   da2e8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da2ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da2f0:	440b      	add	r3, r1
   da2f2:	fb93 f1f2 	sdiv	r1, r3, r2
   da2f6:	fb02 3311 	mls	r3, r2, r1, r3
   da2fa:	fab3 f283 	clz	r2, r3
   da2fe:	0952      	lsrs	r2, r2, #5
   da300:	e000      	b.n	da304 <iso_year_adjust+0x46>
   da302:	2201      	movs	r2, #1
   da304:	6983      	ldr	r3, [r0, #24]
   da306:	69c1      	ldr	r1, [r0, #28]
   da308:	005b      	lsls	r3, r3, #1
   da30a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da30e:	4413      	add	r3, r2
   da310:	2b21      	cmp	r3, #33	; 0x21
   da312:	dc0e      	bgt.n	da332 <iso_year_adjust+0x74>
   da314:	2b20      	cmp	r3, #32
   da316:	da2f      	bge.n	da378 <iso_year_adjust+0xba>
   da318:	2b0d      	cmp	r3, #13
   da31a:	dc02      	bgt.n	da322 <iso_year_adjust+0x64>
   da31c:	2b0a      	cmp	r3, #10
   da31e:	db05      	blt.n	da32c <iso_year_adjust+0x6e>
   da320:	e02a      	b.n	da378 <iso_year_adjust+0xba>
   da322:	2b10      	cmp	r3, #16
   da324:	db26      	blt.n	da374 <iso_year_adjust+0xb6>
   da326:	2b11      	cmp	r3, #17
   da328:	dd26      	ble.n	da378 <iso_year_adjust+0xba>
   da32a:	3b1c      	subs	r3, #28
   da32c:	2b01      	cmp	r3, #1
   da32e:	d923      	bls.n	da378 <iso_year_adjust+0xba>
   da330:	e020      	b.n	da374 <iso_year_adjust+0xb6>
   da332:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da336:	4293      	cmp	r3, r2
   da338:	dc0e      	bgt.n	da358 <iso_year_adjust+0x9a>
   da33a:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da33e:	4293      	cmp	r3, r2
   da340:	da16      	bge.n	da370 <iso_year_adjust+0xb2>
   da342:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da346:	4293      	cmp	r3, r2
   da348:	d012      	beq.n	da370 <iso_year_adjust+0xb2>
   da34a:	db13      	blt.n	da374 <iso_year_adjust+0xb6>
   da34c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da350:	3b12      	subs	r3, #18
   da352:	2b02      	cmp	r3, #2
   da354:	d90c      	bls.n	da370 <iso_year_adjust+0xb2>
   da356:	e00d      	b.n	da374 <iso_year_adjust+0xb6>
   da358:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da35c:	4293      	cmp	r3, r2
   da35e:	d007      	beq.n	da370 <iso_year_adjust+0xb2>
   da360:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da364:	4293      	cmp	r3, r2
   da366:	d003      	beq.n	da370 <iso_year_adjust+0xb2>
   da368:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da36c:	4293      	cmp	r3, r2
   da36e:	d101      	bne.n	da374 <iso_year_adjust+0xb6>
   da370:	2001      	movs	r0, #1
   da372:	bd10      	pop	{r4, pc}
   da374:	2000      	movs	r0, #0
   da376:	bd10      	pop	{r4, pc}
   da378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da37c:	bd10      	pop	{r4, pc}
	...

000da380 <strftime>:
   da380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da384:	b093      	sub	sp, #76	; 0x4c
   da386:	460e      	mov	r6, r1
   da388:	461d      	mov	r5, r3
   da38a:	4607      	mov	r7, r0
   da38c:	4691      	mov	r9, r2
   da38e:	f001 fc2f 	bl	dbbf0 <__get_current_time_locale>
   da392:	2300      	movs	r3, #0
   da394:	9306      	str	r3, [sp, #24]
   da396:	461c      	mov	r4, r3
   da398:	1e73      	subs	r3, r6, #1
   da39a:	9003      	str	r0, [sp, #12]
   da39c:	9302      	str	r3, [sp, #8]
   da39e:	f899 3000 	ldrb.w	r3, [r9]
   da3a2:	2b00      	cmp	r3, #0
   da3a4:	f000 8492 	beq.w	daccc <strftime+0x94c>
   da3a8:	2b25      	cmp	r3, #37	; 0x25
   da3aa:	d008      	beq.n	da3be <strftime+0x3e>
   da3ac:	9a02      	ldr	r2, [sp, #8]
   da3ae:	4294      	cmp	r4, r2
   da3b0:	f080 8490 	bcs.w	dacd4 <strftime+0x954>
   da3b4:	553b      	strb	r3, [r7, r4]
   da3b6:	f109 0901 	add.w	r9, r9, #1
   da3ba:	3401      	adds	r4, #1
   da3bc:	e7ef      	b.n	da39e <strftime+0x1e>
   da3be:	f899 a001 	ldrb.w	sl, [r9, #1]
   da3c2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da3c6:	d007      	beq.n	da3d8 <strftime+0x58>
   da3c8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da3cc:	d004      	beq.n	da3d8 <strftime+0x58>
   da3ce:	f109 0901 	add.w	r9, r9, #1
   da3d2:	f04f 0a00 	mov.w	sl, #0
   da3d6:	e001      	b.n	da3dc <strftime+0x5c>
   da3d8:	f109 0902 	add.w	r9, r9, #2
   da3dc:	f899 3000 	ldrb.w	r3, [r9]
   da3e0:	3b31      	subs	r3, #49	; 0x31
   da3e2:	2b08      	cmp	r3, #8
   da3e4:	d808      	bhi.n	da3f8 <strftime+0x78>
   da3e6:	4648      	mov	r0, r9
   da3e8:	220a      	movs	r2, #10
   da3ea:	a90a      	add	r1, sp, #40	; 0x28
   da3ec:	f001 fbf6 	bl	dbbdc <strtoul>
   da3f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da3f4:	4680      	mov	r8, r0
   da3f6:	e001      	b.n	da3fc <strftime+0x7c>
   da3f8:	f04f 0800 	mov.w	r8, #0
   da3fc:	f899 3000 	ldrb.w	r3, [r9]
   da400:	2b45      	cmp	r3, #69	; 0x45
   da402:	d001      	beq.n	da408 <strftime+0x88>
   da404:	2b4f      	cmp	r3, #79	; 0x4f
   da406:	d101      	bne.n	da40c <strftime+0x8c>
   da408:	f109 0901 	add.w	r9, r9, #1
   da40c:	f899 0000 	ldrb.w	r0, [r9]
   da410:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da414:	2b55      	cmp	r3, #85	; 0x55
   da416:	f200 845d 	bhi.w	dacd4 <strftime+0x954>
   da41a:	e8df f013 	tbh	[pc, r3, lsl #1]
   da41e:	044a      	.short	0x044a
   da420:	045b045b 	.word	0x045b045b
   da424:	045b045b 	.word	0x045b045b
   da428:	045b045b 	.word	0x045b045b
   da42c:	045b045b 	.word	0x045b045b
   da430:	045b045b 	.word	0x045b045b
   da434:	045b045b 	.word	0x045b045b
   da438:	045b045b 	.word	0x045b045b
   da43c:	045b045b 	.word	0x045b045b
   da440:	045b045b 	.word	0x045b045b
   da444:	045b045b 	.word	0x045b045b
   da448:	045b045b 	.word	0x045b045b
   da44c:	045b045b 	.word	0x045b045b
   da450:	045b045b 	.word	0x045b045b
   da454:	006f045b 	.word	0x006f045b
   da458:	00d400a1 	.word	0x00d400a1
   da45c:	045b011a 	.word	0x045b011a
   da460:	01a0013f 	.word	0x01a0013f
   da464:	022d0226 	.word	0x022d0226
   da468:	045b045b 	.word	0x045b045b
   da46c:	0260045b 	.word	0x0260045b
   da470:	045b045b 	.word	0x045b045b
   da474:	045b0268 	.word	0x045b0268
   da478:	031d0297 	.word	0x031d0297
   da47c:	033b0325 	.word	0x033b0325
   da480:	03860343 	.word	0x03860343
   da484:	03a000c6 	.word	0x03a000c6
   da488:	045b041f 	.word	0x045b041f
   da48c:	045b045b 	.word	0x045b045b
   da490:	045b045b 	.word	0x045b045b
   da494:	0056045b 	.word	0x0056045b
   da498:	00ba0089 	.word	0x00ba0089
   da49c:	010c010c 	.word	0x010c010c
   da4a0:	0171045b 	.word	0x0171045b
   da4a4:	045b0089 	.word	0x045b0089
   da4a8:	0226023d 	.word	0x0226023d
   da4ac:	025d022d 	.word	0x025d022d
   da4b0:	045b0262 	.word	0x045b0262
   da4b4:	045b0268 	.word	0x045b0268
   da4b8:	029c00be 	.word	0x029c00be
   da4bc:	032e031f 	.word	0x032e031f
   da4c0:	037f045b 	.word	0x037f045b
   da4c4:	039200c2 	.word	0x039200c2
   da4c8:	03e7      	.short	0x03e7
   da4ca:	69ab      	ldr	r3, [r5, #24]
   da4cc:	9a03      	ldr	r2, [sp, #12]
   da4ce:	3318      	adds	r3, #24
   da4d0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da4d4:	4640      	mov	r0, r8
   da4d6:	f000 fc07 	bl	dace8 <strlen>
   da4da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da4de:	193b      	adds	r3, r7, r4
   da4e0:	4420      	add	r0, r4
   da4e2:	4284      	cmp	r4, r0
   da4e4:	f000 83eb 	beq.w	dacbe <strftime+0x93e>
   da4e8:	9a02      	ldr	r2, [sp, #8]
   da4ea:	4294      	cmp	r4, r2
   da4ec:	f080 83f2 	bcs.w	dacd4 <strftime+0x954>
   da4f0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da4f4:	f803 2b01 	strb.w	r2, [r3], #1
   da4f8:	3401      	adds	r4, #1
   da4fa:	e7f2      	b.n	da4e2 <strftime+0x162>
   da4fc:	69ab      	ldr	r3, [r5, #24]
   da4fe:	9a03      	ldr	r2, [sp, #12]
   da500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da504:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   da508:	4640      	mov	r0, r8
   da50a:	f000 fbed 	bl	dace8 <strlen>
   da50e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da512:	193b      	adds	r3, r7, r4
   da514:	4420      	add	r0, r4
   da516:	4284      	cmp	r4, r0
   da518:	f000 83d1 	beq.w	dacbe <strftime+0x93e>
   da51c:	9a02      	ldr	r2, [sp, #8]
   da51e:	4294      	cmp	r4, r2
   da520:	f080 83d8 	bcs.w	dacd4 <strftime+0x954>
   da524:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da528:	f803 2b01 	strb.w	r2, [r3], #1
   da52c:	3401      	adds	r4, #1
   da52e:	e7f2      	b.n	da516 <strftime+0x196>
   da530:	692b      	ldr	r3, [r5, #16]
   da532:	9a03      	ldr	r2, [sp, #12]
   da534:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da538:	4640      	mov	r0, r8
   da53a:	f000 fbd5 	bl	dace8 <strlen>
   da53e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da542:	193b      	adds	r3, r7, r4
   da544:	4420      	add	r0, r4
   da546:	4284      	cmp	r4, r0
   da548:	f000 83b9 	beq.w	dacbe <strftime+0x93e>
   da54c:	9a02      	ldr	r2, [sp, #8]
   da54e:	4294      	cmp	r4, r2
   da550:	f080 83c0 	bcs.w	dacd4 <strftime+0x954>
   da554:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da558:	f803 2b01 	strb.w	r2, [r3], #1
   da55c:	3401      	adds	r4, #1
   da55e:	e7f2      	b.n	da546 <strftime+0x1c6>
   da560:	692b      	ldr	r3, [r5, #16]
   da562:	9a03      	ldr	r2, [sp, #12]
   da564:	330c      	adds	r3, #12
   da566:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da56a:	4640      	mov	r0, r8
   da56c:	f000 fbbc 	bl	dace8 <strlen>
   da570:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da574:	193b      	adds	r3, r7, r4
   da576:	4420      	add	r0, r4
   da578:	4284      	cmp	r4, r0
   da57a:	f000 83a0 	beq.w	dacbe <strftime+0x93e>
   da57e:	9a02      	ldr	r2, [sp, #8]
   da580:	4294      	cmp	r4, r2
   da582:	f080 83a7 	bcs.w	dacd4 <strftime+0x954>
   da586:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da58a:	f803 2b01 	strb.w	r2, [r3], #1
   da58e:	3401      	adds	r4, #1
   da590:	e7f2      	b.n	da578 <strftime+0x1f8>
   da592:	9b03      	ldr	r3, [sp, #12]
   da594:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   da598:	e00a      	b.n	da5b0 <strftime+0x230>
   da59a:	9b03      	ldr	r3, [sp, #12]
   da59c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   da5a0:	e006      	b.n	da5b0 <strftime+0x230>
   da5a2:	9b03      	ldr	r3, [sp, #12]
   da5a4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   da5a8:	e002      	b.n	da5b0 <strftime+0x230>
   da5aa:	9b03      	ldr	r3, [sp, #12]
   da5ac:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   da5b0:	4640      	mov	r0, r8
   da5b2:	f000 fb99 	bl	dace8 <strlen>
   da5b6:	f898 3000 	ldrb.w	r3, [r8]
   da5ba:	2b00      	cmp	r3, #0
   da5bc:	f000 837f 	beq.w	dacbe <strftime+0x93e>
   da5c0:	462b      	mov	r3, r5
   da5c2:	4642      	mov	r2, r8
   da5c4:	e093      	b.n	da6ee <strftime+0x36e>
   da5c6:	49b6      	ldr	r1, [pc, #728]	; (da8a0 <strftime+0x520>)
   da5c8:	f8d5 b014 	ldr.w	fp, [r5, #20]
   da5cc:	458b      	cmp	fp, r1
   da5ce:	bfac      	ite	ge
   da5d0:	2100      	movge	r1, #0
   da5d2:	2101      	movlt	r1, #1
   da5d4:	f1bb 0f00 	cmp.w	fp, #0
   da5d8:	db04      	blt.n	da5e4 <strftime+0x264>
   da5da:	2064      	movs	r0, #100	; 0x64
   da5dc:	fb9b f0f0 	sdiv	r0, fp, r0
   da5e0:	3013      	adds	r0, #19
   da5e2:	e008      	b.n	da5f6 <strftime+0x276>
   da5e4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   da5e8:	9107      	str	r1, [sp, #28]
   da5ea:	f001 fd41 	bl	dc070 <abs>
   da5ee:	9907      	ldr	r1, [sp, #28]
   da5f0:	2364      	movs	r3, #100	; 0x64
   da5f2:	fb90 f0f3 	sdiv	r0, r0, r3
   da5f6:	f1ba 0f00 	cmp.w	sl, #0
   da5fa:	d008      	beq.n	da60e <strftime+0x28e>
   da5fc:	2863      	cmp	r0, #99	; 0x63
   da5fe:	dd09      	ble.n	da614 <strftime+0x294>
   da600:	4ba8      	ldr	r3, [pc, #672]	; (da8a4 <strftime+0x524>)
   da602:	4aa9      	ldr	r2, [pc, #676]	; (da8a8 <strftime+0x528>)
   da604:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da608:	bf18      	it	ne
   da60a:	4613      	movne	r3, r2
   da60c:	e003      	b.n	da616 <strftime+0x296>
   da60e:	4ba6      	ldr	r3, [pc, #664]	; (da8a8 <strftime+0x528>)
   da610:	4aa6      	ldr	r2, [pc, #664]	; (da8ac <strftime+0x52c>)
   da612:	e001      	b.n	da618 <strftime+0x298>
   da614:	4ba4      	ldr	r3, [pc, #656]	; (da8a8 <strftime+0x528>)
   da616:	4aa6      	ldr	r2, [pc, #664]	; (da8b0 <strftime+0x530>)
   da618:	9001      	str	r0, [sp, #4]
   da61a:	f1b8 0f01 	cmp.w	r8, #1
   da61e:	bf98      	it	ls
   da620:	f04f 0802 	movls.w	r8, #2
   da624:	ebc1 0108 	rsb	r1, r1, r8
   da628:	9100      	str	r1, [sp, #0]
   da62a:	489d      	ldr	r0, [pc, #628]	; (da8a0 <strftime+0x520>)
   da62c:	49a1      	ldr	r1, [pc, #644]	; (da8b4 <strftime+0x534>)
   da62e:	4583      	cmp	fp, r0
   da630:	bfb8      	it	lt
   da632:	460b      	movlt	r3, r1
   da634:	e21e      	b.n	daa74 <strftime+0x6f4>
   da636:	4aa0      	ldr	r2, [pc, #640]	; (da8b8 <strftime+0x538>)
   da638:	49a0      	ldr	r1, [pc, #640]	; (da8bc <strftime+0x53c>)
   da63a:	68eb      	ldr	r3, [r5, #12]
   da63c:	2864      	cmp	r0, #100	; 0x64
   da63e:	bf08      	it	eq
   da640:	460a      	moveq	r2, r1
   da642:	1b31      	subs	r1, r6, r4
   da644:	1938      	adds	r0, r7, r4
   da646:	f7fc fd15 	bl	d7074 <sniprintf>
   da64a:	2800      	cmp	r0, #0
   da64c:	f280 8302 	bge.w	dac54 <strftime+0x8d4>
   da650:	e340      	b.n	dacd4 <strftime+0x954>
   da652:	6968      	ldr	r0, [r5, #20]
   da654:	692b      	ldr	r3, [r5, #16]
   da656:	2800      	cmp	r0, #0
   da658:	f103 0b01 	add.w	fp, r3, #1
   da65c:	eb07 0804 	add.w	r8, r7, r4
   da660:	ebc4 0a06 	rsb	sl, r4, r6
   da664:	68eb      	ldr	r3, [r5, #12]
   da666:	db05      	blt.n	da674 <strftime+0x2f4>
   da668:	2264      	movs	r2, #100	; 0x64
   da66a:	fb90 f1f2 	sdiv	r1, r0, r2
   da66e:	fb02 0011 	mls	r0, r2, r1, r0
   da672:	e00a      	b.n	da68a <strftime+0x30a>
   da674:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da678:	9307      	str	r3, [sp, #28]
   da67a:	f001 fcf9 	bl	dc070 <abs>
   da67e:	2264      	movs	r2, #100	; 0x64
   da680:	9b07      	ldr	r3, [sp, #28]
   da682:	fb90 f1f2 	sdiv	r1, r0, r2
   da686:	fb01 0012 	mls	r0, r1, r2, r0
   da68a:	4a8d      	ldr	r2, [pc, #564]	; (da8c0 <strftime+0x540>)
   da68c:	9001      	str	r0, [sp, #4]
   da68e:	9300      	str	r3, [sp, #0]
   da690:	4651      	mov	r1, sl
   da692:	465b      	mov	r3, fp
   da694:	4640      	mov	r0, r8
   da696:	f7fc fced 	bl	d7074 <sniprintf>
   da69a:	e7d6      	b.n	da64a <strftime+0x2ca>
   da69c:	2325      	movs	r3, #37	; 0x25
   da69e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da6a2:	f1ba 0f00 	cmp.w	sl, #0
   da6a6:	d007      	beq.n	da6b8 <strftime+0x338>
   da6a8:	f1b8 0f05 	cmp.w	r8, #5
   da6ac:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   da6b0:	bf98      	it	ls
   da6b2:	f04f 0806 	movls.w	r8, #6
   da6b6:	e004      	b.n	da6c2 <strftime+0x342>
   da6b8:	232b      	movs	r3, #43	; 0x2b
   da6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   da6be:	f04f 080a 	mov.w	r8, #10
   da6c2:	f1b8 0306 	subs.w	r3, r8, #6
   da6c6:	d102      	bne.n	da6ce <strftime+0x34e>
   da6c8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da6cc:	e00a      	b.n	da6e4 <strftime+0x364>
   da6ce:	4a7d      	ldr	r2, [pc, #500]	; (da8c4 <strftime+0x544>)
   da6d0:	211e      	movs	r1, #30
   da6d2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da6d6:	f7fc fccd 	bl	d7074 <sniprintf>
   da6da:	2800      	cmp	r0, #0
   da6dc:	ddf4      	ble.n	da6c8 <strftime+0x348>
   da6de:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   da6e2:	4418      	add	r0, r3
   da6e4:	4978      	ldr	r1, [pc, #480]	; (da8c8 <strftime+0x548>)
   da6e6:	f7ff fdc7 	bl	da278 <strcpy>
   da6ea:	462b      	mov	r3, r5
   da6ec:	aa0a      	add	r2, sp, #40	; 0x28
   da6ee:	1b31      	subs	r1, r6, r4
   da6f0:	1938      	adds	r0, r7, r4
   da6f2:	f7ff fe45 	bl	da380 <strftime>
   da6f6:	2800      	cmp	r0, #0
   da6f8:	f340 82ec 	ble.w	dacd4 <strftime+0x954>
   da6fc:	4404      	add	r4, r0
   da6fe:	e2de      	b.n	dacbe <strftime+0x93e>
   da700:	4628      	mov	r0, r5
   da702:	f7ff fddc 	bl	da2be <iso_year_adjust>
   da706:	4680      	mov	r8, r0
   da708:	6968      	ldr	r0, [r5, #20]
   da70a:	2800      	cmp	r0, #0
   da70c:	db05      	blt.n	da71a <strftime+0x39a>
   da70e:	2264      	movs	r2, #100	; 0x64
   da710:	fb90 f1f2 	sdiv	r1, r0, r2
   da714:	fb02 0011 	mls	r0, r2, r1, r0
   da718:	e008      	b.n	da72c <strftime+0x3ac>
   da71a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da71e:	f001 fca7 	bl	dc070 <abs>
   da722:	2264      	movs	r2, #100	; 0x64
   da724:	fb90 f3f2 	sdiv	r3, r0, r2
   da728:	fb03 0012 	mls	r0, r3, r2, r0
   da72c:	f1b8 0f00 	cmp.w	r8, #0
   da730:	da06      	bge.n	da740 <strftime+0x3c0>
   da732:	696a      	ldr	r2, [r5, #20]
   da734:	4b65      	ldr	r3, [pc, #404]	; (da8cc <strftime+0x54c>)
   da736:	429a      	cmp	r2, r3
   da738:	bfb8      	it	lt
   da73a:	f04f 0801 	movlt.w	r8, #1
   da73e:	e006      	b.n	da74e <strftime+0x3ce>
   da740:	d005      	beq.n	da74e <strftime+0x3ce>
   da742:	696a      	ldr	r2, [r5, #20]
   da744:	4b56      	ldr	r3, [pc, #344]	; (da8a0 <strftime+0x520>)
   da746:	429a      	cmp	r2, r3
   da748:	bfb8      	it	lt
   da74a:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   da74e:	2364      	movs	r3, #100	; 0x64
   da750:	4440      	add	r0, r8
   da752:	fb90 f2f3 	sdiv	r2, r0, r3
   da756:	fb03 0012 	mls	r0, r3, r2, r0
   da75a:	4418      	add	r0, r3
   da75c:	e1f9      	b.n	dab52 <strftime+0x7d2>
   da75e:	4b50      	ldr	r3, [pc, #320]	; (da8a0 <strftime+0x520>)
   da760:	6969      	ldr	r1, [r5, #20]
   da762:	9108      	str	r1, [sp, #32]
   da764:	4299      	cmp	r1, r3
   da766:	bfac      	ite	ge
   da768:	2300      	movge	r3, #0
   da76a:	2301      	movlt	r3, #1
   da76c:	4628      	mov	r0, r5
   da76e:	9307      	str	r3, [sp, #28]
   da770:	f7ff fda5 	bl	da2be <iso_year_adjust>
   da774:	9908      	ldr	r1, [sp, #32]
   da776:	2900      	cmp	r1, #0
   da778:	4683      	mov	fp, r0
   da77a:	db04      	blt.n	da786 <strftime+0x406>
   da77c:	2364      	movs	r3, #100	; 0x64
   da77e:	fb91 f3f3 	sdiv	r3, r1, r3
   da782:	3313      	adds	r3, #19
   da784:	e008      	b.n	da798 <strftime+0x418>
   da786:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   da78a:	9108      	str	r1, [sp, #32]
   da78c:	f001 fc70 	bl	dc070 <abs>
   da790:	9908      	ldr	r1, [sp, #32]
   da792:	2364      	movs	r3, #100	; 0x64
   da794:	fb90 f3f3 	sdiv	r3, r0, r3
   da798:	6968      	ldr	r0, [r5, #20]
   da79a:	2800      	cmp	r0, #0
   da79c:	db06      	blt.n	da7ac <strftime+0x42c>
   da79e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da7a2:	fb90 fcfe 	sdiv	ip, r0, lr
   da7a6:	fb0e 001c 	mls	r0, lr, ip, r0
   da7aa:	e00d      	b.n	da7c8 <strftime+0x448>
   da7ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da7b0:	9109      	str	r1, [sp, #36]	; 0x24
   da7b2:	9308      	str	r3, [sp, #32]
   da7b4:	f001 fc5c 	bl	dc070 <abs>
   da7b8:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   da7be:	9b08      	ldr	r3, [sp, #32]
   da7c0:	fb90 fcfe 	sdiv	ip, r0, lr
   da7c4:	fb0c 001e 	mls	r0, ip, lr, r0
   da7c8:	f1bb 0f00 	cmp.w	fp, #0
   da7cc:	da08      	bge.n	da7e0 <strftime+0x460>
   da7ce:	6969      	ldr	r1, [r5, #20]
   da7d0:	4a3e      	ldr	r2, [pc, #248]	; (da8cc <strftime+0x54c>)
   da7d2:	4291      	cmp	r1, r2
   da7d4:	da0a      	bge.n	da7ec <strftime+0x46c>
   da7d6:	f04f 0b01 	mov.w	fp, #1
   da7da:	f8cd b01c 	str.w	fp, [sp, #28]
   da7de:	e005      	b.n	da7ec <strftime+0x46c>
   da7e0:	d004      	beq.n	da7ec <strftime+0x46c>
   da7e2:	4a2f      	ldr	r2, [pc, #188]	; (da8a0 <strftime+0x520>)
   da7e4:	4291      	cmp	r1, r2
   da7e6:	bfb8      	it	lt
   da7e8:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   da7ec:	eb0b 0200 	add.w	r2, fp, r0
   da7f0:	1c50      	adds	r0, r2, #1
   da7f2:	d102      	bne.n	da7fa <strftime+0x47a>
   da7f4:	3b01      	subs	r3, #1
   da7f6:	2263      	movs	r2, #99	; 0x63
   da7f8:	e003      	b.n	da802 <strftime+0x482>
   da7fa:	2a64      	cmp	r2, #100	; 0x64
   da7fc:	bf04      	itt	eq
   da7fe:	3301      	addeq	r3, #1
   da800:	2200      	moveq	r2, #0
   da802:	2064      	movs	r0, #100	; 0x64
   da804:	fb00 2303 	mla	r3, r0, r3, r2
   da808:	9a07      	ldr	r2, [sp, #28]
   da80a:	b142      	cbz	r2, da81e <strftime+0x49e>
   da80c:	222d      	movs	r2, #45	; 0x2d
   da80e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   da812:	f1b8 0f00 	cmp.w	r8, #0
   da816:	d013      	beq.n	da840 <strftime+0x4c0>
   da818:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da81c:	e010      	b.n	da840 <strftime+0x4c0>
   da81e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da822:	d110      	bne.n	da846 <strftime+0x4c6>
   da824:	f242 720f 	movw	r2, #9999	; 0x270f
   da828:	4293      	cmp	r3, r2
   da82a:	d90c      	bls.n	da846 <strftime+0x4c6>
   da82c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da830:	f1b8 0f00 	cmp.w	r8, #0
   da834:	d1f0      	bne.n	da818 <strftime+0x498>
   da836:	aa12      	add	r2, sp, #72	; 0x48
   da838:	2125      	movs	r1, #37	; 0x25
   da83a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   da83e:	e00a      	b.n	da856 <strftime+0x4d6>
   da840:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   da844:	e000      	b.n	da848 <strftime+0x4c8>
   da846:	aa0a      	add	r2, sp, #40	; 0x28
   da848:	2125      	movs	r1, #37	; 0x25
   da84a:	7011      	strb	r1, [r2, #0]
   da84c:	f1ba 0f00 	cmp.w	sl, #0
   da850:	d101      	bne.n	da856 <strftime+0x4d6>
   da852:	1c50      	adds	r0, r2, #1
   da854:	e002      	b.n	da85c <strftime+0x4dc>
   da856:	2130      	movs	r1, #48	; 0x30
   da858:	1c90      	adds	r0, r2, #2
   da85a:	7051      	strb	r1, [r2, #1]
   da85c:	491c      	ldr	r1, [pc, #112]	; (da8d0 <strftime+0x550>)
   da85e:	9307      	str	r3, [sp, #28]
   da860:	f7ff fd0a 	bl	da278 <strcpy>
   da864:	9b07      	ldr	r3, [sp, #28]
   da866:	9300      	str	r3, [sp, #0]
   da868:	e1ad      	b.n	dabc6 <strftime+0x846>
   da86a:	4a14      	ldr	r2, [pc, #80]	; (da8bc <strftime+0x53c>)
   da86c:	4912      	ldr	r1, [pc, #72]	; (da8b8 <strftime+0x538>)
   da86e:	68ab      	ldr	r3, [r5, #8]
   da870:	286b      	cmp	r0, #107	; 0x6b
   da872:	bf08      	it	eq
   da874:	460a      	moveq	r2, r1
   da876:	e6e4      	b.n	da642 <strftime+0x2c2>
   da878:	68a9      	ldr	r1, [r5, #8]
   da87a:	230c      	movs	r3, #12
   da87c:	b131      	cbz	r1, da88c <strftime+0x50c>
   da87e:	4299      	cmp	r1, r3
   da880:	bf0e      	itee	eq
   da882:	460b      	moveq	r3, r1
   da884:	fb91 f2f3 	sdivne	r2, r1, r3
   da888:	fb03 1312 	mlsne	r3, r3, r2, r1
   da88c:	4a0a      	ldr	r2, [pc, #40]	; (da8b8 <strftime+0x538>)
   da88e:	490b      	ldr	r1, [pc, #44]	; (da8bc <strftime+0x53c>)
   da890:	2849      	cmp	r0, #73	; 0x49
   da892:	bf08      	it	eq
   da894:	460a      	moveq	r2, r1
   da896:	e6d4      	b.n	da642 <strftime+0x2c2>
   da898:	69eb      	ldr	r3, [r5, #28]
   da89a:	4a0e      	ldr	r2, [pc, #56]	; (da8d4 <strftime+0x554>)
   da89c:	3301      	adds	r3, #1
   da89e:	e6d0      	b.n	da642 <strftime+0x2c2>
   da8a0:	fffff894 	.word	0xfffff894
   da8a4:	000ddbd3 	.word	0x000ddbd3
   da8a8:	000dd01d 	.word	0x000dd01d
   da8ac:	000ddbc4 	.word	0x000ddbc4
   da8b0:	000ddbcb 	.word	0x000ddbcb
   da8b4:	000ddbd5 	.word	0x000ddbd5
   da8b8:	000ddbd7 	.word	0x000ddbd7
   da8bc:	000ddbe5 	.word	0x000ddbe5
   da8c0:	000ddbdb 	.word	0x000ddbdb
   da8c4:	000ddbea 	.word	0x000ddbea
   da8c8:	000ddbee 	.word	0x000ddbee
   da8cc:	fffff895 	.word	0xfffff895
   da8d0:	000ddbf6 	.word	0x000ddbf6
   da8d4:	000ddbfa 	.word	0x000ddbfa
   da8d8:	692b      	ldr	r3, [r5, #16]
   da8da:	3301      	adds	r3, #1
   da8dc:	e13d      	b.n	dab5a <strftime+0x7da>
   da8de:	686b      	ldr	r3, [r5, #4]
   da8e0:	e13b      	b.n	dab5a <strftime+0x7da>
   da8e2:	9b02      	ldr	r3, [sp, #8]
   da8e4:	429c      	cmp	r4, r3
   da8e6:	f080 81f5 	bcs.w	dacd4 <strftime+0x954>
   da8ea:	230a      	movs	r3, #10
   da8ec:	e1e5      	b.n	dacba <strftime+0x93a>
   da8ee:	68ab      	ldr	r3, [r5, #8]
   da8f0:	9a03      	ldr	r2, [sp, #12]
   da8f2:	2b0b      	cmp	r3, #11
   da8f4:	bfcc      	ite	gt
   da8f6:	23a4      	movgt	r3, #164	; 0xa4
   da8f8:	23a0      	movle	r3, #160	; 0xa0
   da8fa:	4413      	add	r3, r2
   da8fc:	f8d3 8004 	ldr.w	r8, [r3, #4]
   da900:	4640      	mov	r0, r8
   da902:	f000 f9f1 	bl	dace8 <strlen>
   da906:	4bb2      	ldr	r3, [pc, #712]	; (dabd0 <strftime+0x850>)
   da908:	f8d3 e000 	ldr.w	lr, [r3]
   da90c:	1939      	adds	r1, r7, r4
   da90e:	4642      	mov	r2, r8
   da910:	4420      	add	r0, r4
   da912:	4284      	cmp	r4, r0
   da914:	f000 81d3 	beq.w	dacbe <strftime+0x93e>
   da918:	9b02      	ldr	r3, [sp, #8]
   da91a:	429c      	cmp	r4, r3
   da91c:	f080 81da 	bcs.w	dacd4 <strftime+0x954>
   da920:	f899 3000 	ldrb.w	r3, [r9]
   da924:	2b50      	cmp	r3, #80	; 0x50
   da926:	f104 0401 	add.w	r4, r4, #1
   da92a:	7813      	ldrb	r3, [r2, #0]
   da92c:	d10a      	bne.n	da944 <strftime+0x5c4>
   da92e:	eb0e 0c03 	add.w	ip, lr, r3
   da932:	f89c c001 	ldrb.w	ip, [ip, #1]
   da936:	f00c 0c03 	and.w	ip, ip, #3
   da93a:	f1bc 0f01 	cmp.w	ip, #1
   da93e:	bf08      	it	eq
   da940:	3320      	addeq	r3, #32
   da942:	b2db      	uxtb	r3, r3
   da944:	f801 3b01 	strb.w	r3, [r1], #1
   da948:	3201      	adds	r2, #1
   da94a:	e7e2      	b.n	da912 <strftime+0x592>
   da94c:	686b      	ldr	r3, [r5, #4]
   da94e:	9300      	str	r3, [sp, #0]
   da950:	4aa0      	ldr	r2, [pc, #640]	; (dabd4 <strftime+0x854>)
   da952:	68ab      	ldr	r3, [r5, #8]
   da954:	e139      	b.n	dabca <strftime+0x84a>
   da956:	6a2b      	ldr	r3, [r5, #32]
   da958:	2b00      	cmp	r3, #0
   da95a:	db17      	blt.n	da98c <strftime+0x60c>
   da95c:	f001 fa00 	bl	dbd60 <__tz_lock>
   da960:	9b06      	ldr	r3, [sp, #24]
   da962:	b91b      	cbnz	r3, da96c <strftime+0x5ec>
   da964:	f001 f9fe 	bl	dbd64 <_tzset_unlocked>
   da968:	2301      	movs	r3, #1
   da96a:	9306      	str	r3, [sp, #24]
   da96c:	f001 fefa 	bl	dc764 <__gettzinfo>
   da970:	6a2b      	ldr	r3, [r5, #32]
   da972:	2b00      	cmp	r3, #0
   da974:	bfd4      	ite	le
   da976:	2300      	movle	r3, #0
   da978:	2301      	movgt	r3, #1
   da97a:	221c      	movs	r2, #28
   da97c:	fb02 0003 	mla	r0, r2, r3, r0
   da980:	6a03      	ldr	r3, [r0, #32]
   da982:	f1c3 0800 	rsb	r8, r3, #0
   da986:	f001 f9ec 	bl	dbd62 <__tz_unlock>
   da98a:	e001      	b.n	da990 <strftime+0x610>
   da98c:	f04f 0800 	mov.w	r8, #0
   da990:	f8d5 e014 	ldr.w	lr, [r5, #20]
   da994:	4670      	mov	r0, lr
   da996:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   da99a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   da99e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   da9a2:	2a00      	cmp	r2, #0
   da9a4:	f173 0b00 	sbcs.w	fp, r3, #0
   da9a8:	ebc4 0c06 	rsb	ip, r4, r6
   da9ac:	eb07 0a04 	add.w	sl, r7, r4
   da9b0:	da03      	bge.n	da9ba <strftime+0x63a>
   da9b2:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   da9b6:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   da9ba:	0891      	lsrs	r1, r2, #2
   da9bc:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   da9c0:	109b      	asrs	r3, r3, #2
   da9c2:	9104      	str	r1, [sp, #16]
   da9c4:	9305      	str	r3, [sp, #20]
   da9c6:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   da9ca:	2364      	movs	r3, #100	; 0x64
   da9cc:	fb91 f1f3 	sdiv	r1, r1, r3
   da9d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   da9d4:	1a52      	subs	r2, r2, r1
   da9d6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   da9da:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   da9de:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da9e2:	fb90 f1f1 	sdiv	r1, r0, r1
   da9e6:	1852      	adds	r2, r2, r1
   da9e8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   da9ec:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   da9f0:	f240 116d 	movw	r1, #365	; 0x16d
   da9f4:	fb01 fe0e 	mul.w	lr, r1, lr
   da9f8:	69e9      	ldr	r1, [r5, #28]
   da9fa:	eb12 020e 	adds.w	r2, r2, lr
   da9fe:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   daa02:	1852      	adds	r2, r2, r1
   daa04:	f04f 0e18 	mov.w	lr, #24
   daa08:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daa0c:	fba2 010e 	umull	r0, r1, r2, lr
   daa10:	fb0e 1103 	mla	r1, lr, r3, r1
   daa14:	68ab      	ldr	r3, [r5, #8]
   daa16:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   daa1a:	18c0      	adds	r0, r0, r3
   daa1c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daa20:	fba0 230e 	umull	r2, r3, r0, lr
   daa24:	fb0e 3301 	mla	r3, lr, r1, r3
   daa28:	6869      	ldr	r1, [r5, #4]
   daa2a:	1852      	adds	r2, r2, r1
   daa2c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daa30:	fba2 010e 	umull	r0, r1, r2, lr
   daa34:	fb0e 1103 	mla	r1, lr, r3, r1
   daa38:	682b      	ldr	r3, [r5, #0]
   daa3a:	4a67      	ldr	r2, [pc, #412]	; (dabd8 <strftime+0x858>)
   daa3c:	18c0      	adds	r0, r0, r3
   daa3e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daa42:	ebb0 0008 	subs.w	r0, r0, r8
   daa46:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   daa4a:	e9cd 0100 	strd	r0, r1, [sp]
   daa4e:	4661      	mov	r1, ip
   daa50:	4650      	mov	r0, sl
   daa52:	f7fc fb0f 	bl	d7074 <sniprintf>
   daa56:	e5f8      	b.n	da64a <strftime+0x2ca>
   daa58:	682b      	ldr	r3, [r5, #0]
   daa5a:	e07e      	b.n	dab5a <strftime+0x7da>
   daa5c:	9b02      	ldr	r3, [sp, #8]
   daa5e:	429c      	cmp	r4, r3
   daa60:	f080 8138 	bcs.w	dacd4 <strftime+0x954>
   daa64:	2309      	movs	r3, #9
   daa66:	e128      	b.n	dacba <strftime+0x93a>
   daa68:	682b      	ldr	r3, [r5, #0]
   daa6a:	9301      	str	r3, [sp, #4]
   daa6c:	686b      	ldr	r3, [r5, #4]
   daa6e:	9300      	str	r3, [sp, #0]
   daa70:	4a5a      	ldr	r2, [pc, #360]	; (dabdc <strftime+0x85c>)
   daa72:	68ab      	ldr	r3, [r5, #8]
   daa74:	1b31      	subs	r1, r6, r4
   daa76:	1938      	adds	r0, r7, r4
   daa78:	e60d      	b.n	da696 <strftime+0x316>
   daa7a:	9b02      	ldr	r3, [sp, #8]
   daa7c:	429c      	cmp	r4, r3
   daa7e:	f080 8129 	bcs.w	dacd4 <strftime+0x954>
   daa82:	69ab      	ldr	r3, [r5, #24]
   daa84:	1c62      	adds	r2, r4, #1
   daa86:	b90b      	cbnz	r3, daa8c <strftime+0x70c>
   daa88:	2337      	movs	r3, #55	; 0x37
   daa8a:	e000      	b.n	daa8e <strftime+0x70e>
   daa8c:	3330      	adds	r3, #48	; 0x30
   daa8e:	553b      	strb	r3, [r7, r4]
   daa90:	4614      	mov	r4, r2
   daa92:	e114      	b.n	dacbe <strftime+0x93e>
   daa94:	69eb      	ldr	r3, [r5, #28]
   daa96:	69aa      	ldr	r2, [r5, #24]
   daa98:	3307      	adds	r3, #7
   daa9a:	1a9b      	subs	r3, r3, r2
   daa9c:	2207      	movs	r2, #7
   daa9e:	fb93 f3f2 	sdiv	r3, r3, r2
   daaa2:	e05a      	b.n	dab5a <strftime+0x7da>
   daaa4:	4628      	mov	r0, r5
   daaa6:	f7ff fc0a 	bl	da2be <iso_year_adjust>
   daaaa:	69aa      	ldr	r2, [r5, #24]
   daaac:	b10a      	cbz	r2, daab2 <strftime+0x732>
   daaae:	1e53      	subs	r3, r2, #1
   daab0:	e000      	b.n	daab4 <strftime+0x734>
   daab2:	2306      	movs	r3, #6
   daab4:	2800      	cmp	r0, #0
   daab6:	dc2f      	bgt.n	dab18 <strftime+0x798>
   daab8:	69ea      	ldr	r2, [r5, #28]
   daaba:	d101      	bne.n	daac0 <strftime+0x740>
   daabc:	320a      	adds	r2, #10
   daabe:	e03b      	b.n	dab38 <strftime+0x7b8>
   daac0:	1a9a      	subs	r2, r3, r2
   daac2:	696b      	ldr	r3, [r5, #20]
   daac4:	f240 716b 	movw	r1, #1899	; 0x76b
   daac8:	2b00      	cmp	r3, #0
   daaca:	bfb4      	ite	lt
   daacc:	4608      	movlt	r0, r1
   daace:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   daad2:	4418      	add	r0, r3
   daad4:	0781      	lsls	r1, r0, #30
   daad6:	d107      	bne.n	daae8 <strftime+0x768>
   daad8:	4601      	mov	r1, r0
   daada:	f04f 0e64 	mov.w	lr, #100	; 0x64
   daade:	fb90 f0fe 	sdiv	r0, r0, lr
   daae2:	fb0e 1110 	mls	r1, lr, r0, r1
   daae6:	b981      	cbnz	r1, dab0a <strftime+0x78a>
   daae8:	2b00      	cmp	r3, #0
   daaea:	f240 716b 	movw	r1, #1899	; 0x76b
   daaee:	bfa8      	it	ge
   daaf0:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   daaf4:	4419      	add	r1, r3
   daaf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   daafa:	fb91 f0f3 	sdiv	r0, r1, r3
   daafe:	fb03 1110 	mls	r1, r3, r0, r1
   dab02:	fab1 f181 	clz	r1, r1
   dab06:	0949      	lsrs	r1, r1, #5
   dab08:	e000      	b.n	dab0c <strftime+0x78c>
   dab0a:	2101      	movs	r1, #1
   dab0c:	1a52      	subs	r2, r2, r1
   dab0e:	2a05      	cmp	r2, #5
   dab10:	bfb4      	ite	lt
   dab12:	2335      	movlt	r3, #53	; 0x35
   dab14:	2334      	movge	r3, #52	; 0x34
   dab16:	e020      	b.n	dab5a <strftime+0x7da>
   dab18:	2301      	movs	r3, #1
   dab1a:	e01e      	b.n	dab5a <strftime+0x7da>
   dab1c:	9b02      	ldr	r3, [sp, #8]
   dab1e:	429c      	cmp	r4, r3
   dab20:	f080 80d8 	bcs.w	dacd4 <strftime+0x954>
   dab24:	69ab      	ldr	r3, [r5, #24]
   dab26:	3330      	adds	r3, #48	; 0x30
   dab28:	e0c7      	b.n	dacba <strftime+0x93a>
   dab2a:	69aa      	ldr	r2, [r5, #24]
   dab2c:	b10a      	cbz	r2, dab32 <strftime+0x7b2>
   dab2e:	1e53      	subs	r3, r2, #1
   dab30:	e000      	b.n	dab34 <strftime+0x7b4>
   dab32:	2306      	movs	r3, #6
   dab34:	69ea      	ldr	r2, [r5, #28]
   dab36:	3207      	adds	r2, #7
   dab38:	1ad2      	subs	r2, r2, r3
   dab3a:	2307      	movs	r3, #7
   dab3c:	fb92 f3f3 	sdiv	r3, r2, r3
   dab40:	e00b      	b.n	dab5a <strftime+0x7da>
   dab42:	6968      	ldr	r0, [r5, #20]
   dab44:	2800      	cmp	r0, #0
   dab46:	da03      	bge.n	dab50 <strftime+0x7d0>
   dab48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dab4c:	f001 fa90 	bl	dc070 <abs>
   dab50:	2364      	movs	r3, #100	; 0x64
   dab52:	fb90 f2f3 	sdiv	r2, r0, r3
   dab56:	fb02 0313 	mls	r3, r2, r3, r0
   dab5a:	4a21      	ldr	r2, [pc, #132]	; (dabe0 <strftime+0x860>)
   dab5c:	e571      	b.n	da642 <strftime+0x2c2>
   dab5e:	696b      	ldr	r3, [r5, #20]
   dab60:	4a20      	ldr	r2, [pc, #128]	; (dabe4 <strftime+0x864>)
   dab62:	4293      	cmp	r3, r2
   dab64:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dab68:	da05      	bge.n	dab76 <strftime+0x7f6>
   dab6a:	232d      	movs	r3, #45	; 0x2d
   dab6c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dab70:	f1cb 0b00 	rsb	fp, fp, #0
   dab74:	e008      	b.n	dab88 <strftime+0x808>
   dab76:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dab7a:	d10d      	bne.n	dab98 <strftime+0x818>
   dab7c:	f242 730f 	movw	r3, #9999	; 0x270f
   dab80:	459b      	cmp	fp, r3
   dab82:	d911      	bls.n	daba8 <strftime+0x828>
   dab84:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dab88:	f1b8 0f00 	cmp.w	r8, #0
   dab8c:	d001      	beq.n	dab92 <strftime+0x812>
   dab8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dab92:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dab96:	e000      	b.n	dab9a <strftime+0x81a>
   dab98:	ab0a      	add	r3, sp, #40	; 0x28
   dab9a:	2225      	movs	r2, #37	; 0x25
   dab9c:	701a      	strb	r2, [r3, #0]
   dab9e:	f1ba 0f00 	cmp.w	sl, #0
   daba2:	d108      	bne.n	dabb6 <strftime+0x836>
   daba4:	1c58      	adds	r0, r3, #1
   daba6:	e009      	b.n	dabbc <strftime+0x83c>
   daba8:	f1b8 0f00 	cmp.w	r8, #0
   dabac:	d1f4      	bne.n	dab98 <strftime+0x818>
   dabae:	2325      	movs	r3, #37	; 0x25
   dabb0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dabb4:	ab0a      	add	r3, sp, #40	; 0x28
   dabb6:	2230      	movs	r2, #48	; 0x30
   dabb8:	1c98      	adds	r0, r3, #2
   dabba:	705a      	strb	r2, [r3, #1]
   dabbc:	490a      	ldr	r1, [pc, #40]	; (dabe8 <strftime+0x868>)
   dabbe:	f7ff fb5b 	bl	da278 <strcpy>
   dabc2:	f8cd b000 	str.w	fp, [sp]
   dabc6:	4643      	mov	r3, r8
   dabc8:	aa0a      	add	r2, sp, #40	; 0x28
   dabca:	1b31      	subs	r1, r6, r4
   dabcc:	1938      	adds	r0, r7, r4
   dabce:	e03e      	b.n	dac4e <strftime+0x8ce>
   dabd0:	2003df8c 	.word	0x2003df8c
   dabd4:	000ddc09 	.word	0x000ddc09
   dabd8:	000ddbff 	.word	0x000ddbff
   dabdc:	000ddc04 	.word	0x000ddc04
   dabe0:	000ddbe5 	.word	0x000ddbe5
   dabe4:	fffff894 	.word	0xfffff894
   dabe8:	000ddbf6 	.word	0x000ddbf6
   dabec:	6a2b      	ldr	r3, [r5, #32]
   dabee:	2b00      	cmp	r3, #0
   dabf0:	db65      	blt.n	dacbe <strftime+0x93e>
   dabf2:	f001 f8b5 	bl	dbd60 <__tz_lock>
   dabf6:	9b06      	ldr	r3, [sp, #24]
   dabf8:	b91b      	cbnz	r3, dac02 <strftime+0x882>
   dabfa:	f001 f8b3 	bl	dbd64 <_tzset_unlocked>
   dabfe:	2301      	movs	r3, #1
   dac00:	9306      	str	r3, [sp, #24]
   dac02:	f001 fdaf 	bl	dc764 <__gettzinfo>
   dac06:	6a2b      	ldr	r3, [r5, #32]
   dac08:	2b00      	cmp	r3, #0
   dac0a:	bfd4      	ite	le
   dac0c:	2300      	movle	r3, #0
   dac0e:	2301      	movgt	r3, #1
   dac10:	221c      	movs	r2, #28
   dac12:	fb02 0003 	mla	r0, r2, r3, r0
   dac16:	eb07 0a04 	add.w	sl, r7, r4
   dac1a:	6a03      	ldr	r3, [r0, #32]
   dac1c:	f1c3 0800 	rsb	r8, r3, #0
   dac20:	f001 f89f 	bl	dbd62 <__tz_unlock>
   dac24:	233c      	movs	r3, #60	; 0x3c
   dac26:	fb98 f0f3 	sdiv	r0, r8, r3
   dac2a:	9307      	str	r3, [sp, #28]
   dac2c:	f001 fd9e 	bl	dc76c <labs>
   dac30:	9b07      	ldr	r3, [sp, #28]
   dac32:	fb90 f2f3 	sdiv	r2, r0, r3
   dac36:	ebc4 0b06 	rsb	fp, r4, r6
   dac3a:	fb02 0013 	mls	r0, r2, r3, r0
   dac3e:	4a28      	ldr	r2, [pc, #160]	; (dace0 <strftime+0x960>)
   dac40:	9000      	str	r0, [sp, #0]
   dac42:	4659      	mov	r1, fp
   dac44:	4650      	mov	r0, sl
   dac46:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dac4a:	fb98 f3f3 	sdiv	r3, r8, r3
   dac4e:	f7fc fa11 	bl	d7074 <sniprintf>
   dac52:	e4fa      	b.n	da64a <strftime+0x2ca>
   dac54:	4404      	add	r4, r0
   dac56:	42a6      	cmp	r6, r4
   dac58:	d831      	bhi.n	dacbe <strftime+0x93e>
   dac5a:	e03b      	b.n	dacd4 <strftime+0x954>
   dac5c:	6a2b      	ldr	r3, [r5, #32]
   dac5e:	2b00      	cmp	r3, #0
   dac60:	db2d      	blt.n	dacbe <strftime+0x93e>
   dac62:	f001 f87d 	bl	dbd60 <__tz_lock>
   dac66:	9b06      	ldr	r3, [sp, #24]
   dac68:	b91b      	cbnz	r3, dac72 <strftime+0x8f2>
   dac6a:	f001 f87b 	bl	dbd64 <_tzset_unlocked>
   dac6e:	2301      	movs	r3, #1
   dac70:	9306      	str	r3, [sp, #24]
   dac72:	6a2b      	ldr	r3, [r5, #32]
   dac74:	4a1b      	ldr	r2, [pc, #108]	; (dace4 <strftime+0x964>)
   dac76:	2b00      	cmp	r3, #0
   dac78:	bfd4      	ite	le
   dac7a:	2300      	movle	r3, #0
   dac7c:	2301      	movgt	r3, #1
   dac7e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dac82:	4640      	mov	r0, r8
   dac84:	f000 f830 	bl	dace8 <strlen>
   dac88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dac8c:	193b      	adds	r3, r7, r4
   dac8e:	4420      	add	r0, r4
   dac90:	4284      	cmp	r4, r0
   dac92:	d00b      	beq.n	dacac <strftime+0x92c>
   dac94:	9a02      	ldr	r2, [sp, #8]
   dac96:	4294      	cmp	r4, r2
   dac98:	d205      	bcs.n	daca6 <strftime+0x926>
   dac9a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dac9e:	f803 2b01 	strb.w	r2, [r3], #1
   daca2:	3401      	adds	r4, #1
   daca4:	e7f4      	b.n	dac90 <strftime+0x910>
   daca6:	f001 f85c 	bl	dbd62 <__tz_unlock>
   dacaa:	e013      	b.n	dacd4 <strftime+0x954>
   dacac:	f001 f859 	bl	dbd62 <__tz_unlock>
   dacb0:	e005      	b.n	dacbe <strftime+0x93e>
   dacb2:	9b02      	ldr	r3, [sp, #8]
   dacb4:	429c      	cmp	r4, r3
   dacb6:	d20d      	bcs.n	dacd4 <strftime+0x954>
   dacb8:	2325      	movs	r3, #37	; 0x25
   dacba:	553b      	strb	r3, [r7, r4]
   dacbc:	3401      	adds	r4, #1
   dacbe:	f899 3000 	ldrb.w	r3, [r9]
   dacc2:	b11b      	cbz	r3, daccc <strftime+0x94c>
   dacc4:	f109 0901 	add.w	r9, r9, #1
   dacc8:	f7ff bb69 	b.w	da39e <strftime+0x1e>
   daccc:	b126      	cbz	r6, dacd8 <strftime+0x958>
   dacce:	2300      	movs	r3, #0
   dacd0:	553b      	strb	r3, [r7, r4]
   dacd2:	e001      	b.n	dacd8 <strftime+0x958>
   dacd4:	2000      	movs	r0, #0
   dacd6:	e000      	b.n	dacda <strftime+0x95a>
   dacd8:	4620      	mov	r0, r4
   dacda:	b013      	add	sp, #76	; 0x4c
   dacdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dace0:	000ddc13 	.word	0x000ddc13
   dace4:	2003e02c 	.word	0x2003e02c

000dace8 <strlen>:
   dace8:	4603      	mov	r3, r0
   dacea:	f813 2b01 	ldrb.w	r2, [r3], #1
   dacee:	2a00      	cmp	r2, #0
   dacf0:	d1fb      	bne.n	dacea <strlen+0x2>
   dacf2:	1a18      	subs	r0, r3, r0
   dacf4:	3801      	subs	r0, #1
   dacf6:	4770      	bx	lr

000dacf8 <strncmp>:
   dacf8:	b530      	push	{r4, r5, lr}
   dacfa:	b182      	cbz	r2, dad1e <strncmp+0x26>
   dacfc:	1e45      	subs	r5, r0, #1
   dacfe:	3901      	subs	r1, #1
   dad00:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dad04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dad08:	42a3      	cmp	r3, r4
   dad0a:	d106      	bne.n	dad1a <strncmp+0x22>
   dad0c:	43ec      	mvns	r4, r5
   dad0e:	4414      	add	r4, r2
   dad10:	42e0      	cmn	r0, r4
   dad12:	d001      	beq.n	dad18 <strncmp+0x20>
   dad14:	2b00      	cmp	r3, #0
   dad16:	d1f3      	bne.n	dad00 <strncmp+0x8>
   dad18:	461c      	mov	r4, r3
   dad1a:	1b18      	subs	r0, r3, r4
   dad1c:	bd30      	pop	{r4, r5, pc}
   dad1e:	4610      	mov	r0, r2
   dad20:	bd30      	pop	{r4, r5, pc}

000dad22 <strncpy>:
   dad22:	b510      	push	{r4, lr}
   dad24:	4603      	mov	r3, r0
   dad26:	b142      	cbz	r2, dad3a <strncpy+0x18>
   dad28:	f811 4b01 	ldrb.w	r4, [r1], #1
   dad2c:	f803 4b01 	strb.w	r4, [r3], #1
   dad30:	3a01      	subs	r2, #1
   dad32:	2c00      	cmp	r4, #0
   dad34:	d1f7      	bne.n	dad26 <strncpy+0x4>
   dad36:	441a      	add	r2, r3
   dad38:	e000      	b.n	dad3c <strncpy+0x1a>
   dad3a:	bd10      	pop	{r4, pc}
   dad3c:	4293      	cmp	r3, r2
   dad3e:	d002      	beq.n	dad46 <strncpy+0x24>
   dad40:	f803 4b01 	strb.w	r4, [r3], #1
   dad44:	e7fa      	b.n	dad3c <strncpy+0x1a>
   dad46:	bd10      	pop	{r4, pc}

000dad48 <sulp>:
   dad48:	b570      	push	{r4, r5, r6, lr}
   dad4a:	4604      	mov	r4, r0
   dad4c:	460d      	mov	r5, r1
   dad4e:	ec45 4b10 	vmov	d0, r4, r5
   dad52:	4616      	mov	r6, r2
   dad54:	f001 ffd4 	bl	dcd00 <__ulp>
   dad58:	ec51 0b10 	vmov	r0, r1, d0
   dad5c:	b17e      	cbz	r6, dad7e <sulp+0x36>
   dad5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dad62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dad66:	2b00      	cmp	r3, #0
   dad68:	dd09      	ble.n	dad7e <sulp+0x36>
   dad6a:	051b      	lsls	r3, r3, #20
   dad6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dad70:	2400      	movs	r4, #0
   dad72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dad76:	4622      	mov	r2, r4
   dad78:	462b      	mov	r3, r5
   dad7a:	f7fe faad 	bl	d92d8 <__aeabi_dmul>
   dad7e:	bd70      	pop	{r4, r5, r6, pc}

000dad80 <_strtod_r>:
   dad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad84:	b09d      	sub	sp, #116	; 0x74
   dad86:	2300      	movs	r3, #0
   dad88:	9002      	str	r0, [sp, #8]
   dad8a:	460c      	mov	r4, r1
   dad8c:	9213      	str	r2, [sp, #76]	; 0x4c
   dad8e:	9318      	str	r3, [sp, #96]	; 0x60
   dad90:	f04f 0a00 	mov.w	sl, #0
   dad94:	f04f 0b00 	mov.w	fp, #0
   dad98:	9117      	str	r1, [sp, #92]	; 0x5c
   dad9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dad9c:	781a      	ldrb	r2, [r3, #0]
   dad9e:	2a0d      	cmp	r2, #13
   dada0:	d805      	bhi.n	dadae <_strtod_r+0x2e>
   dada2:	2a09      	cmp	r2, #9
   dada4:	d213      	bcs.n	dadce <_strtod_r+0x4e>
   dada6:	2a00      	cmp	r2, #0
   dada8:	f000 81ac 	beq.w	db104 <_strtod_r+0x384>
   dadac:	e012      	b.n	dadd4 <_strtod_r+0x54>
   dadae:	2a2b      	cmp	r2, #43	; 0x2b
   dadb0:	d004      	beq.n	dadbc <_strtod_r+0x3c>
   dadb2:	2a2d      	cmp	r2, #45	; 0x2d
   dadb4:	d004      	beq.n	dadc0 <_strtod_r+0x40>
   dadb6:	2a20      	cmp	r2, #32
   dadb8:	d10c      	bne.n	dadd4 <_strtod_r+0x54>
   dadba:	e008      	b.n	dadce <_strtod_r+0x4e>
   dadbc:	2200      	movs	r2, #0
   dadbe:	e000      	b.n	dadc2 <_strtod_r+0x42>
   dadc0:	2201      	movs	r2, #1
   dadc2:	920c      	str	r2, [sp, #48]	; 0x30
   dadc4:	1c5a      	adds	r2, r3, #1
   dadc6:	9217      	str	r2, [sp, #92]	; 0x5c
   dadc8:	785b      	ldrb	r3, [r3, #1]
   dadca:	b92b      	cbnz	r3, dadd8 <_strtod_r+0x58>
   dadcc:	e19a      	b.n	db104 <_strtod_r+0x384>
   dadce:	3301      	adds	r3, #1
   dadd0:	9317      	str	r3, [sp, #92]	; 0x5c
   dadd2:	e7e2      	b.n	dad9a <_strtod_r+0x1a>
   dadd4:	2300      	movs	r3, #0
   dadd6:	930c      	str	r3, [sp, #48]	; 0x30
   dadd8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dadda:	782b      	ldrb	r3, [r5, #0]
   daddc:	2b30      	cmp	r3, #48	; 0x30
   dadde:	d15c      	bne.n	dae9a <_strtod_r+0x11a>
   dade0:	786b      	ldrb	r3, [r5, #1]
   dade2:	2b58      	cmp	r3, #88	; 0x58
   dade4:	d001      	beq.n	dadea <_strtod_r+0x6a>
   dade6:	2b78      	cmp	r3, #120	; 0x78
   dade8:	d14c      	bne.n	dae84 <_strtod_r+0x104>
   dadea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dadec:	9301      	str	r3, [sp, #4]
   dadee:	ab18      	add	r3, sp, #96	; 0x60
   dadf0:	9300      	str	r3, [sp, #0]
   dadf2:	4aa9      	ldr	r2, [pc, #676]	; (db098 <_strtod_r+0x318>)
   dadf4:	9802      	ldr	r0, [sp, #8]
   dadf6:	ab19      	add	r3, sp, #100	; 0x64
   dadf8:	a917      	add	r1, sp, #92	; 0x5c
   dadfa:	f001 f99c 	bl	dc136 <__gethex>
   dadfe:	f010 0607 	ands.w	r6, r0, #7
   dae02:	4604      	mov	r4, r0
   dae04:	f000 8587 	beq.w	db916 <_strtod_r+0xb96>
   dae08:	2e06      	cmp	r6, #6
   dae0a:	d105      	bne.n	dae18 <_strtod_r+0x98>
   dae0c:	3501      	adds	r5, #1
   dae0e:	2300      	movs	r3, #0
   dae10:	9517      	str	r5, [sp, #92]	; 0x5c
   dae12:	930c      	str	r3, [sp, #48]	; 0x30
   dae14:	f000 bd7f 	b.w	db916 <_strtod_r+0xb96>
   dae18:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dae1a:	b13a      	cbz	r2, dae2c <_strtod_r+0xac>
   dae1c:	2135      	movs	r1, #53	; 0x35
   dae1e:	a81a      	add	r0, sp, #104	; 0x68
   dae20:	f002 f85b 	bl	dceda <__copybits>
   dae24:	9918      	ldr	r1, [sp, #96]	; 0x60
   dae26:	9802      	ldr	r0, [sp, #8]
   dae28:	f001 fcd9 	bl	dc7de <_Bfree>
   dae2c:	2e06      	cmp	r6, #6
   dae2e:	d822      	bhi.n	dae76 <_strtod_r+0xf6>
   dae30:	e8df f006 	tbb	[pc, r6]
   dae34:	18080d04 	.word	0x18080d04
   dae38:	0d1d      	.short	0x0d1d
   dae3a:	04          	.byte	0x04
   dae3b:	00          	.byte	0x00
   dae3c:	f04f 0b00 	mov.w	fp, #0
   dae40:	46da      	mov	sl, fp
   dae42:	e018      	b.n	dae76 <_strtod_r+0xf6>
   dae44:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dae48:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   dae4c:	e013      	b.n	dae76 <_strtod_r+0xf6>
   dae4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   dae50:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dae52:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   dae56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dae5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dae5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dae62:	e008      	b.n	dae76 <_strtod_r+0xf6>
   dae64:	f8df b234 	ldr.w	fp, [pc, #564]	; db09c <_strtod_r+0x31c>
   dae68:	f04f 0a00 	mov.w	sl, #0
   dae6c:	e003      	b.n	dae76 <_strtod_r+0xf6>
   dae6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dae72:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dae76:	0721      	lsls	r1, r4, #28
   dae78:	f140 854d 	bpl.w	db916 <_strtod_r+0xb96>
   dae7c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dae80:	f000 bd49 	b.w	db916 <_strtod_r+0xb96>
   dae84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dae86:	1c5a      	adds	r2, r3, #1
   dae88:	9217      	str	r2, [sp, #92]	; 0x5c
   dae8a:	785b      	ldrb	r3, [r3, #1]
   dae8c:	2b30      	cmp	r3, #48	; 0x30
   dae8e:	d0f9      	beq.n	dae84 <_strtod_r+0x104>
   dae90:	2b00      	cmp	r3, #0
   dae92:	f000 8540 	beq.w	db916 <_strtod_r+0xb96>
   dae96:	2301      	movs	r3, #1
   dae98:	e000      	b.n	dae9c <_strtod_r+0x11c>
   dae9a:	2300      	movs	r3, #0
   dae9c:	f04f 0800 	mov.w	r8, #0
   daea0:	9306      	str	r3, [sp, #24]
   daea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daea4:	9307      	str	r3, [sp, #28]
   daea6:	f8cd 8014 	str.w	r8, [sp, #20]
   daeaa:	f8cd 8010 	str.w	r8, [sp, #16]
   daeae:	220a      	movs	r2, #10
   daeb0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   daeb2:	782e      	ldrb	r6, [r5, #0]
   daeb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   daeb8:	b2d9      	uxtb	r1, r3
   daeba:	2909      	cmp	r1, #9
   daebc:	d80e      	bhi.n	daedc <_strtod_r+0x15c>
   daebe:	9904      	ldr	r1, [sp, #16]
   daec0:	2908      	cmp	r1, #8
   daec2:	bfdd      	ittte	le
   daec4:	9905      	ldrle	r1, [sp, #20]
   daec6:	fb02 3301 	mlale	r3, r2, r1, r3
   daeca:	9305      	strle	r3, [sp, #20]
   daecc:	fb02 3808 	mlagt	r8, r2, r8, r3
   daed0:	9b04      	ldr	r3, [sp, #16]
   daed2:	3501      	adds	r5, #1
   daed4:	3301      	adds	r3, #1
   daed6:	9304      	str	r3, [sp, #16]
   daed8:	9517      	str	r5, [sp, #92]	; 0x5c
   daeda:	e7e9      	b.n	daeb0 <_strtod_r+0x130>
   daedc:	9802      	ldr	r0, [sp, #8]
   daede:	f7fe ff33 	bl	d9d48 <_localeconv_r>
   daee2:	6807      	ldr	r7, [r0, #0]
   daee4:	9802      	ldr	r0, [sp, #8]
   daee6:	f7fe ff2f 	bl	d9d48 <_localeconv_r>
   daeea:	6800      	ldr	r0, [r0, #0]
   daeec:	f7ff fefc 	bl	dace8 <strlen>
   daef0:	4639      	mov	r1, r7
   daef2:	4602      	mov	r2, r0
   daef4:	4628      	mov	r0, r5
   daef6:	f7ff feff 	bl	dacf8 <strncmp>
   daefa:	4607      	mov	r7, r0
   daefc:	b128      	cbz	r0, daf0a <_strtod_r+0x18a>
   daefe:	2000      	movs	r0, #0
   daf00:	4633      	mov	r3, r6
   daf02:	9d04      	ldr	r5, [sp, #16]
   daf04:	4602      	mov	r2, r0
   daf06:	4601      	mov	r1, r0
   daf08:	e057      	b.n	dafba <_strtod_r+0x23a>
   daf0a:	9802      	ldr	r0, [sp, #8]
   daf0c:	f7fe ff1c 	bl	d9d48 <_localeconv_r>
   daf10:	6800      	ldr	r0, [r0, #0]
   daf12:	f7ff fee9 	bl	dace8 <strlen>
   daf16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf18:	181a      	adds	r2, r3, r0
   daf1a:	9217      	str	r2, [sp, #92]	; 0x5c
   daf1c:	9a04      	ldr	r2, [sp, #16]
   daf1e:	5c1b      	ldrb	r3, [r3, r0]
   daf20:	2a00      	cmp	r2, #0
   daf22:	d142      	bne.n	dafaa <_strtod_r+0x22a>
   daf24:	4610      	mov	r0, r2
   daf26:	2b30      	cmp	r3, #48	; 0x30
   daf28:	d105      	bne.n	daf36 <_strtod_r+0x1b6>
   daf2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf2c:	1c5a      	adds	r2, r3, #1
   daf2e:	9217      	str	r2, [sp, #92]	; 0x5c
   daf30:	3001      	adds	r0, #1
   daf32:	785b      	ldrb	r3, [r3, #1]
   daf34:	e7f7      	b.n	daf26 <_strtod_r+0x1a6>
   daf36:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   daf3a:	2a08      	cmp	r2, #8
   daf3c:	d843      	bhi.n	dafc6 <_strtod_r+0x246>
   daf3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   daf40:	9207      	str	r2, [sp, #28]
   daf42:	4602      	mov	r2, r0
   daf44:	2000      	movs	r0, #0
   daf46:	4605      	mov	r5, r0
   daf48:	3b30      	subs	r3, #48	; 0x30
   daf4a:	f100 0101 	add.w	r1, r0, #1
   daf4e:	d026      	beq.n	daf9e <_strtod_r+0x21e>
   daf50:	440a      	add	r2, r1
   daf52:	eb05 0c00 	add.w	ip, r5, r0
   daf56:	4629      	mov	r1, r5
   daf58:	260a      	movs	r6, #10
   daf5a:	4561      	cmp	r1, ip
   daf5c:	d00e      	beq.n	daf7c <_strtod_r+0x1fc>
   daf5e:	3101      	adds	r1, #1
   daf60:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   daf64:	f1be 0f08 	cmp.w	lr, #8
   daf68:	dc03      	bgt.n	daf72 <_strtod_r+0x1f2>
   daf6a:	9f05      	ldr	r7, [sp, #20]
   daf6c:	4377      	muls	r7, r6
   daf6e:	9705      	str	r7, [sp, #20]
   daf70:	e7f3      	b.n	daf5a <_strtod_r+0x1da>
   daf72:	2910      	cmp	r1, #16
   daf74:	bfd8      	it	le
   daf76:	fb06 f808 	mulle.w	r8, r6, r8
   daf7a:	e7ee      	b.n	daf5a <_strtod_r+0x1da>
   daf7c:	4428      	add	r0, r5
   daf7e:	2808      	cmp	r0, #8
   daf80:	f100 0501 	add.w	r5, r0, #1
   daf84:	dc05      	bgt.n	daf92 <_strtod_r+0x212>
   daf86:	9805      	ldr	r0, [sp, #20]
   daf88:	210a      	movs	r1, #10
   daf8a:	fb01 3300 	mla	r3, r1, r0, r3
   daf8e:	9305      	str	r3, [sp, #20]
   daf90:	e004      	b.n	daf9c <_strtod_r+0x21c>
   daf92:	2d10      	cmp	r5, #16
   daf94:	bfdc      	itt	le
   daf96:	210a      	movle	r1, #10
   daf98:	fb01 3808 	mlale	r8, r1, r8, r3
   daf9c:	2100      	movs	r1, #0
   daf9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dafa0:	1c58      	adds	r0, r3, #1
   dafa2:	9017      	str	r0, [sp, #92]	; 0x5c
   dafa4:	785b      	ldrb	r3, [r3, #1]
   dafa6:	4608      	mov	r0, r1
   dafa8:	e002      	b.n	dafb0 <_strtod_r+0x230>
   dafaa:	9d04      	ldr	r5, [sp, #16]
   dafac:	4638      	mov	r0, r7
   dafae:	463a      	mov	r2, r7
   dafb0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dafb4:	2909      	cmp	r1, #9
   dafb6:	d9c7      	bls.n	daf48 <_strtod_r+0x1c8>
   dafb8:	2101      	movs	r1, #1
   dafba:	2b65      	cmp	r3, #101	; 0x65
   dafbc:	d001      	beq.n	dafc2 <_strtod_r+0x242>
   dafbe:	2b45      	cmp	r3, #69	; 0x45
   dafc0:	d151      	bne.n	db066 <_strtod_r+0x2e6>
   dafc2:	b96d      	cbnz	r5, dafe0 <_strtod_r+0x260>
   dafc4:	e004      	b.n	dafd0 <_strtod_r+0x250>
   dafc6:	2b65      	cmp	r3, #101	; 0x65
   dafc8:	f040 84b3 	bne.w	db932 <_strtod_r+0xbb2>
   dafcc:	2200      	movs	r2, #0
   dafce:	2101      	movs	r1, #1
   dafd0:	b928      	cbnz	r0, dafde <_strtod_r+0x25e>
   dafd2:	9b06      	ldr	r3, [sp, #24]
   dafd4:	2b00      	cmp	r3, #0
   dafd6:	f000 8095 	beq.w	db104 <_strtod_r+0x384>
   dafda:	4605      	mov	r5, r0
   dafdc:	e000      	b.n	dafe0 <_strtod_r+0x260>
   dafde:	2500      	movs	r5, #0
   dafe0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   dafe2:	1c63      	adds	r3, r4, #1
   dafe4:	9317      	str	r3, [sp, #92]	; 0x5c
   dafe6:	7863      	ldrb	r3, [r4, #1]
   dafe8:	2b2b      	cmp	r3, #43	; 0x2b
   dafea:	d006      	beq.n	daffa <_strtod_r+0x27a>
   dafec:	2b2d      	cmp	r3, #45	; 0x2d
   dafee:	d002      	beq.n	daff6 <_strtod_r+0x276>
   daff0:	2600      	movs	r6, #0
   daff2:	9603      	str	r6, [sp, #12]
   daff4:	e006      	b.n	db004 <_strtod_r+0x284>
   daff6:	2301      	movs	r3, #1
   daff8:	e000      	b.n	daffc <_strtod_r+0x27c>
   daffa:	2300      	movs	r3, #0
   daffc:	9303      	str	r3, [sp, #12]
   daffe:	1ca3      	adds	r3, r4, #2
   db000:	9317      	str	r3, [sp, #92]	; 0x5c
   db002:	78a3      	ldrb	r3, [r4, #2]
   db004:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db008:	2e09      	cmp	r6, #9
   db00a:	d82b      	bhi.n	db064 <_strtod_r+0x2e4>
   db00c:	2b30      	cmp	r3, #48	; 0x30
   db00e:	d104      	bne.n	db01a <_strtod_r+0x29a>
   db010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db012:	1c5e      	adds	r6, r3, #1
   db014:	9617      	str	r6, [sp, #92]	; 0x5c
   db016:	785b      	ldrb	r3, [r3, #1]
   db018:	e7f8      	b.n	db00c <_strtod_r+0x28c>
   db01a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   db01e:	2e08      	cmp	r6, #8
   db020:	d821      	bhi.n	db066 <_strtod_r+0x2e6>
   db022:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db028:	f04f 0c0a 	mov.w	ip, #10
   db02c:	461f      	mov	r7, r3
   db02e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db030:	1c5e      	adds	r6, r3, #1
   db032:	9617      	str	r6, [sp, #92]	; 0x5c
   db034:	785b      	ldrb	r3, [r3, #1]
   db036:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db03a:	f1b9 0f09 	cmp.w	r9, #9
   db03e:	d804      	bhi.n	db04a <_strtod_r+0x2ca>
   db040:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db044:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db048:	e7f1      	b.n	db02e <_strtod_r+0x2ae>
   db04a:	1bf6      	subs	r6, r6, r7
   db04c:	2e08      	cmp	r6, #8
   db04e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db052:	dc02      	bgt.n	db05a <_strtod_r+0x2da>
   db054:	45f1      	cmp	r9, lr
   db056:	bfa8      	it	ge
   db058:	46f1      	movge	r9, lr
   db05a:	9e03      	ldr	r6, [sp, #12]
   db05c:	b12e      	cbz	r6, db06a <_strtod_r+0x2ea>
   db05e:	f1c9 0900 	rsb	r9, r9, #0
   db062:	e002      	b.n	db06a <_strtod_r+0x2ea>
   db064:	9417      	str	r4, [sp, #92]	; 0x5c
   db066:	f04f 0900 	mov.w	r9, #0
   db06a:	2d00      	cmp	r5, #0
   db06c:	d153      	bne.n	db116 <_strtod_r+0x396>
   db06e:	2800      	cmp	r0, #0
   db070:	f040 8451 	bne.w	db916 <_strtod_r+0xb96>
   db074:	9a06      	ldr	r2, [sp, #24]
   db076:	2a00      	cmp	r2, #0
   db078:	f040 844d 	bne.w	db916 <_strtod_r+0xb96>
   db07c:	2900      	cmp	r1, #0
   db07e:	d141      	bne.n	db104 <_strtod_r+0x384>
   db080:	2b4e      	cmp	r3, #78	; 0x4e
   db082:	d020      	beq.n	db0c6 <_strtod_r+0x346>
   db084:	dc02      	bgt.n	db08c <_strtod_r+0x30c>
   db086:	2b49      	cmp	r3, #73	; 0x49
   db088:	d00a      	beq.n	db0a0 <_strtod_r+0x320>
   db08a:	e03b      	b.n	db104 <_strtod_r+0x384>
   db08c:	2b69      	cmp	r3, #105	; 0x69
   db08e:	d007      	beq.n	db0a0 <_strtod_r+0x320>
   db090:	2b6e      	cmp	r3, #110	; 0x6e
   db092:	d018      	beq.n	db0c6 <_strtod_r+0x346>
   db094:	e036      	b.n	db104 <_strtod_r+0x384>
   db096:	bf00      	nop
   db098:	000ddc20 	.word	0x000ddc20
   db09c:	7ff00000 	.word	0x7ff00000
   db0a0:	49a8      	ldr	r1, [pc, #672]	; (db344 <_strtod_r+0x5c4>)
   db0a2:	a817      	add	r0, sp, #92	; 0x5c
   db0a4:	f001 fa78 	bl	dc598 <__match>
   db0a8:	b360      	cbz	r0, db104 <_strtod_r+0x384>
   db0aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0ac:	49a6      	ldr	r1, [pc, #664]	; (db348 <_strtod_r+0x5c8>)
   db0ae:	3b01      	subs	r3, #1
   db0b0:	a817      	add	r0, sp, #92	; 0x5c
   db0b2:	9317      	str	r3, [sp, #92]	; 0x5c
   db0b4:	f001 fa70 	bl	dc598 <__match>
   db0b8:	b910      	cbnz	r0, db0c0 <_strtod_r+0x340>
   db0ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0bc:	3301      	adds	r3, #1
   db0be:	9317      	str	r3, [sp, #92]	; 0x5c
   db0c0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db364 <_strtod_r+0x5e4>
   db0c4:	e01a      	b.n	db0fc <_strtod_r+0x37c>
   db0c6:	49a1      	ldr	r1, [pc, #644]	; (db34c <_strtod_r+0x5cc>)
   db0c8:	a817      	add	r0, sp, #92	; 0x5c
   db0ca:	f001 fa65 	bl	dc598 <__match>
   db0ce:	b1c8      	cbz	r0, db104 <_strtod_r+0x384>
   db0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0d2:	781b      	ldrb	r3, [r3, #0]
   db0d4:	2b28      	cmp	r3, #40	; 0x28
   db0d6:	d10f      	bne.n	db0f8 <_strtod_r+0x378>
   db0d8:	aa1a      	add	r2, sp, #104	; 0x68
   db0da:	499d      	ldr	r1, [pc, #628]	; (db350 <_strtod_r+0x5d0>)
   db0dc:	a817      	add	r0, sp, #92	; 0x5c
   db0de:	f001 fa6e 	bl	dc5be <__hexnan>
   db0e2:	2805      	cmp	r0, #5
   db0e4:	d108      	bne.n	db0f8 <_strtod_r+0x378>
   db0e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db0e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db0ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db0f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db0f4:	f000 bc0f 	b.w	db916 <_strtod_r+0xb96>
   db0f8:	f8df b26c 	ldr.w	fp, [pc, #620]	; db368 <_strtod_r+0x5e8>
   db0fc:	f04f 0a00 	mov.w	sl, #0
   db100:	f000 bc09 	b.w	db916 <_strtod_r+0xb96>
   db104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db106:	9417      	str	r4, [sp, #92]	; 0x5c
   db108:	2b00      	cmp	r3, #0
   db10a:	f000 840f 	beq.w	db92c <_strtod_r+0xbac>
   db10e:	2300      	movs	r3, #0
   db110:	930c      	str	r3, [sp, #48]	; 0x30
   db112:	f000 bc02 	b.w	db91a <_strtod_r+0xb9a>
   db116:	9b04      	ldr	r3, [sp, #16]
   db118:	9805      	ldr	r0, [sp, #20]
   db11a:	2b00      	cmp	r3, #0
   db11c:	bf08      	it	eq
   db11e:	462b      	moveq	r3, r5
   db120:	2d10      	cmp	r5, #16
   db122:	462c      	mov	r4, r5
   db124:	ebc2 0909 	rsb	r9, r2, r9
   db128:	bfa8      	it	ge
   db12a:	2410      	movge	r4, #16
   db12c:	9304      	str	r3, [sp, #16]
   db12e:	f7fe f85d 	bl	d91ec <__aeabi_ui2d>
   db132:	2c09      	cmp	r4, #9
   db134:	4682      	mov	sl, r0
   db136:	468b      	mov	fp, r1
   db138:	dd13      	ble.n	db162 <_strtod_r+0x3e2>
   db13a:	4b86      	ldr	r3, [pc, #536]	; (db354 <_strtod_r+0x5d4>)
   db13c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db140:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db144:	f7fe f8c8 	bl	d92d8 <__aeabi_dmul>
   db148:	4606      	mov	r6, r0
   db14a:	4640      	mov	r0, r8
   db14c:	460f      	mov	r7, r1
   db14e:	f7fe f84d 	bl	d91ec <__aeabi_ui2d>
   db152:	4602      	mov	r2, r0
   db154:	460b      	mov	r3, r1
   db156:	4630      	mov	r0, r6
   db158:	4639      	mov	r1, r7
   db15a:	f7fd ff0b 	bl	d8f74 <__adddf3>
   db15e:	4682      	mov	sl, r0
   db160:	468b      	mov	fp, r1
   db162:	2d0f      	cmp	r5, #15
   db164:	dc36      	bgt.n	db1d4 <_strtod_r+0x454>
   db166:	f1b9 0f00 	cmp.w	r9, #0
   db16a:	f000 83d4 	beq.w	db916 <_strtod_r+0xb96>
   db16e:	dd24      	ble.n	db1ba <_strtod_r+0x43a>
   db170:	f1b9 0f16 	cmp.w	r9, #22
   db174:	dc07      	bgt.n	db186 <_strtod_r+0x406>
   db176:	4d77      	ldr	r5, [pc, #476]	; (db354 <_strtod_r+0x5d4>)
   db178:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db17c:	4652      	mov	r2, sl
   db17e:	465b      	mov	r3, fp
   db180:	e9d9 0100 	ldrd	r0, r1, [r9]
   db184:	e014      	b.n	db1b0 <_strtod_r+0x430>
   db186:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db18a:	4599      	cmp	r9, r3
   db18c:	dc22      	bgt.n	db1d4 <_strtod_r+0x454>
   db18e:	4c71      	ldr	r4, [pc, #452]	; (db354 <_strtod_r+0x5d4>)
   db190:	f1c5 050f 	rsb	r5, r5, #15
   db194:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db198:	ebc5 0509 	rsb	r5, r5, r9
   db19c:	4652      	mov	r2, sl
   db19e:	465b      	mov	r3, fp
   db1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   db1a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db1a8:	f7fe f896 	bl	d92d8 <__aeabi_dmul>
   db1ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   db1b0:	f7fe f892 	bl	d92d8 <__aeabi_dmul>
   db1b4:	4682      	mov	sl, r0
   db1b6:	468b      	mov	fp, r1
   db1b8:	e3ad      	b.n	db916 <_strtod_r+0xb96>
   db1ba:	f119 0f16 	cmn.w	r9, #22
   db1be:	db09      	blt.n	db1d4 <_strtod_r+0x454>
   db1c0:	4d64      	ldr	r5, [pc, #400]	; (db354 <_strtod_r+0x5d4>)
   db1c2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db1c6:	e9d9 2300 	ldrd	r2, r3, [r9]
   db1ca:	4650      	mov	r0, sl
   db1cc:	4659      	mov	r1, fp
   db1ce:	f7fe f9ad 	bl	d952c <__aeabi_ddiv>
   db1d2:	e7ef      	b.n	db1b4 <_strtod_r+0x434>
   db1d4:	1b2c      	subs	r4, r5, r4
   db1d6:	444c      	add	r4, r9
   db1d8:	2c00      	cmp	r4, #0
   db1da:	dd57      	ble.n	db28c <_strtod_r+0x50c>
   db1dc:	f014 010f 	ands.w	r1, r4, #15
   db1e0:	d00a      	beq.n	db1f8 <_strtod_r+0x478>
   db1e2:	4b5c      	ldr	r3, [pc, #368]	; (db354 <_strtod_r+0x5d4>)
   db1e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db1e8:	4652      	mov	r2, sl
   db1ea:	465b      	mov	r3, fp
   db1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   db1f0:	f7fe f872 	bl	d92d8 <__aeabi_dmul>
   db1f4:	4682      	mov	sl, r0
   db1f6:	468b      	mov	fp, r1
   db1f8:	f034 040f 	bics.w	r4, r4, #15
   db1fc:	f000 80b8 	beq.w	db370 <_strtod_r+0x5f0>
   db200:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db204:	dd0b      	ble.n	db21e <_strtod_r+0x49e>
   db206:	2400      	movs	r4, #0
   db208:	4625      	mov	r5, r4
   db20a:	9405      	str	r4, [sp, #20]
   db20c:	9404      	str	r4, [sp, #16]
   db20e:	9a02      	ldr	r2, [sp, #8]
   db210:	f8df b150 	ldr.w	fp, [pc, #336]	; db364 <_strtod_r+0x5e4>
   db214:	2322      	movs	r3, #34	; 0x22
   db216:	6013      	str	r3, [r2, #0]
   db218:	f04f 0a00 	mov.w	sl, #0
   db21c:	e187      	b.n	db52e <_strtod_r+0x7ae>
   db21e:	4e4e      	ldr	r6, [pc, #312]	; (db358 <_strtod_r+0x5d8>)
   db220:	2300      	movs	r3, #0
   db222:	1124      	asrs	r4, r4, #4
   db224:	4650      	mov	r0, sl
   db226:	4659      	mov	r1, fp
   db228:	4698      	mov	r8, r3
   db22a:	4637      	mov	r7, r6
   db22c:	2c01      	cmp	r4, #1
   db22e:	dd0b      	ble.n	db248 <_strtod_r+0x4c8>
   db230:	07e2      	lsls	r2, r4, #31
   db232:	d504      	bpl.n	db23e <_strtod_r+0x4be>
   db234:	e9d6 2300 	ldrd	r2, r3, [r6]
   db238:	f7fe f84e 	bl	d92d8 <__aeabi_dmul>
   db23c:	2301      	movs	r3, #1
   db23e:	f108 0801 	add.w	r8, r8, #1
   db242:	1064      	asrs	r4, r4, #1
   db244:	3608      	adds	r6, #8
   db246:	e7f1      	b.n	db22c <_strtod_r+0x4ac>
   db248:	b10b      	cbz	r3, db24e <_strtod_r+0x4ce>
   db24a:	4682      	mov	sl, r0
   db24c:	468b      	mov	fp, r1
   db24e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db252:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db256:	4652      	mov	r2, sl
   db258:	465b      	mov	r3, fp
   db25a:	e9d7 0100 	ldrd	r0, r1, [r7]
   db25e:	f7fe f83b 	bl	d92d8 <__aeabi_dmul>
   db262:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db266:	468b      	mov	fp, r1
   db268:	460a      	mov	r2, r1
   db26a:	0d1b      	lsrs	r3, r3, #20
   db26c:	493b      	ldr	r1, [pc, #236]	; (db35c <_strtod_r+0x5dc>)
   db26e:	051b      	lsls	r3, r3, #20
   db270:	428b      	cmp	r3, r1
   db272:	4682      	mov	sl, r0
   db274:	d8c7      	bhi.n	db206 <_strtod_r+0x486>
   db276:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db27a:	428b      	cmp	r3, r1
   db27c:	bf86      	itte	hi
   db27e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db36c <_strtod_r+0x5ec>
   db282:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db286:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db28a:	e071      	b.n	db370 <_strtod_r+0x5f0>
   db28c:	d070      	beq.n	db370 <_strtod_r+0x5f0>
   db28e:	4264      	negs	r4, r4
   db290:	f014 020f 	ands.w	r2, r4, #15
   db294:	d00a      	beq.n	db2ac <_strtod_r+0x52c>
   db296:	4b2f      	ldr	r3, [pc, #188]	; (db354 <_strtod_r+0x5d4>)
   db298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db29c:	4650      	mov	r0, sl
   db29e:	4659      	mov	r1, fp
   db2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db2a4:	f7fe f942 	bl	d952c <__aeabi_ddiv>
   db2a8:	4682      	mov	sl, r0
   db2aa:	468b      	mov	fp, r1
   db2ac:	1124      	asrs	r4, r4, #4
   db2ae:	d05f      	beq.n	db370 <_strtod_r+0x5f0>
   db2b0:	2c1f      	cmp	r4, #31
   db2b2:	dd04      	ble.n	db2be <_strtod_r+0x53e>
   db2b4:	2400      	movs	r4, #0
   db2b6:	4625      	mov	r5, r4
   db2b8:	9405      	str	r4, [sp, #20]
   db2ba:	9404      	str	r4, [sp, #16]
   db2bc:	e130      	b.n	db520 <_strtod_r+0x7a0>
   db2be:	f014 0f10 	tst.w	r4, #16
   db2c2:	bf0c      	ite	eq
   db2c4:	2300      	moveq	r3, #0
   db2c6:	236a      	movne	r3, #106	; 0x6a
   db2c8:	4e25      	ldr	r6, [pc, #148]	; (db360 <_strtod_r+0x5e0>)
   db2ca:	9303      	str	r3, [sp, #12]
   db2cc:	4650      	mov	r0, sl
   db2ce:	4659      	mov	r1, fp
   db2d0:	2300      	movs	r3, #0
   db2d2:	2c00      	cmp	r4, #0
   db2d4:	dd09      	ble.n	db2ea <_strtod_r+0x56a>
   db2d6:	07e2      	lsls	r2, r4, #31
   db2d8:	d504      	bpl.n	db2e4 <_strtod_r+0x564>
   db2da:	e9d6 2300 	ldrd	r2, r3, [r6]
   db2de:	f7fd fffb 	bl	d92d8 <__aeabi_dmul>
   db2e2:	2301      	movs	r3, #1
   db2e4:	1064      	asrs	r4, r4, #1
   db2e6:	3608      	adds	r6, #8
   db2e8:	e7f3      	b.n	db2d2 <_strtod_r+0x552>
   db2ea:	b10b      	cbz	r3, db2f0 <_strtod_r+0x570>
   db2ec:	4682      	mov	sl, r0
   db2ee:	468b      	mov	fp, r1
   db2f0:	9b03      	ldr	r3, [sp, #12]
   db2f2:	b1eb      	cbz	r3, db330 <_strtod_r+0x5b0>
   db2f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db2f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db2fc:	2b00      	cmp	r3, #0
   db2fe:	4659      	mov	r1, fp
   db300:	dd16      	ble.n	db330 <_strtod_r+0x5b0>
   db302:	2b1f      	cmp	r3, #31
   db304:	dd0e      	ble.n	db324 <_strtod_r+0x5a4>
   db306:	2b34      	cmp	r3, #52	; 0x34
   db308:	bfde      	ittt	le
   db30a:	3b20      	suble	r3, #32
   db30c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db310:	fa02 f303 	lslle.w	r3, r2, r3
   db314:	f04f 0a00 	mov.w	sl, #0
   db318:	bfcc      	ite	gt
   db31a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db31e:	ea03 0b01 	andle.w	fp, r3, r1
   db322:	e005      	b.n	db330 <_strtod_r+0x5b0>
   db324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db328:	fa02 f303 	lsl.w	r3, r2, r3
   db32c:	ea03 0a0a 	and.w	sl, r3, sl
   db330:	2200      	movs	r2, #0
   db332:	2300      	movs	r3, #0
   db334:	4650      	mov	r0, sl
   db336:	4659      	mov	r1, fp
   db338:	f7fe fa36 	bl	d97a8 <__aeabi_dcmpeq>
   db33c:	2800      	cmp	r0, #0
   db33e:	d1b9      	bne.n	db2b4 <_strtod_r+0x534>
   db340:	e018      	b.n	db374 <_strtod_r+0x5f4>
   db342:	bf00      	nop
   db344:	000ddc48 	.word	0x000ddc48
   db348:	000ddc4b 	.word	0x000ddc4b
   db34c:	000ddc89 	.word	0x000ddc89
   db350:	000ddc34 	.word	0x000ddc34
   db354:	000ddee8 	.word	0x000ddee8
   db358:	000ddfb0 	.word	0x000ddfb0
   db35c:	7ca00000 	.word	0x7ca00000
   db360:	000ddc58 	.word	0x000ddc58
   db364:	7ff00000 	.word	0x7ff00000
   db368:	fff80000 	.word	0xfff80000
   db36c:	7fefffff 	.word	0x7fefffff
   db370:	2300      	movs	r3, #0
   db372:	9303      	str	r3, [sp, #12]
   db374:	9b05      	ldr	r3, [sp, #20]
   db376:	9300      	str	r3, [sp, #0]
   db378:	9a04      	ldr	r2, [sp, #16]
   db37a:	9907      	ldr	r1, [sp, #28]
   db37c:	9802      	ldr	r0, [sp, #8]
   db37e:	462b      	mov	r3, r5
   db380:	f001 fa7f 	bl	dc882 <__s2b>
   db384:	9005      	str	r0, [sp, #20]
   db386:	2800      	cmp	r0, #0
   db388:	f43f af3d 	beq.w	db206 <_strtod_r+0x486>
   db38c:	f1b9 0f00 	cmp.w	r9, #0
   db390:	f1c9 0300 	rsb	r3, r9, #0
   db394:	bfa8      	it	ge
   db396:	2300      	movge	r3, #0
   db398:	930d      	str	r3, [sp, #52]	; 0x34
   db39a:	2400      	movs	r4, #0
   db39c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db3a0:	9312      	str	r3, [sp, #72]	; 0x48
   db3a2:	4625      	mov	r5, r4
   db3a4:	9b05      	ldr	r3, [sp, #20]
   db3a6:	9802      	ldr	r0, [sp, #8]
   db3a8:	6859      	ldr	r1, [r3, #4]
   db3aa:	f001 f9e3 	bl	dc774 <_Balloc>
   db3ae:	9004      	str	r0, [sp, #16]
   db3b0:	2800      	cmp	r0, #0
   db3b2:	f43f af2c 	beq.w	db20e <_strtod_r+0x48e>
   db3b6:	9b05      	ldr	r3, [sp, #20]
   db3b8:	691a      	ldr	r2, [r3, #16]
   db3ba:	3202      	adds	r2, #2
   db3bc:	f103 010c 	add.w	r1, r3, #12
   db3c0:	0092      	lsls	r2, r2, #2
   db3c2:	300c      	adds	r0, #12
   db3c4:	f7fe fcc4 	bl	d9d50 <memcpy>
   db3c8:	aa1a      	add	r2, sp, #104	; 0x68
   db3ca:	a919      	add	r1, sp, #100	; 0x64
   db3cc:	ec4b ab10 	vmov	d0, sl, fp
   db3d0:	9802      	ldr	r0, [sp, #8]
   db3d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db3d6:	f001 fd08 	bl	dcdea <__d2b>
   db3da:	9018      	str	r0, [sp, #96]	; 0x60
   db3dc:	2800      	cmp	r0, #0
   db3de:	f43f af16 	beq.w	db20e <_strtod_r+0x48e>
   db3e2:	2101      	movs	r1, #1
   db3e4:	9802      	ldr	r0, [sp, #8]
   db3e6:	f001 fad7 	bl	dc998 <__i2b>
   db3ea:	4605      	mov	r5, r0
   db3ec:	2800      	cmp	r0, #0
   db3ee:	f43f af0e 	beq.w	db20e <_strtod_r+0x48e>
   db3f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db3f4:	9903      	ldr	r1, [sp, #12]
   db3f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db3f8:	2b00      	cmp	r3, #0
   db3fa:	bfad      	iteet	ge
   db3fc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db3fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db400:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db404:	eb02 0803 	addge.w	r8, r2, r3
   db408:	bfb8      	it	lt
   db40a:	1ad2      	sublt	r2, r2, r3
   db40c:	eba3 0301 	sub.w	r3, r3, r1
   db410:	4433      	add	r3, r6
   db412:	49b5      	ldr	r1, [pc, #724]	; (db6e8 <_strtod_r+0x968>)
   db414:	bfa8      	it	ge
   db416:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db418:	3b01      	subs	r3, #1
   db41a:	428b      	cmp	r3, r1
   db41c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db420:	f280 808a 	bge.w	db538 <_strtod_r+0x7b8>
   db424:	1ac9      	subs	r1, r1, r3
   db426:	291f      	cmp	r1, #31
   db428:	bfc8      	it	gt
   db42a:	4fb0      	ldrgt	r7, [pc, #704]	; (db6ec <_strtod_r+0x96c>)
   db42c:	f04f 0901 	mov.w	r9, #1
   db430:	bfd4      	ite	le
   db432:	fa09 f301 	lslle.w	r3, r9, r1
   db436:	1aff      	subgt	r7, r7, r3
   db438:	eba6 0601 	sub.w	r6, r6, r1
   db43c:	bfd9      	ittee	le
   db43e:	9306      	strle	r3, [sp, #24]
   db440:	2700      	movle	r7, #0
   db442:	fa09 f707 	lslgt.w	r7, r9, r7
   db446:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db44a:	eb08 0906 	add.w	r9, r8, r6
   db44e:	9b03      	ldr	r3, [sp, #12]
   db450:	45c8      	cmp	r8, r9
   db452:	4416      	add	r6, r2
   db454:	441e      	add	r6, r3
   db456:	4643      	mov	r3, r8
   db458:	bfa8      	it	ge
   db45a:	464b      	movge	r3, r9
   db45c:	42b3      	cmp	r3, r6
   db45e:	bfa8      	it	ge
   db460:	4633      	movge	r3, r6
   db462:	2b00      	cmp	r3, #0
   db464:	bfc2      	ittt	gt
   db466:	ebc3 0909 	rsbgt	r9, r3, r9
   db46a:	1af6      	subgt	r6, r6, r3
   db46c:	ebc3 0808 	rsbgt	r8, r3, r8
   db470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db472:	2b00      	cmp	r3, #0
   db474:	d164      	bne.n	db540 <_strtod_r+0x7c0>
   db476:	f1b9 0f00 	cmp.w	r9, #0
   db47a:	dc7a      	bgt.n	db572 <_strtod_r+0x7f2>
   db47c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db47e:	2b00      	cmp	r3, #0
   db480:	f040 8081 	bne.w	db586 <_strtod_r+0x806>
   db484:	2e00      	cmp	r6, #0
   db486:	f300 8088 	bgt.w	db59a <_strtod_r+0x81a>
   db48a:	f1b8 0f00 	cmp.w	r8, #0
   db48e:	f300 808e 	bgt.w	db5ae <_strtod_r+0x82e>
   db492:	9a04      	ldr	r2, [sp, #16]
   db494:	9918      	ldr	r1, [sp, #96]	; 0x60
   db496:	9802      	ldr	r0, [sp, #8]
   db498:	f001 fbd3 	bl	dcc42 <__mdiff>
   db49c:	4604      	mov	r4, r0
   db49e:	2800      	cmp	r0, #0
   db4a0:	f43f aeb5 	beq.w	db20e <_strtod_r+0x48e>
   db4a4:	68c3      	ldr	r3, [r0, #12]
   db4a6:	9307      	str	r3, [sp, #28]
   db4a8:	2300      	movs	r3, #0
   db4aa:	60c3      	str	r3, [r0, #12]
   db4ac:	4629      	mov	r1, r5
   db4ae:	f001 fbac 	bl	dcc0a <__mcmp>
   db4b2:	2800      	cmp	r0, #0
   db4b4:	f280 8089 	bge.w	db5ca <_strtod_r+0x84a>
   db4b8:	9b07      	ldr	r3, [sp, #28]
   db4ba:	2b00      	cmp	r3, #0
   db4bc:	f040 8204 	bne.w	db8c8 <_strtod_r+0xb48>
   db4c0:	f1ba 0f00 	cmp.w	sl, #0
   db4c4:	f040 8200 	bne.w	db8c8 <_strtod_r+0xb48>
   db4c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db4cc:	2b00      	cmp	r3, #0
   db4ce:	f040 81fb 	bne.w	db8c8 <_strtod_r+0xb48>
   db4d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db4d6:	0d1b      	lsrs	r3, r3, #20
   db4d8:	051b      	lsls	r3, r3, #20
   db4da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db4de:	f240 81f3 	bls.w	db8c8 <_strtod_r+0xb48>
   db4e2:	6963      	ldr	r3, [r4, #20]
   db4e4:	2b00      	cmp	r3, #0
   db4e6:	d06c      	beq.n	db5c2 <_strtod_r+0x842>
   db4e8:	4621      	mov	r1, r4
   db4ea:	2201      	movs	r2, #1
   db4ec:	9802      	ldr	r0, [sp, #8]
   db4ee:	f001 fb3b 	bl	dcb68 <__lshift>
   db4f2:	4629      	mov	r1, r5
   db4f4:	4604      	mov	r4, r0
   db4f6:	f001 fb88 	bl	dcc0a <__mcmp>
   db4fa:	2800      	cmp	r0, #0
   db4fc:	f340 81e4 	ble.w	db8c8 <_strtod_r+0xb48>
   db500:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db504:	9a03      	ldr	r2, [sp, #12]
   db506:	0d1b      	lsrs	r3, r3, #20
   db508:	051b      	lsls	r3, r3, #20
   db50a:	2a00      	cmp	r2, #0
   db50c:	f000 808c 	beq.w	db628 <_strtod_r+0x8a8>
   db510:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db514:	f300 8088 	bgt.w	db628 <_strtod_r+0x8a8>
   db518:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db51c:	f300 81d6 	bgt.w	db8cc <_strtod_r+0xb4c>
   db520:	9a02      	ldr	r2, [sp, #8]
   db522:	2322      	movs	r3, #34	; 0x22
   db524:	f04f 0a00 	mov.w	sl, #0
   db528:	f04f 0b00 	mov.w	fp, #0
   db52c:	6013      	str	r3, [r2, #0]
   db52e:	9b05      	ldr	r3, [sp, #20]
   db530:	2b00      	cmp	r3, #0
   db532:	f040 81dc 	bne.w	db8ee <_strtod_r+0xb6e>
   db536:	e1ee      	b.n	db916 <_strtod_r+0xb96>
   db538:	2301      	movs	r3, #1
   db53a:	2700      	movs	r7, #0
   db53c:	9306      	str	r3, [sp, #24]
   db53e:	e784      	b.n	db44a <_strtod_r+0x6ca>
   db540:	4629      	mov	r1, r5
   db542:	461a      	mov	r2, r3
   db544:	9802      	ldr	r0, [sp, #8]
   db546:	f001 fac1 	bl	dcacc <__pow5mult>
   db54a:	4605      	mov	r5, r0
   db54c:	2800      	cmp	r0, #0
   db54e:	f43f ae5e 	beq.w	db20e <_strtod_r+0x48e>
   db552:	4601      	mov	r1, r0
   db554:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db556:	9802      	ldr	r0, [sp, #8]
   db558:	f001 fa27 	bl	dc9aa <__multiply>
   db55c:	9007      	str	r0, [sp, #28]
   db55e:	2800      	cmp	r0, #0
   db560:	f43f ae55 	beq.w	db20e <_strtod_r+0x48e>
   db564:	9918      	ldr	r1, [sp, #96]	; 0x60
   db566:	9802      	ldr	r0, [sp, #8]
   db568:	f001 f939 	bl	dc7de <_Bfree>
   db56c:	9b07      	ldr	r3, [sp, #28]
   db56e:	9318      	str	r3, [sp, #96]	; 0x60
   db570:	e781      	b.n	db476 <_strtod_r+0x6f6>
   db572:	464a      	mov	r2, r9
   db574:	9918      	ldr	r1, [sp, #96]	; 0x60
   db576:	9802      	ldr	r0, [sp, #8]
   db578:	f001 faf6 	bl	dcb68 <__lshift>
   db57c:	9018      	str	r0, [sp, #96]	; 0x60
   db57e:	2800      	cmp	r0, #0
   db580:	f47f af7c 	bne.w	db47c <_strtod_r+0x6fc>
   db584:	e643      	b.n	db20e <_strtod_r+0x48e>
   db586:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db588:	9904      	ldr	r1, [sp, #16]
   db58a:	9802      	ldr	r0, [sp, #8]
   db58c:	f001 fa9e 	bl	dcacc <__pow5mult>
   db590:	9004      	str	r0, [sp, #16]
   db592:	2800      	cmp	r0, #0
   db594:	f47f af76 	bne.w	db484 <_strtod_r+0x704>
   db598:	e639      	b.n	db20e <_strtod_r+0x48e>
   db59a:	4632      	mov	r2, r6
   db59c:	9904      	ldr	r1, [sp, #16]
   db59e:	9802      	ldr	r0, [sp, #8]
   db5a0:	f001 fae2 	bl	dcb68 <__lshift>
   db5a4:	9004      	str	r0, [sp, #16]
   db5a6:	2800      	cmp	r0, #0
   db5a8:	f47f af6f 	bne.w	db48a <_strtod_r+0x70a>
   db5ac:	e62f      	b.n	db20e <_strtod_r+0x48e>
   db5ae:	4629      	mov	r1, r5
   db5b0:	4642      	mov	r2, r8
   db5b2:	9802      	ldr	r0, [sp, #8]
   db5b4:	f001 fad8 	bl	dcb68 <__lshift>
   db5b8:	4605      	mov	r5, r0
   db5ba:	2800      	cmp	r0, #0
   db5bc:	f47f af69 	bne.w	db492 <_strtod_r+0x712>
   db5c0:	e625      	b.n	db20e <_strtod_r+0x48e>
   db5c2:	6923      	ldr	r3, [r4, #16]
   db5c4:	2b01      	cmp	r3, #1
   db5c6:	dc8f      	bgt.n	db4e8 <_strtod_r+0x768>
   db5c8:	e17e      	b.n	db8c8 <_strtod_r+0xb48>
   db5ca:	d161      	bne.n	db690 <_strtod_r+0x910>
   db5cc:	9a07      	ldr	r2, [sp, #28]
   db5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db5d2:	b322      	cbz	r2, db61e <_strtod_r+0x89e>
   db5d4:	4946      	ldr	r1, [pc, #280]	; (db6f0 <_strtod_r+0x970>)
   db5d6:	428b      	cmp	r3, r1
   db5d8:	465a      	mov	r2, fp
   db5da:	d12e      	bne.n	db63a <_strtod_r+0x8ba>
   db5dc:	9b03      	ldr	r3, [sp, #12]
   db5de:	4651      	mov	r1, sl
   db5e0:	b163      	cbz	r3, db5fc <_strtod_r+0x87c>
   db5e2:	4b44      	ldr	r3, [pc, #272]	; (db6f4 <_strtod_r+0x974>)
   db5e4:	4013      	ands	r3, r2
   db5e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db5ea:	d807      	bhi.n	db5fc <_strtod_r+0x87c>
   db5ec:	0d1b      	lsrs	r3, r3, #20
   db5ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db5f6:	fa00 f303 	lsl.w	r3, r0, r3
   db5fa:	e001      	b.n	db600 <_strtod_r+0x880>
   db5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db600:	428b      	cmp	r3, r1
   db602:	d11a      	bne.n	db63a <_strtod_r+0x8ba>
   db604:	493c      	ldr	r1, [pc, #240]	; (db6f8 <_strtod_r+0x978>)
   db606:	428a      	cmp	r2, r1
   db608:	d102      	bne.n	db610 <_strtod_r+0x890>
   db60a:	3301      	adds	r3, #1
   db60c:	f43f adff 	beq.w	db20e <_strtod_r+0x48e>
   db610:	4b38      	ldr	r3, [pc, #224]	; (db6f4 <_strtod_r+0x974>)
   db612:	4013      	ands	r3, r2
   db614:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db618:	f04f 0a00 	mov.w	sl, #0
   db61c:	e154      	b.n	db8c8 <_strtod_r+0xb48>
   db61e:	b963      	cbnz	r3, db63a <_strtod_r+0x8ba>
   db620:	f1ba 0f00 	cmp.w	sl, #0
   db624:	d109      	bne.n	db63a <_strtod_r+0x8ba>
   db626:	e76b      	b.n	db500 <_strtod_r+0x780>
   db628:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db62c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db630:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db634:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db638:	e146      	b.n	db8c8 <_strtod_r+0xb48>
   db63a:	b117      	cbz	r7, db642 <_strtod_r+0x8c2>
   db63c:	ea17 0f0b 	tst.w	r7, fp
   db640:	e002      	b.n	db648 <_strtod_r+0x8c8>
   db642:	9b06      	ldr	r3, [sp, #24]
   db644:	ea13 0f0a 	tst.w	r3, sl
   db648:	f000 813e 	beq.w	db8c8 <_strtod_r+0xb48>
   db64c:	9b07      	ldr	r3, [sp, #28]
   db64e:	9a03      	ldr	r2, [sp, #12]
   db650:	4650      	mov	r0, sl
   db652:	4659      	mov	r1, fp
   db654:	b153      	cbz	r3, db66c <_strtod_r+0x8ec>
   db656:	f7ff fb77 	bl	dad48 <sulp>
   db65a:	4602      	mov	r2, r0
   db65c:	460b      	mov	r3, r1
   db65e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db662:	f7fd fc87 	bl	d8f74 <__adddf3>
   db666:	4682      	mov	sl, r0
   db668:	468b      	mov	fp, r1
   db66a:	e12d      	b.n	db8c8 <_strtod_r+0xb48>
   db66c:	f7ff fb6c 	bl	dad48 <sulp>
   db670:	4602      	mov	r2, r0
   db672:	460b      	mov	r3, r1
   db674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db678:	f7fd fc7a 	bl	d8f70 <__aeabi_dsub>
   db67c:	2200      	movs	r2, #0
   db67e:	2300      	movs	r3, #0
   db680:	4682      	mov	sl, r0
   db682:	468b      	mov	fp, r1
   db684:	f7fe f890 	bl	d97a8 <__aeabi_dcmpeq>
   db688:	2800      	cmp	r0, #0
   db68a:	f47f af49 	bne.w	db520 <_strtod_r+0x7a0>
   db68e:	e11b      	b.n	db8c8 <_strtod_r+0xb48>
   db690:	4629      	mov	r1, r5
   db692:	4620      	mov	r0, r4
   db694:	f001 fbf7 	bl	dce86 <__ratio>
   db698:	ec57 6b10 	vmov	r6, r7, d0
   db69c:	2200      	movs	r2, #0
   db69e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db6a2:	ee10 0a10 	vmov	r0, s0
   db6a6:	4639      	mov	r1, r7
   db6a8:	f7fe f892 	bl	d97d0 <__aeabi_dcmple>
   db6ac:	2800      	cmp	r0, #0
   db6ae:	d042      	beq.n	db736 <_strtod_r+0x9b6>
   db6b0:	9b07      	ldr	r3, [sp, #28]
   db6b2:	b123      	cbz	r3, db6be <_strtod_r+0x93e>
   db6b4:	f04f 0800 	mov.w	r8, #0
   db6b8:	f8df 9040 	ldr.w	r9, [pc, #64]	; db6fc <_strtod_r+0x97c>
   db6bc:	e011      	b.n	db6e2 <_strtod_r+0x962>
   db6be:	f1ba 0f00 	cmp.w	sl, #0
   db6c2:	d103      	bne.n	db6cc <_strtod_r+0x94c>
   db6c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db6c8:	b93b      	cbnz	r3, db6da <_strtod_r+0x95a>
   db6ca:	e01b      	b.n	db704 <_strtod_r+0x984>
   db6cc:	f1ba 0f01 	cmp.w	sl, #1
   db6d0:	d103      	bne.n	db6da <_strtod_r+0x95a>
   db6d2:	f1bb 0f00 	cmp.w	fp, #0
   db6d6:	f43f af23 	beq.w	db520 <_strtod_r+0x7a0>
   db6da:	f8df 9024 	ldr.w	r9, [pc, #36]	; db700 <_strtod_r+0x980>
   db6de:	f04f 0800 	mov.w	r8, #0
   db6e2:	2600      	movs	r6, #0
   db6e4:	4f05      	ldr	r7, [pc, #20]	; (db6fc <_strtod_r+0x97c>)
   db6e6:	e039      	b.n	db75c <_strtod_r+0x9dc>
   db6e8:	fffffc02 	.word	0xfffffc02
   db6ec:	fffffbe2 	.word	0xfffffbe2
   db6f0:	000fffff 	.word	0x000fffff
   db6f4:	7ff00000 	.word	0x7ff00000
   db6f8:	7fefffff 	.word	0x7fefffff
   db6fc:	3ff00000 	.word	0x3ff00000
   db700:	bff00000 	.word	0xbff00000
   db704:	2200      	movs	r2, #0
   db706:	4b98      	ldr	r3, [pc, #608]	; (db968 <_strtod_r+0xbe8>)
   db708:	4630      	mov	r0, r6
   db70a:	4639      	mov	r1, r7
   db70c:	f7fe f856 	bl	d97bc <__aeabi_dcmplt>
   db710:	b940      	cbnz	r0, db724 <_strtod_r+0x9a4>
   db712:	4630      	mov	r0, r6
   db714:	4639      	mov	r1, r7
   db716:	2200      	movs	r2, #0
   db718:	4b94      	ldr	r3, [pc, #592]	; (db96c <_strtod_r+0xbec>)
   db71a:	f7fd fddd 	bl	d92d8 <__aeabi_dmul>
   db71e:	4606      	mov	r6, r0
   db720:	460f      	mov	r7, r1
   db722:	e001      	b.n	db728 <_strtod_r+0x9a8>
   db724:	4f91      	ldr	r7, [pc, #580]	; (db96c <_strtod_r+0xbec>)
   db726:	2600      	movs	r6, #0
   db728:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db72c:	9614      	str	r6, [sp, #80]	; 0x50
   db72e:	9315      	str	r3, [sp, #84]	; 0x54
   db730:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db734:	e012      	b.n	db75c <_strtod_r+0x9dc>
   db736:	4b8d      	ldr	r3, [pc, #564]	; (db96c <_strtod_r+0xbec>)
   db738:	4630      	mov	r0, r6
   db73a:	4639      	mov	r1, r7
   db73c:	2200      	movs	r2, #0
   db73e:	f7fd fdcb 	bl	d92d8 <__aeabi_dmul>
   db742:	9b07      	ldr	r3, [sp, #28]
   db744:	4606      	mov	r6, r0
   db746:	460f      	mov	r7, r1
   db748:	b923      	cbnz	r3, db754 <_strtod_r+0x9d4>
   db74a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db74e:	900e      	str	r0, [sp, #56]	; 0x38
   db750:	930f      	str	r3, [sp, #60]	; 0x3c
   db752:	e001      	b.n	db758 <_strtod_r+0x9d8>
   db754:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db758:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db75c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db760:	0d1b      	lsrs	r3, r3, #20
   db762:	051b      	lsls	r3, r3, #20
   db764:	9306      	str	r3, [sp, #24]
   db766:	9a06      	ldr	r2, [sp, #24]
   db768:	4b81      	ldr	r3, [pc, #516]	; (db970 <_strtod_r+0xbf0>)
   db76a:	429a      	cmp	r2, r3
   db76c:	d12b      	bne.n	db7c6 <_strtod_r+0xa46>
   db76e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db772:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db776:	ec4b ab10 	vmov	d0, sl, fp
   db77a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db77e:	f001 fabf 	bl	dcd00 <__ulp>
   db782:	4640      	mov	r0, r8
   db784:	ec53 2b10 	vmov	r2, r3, d0
   db788:	4649      	mov	r1, r9
   db78a:	f7fd fda5 	bl	d92d8 <__aeabi_dmul>
   db78e:	4652      	mov	r2, sl
   db790:	465b      	mov	r3, fp
   db792:	f7fd fbef 	bl	d8f74 <__adddf3>
   db796:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db79a:	0d1b      	lsrs	r3, r3, #20
   db79c:	4a75      	ldr	r2, [pc, #468]	; (db974 <_strtod_r+0xbf4>)
   db79e:	051b      	lsls	r3, r3, #20
   db7a0:	4293      	cmp	r3, r2
   db7a2:	4682      	mov	sl, r0
   db7a4:	d90c      	bls.n	db7c0 <_strtod_r+0xa40>
   db7a6:	4b74      	ldr	r3, [pc, #464]	; (db978 <_strtod_r+0xbf8>)
   db7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db7aa:	429a      	cmp	r2, r3
   db7ac:	d103      	bne.n	db7b6 <_strtod_r+0xa36>
   db7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db7b0:	3301      	adds	r3, #1
   db7b2:	f43f ad2c 	beq.w	db20e <_strtod_r+0x48e>
   db7b6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; db978 <_strtod_r+0xbf8>
   db7ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db7be:	e072      	b.n	db8a6 <_strtod_r+0xb26>
   db7c0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db7c4:	e038      	b.n	db838 <_strtod_r+0xab8>
   db7c6:	9b03      	ldr	r3, [sp, #12]
   db7c8:	b333      	cbz	r3, db818 <_strtod_r+0xa98>
   db7ca:	9b06      	ldr	r3, [sp, #24]
   db7cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db7d0:	d822      	bhi.n	db818 <_strtod_r+0xa98>
   db7d2:	a35d      	add	r3, pc, #372	; (adr r3, db948 <_strtod_r+0xbc8>)
   db7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db7d8:	4630      	mov	r0, r6
   db7da:	4639      	mov	r1, r7
   db7dc:	f7fd fff8 	bl	d97d0 <__aeabi_dcmple>
   db7e0:	b1a8      	cbz	r0, db80e <_strtod_r+0xa8e>
   db7e2:	4639      	mov	r1, r7
   db7e4:	4630      	mov	r0, r6
   db7e6:	f7fe f84f 	bl	d9888 <__aeabi_d2uiz>
   db7ea:	2800      	cmp	r0, #0
   db7ec:	bf08      	it	eq
   db7ee:	2001      	moveq	r0, #1
   db7f0:	f7fd fcfc 	bl	d91ec <__aeabi_ui2d>
   db7f4:	9b07      	ldr	r3, [sp, #28]
   db7f6:	4606      	mov	r6, r0
   db7f8:	460f      	mov	r7, r1
   db7fa:	b923      	cbnz	r3, db806 <_strtod_r+0xa86>
   db7fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db800:	9010      	str	r0, [sp, #64]	; 0x40
   db802:	9311      	str	r3, [sp, #68]	; 0x44
   db804:	e001      	b.n	db80a <_strtod_r+0xa8a>
   db806:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db80a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db80e:	9a06      	ldr	r2, [sp, #24]
   db810:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db814:	ebc2 0903 	rsb	r9, r2, r3
   db818:	ed9d 0b08 	vldr	d0, [sp, #32]
   db81c:	f001 fa70 	bl	dcd00 <__ulp>
   db820:	4640      	mov	r0, r8
   db822:	ec53 2b10 	vmov	r2, r3, d0
   db826:	4649      	mov	r1, r9
   db828:	f7fd fd56 	bl	d92d8 <__aeabi_dmul>
   db82c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db830:	f7fd fba0 	bl	d8f74 <__adddf3>
   db834:	4682      	mov	sl, r0
   db836:	468b      	mov	fp, r1
   db838:	9b03      	ldr	r3, [sp, #12]
   db83a:	bba3      	cbnz	r3, db8a6 <_strtod_r+0xb26>
   db83c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db840:	0d1b      	lsrs	r3, r3, #20
   db842:	9a06      	ldr	r2, [sp, #24]
   db844:	051b      	lsls	r3, r3, #20
   db846:	429a      	cmp	r2, r3
   db848:	46d8      	mov	r8, fp
   db84a:	d12c      	bne.n	db8a6 <_strtod_r+0xb26>
   db84c:	4639      	mov	r1, r7
   db84e:	4630      	mov	r0, r6
   db850:	f7fd fff2 	bl	d9838 <__aeabi_d2iz>
   db854:	f7fd fcda 	bl	d920c <__aeabi_i2d>
   db858:	460b      	mov	r3, r1
   db85a:	4602      	mov	r2, r0
   db85c:	4639      	mov	r1, r7
   db85e:	4630      	mov	r0, r6
   db860:	f7fd fb86 	bl	d8f70 <__aeabi_dsub>
   db864:	9b07      	ldr	r3, [sp, #28]
   db866:	4606      	mov	r6, r0
   db868:	460f      	mov	r7, r1
   db86a:	b92b      	cbnz	r3, db878 <_strtod_r+0xaf8>
   db86c:	f1ba 0f00 	cmp.w	sl, #0
   db870:	d102      	bne.n	db878 <_strtod_r+0xaf8>
   db872:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db876:	b183      	cbz	r3, db89a <_strtod_r+0xb1a>
   db878:	a335      	add	r3, pc, #212	; (adr r3, db950 <_strtod_r+0xbd0>)
   db87a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db87e:	4630      	mov	r0, r6
   db880:	4639      	mov	r1, r7
   db882:	f7fd ff9b 	bl	d97bc <__aeabi_dcmplt>
   db886:	2800      	cmp	r0, #0
   db888:	d131      	bne.n	db8ee <_strtod_r+0xb6e>
   db88a:	a333      	add	r3, pc, #204	; (adr r3, db958 <_strtod_r+0xbd8>)
   db88c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db890:	4630      	mov	r0, r6
   db892:	4639      	mov	r1, r7
   db894:	f7fd ffb0 	bl	d97f8 <__aeabi_dcmpgt>
   db898:	e004      	b.n	db8a4 <_strtod_r+0xb24>
   db89a:	a331      	add	r3, pc, #196	; (adr r3, db960 <_strtod_r+0xbe0>)
   db89c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db8a0:	f7fd ff8c 	bl	d97bc <__aeabi_dcmplt>
   db8a4:	bb18      	cbnz	r0, db8ee <_strtod_r+0xb6e>
   db8a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   db8a8:	9802      	ldr	r0, [sp, #8]
   db8aa:	f000 ff98 	bl	dc7de <_Bfree>
   db8ae:	9904      	ldr	r1, [sp, #16]
   db8b0:	9802      	ldr	r0, [sp, #8]
   db8b2:	f000 ff94 	bl	dc7de <_Bfree>
   db8b6:	4629      	mov	r1, r5
   db8b8:	9802      	ldr	r0, [sp, #8]
   db8ba:	f000 ff90 	bl	dc7de <_Bfree>
   db8be:	4621      	mov	r1, r4
   db8c0:	9802      	ldr	r0, [sp, #8]
   db8c2:	f000 ff8c 	bl	dc7de <_Bfree>
   db8c6:	e56d      	b.n	db3a4 <_strtod_r+0x624>
   db8c8:	9b03      	ldr	r3, [sp, #12]
   db8ca:	b183      	cbz	r3, db8ee <_strtod_r+0xb6e>
   db8cc:	4b2b      	ldr	r3, [pc, #172]	; (db97c <_strtod_r+0xbfc>)
   db8ce:	930b      	str	r3, [sp, #44]	; 0x2c
   db8d0:	2300      	movs	r3, #0
   db8d2:	930a      	str	r3, [sp, #40]	; 0x28
   db8d4:	4650      	mov	r0, sl
   db8d6:	4659      	mov	r1, fp
   db8d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db8dc:	f7fd fcfc 	bl	d92d8 <__aeabi_dmul>
   db8e0:	4682      	mov	sl, r0
   db8e2:	468b      	mov	fp, r1
   db8e4:	b919      	cbnz	r1, db8ee <_strtod_r+0xb6e>
   db8e6:	b910      	cbnz	r0, db8ee <_strtod_r+0xb6e>
   db8e8:	9a02      	ldr	r2, [sp, #8]
   db8ea:	2322      	movs	r3, #34	; 0x22
   db8ec:	6013      	str	r3, [r2, #0]
   db8ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   db8f0:	9802      	ldr	r0, [sp, #8]
   db8f2:	f000 ff74 	bl	dc7de <_Bfree>
   db8f6:	9904      	ldr	r1, [sp, #16]
   db8f8:	9802      	ldr	r0, [sp, #8]
   db8fa:	f000 ff70 	bl	dc7de <_Bfree>
   db8fe:	4629      	mov	r1, r5
   db900:	9802      	ldr	r0, [sp, #8]
   db902:	f000 ff6c 	bl	dc7de <_Bfree>
   db906:	9905      	ldr	r1, [sp, #20]
   db908:	9802      	ldr	r0, [sp, #8]
   db90a:	f000 ff68 	bl	dc7de <_Bfree>
   db90e:	4621      	mov	r1, r4
   db910:	9802      	ldr	r0, [sp, #8]
   db912:	f000 ff64 	bl	dc7de <_Bfree>
   db916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db918:	b113      	cbz	r3, db920 <_strtod_r+0xba0>
   db91a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   db91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db91e:	6013      	str	r3, [r2, #0]
   db920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db922:	b11b      	cbz	r3, db92c <_strtod_r+0xbac>
   db924:	4652      	mov	r2, sl
   db926:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db92a:	e007      	b.n	db93c <_strtod_r+0xbbc>
   db92c:	4652      	mov	r2, sl
   db92e:	465b      	mov	r3, fp
   db930:	e004      	b.n	db93c <_strtod_r+0xbbc>
   db932:	2500      	movs	r5, #0
   db934:	462a      	mov	r2, r5
   db936:	2101      	movs	r1, #1
   db938:	f7ff bb41 	b.w	dafbe <_strtod_r+0x23e>
   db93c:	ec43 2b10 	vmov	d0, r2, r3
   db940:	b01d      	add	sp, #116	; 0x74
   db942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db946:	bf00      	nop
   db948:	ffc00000 	.word	0xffc00000
   db94c:	41dfffff 	.word	0x41dfffff
   db950:	94a03595 	.word	0x94a03595
   db954:	3fdfffff 	.word	0x3fdfffff
   db958:	35afe535 	.word	0x35afe535
   db95c:	3fe00000 	.word	0x3fe00000
   db960:	94a03595 	.word	0x94a03595
   db964:	3fcfffff 	.word	0x3fcfffff
   db968:	3ff00000 	.word	0x3ff00000
   db96c:	3fe00000 	.word	0x3fe00000
   db970:	7fe00000 	.word	0x7fe00000
   db974:	7c9fffff 	.word	0x7c9fffff
   db978:	7fefffff 	.word	0x7fefffff
   db97c:	39500000 	.word	0x39500000

000db980 <strtof>:
   db980:	b538      	push	{r3, r4, r5, lr}
   db982:	4b0e      	ldr	r3, [pc, #56]	; (db9bc <strtof+0x3c>)
   db984:	460a      	mov	r2, r1
   db986:	4601      	mov	r1, r0
   db988:	6818      	ldr	r0, [r3, #0]
   db98a:	f7ff f9f9 	bl	dad80 <_strtod_r>
   db98e:	ec55 4b10 	vmov	r4, r5, d0
   db992:	ee10 2a10 	vmov	r2, s0
   db996:	462b      	mov	r3, r5
   db998:	ee10 0a10 	vmov	r0, s0
   db99c:	4629      	mov	r1, r5
   db99e:	f7fd ff35 	bl	d980c <__aeabi_dcmpun>
   db9a2:	b120      	cbz	r0, db9ae <strtof+0x2e>
   db9a4:	2000      	movs	r0, #0
   db9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db9aa:	f001 bae1 	b.w	dcf70 <nanf>
   db9ae:	4620      	mov	r0, r4
   db9b0:	4629      	mov	r1, r5
   db9b2:	f7fd ff89 	bl	d98c8 <__aeabi_d2f>
   db9b6:	ee00 0a10 	vmov	s0, r0
   db9ba:	bd38      	pop	{r3, r4, r5, pc}
   db9bc:	2003dff0 	.word	0x2003dff0

000db9c0 <_strtol_r>:
   db9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db9c4:	4680      	mov	r8, r0
   db9c6:	4840      	ldr	r0, [pc, #256]	; (dbac8 <_strtol_r+0x108>)
   db9c8:	f8d0 9000 	ldr.w	r9, [r0]
   db9cc:	460f      	mov	r7, r1
   db9ce:	463d      	mov	r5, r7
   db9d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   db9d4:	eb09 0004 	add.w	r0, r9, r4
   db9d8:	7840      	ldrb	r0, [r0, #1]
   db9da:	f000 0008 	and.w	r0, r0, #8
   db9de:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db9e2:	b108      	cbz	r0, db9e8 <_strtol_r+0x28>
   db9e4:	462f      	mov	r7, r5
   db9e6:	e7f2      	b.n	db9ce <_strtol_r+0xe>
   db9e8:	2c2d      	cmp	r4, #45	; 0x2d
   db9ea:	d103      	bne.n	db9f4 <_strtol_r+0x34>
   db9ec:	1cbd      	adds	r5, r7, #2
   db9ee:	787c      	ldrb	r4, [r7, #1]
   db9f0:	2601      	movs	r6, #1
   db9f2:	e003      	b.n	db9fc <_strtol_r+0x3c>
   db9f4:	2c2b      	cmp	r4, #43	; 0x2b
   db9f6:	bf04      	itt	eq
   db9f8:	787c      	ldrbeq	r4, [r7, #1]
   db9fa:	1cbd      	addeq	r5, r7, #2
   db9fc:	b113      	cbz	r3, dba04 <_strtol_r+0x44>
   db9fe:	2b10      	cmp	r3, #16
   dba00:	d10a      	bne.n	dba18 <_strtol_r+0x58>
   dba02:	e05b      	b.n	dbabc <_strtol_r+0xfc>
   dba04:	2c30      	cmp	r4, #48	; 0x30
   dba06:	d157      	bne.n	dbab8 <_strtol_r+0xf8>
   dba08:	7828      	ldrb	r0, [r5, #0]
   dba0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dba0e:	2858      	cmp	r0, #88	; 0x58
   dba10:	d14d      	bne.n	dbaae <_strtol_r+0xee>
   dba12:	786c      	ldrb	r4, [r5, #1]
   dba14:	2310      	movs	r3, #16
   dba16:	3502      	adds	r5, #2
   dba18:	2e00      	cmp	r6, #0
   dba1a:	bf14      	ite	ne
   dba1c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dba20:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dba24:	2700      	movs	r7, #0
   dba26:	fbbc faf3 	udiv	sl, ip, r3
   dba2a:	4638      	mov	r0, r7
   dba2c:	fb03 cc1a 	mls	ip, r3, sl, ip
   dba30:	eb09 0e04 	add.w	lr, r9, r4
   dba34:	f89e e001 	ldrb.w	lr, [lr, #1]
   dba38:	f01e 0f04 	tst.w	lr, #4
   dba3c:	d001      	beq.n	dba42 <_strtol_r+0x82>
   dba3e:	3c30      	subs	r4, #48	; 0x30
   dba40:	e00b      	b.n	dba5a <_strtol_r+0x9a>
   dba42:	f01e 0e03 	ands.w	lr, lr, #3
   dba46:	d01b      	beq.n	dba80 <_strtol_r+0xc0>
   dba48:	f1be 0f01 	cmp.w	lr, #1
   dba4c:	bf0c      	ite	eq
   dba4e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dba52:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dba56:	ebce 0404 	rsb	r4, lr, r4
   dba5a:	42a3      	cmp	r3, r4
   dba5c:	dd10      	ble.n	dba80 <_strtol_r+0xc0>
   dba5e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dba62:	d00a      	beq.n	dba7a <_strtol_r+0xba>
   dba64:	4550      	cmp	r0, sl
   dba66:	d806      	bhi.n	dba76 <_strtol_r+0xb6>
   dba68:	d101      	bne.n	dba6e <_strtol_r+0xae>
   dba6a:	4564      	cmp	r4, ip
   dba6c:	dc03      	bgt.n	dba76 <_strtol_r+0xb6>
   dba6e:	fb03 4000 	mla	r0, r3, r0, r4
   dba72:	2701      	movs	r7, #1
   dba74:	e001      	b.n	dba7a <_strtol_r+0xba>
   dba76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dba7a:	f815 4b01 	ldrb.w	r4, [r5], #1
   dba7e:	e7d7      	b.n	dba30 <_strtol_r+0x70>
   dba80:	1c7b      	adds	r3, r7, #1
   dba82:	d10c      	bne.n	dba9e <_strtol_r+0xde>
   dba84:	2e00      	cmp	r6, #0
   dba86:	f04f 0322 	mov.w	r3, #34	; 0x22
   dba8a:	bf14      	ite	ne
   dba8c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dba90:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dba94:	f8c8 3000 	str.w	r3, [r8]
   dba98:	b92a      	cbnz	r2, dbaa6 <_strtol_r+0xe6>
   dba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dba9e:	b106      	cbz	r6, dbaa2 <_strtol_r+0xe2>
   dbaa0:	4240      	negs	r0, r0
   dbaa2:	b172      	cbz	r2, dbac2 <_strtol_r+0x102>
   dbaa4:	b107      	cbz	r7, dbaa8 <_strtol_r+0xe8>
   dbaa6:	1e69      	subs	r1, r5, #1
   dbaa8:	6011      	str	r1, [r2, #0]
   dbaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbaae:	2430      	movs	r4, #48	; 0x30
   dbab0:	2b00      	cmp	r3, #0
   dbab2:	d1b1      	bne.n	dba18 <_strtol_r+0x58>
   dbab4:	2308      	movs	r3, #8
   dbab6:	e7af      	b.n	dba18 <_strtol_r+0x58>
   dbab8:	230a      	movs	r3, #10
   dbaba:	e7ad      	b.n	dba18 <_strtol_r+0x58>
   dbabc:	2c30      	cmp	r4, #48	; 0x30
   dbabe:	d0a3      	beq.n	dba08 <_strtol_r+0x48>
   dbac0:	e7aa      	b.n	dba18 <_strtol_r+0x58>
   dbac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbac6:	bf00      	nop
   dbac8:	2003df8c 	.word	0x2003df8c

000dbacc <strtol>:
   dbacc:	4613      	mov	r3, r2
   dbace:	460a      	mov	r2, r1
   dbad0:	4601      	mov	r1, r0
   dbad2:	4802      	ldr	r0, [pc, #8]	; (dbadc <strtol+0x10>)
   dbad4:	6800      	ldr	r0, [r0, #0]
   dbad6:	f7ff bf73 	b.w	db9c0 <_strtol_r>
   dbada:	bf00      	nop
   dbadc:	2003dff0 	.word	0x2003dff0

000dbae0 <_strtoul_r>:
   dbae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbae4:	4680      	mov	r8, r0
   dbae6:	483c      	ldr	r0, [pc, #240]	; (dbbd8 <_strtoul_r+0xf8>)
   dbae8:	f8d0 9000 	ldr.w	r9, [r0]
   dbaec:	460e      	mov	r6, r1
   dbaee:	4635      	mov	r5, r6
   dbaf0:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbaf4:	eb09 0004 	add.w	r0, r9, r4
   dbaf8:	7840      	ldrb	r0, [r0, #1]
   dbafa:	f000 0008 	and.w	r0, r0, #8
   dbafe:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dbb02:	b108      	cbz	r0, dbb08 <_strtoul_r+0x28>
   dbb04:	462e      	mov	r6, r5
   dbb06:	e7f2      	b.n	dbaee <_strtoul_r+0xe>
   dbb08:	2c2d      	cmp	r4, #45	; 0x2d
   dbb0a:	d103      	bne.n	dbb14 <_strtoul_r+0x34>
   dbb0c:	1cb5      	adds	r5, r6, #2
   dbb0e:	7874      	ldrb	r4, [r6, #1]
   dbb10:	2701      	movs	r7, #1
   dbb12:	e003      	b.n	dbb1c <_strtoul_r+0x3c>
   dbb14:	2c2b      	cmp	r4, #43	; 0x2b
   dbb16:	bf04      	itt	eq
   dbb18:	7874      	ldrbeq	r4, [r6, #1]
   dbb1a:	1cb5      	addeq	r5, r6, #2
   dbb1c:	b113      	cbz	r3, dbb24 <_strtoul_r+0x44>
   dbb1e:	2b10      	cmp	r3, #16
   dbb20:	d10a      	bne.n	dbb38 <_strtoul_r+0x58>
   dbb22:	e053      	b.n	dbbcc <_strtoul_r+0xec>
   dbb24:	2c30      	cmp	r4, #48	; 0x30
   dbb26:	d14f      	bne.n	dbbc8 <_strtoul_r+0xe8>
   dbb28:	7828      	ldrb	r0, [r5, #0]
   dbb2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbb2e:	2858      	cmp	r0, #88	; 0x58
   dbb30:	d145      	bne.n	dbbbe <_strtoul_r+0xde>
   dbb32:	786c      	ldrb	r4, [r5, #1]
   dbb34:	2310      	movs	r3, #16
   dbb36:	3502      	adds	r5, #2
   dbb38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dbb3c:	2600      	movs	r6, #0
   dbb3e:	fbbc fcf3 	udiv	ip, ip, r3
   dbb42:	fb03 fa0c 	mul.w	sl, r3, ip
   dbb46:	ea6f 0a0a 	mvn.w	sl, sl
   dbb4a:	4630      	mov	r0, r6
   dbb4c:	eb09 0e04 	add.w	lr, r9, r4
   dbb50:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbb54:	f01e 0f04 	tst.w	lr, #4
   dbb58:	d001      	beq.n	dbb5e <_strtoul_r+0x7e>
   dbb5a:	3c30      	subs	r4, #48	; 0x30
   dbb5c:	e00b      	b.n	dbb76 <_strtoul_r+0x96>
   dbb5e:	f01e 0e03 	ands.w	lr, lr, #3
   dbb62:	d01a      	beq.n	dbb9a <_strtoul_r+0xba>
   dbb64:	f1be 0f01 	cmp.w	lr, #1
   dbb68:	bf0c      	ite	eq
   dbb6a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbb6e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbb72:	ebce 0404 	rsb	r4, lr, r4
   dbb76:	42a3      	cmp	r3, r4
   dbb78:	dd0f      	ble.n	dbb9a <_strtoul_r+0xba>
   dbb7a:	2e00      	cmp	r6, #0
   dbb7c:	db08      	blt.n	dbb90 <_strtoul_r+0xb0>
   dbb7e:	4560      	cmp	r0, ip
   dbb80:	d806      	bhi.n	dbb90 <_strtoul_r+0xb0>
   dbb82:	d101      	bne.n	dbb88 <_strtoul_r+0xa8>
   dbb84:	4554      	cmp	r4, sl
   dbb86:	dc03      	bgt.n	dbb90 <_strtoul_r+0xb0>
   dbb88:	fb03 4000 	mla	r0, r3, r0, r4
   dbb8c:	2601      	movs	r6, #1
   dbb8e:	e001      	b.n	dbb94 <_strtoul_r+0xb4>
   dbb90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbb94:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb98:	e7d8      	b.n	dbb4c <_strtoul_r+0x6c>
   dbb9a:	2e00      	cmp	r6, #0
   dbb9c:	da07      	bge.n	dbbae <_strtoul_r+0xce>
   dbb9e:	2322      	movs	r3, #34	; 0x22
   dbba0:	f8c8 3000 	str.w	r3, [r8]
   dbba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbba8:	b92a      	cbnz	r2, dbbb6 <_strtoul_r+0xd6>
   dbbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbae:	b107      	cbz	r7, dbbb2 <_strtoul_r+0xd2>
   dbbb0:	4240      	negs	r0, r0
   dbbb2:	b172      	cbz	r2, dbbd2 <_strtoul_r+0xf2>
   dbbb4:	b106      	cbz	r6, dbbb8 <_strtoul_r+0xd8>
   dbbb6:	1e69      	subs	r1, r5, #1
   dbbb8:	6011      	str	r1, [r2, #0]
   dbbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbbe:	2430      	movs	r4, #48	; 0x30
   dbbc0:	2b00      	cmp	r3, #0
   dbbc2:	d1b9      	bne.n	dbb38 <_strtoul_r+0x58>
   dbbc4:	2308      	movs	r3, #8
   dbbc6:	e7b7      	b.n	dbb38 <_strtoul_r+0x58>
   dbbc8:	230a      	movs	r3, #10
   dbbca:	e7b5      	b.n	dbb38 <_strtoul_r+0x58>
   dbbcc:	2c30      	cmp	r4, #48	; 0x30
   dbbce:	d0ab      	beq.n	dbb28 <_strtoul_r+0x48>
   dbbd0:	e7b2      	b.n	dbb38 <_strtoul_r+0x58>
   dbbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbbd6:	bf00      	nop
   dbbd8:	2003df8c 	.word	0x2003df8c

000dbbdc <strtoul>:
   dbbdc:	4613      	mov	r3, r2
   dbbde:	460a      	mov	r2, r1
   dbbe0:	4601      	mov	r1, r0
   dbbe2:	4802      	ldr	r0, [pc, #8]	; (dbbec <strtoul+0x10>)
   dbbe4:	6800      	ldr	r0, [r0, #0]
   dbbe6:	f7ff bf7b 	b.w	dbae0 <_strtoul_r>
   dbbea:	bf00      	nop
   dbbec:	2003dff0 	.word	0x2003dff0

000dbbf0 <__get_current_time_locale>:
   dbbf0:	4b04      	ldr	r3, [pc, #16]	; (dbc04 <__get_current_time_locale+0x14>)
   dbbf2:	4a05      	ldr	r2, [pc, #20]	; (dbc08 <__get_current_time_locale+0x18>)
   dbbf4:	6818      	ldr	r0, [r3, #0]
   dbbf6:	4b05      	ldr	r3, [pc, #20]	; (dbc0c <__get_current_time_locale+0x1c>)
   dbbf8:	2800      	cmp	r0, #0
   dbbfa:	bf14      	ite	ne
   dbbfc:	4610      	movne	r0, r2
   dbbfe:	4618      	moveq	r0, r3
   dbc00:	4770      	bx	lr
   dbc02:	bf00      	nop
   dbc04:	2003e6c8 	.word	0x2003e6c8
   dbc08:	2003e6cc 	.word	0x2003e6cc
   dbc0c:	000dddb0 	.word	0x000dddb0

000dbc10 <__tzcalc_limits>:
   dbc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbc14:	4604      	mov	r4, r0
   dbc16:	f000 fda5 	bl	dc764 <__gettzinfo>
   dbc1a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbc1e:	429c      	cmp	r4, r3
   dbc20:	f340 8096 	ble.w	dbd50 <__tzcalc_limits+0x140>
   dbc24:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbc28:	18e3      	adds	r3, r4, r3
   dbc2a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbc2e:	109b      	asrs	r3, r3, #2
   dbc30:	f240 156d 	movw	r5, #365	; 0x16d
   dbc34:	fb05 3502 	mla	r5, r5, r2, r3
   dbc38:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbc3c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbc40:	fb92 f3f3 	sdiv	r3, r2, r3
   dbc44:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbc48:	442b      	add	r3, r5
   dbc4a:	18a5      	adds	r5, r4, r2
   dbc4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbc50:	fb95 f5f2 	sdiv	r5, r5, r2
   dbc54:	441d      	add	r5, r3
   dbc56:	2364      	movs	r3, #100	; 0x64
   dbc58:	fb94 f7f2 	sdiv	r7, r4, r2
   dbc5c:	fb94 f6f3 	sdiv	r6, r4, r3
   dbc60:	fb02 4717 	mls	r7, r2, r7, r4
   dbc64:	fb03 4616 	mls	r6, r3, r6, r4
   dbc68:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbc6c:	fab7 fe87 	clz	lr, r7
   dbc70:	9301      	str	r3, [sp, #4]
   dbc72:	f004 0303 	and.w	r3, r4, #3
   dbc76:	6044      	str	r4, [r0, #4]
   dbc78:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbc7c:	4601      	mov	r1, r0
   dbc7e:	9300      	str	r3, [sp, #0]
   dbc80:	f04f 0c07 	mov.w	ip, #7
   dbc84:	7a0b      	ldrb	r3, [r1, #8]
   dbc86:	2b4a      	cmp	r3, #74	; 0x4a
   dbc88:	d10e      	bne.n	dbca8 <__tzcalc_limits+0x98>
   dbc8a:	694b      	ldr	r3, [r1, #20]
   dbc8c:	9a00      	ldr	r2, [sp, #0]
   dbc8e:	18ec      	adds	r4, r5, r3
   dbc90:	b902      	cbnz	r2, dbc94 <__tzcalc_limits+0x84>
   dbc92:	b906      	cbnz	r6, dbc96 <__tzcalc_limits+0x86>
   dbc94:	b927      	cbnz	r7, dbca0 <__tzcalc_limits+0x90>
   dbc96:	2b3b      	cmp	r3, #59	; 0x3b
   dbc98:	bfd4      	ite	le
   dbc9a:	2300      	movle	r3, #0
   dbc9c:	2301      	movgt	r3, #1
   dbc9e:	e000      	b.n	dbca2 <__tzcalc_limits+0x92>
   dbca0:	2300      	movs	r3, #0
   dbca2:	4423      	add	r3, r4
   dbca4:	3b01      	subs	r3, #1
   dbca6:	e03f      	b.n	dbd28 <__tzcalc_limits+0x118>
   dbca8:	2b44      	cmp	r3, #68	; 0x44
   dbcaa:	d102      	bne.n	dbcb2 <__tzcalc_limits+0xa2>
   dbcac:	694b      	ldr	r3, [r1, #20]
   dbcae:	442b      	add	r3, r5
   dbcb0:	e03a      	b.n	dbd28 <__tzcalc_limits+0x118>
   dbcb2:	9b00      	ldr	r3, [sp, #0]
   dbcb4:	b92b      	cbnz	r3, dbcc2 <__tzcalc_limits+0xb2>
   dbcb6:	2e00      	cmp	r6, #0
   dbcb8:	bf0c      	ite	eq
   dbcba:	46f0      	moveq	r8, lr
   dbcbc:	f04f 0801 	movne.w	r8, #1
   dbcc0:	e000      	b.n	dbcc4 <__tzcalc_limits+0xb4>
   dbcc2:	46f0      	mov	r8, lr
   dbcc4:	4b24      	ldr	r3, [pc, #144]	; (dbd58 <__tzcalc_limits+0x148>)
   dbcc6:	68cc      	ldr	r4, [r1, #12]
   dbcc8:	2230      	movs	r2, #48	; 0x30
   dbcca:	fb02 3808 	mla	r8, r2, r8, r3
   dbcce:	f1a8 0a04 	sub.w	sl, r8, #4
   dbcd2:	46a9      	mov	r9, r5
   dbcd4:	2301      	movs	r3, #1
   dbcd6:	42a3      	cmp	r3, r4
   dbcd8:	da04      	bge.n	dbce4 <__tzcalc_limits+0xd4>
   dbcda:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbcde:	3301      	adds	r3, #1
   dbce0:	44d9      	add	r9, fp
   dbce2:	e7f8      	b.n	dbcd6 <__tzcalc_limits+0xc6>
   dbce4:	f109 0304 	add.w	r3, r9, #4
   dbce8:	fb93 fbfc 	sdiv	fp, r3, ip
   dbcec:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbcf0:	2c01      	cmp	r4, #1
   dbcf2:	ebca 0a03 	rsb	sl, sl, r3
   dbcf6:	694b      	ldr	r3, [r1, #20]
   dbcf8:	bfb8      	it	lt
   dbcfa:	2401      	movlt	r4, #1
   dbcfc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbd00:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbd04:	690b      	ldr	r3, [r1, #16]
   dbd06:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dbd0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dbd0e:	bf48      	it	mi
   dbd10:	f10a 0a07 	addmi.w	sl, sl, #7
   dbd14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbd18:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbd1c:	4453      	add	r3, sl
   dbd1e:	42a3      	cmp	r3, r4
   dbd20:	db01      	blt.n	dbd26 <__tzcalc_limits+0x116>
   dbd22:	3b07      	subs	r3, #7
   dbd24:	e7fb      	b.n	dbd1e <__tzcalc_limits+0x10e>
   dbd26:	444b      	add	r3, r9
   dbd28:	698c      	ldr	r4, [r1, #24]
   dbd2a:	4a0c      	ldr	r2, [pc, #48]	; (dbd5c <__tzcalc_limits+0x14c>)
   dbd2c:	fb02 4303 	mla	r3, r2, r3, r4
   dbd30:	6a0c      	ldr	r4, [r1, #32]
   dbd32:	4423      	add	r3, r4
   dbd34:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbd38:	9b01      	ldr	r3, [sp, #4]
   dbd3a:	4299      	cmp	r1, r3
   dbd3c:	d1a2      	bne.n	dbc84 <__tzcalc_limits+0x74>
   dbd3e:	69c3      	ldr	r3, [r0, #28]
   dbd40:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbd42:	4293      	cmp	r3, r2
   dbd44:	bfac      	ite	ge
   dbd46:	2300      	movge	r3, #0
   dbd48:	2301      	movlt	r3, #1
   dbd4a:	6003      	str	r3, [r0, #0]
   dbd4c:	2001      	movs	r0, #1
   dbd4e:	e000      	b.n	dbd52 <__tzcalc_limits+0x142>
   dbd50:	2000      	movs	r0, #0
   dbd52:	b003      	add	sp, #12
   dbd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbd58:	000ddb64 	.word	0x000ddb64
   dbd5c:	00015180 	.word	0x00015180

000dbd60 <__tz_lock>:
   dbd60:	4770      	bx	lr

000dbd62 <__tz_unlock>:
   dbd62:	4770      	bx	lr

000dbd64 <_tzset_unlocked>:
   dbd64:	4b01      	ldr	r3, [pc, #4]	; (dbd6c <_tzset_unlocked+0x8>)
   dbd66:	6818      	ldr	r0, [r3, #0]
   dbd68:	f000 b802 	b.w	dbd70 <_tzset_unlocked_r>
   dbd6c:	2003dff0 	.word	0x2003dff0

000dbd70 <_tzset_unlocked_r>:
   dbd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd74:	b08d      	sub	sp, #52	; 0x34
   dbd76:	4607      	mov	r7, r0
   dbd78:	f000 fcf4 	bl	dc764 <__gettzinfo>
   dbd7c:	49b0      	ldr	r1, [pc, #704]	; (dc040 <_tzset_unlocked_r+0x2d0>)
   dbd7e:	4eb1      	ldr	r6, [pc, #708]	; (dc044 <_tzset_unlocked_r+0x2d4>)
   dbd80:	4604      	mov	r4, r0
   dbd82:	4638      	mov	r0, r7
   dbd84:	f000 fce6 	bl	dc754 <_getenv_r>
   dbd88:	4605      	mov	r5, r0
   dbd8a:	b960      	cbnz	r0, dbda6 <_tzset_unlocked_r+0x36>
   dbd8c:	4bae      	ldr	r3, [pc, #696]	; (dc048 <_tzset_unlocked_r+0x2d8>)
   dbd8e:	4aaf      	ldr	r2, [pc, #700]	; (dc04c <_tzset_unlocked_r+0x2dc>)
   dbd90:	6018      	str	r0, [r3, #0]
   dbd92:	4baf      	ldr	r3, [pc, #700]	; (dc050 <_tzset_unlocked_r+0x2e0>)
   dbd94:	6018      	str	r0, [r3, #0]
   dbd96:	4baf      	ldr	r3, [pc, #700]	; (dc054 <_tzset_unlocked_r+0x2e4>)
   dbd98:	6830      	ldr	r0, [r6, #0]
   dbd9a:	601a      	str	r2, [r3, #0]
   dbd9c:	605a      	str	r2, [r3, #4]
   dbd9e:	f7fb f941 	bl	d7024 <free>
   dbda2:	6035      	str	r5, [r6, #0]
   dbda4:	e148      	b.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbda6:	6831      	ldr	r1, [r6, #0]
   dbda8:	b979      	cbnz	r1, dbdca <_tzset_unlocked_r+0x5a>
   dbdaa:	6830      	ldr	r0, [r6, #0]
   dbdac:	f7fb f93a 	bl	d7024 <free>
   dbdb0:	4628      	mov	r0, r5
   dbdb2:	f7fe ff99 	bl	dace8 <strlen>
   dbdb6:	1c41      	adds	r1, r0, #1
   dbdb8:	4638      	mov	r0, r7
   dbdba:	f7fb f96b 	bl	d7094 <_malloc_r>
   dbdbe:	6030      	str	r0, [r6, #0]
   dbdc0:	b148      	cbz	r0, dbdd6 <_tzset_unlocked_r+0x66>
   dbdc2:	4629      	mov	r1, r5
   dbdc4:	f7fe fa58 	bl	da278 <strcpy>
   dbdc8:	e005      	b.n	dbdd6 <_tzset_unlocked_r+0x66>
   dbdca:	f7fe fa4b 	bl	da264 <strcmp>
   dbdce:	2800      	cmp	r0, #0
   dbdd0:	f000 8132 	beq.w	dc038 <_tzset_unlocked_r+0x2c8>
   dbdd4:	e7e9      	b.n	dbdaa <_tzset_unlocked_r+0x3a>
   dbdd6:	782b      	ldrb	r3, [r5, #0]
   dbdd8:	4a9f      	ldr	r2, [pc, #636]	; (dc058 <_tzset_unlocked_r+0x2e8>)
   dbdda:	49a0      	ldr	r1, [pc, #640]	; (dc05c <_tzset_unlocked_r+0x2ec>)
   dbddc:	2b3a      	cmp	r3, #58	; 0x3a
   dbdde:	bf08      	it	eq
   dbde0:	3501      	addeq	r5, #1
   dbde2:	ae0a      	add	r6, sp, #40	; 0x28
   dbde4:	4633      	mov	r3, r6
   dbde6:	4628      	mov	r0, r5
   dbde8:	f7fb f934 	bl	d7054 <siscanf>
   dbdec:	2800      	cmp	r0, #0
   dbdee:	f340 8123 	ble.w	dc038 <_tzset_unlocked_r+0x2c8>
   dbdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbdf4:	18ef      	adds	r7, r5, r3
   dbdf6:	5ceb      	ldrb	r3, [r5, r3]
   dbdf8:	2b2d      	cmp	r3, #45	; 0x2d
   dbdfa:	d103      	bne.n	dbe04 <_tzset_unlocked_r+0x94>
   dbdfc:	3701      	adds	r7, #1
   dbdfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dbe02:	e003      	b.n	dbe0c <_tzset_unlocked_r+0x9c>
   dbe04:	2b2b      	cmp	r3, #43	; 0x2b
   dbe06:	bf08      	it	eq
   dbe08:	3701      	addeq	r7, #1
   dbe0a:	2501      	movs	r5, #1
   dbe0c:	f10d 0a20 	add.w	sl, sp, #32
   dbe10:	f10d 0b1e 	add.w	fp, sp, #30
   dbe14:	f04f 0800 	mov.w	r8, #0
   dbe18:	9603      	str	r6, [sp, #12]
   dbe1a:	f8cd a008 	str.w	sl, [sp, #8]
   dbe1e:	9601      	str	r6, [sp, #4]
   dbe20:	f8cd b000 	str.w	fp, [sp]
   dbe24:	4633      	mov	r3, r6
   dbe26:	aa07      	add	r2, sp, #28
   dbe28:	498d      	ldr	r1, [pc, #564]	; (dc060 <_tzset_unlocked_r+0x2f0>)
   dbe2a:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbe2e:	4638      	mov	r0, r7
   dbe30:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbe34:	f7fb f90e 	bl	d7054 <siscanf>
   dbe38:	4540      	cmp	r0, r8
   dbe3a:	f340 80fd 	ble.w	dc038 <_tzset_unlocked_r+0x2c8>
   dbe3e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbe42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbe46:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc06c <_tzset_unlocked_r+0x2fc>
   dbe4a:	213c      	movs	r1, #60	; 0x3c
   dbe4c:	fb01 3302 	mla	r3, r1, r2, r3
   dbe50:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbe54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbe58:	fb01 3302 	mla	r3, r1, r2, r3
   dbe5c:	435d      	muls	r5, r3
   dbe5e:	6225      	str	r5, [r4, #32]
   dbe60:	4d7c      	ldr	r5, [pc, #496]	; (dc054 <_tzset_unlocked_r+0x2e4>)
   dbe62:	4b7d      	ldr	r3, [pc, #500]	; (dc058 <_tzset_unlocked_r+0x2e8>)
   dbe64:	602b      	str	r3, [r5, #0]
   dbe66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe68:	497c      	ldr	r1, [pc, #496]	; (dc05c <_tzset_unlocked_r+0x2ec>)
   dbe6a:	441f      	add	r7, r3
   dbe6c:	464a      	mov	r2, r9
   dbe6e:	4633      	mov	r3, r6
   dbe70:	4638      	mov	r0, r7
   dbe72:	f7fb f8ef 	bl	d7054 <siscanf>
   dbe76:	4540      	cmp	r0, r8
   dbe78:	dc08      	bgt.n	dbe8c <_tzset_unlocked_r+0x11c>
   dbe7a:	682b      	ldr	r3, [r5, #0]
   dbe7c:	606b      	str	r3, [r5, #4]
   dbe7e:	4b72      	ldr	r3, [pc, #456]	; (dc048 <_tzset_unlocked_r+0x2d8>)
   dbe80:	6a22      	ldr	r2, [r4, #32]
   dbe82:	601a      	str	r2, [r3, #0]
   dbe84:	4b72      	ldr	r3, [pc, #456]	; (dc050 <_tzset_unlocked_r+0x2e0>)
   dbe86:	f8c3 8000 	str.w	r8, [r3]
   dbe8a:	e0d5      	b.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbe8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe8e:	f8c5 9004 	str.w	r9, [r5, #4]
   dbe92:	18fd      	adds	r5, r7, r3
   dbe94:	5cfb      	ldrb	r3, [r7, r3]
   dbe96:	2b2d      	cmp	r3, #45	; 0x2d
   dbe98:	d103      	bne.n	dbea2 <_tzset_unlocked_r+0x132>
   dbe9a:	3501      	adds	r5, #1
   dbe9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dbea0:	e003      	b.n	dbeaa <_tzset_unlocked_r+0x13a>
   dbea2:	2b2b      	cmp	r3, #43	; 0x2b
   dbea4:	bf08      	it	eq
   dbea6:	3501      	addeq	r5, #1
   dbea8:	2701      	movs	r7, #1
   dbeaa:	2300      	movs	r3, #0
   dbeac:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbeb0:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbeb4:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbeb8:	930a      	str	r3, [sp, #40]	; 0x28
   dbeba:	9603      	str	r6, [sp, #12]
   dbebc:	f8cd a008 	str.w	sl, [sp, #8]
   dbec0:	9601      	str	r6, [sp, #4]
   dbec2:	f8cd b000 	str.w	fp, [sp]
   dbec6:	4633      	mov	r3, r6
   dbec8:	aa07      	add	r2, sp, #28
   dbeca:	4965      	ldr	r1, [pc, #404]	; (dc060 <_tzset_unlocked_r+0x2f0>)
   dbecc:	4628      	mov	r0, r5
   dbece:	f7fb f8c1 	bl	d7054 <siscanf>
   dbed2:	2800      	cmp	r0, #0
   dbed4:	dc04      	bgt.n	dbee0 <_tzset_unlocked_r+0x170>
   dbed6:	6a23      	ldr	r3, [r4, #32]
   dbed8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbedc:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbede:	e00e      	b.n	dbefe <_tzset_unlocked_r+0x18e>
   dbee0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbee4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbee8:	213c      	movs	r1, #60	; 0x3c
   dbeea:	fb01 3302 	mla	r3, r1, r2, r3
   dbeee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbef2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbef6:	fb01 3302 	mla	r3, r1, r2, r3
   dbefa:	435f      	muls	r7, r3
   dbefc:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf00:	4627      	mov	r7, r4
   dbf02:	441d      	add	r5, r3
   dbf04:	f04f 0900 	mov.w	r9, #0
   dbf08:	782b      	ldrb	r3, [r5, #0]
   dbf0a:	2b2c      	cmp	r3, #44	; 0x2c
   dbf0c:	bf08      	it	eq
   dbf0e:	3501      	addeq	r5, #1
   dbf10:	f895 8000 	ldrb.w	r8, [r5]
   dbf14:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbf18:	d126      	bne.n	dbf68 <_tzset_unlocked_r+0x1f8>
   dbf1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbf1e:	9302      	str	r3, [sp, #8]
   dbf20:	ab09      	add	r3, sp, #36	; 0x24
   dbf22:	9300      	str	r3, [sp, #0]
   dbf24:	9603      	str	r6, [sp, #12]
   dbf26:	9601      	str	r6, [sp, #4]
   dbf28:	4633      	mov	r3, r6
   dbf2a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbf2e:	494d      	ldr	r1, [pc, #308]	; (dc064 <_tzset_unlocked_r+0x2f4>)
   dbf30:	4628      	mov	r0, r5
   dbf32:	f7fb f88f 	bl	d7054 <siscanf>
   dbf36:	2803      	cmp	r0, #3
   dbf38:	d17e      	bne.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbf3a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbf3e:	1e4b      	subs	r3, r1, #1
   dbf40:	2b0b      	cmp	r3, #11
   dbf42:	d879      	bhi.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbf44:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbf48:	1e53      	subs	r3, r2, #1
   dbf4a:	2b04      	cmp	r3, #4
   dbf4c:	d874      	bhi.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbf4e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbf52:	2b06      	cmp	r3, #6
   dbf54:	d870      	bhi.n	dc038 <_tzset_unlocked_r+0x2c8>
   dbf56:	f887 8008 	strb.w	r8, [r7, #8]
   dbf5a:	60f9      	str	r1, [r7, #12]
   dbf5c:	613a      	str	r2, [r7, #16]
   dbf5e:	617b      	str	r3, [r7, #20]
   dbf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf62:	eb05 0803 	add.w	r8, r5, r3
   dbf66:	e02a      	b.n	dbfbe <_tzset_unlocked_r+0x24e>
   dbf68:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dbf6c:	bf06      	itte	eq
   dbf6e:	3501      	addeq	r5, #1
   dbf70:	4643      	moveq	r3, r8
   dbf72:	2344      	movne	r3, #68	; 0x44
   dbf74:	220a      	movs	r2, #10
   dbf76:	a90b      	add	r1, sp, #44	; 0x2c
   dbf78:	4628      	mov	r0, r5
   dbf7a:	9305      	str	r3, [sp, #20]
   dbf7c:	f7ff fe2e 	bl	dbbdc <strtoul>
   dbf80:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dbf84:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dbf88:	4545      	cmp	r5, r8
   dbf8a:	9b05      	ldr	r3, [sp, #20]
   dbf8c:	d114      	bne.n	dbfb8 <_tzset_unlocked_r+0x248>
   dbf8e:	234d      	movs	r3, #77	; 0x4d
   dbf90:	f1b9 0f00 	cmp.w	r9, #0
   dbf94:	d107      	bne.n	dbfa6 <_tzset_unlocked_r+0x236>
   dbf96:	7223      	strb	r3, [r4, #8]
   dbf98:	2303      	movs	r3, #3
   dbf9a:	60e3      	str	r3, [r4, #12]
   dbf9c:	2302      	movs	r3, #2
   dbf9e:	6123      	str	r3, [r4, #16]
   dbfa0:	f8c4 9014 	str.w	r9, [r4, #20]
   dbfa4:	e00b      	b.n	dbfbe <_tzset_unlocked_r+0x24e>
   dbfa6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dbfaa:	230b      	movs	r3, #11
   dbfac:	62a3      	str	r3, [r4, #40]	; 0x28
   dbfae:	2301      	movs	r3, #1
   dbfb0:	62e3      	str	r3, [r4, #44]	; 0x2c
   dbfb2:	2300      	movs	r3, #0
   dbfb4:	6323      	str	r3, [r4, #48]	; 0x30
   dbfb6:	e002      	b.n	dbfbe <_tzset_unlocked_r+0x24e>
   dbfb8:	b280      	uxth	r0, r0
   dbfba:	723b      	strb	r3, [r7, #8]
   dbfbc:	6178      	str	r0, [r7, #20]
   dbfbe:	2302      	movs	r3, #2
   dbfc0:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbfc4:	2300      	movs	r3, #0
   dbfc6:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbfca:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbfce:	930a      	str	r3, [sp, #40]	; 0x28
   dbfd0:	f898 3000 	ldrb.w	r3, [r8]
   dbfd4:	2b2f      	cmp	r3, #47	; 0x2f
   dbfd6:	d10b      	bne.n	dbff0 <_tzset_unlocked_r+0x280>
   dbfd8:	9603      	str	r6, [sp, #12]
   dbfda:	f8cd a008 	str.w	sl, [sp, #8]
   dbfde:	9601      	str	r6, [sp, #4]
   dbfe0:	f8cd b000 	str.w	fp, [sp]
   dbfe4:	4633      	mov	r3, r6
   dbfe6:	aa07      	add	r2, sp, #28
   dbfe8:	491f      	ldr	r1, [pc, #124]	; (dc068 <_tzset_unlocked_r+0x2f8>)
   dbfea:	4640      	mov	r0, r8
   dbfec:	f7fb f832 	bl	d7054 <siscanf>
   dbff0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbff4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbff8:	213c      	movs	r1, #60	; 0x3c
   dbffa:	fb01 3302 	mla	r3, r1, r2, r3
   dbffe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc002:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc006:	fb01 3302 	mla	r3, r1, r2, r3
   dc00a:	61bb      	str	r3, [r7, #24]
   dc00c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc00e:	f109 0901 	add.w	r9, r9, #1
   dc012:	f1b9 0f02 	cmp.w	r9, #2
   dc016:	4445      	add	r5, r8
   dc018:	f107 071c 	add.w	r7, r7, #28
   dc01c:	f47f af74 	bne.w	dbf08 <_tzset_unlocked_r+0x198>
   dc020:	6860      	ldr	r0, [r4, #4]
   dc022:	f7ff fdf5 	bl	dbc10 <__tzcalc_limits>
   dc026:	4b08      	ldr	r3, [pc, #32]	; (dc048 <_tzset_unlocked_r+0x2d8>)
   dc028:	6a22      	ldr	r2, [r4, #32]
   dc02a:	601a      	str	r2, [r3, #0]
   dc02c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc02e:	1a9b      	subs	r3, r3, r2
   dc030:	4a07      	ldr	r2, [pc, #28]	; (dc050 <_tzset_unlocked_r+0x2e0>)
   dc032:	bf18      	it	ne
   dc034:	2301      	movne	r3, #1
   dc036:	6013      	str	r3, [r2, #0]
   dc038:	b00d      	add	sp, #52	; 0x34
   dc03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc03e:	bf00      	nop
   dc040:	000ddeac 	.word	0x000ddeac
   dc044:	2003e7e0 	.word	0x2003e7e0
   dc048:	2003e7e8 	.word	0x2003e7e8
   dc04c:	000ddeaf 	.word	0x000ddeaf
   dc050:	2003e7e4 	.word	0x2003e7e4
   dc054:	2003e02c 	.word	0x2003e02c
   dc058:	2003e7d3 	.word	0x2003e7d3
   dc05c:	000ddeb3 	.word	0x000ddeb3
   dc060:	000dded6 	.word	0x000dded6
   dc064:	000ddec2 	.word	0x000ddec2
   dc068:	000dded5 	.word	0x000dded5
   dc06c:	2003e7c8 	.word	0x2003e7c8

000dc070 <abs>:
   dc070:	2800      	cmp	r0, #0
   dc072:	bfb8      	it	lt
   dc074:	4240      	neglt	r0, r0
   dc076:	4770      	bx	lr

000dc078 <div>:
   dc078:	2900      	cmp	r1, #0
   dc07a:	b510      	push	{r4, lr}
   dc07c:	fb91 f4f2 	sdiv	r4, r1, r2
   dc080:	fb02 1314 	mls	r3, r2, r4, r1
   dc084:	db04      	blt.n	dc090 <div+0x18>
   dc086:	2b00      	cmp	r3, #0
   dc088:	da07      	bge.n	dc09a <div+0x22>
   dc08a:	3401      	adds	r4, #1
   dc08c:	1a9b      	subs	r3, r3, r2
   dc08e:	e004      	b.n	dc09a <div+0x22>
   dc090:	2b00      	cmp	r3, #0
   dc092:	bfc4      	itt	gt
   dc094:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc098:	189b      	addgt	r3, r3, r2
   dc09a:	6004      	str	r4, [r0, #0]
   dc09c:	6043      	str	r3, [r0, #4]
   dc09e:	bd10      	pop	{r4, pc}

000dc0a0 <rshift>:
   dc0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc0a2:	6906      	ldr	r6, [r0, #16]
   dc0a4:	114b      	asrs	r3, r1, #5
   dc0a6:	42b3      	cmp	r3, r6
   dc0a8:	f100 0514 	add.w	r5, r0, #20
   dc0ac:	da27      	bge.n	dc0fe <rshift+0x5e>
   dc0ae:	f011 011f 	ands.w	r1, r1, #31
   dc0b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dc0b6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc0ba:	d101      	bne.n	dc0c0 <rshift+0x20>
   dc0bc:	4629      	mov	r1, r5
   dc0be:	e016      	b.n	dc0ee <rshift+0x4e>
   dc0c0:	1d14      	adds	r4, r2, #4
   dc0c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc0c6:	f1c1 0e20 	rsb	lr, r1, #32
   dc0ca:	40ca      	lsrs	r2, r1
   dc0cc:	462b      	mov	r3, r5
   dc0ce:	42b4      	cmp	r4, r6
   dc0d0:	d209      	bcs.n	dc0e6 <rshift+0x46>
   dc0d2:	6827      	ldr	r7, [r4, #0]
   dc0d4:	fa07 f70e 	lsl.w	r7, r7, lr
   dc0d8:	433a      	orrs	r2, r7
   dc0da:	f843 2b04 	str.w	r2, [r3], #4
   dc0de:	f854 2b04 	ldr.w	r2, [r4], #4
   dc0e2:	40ca      	lsrs	r2, r1
   dc0e4:	e7f3      	b.n	dc0ce <rshift+0x2e>
   dc0e6:	601a      	str	r2, [r3, #0]
   dc0e8:	b152      	cbz	r2, dc100 <rshift+0x60>
   dc0ea:	3304      	adds	r3, #4
   dc0ec:	e008      	b.n	dc100 <rshift+0x60>
   dc0ee:	42b2      	cmp	r2, r6
   dc0f0:	460b      	mov	r3, r1
   dc0f2:	d205      	bcs.n	dc100 <rshift+0x60>
   dc0f4:	f852 3b04 	ldr.w	r3, [r2], #4
   dc0f8:	f841 3b04 	str.w	r3, [r1], #4
   dc0fc:	e7f7      	b.n	dc0ee <rshift+0x4e>
   dc0fe:	462b      	mov	r3, r5
   dc100:	1b5b      	subs	r3, r3, r5
   dc102:	109b      	asrs	r3, r3, #2
   dc104:	6103      	str	r3, [r0, #16]
   dc106:	b903      	cbnz	r3, dc10a <rshift+0x6a>
   dc108:	6143      	str	r3, [r0, #20]
   dc10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc10c <__hexdig_fun>:
   dc10c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc110:	2b09      	cmp	r3, #9
   dc112:	d801      	bhi.n	dc118 <__hexdig_fun+0xc>
   dc114:	3820      	subs	r0, #32
   dc116:	e00a      	b.n	dc12e <__hexdig_fun+0x22>
   dc118:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc11c:	2b05      	cmp	r3, #5
   dc11e:	d801      	bhi.n	dc124 <__hexdig_fun+0x18>
   dc120:	3847      	subs	r0, #71	; 0x47
   dc122:	e004      	b.n	dc12e <__hexdig_fun+0x22>
   dc124:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc128:	2b05      	cmp	r3, #5
   dc12a:	d802      	bhi.n	dc132 <__hexdig_fun+0x26>
   dc12c:	3827      	subs	r0, #39	; 0x27
   dc12e:	b2c0      	uxtb	r0, r0
   dc130:	4770      	bx	lr
   dc132:	2000      	movs	r0, #0
   dc134:	4770      	bx	lr

000dc136 <__gethex>:
   dc136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc13a:	b08b      	sub	sp, #44	; 0x2c
   dc13c:	468a      	mov	sl, r1
   dc13e:	4690      	mov	r8, r2
   dc140:	9306      	str	r3, [sp, #24]
   dc142:	9002      	str	r0, [sp, #8]
   dc144:	f7fd fe00 	bl	d9d48 <_localeconv_r>
   dc148:	6803      	ldr	r3, [r0, #0]
   dc14a:	9303      	str	r3, [sp, #12]
   dc14c:	4618      	mov	r0, r3
   dc14e:	f7fe fdcb 	bl	dace8 <strlen>
   dc152:	9b03      	ldr	r3, [sp, #12]
   dc154:	9001      	str	r0, [sp, #4]
   dc156:	4403      	add	r3, r0
   dc158:	f04f 0b00 	mov.w	fp, #0
   dc15c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc160:	9307      	str	r3, [sp, #28]
   dc162:	f8da 3000 	ldr.w	r3, [sl]
   dc166:	3302      	adds	r3, #2
   dc168:	461f      	mov	r7, r3
   dc16a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc16e:	2830      	cmp	r0, #48	; 0x30
   dc170:	d102      	bne.n	dc178 <__gethex+0x42>
   dc172:	f10b 0b01 	add.w	fp, fp, #1
   dc176:	e7f7      	b.n	dc168 <__gethex+0x32>
   dc178:	f7ff ffc8 	bl	dc10c <__hexdig_fun>
   dc17c:	4604      	mov	r4, r0
   dc17e:	b9e0      	cbnz	r0, dc1ba <__gethex+0x84>
   dc180:	9a01      	ldr	r2, [sp, #4]
   dc182:	9903      	ldr	r1, [sp, #12]
   dc184:	4638      	mov	r0, r7
   dc186:	f7fe fdb7 	bl	dacf8 <strncmp>
   dc18a:	2800      	cmp	r0, #0
   dc18c:	d134      	bne.n	dc1f8 <__gethex+0xc2>
   dc18e:	9b01      	ldr	r3, [sp, #4]
   dc190:	5cf8      	ldrb	r0, [r7, r3]
   dc192:	18fe      	adds	r6, r7, r3
   dc194:	f7ff ffba 	bl	dc10c <__hexdig_fun>
   dc198:	b380      	cbz	r0, dc1fc <__gethex+0xc6>
   dc19a:	4633      	mov	r3, r6
   dc19c:	7818      	ldrb	r0, [r3, #0]
   dc19e:	2830      	cmp	r0, #48	; 0x30
   dc1a0:	461f      	mov	r7, r3
   dc1a2:	f103 0301 	add.w	r3, r3, #1
   dc1a6:	d0f9      	beq.n	dc19c <__gethex+0x66>
   dc1a8:	f7ff ffb0 	bl	dc10c <__hexdig_fun>
   dc1ac:	fab0 f580 	clz	r5, r0
   dc1b0:	096d      	lsrs	r5, r5, #5
   dc1b2:	4634      	mov	r4, r6
   dc1b4:	f04f 0b01 	mov.w	fp, #1
   dc1b8:	e001      	b.n	dc1be <__gethex+0x88>
   dc1ba:	2500      	movs	r5, #0
   dc1bc:	462c      	mov	r4, r5
   dc1be:	463a      	mov	r2, r7
   dc1c0:	4616      	mov	r6, r2
   dc1c2:	3201      	adds	r2, #1
   dc1c4:	7830      	ldrb	r0, [r6, #0]
   dc1c6:	f7ff ffa1 	bl	dc10c <__hexdig_fun>
   dc1ca:	2800      	cmp	r0, #0
   dc1cc:	d1f8      	bne.n	dc1c0 <__gethex+0x8a>
   dc1ce:	9a01      	ldr	r2, [sp, #4]
   dc1d0:	9903      	ldr	r1, [sp, #12]
   dc1d2:	4630      	mov	r0, r6
   dc1d4:	f7fe fd90 	bl	dacf8 <strncmp>
   dc1d8:	b950      	cbnz	r0, dc1f0 <__gethex+0xba>
   dc1da:	b954      	cbnz	r4, dc1f2 <__gethex+0xbc>
   dc1dc:	9b01      	ldr	r3, [sp, #4]
   dc1de:	18f4      	adds	r4, r6, r3
   dc1e0:	4622      	mov	r2, r4
   dc1e2:	4616      	mov	r6, r2
   dc1e4:	3201      	adds	r2, #1
   dc1e6:	7830      	ldrb	r0, [r6, #0]
   dc1e8:	f7ff ff90 	bl	dc10c <__hexdig_fun>
   dc1ec:	2800      	cmp	r0, #0
   dc1ee:	d1f8      	bne.n	dc1e2 <__gethex+0xac>
   dc1f0:	b134      	cbz	r4, dc200 <__gethex+0xca>
   dc1f2:	1ba4      	subs	r4, r4, r6
   dc1f4:	00a4      	lsls	r4, r4, #2
   dc1f6:	e003      	b.n	dc200 <__gethex+0xca>
   dc1f8:	463e      	mov	r6, r7
   dc1fa:	e000      	b.n	dc1fe <__gethex+0xc8>
   dc1fc:	4604      	mov	r4, r0
   dc1fe:	2501      	movs	r5, #1
   dc200:	7833      	ldrb	r3, [r6, #0]
   dc202:	2b50      	cmp	r3, #80	; 0x50
   dc204:	d001      	beq.n	dc20a <__gethex+0xd4>
   dc206:	2b70      	cmp	r3, #112	; 0x70
   dc208:	d12a      	bne.n	dc260 <__gethex+0x12a>
   dc20a:	7873      	ldrb	r3, [r6, #1]
   dc20c:	2b2b      	cmp	r3, #43	; 0x2b
   dc20e:	d008      	beq.n	dc222 <__gethex+0xec>
   dc210:	2b2d      	cmp	r3, #45	; 0x2d
   dc212:	d003      	beq.n	dc21c <__gethex+0xe6>
   dc214:	1c71      	adds	r1, r6, #1
   dc216:	f04f 0900 	mov.w	r9, #0
   dc21a:	e005      	b.n	dc228 <__gethex+0xf2>
   dc21c:	f04f 0901 	mov.w	r9, #1
   dc220:	e001      	b.n	dc226 <__gethex+0xf0>
   dc222:	f04f 0900 	mov.w	r9, #0
   dc226:	1cb1      	adds	r1, r6, #2
   dc228:	7808      	ldrb	r0, [r1, #0]
   dc22a:	f7ff ff6f 	bl	dc10c <__hexdig_fun>
   dc22e:	1e43      	subs	r3, r0, #1
   dc230:	b2db      	uxtb	r3, r3
   dc232:	2b18      	cmp	r3, #24
   dc234:	d814      	bhi.n	dc260 <__gethex+0x12a>
   dc236:	f1a0 0210 	sub.w	r2, r0, #16
   dc23a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc23e:	f7ff ff65 	bl	dc10c <__hexdig_fun>
   dc242:	1e43      	subs	r3, r0, #1
   dc244:	b2db      	uxtb	r3, r3
   dc246:	2b18      	cmp	r3, #24
   dc248:	d804      	bhi.n	dc254 <__gethex+0x11e>
   dc24a:	230a      	movs	r3, #10
   dc24c:	fb03 0202 	mla	r2, r3, r2, r0
   dc250:	3a10      	subs	r2, #16
   dc252:	e7f2      	b.n	dc23a <__gethex+0x104>
   dc254:	f1b9 0f00 	cmp.w	r9, #0
   dc258:	d000      	beq.n	dc25c <__gethex+0x126>
   dc25a:	4252      	negs	r2, r2
   dc25c:	4414      	add	r4, r2
   dc25e:	e000      	b.n	dc262 <__gethex+0x12c>
   dc260:	4631      	mov	r1, r6
   dc262:	f8ca 1000 	str.w	r1, [sl]
   dc266:	b12d      	cbz	r5, dc274 <__gethex+0x13e>
   dc268:	f1bb 0f00 	cmp.w	fp, #0
   dc26c:	bf14      	ite	ne
   dc26e:	2000      	movne	r0, #0
   dc270:	2006      	moveq	r0, #6
   dc272:	e17c      	b.n	dc56e <__gethex+0x438>
   dc274:	1bf3      	subs	r3, r6, r7
   dc276:	3b01      	subs	r3, #1
   dc278:	4629      	mov	r1, r5
   dc27a:	2b07      	cmp	r3, #7
   dc27c:	dd02      	ble.n	dc284 <__gethex+0x14e>
   dc27e:	3101      	adds	r1, #1
   dc280:	105b      	asrs	r3, r3, #1
   dc282:	e7fa      	b.n	dc27a <__gethex+0x144>
   dc284:	9802      	ldr	r0, [sp, #8]
   dc286:	f000 fa75 	bl	dc774 <_Balloc>
   dc28a:	9b01      	ldr	r3, [sp, #4]
   dc28c:	f100 0a14 	add.w	sl, r0, #20
   dc290:	f04f 0900 	mov.w	r9, #0
   dc294:	f1c3 0301 	rsb	r3, r3, #1
   dc298:	4605      	mov	r5, r0
   dc29a:	f8cd a010 	str.w	sl, [sp, #16]
   dc29e:	46cb      	mov	fp, r9
   dc2a0:	9308      	str	r3, [sp, #32]
   dc2a2:	42b7      	cmp	r7, r6
   dc2a4:	d22f      	bcs.n	dc306 <__gethex+0x1d0>
   dc2a6:	1e73      	subs	r3, r6, #1
   dc2a8:	9305      	str	r3, [sp, #20]
   dc2aa:	9a07      	ldr	r2, [sp, #28]
   dc2ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc2b0:	4293      	cmp	r3, r2
   dc2b2:	d00b      	beq.n	dc2cc <__gethex+0x196>
   dc2b4:	f1bb 0f20 	cmp.w	fp, #32
   dc2b8:	d116      	bne.n	dc2e8 <__gethex+0x1b2>
   dc2ba:	9b04      	ldr	r3, [sp, #16]
   dc2bc:	f8c3 9000 	str.w	r9, [r3]
   dc2c0:	3304      	adds	r3, #4
   dc2c2:	f04f 0900 	mov.w	r9, #0
   dc2c6:	9304      	str	r3, [sp, #16]
   dc2c8:	46cb      	mov	fp, r9
   dc2ca:	e00d      	b.n	dc2e8 <__gethex+0x1b2>
   dc2cc:	9b05      	ldr	r3, [sp, #20]
   dc2ce:	9a08      	ldr	r2, [sp, #32]
   dc2d0:	4413      	add	r3, r2
   dc2d2:	429f      	cmp	r7, r3
   dc2d4:	d8ee      	bhi.n	dc2b4 <__gethex+0x17e>
   dc2d6:	4618      	mov	r0, r3
   dc2d8:	9a01      	ldr	r2, [sp, #4]
   dc2da:	9903      	ldr	r1, [sp, #12]
   dc2dc:	9309      	str	r3, [sp, #36]	; 0x24
   dc2de:	f7fe fd0b 	bl	dacf8 <strncmp>
   dc2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc2e4:	b168      	cbz	r0, dc302 <__gethex+0x1cc>
   dc2e6:	e7e5      	b.n	dc2b4 <__gethex+0x17e>
   dc2e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc2ec:	f7ff ff0e 	bl	dc10c <__hexdig_fun>
   dc2f0:	f000 000f 	and.w	r0, r0, #15
   dc2f4:	fa00 f00b 	lsl.w	r0, r0, fp
   dc2f8:	9b05      	ldr	r3, [sp, #20]
   dc2fa:	ea49 0900 	orr.w	r9, r9, r0
   dc2fe:	f10b 0b04 	add.w	fp, fp, #4
   dc302:	461e      	mov	r6, r3
   dc304:	e7cd      	b.n	dc2a2 <__gethex+0x16c>
   dc306:	9804      	ldr	r0, [sp, #16]
   dc308:	f840 9b04 	str.w	r9, [r0], #4
   dc30c:	ebca 0000 	rsb	r0, sl, r0
   dc310:	1080      	asrs	r0, r0, #2
   dc312:	6128      	str	r0, [r5, #16]
   dc314:	0147      	lsls	r7, r0, #5
   dc316:	4648      	mov	r0, r9
   dc318:	f000 faf1 	bl	dc8fe <__hi0bits>
   dc31c:	f8d8 6000 	ldr.w	r6, [r8]
   dc320:	1a38      	subs	r0, r7, r0
   dc322:	42b0      	cmp	r0, r6
   dc324:	dd26      	ble.n	dc374 <__gethex+0x23e>
   dc326:	1b87      	subs	r7, r0, r6
   dc328:	4639      	mov	r1, r7
   dc32a:	4628      	mov	r0, r5
   dc32c:	f000 fdef 	bl	dcf0e <__any_on>
   dc330:	b1c8      	cbz	r0, dc366 <__gethex+0x230>
   dc332:	1e7b      	subs	r3, r7, #1
   dc334:	1159      	asrs	r1, r3, #5
   dc336:	f003 021f 	and.w	r2, r3, #31
   dc33a:	f04f 0901 	mov.w	r9, #1
   dc33e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc342:	fa09 f202 	lsl.w	r2, r9, r2
   dc346:	420a      	tst	r2, r1
   dc348:	d00e      	beq.n	dc368 <__gethex+0x232>
   dc34a:	454b      	cmp	r3, r9
   dc34c:	dc02      	bgt.n	dc354 <__gethex+0x21e>
   dc34e:	f04f 0902 	mov.w	r9, #2
   dc352:	e009      	b.n	dc368 <__gethex+0x232>
   dc354:	1eb9      	subs	r1, r7, #2
   dc356:	4628      	mov	r0, r5
   dc358:	f000 fdd9 	bl	dcf0e <__any_on>
   dc35c:	2800      	cmp	r0, #0
   dc35e:	d0f6      	beq.n	dc34e <__gethex+0x218>
   dc360:	f04f 0903 	mov.w	r9, #3
   dc364:	e000      	b.n	dc368 <__gethex+0x232>
   dc366:	4681      	mov	r9, r0
   dc368:	4639      	mov	r1, r7
   dc36a:	4628      	mov	r0, r5
   dc36c:	f7ff fe98 	bl	dc0a0 <rshift>
   dc370:	443c      	add	r4, r7
   dc372:	e00c      	b.n	dc38e <__gethex+0x258>
   dc374:	da09      	bge.n	dc38a <__gethex+0x254>
   dc376:	1a37      	subs	r7, r6, r0
   dc378:	4629      	mov	r1, r5
   dc37a:	463a      	mov	r2, r7
   dc37c:	9802      	ldr	r0, [sp, #8]
   dc37e:	f000 fbf3 	bl	dcb68 <__lshift>
   dc382:	1be4      	subs	r4, r4, r7
   dc384:	4605      	mov	r5, r0
   dc386:	f100 0a14 	add.w	sl, r0, #20
   dc38a:	f04f 0900 	mov.w	r9, #0
   dc38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc392:	429c      	cmp	r4, r3
   dc394:	dd08      	ble.n	dc3a8 <__gethex+0x272>
   dc396:	9802      	ldr	r0, [sp, #8]
   dc398:	4629      	mov	r1, r5
   dc39a:	f000 fa20 	bl	dc7de <_Bfree>
   dc39e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc3a0:	2300      	movs	r3, #0
   dc3a2:	6013      	str	r3, [r2, #0]
   dc3a4:	20a3      	movs	r0, #163	; 0xa3
   dc3a6:	e0e2      	b.n	dc56e <__gethex+0x438>
   dc3a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc3ac:	4284      	cmp	r4, r0
   dc3ae:	da53      	bge.n	dc458 <__gethex+0x322>
   dc3b0:	1b04      	subs	r4, r0, r4
   dc3b2:	42a6      	cmp	r6, r4
   dc3b4:	dc2e      	bgt.n	dc414 <__gethex+0x2de>
   dc3b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc3ba:	2b02      	cmp	r3, #2
   dc3bc:	d01a      	beq.n	dc3f4 <__gethex+0x2be>
   dc3be:	2b03      	cmp	r3, #3
   dc3c0:	d01c      	beq.n	dc3fc <__gethex+0x2c6>
   dc3c2:	2b01      	cmp	r3, #1
   dc3c4:	d11d      	bne.n	dc402 <__gethex+0x2cc>
   dc3c6:	42a6      	cmp	r6, r4
   dc3c8:	d11b      	bne.n	dc402 <__gethex+0x2cc>
   dc3ca:	2e01      	cmp	r6, #1
   dc3cc:	dc0b      	bgt.n	dc3e6 <__gethex+0x2b0>
   dc3ce:	9a06      	ldr	r2, [sp, #24]
   dc3d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc3d4:	6013      	str	r3, [r2, #0]
   dc3d6:	2301      	movs	r3, #1
   dc3d8:	612b      	str	r3, [r5, #16]
   dc3da:	f8ca 3000 	str.w	r3, [sl]
   dc3de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc3e0:	2062      	movs	r0, #98	; 0x62
   dc3e2:	601d      	str	r5, [r3, #0]
   dc3e4:	e0c3      	b.n	dc56e <__gethex+0x438>
   dc3e6:	1e71      	subs	r1, r6, #1
   dc3e8:	4628      	mov	r0, r5
   dc3ea:	f000 fd90 	bl	dcf0e <__any_on>
   dc3ee:	2800      	cmp	r0, #0
   dc3f0:	d1ed      	bne.n	dc3ce <__gethex+0x298>
   dc3f2:	e006      	b.n	dc402 <__gethex+0x2cc>
   dc3f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3f6:	2b00      	cmp	r3, #0
   dc3f8:	d0e9      	beq.n	dc3ce <__gethex+0x298>
   dc3fa:	e002      	b.n	dc402 <__gethex+0x2cc>
   dc3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3fe:	2b00      	cmp	r3, #0
   dc400:	d1e5      	bne.n	dc3ce <__gethex+0x298>
   dc402:	9802      	ldr	r0, [sp, #8]
   dc404:	4629      	mov	r1, r5
   dc406:	f000 f9ea 	bl	dc7de <_Bfree>
   dc40a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc40c:	2300      	movs	r3, #0
   dc40e:	6013      	str	r3, [r2, #0]
   dc410:	2050      	movs	r0, #80	; 0x50
   dc412:	e0ac      	b.n	dc56e <__gethex+0x438>
   dc414:	1e67      	subs	r7, r4, #1
   dc416:	f1b9 0f00 	cmp.w	r9, #0
   dc41a:	d106      	bne.n	dc42a <__gethex+0x2f4>
   dc41c:	b13f      	cbz	r7, dc42e <__gethex+0x2f8>
   dc41e:	4639      	mov	r1, r7
   dc420:	4628      	mov	r0, r5
   dc422:	f000 fd74 	bl	dcf0e <__any_on>
   dc426:	4681      	mov	r9, r0
   dc428:	e001      	b.n	dc42e <__gethex+0x2f8>
   dc42a:	f04f 0901 	mov.w	r9, #1
   dc42e:	117a      	asrs	r2, r7, #5
   dc430:	2301      	movs	r3, #1
   dc432:	f007 071f 	and.w	r7, r7, #31
   dc436:	fa03 f707 	lsl.w	r7, r3, r7
   dc43a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc43e:	4621      	mov	r1, r4
   dc440:	421f      	tst	r7, r3
   dc442:	4628      	mov	r0, r5
   dc444:	bf18      	it	ne
   dc446:	f049 0902 	orrne.w	r9, r9, #2
   dc44a:	1b36      	subs	r6, r6, r4
   dc44c:	f7ff fe28 	bl	dc0a0 <rshift>
   dc450:	2702      	movs	r7, #2
   dc452:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc456:	e000      	b.n	dc45a <__gethex+0x324>
   dc458:	2701      	movs	r7, #1
   dc45a:	f1b9 0f00 	cmp.w	r9, #0
   dc45e:	f000 8081 	beq.w	dc564 <__gethex+0x42e>
   dc462:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc466:	2b02      	cmp	r3, #2
   dc468:	d00e      	beq.n	dc488 <__gethex+0x352>
   dc46a:	2b03      	cmp	r3, #3
   dc46c:	d010      	beq.n	dc490 <__gethex+0x35a>
   dc46e:	2b01      	cmp	r3, #1
   dc470:	d176      	bne.n	dc560 <__gethex+0x42a>
   dc472:	f019 0f02 	tst.w	r9, #2
   dc476:	d073      	beq.n	dc560 <__gethex+0x42a>
   dc478:	f8da 0000 	ldr.w	r0, [sl]
   dc47c:	ea49 0900 	orr.w	r9, r9, r0
   dc480:	f019 0f01 	tst.w	r9, #1
   dc484:	d107      	bne.n	dc496 <__gethex+0x360>
   dc486:	e06b      	b.n	dc560 <__gethex+0x42a>
   dc488:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc48a:	f1c3 0301 	rsb	r3, r3, #1
   dc48e:	9315      	str	r3, [sp, #84]	; 0x54
   dc490:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc492:	2b00      	cmp	r3, #0
   dc494:	d064      	beq.n	dc560 <__gethex+0x42a>
   dc496:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc49a:	f105 0314 	add.w	r3, r5, #20
   dc49e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc4a2:	eb03 0109 	add.w	r1, r3, r9
   dc4a6:	2000      	movs	r0, #0
   dc4a8:	681a      	ldr	r2, [r3, #0]
   dc4aa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc4ae:	d002      	beq.n	dc4b6 <__gethex+0x380>
   dc4b0:	3201      	adds	r2, #1
   dc4b2:	601a      	str	r2, [r3, #0]
   dc4b4:	e020      	b.n	dc4f8 <__gethex+0x3c2>
   dc4b6:	f843 0b04 	str.w	r0, [r3], #4
   dc4ba:	4299      	cmp	r1, r3
   dc4bc:	d8f4      	bhi.n	dc4a8 <__gethex+0x372>
   dc4be:	68ab      	ldr	r3, [r5, #8]
   dc4c0:	459a      	cmp	sl, r3
   dc4c2:	db12      	blt.n	dc4ea <__gethex+0x3b4>
   dc4c4:	6869      	ldr	r1, [r5, #4]
   dc4c6:	9802      	ldr	r0, [sp, #8]
   dc4c8:	3101      	adds	r1, #1
   dc4ca:	f000 f953 	bl	dc774 <_Balloc>
   dc4ce:	692a      	ldr	r2, [r5, #16]
   dc4d0:	3202      	adds	r2, #2
   dc4d2:	f105 010c 	add.w	r1, r5, #12
   dc4d6:	4683      	mov	fp, r0
   dc4d8:	0092      	lsls	r2, r2, #2
   dc4da:	300c      	adds	r0, #12
   dc4dc:	f7fd fc38 	bl	d9d50 <memcpy>
   dc4e0:	4629      	mov	r1, r5
   dc4e2:	9802      	ldr	r0, [sp, #8]
   dc4e4:	f000 f97b 	bl	dc7de <_Bfree>
   dc4e8:	465d      	mov	r5, fp
   dc4ea:	692b      	ldr	r3, [r5, #16]
   dc4ec:	1c5a      	adds	r2, r3, #1
   dc4ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc4f2:	612a      	str	r2, [r5, #16]
   dc4f4:	2201      	movs	r2, #1
   dc4f6:	615a      	str	r2, [r3, #20]
   dc4f8:	2f02      	cmp	r7, #2
   dc4fa:	f105 0214 	add.w	r2, r5, #20
   dc4fe:	d111      	bne.n	dc524 <__gethex+0x3ee>
   dc500:	f8d8 3000 	ldr.w	r3, [r8]
   dc504:	3b01      	subs	r3, #1
   dc506:	429e      	cmp	r6, r3
   dc508:	d127      	bne.n	dc55a <__gethex+0x424>
   dc50a:	1171      	asrs	r1, r6, #5
   dc50c:	2301      	movs	r3, #1
   dc50e:	f006 061f 	and.w	r6, r6, #31
   dc512:	fa03 f606 	lsl.w	r6, r3, r6
   dc516:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc51a:	421e      	tst	r6, r3
   dc51c:	bf0c      	ite	eq
   dc51e:	2702      	moveq	r7, #2
   dc520:	2701      	movne	r7, #1
   dc522:	e01a      	b.n	dc55a <__gethex+0x424>
   dc524:	692b      	ldr	r3, [r5, #16]
   dc526:	459a      	cmp	sl, r3
   dc528:	da0a      	bge.n	dc540 <__gethex+0x40a>
   dc52a:	2101      	movs	r1, #1
   dc52c:	4628      	mov	r0, r5
   dc52e:	f7ff fdb7 	bl	dc0a0 <rshift>
   dc532:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc536:	3401      	adds	r4, #1
   dc538:	429c      	cmp	r4, r3
   dc53a:	f73f af2c 	bgt.w	dc396 <__gethex+0x260>
   dc53e:	e00b      	b.n	dc558 <__gethex+0x422>
   dc540:	f016 061f 	ands.w	r6, r6, #31
   dc544:	d008      	beq.n	dc558 <__gethex+0x422>
   dc546:	4491      	add	r9, r2
   dc548:	f1c6 0620 	rsb	r6, r6, #32
   dc54c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc550:	f000 f9d5 	bl	dc8fe <__hi0bits>
   dc554:	42b0      	cmp	r0, r6
   dc556:	dbe8      	blt.n	dc52a <__gethex+0x3f4>
   dc558:	2701      	movs	r7, #1
   dc55a:	f047 0720 	orr.w	r7, r7, #32
   dc55e:	e001      	b.n	dc564 <__gethex+0x42e>
   dc560:	f047 0710 	orr.w	r7, r7, #16
   dc564:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc566:	601d      	str	r5, [r3, #0]
   dc568:	9b06      	ldr	r3, [sp, #24]
   dc56a:	4638      	mov	r0, r7
   dc56c:	601c      	str	r4, [r3, #0]
   dc56e:	b00b      	add	sp, #44	; 0x2c
   dc570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc574 <L_shift>:
   dc574:	f1c2 0208 	rsb	r2, r2, #8
   dc578:	0092      	lsls	r2, r2, #2
   dc57a:	b570      	push	{r4, r5, r6, lr}
   dc57c:	f1c2 0620 	rsb	r6, r2, #32
   dc580:	6843      	ldr	r3, [r0, #4]
   dc582:	6805      	ldr	r5, [r0, #0]
   dc584:	fa03 f406 	lsl.w	r4, r3, r6
   dc588:	432c      	orrs	r4, r5
   dc58a:	40d3      	lsrs	r3, r2
   dc58c:	6004      	str	r4, [r0, #0]
   dc58e:	f840 3f04 	str.w	r3, [r0, #4]!
   dc592:	4288      	cmp	r0, r1
   dc594:	d3f4      	bcc.n	dc580 <L_shift+0xc>
   dc596:	bd70      	pop	{r4, r5, r6, pc}

000dc598 <__match>:
   dc598:	b530      	push	{r4, r5, lr}
   dc59a:	6803      	ldr	r3, [r0, #0]
   dc59c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc5a0:	3301      	adds	r3, #1
   dc5a2:	b14c      	cbz	r4, dc5b8 <__match+0x20>
   dc5a4:	781a      	ldrb	r2, [r3, #0]
   dc5a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc5aa:	2d19      	cmp	r5, #25
   dc5ac:	bf98      	it	ls
   dc5ae:	3220      	addls	r2, #32
   dc5b0:	42a2      	cmp	r2, r4
   dc5b2:	d0f3      	beq.n	dc59c <__match+0x4>
   dc5b4:	2000      	movs	r0, #0
   dc5b6:	bd30      	pop	{r4, r5, pc}
   dc5b8:	6003      	str	r3, [r0, #0]
   dc5ba:	2001      	movs	r0, #1
   dc5bc:	bd30      	pop	{r4, r5, pc}

000dc5be <__hexnan>:
   dc5be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc5c2:	680b      	ldr	r3, [r1, #0]
   dc5c4:	f8d0 b000 	ldr.w	fp, [r0]
   dc5c8:	115e      	asrs	r6, r3, #5
   dc5ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc5ce:	f013 031f 	ands.w	r3, r3, #31
   dc5d2:	b085      	sub	sp, #20
   dc5d4:	bf18      	it	ne
   dc5d6:	3604      	addne	r6, #4
   dc5d8:	1f35      	subs	r5, r6, #4
   dc5da:	4617      	mov	r7, r2
   dc5dc:	2200      	movs	r2, #0
   dc5de:	4682      	mov	sl, r0
   dc5e0:	9301      	str	r3, [sp, #4]
   dc5e2:	f846 2c04 	str.w	r2, [r6, #-4]
   dc5e6:	46a8      	mov	r8, r5
   dc5e8:	462c      	mov	r4, r5
   dc5ea:	9200      	str	r2, [sp, #0]
   dc5ec:	4691      	mov	r9, r2
   dc5ee:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc5f2:	2900      	cmp	r1, #0
   dc5f4:	d03c      	beq.n	dc670 <__hexnan+0xb2>
   dc5f6:	4608      	mov	r0, r1
   dc5f8:	9203      	str	r2, [sp, #12]
   dc5fa:	9102      	str	r1, [sp, #8]
   dc5fc:	f7ff fd86 	bl	dc10c <__hexdig_fun>
   dc600:	9a03      	ldr	r2, [sp, #12]
   dc602:	bb00      	cbnz	r0, dc646 <__hexnan+0x88>
   dc604:	9902      	ldr	r1, [sp, #8]
   dc606:	2920      	cmp	r1, #32
   dc608:	d816      	bhi.n	dc638 <__hexnan+0x7a>
   dc60a:	9b00      	ldr	r3, [sp, #0]
   dc60c:	4599      	cmp	r9, r3
   dc60e:	ddee      	ble.n	dc5ee <__hexnan+0x30>
   dc610:	4544      	cmp	r4, r8
   dc612:	d205      	bcs.n	dc620 <__hexnan+0x62>
   dc614:	2a07      	cmp	r2, #7
   dc616:	dc03      	bgt.n	dc620 <__hexnan+0x62>
   dc618:	4641      	mov	r1, r8
   dc61a:	4620      	mov	r0, r4
   dc61c:	f7ff ffaa 	bl	dc574 <L_shift>
   dc620:	42bc      	cmp	r4, r7
   dc622:	d923      	bls.n	dc66c <__hexnan+0xae>
   dc624:	2300      	movs	r3, #0
   dc626:	f1a4 0804 	sub.w	r8, r4, #4
   dc62a:	f844 3c04 	str.w	r3, [r4, #-4]
   dc62e:	f8cd 9000 	str.w	r9, [sp]
   dc632:	4644      	mov	r4, r8
   dc634:	461a      	mov	r2, r3
   dc636:	e7da      	b.n	dc5ee <__hexnan+0x30>
   dc638:	2929      	cmp	r1, #41	; 0x29
   dc63a:	d148      	bne.n	dc6ce <__hexnan+0x110>
   dc63c:	f10b 0301 	add.w	r3, fp, #1
   dc640:	f8ca 3000 	str.w	r3, [sl]
   dc644:	e014      	b.n	dc670 <__hexnan+0xb2>
   dc646:	3201      	adds	r2, #1
   dc648:	2a08      	cmp	r2, #8
   dc64a:	f109 0901 	add.w	r9, r9, #1
   dc64e:	dd06      	ble.n	dc65e <__hexnan+0xa0>
   dc650:	42bc      	cmp	r4, r7
   dc652:	d9cc      	bls.n	dc5ee <__hexnan+0x30>
   dc654:	2300      	movs	r3, #0
   dc656:	f844 3c04 	str.w	r3, [r4, #-4]
   dc65a:	2201      	movs	r2, #1
   dc65c:	3c04      	subs	r4, #4
   dc65e:	6821      	ldr	r1, [r4, #0]
   dc660:	f000 000f 	and.w	r0, r0, #15
   dc664:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc668:	6020      	str	r0, [r4, #0]
   dc66a:	e7c0      	b.n	dc5ee <__hexnan+0x30>
   dc66c:	2208      	movs	r2, #8
   dc66e:	e7be      	b.n	dc5ee <__hexnan+0x30>
   dc670:	f1b9 0f00 	cmp.w	r9, #0
   dc674:	d02b      	beq.n	dc6ce <__hexnan+0x110>
   dc676:	4544      	cmp	r4, r8
   dc678:	d205      	bcs.n	dc686 <__hexnan+0xc8>
   dc67a:	2a07      	cmp	r2, #7
   dc67c:	dc03      	bgt.n	dc686 <__hexnan+0xc8>
   dc67e:	4641      	mov	r1, r8
   dc680:	4620      	mov	r0, r4
   dc682:	f7ff ff77 	bl	dc574 <L_shift>
   dc686:	42bc      	cmp	r4, r7
   dc688:	d90c      	bls.n	dc6a4 <__hexnan+0xe6>
   dc68a:	463b      	mov	r3, r7
   dc68c:	f854 2b04 	ldr.w	r2, [r4], #4
   dc690:	f843 2b04 	str.w	r2, [r3], #4
   dc694:	42a5      	cmp	r5, r4
   dc696:	d2f9      	bcs.n	dc68c <__hexnan+0xce>
   dc698:	2200      	movs	r2, #0
   dc69a:	f843 2b04 	str.w	r2, [r3], #4
   dc69e:	429d      	cmp	r5, r3
   dc6a0:	d2fb      	bcs.n	dc69a <__hexnan+0xdc>
   dc6a2:	e00b      	b.n	dc6bc <__hexnan+0xfe>
   dc6a4:	9b01      	ldr	r3, [sp, #4]
   dc6a6:	b14b      	cbz	r3, dc6bc <__hexnan+0xfe>
   dc6a8:	f1c3 0220 	rsb	r2, r3, #32
   dc6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc6b0:	40d3      	lsrs	r3, r2
   dc6b2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc6b6:	4013      	ands	r3, r2
   dc6b8:	f846 3c04 	str.w	r3, [r6, #-4]
   dc6bc:	682b      	ldr	r3, [r5, #0]
   dc6be:	b943      	cbnz	r3, dc6d2 <__hexnan+0x114>
   dc6c0:	42bd      	cmp	r5, r7
   dc6c2:	d102      	bne.n	dc6ca <__hexnan+0x10c>
   dc6c4:	2301      	movs	r3, #1
   dc6c6:	602b      	str	r3, [r5, #0]
   dc6c8:	e003      	b.n	dc6d2 <__hexnan+0x114>
   dc6ca:	3d04      	subs	r5, #4
   dc6cc:	e7f6      	b.n	dc6bc <__hexnan+0xfe>
   dc6ce:	2004      	movs	r0, #4
   dc6d0:	e000      	b.n	dc6d4 <__hexnan+0x116>
   dc6d2:	2005      	movs	r0, #5
   dc6d4:	b005      	add	sp, #20
   dc6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc6dc <_findenv_r>:
   dc6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6e0:	4607      	mov	r7, r0
   dc6e2:	468b      	mov	fp, r1
   dc6e4:	4690      	mov	r8, r2
   dc6e6:	f000 fc49 	bl	dcf7c <__env_lock>
   dc6ea:	4b19      	ldr	r3, [pc, #100]	; (dc750 <_findenv_r+0x74>)
   dc6ec:	681d      	ldr	r5, [r3, #0]
   dc6ee:	469a      	mov	sl, r3
   dc6f0:	b13d      	cbz	r5, dc702 <_findenv_r+0x26>
   dc6f2:	465c      	mov	r4, fp
   dc6f4:	4623      	mov	r3, r4
   dc6f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc6fa:	b142      	cbz	r2, dc70e <_findenv_r+0x32>
   dc6fc:	2a3d      	cmp	r2, #61	; 0x3d
   dc6fe:	461c      	mov	r4, r3
   dc700:	d1f8      	bne.n	dc6f4 <_findenv_r+0x18>
   dc702:	4638      	mov	r0, r7
   dc704:	f000 fc3b 	bl	dcf7e <__env_unlock>
   dc708:	2000      	movs	r0, #0
   dc70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc70e:	ebcb 0404 	rsb	r4, fp, r4
   dc712:	46a9      	mov	r9, r5
   dc714:	f859 0b04 	ldr.w	r0, [r9], #4
   dc718:	2800      	cmp	r0, #0
   dc71a:	d0f2      	beq.n	dc702 <_findenv_r+0x26>
   dc71c:	4622      	mov	r2, r4
   dc71e:	4659      	mov	r1, fp
   dc720:	f7fe faea 	bl	dacf8 <strncmp>
   dc724:	b988      	cbnz	r0, dc74a <_findenv_r+0x6e>
   dc726:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc72a:	191e      	adds	r6, r3, r4
   dc72c:	5d1b      	ldrb	r3, [r3, r4]
   dc72e:	2b3d      	cmp	r3, #61	; 0x3d
   dc730:	d10b      	bne.n	dc74a <_findenv_r+0x6e>
   dc732:	f8da 3000 	ldr.w	r3, [sl]
   dc736:	1aed      	subs	r5, r5, r3
   dc738:	10ad      	asrs	r5, r5, #2
   dc73a:	4638      	mov	r0, r7
   dc73c:	f8c8 5000 	str.w	r5, [r8]
   dc740:	f000 fc1d 	bl	dcf7e <__env_unlock>
   dc744:	1c70      	adds	r0, r6, #1
   dc746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc74a:	464d      	mov	r5, r9
   dc74c:	e7e1      	b.n	dc712 <_findenv_r+0x36>
   dc74e:	bf00      	nop
   dc750:	2003e074 	.word	0x2003e074

000dc754 <_getenv_r>:
   dc754:	b507      	push	{r0, r1, r2, lr}
   dc756:	aa01      	add	r2, sp, #4
   dc758:	f7ff ffc0 	bl	dc6dc <_findenv_r>
   dc75c:	b003      	add	sp, #12
   dc75e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc764 <__gettzinfo>:
   dc764:	4800      	ldr	r0, [pc, #0]	; (dc768 <__gettzinfo+0x4>)
   dc766:	4770      	bx	lr
   dc768:	2003e034 	.word	0x2003e034

000dc76c <labs>:
   dc76c:	2800      	cmp	r0, #0
   dc76e:	bfb8      	it	lt
   dc770:	4240      	neglt	r0, r0
   dc772:	4770      	bx	lr

000dc774 <_Balloc>:
   dc774:	b570      	push	{r4, r5, r6, lr}
   dc776:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc778:	4604      	mov	r4, r0
   dc77a:	460e      	mov	r6, r1
   dc77c:	b93d      	cbnz	r5, dc78e <_Balloc+0x1a>
   dc77e:	2010      	movs	r0, #16
   dc780:	f7fa fc48 	bl	d7014 <malloc>
   dc784:	6260      	str	r0, [r4, #36]	; 0x24
   dc786:	6045      	str	r5, [r0, #4]
   dc788:	6085      	str	r5, [r0, #8]
   dc78a:	6005      	str	r5, [r0, #0]
   dc78c:	60c5      	str	r5, [r0, #12]
   dc78e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc790:	68eb      	ldr	r3, [r5, #12]
   dc792:	b143      	cbz	r3, dc7a6 <_Balloc+0x32>
   dc794:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc796:	68db      	ldr	r3, [r3, #12]
   dc798:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc79c:	b178      	cbz	r0, dc7be <_Balloc+0x4a>
   dc79e:	6802      	ldr	r2, [r0, #0]
   dc7a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc7a4:	e017      	b.n	dc7d6 <_Balloc+0x62>
   dc7a6:	2221      	movs	r2, #33	; 0x21
   dc7a8:	2104      	movs	r1, #4
   dc7aa:	4620      	mov	r0, r4
   dc7ac:	f000 fbd1 	bl	dcf52 <_calloc_r>
   dc7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc7b2:	60e8      	str	r0, [r5, #12]
   dc7b4:	68db      	ldr	r3, [r3, #12]
   dc7b6:	2b00      	cmp	r3, #0
   dc7b8:	d1ec      	bne.n	dc794 <_Balloc+0x20>
   dc7ba:	2000      	movs	r0, #0
   dc7bc:	bd70      	pop	{r4, r5, r6, pc}
   dc7be:	2101      	movs	r1, #1
   dc7c0:	fa01 f506 	lsl.w	r5, r1, r6
   dc7c4:	1d6a      	adds	r2, r5, #5
   dc7c6:	0092      	lsls	r2, r2, #2
   dc7c8:	4620      	mov	r0, r4
   dc7ca:	f000 fbc2 	bl	dcf52 <_calloc_r>
   dc7ce:	2800      	cmp	r0, #0
   dc7d0:	d0f3      	beq.n	dc7ba <_Balloc+0x46>
   dc7d2:	6046      	str	r6, [r0, #4]
   dc7d4:	6085      	str	r5, [r0, #8]
   dc7d6:	2300      	movs	r3, #0
   dc7d8:	6103      	str	r3, [r0, #16]
   dc7da:	60c3      	str	r3, [r0, #12]
   dc7dc:	bd70      	pop	{r4, r5, r6, pc}

000dc7de <_Bfree>:
   dc7de:	b570      	push	{r4, r5, r6, lr}
   dc7e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dc7e2:	4606      	mov	r6, r0
   dc7e4:	460d      	mov	r5, r1
   dc7e6:	b93c      	cbnz	r4, dc7f8 <_Bfree+0x1a>
   dc7e8:	2010      	movs	r0, #16
   dc7ea:	f7fa fc13 	bl	d7014 <malloc>
   dc7ee:	6270      	str	r0, [r6, #36]	; 0x24
   dc7f0:	6044      	str	r4, [r0, #4]
   dc7f2:	6084      	str	r4, [r0, #8]
   dc7f4:	6004      	str	r4, [r0, #0]
   dc7f6:	60c4      	str	r4, [r0, #12]
   dc7f8:	b13d      	cbz	r5, dc80a <_Bfree+0x2c>
   dc7fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dc7fc:	686a      	ldr	r2, [r5, #4]
   dc7fe:	68db      	ldr	r3, [r3, #12]
   dc800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc804:	6029      	str	r1, [r5, #0]
   dc806:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dc80a:	bd70      	pop	{r4, r5, r6, pc}

000dc80c <__multadd>:
   dc80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc810:	690d      	ldr	r5, [r1, #16]
   dc812:	461f      	mov	r7, r3
   dc814:	4606      	mov	r6, r0
   dc816:	460c      	mov	r4, r1
   dc818:	f101 0e14 	add.w	lr, r1, #20
   dc81c:	2300      	movs	r3, #0
   dc81e:	f8de 0000 	ldr.w	r0, [lr]
   dc822:	b281      	uxth	r1, r0
   dc824:	fb02 7101 	mla	r1, r2, r1, r7
   dc828:	0c0f      	lsrs	r7, r1, #16
   dc82a:	0c00      	lsrs	r0, r0, #16
   dc82c:	fb02 7000 	mla	r0, r2, r0, r7
   dc830:	b289      	uxth	r1, r1
   dc832:	3301      	adds	r3, #1
   dc834:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dc838:	429d      	cmp	r5, r3
   dc83a:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dc83e:	f84e 1b04 	str.w	r1, [lr], #4
   dc842:	dcec      	bgt.n	dc81e <__multadd+0x12>
   dc844:	b1d7      	cbz	r7, dc87c <__multadd+0x70>
   dc846:	68a3      	ldr	r3, [r4, #8]
   dc848:	429d      	cmp	r5, r3
   dc84a:	db12      	blt.n	dc872 <__multadd+0x66>
   dc84c:	6861      	ldr	r1, [r4, #4]
   dc84e:	4630      	mov	r0, r6
   dc850:	3101      	adds	r1, #1
   dc852:	f7ff ff8f 	bl	dc774 <_Balloc>
   dc856:	6922      	ldr	r2, [r4, #16]
   dc858:	3202      	adds	r2, #2
   dc85a:	f104 010c 	add.w	r1, r4, #12
   dc85e:	4680      	mov	r8, r0
   dc860:	0092      	lsls	r2, r2, #2
   dc862:	300c      	adds	r0, #12
   dc864:	f7fd fa74 	bl	d9d50 <memcpy>
   dc868:	4621      	mov	r1, r4
   dc86a:	4630      	mov	r0, r6
   dc86c:	f7ff ffb7 	bl	dc7de <_Bfree>
   dc870:	4644      	mov	r4, r8
   dc872:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dc876:	3501      	adds	r5, #1
   dc878:	615f      	str	r7, [r3, #20]
   dc87a:	6125      	str	r5, [r4, #16]
   dc87c:	4620      	mov	r0, r4
   dc87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc882 <__s2b>:
   dc882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc886:	460c      	mov	r4, r1
   dc888:	4615      	mov	r5, r2
   dc88a:	461f      	mov	r7, r3
   dc88c:	2209      	movs	r2, #9
   dc88e:	3308      	adds	r3, #8
   dc890:	4606      	mov	r6, r0
   dc892:	fb93 f3f2 	sdiv	r3, r3, r2
   dc896:	2100      	movs	r1, #0
   dc898:	2201      	movs	r2, #1
   dc89a:	429a      	cmp	r2, r3
   dc89c:	da02      	bge.n	dc8a4 <__s2b+0x22>
   dc89e:	0052      	lsls	r2, r2, #1
   dc8a0:	3101      	adds	r1, #1
   dc8a2:	e7fa      	b.n	dc89a <__s2b+0x18>
   dc8a4:	4630      	mov	r0, r6
   dc8a6:	f7ff ff65 	bl	dc774 <_Balloc>
   dc8aa:	9b08      	ldr	r3, [sp, #32]
   dc8ac:	6143      	str	r3, [r0, #20]
   dc8ae:	2d09      	cmp	r5, #9
   dc8b0:	f04f 0301 	mov.w	r3, #1
   dc8b4:	6103      	str	r3, [r0, #16]
   dc8b6:	dd11      	ble.n	dc8dc <__s2b+0x5a>
   dc8b8:	f104 0809 	add.w	r8, r4, #9
   dc8bc:	46c1      	mov	r9, r8
   dc8be:	442c      	add	r4, r5
   dc8c0:	f819 3b01 	ldrb.w	r3, [r9], #1
   dc8c4:	4601      	mov	r1, r0
   dc8c6:	3b30      	subs	r3, #48	; 0x30
   dc8c8:	220a      	movs	r2, #10
   dc8ca:	4630      	mov	r0, r6
   dc8cc:	f7ff ff9e 	bl	dc80c <__multadd>
   dc8d0:	45a1      	cmp	r9, r4
   dc8d2:	d1f5      	bne.n	dc8c0 <__s2b+0x3e>
   dc8d4:	eb08 0405 	add.w	r4, r8, r5
   dc8d8:	3c08      	subs	r4, #8
   dc8da:	e001      	b.n	dc8e0 <__s2b+0x5e>
   dc8dc:	340a      	adds	r4, #10
   dc8de:	2509      	movs	r5, #9
   dc8e0:	1b2d      	subs	r5, r5, r4
   dc8e2:	1963      	adds	r3, r4, r5
   dc8e4:	429f      	cmp	r7, r3
   dc8e6:	dd08      	ble.n	dc8fa <__s2b+0x78>
   dc8e8:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc8ec:	4601      	mov	r1, r0
   dc8ee:	3b30      	subs	r3, #48	; 0x30
   dc8f0:	220a      	movs	r2, #10
   dc8f2:	4630      	mov	r0, r6
   dc8f4:	f7ff ff8a 	bl	dc80c <__multadd>
   dc8f8:	e7f3      	b.n	dc8e2 <__s2b+0x60>
   dc8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dc8fe <__hi0bits>:
   dc8fe:	0c03      	lsrs	r3, r0, #16
   dc900:	041b      	lsls	r3, r3, #16
   dc902:	b913      	cbnz	r3, dc90a <__hi0bits+0xc>
   dc904:	0400      	lsls	r0, r0, #16
   dc906:	2310      	movs	r3, #16
   dc908:	e000      	b.n	dc90c <__hi0bits+0xe>
   dc90a:	2300      	movs	r3, #0
   dc90c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc910:	bf04      	itt	eq
   dc912:	0200      	lsleq	r0, r0, #8
   dc914:	3308      	addeq	r3, #8
   dc916:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc91a:	bf04      	itt	eq
   dc91c:	0100      	lsleq	r0, r0, #4
   dc91e:	3304      	addeq	r3, #4
   dc920:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc924:	bf04      	itt	eq
   dc926:	0080      	lsleq	r0, r0, #2
   dc928:	3302      	addeq	r3, #2
   dc92a:	2800      	cmp	r0, #0
   dc92c:	db03      	blt.n	dc936 <__hi0bits+0x38>
   dc92e:	0042      	lsls	r2, r0, #1
   dc930:	d503      	bpl.n	dc93a <__hi0bits+0x3c>
   dc932:	1c58      	adds	r0, r3, #1
   dc934:	4770      	bx	lr
   dc936:	4618      	mov	r0, r3
   dc938:	4770      	bx	lr
   dc93a:	2020      	movs	r0, #32
   dc93c:	4770      	bx	lr

000dc93e <__lo0bits>:
   dc93e:	6803      	ldr	r3, [r0, #0]
   dc940:	f013 0207 	ands.w	r2, r3, #7
   dc944:	d00b      	beq.n	dc95e <__lo0bits+0x20>
   dc946:	07d9      	lsls	r1, r3, #31
   dc948:	d422      	bmi.n	dc990 <__lo0bits+0x52>
   dc94a:	079a      	lsls	r2, r3, #30
   dc94c:	bf4b      	itete	mi
   dc94e:	085b      	lsrmi	r3, r3, #1
   dc950:	089b      	lsrpl	r3, r3, #2
   dc952:	6003      	strmi	r3, [r0, #0]
   dc954:	6003      	strpl	r3, [r0, #0]
   dc956:	bf4c      	ite	mi
   dc958:	2001      	movmi	r0, #1
   dc95a:	2002      	movpl	r0, #2
   dc95c:	4770      	bx	lr
   dc95e:	b299      	uxth	r1, r3
   dc960:	b909      	cbnz	r1, dc966 <__lo0bits+0x28>
   dc962:	0c1b      	lsrs	r3, r3, #16
   dc964:	2210      	movs	r2, #16
   dc966:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc96a:	bf04      	itt	eq
   dc96c:	0a1b      	lsreq	r3, r3, #8
   dc96e:	3208      	addeq	r2, #8
   dc970:	0719      	lsls	r1, r3, #28
   dc972:	bf04      	itt	eq
   dc974:	091b      	lsreq	r3, r3, #4
   dc976:	3204      	addeq	r2, #4
   dc978:	0799      	lsls	r1, r3, #30
   dc97a:	bf04      	itt	eq
   dc97c:	089b      	lsreq	r3, r3, #2
   dc97e:	3202      	addeq	r2, #2
   dc980:	07d9      	lsls	r1, r3, #31
   dc982:	d402      	bmi.n	dc98a <__lo0bits+0x4c>
   dc984:	085b      	lsrs	r3, r3, #1
   dc986:	d005      	beq.n	dc994 <__lo0bits+0x56>
   dc988:	3201      	adds	r2, #1
   dc98a:	6003      	str	r3, [r0, #0]
   dc98c:	4610      	mov	r0, r2
   dc98e:	4770      	bx	lr
   dc990:	2000      	movs	r0, #0
   dc992:	4770      	bx	lr
   dc994:	2020      	movs	r0, #32
   dc996:	4770      	bx	lr

000dc998 <__i2b>:
   dc998:	b510      	push	{r4, lr}
   dc99a:	460c      	mov	r4, r1
   dc99c:	2101      	movs	r1, #1
   dc99e:	f7ff fee9 	bl	dc774 <_Balloc>
   dc9a2:	2201      	movs	r2, #1
   dc9a4:	6144      	str	r4, [r0, #20]
   dc9a6:	6102      	str	r2, [r0, #16]
   dc9a8:	bd10      	pop	{r4, pc}

000dc9aa <__multiply>:
   dc9aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc9ae:	4614      	mov	r4, r2
   dc9b0:	690a      	ldr	r2, [r1, #16]
   dc9b2:	6923      	ldr	r3, [r4, #16]
   dc9b4:	429a      	cmp	r2, r3
   dc9b6:	bfb8      	it	lt
   dc9b8:	460b      	movlt	r3, r1
   dc9ba:	4688      	mov	r8, r1
   dc9bc:	bfbc      	itt	lt
   dc9be:	46a0      	movlt	r8, r4
   dc9c0:	461c      	movlt	r4, r3
   dc9c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dc9c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc9ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dc9d2:	eb07 0609 	add.w	r6, r7, r9
   dc9d6:	429e      	cmp	r6, r3
   dc9d8:	bfc8      	it	gt
   dc9da:	3101      	addgt	r1, #1
   dc9dc:	f7ff feca 	bl	dc774 <_Balloc>
   dc9e0:	f100 0514 	add.w	r5, r0, #20
   dc9e4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dc9e8:	462b      	mov	r3, r5
   dc9ea:	2200      	movs	r2, #0
   dc9ec:	4563      	cmp	r3, ip
   dc9ee:	d202      	bcs.n	dc9f6 <__multiply+0x4c>
   dc9f0:	f843 2b04 	str.w	r2, [r3], #4
   dc9f4:	e7fa      	b.n	dc9ec <__multiply+0x42>
   dc9f6:	f104 0214 	add.w	r2, r4, #20
   dc9fa:	f108 0114 	add.w	r1, r8, #20
   dc9fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dca02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dca06:	9300      	str	r3, [sp, #0]
   dca08:	9b00      	ldr	r3, [sp, #0]
   dca0a:	9201      	str	r2, [sp, #4]
   dca0c:	4293      	cmp	r3, r2
   dca0e:	d957      	bls.n	dcac0 <__multiply+0x116>
   dca10:	f8b2 b000 	ldrh.w	fp, [r2]
   dca14:	f1bb 0f00 	cmp.w	fp, #0
   dca18:	d023      	beq.n	dca62 <__multiply+0xb8>
   dca1a:	4689      	mov	r9, r1
   dca1c:	46ae      	mov	lr, r5
   dca1e:	f04f 0800 	mov.w	r8, #0
   dca22:	f859 4b04 	ldr.w	r4, [r9], #4
   dca26:	f8be a000 	ldrh.w	sl, [lr]
   dca2a:	b2a3      	uxth	r3, r4
   dca2c:	fb0b a303 	mla	r3, fp, r3, sl
   dca30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dca34:	f8de 4000 	ldr.w	r4, [lr]
   dca38:	4443      	add	r3, r8
   dca3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dca3e:	fb0b 840a 	mla	r4, fp, sl, r8
   dca42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dca46:	46f2      	mov	sl, lr
   dca48:	b29b      	uxth	r3, r3
   dca4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dca4e:	454f      	cmp	r7, r9
   dca50:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dca54:	f84a 3b04 	str.w	r3, [sl], #4
   dca58:	d901      	bls.n	dca5e <__multiply+0xb4>
   dca5a:	46d6      	mov	lr, sl
   dca5c:	e7e1      	b.n	dca22 <__multiply+0x78>
   dca5e:	f8ce 8004 	str.w	r8, [lr, #4]
   dca62:	9b01      	ldr	r3, [sp, #4]
   dca64:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dca68:	3204      	adds	r2, #4
   dca6a:	f1ba 0f00 	cmp.w	sl, #0
   dca6e:	d021      	beq.n	dcab4 <__multiply+0x10a>
   dca70:	682b      	ldr	r3, [r5, #0]
   dca72:	462c      	mov	r4, r5
   dca74:	4689      	mov	r9, r1
   dca76:	f04f 0800 	mov.w	r8, #0
   dca7a:	f8b9 e000 	ldrh.w	lr, [r9]
   dca7e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dca82:	fb0a be0e 	mla	lr, sl, lr, fp
   dca86:	44f0      	add	r8, lr
   dca88:	46a3      	mov	fp, r4
   dca8a:	b29b      	uxth	r3, r3
   dca8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dca90:	f84b 3b04 	str.w	r3, [fp], #4
   dca94:	f859 3b04 	ldr.w	r3, [r9], #4
   dca98:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dca9c:	0c1b      	lsrs	r3, r3, #16
   dca9e:	fb0a e303 	mla	r3, sl, r3, lr
   dcaa2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dcaa6:	454f      	cmp	r7, r9
   dcaa8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dcaac:	d901      	bls.n	dcab2 <__multiply+0x108>
   dcaae:	465c      	mov	r4, fp
   dcab0:	e7e3      	b.n	dca7a <__multiply+0xd0>
   dcab2:	6063      	str	r3, [r4, #4]
   dcab4:	3504      	adds	r5, #4
   dcab6:	e7a7      	b.n	dca08 <__multiply+0x5e>
   dcab8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dcabc:	b913      	cbnz	r3, dcac4 <__multiply+0x11a>
   dcabe:	3e01      	subs	r6, #1
   dcac0:	2e00      	cmp	r6, #0
   dcac2:	dcf9      	bgt.n	dcab8 <__multiply+0x10e>
   dcac4:	6106      	str	r6, [r0, #16]
   dcac6:	b003      	add	sp, #12
   dcac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcacc <__pow5mult>:
   dcacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcad0:	4615      	mov	r5, r2
   dcad2:	f012 0203 	ands.w	r2, r2, #3
   dcad6:	4606      	mov	r6, r0
   dcad8:	460f      	mov	r7, r1
   dcada:	d007      	beq.n	dcaec <__pow5mult+0x20>
   dcadc:	3a01      	subs	r2, #1
   dcade:	4c21      	ldr	r4, [pc, #132]	; (dcb64 <__pow5mult+0x98>)
   dcae0:	2300      	movs	r3, #0
   dcae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcae6:	f7ff fe91 	bl	dc80c <__multadd>
   dcaea:	4607      	mov	r7, r0
   dcaec:	10ad      	asrs	r5, r5, #2
   dcaee:	d036      	beq.n	dcb5e <__pow5mult+0x92>
   dcaf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dcaf2:	b93c      	cbnz	r4, dcb04 <__pow5mult+0x38>
   dcaf4:	2010      	movs	r0, #16
   dcaf6:	f7fa fa8d 	bl	d7014 <malloc>
   dcafa:	6270      	str	r0, [r6, #36]	; 0x24
   dcafc:	6044      	str	r4, [r0, #4]
   dcafe:	6084      	str	r4, [r0, #8]
   dcb00:	6004      	str	r4, [r0, #0]
   dcb02:	60c4      	str	r4, [r0, #12]
   dcb04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dcb08:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcb0c:	b94c      	cbnz	r4, dcb22 <__pow5mult+0x56>
   dcb0e:	f240 2171 	movw	r1, #625	; 0x271
   dcb12:	4630      	mov	r0, r6
   dcb14:	f7ff ff40 	bl	dc998 <__i2b>
   dcb18:	2300      	movs	r3, #0
   dcb1a:	f8c8 0008 	str.w	r0, [r8, #8]
   dcb1e:	4604      	mov	r4, r0
   dcb20:	6003      	str	r3, [r0, #0]
   dcb22:	f04f 0800 	mov.w	r8, #0
   dcb26:	07eb      	lsls	r3, r5, #31
   dcb28:	d50a      	bpl.n	dcb40 <__pow5mult+0x74>
   dcb2a:	4639      	mov	r1, r7
   dcb2c:	4622      	mov	r2, r4
   dcb2e:	4630      	mov	r0, r6
   dcb30:	f7ff ff3b 	bl	dc9aa <__multiply>
   dcb34:	4639      	mov	r1, r7
   dcb36:	4681      	mov	r9, r0
   dcb38:	4630      	mov	r0, r6
   dcb3a:	f7ff fe50 	bl	dc7de <_Bfree>
   dcb3e:	464f      	mov	r7, r9
   dcb40:	106d      	asrs	r5, r5, #1
   dcb42:	d00c      	beq.n	dcb5e <__pow5mult+0x92>
   dcb44:	6820      	ldr	r0, [r4, #0]
   dcb46:	b108      	cbz	r0, dcb4c <__pow5mult+0x80>
   dcb48:	4604      	mov	r4, r0
   dcb4a:	e7ec      	b.n	dcb26 <__pow5mult+0x5a>
   dcb4c:	4622      	mov	r2, r4
   dcb4e:	4621      	mov	r1, r4
   dcb50:	4630      	mov	r0, r6
   dcb52:	f7ff ff2a 	bl	dc9aa <__multiply>
   dcb56:	6020      	str	r0, [r4, #0]
   dcb58:	f8c0 8000 	str.w	r8, [r0]
   dcb5c:	e7f4      	b.n	dcb48 <__pow5mult+0x7c>
   dcb5e:	4638      	mov	r0, r7
   dcb60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcb64:	000ddfd8 	.word	0x000ddfd8

000dcb68 <__lshift>:
   dcb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcb6c:	460c      	mov	r4, r1
   dcb6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcb72:	6926      	ldr	r6, [r4, #16]
   dcb74:	6849      	ldr	r1, [r1, #4]
   dcb76:	68a3      	ldr	r3, [r4, #8]
   dcb78:	4456      	add	r6, sl
   dcb7a:	4607      	mov	r7, r0
   dcb7c:	4691      	mov	r9, r2
   dcb7e:	1c75      	adds	r5, r6, #1
   dcb80:	42ab      	cmp	r3, r5
   dcb82:	da02      	bge.n	dcb8a <__lshift+0x22>
   dcb84:	3101      	adds	r1, #1
   dcb86:	005b      	lsls	r3, r3, #1
   dcb88:	e7fa      	b.n	dcb80 <__lshift+0x18>
   dcb8a:	4638      	mov	r0, r7
   dcb8c:	f7ff fdf2 	bl	dc774 <_Balloc>
   dcb90:	2300      	movs	r3, #0
   dcb92:	4680      	mov	r8, r0
   dcb94:	f100 0114 	add.w	r1, r0, #20
   dcb98:	461a      	mov	r2, r3
   dcb9a:	4553      	cmp	r3, sl
   dcb9c:	da03      	bge.n	dcba6 <__lshift+0x3e>
   dcb9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dcba2:	3301      	adds	r3, #1
   dcba4:	e7f9      	b.n	dcb9a <__lshift+0x32>
   dcba6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dcbaa:	6920      	ldr	r0, [r4, #16]
   dcbac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dcbb0:	f019 091f 	ands.w	r9, r9, #31
   dcbb4:	f104 0114 	add.w	r1, r4, #20
   dcbb8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dcbbc:	d014      	beq.n	dcbe8 <__lshift+0x80>
   dcbbe:	f1c9 0c20 	rsb	ip, r9, #32
   dcbc2:	2200      	movs	r2, #0
   dcbc4:	6808      	ldr	r0, [r1, #0]
   dcbc6:	fa00 f009 	lsl.w	r0, r0, r9
   dcbca:	4302      	orrs	r2, r0
   dcbcc:	469a      	mov	sl, r3
   dcbce:	f843 2b04 	str.w	r2, [r3], #4
   dcbd2:	f851 2b04 	ldr.w	r2, [r1], #4
   dcbd6:	458e      	cmp	lr, r1
   dcbd8:	fa22 f20c 	lsr.w	r2, r2, ip
   dcbdc:	d8f2      	bhi.n	dcbc4 <__lshift+0x5c>
   dcbde:	f8ca 2004 	str.w	r2, [sl, #4]
   dcbe2:	b142      	cbz	r2, dcbf6 <__lshift+0x8e>
   dcbe4:	1cb5      	adds	r5, r6, #2
   dcbe6:	e006      	b.n	dcbf6 <__lshift+0x8e>
   dcbe8:	3b04      	subs	r3, #4
   dcbea:	f851 2b04 	ldr.w	r2, [r1], #4
   dcbee:	f843 2f04 	str.w	r2, [r3, #4]!
   dcbf2:	458e      	cmp	lr, r1
   dcbf4:	d8f9      	bhi.n	dcbea <__lshift+0x82>
   dcbf6:	3d01      	subs	r5, #1
   dcbf8:	4638      	mov	r0, r7
   dcbfa:	f8c8 5010 	str.w	r5, [r8, #16]
   dcbfe:	4621      	mov	r1, r4
   dcc00:	f7ff fded 	bl	dc7de <_Bfree>
   dcc04:	4640      	mov	r0, r8
   dcc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dcc0a <__mcmp>:
   dcc0a:	6903      	ldr	r3, [r0, #16]
   dcc0c:	690a      	ldr	r2, [r1, #16]
   dcc0e:	1a9b      	subs	r3, r3, r2
   dcc10:	b510      	push	{r4, lr}
   dcc12:	d111      	bne.n	dcc38 <__mcmp+0x2e>
   dcc14:	0092      	lsls	r2, r2, #2
   dcc16:	3014      	adds	r0, #20
   dcc18:	3114      	adds	r1, #20
   dcc1a:	1883      	adds	r3, r0, r2
   dcc1c:	440a      	add	r2, r1
   dcc1e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dcc22:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dcc26:	428c      	cmp	r4, r1
   dcc28:	d002      	beq.n	dcc30 <__mcmp+0x26>
   dcc2a:	d307      	bcc.n	dcc3c <__mcmp+0x32>
   dcc2c:	2001      	movs	r0, #1
   dcc2e:	bd10      	pop	{r4, pc}
   dcc30:	4298      	cmp	r0, r3
   dcc32:	d3f4      	bcc.n	dcc1e <__mcmp+0x14>
   dcc34:	2000      	movs	r0, #0
   dcc36:	bd10      	pop	{r4, pc}
   dcc38:	4618      	mov	r0, r3
   dcc3a:	bd10      	pop	{r4, pc}
   dcc3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dcc40:	bd10      	pop	{r4, pc}

000dcc42 <__mdiff>:
   dcc42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcc46:	460c      	mov	r4, r1
   dcc48:	4607      	mov	r7, r0
   dcc4a:	4611      	mov	r1, r2
   dcc4c:	4620      	mov	r0, r4
   dcc4e:	4615      	mov	r5, r2
   dcc50:	f7ff ffdb 	bl	dcc0a <__mcmp>
   dcc54:	1e06      	subs	r6, r0, #0
   dcc56:	d108      	bne.n	dcc6a <__mdiff+0x28>
   dcc58:	4631      	mov	r1, r6
   dcc5a:	4638      	mov	r0, r7
   dcc5c:	f7ff fd8a 	bl	dc774 <_Balloc>
   dcc60:	2301      	movs	r3, #1
   dcc62:	6103      	str	r3, [r0, #16]
   dcc64:	6146      	str	r6, [r0, #20]
   dcc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcc6a:	bfbc      	itt	lt
   dcc6c:	4623      	movlt	r3, r4
   dcc6e:	462c      	movlt	r4, r5
   dcc70:	4638      	mov	r0, r7
   dcc72:	6861      	ldr	r1, [r4, #4]
   dcc74:	bfba      	itte	lt
   dcc76:	461d      	movlt	r5, r3
   dcc78:	2601      	movlt	r6, #1
   dcc7a:	2600      	movge	r6, #0
   dcc7c:	f7ff fd7a 	bl	dc774 <_Balloc>
   dcc80:	692b      	ldr	r3, [r5, #16]
   dcc82:	60c6      	str	r6, [r0, #12]
   dcc84:	6926      	ldr	r6, [r4, #16]
   dcc86:	f105 0914 	add.w	r9, r5, #20
   dcc8a:	3414      	adds	r4, #20
   dcc8c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dcc90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dcc94:	f100 0514 	add.w	r5, r0, #20
   dcc98:	f04f 0c00 	mov.w	ip, #0
   dcc9c:	f854 3b04 	ldr.w	r3, [r4], #4
   dcca0:	f859 2b04 	ldr.w	r2, [r9], #4
   dcca4:	fa1c f183 	uxtah	r1, ip, r3
   dcca8:	fa1f fe82 	uxth.w	lr, r2
   dccac:	0c12      	lsrs	r2, r2, #16
   dccae:	ebce 0101 	rsb	r1, lr, r1
   dccb2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dccb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dccba:	b289      	uxth	r1, r1
   dccbc:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dccc0:	45c8      	cmp	r8, r9
   dccc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dccc6:	46a6      	mov	lr, r4
   dccc8:	f845 3b04 	str.w	r3, [r5], #4
   dcccc:	d8e6      	bhi.n	dcc9c <__mdiff+0x5a>
   dccce:	45be      	cmp	lr, r7
   dccd0:	d20e      	bcs.n	dccf0 <__mdiff+0xae>
   dccd2:	f85e 1b04 	ldr.w	r1, [lr], #4
   dccd6:	fa1c f281 	uxtah	r2, ip, r1
   dccda:	1413      	asrs	r3, r2, #16
   dccdc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dcce0:	b292      	uxth	r2, r2
   dcce2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dcce6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dccea:	f845 2b04 	str.w	r2, [r5], #4
   dccee:	e7ee      	b.n	dccce <__mdiff+0x8c>
   dccf0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dccf4:	b90b      	cbnz	r3, dccfa <__mdiff+0xb8>
   dccf6:	3e01      	subs	r6, #1
   dccf8:	e7fa      	b.n	dccf0 <__mdiff+0xae>
   dccfa:	6106      	str	r6, [r0, #16]
   dccfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcd00 <__ulp>:
   dcd00:	4b12      	ldr	r3, [pc, #72]	; (dcd4c <__ulp+0x4c>)
   dcd02:	ee10 2a90 	vmov	r2, s1
   dcd06:	401a      	ands	r2, r3
   dcd08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dcd0c:	2b00      	cmp	r3, #0
   dcd0e:	dd02      	ble.n	dcd16 <__ulp+0x16>
   dcd10:	2000      	movs	r0, #0
   dcd12:	4619      	mov	r1, r3
   dcd14:	e017      	b.n	dcd46 <__ulp+0x46>
   dcd16:	425b      	negs	r3, r3
   dcd18:	151b      	asrs	r3, r3, #20
   dcd1a:	2b13      	cmp	r3, #19
   dcd1c:	f04f 0000 	mov.w	r0, #0
   dcd20:	f04f 0100 	mov.w	r1, #0
   dcd24:	dc04      	bgt.n	dcd30 <__ulp+0x30>
   dcd26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dcd2a:	fa42 f103 	asr.w	r1, r2, r3
   dcd2e:	e00a      	b.n	dcd46 <__ulp+0x46>
   dcd30:	3b14      	subs	r3, #20
   dcd32:	2b1e      	cmp	r3, #30
   dcd34:	f04f 0201 	mov.w	r2, #1
   dcd38:	bfda      	itte	le
   dcd3a:	f1c3 031f 	rsble	r3, r3, #31
   dcd3e:	fa02 f303 	lslle.w	r3, r2, r3
   dcd42:	4613      	movgt	r3, r2
   dcd44:	4618      	mov	r0, r3
   dcd46:	ec41 0b10 	vmov	d0, r0, r1
   dcd4a:	4770      	bx	lr
   dcd4c:	7ff00000 	.word	0x7ff00000

000dcd50 <__b2d>:
   dcd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcd52:	6905      	ldr	r5, [r0, #16]
   dcd54:	f100 0614 	add.w	r6, r0, #20
   dcd58:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dcd5c:	1f2f      	subs	r7, r5, #4
   dcd5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcd62:	4620      	mov	r0, r4
   dcd64:	f7ff fdcb 	bl	dc8fe <__hi0bits>
   dcd68:	f1c0 0320 	rsb	r3, r0, #32
   dcd6c:	280a      	cmp	r0, #10
   dcd6e:	600b      	str	r3, [r1, #0]
   dcd70:	dc14      	bgt.n	dcd9c <__b2d+0x4c>
   dcd72:	f1c0 0e0b 	rsb	lr, r0, #11
   dcd76:	fa24 f10e 	lsr.w	r1, r4, lr
   dcd7a:	42be      	cmp	r6, r7
   dcd7c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dcd80:	bf34      	ite	cc
   dcd82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcd86:	2100      	movcs	r1, #0
   dcd88:	3015      	adds	r0, #21
   dcd8a:	fa04 f000 	lsl.w	r0, r4, r0
   dcd8e:	fa21 f10e 	lsr.w	r1, r1, lr
   dcd92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcd96:	ea40 0201 	orr.w	r2, r0, r1
   dcd9a:	e023      	b.n	dcde4 <__b2d+0x94>
   dcd9c:	42be      	cmp	r6, r7
   dcd9e:	bf3a      	itte	cc
   dcda0:	f1a5 0708 	subcc.w	r7, r5, #8
   dcda4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcda8:	2100      	movcs	r1, #0
   dcdaa:	380b      	subs	r0, #11
   dcdac:	d015      	beq.n	dcdda <__b2d+0x8a>
   dcdae:	4084      	lsls	r4, r0
   dcdb0:	f1c0 0520 	rsb	r5, r0, #32
   dcdb4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dcdb8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dcdbc:	42b7      	cmp	r7, r6
   dcdbe:	fa21 fe05 	lsr.w	lr, r1, r5
   dcdc2:	ea44 030e 	orr.w	r3, r4, lr
   dcdc6:	bf8c      	ite	hi
   dcdc8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dcdcc:	2400      	movls	r4, #0
   dcdce:	fa01 f000 	lsl.w	r0, r1, r0
   dcdd2:	40ec      	lsrs	r4, r5
   dcdd4:	ea40 0204 	orr.w	r2, r0, r4
   dcdd8:	e004      	b.n	dcde4 <__b2d+0x94>
   dcdda:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dcdde:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcde2:	460a      	mov	r2, r1
   dcde4:	ec43 2b10 	vmov	d0, r2, r3
   dcde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcdea <__d2b>:
   dcdea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcdee:	460e      	mov	r6, r1
   dcdf0:	2101      	movs	r1, #1
   dcdf2:	ec59 8b10 	vmov	r8, r9, d0
   dcdf6:	4615      	mov	r5, r2
   dcdf8:	f7ff fcbc 	bl	dc774 <_Balloc>
   dcdfc:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dce00:	4607      	mov	r7, r0
   dce02:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dce06:	b10c      	cbz	r4, dce0c <__d2b+0x22>
   dce08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dce0c:	9301      	str	r3, [sp, #4]
   dce0e:	f1b8 0f00 	cmp.w	r8, #0
   dce12:	d019      	beq.n	dce48 <__d2b+0x5e>
   dce14:	a802      	add	r0, sp, #8
   dce16:	f840 8d08 	str.w	r8, [r0, #-8]!
   dce1a:	f7ff fd90 	bl	dc93e <__lo0bits>
   dce1e:	9b00      	ldr	r3, [sp, #0]
   dce20:	b148      	cbz	r0, dce36 <__d2b+0x4c>
   dce22:	9a01      	ldr	r2, [sp, #4]
   dce24:	f1c0 0120 	rsb	r1, r0, #32
   dce28:	fa02 f101 	lsl.w	r1, r2, r1
   dce2c:	430b      	orrs	r3, r1
   dce2e:	40c2      	lsrs	r2, r0
   dce30:	617b      	str	r3, [r7, #20]
   dce32:	9201      	str	r2, [sp, #4]
   dce34:	e000      	b.n	dce38 <__d2b+0x4e>
   dce36:	617b      	str	r3, [r7, #20]
   dce38:	9b01      	ldr	r3, [sp, #4]
   dce3a:	61bb      	str	r3, [r7, #24]
   dce3c:	2b00      	cmp	r3, #0
   dce3e:	bf14      	ite	ne
   dce40:	2102      	movne	r1, #2
   dce42:	2101      	moveq	r1, #1
   dce44:	6139      	str	r1, [r7, #16]
   dce46:	e007      	b.n	dce58 <__d2b+0x6e>
   dce48:	a801      	add	r0, sp, #4
   dce4a:	f7ff fd78 	bl	dc93e <__lo0bits>
   dce4e:	9b01      	ldr	r3, [sp, #4]
   dce50:	617b      	str	r3, [r7, #20]
   dce52:	2101      	movs	r1, #1
   dce54:	6139      	str	r1, [r7, #16]
   dce56:	3020      	adds	r0, #32
   dce58:	b134      	cbz	r4, dce68 <__d2b+0x7e>
   dce5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dce5e:	4404      	add	r4, r0
   dce60:	6034      	str	r4, [r6, #0]
   dce62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dce66:	e009      	b.n	dce7c <__d2b+0x92>
   dce68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dce6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dce70:	6030      	str	r0, [r6, #0]
   dce72:	6918      	ldr	r0, [r3, #16]
   dce74:	f7ff fd43 	bl	dc8fe <__hi0bits>
   dce78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dce7c:	6028      	str	r0, [r5, #0]
   dce7e:	4638      	mov	r0, r7
   dce80:	b003      	add	sp, #12
   dce82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dce86 <__ratio>:
   dce86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dce8a:	4688      	mov	r8, r1
   dce8c:	4669      	mov	r1, sp
   dce8e:	4681      	mov	r9, r0
   dce90:	f7ff ff5e 	bl	dcd50 <__b2d>
   dce94:	a901      	add	r1, sp, #4
   dce96:	4640      	mov	r0, r8
   dce98:	ec55 4b10 	vmov	r4, r5, d0
   dce9c:	f7ff ff58 	bl	dcd50 <__b2d>
   dcea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcea8:	1a9a      	subs	r2, r3, r2
   dceaa:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dceae:	1ac9      	subs	r1, r1, r3
   dceb0:	ec57 6b10 	vmov	r6, r7, d0
   dceb4:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dceb8:	2b00      	cmp	r3, #0
   dceba:	bfcc      	ite	gt
   dcebc:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dcec0:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dcec4:	4632      	mov	r2, r6
   dcec6:	463b      	mov	r3, r7
   dcec8:	4620      	mov	r0, r4
   dceca:	4629      	mov	r1, r5
   dcecc:	f7fc fb2e 	bl	d952c <__aeabi_ddiv>
   dced0:	ec41 0b10 	vmov	d0, r0, r1
   dced4:	b003      	add	sp, #12
   dced6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dceda <__copybits>:
   dceda:	3901      	subs	r1, #1
   dcedc:	b510      	push	{r4, lr}
   dcede:	1149      	asrs	r1, r1, #5
   dcee0:	6914      	ldr	r4, [r2, #16]
   dcee2:	3101      	adds	r1, #1
   dcee4:	f102 0314 	add.w	r3, r2, #20
   dcee8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dceec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcef0:	42a3      	cmp	r3, r4
   dcef2:	4602      	mov	r2, r0
   dcef4:	d204      	bcs.n	dcf00 <__copybits+0x26>
   dcef6:	f853 2b04 	ldr.w	r2, [r3], #4
   dcefa:	f840 2b04 	str.w	r2, [r0], #4
   dcefe:	e7f7      	b.n	dcef0 <__copybits+0x16>
   dcf00:	2300      	movs	r3, #0
   dcf02:	428a      	cmp	r2, r1
   dcf04:	d202      	bcs.n	dcf0c <__copybits+0x32>
   dcf06:	f842 3b04 	str.w	r3, [r2], #4
   dcf0a:	e7fa      	b.n	dcf02 <__copybits+0x28>
   dcf0c:	bd10      	pop	{r4, pc}

000dcf0e <__any_on>:
   dcf0e:	f100 0214 	add.w	r2, r0, #20
   dcf12:	6900      	ldr	r0, [r0, #16]
   dcf14:	114b      	asrs	r3, r1, #5
   dcf16:	4298      	cmp	r0, r3
   dcf18:	b510      	push	{r4, lr}
   dcf1a:	db0c      	blt.n	dcf36 <__any_on+0x28>
   dcf1c:	dd0c      	ble.n	dcf38 <__any_on+0x2a>
   dcf1e:	f011 011f 	ands.w	r1, r1, #31
   dcf22:	d009      	beq.n	dcf38 <__any_on+0x2a>
   dcf24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcf28:	fa24 f001 	lsr.w	r0, r4, r1
   dcf2c:	fa00 f101 	lsl.w	r1, r0, r1
   dcf30:	428c      	cmp	r4, r1
   dcf32:	d10c      	bne.n	dcf4e <__any_on+0x40>
   dcf34:	e000      	b.n	dcf38 <__any_on+0x2a>
   dcf36:	4603      	mov	r3, r0
   dcf38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcf3c:	4293      	cmp	r3, r2
   dcf3e:	d904      	bls.n	dcf4a <__any_on+0x3c>
   dcf40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcf44:	2900      	cmp	r1, #0
   dcf46:	d0f9      	beq.n	dcf3c <__any_on+0x2e>
   dcf48:	e001      	b.n	dcf4e <__any_on+0x40>
   dcf4a:	2000      	movs	r0, #0
   dcf4c:	bd10      	pop	{r4, pc}
   dcf4e:	2001      	movs	r0, #1
   dcf50:	bd10      	pop	{r4, pc}

000dcf52 <_calloc_r>:
   dcf52:	b538      	push	{r3, r4, r5, lr}
   dcf54:	fb02 f401 	mul.w	r4, r2, r1
   dcf58:	4621      	mov	r1, r4
   dcf5a:	f7fa f89b 	bl	d7094 <_malloc_r>
   dcf5e:	4605      	mov	r5, r0
   dcf60:	b118      	cbz	r0, dcf6a <_calloc_r+0x18>
   dcf62:	4622      	mov	r2, r4
   dcf64:	2100      	movs	r1, #0
   dcf66:	f7fc fefe 	bl	d9d66 <memset>
   dcf6a:	4628      	mov	r0, r5
   dcf6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000dcf70 <nanf>:
   dcf70:	ed9f 0a01 	vldr	s0, [pc, #4]	; dcf78 <nanf+0x8>
   dcf74:	4770      	bx	lr
   dcf76:	bf00      	nop
   dcf78:	7fc00000 	.word	0x7fc00000

000dcf7c <__env_lock>:
   dcf7c:	4770      	bx	lr

000dcf7e <__env_unlock>:
   dcf7e:	4770      	bx	lr

000dcf80 <dynalib_user>:
   dcf80:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dcf90:	0000 0000                                   ....

000dcf94 <_ZTV8MB85RC64>:
	...
   dcf9c:	418d 000d 41a1 000d 5f15 000d 5fc1 000d     .A...A..._..._..
   dcfac:	603b 000d d3d5 000d d410 000d d415 000d     ;`..............
   dcfbc:	d41a 000d d41e 000d d423 000d d428 000d     ........#...(...
   dcfcc:	d42c 000d d437 000d d442 000d d3d5 000d     ,...7...B.......
   dcfdc:	d3dd 000d d3e1 000d d3ea 000d d3f2 000d     ................
   dcfec:	d3fe 000d d404 000d                         ........

000dcff4 <_ZL17FRAMversionNumber>:
   dcff4:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   dd004:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   dd014:	4643 4e55 313d 0d35 000a 6f43 6e75 2c74     CFUN=15...Count,
   dd024:	6820 756f 6c72 3a79 2520 2c69 6420 6961      hourly: %i, dai
   dd034:	796c 203a 6925 4400 6265 756f 636e 6465     ly: %i.Debounced
   dd044:	4500 6576 746e 7b00 6822 756f 6c72 2279     .Event.{"hourly"
   dd054:	253a 2c69 2220 6164 6c69 2279 253a 2c69     :%i, "daily":%i,
   dd064:	6222 7461 6574 7972 3a22 6925 202c 2220     "battery":%i,  "
   dd074:	656b 3179 3a22 2522 2273 202c 7422 6d65     key1":"%s", "tem
   dd084:	2270 253a 2c69 2220 6572 6573 7374 3a22     p":%i, "resets":
   dd094:	6925 202c 6122 656c 7472 2273 253a 2c69     %i, "alerts":%i,
   dd0a4:	2220 616d 6d78 6e69 3a22 6925 007d 6255      "maxmin":%i}.Ub
   dd0b4:	6469 746f 2d73 6f43 6e75 6574 2d72 6f48     idots-Counter-Ho
   dd0c4:	6b6f 762d 0031 6f4e 4420 7461 0061 6255     ok-v1.No Data.Ub
   dd0d4:	6469 746f 2073 6f48 6b6f 5200 7365 6f70     idots Hook.Respo
   dd0e4:	736e 2065 6552 6563 7669 6465 5500 6b6e     nse Received.Unk
   dd0f4:	6f6e 6e77 7220 7365 6f70 736e 2065 6572     nown response re
   dd104:	6563 6976 6465 2520 0069 6148 6472 5220     cevied %i.Hard R
   dd114:	7365 7465 6920 206e 2032 6573 6f63 646e     eset in 2 second
   dd124:	0073 3225 312e 2066 6573 0063 6553 2074     s.%2.1f sec.Set 
   dd134:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
   dd144:	6564 3000 4300 656c 7261 6465 5320 6c6f     de.0.Cleared Sol
   dd154:	7261 5020 776f 7265 6465 4d20 646f 0065     ar Powered Mode.
   dd164:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dd174:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
   dd184:	4d20 646f 0065 3225 312e 2066 5455 0043      Mode.%2.1f UTC.
   dd194:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
   dd1a4:	2520 0069 704f 6e65 7420 6d69 2065 6573      %i.Open time se
   dd1b4:	2074 6f74 2520 0069 6c43 736f 6e69 2067     t to %i.Closing 
   dd1c4:	6974 656d 7320 7465 7420 206f 6925 4c00     time set to %i.L
   dd1d4:	776f 5020 776f 7265 4d20 646f 0065 7254     ow Power Mode.Tr
   dd1e4:	6575 4e00 726f 616d 206c 704f 7265 7461     ue.Normal Operat
   dd1f4:	6f69 736e 4600 6c61 6573 4c00 616f 6964     ions.False.Loadi
   dd204:	676e 5320 7379 6574 206d 6544 6166 6c75     ng System Defaul
   dd214:	7374 4600 6f72 206d 7325 7420 206f 7325     ts.From %s to %s
   dd224:	5300 6174 6574 5420 6172 736e 7469 6f69     .State Transitio
   dd234:	006e 7552 6e6e 6e69 0067 6144 6c69 2079     n.Running.Daily 
   dd244:	6c43 6165 756e 0070 7073 7261 2f6b 6564     Cleanup.spark/de
   dd254:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
   dd264:	4500 7272 726f 5320 6174 6574 2d20 5220     .Error State - R
   dd274:	7365 7465 5300 6174 6574 4500 7272 726f     eset.State.Error
   dd284:	5320 6174 6574 2d20 5020 776f 7265 4320      State - Power C
   dd294:	6379 656c 4500 7272 726f 5320 6174 6574     ycle.Error State
   dd2a4:	2d20 4620 6c75 206c 6f4d 6564 206d 6552      - Full Modem Re
   dd2b4:	6573 0074 5344 2054 666f 7366 7465 2520     set.DST offset %
   dd2c4:	2e32 6631 4800 756f 6c72 4379 756f 746e     2.1f.HourlyCount
   dd2d4:	4400 6961 796c 6f43 6e75 0074 6953 6e67     .DailyCount.Sign
   dd2e4:	6c61 5200 7365 7465 6f43 6e75 0074 6554     al.ResetCount.Te
   dd2f4:	706d 7265 7461 7275 0065 6552 656c 7361     mperature.Releas
   dd304:	0065 7473 7461 4f65 4366 6768 6c00 776f     e.stateOfChg.low
   dd314:	6f50 6577 4d72 646f 0065 6c43 736f 5465     PowerMode.CloseT
   dd324:	6d69 0065 6c41 7265 7374 5400 6d69 4f65     ime.Alerts.TimeO
   dd334:	6666 6573 0074 6142 7474 7265 4379 6e6f     ffset.BatteryCon
   dd344:	6574 7478 7200 7365 7465 5246 4d41 7200     text.resetFRAM.r
   dd354:	7365 7465 6f43 6e75 7374 4800 7261 5264     esetCounts.HardR
   dd364:	7365 7465 5300 6e65 4e64 776f 4c00 776f     eset.SendNow.Low
   dd374:	6f50 6577 4d72 646f 0065 6f53 616c 2d72     PowerMode.Solar-
   dd384:	6f4d 6564 5600 7265 6f62 6573 4d2d 646f     Mode.Verbose-Mod
   dd394:	0065 6553 2d74 6954 656d 6f7a 656e 5300     e.Set-Timezone.S
   dd3a4:	7465 442d 5453 664f 7366 7465 5300 7465     et-DSTOffset.Set
   dd3b4:	4f2d 6570 546e 6d69 0065 6553 2d74 6c43     -OpenTime.Set-Cl
   dd3c4:	736f 0065 6553 2d74 6544 6f62 6e75 6563     ose.Set-Debounce
   dd3d4:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   dd3e4:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   dd3f4:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   dd404:	6944 6f63 6e6e 6365 6574 0064 6f4e 656e     Diconnected.None
   dd414:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dd424:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dd434:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dd444:	5f45 4143 5f54 424e 0031 7277 7469 4465     E_CAT_NB1.writeD
   dd454:	7461 2061 6166 6c69 6465 6420 7275 6e69     ata failed durin
   dd464:	2067 7265 7361 2065 7266 6d61 6441 7264     g erase framAddr
   dd474:	253d 0075 6572 6461 7320 7465 6120 6464     =%u.read set add
   dd484:	6572 7373 6620 6961 656c 2064 6425 6400     ress failed %d.d
   dd494:	6469 276e 2074 6572 6563 7669 2065 6e65     idn't receive en
   dd4a4:	756f 6867 6220 7479 7365 6320 756f 746e     ough bytes count
   dd4b4:	253d 0075 7277 7469 2065 6166 6c69 6465     =%u.write failed
   dd4c4:	2520 0064                                    %d.

000dd4c8 <_ZTV6MB85RC>:
	...
   dd4d0:	5e35 000d 5e37 000d 5f15 000d 5fc1 000d     5^..7^..._..._..
   dd4e0:	603b 000d                                   ;`..

000dd4e4 <_ZTV14MCP79410EEPROM>:
	...
   dd4ec:	6103 000d 6125 000d 60f9 000d 60fd 000d     .a..%a...`...`..
   dd4fc:	6141 000d 6575 000d 6991 000d               Aa..ue...i..

000dd508 <_ZTV12MCP79410SRAM>:
	...
   dd510:	6101 000d 6117 000d 60f1 000d 60f5 000d     .a...a...`...`..
   dd520:	6141 000d 65ad 000d 67fb 000d 6579 7261     Aa...e...g..year
   dd530:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd540:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd550:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd560:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd570:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd580:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd590:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd5a0:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd5b0:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd5c0:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd5d0:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd5e0:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd5f0:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd600:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd610:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd620:	7061 2e70 7472 0063                         app.rtc.

000dd628 <_ZTV12MCP79410Time>:
	...
   dd630:	6105 000d 6109 000d                         .a...a..

000dd638 <_ZTV8MCP79410>:
	...
   dd640:	6107 000d 6133 000d                         .a..3a..

000dd648 <_ZTVN5spark13CellularClassE>:
	...
   dd650:	7177 000d 716d 000d 7163 000d 7119 000d     wq..mq..cq...q..
   dd660:	7157 000d 714b 000d 713f 000d 7137 000d     Wq..Kq..?q..7q..
   dd670:	712d 000d 7123 000d 7e99 000d               -q..#q...~..

000dd67c <_ZTV14CellularSignal>:
	...
   dd684:	7225 000d 7285 000d 7227 000d 72c9 000d     %r...r..'r...r..
   dd694:	722d 000d 7295 000d 7259 000d 7353 000d     -r...r..Yr..Ss..
   dd6a4:	fffc ffff 0000 0000 737d 000d               ........}s..

000dd6b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd6b8:	7385 000d 738b 000d 73e1 000d 7399 000d     .s...s...s...s..
   dd6c8:	7387 000d                                   .s..

000dd6cc <_ZTVN5spark13EthernetClassE>:
	...
   dd6d4:	79f7 000d 79ed 000d 79e3 000d 79d9 000d     .y...y...y...y..
   dd6e4:	79cd 000d 79c1 000d 79b5 000d 79ad 000d     .y...y...y...y..
   dd6f4:	79a3 000d 7999 000d 7e99 000d               .y...y...~..

000dd700 <_ZTV7TwoWire>:
	...
   dd708:	7a15 000d 7a5f 000d 7a37 000d 7a17 000d     .z.._z..7z...z..
   dd718:	7a3f 000d 7a47 000d 7a4f 000d 7a57 000d     ?z..Gz..Oz..Wz..

000dd728 <_ZTV9IPAddress>:
	...
   dd730:	7bd1 000d 7bc1 000d 7bc3 000d 6162 6475     .{...{...{..baud
   dd740:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd750:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd760:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd770:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd780:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd790:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd7a0:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd7b0:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd7c0:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd7d0:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd7e0:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd7f0:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd800:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd810 <_ZTVN5spark9MeshClassE>:
	...
   dd818:	7d13 000d 7d09 000d 7cff 000d 7cf5 000d     .}...}...|...|..
   dd828:	7ce9 000d 7cdd 000d 7cd1 000d 7cc9 000d     .|...|...|...|..
   dd838:	7cbf 000d 7cb5 000d 7e99 000d               .|...|...~..

000dd844 <_ZTVN5spark12NetworkClassE>:
	...
   dd84c:	7e31 000d 7e3b 000d 7e45 000d 7e4f 000d     1~..;~..E~..O~..
   dd85c:	7e59 000d 7e65 000d 7e71 000d 7e7d 000d     Y~..e~..q~..}~..
   dd86c:	7e85 000d 7e8f 000d 7e99 000d               .~...~...~..

000dd878 <_ZTV8SPIClass>:
	...
   dd880:	8061 000d 8063 000d 6977 6972 676e 5300     a...c...wiring.S
   dd890:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dd8a0:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   dd8b0:	6c61 6469 002e 2b25 3330 3a64 3025 7532     alid..%+03d:%02u
   dd8c0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   dd8d0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000dd8e0 <_ZTV11USARTSerial>:
	...
   dd8e8:	8799 000d 87e9 000d 87f7 000d 7f79 000d     ............y...
   dd8f8:	87ad 000d 87cf 000d 87bb 000d 87e3 000d     ................
   dd908:	879b 000d 879f 000d                         ........

000dd910 <_ZTV9USBSerial>:
	...
   dd918:	88a1 000d 88f1 000d 88ff 000d 7f79 000d     ............y...
   dd928:	88dd 000d 88a3 000d 88b9 000d 88eb 000d     ................
   dd938:	88cf 000d 889d 000d                         ........

000dd940 <_ZSt7nothrow>:
	...

000dd941 <day_name.4725>:
   dd941:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd951:	6972 6153 4a74                                   riSat

000dd956 <mon_name.4726>:
   dd956:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd966:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd976:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd986:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd996:	6425 000a                                   %d..

000dd99a <_ctype_>:
   dd99a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd9aa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd9ba:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd9ca:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd9da:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd9ea:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd9fa:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dda0a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dda1a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dda9c <__sf_fake_stdin>:
	...

000ddabc <__sf_fake_stdout>:
	...

000ddadc <__sf_fake_stderr>:
	...
   ddafc:	4f50 4953 0058 0000                         POSIX...

000ddb04 <_DAYS_BEFORE_MONTH>:
   ddb04:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddb14:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddb24:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddb34 <DAYS_IN_MONTH>:
   ddb34:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddb44:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb54:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddb64 <__month_lengths>:
   ddb64:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddb74:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb84:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddb94:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddba4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbb4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddbc4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddbd4:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddbe4:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddbf4:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   ddc04:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   ddc14:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000ddc20 <fpi.5344>:
   ddc20:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddc30:	0000 0000                                   ....

000ddc34 <fpinan.5380>:
   ddc34:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ddc44:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....
   ddc54:	0000 0000                                   ....

000ddc58 <tinytens>:
   ddc58:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddc68:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddc78:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   ddc88:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   ddc98:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   ddca8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   ddcb8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   ddcc8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   ddcd8:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   ddce8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   ddcf8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   ddd08:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   ddd18:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   ddd28:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   ddd38:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   ddd48:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   ddd58:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   ddd68:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   ddd78:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   ddd88:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   ddd98:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   ddda8:	2053 7025 0000 0000                         S %p....

000dddb0 <_C_time_locale>:
   dddb0:	dc88 000d dc8c 000d dc90 000d dc94 000d     ................
   dddc0:	dc98 000d dc9c 000d dca0 000d dca4 000d     ................
   dddd0:	dca8 000d dcac 000d dcb0 000d dcb4 000d     ................
   ddde0:	dcb8 000d dcc0 000d dcc9 000d dccf 000d     ................
   dddf0:	dc98 000d dcd5 000d dcda 000d dcdf 000d     ................
   dde00:	dce6 000d dcf0 000d dcf8 000d dd01 000d     ................
   dde10:	dd0a 000d dd0e 000d dd12 000d dd16 000d     ................
   dde20:	dd1a 000d dd1e 000d dd22 000d dd26 000d     ........"...&...
   dde30:	dd2d 000d dd34 000d dd3c 000d dd46 000d     -...4...<...F...
   dde40:	dd4f 000d dd56 000d dd5f 000d dd68 000d     O...V..._...h...
   dde50:	dd71 000d d350 000d dd86 000d dd89 000d     q...P...........
   dde60:	dcb8 000d dcc0 000d dcc9 000d dccf 000d     ................
   dde70:	dc98 000d dcd5 000d dcda 000d dcdf 000d     ................
   dde80:	dce6 000d dcf0 000d dcf8 000d dd01 000d     ................
   dde90:	d75c 000d dda1 000d d01d 000d d01d 000d     \...............
   ddea0:	d01d 000d d01d 000d d01d 000d 5a54 4700     ............TZ.G
   ddeb0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   ddec0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dded0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddee0:	3a6e 6825 2575 006e                         n:%hu%n.

000ddee8 <__mprec_tens>:
   ddee8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ddef8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddf08:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ddf18:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ddf28:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ddf38:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddf48:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ddf58:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ddf68:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ddf78:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ddf88:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ddf98:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ddfa8:	9db4 79d9 7843 44ea                         ...yCx.D

000ddfb0 <__mprec_bigtens>:
   ddfb0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ddfc0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ddfd0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ddfd8 <p05.5387>:
   ddfd8:	0005 0000 0019 0000 007d 0000               ........}...

000ddfe4 <link_const_variable_data_end>:
   ddfe4:	000d5d35 	.word	0x000d5d35
   ddfe8:	000d60ed 	.word	0x000d60ed
   ddfec:	000d69c9 	.word	0x000d69c9
   ddff0:	000d70f1 	.word	0x000d70f1
   ddff4:	000d71f5 	.word	0x000d71f5
   ddff8:	000d7a01 	.word	0x000d7a01
   ddffc:	000d7ca5 	.word	0x000d7ca5
   de000:	000d7de1 	.word	0x000d7de1
   de004:	000d7f65 	.word	0x000d7f65
   de008:	000d8045 	.word	0x000d8045
   de00c:	000d83a5 	.word	0x000d83a5
   de010:	000d8785 	.word	0x000d8785
   de014:	000d8cd9 	.word	0x000d8cd9
   de018:	000d8d9d 	.word	0x000d8d9d
   de01c:	000d8e21 	.word	0x000d8e21
   de020:	000d8ea5 	.word	0x000d8ea5

000de024 <link_constructors_end>:
	...
