
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/2.0.0-rc.2/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000099d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd9f0  000dd9f0  0000d9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       0000081c  2003f400  000dd9f8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002f0  2003df08  000de214  0001df08  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005f8  2003e1f8  2003e1f8  0002e1f8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000de504  000de504  0001e504  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000de530  000de530  0001e530  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002517be  00000000  00000000  0001e534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002392e  00000000  00000000  0026fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004035f  00000000  00000000  00293620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000039c0  00000000  00000000  002d397f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b280  00000000  00000000  002d733f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046ed3  00000000  00000000  002e25bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005bda0  00000000  00000000  00329492  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012787e  00000000  00000000  00385232  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000aa08  00000000  00000000  004acab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f863 	bl	db0fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f885 	bl	db14c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df08 	.word	0x2003df08
   d404c:	000de214 	.word	0x000de214
   d4050:	2003e1f8 	.word	0x2003e1f8
   d4054:	2003e1f8 	.word	0x2003e1f8
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fea7 	bl	d9db4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd9b4 	.word	0x000dd9b4
   d4080:	000dd9ec 	.word	0x000dd9ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b9c4 	b.w	d5410 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fff1 	bl	d5070 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 be51 	b.w	d9d38 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b955 	b.w	d8344 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b953 	b.w	d8344 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b959 	b.w	d8354 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f810 	bl	d80d0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7d51 	.word	0x000d7d51

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e3bc 	.word	0x2003e3bc

000d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40da:	b128      	cbz	r0, d40e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40de:	210c      	movs	r1, #12
   d40e0:	f005 ff73 	bl	d9fca <_ZdlPvj>
            wakeupSource = next;
   d40e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e6:	e7f8      	b.n	d40da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40f2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f4:	d904      	bls.n	d4100 <nrf_gpio_pin_port_decode+0x14>
   d40f6:	4a07      	ldr	r2, [pc, #28]	; (d4114 <nrf_gpio_pin_port_decode+0x28>)
   d40f8:	2100      	movs	r1, #0
   d40fa:	200a      	movs	r0, #10
   d40fc:	f003 ffe8 	bl	d80d0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4104:	bf83      	ittte	hi
   d4106:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d410a:	4803      	ldrhi	r0, [pc, #12]	; (d4118 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d410c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d410e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4112:	bd10      	pop	{r4, pc}
   d4114:	000d7d51 	.word	0x000d7d51
   d4118:	50000300 	.word	0x50000300

000d411c <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d411c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d411e:	4904      	ldr	r1, [pc, #16]	; (d4130 <_Z9resetFRAM6String+0x14>)
   d4120:	f005 fa5d 	bl	d95de <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4124:	b118      	cbz	r0, d412e <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4126:	4803      	ldr	r0, [pc, #12]	; (d4134 <_Z9resetFRAM6String+0x18>)
   d4128:	f002 fb48 	bl	d67bc <_ZN6MB85RC5eraseEv>
    return 1;
   d412c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d412e:	bd08      	pop	{r3, pc}
   d4130:	000dcab0 	.word	0x000dcab0
   d4134:	2003e2e4 	.word	0x2003e2e4

000d4138 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4138:	b508      	push	{r3, lr}
   d413a:	4904      	ldr	r1, [pc, #16]	; (d414c <_Z7sendNow6String+0x14>)
   d413c:	f005 fa4f 	bl	d95de <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4140:	b118      	cbz	r0, d414a <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_Z7sendNow6String+0x18>)
   d4144:	2203      	movs	r2, #3
   d4146:	701a      	strb	r2, [r3, #0]
    return 1;
   d4148:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414a:	bd08      	pop	{r3, pc}
   d414c:	000dcab0 	.word	0x000dcab0
   d4150:	2003e364 	.word	0x2003e364

000d4154 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4154:	b510      	push	{r4, lr}
   d4156:	4b03      	ldr	r3, [pc, #12]	; (d4164 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4158:	6003      	str	r3, [r0, #0]
   d415a:	4604      	mov	r4, r0
   d415c:	f003 fb3c 	bl	d77d8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4160:	4620      	mov	r0, r4
   d4162:	bd10      	pop	{r4, pc}
   d4164:	000dced0 	.word	0x000dced0

000d4168 <_ZN17PublishQueueAsyncD0Ev>:
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
   d416c:	f7ff fff2 	bl	d4154 <_ZN17PublishQueueAsyncD1Ev>
   d4170:	4620      	mov	r0, r4
   d4172:	2138      	movs	r1, #56	; 0x38
   d4174:	f005 ff29 	bl	d9fca <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d417c:	b510      	push	{r4, lr}
   d417e:	4b03      	ldr	r3, [pc, #12]	; (d418c <_ZN8MB85RC64D1Ev+0x10>)
   d4180:	6003      	str	r3, [r0, #0]
   d4182:	4604      	mov	r4, r0
   d4184:	f002 fafa 	bl	d677c <_ZN6MB85RCD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}
   d418c:	000dceb4 	.word	0x000dceb4

000d4190 <_ZN8MB85RC64D0Ev>:
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	f7ff fff2 	bl	d417c <_ZN8MB85RC64D1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2110      	movs	r1, #16
   d419c:	f005 ff15 	bl	d9fca <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a8:	6800      	ldr	r0, [r0, #0]
   d41aa:	b108      	cbz	r0, d41b0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41ac:	f004 f8d2 	bl	d8354 <free>
class SystemClass {
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41b6:	f004 f82d 	bl	d8214 <spark_cloud_flag_connected>
        if (!connected()) {
   d41ba:	b120      	cbz	r0, d41c6 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d41bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
   d41c2:	f004 b847 	b.w	d8254 <spark_sync_time>
    }
   d41c6:	bd08      	pop	{r3, pc}

000d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d41c8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ca:	2000      	movs	r0, #0
   d41cc:	f004 f84a 	bl	d8264 <spark_sync_time_pending>
   d41d0:	b128      	cbz	r0, d41de <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d2:	f004 f81f 	bl	d8214 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41d6:	f080 0001 	eor.w	r0, r0, #1
   d41da:	b2c0      	uxtb	r0, r0
    }
   d41dc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41de:	2001      	movs	r0, #1
   d41e0:	e7fc      	b.n	d41dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41e2:	2300      	movs	r3, #0
   d41e4:	2204      	movs	r2, #4
   d41e6:	f003 bff5 	b.w	d81d4 <spark_variable>

000d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41ea:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ec:	2100      	movs	r1, #0
   d41ee:	4604      	mov	r4, r0
   d41f0:	4608      	mov	r0, r1
   d41f2:	f003 fd55 	bl	d7ca0 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f6:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41fa:	2100      	movs	r1, #0
   d41fc:	2001      	movs	r0, #1
   d41fe:	f003 fd4f 	bl	d7ca0 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d4202:	b2e0      	uxtb	r0, r4
   d4204:	bd10      	pop	{r4, pc}

000d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>:
	float readLatDeg(void) const {
   d4206:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d4208:	2100      	movs	r1, #0
   d420a:	b08f      	sub	sp, #60	; 0x3c
   d420c:	4604      	mov	r4, r0
   d420e:	4608      	mov	r0, r1
   d4210:	f003 fd46 	bl	d7ca0 <os_thread_scheduling>
	    	return location;
   d4214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4216:	466d      	mov	r5, sp
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4222:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4226:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d422a:	2100      	movs	r1, #0
   d422c:	2001      	movs	r0, #1
   d422e:	f003 fd37 	bl	d7ca0 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d4232:	4668      	mov	r0, sp
   d4234:	f001 fe88 	bl	d5f48 <_ZN15TinyGPSLocation3latEv>
   d4238:	ec51 0b10 	vmov	r0, r1, d0
   d423c:	f006 fb82 	bl	da944 <__aeabi_d2f>
	}
   d4240:	ee00 0a10 	vmov	s0, r0
   d4244:	b00f      	add	sp, #60	; 0x3c
   d4246:	bd30      	pop	{r4, r5, pc}

000d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>:
	float readLonDeg(void) const {
   d4248:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d424a:	2100      	movs	r1, #0
   d424c:	b08f      	sub	sp, #60	; 0x3c
   d424e:	4604      	mov	r4, r0
   d4250:	4608      	mov	r0, r1
   d4252:	f003 fd25 	bl	d7ca0 <os_thread_scheduling>
   d4256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4258:	466d      	mov	r5, sp
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4264:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4268:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d426c:	2100      	movs	r1, #0
   d426e:	2001      	movs	r0, #1
   d4270:	f003 fd16 	bl	d7ca0 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4274:	4668      	mov	r0, sp
   d4276:	f001 fe8b 	bl	d5f90 <_ZN15TinyGPSLocation3lngEv>
   d427a:	ec51 0b10 	vmov	r0, r1, d0
   d427e:	f006 fb61 	bl	da944 <__aeabi_d2f>
	}
   d4282:	ee00 0a10 	vmov	s0, r0
   d4286:	b00f      	add	sp, #60	; 0x3c
   d4288:	bd30      	pop	{r4, r5, pc}

000d428a <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d428a:	2000      	movs	r0, #0
   d428c:	f003 bd88 	b.w	d7da0 <hal_timer_millis>

000d4290 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4290:	b40e      	push	{r1, r2, r3}
   d4292:	b510      	push	{r4, lr}
   d4294:	b08d      	sub	sp, #52	; 0x34
   d4296:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4298:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d429a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d429e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42a0:	2300      	movs	r3, #0
   d42a2:	2020      	movs	r0, #32
   d42a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42a8:	e9cd 4200 	strd	r4, r2, [sp]
   d42ac:	201e      	movs	r0, #30
   d42ae:	aa04      	add	r2, sp, #16
   d42b0:	f003 ff16 	bl	d80e0 <log_message_v>
}
   d42b4:	b00d      	add	sp, #52	; 0x34
   d42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d42ba:	b003      	add	sp, #12
   d42bc:	4770      	bx	lr
	...

000d42c0 <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
   d42c0:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42c2:	4c0a      	ldr	r4, [pc, #40]	; (d42ec <fastPinGetPinmap+0x2c>)
   d42c4:	4d0a      	ldr	r5, [pc, #40]	; (d42f0 <fastPinGetPinmap+0x30>)
   d42c6:	7823      	ldrb	r3, [r4, #0]
   d42c8:	f3bf 8f5b 	dmb	ish
   d42cc:	f013 0f01 	tst.w	r3, #1
   d42d0:	d109      	bne.n	d42e6 <fastPinGetPinmap+0x26>
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fef0 	bl	d40b8 <__cxa_guard_acquire>
   d42d8:	b128      	cbz	r0, d42e6 <fastPinGetPinmap+0x26>
   d42da:	f003 fd79 	bl	d7dd0 <HAL_Pin_Map>
   d42de:	6028      	str	r0, [r5, #0]
   d42e0:	4620      	mov	r0, r4
   d42e2:	f7ff feee 	bl	d40c2 <__cxa_guard_release>
    return pinMap;
}
   d42e6:	6828      	ldr	r0, [r5, #0]
   d42e8:	bd38      	pop	{r3, r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e1fc 	.word	0x2003e1fc
   d42f0:	2003e200 	.word	0x2003e200

000d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42f6:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42fc:	f88d 3000 	strb.w	r3, [sp]
   d4300:	f88d 5004 	strb.w	r5, [sp, #4]
   d4304:	68e4      	ldr	r4, [r4, #12]
   d4306:	233c      	movs	r3, #60	; 0x3c
   d4308:	47a0      	blx	r4
	}
   d430a:	b003      	add	sp, #12
   d430c:	bd30      	pop	{r4, r5, pc}
	...

000d4310 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4310:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4312:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4314:	b092      	sub	sp, #72	; 0x48
   d4316:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4318:	b97b      	cbnz	r3, d433a <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d431a:	4919      	ldr	r1, [pc, #100]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d431c:	a802      	add	r0, sp, #8
   d431e:	f007 f9c9 	bl	db6b4 <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4322:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4324:	f88d 3000 	strb.w	r3, [sp]
   d4328:	4b16      	ldr	r3, [pc, #88]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d432a:	4917      	ldr	r1, [pc, #92]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432c:	781b      	ldrb	r3, [r3, #0]
   d432e:	4817      	ldr	r0, [pc, #92]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4330:	aa02      	add	r2, sp, #8
   d4332:	f7ff ffdf 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4336:	b012      	add	sp, #72	; 0x48
   d4338:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d433a:	4608      	mov	r0, r1
   d433c:	f006 fd10 	bl	dad60 <atoi>
   d4340:	28c8      	cmp	r0, #200	; 0xc8
   d4342:	d10e      	bne.n	d4362 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4344:	4912      	ldr	r1, [pc, #72]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4346:	a802      	add	r0, sp, #8
   d4348:	f007 f9b4 	bl	db6b4 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d434c:	f005 fb63 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d4350:	4b10      	ldr	r3, [pc, #64]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4352:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4354:	4b10      	ldr	r3, [pc, #64]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4356:	2201      	movs	r2, #1
   d4358:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d435c:	2200      	movs	r2, #0
   d435e:	701a      	strb	r2, [r3, #0]
   d4360:	e7df      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4362:	4620      	mov	r0, r4
   d4364:	f006 fcfc 	bl	dad60 <atoi>
   d4368:	28c9      	cmp	r0, #201	; 0xc9
   d436a:	d0eb      	beq.n	d4344 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d436c:	4620      	mov	r0, r4
   d436e:	f006 fcf7 	bl	dad60 <atoi>
   d4372:	4a0b      	ldr	r2, [pc, #44]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4374:	4603      	mov	r3, r0
   d4376:	2140      	movs	r1, #64	; 0x40
   d4378:	a802      	add	r0, sp, #8
   d437a:	f004 f80b 	bl	d8394 <snprintf>
   d437e:	e7d0      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4380:	000dcaf0 	.word	0x000dcaf0
   d4384:	2003e254 	.word	0x2003e254
   d4388:	000dcb27 	.word	0x000dcb27
   d438c:	2003e308 	.word	0x2003e308
   d4390:	000dcaf8 	.word	0x000dcaf8
   d4394:	2003e368 	.word	0x2003e368
   d4398:	2003e388 	.word	0x2003e388
   d439c:	2003e2c6 	.word	0x2003e2c6
   d43a0:	000dcb0a 	.word	0x000dcb0a

000d43a4 <_Z12hardResetNow6String>:
{
   d43a4:	b513      	push	{r0, r1, r4, lr}
   d43a6:	490d      	ldr	r1, [pc, #52]	; (d43dc <_Z12hardResetNow6String+0x38>)
   d43a8:	f005 f919 	bl	d95de <_ZNK6String6equalsEPKc>
   d43ac:	2400      	movs	r4, #0
  if (command == "1")
   d43ae:	b198      	cbz	r0, d43d8 <_Z12hardResetNow6String+0x34>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d43b0:	4b0b      	ldr	r3, [pc, #44]	; (d43e0 <_Z12hardResetNow6String+0x3c>)
   d43b2:	f88d 4000 	strb.w	r4, [sp]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	4a0a      	ldr	r2, [pc, #40]	; (d43e4 <_Z12hardResetNow6String+0x40>)
   d43ba:	490b      	ldr	r1, [pc, #44]	; (d43e8 <_Z12hardResetNow6String+0x44>)
   d43bc:	480b      	ldr	r0, [pc, #44]	; (d43ec <_Z12hardResetNow6String+0x48>)
   d43be:	f7ff ff99 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d43c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43c6:	f004 f815 	bl	d83f4 <delay>
    rtc.setAlarm(10);
   d43ca:	4809      	ldr	r0, [pc, #36]	; (d43f0 <_Z12hardResetNow6String+0x4c>)
   d43cc:	4623      	mov	r3, r4
   d43ce:	2201      	movs	r2, #1
   d43d0:	210a      	movs	r1, #10
   d43d2:	f002 ff01 	bl	d71d8 <_ZN8MCP794108setAlarmEibi>
   d43d6:	2001      	movs	r0, #1
}
   d43d8:	b002      	add	sp, #8
   d43da:	bd10      	pop	{r4, pc}
   d43dc:	000dcab0 	.word	0x000dcab0
   d43e0:	2003e254 	.word	0x2003e254
   d43e4:	000dcb34 	.word	0x000dcb34
   d43e8:	000dcd8c 	.word	0x000dcd8c
   d43ec:	2003e308 	.word	0x2003e308
   d43f0:	2003e344 	.word	0x2003e344

000d43f4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43f6:	4919      	ldr	r1, [pc, #100]	; (d445c <_Z14setverboseMode6String+0x68>)
   d43f8:	4604      	mov	r4, r0
   d43fa:	f005 f8f0 	bl	d95de <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43fe:	4605      	mov	r5, r0
   d4400:	b1b0      	cbz	r0, d4430 <_Z14setverboseMode6String+0x3c>
  {
    sysStatus.verboseMode = true;
   d4402:	4b17      	ldr	r3, [pc, #92]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d4404:	2401      	movs	r4, #1
   d4406:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4408:	4b16      	ldr	r3, [pc, #88]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d440a:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d440c:	f003 ff02 	bl	d8214 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4410:	b910      	cbnz	r0, d4418 <_Z14setverboseMode6String+0x24>
    return 1;
   d4412:	2001      	movs	r0, #1
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
    return 1;
  }
  else return 0;
}
   d4414:	b003      	add	sp, #12
   d4416:	bd30      	pop	{r4, r5, pc}
   d4418:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d441a:	f88d 3000 	strb.w	r3, [sp]
   d441e:	4b12      	ldr	r3, [pc, #72]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4420:	4a12      	ldr	r2, [pc, #72]	; (d446c <_Z14setverboseMode6String+0x78>)
   d4422:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	4912      	ldr	r1, [pc, #72]	; (d4470 <_Z14setverboseMode6String+0x7c>)
   d4426:	4813      	ldr	r0, [pc, #76]	; (d4474 <_Z14setverboseMode6String+0x80>)
   d4428:	f7ff ff64 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d442c:	4620      	mov	r0, r4
   d442e:	e7f1      	b.n	d4414 <_Z14setverboseMode6String+0x20>
   d4430:	4911      	ldr	r1, [pc, #68]	; (d4478 <_Z14setverboseMode6String+0x84>)
   d4432:	4620      	mov	r0, r4
   d4434:	f005 f8d3 	bl	d95de <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4438:	2800      	cmp	r0, #0
   d443a:	d0eb      	beq.n	d4414 <_Z14setverboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d443c:	4b08      	ldr	r3, [pc, #32]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d443e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4440:	4b08      	ldr	r3, [pc, #32]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d4442:	2401      	movs	r4, #1
   d4444:	701c      	strb	r4, [r3, #0]
   d4446:	f003 fee5 	bl	d8214 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d444a:	2800      	cmp	r0, #0
   d444c:	d0e1      	beq.n	d4412 <_Z14setverboseMode6String+0x1e>
   d444e:	4b06      	ldr	r3, [pc, #24]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4450:	f88d 5000 	strb.w	r5, [sp]
   d4454:	781b      	ldrb	r3, [r3, #0]
   d4456:	4a09      	ldr	r2, [pc, #36]	; (d447c <_Z14setverboseMode6String+0x88>)
   d4458:	e7e4      	b.n	d4424 <_Z14setverboseMode6String+0x30>
   d445a:	bf00      	nop
   d445c:	000dcab0 	.word	0x000dcab0
   d4460:	2003e368 	.word	0x2003e368
   d4464:	2003e388 	.word	0x2003e388
   d4468:	2003e254 	.word	0x2003e254
   d446c:	000dcb4c 	.word	0x000dcb4c
   d4470:	000dcb6f 	.word	0x000dcb6f
   d4474:	2003e308 	.word	0x2003e308
   d4478:	000dcb5d 	.word	0x000dcb5d
   d447c:	000dcb5f 	.word	0x000dcb5f

000d4480 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4484:	b0c8      	sub	sp, #288	; 0x120
   d4486:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4488:	f7ff fe94 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d448c:	f7ff fefd 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4490:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d4494:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d4496:	f247 562f 	movw	r6, #29999	; 0x752f
   d449a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d449c:	f7ff fef5 	bl	d428a <_ZN11SystemClass6millisEv>
   d44a0:	ebb0 0409 	subs.w	r4, r0, r9
   d44a4:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d44a8:	42af      	cmp	r7, r5
   d44aa:	bf08      	it	eq
   d44ac:	42a6      	cmpeq	r6, r4
   d44ae:	d305      	bcc.n	d44bc <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d44b0:	f7ff fe8a 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d44b4:	b910      	cbnz	r0, d44bc <_Z11setTimeZone6String+0x3c>
            spark_process();
   d44b6:	f003 fe9d 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d44ba:	e7ef      	b.n	d449c <_Z11setTimeZone6String+0x1c>
   d44bc:	f7ff fe84 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44c0:	f8d8 0000 	ldr.w	r0, [r8]
   d44c4:	220a      	movs	r2, #10
   d44c6:	a903      	add	r1, sp, #12
   d44c8:	f007 ff1e 	bl	dc308 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44cc:	f100 030c 	add.w	r3, r0, #12
   d44d0:	b2db      	uxtb	r3, r3
   d44d2:	2b18      	cmp	r3, #24
   d44d4:	d848      	bhi.n	d4568 <_Z11setTimeZone6String+0xe8>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44d6:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44d8:	ee07 5a90 	vmov	s15, r5
   d44dc:	4b26      	ldr	r3, [pc, #152]	; (d4578 <_Z11setTimeZone6String+0xf8>)
   d44de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44e2:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44e4:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44e8:	f005 f92c 	bl	d9744 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44ec:	4b23      	ldr	r3, [pc, #140]	; (d457c <_Z11setTimeZone6String+0xfc>)
   d44ee:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44f0:	f005 fae2 	bl	d9ab8 <_ZN9TimeClass5localEv>
   d44f4:	4606      	mov	r6, r0
   d44f6:	f005 fa8e 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d44fa:	1a30      	subs	r0, r6, r0
   d44fc:	f005 fec0 	bl	da280 <__aeabi_i2d>
   d4500:	a31b      	add	r3, pc, #108	; (adr r3, d4570 <_Z11setTimeZone6String+0xf0>)
   d4502:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4506:	f006 f84f 	bl	da5a8 <__aeabi_ddiv>
   d450a:	4a1d      	ldr	r2, [pc, #116]	; (d4580 <_Z11setTimeZone6String+0x100>)
   d450c:	e9cd 0100 	strd	r0, r1, [sp]
   d4510:	210a      	movs	r1, #10
   d4512:	481c      	ldr	r0, [pc, #112]	; (d4584 <_Z11setTimeZone6String+0x104>)
   d4514:	f003 ff3e 	bl	d8394 <snprintf>
   d4518:	f003 fe7c 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d451c:	b310      	cbz	r0, d4564 <_Z11setTimeZone6String+0xe4>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d451e:	462b      	mov	r3, r5
   d4520:	4a19      	ldr	r2, [pc, #100]	; (d4588 <_Z11setTimeZone6String+0x108>)
   d4522:	4d1a      	ldr	r5, [pc, #104]	; (d458c <_Z11setTimeZone6String+0x10c>)
   d4524:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4528:	2600      	movs	r6, #0
   d452a:	a808      	add	r0, sp, #32
   d452c:	f003 ff32 	bl	d8394 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d4530:	f88d 6000 	strb.w	r6, [sp]
   d4534:	4916      	ldr	r1, [pc, #88]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4536:	782b      	ldrb	r3, [r5, #0]
   d4538:	4816      	ldr	r0, [pc, #88]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d453a:	aa08      	add	r2, sp, #32
   d453c:	f7ff feda 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4540:	f005 fa69 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d4544:	4602      	mov	r2, r0
   d4546:	17c3      	asrs	r3, r0, #31
   d4548:	a804      	add	r0, sp, #16
   d454a:	f005 f961 	bl	d9810 <_ZN9TimeClass7timeStrEx>
   d454e:	f88d 6000 	strb.w	r6, [sp]
   d4552:	782b      	ldrb	r3, [r5, #0]
   d4554:	9a04      	ldr	r2, [sp, #16]
   d4556:	490e      	ldr	r1, [pc, #56]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4558:	480e      	ldr	r0, [pc, #56]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d455a:	f7ff fecb 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d455e:	a804      	add	r0, sp, #16
   d4560:	f004 ffc4 	bl	d94ec <_ZN6StringD1Ev>
  }

  return 1;
   d4564:	4620      	mov	r0, r4
   d4566:	e000      	b.n	d456a <_Z11setTimeZone6String+0xea>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4568:	2000      	movs	r0, #0
}
   d456a:	b048      	add	sp, #288	; 0x120
   d456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4570:	00000000 	.word	0x00000000
   d4574:	40ac2000 	.word	0x40ac2000
   d4578:	2003e368 	.word	0x2003e368
   d457c:	2003e388 	.word	0x2003e388
   d4580:	000dcb74 	.word	0x000dcb74
   d4584:	2003e2bc 	.word	0x2003e2bc
   d4588:	000dcb7e 	.word	0x000dcb7e
   d458c:	2003e254 	.word	0x2003e254
   d4590:	000dcb92 	.word	0x000dcb92
   d4594:	2003e308 	.word	0x2003e308

000d4598 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4598:	b530      	push	{r4, r5, lr}
   d459a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d459c:	220a      	movs	r2, #10
   d459e:	6800      	ldr	r0, [r0, #0]
   d45a0:	a903      	add	r1, sp, #12
   d45a2:	f007 feb1 	bl	dc308 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45a6:	b2c3      	uxtb	r3, r0
   d45a8:	1e5a      	subs	r2, r3, #1
   d45aa:	2a3b      	cmp	r2, #59	; 0x3b
   d45ac:	d81f      	bhi.n	d45ee <_Z17setSampleInterval6String+0x56>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d45ae:	4a11      	ldr	r2, [pc, #68]	; (d45f4 <_Z17setSampleInterval6String+0x5c>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b0:	4d11      	ldr	r5, [pc, #68]	; (d45f8 <_Z17setSampleInterval6String+0x60>)
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45b2:	4812      	ldr	r0, [pc, #72]	; (d45fc <_Z17setSampleInterval6String+0x64>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b4:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d45b6:	2401      	movs	r4, #1
   d45b8:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45ba:	210c      	movs	r1, #12
   d45bc:	4a10      	ldr	r2, [pc, #64]	; (d4600 <_Z17setSampleInterval6String+0x68>)
   d45be:	f003 fee9 	bl	d8394 <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45c2:	79ab      	ldrb	r3, [r5, #6]
   d45c4:	4a0f      	ldr	r2, [pc, #60]	; (d4604 <_Z17setSampleInterval6String+0x6c>)
   d45c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45ca:	a804      	add	r0, sp, #16
   d45cc:	f003 fee2 	bl	d8394 <snprintf>
   d45d0:	f003 fe20 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45d4:	b148      	cbz	r0, d45ea <_Z17setSampleInterval6String+0x52>
   d45d6:	2300      	movs	r3, #0
    publishQueue.publish("Interval", data, PRIVATE);
   d45d8:	f88d 3000 	strb.w	r3, [sp]
   d45dc:	4b0a      	ldr	r3, [pc, #40]	; (d4608 <_Z17setSampleInterval6String+0x70>)
   d45de:	490b      	ldr	r1, [pc, #44]	; (d460c <_Z17setSampleInterval6String+0x74>)
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	480b      	ldr	r0, [pc, #44]	; (d4610 <_Z17setSampleInterval6String+0x78>)
   d45e4:	aa04      	add	r2, sp, #16
   d45e6:	f7ff fe85 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
   d45ea:	4620      	mov	r0, r4
   d45ec:	e000      	b.n	d45f0 <_Z17setSampleInterval6String+0x58>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45ee:	2000      	movs	r0, #0
}
   d45f0:	b045      	add	sp, #276	; 0x114
   d45f2:	bd30      	pop	{r4, r5, pc}
   d45f4:	2003e388 	.word	0x2003e388
   d45f8:	2003e368 	.word	0x2003e368
   d45fc:	2003df25 	.word	0x2003df25
   d4600:	000dcbae 	.word	0x000dcbae
   d4604:	000dcb97 	.word	0x000dcb97
   d4608:	2003e254 	.word	0x2003e254
   d460c:	000dcdf0 	.word	0x000dcdf0
   d4610:	2003e308 	.word	0x2003e308

000d4614 <_Z9sendEventv>:
void sendEvent() {
   d4614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4618:	4b23      	ldr	r3, [pc, #140]	; (d46a8 <_Z9sendEventv+0x94>)
   d461a:	4c24      	ldr	r4, [pc, #144]	; (d46ac <_Z9sendEventv+0x98>)
   d461c:	689d      	ldr	r5, [r3, #8]
   d461e:	69a2      	ldr	r2, [r4, #24]
   d4620:	691b      	ldr	r3, [r3, #16]
void sendEvent() {
   d4622:	b0d3      	sub	sp, #332	; 0x14c
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4624:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4628:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d462c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4630:	9311      	str	r3, [sp, #68]	; 0x44
   d4632:	9210      	str	r2, [sp, #64]	; 0x40
   d4634:	f005 f9ef 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d4638:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d463c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d463e:	9308      	str	r3, [sp, #32]
   d4640:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d4644:	ed94 7b08 	vldr	d7, [r4, #32]
   d4648:	4b19      	ldr	r3, [pc, #100]	; (d46b0 <_Z9sendEventv+0x9c>)
   d464a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d464c:	900a      	str	r0, [sp, #40]	; 0x28
   d464e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d4652:	e9cd 5306 	strd	r5, r3, [sp, #24]
   d4656:	9209      	str	r2, [sp, #36]	; 0x24
   d4658:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d465c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4660:	e9cd 6700 	strd	r6, r7, [sp]
   d4664:	4a13      	ldr	r2, [pc, #76]	; (d46b4 <_Z9sendEventv+0xa0>)
   d4666:	f44f 7180 	mov.w	r1, #256	; 0x100
   d466a:	a812      	add	r0, sp, #72	; 0x48
   d466c:	f003 fe92 	bl	d8394 <snprintf>
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d4670:	2300      	movs	r3, #0
   d4672:	f88d 3000 	strb.w	r3, [sp]
   d4676:	4b10      	ldr	r3, [pc, #64]	; (d46b8 <_Z9sendEventv+0xa4>)
   d4678:	4910      	ldr	r1, [pc, #64]	; (d46bc <_Z9sendEventv+0xa8>)
   d467a:	781b      	ldrb	r3, [r3, #0]
   d467c:	4810      	ldr	r0, [pc, #64]	; (d46c0 <_Z9sendEventv+0xac>)
   d467e:	aa12      	add	r2, sp, #72	; 0x48
   d4680:	f7ff fe38 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4684:	4b0f      	ldr	r3, [pc, #60]	; (d46c4 <_Z9sendEventv+0xb0>)
   d4686:	2201      	movs	r2, #1
   d4688:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d468a:	f003 fb69 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d468e:	4b0e      	ldr	r3, [pc, #56]	; (d46c8 <_Z9sendEventv+0xb4>)
   d4690:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4692:	f005 f9d1 	bl	d9a38 <_ZN9TimeClass4hourEv>
   d4696:	4b0d      	ldr	r3, [pc, #52]	; (d46cc <_Z9sendEventv+0xb8>)
   d4698:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d469a:	f005 f9d9 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d469e:	4b0c      	ldr	r3, [pc, #48]	; (d46d0 <_Z9sendEventv+0xbc>)
   d46a0:	6018      	str	r0, [r3, #0]
}
   d46a2:	b053      	add	sp, #332	; 0x14c
   d46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d46a8:	2003e368 	.word	0x2003e368
   d46ac:	2003e280 	.word	0x2003e280
   d46b0:	2003e256 	.word	0x2003e256
   d46b4:	000dcbb9 	.word	0x000dcbb9
   d46b8:	2003e254 	.word	0x2003e254
   d46bc:	000dcc49 	.word	0x000dcc49
   d46c0:	2003e308 	.word	0x2003e308
   d46c4:	2003e2c6 	.word	0x2003e2c6
   d46c8:	2003e3c0 	.word	0x2003e3c0
   d46cc:	2003e2b4 	.word	0x2003e2b4
   d46d0:	2003e2b8 	.word	0x2003e2b8
   d46d4:	00000000 	.word	0x00000000

000d46d8 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d46d8:	b570      	push	{r4, r5, r6, lr}
   d46da:	ed2d 8b02 	vpush	{d8}
    _temp = ds18b20.getTemperature(addr);
   d46de:	4e1e      	ldr	r6, [pc, #120]	; (d4758 <_Z7getTempPh+0x80>)
double getTemp(uint8_t addr[8]) {
   d46e0:	b082      	sub	sp, #8
   d46e2:	4605      	mov	r5, r0
  int   i = 0;
   d46e4:	2400      	movs	r4, #0
    _temp = ds18b20.getTemperature(addr);
   d46e6:	2200      	movs	r2, #0
   d46e8:	4629      	mov	r1, r5
   d46ea:	4630      	mov	r0, r6
   d46ec:	f001 fed4 	bl	d6498 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46f0:	4630      	mov	r0, r6
    _temp = ds18b20.getTemperature(addr);
   d46f2:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46f6:	f001 ffad 	bl	d6654 <_ZN7DS18B208crcCheckEv>
   d46fa:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46fe:	b950      	cbnz	r0, d4716 <_Z7getTempPh+0x3e>
   d4700:	3401      	adds	r4, #1
   d4702:	2c04      	cmp	r4, #4
   d4704:	d1ef      	bne.n	d46e6 <_Z7getTempPh+0xe>
    Serial.println("Invalid reading");
   d4706:	f005 facb 	bl	d9ca0 <_Z16_fetch_usbserialv>
   d470a:	4914      	ldr	r1, [pc, #80]	; (d475c <_Z7getTempPh+0x84>)
   d470c:	f004 fcfd 	bl	d910a <_ZN5Print7printlnEPKc>
   d4710:	ed9f 8b0f 	vldr	d8, [pc, #60]	; d4750 <_Z7getTempPh+0x78>
  return _temp;
   d4714:	e013      	b.n	d473e <_Z7getTempPh+0x66>
  if (i < MAXRETRY) {
   d4716:	2c03      	cmp	r4, #3
   d4718:	d0f5      	beq.n	d4706 <_Z7getTempPh+0x2e>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d471a:	480f      	ldr	r0, [pc, #60]	; (d4758 <_Z7getTempPh+0x80>)
   d471c:	f001 ff80 	bl	d6620 <_ZN7DS18B2019convertToFahrenheitEf>
   d4720:	ee10 0a10 	vmov	r0, s0
   d4724:	f005 fdbe 	bl	da2a4 <__aeabi_f2d>
   d4728:	ec41 0b18 	vmov	d8, r0, r1
    Serial.println(_temp);
   d472c:	f005 fab8 	bl	d9ca0 <_Z16_fetch_usbserialv>
   d4730:	eeb0 0a48 	vmov.f32	s0, s16
   d4734:	eef0 0a68 	vmov.f32	s1, s17
   d4738:	2102      	movs	r1, #2
   d473a:	f004 fdd7 	bl	d92ec <_ZN5Print7printlnEdi>
}
   d473e:	eeb0 0a48 	vmov.f32	s0, s16
   d4742:	eef0 0a68 	vmov.f32	s1, s17
   d4746:	b002      	add	sp, #8
   d4748:	ecbd 8b02 	vpop	{d8}
   d474c:	bd70      	pop	{r4, r5, r6, pc}
   d474e:	bf00      	nop
   d4750:	00000000 	.word	0x00000000
   d4754:	7ff80000 	.word	0x7ff80000
   d4758:	2003e2c8 	.word	0x2003e2c8
   d475c:	000dcc64 	.word	0x000dcc64

000d4760 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4760:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4762:	4d19      	ldr	r5, [pc, #100]	; (d47c8 <_Z17getSignalStrengthv+0x68>)
   d4764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4766:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4768:	ac04      	add	r4, sp, #16
   d476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d476e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4770:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4774:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4778:	4914      	ldr	r1, [pc, #80]	; (d47cc <_Z17getSignalStrengthv+0x6c>)
   d477a:	a80e      	add	r0, sp, #56	; 0x38
   d477c:	f003 fea8 	bl	d84d0 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4780:	a80e      	add	r0, sp, #56	; 0x38
   d4782:	f003 fef8 	bl	d8576 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4786:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4788:	a80e      	add	r0, sp, #56	; 0x38
   d478a:	f003 fefd 	bl	d8588 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d478e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4790:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4794:	f003 ff28 	bl	d85e8 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4798:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d479a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d479e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d47a2:	f005 fd7f 	bl	da2a4 <__aeabi_f2d>
   d47a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47aa:	4628      	mov	r0, r5
   d47ac:	f005 fd7a 	bl	da2a4 <__aeabi_f2d>
   d47b0:	e9cd 0100 	strd	r0, r1, [sp]
   d47b4:	4a06      	ldr	r2, [pc, #24]	; (d47d0 <_Z17getSignalStrengthv+0x70>)
   d47b6:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d47ba:	4806      	ldr	r0, [pc, #24]	; (d47d4 <_Z17getSignalStrengthv+0x74>)
   d47bc:	2140      	movs	r1, #64	; 0x40
   d47be:	f003 fde9 	bl	d8394 <snprintf>
}
   d47c2:	b019      	add	sp, #100	; 0x64
   d47c4:	bd30      	pop	{r4, r5, pc}
   d47c6:	bf00      	nop
   d47c8:	000dcef0 	.word	0x000dcef0
   d47cc:	2003e5b4 	.word	0x2003e5b4
   d47d0:	000dcc74 	.word	0x000dcc74
   d47d4:	2003e204 	.word	0x2003e204

000d47d8 <_Z11petWatchdogv>:
{
   d47d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47da:	f7ff fd71 	bl	d42c0 <fastPinGetPinmap>
   d47de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d47e2:	015c      	lsls	r4, r3, #5
   d47e4:	f7ff fd6c 	bl	d42c0 <fastPinGetPinmap>
   d47e8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d47ec:	f003 031f 	and.w	r3, r3, #31
   d47f0:	4323      	orrs	r3, r4
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47f2:	a801      	add	r0, sp, #4
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	f7ff fc79 	bl	d40ec <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47fa:	9b01      	ldr	r3, [sp, #4]
   d47fc:	2401      	movs	r4, #1
   d47fe:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4802:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4806:	f7ff fd5b 	bl	d42c0 <fastPinGetPinmap>
   d480a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d480e:	015d      	lsls	r5, r3, #5
   d4810:	f7ff fd56 	bl	d42c0 <fastPinGetPinmap>
   d4814:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d4818:	f003 031f 	and.w	r3, r3, #31
   d481c:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d481e:	a801      	add	r0, sp, #4
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	f7ff fc63 	bl	d40ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4826:	9b01      	ldr	r3, [sp, #4]
   d4828:	409c      	lsls	r4, r3
  watchdogFlag = false;
   d482a:	4b03      	ldr	r3, [pc, #12]	; (d4838 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d482c:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d4830:	2200      	movs	r2, #0
   d4832:	701a      	strb	r2, [r3, #0]
}
   d4834:	b003      	add	sp, #12
   d4836:	bd30      	pop	{r4, r5, pc}
   d4838:	2003e3bc 	.word	0x2003e3bc

000d483c <_Z14setPowerConfigv>:
int setPowerConfig() {
   d483c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d483e:	2420      	movs	r4, #32
   d4840:	b090      	sub	sp, #64	; 0x40
   d4842:	4622      	mov	r2, r4
   d4844:	2100      	movs	r1, #0
   d4846:	4668      	mov	r0, sp
   d4848:	f006 fc80 	bl	db14c <memset>
   d484c:	4622      	mov	r2, r4
   d484e:	2100      	movs	r1, #0
   d4850:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4854:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4858:	f006 fc78 	bl	db14c <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d485c:	2100      	movs	r1, #0
   d485e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4862:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4866:	f003 fca1 	bl	d81ac <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d486a:	f241 0370 	movw	r3, #4208	; 0x1070
   d486e:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4872:	4b08      	ldr	r3, [pc, #32]	; (d4894 <_Z14setPowerConfigv+0x58>)
   d4874:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4876:	f241 0310 	movw	r3, #4112	; 0x1010
   d487a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d487e:	9b00      	ldr	r3, [sp, #0]
   d4880:	2100      	movs	r1, #0
   d4882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4886:	4668      	mov	r0, sp
   d4888:	9300      	str	r3, [sp, #0]
   d488a:	f003 fc8f 	bl	d81ac <system_power_management_set_config>
}
   d488e:	b010      	add	sp, #64	; 0x40
   d4890:	bd10      	pop	{r4, pc}
   d4892:	bf00      	nop
   d4894:	03840384 	.word	0x03840384

000d4898 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d489c:	481d      	ldr	r0, [pc, #116]	; (d4914 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d489e:	f8df a080 	ldr.w	sl, [pc, #128]	; d4920 <_Z17connectToParticlev+0x88>
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	2300      	movs	r3, #0
   d48a6:	461a      	mov	r2, r3
   d48a8:	4619      	mov	r1, r3
   d48aa:	f003 fd1b 	bl	d82e4 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d48ae:	f003 fca9 	bl	d8204 <spark_cloud_flag_connect>
   d48b2:	f44f 7496 	mov.w	r4, #300	; 0x12c
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48b6:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d48ba:	f240 38e7 	movw	r8, #999	; 0x3e7
   d48be:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d48c2:	f7ff fce2 	bl	d428a <_ZN11SystemClass6millisEv>
   d48c6:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48c8:	f7ff fcdf 	bl	d428a <_ZN11SystemClass6millisEv>
   d48cc:	1b46      	subs	r6, r0, r5
   d48ce:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d48d2:	45b9      	cmp	r9, r7
   d48d4:	bf08      	it	eq
   d48d6:	45b0      	cmpeq	r8, r6
   d48d8:	d305      	bcc.n	d48e6 <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48da:	f003 fc9b 	bl	d8214 <spark_cloud_flag_connected>
   d48de:	b910      	cbnz	r0, d48e6 <_Z17connectToParticlev+0x4e>
            spark_process();
   d48e0:	f003 fc88 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d48e4:	e7f0      	b.n	d48c8 <_Z17connectToParticlev+0x30>
   d48e6:	f003 fc95 	bl	d8214 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48ea:	b120      	cbz	r0, d48f6 <_Z17connectToParticlev+0x5e>
   d48ec:	f003 fc92 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d48f0:	b950      	cbnz	r0, d4908 <_Z17connectToParticlev+0x70>
}
   d48f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d48f6:	f003 fa33 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d48fa:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48fe:	f003 fc79 	bl	d81f4 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4902:	3c01      	subs	r4, #1
   d4904:	d1dd      	bne.n	d48c2 <_Z17connectToParticlev+0x2a>
   d4906:	e7f1      	b.n	d48ec <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
   d4908:	4a03      	ldr	r2, [pc, #12]	; (d4918 <_Z17connectToParticlev+0x80>)
   d490a:	2301      	movs	r3, #1
   d490c:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d490e:	4a03      	ldr	r2, [pc, #12]	; (d491c <_Z17connectToParticlev+0x84>)
   d4910:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4912:	e7ee      	b.n	d48f2 <_Z17connectToParticlev+0x5a>
   d4914:	2003e5b4 	.word	0x2003e5b4
   d4918:	2003e368 	.word	0x2003e368
   d491c:	2003e388 	.word	0x2003e388
   d4920:	2003e7a0 	.word	0x2003e7a0

000d4924 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4924:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4926:	f003 fc75 	bl	d8214 <spark_cloud_flag_connected>
  return !Particle.connected();
   d492a:	f080 0001 	eor.w	r0, r0, #1
}
   d492e:	b2c0      	uxtb	r0, r0
   d4930:	bd08      	pop	{r3, pc}
	...

000d4934 <_Z22disconnectFromParticlev>:
{
   d4934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4938:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d493a:	2600      	movs	r6, #0
  Particle.disconnect();
   d493c:	a801      	add	r0, sp, #4
   d493e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d4942:	f88d 600c 	strb.w	r6, [sp, #12]
   d4946:	f003 ff20 	bl	d878a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d494a:	f7ff fc9e 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d494e:	46b1      	mov	r9, r6
        const system_tick_t start = millis();
   d4950:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4952:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4956:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4958:	f7ff fc97 	bl	d428a <_ZN11SystemClass6millisEv>
   d495c:	ebb0 0408 	subs.w	r4, r0, r8
   d4960:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4964:	42af      	cmp	r7, r5
   d4966:	bf08      	it	eq
   d4968:	42a6      	cmpeq	r6, r4
   d496a:	d305      	bcc.n	d4978 <_Z22disconnectFromParticlev+0x44>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d496c:	f7ff ffda 	bl	d4924 <_Z12notConnectedv>
   d4970:	b910      	cbnz	r0, d4978 <_Z22disconnectFromParticlev+0x44>
            spark_process();
   d4972:	f003 fc3f 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d4976:	e7ef      	b.n	d4958 <_Z22disconnectFromParticlev+0x24>
   d4978:	f7ff ffd4 	bl	d4924 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d497c:	480a      	ldr	r0, [pc, #40]	; (d49a8 <_Z22disconnectFromParticlev+0x74>)
   d497e:	2300      	movs	r3, #0
   d4980:	4619      	mov	r1, r3
   d4982:	461a      	mov	r2, r3
   d4984:	6840      	ldr	r0, [r0, #4]
   d4986:	f003 fcb5 	bl	d82f4 <network_off>
  sysStatus.connectedStatus = false;
   d498a:	4b08      	ldr	r3, [pc, #32]	; (d49ac <_Z22disconnectFromParticlev+0x78>)
   d498c:	2200      	movs	r2, #0
   d498e:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4990:	4b07      	ldr	r3, [pc, #28]	; (d49b0 <_Z22disconnectFromParticlev+0x7c>)
   d4992:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d4998:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d499a:	f003 fd2b 	bl	d83f4 <delay>
}
   d499e:	4620      	mov	r0, r4
   d49a0:	b005      	add	sp, #20
   d49a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d49a6:	bf00      	nop
   d49a8:	2003e5b4 	.word	0x2003e5b4
   d49ac:	2003e368 	.word	0x2003e368
   d49b0:	2003e388 	.word	0x2003e388

000d49b4 <_Z22publishStateTransitionv>:
{
   d49b4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49b6:	4d13      	ldr	r5, [pc, #76]	; (d4a04 <_Z22publishStateTransitionv+0x50>)
   d49b8:	4c13      	ldr	r4, [pc, #76]	; (d4a08 <_Z22publishStateTransitionv+0x54>)
   d49ba:	4914      	ldr	r1, [pc, #80]	; (d4a0c <_Z22publishStateTransitionv+0x58>)
   d49bc:	782a      	ldrb	r2, [r5, #0]
   d49be:	7820      	ldrb	r0, [r4, #0]
{
   d49c0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49c2:	230e      	movs	r3, #14
   d49c4:	fb03 1202 	mla	r2, r3, r2, r1
   d49c8:	9200      	str	r2, [sp, #0]
   d49ca:	fb03 1300 	mla	r3, r3, r0, r1
   d49ce:	4a10      	ldr	r2, [pc, #64]	; (d4a10 <_Z22publishStateTransitionv+0x5c>)
   d49d0:	2128      	movs	r1, #40	; 0x28
   d49d2:	a802      	add	r0, sp, #8
   d49d4:	f003 fcde 	bl	d8394 <snprintf>
  oldState = state;
   d49d8:	782b      	ldrb	r3, [r5, #0]
   d49da:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49dc:	f003 fc1a 	bl	d8214 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49e0:	b148      	cbz	r0, d49f6 <_Z22publishStateTransitionv+0x42>
   d49e2:	2300      	movs	r3, #0
   d49e4:	f88d 3000 	strb.w	r3, [sp]
   d49e8:	4b0a      	ldr	r3, [pc, #40]	; (d4a14 <_Z22publishStateTransitionv+0x60>)
   d49ea:	490b      	ldr	r1, [pc, #44]	; (d4a18 <_Z22publishStateTransitionv+0x64>)
   d49ec:	781b      	ldrb	r3, [r3, #0]
   d49ee:	480b      	ldr	r0, [pc, #44]	; (d4a1c <_Z22publishStateTransitionv+0x68>)
   d49f0:	aa02      	add	r2, sp, #8
   d49f2:	f7ff fc7f 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49f6:	f005 f953 	bl	d9ca0 <_Z16_fetch_usbserialv>
   d49fa:	a902      	add	r1, sp, #8
   d49fc:	f004 fb85 	bl	d910a <_ZN5Print7printlnEPKc>
}
   d4a00:	b00d      	add	sp, #52	; 0x34
   d4a02:	bd30      	pop	{r4, r5, pc}
   d4a04:	2003e364 	.word	0x2003e364
   d4a08:	2003e304 	.word	0x2003e304
   d4a0c:	2003df31 	.word	0x2003df31
   d4a10:	000dcc8d 	.word	0x000dcc8d
   d4a14:	2003e254 	.word	0x2003e254
   d4a18:	000dcc9b 	.word	0x000dcc9b
   d4a1c:	2003e308 	.word	0x2003e308

000d4a20 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a24:	4b17      	ldr	r3, [pc, #92]	; (d4a84 <_Z12dailyCleanupv+0x64>)
  sysStatus.verboseMode = false;
   d4a26:	4d18      	ldr	r5, [pc, #96]	; (d4a88 <_Z12dailyCleanupv+0x68>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a28:	4a18      	ldr	r2, [pc, #96]	; (d4a8c <_Z12dailyCleanupv+0x6c>)
   d4a2a:	4919      	ldr	r1, [pc, #100]	; (d4a90 <_Z12dailyCleanupv+0x70>)
   d4a2c:	4819      	ldr	r0, [pc, #100]	; (d4a94 <_Z12dailyCleanupv+0x74>)
   d4a2e:	2400      	movs	r4, #0
   d4a30:	f88d 4000 	strb.w	r4, [sp]
   d4a34:	781b      	ldrb	r3, [r3, #0]
   d4a36:	f7ff fc5d 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a3a:	712c      	strb	r4, [r5, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a3c:	f7ff fbba 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d4a40:	f7ff fc23 	bl	d428a <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d4a44:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d4a48:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d4a4a:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a4e:	f7ff fc1c 	bl	d428a <_ZN11SystemClass6millisEv>
   d4a52:	ebb0 060a 	subs.w	r6, r0, sl
   d4a56:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4a5a:	45b9      	cmp	r9, r7
   d4a5c:	bf08      	it	eq
   d4a5e:	45b0      	cmpeq	r8, r6
   d4a60:	d305      	bcc.n	d4a6e <_Z12dailyCleanupv+0x4e>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a62:	f7ff fbb1 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4a66:	b910      	cbnz	r0, d4a6e <_Z12dailyCleanupv+0x4e>
            spark_process();
   d4a68:	f003 fbc4 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d4a6c:	e7ef      	b.n	d4a4e <_Z12dailyCleanupv+0x2e>
   d4a6e:	f7ff fbab 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  sysStatus.resetCount = 0;
   d4a72:	2300      	movs	r3, #0
   d4a74:	612b      	str	r3, [r5, #16]
  systemStatusWriteNeeded=true;
   d4a76:	4b08      	ldr	r3, [pc, #32]	; (d4a98 <_Z12dailyCleanupv+0x78>)
   d4a78:	2201      	movs	r2, #1
   d4a7a:	701a      	strb	r2, [r3, #0]
}
   d4a7c:	b002      	add	sp, #8
   d4a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a82:	bf00      	nop
   d4a84:	2003e254 	.word	0x2003e254
   d4a88:	2003e368 	.word	0x2003e368
   d4a8c:	000dccac 	.word	0x000dccac
   d4a90:	000dccb4 	.word	0x000dccb4
   d4a94:	2003e308 	.word	0x2003e308
   d4a98:	2003e388 	.word	0x2003e388

000d4a9c <_Z8isDSTusav>:

bool isDSTusa() {
   d4a9c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4a9e:	f004 ffe3 	bl	d9a68 <_ZN9TimeClass3dayEv>
   d4aa2:	4605      	mov	r5, r0
  int month = Time.month();
   d4aa4:	f004 fff4 	bl	d9a90 <_ZN9TimeClass5monthEv>
   d4aa8:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4aaa:	f004 ffe9 	bl	d9a80 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4aae:	1f23      	subs	r3, r4, #4
   d4ab0:	2b06      	cmp	r3, #6
   d4ab2:	d90e      	bls.n	d4ad2 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4ab4:	1ee3      	subs	r3, r4, #3
   d4ab6:	2b08      	cmp	r3, #8
   d4ab8:	d80d      	bhi.n	d4ad6 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4aba:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4abc:	1a2d      	subs	r5, r5, r0
   d4abe:	d504      	bpl.n	d4aca <_Z8isDSTusav+0x2e>
   d4ac0:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ac2:	bf14      	ite	ne
   d4ac4:	2000      	movne	r0, #0
   d4ac6:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4ac8:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4aca:	2d07      	cmp	r5, #7
   d4acc:	dd03      	ble.n	d4ad6 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ace:	2c03      	cmp	r4, #3
   d4ad0:	e7f7      	b.n	d4ac2 <_Z8isDSTusav+0x26>
    return true;
   d4ad2:	2001      	movs	r0, #1
   d4ad4:	e7f8      	b.n	d4ac8 <_Z8isDSTusav+0x2c>
    return false;
   d4ad6:	2000      	movs	r0, #0
   d4ad8:	e7f6      	b.n	d4ac8 <_Z8isDSTusav+0x2c>
   d4ada:	0000      	movs	r0, r0
   d4adc:	0000      	movs	r0, r0
	...

000d4ae0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4ae0:	b570      	push	{r4, r5, r6, lr}
   d4ae2:	ed2d 8b02 	vpush	{d8}
   d4ae6:	b0c8      	sub	sp, #288	; 0x120
   d4ae8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d4aea:	f004 ff94 	bl	d9a16 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4aee:	220a      	movs	r2, #10
  time_t t = Time.now();
   d4af0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4af2:	a903      	add	r1, sp, #12
   d4af4:	6828      	ldr	r0, [r5, #0]
   d4af6:	f007 fc07 	bl	dc308 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4afa:	b2c3      	uxtb	r3, r0
   d4afc:	2b02      	cmp	r3, #2
   d4afe:	d859      	bhi.n	d4bb4 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b00:	b243      	sxtb	r3, r0
   d4b02:	ee08 3a10 	vmov	s16, r3
   d4b06:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4b0a:	eeb0 0a48 	vmov.f32	s0, s16
   d4b0e:	f004 fe39 	bl	d9784 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b12:	4b2d      	ldr	r3, [pc, #180]	; (d4bc8 <_Z12setDSTOffset6String+0xe8>)
   d4b14:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b18:	4b2c      	ldr	r3, [pc, #176]	; (d4bcc <_Z12setDSTOffset6String+0xec>)
   d4b1a:	2201      	movs	r2, #1
   d4b1c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b1e:	ee18 0a10 	vmov	r0, s16
   d4b22:	f005 fbbf 	bl	da2a4 <__aeabi_f2d>
   d4b26:	4a2a      	ldr	r2, [pc, #168]	; (d4bd0 <_Z12setDSTOffset6String+0xf0>)
   d4b28:	e9cd 0100 	strd	r0, r1, [sp]
   d4b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b30:	a808      	add	r0, sp, #32
   d4b32:	f003 fc2f 	bl	d8394 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b36:	f004 ff51 	bl	d99dc <_ZN9TimeClass7isValidEv>
   d4b3a:	b128      	cbz	r0, d4b48 <_Z12setDSTOffset6String+0x68>
   d4b3c:	f7ff ffae 	bl	d4a9c <_Z8isDSTusav>
   d4b40:	2800      	cmp	r0, #0
   d4b42:	d034      	beq.n	d4bae <_Z12setDSTOffset6String+0xce>
   d4b44:	f004 fe3c 	bl	d97c0 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b48:	f004 ffb6 	bl	d9ab8 <_ZN9TimeClass5localEv>
   d4b4c:	4605      	mov	r5, r0
   d4b4e:	f004 ff62 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d4b52:	1a28      	subs	r0, r5, r0
   d4b54:	f005 fb94 	bl	da280 <__aeabi_i2d>
   d4b58:	a319      	add	r3, pc, #100	; (adr r3, d4bc0 <_Z12setDSTOffset6String+0xe0>)
   d4b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b5e:	f005 fd23 	bl	da5a8 <__aeabi_ddiv>
   d4b62:	4a1c      	ldr	r2, [pc, #112]	; (d4bd4 <_Z12setDSTOffset6String+0xf4>)
   d4b64:	e9cd 0100 	strd	r0, r1, [sp]
   d4b68:	210a      	movs	r1, #10
   d4b6a:	481b      	ldr	r0, [pc, #108]	; (d4bd8 <_Z12setDSTOffset6String+0xf8>)
   d4b6c:	f003 fc12 	bl	d8394 <snprintf>
   d4b70:	f003 fb50 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b74:	b1c8      	cbz	r0, d4baa <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d4b76:	4d19      	ldr	r5, [pc, #100]	; (d4bdc <_Z12setDSTOffset6String+0xfc>)
   d4b78:	4919      	ldr	r1, [pc, #100]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
   d4b7a:	481a      	ldr	r0, [pc, #104]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
   d4b7c:	2600      	movs	r6, #0
   d4b7e:	f88d 6000 	strb.w	r6, [sp]
   d4b82:	782b      	ldrb	r3, [r5, #0]
   d4b84:	aa08      	add	r2, sp, #32
   d4b86:	f7ff fbb5 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4b8a:	4622      	mov	r2, r4
   d4b8c:	17e3      	asrs	r3, r4, #31
   d4b8e:	a804      	add	r0, sp, #16
   d4b90:	f004 fe3e 	bl	d9810 <_ZN9TimeClass7timeStrEx>
   d4b94:	f88d 6000 	strb.w	r6, [sp]
   d4b98:	782b      	ldrb	r3, [r5, #0]
   d4b9a:	9a04      	ldr	r2, [sp, #16]
   d4b9c:	4910      	ldr	r1, [pc, #64]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
   d4b9e:	4811      	ldr	r0, [pc, #68]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
   d4ba0:	f7ff fba8 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4ba4:	a804      	add	r0, sp, #16
   d4ba6:	f004 fca1 	bl	d94ec <_ZN6StringD1Ev>
  return 1;
   d4baa:	2001      	movs	r0, #1
   d4bac:	e003      	b.n	d4bb6 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4bae:	f004 fe13 	bl	d97d8 <_ZN9TimeClass6endDSTEv>
   d4bb2:	e7c9      	b.n	d4b48 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bb4:	2000      	movs	r0, #0
}
   d4bb6:	b048      	add	sp, #288	; 0x120
   d4bb8:	ecbd 8b02 	vpop	{d8}
   d4bbc:	bd70      	pop	{r4, r5, r6, pc}
   d4bbe:	bf00      	nop
   d4bc0:	00000000 	.word	0x00000000
   d4bc4:	40ac2000 	.word	0x40ac2000
   d4bc8:	2003e368 	.word	0x2003e368
   d4bcc:	2003e388 	.word	0x2003e388
   d4bd0:	000dccc2 	.word	0x000dccc2
   d4bd4:	000dcb74 	.word	0x000dcb74
   d4bd8:	2003e2bc 	.word	0x2003e2bc
   d4bdc:	2003e254 	.word	0x2003e254
   d4be0:	000dcb92 	.word	0x000dcb92
   d4be4:	2003e308 	.word	0x2003e308

000d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4be8:	b530      	push	{r4, r5, lr}
   d4bea:	b085      	sub	sp, #20
   d4bec:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4bee:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4bf0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4bf2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4bf4:	f003 fa7c 	bl	d80f0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4bf8:	b9b0      	cbnz	r0, d4c28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4bfa:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4bfc:	b10c      	cbz	r4, d4c02 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4bfe:	6923      	ldr	r3, [r4, #16]
   d4c00:	b923      	cbnz	r3, d4c0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4c02:	4a0a      	ldr	r2, [pc, #40]	; (d4c2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4c04:	2100      	movs	r1, #0
   d4c06:	200a      	movs	r0, #10
   d4c08:	f003 fa62 	bl	d80d0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4c0c:	2300      	movs	r3, #0
   d4c0e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4c12:	230c      	movs	r3, #12
   d4c14:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4c18:	2304      	movs	r3, #4
   d4c1a:	9303      	str	r3, [sp, #12]
   d4c1c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4c1e:	6923      	ldr	r3, [r4, #16]
   d4c20:	aa01      	add	r2, sp, #4
   d4c22:	2101      	movs	r1, #1
   d4c24:	4620      	mov	r0, r4
   d4c26:	4798      	blx	r3
}
   d4c28:	b005      	add	sp, #20
   d4c2a:	bd30      	pop	{r4, r5, pc}
   d4c2c:	000d7d51 	.word	0x000d7d51

000d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>:
            return r;
        }
        return val;
    }

    int batteryState() const {
   d4c30:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4c32:	2007      	movs	r0, #7
   d4c34:	a901      	add	r1, sp, #4
   d4c36:	f7ff ffd7 	bl	d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4c3a:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4c3c:	bfa8      	it	ge
   d4c3e:	9801      	ldrge	r0, [sp, #4]
    }
   d4c40:	b003      	add	sp, #12
   d4c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c48 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c4a:	b089      	sub	sp, #36	; 0x24
   d4c4c:	a901      	add	r1, sp, #4
   d4c4e:	2003      	movs	r0, #3
   d4c50:	f7ff ffca 	bl	d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4c54:	2800      	cmp	r0, #0
   d4c56:	d139      	bne.n	d4ccc <_Z17getBatteryContextv+0x84>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4c58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4c5c:	ee07 3a90 	vmov	s15, r3
   d4c60:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c64:	4d23      	ldr	r5, [pc, #140]	; (d4cf4 <_Z17getBatteryContextv+0xac>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c66:	4e24      	ldr	r6, [pc, #144]	; (d4cf8 <_Z17getBatteryContextv+0xb0>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c6a:	ac01      	add	r4, sp, #4
   d4c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c7a:	edc6 7a02 	vstr	s15, [r6, #8]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c7e:	f7ff ffd7 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4c82:	ab08      	add	r3, sp, #32
   d4c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c88:	4d1c      	ldr	r5, [pc, #112]	; (d4cfc <_Z17getBatteryContextv+0xb4>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c8a:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4c8e:	4a1c      	ldr	r2, [pc, #112]	; (d4d00 <_Z17getBatteryContextv+0xb8>)
   d4c90:	481c      	ldr	r0, [pc, #112]	; (d4d04 <_Z17getBatteryContextv+0xbc>)
   d4c92:	2110      	movs	r1, #16
   d4c94:	f003 fb7e 	bl	d8394 <snprintf>
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c98:	782b      	ldrb	r3, [r5, #0]
   d4c9a:	4634      	mov	r4, r6
   d4c9c:	462f      	mov	r7, r5
   d4c9e:	4e1a      	ldr	r6, [pc, #104]	; (d4d08 <_Z17getBatteryContextv+0xc0>)
   d4ca0:	b9bb      	cbnz	r3, d4cd2 <_Z17getBatteryContextv+0x8a>
   d4ca2:	f7ff ffc5 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4ca6:	2804      	cmp	r0, #4
   d4ca8:	d113      	bne.n	d4cd2 <_Z17getBatteryContextv+0x8a>
    alreadyOnBattery = true;
   d4caa:	2301      	movs	r3, #1
   d4cac:	702b      	strb	r3, [r5, #0]
   d4cae:	f003 f857 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4cb2:	6833      	ldr	r3, [r6, #0]
   d4cb4:	1ac0      	subs	r0, r0, r3
   d4cb6:	4b15      	ldr	r3, [pc, #84]	; (d4d0c <_Z17getBatteryContextv+0xc4>)
   d4cb8:	4298      	cmp	r0, r3
   d4cba:	d819      	bhi.n	d4cf0 <_Z17getBatteryContextv+0xa8>
   d4cbc:	68a3      	ldr	r3, [r4, #8]
    sysStatus.lowBatteryMode = true;
   d4cbe:	2b32      	cmp	r3, #50	; 0x32
   d4cc0:	bfcc      	ite	gt
   d4cc2:	2300      	movgt	r3, #0
   d4cc4:	2301      	movle	r3, #1
   d4cc6:	7163      	strb	r3, [r4, #5]
}
   d4cc8:	b009      	add	sp, #36	; 0x24
   d4cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   d4ccc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4cd0:	e7c8      	b.n	d4c64 <_Z17getBatteryContextv+0x1c>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4cd2:	f7ff ffad 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4cd6:	2802      	cmp	r0, #2
   d4cd8:	d105      	bne.n	d4ce6 <_Z17getBatteryContextv+0x9e>
    alreadyOnBattery = false;
   d4cda:	2300      	movs	r3, #0
   d4cdc:	703b      	strb	r3, [r7, #0]
   d4cde:	f003 f83f 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
    lastTimePowered = millis();
   d4ce2:	6030      	str	r0, [r6, #0]
   d4ce4:	e7e3      	b.n	d4cae <_Z17getBatteryContextv+0x66>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4ce6:	f7ff ffa3 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4cea:	2803      	cmp	r0, #3
   d4cec:	d1df      	bne.n	d4cae <_Z17getBatteryContextv+0x66>
   d4cee:	e7f4      	b.n	d4cda <_Z17getBatteryContextv+0x92>
    sysStatus.lowBatteryMode = true;
   d4cf0:	2301      	movs	r3, #1
   d4cf2:	e7e8      	b.n	d4cc6 <_Z17getBatteryContextv+0x7e>
   d4cf4:	000dcf18 	.word	0x000dcf18
   d4cf8:	2003e368 	.word	0x2003e368
   d4cfc:	2003e255 	.word	0x2003e255
   d4d00:	000dd120 	.word	0x000dd120
   d4d04:	2003e256 	.word	0x2003e256
   d4d08:	2003e300 	.word	0x2003e300
   d4d0c:	00dbba00 	.word	0x00dbba00

000d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d10:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4d12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4d14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4d16:	b17c      	cbz	r4, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4d18:	6863      	ldr	r3, [r4, #4]
   d4d1a:	3b01      	subs	r3, #1
   d4d1c:	6063      	str	r3, [r4, #4]
   d4d1e:	b95b      	cbnz	r3, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4d20:	6823      	ldr	r3, [r4, #0]
   d4d22:	4620      	mov	r0, r4
   d4d24:	689b      	ldr	r3, [r3, #8]
   d4d26:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d28:	68a3      	ldr	r3, [r4, #8]
   d4d2a:	3b01      	subs	r3, #1
   d4d2c:	60a3      	str	r3, [r4, #8]
   d4d2e:	b91b      	cbnz	r3, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d30:	6823      	ldr	r3, [r4, #0]
   d4d32:	4620      	mov	r0, r4
   d4d34:	68db      	ldr	r3, [r3, #12]
   d4d36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4d38:	4628      	mov	r0, r5
   d4d3a:	bd38      	pop	{r3, r4, r5, pc}

000d4d3c <_Z11displayInfov>:

void displayInfo()
{
   d4d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d40:	4c60      	ldr	r4, [pc, #384]	; (d4ec4 <_Z11displayInfov+0x188>)
{
   d4d42:	b0ab      	sub	sp, #172	; 0xac
   d4d44:	f003 f80c 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d48:	6823      	ldr	r3, [r4, #0]
   d4d4a:	1ac0      	subs	r0, r0, r3
   d4d4c:	f241 3387 	movw	r3, #4999	; 0x1387
   d4d50:	4298      	cmp	r0, r3
   d4d52:	f240 80b4 	bls.w	d4ebe <_Z11displayInfov+0x182>
   d4d56:	f003 f803 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4d5a:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (t.gpsFix()) {
   d4d5c:	4c5a      	ldr	r4, [pc, #360]	; (d4ec8 <_Z11displayInfov+0x18c>)
        os_thread_scheduling(false, NULL);
   d4d5e:	2100      	movs	r1, #0
   d4d60:	6865      	ldr	r5, [r4, #4]
   d4d62:	4608      	mov	r0, r1
   d4d64:	f002 ff9c 	bl	d7ca0 <os_thread_scheduling>
   d4d68:	f895 8000 	ldrb.w	r8, [r5]
   d4d6c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
        os_thread_scheduling(true, NULL);
   d4d6e:	4d57      	ldr	r5, [pc, #348]	; (d4ecc <_Z11displayInfov+0x190>)
   d4d70:	2100      	movs	r1, #0
   d4d72:	2001      	movs	r0, #1
   d4d74:	f002 ff94 	bl	d7ca0 <os_thread_scheduling>
	bool isValid() const    { return valid; }
   d4d78:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4d7a:	f1b8 0f00 	cmp.w	r8, #0
   d4d7e:	d112      	bne.n	d4da6 <_Z11displayInfov+0x6a>
				unsigned long elapsed = millis() - startFix;
				Log.info("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d80:	6878      	ldr	r0, [r7, #4]
   d4d82:	f7ff fa32 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4d86:	4a52      	ldr	r2, [pc, #328]	; (d4ed0 <_Z11displayInfov+0x194>)
   d4d88:	4603      	mov	r3, r0
   d4d8a:	2180      	movs	r1, #128	; 0x80
   d4d8c:	a80a      	add	r0, sp, #40	; 0x28
   d4d8e:	f003 fb01 	bl	d8394 <snprintf>
			if (!gettingFix) {
   d4d92:	782b      	ldrb	r3, [r5, #0]
   d4d94:	2b00      	cmp	r3, #0
   d4d96:	d173      	bne.n	d4e80 <_Z11displayInfov+0x144>
				gettingFix = true;
   d4d98:	2301      	movs	r3, #1
   d4d9a:	702b      	strb	r3, [r5, #0]
   d4d9c:	f002 ffe0 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4da0:	4b4c      	ldr	r3, [pc, #304]	; (d4ed4 <_Z11displayInfov+0x198>)
   d4da2:	6018      	str	r0, [r3, #0]
   d4da4:	e06c      	b.n	d4e80 <_Z11displayInfov+0x144>
   d4da6:	f002 ffdb 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   d4daa:	f242 730f 	movw	r3, #9999	; 0x270f
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4dae:	1b80      	subs	r0, r0, r6
   d4db0:	4298      	cmp	r0, r3
   d4db2:	d8e5      	bhi.n	d4d80 <_Z11displayInfov+0x44>
      current.latitude = t.readLatDeg();
   d4db4:	6860      	ldr	r0, [r4, #4]
   d4db6:	4e48      	ldr	r6, [pc, #288]	; (d4ed8 <_Z11displayInfov+0x19c>)
   d4db8:	f7ff fa25 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4dbc:	ee10 0a10 	vmov	r0, s0
   d4dc0:	f005 fa70 	bl	da2a4 <__aeabi_f2d>
   d4dc4:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4dc8:	6860      	ldr	r0, [r4, #4]
   d4dca:	f7ff fa3d 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
   d4dce:	ee10 0a10 	vmov	r0, s0
   d4dd2:	f005 fa67 	bl	da2a4 <__aeabi_f2d>
   d4dd6:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4dda:	6860      	ldr	r0, [r4, #4]
   d4ddc:	f7ff fa13 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4de0:	6860      	ldr	r0, [r4, #4]
   d4de2:	ee10 6a10 	vmov	r6, s0
   d4de6:	f7ff fa2f 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
        os_thread_scheduling(false, NULL);
   d4dea:	2100      	movs	r1, #0
   d4dec:	f8d4 8004 	ldr.w	r8, [r4, #4]
   d4df0:	4608      	mov	r0, r1
   d4df2:	ee10 7a10 	vmov	r7, s0
   d4df6:	f002 ff53 	bl	d7ca0 <os_thread_scheduling>
        os_thread_scheduling(true, NULL);
   d4dfa:	2100      	movs	r1, #0
   d4dfc:	2001      	movs	r0, #1
	    	return altitude;
   d4dfe:	f8d8 9080 	ldr.w	r9, [r8, #128]	; 0x80
   d4e02:	f002 ff4d 	bl	d7ca0 <os_thread_scheduling>
   d4e06:	6860      	ldr	r0, [r4, #4]
   d4e08:	f7ff f9ef 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4e0c:	4680      	mov	r8, r0
   d4e0e:	4620      	mov	r0, r4
   d4e10:	f000 fefa 	bl	d5c08 <_ZN12AssetTracker14getTinyGPSPlusEv>
        os_thread_scheduling(false, NULL);
   d4e14:	2100      	movs	r1, #0
   d4e16:	4604      	mov	r4, r0
   d4e18:	4608      	mov	r0, r1
   d4e1a:	f002 ff41 	bl	d7ca0 <os_thread_scheduling>
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4e1e:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
        os_thread_scheduling(true, NULL);
   d4e22:	2100      	movs	r1, #0
   d4e24:	2001      	movs	r0, #1
   d4e26:	f002 ff3b 	bl	d7ca0 <os_thread_scheduling>
	double meters()       { return value() / 100.0; }
   d4e2a:	4648      	mov	r0, r9
   d4e2c:	e9cd 8406 	strd	r8, r4, [sp, #24]
   d4e30:	f005 fa26 	bl	da280 <__aeabi_i2d>
   d4e34:	4b29      	ldr	r3, [pc, #164]	; (d4edc <_Z11displayInfov+0x1a0>)
   d4e36:	2200      	movs	r2, #0
   d4e38:	f005 fbb6 	bl	da5a8 <__aeabi_ddiv>
		return gpsData.getAltitude().meters();
   d4e3c:	f005 fd82 	bl	da944 <__aeabi_d2f>
   d4e40:	f005 fa30 	bl	da2a4 <__aeabi_f2d>
   d4e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4e48:	4638      	mov	r0, r7
   d4e4a:	f005 fa2b 	bl	da2a4 <__aeabi_f2d>
   d4e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4e52:	4630      	mov	r0, r6
   d4e54:	f005 fa26 	bl	da2a4 <__aeabi_f2d>
   d4e58:	4a21      	ldr	r2, [pc, #132]	; (d4ee0 <_Z11displayInfov+0x1a4>)
   d4e5a:	e9cd 0100 	strd	r0, r1, [sp]
   d4e5e:	2180      	movs	r1, #128	; 0x80
   d4e60:	a80a      	add	r0, sp, #40	; 0x28
   d4e62:	f003 fa97 	bl	d8394 <snprintf>
			if (gettingFix) {
   d4e66:	782b      	ldrb	r3, [r5, #0]
   d4e68:	b153      	cbz	r3, d4e80 <_Z11displayInfov+0x144>
				gettingFix = false;
   d4e6a:	2300      	movs	r3, #0
   d4e6c:	702b      	strb	r3, [r5, #0]
   d4e6e:	f002 ff77 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4e72:	4b18      	ldr	r3, [pc, #96]	; (d4ed4 <_Z11displayInfov+0x198>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e74:	491b      	ldr	r1, [pc, #108]	; (d4ee4 <_Z11displayInfov+0x1a8>)
				unsigned long elapsed = millis() - startFix;
   d4e76:	681a      	ldr	r2, [r3, #0]
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e78:	1a82      	subs	r2, r0, r2
   d4e7a:	481b      	ldr	r0, [pc, #108]	; (d4ee8 <_Z11displayInfov+0x1ac>)
   d4e7c:	f7ff fa08 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			}
		}
		Log.info(buf);
   d4e80:	4819      	ldr	r0, [pc, #100]	; (d4ee8 <_Z11displayInfov+0x1ac>)
   d4e82:	a90a      	add	r1, sp, #40	; 0x28
   d4e84:	f7ff fa04 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d4e88:	f003 f9c4 	bl	d8214 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4e8c:	b1b8      	cbz	r0, d4ebe <_Z11displayInfov+0x182>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4e8e:	4c17      	ldr	r4, [pc, #92]	; (d4eec <_Z11displayInfov+0x1b0>)
   d4e90:	f002 ff66 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   d4e94:	6823      	ldr	r3, [r4, #0]
   d4e96:	1ac0      	subs	r0, r0, r3
   d4e98:	4b15      	ldr	r3, [pc, #84]	; (d4ef0 <_Z11displayInfov+0x1b4>)
   d4e9a:	4298      	cmp	r0, r3
   d4e9c:	d90f      	bls.n	d4ebe <_Z11displayInfov+0x182>
   d4e9e:	f002 ff5f 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   d4ea2:	4b14      	ldr	r3, [pc, #80]	; (d4ef4 <_Z11displayInfov+0x1b8>)
				lastPublish = millis();
   d4ea4:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4ea6:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ea8:	f88d 3000 	strb.w	r3, [sp]
   d4eac:	a808      	add	r0, sp, #32
   d4eae:	4912      	ldr	r1, [pc, #72]	; (d4ef8 <_Z11displayInfov+0x1bc>)
   d4eb0:	233c      	movs	r3, #60	; 0x3c
   d4eb2:	aa0a      	add	r2, sp, #40	; 0x28
   d4eb4:	f003 fd5e 	bl	d8974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4eb8:	a809      	add	r0, sp, #36	; 0x24
   d4eba:	f7ff ff29 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4ebe:	b02b      	add	sp, #172	; 0xac
   d4ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4ec4:	2003e2fc 	.word	0x2003e2fc
   d4ec8:	2003e38c 	.word	0x2003e38c
   d4ecc:	2003e2f4 	.word	0x2003e2f4
   d4ed0:	000dccd3 	.word	0x000dccd3
   d4ed4:	2003e360 	.word	0x2003e360
   d4ed8:	2003e280 	.word	0x2003e280
   d4edc:	40590000 	.word	0x40590000
   d4ee0:	000dcced 	.word	0x000dcced
   d4ee4:	000dcd1e 	.word	0x000dcd1e
   d4ee8:	2003e5ec 	.word	0x2003e5ec
   d4eec:	2003e2f8 	.word	0x2003e2f8
   d4ef0:	0001d4bf 	.word	0x0001d4bf
   d4ef4:	2003e254 	.word	0x2003e254
   d4ef8:	000dcd3e 	.word	0x000dcd3e

000d4efc <_Z16takeMeasurementsv>:
{
   d4efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4efe:	f7ff ff1d 	bl	d4d3c <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f02:	4b24      	ldr	r3, [pc, #144]	; (d4f94 <_Z16takeMeasurementsv+0x98>)
   d4f04:	2200      	movs	r2, #0
   d4f06:	6858      	ldr	r0, [r3, #4]
   d4f08:	4611      	mov	r1, r2
   d4f0a:	f003 f9e3 	bl	d82d4 <network_ready>
  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4f0e:	b108      	cbz	r0, d4f14 <_Z16takeMeasurementsv+0x18>
   d4f10:	f7ff fc26 	bl	d4760 <_Z17getSignalStrengthv>
   d4f14:	4d20      	ldr	r5, [pc, #128]	; (d4f98 <_Z16takeMeasurementsv+0x9c>)
    float temp = getTemp(sensorAddresses[i]);
   d4f16:	4f21      	ldr	r7, [pc, #132]	; (d4f9c <_Z16takeMeasurementsv+0xa0>)
{
   d4f18:	2400      	movs	r4, #0
   d4f1a:	462e      	mov	r6, r5
    float temp = getTemp(sensorAddresses[i]);
   d4f1c:	1938      	adds	r0, r7, r4
   d4f1e:	f7ff fbdb 	bl	d46d8 <_Z7getTempPh>
   d4f22:	ec51 0b10 	vmov	r0, r1, d0
   d4f26:	f005 fd0d 	bl	da944 <__aeabi_d2f>
   d4f2a:	ee07 0a90 	vmov	s15, r0
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f2e:	eef4 7a67 	vcmp.f32	s15, s15
   d4f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f36:	d603      	bvs.n	d4f40 <_Z16takeMeasurementsv+0x44>
   d4f38:	f005 f9b4 	bl	da2a4 <__aeabi_f2d>
   d4f3c:	e9c5 0100 	strd	r0, r1, [r5]
  for (int i = 0; i < nSENSORS; i++) {
   d4f40:	3408      	adds	r4, #8
   d4f42:	2c18      	cmp	r4, #24
   d4f44:	f105 0508 	add.w	r5, r5, #8
   d4f48:	d1e8      	bne.n	d4f1c <_Z16takeMeasurementsv+0x20>
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4f4a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4f4e:	210c      	movs	r1, #12
   d4f50:	e9cd 2300 	strd	r2, r3, [sp]
   d4f54:	4812      	ldr	r0, [pc, #72]	; (d4fa0 <_Z16takeMeasurementsv+0xa4>)
   d4f56:	4a13      	ldr	r2, [pc, #76]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f58:	f003 fa1c 	bl	d8394 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4f5c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   d4f60:	210c      	movs	r1, #12
   d4f62:	e9cd 2300 	strd	r2, r3, [sp]
   d4f66:	4810      	ldr	r0, [pc, #64]	; (d4fa8 <_Z16takeMeasurementsv+0xac>)
   d4f68:	4a0e      	ldr	r2, [pc, #56]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f6a:	f003 fa13 	bl	d8394 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4f6e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   d4f72:	210c      	movs	r1, #12
   d4f74:	e9cd 2300 	strd	r2, r3, [sp]
   d4f78:	480c      	ldr	r0, [pc, #48]	; (d4fac <_Z16takeMeasurementsv+0xb0>)
   d4f7a:	4a0a      	ldr	r2, [pc, #40]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f7c:	f003 fa0a 	bl	d8394 <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4f80:	f7ff fe62 	bl	d4c48 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4f84:	4a0a      	ldr	r2, [pc, #40]	; (d4fb0 <_Z16takeMeasurementsv+0xb4>)
   d4f86:	2301      	movs	r3, #1
   d4f88:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4f8a:	4a0a      	ldr	r2, [pc, #40]	; (d4fb4 <_Z16takeMeasurementsv+0xb8>)
   d4f8c:	7013      	strb	r3, [r2, #0]
}
   d4f8e:	b003      	add	sp, #12
   d4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f92:	bf00      	nop
   d4f94:	2003e5b4 	.word	0x2003e5b4
   d4f98:	2003e280 	.word	0x2003e280
   d4f9c:	2003f400 	.word	0x2003f400
   d4fa0:	2003df08 	.word	0x2003df08
   d4fa4:	000dcd42 	.word	0x000dcd42
   d4fa8:	2003dfa1 	.word	0x2003dfa1
   d4fac:	2003df19 	.word	0x2003df19
   d4fb0:	2003e388 	.word	0x2003e388
   d4fb4:	2003e2b0 	.word	0x2003e2b0

000d4fb8 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fb8:	b510      	push	{r4, lr}
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fba:	4c26      	ldr	r4, [pc, #152]	; (d5054 <_Z17checkSystemValuesv+0x9c>)
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4fbc:	f7ff ff9e 	bl	d4efc <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fc0:	78a3      	ldrb	r3, [r4, #2]
   d4fc2:	2b01      	cmp	r3, #1
   d4fc4:	bf84      	itt	hi
   d4fc6:	2300      	movhi	r3, #0
   d4fc8:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4fca:	78e3      	ldrb	r3, [r4, #3]
   d4fcc:	2b01      	cmp	r3, #1
   d4fce:	d905      	bls.n	d4fdc <_Z17checkSystemValuesv+0x24>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fd0:	f003 f920 	bl	d8214 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	d03b      	beq.n	d5050 <_Z17checkSystemValuesv+0x98>
   d4fd8:	2301      	movs	r3, #1
   d4fda:	70e3      	strb	r3, [r4, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fdc:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4fde:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fe2:	2b01      	cmp	r3, #1
   d4fe4:	bf84      	itt	hi
   d4fe6:	2300      	movhi	r3, #0
   d4fe8:	7123      	strbhi	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4fea:	68a3      	ldr	r3, [r4, #8]
   d4fec:	2b1d      	cmp	r3, #29
   d4fee:	bfcc      	ite	gt
   d4ff0:	2300      	movgt	r3, #0
   d4ff2:	2301      	movle	r3, #1
   d4ff4:	7163      	strb	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ff6:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ff8:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ffc:	2bff      	cmp	r3, #255	; 0xff
   d4ffe:	bf88      	it	hi
   d5000:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5002:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5006:	bf88      	it	hi
   d5008:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d500e:	d406      	bmi.n	d501e <_Z17checkSystemValuesv+0x66>
   d5010:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5014:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d501c:	dd01      	ble.n	d5022 <_Z17checkSystemValuesv+0x6a>
   d501e:	4b0e      	ldr	r3, [pc, #56]	; (d5058 <_Z17checkSystemValuesv+0xa0>)
   d5020:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5022:	edd4 7a06 	vldr	s15, [r4, #24]
   d5026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d502e:	d406      	bmi.n	d503e <_Z17checkSystemValuesv+0x86>
   d5030:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5034:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d503c:	dd02      	ble.n	d5044 <_Z17checkSystemValuesv+0x8c>
   d503e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5042:	61a3      	str	r3, [r4, #24]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5044:	230a      	movs	r3, #10
   d5046:	71a3      	strb	r3, [r4, #6]
  systemStatusWriteNeeded = true;
   d5048:	4b04      	ldr	r3, [pc, #16]	; (d505c <_Z17checkSystemValuesv+0xa4>)
   d504a:	2201      	movs	r2, #1
   d504c:	701a      	strb	r2, [r3, #0]
}
   d504e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d5050:	70e0      	strb	r0, [r4, #3]
   d5052:	e7c3      	b.n	d4fdc <_Z17checkSystemValuesv+0x24>
   d5054:	2003e368 	.word	0x2003e368
   d5058:	c0a00000 	.word	0xc0a00000
   d505c:	2003e388 	.word	0x2003e388

000d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5060:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5062:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5064:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5066:	68dd      	ldr	r5, [r3, #12]
   d5068:	2320      	movs	r3, #32
   d506a:	47a8      	blx	r5
    }
   d506c:	4620      	mov	r0, r4
   d506e:	bd38      	pop	{r3, r4, r5, pc}

000d5070 <loop>:
{
   d5070:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d5072:	4c9c      	ldr	r4, [pc, #624]	; (d52e4 <loop+0x274>)
   d5074:	7823      	ldrb	r3, [r4, #0]
   d5076:	3b01      	subs	r3, #1
{
   d5078:	b086      	sub	sp, #24
   d507a:	2b05      	cmp	r3, #5
   d507c:	d848      	bhi.n	d5110 <loop+0xa0>
   d507e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5082:	00e4      	.short	0x00e4
   d5084:	00970006 	.word	0x00970006
   d5088:	009a004c 	.word	0x009a004c
   d508c:	00be      	.short	0x00be
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d508e:	4d96      	ldr	r5, [pc, #600]	; (d52e8 <loop+0x278>)
   d5090:	792b      	ldrb	r3, [r5, #4]
   d5092:	b12b      	cbz	r3, d50a0 <loop+0x30>
   d5094:	4b95      	ldr	r3, [pc, #596]	; (d52ec <loop+0x27c>)
   d5096:	781b      	ldrb	r3, [r3, #0]
   d5098:	2b02      	cmp	r3, #2
   d509a:	d001      	beq.n	d50a0 <loop+0x30>
   d509c:	f7ff fc8a 	bl	d49b4 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d50a0:	4b93      	ldr	r3, [pc, #588]	; (d52f0 <loop+0x280>)
   d50a2:	781b      	ldrb	r3, [r3, #0]
   d50a4:	b10b      	cbz	r3, d50aa <loop+0x3a>
   d50a6:	f7ff fb97 	bl	d47d8 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d50aa:	4e92      	ldr	r6, [pc, #584]	; (d52f4 <loop+0x284>)
   d50ac:	7833      	ldrb	r3, [r6, #0]
   d50ae:	b133      	cbz	r3, d50be <loop+0x4e>
      fram.put(FRAM::systemStatusAddr,sysStatus);
   d50b0:	4a8d      	ldr	r2, [pc, #564]	; (d52e8 <loop+0x278>)
   d50b2:	4891      	ldr	r0, [pc, #580]	; (d52f8 <loop+0x288>)
   d50b4:	2101      	movs	r1, #1
   d50b6:	f7ff ffd3 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
      systemStatusWriteNeeded = false;
   d50ba:	2300      	movs	r3, #0
   d50bc:	7033      	strb	r3, [r6, #0]
    if (currentCountsWriteNeeded) {
   d50be:	4e8f      	ldr	r6, [pc, #572]	; (d52fc <loop+0x28c>)
   d50c0:	7833      	ldrb	r3, [r6, #0]
   d50c2:	b13b      	cbz	r3, d50d4 <loop+0x64>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50c4:	2330      	movs	r3, #48	; 0x30
   d50c6:	4a8e      	ldr	r2, [pc, #568]	; (d5300 <loop+0x290>)
   d50c8:	488b      	ldr	r0, [pc, #556]	; (d52f8 <loop+0x288>)
   d50ca:	2150      	movs	r1, #80	; 0x50
   d50cc:	f001 fbf9 	bl	d68c2 <_ZN6MB85RC9writeDataEjPKhj>
      currentCountsWriteNeeded = false;
   d50d0:	2300      	movs	r3, #0
   d50d2:	7033      	strb	r3, [r6, #0]
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d50d4:	796b      	ldrb	r3, [r5, #5]
   d50d6:	b10b      	cbz	r3, d50dc <loop+0x6c>
   d50d8:	2304      	movs	r3, #4
   d50da:	7023      	strb	r3, [r4, #0]
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d50dc:	f004 fcb8 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d50e0:	79ab      	ldrb	r3, [r5, #6]
   d50e2:	fb90 f2f3 	sdiv	r2, r0, r3
   d50e6:	fb02 0313 	mls	r3, r2, r3, r0
   d50ea:	b943      	cbnz	r3, d50fe <loop+0x8e>
   d50ec:	f004 fcb0 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d50f0:	4b84      	ldr	r3, [pc, #528]	; (d5304 <loop+0x294>)
   d50f2:	681b      	ldr	r3, [r3, #0]
   d50f4:	4298      	cmp	r0, r3
   d50f6:	d002      	beq.n	d50fe <loop+0x8e>
   d50f8:	2303      	movs	r3, #3
      state = ERROR_STATE;                                            // Response timed out
   d50fa:	7023      	strb	r3, [r4, #0]
   d50fc:	e008      	b.n	d5110 <loop+0xa0>
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d50fe:	f004 fca7 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d5102:	b928      	cbnz	r0, d5110 <loop+0xa0>
   d5104:	f004 fca4 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d5108:	4b7e      	ldr	r3, [pc, #504]	; (d5304 <loop+0x294>)
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	4298      	cmp	r0, r3
   d510e:	d1f3      	bne.n	d50f8 <loop+0x88>
  rtc.loop();                                                         // keeps the clock up to date
   d5110:	487d      	ldr	r0, [pc, #500]	; (d5308 <loop+0x298>)
   d5112:	f001 ffb9 	bl	d7088 <_ZN8MCP794104loopEv>
}
   d5116:	b006      	add	sp, #24
   d5118:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d511a:	4d73      	ldr	r5, [pc, #460]	; (d52e8 <loop+0x278>)
   d511c:	792b      	ldrb	r3, [r5, #4]
   d511e:	b12b      	cbz	r3, d512c <loop+0xbc>
   d5120:	4b72      	ldr	r3, [pc, #456]	; (d52ec <loop+0x27c>)
   d5122:	781b      	ldrb	r3, [r3, #0]
   d5124:	2b04      	cmp	r3, #4
   d5126:	d001      	beq.n	d512c <loop+0xbc>
   d5128:	f7ff fc44 	bl	d49b4 <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d512c:	f7ff fd8c 	bl	d4c48 <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d5130:	796b      	ldrb	r3, [r5, #5]
   d5132:	b90b      	cbnz	r3, d5138 <loop+0xc8>
      state = IDLE_STATE;
   d5134:	2302      	movs	r3, #2
   d5136:	e7e0      	b.n	d50fa <loop+0x8a>
    else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       // Troubleshooting code
   d5138:	f004 fc6d 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d513c:	69eb      	ldr	r3, [r5, #28]
   d513e:	1ac0      	subs	r0, r0, r3
   d5140:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5144:	d910      	bls.n	d5168 <loop+0xf8>
      connectToParticle();
   d5146:	f7ff fba7 	bl	d4898 <_Z17connectToParticlev>
   d514a:	4b70      	ldr	r3, [pc, #448]	; (d530c <loop+0x29c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d514c:	4a70      	ldr	r2, [pc, #448]	; (d5310 <loop+0x2a0>)
   d514e:	781b      	ldrb	r3, [r3, #0]
   d5150:	f88d 3000 	strb.w	r3, [sp]
   d5154:	a802      	add	r0, sp, #8
   d5156:	496f      	ldr	r1, [pc, #444]	; (d5314 <loop+0x2a4>)
   d5158:	233c      	movs	r3, #60	; 0x3c
   d515a:	f003 fc0b 	bl	d8974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d515e:	a803      	add	r0, sp, #12
   d5160:	f7ff fdd6 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = REPORTING_STATE;
   d5164:	2305      	movs	r3, #5
   d5166:	e7c8      	b.n	d50fa <loop+0x8a>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d5168:	f004 fc72 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d516c:	2801      	cmp	r0, #1
   d516e:	dd03      	ble.n	d5178 <loop+0x108>
   d5170:	78eb      	ldrb	r3, [r5, #3]
   d5172:	b10b      	cbz	r3, d5178 <loop+0x108>
   d5174:	f7ff fbde 	bl	d4934 <_Z22disconnectFromParticlev>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5178:	2100      	movs	r1, #0
   d517a:	2007      	movs	r0, #7
   d517c:	f004 feb3 	bl	d9ee6 <digitalWrite>
      petWatchdog();
   d5180:	f7ff fb2a 	bl	d47d8 <_Z11petWatchdogv>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5184:	f004 fc64 	bl	d9a50 <_ZN9TimeClass6minuteEv>
   d5188:	213c      	movs	r1, #60	; 0x3c
   d518a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d518e:	4341      	muls	r1, r0
      rtc.setAlarm(wakeInSeconds);                                      // The Real Time Clock will turn the Enable pin back on to wake the device
   d5190:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d5194:	f04f 0201 	mov.w	r2, #1
   d5198:	bfa8      	it	ge
   d519a:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d519e:	4291      	cmp	r1, r2
   d51a0:	f04f 0300 	mov.w	r3, #0
   d51a4:	bfb8      	it	lt
   d51a6:	4611      	movlt	r1, r2
        rtc.setAlarm(10);
   d51a8:	4857      	ldr	r0, [pc, #348]	; (d5308 <loop+0x298>)
   d51aa:	f002 f815 	bl	d71d8 <_ZN8MCP794108setAlarmEibi>
   d51ae:	e7af      	b.n	d5110 <loop+0xa0>
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d51b0:	f7ff fea4 	bl	d4efc <_Z16takeMeasurementsv>
   d51b4:	e7d6      	b.n	d5164 <loop+0xf4>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51b6:	4d4c      	ldr	r5, [pc, #304]	; (d52e8 <loop+0x278>)
   d51b8:	792a      	ldrb	r2, [r5, #4]
   d51ba:	b12a      	cbz	r2, d51c8 <loop+0x158>
   d51bc:	4b4b      	ldr	r3, [pc, #300]	; (d52ec <loop+0x27c>)
   d51be:	781b      	ldrb	r3, [r3, #0]
   d51c0:	2b05      	cmp	r3, #5
   d51c2:	d001      	beq.n	d51c8 <loop+0x158>
   d51c4:	f7ff fbf6 	bl	d49b4 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d51c8:	78eb      	ldrb	r3, [r5, #3]
   d51ca:	b90b      	cbnz	r3, d51d0 <loop+0x160>
   d51cc:	f7ff fb64 	bl	d4898 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51d0:	f003 f820 	bl	d8214 <spark_cloud_flag_connected>
    if (!Particle.connected()) connectToParticle();                   // Just to make sure
   d51d4:	b908      	cbnz	r0, d51da <loop+0x16a>
   d51d6:	f7ff fb5f 	bl	d4898 <_Z17connectToParticlev>
   d51da:	f003 f81b 	bl	d8214 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d51de:	b140      	cbz	r0, d51f2 <loop+0x182>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d51e0:	f004 fc2a 	bl	d9a38 <_ZN9TimeClass4hourEv>
   d51e4:	b908      	cbnz	r0, d51ea <loop+0x17a>
   d51e6:	f7ff fc1b 	bl	d4a20 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d51ea:	f7ff fa13 	bl	d4614 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d51ee:	2306      	movs	r3, #6
   d51f0:	e783      	b.n	d50fa <loop+0x8a>
   d51f2:	f002 fdb5 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51f6:	4b48      	ldr	r3, [pc, #288]	; (d5318 <loop+0x2a8>)
   d51f8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d51fa:	2301      	movs	r3, #1
   d51fc:	e77d      	b.n	d50fa <loop+0x8a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51fe:	4b3a      	ldr	r3, [pc, #232]	; (d52e8 <loop+0x278>)
   d5200:	791b      	ldrb	r3, [r3, #4]
   d5202:	b12b      	cbz	r3, d5210 <loop+0x1a0>
   d5204:	4b39      	ldr	r3, [pc, #228]	; (d52ec <loop+0x27c>)
   d5206:	781b      	ldrb	r3, [r3, #0]
   d5208:	2b06      	cmp	r3, #6
   d520a:	d001      	beq.n	d5210 <loop+0x1a0>
   d520c:	f7ff fbd2 	bl	d49b4 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d5210:	4b42      	ldr	r3, [pc, #264]	; (d531c <loop+0x2ac>)
   d5212:	781b      	ldrb	r3, [r3, #0]
   d5214:	2b00      	cmp	r3, #0
   d5216:	d08d      	beq.n	d5134 <loop+0xc4>
   d5218:	f002 fda2 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d521c:	4b40      	ldr	r3, [pc, #256]	; (d5320 <loop+0x2b0>)
   d521e:	681b      	ldr	r3, [r3, #0]
   d5220:	1ac0      	subs	r0, r0, r3
   d5222:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5226:	4298      	cmp	r0, r3
   d5228:	f67f af72 	bls.w	d5110 <loop+0xa0>
   d522c:	f002 fd98 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5230:	4b39      	ldr	r3, [pc, #228]	; (d5318 <loop+0x2a8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5232:	4a3c      	ldr	r2, [pc, #240]	; (d5324 <loop+0x2b4>)
      resetTimeStamp = millis();
   d5234:	6018      	str	r0, [r3, #0]
        val_(0) {
   d5236:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5238:	f88d 3000 	strb.w	r3, [sp]
   d523c:	4b33      	ldr	r3, [pc, #204]	; (d530c <loop+0x29c>)
   d523e:	493a      	ldr	r1, [pc, #232]	; (d5328 <loop+0x2b8>)
   d5240:	781b      	ldrb	r3, [r3, #0]
   d5242:	483a      	ldr	r0, [pc, #232]	; (d532c <loop+0x2bc>)
   d5244:	f7ff f856 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5248:	e7d7      	b.n	d51fa <loop+0x18a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d524a:	4c27      	ldr	r4, [pc, #156]	; (d52e8 <loop+0x278>)
   d524c:	7923      	ldrb	r3, [r4, #4]
   d524e:	b12b      	cbz	r3, d525c <loop+0x1ec>
   d5250:	4b26      	ldr	r3, [pc, #152]	; (d52ec <loop+0x27c>)
   d5252:	781b      	ldrb	r3, [r3, #0]
   d5254:	2b01      	cmp	r3, #1
   d5256:	d001      	beq.n	d525c <loop+0x1ec>
   d5258:	f7ff fbac 	bl	d49b4 <_Z22publishStateTransitionv>
   d525c:	f002 fd80 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5260:	4b2d      	ldr	r3, [pc, #180]	; (d5318 <loop+0x2a8>)
   d5262:	681b      	ldr	r3, [r3, #0]
   d5264:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5268:	3330      	adds	r3, #48	; 0x30
   d526a:	4283      	cmp	r3, r0
   d526c:	f4bf af50 	bcs.w	d5110 <loop+0xa0>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5270:	6923      	ldr	r3, [r4, #16]
   d5272:	2b03      	cmp	r3, #3
   d5274:	dc13      	bgt.n	d529e <loop+0x22e>
   d5276:	f002 ffcd 	bl	d8214 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d527a:	b148      	cbz	r0, d5290 <loop+0x220>
   d527c:	2300      	movs	r3, #0
   d527e:	f88d 3000 	strb.w	r3, [sp]
   d5282:	4b22      	ldr	r3, [pc, #136]	; (d530c <loop+0x29c>)
   d5284:	4a2a      	ldr	r2, [pc, #168]	; (d5330 <loop+0x2c0>)
   d5286:	781b      	ldrb	r3, [r3, #0]
   d5288:	4922      	ldr	r1, [pc, #136]	; (d5314 <loop+0x2a4>)
   d528a:	4828      	ldr	r0, [pc, #160]	; (d532c <loop+0x2bc>)
   d528c:	f7ff f832 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5294:	f003 f8ae 	bl	d83f4 <delay>
        System.reset();
   d5298:	f004 f9db 	bl	d9652 <_ZN11SystemClass5resetEv>
   d529c:	e738      	b.n	d5110 <loop+0xa0>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d529e:	f004 fbba 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d52a2:	69e3      	ldr	r3, [r4, #28]
   d52a4:	1ac0      	subs	r0, r0, r3
   d52a6:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d52aa:	d945      	bls.n	d5338 <loop+0x2c8>
   d52ac:	f002 ffb2 	bl	d8214 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d52b0:	b148      	cbz	r0, d52c6 <loop+0x256>
   d52b2:	2300      	movs	r3, #0
   d52b4:	f88d 3000 	strb.w	r3, [sp]
   d52b8:	4b14      	ldr	r3, [pc, #80]	; (d530c <loop+0x29c>)
   d52ba:	4a1e      	ldr	r2, [pc, #120]	; (d5334 <loop+0x2c4>)
   d52bc:	781b      	ldrb	r3, [r3, #0]
   d52be:	4915      	ldr	r1, [pc, #84]	; (d5314 <loop+0x2a4>)
   d52c0:	481a      	ldr	r0, [pc, #104]	; (d532c <loop+0x2bc>)
   d52c2:	f7ff f817 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d52c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52ca:	f003 f893 	bl	d83f4 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d52ce:	2500      	movs	r5, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52d0:	4a05      	ldr	r2, [pc, #20]	; (d52e8 <loop+0x278>)
   d52d2:	4809      	ldr	r0, [pc, #36]	; (d52f8 <loop+0x288>)
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d52d4:	6125      	str	r5, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52d6:	2101      	movs	r1, #1
   d52d8:	f7ff fec2 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        rtc.setAlarm(10);
   d52dc:	462b      	mov	r3, r5
   d52de:	2201      	movs	r2, #1
   d52e0:	210a      	movs	r1, #10
   d52e2:	e761      	b.n	d51a8 <loop+0x138>
   d52e4:	2003e364 	.word	0x2003e364
   d52e8:	2003e368 	.word	0x2003e368
   d52ec:	2003e304 	.word	0x2003e304
   d52f0:	2003e3bc 	.word	0x2003e3bc
   d52f4:	2003e388 	.word	0x2003e388
   d52f8:	2003e2e4 	.word	0x2003e2e4
   d52fc:	2003e2b0 	.word	0x2003e2b0
   d5300:	2003e280 	.word	0x2003e280
   d5304:	2003e2b8 	.word	0x2003e2b8
   d5308:	2003e344 	.word	0x2003e344
   d530c:	2003e254 	.word	0x2003e254
   d5310:	000dcd4a 	.word	0x000dcd4a
   d5314:	000dcd5f 	.word	0x000dcd5f
   d5318:	2003e340 	.word	0x2003e340
   d531c:	2003e2c6 	.word	0x2003e2c6
   d5320:	2003e3c0 	.word	0x2003e3c0
   d5324:	000dd4f4 	.word	0x000dd4f4
   d5328:	000dcd65 	.word	0x000dcd65
   d532c:	2003e308 	.word	0x2003e308
   d5330:	000dcd7e 	.word	0x000dcd7e
   d5334:	000dcd92 	.word	0x000dcd92
   d5338:	f002 ff6c 	bl	d8214 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d533c:	b148      	cbz	r0, d5352 <loop+0x2e2>
   d533e:	2300      	movs	r3, #0
   d5340:	f88d 3000 	strb.w	r3, [sp]
   d5344:	4b0e      	ldr	r3, [pc, #56]	; (d5380 <loop+0x310>)
   d5346:	4a0f      	ldr	r2, [pc, #60]	; (d5384 <loop+0x314>)
   d5348:	781b      	ldrb	r3, [r3, #0]
   d534a:	490f      	ldr	r1, [pc, #60]	; (d5388 <loop+0x318>)
   d534c:	480f      	ldr	r0, [pc, #60]	; (d538c <loop+0x31c>)
   d534e:	f7fe ffd1 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5352:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5356:	f003 f84d 	bl	d83f4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d535a:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d535c:	4a0c      	ldr	r2, [pc, #48]	; (d5390 <loop+0x320>)
   d535e:	480d      	ldr	r0, [pc, #52]	; (d5394 <loop+0x324>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5360:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5362:	2101      	movs	r1, #1
   d5364:	f7ff fe7c 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        hardResetNow("1");
   d5368:	490b      	ldr	r1, [pc, #44]	; (d5398 <loop+0x328>)
   d536a:	a802      	add	r0, sp, #8
   d536c:	f004 f909 	bl	d9582 <_ZN6StringC1EPKc>
   d5370:	a802      	add	r0, sp, #8
   d5372:	f7ff f817 	bl	d43a4 <_Z12hardResetNow6String>
   d5376:	a802      	add	r0, sp, #8
   d5378:	f004 f8b8 	bl	d94ec <_ZN6StringD1Ev>
   d537c:	e6c8      	b.n	d5110 <loop+0xa0>
   d537e:	bf00      	nop
   d5380:	2003e254 	.word	0x2003e254
   d5384:	000dcdac 	.word	0x000dcdac
   d5388:	000dcd5f 	.word	0x000dcd5f
   d538c:	2003e308 	.word	0x2003e308
   d5390:	2003e368 	.word	0x2003e368
   d5394:	2003e2e4 	.word	0x2003e2e4
   d5398:	000dcab0 	.word	0x000dcab0

000d539c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d539c:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d539e:	f7ff fa7b 	bl	d4898 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d53a2:	f7ff fdab 	bl	d4efc <_Z16takeMeasurementsv>
   d53a6:	f002 ff35 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d53aa:	b148      	cbz	r0, d53c0 <_Z18loadSystemDefaultsv+0x24>
   d53ac:	2300      	movs	r3, #0
   d53ae:	f88d 3000 	strb.w	r3, [sp]
   d53b2:	4b10      	ldr	r3, [pc, #64]	; (d53f4 <_Z18loadSystemDefaultsv+0x58>)
   d53b4:	4a10      	ldr	r2, [pc, #64]	; (d53f8 <_Z18loadSystemDefaultsv+0x5c>)
   d53b6:	781b      	ldrb	r3, [r3, #0]
   d53b8:	4910      	ldr	r1, [pc, #64]	; (d53fc <_Z18loadSystemDefaultsv+0x60>)
   d53ba:	4811      	ldr	r0, [pc, #68]	; (d5400 <_Z18loadSystemDefaultsv+0x64>)
   d53bc:	f7fe ff9a 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d53c0:	4a10      	ldr	r2, [pc, #64]	; (d5404 <_Z18loadSystemDefaultsv+0x68>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d53c2:	4811      	ldr	r0, [pc, #68]	; (d5408 <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d53c4:	2300      	movs	r3, #0
   d53c6:	7093      	strb	r3, [r2, #2]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d53c8:	6893      	ldr	r3, [r2, #8]
   d53ca:	2b1d      	cmp	r3, #29
   d53cc:	bfcc      	ite	gt
   d53ce:	2300      	movgt	r3, #0
   d53d0:	2301      	movle	r3, #1
   d53d2:	7153      	strb	r3, [r2, #5]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d53d4:	230a      	movs	r3, #10
   d53d6:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d53d8:	4b0c      	ldr	r3, [pc, #48]	; (d540c <_Z18loadSystemDefaultsv+0x70>)
   d53da:	6153      	str	r3, [r2, #20]
  sysStatus.structuresVersion = 1;
   d53dc:	2101      	movs	r1, #1
  sysStatus.dstOffset = 1;
   d53de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  sysStatus.structuresVersion = 1;
   d53e2:	7011      	strb	r1, [r2, #0]
  sysStatus.verboseMode = true;
   d53e4:	7111      	strb	r1, [r2, #4]
  sysStatus.dstOffset = 1;
   d53e6:	6193      	str	r3, [r2, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d53e8:	f7ff fe3a 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d53ec:	b003      	add	sp, #12
   d53ee:	f85d fb04 	ldr.w	pc, [sp], #4
   d53f2:	bf00      	nop
   d53f4:	2003e254 	.word	0x2003e254
   d53f8:	000dcdcb 	.word	0x000dcdcb
   d53fc:	000dcb6f 	.word	0x000dcb6f
   d5400:	2003e308 	.word	0x2003e308
   d5404:	2003e368 	.word	0x2003e368
   d5408:	2003e2e4 	.word	0x2003e2e4
   d540c:	c0a00000 	.word	0xc0a00000

000d5410 <setup>:
{
   d5410:	b570      	push	{r4, r5, r6, lr}
   d5412:	b0a8      	sub	sp, #160	; 0xa0
  Serial.begin(9600);
   d5414:	f004 fc44 	bl	d9ca0 <_Z16_fetch_usbserialv>
   d5418:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d541c:	f004 fc34 	bl	d9c88 <_ZN9USBSerial5beginEl>
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5420:	2100      	movs	r1, #0
   d5422:	2008      	movs	r0, #8
   d5424:	f004 fd4e 	bl	d9ec4 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5428:	2100      	movs	r1, #0
   d542a:	2004      	movs	r0, #4
   d542c:	f004 fd4a 	bl	d9ec4 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5430:	2101      	movs	r1, #1
   d5432:	2007      	movs	r0, #7
   d5434:	f004 fd46 	bl	d9ec4 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5438:	2101      	movs	r1, #1
   d543a:	2005      	movs	r0, #5
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d543c:	2400      	movs	r4, #0
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d543e:	f004 fd41 	bl	d9ec4 <pinMode>
  digitalWrite(blueLED,HIGH);
   d5442:	2101      	movs	r1, #1
   d5444:	2007      	movs	r0, #7
   d5446:	f004 fd4e 	bl	d9ee6 <digitalWrite>
  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d544a:	f7ff f9c5 	bl	d47d8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d544e:	49a4      	ldr	r1, [pc, #656]	; (d56e0 <setup+0x2d0>)
   d5450:	9400      	str	r4, [sp, #0]
   d5452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5456:	2201      	movs	r2, #1
   d5458:	2008      	movs	r0, #8
   d545a:	f003 fccb 	bl	d8df4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static String deviceID(void) { return spark_deviceID(); }
   d545e:	a804      	add	r0, sp, #16
   d5460:	f002 fee0 	bl	d8224 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5464:	4623      	mov	r3, r4
   d5466:	227d      	movs	r2, #125	; 0x7d
   d5468:	a908      	add	r1, sp, #32
   d546a:	a804      	add	r0, sp, #16
   d546c:	f004 f8c9 	bl	d9602 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5470:	4623      	mov	r3, r4
   d5472:	4622      	mov	r2, r4
   d5474:	499b      	ldr	r1, [pc, #620]	; (d56e4 <setup+0x2d4>)
   d5476:	4d9c      	ldr	r5, [pc, #624]	; (d56e8 <setup+0x2d8>)
   d5478:	4e9c      	ldr	r6, [pc, #624]	; (d56ec <setup+0x2dc>)
   d547a:	e9cd 4400 	strd	r4, r4, [sp]
   d547e:	a808      	add	r0, sp, #32
   d5480:	f002 fee0 	bl	d8244 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5484:	499a      	ldr	r1, [pc, #616]	; (d56f0 <setup+0x2e0>)
   d5486:	489b      	ldr	r0, [pc, #620]	; (d56f4 <setup+0x2e4>)
   d5488:	f7fe feab 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d548c:	499a      	ldr	r1, [pc, #616]	; (d56f8 <setup+0x2e8>)
   d548e:	489b      	ldr	r0, [pc, #620]	; (d56fc <setup+0x2ec>)
   d5490:	f7fe fea7 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5494:	4623      	mov	r3, r4
   d5496:	2202      	movs	r2, #2
   d5498:	4999      	ldr	r1, [pc, #612]	; (d5700 <setup+0x2f0>)
   d549a:	489a      	ldr	r0, [pc, #616]	; (d5704 <setup+0x2f4>)
   d549c:	f002 fe9a 	bl	d81d4 <spark_variable>
        return _variable(varKey, var, STRING);
   d54a0:	4999      	ldr	r1, [pc, #612]	; (d5708 <setup+0x2f8>)
   d54a2:	489a      	ldr	r0, [pc, #616]	; (d570c <setup+0x2fc>)
   d54a4:	f7fe fe9d 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54a8:	4999      	ldr	r1, [pc, #612]	; (d5710 <setup+0x300>)
   d54aa:	489a      	ldr	r0, [pc, #616]	; (d5714 <setup+0x304>)
   d54ac:	f7fe fe99 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54b0:	4999      	ldr	r1, [pc, #612]	; (d5718 <setup+0x308>)
   d54b2:	489a      	ldr	r0, [pc, #616]	; (d571c <setup+0x30c>)
   d54b4:	f7fe fe95 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54b8:	4999      	ldr	r1, [pc, #612]	; (d5720 <setup+0x310>)
   d54ba:	489a      	ldr	r0, [pc, #616]	; (d5724 <setup+0x314>)
   d54bc:	f7fe fe91 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d54c0:	4999      	ldr	r1, [pc, #612]	; (d5728 <setup+0x318>)
   d54c2:	489a      	ldr	r0, [pc, #616]	; (d572c <setup+0x31c>)
   d54c4:	4623      	mov	r3, r4
   d54c6:	2202      	movs	r2, #2
   d54c8:	f002 fe84 	bl	d81d4 <spark_variable>
   d54cc:	4623      	mov	r3, r4
   d54ce:	2202      	movs	r2, #2
   d54d0:	4997      	ldr	r1, [pc, #604]	; (d5730 <setup+0x320>)
   d54d2:	4898      	ldr	r0, [pc, #608]	; (d5734 <setup+0x324>)
   d54d4:	f002 fe7e 	bl	d81d4 <spark_variable>
        return _variable(varKey, var, STRING);
   d54d8:	4997      	ldr	r1, [pc, #604]	; (d5738 <setup+0x328>)
   d54da:	4898      	ldr	r0, [pc, #608]	; (d573c <setup+0x32c>)
   d54dc:	f7fe fe81 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54e0:	4997      	ldr	r1, [pc, #604]	; (d5740 <setup+0x330>)
   d54e2:	4898      	ldr	r0, [pc, #608]	; (d5744 <setup+0x334>)
   d54e4:	f7fe fe7d 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d54e8:	4a97      	ldr	r2, [pc, #604]	; (d5748 <setup+0x338>)
   d54ea:	4998      	ldr	r1, [pc, #608]	; (d574c <setup+0x33c>)
   d54ec:	4898      	ldr	r0, [pc, #608]	; (d5750 <setup+0x340>)
   d54ee:	f003 f93b 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54f2:	4a98      	ldr	r2, [pc, #608]	; (d5754 <setup+0x344>)
   d54f4:	4998      	ldr	r1, [pc, #608]	; (d5758 <setup+0x348>)
   d54f6:	4896      	ldr	r0, [pc, #600]	; (d5750 <setup+0x340>)
   d54f8:	f003 f936 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54fc:	4a97      	ldr	r2, [pc, #604]	; (d575c <setup+0x34c>)
   d54fe:	4998      	ldr	r1, [pc, #608]	; (d5760 <setup+0x350>)
   d5500:	4893      	ldr	r0, [pc, #588]	; (d5750 <setup+0x340>)
   d5502:	f003 f931 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5506:	4a97      	ldr	r2, [pc, #604]	; (d5764 <setup+0x354>)
   d5508:	4997      	ldr	r1, [pc, #604]	; (d5768 <setup+0x358>)
   d550a:	4891      	ldr	r0, [pc, #580]	; (d5750 <setup+0x340>)
   d550c:	f003 f92c 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5510:	4a96      	ldr	r2, [pc, #600]	; (d576c <setup+0x35c>)
   d5512:	4997      	ldr	r1, [pc, #604]	; (d5770 <setup+0x360>)
   d5514:	488e      	ldr	r0, [pc, #568]	; (d5750 <setup+0x340>)
   d5516:	f003 f927 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d551a:	4a96      	ldr	r2, [pc, #600]	; (d5774 <setup+0x364>)
   d551c:	4996      	ldr	r1, [pc, #600]	; (d5778 <setup+0x368>)
   d551e:	488c      	ldr	r0, [pc, #560]	; (d5750 <setup+0x340>)
   d5520:	f003 f922 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5524:	4a75      	ldr	r2, [pc, #468]	; (d56fc <setup+0x2ec>)
   d5526:	4995      	ldr	r1, [pc, #596]	; (d577c <setup+0x36c>)
   d5528:	4889      	ldr	r0, [pc, #548]	; (d5750 <setup+0x340>)
   d552a:	f003 f91d 	bl	d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  fram.begin();                                                       // Initialize the FRAM module
   d552e:	4894      	ldr	r0, [pc, #592]	; (d5780 <setup+0x370>)
   d5530:	f001 f93a 	bl	d67a8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5534:	4621      	mov	r1, r4
   d5536:	4892      	ldr	r0, [pc, #584]	; (d5780 <setup+0x370>)
   d5538:	2301      	movs	r3, #1
   d553a:	f10d 020b 	add.w	r2, sp, #11
   d553e:	f001 f975 	bl	d682c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5542:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d5546:	2901      	cmp	r1, #1
   d5548:	f000 80b2 	beq.w	d56b0 <setup+0x2a0>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d554c:	488c      	ldr	r0, [pc, #560]	; (d5780 <setup+0x370>)
   d554e:	f001 f935 	bl	d67bc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5552:	4a8c      	ldr	r2, [pc, #560]	; (d5784 <setup+0x374>)
   d5554:	488a      	ldr	r0, [pc, #552]	; (d5780 <setup+0x370>)
   d5556:	2304      	movs	r3, #4
   d5558:	4621      	mov	r1, r4
   d555a:	f001 f9b2 	bl	d68c2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d555e:	2301      	movs	r3, #1
   d5560:	4887      	ldr	r0, [pc, #540]	; (d5780 <setup+0x370>)
   d5562:	f10d 020b 	add.w	r2, sp, #11
   d5566:	4621      	mov	r1, r4
   d5568:	f001 f960 	bl	d682c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d556c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5570:	2b01      	cmp	r3, #1
   d5572:	f000 809a 	beq.w	d56aa <setup+0x29a>
   d5576:	2301      	movs	r3, #1
   d5578:	7033      	strb	r3, [r6, #0]
  checkSystemValues();                                                // Make sure System values are all in valid range
   d557a:	f7ff fd1d 	bl	d4fb8 <_Z17checkSystemValuesv>
  getBatteryContext();                                                // See if we have enought juice
   d557e:	f7ff fb63 	bl	d4c48 <_Z17getBatteryContextv>
        int reason = RESET_REASON_NONE;
   d5582:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5584:	4611      	mov	r1, r2
   d5586:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5588:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d558a:	f002 fbc9 	bl	d7d20 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d558e:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5590:	2b14      	cmp	r3, #20
   d5592:	f04f 0200 	mov.w	r2, #0
   d5596:	f040 8091 	bne.w	d56bc <setup+0x2ac>
    sysStatus.resetCount++;
   d559a:	692b      	ldr	r3, [r5, #16]
   d559c:	3301      	adds	r3, #1
   d559e:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d55a0:	4b79      	ldr	r3, [pc, #484]	; (d5788 <setup+0x378>)
   d55a2:	2201      	movs	r2, #1
   d55a4:	701a      	strb	r2, [r3, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d55a6:	79ab      	ldrb	r3, [r5, #6]
   d55a8:	4a78      	ldr	r2, [pc, #480]	; (d578c <setup+0x37c>)
   d55aa:	4853      	ldr	r0, [pc, #332]	; (d56f8 <setup+0x2e8>)
   d55ac:	210c      	movs	r1, #12
   d55ae:	f002 fef1 	bl	d8394 <snprintf>
  rtc.setup();                                                        // Start the real time clock
   d55b2:	4877      	ldr	r0, [pc, #476]	; (d5790 <setup+0x380>)
   d55b4:	f001 fc62 	bl	d6e7c <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d55b8:	2100      	movs	r1, #0
   d55ba:	4875      	ldr	r0, [pc, #468]	; (d5790 <setup+0x380>)
   d55bc:	f001 fdad 	bl	d711a <_ZN8MCP7941010clearAlarmEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d55c0:	ed95 0a06 	vldr	s0, [r5, #24]
   d55c4:	f004 f8de 	bl	d9784 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d55c8:	f004 fa08 	bl	d99dc <_ZN9TimeClass7isValidEv>
   d55cc:	b920      	cbnz	r0, d55d8 <setup+0x1c8>
   d55ce:	4870      	ldr	r0, [pc, #448]	; (d5790 <setup+0x380>)
   d55d0:	f001 fc41 	bl	d6e56 <_ZNK8MCP7941010getRTCTimeEv>
   d55d4:	f004 f908 	bl	d97e8 <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d55d8:	f7ff fa60 	bl	d4a9c <_Z8isDSTusav>
   d55dc:	2800      	cmp	r0, #0
   d55de:	d077      	beq.n	d56d0 <setup+0x2c0>
   d55e0:	f004 f8ee 	bl	d97c0 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d55e4:	ed95 0a05 	vldr	s0, [r5, #20]
   d55e8:	f004 f8ac 	bl	d9744 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d55ec:	f004 fa64 	bl	d9ab8 <_ZN9TimeClass5localEv>
   d55f0:	4604      	mov	r4, r0
   d55f2:	f004 fa10 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d55f6:	1a20      	subs	r0, r4, r0
   d55f8:	f004 fe42 	bl	da280 <__aeabi_i2d>
   d55fc:	a336      	add	r3, pc, #216	; (adr r3, d56d8 <setup+0x2c8>)
   d55fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5602:	f004 ffd1 	bl	da5a8 <__aeabi_ddiv>
   d5606:	4a63      	ldr	r2, [pc, #396]	; (d5794 <setup+0x384>)
   d5608:	e9cd 0100 	strd	r0, r1, [sp]
   d560c:	210a      	movs	r1, #10
   d560e:	484a      	ldr	r0, [pc, #296]	; (d5738 <setup+0x328>)
   d5610:	f002 fec0 	bl	d8394 <snprintf>
   d5614:	4a60      	ldr	r2, [pc, #384]	; (d5798 <setup+0x388>)
   d5616:	485a      	ldr	r0, [pc, #360]	; (d5780 <setup+0x370>)
   d5618:	2330      	movs	r3, #48	; 0x30
   d561a:	2150      	movs	r1, #80	; 0x50
   d561c:	f001 f906 	bl	d682c <_ZN6MB85RC8readDataEjPhj>
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d5620:	f004 fa0a 	bl	d9a38 <_ZN9TimeClass4hourEv>
   d5624:	4b5d      	ldr	r3, [pc, #372]	; (d579c <setup+0x38c>)
   d5626:	6018      	str	r0, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5628:	f7ff f908 	bl	d483c <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d562c:	2004      	movs	r0, #4
   d562e:	f004 fc73 	bl	d9f18 <digitalRead>
   d5632:	b908      	cbnz	r0, d5638 <setup+0x228>
   d5634:	f7ff feb2 	bl	d539c <_Z18loadSystemDefaultsv>
  ds18b20.resetsearch();                 // initialise for sensor search
   d5638:	4859      	ldr	r0, [pc, #356]	; (d57a0 <setup+0x390>)
   d563a:	f000 ff2a 	bl	d6492 <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d563e:	4959      	ldr	r1, [pc, #356]	; (d57a4 <setup+0x394>)
   d5640:	4857      	ldr	r0, [pc, #348]	; (d57a0 <setup+0x390>)
   d5642:	f000 ff0a 	bl	d645a <_ZN7DS18B206searchEPh>
   d5646:	4958      	ldr	r1, [pc, #352]	; (d57a8 <setup+0x398>)
   d5648:	4855      	ldr	r0, [pc, #340]	; (d57a0 <setup+0x390>)
   d564a:	f000 ff06 	bl	d645a <_ZN7DS18B206searchEPh>
   d564e:	4957      	ldr	r1, [pc, #348]	; (d57ac <setup+0x39c>)
   d5650:	4853      	ldr	r0, [pc, #332]	; (d57a0 <setup+0x390>)
   d5652:	f000 ff02 	bl	d645a <_ZN7DS18B206searchEPh>
  t.withI2C();
   d5656:	f004 fc8b 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d565a:	2242      	movs	r2, #66	; 0x42
   d565c:	4601      	mov	r1, r0
   d565e:	4854      	ldr	r0, [pc, #336]	; (d57b0 <setup+0x3a0>)
   d5660:	f000 fa44 	bl	d5aec <_ZN12AssetTracker7withI2CER7TwoWireh>
	t.startThreadedMode();
   d5664:	4852      	ldr	r0, [pc, #328]	; (d57b0 <setup+0x3a0>)
   d5666:	f000 f9f9 	bl	d5a5c <_ZN12AssetTracker17startThreadedModeEv>
   d566a:	f002 fb79 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d566e:	4b51      	ldr	r3, [pc, #324]	; (d57b4 <setup+0x3a4>)
   d5670:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d5672:	4b51      	ldr	r3, [pc, #324]	; (d57b8 <setup+0x3a8>)
   d5674:	2201      	movs	r2, #1
   d5676:	701a      	strb	r2, [r3, #0]
  connectToParticle();
   d5678:	f7ff f90e 	bl	d4898 <_Z17connectToParticlev>
   d567c:	2300      	movs	r3, #0
  publishQueue.publish("State","Startup Complete",PRIVATE);
   d567e:	f88d 3000 	strb.w	r3, [sp]
   d5682:	4b4e      	ldr	r3, [pc, #312]	; (d57bc <setup+0x3ac>)
   d5684:	4a4e      	ldr	r2, [pc, #312]	; (d57c0 <setup+0x3b0>)
   d5686:	781b      	ldrb	r3, [r3, #0]
   d5688:	494e      	ldr	r1, [pc, #312]	; (d57c4 <setup+0x3b4>)
   d568a:	484f      	ldr	r0, [pc, #316]	; (d57c8 <setup+0x3b8>)
   d568c:	f7fe fe32 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5690:	7833      	ldrb	r3, [r6, #0]
   d5692:	b90b      	cbnz	r3, d5698 <setup+0x288>
   d5694:	2302      	movs	r3, #2
   d5696:	7033      	strb	r3, [r6, #0]
  digitalWrite(blueLED,LOW);
   d5698:	2100      	movs	r1, #0
   d569a:	2007      	movs	r0, #7
   d569c:	f004 fc23 	bl	d9ee6 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d56a0:	a804      	add	r0, sp, #16
   d56a2:	f003 ff23 	bl	d94ec <_ZN6StringD1Ev>
}
   d56a6:	b028      	add	sp, #160	; 0xa0
   d56a8:	bd70      	pop	{r4, r5, r6, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d56aa:	f7ff fe77 	bl	d539c <_Z18loadSystemDefaultsv>
   d56ae:	e764      	b.n	d557a <setup+0x16a>
   d56b0:	2320      	movs	r3, #32
   d56b2:	462a      	mov	r2, r5
   d56b4:	4832      	ldr	r0, [pc, #200]	; (d5780 <setup+0x370>)
   d56b6:	f001 f8b9 	bl	d682c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d56ba:	e75e      	b.n	d557a <setup+0x16a>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56bc:	4611      	mov	r1, r2
   d56be:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d56c0:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56c2:	f002 fb2d 	bl	d7d20 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d56c6:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d56c8:	2b8c      	cmp	r3, #140	; 0x8c
   d56ca:	f47f af6c 	bne.w	d55a6 <setup+0x196>
   d56ce:	e764      	b.n	d559a <setup+0x18a>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d56d0:	f004 f882 	bl	d97d8 <_ZN9TimeClass6endDSTEv>
   d56d4:	e786      	b.n	d55e4 <setup+0x1d4>
   d56d6:	bf00      	nop
   d56d8:	00000000 	.word	0x00000000
   d56dc:	40ac2000 	.word	0x40ac2000
   d56e0:	000d40c9 	.word	0x000d40c9
   d56e4:	000d4311 	.word	0x000d4311
   d56e8:	2003e368 	.word	0x2003e368
   d56ec:	2003e364 	.word	0x2003e364
   d56f0:	2003e204 	.word	0x2003e204
   d56f4:	000dcde3 	.word	0x000dcde3
   d56f8:	2003df25 	.word	0x2003df25
   d56fc:	000dcdea 	.word	0x000dcdea
   d5700:	2003e378 	.word	0x2003e378
   d5704:	000dcdf9 	.word	0x000dcdf9
   d5708:	2003df08 	.word	0x2003df08
   d570c:	000dce04 	.word	0x000dce04
   d5710:	2003dfa1 	.word	0x2003dfa1
   d5714:	000dce0e 	.word	0x000dce0e
   d5718:	2003df19 	.word	0x2003df19
   d571c:	000dce17 	.word	0x000dce17
   d5720:	2003df14 	.word	0x2003df14
   d5724:	000dce23 	.word	0x000dce23
   d5728:	2003e370 	.word	0x2003e370
   d572c:	000dce2b 	.word	0x000dce2b
   d5730:	2003e298 	.word	0x2003e298
   d5734:	000dce36 	.word	0x000dce36
   d5738:	2003e2bc 	.word	0x2003e2bc
   d573c:	000dce3d 	.word	0x000dce3d
   d5740:	2003e256 	.word	0x2003e256
   d5744:	000dce48 	.word	0x000dce48
   d5748:	000dce57 	.word	0x000dce57
   d574c:	000d411d 	.word	0x000d411d
   d5750:	000d873d 	.word	0x000d873d
   d5754:	000dce61 	.word	0x000dce61
   d5758:	000d43a5 	.word	0x000d43a5
   d575c:	000dce6b 	.word	0x000dce6b
   d5760:	000d4139 	.word	0x000d4139
   d5764:	000dce73 	.word	0x000dce73
   d5768:	000d43f5 	.word	0x000d43f5
   d576c:	000dce80 	.word	0x000dce80
   d5770:	000d4481 	.word	0x000d4481
   d5774:	000dce8d 	.word	0x000dce8d
   d5778:	000d4ae1 	.word	0x000d4ae1
   d577c:	000d4599 	.word	0x000d4599
   d5780:	2003e2e4 	.word	0x2003e2e4
   d5784:	000dcf34 	.word	0x000dcf34
   d5788:	2003e388 	.word	0x2003e388
   d578c:	000dcbae 	.word	0x000dcbae
   d5790:	2003e344 	.word	0x2003e344
   d5794:	000dcb74 	.word	0x000dcb74
   d5798:	2003e280 	.word	0x2003e280
   d579c:	2003e2b4 	.word	0x2003e2b4
   d57a0:	2003e2c8 	.word	0x2003e2c8
   d57a4:	2003f400 	.word	0x2003f400
   d57a8:	2003f408 	.word	0x2003f408
   d57ac:	2003f410 	.word	0x2003f410
   d57b0:	2003e38c 	.word	0x2003e38c
   d57b4:	2003e360 	.word	0x2003e360
   d57b8:	2003e2f4 	.word	0x2003e2f4
   d57bc:	2003e254 	.word	0x2003e254
   d57c0:	000dce9b 	.word	0x000dce9b
   d57c4:	000dcd5f 	.word	0x000dcd5f
   d57c8:	2003e308 	.word	0x2003e308

000d57cc <_GLOBAL__sub_I___appProductID>:
}
   d57cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d57ce:	4b3f      	ldr	r3, [pc, #252]	; (d58cc <_GLOBAL__sub_I___appProductID+0x100>)
              error_(SYSTEM_ERROR_NONE) {
   d57d0:	4e3f      	ldr	r6, [pc, #252]	; (d58d0 <_GLOBAL__sub_I___appProductID+0x104>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d57d2:	4d40      	ldr	r5, [pc, #256]	; (d58d4 <_GLOBAL__sub_I___appProductID+0x108>)
   d57d4:	2400      	movs	r4, #0
   d57d6:	601c      	str	r4, [r3, #0]
   d57d8:	4b3f      	ldr	r3, [pc, #252]	; (d58d8 <_GLOBAL__sub_I___appProductID+0x10c>)
   d57da:	2701      	movs	r7, #1
   d57dc:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d57de:	f004 fb1b 	bl	d9e18 <spark_protocol_instance>
   d57e2:	4623      	mov	r3, r4
   d57e4:	4622      	mov	r2, r4
   d57e6:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d57ea:	f004 fb1d 	bl	d9e28 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d57ee:	f004 fb13 	bl	d9e18 <spark_protocol_instance>
   d57f2:	4622      	mov	r2, r4
   d57f4:	4623      	mov	r3, r4
   d57f6:	2107      	movs	r1, #7
   d57f8:	f004 fb1e 	bl	d9e38 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d57fc:	4b37      	ldr	r3, [pc, #220]	; (d58dc <_GLOBAL__sub_I___appProductID+0x110>)
   d57fe:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5800:	6034      	str	r4, [r6, #0]
   d5802:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5804:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d5806:	2002      	movs	r0, #2
   d5808:	f002 fc84 	bl	d8114 <set_system_mode>
   d580c:	462a      	mov	r2, r5
   d580e:	4934      	ldr	r1, [pc, #208]	; (d58e0 <_GLOBAL__sub_I___appProductID+0x114>)
   d5810:	4630      	mov	r0, r6
   d5812:	f004 fbd5 	bl	d9fc0 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5816:	4621      	mov	r1, r4
   d5818:	4638      	mov	r0, r7
   d581a:	f002 fc8b 	bl	d8134 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d581e:	4639      	mov	r1, r7
   d5820:	2004      	movs	r0, #4
   d5822:	f002 fa75 	bl	d7d10 <HAL_Feature_Set>
        : config_(config) {
   d5826:	482f      	ldr	r0, [pc, #188]	; (d58e4 <_GLOBAL__sub_I___appProductID+0x118>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5828:	492f      	ldr	r1, [pc, #188]	; (d58e8 <_GLOBAL__sub_I___appProductID+0x11c>)
              valid_(true) {
   d582a:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d582e:	4603      	mov	r3, r0
   d5830:	1d02      	adds	r2, r0, #4
   d5832:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5836:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5838:	4b2c      	ldr	r3, [pc, #176]	; (d58ec <_GLOBAL__sub_I___appProductID+0x120>)
   d583a:	6043      	str	r3, [r0, #4]
   d583c:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d583e:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5842:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5844:	7204      	strb	r4, [r0, #8]
   d5846:	f004 fbbb 	bl	d9fc0 <__aeabi_atexit>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d584a:	f004 fb91 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d584e:	4e28      	ldr	r6, [pc, #160]	; (d58f0 <_GLOBAL__sub_I___appProductID+0x124>)
   d5850:	4601      	mov	r1, r0
   d5852:	4630      	mov	r0, r6
   d5854:	f001 fa1a 	bl	d6c8c <_ZN8MCP79410C1ER7TwoWire>
   d5858:	462a      	mov	r2, r5
   d585a:	4926      	ldr	r1, [pc, #152]	; (d58f4 <_GLOBAL__sub_I___appProductID+0x128>)
   d585c:	4630      	mov	r0, r6
   d585e:	f004 fbaf 	bl	d9fc0 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5862:	f004 fb85 	bl	d9f70 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5866:	4e24      	ldr	r6, [pc, #144]	; (d58f8 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5868:	4601      	mov	r1, r0
   d586a:	4623      	mov	r3, r4
   d586c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5870:	4630      	mov	r0, r6
   d5872:	f000 ff8f 	bl	d6794 <_ZN6MB85RCC1ER7TwoWireji>
   d5876:	4b21      	ldr	r3, [pc, #132]	; (d58fc <_GLOBAL__sub_I___appProductID+0x130>)
   d5878:	6033      	str	r3, [r6, #0]
   d587a:	4630      	mov	r0, r6
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d587c:	4e20      	ldr	r6, [pc, #128]	; (d5900 <_GLOBAL__sub_I___appProductID+0x134>)
   d587e:	4921      	ldr	r1, [pc, #132]	; (d5904 <_GLOBAL__sub_I___appProductID+0x138>)
   d5880:	462a      	mov	r2, r5
   d5882:	f004 fb9d 	bl	d9fc0 <__aeabi_atexit>
   d5886:	4920      	ldr	r1, [pc, #128]	; (d5908 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5888:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d588c:	4630      	mov	r0, r6
   d588e:	f002 f8cb 	bl	d7a28 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5892:	4b1e      	ldr	r3, [pc, #120]	; (d590c <_GLOBAL__sub_I___appProductID+0x140>)
   d5894:	6033      	str	r3, [r6, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5896:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d5898:	4e1d      	ldr	r6, [pc, #116]	; (d5910 <_GLOBAL__sub_I___appProductID+0x144>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d589a:	491e      	ldr	r1, [pc, #120]	; (d5914 <_GLOBAL__sub_I___appProductID+0x148>)
   d589c:	462a      	mov	r2, r5
   d589e:	f004 fb8f 	bl	d9fc0 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d58a2:	4622      	mov	r2, r4
   d58a4:	2110      	movs	r1, #16
AssetTracker t;
   d58a6:	4c1c      	ldr	r4, [pc, #112]	; (d5918 <_GLOBAL__sub_I___appProductID+0x14c>)
DS18B20 ds18b20(tempSensors);
   d58a8:	4630      	mov	r0, r6
   d58aa:	f000 fdbf 	bl	d642c <_ZN7DS18B20C1Etb>
   d58ae:	462a      	mov	r2, r5
   d58b0:	491a      	ldr	r1, [pc, #104]	; (d591c <_GLOBAL__sub_I___appProductID+0x150>)
   d58b2:	4630      	mov	r0, r6
   d58b4:	f004 fb84 	bl	d9fc0 <__aeabi_atexit>
AssetTracker t;
   d58b8:	4620      	mov	r0, r4
   d58ba:	f000 f8b1 	bl	d5a20 <_ZN12AssetTrackerC1Ev>
   d58be:	462a      	mov	r2, r5
   d58c0:	4620      	mov	r0, r4
   d58c2:	4917      	ldr	r1, [pc, #92]	; (d5920 <_GLOBAL__sub_I___appProductID+0x154>)
}
   d58c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
AssetTracker t;
   d58c8:	f004 bb7a 	b.w	d9fc0 <__aeabi_atexit>
   d58cc:	2003e250 	.word	0x2003e250
   d58d0:	2003e244 	.word	0x2003e244
   d58d4:	2003e1f8 	.word	0x2003e1f8
   d58d8:	2003e254 	.word	0x2003e254
   d58dc:	ffff0000 	.word	0xffff0000
   d58e0:	000d41a5 	.word	0x000d41a5
   d58e4:	2003e268 	.word	0x2003e268
   d58e8:	000d40d5 	.word	0x000d40d5
   d58ec:	00030010 	.word	0x00030010
   d58f0:	2003e344 	.word	0x2003e344
   d58f4:	000d6a0b 	.word	0x000d6a0b
   d58f8:	2003e2e4 	.word	0x2003e2e4
   d58fc:	000dceb4 	.word	0x000dceb4
   d5900:	2003e308 	.word	0x2003e308
   d5904:	000d417d 	.word	0x000d417d
   d5908:	2003f418 	.word	0x2003f418
   d590c:	000dced0 	.word	0x000dced0
   d5910:	2003e2c8 	.word	0x2003e2c8
   d5914:	000d4155 	.word	0x000d4155
   d5918:	2003e38c 	.word	0x2003e38c
   d591c:	000d6481 	.word	0x000d6481
   d5920:	000d59e9 	.word	0x000d59e9

000d5924 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5924:	4770      	bx	lr

000d5926 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5926:	b510      	push	{r4, lr}
  }
   d5928:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d592a:	4604      	mov	r4, r0
  }
   d592c:	f004 fb4d 	bl	d9fca <_ZdlPvj>
   d5930:	4620      	mov	r0, r4
   d5932:	bd10      	pop	{r4, pc}

000d5934 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5934:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5936:	2301      	movs	r3, #1
   d5938:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d593a:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d593c:	4604      	mov	r4, r0
        if (th->func) {
   d593e:	b143      	cbz	r3, d5952 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d5940:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5942:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5944:	2301      	movs	r3, #1
   d5946:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5948:	2000      	movs	r0, #0
    }
   d594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d594e:	f002 b9d7 	b.w	d7d00 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5952:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5954:	2800      	cmp	r0, #0
   d5956:	d0f5      	beq.n	d5944 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5958:	6883      	ldr	r3, [r0, #8]
   d595a:	b90b      	cbnz	r3, d5960 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d595c:	f004 fb3b 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5960:	68c3      	ldr	r3, [r0, #12]
   d5962:	e7ee      	b.n	d5942 <_ZN6Thread3runEPv+0xe>

000d5964 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5964:	b40e      	push	{r1, r2, r3}
   d5966:	b503      	push	{r0, r1, lr}
   d5968:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d596a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d596c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5970:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5972:	f003 fcc6 	bl	d9302 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d5976:	b002      	add	sp, #8
   d5978:	f85d eb04 	ldr.w	lr, [sp], #4
   d597c:	b003      	add	sp, #12
   d597e:	4770      	bx	lr

000d5980 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5980:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5982:	4604      	mov	r4, r0
   d5984:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5986:	7922      	ldrb	r2, [r4, #4]
   d5988:	68a3      	ldr	r3, [r4, #8]
   d598a:	b132      	cbz	r2, d599a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d598c:	b9a3      	cbnz	r3, d59b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d598e:	490b      	ldr	r1, [pc, #44]	; (d59bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5990:	b002      	add	sp, #8
   d5992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5996:	f003 bba5 	b.w	d90e4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d599a:	4a09      	ldr	r2, [pc, #36]	; (d59c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d599c:	7b26      	ldrb	r6, [r4, #12]
   d599e:	4d09      	ldr	r5, [pc, #36]	; (d59c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d59a0:	4909      	ldr	r1, [pc, #36]	; (d59c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d59a2:	7b64      	ldrb	r4, [r4, #13]
   d59a4:	2e01      	cmp	r6, #1
   d59a6:	bf18      	it	ne
   d59a8:	4629      	movne	r1, r5
   d59aa:	e9cd 1400 	strd	r1, r4, [sp]
   d59ae:	4907      	ldr	r1, [pc, #28]	; (d59cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d59b0:	f7ff ffd8 	bl	d5964 <_ZN5Print6printfEPKcz>
  }
   d59b4:	b002      	add	sp, #8
   d59b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d59b8:	4a05      	ldr	r2, [pc, #20]	; (d59d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d59ba:	e7ef      	b.n	d599c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d59bc:	000dcf49 	.word	0x000dcf49
   d59c0:	000dd4f4 	.word	0x000dd4f4
   d59c4:	000dcf45 	.word	0x000dcf45
   d59c8:	000dcf41 	.word	0x000dcf41
   d59cc:	000dcf5f 	.word	0x000dcf5f
   d59d0:	000dcf38 	.word	0x000dcf38

000d59d4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d59d4:	b510      	push	{r4, lr}
      if (_M_manager)
   d59d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d59d8:	4604      	mov	r4, r0
      if (_M_manager)
   d59da:	b113      	cbz	r3, d59e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59dc:	2203      	movs	r2, #3
   d59de:	4601      	mov	r1, r0
   d59e0:	4798      	blx	r3
    }
   d59e2:	4620      	mov	r0, r4
   d59e4:	bd10      	pop	{r4, pc}
	...

000d59e8 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d59e8:	b510      	push	{r4, lr}
   d59ea:	4b05      	ldr	r3, [pc, #20]	; (d5a00 <_ZN12AssetTrackerD1Ev+0x18>)
   d59ec:	4604      	mov	r4, r0
   d59ee:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d59f2:	f7ff ffef 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
   d59f6:	4620      	mov	r0, r4
   d59f8:	f000 f9be 	bl	d5d78 <_ZN13LegacyAdapterD1Ev>

}
   d59fc:	4620      	mov	r0, r4
   d59fe:	bd10      	pop	{r4, pc}
   d5a00:	000dd030 	.word	0x000dd030

000d5a04 <_ZN12AssetTrackerD0Ev>:
AssetTracker::~AssetTracker() {
   d5a04:	b510      	push	{r4, lr}
   d5a06:	4604      	mov	r4, r0
}
   d5a08:	f7ff ffee 	bl	d59e8 <_ZN12AssetTrackerD1Ev>
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	2130      	movs	r1, #48	; 0x30
   d5a10:	f004 fadb 	bl	d9fca <_ZdlPvj>
   d5a14:	4620      	mov	r0, r4
   d5a16:	bd10      	pop	{r4, pc}

000d5a18 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5a18:	6803      	ldr	r3, [r0, #0]
   d5a1a:	b2c9      	uxtb	r1, r1
   d5a1c:	689b      	ldr	r3, [r3, #8]
   d5a1e:	4718      	bx	r3

000d5a20 <_ZN12AssetTrackerC1Ev>:
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d5a20:	b538      	push	{r3, r4, r5, lr}
   d5a22:	490b      	ldr	r1, [pc, #44]	; (d5a50 <_ZN12AssetTrackerC1Ev+0x30>)
   d5a24:	4604      	mov	r4, r0
   d5a26:	2500      	movs	r5, #0
   d5a28:	f000 f9ae 	bl	d5d88 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d5a2c:	4b09      	ldr	r3, [pc, #36]	; (d5a54 <_ZN12AssetTrackerC1Ev+0x34>)
   d5a2e:	6023      	str	r3, [r4, #0]
   d5a30:	7225      	strb	r5, [r4, #8]
   d5a32:	f004 fa9d 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d5a36:	2342      	movs	r3, #66	; 0x42
   d5a38:	7423      	strb	r3, [r4, #16]
   d5a3a:	60e0      	str	r0, [r4, #12]
   d5a3c:	f004 f8a8 	bl	d9b90 <_Z22__fetch_global_Serial1v>
	instance = this;
   d5a40:	4b05      	ldr	r3, [pc, #20]	; (d5a58 <_ZN12AssetTrackerC1Ev+0x38>)
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d5a42:	61e5      	str	r5, [r4, #28]
	instance = this;
   d5a44:	601c      	str	r4, [r3, #0]
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d5a46:	e9c4 0505 	strd	r0, r5, [r4, #20]
    _Function_base() : _M_manager(nullptr) { }
   d5a4a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	bd38      	pop	{r3, r4, r5, pc}
   d5a50:	2003e3d0 	.word	0x2003e3d0
   d5a54:	000dd030 	.word	0x000dd030
   d5a58:	2003e598 	.word	0x2003e598

000d5a5c <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d5a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d5a5e:	6986      	ldr	r6, [r0, #24]
void AssetTracker::startThreadedMode() {
   d5a60:	4607      	mov	r7, r0
	if (thread == NULL) {
   d5a62:	2e00      	cmp	r6, #0
   d5a64:	d138      	bne.n	d5ad8 <_ZN12AssetTracker17startThreadedModeEv+0x7c>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5a66:	2004      	movs	r0, #4
   d5a68:	f7fe fb15 	bl	d4096 <_Znwj>
   d5a6c:	4605      	mov	r5, r0
   d5a6e:	b390      	cbz	r0, d5ad6 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
        : d_(new(std::nothrow) Data)
   d5a70:	491a      	ldr	r1, [pc, #104]	; (d5adc <_ZN12AssetTracker17startThreadedModeEv+0x80>)
   d5a72:	2014      	movs	r0, #20
   d5a74:	f004 faab 	bl	d9fce <_ZnwjRKSt9nothrow_t>
   d5a78:	b128      	cbz	r0, d5a86 <_ZN12AssetTracker17startThreadedModeEv+0x2a>
            exited(false) {
   d5a7a:	e9c0 6600 	strd	r6, r6, [r0]
   d5a7e:	e9c0 6602 	strd	r6, r6, [r0, #8]
   d5a82:	7406      	strb	r6, [r0, #16]
   d5a84:	7446      	strb	r6, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5a86:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5a88:	b1a0      	cbz	r0, d5ab4 <_ZN12AssetTracker17startThreadedModeEv+0x58>
        d_->func = function;
   d5a8a:	4b15      	ldr	r3, [pc, #84]	; (d5ae0 <_ZN12AssetTracker17startThreadedModeEv+0x84>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a8c:	4915      	ldr	r1, [pc, #84]	; (d5ae4 <_ZN12AssetTracker17startThreadedModeEv+0x88>)
        d_->func_param = function_param;
   d5a8e:	e9c0 3702 	strd	r3, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5a96:	e9cd 0300 	strd	r0, r3, [sp]
   d5a9a:	2202      	movs	r2, #2
   d5a9c:	4b12      	ldr	r3, [pc, #72]	; (d5ae8 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d5a9e:	3004      	adds	r0, #4
   d5aa0:	f002 f8ee 	bl	d7c80 <os_thread_create>
   d5aa4:	b930      	cbnz	r0, d5ab4 <_ZN12AssetTracker17startThreadedModeEv+0x58>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5aa6:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5aa8:	7c1b      	ldrb	r3, [r3, #16]
   d5aaa:	b9a3      	cbnz	r3, d5ad6 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
            HAL_Delay_Milliseconds(1);
   d5aac:	2001      	movs	r0, #1
   d5aae:	f002 f947 	bl	d7d40 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5ab2:	e7f8      	b.n	d5aa6 <_ZN12AssetTracker17startThreadedModeEv+0x4a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ab4:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ab6:	2300      	movs	r3, #0
   d5ab8:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5aba:	b164      	cbz	r4, d5ad6 <_ZN12AssetTracker17startThreadedModeEv+0x7a>
	if (__ptr != nullptr)
   d5abc:	6826      	ldr	r6, [r4, #0]
   d5abe:	b136      	cbz	r6, d5ace <_ZN12AssetTracker17startThreadedModeEv+0x72>
    class function<_Res(_ArgTypes...)>
   d5ac0:	4630      	mov	r0, r6
   d5ac2:	f7ff ff87 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5ac6:	2110      	movs	r1, #16
   d5ac8:	4630      	mov	r0, r6
   d5aca:	f004 fa7e 	bl	d9fca <_ZdlPvj>
   d5ace:	2114      	movs	r1, #20
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	f004 fa7a 	bl	d9fca <_ZdlPvj>
   d5ad6:	61bd      	str	r5, [r7, #24]
	}
}
   d5ad8:	b003      	add	sp, #12
   d5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5adc:	000dd4d4 	.word	0x000dd4d4
   d5ae0:	000d5ce5 	.word	0x000d5ce5
   d5ae4:	000dcf7c 	.word	0x000dcf7c
   d5ae8:	000d5935 	.word	0x000d5935

000d5aec <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5aec:	b510      	push	{r4, lr}
	useWire = true;
   d5aee:	2301      	movs	r3, #1
   d5af0:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d5af2:	68c3      	ldr	r3, [r0, #12]
AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5af4:	4604      	mov	r4, r0
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5af6:	6848      	ldr	r0, [r1, #4]
class Print
   d5af8:	6058      	str	r0, [r3, #4]
   d5afa:	6888      	ldr	r0, [r1, #8]
   d5afc:	6098      	str	r0, [r3, #8]
   d5afe:	68c8      	ldr	r0, [r1, #12]
   d5b00:	60d8      	str	r0, [r3, #12]
class TwoWire : public Stream
   d5b02:	7c08      	ldrb	r0, [r1, #16]
   d5b04:	7418      	strb	r0, [r3, #16]
	this->wireAddr = addr;

	wire.begin();
   d5b06:	4608      	mov	r0, r1
	this->wireAddr = addr;
   d5b08:	7422      	strb	r2, [r4, #16]
	wire.begin();
   d5b0a:	f003 f925 	bl	d8d58 <_ZN7TwoWire5beginEv>

	return *this;
}
   d5b0e:	4620      	mov	r0, r4
   d5b10:	bd10      	pop	{r4, pc}
	...

000d5b14 <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d5b14:	b538      	push	{r3, r4, r5, lr}
   d5b16:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d5b18:	7c01      	ldrb	r1, [r0, #16]
   d5b1a:	68c0      	ldr	r0, [r0, #12]
   d5b1c:	f003 f94b 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d5b20:	21fd      	movs	r1, #253	; 0xfd
   d5b22:	68e8      	ldr	r0, [r5, #12]
   d5b24:	f7ff ff78 	bl	d5a18 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5b28:	68e8      	ldr	r0, [r5, #12]
   d5b2a:	2100      	movs	r1, #0
   d5b2c:	f003 f94a 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5b30:	b130      	cbz	r0, d5b40 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d5b32:	490f      	ldr	r1, [pc, #60]	; (d5b70 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d5b34:	4602      	mov	r2, r0
   d5b36:	480f      	ldr	r0, [pc, #60]	; (d5b74 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d5b38:	f7fe fbaa 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d5b3c:	2000      	movs	r0, #0

	uint16_t available = wire.read() << 8;
	available |= wire.read();

	return available;
}
   d5b3e:	bd38      	pop	{r3, r4, r5, pc}
	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d5b40:	2202      	movs	r2, #2
   d5b42:	7c29      	ldrb	r1, [r5, #16]
   d5b44:	68e8      	ldr	r0, [r5, #12]
   d5b46:	2301      	movs	r3, #1
   d5b48:	f003 f923 	bl	d8d92 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d5b4c:	b2c2      	uxtb	r2, r0
   d5b4e:	2a02      	cmp	r2, #2
   d5b50:	d001      	beq.n	d5b56 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d5b52:	4909      	ldr	r1, [pc, #36]	; (d5b78 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d5b54:	e7ef      	b.n	d5b36 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
	uint16_t available = wire.read() << 8;
   d5b56:	68e8      	ldr	r0, [r5, #12]
   d5b58:	6803      	ldr	r3, [r0, #0]
   d5b5a:	695b      	ldr	r3, [r3, #20]
   d5b5c:	4798      	blx	r3
   d5b5e:	4604      	mov	r4, r0
	available |= wire.read();
   d5b60:	68e8      	ldr	r0, [r5, #12]
   d5b62:	6803      	ldr	r3, [r0, #0]
   d5b64:	695b      	ldr	r3, [r3, #20]
   d5b66:	4798      	blx	r3
   d5b68:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5b6c:	b280      	uxth	r0, r0
	return available;
   d5b6e:	e7e6      	b.n	d5b3e <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2a>
   d5b70:	000dcf89 	.word	0x000dcf89
   d5b74:	2003e5ec 	.word	0x2003e5ec
   d5b78:	000dcfad 	.word	0x000dcfad

000d5b7c <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b80:	4606      	mov	r6, r0
   d5b82:	4688      	mov	r8, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d5b84:	7c01      	ldrb	r1, [r0, #16]
   d5b86:	68c0      	ldr	r0, [r0, #12]
int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b88:	4615      	mov	r5, r2
	wire.beginTransmission(wireAddr);
   d5b8a:	f003 f914 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d5b8e:	21ff      	movs	r1, #255	; 0xff
   d5b90:	68f0      	ldr	r0, [r6, #12]
   d5b92:	f7ff ff41 	bl	d5a18 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5b96:	68f0      	ldr	r0, [r6, #12]
   d5b98:	2100      	movs	r1, #0
   d5b9a:	f003 f913 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5b9e:	4602      	mov	r2, r0
   d5ba0:	b138      	cbz	r0, d5bb2 <_ZN12AssetTracker13wireReadBytesEPhj+0x36>
		Log.info("wireReadBytes I2C error %u", res);
   d5ba2:	4916      	ldr	r1, [pc, #88]	; (d5bfc <_ZN12AssetTracker13wireReadBytesEPhj+0x80>)
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
   d5ba4:	4816      	ldr	r0, [pc, #88]	; (d5c00 <_ZN12AssetTracker13wireReadBytesEPhj+0x84>)
   d5ba6:	f7fe fb73 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d5baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
 	}
	return len;
}
   d5bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t offset = 0;
   d5bb2:	4604      	mov	r4, r0
	while(offset < len) {
   d5bb4:	42a5      	cmp	r5, r4
   d5bb6:	d91f      	bls.n	d5bf8 <_ZN12AssetTracker13wireReadBytesEPhj+0x7c>
		size_t reqLen = (len - offset);
   d5bb8:	1b2f      	subs	r7, r5, r4
		if (reqLen > 32) {
   d5bba:	2f20      	cmp	r7, #32
   d5bbc:	bf28      	it	cs
   d5bbe:	2720      	movcs	r7, #32
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d5bc0:	eb04 0907 	add.w	r9, r4, r7
   d5bc4:	eba5 0209 	sub.w	r2, r5, r9
   d5bc8:	4253      	negs	r3, r2
   d5bca:	4153      	adcs	r3, r2
   d5bcc:	7c31      	ldrb	r1, [r6, #16]
   d5bce:	68f0      	ldr	r0, [r6, #12]
   d5bd0:	463a      	mov	r2, r7
   d5bd2:	f003 f8de 	bl	d8d92 <_ZN7TwoWire11requestFromEhjh>
		if (res != reqLen) {
   d5bd6:	b2c2      	uxtb	r2, r0
   d5bd8:	4297      	cmp	r7, r2
   d5bda:	d001      	beq.n	d5be0 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d5bdc:	4909      	ldr	r1, [pc, #36]	; (d5c04 <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d5bde:	e7e1      	b.n	d5ba4 <_ZN12AssetTracker13wireReadBytesEPhj+0x28>
   d5be0:	4444      	add	r4, r8
   d5be2:	4427      	add	r7, r4
			buf[offset + ii] = wire.read();
   d5be4:	68f0      	ldr	r0, [r6, #12]
   d5be6:	6803      	ldr	r3, [r0, #0]
   d5be8:	695b      	ldr	r3, [r3, #20]
   d5bea:	4798      	blx	r3
   d5bec:	f804 0b01 	strb.w	r0, [r4], #1
		for(size_t ii = 0; ii < reqLen; ii++) {
   d5bf0:	42bc      	cmp	r4, r7
   d5bf2:	d1f7      	bne.n	d5be4 <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
		offset += reqLen;
   d5bf4:	464c      	mov	r4, r9
   d5bf6:	e7dd      	b.n	d5bb4 <_ZN12AssetTracker13wireReadBytesEPhj+0x38>
	return len;
   d5bf8:	4628      	mov	r0, r5
   d5bfa:	e7d8      	b.n	d5bae <_ZN12AssetTracker13wireReadBytesEPhj+0x32>
   d5bfc:	000dcfd7 	.word	0x000dcfd7
   d5c00:	2003e5ec 	.word	0x2003e5ec
   d5c04:	000dcff2 	.word	0x000dcff2

000d5c08 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5c08:	4800      	ldr	r0, [pc, #0]	; (d5c0c <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d5c0a:	4770      	bx	lr
   d5c0c:	2003e3d0 	.word	0x2003e3d0

000d5c10 <_ZNKSt8functionIFbcEEclEc>:
    function<_Res(_ArgTypes...)>::
   d5c10:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d5c12:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5c14:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
   d5c18:	b90a      	cbnz	r2, d5c1e <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d5c1a:	f004 f9dc 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c1e:	68c3      	ldr	r3, [r0, #12]
   d5c20:	f10d 0107 	add.w	r1, sp, #7
   d5c24:	4798      	blx	r3
    }
   d5c26:	b003      	add	sp, #12
   d5c28:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c2c <_ZN12AssetTracker9updateGPSEv>:
void AssetTracker::updateGPS(void) {
   d5c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
   d5c30:	7a03      	ldrb	r3, [r0, #8]
void AssetTracker::updateGPS(void) {
   d5c32:	b08a      	sub	sp, #40	; 0x28
   d5c34:	4604      	mov	r4, r0
	if (!useWire) {
   d5c36:	b9cb      	cbnz	r3, d5c6c <_ZN12AssetTracker9updateGPSEv+0x40>
			gps.encode(c);
   d5c38:	4e25      	ldr	r6, [pc, #148]	; (d5cd0 <_ZN12AssetTracker9updateGPSEv+0xa4>)
				externalDecoder(c);
   d5c3a:	f100 0520 	add.w	r5, r0, #32
		while (serialPort.available() > 0) {
   d5c3e:	6960      	ldr	r0, [r4, #20]
   d5c40:	6803      	ldr	r3, [r0, #0]
   d5c42:	691b      	ldr	r3, [r3, #16]
   d5c44:	4798      	blx	r3
   d5c46:	2800      	cmp	r0, #0
   d5c48:	dd1f      	ble.n	d5c8a <_ZN12AssetTracker9updateGPSEv+0x5e>
			char c = (char)serialPort.read();
   d5c4a:	6960      	ldr	r0, [r4, #20]
   d5c4c:	6803      	ldr	r3, [r0, #0]
   d5c4e:	695b      	ldr	r3, [r3, #20]
   d5c50:	4798      	blx	r3
   d5c52:	b2c1      	uxtb	r1, r0
			gps.encode(c);
   d5c54:	4630      	mov	r0, r6
   d5c56:	9101      	str	r1, [sp, #4]
   d5c58:	f000 fb74 	bl	d6344 <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d5c5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c5e:	9901      	ldr	r1, [sp, #4]
   d5c60:	2b00      	cmp	r3, #0
   d5c62:	d0ec      	beq.n	d5c3e <_ZN12AssetTracker9updateGPSEv+0x12>
				externalDecoder(c);
   d5c64:	4628      	mov	r0, r5
   d5c66:	f7ff ffd3 	bl	d5c10 <_ZNKSt8functionIFbcEEclEc>
   d5c6a:	e7e8      	b.n	d5c3e <_ZN12AssetTracker9updateGPSEv+0x12>
		WITH_LOCK(wire) {
   d5c6c:	f8d0 800c 	ldr.w	r8, [r0, #12]
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5c70:	4640      	mov	r0, r8
   d5c72:	f003 f8ab 	bl	d8dcc <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff ff4c 	bl	d5b14 <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d5c7c:	2820      	cmp	r0, #32
			uint16_t available = wireReadBytesAvailable();
   d5c7e:	4605      	mov	r5, r0
			if (available > 32) {
   d5c80:	d806      	bhi.n	d5c90 <_ZN12AssetTracker9updateGPSEv+0x64>
			if (available > 0) {
   d5c82:	b930      	cbnz	r0, d5c92 <_ZN12AssetTracker9updateGPSEv+0x66>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5c84:	4640      	mov	r0, r8
   d5c86:	f003 f8aa 	bl	d8dde <_ZN7TwoWire6unlockEv>
}
   d5c8a:	b00a      	add	sp, #40	; 0x28
   d5c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				available = 32;
   d5c90:	2520      	movs	r5, #32
				if (wireReadBytes(buf, available) == available) {
   d5c92:	462a      	mov	r2, r5
   d5c94:	a902      	add	r1, sp, #8
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ff70 	bl	d5b7c <_ZN12AssetTracker13wireReadBytesEPhj>
   d5c9c:	42a8      	cmp	r0, r5
   d5c9e:	d1f1      	bne.n	d5c84 <_ZN12AssetTracker9updateGPSEv+0x58>
						gps.encode(buf[ii]);
   d5ca0:	f8df 902c 	ldr.w	r9, [pc, #44]	; d5cd0 <_ZN12AssetTracker9updateGPSEv+0xa4>
   d5ca4:	ae02      	add	r6, sp, #8
					for(uint16_t ii = 0; ii < available; ii++) {
   d5ca6:	2700      	movs	r7, #0
							externalDecoder(buf[ii]);
   d5ca8:	f104 0a20 	add.w	sl, r4, #32
						gps.encode(buf[ii]);
   d5cac:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5cb0:	4648      	mov	r0, r9
   d5cb2:	f000 fb47 	bl	d6344 <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d5cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5cb8:	b123      	cbz	r3, d5cc4 <_ZN12AssetTracker9updateGPSEv+0x98>
							externalDecoder(buf[ii]);
   d5cba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d5cbe:	4650      	mov	r0, sl
   d5cc0:	f7ff ffa6 	bl	d5c10 <_ZNKSt8functionIFbcEEclEc>
					for(uint16_t ii = 0; ii < available; ii++) {
   d5cc4:	3701      	adds	r7, #1
   d5cc6:	b2bf      	uxth	r7, r7
   d5cc8:	42bd      	cmp	r5, r7
   d5cca:	d1ef      	bne.n	d5cac <_ZN12AssetTracker9updateGPSEv+0x80>
   d5ccc:	e7da      	b.n	d5c84 <_ZN12AssetTracker9updateGPSEv+0x58>
   d5cce:	bf00      	nop
   d5cd0:	2003e3d0 	.word	0x2003e3d0

000d5cd4 <_ZN12AssetTracker14threadFunctionEv>:
void AssetTracker::threadFunction() {
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4604      	mov	r4, r0
		updateGPS();
   d5cd8:	4620      	mov	r0, r4
   d5cda:	f7ff ffa7 	bl	d5c2c <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d5cde:	f001 ffd7 	bl	d7c90 <os_thread_yield>
	while(true) {
   d5ce2:	e7f9      	b.n	d5cd8 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d5ce4 <_ZN12AssetTracker20threadFunctionStaticEPv>:
void AssetTracker::threadFunctionStatic(void *param) {
   d5ce4:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d5ce6:	f7ff fff5 	bl	d5cd4 <_ZN12AssetTracker14threadFunctionEv>
	...

000d5cec <_GLOBAL__sub_I_emptyResponse>:
}
   d5cec:	b537      	push	{r0, r1, r2, r4, r5, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d5cee:	4c19      	ldr	r4, [pc, #100]	; (d5d54 <_GLOBAL__sub_I_emptyResponse+0x68>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5cf0:	4d19      	ldr	r5, [pc, #100]	; (d5d58 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d5cf2:	2108      	movs	r1, #8
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	f000 fd13 	bl	d6720 <_ZN6LIS3DHC1Ei>
   d5cfa:	4b18      	ldr	r3, [pc, #96]	; (d5d5c <_GLOBAL__sub_I_emptyResponse+0x70>)
   d5cfc:	6023      	str	r3, [r4, #0]
   d5cfe:	7829      	ldrb	r1, [r5, #0]
   d5d00:	f3bf 8f5b 	dmb	ish
   d5d04:	f011 0101 	ands.w	r1, r1, #1
   d5d08:	d10b      	bne.n	d5d22 <_GLOBAL__sub_I_emptyResponse+0x36>
   d5d0a:	4628      	mov	r0, r5
   d5d0c:	9101      	str	r1, [sp, #4]
   d5d0e:	f7fe f9d3 	bl	d40b8 <__cxa_guard_acquire>
   d5d12:	9901      	ldr	r1, [sp, #4]
   d5d14:	b128      	cbz	r0, d5d22 <_GLOBAL__sub_I_emptyResponse+0x36>
   d5d16:	4812      	ldr	r0, [pc, #72]	; (d5d60 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5d18:	f003 fb3e 	bl	d9398 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5d1c:	4628      	mov	r0, r5
   d5d1e:	f7fe f9d0 	bl	d40c2 <__cxa_guard_release>
   d5d22:	4b0f      	ldr	r3, [pc, #60]	; (d5d60 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5d24:	60e3      	str	r3, [r4, #12]
   d5d26:	2311      	movs	r3, #17
   d5d28:	6123      	str	r3, [r4, #16]
   d5d2a:	2300      	movs	r3, #0
   d5d2c:	7523      	strb	r3, [r4, #20]
      dataMode_{dataMode}
   d5d2e:	7723      	strb	r3, [r4, #28]
   d5d30:	4a0c      	ldr	r2, [pc, #48]	; (d5d64 <_GLOBAL__sub_I_emptyResponse+0x78>)
   d5d32:	4b0d      	ldr	r3, [pc, #52]	; (d5d68 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d5d34:	61a2      	str	r2, [r4, #24]
   d5d36:	6223      	str	r3, [r4, #32]
static LIS3DHSPI accel(SPI, A2, WKP);
   d5d38:	4a0c      	ldr	r2, [pc, #48]	; (d5d6c <_GLOBAL__sub_I_emptyResponse+0x80>)
   d5d3a:	490d      	ldr	r1, [pc, #52]	; (d5d70 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d5d3c:	4805      	ldr	r0, [pc, #20]	; (d5d54 <_GLOBAL__sub_I_emptyResponse+0x68>)
   d5d3e:	2301      	movs	r3, #1
   d5d40:	84a3      	strh	r3, [r4, #36]	; 0x24
   d5d42:	f004 f93d 	bl	d9fc0 <__aeabi_atexit>
static TinyGPSPlus gps;
   d5d46:	480b      	ldr	r0, [pc, #44]	; (d5d74 <_GLOBAL__sub_I_emptyResponse+0x88>)
}
   d5d48:	b003      	add	sp, #12
   d5d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
static TinyGPSPlus gps;
   d5d4e:	f000 b85e 	b.w	d5e0e <_ZN11TinyGPSPlusC1Ev>
   d5d52:	bf00      	nop
   d5d54:	2003e570 	.word	0x2003e570
   d5d58:	2003e3c4 	.word	0x2003e3c4
   d5d5c:	000dd090 	.word	0x000dd090
   d5d60:	2003e3c8 	.word	0x2003e3c8
   d5d64:	000dd01c 	.word	0x000dd01c
   d5d68:	00989680 	.word	0x00989680
   d5d6c:	2003e1f8 	.word	0x2003e1f8
   d5d70:	000d6661 	.word	0x000d6661
   d5d74:	2003e3d0 	.word	0x2003e3d0

000d5d78 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d5d78:	4770      	bx	lr

000d5d7a <_ZN13LegacyAdapterD0Ev>:
LegacyAdapter::~LegacyAdapter() {
   d5d7a:	b510      	push	{r4, lr}
}
   d5d7c:	2108      	movs	r1, #8
LegacyAdapter::~LegacyAdapter() {
   d5d7e:	4604      	mov	r4, r0
}
   d5d80:	f004 f923 	bl	d9fca <_ZdlPvj>
   d5d84:	4620      	mov	r0, r4
   d5d86:	bd10      	pop	{r4, pc}

000d5d88 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:
LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d5d88:	4a01      	ldr	r2, [pc, #4]	; (d5d90 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d5d8a:	e9c0 2100 	strd	r2, r1, [r0]
}
   d5d8e:	4770      	bx	lr
   d5d90:	000dd040 	.word	0x000dd040

000d5d94 <_ZN11TinyGPSDataC1Ev>:
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d94:	2200      	movs	r2, #0
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5d96:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5d9a:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d9e:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   d5da2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5da6:	8002      	strh	r2, [r0, #0]
	RawDegrees() : deg(0), billionths(0), negative(false)
   d5da8:	8082      	strh	r2, [r0, #4]
   d5daa:	6082      	str	r2, [r0, #8]
   d5dac:	7302      	strb	r2, [r0, #12]
   d5dae:	8202      	strh	r2, [r0, #16]
   d5db0:	6142      	str	r2, [r0, #20]
   d5db2:	7602      	strb	r2, [r0, #24]
   d5db4:	8382      	strh	r2, [r0, #28]
   d5db6:	6202      	str	r2, [r0, #32]
   d5db8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5dbc:	8502      	strh	r2, [r0, #40]	; 0x28
   d5dbe:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5dc0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5dc4:	6342      	str	r2, [r0, #52]	; 0x34
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5dc6:	8702      	strh	r2, [r0, #56]	; 0x38
   d5dc8:	6442      	str	r2, [r0, #68]	; 0x44
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5dca:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d5dce:	6542      	str	r2, [r0, #84]	; 0x54
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dd0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d5dd4:	6642      	str	r2, [r0, #100]	; 0x64
   d5dd6:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d5dda:	6742      	str	r2, [r0, #116]	; 0x74
   d5ddc:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d5de0:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   d5de4:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5de8:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dec:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   d5df0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d5df4:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d5df8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dfc:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d5e00:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5e04:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
   d5e08:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
class TinyGPSData {
   d5e0c:	4770      	bx	lr

000d5e0e <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d5e0e:	b510      	push	{r4, lr}
   d5e10:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5e12:	f7ff ffbf 	bl	d5d94 <_ZN11TinyGPSDataC1Ev>
   d5e16:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d5e1a:	f7ff ffbb 	bl	d5d94 <_ZN11TinyGPSDataC1Ev>
   d5e1e:	2302      	movs	r3, #2
   d5e20:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
   d5e24:	2300      	movs	r3, #0
   d5e26:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
   d5e2a:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
   d5e2e:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
   d5e32:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
   d5e36:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d5e3a:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
{
  term[0] = '\0';
   d5e3e:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d5e42:	4620      	mov	r0, r4
   d5e44:	bd10      	pop	{r4, pc}

000d5e46 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5e46:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5e4a:	2b05      	cmp	r3, #5
   d5e4c:	d802      	bhi.n	d5e54 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5e4e:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5e52:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5e54:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5e58:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5e5a:	bf94      	ite	ls
   d5e5c:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5e60:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5e64:	4770      	bx	lr

000d5e66 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5e66:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5e68:	7805      	ldrb	r5, [r0, #0]
{
   d5e6a:	4604      	mov	r4, r0
  if (negative) ++term;
   d5e6c:	2d2d      	cmp	r5, #45	; 0x2d
   d5e6e:	bf08      	it	eq
   d5e70:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5e72:	4620      	mov	r0, r4
   d5e74:	f004 ff78 	bl	dad68 <atol>
   d5e78:	2364      	movs	r3, #100	; 0x64
   d5e7a:	4358      	muls	r0, r3
   d5e7c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5e7e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5e82:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5e86:	2909      	cmp	r1, #9
   d5e88:	d9f8      	bls.n	d5e7c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5e8a:	2b2e      	cmp	r3, #46	; 0x2e
   d5e8c:	d10b      	bne.n	d5ea6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5e8e:	7853      	ldrb	r3, [r2, #1]
   d5e90:	3b30      	subs	r3, #48	; 0x30
   d5e92:	2b09      	cmp	r3, #9
   d5e94:	d807      	bhi.n	d5ea6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5e96:	210a      	movs	r1, #10
   d5e98:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5e9c:	7893      	ldrb	r3, [r2, #2]
   d5e9e:	3b30      	subs	r3, #48	; 0x30
   d5ea0:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5ea2:	bf98      	it	ls
   d5ea4:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5ea6:	2d2d      	cmp	r5, #45	; 0x2d
   d5ea8:	bf08      	it	eq
   d5eaa:	4240      	negeq	r0, r0
}
   d5eac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5eb0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5eb0:	b538      	push	{r3, r4, r5, lr}
   d5eb2:	460d      	mov	r5, r1
   d5eb4:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5eb6:	f004 ff57 	bl	dad68 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5eba:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5ebc:	4b13      	ldr	r3, [pc, #76]	; (d5f0c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5ebe:	fbb0 f1f2 	udiv	r1, r0, r2
   d5ec2:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5ec6:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5ec8:	8029      	strh	r1, [r5, #0]
   d5eca:	4620      	mov	r0, r4

  while (isdigit(*term))
   d5ecc:	7802      	ldrb	r2, [r0, #0]
   d5ece:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d5ed2:	2c09      	cmp	r4, #9
   d5ed4:	4601      	mov	r1, r0
   d5ed6:	f100 0001 	add.w	r0, r0, #1
   d5eda:	d9f7      	bls.n	d5ecc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5edc:	2a2e      	cmp	r2, #46	; 0x2e
   d5ede:	d10b      	bne.n	d5ef8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d5ee0:	480a      	ldr	r0, [pc, #40]	; (d5f0c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5ee2:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d5ee4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5ee8:	3a30      	subs	r2, #48	; 0x30
   d5eea:	2a09      	cmp	r2, #9
   d5eec:	d804      	bhi.n	d5ef8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d5eee:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5ef2:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d5ef6:	e7f5      	b.n	d5ee4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5ef8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5efc:	3301      	adds	r3, #1
   d5efe:	2203      	movs	r2, #3
   d5f00:	fbb3 f3f2 	udiv	r3, r3, r2
   d5f04:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5f06:	2300      	movs	r3, #0
   d5f08:	722b      	strb	r3, [r5, #8]
}
   d5f0a:	bd38      	pop	{r3, r4, r5, pc}
   d5f0c:	00989680 	.word	0x00989680

000d5f10 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5f10:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5f12:	4603      	mov	r3, r0
{
   d5f14:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5f16:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5f1a:	6042      	str	r2, [r0, #4]
   d5f1c:	685a      	ldr	r2, [r3, #4]
   d5f1e:	6082      	str	r2, [r0, #8]
   d5f20:	7a1b      	ldrb	r3, [r3, #8]
   d5f22:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5f24:	4603      	mov	r3, r0
   d5f26:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5f2a:	6102      	str	r2, [r0, #16]
   d5f2c:	685a      	ldr	r2, [r3, #4]
   d5f2e:	6142      	str	r2, [r0, #20]
   d5f30:	7a1b      	ldrb	r3, [r3, #8]
   d5f32:	7603      	strb	r3, [r0, #24]
   d5f34:	f001 ff14 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f38:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5f3c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5f3e:	8023      	strh	r3, [r4, #0]
}
   d5f40:	bd10      	pop	{r4, pc}
   d5f42:	0000      	movs	r0, r0
   d5f44:	0000      	movs	r0, r0
	...

000d5f48 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5f48:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5f4a:	2300      	movs	r3, #0
{
   d5f4c:	4604      	mov	r4, r0
   updated = false;
   d5f4e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5f50:	6880      	ldr	r0, [r0, #8]
   d5f52:	f004 f985 	bl	da260 <__aeabi_ui2d>
   d5f56:	a30c      	add	r3, pc, #48	; (adr r3, d5f88 <_ZN15TinyGPSLocation3latEv+0x40>)
   d5f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f5c:	f004 fb24 	bl	da5a8 <__aeabi_ddiv>
   d5f60:	4606      	mov	r6, r0
   d5f62:	88a0      	ldrh	r0, [r4, #4]
   d5f64:	460f      	mov	r7, r1
   d5f66:	f004 f98b 	bl	da280 <__aeabi_i2d>
   d5f6a:	460b      	mov	r3, r1
   d5f6c:	4602      	mov	r2, r0
   d5f6e:	4639      	mov	r1, r7
   d5f70:	4630      	mov	r0, r6
   d5f72:	f004 f839 	bl	d9fe8 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5f76:	7b23      	ldrb	r3, [r4, #12]
   d5f78:	b113      	cbz	r3, d5f80 <_ZN15TinyGPSLocation3latEv+0x38>
   d5f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5f7e:	4619      	mov	r1, r3
}
   d5f80:	ec41 0b10 	vmov	d0, r0, r1
   d5f84:	bdd0      	pop	{r4, r6, r7, pc}
   d5f86:	bf00      	nop
   d5f88:	00000000 	.word	0x00000000
   d5f8c:	41cdcd65 	.word	0x41cdcd65

000d5f90 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5f90:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5f92:	2300      	movs	r3, #0
{
   d5f94:	4604      	mov	r4, r0
   updated = false;
   d5f96:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5f98:	6940      	ldr	r0, [r0, #20]
   d5f9a:	f004 f961 	bl	da260 <__aeabi_ui2d>
   d5f9e:	a30c      	add	r3, pc, #48	; (adr r3, d5fd0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d5fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fa4:	f004 fb00 	bl	da5a8 <__aeabi_ddiv>
   d5fa8:	4606      	mov	r6, r0
   d5faa:	8a20      	ldrh	r0, [r4, #16]
   d5fac:	460f      	mov	r7, r1
   d5fae:	f004 f967 	bl	da280 <__aeabi_i2d>
   d5fb2:	460b      	mov	r3, r1
   d5fb4:	4602      	mov	r2, r0
   d5fb6:	4639      	mov	r1, r7
   d5fb8:	4630      	mov	r0, r6
   d5fba:	f004 f815 	bl	d9fe8 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5fbe:	7e23      	ldrb	r3, [r4, #24]
   d5fc0:	b113      	cbz	r3, d5fc8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d5fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5fc6:	4619      	mov	r1, r3
}
   d5fc8:	ec41 0b10 	vmov	d0, r0, r1
   d5fcc:	bdd0      	pop	{r4, r6, r7, pc}
   d5fce:	bf00      	nop
   d5fd0:	00000000 	.word	0x00000000
   d5fd4:	41cdcd65 	.word	0x41cdcd65

000d5fd8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5fd8:	b510      	push	{r4, lr}
   date = newDate;
   d5fda:	6883      	ldr	r3, [r0, #8]
   d5fdc:	6043      	str	r3, [r0, #4]
{
   d5fde:	4604      	mov	r4, r0
   d5fe0:	f001 febe 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5fe4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5fe8:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5fea:	8023      	strh	r3, [r4, #0]
}
   d5fec:	bd10      	pop	{r4, pc}

000d5fee <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d5fee:	b510      	push	{r4, lr}
   time = newTime;
   d5ff0:	6883      	ldr	r3, [r0, #8]
   d5ff2:	6043      	str	r3, [r0, #4]
{
   d5ff4:	4604      	mov	r4, r0
   d5ff6:	f001 feb3 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5ffa:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5ffe:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6000:	8023      	strh	r3, [r4, #0]
}
   d6002:	bd10      	pop	{r4, pc}

000d6004 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d6004:	b510      	push	{r4, lr}
   d6006:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6008:	4608      	mov	r0, r1
   d600a:	f7ff ff2c 	bl	d5e66 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d600e:	60a0      	str	r0, [r4, #8]
}
   d6010:	bd10      	pop	{r4, pc}

000d6012 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d6012:	b510      	push	{r4, lr}
   d6014:	4604      	mov	r4, r0
   newDate = atol(term);
   d6016:	4608      	mov	r0, r1
   d6018:	f004 fea6 	bl	dad68 <atol>
   d601c:	60a0      	str	r0, [r4, #8]
}
   d601e:	bd10      	pop	{r4, pc}

000d6020 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6020:	b510      	push	{r4, lr}
   val = newval;
   d6022:	68c3      	ldr	r3, [r0, #12]
   d6024:	6083      	str	r3, [r0, #8]
{
   d6026:	4604      	mov	r4, r0
   d6028:	f001 fe9a 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d602c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6030:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6032:	8023      	strh	r3, [r4, #0]
}
   d6034:	bd10      	pop	{r4, pc}

000d6036 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d6036:	b510      	push	{r4, lr}
   d6038:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d603a:	4608      	mov	r0, r1
   d603c:	f7ff ff13 	bl	d5e66 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6040:	60e0      	str	r0, [r4, #12]
}
   d6042:	bd10      	pop	{r4, pc}

000d6044 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d6044:	b510      	push	{r4, lr}
   val = newval;
   d6046:	68c3      	ldr	r3, [r0, #12]
   d6048:	6083      	str	r3, [r0, #8]
{
   d604a:	4604      	mov	r4, r0
   d604c:	f001 fe88 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6050:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6054:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6056:	8023      	strh	r3, [r4, #0]
}
   d6058:	bd10      	pop	{r4, pc}

000d605a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d605a:	b510      	push	{r4, lr}
   d605c:	4604      	mov	r4, r0
   newval = atol(term);
   d605e:	4608      	mov	r0, r1
   d6060:	f004 fe82 	bl	dad68 <atol>
   d6064:	60e0      	str	r0, [r4, #12]
}
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6068:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d606a:	4601      	mov	r1, r0
{
   d606c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d606e:	3010      	adds	r0, #16
   d6070:	f005 fb20 	bl	db6b4 <strcpy>
   d6074:	f001 fe74 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6078:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d607c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d607e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d6080:	bd10      	pop	{r4, pc}

000d6082 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6082:	2210      	movs	r2, #16
   d6084:	f006 b8b2 	b.w	dc1ec <strncpy>

000d6088 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d6088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d608a:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
{
   d608e:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d6090:	2d00      	cmp	r5, #0
   d6092:	f000 8088 	beq.w	d61a6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6096:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d609a:	f7ff fed4 	bl	d5e46 <_ZN11TinyGPSPlus7fromHexEc>
   d609e:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d60a2:	4602      	mov	r2, r0
   d60a4:	4620      	mov	r0, r4
   d60a6:	f7ff fece 	bl	d5e46 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d60aa:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d60ae:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d60b2:	b2c0      	uxtb	r0, r0
   d60b4:	4283      	cmp	r3, r0
   d60b6:	d16e      	bne.n	d6196 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      passedChecksumCount++;
   d60b8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d60bc:	3301      	adds	r3, #1
   d60be:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d60c2:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d60c6:	b123      	cbz	r3, d60d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d60c8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d60cc:	3301      	adds	r3, #1
   d60ce:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
      switch(curSentenceType)
   d60d2:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d60d6:	b3e3      	cbz	r3, d6152 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xca>
   d60d8:	2b01      	cmp	r3, #1
   d60da:	d12b      	bne.n	d6134 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
    	tempData.date.commit();
   d60dc:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d60e0:	f7ff ff7a 	bl	d5fd8 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d60e4:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d60e8:	f7ff ff81 	bl	d5fee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d60ec:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d60f0:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d60f4:	b15b      	cbz	r3, d610e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x86>
           tempData.location.commit();
   d60f6:	4630      	mov	r0, r6
   d60f8:	f7ff ff0a 	bl	d5f10 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d60fc:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6100:	f7ff ff8e 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6104:	f504 7090 	add.w	r0, r4, #288	; 0x120
        tempData.hdop.commit();
   d6108:	f7ff ff8a 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
   d610c:	e005      	b.n	d611a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
	void invalidate() { valid = false; }
   d610e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6112:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6116:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        os_thread_scheduling(false, NULL);
   d611a:	2100      	movs	r1, #0
   d611c:	4608      	mov	r0, r1
   d611e:	f001 fdbf 	bl	d7ca0 <os_thread_scheduling>
        	TinyGPSData::operator=(tempData);
   d6122:	4631      	mov	r1, r6
   d6124:	22b8      	movs	r2, #184	; 0xb8
   d6126:	4620      	mov	r0, r4
   d6128:	f004 ffe8 	bl	db0fc <memcpy>
        os_thread_scheduling(true, NULL);
   d612c:	2100      	movs	r1, #0
   d612e:	2001      	movs	r0, #1
   d6130:	f001 fdb6 	bl	d7ca0 <os_thread_scheduling>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6134:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d6138:	b39e      	cbz	r6, d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d613a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d613e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6140:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6142:	f005 faad 	bl	db6a0 <strcmp>
   d6146:	bb60      	cbnz	r0, d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
         p->commit();
   d6148:	4630      	mov	r0, r6
   d614a:	f7ff ff8d 	bl	d6068 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d614e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6150:	e7f2      	b.n	d6138 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        tempData.time.commit();
   d6152:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6156:	f7ff ff4a 	bl	d5fee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d615a:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d615e:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6162:	b18b      	cbz	r3, d6188 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
          tempData.location.commit();
   d6164:	4630      	mov	r0, r6
   d6166:	f7ff fed3 	bl	d5f10 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d616a:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d616e:	f7ff ff57 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d6172:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d6176:	f7ff ff53 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
        tempData.satellites.commit();
   d617a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d617e:	f7ff ff61 	bl	d6044 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d6182:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d6186:	e7bf      	b.n	d6108 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
	void invalidate() { valid = false; }
   d6188:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d618c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d6190:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
   d6194:	e7f1      	b.n	d617a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      ++failedChecksumCount;
   d6196:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d619a:	3301      	adds	r3, #1
   d619c:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    return false;
   d61a0:	2500      	movs	r5, #0
}
   d61a2:	4628      	mov	r0, r5
   d61a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d61a6:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d61aa:	bb6a      	cbnz	r2, d6208 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x180>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d61ac:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d61b0:	4960      	ldr	r1, [pc, #384]	; (d6334 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>)
   d61b2:	4630      	mov	r0, r6
   d61b4:	f005 fa74 	bl	db6a0 <strcmp>
   d61b8:	b120      	cbz	r0, d61c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
   d61ba:	495f      	ldr	r1, [pc, #380]	; (d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d61bc:	4630      	mov	r0, r6
   d61be:	f005 fa6f 	bl	db6a0 <strcmp>
   d61c2:	b998      	cbnz	r0, d61ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x164>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d61c4:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d61c6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d61ca:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d61ce:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d61d2:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d61d6:	2f00      	cmp	r7, #0
   d61d8:	d0e3      	beq.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d61da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d61dc:	4631      	mov	r1, r6
   d61de:	f005 fa5f 	bl	db6a0 <strcmp>
   d61e2:	2800      	cmp	r0, #0
   d61e4:	f280 809f 	bge.w	d6326 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29e>
   d61e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d61ea:	e7f0      	b.n	d61ce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d61ec:	4953      	ldr	r1, [pc, #332]	; (d633c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d61ee:	4630      	mov	r0, r6
   d61f0:	f005 fa56 	bl	db6a0 <strcmp>
   d61f4:	b120      	cbz	r0, d6200 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x178>
   d61f6:	4952      	ldr	r1, [pc, #328]	; (d6340 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d61f8:	4630      	mov	r0, r6
   d61fa:	f005 fa51 	bl	db6a0 <strcmp>
   d61fe:	b908      	cbnz	r0, d6204 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d6200:	2300      	movs	r3, #0
   d6202:	e7e0      	b.n	d61c6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
      curSentenceType = GPS_SENTENCE_OTHER;
   d6204:	2302      	movs	r3, #2
   d6206:	e7de      	b.n	d61c6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6208:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d620c:	2902      	cmp	r1, #2
   d620e:	d024      	beq.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6210:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d6214:	b30b      	cbz	r3, d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6216:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d621a:	3a01      	subs	r2, #1
   d621c:	2a28      	cmp	r2, #40	; 0x28
   d621e:	d81c      	bhi.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6220:	e8df f002 	tbb	[pc, r2]
   d6224:	4a433c15 	.word	0x4a433c15
   d6228:	726b664d 	.word	0x726b664d
   d622c:	1b7c1b77 	.word	0x1b7c1b77
   d6230:	1b1b1b1b 	.word	0x1b1b1b1b
   d6234:	1b1b1b1b 	.word	0x1b1b1b1b
   d6238:	1b1b1b1b 	.word	0x1b1b1b1b
   d623c:	1b1b1b1b 	.word	0x1b1b1b1b
   d6240:	1b1b1b1b 	.word	0x1b1b1b1b
   d6244:	433c3515 	.word	0x433c3515
   d6248:	5b544d4a 	.word	0x5b544d4a
   d624c:	60          	.byte	0x60
   d624d:	00          	.byte	0x00
	  tempData.time.setTime(term);
   d624e:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6252:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d6256:	f7ff fed5 	bl	d6004 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d625a:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
         p->set(term);
   d625e:	f504 77b9 	add.w	r7, r4, #370	; 0x172
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6262:	2e00      	cmp	r6, #0
   d6264:	d09d      	beq.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6266:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d626a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d626c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d626e:	f005 fa17 	bl	db6a0 <strcmp>
   d6272:	2800      	cmp	r0, #0
   d6274:	d195      	bne.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6276:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d6278:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d627c:	429a      	cmp	r2, r3
   d627e:	dc90      	bgt.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
    if (p->termNumber == curTermNumber)
   d6280:	d103      	bne.n	d628a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x202>
         p->set(term);
   d6282:	4639      	mov	r1, r7
   d6284:	4630      	mov	r0, r6
   d6286:	f7ff fefc 	bl	d6082 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d628a:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d628c:	e7e9      	b.n	d6262 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1da>
      sentenceHasFix = term[0] == 'A';
   d628e:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d6292:	4243      	negs	r3, r0
   d6294:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d6296:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d629a:	e7de      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d629c:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d62a0:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d62a4:	f7ff fe04 	bl	d5eb0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d62a8:	e7d7      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d62aa:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d62ae:	424b      	negs	r3, r1
   d62b0:	414b      	adcs	r3, r1
   d62b2:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d62b6:	e7d0      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d62b8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d62bc:	e7f0      	b.n	d62a0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x218>
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d62be:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d62c2:	4253      	negs	r3, r2
   d62c4:	4153      	adcs	r3, r2
   d62c6:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d62ca:	e7c6      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.speed.set(term);
   d62cc:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62d0:	f500 7088 	add.w	r0, r0, #272	; 0x110
	  tempData.geoidSeparation.set(term);
   d62d4:	f7ff feaf 	bl	d6036 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d62d8:	e7bf      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.course.set(term);
   d62da:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62de:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d62e2:	e7f7      	b.n	d62d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.date.setDate(term);
   d62e4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62e8:	30f0      	adds	r0, #240	; 0xf0
   d62ea:	f7ff fe92 	bl	d6012 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d62ee:	e7b4      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      sentenceHasFix = term[0] > '0';
   d62f0:	2b30      	cmp	r3, #48	; 0x30
   d62f2:	bf94      	ite	ls
   d62f4:	2300      	movls	r3, #0
   d62f6:	2301      	movhi	r3, #1
   d62f8:	e7cd      	b.n	d6296 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20e>
	  tempData.satellites.set(term);
   d62fa:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62fe:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d6302:	f7ff feaa 	bl	d605a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6306:	e7a8      	b.n	d625a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.hdop.set(term);
   d6308:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d630c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d6310:	e7e0      	b.n	d62d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.altitude.set(term);
   d6312:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6316:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d631a:	e7db      	b.n	d62d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.geoidSeparation.set(term);
   d631c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6320:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d6324:	e7d6      	b.n	d62d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6326:	f43f af3c 	beq.w	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
       customCandidates = NULL;
   d632a:	2300      	movs	r3, #0
   d632c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6330:	e737      	b.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6332:	bf00      	nop
   d6334:	000dd048 	.word	0x000dd048
   d6338:	000dd04e 	.word	0x000dd04e
   d633c:	000dd054 	.word	0x000dd054
   d6340:	000dd05a 	.word	0x000dd05a

000d6344 <_ZN11TinyGPSPlus6encodeEc>:
{
   d6344:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d6346:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
  switch(c)
   d634a:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d634c:	f103 0301 	add.w	r3, r3, #1
{
   d6350:	4604      	mov	r4, r0
   d6352:	460d      	mov	r5, r1
  ++encodedCharCount;
   d6354:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6358:	d03a      	beq.n	d63d0 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d635a:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d635e:	d814      	bhi.n	d638a <_ZN11TinyGPSPlus6encodeEc+0x46>
   d6360:	290a      	cmp	r1, #10
   d6362:	d01c      	beq.n	d639e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6364:	290d      	cmp	r1, #13
   d6366:	d01a      	beq.n	d639e <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d6368:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d636a:	bf9f      	itttt	ls
   d636c:	1c5a      	addls	r2, r3, #1
   d636e:	191b      	addls	r3, r3, r4
   d6370:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d6374:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d6378:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d637c:	bb98      	cbnz	r0, d63e6 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d637e:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d6382:	404d      	eors	r5, r1
   d6384:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d6388:	e021      	b.n	d63ce <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d638a:	292a      	cmp	r1, #42	; 0x2a
   d638c:	d007      	beq.n	d639e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d638e:	292c      	cmp	r1, #44	; 0x2c
   d6390:	d1ea      	bne.n	d6368 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d6392:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d6396:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d639a:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
      if (curTermOffset < sizeof(term))
   d639e:	2b0e      	cmp	r3, #14
   d63a0:	f04f 0000 	mov.w	r0, #0
   d63a4:	d805      	bhi.n	d63b2 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d63a6:	4423      	add	r3, r4
   d63a8:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d63ac:	4620      	mov	r0, r4
   d63ae:	f7ff fe6b 	bl	d6088 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d63b2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d63b6:	3301      	adds	r3, #1
   d63b8:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d63bc:	2300      	movs	r3, #0
   d63be:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d63c2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d63c6:	425d      	negs	r5, r3
   d63c8:	415d      	adcs	r5, r3
   d63ca:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
}
   d63ce:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d63d0:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d63d2:	2302      	movs	r3, #2
    parity = 0;
   d63d4:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d63d8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    curTermNumber = curTermOffset = 0;
   d63dc:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    sentenceHasFix = false;
   d63e0:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d63e4:	e7f3      	b.n	d63ce <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d63e6:	2000      	movs	r0, #0
   d63e8:	e7f1      	b.n	d63ce <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d63ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d63ea:	b513      	push	{r0, r1, r4, lr}
   d63ec:	460b      	mov	r3, r1
   d63ee:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63f0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d63f4:	466c      	mov	r4, sp
   d63f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d63fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d63fe:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6402:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6406:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d640a:	b002      	add	sp, #8
   d640c:	bd10      	pop	{r4, pc}
	...

000d6410 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
   d6410:	4b03      	ldr	r3, [pc, #12]	; (d6420 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x10>)
   d6412:	2201      	movs	r2, #1
   d6414:	701a      	strb	r2, [r3, #0]
        name_(name) {
   d6416:	4b03      	ldr	r3, [pc, #12]	; (d6424 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d6418:	4a03      	ldr	r2, [pc, #12]	; (d6428 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d641a:	601a      	str	r2, [r3, #0]
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d641c:	4770      	bx	lr
   d641e:	bf00      	nop
   d6420:	2003e5a0 	.word	0x2003e5a0
   d6424:	2003e59c 	.word	0x2003e59c
   d6428:	000dd060 	.word	0x000dd060

000d642c <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d642c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d642e:	2300      	movs	r3, #0
   d6430:	6043      	str	r3, [r0, #4]
   d6432:	6083      	str	r3, [r0, #8]
   d6434:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d6436:	6103      	str	r3, [r0, #16]
   d6438:	6143      	str	r3, [r0, #20]
  _dataCRC    = 0; 
   d643a:	8303      	strh	r3, [r0, #24]
  _readCRC    = 0;
  _singleDrop = singleDrop;
   d643c:	7682      	strb	r2, [r0, #26]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d643e:	4604      	mov	r4, r0
  ds          = new OneWire(pin);
   d6440:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d6442:	9101      	str	r1, [sp, #4]
  ds          = new OneWire(pin);
   d6444:	f7fd fe27 	bl	d4096 <_Znwj>
   d6448:	4605      	mov	r5, r0
   d644a:	b110      	cbz	r0, d6452 <_ZN7DS18B20C1Etb+0x26>
   d644c:	9901      	ldr	r1, [sp, #4]
   d644e:	f000 ffb3 	bl	d73b8 <_ZN7OneWireC1Et>
}
   d6452:	4620      	mov	r0, r4
  ds          = new OneWire(pin);
   d6454:	6025      	str	r5, [r4, #0]
}
   d6456:	b003      	add	sp, #12
   d6458:	bd30      	pop	{r4, r5, pc}

000d645a <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d645a:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d645c:	f100 0510 	add.w	r5, r0, #16
{
   d6460:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d6462:	6800      	ldr	r0, [r0, #0]
   d6464:	4629      	mov	r1, r5
   d6466:	f001 f897 	bl	d7598 <_ZN7OneWire6searchEPh>
   d646a:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d646c:	bf1d      	ittte	ne
   d646e:	682b      	ldrne	r3, [r5, #0]
   d6470:	6023      	strne	r3, [r4, #0]
   d6472:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d6474:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d6476:	bf14      	ite	ne
   d6478:	2001      	movne	r0, #1
   d647a:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d647c:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d647e:	bd38      	pop	{r3, r4, r5, pc}

000d6480 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d6480:	b510      	push	{r4, lr}
   d6482:	4604      	mov	r4, r0
{
  delete(ds);
   d6484:	6800      	ldr	r0, [r0, #0]
   d6486:	b110      	cbz	r0, d648e <_ZN7DS18B20D1Ev+0xe>
   d6488:	210e      	movs	r1, #14
   d648a:	f003 fd9e 	bl	d9fca <_ZdlPvj>
}
   d648e:	4620      	mov	r0, r4
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d6492:	6800      	ldr	r0, [r0, #0]
   d6494:	f001 b878 	b.w	d7588 <_ZN7OneWire12reset_searchEv>

000d6498 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d6498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d649c:	7e83      	ldrb	r3, [r0, #26]
{
   d649e:	4604      	mov	r4, r0
   d64a0:	460d      	mov	r5, r1
   d64a2:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d64a4:	b92b      	cbnz	r3, d64b2 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d64a6:	780b      	ldrb	r3, [r1, #0]
   d64a8:	b91b      	cbnz	r3, d64b2 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d64aa:	ed9f 0a57 	vldr	s0, [pc, #348]	; d6608 <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d64ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d64b2:	6820      	ldr	r0, [r4, #0]
   d64b4:	f000 ff8a 	bl	d73cc <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d64b8:	7ea3      	ldrb	r3, [r4, #26]
   d64ba:	2b00      	cmp	r3, #0
   d64bc:	d05d      	beq.n	d657a <_ZN7DS18B2014getTemperatureEPhb+0xe2>
   d64be:	2e00      	cmp	r6, #0
   d64c0:	d15b      	bne.n	d657a <_ZN7DS18B2014getTemperatureEPhb+0xe2>
    ds->skip();
   d64c2:	6820      	ldr	r0, [r4, #0]
   d64c4:	f001 f85c 	bl	d7580 <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d64c8:	2200      	movs	r2, #0
   d64ca:	2144      	movs	r1, #68	; 0x44
   d64cc:	6820      	ldr	r0, [r4, #0]
   d64ce:	f001 f812 	bl	d74f6 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d64d2:	f240 20ee 	movw	r0, #750	; 0x2ee
   d64d6:	f001 ff8d 	bl	d83f4 <delay>
  ds->reset();
   d64da:	6820      	ldr	r0, [r4, #0]
   d64dc:	f000 ff76 	bl	d73cc <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d64e0:	7ea3      	ldrb	r3, [r4, #26]
   d64e2:	2b00      	cmp	r3, #0
   d64e4:	d04e      	beq.n	d6584 <_ZN7DS18B2014getTemperatureEPhb+0xec>
   d64e6:	2e00      	cmp	r6, #0
   d64e8:	d14c      	bne.n	d6584 <_ZN7DS18B2014getTemperatureEPhb+0xec>
    ds->skip();
   d64ea:	6820      	ldr	r0, [r4, #0]
   d64ec:	f001 f848 	bl	d7580 <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d64f0:	6820      	ldr	r0, [r4, #0]
   d64f2:	2200      	movs	r2, #0
   d64f4:	21be      	movs	r1, #190	; 0xbe
   d64f6:	f000 fffe 	bl	d74f6 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d64fa:	782b      	ldrb	r3, [r5, #0]
   d64fc:	2b26      	cmp	r3, #38	; 0x26
   d64fe:	d104      	bne.n	d650a <_ZN7DS18B2014getTemperatureEPhb+0x72>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d6500:	2200      	movs	r2, #0
   d6502:	6820      	ldr	r0, [r4, #0]
   d6504:	4611      	mov	r1, r2
   d6506:	f000 fff6 	bl	d74f6 <_ZN7OneWire5writeEhh>
   d650a:	1d26      	adds	r6, r4, #4
   d650c:	f104 080d 	add.w	r8, r4, #13
   d6510:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d6512:	6820      	ldr	r0, [r4, #0]
   d6514:	f001 f812 	bl	d753c <_ZN7OneWire4readEv>
   d6518:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d651c:	4546      	cmp	r6, r8
   d651e:	d1f8      	bne.n	d6512 <_ZN7DS18B2014getTemperatureEPhb+0x7a>
  _dataCRC = (OneWire::crc8(_data, 8));
   d6520:	2108      	movs	r1, #8
   d6522:	4638      	mov	r0, r7
   d6524:	f001 f8ac 	bl	d7680 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d6528:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d652a:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d652c:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d652e:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d6530:	d1bb      	bne.n	d64aa <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d6532:	782b      	ldrb	r3, [r5, #0]
   d6534:	2b26      	cmp	r3, #38	; 0x26
   d6536:	d047      	beq.n	d65c8 <_ZN7DS18B2014getTemperatureEPhb+0x130>
   d6538:	d829      	bhi.n	d658e <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d653a:	2b10      	cmp	r3, #16
   d653c:	d029      	beq.n	d6592 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
   d653e:	2b22      	cmp	r3, #34	; 0x22
   d6540:	d1b3      	bne.n	d64aa <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d6542:	7a22      	ldrb	r2, [r4, #8]
   d6544:	7923      	ldrb	r3, [r4, #4]
   d6546:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d654a:	2a20      	cmp	r2, #32
   d654c:	d036      	beq.n	d65bc <_ZN7DS18B2014getTemperatureEPhb+0x124>
   d654e:	2a40      	cmp	r2, #64	; 0x40
   d6550:	d037      	beq.n	d65c2 <_ZN7DS18B2014getTemperatureEPhb+0x12a>
   d6552:	b912      	cbnz	r2, d655a <_ZN7DS18B2014getTemperatureEPhb+0xc2>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d6554:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d6558:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d655a:	7963      	ldrb	r3, [r4, #5]
   d655c:	7920      	ldrb	r0, [r4, #4]
   d655e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d6562:	b200      	sxth	r0, r0
   d6564:	f003 fe8c 	bl	da280 <__aeabi_i2d>
   d6568:	4b28      	ldr	r3, [pc, #160]	; (d660c <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d656a:	2200      	movs	r2, #0
   d656c:	f003 fef2 	bl	da354 <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d6570:	f004 f9e8 	bl	da944 <__aeabi_d2f>
   d6574:	ee00 0a10 	vmov	s0, r0
      break;
   d6578:	e799      	b.n	d64ae <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d657a:	6820      	ldr	r0, [r4, #0]
   d657c:	4629      	mov	r1, r5
   d657e:	f000 ffed 	bl	d755c <_ZN7OneWire6selectEPKh>
   d6582:	e7a1      	b.n	d64c8 <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d6584:	6820      	ldr	r0, [r4, #0]
   d6586:	4629      	mov	r1, r5
   d6588:	f000 ffe8 	bl	d755c <_ZN7OneWire6selectEPKh>
   d658c:	e7b0      	b.n	d64f0 <_ZN7DS18B2014getTemperatureEPhb+0x58>
  switch(addr[0]) 
   d658e:	2b28      	cmp	r3, #40	; 0x28
   d6590:	e7d6      	b.n	d6540 <_ZN7DS18B2014getTemperatureEPhb+0xa8>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d6592:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d6594:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d6596:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6598:	bf08      	it	eq
   d659a:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d659c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d65a0:	bf03      	ittte	eq
   d65a2:	f1c3 030c 	rsbeq	r3, r3, #12
   d65a6:	f022 020f 	biceq.w	r2, r2, #15
   d65aa:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d65ac:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d65ae:	bf08      	it	eq
   d65b0:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d65b2:	ee00 3a10 	vmov	s0, r3
   d65b6:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d65ba:	e778      	b.n	d64ae <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d65bc:	f023 0303 	bic.w	r3, r3, #3
   d65c0:	e7ca      	b.n	d6558 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d65c2:	f023 0301 	bic.w	r3, r3, #1
   d65c6:	e7c7      	b.n	d6558 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d65c8:	79a5      	ldrb	r5, [r4, #6]
   d65ca:	4628      	mov	r0, r5
   d65cc:	f003 fe58 	bl	da280 <__aeabi_i2d>
   d65d0:	4606      	mov	r6, r0
   d65d2:	7960      	ldrb	r0, [r4, #5]
   d65d4:	10c0      	asrs	r0, r0, #3
   d65d6:	ee07 0a90 	vmov	s15, r0
   d65da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d65de:	460f      	mov	r7, r1
   d65e0:	ee17 0a90 	vmov	r0, s15
   d65e4:	f003 fe5e 	bl	da2a4 <__aeabi_f2d>
   d65e8:	4b09      	ldr	r3, [pc, #36]	; (d6610 <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d65ea:	2200      	movs	r2, #0
   d65ec:	f003 feb2 	bl	da354 <__aeabi_dmul>
   d65f0:	062b      	lsls	r3, r5, #24
   d65f2:	bf54      	ite	pl
   d65f4:	4b07      	ldrpl	r3, [pc, #28]	; (d6614 <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d65f6:	4b08      	ldrmi	r3, [pc, #32]	; (d6618 <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d65f8:	2200      	movs	r2, #0
   d65fa:	f003 feab 	bl	da354 <__aeabi_dmul>
   d65fe:	4632      	mov	r2, r6
   d6600:	463b      	mov	r3, r7
   d6602:	f003 fcf1 	bl	d9fe8 <__adddf3>
   d6606:	e7b3      	b.n	d6570 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d6608:	7fc00000 	.word	0x7fc00000
   d660c:	3fb00000 	.word	0x3fb00000
   d6610:	3fa00000 	.word	0x3fa00000
   d6614:	3ff00000 	.word	0x3ff00000
   d6618:	bff00000 	.word	0xbff00000
   d661c:	00000000 	.word	0x00000000

000d6620 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d6620:	b508      	push	{r3, lr}
   d6622:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d6626:	f003 fe3d 	bl	da2a4 <__aeabi_f2d>
   d662a:	a308      	add	r3, pc, #32	; (adr r3, d664c <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d662c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6630:	f003 fe90 	bl	da354 <__aeabi_dmul>
   d6634:	4b04      	ldr	r3, [pc, #16]	; (d6648 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d6636:	2200      	movs	r2, #0
   d6638:	f003 fcd6 	bl	d9fe8 <__adddf3>
   d663c:	f004 f982 	bl	da944 <__aeabi_d2f>
}
   d6640:	ee00 0a10 	vmov	s0, r0
   d6644:	bd08      	pop	{r3, pc}
   d6646:	bf00      	nop
   d6648:	40400000 	.word	0x40400000
   d664c:	cccccccd 	.word	0xcccccccd
   d6650:	3ffccccc 	.word	0x3ffccccc

000d6654 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d6654:	7e02      	ldrb	r2, [r0, #24]
   d6656:	7e40      	ldrb	r0, [r0, #25]
}
   d6658:	1a13      	subs	r3, r2, r0
   d665a:	4258      	negs	r0, r3
   d665c:	4158      	adcs	r0, r3
   d665e:	4770      	bx	lr

000d6660 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d6660:	4770      	bx	lr

000d6662 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d6662:	b510      	push	{r4, lr}
}
   d6664:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d6666:	4604      	mov	r4, r0
}
   d6668:	f003 fcaf 	bl	d9fca <_ZdlPvj>
   d666c:	4620      	mov	r0, r4
   d666e:	bd10      	pop	{r4, pc}

000d6670 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d6670:	b510      	push	{r4, lr}
   d6672:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d6674:	f100 0118 	add.w	r1, r0, #24
   d6678:	68c0      	ldr	r0, [r0, #12]
   d667a:	f002 fec3 	bl	d9404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d667e:	8a20      	ldrh	r0, [r4, #16]
   d6680:	2100      	movs	r1, #0
}
   d6682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d6686:	f003 bc2e 	b.w	d9ee6 <digitalWrite>

000d668a <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d668a:	b510      	push	{r4, lr}
   d668c:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d668e:	2101      	movs	r1, #1
   d6690:	8a00      	ldrh	r0, [r0, #16]
   d6692:	f003 fc28 	bl	d9ee6 <digitalWrite>

	spi.endTransaction();
   d6696:	68e0      	ldr	r0, [r4, #12]
}
   d6698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d669c:	f002 be99 	b.w	d93d2 <_ZN8SPIClass14endTransactionEv>

000d66a0 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d66a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66a2:	461e      	mov	r6, r3
	beginTransaction();
   d66a4:	6803      	ldr	r3, [r0, #0]
   d66a6:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d66a8:	460f      	mov	r7, r1
   d66aa:	4614      	mov	r4, r2
   d66ac:	4605      	mov	r5, r0
	beginTransaction();
   d66ae:	4798      	blx	r3

	if (numBytes > 1) {
   d66b0:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d66b2:	bf88      	it	hi
   d66b4:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d66b8:	68e8      	ldr	r0, [r5, #12]
   d66ba:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d66be:	f002 ff0f 	bl	d94e0 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d66c2:	4426      	add	r6, r4
   d66c4:	42b4      	cmp	r4, r6
   d66c6:	d006      	beq.n	d66d6 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d66c8:	68e8      	ldr	r0, [r5, #12]
   d66ca:	2100      	movs	r1, #0
   d66cc:	f002 ff08 	bl	d94e0 <_ZN8SPIClass8transferEh>
   d66d0:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d66d4:	e7f6      	b.n	d66c4 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d66d6:	682b      	ldr	r3, [r5, #0]
   d66d8:	4628      	mov	r0, r5
   d66da:	699b      	ldr	r3, [r3, #24]
   d66dc:	4798      	blx	r3

	return true;
}
   d66de:	2001      	movs	r0, #1
   d66e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66e2 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d66e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66e4:	461e      	mov	r6, r3
	beginTransaction();
   d66e6:	6803      	ldr	r3, [r0, #0]
   d66e8:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d66ea:	460f      	mov	r7, r1
   d66ec:	4614      	mov	r4, r2
   d66ee:	4605      	mov	r5, r0
	beginTransaction();
   d66f0:	4798      	blx	r3

	if (numBytes > 1) {
   d66f2:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d66f4:	bf88      	it	hi
   d66f6:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d66fa:	68e8      	ldr	r0, [r5, #12]
   d66fc:	4639      	mov	r1, r7
   d66fe:	f002 feef 	bl	d94e0 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6702:	4426      	add	r6, r4
   d6704:	42b4      	cmp	r4, r6
   d6706:	d005      	beq.n	d6714 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d6708:	f814 1b01 	ldrb.w	r1, [r4], #1
   d670c:	68e8      	ldr	r0, [r5, #12]
   d670e:	f002 fee7 	bl	d94e0 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6712:	e7f7      	b.n	d6704 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d6714:	682b      	ldr	r3, [r5, #0]
   d6716:	4628      	mov	r0, r5
   d6718:	699b      	ldr	r3, [r3, #24]
   d671a:	4798      	blx	r3

	return true;
}
   d671c:	2001      	movs	r0, #1
   d671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6720 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d6720:	4a02      	ldr	r2, [pc, #8]	; (d672c <_ZN6LIS3DHC1Ei+0xc>)
   d6722:	e9c0 2100 	strd	r2, r1, [r0]
   d6726:	2200      	movs	r2, #0
   d6728:	7202      	strb	r2, [r0, #8]
}
   d672a:	4770      	bx	lr
   d672c:	000dd074 	.word	0x000dd074

000d6730 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d6730:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d6732:	6803      	ldr	r3, [r0, #0]
   d6734:	aa01      	add	r2, sp, #4
   d6736:	68dc      	ldr	r4, [r3, #12]
   d6738:	2301      	movs	r3, #1
   d673a:	47a0      	blx	r4
}
   d673c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d6740:	b002      	add	sp, #8
   d6742:	bd10      	pop	{r4, pc}

000d6744 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d6744:	b538      	push	{r3, r4, r5, lr}
   d6746:	4605      	mov	r5, r0
   d6748:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d674a:	210f      	movs	r1, #15
   d674c:	4628      	mov	r0, r5
   d674e:	f7ff ffef 	bl	d6730 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d6752:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d6754:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d6758:	d004      	beq.n	d6764 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d675a:	f001 fe4b 	bl	d83f4 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d675e:	3c01      	subs	r4, #1
   d6760:	d1f3      	bne.n	d674a <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d6762:	4620      	mov	r0, r4
}
   d6764:	bd38      	pop	{r3, r4, r5, pc}

000d6766 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d6766:	b510      	push	{r4, lr}
   d6768:	4604      	mov	r4, r0
	spi.begin(ss);
   d676a:	8a01      	ldrh	r1, [r0, #16]
   d676c:	68c0      	ldr	r0, [r0, #12]
   d676e:	f002 fe1d 	bl	d93ac <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d6772:	4620      	mov	r0, r4
}
   d6774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d6778:	f7ff bfe4 	b.w	d6744 <_ZN6LIS3DH9hasDeviceEv>

000d677c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d677c:	4770      	bx	lr

000d677e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d677e:	b510      	push	{r4, lr}
}
   d6780:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6782:	4604      	mov	r4, r0
}
   d6784:	f003 fc21 	bl	d9fca <_ZdlPvj>
   d6788:	4620      	mov	r0, r4
   d678a:	bd10      	pop	{r4, pc}

000d678c <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d678c:	6803      	ldr	r3, [r0, #0]
   d678e:	b2c9      	uxtb	r1, r1
   d6790:	689b      	ldr	r3, [r3, #8]
   d6792:	4718      	bx	r3

000d6794 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6794:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6796:	4d03      	ldr	r5, [pc, #12]	; (d67a4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6798:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d679c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d67a0:	bd30      	pop	{r4, r5, pc}
   d67a2:	bf00      	nop
   d67a4:	000dd0e0 	.word	0x000dd0e0

000d67a8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d67a8:	6840      	ldr	r0, [r0, #4]
   d67aa:	f002 bad5 	b.w	d8d58 <_ZN7TwoWire5beginEv>

000d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d67ae:	b510      	push	{r4, lr}
   d67b0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d67b2:	6800      	ldr	r0, [r0, #0]
   d67b4:	f002 fb13 	bl	d8dde <_ZN7TwoWire6unlockEv>
   d67b8:	4620      	mov	r0, r4
   d67ba:	bd10      	pop	{r4, pc}

000d67bc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d67bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67c0:	b08a      	sub	sp, #40	; 0x28
   d67c2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d67c4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d67c8:	f002 fb00 	bl	d8dcc <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d67cc:	221e      	movs	r2, #30
   d67ce:	2100      	movs	r1, #0
   d67d0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d67d2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d67d4:	f004 fcba 	bl	db14c <memset>
		size_t framAddr = 0;
   d67d8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d67da:	b1ef      	cbz	r7, d6818 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d67dc:	6823      	ldr	r3, [r4, #0]
   d67de:	2f1e      	cmp	r7, #30
   d67e0:	46b8      	mov	r8, r7
   d67e2:	bf28      	it	cs
   d67e4:	f04f 081e 	movcs.w	r8, #30
   d67e8:	68dd      	ldr	r5, [r3, #12]
   d67ea:	aa02      	add	r2, sp, #8
   d67ec:	4643      	mov	r3, r8
   d67ee:	4631      	mov	r1, r6
   d67f0:	4620      	mov	r0, r4
   d67f2:	47a8      	blx	r5
			if (!result) {
   d67f4:	4605      	mov	r5, r0
   d67f6:	b958      	cbnz	r0, d6810 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d67f8:	480a      	ldr	r0, [pc, #40]	; (d6824 <_ZN6MB85RC5eraseEv+0x68>)
   d67fa:	490b      	ldr	r1, [pc, #44]	; (d6828 <_ZN6MB85RC5eraseEv+0x6c>)
   d67fc:	4632      	mov	r2, r6
   d67fe:	f7fd fd47 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d6802:	a801      	add	r0, sp, #4
   d6804:	f7ff ffd3 	bl	d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6808:	4628      	mov	r0, r5
   d680a:	b00a      	add	sp, #40	; 0x28
   d680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6810:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d6814:	4446      	add	r6, r8
		while(totalLen > 0) {
   d6816:	e7e0      	b.n	d67da <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6818:	a801      	add	r0, sp, #4
   d681a:	f7ff ffc8 	bl	d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d681e:	2501      	movs	r5, #1
   d6820:	e7f2      	b.n	d6808 <_ZN6MB85RC5eraseEv+0x4c>
   d6822:	bf00      	nop
   d6824:	2003e5ec 	.word	0x2003e5ec
   d6828:	000dd0ac 	.word	0x000dd0ac

000d682c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d682c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6830:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6832:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6834:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6836:	460d      	mov	r5, r1
   d6838:	4616      	mov	r6, r2
   d683a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d683c:	f002 fac6 	bl	d8dcc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6840:	b1a7      	cbz	r7, d686c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6842:	68e1      	ldr	r1, [r4, #12]
   d6844:	6860      	ldr	r0, [r4, #4]
   d6846:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d684a:	f002 fab8 	bl	d8dbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d684e:	0a29      	lsrs	r1, r5, #8
   d6850:	6860      	ldr	r0, [r4, #4]
   d6852:	f7ff ff9b 	bl	d678c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d6856:	4629      	mov	r1, r5
   d6858:	6860      	ldr	r0, [r4, #4]
   d685a:	f7ff ff97 	bl	d678c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d685e:	6860      	ldr	r0, [r4, #4]
   d6860:	2100      	movs	r1, #0
   d6862:	f002 faaf 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6866:	b148      	cbz	r0, d687c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6868:	2400      	movs	r4, #0
   d686a:	e000      	b.n	d686e <_ZN6MB85RC8readDataEjPhj+0x42>
   d686c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d686e:	a801      	add	r0, sp, #4
   d6870:	f7ff ff9d 	bl	d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d6874:	4620      	mov	r0, r4
   d6876:	b003      	add	sp, #12
   d6878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d687c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d687e:	7b21      	ldrb	r1, [r4, #12]
   d6880:	6860      	ldr	r0, [r4, #4]
   d6882:	46b8      	mov	r8, r7
   d6884:	bf28      	it	cs
   d6886:	f04f 0820 	movcs.w	r8, #32
   d688a:	2301      	movs	r3, #1
   d688c:	4642      	mov	r2, r8
   d688e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6892:	f002 fa7e 	bl	d8d92 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d6896:	f003 fb6b 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d689a:	6803      	ldr	r3, [r0, #0]
   d689c:	691b      	ldr	r3, [r3, #16]
   d689e:	4798      	blx	r3
   d68a0:	4540      	cmp	r0, r8
   d68a2:	dbe1      	blt.n	d6868 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d68a4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d68a8:	f003 fb62 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d68ac:	6803      	ldr	r3, [r0, #0]
   d68ae:	695b      	ldr	r3, [r3, #20]
   d68b0:	4798      	blx	r3
   d68b2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d68b6:	454e      	cmp	r6, r9
   d68b8:	d1f6      	bne.n	d68a8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d68ba:	4445      	add	r5, r8
   d68bc:	eba7 0708 	sub.w	r7, r7, r8
   d68c0:	e7be      	b.n	d6840 <_ZN6MB85RC8readDataEjPhj+0x14>

000d68c2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68c6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d68c8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68ca:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68cc:	460e      	mov	r6, r1
   d68ce:	4690      	mov	r8, r2
   d68d0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d68d2:	f002 fa7b 	bl	d8dcc <_ZN7TwoWire4lockEv>
   d68d6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d68da:	f1b9 0f00 	cmp.w	r9, #0
   d68de:	d02a      	beq.n	d6936 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d68e0:	b34d      	cbz	r5, d6936 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d68e2:	68e1      	ldr	r1, [r4, #12]
   d68e4:	6860      	ldr	r0, [r4, #4]
   d68e6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d68ea:	f002 fa68 	bl	d8dbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d68ee:	0a31      	lsrs	r1, r6, #8
   d68f0:	6860      	ldr	r0, [r4, #4]
   d68f2:	f7ff ff4b 	bl	d678c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d68f6:	6860      	ldr	r0, [r4, #4]
   d68f8:	4631      	mov	r1, r6
   d68fa:	f7ff ff47 	bl	d678c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d68fe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d6902:	4647      	mov	r7, r8
   d6904:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6908:	6860      	ldr	r0, [r4, #4]
   d690a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d690e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6910:	3d01      	subs	r5, #1
				wire.write(*data);
   d6912:	689b      	ldr	r3, [r3, #8]
   d6914:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6916:	4555      	cmp	r5, sl
   d6918:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d691c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d691e:	d001      	beq.n	d6924 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6920:	2d00      	cmp	r5, #0
   d6922:	d1f1      	bne.n	d6908 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d6924:	6860      	ldr	r0, [r4, #4]
   d6926:	2101      	movs	r1, #1
   d6928:	f002 fa4c 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d692c:	2800      	cmp	r0, #0
   d692e:	d0d7      	beq.n	d68e0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6930:	f04f 0900 	mov.w	r9, #0
   d6934:	e7d1      	b.n	d68da <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d6936:	a801      	add	r0, sp, #4
   d6938:	f7ff ff39 	bl	d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d693c:	4648      	mov	r0, r9
   d693e:	b003      	add	sp, #12
   d6940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6944 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6948:	b08b      	sub	sp, #44	; 0x2c
   d694a:	460e      	mov	r6, r1
   d694c:	4615      	mov	r5, r2
   d694e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6950:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6952:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6954:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6956:	f002 fa39 	bl	d8dcc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d695a:	42ae      	cmp	r6, r5
   d695c:	d229      	bcs.n	d69b2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d695e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6960:	4425      	add	r5, r4
			while(numBytes > 0) {
   d6962:	b18c      	cbz	r4, d6988 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d6964:	2c1e      	cmp	r4, #30
   d6966:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6968:	f8d8 3000 	ldr.w	r3, [r8]
   d696c:	bf28      	it	cs
   d696e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6970:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d6972:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6976:	aa02      	add	r2, sp, #8
   d6978:	463b      	mov	r3, r7
   d697a:	4631      	mov	r1, r6
   d697c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d697e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6980:	47c8      	blx	r9
				if (!result) {
   d6982:	b948      	cbnz	r0, d6998 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d6984:	2400      	movs	r4, #0
   d6986:	e000      	b.n	d698a <_ZN6MB85RC8moveDataEjjj+0x46>
   d6988:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d698a:	a801      	add	r0, sp, #4
   d698c:	f7ff ff0f 	bl	d67ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6990:	4620      	mov	r0, r4
   d6992:	b00b      	add	sp, #44	; 0x2c
   d6994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6998:	f8d8 3000 	ldr.w	r3, [r8]
   d699c:	aa02      	add	r2, sp, #8
   d699e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d69a2:	4629      	mov	r1, r5
   d69a4:	463b      	mov	r3, r7
   d69a6:	4640      	mov	r0, r8
   d69a8:	47c8      	blx	r9
				if (!result) {
   d69aa:	2800      	cmp	r0, #0
   d69ac:	d0ea      	beq.n	d6984 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d69ae:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d69b0:	e7d7      	b.n	d6962 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d69b2:	d9e9      	bls.n	d6988 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d69b4:	2c00      	cmp	r4, #0
   d69b6:	d0e7      	beq.n	d6988 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d69b8:	f8d8 3000 	ldr.w	r3, [r8]
   d69bc:	2c1e      	cmp	r4, #30
   d69be:	4627      	mov	r7, r4
   d69c0:	bf28      	it	cs
   d69c2:	271e      	movcs	r7, #30
   d69c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d69c8:	aa02      	add	r2, sp, #8
   d69ca:	463b      	mov	r3, r7
   d69cc:	4631      	mov	r1, r6
   d69ce:	4640      	mov	r0, r8
   d69d0:	47c8      	blx	r9
				if (!result) {
   d69d2:	2800      	cmp	r0, #0
   d69d4:	d0d6      	beq.n	d6984 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d69d6:	f8d8 3000 	ldr.w	r3, [r8]
   d69da:	aa02      	add	r2, sp, #8
   d69dc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d69e0:	4629      	mov	r1, r5
   d69e2:	463b      	mov	r3, r7
   d69e4:	4640      	mov	r0, r8
   d69e6:	47c8      	blx	r9
				if (!result) {
   d69e8:	2800      	cmp	r0, #0
   d69ea:	d0cb      	beq.n	d6984 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d69ec:	443e      	add	r6, r7
				framAddrTo += count;
   d69ee:	443d      	add	r5, r7
				numBytes -= count;
   d69f0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d69f2:	e7df      	b.n	d69b4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d69f4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d69f4:	2040      	movs	r0, #64	; 0x40
   d69f6:	4770      	bx	lr

000d69f8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d69f8:	2000      	movs	r0, #0
   d69fa:	4770      	bx	lr

000d69fc <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d69fc:	2080      	movs	r0, #128	; 0x80
   d69fe:	4770      	bx	lr

000d6a00 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6a00:	20ff      	movs	r0, #255	; 0xff
   d6a02:	4770      	bx	lr

000d6a04 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6a04:	4770      	bx	lr

000d6a06 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6a06:	4770      	bx	lr

000d6a08 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6a08:	4770      	bx	lr

000d6a0a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d6a0a:	4770      	bx	lr

000d6a0c <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d6a0c:	b510      	push	{r4, lr}
}
   d6a0e:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d6a10:	4604      	mov	r4, r0
}
   d6a12:	f003 fada 	bl	d9fca <_ZdlPvj>
   d6a16:	4620      	mov	r0, r4
   d6a18:	bd10      	pop	{r4, pc}

000d6a1a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d6a1a:	b510      	push	{r4, lr}
}
   d6a1c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d6a1e:	4604      	mov	r4, r0
}
   d6a20:	f003 fad3 	bl	d9fca <_ZdlPvj>
   d6a24:	4620      	mov	r0, r4
   d6a26:	bd10      	pop	{r4, pc}

000d6a28 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d6a28:	b510      	push	{r4, lr}
}
   d6a2a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d6a2c:	4604      	mov	r4, r0
}
   d6a2e:	f003 facc 	bl	d9fca <_ZdlPvj>
   d6a32:	4620      	mov	r0, r4
   d6a34:	bd10      	pop	{r4, pc}

000d6a36 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d6a36:	b510      	push	{r4, lr}
}
   d6a38:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d6a3a:	4604      	mov	r4, r0
}
   d6a3c:	f003 fac5 	bl	d9fca <_ZdlPvj>
   d6a40:	4620      	mov	r0, r4
   d6a42:	bd10      	pop	{r4, pc}

000d6a44 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d6a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d6a48:	6803      	ldr	r3, [r0, #0]
   d6a4a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d6a4c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d6a4e:	4798      	blx	r3
   d6a50:	2210      	movs	r2, #16
   d6a52:	4601      	mov	r1, r0
   d6a54:	4668      	mov	r0, sp
   d6a56:	f004 fb79 	bl	db14c <memset>
	size_t len = length();
   d6a5a:	6823      	ldr	r3, [r4, #0]
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	689b      	ldr	r3, [r3, #8]
   d6a60:	4798      	blx	r3
	size_t offset = 0;
   d6a62:	2500      	movs	r5, #0
	size_t len = length();
   d6a64:	4607      	mov	r7, r0
	bool bResult = false;
   d6a66:	4628      	mov	r0, r5
	while(offset < len) {
   d6a68:	42bd      	cmp	r5, r7
   d6a6a:	d20e      	bcs.n	d6a8a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d6a6c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d6a6e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d6a70:	2e10      	cmp	r6, #16
   d6a72:	bf28      	it	cs
   d6a74:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d6a76:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6a7a:	466a      	mov	r2, sp
   d6a7c:	4633      	mov	r3, r6
   d6a7e:	4629      	mov	r1, r5
   d6a80:	4620      	mov	r0, r4
   d6a82:	47c0      	blx	r8
		if (!bResult) {
   d6a84:	b108      	cbz	r0, d6a8a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d6a86:	4435      	add	r5, r6
	while(offset < len) {
   d6a88:	e7ee      	b.n	d6a68 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d6a8a:	b004      	add	sp, #16
   d6a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a90 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d6a90:	f44f 7380 	mov.w	r3, #256	; 0x100
   d6a94:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d6a96:	f240 1301 	movw	r3, #257	; 0x101
   d6a9a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d6a9c:	2300      	movs	r3, #0
   d6a9e:	8203      	strh	r3, [r0, #16]
}
   d6aa0:	4770      	bx	lr
	...

000d6aa4 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d6aa4:	b508      	push	{r3, lr}
   d6aa6:	4b06      	ldr	r3, [pc, #24]	; (d6ac0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6aa8:	6003      	str	r3, [r0, #0]
   d6aaa:	4b06      	ldr	r3, [pc, #24]	; (d6ac4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d6aac:	6043      	str	r3, [r0, #4]
   d6aae:	f240 7304 	movw	r3, #1796	; 0x704
   d6ab2:	8103      	strh	r3, [r0, #8]
   d6ab4:	2300      	movs	r3, #0
   d6ab6:	7443      	strb	r3, [r0, #17]
	clear();
   d6ab8:	f7ff ffea 	bl	d6a90 <_ZN12MCP79410Time5clearEv>
}
   d6abc:	bd08      	pop	{r3, pc}
   d6abe:	bf00      	nop
   d6ac0:	000dd1c0 	.word	0x000dd1c0
   d6ac4:	03020100 	.word	0x03020100

000d6ac8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6ac8:	0903      	lsrs	r3, r0, #4
}
   d6aca:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6acc:	f000 000f 	and.w	r0, r0, #15
}
   d6ad0:	fb02 0003 	mla	r0, r2, r3, r0
   d6ad4:	4770      	bx	lr

000d6ad6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6ad6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6ad8:	7a80      	ldrb	r0, [r0, #10]
   d6ada:	f7ff fff5 	bl	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6ade:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6ae2:	bd08      	pop	{r3, pc}

000d6ae4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6ae4:	7ac0      	ldrb	r0, [r0, #11]
   d6ae6:	f000 001f 	and.w	r0, r0, #31
   d6aea:	f7ff bfed 	b.w	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>

000d6aee <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6aee:	7b00      	ldrb	r0, [r0, #12]
   d6af0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6af4:	f7ff bfe8 	b.w	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>

000d6af8 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6af8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6afa:	7b81      	ldrb	r1, [r0, #14]
   d6afc:	064a      	lsls	r2, r1, #25
   d6afe:	d50d      	bpl.n	d6b1c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6b00:	f001 001f 	and.w	r0, r1, #31
   d6b04:	f7ff ffe0 	bl	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6b08:	068b      	lsls	r3, r1, #26
   d6b0a:	d503      	bpl.n	d6b14 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d6b0c:	280c      	cmp	r0, #12
   d6b0e:	d000      	beq.n	d6b12 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6b10:	300c      	adds	r0, #12
}
   d6b12:	bd08      	pop	{r3, pc}
				return 0;
   d6b14:	280c      	cmp	r0, #12
   d6b16:	bf08      	it	eq
   d6b18:	2000      	moveq	r0, #0
   d6b1a:	e7fa      	b.n	d6b12 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d6b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6b20:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6b24:	f7ff bfd0 	b.w	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>

000d6b28 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6b28:	7bc0      	ldrb	r0, [r0, #15]
   d6b2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b2e:	f7ff bfcb 	b.w	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>

000d6b32 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6b32:	7c00      	ldrb	r0, [r0, #16]
   d6b34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b38:	f7ff bfc6 	b.w	d6ac8 <_ZN12MCP79410Time8bcdToIntEh>

000d6b3c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d6b3c:	b510      	push	{r4, lr}
   d6b3e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6b40:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6b42:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6b44:	2100      	movs	r1, #0
   d6b46:	a801      	add	r0, sp, #4
   d6b48:	f004 fb00 	bl	db14c <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	f7ff ffc2 	bl	d6ad6 <_ZNK12MCP79410Time7getYearEv>
   d6b52:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6b56:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6b58:	4620      	mov	r0, r4
   d6b5a:	f7ff ffc3 	bl	d6ae4 <_ZNK12MCP79410Time8getMonthEv>
   d6b5e:	3801      	subs	r0, #1
   d6b60:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6b62:	4620      	mov	r0, r4
   d6b64:	f7ff ffc3 	bl	d6aee <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6b68:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	f7ff ffc4 	bl	d6af8 <_ZNK12MCP79410Time7getHourEv>
   d6b70:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6b72:	4620      	mov	r0, r4
   d6b74:	f7ff ffd8 	bl	d6b28 <_ZNK12MCP79410Time9getMinuteEv>
   d6b78:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6b7a:	4620      	mov	r0, r4
   d6b7c:	f7ff ffd9 	bl	d6b32 <_ZNK12MCP79410Time9getSecondEv>
   d6b80:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d6b82:	a801      	add	r0, sp, #4
   d6b84:	f004 fbc2 	bl	db30c <mktime>
}
   d6b88:	b00a      	add	sp, #40	; 0x28
   d6b8a:	bd10      	pop	{r4, pc}

000d6b8c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6b8c:	210a      	movs	r1, #10
   d6b8e:	fb90 f2f1 	sdiv	r2, r0, r1
   d6b92:	fb92 f3f1 	sdiv	r3, r2, r1
   d6b96:	fb01 2313 	mls	r3, r1, r3, r2
   d6b9a:	011b      	lsls	r3, r3, #4
   d6b9c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6b9e:	fb01 0012 	mls	r0, r1, r2, r0
   d6ba2:	4318      	orrs	r0, r3
}
   d6ba4:	b2c0      	uxtb	r0, r0
   d6ba6:	4770      	bx	lr

000d6ba8 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6ba8:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6baa:	b510      	push	{r4, lr}
   d6bac:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6bae:	fb91 f0f3 	sdiv	r0, r1, r3
   d6bb2:	fb00 1013 	mls	r0, r0, r3, r1
   d6bb6:	f7ff ffe9 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
   d6bba:	72a0      	strb	r0, [r4, #10]
}
   d6bbc:	bd10      	pop	{r4, pc}

000d6bbe <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6bbe:	b510      	push	{r4, lr}
   d6bc0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6bc2:	4608      	mov	r0, r1
   d6bc4:	f7ff ffe2 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
   d6bc8:	72e0      	strb	r0, [r4, #11]
}
   d6bca:	bd10      	pop	{r4, pc}

000d6bcc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6bcc:	b510      	push	{r4, lr}
   d6bce:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6bd0:	4608      	mov	r0, r1
   d6bd2:	f7ff ffdb 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6bd6:	7b23      	ldrb	r3, [r4, #12]
   d6bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6bdc:	4318      	orrs	r0, r3
   d6bde:	7320      	strb	r0, [r4, #12]
}
   d6be0:	bd10      	pop	{r4, pc}

000d6be2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6be2:	b510      	push	{r4, lr}
   d6be4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6be6:	1c48      	adds	r0, r1, #1
   d6be8:	f7ff ffd0 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6bec:	7b63      	ldrb	r3, [r4, #13]
   d6bee:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6bf2:	4318      	orrs	r0, r3
   d6bf4:	7360      	strb	r0, [r4, #13]
}
   d6bf6:	bd10      	pop	{r4, pc}

000d6bf8 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6bf8:	b510      	push	{r4, lr}
   d6bfa:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6bfc:	4608      	mov	r0, r1
   d6bfe:	f7ff ffc5 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
   d6c02:	73a0      	strb	r0, [r4, #14]
}
   d6c04:	bd10      	pop	{r4, pc}

000d6c06 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6c06:	b510      	push	{r4, lr}
   d6c08:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6c0a:	4608      	mov	r0, r1
   d6c0c:	f7ff ffbe 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
   d6c10:	73e0      	strb	r0, [r4, #15]
}
   d6c12:	bd10      	pop	{r4, pc}

000d6c14 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6c14:	b510      	push	{r4, lr}
   d6c16:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6c18:	4608      	mov	r0, r1
   d6c1a:	f7ff ffb7 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d6c1e:	7c23      	ldrb	r3, [r4, #16]
   d6c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6c24:	4318      	orrs	r0, r3
   d6c26:	7420      	strb	r0, [r4, #16]
}
   d6c28:	bd10      	pop	{r4, pc}

000d6c2a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d6c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c2c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d6c2e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6c30:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6c34:	f004 f8aa 	bl	dad8c <gmtime>
   d6c38:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d6c3a:	6941      	ldr	r1, [r0, #20]
   d6c3c:	4620      	mov	r0, r4
   d6c3e:	f7ff ffb3 	bl	d6ba8 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6c42:	6929      	ldr	r1, [r5, #16]
   d6c44:	4620      	mov	r0, r4
   d6c46:	3101      	adds	r1, #1
   d6c48:	f7ff ffb9 	bl	d6bbe <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d6c4c:	68e9      	ldr	r1, [r5, #12]
   d6c4e:	4620      	mov	r0, r4
   d6c50:	f7ff ffbc 	bl	d6bcc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6c54:	69a9      	ldr	r1, [r5, #24]
   d6c56:	4620      	mov	r0, r4
   d6c58:	f7ff ffc3 	bl	d6be2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d6c5c:	68a9      	ldr	r1, [r5, #8]
   d6c5e:	4620      	mov	r0, r4
   d6c60:	f7ff ffca 	bl	d6bf8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6c64:	6869      	ldr	r1, [r5, #4]
   d6c66:	4620      	mov	r0, r4
   d6c68:	f7ff ffcd 	bl	d6c06 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6c6c:	6829      	ldr	r1, [r5, #0]
   d6c6e:	293b      	cmp	r1, #59	; 0x3b
   d6c70:	bfa8      	it	ge
   d6c72:	213b      	movge	r1, #59	; 0x3b
   d6c74:	4620      	mov	r0, r4
   d6c76:	f7ff ffcd 	bl	d6c14 <_ZN12MCP79410Time9setSecondEi>
}
   d6c7a:	b003      	add	sp, #12
   d6c7c:	bd30      	pop	{r4, r5, pc}

000d6c7e <_ZN12MCP79410Time12setAlarmTimeEx>:
void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6c7e:	b510      	push	{r4, lr}
   d6c80:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d6c82:	f7ff ffd2 	bl	d6c2a <_ZN12MCP79410Time12fromUnixTimeEx>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d6c86:	7a63      	ldrb	r3, [r4, #9]
   d6c88:	7463      	strb	r3, [r4, #17]
}
   d6c8a:	bd10      	pop	{r4, pc}

000d6c8c <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6c8c:	4a05      	ldr	r2, [pc, #20]	; (d6ca4 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6c8e:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6c90:	e9c0 2100 	strd	r2, r1, [r0]
   d6c94:	4a04      	ldr	r2, [pc, #16]	; (d6ca8 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6c96:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c98:	4a04      	ldr	r2, [pc, #16]	; (d6cac <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6c9a:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c9c:	4a04      	ldr	r2, [pc, #16]	; (d6cb0 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6c9e:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6ca0:	6142      	str	r2, [r0, #20]
}
   d6ca2:	4770      	bx	lr
   d6ca4:	000dd1f4 	.word	0x000dd1f4
   d6ca8:	03010000 	.word	0x03010000
   d6cac:	000dd19c 	.word	0x000dd19c
   d6cb0:	000dd1d0 	.word	0x000dd1d0

000d6cb4 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6cb8:	4604      	mov	r4, r0
   d6cba:	460f      	mov	r7, r1
   d6cbc:	4690      	mov	r8, r2
   d6cbe:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6cc0:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d6cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6cc4:	429e      	cmp	r6, r3
   d6cc6:	d231      	bcs.n	d6d2c <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6cc8:	6860      	ldr	r0, [r4, #4]
   d6cca:	4639      	mov	r1, r7
   d6ccc:	f002 f873 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6cd0:	eb08 0106 	add.w	r1, r8, r6
   d6cd4:	6860      	ldr	r0, [r4, #4]
   d6cd6:	f7ff fd59 	bl	d678c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6cda:	6860      	ldr	r0, [r4, #4]
   d6cdc:	2100      	movs	r1, #0
   d6cde:	f002 f871 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6ce2:	4605      	mov	r5, r0
   d6ce4:	b9d0      	cbnz	r0, d6d1c <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6ce8:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6cea:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6cec:	2a20      	cmp	r2, #32
   d6cee:	f04f 0301 	mov.w	r3, #1
   d6cf2:	bf28      	it	cs
   d6cf4:	2220      	movcs	r2, #32
   d6cf6:	4639      	mov	r1, r7
   d6cf8:	f002 f84b 	bl	d8d92 <_ZN7TwoWire11requestFromEhjh>
   d6cfc:	eb09 0b06 	add.w	fp, r9, r6
   d6d00:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6d02:	eb00 0a0b 	add.w	sl, r0, fp
   d6d06:	45d3      	cmp	fp, sl
   d6d08:	d006      	beq.n	d6d18 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6d0a:	6860      	ldr	r0, [r4, #4]
   d6d0c:	6803      	ldr	r3, [r0, #0]
   d6d0e:	695b      	ldr	r3, [r3, #20]
   d6d10:	4798      	blx	r3
   d6d12:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d6d16:	e7f6      	b.n	d6d06 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d6d18:	442e      	add	r6, r5
	while(offset < bufLen) {
   d6d1a:	e7d2      	b.n	d6cc2 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6d1c:	4602      	mov	r2, r0
   d6d1e:	4904      	ldr	r1, [pc, #16]	; (d6d30 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6d20:	4804      	ldr	r0, [pc, #16]	; (d6d34 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6d22:	f7fd fab5 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d6d26:	4628      	mov	r0, r5
   d6d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d2c:	2500      	movs	r5, #0
	return stat;
   d6d2e:	e7fa      	b.n	d6d26 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6d30:	000dd0f4 	.word	0x000dd0f4
   d6d34:	2003e5a4 	.word	0x2003e5a4

000d6d38 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6d3c:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d40:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6d42:	6803      	ldr	r3, [r0, #0]
   d6d44:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d46:	4605      	mov	r5, r0
   d6d48:	460c      	mov	r4, r1
   d6d4a:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6d4c:	4798      	blx	r3
   d6d4e:	4580      	cmp	r8, r0
   d6d50:	d80d      	bhi.n	d6d6e <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6d52:	3420      	adds	r4, #32
   d6d54:	6868      	ldr	r0, [r5, #4]
   d6d56:	9600      	str	r6, [sp, #0]
   d6d58:	463b      	mov	r3, r7
   d6d5a:	b2e2      	uxtb	r2, r4
   d6d5c:	216f      	movs	r1, #111	; 0x6f
   d6d5e:	f7ff ffa9 	bl	d6cb4 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6d62:	fab0 f080 	clz	r0, r0
   d6d66:	0940      	lsrs	r0, r0, #5
}
   d6d68:	b002      	add	sp, #8
   d6d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d6e:	2000      	movs	r0, #0
   d6d70:	e7fa      	b.n	d6d68 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6d72 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6d76:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d7a:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6d7c:	6803      	ldr	r3, [r0, #0]
   d6d7e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d80:	4604      	mov	r4, r0
   d6d82:	460d      	mov	r5, r1
   d6d84:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6d86:	4798      	blx	r3
   d6d88:	4580      	cmp	r8, r0
   d6d8a:	d80c      	bhi.n	d6da6 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6d8c:	6860      	ldr	r0, [r4, #4]
   d6d8e:	9600      	str	r6, [sp, #0]
   d6d90:	463b      	mov	r3, r7
   d6d92:	b2ea      	uxtb	r2, r5
   d6d94:	2157      	movs	r1, #87	; 0x57
   d6d96:	f7ff ff8d 	bl	d6cb4 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6d9a:	fab0 f080 	clz	r0, r0
   d6d9e:	0940      	lsrs	r0, r0, #5
}
   d6da0:	b002      	add	sp, #8
   d6da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6da6:	2000      	movs	r0, #0
   d6da8:	e7fa      	b.n	d6da0 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6daa <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6daa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6dac:	1e1e      	subs	r6, r3, #0
   d6dae:	bf0c      	ite	eq
   d6db0:	2307      	moveq	r3, #7
   d6db2:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6db4:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6db6:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6db8:	ab02      	add	r3, sp, #8
   d6dba:	460a      	mov	r2, r1
   d6dbc:	216f      	movs	r1, #111	; 0x6f
   d6dbe:	f7ff ff79 	bl	d6cb4 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6dc2:	4605      	mov	r5, r0
   d6dc4:	b9a8      	cbnz	r0, d6df2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6dc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6dca:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6dcc:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6dd0:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6dd2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6dd6:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6dd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6ddc:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6dde:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6de2:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6de4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6de8:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6dea:	b92e      	cbnz	r6, d6df8 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6dec:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6df0:	72a3      	strb	r3, [r4, #10]
}
   d6df2:	4628      	mov	r0, r5
   d6df4:	b004      	add	sp, #16
   d6df6:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6df8:	f002 fe52 	bl	d9aa0 <_ZN9TimeClass4yearEv>
   d6dfc:	f7ff fec6 	bl	d6b8c <_ZN12MCP79410Time8intToBcdEi>
   d6e00:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6e02:	e7f6      	b.n	d6df2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6e04 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6e06:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6e08:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6e0a:	9300      	str	r3, [sp, #0]
   d6e0c:	216f      	movs	r1, #111	; 0x6f
   d6e0e:	ab03      	add	r3, sp, #12
   d6e10:	f7ff ff50 	bl	d6cb4 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6e14:	b920      	cbnz	r0, d6e20 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6e16:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6e1a:	b005      	add	sp, #20
   d6e1c:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6e20:	2000      	movs	r0, #0
   d6e22:	e7fa      	b.n	d6e1a <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6e24 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6e24:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6e26:	2103      	movs	r1, #3
   d6e28:	f7ff ffec 	bl	d6e04 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6e2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6e30:	bd08      	pop	{r3, pc}

000d6e32 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6e32:	b538      	push	{r3, r4, r5, lr}
   d6e34:	2300      	movs	r3, #0
   d6e36:	460c      	mov	r4, r1
   d6e38:	460a      	mov	r2, r1
   d6e3a:	4619      	mov	r1, r3
   d6e3c:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6e3e:	f7ff ffb4 	bl	d6daa <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6e42:	b930      	cbnz	r0, d6e52 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6e44:	7aa3      	ldrb	r3, [r4, #10]
   d6e46:	b123      	cbz	r3, d6e52 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6e48:	4628      	mov	r0, r5
}
   d6e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6e4e:	f7ff bfe9 	b.w	d6e24 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6e52:	2000      	movs	r0, #0
   d6e54:	bd38      	pop	{r3, r4, r5, pc}

000d6e56 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6e56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e58:	4602      	mov	r2, r0
	MCP79410Time time;
   d6e5a:	a801      	add	r0, sp, #4
   d6e5c:	f7ff fe22 	bl	d6aa4 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6e60:	a901      	add	r1, sp, #4
   d6e62:	4610      	mov	r0, r2
   d6e64:	f7ff ffe5 	bl	d6e32 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6e68:	b128      	cbz	r0, d6e76 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6e6a:	a801      	add	r0, sp, #4
   d6e6c:	f7ff fe66 	bl	d6b3c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6e70:	b007      	add	sp, #28
   d6e72:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6e76:	2000      	movs	r0, #0
   d6e78:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6e7a:	e7f9      	b.n	d6e70 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6e7c <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6e7c:	b5d0      	push	{r4, r6, r7, lr}
   d6e7e:	4604      	mov	r4, r0
   d6e80:	b086      	sub	sp, #24
	wire.begin();
   d6e82:	6840      	ldr	r0, [r0, #4]
   d6e84:	f001 ff68 	bl	d8d58 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6e88:	f002 fda8 	bl	d99dc <_ZN9TimeClass7isValidEv>
   d6e8c:	b9e8      	cbnz	r0, d6eca <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6e8e:	7ae3      	ldrb	r3, [r4, #11]
   d6e90:	079b      	lsls	r3, r3, #30
   d6e92:	d51a      	bpl.n	d6eca <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7ff ffde 	bl	d6e56 <_ZNK8MCP7941010getRTCTimeEv>
   d6e9a:	4606      	mov	r6, r0
   d6e9c:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6e9e:	ea56 0307 	orrs.w	r3, r6, r7
   d6ea2:	d012      	beq.n	d6eca <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6ea4:	f002 fca0 	bl	d97e8 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6ea8:	4b0a      	ldr	r3, [pc, #40]	; (d6ed4 <_ZN8MCP794105setupEv+0x58>)
   d6eaa:	490b      	ldr	r1, [pc, #44]	; (d6ed8 <_ZN8MCP794105setupEv+0x5c>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	9300      	str	r3, [sp, #0]
   d6eb0:	4632      	mov	r2, r6
   d6eb2:	463b      	mov	r3, r7
   d6eb4:	a802      	add	r0, sp, #8
   d6eb6:	f002 fd4f 	bl	d9958 <_ZN9TimeClass6formatExPKc>
   d6eba:	4808      	ldr	r0, [pc, #32]	; (d6edc <_ZN8MCP794105setupEv+0x60>)
   d6ebc:	9a02      	ldr	r2, [sp, #8]
   d6ebe:	4908      	ldr	r1, [pc, #32]	; (d6ee0 <_ZN8MCP794105setupEv+0x64>)
   d6ec0:	f7fd f9e6 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d6ec4:	a802      	add	r0, sp, #8
   d6ec6:	f002 fb11 	bl	d94ec <_ZN6StringD1Ev>
	setupDone = true;
   d6eca:	2301      	movs	r3, #1
   d6ecc:	7223      	strb	r3, [r4, #8]
}
   d6ece:	b006      	add	sp, #24
   d6ed0:	bdd0      	pop	{r4, r6, r7, pc}
   d6ed2:	bf00      	nop
   d6ed4:	2003dfb0 	.word	0x2003dfb0
   d6ed8:	2003e618 	.word	0x2003e618
   d6edc:	2003e5a4 	.word	0x2003e5a4
   d6ee0:	000dd10e 	.word	0x000dd10e

000d6ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6ee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ee8:	4606      	mov	r6, r0
   d6eea:	4688      	mov	r8, r1
   d6eec:	4691      	mov	r9, r2
   d6eee:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6ef0:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ef4:	429d      	cmp	r5, r3
   d6ef6:	d229      	bcs.n	d6f4c <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6ef8:	6870      	ldr	r0, [r6, #4]
   d6efa:	4641      	mov	r1, r8
   d6efc:	f001 ff5b 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6f00:	6870      	ldr	r0, [r6, #4]
   d6f02:	eb09 0105 	add.w	r1, r9, r5
   d6f06:	f7ff fc41 	bl	d678c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f0c:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6f0e:	2f1f      	cmp	r7, #31
   d6f10:	bf28      	it	cs
   d6f12:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6f14:	eb0a 0405 	add.w	r4, sl, r5
   d6f18:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6f1c:	6870      	ldr	r0, [r6, #4]
   d6f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6f22:	6802      	ldr	r2, [r0, #0]
   d6f24:	6892      	ldr	r2, [r2, #8]
   d6f26:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d6f28:	45a3      	cmp	fp, r4
   d6f2a:	d1f7      	bne.n	d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6f2c:	6870      	ldr	r0, [r6, #4]
   d6f2e:	2101      	movs	r1, #1
   d6f30:	f001 ff48 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6f34:	4604      	mov	r4, r0
   d6f36:	b138      	cbz	r0, d6f48 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6f38:	4602      	mov	r2, r0
   d6f3a:	4905      	ldr	r1, [pc, #20]	; (d6f50 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6f3c:	4805      	ldr	r0, [pc, #20]	; (d6f54 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6f3e:	f7fd f9a7 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6f42:	4620      	mov	r0, r4
   d6f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6f48:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6f4a:	e7d2      	b.n	d6ef2 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6f4c:	2400      	movs	r4, #0
	return stat;
   d6f4e:	e7f8      	b.n	d6f42 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6f50:	000dd123 	.word	0x000dd123
   d6f54:	2003e5a4 	.word	0x2003e5a4

000d6f58 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6f5c:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f60:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6f62:	6803      	ldr	r3, [r0, #0]
   d6f64:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f66:	4605      	mov	r5, r0
   d6f68:	460c      	mov	r4, r1
   d6f6a:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6f6c:	4798      	blx	r3
   d6f6e:	4580      	cmp	r8, r0
   d6f70:	d80d      	bhi.n	d6f8e <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6f72:	3420      	adds	r4, #32
   d6f74:	6868      	ldr	r0, [r5, #4]
   d6f76:	9600      	str	r6, [sp, #0]
   d6f78:	463b      	mov	r3, r7
   d6f7a:	b2e2      	uxtb	r2, r4
   d6f7c:	216f      	movs	r1, #111	; 0x6f
   d6f7e:	f7ff ffb1 	bl	d6ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6f82:	fab0 f080 	clz	r0, r0
   d6f86:	0940      	lsrs	r0, r0, #5
}
   d6f88:	b002      	add	sp, #8
   d6f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6f8e:	2000      	movs	r0, #0
   d6f90:	e7fa      	b.n	d6f88 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6f92 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6f92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6f94:	7c13      	ldrb	r3, [r2, #16]
   d6f96:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6f9a:	7bd3      	ldrb	r3, [r2, #15]
   d6f9c:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6fa0:	7b93      	ldrb	r3, [r2, #14]
   d6fa2:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6fa6:	7b53      	ldrb	r3, [r2, #13]
   d6fa8:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6fac:	7b13      	ldrb	r3, [r2, #12]
   d6fae:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6fb2:	7ad3      	ldrb	r3, [r2, #11]
   d6fb4:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6fb8:	7a93      	ldrb	r3, [r2, #10]
   d6fba:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6fbe:	2307      	movs	r3, #7
   d6fc0:	9300      	str	r3, [sp, #0]
   d6fc2:	460a      	mov	r2, r1
   d6fc4:	ab02      	add	r3, sp, #8
   d6fc6:	216f      	movs	r1, #111	; 0x6f
   d6fc8:	f7ff ff8c 	bl	d6ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6fcc:	b005      	add	sp, #20
   d6fce:	f85d fb04 	ldr.w	pc, [sp], #4

000d6fd2 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6fd2:	b510      	push	{r4, lr}
   d6fd4:	b088      	sub	sp, #32
   d6fd6:	4604      	mov	r4, r0
	MCP79410Time time;
   d6fd8:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6fda:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6fdc:	f7ff fd62 	bl	d6aa4 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6fe0:	9b01      	ldr	r3, [sp, #4]
   d6fe2:	a803      	add	r0, sp, #12
   d6fe4:	f7ff fe21 	bl	d6c2a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6fe8:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6fec:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6ff2:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6ff6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6ffa:	b16a      	cbz	r2, d7018 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6ffc:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d7000:	aa03      	add	r2, sp, #12
   d7002:	2100      	movs	r1, #0
   d7004:	4620      	mov	r0, r4
   d7006:	f88d 3019 	strb.w	r3, [sp, #25]
   d700a:	f7ff ffc2 	bl	d6f92 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d700e:	fab0 f080 	clz	r0, r0
   d7012:	0940      	lsrs	r0, r0, #5
   d7014:	b008      	add	sp, #32
   d7016:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7018:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d701c:	e7f0      	b.n	d7000 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d7020 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d7020:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7022:	b087      	sub	sp, #28
   d7024:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d7026:	f002 fcd9 	bl	d99dc <_ZN9TimeClass7isValidEv>
   d702a:	4604      	mov	r4, r0
   d702c:	b1e8      	cbz	r0, d706a <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d702e:	f002 fcf2 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d7032:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d7034:	4602      	mov	r2, r0
		time_t now = Time.now();
   d7036:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d7038:	463b      	mov	r3, r7
   d703a:	4628      	mov	r0, r5
   d703c:	f7ff ffc9 	bl	d6fd2 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7040:	4b0c      	ldr	r3, [pc, #48]	; (d7074 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d7042:	490d      	ldr	r1, [pc, #52]	; (d7078 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d7044:	681b      	ldr	r3, [r3, #0]
   d7046:	9300      	str	r3, [sp, #0]
   d7048:	4632      	mov	r2, r6
   d704a:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d704c:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d704e:	a802      	add	r0, sp, #8
   d7050:	f002 fc82 	bl	d9958 <_ZN9TimeClass6formatExPKc>
   d7054:	4809      	ldr	r0, [pc, #36]	; (d707c <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7056:	9a02      	ldr	r2, [sp, #8]
   d7058:	4909      	ldr	r1, [pc, #36]	; (d7080 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d705a:	f7fd f919 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d705e:	a802      	add	r0, sp, #8
   d7060:	f002 fa44 	bl	d94ec <_ZN6StringD1Ev>
}
   d7064:	4620      	mov	r0, r4
   d7066:	b007      	add	sp, #28
   d7068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d706a:	4906      	ldr	r1, [pc, #24]	; (d7084 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d706c:	4803      	ldr	r0, [pc, #12]	; (d707c <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d706e:	f7fd f90f 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d7072:	e7f7      	b.n	d7064 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d7074:	2003dfb0 	.word	0x2003dfb0
   d7078:	2003e618 	.word	0x2003e618
   d707c:	2003e5a4 	.word	0x2003e5a4
   d7080:	000dd13e 	.word	0x000dd13e
   d7084:	000dd154 	.word	0x000dd154

000d7088 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d7088:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d708a:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d708c:	4604      	mov	r4, r0
	if (!timeSet) {
   d708e:	b99d      	cbnz	r5, d70b8 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d7090:	f002 fca4 	bl	d99dc <_ZN9TimeClass7isValidEv>
   d7094:	b180      	cbz	r0, d70b8 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d7096:	2200      	movs	r2, #0
   d7098:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d709a:	4669      	mov	r1, sp
   d709c:	4628      	mov	r0, r5
        tm = 0;
   d709e:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d70a2:	f001 f8e7 	bl	d8274 <spark_sync_time_last>
			if (lastSync != 0) {
   d70a6:	b138      	cbz	r0, d70b8 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d70a8:	7ae3      	ldrb	r3, [r4, #11]
   d70aa:	07db      	lsls	r3, r3, #31
   d70ac:	d502      	bpl.n	d70b4 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d70ae:	4620      	mov	r0, r4
   d70b0:	f7ff ffb6 	bl	d7020 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d70b4:	2301      	movs	r3, #1
   d70b6:	7263      	strb	r3, [r4, #9]
}
   d70b8:	b003      	add	sp, #12
   d70ba:	bd30      	pop	{r4, r5, pc}

000d70bc <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d70bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d70be:	2301      	movs	r3, #1
	buf[0] = value;
   d70c0:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d70c4:	9300      	str	r3, [sp, #0]
   d70c6:	460a      	mov	r2, r1
   d70c8:	ab03      	add	r3, sp, #12
   d70ca:	216f      	movs	r1, #111	; 0x6f
   d70cc:	f7ff ff0a 	bl	d6ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d70d0:	b005      	add	sp, #20
   d70d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d70d6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d70d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70d8:	4604      	mov	r4, r0
   d70da:	460d      	mov	r5, r1
   d70dc:	4617      	mov	r7, r2
   d70de:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d70e0:	f7ff fe90 	bl	d6e04 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d70e4:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d70e8:	4332      	orrs	r2, r6
   d70ea:	4629      	mov	r1, r5
   d70ec:	4620      	mov	r0, r4
}
   d70ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d70f2:	f7ff bfe3 	b.w	d70bc <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d70f6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:
	if (set) {
   d70f6:	b11b      	cbz	r3, d7100 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xa>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d70f8:	4613      	mov	r3, r2
   d70fa:	22ff      	movs	r2, #255	; 0xff
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d70fc:	f7ff bfeb 	b.w	d70d6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
   d7100:	43d2      	mvns	r2, r2
   d7102:	b2d2      	uxtb	r2, r2
   d7104:	e7fa      	b.n	d70fc <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x6>

000d7106 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d7106:	2900      	cmp	r1, #0
   d7108:	f04f 0300 	mov.w	r3, #0
   d710c:	f04f 02f7 	mov.w	r2, #247	; 0xf7
   d7110:	bf14      	ite	ne
   d7112:	2114      	movne	r1, #20
   d7114:	210d      	moveq	r1, #13
   d7116:	f7ff bfde 	b.w	d70d6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d711a <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d711a:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d711c:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d711e:	d80c      	bhi.n	d713a <_ZN8MCP7941010clearAlarmEi+0x20>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d7120:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d7122:	f04f 0300 	mov.w	r3, #0
   d7126:	bf14      	ite	ne
   d7128:	22df      	movne	r2, #223	; 0xdf
   d712a:	22ef      	moveq	r2, #239	; 0xef
   d712c:	2107      	movs	r1, #7
   d712e:	f7ff ffd2 	bl	d70d6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d7132:	fab0 f080 	clz	r0, r0
   d7136:	0940      	lsrs	r0, r0, #5
}
   d7138:	bd08      	pop	{r3, pc}
		return false;
   d713a:	2000      	movs	r0, #0
   d713c:	e7fc      	b.n	d7138 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d713e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d713e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7140:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d7142:	b085      	sub	sp, #20
   d7144:	4606      	mov	r6, r0
   d7146:	460c      	mov	r4, r1
   d7148:	4617      	mov	r7, r2
   d714a:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d714c:	d902      	bls.n	d7154 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x16>
		return false;
   d714e:	2000      	movs	r0, #0
}
   d7150:	b005      	add	sp, #20
   d7152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (getOscillatorRunning()) {
   d7154:	f7ff fe66 	bl	d6e24 <_ZNK8MCP7941020getOscillatorRunningEv>
   d7158:	2800      	cmp	r0, #0
   d715a:	d0f8      	beq.n	d714e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		clearInterrupt(alarmNum);
   d715c:	4629      	mov	r1, r5
   d715e:	4630      	mov	r0, r6
   d7160:	f7ff ffd1 	bl	d7106 <_ZN8MCP7941014clearInterruptEi>
		buf[0] = time.rawSecond;
   d7164:	7c23      	ldrb	r3, [r4, #16]
		buf[4] = time.rawDayOfMonth;
   d7166:	7b22      	ldrb	r2, [r4, #12]
		buf[0] = time.rawSecond;
   d7168:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d716c:	7be3      	ldrb	r3, [r4, #15]
   d716e:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[4] = time.rawDayOfMonth;
   d7172:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[2] = time.rawHour;
   d7176:	7ba3      	ldrb	r3, [r4, #14]
		buf[5] = time.rawMonth;
   d7178:	7ae2      	ldrb	r2, [r4, #11]
		buf[2] = time.rawHour;
   d717a:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[5] = time.rawMonth;
   d717e:	f88d 200d 	strb.w	r2, [sp, #13]
		buf[3] = time.rawDayOfWeek;
   d7182:	7b63      	ldrb	r3, [r4, #13]
		if (polarity) {
   d7184:	b32f      	cbz	r7, d71d2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x94>
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d7186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d718a:	7c62      	ldrb	r2, [r4, #17]
   d718c:	0112      	lsls	r2, r2, #4
   d718e:	f002 0270 	and.w	r2, r2, #112	; 0x70
   d7192:	431a      	orrs	r2, r3
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d7194:	2d00      	cmp	r5, #0
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d7196:	f04f 0306 	mov.w	r3, #6
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d719a:	f88d 200b 	strb.w	r2, [sp, #11]
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d719e:	9300      	str	r3, [sp, #0]
   d71a0:	bf08      	it	eq
   d71a2:	220a      	moveq	r2, #10
   d71a4:	ab02      	add	r3, sp, #8
   d71a6:	bf18      	it	ne
   d71a8:	2211      	movne	r2, #17
   d71aa:	216f      	movs	r1, #111	; 0x6f
   d71ac:	4630      	mov	r0, r6
   d71ae:	f7ff fe99 	bl	d6ee4 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d71b2:	4604      	mov	r4, r0
   d71b4:	b948      	cbnz	r0, d71ca <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x8c>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d71b6:	2d00      	cmp	r5, #0
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
   d71b8:	f04f 0301 	mov.w	r3, #1
   d71bc:	bf0c      	ite	eq
   d71be:	2210      	moveq	r2, #16
   d71c0:	2220      	movne	r2, #32
   d71c2:	2107      	movs	r1, #7
   d71c4:	4630      	mov	r0, r6
   d71c6:	f7ff ff96 	bl	d70f6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
		return (stat == 0);
   d71ca:	fab4 f084 	clz	r0, r4
   d71ce:	0940      	lsrs	r0, r0, #5
   d71d0:	e7be      	b.n	d7150 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x12>
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d71d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d71d6:	e7d8      	b.n	d718a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>

000d71d8 <_ZN8MCP794108setAlarmEibi>:
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d71d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d71dc:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d71de:	b087      	sub	sp, #28
   d71e0:	4607      	mov	r7, r0
   d71e2:	4689      	mov	r9, r1
   d71e4:	4690      	mov	r8, r2
   d71e6:	461e      	mov	r6, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d71e8:	d903      	bls.n	d71f2 <_ZN8MCP794108setAlarmEibi+0x1a>
		return false;
   d71ea:	2000      	movs	r0, #0
}
   d71ec:	b007      	add	sp, #28
   d71ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	time_t unixTime = getRTCTime();
   d71f2:	f7ff fe30 	bl	d6e56 <_ZNK8MCP7941010getRTCTimeEv>
   d71f6:	4604      	mov	r4, r0
   d71f8:	460d      	mov	r5, r1
	if (unixTime != 0) {
   d71fa:	ea54 0305 	orrs.w	r3, r4, r5
   d71fe:	d0f4      	beq.n	d71ea <_ZN8MCP794108setAlarmEibi+0x12>
		unixTime += secondsFromNow;
   d7200:	eb10 0409 	adds.w	r4, r0, r9
   d7204:	eb41 75e9 	adc.w	r5, r1, r9, asr #31
		MCP79410Time time;
   d7208:	a801      	add	r0, sp, #4
   d720a:	f7ff fc4b 	bl	d6aa4 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d720e:	4622      	mov	r2, r4
   d7210:	462b      	mov	r3, r5
   d7212:	a801      	add	r0, sp, #4
   d7214:	f7ff fd33 	bl	d6c7e <_ZN12MCP79410Time12setAlarmTimeEx>
		return setAlarm(time, polarity, alarmNum);
   d7218:	4633      	mov	r3, r6
   d721a:	4642      	mov	r2, r8
   d721c:	a901      	add	r1, sp, #4
   d721e:	4638      	mov	r0, r7
   d7220:	f7ff ff8d 	bl	d713e <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
MCP79410Time::~MCP79410Time() {
   d7224:	e7e2      	b.n	d71ec <_ZN8MCP794108setAlarmEibi+0x14>

000d7226 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7226:	b538      	push	{r3, r4, r5, lr}
   d7228:	4604      	mov	r4, r0
   d722a:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d722c:	6860      	ldr	r0, [r4, #4]
   d722e:	2157      	movs	r1, #87	; 0x57
   d7230:	f001 fdc1 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7234:	6860      	ldr	r0, [r4, #4]
   d7236:	2101      	movs	r1, #1
   d7238:	f001 fdc4 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d723c:	b108      	cbz	r0, d7242 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d723e:	3d01      	subs	r5, #1
   d7240:	d1f4      	bne.n	d722c <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d7242:	bd38      	pop	{r3, r4, r5, pc}

000d7244 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7248:	4604      	mov	r4, r0
   d724a:	460f      	mov	r7, r1
   d724c:	4616      	mov	r6, r2
   d724e:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d7252:	45b0      	cmp	r8, r6
   d7254:	d020      	beq.n	d7298 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7256:	6860      	ldr	r0, [r4, #4]
   d7258:	2157      	movs	r1, #87	; 0x57
   d725a:	f001 fdac 	bl	d8db6 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d725e:	4639      	mov	r1, r7
   d7260:	6860      	ldr	r0, [r4, #4]
   d7262:	f7ff fa93 	bl	d678c <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d7266:	6860      	ldr	r0, [r4, #4]
   d7268:	f816 1b01 	ldrb.w	r1, [r6], #1
   d726c:	6803      	ldr	r3, [r0, #0]
   d726e:	689b      	ldr	r3, [r3, #8]
   d7270:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d7272:	6860      	ldr	r0, [r4, #4]
   d7274:	2101      	movs	r1, #1
   d7276:	f001 fda5 	bl	d8dc4 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d727a:	3701      	adds	r7, #1
   d727c:	4605      	mov	r5, r0
   d727e:	b138      	cbz	r0, d7290 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d7280:	4602      	mov	r2, r0
   d7282:	4906      	ldr	r1, [pc, #24]	; (d729c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d7284:	4806      	ldr	r0, [pc, #24]	; (d72a0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d7286:	f7fd f803 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
}
   d728a:	4628      	mov	r0, r5
   d728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d7290:	4620      	mov	r0, r4
   d7292:	f7ff ffc8 	bl	d7226 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d7296:	e7dc      	b.n	d7252 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d7298:	2500      	movs	r5, #0
	return stat;
   d729a:	e7f6      	b.n	d728a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d729c:	000dd169 	.word	0x000dd169
   d72a0:	2003e5a4 	.word	0x2003e5a4

000d72a4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d72a6:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72a8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d72aa:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72ac:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d72ae:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72b0:	4604      	mov	r4, r0
   d72b2:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d72b4:	4798      	blx	r3
   d72b6:	4287      	cmp	r7, r0
   d72b8:	d80a      	bhi.n	d72d0 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d72ba:	9a01      	ldr	r2, [sp, #4]
   d72bc:	6860      	ldr	r0, [r4, #4]
   d72be:	4633      	mov	r3, r6
   d72c0:	b2e9      	uxtb	r1, r5
   d72c2:	f7ff ffbf 	bl	d7244 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d72c6:	fab0 f080 	clz	r0, r0
   d72ca:	0940      	lsrs	r0, r0, #5
}
   d72cc:	b003      	add	sp, #12
   d72ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d72d0:	2000      	movs	r0, #0
   d72d2:	e7fb      	b.n	d72cc <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d72d4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d72d4:	4b01      	ldr	r3, [pc, #4]	; (d72dc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d72d6:	4a02      	ldr	r2, [pc, #8]	; (d72e0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d72d8:	601a      	str	r2, [r3, #0]
}
   d72da:	4770      	bx	lr
   d72dc:	2003e5a4 	.word	0x2003e5a4
   d72e0:	000dd18a 	.word	0x000dd18a

000d72e4 <nrf_gpio_pin_port_decode>:
{
   d72e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d72e6:	6803      	ldr	r3, [r0, #0]
   d72e8:	2b2f      	cmp	r3, #47	; 0x2f
{
   d72ea:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d72ec:	d904      	bls.n	d72f8 <nrf_gpio_pin_port_decode+0x14>
   d72ee:	4a07      	ldr	r2, [pc, #28]	; (d730c <nrf_gpio_pin_port_decode+0x28>)
   d72f0:	2100      	movs	r1, #0
   d72f2:	200a      	movs	r0, #10
   d72f4:	f000 feec 	bl	d80d0 <panic_>
    if (*p_pin < P0_PIN_NUM)
   d72f8:	6823      	ldr	r3, [r4, #0]
   d72fa:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d72fc:	bf83      	ittte	hi
   d72fe:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d7302:	4803      	ldrhi	r0, [pc, #12]	; (d7310 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d7304:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d7306:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d730a:	bd10      	pop	{r4, pc}
   d730c:	000d7d51 	.word	0x000d7d51
   d7310:	50000300 	.word	0x50000300

000d7314 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d7314:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7316:	4604      	mov	r4, r0
   d7318:	f7fc ffd2 	bl	d42c0 <fastPinGetPinmap>
   d731c:	0124      	lsls	r4, r4, #4
   d731e:	5d03      	ldrb	r3, [r0, r4]
   d7320:	015d      	lsls	r5, r3, #5
   d7322:	f7fc ffcd 	bl	d42c0 <fastPinGetPinmap>
   d7326:	4420      	add	r0, r4
   d7328:	7843      	ldrb	r3, [r0, #1]
   d732a:	f003 031f 	and.w	r3, r3, #31
   d732e:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7330:	a801      	add	r0, sp, #4
   d7332:	9301      	str	r3, [sp, #4]
   d7334:	f7ff ffd6 	bl	d72e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d7338:	9a01      	ldr	r2, [sp, #4]
   d733a:	2301      	movs	r3, #1
   d733c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d733e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d7342:	b003      	add	sp, #12
   d7344:	bd30      	pop	{r4, r5, pc}

000d7346 <_ZN7OneWire20digitalWriteFastHighEv.isra.0>:

    inline void digitalWriteFastHigh() {
   d7346:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7348:	4604      	mov	r4, r0
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d734a:	f7fc ffb9 	bl	d42c0 <fastPinGetPinmap>
   d734e:	0124      	lsls	r4, r4, #4
   d7350:	5d03      	ldrb	r3, [r0, r4]
   d7352:	015d      	lsls	r5, r3, #5
   d7354:	f7fc ffb4 	bl	d42c0 <fastPinGetPinmap>
   d7358:	4420      	add	r0, r4
   d735a:	7843      	ldrb	r3, [r0, #1]
   d735c:	f003 031f 	and.w	r3, r3, #31
   d7360:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7362:	a801      	add	r0, sp, #4
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	f7ff ffbd 	bl	d72e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d736a:	9a01      	ldr	r2, [sp, #4]
   d736c:	2301      	movs	r3, #1
   d736e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d7370:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d7374:	b003      	add	sp, #12
   d7376:	bd30      	pop	{r4, r5, pc}

000d7378 <_ZN7OneWire15digitalReadFastEv.isra.0>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d7378:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d737a:	4605      	mov	r5, r0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d737c:	f7fc ffa0 	bl	d42c0 <fastPinGetPinmap>
   d7380:	012d      	lsls	r5, r5, #4
   d7382:	5d44      	ldrb	r4, [r0, r5]
   d7384:	f7fc ff9c 	bl	d42c0 <fastPinGetPinmap>
   d7388:	4428      	add	r0, r5
   d738a:	0166      	lsls	r6, r4, #5
   d738c:	7844      	ldrb	r4, [r0, #1]
   d738e:	f004 041f 	and.w	r4, r4, #31
   d7392:	4334      	orrs	r4, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7394:	a801      	add	r0, sp, #4
   d7396:	9401      	str	r4, [sp, #4]
   d7398:	f7ff ffa4 	bl	d72e4 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d739c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d73a0:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d73a2:	a801      	add	r0, sp, #4
   d73a4:	f7ff ff9e 	bl	d72e4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d73a8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d73aa:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d73ae:	40d8      	lsrs	r0, r3
      return pinReadFast(_pin);
    }
   d73b0:	f000 0001 	and.w	r0, r0, #1
   d73b4:	b002      	add	sp, #8
   d73b6:	bd70      	pop	{r4, r5, r6, pc}

000d73b8 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d73b8:	b538      	push	{r3, r4, r5, lr}
   d73ba:	4604      	mov	r4, r0
   d73bc:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d73be:	4628      	mov	r0, r5
   d73c0:	2100      	movs	r1, #0
   d73c2:	f002 fd7f 	bl	d9ec4 <pinMode>
    _pin = pin;
   d73c6:	8025      	strh	r5, [r4, #0]
}
   d73c8:	4620      	mov	r0, r4
   d73ca:	bd38      	pop	{r3, r4, r5, pc}

000d73cc <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d73cc:	b570      	push	{r4, r5, r6, lr}
   d73ce:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d73d0:	f001 fd3a 	bl	d8e48 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d73d4:	8828      	ldrh	r0, [r5, #0]
   d73d6:	2100      	movs	r1, #0
   d73d8:	f000 fd02 	bl	d7de0 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d73dc:	f001 fd36 	bl	d8e4c <_Z10interruptsv>
   d73e0:	247d      	movs	r4, #125	; 0x7d
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d73e2:	3c01      	subs	r4, #1
   d73e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d73e8:	d02d      	beq.n	d7446 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d73ea:	2002      	movs	r0, #2
   d73ec:	f000 fcb0 	bl	d7d50 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d73f0:	8828      	ldrh	r0, [r5, #0]
   d73f2:	f7ff ffc1 	bl	d7378 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d73f6:	2800      	cmp	r0, #0
   d73f8:	d0f3      	beq.n	d73e2 <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
   d73fa:	f001 fd25 	bl	d8e48 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d73fe:	8828      	ldrh	r0, [r5, #0]
   d7400:	f7ff ff88 	bl	d7314 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7404:	2101      	movs	r1, #1
   d7406:	8828      	ldrh	r0, [r5, #0]
   d7408:	f000 fcea 	bl	d7de0 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d740c:	f001 fd1e 	bl	d8e4c <_Z10interruptsv>
   d7410:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d7414:	f000 fc9c 	bl	d7d50 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d7418:	f000 fcaa 	bl	d7d70 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d741c:	2100      	movs	r1, #0
   d741e:	4606      	mov	r6, r0
   d7420:	8828      	ldrh	r0, [r5, #0]
   d7422:	f000 fcdd 	bl	d7de0 <HAL_Pin_Mode>
   d7426:	2046      	movs	r0, #70	; 0x46
   d7428:	f000 fc92 	bl	d7d50 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d742c:	8828      	ldrh	r0, [r5, #0]
   d742e:	f7ff ffa3 	bl	d7378 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d7432:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d7436:	4630      	mov	r0, r6
   d7438:	f000 fca2 	bl	d7d80 <HAL_enable_irq>
   d743c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d7440:	0964      	lsrs	r4, r4, #5
   d7442:	f000 fc85 	bl	d7d50 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d7446:	4620      	mov	r0, r4
   d7448:	bd70      	pop	{r4, r5, r6, pc}

000d744a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d744a:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d744c:	f011 0501 	ands.w	r5, r1, #1
{
   d7450:	4604      	mov	r4, r0
    if (v & 1)
   d7452:	d018      	beq.n	d7486 <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d7454:	f000 fc8c 	bl	d7d70 <HAL_disable_irq>
   d7458:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d745a:	8820      	ldrh	r0, [r4, #0]
   d745c:	f7ff ff5a 	bl	d7314 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7460:	2101      	movs	r1, #1
   d7462:	8820      	ldrh	r0, [r4, #0]
   d7464:	f000 fcbc 	bl	d7de0 <HAL_Pin_Mode>
   d7468:	2001      	movs	r0, #1
   d746a:	f000 fc71 	bl	d7d50 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d746e:	8820      	ldrh	r0, [r4, #0]
   d7470:	2100      	movs	r1, #0
   d7472:	f000 fcb5 	bl	d7de0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d7476:	4628      	mov	r0, r5
   d7478:	f000 fc82 	bl	d7d80 <HAL_enable_irq>
   d747c:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d747e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7482:	f000 bc65 	b.w	d7d50 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d7486:	f000 fc73 	bl	d7d70 <HAL_disable_irq>
   d748a:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d748c:	8820      	ldrh	r0, [r4, #0]
   d748e:	f7ff ff41 	bl	d7314 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7492:	2101      	movs	r1, #1
   d7494:	8820      	ldrh	r0, [r4, #0]
   d7496:	f000 fca3 	bl	d7de0 <HAL_Pin_Mode>
   d749a:	2041      	movs	r0, #65	; 0x41
   d749c:	f000 fc58 	bl	d7d50 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d74a0:	8820      	ldrh	r0, [r4, #0]
   d74a2:	4629      	mov	r1, r5
   d74a4:	f000 fc9c 	bl	d7de0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d74a8:	4630      	mov	r0, r6
   d74aa:	f000 fc69 	bl	d7d80 <HAL_enable_irq>
   d74ae:	2005      	movs	r0, #5
   d74b0:	e7e5      	b.n	d747e <_ZN7OneWire9write_bitEh+0x34>

000d74b2 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d74b2:	b538      	push	{r3, r4, r5, lr}
   d74b4:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d74b6:	f000 fc5b 	bl	d7d70 <HAL_disable_irq>
   d74ba:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d74bc:	8820      	ldrh	r0, [r4, #0]
   d74be:	f7ff ff29 	bl	d7314 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d74c2:	8820      	ldrh	r0, [r4, #0]
   d74c4:	2101      	movs	r1, #1
   d74c6:	f000 fc8b 	bl	d7de0 <HAL_Pin_Mode>
   d74ca:	2001      	movs	r0, #1
   d74cc:	f000 fc40 	bl	d7d50 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d74d0:	2100      	movs	r1, #0
   d74d2:	8820      	ldrh	r0, [r4, #0]
   d74d4:	f000 fc84 	bl	d7de0 <HAL_Pin_Mode>
   d74d8:	200d      	movs	r0, #13
   d74da:	f000 fc39 	bl	d7d50 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d74de:	8820      	ldrh	r0, [r4, #0]
   d74e0:	f7ff ff4a 	bl	d7378 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d74e4:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d74e6:	4628      	mov	r0, r5
   d74e8:	f000 fc4a 	bl	d7d80 <HAL_enable_irq>
   d74ec:	202e      	movs	r0, #46	; 0x2e
   d74ee:	f000 fc2f 	bl	d7d50 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d74f2:	4620      	mov	r0, r4
   d74f4:	bd38      	pop	{r3, r4, r5, pc}

000d74f6 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d74f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74fa:	4604      	mov	r4, r0
   d74fc:	4688      	mov	r8, r1
   d74fe:	4616      	mov	r6, r2
   d7500:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7502:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d7504:	ea18 0f05 	tst.w	r8, r5
   d7508:	bf14      	ite	ne
   d750a:	2101      	movne	r1, #1
   d750c:	2100      	moveq	r1, #0
   d750e:	4620      	mov	r0, r4
   d7510:	f7ff ff9b 	bl	d744a <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7514:	006d      	lsls	r5, r5, #1
   d7516:	3f01      	subs	r7, #1
   d7518:	b2ed      	uxtb	r5, r5
   d751a:	d1f3      	bne.n	d7504 <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
   d751c:	b166      	cbz	r6, d7538 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d751e:	f001 fc93 	bl	d8e48 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d7522:	8820      	ldrh	r0, [r4, #0]
   d7524:	f7ff ff0f 	bl	d7346 <_ZN7OneWire20digitalWriteFastHighEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7528:	8820      	ldrh	r0, [r4, #0]
   d752a:	2101      	movs	r1, #1
   d752c:	f000 fc58 	bl	d7de0 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d7530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   d7534:	f001 bc8a 	b.w	d8e4c <_Z10interruptsv>
}
   d7538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d753c <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d753e:	4607      	mov	r7, r0
   d7540:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d7542:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7544:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d7546:	4638      	mov	r0, r7
   d7548:	f7ff ffb3 	bl	d74b2 <_ZN7OneWire8read_bitEv>
   d754c:	b100      	cbz	r0, d7550 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d754e:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7550:	0064      	lsls	r4, r4, #1
   d7552:	3e01      	subs	r6, #1
   d7554:	b2e4      	uxtb	r4, r4
   d7556:	d1f6      	bne.n	d7546 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d7558:	4628      	mov	r0, r5
   d755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d755c <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d755c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d755e:	2200      	movs	r2, #0
{
   d7560:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d7562:	2155      	movs	r1, #85	; 0x55
{
   d7564:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d7566:	f7ff ffc6 	bl	d74f6 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d756a:	1e65      	subs	r5, r4, #1
   d756c:	3407      	adds	r4, #7
        write(rom[i]);
   d756e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d7572:	2200      	movs	r2, #0
   d7574:	4630      	mov	r0, r6
   d7576:	f7ff ffbe 	bl	d74f6 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d757a:	42a5      	cmp	r5, r4
   d757c:	d1f7      	bne.n	d756e <_ZN7OneWire6selectEPKh+0x12>
}
   d757e:	bd70      	pop	{r4, r5, r6, pc}

000d7580 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d7580:	2200      	movs	r2, #0
   d7582:	21cc      	movs	r1, #204	; 0xcc
   d7584:	f7ff bfb7 	b.w	d74f6 <_ZN7OneWire5writeEhh>

000d7588 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d7588:	2300      	movs	r3, #0
   d758a:	8043      	strh	r3, [r0, #2]
   d758c:	8083      	strh	r3, [r0, #4]
   d758e:	80c3      	strh	r3, [r0, #6]
   d7590:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d7592:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d7594:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d7596:	4770      	bx	lr

000d7598 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d7598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d759c:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d75a0:	4604      	mov	r4, r0
   d75a2:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d75a4:	f1b9 0f00 	cmp.w	r9, #0
   d75a8:	d00d      	beq.n	d75c6 <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d75aa:	2000      	movs	r0, #0
   d75ac:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d75ae:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d75b0:	1ca3      	adds	r3, r4, #2
   d75b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d75b6:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d75b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d75bc:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d75c0:	42a3      	cmp	r3, r4
   d75c2:	d1f9      	bne.n	d75b8 <_ZN7OneWire6searchEPh+0x20>
   d75c4:	e004      	b.n	d75d0 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d75c6:	f7ff ff01 	bl	d73cc <_ZN7OneWire5resetEv>
   d75ca:	b918      	cbnz	r0, d75d4 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d75cc:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d75ce:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d75d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d75d4:	464a      	mov	r2, r9
   d75d6:	21f0      	movs	r1, #240	; 0xf0
   d75d8:	4620      	mov	r0, r4
   d75da:	f7ff ff8c 	bl	d74f6 <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d75de:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d75e0:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d75e2:	4635      	mov	r5, r6
            id_bit = read_bit();
   d75e4:	4620      	mov	r0, r4
   d75e6:	f7ff ff64 	bl	d74b2 <_ZN7OneWire8read_bitEv>
   d75ea:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d75ec:	4620      	mov	r0, r4
   d75ee:	f7ff ff60 	bl	d74b2 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d75f2:	2f01      	cmp	r7, #1
   d75f4:	d10f      	bne.n	d7616 <_ZN7OneWire6searchEPh+0x7e>
   d75f6:	2801      	cmp	r0, #1
   d75f8:	d127      	bne.n	d764a <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d75fa:	2d40      	cmp	r5, #64	; 0x40
   d75fc:	d9d5      	bls.n	d75aa <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d75fe:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d7602:	f1b9 0f00 	cmp.w	r9, #0
   d7606:	d101      	bne.n	d760c <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d7608:	2301      	movs	r3, #1
   d760a:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d760c:	78a3      	ldrb	r3, [r4, #2]
   d760e:	2b00      	cmp	r3, #0
   d7610:	d0cb      	beq.n	d75aa <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d7612:	2001      	movs	r0, #1
   d7614:	e7cc      	b.n	d75b0 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d7616:	4287      	cmp	r7, r0
   d7618:	eb04 030a 	add.w	r3, r4, sl
   d761c:	d10c      	bne.n	d7638 <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d761e:	7aa2      	ldrb	r2, [r4, #10]
   d7620:	42aa      	cmp	r2, r5
   d7622:	d90e      	bls.n	d7642 <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d7624:	789a      	ldrb	r2, [r3, #2]
   d7626:	4216      	tst	r6, r2
   d7628:	bf14      	ite	ne
   d762a:	2701      	movne	r7, #1
   d762c:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d762e:	b967      	cbnz	r7, d764a <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d7630:	2d08      	cmp	r5, #8
   d7632:	d800      	bhi.n	d7636 <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d7634:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d7636:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d7638:	789a      	ldrb	r2, [r3, #2]
   d763a:	ea22 0206 	bic.w	r2, r2, r6
   d763e:	709a      	strb	r2, [r3, #2]
   d7640:	e009      	b.n	d7656 <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d7642:	bf0c      	ite	eq
   d7644:	2701      	moveq	r7, #1
   d7646:	2700      	movne	r7, #0
   d7648:	e7f1      	b.n	d762e <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d764a:	eb04 020a 	add.w	r2, r4, sl
   d764e:	2701      	movs	r7, #1
   d7650:	7893      	ldrb	r3, [r2, #2]
   d7652:	4333      	orrs	r3, r6
   d7654:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d7656:	4639      	mov	r1, r7
   d7658:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d765a:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d765c:	f7ff fef5 	bl	d744a <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d7660:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d7664:	bf04      	itt	eq
   d7666:	f10a 0a01 	addeq.w	sl, sl, #1
   d766a:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d766e:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d7672:	bf08      	it	eq
   d7674:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7676:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d767a:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d767c:	d9b2      	bls.n	d75e4 <_ZN7OneWire6searchEPh+0x4c>
   d767e:	e7bc      	b.n	d75fa <_ZN7OneWire6searchEPh+0x62>

000d7680 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d7680:	b530      	push	{r4, r5, lr}
   d7682:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d7684:	4401      	add	r1, r0
   d7686:	2000      	movs	r0, #0

    while (len--)
   d7688:	428a      	cmp	r2, r1
   d768a:	d013      	beq.n	d76b4 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d768c:	f812 5b01 	ldrb.w	r5, [r2], #1
   d7690:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d7692:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d7696:	f013 0f01 	tst.w	r3, #1
   d769a:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d769e:	bf1c      	itt	ne
   d76a0:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d76a4:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d76a6:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d76a8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d76ac:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d76b0:	d1ef      	bne.n	d7692 <_ZN7OneWire4crc8EPhh+0x12>
   d76b2:	e7e9      	b.n	d7688 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d76b4:	bd30      	pop	{r4, r5, pc}

000d76b6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d76b6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d76b8:	4603      	mov	r3, r0
	switch (__op)
   d76ba:	d102      	bne.n	d76c2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d76bc:	6001      	str	r1, [r0, #0]
      }
   d76be:	2000      	movs	r0, #0
   d76c0:	4770      	bx	lr
	  switch (__op)
   d76c2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d76c4:	bf04      	itt	eq
   d76c6:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d76ca:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d76ce:	e7f6      	b.n	d76be <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d76d0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d76d0:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d76d2:	6842      	ldr	r2, [r0, #4]
   d76d4:	4603      	mov	r3, r0
   d76d6:	1054      	asrs	r4, r2, #1
   d76d8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d76dc:	07d2      	lsls	r2, r2, #31
   d76de:	bf48      	it	mi
   d76e0:	590a      	ldrmi	r2, [r1, r4]
   d76e2:	681b      	ldr	r3, [r3, #0]
      }
   d76e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   d76e8:	bf48      	it	mi
   d76ea:	58d3      	ldrmi	r3, [r2, r3]
   d76ec:	4718      	bx	r3
	...

000d76f0 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d76f0:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d76f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d76f4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d76f8:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d76fa:	3008      	adds	r0, #8
   d76fc:	f000 fad8 	bl	d7cb0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7700:	2004      	movs	r0, #4
   d7702:	f7fc fcc8 	bl	d4096 <_Znwj>
   d7706:	4605      	mov	r5, r0
   d7708:	b398      	cbz	r0, d7772 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d770a:	491b      	ldr	r1, [pc, #108]	; (d7778 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d770c:	2014      	movs	r0, #20
   d770e:	f002 fc5e 	bl	d9fce <_ZnwjRKSt9nothrow_t>
   d7712:	b130      	cbz	r0, d7722 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7714:	2300      	movs	r3, #0
            exited(false) {
   d7716:	e9c0 3300 	strd	r3, r3, [r0]
   d771a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d771e:	7403      	strb	r3, [r0, #16]
   d7720:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7722:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7724:	b1a0      	cbz	r0, d7750 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7726:	4b15      	ldr	r3, [pc, #84]	; (d777c <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7728:	4915      	ldr	r1, [pc, #84]	; (d7780 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d772a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d772e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7732:	e9cd 0300 	strd	r0, r3, [sp]
   d7736:	2202      	movs	r2, #2
   d7738:	4b12      	ldr	r3, [pc, #72]	; (d7784 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d773a:	3004      	adds	r0, #4
   d773c:	f000 faa0 	bl	d7c80 <os_thread_create>
   d7740:	b930      	cbnz	r0, d7750 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7742:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7744:	7c1b      	ldrb	r3, [r3, #16]
   d7746:	b9a3      	cbnz	r3, d7772 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7748:	2001      	movs	r0, #1
   d774a:	f000 faf9 	bl	d7d40 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d774e:	e7f8      	b.n	d7742 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7750:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7752:	2300      	movs	r3, #0
   d7754:	602b      	str	r3, [r5, #0]
	if (__p != pointer())
   d7756:	b164      	cbz	r4, d7772 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7758:	6827      	ldr	r7, [r4, #0]
   d775a:	b137      	cbz	r7, d776a <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d775c:	4638      	mov	r0, r7
   d775e:	f7fe f939 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7762:	2110      	movs	r1, #16
   d7764:	4638      	mov	r0, r7
   d7766:	f002 fc30 	bl	d9fca <_ZdlPvj>
   d776a:	2114      	movs	r1, #20
   d776c:	4620      	mov	r0, r4
   d776e:	f002 fc2c 	bl	d9fca <_ZdlPvj>
   d7772:	6075      	str	r5, [r6, #4]
}
   d7774:	b003      	add	sp, #12
   d7776:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7778:	000dd4d4 	.word	0x000dd4d4
   d777c:	000d798f 	.word	0x000d798f
   d7780:	000dd1fc 	.word	0x000dd1fc
   d7784:	000d5935 	.word	0x000d5935

000d7788 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7788:	f247 5130 	movw	r1, #30000	; 0x7530
   d778c:	4a08      	ldr	r2, [pc, #32]	; (d77b0 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d778e:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7790:	4908      	ldr	r1, [pc, #32]	; (d77b4 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7792:	6002      	str	r2, [r0, #0]
   d7794:	2200      	movs	r2, #0
   d7796:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d779a:	4907      	ldr	r1, [pc, #28]	; (d77b8 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d779c:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d779e:	4907      	ldr	r1, [pc, #28]	; (d77bc <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d77a0:	6042      	str	r2, [r0, #4]
   d77a2:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d77a6:	6181      	str	r1, [r0, #24]
   d77a8:	8502      	strh	r2, [r0, #40]	; 0x28
   d77aa:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d77ae:	4770      	bx	lr
   d77b0:	000dd2c0 	.word	0x000dd2c0
   d77b4:	000d7af9 	.word	0x000d7af9
   d77b8:	000d76d1 	.word	0x000d76d1
   d77bc:	000d76b7 	.word	0x000d76b7

000d77c0 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d77c0:	b510      	push	{r4, lr}
   d77c2:	4b04      	ldr	r3, [pc, #16]	; (d77d4 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d77c4:	4604      	mov	r4, r0
   d77c6:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d77ca:	f7fe f903 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
}
   d77ce:	4620      	mov	r0, r4
   d77d0:	bd10      	pop	{r4, pc}
   d77d2:	bf00      	nop
   d77d4:	000dd2c0 	.word	0x000dd2c0

000d77d8 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d77d8:	b510      	push	{r4, lr}
   d77da:	4b03      	ldr	r3, [pc, #12]	; (d77e8 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d77dc:	6003      	str	r3, [r0, #0]
   d77de:	4604      	mov	r4, r0
   d77e0:	f7ff ffee 	bl	d77c0 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d77e4:	4620      	mov	r0, r4
   d77e6:	bd10      	pop	{r4, pc}
   d77e8:	000dd2e8 	.word	0x000dd2e8

000d77ec <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d77ec:	b510      	push	{r4, lr}
   d77ee:	4604      	mov	r4, r0
}
   d77f0:	f7ff fff2 	bl	d77d8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d77f4:	4620      	mov	r0, r4
   d77f6:	2138      	movs	r1, #56	; 0x38
   d77f8:	f002 fbe7 	bl	d9fca <_ZdlPvj>
   d77fc:	4620      	mov	r0, r4
   d77fe:	bd10      	pop	{r4, pc}

000d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7800:	6880      	ldr	r0, [r0, #8]
   d7802:	f000 ba5d 	b.w	d7cc0 <os_mutex_lock>

000d7806 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7806:	6880      	ldr	r0, [r0, #8]
   d7808:	f000 ba62 	b.w	d7cd0 <os_mutex_unlock>

000d780c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d780c:	b510      	push	{r4, lr}
   d780e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7810:	6800      	ldr	r0, [r0, #0]
   d7812:	f7ff fff8 	bl	d7806 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7816:	4620      	mov	r0, r4
   d7818:	bd10      	pop	{r4, pc}

000d781a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d781a:	b513      	push	{r0, r1, r4, lr}
   d781c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d781e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7820:	f7ff ffee 	bl	d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7826:	88dc      	ldrh	r4, [r3, #6]
   d7828:	b2a4      	uxth	r4, r4
   d782a:	b10c      	cbz	r4, d7830 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d782c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7830:	a801      	add	r0, sp, #4
   d7832:	f7ff ffeb 	bl	d780c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7836:	4620      	mov	r0, r4
   d7838:	b002      	add	sp, #8
   d783a:	bd10      	pop	{r4, pc}

000d783c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d783c:	b513      	push	{r0, r1, r4, lr}
   d783e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7840:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7842:	f7ff ffdd 	bl	d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7846:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d784a:	b943      	cbnz	r3, d785e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d784c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d784e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7850:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7852:	a801      	add	r0, sp, #4
   d7854:	f7ff ffda 	bl	d780c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7858:	4620      	mov	r0, r4
   d785a:	b002      	add	sp, #8
   d785c:	bd10      	pop	{r4, pc}
	bool result = false;
   d785e:	2400      	movs	r4, #0
   d7860:	e7f7      	b.n	d7852 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7862 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7862:	b513      	push	{r0, r1, r4, lr}
   d7864:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7866:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7868:	f7ff ffca 	bl	d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d786c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d786e:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7870:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7872:	f7ff ffcb 	bl	d780c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7876:	4620      	mov	r0, r4
   d7878:	b002      	add	sp, #8
   d787a:	bd10      	pop	{r4, pc}

000d787c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7880:	4699      	mov	r9, r3
   d7882:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7884:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7888:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d788c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7890:	4604      	mov	r4, r0
   d7892:	460f      	mov	r7, r1
   d7894:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7896:	b913      	cbnz	r3, d789e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7898:	6803      	ldr	r3, [r0, #0]
   d789a:	689b      	ldr	r3, [r3, #8]
   d789c:	4798      	blx	r3
		data = "";
   d789e:	4b31      	ldr	r3, [pc, #196]	; (d7964 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d78a0:	4638      	mov	r0, r7
		data = "";
   d78a2:	2e00      	cmp	r6, #0
   d78a4:	bf08      	it	eq
   d78a6:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d78a8:	f004 fc86 	bl	dc1b8 <strlen>
   d78ac:	4605      	mov	r5, r0
   d78ae:	4630      	mov	r0, r6
   d78b0:	f004 fc82 	bl	dc1b8 <strlen>
   d78b4:	4428      	add	r0, r5
   d78b6:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d78ba:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d78bc:	bf1c      	itt	ne
   d78be:	f025 0503 	bicne.w	r5, r5, #3
   d78c2:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d78c4:	4633      	mov	r3, r6
   d78c6:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d78ca:	e9cd 9a00 	strd	r9, sl, [sp]
   d78ce:	4926      	ldr	r1, [pc, #152]	; (d7968 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d78d0:	4826      	ldr	r0, [pc, #152]	; (d796c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d78d2:	463a      	mov	r2, r7
   d78d4:	f7fc fcdc 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d78d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d78da:	3b08      	subs	r3, #8
   d78dc:	42ab      	cmp	r3, r5
   d78de:	d212      	bcs.n	d7906 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d78e0:	2400      	movs	r4, #0
}
   d78e2:	4620      	mov	r0, r4
   d78e4:	b006      	add	sp, #24
   d78e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d78ea:	88cb      	ldrh	r3, [r1, #6]
   d78ec:	2b01      	cmp	r3, #1
   d78ee:	d036      	beq.n	d795e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d78f0:	a805      	add	r0, sp, #20
   d78f2:	f7ff ff8b 	bl	d780c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d78f6:	6823      	ldr	r3, [r4, #0]
   d78f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d78fc:	699b      	ldr	r3, [r3, #24]
   d78fe:	4620      	mov	r0, r4
   d7900:	4798      	blx	r3
   d7902:	2800      	cmp	r0, #0
   d7904:	d0ec      	beq.n	d78e0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7906:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7908:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d790a:	f7ff ff79 	bl	d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d790e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7910:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7912:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7914:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7916:	1ad2      	subs	r2, r2, r3
   d7918:	42aa      	cmp	r2, r5
   d791a:	d3e6      	bcc.n	d78ea <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d791c:	ea48 080a 	orr.w	r8, r8, sl
   d7920:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7924:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7928:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d792a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d792e:	4639      	mov	r1, r7
   d7930:	4640      	mov	r0, r8
   d7932:	f003 febf 	bl	db6b4 <strcpy>
				cp += strlen(cp) + 1;
   d7936:	4640      	mov	r0, r8
   d7938:	f004 fc3e 	bl	dc1b8 <strlen>
   d793c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d793e:	4631      	mov	r1, r6
   d7940:	4440      	add	r0, r8
   d7942:	f003 feb7 	bl	db6b4 <strcpy>
				nextFree += size;
   d7946:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7948:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d794a:	441d      	add	r5, r3
   d794c:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d794e:	88d3      	ldrh	r3, [r2, #6]
   d7950:	3301      	adds	r3, #1
   d7952:	80d3      	strh	r3, [r2, #6]
				return true;
   d7954:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7956:	a805      	add	r0, sp, #20
   d7958:	f7ff ff58 	bl	d780c <_ZN11StMutexLockD1Ev>
   d795c:	e7c1      	b.n	d78e2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d795e:	2400      	movs	r4, #0
   d7960:	e7f9      	b.n	d7956 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d7962:	bf00      	nop
   d7964:	000dd4f4 	.word	0x000dd4f4
   d7968:	000dd20e 	.word	0x000dd20e
   d796c:	2003e5a8 	.word	0x2003e5a8

000d7970 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7970:	b508      	push	{r3, lr}
   d7972:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7974:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7978:	69a3      	ldr	r3, [r4, #24]
   d797a:	b90b      	cbnz	r3, d7980 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d797c:	f002 fb2b 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7980:	69e3      	ldr	r3, [r4, #28]
   d7982:	4621      	mov	r1, r4
   d7984:	4628      	mov	r0, r5
   d7986:	4798      	blx	r3
		os_thread_yield();
   d7988:	f000 f982 	bl	d7c90 <os_thread_yield>
	while(true) {
   d798c:	e7f4      	b.n	d7978 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d798e <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d798e:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7990:	f7ff ffee 	bl	d7970 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7994 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7994:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7996:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d799a:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d799c:	4628      	mov	r0, r5
   d799e:	f004 fc0b 	bl	dc1b8 <strlen>
   d79a2:	3001      	adds	r0, #1
   d79a4:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d79a6:	4628      	mov	r0, r5
   d79a8:	f004 fc06 	bl	dc1b8 <strlen>
	size_t offset = start - retainedBuffer;
   d79ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d79ae:	3001      	adds	r0, #1
   d79b0:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d79b2:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d79b4:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d79b8:	bf1c      	itt	ne
   d79ba:	f1c3 0304 	rsbne	r3, r3, #4
   d79be:	18c0      	addne	r0, r0, r3
}
   d79c0:	bd68      	pop	{r3, r5, r6, pc}

000d79c2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d79c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d79c4:	4604      	mov	r4, r0
   d79c6:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d79c8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d79ca:	f7ff ff19 	bl	d7800 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d79ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79d0:	88fb      	ldrh	r3, [r7, #6]
   d79d2:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d79d6:	b1e6      	cbz	r6, d7a12 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d79d8:	2b01      	cmp	r3, #1
   d79da:	d922      	bls.n	d7a22 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d79dc:	4629      	mov	r1, r5
   d79de:	4620      	mov	r0, r4
   d79e0:	f7ff ffd8 	bl	d7994 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d79e4:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d79e6:	4629      	mov	r1, r5
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7ff ffd3 	bl	d7994 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79ee:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d79f0:	443a      	add	r2, r7
	if (after > 0) {
   d79f2:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d79f4:	4601      	mov	r1, r0
	size_t len = next - start;
   d79f6:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d79fa:	d002      	beq.n	d7a02 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d79fc:	4628      	mov	r0, r5
   d79fe:	f003 fb8b 	bl	db118 <memmove>
	nextFree -= len;
   d7a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7a04:	1b9b      	subs	r3, r3, r6
   d7a06:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7a08:	88fb      	ldrh	r3, [r7, #6]
   d7a0a:	3b01      	subs	r3, #1
   d7a0c:	80fb      	strh	r3, [r7, #6]
	return true;
   d7a0e:	2601      	movs	r6, #1
   d7a10:	e001      	b.n	d7a16 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7a12:	2b00      	cmp	r3, #0
   d7a14:	d1e7      	bne.n	d79e6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7a16:	a801      	add	r0, sp, #4
   d7a18:	f7ff fef8 	bl	d780c <_ZN11StMutexLockD1Ev>
}
   d7a1c:	4630      	mov	r0, r6
   d7a1e:	b003      	add	sp, #12
   d7a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7a22:	2600      	movs	r6, #0
   d7a24:	e7f7      	b.n	d7a16 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7a28 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a2c:	460d      	mov	r5, r1
   d7a2e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a30:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7a32:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a34:	f7ff fea8 	bl	d7788 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7a38:	4b15      	ldr	r3, [pc, #84]	; (d7a90 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a3a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a3e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a40:	4b14      	ldr	r3, [pc, #80]	; (d7a94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a42:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a44:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a46:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a48:	4698      	mov	r8, r3
   d7a4a:	d117      	bne.n	d7a7c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7a4c:	88ab      	ldrh	r3, [r5, #4]
   d7a4e:	b29b      	uxth	r3, r3
   d7a50:	42b3      	cmp	r3, r6
   d7a52:	d113      	bne.n	d7a7c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7a54:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a58:	6367      	str	r7, [r4, #52]	; 0x34
   d7a5a:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7a5e:	88eb      	ldrh	r3, [r5, #6]
   d7a60:	fa1f f289 	uxth.w	r2, r9
   d7a64:	b29b      	uxth	r3, r3
   d7a66:	429a      	cmp	r2, r3
   d7a68:	d20e      	bcs.n	d7a88 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7a6c:	4620      	mov	r0, r4
   d7a6e:	f7ff ff91 	bl	d7994 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7a72:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7a74:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7a76:	f109 0901 	add.w	r9, r9, #1
   d7a7a:	d9f0      	bls.n	d7a5e <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7a7c:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7a7e:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a82:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7a84:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7a86:	80eb      	strh	r3, [r5, #6]
}
   d7a88:	4620      	mov	r0, r4
   d7a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a8e:	bf00      	nop
   d7a90:	000dd2e8 	.word	0x000dd2e8
   d7a94:	d19cab61 	.word	0xd19cab61

000d7a98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7a98:	b510      	push	{r4, lr}
   d7a9a:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7a9e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7aa0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7aa2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7aa4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7aa6:	b90a      	cbnz	r2, d7aac <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7aa8:	07d9      	lsls	r1, r3, #31
   d7aaa:	d505      	bpl.n	d7ab8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7ab0:	4b0f      	ldr	r3, [pc, #60]	; (d7af0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7ab2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7ab4:	4b0f      	ldr	r3, [pc, #60]	; (d7af4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7ab6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ab8:	ab02      	add	r3, sp, #8
   d7aba:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7abe:	466a      	mov	r2, sp
   d7ac0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7ac8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7acc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ad0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ad2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ad6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ad8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ada:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7adc:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7ade:	4618      	mov	r0, r3
   d7ae0:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ae2:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7ae4:	9105      	str	r1, [sp, #20]
   d7ae6:	f7fd ff75 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
	}
   d7aea:	4620      	mov	r0, r4
   d7aec:	b006      	add	sp, #24
   d7aee:	bd10      	pop	{r4, pc}
   d7af0:	000d76d1 	.word	0x000d76d1
   d7af4:	000d76b7 	.word	0x000d76b7

000d7af8 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7af8:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7afa:	4b05      	ldr	r3, [pc, #20]	; (d7b10 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7afc:	9300      	str	r3, [sp, #0]
   d7afe:	4669      	mov	r1, sp
   d7b00:	2300      	movs	r3, #0
   d7b02:	3010      	adds	r0, #16
   d7b04:	9301      	str	r3, [sp, #4]
   d7b06:	f7ff ffc7 	bl	d7a98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7b0a:	b003      	add	sp, #12
   d7b0c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b10:	000d7b41 	.word	0x000d7b41

000d7b14 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7b14:	b513      	push	{r0, r1, r4, lr}
   d7b16:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7b18:	f000 f922 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b1e:	1ac0      	subs	r0, r0, r3
   d7b20:	68e3      	ldr	r3, [r4, #12]
   d7b22:	4298      	cmp	r0, r3
   d7b24:	d308      	bcc.n	d7b38 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7b26:	4b05      	ldr	r3, [pc, #20]	; (d7b3c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7b28:	9300      	str	r3, [sp, #0]
   d7b2a:	4669      	mov	r1, sp
   d7b2c:	2300      	movs	r3, #0
   d7b2e:	f104 0010 	add.w	r0, r4, #16
   d7b32:	9301      	str	r3, [sp, #4]
   d7b34:	f7ff ffb0 	bl	d7a98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7b38:	b002      	add	sp, #8
   d7b3a:	bd10      	pop	{r4, pc}
   d7b3c:	000d7b41 	.word	0x000d7b41

000d7b40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7b44:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7b48:	b086      	sub	sp, #24
   d7b4a:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7b4c:	2b00      	cmp	r3, #0
   d7b4e:	d164      	bne.n	d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b50:	f000 fb60 	bl	d8214 <spark_cloud_flag_connected>
   d7b54:	2800      	cmp	r0, #0
   d7b56:	d060      	beq.n	d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7b58:	f000 f902 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
   d7b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b5e:	1ac0      	subs	r0, r0, r3
   d7b60:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7b64:	4298      	cmp	r0, r3
   d7b66:	d958      	bls.n	d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7b68:	6823      	ldr	r3, [r4, #0]
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	695b      	ldr	r3, [r3, #20]
   d7b6e:	4798      	blx	r3
		if (data) {
   d7b70:	4605      	mov	r5, r0
   d7b72:	2800      	cmp	r0, #0
   d7b74:	d051      	beq.n	d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7b76:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7b7a:	2301      	movs	r3, #1
   d7b7c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7b80:	4638      	mov	r0, r7
   d7b82:	f004 fb19 	bl	dc1b8 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7b86:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b8a:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7b8e:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b90:	682b      	ldr	r3, [r5, #0]
   d7b92:	492b      	ldr	r1, [pc, #172]	; (d7c40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7b94:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7b96:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b98:	4633      	mov	r3, r6
   d7b9a:	482a      	ldr	r0, [pc, #168]	; (d7c44 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b9c:	463a      	mov	r2, r7
   d7b9e:	f7fc fb77 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7ba2:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7ba4:	f88d 8000 	strb.w	r8, [sp]
   d7ba8:	4632      	mov	r2, r6
   d7baa:	4639      	mov	r1, r7
   d7bac:	a802      	add	r0, sp, #8
   d7bae:	f000 fee1 	bl	d8974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7bb2:	9d02      	ldr	r5, [sp, #8]
   d7bb4:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7bb6:	b91b      	cbnz	r3, d7bc0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7bb8:	2001      	movs	r0, #1
   d7bba:	f000 fc1b 	bl	d83f4 <delay>
			while(!request.isDone()) {
   d7bbe:	e7f8      	b.n	d7bb2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7bc0:	2000      	movs	r0, #0
   d7bc2:	f000 fabf 	bl	d8144 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7bc6:	b120      	cbz	r0, d7bd2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7bc8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7bca:	b913      	cbnz	r3, d7bd2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7bcc:	f000 fb12 	bl	d81f4 <spark_process>
    }
   d7bd0:	e7fa      	b.n	d7bc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7bd2:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7bd4:	2b01      	cmp	r3, #1
   d7bd6:	d123      	bne.n	d7c20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7bd8:	491b      	ldr	r1, [pc, #108]	; (d7c48 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7bda:	481a      	ldr	r0, [pc, #104]	; (d7c44 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7bdc:	f7fc fb58 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7be0:	6823      	ldr	r3, [r4, #0]
   d7be2:	2100      	movs	r1, #0
   d7be4:	699b      	ldr	r3, [r3, #24]
   d7be6:	4620      	mov	r0, r4
   d7be8:	4798      	blx	r3
			isSending = false;
   d7bea:	2300      	movs	r3, #0
   d7bec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7bf0:	f000 f8b6 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7bf4:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d7bf6:	9c03      	ldr	r4, [sp, #12]
   d7bf8:	b17c      	cbz	r4, d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7bfa:	6863      	ldr	r3, [r4, #4]
   d7bfc:	3b01      	subs	r3, #1
   d7bfe:	6063      	str	r3, [r4, #4]
   d7c00:	b95b      	cbnz	r3, d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7c02:	6823      	ldr	r3, [r4, #0]
   d7c04:	4620      	mov	r0, r4
   d7c06:	689b      	ldr	r3, [r3, #8]
   d7c08:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7c0a:	68a3      	ldr	r3, [r4, #8]
   d7c0c:	3b01      	subs	r3, #1
   d7c0e:	60a3      	str	r3, [r4, #8]
   d7c10:	b91b      	cbnz	r3, d7c1a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7c12:	6823      	ldr	r3, [r4, #0]
   d7c14:	4620      	mov	r0, r4
   d7c16:	68db      	ldr	r3, [r3, #12]
   d7c18:	4798      	blx	r3
}
   d7c1a:	b006      	add	sp, #24
   d7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7c20:	68e2      	ldr	r2, [r4, #12]
   d7c22:	490a      	ldr	r1, [pc, #40]	; (d7c4c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7c24:	4807      	ldr	r0, [pc, #28]	; (d7c44 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7c26:	f7fc fb33 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7c2a:	4b09      	ldr	r3, [pc, #36]	; (d7c50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7c2c:	9304      	str	r3, [sp, #16]
   d7c2e:	a904      	add	r1, sp, #16
   d7c30:	2300      	movs	r3, #0
   d7c32:	f104 0010 	add.w	r0, r4, #16
   d7c36:	9305      	str	r3, [sp, #20]
   d7c38:	f7ff ff2e 	bl	d7a98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7c3c:	e7d5      	b.n	d7bea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7c3e:	bf00      	nop
   d7c40:	000dd24f 	.word	0x000dd24f
   d7c44:	2003e5a8 	.word	0x2003e5a8
   d7c48:	000dd270 	.word	0x000dd270
   d7c4c:	000dd287 	.word	0x000dd287
   d7c50:	000d7b15 	.word	0x000d7b15

000d7c54 <_GLOBAL__sub_I_pubqLogger>:
   d7c54:	4b01      	ldr	r3, [pc, #4]	; (d7c5c <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7c56:	4a02      	ldr	r2, [pc, #8]	; (d7c60 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7c58:	601a      	str	r2, [r3, #0]
}
   d7c5a:	4770      	bx	lr
   d7c5c:	2003e5a8 	.word	0x2003e5a8
   d7c60:	000dd2ae 	.word	0x000dd2ae

000d7c64 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7c64:	4b01      	ldr	r3, [pc, #4]	; (d7c6c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d7c66:	2201      	movs	r2, #1
   d7c68:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d7c6a:	4770      	bx	lr
   d7c6c:	2003e5ac 	.word	0x2003e5ac

000d7c70 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7c70:	b508      	push	{r3, lr}
   d7c72:	4b02      	ldr	r3, [pc, #8]	; (d7c7c <cellular_signal+0xc>)
   d7c74:	681b      	ldr	r3, [r3, #0]
   d7c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c78:	9301      	str	r3, [sp, #4]
   d7c7a:	bd08      	pop	{r3, pc}
   d7c7c:	00030274 	.word	0x00030274

000d7c80 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7c80:	b508      	push	{r3, lr}
   d7c82:	4b02      	ldr	r3, [pc, #8]	; (d7c8c <os_thread_create+0xc>)
   d7c84:	681b      	ldr	r3, [r3, #0]
   d7c86:	685b      	ldr	r3, [r3, #4]
   d7c88:	9301      	str	r3, [sp, #4]
   d7c8a:	bd08      	pop	{r3, pc}
   d7c8c:	00030248 	.word	0x00030248

000d7c90 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c90:	b508      	push	{r3, lr}
   d7c92:	4b02      	ldr	r3, [pc, #8]	; (d7c9c <os_thread_yield+0xc>)
   d7c94:	681b      	ldr	r3, [r3, #0]
   d7c96:	68db      	ldr	r3, [r3, #12]
   d7c98:	9301      	str	r3, [sp, #4]
   d7c9a:	bd08      	pop	{r3, pc}
   d7c9c:	00030248 	.word	0x00030248

000d7ca0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <os_thread_scheduling+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	69db      	ldr	r3, [r3, #28]
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030248 	.word	0x00030248

000d7cb0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <os_mutex_create+0xc>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7cb8:	9301      	str	r3, [sp, #4]
   d7cba:	bd08      	pop	{r3, pc}
   d7cbc:	00030248 	.word	0x00030248

000d7cc0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b02      	ldr	r3, [pc, #8]	; (d7ccc <os_mutex_lock+0xc>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7cc8:	9301      	str	r3, [sp, #4]
   d7cca:	bd08      	pop	{r3, pc}
   d7ccc:	00030248 	.word	0x00030248

000d7cd0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7cd0:	b508      	push	{r3, lr}
   d7cd2:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <os_mutex_unlock+0xc>)
   d7cd4:	681b      	ldr	r3, [r3, #0]
   d7cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7cd8:	9301      	str	r3, [sp, #4]
   d7cda:	bd08      	pop	{r3, pc}
   d7cdc:	00030248 	.word	0x00030248

000d7ce0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7ce0:	b508      	push	{r3, lr}
   d7ce2:	4b02      	ldr	r3, [pc, #8]	; (d7cec <os_mutex_recursive_create+0xc>)
   d7ce4:	681b      	ldr	r3, [r3, #0]
   d7ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ce8:	9301      	str	r3, [sp, #4]
   d7cea:	bd08      	pop	{r3, pc}
   d7cec:	00030248 	.word	0x00030248

000d7cf0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7cf0:	b508      	push	{r3, lr}
   d7cf2:	4b02      	ldr	r3, [pc, #8]	; (d7cfc <os_mutex_recursive_destroy+0xc>)
   d7cf4:	681b      	ldr	r3, [r3, #0]
   d7cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cf8:	9301      	str	r3, [sp, #4]
   d7cfa:	bd08      	pop	{r3, pc}
   d7cfc:	00030248 	.word	0x00030248

000d7d00 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <os_thread_exit+0xc>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d08:	9301      	str	r3, [sp, #4]
   d7d0a:	bd08      	pop	{r3, pc}
   d7d0c:	00030248 	.word	0x00030248

000d7d10 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <HAL_Feature_Set+0xc>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d18:	9301      	str	r3, [sp, #4]
   d7d1a:	bd08      	pop	{r3, pc}
   d7d1c:	00030234 	.word	0x00030234

000d7d20 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7d20:	b508      	push	{r3, lr}
   d7d22:	4b02      	ldr	r3, [pc, #8]	; (d7d2c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7d24:	681b      	ldr	r3, [r3, #0]
   d7d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d28:	9301      	str	r3, [sp, #4]
   d7d2a:	bd08      	pop	{r3, pc}
   d7d2c:	00030234 	.word	0x00030234

000d7d30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d30:	b508      	push	{r3, lr}
   d7d32:	4b02      	ldr	r3, [pc, #8]	; (d7d3c <HAL_RNG_GetRandomNumber+0xc>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	685b      	ldr	r3, [r3, #4]
   d7d38:	9301      	str	r3, [sp, #4]
   d7d3a:	bd08      	pop	{r3, pc}
   d7d3c:	00030218 	.word	0x00030218

000d7d40 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7d40:	b508      	push	{r3, lr}
   d7d42:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <HAL_Delay_Milliseconds+0xc>)
   d7d44:	681b      	ldr	r3, [r3, #0]
   d7d46:	689b      	ldr	r3, [r3, #8]
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	bd08      	pop	{r3, pc}
   d7d4c:	00030218 	.word	0x00030218

000d7d50 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <HAL_Delay_Microseconds+0xc>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	68db      	ldr	r3, [r3, #12]
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	00030218 	.word	0x00030218

000d7d60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	695b      	ldr	r3, [r3, #20]
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	00030218 	.word	0x00030218

000d7d70 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <HAL_disable_irq+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030218 	.word	0x00030218

000d7d80 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <HAL_enable_irq+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030218 	.word	0x00030218

000d7d90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <hal_rtc_time_is_valid+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030218 	.word	0x00030218

000d7da0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <hal_timer_millis+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030218 	.word	0x00030218

000d7db0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <hal_rtc_get_time+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	00030218 	.word	0x00030218

000d7dc0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <hal_rtc_set_time+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030218 	.word	0x00030218

000d7dd0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <HAL_Pin_Map+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	681b      	ldr	r3, [r3, #0]
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	0003022c 	.word	0x0003022c

000d7de0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <HAL_Pin_Mode+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	689b      	ldr	r3, [r3, #8]
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	0003022c 	.word	0x0003022c

000d7df0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <HAL_Get_Pin_Mode+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	68db      	ldr	r3, [r3, #12]
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	0003022c 	.word	0x0003022c

000d7e00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <HAL_GPIO_Write+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	691b      	ldr	r3, [r3, #16]
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	0003022c 	.word	0x0003022c

000d7e10 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <HAL_GPIO_Read+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	695b      	ldr	r3, [r3, #20]
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	0003022c 	.word	0x0003022c

000d7e20 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <HAL_Interrupts_Attach+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	699b      	ldr	r3, [r3, #24]
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	0003022c 	.word	0x0003022c

000d7e30 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <HAL_Interrupts_Detach+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	69db      	ldr	r3, [r3, #28]
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	0003022c 	.word	0x0003022c

000d7e40 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <HAL_Interrupts_Enable_All+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	6a1b      	ldr	r3, [r3, #32]
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	0003022c 	.word	0x0003022c

000d7e50 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <HAL_Interrupts_Disable_All+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	0003022c 	.word	0x0003022c

000d7e60 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <hal_i2c_begin+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	68db      	ldr	r3, [r3, #12]
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030228 	.word	0x00030228

000d7e70 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <hal_i2c_begin_transmission+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	699b      	ldr	r3, [r3, #24]
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030228 	.word	0x00030228

000d7e80 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <hal_i2c_end_transmission+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	69db      	ldr	r3, [r3, #28]
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	00030228 	.word	0x00030228

000d7e90 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <hal_i2c_write+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	6a1b      	ldr	r3, [r3, #32]
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	00030228 	.word	0x00030228

000d7ea0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <hal_i2c_available+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	00030228 	.word	0x00030228

000d7eb0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <hal_i2c_read+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	00030228 	.word	0x00030228

000d7ec0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <hal_i2c_peek+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	00030228 	.word	0x00030228

000d7ed0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <hal_i2c_flush+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	00030228 	.word	0x00030228

000d7ee0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <hal_i2c_is_enabled+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030228 	.word	0x00030228

000d7ef0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <hal_i2c_init+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030228 	.word	0x00030228

000d7f00 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <hal_i2c_lock+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030228 	.word	0x00030228

000d7f10 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <hal_i2c_unlock+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030228 	.word	0x00030228

000d7f20 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <hal_i2c_request_ex+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030228 	.word	0x00030228

000d7f30 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <inet_inet_ntop+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	695b      	ldr	r3, [r3, #20]
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030264 	.word	0x00030264

000d7f40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <netdb_freeaddrinfo+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	689b      	ldr	r3, [r3, #8]
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	00030268 	.word	0x00030268

000d7f50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <netdb_getaddrinfo+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	68db      	ldr	r3, [r3, #12]
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	00030268 	.word	0x00030268

000d7f60 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <hal_spi_begin+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	681b      	ldr	r3, [r3, #0]
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	00030230 	.word	0x00030230

000d7f70 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <hal_spi_transfer+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	695b      	ldr	r3, [r3, #20]
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	00030230 	.word	0x00030230

000d7f80 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <hal_spi_init+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	69db      	ldr	r3, [r3, #28]
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	00030230 	.word	0x00030230

000d7f90 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <hal_spi_is_enabled+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	6a1b      	ldr	r3, [r3, #32]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	00030230 	.word	0x00030230

000d7fa0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <hal_spi_info+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	00030230 	.word	0x00030230

000d7fb0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <hal_spi_set_settings+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	00030230 	.word	0x00030230

000d7fc0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <hal_spi_acquire+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030230 	.word	0x00030230

000d7fd0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <hal_spi_release+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030230 	.word	0x00030230

000d7fe0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <hal_usart_init+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	681b      	ldr	r3, [r3, #0]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	0003023c 	.word	0x0003023c

000d7ff0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <hal_usart_write+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	68db      	ldr	r3, [r3, #12]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	0003023c 	.word	0x0003023c

000d8000 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <hal_usart_available+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	691b      	ldr	r3, [r3, #16]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	0003023c 	.word	0x0003023c

000d8010 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <hal_usart_read+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	695b      	ldr	r3, [r3, #20]
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	0003023c 	.word	0x0003023c

000d8020 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <hal_usart_peek+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	699b      	ldr	r3, [r3, #24]
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	0003023c 	.word	0x0003023c

000d8030 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <hal_usart_flush+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	69db      	ldr	r3, [r3, #28]
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	0003023c 	.word	0x0003023c

000d8040 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <hal_usart_is_enabled+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	6a1b      	ldr	r3, [r3, #32]
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	0003023c 	.word	0x0003023c

000d8050 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <hal_usart_available_data_for_write+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	0003023c 	.word	0x0003023c

000d8060 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <HAL_USB_USART_Init+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	681b      	ldr	r3, [r3, #0]
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	0003024c 	.word	0x0003024c

000d8070 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <HAL_USB_USART_Begin+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	685b      	ldr	r3, [r3, #4]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003024c 	.word	0x0003024c

000d8080 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <HAL_USB_USART_Available_Data+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	691b      	ldr	r3, [r3, #16]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003024c 	.word	0x0003024c

000d8090 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	695b      	ldr	r3, [r3, #20]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003024c 	.word	0x0003024c

000d80a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <HAL_USB_USART_Receive_Data+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	699b      	ldr	r3, [r3, #24]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	0003024c 	.word	0x0003024c

000d80b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <HAL_USB_USART_Send_Data+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	69db      	ldr	r3, [r3, #28]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	0003024c 	.word	0x0003024c

000d80c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <HAL_USB_USART_Flush_Data+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	6a1b      	ldr	r3, [r3, #32]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	0003024c 	.word	0x0003024c

000d80d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <panic_+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	00030260 	.word	0x00030260

000d80e0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <log_message_v+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	00030260 	.word	0x00030260

000d80f0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b03      	ldr	r3, [pc, #12]	; (d8100 <diag_get_source+0x10>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80fa:	9301      	str	r3, [sp, #4]
   d80fc:	bd08      	pop	{r3, pc}
   d80fe:	0000      	.short	0x0000
   d8100:	00030260 	.word	0x00030260

000d8104 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <system_mode+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	681b      	ldr	r3, [r3, #0]
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	00030220 	.word	0x00030220

000d8114 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <set_system_mode+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	685b      	ldr	r3, [r3, #4]
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	00030220 	.word	0x00030220

000d8124 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <system_delay_ms+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	695b      	ldr	r3, [r3, #20]
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	00030220 	.word	0x00030220

000d8134 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b02      	ldr	r3, [pc, #8]	; (d8140 <system_thread_set_state+0xc>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d813c:	9301      	str	r3, [sp, #4]
   d813e:	bd08      	pop	{r3, pc}
   d8140:	00030220 	.word	0x00030220

000d8144 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <application_thread_current+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030220 	.word	0x00030220

000d8154 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <application_thread_invoke+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030220 	.word	0x00030220

000d8164 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <system_thread_get_state+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030220 	.word	0x00030220

000d8174 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <system_notify_time_changed+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030220 	.word	0x00030220

000d8184 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b03      	ldr	r3, [pc, #12]	; (d8194 <system_ctrl_set_app_request_handler+0x10>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d818e:	9301      	str	r3, [sp, #4]
   d8190:	bd08      	pop	{r3, pc}
   d8192:	0000      	.short	0x0000
   d8194:	00030220 	.word	0x00030220

000d8198 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b03      	ldr	r3, [pc, #12]	; (d81a8 <system_ctrl_set_result+0x10>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d81a2:	9301      	str	r3, [sp, #4]
   d81a4:	bd08      	pop	{r3, pc}
   d81a6:	0000      	.short	0x0000
   d81a8:	00030220 	.word	0x00030220

000d81ac <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b03      	ldr	r3, [pc, #12]	; (d81bc <system_power_management_set_config+0x10>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d81b6:	9301      	str	r3, [sp, #4]
   d81b8:	bd08      	pop	{r3, pc}
   d81ba:	0000      	.short	0x0000
   d81bc:	00030220 	.word	0x00030220

000d81c0 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b03      	ldr	r3, [pc, #12]	; (d81d0 <system_reset+0x10>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d81ca:	9301      	str	r3, [sp, #4]
   d81cc:	bd08      	pop	{r3, pc}
   d81ce:	0000      	.short	0x0000
   d81d0:	00030220 	.word	0x00030220

000d81d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <spark_variable+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	681b      	ldr	r3, [r3, #0]
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030244 	.word	0x00030244

000d81e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <spark_function+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	685b      	ldr	r3, [r3, #4]
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030244 	.word	0x00030244

000d81f4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <spark_process+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	689b      	ldr	r3, [r3, #8]
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030244 	.word	0x00030244

000d8204 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <spark_cloud_flag_connect+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	68db      	ldr	r3, [r3, #12]
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030244 	.word	0x00030244

000d8214 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b02      	ldr	r3, [pc, #8]	; (d8220 <spark_cloud_flag_connected+0xc>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	695b      	ldr	r3, [r3, #20]
   d821c:	9301      	str	r3, [sp, #4]
   d821e:	bd08      	pop	{r3, pc}
   d8220:	00030244 	.word	0x00030244

000d8224 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8224:	b508      	push	{r3, lr}
   d8226:	4b02      	ldr	r3, [pc, #8]	; (d8230 <spark_deviceID+0xc>)
   d8228:	681b      	ldr	r3, [r3, #0]
   d822a:	69db      	ldr	r3, [r3, #28]
   d822c:	9301      	str	r3, [sp, #4]
   d822e:	bd08      	pop	{r3, pc}
   d8230:	00030244 	.word	0x00030244

000d8234 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8234:	b508      	push	{r3, lr}
   d8236:	4b02      	ldr	r3, [pc, #8]	; (d8240 <spark_send_event+0xc>)
   d8238:	681b      	ldr	r3, [r3, #0]
   d823a:	6a1b      	ldr	r3, [r3, #32]
   d823c:	9301      	str	r3, [sp, #4]
   d823e:	bd08      	pop	{r3, pc}
   d8240:	00030244 	.word	0x00030244

000d8244 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8244:	b508      	push	{r3, lr}
   d8246:	4b02      	ldr	r3, [pc, #8]	; (d8250 <spark_subscribe+0xc>)
   d8248:	681b      	ldr	r3, [r3, #0]
   d824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d824c:	9301      	str	r3, [sp, #4]
   d824e:	bd08      	pop	{r3, pc}
   d8250:	00030244 	.word	0x00030244

000d8254 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <spark_sync_time+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	00030244 	.word	0x00030244

000d8264 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <spark_sync_time_pending+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	00030244 	.word	0x00030244

000d8274 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <spark_sync_time_last+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	00030244 	.word	0x00030244

000d8284 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	00030244 	.word	0x00030244

000d8294 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <spark_cloud_disconnect+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030244 	.word	0x00030244

000d82a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <network_connect+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	685b      	ldr	r3, [r3, #4]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030240 	.word	0x00030240

000d82b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <network_connecting+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	689b      	ldr	r3, [r3, #8]
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030240 	.word	0x00030240

000d82c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <network_disconnect+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	68db      	ldr	r3, [r3, #12]
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030240 	.word	0x00030240

000d82d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <network_ready+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	691b      	ldr	r3, [r3, #16]
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030240 	.word	0x00030240

000d82e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <network_on+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	695b      	ldr	r3, [r3, #20]
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030240 	.word	0x00030240

000d82f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <network_off+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	699b      	ldr	r3, [r3, #24]
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030240 	.word	0x00030240

000d8304 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <network_listen+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	69db      	ldr	r3, [r3, #28]
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030240 	.word	0x00030240

000d8314 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <network_listening+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	6a1b      	ldr	r3, [r3, #32]
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030240 	.word	0x00030240

000d8324 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <network_set_listen_timeout+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030240 	.word	0x00030240

000d8334 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <network_get_listen_timeout+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030240 	.word	0x00030240

000d8344 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <malloc+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	681b      	ldr	r3, [r3, #0]
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	0003021c 	.word	0x0003021c

000d8354 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <free+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	685b      	ldr	r3, [r3, #4]
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	0003021c 	.word	0x0003021c

000d8364 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <realloc+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	689b      	ldr	r3, [r3, #8]
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	0003021c 	.word	0x0003021c

000d8374 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <siprintf+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	691b      	ldr	r3, [r3, #16]
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	0003021c 	.word	0x0003021c

000d8384 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <siscanf+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	699b      	ldr	r3, [r3, #24]
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	0003021c 	.word	0x0003021c

000d8394 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <snprintf+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	69db      	ldr	r3, [r3, #28]
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	0003021c 	.word	0x0003021c

000d83a4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <sniprintf+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	6a1b      	ldr	r3, [r3, #32]
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	0003021c 	.word	0x0003021c

000d83b4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <vsnprintf+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	0003021c 	.word	0x0003021c

000d83c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <abort+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	0003021c 	.word	0x0003021c

000d83d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <_malloc_r+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	0003021c 	.word	0x0003021c

000d83e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <newlib_impure_ptr_callback+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	0003021c 	.word	0x0003021c

000d83f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d83f4:	2100      	movs	r1, #0
   d83f6:	f7ff be95 	b.w	d8124 <system_delay_ms>

000d83fa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d83fa:	b510      	push	{r4, lr}
      if (_M_empty())
   d83fc:	6883      	ldr	r3, [r0, #8]
   d83fe:	4604      	mov	r4, r0
   d8400:	b90b      	cbnz	r3, d8406 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8402:	f001 fde8 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8406:	68c3      	ldr	r3, [r0, #12]
   d8408:	4798      	blx	r3
      if (_M_manager)
   d840a:	68a3      	ldr	r3, [r4, #8]
   d840c:	b11b      	cbz	r3, d8416 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d840e:	2203      	movs	r2, #3
   d8410:	4621      	mov	r1, r4
   d8412:	4620      	mov	r0, r4
   d8414:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8416:	4620      	mov	r0, r4
   d8418:	2110      	movs	r1, #16
}
   d841a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d841e:	f001 bdd4 	b.w	d9fca <_ZdlPvj>

000d8422 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8422:	b510      	push	{r4, lr}
   d8424:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8426:	6800      	ldr	r0, [r0, #0]
   d8428:	b108      	cbz	r0, d842e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d842a:	f7ff fc61 	bl	d7cf0 <os_mutex_recursive_destroy>
    }
   d842e:	4620      	mov	r0, r4
   d8430:	bd10      	pop	{r4, pc}

000d8432 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8432:	680b      	ldr	r3, [r1, #0]
   d8434:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8436:	b113      	cbz	r3, d843e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8438:	685a      	ldr	r2, [r3, #4]
   d843a:	3201      	adds	r2, #1
   d843c:	605a      	str	r2, [r3, #4]
      }
   d843e:	4770      	bx	lr

000d8440 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8440:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d8442:	4c06      	ldr	r4, [pc, #24]	; (d845c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8444:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8446:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8448:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d844a:	f7ff fc49 	bl	d7ce0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d844e:	4620      	mov	r0, r4
   d8450:	4a03      	ldr	r2, [pc, #12]	; (d8460 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8452:	4904      	ldr	r1, [pc, #16]	; (d8464 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8458:	f001 bdb2 	b.w	d9fc0 <__aeabi_atexit>
   d845c:	2003e5b0 	.word	0x2003e5b0
   d8460:	2003e1f8 	.word	0x2003e1f8
   d8464:	000d8423 	.word	0x000d8423

000d8468 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8468:	2200      	movs	r2, #0
   d846a:	6840      	ldr	r0, [r0, #4]
   d846c:	4611      	mov	r1, r2
   d846e:	f7ff bf31 	b.w	d82d4 <network_ready>

000d8472 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8472:	2200      	movs	r2, #0
   d8474:	6840      	ldr	r0, [r0, #4]
   d8476:	4611      	mov	r1, r2
   d8478:	f7ff bf4c 	b.w	d8314 <network_listening>

000d847c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d847c:	2200      	movs	r2, #0
   d847e:	6840      	ldr	r0, [r0, #4]
   d8480:	4611      	mov	r1, r2
   d8482:	f7ff bf57 	b.w	d8334 <network_get_listen_timeout>

000d8486 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8486:	6840      	ldr	r0, [r0, #4]
   d8488:	2200      	movs	r2, #0
   d848a:	f7ff bf4b 	b.w	d8324 <network_set_listen_timeout>

000d848e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d848e:	6840      	ldr	r0, [r0, #4]
   d8490:	2200      	movs	r2, #0
   d8492:	f081 0101 	eor.w	r1, r1, #1
   d8496:	f7ff bf35 	b.w	d8304 <network_listen>

000d849a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d849a:	2300      	movs	r3, #0
   d849c:	6840      	ldr	r0, [r0, #4]
   d849e:	461a      	mov	r2, r3
   d84a0:	4619      	mov	r1, r3
   d84a2:	f7ff bf27 	b.w	d82f4 <network_off>

000d84a6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d84a6:	2300      	movs	r3, #0
   d84a8:	6840      	ldr	r0, [r0, #4]
   d84aa:	461a      	mov	r2, r3
   d84ac:	4619      	mov	r1, r3
   d84ae:	f7ff bf19 	b.w	d82e4 <network_on>

000d84b2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d84b2:	2200      	movs	r2, #0
   d84b4:	6840      	ldr	r0, [r0, #4]
   d84b6:	4611      	mov	r1, r2
   d84b8:	f7ff befc 	b.w	d82b4 <network_connecting>

000d84bc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d84bc:	6840      	ldr	r0, [r0, #4]
   d84be:	2200      	movs	r2, #0
   d84c0:	2102      	movs	r1, #2
   d84c2:	f7ff beff 	b.w	d82c4 <network_disconnect>

000d84c6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d84c6:	2300      	movs	r3, #0
   d84c8:	6840      	ldr	r0, [r0, #4]
   d84ca:	461a      	mov	r2, r3
   d84cc:	f7ff beea 	b.w	d82a4 <network_connect>

000d84d0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d84d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getSignalQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d84d2:	4b1b      	ldr	r3, [pc, #108]	; (d8540 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d84d4:	6003      	str	r3, [r0, #0]
   d84d6:	2500      	movs	r5, #0
   d84d8:	460f      	mov	r7, r1
   d84da:	3328      	adds	r3, #40	; 0x28
   d84dc:	2618      	movs	r6, #24
   d84de:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d84e2:	b089      	sub	sp, #36	; 0x24
   d84e4:	6043      	str	r3, [r0, #4]
   d84e6:	4632      	mov	r2, r6
   d84e8:	4629      	mov	r1, r5
   d84ea:	4604      	mov	r4, r0
   d84ec:	3010      	adds	r0, #16
   d84ee:	f002 fe2d 	bl	db14c <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d84f2:	6878      	ldr	r0, [r7, #4]
   d84f4:	462a      	mov	r2, r5
   d84f6:	4629      	mov	r1, r5
   d84f8:	f7ff feec 	bl	d82d4 <network_ready>
   d84fc:	b918      	cbnz	r0, d8506 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d84fe:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d8500:	4620      	mov	r0, r4
   d8502:	b009      	add	sp, #36	; 0x24
   d8504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8506:	4629      	mov	r1, r5
   d8508:	4632      	mov	r2, r6
   d850a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d850c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d8510:	f002 fe1c 	bl	db14c <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8514:	a902      	add	r1, sp, #8
   d8516:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8518:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d851c:	f7ff fba8 	bl	d7c70 <cellular_signal>
   d8520:	b110      	cbz	r0, d8528 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d8522:	2301      	movs	r3, #1
   d8524:	60a3      	str	r3, [r4, #8]
            return sig;
   d8526:	e7eb      	b.n	d8500 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8528:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d852a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d852c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d852e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8530:	b90b      	cbnz	r3, d8536 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d8532:	2302      	movs	r3, #2
   d8534:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8536:	a902      	add	r1, sp, #8
   d8538:	4620      	mov	r0, r4
   d853a:	f000 f8ae 	bl	d869a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d853e:	e7df      	b.n	d8500 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8540:	000dd344 	.word	0x000dd344

000d8544 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8544:	4b08      	ldr	r3, [pc, #32]	; (d8568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8546:	b510      	push	{r4, lr}
   d8548:	2428      	movs	r4, #40	; 0x28
   d854a:	4622      	mov	r2, r4
   d854c:	4618      	mov	r0, r3
   d854e:	2100      	movs	r1, #0
   d8550:	f002 fdfc 	bl	db14c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8554:	4b05      	ldr	r3, [pc, #20]	; (d856c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8556:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d855c:	6042      	str	r2, [r0, #4]
   d855e:	2204      	movs	r2, #4
   d8560:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8562:	4a03      	ldr	r2, [pc, #12]	; (d8570 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8564:	601a      	str	r2, [r3, #0]
   d8566:	bd10      	pop	{r4, pc}
   d8568:	2003e5bc 	.word	0x2003e5bc
   d856c:	2003e5b4 	.word	0x2003e5b4
   d8570:	000dd310 	.word	0x000dd310

000d8574 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8574:	4770      	bx	lr

000d8576 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8576:	7d00      	ldrb	r0, [r0, #20]
   d8578:	4770      	bx	lr

000d857a <_ZN14CellularSignalD0Ev>:
   d857a:	b510      	push	{r4, lr}
   d857c:	2128      	movs	r1, #40	; 0x28
   d857e:	4604      	mov	r4, r0
   d8580:	f001 fd23 	bl	d9fca <_ZdlPvj>
   d8584:	4620      	mov	r0, r4
   d8586:	bd10      	pop	{r4, pc}

000d8588 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8588:	7d03      	ldrb	r3, [r0, #20]
   d858a:	b17b      	cbz	r3, d85ac <_ZNK14CellularSignal11getStrengthEv+0x24>
   d858c:	69c3      	ldr	r3, [r0, #28]
   d858e:	2b00      	cmp	r3, #0
   d8590:	db0c      	blt.n	d85ac <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8592:	ee07 3a90 	vmov	s15, r3
   d8596:	ed9f 7a07 	vldr	s14, [pc, #28]	; d85b4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d859a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d859e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85a2:	eddf 7a05 	vldr	s15, [pc, #20]	; d85b8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d85a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d85aa:	4770      	bx	lr
    }

    return -1.0f;
   d85ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d85b0:	4770      	bx	lr
   d85b2:	bf00      	nop
   d85b4:	477fff00 	.word	0x477fff00
   d85b8:	42c80000 	.word	0x42c80000

000d85bc <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d85bc:	7d03      	ldrb	r3, [r0, #20]
   d85be:	b163      	cbz	r3, d85da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d85c0:	6983      	ldr	r3, [r0, #24]
   d85c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85c6:	d008      	beq.n	d85da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d85c8:	ee07 3a90 	vmov	s15, r3
   d85cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; d85e0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d85d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85d8:	4770      	bx	lr
    }

    return 0.0f;
   d85da:	ed9f 0a02 	vldr	s0, [pc, #8]	; d85e4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d85de:	4770      	bx	lr
   d85e0:	42c80000 	.word	0x42c80000
   d85e4:	00000000 	.word	0x00000000

000d85e8 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d85e8:	7d03      	ldrb	r3, [r0, #20]
   d85ea:	b17b      	cbz	r3, d860c <_ZNK14CellularSignal10getQualityEv+0x24>
   d85ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d85ee:	2b00      	cmp	r3, #0
   d85f0:	db0c      	blt.n	d860c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d85f2:	ee07 3a90 	vmov	s15, r3
   d85f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8614 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d85fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8602:	eddf 7a05 	vldr	s15, [pc, #20]	; d8618 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8606:	ee20 0a27 	vmul.f32	s0, s0, s15
   d860a:	4770      	bx	lr
    }

    return -1.0f;
   d860c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8610:	4770      	bx	lr
   d8612:	bf00      	nop
   d8614:	477fff00 	.word	0x477fff00
   d8618:	42c80000 	.word	0x42c80000

000d861c <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d861c:	7d03      	ldrb	r3, [r0, #20]
   d861e:	b163      	cbz	r3, d863a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8620:	6a03      	ldr	r3, [r0, #32]
   d8622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8626:	d008      	beq.n	d863a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8628:	ee07 3a90 	vmov	s15, r3
   d862c:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8640 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8634:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8638:	4770      	bx	lr
    }

    return 0.0f;
   d863a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8644 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d863e:	4770      	bx	lr
   d8640:	42c80000 	.word	0x42c80000
   d8644:	00000000 	.word	0x00000000

000d8648 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8648:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d864a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d864c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d864e:	da0a      	bge.n	d8666 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8650:	212d      	movs	r1, #45	; 0x2d
   d8652:	f000 fd4b 	bl	d90ec <_ZN5Print5printEc>
            val = -n;
   d8656:	4261      	negs	r1, r4
            t = print('-');
   d8658:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d865a:	220a      	movs	r2, #10
   d865c:	4630      	mov	r0, r6
   d865e:	f000 fd5e 	bl	d911e <_ZN5Print11printNumberEmh>
    }
}
   d8662:	4428      	add	r0, r5
   d8664:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8666:	4621      	mov	r1, r4
        size_t t = 0;
   d8668:	2500      	movs	r5, #0
   d866a:	e7f6      	b.n	d865a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d866c <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d866c:	b570      	push	{r4, r5, r6, lr}
   d866e:	460c      	mov	r4, r1
   d8670:	4605      	mov	r5, r0
   d8672:	6881      	ldr	r1, [r0, #8]
   d8674:	4620      	mov	r0, r4
   d8676:	f7ff ffe7 	bl	d8648 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d867a:	212c      	movs	r1, #44	; 0x2c
   d867c:	4606      	mov	r6, r0
   d867e:	4620      	mov	r0, r4
   d8680:	f000 fd34 	bl	d90ec <_ZN5Print5printEc>
   d8684:	68e9      	ldr	r1, [r5, #12]
   d8686:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8688:	4620      	mov	r0, r4
   d868a:	f7ff ffdd 	bl	d8648 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d868e:	4430      	add	r0, r6
   d8690:	bd70      	pop	{r4, r5, r6, pc}

000d8692 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8692:	f1a0 0004 	sub.w	r0, r0, #4
   d8696:	f7ff bfe9 	b.w	d866c <_ZNK14CellularSignal7printToER5Print>

000d869a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d869a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d869c:	460d      	mov	r5, r1
   d869e:	f100 0410 	add.w	r4, r0, #16
   d86a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86a6:	e895 0003 	ldmia.w	r5, {r0, r1}
   d86aa:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d86ae:	2001      	movs	r0, #1
   d86b0:	bd30      	pop	{r4, r5, pc}

000d86b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86b2:	4770      	bx	lr

000d86b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d86b4:	2000      	movs	r0, #0
   d86b6:	4770      	bx	lr

000d86b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86b8:	b510      	push	{r4, lr}
   d86ba:	2110      	movs	r1, #16
   d86bc:	4604      	mov	r4, r0
   d86be:	f001 fc84 	bl	d9fca <_ZdlPvj>
   d86c2:	4620      	mov	r0, r4
   d86c4:	bd10      	pop	{r4, pc}

000d86c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d86c6:	b508      	push	{r3, lr}
      { delete this; }
   d86c8:	f7ff fff6 	bl	d86b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d86cc:	bd08      	pop	{r3, pc}

000d86ce <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d86ce:	b530      	push	{r4, r5, lr}
        type_(type) {
   d86d0:	2200      	movs	r2, #0
   d86d2:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d86d6:	6002      	str	r2, [r0, #0]
   d86d8:	8084      	strh	r4, [r0, #4]
   d86da:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d86dc:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d86de:	680c      	ldr	r4, [r1, #0]
   d86e0:	8085      	strh	r5, [r0, #4]
   d86e2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d86e4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d86e6:	bd30      	pop	{r4, r5, pc}

000d86e8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d86e8:	b510      	push	{r4, lr}
   d86ea:	4604      	mov	r4, r0
    free((void*)msg_);
   d86ec:	6800      	ldr	r0, [r0, #0]
   d86ee:	f7ff fe31 	bl	d8354 <free>
}
   d86f2:	4620      	mov	r0, r4
   d86f4:	bd10      	pop	{r4, pc}

000d86f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d86f6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d86f8:	68c4      	ldr	r4, [r0, #12]
   d86fa:	b1f4      	cbz	r4, d873a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d86fc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d86fe:	2b02      	cmp	r3, #2
   d8700:	d103      	bne.n	d870a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8702:	f104 000c 	add.w	r0, r4, #12
   d8706:	f7ff ffef 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d870a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d870c:	b135      	cbz	r5, d871c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d870e:	4628      	mov	r0, r5
   d8710:	f7fd f960 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
   d8714:	2110      	movs	r1, #16
   d8716:	4628      	mov	r0, r5
   d8718:	f001 fc57 	bl	d9fca <_ZdlPvj>
   d871c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d871e:	b135      	cbz	r5, d872e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8720:	4628      	mov	r0, r5
   d8722:	f7fd f957 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
   d8726:	2110      	movs	r1, #16
   d8728:	4628      	mov	r0, r5
   d872a:	f001 fc4e 	bl	d9fca <_ZdlPvj>
   d872e:	4620      	mov	r0, r4
   d8730:	2114      	movs	r1, #20
   d8732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8736:	f001 bc48 	b.w	d9fca <_ZdlPvj>
   d873a:	bd38      	pop	{r3, r4, r5, pc}

000d873c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d873c:	b510      	push	{r4, lr}
   d873e:	b088      	sub	sp, #32
   d8740:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8742:	4668      	mov	r0, sp
   d8744:	f000 ff1d 	bl	d9582 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8748:	4669      	mov	r1, sp
   d874a:	a804      	add	r0, sp, #16
   d874c:	f000 ff3c 	bl	d95c8 <_ZN6StringC1ERKS_>
   d8750:	a804      	add	r0, sp, #16
   d8752:	47a0      	blx	r4
   d8754:	4604      	mov	r4, r0
   d8756:	a804      	add	r0, sp, #16
   d8758:	f000 fec8 	bl	d94ec <_ZN6StringD1Ev>
    String p(param);
   d875c:	4668      	mov	r0, sp
   d875e:	f000 fec5 	bl	d94ec <_ZN6StringD1Ev>
}
   d8762:	4620      	mov	r0, r4
   d8764:	b008      	add	sp, #32
   d8766:	bd10      	pop	{r4, pc}

000d8768 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d876a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d876c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8770:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8772:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8774:	461a      	mov	r2, r3
   d8776:	4669      	mov	r1, sp
   d8778:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d877a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d877e:	f8ad 4000 	strh.w	r4, [sp]
   d8782:	f7ff fd2f 	bl	d81e4 <spark_function>
}
   d8786:	b004      	add	sp, #16
   d8788:	bd10      	pop	{r4, pc}

000d878a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d878a:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d878c:	2308      	movs	r3, #8
   d878e:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8792:	6803      	ldr	r3, [r0, #0]
   d8794:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8798:	7a03      	ldrb	r3, [r0, #8]
   d879a:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d879e:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d87a0:	6843      	ldr	r3, [r0, #4]
   d87a2:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d87a4:	4668      	mov	r0, sp
   d87a6:	f7ff fd75 	bl	d8294 <spark_cloud_disconnect>
}
   d87aa:	b003      	add	sp, #12
   d87ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d87b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d87b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d87b2:	460e      	mov	r6, r1
   d87b4:	4604      	mov	r4, r0
   d87b6:	f856 3b04 	ldr.w	r3, [r6], #4
   d87ba:	9300      	str	r3, [sp, #0]
   d87bc:	460d      	mov	r5, r1
   d87be:	a801      	add	r0, sp, #4
   d87c0:	4631      	mov	r1, r6
   d87c2:	f7ff fe36 	bl	d8432 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d87c6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d87c8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d87ca:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d87cc:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d87ce:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d87d0:	2300      	movs	r3, #0
   d87d2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d87d4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d87d6:	f7fc fa9b 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87da:	4630      	mov	r0, r6
   d87dc:	f7fc fa98 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d87e0:	4628      	mov	r0, r5
   d87e2:	2108      	movs	r1, #8
   d87e4:	f001 fbf1 	bl	d9fca <_ZdlPvj>
        return p;
    }
   d87e8:	4620      	mov	r0, r4
   d87ea:	b002      	add	sp, #8
   d87ec:	bd70      	pop	{r4, r5, r6, pc}

000d87ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d87ee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d87f0:	b510      	push	{r4, lr}
      if (_M_empty())
   d87f2:	b90a      	cbnz	r2, d87f8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d87f4:	f001 fbef 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
    }
   d87f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87fc:	68c3      	ldr	r3, [r0, #12]
   d87fe:	4718      	bx	r3

000d8800 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8800:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8802:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8804:	f100 0110 	add.w	r1, r0, #16
   d8808:	f7ff fff1 	bl	d87ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d880c:	bd08      	pop	{r3, pc}

000d880e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d880e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8810:	b510      	push	{r4, lr}
      if (_M_empty())
   d8812:	b90a      	cbnz	r2, d8818 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8814:	f001 fbdf 	bl	d9fd6 <_ZSt25__throw_bad_function_callv>
    }
   d8818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d881c:	68c3      	ldr	r3, [r0, #12]
   d881e:	4718      	bx	r3

000d8820 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8820:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8822:	6800      	ldr	r0, [r0, #0]
   d8824:	f100 0110 	add.w	r1, r0, #16
   d8828:	f7ff fff1 	bl	d880e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d882c:	bd08      	pop	{r3, pc}
	...

000d8830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8830:	b538      	push	{r3, r4, r5, lr}
   d8832:	2300      	movs	r3, #0
   d8834:	4604      	mov	r4, r0
   d8836:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8838:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d883a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d883c:	f7fb fc2b 	bl	d4096 <_Znwj>
   d8840:	b128      	cbz	r0, d884e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8842:	2301      	movs	r3, #1
   d8844:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8848:	4b02      	ldr	r3, [pc, #8]	; (d8854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d884a:	6003      	str	r3, [r0, #0]
   d884c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d884e:	6020      	str	r0, [r4, #0]
	}
   d8850:	4620      	mov	r0, r4
   d8852:	bd38      	pop	{r3, r4, r5, pc}
   d8854:	000dd378 	.word	0x000dd378

000d8858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8858:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d885a:	2300      	movs	r3, #0
   d885c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d885e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8860:	4604      	mov	r4, r0
   d8862:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8864:	b12b      	cbz	r3, d8872 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8866:	2202      	movs	r2, #2
   d8868:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d886a:	68eb      	ldr	r3, [r5, #12]
   d886c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d886e:	68ab      	ldr	r3, [r5, #8]
   d8870:	60a3      	str	r3, [r4, #8]
    }
   d8872:	4620      	mov	r0, r4
   d8874:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8878:	b5f0      	push	{r4, r5, r6, r7, lr}
   d887a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d887c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d887e:	4668      	mov	r0, sp
   d8880:	f7ff ff25 	bl	d86ce <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8884:	f04f 0302 	mov.w	r3, #2
   d8888:	e8d4 2f4f 	ldrexb	r2, [r4]
   d888c:	2a00      	cmp	r2, #0
   d888e:	d103      	bne.n	d8898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8890:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8894:	2900      	cmp	r1, #0
   d8896:	d1f7      	bne.n	d8888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8898:	d125      	bne.n	d88e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d889a:	f104 050c 	add.w	r5, r4, #12
   d889e:	4669      	mov	r1, sp
   d88a0:	4628      	mov	r0, r5
   d88a2:	f7ff ff14 	bl	d86ce <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d88a6:	f3bf 8f5b 	dmb	ish
   d88aa:	2301      	movs	r3, #1
   d88ac:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d88ae:	2000      	movs	r0, #0
   d88b0:	f104 0308 	add.w	r3, r4, #8
   d88b4:	f3bf 8f5b 	dmb	ish
   d88b8:	e853 6f00 	ldrex	r6, [r3]
   d88bc:	e843 0200 	strex	r2, r0, [r3]
   d88c0:	2a00      	cmp	r2, #0
   d88c2:	d1f9      	bne.n	d88b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d88c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d88c8:	b16e      	cbz	r6, d88e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d88ca:	f7ff fc3b 	bl	d8144 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d88ce:	b178      	cbz	r0, d88f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d88d0:	4629      	mov	r1, r5
   d88d2:	4630      	mov	r0, r6
   d88d4:	f7ff ff8b 	bl	d87ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d88d8:	4630      	mov	r0, r6
   d88da:	f7fd f87b 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d88de:	2110      	movs	r1, #16
   d88e0:	4630      	mov	r0, r6
   d88e2:	f001 fb72 	bl	d9fca <_ZdlPvj>
        p_->setError(std::move(error));
   d88e6:	4668      	mov	r0, sp
   d88e8:	f7ff fefe 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
    }
   d88ec:	b009      	add	sp, #36	; 0x24
   d88ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d88f0:	4631      	mov	r1, r6
   d88f2:	a802      	add	r0, sp, #8
   d88f4:	f7ff ffb0 	bl	d8858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d88f8:	68e0      	ldr	r0, [r4, #12]
   d88fa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d88fe:	b108      	cbz	r0, d8904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8900:	f002 fee0 	bl	db6c4 <strdup>
        type_(type) {
   d8904:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8906:	2010      	movs	r0, #16
   d8908:	f8ad 501c 	strh.w	r5, [sp, #28]
   d890c:	f7fb fbc3 	bl	d4096 <_Znwj>
   d8910:	4605      	mov	r5, r0
   d8912:	b1e8      	cbz	r0, d8950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8914:	2700      	movs	r7, #0
   d8916:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8918:	2018      	movs	r0, #24
   d891a:	f7fb fbbc 	bl	d4096 <_Znwj>
   d891e:	4604      	mov	r4, r0
   d8920:	b188      	cbz	r0, d8946 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8922:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8924:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8926:	a802      	add	r0, sp, #8
   d8928:	f7fd fd5f 	bl	d63ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d892c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d892e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8930:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8932:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8934:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8936:	a906      	add	r1, sp, #24
   d8938:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d893a:	60e3      	str	r3, [r4, #12]
   d893c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8940:	9205      	str	r2, [sp, #20]
   d8942:	f7ff fec4 	bl	d86ce <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8946:	4b08      	ldr	r3, [pc, #32]	; (d8968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8948:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d894a:	4b08      	ldr	r3, [pc, #32]	; (d896c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d894c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d894e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8950:	a806      	add	r0, sp, #24
   d8952:	f7ff fec9 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8956:	a802      	add	r0, sp, #8
   d8958:	f7fd f83c 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d895c:	2200      	movs	r2, #0
   d895e:	4629      	mov	r1, r5
   d8960:	4803      	ldr	r0, [pc, #12]	; (d8970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8962:	f7ff fbf7 	bl	d8154 <application_thread_invoke>
   d8966:	e7b7      	b.n	d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8968:	000d8801 	.word	0x000d8801
   d896c:	000d8a99 	.word	0x000d8a99
   d8970:	000d83fb 	.word	0x000d83fb

000d8974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8978:	b08a      	sub	sp, #40	; 0x28
   d897a:	4605      	mov	r5, r0
   d897c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8980:	460c      	mov	r4, r1
   d8982:	4617      	mov	r7, r2
   d8984:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8986:	f7ff fc45 	bl	d8214 <spark_cloud_flag_connected>
   d898a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d898c:	4682      	mov	sl, r0
   d898e:	bb38      	cbnz	r0, d89e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8990:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8994:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8996:	a905      	add	r1, sp, #20
   d8998:	4630      	mov	r0, r6
   d899a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d899e:	f7ff fe96 	bl	d86ce <_ZN8particle5ErrorC1EOS0_>
   d89a2:	2014      	movs	r0, #20
   d89a4:	f7fb fb77 	bl	d4096 <_Znwj>
   d89a8:	4604      	mov	r4, r0
   d89aa:	b148      	cbz	r0, d89c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d89ac:	2302      	movs	r3, #2
   d89ae:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89b0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89b2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89b6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d89b8:	4631      	mov	r1, r6
   d89ba:	300c      	adds	r0, #12
   d89bc:	f7ff fe87 	bl	d86ce <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d89c0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d89c2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d89c4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d89c8:	f7ff ff32 	bl	d8830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d89cc:	4630      	mov	r0, r6
   d89ce:	f7ff fe8b 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d89d2:	a805      	add	r0, sp, #20
   d89d4:	f7ff fe88 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
}
   d89d8:	4628      	mov	r0, r5
   d89da:	b00a      	add	sp, #40	; 0x28
   d89dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d89e0:	230c      	movs	r3, #12
   d89e2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d89e6:	2014      	movs	r0, #20
   d89e8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d89ec:	9307      	str	r3, [sp, #28]
   d89ee:	f7fb fb52 	bl	d4096 <_Znwj>
   d89f2:	4601      	mov	r1, r0
   d89f4:	b128      	cbz	r0, d8a02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89f6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d89fa:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89fe:	f880 a001 	strb.w	sl, [r0, #1]
   d8a02:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8a04:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8a06:	f7ff ff13 	bl	d8830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8a0a:	4b22      	ldr	r3, [pc, #136]	; (d8a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8a0c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8a0e:	2008      	movs	r0, #8
   d8a10:	f7fb fb41 	bl	d4096 <_Znwj>
   d8a14:	4682      	mov	sl, r0
   d8a16:	b128      	cbz	r0, d8a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a18:	9b03      	ldr	r3, [sp, #12]
   d8a1a:	f840 3b04 	str.w	r3, [r0], #4
   d8a1e:	a904      	add	r1, sp, #16
   d8a20:	f7ff fd07 	bl	d8432 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a24:	9600      	str	r6, [sp, #0]
   d8a26:	fa5f f389 	uxtb.w	r3, r9
   d8a2a:	4642      	mov	r2, r8
   d8a2c:	4639      	mov	r1, r7
   d8a2e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8a30:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a34:	f7ff fbfe 	bl	d8234 <spark_send_event>
   d8a38:	b9b8      	cbnz	r0, d8a6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8a3a:	9b03      	ldr	r3, [sp, #12]
   d8a3c:	785b      	ldrb	r3, [r3, #1]
   d8a3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8a42:	b993      	cbnz	r3, d8a6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8a44:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8a48:	a905      	add	r1, sp, #20
   d8a4a:	a803      	add	r0, sp, #12
   d8a4c:	9205      	str	r2, [sp, #20]
   d8a4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a52:	f7ff ff11 	bl	d8878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a56:	a805      	add	r0, sp, #20
   d8a58:	f7ff fe46 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8a5c:	a805      	add	r0, sp, #20
   d8a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8a60:	f7ff fea6 	bl	d87b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8a64:	a806      	add	r0, sp, #24
   d8a66:	f7fc f953 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a6a:	9b03      	ldr	r3, [sp, #12]
   d8a6c:	9305      	str	r3, [sp, #20]
   d8a6e:	a904      	add	r1, sp, #16
   d8a70:	a806      	add	r0, sp, #24
   d8a72:	f7ff fcde 	bl	d8432 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a76:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8a78:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a7a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8a7c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8a7e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8a80:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8a82:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8a84:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8a86:	f7fc f943 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a8a:	a804      	add	r0, sp, #16
   d8a8c:	f7fc f940 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8a90:	e7a2      	b.n	d89d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8a92:	bf00      	nop
   d8a94:	000d8b5d 	.word	0x000d8b5d

000d8a98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8a98:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a9c:	4605      	mov	r5, r0
	  switch (__op)
   d8a9e:	d007      	beq.n	d8ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8aa0:	2a03      	cmp	r2, #3
   d8aa2:	d018      	beq.n	d8ad6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8aa4:	2a01      	cmp	r2, #1
   d8aa6:	d101      	bne.n	d8aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8aa8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8aaa:	6003      	str	r3, [r0, #0]
	}
   d8aac:	2000      	movs	r0, #0
   d8aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ab0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8ab2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ab4:	f7fb faef 	bl	d4096 <_Znwj>
   d8ab8:	4604      	mov	r4, r0
   d8aba:	b150      	cbz	r0, d8ad2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8abc:	4631      	mov	r1, r6
   d8abe:	f7ff fecb 	bl	d8858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8ac2:	6930      	ldr	r0, [r6, #16]
   d8ac4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8ac8:	b108      	cbz	r0, d8ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8aca:	f002 fdfb 	bl	db6c4 <strdup>
        type_(type) {
   d8ace:	6120      	str	r0, [r4, #16]
   d8ad0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8ad2:	602c      	str	r4, [r5, #0]
	}
   d8ad4:	e7ea      	b.n	d8aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8ad6:	6804      	ldr	r4, [r0, #0]
   d8ad8:	2c00      	cmp	r4, #0
   d8ada:	d0e7      	beq.n	d8aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8adc:	f104 0010 	add.w	r0, r4, #16
   d8ae0:	f7ff fe02 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8ae4:	4620      	mov	r0, r4
   d8ae6:	f7fc ff75 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8aea:	2118      	movs	r1, #24
   d8aec:	4620      	mov	r0, r4
   d8aee:	f001 fa6c 	bl	d9fca <_ZdlPvj>
   d8af2:	e7db      	b.n	d8aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8af4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8af4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8af6:	2300      	movs	r3, #0
   d8af8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8afa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8afc:	4604      	mov	r4, r0
   d8afe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8b00:	b12b      	cbz	r3, d8b0e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8b02:	2202      	movs	r2, #2
   d8b04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8b06:	68eb      	ldr	r3, [r5, #12]
   d8b08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8b0a:	68ab      	ldr	r3, [r5, #8]
   d8b0c:	60a3      	str	r3, [r4, #8]
    }
   d8b0e:	4620      	mov	r0, r4
   d8b10:	bd38      	pop	{r3, r4, r5, pc}

000d8b12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8b12:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b14:	b570      	push	{r4, r5, r6, lr}
   d8b16:	4604      	mov	r4, r0
	  switch (__op)
   d8b18:	d007      	beq.n	d8b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8b1a:	2a03      	cmp	r2, #3
   d8b1c:	d012      	beq.n	d8b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8b1e:	2a01      	cmp	r2, #1
   d8b20:	d101      	bne.n	d8b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8b22:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b24:	6003      	str	r3, [r0, #0]
	}
   d8b26:	2000      	movs	r0, #0
   d8b28:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8b2a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8b2c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8b2e:	f7fb fab2 	bl	d4096 <_Znwj>
   d8b32:	4605      	mov	r5, r0
   d8b34:	b120      	cbz	r0, d8b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8b36:	4631      	mov	r1, r6
   d8b38:	f7ff ffdc 	bl	d8af4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8b3c:	7c33      	ldrb	r3, [r6, #16]
   d8b3e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8b40:	6025      	str	r5, [r4, #0]
	}
   d8b42:	e7f0      	b.n	d8b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8b44:	6804      	ldr	r4, [r0, #0]
   d8b46:	2c00      	cmp	r4, #0
   d8b48:	d0ed      	beq.n	d8b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8b4a:	4620      	mov	r0, r4
   d8b4c:	f7fc ff42 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8b50:	2114      	movs	r1, #20
   d8b52:	4620      	mov	r0, r4
   d8b54:	f001 fa39 	bl	d9fca <_ZdlPvj>
   d8b58:	e7e5      	b.n	d8b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8b5e:	b089      	sub	sp, #36	; 0x24
   d8b60:	4604      	mov	r4, r0
   d8b62:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8b64:	a801      	add	r0, sp, #4
   d8b66:	4611      	mov	r1, r2
   d8b68:	f7ff fe22 	bl	d87b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8b6c:	b1a4      	cbz	r4, d8b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8b6e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8b70:	b11d      	cbz	r5, d8b7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8b72:	4628      	mov	r0, r5
   d8b74:	f002 fda6 	bl	db6c4 <strdup>
   d8b78:	4605      	mov	r5, r0
   d8b7a:	a801      	add	r0, sp, #4
   d8b7c:	a903      	add	r1, sp, #12
        type_(type) {
   d8b7e:	9503      	str	r5, [sp, #12]
   d8b80:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8b84:	f7ff fe78 	bl	d8878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b88:	a803      	add	r0, sp, #12
   d8b8a:	f7ff fdad 	bl	d86e8 <_ZN8particle5ErrorD1Ev>
   d8b8e:	a802      	add	r0, sp, #8
   d8b90:	f7fc f8be 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8b94:	b009      	add	sp, #36	; 0x24
   d8b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b98:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8b9a:	2301      	movs	r3, #1
   d8b9c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8ba0:	2a00      	cmp	r2, #0
   d8ba2:	d103      	bne.n	d8bac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8ba4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8ba8:	2900      	cmp	r1, #0
   d8baa:	d1f7      	bne.n	d8b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8bac:	d1ef      	bne.n	d8b8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8bae:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8bb0:	f3bf 8f5b 	dmb	ish
   d8bb4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8bb6:	1d2b      	adds	r3, r5, #4
   d8bb8:	f3bf 8f5b 	dmb	ish
   d8bbc:	e853 6f00 	ldrex	r6, [r3]
   d8bc0:	e843 4200 	strex	r2, r4, [r3]
   d8bc4:	2a00      	cmp	r2, #0
   d8bc6:	d1f9      	bne.n	d8bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8bc8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8bcc:	2e00      	cmp	r6, #0
   d8bce:	d0de      	beq.n	d8b8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8bd0:	4620      	mov	r0, r4
   d8bd2:	f7ff fab7 	bl	d8144 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8bd6:	4607      	mov	r7, r0
   d8bd8:	b160      	cbz	r0, d8bf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8bda:	f105 010c 	add.w	r1, r5, #12
   d8bde:	4630      	mov	r0, r6
   d8be0:	f7ff fe15 	bl	d880e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8be4:	4630      	mov	r0, r6
   d8be6:	f7fc fef5 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8bea:	2110      	movs	r1, #16
   d8bec:	4630      	mov	r0, r6
   d8bee:	f001 f9ec 	bl	d9fca <_ZdlPvj>
   d8bf2:	e7cc      	b.n	d8b8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8bf4:	4631      	mov	r1, r6
   d8bf6:	a803      	add	r0, sp, #12
   d8bf8:	f7ff ff7c 	bl	d8af4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8bfc:	7b2b      	ldrb	r3, [r5, #12]
   d8bfe:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8c02:	2010      	movs	r0, #16
   d8c04:	f7fb fa47 	bl	d4096 <_Znwj>
   d8c08:	4605      	mov	r5, r0
   d8c0a:	b1d0      	cbz	r0, d8c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8c0c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c0e:	2014      	movs	r0, #20
   d8c10:	f7fb fa41 	bl	d4096 <_Znwj>
   d8c14:	4604      	mov	r4, r0
   d8c16:	b178      	cbz	r0, d8c38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8c18:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8c1a:	4601      	mov	r1, r0
   d8c1c:	a803      	add	r0, sp, #12
   d8c1e:	f7fd fbe4 	bl	d63ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c22:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8c24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c26:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c28:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8c2a:	9205      	str	r2, [sp, #20]
   d8c2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c2e:	60e3      	str	r3, [r4, #12]
   d8c30:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8c34:	9206      	str	r2, [sp, #24]
   d8c36:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8c38:	4b06      	ldr	r3, [pc, #24]	; (d8c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8c3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8c3c:	4b06      	ldr	r3, [pc, #24]	; (d8c58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c3e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8c40:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8c42:	a803      	add	r0, sp, #12
   d8c44:	f7fc fec6 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8c48:	2200      	movs	r2, #0
   d8c4a:	4629      	mov	r1, r5
   d8c4c:	4803      	ldr	r0, [pc, #12]	; (d8c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8c4e:	f7ff fa81 	bl	d8154 <application_thread_invoke>
   d8c52:	e7c7      	b.n	d8be4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8c54:	000d8821 	.word	0x000d8821
   d8c58:	000d8b13 	.word	0x000d8b13
   d8c5c:	000d83fb 	.word	0x000d83fb

000d8c60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8c60:	2200      	movs	r2, #0
   d8c62:	6840      	ldr	r0, [r0, #4]
   d8c64:	4611      	mov	r1, r2
   d8c66:	f7ff bb55 	b.w	d8314 <network_listening>

000d8c6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8c6a:	2200      	movs	r2, #0
   d8c6c:	6840      	ldr	r0, [r0, #4]
   d8c6e:	4611      	mov	r1, r2
   d8c70:	f7ff bb60 	b.w	d8334 <network_get_listen_timeout>

000d8c74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8c74:	6840      	ldr	r0, [r0, #4]
   d8c76:	2200      	movs	r2, #0
   d8c78:	f7ff bb54 	b.w	d8324 <network_set_listen_timeout>

000d8c7c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8c7c:	6840      	ldr	r0, [r0, #4]
   d8c7e:	2200      	movs	r2, #0
   d8c80:	f081 0101 	eor.w	r1, r1, #1
   d8c84:	f7ff bb3e 	b.w	d8304 <network_listen>

000d8c88 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8c88:	2300      	movs	r3, #0
   d8c8a:	6840      	ldr	r0, [r0, #4]
   d8c8c:	461a      	mov	r2, r3
   d8c8e:	4619      	mov	r1, r3
   d8c90:	f7ff bb30 	b.w	d82f4 <network_off>

000d8c94 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8c94:	2300      	movs	r3, #0
   d8c96:	6840      	ldr	r0, [r0, #4]
   d8c98:	461a      	mov	r2, r3
   d8c9a:	4619      	mov	r1, r3
   d8c9c:	f7ff bb22 	b.w	d82e4 <network_on>

000d8ca0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8ca0:	2200      	movs	r2, #0
   d8ca2:	6840      	ldr	r0, [r0, #4]
   d8ca4:	4611      	mov	r1, r2
   d8ca6:	f7ff bb15 	b.w	d82d4 <network_ready>

000d8caa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8caa:	2200      	movs	r2, #0
   d8cac:	6840      	ldr	r0, [r0, #4]
   d8cae:	4611      	mov	r1, r2
   d8cb0:	f7ff bb00 	b.w	d82b4 <network_connecting>

000d8cb4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8cb4:	6840      	ldr	r0, [r0, #4]
   d8cb6:	2200      	movs	r2, #0
   d8cb8:	2102      	movs	r1, #2
   d8cba:	f7ff bb03 	b.w	d82c4 <network_disconnect>

000d8cbe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8cbe:	2300      	movs	r3, #0
   d8cc0:	6840      	ldr	r0, [r0, #4]
   d8cc2:	461a      	mov	r2, r3
   d8cc4:	f7ff baee 	b.w	d82a4 <network_connect>

000d8cc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8cc8:	4b02      	ldr	r3, [pc, #8]	; (d8cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8cca:	2203      	movs	r2, #3
   d8ccc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8cce:	4a02      	ldr	r2, [pc, #8]	; (d8cd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8cd0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8cd2:	4770      	bx	lr
   d8cd4:	2003e5e4 	.word	0x2003e5e4
   d8cd8:	000dd394 	.word	0x000dd394

000d8cdc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8cdc:	4770      	bx	lr

000d8cde <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ce0:	4606      	mov	r6, r0
   d8ce2:	4615      	mov	r5, r2
   d8ce4:	460c      	mov	r4, r1
   d8ce6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8ce8:	42bc      	cmp	r4, r7
   d8cea:	d006      	beq.n	d8cfa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8cec:	6833      	ldr	r3, [r6, #0]
   d8cee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8cf2:	689b      	ldr	r3, [r3, #8]
   d8cf4:	4630      	mov	r0, r6
   d8cf6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8cf8:	e7f6      	b.n	d8ce8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8cfa:	4628      	mov	r0, r5
   d8cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8cfe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8cfe:	7c00      	ldrb	r0, [r0, #16]
   d8d00:	2200      	movs	r2, #0
   d8d02:	f7ff b8c5 	b.w	d7e90 <hal_i2c_write>

000d8d06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8d06:	7c00      	ldrb	r0, [r0, #16]
   d8d08:	2100      	movs	r1, #0
   d8d0a:	f7ff b8c9 	b.w	d7ea0 <hal_i2c_available>

000d8d0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8d0e:	7c00      	ldrb	r0, [r0, #16]
   d8d10:	2100      	movs	r1, #0
   d8d12:	f7ff b8cd 	b.w	d7eb0 <hal_i2c_read>

000d8d16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8d16:	7c00      	ldrb	r0, [r0, #16]
   d8d18:	2100      	movs	r1, #0
   d8d1a:	f7ff b8d1 	b.w	d7ec0 <hal_i2c_peek>

000d8d1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8d1e:	7c00      	ldrb	r0, [r0, #16]
   d8d20:	2100      	movs	r1, #0
   d8d22:	f7ff b8d5 	b.w	d7ed0 <hal_i2c_flush>

000d8d26 <_ZN7TwoWireD0Ev>:
   d8d26:	b510      	push	{r4, lr}
   d8d28:	2114      	movs	r1, #20
   d8d2a:	4604      	mov	r4, r0
   d8d2c:	f001 f94d 	bl	d9fca <_ZdlPvj>
   d8d30:	4620      	mov	r0, r4
   d8d32:	bd10      	pop	{r4, pc}

000d8d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8d34:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8d3a:	4604      	mov	r4, r0
   d8d3c:	4608      	mov	r0, r1
   d8d3e:	2100      	movs	r1, #0
   d8d40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8d44:	4b03      	ldr	r3, [pc, #12]	; (d8d54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8d46:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8d48:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8d4a:	4611      	mov	r1, r2
   d8d4c:	f7ff f8d0 	bl	d7ef0 <hal_i2c_init>
}
   d8d50:	4620      	mov	r0, r4
   d8d52:	bd10      	pop	{r4, pc}
   d8d54:	000dd3c8 	.word	0x000dd3c8

000d8d58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8d58:	2300      	movs	r3, #0
   d8d5a:	7c00      	ldrb	r0, [r0, #16]
   d8d5c:	461a      	mov	r2, r3
   d8d5e:	4619      	mov	r1, r3
   d8d60:	f7ff b87e 	b.w	d7e60 <hal_i2c_begin>

000d8d64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8d66:	2200      	movs	r2, #0
   d8d68:	2314      	movs	r3, #20
   d8d6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8d6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8d72:	780b      	ldrb	r3, [r1, #0]
   d8d74:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d78:	684b      	ldr	r3, [r1, #4]
   d8d7a:	9303      	str	r3, [sp, #12]
   d8d7c:	68cb      	ldr	r3, [r1, #12]
   d8d7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8d80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8d82:	7a0b      	ldrb	r3, [r1, #8]
   d8d84:	9305      	str	r3, [sp, #20]
   d8d86:	a901      	add	r1, sp, #4
   d8d88:	f7ff f8ca 	bl	d7f20 <hal_i2c_request_ex>
}
   d8d8c:	b007      	add	sp, #28
   d8d8e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d92 <_ZN7TwoWire11requestFromEhjh>:
{
   d8d92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8d94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8d96:	f88d 1000 	strb.w	r1, [sp]
   d8d9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8d9e:	9103      	str	r1, [sp, #12]
   d8da0:	bf18      	it	ne
   d8da2:	2301      	movne	r3, #1
   d8da4:	4669      	mov	r1, sp
    size_ = size;
   d8da6:	9201      	str	r2, [sp, #4]
   d8da8:	f88d 3008 	strb.w	r3, [sp, #8]
   d8dac:	f7ff ffda 	bl	d8d64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8db0:	b005      	add	sp, #20
   d8db2:	f85d fb04 	ldr.w	pc, [sp], #4

000d8db6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8db6:	7c00      	ldrb	r0, [r0, #16]
   d8db8:	2200      	movs	r2, #0
   d8dba:	f7ff b859 	b.w	d7e70 <hal_i2c_begin_transmission>

000d8dbe <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8dbe:	b2c9      	uxtb	r1, r1
   d8dc0:	f7ff bff9 	b.w	d8db6 <_ZN7TwoWire17beginTransmissionEh>

000d8dc4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8dc4:	7c00      	ldrb	r0, [r0, #16]
   d8dc6:	2200      	movs	r2, #0
   d8dc8:	f7ff b85a 	b.w	d7e80 <hal_i2c_end_transmission>

000d8dcc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8dcc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8dce:	2100      	movs	r1, #0
   d8dd0:	7c00      	ldrb	r0, [r0, #16]
   d8dd2:	f7ff f895 	bl	d7f00 <hal_i2c_lock>
}
   d8dd6:	fab0 f080 	clz	r0, r0
   d8dda:	0940      	lsrs	r0, r0, #5
   d8ddc:	bd08      	pop	{r3, pc}

000d8dde <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8dde:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8de0:	2100      	movs	r1, #0
   d8de2:	7c00      	ldrb	r0, [r0, #16]
   d8de4:	f7ff f894 	bl	d7f10 <hal_i2c_unlock>
}
   d8de8:	fab0 f080 	clz	r0, r0
   d8dec:	0940      	lsrs	r0, r0, #5
   d8dee:	bd08      	pop	{r3, pc}

000d8df0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8df0:	4700      	bx	r0
	...

000d8df4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8df4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8df8:	2400      	movs	r4, #0
{
   d8dfa:	461d      	mov	r5, r3
   d8dfc:	460f      	mov	r7, r1
   d8dfe:	4690      	mov	r8, r2
   d8e00:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8e02:	f7ff f815 	bl	d7e30 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8e06:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e08:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8e0c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e10:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8e14:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8e18:	bfa2      	ittt	ge
   d8e1a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8e1e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8e22:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e24:	4907      	ldr	r1, [pc, #28]	; (d8e44 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8e26:	9400      	str	r4, [sp, #0]
   d8e28:	4643      	mov	r3, r8
   d8e2a:	463a      	mov	r2, r7
   d8e2c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8e2e:	bfa8      	it	ge
   d8e30:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e34:	f7fe fff4 	bl	d7e20 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8e38:	fab0 f080 	clz	r0, r0
   d8e3c:	0940      	lsrs	r0, r0, #5
   d8e3e:	b004      	add	sp, #16
   d8e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e44:	000d8df1 	.word	0x000d8df1

000d8e48 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8e48:	f7ff b802 	b.w	d7e50 <HAL_Interrupts_Disable_All>

000d8e4c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8e4c:	f7fe bff8 	b.w	d7e40 <HAL_Interrupts_Enable_All>

000d8e50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8e50:	4770      	bx	lr

000d8e52 <_ZN9IPAddressD0Ev>:
   d8e52:	b510      	push	{r4, lr}
   d8e54:	2118      	movs	r1, #24
   d8e56:	4604      	mov	r4, r0
   d8e58:	f001 f8b7 	bl	d9fca <_ZdlPvj>
   d8e5c:	4620      	mov	r0, r4
   d8e5e:	bd10      	pop	{r4, pc}

000d8e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8e60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8e62:	7d03      	ldrb	r3, [r0, #20]
   d8e64:	2b06      	cmp	r3, #6
{
   d8e66:	b08d      	sub	sp, #52	; 0x34
   d8e68:	460e      	mov	r6, r1
   d8e6a:	f100 0704 	add.w	r7, r0, #4
   d8e6e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8e72:	d012      	beq.n	d8e9a <_ZNK9IPAddress7printToER5Print+0x3a>
   d8e74:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8e78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8e7c:	220a      	movs	r2, #10
   d8e7e:	4630      	mov	r0, r6
   d8e80:	f000 f94d 	bl	d911e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8e84:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8e86:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8e88:	d019      	beq.n	d8ebe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8e8a:	2c00      	cmp	r4, #0
   d8e8c:	d0f4      	beq.n	d8e78 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8e8e:	212e      	movs	r1, #46	; 0x2e
   d8e90:	4630      	mov	r0, r6
   d8e92:	f000 f92b 	bl	d90ec <_ZN5Print5printEc>
   d8e96:	4404      	add	r4, r0
   d8e98:	e7ee      	b.n	d8e78 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8e9a:	232f      	movs	r3, #47	; 0x2f
   d8e9c:	466a      	mov	r2, sp
   d8e9e:	4639      	mov	r1, r7
   d8ea0:	200a      	movs	r0, #10
		buf[0] = 0;
   d8ea2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8ea6:	f7ff f843 	bl	d7f30 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8eaa:	4668      	mov	r0, sp
   d8eac:	f003 f984 	bl	dc1b8 <strlen>
   d8eb0:	6833      	ldr	r3, [r6, #0]
   d8eb2:	4602      	mov	r2, r0
   d8eb4:	68db      	ldr	r3, [r3, #12]
   d8eb6:	4669      	mov	r1, sp
   d8eb8:	4630      	mov	r0, r6
   d8eba:	4798      	blx	r3
   d8ebc:	4604      	mov	r4, r0
    }
    return n;
}
   d8ebe:	4620      	mov	r0, r4
   d8ec0:	b00d      	add	sp, #52	; 0x34
   d8ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8ec4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8ec4:	b510      	push	{r4, lr}
   d8ec6:	4b05      	ldr	r3, [pc, #20]	; (d8edc <_ZN9IPAddressC1Ev+0x18>)
   d8ec8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8eca:	2211      	movs	r2, #17
   d8ecc:	f840 3b04 	str.w	r3, [r0], #4
   d8ed0:	2100      	movs	r1, #0
   d8ed2:	f002 f93b 	bl	db14c <memset>
}
   d8ed6:	4620      	mov	r0, r4
   d8ed8:	bd10      	pop	{r4, pc}
   d8eda:	bf00      	nop
   d8edc:	000dd3f0 	.word	0x000dd3f0

000d8ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8ee0:	4603      	mov	r3, r0
   d8ee2:	4a07      	ldr	r2, [pc, #28]	; (d8f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8ee4:	b510      	push	{r4, lr}
   d8ee6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8eea:	f101 0210 	add.w	r2, r1, #16
   d8eee:	f851 4b04 	ldr.w	r4, [r1], #4
   d8ef2:	f843 4b04 	str.w	r4, [r3], #4
   d8ef6:	4291      	cmp	r1, r2
   d8ef8:	d1f9      	bne.n	d8eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8efa:	780a      	ldrb	r2, [r1, #0]
   d8efc:	701a      	strb	r2, [r3, #0]
}
   d8efe:	bd10      	pop	{r4, pc}
   d8f00:	000dd3f0 	.word	0x000dd3f0

000d8f04 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8f04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8f06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8f0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8f0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8f16:	2304      	movs	r3, #4
   d8f18:	6041      	str	r1, [r0, #4]
   d8f1a:	7503      	strb	r3, [r0, #20]
}
   d8f1c:	bd10      	pop	{r4, pc}

000d8f1e <_ZN9IPAddressaSEPKh>:
{
   d8f1e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8f20:	78cb      	ldrb	r3, [r1, #3]
   d8f22:	9300      	str	r3, [sp, #0]
   d8f24:	788b      	ldrb	r3, [r1, #2]
   d8f26:	784a      	ldrb	r2, [r1, #1]
   d8f28:	7809      	ldrb	r1, [r1, #0]
   d8f2a:	f7ff ffeb 	bl	d8f04 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8f2e:	b002      	add	sp, #8
   d8f30:	bd10      	pop	{r4, pc}
	...

000d8f34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8f34:	4b01      	ldr	r3, [pc, #4]	; (d8f3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8f36:	4a02      	ldr	r2, [pc, #8]	; (d8f40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8f38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8f3a:	4770      	bx	lr
   d8f3c:	2003e5ec 	.word	0x2003e5ec
   d8f40:	000dd3fc 	.word	0x000dd3fc

000d8f44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8f44:	2300      	movs	r3, #0
   d8f46:	6840      	ldr	r0, [r0, #4]
   d8f48:	461a      	mov	r2, r3
   d8f4a:	f7ff b9ab 	b.w	d82a4 <network_connect>

000d8f4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8f4e:	6840      	ldr	r0, [r0, #4]
   d8f50:	2200      	movs	r2, #0
   d8f52:	2102      	movs	r1, #2
   d8f54:	f7ff b9b6 	b.w	d82c4 <network_disconnect>

000d8f58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8f58:	2200      	movs	r2, #0
   d8f5a:	6840      	ldr	r0, [r0, #4]
   d8f5c:	4611      	mov	r1, r2
   d8f5e:	f7ff b9a9 	b.w	d82b4 <network_connecting>

000d8f62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8f62:	2200      	movs	r2, #0
   d8f64:	6840      	ldr	r0, [r0, #4]
   d8f66:	4611      	mov	r1, r2
   d8f68:	f7ff b9b4 	b.w	d82d4 <network_ready>

000d8f6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8f6c:	2300      	movs	r3, #0
   d8f6e:	6840      	ldr	r0, [r0, #4]
   d8f70:	461a      	mov	r2, r3
   d8f72:	4619      	mov	r1, r3
   d8f74:	f7ff b9b6 	b.w	d82e4 <network_on>

000d8f78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8f78:	2300      	movs	r3, #0
   d8f7a:	6840      	ldr	r0, [r0, #4]
   d8f7c:	461a      	mov	r2, r3
   d8f7e:	4619      	mov	r1, r3
   d8f80:	f7ff b9b8 	b.w	d82f4 <network_off>

000d8f84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8f84:	6840      	ldr	r0, [r0, #4]
   d8f86:	2200      	movs	r2, #0
   d8f88:	f081 0101 	eor.w	r1, r1, #1
   d8f8c:	f7ff b9ba 	b.w	d8304 <network_listen>

000d8f90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8f90:	6840      	ldr	r0, [r0, #4]
   d8f92:	2200      	movs	r2, #0
   d8f94:	f7ff b9c6 	b.w	d8324 <network_set_listen_timeout>

000d8f98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f98:	2200      	movs	r2, #0
   d8f9a:	6840      	ldr	r0, [r0, #4]
   d8f9c:	4611      	mov	r1, r2
   d8f9e:	f7ff b9c9 	b.w	d8334 <network_get_listen_timeout>

000d8fa2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8fa2:	2200      	movs	r2, #0
   d8fa4:	6840      	ldr	r0, [r0, #4]
   d8fa6:	4611      	mov	r1, r2
   d8fa8:	f7ff b9b4 	b.w	d8314 <network_listening>

000d8fac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8fb0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8fb2:	b095      	sub	sp, #84	; 0x54
   d8fb4:	4616      	mov	r6, r2
   d8fb6:	460d      	mov	r5, r1
   d8fb8:	4607      	mov	r7, r0
    IPAddress addr;
   d8fba:	f7ff ff83 	bl	d8ec4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8fbe:	4621      	mov	r1, r4
   d8fc0:	2218      	movs	r2, #24
   d8fc2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8fc4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8fc6:	f002 f8c1 	bl	db14c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8fca:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8fcc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8fd0:	4621      	mov	r1, r4
   d8fd2:	466b      	mov	r3, sp
   d8fd4:	aa0c      	add	r2, sp, #48	; 0x30
   d8fd6:	4630      	mov	r0, r6
   d8fd8:	f7fe ffba 	bl	d7f50 <netdb_getaddrinfo>
    if (!r) {
   d8fdc:	4604      	mov	r4, r0
   d8fde:	2800      	cmp	r0, #0
   d8fe0:	d146      	bne.n	d9070 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8fe2:	4602      	mov	r2, r0
   d8fe4:	2101      	movs	r1, #1
   d8fe6:	6868      	ldr	r0, [r5, #4]
   d8fe8:	f7ff f974 	bl	d82d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8fee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ff0:	4622      	mov	r2, r4
   d8ff2:	6868      	ldr	r0, [r5, #4]
   d8ff4:	f7ff f96e 	bl	d82d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ff8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ffa:	4681      	mov	r9, r0
        bool ok = false;
   d8ffc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ffe:	2e00      	cmp	r6, #0
   d9000:	d036      	beq.n	d9070 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9002:	2900      	cmp	r1, #0
   d9004:	d134      	bne.n	d9070 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9006:	6873      	ldr	r3, [r6, #4]
   d9008:	2b02      	cmp	r3, #2
   d900a:	d003      	beq.n	d9014 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d900c:	2b0a      	cmp	r3, #10
   d900e:	d00b      	beq.n	d9028 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9010:	69f6      	ldr	r6, [r6, #28]
   d9012:	e7f4      	b.n	d8ffe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9014:	f1b8 0f00 	cmp.w	r8, #0
   d9018:	d004      	beq.n	d9024 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d901a:	6971      	ldr	r1, [r6, #20]
   d901c:	4638      	mov	r0, r7
   d901e:	3104      	adds	r1, #4
   d9020:	f7ff ff7d 	bl	d8f1e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9024:	4641      	mov	r1, r8
   d9026:	e7f3      	b.n	d9010 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9028:	f1b9 0f00 	cmp.w	r9, #0
   d902c:	d101      	bne.n	d9032 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d902e:	4649      	mov	r1, r9
   d9030:	e7ee      	b.n	d9010 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9032:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9034:	2210      	movs	r2, #16
   d9036:	a801      	add	r0, sp, #4
   d9038:	f002 f888 	bl	db14c <memset>
                    a.v = 6;
   d903c:	2306      	movs	r3, #6
   d903e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9042:	ad01      	add	r5, sp, #4
   d9044:	f104 0308 	add.w	r3, r4, #8
   d9048:	3418      	adds	r4, #24
   d904a:	6818      	ldr	r0, [r3, #0]
   d904c:	6859      	ldr	r1, [r3, #4]
   d904e:	462a      	mov	r2, r5
   d9050:	c203      	stmia	r2!, {r0, r1}
   d9052:	3308      	adds	r3, #8
   d9054:	42a3      	cmp	r3, r4
   d9056:	4615      	mov	r5, r2
   d9058:	d1f7      	bne.n	d904a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d905a:	a901      	add	r1, sp, #4
   d905c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d905e:	ad07      	add	r5, sp, #28
   d9060:	f7ff ff3e 	bl	d8ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9066:	1d3c      	adds	r4, r7, #4
   d9068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d906a:	682b      	ldr	r3, [r5, #0]
   d906c:	7023      	strb	r3, [r4, #0]
   d906e:	e7de      	b.n	d902e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9070:	9800      	ldr	r0, [sp, #0]
   d9072:	f7fe ff65 	bl	d7f40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9076:	4638      	mov	r0, r7
   d9078:	b015      	add	sp, #84	; 0x54
   d907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9080 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9080:	4b02      	ldr	r3, [pc, #8]	; (d908c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9082:	4a03      	ldr	r2, [pc, #12]	; (d9090 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9084:	601a      	str	r2, [r3, #0]
   d9086:	2200      	movs	r2, #0
   d9088:	605a      	str	r2, [r3, #4]

} // spark
   d908a:	4770      	bx	lr
   d908c:	2003e5f0 	.word	0x2003e5f0
   d9090:	000dd408 	.word	0x000dd408

000d9094 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9096:	4606      	mov	r6, r0
   d9098:	460d      	mov	r5, r1
  size_t n = 0;
   d909a:	188f      	adds	r7, r1, r2
   d909c:	2400      	movs	r4, #0
  while (size--) {
   d909e:	42bd      	cmp	r5, r7
   d90a0:	d00c      	beq.n	d90bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d90a2:	6833      	ldr	r3, [r6, #0]
   d90a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d90a8:	689b      	ldr	r3, [r3, #8]
   d90aa:	4630      	mov	r0, r6
   d90ac:	4798      	blx	r3
     if (chunk>=0)
   d90ae:	1e03      	subs	r3, r0, #0
   d90b0:	db01      	blt.n	d90b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d90b2:	441c      	add	r4, r3
  while (size--) {
   d90b4:	e7f3      	b.n	d909e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d90b6:	2c00      	cmp	r4, #0
   d90b8:	bf08      	it	eq
   d90ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d90bc:	4620      	mov	r0, r4
   d90be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d90c0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d90c0:	b513      	push	{r0, r1, r4, lr}
   d90c2:	4604      	mov	r4, r0
    }
   d90c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d90c6:	b159      	cbz	r1, d90e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d90c8:	9101      	str	r1, [sp, #4]
   d90ca:	f003 f875 	bl	dc1b8 <strlen>
   d90ce:	6823      	ldr	r3, [r4, #0]
   d90d0:	9901      	ldr	r1, [sp, #4]
   d90d2:	68db      	ldr	r3, [r3, #12]
   d90d4:	4602      	mov	r2, r0
   d90d6:	4620      	mov	r0, r4
    }
   d90d8:	b002      	add	sp, #8
   d90da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d90de:	4718      	bx	r3
    }
   d90e0:	b002      	add	sp, #8
   d90e2:	bd10      	pop	{r4, pc}

000d90e4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d90e4:	b508      	push	{r3, lr}
  return write(str);
   d90e6:	f7ff ffeb 	bl	d90c0 <_ZN5Print5writeEPKc>
}
   d90ea:	bd08      	pop	{r3, pc}

000d90ec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d90ec:	6803      	ldr	r3, [r0, #0]
   d90ee:	689b      	ldr	r3, [r3, #8]
   d90f0:	4718      	bx	r3

000d90f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d90f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d90f4:	210d      	movs	r1, #13
{
   d90f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d90f8:	f7ff fff8 	bl	d90ec <_ZN5Print5printEc>
  n += print('\n');
   d90fc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d90fe:	4604      	mov	r4, r0
  n += print('\n');
   d9100:	4628      	mov	r0, r5
   d9102:	f7ff fff3 	bl	d90ec <_ZN5Print5printEc>
  return n;
}
   d9106:	4420      	add	r0, r4
   d9108:	bd38      	pop	{r3, r4, r5, pc}

000d910a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d910a:	b538      	push	{r3, r4, r5, lr}
   d910c:	4605      	mov	r5, r0
  return write(str);
   d910e:	f7ff ffd7 	bl	d90c0 <_ZN5Print5writeEPKc>
   d9112:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d9114:	4628      	mov	r0, r5
   d9116:	f7ff ffec 	bl	d90f2 <_ZN5Print7printlnEv>
  return n;
}
   d911a:	4420      	add	r0, r4
   d911c:	bd38      	pop	{r3, r4, r5, pc}

000d911e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d911e:	b530      	push	{r4, r5, lr}
   d9120:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9122:	2300      	movs	r3, #0
   d9124:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9128:	2a01      	cmp	r2, #1
   d912a:	bf98      	it	ls
   d912c:	220a      	movls	r2, #10
   d912e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9130:	460d      	mov	r5, r1
   d9132:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9136:	fb01 5312 	mls	r3, r1, r2, r5
   d913a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d913e:	2b09      	cmp	r3, #9
   d9140:	bf94      	ite	ls
   d9142:	3330      	addls	r3, #48	; 0x30
   d9144:	3337      	addhi	r3, #55	; 0x37
   d9146:	b2db      	uxtb	r3, r3
  } while(n);
   d9148:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d914a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d914e:	d9ef      	bls.n	d9130 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9150:	4621      	mov	r1, r4
   d9152:	f7ff ffb5 	bl	d90c0 <_ZN5Print5writeEPKc>
}
   d9156:	b00b      	add	sp, #44	; 0x2c
   d9158:	bd30      	pop	{r4, r5, pc}
	...

000d915c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d915c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9160:	ec55 4b10 	vmov	r4, r5, d0
   d9164:	4606      	mov	r6, r0
   d9166:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9168:	ee10 2a10 	vmov	r2, s0
   d916c:	ee10 0a10 	vmov	r0, s0
   d9170:	462b      	mov	r3, r5
   d9172:	4629      	mov	r1, r5
   d9174:	f001 fb88 	bl	da888 <__aeabi_dcmpun>
   d9178:	b140      	cbz	r0, d918c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d917a:	4953      	ldr	r1, [pc, #332]	; (d92c8 <_ZN5Print10printFloatEdh+0x16c>)
   d917c:	4630      	mov	r0, r6
   d917e:	f7ff ff9f 	bl	d90c0 <_ZN5Print5writeEPKc>
   d9182:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d9184:	4650      	mov	r0, sl
   d9186:	b003      	add	sp, #12
   d9188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d918c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d9190:	4b4e      	ldr	r3, [pc, #312]	; (d92cc <_ZN5Print10printFloatEdh+0x170>)
   d9192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9196:	4620      	mov	r0, r4
   d9198:	4649      	mov	r1, r9
   d919a:	f001 fb75 	bl	da888 <__aeabi_dcmpun>
   d919e:	b948      	cbnz	r0, d91b4 <_ZN5Print10printFloatEdh+0x58>
   d91a0:	4b4a      	ldr	r3, [pc, #296]	; (d92cc <_ZN5Print10printFloatEdh+0x170>)
   d91a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d91a6:	4620      	mov	r0, r4
   d91a8:	4649      	mov	r1, r9
   d91aa:	f001 fb4f 	bl	da84c <__aeabi_dcmple>
   d91ae:	b908      	cbnz	r0, d91b4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d91b0:	4947      	ldr	r1, [pc, #284]	; (d92d0 <_ZN5Print10printFloatEdh+0x174>)
   d91b2:	e7e3      	b.n	d917c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d91b4:	4b47      	ldr	r3, [pc, #284]	; (d92d4 <_ZN5Print10printFloatEdh+0x178>)
   d91b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d91ba:	4620      	mov	r0, r4
   d91bc:	4629      	mov	r1, r5
   d91be:	f001 fb59 	bl	da874 <__aeabi_dcmpgt>
   d91c2:	b108      	cbz	r0, d91c8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d91c4:	4944      	ldr	r1, [pc, #272]	; (d92d8 <_ZN5Print10printFloatEdh+0x17c>)
   d91c6:	e7d9      	b.n	d917c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d91c8:	4b44      	ldr	r3, [pc, #272]	; (d92dc <_ZN5Print10printFloatEdh+0x180>)
   d91ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d91ce:	4620      	mov	r0, r4
   d91d0:	4629      	mov	r1, r5
   d91d2:	f001 fb31 	bl	da838 <__aeabi_dcmplt>
   d91d6:	2800      	cmp	r0, #0
   d91d8:	d1f4      	bne.n	d91c4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d91da:	2200      	movs	r2, #0
   d91dc:	2300      	movs	r3, #0
   d91de:	4620      	mov	r0, r4
   d91e0:	4629      	mov	r1, r5
   d91e2:	f001 fb29 	bl	da838 <__aeabi_dcmplt>
   d91e6:	b1d0      	cbz	r0, d921e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d91e8:	212d      	movs	r1, #45	; 0x2d
   d91ea:	4630      	mov	r0, r6
   d91ec:	f7ff ff7e 	bl	d90ec <_ZN5Print5printEc>
     number = -number;
   d91f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d91f4:	4682      	mov	sl, r0
     number = -number;
   d91f6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d91f8:	4939      	ldr	r1, [pc, #228]	; (d92e0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d91fa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d92e8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d91fe:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d9202:	2000      	movs	r0, #0
    rounding /= 10.0;
   d9204:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d9208:	fa5f f38b 	uxtb.w	r3, fp
   d920c:	429f      	cmp	r7, r3
   d920e:	d908      	bls.n	d9222 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d9210:	4642      	mov	r2, r8
   d9212:	464b      	mov	r3, r9
   d9214:	f001 f9c8 	bl	da5a8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d9218:	f10b 0b01 	add.w	fp, fp, #1
   d921c:	e7f4      	b.n	d9208 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d921e:	4682      	mov	sl, r0
   d9220:	e7ea      	b.n	d91f8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d9222:	4622      	mov	r2, r4
   d9224:	462b      	mov	r3, r5
   d9226:	f000 fedf 	bl	d9fe8 <__adddf3>
   d922a:	460d      	mov	r5, r1
   d922c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d922e:	f001 fb69 	bl	da904 <__aeabi_d2uiz>
   d9232:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d9234:	f001 f814 	bl	da260 <__aeabi_ui2d>
   d9238:	4602      	mov	r2, r0
   d923a:	460b      	mov	r3, r1
   d923c:	4620      	mov	r0, r4
   d923e:	4629      	mov	r1, r5
   d9240:	f000 fed0 	bl	d9fe4 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d9244:	220a      	movs	r2, #10
   d9246:	4604      	mov	r4, r0
   d9248:	460d      	mov	r5, r1
   d924a:	4630      	mov	r0, r6
   d924c:	4641      	mov	r1, r8
   d924e:	f7ff ff66 	bl	d911e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d9252:	4482      	add	sl, r0
  if (digits > 0) {
   d9254:	b127      	cbz	r7, d9260 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d9256:	4923      	ldr	r1, [pc, #140]	; (d92e4 <_ZN5Print10printFloatEdh+0x188>)
   d9258:	4630      	mov	r0, r6
   d925a:	f7ff ff31 	bl	d90c0 <_ZN5Print5writeEPKc>
    n += print(".");
   d925e:	4482      	add	sl, r0
    remainder *= 10.0;
   d9260:	f8df 9084 	ldr.w	r9, [pc, #132]	; d92e8 <_ZN5Print10printFloatEdh+0x18c>
   d9264:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d9268:	3f01      	subs	r7, #1
   d926a:	b2ff      	uxtb	r7, r7
   d926c:	2fff      	cmp	r7, #255	; 0xff
   d926e:	d089      	beq.n	d9184 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d9270:	4642      	mov	r2, r8
   d9272:	464b      	mov	r3, r9
   d9274:	4620      	mov	r0, r4
   d9276:	4629      	mov	r1, r5
   d9278:	f001 f86c 	bl	da354 <__aeabi_dmul>
   d927c:	4604      	mov	r4, r0
   d927e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d9280:	f001 fb18 	bl	da8b4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d9284:	f1b0 0b00 	subs.w	fp, r0, #0
   d9288:	da1a      	bge.n	d92c0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d928a:	212d      	movs	r1, #45	; 0x2d
   d928c:	4630      	mov	r0, r6
   d928e:	f7ff ff2d 	bl	d90ec <_ZN5Print5printEc>
            val = -n;
   d9292:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d9296:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d9298:	220a      	movs	r2, #10
   d929a:	4630      	mov	r0, r6
   d929c:	9301      	str	r3, [sp, #4]
   d929e:	f7ff ff3e 	bl	d911e <_ZN5Print11printNumberEmh>
   d92a2:	9b01      	ldr	r3, [sp, #4]
   d92a4:	4418      	add	r0, r3
    n += print(toPrint);
   d92a6:	4482      	add	sl, r0
    remainder -= toPrint;
   d92a8:	4658      	mov	r0, fp
   d92aa:	f000 ffe9 	bl	da280 <__aeabi_i2d>
   d92ae:	4602      	mov	r2, r0
   d92b0:	460b      	mov	r3, r1
   d92b2:	4620      	mov	r0, r4
   d92b4:	4629      	mov	r1, r5
   d92b6:	f000 fe95 	bl	d9fe4 <__aeabi_dsub>
   d92ba:	4604      	mov	r4, r0
   d92bc:	460d      	mov	r5, r1
  while (digits-- > 0)
   d92be:	e7d3      	b.n	d9268 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d92c0:	4659      	mov	r1, fp
        size_t t = 0;
   d92c2:	2300      	movs	r3, #0
   d92c4:	e7e8      	b.n	d9298 <_ZN5Print10printFloatEdh+0x13c>
   d92c6:	bf00      	nop
   d92c8:	000dd434 	.word	0x000dd434
   d92cc:	7fefffff 	.word	0x7fefffff
   d92d0:	000dd438 	.word	0x000dd438
   d92d4:	41efffff 	.word	0x41efffff
   d92d8:	000dd43c 	.word	0x000dd43c
   d92dc:	c1efffff 	.word	0xc1efffff
   d92e0:	3fe00000 	.word	0x3fe00000
   d92e4:	000dd440 	.word	0x000dd440
   d92e8:	40240000 	.word	0x40240000

000d92ec <_ZN5Print7printlnEdi>:
{
   d92ec:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d92ee:	b2c9      	uxtb	r1, r1
{
   d92f0:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d92f2:	f7ff ff33 	bl	d915c <_ZN5Print10printFloatEdh>
   d92f6:	4604      	mov	r4, r0
  n += println();
   d92f8:	4628      	mov	r0, r5
   d92fa:	f7ff fefa 	bl	d90f2 <_ZN5Print7printlnEv>
}
   d92fe:	4420      	add	r0, r4
   d9300:	bd38      	pop	{r3, r4, r5, pc}

000d9302 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9306:	b086      	sub	sp, #24
   d9308:	af00      	add	r7, sp, #0
   d930a:	4605      	mov	r5, r0
   d930c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d930e:	1d38      	adds	r0, r7, #4
   d9310:	2114      	movs	r1, #20
{
   d9312:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9314:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9316:	f7ff f84d 	bl	d83b4 <vsnprintf>

    if (n<bufsize)
   d931a:	2813      	cmp	r0, #19
   d931c:	d80e      	bhi.n	d933c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d931e:	1d39      	adds	r1, r7, #4
   d9320:	4628      	mov	r0, r5
   d9322:	f7ff fecd 	bl	d90c0 <_ZN5Print5writeEPKc>
   d9326:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9328:	b11e      	cbz	r6, d9332 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d932a:	4628      	mov	r0, r5
   d932c:	f7ff fee1 	bl	d90f2 <_ZN5Print7printlnEv>
   d9330:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9332:	4620      	mov	r0, r4
   d9334:	3718      	adds	r7, #24
   d9336:	46bd      	mov	sp, r7
   d9338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d933c:	f100 0308 	add.w	r3, r0, #8
   d9340:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9344:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9346:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d934a:	4622      	mov	r2, r4
   d934c:	1c41      	adds	r1, r0, #1
   d934e:	683b      	ldr	r3, [r7, #0]
   d9350:	4668      	mov	r0, sp
   d9352:	f7ff f82f 	bl	d83b4 <vsnprintf>
  return write(str);
   d9356:	4669      	mov	r1, sp
   d9358:	4628      	mov	r0, r5
   d935a:	f7ff feb1 	bl	d90c0 <_ZN5Print5writeEPKc>
   d935e:	4604      	mov	r4, r0
   d9360:	46c5      	mov	sp, r8
   d9362:	e7e1      	b.n	d9328 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9364 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9364:	b510      	push	{r4, lr}
   d9366:	4604      	mov	r4, r0
   d9368:	f7fc fb34 	bl	d59d4 <_ZNSt14_Function_baseD1Ev>
   d936c:	4620      	mov	r0, r4
   d936e:	bd10      	pop	{r4, pc}

000d9370 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9370:	4803      	ldr	r0, [pc, #12]	; (d9380 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9372:	4a04      	ldr	r2, [pc, #16]	; (d9384 <_GLOBAL__sub_I_RGB+0x14>)
   d9374:	4904      	ldr	r1, [pc, #16]	; (d9388 <_GLOBAL__sub_I_RGB+0x18>)
   d9376:	2300      	movs	r3, #0
   d9378:	6083      	str	r3, [r0, #8]
   d937a:	f000 be21 	b.w	d9fc0 <__aeabi_atexit>
   d937e:	bf00      	nop
   d9380:	2003e5f8 	.word	0x2003e5f8
   d9384:	2003e1f8 	.word	0x2003e1f8
   d9388:	000d9365 	.word	0x000d9365

000d938c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d938c:	2100      	movs	r1, #0
   d938e:	f7fe be17 	b.w	d7fc0 <hal_spi_acquire>

000d9392 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9392:	2100      	movs	r1, #0
   d9394:	f7fe be1c 	b.w	d7fd0 <hal_spi_release>

000d9398 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9398:	b510      	push	{r4, lr}
   d939a:	4604      	mov	r4, r0
   d939c:	4608      	mov	r0, r1
{
    _spi = spi;
   d939e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d93a0:	f7fe fdee 	bl	d7f80 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d93a4:	2300      	movs	r3, #0
   d93a6:	6063      	str	r3, [r4, #4]
}
   d93a8:	4620      	mov	r0, r4
   d93aa:	bd10      	pop	{r4, pc}

000d93ac <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d93ac:	b513      	push	{r0, r1, r4, lr}
   d93ae:	4604      	mov	r4, r0
    if (!lock())
   d93b0:	7800      	ldrb	r0, [r0, #0]
{
   d93b2:	9101      	str	r1, [sp, #4]
    if (!lock())
   d93b4:	f7ff ffea 	bl	d938c <_ZN8SPIClass4lockEv.isra.0>
   d93b8:	9901      	ldr	r1, [sp, #4]
   d93ba:	b940      	cbnz	r0, d93ce <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d93bc:	7820      	ldrb	r0, [r4, #0]
   d93be:	f7fe fdcf 	bl	d7f60 <hal_spi_begin>
        unlock();
   d93c2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d93c4:	b002      	add	sp, #8
   d93c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d93ca:	f7ff bfe2 	b.w	d9392 <_ZN8SPIClass6unlockEv.isra.0>
}
   d93ce:	b002      	add	sp, #8
   d93d0:	bd10      	pop	{r4, pc}

000d93d2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d93d2:	7800      	ldrb	r0, [r0, #0]
   d93d4:	f7ff bfdd 	b.w	d9392 <_ZN8SPIClass6unlockEv.isra.0>

000d93d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d93d8:	0840      	lsrs	r0, r0, #1
{
   d93da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d93dc:	6018      	str	r0, [r3, #0]
   d93de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d93e0:	6818      	ldr	r0, [r3, #0]
   d93e2:	4288      	cmp	r0, r1
   d93e4:	b2e5      	uxtb	r5, r4
   d93e6:	d906      	bls.n	d93f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d93e8:	3401      	adds	r4, #1
   d93ea:	2c08      	cmp	r4, #8
   d93ec:	d002      	beq.n	d93f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d93ee:	0840      	lsrs	r0, r0, #1
   d93f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d93f2:	e7f5      	b.n	d93e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d93f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d93f6:	4b02      	ldr	r3, [pc, #8]	; (d9400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d93f8:	5d5b      	ldrb	r3, [r3, r5]
   d93fa:	7013      	strb	r3, [r2, #0]
}
   d93fc:	bd30      	pop	{r4, r5, pc}
   d93fe:	bf00      	nop
   d9400:	000dd442 	.word	0x000dd442

000d9404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9408:	4606      	mov	r6, r0
   d940a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d940c:	7800      	ldrb	r0, [r0, #0]
{
   d940e:	460d      	mov	r5, r1
    CHECK(lock());
   d9410:	f7ff ffbc 	bl	d938c <_ZN8SPIClass4lockEv.isra.0>
   d9414:	2800      	cmp	r0, #0
   d9416:	db1b      	blt.n	d9450 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9418:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d941a:	2214      	movs	r2, #20
   d941c:	2100      	movs	r1, #0
   d941e:	a809      	add	r0, sp, #36	; 0x24
   d9420:	f001 fe94 	bl	db14c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9424:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9426:	2200      	movs	r2, #0
   d9428:	a909      	add	r1, sp, #36	; 0x24
   d942a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d942c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9430:	f7fe fdb6 	bl	d7fa0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9434:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9438:	b113      	cbz	r3, d9440 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d943a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d943e:	b154      	cbz	r4, d9456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9440:	2700      	movs	r7, #0
   d9442:	46b9      	mov	r9, r7
   d9444:	46b8      	mov	r8, r7
   d9446:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d9448:	792b      	ldrb	r3, [r5, #4]
   d944a:	b15c      	cbz	r4, d9464 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d944c:	b1c3      	cbz	r3, d9480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d944e:	2000      	movs	r0, #0
}
   d9450:	b00f      	add	sp, #60	; 0x3c
   d9452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9456:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d945a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d945e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9462:	e7f1      	b.n	d9448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9464:	2b00      	cmp	r3, #0
   d9466:	d135      	bne.n	d94d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9468:	68ab      	ldr	r3, [r5, #8]
   d946a:	4543      	cmp	r3, r8
   d946c:	d108      	bne.n	d9480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d946e:	f88d 9020 	strb.w	r9, [sp, #32]
   d9472:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9476:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d947a:	89ab      	ldrh	r3, [r5, #12]
   d947c:	429a      	cmp	r2, r3
   d947e:	d0e6      	beq.n	d944e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9480:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9482:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d9484:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9488:	980a      	ldr	r0, [sp, #40]	; 0x28
   d948a:	ab04      	add	r3, sp, #16
   d948c:	f10d 020f 	add.w	r2, sp, #15
   d9490:	f7ff ffa2 	bl	d93d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9494:	7929      	ldrb	r1, [r5, #4]
   d9496:	b984      	cbnz	r4, d94ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9498:	b989      	cbnz	r1, d94be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d949a:	68ab      	ldr	r3, [r5, #8]
   d949c:	4543      	cmp	r3, r8
   d949e:	d30e      	bcc.n	d94be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d94a0:	f88d 9020 	strb.w	r9, [sp, #32]
   d94a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d94a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d94ac:	89ab      	ldrh	r3, [r5, #12]
   d94ae:	429a      	cmp	r2, r3
   d94b0:	d105      	bne.n	d94be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d94b2:	9b04      	ldr	r3, [sp, #16]
   d94b4:	4543      	cmp	r3, r8
   d94b6:	d102      	bne.n	d94be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d94b8:	e7c9      	b.n	d944e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d94ba:	2900      	cmp	r1, #0
   d94bc:	d1f9      	bne.n	d94b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d94be:	2300      	movs	r3, #0
   d94c0:	9301      	str	r3, [sp, #4]
   d94c2:	7b6b      	ldrb	r3, [r5, #13]
   d94c4:	9300      	str	r3, [sp, #0]
   d94c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d94ca:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d94cc:	7830      	ldrb	r0, [r6, #0]
   d94ce:	f7fe fd6f 	bl	d7fb0 <hal_spi_set_settings>
   d94d2:	e7bc      	b.n	d944e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d94d4:	e9cd 4400 	strd	r4, r4, [sp]
   d94d8:	4623      	mov	r3, r4
   d94da:	4622      	mov	r2, r4
   d94dc:	2101      	movs	r1, #1
   d94de:	e7f5      	b.n	d94cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d94e0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d94e0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d94e2:	7800      	ldrb	r0, [r0, #0]
   d94e4:	f7fe fd44 	bl	d7f70 <hal_spi_transfer>
}
   d94e8:	b2c0      	uxtb	r0, r0
   d94ea:	bd08      	pop	{r3, pc}

000d94ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d94ec:	b510      	push	{r4, lr}
   d94ee:	4604      	mov	r4, r0
{
	free(buffer);
   d94f0:	6800      	ldr	r0, [r0, #0]
   d94f2:	f7fe ff2f 	bl	d8354 <free>
}
   d94f6:	4620      	mov	r0, r4
   d94f8:	bd10      	pop	{r4, pc}

000d94fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d94fa:	b510      	push	{r4, lr}
   d94fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d94fe:	6800      	ldr	r0, [r0, #0]
   d9500:	b108      	cbz	r0, d9506 <_ZN6String10invalidateEv+0xc>
   d9502:	f7fe ff27 	bl	d8354 <free>
	buffer = NULL;
   d9506:	2300      	movs	r3, #0
	capacity = len = 0;
   d9508:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d950c:	6023      	str	r3, [r4, #0]
}
   d950e:	bd10      	pop	{r4, pc}

000d9510 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9510:	b538      	push	{r3, r4, r5, lr}
   d9512:	4604      	mov	r4, r0
   d9514:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9516:	6800      	ldr	r0, [r0, #0]
   d9518:	3101      	adds	r1, #1
   d951a:	f7fe ff23 	bl	d8364 <realloc>
	if (newbuffer) {
   d951e:	b110      	cbz	r0, d9526 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9520:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9524:	2001      	movs	r0, #1
	}
	return 0;
}
   d9526:	bd38      	pop	{r3, r4, r5, pc}

000d9528 <_ZN6String7reserveEj>:
{
   d9528:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d952a:	6803      	ldr	r3, [r0, #0]
{
   d952c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d952e:	b123      	cbz	r3, d953a <_ZN6String7reserveEj+0x12>
   d9530:	6843      	ldr	r3, [r0, #4]
   d9532:	428b      	cmp	r3, r1
   d9534:	d301      	bcc.n	d953a <_ZN6String7reserveEj+0x12>
   d9536:	2001      	movs	r0, #1
}
   d9538:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d953a:	4620      	mov	r0, r4
   d953c:	f7ff ffe8 	bl	d9510 <_ZN6String12changeBufferEj>
   d9540:	2800      	cmp	r0, #0
   d9542:	d0f9      	beq.n	d9538 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9544:	68a3      	ldr	r3, [r4, #8]
   d9546:	2b00      	cmp	r3, #0
   d9548:	d1f5      	bne.n	d9536 <_ZN6String7reserveEj+0xe>
   d954a:	6822      	ldr	r2, [r4, #0]
   d954c:	7013      	strb	r3, [r2, #0]
   d954e:	e7f2      	b.n	d9536 <_ZN6String7reserveEj+0xe>

000d9550 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9550:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9552:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9554:	4611      	mov	r1, r2
   d9556:	9201      	str	r2, [sp, #4]
{
   d9558:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d955a:	f7ff ffe5 	bl	d9528 <_ZN6String7reserveEj>
   d955e:	9a01      	ldr	r2, [sp, #4]
   d9560:	b928      	cbnz	r0, d956e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9562:	4620      	mov	r0, r4
   d9564:	f7ff ffc9 	bl	d94fa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9568:	4620      	mov	r0, r4
   d956a:	b003      	add	sp, #12
   d956c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d956e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9570:	4629      	mov	r1, r5
   d9572:	6820      	ldr	r0, [r4, #0]
   d9574:	f001 fdc2 	bl	db0fc <memcpy>
	buffer[len] = 0;
   d9578:	6822      	ldr	r2, [r4, #0]
   d957a:	68a3      	ldr	r3, [r4, #8]
   d957c:	2100      	movs	r1, #0
   d957e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9580:	e7f2      	b.n	d9568 <_ZN6String4copyEPKcj+0x18>

000d9582 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9582:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9584:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9586:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d958a:	4604      	mov	r4, r0
	len = 0;
   d958c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d958e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9590:	b141      	cbz	r1, d95a4 <_ZN6StringC1EPKc+0x22>
   d9592:	4608      	mov	r0, r1
   d9594:	9101      	str	r1, [sp, #4]
   d9596:	f002 fe0f 	bl	dc1b8 <strlen>
   d959a:	9901      	ldr	r1, [sp, #4]
   d959c:	4602      	mov	r2, r0
   d959e:	4620      	mov	r0, r4
   d95a0:	f7ff ffd6 	bl	d9550 <_ZN6String4copyEPKcj>
}
   d95a4:	4620      	mov	r0, r4
   d95a6:	b002      	add	sp, #8
   d95a8:	bd10      	pop	{r4, pc}

000d95aa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d95aa:	4288      	cmp	r0, r1
{
   d95ac:	b510      	push	{r4, lr}
   d95ae:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d95b0:	d005      	beq.n	d95be <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d95b2:	680b      	ldr	r3, [r1, #0]
   d95b4:	b12b      	cbz	r3, d95c2 <_ZN6StringaSERKS_+0x18>
   d95b6:	688a      	ldr	r2, [r1, #8]
   d95b8:	4619      	mov	r1, r3
   d95ba:	f7ff ffc9 	bl	d9550 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d95be:	4620      	mov	r0, r4
   d95c0:	bd10      	pop	{r4, pc}
	else invalidate();
   d95c2:	f7ff ff9a 	bl	d94fa <_ZN6String10invalidateEv>
   d95c6:	e7fa      	b.n	d95be <_ZN6StringaSERKS_+0x14>

000d95c8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d95c8:	b510      	push	{r4, lr}
	buffer = NULL;
   d95ca:	2300      	movs	r3, #0
String::String(const String &value)
   d95cc:	4604      	mov	r4, r0
	capacity = 0;
   d95ce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d95d2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95d4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d95d6:	f7ff ffe8 	bl	d95aa <_ZN6StringaSERKS_>
}
   d95da:	4620      	mov	r0, r4
   d95dc:	bd10      	pop	{r4, pc}

000d95de <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d95de:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d95e0:	6882      	ldr	r2, [r0, #8]
   d95e2:	b93a      	cbnz	r2, d95f4 <_ZNK6String6equalsEPKc+0x16>
   d95e4:	b121      	cbz	r1, d95f0 <_ZNK6String6equalsEPKc+0x12>
   d95e6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d95e8:	fab0 f080 	clz	r0, r0
   d95ec:	0940      	lsrs	r0, r0, #5
   d95ee:	e000      	b.n	d95f2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d95f0:	2001      	movs	r0, #1
}
   d95f2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d95f4:	6800      	ldr	r0, [r0, #0]
   d95f6:	b909      	cbnz	r1, d95fc <_ZNK6String6equalsEPKc+0x1e>
   d95f8:	7800      	ldrb	r0, [r0, #0]
   d95fa:	e7f5      	b.n	d95e8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d95fc:	f002 f850 	bl	db6a0 <strcmp>
   d9600:	e7f2      	b.n	d95e8 <_ZNK6String6equalsEPKc+0xa>

000d9602 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9602:	b558      	push	{r3, r4, r6, lr}
   d9604:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d9606:	b12a      	cbz	r2, d9614 <_ZNK6String8getBytesEPhjj+0x12>
   d9608:	b121      	cbz	r1, d9614 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d960a:	6884      	ldr	r4, [r0, #8]
   d960c:	429c      	cmp	r4, r3
   d960e:	d802      	bhi.n	d9616 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9610:	2300      	movs	r3, #0
   d9612:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d9614:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d9616:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d9618:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d961a:	6801      	ldr	r1, [r0, #0]
   d961c:	4294      	cmp	r4, r2
   d961e:	bf28      	it	cs
   d9620:	4614      	movcs	r4, r2
   d9622:	4419      	add	r1, r3
   d9624:	4622      	mov	r2, r4
   d9626:	4630      	mov	r0, r6
   d9628:	f002 fde0 	bl	dc1ec <strncpy>
	buf[n] = 0;
   d962c:	2300      	movs	r3, #0
   d962e:	5533      	strb	r3, [r6, r4]
   d9630:	e7f0      	b.n	d9614 <_ZNK6String8getBytesEPhjj+0x12>

000d9632 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d9632:	b507      	push	{r0, r1, r2, lr}
   d9634:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9636:	2100      	movs	r1, #0
{
   d9638:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d963a:	9100      	str	r1, [sp, #0]
   d963c:	2001      	movs	r0, #1
   d963e:	218c      	movs	r1, #140	; 0x8c
   d9640:	f7fe fdbe 	bl	d81c0 <system_reset>
}
   d9644:	b003      	add	sp, #12
   d9646:	f85d fb04 	ldr.w	pc, [sp], #4

000d964a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d964a:	4601      	mov	r1, r0
    reset(0, flags);
   d964c:	2000      	movs	r0, #0
   d964e:	f7ff bff0 	b.w	d9632 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9652 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9652:	2000      	movs	r0, #0
   d9654:	f7ff bff9 	b.w	d964a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000d9658 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9658:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d965a:	4b09      	ldr	r3, [pc, #36]	; (d9680 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d965c:	4c09      	ldr	r4, [pc, #36]	; (d9684 <_GLOBAL__sub_I_System+0x2c>)
   d965e:	2202      	movs	r2, #2
   d9660:	2000      	movs	r0, #0
   d9662:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9664:	4b08      	ldr	r3, [pc, #32]	; (d9688 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9666:	6020      	str	r0, [r4, #0]
   d9668:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d966a:	71a0      	strb	r0, [r4, #6]
   d966c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d966e:	f7fe fd51 	bl	d8114 <set_system_mode>
SystemClass System;
   d9672:	4620      	mov	r0, r4
   d9674:	4a05      	ldr	r2, [pc, #20]	; (d968c <_GLOBAL__sub_I_System+0x34>)
   d9676:	4906      	ldr	r1, [pc, #24]	; (d9690 <_GLOBAL__sub_I_System+0x38>)
   d9678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d967c:	f000 bca0 	b.w	d9fc0 <__aeabi_atexit>
   d9680:	2003e614 	.word	0x2003e614
   d9684:	2003e608 	.word	0x2003e608
   d9688:	ffff0000 	.word	0xffff0000
   d968c:	2003e1f8 	.word	0x2003e1f8
   d9690:	000d41a5 	.word	0x000d41a5

000d9694 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9698:	4a15      	ldr	r2, [pc, #84]	; (d96f0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d969a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d96fc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d969e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d96a2:	18c0      	adds	r0, r0, r3
   d96a4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d96a8:	4a12      	ldr	r2, [pc, #72]	; (d96f4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d96aa:	e9d2 3200 	ldrd	r3, r2, [r2]
   d96ae:	18c6      	adds	r6, r0, r3
   d96b0:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d96b4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d96b8:	42bb      	cmp	r3, r7
   d96ba:	bf08      	it	eq
   d96bc:	42b2      	cmpeq	r2, r6
{
   d96be:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d96c0:	d013      	beq.n	d96ea <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d96c2:	a903      	add	r1, sp, #12
   d96c4:	4668      	mov	r0, sp
   d96c6:	e9cd 6700 	strd	r6, r7, [sp]
   d96ca:	f001 fc21 	bl	daf10 <localtime_r>
	calendar_time.tm_year += 1900;
   d96ce:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96d0:	4d09      	ldr	r5, [pc, #36]	; (d96f8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d96d2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96d6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d96d8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d96dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d96de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d96e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d96e2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96e6:	6823      	ldr	r3, [r4, #0]
   d96e8:	602b      	str	r3, [r5, #0]
    }
}
   d96ea:	b00c      	add	sp, #48	; 0x30
   d96ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d96f0:	2003e650 	.word	0x2003e650
   d96f4:	2003e648 	.word	0x2003e648
   d96f8:	2003e620 	.word	0x2003e620
   d96fc:	2003e658 	.word	0x2003e658

000d9700 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9700:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9702:	2000      	movs	r0, #0
   d9704:	f7fe fdae 	bl	d8264 <spark_sync_time_pending>
   d9708:	b128      	cbz	r0, d9716 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d970a:	f7fe fd83 	bl	d8214 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d970e:	f080 0001 	eor.w	r0, r0, #1
   d9712:	b2c0      	uxtb	r0, r0
    }
   d9714:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9716:	2001      	movs	r0, #1
   d9718:	e7fc      	b.n	d9714 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d971c <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d971c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d971e:	f7ff ffb9 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9722:	4b02      	ldr	r3, [pc, #8]	; (d972c <_ZN9TimeClass7weekdayEx+0x10>)
   d9724:	6998      	ldr	r0, [r3, #24]
}
   d9726:	3001      	adds	r0, #1
   d9728:	bd08      	pop	{r3, pc}
   d972a:	bf00      	nop
   d972c:	2003e620 	.word	0x2003e620

000d9730 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9730:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9732:	f7ff ffaf 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9736:	4b02      	ldr	r3, [pc, #8]	; (d9740 <_ZN9TimeClass5monthEx+0x10>)
   d9738:	6918      	ldr	r0, [r3, #16]
}
   d973a:	3001      	adds	r0, #1
   d973c:	bd08      	pop	{r3, pc}
   d973e:	bf00      	nop
   d9740:	2003e620 	.word	0x2003e620

000d9744 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9744:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9748:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9750:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9752:	d411      	bmi.n	d9778 <_ZN9TimeClass4zoneEf+0x34>
   d9754:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9758:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9760:	dc0a      	bgt.n	d9778 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9762:	eddf 7a06 	vldr	s15, [pc, #24]	; d977c <_ZN9TimeClass4zoneEf+0x38>
   d9766:	ee60 7a27 	vmul.f32	s15, s0, s15
   d976a:	ee17 0a90 	vmov	r0, s15
   d976e:	f001 f939 	bl	da9e4 <__aeabi_f2lz>
   d9772:	4b03      	ldr	r3, [pc, #12]	; (d9780 <_ZN9TimeClass4zoneEf+0x3c>)
   d9774:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9778:	bd08      	pop	{r3, pc}
   d977a:	bf00      	nop
   d977c:	45610000 	.word	0x45610000
   d9780:	2003e650 	.word	0x2003e650

000d9784 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d978c:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d978e:	d411      	bmi.n	d97b4 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d9790:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9794:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d979c:	dc0a      	bgt.n	d97b4 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d979e:	eddf 7a06 	vldr	s15, [pc, #24]	; d97b8 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d97a2:	ee60 7a27 	vmul.f32	s15, s0, s15
   d97a6:	ee17 0a90 	vmov	r0, s15
   d97aa:	f001 f91b 	bl	da9e4 <__aeabi_f2lz>
   d97ae:	4b03      	ldr	r3, [pc, #12]	; (d97bc <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d97b0:	e9c3 0100 	strd	r0, r1, [r3]
}
   d97b4:	bd08      	pop	{r3, pc}
   d97b6:	bf00      	nop
   d97b8:	45610000 	.word	0x45610000
   d97bc:	2003dfb8 	.word	0x2003dfb8

000d97c0 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d97c0:	4b03      	ldr	r3, [pc, #12]	; (d97d0 <_ZN9TimeClass8beginDSTEv+0x10>)
   d97c2:	e9d3 0100 	ldrd	r0, r1, [r3]
   d97c6:	4b03      	ldr	r3, [pc, #12]	; (d97d4 <_ZN9TimeClass8beginDSTEv+0x14>)
   d97c8:	e9c3 0100 	strd	r0, r1, [r3]
}
   d97cc:	4770      	bx	lr
   d97ce:	bf00      	nop
   d97d0:	2003dfb8 	.word	0x2003dfb8
   d97d4:	2003e648 	.word	0x2003e648

000d97d8 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d97d8:	4b02      	ldr	r3, [pc, #8]	; (d97e4 <_ZN9TimeClass6endDSTEv+0xc>)
   d97da:	2000      	movs	r0, #0
   d97dc:	2100      	movs	r1, #0
   d97de:	e9c3 0100 	strd	r0, r1, [r3]
}
   d97e2:	4770      	bx	lr
   d97e4:	2003e648 	.word	0x2003e648

000d97e8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d97e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d97ea:	4602      	mov	r2, r0
   d97ec:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d97ee:	4668      	mov	r0, sp
    struct timeval tv = {
   d97f0:	2100      	movs	r1, #0
    };
   d97f2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d97f6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d97fa:	f7fe fae1 	bl	d7dc0 <hal_rtc_set_time>
   d97fe:	4602      	mov	r2, r0
   d9800:	b910      	cbnz	r0, d9808 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9802:	4601      	mov	r1, r0
   d9804:	f7fe fcb6 	bl	d8174 <system_notify_time_changed>
    }
}
   d9808:	b005      	add	sp, #20
   d980a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9810 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9810:	b530      	push	{r4, r5, lr}
   d9812:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9814:	4818      	ldr	r0, [pc, #96]	; (d9878 <_ZN9TimeClass7timeStrEx+0x68>)
   d9816:	e9d0 1000 	ldrd	r1, r0, [r0]
   d981a:	1852      	adds	r2, r2, r1
   d981c:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9820:	4816      	ldr	r0, [pc, #88]	; (d987c <_ZN9TimeClass7timeStrEx+0x6c>)
   d9822:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9826:	1852      	adds	r2, r2, r1
{
   d9828:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d982a:	eb40 0303 	adc.w	r3, r0, r3
   d982e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9832:	2224      	movs	r2, #36	; 0x24
   d9834:	eb0d 0002 	add.w	r0, sp, r2
   d9838:	2100      	movs	r1, #0
   d983a:	f001 fc87 	bl	db14c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d983e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9840:	a909      	add	r1, sp, #36	; 0x24
   d9842:	4668      	mov	r0, sp
   d9844:	f001 fb64 	bl	daf10 <localtime_r>
    char ascstr[26] = {};
   d9848:	2216      	movs	r2, #22
   d984a:	4629      	mov	r1, r5
   d984c:	a803      	add	r0, sp, #12
   d984e:	9502      	str	r5, [sp, #8]
   d9850:	f001 fc7c 	bl	db14c <memset>
    asctime_r(&calendar_time, ascstr);
   d9854:	a902      	add	r1, sp, #8
   d9856:	a809      	add	r0, sp, #36	; 0x24
   d9858:	f001 fa5c 	bl	dad14 <asctime_r>
    int len = strlen(ascstr);
   d985c:	a802      	add	r0, sp, #8
   d985e:	f002 fcab 	bl	dc1b8 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9862:	ab12      	add	r3, sp, #72	; 0x48
   d9864:	4418      	add	r0, r3
    return String(ascstr);
   d9866:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9868:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d986c:	4620      	mov	r0, r4
   d986e:	f7ff fe88 	bl	d9582 <_ZN6StringC1EPKc>
}
   d9872:	4620      	mov	r0, r4
   d9874:	b013      	add	sp, #76	; 0x4c
   d9876:	bd30      	pop	{r4, r5, pc}
   d9878:	2003e650 	.word	0x2003e650
   d987c:	2003e648 	.word	0x2003e648

000d9880 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9884:	b0a5      	sub	sp, #148	; 0x94
   d9886:	4607      	mov	r7, r0
   d9888:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d988a:	a814      	add	r0, sp, #80	; 0x50
{
   d988c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d988e:	223f      	movs	r2, #63	; 0x3f
{
   d9890:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9892:	f002 fcab 	bl	dc1ec <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9896:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9898:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d989a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d989e:	f002 fc8b 	bl	dc1b8 <strlen>
   d98a2:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d98a4:	bb5d      	cbnz	r5, d98fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d98a6:	492a      	ldr	r1, [pc, #168]	; (d9950 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d98a8:	a803      	add	r0, sp, #12
   d98aa:	f001 ff03 	bl	db6b4 <strcpy>
   d98ae:	ae14      	add	r6, sp, #80	; 0x50
{
   d98b0:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d98b2:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d98b6:	45ab      	cmp	fp, r5
   d98b8:	d936      	bls.n	d9928 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d98ba:	46b1      	mov	r9, r6
   d98bc:	f105 0a01 	add.w	sl, r5, #1
   d98c0:	f819 3b01 	ldrb.w	r3, [r9], #1
   d98c4:	2b25      	cmp	r3, #37	; 0x25
   d98c6:	d117      	bne.n	d98f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d98c8:	7873      	ldrb	r3, [r6, #1]
   d98ca:	2b7a      	cmp	r3, #122	; 0x7a
   d98cc:	d114      	bne.n	d98f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d98ce:	a803      	add	r0, sp, #12
   d98d0:	f002 fc72 	bl	dc1b8 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98d4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d98d6:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98d8:	1828      	adds	r0, r5, r0
   d98da:	4418      	add	r0, r3
   d98dc:	ebab 0205 	sub.w	r2, fp, r5
   d98e0:	1cb1      	adds	r1, r6, #2
   d98e2:	f001 fc0b 	bl	db0fc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d98e6:	4622      	mov	r2, r4
   d98e8:	a903      	add	r1, sp, #12
   d98ea:	4630      	mov	r0, r6
   d98ec:	f001 fc06 	bl	db0fc <memcpy>
            len = strlen(format_str);
   d98f0:	a814      	add	r0, sp, #80	; 0x50
   d98f2:	f002 fc61 	bl	dc1b8 <strlen>
   d98f6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d98f8:	464e      	mov	r6, r9
   d98fa:	4655      	mov	r5, sl
   d98fc:	e7d9      	b.n	d98b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d98fe:	213c      	movs	r1, #60	; 0x3c
   d9900:	fb95 f3f1 	sdiv	r3, r5, r1
   d9904:	2b00      	cmp	r3, #0
   d9906:	bfb8      	it	lt
   d9908:	425b      	neglt	r3, r3
   d990a:	fbb3 f2f1 	udiv	r2, r3, r1
   d990e:	fb01 3312 	mls	r3, r1, r2, r3
   d9912:	9300      	str	r3, [sp, #0]
   d9914:	4a0f      	ldr	r2, [pc, #60]	; (d9954 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9916:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d991a:	2110      	movs	r1, #16
   d991c:	a803      	add	r0, sp, #12
   d991e:	fb95 f3f3 	sdiv	r3, r5, r3
   d9922:	f7fe fd37 	bl	d8394 <snprintf>
   d9926:	e7c2      	b.n	d98ae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9928:	2100      	movs	r1, #0
   d992a:	222e      	movs	r2, #46	; 0x2e
   d992c:	a808      	add	r0, sp, #32
   d992e:	9107      	str	r1, [sp, #28]
   d9930:	f001 fc0c 	bl	db14c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9934:	4643      	mov	r3, r8
   d9936:	aa14      	add	r2, sp, #80	; 0x50
   d9938:	2132      	movs	r1, #50	; 0x32
   d993a:	a807      	add	r0, sp, #28
   d993c:	f002 fc32 	bl	dc1a4 <strftime>
    return String(buf);
   d9940:	a907      	add	r1, sp, #28
   d9942:	4638      	mov	r0, r7
   d9944:	f7ff fe1d 	bl	d9582 <_ZN6StringC1EPKc>
}
   d9948:	4638      	mov	r0, r7
   d994a:	b025      	add	sp, #148	; 0x94
   d994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9950:	000dd871 	.word	0x000dd871
   d9954:	000dd44a 	.word	0x000dd44a

000d9958 <_ZN9TimeClass6formatExPKc>:
{
   d9958:	b5f0      	push	{r4, r5, r6, r7, lr}
   d995a:	b08d      	sub	sp, #52	; 0x34
   d995c:	e9cd 2300 	strd	r2, r3, [sp]
   d9960:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9962:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9964:	b915      	cbnz	r5, d996c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9966:	4b19      	ldr	r3, [pc, #100]	; (d99cc <_ZN9TimeClass6formatExPKc+0x74>)
   d9968:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d996a:	b12d      	cbz	r5, d9978 <_ZN9TimeClass6formatExPKc+0x20>
   d996c:	4b18      	ldr	r3, [pc, #96]	; (d99d0 <_ZN9TimeClass6formatExPKc+0x78>)
   d996e:	4628      	mov	r0, r5
   d9970:	6819      	ldr	r1, [r3, #0]
   d9972:	f001 fe95 	bl	db6a0 <strcmp>
   d9976:	b938      	cbnz	r0, d9988 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9978:	e9dd 2300 	ldrd	r2, r3, [sp]
   d997c:	4620      	mov	r0, r4
   d997e:	f7ff ff47 	bl	d9810 <_ZN9TimeClass7timeStrEx>
}
   d9982:	4620      	mov	r0, r4
   d9984:	b00d      	add	sp, #52	; 0x34
   d9986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9988:	4e12      	ldr	r6, [pc, #72]	; (d99d4 <_ZN9TimeClass6formatExPKc+0x7c>)
   d998a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d998c:	4f12      	ldr	r7, [pc, #72]	; (d99d8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d998e:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9992:	185b      	adds	r3, r3, r1
   d9994:	9901      	ldr	r1, [sp, #4]
   d9996:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d999a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d999e:	181b      	adds	r3, r3, r0
   d99a0:	eb41 0202 	adc.w	r2, r1, r2
   d99a4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d99a8:	2100      	movs	r1, #0
   d99aa:	2224      	movs	r2, #36	; 0x24
   d99ac:	a803      	add	r0, sp, #12
   d99ae:	f001 fbcd 	bl	db14c <memset>
    localtime_r(&t, &calendar_time);
   d99b2:	a903      	add	r1, sp, #12
   d99b4:	4668      	mov	r0, sp
   d99b6:	f001 faab 	bl	daf10 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d99ba:	6832      	ldr	r2, [r6, #0]
   d99bc:	683b      	ldr	r3, [r7, #0]
   d99be:	a903      	add	r1, sp, #12
   d99c0:	4413      	add	r3, r2
   d99c2:	4620      	mov	r0, r4
   d99c4:	462a      	mov	r2, r5
   d99c6:	f7ff ff5b 	bl	d9880 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d99ca:	e7da      	b.n	d9982 <_ZN9TimeClass6formatExPKc+0x2a>
   d99cc:	2003e61c 	.word	0x2003e61c
   d99d0:	2003dfb0 	.word	0x2003dfb0
   d99d4:	2003e650 	.word	0x2003e650
   d99d8:	2003e648 	.word	0x2003e648

000d99dc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d99dc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d99de:	2000      	movs	r0, #0
   d99e0:	f7fe f9d6 	bl	d7d90 <hal_rtc_time_is_valid>
    if (rtcstate)
   d99e4:	4604      	mov	r4, r0
   d99e6:	b9a0      	cbnz	r0, d9a12 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d99e8:	f7fe fb8c 	bl	d8104 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d99ec:	2801      	cmp	r0, #1
   d99ee:	d110      	bne.n	d9a12 <_ZN9TimeClass7isValidEv+0x36>
   d99f0:	4620      	mov	r0, r4
   d99f2:	f7fe fbb7 	bl	d8164 <system_thread_get_state>
   d99f6:	b960      	cbnz	r0, d9a12 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d99f8:	f7ff fe82 	bl	d9700 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d99fc:	b910      	cbnz	r0, d9a04 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d99fe:	f7fe fbf9 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d9a02:	e7f9      	b.n	d99f8 <_ZN9TimeClass7isValidEv+0x1c>
   d9a04:	f7ff fe7c 	bl	d9700 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9a0c:	2000      	movs	r0, #0
   d9a0e:	f7fe b9bf 	b.w	d7d90 <hal_rtc_time_is_valid>
}
   d9a12:	4620      	mov	r0, r4
   d9a14:	bd10      	pop	{r4, pc}

000d9a16 <_ZN9TimeClass3nowEv>:
{
   d9a16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9a18:	f7ff ffe0 	bl	d99dc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9a1c:	2210      	movs	r2, #16
   d9a1e:	2100      	movs	r1, #0
   d9a20:	4668      	mov	r0, sp
   d9a22:	f001 fb93 	bl	db14c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9a26:	2100      	movs	r1, #0
   d9a28:	4668      	mov	r0, sp
   d9a2a:	f7fe f9c1 	bl	d7db0 <hal_rtc_get_time>
}
   d9a2e:	9800      	ldr	r0, [sp, #0]
   d9a30:	b005      	add	sp, #20
   d9a32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9a38 <_ZN9TimeClass4hourEv>:
{
   d9a38:	b508      	push	{r3, lr}
	return hour(now());
   d9a3a:	f7ff ffec 	bl	d9a16 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a3e:	17c1      	asrs	r1, r0, #31
   d9a40:	f7ff fe28 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
}
   d9a44:	4b01      	ldr	r3, [pc, #4]	; (d9a4c <_ZN9TimeClass4hourEv+0x14>)
   d9a46:	6898      	ldr	r0, [r3, #8]
   d9a48:	bd08      	pop	{r3, pc}
   d9a4a:	bf00      	nop
   d9a4c:	2003e620 	.word	0x2003e620

000d9a50 <_ZN9TimeClass6minuteEv>:
{
   d9a50:	b508      	push	{r3, lr}
	return minute(now());
   d9a52:	f7ff ffe0 	bl	d9a16 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a56:	17c1      	asrs	r1, r0, #31
   d9a58:	f7ff fe1c 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
}
   d9a5c:	4b01      	ldr	r3, [pc, #4]	; (d9a64 <_ZN9TimeClass6minuteEv+0x14>)
   d9a5e:	6858      	ldr	r0, [r3, #4]
   d9a60:	bd08      	pop	{r3, pc}
   d9a62:	bf00      	nop
   d9a64:	2003e620 	.word	0x2003e620

000d9a68 <_ZN9TimeClass3dayEv>:
{
   d9a68:	b508      	push	{r3, lr}
	return day(now());
   d9a6a:	f7ff ffd4 	bl	d9a16 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a6e:	17c1      	asrs	r1, r0, #31
   d9a70:	f7ff fe10 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
}
   d9a74:	4b01      	ldr	r3, [pc, #4]	; (d9a7c <_ZN9TimeClass3dayEv+0x14>)
   d9a76:	68d8      	ldr	r0, [r3, #12]
   d9a78:	bd08      	pop	{r3, pc}
   d9a7a:	bf00      	nop
   d9a7c:	2003e620 	.word	0x2003e620

000d9a80 <_ZN9TimeClass7weekdayEv>:
{
   d9a80:	b508      	push	{r3, lr}
	return weekday(now());
   d9a82:	f7ff ffc8 	bl	d9a16 <_ZN9TimeClass3nowEv>
}
   d9a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d9a8a:	17c1      	asrs	r1, r0, #31
   d9a8c:	f7ff be46 	b.w	d971c <_ZN9TimeClass7weekdayEx>

000d9a90 <_ZN9TimeClass5monthEv>:
{
   d9a90:	b508      	push	{r3, lr}
	return month(now());
   d9a92:	f7ff ffc0 	bl	d9a16 <_ZN9TimeClass3nowEv>
}
   d9a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9a9a:	17c1      	asrs	r1, r0, #31
   d9a9c:	f7ff be48 	b.w	d9730 <_ZN9TimeClass5monthEx>

000d9aa0 <_ZN9TimeClass4yearEv>:
{
   d9aa0:	b508      	push	{r3, lr}
	return year(now());
   d9aa2:	f7ff ffb8 	bl	d9a16 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9aa6:	17c1      	asrs	r1, r0, #31
   d9aa8:	f7ff fdf4 	bl	d9694 <_ZL22Refresh_UnixTime_Cachex>
}
   d9aac:	4b01      	ldr	r3, [pc, #4]	; (d9ab4 <_ZN9TimeClass4yearEv+0x14>)
   d9aae:	6958      	ldr	r0, [r3, #20]
   d9ab0:	bd08      	pop	{r3, pc}
   d9ab2:	bf00      	nop
   d9ab4:	2003e620 	.word	0x2003e620

000d9ab8 <_ZN9TimeClass5localEv>:
{
   d9ab8:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d9aba:	f7ff ffac 	bl	d9a16 <_ZN9TimeClass3nowEv>
   d9abe:	4b03      	ldr	r3, [pc, #12]	; (d9acc <_ZN9TimeClass5localEv+0x14>)
   d9ac0:	4a03      	ldr	r2, [pc, #12]	; (d9ad0 <_ZN9TimeClass5localEv+0x18>)
   d9ac2:	681b      	ldr	r3, [r3, #0]
   d9ac4:	6812      	ldr	r2, [r2, #0]
   d9ac6:	4413      	add	r3, r2
}
   d9ac8:	4418      	add	r0, r3
   d9aca:	bd08      	pop	{r3, pc}
   d9acc:	2003e650 	.word	0x2003e650
   d9ad0:	2003e648 	.word	0x2003e648

000d9ad4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9ad4:	4b02      	ldr	r3, [pc, #8]	; (d9ae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9ad6:	681a      	ldr	r2, [r3, #0]
   d9ad8:	4b02      	ldr	r3, [pc, #8]	; (d9ae4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9ada:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9adc:	4770      	bx	lr
   d9ade:	bf00      	nop
   d9ae0:	2003dfb0 	.word	0x2003dfb0
   d9ae4:	2003e61c 	.word	0x2003e61c

000d9ae8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9ae8:	4770      	bx	lr

000d9aea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9aea:	7441      	strb	r1, [r0, #17]
}
   d9aec:	4770      	bx	lr

000d9aee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9aee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9af0:	7c00      	ldrb	r0, [r0, #16]
   d9af2:	f7fe faad 	bl	d8050 <hal_usart_available_data_for_write>
}
   d9af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9afa:	bd08      	pop	{r3, pc}

000d9afc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9afc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9afe:	7c00      	ldrb	r0, [r0, #16]
   d9b00:	f7fe fa7e 	bl	d8000 <hal_usart_available>
}
   d9b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9b08:	bd08      	pop	{r3, pc}

000d9b0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9b0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9b0c:	7c00      	ldrb	r0, [r0, #16]
   d9b0e:	f7fe fa87 	bl	d8020 <hal_usart_peek>
}
   d9b12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9b16:	bd08      	pop	{r3, pc}

000d9b18 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9b18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9b1a:	7c00      	ldrb	r0, [r0, #16]
   d9b1c:	f7fe fa78 	bl	d8010 <hal_usart_read>
}
   d9b20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9b24:	bd08      	pop	{r3, pc}

000d9b26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9b26:	7c00      	ldrb	r0, [r0, #16]
   d9b28:	f7fe ba82 	b.w	d8030 <hal_usart_flush>

000d9b2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9b2e:	7c45      	ldrb	r5, [r0, #17]
{
   d9b30:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9b32:	b12d      	cbz	r5, d9b40 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9b34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9b36:	b003      	add	sp, #12
   d9b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9b3c:	f7fe ba58 	b.w	d7ff0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9b40:	7c00      	ldrb	r0, [r0, #16]
   d9b42:	9101      	str	r1, [sp, #4]
   d9b44:	f7fe fa84 	bl	d8050 <hal_usart_available_data_for_write>
   d9b48:	2800      	cmp	r0, #0
   d9b4a:	9901      	ldr	r1, [sp, #4]
   d9b4c:	dcf2      	bgt.n	d9b34 <_ZN11USARTSerial5writeEh+0x8>
}
   d9b4e:	4628      	mov	r0, r5
   d9b50:	b003      	add	sp, #12
   d9b52:	bd30      	pop	{r4, r5, pc}

000d9b54 <_ZN11USARTSerialD0Ev>:
   d9b54:	b510      	push	{r4, lr}
   d9b56:	2114      	movs	r1, #20
   d9b58:	4604      	mov	r4, r0
   d9b5a:	f000 fa36 	bl	d9fca <_ZdlPvj>
   d9b5e:	4620      	mov	r0, r4
   d9b60:	bd10      	pop	{r4, pc}
	...

000d9b64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9b64:	b510      	push	{r4, lr}
   d9b66:	f04f 0c00 	mov.w	ip, #0
   d9b6a:	4604      	mov	r4, r0
   d9b6c:	4608      	mov	r0, r1
   d9b6e:	4611      	mov	r1, r2
   d9b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9b74:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9b78:	4a04      	ldr	r2, [pc, #16]	; (d9b8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9b7a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9b7c:	2201      	movs	r2, #1
  _serial = serial;
   d9b7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9b80:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9b82:	461a      	mov	r2, r3
   d9b84:	f7fe fa2c 	bl	d7fe0 <hal_usart_init>
}
   d9b88:	4620      	mov	r0, r4
   d9b8a:	bd10      	pop	{r4, pc}
   d9b8c:	000dd47c 	.word	0x000dd47c

000d9b90 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9b90:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9b92:	4c0e      	ldr	r4, [pc, #56]	; (d9bcc <_Z22__fetch_global_Serial1v+0x3c>)
   d9b94:	7821      	ldrb	r1, [r4, #0]
   d9b96:	f3bf 8f5b 	dmb	ish
   d9b9a:	f011 0101 	ands.w	r1, r1, #1
   d9b9e:	d112      	bne.n	d9bc6 <_Z22__fetch_global_Serial1v+0x36>
   d9ba0:	4620      	mov	r0, r4
   d9ba2:	9101      	str	r1, [sp, #4]
   d9ba4:	f7fa fa88 	bl	d40b8 <__cxa_guard_acquire>
   d9ba8:	9901      	ldr	r1, [sp, #4]
   d9baa:	b160      	cbz	r0, d9bc6 <_Z22__fetch_global_Serial1v+0x36>
   d9bac:	4a08      	ldr	r2, [pc, #32]	; (d9bd0 <_Z22__fetch_global_Serial1v+0x40>)
   d9bae:	4b09      	ldr	r3, [pc, #36]	; (d9bd4 <_Z22__fetch_global_Serial1v+0x44>)
   d9bb0:	4809      	ldr	r0, [pc, #36]	; (d9bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d9bb2:	f7ff ffd7 	bl	d9b64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9bb6:	4620      	mov	r0, r4
   d9bb8:	f7fa fa83 	bl	d40c2 <__cxa_guard_release>
   d9bbc:	4a07      	ldr	r2, [pc, #28]	; (d9bdc <_Z22__fetch_global_Serial1v+0x4c>)
   d9bbe:	4908      	ldr	r1, [pc, #32]	; (d9be0 <_Z22__fetch_global_Serial1v+0x50>)
   d9bc0:	4805      	ldr	r0, [pc, #20]	; (d9bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d9bc2:	f000 f9fd 	bl	d9fc0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9bc6:	4804      	ldr	r0, [pc, #16]	; (d9bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d9bc8:	b002      	add	sp, #8
   d9bca:	bd10      	pop	{r4, pc}
   d9bcc:	2003e660 	.word	0x2003e660
   d9bd0:	2003e664 	.word	0x2003e664
   d9bd4:	2003e6e8 	.word	0x2003e6e8
   d9bd8:	2003e76c 	.word	0x2003e76c
   d9bdc:	2003e1f8 	.word	0x2003e1f8
   d9be0:	000d9ae9 	.word	0x000d9ae9

000d9be4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9be4:	7441      	strb	r1, [r0, #17]
}
   d9be6:	4770      	bx	lr

000d9be8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9be8:	4770      	bx	lr

000d9bea <_ZN9USBSerial4readEv>:
{
   d9bea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9bec:	2100      	movs	r1, #0
   d9bee:	7c00      	ldrb	r0, [r0, #16]
   d9bf0:	f7fe fa56 	bl	d80a0 <HAL_USB_USART_Receive_Data>
}
   d9bf4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9bf8:	bd08      	pop	{r3, pc}

000d9bfa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9bfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9bfc:	2101      	movs	r1, #1
   d9bfe:	7c00      	ldrb	r0, [r0, #16]
   d9c00:	f7fe fa4e 	bl	d80a0 <HAL_USB_USART_Receive_Data>
}
   d9c04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9c08:	bd08      	pop	{r3, pc}

000d9c0a <_ZN9USBSerial17availableForWriteEv>:
{
   d9c0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9c0c:	7c00      	ldrb	r0, [r0, #16]
   d9c0e:	f7fe fa3f 	bl	d8090 <HAL_USB_USART_Available_Data_For_Write>
}
   d9c12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c16:	bd08      	pop	{r3, pc}

000d9c18 <_ZN9USBSerial9availableEv>:
{
   d9c18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9c1a:	7c00      	ldrb	r0, [r0, #16]
   d9c1c:	f7fe fa30 	bl	d8080 <HAL_USB_USART_Available_Data>
}
   d9c20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c24:	bd08      	pop	{r3, pc}

000d9c26 <_ZN9USBSerial5writeEh>:
{
   d9c26:	b513      	push	{r0, r1, r4, lr}
   d9c28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9c2a:	7c00      	ldrb	r0, [r0, #16]
{
   d9c2c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9c2e:	f7fe fa2f 	bl	d8090 <HAL_USB_USART_Available_Data_For_Write>
   d9c32:	2800      	cmp	r0, #0
   d9c34:	9901      	ldr	r1, [sp, #4]
   d9c36:	dc01      	bgt.n	d9c3c <_ZN9USBSerial5writeEh+0x16>
   d9c38:	7c60      	ldrb	r0, [r4, #17]
   d9c3a:	b120      	cbz	r0, d9c46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9c3c:	7c20      	ldrb	r0, [r4, #16]
   d9c3e:	f7fe fa37 	bl	d80b0 <HAL_USB_USART_Send_Data>
   d9c42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9c46:	b002      	add	sp, #8
   d9c48:	bd10      	pop	{r4, pc}

000d9c4a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9c4a:	7c00      	ldrb	r0, [r0, #16]
   d9c4c:	f7fe ba38 	b.w	d80c0 <HAL_USB_USART_Flush_Data>

000d9c50 <_ZN9USBSerialD0Ev>:
   d9c50:	b510      	push	{r4, lr}
   d9c52:	2114      	movs	r1, #20
   d9c54:	4604      	mov	r4, r0
   d9c56:	f000 f9b8 	bl	d9fca <_ZdlPvj>
   d9c5a:	4620      	mov	r0, r4
   d9c5c:	bd10      	pop	{r4, pc}
	...

000d9c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9c60:	b510      	push	{r4, lr}
   d9c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9c66:	4604      	mov	r4, r0
   d9c68:	4608      	mov	r0, r1
   d9c6a:	2100      	movs	r1, #0
   d9c6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9c70:	4b04      	ldr	r3, [pc, #16]	; (d9c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9c72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9c74:	2301      	movs	r3, #1
  _serial = serial;
   d9c76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9c78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9c7a:	4611      	mov	r1, r2
   d9c7c:	f7fe f9f0 	bl	d8060 <HAL_USB_USART_Init>
}
   d9c80:	4620      	mov	r0, r4
   d9c82:	bd10      	pop	{r4, pc}
   d9c84:	000dd4ac 	.word	0x000dd4ac

000d9c88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9c88:	7c00      	ldrb	r0, [r0, #16]
   d9c8a:	2200      	movs	r2, #0
   d9c8c:	f7fe b9f0 	b.w	d8070 <HAL_USB_USART_Begin>

000d9c90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9c90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9c92:	2214      	movs	r2, #20
{
   d9c94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9c96:	2100      	movs	r1, #0
   d9c98:	f001 fa58 	bl	db14c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9c9c:	4620      	mov	r0, r4
   d9c9e:	bd10      	pop	{r4, pc}

000d9ca0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9ca0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9ca2:	4c10      	ldr	r4, [pc, #64]	; (d9ce4 <_Z16_fetch_usbserialv+0x44>)
{
   d9ca4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9ca6:	a803      	add	r0, sp, #12
   d9ca8:	f7ff fff2 	bl	d9c90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9cac:	7821      	ldrb	r1, [r4, #0]
   d9cae:	f3bf 8f5b 	dmb	ish
   d9cb2:	f011 0101 	ands.w	r1, r1, #1
   d9cb6:	d111      	bne.n	d9cdc <_Z16_fetch_usbserialv+0x3c>
   d9cb8:	4620      	mov	r0, r4
   d9cba:	9101      	str	r1, [sp, #4]
   d9cbc:	f7fa f9fc 	bl	d40b8 <__cxa_guard_acquire>
   d9cc0:	9901      	ldr	r1, [sp, #4]
   d9cc2:	b158      	cbz	r0, d9cdc <_Z16_fetch_usbserialv+0x3c>
   d9cc4:	aa03      	add	r2, sp, #12
   d9cc6:	4808      	ldr	r0, [pc, #32]	; (d9ce8 <_Z16_fetch_usbserialv+0x48>)
   d9cc8:	f7ff ffca 	bl	d9c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9ccc:	4620      	mov	r0, r4
   d9cce:	f7fa f9f8 	bl	d40c2 <__cxa_guard_release>
   d9cd2:	4a06      	ldr	r2, [pc, #24]	; (d9cec <_Z16_fetch_usbserialv+0x4c>)
   d9cd4:	4906      	ldr	r1, [pc, #24]	; (d9cf0 <_Z16_fetch_usbserialv+0x50>)
   d9cd6:	4804      	ldr	r0, [pc, #16]	; (d9ce8 <_Z16_fetch_usbserialv+0x48>)
   d9cd8:	f000 f972 	bl	d9fc0 <__aeabi_atexit>
	return _usbserial;
}
   d9cdc:	4802      	ldr	r0, [pc, #8]	; (d9ce8 <_Z16_fetch_usbserialv+0x48>)
   d9cde:	b008      	add	sp, #32
   d9ce0:	bd10      	pop	{r4, pc}
   d9ce2:	bf00      	nop
   d9ce4:	2003e780 	.word	0x2003e780
   d9ce8:	2003e784 	.word	0x2003e784
   d9cec:	2003e1f8 	.word	0x2003e1f8
   d9cf0:	000d9be9 	.word	0x000d9be9

000d9cf4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9cf4:	4b01      	ldr	r3, [pc, #4]	; (d9cfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9cf6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9cf8:	4770      	bx	lr
   d9cfa:	bf00      	nop
   d9cfc:	2003dfc0 	.word	0x2003dfc0

000d9d00 <serialEventRun>:
{
   d9d00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9d02:	4b0b      	ldr	r3, [pc, #44]	; (d9d30 <serialEventRun+0x30>)
   d9d04:	b143      	cbz	r3, d9d18 <serialEventRun+0x18>
   d9d06:	f7ff ffcb 	bl	d9ca0 <_Z16_fetch_usbserialv>
   d9d0a:	6803      	ldr	r3, [r0, #0]
   d9d0c:	691b      	ldr	r3, [r3, #16]
   d9d0e:	4798      	blx	r3
   d9d10:	2800      	cmp	r0, #0
   d9d12:	dd01      	ble.n	d9d18 <serialEventRun+0x18>
        serialEvent();
   d9d14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9d18:	4b06      	ldr	r3, [pc, #24]	; (d9d34 <serialEventRun+0x34>)
   d9d1a:	b143      	cbz	r3, d9d2e <serialEventRun+0x2e>
   d9d1c:	f7ff ff38 	bl	d9b90 <_Z22__fetch_global_Serial1v>
   d9d20:	6803      	ldr	r3, [r0, #0]
   d9d22:	691b      	ldr	r3, [r3, #16]
   d9d24:	4798      	blx	r3
   d9d26:	2800      	cmp	r0, #0
   d9d28:	dd01      	ble.n	d9d2e <serialEventRun+0x2e>
        serialEvent1();
   d9d2a:	f3af 8000 	nop.w
}
   d9d2e:	bd08      	pop	{r3, pc}
	...

000d9d38 <_post_loop>:
{
   d9d38:	b508      	push	{r3, lr}
	serialEventRun();
   d9d3a:	f7ff ffe1 	bl	d9d00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9d3e:	f7fe f80f 	bl	d7d60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9d42:	4b01      	ldr	r3, [pc, #4]	; (d9d48 <_post_loop+0x10>)
   d9d44:	6018      	str	r0, [r3, #0]
}
   d9d46:	bd08      	pop	{r3, pc}
   d9d48:	2003e7a0 	.word	0x2003e7a0

000d9d4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9d4c:	4802      	ldr	r0, [pc, #8]	; (d9d58 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9d4e:	4a03      	ldr	r2, [pc, #12]	; (d9d5c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9d50:	4903      	ldr	r1, [pc, #12]	; (d9d60 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9d52:	1a12      	subs	r2, r2, r0
   d9d54:	f001 b9d2 	b.w	db0fc <memcpy>
   d9d58:	2003f400 	.word	0x2003f400
   d9d5c:	2003fc1c 	.word	0x2003fc1c
   d9d60:	000dd9f8 	.word	0x000dd9f8

000d9d64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9d64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9d66:	2300      	movs	r3, #0
   d9d68:	9300      	str	r3, [sp, #0]
   d9d6a:	461a      	mov	r2, r3
   d9d6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9d70:	f7fe fa12 	bl	d8198 <system_ctrl_set_result>
}
   d9d74:	b003      	add	sp, #12
   d9d76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9d7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9d7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9d7e:	8843      	ldrh	r3, [r0, #2]
   d9d80:	2b0a      	cmp	r3, #10
   d9d82:	d008      	beq.n	d9d96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9d84:	2b50      	cmp	r3, #80	; 0x50
   d9d86:	d10b      	bne.n	d9da0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9d88:	4b09      	ldr	r3, [pc, #36]	; (d9db0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9d8a:	681b      	ldr	r3, [r3, #0]
   d9d8c:	b14b      	cbz	r3, d9da2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9d8e:	b003      	add	sp, #12
   d9d90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9d94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9d96:	f7ff ffe5 	bl	d9d64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9d9a:	b003      	add	sp, #12
   d9d9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9da0:	2300      	movs	r3, #0
   d9da2:	9300      	str	r3, [sp, #0]
   d9da4:	461a      	mov	r2, r3
   d9da6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9daa:	f7fe f9f5 	bl	d8198 <system_ctrl_set_result>
}
   d9dae:	e7f4      	b.n	d9d9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9db0:	2003e79c 	.word	0x2003e79c

000d9db4 <module_user_init_hook>:
{
   d9db4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9db6:	4c12      	ldr	r4, [pc, #72]	; (d9e00 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9db8:	4812      	ldr	r0, [pc, #72]	; (d9e04 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9dba:	4d13      	ldr	r5, [pc, #76]	; (d9e08 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9dbc:	2100      	movs	r1, #0
   d9dbe:	f7fe fb11 	bl	d83e4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9dc2:	6823      	ldr	r3, [r4, #0]
   d9dc4:	42ab      	cmp	r3, r5
   d9dc6:	4b11      	ldr	r3, [pc, #68]	; (d9e0c <module_user_init_hook+0x58>)
   d9dc8:	bf0c      	ite	eq
   d9dca:	2201      	moveq	r2, #1
   d9dcc:	2200      	movne	r2, #0
   d9dce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9dd0:	d002      	beq.n	d9dd8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d9dd2:	f7ff ffbb 	bl	d9d4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9dd6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9dd8:	f7fd ffaa 	bl	d7d30 <HAL_RNG_GetRandomNumber>
   d9ddc:	4604      	mov	r4, r0
    srand(seed);
   d9dde:	f001 fc3b 	bl	db658 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9de2:	4b0b      	ldr	r3, [pc, #44]	; (d9e10 <module_user_init_hook+0x5c>)
   d9de4:	b113      	cbz	r3, d9dec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9de6:	4620      	mov	r0, r4
   d9de8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9dec:	2100      	movs	r1, #0
   d9dee:	4808      	ldr	r0, [pc, #32]	; (d9e10 <module_user_init_hook+0x5c>)
   d9df0:	f7fe fa48 	bl	d8284 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9df8:	4806      	ldr	r0, [pc, #24]	; (d9e14 <module_user_init_hook+0x60>)
   d9dfa:	2100      	movs	r1, #0
   d9dfc:	f7fe b9c2 	b.w	d8184 <system_ctrl_set_app_request_handler>
   d9e00:	2003fc18 	.word	0x2003fc18
   d9e04:	000d9cf5 	.word	0x000d9cf5
   d9e08:	9a271c1e 	.word	0x9a271c1e
   d9e0c:	2003e798 	.word	0x2003e798
   d9e10:	00000000 	.word	0x00000000
   d9e14:	000d9d7d 	.word	0x000d9d7d

000d9e18 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9e18:	b508      	push	{r3, lr}
   d9e1a:	4b02      	ldr	r3, [pc, #8]	; (d9e24 <spark_protocol_instance+0xc>)
   d9e1c:	681b      	ldr	r3, [r3, #0]
   d9e1e:	681b      	ldr	r3, [r3, #0]
   d9e20:	9301      	str	r3, [sp, #4]
   d9e22:	bd08      	pop	{r3, pc}
   d9e24:	0003025c 	.word	0x0003025c

000d9e28 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9e28:	b508      	push	{r3, lr}
   d9e2a:	4b02      	ldr	r3, [pc, #8]	; (d9e34 <spark_protocol_set_product_id+0xc>)
   d9e2c:	681b      	ldr	r3, [r3, #0]
   d9e2e:	685b      	ldr	r3, [r3, #4]
   d9e30:	9301      	str	r3, [sp, #4]
   d9e32:	bd08      	pop	{r3, pc}
   d9e34:	0003025c 	.word	0x0003025c

000d9e38 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9e38:	b508      	push	{r3, lr}
   d9e3a:	4b02      	ldr	r3, [pc, #8]	; (d9e44 <spark_protocol_set_product_firmware_version+0xc>)
   d9e3c:	681b      	ldr	r3, [r3, #0]
   d9e3e:	689b      	ldr	r3, [r3, #8]
   d9e40:	9301      	str	r3, [sp, #4]
   d9e42:	bd08      	pop	{r3, pc}
   d9e44:	0003025c 	.word	0x0003025c

000d9e48 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9e48:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9e4a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9e4c:	d902      	bls.n	d9e54 <pinAvailable+0xc>
    return false;
   d9e4e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9e50:	b002      	add	sp, #8
   d9e52:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9e54:	f1a0 030b 	sub.w	r3, r0, #11
   d9e58:	2b02      	cmp	r3, #2
   d9e5a:	d81a      	bhi.n	d9e92 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9e5c:	4c17      	ldr	r4, [pc, #92]	; (d9ebc <pinAvailable+0x74>)
   d9e5e:	7821      	ldrb	r1, [r4, #0]
   d9e60:	f3bf 8f5b 	dmb	ish
   d9e64:	f011 0101 	ands.w	r1, r1, #1
   d9e68:	d10b      	bne.n	d9e82 <pinAvailable+0x3a>
   d9e6a:	4620      	mov	r0, r4
   d9e6c:	9101      	str	r1, [sp, #4]
   d9e6e:	f7fa f923 	bl	d40b8 <__cxa_guard_acquire>
   d9e72:	9901      	ldr	r1, [sp, #4]
   d9e74:	b128      	cbz	r0, d9e82 <pinAvailable+0x3a>
   d9e76:	4812      	ldr	r0, [pc, #72]	; (d9ec0 <pinAvailable+0x78>)
   d9e78:	f7ff fa8e 	bl	d9398 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9e7c:	4620      	mov	r0, r4
   d9e7e:	f7fa f920 	bl	d40c2 <__cxa_guard_release>
   d9e82:	4b0f      	ldr	r3, [pc, #60]	; (d9ec0 <pinAvailable+0x78>)
   d9e84:	7818      	ldrb	r0, [r3, #0]
   d9e86:	f7fe f883 	bl	d7f90 <hal_spi_is_enabled>
   d9e8a:	2800      	cmp	r0, #0
   d9e8c:	d1df      	bne.n	d9e4e <pinAvailable+0x6>
  return true; // 'pin' is available
   d9e8e:	2001      	movs	r0, #1
   d9e90:	e7de      	b.n	d9e50 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9e92:	2801      	cmp	r0, #1
   d9e94:	d809      	bhi.n	d9eaa <pinAvailable+0x62>
   d9e96:	f000 f86b 	bl	d9f70 <_Z19__fetch_global_Wirev>
   d9e9a:	2100      	movs	r1, #0
   d9e9c:	7c00      	ldrb	r0, [r0, #16]
   d9e9e:	f7fe f81f 	bl	d7ee0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9ea2:	f080 0001 	eor.w	r0, r0, #1
   d9ea6:	b2c0      	uxtb	r0, r0
   d9ea8:	e7d2      	b.n	d9e50 <pinAvailable+0x8>
   d9eaa:	3809      	subs	r0, #9
   d9eac:	2801      	cmp	r0, #1
   d9eae:	d8ee      	bhi.n	d9e8e <pinAvailable+0x46>
   d9eb0:	f7ff fe6e 	bl	d9b90 <_Z22__fetch_global_Serial1v>
   d9eb4:	7c00      	ldrb	r0, [r0, #16]
   d9eb6:	f7fe f8c3 	bl	d8040 <hal_usart_is_enabled>
   d9eba:	e7f2      	b.n	d9ea2 <pinAvailable+0x5a>
   d9ebc:	2003e3c4 	.word	0x2003e3c4
   d9ec0:	2003e3c8 	.word	0x2003e3c8

000d9ec4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ec4:	2823      	cmp	r0, #35	; 0x23
{
   d9ec6:	b538      	push	{r3, r4, r5, lr}
   d9ec8:	4604      	mov	r4, r0
   d9eca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9ecc:	d80a      	bhi.n	d9ee4 <pinMode+0x20>
   d9ece:	29ff      	cmp	r1, #255	; 0xff
   d9ed0:	d008      	beq.n	d9ee4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9ed2:	f7ff ffb9 	bl	d9e48 <pinAvailable>
   d9ed6:	b128      	cbz	r0, d9ee4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9ed8:	4629      	mov	r1, r5
   d9eda:	4620      	mov	r0, r4
}
   d9edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9ee0:	f7fd bf7e 	b.w	d7de0 <HAL_Pin_Mode>
}
   d9ee4:	bd38      	pop	{r3, r4, r5, pc}

000d9ee6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9ee6:	b538      	push	{r3, r4, r5, lr}
   d9ee8:	4604      	mov	r4, r0
   d9eea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9eec:	f7fd ff80 	bl	d7df0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9ef0:	28ff      	cmp	r0, #255	; 0xff
   d9ef2:	d010      	beq.n	d9f16 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9ef4:	2806      	cmp	r0, #6
   d9ef6:	d804      	bhi.n	d9f02 <digitalWrite+0x1c>
   d9ef8:	234d      	movs	r3, #77	; 0x4d
   d9efa:	fa23 f000 	lsr.w	r0, r3, r0
   d9efe:	07c3      	lsls	r3, r0, #31
   d9f00:	d409      	bmi.n	d9f16 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9f02:	4620      	mov	r0, r4
   d9f04:	f7ff ffa0 	bl	d9e48 <pinAvailable>
   d9f08:	b128      	cbz	r0, d9f16 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9f0a:	4629      	mov	r1, r5
   d9f0c:	4620      	mov	r0, r4
}
   d9f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9f12:	f7fd bf75 	b.w	d7e00 <HAL_GPIO_Write>
}
   d9f16:	bd38      	pop	{r3, r4, r5, pc}

000d9f18 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9f18:	b510      	push	{r4, lr}
   d9f1a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9f1c:	f7fd ff68 	bl	d7df0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9f20:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9f22:	b2db      	uxtb	r3, r3
   d9f24:	2b01      	cmp	r3, #1
   d9f26:	d908      	bls.n	d9f3a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9f28:	4620      	mov	r0, r4
   d9f2a:	f7ff ff8d 	bl	d9e48 <pinAvailable>
   d9f2e:	b120      	cbz	r0, d9f3a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9f30:	4620      	mov	r0, r4
}
   d9f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9f36:	f7fd bf6b 	b.w	d7e10 <HAL_GPIO_Read>
}
   d9f3a:	2000      	movs	r0, #0
   d9f3c:	bd10      	pop	{r4, pc}
	...

000d9f40 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9f40:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9f42:	2300      	movs	r3, #0
   d9f44:	2520      	movs	r5, #32
   d9f46:	8043      	strh	r3, [r0, #2]
   d9f48:	2314      	movs	r3, #20
{
   d9f4a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9f4c:	8003      	strh	r3, [r0, #0]
   d9f4e:	6085      	str	r5, [r0, #8]
   d9f50:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f52:	4906      	ldr	r1, [pc, #24]	; (d9f6c <_Z17acquireWireBufferv+0x2c>)
   d9f54:	4628      	mov	r0, r5
   d9f56:	f000 f83c 	bl	d9fd2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f5a:	4904      	ldr	r1, [pc, #16]	; (d9f6c <_Z17acquireWireBufferv+0x2c>)
	};
   d9f5c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f5e:	4628      	mov	r0, r5
   d9f60:	f000 f837 	bl	d9fd2 <_ZnajRKSt9nothrow_t>
	};
   d9f64:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9f66:	4620      	mov	r0, r4
   d9f68:	bd38      	pop	{r3, r4, r5, pc}
   d9f6a:	bf00      	nop
   d9f6c:	000dd4d4 	.word	0x000dd4d4

000d9f70 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9f70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f72:	4d0f      	ldr	r5, [pc, #60]	; (d9fb0 <_Z19__fetch_global_Wirev+0x40>)
   d9f74:	7829      	ldrb	r1, [r5, #0]
   d9f76:	f3bf 8f5b 	dmb	ish
   d9f7a:	f011 0401 	ands.w	r4, r1, #1
{
   d9f7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f80:	d113      	bne.n	d9faa <_Z19__fetch_global_Wirev+0x3a>
   d9f82:	4628      	mov	r0, r5
   d9f84:	f7fa f898 	bl	d40b8 <__cxa_guard_acquire>
   d9f88:	b178      	cbz	r0, d9faa <_Z19__fetch_global_Wirev+0x3a>
   d9f8a:	a801      	add	r0, sp, #4
   d9f8c:	f7ff ffd8 	bl	d9f40 <_Z17acquireWireBufferv>
   d9f90:	aa01      	add	r2, sp, #4
   d9f92:	4621      	mov	r1, r4
   d9f94:	4807      	ldr	r0, [pc, #28]	; (d9fb4 <_Z19__fetch_global_Wirev+0x44>)
   d9f96:	f7fe fecd 	bl	d8d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9f9a:	4628      	mov	r0, r5
   d9f9c:	f7fa f891 	bl	d40c2 <__cxa_guard_release>
   d9fa0:	4a05      	ldr	r2, [pc, #20]	; (d9fb8 <_Z19__fetch_global_Wirev+0x48>)
   d9fa2:	4906      	ldr	r1, [pc, #24]	; (d9fbc <_Z19__fetch_global_Wirev+0x4c>)
   d9fa4:	4803      	ldr	r0, [pc, #12]	; (d9fb4 <_Z19__fetch_global_Wirev+0x44>)
   d9fa6:	f000 f80b 	bl	d9fc0 <__aeabi_atexit>
	return wire;
}
   d9faa:	4802      	ldr	r0, [pc, #8]	; (d9fb4 <_Z19__fetch_global_Wirev+0x44>)
   d9fac:	b007      	add	sp, #28
   d9fae:	bd30      	pop	{r4, r5, pc}
   d9fb0:	2003e7a4 	.word	0x2003e7a4
   d9fb4:	2003e7a8 	.word	0x2003e7a8
   d9fb8:	2003e1f8 	.word	0x2003e1f8
   d9fbc:	000d8cdd 	.word	0x000d8cdd

000d9fc0 <__aeabi_atexit>:
   d9fc0:	460b      	mov	r3, r1
   d9fc2:	4601      	mov	r1, r0
   d9fc4:	4618      	mov	r0, r3
   d9fc6:	f000 bed3 	b.w	dad70 <__cxa_atexit>

000d9fca <_ZdlPvj>:
   d9fca:	f7fa b868 	b.w	d409e <_ZdlPv>

000d9fce <_ZnwjRKSt9nothrow_t>:
   d9fce:	f7fa b862 	b.w	d4096 <_Znwj>

000d9fd2 <_ZnajRKSt9nothrow_t>:
   d9fd2:	f7fa b862 	b.w	d409a <_Znaj>

000d9fd6 <_ZSt25__throw_bad_function_callv>:
   d9fd6:	b508      	push	{r3, lr}
   d9fd8:	f7fe f9f4 	bl	d83c4 <abort>

000d9fdc <__aeabi_drsub>:
   d9fdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9fe0:	e002      	b.n	d9fe8 <__adddf3>
   d9fe2:	bf00      	nop

000d9fe4 <__aeabi_dsub>:
   d9fe4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9fe8 <__adddf3>:
   d9fe8:	b530      	push	{r4, r5, lr}
   d9fea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9fee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9ff2:	ea94 0f05 	teq	r4, r5
   d9ff6:	bf08      	it	eq
   d9ff8:	ea90 0f02 	teqeq	r0, r2
   d9ffc:	bf1f      	itttt	ne
   d9ffe:	ea54 0c00 	orrsne.w	ip, r4, r0
   da002:	ea55 0c02 	orrsne.w	ip, r5, r2
   da006:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da00a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da00e:	f000 80e2 	beq.w	da1d6 <__adddf3+0x1ee>
   da012:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da016:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da01a:	bfb8      	it	lt
   da01c:	426d      	neglt	r5, r5
   da01e:	dd0c      	ble.n	da03a <__adddf3+0x52>
   da020:	442c      	add	r4, r5
   da022:	ea80 0202 	eor.w	r2, r0, r2
   da026:	ea81 0303 	eor.w	r3, r1, r3
   da02a:	ea82 0000 	eor.w	r0, r2, r0
   da02e:	ea83 0101 	eor.w	r1, r3, r1
   da032:	ea80 0202 	eor.w	r2, r0, r2
   da036:	ea81 0303 	eor.w	r3, r1, r3
   da03a:	2d36      	cmp	r5, #54	; 0x36
   da03c:	bf88      	it	hi
   da03e:	bd30      	pophi	{r4, r5, pc}
   da040:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da044:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da048:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da04c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da050:	d002      	beq.n	da058 <__adddf3+0x70>
   da052:	4240      	negs	r0, r0
   da054:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da058:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da05c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da060:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da064:	d002      	beq.n	da06c <__adddf3+0x84>
   da066:	4252      	negs	r2, r2
   da068:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da06c:	ea94 0f05 	teq	r4, r5
   da070:	f000 80a7 	beq.w	da1c2 <__adddf3+0x1da>
   da074:	f1a4 0401 	sub.w	r4, r4, #1
   da078:	f1d5 0e20 	rsbs	lr, r5, #32
   da07c:	db0d      	blt.n	da09a <__adddf3+0xb2>
   da07e:	fa02 fc0e 	lsl.w	ip, r2, lr
   da082:	fa22 f205 	lsr.w	r2, r2, r5
   da086:	1880      	adds	r0, r0, r2
   da088:	f141 0100 	adc.w	r1, r1, #0
   da08c:	fa03 f20e 	lsl.w	r2, r3, lr
   da090:	1880      	adds	r0, r0, r2
   da092:	fa43 f305 	asr.w	r3, r3, r5
   da096:	4159      	adcs	r1, r3
   da098:	e00e      	b.n	da0b8 <__adddf3+0xd0>
   da09a:	f1a5 0520 	sub.w	r5, r5, #32
   da09e:	f10e 0e20 	add.w	lr, lr, #32
   da0a2:	2a01      	cmp	r2, #1
   da0a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   da0a8:	bf28      	it	cs
   da0aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   da0ae:	fa43 f305 	asr.w	r3, r3, r5
   da0b2:	18c0      	adds	r0, r0, r3
   da0b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da0b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da0bc:	d507      	bpl.n	da0ce <__adddf3+0xe6>
   da0be:	f04f 0e00 	mov.w	lr, #0
   da0c2:	f1dc 0c00 	rsbs	ip, ip, #0
   da0c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   da0ca:	eb6e 0101 	sbc.w	r1, lr, r1
   da0ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da0d2:	d31b      	bcc.n	da10c <__adddf3+0x124>
   da0d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da0d8:	d30c      	bcc.n	da0f4 <__adddf3+0x10c>
   da0da:	0849      	lsrs	r1, r1, #1
   da0dc:	ea5f 0030 	movs.w	r0, r0, rrx
   da0e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da0e4:	f104 0401 	add.w	r4, r4, #1
   da0e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da0ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da0f0:	f080 809a 	bcs.w	da228 <__adddf3+0x240>
   da0f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da0f8:	bf08      	it	eq
   da0fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da0fe:	f150 0000 	adcs.w	r0, r0, #0
   da102:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da106:	ea41 0105 	orr.w	r1, r1, r5
   da10a:	bd30      	pop	{r4, r5, pc}
   da10c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da110:	4140      	adcs	r0, r0
   da112:	eb41 0101 	adc.w	r1, r1, r1
   da116:	3c01      	subs	r4, #1
   da118:	bf28      	it	cs
   da11a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da11e:	d2e9      	bcs.n	da0f4 <__adddf3+0x10c>
   da120:	f091 0f00 	teq	r1, #0
   da124:	bf04      	itt	eq
   da126:	4601      	moveq	r1, r0
   da128:	2000      	moveq	r0, #0
   da12a:	fab1 f381 	clz	r3, r1
   da12e:	bf08      	it	eq
   da130:	3320      	addeq	r3, #32
   da132:	f1a3 030b 	sub.w	r3, r3, #11
   da136:	f1b3 0220 	subs.w	r2, r3, #32
   da13a:	da0c      	bge.n	da156 <__adddf3+0x16e>
   da13c:	320c      	adds	r2, #12
   da13e:	dd08      	ble.n	da152 <__adddf3+0x16a>
   da140:	f102 0c14 	add.w	ip, r2, #20
   da144:	f1c2 020c 	rsb	r2, r2, #12
   da148:	fa01 f00c 	lsl.w	r0, r1, ip
   da14c:	fa21 f102 	lsr.w	r1, r1, r2
   da150:	e00c      	b.n	da16c <__adddf3+0x184>
   da152:	f102 0214 	add.w	r2, r2, #20
   da156:	bfd8      	it	le
   da158:	f1c2 0c20 	rsble	ip, r2, #32
   da15c:	fa01 f102 	lsl.w	r1, r1, r2
   da160:	fa20 fc0c 	lsr.w	ip, r0, ip
   da164:	bfdc      	itt	le
   da166:	ea41 010c 	orrle.w	r1, r1, ip
   da16a:	4090      	lslle	r0, r2
   da16c:	1ae4      	subs	r4, r4, r3
   da16e:	bfa2      	ittt	ge
   da170:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da174:	4329      	orrge	r1, r5
   da176:	bd30      	popge	{r4, r5, pc}
   da178:	ea6f 0404 	mvn.w	r4, r4
   da17c:	3c1f      	subs	r4, #31
   da17e:	da1c      	bge.n	da1ba <__adddf3+0x1d2>
   da180:	340c      	adds	r4, #12
   da182:	dc0e      	bgt.n	da1a2 <__adddf3+0x1ba>
   da184:	f104 0414 	add.w	r4, r4, #20
   da188:	f1c4 0220 	rsb	r2, r4, #32
   da18c:	fa20 f004 	lsr.w	r0, r0, r4
   da190:	fa01 f302 	lsl.w	r3, r1, r2
   da194:	ea40 0003 	orr.w	r0, r0, r3
   da198:	fa21 f304 	lsr.w	r3, r1, r4
   da19c:	ea45 0103 	orr.w	r1, r5, r3
   da1a0:	bd30      	pop	{r4, r5, pc}
   da1a2:	f1c4 040c 	rsb	r4, r4, #12
   da1a6:	f1c4 0220 	rsb	r2, r4, #32
   da1aa:	fa20 f002 	lsr.w	r0, r0, r2
   da1ae:	fa01 f304 	lsl.w	r3, r1, r4
   da1b2:	ea40 0003 	orr.w	r0, r0, r3
   da1b6:	4629      	mov	r1, r5
   da1b8:	bd30      	pop	{r4, r5, pc}
   da1ba:	fa21 f004 	lsr.w	r0, r1, r4
   da1be:	4629      	mov	r1, r5
   da1c0:	bd30      	pop	{r4, r5, pc}
   da1c2:	f094 0f00 	teq	r4, #0
   da1c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da1ca:	bf06      	itte	eq
   da1cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da1d0:	3401      	addeq	r4, #1
   da1d2:	3d01      	subne	r5, #1
   da1d4:	e74e      	b.n	da074 <__adddf3+0x8c>
   da1d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da1da:	bf18      	it	ne
   da1dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da1e0:	d029      	beq.n	da236 <__adddf3+0x24e>
   da1e2:	ea94 0f05 	teq	r4, r5
   da1e6:	bf08      	it	eq
   da1e8:	ea90 0f02 	teqeq	r0, r2
   da1ec:	d005      	beq.n	da1fa <__adddf3+0x212>
   da1ee:	ea54 0c00 	orrs.w	ip, r4, r0
   da1f2:	bf04      	itt	eq
   da1f4:	4619      	moveq	r1, r3
   da1f6:	4610      	moveq	r0, r2
   da1f8:	bd30      	pop	{r4, r5, pc}
   da1fa:	ea91 0f03 	teq	r1, r3
   da1fe:	bf1e      	ittt	ne
   da200:	2100      	movne	r1, #0
   da202:	2000      	movne	r0, #0
   da204:	bd30      	popne	{r4, r5, pc}
   da206:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da20a:	d105      	bne.n	da218 <__adddf3+0x230>
   da20c:	0040      	lsls	r0, r0, #1
   da20e:	4149      	adcs	r1, r1
   da210:	bf28      	it	cs
   da212:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da216:	bd30      	pop	{r4, r5, pc}
   da218:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da21c:	bf3c      	itt	cc
   da21e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da222:	bd30      	popcc	{r4, r5, pc}
   da224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da228:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da22c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da230:	f04f 0000 	mov.w	r0, #0
   da234:	bd30      	pop	{r4, r5, pc}
   da236:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da23a:	bf1a      	itte	ne
   da23c:	4619      	movne	r1, r3
   da23e:	4610      	movne	r0, r2
   da240:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da244:	bf1c      	itt	ne
   da246:	460b      	movne	r3, r1
   da248:	4602      	movne	r2, r0
   da24a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da24e:	bf06      	itte	eq
   da250:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da254:	ea91 0f03 	teqeq	r1, r3
   da258:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da25c:	bd30      	pop	{r4, r5, pc}
   da25e:	bf00      	nop

000da260 <__aeabi_ui2d>:
   da260:	f090 0f00 	teq	r0, #0
   da264:	bf04      	itt	eq
   da266:	2100      	moveq	r1, #0
   da268:	4770      	bxeq	lr
   da26a:	b530      	push	{r4, r5, lr}
   da26c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da274:	f04f 0500 	mov.w	r5, #0
   da278:	f04f 0100 	mov.w	r1, #0
   da27c:	e750      	b.n	da120 <__adddf3+0x138>
   da27e:	bf00      	nop

000da280 <__aeabi_i2d>:
   da280:	f090 0f00 	teq	r0, #0
   da284:	bf04      	itt	eq
   da286:	2100      	moveq	r1, #0
   da288:	4770      	bxeq	lr
   da28a:	b530      	push	{r4, r5, lr}
   da28c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da290:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da294:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da298:	bf48      	it	mi
   da29a:	4240      	negmi	r0, r0
   da29c:	f04f 0100 	mov.w	r1, #0
   da2a0:	e73e      	b.n	da120 <__adddf3+0x138>
   da2a2:	bf00      	nop

000da2a4 <__aeabi_f2d>:
   da2a4:	0042      	lsls	r2, r0, #1
   da2a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da2aa:	ea4f 0131 	mov.w	r1, r1, rrx
   da2ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da2b2:	bf1f      	itttt	ne
   da2b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da2b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da2bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da2c0:	4770      	bxne	lr
   da2c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da2c6:	bf08      	it	eq
   da2c8:	4770      	bxeq	lr
   da2ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da2ce:	bf04      	itt	eq
   da2d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da2d4:	4770      	bxeq	lr
   da2d6:	b530      	push	{r4, r5, lr}
   da2d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   da2dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da2e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da2e4:	e71c      	b.n	da120 <__adddf3+0x138>
   da2e6:	bf00      	nop

000da2e8 <__aeabi_ul2d>:
   da2e8:	ea50 0201 	orrs.w	r2, r0, r1
   da2ec:	bf08      	it	eq
   da2ee:	4770      	bxeq	lr
   da2f0:	b530      	push	{r4, r5, lr}
   da2f2:	f04f 0500 	mov.w	r5, #0
   da2f6:	e00a      	b.n	da30e <__aeabi_l2d+0x16>

000da2f8 <__aeabi_l2d>:
   da2f8:	ea50 0201 	orrs.w	r2, r0, r1
   da2fc:	bf08      	it	eq
   da2fe:	4770      	bxeq	lr
   da300:	b530      	push	{r4, r5, lr}
   da302:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da306:	d502      	bpl.n	da30e <__aeabi_l2d+0x16>
   da308:	4240      	negs	r0, r0
   da30a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da30e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da312:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da316:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da31a:	f43f aed8 	beq.w	da0ce <__adddf3+0xe6>
   da31e:	f04f 0203 	mov.w	r2, #3
   da322:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da326:	bf18      	it	ne
   da328:	3203      	addne	r2, #3
   da32a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da32e:	bf18      	it	ne
   da330:	3203      	addne	r2, #3
   da332:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da336:	f1c2 0320 	rsb	r3, r2, #32
   da33a:	fa00 fc03 	lsl.w	ip, r0, r3
   da33e:	fa20 f002 	lsr.w	r0, r0, r2
   da342:	fa01 fe03 	lsl.w	lr, r1, r3
   da346:	ea40 000e 	orr.w	r0, r0, lr
   da34a:	fa21 f102 	lsr.w	r1, r1, r2
   da34e:	4414      	add	r4, r2
   da350:	e6bd      	b.n	da0ce <__adddf3+0xe6>
   da352:	bf00      	nop

000da354 <__aeabi_dmul>:
   da354:	b570      	push	{r4, r5, r6, lr}
   da356:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da35a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da35e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da362:	bf1d      	ittte	ne
   da364:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da368:	ea94 0f0c 	teqne	r4, ip
   da36c:	ea95 0f0c 	teqne	r5, ip
   da370:	f000 f8de 	bleq	da530 <__aeabi_dmul+0x1dc>
   da374:	442c      	add	r4, r5
   da376:	ea81 0603 	eor.w	r6, r1, r3
   da37a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da37e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da382:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da386:	bf18      	it	ne
   da388:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da38c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da394:	d038      	beq.n	da408 <__aeabi_dmul+0xb4>
   da396:	fba0 ce02 	umull	ip, lr, r0, r2
   da39a:	f04f 0500 	mov.w	r5, #0
   da39e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da3a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da3a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   da3aa:	f04f 0600 	mov.w	r6, #0
   da3ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   da3b2:	f09c 0f00 	teq	ip, #0
   da3b6:	bf18      	it	ne
   da3b8:	f04e 0e01 	orrne.w	lr, lr, #1
   da3bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da3c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da3c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da3c8:	d204      	bcs.n	da3d4 <__aeabi_dmul+0x80>
   da3ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da3ce:	416d      	adcs	r5, r5
   da3d0:	eb46 0606 	adc.w	r6, r6, r6
   da3d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da3d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da3dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da3e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da3e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da3e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da3ec:	bf88      	it	hi
   da3ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da3f2:	d81e      	bhi.n	da432 <__aeabi_dmul+0xde>
   da3f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da3f8:	bf08      	it	eq
   da3fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da3fe:	f150 0000 	adcs.w	r0, r0, #0
   da402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da406:	bd70      	pop	{r4, r5, r6, pc}
   da408:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da40c:	ea46 0101 	orr.w	r1, r6, r1
   da410:	ea40 0002 	orr.w	r0, r0, r2
   da414:	ea81 0103 	eor.w	r1, r1, r3
   da418:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da41c:	bfc2      	ittt	gt
   da41e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da422:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da426:	bd70      	popgt	{r4, r5, r6, pc}
   da428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da42c:	f04f 0e00 	mov.w	lr, #0
   da430:	3c01      	subs	r4, #1
   da432:	f300 80ab 	bgt.w	da58c <__aeabi_dmul+0x238>
   da436:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da43a:	bfde      	ittt	le
   da43c:	2000      	movle	r0, #0
   da43e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da442:	bd70      	pople	{r4, r5, r6, pc}
   da444:	f1c4 0400 	rsb	r4, r4, #0
   da448:	3c20      	subs	r4, #32
   da44a:	da35      	bge.n	da4b8 <__aeabi_dmul+0x164>
   da44c:	340c      	adds	r4, #12
   da44e:	dc1b      	bgt.n	da488 <__aeabi_dmul+0x134>
   da450:	f104 0414 	add.w	r4, r4, #20
   da454:	f1c4 0520 	rsb	r5, r4, #32
   da458:	fa00 f305 	lsl.w	r3, r0, r5
   da45c:	fa20 f004 	lsr.w	r0, r0, r4
   da460:	fa01 f205 	lsl.w	r2, r1, r5
   da464:	ea40 0002 	orr.w	r0, r0, r2
   da468:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da46c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da470:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da474:	fa21 f604 	lsr.w	r6, r1, r4
   da478:	eb42 0106 	adc.w	r1, r2, r6
   da47c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da480:	bf08      	it	eq
   da482:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da486:	bd70      	pop	{r4, r5, r6, pc}
   da488:	f1c4 040c 	rsb	r4, r4, #12
   da48c:	f1c4 0520 	rsb	r5, r4, #32
   da490:	fa00 f304 	lsl.w	r3, r0, r4
   da494:	fa20 f005 	lsr.w	r0, r0, r5
   da498:	fa01 f204 	lsl.w	r2, r1, r4
   da49c:	ea40 0002 	orr.w	r0, r0, r2
   da4a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da4a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da4a8:	f141 0100 	adc.w	r1, r1, #0
   da4ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da4b0:	bf08      	it	eq
   da4b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da4b6:	bd70      	pop	{r4, r5, r6, pc}
   da4b8:	f1c4 0520 	rsb	r5, r4, #32
   da4bc:	fa00 f205 	lsl.w	r2, r0, r5
   da4c0:	ea4e 0e02 	orr.w	lr, lr, r2
   da4c4:	fa20 f304 	lsr.w	r3, r0, r4
   da4c8:	fa01 f205 	lsl.w	r2, r1, r5
   da4cc:	ea43 0302 	orr.w	r3, r3, r2
   da4d0:	fa21 f004 	lsr.w	r0, r1, r4
   da4d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da4d8:	fa21 f204 	lsr.w	r2, r1, r4
   da4dc:	ea20 0002 	bic.w	r0, r0, r2
   da4e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da4e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da4e8:	bf08      	it	eq
   da4ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da4ee:	bd70      	pop	{r4, r5, r6, pc}
   da4f0:	f094 0f00 	teq	r4, #0
   da4f4:	d10f      	bne.n	da516 <__aeabi_dmul+0x1c2>
   da4f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da4fa:	0040      	lsls	r0, r0, #1
   da4fc:	eb41 0101 	adc.w	r1, r1, r1
   da500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da504:	bf08      	it	eq
   da506:	3c01      	subeq	r4, #1
   da508:	d0f7      	beq.n	da4fa <__aeabi_dmul+0x1a6>
   da50a:	ea41 0106 	orr.w	r1, r1, r6
   da50e:	f095 0f00 	teq	r5, #0
   da512:	bf18      	it	ne
   da514:	4770      	bxne	lr
   da516:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da51a:	0052      	lsls	r2, r2, #1
   da51c:	eb43 0303 	adc.w	r3, r3, r3
   da520:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da524:	bf08      	it	eq
   da526:	3d01      	subeq	r5, #1
   da528:	d0f7      	beq.n	da51a <__aeabi_dmul+0x1c6>
   da52a:	ea43 0306 	orr.w	r3, r3, r6
   da52e:	4770      	bx	lr
   da530:	ea94 0f0c 	teq	r4, ip
   da534:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da538:	bf18      	it	ne
   da53a:	ea95 0f0c 	teqne	r5, ip
   da53e:	d00c      	beq.n	da55a <__aeabi_dmul+0x206>
   da540:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da544:	bf18      	it	ne
   da546:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da54a:	d1d1      	bne.n	da4f0 <__aeabi_dmul+0x19c>
   da54c:	ea81 0103 	eor.w	r1, r1, r3
   da550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da554:	f04f 0000 	mov.w	r0, #0
   da558:	bd70      	pop	{r4, r5, r6, pc}
   da55a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da55e:	bf06      	itte	eq
   da560:	4610      	moveq	r0, r2
   da562:	4619      	moveq	r1, r3
   da564:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da568:	d019      	beq.n	da59e <__aeabi_dmul+0x24a>
   da56a:	ea94 0f0c 	teq	r4, ip
   da56e:	d102      	bne.n	da576 <__aeabi_dmul+0x222>
   da570:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da574:	d113      	bne.n	da59e <__aeabi_dmul+0x24a>
   da576:	ea95 0f0c 	teq	r5, ip
   da57a:	d105      	bne.n	da588 <__aeabi_dmul+0x234>
   da57c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da580:	bf1c      	itt	ne
   da582:	4610      	movne	r0, r2
   da584:	4619      	movne	r1, r3
   da586:	d10a      	bne.n	da59e <__aeabi_dmul+0x24a>
   da588:	ea81 0103 	eor.w	r1, r1, r3
   da58c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da590:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da594:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da598:	f04f 0000 	mov.w	r0, #0
   da59c:	bd70      	pop	{r4, r5, r6, pc}
   da59e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da5a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da5a6:	bd70      	pop	{r4, r5, r6, pc}

000da5a8 <__aeabi_ddiv>:
   da5a8:	b570      	push	{r4, r5, r6, lr}
   da5aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da5ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da5b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da5b6:	bf1d      	ittte	ne
   da5b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da5bc:	ea94 0f0c 	teqne	r4, ip
   da5c0:	ea95 0f0c 	teqne	r5, ip
   da5c4:	f000 f8a7 	bleq	da716 <__aeabi_ddiv+0x16e>
   da5c8:	eba4 0405 	sub.w	r4, r4, r5
   da5cc:	ea81 0e03 	eor.w	lr, r1, r3
   da5d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da5d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da5d8:	f000 8088 	beq.w	da6ec <__aeabi_ddiv+0x144>
   da5dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da5e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da5e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da5e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da5ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da5f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da5f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da5f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da5fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da600:	429d      	cmp	r5, r3
   da602:	bf08      	it	eq
   da604:	4296      	cmpeq	r6, r2
   da606:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da60a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da60e:	d202      	bcs.n	da616 <__aeabi_ddiv+0x6e>
   da610:	085b      	lsrs	r3, r3, #1
   da612:	ea4f 0232 	mov.w	r2, r2, rrx
   da616:	1ab6      	subs	r6, r6, r2
   da618:	eb65 0503 	sbc.w	r5, r5, r3
   da61c:	085b      	lsrs	r3, r3, #1
   da61e:	ea4f 0232 	mov.w	r2, r2, rrx
   da622:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da626:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da62a:	ebb6 0e02 	subs.w	lr, r6, r2
   da62e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da632:	bf22      	ittt	cs
   da634:	1ab6      	subcs	r6, r6, r2
   da636:	4675      	movcs	r5, lr
   da638:	ea40 000c 	orrcs.w	r0, r0, ip
   da63c:	085b      	lsrs	r3, r3, #1
   da63e:	ea4f 0232 	mov.w	r2, r2, rrx
   da642:	ebb6 0e02 	subs.w	lr, r6, r2
   da646:	eb75 0e03 	sbcs.w	lr, r5, r3
   da64a:	bf22      	ittt	cs
   da64c:	1ab6      	subcs	r6, r6, r2
   da64e:	4675      	movcs	r5, lr
   da650:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da654:	085b      	lsrs	r3, r3, #1
   da656:	ea4f 0232 	mov.w	r2, r2, rrx
   da65a:	ebb6 0e02 	subs.w	lr, r6, r2
   da65e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da662:	bf22      	ittt	cs
   da664:	1ab6      	subcs	r6, r6, r2
   da666:	4675      	movcs	r5, lr
   da668:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da66c:	085b      	lsrs	r3, r3, #1
   da66e:	ea4f 0232 	mov.w	r2, r2, rrx
   da672:	ebb6 0e02 	subs.w	lr, r6, r2
   da676:	eb75 0e03 	sbcs.w	lr, r5, r3
   da67a:	bf22      	ittt	cs
   da67c:	1ab6      	subcs	r6, r6, r2
   da67e:	4675      	movcs	r5, lr
   da680:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da684:	ea55 0e06 	orrs.w	lr, r5, r6
   da688:	d018      	beq.n	da6bc <__aeabi_ddiv+0x114>
   da68a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da68e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da692:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da696:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da69a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da69e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da6a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da6a6:	d1c0      	bne.n	da62a <__aeabi_ddiv+0x82>
   da6a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da6ac:	d10b      	bne.n	da6c6 <__aeabi_ddiv+0x11e>
   da6ae:	ea41 0100 	orr.w	r1, r1, r0
   da6b2:	f04f 0000 	mov.w	r0, #0
   da6b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da6ba:	e7b6      	b.n	da62a <__aeabi_ddiv+0x82>
   da6bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da6c0:	bf04      	itt	eq
   da6c2:	4301      	orreq	r1, r0
   da6c4:	2000      	moveq	r0, #0
   da6c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da6ca:	bf88      	it	hi
   da6cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da6d0:	f63f aeaf 	bhi.w	da432 <__aeabi_dmul+0xde>
   da6d4:	ebb5 0c03 	subs.w	ip, r5, r3
   da6d8:	bf04      	itt	eq
   da6da:	ebb6 0c02 	subseq.w	ip, r6, r2
   da6de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da6e2:	f150 0000 	adcs.w	r0, r0, #0
   da6e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da6ea:	bd70      	pop	{r4, r5, r6, pc}
   da6ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da6f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da6f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da6f8:	bfc2      	ittt	gt
   da6fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   da6fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da702:	bd70      	popgt	{r4, r5, r6, pc}
   da704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da708:	f04f 0e00 	mov.w	lr, #0
   da70c:	3c01      	subs	r4, #1
   da70e:	e690      	b.n	da432 <__aeabi_dmul+0xde>
   da710:	ea45 0e06 	orr.w	lr, r5, r6
   da714:	e68d      	b.n	da432 <__aeabi_dmul+0xde>
   da716:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da71a:	ea94 0f0c 	teq	r4, ip
   da71e:	bf08      	it	eq
   da720:	ea95 0f0c 	teqeq	r5, ip
   da724:	f43f af3b 	beq.w	da59e <__aeabi_dmul+0x24a>
   da728:	ea94 0f0c 	teq	r4, ip
   da72c:	d10a      	bne.n	da744 <__aeabi_ddiv+0x19c>
   da72e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da732:	f47f af34 	bne.w	da59e <__aeabi_dmul+0x24a>
   da736:	ea95 0f0c 	teq	r5, ip
   da73a:	f47f af25 	bne.w	da588 <__aeabi_dmul+0x234>
   da73e:	4610      	mov	r0, r2
   da740:	4619      	mov	r1, r3
   da742:	e72c      	b.n	da59e <__aeabi_dmul+0x24a>
   da744:	ea95 0f0c 	teq	r5, ip
   da748:	d106      	bne.n	da758 <__aeabi_ddiv+0x1b0>
   da74a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da74e:	f43f aefd 	beq.w	da54c <__aeabi_dmul+0x1f8>
   da752:	4610      	mov	r0, r2
   da754:	4619      	mov	r1, r3
   da756:	e722      	b.n	da59e <__aeabi_dmul+0x24a>
   da758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da75c:	bf18      	it	ne
   da75e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da762:	f47f aec5 	bne.w	da4f0 <__aeabi_dmul+0x19c>
   da766:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da76a:	f47f af0d 	bne.w	da588 <__aeabi_dmul+0x234>
   da76e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da772:	f47f aeeb 	bne.w	da54c <__aeabi_dmul+0x1f8>
   da776:	e712      	b.n	da59e <__aeabi_dmul+0x24a>

000da778 <__gedf2>:
   da778:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da77c:	e006      	b.n	da78c <__cmpdf2+0x4>
   da77e:	bf00      	nop

000da780 <__ledf2>:
   da780:	f04f 0c01 	mov.w	ip, #1
   da784:	e002      	b.n	da78c <__cmpdf2+0x4>
   da786:	bf00      	nop

000da788 <__cmpdf2>:
   da788:	f04f 0c01 	mov.w	ip, #1
   da78c:	f84d cd04 	str.w	ip, [sp, #-4]!
   da790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da79c:	bf18      	it	ne
   da79e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da7a2:	d01b      	beq.n	da7dc <__cmpdf2+0x54>
   da7a4:	b001      	add	sp, #4
   da7a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da7aa:	bf0c      	ite	eq
   da7ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da7b0:	ea91 0f03 	teqne	r1, r3
   da7b4:	bf02      	ittt	eq
   da7b6:	ea90 0f02 	teqeq	r0, r2
   da7ba:	2000      	moveq	r0, #0
   da7bc:	4770      	bxeq	lr
   da7be:	f110 0f00 	cmn.w	r0, #0
   da7c2:	ea91 0f03 	teq	r1, r3
   da7c6:	bf58      	it	pl
   da7c8:	4299      	cmppl	r1, r3
   da7ca:	bf08      	it	eq
   da7cc:	4290      	cmpeq	r0, r2
   da7ce:	bf2c      	ite	cs
   da7d0:	17d8      	asrcs	r0, r3, #31
   da7d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da7d6:	f040 0001 	orr.w	r0, r0, #1
   da7da:	4770      	bx	lr
   da7dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da7e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7e4:	d102      	bne.n	da7ec <__cmpdf2+0x64>
   da7e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da7ea:	d107      	bne.n	da7fc <__cmpdf2+0x74>
   da7ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da7f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7f4:	d1d6      	bne.n	da7a4 <__cmpdf2+0x1c>
   da7f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da7fa:	d0d3      	beq.n	da7a4 <__cmpdf2+0x1c>
   da7fc:	f85d 0b04 	ldr.w	r0, [sp], #4
   da800:	4770      	bx	lr
   da802:	bf00      	nop

000da804 <__aeabi_cdrcmple>:
   da804:	4684      	mov	ip, r0
   da806:	4610      	mov	r0, r2
   da808:	4662      	mov	r2, ip
   da80a:	468c      	mov	ip, r1
   da80c:	4619      	mov	r1, r3
   da80e:	4663      	mov	r3, ip
   da810:	e000      	b.n	da814 <__aeabi_cdcmpeq>
   da812:	bf00      	nop

000da814 <__aeabi_cdcmpeq>:
   da814:	b501      	push	{r0, lr}
   da816:	f7ff ffb7 	bl	da788 <__cmpdf2>
   da81a:	2800      	cmp	r0, #0
   da81c:	bf48      	it	mi
   da81e:	f110 0f00 	cmnmi.w	r0, #0
   da822:	bd01      	pop	{r0, pc}

000da824 <__aeabi_dcmpeq>:
   da824:	f84d ed08 	str.w	lr, [sp, #-8]!
   da828:	f7ff fff4 	bl	da814 <__aeabi_cdcmpeq>
   da82c:	bf0c      	ite	eq
   da82e:	2001      	moveq	r0, #1
   da830:	2000      	movne	r0, #0
   da832:	f85d fb08 	ldr.w	pc, [sp], #8
   da836:	bf00      	nop

000da838 <__aeabi_dcmplt>:
   da838:	f84d ed08 	str.w	lr, [sp, #-8]!
   da83c:	f7ff ffea 	bl	da814 <__aeabi_cdcmpeq>
   da840:	bf34      	ite	cc
   da842:	2001      	movcc	r0, #1
   da844:	2000      	movcs	r0, #0
   da846:	f85d fb08 	ldr.w	pc, [sp], #8
   da84a:	bf00      	nop

000da84c <__aeabi_dcmple>:
   da84c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da850:	f7ff ffe0 	bl	da814 <__aeabi_cdcmpeq>
   da854:	bf94      	ite	ls
   da856:	2001      	movls	r0, #1
   da858:	2000      	movhi	r0, #0
   da85a:	f85d fb08 	ldr.w	pc, [sp], #8
   da85e:	bf00      	nop

000da860 <__aeabi_dcmpge>:
   da860:	f84d ed08 	str.w	lr, [sp, #-8]!
   da864:	f7ff ffce 	bl	da804 <__aeabi_cdrcmple>
   da868:	bf94      	ite	ls
   da86a:	2001      	movls	r0, #1
   da86c:	2000      	movhi	r0, #0
   da86e:	f85d fb08 	ldr.w	pc, [sp], #8
   da872:	bf00      	nop

000da874 <__aeabi_dcmpgt>:
   da874:	f84d ed08 	str.w	lr, [sp, #-8]!
   da878:	f7ff ffc4 	bl	da804 <__aeabi_cdrcmple>
   da87c:	bf34      	ite	cc
   da87e:	2001      	movcc	r0, #1
   da880:	2000      	movcs	r0, #0
   da882:	f85d fb08 	ldr.w	pc, [sp], #8
   da886:	bf00      	nop

000da888 <__aeabi_dcmpun>:
   da888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da88c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da890:	d102      	bne.n	da898 <__aeabi_dcmpun+0x10>
   da892:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da896:	d10a      	bne.n	da8ae <__aeabi_dcmpun+0x26>
   da898:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da89c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da8a0:	d102      	bne.n	da8a8 <__aeabi_dcmpun+0x20>
   da8a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da8a6:	d102      	bne.n	da8ae <__aeabi_dcmpun+0x26>
   da8a8:	f04f 0000 	mov.w	r0, #0
   da8ac:	4770      	bx	lr
   da8ae:	f04f 0001 	mov.w	r0, #1
   da8b2:	4770      	bx	lr

000da8b4 <__aeabi_d2iz>:
   da8b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da8b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da8bc:	d215      	bcs.n	da8ea <__aeabi_d2iz+0x36>
   da8be:	d511      	bpl.n	da8e4 <__aeabi_d2iz+0x30>
   da8c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da8c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da8c8:	d912      	bls.n	da8f0 <__aeabi_d2iz+0x3c>
   da8ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da8ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da8d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da8d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da8da:	fa23 f002 	lsr.w	r0, r3, r2
   da8de:	bf18      	it	ne
   da8e0:	4240      	negne	r0, r0
   da8e2:	4770      	bx	lr
   da8e4:	f04f 0000 	mov.w	r0, #0
   da8e8:	4770      	bx	lr
   da8ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da8ee:	d105      	bne.n	da8fc <__aeabi_d2iz+0x48>
   da8f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da8f4:	bf08      	it	eq
   da8f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da8fa:	4770      	bx	lr
   da8fc:	f04f 0000 	mov.w	r0, #0
   da900:	4770      	bx	lr
   da902:	bf00      	nop

000da904 <__aeabi_d2uiz>:
   da904:	004a      	lsls	r2, r1, #1
   da906:	d211      	bcs.n	da92c <__aeabi_d2uiz+0x28>
   da908:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da90c:	d211      	bcs.n	da932 <__aeabi_d2uiz+0x2e>
   da90e:	d50d      	bpl.n	da92c <__aeabi_d2uiz+0x28>
   da910:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da914:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da918:	d40e      	bmi.n	da938 <__aeabi_d2uiz+0x34>
   da91a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da91e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da922:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da926:	fa23 f002 	lsr.w	r0, r3, r2
   da92a:	4770      	bx	lr
   da92c:	f04f 0000 	mov.w	r0, #0
   da930:	4770      	bx	lr
   da932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da936:	d102      	bne.n	da93e <__aeabi_d2uiz+0x3a>
   da938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da93c:	4770      	bx	lr
   da93e:	f04f 0000 	mov.w	r0, #0
   da942:	4770      	bx	lr

000da944 <__aeabi_d2f>:
   da944:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da94c:	bf24      	itt	cs
   da94e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da956:	d90d      	bls.n	da974 <__aeabi_d2f+0x30>
   da958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da95c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da96c:	bf08      	it	eq
   da96e:	f020 0001 	biceq.w	r0, r0, #1
   da972:	4770      	bx	lr
   da974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da978:	d121      	bne.n	da9be <__aeabi_d2f+0x7a>
   da97a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da97e:	bfbc      	itt	lt
   da980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da984:	4770      	bxlt	lr
   da986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da98a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da98e:	f1c2 0218 	rsb	r2, r2, #24
   da992:	f1c2 0c20 	rsb	ip, r2, #32
   da996:	fa10 f30c 	lsls.w	r3, r0, ip
   da99a:	fa20 f002 	lsr.w	r0, r0, r2
   da99e:	bf18      	it	ne
   da9a0:	f040 0001 	orrne.w	r0, r0, #1
   da9a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da9a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da9ac:	fa03 fc0c 	lsl.w	ip, r3, ip
   da9b0:	ea40 000c 	orr.w	r0, r0, ip
   da9b4:	fa23 f302 	lsr.w	r3, r3, r2
   da9b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da9bc:	e7cc      	b.n	da958 <__aeabi_d2f+0x14>
   da9be:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da9c2:	d107      	bne.n	da9d4 <__aeabi_d2f+0x90>
   da9c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da9c8:	bf1e      	ittt	ne
   da9ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da9ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da9d2:	4770      	bxne	lr
   da9d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da9d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da9dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da9e0:	4770      	bx	lr
   da9e2:	bf00      	nop

000da9e4 <__aeabi_f2lz>:
   da9e4:	ee07 0a90 	vmov	s15, r0
   da9e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da9f0:	d401      	bmi.n	da9f6 <__aeabi_f2lz+0x12>
   da9f2:	f000 b80b 	b.w	daa0c <__aeabi_f2ulz>
   da9f6:	eef1 7a67 	vneg.f32	s15, s15
   da9fa:	b508      	push	{r3, lr}
   da9fc:	ee17 0a90 	vmov	r0, s15
   daa00:	f000 f804 	bl	daa0c <__aeabi_f2ulz>
   daa04:	4240      	negs	r0, r0
   daa06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daa0a:	bd08      	pop	{r3, pc}

000daa0c <__aeabi_f2ulz>:
   daa0c:	b5d0      	push	{r4, r6, r7, lr}
   daa0e:	f7ff fc49 	bl	da2a4 <__aeabi_f2d>
   daa12:	4b0c      	ldr	r3, [pc, #48]	; (daa44 <__aeabi_f2ulz+0x38>)
   daa14:	2200      	movs	r2, #0
   daa16:	4606      	mov	r6, r0
   daa18:	460f      	mov	r7, r1
   daa1a:	f7ff fc9b 	bl	da354 <__aeabi_dmul>
   daa1e:	f7ff ff71 	bl	da904 <__aeabi_d2uiz>
   daa22:	4604      	mov	r4, r0
   daa24:	f7ff fc1c 	bl	da260 <__aeabi_ui2d>
   daa28:	4b07      	ldr	r3, [pc, #28]	; (daa48 <__aeabi_f2ulz+0x3c>)
   daa2a:	2200      	movs	r2, #0
   daa2c:	f7ff fc92 	bl	da354 <__aeabi_dmul>
   daa30:	4602      	mov	r2, r0
   daa32:	460b      	mov	r3, r1
   daa34:	4630      	mov	r0, r6
   daa36:	4639      	mov	r1, r7
   daa38:	f7ff fad4 	bl	d9fe4 <__aeabi_dsub>
   daa3c:	f7ff ff62 	bl	da904 <__aeabi_d2uiz>
   daa40:	4621      	mov	r1, r4
   daa42:	bdd0      	pop	{r4, r6, r7, pc}
   daa44:	3df00000 	.word	0x3df00000
   daa48:	41f00000 	.word	0x41f00000

000daa4c <__udivmoddi4>:
   daa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daa50:	9d08      	ldr	r5, [sp, #32]
   daa52:	4604      	mov	r4, r0
   daa54:	468c      	mov	ip, r1
   daa56:	2b00      	cmp	r3, #0
   daa58:	f040 8083 	bne.w	dab62 <__udivmoddi4+0x116>
   daa5c:	428a      	cmp	r2, r1
   daa5e:	4617      	mov	r7, r2
   daa60:	d947      	bls.n	daaf2 <__udivmoddi4+0xa6>
   daa62:	fab2 f282 	clz	r2, r2
   daa66:	b142      	cbz	r2, daa7a <__udivmoddi4+0x2e>
   daa68:	f1c2 0020 	rsb	r0, r2, #32
   daa6c:	fa24 f000 	lsr.w	r0, r4, r0
   daa70:	4091      	lsls	r1, r2
   daa72:	4097      	lsls	r7, r2
   daa74:	ea40 0c01 	orr.w	ip, r0, r1
   daa78:	4094      	lsls	r4, r2
   daa7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   daa7e:	0c23      	lsrs	r3, r4, #16
   daa80:	fbbc f6f8 	udiv	r6, ip, r8
   daa84:	fa1f fe87 	uxth.w	lr, r7
   daa88:	fb08 c116 	mls	r1, r8, r6, ip
   daa8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   daa90:	fb06 f10e 	mul.w	r1, r6, lr
   daa94:	4299      	cmp	r1, r3
   daa96:	d909      	bls.n	daaac <__udivmoddi4+0x60>
   daa98:	18fb      	adds	r3, r7, r3
   daa9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   daa9e:	f080 8119 	bcs.w	dacd4 <__udivmoddi4+0x288>
   daaa2:	4299      	cmp	r1, r3
   daaa4:	f240 8116 	bls.w	dacd4 <__udivmoddi4+0x288>
   daaa8:	3e02      	subs	r6, #2
   daaaa:	443b      	add	r3, r7
   daaac:	1a5b      	subs	r3, r3, r1
   daaae:	b2a4      	uxth	r4, r4
   daab0:	fbb3 f0f8 	udiv	r0, r3, r8
   daab4:	fb08 3310 	mls	r3, r8, r0, r3
   daab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   daabc:	fb00 fe0e 	mul.w	lr, r0, lr
   daac0:	45a6      	cmp	lr, r4
   daac2:	d909      	bls.n	daad8 <__udivmoddi4+0x8c>
   daac4:	193c      	adds	r4, r7, r4
   daac6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   daaca:	f080 8105 	bcs.w	dacd8 <__udivmoddi4+0x28c>
   daace:	45a6      	cmp	lr, r4
   daad0:	f240 8102 	bls.w	dacd8 <__udivmoddi4+0x28c>
   daad4:	3802      	subs	r0, #2
   daad6:	443c      	add	r4, r7
   daad8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   daadc:	eba4 040e 	sub.w	r4, r4, lr
   daae0:	2600      	movs	r6, #0
   daae2:	b11d      	cbz	r5, daaec <__udivmoddi4+0xa0>
   daae4:	40d4      	lsrs	r4, r2
   daae6:	2300      	movs	r3, #0
   daae8:	e9c5 4300 	strd	r4, r3, [r5]
   daaec:	4631      	mov	r1, r6
   daaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daaf2:	b902      	cbnz	r2, daaf6 <__udivmoddi4+0xaa>
   daaf4:	deff      	udf	#255	; 0xff
   daaf6:	fab2 f282 	clz	r2, r2
   daafa:	2a00      	cmp	r2, #0
   daafc:	d150      	bne.n	daba0 <__udivmoddi4+0x154>
   daafe:	1bcb      	subs	r3, r1, r7
   dab00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dab04:	fa1f f887 	uxth.w	r8, r7
   dab08:	2601      	movs	r6, #1
   dab0a:	fbb3 fcfe 	udiv	ip, r3, lr
   dab0e:	0c21      	lsrs	r1, r4, #16
   dab10:	fb0e 331c 	mls	r3, lr, ip, r3
   dab14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dab18:	fb08 f30c 	mul.w	r3, r8, ip
   dab1c:	428b      	cmp	r3, r1
   dab1e:	d907      	bls.n	dab30 <__udivmoddi4+0xe4>
   dab20:	1879      	adds	r1, r7, r1
   dab22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dab26:	d202      	bcs.n	dab2e <__udivmoddi4+0xe2>
   dab28:	428b      	cmp	r3, r1
   dab2a:	f200 80e9 	bhi.w	dad00 <__udivmoddi4+0x2b4>
   dab2e:	4684      	mov	ip, r0
   dab30:	1ac9      	subs	r1, r1, r3
   dab32:	b2a3      	uxth	r3, r4
   dab34:	fbb1 f0fe 	udiv	r0, r1, lr
   dab38:	fb0e 1110 	mls	r1, lr, r0, r1
   dab3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dab40:	fb08 f800 	mul.w	r8, r8, r0
   dab44:	45a0      	cmp	r8, r4
   dab46:	d907      	bls.n	dab58 <__udivmoddi4+0x10c>
   dab48:	193c      	adds	r4, r7, r4
   dab4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dab4e:	d202      	bcs.n	dab56 <__udivmoddi4+0x10a>
   dab50:	45a0      	cmp	r8, r4
   dab52:	f200 80d9 	bhi.w	dad08 <__udivmoddi4+0x2bc>
   dab56:	4618      	mov	r0, r3
   dab58:	eba4 0408 	sub.w	r4, r4, r8
   dab5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dab60:	e7bf      	b.n	daae2 <__udivmoddi4+0x96>
   dab62:	428b      	cmp	r3, r1
   dab64:	d909      	bls.n	dab7a <__udivmoddi4+0x12e>
   dab66:	2d00      	cmp	r5, #0
   dab68:	f000 80b1 	beq.w	dacce <__udivmoddi4+0x282>
   dab6c:	2600      	movs	r6, #0
   dab6e:	e9c5 0100 	strd	r0, r1, [r5]
   dab72:	4630      	mov	r0, r6
   dab74:	4631      	mov	r1, r6
   dab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab7a:	fab3 f683 	clz	r6, r3
   dab7e:	2e00      	cmp	r6, #0
   dab80:	d14a      	bne.n	dac18 <__udivmoddi4+0x1cc>
   dab82:	428b      	cmp	r3, r1
   dab84:	d302      	bcc.n	dab8c <__udivmoddi4+0x140>
   dab86:	4282      	cmp	r2, r0
   dab88:	f200 80b8 	bhi.w	dacfc <__udivmoddi4+0x2b0>
   dab8c:	1a84      	subs	r4, r0, r2
   dab8e:	eb61 0103 	sbc.w	r1, r1, r3
   dab92:	2001      	movs	r0, #1
   dab94:	468c      	mov	ip, r1
   dab96:	2d00      	cmp	r5, #0
   dab98:	d0a8      	beq.n	daaec <__udivmoddi4+0xa0>
   dab9a:	e9c5 4c00 	strd	r4, ip, [r5]
   dab9e:	e7a5      	b.n	daaec <__udivmoddi4+0xa0>
   daba0:	f1c2 0320 	rsb	r3, r2, #32
   daba4:	fa20 f603 	lsr.w	r6, r0, r3
   daba8:	4097      	lsls	r7, r2
   dabaa:	fa01 f002 	lsl.w	r0, r1, r2
   dabae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dabb2:	40d9      	lsrs	r1, r3
   dabb4:	4330      	orrs	r0, r6
   dabb6:	0c03      	lsrs	r3, r0, #16
   dabb8:	fbb1 f6fe 	udiv	r6, r1, lr
   dabbc:	fa1f f887 	uxth.w	r8, r7
   dabc0:	fb0e 1116 	mls	r1, lr, r6, r1
   dabc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dabc8:	fb06 f108 	mul.w	r1, r6, r8
   dabcc:	4299      	cmp	r1, r3
   dabce:	fa04 f402 	lsl.w	r4, r4, r2
   dabd2:	d909      	bls.n	dabe8 <__udivmoddi4+0x19c>
   dabd4:	18fb      	adds	r3, r7, r3
   dabd6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dabda:	f080 808d 	bcs.w	dacf8 <__udivmoddi4+0x2ac>
   dabde:	4299      	cmp	r1, r3
   dabe0:	f240 808a 	bls.w	dacf8 <__udivmoddi4+0x2ac>
   dabe4:	3e02      	subs	r6, #2
   dabe6:	443b      	add	r3, r7
   dabe8:	1a5b      	subs	r3, r3, r1
   dabea:	b281      	uxth	r1, r0
   dabec:	fbb3 f0fe 	udiv	r0, r3, lr
   dabf0:	fb0e 3310 	mls	r3, lr, r0, r3
   dabf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dabf8:	fb00 f308 	mul.w	r3, r0, r8
   dabfc:	428b      	cmp	r3, r1
   dabfe:	d907      	bls.n	dac10 <__udivmoddi4+0x1c4>
   dac00:	1879      	adds	r1, r7, r1
   dac02:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dac06:	d273      	bcs.n	dacf0 <__udivmoddi4+0x2a4>
   dac08:	428b      	cmp	r3, r1
   dac0a:	d971      	bls.n	dacf0 <__udivmoddi4+0x2a4>
   dac0c:	3802      	subs	r0, #2
   dac0e:	4439      	add	r1, r7
   dac10:	1acb      	subs	r3, r1, r3
   dac12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dac16:	e778      	b.n	dab0a <__udivmoddi4+0xbe>
   dac18:	f1c6 0c20 	rsb	ip, r6, #32
   dac1c:	fa03 f406 	lsl.w	r4, r3, r6
   dac20:	fa22 f30c 	lsr.w	r3, r2, ip
   dac24:	431c      	orrs	r4, r3
   dac26:	fa20 f70c 	lsr.w	r7, r0, ip
   dac2a:	fa01 f306 	lsl.w	r3, r1, r6
   dac2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dac32:	fa21 f10c 	lsr.w	r1, r1, ip
   dac36:	431f      	orrs	r7, r3
   dac38:	0c3b      	lsrs	r3, r7, #16
   dac3a:	fbb1 f9fe 	udiv	r9, r1, lr
   dac3e:	fa1f f884 	uxth.w	r8, r4
   dac42:	fb0e 1119 	mls	r1, lr, r9, r1
   dac46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dac4a:	fb09 fa08 	mul.w	sl, r9, r8
   dac4e:	458a      	cmp	sl, r1
   dac50:	fa02 f206 	lsl.w	r2, r2, r6
   dac54:	fa00 f306 	lsl.w	r3, r0, r6
   dac58:	d908      	bls.n	dac6c <__udivmoddi4+0x220>
   dac5a:	1861      	adds	r1, r4, r1
   dac5c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dac60:	d248      	bcs.n	dacf4 <__udivmoddi4+0x2a8>
   dac62:	458a      	cmp	sl, r1
   dac64:	d946      	bls.n	dacf4 <__udivmoddi4+0x2a8>
   dac66:	f1a9 0902 	sub.w	r9, r9, #2
   dac6a:	4421      	add	r1, r4
   dac6c:	eba1 010a 	sub.w	r1, r1, sl
   dac70:	b2bf      	uxth	r7, r7
   dac72:	fbb1 f0fe 	udiv	r0, r1, lr
   dac76:	fb0e 1110 	mls	r1, lr, r0, r1
   dac7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dac7e:	fb00 f808 	mul.w	r8, r0, r8
   dac82:	45b8      	cmp	r8, r7
   dac84:	d907      	bls.n	dac96 <__udivmoddi4+0x24a>
   dac86:	19e7      	adds	r7, r4, r7
   dac88:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dac8c:	d22e      	bcs.n	dacec <__udivmoddi4+0x2a0>
   dac8e:	45b8      	cmp	r8, r7
   dac90:	d92c      	bls.n	dacec <__udivmoddi4+0x2a0>
   dac92:	3802      	subs	r0, #2
   dac94:	4427      	add	r7, r4
   dac96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dac9a:	eba7 0708 	sub.w	r7, r7, r8
   dac9e:	fba0 8902 	umull	r8, r9, r0, r2
   daca2:	454f      	cmp	r7, r9
   daca4:	46c6      	mov	lr, r8
   daca6:	4649      	mov	r1, r9
   daca8:	d31a      	bcc.n	dace0 <__udivmoddi4+0x294>
   dacaa:	d017      	beq.n	dacdc <__udivmoddi4+0x290>
   dacac:	b15d      	cbz	r5, dacc6 <__udivmoddi4+0x27a>
   dacae:	ebb3 020e 	subs.w	r2, r3, lr
   dacb2:	eb67 0701 	sbc.w	r7, r7, r1
   dacb6:	fa07 fc0c 	lsl.w	ip, r7, ip
   dacba:	40f2      	lsrs	r2, r6
   dacbc:	ea4c 0202 	orr.w	r2, ip, r2
   dacc0:	40f7      	lsrs	r7, r6
   dacc2:	e9c5 2700 	strd	r2, r7, [r5]
   dacc6:	2600      	movs	r6, #0
   dacc8:	4631      	mov	r1, r6
   dacca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dacce:	462e      	mov	r6, r5
   dacd0:	4628      	mov	r0, r5
   dacd2:	e70b      	b.n	daaec <__udivmoddi4+0xa0>
   dacd4:	4606      	mov	r6, r0
   dacd6:	e6e9      	b.n	daaac <__udivmoddi4+0x60>
   dacd8:	4618      	mov	r0, r3
   dacda:	e6fd      	b.n	daad8 <__udivmoddi4+0x8c>
   dacdc:	4543      	cmp	r3, r8
   dacde:	d2e5      	bcs.n	dacac <__udivmoddi4+0x260>
   dace0:	ebb8 0e02 	subs.w	lr, r8, r2
   dace4:	eb69 0104 	sbc.w	r1, r9, r4
   dace8:	3801      	subs	r0, #1
   dacea:	e7df      	b.n	dacac <__udivmoddi4+0x260>
   dacec:	4608      	mov	r0, r1
   dacee:	e7d2      	b.n	dac96 <__udivmoddi4+0x24a>
   dacf0:	4660      	mov	r0, ip
   dacf2:	e78d      	b.n	dac10 <__udivmoddi4+0x1c4>
   dacf4:	4681      	mov	r9, r0
   dacf6:	e7b9      	b.n	dac6c <__udivmoddi4+0x220>
   dacf8:	4666      	mov	r6, ip
   dacfa:	e775      	b.n	dabe8 <__udivmoddi4+0x19c>
   dacfc:	4630      	mov	r0, r6
   dacfe:	e74a      	b.n	dab96 <__udivmoddi4+0x14a>
   dad00:	f1ac 0c02 	sub.w	ip, ip, #2
   dad04:	4439      	add	r1, r7
   dad06:	e713      	b.n	dab30 <__udivmoddi4+0xe4>
   dad08:	3802      	subs	r0, #2
   dad0a:	443c      	add	r4, r7
   dad0c:	e724      	b.n	dab58 <__udivmoddi4+0x10c>
   dad0e:	bf00      	nop

000dad10 <__aeabi_idiv0>:
   dad10:	4770      	bx	lr
   dad12:	bf00      	nop

000dad14 <asctime_r>:
   dad14:	b510      	push	{r4, lr}
   dad16:	460c      	mov	r4, r1
   dad18:	6941      	ldr	r1, [r0, #20]
   dad1a:	6903      	ldr	r3, [r0, #16]
   dad1c:	6982      	ldr	r2, [r0, #24]
   dad1e:	b086      	sub	sp, #24
   dad20:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dad24:	9104      	str	r1, [sp, #16]
   dad26:	6801      	ldr	r1, [r0, #0]
   dad28:	9103      	str	r1, [sp, #12]
   dad2a:	6841      	ldr	r1, [r0, #4]
   dad2c:	9102      	str	r1, [sp, #8]
   dad2e:	6881      	ldr	r1, [r0, #8]
   dad30:	9101      	str	r1, [sp, #4]
   dad32:	68c1      	ldr	r1, [r0, #12]
   dad34:	9100      	str	r1, [sp, #0]
   dad36:	4907      	ldr	r1, [pc, #28]	; (dad54 <asctime_r+0x40>)
   dad38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dad3c:	440b      	add	r3, r1
   dad3e:	4906      	ldr	r1, [pc, #24]	; (dad58 <asctime_r+0x44>)
   dad40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dad44:	440a      	add	r2, r1
   dad46:	4620      	mov	r0, r4
   dad48:	4904      	ldr	r1, [pc, #16]	; (dad5c <asctime_r+0x48>)
   dad4a:	f7fd fb13 	bl	d8374 <siprintf>
   dad4e:	4620      	mov	r0, r4
   dad50:	b006      	add	sp, #24
   dad52:	bd10      	pop	{r4, pc}
   dad54:	000dd50a 	.word	0x000dd50a
   dad58:	000dd4f5 	.word	0x000dd4f5
   dad5c:	000dd4d5 	.word	0x000dd4d5

000dad60 <atoi>:
   dad60:	220a      	movs	r2, #10
   dad62:	2100      	movs	r1, #0
   dad64:	f001 bad0 	b.w	dc308 <strtol>

000dad68 <atol>:
   dad68:	220a      	movs	r2, #10
   dad6a:	2100      	movs	r1, #0
   dad6c:	f001 bacc 	b.w	dc308 <strtol>

000dad70 <__cxa_atexit>:
   dad70:	b510      	push	{r4, lr}
   dad72:	4c05      	ldr	r4, [pc, #20]	; (dad88 <__cxa_atexit+0x18>)
   dad74:	4613      	mov	r3, r2
   dad76:	b12c      	cbz	r4, dad84 <__cxa_atexit+0x14>
   dad78:	460a      	mov	r2, r1
   dad7a:	4601      	mov	r1, r0
   dad7c:	2002      	movs	r0, #2
   dad7e:	f3af 8000 	nop.w
   dad82:	bd10      	pop	{r4, pc}
   dad84:	4620      	mov	r0, r4
   dad86:	e7fc      	b.n	dad82 <__cxa_atexit+0x12>
   dad88:	00000000 	.word	0x00000000

000dad8c <gmtime>:
   dad8c:	b538      	push	{r3, r4, r5, lr}
   dad8e:	4b07      	ldr	r3, [pc, #28]	; (dadac <gmtime+0x20>)
   dad90:	681d      	ldr	r5, [r3, #0]
   dad92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dad94:	4604      	mov	r4, r0
   dad96:	b91b      	cbnz	r3, dada0 <gmtime+0x14>
   dad98:	2024      	movs	r0, #36	; 0x24
   dad9a:	f7fd fad3 	bl	d8344 <malloc>
   dad9e:	63e8      	str	r0, [r5, #60]	; 0x3c
   dada0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dada2:	4620      	mov	r0, r4
   dada4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dada8:	f000 b802 	b.w	dadb0 <gmtime_r>
   dadac:	2003dfc0 	.word	0x2003dfc0

000dadb0 <gmtime_r>:
   dadb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dadb4:	e9d0 6700 	ldrd	r6, r7, [r0]
   dadb8:	460c      	mov	r4, r1
   dadba:	4a51      	ldr	r2, [pc, #324]	; (daf00 <gmtime_r+0x150>)
   dadbc:	2300      	movs	r3, #0
   dadbe:	4630      	mov	r0, r6
   dadc0:	4639      	mov	r1, r7
   dadc2:	f001 fdf9 	bl	dc9b8 <__aeabi_ldivmod>
   dadc6:	4639      	mov	r1, r7
   dadc8:	4605      	mov	r5, r0
   dadca:	4a4d      	ldr	r2, [pc, #308]	; (daf00 <gmtime_r+0x150>)
   dadcc:	4630      	mov	r0, r6
   dadce:	2300      	movs	r3, #0
   dadd0:	f001 fdf2 	bl	dc9b8 <__aeabi_ldivmod>
   dadd4:	2a00      	cmp	r2, #0
   dadd6:	bfbc      	itt	lt
   dadd8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daddc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dade0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dade4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   dade8:	fbb2 f3f1 	udiv	r3, r2, r1
   dadec:	fb01 2213 	mls	r2, r1, r3, r2
   dadf0:	f04f 013c 	mov.w	r1, #60	; 0x3c
   dadf4:	bfac      	ite	ge
   dadf6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   dadfa:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   dadfe:	60a3      	str	r3, [r4, #8]
   dae00:	fbb2 f3f1 	udiv	r3, r2, r1
   dae04:	fb01 2213 	mls	r2, r1, r3, r2
   dae08:	6063      	str	r3, [r4, #4]
   dae0a:	6022      	str	r2, [r4, #0]
   dae0c:	1cc3      	adds	r3, r0, #3
   dae0e:	2207      	movs	r2, #7
   dae10:	fb93 f2f2 	sdiv	r2, r3, r2
   dae14:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   dae18:	1a9b      	subs	r3, r3, r2
   dae1a:	bf48      	it	mi
   dae1c:	3307      	addmi	r3, #7
   dae1e:	2800      	cmp	r0, #0
   dae20:	61a3      	str	r3, [r4, #24]
   dae22:	bfb8      	it	lt
   dae24:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   dae28:	4936      	ldr	r1, [pc, #216]	; (daf04 <gmtime_r+0x154>)
   dae2a:	bfae      	itee	ge
   dae2c:	fb90 f1f1 	sdivge	r1, r0, r1
   dae30:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   dae34:	fb93 f1f1 	sdivlt	r1, r3, r1
   dae38:	4b33      	ldr	r3, [pc, #204]	; (daf08 <gmtime_r+0x158>)
   dae3a:	fb03 0001 	mla	r0, r3, r1, r0
   dae3e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dae42:	fbb0 f2f2 	udiv	r2, r0, r2
   dae46:	4402      	add	r2, r0
   dae48:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   dae4c:	fbb0 f3fc 	udiv	r3, r0, ip
   dae50:	1ad2      	subs	r2, r2, r3
   dae52:	f240 176d 	movw	r7, #365	; 0x16d
   dae56:	4b2d      	ldr	r3, [pc, #180]	; (daf0c <gmtime_r+0x15c>)
   dae58:	fbb0 f3f3 	udiv	r3, r0, r3
   dae5c:	2664      	movs	r6, #100	; 0x64
   dae5e:	1ad3      	subs	r3, r2, r3
   dae60:	fbb3 f5f7 	udiv	r5, r3, r7
   dae64:	fbb3 f3fc 	udiv	r3, r3, ip
   dae68:	fbb5 f2f6 	udiv	r2, r5, r6
   dae6c:	1ad3      	subs	r3, r2, r3
   dae6e:	4403      	add	r3, r0
   dae70:	fb07 3315 	mls	r3, r7, r5, r3
   dae74:	2099      	movs	r0, #153	; 0x99
   dae76:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   dae7a:	f10c 0c02 	add.w	ip, ip, #2
   dae7e:	f103 0e01 	add.w	lr, r3, #1
   dae82:	fbbc f7f0 	udiv	r7, ip, r0
   dae86:	4378      	muls	r0, r7
   dae88:	3002      	adds	r0, #2
   dae8a:	f04f 0805 	mov.w	r8, #5
   dae8e:	fbb0 f0f8 	udiv	r0, r0, r8
   dae92:	ebae 0000 	sub.w	r0, lr, r0
   dae96:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   dae9a:	45f4      	cmp	ip, lr
   dae9c:	bf94      	ite	ls
   dae9e:	f04f 0c02 	movls.w	ip, #2
   daea2:	f06f 0c09 	mvnhi.w	ip, #9
   daea6:	4467      	add	r7, ip
   daea8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   daeac:	fb0c 5101 	mla	r1, ip, r1, r5
   daeb0:	2f01      	cmp	r7, #1
   daeb2:	bf98      	it	ls
   daeb4:	3101      	addls	r1, #1
   daeb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   daeba:	d30c      	bcc.n	daed6 <gmtime_r+0x126>
   daebc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   daec0:	61e3      	str	r3, [r4, #28]
   daec2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   daec6:	2300      	movs	r3, #0
   daec8:	60e0      	str	r0, [r4, #12]
   daeca:	e9c4 7104 	strd	r7, r1, [r4, #16]
   daece:	6223      	str	r3, [r4, #32]
   daed0:	4620      	mov	r0, r4
   daed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   daed6:	f015 0f03 	tst.w	r5, #3
   daeda:	d102      	bne.n	daee2 <gmtime_r+0x132>
   daedc:	fb06 5212 	mls	r2, r6, r2, r5
   daee0:	b95a      	cbnz	r2, daefa <gmtime_r+0x14a>
   daee2:	f44f 76c8 	mov.w	r6, #400	; 0x190
   daee6:	fbb5 f2f6 	udiv	r2, r5, r6
   daeea:	fb06 5212 	mls	r2, r6, r2, r5
   daeee:	fab2 f282 	clz	r2, r2
   daef2:	0952      	lsrs	r2, r2, #5
   daef4:	333b      	adds	r3, #59	; 0x3b
   daef6:	4413      	add	r3, r2
   daef8:	e7e2      	b.n	daec0 <gmtime_r+0x110>
   daefa:	2201      	movs	r2, #1
   daefc:	e7fa      	b.n	daef4 <gmtime_r+0x144>
   daefe:	bf00      	nop
   daf00:	00015180 	.word	0x00015180
   daf04:	00023ab1 	.word	0x00023ab1
   daf08:	fffdc54f 	.word	0xfffdc54f
   daf0c:	00023ab0 	.word	0x00023ab0

000daf10 <localtime_r>:
   daf10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   daf14:	4607      	mov	r7, r0
   daf16:	9101      	str	r1, [sp, #4]
   daf18:	f001 fd16 	bl	dc948 <__gettzinfo>
   daf1c:	9901      	ldr	r1, [sp, #4]
   daf1e:	4680      	mov	r8, r0
   daf20:	4638      	mov	r0, r7
   daf22:	f7ff ff45 	bl	dadb0 <gmtime_r>
   daf26:	6943      	ldr	r3, [r0, #20]
   daf28:	079a      	lsls	r2, r3, #30
   daf2a:	4604      	mov	r4, r0
   daf2c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   daf30:	d105      	bne.n	daf3e <localtime_r+0x2e>
   daf32:	2264      	movs	r2, #100	; 0x64
   daf34:	fb96 f3f2 	sdiv	r3, r6, r2
   daf38:	fb02 6313 	mls	r3, r2, r3, r6
   daf3c:	bb7b      	cbnz	r3, daf9e <localtime_r+0x8e>
   daf3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   daf42:	fb96 f5f3 	sdiv	r5, r6, r3
   daf46:	fb03 6515 	mls	r5, r3, r5, r6
   daf4a:	fab5 f585 	clz	r5, r5
   daf4e:	096d      	lsrs	r5, r5, #5
   daf50:	4b68      	ldr	r3, [pc, #416]	; (db0f4 <localtime_r+0x1e4>)
   daf52:	2230      	movs	r2, #48	; 0x30
   daf54:	fb02 3505 	mla	r5, r2, r5, r3
   daf58:	f001 fb0e 	bl	dc578 <__tz_lock>
   daf5c:	f001 fb18 	bl	dc590 <_tzset_unlocked>
   daf60:	4b65      	ldr	r3, [pc, #404]	; (db0f8 <localtime_r+0x1e8>)
   daf62:	681b      	ldr	r3, [r3, #0]
   daf64:	b353      	cbz	r3, dafbc <localtime_r+0xac>
   daf66:	f8d8 3004 	ldr.w	r3, [r8, #4]
   daf6a:	42b3      	cmp	r3, r6
   daf6c:	d119      	bne.n	dafa2 <localtime_r+0x92>
   daf6e:	f8d8 1000 	ldr.w	r1, [r8]
   daf72:	e9d7 6700 	ldrd	r6, r7, [r7]
   daf76:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   daf7a:	b9d1      	cbnz	r1, dafb2 <localtime_r+0xa2>
   daf7c:	4296      	cmp	r6, r2
   daf7e:	eb77 0303 	sbcs.w	r3, r7, r3
   daf82:	da23      	bge.n	dafcc <localtime_r+0xbc>
   daf84:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   daf88:	4296      	cmp	r6, r2
   daf8a:	eb77 0303 	sbcs.w	r3, r7, r3
   daf8e:	bfb4      	ite	lt
   daf90:	2301      	movlt	r3, #1
   daf92:	2300      	movge	r3, #0
   daf94:	6223      	str	r3, [r4, #32]
   daf96:	db1b      	blt.n	dafd0 <localtime_r+0xc0>
   daf98:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   daf9c:	e01a      	b.n	dafd4 <localtime_r+0xc4>
   daf9e:	2501      	movs	r5, #1
   dafa0:	e7d6      	b.n	daf50 <localtime_r+0x40>
   dafa2:	4630      	mov	r0, r6
   dafa4:	f001 fa40 	bl	dc428 <__tzcalc_limits>
   dafa8:	2800      	cmp	r0, #0
   dafaa:	d1e0      	bne.n	daf6e <localtime_r+0x5e>
   dafac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dafb0:	e004      	b.n	dafbc <localtime_r+0xac>
   dafb2:	4296      	cmp	r6, r2
   dafb4:	eb77 0303 	sbcs.w	r3, r7, r3
   dafb8:	da02      	bge.n	dafc0 <localtime_r+0xb0>
   dafba:	2300      	movs	r3, #0
   dafbc:	6223      	str	r3, [r4, #32]
   dafbe:	e7eb      	b.n	daf98 <localtime_r+0x88>
   dafc0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   dafc4:	4296      	cmp	r6, r2
   dafc6:	eb77 0303 	sbcs.w	r3, r7, r3
   dafca:	daf6      	bge.n	dafba <localtime_r+0xaa>
   dafcc:	2301      	movs	r3, #1
   dafce:	6223      	str	r3, [r4, #32]
   dafd0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   dafd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dafd8:	203c      	movs	r0, #60	; 0x3c
   dafda:	fb91 f6f3 	sdiv	r6, r1, r3
   dafde:	fb03 1316 	mls	r3, r3, r6, r1
   dafe2:	6861      	ldr	r1, [r4, #4]
   dafe4:	fb93 f2f0 	sdiv	r2, r3, r0
   dafe8:	fb00 3012 	mls	r0, r0, r2, r3
   dafec:	6823      	ldr	r3, [r4, #0]
   dafee:	1a89      	subs	r1, r1, r2
   daff0:	68a2      	ldr	r2, [r4, #8]
   daff2:	6061      	str	r1, [r4, #4]
   daff4:	1a1b      	subs	r3, r3, r0
   daff6:	1b92      	subs	r2, r2, r6
   daff8:	2b3b      	cmp	r3, #59	; 0x3b
   daffa:	6023      	str	r3, [r4, #0]
   daffc:	60a2      	str	r2, [r4, #8]
   daffe:	dd35      	ble.n	db06c <localtime_r+0x15c>
   db000:	3101      	adds	r1, #1
   db002:	6061      	str	r1, [r4, #4]
   db004:	3b3c      	subs	r3, #60	; 0x3c
   db006:	6023      	str	r3, [r4, #0]
   db008:	6863      	ldr	r3, [r4, #4]
   db00a:	2b3b      	cmp	r3, #59	; 0x3b
   db00c:	dd34      	ble.n	db078 <localtime_r+0x168>
   db00e:	3201      	adds	r2, #1
   db010:	60a2      	str	r2, [r4, #8]
   db012:	3b3c      	subs	r3, #60	; 0x3c
   db014:	6063      	str	r3, [r4, #4]
   db016:	68a3      	ldr	r3, [r4, #8]
   db018:	2b17      	cmp	r3, #23
   db01a:	dd33      	ble.n	db084 <localtime_r+0x174>
   db01c:	69e2      	ldr	r2, [r4, #28]
   db01e:	3201      	adds	r2, #1
   db020:	61e2      	str	r2, [r4, #28]
   db022:	69a2      	ldr	r2, [r4, #24]
   db024:	3201      	adds	r2, #1
   db026:	2a06      	cmp	r2, #6
   db028:	bfc8      	it	gt
   db02a:	2200      	movgt	r2, #0
   db02c:	61a2      	str	r2, [r4, #24]
   db02e:	68e2      	ldr	r2, [r4, #12]
   db030:	3b18      	subs	r3, #24
   db032:	3201      	adds	r2, #1
   db034:	60a3      	str	r3, [r4, #8]
   db036:	6923      	ldr	r3, [r4, #16]
   db038:	60e2      	str	r2, [r4, #12]
   db03a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db03e:	428a      	cmp	r2, r1
   db040:	dd0e      	ble.n	db060 <localtime_r+0x150>
   db042:	2b0b      	cmp	r3, #11
   db044:	eba2 0201 	sub.w	r2, r2, r1
   db048:	60e2      	str	r2, [r4, #12]
   db04a:	f103 0201 	add.w	r2, r3, #1
   db04e:	bf09      	itett	eq
   db050:	6963      	ldreq	r3, [r4, #20]
   db052:	6122      	strne	r2, [r4, #16]
   db054:	2200      	moveq	r2, #0
   db056:	3301      	addeq	r3, #1
   db058:	bf02      	ittt	eq
   db05a:	6122      	streq	r2, [r4, #16]
   db05c:	6163      	streq	r3, [r4, #20]
   db05e:	61e2      	streq	r2, [r4, #28]
   db060:	f001 fa90 	bl	dc584 <__tz_unlock>
   db064:	4620      	mov	r0, r4
   db066:	b002      	add	sp, #8
   db068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db06c:	2b00      	cmp	r3, #0
   db06e:	dacb      	bge.n	db008 <localtime_r+0xf8>
   db070:	3901      	subs	r1, #1
   db072:	6061      	str	r1, [r4, #4]
   db074:	333c      	adds	r3, #60	; 0x3c
   db076:	e7c6      	b.n	db006 <localtime_r+0xf6>
   db078:	2b00      	cmp	r3, #0
   db07a:	dacc      	bge.n	db016 <localtime_r+0x106>
   db07c:	3a01      	subs	r2, #1
   db07e:	60a2      	str	r2, [r4, #8]
   db080:	333c      	adds	r3, #60	; 0x3c
   db082:	e7c7      	b.n	db014 <localtime_r+0x104>
   db084:	2b00      	cmp	r3, #0
   db086:	daeb      	bge.n	db060 <localtime_r+0x150>
   db088:	69e2      	ldr	r2, [r4, #28]
   db08a:	3a01      	subs	r2, #1
   db08c:	61e2      	str	r2, [r4, #28]
   db08e:	69a2      	ldr	r2, [r4, #24]
   db090:	3a01      	subs	r2, #1
   db092:	bf48      	it	mi
   db094:	2206      	movmi	r2, #6
   db096:	61a2      	str	r2, [r4, #24]
   db098:	68e2      	ldr	r2, [r4, #12]
   db09a:	3318      	adds	r3, #24
   db09c:	3a01      	subs	r2, #1
   db09e:	60e2      	str	r2, [r4, #12]
   db0a0:	60a3      	str	r3, [r4, #8]
   db0a2:	2a00      	cmp	r2, #0
   db0a4:	d1dc      	bne.n	db060 <localtime_r+0x150>
   db0a6:	6923      	ldr	r3, [r4, #16]
   db0a8:	3b01      	subs	r3, #1
   db0aa:	d405      	bmi.n	db0b8 <localtime_r+0x1a8>
   db0ac:	6123      	str	r3, [r4, #16]
   db0ae:	6923      	ldr	r3, [r4, #16]
   db0b0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db0b4:	60e3      	str	r3, [r4, #12]
   db0b6:	e7d3      	b.n	db060 <localtime_r+0x150>
   db0b8:	230b      	movs	r3, #11
   db0ba:	6123      	str	r3, [r4, #16]
   db0bc:	6963      	ldr	r3, [r4, #20]
   db0be:	1e5a      	subs	r2, r3, #1
   db0c0:	6162      	str	r2, [r4, #20]
   db0c2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   db0c6:	0793      	lsls	r3, r2, #30
   db0c8:	d105      	bne.n	db0d6 <localtime_r+0x1c6>
   db0ca:	2164      	movs	r1, #100	; 0x64
   db0cc:	fb92 f3f1 	sdiv	r3, r2, r1
   db0d0:	fb01 2313 	mls	r3, r1, r3, r2
   db0d4:	b963      	cbnz	r3, db0f0 <localtime_r+0x1e0>
   db0d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db0da:	fb92 f3f1 	sdiv	r3, r2, r1
   db0de:	fb01 2313 	mls	r3, r1, r3, r2
   db0e2:	fab3 f383 	clz	r3, r3
   db0e6:	095b      	lsrs	r3, r3, #5
   db0e8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db0ec:	61e3      	str	r3, [r4, #28]
   db0ee:	e7de      	b.n	db0ae <localtime_r+0x19e>
   db0f0:	2301      	movs	r3, #1
   db0f2:	e7f9      	b.n	db0e8 <localtime_r+0x1d8>
   db0f4:	000dd590 	.word	0x000dd590
   db0f8:	2003e7d8 	.word	0x2003e7d8

000db0fc <memcpy>:
   db0fc:	440a      	add	r2, r1
   db0fe:	4291      	cmp	r1, r2
   db100:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db104:	d100      	bne.n	db108 <memcpy+0xc>
   db106:	4770      	bx	lr
   db108:	b510      	push	{r4, lr}
   db10a:	f811 4b01 	ldrb.w	r4, [r1], #1
   db10e:	f803 4f01 	strb.w	r4, [r3, #1]!
   db112:	4291      	cmp	r1, r2
   db114:	d1f9      	bne.n	db10a <memcpy+0xe>
   db116:	bd10      	pop	{r4, pc}

000db118 <memmove>:
   db118:	4288      	cmp	r0, r1
   db11a:	b510      	push	{r4, lr}
   db11c:	eb01 0402 	add.w	r4, r1, r2
   db120:	d902      	bls.n	db128 <memmove+0x10>
   db122:	4284      	cmp	r4, r0
   db124:	4623      	mov	r3, r4
   db126:	d807      	bhi.n	db138 <memmove+0x20>
   db128:	1e43      	subs	r3, r0, #1
   db12a:	42a1      	cmp	r1, r4
   db12c:	d008      	beq.n	db140 <memmove+0x28>
   db12e:	f811 2b01 	ldrb.w	r2, [r1], #1
   db132:	f803 2f01 	strb.w	r2, [r3, #1]!
   db136:	e7f8      	b.n	db12a <memmove+0x12>
   db138:	4402      	add	r2, r0
   db13a:	4601      	mov	r1, r0
   db13c:	428a      	cmp	r2, r1
   db13e:	d100      	bne.n	db142 <memmove+0x2a>
   db140:	bd10      	pop	{r4, pc}
   db142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db146:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db14a:	e7f7      	b.n	db13c <memmove+0x24>

000db14c <memset>:
   db14c:	4402      	add	r2, r0
   db14e:	4603      	mov	r3, r0
   db150:	4293      	cmp	r3, r2
   db152:	d100      	bne.n	db156 <memset+0xa>
   db154:	4770      	bx	lr
   db156:	f803 1b01 	strb.w	r1, [r3], #1
   db15a:	e7f9      	b.n	db150 <memset+0x4>

000db15c <validate_structure>:
   db15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db15e:	6801      	ldr	r1, [r0, #0]
   db160:	293b      	cmp	r1, #59	; 0x3b
   db162:	4604      	mov	r4, r0
   db164:	d911      	bls.n	db18a <validate_structure+0x2e>
   db166:	223c      	movs	r2, #60	; 0x3c
   db168:	4668      	mov	r0, sp
   db16a:	f001 fb97 	bl	dc89c <div>
   db16e:	9a01      	ldr	r2, [sp, #4]
   db170:	6863      	ldr	r3, [r4, #4]
   db172:	9900      	ldr	r1, [sp, #0]
   db174:	2a00      	cmp	r2, #0
   db176:	440b      	add	r3, r1
   db178:	6063      	str	r3, [r4, #4]
   db17a:	bfbb      	ittet	lt
   db17c:	323c      	addlt	r2, #60	; 0x3c
   db17e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db182:	6022      	strge	r2, [r4, #0]
   db184:	6022      	strlt	r2, [r4, #0]
   db186:	bfb8      	it	lt
   db188:	6063      	strlt	r3, [r4, #4]
   db18a:	6861      	ldr	r1, [r4, #4]
   db18c:	293b      	cmp	r1, #59	; 0x3b
   db18e:	d911      	bls.n	db1b4 <validate_structure+0x58>
   db190:	223c      	movs	r2, #60	; 0x3c
   db192:	4668      	mov	r0, sp
   db194:	f001 fb82 	bl	dc89c <div>
   db198:	9a01      	ldr	r2, [sp, #4]
   db19a:	68a3      	ldr	r3, [r4, #8]
   db19c:	9900      	ldr	r1, [sp, #0]
   db19e:	2a00      	cmp	r2, #0
   db1a0:	440b      	add	r3, r1
   db1a2:	60a3      	str	r3, [r4, #8]
   db1a4:	bfbb      	ittet	lt
   db1a6:	323c      	addlt	r2, #60	; 0x3c
   db1a8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db1ac:	6062      	strge	r2, [r4, #4]
   db1ae:	6062      	strlt	r2, [r4, #4]
   db1b0:	bfb8      	it	lt
   db1b2:	60a3      	strlt	r3, [r4, #8]
   db1b4:	68a1      	ldr	r1, [r4, #8]
   db1b6:	2917      	cmp	r1, #23
   db1b8:	d911      	bls.n	db1de <validate_structure+0x82>
   db1ba:	2218      	movs	r2, #24
   db1bc:	4668      	mov	r0, sp
   db1be:	f001 fb6d 	bl	dc89c <div>
   db1c2:	9a01      	ldr	r2, [sp, #4]
   db1c4:	68e3      	ldr	r3, [r4, #12]
   db1c6:	9900      	ldr	r1, [sp, #0]
   db1c8:	2a00      	cmp	r2, #0
   db1ca:	440b      	add	r3, r1
   db1cc:	60e3      	str	r3, [r4, #12]
   db1ce:	bfbb      	ittet	lt
   db1d0:	3218      	addlt	r2, #24
   db1d2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db1d6:	60a2      	strge	r2, [r4, #8]
   db1d8:	60a2      	strlt	r2, [r4, #8]
   db1da:	bfb8      	it	lt
   db1dc:	60e3      	strlt	r3, [r4, #12]
   db1de:	6921      	ldr	r1, [r4, #16]
   db1e0:	290b      	cmp	r1, #11
   db1e2:	d911      	bls.n	db208 <validate_structure+0xac>
   db1e4:	220c      	movs	r2, #12
   db1e6:	4668      	mov	r0, sp
   db1e8:	f001 fb58 	bl	dc89c <div>
   db1ec:	9a01      	ldr	r2, [sp, #4]
   db1ee:	6963      	ldr	r3, [r4, #20]
   db1f0:	9900      	ldr	r1, [sp, #0]
   db1f2:	2a00      	cmp	r2, #0
   db1f4:	440b      	add	r3, r1
   db1f6:	6163      	str	r3, [r4, #20]
   db1f8:	bfbb      	ittet	lt
   db1fa:	320c      	addlt	r2, #12
   db1fc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db200:	6122      	strge	r2, [r4, #16]
   db202:	6122      	strlt	r2, [r4, #16]
   db204:	bfb8      	it	lt
   db206:	6163      	strlt	r3, [r4, #20]
   db208:	6963      	ldr	r3, [r4, #20]
   db20a:	0799      	lsls	r1, r3, #30
   db20c:	d120      	bne.n	db250 <validate_structure+0xf4>
   db20e:	2164      	movs	r1, #100	; 0x64
   db210:	fb93 f2f1 	sdiv	r2, r3, r1
   db214:	fb01 3212 	mls	r2, r1, r2, r3
   db218:	b9e2      	cbnz	r2, db254 <validate_structure+0xf8>
   db21a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db21e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db222:	fb93 f2f1 	sdiv	r2, r3, r1
   db226:	fb01 3312 	mls	r3, r1, r2, r3
   db22a:	2b00      	cmp	r3, #0
   db22c:	bf14      	ite	ne
   db22e:	231c      	movne	r3, #28
   db230:	231d      	moveq	r3, #29
   db232:	68e2      	ldr	r2, [r4, #12]
   db234:	2a00      	cmp	r2, #0
   db236:	dc0f      	bgt.n	db258 <validate_structure+0xfc>
   db238:	4f33      	ldr	r7, [pc, #204]	; (db308 <validate_structure+0x1ac>)
   db23a:	260b      	movs	r6, #11
   db23c:	2064      	movs	r0, #100	; 0x64
   db23e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db242:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   db246:	f1bc 0f00 	cmp.w	ip, #0
   db24a:	dd31      	ble.n	db2b0 <validate_structure+0x154>
   db24c:	b003      	add	sp, #12
   db24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db250:	231c      	movs	r3, #28
   db252:	e7ee      	b.n	db232 <validate_structure+0xd6>
   db254:	231d      	movs	r3, #29
   db256:	e7ec      	b.n	db232 <validate_structure+0xd6>
   db258:	4f2b      	ldr	r7, [pc, #172]	; (db308 <validate_structure+0x1ac>)
   db25a:	f04f 0c00 	mov.w	ip, #0
   db25e:	2564      	movs	r5, #100	; 0x64
   db260:	f44f 76c8 	mov.w	r6, #400	; 0x190
   db264:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   db268:	2a01      	cmp	r2, #1
   db26a:	bf14      	ite	ne
   db26c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   db270:	4618      	moveq	r0, r3
   db272:	4281      	cmp	r1, r0
   db274:	ddea      	ble.n	db24c <validate_structure+0xf0>
   db276:	3201      	adds	r2, #1
   db278:	1a09      	subs	r1, r1, r0
   db27a:	2a0c      	cmp	r2, #12
   db27c:	60e1      	str	r1, [r4, #12]
   db27e:	6122      	str	r2, [r4, #16]
   db280:	d1f0      	bne.n	db264 <validate_structure+0x108>
   db282:	6963      	ldr	r3, [r4, #20]
   db284:	1c5a      	adds	r2, r3, #1
   db286:	0791      	lsls	r1, r2, #30
   db288:	e9c4 c204 	strd	ip, r2, [r4, #16]
   db28c:	d137      	bne.n	db2fe <validate_structure+0x1a2>
   db28e:	fb92 f1f5 	sdiv	r1, r2, r5
   db292:	fb05 2211 	mls	r2, r5, r1, r2
   db296:	2a00      	cmp	r2, #0
   db298:	d133      	bne.n	db302 <validate_structure+0x1a6>
   db29a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   db29e:	fb93 f2f6 	sdiv	r2, r3, r6
   db2a2:	fb06 3312 	mls	r3, r6, r2, r3
   db2a6:	2b00      	cmp	r3, #0
   db2a8:	bf14      	ite	ne
   db2aa:	231c      	movne	r3, #28
   db2ac:	231d      	moveq	r3, #29
   db2ae:	e7d9      	b.n	db264 <validate_structure+0x108>
   db2b0:	6921      	ldr	r1, [r4, #16]
   db2b2:	3901      	subs	r1, #1
   db2b4:	6121      	str	r1, [r4, #16]
   db2b6:	3101      	adds	r1, #1
   db2b8:	d114      	bne.n	db2e4 <validate_structure+0x188>
   db2ba:	6963      	ldr	r3, [r4, #20]
   db2bc:	1e59      	subs	r1, r3, #1
   db2be:	078a      	lsls	r2, r1, #30
   db2c0:	e9c4 6104 	strd	r6, r1, [r4, #16]
   db2c4:	d117      	bne.n	db2f6 <validate_structure+0x19a>
   db2c6:	fb91 f2f0 	sdiv	r2, r1, r0
   db2ca:	fb00 1112 	mls	r1, r0, r2, r1
   db2ce:	b9a1      	cbnz	r1, db2fa <validate_structure+0x19e>
   db2d0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db2d4:	fb93 f2f5 	sdiv	r2, r3, r5
   db2d8:	fb05 3312 	mls	r3, r5, r2, r3
   db2dc:	2b00      	cmp	r3, #0
   db2de:	bf14      	ite	ne
   db2e0:	231c      	movne	r3, #28
   db2e2:	231d      	moveq	r3, #29
   db2e4:	6922      	ldr	r2, [r4, #16]
   db2e6:	2a01      	cmp	r2, #1
   db2e8:	bf14      	ite	ne
   db2ea:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   db2ee:	461a      	moveq	r2, r3
   db2f0:	4462      	add	r2, ip
   db2f2:	60e2      	str	r2, [r4, #12]
   db2f4:	e7a5      	b.n	db242 <validate_structure+0xe6>
   db2f6:	231c      	movs	r3, #28
   db2f8:	e7f4      	b.n	db2e4 <validate_structure+0x188>
   db2fa:	231d      	movs	r3, #29
   db2fc:	e7f2      	b.n	db2e4 <validate_structure+0x188>
   db2fe:	231c      	movs	r3, #28
   db300:	e7b0      	b.n	db264 <validate_structure+0x108>
   db302:	231d      	movs	r3, #29
   db304:	e7ae      	b.n	db264 <validate_structure+0x108>
   db306:	bf00      	nop
   db308:	000dd530 	.word	0x000dd530

000db30c <mktime>:
   db30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db310:	b08b      	sub	sp, #44	; 0x2c
   db312:	4605      	mov	r5, r0
   db314:	f001 fb18 	bl	dc948 <__gettzinfo>
   db318:	4607      	mov	r7, r0
   db31a:	4628      	mov	r0, r5
   db31c:	f7ff ff1e 	bl	db15c <validate_structure>
   db320:	e9d5 2300 	ldrd	r2, r3, [r5]
   db324:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   db328:	68a8      	ldr	r0, [r5, #8]
   db32a:	696e      	ldr	r6, [r5, #20]
   db32c:	fb0a 2303 	mla	r3, sl, r3, r2
   db330:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   db334:	fb0a 3a00 	mla	sl, sl, r0, r3
   db338:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   db33c:	4ac3      	ldr	r2, [pc, #780]	; (db64c <mktime+0x340>)
   db33e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   db342:	3c01      	subs	r4, #1
   db344:	2b01      	cmp	r3, #1
   db346:	4414      	add	r4, r2
   db348:	dd11      	ble.n	db36e <mktime+0x62>
   db34a:	07b1      	lsls	r1, r6, #30
   db34c:	d10f      	bne.n	db36e <mktime+0x62>
   db34e:	2264      	movs	r2, #100	; 0x64
   db350:	fb96 f3f2 	sdiv	r3, r6, r2
   db354:	fb02 6313 	mls	r3, r2, r3, r6
   db358:	b943      	cbnz	r3, db36c <mktime+0x60>
   db35a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   db35e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db362:	fb91 f3f2 	sdiv	r3, r1, r2
   db366:	fb02 1313 	mls	r3, r2, r3, r1
   db36a:	b903      	cbnz	r3, db36e <mktime+0x62>
   db36c:	3401      	adds	r4, #1
   db36e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   db372:	3310      	adds	r3, #16
   db374:	f644 6220 	movw	r2, #20000	; 0x4e20
   db378:	4293      	cmp	r3, r2
   db37a:	61ec      	str	r4, [r5, #28]
   db37c:	f200 8161 	bhi.w	db642 <mktime+0x336>
   db380:	2e46      	cmp	r6, #70	; 0x46
   db382:	dd77      	ble.n	db474 <mktime+0x168>
   db384:	2346      	movs	r3, #70	; 0x46
   db386:	f240 1e6d 	movw	lr, #365	; 0x16d
   db38a:	2164      	movs	r1, #100	; 0x64
   db38c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   db390:	079a      	lsls	r2, r3, #30
   db392:	d169      	bne.n	db468 <mktime+0x15c>
   db394:	fb93 f2f1 	sdiv	r2, r3, r1
   db398:	fb01 3212 	mls	r2, r1, r2, r3
   db39c:	2a00      	cmp	r2, #0
   db39e:	d166      	bne.n	db46e <mktime+0x162>
   db3a0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   db3a4:	fb9c f2f0 	sdiv	r2, ip, r0
   db3a8:	fb00 c212 	mls	r2, r0, r2, ip
   db3ac:	2a00      	cmp	r2, #0
   db3ae:	bf14      	ite	ne
   db3b0:	4672      	movne	r2, lr
   db3b2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db3b6:	3301      	adds	r3, #1
   db3b8:	429e      	cmp	r6, r3
   db3ba:	4414      	add	r4, r2
   db3bc:	d1e8      	bne.n	db390 <mktime+0x84>
   db3be:	4ba4      	ldr	r3, [pc, #656]	; (db650 <mktime+0x344>)
   db3c0:	ea4f 7bea 	mov.w	fp, sl, asr #31
   db3c4:	fbc3 ab04 	smlal	sl, fp, r3, r4
   db3c8:	f001 f8d6 	bl	dc578 <__tz_lock>
   db3cc:	f001 f8e0 	bl	dc590 <_tzset_unlocked>
   db3d0:	4ba0      	ldr	r3, [pc, #640]	; (db654 <mktime+0x348>)
   db3d2:	f8d3 9000 	ldr.w	r9, [r3]
   db3d6:	f1b9 0f00 	cmp.w	r9, #0
   db3da:	d03f      	beq.n	db45c <mktime+0x150>
   db3dc:	f8d5 9020 	ldr.w	r9, [r5, #32]
   db3e0:	6968      	ldr	r0, [r5, #20]
   db3e2:	687b      	ldr	r3, [r7, #4]
   db3e4:	f1b9 0f01 	cmp.w	r9, #1
   db3e8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db3ec:	46c8      	mov	r8, r9
   db3ee:	bfa8      	it	ge
   db3f0:	f04f 0801 	movge.w	r8, #1
   db3f4:	4283      	cmp	r3, r0
   db3f6:	d17f      	bne.n	db4f8 <mktime+0x1ec>
   db3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   db3fa:	4619      	mov	r1, r3
   db3fc:	17da      	asrs	r2, r3, #31
   db3fe:	e9cd 1200 	strd	r1, r2, [sp]
   db402:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   db406:	e9cd 1202 	strd	r1, r2, [sp, #8]
   db40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   db40e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   db410:	1a80      	subs	r0, r0, r2
   db412:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   db416:	4582      	cmp	sl, r0
   db418:	e9cd 0106 	strd	r0, r1, [sp, #24]
   db41c:	eb7b 0101 	sbcs.w	r1, fp, r1
   db420:	da71      	bge.n	db506 <mktime+0x1fa>
   db422:	9800      	ldr	r0, [sp, #0]
   db424:	6a39      	ldr	r1, [r7, #32]
   db426:	1a09      	subs	r1, r1, r0
   db428:	9104      	str	r1, [sp, #16]
   db42a:	9801      	ldr	r0, [sp, #4]
   db42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   db42e:	eb61 0100 	sbc.w	r1, r1, r0
   db432:	9105      	str	r1, [sp, #20]
   db434:	6839      	ldr	r1, [r7, #0]
   db436:	2900      	cmp	r1, #0
   db438:	d075      	beq.n	db526 <mktime+0x21a>
   db43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   db43e:	4582      	cmp	sl, r0
   db440:	eb7b 0101 	sbcs.w	r1, fp, r1
   db444:	db05      	blt.n	db452 <mktime+0x146>
   db446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   db44a:	4582      	cmp	sl, r0
   db44c:	eb7b 0101 	sbcs.w	r1, fp, r1
   db450:	db6f      	blt.n	db532 <mktime+0x226>
   db452:	f1b9 0f00 	cmp.w	r9, #0
   db456:	f04f 0900 	mov.w	r9, #0
   db45a:	da6f      	bge.n	db53c <mktime+0x230>
   db45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   db45e:	eb1a 0a03 	adds.w	sl, sl, r3
   db462:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   db466:	e0ae      	b.n	db5c6 <mktime+0x2ba>
   db468:	f240 126d 	movw	r2, #365	; 0x16d
   db46c:	e7a3      	b.n	db3b6 <mktime+0xaa>
   db46e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db472:	e7a0      	b.n	db3b6 <mktime+0xaa>
   db474:	d0a3      	beq.n	db3be <mktime+0xb2>
   db476:	2345      	movs	r3, #69	; 0x45
   db478:	f240 1e6d 	movw	lr, #365	; 0x16d
   db47c:	2164      	movs	r1, #100	; 0x64
   db47e:	f44f 70c8 	mov.w	r0, #400	; 0x190
   db482:	e012      	b.n	db4aa <mktime+0x19e>
   db484:	bb62      	cbnz	r2, db4e0 <mktime+0x1d4>
   db486:	fb93 f2f1 	sdiv	r2, r3, r1
   db48a:	fb01 3212 	mls	r2, r1, r2, r3
   db48e:	bb52      	cbnz	r2, db4e6 <mktime+0x1da>
   db490:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   db494:	fb9c f2f0 	sdiv	r2, ip, r0
   db498:	fb00 c212 	mls	r2, r0, r2, ip
   db49c:	2a00      	cmp	r2, #0
   db49e:	bf14      	ite	ne
   db4a0:	4672      	movne	r2, lr
   db4a2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db4a6:	1aa4      	subs	r4, r4, r2
   db4a8:	3b01      	subs	r3, #1
   db4aa:	429e      	cmp	r6, r3
   db4ac:	f003 0203 	and.w	r2, r3, #3
   db4b0:	dbe8      	blt.n	db484 <mktime+0x178>
   db4b2:	b9da      	cbnz	r2, db4ec <mktime+0x1e0>
   db4b4:	2264      	movs	r2, #100	; 0x64
   db4b6:	fb96 f3f2 	sdiv	r3, r6, r2
   db4ba:	fb02 6313 	mls	r3, r2, r3, r6
   db4be:	b9c3      	cbnz	r3, db4f2 <mktime+0x1e6>
   db4c0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   db4c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db4c8:	fb91 f3f2 	sdiv	r3, r1, r2
   db4cc:	fb02 1313 	mls	r3, r2, r3, r1
   db4d0:	2b00      	cmp	r3, #0
   db4d2:	f240 136d 	movw	r3, #365	; 0x16d
   db4d6:	bf08      	it	eq
   db4d8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   db4dc:	1ae4      	subs	r4, r4, r3
   db4de:	e76e      	b.n	db3be <mktime+0xb2>
   db4e0:	f240 126d 	movw	r2, #365	; 0x16d
   db4e4:	e7df      	b.n	db4a6 <mktime+0x19a>
   db4e6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db4ea:	e7dc      	b.n	db4a6 <mktime+0x19a>
   db4ec:	f240 136d 	movw	r3, #365	; 0x16d
   db4f0:	e7f4      	b.n	db4dc <mktime+0x1d0>
   db4f2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   db4f6:	e7f1      	b.n	db4dc <mktime+0x1d0>
   db4f8:	f000 ff96 	bl	dc428 <__tzcalc_limits>
   db4fc:	2800      	cmp	r0, #0
   db4fe:	f47f af7b 	bne.w	db3f8 <mktime+0xec>
   db502:	46c1      	mov	r9, r8
   db504:	e054      	b.n	db5b0 <mktime+0x2a4>
   db506:	9800      	ldr	r0, [sp, #0]
   db508:	9902      	ldr	r1, [sp, #8]
   db50a:	1a09      	subs	r1, r1, r0
   db50c:	9108      	str	r1, [sp, #32]
   db50e:	9801      	ldr	r0, [sp, #4]
   db510:	9903      	ldr	r1, [sp, #12]
   db512:	eb61 0100 	sbc.w	r1, r1, r0
   db516:	9109      	str	r1, [sp, #36]	; 0x24
   db518:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db51c:	4582      	cmp	sl, r0
   db51e:	eb7b 0101 	sbcs.w	r1, fp, r1
   db522:	dbee      	blt.n	db502 <mktime+0x1f6>
   db524:	e77d      	b.n	db422 <mktime+0x116>
   db526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   db52a:	4582      	cmp	sl, r0
   db52c:	eb7b 0101 	sbcs.w	r1, fp, r1
   db530:	db89      	blt.n	db446 <mktime+0x13a>
   db532:	f1b9 0f00 	cmp.w	r9, #0
   db536:	db3f      	blt.n	db5b8 <mktime+0x2ac>
   db538:	f04f 0901 	mov.w	r9, #1
   db53c:	ea88 0809 	eor.w	r8, r8, r9
   db540:	f1b8 0f01 	cmp.w	r8, #1
   db544:	d134      	bne.n	db5b0 <mktime+0x2a4>
   db546:	f1b9 0f00 	cmp.w	r9, #0
   db54a:	d04f      	beq.n	db5ec <mktime+0x2e0>
   db54c:	1ad3      	subs	r3, r2, r3
   db54e:	682a      	ldr	r2, [r5, #0]
   db550:	f8d5 800c 	ldr.w	r8, [r5, #12]
   db554:	441a      	add	r2, r3
   db556:	eb1a 0a03 	adds.w	sl, sl, r3
   db55a:	602a      	str	r2, [r5, #0]
   db55c:	4628      	mov	r0, r5
   db55e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   db562:	f7ff fdfb 	bl	db15c <validate_structure>
   db566:	68ea      	ldr	r2, [r5, #12]
   db568:	ebb2 0208 	subs.w	r2, r2, r8
   db56c:	d020      	beq.n	db5b0 <mktime+0x2a4>
   db56e:	2a01      	cmp	r2, #1
   db570:	dc3e      	bgt.n	db5f0 <mktime+0x2e4>
   db572:	1c90      	adds	r0, r2, #2
   db574:	bfd8      	it	le
   db576:	2201      	movle	r2, #1
   db578:	69eb      	ldr	r3, [r5, #28]
   db57a:	18d3      	adds	r3, r2, r3
   db57c:	4414      	add	r4, r2
   db57e:	d540      	bpl.n	db602 <mktime+0x2f6>
   db580:	1e72      	subs	r2, r6, #1
   db582:	0791      	lsls	r1, r2, #30
   db584:	d137      	bne.n	db5f6 <mktime+0x2ea>
   db586:	2164      	movs	r1, #100	; 0x64
   db588:	fb92 f3f1 	sdiv	r3, r2, r1
   db58c:	fb01 2313 	mls	r3, r1, r3, r2
   db590:	bba3      	cbnz	r3, db5fc <mktime+0x2f0>
   db592:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   db596:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db59a:	fb96 f3f2 	sdiv	r3, r6, r2
   db59e:	fb02 6613 	mls	r6, r2, r3, r6
   db5a2:	2e00      	cmp	r6, #0
   db5a4:	f240 136d 	movw	r3, #365	; 0x16d
   db5a8:	bf18      	it	ne
   db5aa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   db5ae:	61eb      	str	r3, [r5, #28]
   db5b0:	f1b9 0f01 	cmp.w	r9, #1
   db5b4:	f47f af52 	bne.w	db45c <mktime+0x150>
   db5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   db5ba:	eb1a 0a03 	adds.w	sl, sl, r3
   db5be:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   db5c2:	f04f 0901 	mov.w	r9, #1
   db5c6:	f000 ffdd 	bl	dc584 <__tz_unlock>
   db5ca:	3404      	adds	r4, #4
   db5cc:	2307      	movs	r3, #7
   db5ce:	fb94 f3f3 	sdiv	r3, r4, r3
   db5d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db5d6:	1ae4      	subs	r4, r4, r3
   db5d8:	bf48      	it	mi
   db5da:	3407      	addmi	r4, #7
   db5dc:	f8c5 9020 	str.w	r9, [r5, #32]
   db5e0:	61ac      	str	r4, [r5, #24]
   db5e2:	4650      	mov	r0, sl
   db5e4:	4659      	mov	r1, fp
   db5e6:	b00b      	add	sp, #44	; 0x2c
   db5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db5ec:	1a9b      	subs	r3, r3, r2
   db5ee:	e7ae      	b.n	db54e <mktime+0x242>
   db5f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db5f4:	e7c0      	b.n	db578 <mktime+0x26c>
   db5f6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   db5fa:	e7d8      	b.n	db5ae <mktime+0x2a2>
   db5fc:	f240 136d 	movw	r3, #365	; 0x16d
   db600:	e7d5      	b.n	db5ae <mktime+0x2a2>
   db602:	07b2      	lsls	r2, r6, #30
   db604:	d117      	bne.n	db636 <mktime+0x32a>
   db606:	2164      	movs	r1, #100	; 0x64
   db608:	fb96 f2f1 	sdiv	r2, r6, r1
   db60c:	fb01 6212 	mls	r2, r1, r2, r6
   db610:	b9a2      	cbnz	r2, db63c <mktime+0x330>
   db612:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db616:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db61a:	fb96 f2f1 	sdiv	r2, r6, r1
   db61e:	fb01 6612 	mls	r6, r1, r2, r6
   db622:	2e00      	cmp	r6, #0
   db624:	f240 126d 	movw	r2, #365	; 0x16d
   db628:	bf08      	it	eq
   db62a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db62e:	4293      	cmp	r3, r2
   db630:	bfa8      	it	ge
   db632:	1a9b      	subge	r3, r3, r2
   db634:	e7bb      	b.n	db5ae <mktime+0x2a2>
   db636:	f240 126d 	movw	r2, #365	; 0x16d
   db63a:	e7f8      	b.n	db62e <mktime+0x322>
   db63c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db640:	e7f5      	b.n	db62e <mktime+0x322>
   db642:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db646:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   db64a:	e7ca      	b.n	db5e2 <mktime+0x2d6>
   db64c:	000dd560 	.word	0x000dd560
   db650:	00015180 	.word	0x00015180
   db654:	2003e7d8 	.word	0x2003e7d8

000db658 <srand>:
   db658:	b538      	push	{r3, r4, r5, lr}
   db65a:	4b0d      	ldr	r3, [pc, #52]	; (db690 <srand+0x38>)
   db65c:	681d      	ldr	r5, [r3, #0]
   db65e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db660:	4604      	mov	r4, r0
   db662:	b97b      	cbnz	r3, db684 <srand+0x2c>
   db664:	2018      	movs	r0, #24
   db666:	f7fc fe6d 	bl	d8344 <malloc>
   db66a:	4a0a      	ldr	r2, [pc, #40]	; (db694 <srand+0x3c>)
   db66c:	4b0a      	ldr	r3, [pc, #40]	; (db698 <srand+0x40>)
   db66e:	63a8      	str	r0, [r5, #56]	; 0x38
   db670:	e9c0 2300 	strd	r2, r3, [r0]
   db674:	4b09      	ldr	r3, [pc, #36]	; (db69c <srand+0x44>)
   db676:	6083      	str	r3, [r0, #8]
   db678:	230b      	movs	r3, #11
   db67a:	8183      	strh	r3, [r0, #12]
   db67c:	2201      	movs	r2, #1
   db67e:	2300      	movs	r3, #0
   db680:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db684:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db686:	2200      	movs	r2, #0
   db688:	611c      	str	r4, [r3, #16]
   db68a:	615a      	str	r2, [r3, #20]
   db68c:	bd38      	pop	{r3, r4, r5, pc}
   db68e:	bf00      	nop
   db690:	2003dfc0 	.word	0x2003dfc0
   db694:	abcd330e 	.word	0xabcd330e
   db698:	e66d1234 	.word	0xe66d1234
   db69c:	0005deec 	.word	0x0005deec

000db6a0 <strcmp>:
   db6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   db6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   db6a8:	2a01      	cmp	r2, #1
   db6aa:	bf28      	it	cs
   db6ac:	429a      	cmpcs	r2, r3
   db6ae:	d0f7      	beq.n	db6a0 <strcmp>
   db6b0:	1ad0      	subs	r0, r2, r3
   db6b2:	4770      	bx	lr

000db6b4 <strcpy>:
   db6b4:	4603      	mov	r3, r0
   db6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   db6ba:	f803 2b01 	strb.w	r2, [r3], #1
   db6be:	2a00      	cmp	r2, #0
   db6c0:	d1f9      	bne.n	db6b6 <strcpy+0x2>
   db6c2:	4770      	bx	lr

000db6c4 <strdup>:
   db6c4:	4b02      	ldr	r3, [pc, #8]	; (db6d0 <strdup+0xc>)
   db6c6:	4601      	mov	r1, r0
   db6c8:	6818      	ldr	r0, [r3, #0]
   db6ca:	f000 b803 	b.w	db6d4 <_strdup_r>
   db6ce:	bf00      	nop
   db6d0:	2003dfc0 	.word	0x2003dfc0

000db6d4 <_strdup_r>:
   db6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db6d6:	4604      	mov	r4, r0
   db6d8:	4608      	mov	r0, r1
   db6da:	460d      	mov	r5, r1
   db6dc:	f000 fd6c 	bl	dc1b8 <strlen>
   db6e0:	1c42      	adds	r2, r0, #1
   db6e2:	4611      	mov	r1, r2
   db6e4:	4620      	mov	r0, r4
   db6e6:	9201      	str	r2, [sp, #4]
   db6e8:	f7fc fe74 	bl	d83d4 <_malloc_r>
   db6ec:	4604      	mov	r4, r0
   db6ee:	b118      	cbz	r0, db6f8 <_strdup_r+0x24>
   db6f0:	9a01      	ldr	r2, [sp, #4]
   db6f2:	4629      	mov	r1, r5
   db6f4:	f7ff fd02 	bl	db0fc <memcpy>
   db6f8:	4620      	mov	r0, r4
   db6fa:	b003      	add	sp, #12
   db6fc:	bd30      	pop	{r4, r5, pc}
	...

000db700 <iso_year_adjust>:
   db700:	6941      	ldr	r1, [r0, #20]
   db702:	2900      	cmp	r1, #0
   db704:	f240 736c 	movw	r3, #1900	; 0x76c
   db708:	bfa8      	it	ge
   db70a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db70e:	18ca      	adds	r2, r1, r3
   db710:	078b      	lsls	r3, r1, #30
   db712:	d105      	bne.n	db720 <iso_year_adjust+0x20>
   db714:	2164      	movs	r1, #100	; 0x64
   db716:	fb92 f3f1 	sdiv	r3, r2, r1
   db71a:	fb01 2313 	mls	r3, r1, r3, r2
   db71e:	b9db      	cbnz	r3, db758 <iso_year_adjust+0x58>
   db720:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db724:	fb92 f3f1 	sdiv	r3, r2, r1
   db728:	fb01 2313 	mls	r3, r1, r3, r2
   db72c:	fab3 f383 	clz	r3, r3
   db730:	095b      	lsrs	r3, r3, #5
   db732:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
   db736:	0040      	lsls	r0, r0, #1
   db738:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   db73c:	4418      	add	r0, r3
   db73e:	f241 63a2 	movw	r3, #5794	; 0x16a2
   db742:	4298      	cmp	r0, r3
   db744:	d03a      	beq.n	db7bc <iso_year_adjust+0xbc>
   db746:	dc21      	bgt.n	db78c <iso_year_adjust+0x8c>
   db748:	2801      	cmp	r0, #1
   db74a:	dc1a      	bgt.n	db782 <iso_year_adjust+0x82>
   db74c:	2800      	cmp	r0, #0
   db74e:	bfb4      	ite	lt
   db750:	2000      	movlt	r0, #0
   db752:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   db756:	4770      	bx	lr
   db758:	2301      	movs	r3, #1
   db75a:	e7ea      	b.n	db732 <iso_year_adjust+0x32>
   db75c:	2817      	cmp	r0, #23
   db75e:	d813      	bhi.n	db788 <iso_year_adjust+0x88>
   db760:	e8df f000 	tbb	[pc, r0]
   db764:	0c0c0c0c 	.word	0x0c0c0c0c
   db768:	0c0c1212 	.word	0x0c0c1212
   db76c:	12121212 	.word	0x12121212
   db770:	12121212 	.word	0x12121212
   db774:	0c0c1212 	.word	0x0c0c1212
   db778:	0c0c1212 	.word	0x0c0c1212
   db77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db780:	4770      	bx	lr
   db782:	380a      	subs	r0, #10
   db784:	2817      	cmp	r0, #23
   db786:	d9e9      	bls.n	db75c <iso_year_adjust+0x5c>
   db788:	2000      	movs	r0, #0
   db78a:	4770      	bx	lr
   db78c:	f241 63b4 	movw	r3, #5812	; 0x16b4
   db790:	4298      	cmp	r0, r3
   db792:	dc06      	bgt.n	db7a2 <iso_year_adjust+0xa2>
   db794:	f241 63b1 	movw	r3, #5809	; 0x16b1
   db798:	4298      	cmp	r0, r3
   db79a:	bfd4      	ite	le
   db79c:	2000      	movle	r0, #0
   db79e:	2001      	movgt	r0, #1
   db7a0:	4770      	bx	lr
   db7a2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
   db7a6:	3802      	subs	r0, #2
   db7a8:	2815      	cmp	r0, #21
   db7aa:	d8ed      	bhi.n	db788 <iso_year_adjust+0x88>
   db7ac:	2301      	movs	r3, #1
   db7ae:	4083      	lsls	r3, r0
   db7b0:	4803      	ldr	r0, [pc, #12]	; (db7c0 <iso_year_adjust+0xc0>)
   db7b2:	4018      	ands	r0, r3
   db7b4:	3800      	subs	r0, #0
   db7b6:	bf18      	it	ne
   db7b8:	2001      	movne	r0, #1
   db7ba:	4770      	bx	lr
   db7bc:	2001      	movs	r0, #1
   db7be:	4770      	bx	lr
   db7c0:	002a001f 	.word	0x002a001f

000db7c4 <__strftime>:
   db7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db7c8:	b091      	sub	sp, #68	; 0x44
   db7ca:	461d      	mov	r5, r3
   db7cc:	2300      	movs	r3, #0
   db7ce:	4681      	mov	r9, r0
   db7d0:	4688      	mov	r8, r1
   db7d2:	9304      	str	r3, [sp, #16]
   db7d4:	461c      	mov	r4, r3
   db7d6:	7813      	ldrb	r3, [r2, #0]
   db7d8:	2b00      	cmp	r3, #0
   db7da:	f000 84d1 	beq.w	dc180 <__strftime+0x9bc>
   db7de:	2b25      	cmp	r3, #37	; 0x25
   db7e0:	d11b      	bne.n	db81a <__strftime+0x56>
   db7e2:	7857      	ldrb	r7, [r2, #1]
   db7e4:	2f30      	cmp	r7, #48	; 0x30
   db7e6:	d024      	beq.n	db832 <__strftime+0x6e>
   db7e8:	2f2b      	cmp	r7, #43	; 0x2b
   db7ea:	d022      	beq.n	db832 <__strftime+0x6e>
   db7ec:	f102 0b01 	add.w	fp, r2, #1
   db7f0:	2700      	movs	r7, #0
   db7f2:	f89b 3000 	ldrb.w	r3, [fp]
   db7f6:	3b31      	subs	r3, #49	; 0x31
   db7f8:	2b08      	cmp	r3, #8
   db7fa:	d81d      	bhi.n	db838 <__strftime+0x74>
   db7fc:	4658      	mov	r0, fp
   db7fe:	220a      	movs	r2, #10
   db800:	a908      	add	r1, sp, #32
   db802:	f000 fe07 	bl	dc414 <strtoul>
   db806:	f8dd b020 	ldr.w	fp, [sp, #32]
   db80a:	4606      	mov	r6, r0
   db80c:	f89b 3000 	ldrb.w	r3, [fp]
   db810:	2b45      	cmp	r3, #69	; 0x45
   db812:	d113      	bne.n	db83c <__strftime+0x78>
   db814:	f10b 0b01 	add.w	fp, fp, #1
   db818:	e012      	b.n	db840 <__strftime+0x7c>
   db81a:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   db81e:	42a1      	cmp	r1, r4
   db820:	d802      	bhi.n	db828 <__strftime+0x64>
   db822:	2400      	movs	r4, #0
   db824:	f000 bcb2 	b.w	dc18c <__strftime+0x9c8>
   db828:	f809 3004 	strb.w	r3, [r9, r4]
   db82c:	3201      	adds	r2, #1
   db82e:	3401      	adds	r4, #1
   db830:	e7d1      	b.n	db7d6 <__strftime+0x12>
   db832:	f102 0b02 	add.w	fp, r2, #2
   db836:	e7dc      	b.n	db7f2 <__strftime+0x2e>
   db838:	2600      	movs	r6, #0
   db83a:	e7e7      	b.n	db80c <__strftime+0x48>
   db83c:	2b4f      	cmp	r3, #79	; 0x4f
   db83e:	d0e9      	beq.n	db814 <__strftime+0x50>
   db840:	f89b 0000 	ldrb.w	r0, [fp]
   db844:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   db848:	2b55      	cmp	r3, #85	; 0x55
   db84a:	d8ea      	bhi.n	db822 <__strftime+0x5e>
   db84c:	a201      	add	r2, pc, #4	; (adr r2, db854 <__strftime+0x90>)
   db84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   db852:	bf00      	nop
   db854:	000dc173 	.word	0x000dc173
   db858:	000db823 	.word	0x000db823
   db85c:	000db823 	.word	0x000db823
   db860:	000db823 	.word	0x000db823
   db864:	000db823 	.word	0x000db823
   db868:	000db823 	.word	0x000db823
   db86c:	000db823 	.word	0x000db823
   db870:	000db823 	.word	0x000db823
   db874:	000db823 	.word	0x000db823
   db878:	000db823 	.word	0x000db823
   db87c:	000db823 	.word	0x000db823
   db880:	000db823 	.word	0x000db823
   db884:	000db823 	.word	0x000db823
   db888:	000db823 	.word	0x000db823
   db88c:	000db823 	.word	0x000db823
   db890:	000db823 	.word	0x000db823
   db894:	000db823 	.word	0x000db823
   db898:	000db823 	.word	0x000db823
   db89c:	000db823 	.word	0x000db823
   db8a0:	000db823 	.word	0x000db823
   db8a4:	000db823 	.word	0x000db823
   db8a8:	000db823 	.word	0x000db823
   db8ac:	000db823 	.word	0x000db823
   db8b0:	000db823 	.word	0x000db823
   db8b4:	000db823 	.word	0x000db823
   db8b8:	000db823 	.word	0x000db823
   db8bc:	000db823 	.word	0x000db823
   db8c0:	000db823 	.word	0x000db823
   db8c4:	000db9eb 	.word	0x000db9eb
   db8c8:	000dba45 	.word	0x000dba45
   db8cc:	000dbabb 	.word	0x000dbabb
   db8d0:	000dbb55 	.word	0x000dbb55
   db8d4:	000db823 	.word	0x000db823
   db8d8:	000dbba1 	.word	0x000dbba1
   db8dc:	000dbc81 	.word	0x000dbc81
   db8e0:	000dbd83 	.word	0x000dbd83
   db8e4:	000dbd91 	.word	0x000dbd91
   db8e8:	000db823 	.word	0x000db823
   db8ec:	000db823 	.word	0x000db823
   db8f0:	000db823 	.word	0x000db823
   db8f4:	000dbdc1 	.word	0x000dbdc1
   db8f8:	000db823 	.word	0x000db823
   db8fc:	000db823 	.word	0x000db823
   db900:	000dbdd9 	.word	0x000dbdd9
   db904:	000db823 	.word	0x000db823
   db908:	000dbe27 	.word	0x000dbe27
   db90c:	000dbf3d 	.word	0x000dbf3d
   db910:	000dbf4f 	.word	0x000dbf4f
   db914:	000dbfa7 	.word	0x000dbfa7
   db918:	000dbfb7 	.word	0x000dbfb7
   db91c:	000dc02d 	.word	0x000dc02d
   db920:	000dbab3 	.word	0x000dbab3
   db924:	000dc061 	.word	0x000dc061
   db928:	000dc11f 	.word	0x000dc11f
   db92c:	000db823 	.word	0x000db823
   db930:	000db823 	.word	0x000db823
   db934:	000db823 	.word	0x000db823
   db938:	000db823 	.word	0x000db823
   db93c:	000db823 	.word	0x000db823
   db940:	000db823 	.word	0x000db823
   db944:	000db9ad 	.word	0x000db9ad
   db948:	000dba19 	.word	0x000dba19
   db94c:	000dba73 	.word	0x000dba73
   db950:	000dbb2d 	.word	0x000dbb2d
   db954:	000dbb2d 	.word	0x000dbb2d
   db958:	000db823 	.word	0x000db823
   db95c:	000dbbe9 	.word	0x000dbbe9
   db960:	000dba19 	.word	0x000dba19
   db964:	000db823 	.word	0x000db823
   db968:	000dbdb3 	.word	0x000dbdb3
   db96c:	000dbd83 	.word	0x000dbd83
   db970:	000dbd91 	.word	0x000dbd91
   db974:	000dbdbb 	.word	0x000dbdbb
   db978:	000dbdc5 	.word	0x000dbdc5
   db97c:	000db823 	.word	0x000db823
   db980:	000dbdd9 	.word	0x000dbdd9
   db984:	000db823 	.word	0x000db823
   db988:	000dbaa3 	.word	0x000dbaa3
   db98c:	000dbe3d 	.word	0x000dbe3d
   db990:	000dbf41 	.word	0x000dbf41
   db994:	000dbf89 	.word	0x000dbf89
   db998:	000db823 	.word	0x000db823
   db99c:	000dc01d 	.word	0x000dc01d
   db9a0:	000dbaab 	.word	0x000dbaab
   db9a4:	000dc045 	.word	0x000dc045
   db9a8:	000dc0b1 	.word	0x000dc0b1
   db9ac:	69ab      	ldr	r3, [r5, #24]
   db9ae:	4aa7      	ldr	r2, [pc, #668]	; (dbc4c <__strftime+0x488>)
   db9b0:	3318      	adds	r3, #24
   db9b2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   db9b6:	4630      	mov	r0, r6
   db9b8:	f000 fbfe 	bl	dc1b8 <strlen>
   db9bc:	3e01      	subs	r6, #1
   db9be:	4420      	add	r0, r4
   db9c0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   db9c4:	42a0      	cmp	r0, r4
   db9c6:	d107      	bne.n	db9d8 <__strftime+0x214>
   db9c8:	f89b 3000 	ldrb.w	r3, [fp]
   db9cc:	2b00      	cmp	r3, #0
   db9ce:	f000 83d7 	beq.w	dc180 <__strftime+0x9bc>
   db9d2:	f10b 0201 	add.w	r2, fp, #1
   db9d6:	e6fe      	b.n	db7d6 <__strftime+0x12>
   db9d8:	42a3      	cmp	r3, r4
   db9da:	f67f af22 	bls.w	db822 <__strftime+0x5e>
   db9de:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   db9e2:	f809 2004 	strb.w	r2, [r9, r4]
   db9e6:	3401      	adds	r4, #1
   db9e8:	e7ec      	b.n	db9c4 <__strftime+0x200>
   db9ea:	69aa      	ldr	r2, [r5, #24]
   db9ec:	4b97      	ldr	r3, [pc, #604]	; (dbc4c <__strftime+0x488>)
   db9ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   db9f2:	6fde      	ldr	r6, [r3, #124]	; 0x7c
   db9f4:	4630      	mov	r0, r6
   db9f6:	f000 fbdf 	bl	dc1b8 <strlen>
   db9fa:	3e01      	subs	r6, #1
   db9fc:	4420      	add	r0, r4
   db9fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dba02:	42a0      	cmp	r0, r4
   dba04:	d0e0      	beq.n	db9c8 <__strftime+0x204>
   dba06:	42a3      	cmp	r3, r4
   dba08:	f67f af0b 	bls.w	db822 <__strftime+0x5e>
   dba0c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   dba10:	f809 2004 	strb.w	r2, [r9, r4]
   dba14:	3401      	adds	r4, #1
   dba16:	e7f4      	b.n	dba02 <__strftime+0x23e>
   dba18:	4b8c      	ldr	r3, [pc, #560]	; (dbc4c <__strftime+0x488>)
   dba1a:	692a      	ldr	r2, [r5, #16]
   dba1c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
   dba20:	4630      	mov	r0, r6
   dba22:	f000 fbc9 	bl	dc1b8 <strlen>
   dba26:	3e01      	subs	r6, #1
   dba28:	4420      	add	r0, r4
   dba2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dba2e:	42a0      	cmp	r0, r4
   dba30:	d0ca      	beq.n	db9c8 <__strftime+0x204>
   dba32:	42a3      	cmp	r3, r4
   dba34:	f67f aef5 	bls.w	db822 <__strftime+0x5e>
   dba38:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   dba3c:	f809 2004 	strb.w	r2, [r9, r4]
   dba40:	3401      	adds	r4, #1
   dba42:	e7f4      	b.n	dba2e <__strftime+0x26a>
   dba44:	692b      	ldr	r3, [r5, #16]
   dba46:	4a81      	ldr	r2, [pc, #516]	; (dbc4c <__strftime+0x488>)
   dba48:	330c      	adds	r3, #12
   dba4a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   dba4e:	4630      	mov	r0, r6
   dba50:	f000 fbb2 	bl	dc1b8 <strlen>
   dba54:	3e01      	subs	r6, #1
   dba56:	4420      	add	r0, r4
   dba58:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dba5c:	42a0      	cmp	r0, r4
   dba5e:	d0b3      	beq.n	db9c8 <__strftime+0x204>
   dba60:	42a3      	cmp	r3, r4
   dba62:	f67f aede 	bls.w	db822 <__strftime+0x5e>
   dba66:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   dba6a:	f809 2004 	strb.w	r2, [r9, r4]
   dba6e:	3401      	adds	r4, #1
   dba70:	e7f4      	b.n	dba5c <__strftime+0x298>
   dba72:	4b76      	ldr	r3, [pc, #472]	; (dbc4c <__strftime+0x488>)
   dba74:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
   dba78:	4630      	mov	r0, r6
   dba7a:	f000 fb9d 	bl	dc1b8 <strlen>
   dba7e:	7833      	ldrb	r3, [r6, #0]
   dba80:	2b00      	cmp	r3, #0
   dba82:	d0a1      	beq.n	db9c8 <__strftime+0x204>
   dba84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   dba86:	9300      	str	r3, [sp, #0]
   dba88:	4632      	mov	r2, r6
   dba8a:	462b      	mov	r3, r5
   dba8c:	eba8 0104 	sub.w	r1, r8, r4
   dba90:	eb09 0004 	add.w	r0, r9, r4
   dba94:	f7ff fe96 	bl	db7c4 <__strftime>
   dba98:	2800      	cmp	r0, #0
   dba9a:	f77f aec2 	ble.w	db822 <__strftime+0x5e>
   dba9e:	4404      	add	r4, r0
   dbaa0:	e792      	b.n	db9c8 <__strftime+0x204>
   dbaa2:	4b6a      	ldr	r3, [pc, #424]	; (dbc4c <__strftime+0x488>)
   dbaa4:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   dbaa8:	e7e6      	b.n	dba78 <__strftime+0x2b4>
   dbaaa:	4b68      	ldr	r3, [pc, #416]	; (dbc4c <__strftime+0x488>)
   dbaac:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
   dbab0:	e7e2      	b.n	dba78 <__strftime+0x2b4>
   dbab2:	4b66      	ldr	r3, [pc, #408]	; (dbc4c <__strftime+0x488>)
   dbab4:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
   dbab8:	e7de      	b.n	dba78 <__strftime+0x2b4>
   dbaba:	4965      	ldr	r1, [pc, #404]	; (dbc50 <__strftime+0x48c>)
   dbabc:	f8d5 a014 	ldr.w	sl, [r5, #20]
   dbac0:	458a      	cmp	sl, r1
   dbac2:	bfac      	ite	ge
   dbac4:	2100      	movge	r1, #0
   dbac6:	2101      	movlt	r1, #1
   dbac8:	f1ba 0f00 	cmp.w	sl, #0
   dbacc:	db0e      	blt.n	dbaec <__strftime+0x328>
   dbace:	2064      	movs	r0, #100	; 0x64
   dbad0:	fb9a f0f0 	sdiv	r0, sl, r0
   dbad4:	3013      	adds	r0, #19
   dbad6:	b19f      	cbz	r7, dbb00 <__strftime+0x33c>
   dbad8:	2863      	cmp	r0, #99	; 0x63
   dbada:	dd25      	ble.n	dbb28 <__strftime+0x364>
   dbadc:	4a5d      	ldr	r2, [pc, #372]	; (dbc54 <__strftime+0x490>)
   dbade:	4b5e      	ldr	r3, [pc, #376]	; (dbc58 <__strftime+0x494>)
   dbae0:	2f2b      	cmp	r7, #43	; 0x2b
   dbae2:	bf14      	ite	ne
   dbae4:	4617      	movne	r7, r2
   dbae6:	461f      	moveq	r7, r3
   dbae8:	4a5c      	ldr	r2, [pc, #368]	; (dbc5c <__strftime+0x498>)
   dbaea:	e00b      	b.n	dbb04 <__strftime+0x340>
   dbaec:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
   dbaf0:	9105      	str	r1, [sp, #20]
   dbaf2:	f000 fecf 	bl	dc894 <abs>
   dbaf6:	2364      	movs	r3, #100	; 0x64
   dbaf8:	9905      	ldr	r1, [sp, #20]
   dbafa:	fb90 f0f3 	sdiv	r0, r0, r3
   dbafe:	e7ea      	b.n	dbad6 <__strftime+0x312>
   dbb00:	4f54      	ldr	r7, [pc, #336]	; (dbc54 <__strftime+0x490>)
   dbb02:	4a57      	ldr	r2, [pc, #348]	; (dbc60 <__strftime+0x49c>)
   dbb04:	4b57      	ldr	r3, [pc, #348]	; (dbc64 <__strftime+0x4a0>)
   dbb06:	9001      	str	r0, [sp, #4]
   dbb08:	2e02      	cmp	r6, #2
   dbb0a:	bf2c      	ite	cs
   dbb0c:	ebc1 0606 	rsbcs	r6, r1, r6
   dbb10:	f1c1 0602 	rsbcc	r6, r1, #2
   dbb14:	494e      	ldr	r1, [pc, #312]	; (dbc50 <__strftime+0x48c>)
   dbb16:	9600      	str	r6, [sp, #0]
   dbb18:	458a      	cmp	sl, r1
   dbb1a:	bfa8      	it	ge
   dbb1c:	463b      	movge	r3, r7
   dbb1e:	eba8 0104 	sub.w	r1, r8, r4
   dbb22:	eb09 0004 	add.w	r0, r9, r4
   dbb26:	e02a      	b.n	dbb7e <__strftime+0x3ba>
   dbb28:	4f4a      	ldr	r7, [pc, #296]	; (dbc54 <__strftime+0x490>)
   dbb2a:	e7dd      	b.n	dbae8 <__strftime+0x324>
   dbb2c:	494e      	ldr	r1, [pc, #312]	; (dbc68 <__strftime+0x4a4>)
   dbb2e:	4a4f      	ldr	r2, [pc, #316]	; (dbc6c <__strftime+0x4a8>)
   dbb30:	68eb      	ldr	r3, [r5, #12]
   dbb32:	2864      	cmp	r0, #100	; 0x64
   dbb34:	bf08      	it	eq
   dbb36:	460a      	moveq	r2, r1
   dbb38:	eba8 0104 	sub.w	r1, r8, r4
   dbb3c:	eb09 0004 	add.w	r0, r9, r4
   dbb40:	f7fc fc30 	bl	d83a4 <sniprintf>
   dbb44:	2800      	cmp	r0, #0
   dbb46:	f6ff ae6c 	blt.w	db822 <__strftime+0x5e>
   dbb4a:	4404      	add	r4, r0
   dbb4c:	45a0      	cmp	r8, r4
   dbb4e:	f63f af3b 	bhi.w	db9c8 <__strftime+0x204>
   dbb52:	e666      	b.n	db822 <__strftime+0x5e>
   dbb54:	6968      	ldr	r0, [r5, #20]
   dbb56:	692b      	ldr	r3, [r5, #16]
   dbb58:	68ef      	ldr	r7, [r5, #12]
   dbb5a:	2800      	cmp	r0, #0
   dbb5c:	eb09 0604 	add.w	r6, r9, r4
   dbb60:	eba8 0104 	sub.w	r1, r8, r4
   dbb64:	f103 0301 	add.w	r3, r3, #1
   dbb68:	db0c      	blt.n	dbb84 <__strftime+0x3c0>
   dbb6a:	f04f 0c64 	mov.w	ip, #100	; 0x64
   dbb6e:	fb90 f2fc 	sdiv	r2, r0, ip
   dbb72:	fb0c 0212 	mls	r2, ip, r2, r0
   dbb76:	e9cd 7200 	strd	r7, r2, [sp]
   dbb7a:	4a3d      	ldr	r2, [pc, #244]	; (dbc70 <__strftime+0x4ac>)
   dbb7c:	4630      	mov	r0, r6
   dbb7e:	f7fc fc11 	bl	d83a4 <sniprintf>
   dbb82:	e7df      	b.n	dbb44 <__strftime+0x380>
   dbb84:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbb88:	e9cd 1305 	strd	r1, r3, [sp, #20]
   dbb8c:	f000 fe82 	bl	dc894 <abs>
   dbb90:	2264      	movs	r2, #100	; 0x64
   dbb92:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
   dbb96:	fb90 fcf2 	sdiv	ip, r0, r2
   dbb9a:	fb0c 0212 	mls	r2, ip, r2, r0
   dbb9e:	e7ea      	b.n	dbb76 <__strftime+0x3b2>
   dbba0:	2325      	movs	r3, #37	; 0x25
   dbba2:	f88d 3020 	strb.w	r3, [sp, #32]
   dbba6:	b187      	cbz	r7, dbbca <__strftime+0x406>
   dbba8:	2e06      	cmp	r6, #6
   dbbaa:	bf38      	it	cc
   dbbac:	2606      	movcc	r6, #6
   dbbae:	1fb3      	subs	r3, r6, #6
   dbbb0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   dbbb4:	d10c      	bne.n	dbbd0 <__strftime+0x40c>
   dbbb6:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   dbbba:	492e      	ldr	r1, [pc, #184]	; (dbc74 <__strftime+0x4b0>)
   dbbbc:	f7ff fd7a 	bl	db6b4 <strcpy>
   dbbc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   dbbc2:	9300      	str	r3, [sp, #0]
   dbbc4:	aa08      	add	r2, sp, #32
   dbbc6:	462b      	mov	r3, r5
   dbbc8:	e760      	b.n	dba8c <__strftime+0x2c8>
   dbbca:	272b      	movs	r7, #43	; 0x2b
   dbbcc:	260a      	movs	r6, #10
   dbbce:	e7ee      	b.n	dbbae <__strftime+0x3ea>
   dbbd0:	4a29      	ldr	r2, [pc, #164]	; (dbc78 <__strftime+0x4b4>)
   dbbd2:	211e      	movs	r1, #30
   dbbd4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   dbbd8:	f7fc fbe4 	bl	d83a4 <sniprintf>
   dbbdc:	2800      	cmp	r0, #0
   dbbde:	ddea      	ble.n	dbbb6 <__strftime+0x3f2>
   dbbe0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   dbbe4:	4418      	add	r0, r3
   dbbe6:	e7e8      	b.n	dbbba <__strftime+0x3f6>
   dbbe8:	4628      	mov	r0, r5
   dbbea:	f7ff fd89 	bl	db700 <iso_year_adjust>
   dbbee:	4606      	mov	r6, r0
   dbbf0:	6968      	ldr	r0, [r5, #20]
   dbbf2:	2800      	cmp	r0, #0
   dbbf4:	db11      	blt.n	dbc1a <__strftime+0x456>
   dbbf6:	2264      	movs	r2, #100	; 0x64
   dbbf8:	fb90 f3f2 	sdiv	r3, r0, r2
   dbbfc:	fb02 0313 	mls	r3, r2, r3, r0
   dbc00:	441e      	add	r6, r3
   dbc02:	2364      	movs	r3, #100	; 0x64
   dbc04:	fb96 f0f3 	sdiv	r0, r6, r3
   dbc08:	fb03 6610 	mls	r6, r3, r0, r6
   dbc0c:	441e      	add	r6, r3
   dbc0e:	fbb6 f2f3 	udiv	r2, r6, r3
   dbc12:	fb03 6312 	mls	r3, r3, r2, r6
   dbc16:	4a14      	ldr	r2, [pc, #80]	; (dbc68 <__strftime+0x4a4>)
   dbc18:	e78e      	b.n	dbb38 <__strftime+0x374>
   dbc1a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbc1e:	f000 fe39 	bl	dc894 <abs>
   dbc22:	2364      	movs	r3, #100	; 0x64
   dbc24:	2e00      	cmp	r6, #0
   dbc26:	fb90 f2f3 	sdiv	r2, r0, r3
   dbc2a:	fb02 0313 	mls	r3, r2, r3, r0
   dbc2e:	da05      	bge.n	dbc3c <__strftime+0x478>
   dbc30:	6969      	ldr	r1, [r5, #20]
   dbc32:	4a12      	ldr	r2, [pc, #72]	; (dbc7c <__strftime+0x4b8>)
   dbc34:	4291      	cmp	r1, r2
   dbc36:	bfb8      	it	lt
   dbc38:	2601      	movlt	r6, #1
   dbc3a:	e7e1      	b.n	dbc00 <__strftime+0x43c>
   dbc3c:	d0e0      	beq.n	dbc00 <__strftime+0x43c>
   dbc3e:	6969      	ldr	r1, [r5, #20]
   dbc40:	4a03      	ldr	r2, [pc, #12]	; (dbc50 <__strftime+0x48c>)
   dbc42:	4291      	cmp	r1, r2
   dbc44:	bfb8      	it	lt
   dbc46:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
   dbc4a:	e7d9      	b.n	dbc00 <__strftime+0x43c>
   dbc4c:	000dd774 	.word	0x000dd774
   dbc50:	fffff894 	.word	0xfffff894
   dbc54:	000dd4f4 	.word	0x000dd4f4
   dbc58:	000dd5ff 	.word	0x000dd5ff
   dbc5c:	000dd5f7 	.word	0x000dd5f7
   dbc60:	000dd5f0 	.word	0x000dd5f0
   dbc64:	000dd601 	.word	0x000dd601
   dbc68:	000dd611 	.word	0x000dd611
   dbc6c:	000dd603 	.word	0x000dd603
   dbc70:	000dd607 	.word	0x000dd607
   dbc74:	000dd61a 	.word	0x000dd61a
   dbc78:	000dd616 	.word	0x000dd616
   dbc7c:	fffff895 	.word	0xfffff895
   dbc80:	4bb6      	ldr	r3, [pc, #728]	; (dbf5c <__strftime+0x798>)
   dbc82:	6969      	ldr	r1, [r5, #20]
   dbc84:	4299      	cmp	r1, r3
   dbc86:	bfac      	ite	ge
   dbc88:	2300      	movge	r3, #0
   dbc8a:	2301      	movlt	r3, #1
   dbc8c:	4628      	mov	r0, r5
   dbc8e:	e9cd 3105 	strd	r3, r1, [sp, #20]
   dbc92:	f7ff fd35 	bl	db700 <iso_year_adjust>
   dbc96:	9906      	ldr	r1, [sp, #24]
   dbc98:	2900      	cmp	r1, #0
   dbc9a:	4682      	mov	sl, r0
   dbc9c:	db27      	blt.n	dbcee <__strftime+0x52a>
   dbc9e:	2264      	movs	r2, #100	; 0x64
   dbca0:	fb91 f2f2 	sdiv	r2, r1, r2
   dbca4:	3213      	adds	r2, #19
   dbca6:	6968      	ldr	r0, [r5, #20]
   dbca8:	2800      	cmp	r0, #0
   dbcaa:	db2b      	blt.n	dbd04 <__strftime+0x540>
   dbcac:	f04f 0c64 	mov.w	ip, #100	; 0x64
   dbcb0:	fb90 fefc 	sdiv	lr, r0, ip
   dbcb4:	fb0c 001e 	mls	r0, ip, lr, r0
   dbcb8:	f1ba 0f00 	cmp.w	sl, #0
   dbcbc:	da31      	bge.n	dbd22 <__strftime+0x55e>
   dbcbe:	6969      	ldr	r1, [r5, #20]
   dbcc0:	4ba7      	ldr	r3, [pc, #668]	; (dbf60 <__strftime+0x79c>)
   dbcc2:	4299      	cmp	r1, r3
   dbcc4:	db38      	blt.n	dbd38 <__strftime+0x574>
   dbcc6:	eb0a 0300 	add.w	r3, sl, r0
   dbcca:	1c59      	adds	r1, r3, #1
   dbccc:	d139      	bne.n	dbd42 <__strftime+0x57e>
   dbcce:	3a01      	subs	r2, #1
   dbcd0:	2363      	movs	r3, #99	; 0x63
   dbcd2:	2064      	movs	r0, #100	; 0x64
   dbcd4:	fb00 3202 	mla	r2, r0, r2, r3
   dbcd8:	9b05      	ldr	r3, [sp, #20]
   dbcda:	2b00      	cmp	r3, #0
   dbcdc:	d036      	beq.n	dbd4c <__strftime+0x588>
   dbcde:	232d      	movs	r3, #45	; 0x2d
   dbce0:	f88d 3020 	strb.w	r3, [sp, #32]
   dbce4:	b106      	cbz	r6, dbce8 <__strftime+0x524>
   dbce6:	3e01      	subs	r6, #1
   dbce8:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   dbcec:	e038      	b.n	dbd60 <__strftime+0x59c>
   dbcee:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbcf2:	9106      	str	r1, [sp, #24]
   dbcf4:	f000 fdce 	bl	dc894 <abs>
   dbcf8:	f04f 0c64 	mov.w	ip, #100	; 0x64
   dbcfc:	9906      	ldr	r1, [sp, #24]
   dbcfe:	fb90 f2fc 	sdiv	r2, r0, ip
   dbd02:	e7d0      	b.n	dbca6 <__strftime+0x4e2>
   dbd04:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbd08:	e9cd 1206 	strd	r1, r2, [sp, #24]
   dbd0c:	f000 fdc2 	bl	dc894 <abs>
   dbd10:	f04f 0c64 	mov.w	ip, #100	; 0x64
   dbd14:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   dbd18:	fb90 fefc 	sdiv	lr, r0, ip
   dbd1c:	fb0e 001c 	mls	r0, lr, ip, r0
   dbd20:	e7ca      	b.n	dbcb8 <__strftime+0x4f4>
   dbd22:	d0d0      	beq.n	dbcc6 <__strftime+0x502>
   dbd24:	4b8d      	ldr	r3, [pc, #564]	; (dbf5c <__strftime+0x798>)
   dbd26:	4299      	cmp	r1, r3
   dbd28:	bfb4      	ite	lt
   dbd2a:	2301      	movlt	r3, #1
   dbd2c:	2300      	movge	r3, #0
   dbd2e:	9305      	str	r3, [sp, #20]
   dbd30:	bfb8      	it	lt
   dbd32:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
   dbd36:	e7c6      	b.n	dbcc6 <__strftime+0x502>
   dbd38:	f04f 0a01 	mov.w	sl, #1
   dbd3c:	f8cd a014 	str.w	sl, [sp, #20]
   dbd40:	e7c1      	b.n	dbcc6 <__strftime+0x502>
   dbd42:	2b64      	cmp	r3, #100	; 0x64
   dbd44:	bf04      	itt	eq
   dbd46:	3201      	addeq	r2, #1
   dbd48:	2300      	moveq	r3, #0
   dbd4a:	e7c2      	b.n	dbcd2 <__strftime+0x50e>
   dbd4c:	2f2b      	cmp	r7, #43	; 0x2b
   dbd4e:	d106      	bne.n	dbd5e <__strftime+0x59a>
   dbd50:	f242 730f 	movw	r3, #9999	; 0x270f
   dbd54:	429a      	cmp	r2, r3
   dbd56:	d902      	bls.n	dbd5e <__strftime+0x59a>
   dbd58:	f88d 7020 	strb.w	r7, [sp, #32]
   dbd5c:	e7c2      	b.n	dbce4 <__strftime+0x520>
   dbd5e:	ab08      	add	r3, sp, #32
   dbd60:	2125      	movs	r1, #37	; 0x25
   dbd62:	7019      	strb	r1, [r3, #0]
   dbd64:	b94f      	cbnz	r7, dbd7a <__strftime+0x5b6>
   dbd66:	1c58      	adds	r0, r3, #1
   dbd68:	497e      	ldr	r1, [pc, #504]	; (dbf64 <__strftime+0x7a0>)
   dbd6a:	9205      	str	r2, [sp, #20]
   dbd6c:	f7ff fca2 	bl	db6b4 <strcpy>
   dbd70:	9a05      	ldr	r2, [sp, #20]
   dbd72:	9200      	str	r2, [sp, #0]
   dbd74:	4633      	mov	r3, r6
   dbd76:	aa08      	add	r2, sp, #32
   dbd78:	e059      	b.n	dbe2e <__strftime+0x66a>
   dbd7a:	2130      	movs	r1, #48	; 0x30
   dbd7c:	1c98      	adds	r0, r3, #2
   dbd7e:	7059      	strb	r1, [r3, #1]
   dbd80:	e7f2      	b.n	dbd68 <__strftime+0x5a4>
   dbd82:	4979      	ldr	r1, [pc, #484]	; (dbf68 <__strftime+0x7a4>)
   dbd84:	4a79      	ldr	r2, [pc, #484]	; (dbf6c <__strftime+0x7a8>)
   dbd86:	68ab      	ldr	r3, [r5, #8]
   dbd88:	286b      	cmp	r0, #107	; 0x6b
   dbd8a:	bf08      	it	eq
   dbd8c:	460a      	moveq	r2, r1
   dbd8e:	e6d3      	b.n	dbb38 <__strftime+0x374>
   dbd90:	68ab      	ldr	r3, [r5, #8]
   dbd92:	b163      	cbz	r3, dbdae <__strftime+0x5ea>
   dbd94:	2b0c      	cmp	r3, #12
   dbd96:	d004      	beq.n	dbda2 <__strftime+0x5de>
   dbd98:	210c      	movs	r1, #12
   dbd9a:	fb93 f2f1 	sdiv	r2, r3, r1
   dbd9e:	fb01 3312 	mls	r3, r1, r2, r3
   dbda2:	4972      	ldr	r1, [pc, #456]	; (dbf6c <__strftime+0x7a8>)
   dbda4:	4a70      	ldr	r2, [pc, #448]	; (dbf68 <__strftime+0x7a4>)
   dbda6:	2849      	cmp	r0, #73	; 0x49
   dbda8:	bf08      	it	eq
   dbdaa:	460a      	moveq	r2, r1
   dbdac:	e6c4      	b.n	dbb38 <__strftime+0x374>
   dbdae:	230c      	movs	r3, #12
   dbdb0:	e7f7      	b.n	dbda2 <__strftime+0x5de>
   dbdb2:	69eb      	ldr	r3, [r5, #28]
   dbdb4:	4a6e      	ldr	r2, [pc, #440]	; (dbf70 <__strftime+0x7ac>)
   dbdb6:	3301      	adds	r3, #1
   dbdb8:	e6be      	b.n	dbb38 <__strftime+0x374>
   dbdba:	692b      	ldr	r3, [r5, #16]
   dbdbc:	3301      	adds	r3, #1
   dbdbe:	e72a      	b.n	dbc16 <__strftime+0x452>
   dbdc0:	686b      	ldr	r3, [r5, #4]
   dbdc2:	e728      	b.n	dbc16 <__strftime+0x452>
   dbdc4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dbdc8:	42a3      	cmp	r3, r4
   dbdca:	f67f ad2a 	bls.w	db822 <__strftime+0x5e>
   dbdce:	230a      	movs	r3, #10
   dbdd0:	f809 3004 	strb.w	r3, [r9, r4]
   dbdd4:	3401      	adds	r4, #1
   dbdd6:	e5f7      	b.n	db9c8 <__strftime+0x204>
   dbdd8:	68ab      	ldr	r3, [r5, #8]
   dbdda:	2b0b      	cmp	r3, #11
   dbddc:	bfcc      	ite	gt
   dbdde:	22a4      	movgt	r2, #164	; 0xa4
   dbde0:	22a0      	movle	r2, #160	; 0xa0
   dbde2:	4b64      	ldr	r3, [pc, #400]	; (dbf74 <__strftime+0x7b0>)
   dbde4:	4413      	add	r3, r2
   dbde6:	685e      	ldr	r6, [r3, #4]
   dbde8:	4630      	mov	r0, r6
   dbdea:	f000 f9e5 	bl	dc1b8 <strlen>
   dbdee:	1e72      	subs	r2, r6, #1
   dbdf0:	4420      	add	r0, r4
   dbdf2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   dbdf6:	42a0      	cmp	r0, r4
   dbdf8:	f43f ade6 	beq.w	db9c8 <__strftime+0x204>
   dbdfc:	42a6      	cmp	r6, r4
   dbdfe:	f67f ad10 	bls.w	db822 <__strftime+0x5e>
   dbe02:	f89b 1000 	ldrb.w	r1, [fp]
   dbe06:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   dbe0a:	2950      	cmp	r1, #80	; 0x50
   dbe0c:	d107      	bne.n	dbe1e <__strftime+0x65a>
   dbe0e:	495a      	ldr	r1, [pc, #360]	; (dbf78 <__strftime+0x7b4>)
   dbe10:	5cc9      	ldrb	r1, [r1, r3]
   dbe12:	f001 0103 	and.w	r1, r1, #3
   dbe16:	2901      	cmp	r1, #1
   dbe18:	bf08      	it	eq
   dbe1a:	3320      	addeq	r3, #32
   dbe1c:	b2db      	uxtb	r3, r3
   dbe1e:	f809 3004 	strb.w	r3, [r9, r4]
   dbe22:	3401      	adds	r4, #1
   dbe24:	e7e7      	b.n	dbdf6 <__strftime+0x632>
   dbe26:	686b      	ldr	r3, [r5, #4]
   dbe28:	9300      	str	r3, [sp, #0]
   dbe2a:	4a54      	ldr	r2, [pc, #336]	; (dbf7c <__strftime+0x7b8>)
   dbe2c:	68ab      	ldr	r3, [r5, #8]
   dbe2e:	eba8 0104 	sub.w	r1, r8, r4
   dbe32:	eb09 0004 	add.w	r0, r9, r4
   dbe36:	f7fc fab5 	bl	d83a4 <sniprintf>
   dbe3a:	e683      	b.n	dbb44 <__strftime+0x380>
   dbe3c:	6a2b      	ldr	r3, [r5, #32]
   dbe3e:	2b00      	cmp	r3, #0
   dbe40:	db79      	blt.n	dbf36 <__strftime+0x772>
   dbe42:	f000 fb99 	bl	dc578 <__tz_lock>
   dbe46:	9b04      	ldr	r3, [sp, #16]
   dbe48:	b90b      	cbnz	r3, dbe4e <__strftime+0x68a>
   dbe4a:	f000 fba1 	bl	dc590 <_tzset_unlocked>
   dbe4e:	f000 fd7b 	bl	dc948 <__gettzinfo>
   dbe52:	6a2b      	ldr	r3, [r5, #32]
   dbe54:	2b00      	cmp	r3, #0
   dbe56:	bfcc      	ite	gt
   dbe58:	2350      	movgt	r3, #80	; 0x50
   dbe5a:	2328      	movle	r3, #40	; 0x28
   dbe5c:	58c3      	ldr	r3, [r0, r3]
   dbe5e:	f1c3 0a00 	rsb	sl, r3, #0
   dbe62:	f000 fb8f 	bl	dc584 <__tz_unlock>
   dbe66:	2301      	movs	r3, #1
   dbe68:	9304      	str	r3, [sp, #16]
   dbe6a:	f8d5 c014 	ldr.w	ip, [r5, #20]
   dbe6e:	4662      	mov	r2, ip
   dbe70:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
   dbe74:	ea4f 73e2 	mov.w	r3, r2, asr #31
   dbe78:	9602      	str	r6, [sp, #8]
   dbe7a:	f143 36ff 	adc.w	r6, r3, #4294967295	; 0xffffffff
   dbe7e:	9603      	str	r6, [sp, #12]
   dbe80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   dbe84:	2e00      	cmp	r6, #0
   dbe86:	f177 0600 	sbcs.w	r6, r7, #0
   dbe8a:	eba8 0104 	sub.w	r1, r8, r4
   dbe8e:	eb09 0004 	add.w	r0, r9, r4
   dbe92:	da05      	bge.n	dbea0 <__strftime+0x6dc>
   dbe94:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
   dbe98:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   dbe9c:	9602      	str	r6, [sp, #8]
   dbe9e:	9303      	str	r3, [sp, #12]
   dbea0:	9b02      	ldr	r3, [sp, #8]
   dbea2:	089e      	lsrs	r6, r3, #2
   dbea4:	9b03      	ldr	r3, [sp, #12]
   dbea6:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
   dbeaa:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   dbeae:	109f      	asrs	r7, r3, #2
   dbeb0:	2364      	movs	r3, #100	; 0x64
   dbeb2:	fb92 f3f3 	sdiv	r3, r2, r3
   dbeb6:	1af6      	subs	r6, r6, r3
   dbeb8:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   dbebc:	f20c 122b 	addw	r2, ip, #299	; 0x12b
   dbec0:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dbec4:	fb92 f3f3 	sdiv	r3, r2, r3
   dbec8:	18f6      	adds	r6, r6, r3
   dbeca:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   dbece:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
   dbed2:	f240 136d 	movw	r3, #365	; 0x16d
   dbed6:	fb03 fc0c 	mul.w	ip, r3, ip
   dbeda:	69eb      	ldr	r3, [r5, #28]
   dbedc:	eb16 060c 	adds.w	r6, r6, ip
   dbee0:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
   dbee4:	18f6      	adds	r6, r6, r3
   dbee6:	f04f 0c18 	mov.w	ip, #24
   dbeea:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   dbeee:	fba6 230c 	umull	r2, r3, r6, ip
   dbef2:	68ae      	ldr	r6, [r5, #8]
   dbef4:	fb0c 3307 	mla	r3, ip, r7, r3
   dbef8:	1992      	adds	r2, r2, r6
   dbefa:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   dbefe:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   dbf02:	fba2 670c 	umull	r6, r7, r2, ip
   dbf06:	fb0c 7703 	mla	r7, ip, r3, r7
   dbf0a:	686b      	ldr	r3, [r5, #4]
   dbf0c:	18f6      	adds	r6, r6, r3
   dbf0e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   dbf12:	fba6 230c 	umull	r2, r3, r6, ip
   dbf16:	682e      	ldr	r6, [r5, #0]
   dbf18:	fb0c 3307 	mla	r3, ip, r7, r3
   dbf1c:	1992      	adds	r2, r2, r6
   dbf1e:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   dbf22:	ebb2 020a 	subs.w	r2, r2, sl
   dbf26:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
   dbf2a:	e9cd 2300 	strd	r2, r3, [sp]
   dbf2e:	4a14      	ldr	r2, [pc, #80]	; (dbf80 <__strftime+0x7bc>)
   dbf30:	f7fc fa38 	bl	d83a4 <sniprintf>
   dbf34:	e606      	b.n	dbb44 <__strftime+0x380>
   dbf36:	f04f 0a00 	mov.w	sl, #0
   dbf3a:	e796      	b.n	dbe6a <__strftime+0x6a6>
   dbf3c:	682b      	ldr	r3, [r5, #0]
   dbf3e:	e66a      	b.n	dbc16 <__strftime+0x452>
   dbf40:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dbf44:	42a3      	cmp	r3, r4
   dbf46:	f67f ac6c 	bls.w	db822 <__strftime+0x5e>
   dbf4a:	2309      	movs	r3, #9
   dbf4c:	e740      	b.n	dbdd0 <__strftime+0x60c>
   dbf4e:	682b      	ldr	r3, [r5, #0]
   dbf50:	9301      	str	r3, [sp, #4]
   dbf52:	686b      	ldr	r3, [r5, #4]
   dbf54:	9300      	str	r3, [sp, #0]
   dbf56:	4a0b      	ldr	r2, [pc, #44]	; (dbf84 <__strftime+0x7c0>)
   dbf58:	68ab      	ldr	r3, [r5, #8]
   dbf5a:	e5e0      	b.n	dbb1e <__strftime+0x35a>
   dbf5c:	fffff894 	.word	0xfffff894
   dbf60:	fffff895 	.word	0xfffff895
   dbf64:	000dd622 	.word	0x000dd622
   dbf68:	000dd603 	.word	0x000dd603
   dbf6c:	000dd611 	.word	0x000dd611
   dbf70:	000dd626 	.word	0x000dd626
   dbf74:	000dd774 	.word	0x000dd774
   dbf78:	000dd8ad 	.word	0x000dd8ad
   dbf7c:	000dd635 	.word	0x000dd635
   dbf80:	000dd62b 	.word	0x000dd62b
   dbf84:	000dd630 	.word	0x000dd630
   dbf88:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dbf8c:	42a3      	cmp	r3, r4
   dbf8e:	f67f ac48 	bls.w	db822 <__strftime+0x5e>
   dbf92:	69ab      	ldr	r3, [r5, #24]
   dbf94:	eb09 0204 	add.w	r2, r9, r4
   dbf98:	3401      	adds	r4, #1
   dbf9a:	b913      	cbnz	r3, dbfa2 <__strftime+0x7de>
   dbf9c:	2337      	movs	r3, #55	; 0x37
   dbf9e:	7013      	strb	r3, [r2, #0]
   dbfa0:	e512      	b.n	db9c8 <__strftime+0x204>
   dbfa2:	3330      	adds	r3, #48	; 0x30
   dbfa4:	e7fb      	b.n	dbf9e <__strftime+0x7da>
   dbfa6:	69eb      	ldr	r3, [r5, #28]
   dbfa8:	69aa      	ldr	r2, [r5, #24]
   dbfaa:	3307      	adds	r3, #7
   dbfac:	1a9b      	subs	r3, r3, r2
   dbfae:	2207      	movs	r2, #7
   dbfb0:	fb93 f3f2 	sdiv	r3, r3, r2
   dbfb4:	e62f      	b.n	dbc16 <__strftime+0x452>
   dbfb6:	4628      	mov	r0, r5
   dbfb8:	f7ff fba2 	bl	db700 <iso_year_adjust>
   dbfbc:	69aa      	ldr	r2, [r5, #24]
   dbfbe:	b132      	cbz	r2, dbfce <__strftime+0x80a>
   dbfc0:	3a01      	subs	r2, #1
   dbfc2:	2800      	cmp	r0, #0
   dbfc4:	dc28      	bgt.n	dc018 <__strftime+0x854>
   dbfc6:	69eb      	ldr	r3, [r5, #28]
   dbfc8:	d103      	bne.n	dbfd2 <__strftime+0x80e>
   dbfca:	330a      	adds	r3, #10
   dbfcc:	e7ee      	b.n	dbfac <__strftime+0x7e8>
   dbfce:	2206      	movs	r2, #6
   dbfd0:	e7f7      	b.n	dbfc2 <__strftime+0x7fe>
   dbfd2:	6968      	ldr	r0, [r5, #20]
   dbfd4:	2800      	cmp	r0, #0
   dbfd6:	eba2 0303 	sub.w	r3, r2, r3
   dbfda:	f240 726b 	movw	r2, #1899	; 0x76b
   dbfde:	bfa8      	it	ge
   dbfe0:	f06f 0264 	mvnge.w	r2, #100	; 0x64
   dbfe4:	4410      	add	r0, r2
   dbfe6:	0782      	lsls	r2, r0, #30
   dbfe8:	d105      	bne.n	dbff6 <__strftime+0x832>
   dbfea:	2264      	movs	r2, #100	; 0x64
   dbfec:	fb90 f1f2 	sdiv	r1, r0, r2
   dbff0:	fb02 0111 	mls	r1, r2, r1, r0
   dbff4:	b971      	cbnz	r1, dc014 <__strftime+0x850>
   dbff6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbffa:	fb90 f2f1 	sdiv	r2, r0, r1
   dbffe:	fb01 0212 	mls	r2, r1, r2, r0
   dc002:	fab2 f282 	clz	r2, r2
   dc006:	0952      	lsrs	r2, r2, #5
   dc008:	1a9a      	subs	r2, r3, r2
   dc00a:	2a05      	cmp	r2, #5
   dc00c:	bfb4      	ite	lt
   dc00e:	2335      	movlt	r3, #53	; 0x35
   dc010:	2334      	movge	r3, #52	; 0x34
   dc012:	e600      	b.n	dbc16 <__strftime+0x452>
   dc014:	2201      	movs	r2, #1
   dc016:	e7f7      	b.n	dc008 <__strftime+0x844>
   dc018:	2301      	movs	r3, #1
   dc01a:	e5fc      	b.n	dbc16 <__strftime+0x452>
   dc01c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dc020:	42a3      	cmp	r3, r4
   dc022:	f67f abfe 	bls.w	db822 <__strftime+0x5e>
   dc026:	69ab      	ldr	r3, [r5, #24]
   dc028:	3330      	adds	r3, #48	; 0x30
   dc02a:	e6d1      	b.n	dbdd0 <__strftime+0x60c>
   dc02c:	69ab      	ldr	r3, [r5, #24]
   dc02e:	b13b      	cbz	r3, dc040 <__strftime+0x87c>
   dc030:	3b01      	subs	r3, #1
   dc032:	69ea      	ldr	r2, [r5, #28]
   dc034:	3207      	adds	r2, #7
   dc036:	1ad2      	subs	r2, r2, r3
   dc038:	2307      	movs	r3, #7
   dc03a:	fb92 f3f3 	sdiv	r3, r2, r3
   dc03e:	e5ea      	b.n	dbc16 <__strftime+0x452>
   dc040:	2306      	movs	r3, #6
   dc042:	e7f6      	b.n	dc032 <__strftime+0x86e>
   dc044:	6968      	ldr	r0, [r5, #20]
   dc046:	2800      	cmp	r0, #0
   dc048:	db05      	blt.n	dc056 <__strftime+0x892>
   dc04a:	2264      	movs	r2, #100	; 0x64
   dc04c:	fb90 f3f2 	sdiv	r3, r0, r2
   dc050:	fb03 0312 	mls	r3, r3, r2, r0
   dc054:	e5df      	b.n	dbc16 <__strftime+0x452>
   dc056:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc05a:	f000 fc1b 	bl	dc894 <abs>
   dc05e:	e7f4      	b.n	dc04a <__strftime+0x886>
   dc060:	696b      	ldr	r3, [r5, #20]
   dc062:	4a4c      	ldr	r2, [pc, #304]	; (dc194 <__strftime+0x9d0>)
   dc064:	4293      	cmp	r3, r2
   dc066:	da09      	bge.n	dc07c <__strftime+0x8b8>
   dc068:	212d      	movs	r1, #45	; 0x2d
   dc06a:	f88d 1020 	strb.w	r1, [sp, #32]
   dc06e:	eba2 0a03 	sub.w	sl, r2, r3
   dc072:	b106      	cbz	r6, dc076 <__strftime+0x8b2>
   dc074:	3e01      	subs	r6, #1
   dc076:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   dc07a:	e00b      	b.n	dc094 <__strftime+0x8d0>
   dc07c:	2f2b      	cmp	r7, #43	; 0x2b
   dc07e:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
   dc082:	d106      	bne.n	dc092 <__strftime+0x8ce>
   dc084:	f242 730f 	movw	r3, #9999	; 0x270f
   dc088:	459a      	cmp	sl, r3
   dc08a:	d902      	bls.n	dc092 <__strftime+0x8ce>
   dc08c:	f88d 7020 	strb.w	r7, [sp, #32]
   dc090:	e7ef      	b.n	dc072 <__strftime+0x8ae>
   dc092:	ab08      	add	r3, sp, #32
   dc094:	2225      	movs	r2, #37	; 0x25
   dc096:	701a      	strb	r2, [r3, #0]
   dc098:	b937      	cbnz	r7, dc0a8 <__strftime+0x8e4>
   dc09a:	1c58      	adds	r0, r3, #1
   dc09c:	493e      	ldr	r1, [pc, #248]	; (dc198 <__strftime+0x9d4>)
   dc09e:	f7ff fb09 	bl	db6b4 <strcpy>
   dc0a2:	f8cd a000 	str.w	sl, [sp]
   dc0a6:	e665      	b.n	dbd74 <__strftime+0x5b0>
   dc0a8:	2230      	movs	r2, #48	; 0x30
   dc0aa:	1c98      	adds	r0, r3, #2
   dc0ac:	705a      	strb	r2, [r3, #1]
   dc0ae:	e7f5      	b.n	dc09c <__strftime+0x8d8>
   dc0b0:	6a2b      	ldr	r3, [r5, #32]
   dc0b2:	2b00      	cmp	r3, #0
   dc0b4:	f6ff ac88 	blt.w	db9c8 <__strftime+0x204>
   dc0b8:	f000 fa5e 	bl	dc578 <__tz_lock>
   dc0bc:	9b04      	ldr	r3, [sp, #16]
   dc0be:	b90b      	cbnz	r3, dc0c4 <__strftime+0x900>
   dc0c0:	f000 fa66 	bl	dc590 <_tzset_unlocked>
   dc0c4:	f000 fc40 	bl	dc948 <__gettzinfo>
   dc0c8:	6a2b      	ldr	r3, [r5, #32]
   dc0ca:	2b00      	cmp	r3, #0
   dc0cc:	bfcc      	ite	gt
   dc0ce:	2350      	movgt	r3, #80	; 0x50
   dc0d0:	2328      	movle	r3, #40	; 0x28
   dc0d2:	eb09 0704 	add.w	r7, r9, r4
   dc0d6:	58c6      	ldr	r6, [r0, r3]
   dc0d8:	f000 fa54 	bl	dc584 <__tz_unlock>
   dc0dc:	4276      	negs	r6, r6
   dc0de:	233c      	movs	r3, #60	; 0x3c
   dc0e0:	fb96 f0f3 	sdiv	r0, r6, r3
   dc0e4:	f000 fc34 	bl	dc950 <labs>
   dc0e8:	233c      	movs	r3, #60	; 0x3c
   dc0ea:	eba8 0a04 	sub.w	sl, r8, r4
   dc0ee:	fb90 f2f3 	sdiv	r2, r0, r3
   dc0f2:	fb02 0013 	mls	r0, r2, r3, r0
   dc0f6:	9000      	str	r0, [sp, #0]
   dc0f8:	4a28      	ldr	r2, [pc, #160]	; (dc19c <__strftime+0x9d8>)
   dc0fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc0fe:	4651      	mov	r1, sl
   dc100:	4638      	mov	r0, r7
   dc102:	fb96 f3f3 	sdiv	r3, r6, r3
   dc106:	f7fc f94d 	bl	d83a4 <sniprintf>
   dc10a:	2800      	cmp	r0, #0
   dc10c:	f6ff ab89 	blt.w	db822 <__strftime+0x5e>
   dc110:	4404      	add	r4, r0
   dc112:	45a0      	cmp	r8, r4
   dc114:	f67f ab85 	bls.w	db822 <__strftime+0x5e>
   dc118:	2301      	movs	r3, #1
   dc11a:	9304      	str	r3, [sp, #16]
   dc11c:	e454      	b.n	db9c8 <__strftime+0x204>
   dc11e:	6a2b      	ldr	r3, [r5, #32]
   dc120:	2b00      	cmp	r3, #0
   dc122:	f6ff ac51 	blt.w	db9c8 <__strftime+0x204>
   dc126:	f000 fa27 	bl	dc578 <__tz_lock>
   dc12a:	9b04      	ldr	r3, [sp, #16]
   dc12c:	b90b      	cbnz	r3, dc132 <__strftime+0x96e>
   dc12e:	f000 fa2f 	bl	dc590 <_tzset_unlocked>
   dc132:	6a2b      	ldr	r3, [r5, #32]
   dc134:	4a1a      	ldr	r2, [pc, #104]	; (dc1a0 <__strftime+0x9dc>)
   dc136:	2b00      	cmp	r3, #0
   dc138:	bfd4      	ite	le
   dc13a:	2300      	movle	r3, #0
   dc13c:	2301      	movgt	r3, #1
   dc13e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   dc142:	4630      	mov	r0, r6
   dc144:	f000 f838 	bl	dc1b8 <strlen>
   dc148:	3e01      	subs	r6, #1
   dc14a:	4420      	add	r0, r4
   dc14c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dc150:	42a0      	cmp	r0, r4
   dc152:	d102      	bne.n	dc15a <__strftime+0x996>
   dc154:	f000 fa16 	bl	dc584 <__tz_unlock>
   dc158:	e7de      	b.n	dc118 <__strftime+0x954>
   dc15a:	42a3      	cmp	r3, r4
   dc15c:	d905      	bls.n	dc16a <__strftime+0x9a6>
   dc15e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   dc162:	f809 2004 	strb.w	r2, [r9, r4]
   dc166:	3401      	adds	r4, #1
   dc168:	e7f2      	b.n	dc150 <__strftime+0x98c>
   dc16a:	f000 fa0b 	bl	dc584 <__tz_unlock>
   dc16e:	f7ff bb58 	b.w	db822 <__strftime+0x5e>
   dc172:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   dc176:	42a3      	cmp	r3, r4
   dc178:	f67f ab53 	bls.w	db822 <__strftime+0x5e>
   dc17c:	2325      	movs	r3, #37	; 0x25
   dc17e:	e627      	b.n	dbdd0 <__strftime+0x60c>
   dc180:	f1b8 0f00 	cmp.w	r8, #0
   dc184:	d002      	beq.n	dc18c <__strftime+0x9c8>
   dc186:	2300      	movs	r3, #0
   dc188:	f809 3004 	strb.w	r3, [r9, r4]
   dc18c:	4620      	mov	r0, r4
   dc18e:	b011      	add	sp, #68	; 0x44
   dc190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc194:	fffff894 	.word	0xfffff894
   dc198:	000dd622 	.word	0x000dd622
   dc19c:	000dd63f 	.word	0x000dd63f
   dc1a0:	2003e024 	.word	0x2003e024

000dc1a4 <strftime>:
   dc1a4:	b513      	push	{r0, r1, r4, lr}
   dc1a6:	4c03      	ldr	r4, [pc, #12]	; (dc1b4 <strftime+0x10>)
   dc1a8:	9400      	str	r4, [sp, #0]
   dc1aa:	f7ff fb0b 	bl	db7c4 <__strftime>
   dc1ae:	b002      	add	sp, #8
   dc1b0:	bd10      	pop	{r4, pc}
   dc1b2:	bf00      	nop
   dc1b4:	2003e088 	.word	0x2003e088

000dc1b8 <strlen>:
   dc1b8:	4603      	mov	r3, r0
   dc1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc1be:	2a00      	cmp	r2, #0
   dc1c0:	d1fb      	bne.n	dc1ba <strlen+0x2>
   dc1c2:	1a18      	subs	r0, r3, r0
   dc1c4:	3801      	subs	r0, #1
   dc1c6:	4770      	bx	lr

000dc1c8 <strncmp>:
   dc1c8:	b510      	push	{r4, lr}
   dc1ca:	b16a      	cbz	r2, dc1e8 <strncmp+0x20>
   dc1cc:	3901      	subs	r1, #1
   dc1ce:	1884      	adds	r4, r0, r2
   dc1d0:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc1d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc1d8:	4293      	cmp	r3, r2
   dc1da:	d103      	bne.n	dc1e4 <strncmp+0x1c>
   dc1dc:	42a0      	cmp	r0, r4
   dc1de:	d001      	beq.n	dc1e4 <strncmp+0x1c>
   dc1e0:	2b00      	cmp	r3, #0
   dc1e2:	d1f5      	bne.n	dc1d0 <strncmp+0x8>
   dc1e4:	1a98      	subs	r0, r3, r2
   dc1e6:	bd10      	pop	{r4, pc}
   dc1e8:	4610      	mov	r0, r2
   dc1ea:	e7fc      	b.n	dc1e6 <strncmp+0x1e>

000dc1ec <strncpy>:
   dc1ec:	b510      	push	{r4, lr}
   dc1ee:	3901      	subs	r1, #1
   dc1f0:	4603      	mov	r3, r0
   dc1f2:	b132      	cbz	r2, dc202 <strncpy+0x16>
   dc1f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc1f8:	f803 4b01 	strb.w	r4, [r3], #1
   dc1fc:	3a01      	subs	r2, #1
   dc1fe:	2c00      	cmp	r4, #0
   dc200:	d1f7      	bne.n	dc1f2 <strncpy+0x6>
   dc202:	441a      	add	r2, r3
   dc204:	2100      	movs	r1, #0
   dc206:	4293      	cmp	r3, r2
   dc208:	d100      	bne.n	dc20c <strncpy+0x20>
   dc20a:	bd10      	pop	{r4, pc}
   dc20c:	f803 1b01 	strb.w	r1, [r3], #1
   dc210:	e7f9      	b.n	dc206 <strncpy+0x1a>
	...

000dc214 <_strtol_l.isra.0>:
   dc214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc218:	4e3a      	ldr	r6, [pc, #232]	; (dc304 <_strtol_l.isra.0+0xf0>)
   dc21a:	4686      	mov	lr, r0
   dc21c:	468c      	mov	ip, r1
   dc21e:	4660      	mov	r0, ip
   dc220:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc224:	5da5      	ldrb	r5, [r4, r6]
   dc226:	f015 0508 	ands.w	r5, r5, #8
   dc22a:	d1f8      	bne.n	dc21e <_strtol_l.isra.0+0xa>
   dc22c:	2c2d      	cmp	r4, #45	; 0x2d
   dc22e:	d133      	bne.n	dc298 <_strtol_l.isra.0+0x84>
   dc230:	f89c 4000 	ldrb.w	r4, [ip]
   dc234:	f04f 0801 	mov.w	r8, #1
   dc238:	f100 0c02 	add.w	ip, r0, #2
   dc23c:	2b00      	cmp	r3, #0
   dc23e:	d05c      	beq.n	dc2fa <_strtol_l.isra.0+0xe6>
   dc240:	2b10      	cmp	r3, #16
   dc242:	d10c      	bne.n	dc25e <_strtol_l.isra.0+0x4a>
   dc244:	2c30      	cmp	r4, #48	; 0x30
   dc246:	d10a      	bne.n	dc25e <_strtol_l.isra.0+0x4a>
   dc248:	f89c 0000 	ldrb.w	r0, [ip]
   dc24c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc250:	2858      	cmp	r0, #88	; 0x58
   dc252:	d14d      	bne.n	dc2f0 <_strtol_l.isra.0+0xdc>
   dc254:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc258:	2310      	movs	r3, #16
   dc25a:	f10c 0c02 	add.w	ip, ip, #2
   dc25e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc262:	3f01      	subs	r7, #1
   dc264:	2600      	movs	r6, #0
   dc266:	fbb7 f9f3 	udiv	r9, r7, r3
   dc26a:	4630      	mov	r0, r6
   dc26c:	fb03 7a19 	mls	sl, r3, r9, r7
   dc270:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc274:	2d09      	cmp	r5, #9
   dc276:	d818      	bhi.n	dc2aa <_strtol_l.isra.0+0x96>
   dc278:	462c      	mov	r4, r5
   dc27a:	42a3      	cmp	r3, r4
   dc27c:	dd24      	ble.n	dc2c8 <_strtol_l.isra.0+0xb4>
   dc27e:	1c75      	adds	r5, r6, #1
   dc280:	d007      	beq.n	dc292 <_strtol_l.isra.0+0x7e>
   dc282:	4581      	cmp	r9, r0
   dc284:	d31d      	bcc.n	dc2c2 <_strtol_l.isra.0+0xae>
   dc286:	d101      	bne.n	dc28c <_strtol_l.isra.0+0x78>
   dc288:	45a2      	cmp	sl, r4
   dc28a:	db1a      	blt.n	dc2c2 <_strtol_l.isra.0+0xae>
   dc28c:	fb00 4003 	mla	r0, r0, r3, r4
   dc290:	2601      	movs	r6, #1
   dc292:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc296:	e7eb      	b.n	dc270 <_strtol_l.isra.0+0x5c>
   dc298:	2c2b      	cmp	r4, #43	; 0x2b
   dc29a:	bf08      	it	eq
   dc29c:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc2a0:	46a8      	mov	r8, r5
   dc2a2:	bf08      	it	eq
   dc2a4:	f100 0c02 	addeq.w	ip, r0, #2
   dc2a8:	e7c8      	b.n	dc23c <_strtol_l.isra.0+0x28>
   dc2aa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc2ae:	2d19      	cmp	r5, #25
   dc2b0:	d801      	bhi.n	dc2b6 <_strtol_l.isra.0+0xa2>
   dc2b2:	3c37      	subs	r4, #55	; 0x37
   dc2b4:	e7e1      	b.n	dc27a <_strtol_l.isra.0+0x66>
   dc2b6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc2ba:	2d19      	cmp	r5, #25
   dc2bc:	d804      	bhi.n	dc2c8 <_strtol_l.isra.0+0xb4>
   dc2be:	3c57      	subs	r4, #87	; 0x57
   dc2c0:	e7db      	b.n	dc27a <_strtol_l.isra.0+0x66>
   dc2c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc2c6:	e7e4      	b.n	dc292 <_strtol_l.isra.0+0x7e>
   dc2c8:	1c73      	adds	r3, r6, #1
   dc2ca:	d106      	bne.n	dc2da <_strtol_l.isra.0+0xc6>
   dc2cc:	2322      	movs	r3, #34	; 0x22
   dc2ce:	f8ce 3000 	str.w	r3, [lr]
   dc2d2:	4638      	mov	r0, r7
   dc2d4:	b942      	cbnz	r2, dc2e8 <_strtol_l.isra.0+0xd4>
   dc2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc2da:	f1b8 0f00 	cmp.w	r8, #0
   dc2de:	d000      	beq.n	dc2e2 <_strtol_l.isra.0+0xce>
   dc2e0:	4240      	negs	r0, r0
   dc2e2:	2a00      	cmp	r2, #0
   dc2e4:	d0f7      	beq.n	dc2d6 <_strtol_l.isra.0+0xc2>
   dc2e6:	b10e      	cbz	r6, dc2ec <_strtol_l.isra.0+0xd8>
   dc2e8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc2ec:	6011      	str	r1, [r2, #0]
   dc2ee:	e7f2      	b.n	dc2d6 <_strtol_l.isra.0+0xc2>
   dc2f0:	2430      	movs	r4, #48	; 0x30
   dc2f2:	2b00      	cmp	r3, #0
   dc2f4:	d1b3      	bne.n	dc25e <_strtol_l.isra.0+0x4a>
   dc2f6:	2308      	movs	r3, #8
   dc2f8:	e7b1      	b.n	dc25e <_strtol_l.isra.0+0x4a>
   dc2fa:	2c30      	cmp	r4, #48	; 0x30
   dc2fc:	d0a4      	beq.n	dc248 <_strtol_l.isra.0+0x34>
   dc2fe:	230a      	movs	r3, #10
   dc300:	e7ad      	b.n	dc25e <_strtol_l.isra.0+0x4a>
   dc302:	bf00      	nop
   dc304:	000dd8ad 	.word	0x000dd8ad

000dc308 <strtol>:
   dc308:	4613      	mov	r3, r2
   dc30a:	460a      	mov	r2, r1
   dc30c:	4601      	mov	r1, r0
   dc30e:	4802      	ldr	r0, [pc, #8]	; (dc318 <strtol+0x10>)
   dc310:	6800      	ldr	r0, [r0, #0]
   dc312:	f7ff bf7f 	b.w	dc214 <_strtol_l.isra.0>
   dc316:	bf00      	nop
   dc318:	2003dfc0 	.word	0x2003dfc0

000dc31c <_strtoul_l.isra.0>:
   dc31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc320:	4e3b      	ldr	r6, [pc, #236]	; (dc410 <_strtoul_l.isra.0+0xf4>)
   dc322:	4686      	mov	lr, r0
   dc324:	468c      	mov	ip, r1
   dc326:	4660      	mov	r0, ip
   dc328:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc32c:	5da5      	ldrb	r5, [r4, r6]
   dc32e:	f015 0508 	ands.w	r5, r5, #8
   dc332:	d1f8      	bne.n	dc326 <_strtoul_l.isra.0+0xa>
   dc334:	2c2d      	cmp	r4, #45	; 0x2d
   dc336:	d134      	bne.n	dc3a2 <_strtoul_l.isra.0+0x86>
   dc338:	f89c 4000 	ldrb.w	r4, [ip]
   dc33c:	f04f 0801 	mov.w	r8, #1
   dc340:	f100 0c02 	add.w	ip, r0, #2
   dc344:	2b00      	cmp	r3, #0
   dc346:	d05e      	beq.n	dc406 <_strtoul_l.isra.0+0xea>
   dc348:	2b10      	cmp	r3, #16
   dc34a:	d10c      	bne.n	dc366 <_strtoul_l.isra.0+0x4a>
   dc34c:	2c30      	cmp	r4, #48	; 0x30
   dc34e:	d10a      	bne.n	dc366 <_strtoul_l.isra.0+0x4a>
   dc350:	f89c 0000 	ldrb.w	r0, [ip]
   dc354:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc358:	2858      	cmp	r0, #88	; 0x58
   dc35a:	d14f      	bne.n	dc3fc <_strtoul_l.isra.0+0xe0>
   dc35c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc360:	2310      	movs	r3, #16
   dc362:	f10c 0c02 	add.w	ip, ip, #2
   dc366:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc36a:	2500      	movs	r5, #0
   dc36c:	fbb7 f7f3 	udiv	r7, r7, r3
   dc370:	fb03 f907 	mul.w	r9, r3, r7
   dc374:	ea6f 0909 	mvn.w	r9, r9
   dc378:	4628      	mov	r0, r5
   dc37a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   dc37e:	2e09      	cmp	r6, #9
   dc380:	d818      	bhi.n	dc3b4 <_strtoul_l.isra.0+0x98>
   dc382:	4634      	mov	r4, r6
   dc384:	42a3      	cmp	r3, r4
   dc386:	dd24      	ble.n	dc3d2 <_strtoul_l.isra.0+0xb6>
   dc388:	2d00      	cmp	r5, #0
   dc38a:	db1f      	blt.n	dc3cc <_strtoul_l.isra.0+0xb0>
   dc38c:	4287      	cmp	r7, r0
   dc38e:	d31d      	bcc.n	dc3cc <_strtoul_l.isra.0+0xb0>
   dc390:	d101      	bne.n	dc396 <_strtoul_l.isra.0+0x7a>
   dc392:	45a1      	cmp	r9, r4
   dc394:	db1a      	blt.n	dc3cc <_strtoul_l.isra.0+0xb0>
   dc396:	fb00 4003 	mla	r0, r0, r3, r4
   dc39a:	2501      	movs	r5, #1
   dc39c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc3a0:	e7eb      	b.n	dc37a <_strtoul_l.isra.0+0x5e>
   dc3a2:	2c2b      	cmp	r4, #43	; 0x2b
   dc3a4:	bf08      	it	eq
   dc3a6:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc3aa:	46a8      	mov	r8, r5
   dc3ac:	bf08      	it	eq
   dc3ae:	f100 0c02 	addeq.w	ip, r0, #2
   dc3b2:	e7c7      	b.n	dc344 <_strtoul_l.isra.0+0x28>
   dc3b4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   dc3b8:	2e19      	cmp	r6, #25
   dc3ba:	d801      	bhi.n	dc3c0 <_strtoul_l.isra.0+0xa4>
   dc3bc:	3c37      	subs	r4, #55	; 0x37
   dc3be:	e7e1      	b.n	dc384 <_strtoul_l.isra.0+0x68>
   dc3c0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   dc3c4:	2e19      	cmp	r6, #25
   dc3c6:	d804      	bhi.n	dc3d2 <_strtoul_l.isra.0+0xb6>
   dc3c8:	3c57      	subs	r4, #87	; 0x57
   dc3ca:	e7db      	b.n	dc384 <_strtoul_l.isra.0+0x68>
   dc3cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc3d0:	e7e4      	b.n	dc39c <_strtoul_l.isra.0+0x80>
   dc3d2:	2d00      	cmp	r5, #0
   dc3d4:	da07      	bge.n	dc3e6 <_strtoul_l.isra.0+0xca>
   dc3d6:	2322      	movs	r3, #34	; 0x22
   dc3d8:	f8ce 3000 	str.w	r3, [lr]
   dc3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc3e0:	b942      	cbnz	r2, dc3f4 <_strtoul_l.isra.0+0xd8>
   dc3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc3e6:	f1b8 0f00 	cmp.w	r8, #0
   dc3ea:	d000      	beq.n	dc3ee <_strtoul_l.isra.0+0xd2>
   dc3ec:	4240      	negs	r0, r0
   dc3ee:	2a00      	cmp	r2, #0
   dc3f0:	d0f7      	beq.n	dc3e2 <_strtoul_l.isra.0+0xc6>
   dc3f2:	b10d      	cbz	r5, dc3f8 <_strtoul_l.isra.0+0xdc>
   dc3f4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc3f8:	6011      	str	r1, [r2, #0]
   dc3fa:	e7f2      	b.n	dc3e2 <_strtoul_l.isra.0+0xc6>
   dc3fc:	2430      	movs	r4, #48	; 0x30
   dc3fe:	2b00      	cmp	r3, #0
   dc400:	d1b1      	bne.n	dc366 <_strtoul_l.isra.0+0x4a>
   dc402:	2308      	movs	r3, #8
   dc404:	e7af      	b.n	dc366 <_strtoul_l.isra.0+0x4a>
   dc406:	2c30      	cmp	r4, #48	; 0x30
   dc408:	d0a2      	beq.n	dc350 <_strtoul_l.isra.0+0x34>
   dc40a:	230a      	movs	r3, #10
   dc40c:	e7ab      	b.n	dc366 <_strtoul_l.isra.0+0x4a>
   dc40e:	bf00      	nop
   dc410:	000dd8ad 	.word	0x000dd8ad

000dc414 <strtoul>:
   dc414:	4613      	mov	r3, r2
   dc416:	460a      	mov	r2, r1
   dc418:	4601      	mov	r1, r0
   dc41a:	4802      	ldr	r0, [pc, #8]	; (dc424 <strtoul+0x10>)
   dc41c:	6800      	ldr	r0, [r0, #0]
   dc41e:	f7ff bf7d 	b.w	dc31c <_strtoul_l.isra.0>
   dc422:	bf00      	nop
   dc424:	2003dfc0 	.word	0x2003dfc0

000dc428 <__tzcalc_limits>:
   dc428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc42c:	4680      	mov	r8, r0
   dc42e:	f000 fa8b 	bl	dc948 <__gettzinfo>
   dc432:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc436:	4598      	cmp	r8, r3
   dc438:	f340 8098 	ble.w	dc56c <__tzcalc_limits+0x144>
   dc43c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc440:	4443      	add	r3, r8
   dc442:	109b      	asrs	r3, r3, #2
   dc444:	f240 126d 	movw	r2, #365	; 0x16d
   dc448:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   dc44c:	fb02 3505 	mla	r5, r2, r5, r3
   dc450:	f06f 0263 	mvn.w	r2, #99	; 0x63
   dc454:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   dc458:	fb93 f3f2 	sdiv	r3, r3, r2
   dc45c:	441d      	add	r5, r3
   dc45e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc462:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc466:	fb98 f7f3 	sdiv	r7, r8, r3
   dc46a:	fb03 8717 	mls	r7, r3, r7, r8
   dc46e:	4442      	add	r2, r8
   dc470:	fab7 fc87 	clz	ip, r7
   dc474:	fbb2 f2f3 	udiv	r2, r2, r3
   dc478:	f008 0303 	and.w	r3, r8, #3
   dc47c:	4415      	add	r5, r2
   dc47e:	2264      	movs	r2, #100	; 0x64
   dc480:	f8c0 8004 	str.w	r8, [r0, #4]
   dc484:	fb98 f6f2 	sdiv	r6, r8, r2
   dc488:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   dc48c:	fb02 8616 	mls	r6, r2, r6, r8
   dc490:	4604      	mov	r4, r0
   dc492:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   dc496:	9300      	str	r3, [sp, #0]
   dc498:	f04f 0e07 	mov.w	lr, #7
   dc49c:	7a22      	ldrb	r2, [r4, #8]
   dc49e:	6963      	ldr	r3, [r4, #20]
   dc4a0:	2a4a      	cmp	r2, #74	; 0x4a
   dc4a2:	d128      	bne.n	dc4f6 <__tzcalc_limits+0xce>
   dc4a4:	9900      	ldr	r1, [sp, #0]
   dc4a6:	18ea      	adds	r2, r5, r3
   dc4a8:	b901      	cbnz	r1, dc4ac <__tzcalc_limits+0x84>
   dc4aa:	b906      	cbnz	r6, dc4ae <__tzcalc_limits+0x86>
   dc4ac:	bb0f      	cbnz	r7, dc4f2 <__tzcalc_limits+0xca>
   dc4ae:	2b3b      	cmp	r3, #59	; 0x3b
   dc4b0:	bfd4      	ite	le
   dc4b2:	2300      	movle	r3, #0
   dc4b4:	2301      	movgt	r3, #1
   dc4b6:	4413      	add	r3, r2
   dc4b8:	1e5a      	subs	r2, r3, #1
   dc4ba:	69a3      	ldr	r3, [r4, #24]
   dc4bc:	492c      	ldr	r1, [pc, #176]	; (dc570 <__tzcalc_limits+0x148>)
   dc4be:	fb01 3202 	mla	r2, r1, r2, r3
   dc4c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   dc4c4:	4413      	add	r3, r2
   dc4c6:	461a      	mov	r2, r3
   dc4c8:	17db      	asrs	r3, r3, #31
   dc4ca:	e9c4 2308 	strd	r2, r3, [r4, #32]
   dc4ce:	3428      	adds	r4, #40	; 0x28
   dc4d0:	45a3      	cmp	fp, r4
   dc4d2:	d1e3      	bne.n	dc49c <__tzcalc_limits+0x74>
   dc4d4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   dc4d8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   dc4dc:	4294      	cmp	r4, r2
   dc4de:	eb75 0303 	sbcs.w	r3, r5, r3
   dc4e2:	bfb4      	ite	lt
   dc4e4:	2301      	movlt	r3, #1
   dc4e6:	2300      	movge	r3, #0
   dc4e8:	6003      	str	r3, [r0, #0]
   dc4ea:	2001      	movs	r0, #1
   dc4ec:	b003      	add	sp, #12
   dc4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc4f2:	2300      	movs	r3, #0
   dc4f4:	e7df      	b.n	dc4b6 <__tzcalc_limits+0x8e>
   dc4f6:	2a44      	cmp	r2, #68	; 0x44
   dc4f8:	d101      	bne.n	dc4fe <__tzcalc_limits+0xd6>
   dc4fa:	18ea      	adds	r2, r5, r3
   dc4fc:	e7dd      	b.n	dc4ba <__tzcalc_limits+0x92>
   dc4fe:	9a00      	ldr	r2, [sp, #0]
   dc500:	bb72      	cbnz	r2, dc560 <__tzcalc_limits+0x138>
   dc502:	2e00      	cmp	r6, #0
   dc504:	bf0c      	ite	eq
   dc506:	46e0      	moveq	r8, ip
   dc508:	f04f 0801 	movne.w	r8, #1
   dc50c:	4919      	ldr	r1, [pc, #100]	; (dc574 <__tzcalc_limits+0x14c>)
   dc50e:	68e2      	ldr	r2, [r4, #12]
   dc510:	9201      	str	r2, [sp, #4]
   dc512:	f04f 0a30 	mov.w	sl, #48	; 0x30
   dc516:	fb0a 1808 	mla	r8, sl, r8, r1
   dc51a:	462a      	mov	r2, r5
   dc51c:	f04f 0900 	mov.w	r9, #0
   dc520:	f1a8 0804 	sub.w	r8, r8, #4
   dc524:	9901      	ldr	r1, [sp, #4]
   dc526:	f109 0901 	add.w	r9, r9, #1
   dc52a:	4549      	cmp	r1, r9
   dc52c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   dc530:	dc18      	bgt.n	dc564 <__tzcalc_limits+0x13c>
   dc532:	f102 0804 	add.w	r8, r2, #4
   dc536:	fb98 f9fe 	sdiv	r9, r8, lr
   dc53a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   dc53e:	eba8 0909 	sub.w	r9, r8, r9
   dc542:	ebb3 0909 	subs.w	r9, r3, r9
   dc546:	6923      	ldr	r3, [r4, #16]
   dc548:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc54c:	bf48      	it	mi
   dc54e:	f109 0907 	addmi.w	r9, r9, #7
   dc552:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc556:	444b      	add	r3, r9
   dc558:	4553      	cmp	r3, sl
   dc55a:	da05      	bge.n	dc568 <__tzcalc_limits+0x140>
   dc55c:	441a      	add	r2, r3
   dc55e:	e7ac      	b.n	dc4ba <__tzcalc_limits+0x92>
   dc560:	46e0      	mov	r8, ip
   dc562:	e7d3      	b.n	dc50c <__tzcalc_limits+0xe4>
   dc564:	4452      	add	r2, sl
   dc566:	e7dd      	b.n	dc524 <__tzcalc_limits+0xfc>
   dc568:	3b07      	subs	r3, #7
   dc56a:	e7f5      	b.n	dc558 <__tzcalc_limits+0x130>
   dc56c:	2000      	movs	r0, #0
   dc56e:	e7bd      	b.n	dc4ec <__tzcalc_limits+0xc4>
   dc570:	00015180 	.word	0x00015180
   dc574:	000dd590 	.word	0x000dd590

000dc578 <__tz_lock>:
   dc578:	4801      	ldr	r0, [pc, #4]	; (dc580 <__tz_lock+0x8>)
   dc57a:	f000 b9ed 	b.w	dc958 <__retarget_lock_acquire>
   dc57e:	bf00      	nop
   dc580:	2003e7eb 	.word	0x2003e7eb

000dc584 <__tz_unlock>:
   dc584:	4801      	ldr	r0, [pc, #4]	; (dc58c <__tz_unlock+0x8>)
   dc586:	f000 b9e9 	b.w	dc95c <__retarget_lock_release>
   dc58a:	bf00      	nop
   dc58c:	2003e7eb 	.word	0x2003e7eb

000dc590 <_tzset_unlocked>:
   dc590:	4b01      	ldr	r3, [pc, #4]	; (dc598 <_tzset_unlocked+0x8>)
   dc592:	6818      	ldr	r0, [r3, #0]
   dc594:	f000 b802 	b.w	dc59c <_tzset_unlocked_r>
   dc598:	2003dfc0 	.word	0x2003dfc0

000dc59c <_tzset_unlocked_r>:
   dc59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc5a0:	b08d      	sub	sp, #52	; 0x34
   dc5a2:	4607      	mov	r7, r0
   dc5a4:	f000 f9d0 	bl	dc948 <__gettzinfo>
   dc5a8:	49ae      	ldr	r1, [pc, #696]	; (dc864 <_tzset_unlocked_r+0x2c8>)
   dc5aa:	4eaf      	ldr	r6, [pc, #700]	; (dc868 <_tzset_unlocked_r+0x2cc>)
   dc5ac:	4605      	mov	r5, r0
   dc5ae:	4638      	mov	r0, r7
   dc5b0:	f000 f9c2 	bl	dc938 <_getenv_r>
   dc5b4:	4604      	mov	r4, r0
   dc5b6:	b970      	cbnz	r0, dc5d6 <_tzset_unlocked_r+0x3a>
   dc5b8:	4bac      	ldr	r3, [pc, #688]	; (dc86c <_tzset_unlocked_r+0x2d0>)
   dc5ba:	4aad      	ldr	r2, [pc, #692]	; (dc870 <_tzset_unlocked_r+0x2d4>)
   dc5bc:	6018      	str	r0, [r3, #0]
   dc5be:	4bad      	ldr	r3, [pc, #692]	; (dc874 <_tzset_unlocked_r+0x2d8>)
   dc5c0:	6018      	str	r0, [r3, #0]
   dc5c2:	4bad      	ldr	r3, [pc, #692]	; (dc878 <_tzset_unlocked_r+0x2dc>)
   dc5c4:	6830      	ldr	r0, [r6, #0]
   dc5c6:	e9c3 2200 	strd	r2, r2, [r3]
   dc5ca:	f7fb fec3 	bl	d8354 <free>
   dc5ce:	6034      	str	r4, [r6, #0]
   dc5d0:	b00d      	add	sp, #52	; 0x34
   dc5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5d6:	6831      	ldr	r1, [r6, #0]
   dc5d8:	2900      	cmp	r1, #0
   dc5da:	d15f      	bne.n	dc69c <_tzset_unlocked_r+0x100>
   dc5dc:	6830      	ldr	r0, [r6, #0]
   dc5de:	f7fb feb9 	bl	d8354 <free>
   dc5e2:	4620      	mov	r0, r4
   dc5e4:	f7ff fde8 	bl	dc1b8 <strlen>
   dc5e8:	1c41      	adds	r1, r0, #1
   dc5ea:	4638      	mov	r0, r7
   dc5ec:	f7fb fef2 	bl	d83d4 <_malloc_r>
   dc5f0:	6030      	str	r0, [r6, #0]
   dc5f2:	2800      	cmp	r0, #0
   dc5f4:	d157      	bne.n	dc6a6 <_tzset_unlocked_r+0x10a>
   dc5f6:	7823      	ldrb	r3, [r4, #0]
   dc5f8:	4aa0      	ldr	r2, [pc, #640]	; (dc87c <_tzset_unlocked_r+0x2e0>)
   dc5fa:	49a1      	ldr	r1, [pc, #644]	; (dc880 <_tzset_unlocked_r+0x2e4>)
   dc5fc:	2b3a      	cmp	r3, #58	; 0x3a
   dc5fe:	bf08      	it	eq
   dc600:	3401      	addeq	r4, #1
   dc602:	ae0a      	add	r6, sp, #40	; 0x28
   dc604:	4633      	mov	r3, r6
   dc606:	4620      	mov	r0, r4
   dc608:	f7fb febc 	bl	d8384 <siscanf>
   dc60c:	2800      	cmp	r0, #0
   dc60e:	dddf      	ble.n	dc5d0 <_tzset_unlocked_r+0x34>
   dc610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc612:	18e7      	adds	r7, r4, r3
   dc614:	5ce3      	ldrb	r3, [r4, r3]
   dc616:	2b2d      	cmp	r3, #45	; 0x2d
   dc618:	d149      	bne.n	dc6ae <_tzset_unlocked_r+0x112>
   dc61a:	3701      	adds	r7, #1
   dc61c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dc620:	f10d 0a20 	add.w	sl, sp, #32
   dc624:	f10d 0b1e 	add.w	fp, sp, #30
   dc628:	f04f 0800 	mov.w	r8, #0
   dc62c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   dc630:	4994      	ldr	r1, [pc, #592]	; (dc884 <_tzset_unlocked_r+0x2e8>)
   dc632:	9603      	str	r6, [sp, #12]
   dc634:	f8cd b000 	str.w	fp, [sp]
   dc638:	4633      	mov	r3, r6
   dc63a:	aa07      	add	r2, sp, #28
   dc63c:	4638      	mov	r0, r7
   dc63e:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc642:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc646:	f7fb fe9d 	bl	d8384 <siscanf>
   dc64a:	4540      	cmp	r0, r8
   dc64c:	ddc0      	ble.n	dc5d0 <_tzset_unlocked_r+0x34>
   dc64e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   dc652:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dc656:	f8df 9238 	ldr.w	r9, [pc, #568]	; dc890 <_tzset_unlocked_r+0x2f4>
   dc65a:	213c      	movs	r1, #60	; 0x3c
   dc65c:	fb01 2203 	mla	r2, r1, r3, r2
   dc660:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   dc664:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc668:	fb01 2303 	mla	r3, r1, r3, r2
   dc66c:	435c      	muls	r4, r3
   dc66e:	62ac      	str	r4, [r5, #40]	; 0x28
   dc670:	4c81      	ldr	r4, [pc, #516]	; (dc878 <_tzset_unlocked_r+0x2dc>)
   dc672:	4b82      	ldr	r3, [pc, #520]	; (dc87c <_tzset_unlocked_r+0x2e0>)
   dc674:	6023      	str	r3, [r4, #0]
   dc676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc678:	4981      	ldr	r1, [pc, #516]	; (dc880 <_tzset_unlocked_r+0x2e4>)
   dc67a:	441f      	add	r7, r3
   dc67c:	464a      	mov	r2, r9
   dc67e:	4633      	mov	r3, r6
   dc680:	4638      	mov	r0, r7
   dc682:	f7fb fe7f 	bl	d8384 <siscanf>
   dc686:	4540      	cmp	r0, r8
   dc688:	dc16      	bgt.n	dc6b8 <_tzset_unlocked_r+0x11c>
   dc68a:	6823      	ldr	r3, [r4, #0]
   dc68c:	6063      	str	r3, [r4, #4]
   dc68e:	4b77      	ldr	r3, [pc, #476]	; (dc86c <_tzset_unlocked_r+0x2d0>)
   dc690:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   dc692:	601a      	str	r2, [r3, #0]
   dc694:	4b77      	ldr	r3, [pc, #476]	; (dc874 <_tzset_unlocked_r+0x2d8>)
   dc696:	f8c3 8000 	str.w	r8, [r3]
   dc69a:	e799      	b.n	dc5d0 <_tzset_unlocked_r+0x34>
   dc69c:	f7ff f800 	bl	db6a0 <strcmp>
   dc6a0:	2800      	cmp	r0, #0
   dc6a2:	d19b      	bne.n	dc5dc <_tzset_unlocked_r+0x40>
   dc6a4:	e794      	b.n	dc5d0 <_tzset_unlocked_r+0x34>
   dc6a6:	4621      	mov	r1, r4
   dc6a8:	f7ff f804 	bl	db6b4 <strcpy>
   dc6ac:	e7a3      	b.n	dc5f6 <_tzset_unlocked_r+0x5a>
   dc6ae:	2b2b      	cmp	r3, #43	; 0x2b
   dc6b0:	bf08      	it	eq
   dc6b2:	3701      	addeq	r7, #1
   dc6b4:	2401      	movs	r4, #1
   dc6b6:	e7b3      	b.n	dc620 <_tzset_unlocked_r+0x84>
   dc6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc6ba:	f8c4 9004 	str.w	r9, [r4, #4]
   dc6be:	18fc      	adds	r4, r7, r3
   dc6c0:	5cfb      	ldrb	r3, [r7, r3]
   dc6c2:	2b2d      	cmp	r3, #45	; 0x2d
   dc6c4:	f040 808b 	bne.w	dc7de <_tzset_unlocked_r+0x242>
   dc6c8:	3401      	adds	r4, #1
   dc6ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc6ce:	2300      	movs	r3, #0
   dc6d0:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc6d4:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc6d8:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc6dc:	930a      	str	r3, [sp, #40]	; 0x28
   dc6de:	e9cd a602 	strd	sl, r6, [sp, #8]
   dc6e2:	e9cd b600 	strd	fp, r6, [sp]
   dc6e6:	4967      	ldr	r1, [pc, #412]	; (dc884 <_tzset_unlocked_r+0x2e8>)
   dc6e8:	4633      	mov	r3, r6
   dc6ea:	aa07      	add	r2, sp, #28
   dc6ec:	4620      	mov	r0, r4
   dc6ee:	f7fb fe49 	bl	d8384 <siscanf>
   dc6f2:	2800      	cmp	r0, #0
   dc6f4:	dc78      	bgt.n	dc7e8 <_tzset_unlocked_r+0x24c>
   dc6f6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   dc6f8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   dc6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc6fe:	652f      	str	r7, [r5, #80]	; 0x50
   dc700:	441c      	add	r4, r3
   dc702:	462f      	mov	r7, r5
   dc704:	f04f 0900 	mov.w	r9, #0
   dc708:	7823      	ldrb	r3, [r4, #0]
   dc70a:	2b2c      	cmp	r3, #44	; 0x2c
   dc70c:	bf08      	it	eq
   dc70e:	3401      	addeq	r4, #1
   dc710:	f894 8000 	ldrb.w	r8, [r4]
   dc714:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc718:	d178      	bne.n	dc80c <_tzset_unlocked_r+0x270>
   dc71a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc71e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   dc722:	ab09      	add	r3, sp, #36	; 0x24
   dc724:	9300      	str	r3, [sp, #0]
   dc726:	4958      	ldr	r1, [pc, #352]	; (dc888 <_tzset_unlocked_r+0x2ec>)
   dc728:	9603      	str	r6, [sp, #12]
   dc72a:	4633      	mov	r3, r6
   dc72c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc730:	4620      	mov	r0, r4
   dc732:	f7fb fe27 	bl	d8384 <siscanf>
   dc736:	2803      	cmp	r0, #3
   dc738:	f47f af4a 	bne.w	dc5d0 <_tzset_unlocked_r+0x34>
   dc73c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc740:	1e4b      	subs	r3, r1, #1
   dc742:	2b0b      	cmp	r3, #11
   dc744:	f63f af44 	bhi.w	dc5d0 <_tzset_unlocked_r+0x34>
   dc748:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc74c:	1e53      	subs	r3, r2, #1
   dc74e:	2b04      	cmp	r3, #4
   dc750:	f63f af3e 	bhi.w	dc5d0 <_tzset_unlocked_r+0x34>
   dc754:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc758:	2b06      	cmp	r3, #6
   dc75a:	f63f af39 	bhi.w	dc5d0 <_tzset_unlocked_r+0x34>
   dc75e:	e9c7 1203 	strd	r1, r2, [r7, #12]
   dc762:	f887 8008 	strb.w	r8, [r7, #8]
   dc766:	617b      	str	r3, [r7, #20]
   dc768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc76a:	eb04 0803 	add.w	r8, r4, r3
   dc76e:	2302      	movs	r3, #2
   dc770:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc774:	2300      	movs	r3, #0
   dc776:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc77a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc77e:	930a      	str	r3, [sp, #40]	; 0x28
   dc780:	f898 3000 	ldrb.w	r3, [r8]
   dc784:	2b2f      	cmp	r3, #47	; 0x2f
   dc786:	d109      	bne.n	dc79c <_tzset_unlocked_r+0x200>
   dc788:	e9cd a602 	strd	sl, r6, [sp, #8]
   dc78c:	e9cd b600 	strd	fp, r6, [sp]
   dc790:	493e      	ldr	r1, [pc, #248]	; (dc88c <_tzset_unlocked_r+0x2f0>)
   dc792:	4633      	mov	r3, r6
   dc794:	aa07      	add	r2, sp, #28
   dc796:	4640      	mov	r0, r8
   dc798:	f7fb fdf4 	bl	d8384 <siscanf>
   dc79c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   dc7a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dc7a4:	213c      	movs	r1, #60	; 0x3c
   dc7a6:	fb01 2203 	mla	r2, r1, r3, r2
   dc7aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   dc7ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc7b2:	fb01 2303 	mla	r3, r1, r3, r2
   dc7b6:	61bb      	str	r3, [r7, #24]
   dc7b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dc7ba:	3728      	adds	r7, #40	; 0x28
   dc7bc:	4444      	add	r4, r8
   dc7be:	f1b9 0f00 	cmp.w	r9, #0
   dc7c2:	d020      	beq.n	dc806 <_tzset_unlocked_r+0x26a>
   dc7c4:	6868      	ldr	r0, [r5, #4]
   dc7c6:	f7ff fe2f 	bl	dc428 <__tzcalc_limits>
   dc7ca:	4b28      	ldr	r3, [pc, #160]	; (dc86c <_tzset_unlocked_r+0x2d0>)
   dc7cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   dc7ce:	601a      	str	r2, [r3, #0]
   dc7d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   dc7d2:	1a9b      	subs	r3, r3, r2
   dc7d4:	4a27      	ldr	r2, [pc, #156]	; (dc874 <_tzset_unlocked_r+0x2d8>)
   dc7d6:	bf18      	it	ne
   dc7d8:	2301      	movne	r3, #1
   dc7da:	6013      	str	r3, [r2, #0]
   dc7dc:	e6f8      	b.n	dc5d0 <_tzset_unlocked_r+0x34>
   dc7de:	2b2b      	cmp	r3, #43	; 0x2b
   dc7e0:	bf08      	it	eq
   dc7e2:	3401      	addeq	r4, #1
   dc7e4:	2701      	movs	r7, #1
   dc7e6:	e772      	b.n	dc6ce <_tzset_unlocked_r+0x132>
   dc7e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   dc7ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   dc7f0:	213c      	movs	r1, #60	; 0x3c
   dc7f2:	fb01 2203 	mla	r2, r1, r3, r2
   dc7f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   dc7fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc7fe:	fb01 2303 	mla	r3, r1, r3, r2
   dc802:	435f      	muls	r7, r3
   dc804:	e77a      	b.n	dc6fc <_tzset_unlocked_r+0x160>
   dc806:	f04f 0901 	mov.w	r9, #1
   dc80a:	e77d      	b.n	dc708 <_tzset_unlocked_r+0x16c>
   dc80c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc810:	bf06      	itte	eq
   dc812:	3401      	addeq	r4, #1
   dc814:	4643      	moveq	r3, r8
   dc816:	2344      	movne	r3, #68	; 0x44
   dc818:	220a      	movs	r2, #10
   dc81a:	a90b      	add	r1, sp, #44	; 0x2c
   dc81c:	4620      	mov	r0, r4
   dc81e:	9305      	str	r3, [sp, #20]
   dc820:	f7ff fdf8 	bl	dc414 <strtoul>
   dc824:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc828:	9b05      	ldr	r3, [sp, #20]
   dc82a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc82e:	45a0      	cmp	r8, r4
   dc830:	d114      	bne.n	dc85c <_tzset_unlocked_r+0x2c0>
   dc832:	234d      	movs	r3, #77	; 0x4d
   dc834:	f1b9 0f00 	cmp.w	r9, #0
   dc838:	d107      	bne.n	dc84a <_tzset_unlocked_r+0x2ae>
   dc83a:	722b      	strb	r3, [r5, #8]
   dc83c:	2103      	movs	r1, #3
   dc83e:	2302      	movs	r3, #2
   dc840:	e9c5 1303 	strd	r1, r3, [r5, #12]
   dc844:	f8c5 9014 	str.w	r9, [r5, #20]
   dc848:	e791      	b.n	dc76e <_tzset_unlocked_r+0x1d2>
   dc84a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   dc84e:	220b      	movs	r2, #11
   dc850:	2301      	movs	r3, #1
   dc852:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   dc856:	2300      	movs	r3, #0
   dc858:	63eb      	str	r3, [r5, #60]	; 0x3c
   dc85a:	e788      	b.n	dc76e <_tzset_unlocked_r+0x1d2>
   dc85c:	b280      	uxth	r0, r0
   dc85e:	723b      	strb	r3, [r7, #8]
   dc860:	6178      	str	r0, [r7, #20]
   dc862:	e784      	b.n	dc76e <_tzset_unlocked_r+0x1d2>
   dc864:	000dd870 	.word	0x000dd870
   dc868:	2003e7d4 	.word	0x2003e7d4
   dc86c:	2003e7dc 	.word	0x2003e7dc
   dc870:	000dd873 	.word	0x000dd873
   dc874:	2003e7d8 	.word	0x2003e7d8
   dc878:	2003e024 	.word	0x2003e024
   dc87c:	2003e7c7 	.word	0x2003e7c7
   dc880:	000dd877 	.word	0x000dd877
   dc884:	000dd89a 	.word	0x000dd89a
   dc888:	000dd886 	.word	0x000dd886
   dc88c:	000dd899 	.word	0x000dd899
   dc890:	2003e7bc 	.word	0x2003e7bc

000dc894 <abs>:
   dc894:	2800      	cmp	r0, #0
   dc896:	bfb8      	it	lt
   dc898:	4240      	neglt	r0, r0
   dc89a:	4770      	bx	lr

000dc89c <div>:
   dc89c:	2900      	cmp	r1, #0
   dc89e:	b510      	push	{r4, lr}
   dc8a0:	fb91 f4f2 	sdiv	r4, r1, r2
   dc8a4:	fb02 1314 	mls	r3, r2, r4, r1
   dc8a8:	db06      	blt.n	dc8b8 <div+0x1c>
   dc8aa:	2b00      	cmp	r3, #0
   dc8ac:	da01      	bge.n	dc8b2 <div+0x16>
   dc8ae:	3401      	adds	r4, #1
   dc8b0:	1a9b      	subs	r3, r3, r2
   dc8b2:	e9c0 4300 	strd	r4, r3, [r0]
   dc8b6:	bd10      	pop	{r4, pc}
   dc8b8:	2b00      	cmp	r3, #0
   dc8ba:	bfc4      	itt	gt
   dc8bc:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc8c0:	189b      	addgt	r3, r3, r2
   dc8c2:	e7f6      	b.n	dc8b2 <div+0x16>

000dc8c4 <_findenv_r>:
   dc8c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8c8:	4607      	mov	r7, r0
   dc8ca:	4689      	mov	r9, r1
   dc8cc:	4616      	mov	r6, r2
   dc8ce:	f000 f867 	bl	dc9a0 <__env_lock>
   dc8d2:	4b18      	ldr	r3, [pc, #96]	; (dc934 <_findenv_r+0x70>)
   dc8d4:	681c      	ldr	r4, [r3, #0]
   dc8d6:	469a      	mov	sl, r3
   dc8d8:	b134      	cbz	r4, dc8e8 <_findenv_r+0x24>
   dc8da:	464b      	mov	r3, r9
   dc8dc:	4698      	mov	r8, r3
   dc8de:	f813 1b01 	ldrb.w	r1, [r3], #1
   dc8e2:	b139      	cbz	r1, dc8f4 <_findenv_r+0x30>
   dc8e4:	293d      	cmp	r1, #61	; 0x3d
   dc8e6:	d1f9      	bne.n	dc8dc <_findenv_r+0x18>
   dc8e8:	4638      	mov	r0, r7
   dc8ea:	f000 f85f 	bl	dc9ac <__env_unlock>
   dc8ee:	2000      	movs	r0, #0
   dc8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8f4:	eba8 0809 	sub.w	r8, r8, r9
   dc8f8:	46a3      	mov	fp, r4
   dc8fa:	f854 0b04 	ldr.w	r0, [r4], #4
   dc8fe:	2800      	cmp	r0, #0
   dc900:	d0f2      	beq.n	dc8e8 <_findenv_r+0x24>
   dc902:	4642      	mov	r2, r8
   dc904:	4649      	mov	r1, r9
   dc906:	f7ff fc5f 	bl	dc1c8 <strncmp>
   dc90a:	2800      	cmp	r0, #0
   dc90c:	d1f4      	bne.n	dc8f8 <_findenv_r+0x34>
   dc90e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   dc912:	eb03 0508 	add.w	r5, r3, r8
   dc916:	f813 3008 	ldrb.w	r3, [r3, r8]
   dc91a:	2b3d      	cmp	r3, #61	; 0x3d
   dc91c:	d1ec      	bne.n	dc8f8 <_findenv_r+0x34>
   dc91e:	f8da 3000 	ldr.w	r3, [sl]
   dc922:	ebab 0303 	sub.w	r3, fp, r3
   dc926:	109b      	asrs	r3, r3, #2
   dc928:	4638      	mov	r0, r7
   dc92a:	6033      	str	r3, [r6, #0]
   dc92c:	f000 f83e 	bl	dc9ac <__env_unlock>
   dc930:	1c68      	adds	r0, r5, #1
   dc932:	e7dd      	b.n	dc8f0 <_findenv_r+0x2c>
   dc934:	2003e1f4 	.word	0x2003e1f4

000dc938 <_getenv_r>:
   dc938:	b507      	push	{r0, r1, r2, lr}
   dc93a:	aa01      	add	r2, sp, #4
   dc93c:	f7ff ffc2 	bl	dc8c4 <_findenv_r>
   dc940:	b003      	add	sp, #12
   dc942:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc948 <__gettzinfo>:
   dc948:	4800      	ldr	r0, [pc, #0]	; (dc94c <__gettzinfo+0x4>)
   dc94a:	4770      	bx	lr
   dc94c:	2003e030 	.word	0x2003e030

000dc950 <labs>:
   dc950:	2800      	cmp	r0, #0
   dc952:	bfb8      	it	lt
   dc954:	4240      	neglt	r0, r0
   dc956:	4770      	bx	lr

000dc958 <__retarget_lock_acquire>:
   dc958:	4770      	bx	lr

000dc95a <__retarget_lock_acquire_recursive>:
   dc95a:	4770      	bx	lr

000dc95c <__retarget_lock_release>:
   dc95c:	4770      	bx	lr

000dc95e <__retarget_lock_release_recursive>:
   dc95e:	4770      	bx	lr

000dc960 <__ascii_mbtowc>:
   dc960:	b082      	sub	sp, #8
   dc962:	b901      	cbnz	r1, dc966 <__ascii_mbtowc+0x6>
   dc964:	a901      	add	r1, sp, #4
   dc966:	b142      	cbz	r2, dc97a <__ascii_mbtowc+0x1a>
   dc968:	b14b      	cbz	r3, dc97e <__ascii_mbtowc+0x1e>
   dc96a:	7813      	ldrb	r3, [r2, #0]
   dc96c:	600b      	str	r3, [r1, #0]
   dc96e:	7812      	ldrb	r2, [r2, #0]
   dc970:	1e10      	subs	r0, r2, #0
   dc972:	bf18      	it	ne
   dc974:	2001      	movne	r0, #1
   dc976:	b002      	add	sp, #8
   dc978:	4770      	bx	lr
   dc97a:	4610      	mov	r0, r2
   dc97c:	e7fb      	b.n	dc976 <__ascii_mbtowc+0x16>
   dc97e:	f06f 0001 	mvn.w	r0, #1
   dc982:	e7f8      	b.n	dc976 <__ascii_mbtowc+0x16>

000dc984 <__ascii_wctomb>:
   dc984:	b149      	cbz	r1, dc99a <__ascii_wctomb+0x16>
   dc986:	2aff      	cmp	r2, #255	; 0xff
   dc988:	bf85      	ittet	hi
   dc98a:	238a      	movhi	r3, #138	; 0x8a
   dc98c:	6003      	strhi	r3, [r0, #0]
   dc98e:	700a      	strbls	r2, [r1, #0]
   dc990:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dc994:	bf98      	it	ls
   dc996:	2001      	movls	r0, #1
   dc998:	4770      	bx	lr
   dc99a:	4608      	mov	r0, r1
   dc99c:	4770      	bx	lr
	...

000dc9a0 <__env_lock>:
   dc9a0:	4801      	ldr	r0, [pc, #4]	; (dc9a8 <__env_lock+0x8>)
   dc9a2:	f7ff bfda 	b.w	dc95a <__retarget_lock_acquire_recursive>
   dc9a6:	bf00      	nop
   dc9a8:	2003e7ea 	.word	0x2003e7ea

000dc9ac <__env_unlock>:
   dc9ac:	4801      	ldr	r0, [pc, #4]	; (dc9b4 <__env_unlock+0x8>)
   dc9ae:	f7ff bfd6 	b.w	dc95e <__retarget_lock_release_recursive>
   dc9b2:	bf00      	nop
   dc9b4:	2003e7ea 	.word	0x2003e7ea

000dc9b8 <__aeabi_ldivmod>:
   dc9b8:	b97b      	cbnz	r3, dc9da <__aeabi_ldivmod+0x22>
   dc9ba:	b972      	cbnz	r2, dc9da <__aeabi_ldivmod+0x22>
   dc9bc:	2900      	cmp	r1, #0
   dc9be:	bfbe      	ittt	lt
   dc9c0:	2000      	movlt	r0, #0
   dc9c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   dc9c6:	e006      	blt.n	dc9d6 <__aeabi_ldivmod+0x1e>
   dc9c8:	bf08      	it	eq
   dc9ca:	2800      	cmpeq	r0, #0
   dc9cc:	bf1c      	itt	ne
   dc9ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   dc9d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dc9d6:	f7fe b99b 	b.w	dad10 <__aeabi_idiv0>
   dc9da:	f1ad 0c08 	sub.w	ip, sp, #8
   dc9de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc9e2:	2900      	cmp	r1, #0
   dc9e4:	db09      	blt.n	dc9fa <__aeabi_ldivmod+0x42>
   dc9e6:	2b00      	cmp	r3, #0
   dc9e8:	db1a      	blt.n	dca20 <__aeabi_ldivmod+0x68>
   dc9ea:	f7fe f82f 	bl	daa4c <__udivmoddi4>
   dc9ee:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc9f6:	b004      	add	sp, #16
   dc9f8:	4770      	bx	lr
   dc9fa:	4240      	negs	r0, r0
   dc9fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dca00:	2b00      	cmp	r3, #0
   dca02:	db1b      	blt.n	dca3c <__aeabi_ldivmod+0x84>
   dca04:	f7fe f822 	bl	daa4c <__udivmoddi4>
   dca08:	f8dd e004 	ldr.w	lr, [sp, #4]
   dca0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dca10:	b004      	add	sp, #16
   dca12:	4240      	negs	r0, r0
   dca14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dca18:	4252      	negs	r2, r2
   dca1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dca1e:	4770      	bx	lr
   dca20:	4252      	negs	r2, r2
   dca22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dca26:	f7fe f811 	bl	daa4c <__udivmoddi4>
   dca2a:	f8dd e004 	ldr.w	lr, [sp, #4]
   dca2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dca32:	b004      	add	sp, #16
   dca34:	4240      	negs	r0, r0
   dca36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dca3a:	4770      	bx	lr
   dca3c:	4252      	negs	r2, r2
   dca3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dca42:	f7fe f803 	bl	daa4c <__udivmoddi4>
   dca46:	f8dd e004 	ldr.w	lr, [sp, #4]
   dca4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dca4e:	b004      	add	sp, #16
   dca50:	4252      	negs	r2, r2
   dca52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dca56:	4770      	bx	lr

000dca58 <dynalib_user>:
   dca58:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dca68:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dca78:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dca88:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dca98:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dcaa8:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dcab8:	7261 6967 676e 4f00 206e 6556 6968 6c63     arging.On Vehicl
   dcac8:	2065 7750 0072 664f 2066 6556 6968 6c63     e Pwr.Off Vehicl
   dcad8:	2065 7750 0072 6146 6c75 0074 6944 6f63     e Pwr.Fault.Dico
   dcae8:	6e6e 6365 6574 0064 6f4e 4420 7461 0061     nnected.No Data.
   dcaf8:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
   dcb08:	0064 6e55 6e6b 776f 206e 6572 7073 6e6f     d.Unknown respon
   dcb18:	6573 7220 6365 7665 6569 2064 6925 5500     se recevied %i.U
   dcb28:	6962 6f64 7374 4820 6f6f 006b 6148 6472     bidots Hook.Hard
   dcb38:	5220 7365 7465 6920 206e 2032 6573 6f63      Reset in 2 seco
   dcb48:	646e 0073 6553 2074 6556 6272 736f 2065     nds.Set Verbose 
   dcb58:	6f4d 6564 3000 4300 656c 7261 6465 5620     Mode.0.Cleared V
   dcb68:	7265 6f62 6573 4d20 646f 0065 3225 312e     erbose Mode.%2.1
   dcb78:	2066 5455 0043 6954 656d 7a20 6e6f 2065     f UTC.Time zone 
   dcb88:	666f 7366 7465 2520 0069 6954 656d 5300     offset %i.Time.S
   dcb98:	6d61 6c70 2065 6e49 6574 7672 6c61 6920     ample Interval i
   dcba8:	2073 6f6e 2077 6925 6d20 6e69 7475 7365     s now %i minutes
   dcbb8:	7b00 6322 6261 6e69 2254 253a 2e34 6632     .{"cabinT":%4.2f
   dcbc8:	202c 7622 6e65 5474 3a22 3425 322e 2c66     , "ventT":%4.2f,
   dcbd8:	2220 756f 7374 6469 5465 3a22 3425 322e      "outsideT":%4.2
   dcbe8:	2c66 2220 6162 7474 7265 2279 253a 2c69     f, "battery":%i,
   dcbf8:	2020 6b22 7965 2231 223a 7325 2c22 2220       "key1":"%s", "
   dcc08:	6572 6573 7374 3a22 6925 202c 6122 656c     resets":%i, "ale
   dcc18:	7472 2273 253a 2c69 2220 6974 656d 7473     rts":%i, "timest
   dcc28:	6d61 2270 253a 756c 3030 2c30 2220 616c     amp":%lu000, "la
   dcc38:	2274 253a 2c66 2220 6e6c 2267 253a 7d66     t":%f, "lng":%f}
   dcc48:	5500 6962 6f64 7374 4d2d 5442 2d41 6f48     .Ubidots-MBTA-Ho
   dcc58:	6b6f 762d 2d32 6150 7372 0065 6e49 6176     ok-v2-Parse.Inva
   dcc68:	696c 2064 6572 6461 6e69 0067 7325 5320     lid reading.%s S
   dcc78:	253a 2e32 6630 2525 202c 3a51 3225 302e     :%2.0f%%, Q:%2.0
   dcc88:	2566 2025 4600 6f72 206d 7325 7420 206f     f%% .From %s to 
   dcc98:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
   dcca8:	6f69 006e 7552 6e6e 6e69 0067 6144 6c69     ion.Running.Dail
   dccb8:	2079 6c43 6165 756e 0070 5344 2054 666f     y Cleanup.DST of
   dccc8:	7366 7465 2520 2e32 6631 6e00 206f 6f6c     fset %2.1f.no lo
   dccd8:	6163 6974 6e6f 7320 7461 6c65 696c 6574     cation satellite
   dcce8:	3a73 6425 6c00 636f 7461 6f69 3a6e 6625     s:%d.location:%f
   dccf8:	252c 2066 6c61 6974 7574 6564 253a 2066     ,%f altitude:%f 
   dcd08:	6173 6574 6c6c 7469 7365 253a 2064 6468     satellites:%d hd
   dcd18:	706f 253a 006c 6c25 2075 696d 6c6c 7369     op:%l.%lu millis
   dcd28:	6365 6e6f 7364 7420 206f 6567 2074 5047     econds to get GP
   dcd38:	2053 6966 0078 7067 0073 3425 322e 2066     S fix.gps.%4.2f 
   dcd48:	0046 7453 6375 206b 6e69 7320 656c 7065     F.Stuck in sleep
   dcd58:	7320 6174 6574 5300 6174 6574 7300 6170      state.State.spa
   dcd68:	6b72 642f 7665 6369 2f65 6573 7373 6f69     rk/device/sessio
   dcd78:	2f6e 6e65 0064 7245 6f72 2072 7453 7461     n/end.Error Stat
   dcd88:	2065 202d 6552 6573 0074 7245 6f72 2072     e - Reset.Error 
   dcd98:	7453 7461 2065 202d 6f50 6577 2072 7943     State - Power Cy
   dcda8:	6c63 0065 7245 6f72 2072 7453 7461 2065     cle.Error State 
   dcdb8:	202d 7546 6c6c 4d20 646f 6d65 5220 7365     - Full Modem Res
   dcdc8:	7465 4c00 616f 6964 676e 5320 7379 6574     et.Loading Syste
   dcdd8:	206d 6544 6166 6c75 7374 5300 6769 616e     m Defaults.Signa
   dcde8:	006c 6153 706d 656c 6e49 6574 7672 6c61     l.SampleInterval
   dcdf8:	5200 7365 7465 6f43 6e75 0074 6143 6962     .ResetCount.Cabi
   dce08:	546e 6d65 0070 6556 746e 6554 706d 4f00     nTemp.VentTemp.O
   dce18:	7475 6973 6564 6554 706d 5200 6c65 6165     utsideTemp.Relea
   dce28:	6573 7300 6174 6574 664f 6843 0067 6c41     se.stateOfChg.Al
   dce38:	7265 7374 5400 6d69 4f65 6666 6573 0074     erts.TimeOffset.
   dce48:	6142 7474 7265 4379 6e6f 6574 7478 7200     BatteryContext.r
   dce58:	7365 7465 5246 4d41 4800 7261 5264 7365     esetFRAM.HardRes
   dce68:	7465 5300 6e65 4e64 776f 5600 7265 6f62     et.SendNow.Verbo
   dce78:	6573 4d2d 646f 0065 6553 2d74 6954 656d     se-Mode.Set-Time
   dce88:	6f7a 656e 5300 7465 442d 5453 664f 7366     zone.Set-DSTOffs
   dce98:	7465 5300 6174 7472 7075 4320 6d6f 6c70     et.Startup Compl
   dcea8:	7465 0065                                   ete.

000dceac <_ZTV8MB85RC64>:
	...
   dceb4:	417d 000d 4191 000d 682d 000d 68c3 000d     }A...A..-h...h..
   dcec4:	6945 000d                                   Ei..

000dcec8 <_ZTV17PublishQueueAsync>:
	...
   dced0:	4155 000d 4169 000d 76f1 000d 787d 000d     UA..iA...v..}x..
   dcee0:	783d 000d 781b 000d 79c3 000d 7863 000d     =x...x...y..cx..
   dcef0:	ca6c 000d ca74 000d ca79 000d ca7e 000d     l...t...y...~...
   dcf00:	ca82 000d ca87 000d ca8c 000d ca90 000d     ................
   dcf10:	ca9b 000d caa6 000d ca6c 000d cab2 000d     ........l.......
   dcf20:	cab6 000d cabf 000d cace 000d cade 000d     ................
   dcf30:	cae4 000d                                   ....

000dcf34 <_ZL17FRAMversionNumber>:
   dcf34:	0001 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   dcf44:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dcf54:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dcf64:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dcf74:	4f4d 4544 7525 003e 7341 6573 5474 6172     MODE%u>.AssetTra
   dcf84:	6b63 7265 7700 7269 5265 6165 4264 7479     cker.wireReadByt
   dcf94:	7365 7641 6961 616c 6c62 2065 3249 2043     esAvailable I2C 
   dcfa4:	7265 6f72 2072 7525 7700 7269 5265 6165     error %u.wireRea
   dcfb4:	4264 7479 7365 7641 6961 616c 6c62 2065     dBytesAvailable 
   dcfc4:	6e69 6f63 7272 6365 2074 6f63 6e75 2074     incorrect count 
   dcfd4:	7525 7700 7269 5265 6165 4264 7479 7365     %u.wireReadBytes
   dcfe4:	4920 4332 6520 7272 726f 2520 0075 6977      I2C error %u.wi
   dcff4:	6572 6552 6461 7942 6574 2073 6e69 6f63     reReadBytes inco
   dd004:	7272 6365 2074 6f63 6e75 2074 7525 0000     rrect count %u..

000dd014 <_ZTVN8particle11SPISettingsE>:
	...
   dd01c:	5981 000d 5925 000d 5927 000d               .Y..%Y..'Y..

000dd028 <_ZTV12AssetTracker>:
	...
   dd030:	59e9 000d 5a05 000d                         .Y...Z..

000dd038 <_ZTV13LegacyAdapter>:
	...
   dd040:	5d79 000d 5d7b 000d 5047 4d52 0043 4e47     y]..{]..GPRMC.GN
   dd050:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   dd060:	7061 2e70 6275 6f6c 0078 0000               app.ublox...

000dd06c <_ZTV6LIS3DH>:
	...
   dd07c:	6745 000d 40a5 000d 40a5 000d               Eg...@...@..

000dd088 <_ZTV9LIS3DHSPI>:
	...
   dd090:	6661 000d 6663 000d 6767 000d 66a1 000d     af..cf..gg...f..
   dd0a0:	66e3 000d 6671 000d 668b 000d 7277 7469     .f..qf...f..writ
   dd0b0:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   dd0c0:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dd0d0:	7264 253d 0075 0000                         dr=%u...

000dd0d8 <_ZTV6MB85RC>:
	...
   dd0e0:	677d 000d 677f 000d 682d 000d 68c3 000d     }g...g..-h...h..
   dd0f0:	6945 000d 6564 6976 6563 6552 6461 6620     Ei..deviceRead f
   dd100:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dd110:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dd120:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dd130:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dd140:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dd150:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dd160:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dd170:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dd180:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dd190:	0063 0000                                   c...

000dd194 <_ZTV12MCP79410SRAM>:
	...
   dd19c:	6a05 000d 6a1b 000d 69f5 000d 69f9 000d     .j...j...i...i..
   dd1ac:	6a45 000d 6d39 000d 6f59 000d               Ej..9m..Yo..

000dd1b8 <_ZTV12MCP79410Time>:
	...
   dd1c0:	6a09 000d 6a0d 000d                         .j...j..

000dd1c8 <_ZTV14MCP79410EEPROM>:
	...
   dd1d0:	6a07 000d 6a29 000d 69fd 000d 6a01 000d     .j..)j...i...j..
   dd1e0:	6a45 000d 6d73 000d 72a5 000d               Ej..sm...r..

000dd1ec <_ZTV8MCP79410>:
	...
   dd1f4:	6a0b 000d 6a37 000d 7550 6c62 7369 5168     .j..7j..PublishQ
   dd204:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dd214:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dd224:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dd234:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dd244:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dd254:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dd264:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dd274:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dd284:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dd294:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dd2a4:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dd2b4:	7162 0000                                   bq..

000dd2b8 <_ZTV21PublishQueueAsyncBase>:
	...
   dd2c8:	76f1 000d 40a5 000d 40a5 000d 40a5 000d     .v...@...@...@..
   dd2d8:	40a5 000d 40a5 000d                         .@...@..

000dd2e0 <_ZTV25PublishQueueAsyncRetained>:
	...
   dd2e8:	77d9 000d 77ed 000d 76f1 000d 787d 000d     .w...w...v..}x..
   dd2f8:	783d 000d 781b 000d 79c3 000d 7863 000d     =x...x...y..cx..

000dd308 <_ZTVN5spark13CellularClassE>:
	...
   dd310:	84c7 000d 84bd 000d 84b3 000d 8469 000d     ............i...
   dd320:	84a7 000d 849b 000d 848f 000d 8487 000d     ................
   dd330:	847d 000d 8473 000d 8fad 000d               }...s.......

000dd33c <_ZTV14CellularSignal>:
	...
   dd344:	8575 000d 857b 000d 8577 000d 8589 000d     u...{...w.......
   dd354:	85bd 000d 85e9 000d 861d 000d 866d 000d     ............m...
   dd364:	fffc ffff 0000 0000 8693 000d               ............

000dd370 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd378:	86b3 000d 86b9 000d 86f7 000d 86c7 000d     ................
   dd388:	86b5 000d                                   ....

000dd38c <_ZTVN5spark13EthernetClassE>:
	...
   dd394:	8cbf 000d 8cb5 000d 8cab 000d 8ca1 000d     ................
   dd3a4:	8c95 000d 8c89 000d 8c7d 000d 8c75 000d     ........}...u...
   dd3b4:	8c6b 000d 8c61 000d 8fad 000d               k...a.......

000dd3c0 <_ZTV7TwoWire>:
	...
   dd3c8:	8cdd 000d 8d27 000d 8cff 000d 8cdf 000d     ....'...........
   dd3d8:	8d07 000d 8d0f 000d 8d17 000d 8d1f 000d     ................

000dd3e8 <_ZTV9IPAddress>:
	...
   dd3f0:	8e61 000d 8e51 000d 8e53 000d 7061 0070     a...Q...S...app.

000dd400 <_ZTVN5spark12NetworkClassE>:
	...
   dd408:	8f45 000d 8f4f 000d 8f59 000d 8f63 000d     E...O...Y...c...
   dd418:	8f6d 000d 8f79 000d 8f85 000d 8f91 000d     m...y...........
   dd428:	8f99 000d 8fa3 000d 8fad 000d 616e 006e     ............nan.
   dd438:	6e69 0066 766f 0066 002e                    inf.ovf...

000dd442 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd442:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dd452:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd462:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..
	...

000dd474 <_ZTV11USARTSerial>:
	...
   dd47c:	9ae9 000d 9b55 000d 9b2d 000d 9095 000d     ....U...-.......
   dd48c:	9afd 000d 9b19 000d 9b0b 000d 9b27 000d     ............'...
   dd49c:	9aeb 000d 9aef 000d                         ........

000dd4a4 <_ZTV9USBSerial>:
	...
   dd4ac:	9be9 000d 9c51 000d 9c27 000d 9095 000d     ....Q...'.......
   dd4bc:	9c19 000d 9beb 000d 9bfb 000d 9c4b 000d     ............K...
   dd4cc:	9c0b 000d 9be5 000d                         ........

000dd4d4 <_ZSt7nothrow>:
   dd4d4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dd4e4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dd4f5 <day_name.6145>:
   dd4f5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd505:	6972 6153                                    riSat

000dd50a <mon_name.6146>:
   dd50a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd51a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd52a:	4476 6365 0000                              vDec..

000dd530 <DAYS_IN_MONTH>:
   dd530:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd540:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd550:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dd560 <_DAYS_BEFORE_MONTH>:
   dd560:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   dd570:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   dd580:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000dd590 <__month_lengths>:
   dd590:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dd5a0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd5b0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd5c0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dd5d0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dd5e0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dd5f0:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dd600:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dd610:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dd620:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dd630:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dd640:	302b 6c33 2564 322e 646c 4a00 6e61 4600     +03ld%.2ld.Jan.F
   dd650:	6265 4d00 7261 4100 7270 4d00 7961 4a00     eb.Mar.Apr.May.J
   dd660:	6e75 4a00 6c75 4100 6775 5300 7065 4f00     un.Jul.Aug.Sep.O
   dd670:	7463 4e00 766f 4400 6365 4a00 6e61 6175     ct.Nov.Dec.Janua
   dd680:	7972 4600 6265 7572 7261 0079 614d 6372     ry.February.Marc
   dd690:	0068 7041 6972 006c 754a 656e 4a00 6c75     h.April.June.Jul
   dd6a0:	0079 7541 7567 7473 5300 7065 6574 626d     y.August.Septemb
   dd6b0:	7265 4f00 7463 626f 7265 4e00 766f 6d65     er.October.Novem
   dd6c0:	6562 0072 6544 6563 626d 7265 5300 6e75     ber.December.Sun
   dd6d0:	4d00 6e6f 5400 6575 5700 6465 5400 7568     .Mon.Tue.Wed.Thu
   dd6e0:	4600 6972 5300 7461 5300 6e75 6164 0079     .Fri.Sat.Sunday.
   dd6f0:	6f4d 646e 7961 5400 6575 6473 7961 5700     Monday.Tuesday.W
   dd700:	6465 656e 6473 7961 5400 7568 7372 6164     ednesday.Thursda
   dd710:	0079 7246 6469 7961 5300 7461 7275 6164     y.Friday.Saturda
   dd720:	0079 4825 253a 3a4d 5325 2500 2f6d 6425     y.%H:%M:%S.%m/%d
   dd730:	252f 0079 6125 2520 2062 6525 2520 3a48     /%y.%a %b %e %H:
   dd740:	4d25 253a 2053 5925 5000 004d 6125 2520     %M:%S %Y.PM.%a %
   dd750:	2062 6525 2520 3a48 4d25 253a 2053 5a25     b %e %H:%M:%S %Z
   dd760:	2520 0059 646d 2500 3a49 4d25 253a 2053      %Y.md.%I:%M:%S 
   dd770:	7025 0000                                   %p..

000dd774 <_C_time_locale>:
   dd774:	d64b 000d d64f 000d d653 000d d657 000d     K...O...S...W...
   dd784:	d65b 000d d65f 000d d663 000d d667 000d     [..._...c...g...
   dd794:	d66b 000d d66f 000d d673 000d d677 000d     k...o...s...w...
   dd7a4:	d67b 000d d683 000d d68c 000d d692 000d     {...............
   dd7b4:	d65b 000d d698 000d d69d 000d d6a2 000d     [...............
   dd7c4:	d6a9 000d d6b3 000d d6bb 000d d6c4 000d     ................
   dd7d4:	d6cd 000d d6d1 000d d6d5 000d d6d9 000d     ................
   dd7e4:	d6dd 000d d6e1 000d d6e5 000d d6e9 000d     ................
   dd7f4:	d6f0 000d d6f7 000d d6ff 000d d709 000d     ................
   dd804:	d712 000d d719 000d d722 000d d72b 000d     ........"...+...
   dd814:	d734 000d ce5e 000d d749 000d d74c 000d     4...^...I...L...
   dd824:	d67b 000d d683 000d d68c 000d d692 000d     {...............
   dd834:	d65b 000d d698 000d d69d 000d d6a2 000d     [...............
   dd844:	d6a9 000d d6b3 000d d6bb 000d d6c4 000d     ................
   dd854:	d764 000d d767 000d d4f4 000d d4f4 000d     d...g...........
   dd864:	d4f4 000d d4f4 000d d4f4 000d 5a54 4700     ............TZ.G
   dd874:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dd884:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dd894:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dd8a4:	3a6e 6825 2575 006e                         n:%hu%n.

000dd8ac <_ctype_>:
   dd8ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd8bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd8cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd8dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd8ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd8fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd90c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd91c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd92c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   dd9ac:	5000 534f 5849                               .POSIX.

000dd9b3 <link_const_variable_data_end>:
	...

000dd9b4 <link_constructors_location>:
   dd9b4:	000d57cd 	.word	0x000d57cd
   dd9b8:	000d5ced 	.word	0x000d5ced
   dd9bc:	000d6411 	.word	0x000d6411
   dd9c0:	000d72d5 	.word	0x000d72d5
   dd9c4:	000d7c55 	.word	0x000d7c55
   dd9c8:	000d7c65 	.word	0x000d7c65
   dd9cc:	000d8441 	.word	0x000d8441
   dd9d0:	000d8545 	.word	0x000d8545
   dd9d4:	000d8cc9 	.word	0x000d8cc9
   dd9d8:	000d8f35 	.word	0x000d8f35
   dd9dc:	000d9081 	.word	0x000d9081
   dd9e0:	000d9371 	.word	0x000d9371
   dd9e4:	000d9659 	.word	0x000d9659
   dd9e8:	000d9ad5 	.word	0x000d9ad5

000dd9ec <link_constructors_end>:
   dd9ec:	00000000 	.word	0x00000000
