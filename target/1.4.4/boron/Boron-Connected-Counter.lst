
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.4.4/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a070  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001e234  2**0
                  CONTENTS
  4 .data         00000174  2003df14  000de090  0001df14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000768  2003e088  2003e088  0002e088  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000de204  000de204  0001e204  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de230  000de230  0001e230  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010e87e  00000000  00000000  0001e234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000153ed  00000000  00000000  0012cab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027332  00000000  00000000  00141e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003218  00000000  00000000  001691d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005910  00000000  00000000  0016c3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b696  00000000  00000000  00171cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000350f5  00000000  00000000  001ad38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108357  00000000  00000000  001e2484  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fab4  00000000  00000000  002ea7dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fedf 	bl	d9df4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fee4 	bl	d9e0a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003df14 	.word	0x2003df14
   d404c:	000de090 	.word	0x000de090
   d4050:	2003e088 	.word	0x2003e088
   d4054:	2003e088 	.word	0x2003e088
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 fd77 	bl	d8b50 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000de090 	.word	0x000de090
   d4084:	000de04c 	.word	0x000de04c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bad6 	b.w	d5638 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f82b 	bl	d50e8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bd29 	b.w	d8aec <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bec5 	b.w	d6e28 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 becb 	b.w	d6e38 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bec9 	b.w	d6e38 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  sensorDetect = true;                              // sets the sensor flag for the main loop
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z9sensorISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e08c 	.word	0x2003e08c

000d40c4 <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z11watchdogISRv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e0c4 	.word	0x2003e0c4

000d40d0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d2:	6803      	ldr	r3, [r0, #0]
   d40d4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d8:	d904      	bls.n	d40e4 <nrf_gpio_pin_port_decode+0x14>
   d40da:	4a07      	ldr	r2, [pc, #28]	; (d40f8 <nrf_gpio_pin_port_decode+0x28>)
   d40dc:	2100      	movs	r1, #0
   d40de:	200a      	movs	r0, #10
   d40e0:	f002 fd74 	bl	d6bcc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40e8:	bf83      	ittte	hi
   d40ea:	f003 031f 	andhi.w	r3, r3, #31
   d40ee:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f0:	4802      	ldrhi	r0, [pc, #8]	; (d40fc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40f2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	000d68cd 	.word	0x000d68cd
   d40fc:	50000300 	.word	0x50000300

000d4100 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4100:	b507      	push	{r0, r1, r2, lr}
   d4102:	ab02      	add	r3, sp, #8
   d4104:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4108:	4618      	mov	r0, r3
   d410a:	f7ff ffe1 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d410e:	9a01      	ldr	r2, [sp, #4]
   d4110:	2301      	movs	r3, #1
   d4112:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4114:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4118:	b003      	add	sp, #12
   d411a:	f85d fb04 	ldr.w	pc, [sp], #4

000d411e <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d411e:	b507      	push	{r0, r1, r2, lr}
   d4120:	ab02      	add	r3, sp, #8
   d4122:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4126:	4618      	mov	r0, r3
   d4128:	f7ff ffd2 	bl	d40d0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d412c:	9a01      	ldr	r2, [sp, #4]
   d412e:	2301      	movs	r3, #1
   d4130:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4132:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d4136:	b003      	add	sp, #12
   d4138:	f85d fb04 	ldr.w	pc, [sp], #4

000d413c <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

int resetFRAM(String command)                                         // Will reset the local counts
{
   d413c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z9resetFRAM6String+0x14>)
   d4140:	f004 f93b 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4146:	4803      	ldr	r0, [pc, #12]	; (d4154 <_Z9resetFRAM6String+0x18>)
   d4148:	f001 fdde 	bl	d5d08 <_ZN6MB85RC5eraseEv>
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dd4e6 	.word	0x000dd4e6
   d4154:	2003e098 	.word	0x2003e098

000d4158 <_Z7sendNow6String>:
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4158:	b508      	push	{r3, lr}
   d415a:	4904      	ldr	r1, [pc, #16]	; (d416c <_Z7sendNow6String+0x14>)
   d415c:	f004 f92d 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4160:	b118      	cbz	r0, d416a <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d4162:	4b03      	ldr	r3, [pc, #12]	; (d4170 <_Z7sendNow6String+0x18>)
   d4164:	2205      	movs	r2, #5
   d4166:	701a      	strb	r2, [r3, #0]
    return 1;
   d4168:	2001      	movs	r0, #1
  }
  else return 0;
}
   d416a:	bd08      	pop	{r3, pc}
   d416c:	000dd4e6 	.word	0x000dd4e6
   d4170:	2003e0bd 	.word	0x2003e0bd

000d4174 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4174:	b510      	push	{r4, lr}
   d4176:	4b03      	ldr	r3, [pc, #12]	; (d4184 <_ZN8MB85RC64D1Ev+0x10>)
   d4178:	6003      	str	r3, [r0, #0]
   d417a:	4604      	mov	r4, r0
   d417c:	f001 fd8c 	bl	d5c98 <_ZN6MB85RCD1Ev>
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}
   d4184:	000dd044 	.word	0x000dd044

000d4188 <_ZN8MB85RC64D0Ev>:
   d4188:	b510      	push	{r4, lr}
   d418a:	4604      	mov	r4, r0
   d418c:	f7ff fff2 	bl	d4174 <_ZN8MB85RC64D1Ev>
   d4190:	4620      	mov	r0, r4
   d4192:	2110      	movs	r1, #16
   d4194:	f004 fded 	bl	d8d72 <_ZdlPvj>
   d4198:	4620      	mov	r0, r4
   d419a:	bd10      	pop	{r4, pc}

000d419c <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d419c:	b508      	push	{r3, lr}
   d419e:	490a      	ldr	r1, [pc, #40]	; (d41c8 <_Z11resetCounts6String+0x2c>)
   d41a0:	f004 f90b 	bl	d83ba <_ZNK6String6equalsEPKc>
   d41a4:	2300      	movs	r3, #0
  if (command == "1")
   d41a6:	b168      	cbz	r0, d41c4 <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41a8:	4a08      	ldr	r2, [pc, #32]	; (d41cc <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41aa:	4909      	ldr	r1, [pc, #36]	; (d41d0 <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d41ac:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41ae:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables   
   d41b0:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d41b2:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d41b4:	4a07      	ldr	r2, [pc, #28]	; (d41d4 <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41b6:	614b      	str	r3, [r1, #20]
    current.alertCount = 0;                                           // Reset count variables   
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
   d41b8:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d41ba:	4b07      	ldr	r3, [pc, #28]	; (d41d8 <_Z11resetCounts6String+0x3c>)
   d41bc:	2001      	movs	r0, #1
   d41be:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d41c0:	4b06      	ldr	r3, [pc, #24]	; (d41dc <_Z11resetCounts6String+0x40>)
   d41c2:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
   d41c4:	bd08      	pop	{r3, pc}
   d41c6:	bf00      	nop
   d41c8:	000dd4e6 	.word	0x000dd4e6
   d41cc:	2003e14c 	.word	0x2003e14c
   d41d0:	2003e16c 	.word	0x2003e16c
   d41d4:	2003e168 	.word	0x2003e168
   d41d8:	2003e148 	.word	0x2003e148
   d41dc:	2003e169 	.word	0x2003e169

000d41e0 <_ZN10CloudClass12syncTimeDoneEv.isra.39>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d41e0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d41e2:	2000      	movs	r0, #0
   d41e4:	f002 fdb8 	bl	d6d58 <spark_sync_time_pending>
   d41e8:	b128      	cbz	r0, d41f6 <_ZN10CloudClass12syncTimeDoneEv.isra.39+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ea:	f002 fd8d 	bl	d6d08 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d41ee:	f080 0001 	eor.w	r0, r0, #1
   d41f2:	b2c0      	uxtb	r0, r0
   d41f4:	bd08      	pop	{r3, pc}
   d41f6:	2001      	movs	r0, #1
    }
   d41f8:	bd08      	pop	{r3, pc}

000d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d41fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d41fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4200:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4202:	f88d 3000 	strb.w	r3, [sp]
   d4206:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4208:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d420a:	f003 f913 	bl	d7434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d420e:	4628      	mov	r0, r5
   d4210:	b003      	add	sp, #12
   d4212:	bd30      	pop	{r4, r5, pc}

000d4214 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4214:	2300      	movs	r3, #0
   d4216:	461a      	mov	r2, r3
   d4218:	4619      	mov	r1, r3
   d421a:	6840      	ldr	r0, [r0, #4]
   d421c:	f002 bddc 	b.w	d6dd8 <network_off>

000d4220 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4220:	2000      	movs	r0, #0
   d4222:	f002 bb7b 	b.w	d691c <hal_timer_millis>
	...

000d4228 <_Z17getSignalStrengthv>:
  systemStatusWriteNeeded=true;
}


void getSignalStrength()
{
   d4228:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d422a:	4d19      	ldr	r5, [pc, #100]	; (d4290 <_Z17getSignalStrengthv+0x68>)
   d422c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  systemStatusWriteNeeded=true;
}


void getSignalStrength()
{
   d422e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4230:	ac04      	add	r4, sp, #16
   d4232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4238:	e895 0003 	ldmia.w	r5, {r0, r1}
   d423c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4240:	4914      	ldr	r1, [pc, #80]	; (d4294 <_Z17getSignalStrengthv+0x6c>)
   d4242:	a80e      	add	r0, sp, #56	; 0x38
   d4244:	f002 fe8c 	bl	d6f60 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4248:	a80e      	add	r0, sp, #56	; 0x38
   d424a:	f002 fedc 	bl	d7006 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d424e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4250:	a80e      	add	r0, sp, #56	; 0x38
   d4252:	f002 ff41 	bl	d70d8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4256:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4258:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d425c:	f002 ff22 	bl	d70a4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4260:	ab18      	add	r3, sp, #96	; 0x60
   d4262:	ee10 0a10 	vmov	r0, s0
   d4266:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d426a:	f005 f833 	bl	d92d4 <__aeabi_f2d>
   d426e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4272:	4628      	mov	r0, r5
   d4274:	f005 f82e 	bl	d92d4 <__aeabi_f2d>
   d4278:	e9cd 0100 	strd	r0, r1, [sp]
   d427c:	4a06      	ldr	r2, [pc, #24]	; (d4298 <_Z17getSignalStrengthv+0x70>)
   d427e:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4282:	4806      	ldr	r0, [pc, #24]	; (d429c <_Z17getSignalStrengthv+0x74>)
   d4284:	2140      	movs	r1, #64	; 0x40
   d4286:	f002 fdf7 	bl	d6e78 <snprintf>
}
   d428a:	b019      	add	sp, #100	; 0x64
   d428c:	bd30      	pop	{r4, r5, pc}
   d428e:	bf00      	nop
   d4290:	000dd058 	.word	0x000dd058
   d4294:	2003e1a0 	.word	0x2003e1a0
   d4298:	000dd0b0 	.word	0x000dd0b0
   d429c:	2003e0fc 	.word	0x2003e0fc

000d42a0 <_Z14getTemperaturev>:

int getTemperature()
{
   d42a0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d42a2:	200f      	movs	r0, #15
   d42a4:	f004 fce7 	bl	d8c76 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d42a8:	f005 f802 	bl	d92b0 <__aeabi_i2d>
   d42ac:	a320      	add	r3, pc, #128	; (adr r3, d4330 <_Z14getTemperaturev+0x90>)
   d42ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b2:	f005 f863 	bl	d937c <__aeabi_dmul>
   d42b6:	f005 fb59 	bl	d996c <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d42ba:	eddf 7a15 	vldr	s15, [pc, #84]	; d4310 <_Z14getTemperaturev+0x70>
   d42be:	ee07 0a10 	vmov	s14, r0
   d42c2:	ee67 7a27 	vmul.f32	s15, s14, s15
   d42c6:	ee17 0a90 	vmov	r0, s15
   d42ca:	f005 f803 	bl	d92d4 <__aeabi_f2d>
   d42ce:	2200      	movs	r2, #0
   d42d0:	4b10      	ldr	r3, [pc, #64]	; (d4314 <_Z14getTemperaturev+0x74>)
   d42d2:	f004 fe9f 	bl	d9014 <__aeabi_dsub>
   d42d6:	2200      	movs	r2, #0
   d42d8:	4b0f      	ldr	r3, [pc, #60]	; (d4318 <_Z14getTemperaturev+0x78>)
   d42da:	f005 f84f 	bl	d937c <__aeabi_dmul>
   d42de:	f005 fafd 	bl	d98dc <__aeabi_d2iz>
   d42e2:	f004 ffe5 	bl	d92b0 <__aeabi_i2d>
   d42e6:	2200      	movs	r2, #0
   d42e8:	4b0c      	ldr	r3, [pc, #48]	; (d431c <_Z14getTemperaturev+0x7c>)
   d42ea:	f005 f847 	bl	d937c <__aeabi_dmul>
   d42ee:	2200      	movs	r2, #0
   d42f0:	4b0b      	ldr	r3, [pc, #44]	; (d4320 <_Z14getTemperaturev+0x80>)
   d42f2:	f005 f96d 	bl	d95d0 <__aeabi_ddiv>
   d42f6:	2200      	movs	r2, #0
   d42f8:	4b0a      	ldr	r3, [pc, #40]	; (d4324 <_Z14getTemperaturev+0x84>)
   d42fa:	f004 fe8d 	bl	d9018 <__adddf3>
   d42fe:	f005 faed 	bl	d98dc <__aeabi_d2iz>
   d4302:	4b09      	ldr	r3, [pc, #36]	; (d4328 <_Z14getTemperaturev+0x88>)
   d4304:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4306:	4b09      	ldr	r3, [pc, #36]	; (d432c <_Z14getTemperaturev+0x8c>)
   d4308:	2201      	movs	r2, #1
   d430a:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
   d430c:	bd08      	pop	{r3, pc}
   d430e:	bf00      	nop
   d4310:	39800000 	.word	0x39800000
   d4314:	3fe00000 	.word	0x3fe00000
   d4318:	40590000 	.word	0x40590000
   d431c:	40220000 	.word	0x40220000
   d4320:	40140000 	.word	0x40140000
   d4324:	40400000 	.word	0x40400000
   d4328:	2003e14c 	.word	0x2003e14c
   d432c:	2003e148 	.word	0x2003e148
   d4330:	66666666 	.word	0x66666666
   d4334:	400a6666 	.word	0x400a6666

000d4338 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4338:	b508      	push	{r3, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d433a:	4b0b      	ldr	r3, [pc, #44]	; (d4368 <_Z16takeMeasurementsv+0x30>)
   d433c:	2200      	movs	r2, #0
   d433e:	4611      	mov	r1, r2
   d4340:	6858      	ldr	r0, [r3, #4]
   d4342:	f002 fd39 	bl	d6db8 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4346:	b108      	cbz	r0, d434c <_Z16takeMeasurementsv+0x14>
   d4348:	f7ff ff6e 	bl	d4228 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d434c:	f7ff ffa8 	bl	d42a0 <_Z14getTemperaturev>
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                // Percentage of full charge
   d4350:	4806      	ldr	r0, [pc, #24]	; (d436c <_Z16takeMeasurementsv+0x34>)
   d4352:	f003 fa7b 	bl	d784c <_ZN9FuelGauge6getSoCEv>
   d4356:	4b06      	ldr	r3, [pc, #24]	; (d4370 <_Z16takeMeasurementsv+0x38>)
   d4358:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  systemStatusWriteNeeded=true;
   d435c:	2201      	movs	r2, #1
// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                   // Get Temperature at startup as well
  sysStatus.stateOfCharge = int(batteryMonitor.getSoC());                // Percentage of full charge
   d435e:	ed83 0a02 	vstr	s0, [r3, #8]
  systemStatusWriteNeeded=true;
   d4362:	4b04      	ldr	r3, [pc, #16]	; (d4374 <_Z16takeMeasurementsv+0x3c>)
   d4364:	701a      	strb	r2, [r3, #0]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	2003e1a0 	.word	0x2003e1a0
   d436c:	2003e0ac 	.word	0x2003e0ac
   d4370:	2003e16c 	.word	0x2003e16c
   d4374:	2003e169 	.word	0x2003e169

000d4378 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d4378:	b510      	push	{r4, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d437a:	4c0d      	ldr	r4, [pc, #52]	; (d43b0 <_Z11petWatchdogv+0x38>)
   d437c:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d437e:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d4386:	f003 031f 	and.w	r3, r3, #31
   d438a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d438e:	f7ff feb7 	bl	d4100 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4392:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d4394:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d439c:	f003 031f 	and.w	r3, r3, #31
   d43a0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d43a4:	f7ff febb 	bl	d411e <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d43a8:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <_Z11petWatchdogv+0x3c>)
   d43aa:	2200      	movs	r2, #0
   d43ac:	701a      	strb	r2, [r3, #0]
   d43ae:	bd10      	pop	{r4, pc}
   d43b0:	2003e0f4 	.word	0x2003e0f4
   d43b4:	2003e0c4 	.word	0x2003e0c4

000d43b8 <_Z9PMICresetv>:
}

// Power Management function
void PMICreset() {
   d43b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                                      // Settings for Solar powered power management
   d43ba:	481d      	ldr	r0, [pc, #116]	; (d4430 <_Z9PMICresetv+0x78>)
   d43bc:	f003 fcf2 	bl	d7da4 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
   d43c0:	481b      	ldr	r0, [pc, #108]	; (d4430 <_Z9PMICresetv+0x78>)
   d43c2:	f003 fe9c 	bl	d80fe <_ZN4PMIC15disableWatchdogEv>
  if (sysStatus.solarPowerMode) {
   d43c6:	4b1b      	ldr	r3, [pc, #108]	; (d4434 <_Z9PMICresetv+0x7c>)
   d43c8:	795c      	ldrb	r4, [r3, #5]
   d43ca:	b1ac      	cbz	r4, d43f8 <_Z9PMICresetv+0x40>
    power.setInputVoltageLimit(4840);                                 // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
   d43cc:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d43d0:	4817      	ldr	r0, [pc, #92]	; (d4430 <_Z9PMICresetv+0x78>)
   d43d2:	f003 fd69 	bl	d7ea8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                                  // default is 900mA
   d43d6:	f44f 7161 	mov.w	r1, #900	; 0x384
   d43da:	4815      	ldr	r0, [pc, #84]	; (d4430 <_Z9PMICresetv+0x78>)
   d43dc:	f003 fdee 	bl	d7fbc <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                              // default is 512mA matches my 3W panel
   d43e0:	2200      	movs	r2, #0
   d43e2:	4611      	mov	r1, r2
   d43e4:	9202      	str	r2, [sp, #8]
   d43e6:	9201      	str	r2, [sp, #4]
   d43e8:	9200      	str	r2, [sp, #0]
   d43ea:	2301      	movs	r3, #1
   d43ec:	4810      	ldr	r0, [pc, #64]	; (d4430 <_Z9PMICresetv+0x78>)
   d43ee:	f003 fe2d 	bl	d804c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                                     // Allows us to charge cloe to 100% - battery can't go over 45 celcius
   d43f2:	f241 0170 	movw	r1, #4208	; 0x1070
   d43f6:	e014      	b.n	d4422 <_Z9PMICresetv+0x6a>
  }
  else  {
    power.setInputVoltageLimit(4208);                                 // This is the default value for the Electron
   d43f8:	f241 0170 	movw	r1, #4208	; 0x1070
   d43fc:	480c      	ldr	r0, [pc, #48]	; (d4430 <_Z9PMICresetv+0x78>)
   d43fe:	f003 fd53 	bl	d7ea8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                                 // default is 900mA this let's me charge faster
   d4402:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d4406:	480a      	ldr	r0, [pc, #40]	; (d4430 <_Z9PMICresetv+0x78>)
   d4408:	f003 fdd8 	bl	d7fbc <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                              // default is 2048mA (011000) = 512mA+1024mA+512mA)
   d440c:	2301      	movs	r3, #1
   d440e:	4621      	mov	r1, r4
   d4410:	9402      	str	r4, [sp, #8]
   d4412:	9401      	str	r4, [sp, #4]
   d4414:	9400      	str	r4, [sp, #0]
   d4416:	461a      	mov	r2, r3
   d4418:	4805      	ldr	r0, [pc, #20]	; (d4430 <_Z9PMICresetv+0x78>)
   d441a:	f003 fe17 	bl	d804c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                                     // default is 4.112V termination voltage
   d441e:	f241 0110 	movw	r1, #4112	; 0x1010
   d4422:	4803      	ldr	r0, [pc, #12]	; (d4430 <_Z9PMICresetv+0x78>)
  }
}
   d4424:	b004      	add	sp, #16
   d4426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else  {
    power.setInputVoltageLimit(4208);                                 // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                                 // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                              // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                                     // default is 4.112V termination voltage
   d442a:	f003 be42 	b.w	d80b2 <_ZN4PMIC16setChargeVoltageEt>
   d442e:	bf00      	nop
   d4430:	2003e0be 	.word	0x2003e0be
   d4434:	2003e16c 	.word	0x2003e16c

000d4438 <_Z17checkSystemValuesv>:
  int closeTime;                                    // Hour the park closes (0-23)
  unsigned long lastHookResponse;                   // Last time we got a valid Webhook response
  */

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4438:	4b33      	ldr	r3, [pc, #204]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d443a:	789a      	ldrb	r2, [r3, #2]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0; 
  // None for battery as we need to takeMeasurements
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d443c:	edd3 7a06 	vldr	s15, [r3, #24]
  int closeTime;                                    // Hour the park closes (0-23)
  unsigned long lastHookResponse;                   // Last time we got a valid Webhook response
  */

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4440:	2a01      	cmp	r2, #1
   d4442:	bf84      	itt	hi
   d4444:	2200      	movhi	r2, #0
   d4446:	709a      	strbhi	r2, [r3, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) sysStatus.connectedStatus = 1;
   d4448:	78da      	ldrb	r2, [r3, #3]
   d444a:	2a01      	cmp	r2, #1
   d444c:	bf82      	ittt	hi
   d444e:	4a2e      	ldrhi	r2, [pc, #184]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4450:	2101      	movhi	r1, #1
   d4452:	70d1      	strbhi	r1, [r2, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.connectedStatus = 1;
   d4454:	791a      	ldrb	r2, [r3, #4]
   d4456:	2a01      	cmp	r2, #1
   d4458:	bf82      	ittt	hi
   d445a:	4a2b      	ldrhi	r2, [pc, #172]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d445c:	2101      	movhi	r1, #1
   d445e:	70d1      	strbhi	r1, [r2, #3]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
   d4460:	795a      	ldrb	r2, [r3, #5]
   d4462:	2a01      	cmp	r2, #1
   d4464:	bf82      	ittt	hi
   d4466:	4a28      	ldrhi	r2, [pc, #160]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4468:	2100      	movhi	r1, #0
   d446a:	7151      	strbhi	r1, [r2, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
   d446c:	799a      	ldrb	r2, [r3, #6]
   d446e:	2a01      	cmp	r2, #1
   d4470:	bf82      	ittt	hi
   d4472:	4a25      	ldrhi	r2, [pc, #148]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4474:	2100      	movhi	r1, #0
   d4476:	7191      	strbhi	r1, [r2, #6]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0; 
   d4478:	79da      	ldrb	r2, [r3, #7]
   d447a:	2a01      	cmp	r2, #1
   d447c:	bf82      	ittt	hi
   d447e:	4a22      	ldrhi	r2, [pc, #136]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4480:	2100      	movhi	r1, #0
   d4482:	71d1      	strbhi	r1, [r2, #7]
  // None for battery as we need to takeMeasurements
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
   d4484:	6919      	ldr	r1, [r3, #16]
   d4486:	f241 7270 	movw	r2, #6000	; 0x1770
   d448a:	4291      	cmp	r1, r2
   d448c:	bf82      	ittt	hi
   d448e:	4a1e      	ldrhi	r2, [pc, #120]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4490:	f44f 717a 	movhi.w	r1, #1000	; 0x3e8
   d4494:	6111      	strhi	r1, [r2, #16]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4496:	695a      	ldr	r2, [r3, #20]
   d4498:	2aff      	cmp	r2, #255	; 0xff
   d449a:	bf88      	it	hi
   d449c:	4a1a      	ldrhi	r2, [pc, #104]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d449e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0; 
  // None for battery as we need to takeMeasurements
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d44a2:	bf88      	it	hi
   d44a4:	2100      	movhi	r1, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d44a6:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) sysStatus.lowPowerMode = 0;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0; 
  // None for battery as we need to takeMeasurements
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d44aa:	bf88      	it	hi
   d44ac:	6151      	strhi	r1, [r2, #20]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d44ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44b2:	d406      	bmi.n	d44c2 <_Z17checkSystemValuesv+0x8a>
   d44b4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d44b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d44bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44c0:	dd01      	ble.n	d44c6 <_Z17checkSystemValuesv+0x8e>
   d44c2:	4a12      	ldr	r2, [pc, #72]	; (d450c <_Z17checkSystemValuesv+0xd4>)
   d44c4:	619a      	str	r2, [r3, #24]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d44c6:	edd3 7a07 	vldr	s15, [r3, #28]
   d44ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d44ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44d2:	d406      	bmi.n	d44e2 <_Z17checkSystemValuesv+0xaa>
   d44d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d44d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d44dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44e0:	dd02      	ble.n	d44e8 <_Z17checkSystemValuesv+0xb0>
   d44e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d44e6:	61da      	str	r2, [r3, #28]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d44e8:	6a1a      	ldr	r2, [r3, #32]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 23) sysStatus.closeTime = 23;
   d44ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d44ec:	2a0c      	cmp	r2, #12
   d44ee:	bf88      	it	hi
   d44f0:	4a05      	ldrhi	r2, [pc, #20]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 23) sysStatus.closeTime = 23;
   d44f2:	f1a3 030c 	sub.w	r3, r3, #12
  // None for powerState as we need to takeMeasurements
  if (sysStatus.debounce < 0 || sysStatus.debounce > 6000) sysStatus.debounce = 1000;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d44f6:	bf84      	itt	hi
   d44f8:	2100      	movhi	r1, #0
   d44fa:	6211      	strhi	r1, [r2, #32]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 23) sysStatus.closeTime = 23;
   d44fc:	2b0b      	cmp	r3, #11
   d44fe:	bf82      	ittt	hi
   d4500:	4b01      	ldrhi	r3, [pc, #4]	; (d4508 <_Z17checkSystemValuesv+0xd0>)
   d4502:	2217      	movhi	r2, #23
   d4504:	625a      	strhi	r2, [r3, #36]	; 0x24
   d4506:	4770      	bx	lr
   d4508:	2003e16c 	.word	0x2003e16c
   d450c:	c0a00000 	.word	0xc0a00000

000d4510 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4510:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4512:	f002 fbf9 	bl	d6d08 <spark_cloud_flag_connected>
    return !Particle.connected();
   d4516:	f080 0001 	eor.w	r0, r0, #1
}
   d451a:	b2c0      	uxtb	r0, r0
   d451c:	bd08      	pop	{r3, pc}
	...

000d4520 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4522:	f002 fbe9 	bl	d6cf8 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4526:	f7ff fe7b 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d452a:	2500      	movs	r5, #0
   d452c:	4604      	mov	r4, r0
   d452e:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4532:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4534:	f7ff fe74 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4538:	1b00      	subs	r0, r0, r4
   d453a:	eb61 0105 	sbc.w	r1, r1, r5
   d453e:	428f      	cmp	r7, r1
   d4540:	bf08      	it	eq
   d4542:	4286      	cmpeq	r6, r0
   d4544:	d305      	bcc.n	d4552 <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4546:	f7ff ffe3 	bl	d4510 <_Z12notConnectedv>
   d454a:	b910      	cbnz	r0, d4552 <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d454c:	f002 fbc4 	bl	d6cd8 <spark_process>
   d4550:	e7f0      	b.n	d4534 <_Z22disconnectFromParticlev+0x14>
   d4552:	f7ff ffdd 	bl	d4510 <_Z12notConnectedv>
  Cellular.off();
   d4556:	4804      	ldr	r0, [pc, #16]	; (d4568 <_Z22disconnectFromParticlev+0x48>)
   d4558:	f7ff fe5c 	bl	d4214 <_ZN5spark13CellularClass3offEv>
  delay(2000);                                                    // Bummer but only should happen once an hour
   d455c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4560:	f002 fcaa 	bl	d6eb8 <delay>
  return true;
}
   d4564:	2001      	movs	r0, #1
   d4566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4568:	2003e1a0 	.word	0x2003e1a0

000d456c <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d456c:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
   d456e:	4d08      	ldr	r5, [pc, #32]	; (d4590 <_Z15resetEverythingv+0x24>)
   d4570:	2400      	movs	r4, #0
   d4572:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
   d4574:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;                    
   d4576:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4578:	f004 f949 	bl	d880e <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d457c:	4b05      	ldr	r3, [pc, #20]	; (d4594 <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
   d457e:	4a06      	ldr	r2, [pc, #24]	; (d4598 <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;                    
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4580:	615c      	str	r4, [r3, #20]
  currentCountsWriteNeeded=true;
   d4582:	2301      	movs	r3, #1
   d4584:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4586:	4a05      	ldr	r2, [pc, #20]	; (d459c <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;                    
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4588:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d458a:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
   d458c:	7013      	strb	r3, [r2, #0]
   d458e:	bd38      	pop	{r3, r4, r5, pc}
   d4590:	2003e14c 	.word	0x2003e14c
   d4594:	2003e16c 	.word	0x2003e16c
   d4598:	2003e148 	.word	0x2003e148
   d459c:	2003e169 	.word	0x2003e169

000d45a0 <_Z20meterParticlePublishv>:
  systemStatusWriteNeeded = true;
  return 1;
}

bool meterParticlePublish(void)
{
   d45a0:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d45a2:	4c07      	ldr	r4, [pc, #28]	; (d45c0 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45a4:	f002 f99a 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
   d45a8:	6823      	ldr	r3, [r4, #0]
   d45aa:	1ac0      	subs	r0, r0, r3
   d45ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d45b0:	d304      	bcc.n	d45bc <_Z20meterParticlePublishv+0x1c>
   d45b2:	f002 f993 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d45b6:	6020      	str	r0, [r4, #0]
   d45b8:	2001      	movs	r0, #1
   d45ba:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d45bc:	2000      	movs	r0, #0
}
   d45be:	bd10      	pop	{r4, pc}
   d45c0:	2003e13c 	.word	0x2003e13c

000d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d45c4:	b508      	push	{r3, lr}
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
  waitUntil(meterParticlePublish);
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here 
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
   d45c6:	f7ff ffeb 	bl	d45a0 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45ca:	b118      	cbz	r0, d45d4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d45cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d45d0:	f7ff bfe6 	b.w	d45a0 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d45d4:	f002 fb80 	bl	d6cd8 <spark_process>
   d45d8:	e7f5      	b.n	d45c6 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67+0x2>
	...

000d45dc <_Z14fullModemResetv>:
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
  Serial.println(stateTransitionString);
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d45dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45de:	f002 fb8b 	bl	d6cf8 <spark_cloud_flag_disconnect>
   d45e2:	f002 f97b 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d45e6:	f643 2597 	movw	r5, #14999	; 0x3a97
   d45ea:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45ec:	f002 fb8c 	bl	d6d08 <spark_cloud_flag_connected>
   d45f0:	b140      	cbz	r0, d4604 <_Z14fullModemResetv+0x28>
   d45f2:	f002 f973 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
   d45f6:	1b00      	subs	r0, r0, r4
   d45f8:	42a8      	cmp	r0, r5
   d45fa:	d803      	bhi.n	d4604 <_Z14fullModemResetv+0x28>
		delay(100);
   d45fc:	2064      	movs	r0, #100	; 0x64
   d45fe:	f002 fc5b 	bl	d6eb8 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4602:	e7f3      	b.n	d45ec <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4604:	2100      	movs	r1, #0
   d4606:	4b09      	ldr	r3, [pc, #36]	; (d462c <_Z14fullModemResetv+0x50>)
   d4608:	f247 5230 	movw	r2, #30000	; 0x7530
   d460c:	4608      	mov	r0, r1
   d460e:	f002 f90d 	bl	d682c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4612:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4616:	f002 fc4f 	bl	d6eb8 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d461a:	4b05      	ldr	r3, [pc, #20]	; (d4630 <_Z14fullModemResetv+0x54>)
   d461c:	220a      	movs	r2, #10
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	2101      	movs	r1, #1
   d4622:	4668      	mov	r0, sp
   d4624:	f003 fefc 	bl	d8420 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4628:	b003      	add	sp, #12
   d462a:	bd30      	pop	{r4, r5, pc}
   d462c:	000dd0c9 	.word	0x000dd0c9
   d4630:	2003e0cc 	.word	0x2003e0cc

000d4634 <_Z8isDSTusav>:
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
}

bool isDSTusa() { 
   d4634:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4636:	f004 f905 	bl	d8844 <_ZN9TimeClass3dayEv>
   d463a:	4605      	mov	r5, r0
  int month = Time.month();
   d463c:	f004 f913 	bl	d8866 <_ZN9TimeClass5monthEv>
   d4640:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4642:	f004 f909 	bl	d8858 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)  
   d4646:	1f23      	subs	r3, r4, #4
   d4648:	2b06      	cmp	r3, #6
   d464a:	d90e      	bls.n	d466a <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d464c:	1ee3      	subs	r3, r4, #3
   d464e:	2b08      	cmp	r3, #8
   d4650:	d80d      	bhi.n	d466e <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4652:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4654:	1a2d      	subs	r5, r5, r0
   d4656:	d501      	bpl.n	d465c <_Z8isDSTusav+0x28>
   d4658:	2c0b      	cmp	r4, #11
   d465a:	e002      	b.n	d4662 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d465c:	2d07      	cmp	r5, #7
   d465e:	dd06      	ble.n	d466e <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4660:	2c03      	cmp	r4, #3
   d4662:	bf14      	ite	ne
   d4664:	2000      	movne	r0, #0
   d4666:	2001      	moveq	r0, #1
   d4668:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)  
  { // April to October definetly DST
    return true;
   d466a:	2001      	movs	r0, #1
   d466c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d466e:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time 
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4670:	bd38      	pop	{r3, r4, r5, pc}

000d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4672:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4674:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4676:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4678:	b17c      	cbz	r4, d469a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d467a:	6863      	ldr	r3, [r4, #4]
   d467c:	3b01      	subs	r3, #1
   d467e:	6063      	str	r3, [r4, #4]
   d4680:	b95b      	cbnz	r3, d469a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4682:	6823      	ldr	r3, [r4, #0]
   d4684:	4620      	mov	r0, r4
   d4686:	689b      	ldr	r3, [r3, #8]
   d4688:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d468a:	68a3      	ldr	r3, [r4, #8]
   d468c:	3b01      	subs	r3, #1
   d468e:	60a3      	str	r3, [r4, #8]
   d4690:	b91b      	cbnz	r3, d469a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	4620      	mov	r0, r4
   d4696:	68db      	ldr	r3, [r3, #12]
   d4698:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d469a:	4628      	mov	r0, r5
   d469c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d46a0 <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d46a0:	b570      	push	{r4, r5, r6, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d46a2:	4c25      	ldr	r4, [pc, #148]	; (d4738 <_Z9sendEventv+0x98>)
   d46a4:	4e25      	ldr	r6, [pc, #148]	; (d473c <_Z9sendEventv+0x9c>)
   d46a6:	69a3      	ldr	r3, [r4, #24]
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d46a8:	b0ce      	sub	sp, #312	; 0x138
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d46aa:	2500      	movs	r5, #0
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue);
   d46ac:	9305      	str	r3, [sp, #20]
   d46ae:	6963      	ldr	r3, [r4, #20]
   d46b0:	9304      	str	r3, [sp, #16]
   d46b2:	4b23      	ldr	r3, [pc, #140]	; (d4740 <_Z9sendEventv+0xa0>)
   d46b4:	695a      	ldr	r2, [r3, #20]
   d46b6:	9203      	str	r2, [sp, #12]
   d46b8:	6922      	ldr	r2, [r4, #16]
   d46ba:	9202      	str	r2, [sp, #8]
   d46bc:	689b      	ldr	r3, [r3, #8]
   d46be:	9301      	str	r3, [sp, #4]
   d46c0:	68a3      	ldr	r3, [r4, #8]
   d46c2:	9300      	str	r3, [sp, #0]
   d46c4:	4a1f      	ldr	r2, [pc, #124]	; (d4744 <_Z9sendEventv+0xa4>)
   d46c6:	6823      	ldr	r3, [r4, #0]
   d46c8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46cc:	a80e      	add	r0, sp, #56	; 0x38
   d46ce:	f002 fbd3 	bl	d6e78 <snprintf>
  Particle.publish("Ubidots-Car-Hook", data, PRIVATE);
   d46d2:	aa0e      	add	r2, sp, #56	; 0x38
   d46d4:	491c      	ldr	r1, [pc, #112]	; (d4748 <_Z9sendEventv+0xa8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d46d6:	7833      	ldrb	r3, [r6, #0]
   d46d8:	f88d 5000 	strb.w	r5, [sp]
   d46dc:	a80a      	add	r0, sp, #40	; 0x28
   d46de:	f7ff fd8c 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46e2:	a80b      	add	r0, sp, #44	; 0x2c
   d46e4:	f7ff ffc5 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46e8:	f002 f8f8 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d46ec:	4b17      	ldr	r3, [pc, #92]	; (d474c <_Z9sendEventv+0xac>)
   d46ee:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d46f0:	f004 f894 	bl	d881c <_ZN9TimeClass4hourEv>
   d46f4:	4b16      	ldr	r3, [pc, #88]	; (d4750 <_Z9sendEventv+0xb0>)
   d46f6:	6018      	str	r0, [r3, #0]
  waitUntil(meterParticlePublish);
   d46f8:	f7ff ff64 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d46fc:	f004 f887 	bl	d880e <_ZN9TimeClass3nowEv>
   d4700:	4601      	mov	r1, r0
   d4702:	a80a      	add	r0, sp, #40	; 0x28
   d4704:	f003 ffb0 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d4708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d470a:	9307      	str	r3, [sp, #28]
  Particle.publish("Time",Time.timeStr(),PRIVATE);
   d470c:	9a07      	ldr	r2, [sp, #28]
   d470e:	7833      	ldrb	r3, [r6, #0]
   d4710:	4910      	ldr	r1, [pc, #64]	; (d4754 <_Z9sendEventv+0xb4>)
   d4712:	f88d 5000 	strb.w	r5, [sp]
   d4716:	a808      	add	r0, sp, #32
   d4718:	f7ff fd6f 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d471c:	a809      	add	r0, sp, #36	; 0x24
   d471e:	f7ff ffa8 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4722:	a80a      	add	r0, sp, #40	; 0x28
   d4724:	f003 fdd5 	bl	d82d2 <_ZN6StringD1Ev>
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4728:	6823      	ldr	r3, [r4, #0]
   d472a:	6063      	str	r3, [r4, #4]
  dataInFlight = true;                                                // set the data inflight flag
   d472c:	4b0a      	ldr	r3, [pc, #40]	; (d4758 <_Z9sendEventv+0xb8>)
   d472e:	2201      	movs	r2, #1
   d4730:	701a      	strb	r2, [r3, #0]
}
   d4732:	b04e      	add	sp, #312	; 0x138
   d4734:	bd70      	pop	{r4, r5, r6, pc}
   d4736:	bf00      	nop
   d4738:	2003e14c 	.word	0x2003e14c
   d473c:	2003e0a8 	.word	0x2003e0a8
   d4740:	2003e16c 	.word	0x2003e16c
   d4744:	000dd0d6 	.word	0x000dd0d6
   d4748:	000dd12f 	.word	0x000dd12f
   d474c:	2003e0b8 	.word	0x2003e0b8
   d4750:	2003e0c0 	.word	0x2003e0c0
   d4754:	000dd3a6 	.word	0x000dd3a6
   d4758:	2003e168 	.word	0x2003e168

000d475c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d475c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d475e:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4760:	4608      	mov	r0, r1
  Particle.publish("Time",Time.timeStr(),PRIVATE);
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
  dataInFlight = true;                                                // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
   d4762:	af02      	add	r7, sp, #8
   d4764:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4766:	f006 fb11 	bl	dad8c <strlen>
   d476a:	f100 0308 	add.w	r3, r0, #8
   d476e:	f023 0307 	bic.w	r3, r3, #7
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    current.lastCountTime = Time.now();                     // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d4772:	466d      	mov	r5, sp
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
  dataInFlight = true;                                                // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response                                                                   
  char dataCopy[strlen(data)+1];                                      // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4774:	ebad 0d03 	sub.w	sp, sp, r3
   d4778:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d477a:	1c42      	adds	r2, r0, #1
   d477c:	4631      	mov	r1, r6
   d477e:	4620      	mov	r0, r4
   d4780:	f006 fb21 	bl	dadc6 <strncpy>
  if (!strlen(dataCopy)) {                                            // Copy - overflow safe
   d4784:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d4788:	b95e      	cbnz	r6, d47a2 <_Z14UbidotsHandlerPKcS0_+0x46>
    waitUntil(meterParticlePublish);                                  // First check to see if there is any data
   d478a:	f7ff ff1b 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d478e:	f002 fabb 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4792:	2800      	cmp	r0, #0
   d4794:	d035      	beq.n	d4802 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d4796:	4b1d      	ldr	r3, [pc, #116]	; (d480c <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d4798:	4a1d      	ldr	r2, [pc, #116]	; (d4810 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d479a:	781b      	ldrb	r3, [r3, #0]
   d479c:	f88d 6000 	strb.w	r6, [sp]
   d47a0:	e028      	b.n	d47f4 <_Z14UbidotsHandlerPKcS0_+0x98>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
   d47a2:	4620      	mov	r0, r4
   d47a4:	f005 f96e 	bl	d9a84 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d47a8:	38c8      	subs	r0, #200	; 0xc8
   d47aa:	2801      	cmp	r0, #1
   d47ac:	d819      	bhi.n	d47e2 <_Z14UbidotsHandlerPKcS0_+0x86>
  {
    waitUntil(meterParticlePublish);
   d47ae:	f7ff ff09 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d47b2:	f002 faa9 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
   d47b6:	b160      	cbz	r0, d47d2 <_Z14UbidotsHandlerPKcS0_+0x76>
   d47b8:	4b14      	ldr	r3, [pc, #80]	; (d480c <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d47ba:	4916      	ldr	r1, [pc, #88]	; (d4814 <_Z14UbidotsHandlerPKcS0_+0xb8>)
   d47bc:	781b      	ldrb	r3, [r3, #0]
   d47be:	2200      	movs	r2, #0
   d47c0:	f88d 2000 	strb.w	r2, [sp]
   d47c4:	4638      	mov	r0, r7
   d47c6:	4a14      	ldr	r2, [pc, #80]	; (d4818 <_Z14UbidotsHandlerPKcS0_+0xbc>)
   d47c8:	f7ff fd17 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d47cc:	1d38      	adds	r0, r7, #4
   d47ce:	f7ff ff50 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    current.lastCountTime = Time.now();                     // Record the last successful Webhook Response
   d47d2:	f004 f81c 	bl	d880e <_ZN9TimeClass3nowEv>
   d47d6:	4b11      	ldr	r3, [pc, #68]	; (d481c <_Z14UbidotsHandlerPKcS0_+0xc0>)
   d47d8:	60d8      	str	r0, [r3, #12]
    dataInFlight = false;                                             // Data has been received
   d47da:	4b11      	ldr	r3, [pc, #68]	; (d4820 <_Z14UbidotsHandlerPKcS0_+0xc4>)
   d47dc:	2200      	movs	r2, #0
   d47de:	701a      	strb	r2, [r3, #0]
   d47e0:	e00f      	b.n	d4802 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d47e2:	f002 fa91 	bl	d6d08 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d47e6:	b160      	cbz	r0, d4802 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d47e8:	4b08      	ldr	r3, [pc, #32]	; (d480c <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d47ea:	2200      	movs	r2, #0
   d47ec:	781b      	ldrb	r3, [r3, #0]
   d47ee:	f88d 2000 	strb.w	r2, [sp]
   d47f2:	4622      	mov	r2, r4
   d47f4:	4638      	mov	r0, r7
   d47f6:	490b      	ldr	r1, [pc, #44]	; (d4824 <_Z14UbidotsHandlerPKcS0_+0xc8>)
   d47f8:	f7ff fcff 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d47fc:	1d38      	adds	r0, r7, #4
   d47fe:	f7ff ff38 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4802:	370c      	adds	r7, #12
  char dataCopy[strlen(data)+1];                                      // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  strncpy(dataCopy, data, sizeof(dataCopy));                          // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  if (!strlen(dataCopy)) {                                            // Copy - overflow safe
    waitUntil(meterParticlePublish);                                  // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
   d4804:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    current.lastCountTime = Time.now();                     // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
   d4806:	46bd      	mov	sp, r7
   d4808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d480a:	bf00      	nop
   d480c:	2003e0a8 	.word	0x2003e0a8
   d4810:	000dd140 	.word	0x000dd140
   d4814:	000dd167 	.word	0x000dd167
   d4818:	000dd155 	.word	0x000dd155
   d481c:	2003e14c 	.word	0x2003e14c
   d4820:	2003e168 	.word	0x2003e168
   d4824:	000dd148 	.word	0x000dd148

000d4828 <_Z11recordCountv>:

  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d4828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d482c:	4d44      	ldr	r5, [pc, #272]	; (d4940 <_Z11recordCountv+0x118>)
   d482e:	f8df 8140 	ldr.w	r8, [pc, #320]	; d4970 <_Z11recordCountv+0x148>
   d4832:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4834:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d4838:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d483c:	f003 031f 	and.w	r3, r3, #31
   d4840:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4844:	b0c4      	sub	sp, #272	; 0x110
   d4846:	f7ff fc5b 	bl	d4100 <nrf_gpio_pin_set>
   d484a:	f002 f847 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
  static byte currentMinutePeriod;                                    // Current minute
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
   d484e:	4b3d      	ldr	r3, [pc, #244]	; (d4944 <_Z11recordCountv+0x11c>)
   d4850:	681a      	ldr	r2, [r3, #0]
   d4852:	1a80      	subs	r0, r0, r2
   d4854:	4a3c      	ldr	r2, [pc, #240]	; (d4948 <_Z11recordCountv+0x120>)
   d4856:	6911      	ldr	r1, [r2, #16]
   d4858:	4288      	cmp	r0, r1
   d485a:	461c      	mov	r4, r3
   d485c:	4616      	mov	r6, r2
   d485e:	d222      	bcs.n	d48a6 <_Z11recordCountv+0x7e>
   d4860:	f898 7000 	ldrb.w	r7, [r8]
   d4864:	b9ff      	cbnz	r7, d48a6 <_Z11recordCountv+0x7e>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
      waitUntil(meterParticlePublish);
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
   d4866:	7913      	ldrb	r3, [r2, #4]
   d4868:	b11b      	cbz	r3, d4872 <_Z11recordCountv+0x4a>
   d486a:	f002 fa4d 	bl	d6d08 <spark_cloud_flag_connected>
   d486e:	2800      	cmp	r0, #0
   d4870:	d156      	bne.n	d4920 <_Z11recordCountv+0xf8>
    waitUntil(meterParticlePublish);
    Particle.publish("Event","Debounced", PRIVATE);
  }

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // A low value means someone is pushing this button - will trigger a send to Ubidots and take out of low power mode
   d4872:	2004      	movs	r0, #4
   d4874:	f004 f9ec 	bl	d8c50 <digitalRead>
   d4878:	b908      	cbnz	r0, d487e <_Z11recordCountv+0x56>
   d487a:	f000 f8c7 	bl	d4a0c <_Z18loadSystemDefaultsv>

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d487e:	4b33      	ldr	r3, [pc, #204]	; (d494c <_Z11recordCountv+0x124>)
   d4880:	2201      	movs	r2, #1
   d4882:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4884:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d4886:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d488a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d488e:	f003 031f 	and.w	r3, r3, #31
   d4892:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4896:	f7ff fc42 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
   d489a:	4b2d      	ldr	r3, [pc, #180]	; (d4950 <_Z11recordCountv+0x128>)
   d489c:	2200      	movs	r2, #0
   d489e:	701a      	strb	r2, [r3, #0]
}
   d48a0:	b044      	add	sp, #272	; 0x110
   d48a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48a6:	f002 f819 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d48aa:	4f2a      	ldr	r7, [pc, #168]	; (d4954 <_Z11recordCountv+0x12c>)
  static unsigned long lastCountMillis = 0;

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
   d48ac:	6020      	str	r0, [r4, #0]
    awokeFromNap = false;                                             // Reset the awoke flag
   d48ae:	2300      	movs	r3, #0

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d48b0:	783c      	ldrb	r4, [r7, #0]

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag
   d48b2:	f888 3000 	strb.w	r3, [r8]

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d48b6:	f003 ffbb 	bl	d8830 <_ZN9TimeClass6minuteEv>
   d48ba:	4284      	cmp	r4, r0
   d48bc:	4c26      	ldr	r4, [pc, #152]	; (d4958 <_Z11recordCountv+0x130>)
   d48be:	d004      	beq.n	d48ca <_Z11recordCountv+0xa2>
      currentMinutePeriod = Time.minute();                            // Reset period
   d48c0:	f003 ffb6 	bl	d8830 <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                         // Reset for the new minute
   d48c4:	2301      	movs	r3, #1
  if (millis() - lastCountMillis >= (unsigned)sysStatus.debounce || awokeFromNap) {          // If this event is outside the debounce time, proceed
    lastCountMillis = millis();
    awokeFromNap = false;                                             // Reset the awoke flag

    if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
      currentMinutePeriod = Time.minute();                            // Reset period
   d48c6:	7038      	strb	r0, [r7, #0]
      current.maxMinValue = 1;                                         // Reset for the new minute
   d48c8:	61a3      	str	r3, [r4, #24]
    }
    current.maxMinValue++;
   d48ca:	69a3      	ldr	r3, [r4, #24]
   d48cc:	4f22      	ldr	r7, [pc, #136]	; (d4958 <_Z11recordCountv+0x130>)
   d48ce:	3301      	adds	r3, #1
   d48d0:	61a3      	str	r3, [r4, #24]

    current.lastCountTime = Time.now();
   d48d2:	f003 ff9c 	bl	d880e <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                                // Increment the PersonCount
   d48d6:	6823      	ldr	r3, [r4, #0]
      currentMinutePeriod = Time.minute();                            // Reset period
      current.maxMinValue = 1;                                         // Reset for the new minute
    }
    current.maxMinValue++;

    current.lastCountTime = Time.now();
   d48d8:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                                // Increment the PersonCount
   d48da:	3301      	adds	r3, #1
   d48dc:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                                 // Increment the PersonCount
   d48de:	68a3      	ldr	r3, [r4, #8]
   d48e0:	3301      	adds	r3, #1
   d48e2:	60a3      	str	r3, [r4, #8]
    if (sysStatus.verboseMode && Particle.connected()) {
   d48e4:	7933      	ldrb	r3, [r6, #4]
   d48e6:	2b00      	cmp	r3, #0
   d48e8:	d0c3      	beq.n	d4872 <_Z11recordCountv+0x4a>
   d48ea:	f002 fa0d 	bl	d6d08 <spark_cloud_flag_connected>
   d48ee:	2800      	cmp	r0, #0
   d48f0:	d0bf      	beq.n	d4872 <_Z11recordCountv+0x4a>
      char data[256];                                                    // Store the date in this character array - not global
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d48f2:	68bb      	ldr	r3, [r7, #8]
   d48f4:	9300      	str	r3, [sp, #0]
   d48f6:	683b      	ldr	r3, [r7, #0]
   d48f8:	4a18      	ldr	r2, [pc, #96]	; (d495c <_Z11recordCountv+0x134>)
   d48fa:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48fe:	a804      	add	r0, sp, #16
   d4900:	f002 faba 	bl	d6e78 <snprintf>
      waitUntil(meterParticlePublish);
   d4904:	f7ff fe5e 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4908:	4b15      	ldr	r3, [pc, #84]	; (d4960 <_Z11recordCountv+0x138>)
      Particle.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
   d490a:	4916      	ldr	r1, [pc, #88]	; (d4964 <_Z11recordCountv+0x13c>)
   d490c:	781b      	ldrb	r3, [r3, #0]
   d490e:	2200      	movs	r2, #0
   d4910:	f88d 2000 	strb.w	r2, [sp]
   d4914:	a802      	add	r0, sp, #8
   d4916:	aa04      	add	r2, sp, #16
   d4918:	f7ff fc6f 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d491c:	a803      	add	r0, sp, #12
   d491e:	e00b      	b.n	d4938 <_Z11recordCountv+0x110>
    }
  }
  else if(sysStatus.verboseMode && Particle.connected()) {
    waitUntil(meterParticlePublish);
   d4920:	f7ff fe50 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4924:	4b0e      	ldr	r3, [pc, #56]	; (d4960 <_Z11recordCountv+0x138>)
    Particle.publish("Event","Debounced", PRIVATE);
   d4926:	4a10      	ldr	r2, [pc, #64]	; (d4968 <_Z11recordCountv+0x140>)
   d4928:	781b      	ldrb	r3, [r3, #0]
   d492a:	4910      	ldr	r1, [pc, #64]	; (d496c <_Z11recordCountv+0x144>)
   d492c:	f88d 7000 	strb.w	r7, [sp]
   d4930:	a804      	add	r0, sp, #16
   d4932:	f7ff fc62 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4936:	a805      	add	r0, sp, #20
   d4938:	f7ff fe9b 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d493c:	e799      	b.n	d4872 <_Z11recordCountv+0x4a>
   d493e:	bf00      	nop
   d4940:	2003e0f4 	.word	0x2003e0f4
   d4944:	2003e140 	.word	0x2003e140
   d4948:	2003e16c 	.word	0x2003e16c
   d494c:	2003e148 	.word	0x2003e148
   d4950:	2003e08c 	.word	0x2003e08c
   d4954:	2003e0bf 	.word	0x2003e0bf
   d4958:	2003e14c 	.word	0x2003e14c
   d495c:	000dd16d 	.word	0x000dd16d
   d4960:	2003e0a8 	.word	0x2003e0a8
   d4964:	000dd36f 	.word	0x000dd36f
   d4968:	000dd18a 	.word	0x000dd18a
   d496c:	000dd194 	.word	0x000dd194
   d4970:	2003e0bc 	.word	0x2003e0bc

000d4974 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d4974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4978:	481f      	ldr	r0, [pc, #124]	; (d49f8 <_Z17connectToParticlev+0x84>)
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d497a:	4d20      	ldr	r5, [pc, #128]	; (d49fc <_Z17connectToParticlev+0x88>)
   d497c:	6840      	ldr	r0, [r0, #4]
   d497e:	2300      	movs	r3, #0
   d4980:	461a      	mov	r2, r3
   d4982:	4619      	mov	r1, r3
   d4984:	f002 fa20 	bl	d6dc8 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4988:	f002 f9ae 	bl	d6ce8 <spark_cloud_flag_connect>
   d498c:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4990:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4994:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4996:	f7ff fc43 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d499a:	f04f 0900 	mov.w	r9, #0
   d499e:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d49a0:	f7ff fc3e 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d49a4:	ebb0 0008 	subs.w	r0, r0, r8
   d49a8:	eb61 0109 	sbc.w	r1, r1, r9
   d49ac:	428f      	cmp	r7, r1
   d49ae:	bf08      	it	eq
   d49b0:	4286      	cmpeq	r6, r0
   d49b2:	d305      	bcc.n	d49c0 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49b4:	f002 f9a8 	bl	d6d08 <spark_cloud_flag_connected>
   d49b8:	b910      	cbnz	r0, d49c0 <_Z17connectToParticlev+0x4c>
            spark_process();
   d49ba:	f002 f98d 	bl	d6cd8 <spark_process>
   d49be:	e7ef      	b.n	d49a0 <_Z17connectToParticlev+0x2c>
   d49c0:	f002 f9a2 	bl	d6d08 <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d49c4:	b148      	cbz	r0, d49da <_Z17connectToParticlev+0x66>
   d49c6:	f002 f99f 	bl	d6d08 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d49ca:	b198      	cbz	r0, d49f4 <_Z17connectToParticlev+0x80>
    sysStatus.connectedStatus = 1;
   d49cc:	4a0c      	ldr	r2, [pc, #48]	; (d4a00 <_Z17connectToParticlev+0x8c>)
   d49ce:	2301      	movs	r3, #1
   d49d0:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d49d2:	4a0c      	ldr	r2, [pc, #48]	; (d4a04 <_Z17connectToParticlev+0x90>)
   d49d4:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d49d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d49da:	782b      	ldrb	r3, [r5, #0]
   d49dc:	b10b      	cbz	r3, d49e2 <_Z17connectToParticlev+0x6e>
   d49de:	f7ff ff23 	bl	d4828 <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d49e2:	f001 ff7b 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d49e6:	4b08      	ldr	r3, [pc, #32]	; (d4a08 <_Z17connectToParticlev+0x94>)
   d49e8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d49ea:	f002 f975 	bl	d6cd8 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d49ee:	3c01      	subs	r4, #1
   d49f0:	d0e9      	beq.n	d49c6 <_Z17connectToParticlev+0x52>
   d49f2:	e7d0      	b.n	d4996 <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d49f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d49f8:	2003e1a0 	.word	0x2003e1a0
   d49fc:	2003e08c 	.word	0x2003e08c
   d4a00:	2003e16c 	.word	0x2003e16c
   d4a04:	2003e169 	.word	0x2003e169
   d4a08:	2003e5d4 	.word	0x2003e5d4

000d4a0c <_Z18loadSystemDefaultsv>:
    power.setChargeCurrent(0,1,1,0,0,0);                              // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                                     // default is 4.112V termination voltage
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4a0c:	b530      	push	{r4, r5, lr}
   d4a0e:	b085      	sub	sp, #20
  connectToParticle();                                              // Get connected to Particle
   d4a10:	f7ff ffb0 	bl	d4974 <_Z17connectToParticlev>
  waitUntil(meterParticlePublish);
   d4a14:	f7ff fdd6 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a18:	f002 f976 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Leading System Defaults", PRIVATE);
   d4a1c:	b160      	cbz	r0, d4a38 <_Z18loadSystemDefaultsv+0x2c>
   d4a1e:	4b11      	ldr	r3, [pc, #68]	; (d4a64 <_Z18loadSystemDefaultsv+0x58>)
   d4a20:	4911      	ldr	r1, [pc, #68]	; (d4a68 <_Z18loadSystemDefaultsv+0x5c>)
   d4a22:	781b      	ldrb	r3, [r3, #0]
   d4a24:	2200      	movs	r2, #0
   d4a26:	f88d 2000 	strb.w	r2, [sp]
   d4a2a:	a802      	add	r0, sp, #8
   d4a2c:	4a0f      	ldr	r2, [pc, #60]	; (d4a6c <_Z18loadSystemDefaultsv+0x60>)
   d4a2e:	f7ff fbe4 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4a32:	a803      	add	r0, sp, #12
   d4a34:	f7ff fe1d 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus = {1,0,0,1,0,0,0,0,0,1,1000,0,-5,1,0,23,0};             // These values match up with a system in its default or unconfigured state.
   d4a38:	4d0d      	ldr	r5, [pc, #52]	; (d4a70 <_Z18loadSystemDefaultsv+0x64>)
   d4a3a:	4c0e      	ldr	r4, [pc, #56]	; (d4a74 <_Z18loadSystemDefaultsv+0x68>)
   d4a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  takeMeasurements();
   d4a4c:	f7ff fc74 	bl	d4338 <_Z16takeMeasurementsv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4a50:	232c      	movs	r3, #44	; 0x2c
   d4a52:	f1a4 0220 	sub.w	r2, r4, #32
   d4a56:	2101      	movs	r1, #1
   d4a58:	4807      	ldr	r0, [pc, #28]	; (d4a78 <_Z18loadSystemDefaultsv+0x6c>)
   d4a5a:	f001 f9e2 	bl	d5e22 <_ZN6MB85RC9writeDataEjPKhj>
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d4a5e:	b005      	add	sp, #20
   d4a60:	bd30      	pop	{r4, r5, pc}
   d4a62:	bf00      	nop
   d4a64:	2003e0a8 	.word	0x2003e0a8
   d4a68:	000dd203 	.word	0x000dd203
   d4a6c:	000dd19a 	.word	0x000dd19a
   d4a70:	000dd080 	.word	0x000dd080
   d4a74:	2003e16c 	.word	0x2003e16c
   d4a78:	2003e098 	.word	0x2003e098

000d4a7c <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d4a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4a7e:	490f      	ldr	r1, [pc, #60]	; (d4abc <_Z12hardResetNow6String+0x40>)
   d4a80:	f003 fc9b 	bl	d83ba <_ZNK6String6equalsEPKc>
   d4a84:	2400      	movs	r4, #0
  if (command == "1")
   d4a86:	b1b0      	cbz	r0, d4ab6 <_Z12hardResetNow6String+0x3a>
   d4a88:	4b0d      	ldr	r3, [pc, #52]	; (d4ac0 <_Z12hardResetNow6String+0x44>)
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4a8a:	4a0e      	ldr	r2, [pc, #56]	; (d4ac4 <_Z12hardResetNow6String+0x48>)
   d4a8c:	781b      	ldrb	r3, [r3, #0]
   d4a8e:	490e      	ldr	r1, [pc, #56]	; (d4ac8 <_Z12hardResetNow6String+0x4c>)
   d4a90:	f88d 4000 	strb.w	r4, [sp]
   d4a94:	a802      	add	r0, sp, #8
   d4a96:	f7ff fbb0 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4a9a:	a803      	add	r0, sp, #12
   d4a9c:	f7ff fde9 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d4aa0:	2101      	movs	r1, #1
   d4aa2:	2006      	movs	r0, #6
   d4aa4:	f004 f8bb 	bl	d8c1e <digitalWrite>
    rtc.setAlarm(10);
   d4aa8:	4623      	mov	r3, r4
   d4aaa:	2201      	movs	r2, #1
   d4aac:	210a      	movs	r1, #10
   d4aae:	4807      	ldr	r0, [pc, #28]	; (d4acc <_Z12hardResetNow6String+0x50>)
   d4ab0:	f001 fe2f 	bl	d6712 <_ZN8MCP794108setAlarmEibi>
   d4ab4:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4ab6:	b004      	add	sp, #16
   d4ab8:	bd10      	pop	{r4, pc}
   d4aba:	bf00      	nop
   d4abc:	000dd4e6 	.word	0x000dd4e6
   d4ac0:	2003e0a8 	.word	0x2003e0a8
   d4ac4:	000dd1b2 	.word	0x000dd1b2
   d4ac8:	000dd2ef 	.word	0x000dd2ef
   d4acc:	2003e0d0 	.word	0x2003e0d0

000d4ad0 <_Z11setDebounce6String>:

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
   d4ad0:	b570      	push	{r4, r5, r6, lr}
   d4ad2:	b086      	sub	sp, #24
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
   d4ad4:	a903      	add	r1, sp, #12
   d4ad6:	6800      	ldr	r0, [r0, #0]
   d4ad8:	f006 ffa6 	bl	dba28 <strtof>
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4adc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ae4:	d435      	bmi.n	d4b52 <_Z11setDebounce6String+0x82>
   d4ae6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4aea:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4af2:	bfcc      	ite	gt
   d4af4:	2501      	movgt	r5, #1
   d4af6:	2500      	movle	r5, #0
   d4af8:	bb5d      	cbnz	r5, d4b52 <_Z11setDebounce6String+0x82>
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4afa:	eddf 7a18 	vldr	s15, [pc, #96]	; d4b5c <_Z11setDebounce6String+0x8c>
  systemStatusWriteNeeded = true;
   d4afe:	4b18      	ldr	r3, [pc, #96]	; (d4b60 <_Z11setDebounce6String+0x90>)
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b00:	4e18      	ldr	r6, [pc, #96]	; (d4b64 <_Z11setDebounce6String+0x94>)
   d4b02:	ee60 7a27 	vmul.f32	s15, s0, s15
  systemStatusWriteNeeded = true;
   d4b06:	2401      	movs	r4, #1
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  systemStatusWriteNeeded = true;
   d4b0c:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b0e:	ee10 0a10 	vmov	r0, s0
int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
  sysStatus.debounce = int(inputDebounce*1000);                          // debounce is how long we must space events to prevent overcounting
   d4b12:	edc6 7a04 	vstr	s15, [r6, #16]
  systemStatusWriteNeeded = true;
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
   d4b16:	f004 fbdd 	bl	d92d4 <__aeabi_f2d>
   d4b1a:	4a13      	ldr	r2, [pc, #76]	; (d4b68 <_Z11setDebounce6String+0x98>)
   d4b1c:	e9cd 0100 	strd	r0, r1, [sp]
   d4b20:	2108      	movs	r1, #8
   d4b22:	4812      	ldr	r0, [pc, #72]	; (d4b6c <_Z11setDebounce6String+0x9c>)
   d4b24:	f002 f9a8 	bl	d6e78 <snprintf>
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
   d4b28:	7933      	ldrb	r3, [r6, #4]
   d4b2a:	b1a3      	cbz	r3, d4b56 <_Z11setDebounce6String+0x86>
   d4b2c:	f002 f8ec 	bl	d6d08 <spark_cloud_flag_connected>
   d4b30:	b188      	cbz	r0, d4b56 <_Z11setDebounce6String+0x86>
    waitUntil(meterParticlePublish);
   d4b32:	f7ff fd47 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4b36:	4b0e      	ldr	r3, [pc, #56]	; (d4b70 <_Z11setDebounce6String+0xa0>)
    Particle.publish("Debounce",debounceStr, PRIVATE);
   d4b38:	4a0c      	ldr	r2, [pc, #48]	; (d4b6c <_Z11setDebounce6String+0x9c>)
   d4b3a:	781b      	ldrb	r3, [r3, #0]
   d4b3c:	490d      	ldr	r1, [pc, #52]	; (d4b74 <_Z11setDebounce6String+0xa4>)
   d4b3e:	f88d 5000 	strb.w	r5, [sp]
   d4b42:	a804      	add	r0, sp, #16
   d4b44:	f7ff fb59 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4b48:	a805      	add	r0, sp, #20
   d4b4a:	f7ff fd92 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b4e:	4620      	mov	r0, r4
   d4b50:	e002      	b.n	d4b58 <_Z11setDebounce6String+0x88>

int setDebounce(String command)                                       // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  float inputDebounce = strtof(command,&pEND);                        // Looks for the first float and interprets it
  if ((inputDebounce < 0.0) | (inputDebounce > 5.0)) return 0;        // Make sure it falls in a valid range or send a "fail" result
   d4b52:	2000      	movs	r0, #0
   d4b54:	e000      	b.n	d4b58 <_Z11setDebounce6String+0x88>
  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec",inputDebounce);
  if (sysStatus.verboseMode && Particle.connected()) {                                                  // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Debounce",debounceStr, PRIVATE);
  }
  return 1;                                                           // Returns 1 to let the user know if was reset
   d4b56:	2001      	movs	r0, #1
}
   d4b58:	b006      	add	sp, #24
   d4b5a:	bd70      	pop	{r4, r5, r6, pc}
   d4b5c:	447a0000 	.word	0x447a0000
   d4b60:	2003e169 	.word	0x2003e169
   d4b64:	2003e16c 	.word	0x2003e16c
   d4b68:	000dd1ca 	.word	0x000dd1ca
   d4b6c:	2003df89 	.word	0x2003df89
   d4b70:	2003e0a8 	.word	0x2003e0a8
   d4b74:	000dd440 	.word	0x000dd440

000d4b78 <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4b78:	b530      	push	{r4, r5, lr}
   d4b7a:	4922      	ldr	r1, [pc, #136]	; (d4c04 <_Z12setSolarMode6String+0x8c>)
   d4b7c:	b085      	sub	sp, #20
   d4b7e:	4604      	mov	r4, r0
   d4b80:	f003 fc1b 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4b84:	4605      	mov	r5, r0
   d4b86:	b1d8      	cbz	r0, d4bc0 <_Z12setSolarMode6String+0x48>
  {
    sysStatus.solarPowerMode = true;
   d4b88:	4b1f      	ldr	r3, [pc, #124]	; (d4c08 <_Z12setSolarMode6String+0x90>)
   d4b8a:	2401      	movs	r4, #1
   d4b8c:	715c      	strb	r4, [r3, #5]
    PMICreset();                                               // Change the power management Settings
   d4b8e:	f7ff fc13 	bl	d43b8 <_Z9PMICresetv>
    systemStatusWriteNeeded=true;
   d4b92:	4b1e      	ldr	r3, [pc, #120]	; (d4c0c <_Z12setSolarMode6String+0x94>)
   d4b94:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4b96:	f7ff fd15 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4b9a:	f002 f8b5 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4b9e:	b908      	cbnz	r0, d4ba4 <_Z12setSolarMode6String+0x2c>
    return 1;
   d4ba0:	2001      	movs	r0, #1
   d4ba2:	e02c      	b.n	d4bfe <_Z12setSolarMode6String+0x86>
   d4ba4:	4b1a      	ldr	r3, [pc, #104]	; (d4c10 <_Z12setSolarMode6String+0x98>)
  {
    sysStatus.solarPowerMode = true;
    PMICreset();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4ba6:	491b      	ldr	r1, [pc, #108]	; (d4c14 <_Z12setSolarMode6String+0x9c>)
   d4ba8:	781b      	ldrb	r3, [r3, #0]
   d4baa:	2200      	movs	r2, #0
   d4bac:	f88d 2000 	strb.w	r2, [sp]
   d4bb0:	a802      	add	r0, sp, #8
   d4bb2:	4a19      	ldr	r2, [pc, #100]	; (d4c18 <_Z12setSolarMode6String+0xa0>)
   d4bb4:	f7ff fb21 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4bb8:	a803      	add	r0, sp, #12
   d4bba:	f7ff fd5a 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bbe:	e7ef      	b.n	d4ba0 <_Z12setSolarMode6String+0x28>
   d4bc0:	4916      	ldr	r1, [pc, #88]	; (d4c1c <_Z12setSolarMode6String+0xa4>)
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f003 fbf9 	bl	d83ba <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4bc8:	b1c8      	cbz	r0, d4bfe <_Z12setSolarMode6String+0x86>
  {
    sysStatus.solarPowerMode = false;
   d4bca:	4b0f      	ldr	r3, [pc, #60]	; (d4c08 <_Z12setSolarMode6String+0x90>)
   d4bcc:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
   d4bce:	4b0f      	ldr	r3, [pc, #60]	; (d4c0c <_Z12setSolarMode6String+0x94>)
   d4bd0:	2401      	movs	r4, #1
   d4bd2:	701c      	strb	r4, [r3, #0]
    PMICreset();                                                // Change the power management settings
   d4bd4:	f7ff fbf0 	bl	d43b8 <_Z9PMICresetv>
    waitUntil(meterParticlePublish);
   d4bd8:	f7ff fcf4 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4bdc:	f002 f894 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4be0:	2800      	cmp	r0, #0
   d4be2:	d0dd      	beq.n	d4ba0 <_Z12setSolarMode6String+0x28>
   d4be4:	4b0a      	ldr	r3, [pc, #40]	; (d4c10 <_Z12setSolarMode6String+0x98>)
   d4be6:	4a0e      	ldr	r2, [pc, #56]	; (d4c20 <_Z12setSolarMode6String+0xa8>)
   d4be8:	781b      	ldrb	r3, [r3, #0]
   d4bea:	490a      	ldr	r1, [pc, #40]	; (d4c14 <_Z12setSolarMode6String+0x9c>)
   d4bec:	f88d 5000 	strb.w	r5, [sp]
   d4bf0:	a802      	add	r0, sp, #8
   d4bf2:	f7ff fb02 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4bf6:	a803      	add	r0, sp, #12
   d4bf8:	f7ff fd3b 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bfc:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4bfe:	b005      	add	sp, #20
   d4c00:	bd30      	pop	{r4, r5, pc}
   d4c02:	bf00      	nop
   d4c04:	000dd4e6 	.word	0x000dd4e6
   d4c08:	2003e16c 	.word	0x2003e16c
   d4c0c:	2003e169 	.word	0x2003e169
   d4c10:	2003e0a8 	.word	0x2003e0a8
   d4c14:	000dd203 	.word	0x000dd203
   d4c18:	000dd1d4 	.word	0x000dd1d4
   d4c1c:	000dd1eb 	.word	0x000dd1eb
   d4c20:	000dd1ed 	.word	0x000dd1ed

000d4c24 <_Z14setverboseMode6String>:

int setverboseMode(String command) // Function to force sending data in current hour
{
   d4c24:	b530      	push	{r4, r5, lr}
   d4c26:	4920      	ldr	r1, [pc, #128]	; (d4ca8 <_Z14setverboseMode6String+0x84>)
   d4c28:	b085      	sub	sp, #20
   d4c2a:	4604      	mov	r4, r0
   d4c2c:	f003 fbc5 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c30:	4605      	mov	r5, r0
   d4c32:	b1c8      	cbz	r0, d4c68 <_Z14setverboseMode6String+0x44>
  {
    sysStatus.verboseMode = true;
   d4c34:	4b1d      	ldr	r3, [pc, #116]	; (d4cac <_Z14setverboseMode6String+0x88>)
   d4c36:	2401      	movs	r4, #1
   d4c38:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c3a:	4b1d      	ldr	r3, [pc, #116]	; (d4cb0 <_Z14setverboseMode6String+0x8c>)
   d4c3c:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c3e:	f7ff fcc1 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4c42:	f002 f861 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c46:	b908      	cbnz	r0, d4c4c <_Z14setverboseMode6String+0x28>
    return 1;
   d4c48:	2001      	movs	r0, #1
   d4c4a:	e02a      	b.n	d4ca2 <_Z14setverboseMode6String+0x7e>
   d4c4c:	4b19      	ldr	r3, [pc, #100]	; (d4cb4 <_Z14setverboseMode6String+0x90>)
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    waitUntil(meterParticlePublish);
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode", PRIVATE);
   d4c4e:	491a      	ldr	r1, [pc, #104]	; (d4cb8 <_Z14setverboseMode6String+0x94>)
   d4c50:	781b      	ldrb	r3, [r3, #0]
   d4c52:	2200      	movs	r2, #0
   d4c54:	f88d 2000 	strb.w	r2, [sp]
   d4c58:	a802      	add	r0, sp, #8
   d4c5a:	4a18      	ldr	r2, [pc, #96]	; (d4cbc <_Z14setverboseMode6String+0x98>)
   d4c5c:	f7ff facd 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c60:	a803      	add	r0, sp, #12
   d4c62:	f7ff fd06 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c66:	e7ef      	b.n	d4c48 <_Z14setverboseMode6String+0x24>
   d4c68:	4915      	ldr	r1, [pc, #84]	; (d4cc0 <_Z14setverboseMode6String+0x9c>)
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f003 fba5 	bl	d83ba <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4c70:	b1b8      	cbz	r0, d4ca2 <_Z14setverboseMode6String+0x7e>
  {
    sysStatus.verboseMode = false;
   d4c72:	4b0e      	ldr	r3, [pc, #56]	; (d4cac <_Z14setverboseMode6String+0x88>)
   d4c74:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4c76:	4b0e      	ldr	r3, [pc, #56]	; (d4cb0 <_Z14setverboseMode6String+0x8c>)
   d4c78:	2401      	movs	r4, #1
   d4c7a:	701c      	strb	r4, [r3, #0]
    waitUntil(meterParticlePublish);
   d4c7c:	f7ff fca2 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4c80:	f002 f842 	bl	d6d08 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4c84:	2800      	cmp	r0, #0
   d4c86:	d0df      	beq.n	d4c48 <_Z14setverboseMode6String+0x24>
   d4c88:	4b0a      	ldr	r3, [pc, #40]	; (d4cb4 <_Z14setverboseMode6String+0x90>)
   d4c8a:	4a0e      	ldr	r2, [pc, #56]	; (d4cc4 <_Z14setverboseMode6String+0xa0>)
   d4c8c:	781b      	ldrb	r3, [r3, #0]
   d4c8e:	490a      	ldr	r1, [pc, #40]	; (d4cb8 <_Z14setverboseMode6String+0x94>)
   d4c90:	f88d 5000 	strb.w	r5, [sp]
   d4c94:	a802      	add	r0, sp, #8
   d4c96:	f7ff fab0 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4c9a:	a803      	add	r0, sp, #12
   d4c9c:	f7ff fce9 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ca0:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4ca2:	b005      	add	sp, #20
   d4ca4:	bd30      	pop	{r4, r5, pc}
   d4ca6:	bf00      	nop
   d4ca8:	000dd4e6 	.word	0x000dd4e6
   d4cac:	2003e16c 	.word	0x2003e16c
   d4cb0:	2003e169 	.word	0x2003e169
   d4cb4:	2003e0a8 	.word	0x2003e0a8
   d4cb8:	000dd203 	.word	0x000dd203
   d4cbc:	000dd208 	.word	0x000dd208
   d4cc0:	000dd1eb 	.word	0x000dd1eb
   d4cc4:	000dd219 	.word	0x000dd219

000d4cc8 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4cc8:	b570      	push	{r4, r5, r6, lr}
   d4cca:	b0cc      	sub	sp, #304	; 0x130
   d4ccc:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4cce:	f003 fd9e 	bl	d880e <_ZN9TimeClass3nowEv>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cd2:	220a      	movs	r2, #10

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4cd4:	4605      	mov	r5, r0
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4cd6:	a905      	add	r1, sp, #20
   d4cd8:	6820      	ldr	r0, [r4, #0]
   d4cda:	f006 ff4b 	bl	dbb74 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4cde:	f100 030c 	add.w	r3, r0, #12
   d4ce2:	b2db      	uxtb	r3, r3
   d4ce4:	2b18      	cmp	r3, #24
   d4ce6:	d855      	bhi.n	d4d94 <_Z11setTimeZone6String+0xcc>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4ce8:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4cea:	ee07 4a90 	vmov	s15, r4
   d4cee:	4b2e      	ldr	r3, [pc, #184]	; (d4da8 <_Z11setTimeZone6String+0xe0>)
   d4cf0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4cf4:	ed83 0a06 	vstr	s0, [r3, #24]
  Time.zone(sysStatus.timezone);
   d4cf8:	f003 fc66 	bl	d85c8 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4cfc:	4b2b      	ldr	r3, [pc, #172]	; (d4dac <_Z11setTimeZone6String+0xe4>)
   d4cfe:	2201      	movs	r2, #1
   d4d00:	701a      	strb	r2, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4d02:	f003 fc53 	bl	d85ac <_ZN9TimeClass5localEv>
   d4d06:	4606      	mov	r6, r0
   d4d08:	f003 fd81 	bl	d880e <_ZN9TimeClass3nowEv>
   d4d0c:	1a30      	subs	r0, r6, r0
   d4d0e:	f004 facf 	bl	d92b0 <__aeabi_i2d>
   d4d12:	a323      	add	r3, pc, #140	; (adr r3, d4da0 <_Z11setTimeZone6String+0xd8>)
   d4d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d18:	f004 fc5a 	bl	d95d0 <__aeabi_ddiv>
   d4d1c:	4a24      	ldr	r2, [pc, #144]	; (d4db0 <_Z11setTimeZone6String+0xe8>)
   d4d1e:	e9cd 0100 	strd	r0, r1, [sp]
   d4d22:	210a      	movs	r1, #10
   d4d24:	4823      	ldr	r0, [pc, #140]	; (d4db4 <_Z11setTimeZone6String+0xec>)
   d4d26:	f002 f8a7 	bl	d6e78 <snprintf>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4d2a:	4623      	mov	r3, r4
   d4d2c:	4a22      	ldr	r2, [pc, #136]	; (d4db8 <_Z11setTimeZone6String+0xf0>)
   d4d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4d32:	a80c      	add	r0, sp, #48	; 0x30
   d4d34:	f002 f8a0 	bl	d6e78 <snprintf>
  waitUntil(meterParticlePublish);
   d4d38:	f7ff fc44 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4d3c:	f001 ffe4 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4d40:	b160      	cbz	r0, d4d5c <_Z11setTimeZone6String+0x94>
   d4d42:	4b1e      	ldr	r3, [pc, #120]	; (d4dbc <_Z11setTimeZone6String+0xf4>)
   d4d44:	491e      	ldr	r1, [pc, #120]	; (d4dc0 <_Z11setTimeZone6String+0xf8>)
   d4d46:	781b      	ldrb	r3, [r3, #0]
   d4d48:	2200      	movs	r2, #0
   d4d4a:	f88d 2000 	strb.w	r2, [sp]
   d4d4e:	a808      	add	r0, sp, #32
   d4d50:	aa0c      	add	r2, sp, #48	; 0x30
   d4d52:	f7ff fa52 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4d56:	a809      	add	r0, sp, #36	; 0x24
   d4d58:	f7ff fc8b 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d4d5c:	f7ff fc32 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4d60:	f001 ffd2 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d4d64:	b1c0      	cbz	r0, d4d98 <_Z11setTimeZone6String+0xd0>
   d4d66:	4629      	mov	r1, r5
   d4d68:	a808      	add	r0, sp, #32
   d4d6a:	f003 fc7d 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d4d6e:	9b08      	ldr	r3, [sp, #32]
   d4d70:	9303      	str	r3, [sp, #12]
   d4d72:	4b12      	ldr	r3, [pc, #72]	; (d4dbc <_Z11setTimeZone6String+0xf4>)
   d4d74:	4912      	ldr	r1, [pc, #72]	; (d4dc0 <_Z11setTimeZone6String+0xf8>)
   d4d76:	781b      	ldrb	r3, [r3, #0]
   d4d78:	2200      	movs	r2, #0
   d4d7a:	f88d 2000 	strb.w	r2, [sp]
   d4d7e:	a806      	add	r0, sp, #24
   d4d80:	9a03      	ldr	r2, [sp, #12]
   d4d82:	f7ff fa3a 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4d86:	a807      	add	r0, sp, #28
   d4d88:	f7ff fc73 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d8c:	a808      	add	r0, sp, #32
   d4d8e:	f003 faa0 	bl	d82d2 <_ZN6StringD1Ev>
   d4d92:	e001      	b.n	d4d98 <_Z11setTimeZone6String+0xd0>
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4d94:	2000      	movs	r0, #0
   d4d96:	e000      	b.n	d4d9a <_Z11setTimeZone6String+0xd2>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d4d98:	2001      	movs	r0, #1
}
   d4d9a:	b04c      	add	sp, #304	; 0x130
   d4d9c:	bd70      	pop	{r4, r5, r6, pc}
   d4d9e:	bf00      	nop
   d4da0:	00000000 	.word	0x00000000
   d4da4:	40ac2000 	.word	0x40ac2000
   d4da8:	2003e16c 	.word	0x2003e16c
   d4dac:	2003e169 	.word	0x2003e169
   d4db0:	000dd22e 	.word	0x000dd22e
   d4db4:	2003e08d 	.word	0x2003e08d
   d4db8:	000dd238 	.word	0x000dd238
   d4dbc:	2003e0a8 	.word	0x2003e0a8
   d4dc0:	000dd3a6 	.word	0x000dd3a6

000d4dc4 <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
   d4dc4:	b510      	push	{r4, lr}
   d4dc6:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4dc8:	220a      	movs	r2, #10
   d4dca:	a903      	add	r1, sp, #12
   d4dcc:	6800      	ldr	r0, [r0, #0]
   d4dce:	f006 fed1 	bl	dbb74 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4dd2:	2817      	cmp	r0, #23

int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4dd4:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4dd6:	d81d      	bhi.n	d4e14 <_Z11setOpenTime6String+0x50>
  sysStatus.openTime = tempTime;
   d4dd8:	4a11      	ldr	r2, [pc, #68]	; (d4e20 <_Z11setOpenTime6String+0x5c>)
   d4dda:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4ddc:	4a11      	ldr	r2, [pc, #68]	; (d4e24 <_Z11setOpenTime6String+0x60>)
   d4dde:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4de0:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4de4:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4de6:	a806      	add	r0, sp, #24
   d4de8:	4a0f      	ldr	r2, [pc, #60]	; (d4e28 <_Z11setOpenTime6String+0x64>)
   d4dea:	f002 f845 	bl	d6e78 <snprintf>
  waitUntil(meterParticlePublish);
   d4dee:	f7ff fbe9 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4df2:	f001 ff89 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4df6:	b178      	cbz	r0, d4e18 <_Z11setOpenTime6String+0x54>
   d4df8:	4b0c      	ldr	r3, [pc, #48]	; (d4e2c <_Z11setOpenTime6String+0x68>)
   d4dfa:	490d      	ldr	r1, [pc, #52]	; (d4e30 <_Z11setOpenTime6String+0x6c>)
   d4dfc:	781b      	ldrb	r3, [r3, #0]
   d4dfe:	2200      	movs	r2, #0
   d4e00:	f88d 2000 	strb.w	r2, [sp]
   d4e04:	a804      	add	r0, sp, #16
   d4e06:	aa06      	add	r2, sp, #24
   d4e08:	f7ff f9f7 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4e0c:	a805      	add	r0, sp, #20
   d4e0e:	f7ff fc30 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e12:	e001      	b.n	d4e18 <_Z11setOpenTime6String+0x54>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4e14:	2000      	movs	r0, #0
   d4e16:	e000      	b.n	d4e1a <_Z11setOpenTime6String+0x56>
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4e18:	4620      	mov	r0, r4
}
   d4e1a:	b046      	add	sp, #280	; 0x118
   d4e1c:	bd10      	pop	{r4, pc}
   d4e1e:	bf00      	nop
   d4e20:	2003e16c 	.word	0x2003e16c
   d4e24:	2003e169 	.word	0x2003e169
   d4e28:	000dd24c 	.word	0x000dd24c
   d4e2c:	2003e0a8 	.word	0x2003e0a8
   d4e30:	000dd3a6 	.word	0x000dd3a6

000d4e34 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d4e34:	b510      	push	{r4, lr}
   d4e36:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e38:	220a      	movs	r2, #10
   d4e3a:	a903      	add	r1, sp, #12
   d4e3c:	6800      	ldr	r0, [r0, #0]
   d4e3e:	f006 fe99 	bl	dbb74 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e42:	2817      	cmp	r0, #23

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4e44:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e46:	d81d      	bhi.n	d4e84 <_Z12setCloseTime6String+0x50>
  sysStatus.closeTime = tempTime;
   d4e48:	4a11      	ldr	r2, [pc, #68]	; (d4e90 <_Z12setCloseTime6String+0x5c>)
   d4e4a:	6250      	str	r0, [r2, #36]	; 0x24
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e4c:	4a11      	ldr	r2, [pc, #68]	; (d4e94 <_Z12setCloseTime6String+0x60>)
   d4e4e:	2401      	movs	r4, #1
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e50:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4e54:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4e56:	a806      	add	r0, sp, #24
   d4e58:	4a0f      	ldr	r2, [pc, #60]	; (d4e98 <_Z12setCloseTime6String+0x64>)
   d4e5a:	f002 f80d 	bl	d6e78 <snprintf>
  waitUntil(meterParticlePublish);
   d4e5e:	f7ff fbb1 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4e62:	f001 ff51 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d4e66:	b178      	cbz	r0, d4e88 <_Z12setCloseTime6String+0x54>
   d4e68:	4b0c      	ldr	r3, [pc, #48]	; (d4e9c <_Z12setCloseTime6String+0x68>)
   d4e6a:	490d      	ldr	r1, [pc, #52]	; (d4ea0 <_Z12setCloseTime6String+0x6c>)
   d4e6c:	781b      	ldrb	r3, [r3, #0]
   d4e6e:	2200      	movs	r2, #0
   d4e70:	f88d 2000 	strb.w	r2, [sp]
   d4e74:	a804      	add	r0, sp, #16
   d4e76:	aa06      	add	r2, sp, #24
   d4e78:	f7ff f9bf 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4e7c:	a805      	add	r0, sp, #20
   d4e7e:	f7ff fbf8 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e82:	e001      	b.n	d4e88 <_Z12setCloseTime6String+0x54>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e84:	2000      	movs	r0, #0
   d4e86:	e000      	b.n	d4e8a <_Z12setCloseTime6String+0x56>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
   d4e88:	4620      	mov	r0, r4
}
   d4e8a:	b046      	add	sp, #280	; 0x118
   d4e8c:	bd10      	pop	{r4, pc}
   d4e8e:	bf00      	nop
   d4e90:	2003e16c 	.word	0x2003e16c
   d4e94:	2003e169 	.word	0x2003e169
   d4e98:	000dd260 	.word	0x000dd260
   d4e9c:	2003e0a8 	.word	0x2003e0a8
   d4ea0:	000dd3a6 	.word	0x000dd3a6

000d4ea4 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4ea8:	4941      	ldr	r1, [pc, #260]	; (d4fb0 <_Z15setLowPowerMode6String+0x10c>)
   d4eaa:	b085      	sub	sp, #20
   d4eac:	4604      	mov	r4, r0
   d4eae:	f003 fa84 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4eb2:	b928      	cbnz	r0, d4ec0 <_Z15setLowPowerMode6String+0x1c>
   d4eb4:	493f      	ldr	r1, [pc, #252]	; (d4fb4 <_Z15setLowPowerMode6String+0x110>)
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	f003 fa7f 	bl	d83ba <_ZNK6String6equalsEPKc>
   d4ebc:	2800      	cmp	r0, #0
   d4ebe:	d073      	beq.n	d4fa8 <_Z15setLowPowerMode6String+0x104>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4ec0:	493b      	ldr	r1, [pc, #236]	; (d4fb0 <_Z15setLowPowerMode6String+0x10c>)
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	f003 fa79 	bl	d83ba <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4ec8:	4605      	mov	r5, r0
   d4eca:	b1b0      	cbz	r0, d4efa <_Z15setLowPowerMode6String+0x56>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4ecc:	4c3a      	ldr	r4, [pc, #232]	; (d4fb8 <_Z15setLowPowerMode6String+0x114>)
   d4ece:	7923      	ldrb	r3, [r4, #4]
   d4ed0:	b11b      	cbz	r3, d4eda <_Z15setLowPowerMode6String+0x36>
   d4ed2:	f001 ff19 	bl	d6d08 <spark_cloud_flag_connected>
   d4ed6:	2800      	cmp	r0, #0
   d4ed8:	d144      	bne.n	d4f64 <_Z15setLowPowerMode6String+0xc0>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    if (sysStatus.connectedStatus) {                                     // If we are in connected mode
   d4eda:	78e3      	ldrb	r3, [r4, #3]
   d4edc:	b15b      	cbz	r3, d4ef6 <_Z15setLowPowerMode6String+0x52>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4ede:	f001 ff0b 	bl	d6cf8 <spark_cloud_flag_disconnect>
      Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
      sysStatus.connectedStatus = false;
   d4ee2:	4b35      	ldr	r3, [pc, #212]	; (d4fb8 <_Z15setLowPowerMode6String+0x114>)
      Cellular.off();
   d4ee4:	4835      	ldr	r0, [pc, #212]	; (d4fbc <_Z15setLowPowerMode6String+0x118>)
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Low Power", PRIVATE);
    }
    if (sysStatus.connectedStatus) {                                     // If we are in connected mode
      Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
      sysStatus.connectedStatus = false;
   d4ee6:	2200      	movs	r2, #0
   d4ee8:	70da      	strb	r2, [r3, #3]
      Cellular.off();
   d4eea:	f7ff f993 	bl	d4214 <_ZN5spark13CellularClass3offEv>
      delay(1000);                                                    // Bummer but only should happen once an hour
   d4eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ef2:	f001 ffe1 	bl	d6eb8 <delay>
    }
    sysStatus.lowPowerMode = true;
   d4ef6:	2301      	movs	r3, #1
   d4ef8:	e02f      	b.n	d4f5a <_Z15setLowPowerMode6String+0xb6>
   d4efa:	492e      	ldr	r1, [pc, #184]	; (d4fb4 <_Z15setLowPowerMode6String+0x110>)
   d4efc:	4620      	mov	r0, r4
   d4efe:	f003 fa5c 	bl	d83ba <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4f02:	b358      	cbz	r0, d4f5c <_Z15setLowPowerMode6String+0xb8>
  {
    if (sysStatus.verboseMode && Particle.connected()) {
   d4f04:	4c2c      	ldr	r4, [pc, #176]	; (d4fb8 <_Z15setLowPowerMode6String+0x114>)
   d4f06:	7923      	ldrb	r3, [r4, #4]
   d4f08:	b11b      	cbz	r3, d4f12 <_Z15setLowPowerMode6String+0x6e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f0a:	f001 fefd 	bl	d6d08 <spark_cloud_flag_connected>
   d4f0e:	2800      	cmp	r0, #0
   d4f10:	d138      	bne.n	d4f84 <_Z15setLowPowerMode6String+0xe0>
      waitUntil(meterParticlePublish);
      Particle.publish("Mode","Normal Operations", PRIVATE);
    }
    if (!sysStatus.connectedStatus) {
   d4f12:	78e3      	ldrb	r3, [r4, #3]
   d4f14:	bb03      	cbnz	r3, d4f58 <_Z15setLowPowerMode6String+0xb4>
      sysStatus.connectedStatus = true;
   d4f16:	4b28      	ldr	r3, [pc, #160]	; (d4fb8 <_Z15setLowPowerMode6String+0x114>)
   d4f18:	2201      	movs	r2, #1
   d4f1a:	70da      	strb	r2, [r3, #3]
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4f1c:	f001 fee4 	bl	d6ce8 <spark_cloud_flag_connect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4f20:	f7ff f97e 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4f24:	2700      	movs	r7, #0
   d4f26:	4606      	mov	r6, r0
   d4f28:	f64e 285f 	movw	r8, #59999	; 0xea5f
   d4f2c:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4f30:	f7ff f976 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4f34:	1b80      	subs	r0, r0, r6
   d4f36:	eb61 0107 	sbc.w	r1, r1, r7
   d4f3a:	4589      	cmp	r9, r1
   d4f3c:	bf08      	it	eq
   d4f3e:	4580      	cmpeq	r8, r0
   d4f40:	d302      	bcc.n	d4f48 <_Z15setLowPowerMode6String+0xa4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f42:	f001 fee1 	bl	d6d08 <spark_cloud_flag_connected>
   d4f46:	b360      	cbz	r0, d4fa2 <_Z15setLowPowerMode6String+0xfe>
   d4f48:	f001 fede 	bl	d6d08 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f4c:	f001 fcc6 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f50:	4b1b      	ldr	r3, [pc, #108]	; (d4fc0 <_Z15setLowPowerMode6String+0x11c>)
   d4f52:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4f54:	f001 fec0 	bl	d6cd8 <spark_process>
      Particle.connect();
      waitFor(Particle.connected,60000);                                // Give us 60 seconds to connect
      Particle.process();
    }
    sysStatus.lowPowerMode = false;
   d4f58:	2300      	movs	r3, #0
   d4f5a:	71a3      	strb	r3, [r4, #6]
  }
  systemStatusWriteNeeded = true;
   d4f5c:	4b19      	ldr	r3, [pc, #100]	; (d4fc4 <_Z15setLowPowerMode6String+0x120>)
   d4f5e:	2001      	movs	r0, #1
   d4f60:	7018      	strb	r0, [r3, #0]
   d4f62:	e021      	b.n	d4fa8 <_Z15setLowPowerMode6String+0x104>
{
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4f64:	f7ff fb2e 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4f68:	4b17      	ldr	r3, [pc, #92]	; (d4fc8 <_Z15setLowPowerMode6String+0x124>)
      Particle.publish("Mode","Low Power", PRIVATE);
   d4f6a:	4918      	ldr	r1, [pc, #96]	; (d4fcc <_Z15setLowPowerMode6String+0x128>)
   d4f6c:	781b      	ldrb	r3, [r3, #0]
   d4f6e:	2200      	movs	r2, #0
   d4f70:	f88d 2000 	strb.w	r2, [sp]
   d4f74:	a802      	add	r0, sp, #8
   d4f76:	4a16      	ldr	r2, [pc, #88]	; (d4fd0 <_Z15setLowPowerMode6String+0x12c>)
   d4f78:	f7ff f93f 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f7c:	a803      	add	r0, sp, #12
   d4f7e:	f7ff fb78 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f82:	e7aa      	b.n	d4eda <_Z15setLowPowerMode6String+0x36>
    sysStatus.lowPowerMode = true;
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
  {
    if (sysStatus.verboseMode && Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4f84:	f7ff fb1e 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d4f88:	4b0f      	ldr	r3, [pc, #60]	; (d4fc8 <_Z15setLowPowerMode6String+0x124>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
   d4f8a:	4a12      	ldr	r2, [pc, #72]	; (d4fd4 <_Z15setLowPowerMode6String+0x130>)
   d4f8c:	781b      	ldrb	r3, [r3, #0]
   d4f8e:	490f      	ldr	r1, [pc, #60]	; (d4fcc <_Z15setLowPowerMode6String+0x128>)
   d4f90:	f88d 5000 	strb.w	r5, [sp]
   d4f94:	a802      	add	r0, sp, #8
   d4f96:	f7ff f930 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d4f9a:	a803      	add	r0, sp, #12
   d4f9c:	f7ff fb69 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fa0:	e7b7      	b.n	d4f12 <_Z15setLowPowerMode6String+0x6e>
            spark_process();
   d4fa2:	f001 fe99 	bl	d6cd8 <spark_process>
   d4fa6:	e7c3      	b.n	d4f30 <_Z15setLowPowerMode6String+0x8c>
    }
    sysStatus.lowPowerMode = false;
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d4fa8:	b005      	add	sp, #20
   d4faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4fae:	bf00      	nop
   d4fb0:	000dd4e6 	.word	0x000dd4e6
   d4fb4:	000dd1eb 	.word	0x000dd1eb
   d4fb8:	2003e16c 	.word	0x2003e16c
   d4fbc:	2003e1a0 	.word	0x2003e1a0
   d4fc0:	2003e5d4 	.word	0x2003e5d4
   d4fc4:	2003e169 	.word	0x2003e169
   d4fc8:	2003e0a8 	.word	0x2003e0a8
   d4fcc:	000dd203 	.word	0x000dd203
   d4fd0:	000dd277 	.word	0x000dd277
   d4fd4:	000dd281 	.word	0x000dd281

000d4fd8 <_Z22publishStateTransitionv>:
  }
  else return 0;
}

void publishStateTransition(void)
{
   d4fd8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4fda:	4d16      	ldr	r5, [pc, #88]	; (d5034 <_Z22publishStateTransitionv+0x5c>)
   d4fdc:	4c16      	ldr	r4, [pc, #88]	; (d5038 <_Z22publishStateTransitionv+0x60>)
   d4fde:	4917      	ldr	r1, [pc, #92]	; (d503c <_Z22publishStateTransitionv+0x64>)
   d4fe0:	782a      	ldrb	r2, [r5, #0]
   d4fe2:	7820      	ldrb	r0, [r4, #0]
  }
  else return 0;
}

void publishStateTransition(void)
{
   d4fe4:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4fe6:	230e      	movs	r3, #14
   d4fe8:	fb03 1202 	mla	r2, r3, r2, r1
   d4fec:	9200      	str	r2, [sp, #0]
   d4fee:	fb03 1300 	mla	r3, r3, r0, r1
   d4ff2:	4a13      	ldr	r2, [pc, #76]	; (d5040 <_Z22publishStateTransitionv+0x68>)
   d4ff4:	2128      	movs	r1, #40	; 0x28
   d4ff6:	a804      	add	r0, sp, #16
   d4ff8:	f001 ff3e 	bl	d6e78 <snprintf>
  oldState = state;
   d4ffc:	782b      	ldrb	r3, [r5, #0]
   d4ffe:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5000:	f001 fe82 	bl	d6d08 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d5004:	b170      	cbz	r0, d5024 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d5006:	f7ff fadd 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d500a:	4b0e      	ldr	r3, [pc, #56]	; (d5044 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d500c:	490e      	ldr	r1, [pc, #56]	; (d5048 <_Z22publishStateTransitionv+0x70>)
   d500e:	781b      	ldrb	r3, [r3, #0]
   d5010:	2200      	movs	r2, #0
   d5012:	f88d 2000 	strb.w	r2, [sp]
   d5016:	a802      	add	r0, sp, #8
   d5018:	aa04      	add	r2, sp, #16
   d501a:	f7ff f8ee 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d501e:	a803      	add	r0, sp, #12
   d5020:	f7ff fb27 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d5024:	f003 fd1e 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5028:	a904      	add	r1, sp, #16
   d502a:	f003 f8b8 	bl	d819e <_ZN5Print7printlnEPKc>
}
   d502e:	b00f      	add	sp, #60	; 0x3c
   d5030:	bd30      	pop	{r4, r5, pc}
   d5032:	bf00      	nop
   d5034:	2003e0bd 	.word	0x2003e0bd
   d5038:	2003e0b4 	.word	0x2003e0b4
   d503c:	2003df14 	.word	0x2003df14
   d5040:	000dd293 	.word	0x000dd293
   d5044:	2003e0a8 	.word	0x2003e0a8
   d5048:	000dd2a1 	.word	0x000dd2a1

000d504c <_Z12dailyCleanupv>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Function to clean house at the end of the day
   d504c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5050:	b085      	sub	sp, #20
  waitUntil(meterParticlePublish);
   d5052:	f7ff fab7 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d5056:	4b1f      	ldr	r3, [pc, #124]	; (d50d4 <_Z12dailyCleanupv+0x88>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d5058:	4a1f      	ldr	r2, [pc, #124]	; (d50d8 <_Z12dailyCleanupv+0x8c>)
   d505a:	781b      	ldrb	r3, [r3, #0]
   d505c:	491f      	ldr	r1, [pc, #124]	; (d50dc <_Z12dailyCleanupv+0x90>)

  sysStatus.verboseMode = false;
   d505e:	4c20      	ldr	r4, [pc, #128]	; (d50e0 <_Z12dailyCleanupv+0x94>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5060:	2500      	movs	r5, #0
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Function to clean house at the end of the day
  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d5062:	a802      	add	r0, sp, #8
   d5064:	f88d 5000 	strb.w	r5, [sp]
   d5068:	f7ff f8c7 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d506c:	a803      	add	r0, sp, #12
   d506e:	f7ff fb00 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  sysStatus.verboseMode = false;
   d5072:	7125      	strb	r5, [r4, #4]
   d5074:	f001 fe48 	bl	d6d08 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d5078:	b110      	cbz	r0, d5080 <_Z12dailyCleanupv+0x34>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d507a:	4628      	mov	r0, r5
   d507c:	f001 fe64 	bl	d6d48 <spark_sync_time>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d5080:	f7ff f8ce 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5084:	2700      	movs	r7, #0
   d5086:	4606      	mov	r6, r0
   d5088:	f247 582f 	movw	r8, #29999	; 0x752f
   d508c:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5090:	f7ff f8c6 	bl	d4220 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5094:	1b80      	subs	r0, r0, r6
   d5096:	eb61 0107 	sbc.w	r1, r1, r7
   d509a:	4589      	cmp	r9, r1
   d509c:	bf08      	it	eq
   d509e:	4580      	cmpeq	r8, r0
   d50a0:	d305      	bcc.n	d50ae <_Z12dailyCleanupv+0x62>
 
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d50a2:	f7ff f89d 	bl	d41e0 <_ZN10CloudClass12syncTimeDoneEv.isra.39>
   d50a6:	b910      	cbnz	r0, d50ae <_Z12dailyCleanupv+0x62>
            spark_process();
   d50a8:	f001 fe16 	bl	d6cd8 <spark_process>
   d50ac:	e7f0      	b.n	d5090 <_Z12dailyCleanupv+0x44>
   d50ae:	f7ff f897 	bl	d41e0 <_ZN10CloudClass12syncTimeDoneEv.isra.39>

  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {                        // If the battery is being discharged
   d50b2:	7963      	ldrb	r3, [r4, #5]
   d50b4:	b91b      	cbnz	r3, d50be <_Z12dailyCleanupv+0x72>
   d50b6:	4b0a      	ldr	r3, [pc, #40]	; (d50e0 <_Z12dailyCleanupv+0x94>)
   d50b8:	689b      	ldr	r3, [r3, #8]
   d50ba:	2b46      	cmp	r3, #70	; 0x46
   d50bc:	dc03      	bgt.n	d50c6 <_Z12dailyCleanupv+0x7a>
    sysStatus.lowPowerMode = true;
   d50be:	2301      	movs	r3, #1
   d50c0:	71a3      	strb	r3, [r4, #6]
    sysStatus.connectedStatus = false;
   d50c2:	2300      	movs	r3, #0
   d50c4:	70e3      	strb	r3, [r4, #3]
  }
  systemStatusWriteNeeded=true;
   d50c6:	4b07      	ldr	r3, [pc, #28]	; (d50e4 <_Z12dailyCleanupv+0x98>)
   d50c8:	2201      	movs	r2, #1
   d50ca:	701a      	strb	r2, [r3, #0]
}
   d50cc:	b005      	add	sp, #20
   d50ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d50d2:	bf00      	nop
   d50d4:	2003e0a8 	.word	0x2003e0a8
   d50d8:	000dd2b2 	.word	0x000dd2b2
   d50dc:	000dd2ba 	.word	0x000dd2ba
   d50e0:	2003e16c 	.word	0x2003e16c
   d50e4:	2003e169 	.word	0x2003e169

000d50e8 <loop>:
  Serial.println("Exiting Setup");
  sysStatus.verboseMode = true;
}

void loop()
{
   d50e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d50ec:	4c97      	ldr	r4, [pc, #604]	; (d534c <loop+0x264>)
   d50ee:	4e98      	ldr	r6, [pc, #608]	; (d5350 <loop+0x268>)
   d50f0:	7823      	ldrb	r3, [r4, #0]
   d50f2:	4d98      	ldr	r5, [pc, #608]	; (d5354 <loop+0x26c>)
   d50f4:	3b01      	subs	r3, #1
  Serial.println("Exiting Setup");
  sysStatus.verboseMode = true;
}

void loop()
{
   d50f6:	b089      	sub	sp, #36	; 0x24
  switch(state) {
   d50f8:	2b05      	cmp	r3, #5
   d50fa:	f200 81c8 	bhi.w	d548e <loop+0x3a6>
   d50fe:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5102:	014f      	.short	0x014f
   d5104:	004c0006 	.word	0x004c0006
   d5108:	00d10087 	.word	0x00d10087
   d510c:	00ef      	.short	0x00ef
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d510e:	4f92      	ldr	r7, [pc, #584]	; (d5358 <loop+0x270>)
   d5110:	793b      	ldrb	r3, [r7, #4]
   d5112:	b12b      	cbz	r3, d5120 <loop+0x38>
   d5114:	4b91      	ldr	r3, [pc, #580]	; (d535c <loop+0x274>)
   d5116:	781b      	ldrb	r3, [r3, #0]
   d5118:	2b02      	cmp	r3, #2
   d511a:	d001      	beq.n	d5120 <loop+0x38>
   d511c:	f7ff ff5c 	bl	d4fd8 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d5120:	4b8f      	ldr	r3, [pc, #572]	; (d5360 <loop+0x278>)
   d5122:	781b      	ldrb	r3, [r3, #0]
   d5124:	b10b      	cbz	r3, d512a <loop+0x42>
   d5126:	f7ff f927 	bl	d4378 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d512a:	4b8e      	ldr	r3, [pc, #568]	; (d5364 <loop+0x27c>)
   d512c:	781b      	ldrb	r3, [r3, #0]
   d512e:	b10b      	cbz	r3, d5134 <loop+0x4c>
   d5130:	f7ff fb7a 	bl	d4828 <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d5134:	4b8c      	ldr	r3, [pc, #560]	; (d5368 <loop+0x280>)
   d5136:	6859      	ldr	r1, [r3, #4]
   d5138:	b169      	cbz	r1, d5156 <loop+0x6e>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d513a:	681a      	ldr	r2, [r3, #0]
   d513c:	1a52      	subs	r2, r2, r1
   d513e:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d5140:	2200      	movs	r2, #0
   d5142:	615a      	str	r2, [r3, #20]
   d5144:	619a      	str	r2, [r3, #24]
   d5146:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
   d5148:	2301      	movs	r3, #1
   d514a:	7033      	strb	r3, [r6, #0]
      if (Time.hour() == 0) resetEverything();                        // We have reported for the previous day - reset for the next - only needed if no sleep
   d514c:	f003 fb66 	bl	d881c <_ZN9TimeClass4hourEv>
   d5150:	b908      	cbnz	r0, d5156 <loop+0x6e>
   d5152:	f7ff fa0b 	bl	d456c <_Z15resetEverythingv>
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d5156:	79bb      	ldrb	r3, [r7, #6]
   d5158:	b14b      	cbz	r3, d516e <loop+0x86>
   d515a:	f001 fbbf 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
   d515e:	4b83      	ldr	r3, [pc, #524]	; (d536c <loop+0x284>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	1ac0      	subs	r0, r0, r3
   d5164:	4b82      	ldr	r3, [pc, #520]	; (d5370 <loop+0x288>)
   d5166:	681b      	ldr	r3, [r3, #0]
   d5168:	4298      	cmp	r0, r3
   d516a:	f200 81a9 	bhi.w	d54c0 <loop+0x3d8>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d516e:	f003 fb55 	bl	d881c <_ZN9TimeClass4hourEv>
   d5172:	4b80      	ldr	r3, [pc, #512]	; (d5374 <loop+0x28c>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	4298      	cmp	r0, r3
   d5178:	bf1c      	itt	ne
   d517a:	2305      	movne	r3, #5
   d517c:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() > sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d517e:	f003 fb4d 	bl	d881c <_ZN9TimeClass4hourEv>
   d5182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   d5184:	4298      	cmp	r0, r3
   d5186:	f300 819e 	bgt.w	d54c6 <loop+0x3de>
   d518a:	f003 fb47 	bl	d881c <_ZN9TimeClass4hourEv>
   d518e:	4b72      	ldr	r3, [pc, #456]	; (d5358 <loop+0x270>)
   d5190:	6a1b      	ldr	r3, [r3, #32]
   d5192:	4298      	cmp	r0, r3
   d5194:	f2c0 8197 	blt.w	d54c6 <loop+0x3de>
   d5198:	e179      	b.n	d548e <loop+0x3a6>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d519a:	4b6f      	ldr	r3, [pc, #444]	; (d5358 <loop+0x270>)
   d519c:	791a      	ldrb	r2, [r3, #4]
   d519e:	461f      	mov	r7, r3
   d51a0:	b12a      	cbz	r2, d51ae <loop+0xc6>
   d51a2:	4b6e      	ldr	r3, [pc, #440]	; (d535c <loop+0x274>)
   d51a4:	781b      	ldrb	r3, [r3, #0]
   d51a6:	2b03      	cmp	r3, #3
   d51a8:	d001      	beq.n	d51ae <loop+0xc6>
   d51aa:	f7ff ff15 	bl	d4fd8 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d51ae:	200c      	movs	r0, #12
   d51b0:	f002 fc0e 	bl	d79d0 <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d51b4:	4b70      	ldr	r3, [pc, #448]	; (d5378 <loop+0x290>)
   d51b6:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d51b8:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   d51bc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   d51c0:	f003 031f 	and.w	r3, r3, #31
   d51c4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d51c8:	f7fe ff9a 	bl	d4100 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                          // If this number is not zero then we need to send this last count
   d51cc:	4b66      	ldr	r3, [pc, #408]	; (d5368 <loop+0x280>)
   d51ce:	681b      	ldr	r3, [r3, #0]
   d51d0:	b10b      	cbz	r3, d51d6 <loop+0xee>
      state = REPORTING_STATE;
   d51d2:	2305      	movs	r3, #5
   d51d4:	e0b8      	b.n	d5348 <loop+0x260>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();                     // Disconnect cleanly from Particle
   d51d6:	78fb      	ldrb	r3, [r7, #3]
   d51d8:	b10b      	cbz	r3, d51de <loop+0xf6>
   d51da:	f7ff f9a1 	bl	d4520 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d51de:	2100      	movs	r1, #0
   d51e0:	2007      	movs	r0, #7
   d51e2:	f003 fd1c 	bl	d8c1e <digitalWrite>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d51e6:	f003 fb12 	bl	d880e <_ZN9TimeClass3nowEv>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep till the next hour - then resets
   d51ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d51ee:	fb90 f2f3 	sdiv	r2, r0, r3
   d51f2:	fb02 0013 	mls	r0, r2, r3, r0
   d51f6:	1a1a      	subs	r2, r3, r0
   d51f8:	4b60      	ldr	r3, [pc, #384]	; (d537c <loop+0x294>)
   d51fa:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
   d51fe:	681b      	ldr	r3, [r3, #0]
   d5200:	bfa8      	it	ge
   d5202:	f44f 6261 	movge.w	r2, #3600	; 0xe10
   d5206:	2101      	movs	r1, #1
   d5208:	a806      	add	r0, sp, #24
   d520a:	f003 f909 	bl	d8420 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
   d520e:	e13e      	b.n	d548e <loop+0x3a6>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5210:	4f51      	ldr	r7, [pc, #324]	; (d5358 <loop+0x270>)
   d5212:	793b      	ldrb	r3, [r7, #4]
   d5214:	b12b      	cbz	r3, d5222 <loop+0x13a>
   d5216:	4b51      	ldr	r3, [pc, #324]	; (d535c <loop+0x274>)
   d5218:	781b      	ldrb	r3, [r3, #0]
   d521a:	2b04      	cmp	r3, #4
   d521c:	d001      	beq.n	d5222 <loop+0x13a>
   d521e:	f7ff fedb 	bl	d4fd8 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                   // Don't nap until we are done with event
   d5222:	4a50      	ldr	r2, [pc, #320]	; (d5364 <loop+0x27c>)
   d5224:	7813      	ldrb	r3, [r2, #0]
   d5226:	4690      	mov	r8, r2
   d5228:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d522c:	2b00      	cmp	r3, #0
   d522e:	f040 812e 	bne.w	d548e <loop+0x3a6>
    if (sysStatus.connectedStatus) {                        // If we are in connected mode
   d5232:	78fb      	ldrb	r3, [r7, #3]
   d5234:	b133      	cbz	r3, d5244 <loop+0x15c>
      disconnectFromParticle();                                       // Disconnect from Particle
   d5236:	f7ff f973 	bl	d4520 <_Z22disconnectFromParticlev>
      sysStatus.connectedStatus = false;
   d523a:	4b47      	ldr	r3, [pc, #284]	; (d5358 <loop+0x270>)
   d523c:	f883 9003 	strb.w	r9, [r3, #3]
      systemStatusWriteNeeded=true;
   d5240:	2301      	movs	r3, #1
   d5242:	702b      	strb	r3, [r5, #0]
    }
    stayAwake = sysStatus.debounce;                                             // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour                                                 
   d5244:	4b4a      	ldr	r3, [pc, #296]	; (d5370 <loop+0x288>)
   d5246:	693a      	ldr	r2, [r7, #16]
   d5248:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d524a:	f003 fae0 	bl	d880e <_ZN9TimeClass3nowEv>
   d524e:	4681      	mov	r9, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
   d5250:	f7ff f892 	bl	d4378 <_Z11petWatchdogv>
   d5254:	4b49      	ldr	r3, [pc, #292]	; (d537c <loop+0x294>)
   d5256:	220c      	movs	r2, #12
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	f8ad 2016 	strh.w	r2, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d525e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d5262:	9302      	str	r3, [sp, #8]
   d5264:	fb99 f3f2 	sdiv	r3, r9, r2
   d5268:	fb02 9013 	mls	r0, r2, r3, r9
   d526c:	1a10      	subs	r0, r2, r0
   d526e:	4290      	cmp	r0, r2
   d5270:	bfa8      	it	ge
   d5272:	4610      	movge	r0, r2
   d5274:	2701      	movs	r7, #1
   d5276:	9001      	str	r0, [sp, #4]
   d5278:	f10d 0315 	add.w	r3, sp, #21
   d527c:	9700      	str	r7, [sp, #0]
   d527e:	463a      	mov	r2, r7
   d5280:	f10d 0116 	add.w	r1, sp, #22
   d5284:	a806      	add	r0, sp, #24
   d5286:	f88d 7015 	strb.w	r7, [sp, #21]
   d528a:	f003 f8f9 	bl	d8480 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(intPin, RISING, wakeInSeconds);                      // Sensor will wake us with an interrupt or timeout at the hour
    if (sensorDetect) {
   d528e:	f898 3000 	ldrb.w	r3, [r8]
   d5292:	b12b      	cbz	r3, d52a0 <loop+0x1b8>
       awokeFromNap=true;                                             // Since millis() stops when sleeping - need this to debounce
   d5294:	4b3a      	ldr	r3, [pc, #232]	; (d5380 <loop+0x298>)
   d5296:	701f      	strb	r7, [r3, #0]
   d5298:	f001 fb20 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
       stayAwakeTimeStamp = millis();
   d529c:	4b33      	ldr	r3, [pc, #204]	; (d536c <loop+0x284>)
   d529e:	6018      	str	r0, [r3, #0]
    }
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d52a0:	2302      	movs	r3, #2
   d52a2:	e051      	b.n	d5348 <loop+0x260>
    } break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52a4:	4f2c      	ldr	r7, [pc, #176]	; (d5358 <loop+0x270>)
   d52a6:	793b      	ldrb	r3, [r7, #4]
   d52a8:	b12b      	cbz	r3, d52b6 <loop+0x1ce>
   d52aa:	4b2c      	ldr	r3, [pc, #176]	; (d535c <loop+0x274>)
   d52ac:	781b      	ldrb	r3, [r3, #0]
   d52ae:	2b05      	cmp	r3, #5
   d52b0:	d001      	beq.n	d52b6 <loop+0x1ce>
   d52b2:	f7ff fe91 	bl	d4fd8 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();    // Only attempt to connect if not already New process to get connected
   d52b6:	78fb      	ldrb	r3, [r7, #3]
   d52b8:	b90b      	cbnz	r3, d52be <loop+0x1d6>
   d52ba:	f7ff fb5b 	bl	d4974 <_Z17connectToParticlev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52be:	f001 fd23 	bl	d6d08 <spark_cloud_flag_connected>
    //sysStatus.disableUpdates();                                          // Don't want an update while we are reporting
    if (Particle.connected()) {
   d52c2:	2800      	cmp	r0, #0
   d52c4:	d03f      	beq.n	d5346 <loop+0x25e>
      if (Time.hour() == sysStatus.closeTime) dailyCleanup();                   // Once a day, clean house
   d52c6:	f003 faa9 	bl	d881c <_ZN9TimeClass4hourEv>
   d52ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   d52cc:	4298      	cmp	r0, r3
   d52ce:	d101      	bne.n	d52d4 <loop+0x1ec>
   d52d0:	f7ff febc 	bl	d504c <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d52d4:	f7ff f830 	bl	d4338 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d52d8:	f7ff f9e2 	bl	d46a0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d52dc:	2306      	movs	r3, #6
   d52de:	e033      	b.n	d5348 <loop+0x260>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52e0:	4b1d      	ldr	r3, [pc, #116]	; (d5358 <loop+0x270>)
   d52e2:	791b      	ldrb	r3, [r3, #4]
   d52e4:	b12b      	cbz	r3, d52f2 <loop+0x20a>
   d52e6:	4b1d      	ldr	r3, [pc, #116]	; (d535c <loop+0x274>)
   d52e8:	781b      	ldrb	r3, [r3, #0]
   d52ea:	2b06      	cmp	r3, #6
   d52ec:	d001      	beq.n	d52f2 <loop+0x20a>
   d52ee:	f7ff fe73 	bl	d4fd8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d52f2:	4b24      	ldr	r3, [pc, #144]	; (d5384 <loop+0x29c>)
   d52f4:	781b      	ldrb	r3, [r3, #0]
   d52f6:	b94b      	cbnz	r3, d530c <loop+0x224>
    {
      state = IDLE_STATE;
   d52f8:	2302      	movs	r3, #2
   d52fa:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d52fc:	4b1c      	ldr	r3, [pc, #112]	; (d5370 <loop+0x288>)
   d52fe:	4a22      	ldr	r2, [pc, #136]	; (d5388 <loop+0x2a0>)
   d5300:	601a      	str	r2, [r3, #0]
   d5302:	f001 faeb 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5306:	4b19      	ldr	r3, [pc, #100]	; (d536c <loop+0x284>)
   d5308:	6018      	str	r0, [r3, #0]
   d530a:	e0c0      	b.n	d548e <loop+0x3a6>
   d530c:	f001 fae6 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5310:	4b1e      	ldr	r3, [pc, #120]	; (d538c <loop+0x2a4>)
   d5312:	681b      	ldr	r3, [r3, #0]
   d5314:	1ac0      	subs	r0, r0, r3
   d5316:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d531a:	4298      	cmp	r0, r3
   d531c:	f240 80b7 	bls.w	d548e <loop+0x3a6>
   d5320:	f001 fadc 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5324:	4b1a      	ldr	r3, [pc, #104]	; (d5390 <loop+0x2a8>)
   d5326:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d5328:	f7ff f94c 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d532c:	4b19      	ldr	r3, [pc, #100]	; (d5394 <loop+0x2ac>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d532e:	491a      	ldr	r1, [pc, #104]	; (d5398 <loop+0x2b0>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5330:	781b      	ldrb	r3, [r3, #0]
   d5332:	2200      	movs	r2, #0
   d5334:	f88d 2000 	strb.w	r2, [sp]
   d5338:	a806      	add	r0, sp, #24
   d533a:	4a18      	ldr	r2, [pc, #96]	; (d539c <loop+0x2b4>)
   d533c:	f7fe ff5d 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5340:	a807      	add	r0, sp, #28
   d5342:	f7ff f996 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d5346:	2301      	movs	r3, #1
   d5348:	7023      	strb	r3, [r4, #0]
   d534a:	e0a0      	b.n	d548e <loop+0x3a6>
   d534c:	2003e0bd 	.word	0x2003e0bd
   d5350:	2003e148 	.word	0x2003e148
   d5354:	2003e169 	.word	0x2003e169
   d5358:	2003e16c 	.word	0x2003e16c
   d535c:	2003e0b4 	.word	0x2003e0b4
   d5360:	2003e0c4 	.word	0x2003e0c4
   d5364:	2003e08c 	.word	0x2003e08c
   d5368:	2003e14c 	.word	0x2003e14c
   d536c:	2003e0f8 	.word	0x2003e0f8
   d5370:	2003e0c8 	.word	0x2003e0c8
   d5374:	2003e0c0 	.word	0x2003e0c0
   d5378:	2003e0f4 	.word	0x2003e0f4
   d537c:	2003e0cc 	.word	0x2003e0cc
   d5380:	2003e0bc 	.word	0x2003e0bc
   d5384:	2003e168 	.word	0x2003e168
   d5388:	00015f90 	.word	0x00015f90
   d538c:	2003e0b8 	.word	0x2003e0b8
   d5390:	2003e144 	.word	0x2003e144
   d5394:	2003e0a8 	.word	0x2003e0a8
   d5398:	000dd2c8 	.word	0x000dd2c8
   d539c:	000dd0d5 	.word	0x000dd0d5
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53a0:	4c4a      	ldr	r4, [pc, #296]	; (d54cc <loop+0x3e4>)
   d53a2:	7923      	ldrb	r3, [r4, #4]
   d53a4:	b12b      	cbz	r3, d53b2 <loop+0x2ca>
   d53a6:	4b4a      	ldr	r3, [pc, #296]	; (d54d0 <loop+0x3e8>)
   d53a8:	781b      	ldrb	r3, [r3, #0]
   d53aa:	2b01      	cmp	r3, #1
   d53ac:	d001      	beq.n	d53b2 <loop+0x2ca>
   d53ae:	f7ff fe13 	bl	d4fd8 <_Z22publishStateTransitionv>
   d53b2:	f001 fa93 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d53b6:	4b47      	ldr	r3, [pc, #284]	; (d54d4 <loop+0x3ec>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d53be:	3330      	adds	r3, #48	; 0x30
   d53c0:	4298      	cmp	r0, r3
   d53c2:	d964      	bls.n	d548e <loop+0x3a6>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d53c4:	6963      	ldr	r3, [r4, #20]
   d53c6:	2b03      	cmp	r3, #3
   d53c8:	dc18      	bgt.n	d53fc <loop+0x314>
        waitUntil(meterParticlePublish);
   d53ca:	f7ff f8fb 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d53ce:	f001 fc9b 	bl	d6d08 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d53d2:	b160      	cbz	r0, d53ee <loop+0x306>
   d53d4:	4b40      	ldr	r3, [pc, #256]	; (d54d8 <loop+0x3f0>)
   d53d6:	4941      	ldr	r1, [pc, #260]	; (d54dc <loop+0x3f4>)
   d53d8:	781b      	ldrb	r3, [r3, #0]
   d53da:	2200      	movs	r2, #0
   d53dc:	f88d 2000 	strb.w	r2, [sp]
   d53e0:	a806      	add	r0, sp, #24
   d53e2:	4a3f      	ldr	r2, [pc, #252]	; (d54e0 <loop+0x3f8>)
   d53e4:	f7fe ff09 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d53e8:	a807      	add	r0, sp, #28
   d53ea:	f7ff f942 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d53ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d53f2:	f001 fd61 	bl	d6eb8 <delay>
        System.reset();
   d53f6:	f003 f80f 	bl	d8418 <_ZN11SystemClass5resetEv>
   d53fa:	e048      	b.n	d548e <loop+0x3a6>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d53fc:	f003 fa07 	bl	d880e <_ZN9TimeClass3nowEv>
   d5400:	4b32      	ldr	r3, [pc, #200]	; (d54cc <loop+0x3e4>)
   d5402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5404:	1ac0      	subs	r0, r0, r3
   d5406:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d540a:	d924      	bls.n	d5456 <loop+0x36e>
        waitUntil(meterParticlePublish);
   d540c:	f7ff f8da 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d5410:	f001 fc7a 	bl	d6d08 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5414:	b160      	cbz	r0, d5430 <loop+0x348>
   d5416:	4b30      	ldr	r3, [pc, #192]	; (d54d8 <loop+0x3f0>)
   d5418:	4930      	ldr	r1, [pc, #192]	; (d54dc <loop+0x3f4>)
   d541a:	781b      	ldrb	r3, [r3, #0]
   d541c:	2200      	movs	r2, #0
   d541e:	f88d 2000 	strb.w	r2, [sp]
   d5422:	a806      	add	r0, sp, #24
   d5424:	4a2f      	ldr	r2, [pc, #188]	; (d54e4 <loop+0x3fc>)
   d5426:	f7fe fee8 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d542a:	a807      	add	r0, sp, #28
   d542c:	f7ff f921 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d5430:	2700      	movs	r7, #0
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
   d5432:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5436:	f001 fd3f 	bl	d6eb8 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d543a:	6167      	str	r7, [r4, #20]
        systemStatusWriteNeeded=true;
   d543c:	2401      	movs	r4, #1
        digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d543e:	4621      	mov	r1, r4
   d5440:	2006      	movs	r0, #6
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        waitUntil(meterParticlePublish);
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
        systemStatusWriteNeeded=true;
   d5442:	702c      	strb	r4, [r5, #0]
        digitalWrite(deepSleepPin,HIGH);                              // This will cut all power to the Boron AND everything it powers
   d5444:	f003 fbeb 	bl	d8c1e <digitalWrite>
        rtc.setAlarm(10);
   d5448:	463b      	mov	r3, r7
   d544a:	4622      	mov	r2, r4
   d544c:	210a      	movs	r1, #10
   d544e:	4826      	ldr	r0, [pc, #152]	; (d54e8 <loop+0x400>)
   d5450:	f001 f95f 	bl	d6712 <_ZN8MCP794108setAlarmEibi>
   d5454:	e01b      	b.n	d548e <loop+0x3a6>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        waitUntil(meterParticlePublish);
   d5456:	f7ff f8b5 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d545a:	f001 fc55 	bl	d6d08 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d545e:	b160      	cbz	r0, d547a <loop+0x392>
   d5460:	4b1d      	ldr	r3, [pc, #116]	; (d54d8 <loop+0x3f0>)
   d5462:	491e      	ldr	r1, [pc, #120]	; (d54dc <loop+0x3f4>)
   d5464:	781b      	ldrb	r3, [r3, #0]
   d5466:	2200      	movs	r2, #0
   d5468:	f88d 2000 	strb.w	r2, [sp]
   d546c:	a806      	add	r0, sp, #24
   d546e:	4a1f      	ldr	r2, [pc, #124]	; (d54ec <loop+0x404>)
   d5470:	f7fe fec3 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d5474:	a807      	add	r0, sp, #28
   d5476:	f7ff f8fc 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d547a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d547e:	f001 fd1b 	bl	d6eb8 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5482:	2300      	movs	r3, #0
   d5484:	6163      	str	r3, [r4, #20]
        systemStatusWriteNeeded=true;
   d5486:	2301      	movs	r3, #1
   d5488:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d548a:	f7ff f8a7 	bl	d45dc <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d548e:	4816      	ldr	r0, [pc, #88]	; (d54e8 <loop+0x400>)
   d5490:	f001 f88a 	bl	d65a8 <_ZN8MCP794104loopEv>
  if (systemStatusWriteNeeded) fram.put(FRAM::systemStatusAddr,sysStatus);
   d5494:	782b      	ldrb	r3, [r5, #0]
   d5496:	b12b      	cbz	r3, d54a4 <loop+0x3bc>
   d5498:	232c      	movs	r3, #44	; 0x2c
   d549a:	4a0c      	ldr	r2, [pc, #48]	; (d54cc <loop+0x3e4>)
   d549c:	4814      	ldr	r0, [pc, #80]	; (d54f0 <loop+0x408>)
   d549e:	2101      	movs	r1, #1
   d54a0:	f000 fcbf 	bl	d5e22 <_ZN6MB85RC9writeDataEjPKhj>
  if (currentCountsWriteNeeded) fram.put(FRAM::currentCountsAddr,current);
   d54a4:	7833      	ldrb	r3, [r6, #0]
   d54a6:	b12b      	cbz	r3, d54b4 <loop+0x3cc>
   d54a8:	231c      	movs	r3, #28
   d54aa:	4a12      	ldr	r2, [pc, #72]	; (d54f4 <loop+0x40c>)
   d54ac:	4810      	ldr	r0, [pc, #64]	; (d54f0 <loop+0x408>)
   d54ae:	2150      	movs	r1, #80	; 0x50
   d54b0:	f000 fcb7 	bl	d5e22 <_ZN6MB85RC9writeDataEjPKhj>
  systemStatusWriteNeeded = currentCountsWriteNeeded = false;
   d54b4:	2300      	movs	r3, #0
   d54b6:	7033      	strb	r3, [r6, #0]
   d54b8:	702b      	strb	r3, [r5, #0]

  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
}
   d54ba:	b009      	add	sp, #36	; 0x24
   d54bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
      currentCountsWriteNeeded=true;
      if (Time.hour() == 0) resetEverything();                        // We have reported for the previous day - reset for the next - only needed if no sleep
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d54c0:	2304      	movs	r3, #4
   d54c2:	7023      	strb	r3, [r4, #0]
   d54c4:	e653      	b.n	d516e <loop+0x86>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() > sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d54c6:	2303      	movs	r3, #3
   d54c8:	e73e      	b.n	d5348 <loop+0x260>
   d54ca:	bf00      	nop
   d54cc:	2003e16c 	.word	0x2003e16c
   d54d0:	2003e0b4 	.word	0x2003e0b4
   d54d4:	2003e144 	.word	0x2003e144
   d54d8:	2003e0a8 	.word	0x2003e0a8
   d54dc:	000dd167 	.word	0x000dd167
   d54e0:	000dd2e1 	.word	0x000dd2e1
   d54e4:	000dd2f5 	.word	0x000dd2f5
   d54e8:	2003e0d0 	.word	0x2003e0d0
   d54ec:	000dd30f 	.word	0x000dd30f
   d54f0:	2003e098 	.word	0x2003e098
   d54f4:	2003e14c 	.word	0x2003e14c

000d54f8 <_Z12setDSTOffset6String>:
    sysStatus.connectedStatus = false;
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2 
   d54f8:	b530      	push	{r4, r5, lr}
   d54fa:	ed2d 8b02 	vpush	{d8}
   d54fe:	b0cd      	sub	sp, #308	; 0x134
   d5500:	4605      	mov	r5, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5502:	f003 f984 	bl	d880e <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d5506:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2 
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d5508:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d550a:	a905      	add	r1, sp, #20
   d550c:	6828      	ldr	r0, [r5, #0]
   d550e:	f006 fb31 	bl	dbb74 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d5512:	b2c3      	uxtb	r3, r0
   d5514:	2b02      	cmp	r3, #2
   d5516:	d867      	bhi.n	d55e8 <_Z12setDSTOffset6String+0xf0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d5518:	b240      	sxtb	r0, r0
   d551a:	ee07 0a90 	vmov	s15, r0
   d551e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d5522:	eeb0 0a48 	vmov.f32	s0, s16
   d5526:	f003 f86b 	bl	d8600 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d552a:	4b35      	ldr	r3, [pc, #212]	; (d5600 <_Z12setDSTOffset6String+0x108>)
   d552c:	ed83 8a07 	vstr	s16, [r3, #28]
  systemStatusWriteNeeded = true;
   d5530:	4b34      	ldr	r3, [pc, #208]	; (d5604 <_Z12setDSTOffset6String+0x10c>)
   d5532:	2201      	movs	r2, #1
   d5534:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d5536:	ee18 0a10 	vmov	r0, s16
   d553a:	f003 fecb 	bl	d92d4 <__aeabi_f2d>
   d553e:	4a32      	ldr	r2, [pc, #200]	; (d5608 <_Z12setDSTOffset6String+0x110>)
   d5540:	e9cd 0100 	strd	r0, r1, [sp]
   d5544:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5548:	a80c      	add	r0, sp, #48	; 0x30
   d554a:	f001 fc95 	bl	d6e78 <snprintf>
  waitUntil(meterParticlePublish);
   d554e:	f7ff f839 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here 
   d5552:	f003 f93b 	bl	d87cc <_ZN9TimeClass7isValidEv>
   d5556:	b138      	cbz	r0, d5568 <_Z12setDSTOffset6String+0x70>
   d5558:	f7ff f86c 	bl	d4634 <_Z8isDSTusav>
   d555c:	b110      	cbz	r0, d5564 <_Z12setDSTOffset6String+0x6c>
   d555e:	f003 f869 	bl	d8634 <_ZN9TimeClass8beginDSTEv>
   d5562:	e001      	b.n	d5568 <_Z12setDSTOffset6String+0x70>
   d5564:	f003 f870 	bl	d8648 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d5568:	f003 f820 	bl	d85ac <_ZN9TimeClass5localEv>
   d556c:	4605      	mov	r5, r0
   d556e:	f003 f94e 	bl	d880e <_ZN9TimeClass3nowEv>
   d5572:	1a28      	subs	r0, r5, r0
   d5574:	f003 fe9c 	bl	d92b0 <__aeabi_i2d>
   d5578:	a31f      	add	r3, pc, #124	; (adr r3, d55f8 <_Z12setDSTOffset6String+0x100>)
   d557a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d557e:	f004 f827 	bl	d95d0 <__aeabi_ddiv>
   d5582:	4a22      	ldr	r2, [pc, #136]	; (d560c <_Z12setDSTOffset6String+0x114>)
   d5584:	e9cd 0100 	strd	r0, r1, [sp]
   d5588:	210a      	movs	r1, #10
   d558a:	4821      	ldr	r0, [pc, #132]	; (d5610 <_Z12setDSTOffset6String+0x118>)
   d558c:	f001 fc74 	bl	d6e78 <snprintf>
   d5590:	f001 fbba 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
   d5594:	b160      	cbz	r0, d55b0 <_Z12setDSTOffset6String+0xb8>
   d5596:	4b1f      	ldr	r3, [pc, #124]	; (d5614 <_Z12setDSTOffset6String+0x11c>)
   d5598:	491f      	ldr	r1, [pc, #124]	; (d5618 <_Z12setDSTOffset6String+0x120>)
   d559a:	781b      	ldrb	r3, [r3, #0]
   d559c:	2200      	movs	r2, #0
   d559e:	f88d 2000 	strb.w	r2, [sp]
   d55a2:	a808      	add	r0, sp, #32
   d55a4:	aa0c      	add	r2, sp, #48	; 0x30
   d55a6:	f7fe fe28 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d55aa:	a809      	add	r0, sp, #36	; 0x24
   d55ac:	f7ff f861 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  waitUntil(meterParticlePublish);
   d55b0:	f7ff f808 	bl	d45c4 <_ZN11SystemClass13waitConditionIZ11recordCountvEUlvE0_EEbT_.isra.67>
   d55b4:	f001 fba8 	bl	d6d08 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
   d55b8:	b1c0      	cbz	r0, d55ec <_Z12setDSTOffset6String+0xf4>
   d55ba:	4621      	mov	r1, r4
   d55bc:	a808      	add	r0, sp, #32
   d55be:	f003 f853 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d55c2:	9b08      	ldr	r3, [sp, #32]
   d55c4:	9303      	str	r3, [sp, #12]
   d55c6:	4b13      	ldr	r3, [pc, #76]	; (d5614 <_Z12setDSTOffset6String+0x11c>)
   d55c8:	4913      	ldr	r1, [pc, #76]	; (d5618 <_Z12setDSTOffset6String+0x120>)
   d55ca:	781b      	ldrb	r3, [r3, #0]
   d55cc:	2200      	movs	r2, #0
   d55ce:	f88d 2000 	strb.w	r2, [sp]
   d55d2:	a806      	add	r0, sp, #24
   d55d4:	9a03      	ldr	r2, [sp, #12]
   d55d6:	f7fe fe10 	bl	d41fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.128.constprop.135>
   d55da:	a807      	add	r0, sp, #28
   d55dc:	f7ff f849 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55e0:	a808      	add	r0, sp, #32
   d55e2:	f002 fe76 	bl	d82d2 <_ZN6StringD1Ev>
   d55e6:	e001      	b.n	d55ec <_Z12setDSTOffset6String+0xf4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2 
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d55e8:	2000      	movs	r0, #0
   d55ea:	e000      	b.n	d55ee <_Z12setDSTOffset6String+0xf6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here 
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  waitUntil(meterParticlePublish);
  if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
   d55ec:	2001      	movs	r0, #1
}
   d55ee:	b04d      	add	sp, #308	; 0x134
   d55f0:	ecbd 8b02 	vpop	{d8}
   d55f4:	bd30      	pop	{r4, r5, pc}
   d55f6:	bf00      	nop
   d55f8:	00000000 	.word	0x00000000
   d55fc:	40ac2000 	.word	0x40ac2000
   d5600:	2003e16c 	.word	0x2003e16c
   d5604:	2003e169 	.word	0x2003e169
   d5608:	000dd32e 	.word	0x000dd32e
   d560c:	000dd22e 	.word	0x000dd22e
   d5610:	2003e08d 	.word	0x2003e08d
   d5614:	2003e0a8 	.word	0x2003e0a8
   d5618:	000dd3a6 	.word	0x000dd3a6

000d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d561c:	2300      	movs	r3, #0
   d561e:	2202      	movs	r2, #2
   d5620:	f001 bb4a 	b.w	d6cb8 <spark_variable>

000d5624 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>:
   d5624:	2300      	movs	r3, #0
   d5626:	2204      	movs	r2, #4
   d5628:	f001 bb46 	b.w	d6cb8 <spark_variable>

000d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d562c:	4602      	mov	r2, r0
   d562e:	4801      	ldr	r0, [pc, #4]	; (d5634 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5630:	f001 bddf 	b.w	d71f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5634:	000d71c7 	.word	0x000d71c7

000d5638 <setup>:
// Pressure Sensor Variables
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d563c:	b0ac      	sub	sp, #176	; 0xb0
  Serial.begin();
   d563e:	f003 fa11 	bl	d8a64 <_Z16_fetch_usbserialv>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5642:	4fae      	ldr	r7, [pc, #696]	; (d58fc <setup+0x2c4>)
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", sysStatus.resetCount);
   d5644:	4cae      	ldr	r4, [pc, #696]	; (d5900 <setup+0x2c8>)
   d5646:	f8df 8390 	ldr.w	r8, [pc, #912]	; d59d8 <setup+0x3a0>
char debounceStr[8] = "NA";                         // String to make debounce more readable on the mobile app
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
  Serial.begin();
   d564a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d564e:	f003 f9fd 	bl	d8a4c <_ZN9USBSerial5beginEl>
  Serial.println("Setup begins");
   d5652:	f003 fa07 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5656:	49ab      	ldr	r1, [pc, #684]	; (d5904 <setup+0x2cc>)
   d5658:	f002 fda1 	bl	d819e <_ZN5Print7printlnEPKc>
   d565c:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d565e:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   d5662:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   d5666:	f003 031f 	and.w	r3, r3, #31
   d566a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d566e:	f7fe fd56 	bl	d411e <nrf_gpio_pin_clear>
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinResetFast(deepSleepPin);                       // Make sure since this pin can turn off the device
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5672:	2100      	movs	r1, #0
   d5674:	2008      	movs	r0, #8
   d5676:	f003 fac1 	bl	d8bfc <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d567a:	2100      	movs	r1, #0
   d567c:	2004      	movs	r0, #4
   d567e:	f003 fabd 	bl	d8bfc <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5682:	2101      	movs	r1, #1
   d5684:	2007      	movs	r0, #7
   d5686:	f003 fab9 	bl	d8bfc <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d568a:	2101      	movs	r1, #1
   d568c:	2005      	movs	r0, #5
   d568e:	f003 fab5 	bl	d8bfc <pinMode>
  pinMode(deepSleepPin,OUTPUT);                     // For a hard reset active HIGH
   d5692:	2101      	movs	r1, #1
   d5694:	2006      	movs	r0, #6
   d5696:	f003 fab1 	bl	d8bfc <pinMode>
  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d569a:	2103      	movs	r1, #3
   d569c:	200c      	movs	r0, #12
   d569e:	f003 faad 	bl	d8bfc <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d56a2:	2101      	movs	r1, #1
   d56a4:	200e      	movs	r0, #14
   d56a6:	f003 faa9 	bl	d8bfc <pinMode>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d56aa:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d56ac:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   d56b0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   d56b4:	f003 031f 	and.w	r3, r3, #31
   d56b8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d56bc:	f7fe fd2f 	bl	d411e <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d56c0:	2101      	movs	r1, #1
   d56c2:	200b      	movs	r0, #11
   d56c4:	f003 fa9a 	bl	d8bfc <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d56c8:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_set(nrf_pin);
   d56ca:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d56ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d56d2:	f003 031f 	and.w	r3, r3, #31
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d56d6:	2500      	movs	r5, #0
   d56d8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d56dc:	f7fe fd10 	bl	d4100 <nrf_gpio_pin_set>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d56e0:	f7fe fe4a 	bl	d4378 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d56e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d56e8:	2201      	movs	r2, #1
   d56ea:	4987      	ldr	r1, [pc, #540]	; (d5908 <setup+0x2d0>)
   d56ec:	9500      	str	r5, [sp, #0]
   d56ee:	2008      	movs	r0, #8
   d56f0:	f002 f946 	bl	d7980 <_Z15attachInterrupttPFvvE13InterruptModeah>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d56f4:	a804      	add	r0, sp, #16
   d56f6:	f001 fb0f 	bl	d6d18 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d56fa:	462b      	mov	r3, r5
   d56fc:	227d      	movs	r2, #125	; 0x7d
   d56fe:	a90c      	add	r1, sp, #48	; 0x30
   d5700:	a804      	add	r0, sp, #16
   d5702:	f002 fe6c 	bl	d83de <_ZNK6String8getBytesEPhjj>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d5706:	462b      	mov	r3, r5
   d5708:	462a      	mov	r2, r5
   d570a:	4980      	ldr	r1, [pc, #512]	; (d590c <setup+0x2d4>)
   d570c:	9501      	str	r5, [sp, #4]
   d570e:	9500      	str	r5, [sp, #0]
   d5710:	a80c      	add	r0, sp, #48	; 0x30
   d5712:	f001 fb11 	bl	d6d38 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
   d5716:	497e      	ldr	r1, [pc, #504]	; (d5910 <setup+0x2d8>)
   d5718:	487e      	ldr	r0, [pc, #504]	; (d5914 <setup+0x2dc>)
   d571a:	f7ff ff7f 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d571e:	497e      	ldr	r1, [pc, #504]	; (d5918 <setup+0x2e0>)
   d5720:	487e      	ldr	r0, [pc, #504]	; (d591c <setup+0x2e4>)
   d5722:	f7ff ff7b 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Signal", SignalString);
   d5726:	497e      	ldr	r1, [pc, #504]	; (d5920 <setup+0x2e8>)
   d5728:	487e      	ldr	r0, [pc, #504]	; (d5924 <setup+0x2ec>)
   d572a:	f7ff ff7b 	bl	d5624 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d572e:	f104 0114 	add.w	r1, r4, #20
   d5732:	487d      	ldr	r0, [pc, #500]	; (d5928 <setup+0x2f0>)
   d5734:	f7ff ff72 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Temperature",current.temperature);
   d5738:	497c      	ldr	r1, [pc, #496]	; (d592c <setup+0x2f4>)
   d573a:	487d      	ldr	r0, [pc, #500]	; (d5930 <setup+0x2f8>)
   d573c:	f7ff ff6e 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Release",currentPointRelease);
   d5740:	497c      	ldr	r1, [pc, #496]	; (d5934 <setup+0x2fc>)
   d5742:	487d      	ldr	r0, [pc, #500]	; (d5938 <setup+0x300>)
   d5744:	f7ff ff6e 	bl	d5624 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
    static inline bool variable(const T &name, const Types& ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
   d5748:	ae2c      	add	r6, sp, #176	; 0xb0
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d574a:	f104 0108 	add.w	r1, r4, #8
   d574e:	487b      	ldr	r0, [pc, #492]	; (d593c <setup+0x304>)
   d5750:	f7ff ff64 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
   d5754:	79a3      	ldrb	r3, [r4, #6]
   d5756:	f846 3d90 	str.w	r3, [r6, #-144]!
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d575a:	2202      	movs	r2, #2
   d575c:	462b      	mov	r3, r5
   d575e:	4631      	mov	r1, r6
   d5760:	4877      	ldr	r0, [pc, #476]	; (d5940 <setup+0x308>)
   d5762:	f001 faa9 	bl	d6cb8 <spark_variable>
  Particle.variable("lowPowerMode",sysStatus.lowPowerMode);
  Particle.variable("OpenTime",sysStatus.openTime);
   d5766:	f104 0120 	add.w	r1, r4, #32
   d576a:	4876      	ldr	r0, [pc, #472]	; (d5944 <setup+0x30c>)
   d576c:	f7ff ff56 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
   d5770:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d5774:	4874      	ldr	r0, [pc, #464]	; (d5948 <setup+0x310>)
   d5776:	f7ff ff51 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Debounce",debounceStr);
   d577a:	4974      	ldr	r1, [pc, #464]	; (d594c <setup+0x314>)
   d577c:	4874      	ldr	r0, [pc, #464]	; (d5950 <setup+0x318>)
   d577e:	f7ff ff51 	bl	d5624 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>
  Particle.variable("Alerts",current.alertCount);
   d5782:	4974      	ldr	r1, [pc, #464]	; (d5954 <setup+0x31c>)
   d5784:	4874      	ldr	r0, [pc, #464]	; (d5958 <setup+0x320>)
   d5786:	f7ff ff49 	bl	d561c <_ZN10CloudClass8variableIA7_cIiEEEbRKT_DpRKT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d578a:	4974      	ldr	r1, [pc, #464]	; (d595c <setup+0x324>)
   d578c:	4874      	ldr	r0, [pc, #464]	; (d5960 <setup+0x328>)
   d578e:	f7ff ff49 	bl	d5624 <_ZN10CloudClass8variableIA11_cIA10_cEEEbRKT_DpRKT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d5792:	4974      	ldr	r1, [pc, #464]	; (d5964 <setup+0x32c>)
   d5794:	4874      	ldr	r0, [pc, #464]	; (d5968 <setup+0x330>)
   d5796:	f7ff ff49 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d579a:	4974      	ldr	r1, [pc, #464]	; (d596c <setup+0x334>)
   d579c:	4874      	ldr	r0, [pc, #464]	; (d5970 <setup+0x338>)
   d579e:	f7ff ff45 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d57a2:	4974      	ldr	r1, [pc, #464]	; (d5974 <setup+0x33c>)
   d57a4:	4874      	ldr	r0, [pc, #464]	; (d5978 <setup+0x340>)
   d57a6:	f7ff ff41 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d57aa:	4974      	ldr	r1, [pc, #464]	; (d597c <setup+0x344>)
   d57ac:	4874      	ldr	r0, [pc, #464]	; (d5980 <setup+0x348>)
   d57ae:	f7ff ff3d 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d57b2:	4974      	ldr	r1, [pc, #464]	; (d5984 <setup+0x34c>)
   d57b4:	4874      	ldr	r0, [pc, #464]	; (d5988 <setup+0x350>)
   d57b6:	f7ff ff39 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d57ba:	4974      	ldr	r1, [pc, #464]	; (d598c <setup+0x354>)
   d57bc:	4874      	ldr	r0, [pc, #464]	; (d5990 <setup+0x358>)
   d57be:	f7ff ff35 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d57c2:	4974      	ldr	r1, [pc, #464]	; (d5994 <setup+0x35c>)
   d57c4:	4874      	ldr	r0, [pc, #464]	; (d5998 <setup+0x360>)
   d57c6:	f7ff ff31 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d57ca:	4974      	ldr	r1, [pc, #464]	; (d599c <setup+0x364>)
   d57cc:	4874      	ldr	r0, [pc, #464]	; (d59a0 <setup+0x368>)
   d57ce:	f7ff ff2d 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d57d2:	4974      	ldr	r1, [pc, #464]	; (d59a4 <setup+0x36c>)
   d57d4:	4874      	ldr	r0, [pc, #464]	; (d59a8 <setup+0x370>)
   d57d6:	f7ff ff29 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d57da:	4974      	ldr	r1, [pc, #464]	; (d59ac <setup+0x374>)
   d57dc:	4874      	ldr	r0, [pc, #464]	; (d59b0 <setup+0x378>)
   d57de:	f7ff ff25 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d57e2:	4974      	ldr	r1, [pc, #464]	; (d59b4 <setup+0x37c>)
   d57e4:	4874      	ldr	r0, [pc, #464]	; (d59b8 <setup+0x380>)
   d57e6:	f7ff ff21 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Debounce",setDebounce);
   d57ea:	4974      	ldr	r1, [pc, #464]	; (d59bc <setup+0x384>)
   d57ec:	4874      	ldr	r0, [pc, #464]	; (d59c0 <setup+0x388>)
   d57ee:	f7ff ff1d 	bl	d562c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  // This block of code overcomes an issue that should be fixed in deviceOS@1.5.0
  detachInterrupt(LOW_BAT_UC);
   d57f2:	2023      	movs	r0, #35	; 0x23
   d57f4:	f002 f8ec 	bl	d79d0 <_Z15detachInterruptt>
  // Delay for up to two system power manager loop invocations
  delay(2000);
   d57f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d57fc:	f001 fb5c 	bl	d6eb8 <delay>
  // Change PMIC settings
  power.setInputVoltageLimit(4640);
   d5800:	f44f 5191 	mov.w	r1, #4640	; 0x1220
   d5804:	486f      	ldr	r0, [pc, #444]	; (d59c4 <setup+0x38c>)
   d5806:	f002 fb4f 	bl	d7ea8 <_ZN4PMIC20setInputVoltageLimitEt>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d580a:	486f      	ldr	r0, [pc, #444]	; (d59c8 <setup+0x390>)
   d580c:	f000 fa72 	bl	d5cf4 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5810:	2304      	movs	r3, #4
   d5812:	aa03      	add	r2, sp, #12
   d5814:	4629      	mov	r1, r5
   d5816:	486c      	ldr	r0, [pc, #432]	; (d59c8 <setup+0x390>)
   d5818:	f000 faae 	bl	d5d78 <_ZN6MB85RC8readDataEjPhj>

  int tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d581c:	9b03      	ldr	r3, [sp, #12]
   d581e:	2b02      	cmp	r3, #2
   d5820:	d018      	beq.n	d5854 <setup+0x21c>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5822:	4869      	ldr	r0, [pc, #420]	; (d59c8 <setup+0x390>)
   d5824:	f000 fa70 	bl	d5d08 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5828:	2304      	movs	r3, #4
   d582a:	4a68      	ldr	r2, [pc, #416]	; (d59cc <setup+0x394>)
   d582c:	4866      	ldr	r0, [pc, #408]	; (d59c8 <setup+0x390>)
   d582e:	4629      	mov	r1, r5
   d5830:	f000 faf7 	bl	d5e22 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5834:	2304      	movs	r3, #4
   d5836:	aa03      	add	r2, sp, #12
   d5838:	4629      	mov	r1, r5
   d583a:	4863      	ldr	r0, [pc, #396]	; (d59c8 <setup+0x390>)
   d583c:	f000 fa9c 	bl	d5d78 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5840:	9b03      	ldr	r3, [sp, #12]
   d5842:	2b02      	cmp	r3, #2
   d5844:	d003      	beq.n	d584e <setup+0x216>
   d5846:	2301      	movs	r3, #1
   d5848:	f888 3000 	strb.w	r3, [r8]
   d584c:	e008      	b.n	d5860 <setup+0x228>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d584e:	f7ff f8dd 	bl	d4a0c <_Z18loadSystemDefaultsv>
   d5852:	e005      	b.n	d5860 <setup+0x228>
   d5854:	232c      	movs	r3, #44	; 0x2c
   d5856:	4622      	mov	r2, r4
   d5858:	2101      	movs	r1, #1
   d585a:	485b      	ldr	r0, [pc, #364]	; (d59c8 <setup+0x390>)
   d585c:	f000 fa8c 	bl	d5d78 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5860:	2500      	movs	r5, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d5862:	f7fe fde9 	bl	d4438 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5866:	462a      	mov	r2, r5
   d5868:	4629      	mov	r1, r5
   d586a:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d586c:	9508      	str	r5, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d586e:	f001 f81d 	bl	d68ac <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5872:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5874:	2b14      	cmp	r3, #20
   d5876:	f000 8169 	beq.w	d5b4c <setup+0x514>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d587a:	462a      	mov	r2, r5
   d587c:	4629      	mov	r1, r5
   d587e:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5880:	9508      	str	r5, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5882:	f001 f813 	bl	d68ac <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5886:	9b08      	ldr	r3, [sp, #32]
   d5888:	2b8c      	cmp	r3, #140	; 0x8c
   d588a:	f000 815f 	beq.w	d5b4c <setup+0x514>
    sysStatus.resetCount++;
    fram.put(FRAM::systemStatusAddr, sysStatus);  // If so, store incremented number - watchdog must have done This
  }

  snprintf(debounceStr,sizeof(debounceStr),"%2.1f sec", (float)sysStatus.debounce/1000.0);
   d588e:	edd4 7a04 	vldr	s15, [r4, #16]
   d5892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5896:	ee17 0a90 	vmov	r0, s15
   d589a:	f003 fd1b 	bl	d92d4 <__aeabi_f2d>
   d589e:	4b4c      	ldr	r3, [pc, #304]	; (d59d0 <setup+0x398>)
   d58a0:	2200      	movs	r2, #0
   d58a2:	f003 fe95 	bl	d95d0 <__aeabi_ddiv>
   d58a6:	4a4b      	ldr	r2, [pc, #300]	; (d59d4 <setup+0x39c>)
   d58a8:	e9cd 0100 	strd	r0, r1, [sp]
   d58ac:	2108      	movs	r1, #8
   d58ae:	4827      	ldr	r0, [pc, #156]	; (d594c <setup+0x314>)
   d58b0:	f001 fae2 	bl	d6e78 <snprintf>

  Time.setDSTOffset(sysStatus.dstOffset);                                // Set the value from FRAM if in limits     
   d58b4:	ed94 0a07 	vldr	s0, [r4, #28]
   d58b8:	f002 fea2 	bl	d8600 <_ZN9TimeClass12setDSTOffsetEf>
  if (Time.isValid()) DSTRULES() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here 
   d58bc:	f002 ff86 	bl	d87cc <_ZN9TimeClass7isValidEv>
   d58c0:	b138      	cbz	r0, d58d2 <setup+0x29a>
   d58c2:	f7fe feb7 	bl	d4634 <_Z8isDSTusav>
   d58c6:	b110      	cbz	r0, d58ce <setup+0x296>
   d58c8:	f002 feb4 	bl	d8634 <_ZN9TimeClass8beginDSTEv>
   d58cc:	e001      	b.n	d58d2 <setup+0x29a>
   d58ce:	f002 febb 	bl	d8648 <_ZN9TimeClass6endDSTEv>
   d58d2:	4d0f      	ldr	r5, [pc, #60]	; (d5910 <setup+0x2d8>)
  Time.zone(sysStatus.timezone);                                      // Set the Time Zone for our device 
   d58d4:	ed94 0a06 	vldr	s0, [r4, #24]
   d58d8:	f8df 9100 	ldr.w	r9, [pc, #256]	; d59dc <setup+0x3a4>
   d58dc:	f002 fe74 	bl	d85c8 <_ZN9TimeClass4zoneEf>
   d58e0:	231c      	movs	r3, #28
   d58e2:	462a      	mov	r2, r5
   d58e4:	2150      	movs	r1, #80	; 0x50
   d58e6:	4838      	ldr	r0, [pc, #224]	; (d59c8 <setup+0x390>)
   d58e8:	f000 fa46 	bl	d5d78 <_ZN6MB85RC8readDataEjPhj>

    
  fram.get(FRAM::currentCountsAddr,current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
   d58ec:	682b      	ldr	r3, [r5, #0]
   d58ee:	2b00      	cmp	r3, #0
   d58f0:	d076      	beq.n	d59e0 <setup+0x3a8>
   d58f2:	68e8      	ldr	r0, [r5, #12]
   d58f4:	f002 fe36 	bl	d8564 <_ZN9TimeClass4hourEl>
   d58f8:	e074      	b.n	d59e4 <setup+0x3ac>
   d58fa:	bf00      	nop
   d58fc:	2003e0f4 	.word	0x2003e0f4
   d5900:	2003e16c 	.word	0x2003e16c
   d5904:	000dd33f 	.word	0x000dd33f
   d5908:	000d40c5 	.word	0x000d40c5
   d590c:	000d475d 	.word	0x000d475d
   d5910:	2003e14c 	.word	0x2003e14c
   d5914:	000dd34c 	.word	0x000dd34c
   d5918:	2003e154 	.word	0x2003e154
   d591c:	000dd358 	.word	0x000dd358
   d5920:	2003e0fc 	.word	0x2003e0fc
   d5924:	000dd363 	.word	0x000dd363
   d5928:	000dd36a 	.word	0x000dd36a
   d592c:	2003e15c 	.word	0x2003e15c
   d5930:	000dd375 	.word	0x000dd375
   d5934:	2003df84 	.word	0x2003df84
   d5938:	000dd381 	.word	0x000dd381
   d593c:	000dd389 	.word	0x000dd389
   d5940:	000dd394 	.word	0x000dd394
   d5944:	000dd429 	.word	0x000dd429
   d5948:	000dd3a1 	.word	0x000dd3a1
   d594c:	2003df89 	.word	0x2003df89
   d5950:	000dd440 	.word	0x000dd440
   d5954:	2003e160 	.word	0x2003e160
   d5958:	000dd3ab 	.word	0x000dd3ab
   d595c:	2003e08d 	.word	0x2003e08d
   d5960:	000dd3b2 	.word	0x000dd3b2
   d5964:	000d413d 	.word	0x000d413d
   d5968:	000dd3bd 	.word	0x000dd3bd
   d596c:	000d419d 	.word	0x000d419d
   d5970:	000dd3c7 	.word	0x000dd3c7
   d5974:	000d4a7d 	.word	0x000d4a7d
   d5978:	000dd3d3 	.word	0x000dd3d3
   d597c:	000d4159 	.word	0x000d4159
   d5980:	000dd3dd 	.word	0x000dd3dd
   d5984:	000d4ea5 	.word	0x000d4ea5
   d5988:	000dd3e5 	.word	0x000dd3e5
   d598c:	000d4b79 	.word	0x000d4b79
   d5990:	000dd3f2 	.word	0x000dd3f2
   d5994:	000d4c25 	.word	0x000d4c25
   d5998:	000dd3fd 	.word	0x000dd3fd
   d599c:	000d4cc9 	.word	0x000d4cc9
   d59a0:	000dd40a 	.word	0x000dd40a
   d59a4:	000d54f9 	.word	0x000d54f9
   d59a8:	000dd417 	.word	0x000dd417
   d59ac:	000d4dc5 	.word	0x000d4dc5
   d59b0:	000dd425 	.word	0x000dd425
   d59b4:	000d4e35 	.word	0x000d4e35
   d59b8:	000dd432 	.word	0x000dd432
   d59bc:	000d4ad1 	.word	0x000d4ad1
   d59c0:	000dd43c 	.word	0x000dd43c
   d59c4:	2003e0be 	.word	0x2003e0be
   d59c8:	2003e098 	.word	0x2003e098
   d59cc:	000dd0ac 	.word	0x000dd0ac
   d59d0:	408f4000 	.word	0x408f4000
   d59d4:	000dd1ca 	.word	0x000dd1ca
   d59d8:	2003e0bd 	.word	0x2003e0bd
   d59dc:	2003e0c0 	.word	0x2003e0c0
  else currentHourlyPeriod = Time.hour();                                  // The local time hourly period for reporting purposes
   d59e0:	f002 ff1c 	bl	d881c <_ZN9TimeClass4hourEv>
   d59e4:	f8c9 0000 	str.w	r0, [r9]

  rtc.setup();                                                        // Start the real time clock
   d59e8:	485f      	ldr	r0, [pc, #380]	; (d5b68 <setup+0x530>)
   d59ea:	f000 fcc5 	bl	d6378 <_ZN8MCP794105setupEv>

  Serial.println(Time.timeStr(rtc.getRTCTime()));
   d59ee:	f003 f839 	bl	d8a64 <_Z16_fetch_usbserialv>
   d59f2:	4681      	mov	r9, r0
   d59f4:	485c      	ldr	r0, [pc, #368]	; (d5b68 <setup+0x530>)
   d59f6:	f000 fcaf 	bl	d6358 <_ZNK8MCP7941010getRTCTimeEv>
   d59fa:	4601      	mov	r1, r0
   d59fc:	4630      	mov	r0, r6
   d59fe:	f002 fe33 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d5a02:	9908      	ldr	r1, [sp, #32]
   d5a04:	4648      	mov	r0, r9
   d5a06:	f002 fbca 	bl	d819e <_ZN5Print7printlnEPKc>
   d5a0a:	4630      	mov	r0, r6
   d5a0c:	f002 fc61 	bl	d82d2 <_ZN6StringD1Ev>
  Serial.println(Time.timeStr(Time.local()));
   d5a10:	f003 f828 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a14:	4681      	mov	r9, r0
   d5a16:	f002 fdc9 	bl	d85ac <_ZN9TimeClass5localEv>
   d5a1a:	4601      	mov	r1, r0
   d5a1c:	4630      	mov	r0, r6
   d5a1e:	f002 fe23 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d5a22:	9908      	ldr	r1, [sp, #32]
   d5a24:	4648      	mov	r0, r9
   d5a26:	f002 fbba 	bl	d819e <_ZN5Print7printlnEPKc>
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f002 fc51 	bl	d82d2 <_ZN6StringD1Ev>

  PMICreset();                                                        // Executes commands that set up the PMIC for Solar charging
   d5a30:	f7fe fcc2 	bl	d43b8 <_Z9PMICresetv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5a34:	2004      	movs	r0, #4
   d5a36:	f003 f90b 	bl	d8c50 <digitalRead>
   d5a3a:	b908      	cbnz	r0, d5a40 <setup+0x408>
   d5a3c:	f7fe ffe6 	bl	d4a0c <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  if (Time.day() != Time.day(current.lastCountTime)) {
   d5a40:	f002 ff00 	bl	d8844 <_ZN9TimeClass3dayEv>
   d5a44:	4682      	mov	sl, r0
   d5a46:	68e8      	ldr	r0, [r5, #12]
   d5a48:	f8df 9150 	ldr.w	r9, [pc, #336]	; d5b9c <setup+0x564>
   d5a4c:	f002 fd92 	bl	d8574 <_ZN9TimeClass3dayEl>
   d5a50:	4582      	cmp	sl, r0
   d5a52:	d03f      	beq.n	d5ad4 <setup+0x49c>
    Serial.println("We are resetting everything");
   d5a54:	f003 f806 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a58:	4944      	ldr	r1, [pc, #272]	; (d5b6c <setup+0x534>)
   d5a5a:	f002 fba0 	bl	d819e <_ZN5Print7printlnEPKc>
    Serial.print("Time.day() = ");
   d5a5e:	f003 f801 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a62:	4943      	ldr	r1, [pc, #268]	; (d5b70 <setup+0x538>)
   d5a64:	f002 fb88 	bl	d8178 <_ZN5Print5printEPKc>
    Serial.print(Time.day());
   d5a68:	f002 fffc 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a6c:	4605      	mov	r5, r0
   d5a6e:	f002 fee9 	bl	d8844 <_ZN9TimeClass3dayEv>
   d5a72:	220a      	movs	r2, #10
   d5a74:	4601      	mov	r1, r0
   d5a76:	4628      	mov	r0, r5
   d5a78:	f002 fbf6 	bl	d8268 <_ZN5Print5printEii>
    Serial.print(" and the last day is: ");
   d5a7c:	f002 fff2 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a80:	493c      	ldr	r1, [pc, #240]	; (d5b74 <setup+0x53c>)
   d5a82:	f002 fb79 	bl	d8178 <_ZN5Print5printEPKc>
    Serial.print(Time.day(current.lastCountTime));
   d5a86:	f002 ffed 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5a8a:	4605      	mov	r5, r0
   d5a8c:	f8d9 000c 	ldr.w	r0, [r9, #12]
   d5a90:	f002 fd70 	bl	d8574 <_ZN9TimeClass3dayEl>
   d5a94:	220a      	movs	r2, #10
   d5a96:	4601      	mov	r1, r0
   d5a98:	4628      	mov	r0, r5
   d5a9a:	f002 fbe5 	bl	d8268 <_ZN5Print5printEii>
    Serial.print(" because ");
   d5a9e:	f002 ffe1 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5aa2:	4935      	ldr	r1, [pc, #212]	; (d5b78 <setup+0x540>)
   d5aa4:	f002 fb68 	bl	d8178 <_ZN5Print5printEPKc>
    Serial.println(current.lastCountTime);
   d5aa8:	f002 ffdc 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5aac:	220a      	movs	r2, #10
   d5aae:	f8d9 100c 	ldr.w	r1, [r9, #12]
   d5ab2:	f002 fbad 	bl	d8210 <_ZN5Print7printlnEmi>
    //resetEverything();                                                // Zero the counts for the new day
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
   d5ab6:	7963      	ldrb	r3, [r4, #5]
   d5ab8:	b163      	cbz	r3, d5ad4 <setup+0x49c>
   d5aba:	4b30      	ldr	r3, [pc, #192]	; (d5b7c <setup+0x544>)
   d5abc:	799b      	ldrb	r3, [r3, #6]
   d5abe:	b94b      	cbnz	r3, d5ad4 <setup+0x49c>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
   d5ac0:	492f      	ldr	r1, [pc, #188]	; (d5b80 <setup+0x548>)
   d5ac2:	4630      	mov	r0, r6
   d5ac4:	f002 fc4c 	bl	d8360 <_ZN6StringC1EPK19__FlashStringHelper>
   d5ac8:	4630      	mov	r0, r6
   d5aca:	f7ff f9eb 	bl	d4ea4 <_Z15setLowPowerMode6String>
   d5ace:	4630      	mov	r0, r6
   d5ad0:	f002 fbff 	bl	d82d2 <_ZN6StringD1Ev>
    }
  }
  if ((Time.hour() > sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
   d5ad4:	f002 fea2 	bl	d881c <_ZN9TimeClass4hourEv>
   d5ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5ada:	4d28      	ldr	r5, [pc, #160]	; (d5b7c <setup+0x544>)
   d5adc:	4298      	cmp	r0, r3
   d5ade:	dc17      	bgt.n	d5b10 <setup+0x4d8>
   d5ae0:	f002 fe9c 	bl	d881c <_ZN9TimeClass4hourEv>
   d5ae4:	6a2b      	ldr	r3, [r5, #32]
   d5ae6:	4298      	cmp	r0, r3
   d5ae8:	db12      	blt.n	d5b10 <setup+0x4d8>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5aea:	2300      	movs	r3, #0
   d5aec:	9300      	str	r3, [sp, #0]
   d5aee:	2201      	movs	r2, #1
   d5af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5af4:	4923      	ldr	r1, [pc, #140]	; (d5b84 <setup+0x54c>)
   d5af6:	200c      	movs	r0, #12
   d5af8:	f001 ff42 	bl	d7980 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5afc:	78eb      	ldrb	r3, [r5, #3]
   d5afe:	b113      	cbz	r3, d5b06 <setup+0x4ce>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b00:	f001 f902 	bl	d6d08 <spark_cloud_flag_connected>
   d5b04:	b360      	cbz	r0, d5b60 <setup+0x528>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5b06:	f7fe fc17 	bl	d4338 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5b0a:	4b1f      	ldr	r3, [pc, #124]	; (d5b88 <setup+0x550>)
   d5b0c:	4a1f      	ldr	r2, [pc, #124]	; (d5b8c <setup+0x554>)
   d5b0e:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5b10:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5b12:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5b16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5b1a:	f003 031f 	and.w	r3, r3, #31
   d5b1e:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5b22:	f7fe fafc 	bl	d411e <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5b26:	f898 3000 	ldrb.w	r3, [r8]
   d5b2a:	b913      	cbnz	r3, d5b32 <setup+0x4fa>
   d5b2c:	4b18      	ldr	r3, [pc, #96]	; (d5b90 <setup+0x558>)
   d5b2e:	2202      	movs	r2, #2
   d5b30:	701a      	strb	r2, [r3, #0]

  Serial.println("Exiting Setup");
   d5b32:	f002 ff97 	bl	d8a64 <_Z16_fetch_usbserialv>
   d5b36:	4917      	ldr	r1, [pc, #92]	; (d5b94 <setup+0x55c>)
   d5b38:	f002 fb31 	bl	d819e <_ZN5Print7printlnEPKc>
  sysStatus.verboseMode = true;
   d5b3c:	2301      	movs	r3, #1

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5b3e:	a804      	add	r0, sp, #16
  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  Serial.println("Exiting Setup");
  sysStatus.verboseMode = true;
   d5b40:	7123      	strb	r3, [r4, #4]

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5b42:	f002 fbc6 	bl	d82d2 <_ZN6StringD1Ev>

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  Serial.println("Exiting Setup");
  sysStatus.verboseMode = true;
}
   d5b46:	b02c      	add	sp, #176	; 0xb0
   d5b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5b4c:	6963      	ldr	r3, [r4, #20]
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5b4e:	4a0b      	ldr	r2, [pc, #44]	; (d5b7c <setup+0x544>)
   d5b50:	4811      	ldr	r0, [pc, #68]	; (d5b98 <setup+0x560>)
   d5b52:	3301      	adds	r3, #1
   d5b54:	6163      	str	r3, [r4, #20]
   d5b56:	2101      	movs	r1, #1
   d5b58:	232c      	movs	r3, #44	; 0x2c
   d5b5a:	f000 f962 	bl	d5e22 <_ZN6MB85RC9writeDataEjPKhj>
   d5b5e:	e696      	b.n	d588e <setup+0x256>
    }
  }
  if ((Time.hour() > sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5b60:	f7fe ff08 	bl	d4974 <_Z17connectToParticlev>
   d5b64:	e7cf      	b.n	d5b06 <setup+0x4ce>
   d5b66:	bf00      	nop
   d5b68:	2003e0d0 	.word	0x2003e0d0
   d5b6c:	000dd449 	.word	0x000dd449
   d5b70:	000dd465 	.word	0x000dd465
   d5b74:	000dd473 	.word	0x000dd473
   d5b78:	000dd48a 	.word	0x000dd48a
   d5b7c:	2003e16c 	.word	0x2003e16c
   d5b80:	000dd4e6 	.word	0x000dd4e6
   d5b84:	000d40b9 	.word	0x000d40b9
   d5b88:	2003e0c8 	.word	0x2003e0c8
   d5b8c:	00015f90 	.word	0x00015f90
   d5b90:	2003e0bd 	.word	0x2003e0bd
   d5b94:	000dd494 	.word	0x000dd494
   d5b98:	2003e098 	.word	0x2003e098
   d5b9c:	2003e14c 	.word	0x2003e14c

000d5ba0 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ba0:	4b2f      	ldr	r3, [pc, #188]	; (d5c60 <_GLOBAL__sub_I___appProductID+0xc0>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time 
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5ba2:	b570      	push	{r4, r5, r6, lr}
   d5ba4:	2400      	movs	r4, #0
   d5ba6:	601c      	str	r4, [r3, #0]
   d5ba8:	4b2e      	ldr	r3, [pc, #184]	; (d5c64 <_GLOBAL__sub_I___appProductID+0xc4>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5baa:	4e2f      	ldr	r6, [pc, #188]	; (d5c68 <_GLOBAL__sub_I___appProductID+0xc8>)
   d5bac:	2501      	movs	r5, #1
   d5bae:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5bb0:	f000 febc 	bl	d692c <HAL_Pin_Map>
   d5bb4:	4b2d      	ldr	r3, [pc, #180]	; (d5c6c <_GLOBAL__sub_I___appProductID+0xcc>)
   d5bb6:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5bb8:	f002 ffe4 	bl	d8b84 <spark_protocol_instance>
   d5bbc:	4623      	mov	r3, r4
   d5bbe:	4622      	mov	r2, r4
   d5bc0:	f642 2170 	movw	r1, #10864	; 0x2a70
   d5bc4:	f002 ffe6 	bl	d8b94 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5bc8:	f002 ffdc 	bl	d8b84 <spark_protocol_instance>
   d5bcc:	4629      	mov	r1, r5
   d5bce:	4623      	mov	r3, r4
   d5bd0:	4622      	mov	r2, r4
   d5bd2:	f002 ffe7 	bl	d8ba4 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5bd6:	4b26      	ldr	r3, [pc, #152]	; (d5c70 <_GLOBAL__sub_I___appProductID+0xd0>)
   d5bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5bdc:	701c      	strb	r4, [r3, #0]
   d5bde:	805c      	strh	r4, [r3, #2]
   d5be0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5be2:	2002      	movs	r0, #2
   d5be4:	f001 f80a 	bl	d6bfc <set_system_mode>

const uint8_t softwareRelease = 1;                  // We set this in the code itself - not memory

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5be8:	4621      	mov	r1, r4
   d5bea:	4628      	mov	r0, r5
   d5bec:	f001 f81e 	bl	d6c2c <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5bf0:	4629      	mov	r1, r5
   d5bf2:	2004      	movs	r0, #4
   d5bf4:	f000 fe4a 	bl	d688c <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5bf8:	4d1e      	ldr	r5, [pc, #120]	; (d5c74 <_GLOBAL__sub_I___appProductID+0xd4>)
   d5bfa:	4621      	mov	r1, r4
   d5bfc:	4630      	mov	r0, r6
   d5bfe:	f001 fde5 	bl	d77cc <_ZN9FuelGaugeC1Eb>
   d5c02:	4630      	mov	r0, r6
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
   d5c04:	4e1c      	ldr	r6, [pc, #112]	; (d5c78 <_GLOBAL__sub_I___appProductID+0xd8>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
   d5c06:	491d      	ldr	r1, [pc, #116]	; (d5c7c <_GLOBAL__sub_I___appProductID+0xdc>)
   d5c08:	462a      	mov	r2, r5
   d5c0a:	f003 f8ad 	bl	d8d68 <__aeabi_atexit>
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
   d5c0e:	4621      	mov	r1, r4
   d5c10:	4630      	mov	r0, r6
   d5c12:	f002 f8de 	bl	d7dd2 <_ZN4PMICC1Eb>
   d5c16:	462a      	mov	r2, r5
   d5c18:	4919      	ldr	r1, [pc, #100]	; (d5c80 <_GLOBAL__sub_I___appProductID+0xe0>)
   d5c1a:	4630      	mov	r0, r6
   d5c1c:	f003 f8a4 	bl	d8d68 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5c20:	f003 f840 	bl	d8ca4 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5c24:	4e17      	ldr	r6, [pc, #92]	; (d5c84 <_GLOBAL__sub_I___appProductID+0xe4>)
   d5c26:	4601      	mov	r1, r0
   d5c28:	4630      	mov	r0, r6
   d5c2a:	f000 fae3 	bl	d61f4 <_ZN8MCP79410C1ER7TwoWire>
   d5c2e:	462a      	mov	r2, r5
   d5c30:	4915      	ldr	r1, [pc, #84]	; (d5c88 <_GLOBAL__sub_I___appProductID+0xe8>)
   d5c32:	4630      	mov	r0, r6
   d5c34:	f003 f898 	bl	d8d68 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5c38:	f003 f834 	bl	d8ca4 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5c3c:	4e13      	ldr	r6, [pc, #76]	; (d5c8c <_GLOBAL__sub_I___appProductID+0xec>)
   d5c3e:	4623      	mov	r3, r4
   d5c40:	4601      	mov	r1, r0
   d5c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5c46:	4630      	mov	r0, r6
   d5c48:	f000 f84a 	bl	d5ce0 <_ZN6MB85RCC1ER7TwoWireji>
   d5c4c:	4b10      	ldr	r3, [pc, #64]	; (d5c90 <_GLOBAL__sub_I___appProductID+0xf0>)
   d5c4e:	6033      	str	r3, [r6, #0]
   d5c50:	462a      	mov	r2, r5
   d5c52:	4630      	mov	r0, r6
   d5c54:	490f      	ldr	r1, [pc, #60]	; (d5c94 <_GLOBAL__sub_I___appProductID+0xf4>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time 
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;                           // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                                         //Initalize the PMIC class so you can call the Power Management functions below.
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5c5a:	f003 b885 	b.w	d8d68 <__aeabi_atexit>
   d5c5e:	bf00      	nop
   d5c60:	2003e0cc 	.word	0x2003e0cc
   d5c64:	2003e0a8 	.word	0x2003e0a8
   d5c68:	2003e0ac 	.word	0x2003e0ac
   d5c6c:	2003e0f4 	.word	0x2003e0f4
   d5c70:	2003e0ec 	.word	0x2003e0ec
   d5c74:	2003e088 	.word	0x2003e088
   d5c78:	2003e0be 	.word	0x2003e0be
   d5c7c:	000d77eb 	.word	0x000d77eb
   d5c80:	000d7df1 	.word	0x000d7df1
   d5c84:	2003e0d0 	.word	0x2003e0d0
   d5c88:	000d5f69 	.word	0x000d5f69
   d5c8c:	2003e098 	.word	0x2003e098
   d5c90:	000dd044 	.word	0x000dd044
   d5c94:	000d4175 	.word	0x000d4175

000d5c98 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5c98:	4770      	bx	lr

000d5c9a <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5c9a:	b510      	push	{r4, lr}
}
   d5c9c:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5c9e:	4604      	mov	r4, r0
}
   d5ca0:	f003 f867 	bl	d8d72 <_ZdlPvj>
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	bd10      	pop	{r4, pc}

000d5ca8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5ca8:	6803      	ldr	r3, [r0, #0]
   d5caa:	b2c9      	uxtb	r1, r1
   d5cac:	689b      	ldr	r3, [r3, #8]
   d5cae:	4718      	bx	r3

000d5cb0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5cb0:	b40e      	push	{r1, r2, r3}
   d5cb2:	b500      	push	{lr}
   d5cb4:	b08c      	sub	sp, #48	; 0x30
   d5cb6:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5cb8:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5cba:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5cbe:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5cc0:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5cc4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5cc6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5cc8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5cca:	aa04      	add	r2, sp, #16
   d5ccc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5cce:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5cd0:	f000 ff84 	bl	d6bdc <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d5cd4:	b00c      	add	sp, #48	; 0x30
   d5cd6:	f85d eb04 	ldr.w	lr, [sp], #4
   d5cda:	b003      	add	sp, #12
   d5cdc:	4770      	bx	lr
	...

000d5ce0 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5ce0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5ce2:	4d03      	ldr	r5, [pc, #12]	; (d5cf0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5ce4:	6005      	str	r5, [r0, #0]
   d5ce6:	6041      	str	r1, [r0, #4]
   d5ce8:	6082      	str	r2, [r0, #8]
   d5cea:	60c3      	str	r3, [r0, #12]
}
   d5cec:	bd30      	pop	{r4, r5, pc}
   d5cee:	bf00      	nop
   d5cf0:	000dd56c 	.word	0x000dd56c

000d5cf4 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5cf4:	6840      	ldr	r0, [r0, #4]
   d5cf6:	f001 be0d 	b.w	d7914 <_ZN7TwoWire5beginEv>

000d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5cfa:	b510      	push	{r4, lr}
   d5cfc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5cfe:	6800      	ldr	r0, [r0, #0]
   d5d00:	f001 fe34 	bl	d796c <_ZN7TwoWire6unlockEv>
   d5d04:	4620      	mov	r0, r4
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d0c:	b08a      	sub	sp, #40	; 0x28
   d5d0e:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5d10:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d12:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5d14:	f001 fe21 	bl	d795a <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5d18:	221e      	movs	r2, #30
   d5d1a:	2100      	movs	r1, #0
   d5d1c:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5d1e:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5d20:	f004 f873 	bl	d9e0a <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5d24:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5d26:	b1de      	cbz	r6, d5d60 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5d28:	683b      	ldr	r3, [r7, #0]
   d5d2a:	2e1e      	cmp	r6, #30
   d5d2c:	46b0      	mov	r8, r6
   d5d2e:	bf28      	it	cs
   d5d30:	f04f 081e 	movcs.w	r8, #30
   d5d34:	68dc      	ldr	r4, [r3, #12]
   d5d36:	aa02      	add	r2, sp, #8
   d5d38:	4643      	mov	r3, r8
   d5d3a:	4629      	mov	r1, r5
   d5d3c:	4638      	mov	r0, r7
   d5d3e:	47a0      	blx	r4
			if (!result) {
   d5d40:	4604      	mov	r4, r0
   d5d42:	b948      	cbnz	r0, d5d58 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5d44:	462a      	mov	r2, r5
   d5d46:	490a      	ldr	r1, [pc, #40]	; (d5d70 <_ZN6MB85RC5eraseEv+0x68>)
   d5d48:	480a      	ldr	r0, [pc, #40]	; (d5d74 <_ZN6MB85RC5eraseEv+0x6c>)
   d5d4a:	f7ff ffb1 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
   d5d4e:	a801      	add	r0, sp, #4
   d5d50:	f7ff ffd3 	bl	d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5d54:	4620      	mov	r0, r4
   d5d56:	e007      	b.n	d5d68 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5d58:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5d5c:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5d5e:	e7e2      	b.n	d5d26 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5d60:	a801      	add	r0, sp, #4
   d5d62:	f7ff ffca 	bl	d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5d66:	2001      	movs	r0, #1
}
   d5d68:	b00a      	add	sp, #40	; 0x28
   d5d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d6e:	bf00      	nop
   d5d70:	000dd4e8 	.word	0x000dd4e8
   d5d74:	2003e268 	.word	0x2003e268

000d5d78 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d7c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5d7e:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d80:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d82:	460e      	mov	r6, r1
   d5d84:	4617      	mov	r7, r2
   d5d86:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5d88:	f001 fde7 	bl	d795a <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5d8c:	f1b8 0f00 	cmp.w	r8, #0
   d5d90:	d101      	bne.n	d5d96 <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5d92:	2401      	movs	r4, #1
   d5d94:	e03e      	b.n	d5e14 <_ZN6MB85RC8readDataEjPhj+0x9c>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5d96:	68e1      	ldr	r1, [r4, #12]
   d5d98:	6860      	ldr	r0, [r4, #4]
   d5d9a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d9e:	f001 fdd1 	bl	d7944 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5da2:	0a31      	lsrs	r1, r6, #8
   d5da4:	6860      	ldr	r0, [r4, #4]
   d5da6:	f7ff ff7f 	bl	d5ca8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5daa:	4631      	mov	r1, r6
   d5dac:	6860      	ldr	r0, [r4, #4]
   d5dae:	f7ff ff7b 	bl	d5ca8 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5db2:	2100      	movs	r1, #0
   d5db4:	6860      	ldr	r0, [r4, #4]
   d5db6:	f001 fdc8 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5dba:	b108      	cbz	r0, d5dc0 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5dbc:	2400      	movs	r4, #0
   d5dbe:	e029      	b.n	d5e14 <_ZN6MB85RC8readDataEjPhj+0x9c>
   d5dc0:	f1b8 0f20 	cmp.w	r8, #32
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
   d5dc4:	68e1      	ldr	r1, [r4, #12]
   d5dc6:	6860      	ldr	r0, [r4, #4]
   d5dc8:	46c1      	mov	r9, r8
   d5dca:	bf28      	it	cs
   d5dcc:	f04f 0920 	movcs.w	r9, #32
   d5dd0:	2301      	movs	r3, #1
   d5dd2:	464a      	mov	r2, r9
   d5dd4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5dd8:	f001 fdab 	bl	d7932 <_ZN7TwoWire11requestFromEiii>

			if (Wire.available() < (int) bytesToRead) {
   d5ddc:	f002 ff62 	bl	d8ca4 <_Z19__fetch_global_Wirev>
   d5de0:	6803      	ldr	r3, [r0, #0]
   d5de2:	691b      	ldr	r3, [r3, #16]
   d5de4:	4798      	blx	r3
   d5de6:	4581      	cmp	r9, r0
   d5de8:	dce8      	bgt.n	d5dbc <_ZN6MB85RC8readDataEjPhj+0x44>
   d5dea:	463d      	mov	r5, r7
   d5dec:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5df0:	f002 ff58 	bl	d8ca4 <_Z19__fetch_global_Wirev>
   d5df4:	6803      	ldr	r3, [r0, #0]
   d5df6:	695b      	ldr	r3, [r3, #20]
   d5df8:	4798      	blx	r3
   d5dfa:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5dfe:	1bea      	subs	r2, r5, r7
   d5e00:	ebc5 0308 	rsb	r3, r5, r8
   d5e04:	4591      	cmp	r9, r2
   d5e06:	eb05 060a 	add.w	r6, r5, sl
   d5e0a:	443b      	add	r3, r7
   d5e0c:	d8f0      	bhi.n	d5df0 <_ZN6MB85RC8readDataEjPhj+0x78>
   d5e0e:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5e10:	462f      	mov	r7, r5
   d5e12:	e7bb      	b.n	d5d8c <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5e14:	a801      	add	r0, sp, #4
   d5e16:	f7ff ff70 	bl	d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	b002      	add	sp, #8
   d5e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5e22 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5e22:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5e26:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5e28:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5e2a:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5e2c:	460d      	mov	r5, r1
   d5e2e:	4690      	mov	r8, r2
   d5e30:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5e32:	f001 fd92 	bl	d795a <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5e36:	b34f      	cbz	r7, d5e8c <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5e38:	68e1      	ldr	r1, [r4, #12]
   d5e3a:	6860      	ldr	r0, [r4, #4]
   d5e3c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5e40:	f001 fd80 	bl	d7944 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5e44:	0a29      	lsrs	r1, r5, #8
   d5e46:	6860      	ldr	r0, [r4, #4]
   d5e48:	f7ff ff2e 	bl	d5ca8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5e4c:	4629      	mov	r1, r5
   d5e4e:	6860      	ldr	r0, [r4, #4]
   d5e50:	f7ff ff2a 	bl	d5ca8 <_ZN7TwoWire5writeEj>
   d5e54:	f108 091e 	add.w	r9, r8, #30
   d5e58:	4646      	mov	r6, r8
   d5e5a:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5e5e:	6860      	ldr	r0, [r4, #4]
   d5e60:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5e64:	6803      	ldr	r3, [r0, #0]
   d5e66:	689b      	ldr	r3, [r3, #8]
   d5e68:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e6a:	45b1      	cmp	r9, r6
   d5e6c:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5e70:	46b0      	mov	r8, r6
				dataLen--;
   d5e72:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e76:	d001      	beq.n	d5e7c <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5e78:	2f00      	cmp	r7, #0
   d5e7a:	d1f0      	bne.n	d5e5e <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5e7c:	2101      	movs	r1, #1
   d5e7e:	6860      	ldr	r0, [r4, #4]
   d5e80:	f001 fd63 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5e84:	2800      	cmp	r0, #0
   d5e86:	d0d6      	beq.n	d5e36 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5e88:	2400      	movs	r4, #0
   d5e8a:	e000      	b.n	d5e8e <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5e8c:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5e8e:	a801      	add	r0, sp, #4
   d5e90:	f7ff ff33 	bl	d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5e94:	4620      	mov	r0, r4
   d5e96:	b002      	add	sp, #8
   d5e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5e9c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ea0:	b08b      	sub	sp, #44	; 0x2c
   d5ea2:	460e      	mov	r6, r1
   d5ea4:	4615      	mov	r5, r2
   d5ea6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5ea8:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5eaa:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5eac:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5eae:	f001 fd54 	bl	d795a <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5eb2:	42ae      	cmp	r6, r5
   d5eb4:	d223      	bcs.n	d5efe <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5eb6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5eb8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5eba:	b90c      	cbnz	r4, d5ec0 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5ebc:	2401      	movs	r4, #1
   d5ebe:	e03f      	b.n	d5f40 <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5ec0:	2c1e      	cmp	r4, #30
   d5ec2:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5ec4:	f8d8 3000 	ldr.w	r3, [r8]
   d5ec8:	bf28      	it	cs
   d5eca:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5ecc:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5ece:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5ed2:	aa02      	add	r2, sp, #8
   d5ed4:	463b      	mov	r3, r7
   d5ed6:	4631      	mov	r1, r6
   d5ed8:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5eda:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5edc:	47c8      	blx	r9
				if (!result) {
   d5ede:	b908      	cbnz	r0, d5ee4 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5ee0:	2400      	movs	r4, #0
   d5ee2:	e02d      	b.n	d5f40 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5ee4:	f8d8 3000 	ldr.w	r3, [r8]
   d5ee8:	aa02      	add	r2, sp, #8
   d5eea:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5eee:	4629      	mov	r1, r5
   d5ef0:	463b      	mov	r3, r7
   d5ef2:	4640      	mov	r0, r8
   d5ef4:	47c8      	blx	r9
				if (!result) {
   d5ef6:	2800      	cmp	r0, #0
   d5ef8:	d0f2      	beq.n	d5ee0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5efa:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5efc:	e7dd      	b.n	d5eba <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5efe:	d9dd      	bls.n	d5ebc <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5f00:	2c00      	cmp	r4, #0
   d5f02:	d0db      	beq.n	d5ebc <_ZN6MB85RC8moveDataEjjj+0x20>
   d5f04:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5f06:	f8d8 3000 	ldr.w	r3, [r8]
   d5f0a:	4627      	mov	r7, r4
   d5f0c:	bf28      	it	cs
   d5f0e:	271e      	movcs	r7, #30
   d5f10:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5f14:	aa02      	add	r2, sp, #8
   d5f16:	463b      	mov	r3, r7
   d5f18:	4631      	mov	r1, r6
   d5f1a:	4640      	mov	r0, r8
   d5f1c:	47c8      	blx	r9
				if (!result) {
   d5f1e:	2800      	cmp	r0, #0
   d5f20:	d0de      	beq.n	d5ee0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5f22:	f8d8 3000 	ldr.w	r3, [r8]
   d5f26:	aa02      	add	r2, sp, #8
   d5f28:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5f2c:	4629      	mov	r1, r5
   d5f2e:	463b      	mov	r3, r7
   d5f30:	4640      	mov	r0, r8
   d5f32:	47c8      	blx	r9
				if (!result) {
   d5f34:	2800      	cmp	r0, #0
   d5f36:	d0d3      	beq.n	d5ee0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5f38:	443e      	add	r6, r7
				framAddrTo += count;
   d5f3a:	443d      	add	r5, r7
				numBytes -= count;
   d5f3c:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5f3e:	e7df      	b.n	d5f00 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5f40:	a801      	add	r0, sp, #4
   d5f42:	f7ff feda 	bl	d5cfa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5f46:	4620      	mov	r0, r4
   d5f48:	b00b      	add	sp, #44	; 0x2c
   d5f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f4e <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5f4e:	f000 bced 	b.w	d692c <HAL_Pin_Map>

000d5f52 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5f52:	2040      	movs	r0, #64	; 0x40
   d5f54:	4770      	bx	lr

000d5f56 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5f56:	2000      	movs	r0, #0
   d5f58:	4770      	bx	lr

000d5f5a <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5f5a:	2080      	movs	r0, #128	; 0x80
   d5f5c:	4770      	bx	lr

000d5f5e <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5f5e:	20ff      	movs	r0, #255	; 0xff
   d5f60:	4770      	bx	lr

000d5f62 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5f62:	4770      	bx	lr

000d5f64 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5f64:	4770      	bx	lr

000d5f66 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5f66:	4770      	bx	lr

000d5f68 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5f68:	4770      	bx	lr

000d5f6a <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5f6a:	b510      	push	{r4, lr}

}
   d5f6c:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5f6e:	4604      	mov	r4, r0

}
   d5f70:	f002 feff 	bl	d8d72 <_ZdlPvj>
   d5f74:	4620      	mov	r0, r4
   d5f76:	bd10      	pop	{r4, pc}

000d5f78 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5f78:	b510      	push	{r4, lr}

}
   d5f7a:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5f7c:	4604      	mov	r4, r0

}
   d5f7e:	f002 fef8 	bl	d8d72 <_ZdlPvj>
   d5f82:	4620      	mov	r0, r4
   d5f84:	bd10      	pop	{r4, pc}

000d5f86 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5f86:	b510      	push	{r4, lr}

}
   d5f88:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5f8a:	4604      	mov	r4, r0

}
   d5f8c:	f002 fef1 	bl	d8d72 <_ZdlPvj>
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd10      	pop	{r4, pc}

000d5f94 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5f94:	b510      	push	{r4, lr}

}
   d5f96:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5f98:	4604      	mov	r4, r0

}
   d5f9a:	f002 feea 	bl	d8d72 <_ZdlPvj>
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	bd10      	pop	{r4, pc}

000d5fa2 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5fa2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5fa6:	6803      	ldr	r3, [r0, #0]
   d5fa8:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5faa:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5fac:	4798      	blx	r3
   d5fae:	2210      	movs	r2, #16
   d5fb0:	4601      	mov	r1, r0
   d5fb2:	4668      	mov	r0, sp
   d5fb4:	f003 ff29 	bl	d9e0a <memset>

	size_t len = length();
   d5fb8:	682b      	ldr	r3, [r5, #0]
   d5fba:	4628      	mov	r0, r5
   d5fbc:	689b      	ldr	r3, [r3, #8]
   d5fbe:	4798      	blx	r3
	size_t offset = 0;
   d5fc0:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5fc2:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5fc4:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5fc6:	42bc      	cmp	r4, r7
   d5fc8:	d20e      	bcs.n	d5fe8 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5fca:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5fcc:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5fce:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5fd0:	bf28      	it	cs
   d5fd2:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5fd4:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5fd8:	466a      	mov	r2, sp
   d5fda:	4633      	mov	r3, r6
   d5fdc:	4621      	mov	r1, r4
   d5fde:	4628      	mov	r0, r5
   d5fe0:	47c0      	blx	r8
		if (!bResult) {
   d5fe2:	b108      	cbz	r0, d5fe8 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5fe4:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5fe6:	e7ee      	b.n	d5fc6 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5fe8:	b004      	add	sp, #16
   d5fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fee <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5fee:	2300      	movs	r3, #0
	rawMonth = 1;
   d5ff0:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5ff2:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5ff4:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5ff6:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5ff8:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5ffa:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5ffc:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5ffe:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d6000:	7443      	strb	r3, [r0, #17]
   d6002:	4770      	bx	lr

000d6004 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d6004:	2201      	movs	r2, #1
   d6006:	b508      	push	{r3, lr}
   d6008:	7142      	strb	r2, [r0, #5]
   d600a:	2202      	movs	r2, #2
   d600c:	7182      	strb	r2, [r0, #6]
   d600e:	2203      	movs	r2, #3
   d6010:	4b06      	ldr	r3, [pc, #24]	; (d602c <_ZN12MCP79410TimeC1Ev+0x28>)
   d6012:	71c2      	strb	r2, [r0, #7]
   d6014:	2204      	movs	r2, #4
   d6016:	6003      	str	r3, [r0, #0]
   d6018:	7202      	strb	r2, [r0, #8]
   d601a:	2300      	movs	r3, #0
   d601c:	2207      	movs	r2, #7
   d601e:	7103      	strb	r3, [r0, #4]
   d6020:	7242      	strb	r2, [r0, #9]
   d6022:	7443      	strb	r3, [r0, #17]
	clear();
   d6024:	f7ff ffe3 	bl	d5fee <_ZN12MCP79410Time5clearEv>
}
   d6028:	bd08      	pop	{r3, pc}
   d602a:	bf00      	nop
   d602c:	000dd6cc 	.word	0x000dd6cc

000d6030 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6030:	0903      	lsrs	r3, r0, #4
}
   d6032:	220a      	movs	r2, #10
   d6034:	f000 000f 	and.w	r0, r0, #15
   d6038:	fb02 0003 	mla	r0, r2, r3, r0
   d603c:	4770      	bx	lr

000d603e <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d603e:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d6040:	7a80      	ldrb	r0, [r0, #10]
   d6042:	f7ff fff5 	bl	d6030 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6046:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d604a:	bd08      	pop	{r3, pc}

000d604c <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d604c:	7ac0      	ldrb	r0, [r0, #11]
   d604e:	f000 001f 	and.w	r0, r0, #31
   d6052:	f7ff bfed 	b.w	d6030 <_ZN12MCP79410Time8bcdToIntEh>

000d6056 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6056:	7b00      	ldrb	r0, [r0, #12]
   d6058:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d605c:	f7ff bfe8 	b.w	d6030 <_ZN12MCP79410Time8bcdToIntEh>

000d6060 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d6060:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6062:	7b81      	ldrb	r1, [r0, #14]
   d6064:	064a      	lsls	r2, r1, #25
   d6066:	d50d      	bpl.n	d6084 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6068:	f001 001f 	and.w	r0, r1, #31
   d606c:	f7ff ffe0 	bl	d6030 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d6070:	068b      	lsls	r3, r1, #26
   d6072:	d503      	bpl.n	d607c <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d6074:	280c      	cmp	r0, #12
   d6076:	d00b      	beq.n	d6090 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d6078:	300c      	adds	r0, #12
   d607a:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d607c:	280c      	cmp	r0, #12
   d607e:	bf08      	it	eq
   d6080:	2000      	moveq	r0, #0
   d6082:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6084:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d6088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d608c:	f7ff bfd0 	b.w	d6030 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d6090:	bd08      	pop	{r3, pc}

000d6092 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d6092:	7bc0      	ldrb	r0, [r0, #15]
   d6094:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6098:	f7ff bfca 	b.w	d6030 <_ZN12MCP79410Time8bcdToIntEh>

000d609c <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d609c:	7c00      	ldrb	r0, [r0, #16]
   d609e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d60a2:	f7ff bfc5 	b.w	d6030 <_ZN12MCP79410Time8bcdToIntEh>

000d60a6 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d60a6:	b510      	push	{r4, lr}
   d60a8:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d60aa:	2224      	movs	r2, #36	; 0x24
   d60ac:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d60ae:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d60b0:	a801      	add	r0, sp, #4
   d60b2:	f003 feaa 	bl	d9e0a <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d60b6:	4620      	mov	r0, r4
   d60b8:	f7ff ffc1 	bl	d603e <_ZNK12MCP79410Time7getYearEv>
   d60bc:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d60c0:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d60c2:	4620      	mov	r0, r4
   d60c4:	f7ff ffc2 	bl	d604c <_ZNK12MCP79410Time8getMonthEv>
   d60c8:	3801      	subs	r0, #1
   d60ca:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d60cc:	4620      	mov	r0, r4
   d60ce:	f7ff ffc2 	bl	d6056 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d60d2:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d60d4:	4620      	mov	r0, r4
   d60d6:	f7ff ffc3 	bl	d6060 <_ZNK12MCP79410Time7getHourEv>
   d60da:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff ffd8 	bl	d6092 <_ZNK12MCP79410Time9getMinuteEv>
   d60e2:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d60e4:	4620      	mov	r0, r4
   d60e6:	f7ff ffd9 	bl	d609c <_ZNK12MCP79410Time9getSecondEv>
   d60ea:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d60ec:	a801      	add	r0, sp, #4
   d60ee:	f003 ff71 	bl	d9fd4 <mktime>
}
   d60f2:	b00a      	add	sp, #40	; 0x28
   d60f4:	bd10      	pop	{r4, pc}

000d60f6 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d60f6:	220a      	movs	r2, #10
   d60f8:	fb90 f3f2 	sdiv	r3, r0, r2
   d60fc:	fb93 f1f2 	sdiv	r1, r3, r2
   d6100:	fb02 3111 	mls	r1, r2, r1, r3
   d6104:	fb02 0313 	mls	r3, r2, r3, r0
   d6108:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d610c:	b2c0      	uxtb	r0, r0
   d610e:	4770      	bx	lr

000d6110 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d6110:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d6112:	b510      	push	{r4, lr}
   d6114:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6116:	fb91 f0f3 	sdiv	r0, r1, r3
   d611a:	fb00 1013 	mls	r0, r0, r3, r1
   d611e:	f7ff ffea 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d6122:	72a0      	strb	r0, [r4, #10]
   d6124:	bd10      	pop	{r4, pc}

000d6126 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d6126:	b510      	push	{r4, lr}
   d6128:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d612a:	4608      	mov	r0, r1
   d612c:	f7ff ffe3 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d6130:	72e0      	strb	r0, [r4, #11]
   d6132:	bd10      	pop	{r4, pc}

000d6134 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d6134:	b510      	push	{r4, lr}
   d6136:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d6138:	4608      	mov	r0, r1
   d613a:	f7ff ffdc 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d613e:	7b23      	ldrb	r3, [r4, #12]
   d6140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6144:	4318      	orrs	r0, r3
   d6146:	7320      	strb	r0, [r4, #12]
   d6148:	bd10      	pop	{r4, pc}

000d614a <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d614a:	b510      	push	{r4, lr}
   d614c:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d614e:	1c48      	adds	r0, r1, #1
   d6150:	f7ff ffd1 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d6154:	7b63      	ldrb	r3, [r4, #13]
   d6156:	f023 0307 	bic.w	r3, r3, #7
   d615a:	4318      	orrs	r0, r3
   d615c:	7360      	strb	r0, [r4, #13]
   d615e:	bd10      	pop	{r4, pc}

000d6160 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d6160:	b510      	push	{r4, lr}
   d6162:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6164:	4608      	mov	r0, r1
   d6166:	f7ff ffc6 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d616a:	73a0      	strb	r0, [r4, #14]
   d616c:	bd10      	pop	{r4, pc}

000d616e <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d616e:	b510      	push	{r4, lr}
   d6170:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6172:	4608      	mov	r0, r1
   d6174:	f7ff ffbf 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d6178:	73e0      	strb	r0, [r4, #15]
   d617a:	bd10      	pop	{r4, pc}

000d617c <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d617c:	b510      	push	{r4, lr}
   d617e:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d6180:	4608      	mov	r0, r1
   d6182:	f7ff ffb8 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d6186:	7c23      	ldrb	r3, [r4, #16]
   d6188:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d618c:	4318      	orrs	r0, r3
   d618e:	7420      	strb	r0, [r4, #16]
   d6190:	bd10      	pop	{r4, pc}

000d6192 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d6192:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6194:	4604      	mov	r4, r0
   d6196:	a802      	add	r0, sp, #8
   d6198:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d619c:	f003 fc84 	bl	d9aa8 <gmtime>
   d61a0:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d61a2:	6941      	ldr	r1, [r0, #20]
   d61a4:	4620      	mov	r0, r4
   d61a6:	f7ff ffb3 	bl	d6110 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d61aa:	6929      	ldr	r1, [r5, #16]
   d61ac:	4620      	mov	r0, r4
   d61ae:	3101      	adds	r1, #1
   d61b0:	f7ff ffb9 	bl	d6126 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d61b4:	68e9      	ldr	r1, [r5, #12]
   d61b6:	4620      	mov	r0, r4
   d61b8:	f7ff ffbc 	bl	d6134 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d61bc:	69a9      	ldr	r1, [r5, #24]
   d61be:	4620      	mov	r0, r4
   d61c0:	f7ff ffc3 	bl	d614a <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d61c4:	68a9      	ldr	r1, [r5, #8]
   d61c6:	4620      	mov	r0, r4
   d61c8:	f7ff ffca 	bl	d6160 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d61cc:	6869      	ldr	r1, [r5, #4]
   d61ce:	4620      	mov	r0, r4
   d61d0:	f7ff ffcd 	bl	d616e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d61d4:	6829      	ldr	r1, [r5, #0]
   d61d6:	293b      	cmp	r1, #59	; 0x3b
   d61d8:	bfa8      	it	ge
   d61da:	213b      	movge	r1, #59	; 0x3b
   d61dc:	4620      	mov	r0, r4
   d61de:	f7ff ffcd 	bl	d617c <_ZN12MCP79410Time9setSecondEi>
}
   d61e2:	b003      	add	sp, #12
   d61e4:	bd30      	pop	{r4, r5, pc}

000d61e6 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d61e6:	b510      	push	{r4, lr}
   d61e8:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d61ea:	f7ff ffd2 	bl	d6192 <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d61ee:	7a63      	ldrb	r3, [r4, #9]
   d61f0:	7463      	strb	r3, [r4, #17]
   d61f2:	bd10      	pop	{r4, pc}

000d61f4 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d61f4:	4a08      	ldr	r2, [pc, #32]	; (d6218 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d61f6:	6002      	str	r2, [r0, #0]
   d61f8:	2200      	movs	r2, #0
   d61fa:	7202      	strb	r2, [r0, #8]
   d61fc:	7242      	strb	r2, [r0, #9]
   d61fe:	2201      	movs	r2, #1
   d6200:	7282      	strb	r2, [r0, #10]
   d6202:	4603      	mov	r3, r0
   d6204:	2203      	movs	r2, #3
   d6206:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6208:	4a04      	ldr	r2, [pc, #16]	; (d621c <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d620a:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d620c:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d620e:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6210:	4a03      	ldr	r2, [pc, #12]	; (d6220 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6212:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6214:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d6216:	4770      	bx	lr
   d6218:	000dd6dc 	.word	0x000dd6dc
   d621c:	000dd5ac 	.word	0x000dd5ac
   d6220:	000dd588 	.word	0x000dd588

000d6224 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6228:	4605      	mov	r5, r0
   d622a:	460f      	mov	r7, r1
   d622c:	4691      	mov	r9, r2
   d622e:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6230:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6234:	429c      	cmp	r4, r3
   d6236:	d230      	bcs.n	d629a <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6238:	4639      	mov	r1, r7
   d623a:	6868      	ldr	r0, [r5, #4]
   d623c:	f001 fb7e 	bl	d793c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6240:	eb09 0104 	add.w	r1, r9, r4
   d6244:	6868      	ldr	r0, [r5, #4]
   d6246:	f7ff fd2f 	bl	d5ca8 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d624a:	2100      	movs	r1, #0
   d624c:	6868      	ldr	r0, [r5, #4]
   d624e:	f001 fb7c 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6252:	4606      	mov	r6, r0
   d6254:	b9d8      	cbnz	r0, d628e <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6258:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d625a:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d625c:	2a20      	cmp	r2, #32
   d625e:	bf28      	it	cs
   d6260:	2220      	movcs	r2, #32
   d6262:	2301      	movs	r3, #1
   d6264:	b2d2      	uxtb	r2, r2
   d6266:	4639      	mov	r1, r7
   d6268:	f001 fb5a 	bl	d7920 <_ZN7TwoWire11requestFromEhhh>
   d626c:	eb0a 0804 	add.w	r8, sl, r4
   d6270:	4683      	mov	fp, r0
   d6272:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6274:	ebc8 0306 	rsb	r3, r8, r6
   d6278:	459b      	cmp	fp, r3
   d627a:	d906      	bls.n	d628a <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d627c:	6868      	ldr	r0, [r5, #4]
   d627e:	6803      	ldr	r3, [r0, #0]
   d6280:	695b      	ldr	r3, [r3, #20]
   d6282:	4798      	blx	r3
   d6284:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6288:	e7f4      	b.n	d6274 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d628a:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d628c:	e7d1      	b.n	d6232 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d628e:	4602      	mov	r2, r0
   d6290:	4904      	ldr	r1, [pc, #16]	; (d62a4 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6292:	4805      	ldr	r0, [pc, #20]	; (d62a8 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d6294:	f7ff fd0c 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6298:	e000      	b.n	d629c <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d629a:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d629c:	4630      	mov	r0, r6
   d629e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62a2:	bf00      	nop
   d62a4:	000dd626 	.word	0x000dd626
   d62a8:	2003e198 	.word	0x2003e198

000d62ac <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d62ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d62ae:	2301      	movs	r3, #1
   d62b0:	9300      	str	r3, [sp, #0]
   d62b2:	460a      	mov	r2, r1
   d62b4:	ab03      	add	r3, sp, #12
   d62b6:	216f      	movs	r1, #111	; 0x6f
   d62b8:	f7ff ffb4 	bl	d6224 <_ZNK8MCP7941010deviceReadEhhPhj>
   d62bc:	b910      	cbnz	r0, d62c4 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d62be:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d62c2:	e000      	b.n	d62c6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d62c4:	2000      	movs	r0, #0
	}
}
   d62c6:	b005      	add	sp, #20
   d62c8:	f85d fb04 	ldr.w	pc, [sp], #4

000d62cc <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d62cc:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d62ce:	2103      	movs	r1, #3
   d62d0:	f7ff ffec 	bl	d62ac <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d62d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d62d8:	bd08      	pop	{r3, pc}

000d62da <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d62da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d62dc:	461e      	mov	r6, r3
   d62de:	2b00      	cmp	r3, #0
   d62e0:	bf0c      	ite	eq
   d62e2:	2307      	moveq	r3, #7
   d62e4:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d62e6:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d62e8:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d62ea:	ab02      	add	r3, sp, #8
   d62ec:	460a      	mov	r2, r1
   d62ee:	216f      	movs	r1, #111	; 0x6f
   d62f0:	f7ff ff98 	bl	d6224 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d62f4:	4605      	mov	r5, r0
   d62f6:	b9d8      	cbnz	r0, d6330 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d62f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d62fc:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d62fe:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6302:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6304:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6308:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d630a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d630e:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6310:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6314:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6316:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d631a:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d631c:	b91e      	cbnz	r6, d6326 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d631e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6322:	72a3      	strb	r3, [r4, #10]
   d6324:	e004      	b.n	d6330 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6326:	f002 faa5 	bl	d8874 <_ZN9TimeClass4yearEv>
   d632a:	f7ff fee4 	bl	d60f6 <_ZN12MCP79410Time8intToBcdEi>
   d632e:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d6330:	4628      	mov	r0, r5
   d6332:	b004      	add	sp, #16
   d6334:	bd70      	pop	{r4, r5, r6, pc}

000d6336 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6336:	b538      	push	{r3, r4, r5, lr}
   d6338:	2300      	movs	r3, #0
   d633a:	460c      	mov	r4, r1
   d633c:	460a      	mov	r2, r1
   d633e:	4619      	mov	r1, r3
   d6340:	4605      	mov	r5, r0
   d6342:	f7ff ffca 	bl	d62da <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d6346:	b928      	cbnz	r0, d6354 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6348:	7aa3      	ldrb	r3, [r4, #10]
   d634a:	b11b      	cbz	r3, d6354 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d634c:	4628      	mov	r0, r5
   d634e:	f7ff ffbd 	bl	d62cc <_ZNK8MCP7941020getOscillatorRunningEv>
   d6352:	b900      	cbnz	r0, d6356 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d6354:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d6356:	bd38      	pop	{r3, r4, r5, pc}

000d6358 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6358:	b510      	push	{r4, lr}
   d635a:	b086      	sub	sp, #24
   d635c:	4604      	mov	r4, r0
	MCP79410Time time;
   d635e:	a801      	add	r0, sp, #4
   d6360:	f7ff fe50 	bl	d6004 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6364:	a901      	add	r1, sp, #4
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff ffe5 	bl	d6336 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d636c:	b110      	cbz	r0, d6374 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d636e:	a801      	add	r0, sp, #4
   d6370:	f7ff fe99 	bl	d60a6 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6374:	b006      	add	sp, #24
   d6376:	bd10      	pop	{r4, pc}

000d6378 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6378:	b530      	push	{r4, r5, lr}
   d637a:	4604      	mov	r4, r0
   d637c:	b085      	sub	sp, #20
	wire.begin();
   d637e:	6840      	ldr	r0, [r0, #4]
   d6380:	f001 fac8 	bl	d7914 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d6384:	f002 fa22 	bl	d87cc <_ZN9TimeClass7isValidEv>
   d6388:	b9c0      	cbnz	r0, d63bc <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d638a:	7ae3      	ldrb	r3, [r4, #11]
   d638c:	079b      	lsls	r3, r3, #30
   d638e:	d515      	bpl.n	d63bc <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6390:	4620      	mov	r0, r4
   d6392:	f7ff ffe1 	bl	d6358 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d6396:	4605      	mov	r5, r0
   d6398:	b180      	cbz	r0, d63bc <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d639a:	f002 f95b 	bl	d8654 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d639e:	4b09      	ldr	r3, [pc, #36]	; (d63c4 <_ZN8MCP794105setupEv+0x4c>)
   d63a0:	4909      	ldr	r1, [pc, #36]	; (d63c8 <_ZN8MCP794105setupEv+0x50>)
   d63a2:	681b      	ldr	r3, [r3, #0]
   d63a4:	462a      	mov	r2, r5
   d63a6:	4668      	mov	r0, sp
   d63a8:	f002 f9de 	bl	d8768 <_ZN9TimeClass6formatElPKc>
   d63ac:	4807      	ldr	r0, [pc, #28]	; (d63cc <_ZN8MCP794105setupEv+0x54>)
   d63ae:	9a00      	ldr	r2, [sp, #0]
   d63b0:	4907      	ldr	r1, [pc, #28]	; (d63d0 <_ZN8MCP794105setupEv+0x58>)
   d63b2:	f7ff fc7d 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
   d63b6:	4668      	mov	r0, sp
   d63b8:	f001 ff8b 	bl	d82d2 <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d63bc:	2301      	movs	r3, #1
   d63be:	7223      	strb	r3, [r4, #8]
}
   d63c0:	b005      	add	sp, #20
   d63c2:	bd30      	pop	{r4, r5, pc}
   d63c4:	2003df98 	.word	0x2003df98
   d63c8:	2003e484 	.word	0x2003e484
   d63cc:	2003e198 	.word	0x2003e198
   d63d0:	000dd640 	.word	0x000dd640

000d63d4 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d63d8:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63dc:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d63de:	6803      	ldr	r3, [r0, #0]
   d63e0:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63e2:	4604      	mov	r4, r0
   d63e4:	460d      	mov	r5, r1
   d63e6:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d63e8:	4798      	blx	r3
   d63ea:	4580      	cmp	r8, r0
   d63ec:	d80a      	bhi.n	d6404 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d63ee:	9600      	str	r6, [sp, #0]
   d63f0:	463b      	mov	r3, r7
   d63f2:	b2ea      	uxtb	r2, r5
   d63f4:	2157      	movs	r1, #87	; 0x57
   d63f6:	6860      	ldr	r0, [r4, #4]
   d63f8:	f7ff ff14 	bl	d6224 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d63fc:	fab0 f080 	clz	r0, r0
   d6400:	0940      	lsrs	r0, r0, #5
   d6402:	e000      	b.n	d6406 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6404:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d6406:	b002      	add	sp, #8
   d6408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d640c <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d640c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6410:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6414:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6416:	6803      	ldr	r3, [r0, #0]
   d6418:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d641a:	4605      	mov	r5, r0
   d641c:	460c      	mov	r4, r1
   d641e:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6420:	4798      	blx	r3
   d6422:	4580      	cmp	r8, r0
   d6424:	d80c      	bhi.n	d6440 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6426:	f104 0220 	add.w	r2, r4, #32
   d642a:	9600      	str	r6, [sp, #0]
   d642c:	463b      	mov	r3, r7
   d642e:	b2d2      	uxtb	r2, r2
   d6430:	216f      	movs	r1, #111	; 0x6f
   d6432:	6868      	ldr	r0, [r5, #4]
   d6434:	f7ff fef6 	bl	d6224 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6438:	fab0 f080 	clz	r0, r0
   d643c:	0940      	lsrs	r0, r0, #5
   d643e:	e000      	b.n	d6442 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6440:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6442:	b002      	add	sp, #8
   d6444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6448 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d644c:	4607      	mov	r7, r0
   d644e:	4689      	mov	r9, r1
   d6450:	4692      	mov	sl, r2
   d6452:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6454:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6458:	429c      	cmp	r4, r3
   d645a:	d228      	bcs.n	d64ae <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d645c:	4649      	mov	r1, r9
   d645e:	6878      	ldr	r0, [r7, #4]
   d6460:	f001 fa6c 	bl	d793c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6464:	eb0a 0104 	add.w	r1, sl, r4
   d6468:	6878      	ldr	r0, [r7, #4]
   d646a:	f7ff fc1d 	bl	d5ca8 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6470:	1b1e      	subs	r6, r3, r4
   d6472:	2e1f      	cmp	r6, #31
   d6474:	eb0b 0804 	add.w	r8, fp, r4
   d6478:	bf28      	it	cs
   d647a:	261f      	movcs	r6, #31
   d647c:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d647e:	6878      	ldr	r0, [r7, #4]
   d6480:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6484:	6802      	ldr	r2, [r0, #0]
   d6486:	6892      	ldr	r2, [r2, #8]
   d6488:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d648a:	ebc8 0205 	rsb	r2, r8, r5
   d648e:	42b2      	cmp	r2, r6
   d6490:	d3f5      	bcc.n	d647e <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d6492:	2101      	movs	r1, #1
   d6494:	6878      	ldr	r0, [r7, #4]
   d6496:	f001 fa58 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d649a:	4605      	mov	r5, r0
   d649c:	b128      	cbz	r0, d64aa <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d649e:	4602      	mov	r2, r0
   d64a0:	4905      	ldr	r1, [pc, #20]	; (d64b8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d64a2:	4806      	ldr	r0, [pc, #24]	; (d64bc <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d64a4:	f7ff fc04 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d64a8:	e002      	b.n	d64b0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d64aa:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d64ac:	e7d3      	b.n	d6456 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d64ae:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d64b0:	4628      	mov	r0, r5
   d64b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64b6:	bf00      	nop
   d64b8:	000dd655 	.word	0x000dd655
   d64bc:	2003e198 	.word	0x2003e198

000d64c0 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d64c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d64c2:	7c13      	ldrb	r3, [r2, #16]
   d64c4:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d64c8:	7bd3      	ldrb	r3, [r2, #15]
   d64ca:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d64ce:	7b93      	ldrb	r3, [r2, #14]
   d64d0:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d64d4:	7b53      	ldrb	r3, [r2, #13]
   d64d6:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d64da:	7b13      	ldrb	r3, [r2, #12]
   d64dc:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d64e0:	7ad3      	ldrb	r3, [r2, #11]
   d64e2:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d64e6:	7a93      	ldrb	r3, [r2, #10]
   d64e8:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d64ec:	2307      	movs	r3, #7
   d64ee:	9300      	str	r3, [sp, #0]
   d64f0:	460a      	mov	r2, r1
   d64f2:	ab02      	add	r3, sp, #8
   d64f4:	216f      	movs	r1, #111	; 0x6f
   d64f6:	f7ff ffa7 	bl	d6448 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d64fa:	b005      	add	sp, #20
   d64fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6500 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d6500:	b510      	push	{r4, lr}
   d6502:	b086      	sub	sp, #24
   d6504:	4604      	mov	r4, r0
	MCP79410Time time;
   d6506:	a801      	add	r0, sp, #4
   d6508:	f7ff fd7c 	bl	d6004 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d650c:	a801      	add	r0, sp, #4
   d650e:	f7ff fe40 	bl	d6192 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6512:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d6516:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6518:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d651c:	f88d 3014 	strb.w	r3, [sp, #20]
   d6520:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d6524:	b112      	cbz	r2, d652c <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6526:	f043 0308 	orr.w	r3, r3, #8
   d652a:	e001      	b.n	d6530 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d652c:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6530:	aa01      	add	r2, sp, #4
   d6532:	2100      	movs	r1, #0
   d6534:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6536:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d653a:	f7ff ffc1 	bl	d64c0 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d653e:	fab0 f080 	clz	r0, r0
   d6542:	0940      	lsrs	r0, r0, #5
   d6544:	b006      	add	sp, #24
   d6546:	bd10      	pop	{r4, pc}

000d6548 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d654a:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d654c:	f002 f93e 	bl	d87cc <_ZN9TimeClass7isValidEv>
   d6550:	4604      	mov	r4, r0
   d6552:	b1b8      	cbz	r0, d6584 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d6554:	f002 f95b 	bl	d880e <_ZN9TimeClass3nowEv>
   d6558:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d655a:	4601      	mov	r1, r0
   d655c:	4630      	mov	r0, r6
   d655e:	f7ff ffcf 	bl	d6500 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6562:	4b0c      	ldr	r3, [pc, #48]	; (d6594 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d6564:	490c      	ldr	r1, [pc, #48]	; (d6598 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d6566:	681b      	ldr	r3, [r3, #0]
   d6568:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d656a:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d656c:	4668      	mov	r0, sp
   d656e:	f002 f8fb 	bl	d8768 <_ZN9TimeClass6formatElPKc>
   d6572:	9a00      	ldr	r2, [sp, #0]
   d6574:	4909      	ldr	r1, [pc, #36]	; (d659c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6576:	480a      	ldr	r0, [pc, #40]	; (d65a0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6578:	f7ff fb9a 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
   d657c:	4668      	mov	r0, sp
   d657e:	f001 fea8 	bl	d82d2 <_ZN6StringD1Ev>
   d6582:	e003      	b.n	d658c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d6584:	4907      	ldr	r1, [pc, #28]	; (d65a4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6586:	4806      	ldr	r0, [pc, #24]	; (d65a0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6588:	f7ff fb92 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d658c:	4620      	mov	r0, r4
   d658e:	b004      	add	sp, #16
   d6590:	bd70      	pop	{r4, r5, r6, pc}
   d6592:	bf00      	nop
   d6594:	2003df98 	.word	0x2003df98
   d6598:	2003e484 	.word	0x2003e484
   d659c:	000dd670 	.word	0x000dd670
   d65a0:	2003e198 	.word	0x2003e198
   d65a4:	000dd686 	.word	0x000dd686

000d65a8 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d65a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d65aa:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d65ac:	4604      	mov	r4, r0
	if (!timeSet) {
   d65ae:	b98d      	cbnz	r5, d65d4 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d65b0:	f002 f90c 	bl	d87cc <_ZN9TimeClass7isValidEv>
   d65b4:	b170      	cbz	r0, d65d4 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d65b6:	a802      	add	r0, sp, #8
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d65b8:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d65ba:	f840 5d04 	str.w	r5, [r0, #-4]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
   d65be:	f000 fbd3 	bl	d6d68 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d65c2:	b138      	cbz	r0, d65d4 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d65c4:	7ae3      	ldrb	r3, [r4, #11]
   d65c6:	07db      	lsls	r3, r3, #31
   d65c8:	d502      	bpl.n	d65d0 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7ff ffbc 	bl	d6548 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d65d0:	2301      	movs	r3, #1
   d65d2:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d65d4:	b003      	add	sp, #12
   d65d6:	bd30      	pop	{r4, r5, pc}

000d65d8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d65d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d65da:	ab04      	add	r3, sp, #16
   d65dc:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d65e0:	2201      	movs	r2, #1
   d65e2:	9200      	str	r2, [sp, #0]
   d65e4:	460a      	mov	r2, r1
   d65e6:	216f      	movs	r1, #111	; 0x6f
   d65e8:	f7ff ff2e 	bl	d6448 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d65ec:	b005      	add	sp, #20
   d65ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d65f2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d65f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65f4:	4614      	mov	r4, r2
   d65f6:	4605      	mov	r5, r0
   d65f8:	460e      	mov	r6, r1
   d65fa:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d65fc:	f7ff fe56 	bl	d62ac <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d6600:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d6602:	ea40 0207 	orr.w	r2, r0, r7
   d6606:	4631      	mov	r1, r6
   d6608:	4628      	mov	r0, r5
}
   d660a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d660e:	f7ff bfe3 	b.w	d65d8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d6612 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d6612:	b113      	cbz	r3, d661a <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d6614:	4613      	mov	r3, r2
   d6616:	22ff      	movs	r2, #255	; 0xff
   d6618:	e001      	b.n	d661e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d661a:	43d2      	mvns	r2, r2
   d661c:	b2d2      	uxtb	r2, r2
   d661e:	f7ff bfe8 	b.w	d65f2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d6622 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d6622:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d6624:	f04f 0300 	mov.w	r3, #0
   d6628:	f04f 0208 	mov.w	r2, #8
   d662c:	bf14      	ite	ne
   d662e:	2114      	movne	r1, #20
   d6630:	210d      	moveq	r1, #13
   d6632:	f7ff bfee 	b.w	d6612 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d6636 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6636:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d663a:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d663e:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6640:	6803      	ldr	r3, [r0, #0]
   d6642:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6644:	4605      	mov	r5, r0
   d6646:	460c      	mov	r4, r1
   d6648:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d664a:	4798      	blx	r3
   d664c:	4580      	cmp	r8, r0
   d664e:	d80c      	bhi.n	d666a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6650:	f104 0220 	add.w	r2, r4, #32
   d6654:	9600      	str	r6, [sp, #0]
   d6656:	463b      	mov	r3, r7
   d6658:	b2d2      	uxtb	r2, r2
   d665a:	216f      	movs	r1, #111	; 0x6f
   d665c:	6868      	ldr	r0, [r5, #4]
   d665e:	f7ff fef3 	bl	d6448 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d6662:	fab0 f080 	clz	r0, r0
   d6666:	0940      	lsrs	r0, r0, #5
   d6668:	e000      	b.n	d666c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d666a:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d666c:	b002      	add	sp, #8
   d666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6672 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6672:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6674:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6676:	b085      	sub	sp, #20
   d6678:	4606      	mov	r6, r0
   d667a:	460c      	mov	r4, r1
   d667c:	4617      	mov	r7, r2
   d667e:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d6680:	d901      	bls.n	d6686 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6682:	2000      	movs	r0, #0
   d6684:	e043      	b.n	d670e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d6686:	f7ff fe21 	bl	d62cc <_ZNK8MCP7941020getOscillatorRunningEv>
   d668a:	2800      	cmp	r0, #0
   d668c:	d0f9      	beq.n	d6682 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d668e:	4629      	mov	r1, r5
   d6690:	4630      	mov	r0, r6
   d6692:	f7ff ffc6 	bl	d6622 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d6696:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6698:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d669a:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d669e:	7be3      	ldrb	r3, [r4, #15]
   d66a0:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d66a4:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d66a8:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d66aa:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d66ac:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d66b0:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d66b4:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d66b6:	b117      	cbz	r7, d66be <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d66b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d66bc:	e001      	b.n	d66c2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d66be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d66c2:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d66c6:	7c63      	ldrb	r3, [r4, #17]
   d66c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d66cc:	011b      	lsls	r3, r3, #4
   d66ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d66d2:	4313      	orrs	r3, r2
   d66d4:	2d00      	cmp	r5, #0
   d66d6:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d66da:	f04f 0306 	mov.w	r3, #6
   d66de:	9300      	str	r3, [sp, #0]
   d66e0:	bf08      	it	eq
   d66e2:	220a      	moveq	r2, #10
   d66e4:	ab02      	add	r3, sp, #8
   d66e6:	bf18      	it	ne
   d66e8:	2211      	movne	r2, #17
   d66ea:	216f      	movs	r1, #111	; 0x6f
   d66ec:	4630      	mov	r0, r6
   d66ee:	f7ff feab 	bl	d6448 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d66f2:	4604      	mov	r4, r0
   d66f4:	b940      	cbnz	r0, d6708 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d66f6:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d66f8:	bf0c      	ite	eq
   d66fa:	2310      	moveq	r3, #16
   d66fc:	2320      	movne	r3, #32
   d66fe:	22ff      	movs	r2, #255	; 0xff
   d6700:	2107      	movs	r1, #7
   d6702:	4630      	mov	r0, r6
   d6704:	f7ff ff75 	bl	d65f2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d6708:	fab4 f084 	clz	r0, r4
   d670c:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d670e:	b005      	add	sp, #20
   d6710:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6712 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6712:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6714:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6716:	b087      	sub	sp, #28
   d6718:	4606      	mov	r6, r0
   d671a:	460c      	mov	r4, r1
   d671c:	4617      	mov	r7, r2
   d671e:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6720:	d901      	bls.n	d6726 <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6722:	2000      	movs	r0, #0
   d6724:	e010      	b.n	d6748 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d6726:	f7ff fe17 	bl	d6358 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d672a:	2800      	cmp	r0, #0
   d672c:	d0f9      	beq.n	d6722 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d672e:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d6730:	a801      	add	r0, sp, #4
   d6732:	f7ff fc67 	bl	d6004 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d6736:	a801      	add	r0, sp, #4
   d6738:	f7ff fd55 	bl	d61e6 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d673c:	462b      	mov	r3, r5
   d673e:	463a      	mov	r2, r7
   d6740:	a901      	add	r1, sp, #4
   d6742:	4630      	mov	r0, r6
   d6744:	f7ff ff95 	bl	d6672 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d6748:	b007      	add	sp, #28
   d674a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d674c <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d674c:	b538      	push	{r3, r4, r5, lr}
   d674e:	4605      	mov	r5, r0
   d6750:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6752:	2157      	movs	r1, #87	; 0x57
   d6754:	6868      	ldr	r0, [r5, #4]
   d6756:	f001 f8f1 	bl	d793c <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d675a:	2101      	movs	r1, #1
   d675c:	6868      	ldr	r0, [r5, #4]
   d675e:	f001 f8f4 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6762:	b108      	cbz	r0, d6768 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d6764:	3c01      	subs	r4, #1
   d6766:	d1f4      	bne.n	d6752 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d6768:	bd38      	pop	{r3, r4, r5, pc}
	...

000d676c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6770:	4605      	mov	r5, r0
   d6772:	18d7      	adds	r7, r2, r3
   d6774:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d6776:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d677a:	42bc      	cmp	r4, r7
   d677c:	d01e      	beq.n	d67bc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d677e:	2157      	movs	r1, #87	; 0x57
   d6780:	6868      	ldr	r0, [r5, #4]
   d6782:	f001 f8db 	bl	d793c <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6786:	eb08 0104 	add.w	r1, r8, r4
   d678a:	6868      	ldr	r0, [r5, #4]
   d678c:	f7ff fa8c 	bl	d5ca8 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6790:	6868      	ldr	r0, [r5, #4]
   d6792:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6796:	6803      	ldr	r3, [r0, #0]
   d6798:	689b      	ldr	r3, [r3, #8]
   d679a:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d679c:	2101      	movs	r1, #1
   d679e:	6868      	ldr	r0, [r5, #4]
   d67a0:	f001 f8d3 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d67a4:	4606      	mov	r6, r0
   d67a6:	b128      	cbz	r0, d67b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d67a8:	4602      	mov	r2, r0
   d67aa:	4906      	ldr	r1, [pc, #24]	; (d67c4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d67ac:	4806      	ldr	r0, [pc, #24]	; (d67c8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d67ae:	f7ff fa7f 	bl	d5cb0 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d67b2:	e004      	b.n	d67be <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d67b4:	4628      	mov	r0, r5
   d67b6:	f7ff ffc9 	bl	d674c <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d67ba:	e7de      	b.n	d677a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d67bc:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d67be:	4630      	mov	r0, r6
   d67c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67c4:	000dd69b 	.word	0x000dd69b
   d67c8:	2003e198 	.word	0x2003e198

000d67cc <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d67d0:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67d4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d67d6:	6803      	ldr	r3, [r0, #0]
   d67d8:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67da:	4604      	mov	r4, r0
   d67dc:	460d      	mov	r5, r1
   d67de:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d67e0:	4798      	blx	r3
   d67e2:	4580      	cmp	r8, r0
   d67e4:	d80a      	bhi.n	d67fc <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d67e6:	4633      	mov	r3, r6
   d67e8:	463a      	mov	r2, r7
   d67ea:	b2e9      	uxtb	r1, r5
   d67ec:	6860      	ldr	r0, [r4, #4]
   d67ee:	f7ff ffbd 	bl	d676c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d67f2:	fab0 f080 	clz	r0, r0
   d67f6:	0940      	lsrs	r0, r0, #5
   d67f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d67fc:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d67fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6804 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d6804:	b508      	push	{r3, lr}
   d6806:	f000 f891 	bl	d692c <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d680c:	4a02      	ldr	r2, [pc, #8]	; (d6818 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d680e:	601a      	str	r2, [r3, #0]
   d6810:	bd08      	pop	{r3, pc}
   d6812:	bf00      	nop
   d6814:	2003e198 	.word	0x2003e198
   d6818:	000dd6bc 	.word	0x000dd6bc

000d681c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <cellular_signal+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	00030274 	.word	0x00030274

000d682c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <cellular_command+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	00030274 	.word	0x00030274

000d683c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <os_thread_is_current+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	689b      	ldr	r3, [r3, #8]
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	00030248 	.word	0x00030248

000d684c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <os_thread_join+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	691b      	ldr	r3, [r3, #16]
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	00030248 	.word	0x00030248

000d685c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <os_thread_cleanup+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	695b      	ldr	r3, [r3, #20]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	00030248 	.word	0x00030248

000d686c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <os_mutex_create+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	00030248 	.word	0x00030248

000d687c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <os_mutex_recursive_create+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	00030248 	.word	0x00030248

000d688c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <HAL_Feature_Set+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	00030234 	.word	0x00030234

000d689c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <HAL_Core_System_Reset_Ex+0xc>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d68a4:	9301      	str	r3, [sp, #4]
   d68a6:	bd08      	pop	{r3, pc}
   d68a8:	00030234 	.word	0x00030234

000d68ac <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d68ac:	b508      	push	{r3, lr}
   d68ae:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d68b0:	681b      	ldr	r3, [r3, #0]
   d68b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	bd08      	pop	{r3, pc}
   d68b8:	00030234 	.word	0x00030234

000d68bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d68bc:	b508      	push	{r3, lr}
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <HAL_RNG_GetRandomNumber+0xc>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	685b      	ldr	r3, [r3, #4]
   d68c4:	9301      	str	r3, [sp, #4]
   d68c6:	bd08      	pop	{r3, pc}
   d68c8:	00030218 	.word	0x00030218

000d68cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <HAL_Delay_Microseconds+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	68db      	ldr	r3, [r3, #12]
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	00030218 	.word	0x00030218

000d68dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	695b      	ldr	r3, [r3, #20]
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	00030218 	.word	0x00030218

000d68ec <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <HAL_RTC_Get_UnixTime+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	69db      	ldr	r3, [r3, #28]
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	00030218 	.word	0x00030218

000d68fc <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <HAL_RTC_Set_UnixTime+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	6a1b      	ldr	r3, [r3, #32]
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	00030218 	.word	0x00030218

000d690c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <HAL_RTC_Time_Is_Valid+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	00030218 	.word	0x00030218

000d691c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <hal_timer_millis+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030218 	.word	0x00030218

000d692c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <HAL_Pin_Map+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	681b      	ldr	r3, [r3, #0]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	0003022c 	.word	0x0003022c

000d693c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <HAL_Validate_Pin_Function+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	685b      	ldr	r3, [r3, #4]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	0003022c 	.word	0x0003022c

000d694c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <HAL_Pin_Mode+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	689b      	ldr	r3, [r3, #8]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	0003022c 	.word	0x0003022c

000d695c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <HAL_Get_Pin_Mode+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	68db      	ldr	r3, [r3, #12]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	0003022c 	.word	0x0003022c

000d696c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <HAL_GPIO_Write+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	691b      	ldr	r3, [r3, #16]
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	0003022c 	.word	0x0003022c

000d697c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <HAL_GPIO_Read+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	695b      	ldr	r3, [r3, #20]
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	0003022c 	.word	0x0003022c

000d698c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <HAL_Interrupts_Attach+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	699b      	ldr	r3, [r3, #24]
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	0003022c 	.word	0x0003022c

000d699c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <HAL_Interrupts_Detach+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	69db      	ldr	r3, [r3, #28]
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	0003022c 	.word	0x0003022c

000d69ac <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <HAL_ADC_Read+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	0003022c 	.word	0x0003022c

000d69bc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <HAL_I2C_Begin+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	68db      	ldr	r3, [r3, #12]
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030228 	.word	0x00030228

000d69cc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <HAL_I2C_Request_Data+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	695b      	ldr	r3, [r3, #20]
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030228 	.word	0x00030228

000d69dc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <HAL_I2C_Begin_Transmission+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	699b      	ldr	r3, [r3, #24]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030228 	.word	0x00030228

000d69ec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <HAL_I2C_End_Transmission+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	69db      	ldr	r3, [r3, #28]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030228 	.word	0x00030228

000d69fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <HAL_I2C_Write_Data+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	6a1b      	ldr	r3, [r3, #32]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030228 	.word	0x00030228

000d6a0c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <HAL_I2C_Available_Data+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030228 	.word	0x00030228

000d6a1c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <HAL_I2C_Read_Data+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030228 	.word	0x00030228

000d6a2c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <HAL_I2C_Peek_Data+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030228 	.word	0x00030228

000d6a3c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <HAL_I2C_Flush_Data+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030228 	.word	0x00030228

000d6a4c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <HAL_I2C_Is_Enabled+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	00030228 	.word	0x00030228

000d6a5c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <HAL_I2C_Init+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	00030228 	.word	0x00030228

000d6a6c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <HAL_I2C_Acquire+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030228 	.word	0x00030228

000d6a7c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <HAL_I2C_Release+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	00030228 	.word	0x00030228

000d6a8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <inet_inet_ntop+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	695b      	ldr	r3, [r3, #20]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	00030264 	.word	0x00030264

000d6a9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <netdb_freeaddrinfo+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	689b      	ldr	r3, [r3, #8]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	00030268 	.word	0x00030268

000d6aac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <netdb_getaddrinfo+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	68db      	ldr	r3, [r3, #12]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	00030268 	.word	0x00030268

000d6abc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <HAL_SPI_Init+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	69db      	ldr	r3, [r3, #28]
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00030230 	.word	0x00030230

000d6acc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <HAL_SPI_Is_Enabled+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6a1b      	ldr	r3, [r3, #32]
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	00030230 	.word	0x00030230

000d6adc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <HAL_USART_Init+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	681b      	ldr	r3, [r3, #0]
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	0003023c 	.word	0x0003023c

000d6aec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <HAL_USART_Write_Data+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	68db      	ldr	r3, [r3, #12]
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	0003023c 	.word	0x0003023c

000d6afc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <HAL_USART_Available_Data+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	691b      	ldr	r3, [r3, #16]
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	0003023c 	.word	0x0003023c

000d6b0c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <HAL_USART_Read_Data+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	695b      	ldr	r3, [r3, #20]
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	0003023c 	.word	0x0003023c

000d6b1c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <HAL_USART_Peek_Data+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	699b      	ldr	r3, [r3, #24]
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	0003023c 	.word	0x0003023c

000d6b2c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <HAL_USART_Flush_Data+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	69db      	ldr	r3, [r3, #28]
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	0003023c 	.word	0x0003023c

000d6b3c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <HAL_USART_Is_Enabled+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	6a1b      	ldr	r3, [r3, #32]
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	0003023c 	.word	0x0003023c

000d6b4c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4b02      	ldr	r3, [pc, #8]	; (d6b58 <HAL_USART_Available_Data_For_Write+0xc>)
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b54:	9301      	str	r3, [sp, #4]
   d6b56:	bd08      	pop	{r3, pc}
   d6b58:	0003023c 	.word	0x0003023c

000d6b5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b5c:	b508      	push	{r3, lr}
   d6b5e:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <HAL_USB_USART_Init+0xc>)
   d6b60:	681b      	ldr	r3, [r3, #0]
   d6b62:	681b      	ldr	r3, [r3, #0]
   d6b64:	9301      	str	r3, [sp, #4]
   d6b66:	bd08      	pop	{r3, pc}
   d6b68:	0003024c 	.word	0x0003024c

000d6b6c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b6c:	b508      	push	{r3, lr}
   d6b6e:	4b02      	ldr	r3, [pc, #8]	; (d6b78 <HAL_USB_USART_Begin+0xc>)
   d6b70:	681b      	ldr	r3, [r3, #0]
   d6b72:	685b      	ldr	r3, [r3, #4]
   d6b74:	9301      	str	r3, [sp, #4]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	0003024c 	.word	0x0003024c

000d6b7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <HAL_USB_USART_Available_Data+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	691b      	ldr	r3, [r3, #16]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	0003024c 	.word	0x0003024c

000d6b8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	695b      	ldr	r3, [r3, #20]
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	0003024c 	.word	0x0003024c

000d6b9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <HAL_USB_USART_Receive_Data+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	699b      	ldr	r3, [r3, #24]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	0003024c 	.word	0x0003024c

000d6bac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <HAL_USB_USART_Send_Data+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	69db      	ldr	r3, [r3, #28]
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	0003024c 	.word	0x0003024c

000d6bbc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <HAL_USB_USART_Flush_Data+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	6a1b      	ldr	r3, [r3, #32]
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	0003024c 	.word	0x0003024c

000d6bcc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <panic_+0xc>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	bd08      	pop	{r3, pc}
   d6bd8:	00030260 	.word	0x00030260

000d6bdc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6bdc:	b508      	push	{r3, lr}
   d6bde:	4b02      	ldr	r3, [pc, #8]	; (d6be8 <log_message_v+0xc>)
   d6be0:	681b      	ldr	r3, [r3, #0]
   d6be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6be4:	9301      	str	r3, [sp, #4]
   d6be6:	bd08      	pop	{r3, pc}
   d6be8:	00030260 	.word	0x00030260

000d6bec <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6bec:	b508      	push	{r3, lr}
   d6bee:	4b02      	ldr	r3, [pc, #8]	; (d6bf8 <system_mode+0xc>)
   d6bf0:	681b      	ldr	r3, [r3, #0]
   d6bf2:	681b      	ldr	r3, [r3, #0]
   d6bf4:	9301      	str	r3, [sp, #4]
   d6bf6:	bd08      	pop	{r3, pc}
   d6bf8:	00030220 	.word	0x00030220

000d6bfc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <set_system_mode+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	685b      	ldr	r3, [r3, #4]
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030220 	.word	0x00030220

000d6c0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <system_delay_ms+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	695b      	ldr	r3, [r3, #20]
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030220 	.word	0x00030220

000d6c1c <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <system_sleep+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	699b      	ldr	r3, [r3, #24]
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030220 	.word	0x00030220

000d6c2c <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b02      	ldr	r3, [pc, #8]	; (d6c38 <system_thread_set_state+0xc>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	bd08      	pop	{r3, pc}
   d6c38:	00030220 	.word	0x00030220

000d6c3c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6c3c:	b508      	push	{r3, lr}
   d6c3e:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <application_thread_current+0xc>)
   d6c40:	681b      	ldr	r3, [r3, #0]
   d6c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6c44:	9301      	str	r3, [sp, #4]
   d6c46:	bd08      	pop	{r3, pc}
   d6c48:	00030220 	.word	0x00030220

000d6c4c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6c4c:	b508      	push	{r3, lr}
   d6c4e:	4b02      	ldr	r3, [pc, #8]	; (d6c58 <application_thread_invoke+0xc>)
   d6c50:	681b      	ldr	r3, [r3, #0]
   d6c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	bd08      	pop	{r3, pc}
   d6c58:	00030220 	.word	0x00030220

000d6c5c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <system_thread_get_state+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	00030220 	.word	0x00030220

000d6c6c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <system_notify_time_changed+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	00030220 	.word	0x00030220

000d6c7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b03      	ldr	r3, [pc, #12]	; (d6c8c <system_ctrl_set_app_request_handler+0x10>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c86:	9301      	str	r3, [sp, #4]
   d6c88:	bd08      	pop	{r3, pc}
   d6c8a:	0000      	.short	0x0000
   d6c8c:	00030220 	.word	0x00030220

000d6c90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b03      	ldr	r3, [pc, #12]	; (d6ca0 <system_ctrl_set_result+0x10>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6c9a:	9301      	str	r3, [sp, #4]
   d6c9c:	bd08      	pop	{r3, pc}
   d6c9e:	0000      	.short	0x0000
   d6ca0:	00030220 	.word	0x00030220

000d6ca4 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b03      	ldr	r3, [pc, #12]	; (d6cb4 <system_sleep_pins+0x10>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d6cae:	9301      	str	r3, [sp, #4]
   d6cb0:	bd08      	pop	{r3, pc}
   d6cb2:	0000      	.short	0x0000
   d6cb4:	00030220 	.word	0x00030220

000d6cb8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <spark_variable+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	681b      	ldr	r3, [r3, #0]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030244 	.word	0x00030244

000d6cc8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <spark_function+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	685b      	ldr	r3, [r3, #4]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030244 	.word	0x00030244

000d6cd8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <spark_process+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	689b      	ldr	r3, [r3, #8]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	00030244 	.word	0x00030244

000d6ce8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <spark_cloud_flag_connect+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	68db      	ldr	r3, [r3, #12]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	00030244 	.word	0x00030244

000d6cf8 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <spark_cloud_flag_disconnect+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	691b      	ldr	r3, [r3, #16]
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	00030244 	.word	0x00030244

000d6d08 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <spark_cloud_flag_connected+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	695b      	ldr	r3, [r3, #20]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030244 	.word	0x00030244

000d6d18 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <spark_deviceID+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	69db      	ldr	r3, [r3, #28]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	00030244 	.word	0x00030244

000d6d28 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <spark_send_event+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	6a1b      	ldr	r3, [r3, #32]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	00030244 	.word	0x00030244

000d6d38 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <spark_subscribe+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	00030244 	.word	0x00030244

000d6d48 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <spark_sync_time+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	00030244 	.word	0x00030244

000d6d58 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <spark_sync_time_pending+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	00030244 	.word	0x00030244

000d6d68 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <spark_sync_time_last+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	00030244 	.word	0x00030244

000d6d78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	00030244 	.word	0x00030244

000d6d88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <network_connect+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	685b      	ldr	r3, [r3, #4]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030240 	.word	0x00030240

000d6d98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <network_connecting+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	689b      	ldr	r3, [r3, #8]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030240 	.word	0x00030240

000d6da8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <network_disconnect+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	68db      	ldr	r3, [r3, #12]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030240 	.word	0x00030240

000d6db8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <network_ready+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	691b      	ldr	r3, [r3, #16]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030240 	.word	0x00030240

000d6dc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <network_on+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	695b      	ldr	r3, [r3, #20]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030240 	.word	0x00030240

000d6dd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <network_off+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	699b      	ldr	r3, [r3, #24]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030240 	.word	0x00030240

000d6de8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <network_listen+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	69db      	ldr	r3, [r3, #28]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030240 	.word	0x00030240

000d6df8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <network_listening+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6a1b      	ldr	r3, [r3, #32]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030240 	.word	0x00030240

000d6e08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <network_set_listen_timeout+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030240 	.word	0x00030240

000d6e18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <network_get_listen_timeout+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030240 	.word	0x00030240

000d6e28 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <malloc+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	681b      	ldr	r3, [r3, #0]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	0003021c 	.word	0x0003021c

000d6e38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <free+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	685b      	ldr	r3, [r3, #4]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	0003021c 	.word	0x0003021c

000d6e48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <realloc+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	689b      	ldr	r3, [r3, #8]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	0003021c 	.word	0x0003021c

000d6e58 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <siprintf+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	691b      	ldr	r3, [r3, #16]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	0003021c 	.word	0x0003021c

000d6e68 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <siscanf+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	699b      	ldr	r3, [r3, #24]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	0003021c 	.word	0x0003021c

000d6e78 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <snprintf+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	69db      	ldr	r3, [r3, #28]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	0003021c 	.word	0x0003021c

000d6e88 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <sniprintf+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6a1b      	ldr	r3, [r3, #32]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	0003021c 	.word	0x0003021c

000d6e98 <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <abort+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	0003021c 	.word	0x0003021c

000d6ea8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <_malloc_r+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	0003021c 	.word	0x0003021c

000d6eb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6eb8:	2100      	movs	r1, #0
   d6eba:	f7ff bea7 	b.w	d6c0c <system_delay_ms>

000d6ebe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6ebe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ec0:	6883      	ldr	r3, [r0, #8]
   d6ec2:	4604      	mov	r4, r0
   d6ec4:	b90b      	cbnz	r3, d6eca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6ec6:	f001 ff56 	bl	d8d76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6eca:	68c3      	ldr	r3, [r0, #12]
   d6ecc:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6ece:	68a3      	ldr	r3, [r4, #8]
   d6ed0:	b11b      	cbz	r3, d6eda <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ed2:	2203      	movs	r2, #3
   d6ed4:	4621      	mov	r1, r4
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6eda:	4620      	mov	r0, r4
   d6edc:	2110      	movs	r1, #16
}
   d6ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6ee2:	f001 bf46 	b.w	d8d72 <_ZdlPvj>

000d6ee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6ee6:	680b      	ldr	r3, [r1, #0]
   d6ee8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6eea:	b113      	cbz	r3, d6ef2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6eec:	685a      	ldr	r2, [r3, #4]
   d6eee:	3201      	adds	r2, #1
   d6ef0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6ef2:	4770      	bx	lr

000d6ef4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ef4:	4802      	ldr	r0, [pc, #8]	; (d6f00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6ef6:	2300      	movs	r3, #0
   d6ef8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6efa:	f7ff bcbf 	b.w	d687c <os_mutex_recursive_create>
   d6efe:	bf00      	nop
   d6f00:	2003e19c 	.word	0x2003e19c

000d6f04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6f04:	2200      	movs	r2, #0
   d6f06:	4611      	mov	r1, r2
   d6f08:	6840      	ldr	r0, [r0, #4]
   d6f0a:	f7ff bf55 	b.w	d6db8 <network_ready>

000d6f0e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f0e:	2200      	movs	r2, #0
   d6f10:	4611      	mov	r1, r2
   d6f12:	6840      	ldr	r0, [r0, #4]
   d6f14:	f7ff bf70 	b.w	d6df8 <network_listening>

000d6f18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f18:	2200      	movs	r2, #0
   d6f1a:	4611      	mov	r1, r2
   d6f1c:	6840      	ldr	r0, [r0, #4]
   d6f1e:	f7ff bf7b 	b.w	d6e18 <network_get_listen_timeout>

000d6f22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f22:	2200      	movs	r2, #0
   d6f24:	6840      	ldr	r0, [r0, #4]
   d6f26:	f7ff bf6f 	b.w	d6e08 <network_set_listen_timeout>

000d6f2a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f2a:	2200      	movs	r2, #0
   d6f2c:	f081 0101 	eor.w	r1, r1, #1
   d6f30:	6840      	ldr	r0, [r0, #4]
   d6f32:	f7ff bf59 	b.w	d6de8 <network_listen>

000d6f36 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6f36:	2300      	movs	r3, #0
   d6f38:	461a      	mov	r2, r3
   d6f3a:	4619      	mov	r1, r3
   d6f3c:	6840      	ldr	r0, [r0, #4]
   d6f3e:	f7ff bf43 	b.w	d6dc8 <network_on>

000d6f42 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f42:	2200      	movs	r2, #0
   d6f44:	4611      	mov	r1, r2
   d6f46:	6840      	ldr	r0, [r0, #4]
   d6f48:	f7ff bf26 	b.w	d6d98 <network_connecting>

000d6f4c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f4c:	2200      	movs	r2, #0
   d6f4e:	2102      	movs	r1, #2
   d6f50:	6840      	ldr	r0, [r0, #4]
   d6f52:	f7ff bf29 	b.w	d6da8 <network_disconnect>

000d6f56 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f56:	2300      	movs	r3, #0
   d6f58:	461a      	mov	r2, r3
   d6f5a:	6840      	ldr	r0, [r0, #4]
   d6f5c:	f7ff bf14 	b.w	d6d88 <network_connect>

000d6f60 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6f60:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6f62:	4b1b      	ldr	r3, [pc, #108]	; (d6fd0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6f64:	6003      	str	r3, [r0, #0]
   d6f66:	2500      	movs	r5, #0
   d6f68:	460f      	mov	r7, r1
   d6f6a:	3328      	adds	r3, #40	; 0x28
   d6f6c:	2618      	movs	r6, #24
   d6f6e:	b089      	sub	sp, #36	; 0x24
   d6f70:	6043      	str	r3, [r0, #4]
   d6f72:	6085      	str	r5, [r0, #8]
   d6f74:	60c5      	str	r5, [r0, #12]
   d6f76:	4632      	mov	r2, r6
   d6f78:	4629      	mov	r1, r5
   d6f7a:	4604      	mov	r4, r0
   d6f7c:	3010      	adds	r0, #16
   d6f7e:	f002 ff44 	bl	d9e0a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6f82:	462a      	mov	r2, r5
   d6f84:	4629      	mov	r1, r5
   d6f86:	6878      	ldr	r0, [r7, #4]
   d6f88:	f7ff ff16 	bl	d6db8 <network_ready>
   d6f8c:	b908      	cbnz	r0, d6f92 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6f8e:	60a0      	str	r0, [r4, #8]
            return sig;
   d6f90:	e01b      	b.n	d6fca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6f92:	4629      	mov	r1, r5
   d6f94:	4632      	mov	r2, r6
   d6f96:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6f98:	9500      	str	r5, [sp, #0]
   d6f9a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6f9c:	f002 ff35 	bl	d9e0a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6fa0:	a902      	add	r1, sp, #8
   d6fa2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6fa4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6fa8:	f7ff fc38 	bl	d681c <cellular_signal>
   d6fac:	b110      	cbz	r0, d6fb4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6fae:	2301      	movs	r3, #1
   d6fb0:	60a3      	str	r3, [r4, #8]
            return sig;
   d6fb2:	e00a      	b.n	d6fca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6fb4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6fb6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6fb8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6fba:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6fbc:	b90b      	cbnz	r3, d6fc2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6fbe:	2302      	movs	r3, #2
   d6fc0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6fc2:	a902      	add	r1, sp, #8
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	f000 f8a1 	bl	d710c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6fca:	4620      	mov	r0, r4
   d6fcc:	b009      	add	sp, #36	; 0x24
   d6fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6fd0:	000dd720 	.word	0x000dd720

000d6fd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6fd4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6fd6:	4c08      	ldr	r4, [pc, #32]	; (d6ff8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6fd8:	2528      	movs	r5, #40	; 0x28
   d6fda:	462a      	mov	r2, r5
   d6fdc:	2100      	movs	r1, #0
   d6fde:	4620      	mov	r0, r4
   d6fe0:	f002 ff13 	bl	d9e0a <memset>
        cid = -1;
   d6fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6fe8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6fea:	4b04      	ldr	r3, [pc, #16]	; (d6ffc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6fec:	8025      	strh	r5, [r4, #0]
   d6fee:	2204      	movs	r2, #4
   d6ff0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6ff2:	4a03      	ldr	r2, [pc, #12]	; (d7000 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6ff4:	601a      	str	r2, [r3, #0]
   d6ff6:	bd38      	pop	{r3, r4, r5, pc}
   d6ff8:	2003e1a8 	.word	0x2003e1a8
   d6ffc:	2003e1a0 	.word	0x2003e1a0
   d7000:	000dd6ec 	.word	0x000dd6ec

000d7004 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7004:	4770      	bx	lr

000d7006 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7006:	7d00      	ldrb	r0, [r0, #20]
   d7008:	4770      	bx	lr
	...

000d700c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d700c:	7d03      	ldrb	r3, [r0, #20]
   d700e:	b11b      	cbz	r3, d7018 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d7010:	6983      	ldr	r3, [r0, #24]
   d7012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7016:	d102      	bne.n	d701e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d7018:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7030 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d701c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d701e:	ee07 3a90 	vmov	s15, r3
   d7022:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7034 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d7026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d702a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d702e:	4770      	bx	lr
   d7030:	00000000 	.word	0x00000000
   d7034:	42c80000 	.word	0x42c80000

000d7038 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7038:	7d03      	ldrb	r3, [r0, #20]
   d703a:	b11b      	cbz	r3, d7044 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d703c:	6a03      	ldr	r3, [r0, #32]
   d703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7042:	d102      	bne.n	d704a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7044:	ed9f 0a05 	vldr	s0, [pc, #20]	; d705c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7048:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d704a:	ee07 3a90 	vmov	s15, r3
   d704e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7060 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d7052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7056:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d705a:	4770      	bx	lr
   d705c:	00000000 	.word	0x00000000
   d7060:	42c80000 	.word	0x42c80000

000d7064 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d7064:	b570      	push	{r4, r5, r6, lr}
   d7066:	460d      	mov	r5, r1
   d7068:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d706a:	220a      	movs	r2, #10
   d706c:	6881      	ldr	r1, [r0, #8]
   d706e:	4628      	mov	r0, r5
   d7070:	f001 f8fa 	bl	d8268 <_ZN5Print5printEii>
    n += p.print(',');
   d7074:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7076:	4604      	mov	r4, r0
    n += p.print(',');
   d7078:	4628      	mov	r0, r5
   d707a:	f001 f881 	bl	d8180 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d707e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7080:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7082:	68f1      	ldr	r1, [r6, #12]
   d7084:	4628      	mov	r0, r5
   d7086:	f001 f8ef 	bl	d8268 <_ZN5Print5printEii>
    return n;
}
   d708a:	4420      	add	r0, r4
   d708c:	bd70      	pop	{r4, r5, r6, pc}

000d708e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d708e:	f1a0 0004 	sub.w	r0, r0, #4
   d7092:	f7ff bfe7 	b.w	d7064 <_ZNK14CellularSignal7printToER5Print>

000d7096 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7096:	b510      	push	{r4, lr}
   d7098:	2128      	movs	r1, #40	; 0x28
   d709a:	4604      	mov	r4, r0
   d709c:	f001 fe69 	bl	d8d72 <_ZdlPvj>
   d70a0:	4620      	mov	r0, r4
   d70a2:	bd10      	pop	{r4, pc}

000d70a4 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d70a4:	7d03      	ldrb	r3, [r0, #20]
   d70a6:	b17b      	cbz	r3, d70c8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d70a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d70aa:	2b00      	cmp	r3, #0
   d70ac:	db0c      	blt.n	d70c8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d70ae:	ee07 3a90 	vmov	s15, r3
   d70b2:	eddf 6a07 	vldr	s13, [pc, #28]	; d70d0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d70b6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d70d4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d70ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d70be:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d70c2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d70c6:	4770      	bx	lr
    }

    return -1.0f;
   d70c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d70cc:	4770      	bx	lr
   d70ce:	bf00      	nop
   d70d0:	477fff00 	.word	0x477fff00
   d70d4:	42c80000 	.word	0x42c80000

000d70d8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d70d8:	7d03      	ldrb	r3, [r0, #20]
   d70da:	b17b      	cbz	r3, d70fc <_ZNK14CellularSignal11getStrengthEv+0x24>
   d70dc:	69c3      	ldr	r3, [r0, #28]
   d70de:	2b00      	cmp	r3, #0
   d70e0:	db0c      	blt.n	d70fc <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d70e2:	ee07 3a90 	vmov	s15, r3
   d70e6:	eddf 6a07 	vldr	s13, [pc, #28]	; d7104 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d70ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7108 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d70ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d70f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d70f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d70fa:	4770      	bx	lr
    }

    return -1.0f;
   d70fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7100:	4770      	bx	lr
   d7102:	bf00      	nop
   d7104:	477fff00 	.word	0x477fff00
   d7108:	42c80000 	.word	0x42c80000

000d710c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d710c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d710e:	460d      	mov	r5, r1
   d7110:	f100 0410 	add.w	r4, r0, #16
   d7114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7118:	e895 0003 	ldmia.w	r5, {r0, r1}
   d711c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d7120:	2001      	movs	r0, #1
   d7122:	bd30      	pop	{r4, r5, pc}

000d7124 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7124:	4770      	bx	lr

000d7126 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7126:	2000      	movs	r0, #0
   d7128:	4770      	bx	lr

000d712a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d712a:	b510      	push	{r4, lr}
   d712c:	2110      	movs	r1, #16
   d712e:	4604      	mov	r4, r0
   d7130:	f001 fe1f 	bl	d8d72 <_ZdlPvj>
   d7134:	4620      	mov	r0, r4
   d7136:	bd10      	pop	{r4, pc}

000d7138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7138:	b508      	push	{r3, lr}
      { delete this; }
   d713a:	b108      	cbz	r0, d7140 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d713c:	f7ff fff5 	bl	d712a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7140:	bd08      	pop	{r3, pc}

000d7142 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7142:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7144:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7146:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7148:	b113      	cbz	r3, d7150 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d714a:	2203      	movs	r2, #3
   d714c:	4601      	mov	r1, r0
   d714e:	4798      	blx	r3
    }
   d7150:	4620      	mov	r0, r4
   d7152:	bd10      	pop	{r4, pc}

000d7154 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7154:	2200      	movs	r2, #0
   d7156:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7158:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d715a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d715e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7160:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7164:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7166:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7168:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d716a:	680c      	ldr	r4, [r1, #0]
   d716c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d716e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7170:	bd10      	pop	{r4, pc}

000d7172 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7172:	b510      	push	{r4, lr}
   d7174:	4604      	mov	r4, r0
    free((void*)msg_);
   d7176:	6800      	ldr	r0, [r0, #0]
   d7178:	f7ff fe5e 	bl	d6e38 <free>
}
   d717c:	4620      	mov	r0, r4
   d717e:	bd10      	pop	{r4, pc}

000d7180 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7180:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7182:	68c4      	ldr	r4, [r0, #12]
   d7184:	b1f4      	cbz	r4, d71c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7186:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7188:	2b02      	cmp	r3, #2
   d718a:	d103      	bne.n	d7194 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d718c:	f104 000c 	add.w	r0, r4, #12
   d7190:	f7ff ffef 	bl	d7172 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7194:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7196:	b135      	cbz	r5, d71a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7198:	4628      	mov	r0, r5
   d719a:	f7ff ffd2 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
   d719e:	2110      	movs	r1, #16
   d71a0:	4628      	mov	r0, r5
   d71a2:	f001 fde6 	bl	d8d72 <_ZdlPvj>
   d71a6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d71a8:	b135      	cbz	r5, d71b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d71aa:	4628      	mov	r0, r5
   d71ac:	f7ff ffc9 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
   d71b0:	2110      	movs	r1, #16
   d71b2:	4628      	mov	r0, r5
   d71b4:	f001 fddd 	bl	d8d72 <_ZdlPvj>
   d71b8:	4620      	mov	r0, r4
   d71ba:	2114      	movs	r1, #20
   d71bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d71c0:	f001 bdd7 	b.w	d8d72 <_ZdlPvj>
   d71c4:	bd38      	pop	{r3, r4, r5, pc}

000d71c6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d71c6:	b510      	push	{r4, lr}
   d71c8:	b088      	sub	sp, #32
   d71ca:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d71cc:	4668      	mov	r0, sp
   d71ce:	f001 f8c7 	bl	d8360 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d71d2:	4669      	mov	r1, sp
   d71d4:	a804      	add	r0, sp, #16
   d71d6:	f001 f8e5 	bl	d83a4 <_ZN6StringC1ERKS_>
   d71da:	a804      	add	r0, sp, #16
   d71dc:	47a0      	blx	r4
   d71de:	4604      	mov	r4, r0
   d71e0:	a804      	add	r0, sp, #16
   d71e2:	f001 f876 	bl	d82d2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d71e6:	4668      	mov	r0, sp
   d71e8:	f001 f873 	bl	d82d2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d71ec:	4620      	mov	r0, r4
   d71ee:	b008      	add	sp, #32
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d71f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d71f4:	2410      	movs	r4, #16
   d71f6:	b085      	sub	sp, #20
   d71f8:	4607      	mov	r7, r0
   d71fa:	460e      	mov	r6, r1
   d71fc:	4615      	mov	r5, r2
   d71fe:	2100      	movs	r1, #0
   d7200:	4622      	mov	r2, r4
   d7202:	4668      	mov	r0, sp
   d7204:	f002 fe01 	bl	d9e0a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7208:	2200      	movs	r2, #0
   d720a:	4669      	mov	r1, sp
   d720c:	4610      	mov	r0, r2
         size = sizeof(*this);
   d720e:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d7212:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d7214:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d7216:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7218:	f7ff fd56 	bl	d6cc8 <spark_function>
}
   d721c:	b005      	add	sp, #20
   d721e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7220 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7220:	b513      	push	{r0, r1, r4, lr}
   d7222:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7224:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7228:	2300      	movs	r3, #0
   d722a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d722c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d722e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7230:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7232:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7234:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7236:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7238:	f7fd fa1b 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d723c:	4620      	mov	r0, r4
   d723e:	b002      	add	sp, #8
   d7240:	bd10      	pop	{r4, pc}

000d7242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7244:	460c      	mov	r4, r1
   d7246:	ad02      	add	r5, sp, #8
   d7248:	f854 3b04 	ldr.w	r3, [r4], #4
   d724c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7250:	4606      	mov	r6, r0
   d7252:	460f      	mov	r7, r1
   d7254:	a801      	add	r0, sp, #4
   d7256:	4621      	mov	r1, r4
   d7258:	f7ff fe45 	bl	d6ee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d725c:	4629      	mov	r1, r5
   d725e:	4630      	mov	r0, r6
   d7260:	f7ff ffde 	bl	d7220 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7264:	a801      	add	r0, sp, #4
   d7266:	f7fd fa04 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d726a:	4620      	mov	r0, r4
   d726c:	f7fd fa01 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7270:	4638      	mov	r0, r7
   d7272:	2108      	movs	r1, #8
   d7274:	f001 fd7d 	bl	d8d72 <_ZdlPvj>
        return p;
    }
   d7278:	4630      	mov	r0, r6
   d727a:	b003      	add	sp, #12
   d727c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d727e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d727e:	b513      	push	{r0, r1, r4, lr}
   d7280:	460b      	mov	r3, r1
   d7282:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7284:	c803      	ldmia	r0, {r0, r1}
   d7286:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d728a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d728e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7292:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7296:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d729a:	b002      	add	sp, #8
   d729c:	bd10      	pop	{r4, pc}
	...

000d72a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d72a0:	b538      	push	{r3, r4, r5, lr}
   d72a2:	2300      	movs	r3, #0
   d72a4:	4604      	mov	r4, r0
   d72a6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d72a8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d72aa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d72ac:	f7fc fef5 	bl	d409a <_Znwj>
   d72b0:	b128      	cbz	r0, d72be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d72b2:	2301      	movs	r3, #1
   d72b4:	6043      	str	r3, [r0, #4]
   d72b6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d72b8:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d72ba:	6003      	str	r3, [r0, #0]
   d72bc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d72be:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d72c0:	4620      	mov	r0, r4
   d72c2:	bd38      	pop	{r3, r4, r5, pc}
   d72c4:	000dd754 	.word	0x000dd754

000d72c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72c8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d72ca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72cc:	b90a      	cbnz	r2, d72d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d72ce:	f001 fd52 	bl	d8d76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72d2:	68c3      	ldr	r3, [r0, #12]
    }
   d72d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72d8:	4718      	bx	r3

000d72da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d72da:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d72dc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d72de:	f100 0110 	add.w	r1, r0, #16
   d72e2:	f7ff fff1 	bl	d72c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d72e6:	bd08      	pop	{r3, pc}

000d72e8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72e8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d72ea:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72ec:	b90a      	cbnz	r2, d72f2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d72ee:	f001 fd42 	bl	d8d76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72f2:	68c3      	ldr	r3, [r0, #12]
    }
   d72f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72f8:	4718      	bx	r3

000d72fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d72fa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d72fc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d72fe:	f100 0110 	add.w	r1, r0, #16
   d7302:	f7ff fff1 	bl	d72e8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7306:	bd08      	pop	{r3, pc}

000d7308 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7308:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d730a:	2300      	movs	r3, #0
   d730c:	6083      	str	r3, [r0, #8]
   d730e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7310:	4604      	mov	r4, r0
   d7312:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7314:	b12b      	cbz	r3, d7322 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7316:	2202      	movs	r2, #2
   d7318:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d731a:	68eb      	ldr	r3, [r5, #12]
   d731c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d731e:	68ab      	ldr	r3, [r5, #8]
   d7320:	60a3      	str	r3, [r4, #8]
	}
    }
   d7322:	4620      	mov	r0, r4
   d7324:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7328:	b5f0      	push	{r4, r5, r6, r7, lr}
   d732a:	b089      	sub	sp, #36	; 0x24
   d732c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d732e:	4668      	mov	r0, sp
   d7330:	f7ff ff10 	bl	d7154 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7334:	2300      	movs	r3, #0
   d7336:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d733a:	f04f 0202 	mov.w	r2, #2
   d733e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7342:	2b00      	cmp	r3, #0
   d7344:	d103      	bne.n	d734e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7346:	e8c4 2f41 	strexb	r1, r2, [r4]
   d734a:	2900      	cmp	r1, #0
   d734c:	d1f7      	bne.n	d733e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d734e:	d002      	beq.n	d7356 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7350:	f88d 3008 	strb.w	r3, [sp, #8]
   d7354:	e063      	b.n	d741e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7356:	f114 050c 	adds.w	r5, r4, #12
   d735a:	d003      	beq.n	d7364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d735c:	4669      	mov	r1, sp
   d735e:	4628      	mov	r0, r5
   d7360:	f7ff fef8 	bl	d7154 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7364:	f3bf 8f5f 	dmb	sy
   d7368:	2301      	movs	r3, #1
   d736a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d736c:	2000      	movs	r0, #0
   d736e:	f104 0308 	add.w	r3, r4, #8
   d7372:	f3bf 8f5f 	dmb	sy
   d7376:	e853 6f00 	ldrex	r6, [r3]
   d737a:	e843 0200 	strex	r2, r0, [r3]
   d737e:	2a00      	cmp	r2, #0
   d7380:	d1f9      	bne.n	d7376 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7382:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7386:	2e00      	cmp	r6, #0
   d7388:	d049      	beq.n	d741e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d738a:	f7ff fc57 	bl	d6c3c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d738e:	b120      	cbz	r0, d739a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7390:	4629      	mov	r1, r5
   d7392:	4630      	mov	r0, r6
   d7394:	f7ff ff98 	bl	d72c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7398:	e03a      	b.n	d7410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d739a:	4631      	mov	r1, r6
   d739c:	a802      	add	r0, sp, #8
   d739e:	f7ff ffb3 	bl	d7308 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d73a2:	68e0      	ldr	r0, [r4, #12]
   d73a4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d73a8:	b108      	cbz	r0, d73ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d73aa:	f002 ffbf 	bl	da32c <strdup>
   d73ae:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d73b0:	2010      	movs	r0, #16
   d73b2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d73b6:	f7fc fe70 	bl	d409a <_Znwj>
   d73ba:	4605      	mov	r5, r0
   d73bc:	b1e8      	cbz	r0, d73fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d73be:	2700      	movs	r7, #0
   d73c0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73c2:	2018      	movs	r0, #24
   d73c4:	f7fc fe69 	bl	d409a <_Znwj>
   d73c8:	4604      	mov	r4, r0
   d73ca:	b188      	cbz	r0, d73f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d73cc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d73ce:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d73d0:	a802      	add	r0, sp, #8
   d73d2:	f7ff ff54 	bl	d727e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73d6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d73d8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d73da:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73dc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d73de:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d73e0:	a906      	add	r1, sp, #24
   d73e2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d73e4:	60e3      	str	r3, [r4, #12]
   d73e6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d73ea:	9205      	str	r2, [sp, #20]
   d73ec:	f7ff feb2 	bl	d7154 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d73f0:	4b0d      	ldr	r3, [pc, #52]	; (d7428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d73f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d73f4:	4b0d      	ldr	r3, [pc, #52]	; (d742c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d73f6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d73f8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d73fa:	a806      	add	r0, sp, #24
   d73fc:	f7ff feb9 	bl	d7172 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7400:	a802      	add	r0, sp, #8
   d7402:	f7ff fe9e 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7406:	2200      	movs	r2, #0
   d7408:	4629      	mov	r1, r5
   d740a:	4809      	ldr	r0, [pc, #36]	; (d7430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d740c:	f7ff fc1e 	bl	d6c4c <application_thread_invoke>
   d7410:	4630      	mov	r0, r6
   d7412:	f7ff fe96 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7416:	2110      	movs	r1, #16
   d7418:	4630      	mov	r0, r6
   d741a:	f001 fcaa 	bl	d8d72 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d741e:	4668      	mov	r0, sp
   d7420:	f7ff fea7 	bl	d7172 <_ZN8particle5ErrorD1Ev>
    }
   d7424:	b009      	add	sp, #36	; 0x24
   d7426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7428:	000d72db 	.word	0x000d72db
   d742c:	000d7551 	.word	0x000d7551
   d7430:	000d6ebf 	.word	0x000d6ebf

000d7434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7438:	b08b      	sub	sp, #44	; 0x2c
   d743a:	4606      	mov	r6, r0
   d743c:	460f      	mov	r7, r1
   d743e:	4690      	mov	r8, r2
   d7440:	4699      	mov	r9, r3
   d7442:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7446:	f7ff fc5f 	bl	d6d08 <spark_cloud_flag_connected>
   d744a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d744c:	4683      	mov	fp, r0
   d744e:	bb30      	cbnz	r0, d749e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7450:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7454:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7456:	a905      	add	r1, sp, #20
   d7458:	4628      	mov	r0, r5
   d745a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d745e:	f7ff fe79 	bl	d7154 <_ZN8particle5ErrorC1EOS0_>
   d7462:	2014      	movs	r0, #20
   d7464:	f7fc fe19 	bl	d409a <_Znwj>
   d7468:	4604      	mov	r4, r0
   d746a:	b158      	cbz	r0, d7484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d746c:	2302      	movs	r3, #2
   d746e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7470:	2301      	movs	r3, #1
   d7472:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7474:	f8c0 b004 	str.w	fp, [r0, #4]
   d7478:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d747c:	4629      	mov	r1, r5
   d747e:	300c      	adds	r0, #12
   d7480:	f7ff fe68 	bl	d7154 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7484:	4630      	mov	r0, r6
   d7486:	4621      	mov	r1, r4
   d7488:	f840 4b04 	str.w	r4, [r0], #4
   d748c:	f7ff ff08 	bl	d72a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7490:	4628      	mov	r0, r5
   d7492:	f7ff fe6e 	bl	d7172 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7496:	a805      	add	r0, sp, #20
   d7498:	f7ff fe6b 	bl	d7172 <_ZN8particle5ErrorD1Ev>
   d749c:	e052      	b.n	d7544 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d749e:	2400      	movs	r4, #0
   d74a0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d74a2:	2014      	movs	r0, #20
   d74a4:	606c      	str	r4, [r5, #4]
   d74a6:	60ac      	str	r4, [r5, #8]
   d74a8:	9307      	str	r3, [sp, #28]
   d74aa:	f7fc fdf6 	bl	d409a <_Znwj>
   d74ae:	4601      	mov	r1, r0
   d74b0:	b118      	cbz	r0, d74ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d74b2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74b4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d74b6:	6044      	str	r4, [r0, #4]
   d74b8:	6084      	str	r4, [r0, #8]
   d74ba:	a804      	add	r0, sp, #16
   d74bc:	9103      	str	r1, [sp, #12]
   d74be:	f7ff feef 	bl	d72a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d74c2:	4b22      	ldr	r3, [pc, #136]	; (d754c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d74c4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d74c6:	2008      	movs	r0, #8
   d74c8:	f7fc fde7 	bl	d409a <_Znwj>
   d74cc:	4604      	mov	r4, r0
   d74ce:	b128      	cbz	r0, d74dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d74d0:	9b03      	ldr	r3, [sp, #12]
   d74d2:	f840 3b04 	str.w	r3, [r0], #4
   d74d6:	a904      	add	r1, sp, #16
   d74d8:	f7ff fd05 	bl	d6ee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d74dc:	9500      	str	r5, [sp, #0]
   d74de:	fa5f f38a 	uxtb.w	r3, sl
   d74e2:	464a      	mov	r2, r9
   d74e4:	4641      	mov	r1, r8
   d74e6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d74e8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d74ea:	f7ff fc1d 	bl	d6d28 <spark_send_event>
   d74ee:	b920      	cbnz	r0, d74fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d74f0:	9b03      	ldr	r3, [sp, #12]
   d74f2:	785b      	ldrb	r3, [r3, #1]
   d74f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d74f8:	b183      	cbz	r3, d751c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d74fa:	9b03      	ldr	r3, [sp, #12]
   d74fc:	9305      	str	r3, [sp, #20]
   d74fe:	a904      	add	r1, sp, #16
   d7500:	a806      	add	r0, sp, #24
   d7502:	f7ff fcf0 	bl	d6ee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7506:	a905      	add	r1, sp, #20
   d7508:	4630      	mov	r0, r6
   d750a:	f7ff fe89 	bl	d7220 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d750e:	a806      	add	r0, sp, #24
   d7510:	f7fd f8af 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7514:	a804      	add	r0, sp, #16
   d7516:	f7fd f8ac 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d751a:	e013      	b.n	d7544 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d751c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7520:	a905      	add	r1, sp, #20
   d7522:	a803      	add	r0, sp, #12
   d7524:	9205      	str	r2, [sp, #20]
   d7526:	f8ad 3018 	strh.w	r3, [sp, #24]
   d752a:	f7ff fefd 	bl	d7328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d752e:	a805      	add	r0, sp, #20
   d7530:	f7ff fe1f 	bl	d7172 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7534:	a805      	add	r0, sp, #20
   d7536:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7538:	f7ff fe83 	bl	d7242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d753c:	a806      	add	r0, sp, #24
   d753e:	f7fd f898 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7542:	e7da      	b.n	d74fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d7544:	4630      	mov	r0, r6
   d7546:	b00b      	add	sp, #44	; 0x2c
   d7548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d754c:	000d76c1 	.word	0x000d76c1

000d7550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7550:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7554:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7556:	d006      	beq.n	d7566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7558:	2a03      	cmp	r2, #3
   d755a:	d017      	beq.n	d758c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d755c:	2a01      	cmp	r2, #1
   d755e:	d122      	bne.n	d75a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7560:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7562:	6003      	str	r3, [r0, #0]
	      break;
   d7564:	e01f      	b.n	d75a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7566:	2018      	movs	r0, #24
   d7568:	680e      	ldr	r6, [r1, #0]
   d756a:	f7fc fd96 	bl	d409a <_Znwj>
   d756e:	4605      	mov	r5, r0
   d7570:	b150      	cbz	r0, d7588 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7572:	4631      	mov	r1, r6
   d7574:	f7ff fec8 	bl	d7308 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7578:	6930      	ldr	r0, [r6, #16]
   d757a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d757e:	b108      	cbz	r0, d7584 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7580:	f002 fed4 	bl	da32c <strdup>
   d7584:	6128      	str	r0, [r5, #16]
   d7586:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7588:	6025      	str	r5, [r4, #0]
   d758a:	e00c      	b.n	d75a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d758c:	6804      	ldr	r4, [r0, #0]
   d758e:	b154      	cbz	r4, d75a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7590:	f104 0010 	add.w	r0, r4, #16
   d7594:	f7ff fded 	bl	d7172 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7598:	4620      	mov	r0, r4
   d759a:	f7ff fdd2 	bl	d7142 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d759e:	2118      	movs	r1, #24
   d75a0:	4620      	mov	r0, r4
   d75a2:	f001 fbe6 	bl	d8d72 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d75a6:	2000      	movs	r0, #0
   d75a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75aa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75aa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75ac:	2300      	movs	r3, #0
   d75ae:	6083      	str	r3, [r0, #8]
   d75b0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d75b2:	4604      	mov	r4, r0
   d75b4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d75b6:	b12b      	cbz	r3, d75c4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d75b8:	2202      	movs	r2, #2
   d75ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d75bc:	68eb      	ldr	r3, [r5, #12]
   d75be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d75c0:	68ab      	ldr	r3, [r5, #8]
   d75c2:	60a3      	str	r3, [r4, #8]
	}
    }
   d75c4:	4620      	mov	r0, r4
   d75c6:	bd38      	pop	{r3, r4, r5, pc}

000d75c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d75c8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d75ca:	b570      	push	{r4, r5, r6, lr}
   d75cc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d75ce:	d006      	beq.n	d75de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d75d0:	2a03      	cmp	r2, #3
   d75d2:	d011      	beq.n	d75f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d75d4:	2a01      	cmp	r2, #1
   d75d6:	d118      	bne.n	d760a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d75d8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d75da:	6003      	str	r3, [r0, #0]
	      break;
   d75dc:	e015      	b.n	d760a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d75de:	2014      	movs	r0, #20
   d75e0:	680e      	ldr	r6, [r1, #0]
   d75e2:	f7fc fd5a 	bl	d409a <_Znwj>
   d75e6:	4605      	mov	r5, r0
   d75e8:	b120      	cbz	r0, d75f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d75ea:	4631      	mov	r1, r6
   d75ec:	f7ff ffdd 	bl	d75aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d75f0:	7c33      	ldrb	r3, [r6, #16]
   d75f2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d75f4:	6025      	str	r5, [r4, #0]
   d75f6:	e008      	b.n	d760a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d75f8:	6804      	ldr	r4, [r0, #0]
   d75fa:	b134      	cbz	r4, d760a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75fc:	4620      	mov	r0, r4
   d75fe:	f7ff fda0 	bl	d7142 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7602:	2114      	movs	r1, #20
   d7604:	4620      	mov	r0, r4
   d7606:	f001 fbb4 	bl	d8d72 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d760a:	2000      	movs	r0, #0
   d760c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7610 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7610:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7612:	2300      	movs	r3, #0
   d7614:	b087      	sub	sp, #28
   d7616:	460c      	mov	r4, r1
   d7618:	f3bf 8f5f 	dmb	sy
   d761c:	e850 6f00 	ldrex	r6, [r0]
   d7620:	e840 3200 	strex	r2, r3, [r0]
   d7624:	2a00      	cmp	r2, #0
   d7626:	d1f9      	bne.n	d761c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7628:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d762c:	2e00      	cmp	r6, #0
   d762e:	d03f      	beq.n	d76b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7630:	4618      	mov	r0, r3
   d7632:	f7ff fb03 	bl	d6c3c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7636:	4607      	mov	r7, r0
   d7638:	b120      	cbz	r0, d7644 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d763a:	4621      	mov	r1, r4
   d763c:	4630      	mov	r0, r6
   d763e:	f7ff fe53 	bl	d72e8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7642:	e02e      	b.n	d76a2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7644:	4631      	mov	r1, r6
   d7646:	a801      	add	r0, sp, #4
   d7648:	f7ff ffaf 	bl	d75aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d764c:	7823      	ldrb	r3, [r4, #0]
   d764e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7652:	2010      	movs	r0, #16
   d7654:	f7fc fd21 	bl	d409a <_Znwj>
   d7658:	4605      	mov	r5, r0
   d765a:	b1d0      	cbz	r0, d7692 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d765c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d765e:	2014      	movs	r0, #20
   d7660:	f7fc fd1b 	bl	d409a <_Znwj>
   d7664:	4604      	mov	r4, r0
   d7666:	b178      	cbz	r0, d7688 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7668:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d766a:	4601      	mov	r1, r0
   d766c:	a801      	add	r0, sp, #4
   d766e:	f7ff fe06 	bl	d727e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7672:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7674:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7676:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7678:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d767a:	9203      	str	r2, [sp, #12]
   d767c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d767e:	60e3      	str	r3, [r4, #12]
   d7680:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7684:	9204      	str	r2, [sp, #16]
   d7686:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7688:	4b0a      	ldr	r3, [pc, #40]	; (d76b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d768a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d768c:	4b0a      	ldr	r3, [pc, #40]	; (d76b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d768e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7690:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7692:	a801      	add	r0, sp, #4
   d7694:	f7ff fd55 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7698:	2200      	movs	r2, #0
   d769a:	4629      	mov	r1, r5
   d769c:	4807      	ldr	r0, [pc, #28]	; (d76bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d769e:	f7ff fad5 	bl	d6c4c <application_thread_invoke>
   d76a2:	4630      	mov	r0, r6
   d76a4:	f7ff fd4d 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d76a8:	2110      	movs	r1, #16
   d76aa:	4630      	mov	r0, r6
   d76ac:	f001 fb61 	bl	d8d72 <_ZdlPvj>
        }
    }
   d76b0:	b007      	add	sp, #28
   d76b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76b4:	000d72fb 	.word	0x000d72fb
   d76b8:	000d75c9 	.word	0x000d75c9
   d76bc:	000d6ebf 	.word	0x000d6ebf

000d76c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d76c0:	b530      	push	{r4, r5, lr}
   d76c2:	b085      	sub	sp, #20
   d76c4:	4604      	mov	r4, r0
   d76c6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d76c8:	4668      	mov	r0, sp
   d76ca:	4611      	mov	r1, r2
   d76cc:	f7ff fdb9 	bl	d7242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d76d0:	b17c      	cbz	r4, d76f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d76d2:	b224      	sxth	r4, r4
   d76d4:	4628      	mov	r0, r5
   d76d6:	b10d      	cbz	r5, d76dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d76d8:	f002 fe28 	bl	da32c <strdup>
   d76dc:	9002      	str	r0, [sp, #8]
   d76de:	a902      	add	r1, sp, #8
   d76e0:	4668      	mov	r0, sp
   d76e2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d76e6:	f7ff fe1f 	bl	d7328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d76ea:	a802      	add	r0, sp, #8
   d76ec:	f7ff fd41 	bl	d7172 <_ZN8particle5ErrorD1Ev>
   d76f0:	e01d      	b.n	d772e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d76f2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d76f4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d76f8:	f04f 0201 	mov.w	r2, #1
   d76fc:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7700:	42a3      	cmp	r3, r4
   d7702:	d103      	bne.n	d770c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7704:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7708:	2900      	cmp	r1, #0
   d770a:	d1f7      	bne.n	d76fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d770c:	d002      	beq.n	d7714 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d770e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7712:	e00c      	b.n	d772e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7714:	f110 010c 	adds.w	r1, r0, #12
   d7718:	f04f 0301 	mov.w	r3, #1
   d771c:	bf18      	it	ne
   d771e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7720:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7724:	3004      	adds	r0, #4
   d7726:	f800 3c03 	strb.w	r3, [r0, #-3]
   d772a:	f7ff ff71 	bl	d7610 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d772e:	a801      	add	r0, sp, #4
   d7730:	f7fc ff9f 	bl	d4672 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7734:	b005      	add	sp, #20
   d7736:	bd30      	pop	{r4, r5, pc}

000d7738 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7738:	2200      	movs	r2, #0
   d773a:	4611      	mov	r1, r2
   d773c:	6840      	ldr	r0, [r0, #4]
   d773e:	f7ff bb5b 	b.w	d6df8 <network_listening>

000d7742 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7742:	2200      	movs	r2, #0
   d7744:	4611      	mov	r1, r2
   d7746:	6840      	ldr	r0, [r0, #4]
   d7748:	f7ff bb66 	b.w	d6e18 <network_get_listen_timeout>

000d774c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d774c:	2200      	movs	r2, #0
   d774e:	6840      	ldr	r0, [r0, #4]
   d7750:	f7ff bb5a 	b.w	d6e08 <network_set_listen_timeout>

000d7754 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7754:	2200      	movs	r2, #0
   d7756:	f081 0101 	eor.w	r1, r1, #1
   d775a:	6840      	ldr	r0, [r0, #4]
   d775c:	f7ff bb44 	b.w	d6de8 <network_listen>

000d7760 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7760:	2300      	movs	r3, #0
   d7762:	461a      	mov	r2, r3
   d7764:	4619      	mov	r1, r3
   d7766:	6840      	ldr	r0, [r0, #4]
   d7768:	f7ff bb36 	b.w	d6dd8 <network_off>

000d776c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d776c:	2300      	movs	r3, #0
   d776e:	461a      	mov	r2, r3
   d7770:	4619      	mov	r1, r3
   d7772:	6840      	ldr	r0, [r0, #4]
   d7774:	f7ff bb28 	b.w	d6dc8 <network_on>

000d7778 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7778:	2200      	movs	r2, #0
   d777a:	4611      	mov	r1, r2
   d777c:	6840      	ldr	r0, [r0, #4]
   d777e:	f7ff bb1b 	b.w	d6db8 <network_ready>

000d7782 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7782:	2200      	movs	r2, #0
   d7784:	4611      	mov	r1, r2
   d7786:	6840      	ldr	r0, [r0, #4]
   d7788:	f7ff bb06 	b.w	d6d98 <network_connecting>

000d778c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d778c:	2200      	movs	r2, #0
   d778e:	2102      	movs	r1, #2
   d7790:	6840      	ldr	r0, [r0, #4]
   d7792:	f7ff bb09 	b.w	d6da8 <network_disconnect>

000d7796 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7796:	2300      	movs	r3, #0
   d7798:	461a      	mov	r2, r3
   d779a:	6840      	ldr	r0, [r0, #4]
   d779c:	f7ff baf4 	b.w	d6d88 <network_connect>

000d77a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d77a0:	4b02      	ldr	r3, [pc, #8]	; (d77ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d77a2:	2203      	movs	r2, #3
   d77a4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d77a6:	4a02      	ldr	r2, [pc, #8]	; (d77b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d77a8:	601a      	str	r2, [r3, #0]
   d77aa:	4770      	bx	lr
   d77ac:	2003e1d0 	.word	0x2003e1d0
   d77b0:	000dd770 	.word	0x000dd770

000d77b4 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d77b4:	6800      	ldr	r0, [r0, #0]
   d77b6:	f000 b8d0 	b.w	d795a <_ZN7TwoWire4lockEv>

000d77ba <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d77ba:	b510      	push	{r4, lr}
   d77bc:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d77be:	6001      	str	r1, [r0, #0]
   d77c0:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d77c2:	b10a      	cbz	r2, d77c8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d77c4:	f7ff fff6 	bl	d77b4 <_ZN9FuelGauge4lockEv>
    }
}
   d77c8:	4620      	mov	r0, r4
   d77ca:	bd10      	pop	{r4, pc}

000d77cc <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d77cc:	b538      	push	{r3, r4, r5, lr}
   d77ce:	4604      	mov	r4, r0
   d77d0:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d77d2:	f001 fa87 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d77d6:	462a      	mov	r2, r5
   d77d8:	4601      	mov	r1, r0
   d77da:	4620      	mov	r0, r4
   d77dc:	f7ff ffed 	bl	d77ba <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d77e0:	4620      	mov	r0, r4
   d77e2:	bd38      	pop	{r3, r4, r5, pc}

000d77e4 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d77e4:	6800      	ldr	r0, [r0, #0]
   d77e6:	f000 b8c1 	b.w	d796c <_ZN7TwoWire6unlockEv>

000d77ea <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d77ea:	b510      	push	{r4, lr}
{
    if (lock_) {
   d77ec:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d77ee:	4604      	mov	r4, r0
{
    if (lock_) {
   d77f0:	b10b      	cbz	r3, d77f6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d77f2:	f7ff fff7 	bl	d77e4 <_ZN9FuelGauge6unlockEv>
    }
}
   d77f6:	4620      	mov	r0, r4
   d77f8:	bd10      	pop	{r4, pc}

000d77fa <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d77fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77fc:	4604      	mov	r4, r0
   d77fe:	4616      	mov	r6, r2
   d7800:	461d      	mov	r5, r3
   d7802:	460f      	mov	r7, r1
   d7804:	f7ff ffd6 	bl	d77b4 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d7808:	6820      	ldr	r0, [r4, #0]
   d780a:	2136      	movs	r1, #54	; 0x36
   d780c:	f000 f89a 	bl	d7944 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d7810:	6820      	ldr	r0, [r4, #0]
   d7812:	6803      	ldr	r3, [r0, #0]
   d7814:	4639      	mov	r1, r7
   d7816:	689b      	ldr	r3, [r3, #8]
   d7818:	4798      	blx	r3
    i2c_.endTransmission(true);
   d781a:	2101      	movs	r1, #1
   d781c:	6820      	ldr	r0, [r4, #0]
   d781e:	f000 f894 	bl	d794a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d7822:	2202      	movs	r2, #2
   d7824:	2136      	movs	r1, #54	; 0x36
   d7826:	2301      	movs	r3, #1
   d7828:	6820      	ldr	r0, [r4, #0]
   d782a:	f000 f882 	bl	d7932 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d782e:	6820      	ldr	r0, [r4, #0]
   d7830:	6803      	ldr	r3, [r0, #0]
   d7832:	695b      	ldr	r3, [r3, #20]
   d7834:	4798      	blx	r3
   d7836:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d7838:	6820      	ldr	r0, [r4, #0]
   d783a:	6803      	ldr	r3, [r0, #0]
   d783c:	695b      	ldr	r3, [r3, #20]
   d783e:	4798      	blx	r3
   d7840:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7842:	4620      	mov	r0, r4
}
   d7844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d7848:	f7ff bfcc 	b.w	d77e4 <_ZN9FuelGauge6unlockEv>

000d784c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d784c:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d784e:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7850:	2200      	movs	r2, #0
	byte LSB = 0;
   d7852:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d7856:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d785a:	2104      	movs	r1, #4
   d785c:	f10d 0206 	add.w	r2, sp, #6
   d7860:	f7ff ffcb 	bl	d77fa <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7864:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d7868:	f001 fd22 	bl	d92b0 <__aeabi_i2d>
   d786c:	2200      	movs	r2, #0
   d786e:	4b09      	ldr	r3, [pc, #36]	; (d7894 <_ZN9FuelGauge6getSoCEv+0x48>)
   d7870:	f001 fd84 	bl	d937c <__aeabi_dmul>
   d7874:	f002 f87a 	bl	d996c <__aeabi_d2f>
   d7878:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d787c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7880:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d7884:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d7888:	ee37 0a80 	vadd.f32	s0, s15, s0
   d788c:	b003      	add	sp, #12
   d788e:	f85d fb04 	ldr.w	pc, [sp], #4
   d7892:	bf00      	nop
   d7894:	3f700000 	.word	0x3f700000

000d7898 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7898:	4770      	bx	lr

000d789a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d789a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d789c:	4606      	mov	r6, r0
   d789e:	4615      	mov	r5, r2
   d78a0:	460c      	mov	r4, r1
   d78a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d78a4:	42bc      	cmp	r4, r7
   d78a6:	d006      	beq.n	d78b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d78a8:	6833      	ldr	r3, [r6, #0]
   d78aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d78ae:	689b      	ldr	r3, [r3, #8]
   d78b0:	4630      	mov	r0, r6
   d78b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d78b4:	e7f6      	b.n	d78a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d78b6:	4628      	mov	r0, r5
   d78b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d78ba:	2200      	movs	r2, #0
   d78bc:	7c00      	ldrb	r0, [r0, #16]
   d78be:	f7ff b89d 	b.w	d69fc <HAL_I2C_Write_Data>

000d78c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d78c2:	2100      	movs	r1, #0
   d78c4:	7c00      	ldrb	r0, [r0, #16]
   d78c6:	f7ff b8a1 	b.w	d6a0c <HAL_I2C_Available_Data>

000d78ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d78ca:	2100      	movs	r1, #0
   d78cc:	7c00      	ldrb	r0, [r0, #16]
   d78ce:	f7ff b8a5 	b.w	d6a1c <HAL_I2C_Read_Data>

000d78d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d78d2:	2100      	movs	r1, #0
   d78d4:	7c00      	ldrb	r0, [r0, #16]
   d78d6:	f7ff b8a9 	b.w	d6a2c <HAL_I2C_Peek_Data>

000d78da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d78da:	2100      	movs	r1, #0
   d78dc:	7c00      	ldrb	r0, [r0, #16]
   d78de:	f7ff b8ad 	b.w	d6a3c <HAL_I2C_Flush_Data>

000d78e2 <_ZN7TwoWireD0Ev>:
   d78e2:	b510      	push	{r4, lr}
   d78e4:	2114      	movs	r1, #20
   d78e6:	4604      	mov	r4, r0
   d78e8:	f001 fa43 	bl	d8d72 <_ZdlPvj>
   d78ec:	4620      	mov	r0, r4
   d78ee:	bd10      	pop	{r4, pc}

000d78f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d78f0:	b510      	push	{r4, lr}
   d78f2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d78f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78f8:	4608      	mov	r0, r1
   d78fa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d78fc:	2100      	movs	r1, #0
   d78fe:	4b04      	ldr	r3, [pc, #16]	; (d7910 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7900:	7420      	strb	r0, [r4, #16]
   d7902:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7904:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7906:	f7ff f8a9 	bl	d6a5c <HAL_I2C_Init>

}
   d790a:	4620      	mov	r0, r4
   d790c:	bd10      	pop	{r4, pc}
   d790e:	bf00      	nop
   d7910:	000dd7a4 	.word	0x000dd7a4

000d7914 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7914:	2300      	movs	r3, #0
   d7916:	461a      	mov	r2, r3
   d7918:	4619      	mov	r1, r3
   d791a:	7c00      	ldrb	r0, [r0, #16]
   d791c:	f7ff b84e 	b.w	d69bc <HAL_I2C_Begin>

000d7920 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7920:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7922:	2400      	movs	r4, #0
   d7924:	7c00      	ldrb	r0, [r0, #16]
   d7926:	9400      	str	r4, [sp, #0]
   d7928:	f7ff f850 	bl	d69cc <HAL_I2C_Request_Data>
  return result;
}
   d792c:	b2c0      	uxtb	r0, r0
   d792e:	b002      	add	sp, #8
   d7930:	bd10      	pop	{r4, pc}

000d7932 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d7932:	b2db      	uxtb	r3, r3
   d7934:	b2d2      	uxtb	r2, r2
   d7936:	b2c9      	uxtb	r1, r1
   d7938:	f7ff bff2 	b.w	d7920 <_ZN7TwoWire11requestFromEhhh>

000d793c <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d793c:	2200      	movs	r2, #0
   d793e:	7c00      	ldrb	r0, [r0, #16]
   d7940:	f7ff b84c 	b.w	d69dc <HAL_I2C_Begin_Transmission>

000d7944 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7944:	b2c9      	uxtb	r1, r1
   d7946:	f7ff bff9 	b.w	d793c <_ZN7TwoWire17beginTransmissionEh>

000d794a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d794a:	2200      	movs	r2, #0
   d794c:	7c00      	ldrb	r0, [r0, #16]
   d794e:	f7ff b84d 	b.w	d69ec <HAL_I2C_End_Transmission>

000d7952 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7952:	2100      	movs	r1, #0
   d7954:	7c00      	ldrb	r0, [r0, #16]
   d7956:	f7ff b879 	b.w	d6a4c <HAL_I2C_Is_Enabled>

000d795a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d795a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d795c:	2100      	movs	r1, #0
   d795e:	7c00      	ldrb	r0, [r0, #16]
   d7960:	f7ff f884 	bl	d6a6c <HAL_I2C_Acquire>
}
   d7964:	fab0 f080 	clz	r0, r0
   d7968:	0940      	lsrs	r0, r0, #5
   d796a:	bd08      	pop	{r3, pc}

000d796c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d796c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d796e:	2100      	movs	r1, #0
   d7970:	7c00      	ldrb	r0, [r0, #16]
   d7972:	f7ff f883 	bl	d6a7c <HAL_I2C_Release>
}
   d7976:	fab0 f080 	clz	r0, r0
   d797a:	0940      	lsrs	r0, r0, #5
   d797c:	bd08      	pop	{r3, pc}

000d797e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d797e:	4700      	bx	r0

000d7980 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7980:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7982:	b085      	sub	sp, #20
   d7984:	461c      	mov	r4, r3
   d7986:	460e      	mov	r6, r1
   d7988:	4617      	mov	r7, r2
   d798a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d798c:	f7ff f806 	bl	d699c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7990:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7992:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7994:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7998:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d799a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d799e:	bfa5      	ittet	ge
   d79a0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d79a4:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d79a8:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d79aa:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d79ac:	9300      	str	r3, [sp, #0]
   d79ae:	4632      	mov	r2, r6
   d79b0:	463b      	mov	r3, r7
   d79b2:	4906      	ldr	r1, [pc, #24]	; (d79cc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d79b4:	bfa8      	it	ge
   d79b6:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d79ba:	4628      	mov	r0, r5
   d79bc:	f7fe ffe6 	bl	d698c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d79c0:	fab0 f080 	clz	r0, r0
   d79c4:	0940      	lsrs	r0, r0, #5
   d79c6:	b005      	add	sp, #20
   d79c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d79ca:	bf00      	nop
   d79cc:	000d797f 	.word	0x000d797f

000d79d0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d79d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d79d2:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d79d4:	f7fe ffe2 	bl	d699c <HAL_Interrupts_Detach>
   d79d8:	4607      	mov	r7, r0
   d79da:	b968      	cbnz	r0, d79f8 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d79dc:	4d08      	ldr	r5, [pc, #32]	; (d7a00 <_Z15detachInterruptt+0x30>)
   d79de:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d79e2:	b15c      	cbz	r4, d79fc <_Z15detachInterruptt+0x2c>
   d79e4:	4620      	mov	r0, r4
   d79e6:	f7ff fbac 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d79ea:	2110      	movs	r1, #16
   d79ec:	4620      	mov	r0, r4
   d79ee:	f001 f9c0 	bl	d8d72 <_ZdlPvj>
        handlers[pin] = nullptr;
   d79f2:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d79f6:	e001      	b.n	d79fc <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d79f8:	2000      	movs	r0, #0
   d79fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d79fc:	2001      	movs	r0, #1
}
   d79fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7a00:	2003e1d8 	.word	0x2003e1d8

000d7a04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7a04:	4770      	bx	lr

000d7a06 <_ZN9IPAddressD0Ev>:
   d7a06:	b510      	push	{r4, lr}
   d7a08:	2118      	movs	r1, #24
   d7a0a:	4604      	mov	r4, r0
   d7a0c:	f001 f9b1 	bl	d8d72 <_ZdlPvj>
   d7a10:	4620      	mov	r0, r4
   d7a12:	bd10      	pop	{r4, pc}

000d7a14 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a14:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a16:	7d03      	ldrb	r3, [r0, #20]
   d7a18:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a1a:	b08d      	sub	sp, #52	; 0x34
   d7a1c:	460e      	mov	r6, r1
   d7a1e:	f100 0704 	add.w	r7, r0, #4
   d7a22:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a26:	d002      	beq.n	d7a2e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7a28:	f100 0508 	add.w	r5, r0, #8
   d7a2c:	e018      	b.n	d7a60 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a2e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a30:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7a32:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a36:	232f      	movs	r3, #47	; 0x2f
   d7a38:	462a      	mov	r2, r5
   d7a3a:	200a      	movs	r0, #10
   d7a3c:	f7ff f826 	bl	d6a8c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7a40:	4628      	mov	r0, r5
   d7a42:	f003 f9a3 	bl	dad8c <strlen>
   d7a46:	6833      	ldr	r3, [r6, #0]
   d7a48:	4602      	mov	r2, r0
   d7a4a:	68db      	ldr	r3, [r3, #12]
   d7a4c:	4629      	mov	r1, r5
   d7a4e:	4630      	mov	r0, r6
   d7a50:	4798      	blx	r3
   d7a52:	e00f      	b.n	d7a74 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7a54:	b124      	cbz	r4, d7a60 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7a56:	212e      	movs	r1, #46	; 0x2e
   d7a58:	4630      	mov	r0, r6
   d7a5a:	f000 fb91 	bl	d8180 <_ZN5Print5printEc>
   d7a5e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7a60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a64:	220a      	movs	r2, #10
   d7a66:	4630      	mov	r0, r6
   d7a68:	f000 fbd0 	bl	d820c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a6c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a6e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a70:	d1f0      	bne.n	d7a54 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a72:	4620      	mov	r0, r4
    }
    return n;
}
   d7a74:	b00d      	add	sp, #52	; 0x34
   d7a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a78 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7a78:	b510      	push	{r4, lr}
   d7a7a:	4b05      	ldr	r3, [pc, #20]	; (d7a90 <_ZN9IPAddressC1Ev+0x18>)
   d7a7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a7e:	2211      	movs	r2, #17
   d7a80:	f840 3b04 	str.w	r3, [r0], #4
   d7a84:	2100      	movs	r1, #0
   d7a86:	f002 f9c0 	bl	d9e0a <memset>
{
    clear();
}
   d7a8a:	4620      	mov	r0, r4
   d7a8c:	bd10      	pop	{r4, pc}
   d7a8e:	bf00      	nop
   d7a90:	000dd7cc 	.word	0x000dd7cc

000d7a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a94:	4603      	mov	r3, r0
   d7a96:	4a07      	ldr	r2, [pc, #28]	; (d7ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a98:	b510      	push	{r4, lr}
   d7a9a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7a9e:	f101 0210 	add.w	r2, r1, #16
   d7aa2:	f851 4b04 	ldr.w	r4, [r1], #4
   d7aa6:	f843 4b04 	str.w	r4, [r3], #4
   d7aaa:	4291      	cmp	r1, r2
   d7aac:	d1f9      	bne.n	d7aa2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7aae:	780a      	ldrb	r2, [r1, #0]
   d7ab0:	701a      	strb	r2, [r3, #0]
}
   d7ab2:	bd10      	pop	{r4, pc}
   d7ab4:	000dd7cc 	.word	0x000dd7cc

000d7ab8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7ab8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7aba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7abe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7ac2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7ac6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7aca:	2304      	movs	r3, #4
   d7acc:	6041      	str	r1, [r0, #4]
   d7ace:	7503      	strb	r3, [r0, #20]
   d7ad0:	bd10      	pop	{r4, pc}

000d7ad2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7ad4:	780d      	ldrb	r5, [r1, #0]
   d7ad6:	788b      	ldrb	r3, [r1, #2]
   d7ad8:	784a      	ldrb	r2, [r1, #1]
   d7ada:	78c9      	ldrb	r1, [r1, #3]
   d7adc:	9100      	str	r1, [sp, #0]
   d7ade:	4629      	mov	r1, r5
   d7ae0:	f7ff ffea 	bl	d7ab8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7ae4:	b003      	add	sp, #12
   d7ae6:	bd30      	pop	{r4, r5, pc}

000d7ae8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ae8:	4b01      	ldr	r3, [pc, #4]	; (d7af0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7aea:	4a02      	ldr	r2, [pc, #8]	; (d7af4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7aec:	601a      	str	r2, [r3, #0]
   d7aee:	4770      	bx	lr
   d7af0:	2003e268 	.word	0x2003e268
   d7af4:	000dd848 	.word	0x000dd848

000d7af8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7af8:	2200      	movs	r2, #0
   d7afa:	4611      	mov	r1, r2
   d7afc:	6840      	ldr	r0, [r0, #4]
   d7afe:	f7ff b97b 	b.w	d6df8 <network_listening>

000d7b02 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7b02:	2200      	movs	r2, #0
   d7b04:	4611      	mov	r1, r2
   d7b06:	6840      	ldr	r0, [r0, #4]
   d7b08:	f7ff b986 	b.w	d6e18 <network_get_listen_timeout>

000d7b0c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7b0c:	2200      	movs	r2, #0
   d7b0e:	6840      	ldr	r0, [r0, #4]
   d7b10:	f7ff b97a 	b.w	d6e08 <network_set_listen_timeout>

000d7b14 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7b14:	2200      	movs	r2, #0
   d7b16:	f081 0101 	eor.w	r1, r1, #1
   d7b1a:	6840      	ldr	r0, [r0, #4]
   d7b1c:	f7ff b964 	b.w	d6de8 <network_listen>

000d7b20 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7b20:	2300      	movs	r3, #0
   d7b22:	461a      	mov	r2, r3
   d7b24:	2101      	movs	r1, #1
   d7b26:	6840      	ldr	r0, [r0, #4]
   d7b28:	f7ff b956 	b.w	d6dd8 <network_off>

000d7b2c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7b2c:	2300      	movs	r3, #0
   d7b2e:	461a      	mov	r2, r3
   d7b30:	4619      	mov	r1, r3
   d7b32:	6840      	ldr	r0, [r0, #4]
   d7b34:	f7ff b948 	b.w	d6dc8 <network_on>

000d7b38 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7b38:	2200      	movs	r2, #0
   d7b3a:	4611      	mov	r1, r2
   d7b3c:	6840      	ldr	r0, [r0, #4]
   d7b3e:	f7ff b93b 	b.w	d6db8 <network_ready>

000d7b42 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7b42:	2200      	movs	r2, #0
   d7b44:	4611      	mov	r1, r2
   d7b46:	6840      	ldr	r0, [r0, #4]
   d7b48:	f7ff b926 	b.w	d6d98 <network_connecting>

000d7b4c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7b4c:	2200      	movs	r2, #0
   d7b4e:	2102      	movs	r1, #2
   d7b50:	6840      	ldr	r0, [r0, #4]
   d7b52:	f7ff b929 	b.w	d6da8 <network_disconnect>

000d7b56 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7b56:	2300      	movs	r3, #0
   d7b58:	461a      	mov	r2, r3
   d7b5a:	6840      	ldr	r0, [r0, #4]
   d7b5c:	f7ff b914 	b.w	d6d88 <network_connect>

000d7b60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7b60:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b62:	4605      	mov	r5, r0
   d7b64:	b188      	cbz	r0, d7b8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b66:	6804      	ldr	r4, [r0, #0]
   d7b68:	b14c      	cbz	r4, d7b7e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7b6a:	68a3      	ldr	r3, [r4, #8]
   d7b6c:	b11b      	cbz	r3, d7b76 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b6e:	2203      	movs	r2, #3
   d7b70:	4621      	mov	r1, r4
   d7b72:	4620      	mov	r0, r4
   d7b74:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b76:	2110      	movs	r1, #16
   d7b78:	4620      	mov	r0, r4
   d7b7a:	f001 f8fa 	bl	d8d72 <_ZdlPvj>
   d7b7e:	4628      	mov	r0, r5
   d7b80:	2114      	movs	r1, #20
      }
   d7b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b86:	f001 b8f4 	b.w	d8d72 <_ZdlPvj>
   d7b8a:	bd38      	pop	{r3, r4, r5, pc}

000d7b8c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7b8c:	b110      	cbz	r0, d7b94 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7b8e:	6803      	ldr	r3, [r0, #0]
   d7b90:	685b      	ldr	r3, [r3, #4]
   d7b92:	4718      	bx	r3
   d7b94:	4770      	bx	lr

000d7b96 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7b96:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7b98:	6803      	ldr	r3, [r0, #0]
   d7b9a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7b9c:	b1bb      	cbz	r3, d7bce <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7b9e:	6858      	ldr	r0, [r3, #4]
   d7ba0:	f7fe fe4c 	bl	d683c <os_thread_is_current>
   d7ba4:	b978      	cbnz	r0, d7bc6 <_ZN6ThreadD1Ev+0x30>
   d7ba6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7ba8:	7c5a      	ldrb	r2, [r3, #17]
   d7baa:	b912      	cbnz	r2, d7bb2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7bac:	6858      	ldr	r0, [r3, #4]
   d7bae:	f7fe fe4d 	bl	d684c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7bb2:	6823      	ldr	r3, [r4, #0]
   d7bb4:	6858      	ldr	r0, [r3, #4]
   d7bb6:	f7fe fe51 	bl	d685c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bba:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7bbc:	2300      	movs	r3, #0
   d7bbe:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7bc0:	b128      	cbz	r0, d7bce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7bc2:	f7ff ffcd 	bl	d7b60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7bc6:	6820      	ldr	r0, [r4, #0]
   d7bc8:	b108      	cbz	r0, d7bce <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7bca:	f7ff ffc9 	bl	d7b60 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7bce:	4620      	mov	r0, r4
   d7bd0:	bd10      	pop	{r4, pc}
	...

000d7bd4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7bd4:	b538      	push	{r3, r4, r5, lr}
   d7bd6:	4b0c      	ldr	r3, [pc, #48]	; (d7c08 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7bd8:	6003      	str	r3, [r0, #0]
   d7bda:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7bdc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7be0:	b108      	cbz	r0, d7be6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7be2:	f7fc fa5e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7be6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7bea:	b135      	cbz	r5, d7bfa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7bec:	4628      	mov	r0, r5
   d7bee:	f7ff ffd2 	bl	d7b96 <_ZN6ThreadD1Ev>
   d7bf2:	2104      	movs	r1, #4
   d7bf4:	4628      	mov	r0, r5
   d7bf6:	f001 f8bc 	bl	d8d72 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7bfa:	68a0      	ldr	r0, [r4, #8]
   d7bfc:	b108      	cbz	r0, d7c02 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d7bfe:	f7ff ffc5 	bl	d7b8c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7c02:	4620      	mov	r0, r4
   d7c04:	bd38      	pop	{r3, r4, r5, pc}
   d7c06:	bf00      	nop
   d7c08:	000dd8b4 	.word	0x000dd8b4

000d7c0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7c0c:	b538      	push	{r3, r4, r5, lr}
   d7c0e:	4c0e      	ldr	r4, [pc, #56]	; (d7c48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7c10:	4b0e      	ldr	r3, [pc, #56]	; (d7c4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7c12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7c14:	2500      	movs	r5, #0
   d7c16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7c18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7c1c:	6063      	str	r3, [r4, #4]
   d7c1e:	60a5      	str	r5, [r4, #8]
   d7c20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7c28:	f7fe fe28 	bl	d687c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7c2c:	4b08      	ldr	r3, [pc, #32]	; (d7c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7c2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7c32:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7c36:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7c38:	4620      	mov	r0, r4
   d7c3a:	4a06      	ldr	r2, [pc, #24]	; (d7c54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7c3c:	4906      	ldr	r1, [pc, #24]	; (d7c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7c42:	f001 b891 	b.w	d8d68 <__aeabi_atexit>
   d7c46:	bf00      	nop
   d7c48:	2003e26c 	.word	0x2003e26c
   d7c4c:	000dd8e8 	.word	0x000dd8e8
   d7c50:	000dd8b4 	.word	0x000dd8b4
   d7c54:	2003e088 	.word	0x2003e088
   d7c58:	000d7bd5 	.word	0x000d7bd5

000d7c5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c5c:	2300      	movs	r3, #0
   d7c5e:	461a      	mov	r2, r3
   d7c60:	6840      	ldr	r0, [r0, #4]
   d7c62:	f7ff b891 	b.w	d6d88 <network_connect>

000d7c66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7c66:	2200      	movs	r2, #0
   d7c68:	2102      	movs	r1, #2
   d7c6a:	6840      	ldr	r0, [r0, #4]
   d7c6c:	f7ff b89c 	b.w	d6da8 <network_disconnect>

000d7c70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7c70:	2200      	movs	r2, #0
   d7c72:	4611      	mov	r1, r2
   d7c74:	6840      	ldr	r0, [r0, #4]
   d7c76:	f7ff b88f 	b.w	d6d98 <network_connecting>

000d7c7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7c7a:	2200      	movs	r2, #0
   d7c7c:	4611      	mov	r1, r2
   d7c7e:	6840      	ldr	r0, [r0, #4]
   d7c80:	f7ff b89a 	b.w	d6db8 <network_ready>

000d7c84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7c84:	2300      	movs	r3, #0
   d7c86:	461a      	mov	r2, r3
   d7c88:	4619      	mov	r1, r3
   d7c8a:	6840      	ldr	r0, [r0, #4]
   d7c8c:	f7ff b89c 	b.w	d6dc8 <network_on>

000d7c90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7c90:	2300      	movs	r3, #0
   d7c92:	461a      	mov	r2, r3
   d7c94:	4619      	mov	r1, r3
   d7c96:	6840      	ldr	r0, [r0, #4]
   d7c98:	f7ff b89e 	b.w	d6dd8 <network_off>

000d7c9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7c9c:	2200      	movs	r2, #0
   d7c9e:	f081 0101 	eor.w	r1, r1, #1
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	f7ff b8a0 	b.w	d6de8 <network_listen>

000d7ca8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ca8:	2200      	movs	r2, #0
   d7caa:	6840      	ldr	r0, [r0, #4]
   d7cac:	f7ff b8ac 	b.w	d6e08 <network_set_listen_timeout>

000d7cb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7cb0:	2200      	movs	r2, #0
   d7cb2:	4611      	mov	r1, r2
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	f7ff b8af 	b.w	d6e18 <network_get_listen_timeout>

000d7cba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7cba:	2200      	movs	r2, #0
   d7cbc:	4611      	mov	r1, r2
   d7cbe:	6840      	ldr	r0, [r0, #4]
   d7cc0:	f7ff b89a 	b.w	d6df8 <network_listening>

000d7cc4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7cc8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7cca:	b095      	sub	sp, #84	; 0x54
   d7ccc:	4616      	mov	r6, r2
   d7cce:	460d      	mov	r5, r1
   d7cd0:	4607      	mov	r7, r0
    IPAddress addr;
   d7cd2:	f7ff fed1 	bl	d7a78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7cd6:	4621      	mov	r1, r4
   d7cd8:	2220      	movs	r2, #32
   d7cda:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7cdc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7cde:	f002 f894 	bl	d9e0a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ce2:	2340      	movs	r3, #64	; 0x40
   d7ce4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7ce6:	4621      	mov	r1, r4
   d7ce8:	466b      	mov	r3, sp
   d7cea:	aa0c      	add	r2, sp, #48	; 0x30
   d7cec:	4630      	mov	r0, r6
   d7cee:	f7fe fedd 	bl	d6aac <netdb_getaddrinfo>
    if (!r) {
   d7cf2:	4604      	mov	r4, r0
   d7cf4:	2800      	cmp	r0, #0
   d7cf6:	d144      	bne.n	d7d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7cf8:	4602      	mov	r2, r0
   d7cfa:	2101      	movs	r1, #1
   d7cfc:	6868      	ldr	r0, [r5, #4]
   d7cfe:	f7ff f85b 	bl	d6db8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d02:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d04:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d06:	4622      	mov	r2, r4
   d7d08:	6868      	ldr	r0, [r5, #4]
   d7d0a:	f7ff f855 	bl	d6db8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d0e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d10:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7d12:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d14:	2e00      	cmp	r6, #0
   d7d16:	d034      	beq.n	d7d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7d18:	2900      	cmp	r1, #0
   d7d1a:	d132      	bne.n	d7d82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7d1c:	6873      	ldr	r3, [r6, #4]
   d7d1e:	2b02      	cmp	r3, #2
   d7d20:	d002      	beq.n	d7d28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7d22:	2b0a      	cmp	r3, #10
   d7d24:	d009      	beq.n	d7d3a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7d26:	e02a      	b.n	d7d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7d28:	f1b8 0f00 	cmp.w	r8, #0
   d7d2c:	d027      	beq.n	d7d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7d2e:	6971      	ldr	r1, [r6, #20]
   d7d30:	4638      	mov	r0, r7
   d7d32:	3104      	adds	r1, #4
   d7d34:	f7ff fecd 	bl	d7ad2 <_ZN9IPAddressaSEPKh>
   d7d38:	e020      	b.n	d7d7c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7d3a:	f1b9 0f00 	cmp.w	r9, #0
   d7d3e:	d01e      	beq.n	d7d7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7d40:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7d42:	2211      	movs	r2, #17
   d7d44:	a801      	add	r0, sp, #4
   d7d46:	f002 f860 	bl	d9e0a <memset>
                    a.v = 6;
   d7d4a:	2306      	movs	r3, #6
   d7d4c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d50:	ad01      	add	r5, sp, #4
   d7d52:	f104 0308 	add.w	r3, r4, #8
   d7d56:	3418      	adds	r4, #24
   d7d58:	6818      	ldr	r0, [r3, #0]
   d7d5a:	6859      	ldr	r1, [r3, #4]
   d7d5c:	462a      	mov	r2, r5
   d7d5e:	c203      	stmia	r2!, {r0, r1}
   d7d60:	3308      	adds	r3, #8
   d7d62:	42a3      	cmp	r3, r4
   d7d64:	4615      	mov	r5, r2
   d7d66:	d1f7      	bne.n	d7d58 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7d68:	a901      	add	r1, sp, #4
   d7d6a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7d6c:	ad07      	add	r5, sp, #28
   d7d6e:	f7ff fe91 	bl	d7a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d74:	1d3c      	adds	r4, r7, #4
   d7d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d78:	682b      	ldr	r3, [r5, #0]
   d7d7a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7d7c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d7e:	69f6      	ldr	r6, [r6, #28]
   d7d80:	e7c8      	b.n	d7d14 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7d82:	9800      	ldr	r0, [sp, #0]
   d7d84:	f7fe fe8a 	bl	d6a9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7d88:	4638      	mov	r0, r7
   d7d8a:	b015      	add	sp, #84	; 0x54
   d7d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7d90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7d90:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7d92:	4a03      	ldr	r2, [pc, #12]	; (d7da0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7d94:	601a      	str	r2, [r3, #0]
   d7d96:	2200      	movs	r2, #0
   d7d98:	605a      	str	r2, [r3, #4]
   d7d9a:	4770      	bx	lr
   d7d9c:	2003e440 	.word	0x2003e440
   d7da0:	000dd8e8 	.word	0x000dd8e8

000d7da4 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
   d7da4:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7da6:	f000 ff9d 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
   d7daa:	f7ff fdd2 	bl	d7952 <_ZN7TwoWire9isEnabledEv>
   d7dae:	b918      	cbnz	r0, d7db8 <_ZN4PMIC5beginEv+0x14>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7db0:	f000 ff98 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
   d7db4:	f7ff fdae 	bl	d7914 <_ZN7TwoWire5beginEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7db8:	f000 ff94 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
   d7dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
   d7dc0:	f7ff bdc7 	b.w	d7952 <_ZN7TwoWire9isEnabledEv>

000d7dc4 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7dc4:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7dc6:	f000 ff8d 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d7dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d7dce:	f7ff bdc4 	b.w	d795a <_ZN7TwoWire4lockEv>

000d7dd2 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d7dd2:	b510      	push	{r4, lr}
   d7dd4:	4604      	mov	r4, r0
    lock_(_lock)
   d7dd6:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d7dd8:	b109      	cbz	r1, d7dde <_ZN4PMICC1Eb+0xc>
        lock();
   d7dda:	f7ff fff3 	bl	d7dc4 <_ZN4PMIC4lockEv>
    }
}
   d7dde:	4620      	mov	r0, r4
   d7de0:	bd10      	pop	{r4, pc}

000d7de2 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d7de2:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7de4:	f000 ff7e 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d7de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d7dec:	f7ff bdbe 	b.w	d796c <_ZN7TwoWire6unlockEv>

000d7df0 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7df0:	b510      	push	{r4, lr}
{
    if (lock_) {
   d7df2:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d7df4:	4604      	mov	r4, r0
{
    if (lock_) {
   d7df6:	b10b      	cbz	r3, d7dfc <_ZN4PMICD1Ev+0xc>
        unlock();
   d7df8:	f7ff fff3 	bl	d7de2 <_ZN4PMIC6unlockEv>
    }
}
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	bd10      	pop	{r4, pc}

000d7e00 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7e00:	b510      	push	{r4, lr}
   d7e02:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7e04:	6800      	ldr	r0, [r0, #0]
   d7e06:	f7ff ffec 	bl	d7de2 <_ZN4PMIC6unlockEv>
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	bd10      	pop	{r4, pc}

000d7e0e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d7e0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7e10:	ac02      	add	r4, sp, #8
   d7e12:	460d      	mov	r5, r1
   d7e14:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7e18:	f7ff ffd4 	bl	d7dc4 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e1c:	f000 ff62 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7e20:	216b      	movs	r1, #107	; 0x6b
   d7e22:	f7ff fd8f 	bl	d7944 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e26:	f000 ff5d 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d7e2a:	6803      	ldr	r3, [r0, #0]
   d7e2c:	4629      	mov	r1, r5
   d7e2e:	689b      	ldr	r3, [r3, #8]
   d7e30:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e32:	f000 ff57 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d7e36:	2101      	movs	r1, #1
   d7e38:	f7ff fd87 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e3c:	f000 ff52 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d7e40:	2301      	movs	r3, #1
   d7e42:	461a      	mov	r2, r3
   d7e44:	216b      	movs	r1, #107	; 0x6b
   d7e46:	f7ff fd74 	bl	d7932 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e4a:	f000 ff4b 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d7e4e:	6803      	ldr	r3, [r0, #0]
   d7e50:	695b      	ldr	r3, [r3, #20]
   d7e52:	4798      	blx	r3
   d7e54:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d7e56:	4620      	mov	r0, r4
   d7e58:	f7ff ffd2 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d7e5c:	b2e8      	uxtb	r0, r5
   d7e5e:	b003      	add	sp, #12
   d7e60:	bd30      	pop	{r4, r5, pc}

000d7e62 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d7e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7e64:	ac02      	add	r4, sp, #8
   d7e66:	4615      	mov	r5, r2
   d7e68:	460e      	mov	r6, r1
   d7e6a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d7e6e:	f7ff ffa9 	bl	d7dc4 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e72:	f000 ff37 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d7e76:	216b      	movs	r1, #107	; 0x6b
   d7e78:	f7ff fd64 	bl	d7944 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e7c:	f000 ff32 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d7e80:	6803      	ldr	r3, [r0, #0]
   d7e82:	4631      	mov	r1, r6
   d7e84:	689b      	ldr	r3, [r3, #8]
   d7e86:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e88:	f000 ff2c 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d7e8c:	6803      	ldr	r3, [r0, #0]
   d7e8e:	4629      	mov	r1, r5
   d7e90:	689b      	ldr	r3, [r3, #8]
   d7e92:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d7e94:	f000 ff26 	bl	d8ce4 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d7e98:	2101      	movs	r1, #1
   d7e9a:	f7ff fd56 	bl	d794a <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	f7ff ffae 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d7ea4:	b002      	add	sp, #8
   d7ea6:	bd70      	pop	{r4, r5, r6, pc}

000d7ea8 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d7ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7eaa:	4604      	mov	r4, r0
   d7eac:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7eae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7eb0:	f7ff ff88 	bl	d7dc4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d7eb4:	2100      	movs	r1, #0
   d7eb6:	4620      	mov	r0, r4
   d7eb8:	f7ff ffa9 	bl	d7e0e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d7ebc:	f241 1358 	movw	r3, #4440	; 0x1158
   d7ec0:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
   d7ec2:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
   d7ec6:	d05b      	beq.n	d7f80 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
   d7ec8:	d820      	bhi.n	d7f0c <_ZN4PMIC20setInputVoltageLimitEt+0x64>
   d7eca:	f241 0318 	movw	r3, #4120	; 0x1018
   d7ece:	429d      	cmp	r5, r3
   d7ed0:	d04d      	beq.n	d7f6e <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d7ed2:	d80c      	bhi.n	d7eee <_ZN4PMIC20setInputVoltageLimitEt+0x46>
   d7ed4:	f640 7378 	movw	r3, #3960	; 0xf78
   d7ed8:	429d      	cmp	r5, r3
   d7eda:	d042      	beq.n	d7f62 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
   d7edc:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d7ee0:	429d      	cmp	r5, r3
   d7ee2:	d041      	beq.n	d7f68 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
   d7ee4:	f640 7328 	movw	r3, #3880	; 0xf28
   d7ee8:	429d      	cmp	r5, r3
   d7eea:	d160      	bne.n	d7fae <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d7eec:	e059      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d7eee:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d7ef2:	429d      	cmp	r5, r3
   d7ef4:	d03e      	beq.n	d7f74 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
   d7ef6:	f241 1308 	movw	r3, #4360	; 0x1108
   d7efa:	429d      	cmp	r5, r3
   d7efc:	d03d      	beq.n	d7f7a <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
   d7efe:	f241 0368 	movw	r3, #4200	; 0x1068
   d7f02:	429d      	cmp	r5, r3
   d7f04:	d153      	bne.n	d7fae <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d7f06:	f042 0220 	orr.w	r2, r2, #32
   d7f0a:	e04a      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d7f0c:	f241 2398 	movw	r3, #4760	; 0x1298
   d7f10:	429d      	cmp	r5, r3
   d7f12:	d03e      	beq.n	d7f92 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
   d7f14:	d80e      	bhi.n	d7f34 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
   d7f16:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d7f1a:	429d      	cmp	r5, r3
   d7f1c:	d033      	beq.n	d7f86 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
   d7f1e:	f241 2348 	movw	r3, #4680	; 0x1248
   d7f22:	429d      	cmp	r5, r3
   d7f24:	d032      	beq.n	d7f8c <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
   d7f26:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d7f2a:	429d      	cmp	r5, r3
   d7f2c:	d13f      	bne.n	d7fae <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d7f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d7f32:	e036      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d7f34:	f241 3338 	movw	r3, #4920	; 0x1338
   d7f38:	429d      	cmp	r5, r3
   d7f3a:	d02d      	beq.n	d7f98 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
   d7f3c:	d806      	bhi.n	d7f4c <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
   d7f3e:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d7f42:	429d      	cmp	r5, r3
   d7f44:	d133      	bne.n	d7fae <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d7f46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d7f4a:	e02a      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d7f4c:	f241 3388 	movw	r3, #5000	; 0x1388
   d7f50:	429d      	cmp	r5, r3
   d7f52:	d024      	beq.n	d7f9e <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
   d7f54:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d7f58:	429d      	cmp	r5, r3
   d7f5a:	d128      	bne.n	d7fae <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d7f5c:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d7f60:	e01f      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d7f62:	f042 0208 	orr.w	r2, r2, #8
   d7f66:	e01c      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d7f68:	f042 0210 	orr.w	r2, r2, #16
   d7f6c:	e019      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d7f6e:	f042 0218 	orr.w	r2, r2, #24
   d7f72:	e016      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d7f74:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d7f78:	e013      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d7f7a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d7f7e:	e010      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d7f80:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d7f84:	e00d      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d7f86:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d7f8a:	e00a      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d7f8c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d7f90:	e007      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d7f92:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d7f96:	e004      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d7f98:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d7f9c:	e001      	b.n	d7fa2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d7f9e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d7fa2:	4620      	mov	r0, r4
   d7fa4:	2100      	movs	r1, #0
   d7fa6:	f7ff ff5c 	bl	d7e62 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d7faa:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
   d7fac:	e000      	b.n	d7fb0 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d7fae:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d7fb0:	a801      	add	r0, sp, #4
   d7fb2:	f7ff ff25 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d7fb6:	4620      	mov	r0, r4
   d7fb8:	b003      	add	sp, #12
   d7fba:	bd30      	pop	{r4, r5, pc}

000d7fbc <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
   d7fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7fbe:	4604      	mov	r4, r0
   d7fc0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7fc2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7fc4:	f7ff fefe 	bl	d7dc4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d7fc8:	2100      	movs	r1, #0
   d7fca:	4620      	mov	r0, r4
   d7fcc:	f7ff ff1f 	bl	d7e0e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
   d7fd0:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
   d7fd4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
   d7fd8:	d023      	beq.n	d8022 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
   d7fda:	d807      	bhi.n	d7fec <_ZN4PMIC20setInputCurrentLimitEt+0x30>
   d7fdc:	2d96      	cmp	r5, #150	; 0x96
   d7fde:	d01a      	beq.n	d8016 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
   d7fe0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   d7fe4:	d01a      	beq.n	d801c <_ZN4PMIC20setInputCurrentLimitEt+0x60>
   d7fe6:	2d64      	cmp	r5, #100	; 0x64
   d7fe8:	d129      	bne.n	d803e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
   d7fea:	e022      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
   d7fec:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d7ff0:	429d      	cmp	r5, r3
   d7ff2:	d019      	beq.n	d8028 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
   d7ff4:	d805      	bhi.n	d8002 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
   d7ff6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
   d7ffa:	d120      	bne.n	d803e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
   d7ffc:	f042 0204 	orr.w	r2, r2, #4
   d8000:	e017      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
   d8002:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
   d8006:	d012      	beq.n	d802e <_ZN4PMIC20setInputCurrentLimitEt+0x72>
   d8008:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d800c:	429d      	cmp	r5, r3
   d800e:	d116      	bne.n	d803e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
   d8010:	f042 0207 	orr.w	r2, r2, #7
   d8014:	e00d      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
   d8016:	f042 0201 	orr.w	r2, r2, #1
   d801a:	e00a      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
   d801c:	f042 0202 	orr.w	r2, r2, #2
   d8020:	e007      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
   d8022:	f042 0203 	orr.w	r2, r2, #3
   d8026:	e004      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
   d8028:	f042 0205 	orr.w	r2, r2, #5
   d802c:	e001      	b.n	d8032 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
   d802e:	f042 0206 	orr.w	r2, r2, #6
   d8032:	4620      	mov	r0, r4
   d8034:	2100      	movs	r1, #0
   d8036:	f7ff ff14 	bl	d7e62 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d803a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
   d803c:	e000      	b.n	d8040 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d803e:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
   d8040:	a801      	add	r0, sp, #4
   d8042:	f7ff fedd 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d8046:	4620      	mov	r0, r4
   d8048:	b003      	add	sp, #12
   d804a:	bd30      	pop	{r4, r5, pc}

000d804c <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d804c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d804e:	460c      	mov	r4, r1
   d8050:	4605      	mov	r5, r0
   d8052:	4617      	mov	r7, r2
   d8054:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8056:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8058:	f7ff feb4 	bl	d7dc4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
   d805c:	2c00      	cmp	r4, #0
   d805e:	bf0c      	ite	eq
   d8060:	2400      	moveq	r4, #0
   d8062:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d8064:	b117      	cbz	r7, d806c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
   d8066:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   d806a:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
   d806c:	b10e      	cbz	r6, d8072 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
   d806e:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d8072:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d8076:	b10b      	cbz	r3, d807c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
   d8078:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d807c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d8080:	b10b      	cbz	r3, d8086 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
   d8082:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d8086:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d808a:	b10b      	cbz	r3, d8090 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
   d808c:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d8090:	2102      	movs	r1, #2
   d8092:	4628      	mov	r0, r5
   d8094:	f7ff febb 	bl	d7e0e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d8098:	f000 0201 	and.w	r2, r0, #1
   d809c:	4322      	orrs	r2, r4
   d809e:	2102      	movs	r1, #2
   d80a0:	4628      	mov	r0, r5
   d80a2:	f7ff fede 	bl	d7e62 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
   d80a6:	a801      	add	r0, sp, #4
   d80a8:	f7ff feaa 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
   d80ac:	2001      	movs	r0, #1
   d80ae:	b003      	add	sp, #12
   d80b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d80b2 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
   d80b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d80b4:	4604      	mov	r4, r0
   d80b6:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d80b8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d80ba:	f7ff fe83 	bl	d7dc4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d80be:	2104      	movs	r1, #4
   d80c0:	4620      	mov	r0, r4
   d80c2:	f7ff fea4 	bl	d7e0e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
   d80c6:	f241 0310 	movw	r3, #4112	; 0x1010
   d80ca:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
   d80cc:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
   d80d0:	d006      	beq.n	d80e0 <_ZN4PMIC16setChargeVoltageEt+0x2e>
   d80d2:	f241 0370 	movw	r3, #4208	; 0x1070
   d80d6:	429d      	cmp	r5, r3
   d80d8:	d10a      	bne.n	d80f0 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d80da:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
   d80de:	e001      	b.n	d80e4 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
   d80e0:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
   d80e4:	4620      	mov	r0, r4
   d80e6:	2104      	movs	r1, #4
   d80e8:	f7ff febb 	bl	d7e62 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d80ec:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
   d80ee:	e000      	b.n	d80f2 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
   d80f0:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d80f2:	a801      	add	r0, sp, #4
   d80f4:	f7ff fe84 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d80f8:	4620      	mov	r0, r4
   d80fa:	b003      	add	sp, #12
   d80fc:	bd30      	pop	{r4, r5, pc}

000d80fe <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
   d80fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8100:	ac02      	add	r4, sp, #8
   d8102:	4605      	mov	r5, r0
   d8104:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d8108:	f7ff fe5c 	bl	d7dc4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
   d810c:	2105      	movs	r1, #5
   d810e:	4628      	mov	r0, r5
   d8110:	f7ff fe7d 	bl	d7e0e <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
   d8114:	2105      	movs	r1, #5
   d8116:	f000 02ce 	and.w	r2, r0, #206	; 0xce
   d811a:	4628      	mov	r0, r5
   d811c:	f7ff fea1 	bl	d7e62 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
   d8120:	4620      	mov	r0, r4
   d8122:	f7ff fe6d 	bl	d7e00 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
   d8126:	2001      	movs	r0, #1
   d8128:	b003      	add	sp, #12
   d812a:	bd30      	pop	{r4, r5, pc}

000d812c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d812e:	4606      	mov	r6, r0
   d8130:	460d      	mov	r5, r1
   d8132:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8134:	2400      	movs	r4, #0
  while (size--) {
   d8136:	42bd      	cmp	r5, r7
   d8138:	d00c      	beq.n	d8154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d813a:	6833      	ldr	r3, [r6, #0]
   d813c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8140:	689b      	ldr	r3, [r3, #8]
   d8142:	4630      	mov	r0, r6
   d8144:	4798      	blx	r3
     if (chunk>=0)
   d8146:	2800      	cmp	r0, #0
   d8148:	db01      	blt.n	d814e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d814a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d814c:	e7f3      	b.n	d8136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d814e:	2c00      	cmp	r4, #0
   d8150:	bf08      	it	eq
   d8152:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8154:	4620      	mov	r0, r4
   d8156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8158 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8158:	b570      	push	{r4, r5, r6, lr}
   d815a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d815c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d815e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d8160:	b149      	cbz	r1, d8176 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d8162:	f002 fe13 	bl	dad8c <strlen>
   d8166:	682b      	ldr	r3, [r5, #0]
   d8168:	4602      	mov	r2, r0
   d816a:	4621      	mov	r1, r4
   d816c:	4628      	mov	r0, r5
   d816e:	68db      	ldr	r3, [r3, #12]
    }
   d8170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8174:	4718      	bx	r3
    }
   d8176:	bd70      	pop	{r4, r5, r6, pc}

000d8178 <_ZN5Print5printEPKc>:
   d8178:	b508      	push	{r3, lr}
   d817a:	f7ff ffed 	bl	d8158 <_ZN5Print5writeEPKc>
   d817e:	bd08      	pop	{r3, pc}

000d8180 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8180:	6803      	ldr	r3, [r0, #0]
   d8182:	689b      	ldr	r3, [r3, #8]
   d8184:	4718      	bx	r3

000d8186 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8186:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8188:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d818a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d818c:	f7ff fff8 	bl	d8180 <_ZN5Print5printEc>
  n += print('\n');
   d8190:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8192:	4604      	mov	r4, r0
  n += print('\n');
   d8194:	4628      	mov	r0, r5
   d8196:	f7ff fff3 	bl	d8180 <_ZN5Print5printEc>
  return n;
}
   d819a:	4420      	add	r0, r4
   d819c:	bd38      	pop	{r3, r4, r5, pc}

000d819e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d819e:	b538      	push	{r3, r4, r5, lr}
   d81a0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d81a2:	f7ff ffd9 	bl	d8158 <_ZN5Print5writeEPKc>
   d81a6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d81a8:	4628      	mov	r0, r5
   d81aa:	f7ff ffec 	bl	d8186 <_ZN5Print7printlnEv>
  return n;
}
   d81ae:	4420      	add	r0, r4
   d81b0:	bd38      	pop	{r3, r4, r5, pc}

000d81b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d81b2:	b530      	push	{r4, r5, lr}
   d81b4:	b08b      	sub	sp, #44	; 0x2c
   d81b6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d81b8:	2100      	movs	r1, #0
   d81ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d81be:	2a01      	cmp	r2, #1
   d81c0:	bf98      	it	ls
   d81c2:	220a      	movls	r2, #10
   d81c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d81c8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d81cc:	fb05 3312 	mls	r3, r5, r2, r3
   d81d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d81d4:	2b09      	cmp	r3, #9
   d81d6:	bf94      	ite	ls
   d81d8:	3330      	addls	r3, #48	; 0x30
   d81da:	3337      	addhi	r3, #55	; 0x37
   d81dc:	b2db      	uxtb	r3, r3
   d81de:	4621      	mov	r1, r4
   d81e0:	f804 3901 	strb.w	r3, [r4], #-1
   d81e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d81e6:	2d00      	cmp	r5, #0
   d81e8:	d1ee      	bne.n	d81c8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d81ea:	f7ff ffb5 	bl	d8158 <_ZN5Print5writeEPKc>
}
   d81ee:	b00b      	add	sp, #44	; 0x2c
   d81f0:	bd30      	pop	{r4, r5, pc}

000d81f2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d81f2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d81f4:	b92a      	cbnz	r2, d8202 <_ZN5Print5printEmi+0x10>
   d81f6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d81f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d81fc:	689b      	ldr	r3, [r3, #8]
   d81fe:	b2c9      	uxtb	r1, r1
   d8200:	4718      	bx	r3
  else return printNumber(n, base);
   d8202:	b2d2      	uxtb	r2, r2
}
   d8204:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d8208:	f7ff bfd3 	b.w	d81b2 <_ZN5Print11printNumberEmh>

000d820c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d820c:	f7ff bff1 	b.w	d81f2 <_ZN5Print5printEmi>

000d8210 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d8210:	b538      	push	{r3, r4, r5, lr}
   d8212:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d8214:	f7ff ffed 	bl	d81f2 <_ZN5Print5printEmi>
   d8218:	4604      	mov	r4, r0
  n += println();
   d821a:	4628      	mov	r0, r5
   d821c:	f7ff ffb3 	bl	d8186 <_ZN5Print7printlnEv>
  return n;
}
   d8220:	4420      	add	r0, r4
   d8222:	bd38      	pop	{r3, r4, r5, pc}

000d8224 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d8224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8228:	4607      	mov	r7, r0
   d822a:	460e      	mov	r6, r1
  if (base == 0) {
   d822c:	4615      	mov	r5, r2
   d822e:	b92a      	cbnz	r2, d823c <_ZN5Print5printEli+0x18>
    return write(n);
   d8230:	6803      	ldr	r3, [r0, #0]
   d8232:	b2c9      	uxtb	r1, r1
   d8234:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d8236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d823a:	4718      	bx	r3
  } else if (base == 10) {
   d823c:	2a0a      	cmp	r2, #10
   d823e:	d102      	bne.n	d8246 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d8240:	2900      	cmp	r1, #0
   d8242:	da01      	bge.n	d8248 <_ZN5Print5printEli+0x24>
   d8244:	e004      	b.n	d8250 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d8246:	b2d2      	uxtb	r2, r2
  }
}
   d8248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d824c:	f7ff bfb1 	b.w	d81b2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d8250:	212d      	movs	r1, #45	; 0x2d
   d8252:	f7ff ff95 	bl	d8180 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d8256:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d8258:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d825a:	4271      	negs	r1, r6
   d825c:	4638      	mov	r0, r7
   d825e:	f7ff ffa8 	bl	d81b2 <_ZN5Print11printNumberEmh>
   d8262:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d8264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8268 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d8268:	f7ff bfdc 	b.w	d8224 <_ZN5Print5printEli>

000d826c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d826c:	b510      	push	{r4, lr}
   d826e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8270:	f7fe ff67 	bl	d7142 <_ZNSt14_Function_baseD1Ev>
   d8274:	4620      	mov	r0, r4
   d8276:	bd10      	pop	{r4, pc}

000d8278 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8278:	4803      	ldr	r0, [pc, #12]	; (d8288 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d827a:	4a04      	ldr	r2, [pc, #16]	; (d828c <_GLOBAL__sub_I_RGB+0x14>)
   d827c:	4904      	ldr	r1, [pc, #16]	; (d8290 <_GLOBAL__sub_I_RGB+0x18>)
   d827e:	2300      	movs	r3, #0
   d8280:	6083      	str	r3, [r0, #8]
   d8282:	f000 bd71 	b.w	d8d68 <__aeabi_atexit>
   d8286:	bf00      	nop
   d8288:	2003e448 	.word	0x2003e448
   d828c:	2003e088 	.word	0x2003e088
   d8290:	000d826d 	.word	0x000d826d

000d8294 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d8294:	4770      	bx	lr

000d8296 <_ZN8SPIClassD0Ev>:
   d8296:	b510      	push	{r4, lr}
   d8298:	2110      	movs	r1, #16
   d829a:	4604      	mov	r4, r0
   d829c:	f000 fd69 	bl	d8d72 <_ZdlPvj>
   d82a0:	4620      	mov	r0, r4
   d82a2:	bd10      	pop	{r4, pc}

000d82a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d82a4:	b570      	push	{r4, r5, r6, lr}
   d82a6:	4b08      	ldr	r3, [pc, #32]	; (d82c8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d82a8:	6003      	str	r3, [r0, #0]
   d82aa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d82ac:	2500      	movs	r5, #0
   d82ae:	460e      	mov	r6, r1
   d82b0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d82b4:	f7fe fada 	bl	d686c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d82b8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d82ba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d82bc:	f7fe fbfe 	bl	d6abc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d82c0:	60a5      	str	r5, [r4, #8]
}
   d82c2:	4620      	mov	r0, r4
   d82c4:	bd70      	pop	{r4, r5, r6, pc}
   d82c6:	bf00      	nop
   d82c8:	000dd91c 	.word	0x000dd91c

000d82cc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d82cc:	7900      	ldrb	r0, [r0, #4]
   d82ce:	f7fe bbfd 	b.w	d6acc <HAL_SPI_Is_Enabled>

000d82d2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d82d2:	b510      	push	{r4, lr}
   d82d4:	4604      	mov	r4, r0
{
	free(buffer);
   d82d6:	6800      	ldr	r0, [r0, #0]
   d82d8:	f7fe fdae 	bl	d6e38 <free>
}
   d82dc:	4620      	mov	r0, r4
   d82de:	bd10      	pop	{r4, pc}

000d82e0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d82e0:	b510      	push	{r4, lr}
   d82e2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d82e4:	6800      	ldr	r0, [r0, #0]
   d82e6:	b108      	cbz	r0, d82ec <_ZN6String10invalidateEv+0xc>
   d82e8:	f7fe fda6 	bl	d6e38 <free>
	buffer = NULL;
   d82ec:	2300      	movs	r3, #0
   d82ee:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d82f0:	60a3      	str	r3, [r4, #8]
   d82f2:	6063      	str	r3, [r4, #4]
   d82f4:	bd10      	pop	{r4, pc}

000d82f6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d82f6:	b538      	push	{r3, r4, r5, lr}
   d82f8:	4604      	mov	r4, r0
   d82fa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d82fc:	6800      	ldr	r0, [r0, #0]
   d82fe:	3101      	adds	r1, #1
   d8300:	f7fe fda2 	bl	d6e48 <realloc>
	if (newbuffer) {
   d8304:	b110      	cbz	r0, d830c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8306:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d830a:	2001      	movs	r0, #1
	}
	return 0;
}
   d830c:	bd38      	pop	{r3, r4, r5, pc}

000d830e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d830e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8310:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8312:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8314:	b113      	cbz	r3, d831c <_ZN6String7reserveEj+0xe>
   d8316:	6843      	ldr	r3, [r0, #4]
   d8318:	428b      	cmp	r3, r1
   d831a:	d207      	bcs.n	d832c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d831c:	4620      	mov	r0, r4
   d831e:	f7ff ffea 	bl	d82f6 <_ZN6String12changeBufferEj>
   d8322:	b120      	cbz	r0, d832e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8324:	68a3      	ldr	r3, [r4, #8]
   d8326:	b90b      	cbnz	r3, d832c <_ZN6String7reserveEj+0x1e>
   d8328:	6822      	ldr	r2, [r4, #0]
   d832a:	7013      	strb	r3, [r2, #0]
   d832c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d832e:	bd10      	pop	{r4, pc}

000d8330 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8330:	b570      	push	{r4, r5, r6, lr}
   d8332:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8334:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8336:	4604      	mov	r4, r0
   d8338:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d833a:	f7ff ffe8 	bl	d830e <_ZN6String7reserveEj>
   d833e:	b918      	cbnz	r0, d8348 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8340:	4620      	mov	r0, r4
   d8342:	f7ff ffcd 	bl	d82e0 <_ZN6String10invalidateEv>
		return *this;
   d8346:	e009      	b.n	d835c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8348:	462a      	mov	r2, r5
   d834a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d834c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d834e:	6820      	ldr	r0, [r4, #0]
   d8350:	f001 fd50 	bl	d9df4 <memcpy>
	buffer[len] = 0;
   d8354:	6822      	ldr	r2, [r4, #0]
   d8356:	68a3      	ldr	r3, [r4, #8]
   d8358:	2100      	movs	r1, #0
   d835a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d835c:	4620      	mov	r0, r4
   d835e:	bd70      	pop	{r4, r5, r6, pc}

000d8360 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8360:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8362:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8364:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8366:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8368:	6043      	str	r3, [r0, #4]
	len = 0;
   d836a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d836c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d836e:	460d      	mov	r5, r1
   d8370:	b139      	cbz	r1, d8382 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8372:	4608      	mov	r0, r1
   d8374:	f002 fd0a 	bl	dad8c <strlen>
   d8378:	4629      	mov	r1, r5
   d837a:	4602      	mov	r2, r0
   d837c:	4620      	mov	r0, r4
   d837e:	f7ff ffd7 	bl	d8330 <_ZN6String4copyEPKcj>
}
   d8382:	4620      	mov	r0, r4
   d8384:	bd38      	pop	{r3, r4, r5, pc}

000d8386 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8386:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8388:	b510      	push	{r4, lr}
   d838a:	460b      	mov	r3, r1
   d838c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d838e:	d007      	beq.n	d83a0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8390:	6809      	ldr	r1, [r1, #0]
   d8392:	b119      	cbz	r1, d839c <_ZN6StringaSERKS_+0x16>
   d8394:	689a      	ldr	r2, [r3, #8]
   d8396:	f7ff ffcb 	bl	d8330 <_ZN6String4copyEPKcj>
   d839a:	e001      	b.n	d83a0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d839c:	f7ff ffa0 	bl	d82e0 <_ZN6String10invalidateEv>

	return *this;
}
   d83a0:	4620      	mov	r0, r4
   d83a2:	bd10      	pop	{r4, pc}

000d83a4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d83a4:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d83a6:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d83a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d83aa:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d83ac:	6043      	str	r3, [r0, #4]
	len = 0;
   d83ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   d83b0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d83b2:	f7ff ffe8 	bl	d8386 <_ZN6StringaSERKS_>
}
   d83b6:	4620      	mov	r0, r4
   d83b8:	bd10      	pop	{r4, pc}

000d83ba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d83ba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d83bc:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d83be:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d83c0:	b912      	cbnz	r2, d83c8 <_ZNK6String6equalsEPKc+0xe>
   d83c2:	b919      	cbnz	r1, d83cc <_ZNK6String6equalsEPKc+0x12>
   d83c4:	2001      	movs	r0, #1
   d83c6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d83c8:	b911      	cbnz	r1, d83d0 <_ZNK6String6equalsEPKc+0x16>
   d83ca:	6803      	ldr	r3, [r0, #0]
   d83cc:	7818      	ldrb	r0, [r3, #0]
   d83ce:	e002      	b.n	d83d6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d83d0:	6800      	ldr	r0, [r0, #0]
   d83d2:	f001 ff99 	bl	da308 <strcmp>
   d83d6:	fab0 f080 	clz	r0, r0
   d83da:	0940      	lsrs	r0, r0, #5
}
   d83dc:	bd08      	pop	{r3, pc}

000d83de <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d83de:	b570      	push	{r4, r5, r6, lr}
   d83e0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d83e2:	b19a      	cbz	r2, d840c <_ZNK6String8getBytesEPhjj+0x2e>
   d83e4:	b191      	cbz	r1, d840c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d83e6:	6885      	ldr	r5, [r0, #8]
   d83e8:	429d      	cmp	r5, r3
   d83ea:	d802      	bhi.n	d83f2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d83ec:	2300      	movs	r3, #0
   d83ee:	700b      	strb	r3, [r1, #0]
		return;
   d83f0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d83f2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d83f4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d83f6:	6801      	ldr	r1, [r0, #0]
   d83f8:	42ac      	cmp	r4, r5
   d83fa:	bf28      	it	cs
   d83fc:	462c      	movcs	r4, r5
   d83fe:	4419      	add	r1, r3
   d8400:	4622      	mov	r2, r4
   d8402:	4630      	mov	r0, r6
   d8404:	f002 fcdf 	bl	dadc6 <strncpy>
	buf[n] = 0;
   d8408:	2300      	movs	r3, #0
   d840a:	5533      	strb	r3, [r6, r4]
   d840c:	bd70      	pop	{r4, r5, r6, pc}

000d840e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d840e:	4601      	mov	r1, r0
   d8410:	2200      	movs	r2, #0
   d8412:	208c      	movs	r0, #140	; 0x8c
   d8414:	f7fe ba42 	b.w	d689c <HAL_Core_System_Reset_Ex>

000d8418 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d8418:	2000      	movs	r0, #0
   d841a:	f7ff bff8 	b.w	d840e <_ZN11SystemClass5resetEm>
	...

000d8420 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d8420:	b510      	push	{r4, lr}
   d8422:	4604      	mov	r4, r0
   d8424:	4608      	mov	r0, r1
   d8426:	4611      	mov	r1, r2
   d8428:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d842a:	2300      	movs	r3, #0
   d842c:	f7fe fbf6 	bl	d6c1c <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d8430:	4b06      	ldr	r3, [pc, #24]	; (d844c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d8432:	2200      	movs	r2, #0
   d8434:	701a      	strb	r2, [r3, #0]
   d8436:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d843a:	8058      	strh	r0, [r3, #2]
   d843c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d843e:	681a      	ldr	r2, [r3, #0]
   d8440:	889b      	ldrh	r3, [r3, #4]
   d8442:	6022      	str	r2, [r4, #0]
   d8444:	80a3      	strh	r3, [r4, #4]
}
   d8446:	4620      	mov	r0, r4
   d8448:	bd10      	pop	{r4, pc}
   d844a:	bf00      	nop
   d844c:	2003e458 	.word	0x2003e458

000d8450 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d8450:	b510      	push	{r4, lr}
   d8452:	2400      	movs	r4, #0
   d8454:	7004      	strb	r4, [r0, #0]
   d8456:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d8458:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d845a:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d845e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d8460:	dd07      	ble.n	d8472 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d8462:	3901      	subs	r1, #1
   d8464:	4299      	cmp	r1, r3
   d8466:	d209      	bcs.n	d847c <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d8468:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d846c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d846e:	2301      	movs	r3, #1
   d8470:	e001      	b.n	d8476 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d8472:	d102      	bne.n	d847a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d8474:	2302      	movs	r3, #2
   d8476:	7003      	strb	r3, [r0, #0]
   d8478:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d847a:	8041      	strh	r1, [r0, #2]
    }
}
   d847c:	bd10      	pop	{r4, pc}
	...

000d8480 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8480:	b570      	push	{r4, r5, r6, lr}
   d8482:	b086      	sub	sp, #24
   d8484:	4616      	mov	r6, r2
   d8486:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8488:	2300      	movs	r3, #0
   d848a:	9302      	str	r3, [sp, #8]
   d848c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d848e:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8490:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8494:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d8496:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d849a:	4631      	mov	r1, r6
   d849c:	4628      	mov	r0, r5
   d849e:	f7fe fc01 	bl	d6ca4 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d84a2:	4633      	mov	r3, r6
   d84a4:	462a      	mov	r2, r5
   d84a6:	4601      	mov	r1, r0
   d84a8:	a804      	add	r0, sp, #16
   d84aa:	f7ff ffd1 	bl	d8450 <_ZN11SleepResultC1EiPKtj>
   d84ae:	4b06      	ldr	r3, [pc, #24]	; (d84c8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d84b0:	9804      	ldr	r0, [sp, #16]
   d84b2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d84b6:	6018      	str	r0, [r3, #0]
   d84b8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d84ba:	681a      	ldr	r2, [r3, #0]
   d84bc:	889b      	ldrh	r3, [r3, #4]
   d84be:	6022      	str	r2, [r4, #0]
}
   d84c0:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d84c2:	80a3      	strh	r3, [r4, #4]
}
   d84c4:	b006      	add	sp, #24
   d84c6:	bd70      	pop	{r4, r5, r6, pc}
   d84c8:	2003e458 	.word	0x2003e458

000d84cc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d84cc:	4b04      	ldr	r3, [pc, #16]	; (d84e0 <_GLOBAL__sub_I_System+0x14>)
   d84ce:	2000      	movs	r0, #0
   d84d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d84d4:	7018      	strb	r0, [r3, #0]
   d84d6:	8058      	strh	r0, [r3, #2]
   d84d8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d84da:	f7fe bb8f 	b.w	d6bfc <set_system_mode>
   d84de:	bf00      	nop
   d84e0:	2003e458 	.word	0x2003e458

000d84e4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d84e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d84e6:	4b14      	ldr	r3, [pc, #80]	; (d8538 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d84e8:	4f14      	ldr	r7, [pc, #80]	; (d853c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d84ea:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d84ec:	4b14      	ldr	r3, [pc, #80]	; (d8540 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d84ee:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d84f0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d84f2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d84f4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d84f6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d84f8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d84fa:	d01b      	beq.n	d8534 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d84fc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d84fe:	ad01      	add	r5, sp, #4
   d8500:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8504:	f001 fb7a 	bl	d9bfc <localtime>
	calendar_time->tm_year += 1900;
   d8508:	6943      	ldr	r3, [r0, #20]
   d850a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d850e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8510:	4604      	mov	r4, r0
   d8512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d851a:	f8d4 e000 	ldr.w	lr, [r4]
   d851e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8522:	ad01      	add	r5, sp, #4
   d8524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8526:	4c07      	ldr	r4, [pc, #28]	; (d8544 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d8528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d852a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d852c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d852e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8530:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8534:	b00b      	add	sp, #44	; 0x2c
   d8536:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8538:	2003e494 	.word	0x2003e494
   d853c:	2003e490 	.word	0x2003e490
   d8540:	2003e48c 	.word	0x2003e48c
   d8544:	2003e460 	.word	0x2003e460

000d8548 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d8548:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d854a:	2000      	movs	r0, #0
   d854c:	f7fe fc04 	bl	d6d58 <spark_sync_time_pending>
   d8550:	b128      	cbz	r0, d855e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8552:	f7fe fbd9 	bl	d6d08 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d8556:	f080 0001 	eor.w	r0, r0, #1
   d855a:	b2c0      	uxtb	r0, r0
   d855c:	bd08      	pop	{r3, pc}
   d855e:	2001      	movs	r0, #1
    }
   d8560:	bd08      	pop	{r3, pc}
	...

000d8564 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d8564:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8566:	f7ff ffbd 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d856a:	4b01      	ldr	r3, [pc, #4]	; (d8570 <_ZN9TimeClass4hourEl+0xc>)
   d856c:	6898      	ldr	r0, [r3, #8]
   d856e:	bd08      	pop	{r3, pc}
   d8570:	2003e460 	.word	0x2003e460

000d8574 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d8574:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8576:	f7ff ffb5 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d857a:	4b01      	ldr	r3, [pc, #4]	; (d8580 <_ZN9TimeClass3dayEl+0xc>)
   d857c:	68d8      	ldr	r0, [r3, #12]
   d857e:	bd08      	pop	{r3, pc}
   d8580:	2003e460 	.word	0x2003e460

000d8584 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d8584:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8586:	f7ff ffad 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d858a:	4b02      	ldr	r3, [pc, #8]	; (d8594 <_ZN9TimeClass7weekdayEl+0x10>)
   d858c:	6998      	ldr	r0, [r3, #24]
}
   d858e:	3001      	adds	r0, #1
   d8590:	bd08      	pop	{r3, pc}
   d8592:	bf00      	nop
   d8594:	2003e460 	.word	0x2003e460

000d8598 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d8598:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d859a:	f7ff ffa3 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d859e:	4b02      	ldr	r3, [pc, #8]	; (d85a8 <_ZN9TimeClass5monthEl+0x10>)
   d85a0:	6918      	ldr	r0, [r3, #16]
}
   d85a2:	3001      	adds	r0, #1
   d85a4:	bd08      	pop	{r3, pc}
   d85a6:	bf00      	nop
   d85a8:	2003e460 	.word	0x2003e460

000d85ac <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d85ac:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d85ae:	f7fe f99d 	bl	d68ec <HAL_RTC_Get_UnixTime>
   d85b2:	4b03      	ldr	r3, [pc, #12]	; (d85c0 <_ZN9TimeClass5localEv+0x14>)
   d85b4:	681b      	ldr	r3, [r3, #0]
   d85b6:	4418      	add	r0, r3
   d85b8:	4b02      	ldr	r3, [pc, #8]	; (d85c4 <_ZN9TimeClass5localEv+0x18>)
   d85ba:	681b      	ldr	r3, [r3, #0]
}
   d85bc:	4418      	add	r0, r3
   d85be:	bd08      	pop	{r3, pc}
   d85c0:	2003e494 	.word	0x2003e494
   d85c4:	2003e48c 	.word	0x2003e48c

000d85c8 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d85c8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d85cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d85d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85d4:	d40f      	bmi.n	d85f6 <_ZN9TimeClass4zoneEf+0x2e>
   d85d6:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d85da:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d85de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85e2:	dc08      	bgt.n	d85f6 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d85e4:	eddf 7a04 	vldr	s15, [pc, #16]	; d85f8 <_ZN9TimeClass4zoneEf+0x30>
   d85e8:	4b04      	ldr	r3, [pc, #16]	; (d85fc <_ZN9TimeClass4zoneEf+0x34>)
   d85ea:	ee20 0a27 	vmul.f32	s0, s0, s15
   d85ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d85f2:	ed83 0a00 	vstr	s0, [r3]
   d85f6:	4770      	bx	lr
   d85f8:	45610000 	.word	0x45610000
   d85fc:	2003e494 	.word	0x2003e494

000d8600 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d8600:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8608:	d40f      	bmi.n	d862a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d860a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d860e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8616:	dc08      	bgt.n	d862a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d8618:	eddf 7a04 	vldr	s15, [pc, #16]	; d862c <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d861c:	4b04      	ldr	r3, [pc, #16]	; (d8630 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d861e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8622:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8626:	ed83 0a00 	vstr	s0, [r3]
   d862a:	4770      	bx	lr
   d862c:	45610000 	.word	0x45610000
   d8630:	2003df94 	.word	0x2003df94

000d8634 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d8634:	4b02      	ldr	r3, [pc, #8]	; (d8640 <_ZN9TimeClass8beginDSTEv+0xc>)
   d8636:	681a      	ldr	r2, [r3, #0]
   d8638:	4b02      	ldr	r3, [pc, #8]	; (d8644 <_ZN9TimeClass8beginDSTEv+0x10>)
   d863a:	601a      	str	r2, [r3, #0]
   d863c:	4770      	bx	lr
   d863e:	bf00      	nop
   d8640:	2003df94 	.word	0x2003df94
   d8644:	2003e48c 	.word	0x2003e48c

000d8648 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d8648:	4b01      	ldr	r3, [pc, #4]	; (d8650 <_ZN9TimeClass6endDSTEv+0x8>)
   d864a:	2200      	movs	r2, #0
   d864c:	601a      	str	r2, [r3, #0]
   d864e:	4770      	bx	lr
   d8650:	2003e48c 	.word	0x2003e48c

000d8654 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8654:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d8656:	f7fe f951 	bl	d68fc <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d865a:	2200      	movs	r2, #0
   d865c:	4611      	mov	r1, r2
   d865e:	4610      	mov	r0, r2
}
   d8660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8664:	f7fe bb02 	b.w	d6c6c <system_notify_time_changed>

000d8668 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8668:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d866a:	4b0e      	ldr	r3, [pc, #56]	; (d86a4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d866c:	681b      	ldr	r3, [r3, #0]
   d866e:	4419      	add	r1, r3
   d8670:	4b0d      	ldr	r3, [pc, #52]	; (d86a8 <_ZN9TimeClass7timeStrEl+0x40>)
   d8672:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8674:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d8676:	a802      	add	r0, sp, #8
   d8678:	4419      	add	r1, r3
   d867a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d867e:	f001 fabd 	bl	d9bfc <localtime>
        char* ascstr = asctime(calendar_time);
   d8682:	f001 f9c3 	bl	d9a0c <asctime>
   d8686:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d8688:	f002 fb80 	bl	dad8c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d868c:	4428      	add	r0, r5
   d868e:	2300      	movs	r3, #0
   d8690:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d8694:	4629      	mov	r1, r5
   d8696:	4620      	mov	r0, r4
   d8698:	f7ff fe62 	bl	d8360 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d869c:	4620      	mov	r0, r4
   d869e:	b003      	add	sp, #12
   d86a0:	bd30      	pop	{r4, r5, pc}
   d86a2:	bf00      	nop
   d86a4:	2003e494 	.word	0x2003e494
   d86a8:	2003e48c 	.word	0x2003e48c

000d86ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d86ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d86b0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d86b2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d86b4:	4607      	mov	r7, r0
   d86b6:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d86b8:	4620      	mov	r0, r4
   d86ba:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d86bc:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d86be:	f001 fe2d 	bl	da31c <strcpy>
    size_t len = strlen(format_str);
   d86c2:	4620      	mov	r0, r4
   d86c4:	f002 fb62 	bl	dad8c <strlen>
   d86c8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d86ca:	b925      	cbnz	r5, d86d6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d86cc:	4924      	ldr	r1, [pc, #144]	; (d8760 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d86ce:	a803      	add	r0, sp, #12
   d86d0:	f001 fe24 	bl	da31c <strcpy>
   d86d4:	e013      	b.n	d86fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d86d6:	213c      	movs	r1, #60	; 0x3c
   d86d8:	fb95 f2f1 	sdiv	r2, r5, r1
   d86dc:	2a00      	cmp	r2, #0
   d86de:	bfb8      	it	lt
   d86e0:	4252      	neglt	r2, r2
   d86e2:	fb92 f3f1 	sdiv	r3, r2, r1
   d86e6:	fb01 2213 	mls	r2, r1, r3, r2
   d86ea:	9200      	str	r2, [sp, #0]
   d86ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d86f0:	4a1c      	ldr	r2, [pc, #112]	; (d8764 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d86f2:	fb95 f3f3 	sdiv	r3, r5, r3
   d86f6:	2110      	movs	r1, #16
   d86f8:	a803      	add	r0, sp, #12
   d86fa:	f7fe fbbd 	bl	d6e78 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d86fe:	4625      	mov	r5, r4
   d8700:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8702:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d8706:	45b2      	cmp	sl, r6
   d8708:	d91b      	bls.n	d8742 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d870a:	782b      	ldrb	r3, [r5, #0]
   d870c:	2b25      	cmp	r3, #37	; 0x25
   d870e:	d116      	bne.n	d873e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d8710:	786b      	ldrb	r3, [r5, #1]
   d8712:	2b7a      	cmp	r3, #122	; 0x7a
   d8714:	d113      	bne.n	d873e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d8716:	a803      	add	r0, sp, #12
   d8718:	f002 fb38 	bl	dad8c <strlen>
   d871c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d871e:	4430      	add	r0, r6
   d8720:	ebc6 020a 	rsb	r2, r6, sl
   d8724:	1ca9      	adds	r1, r5, #2
   d8726:	4420      	add	r0, r4
   d8728:	f001 fb64 	bl	d9df4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d872c:	4642      	mov	r2, r8
   d872e:	a903      	add	r1, sp, #12
   d8730:	4628      	mov	r0, r5
   d8732:	f001 fb5f 	bl	d9df4 <memcpy>
            len = strlen(format_str);
   d8736:	4620      	mov	r0, r4
   d8738:	f002 fb28 	bl	dad8c <strlen>
   d873c:	4680      	mov	r8, r0
   d873e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8740:	e7de      	b.n	d8700 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d8742:	464b      	mov	r3, r9
   d8744:	4622      	mov	r2, r4
   d8746:	2132      	movs	r1, #50	; 0x32
   d8748:	a807      	add	r0, sp, #28
   d874a:	f001 fe6b 	bl	da424 <strftime>
    return String(buf);
   d874e:	a907      	add	r1, sp, #28
   d8750:	4638      	mov	r0, r7
   d8752:	f7ff fe05 	bl	d8360 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8756:	4638      	mov	r0, r7
   d8758:	b024      	add	sp, #144	; 0x90
   d875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d875e:	bf00      	nop
   d8760:	000ddf15 	.word	0x000ddf15
   d8764:	000dd924 	.word	0x000dd924

000d8768 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d8768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d876a:	4605      	mov	r5, r0
   d876c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d876e:	461c      	mov	r4, r3
   d8770:	b913      	cbnz	r3, d8778 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d8772:	4b12      	ldr	r3, [pc, #72]	; (d87bc <_ZN9TimeClass6formatElPKc+0x54>)
   d8774:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d8776:	b12c      	cbz	r4, d8784 <_ZN9TimeClass6formatElPKc+0x1c>
   d8778:	4b11      	ldr	r3, [pc, #68]	; (d87c0 <_ZN9TimeClass6formatElPKc+0x58>)
   d877a:	4620      	mov	r0, r4
   d877c:	6819      	ldr	r1, [r3, #0]
   d877e:	f001 fdc3 	bl	da308 <strcmp>
   d8782:	b920      	cbnz	r0, d878e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d8784:	9901      	ldr	r1, [sp, #4]
   d8786:	4628      	mov	r0, r5
   d8788:	f7ff ff6e 	bl	d8668 <_ZN9TimeClass7timeStrEl>
   d878c:	e013      	b.n	d87b6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d878e:	4f0d      	ldr	r7, [pc, #52]	; (d87c4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d8790:	9a01      	ldr	r2, [sp, #4]
   d8792:	683b      	ldr	r3, [r7, #0]
   d8794:	4e0c      	ldr	r6, [pc, #48]	; (d87c8 <_ZN9TimeClass6formatElPKc+0x60>)
   d8796:	441a      	add	r2, r3
   d8798:	6833      	ldr	r3, [r6, #0]
   d879a:	a802      	add	r0, sp, #8
   d879c:	4413      	add	r3, r2
   d879e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d87a2:	f001 fa2b 	bl	d9bfc <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d87a6:	683a      	ldr	r2, [r7, #0]
   d87a8:	6833      	ldr	r3, [r6, #0]
   d87aa:	4601      	mov	r1, r0
   d87ac:	4413      	add	r3, r2
   d87ae:	4628      	mov	r0, r5
   d87b0:	4622      	mov	r2, r4
   d87b2:	f7ff ff7b 	bl	d86ac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d87b6:	4628      	mov	r0, r5
   d87b8:	b003      	add	sp, #12
   d87ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d87bc:	2003e488 	.word	0x2003e488
   d87c0:	2003df98 	.word	0x2003df98
   d87c4:	2003e494 	.word	0x2003e494
   d87c8:	2003e48c 	.word	0x2003e48c

000d87cc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d87cc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d87ce:	2000      	movs	r0, #0
   d87d0:	f7fe f89c 	bl	d690c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d87d4:	4604      	mov	r4, r0
   d87d6:	b968      	cbnz	r0, d87f4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d87d8:	f7fe fa08 	bl	d6bec <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d87dc:	2801      	cmp	r0, #1
   d87de:	d10b      	bne.n	d87f8 <_ZN9TimeClass7isValidEv+0x2c>
   d87e0:	4620      	mov	r0, r4
   d87e2:	f7fe fa3b 	bl	d6c5c <system_thread_get_state>
   d87e6:	b938      	cbnz	r0, d87f8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d87e8:	f7ff feae 	bl	d8548 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d87ec:	b930      	cbnz	r0, d87fc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d87ee:	f7fe fa73 	bl	d6cd8 <spark_process>
   d87f2:	e7f9      	b.n	d87e8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d87f4:	2001      	movs	r0, #1
   d87f6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d87f8:	2000      	movs	r0, #0
   d87fa:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d87fc:	f7ff fea4 	bl	d8548 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8800:	2000      	movs	r0, #0
   d8802:	f7fe f883 	bl	d690c <HAL_RTC_Time_Is_Valid>
   d8806:	3000      	adds	r0, #0
   d8808:	bf18      	it	ne
   d880a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d880c:	bd10      	pop	{r4, pc}

000d880e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d880e:	b508      	push	{r3, lr}
    (void)isValid();
   d8810:	f7ff ffdc 	bl	d87cc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8818:	f7fe b868 	b.w	d68ec <HAL_RTC_Get_UnixTime>

000d881c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d881c:	b508      	push	{r3, lr}
	return hour(now());
   d881e:	f7ff fff6 	bl	d880e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8822:	f7ff fe5f 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d8826:	4b01      	ldr	r3, [pc, #4]	; (d882c <_ZN9TimeClass4hourEv+0x10>)
   d8828:	6898      	ldr	r0, [r3, #8]
   d882a:	bd08      	pop	{r3, pc}
   d882c:	2003e460 	.word	0x2003e460

000d8830 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d8830:	b508      	push	{r3, lr}
	return minute(now());
   d8832:	f7ff ffec 	bl	d880e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8836:	f7ff fe55 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d883a:	4b01      	ldr	r3, [pc, #4]	; (d8840 <_ZN9TimeClass6minuteEv+0x10>)
   d883c:	6858      	ldr	r0, [r3, #4]
   d883e:	bd08      	pop	{r3, pc}
   d8840:	2003e460 	.word	0x2003e460

000d8844 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8844:	b508      	push	{r3, lr}
	return day(now());
   d8846:	f7ff ffe2 	bl	d880e <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d884a:	f7ff fe4b 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d884e:	4b01      	ldr	r3, [pc, #4]	; (d8854 <_ZN9TimeClass3dayEv+0x10>)
   d8850:	68d8      	ldr	r0, [r3, #12]
   d8852:	bd08      	pop	{r3, pc}
   d8854:	2003e460 	.word	0x2003e460

000d8858 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d8858:	b508      	push	{r3, lr}
	return weekday(now());
   d885a:	f7ff ffd8 	bl	d880e <_ZN9TimeClass3nowEv>
}
   d885e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d8862:	f7ff be8f 	b.w	d8584 <_ZN9TimeClass7weekdayEl>

000d8866 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d8866:	b508      	push	{r3, lr}
	return month(now());
   d8868:	f7ff ffd1 	bl	d880e <_ZN9TimeClass3nowEv>
}
   d886c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d8870:	f7ff be92 	b.w	d8598 <_ZN9TimeClass5monthEl>

000d8874 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d8874:	b508      	push	{r3, lr}
	return year(now());
   d8876:	f7ff ffca 	bl	d880e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d887a:	f7ff fe33 	bl	d84e4 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d887e:	4b01      	ldr	r3, [pc, #4]	; (d8884 <_ZN9TimeClass4yearEv+0x10>)
   d8880:	6958      	ldr	r0, [r3, #20]
   d8882:	bd08      	pop	{r3, pc}
   d8884:	2003e460 	.word	0x2003e460

000d8888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8888:	4b02      	ldr	r3, [pc, #8]	; (d8894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d888a:	681a      	ldr	r2, [r3, #0]
   d888c:	4b02      	ldr	r3, [pc, #8]	; (d8898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d888e:	601a      	str	r2, [r3, #0]
   d8890:	4770      	bx	lr
   d8892:	bf00      	nop
   d8894:	2003df98 	.word	0x2003df98
   d8898:	2003e488 	.word	0x2003e488

000d889c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d889c:	4770      	bx	lr

000d889e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d889e:	7441      	strb	r1, [r0, #17]
   d88a0:	4770      	bx	lr

000d88a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d88a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d88a4:	7c00      	ldrb	r0, [r0, #16]
   d88a6:	f7fe f951 	bl	d6b4c <HAL_USART_Available_Data_For_Write>
}
   d88aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88ae:	bd08      	pop	{r3, pc}

000d88b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d88b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d88b2:	7c00      	ldrb	r0, [r0, #16]
   d88b4:	f7fe f922 	bl	d6afc <HAL_USART_Available_Data>
}
   d88b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88bc:	bd08      	pop	{r3, pc}

000d88be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d88be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d88c0:	7c00      	ldrb	r0, [r0, #16]
   d88c2:	f7fe f92b 	bl	d6b1c <HAL_USART_Peek_Data>
}
   d88c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d88ca:	bf28      	it	cs
   d88cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d88d0:	bd08      	pop	{r3, pc}

000d88d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d88d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d88d4:	7c00      	ldrb	r0, [r0, #16]
   d88d6:	f7fe f919 	bl	d6b0c <HAL_USART_Read_Data>
}
   d88da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d88de:	bf28      	it	cs
   d88e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d88e4:	bd08      	pop	{r3, pc}

000d88e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d88e6:	7c00      	ldrb	r0, [r0, #16]
   d88e8:	f7fe b920 	b.w	d6b2c <HAL_USART_Flush_Data>

000d88ec <_ZN11USARTSerialD0Ev>:
   d88ec:	b510      	push	{r4, lr}
   d88ee:	2114      	movs	r1, #20
   d88f0:	4604      	mov	r4, r0
   d88f2:	f000 fa3e 	bl	d8d72 <_ZdlPvj>
   d88f6:	4620      	mov	r0, r4
   d88f8:	bd10      	pop	{r4, pc}

000d88fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d88fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d88fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d88fe:	4604      	mov	r4, r0
   d8900:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8902:	b925      	cbnz	r5, d890e <_ZN11USARTSerial5writeEh+0x14>
   d8904:	7c00      	ldrb	r0, [r0, #16]
   d8906:	f7fe f921 	bl	d6b4c <HAL_USART_Available_Data_For_Write>
   d890a:	2800      	cmp	r0, #0
   d890c:	dd05      	ble.n	d891a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d890e:	4631      	mov	r1, r6
   d8910:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8916:	f7fe b8e9 	b.w	d6aec <HAL_USART_Write_Data>
  }
  return 0;
}
   d891a:	4628      	mov	r0, r5
   d891c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8920 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8920:	b510      	push	{r4, lr}
   d8922:	4604      	mov	r4, r0
   d8924:	4608      	mov	r0, r1
   d8926:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8928:	2200      	movs	r2, #0
   d892a:	6062      	str	r2, [r4, #4]
   d892c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8930:	60a2      	str	r2, [r4, #8]
   d8932:	4a05      	ldr	r2, [pc, #20]	; (d8948 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8934:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8936:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8938:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d893a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d893c:	461a      	mov	r2, r3
   d893e:	f7fe f8cd 	bl	d6adc <HAL_USART_Init>
}
   d8942:	4620      	mov	r0, r4
   d8944:	bd10      	pop	{r4, pc}
   d8946:	bf00      	nop
   d8948:	000dd954 	.word	0x000dd954

000d894c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d894c:	7c00      	ldrb	r0, [r0, #16]
   d894e:	f7fe b8f5 	b.w	d6b3c <HAL_USART_Is_Enabled>
	...

000d8954 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8954:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8956:	4d0c      	ldr	r5, [pc, #48]	; (d8988 <_Z22__fetch_global_Serial1v+0x34>)
   d8958:	6829      	ldr	r1, [r5, #0]
   d895a:	f011 0401 	ands.w	r4, r1, #1
   d895e:	d111      	bne.n	d8984 <_Z22__fetch_global_Serial1v+0x30>
   d8960:	4628      	mov	r0, r5
   d8962:	f7fb fba0 	bl	d40a6 <__cxa_guard_acquire>
   d8966:	b168      	cbz	r0, d8984 <_Z22__fetch_global_Serial1v+0x30>
   d8968:	4a08      	ldr	r2, [pc, #32]	; (d898c <_Z22__fetch_global_Serial1v+0x38>)
   d896a:	4b09      	ldr	r3, [pc, #36]	; (d8990 <_Z22__fetch_global_Serial1v+0x3c>)
   d896c:	4809      	ldr	r0, [pc, #36]	; (d8994 <_Z22__fetch_global_Serial1v+0x40>)
   d896e:	4621      	mov	r1, r4
   d8970:	f7ff ffd6 	bl	d8920 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8974:	4628      	mov	r0, r5
   d8976:	f7fb fb9b 	bl	d40b0 <__cxa_guard_release>
   d897a:	4a07      	ldr	r2, [pc, #28]	; (d8998 <_Z22__fetch_global_Serial1v+0x44>)
   d897c:	4907      	ldr	r1, [pc, #28]	; (d899c <_Z22__fetch_global_Serial1v+0x48>)
   d897e:	4805      	ldr	r0, [pc, #20]	; (d8994 <_Z22__fetch_global_Serial1v+0x40>)
   d8980:	f000 f9f2 	bl	d8d68 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8984:	4803      	ldr	r0, [pc, #12]	; (d8994 <_Z22__fetch_global_Serial1v+0x40>)
   d8986:	bd38      	pop	{r3, r4, r5, pc}
   d8988:	2003e530 	.word	0x2003e530
   d898c:	2003e534 	.word	0x2003e534
   d8990:	2003e4ac 	.word	0x2003e4ac
   d8994:	2003e498 	.word	0x2003e498
   d8998:	2003e088 	.word	0x2003e088
   d899c:	000d889d 	.word	0x000d889d

000d89a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d89a0:	7441      	strb	r1, [r0, #17]
   d89a2:	4770      	bx	lr

000d89a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d89a4:	4770      	bx	lr

000d89a6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d89a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d89a8:	2100      	movs	r1, #0
   d89aa:	7c00      	ldrb	r0, [r0, #16]
   d89ac:	f7fe f8f6 	bl	d6b9c <HAL_USB_USART_Receive_Data>
}
   d89b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89b4:	bf28      	it	cs
   d89b6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d89ba:	bd08      	pop	{r3, pc}

000d89bc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d89bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d89be:	2101      	movs	r1, #1
   d89c0:	7c00      	ldrb	r0, [r0, #16]
   d89c2:	f7fe f8eb 	bl	d6b9c <HAL_USB_USART_Receive_Data>
}
   d89c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d89ca:	bf28      	it	cs
   d89cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d89d0:	bd08      	pop	{r3, pc}

000d89d2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d89d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d89d4:	7c00      	ldrb	r0, [r0, #16]
   d89d6:	f7fe f8d9 	bl	d6b8c <HAL_USB_USART_Available_Data_For_Write>
}
   d89da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89de:	bd08      	pop	{r3, pc}

000d89e0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d89e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d89e2:	7c00      	ldrb	r0, [r0, #16]
   d89e4:	f7fe f8ca 	bl	d6b7c <HAL_USB_USART_Available_Data>
}
   d89e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d89ec:	bd08      	pop	{r3, pc}

000d89ee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d89ee:	7c00      	ldrb	r0, [r0, #16]
   d89f0:	f7fe b8e4 	b.w	d6bbc <HAL_USB_USART_Flush_Data>

000d89f4 <_ZN9USBSerialD0Ev>:
   d89f4:	b510      	push	{r4, lr}
   d89f6:	2114      	movs	r1, #20
   d89f8:	4604      	mov	r4, r0
   d89fa:	f000 f9ba 	bl	d8d72 <_ZdlPvj>
   d89fe:	4620      	mov	r0, r4
   d8a00:	bd10      	pop	{r4, pc}

000d8a02 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8a02:	b538      	push	{r3, r4, r5, lr}
   d8a04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8a06:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8a08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8a0a:	f7fe f8bf 	bl	d6b8c <HAL_USB_USART_Available_Data_For_Write>
   d8a0e:	2800      	cmp	r0, #0
   d8a10:	dc01      	bgt.n	d8a16 <_ZN9USBSerial5writeEh+0x14>
   d8a12:	7c60      	ldrb	r0, [r4, #17]
   d8a14:	b128      	cbz	r0, d8a22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8a16:	4629      	mov	r1, r5
   d8a18:	7c20      	ldrb	r0, [r4, #16]
   d8a1a:	f7fe f8c7 	bl	d6bac <HAL_USB_USART_Send_Data>
   d8a1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8a22:	bd38      	pop	{r3, r4, r5, pc}

000d8a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a24:	b510      	push	{r4, lr}
   d8a26:	4604      	mov	r4, r0
   d8a28:	2300      	movs	r3, #0
   d8a2a:	6063      	str	r3, [r4, #4]
   d8a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8a30:	60a3      	str	r3, [r4, #8]
   d8a32:	4b05      	ldr	r3, [pc, #20]	; (d8a48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8a34:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8a36:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8a38:	4608      	mov	r0, r1
{
  _serial = serial;
   d8a3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8a3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8a3e:	4611      	mov	r1, r2
   d8a40:	f7fe f88c 	bl	d6b5c <HAL_USB_USART_Init>
}
   d8a44:	4620      	mov	r0, r4
   d8a46:	bd10      	pop	{r4, pc}
   d8a48:	000dd984 	.word	0x000dd984

000d8a4c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8a4c:	2200      	movs	r2, #0
   d8a4e:	7c00      	ldrb	r0, [r0, #16]
   d8a50:	f7fe b88c 	b.w	d6b6c <HAL_USB_USART_Begin>

000d8a54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8a54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8a56:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8a58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8a5a:	2100      	movs	r1, #0
   d8a5c:	f001 f9d5 	bl	d9e0a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8a60:	4620      	mov	r0, r4
   d8a62:	bd10      	pop	{r4, pc}

000d8a64 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8a64:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a66:	4d0e      	ldr	r5, [pc, #56]	; (d8aa0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8a68:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8a6a:	a801      	add	r0, sp, #4
   d8a6c:	f7ff fff2 	bl	d8a54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a70:	6829      	ldr	r1, [r5, #0]
   d8a72:	f011 0401 	ands.w	r4, r1, #1
   d8a76:	d110      	bne.n	d8a9a <_Z16_fetch_usbserialv+0x36>
   d8a78:	4628      	mov	r0, r5
   d8a7a:	f7fb fb14 	bl	d40a6 <__cxa_guard_acquire>
   d8a7e:	b160      	cbz	r0, d8a9a <_Z16_fetch_usbserialv+0x36>
   d8a80:	aa01      	add	r2, sp, #4
   d8a82:	4621      	mov	r1, r4
   d8a84:	4807      	ldr	r0, [pc, #28]	; (d8aa4 <_Z16_fetch_usbserialv+0x40>)
   d8a86:	f7ff ffcd 	bl	d8a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8a8a:	4628      	mov	r0, r5
   d8a8c:	f7fb fb10 	bl	d40b0 <__cxa_guard_release>
   d8a90:	4a05      	ldr	r2, [pc, #20]	; (d8aa8 <_Z16_fetch_usbserialv+0x44>)
   d8a92:	4906      	ldr	r1, [pc, #24]	; (d8aac <_Z16_fetch_usbserialv+0x48>)
   d8a94:	4803      	ldr	r0, [pc, #12]	; (d8aa4 <_Z16_fetch_usbserialv+0x40>)
   d8a96:	f000 f967 	bl	d8d68 <__aeabi_atexit>
	return _usbserial;
}
   d8a9a:	4802      	ldr	r0, [pc, #8]	; (d8aa4 <_Z16_fetch_usbserialv+0x40>)
   d8a9c:	b007      	add	sp, #28
   d8a9e:	bd30      	pop	{r4, r5, pc}
   d8aa0:	2003e5b8 	.word	0x2003e5b8
   d8aa4:	2003e5bc 	.word	0x2003e5bc
   d8aa8:	2003e088 	.word	0x2003e088
   d8aac:	000d89a5 	.word	0x000d89a5

000d8ab0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8ab0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8ab2:	4b0c      	ldr	r3, [pc, #48]	; (d8ae4 <serialEventRun+0x34>)
   d8ab4:	b133      	cbz	r3, d8ac4 <serialEventRun+0x14>
   d8ab6:	f7ff ffd5 	bl	d8a64 <_Z16_fetch_usbserialv>
   d8aba:	6803      	ldr	r3, [r0, #0]
   d8abc:	691b      	ldr	r3, [r3, #16]
   d8abe:	4798      	blx	r3
   d8ac0:	2800      	cmp	r0, #0
   d8ac2:	dc09      	bgt.n	d8ad8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8ac4:	4b08      	ldr	r3, [pc, #32]	; (d8ae8 <serialEventRun+0x38>)
   d8ac6:	b163      	cbz	r3, d8ae2 <serialEventRun+0x32>
   d8ac8:	f7ff ff44 	bl	d8954 <_Z22__fetch_global_Serial1v>
   d8acc:	6803      	ldr	r3, [r0, #0]
   d8ace:	691b      	ldr	r3, [r3, #16]
   d8ad0:	4798      	blx	r3
   d8ad2:	2800      	cmp	r0, #0
   d8ad4:	dc03      	bgt.n	d8ade <serialEventRun+0x2e>
   d8ad6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8ad8:	f3af 8000 	nop.w
   d8adc:	e7f2      	b.n	d8ac4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8ade:	f3af 8000 	nop.w
   d8ae2:	bd08      	pop	{r3, pc}
	...

000d8aec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8aec:	b508      	push	{r3, lr}
	serialEventRun();
   d8aee:	f7ff ffdf 	bl	d8ab0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8af2:	f7fd fef3 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8af6:	4b01      	ldr	r3, [pc, #4]	; (d8afc <_post_loop+0x10>)
   d8af8:	6018      	str	r0, [r3, #0]
   d8afa:	bd08      	pop	{r3, pc}
   d8afc:	2003e5d4 	.word	0x2003e5d4

000d8b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8b00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b02:	2300      	movs	r3, #0
   d8b04:	9300      	str	r3, [sp, #0]
   d8b06:	461a      	mov	r2, r3
   d8b08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b0c:	f7fe f8c0 	bl	d6c90 <system_ctrl_set_result>
}
   d8b10:	b003      	add	sp, #12
   d8b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d8b18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8b1a:	8843      	ldrh	r3, [r0, #2]
   d8b1c:	2b0a      	cmp	r3, #10
   d8b1e:	d008      	beq.n	d8b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8b20:	2b50      	cmp	r3, #80	; 0x50
   d8b22:	d109      	bne.n	d8b38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8b24:	4b09      	ldr	r3, [pc, #36]	; (d8b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8b26:	681b      	ldr	r3, [r3, #0]
   d8b28:	b13b      	cbz	r3, d8b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8b2a:	b003      	add	sp, #12
   d8b2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8b30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8b32:	f7ff ffe5 	bl	d8b00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8b36:	e006      	b.n	d8b46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b38:	2300      	movs	r3, #0
   d8b3a:	9300      	str	r3, [sp, #0]
   d8b3c:	461a      	mov	r2, r3
   d8b3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b42:	f7fe f8a5 	bl	d6c90 <system_ctrl_set_result>
        break;
    }
}
   d8b46:	b003      	add	sp, #12
   d8b48:	f85d fb04 	ldr.w	pc, [sp], #4
   d8b4c:	2003e5d0 	.word	0x2003e5d0

000d8b50 <module_user_init_hook>:

void module_user_init_hook()
{
   d8b50:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8b52:	f7fd feb3 	bl	d68bc <HAL_RNG_GetRandomNumber>
   d8b56:	4604      	mov	r4, r0
    srand(seed);
   d8b58:	f001 fbae 	bl	da2b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8b5c:	4b07      	ldr	r3, [pc, #28]	; (d8b7c <module_user_init_hook+0x2c>)
   d8b5e:	b113      	cbz	r3, d8b66 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8b60:	4620      	mov	r0, r4
   d8b62:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8b66:	2100      	movs	r1, #0
   d8b68:	4804      	ldr	r0, [pc, #16]	; (d8b7c <module_user_init_hook+0x2c>)
   d8b6a:	f7fe f905 	bl	d6d78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8b6e:	2100      	movs	r1, #0
   d8b70:	4803      	ldr	r0, [pc, #12]	; (d8b80 <module_user_init_hook+0x30>)
}
   d8b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8b76:	f7fe b881 	b.w	d6c7c <system_ctrl_set_app_request_handler>
   d8b7a:	bf00      	nop
   d8b7c:	00000000 	.word	0x00000000
   d8b80:	000d8b19 	.word	0x000d8b19

000d8b84 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d8b84:	b508      	push	{r3, lr}
   d8b86:	4b02      	ldr	r3, [pc, #8]	; (d8b90 <spark_protocol_instance+0xc>)
   d8b88:	681b      	ldr	r3, [r3, #0]
   d8b8a:	681b      	ldr	r3, [r3, #0]
   d8b8c:	9301      	str	r3, [sp, #4]
   d8b8e:	bd08      	pop	{r3, pc}
   d8b90:	0003025c 	.word	0x0003025c

000d8b94 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8b94:	b508      	push	{r3, lr}
   d8b96:	4b02      	ldr	r3, [pc, #8]	; (d8ba0 <spark_protocol_set_product_id+0xc>)
   d8b98:	681b      	ldr	r3, [r3, #0]
   d8b9a:	685b      	ldr	r3, [r3, #4]
   d8b9c:	9301      	str	r3, [sp, #4]
   d8b9e:	bd08      	pop	{r3, pc}
   d8ba0:	0003025c 	.word	0x0003025c

000d8ba4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d8ba4:	b508      	push	{r3, lr}
   d8ba6:	4b02      	ldr	r3, [pc, #8]	; (d8bb0 <spark_protocol_set_product_firmware_version+0xc>)
   d8ba8:	681b      	ldr	r3, [r3, #0]
   d8baa:	689b      	ldr	r3, [r3, #8]
   d8bac:	9301      	str	r3, [sp, #4]
   d8bae:	bd08      	pop	{r3, pc}
   d8bb0:	0003025c 	.word	0x0003025c

000d8bb4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8bb4:	b510      	push	{r4, lr}
   d8bb6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8bb8:	480f      	ldr	r0, [pc, #60]	; (d8bf8 <pinAvailable+0x44>)
   d8bba:	f7ff fb87 	bl	d82cc <_ZN8SPIClass9isEnabledEv>
   d8bbe:	b128      	cbz	r0, d8bcc <pinAvailable+0x18>
   d8bc0:	f1a4 030b 	sub.w	r3, r4, #11
   d8bc4:	2b02      	cmp	r3, #2
   d8bc6:	d801      	bhi.n	d8bcc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8bc8:	2000      	movs	r0, #0
   d8bca:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8bcc:	f000 f86a 	bl	d8ca4 <_Z19__fetch_global_Wirev>
   d8bd0:	f7fe febf 	bl	d7952 <_ZN7TwoWire9isEnabledEv>
   d8bd4:	b108      	cbz	r0, d8bda <pinAvailable+0x26>
   d8bd6:	2c01      	cmp	r4, #1
   d8bd8:	d9f6      	bls.n	d8bc8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8bda:	f7ff febb 	bl	d8954 <_Z22__fetch_global_Serial1v>
   d8bde:	f7ff feb5 	bl	d894c <_ZN11USARTSerial9isEnabledEv>
   d8be2:	b118      	cbz	r0, d8bec <pinAvailable+0x38>
   d8be4:	f1a4 0309 	sub.w	r3, r4, #9
   d8be8:	2b01      	cmp	r3, #1
   d8bea:	d9ed      	bls.n	d8bc8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8bec:	2c23      	cmp	r4, #35	; 0x23
   d8bee:	bf8c      	ite	hi
   d8bf0:	2000      	movhi	r0, #0
   d8bf2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8bf4:	bd10      	pop	{r4, pc}
   d8bf6:	bf00      	nop
   d8bf8:	2003e608 	.word	0x2003e608

000d8bfc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8bfc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8bfe:	b538      	push	{r3, r4, r5, lr}
   d8c00:	4604      	mov	r4, r0
   d8c02:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8c04:	d80a      	bhi.n	d8c1c <pinMode+0x20>
   d8c06:	29ff      	cmp	r1, #255	; 0xff
   d8c08:	d008      	beq.n	d8c1c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8c0a:	f7ff ffd3 	bl	d8bb4 <pinAvailable>
   d8c0e:	b128      	cbz	r0, d8c1c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8c10:	4629      	mov	r1, r5
   d8c12:	4620      	mov	r0, r4
}
   d8c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8c18:	f7fd be98 	b.w	d694c <HAL_Pin_Mode>
   d8c1c:	bd38      	pop	{r3, r4, r5, pc}

000d8c1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8c1e:	b538      	push	{r3, r4, r5, lr}
   d8c20:	4604      	mov	r4, r0
   d8c22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8c24:	f7fd fe9a 	bl	d695c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8c28:	28ff      	cmp	r0, #255	; 0xff
   d8c2a:	d010      	beq.n	d8c4e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8c2c:	2806      	cmp	r0, #6
   d8c2e:	d804      	bhi.n	d8c3a <digitalWrite+0x1c>
   d8c30:	234d      	movs	r3, #77	; 0x4d
   d8c32:	fa23 f000 	lsr.w	r0, r3, r0
   d8c36:	07c3      	lsls	r3, r0, #31
   d8c38:	d409      	bmi.n	d8c4e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8c3a:	4620      	mov	r0, r4
   d8c3c:	f7ff ffba 	bl	d8bb4 <pinAvailable>
   d8c40:	b128      	cbz	r0, d8c4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8c42:	4629      	mov	r1, r5
   d8c44:	4620      	mov	r0, r4
}
   d8c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8c4a:	f7fd be8f 	b.w	d696c <HAL_GPIO_Write>
   d8c4e:	bd38      	pop	{r3, r4, r5, pc}

000d8c50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8c50:	b510      	push	{r4, lr}
   d8c52:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8c54:	f7fd fe82 	bl	d695c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8c58:	3804      	subs	r0, #4
   d8c5a:	b2c0      	uxtb	r0, r0
   d8c5c:	2801      	cmp	r0, #1
   d8c5e:	d908      	bls.n	d8c72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8c60:	4620      	mov	r0, r4
   d8c62:	f7ff ffa7 	bl	d8bb4 <pinAvailable>
   d8c66:	b120      	cbz	r0, d8c72 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8c68:	4620      	mov	r0, r4
}
   d8c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8c6e:	f7fd be85 	b.w	d697c <HAL_GPIO_Read>
}
   d8c72:	2000      	movs	r0, #0
   d8c74:	bd10      	pop	{r4, pc}

000d8c76 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8c76:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8c78:	b510      	push	{r4, lr}
   d8c7a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8c7c:	bf9c      	itt	ls
   d8c7e:	340e      	addls	r4, #14
   d8c80:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8c82:	4620      	mov	r0, r4
   d8c84:	f7ff ff96 	bl	d8bb4 <pinAvailable>
   d8c88:	b150      	cbz	r0, d8ca0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8c8a:	2103      	movs	r1, #3
   d8c8c:	4620      	mov	r0, r4
   d8c8e:	f7fd fe55 	bl	d693c <HAL_Validate_Pin_Function>
   d8c92:	2803      	cmp	r0, #3
   d8c94:	d104      	bne.n	d8ca0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8c96:	4620      	mov	r0, r4
}
   d8c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8c9c:	f7fd be86 	b.w	d69ac <HAL_ADC_Read>
}
   d8ca0:	2000      	movs	r0, #0
   d8ca2:	bd10      	pop	{r4, pc}

000d8ca4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8ca4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8ca6:	4d0b      	ldr	r5, [pc, #44]	; (d8cd4 <_Z19__fetch_global_Wirev+0x30>)
   d8ca8:	6829      	ldr	r1, [r5, #0]
   d8caa:	f011 0401 	ands.w	r4, r1, #1
   d8cae:	d10f      	bne.n	d8cd0 <_Z19__fetch_global_Wirev+0x2c>
   d8cb0:	4628      	mov	r0, r5
   d8cb2:	f7fb f9f8 	bl	d40a6 <__cxa_guard_acquire>
   d8cb6:	b158      	cbz	r0, d8cd0 <_Z19__fetch_global_Wirev+0x2c>
   d8cb8:	4621      	mov	r1, r4
   d8cba:	4807      	ldr	r0, [pc, #28]	; (d8cd8 <_Z19__fetch_global_Wirev+0x34>)
   d8cbc:	f7fe fe18 	bl	d78f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8cc0:	4628      	mov	r0, r5
   d8cc2:	f7fb f9f5 	bl	d40b0 <__cxa_guard_release>
   d8cc6:	4a05      	ldr	r2, [pc, #20]	; (d8cdc <_Z19__fetch_global_Wirev+0x38>)
   d8cc8:	4905      	ldr	r1, [pc, #20]	; (d8ce0 <_Z19__fetch_global_Wirev+0x3c>)
   d8cca:	4803      	ldr	r0, [pc, #12]	; (d8cd8 <_Z19__fetch_global_Wirev+0x34>)
   d8ccc:	f000 f84c 	bl	d8d68 <__aeabi_atexit>
	return wire;
}
   d8cd0:	4801      	ldr	r0, [pc, #4]	; (d8cd8 <_Z19__fetch_global_Wirev+0x34>)
   d8cd2:	bd38      	pop	{r3, r4, r5, pc}
   d8cd4:	2003e5d8 	.word	0x2003e5d8
   d8cd8:	2003e5f0 	.word	0x2003e5f0
   d8cdc:	2003e088 	.word	0x2003e088
   d8ce0:	000d7899 	.word	0x000d7899

000d8ce4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8ce4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d8ce6:	4c0b      	ldr	r4, [pc, #44]	; (d8d14 <_Z20__fetch_global_Wire1v+0x30>)
   d8ce8:	6823      	ldr	r3, [r4, #0]
   d8cea:	07db      	lsls	r3, r3, #31
   d8cec:	d40f      	bmi.n	d8d0e <_Z20__fetch_global_Wire1v+0x2a>
   d8cee:	4620      	mov	r0, r4
   d8cf0:	f7fb f9d9 	bl	d40a6 <__cxa_guard_acquire>
   d8cf4:	b158      	cbz	r0, d8d0e <_Z20__fetch_global_Wire1v+0x2a>
   d8cf6:	2101      	movs	r1, #1
   d8cf8:	4807      	ldr	r0, [pc, #28]	; (d8d18 <_Z20__fetch_global_Wire1v+0x34>)
   d8cfa:	f7fe fdf9 	bl	d78f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8cfe:	4620      	mov	r0, r4
   d8d00:	f7fb f9d6 	bl	d40b0 <__cxa_guard_release>
   d8d04:	4a05      	ldr	r2, [pc, #20]	; (d8d1c <_Z20__fetch_global_Wire1v+0x38>)
   d8d06:	4906      	ldr	r1, [pc, #24]	; (d8d20 <_Z20__fetch_global_Wire1v+0x3c>)
   d8d08:	4803      	ldr	r0, [pc, #12]	; (d8d18 <_Z20__fetch_global_Wire1v+0x34>)
   d8d0a:	f000 f82d 	bl	d8d68 <__aeabi_atexit>
	return wire;
}
   d8d0e:	4802      	ldr	r0, [pc, #8]	; (d8d18 <_Z20__fetch_global_Wire1v+0x34>)
   d8d10:	bd10      	pop	{r4, pc}
   d8d12:	bf00      	nop
   d8d14:	2003e604 	.word	0x2003e604
   d8d18:	2003e5dc 	.word	0x2003e5dc
   d8d1c:	2003e088 	.word	0x2003e088
   d8d20:	000d7899 	.word	0x000d7899

000d8d24 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d24:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8d26:	4c0c      	ldr	r4, [pc, #48]	; (d8d58 <_GLOBAL__sub_I_SPI+0x34>)
   d8d28:	4e0c      	ldr	r6, [pc, #48]	; (d8d5c <_GLOBAL__sub_I_SPI+0x38>)
   d8d2a:	4d0d      	ldr	r5, [pc, #52]	; (d8d60 <_GLOBAL__sub_I_SPI+0x3c>)
   d8d2c:	2100      	movs	r1, #0
   d8d2e:	4620      	mov	r0, r4
   d8d30:	f7ff fab8 	bl	d82a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d34:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d36:	4c0b      	ldr	r4, [pc, #44]	; (d8d64 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8d38:	4632      	mov	r2, r6
   d8d3a:	4629      	mov	r1, r5
   d8d3c:	f000 f814 	bl	d8d68 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8d40:	2101      	movs	r1, #1
   d8d42:	4620      	mov	r0, r4
   d8d44:	f7ff faae 	bl	d82a4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d48:	4632      	mov	r2, r6
   d8d4a:	4629      	mov	r1, r5
   d8d4c:	4620      	mov	r0, r4
   d8d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d52:	f000 b809 	b.w	d8d68 <__aeabi_atexit>
   d8d56:	bf00      	nop
   d8d58:	2003e608 	.word	0x2003e608
   d8d5c:	2003e088 	.word	0x2003e088
   d8d60:	000d8295 	.word	0x000d8295
   d8d64:	2003e618 	.word	0x2003e618

000d8d68 <__aeabi_atexit>:
   d8d68:	460b      	mov	r3, r1
   d8d6a:	4601      	mov	r1, r0
   d8d6c:	4618      	mov	r0, r3
   d8d6e:	f000 be8d 	b.w	d9a8c <__cxa_atexit>

000d8d72 <_ZdlPvj>:
   d8d72:	f7fb b994 	b.w	d409e <_ZdlPv>

000d8d76 <_ZSt25__throw_bad_function_callv>:
   d8d76:	b508      	push	{r3, lr}
   d8d78:	f7fe f88e 	bl	d6e98 <abort>

000d8d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8d7c:	4b24      	ldr	r3, [pc, #144]	; (d8e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8d7e:	681a      	ldr	r2, [r3, #0]
   d8d80:	07d0      	lsls	r0, r2, #31
   d8d82:	bf5c      	itt	pl
   d8d84:	2201      	movpl	r2, #1
   d8d86:	601a      	strpl	r2, [r3, #0]
   d8d88:	4b22      	ldr	r3, [pc, #136]	; (d8e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8d8a:	681a      	ldr	r2, [r3, #0]
   d8d8c:	07d1      	lsls	r1, r2, #31
   d8d8e:	bf5c      	itt	pl
   d8d90:	2201      	movpl	r2, #1
   d8d92:	601a      	strpl	r2, [r3, #0]
   d8d94:	4b20      	ldr	r3, [pc, #128]	; (d8e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8d96:	681a      	ldr	r2, [r3, #0]
   d8d98:	07d2      	lsls	r2, r2, #31
   d8d9a:	bf5c      	itt	pl
   d8d9c:	2201      	movpl	r2, #1
   d8d9e:	601a      	strpl	r2, [r3, #0]
   d8da0:	4b1e      	ldr	r3, [pc, #120]	; (d8e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8da2:	681a      	ldr	r2, [r3, #0]
   d8da4:	07d0      	lsls	r0, r2, #31
   d8da6:	bf5c      	itt	pl
   d8da8:	2201      	movpl	r2, #1
   d8daa:	601a      	strpl	r2, [r3, #0]
   d8dac:	4b1c      	ldr	r3, [pc, #112]	; (d8e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8dae:	681a      	ldr	r2, [r3, #0]
   d8db0:	07d1      	lsls	r1, r2, #31
   d8db2:	bf5c      	itt	pl
   d8db4:	2201      	movpl	r2, #1
   d8db6:	601a      	strpl	r2, [r3, #0]
   d8db8:	4b1a      	ldr	r3, [pc, #104]	; (d8e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8dba:	681a      	ldr	r2, [r3, #0]
   d8dbc:	07d2      	lsls	r2, r2, #31
   d8dbe:	bf5c      	itt	pl
   d8dc0:	2201      	movpl	r2, #1
   d8dc2:	601a      	strpl	r2, [r3, #0]
   d8dc4:	4b18      	ldr	r3, [pc, #96]	; (d8e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8dc6:	681a      	ldr	r2, [r3, #0]
   d8dc8:	07d0      	lsls	r0, r2, #31
   d8dca:	bf5c      	itt	pl
   d8dcc:	2201      	movpl	r2, #1
   d8dce:	601a      	strpl	r2, [r3, #0]
   d8dd0:	4b16      	ldr	r3, [pc, #88]	; (d8e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8dd2:	681a      	ldr	r2, [r3, #0]
   d8dd4:	07d1      	lsls	r1, r2, #31
   d8dd6:	bf5c      	itt	pl
   d8dd8:	2201      	movpl	r2, #1
   d8dda:	601a      	strpl	r2, [r3, #0]
   d8ddc:	4b14      	ldr	r3, [pc, #80]	; (d8e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8dde:	681a      	ldr	r2, [r3, #0]
   d8de0:	07d2      	lsls	r2, r2, #31
   d8de2:	bf5c      	itt	pl
   d8de4:	2201      	movpl	r2, #1
   d8de6:	601a      	strpl	r2, [r3, #0]
   d8de8:	4b12      	ldr	r3, [pc, #72]	; (d8e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8dea:	681a      	ldr	r2, [r3, #0]
   d8dec:	07d0      	lsls	r0, r2, #31
   d8dee:	bf5c      	itt	pl
   d8df0:	2201      	movpl	r2, #1
   d8df2:	601a      	strpl	r2, [r3, #0]
   d8df4:	4b10      	ldr	r3, [pc, #64]	; (d8e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8df6:	681a      	ldr	r2, [r3, #0]
   d8df8:	07d1      	lsls	r1, r2, #31
   d8dfa:	bf5c      	itt	pl
   d8dfc:	2201      	movpl	r2, #1
   d8dfe:	601a      	strpl	r2, [r3, #0]
   d8e00:	4b0e      	ldr	r3, [pc, #56]	; (d8e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8e02:	681a      	ldr	r2, [r3, #0]
   d8e04:	07d2      	lsls	r2, r2, #31
   d8e06:	bf5c      	itt	pl
   d8e08:	2201      	movpl	r2, #1
   d8e0a:	601a      	strpl	r2, [r3, #0]
   d8e0c:	4770      	bx	lr
   d8e0e:	bf00      	nop
   d8e10:	2003e654 	.word	0x2003e654
   d8e14:	2003e650 	.word	0x2003e650
   d8e18:	2003e64c 	.word	0x2003e64c
   d8e1c:	2003e648 	.word	0x2003e648
   d8e20:	2003e644 	.word	0x2003e644
   d8e24:	2003e640 	.word	0x2003e640
   d8e28:	2003e63c 	.word	0x2003e63c
   d8e2c:	2003e638 	.word	0x2003e638
   d8e30:	2003e634 	.word	0x2003e634
   d8e34:	2003e630 	.word	0x2003e630
   d8e38:	2003e62c 	.word	0x2003e62c
   d8e3c:	2003e628 	.word	0x2003e628

000d8e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8e40:	4b18      	ldr	r3, [pc, #96]	; (d8ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8e42:	681a      	ldr	r2, [r3, #0]
   d8e44:	07d1      	lsls	r1, r2, #31
   d8e46:	bf5c      	itt	pl
   d8e48:	2201      	movpl	r2, #1
   d8e4a:	601a      	strpl	r2, [r3, #0]
   d8e4c:	4b16      	ldr	r3, [pc, #88]	; (d8ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8e4e:	681a      	ldr	r2, [r3, #0]
   d8e50:	07d2      	lsls	r2, r2, #31
   d8e52:	bf5c      	itt	pl
   d8e54:	2201      	movpl	r2, #1
   d8e56:	601a      	strpl	r2, [r3, #0]
   d8e58:	4b14      	ldr	r3, [pc, #80]	; (d8eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8e5a:	681a      	ldr	r2, [r3, #0]
   d8e5c:	07d0      	lsls	r0, r2, #31
   d8e5e:	bf5c      	itt	pl
   d8e60:	2201      	movpl	r2, #1
   d8e62:	601a      	strpl	r2, [r3, #0]
   d8e64:	4b12      	ldr	r3, [pc, #72]	; (d8eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8e66:	681a      	ldr	r2, [r3, #0]
   d8e68:	07d1      	lsls	r1, r2, #31
   d8e6a:	bf5c      	itt	pl
   d8e6c:	2201      	movpl	r2, #1
   d8e6e:	601a      	strpl	r2, [r3, #0]
   d8e70:	4b10      	ldr	r3, [pc, #64]	; (d8eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8e72:	681a      	ldr	r2, [r3, #0]
   d8e74:	07d2      	lsls	r2, r2, #31
   d8e76:	bf5c      	itt	pl
   d8e78:	2201      	movpl	r2, #1
   d8e7a:	601a      	strpl	r2, [r3, #0]
   d8e7c:	4b0e      	ldr	r3, [pc, #56]	; (d8eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8e7e:	681a      	ldr	r2, [r3, #0]
   d8e80:	07d0      	lsls	r0, r2, #31
   d8e82:	bf5c      	itt	pl
   d8e84:	2201      	movpl	r2, #1
   d8e86:	601a      	strpl	r2, [r3, #0]
   d8e88:	4b0c      	ldr	r3, [pc, #48]	; (d8ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8e8a:	681a      	ldr	r2, [r3, #0]
   d8e8c:	07d1      	lsls	r1, r2, #31
   d8e8e:	bf5c      	itt	pl
   d8e90:	2201      	movpl	r2, #1
   d8e92:	601a      	strpl	r2, [r3, #0]
   d8e94:	4b0a      	ldr	r3, [pc, #40]	; (d8ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8e96:	681a      	ldr	r2, [r3, #0]
   d8e98:	07d2      	lsls	r2, r2, #31
   d8e9a:	bf5c      	itt	pl
   d8e9c:	2201      	movpl	r2, #1
   d8e9e:	601a      	strpl	r2, [r3, #0]
   d8ea0:	4770      	bx	lr
   d8ea2:	bf00      	nop
   d8ea4:	2003e674 	.word	0x2003e674
   d8ea8:	2003e670 	.word	0x2003e670
   d8eac:	2003e66c 	.word	0x2003e66c
   d8eb0:	2003e668 	.word	0x2003e668
   d8eb4:	2003e664 	.word	0x2003e664
   d8eb8:	2003e660 	.word	0x2003e660
   d8ebc:	2003e65c 	.word	0x2003e65c
   d8ec0:	2003e658 	.word	0x2003e658

000d8ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ec4:	4b18      	ldr	r3, [pc, #96]	; (d8f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8ec6:	681a      	ldr	r2, [r3, #0]
   d8ec8:	07d1      	lsls	r1, r2, #31
   d8eca:	bf5c      	itt	pl
   d8ecc:	2201      	movpl	r2, #1
   d8ece:	601a      	strpl	r2, [r3, #0]
   d8ed0:	4b16      	ldr	r3, [pc, #88]	; (d8f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8ed2:	681a      	ldr	r2, [r3, #0]
   d8ed4:	07d2      	lsls	r2, r2, #31
   d8ed6:	bf5c      	itt	pl
   d8ed8:	2201      	movpl	r2, #1
   d8eda:	601a      	strpl	r2, [r3, #0]
   d8edc:	4b14      	ldr	r3, [pc, #80]	; (d8f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8ede:	681a      	ldr	r2, [r3, #0]
   d8ee0:	07d0      	lsls	r0, r2, #31
   d8ee2:	bf5c      	itt	pl
   d8ee4:	2201      	movpl	r2, #1
   d8ee6:	601a      	strpl	r2, [r3, #0]
   d8ee8:	4b12      	ldr	r3, [pc, #72]	; (d8f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8eea:	681a      	ldr	r2, [r3, #0]
   d8eec:	07d1      	lsls	r1, r2, #31
   d8eee:	bf5c      	itt	pl
   d8ef0:	2201      	movpl	r2, #1
   d8ef2:	601a      	strpl	r2, [r3, #0]
   d8ef4:	4b10      	ldr	r3, [pc, #64]	; (d8f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8ef6:	681a      	ldr	r2, [r3, #0]
   d8ef8:	07d2      	lsls	r2, r2, #31
   d8efa:	bf5c      	itt	pl
   d8efc:	2201      	movpl	r2, #1
   d8efe:	601a      	strpl	r2, [r3, #0]
   d8f00:	4b0e      	ldr	r3, [pc, #56]	; (d8f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f02:	681a      	ldr	r2, [r3, #0]
   d8f04:	07d0      	lsls	r0, r2, #31
   d8f06:	bf5c      	itt	pl
   d8f08:	2201      	movpl	r2, #1
   d8f0a:	601a      	strpl	r2, [r3, #0]
   d8f0c:	4b0c      	ldr	r3, [pc, #48]	; (d8f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8f0e:	681a      	ldr	r2, [r3, #0]
   d8f10:	07d1      	lsls	r1, r2, #31
   d8f12:	bf5c      	itt	pl
   d8f14:	2201      	movpl	r2, #1
   d8f16:	601a      	strpl	r2, [r3, #0]
   d8f18:	4b0a      	ldr	r3, [pc, #40]	; (d8f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8f1a:	681a      	ldr	r2, [r3, #0]
   d8f1c:	07d2      	lsls	r2, r2, #31
   d8f1e:	bf5c      	itt	pl
   d8f20:	2201      	movpl	r2, #1
   d8f22:	601a      	strpl	r2, [r3, #0]
   d8f24:	4770      	bx	lr
   d8f26:	bf00      	nop
   d8f28:	2003e694 	.word	0x2003e694
   d8f2c:	2003e690 	.word	0x2003e690
   d8f30:	2003e68c 	.word	0x2003e68c
   d8f34:	2003e688 	.word	0x2003e688
   d8f38:	2003e684 	.word	0x2003e684
   d8f3c:	2003e680 	.word	0x2003e680
   d8f40:	2003e67c 	.word	0x2003e67c
   d8f44:	2003e678 	.word	0x2003e678

000d8f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8f48:	4b24      	ldr	r3, [pc, #144]	; (d8fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8f4a:	681a      	ldr	r2, [r3, #0]
   d8f4c:	07d0      	lsls	r0, r2, #31
   d8f4e:	bf5c      	itt	pl
   d8f50:	2201      	movpl	r2, #1
   d8f52:	601a      	strpl	r2, [r3, #0]
   d8f54:	4b22      	ldr	r3, [pc, #136]	; (d8fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8f56:	681a      	ldr	r2, [r3, #0]
   d8f58:	07d1      	lsls	r1, r2, #31
   d8f5a:	bf5c      	itt	pl
   d8f5c:	2201      	movpl	r2, #1
   d8f5e:	601a      	strpl	r2, [r3, #0]
   d8f60:	4b20      	ldr	r3, [pc, #128]	; (d8fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8f62:	681a      	ldr	r2, [r3, #0]
   d8f64:	07d2      	lsls	r2, r2, #31
   d8f66:	bf5c      	itt	pl
   d8f68:	2201      	movpl	r2, #1
   d8f6a:	601a      	strpl	r2, [r3, #0]
   d8f6c:	4b1e      	ldr	r3, [pc, #120]	; (d8fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8f6e:	681a      	ldr	r2, [r3, #0]
   d8f70:	07d0      	lsls	r0, r2, #31
   d8f72:	bf5c      	itt	pl
   d8f74:	2201      	movpl	r2, #1
   d8f76:	601a      	strpl	r2, [r3, #0]
   d8f78:	4b1c      	ldr	r3, [pc, #112]	; (d8fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8f7a:	681a      	ldr	r2, [r3, #0]
   d8f7c:	07d1      	lsls	r1, r2, #31
   d8f7e:	bf5c      	itt	pl
   d8f80:	2201      	movpl	r2, #1
   d8f82:	601a      	strpl	r2, [r3, #0]
   d8f84:	4b1a      	ldr	r3, [pc, #104]	; (d8ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8f86:	681a      	ldr	r2, [r3, #0]
   d8f88:	07d2      	lsls	r2, r2, #31
   d8f8a:	bf5c      	itt	pl
   d8f8c:	2201      	movpl	r2, #1
   d8f8e:	601a      	strpl	r2, [r3, #0]
   d8f90:	4b18      	ldr	r3, [pc, #96]	; (d8ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8f92:	681a      	ldr	r2, [r3, #0]
   d8f94:	07d0      	lsls	r0, r2, #31
   d8f96:	bf5c      	itt	pl
   d8f98:	2201      	movpl	r2, #1
   d8f9a:	601a      	strpl	r2, [r3, #0]
   d8f9c:	4b16      	ldr	r3, [pc, #88]	; (d8ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8f9e:	681a      	ldr	r2, [r3, #0]
   d8fa0:	07d1      	lsls	r1, r2, #31
   d8fa2:	bf5c      	itt	pl
   d8fa4:	2201      	movpl	r2, #1
   d8fa6:	601a      	strpl	r2, [r3, #0]
   d8fa8:	4b14      	ldr	r3, [pc, #80]	; (d8ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8faa:	681a      	ldr	r2, [r3, #0]
   d8fac:	07d2      	lsls	r2, r2, #31
   d8fae:	bf5c      	itt	pl
   d8fb0:	2201      	movpl	r2, #1
   d8fb2:	601a      	strpl	r2, [r3, #0]
   d8fb4:	4b12      	ldr	r3, [pc, #72]	; (d9000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8fb6:	681a      	ldr	r2, [r3, #0]
   d8fb8:	07d0      	lsls	r0, r2, #31
   d8fba:	bf5c      	itt	pl
   d8fbc:	2201      	movpl	r2, #1
   d8fbe:	601a      	strpl	r2, [r3, #0]
   d8fc0:	4b10      	ldr	r3, [pc, #64]	; (d9004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8fc2:	681a      	ldr	r2, [r3, #0]
   d8fc4:	07d1      	lsls	r1, r2, #31
   d8fc6:	bf5c      	itt	pl
   d8fc8:	2201      	movpl	r2, #1
   d8fca:	601a      	strpl	r2, [r3, #0]
   d8fcc:	4b0e      	ldr	r3, [pc, #56]	; (d9008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8fce:	681a      	ldr	r2, [r3, #0]
   d8fd0:	07d2      	lsls	r2, r2, #31
   d8fd2:	bf5c      	itt	pl
   d8fd4:	2201      	movpl	r2, #1
   d8fd6:	601a      	strpl	r2, [r3, #0]
   d8fd8:	4770      	bx	lr
   d8fda:	bf00      	nop
   d8fdc:	2003e6c4 	.word	0x2003e6c4
   d8fe0:	2003e6c0 	.word	0x2003e6c0
   d8fe4:	2003e6bc 	.word	0x2003e6bc
   d8fe8:	2003e6b8 	.word	0x2003e6b8
   d8fec:	2003e6b4 	.word	0x2003e6b4
   d8ff0:	2003e6b0 	.word	0x2003e6b0
   d8ff4:	2003e6ac 	.word	0x2003e6ac
   d8ff8:	2003e6a8 	.word	0x2003e6a8
   d8ffc:	2003e6a4 	.word	0x2003e6a4
   d9000:	2003e6a0 	.word	0x2003e6a0
   d9004:	2003e69c 	.word	0x2003e69c
   d9008:	2003e698 	.word	0x2003e698

000d900c <__aeabi_drsub>:
   d900c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9010:	e002      	b.n	d9018 <__adddf3>
   d9012:	bf00      	nop

000d9014 <__aeabi_dsub>:
   d9014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9018 <__adddf3>:
   d9018:	b530      	push	{r4, r5, lr}
   d901a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d901e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9022:	ea94 0f05 	teq	r4, r5
   d9026:	bf08      	it	eq
   d9028:	ea90 0f02 	teqeq	r0, r2
   d902c:	bf1f      	itttt	ne
   d902e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9032:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9036:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d903a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d903e:	f000 80e2 	beq.w	d9206 <__adddf3+0x1ee>
   d9042:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9046:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d904a:	bfb8      	it	lt
   d904c:	426d      	neglt	r5, r5
   d904e:	dd0c      	ble.n	d906a <__adddf3+0x52>
   d9050:	442c      	add	r4, r5
   d9052:	ea80 0202 	eor.w	r2, r0, r2
   d9056:	ea81 0303 	eor.w	r3, r1, r3
   d905a:	ea82 0000 	eor.w	r0, r2, r0
   d905e:	ea83 0101 	eor.w	r1, r3, r1
   d9062:	ea80 0202 	eor.w	r2, r0, r2
   d9066:	ea81 0303 	eor.w	r3, r1, r3
   d906a:	2d36      	cmp	r5, #54	; 0x36
   d906c:	bf88      	it	hi
   d906e:	bd30      	pophi	{r4, r5, pc}
   d9070:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9074:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9078:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d907c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9080:	d002      	beq.n	d9088 <__adddf3+0x70>
   d9082:	4240      	negs	r0, r0
   d9084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9088:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d908c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9090:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9094:	d002      	beq.n	d909c <__adddf3+0x84>
   d9096:	4252      	negs	r2, r2
   d9098:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d909c:	ea94 0f05 	teq	r4, r5
   d90a0:	f000 80a7 	beq.w	d91f2 <__adddf3+0x1da>
   d90a4:	f1a4 0401 	sub.w	r4, r4, #1
   d90a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d90ac:	db0d      	blt.n	d90ca <__adddf3+0xb2>
   d90ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d90b2:	fa22 f205 	lsr.w	r2, r2, r5
   d90b6:	1880      	adds	r0, r0, r2
   d90b8:	f141 0100 	adc.w	r1, r1, #0
   d90bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d90c0:	1880      	adds	r0, r0, r2
   d90c2:	fa43 f305 	asr.w	r3, r3, r5
   d90c6:	4159      	adcs	r1, r3
   d90c8:	e00e      	b.n	d90e8 <__adddf3+0xd0>
   d90ca:	f1a5 0520 	sub.w	r5, r5, #32
   d90ce:	f10e 0e20 	add.w	lr, lr, #32
   d90d2:	2a01      	cmp	r2, #1
   d90d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d90d8:	bf28      	it	cs
   d90da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d90de:	fa43 f305 	asr.w	r3, r3, r5
   d90e2:	18c0      	adds	r0, r0, r3
   d90e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d90e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d90ec:	d507      	bpl.n	d90fe <__adddf3+0xe6>
   d90ee:	f04f 0e00 	mov.w	lr, #0
   d90f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d90f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d90fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d90fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9102:	d31b      	bcc.n	d913c <__adddf3+0x124>
   d9104:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9108:	d30c      	bcc.n	d9124 <__adddf3+0x10c>
   d910a:	0849      	lsrs	r1, r1, #1
   d910c:	ea5f 0030 	movs.w	r0, r0, rrx
   d9110:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9114:	f104 0401 	add.w	r4, r4, #1
   d9118:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d911c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9120:	f080 809a 	bcs.w	d9258 <__adddf3+0x240>
   d9124:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9128:	bf08      	it	eq
   d912a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d912e:	f150 0000 	adcs.w	r0, r0, #0
   d9132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9136:	ea41 0105 	orr.w	r1, r1, r5
   d913a:	bd30      	pop	{r4, r5, pc}
   d913c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9140:	4140      	adcs	r0, r0
   d9142:	eb41 0101 	adc.w	r1, r1, r1
   d9146:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d914a:	f1a4 0401 	sub.w	r4, r4, #1
   d914e:	d1e9      	bne.n	d9124 <__adddf3+0x10c>
   d9150:	f091 0f00 	teq	r1, #0
   d9154:	bf04      	itt	eq
   d9156:	4601      	moveq	r1, r0
   d9158:	2000      	moveq	r0, #0
   d915a:	fab1 f381 	clz	r3, r1
   d915e:	bf08      	it	eq
   d9160:	3320      	addeq	r3, #32
   d9162:	f1a3 030b 	sub.w	r3, r3, #11
   d9166:	f1b3 0220 	subs.w	r2, r3, #32
   d916a:	da0c      	bge.n	d9186 <__adddf3+0x16e>
   d916c:	320c      	adds	r2, #12
   d916e:	dd08      	ble.n	d9182 <__adddf3+0x16a>
   d9170:	f102 0c14 	add.w	ip, r2, #20
   d9174:	f1c2 020c 	rsb	r2, r2, #12
   d9178:	fa01 f00c 	lsl.w	r0, r1, ip
   d917c:	fa21 f102 	lsr.w	r1, r1, r2
   d9180:	e00c      	b.n	d919c <__adddf3+0x184>
   d9182:	f102 0214 	add.w	r2, r2, #20
   d9186:	bfd8      	it	le
   d9188:	f1c2 0c20 	rsble	ip, r2, #32
   d918c:	fa01 f102 	lsl.w	r1, r1, r2
   d9190:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9194:	bfdc      	itt	le
   d9196:	ea41 010c 	orrle.w	r1, r1, ip
   d919a:	4090      	lslle	r0, r2
   d919c:	1ae4      	subs	r4, r4, r3
   d919e:	bfa2      	ittt	ge
   d91a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d91a4:	4329      	orrge	r1, r5
   d91a6:	bd30      	popge	{r4, r5, pc}
   d91a8:	ea6f 0404 	mvn.w	r4, r4
   d91ac:	3c1f      	subs	r4, #31
   d91ae:	da1c      	bge.n	d91ea <__adddf3+0x1d2>
   d91b0:	340c      	adds	r4, #12
   d91b2:	dc0e      	bgt.n	d91d2 <__adddf3+0x1ba>
   d91b4:	f104 0414 	add.w	r4, r4, #20
   d91b8:	f1c4 0220 	rsb	r2, r4, #32
   d91bc:	fa20 f004 	lsr.w	r0, r0, r4
   d91c0:	fa01 f302 	lsl.w	r3, r1, r2
   d91c4:	ea40 0003 	orr.w	r0, r0, r3
   d91c8:	fa21 f304 	lsr.w	r3, r1, r4
   d91cc:	ea45 0103 	orr.w	r1, r5, r3
   d91d0:	bd30      	pop	{r4, r5, pc}
   d91d2:	f1c4 040c 	rsb	r4, r4, #12
   d91d6:	f1c4 0220 	rsb	r2, r4, #32
   d91da:	fa20 f002 	lsr.w	r0, r0, r2
   d91de:	fa01 f304 	lsl.w	r3, r1, r4
   d91e2:	ea40 0003 	orr.w	r0, r0, r3
   d91e6:	4629      	mov	r1, r5
   d91e8:	bd30      	pop	{r4, r5, pc}
   d91ea:	fa21 f004 	lsr.w	r0, r1, r4
   d91ee:	4629      	mov	r1, r5
   d91f0:	bd30      	pop	{r4, r5, pc}
   d91f2:	f094 0f00 	teq	r4, #0
   d91f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d91fa:	bf06      	itte	eq
   d91fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9200:	3401      	addeq	r4, #1
   d9202:	3d01      	subne	r5, #1
   d9204:	e74e      	b.n	d90a4 <__adddf3+0x8c>
   d9206:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d920a:	bf18      	it	ne
   d920c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9210:	d029      	beq.n	d9266 <__adddf3+0x24e>
   d9212:	ea94 0f05 	teq	r4, r5
   d9216:	bf08      	it	eq
   d9218:	ea90 0f02 	teqeq	r0, r2
   d921c:	d005      	beq.n	d922a <__adddf3+0x212>
   d921e:	ea54 0c00 	orrs.w	ip, r4, r0
   d9222:	bf04      	itt	eq
   d9224:	4619      	moveq	r1, r3
   d9226:	4610      	moveq	r0, r2
   d9228:	bd30      	pop	{r4, r5, pc}
   d922a:	ea91 0f03 	teq	r1, r3
   d922e:	bf1e      	ittt	ne
   d9230:	2100      	movne	r1, #0
   d9232:	2000      	movne	r0, #0
   d9234:	bd30      	popne	{r4, r5, pc}
   d9236:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d923a:	d105      	bne.n	d9248 <__adddf3+0x230>
   d923c:	0040      	lsls	r0, r0, #1
   d923e:	4149      	adcs	r1, r1
   d9240:	bf28      	it	cs
   d9242:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9246:	bd30      	pop	{r4, r5, pc}
   d9248:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d924c:	bf3c      	itt	cc
   d924e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9252:	bd30      	popcc	{r4, r5, pc}
   d9254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9258:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d925c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9260:	f04f 0000 	mov.w	r0, #0
   d9264:	bd30      	pop	{r4, r5, pc}
   d9266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d926a:	bf1a      	itte	ne
   d926c:	4619      	movne	r1, r3
   d926e:	4610      	movne	r0, r2
   d9270:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9274:	bf1c      	itt	ne
   d9276:	460b      	movne	r3, r1
   d9278:	4602      	movne	r2, r0
   d927a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d927e:	bf06      	itte	eq
   d9280:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9284:	ea91 0f03 	teqeq	r1, r3
   d9288:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d928c:	bd30      	pop	{r4, r5, pc}
   d928e:	bf00      	nop

000d9290 <__aeabi_ui2d>:
   d9290:	f090 0f00 	teq	r0, #0
   d9294:	bf04      	itt	eq
   d9296:	2100      	moveq	r1, #0
   d9298:	4770      	bxeq	lr
   d929a:	b530      	push	{r4, r5, lr}
   d929c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92a4:	f04f 0500 	mov.w	r5, #0
   d92a8:	f04f 0100 	mov.w	r1, #0
   d92ac:	e750      	b.n	d9150 <__adddf3+0x138>
   d92ae:	bf00      	nop

000d92b0 <__aeabi_i2d>:
   d92b0:	f090 0f00 	teq	r0, #0
   d92b4:	bf04      	itt	eq
   d92b6:	2100      	moveq	r1, #0
   d92b8:	4770      	bxeq	lr
   d92ba:	b530      	push	{r4, r5, lr}
   d92bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d92c8:	bf48      	it	mi
   d92ca:	4240      	negmi	r0, r0
   d92cc:	f04f 0100 	mov.w	r1, #0
   d92d0:	e73e      	b.n	d9150 <__adddf3+0x138>
   d92d2:	bf00      	nop

000d92d4 <__aeabi_f2d>:
   d92d4:	0042      	lsls	r2, r0, #1
   d92d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d92da:	ea4f 0131 	mov.w	r1, r1, rrx
   d92de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d92e2:	bf1f      	itttt	ne
   d92e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d92e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d92ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d92f0:	4770      	bxne	lr
   d92f2:	f092 0f00 	teq	r2, #0
   d92f6:	bf14      	ite	ne
   d92f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d92fc:	4770      	bxeq	lr
   d92fe:	b530      	push	{r4, r5, lr}
   d9300:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d930c:	e720      	b.n	d9150 <__adddf3+0x138>
   d930e:	bf00      	nop

000d9310 <__aeabi_ul2d>:
   d9310:	ea50 0201 	orrs.w	r2, r0, r1
   d9314:	bf08      	it	eq
   d9316:	4770      	bxeq	lr
   d9318:	b530      	push	{r4, r5, lr}
   d931a:	f04f 0500 	mov.w	r5, #0
   d931e:	e00a      	b.n	d9336 <__aeabi_l2d+0x16>

000d9320 <__aeabi_l2d>:
   d9320:	ea50 0201 	orrs.w	r2, r0, r1
   d9324:	bf08      	it	eq
   d9326:	4770      	bxeq	lr
   d9328:	b530      	push	{r4, r5, lr}
   d932a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d932e:	d502      	bpl.n	d9336 <__aeabi_l2d+0x16>
   d9330:	4240      	negs	r0, r0
   d9332:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9336:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d933a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d933e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9342:	f43f aedc 	beq.w	d90fe <__adddf3+0xe6>
   d9346:	f04f 0203 	mov.w	r2, #3
   d934a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d934e:	bf18      	it	ne
   d9350:	3203      	addne	r2, #3
   d9352:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9356:	bf18      	it	ne
   d9358:	3203      	addne	r2, #3
   d935a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d935e:	f1c2 0320 	rsb	r3, r2, #32
   d9362:	fa00 fc03 	lsl.w	ip, r0, r3
   d9366:	fa20 f002 	lsr.w	r0, r0, r2
   d936a:	fa01 fe03 	lsl.w	lr, r1, r3
   d936e:	ea40 000e 	orr.w	r0, r0, lr
   d9372:	fa21 f102 	lsr.w	r1, r1, r2
   d9376:	4414      	add	r4, r2
   d9378:	e6c1      	b.n	d90fe <__adddf3+0xe6>
   d937a:	bf00      	nop

000d937c <__aeabi_dmul>:
   d937c:	b570      	push	{r4, r5, r6, lr}
   d937e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9382:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9386:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d938a:	bf1d      	ittte	ne
   d938c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9390:	ea94 0f0c 	teqne	r4, ip
   d9394:	ea95 0f0c 	teqne	r5, ip
   d9398:	f000 f8de 	bleq	d9558 <__aeabi_dmul+0x1dc>
   d939c:	442c      	add	r4, r5
   d939e:	ea81 0603 	eor.w	r6, r1, r3
   d93a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d93a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d93aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d93ae:	bf18      	it	ne
   d93b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d93b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d93bc:	d038      	beq.n	d9430 <__aeabi_dmul+0xb4>
   d93be:	fba0 ce02 	umull	ip, lr, r0, r2
   d93c2:	f04f 0500 	mov.w	r5, #0
   d93c6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d93ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d93ce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d93d2:	f04f 0600 	mov.w	r6, #0
   d93d6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d93da:	f09c 0f00 	teq	ip, #0
   d93de:	bf18      	it	ne
   d93e0:	f04e 0e01 	orrne.w	lr, lr, #1
   d93e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d93e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d93ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d93f0:	d204      	bcs.n	d93fc <__aeabi_dmul+0x80>
   d93f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d93f6:	416d      	adcs	r5, r5
   d93f8:	eb46 0606 	adc.w	r6, r6, r6
   d93fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9400:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9404:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9408:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d940c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9410:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9414:	bf88      	it	hi
   d9416:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d941a:	d81e      	bhi.n	d945a <__aeabi_dmul+0xde>
   d941c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9420:	bf08      	it	eq
   d9422:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9426:	f150 0000 	adcs.w	r0, r0, #0
   d942a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d942e:	bd70      	pop	{r4, r5, r6, pc}
   d9430:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9434:	ea46 0101 	orr.w	r1, r6, r1
   d9438:	ea40 0002 	orr.w	r0, r0, r2
   d943c:	ea81 0103 	eor.w	r1, r1, r3
   d9440:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9444:	bfc2      	ittt	gt
   d9446:	ebd4 050c 	rsbsgt	r5, r4, ip
   d944a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d944e:	bd70      	popgt	{r4, r5, r6, pc}
   d9450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9454:	f04f 0e00 	mov.w	lr, #0
   d9458:	3c01      	subs	r4, #1
   d945a:	f300 80ab 	bgt.w	d95b4 <__aeabi_dmul+0x238>
   d945e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9462:	bfde      	ittt	le
   d9464:	2000      	movle	r0, #0
   d9466:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d946a:	bd70      	pople	{r4, r5, r6, pc}
   d946c:	f1c4 0400 	rsb	r4, r4, #0
   d9470:	3c20      	subs	r4, #32
   d9472:	da35      	bge.n	d94e0 <__aeabi_dmul+0x164>
   d9474:	340c      	adds	r4, #12
   d9476:	dc1b      	bgt.n	d94b0 <__aeabi_dmul+0x134>
   d9478:	f104 0414 	add.w	r4, r4, #20
   d947c:	f1c4 0520 	rsb	r5, r4, #32
   d9480:	fa00 f305 	lsl.w	r3, r0, r5
   d9484:	fa20 f004 	lsr.w	r0, r0, r4
   d9488:	fa01 f205 	lsl.w	r2, r1, r5
   d948c:	ea40 0002 	orr.w	r0, r0, r2
   d9490:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9498:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d949c:	fa21 f604 	lsr.w	r6, r1, r4
   d94a0:	eb42 0106 	adc.w	r1, r2, r6
   d94a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d94a8:	bf08      	it	eq
   d94aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d94ae:	bd70      	pop	{r4, r5, r6, pc}
   d94b0:	f1c4 040c 	rsb	r4, r4, #12
   d94b4:	f1c4 0520 	rsb	r5, r4, #32
   d94b8:	fa00 f304 	lsl.w	r3, r0, r4
   d94bc:	fa20 f005 	lsr.w	r0, r0, r5
   d94c0:	fa01 f204 	lsl.w	r2, r1, r4
   d94c4:	ea40 0002 	orr.w	r0, r0, r2
   d94c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d94cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d94d0:	f141 0100 	adc.w	r1, r1, #0
   d94d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d94d8:	bf08      	it	eq
   d94da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d94de:	bd70      	pop	{r4, r5, r6, pc}
   d94e0:	f1c4 0520 	rsb	r5, r4, #32
   d94e4:	fa00 f205 	lsl.w	r2, r0, r5
   d94e8:	ea4e 0e02 	orr.w	lr, lr, r2
   d94ec:	fa20 f304 	lsr.w	r3, r0, r4
   d94f0:	fa01 f205 	lsl.w	r2, r1, r5
   d94f4:	ea43 0302 	orr.w	r3, r3, r2
   d94f8:	fa21 f004 	lsr.w	r0, r1, r4
   d94fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9500:	fa21 f204 	lsr.w	r2, r1, r4
   d9504:	ea20 0002 	bic.w	r0, r0, r2
   d9508:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d950c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9510:	bf08      	it	eq
   d9512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9516:	bd70      	pop	{r4, r5, r6, pc}
   d9518:	f094 0f00 	teq	r4, #0
   d951c:	d10f      	bne.n	d953e <__aeabi_dmul+0x1c2>
   d951e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9522:	0040      	lsls	r0, r0, #1
   d9524:	eb41 0101 	adc.w	r1, r1, r1
   d9528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d952c:	bf08      	it	eq
   d952e:	3c01      	subeq	r4, #1
   d9530:	d0f7      	beq.n	d9522 <__aeabi_dmul+0x1a6>
   d9532:	ea41 0106 	orr.w	r1, r1, r6
   d9536:	f095 0f00 	teq	r5, #0
   d953a:	bf18      	it	ne
   d953c:	4770      	bxne	lr
   d953e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9542:	0052      	lsls	r2, r2, #1
   d9544:	eb43 0303 	adc.w	r3, r3, r3
   d9548:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d954c:	bf08      	it	eq
   d954e:	3d01      	subeq	r5, #1
   d9550:	d0f7      	beq.n	d9542 <__aeabi_dmul+0x1c6>
   d9552:	ea43 0306 	orr.w	r3, r3, r6
   d9556:	4770      	bx	lr
   d9558:	ea94 0f0c 	teq	r4, ip
   d955c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9560:	bf18      	it	ne
   d9562:	ea95 0f0c 	teqne	r5, ip
   d9566:	d00c      	beq.n	d9582 <__aeabi_dmul+0x206>
   d9568:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d956c:	bf18      	it	ne
   d956e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9572:	d1d1      	bne.n	d9518 <__aeabi_dmul+0x19c>
   d9574:	ea81 0103 	eor.w	r1, r1, r3
   d9578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d957c:	f04f 0000 	mov.w	r0, #0
   d9580:	bd70      	pop	{r4, r5, r6, pc}
   d9582:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9586:	bf06      	itte	eq
   d9588:	4610      	moveq	r0, r2
   d958a:	4619      	moveq	r1, r3
   d958c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9590:	d019      	beq.n	d95c6 <__aeabi_dmul+0x24a>
   d9592:	ea94 0f0c 	teq	r4, ip
   d9596:	d102      	bne.n	d959e <__aeabi_dmul+0x222>
   d9598:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d959c:	d113      	bne.n	d95c6 <__aeabi_dmul+0x24a>
   d959e:	ea95 0f0c 	teq	r5, ip
   d95a2:	d105      	bne.n	d95b0 <__aeabi_dmul+0x234>
   d95a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d95a8:	bf1c      	itt	ne
   d95aa:	4610      	movne	r0, r2
   d95ac:	4619      	movne	r1, r3
   d95ae:	d10a      	bne.n	d95c6 <__aeabi_dmul+0x24a>
   d95b0:	ea81 0103 	eor.w	r1, r1, r3
   d95b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d95c0:	f04f 0000 	mov.w	r0, #0
   d95c4:	bd70      	pop	{r4, r5, r6, pc}
   d95c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d95ce:	bd70      	pop	{r4, r5, r6, pc}

000d95d0 <__aeabi_ddiv>:
   d95d0:	b570      	push	{r4, r5, r6, lr}
   d95d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d95d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d95da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d95de:	bf1d      	ittte	ne
   d95e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d95e4:	ea94 0f0c 	teqne	r4, ip
   d95e8:	ea95 0f0c 	teqne	r5, ip
   d95ec:	f000 f8a7 	bleq	d973e <__aeabi_ddiv+0x16e>
   d95f0:	eba4 0405 	sub.w	r4, r4, r5
   d95f4:	ea81 0e03 	eor.w	lr, r1, r3
   d95f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d95fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9600:	f000 8088 	beq.w	d9714 <__aeabi_ddiv+0x144>
   d9604:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9608:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d960c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9610:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9614:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9618:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d961c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9620:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9624:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9628:	429d      	cmp	r5, r3
   d962a:	bf08      	it	eq
   d962c:	4296      	cmpeq	r6, r2
   d962e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9632:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9636:	d202      	bcs.n	d963e <__aeabi_ddiv+0x6e>
   d9638:	085b      	lsrs	r3, r3, #1
   d963a:	ea4f 0232 	mov.w	r2, r2, rrx
   d963e:	1ab6      	subs	r6, r6, r2
   d9640:	eb65 0503 	sbc.w	r5, r5, r3
   d9644:	085b      	lsrs	r3, r3, #1
   d9646:	ea4f 0232 	mov.w	r2, r2, rrx
   d964a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d964e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9652:	ebb6 0e02 	subs.w	lr, r6, r2
   d9656:	eb75 0e03 	sbcs.w	lr, r5, r3
   d965a:	bf22      	ittt	cs
   d965c:	1ab6      	subcs	r6, r6, r2
   d965e:	4675      	movcs	r5, lr
   d9660:	ea40 000c 	orrcs.w	r0, r0, ip
   d9664:	085b      	lsrs	r3, r3, #1
   d9666:	ea4f 0232 	mov.w	r2, r2, rrx
   d966a:	ebb6 0e02 	subs.w	lr, r6, r2
   d966e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9672:	bf22      	ittt	cs
   d9674:	1ab6      	subcs	r6, r6, r2
   d9676:	4675      	movcs	r5, lr
   d9678:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d967c:	085b      	lsrs	r3, r3, #1
   d967e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9682:	ebb6 0e02 	subs.w	lr, r6, r2
   d9686:	eb75 0e03 	sbcs.w	lr, r5, r3
   d968a:	bf22      	ittt	cs
   d968c:	1ab6      	subcs	r6, r6, r2
   d968e:	4675      	movcs	r5, lr
   d9690:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9694:	085b      	lsrs	r3, r3, #1
   d9696:	ea4f 0232 	mov.w	r2, r2, rrx
   d969a:	ebb6 0e02 	subs.w	lr, r6, r2
   d969e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96a2:	bf22      	ittt	cs
   d96a4:	1ab6      	subcs	r6, r6, r2
   d96a6:	4675      	movcs	r5, lr
   d96a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d96ac:	ea55 0e06 	orrs.w	lr, r5, r6
   d96b0:	d018      	beq.n	d96e4 <__aeabi_ddiv+0x114>
   d96b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d96b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d96ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d96be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d96c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d96c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d96ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d96ce:	d1c0      	bne.n	d9652 <__aeabi_ddiv+0x82>
   d96d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d96d4:	d10b      	bne.n	d96ee <__aeabi_ddiv+0x11e>
   d96d6:	ea41 0100 	orr.w	r1, r1, r0
   d96da:	f04f 0000 	mov.w	r0, #0
   d96de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d96e2:	e7b6      	b.n	d9652 <__aeabi_ddiv+0x82>
   d96e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d96e8:	bf04      	itt	eq
   d96ea:	4301      	orreq	r1, r0
   d96ec:	2000      	moveq	r0, #0
   d96ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d96f2:	bf88      	it	hi
   d96f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d96f8:	f63f aeaf 	bhi.w	d945a <__aeabi_dmul+0xde>
   d96fc:	ebb5 0c03 	subs.w	ip, r5, r3
   d9700:	bf04      	itt	eq
   d9702:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9706:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d970a:	f150 0000 	adcs.w	r0, r0, #0
   d970e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9712:	bd70      	pop	{r4, r5, r6, pc}
   d9714:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9718:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d971c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9720:	bfc2      	ittt	gt
   d9722:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d972a:	bd70      	popgt	{r4, r5, r6, pc}
   d972c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9730:	f04f 0e00 	mov.w	lr, #0
   d9734:	3c01      	subs	r4, #1
   d9736:	e690      	b.n	d945a <__aeabi_dmul+0xde>
   d9738:	ea45 0e06 	orr.w	lr, r5, r6
   d973c:	e68d      	b.n	d945a <__aeabi_dmul+0xde>
   d973e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9742:	ea94 0f0c 	teq	r4, ip
   d9746:	bf08      	it	eq
   d9748:	ea95 0f0c 	teqeq	r5, ip
   d974c:	f43f af3b 	beq.w	d95c6 <__aeabi_dmul+0x24a>
   d9750:	ea94 0f0c 	teq	r4, ip
   d9754:	d10a      	bne.n	d976c <__aeabi_ddiv+0x19c>
   d9756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d975a:	f47f af34 	bne.w	d95c6 <__aeabi_dmul+0x24a>
   d975e:	ea95 0f0c 	teq	r5, ip
   d9762:	f47f af25 	bne.w	d95b0 <__aeabi_dmul+0x234>
   d9766:	4610      	mov	r0, r2
   d9768:	4619      	mov	r1, r3
   d976a:	e72c      	b.n	d95c6 <__aeabi_dmul+0x24a>
   d976c:	ea95 0f0c 	teq	r5, ip
   d9770:	d106      	bne.n	d9780 <__aeabi_ddiv+0x1b0>
   d9772:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9776:	f43f aefd 	beq.w	d9574 <__aeabi_dmul+0x1f8>
   d977a:	4610      	mov	r0, r2
   d977c:	4619      	mov	r1, r3
   d977e:	e722      	b.n	d95c6 <__aeabi_dmul+0x24a>
   d9780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9784:	bf18      	it	ne
   d9786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d978a:	f47f aec5 	bne.w	d9518 <__aeabi_dmul+0x19c>
   d978e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9792:	f47f af0d 	bne.w	d95b0 <__aeabi_dmul+0x234>
   d9796:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d979a:	f47f aeeb 	bne.w	d9574 <__aeabi_dmul+0x1f8>
   d979e:	e712      	b.n	d95c6 <__aeabi_dmul+0x24a>

000d97a0 <__gedf2>:
   d97a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d97a4:	e006      	b.n	d97b4 <__cmpdf2+0x4>
   d97a6:	bf00      	nop

000d97a8 <__ledf2>:
   d97a8:	f04f 0c01 	mov.w	ip, #1
   d97ac:	e002      	b.n	d97b4 <__cmpdf2+0x4>
   d97ae:	bf00      	nop

000d97b0 <__cmpdf2>:
   d97b0:	f04f 0c01 	mov.w	ip, #1
   d97b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d97b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d97bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d97c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d97c4:	bf18      	it	ne
   d97c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d97ca:	d01b      	beq.n	d9804 <__cmpdf2+0x54>
   d97cc:	b001      	add	sp, #4
   d97ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d97d2:	bf0c      	ite	eq
   d97d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d97d8:	ea91 0f03 	teqne	r1, r3
   d97dc:	bf02      	ittt	eq
   d97de:	ea90 0f02 	teqeq	r0, r2
   d97e2:	2000      	moveq	r0, #0
   d97e4:	4770      	bxeq	lr
   d97e6:	f110 0f00 	cmn.w	r0, #0
   d97ea:	ea91 0f03 	teq	r1, r3
   d97ee:	bf58      	it	pl
   d97f0:	4299      	cmppl	r1, r3
   d97f2:	bf08      	it	eq
   d97f4:	4290      	cmpeq	r0, r2
   d97f6:	bf2c      	ite	cs
   d97f8:	17d8      	asrcs	r0, r3, #31
   d97fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d97fe:	f040 0001 	orr.w	r0, r0, #1
   d9802:	4770      	bx	lr
   d9804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d980c:	d102      	bne.n	d9814 <__cmpdf2+0x64>
   d980e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9812:	d107      	bne.n	d9824 <__cmpdf2+0x74>
   d9814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d981c:	d1d6      	bne.n	d97cc <__cmpdf2+0x1c>
   d981e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9822:	d0d3      	beq.n	d97cc <__cmpdf2+0x1c>
   d9824:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9828:	4770      	bx	lr
   d982a:	bf00      	nop

000d982c <__aeabi_cdrcmple>:
   d982c:	4684      	mov	ip, r0
   d982e:	4610      	mov	r0, r2
   d9830:	4662      	mov	r2, ip
   d9832:	468c      	mov	ip, r1
   d9834:	4619      	mov	r1, r3
   d9836:	4663      	mov	r3, ip
   d9838:	e000      	b.n	d983c <__aeabi_cdcmpeq>
   d983a:	bf00      	nop

000d983c <__aeabi_cdcmpeq>:
   d983c:	b501      	push	{r0, lr}
   d983e:	f7ff ffb7 	bl	d97b0 <__cmpdf2>
   d9842:	2800      	cmp	r0, #0
   d9844:	bf48      	it	mi
   d9846:	f110 0f00 	cmnmi.w	r0, #0
   d984a:	bd01      	pop	{r0, pc}

000d984c <__aeabi_dcmpeq>:
   d984c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9850:	f7ff fff4 	bl	d983c <__aeabi_cdcmpeq>
   d9854:	bf0c      	ite	eq
   d9856:	2001      	moveq	r0, #1
   d9858:	2000      	movne	r0, #0
   d985a:	f85d fb08 	ldr.w	pc, [sp], #8
   d985e:	bf00      	nop

000d9860 <__aeabi_dcmplt>:
   d9860:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9864:	f7ff ffea 	bl	d983c <__aeabi_cdcmpeq>
   d9868:	bf34      	ite	cc
   d986a:	2001      	movcc	r0, #1
   d986c:	2000      	movcs	r0, #0
   d986e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9872:	bf00      	nop

000d9874 <__aeabi_dcmple>:
   d9874:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9878:	f7ff ffe0 	bl	d983c <__aeabi_cdcmpeq>
   d987c:	bf94      	ite	ls
   d987e:	2001      	movls	r0, #1
   d9880:	2000      	movhi	r0, #0
   d9882:	f85d fb08 	ldr.w	pc, [sp], #8
   d9886:	bf00      	nop

000d9888 <__aeabi_dcmpge>:
   d9888:	f84d ed08 	str.w	lr, [sp, #-8]!
   d988c:	f7ff ffce 	bl	d982c <__aeabi_cdrcmple>
   d9890:	bf94      	ite	ls
   d9892:	2001      	movls	r0, #1
   d9894:	2000      	movhi	r0, #0
   d9896:	f85d fb08 	ldr.w	pc, [sp], #8
   d989a:	bf00      	nop

000d989c <__aeabi_dcmpgt>:
   d989c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98a0:	f7ff ffc4 	bl	d982c <__aeabi_cdrcmple>
   d98a4:	bf34      	ite	cc
   d98a6:	2001      	movcc	r0, #1
   d98a8:	2000      	movcs	r0, #0
   d98aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d98ae:	bf00      	nop

000d98b0 <__aeabi_dcmpun>:
   d98b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d98b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98b8:	d102      	bne.n	d98c0 <__aeabi_dcmpun+0x10>
   d98ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d98be:	d10a      	bne.n	d98d6 <__aeabi_dcmpun+0x26>
   d98c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d98c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98c8:	d102      	bne.n	d98d0 <__aeabi_dcmpun+0x20>
   d98ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d98ce:	d102      	bne.n	d98d6 <__aeabi_dcmpun+0x26>
   d98d0:	f04f 0000 	mov.w	r0, #0
   d98d4:	4770      	bx	lr
   d98d6:	f04f 0001 	mov.w	r0, #1
   d98da:	4770      	bx	lr

000d98dc <__aeabi_d2iz>:
   d98dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d98e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d98e4:	d215      	bcs.n	d9912 <__aeabi_d2iz+0x36>
   d98e6:	d511      	bpl.n	d990c <__aeabi_d2iz+0x30>
   d98e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d98ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d98f0:	d912      	bls.n	d9918 <__aeabi_d2iz+0x3c>
   d98f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d98f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d98fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d98fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9902:	fa23 f002 	lsr.w	r0, r3, r2
   d9906:	bf18      	it	ne
   d9908:	4240      	negne	r0, r0
   d990a:	4770      	bx	lr
   d990c:	f04f 0000 	mov.w	r0, #0
   d9910:	4770      	bx	lr
   d9912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9916:	d105      	bne.n	d9924 <__aeabi_d2iz+0x48>
   d9918:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d991c:	bf08      	it	eq
   d991e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9922:	4770      	bx	lr
   d9924:	f04f 0000 	mov.w	r0, #0
   d9928:	4770      	bx	lr
   d992a:	bf00      	nop

000d992c <__aeabi_d2uiz>:
   d992c:	004a      	lsls	r2, r1, #1
   d992e:	d211      	bcs.n	d9954 <__aeabi_d2uiz+0x28>
   d9930:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9934:	d211      	bcs.n	d995a <__aeabi_d2uiz+0x2e>
   d9936:	d50d      	bpl.n	d9954 <__aeabi_d2uiz+0x28>
   d9938:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d993c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9940:	d40e      	bmi.n	d9960 <__aeabi_d2uiz+0x34>
   d9942:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d994a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d994e:	fa23 f002 	lsr.w	r0, r3, r2
   d9952:	4770      	bx	lr
   d9954:	f04f 0000 	mov.w	r0, #0
   d9958:	4770      	bx	lr
   d995a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d995e:	d102      	bne.n	d9966 <__aeabi_d2uiz+0x3a>
   d9960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9964:	4770      	bx	lr
   d9966:	f04f 0000 	mov.w	r0, #0
   d996a:	4770      	bx	lr

000d996c <__aeabi_d2f>:
   d996c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9974:	bf24      	itt	cs
   d9976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d997a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d997e:	d90d      	bls.n	d999c <__aeabi_d2f+0x30>
   d9980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d998c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9994:	bf08      	it	eq
   d9996:	f020 0001 	biceq.w	r0, r0, #1
   d999a:	4770      	bx	lr
   d999c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d99a0:	d121      	bne.n	d99e6 <__aeabi_d2f+0x7a>
   d99a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d99a6:	bfbc      	itt	lt
   d99a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d99ac:	4770      	bxlt	lr
   d99ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d99b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d99b6:	f1c2 0218 	rsb	r2, r2, #24
   d99ba:	f1c2 0c20 	rsb	ip, r2, #32
   d99be:	fa10 f30c 	lsls.w	r3, r0, ip
   d99c2:	fa20 f002 	lsr.w	r0, r0, r2
   d99c6:	bf18      	it	ne
   d99c8:	f040 0001 	orrne.w	r0, r0, #1
   d99cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d99d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d99d4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d99d8:	ea40 000c 	orr.w	r0, r0, ip
   d99dc:	fa23 f302 	lsr.w	r3, r3, r2
   d99e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d99e4:	e7cc      	b.n	d9980 <__aeabi_d2f+0x14>
   d99e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d99ea:	d107      	bne.n	d99fc <__aeabi_d2f+0x90>
   d99ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d99f0:	bf1e      	ittt	ne
   d99f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d99f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d99fa:	4770      	bxne	lr
   d99fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9a08:	4770      	bx	lr
   d9a0a:	bf00      	nop

000d9a0c <asctime>:
   d9a0c:	4b09      	ldr	r3, [pc, #36]	; (d9a34 <asctime+0x28>)
   d9a0e:	b570      	push	{r4, r5, r6, lr}
   d9a10:	681c      	ldr	r4, [r3, #0]
   d9a12:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9a14:	4606      	mov	r6, r0
   d9a16:	b93d      	cbnz	r5, d9a28 <asctime+0x1c>
   d9a18:	201a      	movs	r0, #26
   d9a1a:	f7fd fa05 	bl	d6e28 <malloc>
   d9a1e:	221a      	movs	r2, #26
   d9a20:	6420      	str	r0, [r4, #64]	; 0x40
   d9a22:	4629      	mov	r1, r5
   d9a24:	f000 f9f1 	bl	d9e0a <memset>
   d9a28:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9a2a:	4630      	mov	r0, r6
   d9a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9a30:	f000 b802 	b.w	d9a38 <asctime_r>
   d9a34:	2003e000 	.word	0x2003e000

000d9a38 <asctime_r>:
   d9a38:	b510      	push	{r4, lr}
   d9a3a:	460c      	mov	r4, r1
   d9a3c:	6941      	ldr	r1, [r0, #20]
   d9a3e:	6903      	ldr	r3, [r0, #16]
   d9a40:	6982      	ldr	r2, [r0, #24]
   d9a42:	b086      	sub	sp, #24
   d9a44:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9a48:	9104      	str	r1, [sp, #16]
   d9a4a:	6801      	ldr	r1, [r0, #0]
   d9a4c:	9103      	str	r1, [sp, #12]
   d9a4e:	6841      	ldr	r1, [r0, #4]
   d9a50:	9102      	str	r1, [sp, #8]
   d9a52:	6881      	ldr	r1, [r0, #8]
   d9a54:	9101      	str	r1, [sp, #4]
   d9a56:	68c1      	ldr	r1, [r0, #12]
   d9a58:	9100      	str	r1, [sp, #0]
   d9a5a:	4907      	ldr	r1, [pc, #28]	; (d9a78 <asctime_r+0x40>)
   d9a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9a60:	440b      	add	r3, r1
   d9a62:	4906      	ldr	r1, [pc, #24]	; (d9a7c <asctime_r+0x44>)
   d9a64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9a68:	440a      	add	r2, r1
   d9a6a:	4620      	mov	r0, r4
   d9a6c:	4904      	ldr	r1, [pc, #16]	; (d9a80 <asctime_r+0x48>)
   d9a6e:	f7fd f9f3 	bl	d6e58 <siprintf>
   d9a72:	4620      	mov	r0, r4
   d9a74:	b006      	add	sp, #24
   d9a76:	bd10      	pop	{r4, pc}
   d9a78:	000dd9c1 	.word	0x000dd9c1
   d9a7c:	000dd9ac 	.word	0x000dd9ac
   d9a80:	000dd9e5 	.word	0x000dd9e5

000d9a84 <atoi>:
   d9a84:	220a      	movs	r2, #10
   d9a86:	2100      	movs	r1, #0
   d9a88:	f002 b874 	b.w	dbb74 <strtol>

000d9a8c <__cxa_atexit>:
   d9a8c:	b510      	push	{r4, lr}
   d9a8e:	4c05      	ldr	r4, [pc, #20]	; (d9aa4 <__cxa_atexit+0x18>)
   d9a90:	4613      	mov	r3, r2
   d9a92:	b12c      	cbz	r4, d9aa0 <__cxa_atexit+0x14>
   d9a94:	460a      	mov	r2, r1
   d9a96:	4601      	mov	r1, r0
   d9a98:	2002      	movs	r0, #2
   d9a9a:	f3af 8000 	nop.w
   d9a9e:	bd10      	pop	{r4, pc}
   d9aa0:	4620      	mov	r0, r4
   d9aa2:	bd10      	pop	{r4, pc}
   d9aa4:	00000000 	.word	0x00000000

000d9aa8 <gmtime>:
   d9aa8:	b538      	push	{r3, r4, r5, lr}
   d9aaa:	4b07      	ldr	r3, [pc, #28]	; (d9ac8 <gmtime+0x20>)
   d9aac:	681c      	ldr	r4, [r3, #0]
   d9aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9ab0:	4605      	mov	r5, r0
   d9ab2:	b91b      	cbnz	r3, d9abc <gmtime+0x14>
   d9ab4:	2024      	movs	r0, #36	; 0x24
   d9ab6:	f7fd f9b7 	bl	d6e28 <malloc>
   d9aba:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9abc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9abe:	4628      	mov	r0, r5
   d9ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9ac4:	f000 b802 	b.w	d9acc <gmtime_r>
   d9ac8:	2003e000 	.word	0x2003e000

000d9acc <gmtime_r>:
   d9acc:	6802      	ldr	r2, [r0, #0]
   d9ace:	4b47      	ldr	r3, [pc, #284]	; (d9bec <gmtime_r+0x120>)
   d9ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9ad2:	fb92 f4f3 	sdiv	r4, r2, r3
   d9ad6:	fb03 2214 	mls	r2, r3, r4, r2
   d9ada:	2a00      	cmp	r2, #0
   d9adc:	bfbc      	itt	lt
   d9ade:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9ae2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9ae6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9aea:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9aee:	fb92 f3f0 	sdiv	r3, r2, r0
   d9af2:	fb00 2213 	mls	r2, r0, r3, r2
   d9af6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9afa:	bfac      	ite	ge
   d9afc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9b00:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9b04:	608b      	str	r3, [r1, #8]
   d9b06:	fb92 f3f0 	sdiv	r3, r2, r0
   d9b0a:	fb00 2213 	mls	r2, r0, r3, r2
   d9b0e:	604b      	str	r3, [r1, #4]
   d9b10:	600a      	str	r2, [r1, #0]
   d9b12:	2307      	movs	r3, #7
   d9b14:	1ce2      	adds	r2, r4, #3
   d9b16:	fb92 f3f3 	sdiv	r3, r2, r3
   d9b1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9b1e:	1ad3      	subs	r3, r2, r3
   d9b20:	618b      	str	r3, [r1, #24]
   d9b22:	4b33      	ldr	r3, [pc, #204]	; (d9bf0 <gmtime_r+0x124>)
   d9b24:	4d33      	ldr	r5, [pc, #204]	; (d9bf4 <gmtime_r+0x128>)
   d9b26:	fb94 f5f5 	sdiv	r5, r4, r5
   d9b2a:	fb03 4405 	mla	r4, r3, r5, r4
   d9b2e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9b32:	fbb4 f2f2 	udiv	r2, r4, r2
   d9b36:	4422      	add	r2, r4
   d9b38:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9b3c:	fbb4 f3f7 	udiv	r3, r4, r7
   d9b40:	1ad2      	subs	r2, r2, r3
   d9b42:	482d      	ldr	r0, [pc, #180]	; (d9bf8 <gmtime_r+0x12c>)
   d9b44:	fbb4 f0f0 	udiv	r0, r4, r0
   d9b48:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9b4c:	1a13      	subs	r3, r2, r0
   d9b4e:	fbb3 f6f6 	udiv	r6, r3, r6
   d9b52:	4434      	add	r4, r6
   d9b54:	f240 126d 	movw	r2, #365	; 0x16d
   d9b58:	fbb3 f0f2 	udiv	r0, r3, r2
   d9b5c:	fbb3 f3f7 	udiv	r3, r3, r7
   d9b60:	1ae3      	subs	r3, r4, r3
   d9b62:	fb02 3310 	mls	r3, r2, r0, r3
   d9b66:	2499      	movs	r4, #153	; 0x99
   d9b68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9b6c:	3202      	adds	r2, #2
   d9b6e:	fbb2 f2f4 	udiv	r2, r2, r4
   d9b72:	2a0a      	cmp	r2, #10
   d9b74:	fb04 f402 	mul.w	r4, r4, r2
   d9b78:	f104 0602 	add.w	r6, r4, #2
   d9b7c:	f04f 0405 	mov.w	r4, #5
   d9b80:	fbb6 f4f4 	udiv	r4, r6, r4
   d9b84:	bf34      	ite	cc
   d9b86:	2602      	movcc	r6, #2
   d9b88:	f06f 0609 	mvncs.w	r6, #9
   d9b8c:	4416      	add	r6, r2
   d9b8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9b92:	fb02 0505 	mla	r5, r2, r5, r0
   d9b96:	1c5f      	adds	r7, r3, #1
   d9b98:	2e01      	cmp	r6, #1
   d9b9a:	bf98      	it	ls
   d9b9c:	3501      	addls	r5, #1
   d9b9e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9ba2:	eba7 0704 	sub.w	r7, r7, r4
   d9ba6:	d302      	bcc.n	d9bae <gmtime_r+0xe2>
   d9ba8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9bac:	e014      	b.n	d9bd8 <gmtime_r+0x10c>
   d9bae:	0782      	lsls	r2, r0, #30
   d9bb0:	d105      	bne.n	d9bbe <gmtime_r+0xf2>
   d9bb2:	2464      	movs	r4, #100	; 0x64
   d9bb4:	fbb0 f2f4 	udiv	r2, r0, r4
   d9bb8:	fb04 0212 	mls	r2, r4, r2, r0
   d9bbc:	b94a      	cbnz	r2, d9bd2 <gmtime_r+0x106>
   d9bbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9bc2:	fbb0 f4f2 	udiv	r4, r0, r2
   d9bc6:	fb02 0014 	mls	r0, r2, r4, r0
   d9bca:	fab0 f280 	clz	r2, r0
   d9bce:	0952      	lsrs	r2, r2, #5
   d9bd0:	e000      	b.n	d9bd4 <gmtime_r+0x108>
   d9bd2:	2201      	movs	r2, #1
   d9bd4:	333b      	adds	r3, #59	; 0x3b
   d9bd6:	441a      	add	r2, r3
   d9bd8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9bdc:	2300      	movs	r3, #0
   d9bde:	61ca      	str	r2, [r1, #28]
   d9be0:	614d      	str	r5, [r1, #20]
   d9be2:	610e      	str	r6, [r1, #16]
   d9be4:	60cf      	str	r7, [r1, #12]
   d9be6:	620b      	str	r3, [r1, #32]
   d9be8:	4608      	mov	r0, r1
   d9bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9bec:	00015180 	.word	0x00015180
   d9bf0:	fffdc54f 	.word	0xfffdc54f
   d9bf4:	00023ab1 	.word	0x00023ab1
   d9bf8:	00023ab0 	.word	0x00023ab0

000d9bfc <localtime>:
   d9bfc:	b538      	push	{r3, r4, r5, lr}
   d9bfe:	4b07      	ldr	r3, [pc, #28]	; (d9c1c <localtime+0x20>)
   d9c00:	681c      	ldr	r4, [r3, #0]
   d9c02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9c04:	4605      	mov	r5, r0
   d9c06:	b91b      	cbnz	r3, d9c10 <localtime+0x14>
   d9c08:	2024      	movs	r0, #36	; 0x24
   d9c0a:	f7fd f90d 	bl	d6e28 <malloc>
   d9c0e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9c12:	4628      	mov	r0, r5
   d9c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9c18:	f000 b802 	b.w	d9c20 <localtime_r>
   d9c1c:	2003e000 	.word	0x2003e000

000d9c20 <localtime_r>:
   d9c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c24:	460c      	mov	r4, r1
   d9c26:	4680      	mov	r8, r0
   d9c28:	f002 fdf0 	bl	dc80c <__gettzinfo>
   d9c2c:	4621      	mov	r1, r4
   d9c2e:	4607      	mov	r7, r0
   d9c30:	4640      	mov	r0, r8
   d9c32:	f7ff ff4b 	bl	d9acc <gmtime_r>
   d9c36:	6946      	ldr	r6, [r0, #20]
   d9c38:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9c3c:	07b3      	lsls	r3, r6, #30
   d9c3e:	4604      	mov	r4, r0
   d9c40:	d105      	bne.n	d9c4e <localtime_r+0x2e>
   d9c42:	2264      	movs	r2, #100	; 0x64
   d9c44:	fb96 f3f2 	sdiv	r3, r6, r2
   d9c48:	fb02 6313 	mls	r3, r2, r3, r6
   d9c4c:	b94b      	cbnz	r3, d9c62 <localtime_r+0x42>
   d9c4e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9c52:	fb96 f3f5 	sdiv	r3, r6, r5
   d9c56:	fb05 6513 	mls	r5, r5, r3, r6
   d9c5a:	fab5 f385 	clz	r3, r5
   d9c5e:	095b      	lsrs	r3, r3, #5
   d9c60:	e000      	b.n	d9c64 <localtime_r+0x44>
   d9c62:	2301      	movs	r3, #1
   d9c64:	4a5f      	ldr	r2, [pc, #380]	; (d9de4 <localtime_r+0x1c4>)
   d9c66:	2530      	movs	r5, #48	; 0x30
   d9c68:	fb05 2503 	mla	r5, r5, r3, r2
   d9c6c:	f002 f8cc 	bl	dbe08 <__tz_lock>
   d9c70:	f002 f8cc 	bl	dbe0c <_tzset_unlocked>
   d9c74:	4b5c      	ldr	r3, [pc, #368]	; (d9de8 <localtime_r+0x1c8>)
   d9c76:	681b      	ldr	r3, [r3, #0]
   d9c78:	b1f3      	cbz	r3, d9cb8 <localtime_r+0x98>
   d9c7a:	687b      	ldr	r3, [r7, #4]
   d9c7c:	429e      	cmp	r6, r3
   d9c7e:	d105      	bne.n	d9c8c <localtime_r+0x6c>
   d9c80:	6839      	ldr	r1, [r7, #0]
   d9c82:	f8d8 3000 	ldr.w	r3, [r8]
   d9c86:	69fa      	ldr	r2, [r7, #28]
   d9c88:	b941      	cbnz	r1, d9c9c <localtime_r+0x7c>
   d9c8a:	e00a      	b.n	d9ca2 <localtime_r+0x82>
   d9c8c:	4630      	mov	r0, r6
   d9c8e:	f002 f813 	bl	dbcb8 <__tzcalc_limits>
   d9c92:	2800      	cmp	r0, #0
   d9c94:	d1f4      	bne.n	d9c80 <localtime_r+0x60>
   d9c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9c9a:	e00d      	b.n	d9cb8 <localtime_r+0x98>
   d9c9c:	4293      	cmp	r3, r2
   d9c9e:	db08      	blt.n	d9cb2 <localtime_r+0x92>
   d9ca0:	e001      	b.n	d9ca6 <localtime_r+0x86>
   d9ca2:	4293      	cmp	r3, r2
   d9ca4:	da07      	bge.n	d9cb6 <localtime_r+0x96>
   d9ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9ca8:	4293      	cmp	r3, r2
   d9caa:	bfac      	ite	ge
   d9cac:	2300      	movge	r3, #0
   d9cae:	2301      	movlt	r3, #1
   d9cb0:	e002      	b.n	d9cb8 <localtime_r+0x98>
   d9cb2:	2300      	movs	r3, #0
   d9cb4:	e000      	b.n	d9cb8 <localtime_r+0x98>
   d9cb6:	2301      	movs	r3, #1
   d9cb8:	6223      	str	r3, [r4, #32]
   d9cba:	6a23      	ldr	r3, [r4, #32]
   d9cbc:	2b01      	cmp	r3, #1
   d9cbe:	bf0c      	ite	eq
   d9cc0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9cc2:	6a39      	ldrne	r1, [r7, #32]
   d9cc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9cc8:	203c      	movs	r0, #60	; 0x3c
   d9cca:	fb91 f6f3 	sdiv	r6, r1, r3
   d9cce:	fb03 1316 	mls	r3, r3, r6, r1
   d9cd2:	6861      	ldr	r1, [r4, #4]
   d9cd4:	fb93 f2f0 	sdiv	r2, r3, r0
   d9cd8:	fb00 3012 	mls	r0, r0, r2, r3
   d9cdc:	6823      	ldr	r3, [r4, #0]
   d9cde:	1a89      	subs	r1, r1, r2
   d9ce0:	68a2      	ldr	r2, [r4, #8]
   d9ce2:	6061      	str	r1, [r4, #4]
   d9ce4:	1a1b      	subs	r3, r3, r0
   d9ce6:	1b92      	subs	r2, r2, r6
   d9ce8:	2b3b      	cmp	r3, #59	; 0x3b
   d9cea:	6023      	str	r3, [r4, #0]
   d9cec:	60a2      	str	r2, [r4, #8]
   d9cee:	dd03      	ble.n	d9cf8 <localtime_r+0xd8>
   d9cf0:	3101      	adds	r1, #1
   d9cf2:	6061      	str	r1, [r4, #4]
   d9cf4:	3b3c      	subs	r3, #60	; 0x3c
   d9cf6:	e004      	b.n	d9d02 <localtime_r+0xe2>
   d9cf8:	2b00      	cmp	r3, #0
   d9cfa:	da03      	bge.n	d9d04 <localtime_r+0xe4>
   d9cfc:	3901      	subs	r1, #1
   d9cfe:	6061      	str	r1, [r4, #4]
   d9d00:	333c      	adds	r3, #60	; 0x3c
   d9d02:	6023      	str	r3, [r4, #0]
   d9d04:	6863      	ldr	r3, [r4, #4]
   d9d06:	2b3b      	cmp	r3, #59	; 0x3b
   d9d08:	dd03      	ble.n	d9d12 <localtime_r+0xf2>
   d9d0a:	3201      	adds	r2, #1
   d9d0c:	60a2      	str	r2, [r4, #8]
   d9d0e:	3b3c      	subs	r3, #60	; 0x3c
   d9d10:	e004      	b.n	d9d1c <localtime_r+0xfc>
   d9d12:	2b00      	cmp	r3, #0
   d9d14:	da03      	bge.n	d9d1e <localtime_r+0xfe>
   d9d16:	3a01      	subs	r2, #1
   d9d18:	60a2      	str	r2, [r4, #8]
   d9d1a:	333c      	adds	r3, #60	; 0x3c
   d9d1c:	6063      	str	r3, [r4, #4]
   d9d1e:	68a3      	ldr	r3, [r4, #8]
   d9d20:	2b17      	cmp	r3, #23
   d9d22:	dd22      	ble.n	d9d6a <localtime_r+0x14a>
   d9d24:	69e2      	ldr	r2, [r4, #28]
   d9d26:	3201      	adds	r2, #1
   d9d28:	61e2      	str	r2, [r4, #28]
   d9d2a:	69a2      	ldr	r2, [r4, #24]
   d9d2c:	3201      	adds	r2, #1
   d9d2e:	2a06      	cmp	r2, #6
   d9d30:	bfc8      	it	gt
   d9d32:	2200      	movgt	r2, #0
   d9d34:	61a2      	str	r2, [r4, #24]
   d9d36:	68e2      	ldr	r2, [r4, #12]
   d9d38:	3b18      	subs	r3, #24
   d9d3a:	3201      	adds	r2, #1
   d9d3c:	60a3      	str	r3, [r4, #8]
   d9d3e:	6923      	ldr	r3, [r4, #16]
   d9d40:	60e2      	str	r2, [r4, #12]
   d9d42:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9d46:	428a      	cmp	r2, r1
   d9d48:	dd46      	ble.n	d9dd8 <localtime_r+0x1b8>
   d9d4a:	3301      	adds	r3, #1
   d9d4c:	2b0c      	cmp	r3, #12
   d9d4e:	bf0c      	ite	eq
   d9d50:	6963      	ldreq	r3, [r4, #20]
   d9d52:	6123      	strne	r3, [r4, #16]
   d9d54:	eba2 0201 	sub.w	r2, r2, r1
   d9d58:	60e2      	str	r2, [r4, #12]
   d9d5a:	bf01      	itttt	eq
   d9d5c:	3301      	addeq	r3, #1
   d9d5e:	2200      	moveq	r2, #0
   d9d60:	6122      	streq	r2, [r4, #16]
   d9d62:	6163      	streq	r3, [r4, #20]
   d9d64:	bf08      	it	eq
   d9d66:	61e2      	streq	r2, [r4, #28]
   d9d68:	e036      	b.n	d9dd8 <localtime_r+0x1b8>
   d9d6a:	2b00      	cmp	r3, #0
   d9d6c:	da34      	bge.n	d9dd8 <localtime_r+0x1b8>
   d9d6e:	69e2      	ldr	r2, [r4, #28]
   d9d70:	3a01      	subs	r2, #1
   d9d72:	61e2      	str	r2, [r4, #28]
   d9d74:	69a2      	ldr	r2, [r4, #24]
   d9d76:	3a01      	subs	r2, #1
   d9d78:	bf48      	it	mi
   d9d7a:	2206      	movmi	r2, #6
   d9d7c:	61a2      	str	r2, [r4, #24]
   d9d7e:	68e2      	ldr	r2, [r4, #12]
   d9d80:	3318      	adds	r3, #24
   d9d82:	3a01      	subs	r2, #1
   d9d84:	60e2      	str	r2, [r4, #12]
   d9d86:	60a3      	str	r3, [r4, #8]
   d9d88:	bb32      	cbnz	r2, d9dd8 <localtime_r+0x1b8>
   d9d8a:	6923      	ldr	r3, [r4, #16]
   d9d8c:	3b01      	subs	r3, #1
   d9d8e:	d401      	bmi.n	d9d94 <localtime_r+0x174>
   d9d90:	6123      	str	r3, [r4, #16]
   d9d92:	e01d      	b.n	d9dd0 <localtime_r+0x1b0>
   d9d94:	230b      	movs	r3, #11
   d9d96:	6123      	str	r3, [r4, #16]
   d9d98:	6963      	ldr	r3, [r4, #20]
   d9d9a:	1e5a      	subs	r2, r3, #1
   d9d9c:	f012 0f03 	tst.w	r2, #3
   d9da0:	6162      	str	r2, [r4, #20]
   d9da2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9da6:	d105      	bne.n	d9db4 <localtime_r+0x194>
   d9da8:	2164      	movs	r1, #100	; 0x64
   d9daa:	fb93 f2f1 	sdiv	r2, r3, r1
   d9dae:	fb01 3212 	mls	r2, r1, r2, r3
   d9db2:	b94a      	cbnz	r2, d9dc8 <localtime_r+0x1a8>
   d9db4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9db8:	fb93 f2f1 	sdiv	r2, r3, r1
   d9dbc:	fb01 3312 	mls	r3, r1, r2, r3
   d9dc0:	fab3 f383 	clz	r3, r3
   d9dc4:	095b      	lsrs	r3, r3, #5
   d9dc6:	e000      	b.n	d9dca <localtime_r+0x1aa>
   d9dc8:	2301      	movs	r3, #1
   d9dca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9dce:	61e3      	str	r3, [r4, #28]
   d9dd0:	6923      	ldr	r3, [r4, #16]
   d9dd2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9dd6:	60e3      	str	r3, [r4, #12]
   d9dd8:	f002 f817 	bl	dbe0a <__tz_unlock>
   d9ddc:	4620      	mov	r0, r4
   d9dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9de2:	bf00      	nop
   d9de4:	000ddbd0 	.word	0x000ddbd0
   d9de8:	2003e7e4 	.word	0x2003e7e4

000d9dec <_localeconv_r>:
   d9dec:	4800      	ldr	r0, [pc, #0]	; (d9df0 <_localeconv_r+0x4>)
   d9dee:	4770      	bx	lr
   d9df0:	2003e004 	.word	0x2003e004

000d9df4 <memcpy>:
   d9df4:	b510      	push	{r4, lr}
   d9df6:	1e43      	subs	r3, r0, #1
   d9df8:	440a      	add	r2, r1
   d9dfa:	4291      	cmp	r1, r2
   d9dfc:	d004      	beq.n	d9e08 <memcpy+0x14>
   d9dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9e02:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9e06:	e7f8      	b.n	d9dfa <memcpy+0x6>
   d9e08:	bd10      	pop	{r4, pc}

000d9e0a <memset>:
   d9e0a:	4402      	add	r2, r0
   d9e0c:	4603      	mov	r3, r0
   d9e0e:	4293      	cmp	r3, r2
   d9e10:	d002      	beq.n	d9e18 <memset+0xe>
   d9e12:	f803 1b01 	strb.w	r1, [r3], #1
   d9e16:	e7fa      	b.n	d9e0e <memset+0x4>
   d9e18:	4770      	bx	lr
	...

000d9e1c <validate_structure>:
   d9e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9e1e:	6801      	ldr	r1, [r0, #0]
   d9e20:	293b      	cmp	r1, #59	; 0x3b
   d9e22:	4604      	mov	r4, r0
   d9e24:	d911      	bls.n	d9e4a <validate_structure+0x2e>
   d9e26:	223c      	movs	r2, #60	; 0x3c
   d9e28:	4668      	mov	r0, sp
   d9e2a:	f002 f979 	bl	dc120 <div>
   d9e2e:	9a01      	ldr	r2, [sp, #4]
   d9e30:	6863      	ldr	r3, [r4, #4]
   d9e32:	9900      	ldr	r1, [sp, #0]
   d9e34:	2a00      	cmp	r2, #0
   d9e36:	440b      	add	r3, r1
   d9e38:	6063      	str	r3, [r4, #4]
   d9e3a:	bfbb      	ittet	lt
   d9e3c:	323c      	addlt	r2, #60	; 0x3c
   d9e3e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9e42:	6022      	strge	r2, [r4, #0]
   d9e44:	6022      	strlt	r2, [r4, #0]
   d9e46:	bfb8      	it	lt
   d9e48:	6063      	strlt	r3, [r4, #4]
   d9e4a:	6861      	ldr	r1, [r4, #4]
   d9e4c:	293b      	cmp	r1, #59	; 0x3b
   d9e4e:	d911      	bls.n	d9e74 <validate_structure+0x58>
   d9e50:	223c      	movs	r2, #60	; 0x3c
   d9e52:	4668      	mov	r0, sp
   d9e54:	f002 f964 	bl	dc120 <div>
   d9e58:	9a01      	ldr	r2, [sp, #4]
   d9e5a:	68a1      	ldr	r1, [r4, #8]
   d9e5c:	9b00      	ldr	r3, [sp, #0]
   d9e5e:	2a00      	cmp	r2, #0
   d9e60:	440b      	add	r3, r1
   d9e62:	60a3      	str	r3, [r4, #8]
   d9e64:	bfbb      	ittet	lt
   d9e66:	323c      	addlt	r2, #60	; 0x3c
   d9e68:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9e6c:	6062      	strge	r2, [r4, #4]
   d9e6e:	6062      	strlt	r2, [r4, #4]
   d9e70:	bfb8      	it	lt
   d9e72:	60a3      	strlt	r3, [r4, #8]
   d9e74:	68a1      	ldr	r1, [r4, #8]
   d9e76:	2917      	cmp	r1, #23
   d9e78:	d911      	bls.n	d9e9e <validate_structure+0x82>
   d9e7a:	2218      	movs	r2, #24
   d9e7c:	4668      	mov	r0, sp
   d9e7e:	f002 f94f 	bl	dc120 <div>
   d9e82:	9a01      	ldr	r2, [sp, #4]
   d9e84:	68e1      	ldr	r1, [r4, #12]
   d9e86:	9b00      	ldr	r3, [sp, #0]
   d9e88:	2a00      	cmp	r2, #0
   d9e8a:	440b      	add	r3, r1
   d9e8c:	60e3      	str	r3, [r4, #12]
   d9e8e:	bfbb      	ittet	lt
   d9e90:	3218      	addlt	r2, #24
   d9e92:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9e96:	60a2      	strge	r2, [r4, #8]
   d9e98:	60a2      	strlt	r2, [r4, #8]
   d9e9a:	bfb8      	it	lt
   d9e9c:	60e3      	strlt	r3, [r4, #12]
   d9e9e:	6921      	ldr	r1, [r4, #16]
   d9ea0:	290b      	cmp	r1, #11
   d9ea2:	d911      	bls.n	d9ec8 <validate_structure+0xac>
   d9ea4:	220c      	movs	r2, #12
   d9ea6:	4668      	mov	r0, sp
   d9ea8:	f002 f93a 	bl	dc120 <div>
   d9eac:	9a01      	ldr	r2, [sp, #4]
   d9eae:	6961      	ldr	r1, [r4, #20]
   d9eb0:	9b00      	ldr	r3, [sp, #0]
   d9eb2:	2a00      	cmp	r2, #0
   d9eb4:	440b      	add	r3, r1
   d9eb6:	6163      	str	r3, [r4, #20]
   d9eb8:	bfbb      	ittet	lt
   d9eba:	320c      	addlt	r2, #12
   d9ebc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d9ec0:	6122      	strge	r2, [r4, #16]
   d9ec2:	6122      	strlt	r2, [r4, #16]
   d9ec4:	bfb8      	it	lt
   d9ec6:	6163      	strlt	r3, [r4, #20]
   d9ec8:	6963      	ldr	r3, [r4, #20]
   d9eca:	0799      	lsls	r1, r3, #30
   d9ecc:	d112      	bne.n	d9ef4 <validate_structure+0xd8>
   d9ece:	2164      	movs	r1, #100	; 0x64
   d9ed0:	fb93 f2f1 	sdiv	r2, r3, r1
   d9ed4:	fb01 3212 	mls	r2, r1, r2, r3
   d9ed8:	b972      	cbnz	r2, d9ef8 <validate_structure+0xdc>
   d9eda:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9ede:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9ee2:	fb93 f2f1 	sdiv	r2, r3, r1
   d9ee6:	fb01 3312 	mls	r3, r1, r2, r3
   d9eea:	2b00      	cmp	r3, #0
   d9eec:	bf14      	ite	ne
   d9eee:	231c      	movne	r3, #28
   d9ef0:	231d      	moveq	r3, #29
   d9ef2:	e002      	b.n	d9efa <validate_structure+0xde>
   d9ef4:	231c      	movs	r3, #28
   d9ef6:	e000      	b.n	d9efa <validate_structure+0xde>
   d9ef8:	231d      	movs	r3, #29
   d9efa:	68e2      	ldr	r2, [r4, #12]
   d9efc:	2a00      	cmp	r2, #0
   d9efe:	dd06      	ble.n	d9f0e <validate_structure+0xf2>
   d9f00:	4f33      	ldr	r7, [pc, #204]	; (d9fd0 <validate_structure+0x1b4>)
   d9f02:	f04f 0e00 	mov.w	lr, #0
   d9f06:	2564      	movs	r5, #100	; 0x64
   d9f08:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9f0c:	e039      	b.n	d9f82 <validate_structure+0x166>
   d9f0e:	4f30      	ldr	r7, [pc, #192]	; (d9fd0 <validate_structure+0x1b4>)
   d9f10:	260b      	movs	r6, #11
   d9f12:	2064      	movs	r0, #100	; 0x64
   d9f14:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d9f18:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d9f1c:	f1be 0f00 	cmp.w	lr, #0
   d9f20:	dc53      	bgt.n	d9fca <validate_structure+0x1ae>
   d9f22:	6921      	ldr	r1, [r4, #16]
   d9f24:	3901      	subs	r1, #1
   d9f26:	6121      	str	r1, [r4, #16]
   d9f28:	3101      	adds	r1, #1
   d9f2a:	d118      	bne.n	d9f5e <validate_structure+0x142>
   d9f2c:	6963      	ldr	r3, [r4, #20]
   d9f2e:	6126      	str	r6, [r4, #16]
   d9f30:	1e59      	subs	r1, r3, #1
   d9f32:	078a      	lsls	r2, r1, #30
   d9f34:	6161      	str	r1, [r4, #20]
   d9f36:	d10f      	bne.n	d9f58 <validate_structure+0x13c>
   d9f38:	fb91 f2f0 	sdiv	r2, r1, r0
   d9f3c:	fb00 1112 	mls	r1, r0, r2, r1
   d9f40:	b961      	cbnz	r1, d9f5c <validate_structure+0x140>
   d9f42:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9f46:	fb93 f2f5 	sdiv	r2, r3, r5
   d9f4a:	fb05 3312 	mls	r3, r5, r2, r3
   d9f4e:	2b00      	cmp	r3, #0
   d9f50:	bf14      	ite	ne
   d9f52:	231c      	movne	r3, #28
   d9f54:	231d      	moveq	r3, #29
   d9f56:	e002      	b.n	d9f5e <validate_structure+0x142>
   d9f58:	231c      	movs	r3, #28
   d9f5a:	e000      	b.n	d9f5e <validate_structure+0x142>
   d9f5c:	231d      	movs	r3, #29
   d9f5e:	6922      	ldr	r2, [r4, #16]
   d9f60:	2a01      	cmp	r2, #1
   d9f62:	bf14      	ite	ne
   d9f64:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d9f68:	461a      	moveq	r2, r3
   d9f6a:	4472      	add	r2, lr
   d9f6c:	60e2      	str	r2, [r4, #12]
   d9f6e:	e7d3      	b.n	d9f18 <validate_structure+0xfc>
   d9f70:	428b      	cmp	r3, r1
   d9f72:	da2a      	bge.n	d9fca <validate_structure+0x1ae>
   d9f74:	4618      	mov	r0, r3
   d9f76:	3201      	adds	r2, #1
   d9f78:	1a09      	subs	r1, r1, r0
   d9f7a:	2a0c      	cmp	r2, #12
   d9f7c:	60e1      	str	r1, [r4, #12]
   d9f7e:	6122      	str	r2, [r4, #16]
   d9f80:	d008      	beq.n	d9f94 <validate_structure+0x178>
   d9f82:	6922      	ldr	r2, [r4, #16]
   d9f84:	68e1      	ldr	r1, [r4, #12]
   d9f86:	2a01      	cmp	r2, #1
   d9f88:	d0f2      	beq.n	d9f70 <validate_structure+0x154>
   d9f8a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d9f8e:	4281      	cmp	r1, r0
   d9f90:	dcf1      	bgt.n	d9f76 <validate_structure+0x15a>
   d9f92:	e01a      	b.n	d9fca <validate_structure+0x1ae>
   d9f94:	6963      	ldr	r3, [r4, #20]
   d9f96:	f8c4 e010 	str.w	lr, [r4, #16]
   d9f9a:	1c5a      	adds	r2, r3, #1
   d9f9c:	0791      	lsls	r1, r2, #30
   d9f9e:	6162      	str	r2, [r4, #20]
   d9fa0:	d10f      	bne.n	d9fc2 <validate_structure+0x1a6>
   d9fa2:	fb92 f1f5 	sdiv	r1, r2, r5
   d9fa6:	fb05 2211 	mls	r2, r5, r1, r2
   d9faa:	b962      	cbnz	r2, d9fc6 <validate_structure+0x1aa>
   d9fac:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d9fb0:	fb93 f2f6 	sdiv	r2, r3, r6
   d9fb4:	fb06 3312 	mls	r3, r6, r2, r3
   d9fb8:	2b00      	cmp	r3, #0
   d9fba:	bf14      	ite	ne
   d9fbc:	231c      	movne	r3, #28
   d9fbe:	231d      	moveq	r3, #29
   d9fc0:	e7df      	b.n	d9f82 <validate_structure+0x166>
   d9fc2:	231c      	movs	r3, #28
   d9fc4:	e7dd      	b.n	d9f82 <validate_structure+0x166>
   d9fc6:	231d      	movs	r3, #29
   d9fc8:	e7db      	b.n	d9f82 <validate_structure+0x166>
   d9fca:	b003      	add	sp, #12
   d9fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9fce:	bf00      	nop
   d9fd0:	000ddba0 	.word	0x000ddba0

000d9fd4 <mktime>:
   d9fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9fd8:	4605      	mov	r5, r0
   d9fda:	f002 fc17 	bl	dc80c <__gettzinfo>
   d9fde:	4681      	mov	r9, r0
   d9fe0:	4628      	mov	r0, r5
   d9fe2:	f7ff ff1b 	bl	d9e1c <validate_structure>
   d9fe6:	e895 000c 	ldmia.w	r5, {r2, r3}
   d9fea:	213c      	movs	r1, #60	; 0x3c
   d9fec:	fb01 2303 	mla	r3, r1, r3, r2
   d9ff0:	68aa      	ldr	r2, [r5, #8]
   d9ff2:	68ec      	ldr	r4, [r5, #12]
   d9ff4:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d9ff8:	fb08 3102 	mla	r1, r8, r2, r3
   d9ffc:	692b      	ldr	r3, [r5, #16]
   d9ffe:	4aab      	ldr	r2, [pc, #684]	; (da2ac <mktime+0x2d8>)
   da000:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   da004:	3c01      	subs	r4, #1
   da006:	2b01      	cmp	r3, #1
   da008:	4414      	add	r4, r2
   da00a:	696b      	ldr	r3, [r5, #20]
   da00c:	dd11      	ble.n	da032 <mktime+0x5e>
   da00e:	079e      	lsls	r6, r3, #30
   da010:	d10f      	bne.n	da032 <mktime+0x5e>
   da012:	2064      	movs	r0, #100	; 0x64
   da014:	fb93 f2f0 	sdiv	r2, r3, r0
   da018:	fb00 3212 	mls	r2, r0, r2, r3
   da01c:	b942      	cbnz	r2, da030 <mktime+0x5c>
   da01e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   da022:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da026:	fb96 f0f2 	sdiv	r0, r6, r2
   da02a:	fb02 6210 	mls	r2, r2, r0, r6
   da02e:	b902      	cbnz	r2, da032 <mktime+0x5e>
   da030:	3401      	adds	r4, #1
   da032:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   da036:	3210      	adds	r2, #16
   da038:	f644 6020 	movw	r0, #20000	; 0x4e20
   da03c:	4282      	cmp	r2, r0
   da03e:	61ec      	str	r4, [r5, #28]
   da040:	461f      	mov	r7, r3
   da042:	f200 812e 	bhi.w	da2a2 <mktime+0x2ce>
   da046:	2b46      	cmp	r3, #70	; 0x46
   da048:	dd22      	ble.n	da090 <mktime+0xbc>
   da04a:	2246      	movs	r2, #70	; 0x46
   da04c:	f240 1c6d 	movw	ip, #365	; 0x16d
   da050:	2664      	movs	r6, #100	; 0x64
   da052:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   da056:	0790      	lsls	r0, r2, #30
   da058:	d110      	bne.n	da07c <mktime+0xa8>
   da05a:	fb92 f0f6 	sdiv	r0, r2, r6
   da05e:	fb06 2010 	mls	r0, r6, r0, r2
   da062:	b970      	cbnz	r0, da082 <mktime+0xae>
   da064:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   da068:	fb98 f0fe 	sdiv	r0, r8, lr
   da06c:	fb0e 8010 	mls	r0, lr, r0, r8
   da070:	2800      	cmp	r0, #0
   da072:	bf14      	ite	ne
   da074:	4660      	movne	r0, ip
   da076:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da07a:	e004      	b.n	da086 <mktime+0xb2>
   da07c:	f240 106d 	movw	r0, #365	; 0x16d
   da080:	e001      	b.n	da086 <mktime+0xb2>
   da082:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da086:	3201      	adds	r2, #1
   da088:	4293      	cmp	r3, r2
   da08a:	4404      	add	r4, r0
   da08c:	d1e3      	bne.n	da056 <mktime+0x82>
   da08e:	e044      	b.n	da11a <mktime+0x146>
   da090:	d043      	beq.n	da11a <mktime+0x146>
   da092:	2245      	movs	r2, #69	; 0x45
   da094:	f240 1e6d 	movw	lr, #365	; 0x16d
   da098:	2664      	movs	r6, #100	; 0x64
   da09a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   da09e:	429a      	cmp	r2, r3
   da0a0:	dd1a      	ble.n	da0d8 <mktime+0x104>
   da0a2:	0790      	lsls	r0, r2, #30
   da0a4:	d110      	bne.n	da0c8 <mktime+0xf4>
   da0a6:	fb92 f0f6 	sdiv	r0, r2, r6
   da0aa:	fb06 2010 	mls	r0, r6, r0, r2
   da0ae:	b970      	cbnz	r0, da0ce <mktime+0xfa>
   da0b0:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   da0b4:	fb9c f0f7 	sdiv	r0, ip, r7
   da0b8:	fb07 c010 	mls	r0, r7, r0, ip
   da0bc:	2800      	cmp	r0, #0
   da0be:	bf14      	ite	ne
   da0c0:	4670      	movne	r0, lr
   da0c2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da0c6:	e004      	b.n	da0d2 <mktime+0xfe>
   da0c8:	f240 106d 	movw	r0, #365	; 0x16d
   da0cc:	e001      	b.n	da0d2 <mktime+0xfe>
   da0ce:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da0d2:	1a24      	subs	r4, r4, r0
   da0d4:	3a01      	subs	r2, #1
   da0d6:	e7e2      	b.n	da09e <mktime+0xca>
   da0d8:	2b45      	cmp	r3, #69	; 0x45
   da0da:	bfa8      	it	ge
   da0dc:	2345      	movge	r3, #69	; 0x45
   da0de:	079e      	lsls	r6, r3, #30
   da0e0:	461f      	mov	r7, r3
   da0e2:	d114      	bne.n	da10e <mktime+0x13a>
   da0e4:	2264      	movs	r2, #100	; 0x64
   da0e6:	fb93 f3f2 	sdiv	r3, r3, r2
   da0ea:	fb02 7313 	mls	r3, r2, r3, r7
   da0ee:	b98b      	cbnz	r3, da114 <mktime+0x140>
   da0f0:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   da0f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da0f8:	fb90 f2f3 	sdiv	r2, r0, r3
   da0fc:	fb03 0312 	mls	r3, r3, r2, r0
   da100:	2b00      	cmp	r3, #0
   da102:	f240 136d 	movw	r3, #365	; 0x16d
   da106:	bf08      	it	eq
   da108:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   da10c:	e004      	b.n	da118 <mktime+0x144>
   da10e:	f240 136d 	movw	r3, #365	; 0x16d
   da112:	e001      	b.n	da118 <mktime+0x144>
   da114:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   da118:	1ae4      	subs	r4, r4, r3
   da11a:	4865      	ldr	r0, [pc, #404]	; (da2b0 <mktime+0x2dc>)
   da11c:	fb00 1804 	mla	r8, r0, r4, r1
   da120:	f001 fe72 	bl	dbe08 <__tz_lock>
   da124:	f001 fe72 	bl	dbe0c <_tzset_unlocked>
   da128:	4b62      	ldr	r3, [pc, #392]	; (da2b4 <mktime+0x2e0>)
   da12a:	681e      	ldr	r6, [r3, #0]
   da12c:	2e00      	cmp	r6, #0
   da12e:	f000 80a4 	beq.w	da27a <mktime+0x2a6>
   da132:	6a2b      	ldr	r3, [r5, #32]
   da134:	6968      	ldr	r0, [r5, #20]
   da136:	2b01      	cmp	r3, #1
   da138:	bfa8      	it	ge
   da13a:	2301      	movge	r3, #1
   da13c:	469a      	mov	sl, r3
   da13e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   da142:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da146:	4298      	cmp	r0, r3
   da148:	d10d      	bne.n	da166 <mktime+0x192>
   da14a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   da14e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   da152:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da156:	f8d9 101c 	ldr.w	r1, [r9, #28]
   da15a:	1ad6      	subs	r6, r2, r3
   da15c:	45b0      	cmp	r8, r6
   da15e:	eba1 0100 	sub.w	r1, r1, r0
   da162:	da05      	bge.n	da170 <mktime+0x19c>
   da164:	e007      	b.n	da176 <mktime+0x1a2>
   da166:	f001 fda7 	bl	dbcb8 <__tzcalc_limits>
   da16a:	2800      	cmp	r0, #0
   da16c:	d1ed      	bne.n	da14a <mktime+0x176>
   da16e:	e076      	b.n	da25e <mktime+0x28a>
   da170:	1a12      	subs	r2, r2, r0
   da172:	4590      	cmp	r8, r2
   da174:	db73      	blt.n	da25e <mktime+0x28a>
   da176:	f8d9 2000 	ldr.w	r2, [r9]
   da17a:	b112      	cbz	r2, da182 <mktime+0x1ae>
   da17c:	4588      	cmp	r8, r1
   da17e:	db77      	blt.n	da270 <mktime+0x29c>
   da180:	e001      	b.n	da186 <mktime+0x1b2>
   da182:	4588      	cmp	r8, r1
   da184:	da07      	bge.n	da196 <mktime+0x1c2>
   da186:	45b0      	cmp	r8, r6
   da188:	bfac      	ite	ge
   da18a:	2600      	movge	r6, #0
   da18c:	2601      	movlt	r6, #1
   da18e:	f1ba 0f00 	cmp.w	sl, #0
   da192:	da04      	bge.n	da19e <mktime+0x1ca>
   da194:	e064      	b.n	da260 <mktime+0x28c>
   da196:	f1ba 0f00 	cmp.w	sl, #0
   da19a:	db63      	blt.n	da264 <mktime+0x290>
   da19c:	2601      	movs	r6, #1
   da19e:	ea8a 0a06 	eor.w	sl, sl, r6
   da1a2:	f1ba 0f01 	cmp.w	sl, #1
   da1a6:	d15b      	bne.n	da260 <mktime+0x28c>
   da1a8:	1a1b      	subs	r3, r3, r0
   da1aa:	b906      	cbnz	r6, da1ae <mktime+0x1da>
   da1ac:	425b      	negs	r3, r3
   da1ae:	682a      	ldr	r2, [r5, #0]
   da1b0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   da1b4:	441a      	add	r2, r3
   da1b6:	602a      	str	r2, [r5, #0]
   da1b8:	4628      	mov	r0, r5
   da1ba:	4498      	add	r8, r3
   da1bc:	f7ff fe2e 	bl	d9e1c <validate_structure>
   da1c0:	68eb      	ldr	r3, [r5, #12]
   da1c2:	ebb3 030a 	subs.w	r3, r3, sl
   da1c6:	d04b      	beq.n	da260 <mktime+0x28c>
   da1c8:	2b01      	cmp	r3, #1
   da1ca:	dc03      	bgt.n	da1d4 <mktime+0x200>
   da1cc:	1c98      	adds	r0, r3, #2
   da1ce:	bfd8      	it	le
   da1d0:	2301      	movle	r3, #1
   da1d2:	e001      	b.n	da1d8 <mktime+0x204>
   da1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da1d8:	69ea      	ldr	r2, [r5, #28]
   da1da:	441c      	add	r4, r3
   da1dc:	189b      	adds	r3, r3, r2
   da1de:	d51d      	bpl.n	da21c <mktime+0x248>
   da1e0:	1e7b      	subs	r3, r7, #1
   da1e2:	0799      	lsls	r1, r3, #30
   da1e4:	d114      	bne.n	da210 <mktime+0x23c>
   da1e6:	2164      	movs	r1, #100	; 0x64
   da1e8:	fb93 f2f1 	sdiv	r2, r3, r1
   da1ec:	fb01 3312 	mls	r3, r1, r2, r3
   da1f0:	b98b      	cbnz	r3, da216 <mktime+0x242>
   da1f2:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   da1f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da1fa:	fb97 f3f2 	sdiv	r3, r7, r2
   da1fe:	fb02 7713 	mls	r7, r2, r3, r7
   da202:	2f00      	cmp	r7, #0
   da204:	f240 136d 	movw	r3, #365	; 0x16d
   da208:	bf18      	it	ne
   da20a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   da20e:	e024      	b.n	da25a <mktime+0x286>
   da210:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   da214:	e021      	b.n	da25a <mktime+0x286>
   da216:	f240 136d 	movw	r3, #365	; 0x16d
   da21a:	e01e      	b.n	da25a <mktime+0x286>
   da21c:	07ba      	lsls	r2, r7, #30
   da21e:	d114      	bne.n	da24a <mktime+0x276>
   da220:	2164      	movs	r1, #100	; 0x64
   da222:	fb97 f2f1 	sdiv	r2, r7, r1
   da226:	fb01 7212 	mls	r2, r1, r2, r7
   da22a:	b98a      	cbnz	r2, da250 <mktime+0x27c>
   da22c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   da230:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da234:	fb97 f2f1 	sdiv	r2, r7, r1
   da238:	fb01 7712 	mls	r7, r1, r2, r7
   da23c:	2f00      	cmp	r7, #0
   da23e:	f240 126d 	movw	r2, #365	; 0x16d
   da242:	bf08      	it	eq
   da244:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   da248:	e004      	b.n	da254 <mktime+0x280>
   da24a:	f240 126d 	movw	r2, #365	; 0x16d
   da24e:	e001      	b.n	da254 <mktime+0x280>
   da250:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   da254:	429a      	cmp	r2, r3
   da256:	bfd8      	it	le
   da258:	1a9b      	suble	r3, r3, r2
   da25a:	61eb      	str	r3, [r5, #28]
   da25c:	e000      	b.n	da260 <mktime+0x28c>
   da25e:	4656      	mov	r6, sl
   da260:	2e01      	cmp	r6, #1
   da262:	d10a      	bne.n	da27a <mktime+0x2a6>
   da264:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da268:	2601      	movs	r6, #1
   da26a:	eb08 0700 	add.w	r7, r8, r0
   da26e:	e008      	b.n	da282 <mktime+0x2ae>
   da270:	f1ba 0f00 	cmp.w	sl, #0
   da274:	f04f 0600 	mov.w	r6, #0
   da278:	da91      	bge.n	da19e <mktime+0x1ca>
   da27a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   da27e:	eb08 0700 	add.w	r7, r8, r0
   da282:	f001 fdc2 	bl	dbe0a <__tz_unlock>
   da286:	3404      	adds	r4, #4
   da288:	2307      	movs	r3, #7
   da28a:	fb94 f3f3 	sdiv	r3, r4, r3
   da28e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da292:	1ae4      	subs	r4, r4, r3
   da294:	bf48      	it	mi
   da296:	3407      	addmi	r4, #7
   da298:	622e      	str	r6, [r5, #32]
   da29a:	61ac      	str	r4, [r5, #24]
   da29c:	4638      	mov	r0, r7
   da29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2aa:	bf00      	nop
   da2ac:	000ddb70 	.word	0x000ddb70
   da2b0:	00015180 	.word	0x00015180
   da2b4:	2003e7e4 	.word	0x2003e7e4

000da2b8 <srand>:
   da2b8:	b538      	push	{r3, r4, r5, lr}
   da2ba:	4b12      	ldr	r3, [pc, #72]	; (da304 <srand+0x4c>)
   da2bc:	681c      	ldr	r4, [r3, #0]
   da2be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da2c0:	4605      	mov	r5, r0
   da2c2:	b9d3      	cbnz	r3, da2fa <srand+0x42>
   da2c4:	2018      	movs	r0, #24
   da2c6:	f7fc fdaf 	bl	d6e28 <malloc>
   da2ca:	f243 330e 	movw	r3, #13070	; 0x330e
   da2ce:	63a0      	str	r0, [r4, #56]	; 0x38
   da2d0:	8003      	strh	r3, [r0, #0]
   da2d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da2d6:	8043      	strh	r3, [r0, #2]
   da2d8:	f241 2334 	movw	r3, #4660	; 0x1234
   da2dc:	8083      	strh	r3, [r0, #4]
   da2de:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da2e2:	80c3      	strh	r3, [r0, #6]
   da2e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da2e8:	8103      	strh	r3, [r0, #8]
   da2ea:	2305      	movs	r3, #5
   da2ec:	8143      	strh	r3, [r0, #10]
   da2ee:	230b      	movs	r3, #11
   da2f0:	8183      	strh	r3, [r0, #12]
   da2f2:	2201      	movs	r2, #1
   da2f4:	2300      	movs	r3, #0
   da2f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da2fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da2fc:	2200      	movs	r2, #0
   da2fe:	611d      	str	r5, [r3, #16]
   da300:	615a      	str	r2, [r3, #20]
   da302:	bd38      	pop	{r3, r4, r5, pc}
   da304:	2003e000 	.word	0x2003e000

000da308 <strcmp>:
   da308:	f810 2b01 	ldrb.w	r2, [r0], #1
   da30c:	f811 3b01 	ldrb.w	r3, [r1], #1
   da310:	2a01      	cmp	r2, #1
   da312:	bf28      	it	cs
   da314:	429a      	cmpcs	r2, r3
   da316:	d0f7      	beq.n	da308 <strcmp>
   da318:	1ad0      	subs	r0, r2, r3
   da31a:	4770      	bx	lr

000da31c <strcpy>:
   da31c:	4603      	mov	r3, r0
   da31e:	f811 2b01 	ldrb.w	r2, [r1], #1
   da322:	f803 2b01 	strb.w	r2, [r3], #1
   da326:	2a00      	cmp	r2, #0
   da328:	d1f9      	bne.n	da31e <strcpy+0x2>
   da32a:	4770      	bx	lr

000da32c <strdup>:
   da32c:	4b02      	ldr	r3, [pc, #8]	; (da338 <strdup+0xc>)
   da32e:	4601      	mov	r1, r0
   da330:	6818      	ldr	r0, [r3, #0]
   da332:	f000 b803 	b.w	da33c <_strdup_r>
   da336:	bf00      	nop
   da338:	2003e000 	.word	0x2003e000

000da33c <_strdup_r>:
   da33c:	b570      	push	{r4, r5, r6, lr}
   da33e:	4606      	mov	r6, r0
   da340:	4608      	mov	r0, r1
   da342:	460c      	mov	r4, r1
   da344:	f000 fd22 	bl	dad8c <strlen>
   da348:	1c45      	adds	r5, r0, #1
   da34a:	4629      	mov	r1, r5
   da34c:	4630      	mov	r0, r6
   da34e:	f7fc fdab 	bl	d6ea8 <_malloc_r>
   da352:	4606      	mov	r6, r0
   da354:	b118      	cbz	r0, da35e <_strdup_r+0x22>
   da356:	462a      	mov	r2, r5
   da358:	4621      	mov	r1, r4
   da35a:	f7ff fd4b 	bl	d9df4 <memcpy>
   da35e:	4630      	mov	r0, r6
   da360:	bd70      	pop	{r4, r5, r6, pc}

000da362 <iso_year_adjust>:
   da362:	6941      	ldr	r1, [r0, #20]
   da364:	078b      	lsls	r3, r1, #30
   da366:	b510      	push	{r4, lr}
   da368:	d10c      	bne.n	da384 <iso_year_adjust+0x22>
   da36a:	2900      	cmp	r1, #0
   da36c:	f240 736c 	movw	r3, #1900	; 0x76c
   da370:	bfa8      	it	ge
   da372:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da376:	440b      	add	r3, r1
   da378:	2464      	movs	r4, #100	; 0x64
   da37a:	fb93 f2f4 	sdiv	r2, r3, r4
   da37e:	fb04 3312 	mls	r3, r4, r2, r3
   da382:	b983      	cbnz	r3, da3a6 <iso_year_adjust+0x44>
   da384:	2900      	cmp	r1, #0
   da386:	f240 736c 	movw	r3, #1900	; 0x76c
   da38a:	bfa8      	it	ge
   da38c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da390:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da394:	440b      	add	r3, r1
   da396:	fb93 f1f2 	sdiv	r1, r3, r2
   da39a:	fb02 3311 	mls	r3, r2, r1, r3
   da39e:	fab3 f283 	clz	r2, r3
   da3a2:	0952      	lsrs	r2, r2, #5
   da3a4:	e000      	b.n	da3a8 <iso_year_adjust+0x46>
   da3a6:	2201      	movs	r2, #1
   da3a8:	6983      	ldr	r3, [r0, #24]
   da3aa:	69c1      	ldr	r1, [r0, #28]
   da3ac:	005b      	lsls	r3, r3, #1
   da3ae:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da3b2:	4413      	add	r3, r2
   da3b4:	2b21      	cmp	r3, #33	; 0x21
   da3b6:	dc0e      	bgt.n	da3d6 <iso_year_adjust+0x74>
   da3b8:	2b20      	cmp	r3, #32
   da3ba:	da2f      	bge.n	da41c <iso_year_adjust+0xba>
   da3bc:	2b0d      	cmp	r3, #13
   da3be:	dc02      	bgt.n	da3c6 <iso_year_adjust+0x64>
   da3c0:	2b0a      	cmp	r3, #10
   da3c2:	db05      	blt.n	da3d0 <iso_year_adjust+0x6e>
   da3c4:	e02a      	b.n	da41c <iso_year_adjust+0xba>
   da3c6:	2b10      	cmp	r3, #16
   da3c8:	db26      	blt.n	da418 <iso_year_adjust+0xb6>
   da3ca:	2b11      	cmp	r3, #17
   da3cc:	dd26      	ble.n	da41c <iso_year_adjust+0xba>
   da3ce:	3b1c      	subs	r3, #28
   da3d0:	2b01      	cmp	r3, #1
   da3d2:	d923      	bls.n	da41c <iso_year_adjust+0xba>
   da3d4:	e020      	b.n	da418 <iso_year_adjust+0xb6>
   da3d6:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da3da:	4293      	cmp	r3, r2
   da3dc:	dc0e      	bgt.n	da3fc <iso_year_adjust+0x9a>
   da3de:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da3e2:	4293      	cmp	r3, r2
   da3e4:	da16      	bge.n	da414 <iso_year_adjust+0xb2>
   da3e6:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da3ea:	4293      	cmp	r3, r2
   da3ec:	d012      	beq.n	da414 <iso_year_adjust+0xb2>
   da3ee:	db13      	blt.n	da418 <iso_year_adjust+0xb6>
   da3f0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da3f4:	3b12      	subs	r3, #18
   da3f6:	2b02      	cmp	r3, #2
   da3f8:	d90c      	bls.n	da414 <iso_year_adjust+0xb2>
   da3fa:	e00d      	b.n	da418 <iso_year_adjust+0xb6>
   da3fc:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da400:	4293      	cmp	r3, r2
   da402:	d007      	beq.n	da414 <iso_year_adjust+0xb2>
   da404:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da408:	4293      	cmp	r3, r2
   da40a:	d003      	beq.n	da414 <iso_year_adjust+0xb2>
   da40c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da410:	4293      	cmp	r3, r2
   da412:	d101      	bne.n	da418 <iso_year_adjust+0xb6>
   da414:	2001      	movs	r0, #1
   da416:	bd10      	pop	{r4, pc}
   da418:	2000      	movs	r0, #0
   da41a:	bd10      	pop	{r4, pc}
   da41c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da420:	bd10      	pop	{r4, pc}
	...

000da424 <strftime>:
   da424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da428:	b093      	sub	sp, #76	; 0x4c
   da42a:	460e      	mov	r6, r1
   da42c:	461d      	mov	r5, r3
   da42e:	4607      	mov	r7, r0
   da430:	4691      	mov	r9, r2
   da432:	f001 fc31 	bl	dbc98 <__get_current_time_locale>
   da436:	2300      	movs	r3, #0
   da438:	9306      	str	r3, [sp, #24]
   da43a:	461c      	mov	r4, r3
   da43c:	1e73      	subs	r3, r6, #1
   da43e:	9003      	str	r0, [sp, #12]
   da440:	9302      	str	r3, [sp, #8]
   da442:	f899 3000 	ldrb.w	r3, [r9]
   da446:	2b00      	cmp	r3, #0
   da448:	f000 8492 	beq.w	dad70 <strftime+0x94c>
   da44c:	2b25      	cmp	r3, #37	; 0x25
   da44e:	d008      	beq.n	da462 <strftime+0x3e>
   da450:	9a02      	ldr	r2, [sp, #8]
   da452:	4294      	cmp	r4, r2
   da454:	f080 8490 	bcs.w	dad78 <strftime+0x954>
   da458:	553b      	strb	r3, [r7, r4]
   da45a:	f109 0901 	add.w	r9, r9, #1
   da45e:	3401      	adds	r4, #1
   da460:	e7ef      	b.n	da442 <strftime+0x1e>
   da462:	f899 a001 	ldrb.w	sl, [r9, #1]
   da466:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da46a:	d007      	beq.n	da47c <strftime+0x58>
   da46c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da470:	d004      	beq.n	da47c <strftime+0x58>
   da472:	f109 0901 	add.w	r9, r9, #1
   da476:	f04f 0a00 	mov.w	sl, #0
   da47a:	e001      	b.n	da480 <strftime+0x5c>
   da47c:	f109 0902 	add.w	r9, r9, #2
   da480:	f899 3000 	ldrb.w	r3, [r9]
   da484:	3b31      	subs	r3, #49	; 0x31
   da486:	2b08      	cmp	r3, #8
   da488:	d808      	bhi.n	da49c <strftime+0x78>
   da48a:	4648      	mov	r0, r9
   da48c:	220a      	movs	r2, #10
   da48e:	a90a      	add	r1, sp, #40	; 0x28
   da490:	f001 fbf8 	bl	dbc84 <strtoul>
   da494:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da498:	4680      	mov	r8, r0
   da49a:	e001      	b.n	da4a0 <strftime+0x7c>
   da49c:	f04f 0800 	mov.w	r8, #0
   da4a0:	f899 3000 	ldrb.w	r3, [r9]
   da4a4:	2b45      	cmp	r3, #69	; 0x45
   da4a6:	d001      	beq.n	da4ac <strftime+0x88>
   da4a8:	2b4f      	cmp	r3, #79	; 0x4f
   da4aa:	d101      	bne.n	da4b0 <strftime+0x8c>
   da4ac:	f109 0901 	add.w	r9, r9, #1
   da4b0:	f899 0000 	ldrb.w	r0, [r9]
   da4b4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da4b8:	2b55      	cmp	r3, #85	; 0x55
   da4ba:	f200 845d 	bhi.w	dad78 <strftime+0x954>
   da4be:	e8df f013 	tbh	[pc, r3, lsl #1]
   da4c2:	044a      	.short	0x044a
   da4c4:	045b045b 	.word	0x045b045b
   da4c8:	045b045b 	.word	0x045b045b
   da4cc:	045b045b 	.word	0x045b045b
   da4d0:	045b045b 	.word	0x045b045b
   da4d4:	045b045b 	.word	0x045b045b
   da4d8:	045b045b 	.word	0x045b045b
   da4dc:	045b045b 	.word	0x045b045b
   da4e0:	045b045b 	.word	0x045b045b
   da4e4:	045b045b 	.word	0x045b045b
   da4e8:	045b045b 	.word	0x045b045b
   da4ec:	045b045b 	.word	0x045b045b
   da4f0:	045b045b 	.word	0x045b045b
   da4f4:	045b045b 	.word	0x045b045b
   da4f8:	006f045b 	.word	0x006f045b
   da4fc:	00d400a1 	.word	0x00d400a1
   da500:	045b011a 	.word	0x045b011a
   da504:	01a0013f 	.word	0x01a0013f
   da508:	022d0226 	.word	0x022d0226
   da50c:	045b045b 	.word	0x045b045b
   da510:	0260045b 	.word	0x0260045b
   da514:	045b045b 	.word	0x045b045b
   da518:	045b0268 	.word	0x045b0268
   da51c:	031d0297 	.word	0x031d0297
   da520:	033b0325 	.word	0x033b0325
   da524:	03860343 	.word	0x03860343
   da528:	03a000c6 	.word	0x03a000c6
   da52c:	045b041f 	.word	0x045b041f
   da530:	045b045b 	.word	0x045b045b
   da534:	045b045b 	.word	0x045b045b
   da538:	0056045b 	.word	0x0056045b
   da53c:	00ba0089 	.word	0x00ba0089
   da540:	010c010c 	.word	0x010c010c
   da544:	0171045b 	.word	0x0171045b
   da548:	045b0089 	.word	0x045b0089
   da54c:	0226023d 	.word	0x0226023d
   da550:	025d022d 	.word	0x025d022d
   da554:	045b0262 	.word	0x045b0262
   da558:	045b0268 	.word	0x045b0268
   da55c:	029c00be 	.word	0x029c00be
   da560:	032e031f 	.word	0x032e031f
   da564:	037f045b 	.word	0x037f045b
   da568:	039200c2 	.word	0x039200c2
   da56c:	03e7      	.short	0x03e7
   da56e:	69ab      	ldr	r3, [r5, #24]
   da570:	9a03      	ldr	r2, [sp, #12]
   da572:	3318      	adds	r3, #24
   da574:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da578:	4640      	mov	r0, r8
   da57a:	f000 fc07 	bl	dad8c <strlen>
   da57e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da582:	193b      	adds	r3, r7, r4
   da584:	4420      	add	r0, r4
   da586:	4284      	cmp	r4, r0
   da588:	f000 83eb 	beq.w	dad62 <strftime+0x93e>
   da58c:	9a02      	ldr	r2, [sp, #8]
   da58e:	4294      	cmp	r4, r2
   da590:	f080 83f2 	bcs.w	dad78 <strftime+0x954>
   da594:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da598:	f803 2b01 	strb.w	r2, [r3], #1
   da59c:	3401      	adds	r4, #1
   da59e:	e7f2      	b.n	da586 <strftime+0x162>
   da5a0:	69ab      	ldr	r3, [r5, #24]
   da5a2:	9a03      	ldr	r2, [sp, #12]
   da5a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da5a8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   da5ac:	4640      	mov	r0, r8
   da5ae:	f000 fbed 	bl	dad8c <strlen>
   da5b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da5b6:	193b      	adds	r3, r7, r4
   da5b8:	4420      	add	r0, r4
   da5ba:	4284      	cmp	r4, r0
   da5bc:	f000 83d1 	beq.w	dad62 <strftime+0x93e>
   da5c0:	9a02      	ldr	r2, [sp, #8]
   da5c2:	4294      	cmp	r4, r2
   da5c4:	f080 83d8 	bcs.w	dad78 <strftime+0x954>
   da5c8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da5cc:	f803 2b01 	strb.w	r2, [r3], #1
   da5d0:	3401      	adds	r4, #1
   da5d2:	e7f2      	b.n	da5ba <strftime+0x196>
   da5d4:	692b      	ldr	r3, [r5, #16]
   da5d6:	9a03      	ldr	r2, [sp, #12]
   da5d8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da5dc:	4640      	mov	r0, r8
   da5de:	f000 fbd5 	bl	dad8c <strlen>
   da5e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da5e6:	193b      	adds	r3, r7, r4
   da5e8:	4420      	add	r0, r4
   da5ea:	4284      	cmp	r4, r0
   da5ec:	f000 83b9 	beq.w	dad62 <strftime+0x93e>
   da5f0:	9a02      	ldr	r2, [sp, #8]
   da5f2:	4294      	cmp	r4, r2
   da5f4:	f080 83c0 	bcs.w	dad78 <strftime+0x954>
   da5f8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da5fc:	f803 2b01 	strb.w	r2, [r3], #1
   da600:	3401      	adds	r4, #1
   da602:	e7f2      	b.n	da5ea <strftime+0x1c6>
   da604:	692b      	ldr	r3, [r5, #16]
   da606:	9a03      	ldr	r2, [sp, #12]
   da608:	330c      	adds	r3, #12
   da60a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da60e:	4640      	mov	r0, r8
   da610:	f000 fbbc 	bl	dad8c <strlen>
   da614:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da618:	193b      	adds	r3, r7, r4
   da61a:	4420      	add	r0, r4
   da61c:	4284      	cmp	r4, r0
   da61e:	f000 83a0 	beq.w	dad62 <strftime+0x93e>
   da622:	9a02      	ldr	r2, [sp, #8]
   da624:	4294      	cmp	r4, r2
   da626:	f080 83a7 	bcs.w	dad78 <strftime+0x954>
   da62a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   da62e:	f803 2b01 	strb.w	r2, [r3], #1
   da632:	3401      	adds	r4, #1
   da634:	e7f2      	b.n	da61c <strftime+0x1f8>
   da636:	9b03      	ldr	r3, [sp, #12]
   da638:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   da63c:	e00a      	b.n	da654 <strftime+0x230>
   da63e:	9b03      	ldr	r3, [sp, #12]
   da640:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   da644:	e006      	b.n	da654 <strftime+0x230>
   da646:	9b03      	ldr	r3, [sp, #12]
   da648:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   da64c:	e002      	b.n	da654 <strftime+0x230>
   da64e:	9b03      	ldr	r3, [sp, #12]
   da650:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   da654:	4640      	mov	r0, r8
   da656:	f000 fb99 	bl	dad8c <strlen>
   da65a:	f898 3000 	ldrb.w	r3, [r8]
   da65e:	2b00      	cmp	r3, #0
   da660:	f000 837f 	beq.w	dad62 <strftime+0x93e>
   da664:	462b      	mov	r3, r5
   da666:	4642      	mov	r2, r8
   da668:	e093      	b.n	da792 <strftime+0x36e>
   da66a:	49b6      	ldr	r1, [pc, #728]	; (da944 <strftime+0x520>)
   da66c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   da670:	458b      	cmp	fp, r1
   da672:	bfac      	ite	ge
   da674:	2100      	movge	r1, #0
   da676:	2101      	movlt	r1, #1
   da678:	f1bb 0f00 	cmp.w	fp, #0
   da67c:	db04      	blt.n	da688 <strftime+0x264>
   da67e:	2064      	movs	r0, #100	; 0x64
   da680:	fb9b f0f0 	sdiv	r0, fp, r0
   da684:	3013      	adds	r0, #19
   da686:	e008      	b.n	da69a <strftime+0x276>
   da688:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   da68c:	9107      	str	r1, [sp, #28]
   da68e:	f001 fd43 	bl	dc118 <abs>
   da692:	9907      	ldr	r1, [sp, #28]
   da694:	2364      	movs	r3, #100	; 0x64
   da696:	fb90 f0f3 	sdiv	r0, r0, r3
   da69a:	f1ba 0f00 	cmp.w	sl, #0
   da69e:	d008      	beq.n	da6b2 <strftime+0x28e>
   da6a0:	2863      	cmp	r0, #99	; 0x63
   da6a2:	dd09      	ble.n	da6b8 <strftime+0x294>
   da6a4:	4ba8      	ldr	r3, [pc, #672]	; (da948 <strftime+0x524>)
   da6a6:	4aa9      	ldr	r2, [pc, #676]	; (da94c <strftime+0x528>)
   da6a8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da6ac:	bf18      	it	ne
   da6ae:	4613      	movne	r3, r2
   da6b0:	e003      	b.n	da6ba <strftime+0x296>
   da6b2:	4ba6      	ldr	r3, [pc, #664]	; (da94c <strftime+0x528>)
   da6b4:	4aa6      	ldr	r2, [pc, #664]	; (da950 <strftime+0x52c>)
   da6b6:	e001      	b.n	da6bc <strftime+0x298>
   da6b8:	4ba4      	ldr	r3, [pc, #656]	; (da94c <strftime+0x528>)
   da6ba:	4aa6      	ldr	r2, [pc, #664]	; (da954 <strftime+0x530>)
   da6bc:	9001      	str	r0, [sp, #4]
   da6be:	f1b8 0f01 	cmp.w	r8, #1
   da6c2:	bf98      	it	ls
   da6c4:	f04f 0802 	movls.w	r8, #2
   da6c8:	ebc1 0108 	rsb	r1, r1, r8
   da6cc:	9100      	str	r1, [sp, #0]
   da6ce:	489d      	ldr	r0, [pc, #628]	; (da944 <strftime+0x520>)
   da6d0:	49a1      	ldr	r1, [pc, #644]	; (da958 <strftime+0x534>)
   da6d2:	4583      	cmp	fp, r0
   da6d4:	bfb8      	it	lt
   da6d6:	460b      	movlt	r3, r1
   da6d8:	e21e      	b.n	dab18 <strftime+0x6f4>
   da6da:	4aa0      	ldr	r2, [pc, #640]	; (da95c <strftime+0x538>)
   da6dc:	49a0      	ldr	r1, [pc, #640]	; (da960 <strftime+0x53c>)
   da6de:	68eb      	ldr	r3, [r5, #12]
   da6e0:	2864      	cmp	r0, #100	; 0x64
   da6e2:	bf08      	it	eq
   da6e4:	460a      	moveq	r2, r1
   da6e6:	1b31      	subs	r1, r6, r4
   da6e8:	1938      	adds	r0, r7, r4
   da6ea:	f7fc fbcd 	bl	d6e88 <sniprintf>
   da6ee:	2800      	cmp	r0, #0
   da6f0:	f280 8302 	bge.w	dacf8 <strftime+0x8d4>
   da6f4:	e340      	b.n	dad78 <strftime+0x954>
   da6f6:	6968      	ldr	r0, [r5, #20]
   da6f8:	692b      	ldr	r3, [r5, #16]
   da6fa:	2800      	cmp	r0, #0
   da6fc:	f103 0b01 	add.w	fp, r3, #1
   da700:	eb07 0804 	add.w	r8, r7, r4
   da704:	ebc4 0a06 	rsb	sl, r4, r6
   da708:	68eb      	ldr	r3, [r5, #12]
   da70a:	db05      	blt.n	da718 <strftime+0x2f4>
   da70c:	2264      	movs	r2, #100	; 0x64
   da70e:	fb90 f1f2 	sdiv	r1, r0, r2
   da712:	fb02 0011 	mls	r0, r2, r1, r0
   da716:	e00a      	b.n	da72e <strftime+0x30a>
   da718:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da71c:	9307      	str	r3, [sp, #28]
   da71e:	f001 fcfb 	bl	dc118 <abs>
   da722:	2264      	movs	r2, #100	; 0x64
   da724:	9b07      	ldr	r3, [sp, #28]
   da726:	fb90 f1f2 	sdiv	r1, r0, r2
   da72a:	fb01 0012 	mls	r0, r1, r2, r0
   da72e:	4a8d      	ldr	r2, [pc, #564]	; (da964 <strftime+0x540>)
   da730:	9001      	str	r0, [sp, #4]
   da732:	9300      	str	r3, [sp, #0]
   da734:	4651      	mov	r1, sl
   da736:	465b      	mov	r3, fp
   da738:	4640      	mov	r0, r8
   da73a:	f7fc fba5 	bl	d6e88 <sniprintf>
   da73e:	e7d6      	b.n	da6ee <strftime+0x2ca>
   da740:	2325      	movs	r3, #37	; 0x25
   da742:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   da746:	f1ba 0f00 	cmp.w	sl, #0
   da74a:	d007      	beq.n	da75c <strftime+0x338>
   da74c:	f1b8 0f05 	cmp.w	r8, #5
   da750:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   da754:	bf98      	it	ls
   da756:	f04f 0806 	movls.w	r8, #6
   da75a:	e004      	b.n	da766 <strftime+0x342>
   da75c:	232b      	movs	r3, #43	; 0x2b
   da75e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   da762:	f04f 080a 	mov.w	r8, #10
   da766:	f1b8 0306 	subs.w	r3, r8, #6
   da76a:	d102      	bne.n	da772 <strftime+0x34e>
   da76c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da770:	e00a      	b.n	da788 <strftime+0x364>
   da772:	4a7d      	ldr	r2, [pc, #500]	; (da968 <strftime+0x544>)
   da774:	211e      	movs	r1, #30
   da776:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   da77a:	f7fc fb85 	bl	d6e88 <sniprintf>
   da77e:	2800      	cmp	r0, #0
   da780:	ddf4      	ble.n	da76c <strftime+0x348>
   da782:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   da786:	4418      	add	r0, r3
   da788:	4978      	ldr	r1, [pc, #480]	; (da96c <strftime+0x548>)
   da78a:	f7ff fdc7 	bl	da31c <strcpy>
   da78e:	462b      	mov	r3, r5
   da790:	aa0a      	add	r2, sp, #40	; 0x28
   da792:	1b31      	subs	r1, r6, r4
   da794:	1938      	adds	r0, r7, r4
   da796:	f7ff fe45 	bl	da424 <strftime>
   da79a:	2800      	cmp	r0, #0
   da79c:	f340 82ec 	ble.w	dad78 <strftime+0x954>
   da7a0:	4404      	add	r4, r0
   da7a2:	e2de      	b.n	dad62 <strftime+0x93e>
   da7a4:	4628      	mov	r0, r5
   da7a6:	f7ff fddc 	bl	da362 <iso_year_adjust>
   da7aa:	4680      	mov	r8, r0
   da7ac:	6968      	ldr	r0, [r5, #20]
   da7ae:	2800      	cmp	r0, #0
   da7b0:	db05      	blt.n	da7be <strftime+0x39a>
   da7b2:	2264      	movs	r2, #100	; 0x64
   da7b4:	fb90 f1f2 	sdiv	r1, r0, r2
   da7b8:	fb02 0011 	mls	r0, r2, r1, r0
   da7bc:	e008      	b.n	da7d0 <strftime+0x3ac>
   da7be:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da7c2:	f001 fca9 	bl	dc118 <abs>
   da7c6:	2264      	movs	r2, #100	; 0x64
   da7c8:	fb90 f3f2 	sdiv	r3, r0, r2
   da7cc:	fb03 0012 	mls	r0, r3, r2, r0
   da7d0:	f1b8 0f00 	cmp.w	r8, #0
   da7d4:	da06      	bge.n	da7e4 <strftime+0x3c0>
   da7d6:	696a      	ldr	r2, [r5, #20]
   da7d8:	4b65      	ldr	r3, [pc, #404]	; (da970 <strftime+0x54c>)
   da7da:	429a      	cmp	r2, r3
   da7dc:	bfb8      	it	lt
   da7de:	f04f 0801 	movlt.w	r8, #1
   da7e2:	e006      	b.n	da7f2 <strftime+0x3ce>
   da7e4:	d005      	beq.n	da7f2 <strftime+0x3ce>
   da7e6:	696a      	ldr	r2, [r5, #20]
   da7e8:	4b56      	ldr	r3, [pc, #344]	; (da944 <strftime+0x520>)
   da7ea:	429a      	cmp	r2, r3
   da7ec:	bfb8      	it	lt
   da7ee:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   da7f2:	2364      	movs	r3, #100	; 0x64
   da7f4:	4440      	add	r0, r8
   da7f6:	fb90 f2f3 	sdiv	r2, r0, r3
   da7fa:	fb03 0012 	mls	r0, r3, r2, r0
   da7fe:	4418      	add	r0, r3
   da800:	e1f9      	b.n	dabf6 <strftime+0x7d2>
   da802:	4b50      	ldr	r3, [pc, #320]	; (da944 <strftime+0x520>)
   da804:	6969      	ldr	r1, [r5, #20]
   da806:	9108      	str	r1, [sp, #32]
   da808:	4299      	cmp	r1, r3
   da80a:	bfac      	ite	ge
   da80c:	2300      	movge	r3, #0
   da80e:	2301      	movlt	r3, #1
   da810:	4628      	mov	r0, r5
   da812:	9307      	str	r3, [sp, #28]
   da814:	f7ff fda5 	bl	da362 <iso_year_adjust>
   da818:	9908      	ldr	r1, [sp, #32]
   da81a:	2900      	cmp	r1, #0
   da81c:	4683      	mov	fp, r0
   da81e:	db04      	blt.n	da82a <strftime+0x406>
   da820:	2364      	movs	r3, #100	; 0x64
   da822:	fb91 f3f3 	sdiv	r3, r1, r3
   da826:	3313      	adds	r3, #19
   da828:	e008      	b.n	da83c <strftime+0x418>
   da82a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   da82e:	9108      	str	r1, [sp, #32]
   da830:	f001 fc72 	bl	dc118 <abs>
   da834:	9908      	ldr	r1, [sp, #32]
   da836:	2364      	movs	r3, #100	; 0x64
   da838:	fb90 f3f3 	sdiv	r3, r0, r3
   da83c:	6968      	ldr	r0, [r5, #20]
   da83e:	2800      	cmp	r0, #0
   da840:	db06      	blt.n	da850 <strftime+0x42c>
   da842:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da846:	fb90 fcfe 	sdiv	ip, r0, lr
   da84a:	fb0e 001c 	mls	r0, lr, ip, r0
   da84e:	e00d      	b.n	da86c <strftime+0x448>
   da850:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da854:	9109      	str	r1, [sp, #36]	; 0x24
   da856:	9308      	str	r3, [sp, #32]
   da858:	f001 fc5e 	bl	dc118 <abs>
   da85c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   da860:	9909      	ldr	r1, [sp, #36]	; 0x24
   da862:	9b08      	ldr	r3, [sp, #32]
   da864:	fb90 fcfe 	sdiv	ip, r0, lr
   da868:	fb0c 001e 	mls	r0, ip, lr, r0
   da86c:	f1bb 0f00 	cmp.w	fp, #0
   da870:	da08      	bge.n	da884 <strftime+0x460>
   da872:	6969      	ldr	r1, [r5, #20]
   da874:	4a3e      	ldr	r2, [pc, #248]	; (da970 <strftime+0x54c>)
   da876:	4291      	cmp	r1, r2
   da878:	da0a      	bge.n	da890 <strftime+0x46c>
   da87a:	f04f 0b01 	mov.w	fp, #1
   da87e:	f8cd b01c 	str.w	fp, [sp, #28]
   da882:	e005      	b.n	da890 <strftime+0x46c>
   da884:	d004      	beq.n	da890 <strftime+0x46c>
   da886:	4a2f      	ldr	r2, [pc, #188]	; (da944 <strftime+0x520>)
   da888:	4291      	cmp	r1, r2
   da88a:	bfb8      	it	lt
   da88c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   da890:	eb0b 0200 	add.w	r2, fp, r0
   da894:	1c50      	adds	r0, r2, #1
   da896:	d102      	bne.n	da89e <strftime+0x47a>
   da898:	3b01      	subs	r3, #1
   da89a:	2263      	movs	r2, #99	; 0x63
   da89c:	e003      	b.n	da8a6 <strftime+0x482>
   da89e:	2a64      	cmp	r2, #100	; 0x64
   da8a0:	bf04      	itt	eq
   da8a2:	3301      	addeq	r3, #1
   da8a4:	2200      	moveq	r2, #0
   da8a6:	2064      	movs	r0, #100	; 0x64
   da8a8:	fb00 2303 	mla	r3, r0, r3, r2
   da8ac:	9a07      	ldr	r2, [sp, #28]
   da8ae:	b142      	cbz	r2, da8c2 <strftime+0x49e>
   da8b0:	222d      	movs	r2, #45	; 0x2d
   da8b2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   da8b6:	f1b8 0f00 	cmp.w	r8, #0
   da8ba:	d013      	beq.n	da8e4 <strftime+0x4c0>
   da8bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   da8c0:	e010      	b.n	da8e4 <strftime+0x4c0>
   da8c2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da8c6:	d110      	bne.n	da8ea <strftime+0x4c6>
   da8c8:	f242 720f 	movw	r2, #9999	; 0x270f
   da8cc:	4293      	cmp	r3, r2
   da8ce:	d90c      	bls.n	da8ea <strftime+0x4c6>
   da8d0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   da8d4:	f1b8 0f00 	cmp.w	r8, #0
   da8d8:	d1f0      	bne.n	da8bc <strftime+0x498>
   da8da:	aa12      	add	r2, sp, #72	; 0x48
   da8dc:	2125      	movs	r1, #37	; 0x25
   da8de:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   da8e2:	e00a      	b.n	da8fa <strftime+0x4d6>
   da8e4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   da8e8:	e000      	b.n	da8ec <strftime+0x4c8>
   da8ea:	aa0a      	add	r2, sp, #40	; 0x28
   da8ec:	2125      	movs	r1, #37	; 0x25
   da8ee:	7011      	strb	r1, [r2, #0]
   da8f0:	f1ba 0f00 	cmp.w	sl, #0
   da8f4:	d101      	bne.n	da8fa <strftime+0x4d6>
   da8f6:	1c50      	adds	r0, r2, #1
   da8f8:	e002      	b.n	da900 <strftime+0x4dc>
   da8fa:	2130      	movs	r1, #48	; 0x30
   da8fc:	1c90      	adds	r0, r2, #2
   da8fe:	7051      	strb	r1, [r2, #1]
   da900:	491c      	ldr	r1, [pc, #112]	; (da974 <strftime+0x550>)
   da902:	9307      	str	r3, [sp, #28]
   da904:	f7ff fd0a 	bl	da31c <strcpy>
   da908:	9b07      	ldr	r3, [sp, #28]
   da90a:	9300      	str	r3, [sp, #0]
   da90c:	e1ad      	b.n	dac6a <strftime+0x846>
   da90e:	4a14      	ldr	r2, [pc, #80]	; (da960 <strftime+0x53c>)
   da910:	4912      	ldr	r1, [pc, #72]	; (da95c <strftime+0x538>)
   da912:	68ab      	ldr	r3, [r5, #8]
   da914:	286b      	cmp	r0, #107	; 0x6b
   da916:	bf08      	it	eq
   da918:	460a      	moveq	r2, r1
   da91a:	e6e4      	b.n	da6e6 <strftime+0x2c2>
   da91c:	68a9      	ldr	r1, [r5, #8]
   da91e:	230c      	movs	r3, #12
   da920:	b131      	cbz	r1, da930 <strftime+0x50c>
   da922:	4299      	cmp	r1, r3
   da924:	bf0e      	itee	eq
   da926:	460b      	moveq	r3, r1
   da928:	fb91 f2f3 	sdivne	r2, r1, r3
   da92c:	fb03 1312 	mlsne	r3, r3, r2, r1
   da930:	4a0a      	ldr	r2, [pc, #40]	; (da95c <strftime+0x538>)
   da932:	490b      	ldr	r1, [pc, #44]	; (da960 <strftime+0x53c>)
   da934:	2849      	cmp	r0, #73	; 0x49
   da936:	bf08      	it	eq
   da938:	460a      	moveq	r2, r1
   da93a:	e6d4      	b.n	da6e6 <strftime+0x2c2>
   da93c:	69eb      	ldr	r3, [r5, #28]
   da93e:	4a0e      	ldr	r2, [pc, #56]	; (da978 <strftime+0x554>)
   da940:	3301      	adds	r3, #1
   da942:	e6d0      	b.n	da6e6 <strftime+0x2c2>
   da944:	fffff894 	.word	0xfffff894
   da948:	000ddc3f 	.word	0x000ddc3f
   da94c:	000dd0d5 	.word	0x000dd0d5
   da950:	000ddc30 	.word	0x000ddc30
   da954:	000ddc37 	.word	0x000ddc37
   da958:	000ddc41 	.word	0x000ddc41
   da95c:	000ddc43 	.word	0x000ddc43
   da960:	000ddc51 	.word	0x000ddc51
   da964:	000ddc47 	.word	0x000ddc47
   da968:	000ddc56 	.word	0x000ddc56
   da96c:	000ddc5a 	.word	0x000ddc5a
   da970:	fffff895 	.word	0xfffff895
   da974:	000ddc62 	.word	0x000ddc62
   da978:	000ddc66 	.word	0x000ddc66
   da97c:	692b      	ldr	r3, [r5, #16]
   da97e:	3301      	adds	r3, #1
   da980:	e13d      	b.n	dabfe <strftime+0x7da>
   da982:	686b      	ldr	r3, [r5, #4]
   da984:	e13b      	b.n	dabfe <strftime+0x7da>
   da986:	9b02      	ldr	r3, [sp, #8]
   da988:	429c      	cmp	r4, r3
   da98a:	f080 81f5 	bcs.w	dad78 <strftime+0x954>
   da98e:	230a      	movs	r3, #10
   da990:	e1e5      	b.n	dad5e <strftime+0x93a>
   da992:	68ab      	ldr	r3, [r5, #8]
   da994:	9a03      	ldr	r2, [sp, #12]
   da996:	2b0b      	cmp	r3, #11
   da998:	bfcc      	ite	gt
   da99a:	23a4      	movgt	r3, #164	; 0xa4
   da99c:	23a0      	movle	r3, #160	; 0xa0
   da99e:	4413      	add	r3, r2
   da9a0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   da9a4:	4640      	mov	r0, r8
   da9a6:	f000 f9f1 	bl	dad8c <strlen>
   da9aa:	4bb2      	ldr	r3, [pc, #712]	; (dac74 <strftime+0x850>)
   da9ac:	f8d3 e000 	ldr.w	lr, [r3]
   da9b0:	1939      	adds	r1, r7, r4
   da9b2:	4642      	mov	r2, r8
   da9b4:	4420      	add	r0, r4
   da9b6:	4284      	cmp	r4, r0
   da9b8:	f000 81d3 	beq.w	dad62 <strftime+0x93e>
   da9bc:	9b02      	ldr	r3, [sp, #8]
   da9be:	429c      	cmp	r4, r3
   da9c0:	f080 81da 	bcs.w	dad78 <strftime+0x954>
   da9c4:	f899 3000 	ldrb.w	r3, [r9]
   da9c8:	2b50      	cmp	r3, #80	; 0x50
   da9ca:	f104 0401 	add.w	r4, r4, #1
   da9ce:	7813      	ldrb	r3, [r2, #0]
   da9d0:	d10a      	bne.n	da9e8 <strftime+0x5c4>
   da9d2:	eb0e 0c03 	add.w	ip, lr, r3
   da9d6:	f89c c001 	ldrb.w	ip, [ip, #1]
   da9da:	f00c 0c03 	and.w	ip, ip, #3
   da9de:	f1bc 0f01 	cmp.w	ip, #1
   da9e2:	bf08      	it	eq
   da9e4:	3320      	addeq	r3, #32
   da9e6:	b2db      	uxtb	r3, r3
   da9e8:	f801 3b01 	strb.w	r3, [r1], #1
   da9ec:	3201      	adds	r2, #1
   da9ee:	e7e2      	b.n	da9b6 <strftime+0x592>
   da9f0:	686b      	ldr	r3, [r5, #4]
   da9f2:	9300      	str	r3, [sp, #0]
   da9f4:	4aa0      	ldr	r2, [pc, #640]	; (dac78 <strftime+0x854>)
   da9f6:	68ab      	ldr	r3, [r5, #8]
   da9f8:	e139      	b.n	dac6e <strftime+0x84a>
   da9fa:	6a2b      	ldr	r3, [r5, #32]
   da9fc:	2b00      	cmp	r3, #0
   da9fe:	db17      	blt.n	daa30 <strftime+0x60c>
   daa00:	f001 fa02 	bl	dbe08 <__tz_lock>
   daa04:	9b06      	ldr	r3, [sp, #24]
   daa06:	b91b      	cbnz	r3, daa10 <strftime+0x5ec>
   daa08:	f001 fa00 	bl	dbe0c <_tzset_unlocked>
   daa0c:	2301      	movs	r3, #1
   daa0e:	9306      	str	r3, [sp, #24]
   daa10:	f001 fefc 	bl	dc80c <__gettzinfo>
   daa14:	6a2b      	ldr	r3, [r5, #32]
   daa16:	2b00      	cmp	r3, #0
   daa18:	bfd4      	ite	le
   daa1a:	2300      	movle	r3, #0
   daa1c:	2301      	movgt	r3, #1
   daa1e:	221c      	movs	r2, #28
   daa20:	fb02 0003 	mla	r0, r2, r3, r0
   daa24:	6a03      	ldr	r3, [r0, #32]
   daa26:	f1c3 0800 	rsb	r8, r3, #0
   daa2a:	f001 f9ee 	bl	dbe0a <__tz_unlock>
   daa2e:	e001      	b.n	daa34 <strftime+0x610>
   daa30:	f04f 0800 	mov.w	r8, #0
   daa34:	f8d5 e014 	ldr.w	lr, [r5, #20]
   daa38:	4670      	mov	r0, lr
   daa3a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   daa3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   daa42:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   daa46:	2a00      	cmp	r2, #0
   daa48:	f173 0b00 	sbcs.w	fp, r3, #0
   daa4c:	ebc4 0c06 	rsb	ip, r4, r6
   daa50:	eb07 0a04 	add.w	sl, r7, r4
   daa54:	da03      	bge.n	daa5e <strftime+0x63a>
   daa56:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   daa5a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   daa5e:	0891      	lsrs	r1, r2, #2
   daa60:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   daa64:	109b      	asrs	r3, r3, #2
   daa66:	9104      	str	r1, [sp, #16]
   daa68:	9305      	str	r3, [sp, #20]
   daa6a:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   daa6e:	2364      	movs	r3, #100	; 0x64
   daa70:	fb91 f1f3 	sdiv	r1, r1, r3
   daa74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   daa78:	1a52      	subs	r2, r2, r1
   daa7a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   daa7e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   daa82:	f44f 71c8 	mov.w	r1, #400	; 0x190
   daa86:	fb90 f1f1 	sdiv	r1, r0, r1
   daa8a:	1852      	adds	r2, r2, r1
   daa8c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daa90:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   daa94:	f240 116d 	movw	r1, #365	; 0x16d
   daa98:	fb01 fe0e 	mul.w	lr, r1, lr
   daa9c:	69e9      	ldr	r1, [r5, #28]
   daa9e:	eb12 020e 	adds.w	r2, r2, lr
   daaa2:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   daaa6:	1852      	adds	r2, r2, r1
   daaa8:	f04f 0e18 	mov.w	lr, #24
   daaac:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daab0:	fba2 010e 	umull	r0, r1, r2, lr
   daab4:	fb0e 1103 	mla	r1, lr, r3, r1
   daab8:	68ab      	ldr	r3, [r5, #8]
   daaba:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   daabe:	18c0      	adds	r0, r0, r3
   daac0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daac4:	fba0 230e 	umull	r2, r3, r0, lr
   daac8:	fb0e 3301 	mla	r3, lr, r1, r3
   daacc:	6869      	ldr	r1, [r5, #4]
   daace:	1852      	adds	r2, r2, r1
   daad0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daad4:	fba2 010e 	umull	r0, r1, r2, lr
   daad8:	fb0e 1103 	mla	r1, lr, r3, r1
   daadc:	682b      	ldr	r3, [r5, #0]
   daade:	4a67      	ldr	r2, [pc, #412]	; (dac7c <strftime+0x858>)
   daae0:	18c0      	adds	r0, r0, r3
   daae2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daae6:	ebb0 0008 	subs.w	r0, r0, r8
   daaea:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   daaee:	e9cd 0100 	strd	r0, r1, [sp]
   daaf2:	4661      	mov	r1, ip
   daaf4:	4650      	mov	r0, sl
   daaf6:	f7fc f9c7 	bl	d6e88 <sniprintf>
   daafa:	e5f8      	b.n	da6ee <strftime+0x2ca>
   daafc:	682b      	ldr	r3, [r5, #0]
   daafe:	e07e      	b.n	dabfe <strftime+0x7da>
   dab00:	9b02      	ldr	r3, [sp, #8]
   dab02:	429c      	cmp	r4, r3
   dab04:	f080 8138 	bcs.w	dad78 <strftime+0x954>
   dab08:	2309      	movs	r3, #9
   dab0a:	e128      	b.n	dad5e <strftime+0x93a>
   dab0c:	682b      	ldr	r3, [r5, #0]
   dab0e:	9301      	str	r3, [sp, #4]
   dab10:	686b      	ldr	r3, [r5, #4]
   dab12:	9300      	str	r3, [sp, #0]
   dab14:	4a5a      	ldr	r2, [pc, #360]	; (dac80 <strftime+0x85c>)
   dab16:	68ab      	ldr	r3, [r5, #8]
   dab18:	1b31      	subs	r1, r6, r4
   dab1a:	1938      	adds	r0, r7, r4
   dab1c:	e60d      	b.n	da73a <strftime+0x316>
   dab1e:	9b02      	ldr	r3, [sp, #8]
   dab20:	429c      	cmp	r4, r3
   dab22:	f080 8129 	bcs.w	dad78 <strftime+0x954>
   dab26:	69ab      	ldr	r3, [r5, #24]
   dab28:	1c62      	adds	r2, r4, #1
   dab2a:	b90b      	cbnz	r3, dab30 <strftime+0x70c>
   dab2c:	2337      	movs	r3, #55	; 0x37
   dab2e:	e000      	b.n	dab32 <strftime+0x70e>
   dab30:	3330      	adds	r3, #48	; 0x30
   dab32:	553b      	strb	r3, [r7, r4]
   dab34:	4614      	mov	r4, r2
   dab36:	e114      	b.n	dad62 <strftime+0x93e>
   dab38:	69eb      	ldr	r3, [r5, #28]
   dab3a:	69aa      	ldr	r2, [r5, #24]
   dab3c:	3307      	adds	r3, #7
   dab3e:	1a9b      	subs	r3, r3, r2
   dab40:	2207      	movs	r2, #7
   dab42:	fb93 f3f2 	sdiv	r3, r3, r2
   dab46:	e05a      	b.n	dabfe <strftime+0x7da>
   dab48:	4628      	mov	r0, r5
   dab4a:	f7ff fc0a 	bl	da362 <iso_year_adjust>
   dab4e:	69aa      	ldr	r2, [r5, #24]
   dab50:	b10a      	cbz	r2, dab56 <strftime+0x732>
   dab52:	1e53      	subs	r3, r2, #1
   dab54:	e000      	b.n	dab58 <strftime+0x734>
   dab56:	2306      	movs	r3, #6
   dab58:	2800      	cmp	r0, #0
   dab5a:	dc2f      	bgt.n	dabbc <strftime+0x798>
   dab5c:	69ea      	ldr	r2, [r5, #28]
   dab5e:	d101      	bne.n	dab64 <strftime+0x740>
   dab60:	320a      	adds	r2, #10
   dab62:	e03b      	b.n	dabdc <strftime+0x7b8>
   dab64:	1a9a      	subs	r2, r3, r2
   dab66:	696b      	ldr	r3, [r5, #20]
   dab68:	f240 716b 	movw	r1, #1899	; 0x76b
   dab6c:	2b00      	cmp	r3, #0
   dab6e:	bfb4      	ite	lt
   dab70:	4608      	movlt	r0, r1
   dab72:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dab76:	4418      	add	r0, r3
   dab78:	0781      	lsls	r1, r0, #30
   dab7a:	d107      	bne.n	dab8c <strftime+0x768>
   dab7c:	4601      	mov	r1, r0
   dab7e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dab82:	fb90 f0fe 	sdiv	r0, r0, lr
   dab86:	fb0e 1110 	mls	r1, lr, r0, r1
   dab8a:	b981      	cbnz	r1, dabae <strftime+0x78a>
   dab8c:	2b00      	cmp	r3, #0
   dab8e:	f240 716b 	movw	r1, #1899	; 0x76b
   dab92:	bfa8      	it	ge
   dab94:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dab98:	4419      	add	r1, r3
   dab9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dab9e:	fb91 f0f3 	sdiv	r0, r1, r3
   daba2:	fb03 1110 	mls	r1, r3, r0, r1
   daba6:	fab1 f181 	clz	r1, r1
   dabaa:	0949      	lsrs	r1, r1, #5
   dabac:	e000      	b.n	dabb0 <strftime+0x78c>
   dabae:	2101      	movs	r1, #1
   dabb0:	1a52      	subs	r2, r2, r1
   dabb2:	2a05      	cmp	r2, #5
   dabb4:	bfb4      	ite	lt
   dabb6:	2335      	movlt	r3, #53	; 0x35
   dabb8:	2334      	movge	r3, #52	; 0x34
   dabba:	e020      	b.n	dabfe <strftime+0x7da>
   dabbc:	2301      	movs	r3, #1
   dabbe:	e01e      	b.n	dabfe <strftime+0x7da>
   dabc0:	9b02      	ldr	r3, [sp, #8]
   dabc2:	429c      	cmp	r4, r3
   dabc4:	f080 80d8 	bcs.w	dad78 <strftime+0x954>
   dabc8:	69ab      	ldr	r3, [r5, #24]
   dabca:	3330      	adds	r3, #48	; 0x30
   dabcc:	e0c7      	b.n	dad5e <strftime+0x93a>
   dabce:	69aa      	ldr	r2, [r5, #24]
   dabd0:	b10a      	cbz	r2, dabd6 <strftime+0x7b2>
   dabd2:	1e53      	subs	r3, r2, #1
   dabd4:	e000      	b.n	dabd8 <strftime+0x7b4>
   dabd6:	2306      	movs	r3, #6
   dabd8:	69ea      	ldr	r2, [r5, #28]
   dabda:	3207      	adds	r2, #7
   dabdc:	1ad2      	subs	r2, r2, r3
   dabde:	2307      	movs	r3, #7
   dabe0:	fb92 f3f3 	sdiv	r3, r2, r3
   dabe4:	e00b      	b.n	dabfe <strftime+0x7da>
   dabe6:	6968      	ldr	r0, [r5, #20]
   dabe8:	2800      	cmp	r0, #0
   dabea:	da03      	bge.n	dabf4 <strftime+0x7d0>
   dabec:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dabf0:	f001 fa92 	bl	dc118 <abs>
   dabf4:	2364      	movs	r3, #100	; 0x64
   dabf6:	fb90 f2f3 	sdiv	r2, r0, r3
   dabfa:	fb02 0313 	mls	r3, r2, r3, r0
   dabfe:	4a21      	ldr	r2, [pc, #132]	; (dac84 <strftime+0x860>)
   dac00:	e571      	b.n	da6e6 <strftime+0x2c2>
   dac02:	696b      	ldr	r3, [r5, #20]
   dac04:	4a20      	ldr	r2, [pc, #128]	; (dac88 <strftime+0x864>)
   dac06:	4293      	cmp	r3, r2
   dac08:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dac0c:	da05      	bge.n	dac1a <strftime+0x7f6>
   dac0e:	232d      	movs	r3, #45	; 0x2d
   dac10:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dac14:	f1cb 0b00 	rsb	fp, fp, #0
   dac18:	e008      	b.n	dac2c <strftime+0x808>
   dac1a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dac1e:	d10d      	bne.n	dac3c <strftime+0x818>
   dac20:	f242 730f 	movw	r3, #9999	; 0x270f
   dac24:	459b      	cmp	fp, r3
   dac26:	d911      	bls.n	dac4c <strftime+0x828>
   dac28:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dac2c:	f1b8 0f00 	cmp.w	r8, #0
   dac30:	d001      	beq.n	dac36 <strftime+0x812>
   dac32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dac36:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dac3a:	e000      	b.n	dac3e <strftime+0x81a>
   dac3c:	ab0a      	add	r3, sp, #40	; 0x28
   dac3e:	2225      	movs	r2, #37	; 0x25
   dac40:	701a      	strb	r2, [r3, #0]
   dac42:	f1ba 0f00 	cmp.w	sl, #0
   dac46:	d108      	bne.n	dac5a <strftime+0x836>
   dac48:	1c58      	adds	r0, r3, #1
   dac4a:	e009      	b.n	dac60 <strftime+0x83c>
   dac4c:	f1b8 0f00 	cmp.w	r8, #0
   dac50:	d1f4      	bne.n	dac3c <strftime+0x818>
   dac52:	2325      	movs	r3, #37	; 0x25
   dac54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dac58:	ab0a      	add	r3, sp, #40	; 0x28
   dac5a:	2230      	movs	r2, #48	; 0x30
   dac5c:	1c98      	adds	r0, r3, #2
   dac5e:	705a      	strb	r2, [r3, #1]
   dac60:	490a      	ldr	r1, [pc, #40]	; (dac8c <strftime+0x868>)
   dac62:	f7ff fb5b 	bl	da31c <strcpy>
   dac66:	f8cd b000 	str.w	fp, [sp]
   dac6a:	4643      	mov	r3, r8
   dac6c:	aa0a      	add	r2, sp, #40	; 0x28
   dac6e:	1b31      	subs	r1, r6, r4
   dac70:	1938      	adds	r0, r7, r4
   dac72:	e03e      	b.n	dacf2 <strftime+0x8ce>
   dac74:	2003df9c 	.word	0x2003df9c
   dac78:	000ddc75 	.word	0x000ddc75
   dac7c:	000ddc6b 	.word	0x000ddc6b
   dac80:	000ddc70 	.word	0x000ddc70
   dac84:	000ddc51 	.word	0x000ddc51
   dac88:	fffff894 	.word	0xfffff894
   dac8c:	000ddc62 	.word	0x000ddc62
   dac90:	6a2b      	ldr	r3, [r5, #32]
   dac92:	2b00      	cmp	r3, #0
   dac94:	db65      	blt.n	dad62 <strftime+0x93e>
   dac96:	f001 f8b7 	bl	dbe08 <__tz_lock>
   dac9a:	9b06      	ldr	r3, [sp, #24]
   dac9c:	b91b      	cbnz	r3, daca6 <strftime+0x882>
   dac9e:	f001 f8b5 	bl	dbe0c <_tzset_unlocked>
   daca2:	2301      	movs	r3, #1
   daca4:	9306      	str	r3, [sp, #24]
   daca6:	f001 fdb1 	bl	dc80c <__gettzinfo>
   dacaa:	6a2b      	ldr	r3, [r5, #32]
   dacac:	2b00      	cmp	r3, #0
   dacae:	bfd4      	ite	le
   dacb0:	2300      	movle	r3, #0
   dacb2:	2301      	movgt	r3, #1
   dacb4:	221c      	movs	r2, #28
   dacb6:	fb02 0003 	mla	r0, r2, r3, r0
   dacba:	eb07 0a04 	add.w	sl, r7, r4
   dacbe:	6a03      	ldr	r3, [r0, #32]
   dacc0:	f1c3 0800 	rsb	r8, r3, #0
   dacc4:	f001 f8a1 	bl	dbe0a <__tz_unlock>
   dacc8:	233c      	movs	r3, #60	; 0x3c
   dacca:	fb98 f0f3 	sdiv	r0, r8, r3
   dacce:	9307      	str	r3, [sp, #28]
   dacd0:	f001 fda0 	bl	dc814 <labs>
   dacd4:	9b07      	ldr	r3, [sp, #28]
   dacd6:	fb90 f2f3 	sdiv	r2, r0, r3
   dacda:	ebc4 0b06 	rsb	fp, r4, r6
   dacde:	fb02 0013 	mls	r0, r2, r3, r0
   dace2:	4a28      	ldr	r2, [pc, #160]	; (dad84 <strftime+0x960>)
   dace4:	9000      	str	r0, [sp, #0]
   dace6:	4659      	mov	r1, fp
   dace8:	4650      	mov	r0, sl
   dacea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dacee:	fb98 f3f3 	sdiv	r3, r8, r3
   dacf2:	f7fc f8c9 	bl	d6e88 <sniprintf>
   dacf6:	e4fa      	b.n	da6ee <strftime+0x2ca>
   dacf8:	4404      	add	r4, r0
   dacfa:	42a6      	cmp	r6, r4
   dacfc:	d831      	bhi.n	dad62 <strftime+0x93e>
   dacfe:	e03b      	b.n	dad78 <strftime+0x954>
   dad00:	6a2b      	ldr	r3, [r5, #32]
   dad02:	2b00      	cmp	r3, #0
   dad04:	db2d      	blt.n	dad62 <strftime+0x93e>
   dad06:	f001 f87f 	bl	dbe08 <__tz_lock>
   dad0a:	9b06      	ldr	r3, [sp, #24]
   dad0c:	b91b      	cbnz	r3, dad16 <strftime+0x8f2>
   dad0e:	f001 f87d 	bl	dbe0c <_tzset_unlocked>
   dad12:	2301      	movs	r3, #1
   dad14:	9306      	str	r3, [sp, #24]
   dad16:	6a2b      	ldr	r3, [r5, #32]
   dad18:	4a1b      	ldr	r2, [pc, #108]	; (dad88 <strftime+0x964>)
   dad1a:	2b00      	cmp	r3, #0
   dad1c:	bfd4      	ite	le
   dad1e:	2300      	movle	r3, #0
   dad20:	2301      	movgt	r3, #1
   dad22:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dad26:	4640      	mov	r0, r8
   dad28:	f000 f830 	bl	dad8c <strlen>
   dad2c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dad30:	193b      	adds	r3, r7, r4
   dad32:	4420      	add	r0, r4
   dad34:	4284      	cmp	r4, r0
   dad36:	d00b      	beq.n	dad50 <strftime+0x92c>
   dad38:	9a02      	ldr	r2, [sp, #8]
   dad3a:	4294      	cmp	r4, r2
   dad3c:	d205      	bcs.n	dad4a <strftime+0x926>
   dad3e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dad42:	f803 2b01 	strb.w	r2, [r3], #1
   dad46:	3401      	adds	r4, #1
   dad48:	e7f4      	b.n	dad34 <strftime+0x910>
   dad4a:	f001 f85e 	bl	dbe0a <__tz_unlock>
   dad4e:	e013      	b.n	dad78 <strftime+0x954>
   dad50:	f001 f85b 	bl	dbe0a <__tz_unlock>
   dad54:	e005      	b.n	dad62 <strftime+0x93e>
   dad56:	9b02      	ldr	r3, [sp, #8]
   dad58:	429c      	cmp	r4, r3
   dad5a:	d20d      	bcs.n	dad78 <strftime+0x954>
   dad5c:	2325      	movs	r3, #37	; 0x25
   dad5e:	553b      	strb	r3, [r7, r4]
   dad60:	3401      	adds	r4, #1
   dad62:	f899 3000 	ldrb.w	r3, [r9]
   dad66:	b11b      	cbz	r3, dad70 <strftime+0x94c>
   dad68:	f109 0901 	add.w	r9, r9, #1
   dad6c:	f7ff bb69 	b.w	da442 <strftime+0x1e>
   dad70:	b126      	cbz	r6, dad7c <strftime+0x958>
   dad72:	2300      	movs	r3, #0
   dad74:	553b      	strb	r3, [r7, r4]
   dad76:	e001      	b.n	dad7c <strftime+0x958>
   dad78:	2000      	movs	r0, #0
   dad7a:	e000      	b.n	dad7e <strftime+0x95a>
   dad7c:	4620      	mov	r0, r4
   dad7e:	b013      	add	sp, #76	; 0x4c
   dad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad84:	000ddc7f 	.word	0x000ddc7f
   dad88:	2003e03c 	.word	0x2003e03c

000dad8c <strlen>:
   dad8c:	4603      	mov	r3, r0
   dad8e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dad92:	2a00      	cmp	r2, #0
   dad94:	d1fb      	bne.n	dad8e <strlen+0x2>
   dad96:	1a18      	subs	r0, r3, r0
   dad98:	3801      	subs	r0, #1
   dad9a:	4770      	bx	lr

000dad9c <strncmp>:
   dad9c:	b530      	push	{r4, r5, lr}
   dad9e:	b182      	cbz	r2, dadc2 <strncmp+0x26>
   dada0:	1e45      	subs	r5, r0, #1
   dada2:	3901      	subs	r1, #1
   dada4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dada8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dadac:	42a3      	cmp	r3, r4
   dadae:	d106      	bne.n	dadbe <strncmp+0x22>
   dadb0:	43ec      	mvns	r4, r5
   dadb2:	4414      	add	r4, r2
   dadb4:	42e0      	cmn	r0, r4
   dadb6:	d001      	beq.n	dadbc <strncmp+0x20>
   dadb8:	2b00      	cmp	r3, #0
   dadba:	d1f3      	bne.n	dada4 <strncmp+0x8>
   dadbc:	461c      	mov	r4, r3
   dadbe:	1b18      	subs	r0, r3, r4
   dadc0:	bd30      	pop	{r4, r5, pc}
   dadc2:	4610      	mov	r0, r2
   dadc4:	bd30      	pop	{r4, r5, pc}

000dadc6 <strncpy>:
   dadc6:	b510      	push	{r4, lr}
   dadc8:	4603      	mov	r3, r0
   dadca:	b142      	cbz	r2, dadde <strncpy+0x18>
   dadcc:	f811 4b01 	ldrb.w	r4, [r1], #1
   dadd0:	f803 4b01 	strb.w	r4, [r3], #1
   dadd4:	3a01      	subs	r2, #1
   dadd6:	2c00      	cmp	r4, #0
   dadd8:	d1f7      	bne.n	dadca <strncpy+0x4>
   dadda:	441a      	add	r2, r3
   daddc:	e000      	b.n	dade0 <strncpy+0x1a>
   dadde:	bd10      	pop	{r4, pc}
   dade0:	4293      	cmp	r3, r2
   dade2:	d002      	beq.n	dadea <strncpy+0x24>
   dade4:	f803 4b01 	strb.w	r4, [r3], #1
   dade8:	e7fa      	b.n	dade0 <strncpy+0x1a>
   dadea:	bd10      	pop	{r4, pc}

000dadec <sulp>:
   dadec:	b570      	push	{r4, r5, r6, lr}
   dadee:	4604      	mov	r4, r0
   dadf0:	460d      	mov	r5, r1
   dadf2:	ec45 4b10 	vmov	d0, r4, r5
   dadf6:	4616      	mov	r6, r2
   dadf8:	f001 ffd6 	bl	dcda8 <__ulp>
   dadfc:	ec51 0b10 	vmov	r0, r1, d0
   dae00:	b17e      	cbz	r6, dae22 <sulp+0x36>
   dae02:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dae06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dae0a:	2b00      	cmp	r3, #0
   dae0c:	dd09      	ble.n	dae22 <sulp+0x36>
   dae0e:	051b      	lsls	r3, r3, #20
   dae10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dae14:	2400      	movs	r4, #0
   dae16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dae1a:	4622      	mov	r2, r4
   dae1c:	462b      	mov	r3, r5
   dae1e:	f7fe faad 	bl	d937c <__aeabi_dmul>
   dae22:	bd70      	pop	{r4, r5, r6, pc}
   dae24:	0000      	movs	r0, r0
	...

000dae28 <_strtod_r>:
   dae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae2c:	b09d      	sub	sp, #116	; 0x74
   dae2e:	2300      	movs	r3, #0
   dae30:	9002      	str	r0, [sp, #8]
   dae32:	460c      	mov	r4, r1
   dae34:	9213      	str	r2, [sp, #76]	; 0x4c
   dae36:	9318      	str	r3, [sp, #96]	; 0x60
   dae38:	f04f 0a00 	mov.w	sl, #0
   dae3c:	f04f 0b00 	mov.w	fp, #0
   dae40:	9117      	str	r1, [sp, #92]	; 0x5c
   dae42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dae44:	781a      	ldrb	r2, [r3, #0]
   dae46:	2a0d      	cmp	r2, #13
   dae48:	d805      	bhi.n	dae56 <_strtod_r+0x2e>
   dae4a:	2a09      	cmp	r2, #9
   dae4c:	d213      	bcs.n	dae76 <_strtod_r+0x4e>
   dae4e:	2a00      	cmp	r2, #0
   dae50:	f000 81ac 	beq.w	db1ac <_strtod_r+0x384>
   dae54:	e012      	b.n	dae7c <_strtod_r+0x54>
   dae56:	2a2b      	cmp	r2, #43	; 0x2b
   dae58:	d004      	beq.n	dae64 <_strtod_r+0x3c>
   dae5a:	2a2d      	cmp	r2, #45	; 0x2d
   dae5c:	d004      	beq.n	dae68 <_strtod_r+0x40>
   dae5e:	2a20      	cmp	r2, #32
   dae60:	d10c      	bne.n	dae7c <_strtod_r+0x54>
   dae62:	e008      	b.n	dae76 <_strtod_r+0x4e>
   dae64:	2200      	movs	r2, #0
   dae66:	e000      	b.n	dae6a <_strtod_r+0x42>
   dae68:	2201      	movs	r2, #1
   dae6a:	920c      	str	r2, [sp, #48]	; 0x30
   dae6c:	1c5a      	adds	r2, r3, #1
   dae6e:	9217      	str	r2, [sp, #92]	; 0x5c
   dae70:	785b      	ldrb	r3, [r3, #1]
   dae72:	b92b      	cbnz	r3, dae80 <_strtod_r+0x58>
   dae74:	e19a      	b.n	db1ac <_strtod_r+0x384>
   dae76:	3301      	adds	r3, #1
   dae78:	9317      	str	r3, [sp, #92]	; 0x5c
   dae7a:	e7e2      	b.n	dae42 <_strtod_r+0x1a>
   dae7c:	2300      	movs	r3, #0
   dae7e:	930c      	str	r3, [sp, #48]	; 0x30
   dae80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   dae82:	782b      	ldrb	r3, [r5, #0]
   dae84:	2b30      	cmp	r3, #48	; 0x30
   dae86:	d15c      	bne.n	daf42 <_strtod_r+0x11a>
   dae88:	786b      	ldrb	r3, [r5, #1]
   dae8a:	2b58      	cmp	r3, #88	; 0x58
   dae8c:	d001      	beq.n	dae92 <_strtod_r+0x6a>
   dae8e:	2b78      	cmp	r3, #120	; 0x78
   dae90:	d14c      	bne.n	daf2c <_strtod_r+0x104>
   dae92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dae94:	9301      	str	r3, [sp, #4]
   dae96:	ab18      	add	r3, sp, #96	; 0x60
   dae98:	9300      	str	r3, [sp, #0]
   dae9a:	4aa9      	ldr	r2, [pc, #676]	; (db140 <_strtod_r+0x318>)
   dae9c:	9802      	ldr	r0, [sp, #8]
   dae9e:	ab19      	add	r3, sp, #100	; 0x64
   daea0:	a917      	add	r1, sp, #92	; 0x5c
   daea2:	f001 f99c 	bl	dc1de <__gethex>
   daea6:	f010 0607 	ands.w	r6, r0, #7
   daeaa:	4604      	mov	r4, r0
   daeac:	f000 8587 	beq.w	db9be <_strtod_r+0xb96>
   daeb0:	2e06      	cmp	r6, #6
   daeb2:	d105      	bne.n	daec0 <_strtod_r+0x98>
   daeb4:	3501      	adds	r5, #1
   daeb6:	2300      	movs	r3, #0
   daeb8:	9517      	str	r5, [sp, #92]	; 0x5c
   daeba:	930c      	str	r3, [sp, #48]	; 0x30
   daebc:	f000 bd7f 	b.w	db9be <_strtod_r+0xb96>
   daec0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   daec2:	b13a      	cbz	r2, daed4 <_strtod_r+0xac>
   daec4:	2135      	movs	r1, #53	; 0x35
   daec6:	a81a      	add	r0, sp, #104	; 0x68
   daec8:	f002 f85b 	bl	dcf82 <__copybits>
   daecc:	9918      	ldr	r1, [sp, #96]	; 0x60
   daece:	9802      	ldr	r0, [sp, #8]
   daed0:	f001 fcd9 	bl	dc886 <_Bfree>
   daed4:	2e06      	cmp	r6, #6
   daed6:	d822      	bhi.n	daf1e <_strtod_r+0xf6>
   daed8:	e8df f006 	tbb	[pc, r6]
   daedc:	18080d04 	.word	0x18080d04
   daee0:	0d1d      	.short	0x0d1d
   daee2:	04          	.byte	0x04
   daee3:	00          	.byte	0x00
   daee4:	f04f 0b00 	mov.w	fp, #0
   daee8:	46da      	mov	sl, fp
   daeea:	e018      	b.n	daf1e <_strtod_r+0xf6>
   daeec:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   daef0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   daef4:	e013      	b.n	daf1e <_strtod_r+0xf6>
   daef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   daef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   daefa:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   daefe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   daf02:	f202 4233 	addw	r2, r2, #1075	; 0x433
   daf06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   daf0a:	e008      	b.n	daf1e <_strtod_r+0xf6>
   daf0c:	f8df b234 	ldr.w	fp, [pc, #564]	; db144 <_strtod_r+0x31c>
   daf10:	f04f 0a00 	mov.w	sl, #0
   daf14:	e003      	b.n	daf1e <_strtod_r+0xf6>
   daf16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   daf1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   daf1e:	0721      	lsls	r1, r4, #28
   daf20:	f140 854d 	bpl.w	db9be <_strtod_r+0xb96>
   daf24:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   daf28:	f000 bd49 	b.w	db9be <_strtod_r+0xb96>
   daf2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf2e:	1c5a      	adds	r2, r3, #1
   daf30:	9217      	str	r2, [sp, #92]	; 0x5c
   daf32:	785b      	ldrb	r3, [r3, #1]
   daf34:	2b30      	cmp	r3, #48	; 0x30
   daf36:	d0f9      	beq.n	daf2c <_strtod_r+0x104>
   daf38:	2b00      	cmp	r3, #0
   daf3a:	f000 8540 	beq.w	db9be <_strtod_r+0xb96>
   daf3e:	2301      	movs	r3, #1
   daf40:	e000      	b.n	daf44 <_strtod_r+0x11c>
   daf42:	2300      	movs	r3, #0
   daf44:	f04f 0800 	mov.w	r8, #0
   daf48:	9306      	str	r3, [sp, #24]
   daf4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   daf4c:	9307      	str	r3, [sp, #28]
   daf4e:	f8cd 8014 	str.w	r8, [sp, #20]
   daf52:	f8cd 8010 	str.w	r8, [sp, #16]
   daf56:	220a      	movs	r2, #10
   daf58:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   daf5a:	782e      	ldrb	r6, [r5, #0]
   daf5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   daf60:	b2d9      	uxtb	r1, r3
   daf62:	2909      	cmp	r1, #9
   daf64:	d80e      	bhi.n	daf84 <_strtod_r+0x15c>
   daf66:	9904      	ldr	r1, [sp, #16]
   daf68:	2908      	cmp	r1, #8
   daf6a:	bfdd      	ittte	le
   daf6c:	9905      	ldrle	r1, [sp, #20]
   daf6e:	fb02 3301 	mlale	r3, r2, r1, r3
   daf72:	9305      	strle	r3, [sp, #20]
   daf74:	fb02 3808 	mlagt	r8, r2, r8, r3
   daf78:	9b04      	ldr	r3, [sp, #16]
   daf7a:	3501      	adds	r5, #1
   daf7c:	3301      	adds	r3, #1
   daf7e:	9304      	str	r3, [sp, #16]
   daf80:	9517      	str	r5, [sp, #92]	; 0x5c
   daf82:	e7e9      	b.n	daf58 <_strtod_r+0x130>
   daf84:	9802      	ldr	r0, [sp, #8]
   daf86:	f7fe ff31 	bl	d9dec <_localeconv_r>
   daf8a:	6807      	ldr	r7, [r0, #0]
   daf8c:	9802      	ldr	r0, [sp, #8]
   daf8e:	f7fe ff2d 	bl	d9dec <_localeconv_r>
   daf92:	6800      	ldr	r0, [r0, #0]
   daf94:	f7ff fefa 	bl	dad8c <strlen>
   daf98:	4639      	mov	r1, r7
   daf9a:	4602      	mov	r2, r0
   daf9c:	4628      	mov	r0, r5
   daf9e:	f7ff fefd 	bl	dad9c <strncmp>
   dafa2:	4607      	mov	r7, r0
   dafa4:	b128      	cbz	r0, dafb2 <_strtod_r+0x18a>
   dafa6:	2000      	movs	r0, #0
   dafa8:	4633      	mov	r3, r6
   dafaa:	9d04      	ldr	r5, [sp, #16]
   dafac:	4602      	mov	r2, r0
   dafae:	4601      	mov	r1, r0
   dafb0:	e057      	b.n	db062 <_strtod_r+0x23a>
   dafb2:	9802      	ldr	r0, [sp, #8]
   dafb4:	f7fe ff1a 	bl	d9dec <_localeconv_r>
   dafb8:	6800      	ldr	r0, [r0, #0]
   dafba:	f7ff fee7 	bl	dad8c <strlen>
   dafbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dafc0:	181a      	adds	r2, r3, r0
   dafc2:	9217      	str	r2, [sp, #92]	; 0x5c
   dafc4:	9a04      	ldr	r2, [sp, #16]
   dafc6:	5c1b      	ldrb	r3, [r3, r0]
   dafc8:	2a00      	cmp	r2, #0
   dafca:	d142      	bne.n	db052 <_strtod_r+0x22a>
   dafcc:	4610      	mov	r0, r2
   dafce:	2b30      	cmp	r3, #48	; 0x30
   dafd0:	d105      	bne.n	dafde <_strtod_r+0x1b6>
   dafd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dafd4:	1c5a      	adds	r2, r3, #1
   dafd6:	9217      	str	r2, [sp, #92]	; 0x5c
   dafd8:	3001      	adds	r0, #1
   dafda:	785b      	ldrb	r3, [r3, #1]
   dafdc:	e7f7      	b.n	dafce <_strtod_r+0x1a6>
   dafde:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dafe2:	2a08      	cmp	r2, #8
   dafe4:	d843      	bhi.n	db06e <_strtod_r+0x246>
   dafe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dafe8:	9207      	str	r2, [sp, #28]
   dafea:	4602      	mov	r2, r0
   dafec:	2000      	movs	r0, #0
   dafee:	4605      	mov	r5, r0
   daff0:	3b30      	subs	r3, #48	; 0x30
   daff2:	f100 0101 	add.w	r1, r0, #1
   daff6:	d026      	beq.n	db046 <_strtod_r+0x21e>
   daff8:	440a      	add	r2, r1
   daffa:	eb05 0c00 	add.w	ip, r5, r0
   daffe:	4629      	mov	r1, r5
   db000:	260a      	movs	r6, #10
   db002:	4561      	cmp	r1, ip
   db004:	d00e      	beq.n	db024 <_strtod_r+0x1fc>
   db006:	3101      	adds	r1, #1
   db008:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   db00c:	f1be 0f08 	cmp.w	lr, #8
   db010:	dc03      	bgt.n	db01a <_strtod_r+0x1f2>
   db012:	9f05      	ldr	r7, [sp, #20]
   db014:	4377      	muls	r7, r6
   db016:	9705      	str	r7, [sp, #20]
   db018:	e7f3      	b.n	db002 <_strtod_r+0x1da>
   db01a:	2910      	cmp	r1, #16
   db01c:	bfd8      	it	le
   db01e:	fb06 f808 	mulle.w	r8, r6, r8
   db022:	e7ee      	b.n	db002 <_strtod_r+0x1da>
   db024:	4428      	add	r0, r5
   db026:	2808      	cmp	r0, #8
   db028:	f100 0501 	add.w	r5, r0, #1
   db02c:	dc05      	bgt.n	db03a <_strtod_r+0x212>
   db02e:	9805      	ldr	r0, [sp, #20]
   db030:	210a      	movs	r1, #10
   db032:	fb01 3300 	mla	r3, r1, r0, r3
   db036:	9305      	str	r3, [sp, #20]
   db038:	e004      	b.n	db044 <_strtod_r+0x21c>
   db03a:	2d10      	cmp	r5, #16
   db03c:	bfdc      	itt	le
   db03e:	210a      	movle	r1, #10
   db040:	fb01 3808 	mlale	r8, r1, r8, r3
   db044:	2100      	movs	r1, #0
   db046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db048:	1c58      	adds	r0, r3, #1
   db04a:	9017      	str	r0, [sp, #92]	; 0x5c
   db04c:	785b      	ldrb	r3, [r3, #1]
   db04e:	4608      	mov	r0, r1
   db050:	e002      	b.n	db058 <_strtod_r+0x230>
   db052:	9d04      	ldr	r5, [sp, #16]
   db054:	4638      	mov	r0, r7
   db056:	463a      	mov	r2, r7
   db058:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db05c:	2909      	cmp	r1, #9
   db05e:	d9c7      	bls.n	daff0 <_strtod_r+0x1c8>
   db060:	2101      	movs	r1, #1
   db062:	2b65      	cmp	r3, #101	; 0x65
   db064:	d001      	beq.n	db06a <_strtod_r+0x242>
   db066:	2b45      	cmp	r3, #69	; 0x45
   db068:	d151      	bne.n	db10e <_strtod_r+0x2e6>
   db06a:	b96d      	cbnz	r5, db088 <_strtod_r+0x260>
   db06c:	e004      	b.n	db078 <_strtod_r+0x250>
   db06e:	2b65      	cmp	r3, #101	; 0x65
   db070:	f040 84b3 	bne.w	db9da <_strtod_r+0xbb2>
   db074:	2200      	movs	r2, #0
   db076:	2101      	movs	r1, #1
   db078:	b928      	cbnz	r0, db086 <_strtod_r+0x25e>
   db07a:	9b06      	ldr	r3, [sp, #24]
   db07c:	2b00      	cmp	r3, #0
   db07e:	f000 8095 	beq.w	db1ac <_strtod_r+0x384>
   db082:	4605      	mov	r5, r0
   db084:	e000      	b.n	db088 <_strtod_r+0x260>
   db086:	2500      	movs	r5, #0
   db088:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   db08a:	1c63      	adds	r3, r4, #1
   db08c:	9317      	str	r3, [sp, #92]	; 0x5c
   db08e:	7863      	ldrb	r3, [r4, #1]
   db090:	2b2b      	cmp	r3, #43	; 0x2b
   db092:	d006      	beq.n	db0a2 <_strtod_r+0x27a>
   db094:	2b2d      	cmp	r3, #45	; 0x2d
   db096:	d002      	beq.n	db09e <_strtod_r+0x276>
   db098:	2600      	movs	r6, #0
   db09a:	9603      	str	r6, [sp, #12]
   db09c:	e006      	b.n	db0ac <_strtod_r+0x284>
   db09e:	2301      	movs	r3, #1
   db0a0:	e000      	b.n	db0a4 <_strtod_r+0x27c>
   db0a2:	2300      	movs	r3, #0
   db0a4:	9303      	str	r3, [sp, #12]
   db0a6:	1ca3      	adds	r3, r4, #2
   db0a8:	9317      	str	r3, [sp, #92]	; 0x5c
   db0aa:	78a3      	ldrb	r3, [r4, #2]
   db0ac:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db0b0:	2e09      	cmp	r6, #9
   db0b2:	d82b      	bhi.n	db10c <_strtod_r+0x2e4>
   db0b4:	2b30      	cmp	r3, #48	; 0x30
   db0b6:	d104      	bne.n	db0c2 <_strtod_r+0x29a>
   db0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0ba:	1c5e      	adds	r6, r3, #1
   db0bc:	9617      	str	r6, [sp, #92]	; 0x5c
   db0be:	785b      	ldrb	r3, [r3, #1]
   db0c0:	e7f8      	b.n	db0b4 <_strtod_r+0x28c>
   db0c2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   db0c6:	2e08      	cmp	r6, #8
   db0c8:	d821      	bhi.n	db10e <_strtod_r+0x2e6>
   db0ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db0ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0d0:	f04f 0c0a 	mov.w	ip, #10
   db0d4:	461f      	mov	r7, r3
   db0d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db0d8:	1c5e      	adds	r6, r3, #1
   db0da:	9617      	str	r6, [sp, #92]	; 0x5c
   db0dc:	785b      	ldrb	r3, [r3, #1]
   db0de:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   db0e2:	f1b9 0f09 	cmp.w	r9, #9
   db0e6:	d804      	bhi.n	db0f2 <_strtod_r+0x2ca>
   db0e8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   db0ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db0f0:	e7f1      	b.n	db0d6 <_strtod_r+0x2ae>
   db0f2:	1bf6      	subs	r6, r6, r7
   db0f4:	2e08      	cmp	r6, #8
   db0f6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   db0fa:	dc02      	bgt.n	db102 <_strtod_r+0x2da>
   db0fc:	45f1      	cmp	r9, lr
   db0fe:	bfa8      	it	ge
   db100:	46f1      	movge	r9, lr
   db102:	9e03      	ldr	r6, [sp, #12]
   db104:	b12e      	cbz	r6, db112 <_strtod_r+0x2ea>
   db106:	f1c9 0900 	rsb	r9, r9, #0
   db10a:	e002      	b.n	db112 <_strtod_r+0x2ea>
   db10c:	9417      	str	r4, [sp, #92]	; 0x5c
   db10e:	f04f 0900 	mov.w	r9, #0
   db112:	2d00      	cmp	r5, #0
   db114:	d153      	bne.n	db1be <_strtod_r+0x396>
   db116:	2800      	cmp	r0, #0
   db118:	f040 8451 	bne.w	db9be <_strtod_r+0xb96>
   db11c:	9a06      	ldr	r2, [sp, #24]
   db11e:	2a00      	cmp	r2, #0
   db120:	f040 844d 	bne.w	db9be <_strtod_r+0xb96>
   db124:	2900      	cmp	r1, #0
   db126:	d141      	bne.n	db1ac <_strtod_r+0x384>
   db128:	2b4e      	cmp	r3, #78	; 0x4e
   db12a:	d020      	beq.n	db16e <_strtod_r+0x346>
   db12c:	dc02      	bgt.n	db134 <_strtod_r+0x30c>
   db12e:	2b49      	cmp	r3, #73	; 0x49
   db130:	d00a      	beq.n	db148 <_strtod_r+0x320>
   db132:	e03b      	b.n	db1ac <_strtod_r+0x384>
   db134:	2b69      	cmp	r3, #105	; 0x69
   db136:	d007      	beq.n	db148 <_strtod_r+0x320>
   db138:	2b6e      	cmp	r3, #110	; 0x6e
   db13a:	d018      	beq.n	db16e <_strtod_r+0x346>
   db13c:	e036      	b.n	db1ac <_strtod_r+0x384>
   db13e:	bf00      	nop
   db140:	000ddc8c 	.word	0x000ddc8c
   db144:	7ff00000 	.word	0x7ff00000
   db148:	49a8      	ldr	r1, [pc, #672]	; (db3ec <_strtod_r+0x5c4>)
   db14a:	a817      	add	r0, sp, #92	; 0x5c
   db14c:	f001 fa78 	bl	dc640 <__match>
   db150:	b360      	cbz	r0, db1ac <_strtod_r+0x384>
   db152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db154:	49a6      	ldr	r1, [pc, #664]	; (db3f0 <_strtod_r+0x5c8>)
   db156:	3b01      	subs	r3, #1
   db158:	a817      	add	r0, sp, #92	; 0x5c
   db15a:	9317      	str	r3, [sp, #92]	; 0x5c
   db15c:	f001 fa70 	bl	dc640 <__match>
   db160:	b910      	cbnz	r0, db168 <_strtod_r+0x340>
   db162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db164:	3301      	adds	r3, #1
   db166:	9317      	str	r3, [sp, #92]	; 0x5c
   db168:	f8df b2a0 	ldr.w	fp, [pc, #672]	; db40c <_strtod_r+0x5e4>
   db16c:	e01a      	b.n	db1a4 <_strtod_r+0x37c>
   db16e:	49a1      	ldr	r1, [pc, #644]	; (db3f4 <_strtod_r+0x5cc>)
   db170:	a817      	add	r0, sp, #92	; 0x5c
   db172:	f001 fa65 	bl	dc640 <__match>
   db176:	b1c8      	cbz	r0, db1ac <_strtod_r+0x384>
   db178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db17a:	781b      	ldrb	r3, [r3, #0]
   db17c:	2b28      	cmp	r3, #40	; 0x28
   db17e:	d10f      	bne.n	db1a0 <_strtod_r+0x378>
   db180:	aa1a      	add	r2, sp, #104	; 0x68
   db182:	499d      	ldr	r1, [pc, #628]	; (db3f8 <_strtod_r+0x5d0>)
   db184:	a817      	add	r0, sp, #92	; 0x5c
   db186:	f001 fa6e 	bl	dc666 <__hexnan>
   db18a:	2805      	cmp	r0, #5
   db18c:	d108      	bne.n	db1a0 <_strtod_r+0x378>
   db18e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   db190:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   db194:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db198:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db19c:	f000 bc0f 	b.w	db9be <_strtod_r+0xb96>
   db1a0:	f8df b26c 	ldr.w	fp, [pc, #620]	; db410 <_strtod_r+0x5e8>
   db1a4:	f04f 0a00 	mov.w	sl, #0
   db1a8:	f000 bc09 	b.w	db9be <_strtod_r+0xb96>
   db1ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db1ae:	9417      	str	r4, [sp, #92]	; 0x5c
   db1b0:	2b00      	cmp	r3, #0
   db1b2:	f000 840f 	beq.w	db9d4 <_strtod_r+0xbac>
   db1b6:	2300      	movs	r3, #0
   db1b8:	930c      	str	r3, [sp, #48]	; 0x30
   db1ba:	f000 bc02 	b.w	db9c2 <_strtod_r+0xb9a>
   db1be:	9b04      	ldr	r3, [sp, #16]
   db1c0:	9805      	ldr	r0, [sp, #20]
   db1c2:	2b00      	cmp	r3, #0
   db1c4:	bf08      	it	eq
   db1c6:	462b      	moveq	r3, r5
   db1c8:	2d10      	cmp	r5, #16
   db1ca:	462c      	mov	r4, r5
   db1cc:	ebc2 0909 	rsb	r9, r2, r9
   db1d0:	bfa8      	it	ge
   db1d2:	2410      	movge	r4, #16
   db1d4:	9304      	str	r3, [sp, #16]
   db1d6:	f7fe f85b 	bl	d9290 <__aeabi_ui2d>
   db1da:	2c09      	cmp	r4, #9
   db1dc:	4682      	mov	sl, r0
   db1de:	468b      	mov	fp, r1
   db1e0:	dd13      	ble.n	db20a <_strtod_r+0x3e2>
   db1e2:	4b86      	ldr	r3, [pc, #536]	; (db3fc <_strtod_r+0x5d4>)
   db1e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   db1e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db1ec:	f7fe f8c6 	bl	d937c <__aeabi_dmul>
   db1f0:	4606      	mov	r6, r0
   db1f2:	4640      	mov	r0, r8
   db1f4:	460f      	mov	r7, r1
   db1f6:	f7fe f84b 	bl	d9290 <__aeabi_ui2d>
   db1fa:	4602      	mov	r2, r0
   db1fc:	460b      	mov	r3, r1
   db1fe:	4630      	mov	r0, r6
   db200:	4639      	mov	r1, r7
   db202:	f7fd ff09 	bl	d9018 <__adddf3>
   db206:	4682      	mov	sl, r0
   db208:	468b      	mov	fp, r1
   db20a:	2d0f      	cmp	r5, #15
   db20c:	dc36      	bgt.n	db27c <_strtod_r+0x454>
   db20e:	f1b9 0f00 	cmp.w	r9, #0
   db212:	f000 83d4 	beq.w	db9be <_strtod_r+0xb96>
   db216:	dd24      	ble.n	db262 <_strtod_r+0x43a>
   db218:	f1b9 0f16 	cmp.w	r9, #22
   db21c:	dc07      	bgt.n	db22e <_strtod_r+0x406>
   db21e:	4d77      	ldr	r5, [pc, #476]	; (db3fc <_strtod_r+0x5d4>)
   db220:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   db224:	4652      	mov	r2, sl
   db226:	465b      	mov	r3, fp
   db228:	e9d9 0100 	ldrd	r0, r1, [r9]
   db22c:	e014      	b.n	db258 <_strtod_r+0x430>
   db22e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db232:	4599      	cmp	r9, r3
   db234:	dc22      	bgt.n	db27c <_strtod_r+0x454>
   db236:	4c71      	ldr	r4, [pc, #452]	; (db3fc <_strtod_r+0x5d4>)
   db238:	f1c5 050f 	rsb	r5, r5, #15
   db23c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db240:	ebc5 0509 	rsb	r5, r5, r9
   db244:	4652      	mov	r2, sl
   db246:	465b      	mov	r3, fp
   db248:	e9d1 0100 	ldrd	r0, r1, [r1]
   db24c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db250:	f7fe f894 	bl	d937c <__aeabi_dmul>
   db254:	e9d4 2300 	ldrd	r2, r3, [r4]
   db258:	f7fe f890 	bl	d937c <__aeabi_dmul>
   db25c:	4682      	mov	sl, r0
   db25e:	468b      	mov	fp, r1
   db260:	e3ad      	b.n	db9be <_strtod_r+0xb96>
   db262:	f119 0f16 	cmn.w	r9, #22
   db266:	db09      	blt.n	db27c <_strtod_r+0x454>
   db268:	4d64      	ldr	r5, [pc, #400]	; (db3fc <_strtod_r+0x5d4>)
   db26a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   db26e:	e9d9 2300 	ldrd	r2, r3, [r9]
   db272:	4650      	mov	r0, sl
   db274:	4659      	mov	r1, fp
   db276:	f7fe f9ab 	bl	d95d0 <__aeabi_ddiv>
   db27a:	e7ef      	b.n	db25c <_strtod_r+0x434>
   db27c:	1b2c      	subs	r4, r5, r4
   db27e:	444c      	add	r4, r9
   db280:	2c00      	cmp	r4, #0
   db282:	dd57      	ble.n	db334 <_strtod_r+0x50c>
   db284:	f014 010f 	ands.w	r1, r4, #15
   db288:	d00a      	beq.n	db2a0 <_strtod_r+0x478>
   db28a:	4b5c      	ldr	r3, [pc, #368]	; (db3fc <_strtod_r+0x5d4>)
   db28c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   db290:	4652      	mov	r2, sl
   db292:	465b      	mov	r3, fp
   db294:	e9d1 0100 	ldrd	r0, r1, [r1]
   db298:	f7fe f870 	bl	d937c <__aeabi_dmul>
   db29c:	4682      	mov	sl, r0
   db29e:	468b      	mov	fp, r1
   db2a0:	f034 040f 	bics.w	r4, r4, #15
   db2a4:	f000 80b8 	beq.w	db418 <_strtod_r+0x5f0>
   db2a8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   db2ac:	dd0b      	ble.n	db2c6 <_strtod_r+0x49e>
   db2ae:	2400      	movs	r4, #0
   db2b0:	4625      	mov	r5, r4
   db2b2:	9405      	str	r4, [sp, #20]
   db2b4:	9404      	str	r4, [sp, #16]
   db2b6:	9a02      	ldr	r2, [sp, #8]
   db2b8:	f8df b150 	ldr.w	fp, [pc, #336]	; db40c <_strtod_r+0x5e4>
   db2bc:	2322      	movs	r3, #34	; 0x22
   db2be:	6013      	str	r3, [r2, #0]
   db2c0:	f04f 0a00 	mov.w	sl, #0
   db2c4:	e187      	b.n	db5d6 <_strtod_r+0x7ae>
   db2c6:	4e4e      	ldr	r6, [pc, #312]	; (db400 <_strtod_r+0x5d8>)
   db2c8:	2300      	movs	r3, #0
   db2ca:	1124      	asrs	r4, r4, #4
   db2cc:	4650      	mov	r0, sl
   db2ce:	4659      	mov	r1, fp
   db2d0:	4698      	mov	r8, r3
   db2d2:	4637      	mov	r7, r6
   db2d4:	2c01      	cmp	r4, #1
   db2d6:	dd0b      	ble.n	db2f0 <_strtod_r+0x4c8>
   db2d8:	07e2      	lsls	r2, r4, #31
   db2da:	d504      	bpl.n	db2e6 <_strtod_r+0x4be>
   db2dc:	e9d6 2300 	ldrd	r2, r3, [r6]
   db2e0:	f7fe f84c 	bl	d937c <__aeabi_dmul>
   db2e4:	2301      	movs	r3, #1
   db2e6:	f108 0801 	add.w	r8, r8, #1
   db2ea:	1064      	asrs	r4, r4, #1
   db2ec:	3608      	adds	r6, #8
   db2ee:	e7f1      	b.n	db2d4 <_strtod_r+0x4ac>
   db2f0:	b10b      	cbz	r3, db2f6 <_strtod_r+0x4ce>
   db2f2:	4682      	mov	sl, r0
   db2f4:	468b      	mov	fp, r1
   db2f6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db2fa:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   db2fe:	4652      	mov	r2, sl
   db300:	465b      	mov	r3, fp
   db302:	e9d7 0100 	ldrd	r0, r1, [r7]
   db306:	f7fe f839 	bl	d937c <__aeabi_dmul>
   db30a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db30e:	468b      	mov	fp, r1
   db310:	460a      	mov	r2, r1
   db312:	0d1b      	lsrs	r3, r3, #20
   db314:	493b      	ldr	r1, [pc, #236]	; (db404 <_strtod_r+0x5dc>)
   db316:	051b      	lsls	r3, r3, #20
   db318:	428b      	cmp	r3, r1
   db31a:	4682      	mov	sl, r0
   db31c:	d8c7      	bhi.n	db2ae <_strtod_r+0x486>
   db31e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db322:	428b      	cmp	r3, r1
   db324:	bf86      	itte	hi
   db326:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; db414 <_strtod_r+0x5ec>
   db32a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db32e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db332:	e071      	b.n	db418 <_strtod_r+0x5f0>
   db334:	d070      	beq.n	db418 <_strtod_r+0x5f0>
   db336:	4264      	negs	r4, r4
   db338:	f014 020f 	ands.w	r2, r4, #15
   db33c:	d00a      	beq.n	db354 <_strtod_r+0x52c>
   db33e:	4b2f      	ldr	r3, [pc, #188]	; (db3fc <_strtod_r+0x5d4>)
   db340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db344:	4650      	mov	r0, sl
   db346:	4659      	mov	r1, fp
   db348:	e9d3 2300 	ldrd	r2, r3, [r3]
   db34c:	f7fe f940 	bl	d95d0 <__aeabi_ddiv>
   db350:	4682      	mov	sl, r0
   db352:	468b      	mov	fp, r1
   db354:	1124      	asrs	r4, r4, #4
   db356:	d05f      	beq.n	db418 <_strtod_r+0x5f0>
   db358:	2c1f      	cmp	r4, #31
   db35a:	dd04      	ble.n	db366 <_strtod_r+0x53e>
   db35c:	2400      	movs	r4, #0
   db35e:	4625      	mov	r5, r4
   db360:	9405      	str	r4, [sp, #20]
   db362:	9404      	str	r4, [sp, #16]
   db364:	e130      	b.n	db5c8 <_strtod_r+0x7a0>
   db366:	f014 0f10 	tst.w	r4, #16
   db36a:	bf0c      	ite	eq
   db36c:	2300      	moveq	r3, #0
   db36e:	236a      	movne	r3, #106	; 0x6a
   db370:	4e25      	ldr	r6, [pc, #148]	; (db408 <_strtod_r+0x5e0>)
   db372:	9303      	str	r3, [sp, #12]
   db374:	4650      	mov	r0, sl
   db376:	4659      	mov	r1, fp
   db378:	2300      	movs	r3, #0
   db37a:	2c00      	cmp	r4, #0
   db37c:	dd09      	ble.n	db392 <_strtod_r+0x56a>
   db37e:	07e2      	lsls	r2, r4, #31
   db380:	d504      	bpl.n	db38c <_strtod_r+0x564>
   db382:	e9d6 2300 	ldrd	r2, r3, [r6]
   db386:	f7fd fff9 	bl	d937c <__aeabi_dmul>
   db38a:	2301      	movs	r3, #1
   db38c:	1064      	asrs	r4, r4, #1
   db38e:	3608      	adds	r6, #8
   db390:	e7f3      	b.n	db37a <_strtod_r+0x552>
   db392:	b10b      	cbz	r3, db398 <_strtod_r+0x570>
   db394:	4682      	mov	sl, r0
   db396:	468b      	mov	fp, r1
   db398:	9b03      	ldr	r3, [sp, #12]
   db39a:	b1eb      	cbz	r3, db3d8 <_strtod_r+0x5b0>
   db39c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db3a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db3a4:	2b00      	cmp	r3, #0
   db3a6:	4659      	mov	r1, fp
   db3a8:	dd16      	ble.n	db3d8 <_strtod_r+0x5b0>
   db3aa:	2b1f      	cmp	r3, #31
   db3ac:	dd0e      	ble.n	db3cc <_strtod_r+0x5a4>
   db3ae:	2b34      	cmp	r3, #52	; 0x34
   db3b0:	bfde      	ittt	le
   db3b2:	3b20      	suble	r3, #32
   db3b4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db3b8:	fa02 f303 	lslle.w	r3, r2, r3
   db3bc:	f04f 0a00 	mov.w	sl, #0
   db3c0:	bfcc      	ite	gt
   db3c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db3c6:	ea03 0b01 	andle.w	fp, r3, r1
   db3ca:	e005      	b.n	db3d8 <_strtod_r+0x5b0>
   db3cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db3d0:	fa02 f303 	lsl.w	r3, r2, r3
   db3d4:	ea03 0a0a 	and.w	sl, r3, sl
   db3d8:	2200      	movs	r2, #0
   db3da:	2300      	movs	r3, #0
   db3dc:	4650      	mov	r0, sl
   db3de:	4659      	mov	r1, fp
   db3e0:	f7fe fa34 	bl	d984c <__aeabi_dcmpeq>
   db3e4:	2800      	cmp	r0, #0
   db3e6:	d1b9      	bne.n	db35c <_strtod_r+0x534>
   db3e8:	e018      	b.n	db41c <_strtod_r+0x5f4>
   db3ea:	bf00      	nop
   db3ec:	000ddcb4 	.word	0x000ddcb4
   db3f0:	000ddcb7 	.word	0x000ddcb7
   db3f4:	000ddcf1 	.word	0x000ddcf1
   db3f8:	000ddca0 	.word	0x000ddca0
   db3fc:	000ddf50 	.word	0x000ddf50
   db400:	000de018 	.word	0x000de018
   db404:	7ca00000 	.word	0x7ca00000
   db408:	000ddcc0 	.word	0x000ddcc0
   db40c:	7ff00000 	.word	0x7ff00000
   db410:	fff80000 	.word	0xfff80000
   db414:	7fefffff 	.word	0x7fefffff
   db418:	2300      	movs	r3, #0
   db41a:	9303      	str	r3, [sp, #12]
   db41c:	9b05      	ldr	r3, [sp, #20]
   db41e:	9300      	str	r3, [sp, #0]
   db420:	9a04      	ldr	r2, [sp, #16]
   db422:	9907      	ldr	r1, [sp, #28]
   db424:	9802      	ldr	r0, [sp, #8]
   db426:	462b      	mov	r3, r5
   db428:	f001 fa7f 	bl	dc92a <__s2b>
   db42c:	9005      	str	r0, [sp, #20]
   db42e:	2800      	cmp	r0, #0
   db430:	f43f af3d 	beq.w	db2ae <_strtod_r+0x486>
   db434:	f1b9 0f00 	cmp.w	r9, #0
   db438:	f1c9 0300 	rsb	r3, r9, #0
   db43c:	bfa8      	it	ge
   db43e:	2300      	movge	r3, #0
   db440:	930d      	str	r3, [sp, #52]	; 0x34
   db442:	2400      	movs	r4, #0
   db444:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   db448:	9312      	str	r3, [sp, #72]	; 0x48
   db44a:	4625      	mov	r5, r4
   db44c:	9b05      	ldr	r3, [sp, #20]
   db44e:	9802      	ldr	r0, [sp, #8]
   db450:	6859      	ldr	r1, [r3, #4]
   db452:	f001 f9e3 	bl	dc81c <_Balloc>
   db456:	9004      	str	r0, [sp, #16]
   db458:	2800      	cmp	r0, #0
   db45a:	f43f af2c 	beq.w	db2b6 <_strtod_r+0x48e>
   db45e:	9b05      	ldr	r3, [sp, #20]
   db460:	691a      	ldr	r2, [r3, #16]
   db462:	3202      	adds	r2, #2
   db464:	f103 010c 	add.w	r1, r3, #12
   db468:	0092      	lsls	r2, r2, #2
   db46a:	300c      	adds	r0, #12
   db46c:	f7fe fcc2 	bl	d9df4 <memcpy>
   db470:	aa1a      	add	r2, sp, #104	; 0x68
   db472:	a919      	add	r1, sp, #100	; 0x64
   db474:	ec4b ab10 	vmov	d0, sl, fp
   db478:	9802      	ldr	r0, [sp, #8]
   db47a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   db47e:	f001 fd08 	bl	dce92 <__d2b>
   db482:	9018      	str	r0, [sp, #96]	; 0x60
   db484:	2800      	cmp	r0, #0
   db486:	f43f af16 	beq.w	db2b6 <_strtod_r+0x48e>
   db48a:	2101      	movs	r1, #1
   db48c:	9802      	ldr	r0, [sp, #8]
   db48e:	f001 fad7 	bl	dca40 <__i2b>
   db492:	4605      	mov	r5, r0
   db494:	2800      	cmp	r0, #0
   db496:	f43f af0e 	beq.w	db2b6 <_strtod_r+0x48e>
   db49a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db49c:	9903      	ldr	r1, [sp, #12]
   db49e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   db4a0:	2b00      	cmp	r3, #0
   db4a2:	bfad      	iteet	ge
   db4a4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   db4a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   db4a8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   db4ac:	eb02 0803 	addge.w	r8, r2, r3
   db4b0:	bfb8      	it	lt
   db4b2:	1ad2      	sublt	r2, r2, r3
   db4b4:	eba3 0301 	sub.w	r3, r3, r1
   db4b8:	4433      	add	r3, r6
   db4ba:	49b5      	ldr	r1, [pc, #724]	; (db790 <_strtod_r+0x968>)
   db4bc:	bfa8      	it	ge
   db4be:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   db4c0:	3b01      	subs	r3, #1
   db4c2:	428b      	cmp	r3, r1
   db4c4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   db4c8:	f280 808a 	bge.w	db5e0 <_strtod_r+0x7b8>
   db4cc:	1ac9      	subs	r1, r1, r3
   db4ce:	291f      	cmp	r1, #31
   db4d0:	bfc8      	it	gt
   db4d2:	4fb0      	ldrgt	r7, [pc, #704]	; (db794 <_strtod_r+0x96c>)
   db4d4:	f04f 0901 	mov.w	r9, #1
   db4d8:	bfd4      	ite	le
   db4da:	fa09 f301 	lslle.w	r3, r9, r1
   db4de:	1aff      	subgt	r7, r7, r3
   db4e0:	eba6 0601 	sub.w	r6, r6, r1
   db4e4:	bfd9      	ittee	le
   db4e6:	9306      	strle	r3, [sp, #24]
   db4e8:	2700      	movle	r7, #0
   db4ea:	fa09 f707 	lslgt.w	r7, r9, r7
   db4ee:	f8cd 9018 	strgt.w	r9, [sp, #24]
   db4f2:	eb08 0906 	add.w	r9, r8, r6
   db4f6:	9b03      	ldr	r3, [sp, #12]
   db4f8:	45c8      	cmp	r8, r9
   db4fa:	4416      	add	r6, r2
   db4fc:	441e      	add	r6, r3
   db4fe:	4643      	mov	r3, r8
   db500:	bfa8      	it	ge
   db502:	464b      	movge	r3, r9
   db504:	42b3      	cmp	r3, r6
   db506:	bfa8      	it	ge
   db508:	4633      	movge	r3, r6
   db50a:	2b00      	cmp	r3, #0
   db50c:	bfc2      	ittt	gt
   db50e:	ebc3 0909 	rsbgt	r9, r3, r9
   db512:	1af6      	subgt	r6, r6, r3
   db514:	ebc3 0808 	rsbgt	r8, r3, r8
   db518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db51a:	2b00      	cmp	r3, #0
   db51c:	d164      	bne.n	db5e8 <_strtod_r+0x7c0>
   db51e:	f1b9 0f00 	cmp.w	r9, #0
   db522:	dc7a      	bgt.n	db61a <_strtod_r+0x7f2>
   db524:	9b12      	ldr	r3, [sp, #72]	; 0x48
   db526:	2b00      	cmp	r3, #0
   db528:	f040 8081 	bne.w	db62e <_strtod_r+0x806>
   db52c:	2e00      	cmp	r6, #0
   db52e:	f300 8088 	bgt.w	db642 <_strtod_r+0x81a>
   db532:	f1b8 0f00 	cmp.w	r8, #0
   db536:	f300 808e 	bgt.w	db656 <_strtod_r+0x82e>
   db53a:	9a04      	ldr	r2, [sp, #16]
   db53c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db53e:	9802      	ldr	r0, [sp, #8]
   db540:	f001 fbd3 	bl	dccea <__mdiff>
   db544:	4604      	mov	r4, r0
   db546:	2800      	cmp	r0, #0
   db548:	f43f aeb5 	beq.w	db2b6 <_strtod_r+0x48e>
   db54c:	68c3      	ldr	r3, [r0, #12]
   db54e:	9307      	str	r3, [sp, #28]
   db550:	2300      	movs	r3, #0
   db552:	60c3      	str	r3, [r0, #12]
   db554:	4629      	mov	r1, r5
   db556:	f001 fbac 	bl	dccb2 <__mcmp>
   db55a:	2800      	cmp	r0, #0
   db55c:	f280 8089 	bge.w	db672 <_strtod_r+0x84a>
   db560:	9b07      	ldr	r3, [sp, #28]
   db562:	2b00      	cmp	r3, #0
   db564:	f040 8204 	bne.w	db970 <_strtod_r+0xb48>
   db568:	f1ba 0f00 	cmp.w	sl, #0
   db56c:	f040 8200 	bne.w	db970 <_strtod_r+0xb48>
   db570:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db574:	2b00      	cmp	r3, #0
   db576:	f040 81fb 	bne.w	db970 <_strtod_r+0xb48>
   db57a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db57e:	0d1b      	lsrs	r3, r3, #20
   db580:	051b      	lsls	r3, r3, #20
   db582:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db586:	f240 81f3 	bls.w	db970 <_strtod_r+0xb48>
   db58a:	6963      	ldr	r3, [r4, #20]
   db58c:	2b00      	cmp	r3, #0
   db58e:	d06c      	beq.n	db66a <_strtod_r+0x842>
   db590:	4621      	mov	r1, r4
   db592:	2201      	movs	r2, #1
   db594:	9802      	ldr	r0, [sp, #8]
   db596:	f001 fb3b 	bl	dcc10 <__lshift>
   db59a:	4629      	mov	r1, r5
   db59c:	4604      	mov	r4, r0
   db59e:	f001 fb88 	bl	dccb2 <__mcmp>
   db5a2:	2800      	cmp	r0, #0
   db5a4:	f340 81e4 	ble.w	db970 <_strtod_r+0xb48>
   db5a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db5ac:	9a03      	ldr	r2, [sp, #12]
   db5ae:	0d1b      	lsrs	r3, r3, #20
   db5b0:	051b      	lsls	r3, r3, #20
   db5b2:	2a00      	cmp	r2, #0
   db5b4:	f000 808c 	beq.w	db6d0 <_strtod_r+0x8a8>
   db5b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db5bc:	f300 8088 	bgt.w	db6d0 <_strtod_r+0x8a8>
   db5c0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   db5c4:	f300 81d6 	bgt.w	db974 <_strtod_r+0xb4c>
   db5c8:	9a02      	ldr	r2, [sp, #8]
   db5ca:	2322      	movs	r3, #34	; 0x22
   db5cc:	f04f 0a00 	mov.w	sl, #0
   db5d0:	f04f 0b00 	mov.w	fp, #0
   db5d4:	6013      	str	r3, [r2, #0]
   db5d6:	9b05      	ldr	r3, [sp, #20]
   db5d8:	2b00      	cmp	r3, #0
   db5da:	f040 81dc 	bne.w	db996 <_strtod_r+0xb6e>
   db5de:	e1ee      	b.n	db9be <_strtod_r+0xb96>
   db5e0:	2301      	movs	r3, #1
   db5e2:	2700      	movs	r7, #0
   db5e4:	9306      	str	r3, [sp, #24]
   db5e6:	e784      	b.n	db4f2 <_strtod_r+0x6ca>
   db5e8:	4629      	mov	r1, r5
   db5ea:	461a      	mov	r2, r3
   db5ec:	9802      	ldr	r0, [sp, #8]
   db5ee:	f001 fac1 	bl	dcb74 <__pow5mult>
   db5f2:	4605      	mov	r5, r0
   db5f4:	2800      	cmp	r0, #0
   db5f6:	f43f ae5e 	beq.w	db2b6 <_strtod_r+0x48e>
   db5fa:	4601      	mov	r1, r0
   db5fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db5fe:	9802      	ldr	r0, [sp, #8]
   db600:	f001 fa27 	bl	dca52 <__multiply>
   db604:	9007      	str	r0, [sp, #28]
   db606:	2800      	cmp	r0, #0
   db608:	f43f ae55 	beq.w	db2b6 <_strtod_r+0x48e>
   db60c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db60e:	9802      	ldr	r0, [sp, #8]
   db610:	f001 f939 	bl	dc886 <_Bfree>
   db614:	9b07      	ldr	r3, [sp, #28]
   db616:	9318      	str	r3, [sp, #96]	; 0x60
   db618:	e781      	b.n	db51e <_strtod_r+0x6f6>
   db61a:	464a      	mov	r2, r9
   db61c:	9918      	ldr	r1, [sp, #96]	; 0x60
   db61e:	9802      	ldr	r0, [sp, #8]
   db620:	f001 faf6 	bl	dcc10 <__lshift>
   db624:	9018      	str	r0, [sp, #96]	; 0x60
   db626:	2800      	cmp	r0, #0
   db628:	f47f af7c 	bne.w	db524 <_strtod_r+0x6fc>
   db62c:	e643      	b.n	db2b6 <_strtod_r+0x48e>
   db62e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   db630:	9904      	ldr	r1, [sp, #16]
   db632:	9802      	ldr	r0, [sp, #8]
   db634:	f001 fa9e 	bl	dcb74 <__pow5mult>
   db638:	9004      	str	r0, [sp, #16]
   db63a:	2800      	cmp	r0, #0
   db63c:	f47f af76 	bne.w	db52c <_strtod_r+0x704>
   db640:	e639      	b.n	db2b6 <_strtod_r+0x48e>
   db642:	4632      	mov	r2, r6
   db644:	9904      	ldr	r1, [sp, #16]
   db646:	9802      	ldr	r0, [sp, #8]
   db648:	f001 fae2 	bl	dcc10 <__lshift>
   db64c:	9004      	str	r0, [sp, #16]
   db64e:	2800      	cmp	r0, #0
   db650:	f47f af6f 	bne.w	db532 <_strtod_r+0x70a>
   db654:	e62f      	b.n	db2b6 <_strtod_r+0x48e>
   db656:	4629      	mov	r1, r5
   db658:	4642      	mov	r2, r8
   db65a:	9802      	ldr	r0, [sp, #8]
   db65c:	f001 fad8 	bl	dcc10 <__lshift>
   db660:	4605      	mov	r5, r0
   db662:	2800      	cmp	r0, #0
   db664:	f47f af69 	bne.w	db53a <_strtod_r+0x712>
   db668:	e625      	b.n	db2b6 <_strtod_r+0x48e>
   db66a:	6923      	ldr	r3, [r4, #16]
   db66c:	2b01      	cmp	r3, #1
   db66e:	dc8f      	bgt.n	db590 <_strtod_r+0x768>
   db670:	e17e      	b.n	db970 <_strtod_r+0xb48>
   db672:	d161      	bne.n	db738 <_strtod_r+0x910>
   db674:	9a07      	ldr	r2, [sp, #28]
   db676:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db67a:	b322      	cbz	r2, db6c6 <_strtod_r+0x89e>
   db67c:	4946      	ldr	r1, [pc, #280]	; (db798 <_strtod_r+0x970>)
   db67e:	428b      	cmp	r3, r1
   db680:	465a      	mov	r2, fp
   db682:	d12e      	bne.n	db6e2 <_strtod_r+0x8ba>
   db684:	9b03      	ldr	r3, [sp, #12]
   db686:	4651      	mov	r1, sl
   db688:	b163      	cbz	r3, db6a4 <_strtod_r+0x87c>
   db68a:	4b44      	ldr	r3, [pc, #272]	; (db79c <_strtod_r+0x974>)
   db68c:	4013      	ands	r3, r2
   db68e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db692:	d807      	bhi.n	db6a4 <_strtod_r+0x87c>
   db694:	0d1b      	lsrs	r3, r3, #20
   db696:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db69a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db69e:	fa00 f303 	lsl.w	r3, r0, r3
   db6a2:	e001      	b.n	db6a8 <_strtod_r+0x880>
   db6a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db6a8:	428b      	cmp	r3, r1
   db6aa:	d11a      	bne.n	db6e2 <_strtod_r+0x8ba>
   db6ac:	493c      	ldr	r1, [pc, #240]	; (db7a0 <_strtod_r+0x978>)
   db6ae:	428a      	cmp	r2, r1
   db6b0:	d102      	bne.n	db6b8 <_strtod_r+0x890>
   db6b2:	3301      	adds	r3, #1
   db6b4:	f43f adff 	beq.w	db2b6 <_strtod_r+0x48e>
   db6b8:	4b38      	ldr	r3, [pc, #224]	; (db79c <_strtod_r+0x974>)
   db6ba:	4013      	ands	r3, r2
   db6bc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db6c0:	f04f 0a00 	mov.w	sl, #0
   db6c4:	e154      	b.n	db970 <_strtod_r+0xb48>
   db6c6:	b963      	cbnz	r3, db6e2 <_strtod_r+0x8ba>
   db6c8:	f1ba 0f00 	cmp.w	sl, #0
   db6cc:	d109      	bne.n	db6e2 <_strtod_r+0x8ba>
   db6ce:	e76b      	b.n	db5a8 <_strtod_r+0x780>
   db6d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db6d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db6d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db6dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db6e0:	e146      	b.n	db970 <_strtod_r+0xb48>
   db6e2:	b117      	cbz	r7, db6ea <_strtod_r+0x8c2>
   db6e4:	ea17 0f0b 	tst.w	r7, fp
   db6e8:	e002      	b.n	db6f0 <_strtod_r+0x8c8>
   db6ea:	9b06      	ldr	r3, [sp, #24]
   db6ec:	ea13 0f0a 	tst.w	r3, sl
   db6f0:	f000 813e 	beq.w	db970 <_strtod_r+0xb48>
   db6f4:	9b07      	ldr	r3, [sp, #28]
   db6f6:	9a03      	ldr	r2, [sp, #12]
   db6f8:	4650      	mov	r0, sl
   db6fa:	4659      	mov	r1, fp
   db6fc:	b153      	cbz	r3, db714 <_strtod_r+0x8ec>
   db6fe:	f7ff fb75 	bl	dadec <sulp>
   db702:	4602      	mov	r2, r0
   db704:	460b      	mov	r3, r1
   db706:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db70a:	f7fd fc85 	bl	d9018 <__adddf3>
   db70e:	4682      	mov	sl, r0
   db710:	468b      	mov	fp, r1
   db712:	e12d      	b.n	db970 <_strtod_r+0xb48>
   db714:	f7ff fb6a 	bl	dadec <sulp>
   db718:	4602      	mov	r2, r0
   db71a:	460b      	mov	r3, r1
   db71c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   db720:	f7fd fc78 	bl	d9014 <__aeabi_dsub>
   db724:	2200      	movs	r2, #0
   db726:	2300      	movs	r3, #0
   db728:	4682      	mov	sl, r0
   db72a:	468b      	mov	fp, r1
   db72c:	f7fe f88e 	bl	d984c <__aeabi_dcmpeq>
   db730:	2800      	cmp	r0, #0
   db732:	f47f af49 	bne.w	db5c8 <_strtod_r+0x7a0>
   db736:	e11b      	b.n	db970 <_strtod_r+0xb48>
   db738:	4629      	mov	r1, r5
   db73a:	4620      	mov	r0, r4
   db73c:	f001 fbf7 	bl	dcf2e <__ratio>
   db740:	ec57 6b10 	vmov	r6, r7, d0
   db744:	2200      	movs	r2, #0
   db746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db74a:	ee10 0a10 	vmov	r0, s0
   db74e:	4639      	mov	r1, r7
   db750:	f7fe f890 	bl	d9874 <__aeabi_dcmple>
   db754:	2800      	cmp	r0, #0
   db756:	d042      	beq.n	db7de <_strtod_r+0x9b6>
   db758:	9b07      	ldr	r3, [sp, #28]
   db75a:	b123      	cbz	r3, db766 <_strtod_r+0x93e>
   db75c:	f04f 0800 	mov.w	r8, #0
   db760:	f8df 9040 	ldr.w	r9, [pc, #64]	; db7a4 <_strtod_r+0x97c>
   db764:	e011      	b.n	db78a <_strtod_r+0x962>
   db766:	f1ba 0f00 	cmp.w	sl, #0
   db76a:	d103      	bne.n	db774 <_strtod_r+0x94c>
   db76c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db770:	b93b      	cbnz	r3, db782 <_strtod_r+0x95a>
   db772:	e01b      	b.n	db7ac <_strtod_r+0x984>
   db774:	f1ba 0f01 	cmp.w	sl, #1
   db778:	d103      	bne.n	db782 <_strtod_r+0x95a>
   db77a:	f1bb 0f00 	cmp.w	fp, #0
   db77e:	f43f af23 	beq.w	db5c8 <_strtod_r+0x7a0>
   db782:	f8df 9024 	ldr.w	r9, [pc, #36]	; db7a8 <_strtod_r+0x980>
   db786:	f04f 0800 	mov.w	r8, #0
   db78a:	2600      	movs	r6, #0
   db78c:	4f05      	ldr	r7, [pc, #20]	; (db7a4 <_strtod_r+0x97c>)
   db78e:	e039      	b.n	db804 <_strtod_r+0x9dc>
   db790:	fffffc02 	.word	0xfffffc02
   db794:	fffffbe2 	.word	0xfffffbe2
   db798:	000fffff 	.word	0x000fffff
   db79c:	7ff00000 	.word	0x7ff00000
   db7a0:	7fefffff 	.word	0x7fefffff
   db7a4:	3ff00000 	.word	0x3ff00000
   db7a8:	bff00000 	.word	0xbff00000
   db7ac:	2200      	movs	r2, #0
   db7ae:	4b98      	ldr	r3, [pc, #608]	; (dba10 <_strtod_r+0xbe8>)
   db7b0:	4630      	mov	r0, r6
   db7b2:	4639      	mov	r1, r7
   db7b4:	f7fe f854 	bl	d9860 <__aeabi_dcmplt>
   db7b8:	b940      	cbnz	r0, db7cc <_strtod_r+0x9a4>
   db7ba:	4630      	mov	r0, r6
   db7bc:	4639      	mov	r1, r7
   db7be:	2200      	movs	r2, #0
   db7c0:	4b94      	ldr	r3, [pc, #592]	; (dba14 <_strtod_r+0xbec>)
   db7c2:	f7fd fddb 	bl	d937c <__aeabi_dmul>
   db7c6:	4606      	mov	r6, r0
   db7c8:	460f      	mov	r7, r1
   db7ca:	e001      	b.n	db7d0 <_strtod_r+0x9a8>
   db7cc:	4f91      	ldr	r7, [pc, #580]	; (dba14 <_strtod_r+0xbec>)
   db7ce:	2600      	movs	r6, #0
   db7d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   db7d4:	9614      	str	r6, [sp, #80]	; 0x50
   db7d6:	9315      	str	r3, [sp, #84]	; 0x54
   db7d8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   db7dc:	e012      	b.n	db804 <_strtod_r+0x9dc>
   db7de:	4b8d      	ldr	r3, [pc, #564]	; (dba14 <_strtod_r+0xbec>)
   db7e0:	4630      	mov	r0, r6
   db7e2:	4639      	mov	r1, r7
   db7e4:	2200      	movs	r2, #0
   db7e6:	f7fd fdc9 	bl	d937c <__aeabi_dmul>
   db7ea:	9b07      	ldr	r3, [sp, #28]
   db7ec:	4606      	mov	r6, r0
   db7ee:	460f      	mov	r7, r1
   db7f0:	b923      	cbnz	r3, db7fc <_strtod_r+0x9d4>
   db7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db7f6:	900e      	str	r0, [sp, #56]	; 0x38
   db7f8:	930f      	str	r3, [sp, #60]	; 0x3c
   db7fa:	e001      	b.n	db800 <_strtod_r+0x9d8>
   db7fc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   db800:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   db804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db808:	0d1b      	lsrs	r3, r3, #20
   db80a:	051b      	lsls	r3, r3, #20
   db80c:	9306      	str	r3, [sp, #24]
   db80e:	9a06      	ldr	r2, [sp, #24]
   db810:	4b81      	ldr	r3, [pc, #516]	; (dba18 <_strtod_r+0xbf0>)
   db812:	429a      	cmp	r2, r3
   db814:	d12b      	bne.n	db86e <_strtod_r+0xa46>
   db816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db81a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db81e:	ec4b ab10 	vmov	d0, sl, fp
   db822:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   db826:	f001 fabf 	bl	dcda8 <__ulp>
   db82a:	4640      	mov	r0, r8
   db82c:	ec53 2b10 	vmov	r2, r3, d0
   db830:	4649      	mov	r1, r9
   db832:	f7fd fda3 	bl	d937c <__aeabi_dmul>
   db836:	4652      	mov	r2, sl
   db838:	465b      	mov	r3, fp
   db83a:	f7fd fbed 	bl	d9018 <__adddf3>
   db83e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   db842:	0d1b      	lsrs	r3, r3, #20
   db844:	4a75      	ldr	r2, [pc, #468]	; (dba1c <_strtod_r+0xbf4>)
   db846:	051b      	lsls	r3, r3, #20
   db848:	4293      	cmp	r3, r2
   db84a:	4682      	mov	sl, r0
   db84c:	d90c      	bls.n	db868 <_strtod_r+0xa40>
   db84e:	4b74      	ldr	r3, [pc, #464]	; (dba20 <_strtod_r+0xbf8>)
   db850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db852:	429a      	cmp	r2, r3
   db854:	d103      	bne.n	db85e <_strtod_r+0xa36>
   db856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db858:	3301      	adds	r3, #1
   db85a:	f43f ad2c 	beq.w	db2b6 <_strtod_r+0x48e>
   db85e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; dba20 <_strtod_r+0xbf8>
   db862:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db866:	e072      	b.n	db94e <_strtod_r+0xb26>
   db868:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   db86c:	e038      	b.n	db8e0 <_strtod_r+0xab8>
   db86e:	9b03      	ldr	r3, [sp, #12]
   db870:	b333      	cbz	r3, db8c0 <_strtod_r+0xa98>
   db872:	9b06      	ldr	r3, [sp, #24]
   db874:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db878:	d822      	bhi.n	db8c0 <_strtod_r+0xa98>
   db87a:	a35d      	add	r3, pc, #372	; (adr r3, db9f0 <_strtod_r+0xbc8>)
   db87c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db880:	4630      	mov	r0, r6
   db882:	4639      	mov	r1, r7
   db884:	f7fd fff6 	bl	d9874 <__aeabi_dcmple>
   db888:	b1a8      	cbz	r0, db8b6 <_strtod_r+0xa8e>
   db88a:	4639      	mov	r1, r7
   db88c:	4630      	mov	r0, r6
   db88e:	f7fe f84d 	bl	d992c <__aeabi_d2uiz>
   db892:	2800      	cmp	r0, #0
   db894:	bf08      	it	eq
   db896:	2001      	moveq	r0, #1
   db898:	f7fd fcfa 	bl	d9290 <__aeabi_ui2d>
   db89c:	9b07      	ldr	r3, [sp, #28]
   db89e:	4606      	mov	r6, r0
   db8a0:	460f      	mov	r7, r1
   db8a2:	b923      	cbnz	r3, db8ae <_strtod_r+0xa86>
   db8a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db8a8:	9010      	str	r0, [sp, #64]	; 0x40
   db8aa:	9311      	str	r3, [sp, #68]	; 0x44
   db8ac:	e001      	b.n	db8b2 <_strtod_r+0xa8a>
   db8ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   db8b2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   db8b6:	9a06      	ldr	r2, [sp, #24]
   db8b8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   db8bc:	ebc2 0903 	rsb	r9, r2, r3
   db8c0:	ed9d 0b08 	vldr	d0, [sp, #32]
   db8c4:	f001 fa70 	bl	dcda8 <__ulp>
   db8c8:	4640      	mov	r0, r8
   db8ca:	ec53 2b10 	vmov	r2, r3, d0
   db8ce:	4649      	mov	r1, r9
   db8d0:	f7fd fd54 	bl	d937c <__aeabi_dmul>
   db8d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   db8d8:	f7fd fb9e 	bl	d9018 <__adddf3>
   db8dc:	4682      	mov	sl, r0
   db8de:	468b      	mov	fp, r1
   db8e0:	9b03      	ldr	r3, [sp, #12]
   db8e2:	bba3      	cbnz	r3, db94e <_strtod_r+0xb26>
   db8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db8e8:	0d1b      	lsrs	r3, r3, #20
   db8ea:	9a06      	ldr	r2, [sp, #24]
   db8ec:	051b      	lsls	r3, r3, #20
   db8ee:	429a      	cmp	r2, r3
   db8f0:	46d8      	mov	r8, fp
   db8f2:	d12c      	bne.n	db94e <_strtod_r+0xb26>
   db8f4:	4639      	mov	r1, r7
   db8f6:	4630      	mov	r0, r6
   db8f8:	f7fd fff0 	bl	d98dc <__aeabi_d2iz>
   db8fc:	f7fd fcd8 	bl	d92b0 <__aeabi_i2d>
   db900:	460b      	mov	r3, r1
   db902:	4602      	mov	r2, r0
   db904:	4639      	mov	r1, r7
   db906:	4630      	mov	r0, r6
   db908:	f7fd fb84 	bl	d9014 <__aeabi_dsub>
   db90c:	9b07      	ldr	r3, [sp, #28]
   db90e:	4606      	mov	r6, r0
   db910:	460f      	mov	r7, r1
   db912:	b92b      	cbnz	r3, db920 <_strtod_r+0xaf8>
   db914:	f1ba 0f00 	cmp.w	sl, #0
   db918:	d102      	bne.n	db920 <_strtod_r+0xaf8>
   db91a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db91e:	b183      	cbz	r3, db942 <_strtod_r+0xb1a>
   db920:	a335      	add	r3, pc, #212	; (adr r3, db9f8 <_strtod_r+0xbd0>)
   db922:	e9d3 2300 	ldrd	r2, r3, [r3]
   db926:	4630      	mov	r0, r6
   db928:	4639      	mov	r1, r7
   db92a:	f7fd ff99 	bl	d9860 <__aeabi_dcmplt>
   db92e:	2800      	cmp	r0, #0
   db930:	d131      	bne.n	db996 <_strtod_r+0xb6e>
   db932:	a333      	add	r3, pc, #204	; (adr r3, dba00 <_strtod_r+0xbd8>)
   db934:	e9d3 2300 	ldrd	r2, r3, [r3]
   db938:	4630      	mov	r0, r6
   db93a:	4639      	mov	r1, r7
   db93c:	f7fd ffae 	bl	d989c <__aeabi_dcmpgt>
   db940:	e004      	b.n	db94c <_strtod_r+0xb24>
   db942:	a331      	add	r3, pc, #196	; (adr r3, dba08 <_strtod_r+0xbe0>)
   db944:	e9d3 2300 	ldrd	r2, r3, [r3]
   db948:	f7fd ff8a 	bl	d9860 <__aeabi_dcmplt>
   db94c:	bb18      	cbnz	r0, db996 <_strtod_r+0xb6e>
   db94e:	9918      	ldr	r1, [sp, #96]	; 0x60
   db950:	9802      	ldr	r0, [sp, #8]
   db952:	f000 ff98 	bl	dc886 <_Bfree>
   db956:	9904      	ldr	r1, [sp, #16]
   db958:	9802      	ldr	r0, [sp, #8]
   db95a:	f000 ff94 	bl	dc886 <_Bfree>
   db95e:	4629      	mov	r1, r5
   db960:	9802      	ldr	r0, [sp, #8]
   db962:	f000 ff90 	bl	dc886 <_Bfree>
   db966:	4621      	mov	r1, r4
   db968:	9802      	ldr	r0, [sp, #8]
   db96a:	f000 ff8c 	bl	dc886 <_Bfree>
   db96e:	e56d      	b.n	db44c <_strtod_r+0x624>
   db970:	9b03      	ldr	r3, [sp, #12]
   db972:	b183      	cbz	r3, db996 <_strtod_r+0xb6e>
   db974:	4b2b      	ldr	r3, [pc, #172]	; (dba24 <_strtod_r+0xbfc>)
   db976:	930b      	str	r3, [sp, #44]	; 0x2c
   db978:	2300      	movs	r3, #0
   db97a:	930a      	str	r3, [sp, #40]	; 0x28
   db97c:	4650      	mov	r0, sl
   db97e:	4659      	mov	r1, fp
   db980:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db984:	f7fd fcfa 	bl	d937c <__aeabi_dmul>
   db988:	4682      	mov	sl, r0
   db98a:	468b      	mov	fp, r1
   db98c:	b919      	cbnz	r1, db996 <_strtod_r+0xb6e>
   db98e:	b910      	cbnz	r0, db996 <_strtod_r+0xb6e>
   db990:	9a02      	ldr	r2, [sp, #8]
   db992:	2322      	movs	r3, #34	; 0x22
   db994:	6013      	str	r3, [r2, #0]
   db996:	9918      	ldr	r1, [sp, #96]	; 0x60
   db998:	9802      	ldr	r0, [sp, #8]
   db99a:	f000 ff74 	bl	dc886 <_Bfree>
   db99e:	9904      	ldr	r1, [sp, #16]
   db9a0:	9802      	ldr	r0, [sp, #8]
   db9a2:	f000 ff70 	bl	dc886 <_Bfree>
   db9a6:	4629      	mov	r1, r5
   db9a8:	9802      	ldr	r0, [sp, #8]
   db9aa:	f000 ff6c 	bl	dc886 <_Bfree>
   db9ae:	9905      	ldr	r1, [sp, #20]
   db9b0:	9802      	ldr	r0, [sp, #8]
   db9b2:	f000 ff68 	bl	dc886 <_Bfree>
   db9b6:	4621      	mov	r1, r4
   db9b8:	9802      	ldr	r0, [sp, #8]
   db9ba:	f000 ff64 	bl	dc886 <_Bfree>
   db9be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db9c0:	b113      	cbz	r3, db9c8 <_strtod_r+0xba0>
   db9c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   db9c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db9c6:	6013      	str	r3, [r2, #0]
   db9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db9ca:	b11b      	cbz	r3, db9d4 <_strtod_r+0xbac>
   db9cc:	4652      	mov	r2, sl
   db9ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db9d2:	e007      	b.n	db9e4 <_strtod_r+0xbbc>
   db9d4:	4652      	mov	r2, sl
   db9d6:	465b      	mov	r3, fp
   db9d8:	e004      	b.n	db9e4 <_strtod_r+0xbbc>
   db9da:	2500      	movs	r5, #0
   db9dc:	462a      	mov	r2, r5
   db9de:	2101      	movs	r1, #1
   db9e0:	f7ff bb41 	b.w	db066 <_strtod_r+0x23e>
   db9e4:	ec43 2b10 	vmov	d0, r2, r3
   db9e8:	b01d      	add	sp, #116	; 0x74
   db9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db9ee:	bf00      	nop
   db9f0:	ffc00000 	.word	0xffc00000
   db9f4:	41dfffff 	.word	0x41dfffff
   db9f8:	94a03595 	.word	0x94a03595
   db9fc:	3fdfffff 	.word	0x3fdfffff
   dba00:	35afe535 	.word	0x35afe535
   dba04:	3fe00000 	.word	0x3fe00000
   dba08:	94a03595 	.word	0x94a03595
   dba0c:	3fcfffff 	.word	0x3fcfffff
   dba10:	3ff00000 	.word	0x3ff00000
   dba14:	3fe00000 	.word	0x3fe00000
   dba18:	7fe00000 	.word	0x7fe00000
   dba1c:	7c9fffff 	.word	0x7c9fffff
   dba20:	7fefffff 	.word	0x7fefffff
   dba24:	39500000 	.word	0x39500000

000dba28 <strtof>:
   dba28:	b538      	push	{r3, r4, r5, lr}
   dba2a:	4b0e      	ldr	r3, [pc, #56]	; (dba64 <strtof+0x3c>)
   dba2c:	460a      	mov	r2, r1
   dba2e:	4601      	mov	r1, r0
   dba30:	6818      	ldr	r0, [r3, #0]
   dba32:	f7ff f9f9 	bl	dae28 <_strtod_r>
   dba36:	ec55 4b10 	vmov	r4, r5, d0
   dba3a:	ee10 2a10 	vmov	r2, s0
   dba3e:	462b      	mov	r3, r5
   dba40:	ee10 0a10 	vmov	r0, s0
   dba44:	4629      	mov	r1, r5
   dba46:	f7fd ff33 	bl	d98b0 <__aeabi_dcmpun>
   dba4a:	b120      	cbz	r0, dba56 <strtof+0x2e>
   dba4c:	2000      	movs	r0, #0
   dba4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dba52:	f001 bae1 	b.w	dd018 <nanf>
   dba56:	4620      	mov	r0, r4
   dba58:	4629      	mov	r1, r5
   dba5a:	f7fd ff87 	bl	d996c <__aeabi_d2f>
   dba5e:	ee00 0a10 	vmov	s0, r0
   dba62:	bd38      	pop	{r3, r4, r5, pc}
   dba64:	2003e000 	.word	0x2003e000

000dba68 <_strtol_r>:
   dba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba6c:	4680      	mov	r8, r0
   dba6e:	4840      	ldr	r0, [pc, #256]	; (dbb70 <_strtol_r+0x108>)
   dba70:	f8d0 9000 	ldr.w	r9, [r0]
   dba74:	460f      	mov	r7, r1
   dba76:	463d      	mov	r5, r7
   dba78:	f815 4b01 	ldrb.w	r4, [r5], #1
   dba7c:	eb09 0004 	add.w	r0, r9, r4
   dba80:	7840      	ldrb	r0, [r0, #1]
   dba82:	f000 0008 	and.w	r0, r0, #8
   dba86:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dba8a:	b108      	cbz	r0, dba90 <_strtol_r+0x28>
   dba8c:	462f      	mov	r7, r5
   dba8e:	e7f2      	b.n	dba76 <_strtol_r+0xe>
   dba90:	2c2d      	cmp	r4, #45	; 0x2d
   dba92:	d103      	bne.n	dba9c <_strtol_r+0x34>
   dba94:	1cbd      	adds	r5, r7, #2
   dba96:	787c      	ldrb	r4, [r7, #1]
   dba98:	2601      	movs	r6, #1
   dba9a:	e003      	b.n	dbaa4 <_strtol_r+0x3c>
   dba9c:	2c2b      	cmp	r4, #43	; 0x2b
   dba9e:	bf04      	itt	eq
   dbaa0:	787c      	ldrbeq	r4, [r7, #1]
   dbaa2:	1cbd      	addeq	r5, r7, #2
   dbaa4:	b113      	cbz	r3, dbaac <_strtol_r+0x44>
   dbaa6:	2b10      	cmp	r3, #16
   dbaa8:	d10a      	bne.n	dbac0 <_strtol_r+0x58>
   dbaaa:	e05b      	b.n	dbb64 <_strtol_r+0xfc>
   dbaac:	2c30      	cmp	r4, #48	; 0x30
   dbaae:	d157      	bne.n	dbb60 <_strtol_r+0xf8>
   dbab0:	7828      	ldrb	r0, [r5, #0]
   dbab2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbab6:	2858      	cmp	r0, #88	; 0x58
   dbab8:	d14d      	bne.n	dbb56 <_strtol_r+0xee>
   dbaba:	786c      	ldrb	r4, [r5, #1]
   dbabc:	2310      	movs	r3, #16
   dbabe:	3502      	adds	r5, #2
   dbac0:	2e00      	cmp	r6, #0
   dbac2:	bf14      	ite	ne
   dbac4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dbac8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dbacc:	2700      	movs	r7, #0
   dbace:	fbbc faf3 	udiv	sl, ip, r3
   dbad2:	4638      	mov	r0, r7
   dbad4:	fb03 cc1a 	mls	ip, r3, sl, ip
   dbad8:	eb09 0e04 	add.w	lr, r9, r4
   dbadc:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbae0:	f01e 0f04 	tst.w	lr, #4
   dbae4:	d001      	beq.n	dbaea <_strtol_r+0x82>
   dbae6:	3c30      	subs	r4, #48	; 0x30
   dbae8:	e00b      	b.n	dbb02 <_strtol_r+0x9a>
   dbaea:	f01e 0e03 	ands.w	lr, lr, #3
   dbaee:	d01b      	beq.n	dbb28 <_strtol_r+0xc0>
   dbaf0:	f1be 0f01 	cmp.w	lr, #1
   dbaf4:	bf0c      	ite	eq
   dbaf6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbafa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbafe:	ebce 0404 	rsb	r4, lr, r4
   dbb02:	42a3      	cmp	r3, r4
   dbb04:	dd10      	ble.n	dbb28 <_strtol_r+0xc0>
   dbb06:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dbb0a:	d00a      	beq.n	dbb22 <_strtol_r+0xba>
   dbb0c:	4550      	cmp	r0, sl
   dbb0e:	d806      	bhi.n	dbb1e <_strtol_r+0xb6>
   dbb10:	d101      	bne.n	dbb16 <_strtol_r+0xae>
   dbb12:	4564      	cmp	r4, ip
   dbb14:	dc03      	bgt.n	dbb1e <_strtol_r+0xb6>
   dbb16:	fb03 4000 	mla	r0, r3, r0, r4
   dbb1a:	2701      	movs	r7, #1
   dbb1c:	e001      	b.n	dbb22 <_strtol_r+0xba>
   dbb1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dbb22:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb26:	e7d7      	b.n	dbad8 <_strtol_r+0x70>
   dbb28:	1c7b      	adds	r3, r7, #1
   dbb2a:	d10c      	bne.n	dbb46 <_strtol_r+0xde>
   dbb2c:	2e00      	cmp	r6, #0
   dbb2e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dbb32:	bf14      	ite	ne
   dbb34:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dbb38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbb3c:	f8c8 3000 	str.w	r3, [r8]
   dbb40:	b92a      	cbnz	r2, dbb4e <_strtol_r+0xe6>
   dbb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb46:	b106      	cbz	r6, dbb4a <_strtol_r+0xe2>
   dbb48:	4240      	negs	r0, r0
   dbb4a:	b172      	cbz	r2, dbb6a <_strtol_r+0x102>
   dbb4c:	b107      	cbz	r7, dbb50 <_strtol_r+0xe8>
   dbb4e:	1e69      	subs	r1, r5, #1
   dbb50:	6011      	str	r1, [r2, #0]
   dbb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb56:	2430      	movs	r4, #48	; 0x30
   dbb58:	2b00      	cmp	r3, #0
   dbb5a:	d1b1      	bne.n	dbac0 <_strtol_r+0x58>
   dbb5c:	2308      	movs	r3, #8
   dbb5e:	e7af      	b.n	dbac0 <_strtol_r+0x58>
   dbb60:	230a      	movs	r3, #10
   dbb62:	e7ad      	b.n	dbac0 <_strtol_r+0x58>
   dbb64:	2c30      	cmp	r4, #48	; 0x30
   dbb66:	d0a3      	beq.n	dbab0 <_strtol_r+0x48>
   dbb68:	e7aa      	b.n	dbac0 <_strtol_r+0x58>
   dbb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb6e:	bf00      	nop
   dbb70:	2003df9c 	.word	0x2003df9c

000dbb74 <strtol>:
   dbb74:	4613      	mov	r3, r2
   dbb76:	460a      	mov	r2, r1
   dbb78:	4601      	mov	r1, r0
   dbb7a:	4802      	ldr	r0, [pc, #8]	; (dbb84 <strtol+0x10>)
   dbb7c:	6800      	ldr	r0, [r0, #0]
   dbb7e:	f7ff bf73 	b.w	dba68 <_strtol_r>
   dbb82:	bf00      	nop
   dbb84:	2003e000 	.word	0x2003e000

000dbb88 <_strtoul_r>:
   dbb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbb8c:	4680      	mov	r8, r0
   dbb8e:	483c      	ldr	r0, [pc, #240]	; (dbc80 <_strtoul_r+0xf8>)
   dbb90:	f8d0 9000 	ldr.w	r9, [r0]
   dbb94:	460e      	mov	r6, r1
   dbb96:	4635      	mov	r5, r6
   dbb98:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbb9c:	eb09 0004 	add.w	r0, r9, r4
   dbba0:	7840      	ldrb	r0, [r0, #1]
   dbba2:	f000 0008 	and.w	r0, r0, #8
   dbba6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dbbaa:	b108      	cbz	r0, dbbb0 <_strtoul_r+0x28>
   dbbac:	462e      	mov	r6, r5
   dbbae:	e7f2      	b.n	dbb96 <_strtoul_r+0xe>
   dbbb0:	2c2d      	cmp	r4, #45	; 0x2d
   dbbb2:	d103      	bne.n	dbbbc <_strtoul_r+0x34>
   dbbb4:	1cb5      	adds	r5, r6, #2
   dbbb6:	7874      	ldrb	r4, [r6, #1]
   dbbb8:	2701      	movs	r7, #1
   dbbba:	e003      	b.n	dbbc4 <_strtoul_r+0x3c>
   dbbbc:	2c2b      	cmp	r4, #43	; 0x2b
   dbbbe:	bf04      	itt	eq
   dbbc0:	7874      	ldrbeq	r4, [r6, #1]
   dbbc2:	1cb5      	addeq	r5, r6, #2
   dbbc4:	b113      	cbz	r3, dbbcc <_strtoul_r+0x44>
   dbbc6:	2b10      	cmp	r3, #16
   dbbc8:	d10a      	bne.n	dbbe0 <_strtoul_r+0x58>
   dbbca:	e053      	b.n	dbc74 <_strtoul_r+0xec>
   dbbcc:	2c30      	cmp	r4, #48	; 0x30
   dbbce:	d14f      	bne.n	dbc70 <_strtoul_r+0xe8>
   dbbd0:	7828      	ldrb	r0, [r5, #0]
   dbbd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbbd6:	2858      	cmp	r0, #88	; 0x58
   dbbd8:	d145      	bne.n	dbc66 <_strtoul_r+0xde>
   dbbda:	786c      	ldrb	r4, [r5, #1]
   dbbdc:	2310      	movs	r3, #16
   dbbde:	3502      	adds	r5, #2
   dbbe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dbbe4:	2600      	movs	r6, #0
   dbbe6:	fbbc fcf3 	udiv	ip, ip, r3
   dbbea:	fb03 fa0c 	mul.w	sl, r3, ip
   dbbee:	ea6f 0a0a 	mvn.w	sl, sl
   dbbf2:	4630      	mov	r0, r6
   dbbf4:	eb09 0e04 	add.w	lr, r9, r4
   dbbf8:	f89e e001 	ldrb.w	lr, [lr, #1]
   dbbfc:	f01e 0f04 	tst.w	lr, #4
   dbc00:	d001      	beq.n	dbc06 <_strtoul_r+0x7e>
   dbc02:	3c30      	subs	r4, #48	; 0x30
   dbc04:	e00b      	b.n	dbc1e <_strtoul_r+0x96>
   dbc06:	f01e 0e03 	ands.w	lr, lr, #3
   dbc0a:	d01a      	beq.n	dbc42 <_strtoul_r+0xba>
   dbc0c:	f1be 0f01 	cmp.w	lr, #1
   dbc10:	bf0c      	ite	eq
   dbc12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dbc16:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dbc1a:	ebce 0404 	rsb	r4, lr, r4
   dbc1e:	42a3      	cmp	r3, r4
   dbc20:	dd0f      	ble.n	dbc42 <_strtoul_r+0xba>
   dbc22:	2e00      	cmp	r6, #0
   dbc24:	db08      	blt.n	dbc38 <_strtoul_r+0xb0>
   dbc26:	4560      	cmp	r0, ip
   dbc28:	d806      	bhi.n	dbc38 <_strtoul_r+0xb0>
   dbc2a:	d101      	bne.n	dbc30 <_strtoul_r+0xa8>
   dbc2c:	4554      	cmp	r4, sl
   dbc2e:	dc03      	bgt.n	dbc38 <_strtoul_r+0xb0>
   dbc30:	fb03 4000 	mla	r0, r3, r0, r4
   dbc34:	2601      	movs	r6, #1
   dbc36:	e001      	b.n	dbc3c <_strtoul_r+0xb4>
   dbc38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbc3c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dbc40:	e7d8      	b.n	dbbf4 <_strtoul_r+0x6c>
   dbc42:	2e00      	cmp	r6, #0
   dbc44:	da07      	bge.n	dbc56 <_strtoul_r+0xce>
   dbc46:	2322      	movs	r3, #34	; 0x22
   dbc48:	f8c8 3000 	str.w	r3, [r8]
   dbc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbc50:	b92a      	cbnz	r2, dbc5e <_strtoul_r+0xd6>
   dbc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc56:	b107      	cbz	r7, dbc5a <_strtoul_r+0xd2>
   dbc58:	4240      	negs	r0, r0
   dbc5a:	b172      	cbz	r2, dbc7a <_strtoul_r+0xf2>
   dbc5c:	b106      	cbz	r6, dbc60 <_strtoul_r+0xd8>
   dbc5e:	1e69      	subs	r1, r5, #1
   dbc60:	6011      	str	r1, [r2, #0]
   dbc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc66:	2430      	movs	r4, #48	; 0x30
   dbc68:	2b00      	cmp	r3, #0
   dbc6a:	d1b9      	bne.n	dbbe0 <_strtoul_r+0x58>
   dbc6c:	2308      	movs	r3, #8
   dbc6e:	e7b7      	b.n	dbbe0 <_strtoul_r+0x58>
   dbc70:	230a      	movs	r3, #10
   dbc72:	e7b5      	b.n	dbbe0 <_strtoul_r+0x58>
   dbc74:	2c30      	cmp	r4, #48	; 0x30
   dbc76:	d0ab      	beq.n	dbbd0 <_strtoul_r+0x48>
   dbc78:	e7b2      	b.n	dbbe0 <_strtoul_r+0x58>
   dbc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbc7e:	bf00      	nop
   dbc80:	2003df9c 	.word	0x2003df9c

000dbc84 <strtoul>:
   dbc84:	4613      	mov	r3, r2
   dbc86:	460a      	mov	r2, r1
   dbc88:	4601      	mov	r1, r0
   dbc8a:	4802      	ldr	r0, [pc, #8]	; (dbc94 <strtoul+0x10>)
   dbc8c:	6800      	ldr	r0, [r0, #0]
   dbc8e:	f7ff bf7b 	b.w	dbb88 <_strtoul_r>
   dbc92:	bf00      	nop
   dbc94:	2003e000 	.word	0x2003e000

000dbc98 <__get_current_time_locale>:
   dbc98:	4b04      	ldr	r3, [pc, #16]	; (dbcac <__get_current_time_locale+0x14>)
   dbc9a:	4a05      	ldr	r2, [pc, #20]	; (dbcb0 <__get_current_time_locale+0x18>)
   dbc9c:	6818      	ldr	r0, [r3, #0]
   dbc9e:	4b05      	ldr	r3, [pc, #20]	; (dbcb4 <__get_current_time_locale+0x1c>)
   dbca0:	2800      	cmp	r0, #0
   dbca2:	bf14      	ite	ne
   dbca4:	4610      	movne	r0, r2
   dbca6:	4618      	moveq	r0, r3
   dbca8:	4770      	bx	lr
   dbcaa:	bf00      	nop
   dbcac:	2003e6c8 	.word	0x2003e6c8
   dbcb0:	2003e6cc 	.word	0x2003e6cc
   dbcb4:	000dde18 	.word	0x000dde18

000dbcb8 <__tzcalc_limits>:
   dbcb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbcbc:	4604      	mov	r4, r0
   dbcbe:	f000 fda5 	bl	dc80c <__gettzinfo>
   dbcc2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dbcc6:	429c      	cmp	r4, r3
   dbcc8:	f340 8096 	ble.w	dbdf8 <__tzcalc_limits+0x140>
   dbccc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dbcd0:	18e3      	adds	r3, r4, r3
   dbcd2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dbcd6:	109b      	asrs	r3, r3, #2
   dbcd8:	f240 156d 	movw	r5, #365	; 0x16d
   dbcdc:	fb05 3502 	mla	r5, r5, r2, r3
   dbce0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dbce4:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dbce8:	fb92 f3f3 	sdiv	r3, r2, r3
   dbcec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dbcf0:	442b      	add	r3, r5
   dbcf2:	18a5      	adds	r5, r4, r2
   dbcf4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dbcf8:	fb95 f5f2 	sdiv	r5, r5, r2
   dbcfc:	441d      	add	r5, r3
   dbcfe:	2364      	movs	r3, #100	; 0x64
   dbd00:	fb94 f7f2 	sdiv	r7, r4, r2
   dbd04:	fb94 f6f3 	sdiv	r6, r4, r3
   dbd08:	fb02 4717 	mls	r7, r2, r7, r4
   dbd0c:	fb03 4616 	mls	r6, r3, r6, r4
   dbd10:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dbd14:	fab7 fe87 	clz	lr, r7
   dbd18:	9301      	str	r3, [sp, #4]
   dbd1a:	f004 0303 	and.w	r3, r4, #3
   dbd1e:	6044      	str	r4, [r0, #4]
   dbd20:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dbd24:	4601      	mov	r1, r0
   dbd26:	9300      	str	r3, [sp, #0]
   dbd28:	f04f 0c07 	mov.w	ip, #7
   dbd2c:	7a0b      	ldrb	r3, [r1, #8]
   dbd2e:	2b4a      	cmp	r3, #74	; 0x4a
   dbd30:	d10e      	bne.n	dbd50 <__tzcalc_limits+0x98>
   dbd32:	694b      	ldr	r3, [r1, #20]
   dbd34:	9a00      	ldr	r2, [sp, #0]
   dbd36:	18ec      	adds	r4, r5, r3
   dbd38:	b902      	cbnz	r2, dbd3c <__tzcalc_limits+0x84>
   dbd3a:	b906      	cbnz	r6, dbd3e <__tzcalc_limits+0x86>
   dbd3c:	b927      	cbnz	r7, dbd48 <__tzcalc_limits+0x90>
   dbd3e:	2b3b      	cmp	r3, #59	; 0x3b
   dbd40:	bfd4      	ite	le
   dbd42:	2300      	movle	r3, #0
   dbd44:	2301      	movgt	r3, #1
   dbd46:	e000      	b.n	dbd4a <__tzcalc_limits+0x92>
   dbd48:	2300      	movs	r3, #0
   dbd4a:	4423      	add	r3, r4
   dbd4c:	3b01      	subs	r3, #1
   dbd4e:	e03f      	b.n	dbdd0 <__tzcalc_limits+0x118>
   dbd50:	2b44      	cmp	r3, #68	; 0x44
   dbd52:	d102      	bne.n	dbd5a <__tzcalc_limits+0xa2>
   dbd54:	694b      	ldr	r3, [r1, #20]
   dbd56:	442b      	add	r3, r5
   dbd58:	e03a      	b.n	dbdd0 <__tzcalc_limits+0x118>
   dbd5a:	9b00      	ldr	r3, [sp, #0]
   dbd5c:	b92b      	cbnz	r3, dbd6a <__tzcalc_limits+0xb2>
   dbd5e:	2e00      	cmp	r6, #0
   dbd60:	bf0c      	ite	eq
   dbd62:	46f0      	moveq	r8, lr
   dbd64:	f04f 0801 	movne.w	r8, #1
   dbd68:	e000      	b.n	dbd6c <__tzcalc_limits+0xb4>
   dbd6a:	46f0      	mov	r8, lr
   dbd6c:	4b24      	ldr	r3, [pc, #144]	; (dbe00 <__tzcalc_limits+0x148>)
   dbd6e:	68cc      	ldr	r4, [r1, #12]
   dbd70:	2230      	movs	r2, #48	; 0x30
   dbd72:	fb02 3808 	mla	r8, r2, r8, r3
   dbd76:	f1a8 0a04 	sub.w	sl, r8, #4
   dbd7a:	46a9      	mov	r9, r5
   dbd7c:	2301      	movs	r3, #1
   dbd7e:	42a3      	cmp	r3, r4
   dbd80:	da04      	bge.n	dbd8c <__tzcalc_limits+0xd4>
   dbd82:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dbd86:	3301      	adds	r3, #1
   dbd88:	44d9      	add	r9, fp
   dbd8a:	e7f8      	b.n	dbd7e <__tzcalc_limits+0xc6>
   dbd8c:	f109 0304 	add.w	r3, r9, #4
   dbd90:	fb93 fbfc 	sdiv	fp, r3, ip
   dbd94:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dbd98:	2c01      	cmp	r4, #1
   dbd9a:	ebca 0a03 	rsb	sl, sl, r3
   dbd9e:	694b      	ldr	r3, [r1, #20]
   dbda0:	bfb8      	it	lt
   dbda2:	2401      	movlt	r4, #1
   dbda4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dbda8:	ebb3 0a0a 	subs.w	sl, r3, sl
   dbdac:	690b      	ldr	r3, [r1, #16]
   dbdae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dbdb2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dbdb6:	bf48      	it	mi
   dbdb8:	f10a 0a07 	addmi.w	sl, sl, #7
   dbdbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dbdc0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dbdc4:	4453      	add	r3, sl
   dbdc6:	42a3      	cmp	r3, r4
   dbdc8:	db01      	blt.n	dbdce <__tzcalc_limits+0x116>
   dbdca:	3b07      	subs	r3, #7
   dbdcc:	e7fb      	b.n	dbdc6 <__tzcalc_limits+0x10e>
   dbdce:	444b      	add	r3, r9
   dbdd0:	698c      	ldr	r4, [r1, #24]
   dbdd2:	4a0c      	ldr	r2, [pc, #48]	; (dbe04 <__tzcalc_limits+0x14c>)
   dbdd4:	fb02 4303 	mla	r3, r2, r3, r4
   dbdd8:	6a0c      	ldr	r4, [r1, #32]
   dbdda:	4423      	add	r3, r4
   dbddc:	f841 3f1c 	str.w	r3, [r1, #28]!
   dbde0:	9b01      	ldr	r3, [sp, #4]
   dbde2:	4299      	cmp	r1, r3
   dbde4:	d1a2      	bne.n	dbd2c <__tzcalc_limits+0x74>
   dbde6:	69c3      	ldr	r3, [r0, #28]
   dbde8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dbdea:	4293      	cmp	r3, r2
   dbdec:	bfac      	ite	ge
   dbdee:	2300      	movge	r3, #0
   dbdf0:	2301      	movlt	r3, #1
   dbdf2:	6003      	str	r3, [r0, #0]
   dbdf4:	2001      	movs	r0, #1
   dbdf6:	e000      	b.n	dbdfa <__tzcalc_limits+0x142>
   dbdf8:	2000      	movs	r0, #0
   dbdfa:	b003      	add	sp, #12
   dbdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe00:	000ddbd0 	.word	0x000ddbd0
   dbe04:	00015180 	.word	0x00015180

000dbe08 <__tz_lock>:
   dbe08:	4770      	bx	lr

000dbe0a <__tz_unlock>:
   dbe0a:	4770      	bx	lr

000dbe0c <_tzset_unlocked>:
   dbe0c:	4b01      	ldr	r3, [pc, #4]	; (dbe14 <_tzset_unlocked+0x8>)
   dbe0e:	6818      	ldr	r0, [r3, #0]
   dbe10:	f000 b802 	b.w	dbe18 <_tzset_unlocked_r>
   dbe14:	2003e000 	.word	0x2003e000

000dbe18 <_tzset_unlocked_r>:
   dbe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe1c:	b08d      	sub	sp, #52	; 0x34
   dbe1e:	4607      	mov	r7, r0
   dbe20:	f000 fcf4 	bl	dc80c <__gettzinfo>
   dbe24:	49b0      	ldr	r1, [pc, #704]	; (dc0e8 <_tzset_unlocked_r+0x2d0>)
   dbe26:	4eb1      	ldr	r6, [pc, #708]	; (dc0ec <_tzset_unlocked_r+0x2d4>)
   dbe28:	4604      	mov	r4, r0
   dbe2a:	4638      	mov	r0, r7
   dbe2c:	f000 fce6 	bl	dc7fc <_getenv_r>
   dbe30:	4605      	mov	r5, r0
   dbe32:	b960      	cbnz	r0, dbe4e <_tzset_unlocked_r+0x36>
   dbe34:	4bae      	ldr	r3, [pc, #696]	; (dc0f0 <_tzset_unlocked_r+0x2d8>)
   dbe36:	4aaf      	ldr	r2, [pc, #700]	; (dc0f4 <_tzset_unlocked_r+0x2dc>)
   dbe38:	6018      	str	r0, [r3, #0]
   dbe3a:	4baf      	ldr	r3, [pc, #700]	; (dc0f8 <_tzset_unlocked_r+0x2e0>)
   dbe3c:	6018      	str	r0, [r3, #0]
   dbe3e:	4baf      	ldr	r3, [pc, #700]	; (dc0fc <_tzset_unlocked_r+0x2e4>)
   dbe40:	6830      	ldr	r0, [r6, #0]
   dbe42:	601a      	str	r2, [r3, #0]
   dbe44:	605a      	str	r2, [r3, #4]
   dbe46:	f7fa fff7 	bl	d6e38 <free>
   dbe4a:	6035      	str	r5, [r6, #0]
   dbe4c:	e148      	b.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbe4e:	6831      	ldr	r1, [r6, #0]
   dbe50:	b979      	cbnz	r1, dbe72 <_tzset_unlocked_r+0x5a>
   dbe52:	6830      	ldr	r0, [r6, #0]
   dbe54:	f7fa fff0 	bl	d6e38 <free>
   dbe58:	4628      	mov	r0, r5
   dbe5a:	f7fe ff97 	bl	dad8c <strlen>
   dbe5e:	1c41      	adds	r1, r0, #1
   dbe60:	4638      	mov	r0, r7
   dbe62:	f7fb f821 	bl	d6ea8 <_malloc_r>
   dbe66:	6030      	str	r0, [r6, #0]
   dbe68:	b148      	cbz	r0, dbe7e <_tzset_unlocked_r+0x66>
   dbe6a:	4629      	mov	r1, r5
   dbe6c:	f7fe fa56 	bl	da31c <strcpy>
   dbe70:	e005      	b.n	dbe7e <_tzset_unlocked_r+0x66>
   dbe72:	f7fe fa49 	bl	da308 <strcmp>
   dbe76:	2800      	cmp	r0, #0
   dbe78:	f000 8132 	beq.w	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbe7c:	e7e9      	b.n	dbe52 <_tzset_unlocked_r+0x3a>
   dbe7e:	782b      	ldrb	r3, [r5, #0]
   dbe80:	4a9f      	ldr	r2, [pc, #636]	; (dc100 <_tzset_unlocked_r+0x2e8>)
   dbe82:	49a0      	ldr	r1, [pc, #640]	; (dc104 <_tzset_unlocked_r+0x2ec>)
   dbe84:	2b3a      	cmp	r3, #58	; 0x3a
   dbe86:	bf08      	it	eq
   dbe88:	3501      	addeq	r5, #1
   dbe8a:	ae0a      	add	r6, sp, #40	; 0x28
   dbe8c:	4633      	mov	r3, r6
   dbe8e:	4628      	mov	r0, r5
   dbe90:	f7fa ffea 	bl	d6e68 <siscanf>
   dbe94:	2800      	cmp	r0, #0
   dbe96:	f340 8123 	ble.w	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbe9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbe9c:	18ef      	adds	r7, r5, r3
   dbe9e:	5ceb      	ldrb	r3, [r5, r3]
   dbea0:	2b2d      	cmp	r3, #45	; 0x2d
   dbea2:	d103      	bne.n	dbeac <_tzset_unlocked_r+0x94>
   dbea4:	3701      	adds	r7, #1
   dbea6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dbeaa:	e003      	b.n	dbeb4 <_tzset_unlocked_r+0x9c>
   dbeac:	2b2b      	cmp	r3, #43	; 0x2b
   dbeae:	bf08      	it	eq
   dbeb0:	3701      	addeq	r7, #1
   dbeb2:	2501      	movs	r5, #1
   dbeb4:	f10d 0a20 	add.w	sl, sp, #32
   dbeb8:	f10d 0b1e 	add.w	fp, sp, #30
   dbebc:	f04f 0800 	mov.w	r8, #0
   dbec0:	9603      	str	r6, [sp, #12]
   dbec2:	f8cd a008 	str.w	sl, [sp, #8]
   dbec6:	9601      	str	r6, [sp, #4]
   dbec8:	f8cd b000 	str.w	fp, [sp]
   dbecc:	4633      	mov	r3, r6
   dbece:	aa07      	add	r2, sp, #28
   dbed0:	498d      	ldr	r1, [pc, #564]	; (dc108 <_tzset_unlocked_r+0x2f0>)
   dbed2:	f8ad 801e 	strh.w	r8, [sp, #30]
   dbed6:	4638      	mov	r0, r7
   dbed8:	f8ad 8020 	strh.w	r8, [sp, #32]
   dbedc:	f7fa ffc4 	bl	d6e68 <siscanf>
   dbee0:	4540      	cmp	r0, r8
   dbee2:	f340 80fd 	ble.w	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbee6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbeea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbeee:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc114 <_tzset_unlocked_r+0x2fc>
   dbef2:	213c      	movs	r1, #60	; 0x3c
   dbef4:	fb01 3302 	mla	r3, r1, r2, r3
   dbef8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbefc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbf00:	fb01 3302 	mla	r3, r1, r2, r3
   dbf04:	435d      	muls	r5, r3
   dbf06:	6225      	str	r5, [r4, #32]
   dbf08:	4d7c      	ldr	r5, [pc, #496]	; (dc0fc <_tzset_unlocked_r+0x2e4>)
   dbf0a:	4b7d      	ldr	r3, [pc, #500]	; (dc100 <_tzset_unlocked_r+0x2e8>)
   dbf0c:	602b      	str	r3, [r5, #0]
   dbf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf10:	497c      	ldr	r1, [pc, #496]	; (dc104 <_tzset_unlocked_r+0x2ec>)
   dbf12:	441f      	add	r7, r3
   dbf14:	464a      	mov	r2, r9
   dbf16:	4633      	mov	r3, r6
   dbf18:	4638      	mov	r0, r7
   dbf1a:	f7fa ffa5 	bl	d6e68 <siscanf>
   dbf1e:	4540      	cmp	r0, r8
   dbf20:	dc08      	bgt.n	dbf34 <_tzset_unlocked_r+0x11c>
   dbf22:	682b      	ldr	r3, [r5, #0]
   dbf24:	606b      	str	r3, [r5, #4]
   dbf26:	4b72      	ldr	r3, [pc, #456]	; (dc0f0 <_tzset_unlocked_r+0x2d8>)
   dbf28:	6a22      	ldr	r2, [r4, #32]
   dbf2a:	601a      	str	r2, [r3, #0]
   dbf2c:	4b72      	ldr	r3, [pc, #456]	; (dc0f8 <_tzset_unlocked_r+0x2e0>)
   dbf2e:	f8c3 8000 	str.w	r8, [r3]
   dbf32:	e0d5      	b.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf36:	f8c5 9004 	str.w	r9, [r5, #4]
   dbf3a:	18fd      	adds	r5, r7, r3
   dbf3c:	5cfb      	ldrb	r3, [r7, r3]
   dbf3e:	2b2d      	cmp	r3, #45	; 0x2d
   dbf40:	d103      	bne.n	dbf4a <_tzset_unlocked_r+0x132>
   dbf42:	3501      	adds	r5, #1
   dbf44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dbf48:	e003      	b.n	dbf52 <_tzset_unlocked_r+0x13a>
   dbf4a:	2b2b      	cmp	r3, #43	; 0x2b
   dbf4c:	bf08      	it	eq
   dbf4e:	3501      	addeq	r5, #1
   dbf50:	2701      	movs	r7, #1
   dbf52:	2300      	movs	r3, #0
   dbf54:	f8ad 301c 	strh.w	r3, [sp, #28]
   dbf58:	f8ad 301e 	strh.w	r3, [sp, #30]
   dbf5c:	f8ad 3020 	strh.w	r3, [sp, #32]
   dbf60:	930a      	str	r3, [sp, #40]	; 0x28
   dbf62:	9603      	str	r6, [sp, #12]
   dbf64:	f8cd a008 	str.w	sl, [sp, #8]
   dbf68:	9601      	str	r6, [sp, #4]
   dbf6a:	f8cd b000 	str.w	fp, [sp]
   dbf6e:	4633      	mov	r3, r6
   dbf70:	aa07      	add	r2, sp, #28
   dbf72:	4965      	ldr	r1, [pc, #404]	; (dc108 <_tzset_unlocked_r+0x2f0>)
   dbf74:	4628      	mov	r0, r5
   dbf76:	f7fa ff77 	bl	d6e68 <siscanf>
   dbf7a:	2800      	cmp	r0, #0
   dbf7c:	dc04      	bgt.n	dbf88 <_tzset_unlocked_r+0x170>
   dbf7e:	6a23      	ldr	r3, [r4, #32]
   dbf80:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dbf84:	63e3      	str	r3, [r4, #60]	; 0x3c
   dbf86:	e00e      	b.n	dbfa6 <_tzset_unlocked_r+0x18e>
   dbf88:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dbf8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dbf90:	213c      	movs	r1, #60	; 0x3c
   dbf92:	fb01 3302 	mla	r3, r1, r2, r3
   dbf96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dbf9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dbf9e:	fb01 3302 	mla	r3, r1, r2, r3
   dbfa2:	435f      	muls	r7, r3
   dbfa4:	63e7      	str	r7, [r4, #60]	; 0x3c
   dbfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbfa8:	4627      	mov	r7, r4
   dbfaa:	441d      	add	r5, r3
   dbfac:	f04f 0900 	mov.w	r9, #0
   dbfb0:	782b      	ldrb	r3, [r5, #0]
   dbfb2:	2b2c      	cmp	r3, #44	; 0x2c
   dbfb4:	bf08      	it	eq
   dbfb6:	3501      	addeq	r5, #1
   dbfb8:	f895 8000 	ldrb.w	r8, [r5]
   dbfbc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dbfc0:	d126      	bne.n	dc010 <_tzset_unlocked_r+0x1f8>
   dbfc2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dbfc6:	9302      	str	r3, [sp, #8]
   dbfc8:	ab09      	add	r3, sp, #36	; 0x24
   dbfca:	9300      	str	r3, [sp, #0]
   dbfcc:	9603      	str	r6, [sp, #12]
   dbfce:	9601      	str	r6, [sp, #4]
   dbfd0:	4633      	mov	r3, r6
   dbfd2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dbfd6:	494d      	ldr	r1, [pc, #308]	; (dc10c <_tzset_unlocked_r+0x2f4>)
   dbfd8:	4628      	mov	r0, r5
   dbfda:	f7fa ff45 	bl	d6e68 <siscanf>
   dbfde:	2803      	cmp	r0, #3
   dbfe0:	d17e      	bne.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbfe2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dbfe6:	1e4b      	subs	r3, r1, #1
   dbfe8:	2b0b      	cmp	r3, #11
   dbfea:	d879      	bhi.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbfec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dbff0:	1e53      	subs	r3, r2, #1
   dbff2:	2b04      	cmp	r3, #4
   dbff4:	d874      	bhi.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbff6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dbffa:	2b06      	cmp	r3, #6
   dbffc:	d870      	bhi.n	dc0e0 <_tzset_unlocked_r+0x2c8>
   dbffe:	f887 8008 	strb.w	r8, [r7, #8]
   dc002:	60f9      	str	r1, [r7, #12]
   dc004:	613a      	str	r2, [r7, #16]
   dc006:	617b      	str	r3, [r7, #20]
   dc008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc00a:	eb05 0803 	add.w	r8, r5, r3
   dc00e:	e02a      	b.n	dc066 <_tzset_unlocked_r+0x24e>
   dc010:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc014:	bf06      	itte	eq
   dc016:	3501      	addeq	r5, #1
   dc018:	4643      	moveq	r3, r8
   dc01a:	2344      	movne	r3, #68	; 0x44
   dc01c:	220a      	movs	r2, #10
   dc01e:	a90b      	add	r1, sp, #44	; 0x2c
   dc020:	4628      	mov	r0, r5
   dc022:	9305      	str	r3, [sp, #20]
   dc024:	f7ff fe2e 	bl	dbc84 <strtoul>
   dc028:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc02c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc030:	4545      	cmp	r5, r8
   dc032:	9b05      	ldr	r3, [sp, #20]
   dc034:	d114      	bne.n	dc060 <_tzset_unlocked_r+0x248>
   dc036:	234d      	movs	r3, #77	; 0x4d
   dc038:	f1b9 0f00 	cmp.w	r9, #0
   dc03c:	d107      	bne.n	dc04e <_tzset_unlocked_r+0x236>
   dc03e:	7223      	strb	r3, [r4, #8]
   dc040:	2303      	movs	r3, #3
   dc042:	60e3      	str	r3, [r4, #12]
   dc044:	2302      	movs	r3, #2
   dc046:	6123      	str	r3, [r4, #16]
   dc048:	f8c4 9014 	str.w	r9, [r4, #20]
   dc04c:	e00b      	b.n	dc066 <_tzset_unlocked_r+0x24e>
   dc04e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc052:	230b      	movs	r3, #11
   dc054:	62a3      	str	r3, [r4, #40]	; 0x28
   dc056:	2301      	movs	r3, #1
   dc058:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc05a:	2300      	movs	r3, #0
   dc05c:	6323      	str	r3, [r4, #48]	; 0x30
   dc05e:	e002      	b.n	dc066 <_tzset_unlocked_r+0x24e>
   dc060:	b280      	uxth	r0, r0
   dc062:	723b      	strb	r3, [r7, #8]
   dc064:	6178      	str	r0, [r7, #20]
   dc066:	2302      	movs	r3, #2
   dc068:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc06c:	2300      	movs	r3, #0
   dc06e:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc072:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc076:	930a      	str	r3, [sp, #40]	; 0x28
   dc078:	f898 3000 	ldrb.w	r3, [r8]
   dc07c:	2b2f      	cmp	r3, #47	; 0x2f
   dc07e:	d10b      	bne.n	dc098 <_tzset_unlocked_r+0x280>
   dc080:	9603      	str	r6, [sp, #12]
   dc082:	f8cd a008 	str.w	sl, [sp, #8]
   dc086:	9601      	str	r6, [sp, #4]
   dc088:	f8cd b000 	str.w	fp, [sp]
   dc08c:	4633      	mov	r3, r6
   dc08e:	aa07      	add	r2, sp, #28
   dc090:	491f      	ldr	r1, [pc, #124]	; (dc110 <_tzset_unlocked_r+0x2f8>)
   dc092:	4640      	mov	r0, r8
   dc094:	f7fa fee8 	bl	d6e68 <siscanf>
   dc098:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc09c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc0a0:	213c      	movs	r1, #60	; 0x3c
   dc0a2:	fb01 3302 	mla	r3, r1, r2, r3
   dc0a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc0aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc0ae:	fb01 3302 	mla	r3, r1, r2, r3
   dc0b2:	61bb      	str	r3, [r7, #24]
   dc0b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc0b6:	f109 0901 	add.w	r9, r9, #1
   dc0ba:	f1b9 0f02 	cmp.w	r9, #2
   dc0be:	4445      	add	r5, r8
   dc0c0:	f107 071c 	add.w	r7, r7, #28
   dc0c4:	f47f af74 	bne.w	dbfb0 <_tzset_unlocked_r+0x198>
   dc0c8:	6860      	ldr	r0, [r4, #4]
   dc0ca:	f7ff fdf5 	bl	dbcb8 <__tzcalc_limits>
   dc0ce:	4b08      	ldr	r3, [pc, #32]	; (dc0f0 <_tzset_unlocked_r+0x2d8>)
   dc0d0:	6a22      	ldr	r2, [r4, #32]
   dc0d2:	601a      	str	r2, [r3, #0]
   dc0d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc0d6:	1a9b      	subs	r3, r3, r2
   dc0d8:	4a07      	ldr	r2, [pc, #28]	; (dc0f8 <_tzset_unlocked_r+0x2e0>)
   dc0da:	bf18      	it	ne
   dc0dc:	2301      	movne	r3, #1
   dc0de:	6013      	str	r3, [r2, #0]
   dc0e0:	b00d      	add	sp, #52	; 0x34
   dc0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0e6:	bf00      	nop
   dc0e8:	000ddf14 	.word	0x000ddf14
   dc0ec:	2003e7e0 	.word	0x2003e7e0
   dc0f0:	2003e7e8 	.word	0x2003e7e8
   dc0f4:	000ddf17 	.word	0x000ddf17
   dc0f8:	2003e7e4 	.word	0x2003e7e4
   dc0fc:	2003e03c 	.word	0x2003e03c
   dc100:	2003e7d3 	.word	0x2003e7d3
   dc104:	000ddf1b 	.word	0x000ddf1b
   dc108:	000ddf3e 	.word	0x000ddf3e
   dc10c:	000ddf2a 	.word	0x000ddf2a
   dc110:	000ddf3d 	.word	0x000ddf3d
   dc114:	2003e7c8 	.word	0x2003e7c8

000dc118 <abs>:
   dc118:	2800      	cmp	r0, #0
   dc11a:	bfb8      	it	lt
   dc11c:	4240      	neglt	r0, r0
   dc11e:	4770      	bx	lr

000dc120 <div>:
   dc120:	2900      	cmp	r1, #0
   dc122:	b510      	push	{r4, lr}
   dc124:	fb91 f4f2 	sdiv	r4, r1, r2
   dc128:	fb02 1314 	mls	r3, r2, r4, r1
   dc12c:	db04      	blt.n	dc138 <div+0x18>
   dc12e:	2b00      	cmp	r3, #0
   dc130:	da07      	bge.n	dc142 <div+0x22>
   dc132:	3401      	adds	r4, #1
   dc134:	1a9b      	subs	r3, r3, r2
   dc136:	e004      	b.n	dc142 <div+0x22>
   dc138:	2b00      	cmp	r3, #0
   dc13a:	bfc4      	itt	gt
   dc13c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc140:	189b      	addgt	r3, r3, r2
   dc142:	6004      	str	r4, [r0, #0]
   dc144:	6043      	str	r3, [r0, #4]
   dc146:	bd10      	pop	{r4, pc}

000dc148 <rshift>:
   dc148:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc14a:	6906      	ldr	r6, [r0, #16]
   dc14c:	114b      	asrs	r3, r1, #5
   dc14e:	42b3      	cmp	r3, r6
   dc150:	f100 0514 	add.w	r5, r0, #20
   dc154:	da27      	bge.n	dc1a6 <rshift+0x5e>
   dc156:	f011 011f 	ands.w	r1, r1, #31
   dc15a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   dc15e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   dc162:	d101      	bne.n	dc168 <rshift+0x20>
   dc164:	4629      	mov	r1, r5
   dc166:	e016      	b.n	dc196 <rshift+0x4e>
   dc168:	1d14      	adds	r4, r2, #4
   dc16a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   dc16e:	f1c1 0e20 	rsb	lr, r1, #32
   dc172:	40ca      	lsrs	r2, r1
   dc174:	462b      	mov	r3, r5
   dc176:	42b4      	cmp	r4, r6
   dc178:	d209      	bcs.n	dc18e <rshift+0x46>
   dc17a:	6827      	ldr	r7, [r4, #0]
   dc17c:	fa07 f70e 	lsl.w	r7, r7, lr
   dc180:	433a      	orrs	r2, r7
   dc182:	f843 2b04 	str.w	r2, [r3], #4
   dc186:	f854 2b04 	ldr.w	r2, [r4], #4
   dc18a:	40ca      	lsrs	r2, r1
   dc18c:	e7f3      	b.n	dc176 <rshift+0x2e>
   dc18e:	601a      	str	r2, [r3, #0]
   dc190:	b152      	cbz	r2, dc1a8 <rshift+0x60>
   dc192:	3304      	adds	r3, #4
   dc194:	e008      	b.n	dc1a8 <rshift+0x60>
   dc196:	42b2      	cmp	r2, r6
   dc198:	460b      	mov	r3, r1
   dc19a:	d205      	bcs.n	dc1a8 <rshift+0x60>
   dc19c:	f852 3b04 	ldr.w	r3, [r2], #4
   dc1a0:	f841 3b04 	str.w	r3, [r1], #4
   dc1a4:	e7f7      	b.n	dc196 <rshift+0x4e>
   dc1a6:	462b      	mov	r3, r5
   dc1a8:	1b5b      	subs	r3, r3, r5
   dc1aa:	109b      	asrs	r3, r3, #2
   dc1ac:	6103      	str	r3, [r0, #16]
   dc1ae:	b903      	cbnz	r3, dc1b2 <rshift+0x6a>
   dc1b0:	6143      	str	r3, [r0, #20]
   dc1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc1b4 <__hexdig_fun>:
   dc1b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc1b8:	2b09      	cmp	r3, #9
   dc1ba:	d801      	bhi.n	dc1c0 <__hexdig_fun+0xc>
   dc1bc:	3820      	subs	r0, #32
   dc1be:	e00a      	b.n	dc1d6 <__hexdig_fun+0x22>
   dc1c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc1c4:	2b05      	cmp	r3, #5
   dc1c6:	d801      	bhi.n	dc1cc <__hexdig_fun+0x18>
   dc1c8:	3847      	subs	r0, #71	; 0x47
   dc1ca:	e004      	b.n	dc1d6 <__hexdig_fun+0x22>
   dc1cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc1d0:	2b05      	cmp	r3, #5
   dc1d2:	d802      	bhi.n	dc1da <__hexdig_fun+0x26>
   dc1d4:	3827      	subs	r0, #39	; 0x27
   dc1d6:	b2c0      	uxtb	r0, r0
   dc1d8:	4770      	bx	lr
   dc1da:	2000      	movs	r0, #0
   dc1dc:	4770      	bx	lr

000dc1de <__gethex>:
   dc1de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc1e2:	b08b      	sub	sp, #44	; 0x2c
   dc1e4:	468a      	mov	sl, r1
   dc1e6:	4690      	mov	r8, r2
   dc1e8:	9306      	str	r3, [sp, #24]
   dc1ea:	9002      	str	r0, [sp, #8]
   dc1ec:	f7fd fdfe 	bl	d9dec <_localeconv_r>
   dc1f0:	6803      	ldr	r3, [r0, #0]
   dc1f2:	9303      	str	r3, [sp, #12]
   dc1f4:	4618      	mov	r0, r3
   dc1f6:	f7fe fdc9 	bl	dad8c <strlen>
   dc1fa:	9b03      	ldr	r3, [sp, #12]
   dc1fc:	9001      	str	r0, [sp, #4]
   dc1fe:	4403      	add	r3, r0
   dc200:	f04f 0b00 	mov.w	fp, #0
   dc204:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc208:	9307      	str	r3, [sp, #28]
   dc20a:	f8da 3000 	ldr.w	r3, [sl]
   dc20e:	3302      	adds	r3, #2
   dc210:	461f      	mov	r7, r3
   dc212:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc216:	2830      	cmp	r0, #48	; 0x30
   dc218:	d102      	bne.n	dc220 <__gethex+0x42>
   dc21a:	f10b 0b01 	add.w	fp, fp, #1
   dc21e:	e7f7      	b.n	dc210 <__gethex+0x32>
   dc220:	f7ff ffc8 	bl	dc1b4 <__hexdig_fun>
   dc224:	4604      	mov	r4, r0
   dc226:	b9e0      	cbnz	r0, dc262 <__gethex+0x84>
   dc228:	9a01      	ldr	r2, [sp, #4]
   dc22a:	9903      	ldr	r1, [sp, #12]
   dc22c:	4638      	mov	r0, r7
   dc22e:	f7fe fdb5 	bl	dad9c <strncmp>
   dc232:	2800      	cmp	r0, #0
   dc234:	d134      	bne.n	dc2a0 <__gethex+0xc2>
   dc236:	9b01      	ldr	r3, [sp, #4]
   dc238:	5cf8      	ldrb	r0, [r7, r3]
   dc23a:	18fe      	adds	r6, r7, r3
   dc23c:	f7ff ffba 	bl	dc1b4 <__hexdig_fun>
   dc240:	b380      	cbz	r0, dc2a4 <__gethex+0xc6>
   dc242:	4633      	mov	r3, r6
   dc244:	7818      	ldrb	r0, [r3, #0]
   dc246:	2830      	cmp	r0, #48	; 0x30
   dc248:	461f      	mov	r7, r3
   dc24a:	f103 0301 	add.w	r3, r3, #1
   dc24e:	d0f9      	beq.n	dc244 <__gethex+0x66>
   dc250:	f7ff ffb0 	bl	dc1b4 <__hexdig_fun>
   dc254:	fab0 f580 	clz	r5, r0
   dc258:	096d      	lsrs	r5, r5, #5
   dc25a:	4634      	mov	r4, r6
   dc25c:	f04f 0b01 	mov.w	fp, #1
   dc260:	e001      	b.n	dc266 <__gethex+0x88>
   dc262:	2500      	movs	r5, #0
   dc264:	462c      	mov	r4, r5
   dc266:	463a      	mov	r2, r7
   dc268:	4616      	mov	r6, r2
   dc26a:	3201      	adds	r2, #1
   dc26c:	7830      	ldrb	r0, [r6, #0]
   dc26e:	f7ff ffa1 	bl	dc1b4 <__hexdig_fun>
   dc272:	2800      	cmp	r0, #0
   dc274:	d1f8      	bne.n	dc268 <__gethex+0x8a>
   dc276:	9a01      	ldr	r2, [sp, #4]
   dc278:	9903      	ldr	r1, [sp, #12]
   dc27a:	4630      	mov	r0, r6
   dc27c:	f7fe fd8e 	bl	dad9c <strncmp>
   dc280:	b950      	cbnz	r0, dc298 <__gethex+0xba>
   dc282:	b954      	cbnz	r4, dc29a <__gethex+0xbc>
   dc284:	9b01      	ldr	r3, [sp, #4]
   dc286:	18f4      	adds	r4, r6, r3
   dc288:	4622      	mov	r2, r4
   dc28a:	4616      	mov	r6, r2
   dc28c:	3201      	adds	r2, #1
   dc28e:	7830      	ldrb	r0, [r6, #0]
   dc290:	f7ff ff90 	bl	dc1b4 <__hexdig_fun>
   dc294:	2800      	cmp	r0, #0
   dc296:	d1f8      	bne.n	dc28a <__gethex+0xac>
   dc298:	b134      	cbz	r4, dc2a8 <__gethex+0xca>
   dc29a:	1ba4      	subs	r4, r4, r6
   dc29c:	00a4      	lsls	r4, r4, #2
   dc29e:	e003      	b.n	dc2a8 <__gethex+0xca>
   dc2a0:	463e      	mov	r6, r7
   dc2a2:	e000      	b.n	dc2a6 <__gethex+0xc8>
   dc2a4:	4604      	mov	r4, r0
   dc2a6:	2501      	movs	r5, #1
   dc2a8:	7833      	ldrb	r3, [r6, #0]
   dc2aa:	2b50      	cmp	r3, #80	; 0x50
   dc2ac:	d001      	beq.n	dc2b2 <__gethex+0xd4>
   dc2ae:	2b70      	cmp	r3, #112	; 0x70
   dc2b0:	d12a      	bne.n	dc308 <__gethex+0x12a>
   dc2b2:	7873      	ldrb	r3, [r6, #1]
   dc2b4:	2b2b      	cmp	r3, #43	; 0x2b
   dc2b6:	d008      	beq.n	dc2ca <__gethex+0xec>
   dc2b8:	2b2d      	cmp	r3, #45	; 0x2d
   dc2ba:	d003      	beq.n	dc2c4 <__gethex+0xe6>
   dc2bc:	1c71      	adds	r1, r6, #1
   dc2be:	f04f 0900 	mov.w	r9, #0
   dc2c2:	e005      	b.n	dc2d0 <__gethex+0xf2>
   dc2c4:	f04f 0901 	mov.w	r9, #1
   dc2c8:	e001      	b.n	dc2ce <__gethex+0xf0>
   dc2ca:	f04f 0900 	mov.w	r9, #0
   dc2ce:	1cb1      	adds	r1, r6, #2
   dc2d0:	7808      	ldrb	r0, [r1, #0]
   dc2d2:	f7ff ff6f 	bl	dc1b4 <__hexdig_fun>
   dc2d6:	1e43      	subs	r3, r0, #1
   dc2d8:	b2db      	uxtb	r3, r3
   dc2da:	2b18      	cmp	r3, #24
   dc2dc:	d814      	bhi.n	dc308 <__gethex+0x12a>
   dc2de:	f1a0 0210 	sub.w	r2, r0, #16
   dc2e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc2e6:	f7ff ff65 	bl	dc1b4 <__hexdig_fun>
   dc2ea:	1e43      	subs	r3, r0, #1
   dc2ec:	b2db      	uxtb	r3, r3
   dc2ee:	2b18      	cmp	r3, #24
   dc2f0:	d804      	bhi.n	dc2fc <__gethex+0x11e>
   dc2f2:	230a      	movs	r3, #10
   dc2f4:	fb03 0202 	mla	r2, r3, r2, r0
   dc2f8:	3a10      	subs	r2, #16
   dc2fa:	e7f2      	b.n	dc2e2 <__gethex+0x104>
   dc2fc:	f1b9 0f00 	cmp.w	r9, #0
   dc300:	d000      	beq.n	dc304 <__gethex+0x126>
   dc302:	4252      	negs	r2, r2
   dc304:	4414      	add	r4, r2
   dc306:	e000      	b.n	dc30a <__gethex+0x12c>
   dc308:	4631      	mov	r1, r6
   dc30a:	f8ca 1000 	str.w	r1, [sl]
   dc30e:	b12d      	cbz	r5, dc31c <__gethex+0x13e>
   dc310:	f1bb 0f00 	cmp.w	fp, #0
   dc314:	bf14      	ite	ne
   dc316:	2000      	movne	r0, #0
   dc318:	2006      	moveq	r0, #6
   dc31a:	e17c      	b.n	dc616 <__gethex+0x438>
   dc31c:	1bf3      	subs	r3, r6, r7
   dc31e:	3b01      	subs	r3, #1
   dc320:	4629      	mov	r1, r5
   dc322:	2b07      	cmp	r3, #7
   dc324:	dd02      	ble.n	dc32c <__gethex+0x14e>
   dc326:	3101      	adds	r1, #1
   dc328:	105b      	asrs	r3, r3, #1
   dc32a:	e7fa      	b.n	dc322 <__gethex+0x144>
   dc32c:	9802      	ldr	r0, [sp, #8]
   dc32e:	f000 fa75 	bl	dc81c <_Balloc>
   dc332:	9b01      	ldr	r3, [sp, #4]
   dc334:	f100 0a14 	add.w	sl, r0, #20
   dc338:	f04f 0900 	mov.w	r9, #0
   dc33c:	f1c3 0301 	rsb	r3, r3, #1
   dc340:	4605      	mov	r5, r0
   dc342:	f8cd a010 	str.w	sl, [sp, #16]
   dc346:	46cb      	mov	fp, r9
   dc348:	9308      	str	r3, [sp, #32]
   dc34a:	42b7      	cmp	r7, r6
   dc34c:	d22f      	bcs.n	dc3ae <__gethex+0x1d0>
   dc34e:	1e73      	subs	r3, r6, #1
   dc350:	9305      	str	r3, [sp, #20]
   dc352:	9a07      	ldr	r2, [sp, #28]
   dc354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc358:	4293      	cmp	r3, r2
   dc35a:	d00b      	beq.n	dc374 <__gethex+0x196>
   dc35c:	f1bb 0f20 	cmp.w	fp, #32
   dc360:	d116      	bne.n	dc390 <__gethex+0x1b2>
   dc362:	9b04      	ldr	r3, [sp, #16]
   dc364:	f8c3 9000 	str.w	r9, [r3]
   dc368:	3304      	adds	r3, #4
   dc36a:	f04f 0900 	mov.w	r9, #0
   dc36e:	9304      	str	r3, [sp, #16]
   dc370:	46cb      	mov	fp, r9
   dc372:	e00d      	b.n	dc390 <__gethex+0x1b2>
   dc374:	9b05      	ldr	r3, [sp, #20]
   dc376:	9a08      	ldr	r2, [sp, #32]
   dc378:	4413      	add	r3, r2
   dc37a:	429f      	cmp	r7, r3
   dc37c:	d8ee      	bhi.n	dc35c <__gethex+0x17e>
   dc37e:	4618      	mov	r0, r3
   dc380:	9a01      	ldr	r2, [sp, #4]
   dc382:	9903      	ldr	r1, [sp, #12]
   dc384:	9309      	str	r3, [sp, #36]	; 0x24
   dc386:	f7fe fd09 	bl	dad9c <strncmp>
   dc38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc38c:	b168      	cbz	r0, dc3aa <__gethex+0x1cc>
   dc38e:	e7e5      	b.n	dc35c <__gethex+0x17e>
   dc390:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc394:	f7ff ff0e 	bl	dc1b4 <__hexdig_fun>
   dc398:	f000 000f 	and.w	r0, r0, #15
   dc39c:	fa00 f00b 	lsl.w	r0, r0, fp
   dc3a0:	9b05      	ldr	r3, [sp, #20]
   dc3a2:	ea49 0900 	orr.w	r9, r9, r0
   dc3a6:	f10b 0b04 	add.w	fp, fp, #4
   dc3aa:	461e      	mov	r6, r3
   dc3ac:	e7cd      	b.n	dc34a <__gethex+0x16c>
   dc3ae:	9804      	ldr	r0, [sp, #16]
   dc3b0:	f840 9b04 	str.w	r9, [r0], #4
   dc3b4:	ebca 0000 	rsb	r0, sl, r0
   dc3b8:	1080      	asrs	r0, r0, #2
   dc3ba:	6128      	str	r0, [r5, #16]
   dc3bc:	0147      	lsls	r7, r0, #5
   dc3be:	4648      	mov	r0, r9
   dc3c0:	f000 faf1 	bl	dc9a6 <__hi0bits>
   dc3c4:	f8d8 6000 	ldr.w	r6, [r8]
   dc3c8:	1a38      	subs	r0, r7, r0
   dc3ca:	42b0      	cmp	r0, r6
   dc3cc:	dd26      	ble.n	dc41c <__gethex+0x23e>
   dc3ce:	1b87      	subs	r7, r0, r6
   dc3d0:	4639      	mov	r1, r7
   dc3d2:	4628      	mov	r0, r5
   dc3d4:	f000 fdef 	bl	dcfb6 <__any_on>
   dc3d8:	b1c8      	cbz	r0, dc40e <__gethex+0x230>
   dc3da:	1e7b      	subs	r3, r7, #1
   dc3dc:	1159      	asrs	r1, r3, #5
   dc3de:	f003 021f 	and.w	r2, r3, #31
   dc3e2:	f04f 0901 	mov.w	r9, #1
   dc3e6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   dc3ea:	fa09 f202 	lsl.w	r2, r9, r2
   dc3ee:	420a      	tst	r2, r1
   dc3f0:	d00e      	beq.n	dc410 <__gethex+0x232>
   dc3f2:	454b      	cmp	r3, r9
   dc3f4:	dc02      	bgt.n	dc3fc <__gethex+0x21e>
   dc3f6:	f04f 0902 	mov.w	r9, #2
   dc3fa:	e009      	b.n	dc410 <__gethex+0x232>
   dc3fc:	1eb9      	subs	r1, r7, #2
   dc3fe:	4628      	mov	r0, r5
   dc400:	f000 fdd9 	bl	dcfb6 <__any_on>
   dc404:	2800      	cmp	r0, #0
   dc406:	d0f6      	beq.n	dc3f6 <__gethex+0x218>
   dc408:	f04f 0903 	mov.w	r9, #3
   dc40c:	e000      	b.n	dc410 <__gethex+0x232>
   dc40e:	4681      	mov	r9, r0
   dc410:	4639      	mov	r1, r7
   dc412:	4628      	mov	r0, r5
   dc414:	f7ff fe98 	bl	dc148 <rshift>
   dc418:	443c      	add	r4, r7
   dc41a:	e00c      	b.n	dc436 <__gethex+0x258>
   dc41c:	da09      	bge.n	dc432 <__gethex+0x254>
   dc41e:	1a37      	subs	r7, r6, r0
   dc420:	4629      	mov	r1, r5
   dc422:	463a      	mov	r2, r7
   dc424:	9802      	ldr	r0, [sp, #8]
   dc426:	f000 fbf3 	bl	dcc10 <__lshift>
   dc42a:	1be4      	subs	r4, r4, r7
   dc42c:	4605      	mov	r5, r0
   dc42e:	f100 0a14 	add.w	sl, r0, #20
   dc432:	f04f 0900 	mov.w	r9, #0
   dc436:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc43a:	429c      	cmp	r4, r3
   dc43c:	dd08      	ble.n	dc450 <__gethex+0x272>
   dc43e:	9802      	ldr	r0, [sp, #8]
   dc440:	4629      	mov	r1, r5
   dc442:	f000 fa20 	bl	dc886 <_Bfree>
   dc446:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc448:	2300      	movs	r3, #0
   dc44a:	6013      	str	r3, [r2, #0]
   dc44c:	20a3      	movs	r0, #163	; 0xa3
   dc44e:	e0e2      	b.n	dc616 <__gethex+0x438>
   dc450:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc454:	4284      	cmp	r4, r0
   dc456:	da53      	bge.n	dc500 <__gethex+0x322>
   dc458:	1b04      	subs	r4, r0, r4
   dc45a:	42a6      	cmp	r6, r4
   dc45c:	dc2e      	bgt.n	dc4bc <__gethex+0x2de>
   dc45e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc462:	2b02      	cmp	r3, #2
   dc464:	d01a      	beq.n	dc49c <__gethex+0x2be>
   dc466:	2b03      	cmp	r3, #3
   dc468:	d01c      	beq.n	dc4a4 <__gethex+0x2c6>
   dc46a:	2b01      	cmp	r3, #1
   dc46c:	d11d      	bne.n	dc4aa <__gethex+0x2cc>
   dc46e:	42a6      	cmp	r6, r4
   dc470:	d11b      	bne.n	dc4aa <__gethex+0x2cc>
   dc472:	2e01      	cmp	r6, #1
   dc474:	dc0b      	bgt.n	dc48e <__gethex+0x2b0>
   dc476:	9a06      	ldr	r2, [sp, #24]
   dc478:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc47c:	6013      	str	r3, [r2, #0]
   dc47e:	2301      	movs	r3, #1
   dc480:	612b      	str	r3, [r5, #16]
   dc482:	f8ca 3000 	str.w	r3, [sl]
   dc486:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc488:	2062      	movs	r0, #98	; 0x62
   dc48a:	601d      	str	r5, [r3, #0]
   dc48c:	e0c3      	b.n	dc616 <__gethex+0x438>
   dc48e:	1e71      	subs	r1, r6, #1
   dc490:	4628      	mov	r0, r5
   dc492:	f000 fd90 	bl	dcfb6 <__any_on>
   dc496:	2800      	cmp	r0, #0
   dc498:	d1ed      	bne.n	dc476 <__gethex+0x298>
   dc49a:	e006      	b.n	dc4aa <__gethex+0x2cc>
   dc49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc49e:	2b00      	cmp	r3, #0
   dc4a0:	d0e9      	beq.n	dc476 <__gethex+0x298>
   dc4a2:	e002      	b.n	dc4aa <__gethex+0x2cc>
   dc4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc4a6:	2b00      	cmp	r3, #0
   dc4a8:	d1e5      	bne.n	dc476 <__gethex+0x298>
   dc4aa:	9802      	ldr	r0, [sp, #8]
   dc4ac:	4629      	mov	r1, r5
   dc4ae:	f000 f9ea 	bl	dc886 <_Bfree>
   dc4b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc4b4:	2300      	movs	r3, #0
   dc4b6:	6013      	str	r3, [r2, #0]
   dc4b8:	2050      	movs	r0, #80	; 0x50
   dc4ba:	e0ac      	b.n	dc616 <__gethex+0x438>
   dc4bc:	1e67      	subs	r7, r4, #1
   dc4be:	f1b9 0f00 	cmp.w	r9, #0
   dc4c2:	d106      	bne.n	dc4d2 <__gethex+0x2f4>
   dc4c4:	b13f      	cbz	r7, dc4d6 <__gethex+0x2f8>
   dc4c6:	4639      	mov	r1, r7
   dc4c8:	4628      	mov	r0, r5
   dc4ca:	f000 fd74 	bl	dcfb6 <__any_on>
   dc4ce:	4681      	mov	r9, r0
   dc4d0:	e001      	b.n	dc4d6 <__gethex+0x2f8>
   dc4d2:	f04f 0901 	mov.w	r9, #1
   dc4d6:	117a      	asrs	r2, r7, #5
   dc4d8:	2301      	movs	r3, #1
   dc4da:	f007 071f 	and.w	r7, r7, #31
   dc4de:	fa03 f707 	lsl.w	r7, r3, r7
   dc4e2:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dc4e6:	4621      	mov	r1, r4
   dc4e8:	421f      	tst	r7, r3
   dc4ea:	4628      	mov	r0, r5
   dc4ec:	bf18      	it	ne
   dc4ee:	f049 0902 	orrne.w	r9, r9, #2
   dc4f2:	1b36      	subs	r6, r6, r4
   dc4f4:	f7ff fe28 	bl	dc148 <rshift>
   dc4f8:	2702      	movs	r7, #2
   dc4fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dc4fe:	e000      	b.n	dc502 <__gethex+0x324>
   dc500:	2701      	movs	r7, #1
   dc502:	f1b9 0f00 	cmp.w	r9, #0
   dc506:	f000 8081 	beq.w	dc60c <__gethex+0x42e>
   dc50a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc50e:	2b02      	cmp	r3, #2
   dc510:	d00e      	beq.n	dc530 <__gethex+0x352>
   dc512:	2b03      	cmp	r3, #3
   dc514:	d010      	beq.n	dc538 <__gethex+0x35a>
   dc516:	2b01      	cmp	r3, #1
   dc518:	d176      	bne.n	dc608 <__gethex+0x42a>
   dc51a:	f019 0f02 	tst.w	r9, #2
   dc51e:	d073      	beq.n	dc608 <__gethex+0x42a>
   dc520:	f8da 0000 	ldr.w	r0, [sl]
   dc524:	ea49 0900 	orr.w	r9, r9, r0
   dc528:	f019 0f01 	tst.w	r9, #1
   dc52c:	d107      	bne.n	dc53e <__gethex+0x360>
   dc52e:	e06b      	b.n	dc608 <__gethex+0x42a>
   dc530:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc532:	f1c3 0301 	rsb	r3, r3, #1
   dc536:	9315      	str	r3, [sp, #84]	; 0x54
   dc538:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc53a:	2b00      	cmp	r3, #0
   dc53c:	d064      	beq.n	dc608 <__gethex+0x42a>
   dc53e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dc542:	f105 0314 	add.w	r3, r5, #20
   dc546:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dc54a:	eb03 0109 	add.w	r1, r3, r9
   dc54e:	2000      	movs	r0, #0
   dc550:	681a      	ldr	r2, [r3, #0]
   dc552:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc556:	d002      	beq.n	dc55e <__gethex+0x380>
   dc558:	3201      	adds	r2, #1
   dc55a:	601a      	str	r2, [r3, #0]
   dc55c:	e020      	b.n	dc5a0 <__gethex+0x3c2>
   dc55e:	f843 0b04 	str.w	r0, [r3], #4
   dc562:	4299      	cmp	r1, r3
   dc564:	d8f4      	bhi.n	dc550 <__gethex+0x372>
   dc566:	68ab      	ldr	r3, [r5, #8]
   dc568:	459a      	cmp	sl, r3
   dc56a:	db12      	blt.n	dc592 <__gethex+0x3b4>
   dc56c:	6869      	ldr	r1, [r5, #4]
   dc56e:	9802      	ldr	r0, [sp, #8]
   dc570:	3101      	adds	r1, #1
   dc572:	f000 f953 	bl	dc81c <_Balloc>
   dc576:	692a      	ldr	r2, [r5, #16]
   dc578:	3202      	adds	r2, #2
   dc57a:	f105 010c 	add.w	r1, r5, #12
   dc57e:	4683      	mov	fp, r0
   dc580:	0092      	lsls	r2, r2, #2
   dc582:	300c      	adds	r0, #12
   dc584:	f7fd fc36 	bl	d9df4 <memcpy>
   dc588:	4629      	mov	r1, r5
   dc58a:	9802      	ldr	r0, [sp, #8]
   dc58c:	f000 f97b 	bl	dc886 <_Bfree>
   dc590:	465d      	mov	r5, fp
   dc592:	692b      	ldr	r3, [r5, #16]
   dc594:	1c5a      	adds	r2, r3, #1
   dc596:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dc59a:	612a      	str	r2, [r5, #16]
   dc59c:	2201      	movs	r2, #1
   dc59e:	615a      	str	r2, [r3, #20]
   dc5a0:	2f02      	cmp	r7, #2
   dc5a2:	f105 0214 	add.w	r2, r5, #20
   dc5a6:	d111      	bne.n	dc5cc <__gethex+0x3ee>
   dc5a8:	f8d8 3000 	ldr.w	r3, [r8]
   dc5ac:	3b01      	subs	r3, #1
   dc5ae:	429e      	cmp	r6, r3
   dc5b0:	d127      	bne.n	dc602 <__gethex+0x424>
   dc5b2:	1171      	asrs	r1, r6, #5
   dc5b4:	2301      	movs	r3, #1
   dc5b6:	f006 061f 	and.w	r6, r6, #31
   dc5ba:	fa03 f606 	lsl.w	r6, r3, r6
   dc5be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dc5c2:	421e      	tst	r6, r3
   dc5c4:	bf0c      	ite	eq
   dc5c6:	2702      	moveq	r7, #2
   dc5c8:	2701      	movne	r7, #1
   dc5ca:	e01a      	b.n	dc602 <__gethex+0x424>
   dc5cc:	692b      	ldr	r3, [r5, #16]
   dc5ce:	459a      	cmp	sl, r3
   dc5d0:	da0a      	bge.n	dc5e8 <__gethex+0x40a>
   dc5d2:	2101      	movs	r1, #1
   dc5d4:	4628      	mov	r0, r5
   dc5d6:	f7ff fdb7 	bl	dc148 <rshift>
   dc5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc5de:	3401      	adds	r4, #1
   dc5e0:	429c      	cmp	r4, r3
   dc5e2:	f73f af2c 	bgt.w	dc43e <__gethex+0x260>
   dc5e6:	e00b      	b.n	dc600 <__gethex+0x422>
   dc5e8:	f016 061f 	ands.w	r6, r6, #31
   dc5ec:	d008      	beq.n	dc600 <__gethex+0x422>
   dc5ee:	4491      	add	r9, r2
   dc5f0:	f1c6 0620 	rsb	r6, r6, #32
   dc5f4:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dc5f8:	f000 f9d5 	bl	dc9a6 <__hi0bits>
   dc5fc:	42b0      	cmp	r0, r6
   dc5fe:	dbe8      	blt.n	dc5d2 <__gethex+0x3f4>
   dc600:	2701      	movs	r7, #1
   dc602:	f047 0720 	orr.w	r7, r7, #32
   dc606:	e001      	b.n	dc60c <__gethex+0x42e>
   dc608:	f047 0710 	orr.w	r7, r7, #16
   dc60c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc60e:	601d      	str	r5, [r3, #0]
   dc610:	9b06      	ldr	r3, [sp, #24]
   dc612:	4638      	mov	r0, r7
   dc614:	601c      	str	r4, [r3, #0]
   dc616:	b00b      	add	sp, #44	; 0x2c
   dc618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc61c <L_shift>:
   dc61c:	f1c2 0208 	rsb	r2, r2, #8
   dc620:	0092      	lsls	r2, r2, #2
   dc622:	b570      	push	{r4, r5, r6, lr}
   dc624:	f1c2 0620 	rsb	r6, r2, #32
   dc628:	6843      	ldr	r3, [r0, #4]
   dc62a:	6805      	ldr	r5, [r0, #0]
   dc62c:	fa03 f406 	lsl.w	r4, r3, r6
   dc630:	432c      	orrs	r4, r5
   dc632:	40d3      	lsrs	r3, r2
   dc634:	6004      	str	r4, [r0, #0]
   dc636:	f840 3f04 	str.w	r3, [r0, #4]!
   dc63a:	4288      	cmp	r0, r1
   dc63c:	d3f4      	bcc.n	dc628 <L_shift+0xc>
   dc63e:	bd70      	pop	{r4, r5, r6, pc}

000dc640 <__match>:
   dc640:	b530      	push	{r4, r5, lr}
   dc642:	6803      	ldr	r3, [r0, #0]
   dc644:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc648:	3301      	adds	r3, #1
   dc64a:	b14c      	cbz	r4, dc660 <__match+0x20>
   dc64c:	781a      	ldrb	r2, [r3, #0]
   dc64e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc652:	2d19      	cmp	r5, #25
   dc654:	bf98      	it	ls
   dc656:	3220      	addls	r2, #32
   dc658:	42a2      	cmp	r2, r4
   dc65a:	d0f3      	beq.n	dc644 <__match+0x4>
   dc65c:	2000      	movs	r0, #0
   dc65e:	bd30      	pop	{r4, r5, pc}
   dc660:	6003      	str	r3, [r0, #0]
   dc662:	2001      	movs	r0, #1
   dc664:	bd30      	pop	{r4, r5, pc}

000dc666 <__hexnan>:
   dc666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc66a:	680b      	ldr	r3, [r1, #0]
   dc66c:	f8d0 b000 	ldr.w	fp, [r0]
   dc670:	115e      	asrs	r6, r3, #5
   dc672:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc676:	f013 031f 	ands.w	r3, r3, #31
   dc67a:	b085      	sub	sp, #20
   dc67c:	bf18      	it	ne
   dc67e:	3604      	addne	r6, #4
   dc680:	1f35      	subs	r5, r6, #4
   dc682:	4617      	mov	r7, r2
   dc684:	2200      	movs	r2, #0
   dc686:	4682      	mov	sl, r0
   dc688:	9301      	str	r3, [sp, #4]
   dc68a:	f846 2c04 	str.w	r2, [r6, #-4]
   dc68e:	46a8      	mov	r8, r5
   dc690:	462c      	mov	r4, r5
   dc692:	9200      	str	r2, [sp, #0]
   dc694:	4691      	mov	r9, r2
   dc696:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dc69a:	2900      	cmp	r1, #0
   dc69c:	d03c      	beq.n	dc718 <__hexnan+0xb2>
   dc69e:	4608      	mov	r0, r1
   dc6a0:	9203      	str	r2, [sp, #12]
   dc6a2:	9102      	str	r1, [sp, #8]
   dc6a4:	f7ff fd86 	bl	dc1b4 <__hexdig_fun>
   dc6a8:	9a03      	ldr	r2, [sp, #12]
   dc6aa:	bb00      	cbnz	r0, dc6ee <__hexnan+0x88>
   dc6ac:	9902      	ldr	r1, [sp, #8]
   dc6ae:	2920      	cmp	r1, #32
   dc6b0:	d816      	bhi.n	dc6e0 <__hexnan+0x7a>
   dc6b2:	9b00      	ldr	r3, [sp, #0]
   dc6b4:	4599      	cmp	r9, r3
   dc6b6:	ddee      	ble.n	dc696 <__hexnan+0x30>
   dc6b8:	4544      	cmp	r4, r8
   dc6ba:	d205      	bcs.n	dc6c8 <__hexnan+0x62>
   dc6bc:	2a07      	cmp	r2, #7
   dc6be:	dc03      	bgt.n	dc6c8 <__hexnan+0x62>
   dc6c0:	4641      	mov	r1, r8
   dc6c2:	4620      	mov	r0, r4
   dc6c4:	f7ff ffaa 	bl	dc61c <L_shift>
   dc6c8:	42bc      	cmp	r4, r7
   dc6ca:	d923      	bls.n	dc714 <__hexnan+0xae>
   dc6cc:	2300      	movs	r3, #0
   dc6ce:	f1a4 0804 	sub.w	r8, r4, #4
   dc6d2:	f844 3c04 	str.w	r3, [r4, #-4]
   dc6d6:	f8cd 9000 	str.w	r9, [sp]
   dc6da:	4644      	mov	r4, r8
   dc6dc:	461a      	mov	r2, r3
   dc6de:	e7da      	b.n	dc696 <__hexnan+0x30>
   dc6e0:	2929      	cmp	r1, #41	; 0x29
   dc6e2:	d148      	bne.n	dc776 <__hexnan+0x110>
   dc6e4:	f10b 0301 	add.w	r3, fp, #1
   dc6e8:	f8ca 3000 	str.w	r3, [sl]
   dc6ec:	e014      	b.n	dc718 <__hexnan+0xb2>
   dc6ee:	3201      	adds	r2, #1
   dc6f0:	2a08      	cmp	r2, #8
   dc6f2:	f109 0901 	add.w	r9, r9, #1
   dc6f6:	dd06      	ble.n	dc706 <__hexnan+0xa0>
   dc6f8:	42bc      	cmp	r4, r7
   dc6fa:	d9cc      	bls.n	dc696 <__hexnan+0x30>
   dc6fc:	2300      	movs	r3, #0
   dc6fe:	f844 3c04 	str.w	r3, [r4, #-4]
   dc702:	2201      	movs	r2, #1
   dc704:	3c04      	subs	r4, #4
   dc706:	6821      	ldr	r1, [r4, #0]
   dc708:	f000 000f 	and.w	r0, r0, #15
   dc70c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dc710:	6020      	str	r0, [r4, #0]
   dc712:	e7c0      	b.n	dc696 <__hexnan+0x30>
   dc714:	2208      	movs	r2, #8
   dc716:	e7be      	b.n	dc696 <__hexnan+0x30>
   dc718:	f1b9 0f00 	cmp.w	r9, #0
   dc71c:	d02b      	beq.n	dc776 <__hexnan+0x110>
   dc71e:	4544      	cmp	r4, r8
   dc720:	d205      	bcs.n	dc72e <__hexnan+0xc8>
   dc722:	2a07      	cmp	r2, #7
   dc724:	dc03      	bgt.n	dc72e <__hexnan+0xc8>
   dc726:	4641      	mov	r1, r8
   dc728:	4620      	mov	r0, r4
   dc72a:	f7ff ff77 	bl	dc61c <L_shift>
   dc72e:	42bc      	cmp	r4, r7
   dc730:	d90c      	bls.n	dc74c <__hexnan+0xe6>
   dc732:	463b      	mov	r3, r7
   dc734:	f854 2b04 	ldr.w	r2, [r4], #4
   dc738:	f843 2b04 	str.w	r2, [r3], #4
   dc73c:	42a5      	cmp	r5, r4
   dc73e:	d2f9      	bcs.n	dc734 <__hexnan+0xce>
   dc740:	2200      	movs	r2, #0
   dc742:	f843 2b04 	str.w	r2, [r3], #4
   dc746:	429d      	cmp	r5, r3
   dc748:	d2fb      	bcs.n	dc742 <__hexnan+0xdc>
   dc74a:	e00b      	b.n	dc764 <__hexnan+0xfe>
   dc74c:	9b01      	ldr	r3, [sp, #4]
   dc74e:	b14b      	cbz	r3, dc764 <__hexnan+0xfe>
   dc750:	f1c3 0220 	rsb	r2, r3, #32
   dc754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dc758:	40d3      	lsrs	r3, r2
   dc75a:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc75e:	4013      	ands	r3, r2
   dc760:	f846 3c04 	str.w	r3, [r6, #-4]
   dc764:	682b      	ldr	r3, [r5, #0]
   dc766:	b943      	cbnz	r3, dc77a <__hexnan+0x114>
   dc768:	42bd      	cmp	r5, r7
   dc76a:	d102      	bne.n	dc772 <__hexnan+0x10c>
   dc76c:	2301      	movs	r3, #1
   dc76e:	602b      	str	r3, [r5, #0]
   dc770:	e003      	b.n	dc77a <__hexnan+0x114>
   dc772:	3d04      	subs	r5, #4
   dc774:	e7f6      	b.n	dc764 <__hexnan+0xfe>
   dc776:	2004      	movs	r0, #4
   dc778:	e000      	b.n	dc77c <__hexnan+0x116>
   dc77a:	2005      	movs	r0, #5
   dc77c:	b005      	add	sp, #20
   dc77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dc784 <_findenv_r>:
   dc784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc788:	4607      	mov	r7, r0
   dc78a:	468b      	mov	fp, r1
   dc78c:	4690      	mov	r8, r2
   dc78e:	f000 fc49 	bl	dd024 <__env_lock>
   dc792:	4b19      	ldr	r3, [pc, #100]	; (dc7f8 <_findenv_r+0x74>)
   dc794:	681d      	ldr	r5, [r3, #0]
   dc796:	469a      	mov	sl, r3
   dc798:	b13d      	cbz	r5, dc7aa <_findenv_r+0x26>
   dc79a:	465c      	mov	r4, fp
   dc79c:	4623      	mov	r3, r4
   dc79e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc7a2:	b142      	cbz	r2, dc7b6 <_findenv_r+0x32>
   dc7a4:	2a3d      	cmp	r2, #61	; 0x3d
   dc7a6:	461c      	mov	r4, r3
   dc7a8:	d1f8      	bne.n	dc79c <_findenv_r+0x18>
   dc7aa:	4638      	mov	r0, r7
   dc7ac:	f000 fc3b 	bl	dd026 <__env_unlock>
   dc7b0:	2000      	movs	r0, #0
   dc7b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc7b6:	ebcb 0404 	rsb	r4, fp, r4
   dc7ba:	46a9      	mov	r9, r5
   dc7bc:	f859 0b04 	ldr.w	r0, [r9], #4
   dc7c0:	2800      	cmp	r0, #0
   dc7c2:	d0f2      	beq.n	dc7aa <_findenv_r+0x26>
   dc7c4:	4622      	mov	r2, r4
   dc7c6:	4659      	mov	r1, fp
   dc7c8:	f7fe fae8 	bl	dad9c <strncmp>
   dc7cc:	b988      	cbnz	r0, dc7f2 <_findenv_r+0x6e>
   dc7ce:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc7d2:	191e      	adds	r6, r3, r4
   dc7d4:	5d1b      	ldrb	r3, [r3, r4]
   dc7d6:	2b3d      	cmp	r3, #61	; 0x3d
   dc7d8:	d10b      	bne.n	dc7f2 <_findenv_r+0x6e>
   dc7da:	f8da 3000 	ldr.w	r3, [sl]
   dc7de:	1aed      	subs	r5, r5, r3
   dc7e0:	10ad      	asrs	r5, r5, #2
   dc7e2:	4638      	mov	r0, r7
   dc7e4:	f8c8 5000 	str.w	r5, [r8]
   dc7e8:	f000 fc1d 	bl	dd026 <__env_unlock>
   dc7ec:	1c70      	adds	r0, r6, #1
   dc7ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc7f2:	464d      	mov	r5, r9
   dc7f4:	e7e1      	b.n	dc7ba <_findenv_r+0x36>
   dc7f6:	bf00      	nop
   dc7f8:	2003e084 	.word	0x2003e084

000dc7fc <_getenv_r>:
   dc7fc:	b507      	push	{r0, r1, r2, lr}
   dc7fe:	aa01      	add	r2, sp, #4
   dc800:	f7ff ffc0 	bl	dc784 <_findenv_r>
   dc804:	b003      	add	sp, #12
   dc806:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc80c <__gettzinfo>:
   dc80c:	4800      	ldr	r0, [pc, #0]	; (dc810 <__gettzinfo+0x4>)
   dc80e:	4770      	bx	lr
   dc810:	2003e044 	.word	0x2003e044

000dc814 <labs>:
   dc814:	2800      	cmp	r0, #0
   dc816:	bfb8      	it	lt
   dc818:	4240      	neglt	r0, r0
   dc81a:	4770      	bx	lr

000dc81c <_Balloc>:
   dc81c:	b570      	push	{r4, r5, r6, lr}
   dc81e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dc820:	4604      	mov	r4, r0
   dc822:	460e      	mov	r6, r1
   dc824:	b93d      	cbnz	r5, dc836 <_Balloc+0x1a>
   dc826:	2010      	movs	r0, #16
   dc828:	f7fa fafe 	bl	d6e28 <malloc>
   dc82c:	6260      	str	r0, [r4, #36]	; 0x24
   dc82e:	6045      	str	r5, [r0, #4]
   dc830:	6085      	str	r5, [r0, #8]
   dc832:	6005      	str	r5, [r0, #0]
   dc834:	60c5      	str	r5, [r0, #12]
   dc836:	6a65      	ldr	r5, [r4, #36]	; 0x24
   dc838:	68eb      	ldr	r3, [r5, #12]
   dc83a:	b143      	cbz	r3, dc84e <_Balloc+0x32>
   dc83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc83e:	68db      	ldr	r3, [r3, #12]
   dc840:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   dc844:	b178      	cbz	r0, dc866 <_Balloc+0x4a>
   dc846:	6802      	ldr	r2, [r0, #0]
   dc848:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   dc84c:	e017      	b.n	dc87e <_Balloc+0x62>
   dc84e:	2221      	movs	r2, #33	; 0x21
   dc850:	2104      	movs	r1, #4
   dc852:	4620      	mov	r0, r4
   dc854:	f000 fbd1 	bl	dcffa <_calloc_r>
   dc858:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc85a:	60e8      	str	r0, [r5, #12]
   dc85c:	68db      	ldr	r3, [r3, #12]
   dc85e:	2b00      	cmp	r3, #0
   dc860:	d1ec      	bne.n	dc83c <_Balloc+0x20>
   dc862:	2000      	movs	r0, #0
   dc864:	bd70      	pop	{r4, r5, r6, pc}
   dc866:	2101      	movs	r1, #1
   dc868:	fa01 f506 	lsl.w	r5, r1, r6
   dc86c:	1d6a      	adds	r2, r5, #5
   dc86e:	0092      	lsls	r2, r2, #2
   dc870:	4620      	mov	r0, r4
   dc872:	f000 fbc2 	bl	dcffa <_calloc_r>
   dc876:	2800      	cmp	r0, #0
   dc878:	d0f3      	beq.n	dc862 <_Balloc+0x46>
   dc87a:	6046      	str	r6, [r0, #4]
   dc87c:	6085      	str	r5, [r0, #8]
   dc87e:	2300      	movs	r3, #0
   dc880:	6103      	str	r3, [r0, #16]
   dc882:	60c3      	str	r3, [r0, #12]
   dc884:	bd70      	pop	{r4, r5, r6, pc}

000dc886 <_Bfree>:
   dc886:	b570      	push	{r4, r5, r6, lr}
   dc888:	6a44      	ldr	r4, [r0, #36]	; 0x24
   dc88a:	4606      	mov	r6, r0
   dc88c:	460d      	mov	r5, r1
   dc88e:	b93c      	cbnz	r4, dc8a0 <_Bfree+0x1a>
   dc890:	2010      	movs	r0, #16
   dc892:	f7fa fac9 	bl	d6e28 <malloc>
   dc896:	6270      	str	r0, [r6, #36]	; 0x24
   dc898:	6044      	str	r4, [r0, #4]
   dc89a:	6084      	str	r4, [r0, #8]
   dc89c:	6004      	str	r4, [r0, #0]
   dc89e:	60c4      	str	r4, [r0, #12]
   dc8a0:	b13d      	cbz	r5, dc8b2 <_Bfree+0x2c>
   dc8a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   dc8a4:	686a      	ldr	r2, [r5, #4]
   dc8a6:	68db      	ldr	r3, [r3, #12]
   dc8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc8ac:	6029      	str	r1, [r5, #0]
   dc8ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   dc8b2:	bd70      	pop	{r4, r5, r6, pc}

000dc8b4 <__multadd>:
   dc8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc8b8:	690d      	ldr	r5, [r1, #16]
   dc8ba:	461f      	mov	r7, r3
   dc8bc:	4606      	mov	r6, r0
   dc8be:	460c      	mov	r4, r1
   dc8c0:	f101 0e14 	add.w	lr, r1, #20
   dc8c4:	2300      	movs	r3, #0
   dc8c6:	f8de 0000 	ldr.w	r0, [lr]
   dc8ca:	b281      	uxth	r1, r0
   dc8cc:	fb02 7101 	mla	r1, r2, r1, r7
   dc8d0:	0c0f      	lsrs	r7, r1, #16
   dc8d2:	0c00      	lsrs	r0, r0, #16
   dc8d4:	fb02 7000 	mla	r0, r2, r0, r7
   dc8d8:	b289      	uxth	r1, r1
   dc8da:	3301      	adds	r3, #1
   dc8dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   dc8e0:	429d      	cmp	r5, r3
   dc8e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   dc8e6:	f84e 1b04 	str.w	r1, [lr], #4
   dc8ea:	dcec      	bgt.n	dc8c6 <__multadd+0x12>
   dc8ec:	b1d7      	cbz	r7, dc924 <__multadd+0x70>
   dc8ee:	68a3      	ldr	r3, [r4, #8]
   dc8f0:	429d      	cmp	r5, r3
   dc8f2:	db12      	blt.n	dc91a <__multadd+0x66>
   dc8f4:	6861      	ldr	r1, [r4, #4]
   dc8f6:	4630      	mov	r0, r6
   dc8f8:	3101      	adds	r1, #1
   dc8fa:	f7ff ff8f 	bl	dc81c <_Balloc>
   dc8fe:	6922      	ldr	r2, [r4, #16]
   dc900:	3202      	adds	r2, #2
   dc902:	f104 010c 	add.w	r1, r4, #12
   dc906:	4680      	mov	r8, r0
   dc908:	0092      	lsls	r2, r2, #2
   dc90a:	300c      	adds	r0, #12
   dc90c:	f7fd fa72 	bl	d9df4 <memcpy>
   dc910:	4621      	mov	r1, r4
   dc912:	4630      	mov	r0, r6
   dc914:	f7ff ffb7 	bl	dc886 <_Bfree>
   dc918:	4644      	mov	r4, r8
   dc91a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   dc91e:	3501      	adds	r5, #1
   dc920:	615f      	str	r7, [r3, #20]
   dc922:	6125      	str	r5, [r4, #16]
   dc924:	4620      	mov	r0, r4
   dc926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc92a <__s2b>:
   dc92a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc92e:	460c      	mov	r4, r1
   dc930:	4615      	mov	r5, r2
   dc932:	461f      	mov	r7, r3
   dc934:	2209      	movs	r2, #9
   dc936:	3308      	adds	r3, #8
   dc938:	4606      	mov	r6, r0
   dc93a:	fb93 f3f2 	sdiv	r3, r3, r2
   dc93e:	2100      	movs	r1, #0
   dc940:	2201      	movs	r2, #1
   dc942:	429a      	cmp	r2, r3
   dc944:	da02      	bge.n	dc94c <__s2b+0x22>
   dc946:	0052      	lsls	r2, r2, #1
   dc948:	3101      	adds	r1, #1
   dc94a:	e7fa      	b.n	dc942 <__s2b+0x18>
   dc94c:	4630      	mov	r0, r6
   dc94e:	f7ff ff65 	bl	dc81c <_Balloc>
   dc952:	9b08      	ldr	r3, [sp, #32]
   dc954:	6143      	str	r3, [r0, #20]
   dc956:	2d09      	cmp	r5, #9
   dc958:	f04f 0301 	mov.w	r3, #1
   dc95c:	6103      	str	r3, [r0, #16]
   dc95e:	dd11      	ble.n	dc984 <__s2b+0x5a>
   dc960:	f104 0809 	add.w	r8, r4, #9
   dc964:	46c1      	mov	r9, r8
   dc966:	442c      	add	r4, r5
   dc968:	f819 3b01 	ldrb.w	r3, [r9], #1
   dc96c:	4601      	mov	r1, r0
   dc96e:	3b30      	subs	r3, #48	; 0x30
   dc970:	220a      	movs	r2, #10
   dc972:	4630      	mov	r0, r6
   dc974:	f7ff ff9e 	bl	dc8b4 <__multadd>
   dc978:	45a1      	cmp	r9, r4
   dc97a:	d1f5      	bne.n	dc968 <__s2b+0x3e>
   dc97c:	eb08 0405 	add.w	r4, r8, r5
   dc980:	3c08      	subs	r4, #8
   dc982:	e001      	b.n	dc988 <__s2b+0x5e>
   dc984:	340a      	adds	r4, #10
   dc986:	2509      	movs	r5, #9
   dc988:	1b2d      	subs	r5, r5, r4
   dc98a:	1963      	adds	r3, r4, r5
   dc98c:	429f      	cmp	r7, r3
   dc98e:	dd08      	ble.n	dc9a2 <__s2b+0x78>
   dc990:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc994:	4601      	mov	r1, r0
   dc996:	3b30      	subs	r3, #48	; 0x30
   dc998:	220a      	movs	r2, #10
   dc99a:	4630      	mov	r0, r6
   dc99c:	f7ff ff8a 	bl	dc8b4 <__multadd>
   dc9a0:	e7f3      	b.n	dc98a <__s2b+0x60>
   dc9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dc9a6 <__hi0bits>:
   dc9a6:	0c03      	lsrs	r3, r0, #16
   dc9a8:	041b      	lsls	r3, r3, #16
   dc9aa:	b913      	cbnz	r3, dc9b2 <__hi0bits+0xc>
   dc9ac:	0400      	lsls	r0, r0, #16
   dc9ae:	2310      	movs	r3, #16
   dc9b0:	e000      	b.n	dc9b4 <__hi0bits+0xe>
   dc9b2:	2300      	movs	r3, #0
   dc9b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc9b8:	bf04      	itt	eq
   dc9ba:	0200      	lsleq	r0, r0, #8
   dc9bc:	3308      	addeq	r3, #8
   dc9be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc9c2:	bf04      	itt	eq
   dc9c4:	0100      	lsleq	r0, r0, #4
   dc9c6:	3304      	addeq	r3, #4
   dc9c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc9cc:	bf04      	itt	eq
   dc9ce:	0080      	lsleq	r0, r0, #2
   dc9d0:	3302      	addeq	r3, #2
   dc9d2:	2800      	cmp	r0, #0
   dc9d4:	db03      	blt.n	dc9de <__hi0bits+0x38>
   dc9d6:	0042      	lsls	r2, r0, #1
   dc9d8:	d503      	bpl.n	dc9e2 <__hi0bits+0x3c>
   dc9da:	1c58      	adds	r0, r3, #1
   dc9dc:	4770      	bx	lr
   dc9de:	4618      	mov	r0, r3
   dc9e0:	4770      	bx	lr
   dc9e2:	2020      	movs	r0, #32
   dc9e4:	4770      	bx	lr

000dc9e6 <__lo0bits>:
   dc9e6:	6803      	ldr	r3, [r0, #0]
   dc9e8:	f013 0207 	ands.w	r2, r3, #7
   dc9ec:	d00b      	beq.n	dca06 <__lo0bits+0x20>
   dc9ee:	07d9      	lsls	r1, r3, #31
   dc9f0:	d422      	bmi.n	dca38 <__lo0bits+0x52>
   dc9f2:	079a      	lsls	r2, r3, #30
   dc9f4:	bf4b      	itete	mi
   dc9f6:	085b      	lsrmi	r3, r3, #1
   dc9f8:	089b      	lsrpl	r3, r3, #2
   dc9fa:	6003      	strmi	r3, [r0, #0]
   dc9fc:	6003      	strpl	r3, [r0, #0]
   dc9fe:	bf4c      	ite	mi
   dca00:	2001      	movmi	r0, #1
   dca02:	2002      	movpl	r0, #2
   dca04:	4770      	bx	lr
   dca06:	b299      	uxth	r1, r3
   dca08:	b909      	cbnz	r1, dca0e <__lo0bits+0x28>
   dca0a:	0c1b      	lsrs	r3, r3, #16
   dca0c:	2210      	movs	r2, #16
   dca0e:	f013 0fff 	tst.w	r3, #255	; 0xff
   dca12:	bf04      	itt	eq
   dca14:	0a1b      	lsreq	r3, r3, #8
   dca16:	3208      	addeq	r2, #8
   dca18:	0719      	lsls	r1, r3, #28
   dca1a:	bf04      	itt	eq
   dca1c:	091b      	lsreq	r3, r3, #4
   dca1e:	3204      	addeq	r2, #4
   dca20:	0799      	lsls	r1, r3, #30
   dca22:	bf04      	itt	eq
   dca24:	089b      	lsreq	r3, r3, #2
   dca26:	3202      	addeq	r2, #2
   dca28:	07d9      	lsls	r1, r3, #31
   dca2a:	d402      	bmi.n	dca32 <__lo0bits+0x4c>
   dca2c:	085b      	lsrs	r3, r3, #1
   dca2e:	d005      	beq.n	dca3c <__lo0bits+0x56>
   dca30:	3201      	adds	r2, #1
   dca32:	6003      	str	r3, [r0, #0]
   dca34:	4610      	mov	r0, r2
   dca36:	4770      	bx	lr
   dca38:	2000      	movs	r0, #0
   dca3a:	4770      	bx	lr
   dca3c:	2020      	movs	r0, #32
   dca3e:	4770      	bx	lr

000dca40 <__i2b>:
   dca40:	b510      	push	{r4, lr}
   dca42:	460c      	mov	r4, r1
   dca44:	2101      	movs	r1, #1
   dca46:	f7ff fee9 	bl	dc81c <_Balloc>
   dca4a:	2201      	movs	r2, #1
   dca4c:	6144      	str	r4, [r0, #20]
   dca4e:	6102      	str	r2, [r0, #16]
   dca50:	bd10      	pop	{r4, pc}

000dca52 <__multiply>:
   dca52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dca56:	4614      	mov	r4, r2
   dca58:	690a      	ldr	r2, [r1, #16]
   dca5a:	6923      	ldr	r3, [r4, #16]
   dca5c:	429a      	cmp	r2, r3
   dca5e:	bfb8      	it	lt
   dca60:	460b      	movlt	r3, r1
   dca62:	4688      	mov	r8, r1
   dca64:	bfbc      	itt	lt
   dca66:	46a0      	movlt	r8, r4
   dca68:	461c      	movlt	r4, r3
   dca6a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   dca6e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dca72:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dca76:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dca7a:	eb07 0609 	add.w	r6, r7, r9
   dca7e:	429e      	cmp	r6, r3
   dca80:	bfc8      	it	gt
   dca82:	3101      	addgt	r1, #1
   dca84:	f7ff feca 	bl	dc81c <_Balloc>
   dca88:	f100 0514 	add.w	r5, r0, #20
   dca8c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   dca90:	462b      	mov	r3, r5
   dca92:	2200      	movs	r2, #0
   dca94:	4563      	cmp	r3, ip
   dca96:	d202      	bcs.n	dca9e <__multiply+0x4c>
   dca98:	f843 2b04 	str.w	r2, [r3], #4
   dca9c:	e7fa      	b.n	dca94 <__multiply+0x42>
   dca9e:	f104 0214 	add.w	r2, r4, #20
   dcaa2:	f108 0114 	add.w	r1, r8, #20
   dcaa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dcaaa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   dcaae:	9300      	str	r3, [sp, #0]
   dcab0:	9b00      	ldr	r3, [sp, #0]
   dcab2:	9201      	str	r2, [sp, #4]
   dcab4:	4293      	cmp	r3, r2
   dcab6:	d957      	bls.n	dcb68 <__multiply+0x116>
   dcab8:	f8b2 b000 	ldrh.w	fp, [r2]
   dcabc:	f1bb 0f00 	cmp.w	fp, #0
   dcac0:	d023      	beq.n	dcb0a <__multiply+0xb8>
   dcac2:	4689      	mov	r9, r1
   dcac4:	46ae      	mov	lr, r5
   dcac6:	f04f 0800 	mov.w	r8, #0
   dcaca:	f859 4b04 	ldr.w	r4, [r9], #4
   dcace:	f8be a000 	ldrh.w	sl, [lr]
   dcad2:	b2a3      	uxth	r3, r4
   dcad4:	fb0b a303 	mla	r3, fp, r3, sl
   dcad8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   dcadc:	f8de 4000 	ldr.w	r4, [lr]
   dcae0:	4443      	add	r3, r8
   dcae2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcae6:	fb0b 840a 	mla	r4, fp, sl, r8
   dcaea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   dcaee:	46f2      	mov	sl, lr
   dcaf0:	b29b      	uxth	r3, r3
   dcaf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   dcaf6:	454f      	cmp	r7, r9
   dcaf8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   dcafc:	f84a 3b04 	str.w	r3, [sl], #4
   dcb00:	d901      	bls.n	dcb06 <__multiply+0xb4>
   dcb02:	46d6      	mov	lr, sl
   dcb04:	e7e1      	b.n	dcaca <__multiply+0x78>
   dcb06:	f8ce 8004 	str.w	r8, [lr, #4]
   dcb0a:	9b01      	ldr	r3, [sp, #4]
   dcb0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   dcb10:	3204      	adds	r2, #4
   dcb12:	f1ba 0f00 	cmp.w	sl, #0
   dcb16:	d021      	beq.n	dcb5c <__multiply+0x10a>
   dcb18:	682b      	ldr	r3, [r5, #0]
   dcb1a:	462c      	mov	r4, r5
   dcb1c:	4689      	mov	r9, r1
   dcb1e:	f04f 0800 	mov.w	r8, #0
   dcb22:	f8b9 e000 	ldrh.w	lr, [r9]
   dcb26:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   dcb2a:	fb0a be0e 	mla	lr, sl, lr, fp
   dcb2e:	44f0      	add	r8, lr
   dcb30:	46a3      	mov	fp, r4
   dcb32:	b29b      	uxth	r3, r3
   dcb34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   dcb38:	f84b 3b04 	str.w	r3, [fp], #4
   dcb3c:	f859 3b04 	ldr.w	r3, [r9], #4
   dcb40:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   dcb44:	0c1b      	lsrs	r3, r3, #16
   dcb46:	fb0a e303 	mla	r3, sl, r3, lr
   dcb4a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   dcb4e:	454f      	cmp	r7, r9
   dcb50:	ea4f 4813 	mov.w	r8, r3, lsr #16
   dcb54:	d901      	bls.n	dcb5a <__multiply+0x108>
   dcb56:	465c      	mov	r4, fp
   dcb58:	e7e3      	b.n	dcb22 <__multiply+0xd0>
   dcb5a:	6063      	str	r3, [r4, #4]
   dcb5c:	3504      	adds	r5, #4
   dcb5e:	e7a7      	b.n	dcab0 <__multiply+0x5e>
   dcb60:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   dcb64:	b913      	cbnz	r3, dcb6c <__multiply+0x11a>
   dcb66:	3e01      	subs	r6, #1
   dcb68:	2e00      	cmp	r6, #0
   dcb6a:	dcf9      	bgt.n	dcb60 <__multiply+0x10e>
   dcb6c:	6106      	str	r6, [r0, #16]
   dcb6e:	b003      	add	sp, #12
   dcb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcb74 <__pow5mult>:
   dcb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcb78:	4615      	mov	r5, r2
   dcb7a:	f012 0203 	ands.w	r2, r2, #3
   dcb7e:	4606      	mov	r6, r0
   dcb80:	460f      	mov	r7, r1
   dcb82:	d007      	beq.n	dcb94 <__pow5mult+0x20>
   dcb84:	3a01      	subs	r2, #1
   dcb86:	4c21      	ldr	r4, [pc, #132]	; (dcc0c <__pow5mult+0x98>)
   dcb88:	2300      	movs	r3, #0
   dcb8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dcb8e:	f7ff fe91 	bl	dc8b4 <__multadd>
   dcb92:	4607      	mov	r7, r0
   dcb94:	10ad      	asrs	r5, r5, #2
   dcb96:	d036      	beq.n	dcc06 <__pow5mult+0x92>
   dcb98:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dcb9a:	b93c      	cbnz	r4, dcbac <__pow5mult+0x38>
   dcb9c:	2010      	movs	r0, #16
   dcb9e:	f7fa f943 	bl	d6e28 <malloc>
   dcba2:	6270      	str	r0, [r6, #36]	; 0x24
   dcba4:	6044      	str	r4, [r0, #4]
   dcba6:	6084      	str	r4, [r0, #8]
   dcba8:	6004      	str	r4, [r0, #0]
   dcbaa:	60c4      	str	r4, [r0, #12]
   dcbac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dcbb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dcbb4:	b94c      	cbnz	r4, dcbca <__pow5mult+0x56>
   dcbb6:	f240 2171 	movw	r1, #625	; 0x271
   dcbba:	4630      	mov	r0, r6
   dcbbc:	f7ff ff40 	bl	dca40 <__i2b>
   dcbc0:	2300      	movs	r3, #0
   dcbc2:	f8c8 0008 	str.w	r0, [r8, #8]
   dcbc6:	4604      	mov	r4, r0
   dcbc8:	6003      	str	r3, [r0, #0]
   dcbca:	f04f 0800 	mov.w	r8, #0
   dcbce:	07eb      	lsls	r3, r5, #31
   dcbd0:	d50a      	bpl.n	dcbe8 <__pow5mult+0x74>
   dcbd2:	4639      	mov	r1, r7
   dcbd4:	4622      	mov	r2, r4
   dcbd6:	4630      	mov	r0, r6
   dcbd8:	f7ff ff3b 	bl	dca52 <__multiply>
   dcbdc:	4639      	mov	r1, r7
   dcbde:	4681      	mov	r9, r0
   dcbe0:	4630      	mov	r0, r6
   dcbe2:	f7ff fe50 	bl	dc886 <_Bfree>
   dcbe6:	464f      	mov	r7, r9
   dcbe8:	106d      	asrs	r5, r5, #1
   dcbea:	d00c      	beq.n	dcc06 <__pow5mult+0x92>
   dcbec:	6820      	ldr	r0, [r4, #0]
   dcbee:	b108      	cbz	r0, dcbf4 <__pow5mult+0x80>
   dcbf0:	4604      	mov	r4, r0
   dcbf2:	e7ec      	b.n	dcbce <__pow5mult+0x5a>
   dcbf4:	4622      	mov	r2, r4
   dcbf6:	4621      	mov	r1, r4
   dcbf8:	4630      	mov	r0, r6
   dcbfa:	f7ff ff2a 	bl	dca52 <__multiply>
   dcbfe:	6020      	str	r0, [r4, #0]
   dcc00:	f8c0 8000 	str.w	r8, [r0]
   dcc04:	e7f4      	b.n	dcbf0 <__pow5mult+0x7c>
   dcc06:	4638      	mov	r0, r7
   dcc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcc0c:	000de040 	.word	0x000de040

000dcc10 <__lshift>:
   dcc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcc14:	460c      	mov	r4, r1
   dcc16:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcc1a:	6926      	ldr	r6, [r4, #16]
   dcc1c:	6849      	ldr	r1, [r1, #4]
   dcc1e:	68a3      	ldr	r3, [r4, #8]
   dcc20:	4456      	add	r6, sl
   dcc22:	4607      	mov	r7, r0
   dcc24:	4691      	mov	r9, r2
   dcc26:	1c75      	adds	r5, r6, #1
   dcc28:	42ab      	cmp	r3, r5
   dcc2a:	da02      	bge.n	dcc32 <__lshift+0x22>
   dcc2c:	3101      	adds	r1, #1
   dcc2e:	005b      	lsls	r3, r3, #1
   dcc30:	e7fa      	b.n	dcc28 <__lshift+0x18>
   dcc32:	4638      	mov	r0, r7
   dcc34:	f7ff fdf2 	bl	dc81c <_Balloc>
   dcc38:	2300      	movs	r3, #0
   dcc3a:	4680      	mov	r8, r0
   dcc3c:	f100 0114 	add.w	r1, r0, #20
   dcc40:	461a      	mov	r2, r3
   dcc42:	4553      	cmp	r3, sl
   dcc44:	da03      	bge.n	dcc4e <__lshift+0x3e>
   dcc46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   dcc4a:	3301      	adds	r3, #1
   dcc4c:	e7f9      	b.n	dcc42 <__lshift+0x32>
   dcc4e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   dcc52:	6920      	ldr	r0, [r4, #16]
   dcc54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   dcc58:	f019 091f 	ands.w	r9, r9, #31
   dcc5c:	f104 0114 	add.w	r1, r4, #20
   dcc60:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   dcc64:	d014      	beq.n	dcc90 <__lshift+0x80>
   dcc66:	f1c9 0c20 	rsb	ip, r9, #32
   dcc6a:	2200      	movs	r2, #0
   dcc6c:	6808      	ldr	r0, [r1, #0]
   dcc6e:	fa00 f009 	lsl.w	r0, r0, r9
   dcc72:	4302      	orrs	r2, r0
   dcc74:	469a      	mov	sl, r3
   dcc76:	f843 2b04 	str.w	r2, [r3], #4
   dcc7a:	f851 2b04 	ldr.w	r2, [r1], #4
   dcc7e:	458e      	cmp	lr, r1
   dcc80:	fa22 f20c 	lsr.w	r2, r2, ip
   dcc84:	d8f2      	bhi.n	dcc6c <__lshift+0x5c>
   dcc86:	f8ca 2004 	str.w	r2, [sl, #4]
   dcc8a:	b142      	cbz	r2, dcc9e <__lshift+0x8e>
   dcc8c:	1cb5      	adds	r5, r6, #2
   dcc8e:	e006      	b.n	dcc9e <__lshift+0x8e>
   dcc90:	3b04      	subs	r3, #4
   dcc92:	f851 2b04 	ldr.w	r2, [r1], #4
   dcc96:	f843 2f04 	str.w	r2, [r3, #4]!
   dcc9a:	458e      	cmp	lr, r1
   dcc9c:	d8f9      	bhi.n	dcc92 <__lshift+0x82>
   dcc9e:	3d01      	subs	r5, #1
   dcca0:	4638      	mov	r0, r7
   dcca2:	f8c8 5010 	str.w	r5, [r8, #16]
   dcca6:	4621      	mov	r1, r4
   dcca8:	f7ff fded 	bl	dc886 <_Bfree>
   dccac:	4640      	mov	r0, r8
   dccae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dccb2 <__mcmp>:
   dccb2:	6903      	ldr	r3, [r0, #16]
   dccb4:	690a      	ldr	r2, [r1, #16]
   dccb6:	1a9b      	subs	r3, r3, r2
   dccb8:	b510      	push	{r4, lr}
   dccba:	d111      	bne.n	dcce0 <__mcmp+0x2e>
   dccbc:	0092      	lsls	r2, r2, #2
   dccbe:	3014      	adds	r0, #20
   dccc0:	3114      	adds	r1, #20
   dccc2:	1883      	adds	r3, r0, r2
   dccc4:	440a      	add	r2, r1
   dccc6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   dccca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   dccce:	428c      	cmp	r4, r1
   dccd0:	d002      	beq.n	dccd8 <__mcmp+0x26>
   dccd2:	d307      	bcc.n	dcce4 <__mcmp+0x32>
   dccd4:	2001      	movs	r0, #1
   dccd6:	bd10      	pop	{r4, pc}
   dccd8:	4298      	cmp	r0, r3
   dccda:	d3f4      	bcc.n	dccc6 <__mcmp+0x14>
   dccdc:	2000      	movs	r0, #0
   dccde:	bd10      	pop	{r4, pc}
   dcce0:	4618      	mov	r0, r3
   dcce2:	bd10      	pop	{r4, pc}
   dcce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dcce8:	bd10      	pop	{r4, pc}

000dccea <__mdiff>:
   dccea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dccee:	460c      	mov	r4, r1
   dccf0:	4607      	mov	r7, r0
   dccf2:	4611      	mov	r1, r2
   dccf4:	4620      	mov	r0, r4
   dccf6:	4615      	mov	r5, r2
   dccf8:	f7ff ffdb 	bl	dccb2 <__mcmp>
   dccfc:	1e06      	subs	r6, r0, #0
   dccfe:	d108      	bne.n	dcd12 <__mdiff+0x28>
   dcd00:	4631      	mov	r1, r6
   dcd02:	4638      	mov	r0, r7
   dcd04:	f7ff fd8a 	bl	dc81c <_Balloc>
   dcd08:	2301      	movs	r3, #1
   dcd0a:	6103      	str	r3, [r0, #16]
   dcd0c:	6146      	str	r6, [r0, #20]
   dcd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcd12:	bfbc      	itt	lt
   dcd14:	4623      	movlt	r3, r4
   dcd16:	462c      	movlt	r4, r5
   dcd18:	4638      	mov	r0, r7
   dcd1a:	6861      	ldr	r1, [r4, #4]
   dcd1c:	bfba      	itte	lt
   dcd1e:	461d      	movlt	r5, r3
   dcd20:	2601      	movlt	r6, #1
   dcd22:	2600      	movge	r6, #0
   dcd24:	f7ff fd7a 	bl	dc81c <_Balloc>
   dcd28:	692b      	ldr	r3, [r5, #16]
   dcd2a:	60c6      	str	r6, [r0, #12]
   dcd2c:	6926      	ldr	r6, [r4, #16]
   dcd2e:	f105 0914 	add.w	r9, r5, #20
   dcd32:	3414      	adds	r4, #20
   dcd34:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   dcd38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   dcd3c:	f100 0514 	add.w	r5, r0, #20
   dcd40:	f04f 0c00 	mov.w	ip, #0
   dcd44:	f854 3b04 	ldr.w	r3, [r4], #4
   dcd48:	f859 2b04 	ldr.w	r2, [r9], #4
   dcd4c:	fa1c f183 	uxtah	r1, ip, r3
   dcd50:	fa1f fe82 	uxth.w	lr, r2
   dcd54:	0c12      	lsrs	r2, r2, #16
   dcd56:	ebce 0101 	rsb	r1, lr, r1
   dcd5a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   dcd5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   dcd62:	b289      	uxth	r1, r1
   dcd64:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcd68:	45c8      	cmp	r8, r9
   dcd6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   dcd6e:	46a6      	mov	lr, r4
   dcd70:	f845 3b04 	str.w	r3, [r5], #4
   dcd74:	d8e6      	bhi.n	dcd44 <__mdiff+0x5a>
   dcd76:	45be      	cmp	lr, r7
   dcd78:	d20e      	bcs.n	dcd98 <__mdiff+0xae>
   dcd7a:	f85e 1b04 	ldr.w	r1, [lr], #4
   dcd7e:	fa1c f281 	uxtah	r2, ip, r1
   dcd82:	1413      	asrs	r3, r2, #16
   dcd84:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   dcd88:	b292      	uxth	r2, r2
   dcd8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   dcd8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   dcd92:	f845 2b04 	str.w	r2, [r5], #4
   dcd96:	e7ee      	b.n	dcd76 <__mdiff+0x8c>
   dcd98:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   dcd9c:	b90b      	cbnz	r3, dcda2 <__mdiff+0xb8>
   dcd9e:	3e01      	subs	r6, #1
   dcda0:	e7fa      	b.n	dcd98 <__mdiff+0xae>
   dcda2:	6106      	str	r6, [r0, #16]
   dcda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000dcda8 <__ulp>:
   dcda8:	4b12      	ldr	r3, [pc, #72]	; (dcdf4 <__ulp+0x4c>)
   dcdaa:	ee10 2a90 	vmov	r2, s1
   dcdae:	401a      	ands	r2, r3
   dcdb0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   dcdb4:	2b00      	cmp	r3, #0
   dcdb6:	dd02      	ble.n	dcdbe <__ulp+0x16>
   dcdb8:	2000      	movs	r0, #0
   dcdba:	4619      	mov	r1, r3
   dcdbc:	e017      	b.n	dcdee <__ulp+0x46>
   dcdbe:	425b      	negs	r3, r3
   dcdc0:	151b      	asrs	r3, r3, #20
   dcdc2:	2b13      	cmp	r3, #19
   dcdc4:	f04f 0000 	mov.w	r0, #0
   dcdc8:	f04f 0100 	mov.w	r1, #0
   dcdcc:	dc04      	bgt.n	dcdd8 <__ulp+0x30>
   dcdce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   dcdd2:	fa42 f103 	asr.w	r1, r2, r3
   dcdd6:	e00a      	b.n	dcdee <__ulp+0x46>
   dcdd8:	3b14      	subs	r3, #20
   dcdda:	2b1e      	cmp	r3, #30
   dcddc:	f04f 0201 	mov.w	r2, #1
   dcde0:	bfda      	itte	le
   dcde2:	f1c3 031f 	rsble	r3, r3, #31
   dcde6:	fa02 f303 	lslle.w	r3, r2, r3
   dcdea:	4613      	movgt	r3, r2
   dcdec:	4618      	mov	r0, r3
   dcdee:	ec41 0b10 	vmov	d0, r0, r1
   dcdf2:	4770      	bx	lr
   dcdf4:	7ff00000 	.word	0x7ff00000

000dcdf8 <__b2d>:
   dcdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcdfa:	6905      	ldr	r5, [r0, #16]
   dcdfc:	f100 0614 	add.w	r6, r0, #20
   dce00:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   dce04:	1f2f      	subs	r7, r5, #4
   dce06:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dce0a:	4620      	mov	r0, r4
   dce0c:	f7ff fdcb 	bl	dc9a6 <__hi0bits>
   dce10:	f1c0 0320 	rsb	r3, r0, #32
   dce14:	280a      	cmp	r0, #10
   dce16:	600b      	str	r3, [r1, #0]
   dce18:	dc14      	bgt.n	dce44 <__b2d+0x4c>
   dce1a:	f1c0 0e0b 	rsb	lr, r0, #11
   dce1e:	fa24 f10e 	lsr.w	r1, r4, lr
   dce22:	42be      	cmp	r6, r7
   dce24:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   dce28:	bf34      	ite	cc
   dce2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dce2e:	2100      	movcs	r1, #0
   dce30:	3015      	adds	r0, #21
   dce32:	fa04 f000 	lsl.w	r0, r4, r0
   dce36:	fa21 f10e 	lsr.w	r1, r1, lr
   dce3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dce3e:	ea40 0201 	orr.w	r2, r0, r1
   dce42:	e023      	b.n	dce8c <__b2d+0x94>
   dce44:	42be      	cmp	r6, r7
   dce46:	bf3a      	itte	cc
   dce48:	f1a5 0708 	subcc.w	r7, r5, #8
   dce4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dce50:	2100      	movcs	r1, #0
   dce52:	380b      	subs	r0, #11
   dce54:	d015      	beq.n	dce82 <__b2d+0x8a>
   dce56:	4084      	lsls	r4, r0
   dce58:	f1c0 0520 	rsb	r5, r0, #32
   dce5c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   dce60:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   dce64:	42b7      	cmp	r7, r6
   dce66:	fa21 fe05 	lsr.w	lr, r1, r5
   dce6a:	ea44 030e 	orr.w	r3, r4, lr
   dce6e:	bf8c      	ite	hi
   dce70:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   dce74:	2400      	movls	r4, #0
   dce76:	fa01 f000 	lsl.w	r0, r1, r0
   dce7a:	40ec      	lsrs	r4, r5
   dce7c:	ea40 0204 	orr.w	r2, r0, r4
   dce80:	e004      	b.n	dce8c <__b2d+0x94>
   dce82:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   dce86:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dce8a:	460a      	mov	r2, r1
   dce8c:	ec43 2b10 	vmov	d0, r2, r3
   dce90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dce92 <__d2b>:
   dce92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dce96:	460e      	mov	r6, r1
   dce98:	2101      	movs	r1, #1
   dce9a:	ec59 8b10 	vmov	r8, r9, d0
   dce9e:	4615      	mov	r5, r2
   dcea0:	f7ff fcbc 	bl	dc81c <_Balloc>
   dcea4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   dcea8:	4607      	mov	r7, r0
   dceaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   dceae:	b10c      	cbz	r4, dceb4 <__d2b+0x22>
   dceb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dceb4:	9301      	str	r3, [sp, #4]
   dceb6:	f1b8 0f00 	cmp.w	r8, #0
   dceba:	d019      	beq.n	dcef0 <__d2b+0x5e>
   dcebc:	a802      	add	r0, sp, #8
   dcebe:	f840 8d08 	str.w	r8, [r0, #-8]!
   dcec2:	f7ff fd90 	bl	dc9e6 <__lo0bits>
   dcec6:	9b00      	ldr	r3, [sp, #0]
   dcec8:	b148      	cbz	r0, dcede <__d2b+0x4c>
   dceca:	9a01      	ldr	r2, [sp, #4]
   dcecc:	f1c0 0120 	rsb	r1, r0, #32
   dced0:	fa02 f101 	lsl.w	r1, r2, r1
   dced4:	430b      	orrs	r3, r1
   dced6:	40c2      	lsrs	r2, r0
   dced8:	617b      	str	r3, [r7, #20]
   dceda:	9201      	str	r2, [sp, #4]
   dcedc:	e000      	b.n	dcee0 <__d2b+0x4e>
   dcede:	617b      	str	r3, [r7, #20]
   dcee0:	9b01      	ldr	r3, [sp, #4]
   dcee2:	61bb      	str	r3, [r7, #24]
   dcee4:	2b00      	cmp	r3, #0
   dcee6:	bf14      	ite	ne
   dcee8:	2102      	movne	r1, #2
   dceea:	2101      	moveq	r1, #1
   dceec:	6139      	str	r1, [r7, #16]
   dceee:	e007      	b.n	dcf00 <__d2b+0x6e>
   dcef0:	a801      	add	r0, sp, #4
   dcef2:	f7ff fd78 	bl	dc9e6 <__lo0bits>
   dcef6:	9b01      	ldr	r3, [sp, #4]
   dcef8:	617b      	str	r3, [r7, #20]
   dcefa:	2101      	movs	r1, #1
   dcefc:	6139      	str	r1, [r7, #16]
   dcefe:	3020      	adds	r0, #32
   dcf00:	b134      	cbz	r4, dcf10 <__d2b+0x7e>
   dcf02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   dcf06:	4404      	add	r4, r0
   dcf08:	6034      	str	r4, [r6, #0]
   dcf0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dcf0e:	e009      	b.n	dcf24 <__d2b+0x92>
   dcf10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   dcf14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcf18:	6030      	str	r0, [r6, #0]
   dcf1a:	6918      	ldr	r0, [r3, #16]
   dcf1c:	f7ff fd43 	bl	dc9a6 <__hi0bits>
   dcf20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   dcf24:	6028      	str	r0, [r5, #0]
   dcf26:	4638      	mov	r0, r7
   dcf28:	b003      	add	sp, #12
   dcf2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcf2e <__ratio>:
   dcf2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcf32:	4688      	mov	r8, r1
   dcf34:	4669      	mov	r1, sp
   dcf36:	4681      	mov	r9, r0
   dcf38:	f7ff ff5e 	bl	dcdf8 <__b2d>
   dcf3c:	a901      	add	r1, sp, #4
   dcf3e:	4640      	mov	r0, r8
   dcf40:	ec55 4b10 	vmov	r4, r5, d0
   dcf44:	f7ff ff58 	bl	dcdf8 <__b2d>
   dcf48:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcf4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcf50:	1a9a      	subs	r2, r3, r2
   dcf52:	e89d 000a 	ldmia.w	sp, {r1, r3}
   dcf56:	1ac9      	subs	r1, r1, r3
   dcf58:	ec57 6b10 	vmov	r6, r7, d0
   dcf5c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   dcf60:	2b00      	cmp	r3, #0
   dcf62:	bfcc      	ite	gt
   dcf64:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   dcf68:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   dcf6c:	4632      	mov	r2, r6
   dcf6e:	463b      	mov	r3, r7
   dcf70:	4620      	mov	r0, r4
   dcf72:	4629      	mov	r1, r5
   dcf74:	f7fc fb2c 	bl	d95d0 <__aeabi_ddiv>
   dcf78:	ec41 0b10 	vmov	d0, r0, r1
   dcf7c:	b003      	add	sp, #12
   dcf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dcf82 <__copybits>:
   dcf82:	3901      	subs	r1, #1
   dcf84:	b510      	push	{r4, lr}
   dcf86:	1149      	asrs	r1, r1, #5
   dcf88:	6914      	ldr	r4, [r2, #16]
   dcf8a:	3101      	adds	r1, #1
   dcf8c:	f102 0314 	add.w	r3, r2, #20
   dcf90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcf94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcf98:	42a3      	cmp	r3, r4
   dcf9a:	4602      	mov	r2, r0
   dcf9c:	d204      	bcs.n	dcfa8 <__copybits+0x26>
   dcf9e:	f853 2b04 	ldr.w	r2, [r3], #4
   dcfa2:	f840 2b04 	str.w	r2, [r0], #4
   dcfa6:	e7f7      	b.n	dcf98 <__copybits+0x16>
   dcfa8:	2300      	movs	r3, #0
   dcfaa:	428a      	cmp	r2, r1
   dcfac:	d202      	bcs.n	dcfb4 <__copybits+0x32>
   dcfae:	f842 3b04 	str.w	r3, [r2], #4
   dcfb2:	e7fa      	b.n	dcfaa <__copybits+0x28>
   dcfb4:	bd10      	pop	{r4, pc}

000dcfb6 <__any_on>:
   dcfb6:	f100 0214 	add.w	r2, r0, #20
   dcfba:	6900      	ldr	r0, [r0, #16]
   dcfbc:	114b      	asrs	r3, r1, #5
   dcfbe:	4298      	cmp	r0, r3
   dcfc0:	b510      	push	{r4, lr}
   dcfc2:	db0c      	blt.n	dcfde <__any_on+0x28>
   dcfc4:	dd0c      	ble.n	dcfe0 <__any_on+0x2a>
   dcfc6:	f011 011f 	ands.w	r1, r1, #31
   dcfca:	d009      	beq.n	dcfe0 <__any_on+0x2a>
   dcfcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcfd0:	fa24 f001 	lsr.w	r0, r4, r1
   dcfd4:	fa00 f101 	lsl.w	r1, r0, r1
   dcfd8:	428c      	cmp	r4, r1
   dcfda:	d10c      	bne.n	dcff6 <__any_on+0x40>
   dcfdc:	e000      	b.n	dcfe0 <__any_on+0x2a>
   dcfde:	4603      	mov	r3, r0
   dcfe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcfe4:	4293      	cmp	r3, r2
   dcfe6:	d904      	bls.n	dcff2 <__any_on+0x3c>
   dcfe8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcfec:	2900      	cmp	r1, #0
   dcfee:	d0f9      	beq.n	dcfe4 <__any_on+0x2e>
   dcff0:	e001      	b.n	dcff6 <__any_on+0x40>
   dcff2:	2000      	movs	r0, #0
   dcff4:	bd10      	pop	{r4, pc}
   dcff6:	2001      	movs	r0, #1
   dcff8:	bd10      	pop	{r4, pc}

000dcffa <_calloc_r>:
   dcffa:	b538      	push	{r3, r4, r5, lr}
   dcffc:	fb02 f401 	mul.w	r4, r2, r1
   dd000:	4621      	mov	r1, r4
   dd002:	f7f9 ff51 	bl	d6ea8 <_malloc_r>
   dd006:	4605      	mov	r5, r0
   dd008:	b118      	cbz	r0, dd012 <_calloc_r+0x18>
   dd00a:	4622      	mov	r2, r4
   dd00c:	2100      	movs	r1, #0
   dd00e:	f7fc fefc 	bl	d9e0a <memset>
   dd012:	4628      	mov	r0, r5
   dd014:	bd38      	pop	{r3, r4, r5, pc}
	...

000dd018 <nanf>:
   dd018:	ed9f 0a01 	vldr	s0, [pc, #4]	; dd020 <nanf+0x8>
   dd01c:	4770      	bx	lr
   dd01e:	bf00      	nop
   dd020:	7fc00000 	.word	0x7fc00000

000dd024 <__env_lock>:
   dd024:	4770      	bx	lr

000dd026 <__env_unlock>:
   dd026:	4770      	bx	lr

000dd028 <dynalib_user>:
   dd028:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dd038:	0000 0000                                   ....

000dd03c <_ZTV8MB85RC64>:
	...
   dd044:	4175 000d 4189 000d 5d79 000d 5e23 000d     uA...A..y]..#^..
   dd054:	5e9d 000d d4a2 000d d4aa 000d d4af 000d     .^..............
   dd064:	d4b4 000d d4b8 000d d4bd 000d d4c2 000d     ................
   dd074:	d4c6 000d d4d1 000d d4dc 000d 0001 0100     ................
	...
   dd08c:	0001 0000 03e8 0000 0000 0000 0000 c0a0     ................
   dd09c:	0000 3f80 0000 0000 0017 0000 0000 0000     ...?............

000dd0ac <_ZL17FRAMversionNumber>:
   dd0ac:	0002 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
   dd0bc:	202c 3a51 3225 302e 2566 2025 4100 2b54     , Q:%2.0f%% .AT+
   dd0cc:	4643 4e55 313d 0d35 000a 227b 6f68 7275     CFUN=15...{"hour
   dd0dc:	796c 3a22 6925 202c 6422 6961 796c 3a22     ly":%i, "daily":
   dd0ec:	6925 222c 6162 7474 7265 2279 253a 2c69     %i,"battery":%i,
   dd0fc:	2220 6574 706d 3a22 6925 202c 7222 7365      "temp":%i, "res
   dd10c:	7465 2273 253a 2c69 2220 6c61 7265 7374     ets":%i, "alerts
   dd11c:	3a22 6925 202c 6d22 7861 696d 226e 253a     ":%i, "maxmin":%
   dd12c:	7d69 5500 6962 6f64 7374 432d 7261 482d     i}.Ubidots-Car-H
   dd13c:	6f6f 006b 6f4e 4420 7461 0061 6255 6469     ook.No Data.Ubid
   dd14c:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dd15c:	2065 6552 6563 7669 6465 5300 6174 6574     e Received.State
   dd16c:	4300 756f 746e 202c 6f68 7275 796c 203a     .Count, hourly: 
   dd17c:	6925 202c 6164 6c69 3a79 2520 0069 6544     %i, daily: %i.De
   dd18c:	6f62 6e75 6563 0064 7645 6e65 0074 654c     bounced.Event.Le
   dd19c:	6461 6e69 2067 7953 7473 6d65 4420 6665     ading System Def
   dd1ac:	7561 746c 0073 6148 6472 5220 7365 7465     aults.Hard Reset
   dd1bc:	6920 206e 2032 6573 6f63 646e 0073 3225      in 2 seconds.%2
   dd1cc:	312e 2066 6573 0063 6553 2074 6f53 616c     .1f sec.Set Sola
   dd1dc:	2072 6f50 6577 6572 2064 6f4d 6564 3000     r Powered Mode.0
   dd1ec:	4300 656c 7261 6465 5320 6c6f 7261 5020     .Cleared Solar P
   dd1fc:	776f 7265 6465 4d20 646f 0065 6553 2074     owered Mode.Set 
   dd20c:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
   dd21c:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
   dd22c:	0065 3225 312e 2066 5455 0043 6954 656d     e.%2.1f UTC.Time
   dd23c:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
   dd24c:	704f 6e65 7420 6d69 2065 6573 2074 6f74     Open time set to
   dd25c:	2520 0069 6c43 736f 6e69 2067 6974 656d      %i.Closing time
   dd26c:	7320 7465 7420 206f 6925 4c00 776f 5020      set to %i.Low P
   dd27c:	776f 7265 4e00 726f 616d 206c 704f 7265     ower.Normal Oper
   dd28c:	7461 6f69 736e 4600 6f72 206d 7325 7420     ations.From %s t
   dd29c:	206f 7325 5300 6174 6574 5420 6172 736e     o %s.State Trans
   dd2ac:	7469 6f69 006e 7552 6e6e 6e69 0067 6144     ition.Running.Da
   dd2bc:	6c69 2079 6c43 6165 756e 0070 7073 7261     ily Cleanup.spar
   dd2cc:	2f6b 6564 6976 6563 732f 7365 6973 6e6f     k/device/session
   dd2dc:	652f 646e 4500 7272 726f 5320 6174 6574     /end.Error State
   dd2ec:	2d20 5220 7365 7465 4500 7272 726f 5320      - Reset.Error S
   dd2fc:	6174 6574 2d20 5020 776f 7265 4320 6379     tate - Power Cyc
   dd30c:	656c 4500 7272 726f 5320 6174 6574 2d20     le.Error State -
   dd31c:	4620 6c75 206c 6f4d 6564 206d 6552 6573      Full Modem Rese
   dd32c:	0074 5344 2054 666f 7366 7465 2520 2e32     t.DST offset %2.
   dd33c:	6631 5300 7465 7075 6220 6765 6e69 0073     1f.Setup begins.
   dd34c:	6f48 7275 796c 6f43 6e75 0074 6144 6c69     HourlyCount.Dail
   dd35c:	4379 756f 746e 5300 6769 616e 006c 6552     yCount.Signal.Re
   dd36c:	6573 4374 756f 746e 5400 6d65 6570 6172     setCount.Tempera
   dd37c:	7574 6572 5200 6c65 6165 6573 7300 6174     ture.Release.sta
   dd38c:	6574 664f 6843 0067 6f6c 5077 776f 7265     teOfChg.lowPower
   dd39c:	6f4d 6564 4300 6f6c 6573 6954 656d 4100     Mode.CloseTime.A
   dd3ac:	656c 7472 0073 6954 656d 664f 7366 7465     lerts.TimeOffset
   dd3bc:	7200 7365 7465 5246 4d41 7200 7365 7465     .resetFRAM.reset
   dd3cc:	6f43 6e75 7374 4800 7261 5264 7365 7465     Counts.HardReset
   dd3dc:	5300 6e65 4e64 776f 4c00 776f 6f50 6577     .SendNow.LowPowe
   dd3ec:	4d72 646f 0065 6f53 616c 2d72 6f4d 6564     rMode.Solar-Mode
   dd3fc:	5600 7265 6f62 6573 4d2d 646f 0065 6553     .Verbose-Mode.Se
   dd40c:	2d74 6954 656d 6f7a 656e 5300 7465 442d     t-Timezone.Set-D
   dd41c:	5453 664f 7366 7465 5300 7465 4f2d 6570     STOffset.Set-Ope
   dd42c:	546e 6d69 0065 6553 2d74 6c43 736f 0065     nTime.Set-Close.
   dd43c:	6553 2d74 6544 6f62 6e75 6563 5700 2065     Set-Debounce.We 
   dd44c:	7261 2065 6572 6573 7474 6e69 2067 7665     are resetting ev
   dd45c:	7265 7479 6968 676e 5400 6d69 2e65 6164     erything.Time.da
   dd46c:	2879 2029 203d 2000 6e61 2064 6874 2065     y() = . and the 
   dd47c:	616c 7473 6420 7961 6920 3a73 0020 6220     last day is: . b
   dd48c:	6365 7561 6573 0020 7845 7469 6e69 2067     ecause .Exiting 
   dd49c:	6553 7574 0070 6e55 6e6b 776f 006e 6f4e     Setup.Unknown.No
   dd4ac:	656e 5700 4669 0069 5347 004d 4d55 5354     ne.WiFi.GSM.UMTS
   dd4bc:	4300 4d44 0041 544c 0045 4549 4545 3038     .CDMA.LTE.IEEE80
   dd4cc:	3132 3435 4c00 4554 435f 5441 4d5f 0031     2154.LTE_CAT_M1.
   dd4dc:	544c 5f45 4143 5f54 424e 0031 7277 7469     LTE_CAT_NB1.writ
   dd4ec:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   dd4fc:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dd50c:	7264 253d 0075 6572 6461 7320 7465 6120     dr=%u.read set a
   dd51c:	6464 6572 7373 6620 6961 656c 2064 6425     ddress failed %d
   dd52c:	6400 6469 276e 2074 6572 6563 7669 2065     .didn't receive 
   dd53c:	6e65 756f 6867 6220 7479 7365 6320 756f     enough bytes cou
   dd54c:	746e 253d 0075 7277 7469 2065 6166 6c69     nt=%u.write fail
   dd55c:	6465 2520 0064 0000                         ed %d...

000dd564 <_ZTV6MB85RC>:
	...
   dd56c:	5c99 000d 5c9b 000d 5d79 000d 5e23 000d     .\...\..y]..#^..
   dd57c:	5e9d 000d                                   .^..

000dd580 <_ZTV14MCP79410EEPROM>:
	...
   dd588:	5f65 000d 5f87 000d 5f5b 000d 5f5f 000d     e_..._..[_..__..
   dd598:	5fa3 000d 63d5 000d 67cd 000d               ._...c...g..

000dd5a4 <_ZTV12MCP79410SRAM>:
	...
   dd5ac:	5f63 000d 5f79 000d 5f53 000d 5f57 000d     c_..y_..S_..W_..
   dd5bc:	5fa3 000d 640d 000d 6637 000d 6579 7261     ._...d..7f..year
   dd5cc:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd5dc:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd5ec:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd5fc:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd60c:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd61c:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd62c:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd63c:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd64c:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd65c:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd66c:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd67c:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd68c:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd69c:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd6ac:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd6bc:	7061 2e70 7472 0063                         app.rtc.

000dd6c4 <_ZTV12MCP79410Time>:
	...
   dd6cc:	5f67 000d 5f6b 000d                         g_..k_..

000dd6d4 <_ZTV8MCP79410>:
	...
   dd6dc:	5f69 000d 5f95 000d                         i_..._..

000dd6e4 <_ZTVN5spark13CellularClassE>:
	...
   dd6ec:	6f57 000d 6f4d 000d 6f43 000d 6f05 000d     Wo..Mo..Co...o..
   dd6fc:	6f37 000d 4215 000d 6f2b 000d 6f23 000d     7o...B..+o..#o..
   dd70c:	6f19 000d 6f0f 000d 7cc5 000d               .o...o...|..

000dd718 <_ZTV14CellularSignal>:
	...
   dd720:	7005 000d 7097 000d 7007 000d 70d9 000d     .p...p...p...p..
   dd730:	700d 000d 70a5 000d 7039 000d 7065 000d     .p...p..9p..ep..
   dd740:	fffc ffff 0000 0000 708f 000d               .........p..

000dd74c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd754:	7125 000d 712b 000d 7181 000d 7139 000d     %q..+q...q..9q..
   dd764:	7127 000d                                   'q..

000dd768 <_ZTVN5spark13EthernetClassE>:
	...
   dd770:	7797 000d 778d 000d 7783 000d 7779 000d     .w...w...w..yw..
   dd780:	776d 000d 7761 000d 7755 000d 774d 000d     mw..aw..Uw..Mw..
   dd790:	7743 000d 7739 000d 7cc5 000d               Cw..9w...|..

000dd79c <_ZTV7TwoWire>:
	...
   dd7a4:	7899 000d 78e3 000d 78bb 000d 789b 000d     .x...x...x...x..
   dd7b4:	78c3 000d 78cb 000d 78d3 000d 78db 000d     .x...x...x...x..

000dd7c4 <_ZTV9IPAddress>:
	...
   dd7cc:	7a15 000d 7a05 000d 7a07 000d 6162 6475     .z...z...z..baud
   dd7dc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd7ec:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd7fc:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd80c:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd81c:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd82c:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd83c:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd84c:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd85c:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd86c:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd87c:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd88c:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd89c:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd8ac <_ZTVN5spark9MeshClassE>:
	...
   dd8b4:	7b57 000d 7b4d 000d 7b43 000d 7b39 000d     W{..M{..C{..9{..
   dd8c4:	7b2d 000d 7b21 000d 7b15 000d 7b0d 000d     -{..!{...{...{..
   dd8d4:	7b03 000d 7af9 000d 7cc5 000d               .{...z...|..

000dd8e0 <_ZTVN5spark12NetworkClassE>:
	...
   dd8e8:	7c5d 000d 7c67 000d 7c71 000d 7c7b 000d     ]|..g|..q|..{|..
   dd8f8:	7c85 000d 7c91 000d 7c9d 000d 7ca9 000d     .|...|...|...|..
   dd908:	7cb1 000d 7cbb 000d 7cc5 000d               .|...|...|..

000dd914 <_ZTV8SPIClass>:
	...
   dd91c:	8295 000d 8297 000d 2b25 3330 3a64 3025     ........%+03d:%0
   dd92c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd93c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dd94c <_ZTV11USARTSerial>:
	...
   dd954:	889d 000d 88ed 000d 88fb 000d 812d 000d     ............-...
   dd964:	88b1 000d 88d3 000d 88bf 000d 88e7 000d     ................
   dd974:	889f 000d 88a3 000d                         ........

000dd97c <_ZTV9USBSerial>:
	...
   dd984:	89a5 000d 89f5 000d 8a03 000d 812d 000d     ............-...
   dd994:	89e1 000d 89a7 000d 89bd 000d 89ef 000d     ................
   dd9a4:	89d3 000d 89a1 000d                         ........

000dd9ac <day_name.4725>:
   dd9ac:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd9bc:	6972 6153 4a74                                   riSat

000dd9c1 <mon_name.4726>:
   dd9c1:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd9d1:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd9e1:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd9f1:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dda01:	6425 000a                                   %d..

000dda05 <_ctype_>:
   dda05:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dda15:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dda25:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dda35:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dda45:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dda55:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dda65:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dda75:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dda85:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddb08 <__sf_fake_stdin>:
	...

000ddb28 <__sf_fake_stdout>:
	...

000ddb48 <__sf_fake_stderr>:
	...
   ddb68:	4f50 4953 0058 002e                         POSIX...

000ddb70 <_DAYS_BEFORE_MONTH>:
   ddb70:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddb80:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddb90:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddba0 <DAYS_IN_MONTH>:
   ddba0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddbb0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbc0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddbd0 <__month_lengths>:
   ddbd0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddbe0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbf0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddc00:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddc10:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddc20:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddc30:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddc40:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddc50:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddc60:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   ddc70:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   ddc80:	302b 6c33 2564 322e 646c 0000               +03ld%.2ld..

000ddc8c <fpi.5344>:
   ddc8c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddc9c:	0000 0000                                   ....

000ddca0 <fpinan.5380>:
   ddca0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ddcb0:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

000ddcc0 <tinytens>:
   ddcc0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddcd0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddce0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
   ddcf0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
   ddd00:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
   ddd10:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
   ddd20:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
   ddd30:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
   ddd40:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
   ddd50:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
   ddd60:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
   ddd70:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
   ddd80:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
   ddd90:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
   ddda0:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
   dddb0:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
   dddc0:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
   dddd0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
   ddde0:	2065 4825 253a 3a4d 5325 2520 0059 4d50     e %H:%M:%S %Y.PM
   dddf0:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
   dde00:	5325 2520 205a 5925 2500 3a49 4d25 253a     %S %Z %Y.%I:%M:%
   dde10:	2053 7025 0000 0000                         S %p....

000dde18 <_C_time_locale>:
   dde18:	dcf0 000d dcf4 000d dcf8 000d dcfc 000d     ................
   dde28:	dd00 000d dd04 000d dd08 000d dd0c 000d     ................
   dde38:	dd10 000d dd14 000d dd18 000d dd1c 000d     ................
   dde48:	dd20 000d dd28 000d dd31 000d dd37 000d      ...(...1...7...
   dde58:	dd00 000d dd3d 000d dd42 000d dd47 000d     ....=...B...G...
   dde68:	dd4e 000d dd58 000d dd60 000d dd69 000d     N...X...`...i...
   dde78:	dd72 000d dd76 000d dd7a 000d dd7e 000d     r...v...z...~...
   dde88:	dd82 000d dd86 000d dd8a 000d dd8e 000d     ................
   dde98:	dd95 000d dd9c 000d dda4 000d ddae 000d     ................
   ddea8:	ddb7 000d ddbe 000d ddc7 000d ddd0 000d     ................
   ddeb8:	ddd9 000d d3c4 000d ddee 000d ddf1 000d     ................
   ddec8:	dd20 000d dd28 000d dd31 000d dd37 000d      ...(...1...7...
   dded8:	dd00 000d dd3d 000d dd42 000d dd47 000d     ....=...B...G...
   ddee8:	dd4e 000d dd58 000d dd60 000d dd69 000d     N...X...`...i...
   ddef8:	d7f8 000d de09 000d d0d5 000d d0d5 000d     ................
   ddf08:	d0d5 000d d0d5 000d d0d5 000d 5a54 4700     ............TZ.G
   ddf18:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   ddf28:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   ddf38:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddf48:	3a6e 6825 2575 006e                         n:%hu%n.

000ddf50 <__mprec_tens>:
   ddf50:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ddf60:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddf70:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ddf80:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ddf90:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ddfa0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddfb0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ddfc0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ddfd0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ddfe0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ddff0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de000:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de010:	9db4 79d9 7843 44ea                         ...yCx.D

000de018 <__mprec_bigtens>:
   de018:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de028:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de038:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de040 <p05.5387>:
   de040:	0005 0000 0019 0000 007d 0000               ........}...

000de04c <link_const_variable_data_end>:
   de04c:	000d5ba1 	.word	0x000d5ba1
   de050:	000d5f4f 	.word	0x000d5f4f
   de054:	000d6805 	.word	0x000d6805
   de058:	000d6ef5 	.word	0x000d6ef5
   de05c:	000d6fd5 	.word	0x000d6fd5
   de060:	000d77a1 	.word	0x000d77a1
   de064:	000d7ae9 	.word	0x000d7ae9
   de068:	000d7c0d 	.word	0x000d7c0d
   de06c:	000d7d91 	.word	0x000d7d91
   de070:	000d8279 	.word	0x000d8279
   de074:	000d84cd 	.word	0x000d84cd
   de078:	000d8889 	.word	0x000d8889
   de07c:	000d8d25 	.word	0x000d8d25
   de080:	000d8d7d 	.word	0x000d8d7d
   de084:	000d8e41 	.word	0x000d8e41
   de088:	000d8ec5 	.word	0x000d8ec5
   de08c:	000d8f49 	.word	0x000d8f49
