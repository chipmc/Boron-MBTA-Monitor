
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/1.5.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009f10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000ddf30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000164  2003dd44  000de74c  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000948  2003dea8  2003dea8  0002dea8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000de8b0  000de8b0  0001e8b0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de8dc  000de8dc  0001e8dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001923e3  00000000  00000000  0001e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e194  00000000  00000000  001b0cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032f37  00000000  00000000  001cee57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003bf0  00000000  00000000  00201d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007158  00000000  00000000  0020597e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047996  00000000  00000000  0020cad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d3fc  00000000  00000000  0025446c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123fa2  00000000  00000000  002a1868  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001174c  00000000  00000000  003c580c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f915 	bl	db260 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f935 	bl	db2ac <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd44 	.word	0x2003dd44
   d404c:	000de74c 	.word	0x000de74c
   d4050:	2003dea8 	.word	0x2003dea8
   d4054:	2003dea8 	.word	0x2003dea8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 ffa7 	bl	d9fb0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000ddf24 	.word	0x000ddf24
   d4084:	000ddeb8 	.word	0x000ddeb8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b96e 	b.w	d5368 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ff6f 	bl	d4f70 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bf4d 	b.w	d9f34 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b959 	b.w	d8350 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b95f 	b.w	d8360 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b95d 	b.w	d8360 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 f816 	bl	d80e0 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7d61 	.word	0x000d7d61

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40cc:	4b01      	ldr	r3, [pc, #4]	; (d40d4 <_Z11watchdogISRv+0x8>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	701a      	strb	r2, [r3, #0]
   d40d2:	4770      	bx	lr
   d40d4:	2003df38 	.word	0x2003df38

000d40d8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40da:	6803      	ldr	r3, [r0, #0]
   d40dc:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40de:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40e0:	d904      	bls.n	d40ec <nrf_gpio_pin_port_decode+0x14>
   d40e2:	4a07      	ldr	r2, [pc, #28]	; (d4100 <nrf_gpio_pin_port_decode+0x28>)
   d40e4:	2100      	movs	r1, #0
   d40e6:	200a      	movs	r0, #10
   d40e8:	f003 fffa 	bl	d80e0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40f0:	bf83      	ittte	hi
   d40f2:	f003 031f 	andhi.w	r3, r3, #31
   d40f6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f8:	4802      	ldrhi	r0, [pc, #8]	; (d4104 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40fa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	000d7d61 	.word	0x000d7d61
   d4104:	50000300 	.word	0x50000300

000d4108 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d410c:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d410e:	b128      	cbz	r0, d411c <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4110:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4112:	210c      	movs	r1, #12
   d4114:	f006 f849 	bl	da1aa <_ZdlPvj>
            wakeupSource = next;
   d4118:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d411a:	e7f8      	b.n	d410e <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d411c:	4620      	mov	r0, r4
   d411e:	bd38      	pop	{r3, r4, r5, pc}

000d4120 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z9resetFRAM6String+0x14>)
   d4124:	f005 fb5d 	bl	d97e2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4128:	b118      	cbz	r0, d4132 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d412a:	4803      	ldr	r0, [pc, #12]	; (d4138 <_Z9resetFRAM6String+0x18>)
   d412c:	f001 fcc2 	bl	d5ab4 <_ZN6MB85RC5eraseEv>
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dceb8 	.word	0x000dceb8
   d4138:	2003deb8 	.word	0x2003deb8

000d413c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d413c:	b508      	push	{r3, lr}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z7sendNow6String+0x14>)
   d4140:	f005 fb4f 	bl	d97e2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4146:	4b03      	ldr	r3, [pc, #12]	; (d4154 <_Z7sendNow6String+0x18>)
   d4148:	2203      	movs	r2, #3
   d414a:	701a      	strb	r2, [r3, #0]
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dceb8 	.word	0x000dceb8
   d4154:	2003defd 	.word	0x2003defd

000d4158 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4158:	b510      	push	{r4, lr}
   d415a:	4b03      	ldr	r3, [pc, #12]	; (d4168 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d415c:	6003      	str	r3, [r0, #0]
   d415e:	4604      	mov	r4, r0
   d4160:	f002 fcfe 	bl	d6b60 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}
   d4168:	000dca40 	.word	0x000dca40

000d416c <_ZN17PublishQueueAsyncD0Ev>:
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f7ff fff2 	bl	d4158 <_ZN17PublishQueueAsyncD1Ev>
   d4174:	4620      	mov	r0, r4
   d4176:	2138      	movs	r1, #56	; 0x38
   d4178:	f006 f817 	bl	da1aa <_ZdlPvj>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4180:	b510      	push	{r4, lr}
   d4182:	4b03      	ldr	r3, [pc, #12]	; (d4190 <_ZN8MB85RC64D1Ev+0x10>)
   d4184:	6003      	str	r3, [r0, #0]
   d4186:	4604      	mov	r4, r0
   d4188:	f001 fc74 	bl	d5a74 <_ZN6MB85RCD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}
   d4190:	000dca24 	.word	0x000dca24

000d4194 <_ZN8MB85RC64D0Ev>:
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
   d4198:	f7ff fff2 	bl	d4180 <_ZN8MB85RC64D1Ev>
   d419c:	4620      	mov	r0, r4
   d419e:	2110      	movs	r1, #16
   d41a0:	f006 f803 	bl	da1aa <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f004 f8d6 	bl	d8360 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ba:	f004 f839 	bl	d8230 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41be:	b120      	cbz	r0, d41ca <_ZN10CloudClass8syncTimeEv.isra.11+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
    }
   d41c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d41c6:	f004 b853 	b.w	d8270 <spark_sync_time>
    }
   d41ca:	bd08      	pop	{r3, pc}

000d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ce:	2000      	movs	r0, #0
   d41d0:	f004 f856 	bl	d8280 <spark_sync_time_pending>
   d41d4:	b128      	cbz	r0, d41e2 <_ZN10CloudClass12syncTimeDoneEv.isra.13+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d6:	f004 f82b 	bl	d8230 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41da:	f080 0001 	eor.w	r0, r0, #1
   d41de:	b2c0      	uxtb	r0, r0
   d41e0:	bd08      	pop	{r3, pc}
   d41e2:	2001      	movs	r0, #1
    }
   d41e4:	bd08      	pop	{r3, pc}

000d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41e6:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41e8:	2100      	movs	r1, #0
   d41ea:	4604      	mov	r4, r0
   d41ec:	4608      	mov	r0, r1
   d41ee:	f003 fd57 	bl	d7ca0 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f2:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41f6:	2100      	movs	r1, #0
   d41f8:	2001      	movs	r0, #1
   d41fa:	f003 fd51 	bl	d7ca0 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41fe:	b2e0      	uxtb	r0, r4
   d4200:	bd10      	pop	{r4, pc}

000d4202 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>:
	/**
	 * @brief Returns the longitude in degrees as a float. May be positive or negative.
 	 *
	 * Negative values are used for east longitude.
	 */
	float readLonDeg(void) const {
   d4202:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4204:	2100      	movs	r1, #0
   d4206:	b08f      	sub	sp, #60	; 0x3c
   d4208:	4604      	mov	r4, r0
   d420a:	4608      	mov	r0, r1
   d420c:	f003 fd48 	bl	d7ca0 <os_thread_scheduling>
	/**
	 * @brief Get the location (latitude and longitude)
	 */
	TinyGPSLocation getLocation() const {
	    SINGLE_THREADED_BLOCK() {
	    	return location;
   d4210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4212:	466d      	mov	r5, sp
   d4214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4222:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4226:	2100      	movs	r1, #0
   d4228:	2001      	movs	r0, #1
   d422a:	f003 fd39 	bl	d7ca0 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d422e:	4668      	mov	r0, sp
   d4230:	f003 fa06 	bl	d7640 <_ZN15TinyGPSLocation3lngEv>
   d4234:	ec51 0b10 	vmov	r0, r1, d0
   d4238:	f006 fdce 	bl	dadd8 <__aeabi_d2f>
	}
   d423c:	ee00 0a10 	vmov	s0, r0
   d4240:	b00f      	add	sp, #60	; 0x3c
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>:
	/**
	 * @brief Returns the latitude in degrees as a float. May be positive or negative.
	 *
	 * Negative values are used for south latitude.
	 */
	float readLatDeg(void) const {
   d4244:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4246:	2100      	movs	r1, #0
   d4248:	b08f      	sub	sp, #60	; 0x3c
   d424a:	4604      	mov	r4, r0
   d424c:	4608      	mov	r0, r1
   d424e:	f003 fd27 	bl	d7ca0 <os_thread_scheduling>
   d4252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4254:	466d      	mov	r5, sp
   d4256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4264:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4268:	2100      	movs	r1, #0
   d426a:	2001      	movs	r0, #1
   d426c:	f003 fd18 	bl	d7ca0 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d4270:	4668      	mov	r0, sp
   d4272:	f003 f9bd 	bl	d75f0 <_ZN15TinyGPSLocation3latEv>
   d4276:	ec51 0b10 	vmov	r0, r1, d0
   d427a:	f006 fdad 	bl	dadd8 <__aeabi_d2f>
	}
   d427e:	ee00 0a10 	vmov	s0, r0
   d4282:	b00f      	add	sp, #60	; 0x3c
   d4284:	bd30      	pop	{r4, r5, pc}

000d4286 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4286:	2000      	movs	r0, #0
   d4288:	f003 bda2 	b.w	d7dd0 <hal_timer_millis>

000d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d428c:	b508      	push	{r3, lr}
   d428e:	ed2d 8b02 	vpush	{d8}
   d4292:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4296:	b128      	cbz	r0, d42a4 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4298:	3801      	subs	r0, #1
   d429a:	f7ff fff7 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d429e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d42a2:	e001      	b.n	d42a8 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d42a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d42a8:	ecbd 8b02 	vpop	{d8}
   d42ac:	bd08      	pop	{r3, pc}

000d42ae <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42ae:	b40e      	push	{r1, r2, r3}
   d42b0:	b500      	push	{lr}
   d42b2:	b08c      	sub	sp, #48	; 0x30
   d42b4:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42b6:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42b8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d42bc:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42be:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42c2:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c4:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42c6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c8:	aa04      	add	r2, sp, #16
   d42ca:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42cc:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42ce:	f003 ff0f 	bl	d80f0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d42d2:	b00c      	add	sp, #48	; 0x30
   d42d4:	f85d eb04 	ldr.w	lr, [sp], #4
   d42d8:	b003      	add	sp, #12
   d42da:	4770      	bx	lr

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d42fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42fc:	b092      	sub	sp, #72	; 0x48
   d42fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4300:	b923      	cbnz	r3, d430c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4302:	4919      	ldr	r1, [pc, #100]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4304:	a802      	add	r0, sp, #8
   d4306:	f007 fa59 	bl	db7bc <strcpy>
   d430a:	e017      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d430c:	4608      	mov	r0, r1
   d430e:	f006 fdef 	bl	daef0 <atoi>
   d4312:	28c8      	cmp	r0, #200	; 0xc8
   d4314:	d004      	beq.n	d4320 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4316:	4620      	mov	r0, r4
   d4318:	f006 fdea 	bl	daef0 <atoi>
   d431c:	28c9      	cmp	r0, #201	; 0xc9
   d431e:	d119      	bne.n	d4354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4320:	4912      	ldr	r1, [pc, #72]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f007 fa4a 	bl	db7bc <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4328:	f005 fc95 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d432c:	4b10      	ldr	r3, [pc, #64]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432e:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4330:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4332:	2201      	movs	r2, #1
   d4334:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4338:	2200      	movs	r2, #0
   d433a:	701a      	strb	r2, [r3, #0]
   d433c:	4b0f      	ldr	r3, [pc, #60]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d433e:	4910      	ldr	r1, [pc, #64]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	4810      	ldr	r0, [pc, #64]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4344:	2200      	movs	r2, #0
   d4346:	f88d 2000 	strb.w	r2, [sp]
   d434a:	aa02      	add	r2, sp, #8
   d434c:	f7ff ffc6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4350:	b012      	add	sp, #72	; 0x48
   d4352:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4354:	4620      	mov	r0, r4
   d4356:	f006 fdcb 	bl	daef0 <atoi>
   d435a:	4a0b      	ldr	r2, [pc, #44]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	4603      	mov	r3, r0
   d435e:	2140      	movs	r1, #64	; 0x40
   d4360:	a802      	add	r0, sp, #8
   d4362:	f004 f81d 	bl	d83a0 <snprintf>
   d4366:	e7e9      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4368:	000dcaa4 	.word	0x000dcaa4
   d436c:	000dcab9 	.word	0x000dcab9
   d4370:	2003e04c 	.word	0x2003e04c
   d4374:	2003defc 	.word	0x2003defc
   d4378:	2003dff0 	.word	0x2003dff0
   d437c:	2003dee4 	.word	0x2003dee4
   d4380:	000dcaac 	.word	0x000dcaac
   d4384:	2003e010 	.word	0x2003e010
   d4388:	000dcacb 	.word	0x000dcacb

000d438c <_Z12hardResetNow6String>:
  else return 0;
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d438c:	b513      	push	{r0, r1, r4, lr}
   d438e:	490b      	ldr	r1, [pc, #44]	; (d43bc <_Z12hardResetNow6String+0x30>)
   d4390:	f005 fa27 	bl	d97e2 <_ZNK6String6equalsEPKc>
   d4394:	2400      	movs	r4, #0
  if (command == "1")
   d4396:	b178      	cbz	r0, d43b8 <_Z12hardResetNow6String+0x2c>
   d4398:	4b09      	ldr	r3, [pc, #36]	; (d43c0 <_Z12hardResetNow6String+0x34>)
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d439a:	4a0a      	ldr	r2, [pc, #40]	; (d43c4 <_Z12hardResetNow6String+0x38>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d439c:	781b      	ldrb	r3, [r3, #0]
   d439e:	490a      	ldr	r1, [pc, #40]	; (d43c8 <_Z12hardResetNow6String+0x3c>)
   d43a0:	f88d 4000 	strb.w	r4, [sp]
   d43a4:	4809      	ldr	r0, [pc, #36]	; (d43cc <_Z12hardResetNow6String+0x40>)
   d43a6:	f7ff ff99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    rtc.setAlarm(10);
   d43aa:	4623      	mov	r3, r4
   d43ac:	2201      	movs	r2, #1
   d43ae:	210a      	movs	r1, #10
   d43b0:	4807      	ldr	r0, [pc, #28]	; (d43d0 <_Z12hardResetNow6String+0x44>)
   d43b2:	f002 f898 	bl	d64e6 <_ZN8MCP794108setAlarmEibi>
   d43b6:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d43b8:	b002      	add	sp, #8
   d43ba:	bd10      	pop	{r4, pc}
   d43bc:	000dceb8 	.word	0x000dceb8
   d43c0:	2003dee4 	.word	0x2003dee4
   d43c4:	000dcae8 	.word	0x000dcae8
   d43c8:	000dcd2c 	.word	0x000dcd2c
   d43cc:	2003e010 	.word	0x2003e010
   d43d0:	2003dec8 	.word	0x2003dec8

000d43d4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d6:	491a      	ldr	r1, [pc, #104]	; (d4440 <_Z14setverboseMode6String+0x6c>)
   d43d8:	4604      	mov	r4, r0
   d43da:	f005 fa02 	bl	d97e2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43de:	4605      	mov	r5, r0
   d43e0:	b1a0      	cbz	r0, d440c <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
   d43e2:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d43e4:	2401      	movs	r4, #1
   d43e6:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d43e8:	4b17      	ldr	r3, [pc, #92]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d43ea:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ec:	f003 ff20 	bl	d8230 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f0:	b908      	cbnz	r0, d43f6 <_Z14setverboseMode6String+0x22>
    return 1;
   d43f2:	2001      	movs	r0, #1
   d43f4:	e022      	b.n	d443c <_Z14setverboseMode6String+0x68>
   d43f6:	4b15      	ldr	r3, [pc, #84]	; (d444c <_Z14setverboseMode6String+0x78>)
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f8:	4915      	ldr	r1, [pc, #84]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d43fa:	781b      	ldrb	r3, [r3, #0]
   d43fc:	4815      	ldr	r0, [pc, #84]	; (d4454 <_Z14setverboseMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d43fe:	2200      	movs	r2, #0
   d4400:	f88d 2000 	strb.w	r2, [sp]
   d4404:	4a14      	ldr	r2, [pc, #80]	; (d4458 <_Z14setverboseMode6String+0x84>)
   d4406:	f7ff ff69 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d440a:	e7f2      	b.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d440c:	4913      	ldr	r1, [pc, #76]	; (d445c <_Z14setverboseMode6String+0x88>)
   d440e:	4620      	mov	r0, r4
   d4410:	f005 f9e7 	bl	d97e2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4414:	b190      	cbz	r0, d443c <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
   d4416:	4b0b      	ldr	r3, [pc, #44]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d4418:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d441a:	4b0b      	ldr	r3, [pc, #44]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d441c:	2401      	movs	r4, #1
   d441e:	701c      	strb	r4, [r3, #0]
   d4420:	f003 ff06 	bl	d8230 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	2800      	cmp	r0, #0
   d4426:	d0e4      	beq.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d4428:	4b08      	ldr	r3, [pc, #32]	; (d444c <_Z14setverboseMode6String+0x78>)
   d442a:	4a0d      	ldr	r2, [pc, #52]	; (d4460 <_Z14setverboseMode6String+0x8c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d442c:	781b      	ldrb	r3, [r3, #0]
   d442e:	4908      	ldr	r1, [pc, #32]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d4430:	f88d 5000 	strb.w	r5, [sp]
   d4434:	4807      	ldr	r0, [pc, #28]	; (d4454 <_Z14setverboseMode6String+0x80>)
   d4436:	f7ff ff51 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d443a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d443c:	b003      	add	sp, #12
   d443e:	bd30      	pop	{r4, r5, pc}
   d4440:	000dceb8 	.word	0x000dceb8
   d4444:	2003e04c 	.word	0x2003e04c
   d4448:	2003defc 	.word	0x2003defc
   d444c:	2003dee4 	.word	0x2003dee4
   d4450:	000dcb23 	.word	0x000dcb23
   d4454:	2003e010 	.word	0x2003e010
   d4458:	000dcb00 	.word	0x000dcb00
   d445c:	000dcb11 	.word	0x000dcb11
   d4460:	000dcb13 	.word	0x000dcb13
   d4464:	00000000 	.word	0x00000000

000d4468 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d446c:	b0cb      	sub	sp, #300	; 0x12c
   d446e:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4470:	f7ff fea2 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4474:	f7ff ff07 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4478:	2700      	movs	r7, #0
   d447a:	4606      	mov	r6, r0
   d447c:	f247 582f 	movw	r8, #29999	; 0x752f
   d4480:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4484:	f7ff feff 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4488:	1b80      	subs	r0, r0, r6
   d448a:	eb61 0107 	sbc.w	r1, r1, r7
   d448e:	4589      	cmp	r9, r1
   d4490:	bf08      	it	eq
   d4492:	4580      	cmpeq	r8, r0
   d4494:	d305      	bcc.n	d44a2 <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4496:	f7ff fe99 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d449a:	b910      	cbnz	r0, d44a2 <_Z11setTimeZone6String+0x3a>
            spark_process();
   d449c:	f003 feb0 	bl	d8200 <spark_process>
   d44a0:	e7f0      	b.n	d4484 <_Z11setTimeZone6String+0x1c>
   d44a2:	f7ff fe93 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44a6:	220a      	movs	r2, #10
   d44a8:	a905      	add	r1, sp, #20
   d44aa:	6820      	ldr	r0, [r4, #0]
   d44ac:	f007 ff74 	bl	dc398 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44b0:	f100 030c 	add.w	r3, r0, #12
   d44b4:	b2db      	uxtb	r3, r3
   d44b6:	2b18      	cmp	r3, #24
   d44b8:	d849      	bhi.n	d454e <_Z11setTimeZone6String+0xe6>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44ba:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44bc:	ee07 5a90 	vmov	s15, r5
   d44c0:	4b27      	ldr	r3, [pc, #156]	; (d4560 <_Z11setTimeZone6String+0xf8>)
   d44c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44c6:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44c8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44cc:	f005 fa9c 	bl	d9a08 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44d0:	4b24      	ldr	r3, [pc, #144]	; (d4564 <_Z11setTimeZone6String+0xfc>)
   d44d2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44d4:	f005 fa8a 	bl	d99ec <_ZN9TimeClass5localEv>
   d44d8:	4606      	mov	r6, r0
   d44da:	f005 fbbc 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d44de:	1a30      	subs	r0, r6, r0
   d44e0:	f006 f91c 	bl	da71c <__aeabi_i2d>
   d44e4:	a31c      	add	r3, pc, #112	; (adr r3, d4558 <_Z11setTimeZone6String+0xf0>)
   d44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ea:	f006 faa7 	bl	daa3c <__aeabi_ddiv>
   d44ee:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <_Z11setTimeZone6String+0x100>)
   d44f0:	e9cd 0100 	strd	r0, r1, [sp]
   d44f4:	210a      	movs	r1, #10
   d44f6:	481d      	ldr	r0, [pc, #116]	; (d456c <_Z11setTimeZone6String+0x104>)
   d44f8:	f003 ff52 	bl	d83a0 <snprintf>
   d44fc:	f003 fe98 	bl	d8230 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4500:	b318      	cbz	r0, d454a <_Z11setTimeZone6String+0xe2>
   d4502:	4e1b      	ldr	r6, [pc, #108]	; (d4570 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4504:	4a1b      	ldr	r2, [pc, #108]	; (d4574 <_Z11setTimeZone6String+0x10c>)
   d4506:	462b      	mov	r3, r5
   d4508:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d450c:	2500      	movs	r5, #0
   d450e:	a80a      	add	r0, sp, #40	; 0x28
   d4510:	f003 ff46 	bl	d83a0 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4514:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d4518:	f88d 5000 	strb.w	r5, [sp]
   d451c:	aa0a      	add	r2, sp, #40	; 0x28
   d451e:	4817      	ldr	r0, [pc, #92]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4520:	f7ff fedc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4524:	f005 fb97 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d4528:	4601      	mov	r1, r0
   d452a:	a806      	add	r0, sp, #24
   d452c:	f005 fabc 	bl	d9aa8 <_ZN9TimeClass7timeStrEl>
   d4530:	9b06      	ldr	r3, [sp, #24]
   d4532:	9303      	str	r3, [sp, #12]
   d4534:	9a03      	ldr	r2, [sp, #12]
   d4536:	7833      	ldrb	r3, [r6, #0]
   d4538:	490f      	ldr	r1, [pc, #60]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d453a:	f88d 5000 	strb.w	r5, [sp]
   d453e:	480f      	ldr	r0, [pc, #60]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4540:	f7ff fecc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4544:	a806      	add	r0, sp, #24
   d4546:	f005 f8d8 	bl	d96fa <_ZN6StringD1Ev>
  }

  return 1;
   d454a:	4620      	mov	r0, r4
   d454c:	e000      	b.n	d4550 <_Z11setTimeZone6String+0xe8>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d454e:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
   d4550:	b04b      	add	sp, #300	; 0x12c
   d4552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4556:	bf00      	nop
   d4558:	00000000 	.word	0x00000000
   d455c:	40ac2000 	.word	0x40ac2000
   d4560:	2003e04c 	.word	0x2003e04c
   d4564:	2003defc 	.word	0x2003defc
   d4568:	000dcb28 	.word	0x000dcb28
   d456c:	2003deac 	.word	0x2003deac
   d4570:	2003dee4 	.word	0x2003dee4
   d4574:	000dcb32 	.word	0x000dcb32
   d4578:	000dcb46 	.word	0x000dcb46
   d457c:	2003e010 	.word	0x2003e010

000d4580 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4580:	b530      	push	{r4, r5, lr}
   d4582:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4584:	220a      	movs	r2, #10
   d4586:	a903      	add	r1, sp, #12
   d4588:	6800      	ldr	r0, [r0, #0]
   d458a:	f007 ff05 	bl	dc398 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d458e:	b2c3      	uxtb	r3, r0
   d4590:	1e5a      	subs	r2, r3, #1
   d4592:	2a3b      	cmp	r2, #59	; 0x3b
   d4594:	d81e      	bhi.n	d45d4 <_Z17setSampleInterval6String+0x54>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d4596:	4a12      	ldr	r2, [pc, #72]	; (d45e0 <_Z17setSampleInterval6String+0x60>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d4598:	4d12      	ldr	r5, [pc, #72]	; (d45e4 <_Z17setSampleInterval6String+0x64>)
  systemStatusWriteNeeded = true;
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d459a:	4813      	ldr	r0, [pc, #76]	; (d45e8 <_Z17setSampleInterval6String+0x68>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d459c:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d459e:	2401      	movs	r4, #1
   d45a0:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45a2:	210c      	movs	r1, #12
   d45a4:	4a11      	ldr	r2, [pc, #68]	; (d45ec <_Z17setSampleInterval6String+0x6c>)
   d45a6:	f003 fefb 	bl	d83a0 <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45aa:	79ab      	ldrb	r3, [r5, #6]
   d45ac:	4a10      	ldr	r2, [pc, #64]	; (d45f0 <_Z17setSampleInterval6String+0x70>)
   d45ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45b2:	a804      	add	r0, sp, #16
   d45b4:	f003 fef4 	bl	d83a0 <snprintf>
   d45b8:	f003 fe3a 	bl	d8230 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45bc:	b160      	cbz	r0, d45d8 <_Z17setSampleInterval6String+0x58>
   d45be:	4b0d      	ldr	r3, [pc, #52]	; (d45f4 <_Z17setSampleInterval6String+0x74>)
    publishQueue.publish("Interval", data, PRIVATE);
   d45c0:	490d      	ldr	r1, [pc, #52]	; (d45f8 <_Z17setSampleInterval6String+0x78>)
   d45c2:	781b      	ldrb	r3, [r3, #0]
   d45c4:	480d      	ldr	r0, [pc, #52]	; (d45fc <_Z17setSampleInterval6String+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d45c6:	2200      	movs	r2, #0
   d45c8:	f88d 2000 	strb.w	r2, [sp]
   d45cc:	aa04      	add	r2, sp, #16
   d45ce:	f7ff fe85 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45d2:	e001      	b.n	d45d8 <_Z17setSampleInterval6String+0x58>

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45d4:	2000      	movs	r0, #0
   d45d6:	e000      	b.n	d45da <_Z17setSampleInterval6String+0x5a>
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
  if (Particle.connected()) {
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
   d45d8:	4620      	mov	r0, r4
}
   d45da:	b045      	add	sp, #276	; 0x114
   d45dc:	bd30      	pop	{r4, r5, pc}
   d45de:	bf00      	nop
   d45e0:	2003defc 	.word	0x2003defc
   d45e4:	2003e04c 	.word	0x2003e04c
   d45e8:	2003ddd1 	.word	0x2003ddd1
   d45ec:	000dcb62 	.word	0x000dcb62
   d45f0:	000dcb4b 	.word	0x000dcb4b
   d45f4:	2003dee4 	.word	0x2003dee4
   d45f8:	000dcd96 	.word	0x000dcd96
   d45fc:	2003e010 	.word	0x2003e010

000d4600 <_Z9sendEventv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d4600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4604:	4b23      	ldr	r3, [pc, #140]	; (d4694 <_Z9sendEventv+0x94>)
   d4606:	4c24      	ldr	r4, [pc, #144]	; (d4698 <_Z9sendEventv+0x98>)
   d4608:	689d      	ldr	r5, [r3, #8]
   d460a:	69a2      	ldr	r2, [r4, #24]
   d460c:	691b      	ldr	r3, [r3, #16]
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d460e:	b0d3      	sub	sp, #332	; 0x14c
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4610:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4614:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d4618:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d461c:	9311      	str	r3, [sp, #68]	; 0x44
   d461e:	9210      	str	r2, [sp, #64]	; 0x40
   d4620:	f005 fb19 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d4624:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d4628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d462c:	ed94 7b08 	vldr	d7, [r4, #32]
   d4630:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d4632:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4634:	9308      	str	r3, [sp, #32]
   d4636:	4b19      	ldr	r3, [pc, #100]	; (d469c <_Z9sendEventv+0x9c>)
   d4638:	900a      	str	r0, [sp, #40]	; 0x28
   d463a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d463e:	9209      	str	r2, [sp, #36]	; 0x24
   d4640:	9307      	str	r3, [sp, #28]
   d4642:	9506      	str	r5, [sp, #24]
   d4644:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d4648:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d464c:	e9cd 6700 	strd	r6, r7, [sp]
   d4650:	4a13      	ldr	r2, [pc, #76]	; (d46a0 <_Z9sendEventv+0xa0>)
   d4652:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4656:	a812      	add	r0, sp, #72	; 0x48
   d4658:	f003 fea2 	bl	d83a0 <snprintf>
   d465c:	4b11      	ldr	r3, [pc, #68]	; (d46a4 <_Z9sendEventv+0xa4>)
  publishQueue.publish("Ubidots-MBTA-Hook-v2", data, PRIVATE);
   d465e:	4912      	ldr	r1, [pc, #72]	; (d46a8 <_Z9sendEventv+0xa8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4660:	781b      	ldrb	r3, [r3, #0]
   d4662:	4812      	ldr	r0, [pc, #72]	; (d46ac <_Z9sendEventv+0xac>)
   d4664:	2200      	movs	r2, #0
   d4666:	f88d 2000 	strb.w	r2, [sp]
   d466a:	aa12      	add	r2, sp, #72	; 0x48
   d466c:	f7ff fe36 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4670:	4b0f      	ldr	r3, [pc, #60]	; (d46b0 <_Z9sendEventv+0xb0>)
   d4672:	2201      	movs	r2, #1
   d4674:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4676:	f003 fb7b 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d467a:	4b0e      	ldr	r3, [pc, #56]	; (d46b4 <_Z9sendEventv+0xb4>)
   d467c:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d467e:	f005 faf1 	bl	d9c64 <_ZN9TimeClass4hourEv>
   d4682:	4b0d      	ldr	r3, [pc, #52]	; (d46b8 <_Z9sendEventv+0xb8>)
   d4684:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d4686:	f005 faf7 	bl	d9c78 <_ZN9TimeClass6minuteEv>
   d468a:	4b0c      	ldr	r3, [pc, #48]	; (d46bc <_Z9sendEventv+0xbc>)
   d468c:	6018      	str	r0, [r3, #0]
}
   d468e:	b053      	add	sp, #332	; 0x14c
   d4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4694:	2003e04c 	.word	0x2003e04c
   d4698:	2003dfc0 	.word	0x2003dfc0
   d469c:	2003dee6 	.word	0x2003dee6
   d46a0:	000dcb6d 	.word	0x000dcb6d
   d46a4:	2003dee4 	.word	0x2003dee4
   d46a8:	000dcbfd 	.word	0x000dcbfd
   d46ac:	2003e010 	.word	0x2003e010
   d46b0:	2003dff0 	.word	0x2003dff0
   d46b4:	2003def8 	.word	0x2003def8
   d46b8:	2003df04 	.word	0x2003df04
   d46bc:	2003dfb8 	.word	0x2003dfb8

000d46c0 <_Z7getTempPh>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
  currentCountsWriteNeeded=true;
}

double getTemp(uint8_t addr[8]) {
   d46c0:	b538      	push	{r3, r4, r5, lr}
   d46c2:	ed2d 8b02 	vpush	{d8}
   d46c6:	4605      	mov	r5, r0
  double _temp;
  int   i = 0;
   d46c8:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
   d46ca:	481b      	ldr	r0, [pc, #108]	; (d4738 <_Z7getTempPh+0x78>)
   d46cc:	2200      	movs	r2, #0
   d46ce:	4629      	mov	r1, r5
   d46d0:	f001 f8ee 	bl	d58b0 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46d4:	4818      	ldr	r0, [pc, #96]	; (d4738 <_Z7getTempPh+0x78>)
double getTemp(uint8_t addr[8]) {
  double _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
   d46d6:	eeb0 8a40 	vmov.f32	s16, s0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46da:	f001 f9c3 	bl	d5a64 <_ZN7DS18B208crcCheckEv>
   d46de:	b950      	cbnz	r0, d46f6 <_Z7getTempPh+0x36>
   d46e0:	3401      	adds	r4, #1
   d46e2:	2c04      	cmp	r4, #4
   d46e4:	d1f1      	bne.n	d46ca <_Z7getTempPh+0xa>
    _temp = ds18b20.convertToFahrenheit(_temp);
    Serial.println(_temp);
  }
  else {
    _temp = NAN;
    Serial.println("Invalid reading");
   d46e6:	f005 fbe1 	bl	d9eac <_Z16_fetch_usbserialv>
   d46ea:	4914      	ldr	r1, [pc, #80]	; (d473c <_Z7getTempPh+0x7c>)
   d46ec:	f004 fe0f 	bl	d930e <_ZN5Print7printlnEPKc>
   d46f0:	ed9f 8b0f 	vldr	d8, [pc, #60]	; d4730 <_Z7getTempPh+0x70>
  }

  return _temp;
   d46f4:	e015      	b.n	d4722 <_Z7getTempPh+0x62>

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d46f6:	2c03      	cmp	r4, #3
   d46f8:	d0f5      	beq.n	d46e6 <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d46fa:	eeb0 0a48 	vmov.f32	s0, s16
   d46fe:	480e      	ldr	r0, [pc, #56]	; (d4738 <_Z7getTempPh+0x78>)
   d4700:	f001 f996 	bl	d5a30 <_ZN7DS18B2019convertToFahrenheitEf>
   d4704:	ee10 0a10 	vmov	r0, s0
   d4708:	f006 f81a 	bl	da740 <__aeabi_f2d>
   d470c:	ec41 0b18 	vmov	d8, r0, r1
    Serial.println(_temp);
   d4710:	f005 fbcc 	bl	d9eac <_Z16_fetch_usbserialv>
   d4714:	eeb0 0a48 	vmov.f32	s0, s16
   d4718:	eef0 0a68 	vmov.f32	s1, s17
   d471c:	2102      	movs	r1, #2
   d471e:	f004 fedf 	bl	d94e0 <_ZN5Print7printlnEdi>
    _temp = NAN;
    Serial.println("Invalid reading");
  }

  return _temp;
}
   d4722:	eeb0 0a48 	vmov.f32	s0, s16
   d4726:	eef0 0a68 	vmov.f32	s1, s17
   d472a:	ecbd 8b02 	vpop	{d8}
   d472e:	bd38      	pop	{r3, r4, r5, pc}
   d4730:	00000000 	.word	0x00000000
   d4734:	7ff80000 	.word	0x7ff80000
   d4738:	2003dff4 	.word	0x2003dff4
   d473c:	000dcc12 	.word	0x000dcc12

000d4740 <_Z17getSignalStrengthv>:

void getSignalStrength() {
   d4740:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4742:	4d19      	ldr	r5, [pc, #100]	; (d47a8 <_Z17getSignalStrengthv+0x68>)
   d4744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  }

  return _temp;
}

void getSignalStrength() {
   d4746:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4748:	ac04      	add	r4, sp, #16
   d474a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d474c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d474e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4750:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4754:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4758:	4914      	ldr	r1, [pc, #80]	; (d47ac <_Z17getSignalStrengthv+0x6c>)
   d475a:	a80e      	add	r0, sp, #56	; 0x38
   d475c:	f003 fed2 	bl	d8504 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4760:	a80e      	add	r0, sp, #56	; 0x38
   d4762:	f003 ff22 	bl	d85aa <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4766:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4768:	a80e      	add	r0, sp, #56	; 0x38
   d476a:	f003 ff6f 	bl	d864c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d476e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4770:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4774:	f003 ff50 	bl	d8618 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4778:	ab18      	add	r3, sp, #96	; 0x60
   d477a:	ee10 0a10 	vmov	r0, s0
   d477e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4782:	f005 ffdd 	bl	da740 <__aeabi_f2d>
   d4786:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d478a:	4628      	mov	r0, r5
   d478c:	f005 ffd8 	bl	da740 <__aeabi_f2d>
   d4790:	e9cd 0100 	strd	r0, r1, [sp]
   d4794:	4a06      	ldr	r2, [pc, #24]	; (d47b0 <_Z17getSignalStrengthv+0x70>)
   d4796:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d479a:	4806      	ldr	r0, [pc, #24]	; (d47b4 <_Z17getSignalStrengthv+0x74>)
   d479c:	2140      	movs	r1, #64	; 0x40
   d479e:	f003 fdff 	bl	d83a0 <snprintf>
}
   d47a2:	b019      	add	sp, #100	; 0x64
   d47a4:	bd30      	pop	{r4, r5, pc}
   d47a6:	bf00      	nop
   d47a8:	000dca60 	.word	0x000dca60
   d47ac:	2003e25c 	.word	0x2003e25c
   d47b0:	000dcc22 	.word	0x000dcc22
   d47b4:	2003df6c 	.word	0x2003df6c

000d47b8 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d47b8:	b537      	push	{r0, r1, r2, r4, r5, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47ba:	4d16      	ldr	r5, [pc, #88]	; (d4814 <_Z11petWatchdogv+0x5c>)
   d47bc:	682a      	ldr	r2, [r5, #0]
   d47be:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47c2:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47c6:	a802      	add	r0, sp, #8
   d47c8:	f003 031f 	and.w	r3, r3, #31
   d47cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47d0:	f840 3d08 	str.w	r3, [r0, #-8]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47d4:	f7ff fc80 	bl	d40d8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47d8:	9b00      	ldr	r3, [sp, #0]
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47da:	682a      	ldr	r2, [r5, #0]
   d47dc:	2401      	movs	r4, #1
   d47de:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d47e2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d47e6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47ea:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47ee:	a802      	add	r0, sp, #8
   d47f0:	f003 031f 	and.w	r3, r3, #31
   d47f4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47f8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47fc:	f7ff fc6c 	bl	d40d8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4800:	9b01      	ldr	r3, [sp, #4]
   d4802:	409c      	lsls	r4, r3
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4804:	4b04      	ldr	r3, [pc, #16]	; (d4818 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4806:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d480a:	2200      	movs	r2, #0
   d480c:	701a      	strb	r2, [r3, #0]
}
   d480e:	b003      	add	sp, #12
   d4810:	bd30      	pop	{r4, r5, pc}
   d4812:	bf00      	nop
   d4814:	2003df68 	.word	0x2003df68
   d4818:	2003df38 	.word	0x2003df38

000d481c <_Z14setPowerConfigv>:


// Power Management function
int setPowerConfig() {
   d481c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d481e:	2420      	movs	r4, #32
   d4820:	b090      	sub	sp, #64	; 0x40
   d4822:	4622      	mov	r2, r4
   d4824:	2100      	movs	r1, #0
   d4826:	4668      	mov	r0, sp
   d4828:	f006 fd40 	bl	db2ac <memset>
   d482c:	4622      	mov	r2, r4
   d482e:	2100      	movs	r1, #0
   d4830:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4834:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4838:	f006 fd38 	bl	db2ac <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d483c:	2100      	movs	r1, #0
   d483e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4842:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4846:	f003 fcc1 	bl	d81cc <system_power_management_set_config>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d484a:	f44f 7361 	mov.w	r3, #900	; 0x384
   d484e:	f8ad 3008 	strh.w	r3, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4852:	f8ad 300a 	strh.w	r3, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4856:	f241 0310 	movw	r3, #4112	; 0x1010
   d485a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d485e:	9b00      	ldr	r3, [sp, #0]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4860:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4868:	2100      	movs	r1, #0
   d486a:	4668      	mov	r0, sp

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d486c:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4870:	9300      	str	r3, [sp, #0]
   d4872:	f003 fcab 	bl	d81cc <system_power_management_set_config>
      .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
      .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}
   d4876:	b010      	add	sp, #64	; 0x40
   d4878:	bd10      	pop	{r4, pc}
	...

000d487c <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4880:	481d      	ldr	r0, [pc, #116]	; (d48f8 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4882:	4d1e      	ldr	r5, [pc, #120]	; (d48fc <_Z17connectToParticlev+0x80>)
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	2300      	movs	r3, #0
   d4888:	461a      	mov	r2, r3
   d488a:	4619      	mov	r1, r3
   d488c:	f003 fd30 	bl	d82f0 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4890:	f003 fcbe 	bl	d8210 <spark_cloud_flag_connect>
   d4894:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4898:	f240 36e7 	movw	r6, #999	; 0x3e7
   d489c:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d489e:	f7ff fcf2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48a2:	f04f 0900 	mov.w	r9, #0
   d48a6:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48a8:	f7ff fced 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48ac:	ebb0 0008 	subs.w	r0, r0, r8
   d48b0:	eb61 0109 	sbc.w	r1, r1, r9
   d48b4:	428f      	cmp	r7, r1
   d48b6:	bf08      	it	eq
   d48b8:	4286      	cmpeq	r6, r0
   d48ba:	d305      	bcc.n	d48c8 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48bc:	f003 fcb8 	bl	d8230 <spark_cloud_flag_connected>
   d48c0:	b910      	cbnz	r0, d48c8 <_Z17connectToParticlev+0x4c>
            spark_process();
   d48c2:	f003 fc9d 	bl	d8200 <spark_process>
   d48c6:	e7ef      	b.n	d48a8 <_Z17connectToParticlev+0x2c>
   d48c8:	f003 fcb2 	bl	d8230 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48cc:	b158      	cbz	r0, d48e6 <_Z17connectToParticlev+0x6a>
   d48ce:	f003 fcaf 	bl	d8230 <spark_cloud_flag_connected>

    Particle.process();
  }
  if (Particle.connected()) {
   d48d2:	b130      	cbz	r0, d48e2 <_Z17connectToParticlev+0x66>
    sysStatus.connectedStatus = true;
   d48d4:	4a0a      	ldr	r2, [pc, #40]	; (d4900 <_Z17connectToParticlev+0x84>)
   d48d6:	2301      	movs	r3, #1
   d48d8:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d48da:	4a0a      	ldr	r2, [pc, #40]	; (d4904 <_Z17connectToParticlev+0x88>)
   d48dc:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d48de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d48e6:	f003 fa43 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48ea:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48ec:	f003 fc88 	bl	d8200 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48f0:	3c01      	subs	r4, #1
   d48f2:	d0ec      	beq.n	d48ce <_Z17connectToParticlev+0x52>
   d48f4:	e7d3      	b.n	d489e <_Z17connectToParticlev+0x22>
   d48f6:	bf00      	nop
   d48f8:	2003e25c 	.word	0x2003e25c
   d48fc:	2003e608 	.word	0x2003e608
   d4900:	2003e04c 	.word	0x2003e04c
   d4904:	2003defc 	.word	0x2003defc

000d4908 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4908:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d490a:	f003 fc91 	bl	d8230 <spark_cloud_flag_connected>
  return !Particle.connected();
   d490e:	f080 0001 	eor.w	r0, r0, #1
}
   d4912:	b2c0      	uxtb	r0, r0
   d4914:	bd08      	pop	{r3, pc}
	...

000d4918 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d491a:	f003 fc81 	bl	d8220 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d491e:	f7ff fcb2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4922:	2500      	movs	r5, #0
   d4924:	4604      	mov	r4, r0
   d4926:	f643 2697 	movw	r6, #14999	; 0x3a97
   d492a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d492c:	f7ff fcab 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4930:	1b00      	subs	r0, r0, r4
   d4932:	eb61 0105 	sbc.w	r1, r1, r5
   d4936:	428f      	cmp	r7, r1
   d4938:	bf08      	it	eq
   d493a:	4286      	cmpeq	r6, r0
   d493c:	d305      	bcc.n	d494a <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d493e:	f7ff ffe3 	bl	d4908 <_Z12notConnectedv>
   d4942:	b910      	cbnz	r0, d494a <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4944:	f003 fc5c 	bl	d8200 <spark_process>
   d4948:	e7f0      	b.n	d492c <_Z22disconnectFromParticlev+0x14>
   d494a:	f7ff ffdd 	bl	d4908 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d494e:	4809      	ldr	r0, [pc, #36]	; (d4974 <_Z22disconnectFromParticlev+0x5c>)
   d4950:	2300      	movs	r3, #0
   d4952:	4619      	mov	r1, r3
   d4954:	461a      	mov	r2, r3
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f003 fcd2 	bl	d8300 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d495c:	4b06      	ldr	r3, [pc, #24]	; (d4978 <_Z22disconnectFromParticlev+0x60>)
   d495e:	2200      	movs	r2, #0
   d4960:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4962:	4b06      	ldr	r3, [pc, #24]	; (d497c <_Z22disconnectFromParticlev+0x64>)
   d4964:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d496a:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d496c:	f003 fd40 	bl	d83f0 <delay>
  return true;
}
   d4970:	4620      	mov	r0, r4
   d4972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4974:	2003e25c 	.word	0x2003e25c
   d4978:	2003e04c 	.word	0x2003e04c
   d497c:	2003defc 	.word	0x2003defc

000d4980 <_Z22publishStateTransitionv>:

  return 1;
}

void publishStateTransition(void)
{
   d4980:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4982:	4d13      	ldr	r5, [pc, #76]	; (d49d0 <_Z22publishStateTransitionv+0x50>)
   d4984:	4c13      	ldr	r4, [pc, #76]	; (d49d4 <_Z22publishStateTransitionv+0x54>)
   d4986:	4914      	ldr	r1, [pc, #80]	; (d49d8 <_Z22publishStateTransitionv+0x58>)
   d4988:	782a      	ldrb	r2, [r5, #0]
   d498a:	7820      	ldrb	r0, [r4, #0]

  return 1;
}

void publishStateTransition(void)
{
   d498c:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d498e:	230e      	movs	r3, #14
   d4990:	fb03 1202 	mla	r2, r3, r2, r1
   d4994:	9200      	str	r2, [sp, #0]
   d4996:	fb03 1300 	mla	r3, r3, r0, r1
   d499a:	4a10      	ldr	r2, [pc, #64]	; (d49dc <_Z22publishStateTransitionv+0x5c>)
   d499c:	2128      	movs	r1, #40	; 0x28
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f003 fcfe 	bl	d83a0 <snprintf>
  oldState = state;
   d49a4:	782b      	ldrb	r3, [r5, #0]
   d49a6:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a8:	f003 fc42 	bl	d8230 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49ac:	b148      	cbz	r0, d49c2 <_Z22publishStateTransitionv+0x42>
   d49ae:	4b0c      	ldr	r3, [pc, #48]	; (d49e0 <_Z22publishStateTransitionv+0x60>)
   d49b0:	490c      	ldr	r1, [pc, #48]	; (d49e4 <_Z22publishStateTransitionv+0x64>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	480c      	ldr	r0, [pc, #48]	; (d49e8 <_Z22publishStateTransitionv+0x68>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d49b6:	2200      	movs	r2, #0
   d49b8:	f88d 2000 	strb.w	r2, [sp]
   d49bc:	aa02      	add	r2, sp, #8
   d49be:	f7ff fc8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49c2:	f005 fa73 	bl	d9eac <_Z16_fetch_usbserialv>
   d49c6:	a902      	add	r1, sp, #8
   d49c8:	f004 fca1 	bl	d930e <_ZN5Print7printlnEPKc>
}
   d49cc:	b00d      	add	sp, #52	; 0x34
   d49ce:	bd30      	pop	{r4, r5, pc}
   d49d0:	2003defd 	.word	0x2003defd
   d49d4:	2003dee5 	.word	0x2003dee5
   d49d8:	2003dd44 	.word	0x2003dd44
   d49dc:	000dcc3b 	.word	0x000dcc3b
   d49e0:	2003dee4 	.word	0x2003dee4
   d49e4:	000dcc49 	.word	0x000dcc49
   d49e8:	2003e010 	.word	0x2003e010

000d49ec <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d49ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d49ee:	f003 fc17 	bl	d8220 <spark_cloud_flag_disconnect>
   d49f2:	f003 f9bd 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d49f6:	f643 2597 	movw	r5, #14999	; 0x3a97
   d49fa:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49fc:	f003 fc18 	bl	d8230 <spark_cloud_flag_connected>
   d4a00:	b140      	cbz	r0, d4a14 <_Z14fullModemResetv+0x28>
   d4a02:	f003 f9b5 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   d4a06:	1b00      	subs	r0, r0, r4
   d4a08:	42a8      	cmp	r0, r5
   d4a0a:	d803      	bhi.n	d4a14 <_Z14fullModemResetv+0x28>
		delay(100);
   d4a0c:	2064      	movs	r0, #100	; 0x64
   d4a0e:	f003 fcef 	bl	d83f0 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4a12:	e7f3      	b.n	d49fc <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4a14:	2100      	movs	r1, #0
   d4a16:	4b09      	ldr	r3, [pc, #36]	; (d4a3c <_Z14fullModemResetv+0x50>)
   d4a18:	f247 5230 	movw	r2, #30000	; 0x7530
   d4a1c:	4608      	mov	r0, r1
   d4a1e:	f003 f90f 	bl	d7c40 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a26:	f003 fce3 	bl	d83f0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4a2a:	4b05      	ldr	r3, [pc, #20]	; (d4a40 <_Z14fullModemResetv+0x54>)
   d4a2c:	220a      	movs	r2, #10
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	2101      	movs	r1, #1
   d4a32:	4668      	mov	r0, sp
   d4a34:	f004 ff46 	bl	d98c4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4a38:	b003      	add	sp, #12
   d4a3a:	bd30      	pop	{r4, r5, pc}
   d4a3c:	000dcc5a 	.word	0x000dcc5a
   d4a40:	2003df54 	.word	0x2003df54

000d4a44 <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a46:	4b15      	ldr	r3, [pc, #84]	; (d4a9c <_Z12dailyCleanupv+0x58>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a48:	4a15      	ldr	r2, [pc, #84]	; (d4aa0 <_Z12dailyCleanupv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	4915      	ldr	r1, [pc, #84]	; (d4aa4 <_Z12dailyCleanupv+0x60>)
   d4a4e:	4816      	ldr	r0, [pc, #88]	; (d4aa8 <_Z12dailyCleanupv+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a50:	2400      	movs	r4, #0
   d4a52:	f88d 4000 	strb.w	r4, [sp]
   d4a56:	f7ff fc41 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a5a:	4b14      	ldr	r3, [pc, #80]	; (d4aac <_Z12dailyCleanupv+0x68>)
   d4a5c:	711c      	strb	r4, [r3, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a5e:	f7ff fbab 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4a62:	f7ff fc10 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a66:	2500      	movs	r5, #0
   d4a68:	4604      	mov	r4, r0
   d4a6a:	f247 562f 	movw	r6, #29999	; 0x752f
   d4a6e:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a70:	f7ff fc09 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a74:	1b00      	subs	r0, r0, r4
   d4a76:	eb61 0105 	sbc.w	r1, r1, r5
   d4a7a:	428f      	cmp	r7, r1
   d4a7c:	bf08      	it	eq
   d4a7e:	4286      	cmpeq	r6, r0
   d4a80:	d305      	bcc.n	d4a8e <_Z12dailyCleanupv+0x4a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a82:	f7ff fba3 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d4a86:	b910      	cbnz	r0, d4a8e <_Z12dailyCleanupv+0x4a>
            spark_process();
   d4a88:	f003 fbba 	bl	d8200 <spark_process>
   d4a8c:	e7f0      	b.n	d4a70 <_Z12dailyCleanupv+0x2c>
   d4a8e:	f7ff fb9d 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  systemStatusWriteNeeded=true;
   d4a92:	4b07      	ldr	r3, [pc, #28]	; (d4ab0 <_Z12dailyCleanupv+0x6c>)
   d4a94:	2201      	movs	r2, #1
   d4a96:	701a      	strb	r2, [r3, #0]
}
   d4a98:	b003      	add	sp, #12
   d4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a9c:	2003dee4 	.word	0x2003dee4
   d4aa0:	000dcc67 	.word	0x000dcc67
   d4aa4:	000dcc6f 	.word	0x000dcc6f
   d4aa8:	2003e010 	.word	0x2003e010
   d4aac:	2003e04c 	.word	0x2003e04c
   d4ab0:	2003defc 	.word	0x2003defc

000d4ab4 <_Z8isDSTusav>:
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
   d4ab4:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4ab6:	f005 f8e9 	bl	d9c8c <_ZN9TimeClass3dayEv>
   d4aba:	4605      	mov	r5, r0
  int month = Time.month();
   d4abc:	f005 f8f7 	bl	d9cae <_ZN9TimeClass5monthEv>
   d4ac0:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4ac2:	f005 f8ed 	bl	d9ca0 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4ac6:	1f23      	subs	r3, r4, #4
   d4ac8:	2b06      	cmp	r3, #6
   d4aca:	d90e      	bls.n	d4aea <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4acc:	1ee3      	subs	r3, r4, #3
   d4ace:	2b08      	cmp	r3, #8
   d4ad0:	d80d      	bhi.n	d4aee <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4ad2:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4ad4:	1a2d      	subs	r5, r5, r0
   d4ad6:	d501      	bpl.n	d4adc <_Z8isDSTusav+0x28>
   d4ad8:	2c0b      	cmp	r4, #11
   d4ada:	e002      	b.n	d4ae2 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4adc:	2d07      	cmp	r5, #7
   d4ade:	dd06      	ble.n	d4aee <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ae0:	2c03      	cmp	r4, #3
   d4ae2:	bf14      	ite	ne
   d4ae4:	2000      	movne	r0, #0
   d4ae6:	2001      	moveq	r0, #1
   d4ae8:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4aea:	2001      	movs	r0, #1
   d4aec:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4aee:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4af0:	bd38      	pop	{r3, r4, r5, pc}
   d4af2:	0000      	movs	r0, r0
   d4af4:	0000      	movs	r0, r0
	...

000d4af8 <_Z12setDSTOffset6String>:
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4af8:	b570      	push	{r4, r5, r6, lr}
   d4afa:	ed2d 8b02 	vpush	{d8}
   d4afe:	b0ca      	sub	sp, #296	; 0x128
   d4b00:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b02:	f005 f8a8 	bl	d9c56 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b06:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b08:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b0a:	a905      	add	r1, sp, #20
   d4b0c:	6820      	ldr	r0, [r4, #0]
   d4b0e:	f007 fc43 	bl	dc398 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4b12:	b2c3      	uxtb	r3, r0
   d4b14:	2b02      	cmp	r3, #2
   d4b16:	d858      	bhi.n	d4bca <_Z12setDSTOffset6String+0xd2>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b18:	b240      	sxtb	r0, r0
   d4b1a:	ee07 0a90 	vmov	s15, r0
   d4b1e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4b22:	eeb0 0a48 	vmov.f32	s0, s16
   d4b26:	f004 ff8b 	bl	d9a40 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b2a:	4b2d      	ldr	r3, [pc, #180]	; (d4be0 <_Z12setDSTOffset6String+0xe8>)
   d4b2c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b30:	4b2c      	ldr	r3, [pc, #176]	; (d4be4 <_Z12setDSTOffset6String+0xec>)
   d4b32:	2201      	movs	r2, #1
   d4b34:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b36:	ee18 0a10 	vmov	r0, s16
   d4b3a:	f005 fe01 	bl	da740 <__aeabi_f2d>
   d4b3e:	4a2a      	ldr	r2, [pc, #168]	; (d4be8 <_Z12setDSTOffset6String+0xf0>)
   d4b40:	e9cd 0100 	strd	r0, r1, [sp]
   d4b44:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b48:	a80a      	add	r0, sp, #40	; 0x28
   d4b4a:	f003 fc29 	bl	d83a0 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b4e:	f005 f861 	bl	d9c14 <_ZN9TimeClass7isValidEv>
   d4b52:	b138      	cbz	r0, d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b54:	f7ff ffae 	bl	d4ab4 <_Z8isDSTusav>
   d4b58:	b110      	cbz	r0, d4b60 <_Z12setDSTOffset6String+0x68>
   d4b5a:	f004 ff8b 	bl	d9a74 <_ZN9TimeClass8beginDSTEv>
   d4b5e:	e001      	b.n	d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b60:	f004 ff92 	bl	d9a88 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b64:	f004 ff42 	bl	d99ec <_ZN9TimeClass5localEv>
   d4b68:	4604      	mov	r4, r0
   d4b6a:	f005 f874 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d4b6e:	1a20      	subs	r0, r4, r0
   d4b70:	f005 fdd4 	bl	da71c <__aeabi_i2d>
   d4b74:	a318      	add	r3, pc, #96	; (adr r3, d4bd8 <_Z12setDSTOffset6String+0xe0>)
   d4b76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7a:	f005 ff5f 	bl	daa3c <__aeabi_ddiv>
   d4b7e:	4a1b      	ldr	r2, [pc, #108]	; (d4bec <_Z12setDSTOffset6String+0xf4>)
   d4b80:	e9cd 0100 	strd	r0, r1, [sp]
   d4b84:	210a      	movs	r1, #10
   d4b86:	481a      	ldr	r0, [pc, #104]	; (d4bf0 <_Z12setDSTOffset6String+0xf8>)
   d4b88:	f003 fc0a 	bl	d83a0 <snprintf>
   d4b8c:	f003 fb50 	bl	d8230 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b90:	b1e8      	cbz	r0, d4bce <_Z12setDSTOffset6String+0xd6>
   d4b92:	4d18      	ldr	r5, [pc, #96]	; (d4bf4 <_Z12setDSTOffset6String+0xfc>)
    publishQueue.publish("Time",data, PRIVATE);
   d4b94:	4918      	ldr	r1, [pc, #96]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4b96:	782b      	ldrb	r3, [r5, #0]
   d4b98:	4818      	ldr	r0, [pc, #96]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b9a:	2400      	movs	r4, #0
   d4b9c:	aa0a      	add	r2, sp, #40	; 0x28
   d4b9e:	f88d 4000 	strb.w	r4, [sp]
   d4ba2:	f7ff fb9b 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4ba6:	4631      	mov	r1, r6
   d4ba8:	a806      	add	r0, sp, #24
   d4baa:	f004 ff7d 	bl	d9aa8 <_ZN9TimeClass7timeStrEl>
   d4bae:	9b06      	ldr	r3, [sp, #24]
   d4bb0:	9303      	str	r3, [sp, #12]
   d4bb2:	f88d 4000 	strb.w	r4, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4bb6:	782b      	ldrb	r3, [r5, #0]
   d4bb8:	9a03      	ldr	r2, [sp, #12]
   d4bba:	490f      	ldr	r1, [pc, #60]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
   d4bbc:	480f      	ldr	r0, [pc, #60]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
   d4bbe:	f7ff fb8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4bc2:	a806      	add	r0, sp, #24
   d4bc4:	f004 fd99 	bl	d96fa <_ZN6StringD1Ev>
   d4bc8:	e001      	b.n	d4bce <_Z12setDSTOffset6String+0xd6>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bca:	2000      	movs	r0, #0
   d4bcc:	e000      	b.n	d4bd0 <_Z12setDSTOffset6String+0xd8>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
   d4bce:	2001      	movs	r0, #1
}
   d4bd0:	b04a      	add	sp, #296	; 0x128
   d4bd2:	ecbd 8b02 	vpop	{d8}
   d4bd6:	bd70      	pop	{r4, r5, r6, pc}
   d4bd8:	00000000 	.word	0x00000000
   d4bdc:	40ac2000 	.word	0x40ac2000
   d4be0:	2003e04c 	.word	0x2003e04c
   d4be4:	2003defc 	.word	0x2003defc
   d4be8:	000dcc7d 	.word	0x000dcc7d
   d4bec:	000dcb28 	.word	0x000dcb28
   d4bf0:	2003deac 	.word	0x2003deac
   d4bf4:	2003dee4 	.word	0x2003dee4
   d4bf8:	000dcb46 	.word	0x000dcb46
   d4bfc:	2003e010 	.word	0x2003e010

000d4c00 <_Z11displayInfov>:
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c04:	4c69      	ldr	r4, [pc, #420]	; (d4dac <_Z11displayInfov+0x1ac>)
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c06:	b0ac      	sub	sp, #176	; 0xb0
   d4c08:	f003 f8b2 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c0c:	6823      	ldr	r3, [r4, #0]
   d4c0e:	1ac0      	subs	r0, r0, r3
   d4c10:	f241 3387 	movw	r3, #4999	; 0x1387
   d4c14:	4298      	cmp	r0, r3
   d4c16:	f240 80c6 	bls.w	d4da6 <_Z11displayInfov+0x1a6>
   d4c1a:	f003 f8a9 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4c1e:	6020      	str	r0, [r4, #0]
   d4c20:	4c63      	ldr	r4, [pc, #396]	; (d4db0 <_Z11displayInfov+0x1b0>)
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c22:	2100      	movs	r1, #0
   d4c24:	6865      	ldr	r5, [r4, #4]
   d4c26:	4608      	mov	r0, r1
   d4c28:	f003 f83a 	bl	d7ca0 <os_thread_scheduling>
   d4c2c:	f895 8000 	ldrb.w	r8, [r5]
   d4c30:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   d4c32:	4d60      	ldr	r5, [pc, #384]	; (d4db4 <_Z11displayInfov+0x1b4>)
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c34:	2100      	movs	r1, #0
   d4c36:	2001      	movs	r0, #1
   d4c38:	f003 f832 	bl	d7ca0 <os_thread_scheduling>
   d4c3c:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4c3e:	f1b8 0f00 	cmp.w	r8, #0
   d4c42:	d070      	beq.n	d4d26 <_Z11displayInfov+0x126>
   d4c44:	f003 f894 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>

		char buf[128];
		if (t.gpsFix()) {
   d4c48:	f242 730f 	movw	r3, #9999	; 0x270f
   d4c4c:	1b80      	subs	r0, r0, r6
   d4c4e:	4298      	cmp	r0, r3
   d4c50:	d869      	bhi.n	d4d26 <_Z11displayInfov+0x126>
      current.latitude = t.readLatDeg();
   d4c52:	6860      	ldr	r0, [r4, #4]
   d4c54:	4e58      	ldr	r6, [pc, #352]	; (d4db8 <_Z11displayInfov+0x1b8>)
   d4c56:	f7ff faf5 	bl	d4244 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c5a:	ee10 0a10 	vmov	r0, s0
   d4c5e:	f005 fd6f 	bl	da740 <__aeabi_f2d>
   d4c62:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4c66:	6860      	ldr	r0, [r4, #4]
   d4c68:	f7ff facb 	bl	d4202 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
   d4c6c:	ee10 0a10 	vmov	r0, s0
   d4c70:	f005 fd66 	bl	da740 <__aeabi_f2d>
   d4c74:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4c78:	6860      	ldr	r0, [r4, #4]
   d4c7a:	f7ff fae3 	bl	d4244 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c7e:	6860      	ldr	r0, [r4, #4]
   d4c80:	ee10 6a10 	vmov	r6, s0
   d4c84:	f7ff fabd 	bl	d4202 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c88:	2100      	movs	r1, #0
   d4c8a:	6867      	ldr	r7, [r4, #4]
   d4c8c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
   d4c90:	4608      	mov	r0, r1
   d4c92:	f003 f805 	bl	d7ca0 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c96:	2100      	movs	r1, #0
   d4c98:	2001      	movs	r0, #1
	/**
	 * @brief Get the altitude
	 */
	TinyGPSAltitude getAltitude() const {
	    SINGLE_THREADED_BLOCK() {
	    	return altitude;
   d4c9a:	f8d7 7080 	ldr.w	r7, [r7, #128]	; 0x80
   d4c9e:	f002 ffff 	bl	d7ca0 <os_thread_scheduling>
   d4ca2:	6860      	ldr	r0, [r4, #4]
   d4ca4:	f7ff fa9f 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4ca8:	4680      	mov	r8, r0
   d4caa:	4620      	mov	r0, r4
   d4cac:	f002 fae0 	bl	d7270 <_ZN12AssetTracker14getTinyGPSPlusEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	4604      	mov	r4, r0
   d4cb4:	4608      	mov	r0, r1
   d4cb6:	f002 fff3 	bl	d7ca0 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4cba:	2100      	movs	r1, #0
   d4cbc:	2001      	movs	r0, #1
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4cbe:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
   d4cc2:	f002 ffed 	bl	d7ca0 <os_thread_scheduling>
   d4cc6:	4638      	mov	r0, r7
   d4cc8:	9407      	str	r4, [sp, #28]
   d4cca:	f8cd 8018 	str.w	r8, [sp, #24]
   d4cce:	f005 fd25 	bl	da71c <__aeabi_i2d>
   d4cd2:	4b3a      	ldr	r3, [pc, #232]	; (d4dbc <_Z11displayInfov+0x1bc>)
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	f005 feb1 	bl	daa3c <__aeabi_ddiv>
   d4cda:	f006 f87d 	bl	dadd8 <__aeabi_d2f>
   d4cde:	f005 fd2f 	bl	da740 <__aeabi_f2d>
   d4ce2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4cea:	ee10 0a10 	vmov	r0, s0
   d4cee:	f005 fd27 	bl	da740 <__aeabi_f2d>
   d4cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f005 fd22 	bl	da740 <__aeabi_f2d>
   d4cfc:	4a30      	ldr	r2, [pc, #192]	; (d4dc0 <_Z11displayInfov+0x1c0>)
   d4cfe:	e9cd 0100 	strd	r0, r1, [sp]
   d4d02:	2180      	movs	r1, #128	; 0x80
   d4d04:	a80c      	add	r0, sp, #48	; 0x30
   d4d06:	f003 fb4b 	bl	d83a0 <snprintf>
			if (gettingFix) {
   d4d0a:	782b      	ldrb	r3, [r5, #0]
   d4d0c:	b1eb      	cbz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = false;
   d4d0e:	2300      	movs	r3, #0
   d4d10:	702b      	strb	r3, [r5, #0]
   d4d12:	f003 f82d 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4d16:	4b2b      	ldr	r3, [pc, #172]	; (d4dc4 <_Z11displayInfov+0x1c4>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4d18:	492b      	ldr	r1, [pc, #172]	; (d4dc8 <_Z11displayInfov+0x1c8>)
   d4d1a:	681a      	ldr	r2, [r3, #0]
   d4d1c:	1a82      	subs	r2, r0, r2
   d4d1e:	482b      	ldr	r0, [pc, #172]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d20:	f7ff fac5 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d24:	e011      	b.n	d4d4a <_Z11displayInfov+0x14a>
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d26:	6878      	ldr	r0, [r7, #4]
   d4d28:	f7ff fa5d 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4d2c:	4a28      	ldr	r2, [pc, #160]	; (d4dd0 <_Z11displayInfov+0x1d0>)
   d4d2e:	4603      	mov	r3, r0
   d4d30:	2180      	movs	r1, #128	; 0x80
   d4d32:	a80c      	add	r0, sp, #48	; 0x30
   d4d34:	f003 fb34 	bl	d83a0 <snprintf>
			if (!gettingFix) {
   d4d38:	782b      	ldrb	r3, [r5, #0]
   d4d3a:	b933      	cbnz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = true;
   d4d3c:	4b1d      	ldr	r3, [pc, #116]	; (d4db4 <_Z11displayInfov+0x1b4>)
   d4d3e:	2201      	movs	r2, #1
   d4d40:	701a      	strb	r2, [r3, #0]
   d4d42:	f003 f815 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4d46:	4b1f      	ldr	r3, [pc, #124]	; (d4dc4 <_Z11displayInfov+0x1c4>)
   d4d48:	6018      	str	r0, [r3, #0]
			}
		}
		Log.info(buf);
   d4d4a:	a90c      	add	r1, sp, #48	; 0x30
   d4d4c:	481f      	ldr	r0, [pc, #124]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d4e:	f7ff faae 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d52:	f003 fa6d 	bl	d8230 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4d56:	b330      	cbz	r0, d4da6 <_Z11displayInfov+0x1a6>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4d58:	4c1e      	ldr	r4, [pc, #120]	; (d4dd4 <_Z11displayInfov+0x1d4>)
   d4d5a:	f003 f809 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   d4d5e:	6823      	ldr	r3, [r4, #0]
   d4d60:	1ac0      	subs	r0, r0, r3
   d4d62:	4b1d      	ldr	r3, [pc, #116]	; (d4dd8 <_Z11displayInfov+0x1d8>)
   d4d64:	4298      	cmp	r0, r3
   d4d66:	d91e      	bls.n	d4da6 <_Z11displayInfov+0x1a6>
   d4d68:	f003 f802 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   d4d6c:	4b1b      	ldr	r3, [pc, #108]	; (d4ddc <_Z11displayInfov+0x1dc>)
				lastPublish = millis();
   d4d6e:	6020      	str	r0, [r4, #0]
   d4d70:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4d72:	f88d 3000 	strb.w	r3, [sp]
   d4d76:	aa0c      	add	r2, sp, #48	; 0x30
   d4d78:	233c      	movs	r3, #60	; 0x3c
   d4d7a:	4919      	ldr	r1, [pc, #100]	; (d4de0 <_Z11displayInfov+0x1e0>)
   d4d7c:	a80a      	add	r0, sp, #40	; 0x28
   d4d7e:	f003 fe31 	bl	d89e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4d82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d4d84:	b17c      	cbz	r4, d4da6 <_Z11displayInfov+0x1a6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d86:	6863      	ldr	r3, [r4, #4]
   d4d88:	3b01      	subs	r3, #1
   d4d8a:	6063      	str	r3, [r4, #4]
   d4d8c:	b95b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
        {
          _M_dispose();
   d4d8e:	6823      	ldr	r3, [r4, #0]
   d4d90:	4620      	mov	r0, r4
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d96:	68a3      	ldr	r3, [r4, #8]
   d4d98:	3b01      	subs	r3, #1
   d4d9a:	60a3      	str	r3, [r4, #8]
   d4d9c:	b91b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
            _M_destroy();
   d4d9e:	6823      	ldr	r3, [r4, #0]
   d4da0:	4620      	mov	r0, r4
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	4798      	blx	r3
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4da6:	b02c      	add	sp, #176	; 0xb0
   d4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4dac:	2003df00 	.word	0x2003df00
   d4db0:	2003df08 	.word	0x2003df08
   d4db4:	2003df64 	.word	0x2003df64
   d4db8:	2003dfc0 	.word	0x2003dfc0
   d4dbc:	40590000 	.word	0x40590000
   d4dc0:	000dcc8e 	.word	0x000dcc8e
   d4dc4:	2003dfac 	.word	0x2003dfac
   d4dc8:	000dccbf 	.word	0x000dccbf
   d4dcc:	2003e294 	.word	0x2003e294
   d4dd0:	000dccdf 	.word	0x000dccdf
   d4dd4:	2003e048 	.word	0x2003e048
   d4dd8:	0001d4bf 	.word	0x0001d4bf
   d4ddc:	2003dee4 	.word	0x2003dee4
   d4de0:	000dccf9 	.word	0x000dccf9

000d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4de4:	b530      	push	{r4, r5, lr}
   d4de6:	b085      	sub	sp, #20
   d4de8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4dea:	a904      	add	r1, sp, #16
   d4dec:	2200      	movs	r2, #0
   d4dee:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4df2:	f003 f985 	bl	d8100 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4df6:	b9a8      	cbnz	r0, d4e24 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4df8:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4dfa:	b10c      	cbz	r4, d4e00 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4dfc:	6923      	ldr	r3, [r4, #16]
   d4dfe:	b923      	cbnz	r3, d4e0a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4e00:	4a09      	ldr	r2, [pc, #36]	; (d4e28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4e02:	2100      	movs	r1, #0
   d4e04:	200a      	movs	r0, #10
   d4e06:	f003 f96b 	bl	d80e0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	230c      	movs	r3, #12
   d4e10:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4e14:	2304      	movs	r3, #4
   d4e16:	9303      	str	r3, [sp, #12]
   d4e18:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4e1a:	6923      	ldr	r3, [r4, #16]
   d4e1c:	aa01      	add	r2, sp, #4
   d4e1e:	2101      	movs	r1, #1
   d4e20:	4620      	mov	r0, r4
   d4e22:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4e24:	b005      	add	sp, #20
   d4e26:	bd30      	pop	{r4, r5, pc}
   d4e28:	000d7d61 	.word	0x000d7d61

000d4e2c <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e2c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e2e:	4d0e      	ldr	r5, [pc, #56]	; (d4e68 <_Z17getBatteryContextv+0x3c>)
   d4e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e32:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e34:	ac01      	add	r4, sp, #4
   d4e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4e40:	4669      	mov	r1, sp
   d4e42:	2007      	movs	r0, #7
   d4e44:	f7ff ffce 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4e48:	2800      	cmp	r0, #0
        return val;
   d4e4a:	bfa8      	it	ge
   d4e4c:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4e4e:	4a07      	ldr	r2, [pc, #28]	; (d4e6c <_Z17getBatteryContextv+0x40>)
   d4e50:	ab08      	add	r3, sp, #32
   d4e52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4e56:	2110      	movs	r1, #16
   d4e58:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4e5c:	4804      	ldr	r0, [pc, #16]	; (d4e70 <_Z17getBatteryContextv+0x44>)
   d4e5e:	f003 fa9f 	bl	d83a0 <snprintf>

}
   d4e62:	b009      	add	sp, #36	; 0x24
   d4e64:	bd30      	pop	{r4, r5, pc}
   d4e66:	bf00      	nop
   d4e68:	000dca88 	.word	0x000dca88
   d4e6c:	000dd02a 	.word	0x000dd02a
   d4e70:	2003dee6 	.word	0x2003dee6

000d4e74 <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e76:	b085      	sub	sp, #20
  displayInfo();
   d4e78:	f7ff fec2 	bl	d4c00 <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4e7c:	4b32      	ldr	r3, [pc, #200]	; (d4f48 <_Z16takeMeasurementsv+0xd4>)
   d4e7e:	2200      	movs	r2, #0
   d4e80:	4611      	mov	r1, r2
   d4e82:	6858      	ldr	r0, [r3, #4]
   d4e84:	f003 fa2c 	bl	d82e0 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4e88:	b108      	cbz	r0, d4e8e <_Z16takeMeasurementsv+0x1a>
   d4e8a:	f7ff fc59 	bl	d4740 <_Z17getSignalStrengthv>
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4e8e:	4e2f      	ldr	r6, [pc, #188]	; (d4f4c <_Z16takeMeasurementsv+0xd8>)
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4e90:	4f2f      	ldr	r7, [pc, #188]	; (d4f50 <_Z16takeMeasurementsv+0xdc>)
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4e92:	2400      	movs	r4, #0
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4e94:	1930      	adds	r0, r6, r4
   d4e96:	f7ff fc13 	bl	d46c0 <_Z7getTempPh>
   d4e9a:	ec51 0b10 	vmov	r0, r1, d0
   d4e9e:	f005 ff9b 	bl	dadd8 <__aeabi_d2f>
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4ea2:	ee07 0a90 	vmov	s15, r0
   d4ea6:	eef4 7a67 	vcmp.f32	s15, s15
   d4eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eae:	d604      	bvs.n	d4eba <_Z16takeMeasurementsv+0x46>
   d4eb0:	f005 fc46 	bl	da740 <__aeabi_f2d>
   d4eb4:	193d      	adds	r5, r7, r4
   d4eb6:	e9c5 0100 	strd	r0, r1, [r5]
   d4eba:	3408      	adds	r4, #8
void takeMeasurements()
{
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
   d4ebc:	2c18      	cmp	r4, #24
   d4ebe:	d1e9      	bne.n	d4e94 <_Z16takeMeasurementsv+0x20>
    float temp = getTemp(sensorAddresses[i]);
    if (!isnan(temp)) current.tempArray[i] = temp;
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4ec0:	4c23      	ldr	r4, [pc, #140]	; (d4f50 <_Z16takeMeasurementsv+0xdc>)
   d4ec2:	4824      	ldr	r0, [pc, #144]	; (d4f54 <_Z16takeMeasurementsv+0xe0>)
   d4ec4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4ec8:	210c      	movs	r1, #12
   d4eca:	e9cd 2300 	strd	r2, r3, [sp]
   d4ece:	4a22      	ldr	r2, [pc, #136]	; (d4f58 <_Z16takeMeasurementsv+0xe4>)
   d4ed0:	f003 fa66 	bl	d83a0 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4ed4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4ed8:	210c      	movs	r1, #12
   d4eda:	e9cd 2300 	strd	r2, r3, [sp]
   d4ede:	481f      	ldr	r0, [pc, #124]	; (d4f5c <_Z16takeMeasurementsv+0xe8>)
   d4ee0:	4a1d      	ldr	r2, [pc, #116]	; (d4f58 <_Z16takeMeasurementsv+0xe4>)
   d4ee2:	f003 fa5d 	bl	d83a0 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4ee6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4eea:	210c      	movs	r1, #12
   d4eec:	e9cd 2300 	strd	r2, r3, [sp]
   d4ef0:	481b      	ldr	r0, [pc, #108]	; (d4f60 <_Z16takeMeasurementsv+0xec>)
   d4ef2:	4a19      	ldr	r2, [pc, #100]	; (d4f58 <_Z16takeMeasurementsv+0xe4>)
   d4ef4:	f003 fa54 	bl	d83a0 <snprintf>
  getBatteryContext();                                                // What is the battery up to?
   d4ef8:	f7ff ff98 	bl	d4e2c <_Z17getBatteryContextv>
   d4efc:	a903      	add	r1, sp, #12
   d4efe:	2003      	movs	r0, #3
   d4f00:	f7ff ff70 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4f04:	b988      	cbnz	r0, d4f2a <_Z16takeMeasurementsv+0xb6>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4f06:	2006      	movs	r0, #6
   d4f08:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4f0c:	f7ff f9be 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4f14:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4f18:	ee07 3a10 	vmov	s14, r3
   d4f1c:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4f20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4f24:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4f28:	e001      	b.n	d4f2e <_Z16takeMeasurementsv+0xba>
            return -1.0f;
   d4f2a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4f32:	4b0c      	ldr	r3, [pc, #48]	; (d4f64 <_Z16takeMeasurementsv+0xf0>)
  systemStatusWriteNeeded=true;
   d4f34:	4a0c      	ldr	r2, [pc, #48]	; (d4f68 <_Z16takeMeasurementsv+0xf4>)
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
  getBatteryContext();                                                // What is the battery up to?
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4f36:	edc3 7a02 	vstr	s15, [r3, #8]
  systemStatusWriteNeeded=true;
   d4f3a:	2301      	movs	r3, #1
   d4f3c:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4f3e:	4a0b      	ldr	r2, [pc, #44]	; (d4f6c <_Z16takeMeasurementsv+0xf8>)
   d4f40:	7013      	strb	r3, [r2, #0]
}
   d4f42:	b005      	add	sp, #20
   d4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f46:	bf00      	nop
   d4f48:	2003e25c 	.word	0x2003e25c
   d4f4c:	2003f400 	.word	0x2003f400
   d4f50:	2003dfc0 	.word	0x2003dfc0
   d4f54:	2003ddc5 	.word	0x2003ddc5
   d4f58:	000dccfd 	.word	0x000dccfd
   d4f5c:	2003dddd 	.word	0x2003dddd
   d4f60:	2003ddb4 	.word	0x2003ddb4
   d4f64:	2003e04c 	.word	0x2003e04c
   d4f68:	2003defc 	.word	0x2003defc
   d4f6c:	2003dfb4 	.word	0x2003dfb4

000d4f70 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d4f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4f72:	4c98      	ldr	r4, [pc, #608]	; (d51d4 <loop+0x264>)
   d4f74:	7823      	ldrb	r3, [r4, #0]
   d4f76:	3b01      	subs	r3, #1
   d4f78:	2b05      	cmp	r3, #5
   d4f7a:	f200 8118 	bhi.w	d51ae <loop+0x23e>
   d4f7e:	e8df f003 	tbb	[pc, r3]
   d4f82:	03b3      	.short	0x03b3
   d4f84:	8c6d3a69 	.word	0x8c6d3a69
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f88:	4b93      	ldr	r3, [pc, #588]	; (d51d8 <loop+0x268>)
   d4f8a:	791a      	ldrb	r2, [r3, #4]
   d4f8c:	461e      	mov	r6, r3
   d4f8e:	b12a      	cbz	r2, d4f9c <loop+0x2c>
   d4f90:	4b92      	ldr	r3, [pc, #584]	; (d51dc <loop+0x26c>)
   d4f92:	781b      	ldrb	r3, [r3, #0]
   d4f94:	2b02      	cmp	r3, #2
   d4f96:	d001      	beq.n	d4f9c <loop+0x2c>
   d4f98:	f7ff fcf2 	bl	d4980 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d4f9c:	4b90      	ldr	r3, [pc, #576]	; (d51e0 <loop+0x270>)
   d4f9e:	781b      	ldrb	r3, [r3, #0]
   d4fa0:	b10b      	cbz	r3, d4fa6 <loop+0x36>
   d4fa2:	f7ff fc09 	bl	d47b8 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d4fa6:	4d8f      	ldr	r5, [pc, #572]	; (d51e4 <loop+0x274>)
   d4fa8:	782b      	ldrb	r3, [r5, #0]
   d4faa:	b13b      	cbz	r3, d4fbc <loop+0x4c>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4fac:	2320      	movs	r3, #32
   d4fae:	4a8a      	ldr	r2, [pc, #552]	; (d51d8 <loop+0x268>)
   d4fb0:	488d      	ldr	r0, [pc, #564]	; (d51e8 <loop+0x278>)
   d4fb2:	2101      	movs	r1, #1
   d4fb4:	f000 fe0c 	bl	d5bd0 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d4fb8:	2300      	movs	r3, #0
   d4fba:	702b      	strb	r3, [r5, #0]
    }
    if (currentCountsWriteNeeded) {
   d4fbc:	4d8b      	ldr	r5, [pc, #556]	; (d51ec <loop+0x27c>)
   d4fbe:	782b      	ldrb	r3, [r5, #0]
   d4fc0:	b13b      	cbz	r3, d4fd2 <loop+0x62>
   d4fc2:	2330      	movs	r3, #48	; 0x30
   d4fc4:	4a8a      	ldr	r2, [pc, #552]	; (d51f0 <loop+0x280>)
   d4fc6:	4888      	ldr	r0, [pc, #544]	; (d51e8 <loop+0x278>)
   d4fc8:	2150      	movs	r1, #80	; 0x50
   d4fca:	f000 fe01 	bl	d5bd0 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d4fce:	2300      	movs	r3, #0
   d4fd0:	702b      	strb	r3, [r5, #0]
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d4fd2:	f004 fe51 	bl	d9c78 <_ZN9TimeClass6minuteEv>
   d4fd6:	79b3      	ldrb	r3, [r6, #6]
   d4fd8:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fdc:	fb02 0013 	mls	r0, r2, r3, r0
   d4fe0:	2800      	cmp	r0, #0
   d4fe2:	f040 80ea 	bne.w	d51ba <loop+0x24a>
   d4fe6:	f004 fe47 	bl	d9c78 <_ZN9TimeClass6minuteEv>
   d4fea:	4b82      	ldr	r3, [pc, #520]	; (d51f4 <loop+0x284>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	4298      	cmp	r0, r3
   d4ff0:	f040 80ed 	bne.w	d51ce <loop+0x25e>
   d4ff4:	e0e1      	b.n	d51ba <loop+0x24a>
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ff6:	4c78      	ldr	r4, [pc, #480]	; (d51d8 <loop+0x268>)
   d4ff8:	7923      	ldrb	r3, [r4, #4]
   d4ffa:	b12b      	cbz	r3, d5008 <loop+0x98>
   d4ffc:	4b77      	ldr	r3, [pc, #476]	; (d51dc <loop+0x26c>)
   d4ffe:	781b      	ldrb	r3, [r3, #0]
   d5000:	2b04      	cmp	r3, #4
   d5002:	d001      	beq.n	d5008 <loop+0x98>
   d5004:	f7ff fcbc 	bl	d4980 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5008:	78e3      	ldrb	r3, [r4, #3]
   d500a:	b10b      	cbz	r3, d5010 <loop+0xa0>
   d500c:	f7ff fc84 	bl	d4918 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5010:	2100      	movs	r1, #0
   d5012:	2007      	movs	r0, #7
   d5014:	f005 f857 	bl	da0c6 <digitalWrite>
    petWatchdog();
   d5018:	f7ff fbce 	bl	d47b8 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(sysStatus.sampleIntervalMin * 60  - Time.now() % sysStatus.sampleIntervalMin * 60, 1, sysStatus.sampleIntervalMin * 60);
   d501c:	79a5      	ldrb	r5, [r4, #6]
   d501e:	f004 fe1a 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d5022:	79a3      	ldrb	r3, [r4, #6]
   d5024:	fb90 f2f3 	sdiv	r2, r0, r3
   d5028:	fb02 0013 	mls	r0, r2, r3, r0
   d502c:	f06f 023b 	mvn.w	r2, #59	; 0x3b
   d5030:	4350      	muls	r0, r2
   d5032:	223c      	movs	r2, #60	; 0x3c
   d5034:	fb12 0105 	smlabb	r1, r2, r5, r0
   d5038:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d503c:	2900      	cmp	r1, #0
   d503e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   d5042:	dd03      	ble.n	d504c <loop+0xdc>
   d5044:	4299      	cmp	r1, r3
   d5046:	bfa8      	it	ge
   d5048:	4619      	movge	r1, r3
   d504a:	e000      	b.n	d504e <loop+0xde>
   d504c:	2101      	movs	r1, #1
    rtc.setAlarm(wakeInSeconds);                                // The Real Time Clock will turn the Enable pin back on to wake the device
   d504e:	2300      	movs	r3, #0
   d5050:	2201      	movs	r2, #1
   d5052:	e091      	b.n	d5178 <loop+0x208>
    } break;

  case MEASURING_STATE:
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5054:	f7ff ff0e 	bl	d4e74 <_Z16takeMeasurementsv>
    state = REPORTING_STATE;
   d5058:	2305      	movs	r3, #5
   d505a:	e0b9      	b.n	d51d0 <loop+0x260>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d505c:	4b5e      	ldr	r3, [pc, #376]	; (d51d8 <loop+0x268>)
   d505e:	791a      	ldrb	r2, [r3, #4]
   d5060:	461d      	mov	r5, r3
   d5062:	b12a      	cbz	r2, d5070 <loop+0x100>
   d5064:	4b5d      	ldr	r3, [pc, #372]	; (d51dc <loop+0x26c>)
   d5066:	781b      	ldrb	r3, [r3, #0]
   d5068:	2b05      	cmp	r3, #5
   d506a:	d001      	beq.n	d5070 <loop+0x100>
   d506c:	f7ff fc88 	bl	d4980 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d5070:	78eb      	ldrb	r3, [r5, #3]
   d5072:	b90b      	cbnz	r3, d5078 <loop+0x108>
   d5074:	f7ff fc02 	bl	d487c <_Z17connectToParticlev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5078:	f003 f8da 	bl	d8230 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d507c:	b140      	cbz	r0, d5090 <loop+0x120>
      if (Time.hour() == 0) dailyCleanup();          // Once a day, clean house
   d507e:	f004 fdf1 	bl	d9c64 <_ZN9TimeClass4hourEv>
   d5082:	b908      	cbnz	r0, d5088 <loop+0x118>
   d5084:	f7ff fcde 	bl	d4a44 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d5088:	f7ff faba 	bl	d4600 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d508c:	2306      	movs	r3, #6
   d508e:	e09f      	b.n	d51d0 <loop+0x260>
   d5090:	f002 fe6e 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d5094:	4b58      	ldr	r3, [pc, #352]	; (d51f8 <loop+0x288>)
   d5096:	6018      	str	r0, [r3, #0]
   d5098:	e024      	b.n	d50e4 <loop+0x174>
      state = ERROR_STATE;
    }
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d509a:	4b4f      	ldr	r3, [pc, #316]	; (d51d8 <loop+0x268>)
   d509c:	791b      	ldrb	r3, [r3, #4]
   d509e:	b12b      	cbz	r3, d50ac <loop+0x13c>
   d50a0:	4b4e      	ldr	r3, [pc, #312]	; (d51dc <loop+0x26c>)
   d50a2:	781b      	ldrb	r3, [r3, #0]
   d50a4:	2b06      	cmp	r3, #6
   d50a6:	d001      	beq.n	d50ac <loop+0x13c>
   d50a8:	f7ff fc6a 	bl	d4980 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d50ac:	4b53      	ldr	r3, [pc, #332]	; (d51fc <loop+0x28c>)
   d50ae:	781b      	ldrb	r3, [r3, #0]
   d50b0:	b90b      	cbnz	r3, d50b6 <loop+0x146>
      state = IDLE_STATE;
   d50b2:	2302      	movs	r3, #2
   d50b4:	e08c      	b.n	d51d0 <loop+0x260>
   d50b6:	f002 fe5b 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d50ba:	4b51      	ldr	r3, [pc, #324]	; (d5200 <loop+0x290>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	1ac0      	subs	r0, r0, r3
   d50c0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d50c4:	4298      	cmp	r0, r3
   d50c6:	d972      	bls.n	d51ae <loop+0x23e>
   d50c8:	f002 fe52 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50cc:	4b4a      	ldr	r3, [pc, #296]	; (d51f8 <loop+0x288>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50ce:	494d      	ldr	r1, [pc, #308]	; (d5204 <loop+0x294>)
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (!dataInFlight)  {                                             // Response received back to IDLE state
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d50d0:	6018      	str	r0, [r3, #0]
   d50d2:	4b4d      	ldr	r3, [pc, #308]	; (d5208 <loop+0x298>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50d4:	484d      	ldr	r0, [pc, #308]	; (d520c <loop+0x29c>)
   d50d6:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d50d8:	2200      	movs	r2, #0
   d50da:	f88d 2000 	strb.w	r2, [sp]
   d50de:	4a4c      	ldr	r2, [pc, #304]	; (d5210 <loop+0x2a0>)
   d50e0:	f7ff f8fc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d50e4:	2301      	movs	r3, #1
   d50e6:	e073      	b.n	d51d0 <loop+0x260>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50e8:	4c3b      	ldr	r4, [pc, #236]	; (d51d8 <loop+0x268>)
   d50ea:	7923      	ldrb	r3, [r4, #4]
   d50ec:	b12b      	cbz	r3, d50fa <loop+0x18a>
   d50ee:	4b3b      	ldr	r3, [pc, #236]	; (d51dc <loop+0x26c>)
   d50f0:	781b      	ldrb	r3, [r3, #0]
   d50f2:	2b01      	cmp	r3, #1
   d50f4:	d001      	beq.n	d50fa <loop+0x18a>
   d50f6:	f7ff fc43 	bl	d4980 <_Z22publishStateTransitionv>
   d50fa:	f002 fe39 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d50fe:	4b3e      	ldr	r3, [pc, #248]	; (d51f8 <loop+0x288>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5106:	3330      	adds	r3, #48	; 0x30
   d5108:	4298      	cmp	r0, r3
   d510a:	d950      	bls.n	d51ae <loop+0x23e>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d510c:	6923      	ldr	r3, [r4, #16]
   d510e:	2b03      	cmp	r3, #3
   d5110:	dc13      	bgt.n	d513a <loop+0x1ca>
   d5112:	f003 f88d 	bl	d8230 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5116:	b148      	cbz	r0, d512c <loop+0x1bc>
   d5118:	4b3b      	ldr	r3, [pc, #236]	; (d5208 <loop+0x298>)
   d511a:	493e      	ldr	r1, [pc, #248]	; (d5214 <loop+0x2a4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d511c:	781b      	ldrb	r3, [r3, #0]
   d511e:	483b      	ldr	r0, [pc, #236]	; (d520c <loop+0x29c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5120:	2200      	movs	r2, #0
   d5122:	f88d 2000 	strb.w	r2, [sp]
   d5126:	4a3c      	ldr	r2, [pc, #240]	; (d5218 <loop+0x2a8>)
   d5128:	f7ff f8d8 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d512c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5130:	f003 f95e 	bl	d83f0 <delay>
        System.reset();
   d5134:	f004 fbc3 	bl	d98be <_ZN11SystemClass5resetEv>
   d5138:	e039      	b.n	d51ae <loop+0x23e>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d513a:	f004 fd8c 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d513e:	4b26      	ldr	r3, [pc, #152]	; (d51d8 <loop+0x268>)
   d5140:	4d28      	ldr	r5, [pc, #160]	; (d51e4 <loop+0x274>)
   d5142:	69db      	ldr	r3, [r3, #28]
   d5144:	1ac0      	subs	r0, r0, r3
   d5146:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d514a:	d919      	bls.n	d5180 <loop+0x210>
   d514c:	f003 f870 	bl	d8230 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5150:	b148      	cbz	r0, d5166 <loop+0x1f6>
   d5152:	4b2d      	ldr	r3, [pc, #180]	; (d5208 <loop+0x298>)
   d5154:	492f      	ldr	r1, [pc, #188]	; (d5214 <loop+0x2a4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5156:	781b      	ldrb	r3, [r3, #0]
   d5158:	482c      	ldr	r0, [pc, #176]	; (d520c <loop+0x29c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d515a:	2200      	movs	r2, #0
   d515c:	f88d 2000 	strb.w	r2, [sp]
   d5160:	4a2e      	ldr	r2, [pc, #184]	; (d521c <loop+0x2ac>)
   d5162:	f7ff f8bb 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5166:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d516a:	f003 f941 	bl	d83f0 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d516e:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d5170:	2201      	movs	r2, #1
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d5172:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d5174:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d5176:	210a      	movs	r1, #10
   d5178:	4829      	ldr	r0, [pc, #164]	; (d5220 <loop+0x2b0>)
   d517a:	f001 f9b4 	bl	d64e6 <_ZN8MCP794108setAlarmEibi>
   d517e:	e016      	b.n	d51ae <loop+0x23e>
   d5180:	f003 f856 	bl	d8230 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5184:	b148      	cbz	r0, d519a <loop+0x22a>
   d5186:	4b20      	ldr	r3, [pc, #128]	; (d5208 <loop+0x298>)
   d5188:	4922      	ldr	r1, [pc, #136]	; (d5214 <loop+0x2a4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d518a:	781b      	ldrb	r3, [r3, #0]
   d518c:	481f      	ldr	r0, [pc, #124]	; (d520c <loop+0x29c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d518e:	2200      	movs	r2, #0
   d5190:	f88d 2000 	strb.w	r2, [sp]
   d5194:	4a23      	ldr	r2, [pc, #140]	; (d5224 <loop+0x2b4>)
   d5196:	f7ff f8a1 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d519a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d519e:	f003 f927 	bl	d83f0 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d51a2:	2300      	movs	r3, #0
   d51a4:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d51a6:	2301      	movs	r3, #1
   d51a8:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d51aa:	f7ff fc1f 	bl	d49ec <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d51ae:	481c      	ldr	r0, [pc, #112]	; (d5220 <loop+0x2b0>)
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
   d51b0:	b002      	add	sp, #8
   d51b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d51b6:	f001 b8cf 	b.w	d6358 <_ZN8MCP794104loopEv>
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d51ba:	f004 fd5d 	bl	d9c78 <_ZN9TimeClass6minuteEv>
   d51be:	2800      	cmp	r0, #0
   d51c0:	d1f5      	bne.n	d51ae <loop+0x23e>
   d51c2:	f004 fd59 	bl	d9c78 <_ZN9TimeClass6minuteEv>
   d51c6:	4b0b      	ldr	r3, [pc, #44]	; (d51f4 <loop+0x284>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	4298      	cmp	r0, r3
   d51cc:	d0ef      	beq.n	d51ae <loop+0x23e>
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d51ce:	2303      	movs	r3, #3
   d51d0:	7023      	strb	r3, [r4, #0]
   d51d2:	e7ec      	b.n	d51ae <loop+0x23e>
   d51d4:	2003defd 	.word	0x2003defd
   d51d8:	2003e04c 	.word	0x2003e04c
   d51dc:	2003dee5 	.word	0x2003dee5
   d51e0:	2003df38 	.word	0x2003df38
   d51e4:	2003defc 	.word	0x2003defc
   d51e8:	2003deb8 	.word	0x2003deb8
   d51ec:	2003dfb4 	.word	0x2003dfb4
   d51f0:	2003dfc0 	.word	0x2003dfc0
   d51f4:	2003dfb8 	.word	0x2003dfb8
   d51f8:	2003dfb0 	.word	0x2003dfb0
   d51fc:	2003dff0 	.word	0x2003dff0
   d5200:	2003def8 	.word	0x2003def8
   d5204:	000dcd05 	.word	0x000dcd05
   d5208:	2003dee4 	.word	0x2003dee4
   d520c:	2003e010 	.word	0x2003e010
   d5210:	000dd5ca 	.word	0x000dd5ca
   d5214:	000dcd32 	.word	0x000dcd32
   d5218:	000dcd1e 	.word	0x000dcd1e
   d521c:	000dcd38 	.word	0x000dcd38
   d5220:	2003dec8 	.word	0x2003dec8
   d5224:	000dcd52 	.word	0x000dcd52

000d5228 <_Z18loadSystemDefaultsv>:
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5228:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d522a:	f7ff fb27 	bl	d487c <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d522e:	f7ff fe21 	bl	d4e74 <_Z16takeMeasurementsv>
   d5232:	f002 fffd 	bl	d8230 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d5236:	b148      	cbz	r0, d524c <_Z18loadSystemDefaultsv+0x24>
   d5238:	4b11      	ldr	r3, [pc, #68]	; (d5280 <_Z18loadSystemDefaultsv+0x58>)
   d523a:	4912      	ldr	r1, [pc, #72]	; (d5284 <_Z18loadSystemDefaultsv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d523c:	781b      	ldrb	r3, [r3, #0]
   d523e:	4812      	ldr	r0, [pc, #72]	; (d5288 <_Z18loadSystemDefaultsv+0x60>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5240:	2200      	movs	r2, #0
   d5242:	f88d 2000 	strb.w	r2, [sp]
   d5246:	4a11      	ldr	r2, [pc, #68]	; (d528c <_Z18loadSystemDefaultsv+0x64>)
   d5248:	f7ff f848 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d524c:	4a10      	ldr	r2, [pc, #64]	; (d5290 <_Z18loadSystemDefaultsv+0x68>)
   d524e:	4811      	ldr	r0, [pc, #68]	; (d5294 <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d5250:	2300      	movs	r3, #0
   d5252:	7093      	strb	r3, [r2, #2]
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5254:	6893      	ldr	r3, [r2, #8]
   d5256:	2b1d      	cmp	r3, #29
   d5258:	bfcc      	ite	gt
   d525a:	2300      	movgt	r3, #0
   d525c:	2301      	movle	r3, #1
   d525e:	7153      	strb	r3, [r2, #5]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5260:	230a      	movs	r3, #10
   d5262:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5264:	4b0c      	ldr	r3, [pc, #48]	; (d5298 <_Z18loadSystemDefaultsv+0x70>)
   d5266:	6153      	str	r3, [r2, #20]
  sysStatus.dstOffset = 1;
   d5268:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d526c:	2101      	movs	r1, #1
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d526e:	6193      	str	r3, [r2, #24]
   d5270:	2320      	movs	r3, #32

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5272:	7011      	strb	r1, [r2, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
   d5274:	7111      	strb	r1, [r2, #4]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d5276:	b003      	add	sp, #12
   d5278:	f85d eb04 	ldr.w	lr, [sp], #4
   d527c:	f000 bca8 	b.w	d5bd0 <_ZN6MB85RC9writeDataEjPKhj>
   d5280:	2003dee4 	.word	0x2003dee4
   d5284:	000dcb23 	.word	0x000dcb23
   d5288:	2003e010 	.word	0x2003e010
   d528c:	000dcd71 	.word	0x000dcd71
   d5290:	2003e04c 	.word	0x2003e04c
   d5294:	2003deb8 	.word	0x2003deb8
   d5298:	c0a00000 	.word	0xc0a00000

000d529c <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d529c:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d529e:	4c27      	ldr	r4, [pc, #156]	; (d533c <_Z17checkSystemValuesv+0xa0>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d52a0:	4d26      	ldr	r5, [pc, #152]	; (d533c <_Z17checkSystemValuesv+0xa0>)
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d52a2:	f7ff fde7 	bl	d4e74 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d52a6:	78a3      	ldrb	r3, [r4, #2]
   d52a8:	2b01      	cmp	r3, #1
   d52aa:	bf84      	itt	hi
   d52ac:	2300      	movhi	r3, #0
   d52ae:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d52b0:	78e3      	ldrb	r3, [r4, #3]
   d52b2:	2b01      	cmp	r3, #1
   d52b4:	d906      	bls.n	d52c4 <_Z17checkSystemValuesv+0x28>
   d52b6:	f002 ffbb 	bl	d8230 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d52ba:	b110      	cbz	r0, d52c2 <_Z17checkSystemValuesv+0x26>
   d52bc:	2301      	movs	r3, #1
   d52be:	70eb      	strb	r3, [r5, #3]
   d52c0:	e000      	b.n	d52c4 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
   d52c2:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d52c4:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52c6:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d52ca:	2b01      	cmp	r3, #1
   d52cc:	bf82      	ittt	hi
   d52ce:	4b1b      	ldrhi	r3, [pc, #108]	; (d533c <_Z17checkSystemValuesv+0xa0>)
   d52d0:	2200      	movhi	r2, #0
   d52d2:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d52d4:	68a2      	ldr	r2, [r4, #8]
   d52d6:	4b19      	ldr	r3, [pc, #100]	; (d533c <_Z17checkSystemValuesv+0xa0>)
   d52d8:	2a1d      	cmp	r2, #29
   d52da:	bfd4      	ite	le
   d52dc:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d52de:	2200      	movgt	r2, #0
   d52e0:	715a      	strb	r2, [r3, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52e2:	6923      	ldr	r3, [r4, #16]
   d52e4:	2bff      	cmp	r3, #255	; 0xff
   d52e6:	bf88      	it	hi
   d52e8:	4b14      	ldrhi	r3, [pc, #80]	; (d533c <_Z17checkSystemValuesv+0xa0>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52ea:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52ee:	bf88      	it	hi
   d52f0:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52f2:	eef4 7ac7 	vcmpe.f32	s15, s14
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52f6:	bf88      	it	hi
   d52f8:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52fe:	d406      	bmi.n	d530e <_Z17checkSystemValuesv+0x72>
   d5300:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5304:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d530c:	dd01      	ble.n	d5312 <_Z17checkSystemValuesv+0x76>
   d530e:	4b0c      	ldr	r3, [pc, #48]	; (d5340 <_Z17checkSystemValuesv+0xa4>)
   d5310:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5312:	edd4 7a06 	vldr	s15, [r4, #24]
   d5316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d531e:	d406      	bmi.n	d532e <_Z17checkSystemValuesv+0x92>
   d5320:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5324:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d532c:	dd02      	ble.n	d5334 <_Z17checkSystemValuesv+0x98>
   d532e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5332:	61a3      	str	r3, [r4, #24]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d5334:	4b03      	ldr	r3, [pc, #12]	; (d5344 <_Z17checkSystemValuesv+0xa8>)
   d5336:	2201      	movs	r2, #1
   d5338:	701a      	strb	r2, [r3, #0]
   d533a:	bd38      	pop	{r3, r4, r5, pc}
   d533c:	2003e04c 	.word	0x2003e04c
   d5340:	c0a00000 	.word	0xc0a00000
   d5344:	2003defc 	.word	0x2003defc

000d5348 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5348:	2300      	movs	r3, #0
   d534a:	2202      	movs	r2, #2
   d534c:	f002 bf48 	b.w	d81e0 <spark_variable>

000d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d5350:	2300      	movs	r3, #0
   d5352:	2204      	movs	r2, #4
   d5354:	f002 bf44 	b.w	d81e0 <spark_variable>

000d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5358:	4602      	mov	r2, r0
   d535a:	4801      	ldr	r0, [pc, #4]	; (d5360 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d535c:	f003 ba32 	b.w	d87c4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5360:	000d8799 	.word	0x000d8799
   d5364:	00000000 	.word	0x00000000

000d5368 <setup>:
float celsius[nSENSORS] = {NAN, NAN};
retained uint8_t sensorAddresses[nSENSORS][8];
const int MAXRETRY = 3;

void setup()                                        // Note: Disconnected Setup()
{
   d5368:	b5f0      	push	{r4, r5, r6, r7, lr}
   d536a:	b0a9      	sub	sp, #164	; 0xa4

  Serial.begin(9600);
   d536c:	f004 fd9e 	bl	d9eac <_Z16_fetch_usbserialv>
   d5370:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5374:	f004 fd8e 	bl	d9e94 <_ZN9USBSerial5beginEl>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5378:	2100      	movs	r1, #0
   d537a:	2008      	movs	r0, #8
   d537c:	f004 fe92 	bl	da0a4 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5380:	2100      	movs	r1, #0
   d5382:	2004      	movs	r0, #4
   d5384:	f004 fe8e 	bl	da0a4 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5388:	2101      	movs	r1, #1
   d538a:	2007      	movs	r0, #7
   d538c:	f004 fe8a 	bl	da0a4 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5390:	2101      	movs	r1, #1
   d5392:	2005      	movs	r0, #5

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5394:	2400      	movs	r4, #0
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5396:	f004 fe85 	bl	da0a4 <pinMode>

  digitalWrite(blueLED,HIGH);
   d539a:	2101      	movs	r1, #1
   d539c:	2007      	movs	r0, #7
   d539e:	f004 fe92 	bl	da0c6 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d53a2:	f7ff fa09 	bl	d47b8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d53a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d53aa:	2201      	movs	r2, #1
   d53ac:	4996      	ldr	r1, [pc, #600]	; (d5608 <setup+0x2a0>)
   d53ae:	9400      	str	r4, [sp, #0]
   d53b0:	2008      	movs	r0, #8
   d53b2:	f003 fd6b 	bl	d8e8c <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d53b6:	a804      	add	r0, sp, #16
   d53b8:	f002 ff42 	bl	d8240 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d53bc:	4623      	mov	r3, r4
   d53be:	227d      	movs	r2, #125	; 0x7d
   d53c0:	a908      	add	r1, sp, #32
   d53c2:	a804      	add	r0, sp, #16
   d53c4:	f004 fa1f 	bl	d9806 <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53c8:	4623      	mov	r3, r4
   d53ca:	4622      	mov	r2, r4
   d53cc:	498f      	ldr	r1, [pc, #572]	; (d560c <setup+0x2a4>)
   d53ce:	9401      	str	r4, [sp, #4]
   d53d0:	9400      	str	r4, [sp, #0]
   d53d2:	a808      	add	r0, sp, #32
   d53d4:	f002 ff44 	bl	d8260 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);
   d53d8:	498d      	ldr	r1, [pc, #564]	; (d5610 <setup+0x2a8>)
   d53da:	488e      	ldr	r0, [pc, #568]	; (d5614 <setup+0x2ac>)
   d53dc:	4d8e      	ldr	r5, [pc, #568]	; (d5618 <setup+0x2b0>)
   d53de:	4f8f      	ldr	r7, [pc, #572]	; (d561c <setup+0x2b4>)
   d53e0:	f7ff ffb6 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SampleInterval",sampleIntervalStr);
   d53e4:	498e      	ldr	r1, [pc, #568]	; (d5620 <setup+0x2b8>)
   d53e6:	488f      	ldr	r0, [pc, #572]	; (d5624 <setup+0x2bc>)
   d53e8:	f7ff ffb2 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d53ec:	498e      	ldr	r1, [pc, #568]	; (d5628 <setup+0x2c0>)
   d53ee:	488f      	ldr	r0, [pc, #572]	; (d562c <setup+0x2c4>)
   d53f0:	f7ff ffaa 	bl	d5348 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CabinTemp",cabinTempStr);
   d53f4:	498e      	ldr	r1, [pc, #568]	; (d5630 <setup+0x2c8>)
   d53f6:	488f      	ldr	r0, [pc, #572]	; (d5634 <setup+0x2cc>)
   d53f8:	f7ff ffaa 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("VentTemp",ventTempStr);
   d53fc:	498e      	ldr	r1, [pc, #568]	; (d5638 <setup+0x2d0>)
   d53fe:	488f      	ldr	r0, [pc, #572]	; (d563c <setup+0x2d4>)
   d5400:	f7ff ffa6 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OutsideTemp",outsideTempStr);
   d5404:	498e      	ldr	r1, [pc, #568]	; (d5640 <setup+0x2d8>)
   d5406:	488f      	ldr	r0, [pc, #572]	; (d5644 <setup+0x2dc>)
   d5408:	f7ff ffa2 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d540c:	498e      	ldr	r1, [pc, #568]	; (d5648 <setup+0x2e0>)
   d540e:	488f      	ldr	r0, [pc, #572]	; (d564c <setup+0x2e4>)
   d5410:	f7ff ff9e 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5414:	498e      	ldr	r1, [pc, #568]	; (d5650 <setup+0x2e8>)
   d5416:	488f      	ldr	r0, [pc, #572]	; (d5654 <setup+0x2ec>)
   d5418:	f7ff ff96 	bl	d5348 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d541c:	498e      	ldr	r1, [pc, #568]	; (d5658 <setup+0x2f0>)
   d541e:	488f      	ldr	r0, [pc, #572]	; (d565c <setup+0x2f4>)
   d5420:	f7ff ff92 	bl	d5348 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d5424:	498e      	ldr	r1, [pc, #568]	; (d5660 <setup+0x2f8>)
   d5426:	488f      	ldr	r0, [pc, #572]	; (d5664 <setup+0x2fc>)
   d5428:	f7ff ff92 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d542c:	498e      	ldr	r1, [pc, #568]	; (d5668 <setup+0x300>)
   d542e:	488f      	ldr	r0, [pc, #572]	; (d566c <setup+0x304>)
   d5430:	f7ff ff8e 	bl	d5350 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d5434:	498e      	ldr	r1, [pc, #568]	; (d5670 <setup+0x308>)
   d5436:	488f      	ldr	r0, [pc, #572]	; (d5674 <setup+0x30c>)
   d5438:	f7ff ff8e 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d543c:	498e      	ldr	r1, [pc, #568]	; (d5678 <setup+0x310>)
   d543e:	488f      	ldr	r0, [pc, #572]	; (d567c <setup+0x314>)
   d5440:	f7ff ff8a 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d5444:	498e      	ldr	r1, [pc, #568]	; (d5680 <setup+0x318>)
   d5446:	488f      	ldr	r0, [pc, #572]	; (d5684 <setup+0x31c>)
   d5448:	f7ff ff86 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d544c:	498e      	ldr	r1, [pc, #568]	; (d5688 <setup+0x320>)
   d544e:	488f      	ldr	r0, [pc, #572]	; (d568c <setup+0x324>)
   d5450:	f7ff ff82 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d5454:	498e      	ldr	r1, [pc, #568]	; (d5690 <setup+0x328>)
   d5456:	488f      	ldr	r0, [pc, #572]	; (d5694 <setup+0x32c>)
   d5458:	f7ff ff7e 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d545c:	498e      	ldr	r1, [pc, #568]	; (d5698 <setup+0x330>)
   d545e:	488f      	ldr	r0, [pc, #572]	; (d569c <setup+0x334>)
   d5460:	f7ff ff7a 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SampleInterval",setSampleInterval);
   d5464:	498e      	ldr	r1, [pc, #568]	; (d56a0 <setup+0x338>)
   d5466:	486f      	ldr	r0, [pc, #444]	; (d5624 <setup+0x2bc>)
   d5468:	f7ff ff76 	bl	d5358 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d546c:	488d      	ldr	r0, [pc, #564]	; (d56a4 <setup+0x33c>)
   d546e:	f000 fb17 	bl	d5aa0 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5472:	4621      	mov	r1, r4
   d5474:	2301      	movs	r3, #1
   d5476:	f10d 020b 	add.w	r2, sp, #11
   d547a:	488a      	ldr	r0, [pc, #552]	; (d56a4 <setup+0x33c>)
   d547c:	f000 fb52 	bl	d5b24 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5480:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d5484:	2901      	cmp	r1, #1
   d5486:	d019      	beq.n	d54bc <setup+0x154>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5488:	4886      	ldr	r0, [pc, #536]	; (d56a4 <setup+0x33c>)
   d548a:	f000 fb13 	bl	d5ab4 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d548e:	2304      	movs	r3, #4
   d5490:	4a85      	ldr	r2, [pc, #532]	; (d56a8 <setup+0x340>)
   d5492:	4884      	ldr	r0, [pc, #528]	; (d56a4 <setup+0x33c>)
   d5494:	4621      	mov	r1, r4
   d5496:	f000 fb9b 	bl	d5bd0 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d549a:	2301      	movs	r3, #1
   d549c:	f10d 020b 	add.w	r2, sp, #11
   d54a0:	4621      	mov	r1, r4
   d54a2:	4880      	ldr	r0, [pc, #512]	; (d56a4 <setup+0x33c>)
   d54a4:	f000 fb3e 	bl	d5b24 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d54a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54ac:	2b01      	cmp	r3, #1
   d54ae:	d002      	beq.n	d54b6 <setup+0x14e>
   d54b0:	2301      	movs	r3, #1
   d54b2:	703b      	strb	r3, [r7, #0]
   d54b4:	e007      	b.n	d54c6 <setup+0x15e>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d54b6:	f7ff feb7 	bl	d5228 <_Z18loadSystemDefaultsv>
   d54ba:	e004      	b.n	d54c6 <setup+0x15e>
   d54bc:	2320      	movs	r3, #32
   d54be:	462a      	mov	r2, r5
   d54c0:	4878      	ldr	r0, [pc, #480]	; (d56a4 <setup+0x33c>)
   d54c2:	f000 fb2f 	bl	d5b24 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d54c6:	ae28      	add	r6, sp, #160	; 0xa0
   d54c8:	2400      	movs	r4, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d54ca:	f7ff fee7 	bl	d529c <_Z17checkSystemValuesv>
   d54ce:	f846 4d94 	str.w	r4, [r6, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54d2:	4622      	mov	r2, r4
   d54d4:	4621      	mov	r1, r4
   d54d6:	4630      	mov	r0, r6
   d54d8:	f002 fc2a 	bl	d7d30 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d54dc:	9b03      	ldr	r3, [sp, #12]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d54de:	2b14      	cmp	r3, #20
   d54e0:	f000 8084 	beq.w	d55ec <setup+0x284>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54e4:	4622      	mov	r2, r4
   d54e6:	4621      	mov	r1, r4
   d54e8:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d54ea:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54ec:	f002 fc20 	bl	d7d30 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d54f0:	9b03      	ldr	r3, [sp, #12]
   d54f2:	2b8c      	cmp	r3, #140	; 0x8c
   d54f4:	d07a      	beq.n	d55ec <setup+0x284>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d54f6:	79ab      	ldrb	r3, [r5, #6]
   d54f8:	4a6c      	ldr	r2, [pc, #432]	; (d56ac <setup+0x344>)
   d54fa:	4849      	ldr	r0, [pc, #292]	; (d5620 <setup+0x2b8>)
   d54fc:	210c      	movs	r1, #12
   d54fe:	f002 ff4f 	bl	d83a0 <snprintf>

  rtc.setup();                                                        // Start the real time clock
   d5502:	486b      	ldr	r0, [pc, #428]	; (d56b0 <setup+0x348>)
   d5504:	f000 fe10 	bl	d6128 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5508:	2100      	movs	r1, #0
   d550a:	4869      	ldr	r0, [pc, #420]	; (d56b0 <setup+0x348>)
   d550c:	f000 ff61 	bl	d63d2 <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5510:	ed95 0a06 	vldr	s0, [r5, #24]
   d5514:	f004 fa94 	bl	d9a40 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d5518:	f004 fb7c 	bl	d9c14 <_ZN9TimeClass7isValidEv>
   d551c:	b920      	cbnz	r0, d5528 <setup+0x1c0>
   d551e:	4864      	ldr	r0, [pc, #400]	; (d56b0 <setup+0x348>)
   d5520:	f000 fdf2 	bl	d6108 <_ZNK8MCP7941010getRTCTimeEv>
   d5524:	f004 fab6 	bl	d9a94 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5528:	f7ff fac4 	bl	d4ab4 <_Z8isDSTusav>
   d552c:	b110      	cbz	r0, d5534 <setup+0x1cc>
   d552e:	f004 faa1 	bl	d9a74 <_ZN9TimeClass8beginDSTEv>
   d5532:	e001      	b.n	d5538 <setup+0x1d0>
   d5534:	f004 faa8 	bl	d9a88 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5538:	ed95 0a05 	vldr	s0, [r5, #20]
   d553c:	f004 fa64 	bl	d9a08 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5540:	f004 fa54 	bl	d99ec <_ZN9TimeClass5localEv>
   d5544:	4604      	mov	r4, r0
   d5546:	f004 fb86 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d554a:	1a20      	subs	r0, r4, r0
   d554c:	f005 f8e6 	bl	da71c <__aeabi_i2d>
   d5550:	a32b      	add	r3, pc, #172	; (adr r3, d5600 <setup+0x298>)
   d5552:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5556:	f005 fa71 	bl	daa3c <__aeabi_ddiv>
   d555a:	4a56      	ldr	r2, [pc, #344]	; (d56b4 <setup+0x34c>)
   d555c:	e9cd 0100 	strd	r0, r1, [sp]
   d5560:	210a      	movs	r1, #10
   d5562:	483f      	ldr	r0, [pc, #252]	; (d5660 <setup+0x2f8>)
   d5564:	f002 ff1c 	bl	d83a0 <snprintf>
   d5568:	2330      	movs	r3, #48	; 0x30
   d556a:	4a53      	ldr	r2, [pc, #332]	; (d56b8 <setup+0x350>)
   d556c:	484d      	ldr	r0, [pc, #308]	; (d56a4 <setup+0x33c>)
   d556e:	2150      	movs	r1, #80	; 0x50
   d5570:	f000 fad8 	bl	d5b24 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d5574:	f004 fb76 	bl	d9c64 <_ZN9TimeClass4hourEv>
   d5578:	4b50      	ldr	r3, [pc, #320]	; (d56bc <setup+0x354>)
   d557a:	6018      	str	r0, [r3, #0]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d557c:	f7ff f94e 	bl	d481c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5580:	2004      	movs	r0, #4
   d5582:	f004 fdb9 	bl	da0f8 <digitalRead>
   d5586:	b908      	cbnz	r0, d558c <setup+0x224>
   d5588:	f7ff fe4e 	bl	d5228 <_Z18loadSystemDefaultsv>

  ds18b20.resetsearch();                 // initialise for sensor search
   d558c:	484c      	ldr	r0, [pc, #304]	; (d56c0 <setup+0x358>)
   d558e:	f000 f98b 	bl	d58a8 <_ZN7DS18B2011resetsearchEv>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addresses
    ds18b20.search(sensorAddresses[i]); // and if available store
   d5592:	494c      	ldr	r1, [pc, #304]	; (d56c4 <setup+0x35c>)
   d5594:	484a      	ldr	r0, [pc, #296]	; (d56c0 <setup+0x358>)
   d5596:	f000 f96c 	bl	d5872 <_ZN7DS18B206searchEPh>
   d559a:	494b      	ldr	r1, [pc, #300]	; (d56c8 <setup+0x360>)
   d559c:	4848      	ldr	r0, [pc, #288]	; (d56c0 <setup+0x358>)
   d559e:	f000 f968 	bl	d5872 <_ZN7DS18B206searchEPh>
   d55a2:	494a      	ldr	r1, [pc, #296]	; (d56cc <setup+0x364>)
   d55a4:	4846      	ldr	r0, [pc, #280]	; (d56c0 <setup+0x358>)
   d55a6:	f000 f964 	bl	d5872 <_ZN7DS18B206searchEPh>
	 * On some devices (Electron, Argon, and Xenon), there is an optional Wire1.
	 *
	 * @param addr The I2C address to use. This is optional, and the default is 0x42.
	 * The address can be reprogrammed in software on the u-blox GPS, but 0x42 is the default.
	 */
	AssetTracker &withI2C(TwoWire &wire = Wire, uint8_t addr = 0x42);
   d55aa:	f004 fdd3 	bl	da154 <_Z19__fetch_global_Wirev>
  }

  t.withI2C();
   d55ae:	2242      	movs	r2, #66	; 0x42
   d55b0:	4601      	mov	r1, r0
   d55b2:	4847      	ldr	r0, [pc, #284]	; (d56d0 <setup+0x368>)
   d55b4:	f001 fdca 	bl	d714c <_ZN12AssetTracker7withI2CER7TwoWireh>
  // Run in threaded mode - this eliminates the need to read Serial1 from loop or updateGPS() and dramatically
	// lowers the risk of lost or corrupted GPS data caused by blocking loop for too long and overflowing the
	// 64-byte serial buffer.
	t.startThreadedMode();
   d55b8:	4845      	ldr	r0, [pc, #276]	; (d56d0 <setup+0x368>)
   d55ba:	f001 fd7b 	bl	d70b4 <_ZN12AssetTracker17startThreadedModeEv>
   d55be:	f002 fbd7 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d55c2:	4b44      	ldr	r3, [pc, #272]	; (d56d4 <setup+0x36c>)
   d55c4:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d55c6:	4b44      	ldr	r3, [pc, #272]	; (d56d8 <setup+0x370>)
   d55c8:	2201      	movs	r2, #1
   d55ca:	701a      	strb	r2, [r3, #0]


  // Here is where the code diverges based on why we are running Setup()
 
  connectToParticle();
   d55cc:	f7ff f956 	bl	d487c <_Z17connectToParticlev>
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d55d0:	783b      	ldrb	r3, [r7, #0]
   d55d2:	b913      	cbnz	r3, d55da <setup+0x272>
   d55d4:	4b11      	ldr	r3, [pc, #68]	; (d561c <setup+0x2b4>)
   d55d6:	2202      	movs	r2, #2
   d55d8:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d55da:	2100      	movs	r1, #0
   d55dc:	2007      	movs	r0, #7
   d55de:	f004 fd72 	bl	da0c6 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d55e2:	a804      	add	r0, sp, #16
   d55e4:	f004 f889 	bl	d96fa <_ZN6StringD1Ev>
  connectToParticle();
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d55e8:	b029      	add	sp, #164	; 0xa4
   d55ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d55ec:	692b      	ldr	r3, [r5, #16]
   d55ee:	3301      	adds	r3, #1
   d55f0:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d55f2:	4b3a      	ldr	r3, [pc, #232]	; (d56dc <setup+0x374>)
   d55f4:	2201      	movs	r2, #1
   d55f6:	701a      	strb	r2, [r3, #0]
   d55f8:	e77d      	b.n	d54f6 <setup+0x18e>
   d55fa:	bf00      	nop
   d55fc:	f3af 8000 	nop.w
   d5600:	00000000 	.word	0x00000000
   d5604:	40ac2000 	.word	0x40ac2000
   d5608:	000d40cd 	.word	0x000d40cd
   d560c:	000d42f9 	.word	0x000d42f9
   d5610:	2003df6c 	.word	0x2003df6c
   d5614:	000dcd89 	.word	0x000dcd89
   d5618:	2003e04c 	.word	0x2003e04c
   d561c:	2003defd 	.word	0x2003defd
   d5620:	2003ddd1 	.word	0x2003ddd1
   d5624:	000dcd90 	.word	0x000dcd90
   d5628:	2003e05c 	.word	0x2003e05c
   d562c:	000dcd9f 	.word	0x000dcd9f
   d5630:	2003ddc5 	.word	0x2003ddc5
   d5634:	000dcdaa 	.word	0x000dcdaa
   d5638:	2003dddd 	.word	0x2003dddd
   d563c:	000dcdb4 	.word	0x000dcdb4
   d5640:	2003ddb4 	.word	0x2003ddb4
   d5644:	000dcdbd 	.word	0x000dcdbd
   d5648:	2003ddc0 	.word	0x2003ddc0
   d564c:	000dcdc9 	.word	0x000dcdc9
   d5650:	2003e054 	.word	0x2003e054
   d5654:	000dcdd1 	.word	0x000dcdd1
   d5658:	2003dfd8 	.word	0x2003dfd8
   d565c:	000dcddc 	.word	0x000dcddc
   d5660:	2003deac 	.word	0x2003deac
   d5664:	000dcde3 	.word	0x000dcde3
   d5668:	2003dee6 	.word	0x2003dee6
   d566c:	000dcdee 	.word	0x000dcdee
   d5670:	000d4121 	.word	0x000d4121
   d5674:	000dcdfd 	.word	0x000dcdfd
   d5678:	000d438d 	.word	0x000d438d
   d567c:	000dce07 	.word	0x000dce07
   d5680:	000d413d 	.word	0x000d413d
   d5684:	000dce11 	.word	0x000dce11
   d5688:	000d43d5 	.word	0x000d43d5
   d568c:	000dce19 	.word	0x000dce19
   d5690:	000d4469 	.word	0x000d4469
   d5694:	000dce26 	.word	0x000dce26
   d5698:	000d4af9 	.word	0x000d4af9
   d569c:	000dce33 	.word	0x000dce33
   d56a0:	000d4581 	.word	0x000d4581
   d56a4:	2003deb8 	.word	0x2003deb8
   d56a8:	000dcebc 	.word	0x000dcebc
   d56ac:	000dcb62 	.word	0x000dcb62
   d56b0:	2003dec8 	.word	0x2003dec8
   d56b4:	000dcb28 	.word	0x000dcb28
   d56b8:	2003dfc0 	.word	0x2003dfc0
   d56bc:	2003df04 	.word	0x2003df04
   d56c0:	2003dff4 	.word	0x2003dff4
   d56c4:	2003f400 	.word	0x2003f400
   d56c8:	2003f408 	.word	0x2003f408
   d56cc:	2003f410 	.word	0x2003f410
   d56d0:	2003df08 	.word	0x2003df08
   d56d4:	2003dfac 	.word	0x2003dfac
   d56d8:	2003df64 	.word	0x2003df64
   d56dc:	2003defc 	.word	0x2003defc

000d56e0 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d56e0:	4b43      	ldr	r3, [pc, #268]	; (d57f0 <_GLOBAL__sub_I___appProductID+0x110>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d56e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56e6:	2400      	movs	r4, #0
   d56e8:	601c      	str	r4, [r3, #0]
   d56ea:	4b42      	ldr	r3, [pc, #264]	; (d57f4 <_GLOBAL__sub_I___appProductID+0x114>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d56ec:	4e42      	ldr	r6, [pc, #264]	; (d57f8 <_GLOBAL__sub_I___appProductID+0x118>)

// Pin Constants - Sensors
const int tempSensors =   A3;                      // PThree on-wire temp sensors on this pin (pulled up to VCC via 10k)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d56ee:	4d43      	ldr	r5, [pc, #268]	; (d57fc <_GLOBAL__sub_I___appProductID+0x11c>)
   d56f0:	2701      	movs	r7, #1
   d56f2:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d56f4:	f002 fb74 	bl	d7de0 <HAL_Pin_Map>
   d56f8:	4b41      	ldr	r3, [pc, #260]	; (d5800 <_GLOBAL__sub_I___appProductID+0x120>)
   d56fa:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d56fc:	f004 fc84 	bl	da008 <spark_protocol_instance>
   d5700:	4623      	mov	r3, r4
   d5702:	4622      	mov	r2, r4
   d5704:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5708:	f004 fc86 	bl	da018 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d570c:	f004 fc7c 	bl	da008 <spark_protocol_instance>
   d5710:	4622      	mov	r2, r4
   d5712:	4623      	mov	r3, r4
   d5714:	2102      	movs	r1, #2
   d5716:	f004 fc87 	bl	da028 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d571a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d571e:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5720:	6034      	str	r4, [r6, #0]
   d5722:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5724:	71b4      	strb	r4, [r6, #6]
   d5726:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5728:	2002      	movs	r0, #2
   d572a:	f002 fcfb 	bl	d8124 <set_system_mode>
   d572e:	462a      	mov	r2, r5
   d5730:	4934      	ldr	r1, [pc, #208]	; (d5804 <_GLOBAL__sub_I___appProductID+0x124>)
   d5732:	4630      	mov	r0, r6
   d5734:	f004 fd34 	bl	da1a0 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5738:	4e33      	ldr	r6, [pc, #204]	; (d5808 <_GLOBAL__sub_I___appProductID+0x128>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d573a:	4621      	mov	r1, r4
   d573c:	4638      	mov	r0, r7
   d573e:	f002 fd09 	bl	d8154 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5742:	4639      	mov	r1, r7
   d5744:	2004      	movs	r0, #4
   d5746:	f002 fae3 	bl	d7d10 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d574a:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d574e:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5750:	4642      	mov	r2, r8
   d5752:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5754:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5756:	f005 fda9 	bl	db2ac <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d575a:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d575c:	462a      	mov	r2, r5
   d575e:	492b      	ldr	r1, [pc, #172]	; (d580c <_GLOBAL__sub_I___appProductID+0x12c>)
   d5760:	80f3      	strh	r3, [r6, #6]
   d5762:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5764:	7537      	strb	r7, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5766:	f8a6 8004 	strh.w	r8, [r6, #4]
   d576a:	f004 fd19 	bl	da1a0 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d576e:	f004 fcf1 	bl	da154 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5772:	4e27      	ldr	r6, [pc, #156]	; (d5810 <_GLOBAL__sub_I___appProductID+0x130>)
   d5774:	4601      	mov	r1, r0
   d5776:	4630      	mov	r0, r6
   d5778:	f000 fc14 	bl	d5fa4 <_ZN8MCP79410C1ER7TwoWire>
   d577c:	462a      	mov	r2, r5
   d577e:	4925      	ldr	r1, [pc, #148]	; (d5814 <_GLOBAL__sub_I___appProductID+0x134>)
   d5780:	4630      	mov	r0, r6
   d5782:	f004 fd0d 	bl	da1a0 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5786:	f004 fce5 	bl	da154 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d578a:	4e23      	ldr	r6, [pc, #140]	; (d5818 <_GLOBAL__sub_I___appProductID+0x138>)
   d578c:	4623      	mov	r3, r4
   d578e:	4601      	mov	r1, r0
   d5790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5794:	4630      	mov	r0, r6
   d5796:	f000 f979 	bl	d5a8c <_ZN6MB85RCC1ER7TwoWireji>
   d579a:	4b20      	ldr	r3, [pc, #128]	; (d581c <_GLOBAL__sub_I___appProductID+0x13c>)
   d579c:	6033      	str	r3, [r6, #0]
   d579e:	4630      	mov	r0, r6
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d57a0:	4e1f      	ldr	r6, [pc, #124]	; (d5820 <_GLOBAL__sub_I___appProductID+0x140>)
   d57a2:	4920      	ldr	r1, [pc, #128]	; (d5824 <_GLOBAL__sub_I___appProductID+0x144>)
   d57a4:	462a      	mov	r2, r5
   d57a6:	f004 fcfb 	bl	da1a0 <__aeabi_atexit>
   d57aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d57ae:	491e      	ldr	r1, [pc, #120]	; (d5828 <_GLOBAL__sub_I___appProductID+0x148>)
   d57b0:	4630      	mov	r0, r6
   d57b2:	f001 fb01 	bl	d6db8 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d57b6:	4b1d      	ldr	r3, [pc, #116]	; (d582c <_GLOBAL__sub_I___appProductID+0x14c>)
   d57b8:	6033      	str	r3, [r6, #0]
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d57ba:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d57bc:	4e1c      	ldr	r6, [pc, #112]	; (d5830 <_GLOBAL__sub_I___appProductID+0x150>)
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d57be:	491d      	ldr	r1, [pc, #116]	; (d5834 <_GLOBAL__sub_I___appProductID+0x154>)
   d57c0:	462a      	mov	r2, r5
   d57c2:	f004 fced 	bl	da1a0 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d57c6:	4622      	mov	r2, r4
   d57c8:	4641      	mov	r1, r8
AssetTracker t;
   d57ca:	4c1b      	ldr	r4, [pc, #108]	; (d5838 <_GLOBAL__sub_I___appProductID+0x158>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
   d57cc:	4630      	mov	r0, r6
   d57ce:	f000 f839 	bl	d5844 <_ZN7DS18B20C1Etb>
   d57d2:	462a      	mov	r2, r5
   d57d4:	4919      	ldr	r1, [pc, #100]	; (d583c <_GLOBAL__sub_I___appProductID+0x15c>)
   d57d6:	4630      	mov	r0, r6
   d57d8:	f004 fce2 	bl	da1a0 <__aeabi_atexit>
AssetTracker t;
   d57dc:	4620      	mov	r0, r4
   d57de:	f001 fc4b 	bl	d7078 <_ZN12AssetTrackerC1Ev>
   d57e2:	462a      	mov	r2, r5
   d57e4:	4620      	mov	r0, r4
   d57e6:	4916      	ldr	r1, [pc, #88]	; (d5840 <_GLOBAL__sub_I___appProductID+0x160>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d57e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
AssetTracker t;
   d57ec:	f004 bcd8 	b.w	da1a0 <__aeabi_atexit>
   d57f0:	2003df54 	.word	0x2003df54
   d57f4:	2003dee4 	.word	0x2003dee4
   d57f8:	2003df58 	.word	0x2003df58
   d57fc:	2003dea8 	.word	0x2003dea8
   d5800:	2003df68 	.word	0x2003df68
   d5804:	000d41a9 	.word	0x000d41a9
   d5808:	2003df3c 	.word	0x2003df3c
   d580c:	000d4109 	.word	0x000d4109
   d5810:	2003dec8 	.word	0x2003dec8
   d5814:	000d5d17 	.word	0x000d5d17
   d5818:	2003deb8 	.word	0x2003deb8
   d581c:	000dca24 	.word	0x000dca24
   d5820:	2003e010 	.word	0x2003e010
   d5824:	000d4181 	.word	0x000d4181
   d5828:	2003f418 	.word	0x2003f418
   d582c:	000dca40 	.word	0x000dca40
   d5830:	2003dff4 	.word	0x2003dff4
   d5834:	000d4159 	.word	0x000d4159
   d5838:	2003df08 	.word	0x2003df08
   d583c:	000d5899 	.word	0x000d5899
   d5840:	000d7041 	.word	0x000d7041

000d5844 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d5844:	b570      	push	{r4, r5, r6, lr}
   d5846:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d5848:	2300      	movs	r3, #0
   d584a:	6063      	str	r3, [r4, #4]
   d584c:	60a3      	str	r3, [r4, #8]
   d584e:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d5850:	6123      	str	r3, [r4, #16]
   d5852:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d5854:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d5856:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d5858:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d585a:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d585c:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d585e:	f7fe fc1c 	bl	d409a <_Znwj>
   d5862:	4605      	mov	r5, r0
   d5864:	b110      	cbz	r0, d586c <_ZN7DS18B20C1Etb+0x28>
   d5866:	4631      	mov	r1, r6
   d5868:	f000 ff32 	bl	d66d0 <_ZN7OneWireC1Et>
   d586c:	6025      	str	r5, [r4, #0]
}
   d586e:	4620      	mov	r0, r4
   d5870:	bd70      	pop	{r4, r5, r6, pc}

000d5872 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d5872:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d5874:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d5878:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d587a:	6800      	ldr	r0, [r0, #0]
   d587c:	4629      	mov	r1, r5
   d587e:	f001 f81b 	bl	d68b8 <_ZN7OneWire6searchEPh>
   d5882:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d5884:	bf1d      	ittte	ne
   d5886:	682b      	ldrne	r3, [r5, #0]
   d5888:	6023      	strne	r3, [r4, #0]
   d588a:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d588c:	6023      	streq	r3, [r4, #0]
   d588e:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d5890:	bf14      	ite	ne
   d5892:	2001      	movne	r0, #1
   d5894:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d5896:	bd38      	pop	{r3, r4, r5, pc}

000d5898 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d5898:	b510      	push	{r4, lr}
{
  delete(ds);
   d589a:	210e      	movs	r1, #14
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d589c:	4604      	mov	r4, r0
{
  delete(ds);
   d589e:	6800      	ldr	r0, [r0, #0]
   d58a0:	f004 fc83 	bl	da1aa <_ZdlPvj>
}
   d58a4:	4620      	mov	r0, r4
   d58a6:	bd10      	pop	{r4, pc}

000d58a8 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d58a8:	6800      	ldr	r0, [r0, #0]
   d58aa:	f000 bff9 	b.w	d68a0 <_ZN7OneWire12reset_searchEv>
	...

000d58b0 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d58b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d58b2:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d58b4:	4604      	mov	r4, r0
   d58b6:	460d      	mov	r5, r1
   d58b8:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d58ba:	b91b      	cbnz	r3, d58c4 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d58bc:	780b      	ldrb	r3, [r1, #0]
   d58be:	2b00      	cmp	r3, #0
   d58c0:	f000 80a6 	beq.w	d5a10 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d58c4:	6820      	ldr	r0, [r4, #0]
   d58c6:	f000 ff0d 	bl	d66e4 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d58ca:	7ea3      	ldrb	r3, [r4, #26]
   d58cc:	b123      	cbz	r3, d58d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d58ce:	b91e      	cbnz	r6, d58d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d58d0:	6820      	ldr	r0, [r4, #0]
   d58d2:	f000 ffe1 	bl	d6898 <_ZN7OneWire4skipEv>
   d58d6:	e003      	b.n	d58e0 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d58d8:	4629      	mov	r1, r5
   d58da:	6820      	ldr	r0, [r4, #0]
   d58dc:	f000 ffca 	bl	d6874 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d58e0:	2200      	movs	r2, #0
   d58e2:	2144      	movs	r1, #68	; 0x44
   d58e4:	6820      	ldr	r0, [r4, #0]
   d58e6:	f000 ff92 	bl	d680e <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d58ea:	f240 20ee 	movw	r0, #750	; 0x2ee
   d58ee:	f002 fd7f 	bl	d83f0 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d58f2:	6820      	ldr	r0, [r4, #0]
   d58f4:	f000 fef6 	bl	d66e4 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d58f8:	7ea3      	ldrb	r3, [r4, #26]
   d58fa:	b123      	cbz	r3, d5906 <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d58fc:	b91e      	cbnz	r6, d5906 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d58fe:	6820      	ldr	r0, [r4, #0]
   d5900:	f000 ffca 	bl	d6898 <_ZN7OneWire4skipEv>
   d5904:	e003      	b.n	d590e <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d5906:	4629      	mov	r1, r5
   d5908:	6820      	ldr	r0, [r4, #0]
   d590a:	f000 ffb3 	bl	d6874 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d590e:	2200      	movs	r2, #0
   d5910:	21be      	movs	r1, #190	; 0xbe
   d5912:	6820      	ldr	r0, [r4, #0]
   d5914:	f000 ff7b 	bl	d680e <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d5918:	782b      	ldrb	r3, [r5, #0]
   d591a:	2b26      	cmp	r3, #38	; 0x26
   d591c:	d104      	bne.n	d5928 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d591e:	2200      	movs	r2, #0
   d5920:	4611      	mov	r1, r2
   d5922:	6820      	ldr	r0, [r4, #0]
   d5924:	f000 ff73 	bl	d680e <_ZN7OneWire5writeEhh>
   d5928:	1ce6      	adds	r6, r4, #3
   d592a:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d592e:	6820      	ldr	r0, [r4, #0]
   d5930:	f000 ff90 	bl	d6854 <_ZN7OneWire4readEv>
   d5934:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d5938:	42be      	cmp	r6, r7
   d593a:	d1f8      	bne.n	d592e <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d593c:	2108      	movs	r1, #8
   d593e:	1d20      	adds	r0, r4, #4
   d5940:	f001 f835 	bl	d69ae <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d5944:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d5946:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d5948:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d594a:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d594c:	d160      	bne.n	d5a10 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d594e:	782b      	ldrb	r3, [r5, #0]
   d5950:	2b22      	cmp	r3, #34	; 0x22
   d5952:	d019      	beq.n	d5988 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d5954:	d814      	bhi.n	d5980 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d5956:	2b10      	cmp	r3, #16
   d5958:	d15a      	bne.n	d5a10 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d595a:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d595c:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d595e:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d5960:	bf08      	it	eq
   d5962:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d5964:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d5968:	bf02      	ittt	eq
   d596a:	f023 030f 	biceq.w	r3, r3, #15
   d596e:	f1c2 020c 	rsbeq	r2, r2, #12
   d5972:	189b      	addeq	r3, r3, r2
   d5974:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d5976:	ee00 3a10 	vmov	s0, r3
   d597a:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d5980:	2b26      	cmp	r3, #38	; 0x26
   d5982:	d01f      	beq.n	d59c4 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d5984:	2b28      	cmp	r3, #40	; 0x28
   d5986:	d143      	bne.n	d5a10 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d5988:	7a22      	ldrb	r2, [r4, #8]
   d598a:	7923      	ldrb	r3, [r4, #4]
   d598c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d5990:	2a20      	cmp	r2, #32
   d5992:	d005      	beq.n	d59a0 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d5994:	2a40      	cmp	r2, #64	; 0x40
   d5996:	d006      	beq.n	d59a6 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d5998:	b942      	cbnz	r2, d59ac <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d599a:	f023 0307 	bic.w	r3, r3, #7
   d599e:	e004      	b.n	d59aa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d59a0:	f023 0303 	bic.w	r3, r3, #3
   d59a4:	e001      	b.n	d59aa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d59a6:	f023 0301 	bic.w	r3, r3, #1
   d59aa:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d59ac:	7923      	ldrb	r3, [r4, #4]
   d59ae:	7960      	ldrb	r0, [r4, #5]
   d59b0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d59b4:	b200      	sxth	r0, r0
   d59b6:	f004 feb1 	bl	da71c <__aeabi_i2d>
   d59ba:	2200      	movs	r2, #0
   d59bc:	4b16      	ldr	r3, [pc, #88]	; (d5a18 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d59be:	f004 ff13 	bl	da7e8 <__aeabi_dmul>
   d59c2:	e020      	b.n	d5a06 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d59c4:	79a5      	ldrb	r5, [r4, #6]
   d59c6:	4628      	mov	r0, r5
   d59c8:	f004 fea8 	bl	da71c <__aeabi_i2d>
   d59cc:	4606      	mov	r6, r0
   d59ce:	7960      	ldrb	r0, [r4, #5]
   d59d0:	10c0      	asrs	r0, r0, #3
   d59d2:	ee07 0a90 	vmov	s15, r0
   d59d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d59da:	460f      	mov	r7, r1
   d59dc:	ee17 0a90 	vmov	r0, s15
   d59e0:	f004 feae 	bl	da740 <__aeabi_f2d>
   d59e4:	2200      	movs	r2, #0
   d59e6:	4b0d      	ldr	r3, [pc, #52]	; (d5a1c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d59e8:	f004 fefe 	bl	da7e8 <__aeabi_dmul>
   d59ec:	460b      	mov	r3, r1
   d59ee:	0629      	lsls	r1, r5, #24
   d59f0:	4602      	mov	r2, r0
   d59f2:	bf4c      	ite	mi
   d59f4:	490a      	ldrmi	r1, [pc, #40]	; (d5a20 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d59f6:	490b      	ldrpl	r1, [pc, #44]	; (d5a24 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d59f8:	2000      	movs	r0, #0
   d59fa:	f004 fef5 	bl	da7e8 <__aeabi_dmul>
   d59fe:	4632      	mov	r2, r6
   d5a00:	463b      	mov	r3, r7
   d5a02:	f004 fd3f 	bl	da484 <__adddf3>
   d5a06:	f005 f9e7 	bl	dadd8 <__aeabi_d2f>
   d5a0a:	ee00 0a10 	vmov	s0, r0
      break;
   d5a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d5a10:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5a28 <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d5a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a16:	bf00      	nop
   d5a18:	3fb00000 	.word	0x3fb00000
   d5a1c:	3fa00000 	.word	0x3fa00000
   d5a20:	bff00000 	.word	0xbff00000
   d5a24:	3ff00000 	.word	0x3ff00000
   d5a28:	7fc00000 	.word	0x7fc00000
   d5a2c:	00000000 	.word	0x00000000

000d5a30 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d5a30:	b508      	push	{r3, lr}
  return celsius * 1.8 + 32.0;
   d5a32:	ee10 0a10 	vmov	r0, s0
   d5a36:	f004 fe83 	bl	da740 <__aeabi_f2d>
   d5a3a:	a308      	add	r3, pc, #32	; (adr r3, d5a5c <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d5a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a40:	f004 fed2 	bl	da7e8 <__aeabi_dmul>
   d5a44:	2200      	movs	r2, #0
   d5a46:	4b04      	ldr	r3, [pc, #16]	; (d5a58 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d5a48:	f004 fd1c 	bl	da484 <__adddf3>
   d5a4c:	f005 f9c4 	bl	dadd8 <__aeabi_d2f>
}
   d5a50:	ee00 0a10 	vmov	s0, r0
   d5a54:	bd08      	pop	{r3, pc}
   d5a56:	bf00      	nop
   d5a58:	40400000 	.word	0x40400000
   d5a5c:	cccccccd 	.word	0xcccccccd
   d5a60:	3ffccccc 	.word	0x3ffccccc

000d5a64 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d5a64:	7e02      	ldrb	r2, [r0, #24]
   d5a66:	7e40      	ldrb	r0, [r0, #25]
}
   d5a68:	1a13      	subs	r3, r2, r0
   d5a6a:	4258      	negs	r0, r3
   d5a6c:	4158      	adcs	r0, r3
   d5a6e:	4770      	bx	lr

000d5a70 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d5a70:	f002 b9b6 	b.w	d7de0 <HAL_Pin_Map>

000d5a74 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5a74:	4770      	bx	lr

000d5a76 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5a76:	b510      	push	{r4, lr}
}
   d5a78:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5a7a:	4604      	mov	r4, r0
}
   d5a7c:	f004 fb95 	bl	da1aa <_ZdlPvj>
   d5a80:	4620      	mov	r0, r4
   d5a82:	bd10      	pop	{r4, pc}

000d5a84 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5a84:	6803      	ldr	r3, [r0, #0]
   d5a86:	b2c9      	uxtb	r1, r1
   d5a88:	689b      	ldr	r3, [r3, #8]
   d5a8a:	4718      	bx	r3

000d5a8c <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5a8c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5a8e:	4d03      	ldr	r5, [pc, #12]	; (d5a9c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5a90:	6005      	str	r5, [r0, #0]
   d5a92:	6041      	str	r1, [r0, #4]
   d5a94:	6082      	str	r2, [r0, #8]
   d5a96:	60c3      	str	r3, [r0, #12]
}
   d5a98:	bd30      	pop	{r4, r5, pc}
   d5a9a:	bf00      	nop
   d5a9c:	000dcf44 	.word	0x000dcf44

000d5aa0 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5aa0:	6840      	ldr	r0, [r0, #4]
   d5aa2:	f003 b99d 	b.w	d8de0 <_ZN7TwoWire5beginEv>

000d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5aa6:	b510      	push	{r4, lr}
   d5aa8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5aaa:	6800      	ldr	r0, [r0, #0]
   d5aac:	f003 f9e4 	bl	d8e78 <_ZN7TwoWire6unlockEv>
   d5ab0:	4620      	mov	r0, r4
   d5ab2:	bd10      	pop	{r4, pc}

000d5ab4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ab8:	b08a      	sub	sp, #40	; 0x28
   d5aba:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5abc:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5abe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5ac0:	f003 f9d1 	bl	d8e66 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5ac4:	221e      	movs	r2, #30
   d5ac6:	2100      	movs	r1, #0
   d5ac8:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5aca:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5acc:	f005 fbee 	bl	db2ac <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5ad0:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5ad2:	b1de      	cbz	r6, d5b0c <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5ad4:	683b      	ldr	r3, [r7, #0]
   d5ad6:	2e1e      	cmp	r6, #30
   d5ad8:	46b0      	mov	r8, r6
   d5ada:	bf28      	it	cs
   d5adc:	f04f 081e 	movcs.w	r8, #30
   d5ae0:	68dc      	ldr	r4, [r3, #12]
   d5ae2:	aa02      	add	r2, sp, #8
   d5ae4:	4643      	mov	r3, r8
   d5ae6:	4629      	mov	r1, r5
   d5ae8:	4638      	mov	r0, r7
   d5aea:	47a0      	blx	r4
			if (!result) {
   d5aec:	4604      	mov	r4, r0
   d5aee:	b948      	cbnz	r0, d5b04 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5af0:	462a      	mov	r2, r5
   d5af2:	490a      	ldr	r1, [pc, #40]	; (d5b1c <_ZN6MB85RC5eraseEv+0x68>)
   d5af4:	480a      	ldr	r0, [pc, #40]	; (d5b20 <_ZN6MB85RC5eraseEv+0x6c>)
   d5af6:	f7fe fbda 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d5afa:	a801      	add	r0, sp, #4
   d5afc:	f7ff ffd3 	bl	d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5b00:	4620      	mov	r0, r4
   d5b02:	e007      	b.n	d5b14 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5b04:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5b08:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5b0a:	e7e2      	b.n	d5ad2 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5b0c:	a801      	add	r0, sp, #4
   d5b0e:	f7ff ffca 	bl	d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5b12:	2001      	movs	r0, #1
}
   d5b14:	b00a      	add	sp, #40	; 0x28
   d5b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b1a:	bf00      	nop
   d5b1c:	000dcec0 	.word	0x000dcec0
   d5b20:	2003e294 	.word	0x2003e294

000d5b24 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b28:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b2a:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b2c:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b2e:	460e      	mov	r6, r1
   d5b30:	4617      	mov	r7, r2
   d5b32:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5b34:	f003 f997 	bl	d8e66 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5b38:	f1b8 0f00 	cmp.w	r8, #0
   d5b3c:	d101      	bne.n	d5b42 <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5b3e:	2401      	movs	r4, #1
   d5b40:	e03f      	b.n	d5bc2 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5b42:	68e1      	ldr	r1, [r4, #12]
   d5b44:	6860      	ldr	r0, [r4, #4]
   d5b46:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b4a:	f003 f981 	bl	d8e50 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5b4e:	0a31      	lsrs	r1, r6, #8
   d5b50:	6860      	ldr	r0, [r4, #4]
   d5b52:	f7ff ff97 	bl	d5a84 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5b56:	4631      	mov	r1, r6
   d5b58:	6860      	ldr	r0, [r4, #4]
   d5b5a:	f7ff ff93 	bl	d5a84 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5b5e:	2100      	movs	r1, #0
   d5b60:	6860      	ldr	r0, [r4, #4]
   d5b62:	f003 f978 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5b66:	b108      	cbz	r0, d5b6c <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5b68:	2400      	movs	r4, #0
   d5b6a:	e02a      	b.n	d5bc2 <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5b6c:	68e1      	ldr	r1, [r4, #12]
   d5b6e:	6860      	ldr	r0, [r4, #4]
   d5b70:	f1b8 0f20 	cmp.w	r8, #32
   d5b74:	46c1      	mov	r9, r8
   d5b76:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b7a:	bf28      	it	cs
   d5b7c:	f04f 0920 	movcs.w	r9, #32
   d5b80:	2301      	movs	r3, #1
   d5b82:	464a      	mov	r2, r9
   d5b84:	b2c9      	uxtb	r1, r1
   d5b86:	f003 f94d 	bl	d8e24 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5b8a:	f004 fae3 	bl	da154 <_Z19__fetch_global_Wirev>
   d5b8e:	6803      	ldr	r3, [r0, #0]
   d5b90:	691b      	ldr	r3, [r3, #16]
   d5b92:	4798      	blx	r3
   d5b94:	4548      	cmp	r0, r9
   d5b96:	dbe7      	blt.n	d5b68 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5b98:	463d      	mov	r5, r7
   d5b9a:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5b9e:	f004 fad9 	bl	da154 <_Z19__fetch_global_Wirev>
   d5ba2:	6803      	ldr	r3, [r0, #0]
   d5ba4:	695b      	ldr	r3, [r3, #20]
   d5ba6:	4798      	blx	r3
   d5ba8:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5bac:	1bea      	subs	r2, r5, r7
   d5bae:	ebc5 0308 	rsb	r3, r5, r8
   d5bb2:	4591      	cmp	r9, r2
   d5bb4:	eb05 060a 	add.w	r6, r5, sl
   d5bb8:	443b      	add	r3, r7
   d5bba:	d8f0      	bhi.n	d5b9e <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5bbc:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5bbe:	462f      	mov	r7, r5
   d5bc0:	e7ba      	b.n	d5b38 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5bc2:	a801      	add	r0, sp, #4
   d5bc4:	f7ff ff6f 	bl	d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5bc8:	4620      	mov	r0, r4
   d5bca:	b002      	add	sp, #8
   d5bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5bd0 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5bd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5bd4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5bd6:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5bd8:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5bda:	460d      	mov	r5, r1
   d5bdc:	4690      	mov	r8, r2
   d5bde:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5be0:	f003 f941 	bl	d8e66 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5be4:	b34f      	cbz	r7, d5c3a <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5be6:	68e1      	ldr	r1, [r4, #12]
   d5be8:	6860      	ldr	r0, [r4, #4]
   d5bea:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5bee:	f003 f92f 	bl	d8e50 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5bf2:	0a29      	lsrs	r1, r5, #8
   d5bf4:	6860      	ldr	r0, [r4, #4]
   d5bf6:	f7ff ff45 	bl	d5a84 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5bfa:	4629      	mov	r1, r5
   d5bfc:	6860      	ldr	r0, [r4, #4]
   d5bfe:	f7ff ff41 	bl	d5a84 <_ZN7TwoWire5writeEj>
   d5c02:	f108 091e 	add.w	r9, r8, #30
   d5c06:	4646      	mov	r6, r8
   d5c08:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5c0c:	6860      	ldr	r0, [r4, #4]
   d5c0e:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5c12:	6803      	ldr	r3, [r0, #0]
   d5c14:	689b      	ldr	r3, [r3, #8]
   d5c16:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5c18:	45b1      	cmp	r9, r6
   d5c1a:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5c1e:	46b0      	mov	r8, r6
				dataLen--;
   d5c20:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5c24:	d001      	beq.n	d5c2a <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5c26:	2f00      	cmp	r7, #0
   d5c28:	d1f0      	bne.n	d5c0c <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5c2a:	2101      	movs	r1, #1
   d5c2c:	6860      	ldr	r0, [r4, #4]
   d5c2e:	f003 f912 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5c32:	2800      	cmp	r0, #0
   d5c34:	d0d6      	beq.n	d5be4 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5c36:	2400      	movs	r4, #0
   d5c38:	e000      	b.n	d5c3c <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5c3a:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5c3c:	a801      	add	r0, sp, #4
   d5c3e:	f7ff ff32 	bl	d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5c42:	4620      	mov	r0, r4
   d5c44:	b002      	add	sp, #8
   d5c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5c4a <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c4e:	b08b      	sub	sp, #44	; 0x2c
   d5c50:	460e      	mov	r6, r1
   d5c52:	4615      	mov	r5, r2
   d5c54:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5c56:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c58:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c5a:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5c5c:	f003 f903 	bl	d8e66 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5c60:	42ae      	cmp	r6, r5
   d5c62:	d223      	bcs.n	d5cac <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5c64:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5c66:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5c68:	b90c      	cbnz	r4, d5c6e <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c6a:	2401      	movs	r4, #1
   d5c6c:	e03f      	b.n	d5cee <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5c6e:	2c1e      	cmp	r4, #30
   d5c70:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c72:	f8d8 3000 	ldr.w	r3, [r8]
   d5c76:	bf28      	it	cs
   d5c78:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5c7a:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c7c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c80:	aa02      	add	r2, sp, #8
   d5c82:	463b      	mov	r3, r7
   d5c84:	4631      	mov	r1, r6
   d5c86:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5c88:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5c8a:	47c8      	blx	r9
				if (!result) {
   d5c8c:	b908      	cbnz	r0, d5c92 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c8e:	2400      	movs	r4, #0
   d5c90:	e02d      	b.n	d5cee <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5c92:	f8d8 3000 	ldr.w	r3, [r8]
   d5c96:	aa02      	add	r2, sp, #8
   d5c98:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c9c:	4629      	mov	r1, r5
   d5c9e:	463b      	mov	r3, r7
   d5ca0:	4640      	mov	r0, r8
   d5ca2:	47c8      	blx	r9
				if (!result) {
   d5ca4:	2800      	cmp	r0, #0
   d5ca6:	d0f2      	beq.n	d5c8e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5ca8:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5caa:	e7dd      	b.n	d5c68 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5cac:	d9dd      	bls.n	d5c6a <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5cae:	2c00      	cmp	r4, #0
   d5cb0:	d0db      	beq.n	d5c6a <_ZN6MB85RC8moveDataEjjj+0x20>
   d5cb2:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5cb4:	f8d8 3000 	ldr.w	r3, [r8]
   d5cb8:	4627      	mov	r7, r4
   d5cba:	bf28      	it	cs
   d5cbc:	271e      	movcs	r7, #30
   d5cbe:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5cc2:	aa02      	add	r2, sp, #8
   d5cc4:	463b      	mov	r3, r7
   d5cc6:	4631      	mov	r1, r6
   d5cc8:	4640      	mov	r0, r8
   d5cca:	47c8      	blx	r9
				if (!result) {
   d5ccc:	2800      	cmp	r0, #0
   d5cce:	d0de      	beq.n	d5c8e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5cd0:	f8d8 3000 	ldr.w	r3, [r8]
   d5cd4:	aa02      	add	r2, sp, #8
   d5cd6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5cda:	4629      	mov	r1, r5
   d5cdc:	463b      	mov	r3, r7
   d5cde:	4640      	mov	r0, r8
   d5ce0:	47c8      	blx	r9
				if (!result) {
   d5ce2:	2800      	cmp	r0, #0
   d5ce4:	d0d3      	beq.n	d5c8e <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5ce6:	443e      	add	r6, r7
				framAddrTo += count;
   d5ce8:	443d      	add	r5, r7
				numBytes -= count;
   d5cea:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5cec:	e7df      	b.n	d5cae <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5cee:	a801      	add	r0, sp, #4
   d5cf0:	f7ff fed9 	bl	d5aa6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	b00b      	add	sp, #44	; 0x2c
   d5cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5cfc <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5cfc:	f002 b870 	b.w	d7de0 <HAL_Pin_Map>

000d5d00 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5d00:	2040      	movs	r0, #64	; 0x40
   d5d02:	4770      	bx	lr

000d5d04 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5d04:	2000      	movs	r0, #0
   d5d06:	4770      	bx	lr

000d5d08 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5d08:	2080      	movs	r0, #128	; 0x80
   d5d0a:	4770      	bx	lr

000d5d0c <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5d0c:	20ff      	movs	r0, #255	; 0xff
   d5d0e:	4770      	bx	lr

000d5d10 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5d10:	4770      	bx	lr

000d5d12 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5d12:	4770      	bx	lr

000d5d14 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5d14:	4770      	bx	lr

000d5d16 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5d16:	4770      	bx	lr

000d5d18 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5d18:	b510      	push	{r4, lr}

}
   d5d1a:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5d1c:	4604      	mov	r4, r0

}
   d5d1e:	f004 fa44 	bl	da1aa <_ZdlPvj>
   d5d22:	4620      	mov	r0, r4
   d5d24:	bd10      	pop	{r4, pc}

000d5d26 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5d26:	b510      	push	{r4, lr}

}
   d5d28:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5d2a:	4604      	mov	r4, r0

}
   d5d2c:	f004 fa3d 	bl	da1aa <_ZdlPvj>
   d5d30:	4620      	mov	r0, r4
   d5d32:	bd10      	pop	{r4, pc}

000d5d34 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5d34:	b510      	push	{r4, lr}

}
   d5d36:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5d38:	4604      	mov	r4, r0

}
   d5d3a:	f004 fa36 	bl	da1aa <_ZdlPvj>
   d5d3e:	4620      	mov	r0, r4
   d5d40:	bd10      	pop	{r4, pc}

000d5d42 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5d42:	b510      	push	{r4, lr}

}
   d5d44:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5d46:	4604      	mov	r4, r0

}
   d5d48:	f004 fa2f 	bl	da1aa <_ZdlPvj>
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	bd10      	pop	{r4, pc}

000d5d50 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5d50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5d54:	6803      	ldr	r3, [r0, #0]
   d5d56:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5d58:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5d5a:	4798      	blx	r3
   d5d5c:	2210      	movs	r2, #16
   d5d5e:	4601      	mov	r1, r0
   d5d60:	4668      	mov	r0, sp
   d5d62:	f005 faa3 	bl	db2ac <memset>

	size_t len = length();
   d5d66:	682b      	ldr	r3, [r5, #0]
   d5d68:	4628      	mov	r0, r5
   d5d6a:	689b      	ldr	r3, [r3, #8]
   d5d6c:	4798      	blx	r3
	size_t offset = 0;
   d5d6e:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5d70:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5d72:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5d74:	42bc      	cmp	r4, r7
   d5d76:	d20e      	bcs.n	d5d96 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5d78:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5d7a:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5d7c:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5d7e:	bf28      	it	cs
   d5d80:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5d82:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d86:	466a      	mov	r2, sp
   d5d88:	4633      	mov	r3, r6
   d5d8a:	4621      	mov	r1, r4
   d5d8c:	4628      	mov	r0, r5
   d5d8e:	47c0      	blx	r8
		if (!bResult) {
   d5d90:	b108      	cbz	r0, d5d96 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5d92:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5d94:	e7ee      	b.n	d5d74 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5d96:	b004      	add	sp, #16
   d5d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d9c <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5d9c:	2300      	movs	r3, #0
	rawMonth = 1;
   d5d9e:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5da0:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5da2:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5da4:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5da6:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5da8:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5daa:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5dac:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d5dae:	7443      	strb	r3, [r0, #17]
   d5db0:	4770      	bx	lr
	...

000d5db4 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d5db4:	2201      	movs	r2, #1
   d5db6:	b508      	push	{r3, lr}
   d5db8:	7142      	strb	r2, [r0, #5]
   d5dba:	2202      	movs	r2, #2
   d5dbc:	7182      	strb	r2, [r0, #6]
   d5dbe:	2203      	movs	r2, #3
   d5dc0:	4b06      	ldr	r3, [pc, #24]	; (d5ddc <_ZN12MCP79410TimeC1Ev+0x28>)
   d5dc2:	71c2      	strb	r2, [r0, #7]
   d5dc4:	2204      	movs	r2, #4
   d5dc6:	6003      	str	r3, [r0, #0]
   d5dc8:	7202      	strb	r2, [r0, #8]
   d5dca:	2300      	movs	r3, #0
   d5dcc:	2207      	movs	r2, #7
   d5dce:	7103      	strb	r3, [r0, #4]
   d5dd0:	7242      	strb	r2, [r0, #9]
   d5dd2:	7443      	strb	r3, [r0, #17]
	clear();
   d5dd4:	f7ff ffe2 	bl	d5d9c <_ZN12MCP79410Time5clearEv>
}
   d5dd8:	bd08      	pop	{r3, pc}
   d5dda:	bf00      	nop
   d5ddc:	000dd0a4 	.word	0x000dd0a4

000d5de0 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5de0:	0903      	lsrs	r3, r0, #4
}
   d5de2:	220a      	movs	r2, #10
   d5de4:	f000 000f 	and.w	r0, r0, #15
   d5de8:	fb02 0003 	mla	r0, r2, r3, r0
   d5dec:	4770      	bx	lr

000d5dee <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d5dee:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d5df0:	7a80      	ldrb	r0, [r0, #10]
   d5df2:	f7ff fff5 	bl	d5de0 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5df6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5dfa:	bd08      	pop	{r3, pc}

000d5dfc <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d5dfc:	7ac0      	ldrb	r0, [r0, #11]
   d5dfe:	f000 001f 	and.w	r0, r0, #31
   d5e02:	f7ff bfed 	b.w	d5de0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e06 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5e06:	7b00      	ldrb	r0, [r0, #12]
   d5e08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5e0c:	f7ff bfe8 	b.w	d5de0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e10 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d5e10:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5e12:	7b81      	ldrb	r1, [r0, #14]
   d5e14:	064a      	lsls	r2, r1, #25
   d5e16:	d50d      	bpl.n	d5e34 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5e18:	f001 001f 	and.w	r0, r1, #31
   d5e1c:	f7ff ffe0 	bl	d5de0 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d5e20:	068b      	lsls	r3, r1, #26
   d5e22:	d503      	bpl.n	d5e2c <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d5e24:	280c      	cmp	r0, #12
   d5e26:	d00b      	beq.n	d5e40 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d5e28:	300c      	adds	r0, #12
   d5e2a:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d5e2c:	280c      	cmp	r0, #12
   d5e2e:	bf08      	it	eq
   d5e30:	2000      	moveq	r0, #0
   d5e32:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5e34:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d5e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5e3c:	f7ff bfd0 	b.w	d5de0 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d5e40:	bd08      	pop	{r3, pc}

000d5e42 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d5e42:	7bc0      	ldrb	r0, [r0, #15]
   d5e44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5e48:	f7ff bfca 	b.w	d5de0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e4c <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d5e4c:	7c00      	ldrb	r0, [r0, #16]
   d5e4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5e52:	f7ff bfc5 	b.w	d5de0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e56 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5e56:	b510      	push	{r4, lr}
   d5e58:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5e5a:	2224      	movs	r2, #36	; 0x24
   d5e5c:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5e5e:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5e60:	a801      	add	r0, sp, #4
   d5e62:	f005 fa23 	bl	db2ac <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5e66:	4620      	mov	r0, r4
   d5e68:	f7ff ffc1 	bl	d5dee <_ZNK12MCP79410Time7getYearEv>
   d5e6c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5e70:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5e72:	4620      	mov	r0, r4
   d5e74:	f7ff ffc2 	bl	d5dfc <_ZNK12MCP79410Time8getMonthEv>
   d5e78:	3801      	subs	r0, #1
   d5e7a:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	f7ff ffc2 	bl	d5e06 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5e82:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d5e84:	4620      	mov	r0, r4
   d5e86:	f7ff ffc3 	bl	d5e10 <_ZNK12MCP79410Time7getHourEv>
   d5e8a:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5e8c:	4620      	mov	r0, r4
   d5e8e:	f7ff ffd8 	bl	d5e42 <_ZNK12MCP79410Time9getMinuteEv>
   d5e92:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e94:	4620      	mov	r0, r4
   d5e96:	f7ff ffd9 	bl	d5e4c <_ZNK12MCP79410Time9getSecondEv>
   d5e9a:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d5e9c:	a801      	add	r0, sp, #4
   d5e9e:	f005 fae9 	bl	db474 <mktime>
}
   d5ea2:	b00a      	add	sp, #40	; 0x28
   d5ea4:	bd10      	pop	{r4, pc}

000d5ea6 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d5ea6:	220a      	movs	r2, #10
   d5ea8:	fb90 f3f2 	sdiv	r3, r0, r2
   d5eac:	fb93 f1f2 	sdiv	r1, r3, r2
   d5eb0:	fb02 3111 	mls	r1, r2, r1, r3
   d5eb4:	fb02 0313 	mls	r3, r2, r3, r0
   d5eb8:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d5ebc:	b2c0      	uxtb	r0, r0
   d5ebe:	4770      	bx	lr

000d5ec0 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d5ec0:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d5ec2:	b510      	push	{r4, lr}
   d5ec4:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5ec6:	fb91 f0f3 	sdiv	r0, r1, r3
   d5eca:	fb00 1013 	mls	r0, r0, r3, r1
   d5ece:	f7ff ffea 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5ed2:	72a0      	strb	r0, [r4, #10]
   d5ed4:	bd10      	pop	{r4, pc}

000d5ed6 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d5ed6:	b510      	push	{r4, lr}
   d5ed8:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5eda:	4608      	mov	r0, r1
   d5edc:	f7ff ffe3 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5ee0:	72e0      	strb	r0, [r4, #11]
   d5ee2:	bd10      	pop	{r4, pc}

000d5ee4 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d5ee4:	b510      	push	{r4, lr}
   d5ee6:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d5ee8:	4608      	mov	r0, r1
   d5eea:	f7ff ffdc 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5eee:	7b23      	ldrb	r3, [r4, #12]
   d5ef0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5ef4:	4318      	orrs	r0, r3
   d5ef6:	7320      	strb	r0, [r4, #12]
   d5ef8:	bd10      	pop	{r4, pc}

000d5efa <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d5efa:	b510      	push	{r4, lr}
   d5efc:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d5efe:	1c48      	adds	r0, r1, #1
   d5f00:	f7ff ffd1 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5f04:	7b63      	ldrb	r3, [r4, #13]
   d5f06:	f023 0307 	bic.w	r3, r3, #7
   d5f0a:	4318      	orrs	r0, r3
   d5f0c:	7360      	strb	r0, [r4, #13]
   d5f0e:	bd10      	pop	{r4, pc}

000d5f10 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d5f10:	b510      	push	{r4, lr}
   d5f12:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5f14:	4608      	mov	r0, r1
   d5f16:	f7ff ffc6 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5f1a:	73a0      	strb	r0, [r4, #14]
   d5f1c:	bd10      	pop	{r4, pc}

000d5f1e <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d5f1e:	b510      	push	{r4, lr}
   d5f20:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5f22:	4608      	mov	r0, r1
   d5f24:	f7ff ffbf 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5f28:	73e0      	strb	r0, [r4, #15]
   d5f2a:	bd10      	pop	{r4, pc}

000d5f2c <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d5f30:	4608      	mov	r0, r1
   d5f32:	f7ff ffb8 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d5f36:	7c23      	ldrb	r3, [r4, #16]
   d5f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5f3c:	4318      	orrs	r0, r3
   d5f3e:	7420      	strb	r0, [r4, #16]
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d5f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f44:	4604      	mov	r4, r0
   d5f46:	a802      	add	r0, sp, #8
   d5f48:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d5f4c:	f004 ffe6 	bl	daf1c <gmtime>
   d5f50:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d5f52:	6941      	ldr	r1, [r0, #20]
   d5f54:	4620      	mov	r0, r4
   d5f56:	f7ff ffb3 	bl	d5ec0 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d5f5a:	6929      	ldr	r1, [r5, #16]
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	3101      	adds	r1, #1
   d5f60:	f7ff ffb9 	bl	d5ed6 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d5f64:	68e9      	ldr	r1, [r5, #12]
   d5f66:	4620      	mov	r0, r4
   d5f68:	f7ff ffbc 	bl	d5ee4 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d5f6c:	69a9      	ldr	r1, [r5, #24]
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff ffc3 	bl	d5efa <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d5f74:	68a9      	ldr	r1, [r5, #8]
   d5f76:	4620      	mov	r0, r4
   d5f78:	f7ff ffca 	bl	d5f10 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5f7c:	6869      	ldr	r1, [r5, #4]
   d5f7e:	4620      	mov	r0, r4
   d5f80:	f7ff ffcd 	bl	d5f1e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5f84:	6829      	ldr	r1, [r5, #0]
   d5f86:	293b      	cmp	r1, #59	; 0x3b
   d5f88:	bfa8      	it	ge
   d5f8a:	213b      	movge	r1, #59	; 0x3b
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	f7ff ffcd 	bl	d5f2c <_ZN12MCP79410Time9setSecondEi>
}
   d5f92:	b003      	add	sp, #12
   d5f94:	bd30      	pop	{r4, r5, pc}

000d5f96 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d5f96:	b510      	push	{r4, lr}
   d5f98:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d5f9a:	f7ff ffd2 	bl	d5f42 <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d5f9e:	7a63      	ldrb	r3, [r4, #9]
   d5fa0:	7463      	strb	r3, [r4, #17]
   d5fa2:	bd10      	pop	{r4, pc}

000d5fa4 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5fa4:	4a08      	ldr	r2, [pc, #32]	; (d5fc8 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d5fa6:	6002      	str	r2, [r0, #0]
   d5fa8:	2200      	movs	r2, #0
   d5faa:	7202      	strb	r2, [r0, #8]
   d5fac:	7242      	strb	r2, [r0, #9]
   d5fae:	2201      	movs	r2, #1
   d5fb0:	7282      	strb	r2, [r0, #10]
   d5fb2:	4603      	mov	r3, r0
   d5fb4:	2203      	movs	r2, #3
   d5fb6:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5fb8:	4a04      	ldr	r2, [pc, #16]	; (d5fcc <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5fba:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5fbc:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5fbe:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5fc0:	4a03      	ldr	r2, [pc, #12]	; (d5fd0 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5fc2:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5fc4:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d5fc6:	4770      	bx	lr
   d5fc8:	000dd0b4 	.word	0x000dd0b4
   d5fcc:	000dcf84 	.word	0x000dcf84
   d5fd0:	000dcf60 	.word	0x000dcf60

000d5fd4 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fd8:	4605      	mov	r5, r0
   d5fda:	460f      	mov	r7, r1
   d5fdc:	4691      	mov	r9, r2
   d5fde:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5fe0:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d5fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5fe4:	429c      	cmp	r4, r3
   d5fe6:	d230      	bcs.n	d604a <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d5fe8:	4639      	mov	r1, r7
   d5fea:	6868      	ldr	r0, [r5, #4]
   d5fec:	f002 ff2c 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5ff0:	eb09 0104 	add.w	r1, r9, r4
   d5ff4:	6868      	ldr	r0, [r5, #4]
   d5ff6:	f7ff fd45 	bl	d5a84 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5ffa:	2100      	movs	r1, #0
   d5ffc:	6868      	ldr	r0, [r5, #4]
   d5ffe:	f002 ff2a 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6002:	4606      	mov	r6, r0
   d6004:	b9d8      	cbnz	r0, d603e <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6008:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d600a:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d600c:	2a20      	cmp	r2, #32
   d600e:	f04f 0301 	mov.w	r3, #1
   d6012:	bf28      	it	cs
   d6014:	2220      	movcs	r2, #32
   d6016:	4639      	mov	r1, r7
   d6018:	f002 ff04 	bl	d8e24 <_ZN7TwoWire11requestFromEhjh>
   d601c:	eb0a 0804 	add.w	r8, sl, r4
   d6020:	4683      	mov	fp, r0
   d6022:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6024:	ebc8 0306 	rsb	r3, r8, r6
   d6028:	459b      	cmp	fp, r3
   d602a:	d906      	bls.n	d603a <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d602c:	6868      	ldr	r0, [r5, #4]
   d602e:	6803      	ldr	r3, [r0, #0]
   d6030:	695b      	ldr	r3, [r3, #20]
   d6032:	4798      	blx	r3
   d6034:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6038:	e7f4      	b.n	d6024 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d603a:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d603c:	e7d1      	b.n	d5fe2 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d603e:	4602      	mov	r2, r0
   d6040:	4904      	ldr	r1, [pc, #16]	; (d6054 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6042:	4805      	ldr	r0, [pc, #20]	; (d6058 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d6044:	f7fe f933 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6048:	e000      	b.n	d604c <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d604a:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d604c:	4630      	mov	r0, r6
   d604e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6052:	bf00      	nop
   d6054:	000dcffe 	.word	0x000dcffe
   d6058:	2003e06c 	.word	0x2003e06c

000d605c <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d605e:	2301      	movs	r3, #1
   d6060:	9300      	str	r3, [sp, #0]
   d6062:	460a      	mov	r2, r1
   d6064:	ab03      	add	r3, sp, #12
   d6066:	216f      	movs	r1, #111	; 0x6f
   d6068:	f7ff ffb4 	bl	d5fd4 <_ZNK8MCP7941010deviceReadEhhPhj>
   d606c:	b910      	cbnz	r0, d6074 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d606e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6072:	e000      	b.n	d6076 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d6074:	2000      	movs	r0, #0
	}
}
   d6076:	b005      	add	sp, #20
   d6078:	f85d fb04 	ldr.w	pc, [sp], #4

000d607c <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d607c:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d607e:	2103      	movs	r1, #3
   d6080:	f7ff ffec 	bl	d605c <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6084:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6088:	bd08      	pop	{r3, pc}

000d608a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d608a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d608c:	461e      	mov	r6, r3
   d608e:	2b00      	cmp	r3, #0
   d6090:	bf0c      	ite	eq
   d6092:	2307      	moveq	r3, #7
   d6094:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6096:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6098:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d609a:	ab02      	add	r3, sp, #8
   d609c:	460a      	mov	r2, r1
   d609e:	216f      	movs	r1, #111	; 0x6f
   d60a0:	f7ff ff98 	bl	d5fd4 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d60a4:	4605      	mov	r5, r0
   d60a6:	b9d8      	cbnz	r0, d60e0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d60a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d60ac:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d60ae:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d60b2:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d60b4:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d60b8:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d60ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d60be:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d60c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d60c4:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d60c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d60ca:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d60cc:	b91e      	cbnz	r6, d60d6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d60ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d60d2:	72a3      	strb	r3, [r4, #10]
   d60d4:	e004      	b.n	d60e0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d60d6:	f003 fdf1 	bl	d9cbc <_ZN9TimeClass4yearEv>
   d60da:	f7ff fee4 	bl	d5ea6 <_ZN12MCP79410Time8intToBcdEi>
   d60de:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d60e0:	4628      	mov	r0, r5
   d60e2:	b004      	add	sp, #16
   d60e4:	bd70      	pop	{r4, r5, r6, pc}

000d60e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d60e6:	b538      	push	{r3, r4, r5, lr}
   d60e8:	2300      	movs	r3, #0
   d60ea:	460c      	mov	r4, r1
   d60ec:	460a      	mov	r2, r1
   d60ee:	4619      	mov	r1, r3
   d60f0:	4605      	mov	r5, r0
   d60f2:	f7ff ffca 	bl	d608a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d60f6:	b928      	cbnz	r0, d6104 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60f8:	7aa3      	ldrb	r3, [r4, #10]
   d60fa:	b11b      	cbz	r3, d6104 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d60fc:	4628      	mov	r0, r5
   d60fe:	f7ff ffbd 	bl	d607c <_ZNK8MCP7941020getOscillatorRunningEv>
   d6102:	b900      	cbnz	r0, d6106 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d6104:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d6106:	bd38      	pop	{r3, r4, r5, pc}

000d6108 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6108:	b510      	push	{r4, lr}
   d610a:	b086      	sub	sp, #24
   d610c:	4604      	mov	r4, r0
	MCP79410Time time;
   d610e:	a801      	add	r0, sp, #4
   d6110:	f7ff fe50 	bl	d5db4 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6114:	a901      	add	r1, sp, #4
   d6116:	4620      	mov	r0, r4
   d6118:	f7ff ffe5 	bl	d60e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d611c:	b110      	cbz	r0, d6124 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d611e:	a801      	add	r0, sp, #4
   d6120:	f7ff fe99 	bl	d5e56 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6124:	b006      	add	sp, #24
   d6126:	bd10      	pop	{r4, pc}

000d6128 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6128:	b530      	push	{r4, r5, lr}
   d612a:	4604      	mov	r4, r0
   d612c:	b085      	sub	sp, #20
	wire.begin();
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f002 fe56 	bl	d8de0 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d6134:	f003 fd6e 	bl	d9c14 <_ZN9TimeClass7isValidEv>
   d6138:	b9c0      	cbnz	r0, d616c <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d613a:	7ae3      	ldrb	r3, [r4, #11]
   d613c:	079b      	lsls	r3, r3, #30
   d613e:	d515      	bpl.n	d616c <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6140:	4620      	mov	r0, r4
   d6142:	f7ff ffe1 	bl	d6108 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d6146:	4605      	mov	r5, r0
   d6148:	b180      	cbz	r0, d616c <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d614a:	f003 fca3 	bl	d9a94 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d614e:	4b09      	ldr	r3, [pc, #36]	; (d6174 <_ZN8MCP794105setupEv+0x4c>)
   d6150:	4909      	ldr	r1, [pc, #36]	; (d6178 <_ZN8MCP794105setupEv+0x50>)
   d6152:	681b      	ldr	r3, [r3, #0]
   d6154:	462a      	mov	r2, r5
   d6156:	4668      	mov	r0, sp
   d6158:	f003 fd2a 	bl	d9bb0 <_ZN9TimeClass6formatElPKc>
   d615c:	4807      	ldr	r0, [pc, #28]	; (d617c <_ZN8MCP794105setupEv+0x54>)
   d615e:	9a00      	ldr	r2, [sp, #0]
   d6160:	4907      	ldr	r1, [pc, #28]	; (d6180 <_ZN8MCP794105setupEv+0x58>)
   d6162:	f7fe f8a4 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d6166:	4668      	mov	r0, sp
   d6168:	f003 fac7 	bl	d96fa <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d616c:	2301      	movs	r3, #1
   d616e:	7223      	strb	r3, [r4, #8]
}
   d6170:	b005      	add	sp, #20
   d6172:	bd30      	pop	{r4, r5, pc}
   d6174:	2003ddf0 	.word	0x2003ddf0
   d6178:	2003e4c4 	.word	0x2003e4c4
   d617c:	2003e06c 	.word	0x2003e06c
   d6180:	000dd018 	.word	0x000dd018

000d6184 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6184:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6188:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d618c:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d618e:	6803      	ldr	r3, [r0, #0]
   d6190:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6192:	4604      	mov	r4, r0
   d6194:	460d      	mov	r5, r1
   d6196:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6198:	4798      	blx	r3
   d619a:	4580      	cmp	r8, r0
   d619c:	d80a      	bhi.n	d61b4 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d619e:	9600      	str	r6, [sp, #0]
   d61a0:	463b      	mov	r3, r7
   d61a2:	b2ea      	uxtb	r2, r5
   d61a4:	2157      	movs	r1, #87	; 0x57
   d61a6:	6860      	ldr	r0, [r4, #4]
   d61a8:	f7ff ff14 	bl	d5fd4 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d61ac:	fab0 f080 	clz	r0, r0
   d61b0:	0940      	lsrs	r0, r0, #5
   d61b2:	e000      	b.n	d61b6 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d61b4:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d61b6:	b002      	add	sp, #8
   d61b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61bc <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d61bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d61c0:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d61c4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d61c6:	6803      	ldr	r3, [r0, #0]
   d61c8:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d61ca:	4605      	mov	r5, r0
   d61cc:	460c      	mov	r4, r1
   d61ce:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d61d0:	4798      	blx	r3
   d61d2:	4580      	cmp	r8, r0
   d61d4:	d80c      	bhi.n	d61f0 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d61d6:	f104 0220 	add.w	r2, r4, #32
   d61da:	9600      	str	r6, [sp, #0]
   d61dc:	463b      	mov	r3, r7
   d61de:	b2d2      	uxtb	r2, r2
   d61e0:	216f      	movs	r1, #111	; 0x6f
   d61e2:	6868      	ldr	r0, [r5, #4]
   d61e4:	f7ff fef6 	bl	d5fd4 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d61e8:	fab0 f080 	clz	r0, r0
   d61ec:	0940      	lsrs	r0, r0, #5
   d61ee:	e000      	b.n	d61f2 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d61f0:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d61f2:	b002      	add	sp, #8
   d61f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d61f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61fc:	4607      	mov	r7, r0
   d61fe:	4689      	mov	r9, r1
   d6200:	4692      	mov	sl, r2
   d6202:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6204:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6208:	429c      	cmp	r4, r3
   d620a:	d228      	bcs.n	d625e <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d620c:	4649      	mov	r1, r9
   d620e:	6878      	ldr	r0, [r7, #4]
   d6210:	f002 fe1a 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6214:	eb0a 0104 	add.w	r1, sl, r4
   d6218:	6878      	ldr	r0, [r7, #4]
   d621a:	f7ff fc33 	bl	d5a84 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6220:	1b1e      	subs	r6, r3, r4
   d6222:	2e1f      	cmp	r6, #31
   d6224:	eb0b 0804 	add.w	r8, fp, r4
   d6228:	bf28      	it	cs
   d622a:	261f      	movcs	r6, #31
   d622c:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d622e:	6878      	ldr	r0, [r7, #4]
   d6230:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6234:	6802      	ldr	r2, [r0, #0]
   d6236:	6892      	ldr	r2, [r2, #8]
   d6238:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d623a:	ebc8 0205 	rsb	r2, r8, r5
   d623e:	42b2      	cmp	r2, r6
   d6240:	d3f5      	bcc.n	d622e <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d6242:	2101      	movs	r1, #1
   d6244:	6878      	ldr	r0, [r7, #4]
   d6246:	f002 fe06 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d624a:	4605      	mov	r5, r0
   d624c:	b128      	cbz	r0, d625a <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d624e:	4602      	mov	r2, r0
   d6250:	4905      	ldr	r1, [pc, #20]	; (d6268 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6252:	4806      	ldr	r0, [pc, #24]	; (d626c <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d6254:	f7fe f82b 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6258:	e002      	b.n	d6260 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d625a:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d625c:	e7d3      	b.n	d6206 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d625e:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d6260:	4628      	mov	r0, r5
   d6262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6266:	bf00      	nop
   d6268:	000dd02d 	.word	0x000dd02d
   d626c:	2003e06c 	.word	0x2003e06c

000d6270 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d6272:	7c13      	ldrb	r3, [r2, #16]
   d6274:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6278:	7bd3      	ldrb	r3, [r2, #15]
   d627a:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d627e:	7b93      	ldrb	r3, [r2, #14]
   d6280:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6284:	7b53      	ldrb	r3, [r2, #13]
   d6286:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d628a:	7b13      	ldrb	r3, [r2, #12]
   d628c:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6290:	7ad3      	ldrb	r3, [r2, #11]
   d6292:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6296:	7a93      	ldrb	r3, [r2, #10]
   d6298:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d629c:	2307      	movs	r3, #7
   d629e:	9300      	str	r3, [sp, #0]
   d62a0:	460a      	mov	r2, r1
   d62a2:	ab02      	add	r3, sp, #8
   d62a4:	216f      	movs	r1, #111	; 0x6f
   d62a6:	f7ff ffa7 	bl	d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d62aa:	b005      	add	sp, #20
   d62ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d62b0 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d62b0:	b510      	push	{r4, lr}
   d62b2:	b086      	sub	sp, #24
   d62b4:	4604      	mov	r4, r0
	MCP79410Time time;
   d62b6:	a801      	add	r0, sp, #4
   d62b8:	f7ff fd7c 	bl	d5db4 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d62bc:	a801      	add	r0, sp, #4
   d62be:	f7ff fe40 	bl	d5f42 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d62c2:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d62c6:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d62c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d62cc:	f88d 3014 	strb.w	r3, [sp, #20]
   d62d0:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d62d4:	b112      	cbz	r2, d62dc <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d62d6:	f043 0308 	orr.w	r3, r3, #8
   d62da:	e001      	b.n	d62e0 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d62dc:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d62e0:	aa01      	add	r2, sp, #4
   d62e2:	2100      	movs	r1, #0
   d62e4:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d62e6:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d62ea:	f7ff ffc1 	bl	d6270 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d62ee:	fab0 f080 	clz	r0, r0
   d62f2:	0940      	lsrs	r0, r0, #5
   d62f4:	b006      	add	sp, #24
   d62f6:	bd10      	pop	{r4, pc}

000d62f8 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d62f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d62fa:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d62fc:	f003 fc8a 	bl	d9c14 <_ZN9TimeClass7isValidEv>
   d6300:	4604      	mov	r4, r0
   d6302:	b1b8      	cbz	r0, d6334 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d6304:	f003 fca7 	bl	d9c56 <_ZN9TimeClass3nowEv>
   d6308:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d630a:	4601      	mov	r1, r0
   d630c:	4630      	mov	r0, r6
   d630e:	f7ff ffcf 	bl	d62b0 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6312:	4b0c      	ldr	r3, [pc, #48]	; (d6344 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d6314:	490c      	ldr	r1, [pc, #48]	; (d6348 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d6316:	681b      	ldr	r3, [r3, #0]
   d6318:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d631a:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d631c:	4668      	mov	r0, sp
   d631e:	f003 fc47 	bl	d9bb0 <_ZN9TimeClass6formatElPKc>
   d6322:	9a00      	ldr	r2, [sp, #0]
   d6324:	4909      	ldr	r1, [pc, #36]	; (d634c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6326:	480a      	ldr	r0, [pc, #40]	; (d6350 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6328:	f7fd ffc1 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d632c:	4668      	mov	r0, sp
   d632e:	f003 f9e4 	bl	d96fa <_ZN6StringD1Ev>
   d6332:	e003      	b.n	d633c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d6334:	4907      	ldr	r1, [pc, #28]	; (d6354 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6336:	4806      	ldr	r0, [pc, #24]	; (d6350 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6338:	f7fd ffb9 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d633c:	4620      	mov	r0, r4
   d633e:	b004      	add	sp, #16
   d6340:	bd70      	pop	{r4, r5, r6, pc}
   d6342:	bf00      	nop
   d6344:	2003ddf0 	.word	0x2003ddf0
   d6348:	2003e4c4 	.word	0x2003e4c4
   d634c:	000dd048 	.word	0x000dd048
   d6350:	2003e06c 	.word	0x2003e06c
   d6354:	000dd05e 	.word	0x000dd05e

000d6358 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6358:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d635a:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d635c:	4604      	mov	r4, r0
	if (!timeSet) {
   d635e:	b98d      	cbnz	r5, d6384 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d6360:	f003 fc58 	bl	d9c14 <_ZN9TimeClass7isValidEv>
   d6364:	b170      	cbz	r0, d6384 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6366:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d6368:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d636a:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d636e:	f001 ff8f 	bl	d8290 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d6372:	b138      	cbz	r0, d6384 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6374:	7ae3      	ldrb	r3, [r4, #11]
   d6376:	07db      	lsls	r3, r3, #31
   d6378:	d502      	bpl.n	d6380 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d637a:	4620      	mov	r0, r4
   d637c:	f7ff ffbc 	bl	d62f8 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d6380:	2301      	movs	r3, #1
   d6382:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d6384:	b003      	add	sp, #12
   d6386:	bd30      	pop	{r4, r5, pc}

000d6388 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d638a:	ab04      	add	r3, sp, #16
   d638c:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6390:	2201      	movs	r2, #1
   d6392:	9200      	str	r2, [sp, #0]
   d6394:	460a      	mov	r2, r1
   d6396:	216f      	movs	r1, #111	; 0x6f
   d6398:	f7ff ff2e 	bl	d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d639c:	b005      	add	sp, #20
   d639e:	f85d fb04 	ldr.w	pc, [sp], #4

000d63a2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d63a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63a4:	4614      	mov	r4, r2
   d63a6:	4605      	mov	r5, r0
   d63a8:	460e      	mov	r6, r1
   d63aa:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d63ac:	f7ff fe56 	bl	d605c <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d63b0:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d63b2:	ea40 0207 	orr.w	r2, r0, r7
   d63b6:	4631      	mov	r1, r6
   d63b8:	4628      	mov	r0, r5
}
   d63ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d63be:	f7ff bfe3 	b.w	d6388 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d63c2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d63c2:	b113      	cbz	r3, d63ca <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d63c4:	4613      	mov	r3, r2
   d63c6:	22ff      	movs	r2, #255	; 0xff
   d63c8:	e001      	b.n	d63ce <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d63ca:	43d2      	mvns	r2, r2
   d63cc:	b2d2      	uxtb	r2, r2
   d63ce:	f7ff bfe8 	b.w	d63a2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d63d2 <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d63d2:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d63d4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d63d6:	d80c      	bhi.n	d63f2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d63d8:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d63da:	f04f 0300 	mov.w	r3, #0
   d63de:	bf0c      	ite	eq
   d63e0:	2210      	moveq	r2, #16
   d63e2:	2220      	movne	r2, #32
   d63e4:	2107      	movs	r1, #7
   d63e6:	f7ff ffec 	bl	d63c2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d63ea:	fab0 f080 	clz	r0, r0
   d63ee:	0940      	lsrs	r0, r0, #5
   d63f0:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d63f2:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d63f4:	bd08      	pop	{r3, pc}

000d63f6 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d63f6:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d63f8:	f04f 0300 	mov.w	r3, #0
   d63fc:	f04f 0208 	mov.w	r2, #8
   d6400:	bf14      	ite	ne
   d6402:	2114      	movne	r1, #20
   d6404:	210d      	moveq	r1, #13
   d6406:	f7ff bfdc 	b.w	d63c2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d640a <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d640a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d640e:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6412:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6414:	6803      	ldr	r3, [r0, #0]
   d6416:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6418:	4605      	mov	r5, r0
   d641a:	460c      	mov	r4, r1
   d641c:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d641e:	4798      	blx	r3
   d6420:	4580      	cmp	r8, r0
   d6422:	d80c      	bhi.n	d643e <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6424:	f104 0220 	add.w	r2, r4, #32
   d6428:	9600      	str	r6, [sp, #0]
   d642a:	463b      	mov	r3, r7
   d642c:	b2d2      	uxtb	r2, r2
   d642e:	216f      	movs	r1, #111	; 0x6f
   d6430:	6868      	ldr	r0, [r5, #4]
   d6432:	f7ff fee1 	bl	d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d6436:	fab0 f080 	clz	r0, r0
   d643a:	0940      	lsrs	r0, r0, #5
   d643c:	e000      	b.n	d6440 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d643e:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6440:	b002      	add	sp, #8
   d6442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6446 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6446:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6448:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d644a:	b085      	sub	sp, #20
   d644c:	4606      	mov	r6, r0
   d644e:	460c      	mov	r4, r1
   d6450:	4617      	mov	r7, r2
   d6452:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d6454:	d901      	bls.n	d645a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6456:	2000      	movs	r0, #0
   d6458:	e043      	b.n	d64e2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d645a:	f7ff fe0f 	bl	d607c <_ZNK8MCP7941020getOscillatorRunningEv>
   d645e:	2800      	cmp	r0, #0
   d6460:	d0f9      	beq.n	d6456 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d6462:	4629      	mov	r1, r5
   d6464:	4630      	mov	r0, r6
   d6466:	f7ff ffc6 	bl	d63f6 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d646a:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d646c:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d646e:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d6472:	7be3      	ldrb	r3, [r4, #15]
   d6474:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6478:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d647c:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d647e:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6480:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d6484:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d6488:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d648a:	b117      	cbz	r7, d6492 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d648c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6490:	e001      	b.n	d6496 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d6492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d6496:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d649a:	7c63      	ldrb	r3, [r4, #17]
   d649c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d64a0:	011b      	lsls	r3, r3, #4
   d64a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d64a6:	4313      	orrs	r3, r2
   d64a8:	2d00      	cmp	r5, #0
   d64aa:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d64ae:	f04f 0306 	mov.w	r3, #6
   d64b2:	9300      	str	r3, [sp, #0]
   d64b4:	bf08      	it	eq
   d64b6:	220a      	moveq	r2, #10
   d64b8:	ab02      	add	r3, sp, #8
   d64ba:	bf18      	it	ne
   d64bc:	2211      	movne	r2, #17
   d64be:	216f      	movs	r1, #111	; 0x6f
   d64c0:	4630      	mov	r0, r6
   d64c2:	f7ff fe99 	bl	d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d64c6:	4604      	mov	r4, r0
   d64c8:	b940      	cbnz	r0, d64dc <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d64ca:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d64cc:	bf0c      	ite	eq
   d64ce:	2310      	moveq	r3, #16
   d64d0:	2320      	movne	r3, #32
   d64d2:	22ff      	movs	r2, #255	; 0xff
   d64d4:	2107      	movs	r1, #7
   d64d6:	4630      	mov	r0, r6
   d64d8:	f7ff ff63 	bl	d63a2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d64dc:	fab4 f084 	clz	r0, r4
   d64e0:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d64e2:	b005      	add	sp, #20
   d64e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64e6 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d64e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d64e8:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d64ea:	b087      	sub	sp, #28
   d64ec:	4606      	mov	r6, r0
   d64ee:	460c      	mov	r4, r1
   d64f0:	4617      	mov	r7, r2
   d64f2:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d64f4:	d901      	bls.n	d64fa <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d64f6:	2000      	movs	r0, #0
   d64f8:	e010      	b.n	d651c <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d64fa:	f7ff fe05 	bl	d6108 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d64fe:	2800      	cmp	r0, #0
   d6500:	d0f9      	beq.n	d64f6 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d6502:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d6504:	a801      	add	r0, sp, #4
   d6506:	f7ff fc55 	bl	d5db4 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d650a:	a801      	add	r0, sp, #4
   d650c:	f7ff fd43 	bl	d5f96 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d6510:	462b      	mov	r3, r5
   d6512:	463a      	mov	r2, r7
   d6514:	a901      	add	r1, sp, #4
   d6516:	4630      	mov	r0, r6
   d6518:	f7ff ff95 	bl	d6446 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d651c:	b007      	add	sp, #28
   d651e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6520 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6520:	b538      	push	{r3, r4, r5, lr}
   d6522:	4605      	mov	r5, r0
   d6524:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6526:	2157      	movs	r1, #87	; 0x57
   d6528:	6868      	ldr	r0, [r5, #4]
   d652a:	f002 fc8d 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d652e:	2101      	movs	r1, #1
   d6530:	6868      	ldr	r0, [r5, #4]
   d6532:	f002 fc90 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6536:	b108      	cbz	r0, d653c <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d6538:	3c01      	subs	r4, #1
   d653a:	d1f4      	bne.n	d6526 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d653c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6540 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6544:	4605      	mov	r5, r0
   d6546:	18d7      	adds	r7, r2, r3
   d6548:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d654a:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d654e:	42bc      	cmp	r4, r7
   d6550:	d01e      	beq.n	d6590 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6552:	2157      	movs	r1, #87	; 0x57
   d6554:	6868      	ldr	r0, [r5, #4]
   d6556:	f002 fc77 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d655a:	eb08 0104 	add.w	r1, r8, r4
   d655e:	6868      	ldr	r0, [r5, #4]
   d6560:	f7ff fa90 	bl	d5a84 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6564:	6868      	ldr	r0, [r5, #4]
   d6566:	f814 1b01 	ldrb.w	r1, [r4], #1
   d656a:	6803      	ldr	r3, [r0, #0]
   d656c:	689b      	ldr	r3, [r3, #8]
   d656e:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d6570:	2101      	movs	r1, #1
   d6572:	6868      	ldr	r0, [r5, #4]
   d6574:	f002 fc6f 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6578:	4606      	mov	r6, r0
   d657a:	b128      	cbz	r0, d6588 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d657c:	4602      	mov	r2, r0
   d657e:	4906      	ldr	r1, [pc, #24]	; (d6598 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6580:	4806      	ldr	r0, [pc, #24]	; (d659c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6582:	f7fd fe94 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6586:	e004      	b.n	d6592 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d6588:	4628      	mov	r0, r5
   d658a:	f7ff ffc9 	bl	d6520 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d658e:	e7de      	b.n	d654e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6590:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d6592:	4630      	mov	r0, r6
   d6594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6598:	000dd073 	.word	0x000dd073
   d659c:	2003e06c 	.word	0x2003e06c

000d65a0 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d65a4:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65a8:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d65aa:	6803      	ldr	r3, [r0, #0]
   d65ac:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d65ae:	4604      	mov	r4, r0
   d65b0:	460d      	mov	r5, r1
   d65b2:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d65b4:	4798      	blx	r3
   d65b6:	4580      	cmp	r8, r0
   d65b8:	d80a      	bhi.n	d65d0 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d65ba:	4633      	mov	r3, r6
   d65bc:	463a      	mov	r2, r7
   d65be:	b2e9      	uxtb	r1, r5
   d65c0:	6860      	ldr	r0, [r4, #4]
   d65c2:	f7ff ffbd 	bl	d6540 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d65c6:	fab0 f080 	clz	r0, r0
   d65ca:	0940      	lsrs	r0, r0, #5
   d65cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d65d0:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d65d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d65d8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d65d8:	b508      	push	{r3, lr}
   d65da:	f001 fc01 	bl	d7de0 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d65e0:	4a02      	ldr	r2, [pc, #8]	; (d65ec <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d65e2:	601a      	str	r2, [r3, #0]
   d65e4:	bd08      	pop	{r3, pc}
   d65e6:	bf00      	nop
   d65e8:	2003e06c 	.word	0x2003e06c
   d65ec:	000dd094 	.word	0x000dd094

000d65f0 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d65f0:	f001 bbf6 	b.w	d7de0 <HAL_Pin_Map>

000d65f4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d65f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d65f6:	6803      	ldr	r3, [r0, #0]
   d65f8:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d65fa:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d65fc:	d904      	bls.n	d6608 <nrf_gpio_pin_port_decode+0x14>
   d65fe:	4a07      	ldr	r2, [pc, #28]	; (d661c <nrf_gpio_pin_port_decode+0x28>)
   d6600:	2100      	movs	r1, #0
   d6602:	200a      	movs	r0, #10
   d6604:	f001 fd6c 	bl	d80e0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d6608:	6823      	ldr	r3, [r4, #0]
   d660a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d660c:	bf83      	ittte	hi
   d660e:	f003 031f 	andhi.w	r3, r3, #31
   d6612:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d6614:	4802      	ldrhi	r0, [pc, #8]	; (d6620 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d6616:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d661a:	bd10      	pop	{r4, pc}
   d661c:	000d7d61 	.word	0x000d7d61
   d6620:	50000300 	.word	0x50000300

000d6624 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d6624:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d6626:	4b0b      	ldr	r3, [pc, #44]	; (d6654 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	0100      	lsls	r0, r0, #4
   d662c:	1819      	adds	r1, r3, r0
   d662e:	5c1a      	ldrb	r2, [r3, r0]
   d6630:	784b      	ldrb	r3, [r1, #1]
   d6632:	a802      	add	r0, sp, #8
   d6634:	f003 031f 	and.w	r3, r3, #31
   d6638:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d663c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6640:	f7ff ffd8 	bl	d65f4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d6644:	9a01      	ldr	r2, [sp, #4]
   d6646:	2301      	movs	r3, #1
   d6648:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d664a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d664e:	b003      	add	sp, #12
   d6650:	f85d fb04 	ldr.w	pc, [sp], #4
   d6654:	2003e070 	.word	0x2003e070

000d6658 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d6658:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d665a:	4b0b      	ldr	r3, [pc, #44]	; (d6688 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d665c:	681b      	ldr	r3, [r3, #0]
   d665e:	0100      	lsls	r0, r0, #4
   d6660:	1819      	adds	r1, r3, r0
   d6662:	5c1a      	ldrb	r2, [r3, r0]
   d6664:	784b      	ldrb	r3, [r1, #1]
   d6666:	a802      	add	r0, sp, #8
   d6668:	f003 031f 	and.w	r3, r3, #31
   d666c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d6670:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6674:	f7ff ffbe 	bl	d65f4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d6678:	9a01      	ldr	r2, [sp, #4]
   d667a:	2301      	movs	r3, #1
   d667c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d667e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d6682:	b003      	add	sp, #12
   d6684:	f85d fb04 	ldr.w	pc, [sp], #4
   d6688:	2003e070 	.word	0x2003e070

000d668c <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d668c:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d668e:	4b0f      	ldr	r3, [pc, #60]	; (d66cc <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	0100      	lsls	r0, r0, #4
   d6694:	181a      	adds	r2, r3, r0
   d6696:	5c1c      	ldrb	r4, [r3, r0]
   d6698:	7853      	ldrb	r3, [r2, #1]
   d669a:	a802      	add	r0, sp, #8
   d669c:	f003 031f 	and.w	r3, r3, #31
   d66a0:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d66a4:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d66a8:	f7ff ffa4 	bl	d65f4 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d66ac:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d66b0:	a802      	add	r0, sp, #8
   d66b2:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d66b6:	f7ff ff9d 	bl	d65f4 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d66ba:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d66be:	9800      	ldr	r0, [sp, #0]
   d66c0:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d66c4:	f000 0001 	and.w	r0, r0, #1
   d66c8:	b002      	add	sp, #8
   d66ca:	bd10      	pop	{r4, pc}
   d66cc:	2003e070 	.word	0x2003e070

000d66d0 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d66d0:	b538      	push	{r3, r4, r5, lr}
   d66d2:	4604      	mov	r4, r0
   d66d4:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d66d6:	4628      	mov	r0, r5
   d66d8:	2100      	movs	r1, #0
   d66da:	f003 fce3 	bl	da0a4 <pinMode>
    _pin = pin;
   d66de:	8025      	strh	r5, [r4, #0]
}
   d66e0:	4620      	mov	r0, r4
   d66e2:	bd38      	pop	{r3, r4, r5, pc}

000d66e4 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d66e4:	b570      	push	{r4, r5, r6, lr}
   d66e6:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d66e8:	f002 fbf8 	bl	d8edc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d66ec:	2100      	movs	r1, #0
   d66ee:	8828      	ldrh	r0, [r5, #0]
   d66f0:	f001 fb7e 	bl	d7df0 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d66f4:	f002 fbf4 	bl	d8ee0 <_Z10interruptsv>
   d66f8:	247d      	movs	r4, #125	; 0x7d
   d66fa:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d66fc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d6700:	d02d      	beq.n	d675e <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6702:	2002      	movs	r0, #2
   d6704:	f001 fb2c 	bl	d7d60 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d6708:	8828      	ldrh	r0, [r5, #0]
   d670a:	f7ff ffbf 	bl	d668c <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
   d670e:	2800      	cmp	r0, #0
   d6710:	d0f3      	beq.n	d66fa <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
   d6712:	f002 fbe3 	bl	d8edc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d6716:	8828      	ldrh	r0, [r5, #0]
   d6718:	f7ff ff84 	bl	d6624 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d671c:	2101      	movs	r1, #1
   d671e:	8828      	ldrh	r0, [r5, #0]
   d6720:	f001 fb66 	bl	d7df0 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d6724:	f002 fbdc 	bl	d8ee0 <_Z10interruptsv>
   d6728:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d672c:	f001 fb18 	bl	d7d60 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d6730:	f001 fb36 	bl	d7da0 <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6734:	2100      	movs	r1, #0
   d6736:	4606      	mov	r6, r0
   d6738:	8828      	ldrh	r0, [r5, #0]
   d673a:	f001 fb59 	bl	d7df0 <HAL_Pin_Mode>
   d673e:	2046      	movs	r0, #70	; 0x46
   d6740:	f001 fb0e 	bl	d7d60 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d6744:	8828      	ldrh	r0, [r5, #0]
   d6746:	f7ff ffa1 	bl	d668c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d674a:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d674e:	4630      	mov	r0, r6
   d6750:	f001 fb2e 	bl	d7db0 <HAL_enable_irq>
   d6754:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d6758:	0964      	lsrs	r4, r4, #5
   d675a:	f001 fb01 	bl	d7d60 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d675e:	4620      	mov	r0, r4
   d6760:	bd70      	pop	{r4, r5, r6, pc}

000d6762 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d6762:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d6764:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d6768:	4604      	mov	r4, r0
    if (v & 1)
   d676a:	d015      	beq.n	d6798 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d676c:	f001 fb18 	bl	d7da0 <HAL_disable_irq>
   d6770:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d6772:	8820      	ldrh	r0, [r4, #0]
   d6774:	f7ff ff56 	bl	d6624 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6778:	2101      	movs	r1, #1
   d677a:	8820      	ldrh	r0, [r4, #0]
   d677c:	f001 fb38 	bl	d7df0 <HAL_Pin_Mode>
   d6780:	2001      	movs	r0, #1
   d6782:	f001 faed 	bl	d7d60 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6786:	2100      	movs	r1, #0
   d6788:	8820      	ldrh	r0, [r4, #0]
   d678a:	f001 fb31 	bl	d7df0 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d678e:	4628      	mov	r0, r5
   d6790:	f001 fb0e 	bl	d7db0 <HAL_enable_irq>
   d6794:	203b      	movs	r0, #59	; 0x3b
   d6796:	e014      	b.n	d67c2 <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d6798:	f001 fb02 	bl	d7da0 <HAL_disable_irq>
   d679c:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d679e:	8820      	ldrh	r0, [r4, #0]
   d67a0:	f7ff ff40 	bl	d6624 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d67a4:	2101      	movs	r1, #1
   d67a6:	8820      	ldrh	r0, [r4, #0]
   d67a8:	f001 fb22 	bl	d7df0 <HAL_Pin_Mode>
   d67ac:	2041      	movs	r0, #65	; 0x41
   d67ae:	f001 fad7 	bl	d7d60 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d67b2:	4631      	mov	r1, r6
   d67b4:	8820      	ldrh	r0, [r4, #0]
   d67b6:	f001 fb1b 	bl	d7df0 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d67ba:	4628      	mov	r0, r5
   d67bc:	f001 faf8 	bl	d7db0 <HAL_enable_irq>
   d67c0:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d67c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d67c6:	f001 bacb 	b.w	d7d60 <HAL_Delay_Microseconds>

000d67ca <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d67ca:	b538      	push	{r3, r4, r5, lr}
   d67cc:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d67ce:	f001 fae7 	bl	d7da0 <HAL_disable_irq>
   d67d2:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d67d4:	8820      	ldrh	r0, [r4, #0]
   d67d6:	f7ff ff25 	bl	d6624 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d67da:	2101      	movs	r1, #1
   d67dc:	8820      	ldrh	r0, [r4, #0]
   d67de:	f001 fb07 	bl	d7df0 <HAL_Pin_Mode>
   d67e2:	2001      	movs	r0, #1
   d67e4:	f001 fabc 	bl	d7d60 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d67e8:	2100      	movs	r1, #0
   d67ea:	8820      	ldrh	r0, [r4, #0]
   d67ec:	f001 fb00 	bl	d7df0 <HAL_Pin_Mode>
   d67f0:	200d      	movs	r0, #13
   d67f2:	f001 fab5 	bl	d7d60 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d67f6:	8820      	ldrh	r0, [r4, #0]
   d67f8:	f7ff ff48 	bl	d668c <_ZN7OneWire15digitalReadFastEv.isra.4>
   d67fc:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d67fe:	4628      	mov	r0, r5
   d6800:	f001 fad6 	bl	d7db0 <HAL_enable_irq>
   d6804:	202e      	movs	r0, #46	; 0x2e
   d6806:	f001 faab 	bl	d7d60 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d680a:	4620      	mov	r0, r4
   d680c:	bd38      	pop	{r3, r4, r5, pc}

000d680e <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6812:	4605      	mov	r5, r0
   d6814:	4688      	mov	r8, r1
   d6816:	4617      	mov	r7, r2
   d6818:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d681a:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d681c:	ea18 0f04 	tst.w	r8, r4
   d6820:	bf14      	ite	ne
   d6822:	2101      	movne	r1, #1
   d6824:	2100      	moveq	r1, #0
   d6826:	4628      	mov	r0, r5
   d6828:	f7ff ff9b 	bl	d6762 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d682c:	0064      	lsls	r4, r4, #1
   d682e:	3e01      	subs	r6, #1
   d6830:	b2e4      	uxtb	r4, r4
   d6832:	d1f3      	bne.n	d681c <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
   d6834:	b167      	cbz	r7, d6850 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d6836:	f002 fb51 	bl	d8edc <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d683a:	8828      	ldrh	r0, [r5, #0]
   d683c:	f7ff ff0c 	bl	d6658 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6840:	8828      	ldrh	r0, [r5, #0]
   d6842:	2101      	movs	r1, #1
   d6844:	f001 fad4 	bl	d7df0 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d6848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
   d684c:	f002 bb48 	b.w	d8ee0 <_Z10interruptsv>
   d6850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6854 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d6854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6856:	4607      	mov	r7, r0
   d6858:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d685a:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d685c:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d685e:	4638      	mov	r0, r7
   d6860:	f7ff ffb3 	bl	d67ca <_ZN7OneWire8read_bitEv>
   d6864:	b100      	cbz	r0, d6868 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d6866:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d6868:	0064      	lsls	r4, r4, #1
   d686a:	3e01      	subs	r6, #1
   d686c:	b2e4      	uxtb	r4, r4
   d686e:	d1f6      	bne.n	d685e <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
   d6870:	4628      	mov	r0, r5
   d6872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6874 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d6874:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d6876:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d6878:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
   d687a:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d687c:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
   d687e:	f7ff ffc6 	bl	d680e <_ZN7OneWire5writeEhh>
   d6882:	1e65      	subs	r5, r4, #1
   d6884:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
   d6886:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d688a:	2200      	movs	r2, #0
   d688c:	4630      	mov	r0, r6
   d688e:	f7ff ffbe 	bl	d680e <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
   d6892:	42a5      	cmp	r5, r4
   d6894:	d1f7      	bne.n	d6886 <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
   d6896:	bd70      	pop	{r4, r5, r6, pc}

000d6898 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d6898:	2200      	movs	r2, #0
   d689a:	21cc      	movs	r1, #204	; 0xcc
   d689c:	f7ff bfb7 	b.w	d680e <_ZN7OneWire5writeEhh>

000d68a0 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d68a0:	2300      	movs	r3, #0
   d68a2:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d68a4:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d68a6:	72c3      	strb	r3, [r0, #11]
   d68a8:	f100 020a 	add.w	r2, r0, #10
   d68ac:	3002      	adds	r0, #2

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d68ae:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
   d68b2:	4282      	cmp	r2, r0
   d68b4:	d1fb      	bne.n	d68ae <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
   d68b6:	4770      	bx	lr

000d68b8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d68b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d68bc:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d68be:	4604      	mov	r4, r0
   d68c0:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d68c2:	2d00      	cmp	r5, #0
   d68c4:	d15e      	bne.n	d6984 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
   d68c6:	f7ff ff0d 	bl	d66e4 <_ZN7OneWire5resetEv>
   d68ca:	b920      	cbnz	r0, d68d6 <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
   d68cc:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d68ce:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d68d0:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d68d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d68d6:	462a      	mov	r2, r5
   d68d8:	21f0      	movs	r1, #240	; 0xf0
   d68da:	4620      	mov	r0, r4
   d68dc:	f7ff ff97 	bl	d680e <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d68e0:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d68e2:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d68e4:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d68e6:	4620      	mov	r0, r4
   d68e8:	f7ff ff6f 	bl	d67ca <_ZN7OneWire8read_bitEv>
   d68ec:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d68ee:	4620      	mov	r0, r4
   d68f0:	f7ff ff6b 	bl	d67ca <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d68f4:	f1b9 0f01 	cmp.w	r9, #1
   d68f8:	d102      	bne.n	d6900 <_ZN7OneWire6searchEPh+0x48>
   d68fa:	2801      	cmp	r0, #1
   d68fc:	d11b      	bne.n	d6936 <_ZN7OneWire6searchEPh+0x7e>
   d68fe:	e037      	b.n	d6970 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
   d6900:	4581      	cmp	r9, r0
   d6902:	eb04 0305 	add.w	r3, r4, r5
   d6906:	d11e      	bne.n	d6946 <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d6908:	7aa2      	ldrb	r2, [r4, #10]
   d690a:	4297      	cmp	r7, r2
   d690c:	d207      	bcs.n	d691e <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d690e:	789a      	ldrb	r2, [r3, #2]
   d6910:	4216      	tst	r6, r2
   d6912:	bf14      	ite	ne
   d6914:	f04f 0901 	movne.w	r9, #1
   d6918:	f04f 0900 	moveq.w	r9, #0
   d691c:	e004      	b.n	d6928 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d691e:	bf0c      	ite	eq
   d6920:	f04f 0901 	moveq.w	r9, #1
   d6924:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
   d6928:	f1b9 0f00 	cmp.w	r9, #0
   d692c:	d103      	bne.n	d6936 <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d692e:	2f08      	cmp	r7, #8
   d6930:	d808      	bhi.n	d6944 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d6932:	72e7      	strb	r7, [r4, #11]
   d6934:	e006      	b.n	d6944 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d6936:	1962      	adds	r2, r4, r5
   d6938:	f04f 0901 	mov.w	r9, #1
   d693c:	7893      	ldrb	r3, [r2, #2]
   d693e:	4333      	orrs	r3, r6
   d6940:	7093      	strb	r3, [r2, #2]
   d6942:	e004      	b.n	d694e <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d6944:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d6946:	789a      	ldrb	r2, [r3, #2]
   d6948:	ea22 0206 	bic.w	r2, r2, r6
   d694c:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d694e:	4649      	mov	r1, r9
   d6950:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d6952:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d6954:	f7ff ff05 	bl	d6762 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d6958:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d695c:	bf04      	itt	eq
   d695e:	3501      	addeq	r5, #1
   d6960:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d6962:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d6966:	bf08      	it	eq
   d6968:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d696a:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d696c:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d696e:	d9ba      	bls.n	d68e6 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d6970:	2f40      	cmp	r7, #64	; 0x40
   d6972:	d907      	bls.n	d6984 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d6974:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d6978:	f1ba 0f00 	cmp.w	sl, #0
   d697c:	d112      	bne.n	d69a4 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d697e:	2301      	movs	r3, #1
   d6980:	7323      	strb	r3, [r4, #12]
   d6982:	e00f      	b.n	d69a4 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d6984:	2000      	movs	r0, #0
   d6986:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d6988:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d698a:	72e0      	strb	r0, [r4, #11]
   d698c:	1c63      	adds	r3, r4, #1
   d698e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d6992:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
   d6994:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d6998:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d699c:	42a3      	cmp	r3, r4
   d699e:	d1f9      	bne.n	d6994 <_ZN7OneWire6searchEPh+0xdc>
   d69a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
   d69a4:	78a3      	ldrb	r3, [r4, #2]
   d69a6:	2b00      	cmp	r3, #0
   d69a8:	d0ec      	beq.n	d6984 <_ZN7OneWire6searchEPh+0xcc>
   d69aa:	2001      	movs	r0, #1
   d69ac:	e7ee      	b.n	d698c <_ZN7OneWire6searchEPh+0xd4>

000d69ae <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d69ae:	b530      	push	{r4, r5, lr}
   d69b0:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d69b2:	2000      	movs	r0, #0

    while (len--)
   d69b4:	3901      	subs	r1, #1
   d69b6:	b2c9      	uxtb	r1, r1
   d69b8:	29ff      	cmp	r1, #255	; 0xff
   d69ba:	d013      	beq.n	d69e4 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
   d69bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d69c0:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d69c2:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
   d69c6:	f013 0f01 	tst.w	r3, #1
   d69ca:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d69ce:	bf1c      	itt	ne
   d69d0:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d69d4:	b2d8      	uxtbne	r0, r3
   d69d6:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d69d8:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
   d69dc:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d69e0:	d1ef      	bne.n	d69c2 <_ZN7OneWire4crc8EPhh+0x14>
   d69e2:	e7e7      	b.n	d69b4 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
   d69e4:	bd30      	pop	{r4, r5, pc}
	...

000d69e8 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d69e8:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d69ea:	f001 f9f9 	bl	d7de0 <HAL_Pin_Map>
   d69ee:	4b01      	ldr	r3, [pc, #4]	; (d69f4 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d69f0:	6018      	str	r0, [r3, #0]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	2003e070 	.word	0x2003e070

000d69f8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69f8:	6842      	ldr	r2, [r0, #4]
   d69fa:	6803      	ldr	r3, [r0, #0]
   d69fc:	1050      	asrs	r0, r2, #1
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
   d69fe:	f012 0f01 	tst.w	r2, #1
   d6a02:	bf18      	it	ne
   d6a04:	580a      	ldrne	r2, [r1, r0]
   d6a06:	4408      	add	r0, r1
   d6a08:	bf18      	it	ne
   d6a0a:	58d3      	ldrne	r3, [r2, r3]
   d6a0c:	4718      	bx	r3

000d6a0e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6a0e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6a10:	2301      	movs	r3, #1
   d6a12:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6a14:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6a16:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d6a18:	b10b      	cbz	r3, d6a1e <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d6a1a:	68c0      	ldr	r0, [r0, #12]
   d6a1c:	e006      	b.n	d6a2c <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6a1e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6a20:	b128      	cbz	r0, d6a2e <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a22:	6883      	ldr	r3, [r0, #8]
   d6a24:	b90b      	cbnz	r3, d6a2a <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6a26:	f003 fbdc 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a2a:	68c3      	ldr	r3, [r0, #12]
   d6a2c:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6a2e:	2301      	movs	r3, #1
   d6a30:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6a32:	2000      	movs	r0, #0
    }
   d6a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d6a38:	f001 b962 	b.w	d7d00 <os_thread_exit>

000d6a3c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d6a3c:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a3e:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
   d6a40:	d101      	bne.n	d6a46 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d6a42:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
   d6a44:	e005      	b.n	d6a52 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a46:	2a02      	cmp	r2, #2
   d6a48:	d103      	bne.n	d6a52 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6a4a:	b110      	cbz	r0, d6a52 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
   d6a4c:	c903      	ldmia	r1, {r0, r1}
   d6a4e:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d6a52:	2000      	movs	r0, #0
   d6a54:	4770      	bx	lr

000d6a56 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a56:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a58:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a5a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a5c:	b113      	cbz	r3, d6a64 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a5e:	2203      	movs	r2, #3
   d6a60:	4601      	mov	r1, r0
   d6a62:	4798      	blx	r3
    }
   d6a64:	4620      	mov	r0, r4
   d6a66:	bd10      	pop	{r4, pc}

000d6a68 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6a68:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6a6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6a6c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6a70:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
   d6a72:	3008      	adds	r0, #8
   d6a74:	f001 f91c 	bl	d7cb0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6a78:	2004      	movs	r0, #4
   d6a7a:	f7fd fb0e 	bl	d409a <_Znwj>
   d6a7e:	4604      	mov	r4, r0
   d6a80:	2800      	cmp	r0, #0
   d6a82:	d035      	beq.n	d6af0 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6a84:	491c      	ldr	r1, [pc, #112]	; (d6af8 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
   d6a86:	2014      	movs	r0, #20
   d6a88:	f003 fb9a 	bl	da1c0 <_ZnwjRKSt9nothrow_t>
   d6a8c:	b130      	cbz	r0, d6a9c <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a8e:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d6a90:	7403      	strb	r3, [r0, #16]
   d6a92:	6003      	str	r3, [r0, #0]
   d6a94:	6043      	str	r3, [r0, #4]
   d6a96:	6083      	str	r3, [r0, #8]
   d6a98:	60c3      	str	r3, [r0, #12]
   d6a9a:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a9c:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d6a9e:	b1b0      	cbz	r0, d6ace <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
   d6aa0:	4b16      	ldr	r3, [pc, #88]	; (d6afc <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6aa2:	6083      	str	r3, [r0, #8]
   d6aa4:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6aa6:	4916      	ldr	r1, [pc, #88]	; (d6b00 <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d6aa8:	60dd      	str	r5, [r3, #12]
   d6aaa:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6ab0:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6ab4:	2202      	movs	r2, #2
   d6ab6:	4b13      	ldr	r3, [pc, #76]	; (d6b04 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d6ab8:	3004      	adds	r0, #4
   d6aba:	f001 f8c9 	bl	d7c50 <os_thread_create>
   d6abe:	b930      	cbnz	r0, d6ace <_ZN21PublishQueueAsyncBase5setupEv+0x66>
   d6ac0:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d6ac2:	7c1b      	ldrb	r3, [r3, #16]
   d6ac4:	b9a3      	cbnz	r3, d6af0 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d6ac6:	2001      	movs	r0, #1
   d6ac8:	f001 f942 	bl	d7d50 <HAL_Delay_Milliseconds>
   d6acc:	e7f8      	b.n	d6ac0 <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ace:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ad0:	2300      	movs	r3, #0
   d6ad2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6ad4:	b166      	cbz	r6, d6af0 <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ad6:	6837      	ldr	r7, [r6, #0]
   d6ad8:	b137      	cbz	r7, d6ae8 <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ada:	4638      	mov	r0, r7
   d6adc:	f7ff ffbb 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ae0:	2110      	movs	r1, #16
   d6ae2:	4638      	mov	r0, r7
   d6ae4:	f003 fb61 	bl	da1aa <_ZdlPvj>
   d6ae8:	2114      	movs	r1, #20
   d6aea:	4630      	mov	r0, r6
   d6aec:	f003 fb5d 	bl	da1aa <_ZdlPvj>
   d6af0:	606c      	str	r4, [r5, #4]
}
   d6af2:	b003      	add	sp, #12
   d6af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6af6:	bf00      	nop
   d6af8:	000dd97c 	.word	0x000dd97c
   d6afc:	000d6d1b 	.word	0x000d6d1b
   d6b00:	000dd0e4 	.word	0x000dd0e4
   d6b04:	000d6a0f 	.word	0x000d6a0f

000d6b08 <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6b08:	f247 5130 	movw	r1, #30000	; 0x7530
   d6b0c:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6b0e:	490a      	ldr	r1, [pc, #40]	; (d6b38 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6b10:	4a0a      	ldr	r2, [pc, #40]	; (d6b3c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6b12:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6b14:	490a      	ldr	r1, [pc, #40]	; (d6b40 <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
   d6b16:	6002      	str	r2, [r0, #0]
   d6b18:	61c1      	str	r1, [r0, #28]
   d6b1a:	2200      	movs	r2, #0
	    _M_manager = &_My_handler::_M_manager;
   d6b1c:	4909      	ldr	r1, [pc, #36]	; (d6b44 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
   d6b1e:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6b20:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6b22:	6181      	str	r1, [r0, #24]
   d6b24:	6202      	str	r2, [r0, #32]
   d6b26:	6242      	str	r2, [r0, #36]	; 0x24
   d6b28:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   d6b2c:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   d6b30:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
   d6b34:	4770      	bx	lr
   d6b36:	bf00      	nop
   d6b38:	000d6e75 	.word	0x000d6e75
   d6b3c:	000dd1a8 	.word	0x000dd1a8
   d6b40:	000d69f9 	.word	0x000d69f9
   d6b44:	000d6a3d 	.word	0x000d6a3d

000d6b48 <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6b48:	b510      	push	{r4, lr}
   d6b4a:	4b04      	ldr	r3, [pc, #16]	; (d6b5c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6b4c:	4604      	mov	r4, r0
   d6b4e:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b52:	f7ff ff80 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>

}
   d6b56:	4620      	mov	r0, r4
   d6b58:	bd10      	pop	{r4, pc}
   d6b5a:	bf00      	nop
   d6b5c:	000dd1a8 	.word	0x000dd1a8

000d6b60 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6b60:	b510      	push	{r4, lr}
   d6b62:	4b03      	ldr	r3, [pc, #12]	; (d6b70 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6b64:	6003      	str	r3, [r0, #0]
   d6b66:	4604      	mov	r4, r0
   d6b68:	f7ff ffee 	bl	d6b48 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	bd10      	pop	{r4, pc}
   d6b70:	000dd0c4 	.word	0x000dd0c4

000d6b74 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6b74:	b510      	push	{r4, lr}
   d6b76:	4604      	mov	r4, r0

}
   d6b78:	f7ff fff2 	bl	d6b60 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	2138      	movs	r1, #56	; 0x38
   d6b80:	f003 fb13 	bl	da1aa <_ZdlPvj>
   d6b84:	4620      	mov	r0, r4
   d6b86:	bd10      	pop	{r4, pc}

000d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
   d6b88:	6880      	ldr	r0, [r0, #8]
   d6b8a:	f001 b899 	b.w	d7cc0 <os_mutex_lock>

000d6b8e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
   d6b8e:	6880      	ldr	r0, [r0, #8]
   d6b90:	f001 b89e 	b.w	d7cd0 <os_mutex_unlock>

000d6b94 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6b94:	b510      	push	{r4, lr}
   d6b96:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6b98:	6800      	ldr	r0, [r0, #0]
   d6b9a:	f7ff fff8 	bl	d6b8e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6b9e:	4620      	mov	r0, r4
   d6ba0:	bd10      	pop	{r4, pc}

000d6ba2 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6ba2:	b513      	push	{r0, r1, r4, lr}
   d6ba4:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6ba6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6ba8:	f7ff ffee 	bl	d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6bae:	88dc      	ldrh	r4, [r3, #6]
   d6bb0:	b2a4      	uxth	r4, r4
   d6bb2:	b10c      	cbz	r4, d6bb8 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6bb4:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6bb8:	a801      	add	r0, sp, #4
   d6bba:	f7ff ffeb 	bl	d6b94 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
   d6bbe:	4620      	mov	r0, r4
   d6bc0:	b002      	add	sp, #8
   d6bc2:	bd10      	pop	{r4, pc}

000d6bc4 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6bc4:	b513      	push	{r0, r1, r4, lr}
   d6bc6:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6bc8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6bca:	f7ff ffdd 	bl	d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6bce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6bd2:	b91b      	cbnz	r3, d6bdc <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6bd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
   d6bd6:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
   d6bd8:	80d3      	strh	r3, [r2, #6]
   d6bda:	e000      	b.n	d6bde <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
   d6bdc:	2400      	movs	r4, #0

	StMutexLock lock(this);
   d6bde:	a801      	add	r0, sp, #4
   d6be0:	f7ff ffd8 	bl	d6b94 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
   d6be4:	4620      	mov	r0, r4
   d6be6:	b002      	add	sp, #8
   d6be8:	bd10      	pop	{r4, pc}

000d6bea <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6bec:	ac02      	add	r4, sp, #8
   d6bee:	4605      	mov	r5, r0
   d6bf0:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
   d6bf4:	f7ff ffc8 	bl	d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6bf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6bfa:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6bfc:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6bfe:	f7ff ffc9 	bl	d6b94 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6c02:	4628      	mov	r0, r5
   d6c04:	b003      	add	sp, #12
   d6c06:	bd30      	pop	{r4, r5, pc}

000d6c08 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c0c:	469a      	mov	sl, r3
   d6c0e:	b086      	sub	sp, #24

	if (!haveSetup) {
   d6c10:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6c14:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d6c18:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6c1c:	4604      	mov	r4, r0
   d6c1e:	4688      	mov	r8, r1
   d6c20:	4616      	mov	r6, r2

	if (!haveSetup) {
   d6c22:	b913      	cbnz	r3, d6c2a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6c24:	6803      	ldr	r3, [r0, #0]
   d6c26:	689b      	ldr	r3, [r3, #8]
   d6c28:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
   d6c2a:	4b31      	ldr	r3, [pc, #196]	; (d6cf0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6c2c:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
   d6c2e:	2e00      	cmp	r6, #0
   d6c30:	bf08      	it	eq
   d6c32:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6c34:	f005 fafa 	bl	dc22c <strlen>
   d6c38:	4605      	mov	r5, r0
   d6c3a:	4630      	mov	r0, r6
   d6c3c:	f005 faf6 	bl	dc22c <strlen>
   d6c40:	4428      	add	r0, r5
   d6c42:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6c46:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6c48:	bf1c      	itt	ne
   d6c4a:	f025 0503 	bicne.w	r5, r5, #3
   d6c4e:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6c50:	4633      	mov	r3, r6
   d6c52:	9503      	str	r5, [sp, #12]
   d6c54:	9702      	str	r7, [sp, #8]
   d6c56:	f8cd 9004 	str.w	r9, [sp, #4]
   d6c5a:	f8cd a000 	str.w	sl, [sp]
   d6c5e:	4642      	mov	r2, r8
   d6c60:	4924      	ldr	r1, [pc, #144]	; (d6cf4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6c62:	4825      	ldr	r0, [pc, #148]	; (d6cf8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6c64:	f7fd fb23 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6c68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6c6a:	3b08      	subs	r3, #8
   d6c6c:	429d      	cmp	r5, r3
   d6c6e:	d90f      	bls.n	d6c90 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
   d6c70:	2400      	movs	r4, #0
   d6c72:	e038      	b.n	d6ce6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
   d6c74:	88cb      	ldrh	r3, [r1, #6]
   d6c76:	2b01      	cmp	r3, #1
   d6c78:	d031      	beq.n	d6cde <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
   d6c7a:	a805      	add	r0, sp, #20
   d6c7c:	f7ff ff8a 	bl	d6b94 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
   d6c80:	6823      	ldr	r3, [r4, #0]
   d6c82:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6c86:	699b      	ldr	r3, [r3, #24]
   d6c88:	4620      	mov	r0, r4
   d6c8a:	4798      	blx	r3
   d6c8c:	2800      	cmp	r0, #0
   d6c8e:	d0ef      	beq.n	d6c70 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
   d6c90:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6c92:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6c94:	f7ff ff78 	bl	d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6c98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
   d6c9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6c9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d6c9e:	440b      	add	r3, r1
   d6ca0:	1a9b      	subs	r3, r3, r2
   d6ca2:	429d      	cmp	r5, r3
   d6ca4:	d8e6      	bhi.n	d6c74 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
   d6ca6:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
   d6caa:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
   d6cae:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
   d6cb0:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6cb2:	3708      	adds	r7, #8

				strcpy(cp, eventName);
   d6cb4:	4641      	mov	r1, r8
   d6cb6:	4638      	mov	r0, r7
   d6cb8:	f004 fd80 	bl	db7bc <strcpy>
				cp += strlen(cp) + 1;
   d6cbc:	4638      	mov	r0, r7
   d6cbe:	f005 fab5 	bl	dc22c <strlen>

				strcpy(cp, data);
   d6cc2:	3001      	adds	r0, #1
   d6cc4:	4631      	mov	r1, r6
   d6cc6:	4438      	add	r0, r7
   d6cc8:	f004 fd78 	bl	db7bc <strcpy>

				nextFree += size;
   d6ccc:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6cce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
   d6cd0:	4428      	add	r0, r5
   d6cd2:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
   d6cd4:	88d3      	ldrh	r3, [r2, #6]
   d6cd6:	3301      	adds	r3, #1
   d6cd8:	80d3      	strh	r3, [r2, #6]
				return true;
   d6cda:	2401      	movs	r4, #1
   d6cdc:	e000      	b.n	d6ce0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
   d6cde:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
   d6ce0:	a805      	add	r0, sp, #20
   d6ce2:	f7ff ff57 	bl	d6b94 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
   d6ce6:	4620      	mov	r0, r4
   d6ce8:	b006      	add	sp, #24
   d6cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cee:	bf00      	nop
   d6cf0:	000dd5ca 	.word	0x000dd5ca
   d6cf4:	000dd0f6 	.word	0x000dd0f6
   d6cf8:	2003e074 	.word	0x2003e074

000d6cfc <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4604      	mov	r4, r0
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d00:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d04:	69a3      	ldr	r3, [r4, #24]
   d6d06:	b90b      	cbnz	r3, d6d0c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6d08:	f003 fa6b 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d0c:	69e3      	ldr	r3, [r4, #28]
   d6d0e:	4621      	mov	r1, r4
   d6d10:	4628      	mov	r0, r5
   d6d12:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
   d6d14:	f000 ffac 	bl	d7c70 <os_thread_yield>
   d6d18:	e7f4      	b.n	d6d04 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6d1a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6d1a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6d1c:	f7ff ffee 	bl	d6cfc <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6d20 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6d20:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
   d6d22:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6d26:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6d28:	4620      	mov	r0, r4
   d6d2a:	f005 fa7f 	bl	dc22c <strlen>
   d6d2e:	3001      	adds	r0, #1
   d6d30:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6d32:	4620      	mov	r0, r4
   d6d34:	f005 fa7a 	bl	dc22c <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6d38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6d3a:	3001      	adds	r0, #1
   d6d3c:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6d3e:	1ac3      	subs	r3, r0, r3
   d6d40:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6d44:	bf1c      	itt	ne
   d6d46:	f1c3 0304 	rsbne	r3, r3, #4
   d6d4a:	18c0      	addne	r0, r0, r3
	}


	return start;
}
   d6d4c:	bd38      	pop	{r3, r4, r5, pc}

000d6d4e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6d4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6d52:	4605      	mov	r5, r0
   d6d54:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6d56:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6d58:	f7ff ff16 	bl	d6b88 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6d5c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6d5e:	f106 0708 	add.w	r7, r6, #8
   d6d62:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
   d6d64:	f1b8 0f00 	cmp.w	r8, #0
   d6d68:	d007      	beq.n	d6d7a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
   d6d6a:	2c01      	cmp	r4, #1
   d6d6c:	d91c      	bls.n	d6da8 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
   d6d6e:	4639      	mov	r1, r7
   d6d70:	4628      	mov	r0, r5
   d6d72:	f7ff ffd5 	bl	d6d20 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6d76:	4607      	mov	r7, r0
   d6d78:	e000      	b.n	d6d7c <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
   d6d7a:	b1b4      	cbz	r4, d6daa <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6d7c:	4639      	mov	r1, r7
   d6d7e:	4628      	mov	r0, r5
   d6d80:	f7ff ffce 	bl	d6d20 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
   d6d84:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   d6d86:	4432      	add	r2, r6
	if (after > 0) {
   d6d88:	1a12      	subs	r2, r2, r0
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6d8a:	4601      	mov	r1, r0
	size_t len = next - start;
   d6d8c:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
   d6d90:	d002      	beq.n	d6d98 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
   d6d92:	4638      	mov	r0, r7
   d6d94:	f004 fa6f 	bl	db276 <memmove>
	}

	nextFree -= len;
   d6d98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d6d9a:	1b1b      	subs	r3, r3, r4
   d6d9c:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
   d6d9e:	88f3      	ldrh	r3, [r6, #6]
   d6da0:	3b01      	subs	r3, #1
   d6da2:	80f3      	strh	r3, [r6, #6]


	return true;
   d6da4:	2401      	movs	r4, #1
   d6da6:	e000      	b.n	d6daa <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
   d6da8:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6daa:	a801      	add	r0, sp, #4
   d6dac:	f7ff fef2 	bl	d6b94 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
   d6db0:	4620      	mov	r0, r4
   d6db2:	b002      	add	sp, #8
   d6db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6db8 <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6dbc:	4604      	mov	r4, r0
   d6dbe:	460d      	mov	r5, r1
   d6dc0:	4690      	mov	r8, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6dc2:	2600      	movs	r6, #0
   d6dc4:	f7ff fea0 	bl	d6b08 <_ZN21PublishQueueAsyncBaseC1Ev>

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6dc8:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6dca:	4b15      	ldr	r3, [pc, #84]	; (d6e20 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
   d6dcc:	6023      	str	r3, [r4, #0]
   d6dce:	62e5      	str	r5, [r4, #44]	; 0x2c
   d6dd0:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
   d6dd4:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6dd6:	4b13      	ldr	r3, [pc, #76]	; (d6e24 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
   d6dd8:	f857 2b08 	ldr.w	r2, [r7], #8
   d6ddc:	429a      	cmp	r2, r3
   d6dde:	4699      	mov	r9, r3
   d6de0:	d114      	bne.n	d6e0c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6de2:	88ab      	ldrh	r3, [r5, #4]
   d6de4:	b29b      	uxth	r3, r3
   d6de6:	4598      	cmp	r8, r3
   d6de8:	d110      	bne.n	d6e0c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6dea:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6dee:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6df0:	88eb      	ldrh	r3, [r5, #6]
   d6df2:	b2b2      	uxth	r2, r6
   d6df4:	b29b      	uxth	r3, r3
   d6df6:	429a      	cmp	r2, r3
   d6df8:	d20f      	bcs.n	d6e1a <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
   d6dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	f7ff ff8f 	bl	d6d20 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6e02:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
   d6e04:	6360      	str	r0, [r4, #52]	; 0x34
   d6e06:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
   d6e0a:	d2f1      	bcs.n	d6df0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
   d6e0c:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6e0e:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
   d6e12:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
   d6e16:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6e18:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e20:	000dd0c4 	.word	0x000dd0c4
   d6e24:	d19cab61 	.word	0xd19cab61

000d6e28 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6e28:	b510      	push	{r4, lr}
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6e2a:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6e2e:	b086      	sub	sp, #24
   d6e30:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6e32:	9202      	str	r2, [sp, #8]
   d6e34:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e36:	ab02      	add	r3, sp, #8
   d6e38:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6e3c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e40:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6e44:	68a2      	ldr	r2, [r4, #8]
   d6e46:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6e4a:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e4e:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e50:	4a06      	ldr	r2, [pc, #24]	; (d6e6c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
   d6e52:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e54:	68e2      	ldr	r2, [r4, #12]
   d6e56:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e58:	4a05      	ldr	r2, [pc, #20]	; (d6e70 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
   d6e5a:	60e2      	str	r2, [r4, #12]
   d6e5c:	e884 0003 	stmia.w	r4, {r0, r1}
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e60:	4618      	mov	r0, r3
   d6e62:	f7ff fdf8 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d6e66:	4620      	mov	r0, r4
   d6e68:	b006      	add	sp, #24
   d6e6a:	bd10      	pop	{r4, pc}
   d6e6c:	000d6a3d 	.word	0x000d6a3d
   d6e70:	000d69f9 	.word	0x000d69f9

000d6e74 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
   d6e74:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6e76:	4b05      	ldr	r3, [pc, #20]	; (d6e8c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6e78:	9300      	str	r3, [sp, #0]
   d6e7a:	4669      	mov	r1, sp
   d6e7c:	2300      	movs	r3, #0
   d6e7e:	3010      	adds	r0, #16
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	f7ff ffd1 	bl	d6e28 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
   d6e86:	b003      	add	sp, #12
   d6e88:	f85d fb04 	ldr.w	pc, [sp], #4
   d6e8c:	000d6ebd 	.word	0x000d6ebd

000d6e90 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   d6e90:	b513      	push	{r0, r1, r4, lr}
   d6e92:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6e94:	f000 ff6c 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6e9a:	1ac0      	subs	r0, r0, r3
   d6e9c:	68e3      	ldr	r3, [r4, #12]
   d6e9e:	4298      	cmp	r0, r3
   d6ea0:	d308      	bcc.n	d6eb4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6ea2:	4b05      	ldr	r3, [pc, #20]	; (d6eb8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6ea4:	9300      	str	r3, [sp, #0]
   d6ea6:	4669      	mov	r1, sp
   d6ea8:	2300      	movs	r3, #0
   d6eaa:	f104 0010 	add.w	r0, r4, #16
   d6eae:	9301      	str	r3, [sp, #4]
   d6eb0:	f7ff ffba 	bl	d6e28 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
   d6eb4:	b002      	add	sp, #8
   d6eb6:	bd10      	pop	{r4, pc}
   d6eb8:	000d6ebd 	.word	0x000d6ebd

000d6ebc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6ec0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6ec4:	b086      	sub	sp, #24
   d6ec6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6ec8:	2b00      	cmp	r3, #0
   d6eca:	d173      	bne.n	d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6ecc:	f001 f9b0 	bl	d8230 <spark_cloud_flag_connected>
   d6ed0:	2800      	cmp	r0, #0
   d6ed2:	d06f      	beq.n	d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
   d6ed4:	f000 ff4c 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   d6ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6eda:	1ac0      	subs	r0, r0, r3
   d6edc:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6ee0:	4298      	cmp	r0, r3
   d6ee2:	d967      	bls.n	d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
   d6ee4:	6823      	ldr	r3, [r4, #0]
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	695b      	ldr	r3, [r3, #20]
   d6eea:	4798      	blx	r3
		if (data) {
   d6eec:	4605      	mov	r5, r0
   d6eee:	2800      	cmp	r0, #0
   d6ef0:	d060      	beq.n	d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6ef2:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
   d6ef6:	2301      	movs	r3, #1
   d6ef8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6efc:	4630      	mov	r0, r6
   d6efe:	f005 f995 	bl	dc22c <strlen>

			PublishFlags flags(PublishFlag(data->flags));
   d6f02:	f895 8004 	ldrb.w	r8, [r5, #4]

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6f06:	f8cd 8004 	str.w	r8, [sp, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6f0a:	3001      	adds	r0, #1
   d6f0c:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6f0e:	682b      	ldr	r3, [r5, #0]
   d6f10:	9300      	str	r3, [sp, #0]
   d6f12:	4632      	mov	r2, r6
   d6f14:	463b      	mov	r3, r7
   d6f16:	4929      	ldr	r1, [pc, #164]	; (d6fbc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6f18:	4829      	ldr	r0, [pc, #164]	; (d6fc0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6f1a:	f7fd f9c8 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6f1e:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6f20:	f88d 8000 	strb.w	r8, [sp]
   d6f24:	463a      	mov	r2, r7
   d6f26:	4631      	mov	r1, r6
   d6f28:	a802      	add	r0, sp, #8
   d6f2a:	f001 fd5b 	bl	d89e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6f2e:	9d02      	ldr	r5, [sp, #8]
   d6f30:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
   d6f32:	b91b      	cbnz	r3, d6f3c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6f34:	2001      	movs	r0, #1
   d6f36:	f001 fa5b 	bl	d83f0 <delay>
   d6f3a:	e7f8      	b.n	d6f2e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6f3c:	2000      	movs	r0, #0
   d6f3e:	f001 f911 	bl	d8164 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d6f42:	b120      	cbz	r0, d6f4e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6f44:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6f46:	b913      	cbnz	r3, d6f4e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d6f48:	f001 f95a 	bl	d8200 <spark_process>
   d6f4c:	e7fa      	b.n	d6f44 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6f4e:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
   d6f50:	2b01      	cmp	r3, #1
   d6f52:	d109      	bne.n	d6f68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
   d6f54:	491b      	ldr	r1, [pc, #108]	; (d6fc4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6f56:	481a      	ldr	r0, [pc, #104]	; (d6fc0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6f58:	f7fd f9a9 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6f5c:	6823      	ldr	r3, [r4, #0]
   d6f5e:	2100      	movs	r1, #0
   d6f60:	699b      	ldr	r3, [r3, #24]
   d6f62:	4620      	mov	r0, r4
   d6f64:	4798      	blx	r3
   d6f66:	e00d      	b.n	d6f84 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6f68:	4917      	ldr	r1, [pc, #92]	; (d6fc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6f6a:	4815      	ldr	r0, [pc, #84]	; (d6fc0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6f6c:	68e2      	ldr	r2, [r4, #12]
   d6f6e:	f7fd f99e 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6f72:	4b16      	ldr	r3, [pc, #88]	; (d6fcc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6f74:	9304      	str	r3, [sp, #16]
   d6f76:	a904      	add	r1, sp, #16
   d6f78:	2300      	movs	r3, #0
   d6f7a:	f104 0010 	add.w	r0, r4, #16
   d6f7e:	9305      	str	r3, [sp, #20]
   d6f80:	f7ff ff52 	bl	d6e28 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
   d6f84:	2300      	movs	r3, #0
   d6f86:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6f8a:	f000 fef1 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6f8e:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6f90:	9c03      	ldr	r4, [sp, #12]
   d6f92:	b17c      	cbz	r4, d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6f94:	6863      	ldr	r3, [r4, #4]
   d6f96:	3b01      	subs	r3, #1
   d6f98:	6063      	str	r3, [r4, #4]
   d6f9a:	b95b      	cbnz	r3, d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
   d6f9c:	6823      	ldr	r3, [r4, #0]
   d6f9e:	4620      	mov	r0, r4
   d6fa0:	689b      	ldr	r3, [r3, #8]
   d6fa2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6fa4:	68a3      	ldr	r3, [r4, #8]
   d6fa6:	3b01      	subs	r3, #1
   d6fa8:	60a3      	str	r3, [r4, #8]
   d6faa:	b91b      	cbnz	r3, d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
   d6fac:	6823      	ldr	r3, [r4, #0]
   d6fae:	4620      	mov	r0, r4
   d6fb0:	68db      	ldr	r3, [r3, #12]
   d6fb2:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
   d6fb4:	b006      	add	sp, #24
   d6fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fba:	bf00      	nop
   d6fbc:	000dd137 	.word	0x000dd137
   d6fc0:	2003e074 	.word	0x2003e074
   d6fc4:	000dd158 	.word	0x000dd158
   d6fc8:	000dd16f 	.word	0x000dd16f
   d6fcc:	000d6e91 	.word	0x000d6e91

000d6fd0 <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	f000 ff05 	bl	d7de0 <HAL_Pin_Map>
   d6fd6:	4b02      	ldr	r3, [pc, #8]	; (d6fe0 <_GLOBAL__sub_I_pubqLogger+0x10>)
   d6fd8:	4a02      	ldr	r2, [pc, #8]	; (d6fe4 <_GLOBAL__sub_I_pubqLogger+0x14>)
   d6fda:	601a      	str	r2, [r3, #0]
   d6fdc:	bd08      	pop	{r3, pc}
   d6fde:	bf00      	nop
   d6fe0:	2003e074 	.word	0x2003e074
   d6fe4:	000dd196 	.word	0x000dd196

000d6fe8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d6fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6fea:	4602      	mov	r2, r0
   d6fec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d6fee:	7913      	ldrb	r3, [r2, #4]
   d6ff0:	6895      	ldr	r5, [r2, #8]
   d6ff2:	b133      	cbz	r3, d7002 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d6ff4:	b93d      	cbnz	r5, d7006 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d6ff6:	490c      	ldr	r1, [pc, #48]	; (d7028 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d6ff8:	b004      	add	sp, #16
   d6ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d6ffe:	f002 b973 	b.w	d92e8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d7002:	4b0a      	ldr	r3, [pc, #40]	; (d702c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d7004:	e000      	b.n	d7008 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d7006:	4b0a      	ldr	r3, [pc, #40]	; (d7030 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d7008:	7b16      	ldrb	r6, [r2, #12]
   d700a:	4c0a      	ldr	r4, [pc, #40]	; (d7034 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d700c:	490a      	ldr	r1, [pc, #40]	; (d7038 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d700e:	7b52      	ldrb	r2, [r2, #13]
   d7010:	9202      	str	r2, [sp, #8]
   d7012:	2e01      	cmp	r6, #1
   d7014:	bf08      	it	eq
   d7016:	4621      	moveq	r1, r4
   d7018:	9101      	str	r1, [sp, #4]
   d701a:	9500      	str	r5, [sp, #0]
   d701c:	4a07      	ldr	r2, [pc, #28]	; (d703c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d701e:	2100      	movs	r1, #0
   d7020:	f002 fa69 	bl	d94f6 <_ZN5Print11printf_implEbPKcz>
  }
   d7024:	b004      	add	sp, #16
   d7026:	bd70      	pop	{r4, r5, r6, pc}
   d7028:	000dd1e5 	.word	0x000dd1e5
   d702c:	000dd5ca 	.word	0x000dd5ca
   d7030:	000dd1d4 	.word	0x000dd1d4
   d7034:	000dd1dd 	.word	0x000dd1dd
   d7038:	000dd1e1 	.word	0x000dd1e1
   d703c:	000dd1fb 	.word	0x000dd1fb

000d7040 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d7040:	b510      	push	{r4, lr}
   d7042:	4b05      	ldr	r3, [pc, #20]	; (d7058 <_ZN12AssetTrackerD1Ev+0x18>)
   d7044:	4604      	mov	r4, r0
   d7046:	f840 3b20 	str.w	r3, [r0], #32
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d704a:	f7ff fd04 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
   d704e:	4620      	mov	r0, r4
   d7050:	f000 f9c2 	bl	d73d8 <_ZN13LegacyAdapterD1Ev>

}
   d7054:	4620      	mov	r0, r4
   d7056:	bd10      	pop	{r4, pc}
   d7058:	000dd2b8 	.word	0x000dd2b8

000d705c <_ZN12AssetTrackerD0Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d705c:	b510      	push	{r4, lr}
   d705e:	4604      	mov	r4, r0

}
   d7060:	f7ff ffee 	bl	d7040 <_ZN12AssetTrackerD1Ev>
   d7064:	4620      	mov	r0, r4
   d7066:	2130      	movs	r1, #48	; 0x30
   d7068:	f003 f89f 	bl	da1aa <_ZdlPvj>
   d706c:	4620      	mov	r0, r4
   d706e:	bd10      	pop	{r4, pc}

000d7070 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d7070:	6803      	ldr	r3, [r0, #0]
   d7072:	b2c9      	uxtb	r1, r1
   d7074:	689b      	ldr	r3, [r3, #8]
   d7076:	4718      	bx	r3

000d7078 <_ZN12AssetTrackerC1Ev>:
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d7078:	b538      	push	{r3, r4, r5, lr}
   d707a:	490b      	ldr	r1, [pc, #44]	; (d70a8 <_ZN12AssetTrackerC1Ev+0x30>)
   d707c:	4604      	mov	r4, r0
   d707e:	2500      	movs	r5, #0
   d7080:	f000 f9b2 	bl	d73e8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d7084:	4b09      	ldr	r3, [pc, #36]	; (d70ac <_ZN12AssetTrackerC1Ev+0x34>)
   d7086:	6023      	str	r3, [r4, #0]
   d7088:	7225      	strb	r5, [r4, #8]

	void threadFunction();
	static void threadFunctionStatic(void *param);

	bool useWire = false;
	TwoWire &wire = Wire;
   d708a:	f003 f863 	bl	da154 <_Z19__fetch_global_Wirev>
   d708e:	2342      	movs	r3, #66	; 0x42
   d7090:	7423      	strb	r3, [r4, #16]
   d7092:	60e0      	str	r0, [r4, #12]
	uint8_t wireAddr = 0x42;
	USARTSerial &serialPort = Serial1;
   d7094:	f002 fe82 	bl	d9d9c <_Z22__fetch_global_Serial1v>
	instance = this;
   d7098:	4b05      	ldr	r3, [pc, #20]	; (d70b0 <_ZN12AssetTrackerC1Ev+0x38>)
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d709a:	6160      	str	r0, [r4, #20]
   d709c:	61a5      	str	r5, [r4, #24]
   d709e:	61e5      	str	r5, [r4, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d70a0:	62a5      	str	r5, [r4, #40]	; 0x28
	instance = this;
   d70a2:	601c      	str	r4, [r3, #0]
}
   d70a4:	4620      	mov	r0, r4
   d70a6:	bd38      	pop	{r3, r4, r5, pc}
   d70a8:	2003e0b0 	.word	0x2003e0b0
   d70ac:	000dd2b8 	.word	0x000dd2b8
   d70b0:	2003e084 	.word	0x2003e084

000d70b4 <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d70b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d70b6:	6985      	ldr	r5, [r0, #24]
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d70b8:	4606      	mov	r6, r0
	if (thread == NULL) {
   d70ba:	2d00      	cmp	r5, #0
   d70bc:	d13b      	bne.n	d7136 <_ZN12AssetTracker17startThreadedModeEv+0x82>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d70be:	2004      	movs	r0, #4
   d70c0:	f7fc ffeb 	bl	d409a <_Znwj>
   d70c4:	4604      	mov	r4, r0
   d70c6:	2800      	cmp	r0, #0
   d70c8:	d034      	beq.n	d7134 <_ZN12AssetTracker17startThreadedModeEv+0x80>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d70ca:	491c      	ldr	r1, [pc, #112]	; (d713c <_ZN12AssetTracker17startThreadedModeEv+0x88>)
   d70cc:	2014      	movs	r0, #20
   d70ce:	f003 f877 	bl	da1c0 <_ZnwjRKSt9nothrow_t>
   d70d2:	b128      	cbz	r0, d70e0 <_ZN12AssetTracker17startThreadedModeEv+0x2c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d70d4:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d70d6:	6005      	str	r5, [r0, #0]
   d70d8:	6045      	str	r5, [r0, #4]
   d70da:	6085      	str	r5, [r0, #8]
   d70dc:	60c5      	str	r5, [r0, #12]
   d70de:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d70e0:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d70e2:	b1b0      	cbz	r0, d7112 <_ZN12AssetTracker17startThreadedModeEv+0x5e>
            goto error;
        }
        d_->func = function;
   d70e4:	4b16      	ldr	r3, [pc, #88]	; (d7140 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d70e6:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d70e8:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d70ea:	4916      	ldr	r1, [pc, #88]	; (d7144 <_ZN12AssetTracker17startThreadedModeEv+0x90>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d70ec:	60de      	str	r6, [r3, #12]
   d70ee:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d70f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d70f4:	e88d 0009 	stmia.w	sp, {r0, r3}
   d70f8:	2202      	movs	r2, #2
   d70fa:	4b13      	ldr	r3, [pc, #76]	; (d7148 <_ZN12AssetTracker17startThreadedModeEv+0x94>)
   d70fc:	3004      	adds	r0, #4
   d70fe:	f000 fda7 	bl	d7c50 <os_thread_create>
   d7102:	b930      	cbnz	r0, d7112 <_ZN12AssetTracker17startThreadedModeEv+0x5e>
   d7104:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d7106:	7c1b      	ldrb	r3, [r3, #16]
   d7108:	b9a3      	cbnz	r3, d7134 <_ZN12AssetTracker17startThreadedModeEv+0x80>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d710a:	2001      	movs	r0, #1
   d710c:	f000 fe20 	bl	d7d50 <HAL_Delay_Milliseconds>
   d7110:	e7f8      	b.n	d7104 <_ZN12AssetTracker17startThreadedModeEv+0x50>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7112:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7114:	2300      	movs	r3, #0
   d7116:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7118:	b165      	cbz	r5, d7134 <_ZN12AssetTracker17startThreadedModeEv+0x80>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d711a:	682f      	ldr	r7, [r5, #0]
   d711c:	b137      	cbz	r7, d712c <_ZN12AssetTracker17startThreadedModeEv+0x78>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d711e:	4638      	mov	r0, r7
   d7120:	f7ff fc99 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7124:	2110      	movs	r1, #16
   d7126:	4638      	mov	r0, r7
   d7128:	f003 f83f 	bl	da1aa <_ZdlPvj>
   d712c:	2114      	movs	r1, #20
   d712e:	4628      	mov	r0, r5
   d7130:	f003 f83b 	bl	da1aa <_ZdlPvj>
   d7134:	61b4      	str	r4, [r6, #24]
	}
}
   d7136:	b003      	add	sp, #12
   d7138:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d713a:	bf00      	nop
   d713c:	000dd97c 	.word	0x000dd97c
   d7140:	000d7345 	.word	0x000d7345
   d7144:	000dd219 	.word	0x000dd219
   d7148:	000d6a0f 	.word	0x000d6a0f

000d714c <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d714c:	b510      	push	{r4, lr}
	useWire = true;
   d714e:	2301      	movs	r3, #1
   d7150:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d7152:	68c3      	ldr	r3, [r0, #12]
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d7154:	4604      	mov	r4, r0
   d7156:	6848      	ldr	r0, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d7158:	6058      	str	r0, [r3, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d715a:	6888      	ldr	r0, [r1, #8]
   d715c:	6098      	str	r0, [r3, #8]
   d715e:	68c8      	ldr	r0, [r1, #12]
   d7160:	60d8      	str	r0, [r3, #12]
  size_t size_;
  bool stop_;
  system_tick_t timeout_;
};

class TwoWire : public Stream
   d7162:	7c08      	ldrb	r0, [r1, #16]
   d7164:	7418      	strb	r0, [r3, #16]
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;

	wire.begin();
   d7166:	4608      	mov	r0, r1
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;
   d7168:	7422      	strb	r2, [r4, #16]

	wire.begin();
   d716a:	f001 fe39 	bl	d8de0 <_ZN7TwoWire5beginEv>

	return *this;
}
   d716e:	4620      	mov	r0, r4
   d7170:	bd10      	pop	{r4, pc}
	...

000d7174 <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d7174:	b538      	push	{r3, r4, r5, lr}
   d7176:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d7178:	7c01      	ldrb	r1, [r0, #16]
   d717a:	68c0      	ldr	r0, [r0, #12]
   d717c:	f001 fe64 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d7180:	21fd      	movs	r1, #253	; 0xfd
   d7182:	68e8      	ldr	r0, [r5, #12]
   d7184:	f7ff ff74 	bl	d7070 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d7188:	2100      	movs	r1, #0
   d718a:	68e8      	ldr	r0, [r5, #12]
   d718c:	f001 fe63 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d7190:	b130      	cbz	r0, d71a0 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d7192:	490f      	ldr	r1, [pc, #60]	; (d71d0 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d7194:	4602      	mov	r2, r0
   d7196:	480f      	ldr	r0, [pc, #60]	; (d71d4 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d7198:	f7fd f889 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d719c:	2000      	movs	r0, #0
   d719e:	bd38      	pop	{r3, r4, r5, pc}
	}

	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d71a0:	2202      	movs	r2, #2
   d71a2:	2301      	movs	r3, #1
   d71a4:	7c29      	ldrb	r1, [r5, #16]
   d71a6:	68e8      	ldr	r0, [r5, #12]
   d71a8:	f001 fe3c 	bl	d8e24 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d71ac:	b2c2      	uxtb	r2, r0
   d71ae:	2a02      	cmp	r2, #2
   d71b0:	d001      	beq.n	d71b6 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d71b2:	4909      	ldr	r1, [pc, #36]	; (d71d8 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d71b4:	e7ef      	b.n	d7196 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
		return 0;
	}

	uint16_t available = wire.read() << 8;
   d71b6:	68e8      	ldr	r0, [r5, #12]
   d71b8:	6803      	ldr	r3, [r0, #0]
   d71ba:	695b      	ldr	r3, [r3, #20]
   d71bc:	4798      	blx	r3
   d71be:	4604      	mov	r4, r0
	available |= wire.read();
   d71c0:	68e8      	ldr	r0, [r5, #12]
   d71c2:	6803      	ldr	r3, [r0, #0]
   d71c4:	695b      	ldr	r3, [r3, #20]
   d71c6:	4798      	blx	r3
   d71c8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d71cc:	b280      	uxth	r0, r0

	return available;
}
   d71ce:	bd38      	pop	{r3, r4, r5, pc}
   d71d0:	000dd226 	.word	0x000dd226
   d71d4:	2003e294 	.word	0x2003e294
   d71d8:	000dd24a 	.word	0x000dd24a

000d71dc <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d71dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71e0:	4606      	mov	r6, r0
   d71e2:	4689      	mov	r9, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d71e4:	7c01      	ldrb	r1, [r0, #16]
   d71e6:	68c0      	ldr	r0, [r0, #12]
	available |= wire.read();

	return available;
}

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d71e8:	4615      	mov	r5, r2
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d71ea:	f001 fe2d 	bl	d8e48 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d71ee:	21ff      	movs	r1, #255	; 0xff
   d71f0:	68f0      	ldr	r0, [r6, #12]
   d71f2:	f7ff ff3d 	bl	d7070 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d71f6:	2100      	movs	r1, #0
   d71f8:	68f0      	ldr	r0, [r6, #12]
   d71fa:	f001 fe2c 	bl	d8e56 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d71fe:	4602      	mov	r2, r0
   d7200:	b108      	cbz	r0, d7206 <_ZN12AssetTracker13wireReadBytesEPhj+0x2a>
		Log.info("wireReadBytes I2C error %u", res);
   d7202:	4918      	ldr	r1, [pc, #96]	; (d7264 <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d7204:	e015      	b.n	d7232 <_ZN12AssetTracker13wireReadBytesEPhj+0x56>
   d7206:	4604      	mov	r4, r0
		return -1;
	}

	size_t offset = 0;

	while(offset < len) {
   d7208:	42ac      	cmp	r4, r5
   d720a:	d227      	bcs.n	d725c <_ZN12AssetTracker13wireReadBytesEPhj+0x80>
		size_t reqLen = (len - offset);
   d720c:	1b2f      	subs	r7, r5, r4
   d720e:	2f20      	cmp	r7, #32
   d7210:	bf28      	it	cs
   d7212:	2720      	movcs	r7, #32
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d7214:	eb04 0a07 	add.w	sl, r4, r7
   d7218:	ebca 0205 	rsb	r2, sl, r5
   d721c:	4253      	negs	r3, r2
   d721e:	4153      	adcs	r3, r2
   d7220:	7c31      	ldrb	r1, [r6, #16]
   d7222:	68f0      	ldr	r0, [r6, #12]
   d7224:	463a      	mov	r2, r7
   d7226:	f001 fdfd 	bl	d8e24 <_ZN7TwoWire11requestFromEhjh>
   d722a:	b2c2      	uxtb	r2, r0
		if (res != reqLen) {
   d722c:	4297      	cmp	r7, r2
   d722e:	d007      	beq.n	d7240 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d7230:	490d      	ldr	r1, [pc, #52]	; (d7268 <_ZN12AssetTracker13wireReadBytesEPhj+0x8c>)
   d7232:	480e      	ldr	r0, [pc, #56]	; (d726c <_ZN12AssetTracker13wireReadBytesEPhj+0x90>)
   d7234:	f7fd f83b 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d7238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7240:	444c      	add	r4, r9
		size_t reqLen = (len - offset);
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
   d7242:	46a0      	mov	r8, r4
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
			buf[offset + ii] = wire.read();
   d7244:	68f0      	ldr	r0, [r6, #12]
   d7246:	6803      	ldr	r3, [r0, #0]
   d7248:	695b      	ldr	r3, [r3, #20]
   d724a:	4798      	blx	r3
   d724c:	f808 0b01 	strb.w	r0, [r8], #1
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
   d7250:	ebc4 0308 	rsb	r3, r4, r8
   d7254:	429f      	cmp	r7, r3
   d7256:	d8f5      	bhi.n	d7244 <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
   d7258:	4654      	mov	r4, sl
   d725a:	e7d5      	b.n	d7208 <_ZN12AssetTracker13wireReadBytesEPhj+0x2c>
 	}
	return len;
   d725c:	4628      	mov	r0, r5
}
   d725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7262:	bf00      	nop
   d7264:	000dd274 	.word	0x000dd274
   d7268:	000dd28f 	.word	0x000dd28f
   d726c:	2003e294 	.word	0x2003e294

000d7270 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d7270:	4800      	ldr	r0, [pc, #0]	; (d7274 <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d7272:	4770      	bx	lr
   d7274:	2003e0b0 	.word	0x2003e0b0

000d7278 <_ZNKSt8functionIFbcEEclEc>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7278:	b507      	push	{r0, r1, r2, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d727a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d727c:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7280:	b90a      	cbnz	r2, d7286 <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d7282:	f002 ffae 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7286:	68c3      	ldr	r3, [r0, #12]
   d7288:	f10d 0107 	add.w	r1, sp, #7
   d728c:	4798      	blx	r3
    }
   d728e:	b003      	add	sp, #12
   d7290:	f85d fb04 	ldr.w	pc, [sp], #4

000d7294 <_ZN12AssetTracker9updateGPSEv>:
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d7294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!useWire) {
   d7298:	7a03      	ldrb	r3, [r0, #8]
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d729a:	b089      	sub	sp, #36	; 0x24
   d729c:	4604      	mov	r4, r0
	if (!useWire) {
   d729e:	b913      	cbnz	r3, d72a6 <_ZN12AssetTracker9updateGPSEv+0x12>
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
			gps.encode(c);
			if (externalDecoder) {
				externalDecoder(c);
   d72a0:	f100 0620 	add.w	r6, r0, #32
   d72a4:	e03b      	b.n	d731e <_ZN12AssetTracker9updateGPSEv+0x8a>
		}
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
   d72a6:	f8d0 800c 	ldr.w	r8, [r0, #12]
   d72aa:	4640      	mov	r0, r8
   d72ac:	f001 fddb 	bl	d8e66 <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d72b0:	4620      	mov	r0, r4
   d72b2:	f7ff ff5f 	bl	d7174 <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d72b6:	2820      	cmp	r0, #32
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
						if (externalDecoder) {
							externalDecoder(buf[ii]);
   d72b8:	f104 0920 	add.w	r9, r4, #32
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
   d72bc:	4605      	mov	r5, r0
			if (available > 32) {
   d72be:	d801      	bhi.n	d72c4 <_ZN12AssetTracker9updateGPSEv+0x30>
				available = 32;
			}
			if (available > 0) {
   d72c0:	b908      	cbnz	r0, d72c6 <_ZN12AssetTracker9updateGPSEv+0x32>
   d72c2:	e019      	b.n	d72f8 <_ZN12AssetTracker9updateGPSEv+0x64>
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
			if (available > 32) {
				available = 32;
   d72c4:	2520      	movs	r5, #32
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
   d72c6:	462a      	mov	r2, r5
   d72c8:	4669      	mov	r1, sp
   d72ca:	4620      	mov	r0, r4
   d72cc:	f7ff ff86 	bl	d71dc <_ZN12AssetTracker13wireReadBytesEPhj>
   d72d0:	42a8      	cmp	r0, r5
   d72d2:	466f      	mov	r7, sp
   d72d4:	d110      	bne.n	d72f8 <_ZN12AssetTracker9updateGPSEv+0x64>
   d72d6:	466e      	mov	r6, sp
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
   d72d8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d72dc:	4814      	ldr	r0, [pc, #80]	; (d7330 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d72de:	f000 fb91 	bl	d7a04 <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d72e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d72e4:	b123      	cbz	r3, d72f0 <_ZN12AssetTracker9updateGPSEv+0x5c>
							externalDecoder(buf[ii]);
   d72e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d72ea:	4648      	mov	r0, r9
   d72ec:	f7ff ffc4 	bl	d7278 <_ZNKSt8functionIFbcEEclEc>
			if (available > 32) {
				available = 32;
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
   d72f0:	1bf3      	subs	r3, r6, r7
   d72f2:	b29b      	uxth	r3, r3
   d72f4:	42ab      	cmp	r3, r5
   d72f6:	d3ef      	bcc.n	d72d8 <_ZN12AssetTracker9updateGPSEv+0x44>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d72f8:	4640      	mov	r0, r8
   d72fa:	f001 fdbd 	bl	d8e78 <_ZN7TwoWire6unlockEv>
   d72fe:	e014      	b.n	d732a <_ZN12AssetTracker9updateGPSEv+0x96>
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
   d7300:	6960      	ldr	r0, [r4, #20]
   d7302:	6803      	ldr	r3, [r0, #0]
   d7304:	695b      	ldr	r3, [r3, #20]
   d7306:	4798      	blx	r3
   d7308:	b2c5      	uxtb	r5, r0
			gps.encode(c);
   d730a:	4629      	mov	r1, r5
   d730c:	4808      	ldr	r0, [pc, #32]	; (d7330 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d730e:	f000 fb79 	bl	d7a04 <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d7312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7314:	b11b      	cbz	r3, d731e <_ZN12AssetTracker9updateGPSEv+0x8a>
				externalDecoder(c);
   d7316:	4629      	mov	r1, r5
   d7318:	4630      	mov	r0, r6
   d731a:	f7ff ffad 	bl	d7278 <_ZNKSt8functionIFbcEEclEc>
	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
   d731e:	6960      	ldr	r0, [r4, #20]
   d7320:	6803      	ldr	r3, [r0, #0]
   d7322:	691b      	ldr	r3, [r3, #16]
   d7324:	4798      	blx	r3
   d7326:	2800      	cmp	r0, #0
   d7328:	dcea      	bgt.n	d7300 <_ZN12AssetTracker9updateGPSEv+0x6c>
					}
				}
			}
		}
	}
}
   d732a:	b009      	add	sp, #36	; 0x24
   d732c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7330:	2003e0b0 	.word	0x2003e0b0

000d7334 <_ZN12AssetTracker14threadFunctionEv>:
	if (thread == NULL) {
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
	}
}

void AssetTracker::threadFunction() {
   d7334:	b508      	push	{r3, lr}
   d7336:	4604      	mov	r4, r0
	while(true) {
		updateGPS();
   d7338:	4620      	mov	r0, r4
   d733a:	f7ff ffab 	bl	d7294 <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d733e:	f000 fc97 	bl	d7c70 <os_thread_yield>
   d7342:	e7f9      	b.n	d7338 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d7344 <_ZN12AssetTracker20threadFunctionStaticEPv>:
	}
}

// [static]
void AssetTracker::threadFunctionStatic(void *param) {
   d7344:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d7346:	f7ff fff5 	bl	d7334 <_ZN12AssetTracker14threadFunctionEv>
	...

000d734c <_GLOBAL__sub_I_emptyResponse>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d734c:	b570      	push	{r4, r5, r6, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d734e:	4c19      	ldr	r4, [pc, #100]	; (d73b4 <_GLOBAL__sub_I_emptyResponse+0x68>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7350:	4e19      	ldr	r6, [pc, #100]	; (d73b8 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d7352:	f000 fd45 	bl	d7de0 <HAL_Pin_Map>
   d7356:	2108      	movs	r1, #8
   d7358:	4620      	mov	r0, r4
   d735a:	f000 fc2f 	bl	d7bbc <_ZN6LIS3DHC1Ei>
   d735e:	6831      	ldr	r1, [r6, #0]
   d7360:	4b16      	ldr	r3, [pc, #88]	; (d73bc <_GLOBAL__sub_I_emptyResponse+0x70>)
   d7362:	6023      	str	r3, [r4, #0]
   d7364:	f011 0501 	ands.w	r5, r1, #1
   d7368:	d10a      	bne.n	d7380 <_GLOBAL__sub_I_emptyResponse+0x34>
   d736a:	4630      	mov	r0, r6
   d736c:	f7fc fea6 	bl	d40bc <__cxa_guard_acquire>
   d7370:	b130      	cbz	r0, d7380 <_GLOBAL__sub_I_emptyResponse+0x34>
   d7372:	4629      	mov	r1, r5
   d7374:	4812      	ldr	r0, [pc, #72]	; (d73c0 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d7376:	f002 f913 	bl	d95a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d737a:	4630      	mov	r0, r6
   d737c:	f7fc fea3 	bl	d40c6 <__cxa_guard_release>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d7380:	4a10      	ldr	r2, [pc, #64]	; (d73c4 <_GLOBAL__sub_I_emptyResponse+0x78>)
   d7382:	61a2      	str	r2, [r4, #24]
   d7384:	4b0e      	ldr	r3, [pc, #56]	; (d73c0 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d7386:	4a10      	ldr	r2, [pc, #64]	; (d73c8 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d7388:	60e3      	str	r3, [r4, #12]
   d738a:	6222      	str	r2, [r4, #32]
   d738c:	2311      	movs	r3, #17
   d738e:	2201      	movs	r2, #1
   d7390:	6123      	str	r3, [r4, #16]
   d7392:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
   d7396:	2300      	movs	r3, #0
 */

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
   d7398:	4a0c      	ldr	r2, [pc, #48]	; (d73cc <_GLOBAL__sub_I_emptyResponse+0x80>)
   d739a:	490d      	ldr	r1, [pc, #52]	; (d73d0 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d739c:	4805      	ldr	r0, [pc, #20]	; (d73b4 <_GLOBAL__sub_I_emptyResponse+0x68>)
   d739e:	7523      	strb	r3, [r4, #20]
   d73a0:	7723      	strb	r3, [r4, #28]
   d73a2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d73a6:	f002 fefb 	bl	da1a0 <__aeabi_atexit>
static TinyGPSPlus gps;
   d73aa:	480a      	ldr	r0, [pc, #40]	; (d73d4 <_GLOBAL__sub_I_emptyResponse+0x88>)
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d73ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
static TinyGPSPlus gps;
   d73b0:	f000 b878 	b.w	d74a4 <_ZN11TinyGPSPlusC1Ev>
   d73b4:	2003e088 	.word	0x2003e088
   d73b8:	2003e078 	.word	0x2003e078
   d73bc:	000dd674 	.word	0x000dd674
   d73c0:	2003e07c 	.word	0x2003e07c
   d73c4:	000dd1d0 	.word	0x000dd1d0
   d73c8:	00989680 	.word	0x00989680
   d73cc:	2003dea8 	.word	0x2003dea8
   d73d0:	000d7afd 	.word	0x000d7afd
   d73d4:	2003e0b0 	.word	0x2003e0b0

000d73d8 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d73d8:	4770      	bx	lr

000d73da <_ZN13LegacyAdapterD0Ev>:

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d73da:	b510      	push	{r4, lr}

}
   d73dc:	2108      	movs	r1, #8

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d73de:	4604      	mov	r4, r0

}
   d73e0:	f002 fee3 	bl	da1aa <_ZdlPvj>
   d73e4:	4620      	mov	r0, r4
   d73e6:	bd10      	pop	{r4, pc}

000d73e8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:

#include "LegacyAdapter.h"


LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d73e8:	4a01      	ldr	r2, [pc, #4]	; (d73f0 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d73ea:	6002      	str	r2, [r0, #0]
   d73ec:	6041      	str	r1, [r0, #4]

}
   d73ee:	4770      	bx	lr
   d73f0:	000dd2c8 	.word	0x000dd2c8

000d73f4 <_GLOBAL__sub_I__ZN13LegacyAdapterC2ER11TinyGPSPlus>:
   d73f4:	f000 bcf4 	b.w	d7de0 <HAL_Pin_Map>

000d73f8 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d73f8:	2200      	movs	r2, #0
   d73fa:	7002      	strb	r2, [r0, #0]
   d73fc:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d73fe:	8082      	strh	r2, [r0, #4]
   d7400:	6082      	str	r2, [r0, #8]
   d7402:	7302      	strb	r2, [r0, #12]
   d7404:	8202      	strh	r2, [r0, #16]
   d7406:	6142      	str	r2, [r0, #20]
   d7408:	7602      	strb	r2, [r0, #24]
   d740a:	8382      	strh	r2, [r0, #28]
   d740c:	6202      	str	r2, [r0, #32]
   d740e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d7412:	8502      	strh	r2, [r0, #40]	; 0x28
   d7414:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7416:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d741a:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d741c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d7420:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d7424:	63c2      	str	r2, [r0, #60]	; 0x3c
   d7426:	6402      	str	r2, [r0, #64]	; 0x40
   d7428:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d742a:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d742e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d7432:	64c2      	str	r2, [r0, #76]	; 0x4c
   d7434:	6502      	str	r2, [r0, #80]	; 0x50
   d7436:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d7438:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d743c:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d7440:	65c2      	str	r2, [r0, #92]	; 0x5c
   d7442:	6602      	str	r2, [r0, #96]	; 0x60
   d7444:	6642      	str	r2, [r0, #100]	; 0x64
   d7446:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d744a:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d744e:	66c2      	str	r2, [r0, #108]	; 0x6c
   d7450:	6702      	str	r2, [r0, #112]	; 0x70
   d7452:	6742      	str	r2, [r0, #116]	; 0x74
   d7454:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d7458:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d745c:	67c2      	str	r2, [r0, #124]	; 0x7c
   d745e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d7462:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d7466:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d746a:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d746e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d7472:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d7476:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d747a:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d747e:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d7482:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d7486:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d748a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d748e:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d7492:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d7496:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d749a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d749e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d74a2:	4770      	bx	lr

000d74a4 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d74a4:	b510      	push	{r4, lr}
   d74a6:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d74a8:	f7ff ffa6 	bl	d73f8 <_ZN11TinyGPSDataC1Ev>
   d74ac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d74b0:	f7ff ffa2 	bl	d73f8 <_ZN11TinyGPSDataC1Ev>
   d74b4:	2300      	movs	r3, #0
   d74b6:	2202      	movs	r2, #2
   d74b8:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d74bc:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d74c0:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d74c4:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d74c8:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d74cc:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d74d0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d74d4:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d74d8:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d74dc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d74e0:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d74e4:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d74e8:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d74f0:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d74f4:	2b05      	cmp	r3, #5
   d74f6:	d802      	bhi.n	d74fe <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d74f8:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d74fc:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d74fe:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d7502:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d7504:	bf94      	ite	ls
   d7506:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d750a:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d750e:	4770      	bx	lr

000d7510 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d7510:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d7512:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d7514:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d7516:	2d2d      	cmp	r5, #45	; 0x2d
   d7518:	bf08      	it	eq
   d751a:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d751c:	4620      	mov	r0, r4
   d751e:	f003 fceb 	bl	daef8 <atol>
   d7522:	2364      	movs	r3, #100	; 0x64
   d7524:	4358      	muls	r0, r3
   d7526:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d7528:	f814 3b01 	ldrb.w	r3, [r4], #1
   d752c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7530:	2909      	cmp	r1, #9
   d7532:	d9f8      	bls.n	d7526 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d7534:	2b2e      	cmp	r3, #46	; 0x2e
   d7536:	d10b      	bne.n	d7550 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d7538:	7853      	ldrb	r3, [r2, #1]
   d753a:	3b30      	subs	r3, #48	; 0x30
   d753c:	2b09      	cmp	r3, #9
   d753e:	d807      	bhi.n	d7550 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d7540:	210a      	movs	r1, #10
   d7542:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d7546:	7893      	ldrb	r3, [r2, #2]
   d7548:	3b30      	subs	r3, #48	; 0x30
   d754a:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d754c:	bf98      	it	ls
   d754e:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d7550:	2d2d      	cmp	r5, #45	; 0x2d
   d7552:	bf08      	it	eq
   d7554:	4240      	negeq	r0, r0
}
   d7556:	bd38      	pop	{r3, r4, r5, pc}

000d7558 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d7558:	b538      	push	{r3, r4, r5, lr}
   d755a:	4604      	mov	r4, r0
   d755c:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d755e:	f003 fccb 	bl	daef8 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d7562:	2364      	movs	r3, #100	; 0x64
   d7564:	fbb0 f2f3 	udiv	r2, r0, r3
   d7568:	fb03 0012 	mls	r0, r3, r2, r0
   d756c:	4b11      	ldr	r3, [pc, #68]	; (d75b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d756e:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d7570:	4343      	muls	r3, r0
   d7572:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d7574:	7802      	ldrb	r2, [r0, #0]
   d7576:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d757a:	2909      	cmp	r1, #9
   d757c:	4604      	mov	r4, r0
   d757e:	f100 0001 	add.w	r0, r0, #1
   d7582:	d9f7      	bls.n	d7574 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d7584:	2a2e      	cmp	r2, #46	; 0x2e
   d7586:	d10b      	bne.n	d75a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d7588:	490a      	ldr	r1, [pc, #40]	; (d75b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d758a:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d758c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d7590:	3a30      	subs	r2, #48	; 0x30
   d7592:	2a09      	cmp	r2, #9
   d7594:	d804      	bhi.n	d75a0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d7596:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d759a:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d759e:	e7f5      	b.n	d758c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d75a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d75a4:	3301      	adds	r3, #1
   d75a6:	2203      	movs	r2, #3
   d75a8:	fbb3 f3f2 	udiv	r3, r3, r2
   d75ac:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d75ae:	2300      	movs	r3, #0
   d75b0:	722b      	strb	r3, [r5, #8]
   d75b2:	bd38      	pop	{r3, r4, r5, pc}
   d75b4:	00989680 	.word	0x00989680

000d75b8 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d75b8:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d75ba:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d75bc:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d75be:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d75c2:	6042      	str	r2, [r0, #4]
   d75c4:	685a      	ldr	r2, [r3, #4]
   d75c6:	6082      	str	r2, [r0, #8]
   d75c8:	7a1b      	ldrb	r3, [r3, #8]
   d75ca:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d75cc:	4603      	mov	r3, r0
   d75ce:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d75d2:	6102      	str	r2, [r0, #16]
   d75d4:	685a      	ldr	r2, [r3, #4]
   d75d6:	6142      	str	r2, [r0, #20]
   d75d8:	7a1b      	ldrb	r3, [r3, #8]
   d75da:	7603      	strb	r3, [r0, #24]
   d75dc:	f000 fbc8 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d75e0:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d75e2:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d75e4:	7063      	strb	r3, [r4, #1]
   d75e6:	7023      	strb	r3, [r4, #0]
   d75e8:	bd10      	pop	{r4, pc}
   d75ea:	0000      	movs	r0, r0
   d75ec:	0000      	movs	r0, r0
	...

000d75f0 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d75f0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d75f2:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d75f4:	4604      	mov	r4, r0
   updated = false;
   d75f6:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d75f8:	6880      	ldr	r0, [r0, #8]
   d75fa:	f003 f87f 	bl	da6fc <__aeabi_ui2d>
   d75fe:	a30e      	add	r3, pc, #56	; (adr r3, d7638 <_ZN15TinyGPSLocation3latEv+0x48>)
   d7600:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7604:	f003 fa1a 	bl	daa3c <__aeabi_ddiv>
   d7608:	4606      	mov	r6, r0
   d760a:	88a0      	ldrh	r0, [r4, #4]
   d760c:	460f      	mov	r7, r1
   d760e:	f003 f885 	bl	da71c <__aeabi_i2d>
   d7612:	460b      	mov	r3, r1
   d7614:	4602      	mov	r2, r0
   d7616:	4639      	mov	r1, r7
   d7618:	4630      	mov	r0, r6
   d761a:	f002 ff33 	bl	da484 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d761e:	7b23      	ldrb	r3, [r4, #12]
   d7620:	b11b      	cbz	r3, d762a <_ZN15TinyGPSLocation3latEv+0x3a>
   d7622:	4602      	mov	r2, r0
   d7624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7628:	e001      	b.n	d762e <_ZN15TinyGPSLocation3latEv+0x3e>
   d762a:	4602      	mov	r2, r0
   d762c:	460b      	mov	r3, r1
}
   d762e:	ec43 2b10 	vmov	d0, r2, r3
   d7632:	bdd0      	pop	{r4, r6, r7, pc}
   d7634:	f3af 8000 	nop.w
   d7638:	00000000 	.word	0x00000000
   d763c:	41cdcd65 	.word	0x41cdcd65

000d7640 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d7640:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d7642:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d7644:	4604      	mov	r4, r0
   updated = false;
   d7646:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d7648:	6940      	ldr	r0, [r0, #20]
   d764a:	f003 f857 	bl	da6fc <__aeabi_ui2d>
   d764e:	a30e      	add	r3, pc, #56	; (adr r3, d7688 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d7650:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7654:	f003 f9f2 	bl	daa3c <__aeabi_ddiv>
   d7658:	4606      	mov	r6, r0
   d765a:	8a20      	ldrh	r0, [r4, #16]
   d765c:	460f      	mov	r7, r1
   d765e:	f003 f85d 	bl	da71c <__aeabi_i2d>
   d7662:	460b      	mov	r3, r1
   d7664:	4602      	mov	r2, r0
   d7666:	4639      	mov	r1, r7
   d7668:	4630      	mov	r0, r6
   d766a:	f002 ff0b 	bl	da484 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d766e:	7e23      	ldrb	r3, [r4, #24]
   d7670:	b11b      	cbz	r3, d767a <_ZN15TinyGPSLocation3lngEv+0x3a>
   d7672:	4602      	mov	r2, r0
   d7674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7678:	e001      	b.n	d767e <_ZN15TinyGPSLocation3lngEv+0x3e>
   d767a:	4602      	mov	r2, r0
   d767c:	460b      	mov	r3, r1
}
   d767e:	ec43 2b10 	vmov	d0, r2, r3
   d7682:	bdd0      	pop	{r4, r6, r7, pc}
   d7684:	f3af 8000 	nop.w
   d7688:	00000000 	.word	0x00000000
   d768c:	41cdcd65 	.word	0x41cdcd65

000d7690 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d7690:	b510      	push	{r4, lr}
   date = newDate;
   d7692:	6883      	ldr	r3, [r0, #8]
   d7694:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d7696:	4604      	mov	r4, r0
   d7698:	f000 fb6a 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d769c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d769e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d76a0:	7063      	strb	r3, [r4, #1]
   d76a2:	7023      	strb	r3, [r4, #0]
   d76a4:	bd10      	pop	{r4, pc}

000d76a6 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d76a6:	b510      	push	{r4, lr}
   time = newTime;
   d76a8:	6883      	ldr	r3, [r0, #8]
   d76aa:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d76ac:	4604      	mov	r4, r0
   d76ae:	f000 fb5f 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d76b2:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d76b4:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d76b6:	7063      	strb	r3, [r4, #1]
   d76b8:	7023      	strb	r3, [r4, #0]
   d76ba:	bd10      	pop	{r4, pc}

000d76bc <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d76bc:	b510      	push	{r4, lr}
   d76be:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d76c0:	4608      	mov	r0, r1
   d76c2:	f7ff ff25 	bl	d7510 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d76c6:	60a0      	str	r0, [r4, #8]
   d76c8:	bd10      	pop	{r4, pc}

000d76ca <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d76ca:	b510      	push	{r4, lr}
   d76cc:	4604      	mov	r4, r0
   newDate = atol(term);
   d76ce:	4608      	mov	r0, r1
   d76d0:	f003 fc12 	bl	daef8 <atol>
   d76d4:	60a0      	str	r0, [r4, #8]
   d76d6:	bd10      	pop	{r4, pc}

000d76d8 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d76d8:	b510      	push	{r4, lr}
   val = newval;
   d76da:	68c3      	ldr	r3, [r0, #12]
   d76dc:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d76de:	4604      	mov	r4, r0
   d76e0:	f000 fb46 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d76e4:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d76e6:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d76e8:	7063      	strb	r3, [r4, #1]
   d76ea:	7023      	strb	r3, [r4, #0]
   d76ec:	bd10      	pop	{r4, pc}

000d76ee <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d76ee:	b510      	push	{r4, lr}
   d76f0:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d76f2:	4608      	mov	r0, r1
   d76f4:	f7ff ff0c 	bl	d7510 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d76f8:	60e0      	str	r0, [r4, #12]
   d76fa:	bd10      	pop	{r4, pc}

000d76fc <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d76fc:	b510      	push	{r4, lr}
   val = newval;
   d76fe:	68c3      	ldr	r3, [r0, #12]
   d7700:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d7702:	4604      	mov	r4, r0
   d7704:	f000 fb34 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d7708:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d770a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d770c:	7063      	strb	r3, [r4, #1]
   d770e:	7023      	strb	r3, [r4, #0]
   d7710:	bd10      	pop	{r4, pc}

000d7712 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d7712:	b510      	push	{r4, lr}
   d7714:	4604      	mov	r4, r0
   newval = atol(term);
   d7716:	4608      	mov	r0, r1
   d7718:	f003 fbee 	bl	daef8 <atol>
   d771c:	60e0      	str	r0, [r4, #12]
   d771e:	bd10      	pop	{r4, pc}

000d7720 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d7720:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d7722:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d7724:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d7726:	3010      	adds	r0, #16
   d7728:	f004 f848 	bl	db7bc <strcpy>
   d772c:	f000 fb20 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d7730:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d7732:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d7734:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d7738:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d773c:	bd10      	pop	{r4, pc}

000d773e <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d773e:	2210      	movs	r2, #16
   d7740:	f004 bd91 	b.w	dc266 <strncpy>

000d7744 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d7744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d7746:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d774a:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d774c:	2d00      	cmp	r5, #0
   d774e:	f000 808b 	beq.w	d7868 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d7752:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d7756:	f7ff fecb 	bl	d74f0 <_ZN11TinyGPSPlus7fromHexEc>
   d775a:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d775e:	4602      	mov	r2, r0
   d7760:	4620      	mov	r0, r4
   d7762:	f7ff fec5 	bl	d74f0 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d7766:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d776a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d776e:	b2c0      	uxtb	r0, r0
   d7770:	4283      	cmp	r3, r0
   d7772:	d172      	bne.n	d785a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d7774:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d7778:	3301      	adds	r3, #1
   d777a:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d777e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d7782:	b123      	cbz	r3, d778e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d7784:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d7788:	3301      	adds	r3, #1
   d778a:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d778e:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d7792:	b1fb      	cbz	r3, d77d4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d7794:	2b01      	cmp	r3, #1
   d7796:	d14d      	bne.n	d7834 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d7798:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d779c:	f7ff ff78 	bl	d7690 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d77a0:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d77a4:	f7ff ff7f 	bl	d76a6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d77a8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d77ac:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d77b0:	b14b      	cbz	r3, d77c6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d77b2:	4630      	mov	r0, r6
   d77b4:	f7ff ff00 	bl	d75b8 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d77b8:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d77bc:	f7ff ff8c 	bl	d76d8 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d77c0:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d77c4:	e027      	b.n	d7816 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d77c6:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d77ca:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d77ce:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d77d2:	e022      	b.n	d781a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d77d4:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d77d8:	f7ff ff65 	bl	d76a6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d77dc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d77e0:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d77e4:	b15b      	cbz	r3, d77fe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d77e6:	4630      	mov	r0, r6
   d77e8:	f7ff fee6 	bl	d75b8 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d77ec:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d77f0:	f7ff ff72 	bl	d76d8 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d77f4:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d77f8:	f7ff ff6e 	bl	d76d8 <_ZN14TinyGPSDecimal6commitEv>
   d77fc:	e005      	b.n	d780a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d77fe:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7802:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d7806:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d780a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d780e:	f7ff ff75 	bl	d76fc <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d7812:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d7816:	f7ff ff5f 	bl	d76d8 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d781a:	2100      	movs	r1, #0
   d781c:	4608      	mov	r0, r1
   d781e:	f000 fa3f 	bl	d7ca0 <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d7822:	4631      	mov	r1, r6
   d7824:	22b8      	movs	r2, #184	; 0xb8
   d7826:	4620      	mov	r0, r4
   d7828:	f003 fd1a 	bl	db260 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d782c:	2100      	movs	r1, #0
   d782e:	2001      	movs	r0, #1
   d7830:	f000 fa36 	bl	d7ca0 <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d7834:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d7838:	2e00      	cmp	r6, #0
   d783a:	f000 80d9 	beq.w	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d783e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d7842:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d7844:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d7846:	f003 ffaf 	bl	db7a8 <strcmp>
   d784a:	2800      	cmp	r0, #0
   d784c:	f040 80d0 	bne.w	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d7850:	4630      	mov	r0, r6
   d7852:	f7ff ff65 	bl	d7720 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d7856:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d7858:	e7ee      	b.n	d7838 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d785a:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d785e:	3301      	adds	r3, #1
   d7860:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d7864:	2500      	movs	r5, #0
   d7866:	e0c3      	b.n	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d7868:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d786c:	bb72      	cbnz	r2, d78cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d786e:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d7872:	4960      	ldr	r1, [pc, #384]	; (d79f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d7874:	4630      	mov	r0, r6
   d7876:	f003 ff97 	bl	db7a8 <strcmp>
   d787a:	b120      	cbz	r0, d7886 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d787c:	495e      	ldr	r1, [pc, #376]	; (d79f8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d787e:	4630      	mov	r0, r6
   d7880:	f003 ff92 	bl	db7a8 <strcmp>
   d7884:	b908      	cbnz	r0, d788a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d7886:	2301      	movs	r3, #1
   d7888:	e00c      	b.n	d78a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d788a:	495c      	ldr	r1, [pc, #368]	; (d79fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d788c:	4630      	mov	r0, r6
   d788e:	f003 ff8b 	bl	db7a8 <strcmp>
   d7892:	b120      	cbz	r0, d789e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d7894:	495a      	ldr	r1, [pc, #360]	; (d7a00 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d7896:	4630      	mov	r0, r6
   d7898:	f003 ff86 	bl	db7a8 <strcmp>
   d789c:	b908      	cbnz	r0, d78a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d789e:	2300      	movs	r3, #0
   d78a0:	e000      	b.n	d78a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d78a2:	2302      	movs	r3, #2
   d78a4:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d78a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d78ac:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d78b0:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d78b4:	2f00      	cmp	r7, #0
   d78b6:	f000 809b 	beq.w	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d78ba:	4631      	mov	r1, r6
   d78bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d78be:	f003 ff73 	bl	db7a8 <strcmp>
   d78c2:	2800      	cmp	r0, #0
   d78c4:	f280 8090 	bge.w	d79e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d78c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d78ca:	e7ef      	b.n	d78ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d78cc:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d78d0:	2902      	cmp	r1, #2
   d78d2:	d071      	beq.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d78d4:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d78d8:	2b00      	cmp	r3, #0
   d78da:	d06d      	beq.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d78dc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d78e0:	3a01      	subs	r2, #1
   d78e2:	2a28      	cmp	r2, #40	; 0x28
   d78e4:	d868      	bhi.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d78e6:	e8df f002 	tbb	[pc, r2]
   d78ea:	2115      	.short	0x2115
   d78ec:	49322b24 	.word	0x49322b24
   d78f0:	675c5750 	.word	0x675c5750
   d78f4:	67676761 	.word	0x67676761
   d78f8:	67676767 	.word	0x67676767
   d78fc:	67676767 	.word	0x67676767
   d7900:	67676767 	.word	0x67676767
   d7904:	67676767 	.word	0x67676767
   d7908:	1c156767 	.word	0x1c156767
   d790c:	322b2421 	.word	0x322b2421
   d7910:	3e39      	.short	0x3e39
   d7912:	43          	.byte	0x43
   d7913:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d7914:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7918:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d791c:	f7ff fece 	bl	d76bc <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d7920:	e04a      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d7922:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d7926:	4243      	negs	r3, r0
   d7928:	4143      	adcs	r3, r0
   d792a:	e02b      	b.n	d7984 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d792c:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d7930:	e008      	b.n	d7944 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d7932:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d7936:	424b      	negs	r3, r1
   d7938:	414b      	adcs	r3, r1
   d793a:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d793e:	e03b      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d7940:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d7944:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d7948:	f7ff fe06 	bl	d7558 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d794c:	e034      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d794e:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d7952:	4253      	negs	r3, r2
   d7954:	4153      	adcs	r3, r2
   d7956:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d795a:	e02d      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d795c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7960:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d7964:	e026      	b.n	d79b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d7966:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d796a:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d796e:	e021      	b.n	d79b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d7970:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7974:	30f0      	adds	r0, #240	; 0xf0
   d7976:	f7ff fea8 	bl	d76ca <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d797a:	e01d      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d797c:	2b30      	cmp	r3, #48	; 0x30
   d797e:	bf94      	ite	ls
   d7980:	2300      	movls	r3, #0
   d7982:	2301      	movhi	r3, #1
   d7984:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d7988:	e016      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d798a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d798e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d7992:	f7ff febe 	bl	d7712 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d7996:	e00f      	b.n	d79b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d7998:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d799c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d79a0:	e008      	b.n	d79b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d79a2:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79a6:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d79aa:	e003      	b.n	d79b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d79ac:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79b0:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d79b4:	f7ff fe9b 	bl	d76ee <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d79b8:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d79bc:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d79c0:	b1b6      	cbz	r6, d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d79c2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d79c6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d79c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d79ca:	f003 feed 	bl	db7a8 <strcmp>
   d79ce:	b978      	cbnz	r0, d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d79d0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d79d2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d79d6:	429a      	cmp	r2, r3
   d79d8:	dc0a      	bgt.n	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d79da:	d103      	bne.n	d79e4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d79dc:	4639      	mov	r1, r7
   d79de:	4630      	mov	r0, r6
   d79e0:	f7ff fead 	bl	d773e <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d79e4:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d79e6:	e7eb      	b.n	d79c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d79e8:	d002      	beq.n	d79f0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d79ea:	2300      	movs	r3, #0
   d79ec:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d79f0:	4628      	mov	r0, r5
   d79f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d79f4:	000dd2d0 	.word	0x000dd2d0
   d79f8:	000dd2d6 	.word	0x000dd2d6
   d79fc:	000dd2dc 	.word	0x000dd2dc
   d7a00:	000dd2e2 	.word	0x000dd2e2

000d7a04 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7a04:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d7a06:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d7a0a:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d7a0c:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7a10:	4604      	mov	r4, r0
   d7a12:	460d      	mov	r5, r1
  ++encodedCharCount;
   d7a14:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d7a18:	d02a      	beq.n	d7a70 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d7a1a:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d7a1e:	d804      	bhi.n	d7a2a <_ZN11TinyGPSPlus6encodeEc+0x26>
   d7a20:	290a      	cmp	r1, #10
   d7a22:	d00c      	beq.n	d7a3e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a24:	290d      	cmp	r1, #13
   d7a26:	d132      	bne.n	d7a8e <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d7a28:	e009      	b.n	d7a3e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a2a:	292a      	cmp	r1, #42	; 0x2a
   d7a2c:	d007      	beq.n	d7a3e <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a2e:	292c      	cmp	r1, #44	; 0x2c
   d7a30:	d12d      	bne.n	d7a8e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d7a32:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d7a36:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d7a3a:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d7a3e:	2b0e      	cmp	r3, #14
   d7a40:	f04f 0000 	mov.w	r0, #0
   d7a44:	d805      	bhi.n	d7a52 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d7a46:	4423      	add	r3, r4
   d7a48:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	f7ff fe79 	bl	d7744 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d7a52:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d7a56:	3301      	adds	r3, #1
   d7a58:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d7a5c:	2300      	movs	r3, #0
   d7a5e:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d7a62:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d7a66:	425d      	negs	r5, r3
   d7a68:	415d      	adcs	r5, r3
   d7a6a:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d7a6e:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7a70:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d7a72:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7a74:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d7a78:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d7a7c:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d7a80:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d7a84:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d7a88:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d7a8c:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d7a8e:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d7a90:	bf9f      	itttt	ls
   d7a92:	1c5a      	addls	r2, r3, #1
   d7a94:	191b      	addls	r3, r3, r4
   d7a96:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d7a9a:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d7a9e:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d7aa2:	b928      	cbnz	r0, d7ab0 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d7aa4:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d7aa8:	404d      	eors	r5, r1
   d7aaa:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d7aae:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d7ab0:	2000      	movs	r0, #0
  }

  return false;
}
   d7ab2:	bd38      	pop	{r3, r4, r5, pc}

000d7ab4 <_GLOBAL__sub_I__Z7radiansd>:
   d7ab4:	f000 b994 	b.w	d7de0 <HAL_Pin_Map>

000d7ab8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7ab8:	b513      	push	{r0, r1, r4, lr}
   d7aba:	460b      	mov	r3, r1
   d7abc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7abe:	c803      	ldmia	r0, {r0, r1}
   d7ac0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7ac8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7acc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7ad0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7ad4:	b002      	add	sp, #8
   d7ad6:	bd10      	pop	{r4, pc}

000d7ad8 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d7ad8:	b508      	push	{r3, lr}
   d7ada:	4b04      	ldr	r3, [pc, #16]	; (d7aec <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d7adc:	2201      	movs	r2, #1
   d7ade:	701a      	strb	r2, [r3, #0]
   d7ae0:	f000 f97e 	bl	d7de0 <HAL_Pin_Map>
   d7ae4:	4b02      	ldr	r3, [pc, #8]	; (d7af0 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d7ae6:	4a03      	ldr	r2, [pc, #12]	; (d7af4 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x1c>)
   d7ae8:	601a      	str	r2, [r3, #0]
   d7aea:	bd08      	pop	{r3, pc}
   d7aec:	2003e254 	.word	0x2003e254
   d7af0:	2003e250 	.word	0x2003e250
   d7af4:	000dd661 	.word	0x000dd661

000d7af8 <_GLOBAL__sub_I_CellularHelper>:
   d7af8:	f000 b972 	b.w	d7de0 <HAL_Pin_Map>

000d7afc <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d7afc:	4770      	bx	lr

000d7afe <_ZN9LIS3DHSPID0Ev>:
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7afe:	b510      	push	{r4, lr}
}
   d7b00:	2128      	movs	r1, #40	; 0x28
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7b02:	4604      	mov	r4, r0
}
   d7b04:	f002 fb51 	bl	da1aa <_ZdlPvj>
   d7b08:	4620      	mov	r0, r4
   d7b0a:	bd10      	pop	{r4, pc}

000d7b0c <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d7b0c:	b510      	push	{r4, lr}
   d7b0e:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d7b10:	f100 0118 	add.w	r1, r0, #24
   d7b14:	68c0      	ldr	r0, [r0, #12]
   d7b16:	f001 fd77 	bl	d9608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

	digitalWrite(ss, LOW);
   d7b1a:	8a20      	ldrh	r0, [r4, #16]
   d7b1c:	2100      	movs	r1, #0
}
   d7b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::beginTransaction() {
	spi.beginTransaction(spiSettings);

	digitalWrite(ss, LOW);
   d7b22:	f002 bad0 	b.w	da0c6 <digitalWrite>

000d7b26 <_ZN9LIS3DHSPI14endTransactionEv>:
}

void LIS3DHSPI::endTransaction() {
   d7b26:	b510      	push	{r4, lr}
   d7b28:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d7b2a:	2101      	movs	r1, #1
   d7b2c:	8a00      	ldrh	r0, [r0, #16]
   d7b2e:	f002 faca 	bl	da0c6 <digitalWrite>

	spi.endTransaction();
   d7b32:	68e0      	ldr	r0, [r4, #12]
}
   d7b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);

	spi.endTransaction();
   d7b38:	f001 bd4d 	b.w	d95d6 <_ZN8SPIClass14endTransactionEv>

000d7b3c <_ZN9LIS3DHSPI8readDataEhPhj>:
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b3e:	461e      	mov	r6, r3
	beginTransaction();
   d7b40:	6803      	ldr	r3, [r0, #0]
   d7b42:	695b      	ldr	r3, [r3, #20]
	digitalWrite(ss, HIGH);

	spi.endTransaction();
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7b44:	460f      	mov	r7, r1
   d7b46:	4614      	mov	r4, r2
   d7b48:	4605      	mov	r5, r0
	beginTransaction();
   d7b4a:	4798      	blx	r3

	if (numBytes > 1) {
   d7b4c:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7b4e:	bf88      	it	hi
   d7b50:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d7b54:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7b58:	68e8      	ldr	r0, [r5, #12]
   d7b5a:	f001 fdc5 	bl	d96e8 <_ZN8SPIClass8transferEh>
   d7b5e:	4426      	add	r6, r4

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7b60:	42b4      	cmp	r4, r6
   d7b62:	d006      	beq.n	d7b72 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d7b64:	2100      	movs	r1, #0
   d7b66:	68e8      	ldr	r0, [r5, #12]
   d7b68:	f001 fdbe 	bl	d96e8 <_ZN8SPIClass8transferEh>
   d7b6c:	f804 0b01 	strb.w	r0, [r4], #1
		addr |= SPI_INCREMENT;
	}

	spi.transfer(SPI_READ | addr);

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7b70:	e7f6      	b.n	d7b60 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
		buf[ii] = spi.transfer(0);
	}

	endTransaction();
   d7b72:	682b      	ldr	r3, [r5, #0]
   d7b74:	4628      	mov	r0, r5
   d7b76:	699b      	ldr	r3, [r3, #24]
   d7b78:	4798      	blx	r3

	return true;
}
   d7b7a:	2001      	movs	r0, #1
   d7b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b7e <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b80:	461e      	mov	r6, r3
	beginTransaction();
   d7b82:	6803      	ldr	r3, [r0, #0]
   d7b84:	695b      	ldr	r3, [r3, #20]
	endTransaction();

	return true;
}

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7b86:	460f      	mov	r7, r1
   d7b88:	4614      	mov	r4, r2
   d7b8a:	4605      	mov	r5, r0
	beginTransaction();
   d7b8c:	4798      	blx	r3

	if (numBytes > 1) {
   d7b8e:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7b90:	bf88      	it	hi
   d7b92:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d7b96:	4639      	mov	r1, r7
   d7b98:	68e8      	ldr	r0, [r5, #12]
   d7b9a:	f001 fda5 	bl	d96e8 <_ZN8SPIClass8transferEh>
   d7b9e:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7ba0:	42b4      	cmp	r4, r6
   d7ba2:	d005      	beq.n	d7bb0 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d7ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7ba8:	68e8      	ldr	r0, [r5, #12]
   d7baa:	f001 fd9d 	bl	d96e8 <_ZN8SPIClass8transferEh>
	if (numBytes > 1) {
		addr |= SPI_INCREMENT;
	}

	spi.transfer(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7bae:	e7f7      	b.n	d7ba0 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
		spi.transfer(buf[ii]);
	}

	endTransaction();
   d7bb0:	682b      	ldr	r3, [r5, #0]
   d7bb2:	4628      	mov	r0, r5
   d7bb4:	699b      	ldr	r3, [r3, #24]
   d7bb6:	4798      	blx	r3

	return true;
}
   d7bb8:	2001      	movs	r0, #1
   d7bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bbc <_ZN6LIS3DHC1Ei>:

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d7bbc:	4a02      	ldr	r2, [pc, #8]	; (d7bc8 <_ZN6LIS3DHC1Ei+0xc>)
   d7bbe:	6002      	str	r2, [r0, #0]
   d7bc0:	2200      	movs	r2, #0
   d7bc2:	6041      	str	r1, [r0, #4]
   d7bc4:	7202      	strb	r2, [r0, #8]

}
   d7bc6:	4770      	bx	lr
   d7bc8:	000dd698 	.word	0x000dd698

000d7bcc <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d7bcc:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
   d7bce:	6803      	ldr	r3, [r0, #0]
   d7bd0:	aa01      	add	r2, sp, #4
   d7bd2:	68dc      	ldr	r4, [r3, #12]
   d7bd4:	2301      	movs	r3, #1
   d7bd6:	47a0      	blx	r4

	return resp[0];
}
   d7bd8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d7bdc:	b002      	add	sp, #8
   d7bde:	bd10      	pop	{r4, pc}

000d7be0 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
   d7be0:	b538      	push	{r3, r4, r5, lr}
   d7be2:	4605      	mov	r5, r0
   d7be4:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d7be6:	210f      	movs	r1, #15
   d7be8:	4628      	mov	r0, r5
   d7bea:	f7ff ffef 	bl	d7bcc <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d7bee:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d7bf0:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
   d7bf4:	d005      	beq.n	d7c02 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
   d7bf6:	f000 fbfb 	bl	d83f0 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
   d7bfa:	3c01      	subs	r4, #1
   d7bfc:	d1f3      	bne.n	d7be6 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
   d7bfe:	4620      	mov	r0, r4
   d7c00:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
   d7c02:	bd38      	pop	{r3, r4, r5, pc}

000d7c04 <_ZN9LIS3DHSPI9hasDeviceEv>:
}

LIS3DHSPI::~LIS3DHSPI() {
}

bool LIS3DHSPI::hasDevice() {
   d7c04:	b510      	push	{r4, lr}
   d7c06:	4604      	mov	r4, r0
	spi.begin(ss);
   d7c08:	8a01      	ldrh	r1, [r0, #16]
   d7c0a:	68c0      	ldr	r0, [r0, #12]
   d7c0c:	f001 fcd2 	bl	d95b4 <_ZN8SPIClass5beginEt>

	return LIS3DH::hasDevice();
   d7c10:	4620      	mov	r0, r4
}
   d7c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

bool LIS3DHSPI::hasDevice() {
	spi.begin(ss);

	return LIS3DH::hasDevice();
   d7c16:	f7ff bfe3 	b.w	d7be0 <_ZN6LIS3DH9hasDeviceEv>

000d7c1a <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
   d7c1a:	f000 b8e1 	b.w	d7de0 <HAL_Pin_Map>
	...

000d7c20 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7c20:	4b02      	ldr	r3, [pc, #8]	; (d7c2c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d7c22:	2201      	movs	r2, #1
   d7c24:	701a      	strb	r2, [r3, #0]
   d7c26:	f000 b8db 	b.w	d7de0 <HAL_Pin_Map>
   d7c2a:	bf00      	nop
   d7c2c:	2003e255 	.word	0x2003e255

000d7c30 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7c30:	b508      	push	{r3, lr}
   d7c32:	4b02      	ldr	r3, [pc, #8]	; (d7c3c <cellular_signal+0xc>)
   d7c34:	681b      	ldr	r3, [r3, #0]
   d7c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c38:	9301      	str	r3, [sp, #4]
   d7c3a:	bd08      	pop	{r3, pc}
   d7c3c:	00030274 	.word	0x00030274

000d7c40 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d7c40:	b508      	push	{r3, lr}
   d7c42:	4b02      	ldr	r3, [pc, #8]	; (d7c4c <cellular_command+0xc>)
   d7c44:	681b      	ldr	r3, [r3, #0]
   d7c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c48:	9301      	str	r3, [sp, #4]
   d7c4a:	bd08      	pop	{r3, pc}
   d7c4c:	00030274 	.word	0x00030274

000d7c50 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7c50:	b508      	push	{r3, lr}
   d7c52:	4b02      	ldr	r3, [pc, #8]	; (d7c5c <os_thread_create+0xc>)
   d7c54:	681b      	ldr	r3, [r3, #0]
   d7c56:	685b      	ldr	r3, [r3, #4]
   d7c58:	9301      	str	r3, [sp, #4]
   d7c5a:	bd08      	pop	{r3, pc}
   d7c5c:	00030248 	.word	0x00030248

000d7c60 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7c60:	b508      	push	{r3, lr}
   d7c62:	4b02      	ldr	r3, [pc, #8]	; (d7c6c <os_thread_is_current+0xc>)
   d7c64:	681b      	ldr	r3, [r3, #0]
   d7c66:	689b      	ldr	r3, [r3, #8]
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	bd08      	pop	{r3, pc}
   d7c6c:	00030248 	.word	0x00030248

000d7c70 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c70:	b508      	push	{r3, lr}
   d7c72:	4b02      	ldr	r3, [pc, #8]	; (d7c7c <os_thread_yield+0xc>)
   d7c74:	681b      	ldr	r3, [r3, #0]
   d7c76:	68db      	ldr	r3, [r3, #12]
   d7c78:	9301      	str	r3, [sp, #4]
   d7c7a:	bd08      	pop	{r3, pc}
   d7c7c:	00030248 	.word	0x00030248

000d7c80 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7c80:	b508      	push	{r3, lr}
   d7c82:	4b02      	ldr	r3, [pc, #8]	; (d7c8c <os_thread_join+0xc>)
   d7c84:	681b      	ldr	r3, [r3, #0]
   d7c86:	691b      	ldr	r3, [r3, #16]
   d7c88:	9301      	str	r3, [sp, #4]
   d7c8a:	bd08      	pop	{r3, pc}
   d7c8c:	00030248 	.word	0x00030248

000d7c90 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7c90:	b508      	push	{r3, lr}
   d7c92:	4b02      	ldr	r3, [pc, #8]	; (d7c9c <os_thread_cleanup+0xc>)
   d7c94:	681b      	ldr	r3, [r3, #0]
   d7c96:	695b      	ldr	r3, [r3, #20]
   d7c98:	9301      	str	r3, [sp, #4]
   d7c9a:	bd08      	pop	{r3, pc}
   d7c9c:	00030248 	.word	0x00030248

000d7ca0 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <os_thread_scheduling+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	69db      	ldr	r3, [r3, #28]
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030248 	.word	0x00030248

000d7cb0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <os_mutex_create+0xc>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7cb8:	9301      	str	r3, [sp, #4]
   d7cba:	bd08      	pop	{r3, pc}
   d7cbc:	00030248 	.word	0x00030248

000d7cc0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b02      	ldr	r3, [pc, #8]	; (d7ccc <os_mutex_lock+0xc>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7cc8:	9301      	str	r3, [sp, #4]
   d7cca:	bd08      	pop	{r3, pc}
   d7ccc:	00030248 	.word	0x00030248

000d7cd0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7cd0:	b508      	push	{r3, lr}
   d7cd2:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <os_mutex_unlock+0xc>)
   d7cd4:	681b      	ldr	r3, [r3, #0]
   d7cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7cd8:	9301      	str	r3, [sp, #4]
   d7cda:	bd08      	pop	{r3, pc}
   d7cdc:	00030248 	.word	0x00030248

000d7ce0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7ce0:	b508      	push	{r3, lr}
   d7ce2:	4b02      	ldr	r3, [pc, #8]	; (d7cec <os_mutex_recursive_create+0xc>)
   d7ce4:	681b      	ldr	r3, [r3, #0]
   d7ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ce8:	9301      	str	r3, [sp, #4]
   d7cea:	bd08      	pop	{r3, pc}
   d7cec:	00030248 	.word	0x00030248

000d7cf0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7cf0:	b508      	push	{r3, lr}
   d7cf2:	4b02      	ldr	r3, [pc, #8]	; (d7cfc <os_mutex_recursive_destroy+0xc>)
   d7cf4:	681b      	ldr	r3, [r3, #0]
   d7cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cf8:	9301      	str	r3, [sp, #4]
   d7cfa:	bd08      	pop	{r3, pc}
   d7cfc:	00030248 	.word	0x00030248

000d7d00 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <os_thread_exit+0xc>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d08:	9301      	str	r3, [sp, #4]
   d7d0a:	bd08      	pop	{r3, pc}
   d7d0c:	00030248 	.word	0x00030248

000d7d10 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <HAL_Feature_Set+0xc>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d18:	9301      	str	r3, [sp, #4]
   d7d1a:	bd08      	pop	{r3, pc}
   d7d1c:	00030234 	.word	0x00030234

000d7d20 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d7d20:	b508      	push	{r3, lr}
   d7d22:	4b02      	ldr	r3, [pc, #8]	; (d7d2c <HAL_Core_System_Reset_Ex+0xc>)
   d7d24:	681b      	ldr	r3, [r3, #0]
   d7d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7d28:	9301      	str	r3, [sp, #4]
   d7d2a:	bd08      	pop	{r3, pc}
   d7d2c:	00030234 	.word	0x00030234

000d7d30 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7d30:	b508      	push	{r3, lr}
   d7d32:	4b02      	ldr	r3, [pc, #8]	; (d7d3c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d38:	9301      	str	r3, [sp, #4]
   d7d3a:	bd08      	pop	{r3, pc}
   d7d3c:	00030234 	.word	0x00030234

000d7d40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d40:	b508      	push	{r3, lr}
   d7d42:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <HAL_RNG_GetRandomNumber+0xc>)
   d7d44:	681b      	ldr	r3, [r3, #0]
   d7d46:	685b      	ldr	r3, [r3, #4]
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	bd08      	pop	{r3, pc}
   d7d4c:	00030218 	.word	0x00030218

000d7d50 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <HAL_Delay_Milliseconds+0xc>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	689b      	ldr	r3, [r3, #8]
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	00030218 	.word	0x00030218

000d7d60 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <HAL_Delay_Microseconds+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	68db      	ldr	r3, [r3, #12]
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	00030218 	.word	0x00030218

000d7d70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	695b      	ldr	r3, [r3, #20]
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030218 	.word	0x00030218

000d7d80 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <HAL_RTC_Get_UnixTime+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	69db      	ldr	r3, [r3, #28]
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030218 	.word	0x00030218

000d7d90 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <HAL_RTC_Set_UnixTime+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	6a1b      	ldr	r3, [r3, #32]
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030218 	.word	0x00030218

000d7da0 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <HAL_disable_irq+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030218 	.word	0x00030218

000d7db0 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <HAL_enable_irq+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	00030218 	.word	0x00030218

000d7dc0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <HAL_RTC_Time_Is_Valid+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030218 	.word	0x00030218

000d7dd0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <hal_timer_millis+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	00030218 	.word	0x00030218

000d7de0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <HAL_Pin_Map+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	681b      	ldr	r3, [r3, #0]
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	0003022c 	.word	0x0003022c

000d7df0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <HAL_Pin_Mode+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	689b      	ldr	r3, [r3, #8]
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	0003022c 	.word	0x0003022c

000d7e00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <HAL_Get_Pin_Mode+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	68db      	ldr	r3, [r3, #12]
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	0003022c 	.word	0x0003022c

000d7e10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <HAL_GPIO_Write+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	691b      	ldr	r3, [r3, #16]
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	0003022c 	.word	0x0003022c

000d7e20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <HAL_GPIO_Read+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	695b      	ldr	r3, [r3, #20]
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	0003022c 	.word	0x0003022c

000d7e30 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <HAL_Interrupts_Attach+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	699b      	ldr	r3, [r3, #24]
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	0003022c 	.word	0x0003022c

000d7e40 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <HAL_Interrupts_Detach+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	69db      	ldr	r3, [r3, #28]
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	0003022c 	.word	0x0003022c

000d7e50 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <HAL_Interrupts_Enable_All+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	6a1b      	ldr	r3, [r3, #32]
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	0003022c 	.word	0x0003022c

000d7e60 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <HAL_Interrupts_Disable_All+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	0003022c 	.word	0x0003022c

000d7e70 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <HAL_I2C_Begin+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	68db      	ldr	r3, [r3, #12]
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030228 	.word	0x00030228

000d7e80 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <HAL_I2C_Begin_Transmission+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	699b      	ldr	r3, [r3, #24]
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	00030228 	.word	0x00030228

000d7e90 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <HAL_I2C_End_Transmission+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	69db      	ldr	r3, [r3, #28]
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	00030228 	.word	0x00030228

000d7ea0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <HAL_I2C_Write_Data+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	6a1b      	ldr	r3, [r3, #32]
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	00030228 	.word	0x00030228

000d7eb0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <HAL_I2C_Available_Data+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	00030228 	.word	0x00030228

000d7ec0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <HAL_I2C_Read_Data+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	00030228 	.word	0x00030228

000d7ed0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <HAL_I2C_Peek_Data+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	00030228 	.word	0x00030228

000d7ee0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <HAL_I2C_Flush_Data+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030228 	.word	0x00030228

000d7ef0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <HAL_I2C_Is_Enabled+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030228 	.word	0x00030228

000d7f00 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <HAL_I2C_Init+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030228 	.word	0x00030228

000d7f10 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <HAL_I2C_Acquire+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030228 	.word	0x00030228

000d7f20 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <HAL_I2C_Release+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030228 	.word	0x00030228

000d7f30 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <HAL_I2C_Request_Data_Ex+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030228 	.word	0x00030228

000d7f40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <inet_inet_ntop+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	695b      	ldr	r3, [r3, #20]
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	00030264 	.word	0x00030264

000d7f50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <netdb_freeaddrinfo+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	689b      	ldr	r3, [r3, #8]
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	00030268 	.word	0x00030268

000d7f60 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <netdb_getaddrinfo+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	68db      	ldr	r3, [r3, #12]
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	00030268 	.word	0x00030268

000d7f70 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <HAL_SPI_Begin+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	681b      	ldr	r3, [r3, #0]
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	00030230 	.word	0x00030230

000d7f80 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <HAL_SPI_Send_Receive_Data+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	695b      	ldr	r3, [r3, #20]
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	00030230 	.word	0x00030230

000d7f90 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <HAL_SPI_Init+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	69db      	ldr	r3, [r3, #28]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	00030230 	.word	0x00030230

000d7fa0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <HAL_SPI_Is_Enabled+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	6a1b      	ldr	r3, [r3, #32]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	00030230 	.word	0x00030230

000d7fb0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <HAL_SPI_Info+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	00030230 	.word	0x00030230

000d7fc0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <HAL_SPI_Set_Settings+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030230 	.word	0x00030230

000d7fd0 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <HAL_SPI_Acquire+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030230 	.word	0x00030230

000d7fe0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <HAL_SPI_Release+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	00030230 	.word	0x00030230

000d7ff0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <HAL_USART_Init+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	681b      	ldr	r3, [r3, #0]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	0003023c 	.word	0x0003023c

000d8000 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <HAL_USART_Write_Data+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	68db      	ldr	r3, [r3, #12]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	0003023c 	.word	0x0003023c

000d8010 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <HAL_USART_Available_Data+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	691b      	ldr	r3, [r3, #16]
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	0003023c 	.word	0x0003023c

000d8020 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <HAL_USART_Read_Data+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	695b      	ldr	r3, [r3, #20]
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	0003023c 	.word	0x0003023c

000d8030 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <HAL_USART_Peek_Data+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	699b      	ldr	r3, [r3, #24]
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	0003023c 	.word	0x0003023c

000d8040 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <HAL_USART_Flush_Data+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	69db      	ldr	r3, [r3, #28]
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	0003023c 	.word	0x0003023c

000d8050 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <HAL_USART_Is_Enabled+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6a1b      	ldr	r3, [r3, #32]
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	0003023c 	.word	0x0003023c

000d8060 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <HAL_USART_Available_Data_For_Write+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	0003023c 	.word	0x0003023c

000d8070 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <HAL_USB_USART_Init+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	681b      	ldr	r3, [r3, #0]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003024c 	.word	0x0003024c

000d8080 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <HAL_USB_USART_Begin+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	685b      	ldr	r3, [r3, #4]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003024c 	.word	0x0003024c

000d8090 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <HAL_USB_USART_Available_Data+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	691b      	ldr	r3, [r3, #16]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003024c 	.word	0x0003024c

000d80a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	695b      	ldr	r3, [r3, #20]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	0003024c 	.word	0x0003024c

000d80b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <HAL_USB_USART_Receive_Data+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	699b      	ldr	r3, [r3, #24]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	0003024c 	.word	0x0003024c

000d80c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <HAL_USB_USART_Send_Data+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	69db      	ldr	r3, [r3, #28]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	0003024c 	.word	0x0003024c

000d80d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <HAL_USB_USART_Flush_Data+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6a1b      	ldr	r3, [r3, #32]
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	0003024c 	.word	0x0003024c

000d80e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <panic_+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	00030260 	.word	0x00030260

000d80f0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <log_message_v+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	00030260 	.word	0x00030260

000d8100 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b03      	ldr	r3, [pc, #12]	; (d8110 <diag_get_source+0x10>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d810a:	9301      	str	r3, [sp, #4]
   d810c:	bd08      	pop	{r3, pc}
   d810e:	0000      	.short	0x0000
   d8110:	00030260 	.word	0x00030260

000d8114 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <system_mode+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	681b      	ldr	r3, [r3, #0]
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	00030220 	.word	0x00030220

000d8124 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <set_system_mode+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	685b      	ldr	r3, [r3, #4]
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	00030220 	.word	0x00030220

000d8134 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b02      	ldr	r3, [pc, #8]	; (d8140 <system_delay_ms+0xc>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	695b      	ldr	r3, [r3, #20]
   d813c:	9301      	str	r3, [sp, #4]
   d813e:	bd08      	pop	{r3, pc}
   d8140:	00030220 	.word	0x00030220

000d8144 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <system_sleep+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	699b      	ldr	r3, [r3, #24]
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030220 	.word	0x00030220

000d8154 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <system_thread_set_state+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030220 	.word	0x00030220

000d8164 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <application_thread_current+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030220 	.word	0x00030220

000d8174 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <application_thread_invoke+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030220 	.word	0x00030220

000d8184 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <system_thread_get_state+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030220 	.word	0x00030220

000d8194 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <system_notify_time_changed+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030220 	.word	0x00030220

000d81a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b03      	ldr	r3, [pc, #12]	; (d81b4 <system_ctrl_set_app_request_handler+0x10>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d81ae:	9301      	str	r3, [sp, #4]
   d81b0:	bd08      	pop	{r3, pc}
   d81b2:	0000      	.short	0x0000
   d81b4:	00030220 	.word	0x00030220

000d81b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b03      	ldr	r3, [pc, #12]	; (d81c8 <system_ctrl_set_result+0x10>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d81c2:	9301      	str	r3, [sp, #4]
   d81c4:	bd08      	pop	{r3, pc}
   d81c6:	0000      	.short	0x0000
   d81c8:	00030220 	.word	0x00030220

000d81cc <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b03      	ldr	r3, [pc, #12]	; (d81dc <system_power_management_set_config+0x10>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d81d6:	9301      	str	r3, [sp, #4]
   d81d8:	bd08      	pop	{r3, pc}
   d81da:	0000      	.short	0x0000
   d81dc:	00030220 	.word	0x00030220

000d81e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d81e0:	b508      	push	{r3, lr}
   d81e2:	4b02      	ldr	r3, [pc, #8]	; (d81ec <spark_variable+0xc>)
   d81e4:	681b      	ldr	r3, [r3, #0]
   d81e6:	681b      	ldr	r3, [r3, #0]
   d81e8:	9301      	str	r3, [sp, #4]
   d81ea:	bd08      	pop	{r3, pc}
   d81ec:	00030244 	.word	0x00030244

000d81f0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d81f0:	b508      	push	{r3, lr}
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <spark_function+0xc>)
   d81f4:	681b      	ldr	r3, [r3, #0]
   d81f6:	685b      	ldr	r3, [r3, #4]
   d81f8:	9301      	str	r3, [sp, #4]
   d81fa:	bd08      	pop	{r3, pc}
   d81fc:	00030244 	.word	0x00030244

000d8200 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <spark_process+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	689b      	ldr	r3, [r3, #8]
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030244 	.word	0x00030244

000d8210 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <spark_cloud_flag_connect+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	68db      	ldr	r3, [r3, #12]
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030244 	.word	0x00030244

000d8220 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <spark_cloud_flag_disconnect+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	691b      	ldr	r3, [r3, #16]
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030244 	.word	0x00030244

000d8230 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <spark_cloud_flag_connected+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	695b      	ldr	r3, [r3, #20]
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030244 	.word	0x00030244

000d8240 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <spark_deviceID+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	69db      	ldr	r3, [r3, #28]
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030244 	.word	0x00030244

000d8250 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <spark_send_event+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	6a1b      	ldr	r3, [r3, #32]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	00030244 	.word	0x00030244

000d8260 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <spark_subscribe+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	00030244 	.word	0x00030244

000d8270 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <spark_sync_time+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	00030244 	.word	0x00030244

000d8280 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <spark_sync_time_pending+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	00030244 	.word	0x00030244

000d8290 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <spark_sync_time_last+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	00030244 	.word	0x00030244

000d82a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <spark_set_random_seed_from_cloud_handler+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	00030244 	.word	0x00030244

000d82b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d82b0:	b508      	push	{r3, lr}
   d82b2:	4b02      	ldr	r3, [pc, #8]	; (d82bc <network_connect+0xc>)
   d82b4:	681b      	ldr	r3, [r3, #0]
   d82b6:	685b      	ldr	r3, [r3, #4]
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	bd08      	pop	{r3, pc}
   d82bc:	00030240 	.word	0x00030240

000d82c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d82c0:	b508      	push	{r3, lr}
   d82c2:	4b02      	ldr	r3, [pc, #8]	; (d82cc <network_connecting+0xc>)
   d82c4:	681b      	ldr	r3, [r3, #0]
   d82c6:	689b      	ldr	r3, [r3, #8]
   d82c8:	9301      	str	r3, [sp, #4]
   d82ca:	bd08      	pop	{r3, pc}
   d82cc:	00030240 	.word	0x00030240

000d82d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d82d0:	b508      	push	{r3, lr}
   d82d2:	4b02      	ldr	r3, [pc, #8]	; (d82dc <network_disconnect+0xc>)
   d82d4:	681b      	ldr	r3, [r3, #0]
   d82d6:	68db      	ldr	r3, [r3, #12]
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	00030240 	.word	0x00030240

000d82e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d82e0:	b508      	push	{r3, lr}
   d82e2:	4b02      	ldr	r3, [pc, #8]	; (d82ec <network_ready+0xc>)
   d82e4:	681b      	ldr	r3, [r3, #0]
   d82e6:	691b      	ldr	r3, [r3, #16]
   d82e8:	9301      	str	r3, [sp, #4]
   d82ea:	bd08      	pop	{r3, pc}
   d82ec:	00030240 	.word	0x00030240

000d82f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b02      	ldr	r3, [pc, #8]	; (d82fc <network_on+0xc>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	695b      	ldr	r3, [r3, #20]
   d82f8:	9301      	str	r3, [sp, #4]
   d82fa:	bd08      	pop	{r3, pc}
   d82fc:	00030240 	.word	0x00030240

000d8300 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8300:	b508      	push	{r3, lr}
   d8302:	4b02      	ldr	r3, [pc, #8]	; (d830c <network_off+0xc>)
   d8304:	681b      	ldr	r3, [r3, #0]
   d8306:	699b      	ldr	r3, [r3, #24]
   d8308:	9301      	str	r3, [sp, #4]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	00030240 	.word	0x00030240

000d8310 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8310:	b508      	push	{r3, lr}
   d8312:	4b02      	ldr	r3, [pc, #8]	; (d831c <network_listen+0xc>)
   d8314:	681b      	ldr	r3, [r3, #0]
   d8316:	69db      	ldr	r3, [r3, #28]
   d8318:	9301      	str	r3, [sp, #4]
   d831a:	bd08      	pop	{r3, pc}
   d831c:	00030240 	.word	0x00030240

000d8320 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8320:	b508      	push	{r3, lr}
   d8322:	4b02      	ldr	r3, [pc, #8]	; (d832c <network_listening+0xc>)
   d8324:	681b      	ldr	r3, [r3, #0]
   d8326:	6a1b      	ldr	r3, [r3, #32]
   d8328:	9301      	str	r3, [sp, #4]
   d832a:	bd08      	pop	{r3, pc}
   d832c:	00030240 	.word	0x00030240

000d8330 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8330:	b508      	push	{r3, lr}
   d8332:	4b02      	ldr	r3, [pc, #8]	; (d833c <network_set_listen_timeout+0xc>)
   d8334:	681b      	ldr	r3, [r3, #0]
   d8336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8338:	9301      	str	r3, [sp, #4]
   d833a:	bd08      	pop	{r3, pc}
   d833c:	00030240 	.word	0x00030240

000d8340 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b02      	ldr	r3, [pc, #8]	; (d834c <network_get_listen_timeout+0xc>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8348:	9301      	str	r3, [sp, #4]
   d834a:	bd08      	pop	{r3, pc}
   d834c:	00030240 	.word	0x00030240

000d8350 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8350:	b508      	push	{r3, lr}
   d8352:	4b02      	ldr	r3, [pc, #8]	; (d835c <malloc+0xc>)
   d8354:	681b      	ldr	r3, [r3, #0]
   d8356:	681b      	ldr	r3, [r3, #0]
   d8358:	9301      	str	r3, [sp, #4]
   d835a:	bd08      	pop	{r3, pc}
   d835c:	0003021c 	.word	0x0003021c

000d8360 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8360:	b508      	push	{r3, lr}
   d8362:	4b02      	ldr	r3, [pc, #8]	; (d836c <free+0xc>)
   d8364:	681b      	ldr	r3, [r3, #0]
   d8366:	685b      	ldr	r3, [r3, #4]
   d8368:	9301      	str	r3, [sp, #4]
   d836a:	bd08      	pop	{r3, pc}
   d836c:	0003021c 	.word	0x0003021c

000d8370 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8370:	b508      	push	{r3, lr}
   d8372:	4b02      	ldr	r3, [pc, #8]	; (d837c <realloc+0xc>)
   d8374:	681b      	ldr	r3, [r3, #0]
   d8376:	689b      	ldr	r3, [r3, #8]
   d8378:	9301      	str	r3, [sp, #4]
   d837a:	bd08      	pop	{r3, pc}
   d837c:	0003021c 	.word	0x0003021c

000d8380 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8380:	b508      	push	{r3, lr}
   d8382:	4b02      	ldr	r3, [pc, #8]	; (d838c <siprintf+0xc>)
   d8384:	681b      	ldr	r3, [r3, #0]
   d8386:	691b      	ldr	r3, [r3, #16]
   d8388:	9301      	str	r3, [sp, #4]
   d838a:	bd08      	pop	{r3, pc}
   d838c:	0003021c 	.word	0x0003021c

000d8390 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8390:	b508      	push	{r3, lr}
   d8392:	4b02      	ldr	r3, [pc, #8]	; (d839c <siscanf+0xc>)
   d8394:	681b      	ldr	r3, [r3, #0]
   d8396:	699b      	ldr	r3, [r3, #24]
   d8398:	9301      	str	r3, [sp, #4]
   d839a:	bd08      	pop	{r3, pc}
   d839c:	0003021c 	.word	0x0003021c

000d83a0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d83a0:	b508      	push	{r3, lr}
   d83a2:	4b02      	ldr	r3, [pc, #8]	; (d83ac <snprintf+0xc>)
   d83a4:	681b      	ldr	r3, [r3, #0]
   d83a6:	69db      	ldr	r3, [r3, #28]
   d83a8:	9301      	str	r3, [sp, #4]
   d83aa:	bd08      	pop	{r3, pc}
   d83ac:	0003021c 	.word	0x0003021c

000d83b0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d83b0:	b508      	push	{r3, lr}
   d83b2:	4b02      	ldr	r3, [pc, #8]	; (d83bc <sniprintf+0xc>)
   d83b4:	681b      	ldr	r3, [r3, #0]
   d83b6:	6a1b      	ldr	r3, [r3, #32]
   d83b8:	9301      	str	r3, [sp, #4]
   d83ba:	bd08      	pop	{r3, pc}
   d83bc:	0003021c 	.word	0x0003021c

000d83c0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d83c0:	b508      	push	{r3, lr}
   d83c2:	4b02      	ldr	r3, [pc, #8]	; (d83cc <vsnprintf+0xc>)
   d83c4:	681b      	ldr	r3, [r3, #0]
   d83c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83c8:	9301      	str	r3, [sp, #4]
   d83ca:	bd08      	pop	{r3, pc}
   d83cc:	0003021c 	.word	0x0003021c

000d83d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d83d0:	b508      	push	{r3, lr}
   d83d2:	4b02      	ldr	r3, [pc, #8]	; (d83dc <abort+0xc>)
   d83d4:	681b      	ldr	r3, [r3, #0]
   d83d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83d8:	9301      	str	r3, [sp, #4]
   d83da:	bd08      	pop	{r3, pc}
   d83dc:	0003021c 	.word	0x0003021c

000d83e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83e0:	b508      	push	{r3, lr}
   d83e2:	4b02      	ldr	r3, [pc, #8]	; (d83ec <_malloc_r+0xc>)
   d83e4:	681b      	ldr	r3, [r3, #0]
   d83e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83e8:	9301      	str	r3, [sp, #4]
   d83ea:	bd08      	pop	{r3, pc}
   d83ec:	0003021c 	.word	0x0003021c

000d83f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d83f0:	2100      	movs	r1, #0
   d83f2:	f7ff be9f 	b.w	d8134 <system_delay_ms>

000d83f6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d83f6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d83f8:	6883      	ldr	r3, [r0, #8]
   d83fa:	4604      	mov	r4, r0
   d83fc:	b90b      	cbnz	r3, d8402 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d83fe:	f001 fef0 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8402:	68c3      	ldr	r3, [r0, #12]
   d8404:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8406:	68a3      	ldr	r3, [r4, #8]
   d8408:	b11b      	cbz	r3, d8412 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d840a:	2203      	movs	r2, #3
   d840c:	4621      	mov	r1, r4
   d840e:	4620      	mov	r0, r4
   d8410:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8412:	4620      	mov	r0, r4
   d8414:	2110      	movs	r1, #16
}
   d8416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d841a:	f001 bec6 	b.w	da1aa <_ZdlPvj>

000d841e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d841e:	b510      	push	{r4, lr}
   d8420:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8422:	6800      	ldr	r0, [r0, #0]
   d8424:	b108      	cbz	r0, d842a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8426:	f7ff fc63 	bl	d7cf0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d842a:	4620      	mov	r0, r4
   d842c:	bd10      	pop	{r4, pc}

000d842e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d842e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8430:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8432:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8434:	689b      	ldr	r3, [r3, #8]
   d8436:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8438:	68a3      	ldr	r3, [r4, #8]
   d843a:	3b01      	subs	r3, #1
   d843c:	60a3      	str	r3, [r4, #8]
   d843e:	b92b      	cbnz	r3, d844c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d8440:	6823      	ldr	r3, [r4, #0]
   d8442:	4620      	mov	r0, r4
   d8444:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d844a:	4718      	bx	r3
   d844c:	bd10      	pop	{r4, pc}

000d844e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d844e:	680b      	ldr	r3, [r1, #0]
   d8450:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8452:	b113      	cbz	r3, d845a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8454:	685a      	ldr	r2, [r3, #4]
   d8456:	3201      	adds	r2, #1
   d8458:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d845a:	4770      	bx	lr

000d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d845c:	b510      	push	{r4, lr}
   d845e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d8460:	6800      	ldr	r0, [r0, #0]
   d8462:	b128      	cbz	r0, d8470 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8464:	6843      	ldr	r3, [r0, #4]
   d8466:	3b01      	subs	r3, #1
   d8468:	6043      	str	r3, [r0, #4]
   d846a:	b90b      	cbnz	r3, d8470 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d846c:	f7ff ffdf 	bl	d842e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d8470:	4620      	mov	r0, r4
   d8472:	bd10      	pop	{r4, pc}

000d8474 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8474:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8476:	4c06      	ldr	r4, [pc, #24]	; (d8490 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8478:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d847a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d847c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d847e:	f7ff fc2f 	bl	d7ce0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8482:	4620      	mov	r0, r4
   d8484:	4a03      	ldr	r2, [pc, #12]	; (d8494 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8486:	4904      	ldr	r1, [pc, #16]	; (d8498 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d848c:	f001 be88 	b.w	da1a0 <__aeabi_atexit>
   d8490:	2003e258 	.word	0x2003e258
   d8494:	2003dea8 	.word	0x2003dea8
   d8498:	000d841f 	.word	0x000d841f

000d849c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d849c:	2200      	movs	r2, #0
   d849e:	4611      	mov	r1, r2
   d84a0:	6840      	ldr	r0, [r0, #4]
   d84a2:	f7ff bf1d 	b.w	d82e0 <network_ready>

000d84a6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84a6:	2200      	movs	r2, #0
   d84a8:	4611      	mov	r1, r2
   d84aa:	6840      	ldr	r0, [r0, #4]
   d84ac:	f7ff bf38 	b.w	d8320 <network_listening>

000d84b0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d84b0:	2200      	movs	r2, #0
   d84b2:	4611      	mov	r1, r2
   d84b4:	6840      	ldr	r0, [r0, #4]
   d84b6:	f7ff bf43 	b.w	d8340 <network_get_listen_timeout>

000d84ba <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d84ba:	2200      	movs	r2, #0
   d84bc:	6840      	ldr	r0, [r0, #4]
   d84be:	f7ff bf37 	b.w	d8330 <network_set_listen_timeout>

000d84c2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d84c2:	2200      	movs	r2, #0
   d84c4:	f081 0101 	eor.w	r1, r1, #1
   d84c8:	6840      	ldr	r0, [r0, #4]
   d84ca:	f7ff bf21 	b.w	d8310 <network_listen>

000d84ce <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d84ce:	2300      	movs	r3, #0
   d84d0:	461a      	mov	r2, r3
   d84d2:	4619      	mov	r1, r3
   d84d4:	6840      	ldr	r0, [r0, #4]
   d84d6:	f7ff bf13 	b.w	d8300 <network_off>

000d84da <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d84da:	2300      	movs	r3, #0
   d84dc:	461a      	mov	r2, r3
   d84de:	4619      	mov	r1, r3
   d84e0:	6840      	ldr	r0, [r0, #4]
   d84e2:	f7ff bf05 	b.w	d82f0 <network_on>

000d84e6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d84e6:	2200      	movs	r2, #0
   d84e8:	4611      	mov	r1, r2
   d84ea:	6840      	ldr	r0, [r0, #4]
   d84ec:	f7ff bee8 	b.w	d82c0 <network_connecting>

000d84f0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d84f0:	2200      	movs	r2, #0
   d84f2:	2102      	movs	r1, #2
   d84f4:	6840      	ldr	r0, [r0, #4]
   d84f6:	f7ff beeb 	b.w	d82d0 <network_disconnect>

000d84fa <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d84fa:	2300      	movs	r3, #0
   d84fc:	461a      	mov	r2, r3
   d84fe:	6840      	ldr	r0, [r0, #4]
   d8500:	f7ff bed6 	b.w	d82b0 <network_connect>

000d8504 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8504:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d8506:	4b1b      	ldr	r3, [pc, #108]	; (d8574 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8508:	6003      	str	r3, [r0, #0]
   d850a:	2500      	movs	r5, #0
   d850c:	460f      	mov	r7, r1
   d850e:	3328      	adds	r3, #40	; 0x28
   d8510:	2618      	movs	r6, #24
   d8512:	b089      	sub	sp, #36	; 0x24
   d8514:	6043      	str	r3, [r0, #4]
   d8516:	6085      	str	r5, [r0, #8]
   d8518:	60c5      	str	r5, [r0, #12]
   d851a:	4632      	mov	r2, r6
   d851c:	4629      	mov	r1, r5
   d851e:	4604      	mov	r4, r0
   d8520:	3010      	adds	r0, #16
   d8522:	f002 fec3 	bl	db2ac <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8526:	462a      	mov	r2, r5
   d8528:	4629      	mov	r1, r5
   d852a:	6878      	ldr	r0, [r7, #4]
   d852c:	f7ff fed8 	bl	d82e0 <network_ready>
   d8530:	b908      	cbnz	r0, d8536 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d8532:	60a0      	str	r0, [r4, #8]
            return sig;
   d8534:	e01b      	b.n	d856e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d8536:	4629      	mov	r1, r5
   d8538:	4632      	mov	r2, r6
   d853a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d853c:	9500      	str	r5, [sp, #0]
   d853e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d8540:	f002 feb4 	bl	db2ac <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8544:	a902      	add	r1, sp, #8
   d8546:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d8548:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d854c:	f7ff fb70 	bl	d7c30 <cellular_signal>
   d8550:	b110      	cbz	r0, d8558 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d8552:	2301      	movs	r3, #1
   d8554:	60a3      	str	r3, [r4, #8]
            return sig;
   d8556:	e00a      	b.n	d856e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d8558:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d855a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d855c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d855e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8560:	b90b      	cbnz	r3, d8566 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d8562:	2302      	movs	r3, #2
   d8564:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d8566:	a902      	add	r1, sp, #8
   d8568:	4620      	mov	r0, r4
   d856a:	f000 f889 	bl	d8680 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d856e:	4620      	mov	r0, r4
   d8570:	b009      	add	sp, #36	; 0x24
   d8572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8574:	000dd6e8 	.word	0x000dd6e8

000d8578 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8578:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d857a:	4c08      	ldr	r4, [pc, #32]	; (d859c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d857c:	2528      	movs	r5, #40	; 0x28
   d857e:	462a      	mov	r2, r5
   d8580:	2100      	movs	r1, #0
   d8582:	4620      	mov	r0, r4
   d8584:	f002 fe92 	bl	db2ac <memset>
        cid = -1;
   d8588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d858c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d858e:	4b04      	ldr	r3, [pc, #16]	; (d85a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8590:	8025      	strh	r5, [r4, #0]
   d8592:	2204      	movs	r2, #4
   d8594:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8596:	4a03      	ldr	r2, [pc, #12]	; (d85a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8598:	601a      	str	r2, [r3, #0]
   d859a:	bd38      	pop	{r3, r4, r5, pc}
   d859c:	2003e264 	.word	0x2003e264
   d85a0:	2003e25c 	.word	0x2003e25c
   d85a4:	000dd6b4 	.word	0x000dd6b4

000d85a8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d85a8:	4770      	bx	lr

000d85aa <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d85aa:	7d00      	ldrb	r0, [r0, #20]
   d85ac:	4770      	bx	lr
	...

000d85b0 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d85b0:	7d03      	ldrb	r3, [r0, #20]
   d85b2:	b11b      	cbz	r3, d85bc <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d85b4:	6983      	ldr	r3, [r0, #24]
   d85b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85ba:	d102      	bne.n	d85c2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d85bc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d85d4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d85c0:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d85c2:	ee07 3a90 	vmov	s15, r3
   d85c6:	ed9f 7a04 	vldr	s14, [pc, #16]	; d85d8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d85ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d85d2:	4770      	bx	lr
   d85d4:	00000000 	.word	0x00000000
   d85d8:	42c80000 	.word	0x42c80000

000d85dc <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d85dc:	7d03      	ldrb	r3, [r0, #20]
   d85de:	b11b      	cbz	r3, d85e8 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d85e0:	6a03      	ldr	r3, [r0, #32]
   d85e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85e6:	d102      	bne.n	d85ee <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d85e8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8600 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d85ec:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d85ee:	ee07 3a90 	vmov	s15, r3
   d85f2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8604 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d85f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d85fe:	4770      	bx	lr
   d8600:	00000000 	.word	0x00000000
   d8604:	42c80000 	.word	0x42c80000

000d8608 <_ZN14CellularSignalD0Ev>:
   d8608:	b510      	push	{r4, lr}
   d860a:	2128      	movs	r1, #40	; 0x28
   d860c:	4604      	mov	r4, r0
   d860e:	f001 fdcc 	bl	da1aa <_ZdlPvj>
   d8612:	4620      	mov	r0, r4
   d8614:	bd10      	pop	{r4, pc}
	...

000d8618 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8618:	7d03      	ldrb	r3, [r0, #20]
   d861a:	b17b      	cbz	r3, d863c <_ZNK14CellularSignal10getQualityEv+0x24>
   d861c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d861e:	2b00      	cmp	r3, #0
   d8620:	db0c      	blt.n	d863c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8622:	ee07 3a90 	vmov	s15, r3
   d8626:	eddf 6a07 	vldr	s13, [pc, #28]	; d8644 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d862a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8648 <_ZNK14CellularSignal10getQualityEv+0x30>
   d862e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8632:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8636:	ee27 0a80 	vmul.f32	s0, s15, s0
   d863a:	4770      	bx	lr
    }

    return -1.0f;
   d863c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8640:	4770      	bx	lr
   d8642:	bf00      	nop
   d8644:	477fff00 	.word	0x477fff00
   d8648:	42c80000 	.word	0x42c80000

000d864c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d864c:	7d03      	ldrb	r3, [r0, #20]
   d864e:	b17b      	cbz	r3, d8670 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8650:	69c3      	ldr	r3, [r0, #28]
   d8652:	2b00      	cmp	r3, #0
   d8654:	db0c      	blt.n	d8670 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8656:	ee07 3a90 	vmov	s15, r3
   d865a:	eddf 6a07 	vldr	s13, [pc, #28]	; d8678 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d865e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d867c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8666:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d866a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d866e:	4770      	bx	lr
    }

    return -1.0f;
   d8670:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8674:	4770      	bx	lr
   d8676:	bf00      	nop
   d8678:	477fff00 	.word	0x477fff00
   d867c:	42c80000 	.word	0x42c80000

000d8680 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d8680:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8682:	460d      	mov	r5, r1
   d8684:	f100 0410 	add.w	r4, r0, #16
   d8688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d868a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d868c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8690:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d8694:	2001      	movs	r0, #1
   d8696:	bd30      	pop	{r4, r5, pc}

000d8698 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d869c:	4607      	mov	r7, r0
   d869e:	460c      	mov	r4, r1
{
    if (base == 0) {
   d86a0:	4615      	mov	r5, r2
   d86a2:	b92a      	cbnz	r2, d86b0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d86a4:	6803      	ldr	r3, [r0, #0]
   d86a6:	b2c9      	uxtb	r1, r1
   d86a8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d86aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d86ae:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d86b0:	2900      	cmp	r1, #0
   d86b2:	da07      	bge.n	d86c4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d86b4:	2a0a      	cmp	r2, #10
   d86b6:	d105      	bne.n	d86c4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d86b8:	212d      	movs	r1, #45	; 0x2d
   d86ba:	f000 fe19 	bl	d92f0 <_ZN5Print5printEc>
            val = -n;
   d86be:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d86c0:	4606      	mov	r6, r0
            val = -n;
   d86c2:	e001      	b.n	d86c8 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d86c4:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d86c6:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d86c8:	b2ea      	uxtb	r2, r5
   d86ca:	4638      	mov	r0, r7
   d86cc:	f000 fe29 	bl	d9322 <_ZN5Print11printNumberEmh>
    }
}
   d86d0:	4430      	add	r0, r6
   d86d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d86d6 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d86d6:	b570      	push	{r4, r5, r6, lr}
   d86d8:	460d      	mov	r5, r1
   d86da:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d86dc:	220a      	movs	r2, #10
   d86de:	6881      	ldr	r1, [r0, #8]
   d86e0:	4628      	mov	r0, r5
   d86e2:	f7ff ffd9 	bl	d8698 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d86e6:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d86e8:	4604      	mov	r4, r0
    n += p.print(',');
   d86ea:	4628      	mov	r0, r5
   d86ec:	f000 fe00 	bl	d92f0 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d86f0:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d86f2:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d86f4:	68f1      	ldr	r1, [r6, #12]
   d86f6:	4628      	mov	r0, r5
   d86f8:	f7ff ffce 	bl	d8698 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d86fc:	4420      	add	r0, r4
   d86fe:	bd70      	pop	{r4, r5, r6, pc}

000d8700 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8700:	f1a0 0004 	sub.w	r0, r0, #4
   d8704:	f7ff bfe7 	b.w	d86d6 <_ZNK14CellularSignal7printToER5Print>

000d8708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8708:	4770      	bx	lr

000d870a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d870a:	2000      	movs	r0, #0
   d870c:	4770      	bx	lr

000d870e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d870e:	b510      	push	{r4, lr}
   d8710:	2110      	movs	r1, #16
   d8712:	4604      	mov	r4, r0
   d8714:	f001 fd49 	bl	da1aa <_ZdlPvj>
   d8718:	4620      	mov	r0, r4
   d871a:	bd10      	pop	{r4, pc}

000d871c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d871c:	b508      	push	{r3, lr}
      { delete this; }
   d871e:	b108      	cbz	r0, d8724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d8720:	f7ff fff5 	bl	d870e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8724:	bd08      	pop	{r3, pc}

000d8726 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8726:	2200      	movs	r2, #0
   d8728:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d872a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d872c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d8730:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8732:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d8736:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8738:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d873a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d873c:	680c      	ldr	r4, [r1, #0]
   d873e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8740:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d8742:	bd10      	pop	{r4, pc}

000d8744 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8744:	b510      	push	{r4, lr}
   d8746:	4604      	mov	r4, r0
    free((void*)msg_);
   d8748:	6800      	ldr	r0, [r0, #0]
   d874a:	f7ff fe09 	bl	d8360 <free>
}
   d874e:	4620      	mov	r0, r4
   d8750:	bd10      	pop	{r4, pc}

000d8752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d8752:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8754:	68c4      	ldr	r4, [r0, #12]
   d8756:	b1f4      	cbz	r4, d8796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8758:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d875a:	2b02      	cmp	r3, #2
   d875c:	d103      	bne.n	d8766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d875e:	f104 000c 	add.w	r0, r4, #12
   d8762:	f7ff ffef 	bl	d8744 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d8766:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d8768:	b135      	cbz	r5, d8778 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d876a:	4628      	mov	r0, r5
   d876c:	f7fe f973 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
   d8770:	2110      	movs	r1, #16
   d8772:	4628      	mov	r0, r5
   d8774:	f001 fd19 	bl	da1aa <_ZdlPvj>
   d8778:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d877a:	b135      	cbz	r5, d878a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d877c:	4628      	mov	r0, r5
   d877e:	f7fe f96a 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
   d8782:	2110      	movs	r1, #16
   d8784:	4628      	mov	r0, r5
   d8786:	f001 fd10 	bl	da1aa <_ZdlPvj>
   d878a:	4620      	mov	r0, r4
   d878c:	2114      	movs	r1, #20
   d878e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8792:	f001 bd0a 	b.w	da1aa <_ZdlPvj>
   d8796:	bd38      	pop	{r3, r4, r5, pc}

000d8798 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8798:	b510      	push	{r4, lr}
   d879a:	b088      	sub	sp, #32
   d879c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d879e:	4668      	mov	r0, sp
   d87a0:	f000 fff2 	bl	d9788 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d87a4:	4669      	mov	r1, sp
   d87a6:	a804      	add	r0, sp, #16
   d87a8:	f001 f810 	bl	d97cc <_ZN6StringC1ERKS_>
   d87ac:	a804      	add	r0, sp, #16
   d87ae:	47a0      	blx	r4
   d87b0:	4604      	mov	r4, r0
   d87b2:	a804      	add	r0, sp, #16
   d87b4:	f000 ffa1 	bl	d96fa <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d87b8:	4668      	mov	r0, sp
   d87ba:	f000 ff9e 	bl	d96fa <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d87be:	4620      	mov	r0, r4
   d87c0:	b008      	add	sp, #32
   d87c2:	bd10      	pop	{r4, pc}

000d87c4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d87c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d87c6:	2410      	movs	r4, #16
   d87c8:	b085      	sub	sp, #20
   d87ca:	4607      	mov	r7, r0
   d87cc:	460e      	mov	r6, r1
   d87ce:	4615      	mov	r5, r2
   d87d0:	2100      	movs	r1, #0
   d87d2:	4622      	mov	r2, r4
   d87d4:	4668      	mov	r0, sp
   d87d6:	f002 fd69 	bl	db2ac <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d87da:	2200      	movs	r2, #0
   d87dc:	4669      	mov	r1, sp
   d87de:	4610      	mov	r0, r2
         size = sizeof(*this);
   d87e0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d87e4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d87e6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d87e8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d87ea:	f7ff fd01 	bl	d81f0 <spark_function>
}
   d87ee:	b005      	add	sp, #20
   d87f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d87f2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d87f2:	b513      	push	{r0, r1, r4, lr}
   d87f4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d87f6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d87fa:	2300      	movs	r3, #0
   d87fc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d87fe:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8800:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8802:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8804:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8806:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8808:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d880a:	f7ff fe27 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d880e:	4620      	mov	r0, r4
   d8810:	b002      	add	sp, #8
   d8812:	bd10      	pop	{r4, pc}

000d8814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8816:	460c      	mov	r4, r1
   d8818:	ad02      	add	r5, sp, #8
   d881a:	f854 3b04 	ldr.w	r3, [r4], #4
   d881e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8822:	4606      	mov	r6, r0
   d8824:	460f      	mov	r7, r1
   d8826:	a801      	add	r0, sp, #4
   d8828:	4621      	mov	r1, r4
   d882a:	f7ff fe10 	bl	d844e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d882e:	4629      	mov	r1, r5
   d8830:	4630      	mov	r0, r6
   d8832:	f7ff ffde 	bl	d87f2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8836:	a801      	add	r0, sp, #4
   d8838:	f7ff fe10 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d883c:	4620      	mov	r0, r4
   d883e:	f7ff fe0d 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d8842:	4638      	mov	r0, r7
   d8844:	2108      	movs	r1, #8
   d8846:	f001 fcb0 	bl	da1aa <_ZdlPvj>
        return p;
    }
   d884a:	4630      	mov	r0, r6
   d884c:	b003      	add	sp, #12
   d884e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8850:	b538      	push	{r3, r4, r5, lr}
   d8852:	2300      	movs	r3, #0
   d8854:	4604      	mov	r4, r0
   d8856:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8858:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d885a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d885c:	f7fb fc1d 	bl	d409a <_Znwj>
   d8860:	b128      	cbz	r0, d886e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8862:	2301      	movs	r3, #1
   d8864:	6043      	str	r3, [r0, #4]
   d8866:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8868:	4b02      	ldr	r3, [pc, #8]	; (d8874 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d886a:	6003      	str	r3, [r0, #0]
   d886c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d886e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d8870:	4620      	mov	r0, r4
   d8872:	bd38      	pop	{r3, r4, r5, pc}
   d8874:	000dd71c 	.word	0x000dd71c

000d8878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8878:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d887a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d887c:	b90a      	cbnz	r2, d8882 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d887e:	f001 fcb0 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8882:	68c3      	ldr	r3, [r0, #12]
    }
   d8884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8888:	4718      	bx	r3

000d888a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d888a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d888c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d888e:	f100 0110 	add.w	r1, r0, #16
   d8892:	f7ff fff1 	bl	d8878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8896:	bd08      	pop	{r3, pc}

000d8898 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8898:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d889a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d889c:	b90a      	cbnz	r2, d88a2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d889e:	f001 fca0 	bl	da1e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88a2:	68c3      	ldr	r3, [r0, #12]
    }
   d88a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88a8:	4718      	bx	r3

000d88aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d88aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d88ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d88ae:	f100 0110 	add.w	r1, r0, #16
   d88b2:	f7ff fff1 	bl	d8898 <_ZNKSt8functionIFvRKbEEclES1_>
   d88b6:	bd08      	pop	{r3, pc}

000d88b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d88b8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d88ba:	2300      	movs	r3, #0
   d88bc:	6083      	str	r3, [r0, #8]
   d88be:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d88c0:	4604      	mov	r4, r0
   d88c2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d88c4:	b12b      	cbz	r3, d88d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d88c6:	2202      	movs	r2, #2
   d88c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d88ca:	68eb      	ldr	r3, [r5, #12]
   d88cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d88ce:	68ab      	ldr	r3, [r5, #8]
   d88d0:	60a3      	str	r3, [r4, #8]
	}
    }
   d88d2:	4620      	mov	r0, r4
   d88d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d88d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d88da:	b089      	sub	sp, #36	; 0x24
   d88dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d88de:	4668      	mov	r0, sp
   d88e0:	f7ff ff21 	bl	d8726 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d88e4:	2300      	movs	r3, #0
   d88e6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d88ea:	f04f 0202 	mov.w	r2, #2
   d88ee:	e8d4 3f4f 	ldrexb	r3, [r4]
   d88f2:	2b00      	cmp	r3, #0
   d88f4:	d103      	bne.n	d88fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d88f6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d88fa:	2900      	cmp	r1, #0
   d88fc:	d1f7      	bne.n	d88ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d88fe:	d002      	beq.n	d8906 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8900:	f88d 3008 	strb.w	r3, [sp, #8]
   d8904:	e063      	b.n	d89ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d8906:	f114 050c 	adds.w	r5, r4, #12
   d890a:	d003      	beq.n	d8914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d890c:	4669      	mov	r1, sp
   d890e:	4628      	mov	r0, r5
   d8910:	f7ff ff09 	bl	d8726 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8914:	f3bf 8f5f 	dmb	sy
   d8918:	2301      	movs	r3, #1
   d891a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d891c:	2000      	movs	r0, #0
   d891e:	f104 0308 	add.w	r3, r4, #8
   d8922:	f3bf 8f5f 	dmb	sy
   d8926:	e853 6f00 	ldrex	r6, [r3]
   d892a:	e843 0200 	strex	r2, r0, [r3]
   d892e:	2a00      	cmp	r2, #0
   d8930:	d1f9      	bne.n	d8926 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d8932:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8936:	2e00      	cmp	r6, #0
   d8938:	d049      	beq.n	d89ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d893a:	f7ff fc13 	bl	d8164 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d893e:	b120      	cbz	r0, d894a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8940:	4629      	mov	r1, r5
   d8942:	4630      	mov	r0, r6
   d8944:	f7ff ff98 	bl	d8878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8948:	e03a      	b.n	d89c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d894a:	4631      	mov	r1, r6
   d894c:	a802      	add	r0, sp, #8
   d894e:	f7ff ffb3 	bl	d88b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8952:	68e0      	ldr	r0, [r4, #12]
   d8954:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8958:	b108      	cbz	r0, d895e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d895a:	f002 ff37 	bl	db7cc <strdup>
   d895e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8960:	2010      	movs	r0, #16
   d8962:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8966:	f7fb fb98 	bl	d409a <_Znwj>
   d896a:	4605      	mov	r5, r0
   d896c:	b1e8      	cbz	r0, d89aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d896e:	2700      	movs	r7, #0
   d8970:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8972:	2018      	movs	r0, #24
   d8974:	f7fb fb91 	bl	d409a <_Znwj>
   d8978:	4604      	mov	r4, r0
   d897a:	b188      	cbz	r0, d89a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d897c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d897e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8980:	a802      	add	r0, sp, #8
   d8982:	f7ff f899 	bl	d7ab8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8986:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8988:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d898a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d898c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d898e:	9204      	str	r2, [sp, #16]
   d8990:	a906      	add	r1, sp, #24
   d8992:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8994:	60e3      	str	r3, [r4, #12]
   d8996:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d899a:	9205      	str	r2, [sp, #20]
   d899c:	f7ff fec3 	bl	d8726 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d89a0:	4b0d      	ldr	r3, [pc, #52]	; (d89d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d89a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d89a4:	4b0d      	ldr	r3, [pc, #52]	; (d89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d89a6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d89a8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d89aa:	a806      	add	r0, sp, #24
   d89ac:	f7ff feca 	bl	d8744 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d89b0:	a802      	add	r0, sp, #8
   d89b2:	f7fe f850 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d89b6:	2200      	movs	r2, #0
   d89b8:	4629      	mov	r1, r5
   d89ba:	4809      	ldr	r0, [pc, #36]	; (d89e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d89bc:	f7ff fbda 	bl	d8174 <application_thread_invoke>
   d89c0:	4630      	mov	r0, r6
   d89c2:	f7fe f848 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d89c6:	2110      	movs	r1, #16
   d89c8:	4630      	mov	r0, r6
   d89ca:	f001 fbee 	bl	da1aa <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d89ce:	4668      	mov	r0, sp
   d89d0:	f7ff feb8 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    }
   d89d4:	b009      	add	sp, #36	; 0x24
   d89d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d89d8:	000d888b 	.word	0x000d888b
   d89dc:	000d8b01 	.word	0x000d8b01
   d89e0:	000d83f7 	.word	0x000d83f7

000d89e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d89e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d89e8:	b08b      	sub	sp, #44	; 0x2c
   d89ea:	4606      	mov	r6, r0
   d89ec:	460f      	mov	r7, r1
   d89ee:	4690      	mov	r8, r2
   d89f0:	4699      	mov	r9, r3
   d89f2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d89f6:	f7ff fc1b 	bl	d8230 <spark_cloud_flag_connected>
   d89fa:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d89fc:	4683      	mov	fp, r0
   d89fe:	bb30      	cbnz	r0, d8a4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8a00:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8a04:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a06:	a905      	add	r1, sp, #20
   d8a08:	4628      	mov	r0, r5
   d8a0a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a0e:	f7ff fe8a 	bl	d8726 <_ZN8particle5ErrorC1EOS0_>
   d8a12:	2014      	movs	r0, #20
   d8a14:	f7fb fb41 	bl	d409a <_Znwj>
   d8a18:	4604      	mov	r4, r0
   d8a1a:	b158      	cbz	r0, d8a34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8a1c:	2302      	movs	r3, #2
   d8a1e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8a20:	2301      	movs	r3, #1
   d8a22:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8a24:	f8c0 b004 	str.w	fp, [r0, #4]
   d8a28:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8a2c:	4629      	mov	r1, r5
   d8a2e:	300c      	adds	r0, #12
   d8a30:	f7ff fe79 	bl	d8726 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d8a34:	4630      	mov	r0, r6
   d8a36:	4621      	mov	r1, r4
   d8a38:	f840 4b04 	str.w	r4, [r0], #4
   d8a3c:	f7ff ff08 	bl	d8850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a40:	4628      	mov	r0, r5
   d8a42:	f7ff fe7f 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8a46:	a805      	add	r0, sp, #20
   d8a48:	f7ff fe7c 	bl	d8744 <_ZN8particle5ErrorD1Ev>
   d8a4c:	e052      	b.n	d8af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8a4e:	2400      	movs	r4, #0
   d8a50:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8a52:	2014      	movs	r0, #20
   d8a54:	606c      	str	r4, [r5, #4]
   d8a56:	60ac      	str	r4, [r5, #8]
   d8a58:	9307      	str	r3, [sp, #28]
   d8a5a:	f7fb fb1e 	bl	d409a <_Znwj>
   d8a5e:	4601      	mov	r1, r0
   d8a60:	b118      	cbz	r0, d8a6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d8a62:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8a64:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8a66:	6044      	str	r4, [r0, #4]
   d8a68:	6084      	str	r4, [r0, #8]
   d8a6a:	a804      	add	r0, sp, #16
   d8a6c:	9103      	str	r1, [sp, #12]
   d8a6e:	f7ff feef 	bl	d8850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d8a72:	4b22      	ldr	r3, [pc, #136]	; (d8afc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d8a74:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8a76:	2008      	movs	r0, #8
   d8a78:	f7fb fb0f 	bl	d409a <_Znwj>
   d8a7c:	4604      	mov	r4, r0
   d8a7e:	b128      	cbz	r0, d8a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a80:	9b03      	ldr	r3, [sp, #12]
   d8a82:	f840 3b04 	str.w	r3, [r0], #4
   d8a86:	a904      	add	r1, sp, #16
   d8a88:	f7ff fce1 	bl	d844e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a8c:	9500      	str	r5, [sp, #0]
   d8a8e:	fa5f f38a 	uxtb.w	r3, sl
   d8a92:	464a      	mov	r2, r9
   d8a94:	4641      	mov	r1, r8
   d8a96:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d8a98:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a9a:	f7ff fbd9 	bl	d8250 <spark_send_event>
   d8a9e:	b920      	cbnz	r0, d8aaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8aa0:	9b03      	ldr	r3, [sp, #12]
   d8aa2:	785b      	ldrb	r3, [r3, #1]
   d8aa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8aa8:	b183      	cbz	r3, d8acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d8aaa:	9b03      	ldr	r3, [sp, #12]
   d8aac:	9305      	str	r3, [sp, #20]
   d8aae:	a904      	add	r1, sp, #16
   d8ab0:	a806      	add	r0, sp, #24
   d8ab2:	f7ff fccc 	bl	d844e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d8ab6:	a905      	add	r1, sp, #20
   d8ab8:	4630      	mov	r0, r6
   d8aba:	f7ff fe9a 	bl	d87f2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8abe:	a806      	add	r0, sp, #24
   d8ac0:	f7ff fccc 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8ac4:	a804      	add	r0, sp, #16
   d8ac6:	f7ff fcc9 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8aca:	e013      	b.n	d8af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d8acc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8ad0:	a905      	add	r1, sp, #20
   d8ad2:	a803      	add	r0, sp, #12
   d8ad4:	9205      	str	r2, [sp, #20]
   d8ad6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8ada:	f7ff fefd 	bl	d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8ade:	a805      	add	r0, sp, #20
   d8ae0:	f7ff fe30 	bl	d8744 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8ae4:	a805      	add	r0, sp, #20
   d8ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8ae8:	f7ff fe94 	bl	d8814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8aec:	a806      	add	r0, sp, #24
   d8aee:	f7ff fcb5 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8af2:	e7da      	b.n	d8aaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d8af4:	4630      	mov	r0, r6
   d8af6:	b00b      	add	sp, #44	; 0x2c
   d8af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8afc:	000d8c71 	.word	0x000d8c71

000d8b00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b00:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b04:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b06:	d006      	beq.n	d8b16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d8b08:	2a03      	cmp	r2, #3
   d8b0a:	d017      	beq.n	d8b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8b0c:	2a01      	cmp	r2, #1
   d8b0e:	d122      	bne.n	d8b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8b10:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b12:	6003      	str	r3, [r0, #0]
	      break;
   d8b14:	e01f      	b.n	d8b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b16:	2018      	movs	r0, #24
   d8b18:	680e      	ldr	r6, [r1, #0]
   d8b1a:	f7fb fabe 	bl	d409a <_Znwj>
   d8b1e:	4605      	mov	r5, r0
   d8b20:	b150      	cbz	r0, d8b38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8b22:	4631      	mov	r1, r6
   d8b24:	f7ff fec8 	bl	d88b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8b28:	6930      	ldr	r0, [r6, #16]
   d8b2a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8b2e:	b108      	cbz	r0, d8b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8b30:	f002 fe4c 	bl	db7cc <strdup>
   d8b34:	6128      	str	r0, [r5, #16]
   d8b36:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b38:	6025      	str	r5, [r4, #0]
   d8b3a:	e00c      	b.n	d8b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8b3c:	6804      	ldr	r4, [r0, #0]
   d8b3e:	b154      	cbz	r4, d8b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8b40:	f104 0010 	add.w	r0, r4, #16
   d8b44:	f7ff fdfe 	bl	d8744 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8b48:	4620      	mov	r0, r4
   d8b4a:	f7fd ff84 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8b4e:	2118      	movs	r1, #24
   d8b50:	4620      	mov	r0, r4
   d8b52:	f001 fb2a 	bl	da1aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8b56:	2000      	movs	r0, #0
   d8b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8b5a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8b5a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8b5c:	2300      	movs	r3, #0
   d8b5e:	6083      	str	r3, [r0, #8]
   d8b60:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8b62:	4604      	mov	r4, r0
   d8b64:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8b66:	b12b      	cbz	r3, d8b74 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8b68:	2202      	movs	r2, #2
   d8b6a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8b6c:	68eb      	ldr	r3, [r5, #12]
   d8b6e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8b70:	68ab      	ldr	r3, [r5, #8]
   d8b72:	60a3      	str	r3, [r4, #8]
	}
    }
   d8b74:	4620      	mov	r0, r4
   d8b76:	bd38      	pop	{r3, r4, r5, pc}

000d8b78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b7a:	b570      	push	{r4, r5, r6, lr}
   d8b7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b7e:	d006      	beq.n	d8b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8b80:	2a03      	cmp	r2, #3
   d8b82:	d011      	beq.n	d8ba8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8b84:	2a01      	cmp	r2, #1
   d8b86:	d118      	bne.n	d8bba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8b88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b8a:	6003      	str	r3, [r0, #0]
	      break;
   d8b8c:	e015      	b.n	d8bba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b8e:	2014      	movs	r0, #20
   d8b90:	680e      	ldr	r6, [r1, #0]
   d8b92:	f7fb fa82 	bl	d409a <_Znwj>
   d8b96:	4605      	mov	r5, r0
   d8b98:	b120      	cbz	r0, d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8b9a:	4631      	mov	r1, r6
   d8b9c:	f7ff ffdd 	bl	d8b5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8ba0:	7c33      	ldrb	r3, [r6, #16]
   d8ba2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8ba4:	6025      	str	r5, [r4, #0]
   d8ba6:	e008      	b.n	d8bba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8ba8:	6804      	ldr	r4, [r0, #0]
   d8baa:	b134      	cbz	r4, d8bba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8bac:	4620      	mov	r0, r4
   d8bae:	f7fd ff52 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8bb2:	2114      	movs	r1, #20
   d8bb4:	4620      	mov	r0, r4
   d8bb6:	f001 faf8 	bl	da1aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8bba:	2000      	movs	r0, #0
   d8bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8bc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8bc0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8bc2:	2300      	movs	r3, #0
   d8bc4:	b087      	sub	sp, #28
   d8bc6:	460c      	mov	r4, r1
   d8bc8:	f3bf 8f5f 	dmb	sy
   d8bcc:	e850 6f00 	ldrex	r6, [r0]
   d8bd0:	e840 3200 	strex	r2, r3, [r0]
   d8bd4:	2a00      	cmp	r2, #0
   d8bd6:	d1f9      	bne.n	d8bcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8bd8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8bdc:	2e00      	cmp	r6, #0
   d8bde:	d03f      	beq.n	d8c60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8be0:	4618      	mov	r0, r3
   d8be2:	f7ff fabf 	bl	d8164 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8be6:	4607      	mov	r7, r0
   d8be8:	b120      	cbz	r0, d8bf4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8bea:	4621      	mov	r1, r4
   d8bec:	4630      	mov	r0, r6
   d8bee:	f7ff fe53 	bl	d8898 <_ZNKSt8functionIFvRKbEEclES1_>
   d8bf2:	e02e      	b.n	d8c52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8bf4:	4631      	mov	r1, r6
   d8bf6:	a801      	add	r0, sp, #4
   d8bf8:	f7ff ffaf 	bl	d8b5a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8bfc:	7823      	ldrb	r3, [r4, #0]
   d8bfe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8c02:	2010      	movs	r0, #16
   d8c04:	f7fb fa49 	bl	d409a <_Znwj>
   d8c08:	4605      	mov	r5, r0
   d8c0a:	b1d0      	cbz	r0, d8c42 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8c0c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c0e:	2014      	movs	r0, #20
   d8c10:	f7fb fa43 	bl	d409a <_Znwj>
   d8c14:	4604      	mov	r4, r0
   d8c16:	b178      	cbz	r0, d8c38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8c18:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8c1a:	4601      	mov	r1, r0
   d8c1c:	a801      	add	r0, sp, #4
   d8c1e:	f7fe ff4b 	bl	d7ab8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c22:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8c24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c26:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8c2a:	9203      	str	r2, [sp, #12]
   d8c2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c2e:	60e3      	str	r3, [r4, #12]
   d8c30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8c34:	9204      	str	r2, [sp, #16]
   d8c36:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8c38:	4b0a      	ldr	r3, [pc, #40]	; (d8c64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8c3a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8c3c:	4b0a      	ldr	r3, [pc, #40]	; (d8c68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c3e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8c40:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8c42:	a801      	add	r0, sp, #4
   d8c44:	f7fd ff07 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8c48:	2200      	movs	r2, #0
   d8c4a:	4629      	mov	r1, r5
   d8c4c:	4807      	ldr	r0, [pc, #28]	; (d8c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8c4e:	f7ff fa91 	bl	d8174 <application_thread_invoke>
   d8c52:	4630      	mov	r0, r6
   d8c54:	f7fd feff 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8c58:	2110      	movs	r1, #16
   d8c5a:	4630      	mov	r0, r6
   d8c5c:	f001 faa5 	bl	da1aa <_ZdlPvj>
        }
    }
   d8c60:	b007      	add	sp, #28
   d8c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c64:	000d88ab 	.word	0x000d88ab
   d8c68:	000d8b79 	.word	0x000d8b79
   d8c6c:	000d83f7 	.word	0x000d83f7

000d8c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8c70:	b530      	push	{r4, r5, lr}
   d8c72:	b085      	sub	sp, #20
   d8c74:	4604      	mov	r4, r0
   d8c76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8c78:	4668      	mov	r0, sp
   d8c7a:	4611      	mov	r1, r2
   d8c7c:	f7ff fdca 	bl	d8814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8c80:	b17c      	cbz	r4, d8ca2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8c82:	b224      	sxth	r4, r4
   d8c84:	4628      	mov	r0, r5
   d8c86:	b10d      	cbz	r5, d8c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8c88:	f002 fda0 	bl	db7cc <strdup>
   d8c8c:	9002      	str	r0, [sp, #8]
   d8c8e:	a902      	add	r1, sp, #8
   d8c90:	4668      	mov	r0, sp
   d8c92:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8c96:	f7ff fe1f 	bl	d88d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8c9a:	a802      	add	r0, sp, #8
   d8c9c:	f7ff fd52 	bl	d8744 <_ZN8particle5ErrorD1Ev>
   d8ca0:	e01d      	b.n	d8cde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8ca2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8ca4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8ca8:	f04f 0201 	mov.w	r2, #1
   d8cac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8cb0:	42a3      	cmp	r3, r4
   d8cb2:	d103      	bne.n	d8cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8cb4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8cb8:	2900      	cmp	r1, #0
   d8cba:	d1f7      	bne.n	d8cac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8cbc:	d002      	beq.n	d8cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8cbe:	f88d 3008 	strb.w	r3, [sp, #8]
   d8cc2:	e00c      	b.n	d8cde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8cc4:	f110 010c 	adds.w	r1, r0, #12
   d8cc8:	f04f 0301 	mov.w	r3, #1
   d8ccc:	bf18      	it	ne
   d8cce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8cd0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8cd4:	3004      	adds	r0, #4
   d8cd6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8cda:	f7ff ff71 	bl	d8bc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8cde:	a801      	add	r0, sp, #4
   d8ce0:	f7ff fbbc 	bl	d845c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8ce4:	b005      	add	sp, #20
   d8ce6:	bd30      	pop	{r4, r5, pc}

000d8ce8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8ce8:	2200      	movs	r2, #0
   d8cea:	4611      	mov	r1, r2
   d8cec:	6840      	ldr	r0, [r0, #4]
   d8cee:	f7ff bb17 	b.w	d8320 <network_listening>

000d8cf2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8cf2:	2200      	movs	r2, #0
   d8cf4:	4611      	mov	r1, r2
   d8cf6:	6840      	ldr	r0, [r0, #4]
   d8cf8:	f7ff bb22 	b.w	d8340 <network_get_listen_timeout>

000d8cfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8cfc:	2200      	movs	r2, #0
   d8cfe:	6840      	ldr	r0, [r0, #4]
   d8d00:	f7ff bb16 	b.w	d8330 <network_set_listen_timeout>

000d8d04 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d04:	2200      	movs	r2, #0
   d8d06:	f081 0101 	eor.w	r1, r1, #1
   d8d0a:	6840      	ldr	r0, [r0, #4]
   d8d0c:	f7ff bb00 	b.w	d8310 <network_listen>

000d8d10 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8d10:	2300      	movs	r3, #0
   d8d12:	461a      	mov	r2, r3
   d8d14:	4619      	mov	r1, r3
   d8d16:	6840      	ldr	r0, [r0, #4]
   d8d18:	f7ff baf2 	b.w	d8300 <network_off>

000d8d1c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8d1c:	2300      	movs	r3, #0
   d8d1e:	461a      	mov	r2, r3
   d8d20:	4619      	mov	r1, r3
   d8d22:	6840      	ldr	r0, [r0, #4]
   d8d24:	f7ff bae4 	b.w	d82f0 <network_on>

000d8d28 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8d28:	2200      	movs	r2, #0
   d8d2a:	4611      	mov	r1, r2
   d8d2c:	6840      	ldr	r0, [r0, #4]
   d8d2e:	f7ff bad7 	b.w	d82e0 <network_ready>

000d8d32 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8d32:	2200      	movs	r2, #0
   d8d34:	4611      	mov	r1, r2
   d8d36:	6840      	ldr	r0, [r0, #4]
   d8d38:	f7ff bac2 	b.w	d82c0 <network_connecting>

000d8d3c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d3c:	2200      	movs	r2, #0
   d8d3e:	2102      	movs	r1, #2
   d8d40:	6840      	ldr	r0, [r0, #4]
   d8d42:	f7ff bac5 	b.w	d82d0 <network_disconnect>

000d8d46 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d46:	2300      	movs	r3, #0
   d8d48:	461a      	mov	r2, r3
   d8d4a:	6840      	ldr	r0, [r0, #4]
   d8d4c:	f7ff bab0 	b.w	d82b0 <network_connect>

000d8d50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8d50:	4b02      	ldr	r3, [pc, #8]	; (d8d5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8d52:	2203      	movs	r2, #3
   d8d54:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8d56:	4a02      	ldr	r2, [pc, #8]	; (d8d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8d58:	601a      	str	r2, [r3, #0]
   d8d5a:	4770      	bx	lr
   d8d5c:	2003e28c 	.word	0x2003e28c
   d8d60:	000dd738 	.word	0x000dd738

000d8d64 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8d64:	4770      	bx	lr

000d8d66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8d68:	4606      	mov	r6, r0
   d8d6a:	4615      	mov	r5, r2
   d8d6c:	460c      	mov	r4, r1
   d8d6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8d70:	42bc      	cmp	r4, r7
   d8d72:	d006      	beq.n	d8d82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8d74:	6833      	ldr	r3, [r6, #0]
   d8d76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8d7a:	689b      	ldr	r3, [r3, #8]
   d8d7c:	4630      	mov	r0, r6
   d8d7e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8d80:	e7f6      	b.n	d8d70 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8d82:	4628      	mov	r0, r5
   d8d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d86 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8d86:	2200      	movs	r2, #0
   d8d88:	7c00      	ldrb	r0, [r0, #16]
   d8d8a:	f7ff b889 	b.w	d7ea0 <HAL_I2C_Write_Data>

000d8d8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8d8e:	2100      	movs	r1, #0
   d8d90:	7c00      	ldrb	r0, [r0, #16]
   d8d92:	f7ff b88d 	b.w	d7eb0 <HAL_I2C_Available_Data>

000d8d96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8d96:	2100      	movs	r1, #0
   d8d98:	7c00      	ldrb	r0, [r0, #16]
   d8d9a:	f7ff b891 	b.w	d7ec0 <HAL_I2C_Read_Data>

000d8d9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8d9e:	2100      	movs	r1, #0
   d8da0:	7c00      	ldrb	r0, [r0, #16]
   d8da2:	f7ff b895 	b.w	d7ed0 <HAL_I2C_Peek_Data>

000d8da6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8da6:	2100      	movs	r1, #0
   d8da8:	7c00      	ldrb	r0, [r0, #16]
   d8daa:	f7ff b899 	b.w	d7ee0 <HAL_I2C_Flush_Data>

000d8dae <_ZN7TwoWireD0Ev>:
   d8dae:	b510      	push	{r4, lr}
   d8db0:	2114      	movs	r1, #20
   d8db2:	4604      	mov	r4, r0
   d8db4:	f001 f9f9 	bl	da1aa <_ZdlPvj>
   d8db8:	4620      	mov	r0, r4
   d8dba:	bd10      	pop	{r4, pc}

000d8dbc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8dbc:	b510      	push	{r4, lr}
   d8dbe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8dc0:	2300      	movs	r3, #0
   d8dc2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8dc8:	60a3      	str	r3, [r4, #8]
   d8dca:	4b04      	ldr	r3, [pc, #16]	; (d8ddc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8dcc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8dce:	4608      	mov	r0, r1
   d8dd0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8dd2:	4611      	mov	r1, r2
   d8dd4:	f7ff f894 	bl	d7f00 <HAL_I2C_Init>
}
   d8dd8:	4620      	mov	r0, r4
   d8dda:	bd10      	pop	{r4, pc}
   d8ddc:	000dd76c 	.word	0x000dd76c

000d8de0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8de0:	2300      	movs	r3, #0
   d8de2:	461a      	mov	r2, r3
   d8de4:	4619      	mov	r1, r3
   d8de6:	7c00      	ldrb	r0, [r0, #16]
   d8de8:	f7ff b842 	b.w	d7e70 <HAL_I2C_Begin>

000d8dec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8dec:	b570      	push	{r4, r5, r6, lr}
   d8dee:	460c      	mov	r4, r1
   d8df0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8df2:	2514      	movs	r5, #20
   d8df4:	4606      	mov	r6, r0
   d8df6:	462a      	mov	r2, r5
   d8df8:	2100      	movs	r1, #0
   d8dfa:	a801      	add	r0, sp, #4
   d8dfc:	f002 fa56 	bl	db2ac <memset>
   d8e00:	7823      	ldrb	r3, [r4, #0]
   d8e02:	f88d 3008 	strb.w	r3, [sp, #8]
   d8e06:	6863      	ldr	r3, [r4, #4]
   d8e08:	9303      	str	r3, [sp, #12]
   d8e0a:	68e3      	ldr	r3, [r4, #12]
   d8e0c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8e0e:	2200      	movs	r2, #0
   d8e10:	7a23      	ldrb	r3, [r4, #8]
   d8e12:	7c30      	ldrb	r0, [r6, #16]
   d8e14:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8e18:	a901      	add	r1, sp, #4
   d8e1a:	9305      	str	r3, [sp, #20]
   d8e1c:	f7ff f888 	bl	d7f30 <HAL_I2C_Request_Data_Ex>
}
   d8e20:	b006      	add	sp, #24
   d8e22:	bd70      	pop	{r4, r5, r6, pc}

000d8e24 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8e26:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e28:	f88d 1000 	strb.w	r1, [sp]
   d8e2c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8e30:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8e32:	bf18      	it	ne
   d8e34:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8e36:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8e38:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8e3a:	f88d 3008 	strb.w	r3, [sp, #8]
   d8e3e:	f7ff ffd5 	bl	d8dec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8e42:	b005      	add	sp, #20
   d8e44:	f85d fb04 	ldr.w	pc, [sp], #4

000d8e48 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8e48:	2200      	movs	r2, #0
   d8e4a:	7c00      	ldrb	r0, [r0, #16]
   d8e4c:	f7ff b818 	b.w	d7e80 <HAL_I2C_Begin_Transmission>

000d8e50 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8e50:	b2c9      	uxtb	r1, r1
   d8e52:	f7ff bff9 	b.w	d8e48 <_ZN7TwoWire17beginTransmissionEh>

000d8e56 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8e56:	2200      	movs	r2, #0
   d8e58:	7c00      	ldrb	r0, [r0, #16]
   d8e5a:	f7ff b819 	b.w	d7e90 <HAL_I2C_End_Transmission>

000d8e5e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8e5e:	2100      	movs	r1, #0
   d8e60:	7c00      	ldrb	r0, [r0, #16]
   d8e62:	f7ff b845 	b.w	d7ef0 <HAL_I2C_Is_Enabled>

000d8e66 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8e66:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8e68:	2100      	movs	r1, #0
   d8e6a:	7c00      	ldrb	r0, [r0, #16]
   d8e6c:	f7ff f850 	bl	d7f10 <HAL_I2C_Acquire>
}
   d8e70:	fab0 f080 	clz	r0, r0
   d8e74:	0940      	lsrs	r0, r0, #5
   d8e76:	bd08      	pop	{r3, pc}

000d8e78 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8e78:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8e7a:	2100      	movs	r1, #0
   d8e7c:	7c00      	ldrb	r0, [r0, #16]
   d8e7e:	f7ff f84f 	bl	d7f20 <HAL_I2C_Release>
}
   d8e82:	fab0 f080 	clz	r0, r0
   d8e86:	0940      	lsrs	r0, r0, #5
   d8e88:	bd08      	pop	{r3, pc}

000d8e8a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8e8a:	4700      	bx	r0

000d8e8c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8e8e:	b085      	sub	sp, #20
   d8e90:	461c      	mov	r4, r3
   d8e92:	460e      	mov	r6, r1
   d8e94:	4617      	mov	r7, r2
   d8e96:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d8e98:	f7fe ffd2 	bl	d7e40 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8e9c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8e9e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8ea0:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8ea4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8ea6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d8eaa:	bfa5      	ittet	ge
   d8eac:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8eb0:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8eb4:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8eb6:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8eb8:	9300      	str	r3, [sp, #0]
   d8eba:	4632      	mov	r2, r6
   d8ebc:	463b      	mov	r3, r7
   d8ebe:	4906      	ldr	r1, [pc, #24]	; (d8ed8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8ec0:	bfa8      	it	ge
   d8ec2:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8ec6:	4628      	mov	r0, r5
   d8ec8:	f7fe ffb2 	bl	d7e30 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8ecc:	fab0 f080 	clz	r0, r0
   d8ed0:	0940      	lsrs	r0, r0, #5
   d8ed2:	b005      	add	sp, #20
   d8ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ed6:	bf00      	nop
   d8ed8:	000d8e8b 	.word	0x000d8e8b

000d8edc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8edc:	f7fe bfc0 	b.w	d7e60 <HAL_Interrupts_Disable_All>

000d8ee0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8ee0:	f7fe bfb6 	b.w	d7e50 <HAL_Interrupts_Enable_All>

000d8ee4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8ee4:	4770      	bx	lr

000d8ee6 <_ZN9IPAddressD0Ev>:
   d8ee6:	b510      	push	{r4, lr}
   d8ee8:	2118      	movs	r1, #24
   d8eea:	4604      	mov	r4, r0
   d8eec:	f001 f95d 	bl	da1aa <_ZdlPvj>
   d8ef0:	4620      	mov	r0, r4
   d8ef2:	bd10      	pop	{r4, pc}

000d8ef4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8ef6:	7d03      	ldrb	r3, [r0, #20]
   d8ef8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8efa:	b08d      	sub	sp, #52	; 0x34
   d8efc:	460e      	mov	r6, r1
   d8efe:	f100 0704 	add.w	r7, r0, #4
   d8f02:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8f06:	d002      	beq.n	d8f0e <_ZNK9IPAddress7printToER5Print+0x1a>
   d8f08:	f100 0508 	add.w	r5, r0, #8
   d8f0c:	e018      	b.n	d8f40 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8f0e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8f10:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8f12:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8f16:	232f      	movs	r3, #47	; 0x2f
   d8f18:	462a      	mov	r2, r5
   d8f1a:	200a      	movs	r0, #10
   d8f1c:	f7ff f810 	bl	d7f40 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8f20:	4628      	mov	r0, r5
   d8f22:	f003 f983 	bl	dc22c <strlen>
   d8f26:	6833      	ldr	r3, [r6, #0]
   d8f28:	4602      	mov	r2, r0
   d8f2a:	68db      	ldr	r3, [r3, #12]
   d8f2c:	4629      	mov	r1, r5
   d8f2e:	4630      	mov	r0, r6
   d8f30:	4798      	blx	r3
   d8f32:	e00f      	b.n	d8f54 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8f34:	b124      	cbz	r4, d8f40 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8f36:	212e      	movs	r1, #46	; 0x2e
   d8f38:	4630      	mov	r0, r6
   d8f3a:	f000 f9d9 	bl	d92f0 <_ZN5Print5printEc>
   d8f3e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8f40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8f44:	220a      	movs	r2, #10
   d8f46:	4630      	mov	r0, r6
   d8f48:	f000 f9eb 	bl	d9322 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8f4c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8f4e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8f50:	d1f0      	bne.n	d8f34 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8f52:	4620      	mov	r0, r4
    }
    return n;
}
   d8f54:	b00d      	add	sp, #52	; 0x34
   d8f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8f58 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8f58:	b510      	push	{r4, lr}
   d8f5a:	4b05      	ldr	r3, [pc, #20]	; (d8f70 <_ZN9IPAddressC1Ev+0x18>)
   d8f5c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8f5e:	2211      	movs	r2, #17
   d8f60:	f840 3b04 	str.w	r3, [r0], #4
   d8f64:	2100      	movs	r1, #0
   d8f66:	f002 f9a1 	bl	db2ac <memset>
{
    clear();
}
   d8f6a:	4620      	mov	r0, r4
   d8f6c:	bd10      	pop	{r4, pc}
   d8f6e:	bf00      	nop
   d8f70:	000dd794 	.word	0x000dd794

000d8f74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8f74:	4603      	mov	r3, r0
   d8f76:	4a07      	ldr	r2, [pc, #28]	; (d8f94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8f78:	b510      	push	{r4, lr}
   d8f7a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8f7e:	f101 0210 	add.w	r2, r1, #16
   d8f82:	f851 4b04 	ldr.w	r4, [r1], #4
   d8f86:	f843 4b04 	str.w	r4, [r3], #4
   d8f8a:	4291      	cmp	r1, r2
   d8f8c:	d1f9      	bne.n	d8f82 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8f8e:	780a      	ldrb	r2, [r1, #0]
   d8f90:	701a      	strb	r2, [r3, #0]
}
   d8f92:	bd10      	pop	{r4, pc}
   d8f94:	000dd794 	.word	0x000dd794

000d8f98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8f98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8f9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8f9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8fa2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8fa6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8faa:	2304      	movs	r3, #4
   d8fac:	6041      	str	r1, [r0, #4]
   d8fae:	7503      	strb	r3, [r0, #20]
   d8fb0:	bd10      	pop	{r4, pc}

000d8fb2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8fb4:	780d      	ldrb	r5, [r1, #0]
   d8fb6:	788b      	ldrb	r3, [r1, #2]
   d8fb8:	784a      	ldrb	r2, [r1, #1]
   d8fba:	78c9      	ldrb	r1, [r1, #3]
   d8fbc:	9100      	str	r1, [sp, #0]
   d8fbe:	4629      	mov	r1, r5
   d8fc0:	f7ff ffea 	bl	d8f98 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8fc4:	b003      	add	sp, #12
   d8fc6:	bd30      	pop	{r4, r5, pc}

000d8fc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8fc8:	4b01      	ldr	r3, [pc, #4]	; (d8fd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8fca:	4a02      	ldr	r2, [pc, #8]	; (d8fd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8fcc:	601a      	str	r2, [r3, #0]
   d8fce:	4770      	bx	lr
   d8fd0:	2003e294 	.word	0x2003e294
   d8fd4:	000dd810 	.word	0x000dd810

000d8fd8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8fd8:	2200      	movs	r2, #0
   d8fda:	4611      	mov	r1, r2
   d8fdc:	6840      	ldr	r0, [r0, #4]
   d8fde:	f7ff b99f 	b.w	d8320 <network_listening>

000d8fe2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8fe2:	2200      	movs	r2, #0
   d8fe4:	4611      	mov	r1, r2
   d8fe6:	6840      	ldr	r0, [r0, #4]
   d8fe8:	f7ff b9aa 	b.w	d8340 <network_get_listen_timeout>

000d8fec <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8fec:	2200      	movs	r2, #0
   d8fee:	6840      	ldr	r0, [r0, #4]
   d8ff0:	f7ff b99e 	b.w	d8330 <network_set_listen_timeout>

000d8ff4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8ff4:	2200      	movs	r2, #0
   d8ff6:	f081 0101 	eor.w	r1, r1, #1
   d8ffa:	6840      	ldr	r0, [r0, #4]
   d8ffc:	f7ff b988 	b.w	d8310 <network_listen>

000d9000 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d9000:	2300      	movs	r3, #0
   d9002:	461a      	mov	r2, r3
   d9004:	2101      	movs	r1, #1
   d9006:	6840      	ldr	r0, [r0, #4]
   d9008:	f7ff b97a 	b.w	d8300 <network_off>

000d900c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d900c:	2300      	movs	r3, #0
   d900e:	461a      	mov	r2, r3
   d9010:	4619      	mov	r1, r3
   d9012:	6840      	ldr	r0, [r0, #4]
   d9014:	f7ff b96c 	b.w	d82f0 <network_on>

000d9018 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9018:	2200      	movs	r2, #0
   d901a:	4611      	mov	r1, r2
   d901c:	6840      	ldr	r0, [r0, #4]
   d901e:	f7ff b95f 	b.w	d82e0 <network_ready>

000d9022 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9022:	2200      	movs	r2, #0
   d9024:	4611      	mov	r1, r2
   d9026:	6840      	ldr	r0, [r0, #4]
   d9028:	f7ff b94a 	b.w	d82c0 <network_connecting>

000d902c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d902c:	2200      	movs	r2, #0
   d902e:	2102      	movs	r1, #2
   d9030:	6840      	ldr	r0, [r0, #4]
   d9032:	f7ff b94d 	b.w	d82d0 <network_disconnect>

000d9036 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9036:	2300      	movs	r3, #0
   d9038:	461a      	mov	r2, r3
   d903a:	6840      	ldr	r0, [r0, #4]
   d903c:	f7ff b938 	b.w	d82b0 <network_connect>

000d9040 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d9040:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9042:	4605      	mov	r5, r0
   d9044:	b188      	cbz	r0, d906a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9046:	6804      	ldr	r4, [r0, #0]
   d9048:	b14c      	cbz	r4, d905e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d904a:	68a3      	ldr	r3, [r4, #8]
   d904c:	b11b      	cbz	r3, d9056 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d904e:	2203      	movs	r2, #3
   d9050:	4621      	mov	r1, r4
   d9052:	4620      	mov	r0, r4
   d9054:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9056:	2110      	movs	r1, #16
   d9058:	4620      	mov	r0, r4
   d905a:	f001 f8a6 	bl	da1aa <_ZdlPvj>
   d905e:	4628      	mov	r0, r5
   d9060:	2114      	movs	r1, #20
      }
   d9062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9066:	f001 b8a0 	b.w	da1aa <_ZdlPvj>
   d906a:	bd38      	pop	{r3, r4, r5, pc}

000d906c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d906c:	b110      	cbz	r0, d9074 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d906e:	6803      	ldr	r3, [r0, #0]
   d9070:	685b      	ldr	r3, [r3, #4]
   d9072:	4718      	bx	r3
   d9074:	4770      	bx	lr

000d9076 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9076:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9078:	6803      	ldr	r3, [r0, #0]
   d907a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d907c:	b1bb      	cbz	r3, d90ae <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d907e:	6858      	ldr	r0, [r3, #4]
   d9080:	f7fe fdee 	bl	d7c60 <os_thread_is_current>
   d9084:	b978      	cbnz	r0, d90a6 <_ZN6ThreadD1Ev+0x30>
   d9086:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d9088:	7c5a      	ldrb	r2, [r3, #17]
   d908a:	b912      	cbnz	r2, d9092 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d908c:	6858      	ldr	r0, [r3, #4]
   d908e:	f7fe fdf7 	bl	d7c80 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d9092:	6823      	ldr	r3, [r4, #0]
   d9094:	6858      	ldr	r0, [r3, #4]
   d9096:	f7fe fdfb 	bl	d7c90 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d909a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d909c:	2300      	movs	r3, #0
   d909e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d90a0:	b128      	cbz	r0, d90ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d90a2:	f7ff ffcd 	bl	d9040 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90a6:	6820      	ldr	r0, [r4, #0]
   d90a8:	b108      	cbz	r0, d90ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d90aa:	f7ff ffc9 	bl	d9040 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d90ae:	4620      	mov	r0, r4
   d90b0:	bd10      	pop	{r4, pc}

000d90b2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d90b2:	b538      	push	{r3, r4, r5, lr}
   d90b4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90b6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d90ba:	b108      	cbz	r0, d90c0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d90bc:	f7fa fff1 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d90c0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d90c4:	b108      	cbz	r0, d90ca <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d90c6:	f7fe fe13 	bl	d7cf0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90ca:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d90ce:	b135      	cbz	r5, d90de <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d90d0:	4628      	mov	r0, r5
   d90d2:	f7ff ffd0 	bl	d9076 <_ZN6ThreadD1Ev>
   d90d6:	2104      	movs	r1, #4
   d90d8:	4628      	mov	r0, r5
   d90da:	f001 f866 	bl	da1aa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90de:	6820      	ldr	r0, [r4, #0]
   d90e0:	b108      	cbz	r0, d90e6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d90e2:	f7ff ffc3 	bl	d906c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d90e6:	4620      	mov	r0, r4
   d90e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d90ec <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d90ec:	b510      	push	{r4, lr}
   d90ee:	4b04      	ldr	r3, [pc, #16]	; (d9100 <_ZN5spark9MeshClassD1Ev+0x14>)
   d90f0:	4604      	mov	r4, r0
   d90f2:	f840 3b08 	str.w	r3, [r0], #8
   d90f6:	f7ff ffdc 	bl	d90b2 <_ZN5spark11MeshPublishD1Ev>
   d90fa:	4620      	mov	r0, r4
   d90fc:	bd10      	pop	{r4, pc}
   d90fe:	bf00      	nop
   d9100:	000dd87c 	.word	0x000dd87c

000d9104 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d9104:	b538      	push	{r3, r4, r5, lr}
   d9106:	4c0e      	ldr	r4, [pc, #56]	; (d9140 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d9108:	4b0e      	ldr	r3, [pc, #56]	; (d9144 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d910a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d910c:	2500      	movs	r5, #0
   d910e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d9110:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9114:	6063      	str	r3, [r4, #4]
   d9116:	60a5      	str	r5, [r4, #8]
   d9118:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d911c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d9120:	f7fe fdde 	bl	d7ce0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9124:	4b08      	ldr	r3, [pc, #32]	; (d9148 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d9126:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d912a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d912e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d9130:	4620      	mov	r0, r4
   d9132:	4a06      	ldr	r2, [pc, #24]	; (d914c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d9134:	4906      	ldr	r1, [pc, #24]	; (d9150 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d9136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d913a:	f001 b831 	b.w	da1a0 <__aeabi_atexit>
   d913e:	bf00      	nop
   d9140:	2003e298 	.word	0x2003e298
   d9144:	000dd8b0 	.word	0x000dd8b0
   d9148:	000dd87c 	.word	0x000dd87c
   d914c:	2003dea8 	.word	0x2003dea8
   d9150:	000d90ed 	.word	0x000d90ed

000d9154 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9154:	2300      	movs	r3, #0
   d9156:	461a      	mov	r2, r3
   d9158:	6840      	ldr	r0, [r0, #4]
   d915a:	f7ff b8a9 	b.w	d82b0 <network_connect>

000d915e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d915e:	2200      	movs	r2, #0
   d9160:	2102      	movs	r1, #2
   d9162:	6840      	ldr	r0, [r0, #4]
   d9164:	f7ff b8b4 	b.w	d82d0 <network_disconnect>

000d9168 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9168:	2200      	movs	r2, #0
   d916a:	4611      	mov	r1, r2
   d916c:	6840      	ldr	r0, [r0, #4]
   d916e:	f7ff b8a7 	b.w	d82c0 <network_connecting>

000d9172 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9172:	2200      	movs	r2, #0
   d9174:	4611      	mov	r1, r2
   d9176:	6840      	ldr	r0, [r0, #4]
   d9178:	f7ff b8b2 	b.w	d82e0 <network_ready>

000d917c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d917c:	2300      	movs	r3, #0
   d917e:	461a      	mov	r2, r3
   d9180:	4619      	mov	r1, r3
   d9182:	6840      	ldr	r0, [r0, #4]
   d9184:	f7ff b8b4 	b.w	d82f0 <network_on>

000d9188 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9188:	2300      	movs	r3, #0
   d918a:	461a      	mov	r2, r3
   d918c:	4619      	mov	r1, r3
   d918e:	6840      	ldr	r0, [r0, #4]
   d9190:	f7ff b8b6 	b.w	d8300 <network_off>

000d9194 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9194:	2200      	movs	r2, #0
   d9196:	f081 0101 	eor.w	r1, r1, #1
   d919a:	6840      	ldr	r0, [r0, #4]
   d919c:	f7ff b8b8 	b.w	d8310 <network_listen>

000d91a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d91a0:	2200      	movs	r2, #0
   d91a2:	6840      	ldr	r0, [r0, #4]
   d91a4:	f7ff b8c4 	b.w	d8330 <network_set_listen_timeout>

000d91a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d91a8:	2200      	movs	r2, #0
   d91aa:	4611      	mov	r1, r2
   d91ac:	6840      	ldr	r0, [r0, #4]
   d91ae:	f7ff b8c7 	b.w	d8340 <network_get_listen_timeout>

000d91b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d91b2:	2200      	movs	r2, #0
   d91b4:	4611      	mov	r1, r2
   d91b6:	6840      	ldr	r0, [r0, #4]
   d91b8:	f7ff b8b2 	b.w	d8320 <network_listening>

000d91bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d91bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d91c0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d91c2:	b095      	sub	sp, #84	; 0x54
   d91c4:	4616      	mov	r6, r2
   d91c6:	460d      	mov	r5, r1
   d91c8:	4607      	mov	r7, r0
    IPAddress addr;
   d91ca:	f7ff fec5 	bl	d8f58 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d91ce:	4621      	mov	r1, r4
   d91d0:	2220      	movs	r2, #32
   d91d2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d91d4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d91d6:	f002 f869 	bl	db2ac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d91da:	2340      	movs	r3, #64	; 0x40
   d91dc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d91de:	4621      	mov	r1, r4
   d91e0:	466b      	mov	r3, sp
   d91e2:	aa0c      	add	r2, sp, #48	; 0x30
   d91e4:	4630      	mov	r0, r6
   d91e6:	f7fe febb 	bl	d7f60 <netdb_getaddrinfo>
    if (!r) {
   d91ea:	4604      	mov	r4, r0
   d91ec:	2800      	cmp	r0, #0
   d91ee:	d144      	bne.n	d927a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d91f0:	4602      	mov	r2, r0
   d91f2:	2101      	movs	r1, #1
   d91f4:	6868      	ldr	r0, [r5, #4]
   d91f6:	f7ff f873 	bl	d82e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91fa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d91fc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91fe:	4622      	mov	r2, r4
   d9200:	6868      	ldr	r0, [r5, #4]
   d9202:	f7ff f86d 	bl	d82e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9206:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9208:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d920a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d920c:	2e00      	cmp	r6, #0
   d920e:	d034      	beq.n	d927a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9210:	2900      	cmp	r1, #0
   d9212:	d132      	bne.n	d927a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9214:	6873      	ldr	r3, [r6, #4]
   d9216:	2b02      	cmp	r3, #2
   d9218:	d002      	beq.n	d9220 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d921a:	2b0a      	cmp	r3, #10
   d921c:	d009      	beq.n	d9232 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d921e:	e02a      	b.n	d9276 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9220:	f1b8 0f00 	cmp.w	r8, #0
   d9224:	d027      	beq.n	d9276 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9226:	6971      	ldr	r1, [r6, #20]
   d9228:	4638      	mov	r0, r7
   d922a:	3104      	adds	r1, #4
   d922c:	f7ff fec1 	bl	d8fb2 <_ZN9IPAddressaSEPKh>
   d9230:	e020      	b.n	d9274 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9232:	f1b9 0f00 	cmp.w	r9, #0
   d9236:	d01e      	beq.n	d9276 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9238:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d923a:	2211      	movs	r2, #17
   d923c:	a801      	add	r0, sp, #4
   d923e:	f002 f835 	bl	db2ac <memset>
                    a.v = 6;
   d9242:	2306      	movs	r3, #6
   d9244:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9248:	ad01      	add	r5, sp, #4
   d924a:	f104 0308 	add.w	r3, r4, #8
   d924e:	3418      	adds	r4, #24
   d9250:	6818      	ldr	r0, [r3, #0]
   d9252:	6859      	ldr	r1, [r3, #4]
   d9254:	462a      	mov	r2, r5
   d9256:	c203      	stmia	r2!, {r0, r1}
   d9258:	3308      	adds	r3, #8
   d925a:	42a3      	cmp	r3, r4
   d925c:	4615      	mov	r5, r2
   d925e:	d1f7      	bne.n	d9250 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d9260:	a901      	add	r1, sp, #4
   d9262:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9264:	ad07      	add	r5, sp, #28
   d9266:	f7ff fe85 	bl	d8f74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d926a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d926c:	1d3c      	adds	r4, r7, #4
   d926e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9270:	682b      	ldr	r3, [r5, #0]
   d9272:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9274:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9276:	69f6      	ldr	r6, [r6, #28]
   d9278:	e7c8      	b.n	d920c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d927a:	9800      	ldr	r0, [sp, #0]
   d927c:	f7fe fe68 	bl	d7f50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9280:	4638      	mov	r0, r7
   d9282:	b015      	add	sp, #84	; 0x54
   d9284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9288 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9288:	4b02      	ldr	r3, [pc, #8]	; (d9294 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d928a:	4a03      	ldr	r2, [pc, #12]	; (d9298 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d928c:	601a      	str	r2, [r3, #0]
   d928e:	2200      	movs	r2, #0
   d9290:	605a      	str	r2, [r3, #4]
   d9292:	4770      	bx	lr
   d9294:	2003e46c 	.word	0x2003e46c
   d9298:	000dd8b0 	.word	0x000dd8b0

000d929c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d929e:	4606      	mov	r6, r0
   d92a0:	460d      	mov	r5, r1
   d92a2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d92a4:	2400      	movs	r4, #0
  while (size--) {
   d92a6:	42bd      	cmp	r5, r7
   d92a8:	d00c      	beq.n	d92c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d92aa:	6833      	ldr	r3, [r6, #0]
   d92ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d92b0:	689b      	ldr	r3, [r3, #8]
   d92b2:	4630      	mov	r0, r6
   d92b4:	4798      	blx	r3
     if (chunk>=0)
   d92b6:	2800      	cmp	r0, #0
   d92b8:	db01      	blt.n	d92be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d92ba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d92bc:	e7f3      	b.n	d92a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d92be:	2c00      	cmp	r4, #0
   d92c0:	bf08      	it	eq
   d92c2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d92c4:	4620      	mov	r0, r4
   d92c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d92c8:	b570      	push	{r4, r5, r6, lr}
   d92ca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d92cc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d92ce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d92d0:	b149      	cbz	r1, d92e6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d92d2:	f002 ffab 	bl	dc22c <strlen>
   d92d6:	682b      	ldr	r3, [r5, #0]
   d92d8:	4602      	mov	r2, r0
   d92da:	4621      	mov	r1, r4
   d92dc:	4628      	mov	r0, r5
   d92de:	68db      	ldr	r3, [r3, #12]
    }
   d92e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d92e4:	4718      	bx	r3
    }
   d92e6:	bd70      	pop	{r4, r5, r6, pc}

000d92e8 <_ZN5Print5printEPKc>:
   d92e8:	b508      	push	{r3, lr}
   d92ea:	f7ff ffed 	bl	d92c8 <_ZN5Print5writeEPKc>
   d92ee:	bd08      	pop	{r3, pc}

000d92f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d92f0:	6803      	ldr	r3, [r0, #0]
   d92f2:	689b      	ldr	r3, [r3, #8]
   d92f4:	4718      	bx	r3

000d92f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d92f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d92f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d92fa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d92fc:	f7ff fff8 	bl	d92f0 <_ZN5Print5printEc>
  n += print('\n');
   d9300:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d9302:	4604      	mov	r4, r0
  n += print('\n');
   d9304:	4628      	mov	r0, r5
   d9306:	f7ff fff3 	bl	d92f0 <_ZN5Print5printEc>
  return n;
}
   d930a:	4420      	add	r0, r4
   d930c:	bd38      	pop	{r3, r4, r5, pc}

000d930e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d930e:	b538      	push	{r3, r4, r5, lr}
   d9310:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9312:	f7ff ffd9 	bl	d92c8 <_ZN5Print5writeEPKc>
   d9316:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9318:	4628      	mov	r0, r5
   d931a:	f7ff ffec 	bl	d92f6 <_ZN5Print7printlnEv>
  return n;
}
   d931e:	4420      	add	r0, r4
   d9320:	bd38      	pop	{r3, r4, r5, pc}

000d9322 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9322:	b530      	push	{r4, r5, lr}
   d9324:	b08b      	sub	sp, #44	; 0x2c
   d9326:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9328:	2100      	movs	r1, #0
   d932a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d932e:	2a01      	cmp	r2, #1
   d9330:	bf98      	it	ls
   d9332:	220a      	movls	r2, #10
   d9334:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d9338:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d933c:	fb05 3312 	mls	r3, r5, r2, r3
   d9340:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9344:	2b09      	cmp	r3, #9
   d9346:	bf94      	ite	ls
   d9348:	3330      	addls	r3, #48	; 0x30
   d934a:	3337      	addhi	r3, #55	; 0x37
   d934c:	b2db      	uxtb	r3, r3
   d934e:	4621      	mov	r1, r4
   d9350:	f804 3901 	strb.w	r3, [r4], #-1
   d9354:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9356:	2d00      	cmp	r5, #0
   d9358:	d1ee      	bne.n	d9338 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d935a:	f7ff ffb5 	bl	d92c8 <_ZN5Print5writeEPKc>
}
   d935e:	b00b      	add	sp, #44	; 0x2c
   d9360:	bd30      	pop	{r4, r5, pc}
	...

000d9364 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d9364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9368:	ec57 6b10 	vmov	r6, r7, d0
   d936c:	4682      	mov	sl, r0
   d936e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9370:	ee10 2a10 	vmov	r2, s0
   d9374:	463b      	mov	r3, r7
   d9376:	ee10 0a10 	vmov	r0, s0
   d937a:	4639      	mov	r1, r7
   d937c:	f001 fcce 	bl	dad1c <__aeabi_dcmpun>
   d9380:	b108      	cbz	r0, d9386 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9382:	494e      	ldr	r1, [pc, #312]	; (d94bc <_ZN5Print10printFloatEdh+0x158>)
   d9384:	e012      	b.n	d93ac <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d9386:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d938a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d938e:	4b4c      	ldr	r3, [pc, #304]	; (d94c0 <_ZN5Print10printFloatEdh+0x15c>)
   d9390:	4630      	mov	r0, r6
   d9392:	4649      	mov	r1, r9
   d9394:	f001 fcc2 	bl	dad1c <__aeabi_dcmpun>
   d9398:	b968      	cbnz	r0, d93b6 <_ZN5Print10printFloatEdh+0x52>
   d939a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d939e:	4b48      	ldr	r3, [pc, #288]	; (d94c0 <_ZN5Print10printFloatEdh+0x15c>)
   d93a0:	4630      	mov	r0, r6
   d93a2:	4649      	mov	r1, r9
   d93a4:	f001 fc9c 	bl	dace0 <__aeabi_dcmple>
   d93a8:	b928      	cbnz	r0, d93b6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93aa:	4946      	ldr	r1, [pc, #280]	; (d94c4 <_ZN5Print10printFloatEdh+0x160>)
   d93ac:	4650      	mov	r0, sl
   d93ae:	f7ff ff8b 	bl	d92c8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d93b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d93b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d93ba:	4b43      	ldr	r3, [pc, #268]	; (d94c8 <_ZN5Print10printFloatEdh+0x164>)
   d93bc:	4630      	mov	r0, r6
   d93be:	4639      	mov	r1, r7
   d93c0:	f001 fca2 	bl	dad08 <__aeabi_dcmpgt>
   d93c4:	b108      	cbz	r0, d93ca <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93c6:	4941      	ldr	r1, [pc, #260]	; (d94cc <_ZN5Print10printFloatEdh+0x168>)
   d93c8:	e7f0      	b.n	d93ac <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d93ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d93ce:	4b40      	ldr	r3, [pc, #256]	; (d94d0 <_ZN5Print10printFloatEdh+0x16c>)
   d93d0:	4630      	mov	r0, r6
   d93d2:	4639      	mov	r1, r7
   d93d4:	f001 fc7a 	bl	daccc <__aeabi_dcmplt>
   d93d8:	2800      	cmp	r0, #0
   d93da:	d1f4      	bne.n	d93c6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d93dc:	2200      	movs	r2, #0
   d93de:	2300      	movs	r3, #0
   d93e0:	4630      	mov	r0, r6
   d93e2:	4639      	mov	r1, r7
   d93e4:	f001 fc72 	bl	daccc <__aeabi_dcmplt>
   d93e8:	b140      	cbz	r0, d93fc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d93ea:	212d      	movs	r1, #45	; 0x2d
   d93ec:	4650      	mov	r0, sl
   d93ee:	f7ff ff7f 	bl	d92f0 <_ZN5Print5printEc>
     number = -number;
   d93f2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d93f6:	4604      	mov	r4, r0
     number = -number;
   d93f8:	461f      	mov	r7, r3
   d93fa:	e000      	b.n	d93fe <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d93fc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d93fe:	4935      	ldr	r1, [pc, #212]	; (d94d4 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9400:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9404:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d9406:	fa5f f388 	uxtb.w	r3, r8
   d940a:	429d      	cmp	r5, r3
   d940c:	d906      	bls.n	d941c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d940e:	2200      	movs	r2, #0
   d9410:	4b31      	ldr	r3, [pc, #196]	; (d94d8 <_ZN5Print10printFloatEdh+0x174>)
   d9412:	f001 fb13 	bl	daa3c <__aeabi_ddiv>
   d9416:	f108 0801 	add.w	r8, r8, #1
   d941a:	e7f4      	b.n	d9406 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d941c:	4632      	mov	r2, r6
   d941e:	463b      	mov	r3, r7
   d9420:	f001 f830 	bl	da484 <__adddf3>
   d9424:	460f      	mov	r7, r1
   d9426:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d9428:	f001 fcb6 	bl	dad98 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d942c:	220a      	movs	r2, #10
   d942e:	4601      	mov	r1, r0
   d9430:	4680      	mov	r8, r0
   d9432:	4650      	mov	r0, sl
   d9434:	f7ff ff75 	bl	d9322 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d9438:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d943a:	b3e5      	cbz	r5, d94b6 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d943c:	4640      	mov	r0, r8
   d943e:	f001 f95d 	bl	da6fc <__aeabi_ui2d>
   d9442:	4602      	mov	r2, r0
   d9444:	460b      	mov	r3, r1
   d9446:	4630      	mov	r0, r6
   d9448:	4639      	mov	r1, r7
   d944a:	f001 f819 	bl	da480 <__aeabi_dsub>
   d944e:	4606      	mov	r6, r0
   d9450:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9452:	4650      	mov	r0, sl
   d9454:	4921      	ldr	r1, [pc, #132]	; (d94dc <_ZN5Print10printFloatEdh+0x178>)
   d9456:	f7ff ff37 	bl	d92c8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d945a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d945c:	2200      	movs	r2, #0
   d945e:	4b1e      	ldr	r3, [pc, #120]	; (d94d8 <_ZN5Print10printFloatEdh+0x174>)
   d9460:	4630      	mov	r0, r6
   d9462:	4639      	mov	r1, r7
   d9464:	f001 f9c0 	bl	da7e8 <__aeabi_dmul>
   d9468:	4606      	mov	r6, r0
   d946a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d946c:	f001 fc6c 	bl	dad48 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9470:	f1b0 0900 	subs.w	r9, r0, #0
   d9474:	da07      	bge.n	d9486 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d9476:	212d      	movs	r1, #45	; 0x2d
   d9478:	4650      	mov	r0, sl
   d947a:	f7ff ff39 	bl	d92f0 <_ZN5Print5printEc>
            val = -n;
   d947e:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d9482:	4680      	mov	r8, r0
   d9484:	e002      	b.n	d948c <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d9486:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9488:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d948c:	220a      	movs	r2, #10
   d948e:	4650      	mov	r0, sl
   d9490:	f7ff ff47 	bl	d9322 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d9494:	4440      	add	r0, r8
   d9496:	4404      	add	r4, r0
    remainder -= toPrint;
   d9498:	4648      	mov	r0, r9
   d949a:	f001 f93f 	bl	da71c <__aeabi_i2d>
   d949e:	4602      	mov	r2, r0
   d94a0:	460b      	mov	r3, r1
   d94a2:	4630      	mov	r0, r6
   d94a4:	4639      	mov	r1, r7
   d94a6:	f000 ffeb 	bl	da480 <__aeabi_dsub>
   d94aa:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d94ac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d94b0:	4606      	mov	r6, r0
   d94b2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d94b4:	d1d2      	bne.n	d945c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d94b6:	4620      	mov	r0, r4
   d94b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94bc:	000dd8dc 	.word	0x000dd8dc
   d94c0:	7fefffff 	.word	0x7fefffff
   d94c4:	000dd8e6 	.word	0x000dd8e6
   d94c8:	41efffff 	.word	0x41efffff
   d94cc:	000dd8e0 	.word	0x000dd8e0
   d94d0:	c1efffff 	.word	0xc1efffff
   d94d4:	3fe00000 	.word	0x3fe00000
   d94d8:	40240000 	.word	0x40240000
   d94dc:	000dd8e4 	.word	0x000dd8e4

000d94e0 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d94e0:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d94e2:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d94e4:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d94e6:	f7ff ff3d 	bl	d9364 <_ZN5Print10printFloatEdh>
   d94ea:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d94ec:	4628      	mov	r0, r5
   d94ee:	f7ff ff02 	bl	d92f6 <_ZN5Print7printlnEv>
  return n;
}
   d94f2:	4420      	add	r0, r4
   d94f4:	bd38      	pop	{r3, r4, r5, pc}

000d94f6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d94f6:	b40c      	push	{r2, r3}
   d94f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d94fc:	b087      	sub	sp, #28
   d94fe:	af00      	add	r7, sp, #0
   d9500:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d9504:	4605      	mov	r5, r0
   d9506:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d950a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d950c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d950e:	4623      	mov	r3, r4
   d9510:	464a      	mov	r2, r9
   d9512:	2114      	movs	r1, #20
   d9514:	1d38      	adds	r0, r7, #4
   d9516:	f7fe ff53 	bl	d83c0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d951a:	2813      	cmp	r0, #19
   d951c:	d805      	bhi.n	d952a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d951e:	1d39      	adds	r1, r7, #4
   d9520:	4628      	mov	r0, r5
   d9522:	f7ff fed1 	bl	d92c8 <_ZN5Print5writeEPKc>
   d9526:	4604      	mov	r4, r0
   d9528:	e013      	b.n	d9552 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d952a:	f100 0308 	add.w	r3, r0, #8
   d952e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d9532:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d9534:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d9538:	1c41      	adds	r1, r0, #1
   d953a:	4623      	mov	r3, r4
   d953c:	464a      	mov	r2, r9
   d953e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d9540:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d9542:	f7fe ff3d 	bl	d83c0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9546:	4669      	mov	r1, sp
   d9548:	4628      	mov	r0, r5
   d954a:	f7ff febd 	bl	d92c8 <_ZN5Print5writeEPKc>
   d954e:	4604      	mov	r4, r0
   d9550:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d9552:	b11e      	cbz	r6, d955c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d9554:	4628      	mov	r0, r5
   d9556:	f7ff fece 	bl	d92f6 <_ZN5Print7printlnEv>
   d955a:	4404      	add	r4, r0
    return n;
}
   d955c:	4620      	mov	r0, r4
   d955e:	371c      	adds	r7, #28
   d9560:	46bd      	mov	sp, r7
   d9562:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9566:	b002      	add	sp, #8
   d9568:	4770      	bx	lr

000d956a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d956a:	b510      	push	{r4, lr}
   d956c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d956e:	f7fd fa72 	bl	d6a56 <_ZNSt14_Function_baseD1Ev>
   d9572:	4620      	mov	r0, r4
   d9574:	bd10      	pop	{r4, pc}
	...

000d9578 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9578:	4803      	ldr	r0, [pc, #12]	; (d9588 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d957a:	4a04      	ldr	r2, [pc, #16]	; (d958c <_GLOBAL__sub_I_RGB+0x14>)
   d957c:	4904      	ldr	r1, [pc, #16]	; (d9590 <_GLOBAL__sub_I_RGB+0x18>)
   d957e:	2300      	movs	r3, #0
   d9580:	6083      	str	r3, [r0, #8]
   d9582:	f000 be0d 	b.w	da1a0 <__aeabi_atexit>
   d9586:	bf00      	nop
   d9588:	2003e474 	.word	0x2003e474
   d958c:	2003dea8 	.word	0x2003dea8
   d9590:	000d956b 	.word	0x000d956b

000d9594 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9594:	2100      	movs	r1, #0
   d9596:	f7fe bd1b 	b.w	d7fd0 <HAL_SPI_Acquire>

000d959a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d959a:	2100      	movs	r1, #0
   d959c:	f7fe bd20 	b.w	d7fe0 <HAL_SPI_Release>

000d95a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d95a0:	b510      	push	{r4, lr}
   d95a2:	4604      	mov	r4, r0
{
    _spi = spi;
   d95a4:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d95a6:	4608      	mov	r0, r1
   d95a8:	f7fe fcf2 	bl	d7f90 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d95ac:	2300      	movs	r3, #0
   d95ae:	6063      	str	r3, [r4, #4]
}
   d95b0:	4620      	mov	r0, r4
   d95b2:	bd10      	pop	{r4, pc}

000d95b4 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d95b4:	b538      	push	{r3, r4, r5, lr}
   d95b6:	4604      	mov	r4, r0
    if (!lock())
   d95b8:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d95ba:	460d      	mov	r5, r1
    if (!lock())
   d95bc:	f7ff ffea 	bl	d9594 <_ZN8SPIClass4lockEv.isra.0>
   d95c0:	b940      	cbnz	r0, d95d4 <_ZN8SPIClass5beginEt+0x20>
    {
        HAL_SPI_Begin(_spi, ss_pin);
   d95c2:	7820      	ldrb	r0, [r4, #0]
   d95c4:	4629      	mov	r1, r5
   d95c6:	f7fe fcd3 	bl	d7f70 <HAL_SPI_Begin>
        unlock();
   d95ca:	7820      	ldrb	r0, [r4, #0]
    }
}
   d95cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::begin(uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
        unlock();
   d95d0:	f7ff bfe3 	b.w	d959a <_ZN8SPIClass6unlockEv.isra.1>
   d95d4:	bd38      	pop	{r3, r4, r5, pc}

000d95d6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d95d6:	7800      	ldrb	r0, [r0, #0]
   d95d8:	f7ff bfdf 	b.w	d959a <_ZN8SPIClass6unlockEv.isra.1>

000d95dc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d95dc:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d95de:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d95e0:	6018      	str	r0, [r3, #0]
   d95e2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d95e4:	6818      	ldr	r0, [r3, #0]
   d95e6:	4288      	cmp	r0, r1
   d95e8:	b2e5      	uxtb	r5, r4
   d95ea:	d906      	bls.n	d95fa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d95ec:	3401      	adds	r4, #1
   d95ee:	2c08      	cmp	r4, #8
   d95f0:	d002      	beq.n	d95f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d95f2:	0840      	lsrs	r0, r0, #1
   d95f4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d95f6:	e7f5      	b.n	d95e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d95f8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d95fa:	4b02      	ldr	r3, [pc, #8]	; (d9604 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d95fc:	5d5b      	ldrb	r3, [r3, r5]
   d95fe:	7013      	strb	r3, [r2, #0]
   d9600:	bd30      	pop	{r4, r5, pc}
   d9602:	bf00      	nop
   d9604:	000dd8ea 	.word	0x000dd8ea

000d9608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d960c:	4607      	mov	r7, r0
   d960e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d9610:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9612:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d9614:	f7ff ffbe 	bl	d9594 <_ZN8SPIClass4lockEv.isra.0>
   d9618:	2800      	cmp	r0, #0
   d961a:	db62      	blt.n	d96e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d961c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d961e:	2214      	movs	r2, #20
   d9620:	2100      	movs	r1, #0
   d9622:	a809      	add	r0, sp, #36	; 0x24
   d9624:	f001 fe42 	bl	db2ac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9628:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d962a:	4620      	mov	r0, r4
   d962c:	2200      	movs	r2, #0
   d962e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d9630:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d9634:	f7fe fcbc 	bl	d7fb0 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d9638:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d963c:	b154      	cbz	r4, d9654 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d963e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9642:	b935      	cbnz	r5, d9652 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d9644:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9648:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d964c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d9650:	e003      	b.n	d965a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d9652:	2400      	movs	r4, #0
   d9654:	46a1      	mov	r9, r4
   d9656:	46a0      	mov	r8, r4
   d9658:	2501      	movs	r5, #1
   d965a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d965c:	b105      	cbz	r5, d9660 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d965e:	b9bb      	cbnz	r3, d9690 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d9660:	429d      	cmp	r5, r3
   d9662:	d10b      	bne.n	d967c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d9664:	68b2      	ldr	r2, [r6, #8]
   d9666:	4542      	cmp	r2, r8
   d9668:	d108      	bne.n	d967c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d966a:	f88d 9020 	strb.w	r9, [sp, #32]
   d966e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9672:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d9676:	89b2      	ldrh	r2, [r6, #12]
   d9678:	4291      	cmp	r1, r2
   d967a:	d009      	beq.n	d9690 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d967c:	b153      	cbz	r3, d9694 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d967e:	2400      	movs	r4, #0
   d9680:	7838      	ldrb	r0, [r7, #0]
   d9682:	9401      	str	r4, [sp, #4]
   d9684:	9400      	str	r4, [sp, #0]
   d9686:	4623      	mov	r3, r4
   d9688:	4622      	mov	r2, r4
   d968a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d968c:	f7fe fc98 	bl	d7fc0 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d9690:	2000      	movs	r0, #0
   d9692:	e026      	b.n	d96e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9694:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9698:	68b1      	ldr	r1, [r6, #8]
   d969a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d969c:	ab04      	add	r3, sp, #16
   d969e:	f10d 020f 	add.w	r2, sp, #15
   d96a2:	f7ff ff9b 	bl	d95dc <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d96a6:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d96a8:	b105      	cbz	r5, d96ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d96aa:	b9b1      	cbnz	r1, d96da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d96ac:	42a9      	cmp	r1, r5
   d96ae:	d008      	beq.n	d96c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d96b0:	2400      	movs	r4, #0
   d96b2:	7838      	ldrb	r0, [r7, #0]
   d96b4:	9401      	str	r4, [sp, #4]
   d96b6:	7b74      	ldrb	r4, [r6, #13]
   d96b8:	7b33      	ldrb	r3, [r6, #12]
   d96ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d96be:	9400      	str	r4, [sp, #0]
   d96c0:	e7e4      	b.n	d968c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d96c2:	68b3      	ldr	r3, [r6, #8]
   d96c4:	4543      	cmp	r3, r8
   d96c6:	d3f3      	bcc.n	d96b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d96c8:	f88d 9020 	strb.w	r9, [sp, #32]
   d96cc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d96d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d96d4:	89b3      	ldrh	r3, [r6, #12]
   d96d6:	429a      	cmp	r2, r3
   d96d8:	d1ea      	bne.n	d96b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d96da:	9b04      	ldr	r3, [sp, #16]
   d96dc:	4543      	cmp	r3, r8
   d96de:	d1e7      	bne.n	d96b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d96e0:	e7d6      	b.n	d9690 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d96e2:	b00f      	add	sp, #60	; 0x3c
   d96e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d96e8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d96e8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d96ea:	7800      	ldrb	r0, [r0, #0]
   d96ec:	f7fe fc48 	bl	d7f80 <HAL_SPI_Send_Receive_Data>
}
   d96f0:	b2c0      	uxtb	r0, r0
   d96f2:	bd08      	pop	{r3, pc}

000d96f4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d96f4:	7800      	ldrb	r0, [r0, #0]
   d96f6:	f7fe bc53 	b.w	d7fa0 <HAL_SPI_Is_Enabled>

000d96fa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d96fa:	b510      	push	{r4, lr}
   d96fc:	4604      	mov	r4, r0
{
	free(buffer);
   d96fe:	6800      	ldr	r0, [r0, #0]
   d9700:	f7fe fe2e 	bl	d8360 <free>
}
   d9704:	4620      	mov	r0, r4
   d9706:	bd10      	pop	{r4, pc}

000d9708 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9708:	b510      	push	{r4, lr}
   d970a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d970c:	6800      	ldr	r0, [r0, #0]
   d970e:	b108      	cbz	r0, d9714 <_ZN6String10invalidateEv+0xc>
   d9710:	f7fe fe26 	bl	d8360 <free>
	buffer = NULL;
   d9714:	2300      	movs	r3, #0
   d9716:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9718:	60a3      	str	r3, [r4, #8]
   d971a:	6063      	str	r3, [r4, #4]
   d971c:	bd10      	pop	{r4, pc}

000d971e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d971e:	b538      	push	{r3, r4, r5, lr}
   d9720:	4604      	mov	r4, r0
   d9722:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9724:	6800      	ldr	r0, [r0, #0]
   d9726:	3101      	adds	r1, #1
   d9728:	f7fe fe22 	bl	d8370 <realloc>
	if (newbuffer) {
   d972c:	b110      	cbz	r0, d9734 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d972e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d9732:	2001      	movs	r0, #1
	}
	return 0;
}
   d9734:	bd38      	pop	{r3, r4, r5, pc}

000d9736 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d9736:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9738:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d973a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d973c:	b113      	cbz	r3, d9744 <_ZN6String7reserveEj+0xe>
   d973e:	6843      	ldr	r3, [r0, #4]
   d9740:	428b      	cmp	r3, r1
   d9742:	d207      	bcs.n	d9754 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9744:	4620      	mov	r0, r4
   d9746:	f7ff ffea 	bl	d971e <_ZN6String12changeBufferEj>
   d974a:	b120      	cbz	r0, d9756 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d974c:	68a3      	ldr	r3, [r4, #8]
   d974e:	b90b      	cbnz	r3, d9754 <_ZN6String7reserveEj+0x1e>
   d9750:	6822      	ldr	r2, [r4, #0]
   d9752:	7013      	strb	r3, [r2, #0]
   d9754:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9756:	bd10      	pop	{r4, pc}

000d9758 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9758:	b570      	push	{r4, r5, r6, lr}
   d975a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d975c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d975e:	4604      	mov	r4, r0
   d9760:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d9762:	f7ff ffe8 	bl	d9736 <_ZN6String7reserveEj>
   d9766:	b918      	cbnz	r0, d9770 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9768:	4620      	mov	r0, r4
   d976a:	f7ff ffcd 	bl	d9708 <_ZN6String10invalidateEv>
		return *this;
   d976e:	e009      	b.n	d9784 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9770:	462a      	mov	r2, r5
   d9772:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9774:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9776:	6820      	ldr	r0, [r4, #0]
   d9778:	f001 fd72 	bl	db260 <memcpy>
	buffer[len] = 0;
   d977c:	6822      	ldr	r2, [r4, #0]
   d977e:	68a3      	ldr	r3, [r4, #8]
   d9780:	2100      	movs	r1, #0
   d9782:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9784:	4620      	mov	r0, r4
   d9786:	bd70      	pop	{r4, r5, r6, pc}

000d9788 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9788:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d978a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d978c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d978e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9790:	6043      	str	r3, [r0, #4]
	len = 0;
   d9792:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9794:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9796:	460d      	mov	r5, r1
   d9798:	b139      	cbz	r1, d97aa <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d979a:	4608      	mov	r0, r1
   d979c:	f002 fd46 	bl	dc22c <strlen>
   d97a0:	4629      	mov	r1, r5
   d97a2:	4602      	mov	r2, r0
   d97a4:	4620      	mov	r0, r4
   d97a6:	f7ff ffd7 	bl	d9758 <_ZN6String4copyEPKcj>
}
   d97aa:	4620      	mov	r0, r4
   d97ac:	bd38      	pop	{r3, r4, r5, pc}

000d97ae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d97ae:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d97b0:	b510      	push	{r4, lr}
   d97b2:	460b      	mov	r3, r1
   d97b4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d97b6:	d007      	beq.n	d97c8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d97b8:	6809      	ldr	r1, [r1, #0]
   d97ba:	b119      	cbz	r1, d97c4 <_ZN6StringaSERKS_+0x16>
   d97bc:	689a      	ldr	r2, [r3, #8]
   d97be:	f7ff ffcb 	bl	d9758 <_ZN6String4copyEPKcj>
   d97c2:	e001      	b.n	d97c8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d97c4:	f7ff ffa0 	bl	d9708 <_ZN6String10invalidateEv>

	return *this;
}
   d97c8:	4620      	mov	r0, r4
   d97ca:	bd10      	pop	{r4, pc}

000d97cc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d97cc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d97ce:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d97d0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d97d2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d97d4:	6043      	str	r3, [r0, #4]
	len = 0;
   d97d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d97d8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d97da:	f7ff ffe8 	bl	d97ae <_ZN6StringaSERKS_>
}
   d97de:	4620      	mov	r0, r4
   d97e0:	bd10      	pop	{r4, pc}

000d97e2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d97e2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d97e4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d97e6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d97e8:	b912      	cbnz	r2, d97f0 <_ZNK6String6equalsEPKc+0xe>
   d97ea:	b919      	cbnz	r1, d97f4 <_ZNK6String6equalsEPKc+0x12>
   d97ec:	2001      	movs	r0, #1
   d97ee:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d97f0:	b911      	cbnz	r1, d97f8 <_ZNK6String6equalsEPKc+0x16>
   d97f2:	6803      	ldr	r3, [r0, #0]
   d97f4:	7818      	ldrb	r0, [r3, #0]
   d97f6:	e002      	b.n	d97fe <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d97f8:	6800      	ldr	r0, [r0, #0]
   d97fa:	f001 ffd5 	bl	db7a8 <strcmp>
   d97fe:	fab0 f080 	clz	r0, r0
   d9802:	0940      	lsrs	r0, r0, #5
}
   d9804:	bd08      	pop	{r3, pc}

000d9806 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9806:	b570      	push	{r4, r5, r6, lr}
   d9808:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d980a:	b19a      	cbz	r2, d9834 <_ZNK6String8getBytesEPhjj+0x2e>
   d980c:	b191      	cbz	r1, d9834 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d980e:	6885      	ldr	r5, [r0, #8]
   d9810:	429d      	cmp	r5, r3
   d9812:	d802      	bhi.n	d981a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9814:	2300      	movs	r3, #0
   d9816:	700b      	strb	r3, [r1, #0]
		return;
   d9818:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d981a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d981c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d981e:	6801      	ldr	r1, [r0, #0]
   d9820:	42ac      	cmp	r4, r5
   d9822:	bf28      	it	cs
   d9824:	462c      	movcs	r4, r5
   d9826:	4419      	add	r1, r3
   d9828:	4622      	mov	r2, r4
   d982a:	4630      	mov	r0, r6
   d982c:	f002 fd1b 	bl	dc266 <strncpy>
	buf[n] = 0;
   d9830:	2300      	movs	r3, #0
   d9832:	5533      	strb	r3, [r6, r4]
   d9834:	bd70      	pop	{r4, r5, r6, pc}

000d9836 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9836:	b510      	push	{r4, lr}
   d9838:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d983a:	6800      	ldr	r0, [r0, #0]
   d983c:	b118      	cbz	r0, d9846 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d983e:	f7fe fd8f 	bl	d8360 <free>
            wakeupSource_ = nullptr;
   d9842:	2300      	movs	r3, #0
   d9844:	6023      	str	r3, [r4, #0]
   d9846:	bd10      	pop	{r4, pc}

000d9848 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9848:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d984a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d984e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d9850:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9852:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d9854:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d9858:	f8c0 2006 	str.w	r2, [r0, #6]
   d985c:	889b      	ldrh	r3, [r3, #4]
   d985e:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9860:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d9862:	f7ff ffe8 	bl	d9836 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d9866:	682b      	ldr	r3, [r5, #0]
   d9868:	b113      	cbz	r3, d9870 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d986a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d986c:	2300      	movs	r3, #0
   d986e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d9870:	4620      	mov	r0, r4
   d9872:	bd38      	pop	{r3, r4, r5, pc}

000d9874 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d9874:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d9878:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d987a:	b90b      	cbnz	r3, d9880 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d987c:	680a      	ldr	r2, [r1, #0]
   d987e:	b19a      	cbz	r2, d98a8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d9880:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d9882:	b15c      	cbz	r4, d989c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d9884:	88a2      	ldrh	r2, [r4, #4]
   d9886:	2a01      	cmp	r2, #1
   d9888:	d003      	beq.n	d9892 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d988a:	2a04      	cmp	r2, #4
   d988c:	d106      	bne.n	d989c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d988e:	2202      	movs	r2, #2
   d9890:	e005      	b.n	d989e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d9892:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d9894:	814c      	strh	r4, [r1, #10]
   d9896:	718a      	strb	r2, [r1, #6]
   d9898:	810b      	strh	r3, [r1, #8]
                    break;
   d989a:	e005      	b.n	d98a8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d989c:	2204      	movs	r2, #4
   d989e:	810b      	strh	r3, [r1, #8]
   d98a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d98a4:	718a      	strb	r2, [r1, #6]
   d98a6:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d98a8:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d98ac:	6003      	str	r3, [r0, #0]
   d98ae:	888b      	ldrh	r3, [r1, #4]
   d98b0:	8083      	strh	r3, [r0, #4]
    }
   d98b2:	bd10      	pop	{r4, pc}

000d98b4 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d98b4:	4601      	mov	r1, r0
   d98b6:	2200      	movs	r2, #0
   d98b8:	208c      	movs	r0, #140	; 0x8c
   d98ba:	f7fe ba31 	b.w	d7d20 <HAL_Core_System_Reset_Ex>

000d98be <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d98be:	2000      	movs	r0, #0
   d98c0:	f7ff bff8 	b.w	d98b4 <_ZN11SystemClass5resetEm>

000d98c4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d98c4:	b530      	push	{r4, r5, lr}
   d98c6:	4604      	mov	r4, r0
   d98c8:	b085      	sub	sp, #20
   d98ca:	4608      	mov	r0, r1
   d98cc:	4611      	mov	r1, r2
   d98ce:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d98d0:	2300      	movs	r3, #0
   d98d2:	f7fe fc37 	bl	d8144 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d98d6:	4d0d      	ldr	r5, [pc, #52]	; (d990c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d98d8:	f8ad 000c 	strh.w	r0, [sp, #12]
   d98dc:	2300      	movs	r3, #0
   d98de:	a901      	add	r1, sp, #4
   d98e0:	9301      	str	r3, [sp, #4]
   d98e2:	f8ad 3008 	strh.w	r3, [sp, #8]
   d98e6:	f88d 300a 	strb.w	r3, [sp, #10]
   d98ea:	4628      	mov	r0, r5
   d98ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d98f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   d98f4:	f7ff ffa8 	bl	d9848 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d98f8:	a801      	add	r0, sp, #4
   d98fa:	f7ff ff9c 	bl	d9836 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d98fe:	4620      	mov	r0, r4
   d9900:	4629      	mov	r1, r5
   d9902:	f7ff ffb7 	bl	d9874 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d9906:	4620      	mov	r0, r4
   d9908:	b005      	add	sp, #20
   d990a:	bd30      	pop	{r4, r5, pc}
   d990c:	2003e484 	.word	0x2003e484

000d9910 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9910:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9912:	4c09      	ldr	r4, [pc, #36]	; (d9938 <_GLOBAL__sub_I_System+0x28>)
   d9914:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9916:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d991a:	6020      	str	r0, [r4, #0]
   d991c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d991e:	71a0      	strb	r0, [r4, #6]
   d9920:	8120      	strh	r0, [r4, #8]
   d9922:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9924:	f7fe fbfe 	bl	d8124 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9928:	4620      	mov	r0, r4
   d992a:	4a04      	ldr	r2, [pc, #16]	; (d993c <_GLOBAL__sub_I_System+0x2c>)
   d992c:	4904      	ldr	r1, [pc, #16]	; (d9940 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d992e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9932:	f000 bc35 	b.w	da1a0 <__aeabi_atexit>
   d9936:	bf00      	nop
   d9938:	2003e484 	.word	0x2003e484
   d993c:	2003dea8 	.word	0x2003dea8
   d9940:	000d41a9 	.word	0x000d41a9

000d9944 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9944:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d9946:	4b14      	ldr	r3, [pc, #80]	; (d9998 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9948:	4f14      	ldr	r7, [pc, #80]	; (d999c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d994a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d994c:	4b14      	ldr	r3, [pc, #80]	; (d99a0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d994e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9950:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9952:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9954:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9956:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9958:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d995a:	d01b      	beq.n	d9994 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d995c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d995e:	ad01      	add	r5, sp, #4
   d9960:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9964:	f001 fb84 	bl	db070 <localtime>
	calendar_time->tm_year += 1900;
   d9968:	6943      	ldr	r3, [r0, #20]
   d996a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d996e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9970:	4604      	mov	r4, r0
   d9972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d997a:	f8d4 e000 	ldr.w	lr, [r4]
   d997e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9982:	ad01      	add	r5, sp, #4
   d9984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9986:	4c07      	ldr	r4, [pc, #28]	; (d99a4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d998a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d998c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d998e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9990:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9994:	b00b      	add	sp, #44	; 0x2c
   d9996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9998:	2003e4c0 	.word	0x2003e4c0
   d999c:	2003e4bc 	.word	0x2003e4bc
   d99a0:	2003e4b8 	.word	0x2003e4b8
   d99a4:	2003e490 	.word	0x2003e490

000d99a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d99a8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d99aa:	2000      	movs	r0, #0
   d99ac:	f7fe fc68 	bl	d8280 <spark_sync_time_pending>
   d99b0:	b128      	cbz	r0, d99be <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d99b2:	f7fe fc3d 	bl	d8230 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d99b6:	f080 0001 	eor.w	r0, r0, #1
   d99ba:	b2c0      	uxtb	r0, r0
   d99bc:	bd08      	pop	{r3, pc}
   d99be:	2001      	movs	r0, #1
    }
   d99c0:	bd08      	pop	{r3, pc}
	...

000d99c4 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d99c4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d99c6:	f7ff ffbd 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d99ca:	4b02      	ldr	r3, [pc, #8]	; (d99d4 <_ZN9TimeClass7weekdayEl+0x10>)
   d99cc:	6998      	ldr	r0, [r3, #24]
}
   d99ce:	3001      	adds	r0, #1
   d99d0:	bd08      	pop	{r3, pc}
   d99d2:	bf00      	nop
   d99d4:	2003e490 	.word	0x2003e490

000d99d8 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d99d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d99da:	f7ff ffb3 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d99de:	4b02      	ldr	r3, [pc, #8]	; (d99e8 <_ZN9TimeClass5monthEl+0x10>)
   d99e0:	6918      	ldr	r0, [r3, #16]
}
   d99e2:	3001      	adds	r0, #1
   d99e4:	bd08      	pop	{r3, pc}
   d99e6:	bf00      	nop
   d99e8:	2003e490 	.word	0x2003e490

000d99ec <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d99ec:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d99ee:	f7fe f9c7 	bl	d7d80 <HAL_RTC_Get_UnixTime>
   d99f2:	4b03      	ldr	r3, [pc, #12]	; (d9a00 <_ZN9TimeClass5localEv+0x14>)
   d99f4:	681b      	ldr	r3, [r3, #0]
   d99f6:	4418      	add	r0, r3
   d99f8:	4b02      	ldr	r3, [pc, #8]	; (d9a04 <_ZN9TimeClass5localEv+0x18>)
   d99fa:	681b      	ldr	r3, [r3, #0]
}
   d99fc:	4418      	add	r0, r3
   d99fe:	bd08      	pop	{r3, pc}
   d9a00:	2003e4c0 	.word	0x2003e4c0
   d9a04:	2003e4b8 	.word	0x2003e4b8

000d9a08 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9a08:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9a0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a14:	d40f      	bmi.n	d9a36 <_ZN9TimeClass4zoneEf+0x2e>
   d9a16:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9a1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a22:	dc08      	bgt.n	d9a36 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9a24:	eddf 7a04 	vldr	s15, [pc, #16]	; d9a38 <_ZN9TimeClass4zoneEf+0x30>
   d9a28:	4b04      	ldr	r3, [pc, #16]	; (d9a3c <_ZN9TimeClass4zoneEf+0x34>)
   d9a2a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9a2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9a32:	ed83 0a00 	vstr	s0, [r3]
   d9a36:	4770      	bx	lr
   d9a38:	45610000 	.word	0x45610000
   d9a3c:	2003e4c0 	.word	0x2003e4c0

000d9a40 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9a40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a48:	d40f      	bmi.n	d9a6a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d9a4a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9a4e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a56:	dc08      	bgt.n	d9a6a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9a58:	eddf 7a04 	vldr	s15, [pc, #16]	; d9a6c <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d9a5c:	4b04      	ldr	r3, [pc, #16]	; (d9a70 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d9a5e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9a62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9a66:	ed83 0a00 	vstr	s0, [r3]
   d9a6a:	4770      	bx	lr
   d9a6c:	45610000 	.word	0x45610000
   d9a70:	2003ddec 	.word	0x2003ddec

000d9a74 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9a74:	4b02      	ldr	r3, [pc, #8]	; (d9a80 <_ZN9TimeClass8beginDSTEv+0xc>)
   d9a76:	681a      	ldr	r2, [r3, #0]
   d9a78:	4b02      	ldr	r3, [pc, #8]	; (d9a84 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9a7a:	601a      	str	r2, [r3, #0]
   d9a7c:	4770      	bx	lr
   d9a7e:	bf00      	nop
   d9a80:	2003ddec 	.word	0x2003ddec
   d9a84:	2003e4b8 	.word	0x2003e4b8

000d9a88 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9a88:	4b01      	ldr	r3, [pc, #4]	; (d9a90 <_ZN9TimeClass6endDSTEv+0x8>)
   d9a8a:	2200      	movs	r2, #0
   d9a8c:	601a      	str	r2, [r3, #0]
   d9a8e:	4770      	bx	lr
   d9a90:	2003e4b8 	.word	0x2003e4b8

000d9a94 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9a94:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d9a96:	f7fe f97b 	bl	d7d90 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9a9a:	2200      	movs	r2, #0
   d9a9c:	4611      	mov	r1, r2
   d9a9e:	4610      	mov	r0, r2
}
   d9aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9aa4:	f7fe bb76 	b.w	d8194 <system_notify_time_changed>

000d9aa8 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d9aaa:	4b0e      	ldr	r3, [pc, #56]	; (d9ae4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d9aac:	681b      	ldr	r3, [r3, #0]
   d9aae:	4419      	add	r1, r3
   d9ab0:	4b0d      	ldr	r3, [pc, #52]	; (d9ae8 <_ZN9TimeClass7timeStrEl+0x40>)
   d9ab2:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9ab4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d9ab6:	a802      	add	r0, sp, #8
   d9ab8:	4419      	add	r1, r3
   d9aba:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9abe:	f001 fad7 	bl	db070 <localtime>
        char* ascstr = asctime(calendar_time);
   d9ac2:	f001 f9d9 	bl	dae78 <asctime>
   d9ac6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9ac8:	f002 fbb0 	bl	dc22c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9acc:	4428      	add	r0, r5
   d9ace:	2300      	movs	r3, #0
   d9ad0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d9ad4:	4629      	mov	r1, r5
   d9ad6:	4620      	mov	r0, r4
   d9ad8:	f7ff fe56 	bl	d9788 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9adc:	4620      	mov	r0, r4
   d9ade:	b003      	add	sp, #12
   d9ae0:	bd30      	pop	{r4, r5, pc}
   d9ae2:	bf00      	nop
   d9ae4:	2003e4c0 	.word	0x2003e4c0
   d9ae8:	2003e4b8 	.word	0x2003e4b8

000d9aec <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9af0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9af2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9af4:	4607      	mov	r7, r0
   d9af6:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9af8:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9afa:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9afc:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9afe:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9b00:	f002 fbb1 	bl	dc266 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9b04:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9b06:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9b08:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9b0c:	f002 fb8e 	bl	dc22c <strlen>
   d9b10:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9b12:	b925      	cbnz	r5, d9b1e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d9b14:	4924      	ldr	r1, [pc, #144]	; (d9ba8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d9b16:	a803      	add	r0, sp, #12
   d9b18:	f001 fe50 	bl	db7bc <strcpy>
   d9b1c:	e013      	b.n	d9b46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9b1e:	213c      	movs	r1, #60	; 0x3c
   d9b20:	fb95 f2f1 	sdiv	r2, r5, r1
   d9b24:	2a00      	cmp	r2, #0
   d9b26:	bfb8      	it	lt
   d9b28:	4252      	neglt	r2, r2
   d9b2a:	fb92 f3f1 	sdiv	r3, r2, r1
   d9b2e:	fb01 2213 	mls	r2, r1, r3, r2
   d9b32:	9200      	str	r2, [sp, #0]
   d9b34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9b38:	4a1c      	ldr	r2, [pc, #112]	; (d9bac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d9b3a:	fb95 f3f3 	sdiv	r3, r5, r3
   d9b3e:	2110      	movs	r1, #16
   d9b40:	a803      	add	r0, sp, #12
   d9b42:	f7fe fc2d 	bl	d83a0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9b46:	4625      	mov	r5, r4
   d9b48:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9b4a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d9b4e:	45b2      	cmp	sl, r6
   d9b50:	d91b      	bls.n	d9b8a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9b52:	782b      	ldrb	r3, [r5, #0]
   d9b54:	2b25      	cmp	r3, #37	; 0x25
   d9b56:	d116      	bne.n	d9b86 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9b58:	786b      	ldrb	r3, [r5, #1]
   d9b5a:	2b7a      	cmp	r3, #122	; 0x7a
   d9b5c:	d113      	bne.n	d9b86 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d9b5e:	a803      	add	r0, sp, #12
   d9b60:	f002 fb64 	bl	dc22c <strlen>
   d9b64:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9b66:	4430      	add	r0, r6
   d9b68:	ebc6 020a 	rsb	r2, r6, sl
   d9b6c:	1ca9      	adds	r1, r5, #2
   d9b6e:	4420      	add	r0, r4
   d9b70:	f001 fb76 	bl	db260 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9b74:	4642      	mov	r2, r8
   d9b76:	a903      	add	r1, sp, #12
   d9b78:	4628      	mov	r0, r5
   d9b7a:	f001 fb71 	bl	db260 <memcpy>
            len = strlen(format_str);
   d9b7e:	4620      	mov	r0, r4
   d9b80:	f002 fb54 	bl	dc22c <strlen>
   d9b84:	4680      	mov	r8, r0
   d9b86:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9b88:	e7de      	b.n	d9b48 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d9b8a:	464b      	mov	r3, r9
   d9b8c:	4622      	mov	r2, r4
   d9b8e:	2132      	movs	r1, #50	; 0x32
   d9b90:	a807      	add	r0, sp, #28
   d9b92:	f001 fe97 	bl	db8c4 <strftime>
    return String(buf);
   d9b96:	a907      	add	r1, sp, #28
   d9b98:	4638      	mov	r0, r7
   d9b9a:	f7ff fdf5 	bl	d9788 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9b9e:	4638      	mov	r0, r7
   d9ba0:	b024      	add	sp, #144	; 0x90
   d9ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9ba6:	bf00      	nop
   d9ba8:	000dde7d 	.word	0x000dde7d
   d9bac:	000dd8f2 	.word	0x000dd8f2

000d9bb0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9bb2:	4605      	mov	r5, r0
   d9bb4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9bb6:	461c      	mov	r4, r3
   d9bb8:	b913      	cbnz	r3, d9bc0 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d9bba:	4b12      	ldr	r3, [pc, #72]	; (d9c04 <_ZN9TimeClass6formatElPKc+0x54>)
   d9bbc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d9bbe:	b12c      	cbz	r4, d9bcc <_ZN9TimeClass6formatElPKc+0x1c>
   d9bc0:	4b11      	ldr	r3, [pc, #68]	; (d9c08 <_ZN9TimeClass6formatElPKc+0x58>)
   d9bc2:	4620      	mov	r0, r4
   d9bc4:	6819      	ldr	r1, [r3, #0]
   d9bc6:	f001 fdef 	bl	db7a8 <strcmp>
   d9bca:	b920      	cbnz	r0, d9bd6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d9bcc:	9901      	ldr	r1, [sp, #4]
   d9bce:	4628      	mov	r0, r5
   d9bd0:	f7ff ff6a 	bl	d9aa8 <_ZN9TimeClass7timeStrEl>
   d9bd4:	e013      	b.n	d9bfe <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9bd6:	4f0d      	ldr	r7, [pc, #52]	; (d9c0c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9bd8:	9a01      	ldr	r2, [sp, #4]
   d9bda:	683b      	ldr	r3, [r7, #0]
   d9bdc:	4e0c      	ldr	r6, [pc, #48]	; (d9c10 <_ZN9TimeClass6formatElPKc+0x60>)
   d9bde:	441a      	add	r2, r3
   d9be0:	6833      	ldr	r3, [r6, #0]
   d9be2:	a802      	add	r0, sp, #8
   d9be4:	4413      	add	r3, r2
   d9be6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d9bea:	f001 fa41 	bl	db070 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9bee:	683a      	ldr	r2, [r7, #0]
   d9bf0:	6833      	ldr	r3, [r6, #0]
   d9bf2:	4601      	mov	r1, r0
   d9bf4:	4413      	add	r3, r2
   d9bf6:	4628      	mov	r0, r5
   d9bf8:	4622      	mov	r2, r4
   d9bfa:	f7ff ff77 	bl	d9aec <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d9bfe:	4628      	mov	r0, r5
   d9c00:	b003      	add	sp, #12
   d9c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c04:	2003e4b4 	.word	0x2003e4b4
   d9c08:	2003ddf0 	.word	0x2003ddf0
   d9c0c:	2003e4c0 	.word	0x2003e4c0
   d9c10:	2003e4b8 	.word	0x2003e4b8

000d9c14 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9c14:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9c16:	2000      	movs	r0, #0
   d9c18:	f7fe f8d2 	bl	d7dc0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9c1c:	4604      	mov	r4, r0
   d9c1e:	b968      	cbnz	r0, d9c3c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9c20:	f7fe fa78 	bl	d8114 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9c24:	2801      	cmp	r0, #1
   d9c26:	d10b      	bne.n	d9c40 <_ZN9TimeClass7isValidEv+0x2c>
   d9c28:	4620      	mov	r0, r4
   d9c2a:	f7fe faab 	bl	d8184 <system_thread_get_state>
   d9c2e:	b938      	cbnz	r0, d9c40 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9c30:	f7ff feba 	bl	d99a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9c34:	b930      	cbnz	r0, d9c44 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9c36:	f7fe fae3 	bl	d8200 <spark_process>
   d9c3a:	e7f9      	b.n	d9c30 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9c3c:	2001      	movs	r0, #1
   d9c3e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9c40:	2000      	movs	r0, #0
   d9c42:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9c44:	f7ff feb0 	bl	d99a8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9c48:	2000      	movs	r0, #0
   d9c4a:	f7fe f8b9 	bl	d7dc0 <HAL_RTC_Time_Is_Valid>
   d9c4e:	3000      	adds	r0, #0
   d9c50:	bf18      	it	ne
   d9c52:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9c54:	bd10      	pop	{r4, pc}

000d9c56 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9c56:	b508      	push	{r3, lr}
    (void)isValid();
   d9c58:	f7ff ffdc 	bl	d9c14 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9c60:	f7fe b88e 	b.w	d7d80 <HAL_RTC_Get_UnixTime>

000d9c64 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9c64:	b508      	push	{r3, lr}
	return hour(now());
   d9c66:	f7ff fff6 	bl	d9c56 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c6a:	f7ff fe6b 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9c6e:	4b01      	ldr	r3, [pc, #4]	; (d9c74 <_ZN9TimeClass4hourEv+0x10>)
   d9c70:	6898      	ldr	r0, [r3, #8]
   d9c72:	bd08      	pop	{r3, pc}
   d9c74:	2003e490 	.word	0x2003e490

000d9c78 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9c78:	b508      	push	{r3, lr}
	return minute(now());
   d9c7a:	f7ff ffec 	bl	d9c56 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c7e:	f7ff fe61 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9c82:	4b01      	ldr	r3, [pc, #4]	; (d9c88 <_ZN9TimeClass6minuteEv+0x10>)
   d9c84:	6858      	ldr	r0, [r3, #4]
   d9c86:	bd08      	pop	{r3, pc}
   d9c88:	2003e490 	.word	0x2003e490

000d9c8c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9c8c:	b508      	push	{r3, lr}
	return day(now());
   d9c8e:	f7ff ffe2 	bl	d9c56 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c92:	f7ff fe57 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9c96:	4b01      	ldr	r3, [pc, #4]	; (d9c9c <_ZN9TimeClass3dayEv+0x10>)
   d9c98:	68d8      	ldr	r0, [r3, #12]
   d9c9a:	bd08      	pop	{r3, pc}
   d9c9c:	2003e490 	.word	0x2003e490

000d9ca0 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d9ca0:	b508      	push	{r3, lr}
	return weekday(now());
   d9ca2:	f7ff ffd8 	bl	d9c56 <_ZN9TimeClass3nowEv>
}
   d9ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d9caa:	f7ff be8b 	b.w	d99c4 <_ZN9TimeClass7weekdayEl>

000d9cae <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9cae:	b508      	push	{r3, lr}
	return month(now());
   d9cb0:	f7ff ffd1 	bl	d9c56 <_ZN9TimeClass3nowEv>
}
   d9cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9cb8:	f7ff be8e 	b.w	d99d8 <_ZN9TimeClass5monthEl>

000d9cbc <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9cbc:	b508      	push	{r3, lr}
	return year(now());
   d9cbe:	f7ff ffca 	bl	d9c56 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9cc2:	f7ff fe3f 	bl	d9944 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9cc6:	4b01      	ldr	r3, [pc, #4]	; (d9ccc <_ZN9TimeClass4yearEv+0x10>)
   d9cc8:	6958      	ldr	r0, [r3, #20]
   d9cca:	bd08      	pop	{r3, pc}
   d9ccc:	2003e490 	.word	0x2003e490

000d9cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9cd0:	4b02      	ldr	r3, [pc, #8]	; (d9cdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9cd2:	681a      	ldr	r2, [r3, #0]
   d9cd4:	4b02      	ldr	r3, [pc, #8]	; (d9ce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9cd6:	601a      	str	r2, [r3, #0]
   d9cd8:	4770      	bx	lr
   d9cda:	bf00      	nop
   d9cdc:	2003ddf0 	.word	0x2003ddf0
   d9ce0:	2003e4b4 	.word	0x2003e4b4

000d9ce4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9ce4:	4770      	bx	lr

000d9ce6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ce6:	7441      	strb	r1, [r0, #17]
   d9ce8:	4770      	bx	lr

000d9cea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9cea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9cec:	7c00      	ldrb	r0, [r0, #16]
   d9cee:	f7fe f9b7 	bl	d8060 <HAL_USART_Available_Data_For_Write>
}
   d9cf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9cf6:	bd08      	pop	{r3, pc}

000d9cf8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9cf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9cfa:	7c00      	ldrb	r0, [r0, #16]
   d9cfc:	f7fe f988 	bl	d8010 <HAL_USART_Available_Data>
}
   d9d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d04:	bd08      	pop	{r3, pc}

000d9d06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9d06:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9d08:	7c00      	ldrb	r0, [r0, #16]
   d9d0a:	f7fe f991 	bl	d8030 <HAL_USART_Peek_Data>
}
   d9d0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d12:	bf28      	it	cs
   d9d14:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9d18:	bd08      	pop	{r3, pc}

000d9d1a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9d1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9d1c:	7c00      	ldrb	r0, [r0, #16]
   d9d1e:	f7fe f97f 	bl	d8020 <HAL_USART_Read_Data>
}
   d9d22:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d26:	bf28      	it	cs
   d9d28:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9d2c:	bd08      	pop	{r3, pc}

000d9d2e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9d2e:	7c00      	ldrb	r0, [r0, #16]
   d9d30:	f7fe b986 	b.w	d8040 <HAL_USART_Flush_Data>

000d9d34 <_ZN11USARTSerialD0Ev>:
   d9d34:	b510      	push	{r4, lr}
   d9d36:	2114      	movs	r1, #20
   d9d38:	4604      	mov	r4, r0
   d9d3a:	f000 fa36 	bl	da1aa <_ZdlPvj>
   d9d3e:	4620      	mov	r0, r4
   d9d40:	bd10      	pop	{r4, pc}

000d9d42 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9d42:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9d44:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9d46:	4604      	mov	r4, r0
   d9d48:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9d4a:	b925      	cbnz	r5, d9d56 <_ZN11USARTSerial5writeEh+0x14>
   d9d4c:	7c00      	ldrb	r0, [r0, #16]
   d9d4e:	f7fe f987 	bl	d8060 <HAL_USART_Available_Data_For_Write>
   d9d52:	2800      	cmp	r0, #0
   d9d54:	dd05      	ble.n	d9d62 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9d56:	4631      	mov	r1, r6
   d9d58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9d5e:	f7fe b94f 	b.w	d8000 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9d62:	4628      	mov	r0, r5
   d9d64:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9d68:	b510      	push	{r4, lr}
   d9d6a:	4604      	mov	r4, r0
   d9d6c:	4608      	mov	r0, r1
   d9d6e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d70:	2200      	movs	r2, #0
   d9d72:	6062      	str	r2, [r4, #4]
   d9d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9d78:	60a2      	str	r2, [r4, #8]
   d9d7a:	4a05      	ldr	r2, [pc, #20]	; (d9d90 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9d7c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9d7e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9d80:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9d82:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9d84:	461a      	mov	r2, r3
   d9d86:	f7fe f933 	bl	d7ff0 <HAL_USART_Init>
}
   d9d8a:	4620      	mov	r0, r4
   d9d8c:	bd10      	pop	{r4, pc}
   d9d8e:	bf00      	nop
   d9d90:	000dd924 	.word	0x000dd924

000d9d94 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9d94:	7c00      	ldrb	r0, [r0, #16]
   d9d96:	f7fe b95b 	b.w	d8050 <HAL_USART_Is_Enabled>
	...

000d9d9c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9d9c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9d9e:	4d0c      	ldr	r5, [pc, #48]	; (d9dd0 <_Z22__fetch_global_Serial1v+0x34>)
   d9da0:	6829      	ldr	r1, [r5, #0]
   d9da2:	f011 0401 	ands.w	r4, r1, #1
   d9da6:	d111      	bne.n	d9dcc <_Z22__fetch_global_Serial1v+0x30>
   d9da8:	4628      	mov	r0, r5
   d9daa:	f7fa f987 	bl	d40bc <__cxa_guard_acquire>
   d9dae:	b168      	cbz	r0, d9dcc <_Z22__fetch_global_Serial1v+0x30>
   d9db0:	4a08      	ldr	r2, [pc, #32]	; (d9dd4 <_Z22__fetch_global_Serial1v+0x38>)
   d9db2:	4b09      	ldr	r3, [pc, #36]	; (d9dd8 <_Z22__fetch_global_Serial1v+0x3c>)
   d9db4:	4809      	ldr	r0, [pc, #36]	; (d9ddc <_Z22__fetch_global_Serial1v+0x40>)
   d9db6:	4621      	mov	r1, r4
   d9db8:	f7ff ffd6 	bl	d9d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9dbc:	4628      	mov	r0, r5
   d9dbe:	f7fa f982 	bl	d40c6 <__cxa_guard_release>
   d9dc2:	4a07      	ldr	r2, [pc, #28]	; (d9de0 <_Z22__fetch_global_Serial1v+0x44>)
   d9dc4:	4907      	ldr	r1, [pc, #28]	; (d9de4 <_Z22__fetch_global_Serial1v+0x48>)
   d9dc6:	4805      	ldr	r0, [pc, #20]	; (d9ddc <_Z22__fetch_global_Serial1v+0x40>)
   d9dc8:	f000 f9ea 	bl	da1a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9dcc:	4803      	ldr	r0, [pc, #12]	; (d9ddc <_Z22__fetch_global_Serial1v+0x40>)
   d9dce:	bd38      	pop	{r3, r4, r5, pc}
   d9dd0:	2003e560 	.word	0x2003e560
   d9dd4:	2003e564 	.word	0x2003e564
   d9dd8:	2003e4dc 	.word	0x2003e4dc
   d9ddc:	2003e4c8 	.word	0x2003e4c8
   d9de0:	2003dea8 	.word	0x2003dea8
   d9de4:	000d9ce5 	.word	0x000d9ce5

000d9de8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9de8:	7441      	strb	r1, [r0, #17]
   d9dea:	4770      	bx	lr

000d9dec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9dec:	4770      	bx	lr

000d9dee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9dee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9df0:	2100      	movs	r1, #0
   d9df2:	7c00      	ldrb	r0, [r0, #16]
   d9df4:	f7fe f95c 	bl	d80b0 <HAL_USB_USART_Receive_Data>
}
   d9df8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9dfc:	bf28      	it	cs
   d9dfe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e02:	bd08      	pop	{r3, pc}

000d9e04 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9e06:	2101      	movs	r1, #1
   d9e08:	7c00      	ldrb	r0, [r0, #16]
   d9e0a:	f7fe f951 	bl	d80b0 <HAL_USB_USART_Receive_Data>
}
   d9e0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e12:	bf28      	it	cs
   d9e14:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e18:	bd08      	pop	{r3, pc}

000d9e1a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9e1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9e1c:	7c00      	ldrb	r0, [r0, #16]
   d9e1e:	f7fe f93f 	bl	d80a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d9e22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e26:	bd08      	pop	{r3, pc}

000d9e28 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9e28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9e2a:	7c00      	ldrb	r0, [r0, #16]
   d9e2c:	f7fe f930 	bl	d8090 <HAL_USB_USART_Available_Data>
}
   d9e30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e34:	bd08      	pop	{r3, pc}

000d9e36 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9e36:	7c00      	ldrb	r0, [r0, #16]
   d9e38:	f7fe b94a 	b.w	d80d0 <HAL_USB_USART_Flush_Data>

000d9e3c <_ZN9USBSerialD0Ev>:
   d9e3c:	b510      	push	{r4, lr}
   d9e3e:	2114      	movs	r1, #20
   d9e40:	4604      	mov	r4, r0
   d9e42:	f000 f9b2 	bl	da1aa <_ZdlPvj>
   d9e46:	4620      	mov	r0, r4
   d9e48:	bd10      	pop	{r4, pc}

000d9e4a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9e4a:	b538      	push	{r3, r4, r5, lr}
   d9e4c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e4e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9e50:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e52:	f7fe f925 	bl	d80a0 <HAL_USB_USART_Available_Data_For_Write>
   d9e56:	2800      	cmp	r0, #0
   d9e58:	dc01      	bgt.n	d9e5e <_ZN9USBSerial5writeEh+0x14>
   d9e5a:	7c60      	ldrb	r0, [r4, #17]
   d9e5c:	b128      	cbz	r0, d9e6a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9e5e:	4629      	mov	r1, r5
   d9e60:	7c20      	ldrb	r0, [r4, #16]
   d9e62:	f7fe f92d 	bl	d80c0 <HAL_USB_USART_Send_Data>
   d9e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9e6a:	bd38      	pop	{r3, r4, r5, pc}

000d9e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e6c:	b510      	push	{r4, lr}
   d9e6e:	4604      	mov	r4, r0
   d9e70:	2300      	movs	r3, #0
   d9e72:	6063      	str	r3, [r4, #4]
   d9e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9e78:	60a3      	str	r3, [r4, #8]
   d9e7a:	4b05      	ldr	r3, [pc, #20]	; (d9e90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9e7c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9e7e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e80:	4608      	mov	r0, r1
{
  _serial = serial;
   d9e82:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9e84:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9e86:	4611      	mov	r1, r2
   d9e88:	f7fe f8f2 	bl	d8070 <HAL_USB_USART_Init>
}
   d9e8c:	4620      	mov	r0, r4
   d9e8e:	bd10      	pop	{r4, pc}
   d9e90:	000dd954 	.word	0x000dd954

000d9e94 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9e94:	2200      	movs	r2, #0
   d9e96:	7c00      	ldrb	r0, [r0, #16]
   d9e98:	f7fe b8f2 	b.w	d8080 <HAL_USB_USART_Begin>

000d9e9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9e9e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9ea0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9ea2:	2100      	movs	r1, #0
   d9ea4:	f001 fa02 	bl	db2ac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9ea8:	4620      	mov	r0, r4
   d9eaa:	bd10      	pop	{r4, pc}

000d9eac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9eac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9eae:	4d0e      	ldr	r5, [pc, #56]	; (d9ee8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9eb0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9eb2:	a801      	add	r0, sp, #4
   d9eb4:	f7ff fff2 	bl	d9e9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9eb8:	6829      	ldr	r1, [r5, #0]
   d9eba:	f011 0401 	ands.w	r4, r1, #1
   d9ebe:	d110      	bne.n	d9ee2 <_Z16_fetch_usbserialv+0x36>
   d9ec0:	4628      	mov	r0, r5
   d9ec2:	f7fa f8fb 	bl	d40bc <__cxa_guard_acquire>
   d9ec6:	b160      	cbz	r0, d9ee2 <_Z16_fetch_usbserialv+0x36>
   d9ec8:	aa01      	add	r2, sp, #4
   d9eca:	4621      	mov	r1, r4
   d9ecc:	4807      	ldr	r0, [pc, #28]	; (d9eec <_Z16_fetch_usbserialv+0x40>)
   d9ece:	f7ff ffcd 	bl	d9e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9ed2:	4628      	mov	r0, r5
   d9ed4:	f7fa f8f7 	bl	d40c6 <__cxa_guard_release>
   d9ed8:	4a05      	ldr	r2, [pc, #20]	; (d9ef0 <_Z16_fetch_usbserialv+0x44>)
   d9eda:	4906      	ldr	r1, [pc, #24]	; (d9ef4 <_Z16_fetch_usbserialv+0x48>)
   d9edc:	4803      	ldr	r0, [pc, #12]	; (d9eec <_Z16_fetch_usbserialv+0x40>)
   d9ede:	f000 f95f 	bl	da1a0 <__aeabi_atexit>
	return _usbserial;
}
   d9ee2:	4802      	ldr	r0, [pc, #8]	; (d9eec <_Z16_fetch_usbserialv+0x40>)
   d9ee4:	b007      	add	sp, #28
   d9ee6:	bd30      	pop	{r4, r5, pc}
   d9ee8:	2003e5e8 	.word	0x2003e5e8
   d9eec:	2003e5ec 	.word	0x2003e5ec
   d9ef0:	2003dea8 	.word	0x2003dea8
   d9ef4:	000d9ded 	.word	0x000d9ded

000d9ef8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9ef8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9efa:	4b0c      	ldr	r3, [pc, #48]	; (d9f2c <serialEventRun+0x34>)
   d9efc:	b133      	cbz	r3, d9f0c <serialEventRun+0x14>
   d9efe:	f7ff ffd5 	bl	d9eac <_Z16_fetch_usbserialv>
   d9f02:	6803      	ldr	r3, [r0, #0]
   d9f04:	691b      	ldr	r3, [r3, #16]
   d9f06:	4798      	blx	r3
   d9f08:	2800      	cmp	r0, #0
   d9f0a:	dc09      	bgt.n	d9f20 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9f0c:	4b08      	ldr	r3, [pc, #32]	; (d9f30 <serialEventRun+0x38>)
   d9f0e:	b163      	cbz	r3, d9f2a <serialEventRun+0x32>
   d9f10:	f7ff ff44 	bl	d9d9c <_Z22__fetch_global_Serial1v>
   d9f14:	6803      	ldr	r3, [r0, #0]
   d9f16:	691b      	ldr	r3, [r3, #16]
   d9f18:	4798      	blx	r3
   d9f1a:	2800      	cmp	r0, #0
   d9f1c:	dc03      	bgt.n	d9f26 <serialEventRun+0x2e>
   d9f1e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9f20:	f3af 8000 	nop.w
   d9f24:	e7f2      	b.n	d9f0c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9f26:	f3af 8000 	nop.w
   d9f2a:	bd08      	pop	{r3, pc}
	...

000d9f34 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9f34:	b508      	push	{r3, lr}
	serialEventRun();
   d9f36:	f7ff ffdf 	bl	d9ef8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9f3a:	f7fd ff19 	bl	d7d70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9f3e:	4b01      	ldr	r3, [pc, #4]	; (d9f44 <_post_loop+0x10>)
   d9f40:	6018      	str	r0, [r3, #0]
   d9f42:	bd08      	pop	{r3, pc}
   d9f44:	2003e608 	.word	0x2003e608

000d9f48 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9f48:	4802      	ldr	r0, [pc, #8]	; (d9f54 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9f4a:	4a03      	ldr	r2, [pc, #12]	; (d9f58 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9f4c:	4903      	ldr	r1, [pc, #12]	; (d9f5c <_Z33system_initialize_user_backup_ramv+0x14>)
   d9f4e:	1a12      	subs	r2, r2, r0
   d9f50:	f001 b986 	b.w	db260 <memcpy>
   d9f54:	2003f400 	.word	0x2003f400
   d9f58:	2003fc1c 	.word	0x2003fc1c
   d9f5c:	000ddf30 	.word	0x000ddf30

000d9f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9f60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f62:	2300      	movs	r3, #0
   d9f64:	9300      	str	r3, [sp, #0]
   d9f66:	461a      	mov	r2, r3
   d9f68:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f6c:	f7fe f924 	bl	d81b8 <system_ctrl_set_result>
}
   d9f70:	b003      	add	sp, #12
   d9f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f78 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9f78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9f7a:	8843      	ldrh	r3, [r0, #2]
   d9f7c:	2b0a      	cmp	r3, #10
   d9f7e:	d008      	beq.n	d9f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9f80:	2b50      	cmp	r3, #80	; 0x50
   d9f82:	d109      	bne.n	d9f98 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9f84:	4b09      	ldr	r3, [pc, #36]	; (d9fac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9f86:	681b      	ldr	r3, [r3, #0]
   d9f88:	b13b      	cbz	r3, d9f9a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9f8a:	b003      	add	sp, #12
   d9f8c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9f90:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9f92:	f7ff ffe5 	bl	d9f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9f96:	e006      	b.n	d9fa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f98:	2300      	movs	r3, #0
   d9f9a:	9300      	str	r3, [sp, #0]
   d9f9c:	461a      	mov	r2, r3
   d9f9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9fa2:	f7fe f909 	bl	d81b8 <system_ctrl_set_result>
        break;
    }
}
   d9fa6:	b003      	add	sp, #12
   d9fa8:	f85d fb04 	ldr.w	pc, [sp], #4
   d9fac:	2003e600 	.word	0x2003e600

000d9fb0 <module_user_init_hook>:

void module_user_init_hook()
{
   d9fb0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9fb2:	4c10      	ldr	r4, [pc, #64]	; (d9ff4 <module_user_init_hook+0x44>)
   d9fb4:	4d10      	ldr	r5, [pc, #64]	; (d9ff8 <module_user_init_hook+0x48>)
   d9fb6:	6823      	ldr	r3, [r4, #0]
   d9fb8:	42ab      	cmp	r3, r5
   d9fba:	4b10      	ldr	r3, [pc, #64]	; (d9ffc <module_user_init_hook+0x4c>)
   d9fbc:	bf0c      	ite	eq
   d9fbe:	2201      	moveq	r2, #1
   d9fc0:	2200      	movne	r2, #0
   d9fc2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9fc4:	d002      	beq.n	d9fcc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9fc6:	f7ff ffbf 	bl	d9f48 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9fca:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9fcc:	f7fd feb8 	bl	d7d40 <HAL_RNG_GetRandomNumber>
   d9fd0:	4604      	mov	r4, r0
    srand(seed);
   d9fd2:	f001 fbc1 	bl	db758 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9fd6:	4b0a      	ldr	r3, [pc, #40]	; (da000 <module_user_init_hook+0x50>)
   d9fd8:	b113      	cbz	r3, d9fe0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9fda:	4620      	mov	r0, r4
   d9fdc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9fe0:	2100      	movs	r1, #0
   d9fe2:	4807      	ldr	r0, [pc, #28]	; (da000 <module_user_init_hook+0x50>)
   d9fe4:	f7fe f95c 	bl	d82a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9fe8:	2100      	movs	r1, #0
   d9fea:	4806      	ldr	r0, [pc, #24]	; (da004 <module_user_init_hook+0x54>)
}
   d9fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9ff0:	f7fe b8d8 	b.w	d81a4 <system_ctrl_set_app_request_handler>
   d9ff4:	2003fc18 	.word	0x2003fc18
   d9ff8:	9a271c1e 	.word	0x9a271c1e
   d9ffc:	2003e604 	.word	0x2003e604
   da000:	00000000 	.word	0x00000000
   da004:	000d9f79 	.word	0x000d9f79

000da008 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da008:	b508      	push	{r3, lr}
   da00a:	4b02      	ldr	r3, [pc, #8]	; (da014 <spark_protocol_instance+0xc>)
   da00c:	681b      	ldr	r3, [r3, #0]
   da00e:	681b      	ldr	r3, [r3, #0]
   da010:	9301      	str	r3, [sp, #4]
   da012:	bd08      	pop	{r3, pc}
   da014:	0003025c 	.word	0x0003025c

000da018 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da018:	b508      	push	{r3, lr}
   da01a:	4b02      	ldr	r3, [pc, #8]	; (da024 <spark_protocol_set_product_id+0xc>)
   da01c:	681b      	ldr	r3, [r3, #0]
   da01e:	685b      	ldr	r3, [r3, #4]
   da020:	9301      	str	r3, [sp, #4]
   da022:	bd08      	pop	{r3, pc}
   da024:	0003025c 	.word	0x0003025c

000da028 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da028:	b508      	push	{r3, lr}
   da02a:	4b02      	ldr	r3, [pc, #8]	; (da034 <spark_protocol_set_product_firmware_version+0xc>)
   da02c:	681b      	ldr	r3, [r3, #0]
   da02e:	689b      	ldr	r3, [r3, #8]
   da030:	9301      	str	r3, [sp, #4]
   da032:	bd08      	pop	{r3, pc}
   da034:	0003025c 	.word	0x0003025c

000da038 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da038:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da03a:	4e18      	ldr	r6, [pc, #96]	; (da09c <pinAvailable+0x64>)
   da03c:	6831      	ldr	r1, [r6, #0]
   da03e:	f011 0501 	ands.w	r5, r1, #1
   da042:	4604      	mov	r4, r0
   da044:	d10a      	bne.n	da05c <pinAvailable+0x24>
   da046:	4630      	mov	r0, r6
   da048:	f7fa f838 	bl	d40bc <__cxa_guard_acquire>
   da04c:	b130      	cbz	r0, da05c <pinAvailable+0x24>
   da04e:	4629      	mov	r1, r5
   da050:	4813      	ldr	r0, [pc, #76]	; (da0a0 <pinAvailable+0x68>)
   da052:	f7ff faa5 	bl	d95a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da056:	4630      	mov	r0, r6
   da058:	f7fa f835 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da05c:	4810      	ldr	r0, [pc, #64]	; (da0a0 <pinAvailable+0x68>)
   da05e:	f7ff fb49 	bl	d96f4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da062:	b128      	cbz	r0, da070 <pinAvailable+0x38>
   da064:	f1a4 030b 	sub.w	r3, r4, #11
   da068:	2b02      	cmp	r3, #2
   da06a:	d801      	bhi.n	da070 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da06c:	2000      	movs	r0, #0
   da06e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da070:	f000 f870 	bl	da154 <_Z19__fetch_global_Wirev>
   da074:	f7fe fef3 	bl	d8e5e <_ZN7TwoWire9isEnabledEv>
   da078:	b108      	cbz	r0, da07e <pinAvailable+0x46>
   da07a:	2c01      	cmp	r4, #1
   da07c:	d9f6      	bls.n	da06c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da07e:	f7ff fe8d 	bl	d9d9c <_Z22__fetch_global_Serial1v>
   da082:	f7ff fe87 	bl	d9d94 <_ZN11USARTSerial9isEnabledEv>
   da086:	b118      	cbz	r0, da090 <pinAvailable+0x58>
   da088:	f1a4 0309 	sub.w	r3, r4, #9
   da08c:	2b01      	cmp	r3, #1
   da08e:	d9ed      	bls.n	da06c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da090:	2c23      	cmp	r4, #35	; 0x23
   da092:	bf8c      	ite	hi
   da094:	2000      	movhi	r0, #0
   da096:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da098:	bd70      	pop	{r4, r5, r6, pc}
   da09a:	bf00      	nop
   da09c:	2003e078 	.word	0x2003e078
   da0a0:	2003e07c 	.word	0x2003e07c

000da0a4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da0a4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da0a6:	b538      	push	{r3, r4, r5, lr}
   da0a8:	4604      	mov	r4, r0
   da0aa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da0ac:	d80a      	bhi.n	da0c4 <pinMode+0x20>
   da0ae:	29ff      	cmp	r1, #255	; 0xff
   da0b0:	d008      	beq.n	da0c4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da0b2:	f7ff ffc1 	bl	da038 <pinAvailable>
   da0b6:	b128      	cbz	r0, da0c4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da0b8:	4629      	mov	r1, r5
   da0ba:	4620      	mov	r0, r4
}
   da0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da0c0:	f7fd be96 	b.w	d7df0 <HAL_Pin_Mode>
   da0c4:	bd38      	pop	{r3, r4, r5, pc}

000da0c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da0c6:	b538      	push	{r3, r4, r5, lr}
   da0c8:	4604      	mov	r4, r0
   da0ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da0cc:	f7fd fe98 	bl	d7e00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da0d0:	28ff      	cmp	r0, #255	; 0xff
   da0d2:	d010      	beq.n	da0f6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da0d4:	2806      	cmp	r0, #6
   da0d6:	d804      	bhi.n	da0e2 <digitalWrite+0x1c>
   da0d8:	234d      	movs	r3, #77	; 0x4d
   da0da:	fa23 f000 	lsr.w	r0, r3, r0
   da0de:	07c3      	lsls	r3, r0, #31
   da0e0:	d409      	bmi.n	da0f6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da0e2:	4620      	mov	r0, r4
   da0e4:	f7ff ffa8 	bl	da038 <pinAvailable>
   da0e8:	b128      	cbz	r0, da0f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da0ea:	4629      	mov	r1, r5
   da0ec:	4620      	mov	r0, r4
}
   da0ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da0f2:	f7fd be8d 	b.w	d7e10 <HAL_GPIO_Write>
   da0f6:	bd38      	pop	{r3, r4, r5, pc}

000da0f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da0f8:	b510      	push	{r4, lr}
   da0fa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da0fc:	f7fd fe80 	bl	d7e00 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da100:	3804      	subs	r0, #4
   da102:	b2c0      	uxtb	r0, r0
   da104:	2801      	cmp	r0, #1
   da106:	d908      	bls.n	da11a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da108:	4620      	mov	r0, r4
   da10a:	f7ff ff95 	bl	da038 <pinAvailable>
   da10e:	b120      	cbz	r0, da11a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da110:	4620      	mov	r0, r4
}
   da112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da116:	f7fd be83 	b.w	d7e20 <HAL_GPIO_Read>
}
   da11a:	2000      	movs	r0, #0
   da11c:	bd10      	pop	{r4, pc}
	...

000da120 <_Z17acquireWireBufferv>:
   da120:	b570      	push	{r4, r5, r6, lr}
   da122:	4604      	mov	r4, r0
   da124:	2514      	movs	r5, #20
   da126:	462a      	mov	r2, r5
   da128:	4e09      	ldr	r6, [pc, #36]	; (da150 <_Z17acquireWireBufferv+0x30>)
   da12a:	2100      	movs	r1, #0
   da12c:	f001 f8be 	bl	db2ac <memset>
   da130:	8025      	strh	r5, [r4, #0]
   da132:	2520      	movs	r5, #32
   da134:	4631      	mov	r1, r6
   da136:	60a5      	str	r5, [r4, #8]
   da138:	6125      	str	r5, [r4, #16]
   da13a:	4628      	mov	r0, r5
   da13c:	f000 f84f 	bl	da1de <_ZnajRKSt9nothrow_t>
   da140:	4631      	mov	r1, r6
   da142:	6060      	str	r0, [r4, #4]
   da144:	4628      	mov	r0, r5
   da146:	f000 f84a 	bl	da1de <_ZnajRKSt9nothrow_t>
   da14a:	60e0      	str	r0, [r4, #12]
   da14c:	4620      	mov	r0, r4
   da14e:	bd70      	pop	{r4, r5, r6, pc}
   da150:	000dd97c 	.word	0x000dd97c

000da154 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da154:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da156:	4d0e      	ldr	r5, [pc, #56]	; (da190 <_Z19__fetch_global_Wirev+0x3c>)
   da158:	6829      	ldr	r1, [r5, #0]
   da15a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da15e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da160:	d113      	bne.n	da18a <_Z19__fetch_global_Wirev+0x36>
   da162:	4628      	mov	r0, r5
   da164:	f7f9 ffaa 	bl	d40bc <__cxa_guard_acquire>
   da168:	b178      	cbz	r0, da18a <_Z19__fetch_global_Wirev+0x36>
   da16a:	a801      	add	r0, sp, #4
   da16c:	f7ff ffd8 	bl	da120 <_Z17acquireWireBufferv>
   da170:	aa01      	add	r2, sp, #4
   da172:	4621      	mov	r1, r4
   da174:	4807      	ldr	r0, [pc, #28]	; (da194 <_Z19__fetch_global_Wirev+0x40>)
   da176:	f7fe fe21 	bl	d8dbc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da17a:	4628      	mov	r0, r5
   da17c:	f7f9 ffa3 	bl	d40c6 <__cxa_guard_release>
   da180:	4a05      	ldr	r2, [pc, #20]	; (da198 <_Z19__fetch_global_Wirev+0x44>)
   da182:	4906      	ldr	r1, [pc, #24]	; (da19c <_Z19__fetch_global_Wirev+0x48>)
   da184:	4803      	ldr	r0, [pc, #12]	; (da194 <_Z19__fetch_global_Wirev+0x40>)
   da186:	f000 f80b 	bl	da1a0 <__aeabi_atexit>
	return wire;
}
   da18a:	4802      	ldr	r0, [pc, #8]	; (da194 <_Z19__fetch_global_Wirev+0x40>)
   da18c:	b007      	add	sp, #28
   da18e:	bd30      	pop	{r4, r5, pc}
   da190:	2003e60c 	.word	0x2003e60c
   da194:	2003e610 	.word	0x2003e610
   da198:	2003dea8 	.word	0x2003dea8
   da19c:	000d8d65 	.word	0x000d8d65

000da1a0 <__aeabi_atexit>:
   da1a0:	460b      	mov	r3, r1
   da1a2:	4601      	mov	r1, r0
   da1a4:	4618      	mov	r0, r3
   da1a6:	f000 beab 	b.w	daf00 <__cxa_atexit>

000da1aa <_ZdlPvj>:
   da1aa:	f7f9 bf78 	b.w	d409e <_ZdlPv>
	...

000da1b0 <_ZSt15get_new_handlerv>:
   da1b0:	4b02      	ldr	r3, [pc, #8]	; (da1bc <_ZSt15get_new_handlerv+0xc>)
   da1b2:	6818      	ldr	r0, [r3, #0]
   da1b4:	f3bf 8f5f 	dmb	sy
   da1b8:	4770      	bx	lr
   da1ba:	bf00      	nop
   da1bc:	2003e624 	.word	0x2003e624

000da1c0 <_ZnwjRKSt9nothrow_t>:
   da1c0:	b510      	push	{r4, lr}
   da1c2:	2800      	cmp	r0, #0
   da1c4:	bf14      	ite	ne
   da1c6:	4604      	movne	r4, r0
   da1c8:	2401      	moveq	r4, #1
   da1ca:	4620      	mov	r0, r4
   da1cc:	f7fe f8c0 	bl	d8350 <malloc>
   da1d0:	b920      	cbnz	r0, da1dc <_ZnwjRKSt9nothrow_t+0x1c>
   da1d2:	f7ff ffed 	bl	da1b0 <_ZSt15get_new_handlerv>
   da1d6:	b108      	cbz	r0, da1dc <_ZnwjRKSt9nothrow_t+0x1c>
   da1d8:	4780      	blx	r0
   da1da:	e7f6      	b.n	da1ca <_ZnwjRKSt9nothrow_t+0xa>
   da1dc:	bd10      	pop	{r4, pc}

000da1de <_ZnajRKSt9nothrow_t>:
   da1de:	f7ff bfef 	b.w	da1c0 <_ZnwjRKSt9nothrow_t>

000da1e2 <_ZSt25__throw_bad_function_callv>:
   da1e2:	b508      	push	{r3, lr}
   da1e4:	f7fe f8f4 	bl	d83d0 <abort>

000da1e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da1e8:	4b24      	ldr	r3, [pc, #144]	; (da27c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da1ea:	681a      	ldr	r2, [r3, #0]
   da1ec:	07d0      	lsls	r0, r2, #31
   da1ee:	bf5c      	itt	pl
   da1f0:	2201      	movpl	r2, #1
   da1f2:	601a      	strpl	r2, [r3, #0]
   da1f4:	4b22      	ldr	r3, [pc, #136]	; (da280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da1f6:	681a      	ldr	r2, [r3, #0]
   da1f8:	07d1      	lsls	r1, r2, #31
   da1fa:	bf5c      	itt	pl
   da1fc:	2201      	movpl	r2, #1
   da1fe:	601a      	strpl	r2, [r3, #0]
   da200:	4b20      	ldr	r3, [pc, #128]	; (da284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da202:	681a      	ldr	r2, [r3, #0]
   da204:	07d2      	lsls	r2, r2, #31
   da206:	bf5c      	itt	pl
   da208:	2201      	movpl	r2, #1
   da20a:	601a      	strpl	r2, [r3, #0]
   da20c:	4b1e      	ldr	r3, [pc, #120]	; (da288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da20e:	681a      	ldr	r2, [r3, #0]
   da210:	07d0      	lsls	r0, r2, #31
   da212:	bf5c      	itt	pl
   da214:	2201      	movpl	r2, #1
   da216:	601a      	strpl	r2, [r3, #0]
   da218:	4b1c      	ldr	r3, [pc, #112]	; (da28c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da21a:	681a      	ldr	r2, [r3, #0]
   da21c:	07d1      	lsls	r1, r2, #31
   da21e:	bf5c      	itt	pl
   da220:	2201      	movpl	r2, #1
   da222:	601a      	strpl	r2, [r3, #0]
   da224:	4b1a      	ldr	r3, [pc, #104]	; (da290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da226:	681a      	ldr	r2, [r3, #0]
   da228:	07d2      	lsls	r2, r2, #31
   da22a:	bf5c      	itt	pl
   da22c:	2201      	movpl	r2, #1
   da22e:	601a      	strpl	r2, [r3, #0]
   da230:	4b18      	ldr	r3, [pc, #96]	; (da294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da232:	681a      	ldr	r2, [r3, #0]
   da234:	07d0      	lsls	r0, r2, #31
   da236:	bf5c      	itt	pl
   da238:	2201      	movpl	r2, #1
   da23a:	601a      	strpl	r2, [r3, #0]
   da23c:	4b16      	ldr	r3, [pc, #88]	; (da298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da23e:	681a      	ldr	r2, [r3, #0]
   da240:	07d1      	lsls	r1, r2, #31
   da242:	bf5c      	itt	pl
   da244:	2201      	movpl	r2, #1
   da246:	601a      	strpl	r2, [r3, #0]
   da248:	4b14      	ldr	r3, [pc, #80]	; (da29c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da24a:	681a      	ldr	r2, [r3, #0]
   da24c:	07d2      	lsls	r2, r2, #31
   da24e:	bf5c      	itt	pl
   da250:	2201      	movpl	r2, #1
   da252:	601a      	strpl	r2, [r3, #0]
   da254:	4b12      	ldr	r3, [pc, #72]	; (da2a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da256:	681a      	ldr	r2, [r3, #0]
   da258:	07d0      	lsls	r0, r2, #31
   da25a:	bf5c      	itt	pl
   da25c:	2201      	movpl	r2, #1
   da25e:	601a      	strpl	r2, [r3, #0]
   da260:	4b10      	ldr	r3, [pc, #64]	; (da2a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da262:	681a      	ldr	r2, [r3, #0]
   da264:	07d1      	lsls	r1, r2, #31
   da266:	bf5c      	itt	pl
   da268:	2201      	movpl	r2, #1
   da26a:	601a      	strpl	r2, [r3, #0]
   da26c:	4b0e      	ldr	r3, [pc, #56]	; (da2a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da26e:	681a      	ldr	r2, [r3, #0]
   da270:	07d2      	lsls	r2, r2, #31
   da272:	bf5c      	itt	pl
   da274:	2201      	movpl	r2, #1
   da276:	601a      	strpl	r2, [r3, #0]
   da278:	4770      	bx	lr
   da27a:	bf00      	nop
   da27c:	2003e654 	.word	0x2003e654
   da280:	2003e650 	.word	0x2003e650
   da284:	2003e64c 	.word	0x2003e64c
   da288:	2003e648 	.word	0x2003e648
   da28c:	2003e644 	.word	0x2003e644
   da290:	2003e640 	.word	0x2003e640
   da294:	2003e63c 	.word	0x2003e63c
   da298:	2003e638 	.word	0x2003e638
   da29c:	2003e634 	.word	0x2003e634
   da2a0:	2003e630 	.word	0x2003e630
   da2a4:	2003e62c 	.word	0x2003e62c
   da2a8:	2003e628 	.word	0x2003e628

000da2ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da2ac:	4b18      	ldr	r3, [pc, #96]	; (da310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da2ae:	681a      	ldr	r2, [r3, #0]
   da2b0:	07d1      	lsls	r1, r2, #31
   da2b2:	bf5c      	itt	pl
   da2b4:	2201      	movpl	r2, #1
   da2b6:	601a      	strpl	r2, [r3, #0]
   da2b8:	4b16      	ldr	r3, [pc, #88]	; (da314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da2ba:	681a      	ldr	r2, [r3, #0]
   da2bc:	07d2      	lsls	r2, r2, #31
   da2be:	bf5c      	itt	pl
   da2c0:	2201      	movpl	r2, #1
   da2c2:	601a      	strpl	r2, [r3, #0]
   da2c4:	4b14      	ldr	r3, [pc, #80]	; (da318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da2c6:	681a      	ldr	r2, [r3, #0]
   da2c8:	07d0      	lsls	r0, r2, #31
   da2ca:	bf5c      	itt	pl
   da2cc:	2201      	movpl	r2, #1
   da2ce:	601a      	strpl	r2, [r3, #0]
   da2d0:	4b12      	ldr	r3, [pc, #72]	; (da31c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da2d2:	681a      	ldr	r2, [r3, #0]
   da2d4:	07d1      	lsls	r1, r2, #31
   da2d6:	bf5c      	itt	pl
   da2d8:	2201      	movpl	r2, #1
   da2da:	601a      	strpl	r2, [r3, #0]
   da2dc:	4b10      	ldr	r3, [pc, #64]	; (da320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da2de:	681a      	ldr	r2, [r3, #0]
   da2e0:	07d2      	lsls	r2, r2, #31
   da2e2:	bf5c      	itt	pl
   da2e4:	2201      	movpl	r2, #1
   da2e6:	601a      	strpl	r2, [r3, #0]
   da2e8:	4b0e      	ldr	r3, [pc, #56]	; (da324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da2ea:	681a      	ldr	r2, [r3, #0]
   da2ec:	07d0      	lsls	r0, r2, #31
   da2ee:	bf5c      	itt	pl
   da2f0:	2201      	movpl	r2, #1
   da2f2:	601a      	strpl	r2, [r3, #0]
   da2f4:	4b0c      	ldr	r3, [pc, #48]	; (da328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da2f6:	681a      	ldr	r2, [r3, #0]
   da2f8:	07d1      	lsls	r1, r2, #31
   da2fa:	bf5c      	itt	pl
   da2fc:	2201      	movpl	r2, #1
   da2fe:	601a      	strpl	r2, [r3, #0]
   da300:	4b0a      	ldr	r3, [pc, #40]	; (da32c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da302:	681a      	ldr	r2, [r3, #0]
   da304:	07d2      	lsls	r2, r2, #31
   da306:	bf5c      	itt	pl
   da308:	2201      	movpl	r2, #1
   da30a:	601a      	strpl	r2, [r3, #0]
   da30c:	4770      	bx	lr
   da30e:	bf00      	nop
   da310:	2003e674 	.word	0x2003e674
   da314:	2003e670 	.word	0x2003e670
   da318:	2003e66c 	.word	0x2003e66c
   da31c:	2003e668 	.word	0x2003e668
   da320:	2003e664 	.word	0x2003e664
   da324:	2003e660 	.word	0x2003e660
   da328:	2003e65c 	.word	0x2003e65c
   da32c:	2003e658 	.word	0x2003e658

000da330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da330:	4b18      	ldr	r3, [pc, #96]	; (da394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da332:	681a      	ldr	r2, [r3, #0]
   da334:	07d1      	lsls	r1, r2, #31
   da336:	bf5c      	itt	pl
   da338:	2201      	movpl	r2, #1
   da33a:	601a      	strpl	r2, [r3, #0]
   da33c:	4b16      	ldr	r3, [pc, #88]	; (da398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da33e:	681a      	ldr	r2, [r3, #0]
   da340:	07d2      	lsls	r2, r2, #31
   da342:	bf5c      	itt	pl
   da344:	2201      	movpl	r2, #1
   da346:	601a      	strpl	r2, [r3, #0]
   da348:	4b14      	ldr	r3, [pc, #80]	; (da39c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da34a:	681a      	ldr	r2, [r3, #0]
   da34c:	07d0      	lsls	r0, r2, #31
   da34e:	bf5c      	itt	pl
   da350:	2201      	movpl	r2, #1
   da352:	601a      	strpl	r2, [r3, #0]
   da354:	4b12      	ldr	r3, [pc, #72]	; (da3a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da356:	681a      	ldr	r2, [r3, #0]
   da358:	07d1      	lsls	r1, r2, #31
   da35a:	bf5c      	itt	pl
   da35c:	2201      	movpl	r2, #1
   da35e:	601a      	strpl	r2, [r3, #0]
   da360:	4b10      	ldr	r3, [pc, #64]	; (da3a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da362:	681a      	ldr	r2, [r3, #0]
   da364:	07d2      	lsls	r2, r2, #31
   da366:	bf5c      	itt	pl
   da368:	2201      	movpl	r2, #1
   da36a:	601a      	strpl	r2, [r3, #0]
   da36c:	4b0e      	ldr	r3, [pc, #56]	; (da3a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da36e:	681a      	ldr	r2, [r3, #0]
   da370:	07d0      	lsls	r0, r2, #31
   da372:	bf5c      	itt	pl
   da374:	2201      	movpl	r2, #1
   da376:	601a      	strpl	r2, [r3, #0]
   da378:	4b0c      	ldr	r3, [pc, #48]	; (da3ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da37a:	681a      	ldr	r2, [r3, #0]
   da37c:	07d1      	lsls	r1, r2, #31
   da37e:	bf5c      	itt	pl
   da380:	2201      	movpl	r2, #1
   da382:	601a      	strpl	r2, [r3, #0]
   da384:	4b0a      	ldr	r3, [pc, #40]	; (da3b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da386:	681a      	ldr	r2, [r3, #0]
   da388:	07d2      	lsls	r2, r2, #31
   da38a:	bf5c      	itt	pl
   da38c:	2201      	movpl	r2, #1
   da38e:	601a      	strpl	r2, [r3, #0]
   da390:	4770      	bx	lr
   da392:	bf00      	nop
   da394:	2003e694 	.word	0x2003e694
   da398:	2003e690 	.word	0x2003e690
   da39c:	2003e68c 	.word	0x2003e68c
   da3a0:	2003e688 	.word	0x2003e688
   da3a4:	2003e684 	.word	0x2003e684
   da3a8:	2003e680 	.word	0x2003e680
   da3ac:	2003e67c 	.word	0x2003e67c
   da3b0:	2003e678 	.word	0x2003e678

000da3b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da3b4:	4b24      	ldr	r3, [pc, #144]	; (da448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da3b6:	681a      	ldr	r2, [r3, #0]
   da3b8:	07d0      	lsls	r0, r2, #31
   da3ba:	bf5c      	itt	pl
   da3bc:	2201      	movpl	r2, #1
   da3be:	601a      	strpl	r2, [r3, #0]
   da3c0:	4b22      	ldr	r3, [pc, #136]	; (da44c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da3c2:	681a      	ldr	r2, [r3, #0]
   da3c4:	07d1      	lsls	r1, r2, #31
   da3c6:	bf5c      	itt	pl
   da3c8:	2201      	movpl	r2, #1
   da3ca:	601a      	strpl	r2, [r3, #0]
   da3cc:	4b20      	ldr	r3, [pc, #128]	; (da450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da3ce:	681a      	ldr	r2, [r3, #0]
   da3d0:	07d2      	lsls	r2, r2, #31
   da3d2:	bf5c      	itt	pl
   da3d4:	2201      	movpl	r2, #1
   da3d6:	601a      	strpl	r2, [r3, #0]
   da3d8:	4b1e      	ldr	r3, [pc, #120]	; (da454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da3da:	681a      	ldr	r2, [r3, #0]
   da3dc:	07d0      	lsls	r0, r2, #31
   da3de:	bf5c      	itt	pl
   da3e0:	2201      	movpl	r2, #1
   da3e2:	601a      	strpl	r2, [r3, #0]
   da3e4:	4b1c      	ldr	r3, [pc, #112]	; (da458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da3e6:	681a      	ldr	r2, [r3, #0]
   da3e8:	07d1      	lsls	r1, r2, #31
   da3ea:	bf5c      	itt	pl
   da3ec:	2201      	movpl	r2, #1
   da3ee:	601a      	strpl	r2, [r3, #0]
   da3f0:	4b1a      	ldr	r3, [pc, #104]	; (da45c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da3f2:	681a      	ldr	r2, [r3, #0]
   da3f4:	07d2      	lsls	r2, r2, #31
   da3f6:	bf5c      	itt	pl
   da3f8:	2201      	movpl	r2, #1
   da3fa:	601a      	strpl	r2, [r3, #0]
   da3fc:	4b18      	ldr	r3, [pc, #96]	; (da460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da3fe:	681a      	ldr	r2, [r3, #0]
   da400:	07d0      	lsls	r0, r2, #31
   da402:	bf5c      	itt	pl
   da404:	2201      	movpl	r2, #1
   da406:	601a      	strpl	r2, [r3, #0]
   da408:	4b16      	ldr	r3, [pc, #88]	; (da464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da40a:	681a      	ldr	r2, [r3, #0]
   da40c:	07d1      	lsls	r1, r2, #31
   da40e:	bf5c      	itt	pl
   da410:	2201      	movpl	r2, #1
   da412:	601a      	strpl	r2, [r3, #0]
   da414:	4b14      	ldr	r3, [pc, #80]	; (da468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da416:	681a      	ldr	r2, [r3, #0]
   da418:	07d2      	lsls	r2, r2, #31
   da41a:	bf5c      	itt	pl
   da41c:	2201      	movpl	r2, #1
   da41e:	601a      	strpl	r2, [r3, #0]
   da420:	4b12      	ldr	r3, [pc, #72]	; (da46c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da422:	681a      	ldr	r2, [r3, #0]
   da424:	07d0      	lsls	r0, r2, #31
   da426:	bf5c      	itt	pl
   da428:	2201      	movpl	r2, #1
   da42a:	601a      	strpl	r2, [r3, #0]
   da42c:	4b10      	ldr	r3, [pc, #64]	; (da470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da42e:	681a      	ldr	r2, [r3, #0]
   da430:	07d1      	lsls	r1, r2, #31
   da432:	bf5c      	itt	pl
   da434:	2201      	movpl	r2, #1
   da436:	601a      	strpl	r2, [r3, #0]
   da438:	4b0e      	ldr	r3, [pc, #56]	; (da474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da43a:	681a      	ldr	r2, [r3, #0]
   da43c:	07d2      	lsls	r2, r2, #31
   da43e:	bf5c      	itt	pl
   da440:	2201      	movpl	r2, #1
   da442:	601a      	strpl	r2, [r3, #0]
   da444:	4770      	bx	lr
   da446:	bf00      	nop
   da448:	2003e6c4 	.word	0x2003e6c4
   da44c:	2003e6c0 	.word	0x2003e6c0
   da450:	2003e6bc 	.word	0x2003e6bc
   da454:	2003e6b8 	.word	0x2003e6b8
   da458:	2003e6b4 	.word	0x2003e6b4
   da45c:	2003e6b0 	.word	0x2003e6b0
   da460:	2003e6ac 	.word	0x2003e6ac
   da464:	2003e6a8 	.word	0x2003e6a8
   da468:	2003e6a4 	.word	0x2003e6a4
   da46c:	2003e6a0 	.word	0x2003e6a0
   da470:	2003e69c 	.word	0x2003e69c
   da474:	2003e698 	.word	0x2003e698

000da478 <__aeabi_drsub>:
   da478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da47c:	e002      	b.n	da484 <__adddf3>
   da47e:	bf00      	nop

000da480 <__aeabi_dsub>:
   da480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da484 <__adddf3>:
   da484:	b530      	push	{r4, r5, lr}
   da486:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da48a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da48e:	ea94 0f05 	teq	r4, r5
   da492:	bf08      	it	eq
   da494:	ea90 0f02 	teqeq	r0, r2
   da498:	bf1f      	itttt	ne
   da49a:	ea54 0c00 	orrsne.w	ip, r4, r0
   da49e:	ea55 0c02 	orrsne.w	ip, r5, r2
   da4a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da4a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da4aa:	f000 80e2 	beq.w	da672 <__adddf3+0x1ee>
   da4ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da4b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da4b6:	bfb8      	it	lt
   da4b8:	426d      	neglt	r5, r5
   da4ba:	dd0c      	ble.n	da4d6 <__adddf3+0x52>
   da4bc:	442c      	add	r4, r5
   da4be:	ea80 0202 	eor.w	r2, r0, r2
   da4c2:	ea81 0303 	eor.w	r3, r1, r3
   da4c6:	ea82 0000 	eor.w	r0, r2, r0
   da4ca:	ea83 0101 	eor.w	r1, r3, r1
   da4ce:	ea80 0202 	eor.w	r2, r0, r2
   da4d2:	ea81 0303 	eor.w	r3, r1, r3
   da4d6:	2d36      	cmp	r5, #54	; 0x36
   da4d8:	bf88      	it	hi
   da4da:	bd30      	pophi	{r4, r5, pc}
   da4dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da4e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da4e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da4e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da4ec:	d002      	beq.n	da4f4 <__adddf3+0x70>
   da4ee:	4240      	negs	r0, r0
   da4f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da4f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da4fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da500:	d002      	beq.n	da508 <__adddf3+0x84>
   da502:	4252      	negs	r2, r2
   da504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da508:	ea94 0f05 	teq	r4, r5
   da50c:	f000 80a7 	beq.w	da65e <__adddf3+0x1da>
   da510:	f1a4 0401 	sub.w	r4, r4, #1
   da514:	f1d5 0e20 	rsbs	lr, r5, #32
   da518:	db0d      	blt.n	da536 <__adddf3+0xb2>
   da51a:	fa02 fc0e 	lsl.w	ip, r2, lr
   da51e:	fa22 f205 	lsr.w	r2, r2, r5
   da522:	1880      	adds	r0, r0, r2
   da524:	f141 0100 	adc.w	r1, r1, #0
   da528:	fa03 f20e 	lsl.w	r2, r3, lr
   da52c:	1880      	adds	r0, r0, r2
   da52e:	fa43 f305 	asr.w	r3, r3, r5
   da532:	4159      	adcs	r1, r3
   da534:	e00e      	b.n	da554 <__adddf3+0xd0>
   da536:	f1a5 0520 	sub.w	r5, r5, #32
   da53a:	f10e 0e20 	add.w	lr, lr, #32
   da53e:	2a01      	cmp	r2, #1
   da540:	fa03 fc0e 	lsl.w	ip, r3, lr
   da544:	bf28      	it	cs
   da546:	f04c 0c02 	orrcs.w	ip, ip, #2
   da54a:	fa43 f305 	asr.w	r3, r3, r5
   da54e:	18c0      	adds	r0, r0, r3
   da550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da558:	d507      	bpl.n	da56a <__adddf3+0xe6>
   da55a:	f04f 0e00 	mov.w	lr, #0
   da55e:	f1dc 0c00 	rsbs	ip, ip, #0
   da562:	eb7e 0000 	sbcs.w	r0, lr, r0
   da566:	eb6e 0101 	sbc.w	r1, lr, r1
   da56a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da56e:	d31b      	bcc.n	da5a8 <__adddf3+0x124>
   da570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da574:	d30c      	bcc.n	da590 <__adddf3+0x10c>
   da576:	0849      	lsrs	r1, r1, #1
   da578:	ea5f 0030 	movs.w	r0, r0, rrx
   da57c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da580:	f104 0401 	add.w	r4, r4, #1
   da584:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da58c:	f080 809a 	bcs.w	da6c4 <__adddf3+0x240>
   da590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da594:	bf08      	it	eq
   da596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da59a:	f150 0000 	adcs.w	r0, r0, #0
   da59e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da5a2:	ea41 0105 	orr.w	r1, r1, r5
   da5a6:	bd30      	pop	{r4, r5, pc}
   da5a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da5ac:	4140      	adcs	r0, r0
   da5ae:	eb41 0101 	adc.w	r1, r1, r1
   da5b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da5b6:	f1a4 0401 	sub.w	r4, r4, #1
   da5ba:	d1e9      	bne.n	da590 <__adddf3+0x10c>
   da5bc:	f091 0f00 	teq	r1, #0
   da5c0:	bf04      	itt	eq
   da5c2:	4601      	moveq	r1, r0
   da5c4:	2000      	moveq	r0, #0
   da5c6:	fab1 f381 	clz	r3, r1
   da5ca:	bf08      	it	eq
   da5cc:	3320      	addeq	r3, #32
   da5ce:	f1a3 030b 	sub.w	r3, r3, #11
   da5d2:	f1b3 0220 	subs.w	r2, r3, #32
   da5d6:	da0c      	bge.n	da5f2 <__adddf3+0x16e>
   da5d8:	320c      	adds	r2, #12
   da5da:	dd08      	ble.n	da5ee <__adddf3+0x16a>
   da5dc:	f102 0c14 	add.w	ip, r2, #20
   da5e0:	f1c2 020c 	rsb	r2, r2, #12
   da5e4:	fa01 f00c 	lsl.w	r0, r1, ip
   da5e8:	fa21 f102 	lsr.w	r1, r1, r2
   da5ec:	e00c      	b.n	da608 <__adddf3+0x184>
   da5ee:	f102 0214 	add.w	r2, r2, #20
   da5f2:	bfd8      	it	le
   da5f4:	f1c2 0c20 	rsble	ip, r2, #32
   da5f8:	fa01 f102 	lsl.w	r1, r1, r2
   da5fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   da600:	bfdc      	itt	le
   da602:	ea41 010c 	orrle.w	r1, r1, ip
   da606:	4090      	lslle	r0, r2
   da608:	1ae4      	subs	r4, r4, r3
   da60a:	bfa2      	ittt	ge
   da60c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da610:	4329      	orrge	r1, r5
   da612:	bd30      	popge	{r4, r5, pc}
   da614:	ea6f 0404 	mvn.w	r4, r4
   da618:	3c1f      	subs	r4, #31
   da61a:	da1c      	bge.n	da656 <__adddf3+0x1d2>
   da61c:	340c      	adds	r4, #12
   da61e:	dc0e      	bgt.n	da63e <__adddf3+0x1ba>
   da620:	f104 0414 	add.w	r4, r4, #20
   da624:	f1c4 0220 	rsb	r2, r4, #32
   da628:	fa20 f004 	lsr.w	r0, r0, r4
   da62c:	fa01 f302 	lsl.w	r3, r1, r2
   da630:	ea40 0003 	orr.w	r0, r0, r3
   da634:	fa21 f304 	lsr.w	r3, r1, r4
   da638:	ea45 0103 	orr.w	r1, r5, r3
   da63c:	bd30      	pop	{r4, r5, pc}
   da63e:	f1c4 040c 	rsb	r4, r4, #12
   da642:	f1c4 0220 	rsb	r2, r4, #32
   da646:	fa20 f002 	lsr.w	r0, r0, r2
   da64a:	fa01 f304 	lsl.w	r3, r1, r4
   da64e:	ea40 0003 	orr.w	r0, r0, r3
   da652:	4629      	mov	r1, r5
   da654:	bd30      	pop	{r4, r5, pc}
   da656:	fa21 f004 	lsr.w	r0, r1, r4
   da65a:	4629      	mov	r1, r5
   da65c:	bd30      	pop	{r4, r5, pc}
   da65e:	f094 0f00 	teq	r4, #0
   da662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da666:	bf06      	itte	eq
   da668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da66c:	3401      	addeq	r4, #1
   da66e:	3d01      	subne	r5, #1
   da670:	e74e      	b.n	da510 <__adddf3+0x8c>
   da672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da676:	bf18      	it	ne
   da678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da67c:	d029      	beq.n	da6d2 <__adddf3+0x24e>
   da67e:	ea94 0f05 	teq	r4, r5
   da682:	bf08      	it	eq
   da684:	ea90 0f02 	teqeq	r0, r2
   da688:	d005      	beq.n	da696 <__adddf3+0x212>
   da68a:	ea54 0c00 	orrs.w	ip, r4, r0
   da68e:	bf04      	itt	eq
   da690:	4619      	moveq	r1, r3
   da692:	4610      	moveq	r0, r2
   da694:	bd30      	pop	{r4, r5, pc}
   da696:	ea91 0f03 	teq	r1, r3
   da69a:	bf1e      	ittt	ne
   da69c:	2100      	movne	r1, #0
   da69e:	2000      	movne	r0, #0
   da6a0:	bd30      	popne	{r4, r5, pc}
   da6a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da6a6:	d105      	bne.n	da6b4 <__adddf3+0x230>
   da6a8:	0040      	lsls	r0, r0, #1
   da6aa:	4149      	adcs	r1, r1
   da6ac:	bf28      	it	cs
   da6ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da6b2:	bd30      	pop	{r4, r5, pc}
   da6b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da6b8:	bf3c      	itt	cc
   da6ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da6be:	bd30      	popcc	{r4, r5, pc}
   da6c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da6c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da6c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da6cc:	f04f 0000 	mov.w	r0, #0
   da6d0:	bd30      	pop	{r4, r5, pc}
   da6d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6d6:	bf1a      	itte	ne
   da6d8:	4619      	movne	r1, r3
   da6da:	4610      	movne	r0, r2
   da6dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da6e0:	bf1c      	itt	ne
   da6e2:	460b      	movne	r3, r1
   da6e4:	4602      	movne	r2, r0
   da6e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da6ea:	bf06      	itte	eq
   da6ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da6f0:	ea91 0f03 	teqeq	r1, r3
   da6f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da6f8:	bd30      	pop	{r4, r5, pc}
   da6fa:	bf00      	nop

000da6fc <__aeabi_ui2d>:
   da6fc:	f090 0f00 	teq	r0, #0
   da700:	bf04      	itt	eq
   da702:	2100      	moveq	r1, #0
   da704:	4770      	bxeq	lr
   da706:	b530      	push	{r4, r5, lr}
   da708:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da70c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da710:	f04f 0500 	mov.w	r5, #0
   da714:	f04f 0100 	mov.w	r1, #0
   da718:	e750      	b.n	da5bc <__adddf3+0x138>
   da71a:	bf00      	nop

000da71c <__aeabi_i2d>:
   da71c:	f090 0f00 	teq	r0, #0
   da720:	bf04      	itt	eq
   da722:	2100      	moveq	r1, #0
   da724:	4770      	bxeq	lr
   da726:	b530      	push	{r4, r5, lr}
   da728:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da72c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da734:	bf48      	it	mi
   da736:	4240      	negmi	r0, r0
   da738:	f04f 0100 	mov.w	r1, #0
   da73c:	e73e      	b.n	da5bc <__adddf3+0x138>
   da73e:	bf00      	nop

000da740 <__aeabi_f2d>:
   da740:	0042      	lsls	r2, r0, #1
   da742:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da746:	ea4f 0131 	mov.w	r1, r1, rrx
   da74a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da74e:	bf1f      	itttt	ne
   da750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da75c:	4770      	bxne	lr
   da75e:	f092 0f00 	teq	r2, #0
   da762:	bf14      	ite	ne
   da764:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da768:	4770      	bxeq	lr
   da76a:	b530      	push	{r4, r5, lr}
   da76c:	f44f 7460 	mov.w	r4, #896	; 0x380
   da770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da778:	e720      	b.n	da5bc <__adddf3+0x138>
   da77a:	bf00      	nop

000da77c <__aeabi_ul2d>:
   da77c:	ea50 0201 	orrs.w	r2, r0, r1
   da780:	bf08      	it	eq
   da782:	4770      	bxeq	lr
   da784:	b530      	push	{r4, r5, lr}
   da786:	f04f 0500 	mov.w	r5, #0
   da78a:	e00a      	b.n	da7a2 <__aeabi_l2d+0x16>

000da78c <__aeabi_l2d>:
   da78c:	ea50 0201 	orrs.w	r2, r0, r1
   da790:	bf08      	it	eq
   da792:	4770      	bxeq	lr
   da794:	b530      	push	{r4, r5, lr}
   da796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da79a:	d502      	bpl.n	da7a2 <__aeabi_l2d+0x16>
   da79c:	4240      	negs	r0, r0
   da79e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da7ae:	f43f aedc 	beq.w	da56a <__adddf3+0xe6>
   da7b2:	f04f 0203 	mov.w	r2, #3
   da7b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7ba:	bf18      	it	ne
   da7bc:	3203      	addne	r2, #3
   da7be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7c2:	bf18      	it	ne
   da7c4:	3203      	addne	r2, #3
   da7c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da7ca:	f1c2 0320 	rsb	r3, r2, #32
   da7ce:	fa00 fc03 	lsl.w	ip, r0, r3
   da7d2:	fa20 f002 	lsr.w	r0, r0, r2
   da7d6:	fa01 fe03 	lsl.w	lr, r1, r3
   da7da:	ea40 000e 	orr.w	r0, r0, lr
   da7de:	fa21 f102 	lsr.w	r1, r1, r2
   da7e2:	4414      	add	r4, r2
   da7e4:	e6c1      	b.n	da56a <__adddf3+0xe6>
   da7e6:	bf00      	nop

000da7e8 <__aeabi_dmul>:
   da7e8:	b570      	push	{r4, r5, r6, lr}
   da7ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da7ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da7f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da7f6:	bf1d      	ittte	ne
   da7f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da7fc:	ea94 0f0c 	teqne	r4, ip
   da800:	ea95 0f0c 	teqne	r5, ip
   da804:	f000 f8de 	bleq	da9c4 <__aeabi_dmul+0x1dc>
   da808:	442c      	add	r4, r5
   da80a:	ea81 0603 	eor.w	r6, r1, r3
   da80e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da81a:	bf18      	it	ne
   da81c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da828:	d038      	beq.n	da89c <__aeabi_dmul+0xb4>
   da82a:	fba0 ce02 	umull	ip, lr, r0, r2
   da82e:	f04f 0500 	mov.w	r5, #0
   da832:	fbe1 e502 	umlal	lr, r5, r1, r2
   da836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da83a:	fbe0 e503 	umlal	lr, r5, r0, r3
   da83e:	f04f 0600 	mov.w	r6, #0
   da842:	fbe1 5603 	umlal	r5, r6, r1, r3
   da846:	f09c 0f00 	teq	ip, #0
   da84a:	bf18      	it	ne
   da84c:	f04e 0e01 	orrne.w	lr, lr, #1
   da850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da85c:	d204      	bcs.n	da868 <__aeabi_dmul+0x80>
   da85e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da862:	416d      	adcs	r5, r5
   da864:	eb46 0606 	adc.w	r6, r6, r6
   da868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da86c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da87c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da880:	bf88      	it	hi
   da882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da886:	d81e      	bhi.n	da8c6 <__aeabi_dmul+0xde>
   da888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da88c:	bf08      	it	eq
   da88e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da892:	f150 0000 	adcs.w	r0, r0, #0
   da896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da89a:	bd70      	pop	{r4, r5, r6, pc}
   da89c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da8a0:	ea46 0101 	orr.w	r1, r6, r1
   da8a4:	ea40 0002 	orr.w	r0, r0, r2
   da8a8:	ea81 0103 	eor.w	r1, r1, r3
   da8ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da8b0:	bfc2      	ittt	gt
   da8b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   da8b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da8ba:	bd70      	popgt	{r4, r5, r6, pc}
   da8bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da8c0:	f04f 0e00 	mov.w	lr, #0
   da8c4:	3c01      	subs	r4, #1
   da8c6:	f300 80ab 	bgt.w	daa20 <__aeabi_dmul+0x238>
   da8ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da8ce:	bfde      	ittt	le
   da8d0:	2000      	movle	r0, #0
   da8d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da8d6:	bd70      	pople	{r4, r5, r6, pc}
   da8d8:	f1c4 0400 	rsb	r4, r4, #0
   da8dc:	3c20      	subs	r4, #32
   da8de:	da35      	bge.n	da94c <__aeabi_dmul+0x164>
   da8e0:	340c      	adds	r4, #12
   da8e2:	dc1b      	bgt.n	da91c <__aeabi_dmul+0x134>
   da8e4:	f104 0414 	add.w	r4, r4, #20
   da8e8:	f1c4 0520 	rsb	r5, r4, #32
   da8ec:	fa00 f305 	lsl.w	r3, r0, r5
   da8f0:	fa20 f004 	lsr.w	r0, r0, r4
   da8f4:	fa01 f205 	lsl.w	r2, r1, r5
   da8f8:	ea40 0002 	orr.w	r0, r0, r2
   da8fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da908:	fa21 f604 	lsr.w	r6, r1, r4
   da90c:	eb42 0106 	adc.w	r1, r2, r6
   da910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da914:	bf08      	it	eq
   da916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da91a:	bd70      	pop	{r4, r5, r6, pc}
   da91c:	f1c4 040c 	rsb	r4, r4, #12
   da920:	f1c4 0520 	rsb	r5, r4, #32
   da924:	fa00 f304 	lsl.w	r3, r0, r4
   da928:	fa20 f005 	lsr.w	r0, r0, r5
   da92c:	fa01 f204 	lsl.w	r2, r1, r4
   da930:	ea40 0002 	orr.w	r0, r0, r2
   da934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da93c:	f141 0100 	adc.w	r1, r1, #0
   da940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da944:	bf08      	it	eq
   da946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da94a:	bd70      	pop	{r4, r5, r6, pc}
   da94c:	f1c4 0520 	rsb	r5, r4, #32
   da950:	fa00 f205 	lsl.w	r2, r0, r5
   da954:	ea4e 0e02 	orr.w	lr, lr, r2
   da958:	fa20 f304 	lsr.w	r3, r0, r4
   da95c:	fa01 f205 	lsl.w	r2, r1, r5
   da960:	ea43 0302 	orr.w	r3, r3, r2
   da964:	fa21 f004 	lsr.w	r0, r1, r4
   da968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da96c:	fa21 f204 	lsr.w	r2, r1, r4
   da970:	ea20 0002 	bic.w	r0, r0, r2
   da974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da97c:	bf08      	it	eq
   da97e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da982:	bd70      	pop	{r4, r5, r6, pc}
   da984:	f094 0f00 	teq	r4, #0
   da988:	d10f      	bne.n	da9aa <__aeabi_dmul+0x1c2>
   da98a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da98e:	0040      	lsls	r0, r0, #1
   da990:	eb41 0101 	adc.w	r1, r1, r1
   da994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da998:	bf08      	it	eq
   da99a:	3c01      	subeq	r4, #1
   da99c:	d0f7      	beq.n	da98e <__aeabi_dmul+0x1a6>
   da99e:	ea41 0106 	orr.w	r1, r1, r6
   da9a2:	f095 0f00 	teq	r5, #0
   da9a6:	bf18      	it	ne
   da9a8:	4770      	bxne	lr
   da9aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da9ae:	0052      	lsls	r2, r2, #1
   da9b0:	eb43 0303 	adc.w	r3, r3, r3
   da9b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da9b8:	bf08      	it	eq
   da9ba:	3d01      	subeq	r5, #1
   da9bc:	d0f7      	beq.n	da9ae <__aeabi_dmul+0x1c6>
   da9be:	ea43 0306 	orr.w	r3, r3, r6
   da9c2:	4770      	bx	lr
   da9c4:	ea94 0f0c 	teq	r4, ip
   da9c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da9cc:	bf18      	it	ne
   da9ce:	ea95 0f0c 	teqne	r5, ip
   da9d2:	d00c      	beq.n	da9ee <__aeabi_dmul+0x206>
   da9d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9d8:	bf18      	it	ne
   da9da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9de:	d1d1      	bne.n	da984 <__aeabi_dmul+0x19c>
   da9e0:	ea81 0103 	eor.w	r1, r1, r3
   da9e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9e8:	f04f 0000 	mov.w	r0, #0
   da9ec:	bd70      	pop	{r4, r5, r6, pc}
   da9ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9f2:	bf06      	itte	eq
   da9f4:	4610      	moveq	r0, r2
   da9f6:	4619      	moveq	r1, r3
   da9f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9fc:	d019      	beq.n	daa32 <__aeabi_dmul+0x24a>
   da9fe:	ea94 0f0c 	teq	r4, ip
   daa02:	d102      	bne.n	daa0a <__aeabi_dmul+0x222>
   daa04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa08:	d113      	bne.n	daa32 <__aeabi_dmul+0x24a>
   daa0a:	ea95 0f0c 	teq	r5, ip
   daa0e:	d105      	bne.n	daa1c <__aeabi_dmul+0x234>
   daa10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa14:	bf1c      	itt	ne
   daa16:	4610      	movne	r0, r2
   daa18:	4619      	movne	r1, r3
   daa1a:	d10a      	bne.n	daa32 <__aeabi_dmul+0x24a>
   daa1c:	ea81 0103 	eor.w	r1, r1, r3
   daa20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa2c:	f04f 0000 	mov.w	r0, #0
   daa30:	bd70      	pop	{r4, r5, r6, pc}
   daa32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daa3a:	bd70      	pop	{r4, r5, r6, pc}

000daa3c <__aeabi_ddiv>:
   daa3c:	b570      	push	{r4, r5, r6, lr}
   daa3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa4a:	bf1d      	ittte	ne
   daa4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa50:	ea94 0f0c 	teqne	r4, ip
   daa54:	ea95 0f0c 	teqne	r5, ip
   daa58:	f000 f8a7 	bleq	dabaa <__aeabi_ddiv+0x16e>
   daa5c:	eba4 0405 	sub.w	r4, r4, r5
   daa60:	ea81 0e03 	eor.w	lr, r1, r3
   daa64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daa68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daa6c:	f000 8088 	beq.w	dab80 <__aeabi_ddiv+0x144>
   daa70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daa74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daa78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daa7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daa80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daa84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daa88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daa8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daa90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daa94:	429d      	cmp	r5, r3
   daa96:	bf08      	it	eq
   daa98:	4296      	cmpeq	r6, r2
   daa9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daa9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daaa2:	d202      	bcs.n	daaaa <__aeabi_ddiv+0x6e>
   daaa4:	085b      	lsrs	r3, r3, #1
   daaa6:	ea4f 0232 	mov.w	r2, r2, rrx
   daaaa:	1ab6      	subs	r6, r6, r2
   daaac:	eb65 0503 	sbc.w	r5, r5, r3
   daab0:	085b      	lsrs	r3, r3, #1
   daab2:	ea4f 0232 	mov.w	r2, r2, rrx
   daab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daaba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daabe:	ebb6 0e02 	subs.w	lr, r6, r2
   daac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   daac6:	bf22      	ittt	cs
   daac8:	1ab6      	subcs	r6, r6, r2
   daaca:	4675      	movcs	r5, lr
   daacc:	ea40 000c 	orrcs.w	r0, r0, ip
   daad0:	085b      	lsrs	r3, r3, #1
   daad2:	ea4f 0232 	mov.w	r2, r2, rrx
   daad6:	ebb6 0e02 	subs.w	lr, r6, r2
   daada:	eb75 0e03 	sbcs.w	lr, r5, r3
   daade:	bf22      	ittt	cs
   daae0:	1ab6      	subcs	r6, r6, r2
   daae2:	4675      	movcs	r5, lr
   daae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daae8:	085b      	lsrs	r3, r3, #1
   daaea:	ea4f 0232 	mov.w	r2, r2, rrx
   daaee:	ebb6 0e02 	subs.w	lr, r6, r2
   daaf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   daaf6:	bf22      	ittt	cs
   daaf8:	1ab6      	subcs	r6, r6, r2
   daafa:	4675      	movcs	r5, lr
   daafc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab00:	085b      	lsrs	r3, r3, #1
   dab02:	ea4f 0232 	mov.w	r2, r2, rrx
   dab06:	ebb6 0e02 	subs.w	lr, r6, r2
   dab0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab0e:	bf22      	ittt	cs
   dab10:	1ab6      	subcs	r6, r6, r2
   dab12:	4675      	movcs	r5, lr
   dab14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab18:	ea55 0e06 	orrs.w	lr, r5, r6
   dab1c:	d018      	beq.n	dab50 <__aeabi_ddiv+0x114>
   dab1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dab32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dab36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dab3a:	d1c0      	bne.n	daabe <__aeabi_ddiv+0x82>
   dab3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab40:	d10b      	bne.n	dab5a <__aeabi_ddiv+0x11e>
   dab42:	ea41 0100 	orr.w	r1, r1, r0
   dab46:	f04f 0000 	mov.w	r0, #0
   dab4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab4e:	e7b6      	b.n	daabe <__aeabi_ddiv+0x82>
   dab50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab54:	bf04      	itt	eq
   dab56:	4301      	orreq	r1, r0
   dab58:	2000      	moveq	r0, #0
   dab5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab5e:	bf88      	it	hi
   dab60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab64:	f63f aeaf 	bhi.w	da8c6 <__aeabi_dmul+0xde>
   dab68:	ebb5 0c03 	subs.w	ip, r5, r3
   dab6c:	bf04      	itt	eq
   dab6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   dab72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab76:	f150 0000 	adcs.w	r0, r0, #0
   dab7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab7e:	bd70      	pop	{r4, r5, r6, pc}
   dab80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dab84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dab88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dab8c:	bfc2      	ittt	gt
   dab8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dab92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dab96:	bd70      	popgt	{r4, r5, r6, pc}
   dab98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab9c:	f04f 0e00 	mov.w	lr, #0
   daba0:	3c01      	subs	r4, #1
   daba2:	e690      	b.n	da8c6 <__aeabi_dmul+0xde>
   daba4:	ea45 0e06 	orr.w	lr, r5, r6
   daba8:	e68d      	b.n	da8c6 <__aeabi_dmul+0xde>
   dabaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dabae:	ea94 0f0c 	teq	r4, ip
   dabb2:	bf08      	it	eq
   dabb4:	ea95 0f0c 	teqeq	r5, ip
   dabb8:	f43f af3b 	beq.w	daa32 <__aeabi_dmul+0x24a>
   dabbc:	ea94 0f0c 	teq	r4, ip
   dabc0:	d10a      	bne.n	dabd8 <__aeabi_ddiv+0x19c>
   dabc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dabc6:	f47f af34 	bne.w	daa32 <__aeabi_dmul+0x24a>
   dabca:	ea95 0f0c 	teq	r5, ip
   dabce:	f47f af25 	bne.w	daa1c <__aeabi_dmul+0x234>
   dabd2:	4610      	mov	r0, r2
   dabd4:	4619      	mov	r1, r3
   dabd6:	e72c      	b.n	daa32 <__aeabi_dmul+0x24a>
   dabd8:	ea95 0f0c 	teq	r5, ip
   dabdc:	d106      	bne.n	dabec <__aeabi_ddiv+0x1b0>
   dabde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dabe2:	f43f aefd 	beq.w	da9e0 <__aeabi_dmul+0x1f8>
   dabe6:	4610      	mov	r0, r2
   dabe8:	4619      	mov	r1, r3
   dabea:	e722      	b.n	daa32 <__aeabi_dmul+0x24a>
   dabec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dabf0:	bf18      	it	ne
   dabf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dabf6:	f47f aec5 	bne.w	da984 <__aeabi_dmul+0x19c>
   dabfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dabfe:	f47f af0d 	bne.w	daa1c <__aeabi_dmul+0x234>
   dac02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac06:	f47f aeeb 	bne.w	da9e0 <__aeabi_dmul+0x1f8>
   dac0a:	e712      	b.n	daa32 <__aeabi_dmul+0x24a>

000dac0c <__gedf2>:
   dac0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dac10:	e006      	b.n	dac20 <__cmpdf2+0x4>
   dac12:	bf00      	nop

000dac14 <__ledf2>:
   dac14:	f04f 0c01 	mov.w	ip, #1
   dac18:	e002      	b.n	dac20 <__cmpdf2+0x4>
   dac1a:	bf00      	nop

000dac1c <__cmpdf2>:
   dac1c:	f04f 0c01 	mov.w	ip, #1
   dac20:	f84d cd04 	str.w	ip, [sp, #-4]!
   dac24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dac30:	bf18      	it	ne
   dac32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dac36:	d01b      	beq.n	dac70 <__cmpdf2+0x54>
   dac38:	b001      	add	sp, #4
   dac3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dac3e:	bf0c      	ite	eq
   dac40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dac44:	ea91 0f03 	teqne	r1, r3
   dac48:	bf02      	ittt	eq
   dac4a:	ea90 0f02 	teqeq	r0, r2
   dac4e:	2000      	moveq	r0, #0
   dac50:	4770      	bxeq	lr
   dac52:	f110 0f00 	cmn.w	r0, #0
   dac56:	ea91 0f03 	teq	r1, r3
   dac5a:	bf58      	it	pl
   dac5c:	4299      	cmppl	r1, r3
   dac5e:	bf08      	it	eq
   dac60:	4290      	cmpeq	r0, r2
   dac62:	bf2c      	ite	cs
   dac64:	17d8      	asrcs	r0, r3, #31
   dac66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dac6a:	f040 0001 	orr.w	r0, r0, #1
   dac6e:	4770      	bx	lr
   dac70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac78:	d102      	bne.n	dac80 <__cmpdf2+0x64>
   dac7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dac7e:	d107      	bne.n	dac90 <__cmpdf2+0x74>
   dac80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dac84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac88:	d1d6      	bne.n	dac38 <__cmpdf2+0x1c>
   dac8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dac8e:	d0d3      	beq.n	dac38 <__cmpdf2+0x1c>
   dac90:	f85d 0b04 	ldr.w	r0, [sp], #4
   dac94:	4770      	bx	lr
   dac96:	bf00      	nop

000dac98 <__aeabi_cdrcmple>:
   dac98:	4684      	mov	ip, r0
   dac9a:	4610      	mov	r0, r2
   dac9c:	4662      	mov	r2, ip
   dac9e:	468c      	mov	ip, r1
   daca0:	4619      	mov	r1, r3
   daca2:	4663      	mov	r3, ip
   daca4:	e000      	b.n	daca8 <__aeabi_cdcmpeq>
   daca6:	bf00      	nop

000daca8 <__aeabi_cdcmpeq>:
   daca8:	b501      	push	{r0, lr}
   dacaa:	f7ff ffb7 	bl	dac1c <__cmpdf2>
   dacae:	2800      	cmp	r0, #0
   dacb0:	bf48      	it	mi
   dacb2:	f110 0f00 	cmnmi.w	r0, #0
   dacb6:	bd01      	pop	{r0, pc}

000dacb8 <__aeabi_dcmpeq>:
   dacb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dacbc:	f7ff fff4 	bl	daca8 <__aeabi_cdcmpeq>
   dacc0:	bf0c      	ite	eq
   dacc2:	2001      	moveq	r0, #1
   dacc4:	2000      	movne	r0, #0
   dacc6:	f85d fb08 	ldr.w	pc, [sp], #8
   dacca:	bf00      	nop

000daccc <__aeabi_dcmplt>:
   daccc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dacd0:	f7ff ffea 	bl	daca8 <__aeabi_cdcmpeq>
   dacd4:	bf34      	ite	cc
   dacd6:	2001      	movcc	r0, #1
   dacd8:	2000      	movcs	r0, #0
   dacda:	f85d fb08 	ldr.w	pc, [sp], #8
   dacde:	bf00      	nop

000dace0 <__aeabi_dcmple>:
   dace0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dace4:	f7ff ffe0 	bl	daca8 <__aeabi_cdcmpeq>
   dace8:	bf94      	ite	ls
   dacea:	2001      	movls	r0, #1
   dacec:	2000      	movhi	r0, #0
   dacee:	f85d fb08 	ldr.w	pc, [sp], #8
   dacf2:	bf00      	nop

000dacf4 <__aeabi_dcmpge>:
   dacf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dacf8:	f7ff ffce 	bl	dac98 <__aeabi_cdrcmple>
   dacfc:	bf94      	ite	ls
   dacfe:	2001      	movls	r0, #1
   dad00:	2000      	movhi	r0, #0
   dad02:	f85d fb08 	ldr.w	pc, [sp], #8
   dad06:	bf00      	nop

000dad08 <__aeabi_dcmpgt>:
   dad08:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad0c:	f7ff ffc4 	bl	dac98 <__aeabi_cdrcmple>
   dad10:	bf34      	ite	cc
   dad12:	2001      	movcc	r0, #1
   dad14:	2000      	movcs	r0, #0
   dad16:	f85d fb08 	ldr.w	pc, [sp], #8
   dad1a:	bf00      	nop

000dad1c <__aeabi_dcmpun>:
   dad1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad24:	d102      	bne.n	dad2c <__aeabi_dcmpun+0x10>
   dad26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dad2a:	d10a      	bne.n	dad42 <__aeabi_dcmpun+0x26>
   dad2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dad30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad34:	d102      	bne.n	dad3c <__aeabi_dcmpun+0x20>
   dad36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dad3a:	d102      	bne.n	dad42 <__aeabi_dcmpun+0x26>
   dad3c:	f04f 0000 	mov.w	r0, #0
   dad40:	4770      	bx	lr
   dad42:	f04f 0001 	mov.w	r0, #1
   dad46:	4770      	bx	lr

000dad48 <__aeabi_d2iz>:
   dad48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dad4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dad50:	d215      	bcs.n	dad7e <__aeabi_d2iz+0x36>
   dad52:	d511      	bpl.n	dad78 <__aeabi_d2iz+0x30>
   dad54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dad58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dad5c:	d912      	bls.n	dad84 <__aeabi_d2iz+0x3c>
   dad5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dad62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dad66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dad6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dad6e:	fa23 f002 	lsr.w	r0, r3, r2
   dad72:	bf18      	it	ne
   dad74:	4240      	negne	r0, r0
   dad76:	4770      	bx	lr
   dad78:	f04f 0000 	mov.w	r0, #0
   dad7c:	4770      	bx	lr
   dad7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dad82:	d105      	bne.n	dad90 <__aeabi_d2iz+0x48>
   dad84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dad88:	bf08      	it	eq
   dad8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dad8e:	4770      	bx	lr
   dad90:	f04f 0000 	mov.w	r0, #0
   dad94:	4770      	bx	lr
   dad96:	bf00      	nop

000dad98 <__aeabi_d2uiz>:
   dad98:	004a      	lsls	r2, r1, #1
   dad9a:	d211      	bcs.n	dadc0 <__aeabi_d2uiz+0x28>
   dad9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dada0:	d211      	bcs.n	dadc6 <__aeabi_d2uiz+0x2e>
   dada2:	d50d      	bpl.n	dadc0 <__aeabi_d2uiz+0x28>
   dada4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dada8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dadac:	d40e      	bmi.n	dadcc <__aeabi_d2uiz+0x34>
   dadae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dadb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dadba:	fa23 f002 	lsr.w	r0, r3, r2
   dadbe:	4770      	bx	lr
   dadc0:	f04f 0000 	mov.w	r0, #0
   dadc4:	4770      	bx	lr
   dadc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dadca:	d102      	bne.n	dadd2 <__aeabi_d2uiz+0x3a>
   dadcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dadd0:	4770      	bx	lr
   dadd2:	f04f 0000 	mov.w	r0, #0
   dadd6:	4770      	bx	lr

000dadd8 <__aeabi_d2f>:
   dadd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daddc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dade0:	bf24      	itt	cs
   dade2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dade6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dadea:	d90d      	bls.n	dae08 <__aeabi_d2f+0x30>
   dadec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dadf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dadf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dadf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dadfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dae00:	bf08      	it	eq
   dae02:	f020 0001 	biceq.w	r0, r0, #1
   dae06:	4770      	bx	lr
   dae08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dae0c:	d121      	bne.n	dae52 <__aeabi_d2f+0x7a>
   dae0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dae12:	bfbc      	itt	lt
   dae14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dae18:	4770      	bxlt	lr
   dae1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dae22:	f1c2 0218 	rsb	r2, r2, #24
   dae26:	f1c2 0c20 	rsb	ip, r2, #32
   dae2a:	fa10 f30c 	lsls.w	r3, r0, ip
   dae2e:	fa20 f002 	lsr.w	r0, r0, r2
   dae32:	bf18      	it	ne
   dae34:	f040 0001 	orrne.w	r0, r0, #1
   dae38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dae40:	fa03 fc0c 	lsl.w	ip, r3, ip
   dae44:	ea40 000c 	orr.w	r0, r0, ip
   dae48:	fa23 f302 	lsr.w	r3, r3, r2
   dae4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dae50:	e7cc      	b.n	dadec <__aeabi_d2f+0x14>
   dae52:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dae56:	d107      	bne.n	dae68 <__aeabi_d2f+0x90>
   dae58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dae5c:	bf1e      	ittt	ne
   dae5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dae62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dae66:	4770      	bxne	lr
   dae68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dae6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dae70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dae74:	4770      	bx	lr
   dae76:	bf00      	nop

000dae78 <asctime>:
   dae78:	4b09      	ldr	r3, [pc, #36]	; (daea0 <asctime+0x28>)
   dae7a:	b570      	push	{r4, r5, r6, lr}
   dae7c:	681c      	ldr	r4, [r3, #0]
   dae7e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   dae80:	4606      	mov	r6, r0
   dae82:	b93d      	cbnz	r5, dae94 <asctime+0x1c>
   dae84:	201a      	movs	r0, #26
   dae86:	f7fd fa63 	bl	d8350 <malloc>
   dae8a:	221a      	movs	r2, #26
   dae8c:	6420      	str	r0, [r4, #64]	; 0x40
   dae8e:	4629      	mov	r1, r5
   dae90:	f000 fa0c 	bl	db2ac <memset>
   dae94:	6c21      	ldr	r1, [r4, #64]	; 0x40
   dae96:	4630      	mov	r0, r6
   dae98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dae9c:	f000 b802 	b.w	daea4 <asctime_r>
   daea0:	2003de58 	.word	0x2003de58

000daea4 <asctime_r>:
   daea4:	b510      	push	{r4, lr}
   daea6:	460c      	mov	r4, r1
   daea8:	6941      	ldr	r1, [r0, #20]
   daeaa:	6903      	ldr	r3, [r0, #16]
   daeac:	6982      	ldr	r2, [r0, #24]
   daeae:	b086      	sub	sp, #24
   daeb0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daeb4:	9104      	str	r1, [sp, #16]
   daeb6:	6801      	ldr	r1, [r0, #0]
   daeb8:	9103      	str	r1, [sp, #12]
   daeba:	6841      	ldr	r1, [r0, #4]
   daebc:	9102      	str	r1, [sp, #8]
   daebe:	6881      	ldr	r1, [r0, #8]
   daec0:	9101      	str	r1, [sp, #4]
   daec2:	68c1      	ldr	r1, [r0, #12]
   daec4:	9100      	str	r1, [sp, #0]
   daec6:	4907      	ldr	r1, [pc, #28]	; (daee4 <asctime_r+0x40>)
   daec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daecc:	440b      	add	r3, r1
   daece:	4906      	ldr	r1, [pc, #24]	; (daee8 <asctime_r+0x44>)
   daed0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daed4:	440a      	add	r2, r1
   daed6:	4620      	mov	r0, r4
   daed8:	4904      	ldr	r1, [pc, #16]	; (daeec <asctime_r+0x48>)
   daeda:	f7fd fa51 	bl	d8380 <siprintf>
   daede:	4620      	mov	r0, r4
   daee0:	b006      	add	sp, #24
   daee2:	bd10      	pop	{r4, pc}
   daee4:	000dd992 	.word	0x000dd992
   daee8:	000dd97d 	.word	0x000dd97d
   daeec:	000dd9b6 	.word	0x000dd9b6

000daef0 <atoi>:
   daef0:	220a      	movs	r2, #10
   daef2:	2100      	movs	r1, #0
   daef4:	f001 ba50 	b.w	dc398 <strtol>

000daef8 <atol>:
   daef8:	220a      	movs	r2, #10
   daefa:	2100      	movs	r1, #0
   daefc:	f001 ba4c 	b.w	dc398 <strtol>

000daf00 <__cxa_atexit>:
   daf00:	b510      	push	{r4, lr}
   daf02:	4c05      	ldr	r4, [pc, #20]	; (daf18 <__cxa_atexit+0x18>)
   daf04:	4613      	mov	r3, r2
   daf06:	b12c      	cbz	r4, daf14 <__cxa_atexit+0x14>
   daf08:	460a      	mov	r2, r1
   daf0a:	4601      	mov	r1, r0
   daf0c:	2002      	movs	r0, #2
   daf0e:	f3af 8000 	nop.w
   daf12:	bd10      	pop	{r4, pc}
   daf14:	4620      	mov	r0, r4
   daf16:	bd10      	pop	{r4, pc}
   daf18:	00000000 	.word	0x00000000

000daf1c <gmtime>:
   daf1c:	b538      	push	{r3, r4, r5, lr}
   daf1e:	4b07      	ldr	r3, [pc, #28]	; (daf3c <gmtime+0x20>)
   daf20:	681c      	ldr	r4, [r3, #0]
   daf22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daf24:	4605      	mov	r5, r0
   daf26:	b91b      	cbnz	r3, daf30 <gmtime+0x14>
   daf28:	2024      	movs	r0, #36	; 0x24
   daf2a:	f7fd fa11 	bl	d8350 <malloc>
   daf2e:	63e0      	str	r0, [r4, #60]	; 0x3c
   daf30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daf32:	4628      	mov	r0, r5
   daf34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daf38:	f000 b802 	b.w	daf40 <gmtime_r>
   daf3c:	2003de58 	.word	0x2003de58

000daf40 <gmtime_r>:
   daf40:	6802      	ldr	r2, [r0, #0]
   daf42:	4b47      	ldr	r3, [pc, #284]	; (db060 <gmtime_r+0x120>)
   daf44:	b5f0      	push	{r4, r5, r6, r7, lr}
   daf46:	fb92 f4f3 	sdiv	r4, r2, r3
   daf4a:	fb03 2214 	mls	r2, r3, r4, r2
   daf4e:	2a00      	cmp	r2, #0
   daf50:	bfbc      	itt	lt
   daf52:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daf56:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   daf5a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   daf5e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   daf62:	fb92 f3f0 	sdiv	r3, r2, r0
   daf66:	fb00 2213 	mls	r2, r0, r3, r2
   daf6a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   daf6e:	bfac      	ite	ge
   daf70:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daf74:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daf78:	608b      	str	r3, [r1, #8]
   daf7a:	fb92 f3f0 	sdiv	r3, r2, r0
   daf7e:	fb00 2213 	mls	r2, r0, r3, r2
   daf82:	604b      	str	r3, [r1, #4]
   daf84:	600a      	str	r2, [r1, #0]
   daf86:	2307      	movs	r3, #7
   daf88:	1ce2      	adds	r2, r4, #3
   daf8a:	fb92 f3f3 	sdiv	r3, r2, r3
   daf8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daf92:	1ad3      	subs	r3, r2, r3
   daf94:	618b      	str	r3, [r1, #24]
   daf96:	4b33      	ldr	r3, [pc, #204]	; (db064 <gmtime_r+0x124>)
   daf98:	4d33      	ldr	r5, [pc, #204]	; (db068 <gmtime_r+0x128>)
   daf9a:	fb94 f5f5 	sdiv	r5, r4, r5
   daf9e:	fb03 4405 	mla	r4, r3, r5, r4
   dafa2:	f648 62ac 	movw	r2, #36524	; 0x8eac
   dafa6:	fbb4 f2f2 	udiv	r2, r4, r2
   dafaa:	4422      	add	r2, r4
   dafac:	f240 57b4 	movw	r7, #1460	; 0x5b4
   dafb0:	fbb4 f3f7 	udiv	r3, r4, r7
   dafb4:	1ad2      	subs	r2, r2, r3
   dafb6:	482d      	ldr	r0, [pc, #180]	; (db06c <gmtime_r+0x12c>)
   dafb8:	fbb4 f0f0 	udiv	r0, r4, r0
   dafbc:	f648 6694 	movw	r6, #36500	; 0x8e94
   dafc0:	1a13      	subs	r3, r2, r0
   dafc2:	fbb3 f6f6 	udiv	r6, r3, r6
   dafc6:	4434      	add	r4, r6
   dafc8:	f240 126d 	movw	r2, #365	; 0x16d
   dafcc:	fbb3 f0f2 	udiv	r0, r3, r2
   dafd0:	fbb3 f3f7 	udiv	r3, r3, r7
   dafd4:	1ae3      	subs	r3, r4, r3
   dafd6:	fb02 3310 	mls	r3, r2, r0, r3
   dafda:	2499      	movs	r4, #153	; 0x99
   dafdc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   dafe0:	3202      	adds	r2, #2
   dafe2:	fbb2 f2f4 	udiv	r2, r2, r4
   dafe6:	2a0a      	cmp	r2, #10
   dafe8:	fb04 f402 	mul.w	r4, r4, r2
   dafec:	f104 0602 	add.w	r6, r4, #2
   daff0:	f04f 0405 	mov.w	r4, #5
   daff4:	fbb6 f4f4 	udiv	r4, r6, r4
   daff8:	bf34      	ite	cc
   daffa:	2602      	movcc	r6, #2
   daffc:	f06f 0609 	mvncs.w	r6, #9
   db000:	4416      	add	r6, r2
   db002:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db006:	fb02 0505 	mla	r5, r2, r5, r0
   db00a:	1c5f      	adds	r7, r3, #1
   db00c:	2e01      	cmp	r6, #1
   db00e:	bf98      	it	ls
   db010:	3501      	addls	r5, #1
   db012:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db016:	eba7 0704 	sub.w	r7, r7, r4
   db01a:	d302      	bcc.n	db022 <gmtime_r+0xe2>
   db01c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db020:	e014      	b.n	db04c <gmtime_r+0x10c>
   db022:	0782      	lsls	r2, r0, #30
   db024:	d105      	bne.n	db032 <gmtime_r+0xf2>
   db026:	2464      	movs	r4, #100	; 0x64
   db028:	fbb0 f2f4 	udiv	r2, r0, r4
   db02c:	fb04 0212 	mls	r2, r4, r2, r0
   db030:	b94a      	cbnz	r2, db046 <gmtime_r+0x106>
   db032:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db036:	fbb0 f4f2 	udiv	r4, r0, r2
   db03a:	fb02 0014 	mls	r0, r2, r4, r0
   db03e:	fab0 f280 	clz	r2, r0
   db042:	0952      	lsrs	r2, r2, #5
   db044:	e000      	b.n	db048 <gmtime_r+0x108>
   db046:	2201      	movs	r2, #1
   db048:	333b      	adds	r3, #59	; 0x3b
   db04a:	441a      	add	r2, r3
   db04c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db050:	2300      	movs	r3, #0
   db052:	61ca      	str	r2, [r1, #28]
   db054:	614d      	str	r5, [r1, #20]
   db056:	610e      	str	r6, [r1, #16]
   db058:	60cf      	str	r7, [r1, #12]
   db05a:	620b      	str	r3, [r1, #32]
   db05c:	4608      	mov	r0, r1
   db05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db060:	00015180 	.word	0x00015180
   db064:	fffdc54f 	.word	0xfffdc54f
   db068:	00023ab1 	.word	0x00023ab1
   db06c:	00023ab0 	.word	0x00023ab0

000db070 <localtime>:
   db070:	b538      	push	{r3, r4, r5, lr}
   db072:	4b07      	ldr	r3, [pc, #28]	; (db090 <localtime+0x20>)
   db074:	681c      	ldr	r4, [r3, #0]
   db076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db078:	4605      	mov	r5, r0
   db07a:	b91b      	cbnz	r3, db084 <localtime+0x14>
   db07c:	2024      	movs	r0, #36	; 0x24
   db07e:	f7fd f967 	bl	d8350 <malloc>
   db082:	63e0      	str	r0, [r4, #60]	; 0x3c
   db084:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db086:	4628      	mov	r0, r5
   db088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db08c:	f000 b802 	b.w	db094 <localtime_r>
   db090:	2003de58 	.word	0x2003de58

000db094 <localtime_r>:
   db094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db098:	460c      	mov	r4, r1
   db09a:	4680      	mov	r8, r0
   db09c:	f001 fcaa 	bl	dc9f4 <__gettzinfo>
   db0a0:	4621      	mov	r1, r4
   db0a2:	4607      	mov	r7, r0
   db0a4:	4640      	mov	r0, r8
   db0a6:	f7ff ff4b 	bl	daf40 <gmtime_r>
   db0aa:	6946      	ldr	r6, [r0, #20]
   db0ac:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db0b0:	07b3      	lsls	r3, r6, #30
   db0b2:	4604      	mov	r4, r0
   db0b4:	d105      	bne.n	db0c2 <localtime_r+0x2e>
   db0b6:	2264      	movs	r2, #100	; 0x64
   db0b8:	fb96 f3f2 	sdiv	r3, r6, r2
   db0bc:	fb02 6313 	mls	r3, r2, r3, r6
   db0c0:	b94b      	cbnz	r3, db0d6 <localtime_r+0x42>
   db0c2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db0c6:	fb96 f3f5 	sdiv	r3, r6, r5
   db0ca:	fb05 6513 	mls	r5, r5, r3, r6
   db0ce:	fab5 f385 	clz	r3, r5
   db0d2:	095b      	lsrs	r3, r3, #5
   db0d4:	e000      	b.n	db0d8 <localtime_r+0x44>
   db0d6:	2301      	movs	r3, #1
   db0d8:	4a5f      	ldr	r2, [pc, #380]	; (db258 <localtime_r+0x1c4>)
   db0da:	2530      	movs	r5, #48	; 0x30
   db0dc:	fb05 2503 	mla	r5, r5, r3, r2
   db0e0:	f001 faa4 	bl	dc62c <__tz_lock>
   db0e4:	f001 faa4 	bl	dc630 <_tzset_unlocked>
   db0e8:	4b5c      	ldr	r3, [pc, #368]	; (db25c <localtime_r+0x1c8>)
   db0ea:	681b      	ldr	r3, [r3, #0]
   db0ec:	b1f3      	cbz	r3, db12c <localtime_r+0x98>
   db0ee:	687b      	ldr	r3, [r7, #4]
   db0f0:	429e      	cmp	r6, r3
   db0f2:	d105      	bne.n	db100 <localtime_r+0x6c>
   db0f4:	6839      	ldr	r1, [r7, #0]
   db0f6:	f8d8 3000 	ldr.w	r3, [r8]
   db0fa:	69fa      	ldr	r2, [r7, #28]
   db0fc:	b941      	cbnz	r1, db110 <localtime_r+0x7c>
   db0fe:	e00a      	b.n	db116 <localtime_r+0x82>
   db100:	4630      	mov	r0, r6
   db102:	f001 f9eb 	bl	dc4dc <__tzcalc_limits>
   db106:	2800      	cmp	r0, #0
   db108:	d1f4      	bne.n	db0f4 <localtime_r+0x60>
   db10a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db10e:	e00d      	b.n	db12c <localtime_r+0x98>
   db110:	4293      	cmp	r3, r2
   db112:	db08      	blt.n	db126 <localtime_r+0x92>
   db114:	e001      	b.n	db11a <localtime_r+0x86>
   db116:	4293      	cmp	r3, r2
   db118:	da07      	bge.n	db12a <localtime_r+0x96>
   db11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db11c:	4293      	cmp	r3, r2
   db11e:	bfac      	ite	ge
   db120:	2300      	movge	r3, #0
   db122:	2301      	movlt	r3, #1
   db124:	e002      	b.n	db12c <localtime_r+0x98>
   db126:	2300      	movs	r3, #0
   db128:	e000      	b.n	db12c <localtime_r+0x98>
   db12a:	2301      	movs	r3, #1
   db12c:	6223      	str	r3, [r4, #32]
   db12e:	6a23      	ldr	r3, [r4, #32]
   db130:	2b01      	cmp	r3, #1
   db132:	bf0c      	ite	eq
   db134:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db136:	6a39      	ldrne	r1, [r7, #32]
   db138:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db13c:	203c      	movs	r0, #60	; 0x3c
   db13e:	fb91 f6f3 	sdiv	r6, r1, r3
   db142:	fb03 1316 	mls	r3, r3, r6, r1
   db146:	6861      	ldr	r1, [r4, #4]
   db148:	fb93 f2f0 	sdiv	r2, r3, r0
   db14c:	fb00 3012 	mls	r0, r0, r2, r3
   db150:	6823      	ldr	r3, [r4, #0]
   db152:	1a89      	subs	r1, r1, r2
   db154:	68a2      	ldr	r2, [r4, #8]
   db156:	6061      	str	r1, [r4, #4]
   db158:	1a1b      	subs	r3, r3, r0
   db15a:	1b92      	subs	r2, r2, r6
   db15c:	2b3b      	cmp	r3, #59	; 0x3b
   db15e:	6023      	str	r3, [r4, #0]
   db160:	60a2      	str	r2, [r4, #8]
   db162:	dd03      	ble.n	db16c <localtime_r+0xd8>
   db164:	3101      	adds	r1, #1
   db166:	6061      	str	r1, [r4, #4]
   db168:	3b3c      	subs	r3, #60	; 0x3c
   db16a:	e004      	b.n	db176 <localtime_r+0xe2>
   db16c:	2b00      	cmp	r3, #0
   db16e:	da03      	bge.n	db178 <localtime_r+0xe4>
   db170:	3901      	subs	r1, #1
   db172:	6061      	str	r1, [r4, #4]
   db174:	333c      	adds	r3, #60	; 0x3c
   db176:	6023      	str	r3, [r4, #0]
   db178:	6863      	ldr	r3, [r4, #4]
   db17a:	2b3b      	cmp	r3, #59	; 0x3b
   db17c:	dd03      	ble.n	db186 <localtime_r+0xf2>
   db17e:	3201      	adds	r2, #1
   db180:	60a2      	str	r2, [r4, #8]
   db182:	3b3c      	subs	r3, #60	; 0x3c
   db184:	e004      	b.n	db190 <localtime_r+0xfc>
   db186:	2b00      	cmp	r3, #0
   db188:	da03      	bge.n	db192 <localtime_r+0xfe>
   db18a:	3a01      	subs	r2, #1
   db18c:	60a2      	str	r2, [r4, #8]
   db18e:	333c      	adds	r3, #60	; 0x3c
   db190:	6063      	str	r3, [r4, #4]
   db192:	68a3      	ldr	r3, [r4, #8]
   db194:	2b17      	cmp	r3, #23
   db196:	dd22      	ble.n	db1de <localtime_r+0x14a>
   db198:	69e2      	ldr	r2, [r4, #28]
   db19a:	3201      	adds	r2, #1
   db19c:	61e2      	str	r2, [r4, #28]
   db19e:	69a2      	ldr	r2, [r4, #24]
   db1a0:	3201      	adds	r2, #1
   db1a2:	2a06      	cmp	r2, #6
   db1a4:	bfc8      	it	gt
   db1a6:	2200      	movgt	r2, #0
   db1a8:	61a2      	str	r2, [r4, #24]
   db1aa:	68e2      	ldr	r2, [r4, #12]
   db1ac:	3b18      	subs	r3, #24
   db1ae:	3201      	adds	r2, #1
   db1b0:	60a3      	str	r3, [r4, #8]
   db1b2:	6923      	ldr	r3, [r4, #16]
   db1b4:	60e2      	str	r2, [r4, #12]
   db1b6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db1ba:	428a      	cmp	r2, r1
   db1bc:	dd46      	ble.n	db24c <localtime_r+0x1b8>
   db1be:	3301      	adds	r3, #1
   db1c0:	2b0c      	cmp	r3, #12
   db1c2:	bf0c      	ite	eq
   db1c4:	6963      	ldreq	r3, [r4, #20]
   db1c6:	6123      	strne	r3, [r4, #16]
   db1c8:	eba2 0201 	sub.w	r2, r2, r1
   db1cc:	60e2      	str	r2, [r4, #12]
   db1ce:	bf01      	itttt	eq
   db1d0:	3301      	addeq	r3, #1
   db1d2:	2200      	moveq	r2, #0
   db1d4:	6122      	streq	r2, [r4, #16]
   db1d6:	6163      	streq	r3, [r4, #20]
   db1d8:	bf08      	it	eq
   db1da:	61e2      	streq	r2, [r4, #28]
   db1dc:	e036      	b.n	db24c <localtime_r+0x1b8>
   db1de:	2b00      	cmp	r3, #0
   db1e0:	da34      	bge.n	db24c <localtime_r+0x1b8>
   db1e2:	69e2      	ldr	r2, [r4, #28]
   db1e4:	3a01      	subs	r2, #1
   db1e6:	61e2      	str	r2, [r4, #28]
   db1e8:	69a2      	ldr	r2, [r4, #24]
   db1ea:	3a01      	subs	r2, #1
   db1ec:	bf48      	it	mi
   db1ee:	2206      	movmi	r2, #6
   db1f0:	61a2      	str	r2, [r4, #24]
   db1f2:	68e2      	ldr	r2, [r4, #12]
   db1f4:	3318      	adds	r3, #24
   db1f6:	3a01      	subs	r2, #1
   db1f8:	60e2      	str	r2, [r4, #12]
   db1fa:	60a3      	str	r3, [r4, #8]
   db1fc:	bb32      	cbnz	r2, db24c <localtime_r+0x1b8>
   db1fe:	6923      	ldr	r3, [r4, #16]
   db200:	3b01      	subs	r3, #1
   db202:	d401      	bmi.n	db208 <localtime_r+0x174>
   db204:	6123      	str	r3, [r4, #16]
   db206:	e01d      	b.n	db244 <localtime_r+0x1b0>
   db208:	230b      	movs	r3, #11
   db20a:	6123      	str	r3, [r4, #16]
   db20c:	6963      	ldr	r3, [r4, #20]
   db20e:	1e5a      	subs	r2, r3, #1
   db210:	f012 0f03 	tst.w	r2, #3
   db214:	6162      	str	r2, [r4, #20]
   db216:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db21a:	d105      	bne.n	db228 <localtime_r+0x194>
   db21c:	2164      	movs	r1, #100	; 0x64
   db21e:	fb93 f2f1 	sdiv	r2, r3, r1
   db222:	fb01 3212 	mls	r2, r1, r2, r3
   db226:	b94a      	cbnz	r2, db23c <localtime_r+0x1a8>
   db228:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db22c:	fb93 f2f1 	sdiv	r2, r3, r1
   db230:	fb01 3312 	mls	r3, r1, r2, r3
   db234:	fab3 f383 	clz	r3, r3
   db238:	095b      	lsrs	r3, r3, #5
   db23a:	e000      	b.n	db23e <localtime_r+0x1aa>
   db23c:	2301      	movs	r3, #1
   db23e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db242:	61e3      	str	r3, [r4, #28]
   db244:	6923      	ldr	r3, [r4, #16]
   db246:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db24a:	60e3      	str	r3, [r4, #12]
   db24c:	f001 f9ef 	bl	dc62e <__tz_unlock>
   db250:	4620      	mov	r0, r4
   db252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db256:	bf00      	nop
   db258:	000ddb98 	.word	0x000ddb98
   db25c:	2003e7e4 	.word	0x2003e7e4

000db260 <memcpy>:
   db260:	b510      	push	{r4, lr}
   db262:	1e43      	subs	r3, r0, #1
   db264:	440a      	add	r2, r1
   db266:	4291      	cmp	r1, r2
   db268:	d004      	beq.n	db274 <memcpy+0x14>
   db26a:	f811 4b01 	ldrb.w	r4, [r1], #1
   db26e:	f803 4f01 	strb.w	r4, [r3, #1]!
   db272:	e7f8      	b.n	db266 <memcpy+0x6>
   db274:	bd10      	pop	{r4, pc}

000db276 <memmove>:
   db276:	4288      	cmp	r0, r1
   db278:	b510      	push	{r4, lr}
   db27a:	eb01 0302 	add.w	r3, r1, r2
   db27e:	d801      	bhi.n	db284 <memmove+0xe>
   db280:	1e42      	subs	r2, r0, #1
   db282:	e00b      	b.n	db29c <memmove+0x26>
   db284:	4298      	cmp	r0, r3
   db286:	d2fb      	bcs.n	db280 <memmove+0xa>
   db288:	1881      	adds	r1, r0, r2
   db28a:	1ad2      	subs	r2, r2, r3
   db28c:	42d3      	cmn	r3, r2
   db28e:	d004      	beq.n	db29a <memmove+0x24>
   db290:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db294:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db298:	e7f8      	b.n	db28c <memmove+0x16>
   db29a:	bd10      	pop	{r4, pc}
   db29c:	4299      	cmp	r1, r3
   db29e:	d004      	beq.n	db2aa <memmove+0x34>
   db2a0:	f811 4b01 	ldrb.w	r4, [r1], #1
   db2a4:	f802 4f01 	strb.w	r4, [r2, #1]!
   db2a8:	e7f8      	b.n	db29c <memmove+0x26>
   db2aa:	bd10      	pop	{r4, pc}

000db2ac <memset>:
   db2ac:	4402      	add	r2, r0
   db2ae:	4603      	mov	r3, r0
   db2b0:	4293      	cmp	r3, r2
   db2b2:	d002      	beq.n	db2ba <memset+0xe>
   db2b4:	f803 1b01 	strb.w	r1, [r3], #1
   db2b8:	e7fa      	b.n	db2b0 <memset+0x4>
   db2ba:	4770      	bx	lr

000db2bc <validate_structure>:
   db2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db2be:	6801      	ldr	r1, [r0, #0]
   db2c0:	293b      	cmp	r1, #59	; 0x3b
   db2c2:	4604      	mov	r4, r0
   db2c4:	d911      	bls.n	db2ea <validate_structure+0x2e>
   db2c6:	223c      	movs	r2, #60	; 0x3c
   db2c8:	4668      	mov	r0, sp
   db2ca:	f001 fb3b 	bl	dc944 <div>
   db2ce:	9a01      	ldr	r2, [sp, #4]
   db2d0:	6863      	ldr	r3, [r4, #4]
   db2d2:	9900      	ldr	r1, [sp, #0]
   db2d4:	2a00      	cmp	r2, #0
   db2d6:	440b      	add	r3, r1
   db2d8:	6063      	str	r3, [r4, #4]
   db2da:	bfbb      	ittet	lt
   db2dc:	323c      	addlt	r2, #60	; 0x3c
   db2de:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db2e2:	6022      	strge	r2, [r4, #0]
   db2e4:	6022      	strlt	r2, [r4, #0]
   db2e6:	bfb8      	it	lt
   db2e8:	6063      	strlt	r3, [r4, #4]
   db2ea:	6861      	ldr	r1, [r4, #4]
   db2ec:	293b      	cmp	r1, #59	; 0x3b
   db2ee:	d911      	bls.n	db314 <validate_structure+0x58>
   db2f0:	223c      	movs	r2, #60	; 0x3c
   db2f2:	4668      	mov	r0, sp
   db2f4:	f001 fb26 	bl	dc944 <div>
   db2f8:	9a01      	ldr	r2, [sp, #4]
   db2fa:	68a1      	ldr	r1, [r4, #8]
   db2fc:	9b00      	ldr	r3, [sp, #0]
   db2fe:	2a00      	cmp	r2, #0
   db300:	440b      	add	r3, r1
   db302:	60a3      	str	r3, [r4, #8]
   db304:	bfbb      	ittet	lt
   db306:	323c      	addlt	r2, #60	; 0x3c
   db308:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db30c:	6062      	strge	r2, [r4, #4]
   db30e:	6062      	strlt	r2, [r4, #4]
   db310:	bfb8      	it	lt
   db312:	60a3      	strlt	r3, [r4, #8]
   db314:	68a1      	ldr	r1, [r4, #8]
   db316:	2917      	cmp	r1, #23
   db318:	d911      	bls.n	db33e <validate_structure+0x82>
   db31a:	2218      	movs	r2, #24
   db31c:	4668      	mov	r0, sp
   db31e:	f001 fb11 	bl	dc944 <div>
   db322:	9a01      	ldr	r2, [sp, #4]
   db324:	68e1      	ldr	r1, [r4, #12]
   db326:	9b00      	ldr	r3, [sp, #0]
   db328:	2a00      	cmp	r2, #0
   db32a:	440b      	add	r3, r1
   db32c:	60e3      	str	r3, [r4, #12]
   db32e:	bfbb      	ittet	lt
   db330:	3218      	addlt	r2, #24
   db332:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db336:	60a2      	strge	r2, [r4, #8]
   db338:	60a2      	strlt	r2, [r4, #8]
   db33a:	bfb8      	it	lt
   db33c:	60e3      	strlt	r3, [r4, #12]
   db33e:	6921      	ldr	r1, [r4, #16]
   db340:	290b      	cmp	r1, #11
   db342:	d911      	bls.n	db368 <validate_structure+0xac>
   db344:	220c      	movs	r2, #12
   db346:	4668      	mov	r0, sp
   db348:	f001 fafc 	bl	dc944 <div>
   db34c:	9a01      	ldr	r2, [sp, #4]
   db34e:	6961      	ldr	r1, [r4, #20]
   db350:	9b00      	ldr	r3, [sp, #0]
   db352:	2a00      	cmp	r2, #0
   db354:	440b      	add	r3, r1
   db356:	6163      	str	r3, [r4, #20]
   db358:	bfbb      	ittet	lt
   db35a:	320c      	addlt	r2, #12
   db35c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db360:	6122      	strge	r2, [r4, #16]
   db362:	6122      	strlt	r2, [r4, #16]
   db364:	bfb8      	it	lt
   db366:	6163      	strlt	r3, [r4, #20]
   db368:	6963      	ldr	r3, [r4, #20]
   db36a:	0799      	lsls	r1, r3, #30
   db36c:	d112      	bne.n	db394 <validate_structure+0xd8>
   db36e:	2164      	movs	r1, #100	; 0x64
   db370:	fb93 f2f1 	sdiv	r2, r3, r1
   db374:	fb01 3212 	mls	r2, r1, r2, r3
   db378:	b972      	cbnz	r2, db398 <validate_structure+0xdc>
   db37a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db37e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db382:	fb93 f2f1 	sdiv	r2, r3, r1
   db386:	fb01 3312 	mls	r3, r1, r2, r3
   db38a:	2b00      	cmp	r3, #0
   db38c:	bf14      	ite	ne
   db38e:	231c      	movne	r3, #28
   db390:	231d      	moveq	r3, #29
   db392:	e002      	b.n	db39a <validate_structure+0xde>
   db394:	231c      	movs	r3, #28
   db396:	e000      	b.n	db39a <validate_structure+0xde>
   db398:	231d      	movs	r3, #29
   db39a:	68e2      	ldr	r2, [r4, #12]
   db39c:	2a00      	cmp	r2, #0
   db39e:	dd06      	ble.n	db3ae <validate_structure+0xf2>
   db3a0:	4f33      	ldr	r7, [pc, #204]	; (db470 <validate_structure+0x1b4>)
   db3a2:	f04f 0e00 	mov.w	lr, #0
   db3a6:	2564      	movs	r5, #100	; 0x64
   db3a8:	f44f 76c8 	mov.w	r6, #400	; 0x190
   db3ac:	e039      	b.n	db422 <validate_structure+0x166>
   db3ae:	4f30      	ldr	r7, [pc, #192]	; (db470 <validate_structure+0x1b4>)
   db3b0:	260b      	movs	r6, #11
   db3b2:	2064      	movs	r0, #100	; 0x64
   db3b4:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db3b8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   db3bc:	f1be 0f00 	cmp.w	lr, #0
   db3c0:	dc53      	bgt.n	db46a <validate_structure+0x1ae>
   db3c2:	6921      	ldr	r1, [r4, #16]
   db3c4:	3901      	subs	r1, #1
   db3c6:	6121      	str	r1, [r4, #16]
   db3c8:	3101      	adds	r1, #1
   db3ca:	d118      	bne.n	db3fe <validate_structure+0x142>
   db3cc:	6963      	ldr	r3, [r4, #20]
   db3ce:	6126      	str	r6, [r4, #16]
   db3d0:	1e59      	subs	r1, r3, #1
   db3d2:	078a      	lsls	r2, r1, #30
   db3d4:	6161      	str	r1, [r4, #20]
   db3d6:	d10f      	bne.n	db3f8 <validate_structure+0x13c>
   db3d8:	fb91 f2f0 	sdiv	r2, r1, r0
   db3dc:	fb00 1112 	mls	r1, r0, r2, r1
   db3e0:	b961      	cbnz	r1, db3fc <validate_structure+0x140>
   db3e2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db3e6:	fb93 f2f5 	sdiv	r2, r3, r5
   db3ea:	fb05 3312 	mls	r3, r5, r2, r3
   db3ee:	2b00      	cmp	r3, #0
   db3f0:	bf14      	ite	ne
   db3f2:	231c      	movne	r3, #28
   db3f4:	231d      	moveq	r3, #29
   db3f6:	e002      	b.n	db3fe <validate_structure+0x142>
   db3f8:	231c      	movs	r3, #28
   db3fa:	e000      	b.n	db3fe <validate_structure+0x142>
   db3fc:	231d      	movs	r3, #29
   db3fe:	6922      	ldr	r2, [r4, #16]
   db400:	2a01      	cmp	r2, #1
   db402:	bf14      	ite	ne
   db404:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   db408:	461a      	moveq	r2, r3
   db40a:	4472      	add	r2, lr
   db40c:	60e2      	str	r2, [r4, #12]
   db40e:	e7d3      	b.n	db3b8 <validate_structure+0xfc>
   db410:	428b      	cmp	r3, r1
   db412:	da2a      	bge.n	db46a <validate_structure+0x1ae>
   db414:	4618      	mov	r0, r3
   db416:	3201      	adds	r2, #1
   db418:	1a09      	subs	r1, r1, r0
   db41a:	2a0c      	cmp	r2, #12
   db41c:	60e1      	str	r1, [r4, #12]
   db41e:	6122      	str	r2, [r4, #16]
   db420:	d008      	beq.n	db434 <validate_structure+0x178>
   db422:	6922      	ldr	r2, [r4, #16]
   db424:	68e1      	ldr	r1, [r4, #12]
   db426:	2a01      	cmp	r2, #1
   db428:	d0f2      	beq.n	db410 <validate_structure+0x154>
   db42a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   db42e:	4281      	cmp	r1, r0
   db430:	dcf1      	bgt.n	db416 <validate_structure+0x15a>
   db432:	e01a      	b.n	db46a <validate_structure+0x1ae>
   db434:	6963      	ldr	r3, [r4, #20]
   db436:	f8c4 e010 	str.w	lr, [r4, #16]
   db43a:	1c5a      	adds	r2, r3, #1
   db43c:	0791      	lsls	r1, r2, #30
   db43e:	6162      	str	r2, [r4, #20]
   db440:	d10f      	bne.n	db462 <validate_structure+0x1a6>
   db442:	fb92 f1f5 	sdiv	r1, r2, r5
   db446:	fb05 2211 	mls	r2, r5, r1, r2
   db44a:	b962      	cbnz	r2, db466 <validate_structure+0x1aa>
   db44c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   db450:	fb93 f2f6 	sdiv	r2, r3, r6
   db454:	fb06 3312 	mls	r3, r6, r2, r3
   db458:	2b00      	cmp	r3, #0
   db45a:	bf14      	ite	ne
   db45c:	231c      	movne	r3, #28
   db45e:	231d      	moveq	r3, #29
   db460:	e7df      	b.n	db422 <validate_structure+0x166>
   db462:	231c      	movs	r3, #28
   db464:	e7dd      	b.n	db422 <validate_structure+0x166>
   db466:	231d      	movs	r3, #29
   db468:	e7db      	b.n	db422 <validate_structure+0x166>
   db46a:	b003      	add	sp, #12
   db46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db46e:	bf00      	nop
   db470:	000ddb68 	.word	0x000ddb68

000db474 <mktime>:
   db474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db478:	4605      	mov	r5, r0
   db47a:	f001 fabb 	bl	dc9f4 <__gettzinfo>
   db47e:	4681      	mov	r9, r0
   db480:	4628      	mov	r0, r5
   db482:	f7ff ff1b 	bl	db2bc <validate_structure>
   db486:	e895 000c 	ldmia.w	r5, {r2, r3}
   db48a:	213c      	movs	r1, #60	; 0x3c
   db48c:	fb01 2303 	mla	r3, r1, r3, r2
   db490:	68aa      	ldr	r2, [r5, #8]
   db492:	68ec      	ldr	r4, [r5, #12]
   db494:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   db498:	fb08 3102 	mla	r1, r8, r2, r3
   db49c:	692b      	ldr	r3, [r5, #16]
   db49e:	4aab      	ldr	r2, [pc, #684]	; (db74c <mktime+0x2d8>)
   db4a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   db4a4:	3c01      	subs	r4, #1
   db4a6:	2b01      	cmp	r3, #1
   db4a8:	4414      	add	r4, r2
   db4aa:	696b      	ldr	r3, [r5, #20]
   db4ac:	dd11      	ble.n	db4d2 <mktime+0x5e>
   db4ae:	079e      	lsls	r6, r3, #30
   db4b0:	d10f      	bne.n	db4d2 <mktime+0x5e>
   db4b2:	2064      	movs	r0, #100	; 0x64
   db4b4:	fb93 f2f0 	sdiv	r2, r3, r0
   db4b8:	fb00 3212 	mls	r2, r0, r2, r3
   db4bc:	b942      	cbnz	r2, db4d0 <mktime+0x5c>
   db4be:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   db4c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db4c6:	fb96 f0f2 	sdiv	r0, r6, r2
   db4ca:	fb02 6210 	mls	r2, r2, r0, r6
   db4ce:	b902      	cbnz	r2, db4d2 <mktime+0x5e>
   db4d0:	3401      	adds	r4, #1
   db4d2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   db4d6:	3210      	adds	r2, #16
   db4d8:	f644 6020 	movw	r0, #20000	; 0x4e20
   db4dc:	4282      	cmp	r2, r0
   db4de:	61ec      	str	r4, [r5, #28]
   db4e0:	461f      	mov	r7, r3
   db4e2:	f200 812e 	bhi.w	db742 <mktime+0x2ce>
   db4e6:	2b46      	cmp	r3, #70	; 0x46
   db4e8:	dd22      	ble.n	db530 <mktime+0xbc>
   db4ea:	2246      	movs	r2, #70	; 0x46
   db4ec:	f240 1c6d 	movw	ip, #365	; 0x16d
   db4f0:	2664      	movs	r6, #100	; 0x64
   db4f2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   db4f6:	0790      	lsls	r0, r2, #30
   db4f8:	d110      	bne.n	db51c <mktime+0xa8>
   db4fa:	fb92 f0f6 	sdiv	r0, r2, r6
   db4fe:	fb06 2010 	mls	r0, r6, r0, r2
   db502:	b970      	cbnz	r0, db522 <mktime+0xae>
   db504:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   db508:	fb98 f0fe 	sdiv	r0, r8, lr
   db50c:	fb0e 8010 	mls	r0, lr, r0, r8
   db510:	2800      	cmp	r0, #0
   db512:	bf14      	ite	ne
   db514:	4660      	movne	r0, ip
   db516:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db51a:	e004      	b.n	db526 <mktime+0xb2>
   db51c:	f240 106d 	movw	r0, #365	; 0x16d
   db520:	e001      	b.n	db526 <mktime+0xb2>
   db522:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db526:	3201      	adds	r2, #1
   db528:	4293      	cmp	r3, r2
   db52a:	4404      	add	r4, r0
   db52c:	d1e3      	bne.n	db4f6 <mktime+0x82>
   db52e:	e044      	b.n	db5ba <mktime+0x146>
   db530:	d043      	beq.n	db5ba <mktime+0x146>
   db532:	2245      	movs	r2, #69	; 0x45
   db534:	f240 1e6d 	movw	lr, #365	; 0x16d
   db538:	2664      	movs	r6, #100	; 0x64
   db53a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   db53e:	429a      	cmp	r2, r3
   db540:	dd1a      	ble.n	db578 <mktime+0x104>
   db542:	0790      	lsls	r0, r2, #30
   db544:	d110      	bne.n	db568 <mktime+0xf4>
   db546:	fb92 f0f6 	sdiv	r0, r2, r6
   db54a:	fb06 2010 	mls	r0, r6, r0, r2
   db54e:	b970      	cbnz	r0, db56e <mktime+0xfa>
   db550:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   db554:	fb9c f0f7 	sdiv	r0, ip, r7
   db558:	fb07 c010 	mls	r0, r7, r0, ip
   db55c:	2800      	cmp	r0, #0
   db55e:	bf14      	ite	ne
   db560:	4670      	movne	r0, lr
   db562:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db566:	e004      	b.n	db572 <mktime+0xfe>
   db568:	f240 106d 	movw	r0, #365	; 0x16d
   db56c:	e001      	b.n	db572 <mktime+0xfe>
   db56e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db572:	1a24      	subs	r4, r4, r0
   db574:	3a01      	subs	r2, #1
   db576:	e7e2      	b.n	db53e <mktime+0xca>
   db578:	2b45      	cmp	r3, #69	; 0x45
   db57a:	bfa8      	it	ge
   db57c:	2345      	movge	r3, #69	; 0x45
   db57e:	079e      	lsls	r6, r3, #30
   db580:	461f      	mov	r7, r3
   db582:	d114      	bne.n	db5ae <mktime+0x13a>
   db584:	2264      	movs	r2, #100	; 0x64
   db586:	fb93 f3f2 	sdiv	r3, r3, r2
   db58a:	fb02 7313 	mls	r3, r2, r3, r7
   db58e:	b98b      	cbnz	r3, db5b4 <mktime+0x140>
   db590:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   db594:	f44f 73c8 	mov.w	r3, #400	; 0x190
   db598:	fb90 f2f3 	sdiv	r2, r0, r3
   db59c:	fb03 0312 	mls	r3, r3, r2, r0
   db5a0:	2b00      	cmp	r3, #0
   db5a2:	f240 136d 	movw	r3, #365	; 0x16d
   db5a6:	bf08      	it	eq
   db5a8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   db5ac:	e004      	b.n	db5b8 <mktime+0x144>
   db5ae:	f240 136d 	movw	r3, #365	; 0x16d
   db5b2:	e001      	b.n	db5b8 <mktime+0x144>
   db5b4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   db5b8:	1ae4      	subs	r4, r4, r3
   db5ba:	4865      	ldr	r0, [pc, #404]	; (db750 <mktime+0x2dc>)
   db5bc:	fb00 1804 	mla	r8, r0, r4, r1
   db5c0:	f001 f834 	bl	dc62c <__tz_lock>
   db5c4:	f001 f834 	bl	dc630 <_tzset_unlocked>
   db5c8:	4b62      	ldr	r3, [pc, #392]	; (db754 <mktime+0x2e0>)
   db5ca:	681e      	ldr	r6, [r3, #0]
   db5cc:	2e00      	cmp	r6, #0
   db5ce:	f000 80a4 	beq.w	db71a <mktime+0x2a6>
   db5d2:	6a2b      	ldr	r3, [r5, #32]
   db5d4:	6968      	ldr	r0, [r5, #20]
   db5d6:	2b01      	cmp	r3, #1
   db5d8:	bfa8      	it	ge
   db5da:	2301      	movge	r3, #1
   db5dc:	469a      	mov	sl, r3
   db5de:	f8d9 3004 	ldr.w	r3, [r9, #4]
   db5e2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db5e6:	4298      	cmp	r0, r3
   db5e8:	d10d      	bne.n	db606 <mktime+0x192>
   db5ea:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   db5ee:	f8d9 3020 	ldr.w	r3, [r9, #32]
   db5f2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db5f6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   db5fa:	1ad6      	subs	r6, r2, r3
   db5fc:	45b0      	cmp	r8, r6
   db5fe:	eba1 0100 	sub.w	r1, r1, r0
   db602:	da05      	bge.n	db610 <mktime+0x19c>
   db604:	e007      	b.n	db616 <mktime+0x1a2>
   db606:	f000 ff69 	bl	dc4dc <__tzcalc_limits>
   db60a:	2800      	cmp	r0, #0
   db60c:	d1ed      	bne.n	db5ea <mktime+0x176>
   db60e:	e076      	b.n	db6fe <mktime+0x28a>
   db610:	1a12      	subs	r2, r2, r0
   db612:	4590      	cmp	r8, r2
   db614:	db73      	blt.n	db6fe <mktime+0x28a>
   db616:	f8d9 2000 	ldr.w	r2, [r9]
   db61a:	b112      	cbz	r2, db622 <mktime+0x1ae>
   db61c:	4588      	cmp	r8, r1
   db61e:	db77      	blt.n	db710 <mktime+0x29c>
   db620:	e001      	b.n	db626 <mktime+0x1b2>
   db622:	4588      	cmp	r8, r1
   db624:	da07      	bge.n	db636 <mktime+0x1c2>
   db626:	45b0      	cmp	r8, r6
   db628:	bfac      	ite	ge
   db62a:	2600      	movge	r6, #0
   db62c:	2601      	movlt	r6, #1
   db62e:	f1ba 0f00 	cmp.w	sl, #0
   db632:	da04      	bge.n	db63e <mktime+0x1ca>
   db634:	e064      	b.n	db700 <mktime+0x28c>
   db636:	f1ba 0f00 	cmp.w	sl, #0
   db63a:	db63      	blt.n	db704 <mktime+0x290>
   db63c:	2601      	movs	r6, #1
   db63e:	ea8a 0a06 	eor.w	sl, sl, r6
   db642:	f1ba 0f01 	cmp.w	sl, #1
   db646:	d15b      	bne.n	db700 <mktime+0x28c>
   db648:	1a1b      	subs	r3, r3, r0
   db64a:	b906      	cbnz	r6, db64e <mktime+0x1da>
   db64c:	425b      	negs	r3, r3
   db64e:	682a      	ldr	r2, [r5, #0]
   db650:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   db654:	441a      	add	r2, r3
   db656:	602a      	str	r2, [r5, #0]
   db658:	4628      	mov	r0, r5
   db65a:	4498      	add	r8, r3
   db65c:	f7ff fe2e 	bl	db2bc <validate_structure>
   db660:	68eb      	ldr	r3, [r5, #12]
   db662:	ebb3 030a 	subs.w	r3, r3, sl
   db666:	d04b      	beq.n	db700 <mktime+0x28c>
   db668:	2b01      	cmp	r3, #1
   db66a:	dc03      	bgt.n	db674 <mktime+0x200>
   db66c:	1c98      	adds	r0, r3, #2
   db66e:	bfd8      	it	le
   db670:	2301      	movle	r3, #1
   db672:	e001      	b.n	db678 <mktime+0x204>
   db674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db678:	69ea      	ldr	r2, [r5, #28]
   db67a:	441c      	add	r4, r3
   db67c:	189b      	adds	r3, r3, r2
   db67e:	d51d      	bpl.n	db6bc <mktime+0x248>
   db680:	1e7b      	subs	r3, r7, #1
   db682:	0799      	lsls	r1, r3, #30
   db684:	d114      	bne.n	db6b0 <mktime+0x23c>
   db686:	2164      	movs	r1, #100	; 0x64
   db688:	fb93 f2f1 	sdiv	r2, r3, r1
   db68c:	fb01 3312 	mls	r3, r1, r2, r3
   db690:	b98b      	cbnz	r3, db6b6 <mktime+0x242>
   db692:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   db696:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db69a:	fb97 f3f2 	sdiv	r3, r7, r2
   db69e:	fb02 7713 	mls	r7, r2, r3, r7
   db6a2:	2f00      	cmp	r7, #0
   db6a4:	f240 136d 	movw	r3, #365	; 0x16d
   db6a8:	bf18      	it	ne
   db6aa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   db6ae:	e024      	b.n	db6fa <mktime+0x286>
   db6b0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   db6b4:	e021      	b.n	db6fa <mktime+0x286>
   db6b6:	f240 136d 	movw	r3, #365	; 0x16d
   db6ba:	e01e      	b.n	db6fa <mktime+0x286>
   db6bc:	07ba      	lsls	r2, r7, #30
   db6be:	d114      	bne.n	db6ea <mktime+0x276>
   db6c0:	2164      	movs	r1, #100	; 0x64
   db6c2:	fb97 f2f1 	sdiv	r2, r7, r1
   db6c6:	fb01 7212 	mls	r2, r1, r2, r7
   db6ca:	b98a      	cbnz	r2, db6f0 <mktime+0x27c>
   db6cc:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   db6d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db6d4:	fb97 f2f1 	sdiv	r2, r7, r1
   db6d8:	fb01 7712 	mls	r7, r1, r2, r7
   db6dc:	2f00      	cmp	r7, #0
   db6de:	f240 126d 	movw	r2, #365	; 0x16d
   db6e2:	bf08      	it	eq
   db6e4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db6e8:	e004      	b.n	db6f4 <mktime+0x280>
   db6ea:	f240 126d 	movw	r2, #365	; 0x16d
   db6ee:	e001      	b.n	db6f4 <mktime+0x280>
   db6f0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db6f4:	429a      	cmp	r2, r3
   db6f6:	bfd8      	it	le
   db6f8:	1a9b      	suble	r3, r3, r2
   db6fa:	61eb      	str	r3, [r5, #28]
   db6fc:	e000      	b.n	db700 <mktime+0x28c>
   db6fe:	4656      	mov	r6, sl
   db700:	2e01      	cmp	r6, #1
   db702:	d10a      	bne.n	db71a <mktime+0x2a6>
   db704:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db708:	2601      	movs	r6, #1
   db70a:	eb08 0700 	add.w	r7, r8, r0
   db70e:	e008      	b.n	db722 <mktime+0x2ae>
   db710:	f1ba 0f00 	cmp.w	sl, #0
   db714:	f04f 0600 	mov.w	r6, #0
   db718:	da91      	bge.n	db63e <mktime+0x1ca>
   db71a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   db71e:	eb08 0700 	add.w	r7, r8, r0
   db722:	f000 ff84 	bl	dc62e <__tz_unlock>
   db726:	3404      	adds	r4, #4
   db728:	2307      	movs	r3, #7
   db72a:	fb94 f3f3 	sdiv	r3, r4, r3
   db72e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db732:	1ae4      	subs	r4, r4, r3
   db734:	bf48      	it	mi
   db736:	3407      	addmi	r4, #7
   db738:	622e      	str	r6, [r5, #32]
   db73a:	61ac      	str	r4, [r5, #24]
   db73c:	4638      	mov	r0, r7
   db73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db74a:	bf00      	nop
   db74c:	000ddb38 	.word	0x000ddb38
   db750:	00015180 	.word	0x00015180
   db754:	2003e7e4 	.word	0x2003e7e4

000db758 <srand>:
   db758:	b538      	push	{r3, r4, r5, lr}
   db75a:	4b12      	ldr	r3, [pc, #72]	; (db7a4 <srand+0x4c>)
   db75c:	681c      	ldr	r4, [r3, #0]
   db75e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db760:	4605      	mov	r5, r0
   db762:	b9d3      	cbnz	r3, db79a <srand+0x42>
   db764:	2018      	movs	r0, #24
   db766:	f7fc fdf3 	bl	d8350 <malloc>
   db76a:	f243 330e 	movw	r3, #13070	; 0x330e
   db76e:	63a0      	str	r0, [r4, #56]	; 0x38
   db770:	8003      	strh	r3, [r0, #0]
   db772:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db776:	8043      	strh	r3, [r0, #2]
   db778:	f241 2334 	movw	r3, #4660	; 0x1234
   db77c:	8083      	strh	r3, [r0, #4]
   db77e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db782:	80c3      	strh	r3, [r0, #6]
   db784:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db788:	8103      	strh	r3, [r0, #8]
   db78a:	2305      	movs	r3, #5
   db78c:	8143      	strh	r3, [r0, #10]
   db78e:	230b      	movs	r3, #11
   db790:	8183      	strh	r3, [r0, #12]
   db792:	2201      	movs	r2, #1
   db794:	2300      	movs	r3, #0
   db796:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db79a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db79c:	2200      	movs	r2, #0
   db79e:	611d      	str	r5, [r3, #16]
   db7a0:	615a      	str	r2, [r3, #20]
   db7a2:	bd38      	pop	{r3, r4, r5, pc}
   db7a4:	2003de58 	.word	0x2003de58

000db7a8 <strcmp>:
   db7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   db7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   db7b0:	2a01      	cmp	r2, #1
   db7b2:	bf28      	it	cs
   db7b4:	429a      	cmpcs	r2, r3
   db7b6:	d0f7      	beq.n	db7a8 <strcmp>
   db7b8:	1ad0      	subs	r0, r2, r3
   db7ba:	4770      	bx	lr

000db7bc <strcpy>:
   db7bc:	4603      	mov	r3, r0
   db7be:	f811 2b01 	ldrb.w	r2, [r1], #1
   db7c2:	f803 2b01 	strb.w	r2, [r3], #1
   db7c6:	2a00      	cmp	r2, #0
   db7c8:	d1f9      	bne.n	db7be <strcpy+0x2>
   db7ca:	4770      	bx	lr

000db7cc <strdup>:
   db7cc:	4b02      	ldr	r3, [pc, #8]	; (db7d8 <strdup+0xc>)
   db7ce:	4601      	mov	r1, r0
   db7d0:	6818      	ldr	r0, [r3, #0]
   db7d2:	f000 b803 	b.w	db7dc <_strdup_r>
   db7d6:	bf00      	nop
   db7d8:	2003de58 	.word	0x2003de58

000db7dc <_strdup_r>:
   db7dc:	b570      	push	{r4, r5, r6, lr}
   db7de:	4606      	mov	r6, r0
   db7e0:	4608      	mov	r0, r1
   db7e2:	460c      	mov	r4, r1
   db7e4:	f000 fd22 	bl	dc22c <strlen>
   db7e8:	1c45      	adds	r5, r0, #1
   db7ea:	4629      	mov	r1, r5
   db7ec:	4630      	mov	r0, r6
   db7ee:	f7fc fdf7 	bl	d83e0 <_malloc_r>
   db7f2:	4606      	mov	r6, r0
   db7f4:	b118      	cbz	r0, db7fe <_strdup_r+0x22>
   db7f6:	462a      	mov	r2, r5
   db7f8:	4621      	mov	r1, r4
   db7fa:	f7ff fd31 	bl	db260 <memcpy>
   db7fe:	4630      	mov	r0, r6
   db800:	bd70      	pop	{r4, r5, r6, pc}

000db802 <iso_year_adjust>:
   db802:	6941      	ldr	r1, [r0, #20]
   db804:	078b      	lsls	r3, r1, #30
   db806:	b510      	push	{r4, lr}
   db808:	d10c      	bne.n	db824 <iso_year_adjust+0x22>
   db80a:	2900      	cmp	r1, #0
   db80c:	f240 736c 	movw	r3, #1900	; 0x76c
   db810:	bfa8      	it	ge
   db812:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db816:	440b      	add	r3, r1
   db818:	2464      	movs	r4, #100	; 0x64
   db81a:	fb93 f2f4 	sdiv	r2, r3, r4
   db81e:	fb04 3312 	mls	r3, r4, r2, r3
   db822:	b983      	cbnz	r3, db846 <iso_year_adjust+0x44>
   db824:	2900      	cmp	r1, #0
   db826:	f240 736c 	movw	r3, #1900	; 0x76c
   db82a:	bfa8      	it	ge
   db82c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db830:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db834:	440b      	add	r3, r1
   db836:	fb93 f1f2 	sdiv	r1, r3, r2
   db83a:	fb02 3311 	mls	r3, r2, r1, r3
   db83e:	fab3 f283 	clz	r2, r3
   db842:	0952      	lsrs	r2, r2, #5
   db844:	e000      	b.n	db848 <iso_year_adjust+0x46>
   db846:	2201      	movs	r2, #1
   db848:	6983      	ldr	r3, [r0, #24]
   db84a:	69c1      	ldr	r1, [r0, #28]
   db84c:	005b      	lsls	r3, r3, #1
   db84e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   db852:	4413      	add	r3, r2
   db854:	2b21      	cmp	r3, #33	; 0x21
   db856:	dc0e      	bgt.n	db876 <iso_year_adjust+0x74>
   db858:	2b20      	cmp	r3, #32
   db85a:	da2f      	bge.n	db8bc <iso_year_adjust+0xba>
   db85c:	2b0d      	cmp	r3, #13
   db85e:	dc02      	bgt.n	db866 <iso_year_adjust+0x64>
   db860:	2b0a      	cmp	r3, #10
   db862:	db05      	blt.n	db870 <iso_year_adjust+0x6e>
   db864:	e02a      	b.n	db8bc <iso_year_adjust+0xba>
   db866:	2b10      	cmp	r3, #16
   db868:	db26      	blt.n	db8b8 <iso_year_adjust+0xb6>
   db86a:	2b11      	cmp	r3, #17
   db86c:	dd26      	ble.n	db8bc <iso_year_adjust+0xba>
   db86e:	3b1c      	subs	r3, #28
   db870:	2b01      	cmp	r3, #1
   db872:	d923      	bls.n	db8bc <iso_year_adjust+0xba>
   db874:	e020      	b.n	db8b8 <iso_year_adjust+0xb6>
   db876:	f241 62c6 	movw	r2, #5830	; 0x16c6
   db87a:	4293      	cmp	r3, r2
   db87c:	dc0e      	bgt.n	db89c <iso_year_adjust+0x9a>
   db87e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   db882:	4293      	cmp	r3, r2
   db884:	da16      	bge.n	db8b4 <iso_year_adjust+0xb2>
   db886:	f241 62a2 	movw	r2, #5794	; 0x16a2
   db88a:	4293      	cmp	r3, r2
   db88c:	d012      	beq.n	db8b4 <iso_year_adjust+0xb2>
   db88e:	db13      	blt.n	db8b8 <iso_year_adjust+0xb6>
   db890:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   db894:	3b12      	subs	r3, #18
   db896:	2b02      	cmp	r3, #2
   db898:	d90c      	bls.n	db8b4 <iso_year_adjust+0xb2>
   db89a:	e00d      	b.n	db8b8 <iso_year_adjust+0xb6>
   db89c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   db8a0:	4293      	cmp	r3, r2
   db8a2:	d007      	beq.n	db8b4 <iso_year_adjust+0xb2>
   db8a4:	f241 62d7 	movw	r2, #5847	; 0x16d7
   db8a8:	4293      	cmp	r3, r2
   db8aa:	d003      	beq.n	db8b4 <iso_year_adjust+0xb2>
   db8ac:	f241 62d3 	movw	r2, #5843	; 0x16d3
   db8b0:	4293      	cmp	r3, r2
   db8b2:	d101      	bne.n	db8b8 <iso_year_adjust+0xb6>
   db8b4:	2001      	movs	r0, #1
   db8b6:	bd10      	pop	{r4, pc}
   db8b8:	2000      	movs	r0, #0
   db8ba:	bd10      	pop	{r4, pc}
   db8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db8c0:	bd10      	pop	{r4, pc}
	...

000db8c4 <strftime>:
   db8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db8c8:	b093      	sub	sp, #76	; 0x4c
   db8ca:	460e      	mov	r6, r1
   db8cc:	461d      	mov	r5, r3
   db8ce:	4607      	mov	r7, r0
   db8d0:	4691      	mov	r9, r2
   db8d2:	f000 fdf3 	bl	dc4bc <__get_current_time_locale>
   db8d6:	2300      	movs	r3, #0
   db8d8:	9306      	str	r3, [sp, #24]
   db8da:	461c      	mov	r4, r3
   db8dc:	1e73      	subs	r3, r6, #1
   db8de:	9003      	str	r0, [sp, #12]
   db8e0:	9302      	str	r3, [sp, #8]
   db8e2:	f899 3000 	ldrb.w	r3, [r9]
   db8e6:	2b00      	cmp	r3, #0
   db8e8:	f000 8492 	beq.w	dc210 <strftime+0x94c>
   db8ec:	2b25      	cmp	r3, #37	; 0x25
   db8ee:	d008      	beq.n	db902 <strftime+0x3e>
   db8f0:	9a02      	ldr	r2, [sp, #8]
   db8f2:	4294      	cmp	r4, r2
   db8f4:	f080 8490 	bcs.w	dc218 <strftime+0x954>
   db8f8:	553b      	strb	r3, [r7, r4]
   db8fa:	f109 0901 	add.w	r9, r9, #1
   db8fe:	3401      	adds	r4, #1
   db900:	e7ef      	b.n	db8e2 <strftime+0x1e>
   db902:	f899 a001 	ldrb.w	sl, [r9, #1]
   db906:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   db90a:	d007      	beq.n	db91c <strftime+0x58>
   db90c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db910:	d004      	beq.n	db91c <strftime+0x58>
   db912:	f109 0901 	add.w	r9, r9, #1
   db916:	f04f 0a00 	mov.w	sl, #0
   db91a:	e001      	b.n	db920 <strftime+0x5c>
   db91c:	f109 0902 	add.w	r9, r9, #2
   db920:	f899 3000 	ldrb.w	r3, [r9]
   db924:	3b31      	subs	r3, #49	; 0x31
   db926:	2b08      	cmp	r3, #8
   db928:	d808      	bhi.n	db93c <strftime+0x78>
   db92a:	4648      	mov	r0, r9
   db92c:	220a      	movs	r2, #10
   db92e:	a90a      	add	r1, sp, #40	; 0x28
   db930:	f000 fdba 	bl	dc4a8 <strtoul>
   db934:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   db938:	4680      	mov	r8, r0
   db93a:	e001      	b.n	db940 <strftime+0x7c>
   db93c:	f04f 0800 	mov.w	r8, #0
   db940:	f899 3000 	ldrb.w	r3, [r9]
   db944:	2b45      	cmp	r3, #69	; 0x45
   db946:	d001      	beq.n	db94c <strftime+0x88>
   db948:	2b4f      	cmp	r3, #79	; 0x4f
   db94a:	d101      	bne.n	db950 <strftime+0x8c>
   db94c:	f109 0901 	add.w	r9, r9, #1
   db950:	f899 0000 	ldrb.w	r0, [r9]
   db954:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   db958:	2b55      	cmp	r3, #85	; 0x55
   db95a:	f200 845d 	bhi.w	dc218 <strftime+0x954>
   db95e:	e8df f013 	tbh	[pc, r3, lsl #1]
   db962:	044a      	.short	0x044a
   db964:	045b045b 	.word	0x045b045b
   db968:	045b045b 	.word	0x045b045b
   db96c:	045b045b 	.word	0x045b045b
   db970:	045b045b 	.word	0x045b045b
   db974:	045b045b 	.word	0x045b045b
   db978:	045b045b 	.word	0x045b045b
   db97c:	045b045b 	.word	0x045b045b
   db980:	045b045b 	.word	0x045b045b
   db984:	045b045b 	.word	0x045b045b
   db988:	045b045b 	.word	0x045b045b
   db98c:	045b045b 	.word	0x045b045b
   db990:	045b045b 	.word	0x045b045b
   db994:	045b045b 	.word	0x045b045b
   db998:	006f045b 	.word	0x006f045b
   db99c:	00d400a1 	.word	0x00d400a1
   db9a0:	045b011a 	.word	0x045b011a
   db9a4:	01a0013f 	.word	0x01a0013f
   db9a8:	022d0226 	.word	0x022d0226
   db9ac:	045b045b 	.word	0x045b045b
   db9b0:	0260045b 	.word	0x0260045b
   db9b4:	045b045b 	.word	0x045b045b
   db9b8:	045b0268 	.word	0x045b0268
   db9bc:	031d0297 	.word	0x031d0297
   db9c0:	033b0325 	.word	0x033b0325
   db9c4:	03860343 	.word	0x03860343
   db9c8:	03a000c6 	.word	0x03a000c6
   db9cc:	045b041f 	.word	0x045b041f
   db9d0:	045b045b 	.word	0x045b045b
   db9d4:	045b045b 	.word	0x045b045b
   db9d8:	0056045b 	.word	0x0056045b
   db9dc:	00ba0089 	.word	0x00ba0089
   db9e0:	010c010c 	.word	0x010c010c
   db9e4:	0171045b 	.word	0x0171045b
   db9e8:	045b0089 	.word	0x045b0089
   db9ec:	0226023d 	.word	0x0226023d
   db9f0:	025d022d 	.word	0x025d022d
   db9f4:	045b0262 	.word	0x045b0262
   db9f8:	045b0268 	.word	0x045b0268
   db9fc:	029c00be 	.word	0x029c00be
   dba00:	032e031f 	.word	0x032e031f
   dba04:	037f045b 	.word	0x037f045b
   dba08:	039200c2 	.word	0x039200c2
   dba0c:	03e7      	.short	0x03e7
   dba0e:	69ab      	ldr	r3, [r5, #24]
   dba10:	9a03      	ldr	r2, [sp, #12]
   dba12:	3318      	adds	r3, #24
   dba14:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dba18:	4640      	mov	r0, r8
   dba1a:	f000 fc07 	bl	dc22c <strlen>
   dba1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba22:	193b      	adds	r3, r7, r4
   dba24:	4420      	add	r0, r4
   dba26:	4284      	cmp	r4, r0
   dba28:	f000 83eb 	beq.w	dc202 <strftime+0x93e>
   dba2c:	9a02      	ldr	r2, [sp, #8]
   dba2e:	4294      	cmp	r4, r2
   dba30:	f080 83f2 	bcs.w	dc218 <strftime+0x954>
   dba34:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba38:	f803 2b01 	strb.w	r2, [r3], #1
   dba3c:	3401      	adds	r4, #1
   dba3e:	e7f2      	b.n	dba26 <strftime+0x162>
   dba40:	69ab      	ldr	r3, [r5, #24]
   dba42:	9a03      	ldr	r2, [sp, #12]
   dba44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dba48:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dba4c:	4640      	mov	r0, r8
   dba4e:	f000 fbed 	bl	dc22c <strlen>
   dba52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba56:	193b      	adds	r3, r7, r4
   dba58:	4420      	add	r0, r4
   dba5a:	4284      	cmp	r4, r0
   dba5c:	f000 83d1 	beq.w	dc202 <strftime+0x93e>
   dba60:	9a02      	ldr	r2, [sp, #8]
   dba62:	4294      	cmp	r4, r2
   dba64:	f080 83d8 	bcs.w	dc218 <strftime+0x954>
   dba68:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba6c:	f803 2b01 	strb.w	r2, [r3], #1
   dba70:	3401      	adds	r4, #1
   dba72:	e7f2      	b.n	dba5a <strftime+0x196>
   dba74:	692b      	ldr	r3, [r5, #16]
   dba76:	9a03      	ldr	r2, [sp, #12]
   dba78:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dba7c:	4640      	mov	r0, r8
   dba7e:	f000 fbd5 	bl	dc22c <strlen>
   dba82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba86:	193b      	adds	r3, r7, r4
   dba88:	4420      	add	r0, r4
   dba8a:	4284      	cmp	r4, r0
   dba8c:	f000 83b9 	beq.w	dc202 <strftime+0x93e>
   dba90:	9a02      	ldr	r2, [sp, #8]
   dba92:	4294      	cmp	r4, r2
   dba94:	f080 83c0 	bcs.w	dc218 <strftime+0x954>
   dba98:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba9c:	f803 2b01 	strb.w	r2, [r3], #1
   dbaa0:	3401      	adds	r4, #1
   dbaa2:	e7f2      	b.n	dba8a <strftime+0x1c6>
   dbaa4:	692b      	ldr	r3, [r5, #16]
   dbaa6:	9a03      	ldr	r2, [sp, #12]
   dbaa8:	330c      	adds	r3, #12
   dbaaa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbaae:	4640      	mov	r0, r8
   dbab0:	f000 fbbc 	bl	dc22c <strlen>
   dbab4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbab8:	193b      	adds	r3, r7, r4
   dbaba:	4420      	add	r0, r4
   dbabc:	4284      	cmp	r4, r0
   dbabe:	f000 83a0 	beq.w	dc202 <strftime+0x93e>
   dbac2:	9a02      	ldr	r2, [sp, #8]
   dbac4:	4294      	cmp	r4, r2
   dbac6:	f080 83a7 	bcs.w	dc218 <strftime+0x954>
   dbaca:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbace:	f803 2b01 	strb.w	r2, [r3], #1
   dbad2:	3401      	adds	r4, #1
   dbad4:	e7f2      	b.n	dbabc <strftime+0x1f8>
   dbad6:	9b03      	ldr	r3, [sp, #12]
   dbad8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dbadc:	e00a      	b.n	dbaf4 <strftime+0x230>
   dbade:	9b03      	ldr	r3, [sp, #12]
   dbae0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dbae4:	e006      	b.n	dbaf4 <strftime+0x230>
   dbae6:	9b03      	ldr	r3, [sp, #12]
   dbae8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dbaec:	e002      	b.n	dbaf4 <strftime+0x230>
   dbaee:	9b03      	ldr	r3, [sp, #12]
   dbaf0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dbaf4:	4640      	mov	r0, r8
   dbaf6:	f000 fb99 	bl	dc22c <strlen>
   dbafa:	f898 3000 	ldrb.w	r3, [r8]
   dbafe:	2b00      	cmp	r3, #0
   dbb00:	f000 837f 	beq.w	dc202 <strftime+0x93e>
   dbb04:	462b      	mov	r3, r5
   dbb06:	4642      	mov	r2, r8
   dbb08:	e093      	b.n	dbc32 <strftime+0x36e>
   dbb0a:	49b6      	ldr	r1, [pc, #728]	; (dbde4 <strftime+0x520>)
   dbb0c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbb10:	458b      	cmp	fp, r1
   dbb12:	bfac      	ite	ge
   dbb14:	2100      	movge	r1, #0
   dbb16:	2101      	movlt	r1, #1
   dbb18:	f1bb 0f00 	cmp.w	fp, #0
   dbb1c:	db04      	blt.n	dbb28 <strftime+0x264>
   dbb1e:	2064      	movs	r0, #100	; 0x64
   dbb20:	fb9b f0f0 	sdiv	r0, fp, r0
   dbb24:	3013      	adds	r0, #19
   dbb26:	e008      	b.n	dbb3a <strftime+0x276>
   dbb28:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbb2c:	9107      	str	r1, [sp, #28]
   dbb2e:	f000 ff05 	bl	dc93c <abs>
   dbb32:	9907      	ldr	r1, [sp, #28]
   dbb34:	2364      	movs	r3, #100	; 0x64
   dbb36:	fb90 f0f3 	sdiv	r0, r0, r3
   dbb3a:	f1ba 0f00 	cmp.w	sl, #0
   dbb3e:	d008      	beq.n	dbb52 <strftime+0x28e>
   dbb40:	2863      	cmp	r0, #99	; 0x63
   dbb42:	dd09      	ble.n	dbb58 <strftime+0x294>
   dbb44:	4ba8      	ldr	r3, [pc, #672]	; (dbde8 <strftime+0x524>)
   dbb46:	4aa9      	ldr	r2, [pc, #676]	; (dbdec <strftime+0x528>)
   dbb48:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbb4c:	bf18      	it	ne
   dbb4e:	4613      	movne	r3, r2
   dbb50:	e003      	b.n	dbb5a <strftime+0x296>
   dbb52:	4ba6      	ldr	r3, [pc, #664]	; (dbdec <strftime+0x528>)
   dbb54:	4aa6      	ldr	r2, [pc, #664]	; (dbdf0 <strftime+0x52c>)
   dbb56:	e001      	b.n	dbb5c <strftime+0x298>
   dbb58:	4ba4      	ldr	r3, [pc, #656]	; (dbdec <strftime+0x528>)
   dbb5a:	4aa6      	ldr	r2, [pc, #664]	; (dbdf4 <strftime+0x530>)
   dbb5c:	9001      	str	r0, [sp, #4]
   dbb5e:	f1b8 0f01 	cmp.w	r8, #1
   dbb62:	bf98      	it	ls
   dbb64:	f04f 0802 	movls.w	r8, #2
   dbb68:	ebc1 0108 	rsb	r1, r1, r8
   dbb6c:	9100      	str	r1, [sp, #0]
   dbb6e:	489d      	ldr	r0, [pc, #628]	; (dbde4 <strftime+0x520>)
   dbb70:	49a1      	ldr	r1, [pc, #644]	; (dbdf8 <strftime+0x534>)
   dbb72:	4583      	cmp	fp, r0
   dbb74:	bfb8      	it	lt
   dbb76:	460b      	movlt	r3, r1
   dbb78:	e21e      	b.n	dbfb8 <strftime+0x6f4>
   dbb7a:	4aa0      	ldr	r2, [pc, #640]	; (dbdfc <strftime+0x538>)
   dbb7c:	49a0      	ldr	r1, [pc, #640]	; (dbe00 <strftime+0x53c>)
   dbb7e:	68eb      	ldr	r3, [r5, #12]
   dbb80:	2864      	cmp	r0, #100	; 0x64
   dbb82:	bf08      	it	eq
   dbb84:	460a      	moveq	r2, r1
   dbb86:	1b31      	subs	r1, r6, r4
   dbb88:	1938      	adds	r0, r7, r4
   dbb8a:	f7fc fc11 	bl	d83b0 <sniprintf>
   dbb8e:	2800      	cmp	r0, #0
   dbb90:	f280 8302 	bge.w	dc198 <strftime+0x8d4>
   dbb94:	e340      	b.n	dc218 <strftime+0x954>
   dbb96:	6968      	ldr	r0, [r5, #20]
   dbb98:	692b      	ldr	r3, [r5, #16]
   dbb9a:	2800      	cmp	r0, #0
   dbb9c:	f103 0b01 	add.w	fp, r3, #1
   dbba0:	eb07 0804 	add.w	r8, r7, r4
   dbba4:	ebc4 0a06 	rsb	sl, r4, r6
   dbba8:	68eb      	ldr	r3, [r5, #12]
   dbbaa:	db05      	blt.n	dbbb8 <strftime+0x2f4>
   dbbac:	2264      	movs	r2, #100	; 0x64
   dbbae:	fb90 f1f2 	sdiv	r1, r0, r2
   dbbb2:	fb02 0011 	mls	r0, r2, r1, r0
   dbbb6:	e00a      	b.n	dbbce <strftime+0x30a>
   dbbb8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbbbc:	9307      	str	r3, [sp, #28]
   dbbbe:	f000 febd 	bl	dc93c <abs>
   dbbc2:	2264      	movs	r2, #100	; 0x64
   dbbc4:	9b07      	ldr	r3, [sp, #28]
   dbbc6:	fb90 f1f2 	sdiv	r1, r0, r2
   dbbca:	fb01 0012 	mls	r0, r1, r2, r0
   dbbce:	4a8d      	ldr	r2, [pc, #564]	; (dbe04 <strftime+0x540>)
   dbbd0:	9001      	str	r0, [sp, #4]
   dbbd2:	9300      	str	r3, [sp, #0]
   dbbd4:	4651      	mov	r1, sl
   dbbd6:	465b      	mov	r3, fp
   dbbd8:	4640      	mov	r0, r8
   dbbda:	f7fc fbe9 	bl	d83b0 <sniprintf>
   dbbde:	e7d6      	b.n	dbb8e <strftime+0x2ca>
   dbbe0:	2325      	movs	r3, #37	; 0x25
   dbbe2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbbe6:	f1ba 0f00 	cmp.w	sl, #0
   dbbea:	d007      	beq.n	dbbfc <strftime+0x338>
   dbbec:	f1b8 0f05 	cmp.w	r8, #5
   dbbf0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbbf4:	bf98      	it	ls
   dbbf6:	f04f 0806 	movls.w	r8, #6
   dbbfa:	e004      	b.n	dbc06 <strftime+0x342>
   dbbfc:	232b      	movs	r3, #43	; 0x2b
   dbbfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbc02:	f04f 080a 	mov.w	r8, #10
   dbc06:	f1b8 0306 	subs.w	r3, r8, #6
   dbc0a:	d102      	bne.n	dbc12 <strftime+0x34e>
   dbc0c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbc10:	e00a      	b.n	dbc28 <strftime+0x364>
   dbc12:	4a7d      	ldr	r2, [pc, #500]	; (dbe08 <strftime+0x544>)
   dbc14:	211e      	movs	r1, #30
   dbc16:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbc1a:	f7fc fbc9 	bl	d83b0 <sniprintf>
   dbc1e:	2800      	cmp	r0, #0
   dbc20:	ddf4      	ble.n	dbc0c <strftime+0x348>
   dbc22:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbc26:	4418      	add	r0, r3
   dbc28:	4978      	ldr	r1, [pc, #480]	; (dbe0c <strftime+0x548>)
   dbc2a:	f7ff fdc7 	bl	db7bc <strcpy>
   dbc2e:	462b      	mov	r3, r5
   dbc30:	aa0a      	add	r2, sp, #40	; 0x28
   dbc32:	1b31      	subs	r1, r6, r4
   dbc34:	1938      	adds	r0, r7, r4
   dbc36:	f7ff fe45 	bl	db8c4 <strftime>
   dbc3a:	2800      	cmp	r0, #0
   dbc3c:	f340 82ec 	ble.w	dc218 <strftime+0x954>
   dbc40:	4404      	add	r4, r0
   dbc42:	e2de      	b.n	dc202 <strftime+0x93e>
   dbc44:	4628      	mov	r0, r5
   dbc46:	f7ff fddc 	bl	db802 <iso_year_adjust>
   dbc4a:	4680      	mov	r8, r0
   dbc4c:	6968      	ldr	r0, [r5, #20]
   dbc4e:	2800      	cmp	r0, #0
   dbc50:	db05      	blt.n	dbc5e <strftime+0x39a>
   dbc52:	2264      	movs	r2, #100	; 0x64
   dbc54:	fb90 f1f2 	sdiv	r1, r0, r2
   dbc58:	fb02 0011 	mls	r0, r2, r1, r0
   dbc5c:	e008      	b.n	dbc70 <strftime+0x3ac>
   dbc5e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbc62:	f000 fe6b 	bl	dc93c <abs>
   dbc66:	2264      	movs	r2, #100	; 0x64
   dbc68:	fb90 f3f2 	sdiv	r3, r0, r2
   dbc6c:	fb03 0012 	mls	r0, r3, r2, r0
   dbc70:	f1b8 0f00 	cmp.w	r8, #0
   dbc74:	da06      	bge.n	dbc84 <strftime+0x3c0>
   dbc76:	696a      	ldr	r2, [r5, #20]
   dbc78:	4b65      	ldr	r3, [pc, #404]	; (dbe10 <strftime+0x54c>)
   dbc7a:	429a      	cmp	r2, r3
   dbc7c:	bfb8      	it	lt
   dbc7e:	f04f 0801 	movlt.w	r8, #1
   dbc82:	e006      	b.n	dbc92 <strftime+0x3ce>
   dbc84:	d005      	beq.n	dbc92 <strftime+0x3ce>
   dbc86:	696a      	ldr	r2, [r5, #20]
   dbc88:	4b56      	ldr	r3, [pc, #344]	; (dbde4 <strftime+0x520>)
   dbc8a:	429a      	cmp	r2, r3
   dbc8c:	bfb8      	it	lt
   dbc8e:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   dbc92:	2364      	movs	r3, #100	; 0x64
   dbc94:	4440      	add	r0, r8
   dbc96:	fb90 f2f3 	sdiv	r2, r0, r3
   dbc9a:	fb03 0012 	mls	r0, r3, r2, r0
   dbc9e:	4418      	add	r0, r3
   dbca0:	e1f9      	b.n	dc096 <strftime+0x7d2>
   dbca2:	4b50      	ldr	r3, [pc, #320]	; (dbde4 <strftime+0x520>)
   dbca4:	6969      	ldr	r1, [r5, #20]
   dbca6:	9108      	str	r1, [sp, #32]
   dbca8:	4299      	cmp	r1, r3
   dbcaa:	bfac      	ite	ge
   dbcac:	2300      	movge	r3, #0
   dbcae:	2301      	movlt	r3, #1
   dbcb0:	4628      	mov	r0, r5
   dbcb2:	9307      	str	r3, [sp, #28]
   dbcb4:	f7ff fda5 	bl	db802 <iso_year_adjust>
   dbcb8:	9908      	ldr	r1, [sp, #32]
   dbcba:	2900      	cmp	r1, #0
   dbcbc:	4683      	mov	fp, r0
   dbcbe:	db04      	blt.n	dbcca <strftime+0x406>
   dbcc0:	2364      	movs	r3, #100	; 0x64
   dbcc2:	fb91 f3f3 	sdiv	r3, r1, r3
   dbcc6:	3313      	adds	r3, #19
   dbcc8:	e008      	b.n	dbcdc <strftime+0x418>
   dbcca:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbcce:	9108      	str	r1, [sp, #32]
   dbcd0:	f000 fe34 	bl	dc93c <abs>
   dbcd4:	9908      	ldr	r1, [sp, #32]
   dbcd6:	2364      	movs	r3, #100	; 0x64
   dbcd8:	fb90 f3f3 	sdiv	r3, r0, r3
   dbcdc:	6968      	ldr	r0, [r5, #20]
   dbcde:	2800      	cmp	r0, #0
   dbce0:	db06      	blt.n	dbcf0 <strftime+0x42c>
   dbce2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbce6:	fb90 fcfe 	sdiv	ip, r0, lr
   dbcea:	fb0e 001c 	mls	r0, lr, ip, r0
   dbcee:	e00d      	b.n	dbd0c <strftime+0x448>
   dbcf0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbcf4:	9109      	str	r1, [sp, #36]	; 0x24
   dbcf6:	9308      	str	r3, [sp, #32]
   dbcf8:	f000 fe20 	bl	dc93c <abs>
   dbcfc:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbd00:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbd02:	9b08      	ldr	r3, [sp, #32]
   dbd04:	fb90 fcfe 	sdiv	ip, r0, lr
   dbd08:	fb0c 001e 	mls	r0, ip, lr, r0
   dbd0c:	f1bb 0f00 	cmp.w	fp, #0
   dbd10:	da08      	bge.n	dbd24 <strftime+0x460>
   dbd12:	6969      	ldr	r1, [r5, #20]
   dbd14:	4a3e      	ldr	r2, [pc, #248]	; (dbe10 <strftime+0x54c>)
   dbd16:	4291      	cmp	r1, r2
   dbd18:	da0a      	bge.n	dbd30 <strftime+0x46c>
   dbd1a:	f04f 0b01 	mov.w	fp, #1
   dbd1e:	f8cd b01c 	str.w	fp, [sp, #28]
   dbd22:	e005      	b.n	dbd30 <strftime+0x46c>
   dbd24:	d004      	beq.n	dbd30 <strftime+0x46c>
   dbd26:	4a2f      	ldr	r2, [pc, #188]	; (dbde4 <strftime+0x520>)
   dbd28:	4291      	cmp	r1, r2
   dbd2a:	bfb8      	it	lt
   dbd2c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   dbd30:	eb0b 0200 	add.w	r2, fp, r0
   dbd34:	1c50      	adds	r0, r2, #1
   dbd36:	d102      	bne.n	dbd3e <strftime+0x47a>
   dbd38:	3b01      	subs	r3, #1
   dbd3a:	2263      	movs	r2, #99	; 0x63
   dbd3c:	e003      	b.n	dbd46 <strftime+0x482>
   dbd3e:	2a64      	cmp	r2, #100	; 0x64
   dbd40:	bf04      	itt	eq
   dbd42:	3301      	addeq	r3, #1
   dbd44:	2200      	moveq	r2, #0
   dbd46:	2064      	movs	r0, #100	; 0x64
   dbd48:	fb00 2303 	mla	r3, r0, r3, r2
   dbd4c:	9a07      	ldr	r2, [sp, #28]
   dbd4e:	b142      	cbz	r2, dbd62 <strftime+0x49e>
   dbd50:	222d      	movs	r2, #45	; 0x2d
   dbd52:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dbd56:	f1b8 0f00 	cmp.w	r8, #0
   dbd5a:	d013      	beq.n	dbd84 <strftime+0x4c0>
   dbd5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbd60:	e010      	b.n	dbd84 <strftime+0x4c0>
   dbd62:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbd66:	d110      	bne.n	dbd8a <strftime+0x4c6>
   dbd68:	f242 720f 	movw	r2, #9999	; 0x270f
   dbd6c:	4293      	cmp	r3, r2
   dbd6e:	d90c      	bls.n	dbd8a <strftime+0x4c6>
   dbd70:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dbd74:	f1b8 0f00 	cmp.w	r8, #0
   dbd78:	d1f0      	bne.n	dbd5c <strftime+0x498>
   dbd7a:	aa12      	add	r2, sp, #72	; 0x48
   dbd7c:	2125      	movs	r1, #37	; 0x25
   dbd7e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dbd82:	e00a      	b.n	dbd9a <strftime+0x4d6>
   dbd84:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dbd88:	e000      	b.n	dbd8c <strftime+0x4c8>
   dbd8a:	aa0a      	add	r2, sp, #40	; 0x28
   dbd8c:	2125      	movs	r1, #37	; 0x25
   dbd8e:	7011      	strb	r1, [r2, #0]
   dbd90:	f1ba 0f00 	cmp.w	sl, #0
   dbd94:	d101      	bne.n	dbd9a <strftime+0x4d6>
   dbd96:	1c50      	adds	r0, r2, #1
   dbd98:	e002      	b.n	dbda0 <strftime+0x4dc>
   dbd9a:	2130      	movs	r1, #48	; 0x30
   dbd9c:	1c90      	adds	r0, r2, #2
   dbd9e:	7051      	strb	r1, [r2, #1]
   dbda0:	491c      	ldr	r1, [pc, #112]	; (dbe14 <strftime+0x550>)
   dbda2:	9307      	str	r3, [sp, #28]
   dbda4:	f7ff fd0a 	bl	db7bc <strcpy>
   dbda8:	9b07      	ldr	r3, [sp, #28]
   dbdaa:	9300      	str	r3, [sp, #0]
   dbdac:	e1ad      	b.n	dc10a <strftime+0x846>
   dbdae:	4a14      	ldr	r2, [pc, #80]	; (dbe00 <strftime+0x53c>)
   dbdb0:	4912      	ldr	r1, [pc, #72]	; (dbdfc <strftime+0x538>)
   dbdb2:	68ab      	ldr	r3, [r5, #8]
   dbdb4:	286b      	cmp	r0, #107	; 0x6b
   dbdb6:	bf08      	it	eq
   dbdb8:	460a      	moveq	r2, r1
   dbdba:	e6e4      	b.n	dbb86 <strftime+0x2c2>
   dbdbc:	68a9      	ldr	r1, [r5, #8]
   dbdbe:	230c      	movs	r3, #12
   dbdc0:	b131      	cbz	r1, dbdd0 <strftime+0x50c>
   dbdc2:	4299      	cmp	r1, r3
   dbdc4:	bf0e      	itee	eq
   dbdc6:	460b      	moveq	r3, r1
   dbdc8:	fb91 f2f3 	sdivne	r2, r1, r3
   dbdcc:	fb03 1312 	mlsne	r3, r3, r2, r1
   dbdd0:	4a0a      	ldr	r2, [pc, #40]	; (dbdfc <strftime+0x538>)
   dbdd2:	490b      	ldr	r1, [pc, #44]	; (dbe00 <strftime+0x53c>)
   dbdd4:	2849      	cmp	r0, #73	; 0x49
   dbdd6:	bf08      	it	eq
   dbdd8:	460a      	moveq	r2, r1
   dbdda:	e6d4      	b.n	dbb86 <strftime+0x2c2>
   dbddc:	69eb      	ldr	r3, [r5, #28]
   dbdde:	4a0e      	ldr	r2, [pc, #56]	; (dbe18 <strftime+0x554>)
   dbde0:	3301      	adds	r3, #1
   dbde2:	e6d0      	b.n	dbb86 <strftime+0x2c2>
   dbde4:	fffff894 	.word	0xfffff894
   dbde8:	000ddc07 	.word	0x000ddc07
   dbdec:	000dd5ca 	.word	0x000dd5ca
   dbdf0:	000ddbf8 	.word	0x000ddbf8
   dbdf4:	000ddbff 	.word	0x000ddbff
   dbdf8:	000ddc09 	.word	0x000ddc09
   dbdfc:	000ddc0b 	.word	0x000ddc0b
   dbe00:	000ddc19 	.word	0x000ddc19
   dbe04:	000ddc0f 	.word	0x000ddc0f
   dbe08:	000ddc1e 	.word	0x000ddc1e
   dbe0c:	000ddc22 	.word	0x000ddc22
   dbe10:	fffff895 	.word	0xfffff895
   dbe14:	000ddc2a 	.word	0x000ddc2a
   dbe18:	000ddc2e 	.word	0x000ddc2e
   dbe1c:	692b      	ldr	r3, [r5, #16]
   dbe1e:	3301      	adds	r3, #1
   dbe20:	e13d      	b.n	dc09e <strftime+0x7da>
   dbe22:	686b      	ldr	r3, [r5, #4]
   dbe24:	e13b      	b.n	dc09e <strftime+0x7da>
   dbe26:	9b02      	ldr	r3, [sp, #8]
   dbe28:	429c      	cmp	r4, r3
   dbe2a:	f080 81f5 	bcs.w	dc218 <strftime+0x954>
   dbe2e:	230a      	movs	r3, #10
   dbe30:	e1e5      	b.n	dc1fe <strftime+0x93a>
   dbe32:	68ab      	ldr	r3, [r5, #8]
   dbe34:	9a03      	ldr	r2, [sp, #12]
   dbe36:	2b0b      	cmp	r3, #11
   dbe38:	bfcc      	ite	gt
   dbe3a:	23a4      	movgt	r3, #164	; 0xa4
   dbe3c:	23a0      	movle	r3, #160	; 0xa0
   dbe3e:	4413      	add	r3, r2
   dbe40:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dbe44:	4640      	mov	r0, r8
   dbe46:	f000 f9f1 	bl	dc22c <strlen>
   dbe4a:	4bb2      	ldr	r3, [pc, #712]	; (dc114 <strftime+0x850>)
   dbe4c:	f8d3 e000 	ldr.w	lr, [r3]
   dbe50:	1939      	adds	r1, r7, r4
   dbe52:	4642      	mov	r2, r8
   dbe54:	4420      	add	r0, r4
   dbe56:	4284      	cmp	r4, r0
   dbe58:	f000 81d3 	beq.w	dc202 <strftime+0x93e>
   dbe5c:	9b02      	ldr	r3, [sp, #8]
   dbe5e:	429c      	cmp	r4, r3
   dbe60:	f080 81da 	bcs.w	dc218 <strftime+0x954>
   dbe64:	f899 3000 	ldrb.w	r3, [r9]
   dbe68:	2b50      	cmp	r3, #80	; 0x50
   dbe6a:	f104 0401 	add.w	r4, r4, #1
   dbe6e:	7813      	ldrb	r3, [r2, #0]
   dbe70:	d10a      	bne.n	dbe88 <strftime+0x5c4>
   dbe72:	eb0e 0c03 	add.w	ip, lr, r3
   dbe76:	f89c c001 	ldrb.w	ip, [ip, #1]
   dbe7a:	f00c 0c03 	and.w	ip, ip, #3
   dbe7e:	f1bc 0f01 	cmp.w	ip, #1
   dbe82:	bf08      	it	eq
   dbe84:	3320      	addeq	r3, #32
   dbe86:	b2db      	uxtb	r3, r3
   dbe88:	f801 3b01 	strb.w	r3, [r1], #1
   dbe8c:	3201      	adds	r2, #1
   dbe8e:	e7e2      	b.n	dbe56 <strftime+0x592>
   dbe90:	686b      	ldr	r3, [r5, #4]
   dbe92:	9300      	str	r3, [sp, #0]
   dbe94:	4aa0      	ldr	r2, [pc, #640]	; (dc118 <strftime+0x854>)
   dbe96:	68ab      	ldr	r3, [r5, #8]
   dbe98:	e139      	b.n	dc10e <strftime+0x84a>
   dbe9a:	6a2b      	ldr	r3, [r5, #32]
   dbe9c:	2b00      	cmp	r3, #0
   dbe9e:	db17      	blt.n	dbed0 <strftime+0x60c>
   dbea0:	f000 fbc4 	bl	dc62c <__tz_lock>
   dbea4:	9b06      	ldr	r3, [sp, #24]
   dbea6:	b91b      	cbnz	r3, dbeb0 <strftime+0x5ec>
   dbea8:	f000 fbc2 	bl	dc630 <_tzset_unlocked>
   dbeac:	2301      	movs	r3, #1
   dbeae:	9306      	str	r3, [sp, #24]
   dbeb0:	f000 fda0 	bl	dc9f4 <__gettzinfo>
   dbeb4:	6a2b      	ldr	r3, [r5, #32]
   dbeb6:	2b00      	cmp	r3, #0
   dbeb8:	bfd4      	ite	le
   dbeba:	2300      	movle	r3, #0
   dbebc:	2301      	movgt	r3, #1
   dbebe:	221c      	movs	r2, #28
   dbec0:	fb02 0003 	mla	r0, r2, r3, r0
   dbec4:	6a03      	ldr	r3, [r0, #32]
   dbec6:	f1c3 0800 	rsb	r8, r3, #0
   dbeca:	f000 fbb0 	bl	dc62e <__tz_unlock>
   dbece:	e001      	b.n	dbed4 <strftime+0x610>
   dbed0:	f04f 0800 	mov.w	r8, #0
   dbed4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dbed8:	4670      	mov	r0, lr
   dbeda:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dbede:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dbee2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbee6:	2a00      	cmp	r2, #0
   dbee8:	f173 0b00 	sbcs.w	fp, r3, #0
   dbeec:	ebc4 0c06 	rsb	ip, r4, r6
   dbef0:	eb07 0a04 	add.w	sl, r7, r4
   dbef4:	da03      	bge.n	dbefe <strftime+0x63a>
   dbef6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dbefa:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbefe:	0891      	lsrs	r1, r2, #2
   dbf00:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dbf04:	109b      	asrs	r3, r3, #2
   dbf06:	9104      	str	r1, [sp, #16]
   dbf08:	9305      	str	r3, [sp, #20]
   dbf0a:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   dbf0e:	2364      	movs	r3, #100	; 0x64
   dbf10:	fb91 f1f3 	sdiv	r1, r1, r3
   dbf14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dbf18:	1a52      	subs	r2, r2, r1
   dbf1a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dbf1e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dbf22:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbf26:	fb90 f1f1 	sdiv	r1, r0, r1
   dbf2a:	1852      	adds	r2, r2, r1
   dbf2c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbf30:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dbf34:	f240 116d 	movw	r1, #365	; 0x16d
   dbf38:	fb01 fe0e 	mul.w	lr, r1, lr
   dbf3c:	69e9      	ldr	r1, [r5, #28]
   dbf3e:	eb12 020e 	adds.w	r2, r2, lr
   dbf42:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dbf46:	1852      	adds	r2, r2, r1
   dbf48:	f04f 0e18 	mov.w	lr, #24
   dbf4c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbf50:	fba2 010e 	umull	r0, r1, r2, lr
   dbf54:	fb0e 1103 	mla	r1, lr, r3, r1
   dbf58:	68ab      	ldr	r3, [r5, #8]
   dbf5a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dbf5e:	18c0      	adds	r0, r0, r3
   dbf60:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbf64:	fba0 230e 	umull	r2, r3, r0, lr
   dbf68:	fb0e 3301 	mla	r3, lr, r1, r3
   dbf6c:	6869      	ldr	r1, [r5, #4]
   dbf6e:	1852      	adds	r2, r2, r1
   dbf70:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbf74:	fba2 010e 	umull	r0, r1, r2, lr
   dbf78:	fb0e 1103 	mla	r1, lr, r3, r1
   dbf7c:	682b      	ldr	r3, [r5, #0]
   dbf7e:	4a67      	ldr	r2, [pc, #412]	; (dc11c <strftime+0x858>)
   dbf80:	18c0      	adds	r0, r0, r3
   dbf82:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbf86:	ebb0 0008 	subs.w	r0, r0, r8
   dbf8a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dbf8e:	e9cd 0100 	strd	r0, r1, [sp]
   dbf92:	4661      	mov	r1, ip
   dbf94:	4650      	mov	r0, sl
   dbf96:	f7fc fa0b 	bl	d83b0 <sniprintf>
   dbf9a:	e5f8      	b.n	dbb8e <strftime+0x2ca>
   dbf9c:	682b      	ldr	r3, [r5, #0]
   dbf9e:	e07e      	b.n	dc09e <strftime+0x7da>
   dbfa0:	9b02      	ldr	r3, [sp, #8]
   dbfa2:	429c      	cmp	r4, r3
   dbfa4:	f080 8138 	bcs.w	dc218 <strftime+0x954>
   dbfa8:	2309      	movs	r3, #9
   dbfaa:	e128      	b.n	dc1fe <strftime+0x93a>
   dbfac:	682b      	ldr	r3, [r5, #0]
   dbfae:	9301      	str	r3, [sp, #4]
   dbfb0:	686b      	ldr	r3, [r5, #4]
   dbfb2:	9300      	str	r3, [sp, #0]
   dbfb4:	4a5a      	ldr	r2, [pc, #360]	; (dc120 <strftime+0x85c>)
   dbfb6:	68ab      	ldr	r3, [r5, #8]
   dbfb8:	1b31      	subs	r1, r6, r4
   dbfba:	1938      	adds	r0, r7, r4
   dbfbc:	e60d      	b.n	dbbda <strftime+0x316>
   dbfbe:	9b02      	ldr	r3, [sp, #8]
   dbfc0:	429c      	cmp	r4, r3
   dbfc2:	f080 8129 	bcs.w	dc218 <strftime+0x954>
   dbfc6:	69ab      	ldr	r3, [r5, #24]
   dbfc8:	1c62      	adds	r2, r4, #1
   dbfca:	b90b      	cbnz	r3, dbfd0 <strftime+0x70c>
   dbfcc:	2337      	movs	r3, #55	; 0x37
   dbfce:	e000      	b.n	dbfd2 <strftime+0x70e>
   dbfd0:	3330      	adds	r3, #48	; 0x30
   dbfd2:	553b      	strb	r3, [r7, r4]
   dbfd4:	4614      	mov	r4, r2
   dbfd6:	e114      	b.n	dc202 <strftime+0x93e>
   dbfd8:	69eb      	ldr	r3, [r5, #28]
   dbfda:	69aa      	ldr	r2, [r5, #24]
   dbfdc:	3307      	adds	r3, #7
   dbfde:	1a9b      	subs	r3, r3, r2
   dbfe0:	2207      	movs	r2, #7
   dbfe2:	fb93 f3f2 	sdiv	r3, r3, r2
   dbfe6:	e05a      	b.n	dc09e <strftime+0x7da>
   dbfe8:	4628      	mov	r0, r5
   dbfea:	f7ff fc0a 	bl	db802 <iso_year_adjust>
   dbfee:	69aa      	ldr	r2, [r5, #24]
   dbff0:	b10a      	cbz	r2, dbff6 <strftime+0x732>
   dbff2:	1e53      	subs	r3, r2, #1
   dbff4:	e000      	b.n	dbff8 <strftime+0x734>
   dbff6:	2306      	movs	r3, #6
   dbff8:	2800      	cmp	r0, #0
   dbffa:	dc2f      	bgt.n	dc05c <strftime+0x798>
   dbffc:	69ea      	ldr	r2, [r5, #28]
   dbffe:	d101      	bne.n	dc004 <strftime+0x740>
   dc000:	320a      	adds	r2, #10
   dc002:	e03b      	b.n	dc07c <strftime+0x7b8>
   dc004:	1a9a      	subs	r2, r3, r2
   dc006:	696b      	ldr	r3, [r5, #20]
   dc008:	f240 716b 	movw	r1, #1899	; 0x76b
   dc00c:	2b00      	cmp	r3, #0
   dc00e:	bfb4      	ite	lt
   dc010:	4608      	movlt	r0, r1
   dc012:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc016:	4418      	add	r0, r3
   dc018:	0781      	lsls	r1, r0, #30
   dc01a:	d107      	bne.n	dc02c <strftime+0x768>
   dc01c:	4601      	mov	r1, r0
   dc01e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc022:	fb90 f0fe 	sdiv	r0, r0, lr
   dc026:	fb0e 1110 	mls	r1, lr, r0, r1
   dc02a:	b981      	cbnz	r1, dc04e <strftime+0x78a>
   dc02c:	2b00      	cmp	r3, #0
   dc02e:	f240 716b 	movw	r1, #1899	; 0x76b
   dc032:	bfa8      	it	ge
   dc034:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc038:	4419      	add	r1, r3
   dc03a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc03e:	fb91 f0f3 	sdiv	r0, r1, r3
   dc042:	fb03 1110 	mls	r1, r3, r0, r1
   dc046:	fab1 f181 	clz	r1, r1
   dc04a:	0949      	lsrs	r1, r1, #5
   dc04c:	e000      	b.n	dc050 <strftime+0x78c>
   dc04e:	2101      	movs	r1, #1
   dc050:	1a52      	subs	r2, r2, r1
   dc052:	2a05      	cmp	r2, #5
   dc054:	bfb4      	ite	lt
   dc056:	2335      	movlt	r3, #53	; 0x35
   dc058:	2334      	movge	r3, #52	; 0x34
   dc05a:	e020      	b.n	dc09e <strftime+0x7da>
   dc05c:	2301      	movs	r3, #1
   dc05e:	e01e      	b.n	dc09e <strftime+0x7da>
   dc060:	9b02      	ldr	r3, [sp, #8]
   dc062:	429c      	cmp	r4, r3
   dc064:	f080 80d8 	bcs.w	dc218 <strftime+0x954>
   dc068:	69ab      	ldr	r3, [r5, #24]
   dc06a:	3330      	adds	r3, #48	; 0x30
   dc06c:	e0c7      	b.n	dc1fe <strftime+0x93a>
   dc06e:	69aa      	ldr	r2, [r5, #24]
   dc070:	b10a      	cbz	r2, dc076 <strftime+0x7b2>
   dc072:	1e53      	subs	r3, r2, #1
   dc074:	e000      	b.n	dc078 <strftime+0x7b4>
   dc076:	2306      	movs	r3, #6
   dc078:	69ea      	ldr	r2, [r5, #28]
   dc07a:	3207      	adds	r2, #7
   dc07c:	1ad2      	subs	r2, r2, r3
   dc07e:	2307      	movs	r3, #7
   dc080:	fb92 f3f3 	sdiv	r3, r2, r3
   dc084:	e00b      	b.n	dc09e <strftime+0x7da>
   dc086:	6968      	ldr	r0, [r5, #20]
   dc088:	2800      	cmp	r0, #0
   dc08a:	da03      	bge.n	dc094 <strftime+0x7d0>
   dc08c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc090:	f000 fc54 	bl	dc93c <abs>
   dc094:	2364      	movs	r3, #100	; 0x64
   dc096:	fb90 f2f3 	sdiv	r2, r0, r3
   dc09a:	fb02 0313 	mls	r3, r2, r3, r0
   dc09e:	4a21      	ldr	r2, [pc, #132]	; (dc124 <strftime+0x860>)
   dc0a0:	e571      	b.n	dbb86 <strftime+0x2c2>
   dc0a2:	696b      	ldr	r3, [r5, #20]
   dc0a4:	4a20      	ldr	r2, [pc, #128]	; (dc128 <strftime+0x864>)
   dc0a6:	4293      	cmp	r3, r2
   dc0a8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc0ac:	da05      	bge.n	dc0ba <strftime+0x7f6>
   dc0ae:	232d      	movs	r3, #45	; 0x2d
   dc0b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc0b4:	f1cb 0b00 	rsb	fp, fp, #0
   dc0b8:	e008      	b.n	dc0cc <strftime+0x808>
   dc0ba:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc0be:	d10d      	bne.n	dc0dc <strftime+0x818>
   dc0c0:	f242 730f 	movw	r3, #9999	; 0x270f
   dc0c4:	459b      	cmp	fp, r3
   dc0c6:	d911      	bls.n	dc0ec <strftime+0x828>
   dc0c8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc0cc:	f1b8 0f00 	cmp.w	r8, #0
   dc0d0:	d001      	beq.n	dc0d6 <strftime+0x812>
   dc0d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc0d6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc0da:	e000      	b.n	dc0de <strftime+0x81a>
   dc0dc:	ab0a      	add	r3, sp, #40	; 0x28
   dc0de:	2225      	movs	r2, #37	; 0x25
   dc0e0:	701a      	strb	r2, [r3, #0]
   dc0e2:	f1ba 0f00 	cmp.w	sl, #0
   dc0e6:	d108      	bne.n	dc0fa <strftime+0x836>
   dc0e8:	1c58      	adds	r0, r3, #1
   dc0ea:	e009      	b.n	dc100 <strftime+0x83c>
   dc0ec:	f1b8 0f00 	cmp.w	r8, #0
   dc0f0:	d1f4      	bne.n	dc0dc <strftime+0x818>
   dc0f2:	2325      	movs	r3, #37	; 0x25
   dc0f4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc0f8:	ab0a      	add	r3, sp, #40	; 0x28
   dc0fa:	2230      	movs	r2, #48	; 0x30
   dc0fc:	1c98      	adds	r0, r3, #2
   dc0fe:	705a      	strb	r2, [r3, #1]
   dc100:	490a      	ldr	r1, [pc, #40]	; (dc12c <strftime+0x868>)
   dc102:	f7ff fb5b 	bl	db7bc <strcpy>
   dc106:	f8cd b000 	str.w	fp, [sp]
   dc10a:	4643      	mov	r3, r8
   dc10c:	aa0a      	add	r2, sp, #40	; 0x28
   dc10e:	1b31      	subs	r1, r6, r4
   dc110:	1938      	adds	r0, r7, r4
   dc112:	e03e      	b.n	dc192 <strftime+0x8ce>
   dc114:	2003ddf4 	.word	0x2003ddf4
   dc118:	000ddc3d 	.word	0x000ddc3d
   dc11c:	000ddc33 	.word	0x000ddc33
   dc120:	000ddc38 	.word	0x000ddc38
   dc124:	000ddc19 	.word	0x000ddc19
   dc128:	fffff894 	.word	0xfffff894
   dc12c:	000ddc2a 	.word	0x000ddc2a
   dc130:	6a2b      	ldr	r3, [r5, #32]
   dc132:	2b00      	cmp	r3, #0
   dc134:	db65      	blt.n	dc202 <strftime+0x93e>
   dc136:	f000 fa79 	bl	dc62c <__tz_lock>
   dc13a:	9b06      	ldr	r3, [sp, #24]
   dc13c:	b91b      	cbnz	r3, dc146 <strftime+0x882>
   dc13e:	f000 fa77 	bl	dc630 <_tzset_unlocked>
   dc142:	2301      	movs	r3, #1
   dc144:	9306      	str	r3, [sp, #24]
   dc146:	f000 fc55 	bl	dc9f4 <__gettzinfo>
   dc14a:	6a2b      	ldr	r3, [r5, #32]
   dc14c:	2b00      	cmp	r3, #0
   dc14e:	bfd4      	ite	le
   dc150:	2300      	movle	r3, #0
   dc152:	2301      	movgt	r3, #1
   dc154:	221c      	movs	r2, #28
   dc156:	fb02 0003 	mla	r0, r2, r3, r0
   dc15a:	eb07 0a04 	add.w	sl, r7, r4
   dc15e:	6a03      	ldr	r3, [r0, #32]
   dc160:	f1c3 0800 	rsb	r8, r3, #0
   dc164:	f000 fa63 	bl	dc62e <__tz_unlock>
   dc168:	233c      	movs	r3, #60	; 0x3c
   dc16a:	fb98 f0f3 	sdiv	r0, r8, r3
   dc16e:	9307      	str	r3, [sp, #28]
   dc170:	f000 fc44 	bl	dc9fc <labs>
   dc174:	9b07      	ldr	r3, [sp, #28]
   dc176:	fb90 f2f3 	sdiv	r2, r0, r3
   dc17a:	ebc4 0b06 	rsb	fp, r4, r6
   dc17e:	fb02 0013 	mls	r0, r2, r3, r0
   dc182:	4a28      	ldr	r2, [pc, #160]	; (dc224 <strftime+0x960>)
   dc184:	9000      	str	r0, [sp, #0]
   dc186:	4659      	mov	r1, fp
   dc188:	4650      	mov	r0, sl
   dc18a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc18e:	fb98 f3f3 	sdiv	r3, r8, r3
   dc192:	f7fc f90d 	bl	d83b0 <sniprintf>
   dc196:	e4fa      	b.n	dbb8e <strftime+0x2ca>
   dc198:	4404      	add	r4, r0
   dc19a:	42a6      	cmp	r6, r4
   dc19c:	d831      	bhi.n	dc202 <strftime+0x93e>
   dc19e:	e03b      	b.n	dc218 <strftime+0x954>
   dc1a0:	6a2b      	ldr	r3, [r5, #32]
   dc1a2:	2b00      	cmp	r3, #0
   dc1a4:	db2d      	blt.n	dc202 <strftime+0x93e>
   dc1a6:	f000 fa41 	bl	dc62c <__tz_lock>
   dc1aa:	9b06      	ldr	r3, [sp, #24]
   dc1ac:	b91b      	cbnz	r3, dc1b6 <strftime+0x8f2>
   dc1ae:	f000 fa3f 	bl	dc630 <_tzset_unlocked>
   dc1b2:	2301      	movs	r3, #1
   dc1b4:	9306      	str	r3, [sp, #24]
   dc1b6:	6a2b      	ldr	r3, [r5, #32]
   dc1b8:	4a1b      	ldr	r2, [pc, #108]	; (dc228 <strftime+0x964>)
   dc1ba:	2b00      	cmp	r3, #0
   dc1bc:	bfd4      	ite	le
   dc1be:	2300      	movle	r3, #0
   dc1c0:	2301      	movgt	r3, #1
   dc1c2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc1c6:	4640      	mov	r0, r8
   dc1c8:	f000 f830 	bl	dc22c <strlen>
   dc1cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc1d0:	193b      	adds	r3, r7, r4
   dc1d2:	4420      	add	r0, r4
   dc1d4:	4284      	cmp	r4, r0
   dc1d6:	d00b      	beq.n	dc1f0 <strftime+0x92c>
   dc1d8:	9a02      	ldr	r2, [sp, #8]
   dc1da:	4294      	cmp	r4, r2
   dc1dc:	d205      	bcs.n	dc1ea <strftime+0x926>
   dc1de:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc1e2:	f803 2b01 	strb.w	r2, [r3], #1
   dc1e6:	3401      	adds	r4, #1
   dc1e8:	e7f4      	b.n	dc1d4 <strftime+0x910>
   dc1ea:	f000 fa20 	bl	dc62e <__tz_unlock>
   dc1ee:	e013      	b.n	dc218 <strftime+0x954>
   dc1f0:	f000 fa1d 	bl	dc62e <__tz_unlock>
   dc1f4:	e005      	b.n	dc202 <strftime+0x93e>
   dc1f6:	9b02      	ldr	r3, [sp, #8]
   dc1f8:	429c      	cmp	r4, r3
   dc1fa:	d20d      	bcs.n	dc218 <strftime+0x954>
   dc1fc:	2325      	movs	r3, #37	; 0x25
   dc1fe:	553b      	strb	r3, [r7, r4]
   dc200:	3401      	adds	r4, #1
   dc202:	f899 3000 	ldrb.w	r3, [r9]
   dc206:	b11b      	cbz	r3, dc210 <strftime+0x94c>
   dc208:	f109 0901 	add.w	r9, r9, #1
   dc20c:	f7ff bb69 	b.w	db8e2 <strftime+0x1e>
   dc210:	b126      	cbz	r6, dc21c <strftime+0x958>
   dc212:	2300      	movs	r3, #0
   dc214:	553b      	strb	r3, [r7, r4]
   dc216:	e001      	b.n	dc21c <strftime+0x958>
   dc218:	2000      	movs	r0, #0
   dc21a:	e000      	b.n	dc21e <strftime+0x95a>
   dc21c:	4620      	mov	r0, r4
   dc21e:	b013      	add	sp, #76	; 0x4c
   dc220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc224:	000ddc47 	.word	0x000ddc47
   dc228:	2003de5c 	.word	0x2003de5c

000dc22c <strlen>:
   dc22c:	4603      	mov	r3, r0
   dc22e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc232:	2a00      	cmp	r2, #0
   dc234:	d1fb      	bne.n	dc22e <strlen+0x2>
   dc236:	1a18      	subs	r0, r3, r0
   dc238:	3801      	subs	r0, #1
   dc23a:	4770      	bx	lr

000dc23c <strncmp>:
   dc23c:	b530      	push	{r4, r5, lr}
   dc23e:	b182      	cbz	r2, dc262 <strncmp+0x26>
   dc240:	1e45      	subs	r5, r0, #1
   dc242:	3901      	subs	r1, #1
   dc244:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc248:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc24c:	42a3      	cmp	r3, r4
   dc24e:	d106      	bne.n	dc25e <strncmp+0x22>
   dc250:	43ec      	mvns	r4, r5
   dc252:	4414      	add	r4, r2
   dc254:	42e0      	cmn	r0, r4
   dc256:	d001      	beq.n	dc25c <strncmp+0x20>
   dc258:	2b00      	cmp	r3, #0
   dc25a:	d1f3      	bne.n	dc244 <strncmp+0x8>
   dc25c:	461c      	mov	r4, r3
   dc25e:	1b18      	subs	r0, r3, r4
   dc260:	bd30      	pop	{r4, r5, pc}
   dc262:	4610      	mov	r0, r2
   dc264:	bd30      	pop	{r4, r5, pc}

000dc266 <strncpy>:
   dc266:	b510      	push	{r4, lr}
   dc268:	4603      	mov	r3, r0
   dc26a:	b142      	cbz	r2, dc27e <strncpy+0x18>
   dc26c:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc270:	f803 4b01 	strb.w	r4, [r3], #1
   dc274:	3a01      	subs	r2, #1
   dc276:	2c00      	cmp	r4, #0
   dc278:	d1f7      	bne.n	dc26a <strncpy+0x4>
   dc27a:	441a      	add	r2, r3
   dc27c:	e000      	b.n	dc280 <strncpy+0x1a>
   dc27e:	bd10      	pop	{r4, pc}
   dc280:	4293      	cmp	r3, r2
   dc282:	d002      	beq.n	dc28a <strncpy+0x24>
   dc284:	f803 4b01 	strb.w	r4, [r3], #1
   dc288:	e7fa      	b.n	dc280 <strncpy+0x1a>
   dc28a:	bd10      	pop	{r4, pc}

000dc28c <_strtol_r>:
   dc28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc290:	4680      	mov	r8, r0
   dc292:	4840      	ldr	r0, [pc, #256]	; (dc394 <_strtol_r+0x108>)
   dc294:	f8d0 9000 	ldr.w	r9, [r0]
   dc298:	460f      	mov	r7, r1
   dc29a:	463d      	mov	r5, r7
   dc29c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc2a0:	eb09 0004 	add.w	r0, r9, r4
   dc2a4:	7840      	ldrb	r0, [r0, #1]
   dc2a6:	f000 0008 	and.w	r0, r0, #8
   dc2aa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dc2ae:	b108      	cbz	r0, dc2b4 <_strtol_r+0x28>
   dc2b0:	462f      	mov	r7, r5
   dc2b2:	e7f2      	b.n	dc29a <_strtol_r+0xe>
   dc2b4:	2c2d      	cmp	r4, #45	; 0x2d
   dc2b6:	d103      	bne.n	dc2c0 <_strtol_r+0x34>
   dc2b8:	1cbd      	adds	r5, r7, #2
   dc2ba:	787c      	ldrb	r4, [r7, #1]
   dc2bc:	2601      	movs	r6, #1
   dc2be:	e003      	b.n	dc2c8 <_strtol_r+0x3c>
   dc2c0:	2c2b      	cmp	r4, #43	; 0x2b
   dc2c2:	bf04      	itt	eq
   dc2c4:	787c      	ldrbeq	r4, [r7, #1]
   dc2c6:	1cbd      	addeq	r5, r7, #2
   dc2c8:	b113      	cbz	r3, dc2d0 <_strtol_r+0x44>
   dc2ca:	2b10      	cmp	r3, #16
   dc2cc:	d10a      	bne.n	dc2e4 <_strtol_r+0x58>
   dc2ce:	e05b      	b.n	dc388 <_strtol_r+0xfc>
   dc2d0:	2c30      	cmp	r4, #48	; 0x30
   dc2d2:	d157      	bne.n	dc384 <_strtol_r+0xf8>
   dc2d4:	7828      	ldrb	r0, [r5, #0]
   dc2d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc2da:	2858      	cmp	r0, #88	; 0x58
   dc2dc:	d14d      	bne.n	dc37a <_strtol_r+0xee>
   dc2de:	786c      	ldrb	r4, [r5, #1]
   dc2e0:	2310      	movs	r3, #16
   dc2e2:	3502      	adds	r5, #2
   dc2e4:	2e00      	cmp	r6, #0
   dc2e6:	bf14      	ite	ne
   dc2e8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dc2ec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dc2f0:	2700      	movs	r7, #0
   dc2f2:	fbbc faf3 	udiv	sl, ip, r3
   dc2f6:	4638      	mov	r0, r7
   dc2f8:	fb03 cc1a 	mls	ip, r3, sl, ip
   dc2fc:	eb09 0e04 	add.w	lr, r9, r4
   dc300:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc304:	f01e 0f04 	tst.w	lr, #4
   dc308:	d001      	beq.n	dc30e <_strtol_r+0x82>
   dc30a:	3c30      	subs	r4, #48	; 0x30
   dc30c:	e00b      	b.n	dc326 <_strtol_r+0x9a>
   dc30e:	f01e 0e03 	ands.w	lr, lr, #3
   dc312:	d01b      	beq.n	dc34c <_strtol_r+0xc0>
   dc314:	f1be 0f01 	cmp.w	lr, #1
   dc318:	bf0c      	ite	eq
   dc31a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc31e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc322:	ebce 0404 	rsb	r4, lr, r4
   dc326:	42a3      	cmp	r3, r4
   dc328:	dd10      	ble.n	dc34c <_strtol_r+0xc0>
   dc32a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dc32e:	d00a      	beq.n	dc346 <_strtol_r+0xba>
   dc330:	4550      	cmp	r0, sl
   dc332:	d806      	bhi.n	dc342 <_strtol_r+0xb6>
   dc334:	d101      	bne.n	dc33a <_strtol_r+0xae>
   dc336:	4564      	cmp	r4, ip
   dc338:	dc03      	bgt.n	dc342 <_strtol_r+0xb6>
   dc33a:	fb03 4000 	mla	r0, r3, r0, r4
   dc33e:	2701      	movs	r7, #1
   dc340:	e001      	b.n	dc346 <_strtol_r+0xba>
   dc342:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc346:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc34a:	e7d7      	b.n	dc2fc <_strtol_r+0x70>
   dc34c:	1c7b      	adds	r3, r7, #1
   dc34e:	d10c      	bne.n	dc36a <_strtol_r+0xde>
   dc350:	2e00      	cmp	r6, #0
   dc352:	f04f 0322 	mov.w	r3, #34	; 0x22
   dc356:	bf14      	ite	ne
   dc358:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dc35c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc360:	f8c8 3000 	str.w	r3, [r8]
   dc364:	b92a      	cbnz	r2, dc372 <_strtol_r+0xe6>
   dc366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc36a:	b106      	cbz	r6, dc36e <_strtol_r+0xe2>
   dc36c:	4240      	negs	r0, r0
   dc36e:	b172      	cbz	r2, dc38e <_strtol_r+0x102>
   dc370:	b107      	cbz	r7, dc374 <_strtol_r+0xe8>
   dc372:	1e69      	subs	r1, r5, #1
   dc374:	6011      	str	r1, [r2, #0]
   dc376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc37a:	2430      	movs	r4, #48	; 0x30
   dc37c:	2b00      	cmp	r3, #0
   dc37e:	d1b1      	bne.n	dc2e4 <_strtol_r+0x58>
   dc380:	2308      	movs	r3, #8
   dc382:	e7af      	b.n	dc2e4 <_strtol_r+0x58>
   dc384:	230a      	movs	r3, #10
   dc386:	e7ad      	b.n	dc2e4 <_strtol_r+0x58>
   dc388:	2c30      	cmp	r4, #48	; 0x30
   dc38a:	d0a3      	beq.n	dc2d4 <_strtol_r+0x48>
   dc38c:	e7aa      	b.n	dc2e4 <_strtol_r+0x58>
   dc38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc392:	bf00      	nop
   dc394:	2003ddf4 	.word	0x2003ddf4

000dc398 <strtol>:
   dc398:	4613      	mov	r3, r2
   dc39a:	460a      	mov	r2, r1
   dc39c:	4601      	mov	r1, r0
   dc39e:	4802      	ldr	r0, [pc, #8]	; (dc3a8 <strtol+0x10>)
   dc3a0:	6800      	ldr	r0, [r0, #0]
   dc3a2:	f7ff bf73 	b.w	dc28c <_strtol_r>
   dc3a6:	bf00      	nop
   dc3a8:	2003de58 	.word	0x2003de58

000dc3ac <_strtoul_r>:
   dc3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc3b0:	4680      	mov	r8, r0
   dc3b2:	483c      	ldr	r0, [pc, #240]	; (dc4a4 <_strtoul_r+0xf8>)
   dc3b4:	f8d0 9000 	ldr.w	r9, [r0]
   dc3b8:	460e      	mov	r6, r1
   dc3ba:	4635      	mov	r5, r6
   dc3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc3c0:	eb09 0004 	add.w	r0, r9, r4
   dc3c4:	7840      	ldrb	r0, [r0, #1]
   dc3c6:	f000 0008 	and.w	r0, r0, #8
   dc3ca:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc3ce:	b108      	cbz	r0, dc3d4 <_strtoul_r+0x28>
   dc3d0:	462e      	mov	r6, r5
   dc3d2:	e7f2      	b.n	dc3ba <_strtoul_r+0xe>
   dc3d4:	2c2d      	cmp	r4, #45	; 0x2d
   dc3d6:	d103      	bne.n	dc3e0 <_strtoul_r+0x34>
   dc3d8:	1cb5      	adds	r5, r6, #2
   dc3da:	7874      	ldrb	r4, [r6, #1]
   dc3dc:	2701      	movs	r7, #1
   dc3de:	e003      	b.n	dc3e8 <_strtoul_r+0x3c>
   dc3e0:	2c2b      	cmp	r4, #43	; 0x2b
   dc3e2:	bf04      	itt	eq
   dc3e4:	7874      	ldrbeq	r4, [r6, #1]
   dc3e6:	1cb5      	addeq	r5, r6, #2
   dc3e8:	b113      	cbz	r3, dc3f0 <_strtoul_r+0x44>
   dc3ea:	2b10      	cmp	r3, #16
   dc3ec:	d10a      	bne.n	dc404 <_strtoul_r+0x58>
   dc3ee:	e053      	b.n	dc498 <_strtoul_r+0xec>
   dc3f0:	2c30      	cmp	r4, #48	; 0x30
   dc3f2:	d14f      	bne.n	dc494 <_strtoul_r+0xe8>
   dc3f4:	7828      	ldrb	r0, [r5, #0]
   dc3f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc3fa:	2858      	cmp	r0, #88	; 0x58
   dc3fc:	d145      	bne.n	dc48a <_strtoul_r+0xde>
   dc3fe:	786c      	ldrb	r4, [r5, #1]
   dc400:	2310      	movs	r3, #16
   dc402:	3502      	adds	r5, #2
   dc404:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc408:	2600      	movs	r6, #0
   dc40a:	fbbc fcf3 	udiv	ip, ip, r3
   dc40e:	fb03 fa0c 	mul.w	sl, r3, ip
   dc412:	ea6f 0a0a 	mvn.w	sl, sl
   dc416:	4630      	mov	r0, r6
   dc418:	eb09 0e04 	add.w	lr, r9, r4
   dc41c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc420:	f01e 0f04 	tst.w	lr, #4
   dc424:	d001      	beq.n	dc42a <_strtoul_r+0x7e>
   dc426:	3c30      	subs	r4, #48	; 0x30
   dc428:	e00b      	b.n	dc442 <_strtoul_r+0x96>
   dc42a:	f01e 0e03 	ands.w	lr, lr, #3
   dc42e:	d01a      	beq.n	dc466 <_strtoul_r+0xba>
   dc430:	f1be 0f01 	cmp.w	lr, #1
   dc434:	bf0c      	ite	eq
   dc436:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc43a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc43e:	ebce 0404 	rsb	r4, lr, r4
   dc442:	42a3      	cmp	r3, r4
   dc444:	dd0f      	ble.n	dc466 <_strtoul_r+0xba>
   dc446:	2e00      	cmp	r6, #0
   dc448:	db08      	blt.n	dc45c <_strtoul_r+0xb0>
   dc44a:	4560      	cmp	r0, ip
   dc44c:	d806      	bhi.n	dc45c <_strtoul_r+0xb0>
   dc44e:	d101      	bne.n	dc454 <_strtoul_r+0xa8>
   dc450:	4554      	cmp	r4, sl
   dc452:	dc03      	bgt.n	dc45c <_strtoul_r+0xb0>
   dc454:	fb03 4000 	mla	r0, r3, r0, r4
   dc458:	2601      	movs	r6, #1
   dc45a:	e001      	b.n	dc460 <_strtoul_r+0xb4>
   dc45c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc460:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc464:	e7d8      	b.n	dc418 <_strtoul_r+0x6c>
   dc466:	2e00      	cmp	r6, #0
   dc468:	da07      	bge.n	dc47a <_strtoul_r+0xce>
   dc46a:	2322      	movs	r3, #34	; 0x22
   dc46c:	f8c8 3000 	str.w	r3, [r8]
   dc470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc474:	b92a      	cbnz	r2, dc482 <_strtoul_r+0xd6>
   dc476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc47a:	b107      	cbz	r7, dc47e <_strtoul_r+0xd2>
   dc47c:	4240      	negs	r0, r0
   dc47e:	b172      	cbz	r2, dc49e <_strtoul_r+0xf2>
   dc480:	b106      	cbz	r6, dc484 <_strtoul_r+0xd8>
   dc482:	1e69      	subs	r1, r5, #1
   dc484:	6011      	str	r1, [r2, #0]
   dc486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc48a:	2430      	movs	r4, #48	; 0x30
   dc48c:	2b00      	cmp	r3, #0
   dc48e:	d1b9      	bne.n	dc404 <_strtoul_r+0x58>
   dc490:	2308      	movs	r3, #8
   dc492:	e7b7      	b.n	dc404 <_strtoul_r+0x58>
   dc494:	230a      	movs	r3, #10
   dc496:	e7b5      	b.n	dc404 <_strtoul_r+0x58>
   dc498:	2c30      	cmp	r4, #48	; 0x30
   dc49a:	d0ab      	beq.n	dc3f4 <_strtoul_r+0x48>
   dc49c:	e7b2      	b.n	dc404 <_strtoul_r+0x58>
   dc49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc4a2:	bf00      	nop
   dc4a4:	2003ddf4 	.word	0x2003ddf4

000dc4a8 <strtoul>:
   dc4a8:	4613      	mov	r3, r2
   dc4aa:	460a      	mov	r2, r1
   dc4ac:	4601      	mov	r1, r0
   dc4ae:	4802      	ldr	r0, [pc, #8]	; (dc4b8 <strtoul+0x10>)
   dc4b0:	6800      	ldr	r0, [r0, #0]
   dc4b2:	f7ff bf7b 	b.w	dc3ac <_strtoul_r>
   dc4b6:	bf00      	nop
   dc4b8:	2003de58 	.word	0x2003de58

000dc4bc <__get_current_time_locale>:
   dc4bc:	4b04      	ldr	r3, [pc, #16]	; (dc4d0 <__get_current_time_locale+0x14>)
   dc4be:	4a05      	ldr	r2, [pc, #20]	; (dc4d4 <__get_current_time_locale+0x18>)
   dc4c0:	6818      	ldr	r0, [r3, #0]
   dc4c2:	4b05      	ldr	r3, [pc, #20]	; (dc4d8 <__get_current_time_locale+0x1c>)
   dc4c4:	2800      	cmp	r0, #0
   dc4c6:	bf14      	ite	ne
   dc4c8:	4610      	movne	r0, r2
   dc4ca:	4618      	moveq	r0, r3
   dc4cc:	4770      	bx	lr
   dc4ce:	bf00      	nop
   dc4d0:	2003e6c8 	.word	0x2003e6c8
   dc4d4:	2003e6cc 	.word	0x2003e6cc
   dc4d8:	000ddd80 	.word	0x000ddd80

000dc4dc <__tzcalc_limits>:
   dc4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4e0:	4604      	mov	r4, r0
   dc4e2:	f000 fa87 	bl	dc9f4 <__gettzinfo>
   dc4e6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc4ea:	429c      	cmp	r4, r3
   dc4ec:	f340 8096 	ble.w	dc61c <__tzcalc_limits+0x140>
   dc4f0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc4f4:	18e3      	adds	r3, r4, r3
   dc4f6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc4fa:	109b      	asrs	r3, r3, #2
   dc4fc:	f240 156d 	movw	r5, #365	; 0x16d
   dc500:	fb05 3502 	mla	r5, r5, r2, r3
   dc504:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc508:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc50c:	fb92 f3f3 	sdiv	r3, r2, r3
   dc510:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc514:	442b      	add	r3, r5
   dc516:	18a5      	adds	r5, r4, r2
   dc518:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc51c:	fb95 f5f2 	sdiv	r5, r5, r2
   dc520:	441d      	add	r5, r3
   dc522:	2364      	movs	r3, #100	; 0x64
   dc524:	fb94 f7f2 	sdiv	r7, r4, r2
   dc528:	fb94 f6f3 	sdiv	r6, r4, r3
   dc52c:	fb02 4717 	mls	r7, r2, r7, r4
   dc530:	fb03 4616 	mls	r6, r3, r6, r4
   dc534:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc538:	fab7 fe87 	clz	lr, r7
   dc53c:	9301      	str	r3, [sp, #4]
   dc53e:	f004 0303 	and.w	r3, r4, #3
   dc542:	6044      	str	r4, [r0, #4]
   dc544:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc548:	4601      	mov	r1, r0
   dc54a:	9300      	str	r3, [sp, #0]
   dc54c:	f04f 0c07 	mov.w	ip, #7
   dc550:	7a0b      	ldrb	r3, [r1, #8]
   dc552:	2b4a      	cmp	r3, #74	; 0x4a
   dc554:	d10e      	bne.n	dc574 <__tzcalc_limits+0x98>
   dc556:	694b      	ldr	r3, [r1, #20]
   dc558:	9a00      	ldr	r2, [sp, #0]
   dc55a:	18ec      	adds	r4, r5, r3
   dc55c:	b902      	cbnz	r2, dc560 <__tzcalc_limits+0x84>
   dc55e:	b906      	cbnz	r6, dc562 <__tzcalc_limits+0x86>
   dc560:	b927      	cbnz	r7, dc56c <__tzcalc_limits+0x90>
   dc562:	2b3b      	cmp	r3, #59	; 0x3b
   dc564:	bfd4      	ite	le
   dc566:	2300      	movle	r3, #0
   dc568:	2301      	movgt	r3, #1
   dc56a:	e000      	b.n	dc56e <__tzcalc_limits+0x92>
   dc56c:	2300      	movs	r3, #0
   dc56e:	4423      	add	r3, r4
   dc570:	3b01      	subs	r3, #1
   dc572:	e03f      	b.n	dc5f4 <__tzcalc_limits+0x118>
   dc574:	2b44      	cmp	r3, #68	; 0x44
   dc576:	d102      	bne.n	dc57e <__tzcalc_limits+0xa2>
   dc578:	694b      	ldr	r3, [r1, #20]
   dc57a:	442b      	add	r3, r5
   dc57c:	e03a      	b.n	dc5f4 <__tzcalc_limits+0x118>
   dc57e:	9b00      	ldr	r3, [sp, #0]
   dc580:	b92b      	cbnz	r3, dc58e <__tzcalc_limits+0xb2>
   dc582:	2e00      	cmp	r6, #0
   dc584:	bf0c      	ite	eq
   dc586:	46f0      	moveq	r8, lr
   dc588:	f04f 0801 	movne.w	r8, #1
   dc58c:	e000      	b.n	dc590 <__tzcalc_limits+0xb4>
   dc58e:	46f0      	mov	r8, lr
   dc590:	4b24      	ldr	r3, [pc, #144]	; (dc624 <__tzcalc_limits+0x148>)
   dc592:	68cc      	ldr	r4, [r1, #12]
   dc594:	2230      	movs	r2, #48	; 0x30
   dc596:	fb02 3808 	mla	r8, r2, r8, r3
   dc59a:	f1a8 0a04 	sub.w	sl, r8, #4
   dc59e:	46a9      	mov	r9, r5
   dc5a0:	2301      	movs	r3, #1
   dc5a2:	42a3      	cmp	r3, r4
   dc5a4:	da04      	bge.n	dc5b0 <__tzcalc_limits+0xd4>
   dc5a6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc5aa:	3301      	adds	r3, #1
   dc5ac:	44d9      	add	r9, fp
   dc5ae:	e7f8      	b.n	dc5a2 <__tzcalc_limits+0xc6>
   dc5b0:	f109 0304 	add.w	r3, r9, #4
   dc5b4:	fb93 fbfc 	sdiv	fp, r3, ip
   dc5b8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc5bc:	2c01      	cmp	r4, #1
   dc5be:	ebca 0a03 	rsb	sl, sl, r3
   dc5c2:	694b      	ldr	r3, [r1, #20]
   dc5c4:	bfb8      	it	lt
   dc5c6:	2401      	movlt	r4, #1
   dc5c8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc5cc:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc5d0:	690b      	ldr	r3, [r1, #16]
   dc5d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dc5d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc5da:	bf48      	it	mi
   dc5dc:	f10a 0a07 	addmi.w	sl, sl, #7
   dc5e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc5e4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc5e8:	4453      	add	r3, sl
   dc5ea:	42a3      	cmp	r3, r4
   dc5ec:	db01      	blt.n	dc5f2 <__tzcalc_limits+0x116>
   dc5ee:	3b07      	subs	r3, #7
   dc5f0:	e7fb      	b.n	dc5ea <__tzcalc_limits+0x10e>
   dc5f2:	444b      	add	r3, r9
   dc5f4:	698c      	ldr	r4, [r1, #24]
   dc5f6:	4a0c      	ldr	r2, [pc, #48]	; (dc628 <__tzcalc_limits+0x14c>)
   dc5f8:	fb02 4303 	mla	r3, r2, r3, r4
   dc5fc:	6a0c      	ldr	r4, [r1, #32]
   dc5fe:	4423      	add	r3, r4
   dc600:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc604:	9b01      	ldr	r3, [sp, #4]
   dc606:	4299      	cmp	r1, r3
   dc608:	d1a2      	bne.n	dc550 <__tzcalc_limits+0x74>
   dc60a:	69c3      	ldr	r3, [r0, #28]
   dc60c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc60e:	4293      	cmp	r3, r2
   dc610:	bfac      	ite	ge
   dc612:	2300      	movge	r3, #0
   dc614:	2301      	movlt	r3, #1
   dc616:	6003      	str	r3, [r0, #0]
   dc618:	2001      	movs	r0, #1
   dc61a:	e000      	b.n	dc61e <__tzcalc_limits+0x142>
   dc61c:	2000      	movs	r0, #0
   dc61e:	b003      	add	sp, #12
   dc620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc624:	000ddb98 	.word	0x000ddb98
   dc628:	00015180 	.word	0x00015180

000dc62c <__tz_lock>:
   dc62c:	4770      	bx	lr

000dc62e <__tz_unlock>:
   dc62e:	4770      	bx	lr

000dc630 <_tzset_unlocked>:
   dc630:	4b01      	ldr	r3, [pc, #4]	; (dc638 <_tzset_unlocked+0x8>)
   dc632:	6818      	ldr	r0, [r3, #0]
   dc634:	f000 b802 	b.w	dc63c <_tzset_unlocked_r>
   dc638:	2003de58 	.word	0x2003de58

000dc63c <_tzset_unlocked_r>:
   dc63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc640:	b08d      	sub	sp, #52	; 0x34
   dc642:	4607      	mov	r7, r0
   dc644:	f000 f9d6 	bl	dc9f4 <__gettzinfo>
   dc648:	49b0      	ldr	r1, [pc, #704]	; (dc90c <_tzset_unlocked_r+0x2d0>)
   dc64a:	4eb1      	ldr	r6, [pc, #708]	; (dc910 <_tzset_unlocked_r+0x2d4>)
   dc64c:	4604      	mov	r4, r0
   dc64e:	4638      	mov	r0, r7
   dc650:	f000 f9c8 	bl	dc9e4 <_getenv_r>
   dc654:	4605      	mov	r5, r0
   dc656:	b960      	cbnz	r0, dc672 <_tzset_unlocked_r+0x36>
   dc658:	4bae      	ldr	r3, [pc, #696]	; (dc914 <_tzset_unlocked_r+0x2d8>)
   dc65a:	4aaf      	ldr	r2, [pc, #700]	; (dc918 <_tzset_unlocked_r+0x2dc>)
   dc65c:	6018      	str	r0, [r3, #0]
   dc65e:	4baf      	ldr	r3, [pc, #700]	; (dc91c <_tzset_unlocked_r+0x2e0>)
   dc660:	6018      	str	r0, [r3, #0]
   dc662:	4baf      	ldr	r3, [pc, #700]	; (dc920 <_tzset_unlocked_r+0x2e4>)
   dc664:	6830      	ldr	r0, [r6, #0]
   dc666:	601a      	str	r2, [r3, #0]
   dc668:	605a      	str	r2, [r3, #4]
   dc66a:	f7fb fe79 	bl	d8360 <free>
   dc66e:	6035      	str	r5, [r6, #0]
   dc670:	e148      	b.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc672:	6831      	ldr	r1, [r6, #0]
   dc674:	b979      	cbnz	r1, dc696 <_tzset_unlocked_r+0x5a>
   dc676:	6830      	ldr	r0, [r6, #0]
   dc678:	f7fb fe72 	bl	d8360 <free>
   dc67c:	4628      	mov	r0, r5
   dc67e:	f7ff fdd5 	bl	dc22c <strlen>
   dc682:	1c41      	adds	r1, r0, #1
   dc684:	4638      	mov	r0, r7
   dc686:	f7fb feab 	bl	d83e0 <_malloc_r>
   dc68a:	6030      	str	r0, [r6, #0]
   dc68c:	b148      	cbz	r0, dc6a2 <_tzset_unlocked_r+0x66>
   dc68e:	4629      	mov	r1, r5
   dc690:	f7ff f894 	bl	db7bc <strcpy>
   dc694:	e005      	b.n	dc6a2 <_tzset_unlocked_r+0x66>
   dc696:	f7ff f887 	bl	db7a8 <strcmp>
   dc69a:	2800      	cmp	r0, #0
   dc69c:	f000 8132 	beq.w	dc904 <_tzset_unlocked_r+0x2c8>
   dc6a0:	e7e9      	b.n	dc676 <_tzset_unlocked_r+0x3a>
   dc6a2:	782b      	ldrb	r3, [r5, #0]
   dc6a4:	4a9f      	ldr	r2, [pc, #636]	; (dc924 <_tzset_unlocked_r+0x2e8>)
   dc6a6:	49a0      	ldr	r1, [pc, #640]	; (dc928 <_tzset_unlocked_r+0x2ec>)
   dc6a8:	2b3a      	cmp	r3, #58	; 0x3a
   dc6aa:	bf08      	it	eq
   dc6ac:	3501      	addeq	r5, #1
   dc6ae:	ae0a      	add	r6, sp, #40	; 0x28
   dc6b0:	4633      	mov	r3, r6
   dc6b2:	4628      	mov	r0, r5
   dc6b4:	f7fb fe6c 	bl	d8390 <siscanf>
   dc6b8:	2800      	cmp	r0, #0
   dc6ba:	f340 8123 	ble.w	dc904 <_tzset_unlocked_r+0x2c8>
   dc6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc6c0:	18ef      	adds	r7, r5, r3
   dc6c2:	5ceb      	ldrb	r3, [r5, r3]
   dc6c4:	2b2d      	cmp	r3, #45	; 0x2d
   dc6c6:	d103      	bne.n	dc6d0 <_tzset_unlocked_r+0x94>
   dc6c8:	3701      	adds	r7, #1
   dc6ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc6ce:	e003      	b.n	dc6d8 <_tzset_unlocked_r+0x9c>
   dc6d0:	2b2b      	cmp	r3, #43	; 0x2b
   dc6d2:	bf08      	it	eq
   dc6d4:	3701      	addeq	r7, #1
   dc6d6:	2501      	movs	r5, #1
   dc6d8:	f10d 0a20 	add.w	sl, sp, #32
   dc6dc:	f10d 0b1e 	add.w	fp, sp, #30
   dc6e0:	f04f 0800 	mov.w	r8, #0
   dc6e4:	9603      	str	r6, [sp, #12]
   dc6e6:	f8cd a008 	str.w	sl, [sp, #8]
   dc6ea:	9601      	str	r6, [sp, #4]
   dc6ec:	f8cd b000 	str.w	fp, [sp]
   dc6f0:	4633      	mov	r3, r6
   dc6f2:	aa07      	add	r2, sp, #28
   dc6f4:	498d      	ldr	r1, [pc, #564]	; (dc92c <_tzset_unlocked_r+0x2f0>)
   dc6f6:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc6fa:	4638      	mov	r0, r7
   dc6fc:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc700:	f7fb fe46 	bl	d8390 <siscanf>
   dc704:	4540      	cmp	r0, r8
   dc706:	f340 80fd 	ble.w	dc904 <_tzset_unlocked_r+0x2c8>
   dc70a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc70e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc712:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc938 <_tzset_unlocked_r+0x2fc>
   dc716:	213c      	movs	r1, #60	; 0x3c
   dc718:	fb01 3302 	mla	r3, r1, r2, r3
   dc71c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc720:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc724:	fb01 3302 	mla	r3, r1, r2, r3
   dc728:	435d      	muls	r5, r3
   dc72a:	6225      	str	r5, [r4, #32]
   dc72c:	4d7c      	ldr	r5, [pc, #496]	; (dc920 <_tzset_unlocked_r+0x2e4>)
   dc72e:	4b7d      	ldr	r3, [pc, #500]	; (dc924 <_tzset_unlocked_r+0x2e8>)
   dc730:	602b      	str	r3, [r5, #0]
   dc732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc734:	497c      	ldr	r1, [pc, #496]	; (dc928 <_tzset_unlocked_r+0x2ec>)
   dc736:	441f      	add	r7, r3
   dc738:	464a      	mov	r2, r9
   dc73a:	4633      	mov	r3, r6
   dc73c:	4638      	mov	r0, r7
   dc73e:	f7fb fe27 	bl	d8390 <siscanf>
   dc742:	4540      	cmp	r0, r8
   dc744:	dc08      	bgt.n	dc758 <_tzset_unlocked_r+0x11c>
   dc746:	682b      	ldr	r3, [r5, #0]
   dc748:	606b      	str	r3, [r5, #4]
   dc74a:	4b72      	ldr	r3, [pc, #456]	; (dc914 <_tzset_unlocked_r+0x2d8>)
   dc74c:	6a22      	ldr	r2, [r4, #32]
   dc74e:	601a      	str	r2, [r3, #0]
   dc750:	4b72      	ldr	r3, [pc, #456]	; (dc91c <_tzset_unlocked_r+0x2e0>)
   dc752:	f8c3 8000 	str.w	r8, [r3]
   dc756:	e0d5      	b.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc75a:	f8c5 9004 	str.w	r9, [r5, #4]
   dc75e:	18fd      	adds	r5, r7, r3
   dc760:	5cfb      	ldrb	r3, [r7, r3]
   dc762:	2b2d      	cmp	r3, #45	; 0x2d
   dc764:	d103      	bne.n	dc76e <_tzset_unlocked_r+0x132>
   dc766:	3501      	adds	r5, #1
   dc768:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc76c:	e003      	b.n	dc776 <_tzset_unlocked_r+0x13a>
   dc76e:	2b2b      	cmp	r3, #43	; 0x2b
   dc770:	bf08      	it	eq
   dc772:	3501      	addeq	r5, #1
   dc774:	2701      	movs	r7, #1
   dc776:	2300      	movs	r3, #0
   dc778:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc77c:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc780:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc784:	930a      	str	r3, [sp, #40]	; 0x28
   dc786:	9603      	str	r6, [sp, #12]
   dc788:	f8cd a008 	str.w	sl, [sp, #8]
   dc78c:	9601      	str	r6, [sp, #4]
   dc78e:	f8cd b000 	str.w	fp, [sp]
   dc792:	4633      	mov	r3, r6
   dc794:	aa07      	add	r2, sp, #28
   dc796:	4965      	ldr	r1, [pc, #404]	; (dc92c <_tzset_unlocked_r+0x2f0>)
   dc798:	4628      	mov	r0, r5
   dc79a:	f7fb fdf9 	bl	d8390 <siscanf>
   dc79e:	2800      	cmp	r0, #0
   dc7a0:	dc04      	bgt.n	dc7ac <_tzset_unlocked_r+0x170>
   dc7a2:	6a23      	ldr	r3, [r4, #32]
   dc7a4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc7a8:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc7aa:	e00e      	b.n	dc7ca <_tzset_unlocked_r+0x18e>
   dc7ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc7b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc7b4:	213c      	movs	r1, #60	; 0x3c
   dc7b6:	fb01 3302 	mla	r3, r1, r2, r3
   dc7ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc7be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc7c2:	fb01 3302 	mla	r3, r1, r2, r3
   dc7c6:	435f      	muls	r7, r3
   dc7c8:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc7cc:	4627      	mov	r7, r4
   dc7ce:	441d      	add	r5, r3
   dc7d0:	f04f 0900 	mov.w	r9, #0
   dc7d4:	782b      	ldrb	r3, [r5, #0]
   dc7d6:	2b2c      	cmp	r3, #44	; 0x2c
   dc7d8:	bf08      	it	eq
   dc7da:	3501      	addeq	r5, #1
   dc7dc:	f895 8000 	ldrb.w	r8, [r5]
   dc7e0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc7e4:	d126      	bne.n	dc834 <_tzset_unlocked_r+0x1f8>
   dc7e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc7ea:	9302      	str	r3, [sp, #8]
   dc7ec:	ab09      	add	r3, sp, #36	; 0x24
   dc7ee:	9300      	str	r3, [sp, #0]
   dc7f0:	9603      	str	r6, [sp, #12]
   dc7f2:	9601      	str	r6, [sp, #4]
   dc7f4:	4633      	mov	r3, r6
   dc7f6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc7fa:	494d      	ldr	r1, [pc, #308]	; (dc930 <_tzset_unlocked_r+0x2f4>)
   dc7fc:	4628      	mov	r0, r5
   dc7fe:	f7fb fdc7 	bl	d8390 <siscanf>
   dc802:	2803      	cmp	r0, #3
   dc804:	d17e      	bne.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc806:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc80a:	1e4b      	subs	r3, r1, #1
   dc80c:	2b0b      	cmp	r3, #11
   dc80e:	d879      	bhi.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc810:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc814:	1e53      	subs	r3, r2, #1
   dc816:	2b04      	cmp	r3, #4
   dc818:	d874      	bhi.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc81a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc81e:	2b06      	cmp	r3, #6
   dc820:	d870      	bhi.n	dc904 <_tzset_unlocked_r+0x2c8>
   dc822:	f887 8008 	strb.w	r8, [r7, #8]
   dc826:	60f9      	str	r1, [r7, #12]
   dc828:	613a      	str	r2, [r7, #16]
   dc82a:	617b      	str	r3, [r7, #20]
   dc82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc82e:	eb05 0803 	add.w	r8, r5, r3
   dc832:	e02a      	b.n	dc88a <_tzset_unlocked_r+0x24e>
   dc834:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc838:	bf06      	itte	eq
   dc83a:	3501      	addeq	r5, #1
   dc83c:	4643      	moveq	r3, r8
   dc83e:	2344      	movne	r3, #68	; 0x44
   dc840:	220a      	movs	r2, #10
   dc842:	a90b      	add	r1, sp, #44	; 0x2c
   dc844:	4628      	mov	r0, r5
   dc846:	9305      	str	r3, [sp, #20]
   dc848:	f7ff fe2e 	bl	dc4a8 <strtoul>
   dc84c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc850:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc854:	4545      	cmp	r5, r8
   dc856:	9b05      	ldr	r3, [sp, #20]
   dc858:	d114      	bne.n	dc884 <_tzset_unlocked_r+0x248>
   dc85a:	234d      	movs	r3, #77	; 0x4d
   dc85c:	f1b9 0f00 	cmp.w	r9, #0
   dc860:	d107      	bne.n	dc872 <_tzset_unlocked_r+0x236>
   dc862:	7223      	strb	r3, [r4, #8]
   dc864:	2303      	movs	r3, #3
   dc866:	60e3      	str	r3, [r4, #12]
   dc868:	2302      	movs	r3, #2
   dc86a:	6123      	str	r3, [r4, #16]
   dc86c:	f8c4 9014 	str.w	r9, [r4, #20]
   dc870:	e00b      	b.n	dc88a <_tzset_unlocked_r+0x24e>
   dc872:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc876:	230b      	movs	r3, #11
   dc878:	62a3      	str	r3, [r4, #40]	; 0x28
   dc87a:	2301      	movs	r3, #1
   dc87c:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc87e:	2300      	movs	r3, #0
   dc880:	6323      	str	r3, [r4, #48]	; 0x30
   dc882:	e002      	b.n	dc88a <_tzset_unlocked_r+0x24e>
   dc884:	b280      	uxth	r0, r0
   dc886:	723b      	strb	r3, [r7, #8]
   dc888:	6178      	str	r0, [r7, #20]
   dc88a:	2302      	movs	r3, #2
   dc88c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc890:	2300      	movs	r3, #0
   dc892:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc896:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc89a:	930a      	str	r3, [sp, #40]	; 0x28
   dc89c:	f898 3000 	ldrb.w	r3, [r8]
   dc8a0:	2b2f      	cmp	r3, #47	; 0x2f
   dc8a2:	d10b      	bne.n	dc8bc <_tzset_unlocked_r+0x280>
   dc8a4:	9603      	str	r6, [sp, #12]
   dc8a6:	f8cd a008 	str.w	sl, [sp, #8]
   dc8aa:	9601      	str	r6, [sp, #4]
   dc8ac:	f8cd b000 	str.w	fp, [sp]
   dc8b0:	4633      	mov	r3, r6
   dc8b2:	aa07      	add	r2, sp, #28
   dc8b4:	491f      	ldr	r1, [pc, #124]	; (dc934 <_tzset_unlocked_r+0x2f8>)
   dc8b6:	4640      	mov	r0, r8
   dc8b8:	f7fb fd6a 	bl	d8390 <siscanf>
   dc8bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc8c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc8c4:	213c      	movs	r1, #60	; 0x3c
   dc8c6:	fb01 3302 	mla	r3, r1, r2, r3
   dc8ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc8ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc8d2:	fb01 3302 	mla	r3, r1, r2, r3
   dc8d6:	61bb      	str	r3, [r7, #24]
   dc8d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc8da:	f109 0901 	add.w	r9, r9, #1
   dc8de:	f1b9 0f02 	cmp.w	r9, #2
   dc8e2:	4445      	add	r5, r8
   dc8e4:	f107 071c 	add.w	r7, r7, #28
   dc8e8:	f47f af74 	bne.w	dc7d4 <_tzset_unlocked_r+0x198>
   dc8ec:	6860      	ldr	r0, [r4, #4]
   dc8ee:	f7ff fdf5 	bl	dc4dc <__tzcalc_limits>
   dc8f2:	4b08      	ldr	r3, [pc, #32]	; (dc914 <_tzset_unlocked_r+0x2d8>)
   dc8f4:	6a22      	ldr	r2, [r4, #32]
   dc8f6:	601a      	str	r2, [r3, #0]
   dc8f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc8fa:	1a9b      	subs	r3, r3, r2
   dc8fc:	4a07      	ldr	r2, [pc, #28]	; (dc91c <_tzset_unlocked_r+0x2e0>)
   dc8fe:	bf18      	it	ne
   dc900:	2301      	movne	r3, #1
   dc902:	6013      	str	r3, [r2, #0]
   dc904:	b00d      	add	sp, #52	; 0x34
   dc906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc90a:	bf00      	nop
   dc90c:	000dde7c 	.word	0x000dde7c
   dc910:	2003e7e0 	.word	0x2003e7e0
   dc914:	2003e7e8 	.word	0x2003e7e8
   dc918:	000dde7f 	.word	0x000dde7f
   dc91c:	2003e7e4 	.word	0x2003e7e4
   dc920:	2003de5c 	.word	0x2003de5c
   dc924:	2003e7d3 	.word	0x2003e7d3
   dc928:	000dde83 	.word	0x000dde83
   dc92c:	000ddea6 	.word	0x000ddea6
   dc930:	000dde92 	.word	0x000dde92
   dc934:	000ddea5 	.word	0x000ddea5
   dc938:	2003e7c8 	.word	0x2003e7c8

000dc93c <abs>:
   dc93c:	2800      	cmp	r0, #0
   dc93e:	bfb8      	it	lt
   dc940:	4240      	neglt	r0, r0
   dc942:	4770      	bx	lr

000dc944 <div>:
   dc944:	2900      	cmp	r1, #0
   dc946:	b510      	push	{r4, lr}
   dc948:	fb91 f4f2 	sdiv	r4, r1, r2
   dc94c:	fb02 1314 	mls	r3, r2, r4, r1
   dc950:	db04      	blt.n	dc95c <div+0x18>
   dc952:	2b00      	cmp	r3, #0
   dc954:	da07      	bge.n	dc966 <div+0x22>
   dc956:	3401      	adds	r4, #1
   dc958:	1a9b      	subs	r3, r3, r2
   dc95a:	e004      	b.n	dc966 <div+0x22>
   dc95c:	2b00      	cmp	r3, #0
   dc95e:	bfc4      	itt	gt
   dc960:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc964:	189b      	addgt	r3, r3, r2
   dc966:	6004      	str	r4, [r0, #0]
   dc968:	6043      	str	r3, [r0, #4]
   dc96a:	bd10      	pop	{r4, pc}

000dc96c <_findenv_r>:
   dc96c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc970:	4607      	mov	r7, r0
   dc972:	468b      	mov	fp, r1
   dc974:	4690      	mov	r8, r2
   dc976:	f000 f845 	bl	dca04 <__env_lock>
   dc97a:	4b19      	ldr	r3, [pc, #100]	; (dc9e0 <_findenv_r+0x74>)
   dc97c:	681d      	ldr	r5, [r3, #0]
   dc97e:	469a      	mov	sl, r3
   dc980:	b13d      	cbz	r5, dc992 <_findenv_r+0x26>
   dc982:	465c      	mov	r4, fp
   dc984:	4623      	mov	r3, r4
   dc986:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc98a:	b142      	cbz	r2, dc99e <_findenv_r+0x32>
   dc98c:	2a3d      	cmp	r2, #61	; 0x3d
   dc98e:	461c      	mov	r4, r3
   dc990:	d1f8      	bne.n	dc984 <_findenv_r+0x18>
   dc992:	4638      	mov	r0, r7
   dc994:	f000 f837 	bl	dca06 <__env_unlock>
   dc998:	2000      	movs	r0, #0
   dc99a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc99e:	ebcb 0404 	rsb	r4, fp, r4
   dc9a2:	46a9      	mov	r9, r5
   dc9a4:	f859 0b04 	ldr.w	r0, [r9], #4
   dc9a8:	2800      	cmp	r0, #0
   dc9aa:	d0f2      	beq.n	dc992 <_findenv_r+0x26>
   dc9ac:	4622      	mov	r2, r4
   dc9ae:	4659      	mov	r1, fp
   dc9b0:	f7ff fc44 	bl	dc23c <strncmp>
   dc9b4:	b988      	cbnz	r0, dc9da <_findenv_r+0x6e>
   dc9b6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc9ba:	191e      	adds	r6, r3, r4
   dc9bc:	5d1b      	ldrb	r3, [r3, r4]
   dc9be:	2b3d      	cmp	r3, #61	; 0x3d
   dc9c0:	d10b      	bne.n	dc9da <_findenv_r+0x6e>
   dc9c2:	f8da 3000 	ldr.w	r3, [sl]
   dc9c6:	1aed      	subs	r5, r5, r3
   dc9c8:	10ad      	asrs	r5, r5, #2
   dc9ca:	4638      	mov	r0, r7
   dc9cc:	f8c8 5000 	str.w	r5, [r8]
   dc9d0:	f000 f819 	bl	dca06 <__env_unlock>
   dc9d4:	1c70      	adds	r0, r6, #1
   dc9d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc9da:	464d      	mov	r5, r9
   dc9dc:	e7e1      	b.n	dc9a2 <_findenv_r+0x36>
   dc9de:	bf00      	nop
   dc9e0:	2003dea4 	.word	0x2003dea4

000dc9e4 <_getenv_r>:
   dc9e4:	b507      	push	{r0, r1, r2, lr}
   dc9e6:	aa01      	add	r2, sp, #4
   dc9e8:	f7ff ffc0 	bl	dc96c <_findenv_r>
   dc9ec:	b003      	add	sp, #12
   dc9ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc9f4 <__gettzinfo>:
   dc9f4:	4800      	ldr	r0, [pc, #0]	; (dc9f8 <__gettzinfo+0x4>)
   dc9f6:	4770      	bx	lr
   dc9f8:	2003de64 	.word	0x2003de64

000dc9fc <labs>:
   dc9fc:	2800      	cmp	r0, #0
   dc9fe:	bfb8      	it	lt
   dca00:	4240      	neglt	r0, r0
   dca02:	4770      	bx	lr

000dca04 <__env_lock>:
   dca04:	4770      	bx	lr

000dca06 <__env_unlock>:
   dca06:	4770      	bx	lr

000dca08 <dynalib_user>:
   dca08:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dca18:	0000 0000                                   ....

000dca1c <_ZTV8MB85RC64>:
	...
   dca24:	4181 000d 4195 000d 5b25 000d 5bd1 000d     .A...A..%[...[..
   dca34:	5c4b 000d                                   K\..

000dca38 <_ZTV17PublishQueueAsync>:
	...
   dca40:	4159 000d 416d 000d 6a69 000d 6c09 000d     YA..mA..ij...l..
   dca50:	6bc5 000d 6ba3 000d 6d4f 000d 6beb 000d     .k...k..Om...k..
   dca60:	ce41 000d ce7c 000d ce81 000d ce86 000d     A...|...........
   dca70:	ce8a 000d ce8f 000d ce94 000d ce98 000d     ................
   dca80:	cea3 000d ceae 000d ce41 000d ce49 000d     ........A...I...
   dca90:	ce4d 000d ce56 000d ce5e 000d ce6a 000d     M...V...^...j...
   dcaa0:	ce70 000d 6f4e 4420 7461 0061 6255 6469     p...No Data.Ubid
   dcab0:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dcac0:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dcad0:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dcae0:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
   dcaf0:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
   dcb00:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dcb10:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dcb20:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
   dcb30:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
   dcb40:	7465 2520 0069 6954 656d 5300 6d61 6c70     et %i.Time.Sampl
   dcb50:	2065 6e49 6574 7672 6c61 6920 2073 6f6e     e Interval is no
   dcb60:	2077 6925 6d20 6e69 7475 7365 7b00 6322     w %i minutes.{"c
   dcb70:	6261 6e69 2254 253a 2e34 6632 202c 7622     abinT":%4.2f, "v
   dcb80:	6e65 5474 3a22 3425 322e 2c66 2220 756f     entT":%4.2f, "ou
   dcb90:	7374 6469 5465 3a22 3425 322e 2c66 2220     tsideT":%4.2f, "
   dcba0:	6162 7474 7265 2279 253a 2c69 2020 6b22     battery":%i,  "k
   dcbb0:	7965 2231 223a 7325 2c22 2220 6572 6573     ey1":"%s", "rese
   dcbc0:	7374 3a22 6925 202c 6122 656c 7472 2273     ts":%i, "alerts"
   dcbd0:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
   dcbe0:	253a 756c 3030 2c30 2220 616c 2274 253a     :%lu000, "lat":%
   dcbf0:	2c66 2220 6e6c 2267 253a 7d66 5500 6962     f, "lng":%f}.Ubi
   dcc00:	6f64 7374 4d2d 5442 2d41 6f48 6b6f 762d     dots-MBTA-Hook-v
   dcc10:	0032 6e49 6176 696c 2064 6572 6461 6e69     2.Invalid readin
   dcc20:	0067 7325 5320 253a 2e32 6630 2525 202c     g.%s S:%2.0f%%, 
   dcc30:	3a51 3225 302e 2566 2025 4600 6f72 206d     Q:%2.0f%% .From 
   dcc40:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
   dcc50:	6172 736e 7469 6f69 006e 5441 432b 5546     ransition.AT+CFU
   dcc60:	3d4e 3531 0a0d 5200 6e75 696e 676e 4400     N=15...Running.D
   dcc70:	6961 796c 4320 656c 6e61 7075 4400 5453     aily Cleanup.DST
   dcc80:	6f20 6666 6573 2074 3225 312e 0066 6f6c      offset %2.1f.lo
   dcc90:	6163 6974 6e6f 253a 2c66 6625 6120 746c     cation:%f,%f alt
   dcca0:	7469 6475 3a65 6625 7320 7461 6c65 696c     itude:%f satelli
   dccb0:	6574 3a73 6425 6820 6f64 3a70 6c25 2500     tes:%d hdop:%l.%
   dccc0:	756c 6d20 6c69 696c 6573 6f63 646e 2073     lu milliseconds 
   dccd0:	6f74 6720 7465 4720 5350 6620 7869 6e00     to get GPS fix.n
   dcce0:	206f 6f6c 6163 6974 6e6f 7320 7461 6c65     o location satel
   dccf0:	696c 6574 3a73 6425 6700 7370 2500 2e34     lites:%d.gps.%4.
   dcd00:	6632 4620 7300 6170 6b72 642f 7665 6369     2f F.spark/devic
   dcd10:	2f65 6573 7373 6f69 2f6e 6e65 0064 7245     e/session/end.Er
   dcd20:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   dcd30:	0074 7453 7461 0065 7245 6f72 2072 7453     t.State.Error St
   dcd40:	7461 2065 202d 6f50 6577 2072 7943 6c63     ate - Power Cycl
   dcd50:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
   dcd60:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   dcd70:	4c00 616f 6964 676e 5320 7379 6574 206d     .Loading System 
   dcd80:	6544 6166 6c75 7374 5300 6769 616e 006c     Defaults.Signal.
   dcd90:	6153 706d 656c 6e49 6574 7672 6c61 5200     SampleInterval.R
   dcda0:	7365 7465 6f43 6e75 0074 6143 6962 546e     esetCount.CabinT
   dcdb0:	6d65 0070 6556 746e 6554 706d 4f00 7475     emp.VentTemp.Out
   dcdc0:	6973 6564 6554 706d 5200 6c65 6165 6573     sideTemp.Release
   dcdd0:	7300 6174 6574 664f 6843 0067 6c41 7265     .stateOfChg.Aler
   dcde0:	7374 5400 6d69 4f65 6666 6573 0074 6142     ts.TimeOffset.Ba
   dcdf0:	7474 7265 4379 6e6f 6574 7478 7200 7365     tteryContext.res
   dce00:	7465 5246 4d41 4800 7261 5264 7365 7465     etFRAM.HardReset
   dce10:	5300 6e65 4e64 776f 5600 7265 6f62 6573     .SendNow.Verbose
   dce20:	4d2d 646f 0065 6553 2d74 6954 656d 6f7a     -Mode.Set-Timezo
   dce30:	656e 5300 7465 442d 5453 664f 7366 7465     ne.Set-DSTOffset
   dce40:	5500 6b6e 6f6e 6e77 4e00 746f 4320 6168     .Unknown.Not Cha
   dce50:	6772 6e69 0067 6843 7261 6567 0064 6944     rging.Charged.Di
   dce60:	6373 6168 6772 6e69 0067 6146 6c75 0074     scharging.Fault.
   dce70:	6944 6f63 6e6e 6365 6574 0064 6f4e 656e     Diconnected.None
   dce80:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dce90:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dcea0:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dceb0:	5f45 4143 5f54 424e 0031 0000               E_CAT_NB1...

000dcebc <_ZL17FRAMversionNumber>:
   dcebc:	0001 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dcecc:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dcedc:	2065 7266 6d61 6441 7264 253d 0075 6572     e framAddr=%u.re
   dceec:	6461 7320 7465 6120 6464 6572 7373 6620     ad set address f
   dcefc:	6961 656c 2064 6425 6400 6469 276e 2074     ailed %d.didn't 
   dcf0c:	6572 6563 7669 2065 6e65 756f 6867 6220     receive enough b
   dcf1c:	7479 7365 6320 756f 746e 253d 0075 7277     ytes count=%u.wr
   dcf2c:	7469 2065 6166 6c69 6465 2520 0064 0000     ite failed %d...

000dcf3c <_ZTV6MB85RC>:
	...
   dcf44:	5a75 000d 5a77 000d 5b25 000d 5bd1 000d     uZ..wZ..%[...[..
   dcf54:	5c4b 000d                                   K\..

000dcf58 <_ZTV14MCP79410EEPROM>:
	...
   dcf60:	5d13 000d 5d35 000d 5d09 000d 5d0d 000d     .]..5]...]...]..
   dcf70:	5d51 000d 6185 000d 65a1 000d               Q]...a...e..

000dcf7c <_ZTV12MCP79410SRAM>:
	...
   dcf84:	5d11 000d 5d27 000d 5d01 000d 5d05 000d     .]..']...]...]..
   dcf94:	5d51 000d 61bd 000d 640b 000d 6579 7261     Q]...a...d..year
   dcfa4:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dcfb4:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dcfc4:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dcfd4:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dcfe4:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dcff4:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd004:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd014:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd024:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd034:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd044:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd054:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd064:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd074:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd084:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd094:	7061 2e70 7472 0063                         app.rtc.

000dd09c <_ZTV12MCP79410Time>:
	...
   dd0a4:	5d15 000d 5d19 000d                         .]...]..

000dd0ac <_ZTV8MCP79410>:
	...
   dd0b4:	5d17 000d 5d43 000d                         .]..C]..

000dd0bc <_ZTV25PublishQueueAsyncRetained>:
	...
   dd0c4:	6b61 000d 6b75 000d 6a69 000d 6c09 000d     ak..uk..ij...l..
   dd0d4:	6bc5 000d 6ba3 000d 6d4f 000d 6beb 000d     .k...k..Om...k..
   dd0e4:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
   dd0f4:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
   dd104:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
   dd114:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
   dd124:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
   dd134:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
   dd144:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
   dd154:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
   dd164:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
   dd174:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
   dd184:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
   dd194:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

000dd1a0 <_ZTV21PublishQueueAsyncBase>:
	...
   dd1b0:	6a69 000d 40a9 000d 40a9 000d 40a9 000d     ij...@...@...@..
   dd1c0:	40a9 000d 40a9 000d                         .@...@..

000dd1c8 <_ZTVN8particle13__SPISettingsE>:
	...
   dd1d0:	6fe9 000d 6564 6166 6c75 2074 4d00 4253     .o..default .MSB
   dd1e0:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dd1f0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dd200:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dd210:	4d20 444f 2545 3e64 4100 7373 7465 7254      MODE%d>.AssetTr
   dd220:	6361 656b 0072 6977 6572 6552 6461 7942     acker.wireReadBy
   dd230:	6574 4173 6176 6c69 6261 656c 4920 4332     tesAvailable I2C
   dd240:	6520 7272 726f 2520 0075 6977 6572 6552      error %u.wireRe
   dd250:	6461 7942 6574 4173 6176 6c69 6261 656c     adBytesAvailable
   dd260:	6920 636e 726f 6572 7463 6320 756f 746e      incorrect count
   dd270:	2520 0075 6977 6572 6552 6461 7942 6574      %u.wireReadByte
   dd280:	2073 3249 2043 7265 6f72 2072 7525 7700     s I2C error %u.w
   dd290:	7269 5265 6165 4264 7479 7365 6920 636e     ireReadBytes inc
   dd2a0:	726f 6572 7463 6320 756f 746e 2520 0075     orrect count %u.

000dd2b0 <_ZTV12AssetTracker>:
	...
   dd2b8:	7041 000d 705d 000d                         Ap..]p..

000dd2c0 <_ZTV13LegacyAdapter>:
	...
   dd2c8:	73d9 000d 73db 000d 5047 4d52 0043 4e47     .s...s..GPRMC.GN
   dd2d8:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   dd2e8:	004e 4e4e 0045 4e45 0045 5345 0045 5353     N.NNE.ENE.ESE.SS
   dd2f8:	0045 5353 0057 5357 0057 4e57 0057 4e4e     E.SSW.WSW.WNW.NN
   dd308:	0057 6e6f 696c 656e 6c2d 7669 3165 732e     W.online-live1.s
   dd318:	7265 6976 6563 2e73 2d75 6c62 786f 632e     ervices.u-blox.c
   dd328:	6d6f 6400 7461 2061 6f74 206f 6f6c 676e     om.data too long
   dd338:	7020 7961 6f6c 6461 654c 3d6e 7525 6900      payloadLen=%u.i
   dd348:	766e 6c61 6469 4320 4352 4400 6e6f 2065     nvalid CRC.Done 
   dd358:	6573 646e 6e69 2067 6961 6964 676e 6420     sending aiding d
   dd368:	7461 2061 6f74 4720 5350 0021 6164 6174     ata to GPS!.data
   dd378:	6420 6469 276e 2074 6562 6967 206e 6977      didn't begin wi
   dd388:	6874 7320 6e79 2063 7962 6574 2073 666f     th sync bytes of
   dd398:	7366 7465 253d 0075 6170 6c79 616f 4c64     fset=%u.payloadL
   dd3a8:	6e65 6f20 2066 7525 7320 6565 736d 7420     en of %u seems t
   dd3b8:	206f 6562 6320 726f 7572 7470 6465 2c00     o be corrupted.,
   dd3c8:	7b00 6c22 7461 3a22 6625 202c 6c22 676e     .{"lat":%f, "lng
   dd3d8:	3a22 6625 007d 6572 7571 7365 6974 676e     ":%f}.requesting
   dd3e8:	6520 656c 6176 6974 6e6f 6620 726f 2520      elevation for %
   dd3f8:	0073 7341 6973 7473 6c45 7665 7461 6f69     s.AssistElevatio
   dd408:	006e 6c65 7665 7461 6f69 3d6e 6625 7300     n.elevation=%f.s
   dd418:	7265 6576 2072 6964 6373 6e6f 656e 7463     erver disconnect
   dd428:	6465 7520 656e 7078 6365 6574 6c64 0079     ed unexpectedly.
   dd438:	6f43 746e 6e65 2d74 654c 676e 6874 003a     Content-Length:.
   dd448:	6f43 6c75 2064 6f6e 2074 6170 7372 2065     Could not parse 
   dd458:	6f43 746e 6e65 2d74 654c 676e 6874 202c     Content-Length, 
   dd468:	7865 7469 6e69 0067 6f43 746e 6e65 2d74     exiting.Content-
   dd478:	654c 676e 6874 6f20 2066 7525 6920 2073     Length of %u is 
   dd488:	616c 6772 7265 7420 6168 206e 7562 6666     larger than buff
   dd498:	7265 6c20 6e65 7467 2068 7525 5400 6d69     er length %u.Tim
   dd4a8:	6465 6f20 7475 6720 7465 6974 676e 6c20     ed out getting l
   dd4b8:	636f 7461 6f69 206e 6e69 6f66 6d72 7461     ocation informat
   dd4c8:	6f69 2c6e 6420 6665 7561 746c 6e69 2067     ion, defaulting 
   dd4d8:	6f74 6e20 206f 6f6c 6163 6974 6e6f 6d20     to no location m
   dd4e8:	646f 0065 6f63 6e6e 6365 6574 2064 6f74     ode.connected to
   dd4f8:	2520 0073 472f 7465 6e4f 696c 656e 6144      %s./GetOnlineDa
   dd508:	6174 612e 6873 3f78 6f74 656b 3d6e 7325     ta.ashx?token=%s
   dd518:	673b 736e 3d73 7067 3b73 6164 6174 7974     ;gnss=gps;dataty
   dd528:	6570 653d 6870 612c 6d6c 612c 7875 702c     pe=eph,alm,aux,p
   dd538:	736f 6c3b 7461 253d 372e 3b66 6f6c 3d6e     os;lat=%.7f;lon=
   dd548:	2e25 6637 703b 6361 3d63 6425 613b 746c     %.7f;pacc=%d;alt
   dd558:	253d 3b64 6966 746c 7265 6e6f 6f70 3b73     =%d;filteronpos;
   dd568:	616c 6574 636e 3d79 0032 472f 7465 6e4f     latency=2./GetOn
   dd578:	696c 656e 6144 6174 612e 6873 3f78 6f74     lineData.ashx?to
   dd588:	656b 3d6e 7325 673b 736e 3d73 7067 3b73     ken=%s;gnss=gps;
   dd598:	6164 6174 7974 6570 653d 6870 612c 6d6c     datatype=eph,alm
   dd5a8:	612c 7875 4700 5445 2520 2073 5448 5054     ,aux.GET %s HTTP
   dd5b8:	312f 312e 0a0d 6f48 7473 203a 7325 0a0d     /1.1..Host: %s..
   dd5c8:	0a0d 6300 6e6f 656e 7463 6f69 206e 6f74     ...connection to
   dd5d8:	2520 2073 6166 6c69 6465 4100 726c 6165      %s failed.Alrea
   dd5e8:	7964 6820 7661 2065 5047 2053 6966 2c78     dy have GPS fix,
   dd5f8:	7320 696b 7070 6e69 2067 7341 6973 7473      skipping Assist
   dd608:	6f4e 0077 6f4e 6b20 7965 202c 6163 276e     Now.No key, can'
   dd618:	2074 7375 2065 7341 6973 7473 6f4e 0077     t use AssistNow.
   dd628:	6f68 6b6f 722d 7365 6f70 736e 2f65 7325     hook-response/%s
   dd638:	252f 0073 6166 6c69 6465 7420 206f 6c61     /%s.failed to al
   dd648:	6f6c 6163 6574 4120 7373 7369 4e74 776f     locate AssistNow
   dd658:	6f44 6e77 6f6c 6461 6100 7070 752e 6c62     Download.app.ubl
   dd668:	786f 0000                                   ox..

000dd66c <_ZTV9LIS3DHSPI>:
	...
   dd674:	7afd 000d 7aff 000d 7c05 000d 7b3d 000d     .z...z...|..={..
   dd684:	7b7f 000d 7b0d 000d 7b27 000d               .{...{..'{..

000dd690 <_ZTV6LIS3DH>:
	...
   dd6a0:	7be1 000d 40a9 000d 40a9 000d               .{...@...@..

000dd6ac <_ZTVN5spark13CellularClassE>:
	...
   dd6b4:	84fb 000d 84f1 000d 84e7 000d 849d 000d     ................
   dd6c4:	84db 000d 84cf 000d 84c3 000d 84bb 000d     ................
   dd6d4:	84b1 000d 84a7 000d 91bd 000d               ............

000dd6e0 <_ZTV14CellularSignal>:
	...
   dd6e8:	85a9 000d 8609 000d 85ab 000d 864d 000d     ............M...
   dd6f8:	85b1 000d 8619 000d 85dd 000d 86d7 000d     ................
   dd708:	fffc ffff 0000 0000 8701 000d               ............

000dd714 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd71c:	8709 000d 870f 000d 8753 000d 871d 000d     ........S.......
   dd72c:	870b 000d                                   ....

000dd730 <_ZTVN5spark13EthernetClassE>:
	...
   dd738:	8d47 000d 8d3d 000d 8d33 000d 8d29 000d     G...=...3...)...
   dd748:	8d1d 000d 8d11 000d 8d05 000d 8cfd 000d     ................
   dd758:	8cf3 000d 8ce9 000d 91bd 000d               ............

000dd764 <_ZTV7TwoWire>:
	...
   dd76c:	8d65 000d 8daf 000d 8d87 000d 8d67 000d     e...........g...
   dd77c:	8d8f 000d 8d97 000d 8d9f 000d 8da7 000d     ................

000dd78c <_ZTV9IPAddress>:
	...
   dd794:	8ef5 000d 8ee5 000d 8ee7 000d 6162 6475     ............baud
   dd7a4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd7b4:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd7c4:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd7d4:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd7e4:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd7f4:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd804:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd814:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd824:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd834:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd844:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd854:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd864:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd874 <_ZTVN5spark9MeshClassE>:
	...
   dd87c:	9037 000d 902d 000d 9023 000d 9019 000d     7...-...#.......
   dd88c:	900d 000d 9001 000d 8ff5 000d 8fed 000d     ................
   dd89c:	8fe3 000d 8fd9 000d 91bd 000d               ............

000dd8a8 <_ZTVN5spark12NetworkClassE>:
	...
   dd8b0:	9155 000d 915f 000d 9169 000d 9173 000d     U..._...i...s...
   dd8c0:	917d 000d 9189 000d 9195 000d 91a1 000d     }...............
   dd8d0:	91a9 000d 91b3 000d 91bd 000d 616e 006e     ............nan.
   dd8e0:	766f 0066 002e 6e69 0066                    ovf...inf.

000dd8ea <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd8ea:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dd8fa:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd90a:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..
	...

000dd91c <_ZTV11USARTSerial>:
	...
   dd924:	9ce5 000d 9d35 000d 9d43 000d 929d 000d     ....5...C.......
   dd934:	9cf9 000d 9d1b 000d 9d07 000d 9d2f 000d     ............/...
   dd944:	9ce7 000d 9ceb 000d                         ........

000dd94c <_ZTV9USBSerial>:
	...
   dd954:	9ded 000d 9e3d 000d 9e4b 000d 929d 000d     ....=...K.......
   dd964:	9e29 000d 9def 000d 9e05 000d 9e37 000d     )...........7...
   dd974:	9e1b 000d 9de9 000d                         ........

000dd97c <_ZSt7nothrow>:
	...

000dd97d <day_name.4725>:
   dd97d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd98d:	6972 6153 4a74                                   riSat

000dd992 <mon_name.4726>:
   dd992:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd9a2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd9b2:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd9c2:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd9d2:	6425 000a                                   %d..

000dd9d6 <_ctype_>:
   dd9d6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd9e6:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd9f6:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dda06:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dda16:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dda26:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dda36:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dda46:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dda56:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddad8 <__sf_fake_stdin>:
	...

000ddaf8 <__sf_fake_stdout>:
	...

000ddb18 <__sf_fake_stderr>:
	...

000ddb38 <_DAYS_BEFORE_MONTH>:
   ddb38:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddb48:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddb58:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddb68 <DAYS_IN_MONTH>:
   ddb68:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddb78:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb88:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddb98 <__month_lengths>:
   ddb98:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddba8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbb8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddbc8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddbd8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbe8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddbf8:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddc08:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddc18:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddc28:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   ddc38:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   ddc48:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   ddc58:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   ddc68:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   ddc78:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   ddc88:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   ddc98:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   ddca8:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   ddcb8:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   ddcc8:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   ddcd8:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   ddce8:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   ddcf8:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   ddd08:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   ddd18:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   ddd28:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   ddd38:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   ddd48:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   ddd58:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   ddd68:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   ddd78:	3a4d 5325 2520 0070                         M:%S %p.

000ddd80 <_C_time_locale>:
   ddd80:	dc5b 000d dc5f 000d dc63 000d dc67 000d     [..._...c...g...
   ddd90:	dc6b 000d dc6f 000d dc73 000d dc77 000d     k...o...s...w...
   ddda0:	dc7b 000d dc7f 000d dc83 000d dc87 000d     {...............
   dddb0:	dc8b 000d dc93 000d dc9c 000d dca2 000d     ................
   dddc0:	dc6b 000d dca8 000d dcad 000d dcb2 000d     k...............
   dddd0:	dcb9 000d dcc3 000d dccb 000d dcd4 000d     ................
   ddde0:	dcdd 000d dce1 000d dce5 000d dce9 000d     ................
   dddf0:	dced 000d dcf1 000d dcf5 000d dcf9 000d     ................
   dde00:	dd00 000d dd07 000d dd0f 000d dd19 000d     ................
   dde10:	dd22 000d dd29 000d dd32 000d dd3b 000d     "...)...2...;...
   dde20:	dd44 000d ce04 000d dd59 000d dd5c 000d     D.......Y...\...
   dde30:	dc8b 000d dc93 000d dc9c 000d dca2 000d     ................
   dde40:	dc6b 000d dca8 000d dcad 000d dcb2 000d     k...............
   dde50:	dcb9 000d dcc3 000d dccb 000d dcd4 000d     ................
   dde60:	d7c0 000d dd74 000d d5ca 000d d5ca 000d     ....t...........
   dde70:	d5ca 000d d5ca 000d d5ca 000d 5a54 4700     ............TZ.G
   dde80:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dde90:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   ddea0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddeb0:	3a6e 6825 2575 006e                         n:%hu%n.

000ddeb8 <link_const_variable_data_end>:
   ddeb8:	000d56e1 	.word	0x000d56e1
   ddebc:	000d5a71 	.word	0x000d5a71
   ddec0:	000d5cfd 	.word	0x000d5cfd
   ddec4:	000d65d9 	.word	0x000d65d9
   ddec8:	000d65f1 	.word	0x000d65f1
   ddecc:	000d69e9 	.word	0x000d69e9
   dded0:	000d6fd1 	.word	0x000d6fd1
   dded4:	000d734d 	.word	0x000d734d
   dded8:	000d73f5 	.word	0x000d73f5
   ddedc:	000d7ab5 	.word	0x000d7ab5
   ddee0:	000d7ad9 	.word	0x000d7ad9
   ddee4:	000d7af9 	.word	0x000d7af9
   ddee8:	000d7c1b 	.word	0x000d7c1b
   ddeec:	000d7c21 	.word	0x000d7c21
   ddef0:	000d8475 	.word	0x000d8475
   ddef4:	000d8579 	.word	0x000d8579
   ddef8:	000d8d51 	.word	0x000d8d51
   ddefc:	000d8fc9 	.word	0x000d8fc9
   ddf00:	000d9105 	.word	0x000d9105
   ddf04:	000d9289 	.word	0x000d9289
   ddf08:	000d9579 	.word	0x000d9579
   ddf0c:	000d9911 	.word	0x000d9911
   ddf10:	000d9cd1 	.word	0x000d9cd1
   ddf14:	000da1e9 	.word	0x000da1e9
   ddf18:	000da2ad 	.word	0x000da2ad
   ddf1c:	000da331 	.word	0x000da331
   ddf20:	000da3b5 	.word	0x000da3b5

000ddf24 <link_constructors_end>:
	...
