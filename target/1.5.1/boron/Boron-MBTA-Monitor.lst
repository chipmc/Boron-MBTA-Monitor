
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/1.5.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a150  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000de170  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000164  2003dd24  000de98c  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000968  2003de88  2003de88  0002de88  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000deaf0  000deaf0  0001eaf0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000deb1c  000deb1c  0001eb1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00199b6d  00000000  00000000  0001eb20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ecbc  00000000  00000000  001b868d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00034a04  00000000  00000000  001d7349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003d78  00000000  00000000  0020bd4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000074c0  00000000  00000000  0020fac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000488f2  00000000  00000000  00216f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f4de  00000000  00000000  0025f877  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124c17  00000000  00000000  002aed55  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00011bf0  00000000  00000000  003d396c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fa33 	bl	db49c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fa53 	bl	db4e8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd24 	.word	0x2003dd24
   d404c:	000de98c 	.word	0x000de98c
   d4050:	2003de88 	.word	0x2003de88
   d4054:	2003de88 	.word	0x2003de88
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f006 f885 	bl	da16c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000de170 	.word	0x000de170
   d4084:	000de104 	.word	0x000de104

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b9ae 	b.w	d53e8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f837 	bl	d5100 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f006 b82b 	b.w	da0f0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b9af 	b.w	d83fc <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b9b5 	b.w	d840c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b9b3 	b.w	d840c <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 f86c 	bl	d818c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7e0d 	.word	0x000d7e0d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40cc:	4b01      	ldr	r3, [pc, #4]	; (d40d4 <_Z11watchdogISRv+0x8>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	701a      	strb	r2, [r3, #0]
   d40d2:	4770      	bx	lr
   d40d4:	2003df18 	.word	0x2003df18

000d40d8 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d8:	b538      	push	{r3, r4, r5, lr}
   d40da:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40dc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40de:	b128      	cbz	r0, d40ec <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40e0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40e2:	210c      	movs	r1, #12
   d40e4:	f006 f97f 	bl	da3e6 <_ZdlPvj>
            wakeupSource = next;
   d40e8:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40ea:	e7f8      	b.n	d40de <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ec:	4620      	mov	r0, r4
   d40ee:	bd38      	pop	{r3, r4, r5, pc}

000d40f0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40f0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f2:	6803      	ldr	r3, [r0, #0]
   d40f4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40f6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f8:	d904      	bls.n	d4104 <nrf_gpio_pin_port_decode+0x14>
   d40fa:	4a07      	ldr	r2, [pc, #28]	; (d4118 <nrf_gpio_pin_port_decode+0x28>)
   d40fc:	2100      	movs	r1, #0
   d40fe:	200a      	movs	r0, #10
   d4100:	f004 f844 	bl	d818c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4104:	6823      	ldr	r3, [r4, #0]
   d4106:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4108:	bf83      	ittte	hi
   d410a:	f003 031f 	andhi.w	r3, r3, #31
   d410e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4110:	4802      	ldrhi	r0, [pc, #8]	; (d411c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4112:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4116:	bd10      	pop	{r4, pc}
   d4118:	000d7e0d 	.word	0x000d7e0d
   d411c:	50000300 	.word	0x50000300

000d4120 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z9resetFRAM6String+0x14>)
   d4124:	f005 fc3b 	bl	d999e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4128:	b118      	cbz	r0, d4132 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d412a:	4803      	ldr	r0, [pc, #12]	; (d4138 <_Z9resetFRAM6String+0x18>)
   d412c:	f002 fb54 	bl	d67d8 <_ZN6MB85RC5eraseEv>
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dd105 	.word	0x000dd105
   d4138:	2003de98 	.word	0x2003de98

000d413c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d413c:	b508      	push	{r3, lr}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z7sendNow6String+0x14>)
   d4140:	f005 fc2d 	bl	d999e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4146:	4b03      	ldr	r3, [pc, #12]	; (d4154 <_Z7sendNow6String+0x18>)
   d4148:	2203      	movs	r2, #3
   d414a:	701a      	strb	r2, [r3, #0]
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dd105 	.word	0x000dd105
   d4154:	2003dede 	.word	0x2003dede

000d4158 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4158:	b510      	push	{r4, lr}
   d415a:	4b03      	ldr	r3, [pc, #12]	; (d4168 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d415c:	6003      	str	r3, [r0, #0]
   d415e:	4604      	mov	r4, r0
   d4160:	f003 fb70 	bl	d7844 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}
   d4168:	000dcc7c 	.word	0x000dcc7c

000d416c <_ZN17PublishQueueAsyncD0Ev>:
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f7ff fff2 	bl	d4158 <_ZN17PublishQueueAsyncD1Ev>
   d4174:	4620      	mov	r0, r4
   d4176:	2138      	movs	r1, #56	; 0x38
   d4178:	f006 f935 	bl	da3e6 <_ZdlPvj>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4180:	b510      	push	{r4, lr}
   d4182:	4b03      	ldr	r3, [pc, #12]	; (d4190 <_ZN8MB85RC64D1Ev+0x10>)
   d4184:	6003      	str	r3, [r0, #0]
   d4186:	4604      	mov	r4, r0
   d4188:	f002 fb05 	bl	d6796 <_ZN6MB85RCD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}
   d4190:	000dcc60 	.word	0x000dcc60

000d4194 <_ZN8MB85RC64D0Ev>:
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
   d4198:	f7ff fff2 	bl	d4180 <_ZN8MB85RC64D1Ev>
   d419c:	4620      	mov	r0, r4
   d419e:	2110      	movs	r1, #16
   d41a0:	f006 f921 	bl	da3e6 <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f004 f92c 	bl	d840c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ba:	f004 f88f 	bl	d82dc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41be:	b120      	cbz	r0, d41ca <_ZN10CloudClass8syncTimeEv.isra.11+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
    }
   d41c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d41c6:	f004 b8a9 	b.w	d831c <spark_sync_time>
    }
   d41ca:	bd08      	pop	{r3, pc}

000d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ce:	2000      	movs	r0, #0
   d41d0:	f004 f8ac 	bl	d832c <spark_sync_time_pending>
   d41d4:	b128      	cbz	r0, d41e2 <_ZN10CloudClass12syncTimeDoneEv.isra.13+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d6:	f004 f881 	bl	d82dc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41da:	f080 0001 	eor.w	r0, r0, #1
   d41de:	b2c0      	uxtb	r0, r0
   d41e0:	bd08      	pop	{r3, pc}
   d41e2:	2001      	movs	r0, #1
    }
   d41e4:	bd08      	pop	{r3, pc}

000d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41e6:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41e8:	2100      	movs	r1, #0
   d41ea:	4604      	mov	r4, r0
   d41ec:	4608      	mov	r0, r1
   d41ee:	f003 fdad 	bl	d7d4c <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f2:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41f6:	2100      	movs	r1, #0
   d41f8:	2001      	movs	r0, #1
   d41fa:	f003 fda7 	bl	d7d4c <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41fe:	b2e0      	uxtb	r0, r4
   d4200:	bd10      	pop	{r4, pc}

000d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>:
	/**
	 * @brief Returns the latitude in degrees as a float. May be positive or negative.
	 *
	 * Negative values are used for south latitude.
	 */
	float readLatDeg(void) const {
   d4202:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4204:	2100      	movs	r1, #0
   d4206:	b08f      	sub	sp, #60	; 0x3c
   d4208:	4604      	mov	r4, r0
   d420a:	4608      	mov	r0, r1
   d420c:	f003 fd9e 	bl	d7d4c <os_thread_scheduling>
	/**
	 * @brief Get the location (latitude and longitude)
	 */
	TinyGPSLocation getLocation() const {
	    SINGLE_THREADED_BLOCK() {
	    	return location;
   d4210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4212:	466d      	mov	r5, sp
   d4214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4222:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4226:	2100      	movs	r1, #0
   d4228:	2001      	movs	r0, #1
   d422a:	f003 fd8f 	bl	d7d4c <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d422e:	4668      	mov	r0, sp
   d4230:	f001 fe82 	bl	d5f38 <_ZN15TinyGPSLocation3latEv>
   d4234:	ec51 0b10 	vmov	r0, r1, d0
   d4238:	f006 feec 	bl	db014 <__aeabi_d2f>
	}
   d423c:	ee00 0a10 	vmov	s0, r0
   d4240:	b00f      	add	sp, #60	; 0x3c
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>:
	/**
	 * @brief Returns the longitude in degrees as a float. May be positive or negative.
 	 *
	 * Negative values are used for east longitude.
	 */
	float readLonDeg(void) const {
   d4244:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4246:	2100      	movs	r1, #0
   d4248:	b08f      	sub	sp, #60	; 0x3c
   d424a:	4604      	mov	r4, r0
   d424c:	4608      	mov	r0, r1
   d424e:	f003 fd7d 	bl	d7d4c <os_thread_scheduling>
   d4252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4254:	466d      	mov	r5, sp
   d4256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4264:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4268:	2100      	movs	r1, #0
   d426a:	2001      	movs	r0, #1
   d426c:	f003 fd6e 	bl	d7d4c <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4270:	4668      	mov	r0, sp
   d4272:	f001 fe89 	bl	d5f88 <_ZN15TinyGPSLocation3lngEv>
   d4276:	ec51 0b10 	vmov	r0, r1, d0
   d427a:	f006 fecb 	bl	db014 <__aeabi_d2f>
	}
   d427e:	ee00 0a10 	vmov	s0, r0
   d4282:	b00f      	add	sp, #60	; 0x3c
   d4284:	bd30      	pop	{r4, r5, pc}

000d4286 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4286:	2000      	movs	r0, #0
   d4288:	f003 bdf8 	b.w	d7e7c <hal_timer_millis>

000d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d428c:	b508      	push	{r3, lr}
   d428e:	ed2d 8b02 	vpush	{d8}
   d4292:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4296:	b128      	cbz	r0, d42a4 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4298:	3801      	subs	r0, #1
   d429a:	f7ff fff7 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d429e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d42a2:	e001      	b.n	d42a8 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d42a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d42a8:	ecbd 8b02 	vpop	{d8}
   d42ac:	bd08      	pop	{r3, pc}

000d42ae <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42ae:	b40e      	push	{r1, r2, r3}
   d42b0:	b500      	push	{lr}
   d42b2:	b08c      	sub	sp, #48	; 0x30
   d42b4:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42b6:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42b8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d42bc:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42be:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42c2:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c4:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42c6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c8:	aa04      	add	r2, sp, #16
   d42ca:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42cc:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42ce:	f003 ff65 	bl	d819c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d42d2:	b00c      	add	sp, #48	; 0x30
   d42d4:	f85d eb04 	ldr.w	lr, [sp], #4
   d42d8:	b003      	add	sp, #12
   d42da:	4770      	bx	lr

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d42fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42fc:	b092      	sub	sp, #72	; 0x48
   d42fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4300:	b923      	cbnz	r3, d430c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4302:	4919      	ldr	r1, [pc, #100]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4304:	a802      	add	r0, sp, #8
   d4306:	f007 fb77 	bl	db9f8 <strcpy>
   d430a:	e017      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d430c:	4608      	mov	r0, r1
   d430e:	f006 ff0d 	bl	db12c <atoi>
   d4312:	28c8      	cmp	r0, #200	; 0xc8
   d4314:	d004      	beq.n	d4320 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4316:	4620      	mov	r0, r4
   d4318:	f006 ff08 	bl	db12c <atoi>
   d431c:	28c9      	cmp	r0, #201	; 0xc9
   d431e:	d119      	bne.n	d4354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4320:	4912      	ldr	r1, [pc, #72]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f007 fb68 	bl	db9f8 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4328:	f005 fd73 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d432c:	4b10      	ldr	r3, [pc, #64]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432e:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4330:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4332:	2201      	movs	r2, #1
   d4334:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4338:	2200      	movs	r2, #0
   d433a:	701a      	strb	r2, [r3, #0]
   d433c:	4b0f      	ldr	r3, [pc, #60]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d433e:	4910      	ldr	r1, [pc, #64]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	4810      	ldr	r0, [pc, #64]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4344:	2200      	movs	r2, #0
   d4346:	f88d 2000 	strb.w	r2, [sp]
   d434a:	aa02      	add	r2, sp, #8
   d434c:	f7ff ffc6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4350:	b012      	add	sp, #72	; 0x48
   d4352:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4354:	4620      	mov	r0, r4
   d4356:	f006 fee9 	bl	db12c <atoi>
   d435a:	4a0b      	ldr	r2, [pc, #44]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	4603      	mov	r3, r0
   d435e:	2140      	movs	r1, #64	; 0x40
   d4360:	a802      	add	r0, sp, #8
   d4362:	f004 f873 	bl	d844c <snprintf>
   d4366:	e7e9      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4368:	000dcce0 	.word	0x000dcce0
   d436c:	000dccf5 	.word	0x000dccf5
   d4370:	2003e02c 	.word	0x2003e02c
   d4374:	2003dedd 	.word	0x2003dedd
   d4378:	2003dfd0 	.word	0x2003dfd0
   d437c:	2003dec4 	.word	0x2003dec4
   d4380:	000dcce8 	.word	0x000dcce8
   d4384:	2003dff0 	.word	0x2003dff0
   d4388:	000dcd07 	.word	0x000dcd07

000d438c <_Z12hardResetNow6String>:
  else return 0;
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d438c:	b513      	push	{r0, r1, r4, lr}
   d438e:	490b      	ldr	r1, [pc, #44]	; (d43bc <_Z12hardResetNow6String+0x30>)
   d4390:	f005 fb05 	bl	d999e <_ZNK6String6equalsEPKc>
   d4394:	2400      	movs	r4, #0
  if (command == "1")
   d4396:	b178      	cbz	r0, d43b8 <_Z12hardResetNow6String+0x2c>
   d4398:	4b09      	ldr	r3, [pc, #36]	; (d43c0 <_Z12hardResetNow6String+0x34>)
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d439a:	4a0a      	ldr	r2, [pc, #40]	; (d43c4 <_Z12hardResetNow6String+0x38>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d439c:	781b      	ldrb	r3, [r3, #0]
   d439e:	490a      	ldr	r1, [pc, #40]	; (d43c8 <_Z12hardResetNow6String+0x3c>)
   d43a0:	f88d 4000 	strb.w	r4, [sp]
   d43a4:	4809      	ldr	r0, [pc, #36]	; (d43cc <_Z12hardResetNow6String+0x40>)
   d43a6:	f7ff ff99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    rtc.setAlarm(10);
   d43aa:	4623      	mov	r3, r4
   d43ac:	2201      	movs	r2, #1
   d43ae:	210a      	movs	r1, #10
   d43b0:	4807      	ldr	r0, [pc, #28]	; (d43d0 <_Z12hardResetNow6String+0x44>)
   d43b2:	f002 ff2a 	bl	d720a <_ZN8MCP794108setAlarmEibi>
   d43b6:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d43b8:	b002      	add	sp, #8
   d43ba:	bd10      	pop	{r4, pc}
   d43bc:	000dd105 	.word	0x000dd105
   d43c0:	2003dec4 	.word	0x2003dec4
   d43c4:	000dcd24 	.word	0x000dcd24
   d43c8:	000dcf86 	.word	0x000dcf86
   d43cc:	2003dff0 	.word	0x2003dff0
   d43d0:	2003dea8 	.word	0x2003dea8

000d43d4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d6:	491a      	ldr	r1, [pc, #104]	; (d4440 <_Z14setverboseMode6String+0x6c>)
   d43d8:	4604      	mov	r4, r0
   d43da:	f005 fae0 	bl	d999e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43de:	4605      	mov	r5, r0
   d43e0:	b1a0      	cbz	r0, d440c <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
   d43e2:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d43e4:	2401      	movs	r4, #1
   d43e6:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d43e8:	4b17      	ldr	r3, [pc, #92]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d43ea:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ec:	f003 ff76 	bl	d82dc <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f0:	b908      	cbnz	r0, d43f6 <_Z14setverboseMode6String+0x22>
    return 1;
   d43f2:	2001      	movs	r0, #1
   d43f4:	e022      	b.n	d443c <_Z14setverboseMode6String+0x68>
   d43f6:	4b15      	ldr	r3, [pc, #84]	; (d444c <_Z14setverboseMode6String+0x78>)
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f8:	4915      	ldr	r1, [pc, #84]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d43fa:	781b      	ldrb	r3, [r3, #0]
   d43fc:	4815      	ldr	r0, [pc, #84]	; (d4454 <_Z14setverboseMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d43fe:	2200      	movs	r2, #0
   d4400:	f88d 2000 	strb.w	r2, [sp]
   d4404:	4a14      	ldr	r2, [pc, #80]	; (d4458 <_Z14setverboseMode6String+0x84>)
   d4406:	f7ff ff69 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d440a:	e7f2      	b.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d440c:	4913      	ldr	r1, [pc, #76]	; (d445c <_Z14setverboseMode6String+0x88>)
   d440e:	4620      	mov	r0, r4
   d4410:	f005 fac5 	bl	d999e <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4414:	b190      	cbz	r0, d443c <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
   d4416:	4b0b      	ldr	r3, [pc, #44]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d4418:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d441a:	4b0b      	ldr	r3, [pc, #44]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d441c:	2401      	movs	r4, #1
   d441e:	701c      	strb	r4, [r3, #0]
   d4420:	f003 ff5c 	bl	d82dc <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	2800      	cmp	r0, #0
   d4426:	d0e4      	beq.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d4428:	4b08      	ldr	r3, [pc, #32]	; (d444c <_Z14setverboseMode6String+0x78>)
   d442a:	4a0d      	ldr	r2, [pc, #52]	; (d4460 <_Z14setverboseMode6String+0x8c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d442c:	781b      	ldrb	r3, [r3, #0]
   d442e:	4908      	ldr	r1, [pc, #32]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d4430:	f88d 5000 	strb.w	r5, [sp]
   d4434:	4807      	ldr	r0, [pc, #28]	; (d4454 <_Z14setverboseMode6String+0x80>)
   d4436:	f7ff ff51 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d443a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d443c:	b003      	add	sp, #12
   d443e:	bd30      	pop	{r4, r5, pc}
   d4440:	000dd105 	.word	0x000dd105
   d4444:	2003e02c 	.word	0x2003e02c
   d4448:	2003dedd 	.word	0x2003dedd
   d444c:	2003dec4 	.word	0x2003dec4
   d4450:	000dcd5f 	.word	0x000dcd5f
   d4454:	2003dff0 	.word	0x2003dff0
   d4458:	000dcd3c 	.word	0x000dcd3c
   d445c:	000dcd4d 	.word	0x000dcd4d
   d4460:	000dcd4f 	.word	0x000dcd4f
   d4464:	00000000 	.word	0x00000000

000d4468 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d446c:	b0cb      	sub	sp, #300	; 0x12c
   d446e:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4470:	f7ff fea2 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4474:	f7ff ff07 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4478:	2700      	movs	r7, #0
   d447a:	4606      	mov	r6, r0
   d447c:	f247 582f 	movw	r8, #29999	; 0x752f
   d4480:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4484:	f7ff feff 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4488:	1b80      	subs	r0, r0, r6
   d448a:	eb61 0107 	sbc.w	r1, r1, r7
   d448e:	4589      	cmp	r9, r1
   d4490:	bf08      	it	eq
   d4492:	4580      	cmpeq	r8, r0
   d4494:	d305      	bcc.n	d44a2 <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4496:	f7ff fe99 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d449a:	b910      	cbnz	r0, d44a2 <_Z11setTimeZone6String+0x3a>
            spark_process();
   d449c:	f003 ff06 	bl	d82ac <spark_process>
   d44a0:	e7f0      	b.n	d4484 <_Z11setTimeZone6String+0x1c>
   d44a2:	f7ff fe93 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44a6:	220a      	movs	r2, #10
   d44a8:	a905      	add	r1, sp, #20
   d44aa:	6820      	ldr	r0, [r4, #0]
   d44ac:	f008 f892 	bl	dc5d4 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44b0:	f100 030c 	add.w	r3, r0, #12
   d44b4:	b2db      	uxtb	r3, r3
   d44b6:	2b18      	cmp	r3, #24
   d44b8:	d849      	bhi.n	d454e <_Z11setTimeZone6String+0xe6>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44ba:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44bc:	ee07 5a90 	vmov	s15, r5
   d44c0:	4b27      	ldr	r3, [pc, #156]	; (d4560 <_Z11setTimeZone6String+0xf8>)
   d44c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44c6:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44c8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44cc:	f005 fb7a 	bl	d9bc4 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44d0:	4b24      	ldr	r3, [pc, #144]	; (d4564 <_Z11setTimeZone6String+0xfc>)
   d44d2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44d4:	f005 fb68 	bl	d9ba8 <_ZN9TimeClass5localEv>
   d44d8:	4606      	mov	r6, r0
   d44da:	f005 fc9a 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d44de:	1a30      	subs	r0, r6, r0
   d44e0:	f006 fa3a 	bl	da958 <__aeabi_i2d>
   d44e4:	a31c      	add	r3, pc, #112	; (adr r3, d4558 <_Z11setTimeZone6String+0xf0>)
   d44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ea:	f006 fbc5 	bl	dac78 <__aeabi_ddiv>
   d44ee:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <_Z11setTimeZone6String+0x100>)
   d44f0:	e9cd 0100 	strd	r0, r1, [sp]
   d44f4:	210a      	movs	r1, #10
   d44f6:	481d      	ldr	r0, [pc, #116]	; (d456c <_Z11setTimeZone6String+0x104>)
   d44f8:	f003 ffa8 	bl	d844c <snprintf>
   d44fc:	f003 feee 	bl	d82dc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4500:	b318      	cbz	r0, d454a <_Z11setTimeZone6String+0xe2>
   d4502:	4e1b      	ldr	r6, [pc, #108]	; (d4570 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4504:	4a1b      	ldr	r2, [pc, #108]	; (d4574 <_Z11setTimeZone6String+0x10c>)
   d4506:	462b      	mov	r3, r5
   d4508:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d450c:	2500      	movs	r5, #0
   d450e:	a80a      	add	r0, sp, #40	; 0x28
   d4510:	f003 ff9c 	bl	d844c <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4514:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d4518:	f88d 5000 	strb.w	r5, [sp]
   d451c:	aa0a      	add	r2, sp, #40	; 0x28
   d451e:	4817      	ldr	r0, [pc, #92]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4520:	f7ff fedc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4524:	f005 fc75 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d4528:	4601      	mov	r1, r0
   d452a:	a806      	add	r0, sp, #24
   d452c:	f005 fb9a 	bl	d9c64 <_ZN9TimeClass7timeStrEl>
   d4530:	9b06      	ldr	r3, [sp, #24]
   d4532:	9303      	str	r3, [sp, #12]
   d4534:	9a03      	ldr	r2, [sp, #12]
   d4536:	7833      	ldrb	r3, [r6, #0]
   d4538:	490f      	ldr	r1, [pc, #60]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d453a:	f88d 5000 	strb.w	r5, [sp]
   d453e:	480f      	ldr	r0, [pc, #60]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4540:	f7ff fecc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4544:	a806      	add	r0, sp, #24
   d4546:	f005 f9b6 	bl	d98b6 <_ZN6StringD1Ev>
  }

  return 1;
   d454a:	4620      	mov	r0, r4
   d454c:	e000      	b.n	d4550 <_Z11setTimeZone6String+0xe8>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d454e:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
   d4550:	b04b      	add	sp, #300	; 0x12c
   d4552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4556:	bf00      	nop
   d4558:	00000000 	.word	0x00000000
   d455c:	40ac2000 	.word	0x40ac2000
   d4560:	2003e02c 	.word	0x2003e02c
   d4564:	2003dedd 	.word	0x2003dedd
   d4568:	000dcd64 	.word	0x000dcd64
   d456c:	2003de8c 	.word	0x2003de8c
   d4570:	2003dec4 	.word	0x2003dec4
   d4574:	000dcd6e 	.word	0x000dcd6e
   d4578:	000dcd82 	.word	0x000dcd82
   d457c:	2003dff0 	.word	0x2003dff0

000d4580 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4580:	b530      	push	{r4, r5, lr}
   d4582:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4584:	220a      	movs	r2, #10
   d4586:	a903      	add	r1, sp, #12
   d4588:	6800      	ldr	r0, [r0, #0]
   d458a:	f008 f823 	bl	dc5d4 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d458e:	b2c3      	uxtb	r3, r0
   d4590:	1e5a      	subs	r2, r3, #1
   d4592:	2a3b      	cmp	r2, #59	; 0x3b
   d4594:	d81e      	bhi.n	d45d4 <_Z17setSampleInterval6String+0x54>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d4596:	4a12      	ldr	r2, [pc, #72]	; (d45e0 <_Z17setSampleInterval6String+0x60>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d4598:	4d12      	ldr	r5, [pc, #72]	; (d45e4 <_Z17setSampleInterval6String+0x64>)
  systemStatusWriteNeeded = true;
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d459a:	4813      	ldr	r0, [pc, #76]	; (d45e8 <_Z17setSampleInterval6String+0x68>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d459c:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d459e:	2401      	movs	r4, #1
   d45a0:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45a2:	210c      	movs	r1, #12
   d45a4:	4a11      	ldr	r2, [pc, #68]	; (d45ec <_Z17setSampleInterval6String+0x6c>)
   d45a6:	f003 ff51 	bl	d844c <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45aa:	79ab      	ldrb	r3, [r5, #6]
   d45ac:	4a10      	ldr	r2, [pc, #64]	; (d45f0 <_Z17setSampleInterval6String+0x70>)
   d45ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45b2:	a804      	add	r0, sp, #16
   d45b4:	f003 ff4a 	bl	d844c <snprintf>
   d45b8:	f003 fe90 	bl	d82dc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45bc:	b160      	cbz	r0, d45d8 <_Z17setSampleInterval6String+0x58>
   d45be:	4b0d      	ldr	r3, [pc, #52]	; (d45f4 <_Z17setSampleInterval6String+0x74>)
    publishQueue.publish("Interval", data, PRIVATE);
   d45c0:	490d      	ldr	r1, [pc, #52]	; (d45f8 <_Z17setSampleInterval6String+0x78>)
   d45c2:	781b      	ldrb	r3, [r3, #0]
   d45c4:	480d      	ldr	r0, [pc, #52]	; (d45fc <_Z17setSampleInterval6String+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d45c6:	2200      	movs	r2, #0
   d45c8:	f88d 2000 	strb.w	r2, [sp]
   d45cc:	aa04      	add	r2, sp, #16
   d45ce:	f7ff fe85 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45d2:	e001      	b.n	d45d8 <_Z17setSampleInterval6String+0x58>

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45d4:	2000      	movs	r0, #0
   d45d6:	e000      	b.n	d45da <_Z17setSampleInterval6String+0x5a>
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
  if (Particle.connected()) {
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
   d45d8:	4620      	mov	r0, r4
}
   d45da:	b045      	add	sp, #276	; 0x114
   d45dc:	bd30      	pop	{r4, r5, pc}
   d45de:	bf00      	nop
   d45e0:	2003dedd 	.word	0x2003dedd
   d45e4:	2003e02c 	.word	0x2003e02c
   d45e8:	2003ddbd 	.word	0x2003ddbd
   d45ec:	000dcd9e 	.word	0x000dcd9e
   d45f0:	000dcd87 	.word	0x000dcd87
   d45f4:	2003dec4 	.word	0x2003dec4
   d45f8:	000dcfd8 	.word	0x000dcfd8
   d45fc:	2003dff0 	.word	0x2003dff0

000d4600 <_Z9sendEventv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d4600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4604:	4b23      	ldr	r3, [pc, #140]	; (d4694 <_Z9sendEventv+0x94>)
   d4606:	4c24      	ldr	r4, [pc, #144]	; (d4698 <_Z9sendEventv+0x98>)
   d4608:	689d      	ldr	r5, [r3, #8]
   d460a:	69a2      	ldr	r2, [r4, #24]
   d460c:	691b      	ldr	r3, [r3, #16]
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d460e:	b0d3      	sub	sp, #332	; 0x14c
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4610:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4614:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d4618:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d461c:	9311      	str	r3, [sp, #68]	; 0x44
   d461e:	9210      	str	r2, [sp, #64]	; 0x40
   d4620:	f005 fbf7 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d4624:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d4628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d462c:	ed94 7b08 	vldr	d7, [r4, #32]
   d4630:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d4632:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4634:	9308      	str	r3, [sp, #32]
   d4636:	4b19      	ldr	r3, [pc, #100]	; (d469c <_Z9sendEventv+0x9c>)
   d4638:	900a      	str	r0, [sp, #40]	; 0x28
   d463a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d463e:	9209      	str	r2, [sp, #36]	; 0x24
   d4640:	9307      	str	r3, [sp, #28]
   d4642:	9506      	str	r5, [sp, #24]
   d4644:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d4648:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d464c:	e9cd 6700 	strd	r6, r7, [sp]
   d4650:	4a13      	ldr	r2, [pc, #76]	; (d46a0 <_Z9sendEventv+0xa0>)
   d4652:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4656:	a812      	add	r0, sp, #72	; 0x48
   d4658:	f003 fef8 	bl	d844c <snprintf>
   d465c:	4b11      	ldr	r3, [pc, #68]	; (d46a4 <_Z9sendEventv+0xa4>)
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d465e:	4912      	ldr	r1, [pc, #72]	; (d46a8 <_Z9sendEventv+0xa8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4660:	781b      	ldrb	r3, [r3, #0]
   d4662:	4812      	ldr	r0, [pc, #72]	; (d46ac <_Z9sendEventv+0xac>)
   d4664:	2200      	movs	r2, #0
   d4666:	f88d 2000 	strb.w	r2, [sp]
   d466a:	aa12      	add	r2, sp, #72	; 0x48
   d466c:	f7ff fe36 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4670:	4b0f      	ldr	r3, [pc, #60]	; (d46b0 <_Z9sendEventv+0xb0>)
   d4672:	2201      	movs	r2, #1
   d4674:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4676:	f003 fbd1 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d467a:	4b0e      	ldr	r3, [pc, #56]	; (d46b4 <_Z9sendEventv+0xb4>)
   d467c:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d467e:	f005 fbcf 	bl	d9e20 <_ZN9TimeClass4hourEv>
   d4682:	4b0d      	ldr	r3, [pc, #52]	; (d46b8 <_Z9sendEventv+0xb8>)
   d4684:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d4686:	f005 fbd5 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d468a:	4b0c      	ldr	r3, [pc, #48]	; (d46bc <_Z9sendEventv+0xbc>)
   d468c:	6018      	str	r0, [r3, #0]
}
   d468e:	b053      	add	sp, #332	; 0x14c
   d4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4694:	2003e02c 	.word	0x2003e02c
   d4698:	2003dfa0 	.word	0x2003dfa0
   d469c:	2003dec7 	.word	0x2003dec7
   d46a0:	000dcda9 	.word	0x000dcda9
   d46a4:	2003dec4 	.word	0x2003dec4
   d46a8:	000dce39 	.word	0x000dce39
   d46ac:	2003dff0 	.word	0x2003dff0
   d46b0:	2003dfd0 	.word	0x2003dfd0
   d46b4:	2003ded8 	.word	0x2003ded8
   d46b8:	2003dee4 	.word	0x2003dee4
   d46bc:	2003df98 	.word	0x2003df98

000d46c0 <_Z7getTempPh>:
  getBatteryContext();                                               // What is the battery up to?
  systemStatusWriteNeeded=true;
  currentCountsWriteNeeded=true;
}

double getTemp(uint8_t addr[8]) {
   d46c0:	b538      	push	{r3, r4, r5, lr}
   d46c2:	ed2d 8b02 	vpush	{d8}
   d46c6:	4605      	mov	r5, r0
  double _temp;
  int   i = 0;
   d46c8:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
   d46ca:	481b      	ldr	r0, [pc, #108]	; (d4738 <_Z7getTempPh+0x78>)
   d46cc:	2200      	movs	r2, #0
   d46ce:	4629      	mov	r1, r5
   d46d0:	f001 feee 	bl	d64b0 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46d4:	4818      	ldr	r0, [pc, #96]	; (d4738 <_Z7getTempPh+0x78>)
double getTemp(uint8_t addr[8]) {
  double _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
   d46d6:	eeb0 8a40 	vmov.f32	s16, s0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46da:	f001 ffc3 	bl	d6664 <_ZN7DS18B208crcCheckEv>
   d46de:	b950      	cbnz	r0, d46f6 <_Z7getTempPh+0x36>
   d46e0:	3401      	adds	r4, #1
   d46e2:	2c04      	cmp	r4, #4
   d46e4:	d1f1      	bne.n	d46ca <_Z7getTempPh+0xa>
    _temp = ds18b20.convertToFahrenheit(_temp);
    Serial.println(_temp);
  }
  else {
    _temp = NAN;
    Serial.println("Invalid reading");
   d46e6:	f005 fcbf 	bl	da068 <_Z16_fetch_usbserialv>
   d46ea:	4914      	ldr	r1, [pc, #80]	; (d473c <_Z7getTempPh+0x7c>)
   d46ec:	f004 feee 	bl	d94cc <_ZN5Print7printlnEPKc>
   d46f0:	ed9f 8b0f 	vldr	d8, [pc, #60]	; d4730 <_Z7getTempPh+0x70>
  }

  return _temp;
   d46f4:	e015      	b.n	d4722 <_Z7getTempPh+0x62>

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d46f6:	2c03      	cmp	r4, #3
   d46f8:	d0f5      	beq.n	d46e6 <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d46fa:	eeb0 0a48 	vmov.f32	s0, s16
   d46fe:	480e      	ldr	r0, [pc, #56]	; (d4738 <_Z7getTempPh+0x78>)
   d4700:	f001 ff96 	bl	d6630 <_ZN7DS18B2019convertToFahrenheitEf>
   d4704:	ee10 0a10 	vmov	r0, s0
   d4708:	f006 f938 	bl	da97c <__aeabi_f2d>
   d470c:	ec41 0b18 	vmov	d8, r0, r1
    Serial.println(_temp);
   d4710:	f005 fcaa 	bl	da068 <_Z16_fetch_usbserialv>
   d4714:	eeb0 0a48 	vmov.f32	s0, s16
   d4718:	eef0 0a68 	vmov.f32	s1, s17
   d471c:	2102      	movs	r1, #2
   d471e:	f004 ffbd 	bl	d969c <_ZN5Print7printlnEdi>
    _temp = NAN;
    Serial.println("Invalid reading");
  }

  return _temp;
}
   d4722:	eeb0 0a48 	vmov.f32	s0, s16
   d4726:	eef0 0a68 	vmov.f32	s1, s17
   d472a:	ecbd 8b02 	vpop	{d8}
   d472e:	bd38      	pop	{r3, r4, r5, pc}
   d4730:	00000000 	.word	0x00000000
   d4734:	7ff80000 	.word	0x7ff80000
   d4738:	2003dfd4 	.word	0x2003dfd4
   d473c:	000dce54 	.word	0x000dce54

000d4740 <_Z17getSignalStrengthv>:

void getSignalStrength() {
   d4740:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4742:	4d19      	ldr	r5, [pc, #100]	; (d47a8 <_Z17getSignalStrengthv+0x68>)
   d4744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  }

  return _temp;
}

void getSignalStrength() {
   d4746:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4748:	ac04      	add	r4, sp, #16
   d474a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d474c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d474e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4750:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4754:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4758:	4914      	ldr	r1, [pc, #80]	; (d47ac <_Z17getSignalStrengthv+0x6c>)
   d475a:	a80e      	add	r0, sp, #56	; 0x38
   d475c:	f003 ff28 	bl	d85b0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4760:	a80e      	add	r0, sp, #56	; 0x38
   d4762:	f003 ff78 	bl	d8656 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4766:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4768:	a80e      	add	r0, sp, #56	; 0x38
   d476a:	f003 ffc5 	bl	d86f8 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d476e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4770:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4774:	f003 ffa6 	bl	d86c4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4778:	ab18      	add	r3, sp, #96	; 0x60
   d477a:	ee10 0a10 	vmov	r0, s0
   d477e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4782:	f006 f8fb 	bl	da97c <__aeabi_f2d>
   d4786:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d478a:	4628      	mov	r0, r5
   d478c:	f006 f8f6 	bl	da97c <__aeabi_f2d>
   d4790:	e9cd 0100 	strd	r0, r1, [sp]
   d4794:	4a06      	ldr	r2, [pc, #24]	; (d47b0 <_Z17getSignalStrengthv+0x70>)
   d4796:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d479a:	4806      	ldr	r0, [pc, #24]	; (d47b4 <_Z17getSignalStrengthv+0x74>)
   d479c:	2140      	movs	r1, #64	; 0x40
   d479e:	f003 fe55 	bl	d844c <snprintf>
}
   d47a2:	b019      	add	sp, #100	; 0x64
   d47a4:	bd30      	pop	{r4, r5, pc}
   d47a6:	bf00      	nop
   d47a8:	000dcc9c 	.word	0x000dcc9c
   d47ac:	2003e244 	.word	0x2003e244
   d47b0:	000dce64 	.word	0x000dce64
   d47b4:	2003df4c 	.word	0x2003df4c

000d47b8 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d47b8:	b537      	push	{r0, r1, r2, r4, r5, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47ba:	4d16      	ldr	r5, [pc, #88]	; (d4814 <_Z11petWatchdogv+0x5c>)
   d47bc:	682a      	ldr	r2, [r5, #0]
   d47be:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47c2:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47c6:	a802      	add	r0, sp, #8
   d47c8:	f003 031f 	and.w	r3, r3, #31
   d47cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47d0:	f840 3d08 	str.w	r3, [r0, #-8]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47d4:	f7ff fc8c 	bl	d40f0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47d8:	9b00      	ldr	r3, [sp, #0]
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47da:	682a      	ldr	r2, [r5, #0]
   d47dc:	2401      	movs	r4, #1
   d47de:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d47e2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d47e6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47ea:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47ee:	a802      	add	r0, sp, #8
   d47f0:	f003 031f 	and.w	r3, r3, #31
   d47f4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47f8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47fc:	f7ff fc78 	bl	d40f0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4800:	9b01      	ldr	r3, [sp, #4]
   d4802:	409c      	lsls	r4, r3
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4804:	4b04      	ldr	r3, [pc, #16]	; (d4818 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4806:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d480a:	2200      	movs	r2, #0
   d480c:	701a      	strb	r2, [r3, #0]
}
   d480e:	b003      	add	sp, #12
   d4810:	bd30      	pop	{r4, r5, pc}
   d4812:	bf00      	nop
   d4814:	2003df48 	.word	0x2003df48
   d4818:	2003df18 	.word	0x2003df18

000d481c <_Z14setPowerConfigv>:


// Power Management function
int setPowerConfig() {
   d481c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d481e:	2420      	movs	r4, #32
   d4820:	b090      	sub	sp, #64	; 0x40
   d4822:	4622      	mov	r2, r4
   d4824:	2100      	movs	r1, #0
   d4826:	4668      	mov	r0, sp
   d4828:	f006 fe5e 	bl	db4e8 <memset>
   d482c:	4622      	mov	r2, r4
   d482e:	2100      	movs	r1, #0
   d4830:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4834:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4838:	f006 fe56 	bl	db4e8 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d483c:	2100      	movs	r1, #0
   d483e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4842:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4846:	f003 fd17 	bl	d8278 <system_power_management_set_config>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d484a:	f44f 7361 	mov.w	r3, #900	; 0x384
   d484e:	f8ad 3008 	strh.w	r3, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4852:	f8ad 300a 	strh.w	r3, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4856:	f241 0310 	movw	r3, #4112	; 0x1010
   d485a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d485e:	9b00      	ldr	r3, [sp, #0]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4860:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4868:	2100      	movs	r1, #0
   d486a:	4668      	mov	r0, sp

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d486c:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4870:	9300      	str	r3, [sp, #0]
   d4872:	f003 fd01 	bl	d8278 <system_power_management_set_config>
      .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
      .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}
   d4876:	b010      	add	sp, #64	; 0x40
   d4878:	bd10      	pop	{r4, pc}
	...

000d487c <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4880:	481d      	ldr	r0, [pc, #116]	; (d48f8 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4882:	4d1e      	ldr	r5, [pc, #120]	; (d48fc <_Z17connectToParticlev+0x80>)
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	2300      	movs	r3, #0
   d4888:	461a      	mov	r2, r3
   d488a:	4619      	mov	r1, r3
   d488c:	f003 fd86 	bl	d839c <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4890:	f003 fd14 	bl	d82bc <spark_cloud_flag_connect>
   d4894:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4898:	f240 36e7 	movw	r6, #999	; 0x3e7
   d489c:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d489e:	f7ff fcf2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48a2:	f04f 0900 	mov.w	r9, #0
   d48a6:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48a8:	f7ff fced 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48ac:	ebb0 0008 	subs.w	r0, r0, r8
   d48b0:	eb61 0109 	sbc.w	r1, r1, r9
   d48b4:	428f      	cmp	r7, r1
   d48b6:	bf08      	it	eq
   d48b8:	4286      	cmpeq	r6, r0
   d48ba:	d305      	bcc.n	d48c8 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48bc:	f003 fd0e 	bl	d82dc <spark_cloud_flag_connected>
   d48c0:	b910      	cbnz	r0, d48c8 <_Z17connectToParticlev+0x4c>
            spark_process();
   d48c2:	f003 fcf3 	bl	d82ac <spark_process>
   d48c6:	e7ef      	b.n	d48a8 <_Z17connectToParticlev+0x2c>
   d48c8:	f003 fd08 	bl	d82dc <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48cc:	b158      	cbz	r0, d48e6 <_Z17connectToParticlev+0x6a>
   d48ce:	f003 fd05 	bl	d82dc <spark_cloud_flag_connected>

    Particle.process();
  }
  if (Particle.connected()) {
   d48d2:	b130      	cbz	r0, d48e2 <_Z17connectToParticlev+0x66>
    sysStatus.connectedStatus = true;
   d48d4:	4a0a      	ldr	r2, [pc, #40]	; (d4900 <_Z17connectToParticlev+0x84>)
   d48d6:	2301      	movs	r3, #1
   d48d8:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d48da:	4a0a      	ldr	r2, [pc, #40]	; (d4904 <_Z17connectToParticlev+0x88>)
   d48dc:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d48de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d48e6:	f003 fa99 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48ea:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48ec:	f003 fcde 	bl	d82ac <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48f0:	3c01      	subs	r4, #1
   d48f2:	d0ec      	beq.n	d48ce <_Z17connectToParticlev+0x52>
   d48f4:	e7d3      	b.n	d489e <_Z17connectToParticlev+0x22>
   d48f6:	bf00      	nop
   d48f8:	2003e244 	.word	0x2003e244
   d48fc:	2003e5f0 	.word	0x2003e5f0
   d4900:	2003e02c 	.word	0x2003e02c
   d4904:	2003dedd 	.word	0x2003dedd

000d4908 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4908:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d490a:	f003 fce7 	bl	d82dc <spark_cloud_flag_connected>
  return !Particle.connected();
   d490e:	f080 0001 	eor.w	r0, r0, #1
}
   d4912:	b2c0      	uxtb	r0, r0
   d4914:	bd08      	pop	{r3, pc}
	...

000d4918 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d491a:	f003 fcd7 	bl	d82cc <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d491e:	f7ff fcb2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4922:	2500      	movs	r5, #0
   d4924:	4604      	mov	r4, r0
   d4926:	f643 2697 	movw	r6, #14999	; 0x3a97
   d492a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d492c:	f7ff fcab 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4930:	1b00      	subs	r0, r0, r4
   d4932:	eb61 0105 	sbc.w	r1, r1, r5
   d4936:	428f      	cmp	r7, r1
   d4938:	bf08      	it	eq
   d493a:	4286      	cmpeq	r6, r0
   d493c:	d305      	bcc.n	d494a <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d493e:	f7ff ffe3 	bl	d4908 <_Z12notConnectedv>
   d4942:	b910      	cbnz	r0, d494a <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4944:	f003 fcb2 	bl	d82ac <spark_process>
   d4948:	e7f0      	b.n	d492c <_Z22disconnectFromParticlev+0x14>
   d494a:	f7ff ffdd 	bl	d4908 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d494e:	4809      	ldr	r0, [pc, #36]	; (d4974 <_Z22disconnectFromParticlev+0x5c>)
   d4950:	2300      	movs	r3, #0
   d4952:	4619      	mov	r1, r3
   d4954:	461a      	mov	r2, r3
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f003 fd28 	bl	d83ac <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d495c:	4b06      	ldr	r3, [pc, #24]	; (d4978 <_Z22disconnectFromParticlev+0x60>)
   d495e:	2200      	movs	r2, #0
   d4960:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4962:	4b06      	ldr	r3, [pc, #24]	; (d497c <_Z22disconnectFromParticlev+0x64>)
   d4964:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d496a:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d496c:	f003 fd96 	bl	d849c <delay>
  return true;
}
   d4970:	4620      	mov	r0, r4
   d4972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4974:	2003e244 	.word	0x2003e244
   d4978:	2003e02c 	.word	0x2003e02c
   d497c:	2003dedd 	.word	0x2003dedd

000d4980 <_Z22publishStateTransitionv>:

  return 1;
}

void publishStateTransition(void)
{
   d4980:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4982:	4d13      	ldr	r5, [pc, #76]	; (d49d0 <_Z22publishStateTransitionv+0x50>)
   d4984:	4c13      	ldr	r4, [pc, #76]	; (d49d4 <_Z22publishStateTransitionv+0x54>)
   d4986:	4914      	ldr	r1, [pc, #80]	; (d49d8 <_Z22publishStateTransitionv+0x58>)
   d4988:	782a      	ldrb	r2, [r5, #0]
   d498a:	7820      	ldrb	r0, [r4, #0]

  return 1;
}

void publishStateTransition(void)
{
   d498c:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d498e:	230e      	movs	r3, #14
   d4990:	fb03 1202 	mla	r2, r3, r2, r1
   d4994:	9200      	str	r2, [sp, #0]
   d4996:	fb03 1300 	mla	r3, r3, r0, r1
   d499a:	4a10      	ldr	r2, [pc, #64]	; (d49dc <_Z22publishStateTransitionv+0x5c>)
   d499c:	2128      	movs	r1, #40	; 0x28
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f003 fd54 	bl	d844c <snprintf>
  oldState = state;
   d49a4:	782b      	ldrb	r3, [r5, #0]
   d49a6:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a8:	f003 fc98 	bl	d82dc <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49ac:	b148      	cbz	r0, d49c2 <_Z22publishStateTransitionv+0x42>
   d49ae:	4b0c      	ldr	r3, [pc, #48]	; (d49e0 <_Z22publishStateTransitionv+0x60>)
   d49b0:	490c      	ldr	r1, [pc, #48]	; (d49e4 <_Z22publishStateTransitionv+0x64>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	480c      	ldr	r0, [pc, #48]	; (d49e8 <_Z22publishStateTransitionv+0x68>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d49b6:	2200      	movs	r2, #0
   d49b8:	f88d 2000 	strb.w	r2, [sp]
   d49bc:	aa02      	add	r2, sp, #8
   d49be:	f7ff fc8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49c2:	f005 fb51 	bl	da068 <_Z16_fetch_usbserialv>
   d49c6:	a902      	add	r1, sp, #8
   d49c8:	f004 fd80 	bl	d94cc <_ZN5Print7printlnEPKc>
}
   d49cc:	b00d      	add	sp, #52	; 0x34
   d49ce:	bd30      	pop	{r4, r5, pc}
   d49d0:	2003dede 	.word	0x2003dede
   d49d4:	2003dec5 	.word	0x2003dec5
   d49d8:	2003dd30 	.word	0x2003dd30
   d49dc:	000dce7d 	.word	0x000dce7d
   d49e0:	2003dec4 	.word	0x2003dec4
   d49e4:	000dce8b 	.word	0x000dce8b
   d49e8:	2003dff0 	.word	0x2003dff0

000d49ec <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d49ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d49ee:	f003 fc6d 	bl	d82cc <spark_cloud_flag_disconnect>
   d49f2:	f003 fa13 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d49f6:	f643 2597 	movw	r5, #14999	; 0x3a97
   d49fa:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49fc:	f003 fc6e 	bl	d82dc <spark_cloud_flag_connected>
   d4a00:	b140      	cbz	r0, d4a14 <_Z14fullModemResetv+0x28>
   d4a02:	f003 fa0b 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   d4a06:	1b00      	subs	r0, r0, r4
   d4a08:	42a8      	cmp	r0, r5
   d4a0a:	d803      	bhi.n	d4a14 <_Z14fullModemResetv+0x28>
		delay(100);
   d4a0c:	2064      	movs	r0, #100	; 0x64
   d4a0e:	f003 fd45 	bl	d849c <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4a12:	e7f3      	b.n	d49fc <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4a14:	2100      	movs	r1, #0
   d4a16:	4b09      	ldr	r3, [pc, #36]	; (d4a3c <_Z14fullModemResetv+0x50>)
   d4a18:	f247 5230 	movw	r2, #30000	; 0x7530
   d4a1c:	4608      	mov	r0, r1
   d4a1e:	f003 f965 	bl	d7cec <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a26:	f003 fd39 	bl	d849c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4a2a:	4b05      	ldr	r3, [pc, #20]	; (d4a40 <_Z14fullModemResetv+0x54>)
   d4a2c:	220a      	movs	r2, #10
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	2101      	movs	r1, #1
   d4a32:	4668      	mov	r0, sp
   d4a34:	f005 f824 	bl	d9a80 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4a38:	b003      	add	sp, #12
   d4a3a:	bd30      	pop	{r4, r5, pc}
   d4a3c:	000dce9c 	.word	0x000dce9c
   d4a40:	2003df34 	.word	0x2003df34

000d4a44 <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a46:	4b15      	ldr	r3, [pc, #84]	; (d4a9c <_Z12dailyCleanupv+0x58>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a48:	4a15      	ldr	r2, [pc, #84]	; (d4aa0 <_Z12dailyCleanupv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	4915      	ldr	r1, [pc, #84]	; (d4aa4 <_Z12dailyCleanupv+0x60>)
   d4a4e:	4816      	ldr	r0, [pc, #88]	; (d4aa8 <_Z12dailyCleanupv+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a50:	2400      	movs	r4, #0
   d4a52:	f88d 4000 	strb.w	r4, [sp]
   d4a56:	f7ff fc41 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a5a:	4b14      	ldr	r3, [pc, #80]	; (d4aac <_Z12dailyCleanupv+0x68>)
   d4a5c:	711c      	strb	r4, [r3, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a5e:	f7ff fbab 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4a62:	f7ff fc10 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a66:	2500      	movs	r5, #0
   d4a68:	4604      	mov	r4, r0
   d4a6a:	f247 562f 	movw	r6, #29999	; 0x752f
   d4a6e:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a70:	f7ff fc09 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a74:	1b00      	subs	r0, r0, r4
   d4a76:	eb61 0105 	sbc.w	r1, r1, r5
   d4a7a:	428f      	cmp	r7, r1
   d4a7c:	bf08      	it	eq
   d4a7e:	4286      	cmpeq	r6, r0
   d4a80:	d305      	bcc.n	d4a8e <_Z12dailyCleanupv+0x4a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a82:	f7ff fba3 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d4a86:	b910      	cbnz	r0, d4a8e <_Z12dailyCleanupv+0x4a>
            spark_process();
   d4a88:	f003 fc10 	bl	d82ac <spark_process>
   d4a8c:	e7f0      	b.n	d4a70 <_Z12dailyCleanupv+0x2c>
   d4a8e:	f7ff fb9d 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  systemStatusWriteNeeded=true;
   d4a92:	4b07      	ldr	r3, [pc, #28]	; (d4ab0 <_Z12dailyCleanupv+0x6c>)
   d4a94:	2201      	movs	r2, #1
   d4a96:	701a      	strb	r2, [r3, #0]
}
   d4a98:	b003      	add	sp, #12
   d4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a9c:	2003dec4 	.word	0x2003dec4
   d4aa0:	000dcea9 	.word	0x000dcea9
   d4aa4:	000dceb1 	.word	0x000dceb1
   d4aa8:	2003dff0 	.word	0x2003dff0
   d4aac:	2003e02c 	.word	0x2003e02c
   d4ab0:	2003dedd 	.word	0x2003dedd

000d4ab4 <_Z8isDSTusav>:
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
   d4ab4:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4ab6:	f005 f9c7 	bl	d9e48 <_ZN9TimeClass3dayEv>
   d4aba:	4605      	mov	r5, r0
  int month = Time.month();
   d4abc:	f005 f9d5 	bl	d9e6a <_ZN9TimeClass5monthEv>
   d4ac0:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4ac2:	f005 f9cb 	bl	d9e5c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4ac6:	1f23      	subs	r3, r4, #4
   d4ac8:	2b06      	cmp	r3, #6
   d4aca:	d90e      	bls.n	d4aea <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4acc:	1ee3      	subs	r3, r4, #3
   d4ace:	2b08      	cmp	r3, #8
   d4ad0:	d80d      	bhi.n	d4aee <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4ad2:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4ad4:	1a2d      	subs	r5, r5, r0
   d4ad6:	d501      	bpl.n	d4adc <_Z8isDSTusav+0x28>
   d4ad8:	2c0b      	cmp	r4, #11
   d4ada:	e002      	b.n	d4ae2 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4adc:	2d07      	cmp	r5, #7
   d4ade:	dd06      	ble.n	d4aee <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ae0:	2c03      	cmp	r4, #3
   d4ae2:	bf14      	ite	ne
   d4ae4:	2000      	movne	r0, #0
   d4ae6:	2001      	moveq	r0, #1
   d4ae8:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4aea:	2001      	movs	r0, #1
   d4aec:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4aee:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4af0:	bd38      	pop	{r3, r4, r5, pc}
   d4af2:	0000      	movs	r0, r0
   d4af4:	0000      	movs	r0, r0
	...

000d4af8 <_Z12setDSTOffset6String>:
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4af8:	b570      	push	{r4, r5, r6, lr}
   d4afa:	ed2d 8b02 	vpush	{d8}
   d4afe:	b0ca      	sub	sp, #296	; 0x128
   d4b00:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b02:	f005 f986 	bl	d9e12 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b06:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b08:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b0a:	a905      	add	r1, sp, #20
   d4b0c:	6820      	ldr	r0, [r4, #0]
   d4b0e:	f007 fd61 	bl	dc5d4 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4b12:	b2c3      	uxtb	r3, r0
   d4b14:	2b02      	cmp	r3, #2
   d4b16:	d858      	bhi.n	d4bca <_Z12setDSTOffset6String+0xd2>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b18:	b240      	sxtb	r0, r0
   d4b1a:	ee07 0a90 	vmov	s15, r0
   d4b1e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4b22:	eeb0 0a48 	vmov.f32	s0, s16
   d4b26:	f005 f869 	bl	d9bfc <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b2a:	4b2d      	ldr	r3, [pc, #180]	; (d4be0 <_Z12setDSTOffset6String+0xe8>)
   d4b2c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b30:	4b2c      	ldr	r3, [pc, #176]	; (d4be4 <_Z12setDSTOffset6String+0xec>)
   d4b32:	2201      	movs	r2, #1
   d4b34:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b36:	ee18 0a10 	vmov	r0, s16
   d4b3a:	f005 ff1f 	bl	da97c <__aeabi_f2d>
   d4b3e:	4a2a      	ldr	r2, [pc, #168]	; (d4be8 <_Z12setDSTOffset6String+0xf0>)
   d4b40:	e9cd 0100 	strd	r0, r1, [sp]
   d4b44:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b48:	a80a      	add	r0, sp, #40	; 0x28
   d4b4a:	f003 fc7f 	bl	d844c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b4e:	f005 f93f 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
   d4b52:	b138      	cbz	r0, d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b54:	f7ff ffae 	bl	d4ab4 <_Z8isDSTusav>
   d4b58:	b110      	cbz	r0, d4b60 <_Z12setDSTOffset6String+0x68>
   d4b5a:	f005 f869 	bl	d9c30 <_ZN9TimeClass8beginDSTEv>
   d4b5e:	e001      	b.n	d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b60:	f005 f870 	bl	d9c44 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b64:	f005 f820 	bl	d9ba8 <_ZN9TimeClass5localEv>
   d4b68:	4604      	mov	r4, r0
   d4b6a:	f005 f952 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d4b6e:	1a20      	subs	r0, r4, r0
   d4b70:	f005 fef2 	bl	da958 <__aeabi_i2d>
   d4b74:	a318      	add	r3, pc, #96	; (adr r3, d4bd8 <_Z12setDSTOffset6String+0xe0>)
   d4b76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7a:	f006 f87d 	bl	dac78 <__aeabi_ddiv>
   d4b7e:	4a1b      	ldr	r2, [pc, #108]	; (d4bec <_Z12setDSTOffset6String+0xf4>)
   d4b80:	e9cd 0100 	strd	r0, r1, [sp]
   d4b84:	210a      	movs	r1, #10
   d4b86:	481a      	ldr	r0, [pc, #104]	; (d4bf0 <_Z12setDSTOffset6String+0xf8>)
   d4b88:	f003 fc60 	bl	d844c <snprintf>
   d4b8c:	f003 fba6 	bl	d82dc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b90:	b1e8      	cbz	r0, d4bce <_Z12setDSTOffset6String+0xd6>
   d4b92:	4d18      	ldr	r5, [pc, #96]	; (d4bf4 <_Z12setDSTOffset6String+0xfc>)
    publishQueue.publish("Time",data, PRIVATE);
   d4b94:	4918      	ldr	r1, [pc, #96]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4b96:	782b      	ldrb	r3, [r5, #0]
   d4b98:	4818      	ldr	r0, [pc, #96]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b9a:	2400      	movs	r4, #0
   d4b9c:	aa0a      	add	r2, sp, #40	; 0x28
   d4b9e:	f88d 4000 	strb.w	r4, [sp]
   d4ba2:	f7ff fb9b 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4ba6:	4631      	mov	r1, r6
   d4ba8:	a806      	add	r0, sp, #24
   d4baa:	f005 f85b 	bl	d9c64 <_ZN9TimeClass7timeStrEl>
   d4bae:	9b06      	ldr	r3, [sp, #24]
   d4bb0:	9303      	str	r3, [sp, #12]
   d4bb2:	f88d 4000 	strb.w	r4, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4bb6:	782b      	ldrb	r3, [r5, #0]
   d4bb8:	9a03      	ldr	r2, [sp, #12]
   d4bba:	490f      	ldr	r1, [pc, #60]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
   d4bbc:	480f      	ldr	r0, [pc, #60]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
   d4bbe:	f7ff fb8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4bc2:	a806      	add	r0, sp, #24
   d4bc4:	f004 fe77 	bl	d98b6 <_ZN6StringD1Ev>
   d4bc8:	e001      	b.n	d4bce <_Z12setDSTOffset6String+0xd6>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bca:	2000      	movs	r0, #0
   d4bcc:	e000      	b.n	d4bd0 <_Z12setDSTOffset6String+0xd8>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
   d4bce:	2001      	movs	r0, #1
}
   d4bd0:	b04a      	add	sp, #296	; 0x128
   d4bd2:	ecbd 8b02 	vpop	{d8}
   d4bd6:	bd70      	pop	{r4, r5, r6, pc}
   d4bd8:	00000000 	.word	0x00000000
   d4bdc:	40ac2000 	.word	0x40ac2000
   d4be0:	2003e02c 	.word	0x2003e02c
   d4be4:	2003dedd 	.word	0x2003dedd
   d4be8:	000dcebf 	.word	0x000dcebf
   d4bec:	000dcd64 	.word	0x000dcd64
   d4bf0:	2003de8c 	.word	0x2003de8c
   d4bf4:	2003dec4 	.word	0x2003dec4
   d4bf8:	000dcd82 	.word	0x000dcd82
   d4bfc:	2003dff0 	.word	0x2003dff0

000d4c00 <_Z11displayInfov>:
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c04:	4c69      	ldr	r4, [pc, #420]	; (d4dac <_Z11displayInfov+0x1ac>)
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c06:	b0ac      	sub	sp, #176	; 0xb0
   d4c08:	f003 f908 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c0c:	6823      	ldr	r3, [r4, #0]
   d4c0e:	1ac0      	subs	r0, r0, r3
   d4c10:	f241 3387 	movw	r3, #4999	; 0x1387
   d4c14:	4298      	cmp	r0, r3
   d4c16:	f240 80c6 	bls.w	d4da6 <_Z11displayInfov+0x1a6>
   d4c1a:	f003 f8ff 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4c1e:	6020      	str	r0, [r4, #0]
   d4c20:	4c63      	ldr	r4, [pc, #396]	; (d4db0 <_Z11displayInfov+0x1b0>)
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c22:	2100      	movs	r1, #0
   d4c24:	6865      	ldr	r5, [r4, #4]
   d4c26:	4608      	mov	r0, r1
   d4c28:	f003 f890 	bl	d7d4c <os_thread_scheduling>
   d4c2c:	f895 8000 	ldrb.w	r8, [r5]
   d4c30:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   d4c32:	4d60      	ldr	r5, [pc, #384]	; (d4db4 <_Z11displayInfov+0x1b4>)
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c34:	2100      	movs	r1, #0
   d4c36:	2001      	movs	r0, #1
   d4c38:	f003 f888 	bl	d7d4c <os_thread_scheduling>
   d4c3c:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4c3e:	f1b8 0f00 	cmp.w	r8, #0
   d4c42:	d070      	beq.n	d4d26 <_Z11displayInfov+0x126>
   d4c44:	f003 f8ea 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>

		char buf[128];
		if (t.gpsFix()) {
   d4c48:	f242 730f 	movw	r3, #9999	; 0x270f
   d4c4c:	1b80      	subs	r0, r0, r6
   d4c4e:	4298      	cmp	r0, r3
   d4c50:	d869      	bhi.n	d4d26 <_Z11displayInfov+0x126>
      current.latitude = t.readLatDeg();
   d4c52:	6860      	ldr	r0, [r4, #4]
   d4c54:	4e58      	ldr	r6, [pc, #352]	; (d4db8 <_Z11displayInfov+0x1b8>)
   d4c56:	f7ff fad4 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c5a:	ee10 0a10 	vmov	r0, s0
   d4c5e:	f005 fe8d 	bl	da97c <__aeabi_f2d>
   d4c62:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4c66:	6860      	ldr	r0, [r4, #4]
   d4c68:	f7ff faec 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
   d4c6c:	ee10 0a10 	vmov	r0, s0
   d4c70:	f005 fe84 	bl	da97c <__aeabi_f2d>
   d4c74:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4c78:	6860      	ldr	r0, [r4, #4]
   d4c7a:	f7ff fac2 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c7e:	6860      	ldr	r0, [r4, #4]
   d4c80:	ee10 6a10 	vmov	r6, s0
   d4c84:	f7ff fade 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c88:	2100      	movs	r1, #0
   d4c8a:	6867      	ldr	r7, [r4, #4]
   d4c8c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
   d4c90:	4608      	mov	r0, r1
   d4c92:	f003 f85b 	bl	d7d4c <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c96:	2100      	movs	r1, #0
   d4c98:	2001      	movs	r0, #1
	/**
	 * @brief Get the altitude
	 */
	TinyGPSAltitude getAltitude() const {
	    SINGLE_THREADED_BLOCK() {
	    	return altitude;
   d4c9a:	f8d7 7080 	ldr.w	r7, [r7, #128]	; 0x80
   d4c9e:	f003 f855 	bl	d7d4c <os_thread_scheduling>
   d4ca2:	6860      	ldr	r0, [r4, #4]
   d4ca4:	f7ff fa9f 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4ca8:	4680      	mov	r8, r0
   d4caa:	4620      	mov	r0, r4
   d4cac:	f000 ff84 	bl	d5bb8 <_ZN12AssetTracker14getTinyGPSPlusEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	4604      	mov	r4, r0
   d4cb4:	4608      	mov	r0, r1
   d4cb6:	f003 f849 	bl	d7d4c <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4cba:	2100      	movs	r1, #0
   d4cbc:	2001      	movs	r0, #1
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4cbe:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
   d4cc2:	f003 f843 	bl	d7d4c <os_thread_scheduling>
   d4cc6:	4638      	mov	r0, r7
   d4cc8:	9407      	str	r4, [sp, #28]
   d4cca:	f8cd 8018 	str.w	r8, [sp, #24]
   d4cce:	f005 fe43 	bl	da958 <__aeabi_i2d>
   d4cd2:	4b3a      	ldr	r3, [pc, #232]	; (d4dbc <_Z11displayInfov+0x1bc>)
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	f005 ffcf 	bl	dac78 <__aeabi_ddiv>
   d4cda:	f006 f99b 	bl	db014 <__aeabi_d2f>
   d4cde:	f005 fe4d 	bl	da97c <__aeabi_f2d>
   d4ce2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4cea:	ee10 0a10 	vmov	r0, s0
   d4cee:	f005 fe45 	bl	da97c <__aeabi_f2d>
   d4cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f005 fe40 	bl	da97c <__aeabi_f2d>
   d4cfc:	4a30      	ldr	r2, [pc, #192]	; (d4dc0 <_Z11displayInfov+0x1c0>)
   d4cfe:	e9cd 0100 	strd	r0, r1, [sp]
   d4d02:	2180      	movs	r1, #128	; 0x80
   d4d04:	a80c      	add	r0, sp, #48	; 0x30
   d4d06:	f003 fba1 	bl	d844c <snprintf>
			if (gettingFix) {
   d4d0a:	782b      	ldrb	r3, [r5, #0]
   d4d0c:	b1eb      	cbz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = false;
   d4d0e:	2300      	movs	r3, #0
   d4d10:	702b      	strb	r3, [r5, #0]
   d4d12:	f003 f883 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4d16:	4b2b      	ldr	r3, [pc, #172]	; (d4dc4 <_Z11displayInfov+0x1c4>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4d18:	492b      	ldr	r1, [pc, #172]	; (d4dc8 <_Z11displayInfov+0x1c8>)
   d4d1a:	681a      	ldr	r2, [r3, #0]
   d4d1c:	1a82      	subs	r2, r0, r2
   d4d1e:	482b      	ldr	r0, [pc, #172]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d20:	f7ff fac5 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d24:	e011      	b.n	d4d4a <_Z11displayInfov+0x14a>
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d26:	6878      	ldr	r0, [r7, #4]
   d4d28:	f7ff fa5d 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4d2c:	4a28      	ldr	r2, [pc, #160]	; (d4dd0 <_Z11displayInfov+0x1d0>)
   d4d2e:	4603      	mov	r3, r0
   d4d30:	2180      	movs	r1, #128	; 0x80
   d4d32:	a80c      	add	r0, sp, #48	; 0x30
   d4d34:	f003 fb8a 	bl	d844c <snprintf>
			if (!gettingFix) {
   d4d38:	782b      	ldrb	r3, [r5, #0]
   d4d3a:	b933      	cbnz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = true;
   d4d3c:	4b1d      	ldr	r3, [pc, #116]	; (d4db4 <_Z11displayInfov+0x1b4>)
   d4d3e:	2201      	movs	r2, #1
   d4d40:	701a      	strb	r2, [r3, #0]
   d4d42:	f003 f86b 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4d46:	4b1f      	ldr	r3, [pc, #124]	; (d4dc4 <_Z11displayInfov+0x1c4>)
   d4d48:	6018      	str	r0, [r3, #0]
			}
		}
		Log.info(buf);
   d4d4a:	a90c      	add	r1, sp, #48	; 0x30
   d4d4c:	481f      	ldr	r0, [pc, #124]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d4e:	f7ff faae 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d52:	f003 fac3 	bl	d82dc <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4d56:	b330      	cbz	r0, d4da6 <_Z11displayInfov+0x1a6>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4d58:	4c1e      	ldr	r4, [pc, #120]	; (d4dd4 <_Z11displayInfov+0x1d4>)
   d4d5a:	f003 f85f 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   d4d5e:	6823      	ldr	r3, [r4, #0]
   d4d60:	1ac0      	subs	r0, r0, r3
   d4d62:	4b1d      	ldr	r3, [pc, #116]	; (d4dd8 <_Z11displayInfov+0x1d8>)
   d4d64:	4298      	cmp	r0, r3
   d4d66:	d91e      	bls.n	d4da6 <_Z11displayInfov+0x1a6>
   d4d68:	f003 f858 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   d4d6c:	4b1b      	ldr	r3, [pc, #108]	; (d4ddc <_Z11displayInfov+0x1dc>)
				lastPublish = millis();
   d4d6e:	6020      	str	r0, [r4, #0]
   d4d70:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4d72:	f88d 3000 	strb.w	r3, [sp]
   d4d76:	aa0c      	add	r2, sp, #48	; 0x30
   d4d78:	233c      	movs	r3, #60	; 0x3c
   d4d7a:	4919      	ldr	r1, [pc, #100]	; (d4de0 <_Z11displayInfov+0x1e0>)
   d4d7c:	a80a      	add	r0, sp, #40	; 0x28
   d4d7e:	f003 fe87 	bl	d8a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4d82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d4d84:	b17c      	cbz	r4, d4da6 <_Z11displayInfov+0x1a6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d86:	6863      	ldr	r3, [r4, #4]
   d4d88:	3b01      	subs	r3, #1
   d4d8a:	6063      	str	r3, [r4, #4]
   d4d8c:	b95b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
        {
          _M_dispose();
   d4d8e:	6823      	ldr	r3, [r4, #0]
   d4d90:	4620      	mov	r0, r4
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d96:	68a3      	ldr	r3, [r4, #8]
   d4d98:	3b01      	subs	r3, #1
   d4d9a:	60a3      	str	r3, [r4, #8]
   d4d9c:	b91b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
            _M_destroy();
   d4d9e:	6823      	ldr	r3, [r4, #0]
   d4da0:	4620      	mov	r0, r4
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	4798      	blx	r3
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4da6:	b02c      	add	sp, #176	; 0xb0
   d4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4dac:	2003dee0 	.word	0x2003dee0
   d4db0:	2003dee8 	.word	0x2003dee8
   d4db4:	2003df44 	.word	0x2003df44
   d4db8:	2003dfa0 	.word	0x2003dfa0
   d4dbc:	40590000 	.word	0x40590000
   d4dc0:	000dced0 	.word	0x000dced0
   d4dc4:	2003df8c 	.word	0x2003df8c
   d4dc8:	000dcf01 	.word	0x000dcf01
   d4dcc:	2003e27c 	.word	0x2003e27c
   d4dd0:	000dcf21 	.word	0x000dcf21
   d4dd4:	2003e028 	.word	0x2003e028
   d4dd8:	0001d4bf 	.word	0x0001d4bf
   d4ddc:	2003dec4 	.word	0x2003dec4
   d4de0:	000dcf3b 	.word	0x000dcf3b

000d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4de4:	b530      	push	{r4, r5, lr}
   d4de6:	b085      	sub	sp, #20
   d4de8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4dea:	a904      	add	r1, sp, #16
   d4dec:	2200      	movs	r2, #0
   d4dee:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4df2:	f003 f9db 	bl	d81ac <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4df6:	b9a8      	cbnz	r0, d4e24 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4df8:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4dfa:	b10c      	cbz	r4, d4e00 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4dfc:	6923      	ldr	r3, [r4, #16]
   d4dfe:	b923      	cbnz	r3, d4e0a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4e00:	4a09      	ldr	r2, [pc, #36]	; (d4e28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4e02:	2100      	movs	r1, #0
   d4e04:	200a      	movs	r0, #10
   d4e06:	f003 f9c1 	bl	d818c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	230c      	movs	r3, #12
   d4e10:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4e14:	2304      	movs	r3, #4
   d4e16:	9303      	str	r3, [sp, #12]
   d4e18:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4e1a:	6923      	ldr	r3, [r4, #16]
   d4e1c:	aa01      	add	r2, sp, #4
   d4e1e:	2101      	movs	r1, #1
   d4e20:	4620      	mov	r0, r4
   d4e22:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4e24:	b005      	add	sp, #20
   d4e26:	bd30      	pop	{r4, r5, pc}
   d4e28:	000d7e0d 	.word	0x000d7e0d

000d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>:
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val));
        return val;
    }

    int batteryState() const {
   d4e2c:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4e2e:	2007      	movs	r0, #7
   d4e30:	a901      	add	r1, sp, #4
   d4e32:	f7ff ffd7 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4e36:	2800      	cmp	r0, #0
        return val;
   d4e38:	bfa8      	it	ge
   d4e3a:	9801      	ldrge	r0, [sp, #4]
    }
   d4e3c:	b003      	add	sp, #12
   d4e3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e44 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e46:	b089      	sub	sp, #36	; 0x24
   d4e48:	a901      	add	r1, sp, #4
   d4e4a:	2003      	movs	r0, #3
   d4e4c:	f7ff ffca 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4e50:	b988      	cbnz	r0, d4e76 <_Z17getBatteryContextv+0x32>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4e52:	2006      	movs	r0, #6
   d4e54:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4e58:	f7ff fa18 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4e5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4e60:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4e64:	ee07 3a10 	vmov	s14, r3
   d4e68:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4e6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4e70:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4e74:	e001      	b.n	d4e7a <_Z17getBatteryContextv+0x36>
            return -1.0f;
   d4e76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  static bool alreadyOnBattery = false;                                           // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4e7a:	4d23      	ldr	r5, [pc, #140]	; (d4f08 <_Z17getBatteryContextv+0xc4>)

void getBatteryContext() {

  static bool alreadyOnBattery = false;                                           // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4e7c:	4e23      	ldr	r6, [pc, #140]	; (d4f0c <_Z17getBatteryContextv+0xc8>)

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e80:	ac01      	add	r4, sp, #4
   d4e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

void getBatteryContext() {

  static bool alreadyOnBattery = false;                                           // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4e8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

void getBatteryContext() {

  static bool alreadyOnBattery = false;                                           // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4e90:	edc6 7a02 	vstr	s15, [r6, #8]

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4e94:	f7ff ffca 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4e98:	ab08      	add	r3, sp, #32
   d4e9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2

  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4e9e:	4d1c      	ldr	r5, [pc, #112]	; (d4f10 <_Z17getBatteryContextv+0xcc>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4ea0:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4ea4:	4a1b      	ldr	r2, [pc, #108]	; (d4f14 <_Z17getBatteryContextv+0xd0>)
   d4ea6:	481c      	ldr	r0, [pc, #112]	; (d4f18 <_Z17getBatteryContextv+0xd4>)
   d4ea8:	2110      	movs	r1, #16
   d4eaa:	f003 facf 	bl	d844c <snprintf>

  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4eae:	782b      	ldrb	r3, [r5, #0]
   d4eb0:	4634      	mov	r4, r6
   d4eb2:	462f      	mov	r7, r5
   d4eb4:	4e19      	ldr	r6, [pc, #100]	; (d4f1c <_Z17getBatteryContextv+0xd8>)
   d4eb6:	b983      	cbnz	r3, d4eda <_Z17getBatteryContextv+0x96>
   d4eb8:	f7ff ffb8 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4ebc:	2804      	cmp	r0, #4
   d4ebe:	d10c      	bne.n	d4eda <_Z17getBatteryContextv+0x96>
    alreadyOnBattery = true;
   d4ec0:	2301      	movs	r3, #1
   d4ec2:	702b      	strb	r3, [r5, #0]
   d4ec4:	f002 ffaa 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
    alreadyOnBattery = false;
    lastTimePowered = millis();
  }

  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4ec8:	6833      	ldr	r3, [r6, #0]
   d4eca:	1ac0      	subs	r0, r0, r3
   d4ecc:	4b14      	ldr	r3, [pc, #80]	; (d4f20 <_Z17getBatteryContextv+0xdc>)
   d4ece:	4298      	cmp	r0, r3
   d4ed0:	d811      	bhi.n	d4ef6 <_Z17getBatteryContextv+0xb2>
   d4ed2:	68a3      	ldr	r3, [r4, #8]
   d4ed4:	2b32      	cmp	r3, #50	; 0x32
   d4ed6:	dd0e      	ble.n	d4ef6 <_Z17getBatteryContextv+0xb2>
   d4ed8:	e010      	b.n	d4efc <_Z17getBatteryContextv+0xb8>
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
    alreadyOnBattery = true;
  }
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4eda:	f7ff ffa7 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4ede:	2802      	cmp	r0, #2
   d4ee0:	d003      	beq.n	d4eea <_Z17getBatteryContextv+0xa6>
   d4ee2:	f7ff ffa3 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4ee6:	2803      	cmp	r0, #3
   d4ee8:	d1ec      	bne.n	d4ec4 <_Z17getBatteryContextv+0x80>
    alreadyOnBattery = false;
   d4eea:	2300      	movs	r3, #0
   d4eec:	703b      	strb	r3, [r7, #0]
   d4eee:	f002 ff95 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
    lastTimePowered = millis();
   d4ef2:	6030      	str	r0, [r6, #0]
   d4ef4:	e7e6      	b.n	d4ec4 <_Z17getBatteryContextv+0x80>
  }

  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
    sysStatus.lowBatteryMode = true;
   d4ef6:	2301      	movs	r3, #1
   d4ef8:	7163      	strb	r3, [r4, #5]
   d4efa:	e002      	b.n	d4f02 <_Z17getBatteryContextv+0xbe>
  } 
  else sysStatus.lowBatteryMode = false;
   d4efc:	4b03      	ldr	r3, [pc, #12]	; (d4f0c <_Z17getBatteryContextv+0xc8>)
   d4efe:	2200      	movs	r2, #0
   d4f00:	715a      	strb	r2, [r3, #5]

}
   d4f02:	b009      	add	sp, #36	; 0x24
   d4f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f06:	bf00      	nop
   d4f08:	000dccc4 	.word	0x000dccc4
   d4f0c:	2003e02c 	.word	0x2003e02c
   d4f10:	2003dedc 	.word	0x2003dedc
   d4f14:	000dd75a 	.word	0x000dd75a
   d4f18:	2003dec7 	.word	0x2003dec7
   d4f1c:	2003e04c 	.word	0x2003e04c
   d4f20:	00dbba00 	.word	0x00dbba00

000d4f24 <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4f26:	f7ff fe6b 	bl	d4c00 <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f2a:	4b23      	ldr	r3, [pc, #140]	; (d4fb8 <_Z16takeMeasurementsv+0x94>)
   d4f2c:	2200      	movs	r2, #0
   d4f2e:	4611      	mov	r1, r2
   d4f30:	6858      	ldr	r0, [r3, #4]
   d4f32:	f003 fa2b 	bl	d838c <network_ready>

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4f36:	b108      	cbz	r0, d4f3c <_Z16takeMeasurementsv+0x18>
   d4f38:	f7ff fc02 	bl	d4740 <_Z17getSignalStrengthv>
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4f3c:	4e1f      	ldr	r6, [pc, #124]	; (d4fbc <_Z16takeMeasurementsv+0x98>)
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f3e:	4f20      	ldr	r7, [pc, #128]	; (d4fc0 <_Z16takeMeasurementsv+0x9c>)
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4f40:	2400      	movs	r4, #0
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4f42:	1930      	adds	r0, r6, r4
   d4f44:	f7ff fbbc 	bl	d46c0 <_Z7getTempPh>
   d4f48:	ec51 0b10 	vmov	r0, r1, d0
   d4f4c:	f006 f862 	bl	db014 <__aeabi_d2f>
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f50:	ee07 0a90 	vmov	s15, r0
   d4f54:	eef4 7a67 	vcmp.f32	s15, s15
   d4f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f5c:	d604      	bvs.n	d4f68 <_Z16takeMeasurementsv+0x44>
   d4f5e:	f005 fd0d 	bl	da97c <__aeabi_f2d>
   d4f62:	193d      	adds	r5, r7, r4
   d4f64:	e9c5 0100 	strd	r0, r1, [r5]
   d4f68:	3408      	adds	r4, #8
void takeMeasurements()
{
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
   d4f6a:	2c18      	cmp	r4, #24
   d4f6c:	d1e9      	bne.n	d4f42 <_Z16takeMeasurementsv+0x1e>
    float temp = getTemp(sensorAddresses[i]);
    if (!isnan(temp)) current.tempArray[i] = temp;
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4f6e:	4c14      	ldr	r4, [pc, #80]	; (d4fc0 <_Z16takeMeasurementsv+0x9c>)
   d4f70:	4814      	ldr	r0, [pc, #80]	; (d4fc4 <_Z16takeMeasurementsv+0xa0>)
   d4f72:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4f76:	210c      	movs	r1, #12
   d4f78:	e9cd 2300 	strd	r2, r3, [sp]
   d4f7c:	4a12      	ldr	r2, [pc, #72]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4f7e:	f003 fa65 	bl	d844c <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4f82:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4f86:	210c      	movs	r1, #12
   d4f88:	e9cd 2300 	strd	r2, r3, [sp]
   d4f8c:	480f      	ldr	r0, [pc, #60]	; (d4fcc <_Z16takeMeasurementsv+0xa8>)
   d4f8e:	4a0e      	ldr	r2, [pc, #56]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4f90:	f003 fa5c 	bl	d844c <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4f94:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4f98:	210c      	movs	r1, #12
   d4f9a:	e9cd 2300 	strd	r2, r3, [sp]
   d4f9e:	480c      	ldr	r0, [pc, #48]	; (d4fd0 <_Z16takeMeasurementsv+0xac>)
   d4fa0:	4a09      	ldr	r2, [pc, #36]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4fa2:	f003 fa53 	bl	d844c <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4fa6:	f7ff ff4d 	bl	d4e44 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4faa:	4a0a      	ldr	r2, [pc, #40]	; (d4fd4 <_Z16takeMeasurementsv+0xb0>)
   d4fac:	2301      	movs	r3, #1
   d4fae:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4fb0:	4a09      	ldr	r2, [pc, #36]	; (d4fd8 <_Z16takeMeasurementsv+0xb4>)
   d4fb2:	7013      	strb	r3, [r2, #0]
}
   d4fb4:	b003      	add	sp, #12
   d4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fb8:	2003e244 	.word	0x2003e244
   d4fbc:	2003f400 	.word	0x2003f400
   d4fc0:	2003dfa0 	.word	0x2003dfa0
   d4fc4:	2003ddb1 	.word	0x2003ddb1
   d4fc8:	000dcf3f 	.word	0x000dcf3f
   d4fcc:	2003dd24 	.word	0x2003dd24
   d4fd0:	2003dda0 	.word	0x2003dda0
   d4fd4:	2003dedd 	.word	0x2003dedd
   d4fd8:	2003df94 	.word	0x2003df94

000d4fdc <_Z18loadSystemDefaultsv>:
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4fdc:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4fde:	f7ff fc4d 	bl	d487c <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d4fe2:	f7ff ff9f 	bl	d4f24 <_Z16takeMeasurementsv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fe6:	f003 f979 	bl	d82dc <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4fea:	b148      	cbz	r0, d5000 <_Z18loadSystemDefaultsv+0x24>
   d4fec:	4b11      	ldr	r3, [pc, #68]	; (d5034 <_Z18loadSystemDefaultsv+0x58>)
   d4fee:	4912      	ldr	r1, [pc, #72]	; (d5038 <_Z18loadSystemDefaultsv+0x5c>)
   d4ff0:	781b      	ldrb	r3, [r3, #0]
   d4ff2:	4812      	ldr	r0, [pc, #72]	; (d503c <_Z18loadSystemDefaultsv+0x60>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4ff4:	2200      	movs	r2, #0
   d4ff6:	f88d 2000 	strb.w	r2, [sp]
   d4ffa:	4a11      	ldr	r2, [pc, #68]	; (d5040 <_Z18loadSystemDefaultsv+0x64>)
   d4ffc:	f7ff f96e 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d5000:	4a10      	ldr	r2, [pc, #64]	; (d5044 <_Z18loadSystemDefaultsv+0x68>)
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5002:	4811      	ldr	r0, [pc, #68]	; (d5048 <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d5004:	2300      	movs	r3, #0
   d5006:	7093      	strb	r3, [r2, #2]
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5008:	6893      	ldr	r3, [r2, #8]
   d500a:	2b1d      	cmp	r3, #29
   d500c:	bfcc      	ite	gt
   d500e:	2300      	movgt	r3, #0
   d5010:	2301      	movle	r3, #1
   d5012:	7153      	strb	r3, [r2, #5]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5014:	230a      	movs	r3, #10
   d5016:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5018:	4b0c      	ldr	r3, [pc, #48]	; (d504c <_Z18loadSystemDefaultsv+0x70>)
   d501a:	6153      	str	r3, [r2, #20]
  sysStatus.dstOffset = 1;
   d501c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5020:	2101      	movs	r1, #1
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d5022:	6193      	str	r3, [r2, #24]
   d5024:	2320      	movs	r3, #32

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5026:	7011      	strb	r1, [r2, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
   d5028:	7111      	strb	r1, [r2, #4]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d502a:	b003      	add	sp, #12
   d502c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5030:	f001 bc60 	b.w	d68f4 <_ZN6MB85RC9writeDataEjPKhj>
   d5034:	2003dec4 	.word	0x2003dec4
   d5038:	000dcd5f 	.word	0x000dcd5f
   d503c:	2003dff0 	.word	0x2003dff0
   d5040:	000dcf47 	.word	0x000dcf47
   d5044:	2003e02c 	.word	0x2003e02c
   d5048:	2003de98 	.word	0x2003de98
   d504c:	c0a00000 	.word	0xc0a00000

000d5050 <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d5050:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d5052:	4c28      	ldr	r4, [pc, #160]	; (d50f4 <_Z17checkSystemValuesv+0xa4>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d5054:	4d27      	ldr	r5, [pc, #156]	; (d50f4 <_Z17checkSystemValuesv+0xa4>)
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d5056:	f7ff ff65 	bl	d4f24 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d505a:	78a3      	ldrb	r3, [r4, #2]
   d505c:	2b01      	cmp	r3, #1
   d505e:	bf84      	itt	hi
   d5060:	2300      	movhi	r3, #0
   d5062:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d5064:	78e3      	ldrb	r3, [r4, #3]
   d5066:	2b01      	cmp	r3, #1
   d5068:	d906      	bls.n	d5078 <_Z17checkSystemValuesv+0x28>
   d506a:	f003 f937 	bl	d82dc <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d506e:	b110      	cbz	r0, d5076 <_Z17checkSystemValuesv+0x26>
   d5070:	2301      	movs	r3, #1
   d5072:	70eb      	strb	r3, [r5, #3]
   d5074:	e000      	b.n	d5078 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
   d5076:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d5078:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d507a:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d507e:	2b01      	cmp	r3, #1
   d5080:	bf82      	ittt	hi
   d5082:	4b1c      	ldrhi	r3, [pc, #112]	; (d50f4 <_Z17checkSystemValuesv+0xa4>)
   d5084:	2200      	movhi	r2, #0
   d5086:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5088:	68a2      	ldr	r2, [r4, #8]
   d508a:	4b1a      	ldr	r3, [pc, #104]	; (d50f4 <_Z17checkSystemValuesv+0xa4>)
   d508c:	2a1d      	cmp	r2, #29
   d508e:	bfd4      	ite	le
   d5090:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d5092:	2200      	movgt	r2, #0
   d5094:	715a      	strb	r2, [r3, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5096:	6923      	ldr	r3, [r4, #16]
   d5098:	2bff      	cmp	r3, #255	; 0xff
   d509a:	bf88      	it	hi
   d509c:	4b15      	ldrhi	r3, [pc, #84]	; (d50f4 <_Z17checkSystemValuesv+0xa4>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d509e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d50a2:	bf88      	it	hi
   d50a4:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d50a6:	eef4 7ac7 	vcmpe.f32	s15, s14
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d50aa:	bf88      	it	hi
   d50ac:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d50ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50b2:	d406      	bmi.n	d50c2 <_Z17checkSystemValuesv+0x72>
   d50b4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d50b8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d50bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50c0:	dd01      	ble.n	d50c6 <_Z17checkSystemValuesv+0x76>
   d50c2:	4b0d      	ldr	r3, [pc, #52]	; (d50f8 <_Z17checkSystemValuesv+0xa8>)
   d50c4:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d50c6:	edd4 7a06 	vldr	s15, [r4, #24]
   d50ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d50ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50d2:	d406      	bmi.n	d50e2 <_Z17checkSystemValuesv+0x92>
   d50d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d50d8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d50dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50e0:	dd02      	ble.n	d50e8 <_Z17checkSystemValuesv+0x98>
   d50e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d50e6:	61a3      	str	r3, [r4, #24]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d50e8:	230a      	movs	r3, #10
   d50ea:	71a3      	strb	r3, [r4, #6]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d50ec:	4b03      	ldr	r3, [pc, #12]	; (d50fc <_Z17checkSystemValuesv+0xac>)
   d50ee:	2201      	movs	r2, #1
   d50f0:	701a      	strb	r2, [r3, #0]
   d50f2:	bd38      	pop	{r3, r4, r5, pc}
   d50f4:	2003e02c 	.word	0x2003e02c
   d50f8:	c0a00000 	.word	0xc0a00000
   d50fc:	2003dedd 	.word	0x2003dedd

000d5100 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d5100:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d5102:	4c9c      	ldr	r4, [pc, #624]	; (d5374 <loop+0x274>)
   d5104:	7823      	ldrb	r3, [r4, #0]
   d5106:	3b01      	subs	r3, #1
   d5108:	2b05      	cmp	r3, #5
   d510a:	f200 811e 	bhi.w	d534a <loop+0x24a>
   d510e:	e8df f003 	tbb	[pc, r3]
   d5112:	03b9      	.short	0x03b9
   d5114:	93733d6f 	.word	0x93733d6f
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5118:	4d97      	ldr	r5, [pc, #604]	; (d5378 <loop+0x278>)
   d511a:	792b      	ldrb	r3, [r5, #4]
   d511c:	b12b      	cbz	r3, d512a <loop+0x2a>
   d511e:	4b97      	ldr	r3, [pc, #604]	; (d537c <loop+0x27c>)
   d5120:	781b      	ldrb	r3, [r3, #0]
   d5122:	2b02      	cmp	r3, #2
   d5124:	d001      	beq.n	d512a <loop+0x2a>
   d5126:	f7ff fc2b 	bl	d4980 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d512a:	4b95      	ldr	r3, [pc, #596]	; (d5380 <loop+0x280>)
   d512c:	781b      	ldrb	r3, [r3, #0]
   d512e:	b10b      	cbz	r3, d5134 <loop+0x34>
   d5130:	f7ff fb42 	bl	d47b8 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d5134:	4e93      	ldr	r6, [pc, #588]	; (d5384 <loop+0x284>)
   d5136:	7833      	ldrb	r3, [r6, #0]
   d5138:	b13b      	cbz	r3, d514a <loop+0x4a>
   d513a:	2320      	movs	r3, #32
   d513c:	4a8e      	ldr	r2, [pc, #568]	; (d5378 <loop+0x278>)
   d513e:	4892      	ldr	r0, [pc, #584]	; (d5388 <loop+0x288>)
   d5140:	2101      	movs	r1, #1
   d5142:	f001 fbd7 	bl	d68f4 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d5146:	2300      	movs	r3, #0
   d5148:	7033      	strb	r3, [r6, #0]
    }
    if (currentCountsWriteNeeded) {
   d514a:	4e90      	ldr	r6, [pc, #576]	; (d538c <loop+0x28c>)
   d514c:	7833      	ldrb	r3, [r6, #0]
   d514e:	b13b      	cbz	r3, d5160 <loop+0x60>
   d5150:	2330      	movs	r3, #48	; 0x30
   d5152:	4a8f      	ldr	r2, [pc, #572]	; (d5390 <loop+0x290>)
   d5154:	488c      	ldr	r0, [pc, #560]	; (d5388 <loop+0x288>)
   d5156:	2150      	movs	r1, #80	; 0x50
   d5158:	f001 fbcc 	bl	d68f4 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d515c:	2300      	movs	r3, #0
   d515e:	7033      	strb	r3, [r6, #0]
    }
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d5160:	796b      	ldrb	r3, [r5, #5]
   d5162:	b10b      	cbz	r3, d5168 <loop+0x68>
   d5164:	2304      	movs	r3, #4
   d5166:	7023      	strb	r3, [r4, #0]
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d5168:	f004 fe64 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d516c:	79ab      	ldrb	r3, [r5, #6]
   d516e:	fb90 f2f3 	sdiv	r2, r0, r3
   d5172:	fb02 0013 	mls	r0, r2, r3, r0
   d5176:	2800      	cmp	r0, #0
   d5178:	f040 80ed 	bne.w	d5356 <loop+0x256>
   d517c:	f004 fe5a 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d5180:	4b84      	ldr	r3, [pc, #528]	; (d5394 <loop+0x294>)
   d5182:	681b      	ldr	r3, [r3, #0]
   d5184:	4298      	cmp	r0, r3
   d5186:	f040 80f0 	bne.w	d536a <loop+0x26a>
   d518a:	e0e4      	b.n	d5356 <loop+0x256>
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval

    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d518c:	4b7a      	ldr	r3, [pc, #488]	; (d5378 <loop+0x278>)
   d518e:	791a      	ldrb	r2, [r3, #4]
   d5190:	461d      	mov	r5, r3
   d5192:	b12a      	cbz	r2, d51a0 <loop+0xa0>
   d5194:	4b79      	ldr	r3, [pc, #484]	; (d537c <loop+0x27c>)
   d5196:	781b      	ldrb	r3, [r3, #0]
   d5198:	2b04      	cmp	r3, #4
   d519a:	d001      	beq.n	d51a0 <loop+0xa0>
   d519c:	f7ff fbf0 	bl	d4980 <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d51a0:	f7ff fe50 	bl	d4e44 <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d51a4:	796b      	ldrb	r3, [r5, #5]
   d51a6:	b90b      	cbnz	r3, d51ac <loop+0xac>
      state = IDLE_STATE;
   d51a8:	2302      	movs	r3, #2
   d51aa:	e03e      	b.n	d522a <loop+0x12a>
      break;
    }
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d51ac:	f004 fe42 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d51b0:	2801      	cmp	r0, #1
   d51b2:	dd04      	ble.n	d51be <loop+0xbe>
   d51b4:	4b70      	ldr	r3, [pc, #448]	; (d5378 <loop+0x278>)
   d51b6:	78db      	ldrb	r3, [r3, #3]
   d51b8:	2b00      	cmp	r3, #0
   d51ba:	f040 80d8 	bne.w	d536e <loop+0x26e>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d51be:	2100      	movs	r1, #0
   d51c0:	2007      	movs	r0, #7
   d51c2:	f005 f85e 	bl	da282 <digitalWrite>
      petWatchdog();
   d51c6:	f7ff faf7 	bl	d47b8 <_Z11petWatchdogv>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d51ca:	f004 fe33 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d51ce:	233c      	movs	r3, #60	; 0x3c
   d51d0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d51d4:	fb03 f100 	mul.w	r1, r3, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d51d8:	2900      	cmp	r1, #0
   d51da:	dd05      	ble.n	d51e8 <loop+0xe8>
   d51dc:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d51e0:	bfa8      	it	ge
   d51e2:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d51e6:	e000      	b.n	d51ea <loop+0xea>
   d51e8:	2101      	movs	r1, #1
      rtc.setAlarm(wakeInSeconds);                                      // The Real Time Clock will turn the Enable pin back on to wake the device
   d51ea:	2300      	movs	r3, #0
   d51ec:	2201      	movs	r2, #1
   d51ee:	e091      	b.n	d5314 <loop+0x214>
    } break;

  case MEASURING_STATE:
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d51f0:	f7ff fe98 	bl	d4f24 <_Z16takeMeasurementsv>
    state = REPORTING_STATE;
   d51f4:	2305      	movs	r3, #5
   d51f6:	e018      	b.n	d522a <loop+0x12a>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51f8:	4b5f      	ldr	r3, [pc, #380]	; (d5378 <loop+0x278>)
   d51fa:	791a      	ldrb	r2, [r3, #4]
   d51fc:	461d      	mov	r5, r3
   d51fe:	b12a      	cbz	r2, d520c <loop+0x10c>
   d5200:	4b5e      	ldr	r3, [pc, #376]	; (d537c <loop+0x27c>)
   d5202:	781b      	ldrb	r3, [r3, #0]
   d5204:	2b05      	cmp	r3, #5
   d5206:	d001      	beq.n	d520c <loop+0x10c>
   d5208:	f7ff fbba 	bl	d4980 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d520c:	78eb      	ldrb	r3, [r5, #3]
   d520e:	b90b      	cbnz	r3, d5214 <loop+0x114>
   d5210:	f7ff fb34 	bl	d487c <_Z17connectToParticlev>
   d5214:	f003 f862 	bl	d82dc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5218:	b148      	cbz	r0, d522e <loop+0x12e>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d521a:	f004 fe01 	bl	d9e20 <_ZN9TimeClass4hourEv>
   d521e:	b908      	cbnz	r0, d5224 <loop+0x124>
   d5220:	f7ff fc10 	bl	d4a44 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d5224:	f7ff f9ec 	bl	d4600 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5228:	2306      	movs	r3, #6
   d522a:	7023      	strb	r3, [r4, #0]
   d522c:	e08d      	b.n	d534a <loop+0x24a>
   d522e:	f002 fdf5 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d5232:	4b59      	ldr	r3, [pc, #356]	; (d5398 <loop+0x298>)
   d5234:	6018      	str	r0, [r3, #0]
   d5236:	e023      	b.n	d5280 <loop+0x180>
      state = ERROR_STATE;
    }
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5238:	4b4f      	ldr	r3, [pc, #316]	; (d5378 <loop+0x278>)
   d523a:	791b      	ldrb	r3, [r3, #4]
   d523c:	b12b      	cbz	r3, d524a <loop+0x14a>
   d523e:	4b4f      	ldr	r3, [pc, #316]	; (d537c <loop+0x27c>)
   d5240:	781b      	ldrb	r3, [r3, #0]
   d5242:	2b06      	cmp	r3, #6
   d5244:	d001      	beq.n	d524a <loop+0x14a>
   d5246:	f7ff fb9b 	bl	d4980 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d524a:	4b54      	ldr	r3, [pc, #336]	; (d539c <loop+0x29c>)
   d524c:	781b      	ldrb	r3, [r3, #0]
   d524e:	2b00      	cmp	r3, #0
   d5250:	d0aa      	beq.n	d51a8 <loop+0xa8>
   d5252:	f002 fde3 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5256:	4b52      	ldr	r3, [pc, #328]	; (d53a0 <loop+0x2a0>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	1ac0      	subs	r0, r0, r3
   d525c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5260:	4298      	cmp	r0, r3
   d5262:	d972      	bls.n	d534a <loop+0x24a>
   d5264:	f002 fdda 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5268:	4b4b      	ldr	r3, [pc, #300]	; (d5398 <loop+0x298>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d526a:	494e      	ldr	r1, [pc, #312]	; (d53a4 <loop+0x2a4>)
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (!dataInFlight)  {                                             // Response received back to IDLE state
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d526c:	6018      	str	r0, [r3, #0]
   d526e:	4b4e      	ldr	r3, [pc, #312]	; (d53a8 <loop+0x2a8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5270:	484e      	ldr	r0, [pc, #312]	; (d53ac <loop+0x2ac>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5272:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5274:	2200      	movs	r2, #0
   d5276:	f88d 2000 	strb.w	r2, [sp]
   d527a:	4a4d      	ldr	r2, [pc, #308]	; (d53b0 <loop+0x2b0>)
   d527c:	f7ff f82e 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d5280:	2301      	movs	r3, #1
   d5282:	e7d2      	b.n	d522a <loop+0x12a>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5284:	4c3c      	ldr	r4, [pc, #240]	; (d5378 <loop+0x278>)
   d5286:	7923      	ldrb	r3, [r4, #4]
   d5288:	b12b      	cbz	r3, d5296 <loop+0x196>
   d528a:	4b3c      	ldr	r3, [pc, #240]	; (d537c <loop+0x27c>)
   d528c:	781b      	ldrb	r3, [r3, #0]
   d528e:	2b01      	cmp	r3, #1
   d5290:	d001      	beq.n	d5296 <loop+0x196>
   d5292:	f7ff fb75 	bl	d4980 <_Z22publishStateTransitionv>
   d5296:	f002 fdc1 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d529a:	4b3f      	ldr	r3, [pc, #252]	; (d5398 <loop+0x298>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d52a2:	3330      	adds	r3, #48	; 0x30
   d52a4:	4298      	cmp	r0, r3
   d52a6:	d950      	bls.n	d534a <loop+0x24a>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d52a8:	6923      	ldr	r3, [r4, #16]
   d52aa:	2b03      	cmp	r3, #3
   d52ac:	dc13      	bgt.n	d52d6 <loop+0x1d6>
   d52ae:	f003 f815 	bl	d82dc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d52b2:	b148      	cbz	r0, d52c8 <loop+0x1c8>
   d52b4:	4b3c      	ldr	r3, [pc, #240]	; (d53a8 <loop+0x2a8>)
   d52b6:	493f      	ldr	r1, [pc, #252]	; (d53b4 <loop+0x2b4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d52b8:	781b      	ldrb	r3, [r3, #0]
   d52ba:	483c      	ldr	r0, [pc, #240]	; (d53ac <loop+0x2ac>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d52bc:	2200      	movs	r2, #0
   d52be:	f88d 2000 	strb.w	r2, [sp]
   d52c2:	4a3d      	ldr	r2, [pc, #244]	; (d53b8 <loop+0x2b8>)
   d52c4:	f7ff f80a 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d52c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52cc:	f003 f8e6 	bl	d849c <delay>
        System.reset();
   d52d0:	f004 fbd3 	bl	d9a7a <_ZN11SystemClass5resetEv>
   d52d4:	e039      	b.n	d534a <loop+0x24a>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d52d6:	f004 fd9c 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d52da:	4b27      	ldr	r3, [pc, #156]	; (d5378 <loop+0x278>)
   d52dc:	4d29      	ldr	r5, [pc, #164]	; (d5384 <loop+0x284>)
   d52de:	69db      	ldr	r3, [r3, #28]
   d52e0:	1ac0      	subs	r0, r0, r3
   d52e2:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d52e6:	d919      	bls.n	d531c <loop+0x21c>
   d52e8:	f002 fff8 	bl	d82dc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d52ec:	b148      	cbz	r0, d5302 <loop+0x202>
   d52ee:	4b2e      	ldr	r3, [pc, #184]	; (d53a8 <loop+0x2a8>)
   d52f0:	4930      	ldr	r1, [pc, #192]	; (d53b4 <loop+0x2b4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d52f2:	781b      	ldrb	r3, [r3, #0]
   d52f4:	482d      	ldr	r0, [pc, #180]	; (d53ac <loop+0x2ac>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d52f6:	2200      	movs	r2, #0
   d52f8:	f88d 2000 	strb.w	r2, [sp]
   d52fc:	4a2f      	ldr	r2, [pc, #188]	; (d53bc <loop+0x2bc>)
   d52fe:	f7fe ffed 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5302:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5306:	f003 f8c9 	bl	d849c <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d530a:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d530c:	2201      	movs	r2, #1
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d530e:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d5310:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d5312:	210a      	movs	r1, #10
   d5314:	482a      	ldr	r0, [pc, #168]	; (d53c0 <loop+0x2c0>)
   d5316:	f001 ff78 	bl	d720a <_ZN8MCP794108setAlarmEibi>
   d531a:	e016      	b.n	d534a <loop+0x24a>
   d531c:	f002 ffde 	bl	d82dc <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5320:	b148      	cbz	r0, d5336 <loop+0x236>
   d5322:	4b21      	ldr	r3, [pc, #132]	; (d53a8 <loop+0x2a8>)
   d5324:	4923      	ldr	r1, [pc, #140]	; (d53b4 <loop+0x2b4>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5326:	781b      	ldrb	r3, [r3, #0]
   d5328:	4820      	ldr	r0, [pc, #128]	; (d53ac <loop+0x2ac>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d532a:	2200      	movs	r2, #0
   d532c:	f88d 2000 	strb.w	r2, [sp]
   d5330:	4a24      	ldr	r2, [pc, #144]	; (d53c4 <loop+0x2c4>)
   d5332:	f7fe ffd3 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5336:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d533a:	f003 f8af 	bl	d849c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d533e:	2300      	movs	r3, #0
   d5340:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d5342:	2301      	movs	r3, #1
   d5344:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d5346:	f7ff fb51 	bl	d49ec <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d534a:	481d      	ldr	r0, [pc, #116]	; (d53c0 <loop+0x2c0>)
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
   d534c:	b002      	add	sp, #8
   d534e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d5352:	f001 be93 	b.w	d707c <_ZN8MCP794104loopEv>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d5356:	f004 fd6d 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d535a:	2800      	cmp	r0, #0
   d535c:	d1f5      	bne.n	d534a <loop+0x24a>
   d535e:	f004 fd69 	bl	d9e34 <_ZN9TimeClass6minuteEv>
   d5362:	4b0c      	ldr	r3, [pc, #48]	; (d5394 <loop+0x294>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	4298      	cmp	r0, r3
   d5368:	d0ef      	beq.n	d534a <loop+0x24a>
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d536a:	2303      	movs	r3, #3
   d536c:	e75d      	b.n	d522a <loop+0x12a>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
      state = IDLE_STATE;
      break;
    }
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d536e:	f7ff fad3 	bl	d4918 <_Z22disconnectFromParticlev>
   d5372:	e724      	b.n	d51be <loop+0xbe>
   d5374:	2003dede 	.word	0x2003dede
   d5378:	2003e02c 	.word	0x2003e02c
   d537c:	2003dec5 	.word	0x2003dec5
   d5380:	2003df18 	.word	0x2003df18
   d5384:	2003dedd 	.word	0x2003dedd
   d5388:	2003de98 	.word	0x2003de98
   d538c:	2003df94 	.word	0x2003df94
   d5390:	2003dfa0 	.word	0x2003dfa0
   d5394:	2003df98 	.word	0x2003df98
   d5398:	2003df90 	.word	0x2003df90
   d539c:	2003dfd0 	.word	0x2003dfd0
   d53a0:	2003ded8 	.word	0x2003ded8
   d53a4:	000dcf5f 	.word	0x000dcf5f
   d53a8:	2003dec4 	.word	0x2003dec4
   d53ac:	2003dff0 	.word	0x2003dff0
   d53b0:	000dd50e 	.word	0x000dd50e
   d53b4:	000dcf8c 	.word	0x000dcf8c
   d53b8:	000dcf78 	.word	0x000dcf78
   d53bc:	000dcf92 	.word	0x000dcf92
   d53c0:	2003dea8 	.word	0x2003dea8
   d53c4:	000dcfac 	.word	0x000dcfac

000d53c8 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53c8:	2300      	movs	r3, #0
   d53ca:	2202      	movs	r2, #2
   d53cc:	f002 bf5e 	b.w	d828c <spark_variable>

000d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d53d0:	2300      	movs	r3, #0
   d53d2:	2204      	movs	r2, #4
   d53d4:	f002 bf5a 	b.w	d828c <spark_variable>

000d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d53d8:	4602      	mov	r2, r0
   d53da:	4801      	ldr	r0, [pc, #4]	; (d53e0 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d53dc:	f003 ba48 	b.w	d8870 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d53e0:	000d8845 	.word	0x000d8845
   d53e4:	00000000 	.word	0x00000000

000d53e8 <setup>:
float celsius[nSENSORS] = {NAN, NAN};
retained uint8_t sensorAddresses[nSENSORS][8];
const int MAXRETRY = 3;

void setup()                                        // Note: Disconnected Setup()
{
   d53e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53ea:	b0a9      	sub	sp, #164	; 0xa4

  Serial.begin(9600);
   d53ec:	f004 fe3c 	bl	da068 <_Z16_fetch_usbserialv>
   d53f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d53f4:	f004 fe2c 	bl	da050 <_ZN9USBSerial5beginEl>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d53f8:	2100      	movs	r1, #0
   d53fa:	2008      	movs	r0, #8
   d53fc:	f004 ff30 	bl	da260 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5400:	2100      	movs	r1, #0
   d5402:	2004      	movs	r0, #4
   d5404:	f004 ff2c 	bl	da260 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5408:	2101      	movs	r1, #1
   d540a:	2007      	movs	r0, #7
   d540c:	f004 ff28 	bl	da260 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5410:	2101      	movs	r1, #1
   d5412:	2005      	movs	r0, #5

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5414:	2400      	movs	r4, #0
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5416:	f004 ff23 	bl	da260 <pinMode>

  digitalWrite(blueLED,HIGH);
   d541a:	2101      	movs	r1, #1
   d541c:	2007      	movs	r0, #7
   d541e:	f004 ff30 	bl	da282 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d5422:	f7ff f9c9 	bl	d47b8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d542a:	2201      	movs	r2, #1
   d542c:	4998      	ldr	r1, [pc, #608]	; (d5690 <setup+0x2a8>)
   d542e:	9400      	str	r4, [sp, #0]
   d5430:	2008      	movs	r0, #8
   d5432:	f003 fd81 	bl	d8f38 <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5436:	a804      	add	r0, sp, #16
   d5438:	f002 ff58 	bl	d82ec <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d543c:	4623      	mov	r3, r4
   d543e:	227d      	movs	r2, #125	; 0x7d
   d5440:	a908      	add	r1, sp, #32
   d5442:	a804      	add	r0, sp, #16
   d5444:	f004 fabd 	bl	d99c2 <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5448:	4623      	mov	r3, r4
   d544a:	4622      	mov	r2, r4
   d544c:	4991      	ldr	r1, [pc, #580]	; (d5694 <setup+0x2ac>)
   d544e:	9401      	str	r4, [sp, #4]
   d5450:	9400      	str	r4, [sp, #0]
   d5452:	a808      	add	r0, sp, #32
   d5454:	f002 ff5a 	bl	d830c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);
   d5458:	498f      	ldr	r1, [pc, #572]	; (d5698 <setup+0x2b0>)
   d545a:	4890      	ldr	r0, [pc, #576]	; (d569c <setup+0x2b4>)
   d545c:	4d90      	ldr	r5, [pc, #576]	; (d56a0 <setup+0x2b8>)
   d545e:	4f91      	ldr	r7, [pc, #580]	; (d56a4 <setup+0x2bc>)
   d5460:	f7ff ffb6 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SampleInterval",sampleIntervalStr);
   d5464:	4990      	ldr	r1, [pc, #576]	; (d56a8 <setup+0x2c0>)
   d5466:	4891      	ldr	r0, [pc, #580]	; (d56ac <setup+0x2c4>)
   d5468:	f7ff ffb2 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d546c:	4990      	ldr	r1, [pc, #576]	; (d56b0 <setup+0x2c8>)
   d546e:	4891      	ldr	r0, [pc, #580]	; (d56b4 <setup+0x2cc>)
   d5470:	f7ff ffaa 	bl	d53c8 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CabinTemp",cabinTempStr);
   d5474:	4990      	ldr	r1, [pc, #576]	; (d56b8 <setup+0x2d0>)
   d5476:	4891      	ldr	r0, [pc, #580]	; (d56bc <setup+0x2d4>)
   d5478:	f7ff ffaa 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("VentTemp",ventTempStr);
   d547c:	4990      	ldr	r1, [pc, #576]	; (d56c0 <setup+0x2d8>)
   d547e:	4891      	ldr	r0, [pc, #580]	; (d56c4 <setup+0x2dc>)
   d5480:	f7ff ffa6 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OutsideTemp",outsideTempStr);
   d5484:	4990      	ldr	r1, [pc, #576]	; (d56c8 <setup+0x2e0>)
   d5486:	4891      	ldr	r0, [pc, #580]	; (d56cc <setup+0x2e4>)
   d5488:	f7ff ffa2 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d548c:	4990      	ldr	r1, [pc, #576]	; (d56d0 <setup+0x2e8>)
   d548e:	4891      	ldr	r0, [pc, #580]	; (d56d4 <setup+0x2ec>)
   d5490:	f7ff ff9e 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5494:	4990      	ldr	r1, [pc, #576]	; (d56d8 <setup+0x2f0>)
   d5496:	4891      	ldr	r0, [pc, #580]	; (d56dc <setup+0x2f4>)
   d5498:	f7ff ff96 	bl	d53c8 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d549c:	4990      	ldr	r1, [pc, #576]	; (d56e0 <setup+0x2f8>)
   d549e:	4891      	ldr	r0, [pc, #580]	; (d56e4 <setup+0x2fc>)
   d54a0:	f7ff ff92 	bl	d53c8 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d54a4:	4990      	ldr	r1, [pc, #576]	; (d56e8 <setup+0x300>)
   d54a6:	4891      	ldr	r0, [pc, #580]	; (d56ec <setup+0x304>)
   d54a8:	f7ff ff92 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d54ac:	4990      	ldr	r1, [pc, #576]	; (d56f0 <setup+0x308>)
   d54ae:	4891      	ldr	r0, [pc, #580]	; (d56f4 <setup+0x30c>)
   d54b0:	f7ff ff8e 	bl	d53d0 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d54b4:	4990      	ldr	r1, [pc, #576]	; (d56f8 <setup+0x310>)
   d54b6:	4891      	ldr	r0, [pc, #580]	; (d56fc <setup+0x314>)
   d54b8:	f7ff ff8e 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d54bc:	4990      	ldr	r1, [pc, #576]	; (d5700 <setup+0x318>)
   d54be:	4891      	ldr	r0, [pc, #580]	; (d5704 <setup+0x31c>)
   d54c0:	f7ff ff8a 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d54c4:	4990      	ldr	r1, [pc, #576]	; (d5708 <setup+0x320>)
   d54c6:	4891      	ldr	r0, [pc, #580]	; (d570c <setup+0x324>)
   d54c8:	f7ff ff86 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d54cc:	4990      	ldr	r1, [pc, #576]	; (d5710 <setup+0x328>)
   d54ce:	4891      	ldr	r0, [pc, #580]	; (d5714 <setup+0x32c>)
   d54d0:	f7ff ff82 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d54d4:	4990      	ldr	r1, [pc, #576]	; (d5718 <setup+0x330>)
   d54d6:	4891      	ldr	r0, [pc, #580]	; (d571c <setup+0x334>)
   d54d8:	f7ff ff7e 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d54dc:	4990      	ldr	r1, [pc, #576]	; (d5720 <setup+0x338>)
   d54de:	4891      	ldr	r0, [pc, #580]	; (d5724 <setup+0x33c>)
   d54e0:	f7ff ff7a 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SampleInterval",setSampleInterval);
   d54e4:	4990      	ldr	r1, [pc, #576]	; (d5728 <setup+0x340>)
   d54e6:	4871      	ldr	r0, [pc, #452]	; (d56ac <setup+0x2c4>)
   d54e8:	f7ff ff76 	bl	d53d8 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>

  pmic.enableBuck();                                                  // To enable charging 
   d54ec:	488f      	ldr	r0, [pc, #572]	; (d572c <setup+0x344>)
   d54ee:	f003 ff9d 	bl	d942c <_ZN4PMIC10enableBuckEv>


  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d54f2:	488f      	ldr	r0, [pc, #572]	; (d5730 <setup+0x348>)
   d54f4:	f001 f966 	bl	d67c4 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54f8:	4621      	mov	r1, r4
   d54fa:	2301      	movs	r3, #1
   d54fc:	f10d 020b 	add.w	r2, sp, #11
   d5500:	488b      	ldr	r0, [pc, #556]	; (d5730 <setup+0x348>)
   d5502:	f001 f9a1 	bl	d6848 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5506:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d550a:	2901      	cmp	r1, #1
   d550c:	d019      	beq.n	d5542 <setup+0x15a>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d550e:	4888      	ldr	r0, [pc, #544]	; (d5730 <setup+0x348>)
   d5510:	f001 f962 	bl	d67d8 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5514:	2304      	movs	r3, #4
   d5516:	4a87      	ldr	r2, [pc, #540]	; (d5734 <setup+0x34c>)
   d5518:	4885      	ldr	r0, [pc, #532]	; (d5730 <setup+0x348>)
   d551a:	4621      	mov	r1, r4
   d551c:	f001 f9ea 	bl	d68f4 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5520:	2301      	movs	r3, #1
   d5522:	f10d 020b 	add.w	r2, sp, #11
   d5526:	4621      	mov	r1, r4
   d5528:	4881      	ldr	r0, [pc, #516]	; (d5730 <setup+0x348>)
   d552a:	f001 f98d 	bl	d6848 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d552e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5532:	2b01      	cmp	r3, #1
   d5534:	d002      	beq.n	d553c <setup+0x154>
   d5536:	2301      	movs	r3, #1
   d5538:	703b      	strb	r3, [r7, #0]
   d553a:	e007      	b.n	d554c <setup+0x164>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d553c:	f7ff fd4e 	bl	d4fdc <_Z18loadSystemDefaultsv>
   d5540:	e004      	b.n	d554c <setup+0x164>
   d5542:	2320      	movs	r3, #32
   d5544:	462a      	mov	r2, r5
   d5546:	487a      	ldr	r0, [pc, #488]	; (d5730 <setup+0x348>)
   d5548:	f001 f97e 	bl	d6848 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d554c:	ae28      	add	r6, sp, #160	; 0xa0
   d554e:	2400      	movs	r4, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d5550:	f7ff fd7e 	bl	d5050 <_Z17checkSystemValuesv>

  getBatteryContext();                                                // See if we have enought juice
   d5554:	f7ff fc76 	bl	d4e44 <_Z17getBatteryContextv>
   d5558:	f846 4d94 	str.w	r4, [r6, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d555c:	4622      	mov	r2, r4
   d555e:	4621      	mov	r1, r4
   d5560:	4630      	mov	r0, r6
   d5562:	f002 fc3b 	bl	d7ddc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5566:	9b03      	ldr	r3, [sp, #12]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5568:	2b14      	cmp	r3, #20
   d556a:	f000 8084 	beq.w	d5676 <setup+0x28e>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d556e:	4622      	mov	r2, r4
   d5570:	4621      	mov	r1, r4
   d5572:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5574:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5576:	f002 fc31 	bl	d7ddc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d557a:	9b03      	ldr	r3, [sp, #12]
   d557c:	2b8c      	cmp	r3, #140	; 0x8c
   d557e:	d07a      	beq.n	d5676 <setup+0x28e>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d5580:	79ab      	ldrb	r3, [r5, #6]
   d5582:	4a6d      	ldr	r2, [pc, #436]	; (d5738 <setup+0x350>)
   d5584:	4848      	ldr	r0, [pc, #288]	; (d56a8 <setup+0x2c0>)
   d5586:	210c      	movs	r1, #12
   d5588:	f002 ff60 	bl	d844c <snprintf>

  rtc.setup();                                                        // Start the real time clock
   d558c:	486b      	ldr	r0, [pc, #428]	; (d573c <setup+0x354>)
   d558e:	f001 fc5d 	bl	d6e4c <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5592:	2100      	movs	r1, #0
   d5594:	4869      	ldr	r0, [pc, #420]	; (d573c <setup+0x354>)
   d5596:	f001 fdae 	bl	d70f6 <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d559a:	ed95 0a06 	vldr	s0, [r5, #24]
   d559e:	f004 fb2d 	bl	d9bfc <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d55a2:	f004 fc15 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
   d55a6:	b920      	cbnz	r0, d55b2 <setup+0x1ca>
   d55a8:	4864      	ldr	r0, [pc, #400]	; (d573c <setup+0x354>)
   d55aa:	f001 fc3f 	bl	d6e2c <_ZNK8MCP7941010getRTCTimeEv>
   d55ae:	f004 fb4f 	bl	d9c50 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d55b2:	f7ff fa7f 	bl	d4ab4 <_Z8isDSTusav>
   d55b6:	b110      	cbz	r0, d55be <setup+0x1d6>
   d55b8:	f004 fb3a 	bl	d9c30 <_ZN9TimeClass8beginDSTEv>
   d55bc:	e001      	b.n	d55c2 <setup+0x1da>
   d55be:	f004 fb41 	bl	d9c44 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d55c2:	ed95 0a05 	vldr	s0, [r5, #20]
   d55c6:	f004 fafd 	bl	d9bc4 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d55ca:	f004 faed 	bl	d9ba8 <_ZN9TimeClass5localEv>
   d55ce:	4604      	mov	r4, r0
   d55d0:	f004 fc1f 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d55d4:	1a20      	subs	r0, r4, r0
   d55d6:	f005 f9bf 	bl	da958 <__aeabi_i2d>
   d55da:	a32b      	add	r3, pc, #172	; (adr r3, d5688 <setup+0x2a0>)
   d55dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55e0:	f005 fb4a 	bl	dac78 <__aeabi_ddiv>
   d55e4:	4a56      	ldr	r2, [pc, #344]	; (d5740 <setup+0x358>)
   d55e6:	e9cd 0100 	strd	r0, r1, [sp]
   d55ea:	210a      	movs	r1, #10
   d55ec:	483e      	ldr	r0, [pc, #248]	; (d56e8 <setup+0x300>)
   d55ee:	f002 ff2d 	bl	d844c <snprintf>
   d55f2:	2330      	movs	r3, #48	; 0x30
   d55f4:	4a53      	ldr	r2, [pc, #332]	; (d5744 <setup+0x35c>)
   d55f6:	484e      	ldr	r0, [pc, #312]	; (d5730 <setup+0x348>)
   d55f8:	2150      	movs	r1, #80	; 0x50
   d55fa:	f001 f925 	bl	d6848 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d55fe:	f004 fc0f 	bl	d9e20 <_ZN9TimeClass4hourEv>
   d5602:	4b51      	ldr	r3, [pc, #324]	; (d5748 <setup+0x360>)
   d5604:	6018      	str	r0, [r3, #0]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5606:	f7ff f909 	bl	d481c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d560a:	2004      	movs	r0, #4
   d560c:	f004 fe52 	bl	da2b4 <digitalRead>
   d5610:	b908      	cbnz	r0, d5616 <setup+0x22e>
   d5612:	f7ff fce3 	bl	d4fdc <_Z18loadSystemDefaultsv>

  ds18b20.resetsearch();                 // initialise for sensor search
   d5616:	484d      	ldr	r0, [pc, #308]	; (d574c <setup+0x364>)
   d5618:	f000 ff46 	bl	d64a8 <_ZN7DS18B2011resetsearchEv>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addresses
    ds18b20.search(sensorAddresses[i]); // and if available store
   d561c:	494c      	ldr	r1, [pc, #304]	; (d5750 <setup+0x368>)
   d561e:	484b      	ldr	r0, [pc, #300]	; (d574c <setup+0x364>)
   d5620:	f000 ff27 	bl	d6472 <_ZN7DS18B206searchEPh>
   d5624:	494b      	ldr	r1, [pc, #300]	; (d5754 <setup+0x36c>)
   d5626:	4849      	ldr	r0, [pc, #292]	; (d574c <setup+0x364>)
   d5628:	f000 ff23 	bl	d6472 <_ZN7DS18B206searchEPh>
   d562c:	494a      	ldr	r1, [pc, #296]	; (d5758 <setup+0x370>)
   d562e:	4847      	ldr	r0, [pc, #284]	; (d574c <setup+0x364>)
   d5630:	f000 ff1f 	bl	d6472 <_ZN7DS18B206searchEPh>
	 * On some devices (Electron, Argon, and Xenon), there is an optional Wire1.
	 *
	 * @param addr The I2C address to use. This is optional, and the default is 0x42.
	 * The address can be reprogrammed in software on the u-blox GPS, but 0x42 is the default.
	 */
	AssetTracker &withI2C(TwoWire &wire = Wire, uint8_t addr = 0x42);
   d5634:	f004 fe86 	bl	da344 <_Z19__fetch_global_Wirev>
  }

  t.withI2C();
   d5638:	2242      	movs	r2, #66	; 0x42
   d563a:	4601      	mov	r1, r0
   d563c:	4847      	ldr	r0, [pc, #284]	; (d575c <setup+0x374>)
   d563e:	f000 fa29 	bl	d5a94 <_ZN12AssetTracker7withI2CER7TwoWireh>
  // Run in threaded mode - this eliminates the need to read Serial1 from loop or updateGPS() and dramatically
	// lowers the risk of lost or corrupted GPS data caused by blocking loop for too long and overflowing the
	// 64-byte serial buffer.
	t.startThreadedMode();
   d5642:	4846      	ldr	r0, [pc, #280]	; (d575c <setup+0x374>)
   d5644:	f000 f9da 	bl	d59fc <_ZN12AssetTracker17startThreadedModeEv>
   d5648:	f002 fbe8 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d564c:	4b44      	ldr	r3, [pc, #272]	; (d5760 <setup+0x378>)
   d564e:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d5650:	4b44      	ldr	r3, [pc, #272]	; (d5764 <setup+0x37c>)
   d5652:	2201      	movs	r2, #1
   d5654:	701a      	strb	r2, [r3, #0]


  // Here is where the code diverges based on why we are running Setup()
 
  connectToParticle();
   d5656:	f7ff f911 	bl	d487c <_Z17connectToParticlev>
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d565a:	783b      	ldrb	r3, [r7, #0]
   d565c:	b913      	cbnz	r3, d5664 <setup+0x27c>
   d565e:	4b11      	ldr	r3, [pc, #68]	; (d56a4 <setup+0x2bc>)
   d5660:	2202      	movs	r2, #2
   d5662:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d5664:	2100      	movs	r1, #0
   d5666:	2007      	movs	r0, #7
   d5668:	f004 fe0b 	bl	da282 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d566c:	a804      	add	r0, sp, #16
   d566e:	f004 f922 	bl	d98b6 <_ZN6StringD1Ev>
  connectToParticle();
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d5672:	b029      	add	sp, #164	; 0xa4
   d5674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  checkSystemValues();                                                // Make sure System values are all in valid range

  getBatteryContext();                                                // See if we have enought juice

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5676:	692b      	ldr	r3, [r5, #16]
   d5678:	3301      	adds	r3, #1
   d567a:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d567c:	4b3a      	ldr	r3, [pc, #232]	; (d5768 <setup+0x380>)
   d567e:	2201      	movs	r2, #1
   d5680:	701a      	strb	r2, [r3, #0]
   d5682:	e77d      	b.n	d5580 <setup+0x198>
   d5684:	f3af 8000 	nop.w
   d5688:	00000000 	.word	0x00000000
   d568c:	40ac2000 	.word	0x40ac2000
   d5690:	000d40cd 	.word	0x000d40cd
   d5694:	000d42f9 	.word	0x000d42f9
   d5698:	2003df4c 	.word	0x2003df4c
   d569c:	000dcfcb 	.word	0x000dcfcb
   d56a0:	2003e02c 	.word	0x2003e02c
   d56a4:	2003dede 	.word	0x2003dede
   d56a8:	2003ddbd 	.word	0x2003ddbd
   d56ac:	000dcfd2 	.word	0x000dcfd2
   d56b0:	2003e03c 	.word	0x2003e03c
   d56b4:	000dcfe1 	.word	0x000dcfe1
   d56b8:	2003ddb1 	.word	0x2003ddb1
   d56bc:	000dcfec 	.word	0x000dcfec
   d56c0:	2003dd24 	.word	0x2003dd24
   d56c4:	000dcff6 	.word	0x000dcff6
   d56c8:	2003dda0 	.word	0x2003dda0
   d56cc:	000dcfff 	.word	0x000dcfff
   d56d0:	2003ddac 	.word	0x2003ddac
   d56d4:	000dd00b 	.word	0x000dd00b
   d56d8:	2003e034 	.word	0x2003e034
   d56dc:	000dd013 	.word	0x000dd013
   d56e0:	2003dfb8 	.word	0x2003dfb8
   d56e4:	000dd01e 	.word	0x000dd01e
   d56e8:	2003de8c 	.word	0x2003de8c
   d56ec:	000dd025 	.word	0x000dd025
   d56f0:	2003dec7 	.word	0x2003dec7
   d56f4:	000dd030 	.word	0x000dd030
   d56f8:	000d4121 	.word	0x000d4121
   d56fc:	000dd03f 	.word	0x000dd03f
   d5700:	000d438d 	.word	0x000d438d
   d5704:	000dd049 	.word	0x000dd049
   d5708:	000d413d 	.word	0x000d413d
   d570c:	000dd053 	.word	0x000dd053
   d5710:	000d43d5 	.word	0x000d43d5
   d5714:	000dd05b 	.word	0x000dd05b
   d5718:	000d4469 	.word	0x000d4469
   d571c:	000dd068 	.word	0x000dd068
   d5720:	000d4af9 	.word	0x000d4af9
   d5724:	000dd075 	.word	0x000dd075
   d5728:	000d4581 	.word	0x000d4581
   d572c:	2003dec6 	.word	0x2003dec6
   d5730:	2003de98 	.word	0x2003de98
   d5734:	000dd108 	.word	0x000dd108
   d5738:	000dcd9e 	.word	0x000dcd9e
   d573c:	2003dea8 	.word	0x2003dea8
   d5740:	000dcd64 	.word	0x000dcd64
   d5744:	2003dfa0 	.word	0x2003dfa0
   d5748:	2003dee4 	.word	0x2003dee4
   d574c:	2003dfd4 	.word	0x2003dfd4
   d5750:	2003f400 	.word	0x2003f400
   d5754:	2003f408 	.word	0x2003f408
   d5758:	2003f410 	.word	0x2003f410
   d575c:	2003dee8 	.word	0x2003dee8
   d5760:	2003df8c 	.word	0x2003df8c
   d5764:	2003df44 	.word	0x2003df44
   d5768:	2003dedd 	.word	0x2003dedd

000d576c <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d576c:	4b48      	ldr	r3, [pc, #288]	; (d5890 <_GLOBAL__sub_I___appProductID+0x124>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5772:	2400      	movs	r4, #0
   d5774:	601c      	str	r4, [r3, #0]
   d5776:	4b47      	ldr	r3, [pc, #284]	; (d5894 <_GLOBAL__sub_I___appProductID+0x128>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5778:	4e47      	ldr	r6, [pc, #284]	; (d5898 <_GLOBAL__sub_I___appProductID+0x12c>)

// Pin Constants - Sensors
const int tempSensors =   A3;                      // PThree on-wire temp sensors on this pin (pulled up to VCC via 10k)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d577a:	4d48      	ldr	r5, [pc, #288]	; (d589c <_GLOBAL__sub_I___appProductID+0x130>)
   d577c:	2701      	movs	r7, #1
   d577e:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5780:	f002 fb84 	bl	d7e8c <HAL_Pin_Map>
   d5784:	4b46      	ldr	r3, [pc, #280]	; (d58a0 <_GLOBAL__sub_I___appProductID+0x134>)
   d5786:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5788:	f004 fd1c 	bl	da1c4 <spark_protocol_instance>
   d578c:	4623      	mov	r3, r4
   d578e:	4622      	mov	r2, r4
   d5790:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5794:	f004 fd1e 	bl	da1d4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5798:	f004 fd14 	bl	da1c4 <spark_protocol_instance>
   d579c:	4622      	mov	r2, r4
   d579e:	4623      	mov	r3, r4
   d57a0:	2104      	movs	r1, #4
   d57a2:	f004 fd1f 	bl	da1e4 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d57aa:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d57ac:	6034      	str	r4, [r6, #0]
   d57ae:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d57b0:	71b4      	strb	r4, [r6, #6]
   d57b2:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57b4:	2002      	movs	r0, #2
   d57b6:	f002 fd0b 	bl	d81d0 <set_system_mode>
   d57ba:	462a      	mov	r2, r5
   d57bc:	4939      	ldr	r1, [pc, #228]	; (d58a4 <_GLOBAL__sub_I___appProductID+0x138>)
   d57be:	4630      	mov	r0, r6
   d57c0:	f004 fe0c 	bl	da3dc <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57c4:	4e38      	ldr	r6, [pc, #224]	; (d58a8 <_GLOBAL__sub_I___appProductID+0x13c>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d57c6:	4621      	mov	r1, r4
   d57c8:	4638      	mov	r0, r7
   d57ca:	f002 fd19 	bl	d8200 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d57ce:	4639      	mov	r1, r7
   d57d0:	2004      	movs	r0, #4
   d57d2:	f002 faf3 	bl	d7dbc <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57d6:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57da:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57dc:	4642      	mov	r2, r8
   d57de:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57e0:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57e2:	f005 fe81 	bl	db4e8 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d57e6:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d57e8:	462a      	mov	r2, r5
   d57ea:	4930      	ldr	r1, [pc, #192]	; (d58ac <_GLOBAL__sub_I___appProductID+0x140>)
   d57ec:	80f3      	strh	r3, [r6, #6]
   d57ee:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57f0:	7537      	strb	r7, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d57f2:	f8a6 8004 	strh.w	r8, [r6, #4]
   d57f6:	f004 fdf1 	bl	da3dc <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d57fa:	f004 fda3 	bl	da344 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d57fe:	4e2c      	ldr	r6, [pc, #176]	; (d58b0 <_GLOBAL__sub_I___appProductID+0x144>)
   d5800:	4601      	mov	r1, r0
   d5802:	4630      	mov	r0, r6
   d5804:	f001 fa60 	bl	d6cc8 <_ZN8MCP79410C1ER7TwoWire>
   d5808:	462a      	mov	r2, r5
   d580a:	492a      	ldr	r1, [pc, #168]	; (d58b4 <_GLOBAL__sub_I___appProductID+0x148>)
   d580c:	4630      	mov	r0, r6
   d580e:	f004 fde5 	bl	da3dc <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5812:	f004 fd97 	bl	da344 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5816:	4e28      	ldr	r6, [pc, #160]	; (d58b8 <_GLOBAL__sub_I___appProductID+0x14c>)
   d5818:	4623      	mov	r3, r4
   d581a:	4601      	mov	r1, r0
   d581c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5820:	4630      	mov	r0, r6
   d5822:	f000 ffc5 	bl	d67b0 <_ZN6MB85RCC1ER7TwoWireji>
   d5826:	4b25      	ldr	r3, [pc, #148]	; (d58bc <_GLOBAL__sub_I___appProductID+0x150>)
   d5828:	6033      	str	r3, [r6, #0]
   d582a:	4630      	mov	r0, r6
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d582c:	4e24      	ldr	r6, [pc, #144]	; (d58c0 <_GLOBAL__sub_I___appProductID+0x154>)
   d582e:	4925      	ldr	r1, [pc, #148]	; (d58c4 <_GLOBAL__sub_I___appProductID+0x158>)
   d5830:	462a      	mov	r2, r5
   d5832:	f004 fdd3 	bl	da3dc <__aeabi_atexit>
   d5836:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d583a:	4923      	ldr	r1, [pc, #140]	; (d58c8 <_GLOBAL__sub_I___appProductID+0x15c>)
   d583c:	4630      	mov	r0, r6
   d583e:	f002 f92d 	bl	d7a9c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5842:	4b22      	ldr	r3, [pc, #136]	; (d58cc <_GLOBAL__sub_I___appProductID+0x160>)
   d5844:	6033      	str	r3, [r6, #0]
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5846:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d5848:	4e21      	ldr	r6, [pc, #132]	; (d58d0 <_GLOBAL__sub_I___appProductID+0x164>)
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d584a:	4922      	ldr	r1, [pc, #136]	; (d58d4 <_GLOBAL__sub_I___appProductID+0x168>)
   d584c:	462a      	mov	r2, r5
   d584e:	f004 fdc5 	bl	da3dc <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d5852:	4622      	mov	r2, r4
   d5854:	4641      	mov	r1, r8
   d5856:	4630      	mov	r0, r6
   d5858:	f000 fdf4 	bl	d6444 <_ZN7DS18B20C1Etb>
   d585c:	4630      	mov	r0, r6
AssetTracker t;
   d585e:	4e1e      	ldr	r6, [pc, #120]	; (d58d8 <_GLOBAL__sub_I___appProductID+0x16c>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
   d5860:	491e      	ldr	r1, [pc, #120]	; (d58dc <_GLOBAL__sub_I___appProductID+0x170>)
   d5862:	462a      	mov	r2, r5
   d5864:	f004 fdba 	bl	da3dc <__aeabi_atexit>
AssetTracker t;
   d5868:	4630      	mov	r0, r6
   d586a:	f000 f8a9 	bl	d59c0 <_ZN12AssetTrackerC1Ev>
   d586e:	4630      	mov	r0, r6
PMIC pmic;
   d5870:	4e1b      	ldr	r6, [pc, #108]	; (d58e0 <_GLOBAL__sub_I___appProductID+0x174>)
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
AssetTracker t;
   d5872:	491c      	ldr	r1, [pc, #112]	; (d58e4 <_GLOBAL__sub_I___appProductID+0x178>)
   d5874:	462a      	mov	r2, r5
   d5876:	f004 fdb1 	bl	da3dc <__aeabi_atexit>
PMIC pmic;
   d587a:	4621      	mov	r1, r4
   d587c:	4630      	mov	r0, r6
   d587e:	f003 fd6a 	bl	d9356 <_ZN4PMICC1Eb>
   d5882:	462a      	mov	r2, r5
   d5884:	4630      	mov	r0, r6
   d5886:	4918      	ldr	r1, [pc, #96]	; (d58e8 <_GLOBAL__sub_I___appProductID+0x17c>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d5888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
AssetTracker t;
PMIC pmic;
   d588c:	f004 bda6 	b.w	da3dc <__aeabi_atexit>
   d5890:	2003df34 	.word	0x2003df34
   d5894:	2003dec4 	.word	0x2003dec4
   d5898:	2003df38 	.word	0x2003df38
   d589c:	2003de88 	.word	0x2003de88
   d58a0:	2003df48 	.word	0x2003df48
   d58a4:	000d41a9 	.word	0x000d41a9
   d58a8:	2003df1c 	.word	0x2003df1c
   d58ac:	000d40d9 	.word	0x000d40d9
   d58b0:	2003dea8 	.word	0x2003dea8
   d58b4:	000d6a3b 	.word	0x000d6a3b
   d58b8:	2003de98 	.word	0x2003de98
   d58bc:	000dcc60 	.word	0x000dcc60
   d58c0:	2003dff0 	.word	0x2003dff0
   d58c4:	000d4181 	.word	0x000d4181
   d58c8:	2003f418 	.word	0x2003f418
   d58cc:	000dcc7c 	.word	0x000dcc7c
   d58d0:	2003dfd4 	.word	0x2003dfd4
   d58d4:	000d4159 	.word	0x000d4159
   d58d8:	2003dee8 	.word	0x2003dee8
   d58dc:	000d6499 	.word	0x000d6499
   d58e0:	2003dec6 	.word	0x2003dec6
   d58e4:	000d5989 	.word	0x000d5989
   d58e8:	000d9375 	.word	0x000d9375

000d58ec <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d58ec:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d58ee:	2301      	movs	r3, #1
   d58f0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d58f2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d58f4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d58f6:	b10b      	cbz	r3, d58fc <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d58f8:	68c0      	ldr	r0, [r0, #12]
   d58fa:	e006      	b.n	d590a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58fc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d58fe:	b128      	cbz	r0, d590c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5900:	6883      	ldr	r3, [r0, #8]
   d5902:	b90b      	cbnz	r3, d5908 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d5904:	f004 fd8b 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5908:	68c3      	ldr	r3, [r0, #12]
   d590a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d590c:	2301      	movs	r3, #1
   d590e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5910:	2000      	movs	r0, #0
    }
   d5912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d5916:	f002 ba49 	b.w	d7dac <os_thread_exit>
	...

000d591c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d591c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d591e:	4602      	mov	r2, r0
   d5920:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5922:	7913      	ldrb	r3, [r2, #4]
   d5924:	6895      	ldr	r5, [r2, #8]
   d5926:	b133      	cbz	r3, d5936 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d5928:	b93d      	cbnz	r5, d593a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d592a:	490c      	ldr	r1, [pc, #48]	; (d595c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d592c:	b004      	add	sp, #16
   d592e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d5932:	f003 bdb8 	b.w	d94a6 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d5936:	4b0a      	ldr	r3, [pc, #40]	; (d5960 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d5938:	e000      	b.n	d593c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d593a:	4b0a      	ldr	r3, [pc, #40]	; (d5964 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d593c:	7b16      	ldrb	r6, [r2, #12]
   d593e:	4c0a      	ldr	r4, [pc, #40]	; (d5968 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d5940:	490a      	ldr	r1, [pc, #40]	; (d596c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d5942:	7b52      	ldrb	r2, [r2, #13]
   d5944:	9202      	str	r2, [sp, #8]
   d5946:	2e01      	cmp	r6, #1
   d5948:	bf08      	it	eq
   d594a:	4621      	moveq	r1, r4
   d594c:	9101      	str	r1, [sp, #4]
   d594e:	9500      	str	r5, [sp, #0]
   d5950:	4a07      	ldr	r2, [pc, #28]	; (d5970 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d5952:	2100      	movs	r1, #0
   d5954:	f003 fead 	bl	d96b2 <_ZN5Print11printf_implEbPKcz>
  }
   d5958:	b004      	add	sp, #16
   d595a:	bd70      	pop	{r4, r5, r6, pc}
   d595c:	000dd129 	.word	0x000dd129
   d5960:	000dd50e 	.word	0x000dd50e
   d5964:	000dd118 	.word	0x000dd118
   d5968:	000dd121 	.word	0x000dd121
   d596c:	000dd125 	.word	0x000dd125
   d5970:	000dd13f 	.word	0x000dd13f

000d5974 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5974:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5976:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5978:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d597a:	b113      	cbz	r3, d5982 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d597c:	2203      	movs	r2, #3
   d597e:	4601      	mov	r1, r0
   d5980:	4798      	blx	r3
    }
   d5982:	4620      	mov	r0, r4
   d5984:	bd10      	pop	{r4, pc}
	...

000d5988 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d5988:	b510      	push	{r4, lr}
   d598a:	4b05      	ldr	r3, [pc, #20]	; (d59a0 <_ZN12AssetTrackerD1Ev+0x18>)
   d598c:	4604      	mov	r4, r0
   d598e:	f840 3b20 	str.w	r3, [r0], #32
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5992:	f7ff ffef 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
   d5996:	4620      	mov	r0, r4
   d5998:	f000 f9c2 	bl	d5d20 <_ZN13LegacyAdapterD1Ev>

}
   d599c:	4620      	mov	r0, r4
   d599e:	bd10      	pop	{r4, pc}
   d59a0:	000dd1fc 	.word	0x000dd1fc

000d59a4 <_ZN12AssetTrackerD0Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d59a4:	b510      	push	{r4, lr}
   d59a6:	4604      	mov	r4, r0

}
   d59a8:	f7ff ffee 	bl	d5988 <_ZN12AssetTrackerD1Ev>
   d59ac:	4620      	mov	r0, r4
   d59ae:	2130      	movs	r1, #48	; 0x30
   d59b0:	f004 fd19 	bl	da3e6 <_ZdlPvj>
   d59b4:	4620      	mov	r0, r4
   d59b6:	bd10      	pop	{r4, pc}

000d59b8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d59b8:	6803      	ldr	r3, [r0, #0]
   d59ba:	b2c9      	uxtb	r1, r1
   d59bc:	689b      	ldr	r3, [r3, #8]
   d59be:	4718      	bx	r3

000d59c0 <_ZN12AssetTrackerC1Ev>:
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59c0:	b538      	push	{r3, r4, r5, lr}
   d59c2:	490b      	ldr	r1, [pc, #44]	; (d59f0 <_ZN12AssetTrackerC1Ev+0x30>)
   d59c4:	4604      	mov	r4, r0
   d59c6:	2500      	movs	r5, #0
   d59c8:	f000 f9b2 	bl	d5d30 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d59cc:	4b09      	ldr	r3, [pc, #36]	; (d59f4 <_ZN12AssetTrackerC1Ev+0x34>)
   d59ce:	6023      	str	r3, [r4, #0]
   d59d0:	7225      	strb	r5, [r4, #8]

	void threadFunction();
	static void threadFunctionStatic(void *param);

	bool useWire = false;
	TwoWire &wire = Wire;
   d59d2:	f004 fcb7 	bl	da344 <_Z19__fetch_global_Wirev>
   d59d6:	2342      	movs	r3, #66	; 0x42
   d59d8:	7423      	strb	r3, [r4, #16]
   d59da:	60e0      	str	r0, [r4, #12]
	uint8_t wireAddr = 0x42;
	USARTSerial &serialPort = Serial1;
   d59dc:	f004 fabc 	bl	d9f58 <_Z22__fetch_global_Serial1v>
	instance = this;
   d59e0:	4b05      	ldr	r3, [pc, #20]	; (d59f8 <_ZN12AssetTrackerC1Ev+0x38>)
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59e2:	6160      	str	r0, [r4, #20]
   d59e4:	61a5      	str	r5, [r4, #24]
   d59e6:	61e5      	str	r5, [r4, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59e8:	62a5      	str	r5, [r4, #40]	; 0x28
	instance = this;
   d59ea:	601c      	str	r4, [r3, #0]
}
   d59ec:	4620      	mov	r0, r4
   d59ee:	bd38      	pop	{r3, r4, r5, pc}
   d59f0:	2003e088 	.word	0x2003e088
   d59f4:	000dd1fc 	.word	0x000dd1fc
   d59f8:	2003e05c 	.word	0x2003e05c

000d59fc <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d59fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d59fe:	6985      	ldr	r5, [r0, #24]
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d5a00:	4606      	mov	r6, r0
	if (thread == NULL) {
   d5a02:	2d00      	cmp	r5, #0
   d5a04:	d13b      	bne.n	d5a7e <_ZN12AssetTracker17startThreadedModeEv+0x82>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5a06:	2004      	movs	r0, #4
   d5a08:	f7fe fb47 	bl	d409a <_Znwj>
   d5a0c:	4604      	mov	r4, r0
   d5a0e:	2800      	cmp	r0, #0
   d5a10:	d034      	beq.n	d5a7c <_ZN12AssetTracker17startThreadedModeEv+0x80>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5a12:	491c      	ldr	r1, [pc, #112]	; (d5a84 <_ZN12AssetTracker17startThreadedModeEv+0x88>)
   d5a14:	2014      	movs	r0, #20
   d5a16:	f004 fcf1 	bl	da3fc <_ZnwjRKSt9nothrow_t>
   d5a1a:	b128      	cbz	r0, d5a28 <_ZN12AssetTracker17startThreadedModeEv+0x2c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5a1c:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a1e:	6005      	str	r5, [r0, #0]
   d5a20:	6045      	str	r5, [r0, #4]
   d5a22:	6085      	str	r5, [r0, #8]
   d5a24:	60c5      	str	r5, [r0, #12]
   d5a26:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a28:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5a2a:	b1b0      	cbz	r0, d5a5a <_ZN12AssetTracker17startThreadedModeEv+0x5e>
            goto error;
        }
        d_->func = function;
   d5a2c:	4b16      	ldr	r3, [pc, #88]	; (d5a88 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d5a2e:	6083      	str	r3, [r0, #8]
   d5a30:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a32:	4916      	ldr	r1, [pc, #88]	; (d5a8c <_ZN12AssetTracker17startThreadedModeEv+0x90>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d5a34:	60de      	str	r6, [r3, #12]
   d5a36:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5a3c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5a40:	2202      	movs	r2, #2
   d5a42:	4b13      	ldr	r3, [pc, #76]	; (d5a90 <_ZN12AssetTracker17startThreadedModeEv+0x94>)
   d5a44:	3004      	adds	r0, #4
   d5a46:	f002 f959 	bl	d7cfc <os_thread_create>
   d5a4a:	b930      	cbnz	r0, d5a5a <_ZN12AssetTracker17startThreadedModeEv+0x5e>
   d5a4c:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d5a4e:	7c1b      	ldrb	r3, [r3, #16]
   d5a50:	b9a3      	cbnz	r3, d5a7c <_ZN12AssetTracker17startThreadedModeEv+0x80>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d5a52:	2001      	movs	r0, #1
   d5a54:	f002 f9d2 	bl	d7dfc <HAL_Delay_Milliseconds>
   d5a58:	e7f8      	b.n	d5a4c <_ZN12AssetTracker17startThreadedModeEv+0x50>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a5a:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a5c:	2300      	movs	r3, #0
   d5a5e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a60:	b165      	cbz	r5, d5a7c <_ZN12AssetTracker17startThreadedModeEv+0x80>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a62:	682f      	ldr	r7, [r5, #0]
   d5a64:	b137      	cbz	r7, d5a74 <_ZN12AssetTracker17startThreadedModeEv+0x78>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a66:	4638      	mov	r0, r7
   d5a68:	f7ff ff84 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a6c:	2110      	movs	r1, #16
   d5a6e:	4638      	mov	r0, r7
   d5a70:	f004 fcb9 	bl	da3e6 <_ZdlPvj>
   d5a74:	2114      	movs	r1, #20
   d5a76:	4628      	mov	r0, r5
   d5a78:	f004 fcb5 	bl	da3e6 <_ZdlPvj>
   d5a7c:	61b4      	str	r4, [r6, #24]
	}
}
   d5a7e:	b003      	add	sp, #12
   d5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a82:	bf00      	nop
   d5a84:	000ddbc8 	.word	0x000ddbc8
   d5a88:	000d5c8d 	.word	0x000d5c8d
   d5a8c:	000dd15d 	.word	0x000dd15d
   d5a90:	000d58ed 	.word	0x000d58ed

000d5a94 <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a94:	b510      	push	{r4, lr}
	useWire = true;
   d5a96:	2301      	movs	r3, #1
   d5a98:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d5a9a:	68c3      	ldr	r3, [r0, #12]
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a9c:	4604      	mov	r4, r0
   d5a9e:	6848      	ldr	r0, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d5aa0:	6058      	str	r0, [r3, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5aa2:	6888      	ldr	r0, [r1, #8]
   d5aa4:	6098      	str	r0, [r3, #8]
   d5aa6:	68c8      	ldr	r0, [r1, #12]
   d5aa8:	60d8      	str	r0, [r3, #12]
  size_t size_;
  bool stop_;
  system_tick_t timeout_;
};

class TwoWire : public Stream
   d5aaa:	7c08      	ldrb	r0, [r1, #16]
   d5aac:	7418      	strb	r0, [r3, #16]
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;

	wire.begin();
   d5aae:	4608      	mov	r0, r1
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;
   d5ab0:	7422      	strb	r2, [r4, #16]

	wire.begin();
   d5ab2:	f003 f9eb 	bl	d8e8c <_ZN7TwoWire5beginEv>

	return *this;
}
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	bd10      	pop	{r4, pc}
	...

000d5abc <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d5abc:	b538      	push	{r3, r4, r5, lr}
   d5abe:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d5ac0:	7c01      	ldrb	r1, [r0, #16]
   d5ac2:	68c0      	ldr	r0, [r0, #12]
   d5ac4:	f003 fa16 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d5ac8:	21fd      	movs	r1, #253	; 0xfd
   d5aca:	68e8      	ldr	r0, [r5, #12]
   d5acc:	f7ff ff74 	bl	d59b8 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5ad0:	2100      	movs	r1, #0
   d5ad2:	68e8      	ldr	r0, [r5, #12]
   d5ad4:	f003 fa15 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5ad8:	b130      	cbz	r0, d5ae8 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d5ada:	490f      	ldr	r1, [pc, #60]	; (d5b18 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d5adc:	4602      	mov	r2, r0
   d5ade:	480f      	ldr	r0, [pc, #60]	; (d5b1c <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d5ae0:	f7fe fbe5 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d5ae4:	2000      	movs	r0, #0
   d5ae6:	bd38      	pop	{r3, r4, r5, pc}
	}

	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d5ae8:	2202      	movs	r2, #2
   d5aea:	2301      	movs	r3, #1
   d5aec:	7c29      	ldrb	r1, [r5, #16]
   d5aee:	68e8      	ldr	r0, [r5, #12]
   d5af0:	f003 f9ee 	bl	d8ed0 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d5af4:	b2c2      	uxtb	r2, r0
   d5af6:	2a02      	cmp	r2, #2
   d5af8:	d001      	beq.n	d5afe <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d5afa:	4909      	ldr	r1, [pc, #36]	; (d5b20 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d5afc:	e7ef      	b.n	d5ade <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
		return 0;
	}

	uint16_t available = wire.read() << 8;
   d5afe:	68e8      	ldr	r0, [r5, #12]
   d5b00:	6803      	ldr	r3, [r0, #0]
   d5b02:	695b      	ldr	r3, [r3, #20]
   d5b04:	4798      	blx	r3
   d5b06:	4604      	mov	r4, r0
	available |= wire.read();
   d5b08:	68e8      	ldr	r0, [r5, #12]
   d5b0a:	6803      	ldr	r3, [r0, #0]
   d5b0c:	695b      	ldr	r3, [r3, #20]
   d5b0e:	4798      	blx	r3
   d5b10:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5b14:	b280      	uxth	r0, r0

	return available;
}
   d5b16:	bd38      	pop	{r3, r4, r5, pc}
   d5b18:	000dd16a 	.word	0x000dd16a
   d5b1c:	2003e27c 	.word	0x2003e27c
   d5b20:	000dd18e 	.word	0x000dd18e

000d5b24 <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b28:	4606      	mov	r6, r0
   d5b2a:	4689      	mov	r9, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d5b2c:	7c01      	ldrb	r1, [r0, #16]
   d5b2e:	68c0      	ldr	r0, [r0, #12]
	available |= wire.read();

	return available;
}

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b30:	4615      	mov	r5, r2
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d5b32:	f003 f9df 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d5b36:	21ff      	movs	r1, #255	; 0xff
   d5b38:	68f0      	ldr	r0, [r6, #12]
   d5b3a:	f7ff ff3d 	bl	d59b8 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5b3e:	2100      	movs	r1, #0
   d5b40:	68f0      	ldr	r0, [r6, #12]
   d5b42:	f003 f9de 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5b46:	4602      	mov	r2, r0
   d5b48:	b108      	cbz	r0, d5b4e <_ZN12AssetTracker13wireReadBytesEPhj+0x2a>
		Log.info("wireReadBytes I2C error %u", res);
   d5b4a:	4918      	ldr	r1, [pc, #96]	; (d5bac <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d5b4c:	e015      	b.n	d5b7a <_ZN12AssetTracker13wireReadBytesEPhj+0x56>
   d5b4e:	4604      	mov	r4, r0
		return -1;
	}

	size_t offset = 0;

	while(offset < len) {
   d5b50:	42ac      	cmp	r4, r5
   d5b52:	d227      	bcs.n	d5ba4 <_ZN12AssetTracker13wireReadBytesEPhj+0x80>
		size_t reqLen = (len - offset);
   d5b54:	1b2f      	subs	r7, r5, r4
   d5b56:	2f20      	cmp	r7, #32
   d5b58:	bf28      	it	cs
   d5b5a:	2720      	movcs	r7, #32
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d5b5c:	eb04 0a07 	add.w	sl, r4, r7
   d5b60:	ebca 0205 	rsb	r2, sl, r5
   d5b64:	4253      	negs	r3, r2
   d5b66:	4153      	adcs	r3, r2
   d5b68:	7c31      	ldrb	r1, [r6, #16]
   d5b6a:	68f0      	ldr	r0, [r6, #12]
   d5b6c:	463a      	mov	r2, r7
   d5b6e:	f003 f9af 	bl	d8ed0 <_ZN7TwoWire11requestFromEhjh>
   d5b72:	b2c2      	uxtb	r2, r0
		if (res != reqLen) {
   d5b74:	4297      	cmp	r7, r2
   d5b76:	d007      	beq.n	d5b88 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d5b78:	490d      	ldr	r1, [pc, #52]	; (d5bb0 <_ZN12AssetTracker13wireReadBytesEPhj+0x8c>)
   d5b7a:	480e      	ldr	r0, [pc, #56]	; (d5bb4 <_ZN12AssetTracker13wireReadBytesEPhj+0x90>)
   d5b7c:	f7fe fb97 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d5b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5b88:	444c      	add	r4, r9
		size_t reqLen = (len - offset);
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
   d5b8a:	46a0      	mov	r8, r4
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
			buf[offset + ii] = wire.read();
   d5b8c:	68f0      	ldr	r0, [r6, #12]
   d5b8e:	6803      	ldr	r3, [r0, #0]
   d5b90:	695b      	ldr	r3, [r3, #20]
   d5b92:	4798      	blx	r3
   d5b94:	f808 0b01 	strb.w	r0, [r8], #1
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
   d5b98:	ebc4 0308 	rsb	r3, r4, r8
   d5b9c:	429f      	cmp	r7, r3
   d5b9e:	d8f5      	bhi.n	d5b8c <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
   d5ba0:	4654      	mov	r4, sl
   d5ba2:	e7d5      	b.n	d5b50 <_ZN12AssetTracker13wireReadBytesEPhj+0x2c>
 	}
	return len;
   d5ba4:	4628      	mov	r0, r5
}
   d5ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5baa:	bf00      	nop
   d5bac:	000dd1b8 	.word	0x000dd1b8
   d5bb0:	000dd1d3 	.word	0x000dd1d3
   d5bb4:	2003e27c 	.word	0x2003e27c

000d5bb8 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5bb8:	4800      	ldr	r0, [pc, #0]	; (d5bbc <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d5bba:	4770      	bx	lr
   d5bbc:	2003e088 	.word	0x2003e088

000d5bc0 <_ZNKSt8functionIFbcEEclEc>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5bc0:	b507      	push	{r0, r1, r2, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bc2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5bc4:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bc8:	b90a      	cbnz	r2, d5bce <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d5bca:	f004 fc28 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bce:	68c3      	ldr	r3, [r0, #12]
   d5bd0:	f10d 0107 	add.w	r1, sp, #7
   d5bd4:	4798      	blx	r3
    }
   d5bd6:	b003      	add	sp, #12
   d5bd8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bdc <_ZN12AssetTracker9updateGPSEv>:
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d5bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!useWire) {
   d5be0:	7a03      	ldrb	r3, [r0, #8]
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d5be2:	b089      	sub	sp, #36	; 0x24
   d5be4:	4604      	mov	r4, r0
	if (!useWire) {
   d5be6:	b913      	cbnz	r3, d5bee <_ZN12AssetTracker9updateGPSEv+0x12>
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
			gps.encode(c);
			if (externalDecoder) {
				externalDecoder(c);
   d5be8:	f100 0620 	add.w	r6, r0, #32
   d5bec:	e03b      	b.n	d5c66 <_ZN12AssetTracker9updateGPSEv+0x8a>
		}
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
   d5bee:	f8d0 800c 	ldr.w	r8, [r0, #12]
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5bf2:	4640      	mov	r0, r8
   d5bf4:	f003 f98d 	bl	d8f12 <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	f7ff ff5f 	bl	d5abc <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d5bfe:	2820      	cmp	r0, #32
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
						if (externalDecoder) {
							externalDecoder(buf[ii]);
   d5c00:	f104 0920 	add.w	r9, r4, #32
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
   d5c04:	4605      	mov	r5, r0
			if (available > 32) {
   d5c06:	d801      	bhi.n	d5c0c <_ZN12AssetTracker9updateGPSEv+0x30>
				available = 32;
			}
			if (available > 0) {
   d5c08:	b908      	cbnz	r0, d5c0e <_ZN12AssetTracker9updateGPSEv+0x32>
   d5c0a:	e019      	b.n	d5c40 <_ZN12AssetTracker9updateGPSEv+0x64>
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
			if (available > 32) {
				available = 32;
   d5c0c:	2520      	movs	r5, #32
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
   d5c0e:	462a      	mov	r2, r5
   d5c10:	4669      	mov	r1, sp
   d5c12:	4620      	mov	r0, r4
   d5c14:	f7ff ff86 	bl	d5b24 <_ZN12AssetTracker13wireReadBytesEPhj>
   d5c18:	42a8      	cmp	r0, r5
   d5c1a:	466f      	mov	r7, sp
   d5c1c:	d110      	bne.n	d5c40 <_ZN12AssetTracker9updateGPSEv+0x64>
   d5c1e:	466e      	mov	r6, sp
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
   d5c20:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5c24:	4814      	ldr	r0, [pc, #80]	; (d5c78 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d5c26:	f000 fb91 	bl	d634c <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d5c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c2c:	b123      	cbz	r3, d5c38 <_ZN12AssetTracker9updateGPSEv+0x5c>
							externalDecoder(buf[ii]);
   d5c2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d5c32:	4648      	mov	r0, r9
   d5c34:	f7ff ffc4 	bl	d5bc0 <_ZNKSt8functionIFbcEEclEc>
			if (available > 32) {
				available = 32;
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
   d5c38:	1bf3      	subs	r3, r6, r7
   d5c3a:	b29b      	uxth	r3, r3
   d5c3c:	42ab      	cmp	r3, r5
   d5c3e:	d3ef      	bcc.n	d5c20 <_ZN12AssetTracker9updateGPSEv+0x44>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5c40:	4640      	mov	r0, r8
   d5c42:	f003 f96f 	bl	d8f24 <_ZN7TwoWire6unlockEv>
   d5c46:	e014      	b.n	d5c72 <_ZN12AssetTracker9updateGPSEv+0x96>
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
   d5c48:	6960      	ldr	r0, [r4, #20]
   d5c4a:	6803      	ldr	r3, [r0, #0]
   d5c4c:	695b      	ldr	r3, [r3, #20]
   d5c4e:	4798      	blx	r3
   d5c50:	b2c5      	uxtb	r5, r0
			gps.encode(c);
   d5c52:	4629      	mov	r1, r5
   d5c54:	4808      	ldr	r0, [pc, #32]	; (d5c78 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d5c56:	f000 fb79 	bl	d634c <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d5c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c5c:	b11b      	cbz	r3, d5c66 <_ZN12AssetTracker9updateGPSEv+0x8a>
				externalDecoder(c);
   d5c5e:	4629      	mov	r1, r5
   d5c60:	4630      	mov	r0, r6
   d5c62:	f7ff ffad 	bl	d5bc0 <_ZNKSt8functionIFbcEEclEc>
	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
   d5c66:	6960      	ldr	r0, [r4, #20]
   d5c68:	6803      	ldr	r3, [r0, #0]
   d5c6a:	691b      	ldr	r3, [r3, #16]
   d5c6c:	4798      	blx	r3
   d5c6e:	2800      	cmp	r0, #0
   d5c70:	dcea      	bgt.n	d5c48 <_ZN12AssetTracker9updateGPSEv+0x6c>
					}
				}
			}
		}
	}
}
   d5c72:	b009      	add	sp, #36	; 0x24
   d5c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c78:	2003e088 	.word	0x2003e088

000d5c7c <_ZN12AssetTracker14threadFunctionEv>:
	if (thread == NULL) {
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
	}
}

void AssetTracker::threadFunction() {
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4604      	mov	r4, r0
	while(true) {
		updateGPS();
   d5c80:	4620      	mov	r0, r4
   d5c82:	f7ff ffab 	bl	d5bdc <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d5c86:	f002 f849 	bl	d7d1c <os_thread_yield>
   d5c8a:	e7f9      	b.n	d5c80 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d5c8c <_ZN12AssetTracker20threadFunctionStaticEPv>:
	}
}

// [static]
void AssetTracker::threadFunctionStatic(void *param) {
   d5c8c:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d5c8e:	f7ff fff5 	bl	d5c7c <_ZN12AssetTracker14threadFunctionEv>
	...

000d5c94 <_GLOBAL__sub_I_emptyResponse>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5c94:	b570      	push	{r4, r5, r6, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d5c96:	4c19      	ldr	r4, [pc, #100]	; (d5cfc <_GLOBAL__sub_I_emptyResponse+0x68>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c98:	4e19      	ldr	r6, [pc, #100]	; (d5d00 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d5c9a:	f002 f8f7 	bl	d7e8c <HAL_Pin_Map>
   d5c9e:	2108      	movs	r1, #8
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f000 fd47 	bl	d6734 <_ZN6LIS3DHC1Ei>
   d5ca6:	6831      	ldr	r1, [r6, #0]
   d5ca8:	4b16      	ldr	r3, [pc, #88]	; (d5d04 <_GLOBAL__sub_I_emptyResponse+0x70>)
   d5caa:	6023      	str	r3, [r4, #0]
   d5cac:	f011 0501 	ands.w	r5, r1, #1
   d5cb0:	d10a      	bne.n	d5cc8 <_GLOBAL__sub_I_emptyResponse+0x34>
   d5cb2:	4630      	mov	r0, r6
   d5cb4:	f7fe fa02 	bl	d40bc <__cxa_guard_acquire>
   d5cb8:	b130      	cbz	r0, d5cc8 <_GLOBAL__sub_I_emptyResponse+0x34>
   d5cba:	4629      	mov	r1, r5
   d5cbc:	4812      	ldr	r0, [pc, #72]	; (d5d08 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5cbe:	f003 fd4d 	bl	d975c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5cc2:	4630      	mov	r0, r6
   d5cc4:	f7fe f9ff 	bl	d40c6 <__cxa_guard_release>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d5cc8:	4a10      	ldr	r2, [pc, #64]	; (d5d0c <_GLOBAL__sub_I_emptyResponse+0x78>)
   d5cca:	61a2      	str	r2, [r4, #24]
   d5ccc:	4b0e      	ldr	r3, [pc, #56]	; (d5d08 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5cce:	4a10      	ldr	r2, [pc, #64]	; (d5d10 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d5cd0:	60e3      	str	r3, [r4, #12]
   d5cd2:	6222      	str	r2, [r4, #32]
   d5cd4:	2311      	movs	r3, #17
   d5cd6:	2201      	movs	r2, #1
   d5cd8:	6123      	str	r3, [r4, #16]
   d5cda:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
   d5cde:	2300      	movs	r3, #0
 */

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
   d5ce0:	4a0c      	ldr	r2, [pc, #48]	; (d5d14 <_GLOBAL__sub_I_emptyResponse+0x80>)
   d5ce2:	490d      	ldr	r1, [pc, #52]	; (d5d18 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d5ce4:	4805      	ldr	r0, [pc, #20]	; (d5cfc <_GLOBAL__sub_I_emptyResponse+0x68>)
   d5ce6:	7523      	strb	r3, [r4, #20]
   d5ce8:	7723      	strb	r3, [r4, #28]
   d5cea:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d5cee:	f004 fb75 	bl	da3dc <__aeabi_atexit>
static TinyGPSPlus gps;
   d5cf2:	480a      	ldr	r0, [pc, #40]	; (d5d1c <_GLOBAL__sub_I_emptyResponse+0x88>)
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
static TinyGPSPlus gps;
   d5cf8:	f000 b878 	b.w	d5dec <_ZN11TinyGPSPlusC1Ev>
   d5cfc:	2003e060 	.word	0x2003e060
   d5d00:	2003e050 	.word	0x2003e050
   d5d04:	000dd5b8 	.word	0x000dd5b8
   d5d08:	2003e054 	.word	0x2003e054
   d5d0c:	000dd114 	.word	0x000dd114
   d5d10:	00989680 	.word	0x00989680
   d5d14:	2003de88 	.word	0x2003de88
   d5d18:	000d6675 	.word	0x000d6675
   d5d1c:	2003e088 	.word	0x2003e088

000d5d20 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d5d20:	4770      	bx	lr

000d5d22 <_ZN13LegacyAdapterD0Ev>:

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d5d22:	b510      	push	{r4, lr}

}
   d5d24:	2108      	movs	r1, #8

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d5d26:	4604      	mov	r4, r0

}
   d5d28:	f004 fb5d 	bl	da3e6 <_ZdlPvj>
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	bd10      	pop	{r4, pc}

000d5d30 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:

#include "LegacyAdapter.h"


LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d5d30:	4a01      	ldr	r2, [pc, #4]	; (d5d38 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d5d32:	6002      	str	r2, [r0, #0]
   d5d34:	6041      	str	r1, [r0, #4]

}
   d5d36:	4770      	bx	lr
   d5d38:	000dd20c 	.word	0x000dd20c

000d5d3c <_GLOBAL__sub_I__ZN13LegacyAdapterC2ER11TinyGPSPlus>:
   d5d3c:	f002 b8a6 	b.w	d7e8c <HAL_Pin_Map>

000d5d40 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d40:	2200      	movs	r2, #0
   d5d42:	7002      	strb	r2, [r0, #0]
   d5d44:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d5d46:	8082      	strh	r2, [r0, #4]
   d5d48:	6082      	str	r2, [r0, #8]
   d5d4a:	7302      	strb	r2, [r0, #12]
   d5d4c:	8202      	strh	r2, [r0, #16]
   d5d4e:	6142      	str	r2, [r0, #20]
   d5d50:	7602      	strb	r2, [r0, #24]
   d5d52:	8382      	strh	r2, [r0, #28]
   d5d54:	6202      	str	r2, [r0, #32]
   d5d56:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5d5a:	8502      	strh	r2, [r0, #40]	; 0x28
   d5d5c:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5d5e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d62:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5d64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d5d68:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d5d6c:	63c2      	str	r2, [r0, #60]	; 0x3c
   d5d6e:	6402      	str	r2, [r0, #64]	; 0x40
   d5d70:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5d72:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d5d76:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d5d7a:	64c2      	str	r2, [r0, #76]	; 0x4c
   d5d7c:	6502      	str	r2, [r0, #80]	; 0x50
   d5d7e:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d80:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d5d84:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d5d88:	65c2      	str	r2, [r0, #92]	; 0x5c
   d5d8a:	6602      	str	r2, [r0, #96]	; 0x60
   d5d8c:	6642      	str	r2, [r0, #100]	; 0x64
   d5d8e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d5d92:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d5d96:	66c2      	str	r2, [r0, #108]	; 0x6c
   d5d98:	6702      	str	r2, [r0, #112]	; 0x70
   d5d9a:	6742      	str	r2, [r0, #116]	; 0x74
   d5d9c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d5da0:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d5da4:	67c2      	str	r2, [r0, #124]	; 0x7c
   d5da6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d5daa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d5dae:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d5db2:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d5db6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d5dba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d5dbe:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dc2:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d5dc6:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d5dca:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d5dce:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d5dd2:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dd6:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d5dda:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d5dde:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d5de2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d5de6:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d5dea:	4770      	bx	lr

000d5dec <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d5dec:	b510      	push	{r4, lr}
   d5dee:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5df0:	f7ff ffa6 	bl	d5d40 <_ZN11TinyGPSDataC1Ev>
   d5df4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d5df8:	f7ff ffa2 	bl	d5d40 <_ZN11TinyGPSDataC1Ev>
   d5dfc:	2300      	movs	r3, #0
   d5dfe:	2202      	movs	r2, #2
   d5e00:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d5e04:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d5e08:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d5e0c:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d5e10:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d5e14:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d5e18:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d5e1c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d5e20:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d5e24:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d5e28:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d5e2c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d5e30:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d5e34:	4620      	mov	r0, r4
   d5e36:	bd10      	pop	{r4, pc}

000d5e38 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5e38:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5e3c:	2b05      	cmp	r3, #5
   d5e3e:	d802      	bhi.n	d5e46 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5e40:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5e44:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5e46:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5e4a:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5e4c:	bf94      	ite	ls
   d5e4e:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5e52:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5e56:	4770      	bx	lr

000d5e58 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5e58:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5e5a:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5e5c:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d5e5e:	2d2d      	cmp	r5, #45	; 0x2d
   d5e60:	bf08      	it	eq
   d5e62:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5e64:	4620      	mov	r0, r4
   d5e66:	f005 f965 	bl	db134 <atol>
   d5e6a:	2364      	movs	r3, #100	; 0x64
   d5e6c:	4358      	muls	r0, r3
   d5e6e:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5e70:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5e74:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5e78:	2909      	cmp	r1, #9
   d5e7a:	d9f8      	bls.n	d5e6e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5e7c:	2b2e      	cmp	r3, #46	; 0x2e
   d5e7e:	d10b      	bne.n	d5e98 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5e80:	7853      	ldrb	r3, [r2, #1]
   d5e82:	3b30      	subs	r3, #48	; 0x30
   d5e84:	2b09      	cmp	r3, #9
   d5e86:	d807      	bhi.n	d5e98 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5e88:	210a      	movs	r1, #10
   d5e8a:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5e8e:	7893      	ldrb	r3, [r2, #2]
   d5e90:	3b30      	subs	r3, #48	; 0x30
   d5e92:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5e94:	bf98      	it	ls
   d5e96:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5e98:	2d2d      	cmp	r5, #45	; 0x2d
   d5e9a:	bf08      	it	eq
   d5e9c:	4240      	negeq	r0, r0
}
   d5e9e:	bd38      	pop	{r3, r4, r5, pc}

000d5ea0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5ea0:	b538      	push	{r3, r4, r5, lr}
   d5ea2:	4604      	mov	r4, r0
   d5ea4:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5ea6:	f005 f945 	bl	db134 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5eaa:	2364      	movs	r3, #100	; 0x64
   d5eac:	fbb0 f2f3 	udiv	r2, r0, r3
   d5eb0:	fb03 0012 	mls	r0, r3, r2, r0
   d5eb4:	4b11      	ldr	r3, [pc, #68]	; (d5efc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5eb6:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5eb8:	4343      	muls	r3, r0
   d5eba:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d5ebc:	7802      	ldrb	r2, [r0, #0]
   d5ebe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d5ec2:	2909      	cmp	r1, #9
   d5ec4:	4604      	mov	r4, r0
   d5ec6:	f100 0001 	add.w	r0, r0, #1
   d5eca:	d9f7      	bls.n	d5ebc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5ecc:	2a2e      	cmp	r2, #46	; 0x2e
   d5ece:	d10b      	bne.n	d5ee8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d5ed0:	490a      	ldr	r1, [pc, #40]	; (d5efc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5ed2:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d5ed4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d5ed8:	3a30      	subs	r2, #48	; 0x30
   d5eda:	2a09      	cmp	r2, #9
   d5edc:	d804      	bhi.n	d5ee8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d5ede:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5ee2:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d5ee6:	e7f5      	b.n	d5ed4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5ee8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5eec:	3301      	adds	r3, #1
   d5eee:	2203      	movs	r2, #3
   d5ef0:	fbb3 f3f2 	udiv	r3, r3, r2
   d5ef4:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5ef6:	2300      	movs	r3, #0
   d5ef8:	722b      	strb	r3, [r5, #8]
   d5efa:	bd38      	pop	{r3, r4, r5, pc}
   d5efc:	00989680 	.word	0x00989680

000d5f00 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5f00:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5f02:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5f04:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5f06:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5f0a:	6042      	str	r2, [r0, #4]
   d5f0c:	685a      	ldr	r2, [r3, #4]
   d5f0e:	6082      	str	r2, [r0, #8]
   d5f10:	7a1b      	ldrb	r3, [r3, #8]
   d5f12:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5f14:	4603      	mov	r3, r0
   d5f16:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5f1a:	6102      	str	r2, [r0, #16]
   d5f1c:	685a      	ldr	r2, [r3, #4]
   d5f1e:	6142      	str	r2, [r0, #20]
   d5f20:	7a1b      	ldrb	r3, [r3, #8]
   d5f22:	7603      	strb	r3, [r0, #24]
   d5f24:	f001 ff7a 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f28:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d5f2a:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5f2c:	7063      	strb	r3, [r4, #1]
   d5f2e:	7023      	strb	r3, [r4, #0]
   d5f30:	bd10      	pop	{r4, pc}
   d5f32:	0000      	movs	r0, r0
   d5f34:	0000      	movs	r0, r0
	...

000d5f38 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5f38:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5f3a:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5f3c:	4604      	mov	r4, r0
   updated = false;
   d5f3e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5f40:	6880      	ldr	r0, [r0, #8]
   d5f42:	f004 fcf9 	bl	da938 <__aeabi_ui2d>
   d5f46:	a30e      	add	r3, pc, #56	; (adr r3, d5f80 <_ZN15TinyGPSLocation3latEv+0x48>)
   d5f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f4c:	f004 fe94 	bl	dac78 <__aeabi_ddiv>
   d5f50:	4606      	mov	r6, r0
   d5f52:	88a0      	ldrh	r0, [r4, #4]
   d5f54:	460f      	mov	r7, r1
   d5f56:	f004 fcff 	bl	da958 <__aeabi_i2d>
   d5f5a:	460b      	mov	r3, r1
   d5f5c:	4602      	mov	r2, r0
   d5f5e:	4639      	mov	r1, r7
   d5f60:	4630      	mov	r0, r6
   d5f62:	f004 fbad 	bl	da6c0 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5f66:	7b23      	ldrb	r3, [r4, #12]
   d5f68:	b11b      	cbz	r3, d5f72 <_ZN15TinyGPSLocation3latEv+0x3a>
   d5f6a:	4602      	mov	r2, r0
   d5f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5f70:	e001      	b.n	d5f76 <_ZN15TinyGPSLocation3latEv+0x3e>
   d5f72:	4602      	mov	r2, r0
   d5f74:	460b      	mov	r3, r1
}
   d5f76:	ec43 2b10 	vmov	d0, r2, r3
   d5f7a:	bdd0      	pop	{r4, r6, r7, pc}
   d5f7c:	f3af 8000 	nop.w
   d5f80:	00000000 	.word	0x00000000
   d5f84:	41cdcd65 	.word	0x41cdcd65

000d5f88 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5f88:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5f8a:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d5f8c:	4604      	mov	r4, r0
   updated = false;
   d5f8e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5f90:	6940      	ldr	r0, [r0, #20]
   d5f92:	f004 fcd1 	bl	da938 <__aeabi_ui2d>
   d5f96:	a30e      	add	r3, pc, #56	; (adr r3, d5fd0 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d5f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f9c:	f004 fe6c 	bl	dac78 <__aeabi_ddiv>
   d5fa0:	4606      	mov	r6, r0
   d5fa2:	8a20      	ldrh	r0, [r4, #16]
   d5fa4:	460f      	mov	r7, r1
   d5fa6:	f004 fcd7 	bl	da958 <__aeabi_i2d>
   d5faa:	460b      	mov	r3, r1
   d5fac:	4602      	mov	r2, r0
   d5fae:	4639      	mov	r1, r7
   d5fb0:	4630      	mov	r0, r6
   d5fb2:	f004 fb85 	bl	da6c0 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5fb6:	7e23      	ldrb	r3, [r4, #24]
   d5fb8:	b11b      	cbz	r3, d5fc2 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d5fba:	4602      	mov	r2, r0
   d5fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5fc0:	e001      	b.n	d5fc6 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d5fc2:	4602      	mov	r2, r0
   d5fc4:	460b      	mov	r3, r1
}
   d5fc6:	ec43 2b10 	vmov	d0, r2, r3
   d5fca:	bdd0      	pop	{r4, r6, r7, pc}
   d5fcc:	f3af 8000 	nop.w
   d5fd0:	00000000 	.word	0x00000000
   d5fd4:	41cdcd65 	.word	0x41cdcd65

000d5fd8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5fd8:	b510      	push	{r4, lr}
   date = newDate;
   d5fda:	6883      	ldr	r3, [r0, #8]
   d5fdc:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d5fde:	4604      	mov	r4, r0
   d5fe0:	f001 ff1c 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d5fe4:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d5fe6:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5fe8:	7063      	strb	r3, [r4, #1]
   d5fea:	7023      	strb	r3, [r4, #0]
   d5fec:	bd10      	pop	{r4, pc}

000d5fee <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d5fee:	b510      	push	{r4, lr}
   time = newTime;
   d5ff0:	6883      	ldr	r3, [r0, #8]
   d5ff2:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d5ff4:	4604      	mov	r4, r0
   d5ff6:	f001 ff11 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d5ffa:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d5ffc:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5ffe:	7063      	strb	r3, [r4, #1]
   d6000:	7023      	strb	r3, [r4, #0]
   d6002:	bd10      	pop	{r4, pc}

000d6004 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d6004:	b510      	push	{r4, lr}
   d6006:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6008:	4608      	mov	r0, r1
   d600a:	f7ff ff25 	bl	d5e58 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d600e:	60a0      	str	r0, [r4, #8]
   d6010:	bd10      	pop	{r4, pc}

000d6012 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d6012:	b510      	push	{r4, lr}
   d6014:	4604      	mov	r4, r0
   newDate = atol(term);
   d6016:	4608      	mov	r0, r1
   d6018:	f005 f88c 	bl	db134 <atol>
   d601c:	60a0      	str	r0, [r4, #8]
   d601e:	bd10      	pop	{r4, pc}

000d6020 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6020:	b510      	push	{r4, lr}
   val = newval;
   d6022:	68c3      	ldr	r3, [r0, #12]
   d6024:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6026:	4604      	mov	r4, r0
   d6028:	f001 fef8 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d602c:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d602e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6030:	7063      	strb	r3, [r4, #1]
   d6032:	7023      	strb	r3, [r4, #0]
   d6034:	bd10      	pop	{r4, pc}

000d6036 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d6036:	b510      	push	{r4, lr}
   d6038:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d603a:	4608      	mov	r0, r1
   d603c:	f7ff ff0c 	bl	d5e58 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6040:	60e0      	str	r0, [r4, #12]
   d6042:	bd10      	pop	{r4, pc}

000d6044 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d6044:	b510      	push	{r4, lr}
   val = newval;
   d6046:	68c3      	ldr	r3, [r0, #12]
   d6048:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d604a:	4604      	mov	r4, r0
   d604c:	f001 fee6 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d6050:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d6052:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6054:	7063      	strb	r3, [r4, #1]
   d6056:	7023      	strb	r3, [r4, #0]
   d6058:	bd10      	pop	{r4, pc}

000d605a <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d605a:	b510      	push	{r4, lr}
   d605c:	4604      	mov	r4, r0
   newval = atol(term);
   d605e:	4608      	mov	r0, r1
   d6060:	f005 f868 	bl	db134 <atol>
   d6064:	60e0      	str	r0, [r4, #12]
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6068:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d606a:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d606c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d606e:	3010      	adds	r0, #16
   d6070:	f005 fcc2 	bl	db9f8 <strcpy>
   d6074:	f001 fed2 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6078:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d607a:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d607c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d6080:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d6084:	bd10      	pop	{r4, pc}

000d6086 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6086:	2210      	movs	r2, #16
   d6088:	f006 ba0b 	b.w	dc4a2 <strncpy>

000d608c <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d608e:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d6092:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d6094:	2d00      	cmp	r5, #0
   d6096:	f000 808b 	beq.w	d61b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d609a:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d609e:	f7ff fecb 	bl	d5e38 <_ZN11TinyGPSPlus7fromHexEc>
   d60a2:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d60a6:	4602      	mov	r2, r0
   d60a8:	4620      	mov	r0, r4
   d60aa:	f7ff fec5 	bl	d5e38 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d60ae:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d60b2:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d60b6:	b2c0      	uxtb	r0, r0
   d60b8:	4283      	cmp	r3, r0
   d60ba:	d172      	bne.n	d61a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d60bc:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d60c0:	3301      	adds	r3, #1
   d60c2:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d60c6:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d60ca:	b123      	cbz	r3, d60d6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d60cc:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d60d0:	3301      	adds	r3, #1
   d60d2:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d60d6:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d60da:	b1fb      	cbz	r3, d611c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d60dc:	2b01      	cmp	r3, #1
   d60de:	d14d      	bne.n	d617c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d60e0:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d60e4:	f7ff ff78 	bl	d5fd8 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d60e8:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d60ec:	f7ff ff7f 	bl	d5fee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d60f0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d60f4:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d60f8:	b14b      	cbz	r3, d610e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d60fa:	4630      	mov	r0, r6
   d60fc:	f7ff ff00 	bl	d5f00 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d6100:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6104:	f7ff ff8c 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6108:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d610c:	e027      	b.n	d615e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d610e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d6112:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6116:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d611a:	e022      	b.n	d6162 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d611c:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6120:	f7ff ff65 	bl	d5fee <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6124:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6128:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d612c:	b15b      	cbz	r3, d6146 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d612e:	4630      	mov	r0, r6
   d6130:	f7ff fee6 	bl	d5f00 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d6134:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d6138:	f7ff ff72 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d613c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d6140:	f7ff ff6e 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
   d6144:	e005      	b.n	d6152 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d6146:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d614a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d614e:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d6152:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d6156:	f7ff ff75 	bl	d6044 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d615a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d615e:	f7ff ff5f 	bl	d6020 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d6162:	2100      	movs	r1, #0
   d6164:	4608      	mov	r0, r1
   d6166:	f001 fdf1 	bl	d7d4c <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d616a:	4631      	mov	r1, r6
   d616c:	22b8      	movs	r2, #184	; 0xb8
   d616e:	4620      	mov	r0, r4
   d6170:	f005 f994 	bl	db49c <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d6174:	2100      	movs	r1, #0
   d6176:	2001      	movs	r0, #1
   d6178:	f001 fde8 	bl	d7d4c <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d617c:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d6180:	2e00      	cmp	r6, #0
   d6182:	f000 80d9 	beq.w	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d6186:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d618a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d618c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d618e:	f005 fc29 	bl	db9e4 <strcmp>
   d6192:	2800      	cmp	r0, #0
   d6194:	f040 80d0 	bne.w	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d6198:	4630      	mov	r0, r6
   d619a:	f7ff ff65 	bl	d6068 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d619e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d61a0:	e7ee      	b.n	d6180 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d61a2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d61a6:	3301      	adds	r3, #1
   d61a8:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d61ac:	2500      	movs	r5, #0
   d61ae:	e0c3      	b.n	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d61b0:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d61b4:	bb72      	cbnz	r2, d6214 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d61b6:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d61ba:	4960      	ldr	r1, [pc, #384]	; (d633c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d61bc:	4630      	mov	r0, r6
   d61be:	f005 fc11 	bl	db9e4 <strcmp>
   d61c2:	b120      	cbz	r0, d61ce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d61c4:	495e      	ldr	r1, [pc, #376]	; (d6340 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d61c6:	4630      	mov	r0, r6
   d61c8:	f005 fc0c 	bl	db9e4 <strcmp>
   d61cc:	b908      	cbnz	r0, d61d2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d61ce:	2301      	movs	r3, #1
   d61d0:	e00c      	b.n	d61ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d61d2:	495c      	ldr	r1, [pc, #368]	; (d6344 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d61d4:	4630      	mov	r0, r6
   d61d6:	f005 fc05 	bl	db9e4 <strcmp>
   d61da:	b120      	cbz	r0, d61e6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d61dc:	495a      	ldr	r1, [pc, #360]	; (d6348 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d61de:	4630      	mov	r0, r6
   d61e0:	f005 fc00 	bl	db9e4 <strcmp>
   d61e4:	b908      	cbnz	r0, d61ea <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d61e6:	2300      	movs	r3, #0
   d61e8:	e000      	b.n	d61ec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d61ea:	2302      	movs	r3, #2
   d61ec:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d61f0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d61f4:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d61f8:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d61fc:	2f00      	cmp	r7, #0
   d61fe:	f000 809b 	beq.w	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d6202:	4631      	mov	r1, r6
   d6204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d6206:	f005 fbed 	bl	db9e4 <strcmp>
   d620a:	2800      	cmp	r0, #0
   d620c:	f280 8090 	bge.w	d6330 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d6210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d6212:	e7ef      	b.n	d61f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6214:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d6218:	2902      	cmp	r1, #2
   d621a:	d071      	beq.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d621c:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d6220:	2b00      	cmp	r3, #0
   d6222:	d06d      	beq.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6224:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d6228:	3a01      	subs	r2, #1
   d622a:	2a28      	cmp	r2, #40	; 0x28
   d622c:	d868      	bhi.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d622e:	e8df f002 	tbb	[pc, r2]
   d6232:	2115      	.short	0x2115
   d6234:	49322b24 	.word	0x49322b24
   d6238:	675c5750 	.word	0x675c5750
   d623c:	67676761 	.word	0x67676761
   d6240:	67676767 	.word	0x67676767
   d6244:	67676767 	.word	0x67676767
   d6248:	67676767 	.word	0x67676767
   d624c:	67676767 	.word	0x67676767
   d6250:	1c156767 	.word	0x1c156767
   d6254:	322b2421 	.word	0x322b2421
   d6258:	3e39      	.short	0x3e39
   d625a:	43          	.byte	0x43
   d625b:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d625c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6260:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d6264:	f7ff fece 	bl	d6004 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d6268:	e04a      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d626a:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d626e:	4243      	negs	r3, r0
   d6270:	4143      	adcs	r3, r0
   d6272:	e02b      	b.n	d62cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d6274:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d6278:	e008      	b.n	d628c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d627a:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d627e:	424b      	negs	r3, r1
   d6280:	414b      	adcs	r3, r1
   d6282:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d6286:	e03b      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6288:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d628c:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d6290:	f7ff fe06 	bl	d5ea0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d6294:	e034      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d6296:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d629a:	4253      	negs	r3, r2
   d629c:	4153      	adcs	r3, r2
   d629e:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d62a2:	e02d      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d62a4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62a8:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d62ac:	e026      	b.n	d62fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d62ae:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62b2:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d62b6:	e021      	b.n	d62fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d62b8:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62bc:	30f0      	adds	r0, #240	; 0xf0
   d62be:	f7ff fea8 	bl	d6012 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d62c2:	e01d      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d62c4:	2b30      	cmp	r3, #48	; 0x30
   d62c6:	bf94      	ite	ls
   d62c8:	2300      	movls	r3, #0
   d62ca:	2301      	movhi	r3, #1
   d62cc:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d62d0:	e016      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d62d2:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62d6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d62da:	f7ff febe 	bl	d605a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d62de:	e00f      	b.n	d6300 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d62e0:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62e4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d62e8:	e008      	b.n	d62fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d62ea:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62ee:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d62f2:	e003      	b.n	d62fc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d62f4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62f8:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d62fc:	f7ff fe9b 	bl	d6036 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6300:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d6304:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6308:	b1b6      	cbz	r6, d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d630a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d630e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6310:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6312:	f005 fb67 	bl	db9e4 <strcmp>
   d6316:	b978      	cbnz	r0, d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d6318:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d631a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d631e:	429a      	cmp	r2, r3
   d6320:	dc0a      	bgt.n	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d6322:	d103      	bne.n	d632c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d6324:	4639      	mov	r1, r7
   d6326:	4630      	mov	r0, r6
   d6328:	f7ff fead 	bl	d6086 <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d632c:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d632e:	e7eb      	b.n	d6308 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6330:	d002      	beq.n	d6338 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d6332:	2300      	movs	r3, #0
   d6334:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d6338:	4628      	mov	r0, r5
   d633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d633c:	000dd214 	.word	0x000dd214
   d6340:	000dd21a 	.word	0x000dd21a
   d6344:	000dd220 	.word	0x000dd220
   d6348:	000dd226 	.word	0x000dd226

000d634c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d634c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d634e:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d6352:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d6354:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d6358:	4604      	mov	r4, r0
   d635a:	460d      	mov	r5, r1
  ++encodedCharCount;
   d635c:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d6360:	d02a      	beq.n	d63b8 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d6362:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d6366:	d804      	bhi.n	d6372 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d6368:	290a      	cmp	r1, #10
   d636a:	d00c      	beq.n	d6386 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d636c:	290d      	cmp	r1, #13
   d636e:	d132      	bne.n	d63d6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d6370:	e009      	b.n	d6386 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6372:	292a      	cmp	r1, #42	; 0x2a
   d6374:	d007      	beq.n	d6386 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d6376:	292c      	cmp	r1, #44	; 0x2c
   d6378:	d12d      	bne.n	d63d6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d637a:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d637e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d6382:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d6386:	2b0e      	cmp	r3, #14
   d6388:	f04f 0000 	mov.w	r0, #0
   d638c:	d805      	bhi.n	d639a <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d638e:	4423      	add	r3, r4
   d6390:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d6394:	4620      	mov	r0, r4
   d6396:	f7ff fe79 	bl	d608c <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d639a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d639e:	3301      	adds	r3, #1
   d63a0:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d63a4:	2300      	movs	r3, #0
   d63a6:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d63aa:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d63ae:	425d      	negs	r5, r3
   d63b0:	415d      	adcs	r5, r3
   d63b2:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d63b6:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d63b8:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d63ba:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d63bc:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d63c0:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d63c4:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d63c8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d63cc:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d63d0:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d63d4:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d63d6:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d63d8:	bf9f      	itttt	ls
   d63da:	1c5a      	addls	r2, r3, #1
   d63dc:	191b      	addls	r3, r3, r4
   d63de:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d63e2:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d63e6:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d63ea:	b928      	cbnz	r0, d63f8 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d63ec:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d63f0:	404d      	eors	r5, r1
   d63f2:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d63f6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d63f8:	2000      	movs	r0, #0
  }

  return false;
}
   d63fa:	bd38      	pop	{r3, r4, r5, pc}

000d63fc <_GLOBAL__sub_I__Z7radiansd>:
   d63fc:	f001 bd46 	b.w	d7e8c <HAL_Pin_Map>

000d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6400:	b513      	push	{r0, r1, r4, lr}
   d6402:	460b      	mov	r3, r1
   d6404:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6406:	c803      	ldmia	r0, {r0, r1}
   d6408:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d640c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6410:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6414:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6418:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d641c:	b002      	add	sp, #8
   d641e:	bd10      	pop	{r4, pc}

000d6420 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d6420:	b508      	push	{r3, lr}
   d6422:	4b04      	ldr	r3, [pc, #16]	; (d6434 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d6424:	2201      	movs	r2, #1
   d6426:	701a      	strb	r2, [r3, #0]
   d6428:	f001 fd30 	bl	d7e8c <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d642c:	4b02      	ldr	r3, [pc, #8]	; (d6438 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d642e:	4a03      	ldr	r2, [pc, #12]	; (d643c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x1c>)
   d6430:	601a      	str	r2, [r3, #0]
   d6432:	bd08      	pop	{r3, pc}
   d6434:	2003e22c 	.word	0x2003e22c
   d6438:	2003e228 	.word	0x2003e228
   d643c:	000dd5a5 	.word	0x000dd5a5

000d6440 <_GLOBAL__sub_I_CellularHelper>:
   d6440:	f001 bd24 	b.w	d7e8c <HAL_Pin_Map>

000d6444 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d6444:	b570      	push	{r4, r5, r6, lr}
   d6446:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d6448:	2300      	movs	r3, #0
   d644a:	6063      	str	r3, [r4, #4]
   d644c:	60a3      	str	r3, [r4, #8]
   d644e:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d6450:	6123      	str	r3, [r4, #16]
   d6452:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d6454:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d6456:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d6458:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d645a:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d645c:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d645e:	f7fd fe1c 	bl	d409a <_Znwj>
   d6462:	4605      	mov	r5, r0
   d6464:	b110      	cbz	r0, d646c <_ZN7DS18B20C1Etb+0x28>
   d6466:	4631      	mov	r1, r6
   d6468:	f000 ffc4 	bl	d73f4 <_ZN7OneWireC1Et>
   d646c:	6025      	str	r5, [r4, #0]
}
   d646e:	4620      	mov	r0, r4
   d6470:	bd70      	pop	{r4, r5, r6, pc}

000d6472 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d6472:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d6474:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d6478:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d647a:	6800      	ldr	r0, [r0, #0]
   d647c:	4629      	mov	r1, r5
   d647e:	f001 f8ad 	bl	d75dc <_ZN7OneWire6searchEPh>
   d6482:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d6484:	bf1d      	ittte	ne
   d6486:	682b      	ldrne	r3, [r5, #0]
   d6488:	6023      	strne	r3, [r4, #0]
   d648a:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d648c:	6023      	streq	r3, [r4, #0]
   d648e:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d6490:	bf14      	ite	ne
   d6492:	2001      	movne	r0, #1
   d6494:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d6496:	bd38      	pop	{r3, r4, r5, pc}

000d6498 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d6498:	b510      	push	{r4, lr}
{
  delete(ds);
   d649a:	210e      	movs	r1, #14
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d649c:	4604      	mov	r4, r0
{
  delete(ds);
   d649e:	6800      	ldr	r0, [r0, #0]
   d64a0:	f003 ffa1 	bl	da3e6 <_ZdlPvj>
}
   d64a4:	4620      	mov	r0, r4
   d64a6:	bd10      	pop	{r4, pc}

000d64a8 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d64a8:	6800      	ldr	r0, [r0, #0]
   d64aa:	f001 b88b 	b.w	d75c4 <_ZN7OneWire12reset_searchEv>
	...

000d64b0 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d64b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d64b2:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d64b4:	4604      	mov	r4, r0
   d64b6:	460d      	mov	r5, r1
   d64b8:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d64ba:	b91b      	cbnz	r3, d64c4 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d64bc:	780b      	ldrb	r3, [r1, #0]
   d64be:	2b00      	cmp	r3, #0
   d64c0:	f000 80a6 	beq.w	d6610 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d64c4:	6820      	ldr	r0, [r4, #0]
   d64c6:	f000 ff9f 	bl	d7408 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d64ca:	7ea3      	ldrb	r3, [r4, #26]
   d64cc:	b123      	cbz	r3, d64d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d64ce:	b91e      	cbnz	r6, d64d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d64d0:	6820      	ldr	r0, [r4, #0]
   d64d2:	f001 f873 	bl	d75bc <_ZN7OneWire4skipEv>
   d64d6:	e003      	b.n	d64e0 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d64d8:	4629      	mov	r1, r5
   d64da:	6820      	ldr	r0, [r4, #0]
   d64dc:	f001 f85c 	bl	d7598 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d64e0:	2200      	movs	r2, #0
   d64e2:	2144      	movs	r1, #68	; 0x44
   d64e4:	6820      	ldr	r0, [r4, #0]
   d64e6:	f001 f824 	bl	d7532 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d64ea:	f240 20ee 	movw	r0, #750	; 0x2ee
   d64ee:	f001 ffd5 	bl	d849c <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d64f2:	6820      	ldr	r0, [r4, #0]
   d64f4:	f000 ff88 	bl	d7408 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d64f8:	7ea3      	ldrb	r3, [r4, #26]
   d64fa:	b123      	cbz	r3, d6506 <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d64fc:	b91e      	cbnz	r6, d6506 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d64fe:	6820      	ldr	r0, [r4, #0]
   d6500:	f001 f85c 	bl	d75bc <_ZN7OneWire4skipEv>
   d6504:	e003      	b.n	d650e <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d6506:	4629      	mov	r1, r5
   d6508:	6820      	ldr	r0, [r4, #0]
   d650a:	f001 f845 	bl	d7598 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d650e:	2200      	movs	r2, #0
   d6510:	21be      	movs	r1, #190	; 0xbe
   d6512:	6820      	ldr	r0, [r4, #0]
   d6514:	f001 f80d 	bl	d7532 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d6518:	782b      	ldrb	r3, [r5, #0]
   d651a:	2b26      	cmp	r3, #38	; 0x26
   d651c:	d104      	bne.n	d6528 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d651e:	2200      	movs	r2, #0
   d6520:	4611      	mov	r1, r2
   d6522:	6820      	ldr	r0, [r4, #0]
   d6524:	f001 f805 	bl	d7532 <_ZN7OneWire5writeEhh>
   d6528:	1ce6      	adds	r6, r4, #3
   d652a:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d652e:	6820      	ldr	r0, [r4, #0]
   d6530:	f001 f822 	bl	d7578 <_ZN7OneWire4readEv>
   d6534:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d6538:	42be      	cmp	r6, r7
   d653a:	d1f8      	bne.n	d652e <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d653c:	2108      	movs	r1, #8
   d653e:	1d20      	adds	r0, r4, #4
   d6540:	f001 f8c7 	bl	d76d2 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d6544:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d6546:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d6548:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d654a:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d654c:	d160      	bne.n	d6610 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d654e:	782b      	ldrb	r3, [r5, #0]
   d6550:	2b22      	cmp	r3, #34	; 0x22
   d6552:	d019      	beq.n	d6588 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d6554:	d814      	bhi.n	d6580 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d6556:	2b10      	cmp	r3, #16
   d6558:	d15a      	bne.n	d6610 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d655a:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d655c:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d655e:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6560:	bf08      	it	eq
   d6562:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d6564:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6568:	bf02      	ittt	eq
   d656a:	f023 030f 	biceq.w	r3, r3, #15
   d656e:	f1c2 020c 	rsbeq	r2, r2, #12
   d6572:	189b      	addeq	r3, r3, r2
   d6574:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d6576:	ee00 3a10 	vmov	s0, r3
   d657a:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d6580:	2b26      	cmp	r3, #38	; 0x26
   d6582:	d01f      	beq.n	d65c4 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d6584:	2b28      	cmp	r3, #40	; 0x28
   d6586:	d143      	bne.n	d6610 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d6588:	7a22      	ldrb	r2, [r4, #8]
   d658a:	7923      	ldrb	r3, [r4, #4]
   d658c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d6590:	2a20      	cmp	r2, #32
   d6592:	d005      	beq.n	d65a0 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d6594:	2a40      	cmp	r2, #64	; 0x40
   d6596:	d006      	beq.n	d65a6 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d6598:	b942      	cbnz	r2, d65ac <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d659a:	f023 0307 	bic.w	r3, r3, #7
   d659e:	e004      	b.n	d65aa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d65a0:	f023 0303 	bic.w	r3, r3, #3
   d65a4:	e001      	b.n	d65aa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d65a6:	f023 0301 	bic.w	r3, r3, #1
   d65aa:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d65ac:	7923      	ldrb	r3, [r4, #4]
   d65ae:	7960      	ldrb	r0, [r4, #5]
   d65b0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d65b4:	b200      	sxth	r0, r0
   d65b6:	f004 f9cf 	bl	da958 <__aeabi_i2d>
   d65ba:	2200      	movs	r2, #0
   d65bc:	4b16      	ldr	r3, [pc, #88]	; (d6618 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d65be:	f004 fa31 	bl	daa24 <__aeabi_dmul>
   d65c2:	e020      	b.n	d6606 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d65c4:	79a5      	ldrb	r5, [r4, #6]
   d65c6:	4628      	mov	r0, r5
   d65c8:	f004 f9c6 	bl	da958 <__aeabi_i2d>
   d65cc:	4606      	mov	r6, r0
   d65ce:	7960      	ldrb	r0, [r4, #5]
   d65d0:	10c0      	asrs	r0, r0, #3
   d65d2:	ee07 0a90 	vmov	s15, r0
   d65d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d65da:	460f      	mov	r7, r1
   d65dc:	ee17 0a90 	vmov	r0, s15
   d65e0:	f004 f9cc 	bl	da97c <__aeabi_f2d>
   d65e4:	2200      	movs	r2, #0
   d65e6:	4b0d      	ldr	r3, [pc, #52]	; (d661c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d65e8:	f004 fa1c 	bl	daa24 <__aeabi_dmul>
   d65ec:	460b      	mov	r3, r1
   d65ee:	0629      	lsls	r1, r5, #24
   d65f0:	4602      	mov	r2, r0
   d65f2:	bf4c      	ite	mi
   d65f4:	490a      	ldrmi	r1, [pc, #40]	; (d6620 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d65f6:	490b      	ldrpl	r1, [pc, #44]	; (d6624 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d65f8:	2000      	movs	r0, #0
   d65fa:	f004 fa13 	bl	daa24 <__aeabi_dmul>
   d65fe:	4632      	mov	r2, r6
   d6600:	463b      	mov	r3, r7
   d6602:	f004 f85d 	bl	da6c0 <__adddf3>
   d6606:	f004 fd05 	bl	db014 <__aeabi_d2f>
   d660a:	ee00 0a10 	vmov	s0, r0
      break;
   d660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d6610:	ed9f 0a05 	vldr	s0, [pc, #20]	; d6628 <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d6614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6616:	bf00      	nop
   d6618:	3fb00000 	.word	0x3fb00000
   d661c:	3fa00000 	.word	0x3fa00000
   d6620:	bff00000 	.word	0xbff00000
   d6624:	3ff00000 	.word	0x3ff00000
   d6628:	7fc00000 	.word	0x7fc00000
   d662c:	00000000 	.word	0x00000000

000d6630 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d6630:	b508      	push	{r3, lr}
  return celsius * 1.8 + 32.0;
   d6632:	ee10 0a10 	vmov	r0, s0
   d6636:	f004 f9a1 	bl	da97c <__aeabi_f2d>
   d663a:	a308      	add	r3, pc, #32	; (adr r3, d665c <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d663c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6640:	f004 f9f0 	bl	daa24 <__aeabi_dmul>
   d6644:	2200      	movs	r2, #0
   d6646:	4b04      	ldr	r3, [pc, #16]	; (d6658 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d6648:	f004 f83a 	bl	da6c0 <__adddf3>
   d664c:	f004 fce2 	bl	db014 <__aeabi_d2f>
}
   d6650:	ee00 0a10 	vmov	s0, r0
   d6654:	bd08      	pop	{r3, pc}
   d6656:	bf00      	nop
   d6658:	40400000 	.word	0x40400000
   d665c:	cccccccd 	.word	0xcccccccd
   d6660:	3ffccccc 	.word	0x3ffccccc

000d6664 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d6664:	7e02      	ldrb	r2, [r0, #24]
   d6666:	7e40      	ldrb	r0, [r0, #25]
}
   d6668:	1a13      	subs	r3, r2, r0
   d666a:	4258      	negs	r0, r3
   d666c:	4158      	adcs	r0, r3
   d666e:	4770      	bx	lr

000d6670 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d6670:	f001 bc0c 	b.w	d7e8c <HAL_Pin_Map>

000d6674 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d6674:	4770      	bx	lr

000d6676 <_ZN9LIS3DHSPID0Ev>:
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d6676:	b510      	push	{r4, lr}
}
   d6678:	2128      	movs	r1, #40	; 0x28
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d667a:	4604      	mov	r4, r0
}
   d667c:	f003 feb3 	bl	da3e6 <_ZdlPvj>
   d6680:	4620      	mov	r0, r4
   d6682:	bd10      	pop	{r4, pc}

000d6684 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d6684:	b510      	push	{r4, lr}
   d6686:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d6688:	f100 0118 	add.w	r1, r0, #24
   d668c:	68c0      	ldr	r0, [r0, #12]
   d668e:	f003 f899 	bl	d97c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

	digitalWrite(ss, LOW);
   d6692:	8a20      	ldrh	r0, [r4, #16]
   d6694:	2100      	movs	r1, #0
}
   d6696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::beginTransaction() {
	spi.beginTransaction(spiSettings);

	digitalWrite(ss, LOW);
   d669a:	f003 bdf2 	b.w	da282 <digitalWrite>

000d669e <_ZN9LIS3DHSPI14endTransactionEv>:
}

void LIS3DHSPI::endTransaction() {
   d669e:	b510      	push	{r4, lr}
   d66a0:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d66a2:	2101      	movs	r1, #1
   d66a4:	8a00      	ldrh	r0, [r0, #16]
   d66a6:	f003 fdec 	bl	da282 <digitalWrite>

	spi.endTransaction();
   d66aa:	68e0      	ldr	r0, [r4, #12]
}
   d66ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);

	spi.endTransaction();
   d66b0:	f003 b86f 	b.w	d9792 <_ZN8SPIClass14endTransactionEv>

000d66b4 <_ZN9LIS3DHSPI8readDataEhPhj>:
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66b6:	461e      	mov	r6, r3
	beginTransaction();
   d66b8:	6803      	ldr	r3, [r0, #0]
   d66ba:	695b      	ldr	r3, [r3, #20]
	digitalWrite(ss, HIGH);

	spi.endTransaction();
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d66bc:	460f      	mov	r7, r1
   d66be:	4614      	mov	r4, r2
   d66c0:	4605      	mov	r5, r0
	beginTransaction();
   d66c2:	4798      	blx	r3

	if (numBytes > 1) {
   d66c4:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d66c6:	bf88      	it	hi
   d66c8:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d66cc:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d66d0:	68e8      	ldr	r0, [r5, #12]
   d66d2:	f003 f8e7 	bl	d98a4 <_ZN8SPIClass8transferEh>
   d66d6:	4426      	add	r6, r4

	for(size_t ii = 0; ii < numBytes; ii++) {
   d66d8:	42b4      	cmp	r4, r6
   d66da:	d006      	beq.n	d66ea <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d66dc:	2100      	movs	r1, #0
   d66de:	68e8      	ldr	r0, [r5, #12]
   d66e0:	f003 f8e0 	bl	d98a4 <_ZN8SPIClass8transferEh>
   d66e4:	f804 0b01 	strb.w	r0, [r4], #1
		addr |= SPI_INCREMENT;
	}

	spi.transfer(SPI_READ | addr);

	for(size_t ii = 0; ii < numBytes; ii++) {
   d66e8:	e7f6      	b.n	d66d8 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
		buf[ii] = spi.transfer(0);
	}

	endTransaction();
   d66ea:	682b      	ldr	r3, [r5, #0]
   d66ec:	4628      	mov	r0, r5
   d66ee:	699b      	ldr	r3, [r3, #24]
   d66f0:	4798      	blx	r3

	return true;
}
   d66f2:	2001      	movs	r0, #1
   d66f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66f6 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d66f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66f8:	461e      	mov	r6, r3
	beginTransaction();
   d66fa:	6803      	ldr	r3, [r0, #0]
   d66fc:	695b      	ldr	r3, [r3, #20]
	endTransaction();

	return true;
}

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d66fe:	460f      	mov	r7, r1
   d6700:	4614      	mov	r4, r2
   d6702:	4605      	mov	r5, r0
	beginTransaction();
   d6704:	4798      	blx	r3

	if (numBytes > 1) {
   d6706:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d6708:	bf88      	it	hi
   d670a:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d670e:	4639      	mov	r1, r7
   d6710:	68e8      	ldr	r0, [r5, #12]
   d6712:	f003 f8c7 	bl	d98a4 <_ZN8SPIClass8transferEh>
   d6716:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6718:	42b4      	cmp	r4, r6
   d671a:	d005      	beq.n	d6728 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d671c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6720:	68e8      	ldr	r0, [r5, #12]
   d6722:	f003 f8bf 	bl	d98a4 <_ZN8SPIClass8transferEh>
	if (numBytes > 1) {
		addr |= SPI_INCREMENT;
	}

	spi.transfer(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
   d6726:	e7f7      	b.n	d6718 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
		spi.transfer(buf[ii]);
	}

	endTransaction();
   d6728:	682b      	ldr	r3, [r5, #0]
   d672a:	4628      	mov	r0, r5
   d672c:	699b      	ldr	r3, [r3, #24]
   d672e:	4798      	blx	r3

	return true;
}
   d6730:	2001      	movs	r0, #1
   d6732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6734 <_ZN6LIS3DHC1Ei>:

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d6734:	4a02      	ldr	r2, [pc, #8]	; (d6740 <_ZN6LIS3DHC1Ei+0xc>)
   d6736:	6002      	str	r2, [r0, #0]
   d6738:	2200      	movs	r2, #0
   d673a:	6041      	str	r1, [r0, #4]
   d673c:	7202      	strb	r2, [r0, #8]

}
   d673e:	4770      	bx	lr
   d6740:	000dd5dc 	.word	0x000dd5dc

000d6744 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d6744:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
   d6746:	6803      	ldr	r3, [r0, #0]
   d6748:	aa01      	add	r2, sp, #4
   d674a:	68dc      	ldr	r4, [r3, #12]
   d674c:	2301      	movs	r3, #1
   d674e:	47a0      	blx	r4

	return resp[0];
}
   d6750:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d6754:	b002      	add	sp, #8
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
   d6758:	b538      	push	{r3, r4, r5, lr}
   d675a:	4605      	mov	r5, r0
   d675c:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d675e:	210f      	movs	r1, #15
   d6760:	4628      	mov	r0, r5
   d6762:	f7ff ffef 	bl	d6744 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d6766:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d6768:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
   d676c:	d005      	beq.n	d677a <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
   d676e:	f001 fe95 	bl	d849c <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
   d6772:	3c01      	subs	r4, #1
   d6774:	d1f3      	bne.n	d675e <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
   d6776:	4620      	mov	r0, r4
   d6778:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
   d677a:	bd38      	pop	{r3, r4, r5, pc}

000d677c <_ZN9LIS3DHSPI9hasDeviceEv>:
}

LIS3DHSPI::~LIS3DHSPI() {
}

bool LIS3DHSPI::hasDevice() {
   d677c:	b510      	push	{r4, lr}
   d677e:	4604      	mov	r4, r0
	spi.begin(ss);
   d6780:	8a01      	ldrh	r1, [r0, #16]
   d6782:	68c0      	ldr	r0, [r0, #12]
   d6784:	f002 fff4 	bl	d9770 <_ZN8SPIClass5beginEt>

	return LIS3DH::hasDevice();
   d6788:	4620      	mov	r0, r4
}
   d678a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

bool LIS3DHSPI::hasDevice() {
	spi.begin(ss);

	return LIS3DH::hasDevice();
   d678e:	f7ff bfe3 	b.w	d6758 <_ZN6LIS3DH9hasDeviceEv>

000d6792 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
   d6792:	f001 bb7b 	b.w	d7e8c <HAL_Pin_Map>

000d6796 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6796:	4770      	bx	lr

000d6798 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d6798:	b510      	push	{r4, lr}
}
   d679a:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d679c:	4604      	mov	r4, r0
}
   d679e:	f003 fe22 	bl	da3e6 <_ZdlPvj>
   d67a2:	4620      	mov	r0, r4
   d67a4:	bd10      	pop	{r4, pc}

000d67a6 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d67a6:	6803      	ldr	r3, [r0, #0]
   d67a8:	b2c9      	uxtb	r1, r1
   d67aa:	689b      	ldr	r3, [r3, #8]
   d67ac:	4718      	bx	r3
	...

000d67b0 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d67b0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d67b2:	4d03      	ldr	r5, [pc, #12]	; (d67c0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d67b4:	6005      	str	r5, [r0, #0]
   d67b6:	6041      	str	r1, [r0, #4]
   d67b8:	6082      	str	r2, [r0, #8]
   d67ba:	60c3      	str	r3, [r0, #12]
}
   d67bc:	bd30      	pop	{r4, r5, pc}
   d67be:	bf00      	nop
   d67c0:	000dd674 	.word	0x000dd674

000d67c4 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d67c4:	6840      	ldr	r0, [r0, #4]
   d67c6:	f002 bb61 	b.w	d8e8c <_ZN7TwoWire5beginEv>

000d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d67ca:	b510      	push	{r4, lr}
   d67cc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d67ce:	6800      	ldr	r0, [r0, #0]
   d67d0:	f002 fba8 	bl	d8f24 <_ZN7TwoWire6unlockEv>
   d67d4:	4620      	mov	r0, r4
   d67d6:	bd10      	pop	{r4, pc}

000d67d8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d67d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67dc:	b08a      	sub	sp, #40	; 0x28
   d67de:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d67e0:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d67e4:	f002 fb95 	bl	d8f12 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d67e8:	221e      	movs	r2, #30
   d67ea:	2100      	movs	r1, #0
   d67ec:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d67ee:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d67f0:	f004 fe7a 	bl	db4e8 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d67f4:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d67f6:	b1de      	cbz	r6, d6830 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d67f8:	683b      	ldr	r3, [r7, #0]
   d67fa:	2e1e      	cmp	r6, #30
   d67fc:	46b0      	mov	r8, r6
   d67fe:	bf28      	it	cs
   d6800:	f04f 081e 	movcs.w	r8, #30
   d6804:	68dc      	ldr	r4, [r3, #12]
   d6806:	aa02      	add	r2, sp, #8
   d6808:	4643      	mov	r3, r8
   d680a:	4629      	mov	r1, r5
   d680c:	4638      	mov	r0, r7
   d680e:	47a0      	blx	r4
			if (!result) {
   d6810:	4604      	mov	r4, r0
   d6812:	b948      	cbnz	r0, d6828 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6814:	462a      	mov	r2, r5
   d6816:	490a      	ldr	r1, [pc, #40]	; (d6840 <_ZN6MB85RC5eraseEv+0x68>)
   d6818:	480a      	ldr	r0, [pc, #40]	; (d6844 <_ZN6MB85RC5eraseEv+0x6c>)
   d681a:	f7fd fd48 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d681e:	a801      	add	r0, sp, #4
   d6820:	f7ff ffd3 	bl	d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d6824:	4620      	mov	r0, r4
   d6826:	e007      	b.n	d6838 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d6828:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d682c:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d682e:	e7e2      	b.n	d67f6 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d6830:	a801      	add	r0, sp, #4
   d6832:	f7ff ffca 	bl	d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d6836:	2001      	movs	r0, #1
}
   d6838:	b00a      	add	sp, #40	; 0x28
   d683a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d683e:	bf00      	nop
   d6840:	000dd5f0 	.word	0x000dd5f0
   d6844:	2003e27c 	.word	0x2003e27c

000d6848 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6848:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d684c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d684e:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6850:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6852:	460e      	mov	r6, r1
   d6854:	4617      	mov	r7, r2
   d6856:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d6858:	f002 fb5b 	bl	d8f12 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d685c:	f1b8 0f00 	cmp.w	r8, #0
   d6860:	d101      	bne.n	d6866 <_ZN6MB85RC8readDataEjPhj+0x1e>
   d6862:	2401      	movs	r4, #1
   d6864:	e03f      	b.n	d68e6 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d6866:	68e1      	ldr	r1, [r4, #12]
   d6868:	6860      	ldr	r0, [r4, #4]
   d686a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d686e:	f002 fb45 	bl	d8efc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6872:	0a31      	lsrs	r1, r6, #8
   d6874:	6860      	ldr	r0, [r4, #4]
   d6876:	f7ff ff96 	bl	d67a6 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d687a:	4631      	mov	r1, r6
   d687c:	6860      	ldr	r0, [r4, #4]
   d687e:	f7ff ff92 	bl	d67a6 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6882:	2100      	movs	r1, #0
   d6884:	6860      	ldr	r0, [r4, #4]
   d6886:	f002 fb3c 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d688a:	b108      	cbz	r0, d6890 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d688c:	2400      	movs	r4, #0
   d688e:	e02a      	b.n	d68e6 <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6890:	68e1      	ldr	r1, [r4, #12]
   d6892:	6860      	ldr	r0, [r4, #4]
   d6894:	f1b8 0f20 	cmp.w	r8, #32
   d6898:	46c1      	mov	r9, r8
   d689a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d689e:	bf28      	it	cs
   d68a0:	f04f 0920 	movcs.w	r9, #32
   d68a4:	2301      	movs	r3, #1
   d68a6:	464a      	mov	r2, r9
   d68a8:	b2c9      	uxtb	r1, r1
   d68aa:	f002 fb11 	bl	d8ed0 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d68ae:	f003 fd49 	bl	da344 <_Z19__fetch_global_Wirev>
   d68b2:	6803      	ldr	r3, [r0, #0]
   d68b4:	691b      	ldr	r3, [r3, #16]
   d68b6:	4798      	blx	r3
   d68b8:	4548      	cmp	r0, r9
   d68ba:	dbe7      	blt.n	d688c <_ZN6MB85RC8readDataEjPhj+0x44>
   d68bc:	463d      	mov	r5, r7
   d68be:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d68c2:	f003 fd3f 	bl	da344 <_Z19__fetch_global_Wirev>
   d68c6:	6803      	ldr	r3, [r0, #0]
   d68c8:	695b      	ldr	r3, [r3, #20]
   d68ca:	4798      	blx	r3
   d68cc:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d68d0:	1bea      	subs	r2, r5, r7
   d68d2:	ebc5 0308 	rsb	r3, r5, r8
   d68d6:	4591      	cmp	r9, r2
   d68d8:	eb05 060a 	add.w	r6, r5, sl
   d68dc:	443b      	add	r3, r7
   d68de:	d8f0      	bhi.n	d68c2 <_ZN6MB85RC8readDataEjPhj+0x7a>
   d68e0:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d68e2:	462f      	mov	r7, r5
   d68e4:	e7ba      	b.n	d685c <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d68e6:	a801      	add	r0, sp, #4
   d68e8:	f7ff ff6f 	bl	d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d68ec:	4620      	mov	r0, r4
   d68ee:	b002      	add	sp, #8
   d68f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d68f4 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d68f8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d68fa:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68fc:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68fe:	460d      	mov	r5, r1
   d6900:	4690      	mov	r8, r2
   d6902:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6904:	f002 fb05 	bl	d8f12 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d6908:	b34f      	cbz	r7, d695e <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d690a:	68e1      	ldr	r1, [r4, #12]
   d690c:	6860      	ldr	r0, [r4, #4]
   d690e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6912:	f002 faf3 	bl	d8efc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6916:	0a29      	lsrs	r1, r5, #8
   d6918:	6860      	ldr	r0, [r4, #4]
   d691a:	f7ff ff44 	bl	d67a6 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d691e:	4629      	mov	r1, r5
   d6920:	6860      	ldr	r0, [r4, #4]
   d6922:	f7ff ff40 	bl	d67a6 <_ZN7TwoWire5writeEj>
   d6926:	f108 091e 	add.w	r9, r8, #30
   d692a:	4646      	mov	r6, r8
   d692c:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d6930:	6860      	ldr	r0, [r4, #4]
   d6932:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6936:	6803      	ldr	r3, [r0, #0]
   d6938:	689b      	ldr	r3, [r3, #8]
   d693a:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d693c:	45b1      	cmp	r9, r6
   d693e:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d6942:	46b0      	mov	r8, r6
				dataLen--;
   d6944:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6948:	d001      	beq.n	d694e <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d694a:	2f00      	cmp	r7, #0
   d694c:	d1f0      	bne.n	d6930 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d694e:	2101      	movs	r1, #1
   d6950:	6860      	ldr	r0, [r4, #4]
   d6952:	f002 fad6 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6956:	2800      	cmp	r0, #0
   d6958:	d0d6      	beq.n	d6908 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d695a:	2400      	movs	r4, #0
   d695c:	e000      	b.n	d6960 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d695e:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d6960:	a801      	add	r0, sp, #4
   d6962:	f7ff ff32 	bl	d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6966:	4620      	mov	r0, r4
   d6968:	b002      	add	sp, #8
   d696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d696e <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d696e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6972:	b08b      	sub	sp, #44	; 0x2c
   d6974:	460e      	mov	r6, r1
   d6976:	4615      	mov	r5, r2
   d6978:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d697a:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d697c:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d697e:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d6980:	f002 fac7 	bl	d8f12 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d6984:	42ae      	cmp	r6, r5
   d6986:	d223      	bcs.n	d69d0 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6988:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d698a:	4425      	add	r5, r4
			while(numBytes > 0) {
   d698c:	b90c      	cbnz	r4, d6992 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d698e:	2401      	movs	r4, #1
   d6990:	e03f      	b.n	d6a12 <_ZN6MB85RC8moveDataEjjj+0xa4>
   d6992:	2c1e      	cmp	r4, #30
   d6994:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6996:	f8d8 3000 	ldr.w	r3, [r8]
   d699a:	bf28      	it	cs
   d699c:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d699e:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d69a0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d69a4:	aa02      	add	r2, sp, #8
   d69a6:	463b      	mov	r3, r7
   d69a8:	4631      	mov	r1, r6
   d69aa:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d69ac:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d69ae:	47c8      	blx	r9
				if (!result) {
   d69b0:	b908      	cbnz	r0, d69b6 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d69b2:	2400      	movs	r4, #0
   d69b4:	e02d      	b.n	d6a12 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d69b6:	f8d8 3000 	ldr.w	r3, [r8]
   d69ba:	aa02      	add	r2, sp, #8
   d69bc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d69c0:	4629      	mov	r1, r5
   d69c2:	463b      	mov	r3, r7
   d69c4:	4640      	mov	r0, r8
   d69c6:	47c8      	blx	r9
				if (!result) {
   d69c8:	2800      	cmp	r0, #0
   d69ca:	d0f2      	beq.n	d69b2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d69cc:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d69ce:	e7dd      	b.n	d698c <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d69d0:	d9dd      	bls.n	d698e <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d69d2:	2c00      	cmp	r4, #0
   d69d4:	d0db      	beq.n	d698e <_ZN6MB85RC8moveDataEjjj+0x20>
   d69d6:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d69d8:	f8d8 3000 	ldr.w	r3, [r8]
   d69dc:	4627      	mov	r7, r4
   d69de:	bf28      	it	cs
   d69e0:	271e      	movcs	r7, #30
   d69e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d69e6:	aa02      	add	r2, sp, #8
   d69e8:	463b      	mov	r3, r7
   d69ea:	4631      	mov	r1, r6
   d69ec:	4640      	mov	r0, r8
   d69ee:	47c8      	blx	r9
				if (!result) {
   d69f0:	2800      	cmp	r0, #0
   d69f2:	d0de      	beq.n	d69b2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d69f4:	f8d8 3000 	ldr.w	r3, [r8]
   d69f8:	aa02      	add	r2, sp, #8
   d69fa:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d69fe:	4629      	mov	r1, r5
   d6a00:	463b      	mov	r3, r7
   d6a02:	4640      	mov	r0, r8
   d6a04:	47c8      	blx	r9
				if (!result) {
   d6a06:	2800      	cmp	r0, #0
   d6a08:	d0d3      	beq.n	d69b2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d6a0a:	443e      	add	r6, r7
				framAddrTo += count;
   d6a0c:	443d      	add	r5, r7
				numBytes -= count;
   d6a0e:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d6a10:	e7df      	b.n	d69d2 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6a12:	a801      	add	r0, sp, #4
   d6a14:	f7ff fed9 	bl	d67ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6a18:	4620      	mov	r0, r4
   d6a1a:	b00b      	add	sp, #44	; 0x2c
   d6a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6a20 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d6a20:	f001 ba34 	b.w	d7e8c <HAL_Pin_Map>

000d6a24 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d6a24:	2040      	movs	r0, #64	; 0x40
   d6a26:	4770      	bx	lr

000d6a28 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6a28:	2000      	movs	r0, #0
   d6a2a:	4770      	bx	lr

000d6a2c <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d6a2c:	2080      	movs	r0, #128	; 0x80
   d6a2e:	4770      	bx	lr

000d6a30 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6a30:	20ff      	movs	r0, #255	; 0xff
   d6a32:	4770      	bx	lr

000d6a34 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6a34:	4770      	bx	lr

000d6a36 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6a36:	4770      	bx	lr

000d6a38 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6a38:	4770      	bx	lr

000d6a3a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d6a3a:	4770      	bx	lr

000d6a3c <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d6a3c:	b510      	push	{r4, lr}

}
   d6a3e:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d6a40:	4604      	mov	r4, r0

}
   d6a42:	f003 fcd0 	bl	da3e6 <_ZdlPvj>
   d6a46:	4620      	mov	r0, r4
   d6a48:	bd10      	pop	{r4, pc}

000d6a4a <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d6a4a:	b510      	push	{r4, lr}

}
   d6a4c:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d6a4e:	4604      	mov	r4, r0

}
   d6a50:	f003 fcc9 	bl	da3e6 <_ZdlPvj>
   d6a54:	4620      	mov	r0, r4
   d6a56:	bd10      	pop	{r4, pc}

000d6a58 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d6a58:	b510      	push	{r4, lr}

}
   d6a5a:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d6a5c:	4604      	mov	r4, r0

}
   d6a5e:	f003 fcc2 	bl	da3e6 <_ZdlPvj>
   d6a62:	4620      	mov	r0, r4
   d6a64:	bd10      	pop	{r4, pc}

000d6a66 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d6a66:	b510      	push	{r4, lr}

}
   d6a68:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d6a6a:	4604      	mov	r4, r0

}
   d6a6c:	f003 fcbb 	bl	da3e6 <_ZdlPvj>
   d6a70:	4620      	mov	r0, r4
   d6a72:	bd10      	pop	{r4, pc}

000d6a74 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6a74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d6a78:	6803      	ldr	r3, [r0, #0]
   d6a7a:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d6a7c:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d6a7e:	4798      	blx	r3
   d6a80:	2210      	movs	r2, #16
   d6a82:	4601      	mov	r1, r0
   d6a84:	4668      	mov	r0, sp
   d6a86:	f004 fd2f 	bl	db4e8 <memset>

	size_t len = length();
   d6a8a:	682b      	ldr	r3, [r5, #0]
   d6a8c:	4628      	mov	r0, r5
   d6a8e:	689b      	ldr	r3, [r3, #8]
   d6a90:	4798      	blx	r3
	size_t offset = 0;
   d6a92:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d6a94:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d6a96:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d6a98:	42bc      	cmp	r4, r7
   d6a9a:	d20e      	bcs.n	d6aba <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d6a9c:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d6a9e:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d6aa0:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d6aa2:	bf28      	it	cs
   d6aa4:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d6aa6:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6aaa:	466a      	mov	r2, sp
   d6aac:	4633      	mov	r3, r6
   d6aae:	4621      	mov	r1, r4
   d6ab0:	4628      	mov	r0, r5
   d6ab2:	47c0      	blx	r8
		if (!bResult) {
   d6ab4:	b108      	cbz	r0, d6aba <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d6ab6:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d6ab8:	e7ee      	b.n	d6a98 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d6aba:	b004      	add	sp, #16
   d6abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ac0 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d6ac0:	2300      	movs	r3, #0
	rawMonth = 1;
   d6ac2:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d6ac4:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d6ac6:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d6ac8:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d6aca:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d6acc:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d6ace:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d6ad0:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d6ad2:	7443      	strb	r3, [r0, #17]
   d6ad4:	4770      	bx	lr
	...

000d6ad8 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d6ad8:	2201      	movs	r2, #1
   d6ada:	b508      	push	{r3, lr}
   d6adc:	7142      	strb	r2, [r0, #5]
   d6ade:	2202      	movs	r2, #2
   d6ae0:	7182      	strb	r2, [r0, #6]
   d6ae2:	2203      	movs	r2, #3
   d6ae4:	4b06      	ldr	r3, [pc, #24]	; (d6b00 <_ZN12MCP79410TimeC1Ev+0x28>)
   d6ae6:	71c2      	strb	r2, [r0, #7]
   d6ae8:	2204      	movs	r2, #4
   d6aea:	6003      	str	r3, [r0, #0]
   d6aec:	7202      	strb	r2, [r0, #8]
   d6aee:	2300      	movs	r3, #0
   d6af0:	2207      	movs	r2, #7
   d6af2:	7103      	strb	r3, [r0, #4]
   d6af4:	7242      	strb	r2, [r0, #9]
   d6af6:	7443      	strb	r3, [r0, #17]
	clear();
   d6af8:	f7ff ffe2 	bl	d6ac0 <_ZN12MCP79410Time5clearEv>
}
   d6afc:	bd08      	pop	{r3, pc}
   d6afe:	bf00      	nop
   d6b00:	000dd7d4 	.word	0x000dd7d4

000d6b04 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6b04:	0903      	lsrs	r3, r0, #4
}
   d6b06:	220a      	movs	r2, #10
   d6b08:	f000 000f 	and.w	r0, r0, #15
   d6b0c:	fb02 0003 	mla	r0, r2, r3, r0
   d6b10:	4770      	bx	lr

000d6b12 <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d6b12:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d6b14:	7a80      	ldrb	r0, [r0, #10]
   d6b16:	f7ff fff5 	bl	d6b04 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6b1a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6b1e:	bd08      	pop	{r3, pc}

000d6b20 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d6b20:	7ac0      	ldrb	r0, [r0, #11]
   d6b22:	f000 001f 	and.w	r0, r0, #31
   d6b26:	f7ff bfed 	b.w	d6b04 <_ZN12MCP79410Time8bcdToIntEh>

000d6b2a <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6b2a:	7b00      	ldrb	r0, [r0, #12]
   d6b2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6b30:	f7ff bfe8 	b.w	d6b04 <_ZN12MCP79410Time8bcdToIntEh>

000d6b34 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d6b34:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6b36:	7b81      	ldrb	r1, [r0, #14]
   d6b38:	064a      	lsls	r2, r1, #25
   d6b3a:	d50d      	bpl.n	d6b58 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6b3c:	f001 001f 	and.w	r0, r1, #31
   d6b40:	f7ff ffe0 	bl	d6b04 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d6b44:	068b      	lsls	r3, r1, #26
   d6b46:	d503      	bpl.n	d6b50 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d6b48:	280c      	cmp	r0, #12
   d6b4a:	d00b      	beq.n	d6b64 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d6b4c:	300c      	adds	r0, #12
   d6b4e:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d6b50:	280c      	cmp	r0, #12
   d6b52:	bf08      	it	eq
   d6b54:	2000      	moveq	r0, #0
   d6b56:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6b58:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d6b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6b60:	f7ff bfd0 	b.w	d6b04 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d6b64:	bd08      	pop	{r3, pc}

000d6b66 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d6b66:	7bc0      	ldrb	r0, [r0, #15]
   d6b68:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b6c:	f7ff bfca 	b.w	d6b04 <_ZN12MCP79410Time8bcdToIntEh>

000d6b70 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d6b70:	7c00      	ldrb	r0, [r0, #16]
   d6b72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b76:	f7ff bfc5 	b.w	d6b04 <_ZN12MCP79410Time8bcdToIntEh>

000d6b7a <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d6b7a:	b510      	push	{r4, lr}
   d6b7c:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6b7e:	2224      	movs	r2, #36	; 0x24
   d6b80:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d6b82:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6b84:	a801      	add	r0, sp, #4
   d6b86:	f004 fcaf 	bl	db4e8 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6b8a:	4620      	mov	r0, r4
   d6b8c:	f7ff ffc1 	bl	d6b12 <_ZNK12MCP79410Time7getYearEv>
   d6b90:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6b94:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6b96:	4620      	mov	r0, r4
   d6b98:	f7ff ffc2 	bl	d6b20 <_ZNK12MCP79410Time8getMonthEv>
   d6b9c:	3801      	subs	r0, #1
   d6b9e:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	f7ff ffc2 	bl	d6b2a <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6ba6:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d6ba8:	4620      	mov	r0, r4
   d6baa:	f7ff ffc3 	bl	d6b34 <_ZNK12MCP79410Time7getHourEv>
   d6bae:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	f7ff ffd8 	bl	d6b66 <_ZNK12MCP79410Time9getMinuteEv>
   d6bb6:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6bb8:	4620      	mov	r0, r4
   d6bba:	f7ff ffd9 	bl	d6b70 <_ZNK12MCP79410Time9getSecondEv>
   d6bbe:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d6bc0:	a801      	add	r0, sp, #4
   d6bc2:	f004 fd75 	bl	db6b0 <mktime>
}
   d6bc6:	b00a      	add	sp, #40	; 0x28
   d6bc8:	bd10      	pop	{r4, pc}

000d6bca <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d6bca:	220a      	movs	r2, #10
   d6bcc:	fb90 f3f2 	sdiv	r3, r0, r2
   d6bd0:	fb93 f1f2 	sdiv	r1, r3, r2
   d6bd4:	fb02 3111 	mls	r1, r2, r1, r3
   d6bd8:	fb02 0313 	mls	r3, r2, r3, r0
   d6bdc:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d6be0:	b2c0      	uxtb	r0, r0
   d6be2:	4770      	bx	lr

000d6be4 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d6be4:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d6be6:	b510      	push	{r4, lr}
   d6be8:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6bea:	fb91 f0f3 	sdiv	r0, r1, r3
   d6bee:	fb00 1013 	mls	r0, r0, r3, r1
   d6bf2:	f7ff ffea 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6bf6:	72a0      	strb	r0, [r4, #10]
   d6bf8:	bd10      	pop	{r4, pc}

000d6bfa <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d6bfa:	b510      	push	{r4, lr}
   d6bfc:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6bfe:	4608      	mov	r0, r1
   d6c00:	f7ff ffe3 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c04:	72e0      	strb	r0, [r4, #11]
   d6c06:	bd10      	pop	{r4, pc}

000d6c08 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d6c08:	b510      	push	{r4, lr}
   d6c0a:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d6c0c:	4608      	mov	r0, r1
   d6c0e:	f7ff ffdc 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c12:	7b23      	ldrb	r3, [r4, #12]
   d6c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6c18:	4318      	orrs	r0, r3
   d6c1a:	7320      	strb	r0, [r4, #12]
   d6c1c:	bd10      	pop	{r4, pc}

000d6c1e <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d6c1e:	b510      	push	{r4, lr}
   d6c20:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d6c22:	1c48      	adds	r0, r1, #1
   d6c24:	f7ff ffd1 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c28:	7b63      	ldrb	r3, [r4, #13]
   d6c2a:	f023 0307 	bic.w	r3, r3, #7
   d6c2e:	4318      	orrs	r0, r3
   d6c30:	7360      	strb	r0, [r4, #13]
   d6c32:	bd10      	pop	{r4, pc}

000d6c34 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d6c34:	b510      	push	{r4, lr}
   d6c36:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6c38:	4608      	mov	r0, r1
   d6c3a:	f7ff ffc6 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c3e:	73a0      	strb	r0, [r4, #14]
   d6c40:	bd10      	pop	{r4, pc}

000d6c42 <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d6c42:	b510      	push	{r4, lr}
   d6c44:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6c46:	4608      	mov	r0, r1
   d6c48:	f7ff ffbf 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c4c:	73e0      	strb	r0, [r4, #15]
   d6c4e:	bd10      	pop	{r4, pc}

000d6c50 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d6c50:	b510      	push	{r4, lr}
   d6c52:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d6c54:	4608      	mov	r0, r1
   d6c56:	f7ff ffb8 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6c5a:	7c23      	ldrb	r3, [r4, #16]
   d6c5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6c60:	4318      	orrs	r0, r3
   d6c62:	7420      	strb	r0, [r4, #16]
   d6c64:	bd10      	pop	{r4, pc}

000d6c66 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d6c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c68:	4604      	mov	r4, r0
   d6c6a:	a802      	add	r0, sp, #8
   d6c6c:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d6c70:	f004 fa72 	bl	db158 <gmtime>
   d6c74:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d6c76:	6941      	ldr	r1, [r0, #20]
   d6c78:	4620      	mov	r0, r4
   d6c7a:	f7ff ffb3 	bl	d6be4 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d6c7e:	6929      	ldr	r1, [r5, #16]
   d6c80:	4620      	mov	r0, r4
   d6c82:	3101      	adds	r1, #1
   d6c84:	f7ff ffb9 	bl	d6bfa <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d6c88:	68e9      	ldr	r1, [r5, #12]
   d6c8a:	4620      	mov	r0, r4
   d6c8c:	f7ff ffbc 	bl	d6c08 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d6c90:	69a9      	ldr	r1, [r5, #24]
   d6c92:	4620      	mov	r0, r4
   d6c94:	f7ff ffc3 	bl	d6c1e <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d6c98:	68a9      	ldr	r1, [r5, #8]
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	f7ff ffca 	bl	d6c34 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6ca0:	6869      	ldr	r1, [r5, #4]
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f7ff ffcd 	bl	d6c42 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6ca8:	6829      	ldr	r1, [r5, #0]
   d6caa:	293b      	cmp	r1, #59	; 0x3b
   d6cac:	bfa8      	it	ge
   d6cae:	213b      	movge	r1, #59	; 0x3b
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	f7ff ffcd 	bl	d6c50 <_ZN12MCP79410Time9setSecondEi>
}
   d6cb6:	b003      	add	sp, #12
   d6cb8:	bd30      	pop	{r4, r5, pc}

000d6cba <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6cba:	b510      	push	{r4, lr}
   d6cbc:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d6cbe:	f7ff ffd2 	bl	d6c66 <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d6cc2:	7a63      	ldrb	r3, [r4, #9]
   d6cc4:	7463      	strb	r3, [r4, #17]
   d6cc6:	bd10      	pop	{r4, pc}

000d6cc8 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6cc8:	4a08      	ldr	r2, [pc, #32]	; (d6cec <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d6cca:	6002      	str	r2, [r0, #0]
   d6ccc:	2200      	movs	r2, #0
   d6cce:	7202      	strb	r2, [r0, #8]
   d6cd0:	7242      	strb	r2, [r0, #9]
   d6cd2:	2201      	movs	r2, #1
   d6cd4:	7282      	strb	r2, [r0, #10]
   d6cd6:	4603      	mov	r3, r0
   d6cd8:	2203      	movs	r2, #3
   d6cda:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6cdc:	4a04      	ldr	r2, [pc, #16]	; (d6cf0 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6cde:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6ce0:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6ce2:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6ce4:	4a03      	ldr	r2, [pc, #12]	; (d6cf4 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6ce6:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6ce8:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d6cea:	4770      	bx	lr
   d6cec:	000dd7e4 	.word	0x000dd7e4
   d6cf0:	000dd6b4 	.word	0x000dd6b4
   d6cf4:	000dd690 	.word	0x000dd690

000d6cf8 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6cfc:	4605      	mov	r5, r0
   d6cfe:	460f      	mov	r7, r1
   d6d00:	4691      	mov	r9, r2
   d6d02:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6d04:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6d08:	429c      	cmp	r4, r3
   d6d0a:	d230      	bcs.n	d6d6e <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6d0c:	4639      	mov	r1, r7
   d6d0e:	6868      	ldr	r0, [r5, #4]
   d6d10:	f002 f8f0 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6d14:	eb09 0104 	add.w	r1, r9, r4
   d6d18:	6868      	ldr	r0, [r5, #4]
   d6d1a:	f7ff fd44 	bl	d67a6 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6d1e:	2100      	movs	r1, #0
   d6d20:	6868      	ldr	r0, [r5, #4]
   d6d22:	f002 f8ee 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6d26:	4606      	mov	r6, r0
   d6d28:	b9d8      	cbnz	r0, d6d62 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6d2c:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6d2e:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6d30:	2a20      	cmp	r2, #32
   d6d32:	f04f 0301 	mov.w	r3, #1
   d6d36:	bf28      	it	cs
   d6d38:	2220      	movcs	r2, #32
   d6d3a:	4639      	mov	r1, r7
   d6d3c:	f002 f8c8 	bl	d8ed0 <_ZN7TwoWire11requestFromEhjh>
   d6d40:	eb0a 0804 	add.w	r8, sl, r4
   d6d44:	4683      	mov	fp, r0
   d6d46:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6d48:	ebc8 0306 	rsb	r3, r8, r6
   d6d4c:	459b      	cmp	fp, r3
   d6d4e:	d906      	bls.n	d6d5e <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d6d50:	6868      	ldr	r0, [r5, #4]
   d6d52:	6803      	ldr	r3, [r0, #0]
   d6d54:	695b      	ldr	r3, [r3, #20]
   d6d56:	4798      	blx	r3
   d6d58:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6d5c:	e7f4      	b.n	d6d48 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d6d5e:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6d60:	e7d1      	b.n	d6d06 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6d62:	4602      	mov	r2, r0
   d6d64:	4904      	ldr	r1, [pc, #16]	; (d6d78 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6d66:	4805      	ldr	r0, [pc, #20]	; (d6d7c <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d6d68:	f7fd faa1 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6d6c:	e000      	b.n	d6d70 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d6d6e:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d6d70:	4630      	mov	r0, r6
   d6d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d76:	bf00      	nop
   d6d78:	000dd72e 	.word	0x000dd72e
   d6d7c:	2003e230 	.word	0x2003e230

000d6d80 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6d82:	2301      	movs	r3, #1
   d6d84:	9300      	str	r3, [sp, #0]
   d6d86:	460a      	mov	r2, r1
   d6d88:	ab03      	add	r3, sp, #12
   d6d8a:	216f      	movs	r1, #111	; 0x6f
   d6d8c:	f7ff ffb4 	bl	d6cf8 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6d90:	b910      	cbnz	r0, d6d98 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d6d92:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d6d96:	e000      	b.n	d6d9a <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d6d98:	2000      	movs	r0, #0
	}
}
   d6d9a:	b005      	add	sp, #20
   d6d9c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6da0 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d6da0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6da2:	2103      	movs	r1, #3
   d6da4:	f7ff ffec 	bl	d6d80 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6da8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6dac:	bd08      	pop	{r3, pc}

000d6dae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6dae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6db0:	461e      	mov	r6, r3
   d6db2:	2b00      	cmp	r3, #0
   d6db4:	bf0c      	ite	eq
   d6db6:	2307      	moveq	r3, #7
   d6db8:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6dba:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6dbc:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6dbe:	ab02      	add	r3, sp, #8
   d6dc0:	460a      	mov	r2, r1
   d6dc2:	216f      	movs	r1, #111	; 0x6f
   d6dc4:	f7ff ff98 	bl	d6cf8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6dc8:	4605      	mov	r5, r0
   d6dca:	b9d8      	cbnz	r0, d6e04 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d6dcc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6dd0:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6dd2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6dd6:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6dd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6ddc:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6dde:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6de2:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6de4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6de8:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6dea:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6dee:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6df0:	b91e      	cbnz	r6, d6dfa <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d6df2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6df6:	72a3      	strb	r3, [r4, #10]
   d6df8:	e004      	b.n	d6e04 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6dfa:	f003 f83d 	bl	d9e78 <_ZN9TimeClass4yearEv>
   d6dfe:	f7ff fee4 	bl	d6bca <_ZN12MCP79410Time8intToBcdEi>
   d6e02:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d6e04:	4628      	mov	r0, r5
   d6e06:	b004      	add	sp, #16
   d6e08:	bd70      	pop	{r4, r5, r6, pc}

000d6e0a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6e0a:	b538      	push	{r3, r4, r5, lr}
   d6e0c:	2300      	movs	r3, #0
   d6e0e:	460c      	mov	r4, r1
   d6e10:	460a      	mov	r2, r1
   d6e12:	4619      	mov	r1, r3
   d6e14:	4605      	mov	r5, r0
   d6e16:	f7ff ffca 	bl	d6dae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d6e1a:	b928      	cbnz	r0, d6e28 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6e1c:	7aa3      	ldrb	r3, [r4, #10]
   d6e1e:	b11b      	cbz	r3, d6e28 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d6e20:	4628      	mov	r0, r5
   d6e22:	f7ff ffbd 	bl	d6da0 <_ZNK8MCP7941020getOscillatorRunningEv>
   d6e26:	b900      	cbnz	r0, d6e2a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d6e28:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d6e2a:	bd38      	pop	{r3, r4, r5, pc}

000d6e2c <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6e2c:	b510      	push	{r4, lr}
   d6e2e:	b086      	sub	sp, #24
   d6e30:	4604      	mov	r4, r0
	MCP79410Time time;
   d6e32:	a801      	add	r0, sp, #4
   d6e34:	f7ff fe50 	bl	d6ad8 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6e38:	a901      	add	r1, sp, #4
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	f7ff ffe5 	bl	d6e0a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6e40:	b110      	cbz	r0, d6e48 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d6e42:	a801      	add	r0, sp, #4
   d6e44:	f7ff fe99 	bl	d6b7a <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6e48:	b006      	add	sp, #24
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6e4c:	b530      	push	{r4, r5, lr}
   d6e4e:	4604      	mov	r4, r0
   d6e50:	b085      	sub	sp, #20
	wire.begin();
   d6e52:	6840      	ldr	r0, [r0, #4]
   d6e54:	f002 f81a 	bl	d8e8c <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d6e58:	f002 ffba 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
   d6e5c:	b9c0      	cbnz	r0, d6e90 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6e5e:	7ae3      	ldrb	r3, [r4, #11]
   d6e60:	079b      	lsls	r3, r3, #30
   d6e62:	d515      	bpl.n	d6e90 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d6e64:	4620      	mov	r0, r4
   d6e66:	f7ff ffe1 	bl	d6e2c <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d6e6a:	4605      	mov	r5, r0
   d6e6c:	b180      	cbz	r0, d6e90 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d6e6e:	f002 feef 	bl	d9c50 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6e72:	4b09      	ldr	r3, [pc, #36]	; (d6e98 <_ZN8MCP794105setupEv+0x4c>)
   d6e74:	4909      	ldr	r1, [pc, #36]	; (d6e9c <_ZN8MCP794105setupEv+0x50>)
   d6e76:	681b      	ldr	r3, [r3, #0]
   d6e78:	462a      	mov	r2, r5
   d6e7a:	4668      	mov	r0, sp
   d6e7c:	f002 ff76 	bl	d9d6c <_ZN9TimeClass6formatElPKc>
   d6e80:	4807      	ldr	r0, [pc, #28]	; (d6ea0 <_ZN8MCP794105setupEv+0x54>)
   d6e82:	9a00      	ldr	r2, [sp, #0]
   d6e84:	4907      	ldr	r1, [pc, #28]	; (d6ea4 <_ZN8MCP794105setupEv+0x58>)
   d6e86:	f7fd fa12 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d6e8a:	4668      	mov	r0, sp
   d6e8c:	f002 fd13 	bl	d98b6 <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d6e90:	2301      	movs	r3, #1
   d6e92:	7223      	strb	r3, [r4, #8]
}
   d6e94:	b005      	add	sp, #20
   d6e96:	bd30      	pop	{r4, r5, pc}
   d6e98:	2003ddd0 	.word	0x2003ddd0
   d6e9c:	2003e4ac 	.word	0x2003e4ac
   d6ea0:	2003e230 	.word	0x2003e230
   d6ea4:	000dd748 	.word	0x000dd748

000d6ea8 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6eac:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6eb0:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6eb2:	6803      	ldr	r3, [r0, #0]
   d6eb4:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6eb6:	4604      	mov	r4, r0
   d6eb8:	460d      	mov	r5, r1
   d6eba:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6ebc:	4798      	blx	r3
   d6ebe:	4580      	cmp	r8, r0
   d6ec0:	d80a      	bhi.n	d6ed8 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6ec2:	9600      	str	r6, [sp, #0]
   d6ec4:	463b      	mov	r3, r7
   d6ec6:	b2ea      	uxtb	r2, r5
   d6ec8:	2157      	movs	r1, #87	; 0x57
   d6eca:	6860      	ldr	r0, [r4, #4]
   d6ecc:	f7ff ff14 	bl	d6cf8 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6ed0:	fab0 f080 	clz	r0, r0
   d6ed4:	0940      	lsrs	r0, r0, #5
   d6ed6:	e000      	b.n	d6eda <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6ed8:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d6eda:	b002      	add	sp, #8
   d6edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ee0 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6ee4:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ee8:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6eea:	6803      	ldr	r3, [r0, #0]
   d6eec:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6eee:	4605      	mov	r5, r0
   d6ef0:	460c      	mov	r4, r1
   d6ef2:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6ef4:	4798      	blx	r3
   d6ef6:	4580      	cmp	r8, r0
   d6ef8:	d80c      	bhi.n	d6f14 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6efa:	f104 0220 	add.w	r2, r4, #32
   d6efe:	9600      	str	r6, [sp, #0]
   d6f00:	463b      	mov	r3, r7
   d6f02:	b2d2      	uxtb	r2, r2
   d6f04:	216f      	movs	r1, #111	; 0x6f
   d6f06:	6868      	ldr	r0, [r5, #4]
   d6f08:	f7ff fef6 	bl	d6cf8 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6f0c:	fab0 f080 	clz	r0, r0
   d6f10:	0940      	lsrs	r0, r0, #5
   d6f12:	e000      	b.n	d6f16 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6f14:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6f16:	b002      	add	sp, #8
   d6f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f20:	4607      	mov	r7, r0
   d6f22:	4689      	mov	r9, r1
   d6f24:	4692      	mov	sl, r2
   d6f26:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6f28:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f2c:	429c      	cmp	r4, r3
   d6f2e:	d228      	bcs.n	d6f82 <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d6f30:	4649      	mov	r1, r9
   d6f32:	6878      	ldr	r0, [r7, #4]
   d6f34:	f001 ffde 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6f38:	eb0a 0104 	add.w	r1, sl, r4
   d6f3c:	6878      	ldr	r0, [r7, #4]
   d6f3e:	f7ff fc32 	bl	d67a6 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f44:	1b1e      	subs	r6, r3, r4
   d6f46:	2e1f      	cmp	r6, #31
   d6f48:	eb0b 0804 	add.w	r8, fp, r4
   d6f4c:	bf28      	it	cs
   d6f4e:	261f      	movcs	r6, #31
   d6f50:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6f52:	6878      	ldr	r0, [r7, #4]
   d6f54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f58:	6802      	ldr	r2, [r0, #0]
   d6f5a:	6892      	ldr	r2, [r2, #8]
   d6f5c:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6f5e:	ebc8 0205 	rsb	r2, r8, r5
   d6f62:	42b2      	cmp	r2, r6
   d6f64:	d3f5      	bcc.n	d6f52 <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d6f66:	2101      	movs	r1, #1
   d6f68:	6878      	ldr	r0, [r7, #4]
   d6f6a:	f001 ffca 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6f6e:	4605      	mov	r5, r0
   d6f70:	b128      	cbz	r0, d6f7e <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d6f72:	4602      	mov	r2, r0
   d6f74:	4905      	ldr	r1, [pc, #20]	; (d6f8c <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6f76:	4806      	ldr	r0, [pc, #24]	; (d6f90 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d6f78:	f7fd f999 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6f7c:	e002      	b.n	d6f84 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d6f7e:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6f80:	e7d3      	b.n	d6f2a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6f82:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d6f84:	4628      	mov	r0, r5
   d6f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f8a:	bf00      	nop
   d6f8c:	000dd75d 	.word	0x000dd75d
   d6f90:	2003e230 	.word	0x2003e230

000d6f94 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d6f96:	7c13      	ldrb	r3, [r2, #16]
   d6f98:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6f9c:	7bd3      	ldrb	r3, [r2, #15]
   d6f9e:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6fa2:	7b93      	ldrb	r3, [r2, #14]
   d6fa4:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6fa8:	7b53      	ldrb	r3, [r2, #13]
   d6faa:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6fae:	7b13      	ldrb	r3, [r2, #12]
   d6fb0:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6fb4:	7ad3      	ldrb	r3, [r2, #11]
   d6fb6:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6fba:	7a93      	ldrb	r3, [r2, #10]
   d6fbc:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6fc0:	2307      	movs	r3, #7
   d6fc2:	9300      	str	r3, [sp, #0]
   d6fc4:	460a      	mov	r2, r1
   d6fc6:	ab02      	add	r3, sp, #8
   d6fc8:	216f      	movs	r1, #111	; 0x6f
   d6fca:	f7ff ffa7 	bl	d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6fce:	b005      	add	sp, #20
   d6fd0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6fd4 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d6fd4:	b510      	push	{r4, lr}
   d6fd6:	b086      	sub	sp, #24
   d6fd8:	4604      	mov	r4, r0
	MCP79410Time time;
   d6fda:	a801      	add	r0, sp, #4
   d6fdc:	f7ff fd7c 	bl	d6ad8 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d6fe0:	a801      	add	r0, sp, #4
   d6fe2:	f7ff fe40 	bl	d6c66 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6fe6:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d6fea:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6ff0:	f88d 3014 	strb.w	r3, [sp, #20]
   d6ff4:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d6ff8:	b112      	cbz	r2, d7000 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6ffa:	f043 0308 	orr.w	r3, r3, #8
   d6ffe:	e001      	b.n	d7004 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7000:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d7004:	aa01      	add	r2, sp, #4
   d7006:	2100      	movs	r1, #0
   d7008:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d700a:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d700e:	f7ff ffc1 	bl	d6f94 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d7012:	fab0 f080 	clz	r0, r0
   d7016:	0940      	lsrs	r0, r0, #5
   d7018:	b006      	add	sp, #24
   d701a:	bd10      	pop	{r4, pc}

000d701c <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d701c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d701e:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d7020:	f002 fed6 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
   d7024:	4604      	mov	r4, r0
   d7026:	b1b8      	cbz	r0, d7058 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d7028:	f002 fef3 	bl	d9e12 <_ZN9TimeClass3nowEv>
   d702c:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d702e:	4601      	mov	r1, r0
   d7030:	4630      	mov	r0, r6
   d7032:	f7ff ffcf 	bl	d6fd4 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7036:	4b0c      	ldr	r3, [pc, #48]	; (d7068 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d7038:	490c      	ldr	r1, [pc, #48]	; (d706c <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d703a:	681b      	ldr	r3, [r3, #0]
   d703c:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d703e:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d7040:	4668      	mov	r0, sp
   d7042:	f002 fe93 	bl	d9d6c <_ZN9TimeClass6formatElPKc>
   d7046:	9a00      	ldr	r2, [sp, #0]
   d7048:	4909      	ldr	r1, [pc, #36]	; (d7070 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d704a:	480a      	ldr	r0, [pc, #40]	; (d7074 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d704c:	f7fd f92f 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d7050:	4668      	mov	r0, sp
   d7052:	f002 fc30 	bl	d98b6 <_ZN6StringD1Ev>
   d7056:	e003      	b.n	d7060 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d7058:	4907      	ldr	r1, [pc, #28]	; (d7078 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d705a:	4806      	ldr	r0, [pc, #24]	; (d7074 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d705c:	f7fd f927 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d7060:	4620      	mov	r0, r4
   d7062:	b004      	add	sp, #16
   d7064:	bd70      	pop	{r4, r5, r6, pc}
   d7066:	bf00      	nop
   d7068:	2003ddd0 	.word	0x2003ddd0
   d706c:	2003e4ac 	.word	0x2003e4ac
   d7070:	000dd778 	.word	0x000dd778
   d7074:	2003e230 	.word	0x2003e230
   d7078:	000dd78e 	.word	0x000dd78e

000d707c <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d707c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d707e:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d7080:	4604      	mov	r4, r0
	if (!timeSet) {
   d7082:	b98d      	cbnz	r5, d70a8 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d7084:	f002 fea4 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
   d7088:	b170      	cbz	r0, d70a8 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d708a:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d708c:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d708e:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d7092:	f001 f953 	bl	d833c <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d7096:	b138      	cbz	r0, d70a8 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7098:	7ae3      	ldrb	r3, [r4, #11]
   d709a:	07db      	lsls	r3, r3, #31
   d709c:	d502      	bpl.n	d70a4 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d709e:	4620      	mov	r0, r4
   d70a0:	f7ff ffbc 	bl	d701c <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d70a4:	2301      	movs	r3, #1
   d70a6:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d70a8:	b003      	add	sp, #12
   d70aa:	bd30      	pop	{r4, r5, pc}

000d70ac <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d70ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d70ae:	ab04      	add	r3, sp, #16
   d70b0:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d70b4:	2201      	movs	r2, #1
   d70b6:	9200      	str	r2, [sp, #0]
   d70b8:	460a      	mov	r2, r1
   d70ba:	216f      	movs	r1, #111	; 0x6f
   d70bc:	f7ff ff2e 	bl	d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d70c0:	b005      	add	sp, #20
   d70c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d70c6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d70c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70c8:	4614      	mov	r4, r2
   d70ca:	4605      	mov	r5, r0
   d70cc:	460e      	mov	r6, r1
   d70ce:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d70d0:	f7ff fe56 	bl	d6d80 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d70d4:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d70d6:	ea40 0207 	orr.w	r2, r0, r7
   d70da:	4631      	mov	r1, r6
   d70dc:	4628      	mov	r0, r5
}
   d70de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d70e2:	f7ff bfe3 	b.w	d70ac <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d70e6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d70e6:	b113      	cbz	r3, d70ee <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d70e8:	4613      	mov	r3, r2
   d70ea:	22ff      	movs	r2, #255	; 0xff
   d70ec:	e001      	b.n	d70f2 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d70ee:	43d2      	mvns	r2, r2
   d70f0:	b2d2      	uxtb	r2, r2
   d70f2:	f7ff bfe8 	b.w	d70c6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d70f6 <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d70f6:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d70f8:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d70fa:	d80c      	bhi.n	d7116 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d70fc:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d70fe:	f04f 0300 	mov.w	r3, #0
   d7102:	bf0c      	ite	eq
   d7104:	2210      	moveq	r2, #16
   d7106:	2220      	movne	r2, #32
   d7108:	2107      	movs	r1, #7
   d710a:	f7ff ffec 	bl	d70e6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d710e:	fab0 f080 	clz	r0, r0
   d7112:	0940      	lsrs	r0, r0, #5
   d7114:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d7116:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d7118:	bd08      	pop	{r3, pc}

000d711a <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d711a:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d711c:	f04f 0300 	mov.w	r3, #0
   d7120:	f04f 0208 	mov.w	r2, #8
   d7124:	bf14      	ite	ne
   d7126:	2114      	movne	r1, #20
   d7128:	210d      	moveq	r1, #13
   d712a:	f7ff bfdc 	b.w	d70e6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d712e <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d712e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d7132:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7136:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d7138:	6803      	ldr	r3, [r0, #0]
   d713a:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d713c:	4605      	mov	r5, r0
   d713e:	460c      	mov	r4, r1
   d7140:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d7142:	4798      	blx	r3
   d7144:	4580      	cmp	r8, r0
   d7146:	d80c      	bhi.n	d7162 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d7148:	f104 0220 	add.w	r2, r4, #32
   d714c:	9600      	str	r6, [sp, #0]
   d714e:	463b      	mov	r3, r7
   d7150:	b2d2      	uxtb	r2, r2
   d7152:	216f      	movs	r1, #111	; 0x6f
   d7154:	6868      	ldr	r0, [r5, #4]
   d7156:	f7ff fee1 	bl	d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d715a:	fab0 f080 	clz	r0, r0
   d715e:	0940      	lsrs	r0, r0, #5
   d7160:	e000      	b.n	d7164 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d7162:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d7164:	b002      	add	sp, #8
   d7166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d716a <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d716a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d716c:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d716e:	b085      	sub	sp, #20
   d7170:	4606      	mov	r6, r0
   d7172:	460c      	mov	r4, r1
   d7174:	4617      	mov	r7, r2
   d7176:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d7178:	d901      	bls.n	d717e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d717a:	2000      	movs	r0, #0
   d717c:	e043      	b.n	d7206 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d717e:	f7ff fe0f 	bl	d6da0 <_ZNK8MCP7941020getOscillatorRunningEv>
   d7182:	2800      	cmp	r0, #0
   d7184:	d0f9      	beq.n	d717a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d7186:	4629      	mov	r1, r5
   d7188:	4630      	mov	r0, r6
   d718a:	f7ff ffc6 	bl	d711a <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d718e:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d7190:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d7192:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d7196:	7be3      	ldrb	r3, [r4, #15]
   d7198:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d719c:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d71a0:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d71a2:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d71a4:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d71a8:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d71ac:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d71ae:	b117      	cbz	r7, d71b6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d71b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d71b4:	e001      	b.n	d71ba <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d71b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d71ba:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d71be:	7c63      	ldrb	r3, [r4, #17]
   d71c0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d71c4:	011b      	lsls	r3, r3, #4
   d71c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d71ca:	4313      	orrs	r3, r2
   d71cc:	2d00      	cmp	r5, #0
   d71ce:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d71d2:	f04f 0306 	mov.w	r3, #6
   d71d6:	9300      	str	r3, [sp, #0]
   d71d8:	bf08      	it	eq
   d71da:	220a      	moveq	r2, #10
   d71dc:	ab02      	add	r3, sp, #8
   d71de:	bf18      	it	ne
   d71e0:	2211      	movne	r2, #17
   d71e2:	216f      	movs	r1, #111	; 0x6f
   d71e4:	4630      	mov	r0, r6
   d71e6:	f7ff fe99 	bl	d6f1c <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d71ea:	4604      	mov	r4, r0
   d71ec:	b940      	cbnz	r0, d7200 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d71ee:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d71f0:	bf0c      	ite	eq
   d71f2:	2310      	moveq	r3, #16
   d71f4:	2320      	movne	r3, #32
   d71f6:	22ff      	movs	r2, #255	; 0xff
   d71f8:	2107      	movs	r1, #7
   d71fa:	4630      	mov	r0, r6
   d71fc:	f7ff ff63 	bl	d70c6 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d7200:	fab4 f084 	clz	r0, r4
   d7204:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d7206:	b005      	add	sp, #20
   d7208:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d720a <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d720a:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d720c:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d720e:	b087      	sub	sp, #28
   d7210:	4606      	mov	r6, r0
   d7212:	460c      	mov	r4, r1
   d7214:	4617      	mov	r7, r2
   d7216:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d7218:	d901      	bls.n	d721e <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d721a:	2000      	movs	r0, #0
   d721c:	e010      	b.n	d7240 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d721e:	f7ff fe05 	bl	d6e2c <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d7222:	2800      	cmp	r0, #0
   d7224:	d0f9      	beq.n	d721a <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d7226:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d7228:	a801      	add	r0, sp, #4
   d722a:	f7ff fc55 	bl	d6ad8 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d722e:	a801      	add	r0, sp, #4
   d7230:	f7ff fd43 	bl	d6cba <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d7234:	462b      	mov	r3, r5
   d7236:	463a      	mov	r2, r7
   d7238:	a901      	add	r1, sp, #4
   d723a:	4630      	mov	r0, r6
   d723c:	f7ff ff95 	bl	d716a <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d7240:	b007      	add	sp, #28
   d7242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7244 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d7244:	b538      	push	{r3, r4, r5, lr}
   d7246:	4605      	mov	r5, r0
   d7248:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d724a:	2157      	movs	r1, #87	; 0x57
   d724c:	6868      	ldr	r0, [r5, #4]
   d724e:	f001 fe51 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d7252:	2101      	movs	r1, #1
   d7254:	6868      	ldr	r0, [r5, #4]
   d7256:	f001 fe54 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d725a:	b108      	cbz	r0, d7260 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d725c:	3c01      	subs	r4, #1
   d725e:	d1f4      	bne.n	d724a <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d7260:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7264 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d7264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7268:	4605      	mov	r5, r0
   d726a:	18d7      	adds	r7, r2, r3
   d726c:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d726e:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d7272:	42bc      	cmp	r4, r7
   d7274:	d01e      	beq.n	d72b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d7276:	2157      	movs	r1, #87	; 0x57
   d7278:	6868      	ldr	r0, [r5, #4]
   d727a:	f001 fe3b 	bl	d8ef4 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d727e:	eb08 0104 	add.w	r1, r8, r4
   d7282:	6868      	ldr	r0, [r5, #4]
   d7284:	f7ff fa8f 	bl	d67a6 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d7288:	6868      	ldr	r0, [r5, #4]
   d728a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d728e:	6803      	ldr	r3, [r0, #0]
   d7290:	689b      	ldr	r3, [r3, #8]
   d7292:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d7294:	2101      	movs	r1, #1
   d7296:	6868      	ldr	r0, [r5, #4]
   d7298:	f001 fe33 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d729c:	4606      	mov	r6, r0
   d729e:	b128      	cbz	r0, d72ac <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d72a0:	4602      	mov	r2, r0
   d72a2:	4906      	ldr	r1, [pc, #24]	; (d72bc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d72a4:	4806      	ldr	r0, [pc, #24]	; (d72c0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d72a6:	f7fd f802 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d72aa:	e004      	b.n	d72b6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d72ac:	4628      	mov	r0, r5
   d72ae:	f7ff ffc9 	bl	d7244 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d72b2:	e7de      	b.n	d7272 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d72b4:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d72b6:	4630      	mov	r0, r6
   d72b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72bc:	000dd7a3 	.word	0x000dd7a3
   d72c0:	2003e230 	.word	0x2003e230

000d72c4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d72c8:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72cc:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d72ce:	6803      	ldr	r3, [r0, #0]
   d72d0:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d72d2:	4604      	mov	r4, r0
   d72d4:	460d      	mov	r5, r1
   d72d6:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d72d8:	4798      	blx	r3
   d72da:	4580      	cmp	r8, r0
   d72dc:	d80a      	bhi.n	d72f4 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d72de:	4633      	mov	r3, r6
   d72e0:	463a      	mov	r2, r7
   d72e2:	b2e9      	uxtb	r1, r5
   d72e4:	6860      	ldr	r0, [r4, #4]
   d72e6:	f7ff ffbd 	bl	d7264 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d72ea:	fab0 f080 	clz	r0, r0
   d72ee:	0940      	lsrs	r0, r0, #5
   d72f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d72f4:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d72f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d72fc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d72fc:	b508      	push	{r3, lr}
   d72fe:	f000 fdc5 	bl	d7e8c <HAL_Pin_Map>
   d7302:	4b02      	ldr	r3, [pc, #8]	; (d730c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d7304:	4a02      	ldr	r2, [pc, #8]	; (d7310 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d7306:	601a      	str	r2, [r3, #0]
   d7308:	bd08      	pop	{r3, pc}
   d730a:	bf00      	nop
   d730c:	2003e230 	.word	0x2003e230
   d7310:	000dd7c4 	.word	0x000dd7c4

000d7314 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d7314:	f000 bdba 	b.w	d7e8c <HAL_Pin_Map>

000d7318 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d7318:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d731a:	6803      	ldr	r3, [r0, #0]
   d731c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d731e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d7320:	d904      	bls.n	d732c <nrf_gpio_pin_port_decode+0x14>
   d7322:	4a07      	ldr	r2, [pc, #28]	; (d7340 <nrf_gpio_pin_port_decode+0x28>)
   d7324:	2100      	movs	r1, #0
   d7326:	200a      	movs	r0, #10
   d7328:	f000 ff30 	bl	d818c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d732c:	6823      	ldr	r3, [r4, #0]
   d732e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d7330:	bf83      	ittte	hi
   d7332:	f003 031f 	andhi.w	r3, r3, #31
   d7336:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d7338:	4802      	ldrhi	r0, [pc, #8]	; (d7344 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d733a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d733e:	bd10      	pop	{r4, pc}
   d7340:	000d7e0d 	.word	0x000d7e0d
   d7344:	50000300 	.word	0x50000300

000d7348 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d7348:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d734a:	4b0b      	ldr	r3, [pc, #44]	; (d7378 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d734c:	681b      	ldr	r3, [r3, #0]
   d734e:	0100      	lsls	r0, r0, #4
   d7350:	1819      	adds	r1, r3, r0
   d7352:	5c1a      	ldrb	r2, [r3, r0]
   d7354:	784b      	ldrb	r3, [r1, #1]
   d7356:	a802      	add	r0, sp, #8
   d7358:	f003 031f 	and.w	r3, r3, #31
   d735c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d7360:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7364:	f7ff ffd8 	bl	d7318 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d7368:	9a01      	ldr	r2, [sp, #4]
   d736a:	2301      	movs	r3, #1
   d736c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d736e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d7372:	b003      	add	sp, #12
   d7374:	f85d fb04 	ldr.w	pc, [sp], #4
   d7378:	2003e234 	.word	0x2003e234

000d737c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d737c:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d737e:	4b0b      	ldr	r3, [pc, #44]	; (d73ac <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	0100      	lsls	r0, r0, #4
   d7384:	1819      	adds	r1, r3, r0
   d7386:	5c1a      	ldrb	r2, [r3, r0]
   d7388:	784b      	ldrb	r3, [r1, #1]
   d738a:	a802      	add	r0, sp, #8
   d738c:	f003 031f 	and.w	r3, r3, #31
   d7390:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d7394:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7398:	f7ff ffbe 	bl	d7318 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d739c:	9a01      	ldr	r2, [sp, #4]
   d739e:	2301      	movs	r3, #1
   d73a0:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d73a2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d73a6:	b003      	add	sp, #12
   d73a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d73ac:	2003e234 	.word	0x2003e234

000d73b0 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d73b0:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d73b2:	4b0f      	ldr	r3, [pc, #60]	; (d73f0 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	0100      	lsls	r0, r0, #4
   d73b8:	181a      	adds	r2, r3, r0
   d73ba:	5c1c      	ldrb	r4, [r3, r0]
   d73bc:	7853      	ldrb	r3, [r2, #1]
   d73be:	a802      	add	r0, sp, #8
   d73c0:	f003 031f 	and.w	r3, r3, #31
   d73c4:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d73c8:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d73cc:	f7ff ffa4 	bl	d7318 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d73d0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d73d4:	a802      	add	r0, sp, #8
   d73d6:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d73da:	f7ff ff9d 	bl	d7318 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d73de:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d73e2:	9800      	ldr	r0, [sp, #0]
   d73e4:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d73e8:	f000 0001 	and.w	r0, r0, #1
   d73ec:	b002      	add	sp, #8
   d73ee:	bd10      	pop	{r4, pc}
   d73f0:	2003e234 	.word	0x2003e234

000d73f4 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d73f4:	b538      	push	{r3, r4, r5, lr}
   d73f6:	4604      	mov	r4, r0
   d73f8:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d73fa:	4628      	mov	r0, r5
   d73fc:	2100      	movs	r1, #0
   d73fe:	f002 ff2f 	bl	da260 <pinMode>
    _pin = pin;
   d7402:	8025      	strh	r5, [r4, #0]
}
   d7404:	4620      	mov	r0, r4
   d7406:	bd38      	pop	{r3, r4, r5, pc}

000d7408 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d7408:	b570      	push	{r4, r5, r6, lr}
   d740a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d740c:	f001 fdbc 	bl	d8f88 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d7410:	2100      	movs	r1, #0
   d7412:	8828      	ldrh	r0, [r5, #0]
   d7414:	f000 fd42 	bl	d7e9c <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d7418:	f001 fdb8 	bl	d8f8c <_Z10interruptsv>
   d741c:	247d      	movs	r4, #125	; 0x7d
   d741e:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d7420:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7424:	d02d      	beq.n	d7482 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7426:	2002      	movs	r0, #2
   d7428:	f000 fcf0 	bl	d7e0c <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d742c:	8828      	ldrh	r0, [r5, #0]
   d742e:	f7ff ffbf 	bl	d73b0 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
   d7432:	2800      	cmp	r0, #0
   d7434:	d0f3      	beq.n	d741e <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
   d7436:	f001 fda7 	bl	d8f88 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d743a:	8828      	ldrh	r0, [r5, #0]
   d743c:	f7ff ff84 	bl	d7348 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d7440:	2101      	movs	r1, #1
   d7442:	8828      	ldrh	r0, [r5, #0]
   d7444:	f000 fd2a 	bl	d7e9c <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d7448:	f001 fda0 	bl	d8f8c <_Z10interruptsv>
   d744c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d7450:	f000 fcdc 	bl	d7e0c <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d7454:	f000 fcfa 	bl	d7e4c <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d7458:	2100      	movs	r1, #0
   d745a:	4606      	mov	r6, r0
   d745c:	8828      	ldrh	r0, [r5, #0]
   d745e:	f000 fd1d 	bl	d7e9c <HAL_Pin_Mode>
   d7462:	2046      	movs	r0, #70	; 0x46
   d7464:	f000 fcd2 	bl	d7e0c <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d7468:	8828      	ldrh	r0, [r5, #0]
   d746a:	f7ff ffa1 	bl	d73b0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d746e:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d7472:	4630      	mov	r0, r6
   d7474:	f000 fcf2 	bl	d7e5c <HAL_enable_irq>
   d7478:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d747c:	0964      	lsrs	r4, r4, #5
   d747e:	f000 fcc5 	bl	d7e0c <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d7482:	4620      	mov	r0, r4
   d7484:	bd70      	pop	{r4, r5, r6, pc}

000d7486 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d7486:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d7488:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d748c:	4604      	mov	r4, r0
    if (v & 1)
   d748e:	d015      	beq.n	d74bc <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d7490:	f000 fcdc 	bl	d7e4c <HAL_disable_irq>
   d7494:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d7496:	8820      	ldrh	r0, [r4, #0]
   d7498:	f7ff ff56 	bl	d7348 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d749c:	2101      	movs	r1, #1
   d749e:	8820      	ldrh	r0, [r4, #0]
   d74a0:	f000 fcfc 	bl	d7e9c <HAL_Pin_Mode>
   d74a4:	2001      	movs	r0, #1
   d74a6:	f000 fcb1 	bl	d7e0c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d74aa:	2100      	movs	r1, #0
   d74ac:	8820      	ldrh	r0, [r4, #0]
   d74ae:	f000 fcf5 	bl	d7e9c <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d74b2:	4628      	mov	r0, r5
   d74b4:	f000 fcd2 	bl	d7e5c <HAL_enable_irq>
   d74b8:	203b      	movs	r0, #59	; 0x3b
   d74ba:	e014      	b.n	d74e6 <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d74bc:	f000 fcc6 	bl	d7e4c <HAL_disable_irq>
   d74c0:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d74c2:	8820      	ldrh	r0, [r4, #0]
   d74c4:	f7ff ff40 	bl	d7348 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d74c8:	2101      	movs	r1, #1
   d74ca:	8820      	ldrh	r0, [r4, #0]
   d74cc:	f000 fce6 	bl	d7e9c <HAL_Pin_Mode>
   d74d0:	2041      	movs	r0, #65	; 0x41
   d74d2:	f000 fc9b 	bl	d7e0c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d74d6:	4631      	mov	r1, r6
   d74d8:	8820      	ldrh	r0, [r4, #0]
   d74da:	f000 fcdf 	bl	d7e9c <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d74de:	4628      	mov	r0, r5
   d74e0:	f000 fcbc 	bl	d7e5c <HAL_enable_irq>
   d74e4:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d74e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d74ea:	f000 bc8f 	b.w	d7e0c <HAL_Delay_Microseconds>

000d74ee <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d74ee:	b538      	push	{r3, r4, r5, lr}
   d74f0:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d74f2:	f000 fcab 	bl	d7e4c <HAL_disable_irq>
   d74f6:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d74f8:	8820      	ldrh	r0, [r4, #0]
   d74fa:	f7ff ff25 	bl	d7348 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d74fe:	2101      	movs	r1, #1
   d7500:	8820      	ldrh	r0, [r4, #0]
   d7502:	f000 fccb 	bl	d7e9c <HAL_Pin_Mode>
   d7506:	2001      	movs	r0, #1
   d7508:	f000 fc80 	bl	d7e0c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d750c:	2100      	movs	r1, #0
   d750e:	8820      	ldrh	r0, [r4, #0]
   d7510:	f000 fcc4 	bl	d7e9c <HAL_Pin_Mode>
   d7514:	200d      	movs	r0, #13
   d7516:	f000 fc79 	bl	d7e0c <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d751a:	8820      	ldrh	r0, [r4, #0]
   d751c:	f7ff ff48 	bl	d73b0 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d7520:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d7522:	4628      	mov	r0, r5
   d7524:	f000 fc9a 	bl	d7e5c <HAL_enable_irq>
   d7528:	202e      	movs	r0, #46	; 0x2e
   d752a:	f000 fc6f 	bl	d7e0c <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d752e:	4620      	mov	r0, r4
   d7530:	bd38      	pop	{r3, r4, r5, pc}

000d7532 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d7532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7536:	4605      	mov	r5, r0
   d7538:	4688      	mov	r8, r1
   d753a:	4617      	mov	r7, r2
   d753c:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d753e:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d7540:	ea18 0f04 	tst.w	r8, r4
   d7544:	bf14      	ite	ne
   d7546:	2101      	movne	r1, #1
   d7548:	2100      	moveq	r1, #0
   d754a:	4628      	mov	r0, r5
   d754c:	f7ff ff9b 	bl	d7486 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7550:	0064      	lsls	r4, r4, #1
   d7552:	3e01      	subs	r6, #1
   d7554:	b2e4      	uxtb	r4, r4
   d7556:	d1f3      	bne.n	d7540 <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
   d7558:	b167      	cbz	r7, d7574 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d755a:	f001 fd15 	bl	d8f88 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d755e:	8828      	ldrh	r0, [r5, #0]
   d7560:	f7ff ff0c 	bl	d737c <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d7564:	8828      	ldrh	r0, [r5, #0]
   d7566:	2101      	movs	r1, #1
   d7568:	f000 fc98 	bl	d7e9c <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d756c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
   d7570:	f001 bd0c 	b.w	d8f8c <_Z10interruptsv>
   d7574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7578 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d7578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d757a:	4607      	mov	r7, r0
   d757c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d757e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7580:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d7582:	4638      	mov	r0, r7
   d7584:	f7ff ffb3 	bl	d74ee <_ZN7OneWire8read_bitEv>
   d7588:	b100      	cbz	r0, d758c <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d758a:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d758c:	0064      	lsls	r4, r4, #1
   d758e:	3e01      	subs	r6, #1
   d7590:	b2e4      	uxtb	r4, r4
   d7592:	d1f6      	bne.n	d7582 <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
   d7594:	4628      	mov	r0, r5
   d7596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7598 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d7598:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d759a:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d759c:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
   d759e:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d75a0:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
   d75a2:	f7ff ffc6 	bl	d7532 <_ZN7OneWire5writeEhh>
   d75a6:	1e65      	subs	r5, r4, #1
   d75a8:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
   d75aa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d75ae:	2200      	movs	r2, #0
   d75b0:	4630      	mov	r0, r6
   d75b2:	f7ff ffbe 	bl	d7532 <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
   d75b6:	42a5      	cmp	r5, r4
   d75b8:	d1f7      	bne.n	d75aa <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
   d75ba:	bd70      	pop	{r4, r5, r6, pc}

000d75bc <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d75bc:	2200      	movs	r2, #0
   d75be:	21cc      	movs	r1, #204	; 0xcc
   d75c0:	f7ff bfb7 	b.w	d7532 <_ZN7OneWire5writeEhh>

000d75c4 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d75c4:	2300      	movs	r3, #0
   d75c6:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d75c8:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d75ca:	72c3      	strb	r3, [r0, #11]
   d75cc:	f100 020a 	add.w	r2, r0, #10
   d75d0:	3002      	adds	r0, #2

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d75d2:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
   d75d6:	4282      	cmp	r2, r0
   d75d8:	d1fb      	bne.n	d75d2 <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
   d75da:	4770      	bx	lr

000d75dc <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d75dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d75e0:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d75e2:	4604      	mov	r4, r0
   d75e4:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d75e6:	2d00      	cmp	r5, #0
   d75e8:	d15e      	bne.n	d76a8 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
   d75ea:	f7ff ff0d 	bl	d7408 <_ZN7OneWire5resetEv>
   d75ee:	b920      	cbnz	r0, d75fa <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
   d75f0:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d75f2:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d75f4:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d75f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d75fa:	462a      	mov	r2, r5
   d75fc:	21f0      	movs	r1, #240	; 0xf0
   d75fe:	4620      	mov	r0, r4
   d7600:	f7ff ff97 	bl	d7532 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d7604:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d7606:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d7608:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d760a:	4620      	mov	r0, r4
   d760c:	f7ff ff6f 	bl	d74ee <_ZN7OneWire8read_bitEv>
   d7610:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d7612:	4620      	mov	r0, r4
   d7614:	f7ff ff6b 	bl	d74ee <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d7618:	f1b9 0f01 	cmp.w	r9, #1
   d761c:	d102      	bne.n	d7624 <_ZN7OneWire6searchEPh+0x48>
   d761e:	2801      	cmp	r0, #1
   d7620:	d11b      	bne.n	d765a <_ZN7OneWire6searchEPh+0x7e>
   d7622:	e037      	b.n	d7694 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
   d7624:	4581      	cmp	r9, r0
   d7626:	eb04 0305 	add.w	r3, r4, r5
   d762a:	d11e      	bne.n	d766a <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d762c:	7aa2      	ldrb	r2, [r4, #10]
   d762e:	4297      	cmp	r7, r2
   d7630:	d207      	bcs.n	d7642 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d7632:	789a      	ldrb	r2, [r3, #2]
   d7634:	4216      	tst	r6, r2
   d7636:	bf14      	ite	ne
   d7638:	f04f 0901 	movne.w	r9, #1
   d763c:	f04f 0900 	moveq.w	r9, #0
   d7640:	e004      	b.n	d764c <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d7642:	bf0c      	ite	eq
   d7644:	f04f 0901 	moveq.w	r9, #1
   d7648:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
   d764c:	f1b9 0f00 	cmp.w	r9, #0
   d7650:	d103      	bne.n	d765a <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d7652:	2f08      	cmp	r7, #8
   d7654:	d808      	bhi.n	d7668 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d7656:	72e7      	strb	r7, [r4, #11]
   d7658:	e006      	b.n	d7668 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d765a:	1962      	adds	r2, r4, r5
   d765c:	f04f 0901 	mov.w	r9, #1
   d7660:	7893      	ldrb	r3, [r2, #2]
   d7662:	4333      	orrs	r3, r6
   d7664:	7093      	strb	r3, [r2, #2]
   d7666:	e004      	b.n	d7672 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d7668:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d766a:	789a      	ldrb	r2, [r3, #2]
   d766c:	ea22 0206 	bic.w	r2, r2, r6
   d7670:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d7672:	4649      	mov	r1, r9
   d7674:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d7676:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d7678:	f7ff ff05 	bl	d7486 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d767c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d7680:	bf04      	itt	eq
   d7682:	3501      	addeq	r5, #1
   d7684:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d7686:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d768a:	bf08      	it	eq
   d768c:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d768e:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d7690:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7692:	d9ba      	bls.n	d760a <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d7694:	2f40      	cmp	r7, #64	; 0x40
   d7696:	d907      	bls.n	d76a8 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d7698:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d769c:	f1ba 0f00 	cmp.w	sl, #0
   d76a0:	d112      	bne.n	d76c8 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d76a2:	2301      	movs	r3, #1
   d76a4:	7323      	strb	r3, [r4, #12]
   d76a6:	e00f      	b.n	d76c8 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d76a8:	2000      	movs	r0, #0
   d76aa:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d76ac:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d76ae:	72e0      	strb	r0, [r4, #11]
   d76b0:	1c63      	adds	r3, r4, #1
   d76b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d76b6:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
   d76b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d76bc:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d76c0:	42a3      	cmp	r3, r4
   d76c2:	d1f9      	bne.n	d76b8 <_ZN7OneWire6searchEPh+0xdc>
   d76c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
   d76c8:	78a3      	ldrb	r3, [r4, #2]
   d76ca:	2b00      	cmp	r3, #0
   d76cc:	d0ec      	beq.n	d76a8 <_ZN7OneWire6searchEPh+0xcc>
   d76ce:	2001      	movs	r0, #1
   d76d0:	e7ee      	b.n	d76b0 <_ZN7OneWire6searchEPh+0xd4>

000d76d2 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d76d2:	b530      	push	{r4, r5, lr}
   d76d4:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d76d6:	2000      	movs	r0, #0

    while (len--)
   d76d8:	3901      	subs	r1, #1
   d76da:	b2c9      	uxtb	r1, r1
   d76dc:	29ff      	cmp	r1, #255	; 0xff
   d76de:	d013      	beq.n	d7708 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
   d76e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d76e4:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d76e6:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
   d76ea:	f013 0f01 	tst.w	r3, #1
   d76ee:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d76f2:	bf1c      	itt	ne
   d76f4:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d76f8:	b2d8      	uxtbne	r0, r3
   d76fa:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d76fc:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
   d7700:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d7704:	d1ef      	bne.n	d76e6 <_ZN7OneWire4crc8EPhh+0x14>
   d7706:	e7e7      	b.n	d76d8 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
   d7708:	bd30      	pop	{r4, r5, pc}
	...

000d770c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d770c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d770e:	f000 fbbd 	bl	d7e8c <HAL_Pin_Map>
   d7712:	4b01      	ldr	r3, [pc, #4]	; (d7718 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d7714:	6018      	str	r0, [r3, #0]
   d7716:	bd08      	pop	{r3, pc}
   d7718:	2003e234 	.word	0x2003e234

000d771c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d771c:	6842      	ldr	r2, [r0, #4]
   d771e:	6803      	ldr	r3, [r0, #0]
   d7720:	1050      	asrs	r0, r2, #1
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
   d7722:	f012 0f01 	tst.w	r2, #1
   d7726:	bf18      	it	ne
   d7728:	580a      	ldrne	r2, [r1, r0]
   d772a:	4408      	add	r0, r1
   d772c:	bf18      	it	ne
   d772e:	58d3      	ldrne	r3, [r2, r3]
   d7730:	4718      	bx	r3

000d7732 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d7732:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7734:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
   d7736:	d101      	bne.n	d773c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d7738:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
   d773a:	e005      	b.n	d7748 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d773c:	2a02      	cmp	r2, #2
   d773e:	d103      	bne.n	d7748 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7740:	b110      	cbz	r0, d7748 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
   d7742:	c903      	ldmia	r1, {r0, r1}
   d7744:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d7748:	2000      	movs	r0, #0
   d774a:	4770      	bx	lr

000d774c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d774c:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d774e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7750:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d7754:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
   d7756:	3008      	adds	r0, #8
   d7758:	f000 fb00 	bl	d7d5c <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d775c:	2004      	movs	r0, #4
   d775e:	f7fc fc9c 	bl	d409a <_Znwj>
   d7762:	4604      	mov	r4, r0
   d7764:	2800      	cmp	r0, #0
   d7766:	d035      	beq.n	d77d4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d7768:	491c      	ldr	r1, [pc, #112]	; (d77dc <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
   d776a:	2014      	movs	r0, #20
   d776c:	f002 fe46 	bl	da3fc <_ZnwjRKSt9nothrow_t>
   d7770:	b130      	cbz	r0, d7780 <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7772:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7774:	7403      	strb	r3, [r0, #16]
   d7776:	6003      	str	r3, [r0, #0]
   d7778:	6043      	str	r3, [r0, #4]
   d777a:	6083      	str	r3, [r0, #8]
   d777c:	60c3      	str	r3, [r0, #12]
   d777e:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7780:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d7782:	b1b0      	cbz	r0, d77b2 <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
   d7784:	4b16      	ldr	r3, [pc, #88]	; (d77e0 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d7786:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7788:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d778a:	4916      	ldr	r1, [pc, #88]	; (d77e4 <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d778c:	60dd      	str	r5, [r3, #12]
   d778e:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7790:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7794:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7798:	2202      	movs	r2, #2
   d779a:	4b13      	ldr	r3, [pc, #76]	; (d77e8 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d779c:	3004      	adds	r0, #4
   d779e:	f000 faad 	bl	d7cfc <os_thread_create>
   d77a2:	b930      	cbnz	r0, d77b2 <_ZN21PublishQueueAsyncBase5setupEv+0x66>
   d77a4:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d77a6:	7c1b      	ldrb	r3, [r3, #16]
   d77a8:	b9a3      	cbnz	r3, d77d4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d77aa:	2001      	movs	r0, #1
   d77ac:	f000 fb26 	bl	d7dfc <HAL_Delay_Milliseconds>
   d77b0:	e7f8      	b.n	d77a4 <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77b2:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d77b4:	2300      	movs	r3, #0
   d77b6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d77b8:	b166      	cbz	r6, d77d4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d77ba:	6837      	ldr	r7, [r6, #0]
   d77bc:	b137      	cbz	r7, d77cc <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77be:	4638      	mov	r0, r7
   d77c0:	f7fe f8d8 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d77c4:	2110      	movs	r1, #16
   d77c6:	4638      	mov	r0, r7
   d77c8:	f002 fe0d 	bl	da3e6 <_ZdlPvj>
   d77cc:	2114      	movs	r1, #20
   d77ce:	4630      	mov	r0, r6
   d77d0:	f002 fe09 	bl	da3e6 <_ZdlPvj>
   d77d4:	606c      	str	r4, [r5, #4]
}
   d77d6:	b003      	add	sp, #12
   d77d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d77da:	bf00      	nop
   d77dc:	000ddbc8 	.word	0x000ddbc8
   d77e0:	000d79ff 	.word	0x000d79ff
   d77e4:	000dd814 	.word	0x000dd814
   d77e8:	000d58ed 	.word	0x000d58ed

000d77ec <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d77ec:	f247 5130 	movw	r1, #30000	; 0x7530
   d77f0:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d77f2:	490a      	ldr	r1, [pc, #40]	; (d781c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d77f4:	4a0a      	ldr	r2, [pc, #40]	; (d7820 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d77f6:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d77f8:	490a      	ldr	r1, [pc, #40]	; (d7824 <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
   d77fa:	6002      	str	r2, [r0, #0]
   d77fc:	61c1      	str	r1, [r0, #28]
   d77fe:	2200      	movs	r2, #0
	    _M_manager = &_My_handler::_M_manager;
   d7800:	4909      	ldr	r1, [pc, #36]	; (d7828 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
   d7802:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7804:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7806:	6181      	str	r1, [r0, #24]
   d7808:	6202      	str	r2, [r0, #32]
   d780a:	6242      	str	r2, [r0, #36]	; 0x24
   d780c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   d7810:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   d7814:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
   d7818:	4770      	bx	lr
   d781a:	bf00      	nop
   d781c:	000d7b59 	.word	0x000d7b59
   d7820:	000dd8d8 	.word	0x000dd8d8
   d7824:	000d771d 	.word	0x000d771d
   d7828:	000d7733 	.word	0x000d7733

000d782c <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d782c:	b510      	push	{r4, lr}
   d782e:	4b04      	ldr	r3, [pc, #16]	; (d7840 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7830:	4604      	mov	r4, r0
   d7832:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7836:	f7fe f89d 	bl	d5974 <_ZNSt14_Function_baseD1Ev>

}
   d783a:	4620      	mov	r0, r4
   d783c:	bd10      	pop	{r4, pc}
   d783e:	bf00      	nop
   d7840:	000dd8d8 	.word	0x000dd8d8

000d7844 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7844:	b510      	push	{r4, lr}
   d7846:	4b03      	ldr	r3, [pc, #12]	; (d7854 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7848:	6003      	str	r3, [r0, #0]
   d784a:	4604      	mov	r4, r0
   d784c:	f7ff ffee 	bl	d782c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7850:	4620      	mov	r0, r4
   d7852:	bd10      	pop	{r4, pc}
   d7854:	000dd7f4 	.word	0x000dd7f4

000d7858 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7858:	b510      	push	{r4, lr}
   d785a:	4604      	mov	r4, r0

}
   d785c:	f7ff fff2 	bl	d7844 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7860:	4620      	mov	r0, r4
   d7862:	2138      	movs	r1, #56	; 0x38
   d7864:	f002 fdbf 	bl	da3e6 <_ZdlPvj>
   d7868:	4620      	mov	r0, r4
   d786a:	bd10      	pop	{r4, pc}

000d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
   d786c:	6880      	ldr	r0, [r0, #8]
   d786e:	f000 ba7d 	b.w	d7d6c <os_mutex_lock>

000d7872 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
   d7872:	6880      	ldr	r0, [r0, #8]
   d7874:	f000 ba82 	b.w	d7d7c <os_mutex_unlock>

000d7878 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7878:	b510      	push	{r4, lr}
   d787a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d787c:	6800      	ldr	r0, [r0, #0]
   d787e:	f7ff fff8 	bl	d7872 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7882:	4620      	mov	r0, r4
   d7884:	bd10      	pop	{r4, pc}

000d7886 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7886:	b513      	push	{r0, r1, r4, lr}
   d7888:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d788a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d788c:	f7ff ffee 	bl	d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7892:	88dc      	ldrh	r4, [r3, #6]
   d7894:	b2a4      	uxth	r4, r4
   d7896:	b10c      	cbz	r4, d789c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7898:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d789c:	a801      	add	r0, sp, #4
   d789e:	f7ff ffeb 	bl	d7878 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
   d78a2:	4620      	mov	r0, r4
   d78a4:	b002      	add	sp, #8
   d78a6:	bd10      	pop	{r4, pc}

000d78a8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d78a8:	b513      	push	{r0, r1, r4, lr}
   d78aa:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d78ac:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d78ae:	f7ff ffdd 	bl	d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d78b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d78b6:	b91b      	cbnz	r3, d78c0 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d78b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
   d78ba:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
   d78bc:	80d3      	strh	r3, [r2, #6]
   d78be:	e000      	b.n	d78c2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
   d78c0:	2400      	movs	r4, #0

	StMutexLock lock(this);
   d78c2:	a801      	add	r0, sp, #4
   d78c4:	f7ff ffd8 	bl	d7878 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
   d78c8:	4620      	mov	r0, r4
   d78ca:	b002      	add	sp, #8
   d78cc:	bd10      	pop	{r4, pc}

000d78ce <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d78ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d78d0:	ac02      	add	r4, sp, #8
   d78d2:	4605      	mov	r5, r0
   d78d4:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
   d78d8:	f7ff ffc8 	bl	d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d78dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d78de:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d78e0:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d78e2:	f7ff ffc9 	bl	d7878 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d78e6:	4628      	mov	r0, r5
   d78e8:	b003      	add	sp, #12
   d78ea:	bd30      	pop	{r4, r5, pc}

000d78ec <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d78ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78f0:	469a      	mov	sl, r3
   d78f2:	b086      	sub	sp, #24

	if (!haveSetup) {
   d78f4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d78f8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d78fc:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7900:	4604      	mov	r4, r0
   d7902:	4688      	mov	r8, r1
   d7904:	4616      	mov	r6, r2

	if (!haveSetup) {
   d7906:	b913      	cbnz	r3, d790e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7908:	6803      	ldr	r3, [r0, #0]
   d790a:	689b      	ldr	r3, [r3, #8]
   d790c:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
   d790e:	4b31      	ldr	r3, [pc, #196]	; (d79d4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7910:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
   d7912:	2e00      	cmp	r6, #0
   d7914:	bf08      	it	eq
   d7916:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7918:	f004 fda6 	bl	dc468 <strlen>
   d791c:	4605      	mov	r5, r0
   d791e:	4630      	mov	r0, r6
   d7920:	f004 fda2 	bl	dc468 <strlen>
   d7924:	4428      	add	r0, r5
   d7926:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d792a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d792c:	bf1c      	itt	ne
   d792e:	f025 0503 	bicne.w	r5, r5, #3
   d7932:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7934:	4633      	mov	r3, r6
   d7936:	9503      	str	r5, [sp, #12]
   d7938:	9702      	str	r7, [sp, #8]
   d793a:	f8cd 9004 	str.w	r9, [sp, #4]
   d793e:	f8cd a000 	str.w	sl, [sp]
   d7942:	4642      	mov	r2, r8
   d7944:	4924      	ldr	r1, [pc, #144]	; (d79d8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7946:	4825      	ldr	r0, [pc, #148]	; (d79dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7948:	f7fc fcb1 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d794c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d794e:	3b08      	subs	r3, #8
   d7950:	429d      	cmp	r5, r3
   d7952:	d90f      	bls.n	d7974 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
   d7954:	2400      	movs	r4, #0
   d7956:	e038      	b.n	d79ca <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
   d7958:	88cb      	ldrh	r3, [r1, #6]
   d795a:	2b01      	cmp	r3, #1
   d795c:	d031      	beq.n	d79c2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
   d795e:	a805      	add	r0, sp, #20
   d7960:	f7ff ff8a 	bl	d7878 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
   d7964:	6823      	ldr	r3, [r4, #0]
   d7966:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d796a:	699b      	ldr	r3, [r3, #24]
   d796c:	4620      	mov	r0, r4
   d796e:	4798      	blx	r3
   d7970:	2800      	cmp	r0, #0
   d7972:	d0ef      	beq.n	d7954 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
   d7974:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7976:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7978:	f7ff ff78 	bl	d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d797c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
   d797e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7980:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d7982:	440b      	add	r3, r1
   d7984:	1a9b      	subs	r3, r3, r2
   d7986:	429d      	cmp	r5, r3
   d7988:	d8e6      	bhi.n	d7958 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
   d798a:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
   d798e:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
   d7992:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
   d7994:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d7996:	3708      	adds	r7, #8

				strcpy(cp, eventName);
   d7998:	4641      	mov	r1, r8
   d799a:	4638      	mov	r0, r7
   d799c:	f004 f82c 	bl	db9f8 <strcpy>
				cp += strlen(cp) + 1;
   d79a0:	4638      	mov	r0, r7
   d79a2:	f004 fd61 	bl	dc468 <strlen>

				strcpy(cp, data);
   d79a6:	3001      	adds	r0, #1
   d79a8:	4631      	mov	r1, r6
   d79aa:	4438      	add	r0, r7
   d79ac:	f004 f824 	bl	db9f8 <strcpy>

				nextFree += size;
   d79b0:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d79b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
   d79b4:	4428      	add	r0, r5
   d79b6:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
   d79b8:	88d3      	ldrh	r3, [r2, #6]
   d79ba:	3301      	adds	r3, #1
   d79bc:	80d3      	strh	r3, [r2, #6]
				return true;
   d79be:	2401      	movs	r4, #1
   d79c0:	e000      	b.n	d79c4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
   d79c2:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
   d79c4:	a805      	add	r0, sp, #20
   d79c6:	f7ff ff57 	bl	d7878 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
   d79ca:	4620      	mov	r0, r4
   d79cc:	b006      	add	sp, #24
   d79ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79d2:	bf00      	nop
   d79d4:	000dd50e 	.word	0x000dd50e
   d79d8:	000dd826 	.word	0x000dd826
   d79dc:	2003e238 	.word	0x2003e238

000d79e0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
   d79e0:	b508      	push	{r3, lr}
   d79e2:	4604      	mov	r4, r0
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d79e4:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d79e8:	69a3      	ldr	r3, [r4, #24]
   d79ea:	b90b      	cbnz	r3, d79f0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d79ec:	f002 fd17 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d79f0:	69e3      	ldr	r3, [r4, #28]
   d79f2:	4621      	mov	r1, r4
   d79f4:	4628      	mov	r0, r5
   d79f6:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
   d79f8:	f000 f990 	bl	d7d1c <os_thread_yield>
   d79fc:	e7f4      	b.n	d79e8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d79fe <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d79fe:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7a00:	f7ff ffee 	bl	d79e0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7a04 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7a04:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
   d7a06:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7a0a:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	f004 fd2b 	bl	dc468 <strlen>
   d7a12:	3001      	adds	r0, #1
   d7a14:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7a16:	4620      	mov	r0, r4
   d7a18:	f004 fd26 	bl	dc468 <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d7a1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7a1e:	3001      	adds	r0, #1
   d7a20:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d7a22:	1ac3      	subs	r3, r0, r3
   d7a24:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7a28:	bf1c      	itt	ne
   d7a2a:	f1c3 0304 	rsbne	r3, r3, #4
   d7a2e:	18c0      	addne	r0, r0, r3
	}


	return start;
}
   d7a30:	bd38      	pop	{r3, r4, r5, pc}

000d7a32 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7a36:	4605      	mov	r5, r0
   d7a38:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7a3a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7a3c:	f7ff ff16 	bl	d786c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7a40:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a42:	f106 0708 	add.w	r7, r6, #8
   d7a46:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
   d7a48:	f1b8 0f00 	cmp.w	r8, #0
   d7a4c:	d007      	beq.n	d7a5e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
   d7a4e:	2c01      	cmp	r4, #1
   d7a50:	d91c      	bls.n	d7a8c <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
   d7a52:	4639      	mov	r1, r7
   d7a54:	4628      	mov	r0, r5
   d7a56:	f7ff ffd5 	bl	d7a04 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7a5a:	4607      	mov	r7, r0
   d7a5c:	e000      	b.n	d7a60 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
   d7a5e:	b1b4      	cbz	r4, d7a8e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d7a60:	4639      	mov	r1, r7
   d7a62:	4628      	mov	r0, r5
   d7a64:	f7ff ffce 	bl	d7a04 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
   d7a68:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   d7a6a:	4432      	add	r2, r6
	if (after > 0) {
   d7a6c:	1a12      	subs	r2, r2, r0
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d7a6e:	4601      	mov	r1, r0
	size_t len = next - start;
   d7a70:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
   d7a74:	d002      	beq.n	d7a7c <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
   d7a76:	4638      	mov	r0, r7
   d7a78:	f003 fd1b 	bl	db4b2 <memmove>
	}

	nextFree -= len;
   d7a7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d7a7e:	1b1b      	subs	r3, r3, r4
   d7a80:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
   d7a82:	88f3      	ldrh	r3, [r6, #6]
   d7a84:	3b01      	subs	r3, #1
   d7a86:	80f3      	strh	r3, [r6, #6]


	return true;
   d7a88:	2401      	movs	r4, #1
   d7a8a:	e000      	b.n	d7a8e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
   d7a8c:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d7a8e:	a801      	add	r0, sp, #4
   d7a90:	f7ff fef2 	bl	d7878 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
   d7a94:	4620      	mov	r0, r4
   d7a96:	b002      	add	sp, #8
   d7a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a9c <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7aa0:	4604      	mov	r4, r0
   d7aa2:	460d      	mov	r5, r1
   d7aa4:	4690      	mov	r8, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7aa6:	2600      	movs	r6, #0
   d7aa8:	f7ff fea0 	bl	d77ec <_ZN21PublishQueueAsyncBaseC1Ev>

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7aac:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7aae:	4b15      	ldr	r3, [pc, #84]	; (d7b04 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
   d7ab0:	6023      	str	r3, [r4, #0]
   d7ab2:	62e5      	str	r5, [r4, #44]	; 0x2c
   d7ab4:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
   d7ab8:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7aba:	4b13      	ldr	r3, [pc, #76]	; (d7b08 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
   d7abc:	f857 2b08 	ldr.w	r2, [r7], #8
   d7ac0:	429a      	cmp	r2, r3
   d7ac2:	4699      	mov	r9, r3
   d7ac4:	d114      	bne.n	d7af0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7ac6:	88ab      	ldrh	r3, [r5, #4]
   d7ac8:	b29b      	uxth	r3, r3
   d7aca:	4598      	cmp	r8, r3
   d7acc:	d110      	bne.n	d7af0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7ace:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7ad2:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7ad4:	88eb      	ldrh	r3, [r5, #6]
   d7ad6:	b2b2      	uxth	r2, r6
   d7ad8:	b29b      	uxth	r3, r3
   d7ada:	429a      	cmp	r2, r3
   d7adc:	d20f      	bcs.n	d7afe <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
   d7ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7ae0:	4620      	mov	r0, r4
   d7ae2:	f7ff ff8f 	bl	d7a04 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7ae6:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
   d7ae8:	6360      	str	r0, [r4, #52]	; 0x34
   d7aea:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
   d7aee:	d2f1      	bcs.n	d7ad4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
   d7af0:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7af2:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
   d7af6:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
   d7afa:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7afc:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
   d7afe:	4620      	mov	r0, r4
   d7b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b04:	000dd7f4 	.word	0x000dd7f4
   d7b08:	d19cab61 	.word	0xd19cab61

000d7b0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d7b0c:	b510      	push	{r4, lr}
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7b0e:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d7b12:	b086      	sub	sp, #24
   d7b14:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7b16:	9202      	str	r2, [sp, #8]
   d7b18:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b1a:	ab02      	add	r3, sp, #8
   d7b1c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7b20:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7b24:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7b28:	68a2      	ldr	r2, [r4, #8]
   d7b2a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7b2e:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b32:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b34:	4a06      	ldr	r2, [pc, #24]	; (d7b50 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
   d7b36:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b38:	68e2      	ldr	r2, [r4, #12]
   d7b3a:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b3c:	4a05      	ldr	r2, [pc, #20]	; (d7b54 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
   d7b3e:	60e2      	str	r2, [r4, #12]
   d7b40:	e884 0003 	stmia.w	r4, {r0, r1}
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b44:	4618      	mov	r0, r3
   d7b46:	f7fd ff15 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d7b4a:	4620      	mov	r0, r4
   d7b4c:	b006      	add	sp, #24
   d7b4e:	bd10      	pop	{r4, pc}
   d7b50:	000d7733 	.word	0x000d7733
   d7b54:	000d771d 	.word	0x000d771d

000d7b58 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
   d7b58:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7b5a:	4b05      	ldr	r3, [pc, #20]	; (d7b70 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7b5c:	9300      	str	r3, [sp, #0]
   d7b5e:	4669      	mov	r1, sp
   d7b60:	2300      	movs	r3, #0
   d7b62:	3010      	adds	r0, #16
   d7b64:	9301      	str	r3, [sp, #4]
   d7b66:	f7ff ffd1 	bl	d7b0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
   d7b6a:	b003      	add	sp, #12
   d7b6c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b70:	000d7ba1 	.word	0x000d7ba1

000d7b74 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   d7b74:	b513      	push	{r0, r1, r4, lr}
   d7b76:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7b78:	f000 f950 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b7e:	1ac0      	subs	r0, r0, r3
   d7b80:	68e3      	ldr	r3, [r4, #12]
   d7b82:	4298      	cmp	r0, r3
   d7b84:	d308      	bcc.n	d7b98 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7b86:	4b05      	ldr	r3, [pc, #20]	; (d7b9c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7b88:	9300      	str	r3, [sp, #0]
   d7b8a:	4669      	mov	r1, sp
   d7b8c:	2300      	movs	r3, #0
   d7b8e:	f104 0010 	add.w	r0, r4, #16
   d7b92:	9301      	str	r3, [sp, #4]
   d7b94:	f7ff ffba 	bl	d7b0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
   d7b98:	b002      	add	sp, #8
   d7b9a:	bd10      	pop	{r4, pc}
   d7b9c:	000d7ba1 	.word	0x000d7ba1

000d7ba0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d7ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7ba4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d7ba8:	b086      	sub	sp, #24
   d7baa:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7bac:	2b00      	cmp	r3, #0
   d7bae:	d173      	bne.n	d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7bb0:	f000 fb94 	bl	d82dc <spark_cloud_flag_connected>
   d7bb4:	2800      	cmp	r0, #0
   d7bb6:	d06f      	beq.n	d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
   d7bb8:	f000 f930 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
   d7bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7bbe:	1ac0      	subs	r0, r0, r3
   d7bc0:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7bc4:	4298      	cmp	r0, r3
   d7bc6:	d967      	bls.n	d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
   d7bc8:	6823      	ldr	r3, [r4, #0]
   d7bca:	4620      	mov	r0, r4
   d7bcc:	695b      	ldr	r3, [r3, #20]
   d7bce:	4798      	blx	r3
		if (data) {
   d7bd0:	4605      	mov	r5, r0
   d7bd2:	2800      	cmp	r0, #0
   d7bd4:	d060      	beq.n	d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7bd6:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
   d7bda:	2301      	movs	r3, #1
   d7bdc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d7be0:	4630      	mov	r0, r6
   d7be2:	f004 fc41 	bl	dc468 <strlen>

			PublishFlags flags(PublishFlag(data->flags));
   d7be6:	f895 8004 	ldrb.w	r8, [r5, #4]

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7bea:	f8cd 8004 	str.w	r8, [sp, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d7bee:	3001      	adds	r0, #1
   d7bf0:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7bf2:	682b      	ldr	r3, [r5, #0]
   d7bf4:	9300      	str	r3, [sp, #0]
   d7bf6:	4632      	mov	r2, r6
   d7bf8:	463b      	mov	r3, r7
   d7bfa:	4929      	ldr	r1, [pc, #164]	; (d7ca0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7bfc:	4829      	ldr	r0, [pc, #164]	; (d7ca4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7bfe:	f7fc fb56 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7c02:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7c04:	f88d 8000 	strb.w	r8, [sp]
   d7c08:	463a      	mov	r2, r7
   d7c0a:	4631      	mov	r1, r6
   d7c0c:	a802      	add	r0, sp, #8
   d7c0e:	f000 ff3f 	bl	d8a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7c12:	9d02      	ldr	r5, [sp, #8]
   d7c14:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
   d7c16:	b91b      	cbnz	r3, d7c20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7c18:	2001      	movs	r0, #1
   d7c1a:	f000 fc3f 	bl	d849c <delay>
   d7c1e:	e7f8      	b.n	d7c12 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7c20:	2000      	movs	r0, #0
   d7c22:	f000 faf5 	bl	d8210 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d7c26:	b120      	cbz	r0, d7c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7c28:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7c2a:	b913      	cbnz	r3, d7c32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d7c2c:	f000 fb3e 	bl	d82ac <spark_process>
   d7c30:	e7fa      	b.n	d7c28 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7c32:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
   d7c34:	2b01      	cmp	r3, #1
   d7c36:	d109      	bne.n	d7c4c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
   d7c38:	491b      	ldr	r1, [pc, #108]	; (d7ca8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7c3a:	481a      	ldr	r0, [pc, #104]	; (d7ca4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7c3c:	f7fc fb37 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7c40:	6823      	ldr	r3, [r4, #0]
   d7c42:	2100      	movs	r1, #0
   d7c44:	699b      	ldr	r3, [r3, #24]
   d7c46:	4620      	mov	r0, r4
   d7c48:	4798      	blx	r3
   d7c4a:	e00d      	b.n	d7c68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7c4c:	4917      	ldr	r1, [pc, #92]	; (d7cac <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7c4e:	4815      	ldr	r0, [pc, #84]	; (d7ca4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7c50:	68e2      	ldr	r2, [r4, #12]
   d7c52:	f7fc fb2c 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7c56:	4b16      	ldr	r3, [pc, #88]	; (d7cb0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7c58:	9304      	str	r3, [sp, #16]
   d7c5a:	a904      	add	r1, sp, #16
   d7c5c:	2300      	movs	r3, #0
   d7c5e:	f104 0010 	add.w	r0, r4, #16
   d7c62:	9305      	str	r3, [sp, #20]
   d7c64:	f7ff ff52 	bl	d7b0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
   d7c68:	2300      	movs	r3, #0
   d7c6a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7c6e:	f000 f8d5 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7c72:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7c74:	9c03      	ldr	r4, [sp, #12]
   d7c76:	b17c      	cbz	r4, d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7c78:	6863      	ldr	r3, [r4, #4]
   d7c7a:	3b01      	subs	r3, #1
   d7c7c:	6063      	str	r3, [r4, #4]
   d7c7e:	b95b      	cbnz	r3, d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
   d7c80:	6823      	ldr	r3, [r4, #0]
   d7c82:	4620      	mov	r0, r4
   d7c84:	689b      	ldr	r3, [r3, #8]
   d7c86:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7c88:	68a3      	ldr	r3, [r4, #8]
   d7c8a:	3b01      	subs	r3, #1
   d7c8c:	60a3      	str	r3, [r4, #8]
   d7c8e:	b91b      	cbnz	r3, d7c98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
   d7c90:	6823      	ldr	r3, [r4, #0]
   d7c92:	4620      	mov	r0, r4
   d7c94:	68db      	ldr	r3, [r3, #12]
   d7c96:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
   d7c98:	b006      	add	sp, #24
   d7c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7c9e:	bf00      	nop
   d7ca0:	000dd867 	.word	0x000dd867
   d7ca4:	2003e238 	.word	0x2003e238
   d7ca8:	000dd888 	.word	0x000dd888
   d7cac:	000dd89f 	.word	0x000dd89f
   d7cb0:	000d7b75 	.word	0x000d7b75

000d7cb4 <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	f000 f8e9 	bl	d7e8c <HAL_Pin_Map>
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <_GLOBAL__sub_I_pubqLogger+0x10>)
   d7cbc:	4a02      	ldr	r2, [pc, #8]	; (d7cc8 <_GLOBAL__sub_I_pubqLogger+0x14>)
   d7cbe:	601a      	str	r2, [r3, #0]
   d7cc0:	bd08      	pop	{r3, pc}
   d7cc2:	bf00      	nop
   d7cc4:	2003e238 	.word	0x2003e238
   d7cc8:	000dd8c6 	.word	0x000dd8c6

000d7ccc <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7ccc:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d7cce:	2201      	movs	r2, #1
   d7cd0:	701a      	strb	r2, [r3, #0]
   d7cd2:	f000 b8db 	b.w	d7e8c <HAL_Pin_Map>
   d7cd6:	bf00      	nop
   d7cd8:	2003e23c 	.word	0x2003e23c

000d7cdc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7cdc:	b508      	push	{r3, lr}
   d7cde:	4b02      	ldr	r3, [pc, #8]	; (d7ce8 <cellular_signal+0xc>)
   d7ce0:	681b      	ldr	r3, [r3, #0]
   d7ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ce4:	9301      	str	r3, [sp, #4]
   d7ce6:	bd08      	pop	{r3, pc}
   d7ce8:	00030274 	.word	0x00030274

000d7cec <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d7cec:	b508      	push	{r3, lr}
   d7cee:	4b02      	ldr	r3, [pc, #8]	; (d7cf8 <cellular_command+0xc>)
   d7cf0:	681b      	ldr	r3, [r3, #0]
   d7cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cf4:	9301      	str	r3, [sp, #4]
   d7cf6:	bd08      	pop	{r3, pc}
   d7cf8:	00030274 	.word	0x00030274

000d7cfc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7cfc:	b508      	push	{r3, lr}
   d7cfe:	4b02      	ldr	r3, [pc, #8]	; (d7d08 <os_thread_create+0xc>)
   d7d00:	681b      	ldr	r3, [r3, #0]
   d7d02:	685b      	ldr	r3, [r3, #4]
   d7d04:	9301      	str	r3, [sp, #4]
   d7d06:	bd08      	pop	{r3, pc}
   d7d08:	00030248 	.word	0x00030248

000d7d0c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7d0c:	b508      	push	{r3, lr}
   d7d0e:	4b02      	ldr	r3, [pc, #8]	; (d7d18 <os_thread_is_current+0xc>)
   d7d10:	681b      	ldr	r3, [r3, #0]
   d7d12:	689b      	ldr	r3, [r3, #8]
   d7d14:	9301      	str	r3, [sp, #4]
   d7d16:	bd08      	pop	{r3, pc}
   d7d18:	00030248 	.word	0x00030248

000d7d1c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d1c:	b508      	push	{r3, lr}
   d7d1e:	4b02      	ldr	r3, [pc, #8]	; (d7d28 <os_thread_yield+0xc>)
   d7d20:	681b      	ldr	r3, [r3, #0]
   d7d22:	68db      	ldr	r3, [r3, #12]
   d7d24:	9301      	str	r3, [sp, #4]
   d7d26:	bd08      	pop	{r3, pc}
   d7d28:	00030248 	.word	0x00030248

000d7d2c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7d2c:	b508      	push	{r3, lr}
   d7d2e:	4b02      	ldr	r3, [pc, #8]	; (d7d38 <os_thread_join+0xc>)
   d7d30:	681b      	ldr	r3, [r3, #0]
   d7d32:	691b      	ldr	r3, [r3, #16]
   d7d34:	9301      	str	r3, [sp, #4]
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	00030248 	.word	0x00030248

000d7d3c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <os_thread_cleanup+0xc>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	695b      	ldr	r3, [r3, #20]
   d7d44:	9301      	str	r3, [sp, #4]
   d7d46:	bd08      	pop	{r3, pc}
   d7d48:	00030248 	.word	0x00030248

000d7d4c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7d4c:	b508      	push	{r3, lr}
   d7d4e:	4b02      	ldr	r3, [pc, #8]	; (d7d58 <os_thread_scheduling+0xc>)
   d7d50:	681b      	ldr	r3, [r3, #0]
   d7d52:	69db      	ldr	r3, [r3, #28]
   d7d54:	9301      	str	r3, [sp, #4]
   d7d56:	bd08      	pop	{r3, pc}
   d7d58:	00030248 	.word	0x00030248

000d7d5c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7d5c:	b508      	push	{r3, lr}
   d7d5e:	4b02      	ldr	r3, [pc, #8]	; (d7d68 <os_mutex_create+0xc>)
   d7d60:	681b      	ldr	r3, [r3, #0]
   d7d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d64:	9301      	str	r3, [sp, #4]
   d7d66:	bd08      	pop	{r3, pc}
   d7d68:	00030248 	.word	0x00030248

000d7d6c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7d6c:	b508      	push	{r3, lr}
   d7d6e:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <os_mutex_lock+0xc>)
   d7d70:	681b      	ldr	r3, [r3, #0]
   d7d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d74:	9301      	str	r3, [sp, #4]
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	00030248 	.word	0x00030248

000d7d7c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7d7c:	b508      	push	{r3, lr}
   d7d7e:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <os_mutex_unlock+0xc>)
   d7d80:	681b      	ldr	r3, [r3, #0]
   d7d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	bd08      	pop	{r3, pc}
   d7d88:	00030248 	.word	0x00030248

000d7d8c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d8c:	b508      	push	{r3, lr}
   d7d8e:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <os_mutex_recursive_create+0xc>)
   d7d90:	681b      	ldr	r3, [r3, #0]
   d7d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d94:	9301      	str	r3, [sp, #4]
   d7d96:	bd08      	pop	{r3, pc}
   d7d98:	00030248 	.word	0x00030248

000d7d9c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <os_mutex_recursive_destroy+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	00030248 	.word	0x00030248

000d7dac <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b02      	ldr	r3, [pc, #8]	; (d7db8 <os_thread_exit+0xc>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7db4:	9301      	str	r3, [sp, #4]
   d7db6:	bd08      	pop	{r3, pc}
   d7db8:	00030248 	.word	0x00030248

000d7dbc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7dbc:	b508      	push	{r3, lr}
   d7dbe:	4b02      	ldr	r3, [pc, #8]	; (d7dc8 <HAL_Feature_Set+0xc>)
   d7dc0:	681b      	ldr	r3, [r3, #0]
   d7dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7dc4:	9301      	str	r3, [sp, #4]
   d7dc6:	bd08      	pop	{r3, pc}
   d7dc8:	00030234 	.word	0x00030234

000d7dcc <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d7dcc:	b508      	push	{r3, lr}
   d7dce:	4b02      	ldr	r3, [pc, #8]	; (d7dd8 <HAL_Core_System_Reset_Ex+0xc>)
   d7dd0:	681b      	ldr	r3, [r3, #0]
   d7dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7dd4:	9301      	str	r3, [sp, #4]
   d7dd6:	bd08      	pop	{r3, pc}
   d7dd8:	00030234 	.word	0x00030234

000d7ddc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7ddc:	b508      	push	{r3, lr}
   d7dde:	4b02      	ldr	r3, [pc, #8]	; (d7de8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7de0:	681b      	ldr	r3, [r3, #0]
   d7de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7de4:	9301      	str	r3, [sp, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	00030234 	.word	0x00030234

000d7dec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7dec:	b508      	push	{r3, lr}
   d7dee:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <HAL_RNG_GetRandomNumber+0xc>)
   d7df0:	681b      	ldr	r3, [r3, #0]
   d7df2:	685b      	ldr	r3, [r3, #4]
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	bd08      	pop	{r3, pc}
   d7df8:	00030218 	.word	0x00030218

000d7dfc <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7dfc:	b508      	push	{r3, lr}
   d7dfe:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <HAL_Delay_Milliseconds+0xc>)
   d7e00:	681b      	ldr	r3, [r3, #0]
   d7e02:	689b      	ldr	r3, [r3, #8]
   d7e04:	9301      	str	r3, [sp, #4]
   d7e06:	bd08      	pop	{r3, pc}
   d7e08:	00030218 	.word	0x00030218

000d7e0c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7e0c:	b508      	push	{r3, lr}
   d7e0e:	4b02      	ldr	r3, [pc, #8]	; (d7e18 <HAL_Delay_Microseconds+0xc>)
   d7e10:	681b      	ldr	r3, [r3, #0]
   d7e12:	68db      	ldr	r3, [r3, #12]
   d7e14:	9301      	str	r3, [sp, #4]
   d7e16:	bd08      	pop	{r3, pc}
   d7e18:	00030218 	.word	0x00030218

000d7e1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7e1c:	b508      	push	{r3, lr}
   d7e1e:	4b02      	ldr	r3, [pc, #8]	; (d7e28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7e20:	681b      	ldr	r3, [r3, #0]
   d7e22:	695b      	ldr	r3, [r3, #20]
   d7e24:	9301      	str	r3, [sp, #4]
   d7e26:	bd08      	pop	{r3, pc}
   d7e28:	00030218 	.word	0x00030218

000d7e2c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7e2c:	b508      	push	{r3, lr}
   d7e2e:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <HAL_RTC_Get_UnixTime+0xc>)
   d7e30:	681b      	ldr	r3, [r3, #0]
   d7e32:	69db      	ldr	r3, [r3, #28]
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	bd08      	pop	{r3, pc}
   d7e38:	00030218 	.word	0x00030218

000d7e3c <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <HAL_RTC_Set_UnixTime+0xc>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	6a1b      	ldr	r3, [r3, #32]
   d7e44:	9301      	str	r3, [sp, #4]
   d7e46:	bd08      	pop	{r3, pc}
   d7e48:	00030218 	.word	0x00030218

000d7e4c <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7e4c:	b508      	push	{r3, lr}
   d7e4e:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <HAL_disable_irq+0xc>)
   d7e50:	681b      	ldr	r3, [r3, #0]
   d7e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	bd08      	pop	{r3, pc}
   d7e58:	00030218 	.word	0x00030218

000d7e5c <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7e5c:	b508      	push	{r3, lr}
   d7e5e:	4b02      	ldr	r3, [pc, #8]	; (d7e68 <HAL_enable_irq+0xc>)
   d7e60:	681b      	ldr	r3, [r3, #0]
   d7e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e64:	9301      	str	r3, [sp, #4]
   d7e66:	bd08      	pop	{r3, pc}
   d7e68:	00030218 	.word	0x00030218

000d7e6c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7e6c:	b508      	push	{r3, lr}
   d7e6e:	4b02      	ldr	r3, [pc, #8]	; (d7e78 <HAL_RTC_Time_Is_Valid+0xc>)
   d7e70:	681b      	ldr	r3, [r3, #0]
   d7e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e74:	9301      	str	r3, [sp, #4]
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	00030218 	.word	0x00030218

000d7e7c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7e7c:	b508      	push	{r3, lr}
   d7e7e:	4b02      	ldr	r3, [pc, #8]	; (d7e88 <hal_timer_millis+0xc>)
   d7e80:	681b      	ldr	r3, [r3, #0]
   d7e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7e84:	9301      	str	r3, [sp, #4]
   d7e86:	bd08      	pop	{r3, pc}
   d7e88:	00030218 	.word	0x00030218

000d7e8c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7e8c:	b508      	push	{r3, lr}
   d7e8e:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <HAL_Pin_Map+0xc>)
   d7e90:	681b      	ldr	r3, [r3, #0]
   d7e92:	681b      	ldr	r3, [r3, #0]
   d7e94:	9301      	str	r3, [sp, #4]
   d7e96:	bd08      	pop	{r3, pc}
   d7e98:	0003022c 	.word	0x0003022c

000d7e9c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e9c:	b508      	push	{r3, lr}
   d7e9e:	4b02      	ldr	r3, [pc, #8]	; (d7ea8 <HAL_Pin_Mode+0xc>)
   d7ea0:	681b      	ldr	r3, [r3, #0]
   d7ea2:	689b      	ldr	r3, [r3, #8]
   d7ea4:	9301      	str	r3, [sp, #4]
   d7ea6:	bd08      	pop	{r3, pc}
   d7ea8:	0003022c 	.word	0x0003022c

000d7eac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7eac:	b508      	push	{r3, lr}
   d7eae:	4b02      	ldr	r3, [pc, #8]	; (d7eb8 <HAL_Get_Pin_Mode+0xc>)
   d7eb0:	681b      	ldr	r3, [r3, #0]
   d7eb2:	68db      	ldr	r3, [r3, #12]
   d7eb4:	9301      	str	r3, [sp, #4]
   d7eb6:	bd08      	pop	{r3, pc}
   d7eb8:	0003022c 	.word	0x0003022c

000d7ebc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7ebc:	b508      	push	{r3, lr}
   d7ebe:	4b02      	ldr	r3, [pc, #8]	; (d7ec8 <HAL_GPIO_Write+0xc>)
   d7ec0:	681b      	ldr	r3, [r3, #0]
   d7ec2:	691b      	ldr	r3, [r3, #16]
   d7ec4:	9301      	str	r3, [sp, #4]
   d7ec6:	bd08      	pop	{r3, pc}
   d7ec8:	0003022c 	.word	0x0003022c

000d7ecc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7ecc:	b508      	push	{r3, lr}
   d7ece:	4b02      	ldr	r3, [pc, #8]	; (d7ed8 <HAL_GPIO_Read+0xc>)
   d7ed0:	681b      	ldr	r3, [r3, #0]
   d7ed2:	695b      	ldr	r3, [r3, #20]
   d7ed4:	9301      	str	r3, [sp, #4]
   d7ed6:	bd08      	pop	{r3, pc}
   d7ed8:	0003022c 	.word	0x0003022c

000d7edc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7edc:	b508      	push	{r3, lr}
   d7ede:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <HAL_Interrupts_Attach+0xc>)
   d7ee0:	681b      	ldr	r3, [r3, #0]
   d7ee2:	699b      	ldr	r3, [r3, #24]
   d7ee4:	9301      	str	r3, [sp, #4]
   d7ee6:	bd08      	pop	{r3, pc}
   d7ee8:	0003022c 	.word	0x0003022c

000d7eec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7eec:	b508      	push	{r3, lr}
   d7eee:	4b02      	ldr	r3, [pc, #8]	; (d7ef8 <HAL_Interrupts_Detach+0xc>)
   d7ef0:	681b      	ldr	r3, [r3, #0]
   d7ef2:	69db      	ldr	r3, [r3, #28]
   d7ef4:	9301      	str	r3, [sp, #4]
   d7ef6:	bd08      	pop	{r3, pc}
   d7ef8:	0003022c 	.word	0x0003022c

000d7efc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7efc:	b508      	push	{r3, lr}
   d7efe:	4b02      	ldr	r3, [pc, #8]	; (d7f08 <HAL_Interrupts_Enable_All+0xc>)
   d7f00:	681b      	ldr	r3, [r3, #0]
   d7f02:	6a1b      	ldr	r3, [r3, #32]
   d7f04:	9301      	str	r3, [sp, #4]
   d7f06:	bd08      	pop	{r3, pc}
   d7f08:	0003022c 	.word	0x0003022c

000d7f0c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7f0c:	b508      	push	{r3, lr}
   d7f0e:	4b02      	ldr	r3, [pc, #8]	; (d7f18 <HAL_Interrupts_Disable_All+0xc>)
   d7f10:	681b      	ldr	r3, [r3, #0]
   d7f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f14:	9301      	str	r3, [sp, #4]
   d7f16:	bd08      	pop	{r3, pc}
   d7f18:	0003022c 	.word	0x0003022c

000d7f1c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7f1c:	b508      	push	{r3, lr}
   d7f1e:	4b02      	ldr	r3, [pc, #8]	; (d7f28 <HAL_I2C_Begin+0xc>)
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	68db      	ldr	r3, [r3, #12]
   d7f24:	9301      	str	r3, [sp, #4]
   d7f26:	bd08      	pop	{r3, pc}
   d7f28:	00030228 	.word	0x00030228

000d7f2c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7f2c:	b508      	push	{r3, lr}
   d7f2e:	4b02      	ldr	r3, [pc, #8]	; (d7f38 <HAL_I2C_Begin_Transmission+0xc>)
   d7f30:	681b      	ldr	r3, [r3, #0]
   d7f32:	699b      	ldr	r3, [r3, #24]
   d7f34:	9301      	str	r3, [sp, #4]
   d7f36:	bd08      	pop	{r3, pc}
   d7f38:	00030228 	.word	0x00030228

000d7f3c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7f3c:	b508      	push	{r3, lr}
   d7f3e:	4b02      	ldr	r3, [pc, #8]	; (d7f48 <HAL_I2C_End_Transmission+0xc>)
   d7f40:	681b      	ldr	r3, [r3, #0]
   d7f42:	69db      	ldr	r3, [r3, #28]
   d7f44:	9301      	str	r3, [sp, #4]
   d7f46:	bd08      	pop	{r3, pc}
   d7f48:	00030228 	.word	0x00030228

000d7f4c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7f4c:	b508      	push	{r3, lr}
   d7f4e:	4b02      	ldr	r3, [pc, #8]	; (d7f58 <HAL_I2C_Write_Data+0xc>)
   d7f50:	681b      	ldr	r3, [r3, #0]
   d7f52:	6a1b      	ldr	r3, [r3, #32]
   d7f54:	9301      	str	r3, [sp, #4]
   d7f56:	bd08      	pop	{r3, pc}
   d7f58:	00030228 	.word	0x00030228

000d7f5c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7f5c:	b508      	push	{r3, lr}
   d7f5e:	4b02      	ldr	r3, [pc, #8]	; (d7f68 <HAL_I2C_Available_Data+0xc>)
   d7f60:	681b      	ldr	r3, [r3, #0]
   d7f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f64:	9301      	str	r3, [sp, #4]
   d7f66:	bd08      	pop	{r3, pc}
   d7f68:	00030228 	.word	0x00030228

000d7f6c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7f6c:	b508      	push	{r3, lr}
   d7f6e:	4b02      	ldr	r3, [pc, #8]	; (d7f78 <HAL_I2C_Read_Data+0xc>)
   d7f70:	681b      	ldr	r3, [r3, #0]
   d7f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f74:	9301      	str	r3, [sp, #4]
   d7f76:	bd08      	pop	{r3, pc}
   d7f78:	00030228 	.word	0x00030228

000d7f7c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7f7c:	b508      	push	{r3, lr}
   d7f7e:	4b02      	ldr	r3, [pc, #8]	; (d7f88 <HAL_I2C_Peek_Data+0xc>)
   d7f80:	681b      	ldr	r3, [r3, #0]
   d7f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f84:	9301      	str	r3, [sp, #4]
   d7f86:	bd08      	pop	{r3, pc}
   d7f88:	00030228 	.word	0x00030228

000d7f8c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7f8c:	b508      	push	{r3, lr}
   d7f8e:	4b02      	ldr	r3, [pc, #8]	; (d7f98 <HAL_I2C_Flush_Data+0xc>)
   d7f90:	681b      	ldr	r3, [r3, #0]
   d7f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f94:	9301      	str	r3, [sp, #4]
   d7f96:	bd08      	pop	{r3, pc}
   d7f98:	00030228 	.word	0x00030228

000d7f9c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7f9c:	b508      	push	{r3, lr}
   d7f9e:	4b02      	ldr	r3, [pc, #8]	; (d7fa8 <HAL_I2C_Is_Enabled+0xc>)
   d7fa0:	681b      	ldr	r3, [r3, #0]
   d7fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7fa4:	9301      	str	r3, [sp, #4]
   d7fa6:	bd08      	pop	{r3, pc}
   d7fa8:	00030228 	.word	0x00030228

000d7fac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7fac:	b508      	push	{r3, lr}
   d7fae:	4b02      	ldr	r3, [pc, #8]	; (d7fb8 <HAL_I2C_Init+0xc>)
   d7fb0:	681b      	ldr	r3, [r3, #0]
   d7fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7fb4:	9301      	str	r3, [sp, #4]
   d7fb6:	bd08      	pop	{r3, pc}
   d7fb8:	00030228 	.word	0x00030228

000d7fbc <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7fbc:	b508      	push	{r3, lr}
   d7fbe:	4b02      	ldr	r3, [pc, #8]	; (d7fc8 <HAL_I2C_Acquire+0xc>)
   d7fc0:	681b      	ldr	r3, [r3, #0]
   d7fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7fc4:	9301      	str	r3, [sp, #4]
   d7fc6:	bd08      	pop	{r3, pc}
   d7fc8:	00030228 	.word	0x00030228

000d7fcc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7fcc:	b508      	push	{r3, lr}
   d7fce:	4b02      	ldr	r3, [pc, #8]	; (d7fd8 <HAL_I2C_Release+0xc>)
   d7fd0:	681b      	ldr	r3, [r3, #0]
   d7fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7fd4:	9301      	str	r3, [sp, #4]
   d7fd6:	bd08      	pop	{r3, pc}
   d7fd8:	00030228 	.word	0x00030228

000d7fdc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7fdc:	b508      	push	{r3, lr}
   d7fde:	4b02      	ldr	r3, [pc, #8]	; (d7fe8 <HAL_I2C_Request_Data_Ex+0xc>)
   d7fe0:	681b      	ldr	r3, [r3, #0]
   d7fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7fe4:	9301      	str	r3, [sp, #4]
   d7fe6:	bd08      	pop	{r3, pc}
   d7fe8:	00030228 	.word	0x00030228

000d7fec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7fec:	b508      	push	{r3, lr}
   d7fee:	4b02      	ldr	r3, [pc, #8]	; (d7ff8 <inet_inet_ntop+0xc>)
   d7ff0:	681b      	ldr	r3, [r3, #0]
   d7ff2:	695b      	ldr	r3, [r3, #20]
   d7ff4:	9301      	str	r3, [sp, #4]
   d7ff6:	bd08      	pop	{r3, pc}
   d7ff8:	00030264 	.word	0x00030264

000d7ffc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ffc:	b508      	push	{r3, lr}
   d7ffe:	4b02      	ldr	r3, [pc, #8]	; (d8008 <netdb_freeaddrinfo+0xc>)
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	689b      	ldr	r3, [r3, #8]
   d8004:	9301      	str	r3, [sp, #4]
   d8006:	bd08      	pop	{r3, pc}
   d8008:	00030268 	.word	0x00030268

000d800c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d800c:	b508      	push	{r3, lr}
   d800e:	4b02      	ldr	r3, [pc, #8]	; (d8018 <netdb_getaddrinfo+0xc>)
   d8010:	681b      	ldr	r3, [r3, #0]
   d8012:	68db      	ldr	r3, [r3, #12]
   d8014:	9301      	str	r3, [sp, #4]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	00030268 	.word	0x00030268

000d801c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d801c:	b508      	push	{r3, lr}
   d801e:	4b02      	ldr	r3, [pc, #8]	; (d8028 <HAL_SPI_Begin+0xc>)
   d8020:	681b      	ldr	r3, [r3, #0]
   d8022:	681b      	ldr	r3, [r3, #0]
   d8024:	9301      	str	r3, [sp, #4]
   d8026:	bd08      	pop	{r3, pc}
   d8028:	00030230 	.word	0x00030230

000d802c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <HAL_SPI_Send_Receive_Data+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	695b      	ldr	r3, [r3, #20]
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	00030230 	.word	0x00030230

000d803c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <HAL_SPI_Init+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	69db      	ldr	r3, [r3, #28]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	00030230 	.word	0x00030230

000d804c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <HAL_SPI_Is_Enabled+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	6a1b      	ldr	r3, [r3, #32]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	00030230 	.word	0x00030230

000d805c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <HAL_SPI_Info+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	00030230 	.word	0x00030230

000d806c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <HAL_SPI_Set_Settings+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	00030230 	.word	0x00030230

000d807c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <HAL_SPI_Acquire+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030230 	.word	0x00030230

000d808c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <HAL_SPI_Release+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030230 	.word	0x00030230

000d809c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <HAL_USART_Init+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	681b      	ldr	r3, [r3, #0]
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	0003023c 	.word	0x0003023c

000d80ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <HAL_USART_Write_Data+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	68db      	ldr	r3, [r3, #12]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	0003023c 	.word	0x0003023c

000d80bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <HAL_USART_Available_Data+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	691b      	ldr	r3, [r3, #16]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	0003023c 	.word	0x0003023c

000d80cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <HAL_USART_Read_Data+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	695b      	ldr	r3, [r3, #20]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	0003023c 	.word	0x0003023c

000d80dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <HAL_USART_Peek_Data+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	699b      	ldr	r3, [r3, #24]
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	0003023c 	.word	0x0003023c

000d80ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <HAL_USART_Flush_Data+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	69db      	ldr	r3, [r3, #28]
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	0003023c 	.word	0x0003023c

000d80fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <HAL_USART_Is_Enabled+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6a1b      	ldr	r3, [r3, #32]
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	0003023c 	.word	0x0003023c

000d810c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <HAL_USART_Available_Data_For_Write+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	0003023c 	.word	0x0003023c

000d811c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <HAL_USB_USART_Init+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	681b      	ldr	r3, [r3, #0]
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	0003024c 	.word	0x0003024c

000d812c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <HAL_USB_USART_Begin+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	685b      	ldr	r3, [r3, #4]
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	0003024c 	.word	0x0003024c

000d813c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <HAL_USB_USART_Available_Data+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	691b      	ldr	r3, [r3, #16]
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	0003024c 	.word	0x0003024c

000d814c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	695b      	ldr	r3, [r3, #20]
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	0003024c 	.word	0x0003024c

000d815c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <HAL_USB_USART_Receive_Data+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	699b      	ldr	r3, [r3, #24]
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	0003024c 	.word	0x0003024c

000d816c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <HAL_USB_USART_Send_Data+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	69db      	ldr	r3, [r3, #28]
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	0003024c 	.word	0x0003024c

000d817c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <HAL_USB_USART_Flush_Data+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	6a1b      	ldr	r3, [r3, #32]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	0003024c 	.word	0x0003024c

000d818c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <panic_+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030260 	.word	0x00030260

000d819c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <log_message_v+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030260 	.word	0x00030260

000d81ac <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b03      	ldr	r3, [pc, #12]	; (d81bc <diag_get_source+0x10>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d81b6:	9301      	str	r3, [sp, #4]
   d81b8:	bd08      	pop	{r3, pc}
   d81ba:	0000      	.short	0x0000
   d81bc:	00030260 	.word	0x00030260

000d81c0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b02      	ldr	r3, [pc, #8]	; (d81cc <system_mode+0xc>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	681b      	ldr	r3, [r3, #0]
   d81c8:	9301      	str	r3, [sp, #4]
   d81ca:	bd08      	pop	{r3, pc}
   d81cc:	00030220 	.word	0x00030220

000d81d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d81d0:	b508      	push	{r3, lr}
   d81d2:	4b02      	ldr	r3, [pc, #8]	; (d81dc <set_system_mode+0xc>)
   d81d4:	681b      	ldr	r3, [r3, #0]
   d81d6:	685b      	ldr	r3, [r3, #4]
   d81d8:	9301      	str	r3, [sp, #4]
   d81da:	bd08      	pop	{r3, pc}
   d81dc:	00030220 	.word	0x00030220

000d81e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d81e0:	b508      	push	{r3, lr}
   d81e2:	4b02      	ldr	r3, [pc, #8]	; (d81ec <system_delay_ms+0xc>)
   d81e4:	681b      	ldr	r3, [r3, #0]
   d81e6:	695b      	ldr	r3, [r3, #20]
   d81e8:	9301      	str	r3, [sp, #4]
   d81ea:	bd08      	pop	{r3, pc}
   d81ec:	00030220 	.word	0x00030220

000d81f0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d81f0:	b508      	push	{r3, lr}
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <system_sleep+0xc>)
   d81f4:	681b      	ldr	r3, [r3, #0]
   d81f6:	699b      	ldr	r3, [r3, #24]
   d81f8:	9301      	str	r3, [sp, #4]
   d81fa:	bd08      	pop	{r3, pc}
   d81fc:	00030220 	.word	0x00030220

000d8200 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <system_thread_set_state+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030220 	.word	0x00030220

000d8210 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <application_thread_current+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030220 	.word	0x00030220

000d8220 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <application_thread_invoke+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030220 	.word	0x00030220

000d8230 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <system_thread_get_state+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030220 	.word	0x00030220

000d8240 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <system_notify_time_changed+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030220 	.word	0x00030220

000d8250 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b03      	ldr	r3, [pc, #12]	; (d8260 <system_ctrl_set_app_request_handler+0x10>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d825a:	9301      	str	r3, [sp, #4]
   d825c:	bd08      	pop	{r3, pc}
   d825e:	0000      	.short	0x0000
   d8260:	00030220 	.word	0x00030220

000d8264 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b03      	ldr	r3, [pc, #12]	; (d8274 <system_ctrl_set_result+0x10>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d826e:	9301      	str	r3, [sp, #4]
   d8270:	bd08      	pop	{r3, pc}
   d8272:	0000      	.short	0x0000
   d8274:	00030220 	.word	0x00030220

000d8278 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8278:	b508      	push	{r3, lr}
   d827a:	4b03      	ldr	r3, [pc, #12]	; (d8288 <system_power_management_set_config+0x10>)
   d827c:	681b      	ldr	r3, [r3, #0]
   d827e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8282:	9301      	str	r3, [sp, #4]
   d8284:	bd08      	pop	{r3, pc}
   d8286:	0000      	.short	0x0000
   d8288:	00030220 	.word	0x00030220

000d828c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <spark_variable+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	681b      	ldr	r3, [r3, #0]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030244 	.word	0x00030244

000d829c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <spark_function+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	685b      	ldr	r3, [r3, #4]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030244 	.word	0x00030244

000d82ac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <spark_process+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	689b      	ldr	r3, [r3, #8]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030244 	.word	0x00030244

000d82bc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <spark_cloud_flag_connect+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	68db      	ldr	r3, [r3, #12]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030244 	.word	0x00030244

000d82cc <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <spark_cloud_flag_disconnect+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	691b      	ldr	r3, [r3, #16]
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030244 	.word	0x00030244

000d82dc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <spark_cloud_flag_connected+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	695b      	ldr	r3, [r3, #20]
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030244 	.word	0x00030244

000d82ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <spark_deviceID+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	69db      	ldr	r3, [r3, #28]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030244 	.word	0x00030244

000d82fc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <spark_send_event+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6a1b      	ldr	r3, [r3, #32]
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030244 	.word	0x00030244

000d830c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <spark_subscribe+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030244 	.word	0x00030244

000d831c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <spark_sync_time+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030244 	.word	0x00030244

000d832c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <spark_sync_time_pending+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030244 	.word	0x00030244

000d833c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <spark_sync_time_last+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	00030244 	.word	0x00030244

000d834c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	00030244 	.word	0x00030244

000d835c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <network_connect+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	685b      	ldr	r3, [r3, #4]
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	00030240 	.word	0x00030240

000d836c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <network_connecting+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	689b      	ldr	r3, [r3, #8]
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	00030240 	.word	0x00030240

000d837c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <network_disconnect+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	68db      	ldr	r3, [r3, #12]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	00030240 	.word	0x00030240

000d838c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <network_ready+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	691b      	ldr	r3, [r3, #16]
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	00030240 	.word	0x00030240

000d839c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <network_on+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	695b      	ldr	r3, [r3, #20]
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	00030240 	.word	0x00030240

000d83ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <network_off+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	699b      	ldr	r3, [r3, #24]
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	00030240 	.word	0x00030240

000d83bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <network_listen+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	69db      	ldr	r3, [r3, #28]
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	00030240 	.word	0x00030240

000d83cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <network_listening+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	6a1b      	ldr	r3, [r3, #32]
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	00030240 	.word	0x00030240

000d83dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <network_set_listen_timeout+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	00030240 	.word	0x00030240

000d83ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <network_get_listen_timeout+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	00030240 	.word	0x00030240

000d83fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d83fc:	b508      	push	{r3, lr}
   d83fe:	4b02      	ldr	r3, [pc, #8]	; (d8408 <malloc+0xc>)
   d8400:	681b      	ldr	r3, [r3, #0]
   d8402:	681b      	ldr	r3, [r3, #0]
   d8404:	9301      	str	r3, [sp, #4]
   d8406:	bd08      	pop	{r3, pc}
   d8408:	0003021c 	.word	0x0003021c

000d840c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d840c:	b508      	push	{r3, lr}
   d840e:	4b02      	ldr	r3, [pc, #8]	; (d8418 <free+0xc>)
   d8410:	681b      	ldr	r3, [r3, #0]
   d8412:	685b      	ldr	r3, [r3, #4]
   d8414:	9301      	str	r3, [sp, #4]
   d8416:	bd08      	pop	{r3, pc}
   d8418:	0003021c 	.word	0x0003021c

000d841c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d841c:	b508      	push	{r3, lr}
   d841e:	4b02      	ldr	r3, [pc, #8]	; (d8428 <realloc+0xc>)
   d8420:	681b      	ldr	r3, [r3, #0]
   d8422:	689b      	ldr	r3, [r3, #8]
   d8424:	9301      	str	r3, [sp, #4]
   d8426:	bd08      	pop	{r3, pc}
   d8428:	0003021c 	.word	0x0003021c

000d842c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d842c:	b508      	push	{r3, lr}
   d842e:	4b02      	ldr	r3, [pc, #8]	; (d8438 <siprintf+0xc>)
   d8430:	681b      	ldr	r3, [r3, #0]
   d8432:	691b      	ldr	r3, [r3, #16]
   d8434:	9301      	str	r3, [sp, #4]
   d8436:	bd08      	pop	{r3, pc}
   d8438:	0003021c 	.word	0x0003021c

000d843c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d843c:	b508      	push	{r3, lr}
   d843e:	4b02      	ldr	r3, [pc, #8]	; (d8448 <siscanf+0xc>)
   d8440:	681b      	ldr	r3, [r3, #0]
   d8442:	699b      	ldr	r3, [r3, #24]
   d8444:	9301      	str	r3, [sp, #4]
   d8446:	bd08      	pop	{r3, pc}
   d8448:	0003021c 	.word	0x0003021c

000d844c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d844c:	b508      	push	{r3, lr}
   d844e:	4b02      	ldr	r3, [pc, #8]	; (d8458 <snprintf+0xc>)
   d8450:	681b      	ldr	r3, [r3, #0]
   d8452:	69db      	ldr	r3, [r3, #28]
   d8454:	9301      	str	r3, [sp, #4]
   d8456:	bd08      	pop	{r3, pc}
   d8458:	0003021c 	.word	0x0003021c

000d845c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d845c:	b508      	push	{r3, lr}
   d845e:	4b02      	ldr	r3, [pc, #8]	; (d8468 <sniprintf+0xc>)
   d8460:	681b      	ldr	r3, [r3, #0]
   d8462:	6a1b      	ldr	r3, [r3, #32]
   d8464:	9301      	str	r3, [sp, #4]
   d8466:	bd08      	pop	{r3, pc}
   d8468:	0003021c 	.word	0x0003021c

000d846c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d846c:	b508      	push	{r3, lr}
   d846e:	4b02      	ldr	r3, [pc, #8]	; (d8478 <vsnprintf+0xc>)
   d8470:	681b      	ldr	r3, [r3, #0]
   d8472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8474:	9301      	str	r3, [sp, #4]
   d8476:	bd08      	pop	{r3, pc}
   d8478:	0003021c 	.word	0x0003021c

000d847c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d847c:	b508      	push	{r3, lr}
   d847e:	4b02      	ldr	r3, [pc, #8]	; (d8488 <abort+0xc>)
   d8480:	681b      	ldr	r3, [r3, #0]
   d8482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8484:	9301      	str	r3, [sp, #4]
   d8486:	bd08      	pop	{r3, pc}
   d8488:	0003021c 	.word	0x0003021c

000d848c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d848c:	b508      	push	{r3, lr}
   d848e:	4b02      	ldr	r3, [pc, #8]	; (d8498 <_malloc_r+0xc>)
   d8490:	681b      	ldr	r3, [r3, #0]
   d8492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8494:	9301      	str	r3, [sp, #4]
   d8496:	bd08      	pop	{r3, pc}
   d8498:	0003021c 	.word	0x0003021c

000d849c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d849c:	2100      	movs	r1, #0
   d849e:	f7ff be9f 	b.w	d81e0 <system_delay_ms>

000d84a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d84a2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d84a4:	6883      	ldr	r3, [r0, #8]
   d84a6:	4604      	mov	r4, r0
   d84a8:	b90b      	cbnz	r3, d84ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d84aa:	f001 ffb8 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d84ae:	68c3      	ldr	r3, [r0, #12]
   d84b0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d84b2:	68a3      	ldr	r3, [r4, #8]
   d84b4:	b11b      	cbz	r3, d84be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84b6:	2203      	movs	r2, #3
   d84b8:	4621      	mov	r1, r4
   d84ba:	4620      	mov	r0, r4
   d84bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d84be:	4620      	mov	r0, r4
   d84c0:	2110      	movs	r1, #16
}
   d84c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d84c6:	f001 bf8e 	b.w	da3e6 <_ZdlPvj>

000d84ca <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d84ca:	b510      	push	{r4, lr}
   d84cc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d84ce:	6800      	ldr	r0, [r0, #0]
   d84d0:	b108      	cbz	r0, d84d6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d84d2:	f7ff fc63 	bl	d7d9c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d84d6:	4620      	mov	r0, r4
   d84d8:	bd10      	pop	{r4, pc}

000d84da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84da:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84dc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84de:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84e0:	689b      	ldr	r3, [r3, #8]
   d84e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d84e4:	68a3      	ldr	r3, [r4, #8]
   d84e6:	3b01      	subs	r3, #1
   d84e8:	60a3      	str	r3, [r4, #8]
   d84ea:	b92b      	cbnz	r3, d84f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d84ec:	6823      	ldr	r3, [r4, #0]
   d84ee:	4620      	mov	r0, r4
   d84f0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d84f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d84f6:	4718      	bx	r3
   d84f8:	bd10      	pop	{r4, pc}

000d84fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d84fa:	680b      	ldr	r3, [r1, #0]
   d84fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d84fe:	b113      	cbz	r3, d8506 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d8500:	685a      	ldr	r2, [r3, #4]
   d8502:	3201      	adds	r2, #1
   d8504:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d8506:	4770      	bx	lr

000d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d8508:	b510      	push	{r4, lr}
   d850a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d850c:	6800      	ldr	r0, [r0, #0]
   d850e:	b128      	cbz	r0, d851c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8510:	6843      	ldr	r3, [r0, #4]
   d8512:	3b01      	subs	r3, #1
   d8514:	6043      	str	r3, [r0, #4]
   d8516:	b90b      	cbnz	r3, d851c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8518:	f7ff ffdf 	bl	d84da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d851c:	4620      	mov	r0, r4
   d851e:	bd10      	pop	{r4, pc}

000d8520 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8520:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8522:	4c06      	ldr	r4, [pc, #24]	; (d853c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8524:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8526:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8528:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d852a:	f7ff fc2f 	bl	d7d8c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d852e:	4620      	mov	r0, r4
   d8530:	4a03      	ldr	r2, [pc, #12]	; (d8540 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8532:	4904      	ldr	r1, [pc, #16]	; (d8544 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8538:	f001 bf50 	b.w	da3dc <__aeabi_atexit>
   d853c:	2003e240 	.word	0x2003e240
   d8540:	2003de88 	.word	0x2003de88
   d8544:	000d84cb 	.word	0x000d84cb

000d8548 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8548:	2200      	movs	r2, #0
   d854a:	4611      	mov	r1, r2
   d854c:	6840      	ldr	r0, [r0, #4]
   d854e:	f7ff bf1d 	b.w	d838c <network_ready>

000d8552 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8552:	2200      	movs	r2, #0
   d8554:	4611      	mov	r1, r2
   d8556:	6840      	ldr	r0, [r0, #4]
   d8558:	f7ff bf38 	b.w	d83cc <network_listening>

000d855c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d855c:	2200      	movs	r2, #0
   d855e:	4611      	mov	r1, r2
   d8560:	6840      	ldr	r0, [r0, #4]
   d8562:	f7ff bf43 	b.w	d83ec <network_get_listen_timeout>

000d8566 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8566:	2200      	movs	r2, #0
   d8568:	6840      	ldr	r0, [r0, #4]
   d856a:	f7ff bf37 	b.w	d83dc <network_set_listen_timeout>

000d856e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d856e:	2200      	movs	r2, #0
   d8570:	f081 0101 	eor.w	r1, r1, #1
   d8574:	6840      	ldr	r0, [r0, #4]
   d8576:	f7ff bf21 	b.w	d83bc <network_listen>

000d857a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d857a:	2300      	movs	r3, #0
   d857c:	461a      	mov	r2, r3
   d857e:	4619      	mov	r1, r3
   d8580:	6840      	ldr	r0, [r0, #4]
   d8582:	f7ff bf13 	b.w	d83ac <network_off>

000d8586 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8586:	2300      	movs	r3, #0
   d8588:	461a      	mov	r2, r3
   d858a:	4619      	mov	r1, r3
   d858c:	6840      	ldr	r0, [r0, #4]
   d858e:	f7ff bf05 	b.w	d839c <network_on>

000d8592 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8592:	2200      	movs	r2, #0
   d8594:	4611      	mov	r1, r2
   d8596:	6840      	ldr	r0, [r0, #4]
   d8598:	f7ff bee8 	b.w	d836c <network_connecting>

000d859c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d859c:	2200      	movs	r2, #0
   d859e:	2102      	movs	r1, #2
   d85a0:	6840      	ldr	r0, [r0, #4]
   d85a2:	f7ff beeb 	b.w	d837c <network_disconnect>

000d85a6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d85a6:	2300      	movs	r3, #0
   d85a8:	461a      	mov	r2, r3
   d85aa:	6840      	ldr	r0, [r0, #4]
   d85ac:	f7ff bed6 	b.w	d835c <network_connect>

000d85b0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d85b0:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d85b2:	4b1b      	ldr	r3, [pc, #108]	; (d8620 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d85b4:	6003      	str	r3, [r0, #0]
   d85b6:	2500      	movs	r5, #0
   d85b8:	460f      	mov	r7, r1
   d85ba:	3328      	adds	r3, #40	; 0x28
   d85bc:	2618      	movs	r6, #24
   d85be:	b089      	sub	sp, #36	; 0x24
   d85c0:	6043      	str	r3, [r0, #4]
   d85c2:	6085      	str	r5, [r0, #8]
   d85c4:	60c5      	str	r5, [r0, #12]
   d85c6:	4632      	mov	r2, r6
   d85c8:	4629      	mov	r1, r5
   d85ca:	4604      	mov	r4, r0
   d85cc:	3010      	adds	r0, #16
   d85ce:	f002 ff8b 	bl	db4e8 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d85d2:	462a      	mov	r2, r5
   d85d4:	4629      	mov	r1, r5
   d85d6:	6878      	ldr	r0, [r7, #4]
   d85d8:	f7ff fed8 	bl	d838c <network_ready>
   d85dc:	b908      	cbnz	r0, d85e2 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d85de:	60a0      	str	r0, [r4, #8]
            return sig;
   d85e0:	e01b      	b.n	d861a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d85e2:	4629      	mov	r1, r5
   d85e4:	4632      	mov	r2, r6
   d85e6:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d85e8:	9500      	str	r5, [sp, #0]
   d85ea:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d85ec:	f002 ff7c 	bl	db4e8 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d85f0:	a902      	add	r1, sp, #8
   d85f2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d85f4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d85f8:	f7ff fb70 	bl	d7cdc <cellular_signal>
   d85fc:	b110      	cbz	r0, d8604 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d85fe:	2301      	movs	r3, #1
   d8600:	60a3      	str	r3, [r4, #8]
            return sig;
   d8602:	e00a      	b.n	d861a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d8604:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8606:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d8608:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d860a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d860c:	b90b      	cbnz	r3, d8612 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d860e:	2302      	movs	r3, #2
   d8610:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d8612:	a902      	add	r1, sp, #8
   d8614:	4620      	mov	r0, r4
   d8616:	f000 f889 	bl	d872c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d861a:	4620      	mov	r0, r4
   d861c:	b009      	add	sp, #36	; 0x24
   d861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8620:	000dd934 	.word	0x000dd934

000d8624 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8624:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8626:	4c08      	ldr	r4, [pc, #32]	; (d8648 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8628:	2528      	movs	r5, #40	; 0x28
   d862a:	462a      	mov	r2, r5
   d862c:	2100      	movs	r1, #0
   d862e:	4620      	mov	r0, r4
   d8630:	f002 ff5a 	bl	db4e8 <memset>
        cid = -1;
   d8634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8638:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d863a:	4b04      	ldr	r3, [pc, #16]	; (d864c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d863c:	8025      	strh	r5, [r4, #0]
   d863e:	2204      	movs	r2, #4
   d8640:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8642:	4a03      	ldr	r2, [pc, #12]	; (d8650 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8644:	601a      	str	r2, [r3, #0]
   d8646:	bd38      	pop	{r3, r4, r5, pc}
   d8648:	2003e24c 	.word	0x2003e24c
   d864c:	2003e244 	.word	0x2003e244
   d8650:	000dd900 	.word	0x000dd900

000d8654 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8654:	4770      	bx	lr

000d8656 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8656:	7d00      	ldrb	r0, [r0, #20]
   d8658:	4770      	bx	lr
	...

000d865c <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d865c:	7d03      	ldrb	r3, [r0, #20]
   d865e:	b11b      	cbz	r3, d8668 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d8660:	6983      	ldr	r3, [r0, #24]
   d8662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8666:	d102      	bne.n	d866e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d8668:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8680 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d866c:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d866e:	ee07 3a90 	vmov	s15, r3
   d8672:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8684 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d8676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d867a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d867e:	4770      	bx	lr
   d8680:	00000000 	.word	0x00000000
   d8684:	42c80000 	.word	0x42c80000

000d8688 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8688:	7d03      	ldrb	r3, [r0, #20]
   d868a:	b11b      	cbz	r3, d8694 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d868c:	6a03      	ldr	r3, [r0, #32]
   d868e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8692:	d102      	bne.n	d869a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8694:	ed9f 0a05 	vldr	s0, [pc, #20]	; d86ac <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8698:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d869a:	ee07 3a90 	vmov	s15, r3
   d869e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d86b0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d86a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d86a6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d86aa:	4770      	bx	lr
   d86ac:	00000000 	.word	0x00000000
   d86b0:	42c80000 	.word	0x42c80000

000d86b4 <_ZN14CellularSignalD0Ev>:
   d86b4:	b510      	push	{r4, lr}
   d86b6:	2128      	movs	r1, #40	; 0x28
   d86b8:	4604      	mov	r4, r0
   d86ba:	f001 fe94 	bl	da3e6 <_ZdlPvj>
   d86be:	4620      	mov	r0, r4
   d86c0:	bd10      	pop	{r4, pc}
	...

000d86c4 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d86c4:	7d03      	ldrb	r3, [r0, #20]
   d86c6:	b17b      	cbz	r3, d86e8 <_ZNK14CellularSignal10getQualityEv+0x24>
   d86c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d86ca:	2b00      	cmp	r3, #0
   d86cc:	db0c      	blt.n	d86e8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d86ce:	ee07 3a90 	vmov	s15, r3
   d86d2:	eddf 6a07 	vldr	s13, [pc, #28]	; d86f0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d86d6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d86f4 <_ZNK14CellularSignal10getQualityEv+0x30>
   d86da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d86de:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d86e2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d86e6:	4770      	bx	lr
    }

    return -1.0f;
   d86e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d86ec:	4770      	bx	lr
   d86ee:	bf00      	nop
   d86f0:	477fff00 	.word	0x477fff00
   d86f4:	42c80000 	.word	0x42c80000

000d86f8 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d86f8:	7d03      	ldrb	r3, [r0, #20]
   d86fa:	b17b      	cbz	r3, d871c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d86fc:	69c3      	ldr	r3, [r0, #28]
   d86fe:	2b00      	cmp	r3, #0
   d8700:	db0c      	blt.n	d871c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8702:	ee07 3a90 	vmov	s15, r3
   d8706:	eddf 6a07 	vldr	s13, [pc, #28]	; d8724 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d870a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8728 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d870e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d8712:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8716:	ee27 0a80 	vmul.f32	s0, s15, s0
   d871a:	4770      	bx	lr
    }

    return -1.0f;
   d871c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8720:	4770      	bx	lr
   d8722:	bf00      	nop
   d8724:	477fff00 	.word	0x477fff00
   d8728:	42c80000 	.word	0x42c80000

000d872c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d872c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d872e:	460d      	mov	r5, r1
   d8730:	f100 0410 	add.w	r4, r0, #16
   d8734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8738:	e895 0003 	ldmia.w	r5, {r0, r1}
   d873c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d8740:	2001      	movs	r0, #1
   d8742:	bd30      	pop	{r4, r5, pc}

000d8744 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8748:	4607      	mov	r7, r0
   d874a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d874c:	4615      	mov	r5, r2
   d874e:	b92a      	cbnz	r2, d875c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d8750:	6803      	ldr	r3, [r0, #0]
   d8752:	b2c9      	uxtb	r1, r1
   d8754:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d8756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d875a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d875c:	2900      	cmp	r1, #0
   d875e:	da07      	bge.n	d8770 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d8760:	2a0a      	cmp	r2, #10
   d8762:	d105      	bne.n	d8770 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d8764:	212d      	movs	r1, #45	; 0x2d
   d8766:	f000 fea2 	bl	d94ae <_ZN5Print5printEc>
            val = -n;
   d876a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d876c:	4606      	mov	r6, r0
            val = -n;
   d876e:	e001      	b.n	d8774 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d8770:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8772:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8774:	b2ea      	uxtb	r2, r5
   d8776:	4638      	mov	r0, r7
   d8778:	f000 feb2 	bl	d94e0 <_ZN5Print11printNumberEmh>
    }
}
   d877c:	4430      	add	r0, r6
   d877e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8782 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d8782:	b570      	push	{r4, r5, r6, lr}
   d8784:	460d      	mov	r5, r1
   d8786:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8788:	220a      	movs	r2, #10
   d878a:	6881      	ldr	r1, [r0, #8]
   d878c:	4628      	mov	r0, r5
   d878e:	f7ff ffd9 	bl	d8744 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d8792:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8794:	4604      	mov	r4, r0
    n += p.print(',');
   d8796:	4628      	mov	r0, r5
   d8798:	f000 fe89 	bl	d94ae <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d879c:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d879e:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d87a0:	68f1      	ldr	r1, [r6, #12]
   d87a2:	4628      	mov	r0, r5
   d87a4:	f7ff ffce 	bl	d8744 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d87a8:	4420      	add	r0, r4
   d87aa:	bd70      	pop	{r4, r5, r6, pc}

000d87ac <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d87ac:	f1a0 0004 	sub.w	r0, r0, #4
   d87b0:	f7ff bfe7 	b.w	d8782 <_ZNK14CellularSignal7printToER5Print>

000d87b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d87b4:	4770      	bx	lr

000d87b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d87b6:	2000      	movs	r0, #0
   d87b8:	4770      	bx	lr

000d87ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d87ba:	b510      	push	{r4, lr}
   d87bc:	2110      	movs	r1, #16
   d87be:	4604      	mov	r4, r0
   d87c0:	f001 fe11 	bl	da3e6 <_ZdlPvj>
   d87c4:	4620      	mov	r0, r4
   d87c6:	bd10      	pop	{r4, pc}

000d87c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d87c8:	b508      	push	{r3, lr}
      { delete this; }
   d87ca:	b108      	cbz	r0, d87d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d87cc:	f7ff fff5 	bl	d87ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d87d0:	bd08      	pop	{r3, pc}

000d87d2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d87d2:	2200      	movs	r2, #0
   d87d4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d87d6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d87d8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d87dc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d87de:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d87e2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d87e4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d87e6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d87e8:	680c      	ldr	r4, [r1, #0]
   d87ea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d87ec:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d87ee:	bd10      	pop	{r4, pc}

000d87f0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d87f0:	b510      	push	{r4, lr}
   d87f2:	4604      	mov	r4, r0
    free((void*)msg_);
   d87f4:	6800      	ldr	r0, [r0, #0]
   d87f6:	f7ff fe09 	bl	d840c <free>
}
   d87fa:	4620      	mov	r0, r4
   d87fc:	bd10      	pop	{r4, pc}

000d87fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d87fe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8800:	68c4      	ldr	r4, [r0, #12]
   d8802:	b1f4      	cbz	r4, d8842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8804:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8806:	2b02      	cmp	r3, #2
   d8808:	d103      	bne.n	d8812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d880a:	f104 000c 	add.w	r0, r4, #12
   d880e:	f7ff ffef 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d8812:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d8814:	b135      	cbz	r5, d8824 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8816:	4628      	mov	r0, r5
   d8818:	f7fd f8ac 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
   d881c:	2110      	movs	r1, #16
   d881e:	4628      	mov	r0, r5
   d8820:	f001 fde1 	bl	da3e6 <_ZdlPvj>
   d8824:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8826:	b135      	cbz	r5, d8836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8828:	4628      	mov	r0, r5
   d882a:	f7fd f8a3 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
   d882e:	2110      	movs	r1, #16
   d8830:	4628      	mov	r0, r5
   d8832:	f001 fdd8 	bl	da3e6 <_ZdlPvj>
   d8836:	4620      	mov	r0, r4
   d8838:	2114      	movs	r1, #20
   d883a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d883e:	f001 bdd2 	b.w	da3e6 <_ZdlPvj>
   d8842:	bd38      	pop	{r3, r4, r5, pc}

000d8844 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8844:	b510      	push	{r4, lr}
   d8846:	b088      	sub	sp, #32
   d8848:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d884a:	4668      	mov	r0, sp
   d884c:	f001 f87a 	bl	d9944 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d8850:	4669      	mov	r1, sp
   d8852:	a804      	add	r0, sp, #16
   d8854:	f001 f898 	bl	d9988 <_ZN6StringC1ERKS_>
   d8858:	a804      	add	r0, sp, #16
   d885a:	47a0      	blx	r4
   d885c:	4604      	mov	r4, r0
   d885e:	a804      	add	r0, sp, #16
   d8860:	f001 f829 	bl	d98b6 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8864:	4668      	mov	r0, sp
   d8866:	f001 f826 	bl	d98b6 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d886a:	4620      	mov	r0, r4
   d886c:	b008      	add	sp, #32
   d886e:	bd10      	pop	{r4, pc}

000d8870 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8870:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8872:	2410      	movs	r4, #16
   d8874:	b085      	sub	sp, #20
   d8876:	4607      	mov	r7, r0
   d8878:	460e      	mov	r6, r1
   d887a:	4615      	mov	r5, r2
   d887c:	2100      	movs	r1, #0
   d887e:	4622      	mov	r2, r4
   d8880:	4668      	mov	r0, sp
   d8882:	f002 fe31 	bl	db4e8 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8886:	2200      	movs	r2, #0
   d8888:	4669      	mov	r1, sp
   d888a:	4610      	mov	r0, r2
         size = sizeof(*this);
   d888c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d8890:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d8892:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d8894:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8896:	f7ff fd01 	bl	d829c <spark_function>
}
   d889a:	b005      	add	sp, #20
   d889c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d889e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d889e:	b513      	push	{r0, r1, r4, lr}
   d88a0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d88a2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d88a6:	2300      	movs	r3, #0
   d88a8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d88aa:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d88ac:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d88ae:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88b0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d88b2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d88b4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88b6:	f7ff fe27 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88ba:	4620      	mov	r0, r4
   d88bc:	b002      	add	sp, #8
   d88be:	bd10      	pop	{r4, pc}

000d88c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d88c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d88c2:	460c      	mov	r4, r1
   d88c4:	ad02      	add	r5, sp, #8
   d88c6:	f854 3b04 	ldr.w	r3, [r4], #4
   d88ca:	f845 3d08 	str.w	r3, [r5, #-8]!
   d88ce:	4606      	mov	r6, r0
   d88d0:	460f      	mov	r7, r1
   d88d2:	a801      	add	r0, sp, #4
   d88d4:	4621      	mov	r1, r4
   d88d6:	f7ff fe10 	bl	d84fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d88da:	4629      	mov	r1, r5
   d88dc:	4630      	mov	r0, r6
   d88de:	f7ff ffde 	bl	d889e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88e2:	a801      	add	r0, sp, #4
   d88e4:	f7ff fe10 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88e8:	4620      	mov	r0, r4
   d88ea:	f7ff fe0d 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d88ee:	4638      	mov	r0, r7
   d88f0:	2108      	movs	r1, #8
   d88f2:	f001 fd78 	bl	da3e6 <_ZdlPvj>
        return p;
    }
   d88f6:	4630      	mov	r0, r6
   d88f8:	b003      	add	sp, #12
   d88fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d88fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d88fc:	b538      	push	{r3, r4, r5, lr}
   d88fe:	2300      	movs	r3, #0
   d8900:	4604      	mov	r4, r0
   d8902:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8904:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8906:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8908:	f7fb fbc7 	bl	d409a <_Znwj>
   d890c:	b128      	cbz	r0, d891a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d890e:	2301      	movs	r3, #1
   d8910:	6043      	str	r3, [r0, #4]
   d8912:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8914:	4b02      	ldr	r3, [pc, #8]	; (d8920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8916:	6003      	str	r3, [r0, #0]
   d8918:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d891a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d891c:	4620      	mov	r0, r4
   d891e:	bd38      	pop	{r3, r4, r5, pc}
   d8920:	000dd968 	.word	0x000dd968

000d8924 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8924:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8926:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8928:	b90a      	cbnz	r2, d892e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d892a:	f001 fd78 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d892e:	68c3      	ldr	r3, [r0, #12]
    }
   d8930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8934:	4718      	bx	r3

000d8936 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8936:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8938:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d893a:	f100 0110 	add.w	r1, r0, #16
   d893e:	f7ff fff1 	bl	d8924 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8942:	bd08      	pop	{r3, pc}

000d8944 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8944:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8946:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8948:	b90a      	cbnz	r2, d894e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d894a:	f001 fd68 	bl	da41e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d894e:	68c3      	ldr	r3, [r0, #12]
    }
   d8950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8954:	4718      	bx	r3

000d8956 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8956:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8958:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d895a:	f100 0110 	add.w	r1, r0, #16
   d895e:	f7ff fff1 	bl	d8944 <_ZNKSt8functionIFvRKbEEclES1_>
   d8962:	bd08      	pop	{r3, pc}

000d8964 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8964:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8966:	2300      	movs	r3, #0
   d8968:	6083      	str	r3, [r0, #8]
   d896a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d896c:	4604      	mov	r4, r0
   d896e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8970:	b12b      	cbz	r3, d897e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8972:	2202      	movs	r2, #2
   d8974:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8976:	68eb      	ldr	r3, [r5, #12]
   d8978:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d897a:	68ab      	ldr	r3, [r5, #8]
   d897c:	60a3      	str	r3, [r4, #8]
	}
    }
   d897e:	4620      	mov	r0, r4
   d8980:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d8984:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8986:	b089      	sub	sp, #36	; 0x24
   d8988:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d898a:	4668      	mov	r0, sp
   d898c:	f7ff ff21 	bl	d87d2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8990:	2300      	movs	r3, #0
   d8992:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8996:	f04f 0202 	mov.w	r2, #2
   d899a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d899e:	2b00      	cmp	r3, #0
   d89a0:	d103      	bne.n	d89aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d89a2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d89a6:	2900      	cmp	r1, #0
   d89a8:	d1f7      	bne.n	d899a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d89aa:	d002      	beq.n	d89b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d89ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d89b0:	e063      	b.n	d8a7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d89b2:	f114 050c 	adds.w	r5, r4, #12
   d89b6:	d003      	beq.n	d89c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d89b8:	4669      	mov	r1, sp
   d89ba:	4628      	mov	r0, r5
   d89bc:	f7ff ff09 	bl	d87d2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d89c0:	f3bf 8f5f 	dmb	sy
   d89c4:	2301      	movs	r3, #1
   d89c6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d89c8:	2000      	movs	r0, #0
   d89ca:	f104 0308 	add.w	r3, r4, #8
   d89ce:	f3bf 8f5f 	dmb	sy
   d89d2:	e853 6f00 	ldrex	r6, [r3]
   d89d6:	e843 0200 	strex	r2, r0, [r3]
   d89da:	2a00      	cmp	r2, #0
   d89dc:	d1f9      	bne.n	d89d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d89de:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d89e2:	2e00      	cmp	r6, #0
   d89e4:	d049      	beq.n	d8a7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d89e6:	f7ff fc13 	bl	d8210 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d89ea:	b120      	cbz	r0, d89f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d89ec:	4629      	mov	r1, r5
   d89ee:	4630      	mov	r0, r6
   d89f0:	f7ff ff98 	bl	d8924 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d89f4:	e03a      	b.n	d8a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d89f6:	4631      	mov	r1, r6
   d89f8:	a802      	add	r0, sp, #8
   d89fa:	f7ff ffb3 	bl	d8964 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d89fe:	68e0      	ldr	r0, [r4, #12]
   d8a00:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8a04:	b108      	cbz	r0, d8a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d8a06:	f002 ffff 	bl	dba08 <strdup>
   d8a0a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8a0c:	2010      	movs	r0, #16
   d8a0e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8a12:	f7fb fb42 	bl	d409a <_Znwj>
   d8a16:	4605      	mov	r5, r0
   d8a18:	b1e8      	cbz	r0, d8a56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8a1a:	2700      	movs	r7, #0
   d8a1c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a1e:	2018      	movs	r0, #24
   d8a20:	f7fb fb3b 	bl	d409a <_Znwj>
   d8a24:	4604      	mov	r4, r0
   d8a26:	b188      	cbz	r0, d8a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8a28:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8a2a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8a2c:	a802      	add	r0, sp, #8
   d8a2e:	f7fd fce7 	bl	d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a32:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8a34:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a36:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a38:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8a3a:	9204      	str	r2, [sp, #16]
   d8a3c:	a906      	add	r1, sp, #24
   d8a3e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a40:	60e3      	str	r3, [r4, #12]
   d8a42:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8a46:	9205      	str	r2, [sp, #20]
   d8a48:	f7ff fec3 	bl	d87d2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8a4c:	4b0d      	ldr	r3, [pc, #52]	; (d8a84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d8a4e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8a50:	4b0d      	ldr	r3, [pc, #52]	; (d8a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a52:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8a54:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d8a56:	a806      	add	r0, sp, #24
   d8a58:	f7ff feca 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8a5c:	a802      	add	r0, sp, #8
   d8a5e:	f7fc ff89 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8a62:	2200      	movs	r2, #0
   d8a64:	4629      	mov	r1, r5
   d8a66:	4809      	ldr	r0, [pc, #36]	; (d8a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8a68:	f7ff fbda 	bl	d8220 <application_thread_invoke>
   d8a6c:	4630      	mov	r0, r6
   d8a6e:	f7fc ff81 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8a72:	2110      	movs	r1, #16
   d8a74:	4630      	mov	r0, r6
   d8a76:	f001 fcb6 	bl	da3e6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d8a7a:	4668      	mov	r0, sp
   d8a7c:	f7ff feb8 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
    }
   d8a80:	b009      	add	sp, #36	; 0x24
   d8a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a84:	000d8937 	.word	0x000d8937
   d8a88:	000d8bad 	.word	0x000d8bad
   d8a8c:	000d84a3 	.word	0x000d84a3

000d8a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a94:	b08b      	sub	sp, #44	; 0x2c
   d8a96:	4606      	mov	r6, r0
   d8a98:	460f      	mov	r7, r1
   d8a9a:	4690      	mov	r8, r2
   d8a9c:	4699      	mov	r9, r3
   d8a9e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8aa2:	f7ff fc1b 	bl	d82dc <spark_cloud_flag_connected>
   d8aa6:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d8aa8:	4683      	mov	fp, r0
   d8aaa:	bb30      	cbnz	r0, d8afa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8aac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8ab0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8ab2:	a905      	add	r1, sp, #20
   d8ab4:	4628      	mov	r0, r5
   d8ab6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8aba:	f7ff fe8a 	bl	d87d2 <_ZN8particle5ErrorC1EOS0_>
   d8abe:	2014      	movs	r0, #20
   d8ac0:	f7fb faeb 	bl	d409a <_Znwj>
   d8ac4:	4604      	mov	r4, r0
   d8ac6:	b158      	cbz	r0, d8ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8ac8:	2302      	movs	r3, #2
   d8aca:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8acc:	2301      	movs	r3, #1
   d8ace:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8ad0:	f8c0 b004 	str.w	fp, [r0, #4]
   d8ad4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8ad8:	4629      	mov	r1, r5
   d8ada:	300c      	adds	r0, #12
   d8adc:	f7ff fe79 	bl	d87d2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d8ae0:	4630      	mov	r0, r6
   d8ae2:	4621      	mov	r1, r4
   d8ae4:	f840 4b04 	str.w	r4, [r0], #4
   d8ae8:	f7ff ff08 	bl	d88fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8aec:	4628      	mov	r0, r5
   d8aee:	f7ff fe7f 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8af2:	a805      	add	r0, sp, #20
   d8af4:	f7ff fe7c 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
   d8af8:	e052      	b.n	d8ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8afa:	2400      	movs	r4, #0
   d8afc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8afe:	2014      	movs	r0, #20
   d8b00:	606c      	str	r4, [r5, #4]
   d8b02:	60ac      	str	r4, [r5, #8]
   d8b04:	9307      	str	r3, [sp, #28]
   d8b06:	f7fb fac8 	bl	d409a <_Znwj>
   d8b0a:	4601      	mov	r1, r0
   d8b0c:	b118      	cbz	r0, d8b16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d8b0e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8b10:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8b12:	6044      	str	r4, [r0, #4]
   d8b14:	6084      	str	r4, [r0, #8]
   d8b16:	a804      	add	r0, sp, #16
   d8b18:	9103      	str	r1, [sp, #12]
   d8b1a:	f7ff feef 	bl	d88fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d8b1e:	4b22      	ldr	r3, [pc, #136]	; (d8ba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d8b20:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8b22:	2008      	movs	r0, #8
   d8b24:	f7fb fab9 	bl	d409a <_Znwj>
   d8b28:	4604      	mov	r4, r0
   d8b2a:	b128      	cbz	r0, d8b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b2c:	9b03      	ldr	r3, [sp, #12]
   d8b2e:	f840 3b04 	str.w	r3, [r0], #4
   d8b32:	a904      	add	r1, sp, #16
   d8b34:	f7ff fce1 	bl	d84fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b38:	9500      	str	r5, [sp, #0]
   d8b3a:	fa5f f38a 	uxtb.w	r3, sl
   d8b3e:	464a      	mov	r2, r9
   d8b40:	4641      	mov	r1, r8
   d8b42:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d8b44:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b46:	f7ff fbd9 	bl	d82fc <spark_send_event>
   d8b4a:	b920      	cbnz	r0, d8b56 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8b4c:	9b03      	ldr	r3, [sp, #12]
   d8b4e:	785b      	ldrb	r3, [r3, #1]
   d8b50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8b54:	b183      	cbz	r3, d8b78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d8b56:	9b03      	ldr	r3, [sp, #12]
   d8b58:	9305      	str	r3, [sp, #20]
   d8b5a:	a904      	add	r1, sp, #16
   d8b5c:	a806      	add	r0, sp, #24
   d8b5e:	f7ff fccc 	bl	d84fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d8b62:	a905      	add	r1, sp, #20
   d8b64:	4630      	mov	r0, r6
   d8b66:	f7ff fe9a 	bl	d889e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8b6a:	a806      	add	r0, sp, #24
   d8b6c:	f7ff fccc 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b70:	a804      	add	r0, sp, #16
   d8b72:	f7ff fcc9 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b76:	e013      	b.n	d8ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d8b78:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8b7c:	a905      	add	r1, sp, #20
   d8b7e:	a803      	add	r0, sp, #12
   d8b80:	9205      	str	r2, [sp, #20]
   d8b82:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b86:	f7ff fefd 	bl	d8984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b8a:	a805      	add	r0, sp, #20
   d8b8c:	f7ff fe30 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8b90:	a805      	add	r0, sp, #20
   d8b92:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8b94:	f7ff fe94 	bl	d88c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8b98:	a806      	add	r0, sp, #24
   d8b9a:	f7ff fcb5 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b9e:	e7da      	b.n	d8b56 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d8ba0:	4630      	mov	r0, r6
   d8ba2:	b00b      	add	sp, #44	; 0x2c
   d8ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ba8:	000d8d1d 	.word	0x000d8d1d

000d8bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8bac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bb0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8bb2:	d006      	beq.n	d8bc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d8bb4:	2a03      	cmp	r2, #3
   d8bb6:	d017      	beq.n	d8be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8bb8:	2a01      	cmp	r2, #1
   d8bba:	d122      	bne.n	d8c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8bbc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8bbe:	6003      	str	r3, [r0, #0]
	      break;
   d8bc0:	e01f      	b.n	d8c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8bc2:	2018      	movs	r0, #24
   d8bc4:	680e      	ldr	r6, [r1, #0]
   d8bc6:	f7fb fa68 	bl	d409a <_Znwj>
   d8bca:	4605      	mov	r5, r0
   d8bcc:	b150      	cbz	r0, d8be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8bce:	4631      	mov	r1, r6
   d8bd0:	f7ff fec8 	bl	d8964 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8bd4:	6930      	ldr	r0, [r6, #16]
   d8bd6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8bda:	b108      	cbz	r0, d8be0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8bdc:	f002 ff14 	bl	dba08 <strdup>
   d8be0:	6128      	str	r0, [r5, #16]
   d8be2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8be4:	6025      	str	r5, [r4, #0]
   d8be6:	e00c      	b.n	d8c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8be8:	6804      	ldr	r4, [r0, #0]
   d8bea:	b154      	cbz	r4, d8c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8bec:	f104 0010 	add.w	r0, r4, #16
   d8bf0:	f7ff fdfe 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8bf4:	4620      	mov	r0, r4
   d8bf6:	f7fc febd 	bl	d5974 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8bfa:	2118      	movs	r1, #24
   d8bfc:	4620      	mov	r0, r4
   d8bfe:	f001 fbf2 	bl	da3e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8c02:	2000      	movs	r0, #0
   d8c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c06 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8c06:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8c08:	2300      	movs	r3, #0
   d8c0a:	6083      	str	r3, [r0, #8]
   d8c0c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8c0e:	4604      	mov	r4, r0
   d8c10:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8c12:	b12b      	cbz	r3, d8c20 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8c14:	2202      	movs	r2, #2
   d8c16:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8c18:	68eb      	ldr	r3, [r5, #12]
   d8c1a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8c1c:	68ab      	ldr	r3, [r5, #8]
   d8c1e:	60a3      	str	r3, [r4, #8]
	}
    }
   d8c20:	4620      	mov	r0, r4
   d8c22:	bd38      	pop	{r3, r4, r5, pc}

000d8c24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8c24:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8c26:	b570      	push	{r4, r5, r6, lr}
   d8c28:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8c2a:	d006      	beq.n	d8c3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8c2c:	2a03      	cmp	r2, #3
   d8c2e:	d011      	beq.n	d8c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8c30:	2a01      	cmp	r2, #1
   d8c32:	d118      	bne.n	d8c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8c34:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c36:	6003      	str	r3, [r0, #0]
	      break;
   d8c38:	e015      	b.n	d8c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8c3a:	2014      	movs	r0, #20
   d8c3c:	680e      	ldr	r6, [r1, #0]
   d8c3e:	f7fb fa2c 	bl	d409a <_Znwj>
   d8c42:	4605      	mov	r5, r0
   d8c44:	b120      	cbz	r0, d8c50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8c46:	4631      	mov	r1, r6
   d8c48:	f7ff ffdd 	bl	d8c06 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8c4c:	7c33      	ldrb	r3, [r6, #16]
   d8c4e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8c50:	6025      	str	r5, [r4, #0]
   d8c52:	e008      	b.n	d8c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8c54:	6804      	ldr	r4, [r0, #0]
   d8c56:	b134      	cbz	r4, d8c66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8c58:	4620      	mov	r0, r4
   d8c5a:	f7fc fe8b 	bl	d5974 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8c5e:	2114      	movs	r1, #20
   d8c60:	4620      	mov	r0, r4
   d8c62:	f001 fbc0 	bl	da3e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8c66:	2000      	movs	r0, #0
   d8c68:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8c6c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8c6e:	2300      	movs	r3, #0
   d8c70:	b087      	sub	sp, #28
   d8c72:	460c      	mov	r4, r1
   d8c74:	f3bf 8f5f 	dmb	sy
   d8c78:	e850 6f00 	ldrex	r6, [r0]
   d8c7c:	e840 3200 	strex	r2, r3, [r0]
   d8c80:	2a00      	cmp	r2, #0
   d8c82:	d1f9      	bne.n	d8c78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8c84:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8c88:	2e00      	cmp	r6, #0
   d8c8a:	d03f      	beq.n	d8d0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8c8c:	4618      	mov	r0, r3
   d8c8e:	f7ff fabf 	bl	d8210 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8c92:	4607      	mov	r7, r0
   d8c94:	b120      	cbz	r0, d8ca0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8c96:	4621      	mov	r1, r4
   d8c98:	4630      	mov	r0, r6
   d8c9a:	f7ff fe53 	bl	d8944 <_ZNKSt8functionIFvRKbEEclES1_>
   d8c9e:	e02e      	b.n	d8cfe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8ca0:	4631      	mov	r1, r6
   d8ca2:	a801      	add	r0, sp, #4
   d8ca4:	f7ff ffaf 	bl	d8c06 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8ca8:	7823      	ldrb	r3, [r4, #0]
   d8caa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8cae:	2010      	movs	r0, #16
   d8cb0:	f7fb f9f3 	bl	d409a <_Znwj>
   d8cb4:	4605      	mov	r5, r0
   d8cb6:	b1d0      	cbz	r0, d8cee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8cb8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cba:	2014      	movs	r0, #20
   d8cbc:	f7fb f9ed 	bl	d409a <_Znwj>
   d8cc0:	4604      	mov	r4, r0
   d8cc2:	b178      	cbz	r0, d8ce4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8cc4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8cc6:	4601      	mov	r1, r0
   d8cc8:	a801      	add	r0, sp, #4
   d8cca:	f7fd fb99 	bl	d6400 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8cce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8cd0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cd2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8cd4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8cd6:	9203      	str	r2, [sp, #12]
   d8cd8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cda:	60e3      	str	r3, [r4, #12]
   d8cdc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8ce0:	9204      	str	r2, [sp, #16]
   d8ce2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8ce4:	4b0a      	ldr	r3, [pc, #40]	; (d8d10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8ce6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8ce8:	4b0a      	ldr	r3, [pc, #40]	; (d8d14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8cec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8cee:	a801      	add	r0, sp, #4
   d8cf0:	f7fc fe40 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8cf4:	2200      	movs	r2, #0
   d8cf6:	4629      	mov	r1, r5
   d8cf8:	4807      	ldr	r0, [pc, #28]	; (d8d18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8cfa:	f7ff fa91 	bl	d8220 <application_thread_invoke>
   d8cfe:	4630      	mov	r0, r6
   d8d00:	f7fc fe38 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8d04:	2110      	movs	r1, #16
   d8d06:	4630      	mov	r0, r6
   d8d08:	f001 fb6d 	bl	da3e6 <_ZdlPvj>
        }
    }
   d8d0c:	b007      	add	sp, #28
   d8d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8d10:	000d8957 	.word	0x000d8957
   d8d14:	000d8c25 	.word	0x000d8c25
   d8d18:	000d84a3 	.word	0x000d84a3

000d8d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8d1c:	b530      	push	{r4, r5, lr}
   d8d1e:	b085      	sub	sp, #20
   d8d20:	4604      	mov	r4, r0
   d8d22:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8d24:	4668      	mov	r0, sp
   d8d26:	4611      	mov	r1, r2
   d8d28:	f7ff fdca 	bl	d88c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8d2c:	b17c      	cbz	r4, d8d4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8d2e:	b224      	sxth	r4, r4
   d8d30:	4628      	mov	r0, r5
   d8d32:	b10d      	cbz	r5, d8d38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8d34:	f002 fe68 	bl	dba08 <strdup>
   d8d38:	9002      	str	r0, [sp, #8]
   d8d3a:	a902      	add	r1, sp, #8
   d8d3c:	4668      	mov	r0, sp
   d8d3e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8d42:	f7ff fe1f 	bl	d8984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8d46:	a802      	add	r0, sp, #8
   d8d48:	f7ff fd52 	bl	d87f0 <_ZN8particle5ErrorD1Ev>
   d8d4c:	e01d      	b.n	d8d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8d4e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8d50:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8d54:	f04f 0201 	mov.w	r2, #1
   d8d58:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8d5c:	42a3      	cmp	r3, r4
   d8d5e:	d103      	bne.n	d8d68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8d60:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8d64:	2900      	cmp	r1, #0
   d8d66:	d1f7      	bne.n	d8d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8d68:	d002      	beq.n	d8d70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8d6a:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d6e:	e00c      	b.n	d8d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8d70:	f110 010c 	adds.w	r1, r0, #12
   d8d74:	f04f 0301 	mov.w	r3, #1
   d8d78:	bf18      	it	ne
   d8d7a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8d7c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8d80:	3004      	adds	r0, #4
   d8d82:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8d86:	f7ff ff71 	bl	d8c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8d8a:	a801      	add	r0, sp, #4
   d8d8c:	f7ff fbbc 	bl	d8508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8d90:	b005      	add	sp, #20
   d8d92:	bd30      	pop	{r4, r5, pc}

000d8d94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d94:	2200      	movs	r2, #0
   d8d96:	4611      	mov	r1, r2
   d8d98:	6840      	ldr	r0, [r0, #4]
   d8d9a:	f7ff bb17 	b.w	d83cc <network_listening>

000d8d9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8d9e:	2200      	movs	r2, #0
   d8da0:	4611      	mov	r1, r2
   d8da2:	6840      	ldr	r0, [r0, #4]
   d8da4:	f7ff bb22 	b.w	d83ec <network_get_listen_timeout>

000d8da8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8da8:	2200      	movs	r2, #0
   d8daa:	6840      	ldr	r0, [r0, #4]
   d8dac:	f7ff bb16 	b.w	d83dc <network_set_listen_timeout>

000d8db0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8db0:	2200      	movs	r2, #0
   d8db2:	f081 0101 	eor.w	r1, r1, #1
   d8db6:	6840      	ldr	r0, [r0, #4]
   d8db8:	f7ff bb00 	b.w	d83bc <network_listen>

000d8dbc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8dbc:	2300      	movs	r3, #0
   d8dbe:	461a      	mov	r2, r3
   d8dc0:	4619      	mov	r1, r3
   d8dc2:	6840      	ldr	r0, [r0, #4]
   d8dc4:	f7ff baf2 	b.w	d83ac <network_off>

000d8dc8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8dc8:	2300      	movs	r3, #0
   d8dca:	461a      	mov	r2, r3
   d8dcc:	4619      	mov	r1, r3
   d8dce:	6840      	ldr	r0, [r0, #4]
   d8dd0:	f7ff bae4 	b.w	d839c <network_on>

000d8dd4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8dd4:	2200      	movs	r2, #0
   d8dd6:	4611      	mov	r1, r2
   d8dd8:	6840      	ldr	r0, [r0, #4]
   d8dda:	f7ff bad7 	b.w	d838c <network_ready>

000d8dde <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8dde:	2200      	movs	r2, #0
   d8de0:	4611      	mov	r1, r2
   d8de2:	6840      	ldr	r0, [r0, #4]
   d8de4:	f7ff bac2 	b.w	d836c <network_connecting>

000d8de8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8de8:	2200      	movs	r2, #0
   d8dea:	2102      	movs	r1, #2
   d8dec:	6840      	ldr	r0, [r0, #4]
   d8dee:	f7ff bac5 	b.w	d837c <network_disconnect>

000d8df2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8df2:	2300      	movs	r3, #0
   d8df4:	461a      	mov	r2, r3
   d8df6:	6840      	ldr	r0, [r0, #4]
   d8df8:	f7ff bab0 	b.w	d835c <network_connect>

000d8dfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8dfc:	4b02      	ldr	r3, [pc, #8]	; (d8e08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8dfe:	2203      	movs	r2, #3
   d8e00:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8e02:	4a02      	ldr	r2, [pc, #8]	; (d8e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8e04:	601a      	str	r2, [r3, #0]
   d8e06:	4770      	bx	lr
   d8e08:	2003e274 	.word	0x2003e274
   d8e0c:	000dd984 	.word	0x000dd984

000d8e10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8e10:	4770      	bx	lr

000d8e12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e14:	4606      	mov	r6, r0
   d8e16:	4615      	mov	r5, r2
   d8e18:	460c      	mov	r4, r1
   d8e1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8e1c:	42bc      	cmp	r4, r7
   d8e1e:	d006      	beq.n	d8e2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8e20:	6833      	ldr	r3, [r6, #0]
   d8e22:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8e26:	689b      	ldr	r3, [r3, #8]
   d8e28:	4630      	mov	r0, r6
   d8e2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8e2c:	e7f6      	b.n	d8e1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8e2e:	4628      	mov	r0, r5
   d8e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8e32:	2200      	movs	r2, #0
   d8e34:	7c00      	ldrb	r0, [r0, #16]
   d8e36:	f7ff b889 	b.w	d7f4c <HAL_I2C_Write_Data>

000d8e3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8e3a:	2100      	movs	r1, #0
   d8e3c:	7c00      	ldrb	r0, [r0, #16]
   d8e3e:	f7ff b88d 	b.w	d7f5c <HAL_I2C_Available_Data>

000d8e42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8e42:	2100      	movs	r1, #0
   d8e44:	7c00      	ldrb	r0, [r0, #16]
   d8e46:	f7ff b891 	b.w	d7f6c <HAL_I2C_Read_Data>

000d8e4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8e4a:	2100      	movs	r1, #0
   d8e4c:	7c00      	ldrb	r0, [r0, #16]
   d8e4e:	f7ff b895 	b.w	d7f7c <HAL_I2C_Peek_Data>

000d8e52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8e52:	2100      	movs	r1, #0
   d8e54:	7c00      	ldrb	r0, [r0, #16]
   d8e56:	f7ff b899 	b.w	d7f8c <HAL_I2C_Flush_Data>

000d8e5a <_ZN7TwoWireD0Ev>:
   d8e5a:	b510      	push	{r4, lr}
   d8e5c:	2114      	movs	r1, #20
   d8e5e:	4604      	mov	r4, r0
   d8e60:	f001 fac1 	bl	da3e6 <_ZdlPvj>
   d8e64:	4620      	mov	r0, r4
   d8e66:	bd10      	pop	{r4, pc}

000d8e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8e68:	b510      	push	{r4, lr}
   d8e6a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8e6c:	2300      	movs	r3, #0
   d8e6e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8e74:	60a3      	str	r3, [r4, #8]
   d8e76:	4b04      	ldr	r3, [pc, #16]	; (d8e88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8e78:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8e7a:	4608      	mov	r0, r1
   d8e7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8e7e:	4611      	mov	r1, r2
   d8e80:	f7ff f894 	bl	d7fac <HAL_I2C_Init>
}
   d8e84:	4620      	mov	r0, r4
   d8e86:	bd10      	pop	{r4, pc}
   d8e88:	000dd9b8 	.word	0x000dd9b8

000d8e8c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8e8c:	2300      	movs	r3, #0
   d8e8e:	461a      	mov	r2, r3
   d8e90:	4619      	mov	r1, r3
   d8e92:	7c00      	ldrb	r0, [r0, #16]
   d8e94:	f7ff b842 	b.w	d7f1c <HAL_I2C_Begin>

000d8e98 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8e98:	b570      	push	{r4, r5, r6, lr}
   d8e9a:	460c      	mov	r4, r1
   d8e9c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8e9e:	2514      	movs	r5, #20
   d8ea0:	4606      	mov	r6, r0
   d8ea2:	462a      	mov	r2, r5
   d8ea4:	2100      	movs	r1, #0
   d8ea6:	a801      	add	r0, sp, #4
   d8ea8:	f002 fb1e 	bl	db4e8 <memset>
   d8eac:	7823      	ldrb	r3, [r4, #0]
   d8eae:	f88d 3008 	strb.w	r3, [sp, #8]
   d8eb2:	6863      	ldr	r3, [r4, #4]
   d8eb4:	9303      	str	r3, [sp, #12]
   d8eb6:	68e3      	ldr	r3, [r4, #12]
   d8eb8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8eba:	2200      	movs	r2, #0
   d8ebc:	7a23      	ldrb	r3, [r4, #8]
   d8ebe:	7c30      	ldrb	r0, [r6, #16]
   d8ec0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8ec4:	a901      	add	r1, sp, #4
   d8ec6:	9305      	str	r3, [sp, #20]
   d8ec8:	f7ff f888 	bl	d7fdc <HAL_I2C_Request_Data_Ex>
}
   d8ecc:	b006      	add	sp, #24
   d8ece:	bd70      	pop	{r4, r5, r6, pc}

000d8ed0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8ed2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8ed4:	f88d 1000 	strb.w	r1, [sp]
   d8ed8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8edc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8ede:	bf18      	it	ne
   d8ee0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8ee2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8ee4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8ee6:	f88d 3008 	strb.w	r3, [sp, #8]
   d8eea:	f7ff ffd5 	bl	d8e98 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8eee:	b005      	add	sp, #20
   d8ef0:	f85d fb04 	ldr.w	pc, [sp], #4

000d8ef4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8ef4:	2200      	movs	r2, #0
   d8ef6:	7c00      	ldrb	r0, [r0, #16]
   d8ef8:	f7ff b818 	b.w	d7f2c <HAL_I2C_Begin_Transmission>

000d8efc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8efc:	b2c9      	uxtb	r1, r1
   d8efe:	f7ff bff9 	b.w	d8ef4 <_ZN7TwoWire17beginTransmissionEh>

000d8f02 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8f02:	2200      	movs	r2, #0
   d8f04:	7c00      	ldrb	r0, [r0, #16]
   d8f06:	f7ff b819 	b.w	d7f3c <HAL_I2C_End_Transmission>

000d8f0a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8f0a:	2100      	movs	r1, #0
   d8f0c:	7c00      	ldrb	r0, [r0, #16]
   d8f0e:	f7ff b845 	b.w	d7f9c <HAL_I2C_Is_Enabled>

000d8f12 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8f12:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8f14:	2100      	movs	r1, #0
   d8f16:	7c00      	ldrb	r0, [r0, #16]
   d8f18:	f7ff f850 	bl	d7fbc <HAL_I2C_Acquire>
}
   d8f1c:	fab0 f080 	clz	r0, r0
   d8f20:	0940      	lsrs	r0, r0, #5
   d8f22:	bd08      	pop	{r3, pc}

000d8f24 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8f24:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8f26:	2100      	movs	r1, #0
   d8f28:	7c00      	ldrb	r0, [r0, #16]
   d8f2a:	f7ff f84f 	bl	d7fcc <HAL_I2C_Release>
}
   d8f2e:	fab0 f080 	clz	r0, r0
   d8f32:	0940      	lsrs	r0, r0, #5
   d8f34:	bd08      	pop	{r3, pc}

000d8f36 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8f36:	4700      	bx	r0

000d8f38 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8f3a:	b085      	sub	sp, #20
   d8f3c:	461c      	mov	r4, r3
   d8f3e:	460e      	mov	r6, r1
   d8f40:	4617      	mov	r7, r2
   d8f42:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d8f44:	f7fe ffd2 	bl	d7eec <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8f48:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8f4a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f4c:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8f50:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f52:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d8f56:	bfa5      	ittet	ge
   d8f58:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8f5c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8f60:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8f62:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f64:	9300      	str	r3, [sp, #0]
   d8f66:	4632      	mov	r2, r6
   d8f68:	463b      	mov	r3, r7
   d8f6a:	4906      	ldr	r1, [pc, #24]	; (d8f84 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8f6c:	bfa8      	it	ge
   d8f6e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f72:	4628      	mov	r0, r5
   d8f74:	f7fe ffb2 	bl	d7edc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8f78:	fab0 f080 	clz	r0, r0
   d8f7c:	0940      	lsrs	r0, r0, #5
   d8f7e:	b005      	add	sp, #20
   d8f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8f82:	bf00      	nop
   d8f84:	000d8f37 	.word	0x000d8f37

000d8f88 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8f88:	f7fe bfc0 	b.w	d7f0c <HAL_Interrupts_Disable_All>

000d8f8c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8f8c:	f7fe bfb6 	b.w	d7efc <HAL_Interrupts_Enable_All>

000d8f90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8f90:	4770      	bx	lr

000d8f92 <_ZN9IPAddressD0Ev>:
   d8f92:	b510      	push	{r4, lr}
   d8f94:	2118      	movs	r1, #24
   d8f96:	4604      	mov	r4, r0
   d8f98:	f001 fa25 	bl	da3e6 <_ZdlPvj>
   d8f9c:	4620      	mov	r0, r4
   d8f9e:	bd10      	pop	{r4, pc}

000d8fa0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8fa2:	7d03      	ldrb	r3, [r0, #20]
   d8fa4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8fa6:	b08d      	sub	sp, #52	; 0x34
   d8fa8:	460e      	mov	r6, r1
   d8faa:	f100 0704 	add.w	r7, r0, #4
   d8fae:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8fb2:	d002      	beq.n	d8fba <_ZNK9IPAddress7printToER5Print+0x1a>
   d8fb4:	f100 0508 	add.w	r5, r0, #8
   d8fb8:	e018      	b.n	d8fec <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8fba:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8fbc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8fbe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8fc2:	232f      	movs	r3, #47	; 0x2f
   d8fc4:	462a      	mov	r2, r5
   d8fc6:	200a      	movs	r0, #10
   d8fc8:	f7ff f810 	bl	d7fec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8fcc:	4628      	mov	r0, r5
   d8fce:	f003 fa4b 	bl	dc468 <strlen>
   d8fd2:	6833      	ldr	r3, [r6, #0]
   d8fd4:	4602      	mov	r2, r0
   d8fd6:	68db      	ldr	r3, [r3, #12]
   d8fd8:	4629      	mov	r1, r5
   d8fda:	4630      	mov	r0, r6
   d8fdc:	4798      	blx	r3
   d8fde:	e00f      	b.n	d9000 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8fe0:	b124      	cbz	r4, d8fec <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8fe2:	212e      	movs	r1, #46	; 0x2e
   d8fe4:	4630      	mov	r0, r6
   d8fe6:	f000 fa62 	bl	d94ae <_ZN5Print5printEc>
   d8fea:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8fec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8ff0:	220a      	movs	r2, #10
   d8ff2:	4630      	mov	r0, r6
   d8ff4:	f000 fa74 	bl	d94e0 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ff8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8ffa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ffc:	d1f0      	bne.n	d8fe0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8ffe:	4620      	mov	r0, r4
    }
    return n;
}
   d9000:	b00d      	add	sp, #52	; 0x34
   d9002:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9004 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9004:	b510      	push	{r4, lr}
   d9006:	4b05      	ldr	r3, [pc, #20]	; (d901c <_ZN9IPAddressC1Ev+0x18>)
   d9008:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d900a:	2211      	movs	r2, #17
   d900c:	f840 3b04 	str.w	r3, [r0], #4
   d9010:	2100      	movs	r1, #0
   d9012:	f002 fa69 	bl	db4e8 <memset>
{
    clear();
}
   d9016:	4620      	mov	r0, r4
   d9018:	bd10      	pop	{r4, pc}
   d901a:	bf00      	nop
   d901c:	000dd9e0 	.word	0x000dd9e0

000d9020 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9020:	4603      	mov	r3, r0
   d9022:	4a07      	ldr	r2, [pc, #28]	; (d9040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9024:	b510      	push	{r4, lr}
   d9026:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d902a:	f101 0210 	add.w	r2, r1, #16
   d902e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9032:	f843 4b04 	str.w	r4, [r3], #4
   d9036:	4291      	cmp	r1, r2
   d9038:	d1f9      	bne.n	d902e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d903a:	780a      	ldrb	r2, [r1, #0]
   d903c:	701a      	strb	r2, [r3, #0]
}
   d903e:	bd10      	pop	{r4, pc}
   d9040:	000dd9e0 	.word	0x000dd9e0

000d9044 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9044:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9046:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d904a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d904e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9052:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9056:	2304      	movs	r3, #4
   d9058:	6041      	str	r1, [r0, #4]
   d905a:	7503      	strb	r3, [r0, #20]
   d905c:	bd10      	pop	{r4, pc}

000d905e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d905e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9060:	780d      	ldrb	r5, [r1, #0]
   d9062:	788b      	ldrb	r3, [r1, #2]
   d9064:	784a      	ldrb	r2, [r1, #1]
   d9066:	78c9      	ldrb	r1, [r1, #3]
   d9068:	9100      	str	r1, [sp, #0]
   d906a:	4629      	mov	r1, r5
   d906c:	f7ff ffea 	bl	d9044 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9070:	b003      	add	sp, #12
   d9072:	bd30      	pop	{r4, r5, pc}

000d9074 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9074:	4b01      	ldr	r3, [pc, #4]	; (d907c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9076:	4a02      	ldr	r2, [pc, #8]	; (d9080 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9078:	601a      	str	r2, [r3, #0]
   d907a:	4770      	bx	lr
   d907c:	2003e27c 	.word	0x2003e27c
   d9080:	000dda5c 	.word	0x000dda5c

000d9084 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9084:	2200      	movs	r2, #0
   d9086:	4611      	mov	r1, r2
   d9088:	6840      	ldr	r0, [r0, #4]
   d908a:	f7ff b99f 	b.w	d83cc <network_listening>

000d908e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d908e:	2200      	movs	r2, #0
   d9090:	4611      	mov	r1, r2
   d9092:	6840      	ldr	r0, [r0, #4]
   d9094:	f7ff b9aa 	b.w	d83ec <network_get_listen_timeout>

000d9098 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9098:	2200      	movs	r2, #0
   d909a:	6840      	ldr	r0, [r0, #4]
   d909c:	f7ff b99e 	b.w	d83dc <network_set_listen_timeout>

000d90a0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d90a0:	2200      	movs	r2, #0
   d90a2:	f081 0101 	eor.w	r1, r1, #1
   d90a6:	6840      	ldr	r0, [r0, #4]
   d90a8:	f7ff b988 	b.w	d83bc <network_listen>

000d90ac <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d90ac:	2300      	movs	r3, #0
   d90ae:	461a      	mov	r2, r3
   d90b0:	2101      	movs	r1, #1
   d90b2:	6840      	ldr	r0, [r0, #4]
   d90b4:	f7ff b97a 	b.w	d83ac <network_off>

000d90b8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d90b8:	2300      	movs	r3, #0
   d90ba:	461a      	mov	r2, r3
   d90bc:	4619      	mov	r1, r3
   d90be:	6840      	ldr	r0, [r0, #4]
   d90c0:	f7ff b96c 	b.w	d839c <network_on>

000d90c4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d90c4:	2200      	movs	r2, #0
   d90c6:	4611      	mov	r1, r2
   d90c8:	6840      	ldr	r0, [r0, #4]
   d90ca:	f7ff b95f 	b.w	d838c <network_ready>

000d90ce <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d90ce:	2200      	movs	r2, #0
   d90d0:	4611      	mov	r1, r2
   d90d2:	6840      	ldr	r0, [r0, #4]
   d90d4:	f7ff b94a 	b.w	d836c <network_connecting>

000d90d8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d90d8:	2200      	movs	r2, #0
   d90da:	2102      	movs	r1, #2
   d90dc:	6840      	ldr	r0, [r0, #4]
   d90de:	f7ff b94d 	b.w	d837c <network_disconnect>

000d90e2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d90e2:	2300      	movs	r3, #0
   d90e4:	461a      	mov	r2, r3
   d90e6:	6840      	ldr	r0, [r0, #4]
   d90e8:	f7ff b938 	b.w	d835c <network_connect>

000d90ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d90ec:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d90ee:	4605      	mov	r5, r0
   d90f0:	b188      	cbz	r0, d9116 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90f2:	6804      	ldr	r4, [r0, #0]
   d90f4:	b14c      	cbz	r4, d910a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d90f6:	68a3      	ldr	r3, [r4, #8]
   d90f8:	b11b      	cbz	r3, d9102 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d90fa:	2203      	movs	r2, #3
   d90fc:	4621      	mov	r1, r4
   d90fe:	4620      	mov	r0, r4
   d9100:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9102:	2110      	movs	r1, #16
   d9104:	4620      	mov	r0, r4
   d9106:	f001 f96e 	bl	da3e6 <_ZdlPvj>
   d910a:	4628      	mov	r0, r5
   d910c:	2114      	movs	r1, #20
      }
   d910e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9112:	f001 b968 	b.w	da3e6 <_ZdlPvj>
   d9116:	bd38      	pop	{r3, r4, r5, pc}

000d9118 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d9118:	b110      	cbz	r0, d9120 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d911a:	6803      	ldr	r3, [r0, #0]
   d911c:	685b      	ldr	r3, [r3, #4]
   d911e:	4718      	bx	r3
   d9120:	4770      	bx	lr

000d9122 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9122:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9124:	6803      	ldr	r3, [r0, #0]
   d9126:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d9128:	b1bb      	cbz	r3, d915a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d912a:	6858      	ldr	r0, [r3, #4]
   d912c:	f7fe fdee 	bl	d7d0c <os_thread_is_current>
   d9130:	b978      	cbnz	r0, d9152 <_ZN6ThreadD1Ev+0x30>
   d9132:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d9134:	7c5a      	ldrb	r2, [r3, #17]
   d9136:	b912      	cbnz	r2, d913e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d9138:	6858      	ldr	r0, [r3, #4]
   d913a:	f7fe fdf7 	bl	d7d2c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d913e:	6823      	ldr	r3, [r4, #0]
   d9140:	6858      	ldr	r0, [r3, #4]
   d9142:	f7fe fdfb 	bl	d7d3c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9146:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9148:	2300      	movs	r3, #0
   d914a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d914c:	b128      	cbz	r0, d915a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d914e:	f7ff ffcd 	bl	d90ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9152:	6820      	ldr	r0, [r4, #0]
   d9154:	b108      	cbz	r0, d915a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d9156:	f7ff ffc9 	bl	d90ec <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d915a:	4620      	mov	r0, r4
   d915c:	bd10      	pop	{r4, pc}

000d915e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d915e:	b538      	push	{r3, r4, r5, lr}
   d9160:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9162:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d9166:	b108      	cbz	r0, d916c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d9168:	f7fa ff9b 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d916c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d9170:	b108      	cbz	r0, d9176 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d9172:	f7fe fe13 	bl	d7d9c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9176:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d917a:	b135      	cbz	r5, d918a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d917c:	4628      	mov	r0, r5
   d917e:	f7ff ffd0 	bl	d9122 <_ZN6ThreadD1Ev>
   d9182:	2104      	movs	r1, #4
   d9184:	4628      	mov	r0, r5
   d9186:	f001 f92e 	bl	da3e6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d918a:	6820      	ldr	r0, [r4, #0]
   d918c:	b108      	cbz	r0, d9192 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d918e:	f7ff ffc3 	bl	d9118 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d9192:	4620      	mov	r0, r4
   d9194:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9198 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d9198:	b510      	push	{r4, lr}
   d919a:	4b04      	ldr	r3, [pc, #16]	; (d91ac <_ZN5spark9MeshClassD1Ev+0x14>)
   d919c:	4604      	mov	r4, r0
   d919e:	f840 3b08 	str.w	r3, [r0], #8
   d91a2:	f7ff ffdc 	bl	d915e <_ZN5spark11MeshPublishD1Ev>
   d91a6:	4620      	mov	r0, r4
   d91a8:	bd10      	pop	{r4, pc}
   d91aa:	bf00      	nop
   d91ac:	000ddac8 	.word	0x000ddac8

000d91b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d91b0:	b538      	push	{r3, r4, r5, lr}
   d91b2:	4c0e      	ldr	r4, [pc, #56]	; (d91ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d91b4:	4b0e      	ldr	r3, [pc, #56]	; (d91f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d91b6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d91b8:	2500      	movs	r5, #0
   d91ba:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d91bc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d91c0:	6063      	str	r3, [r4, #4]
   d91c2:	60a5      	str	r5, [r4, #8]
   d91c4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d91c8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d91cc:	f7fe fdde 	bl	d7d8c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d91d0:	4b08      	ldr	r3, [pc, #32]	; (d91f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d91d2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d91d6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d91da:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d91dc:	4620      	mov	r0, r4
   d91de:	4a06      	ldr	r2, [pc, #24]	; (d91f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d91e0:	4906      	ldr	r1, [pc, #24]	; (d91fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d91e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d91e6:	f001 b8f9 	b.w	da3dc <__aeabi_atexit>
   d91ea:	bf00      	nop
   d91ec:	2003e280 	.word	0x2003e280
   d91f0:	000ddafc 	.word	0x000ddafc
   d91f4:	000ddac8 	.word	0x000ddac8
   d91f8:	2003de88 	.word	0x2003de88
   d91fc:	000d9199 	.word	0x000d9199

000d9200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9200:	2300      	movs	r3, #0
   d9202:	461a      	mov	r2, r3
   d9204:	6840      	ldr	r0, [r0, #4]
   d9206:	f7ff b8a9 	b.w	d835c <network_connect>

000d920a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d920a:	2200      	movs	r2, #0
   d920c:	2102      	movs	r1, #2
   d920e:	6840      	ldr	r0, [r0, #4]
   d9210:	f7ff b8b4 	b.w	d837c <network_disconnect>

000d9214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9214:	2200      	movs	r2, #0
   d9216:	4611      	mov	r1, r2
   d9218:	6840      	ldr	r0, [r0, #4]
   d921a:	f7ff b8a7 	b.w	d836c <network_connecting>

000d921e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d921e:	2200      	movs	r2, #0
   d9220:	4611      	mov	r1, r2
   d9222:	6840      	ldr	r0, [r0, #4]
   d9224:	f7ff b8b2 	b.w	d838c <network_ready>

000d9228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9228:	2300      	movs	r3, #0
   d922a:	461a      	mov	r2, r3
   d922c:	4619      	mov	r1, r3
   d922e:	6840      	ldr	r0, [r0, #4]
   d9230:	f7ff b8b4 	b.w	d839c <network_on>

000d9234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9234:	2300      	movs	r3, #0
   d9236:	461a      	mov	r2, r3
   d9238:	4619      	mov	r1, r3
   d923a:	6840      	ldr	r0, [r0, #4]
   d923c:	f7ff b8b6 	b.w	d83ac <network_off>

000d9240 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9240:	2200      	movs	r2, #0
   d9242:	f081 0101 	eor.w	r1, r1, #1
   d9246:	6840      	ldr	r0, [r0, #4]
   d9248:	f7ff b8b8 	b.w	d83bc <network_listen>

000d924c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d924c:	2200      	movs	r2, #0
   d924e:	6840      	ldr	r0, [r0, #4]
   d9250:	f7ff b8c4 	b.w	d83dc <network_set_listen_timeout>

000d9254 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9254:	2200      	movs	r2, #0
   d9256:	4611      	mov	r1, r2
   d9258:	6840      	ldr	r0, [r0, #4]
   d925a:	f7ff b8c7 	b.w	d83ec <network_get_listen_timeout>

000d925e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d925e:	2200      	movs	r2, #0
   d9260:	4611      	mov	r1, r2
   d9262:	6840      	ldr	r0, [r0, #4]
   d9264:	f7ff b8b2 	b.w	d83cc <network_listening>

000d9268 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d926c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d926e:	b095      	sub	sp, #84	; 0x54
   d9270:	4616      	mov	r6, r2
   d9272:	460d      	mov	r5, r1
   d9274:	4607      	mov	r7, r0
    IPAddress addr;
   d9276:	f7ff fec5 	bl	d9004 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d927a:	4621      	mov	r1, r4
   d927c:	2220      	movs	r2, #32
   d927e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9280:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9282:	f002 f931 	bl	db4e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9286:	2340      	movs	r3, #64	; 0x40
   d9288:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d928a:	4621      	mov	r1, r4
   d928c:	466b      	mov	r3, sp
   d928e:	aa0c      	add	r2, sp, #48	; 0x30
   d9290:	4630      	mov	r0, r6
   d9292:	f7fe febb 	bl	d800c <netdb_getaddrinfo>
    if (!r) {
   d9296:	4604      	mov	r4, r0
   d9298:	2800      	cmp	r0, #0
   d929a:	d144      	bne.n	d9326 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d929c:	4602      	mov	r2, r0
   d929e:	2101      	movs	r1, #1
   d92a0:	6868      	ldr	r0, [r5, #4]
   d92a2:	f7ff f873 	bl	d838c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d92a6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d92a8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d92aa:	4622      	mov	r2, r4
   d92ac:	6868      	ldr	r0, [r5, #4]
   d92ae:	f7ff f86d 	bl	d838c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d92b2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d92b4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d92b6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d92b8:	2e00      	cmp	r6, #0
   d92ba:	d034      	beq.n	d9326 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d92bc:	2900      	cmp	r1, #0
   d92be:	d132      	bne.n	d9326 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d92c0:	6873      	ldr	r3, [r6, #4]
   d92c2:	2b02      	cmp	r3, #2
   d92c4:	d002      	beq.n	d92cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d92c6:	2b0a      	cmp	r3, #10
   d92c8:	d009      	beq.n	d92de <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d92ca:	e02a      	b.n	d9322 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d92cc:	f1b8 0f00 	cmp.w	r8, #0
   d92d0:	d027      	beq.n	d9322 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d92d2:	6971      	ldr	r1, [r6, #20]
   d92d4:	4638      	mov	r0, r7
   d92d6:	3104      	adds	r1, #4
   d92d8:	f7ff fec1 	bl	d905e <_ZN9IPAddressaSEPKh>
   d92dc:	e020      	b.n	d9320 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d92de:	f1b9 0f00 	cmp.w	r9, #0
   d92e2:	d01e      	beq.n	d9322 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d92e4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d92e6:	2211      	movs	r2, #17
   d92e8:	a801      	add	r0, sp, #4
   d92ea:	f002 f8fd 	bl	db4e8 <memset>
                    a.v = 6;
   d92ee:	2306      	movs	r3, #6
   d92f0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d92f4:	ad01      	add	r5, sp, #4
   d92f6:	f104 0308 	add.w	r3, r4, #8
   d92fa:	3418      	adds	r4, #24
   d92fc:	6818      	ldr	r0, [r3, #0]
   d92fe:	6859      	ldr	r1, [r3, #4]
   d9300:	462a      	mov	r2, r5
   d9302:	c203      	stmia	r2!, {r0, r1}
   d9304:	3308      	adds	r3, #8
   d9306:	42a3      	cmp	r3, r4
   d9308:	4615      	mov	r5, r2
   d930a:	d1f7      	bne.n	d92fc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d930c:	a901      	add	r1, sp, #4
   d930e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d9310:	ad07      	add	r5, sp, #28
   d9312:	f7ff fe85 	bl	d9020 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9318:	1d3c      	adds	r4, r7, #4
   d931a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d931c:	682b      	ldr	r3, [r5, #0]
   d931e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d9320:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9322:	69f6      	ldr	r6, [r6, #28]
   d9324:	e7c8      	b.n	d92b8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9326:	9800      	ldr	r0, [sp, #0]
   d9328:	f7fe fe68 	bl	d7ffc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d932c:	4638      	mov	r0, r7
   d932e:	b015      	add	sp, #84	; 0x54
   d9330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9334 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9334:	4b02      	ldr	r3, [pc, #8]	; (d9340 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9336:	4a03      	ldr	r2, [pc, #12]	; (d9344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9338:	601a      	str	r2, [r3, #0]
   d933a:	2200      	movs	r2, #0
   d933c:	605a      	str	r2, [r3, #4]
   d933e:	4770      	bx	lr
   d9340:	2003e454 	.word	0x2003e454
   d9344:	000ddafc 	.word	0x000ddafc

000d9348 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9348:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d934a:	f001 f821 	bl	da390 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d934e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d9352:	f7ff bdde 	b.w	d8f12 <_ZN7TwoWire4lockEv>

000d9356 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d9356:	b510      	push	{r4, lr}
   d9358:	4604      	mov	r4, r0
    lock_(_lock)
   d935a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d935c:	b109      	cbz	r1, d9362 <_ZN4PMICC1Eb+0xc>
        lock();
   d935e:	f7ff fff3 	bl	d9348 <_ZN4PMIC4lockEv>
    }
}
   d9362:	4620      	mov	r0, r4
   d9364:	bd10      	pop	{r4, pc}

000d9366 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d9366:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d9368:	f001 f812 	bl	da390 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d936c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d9370:	f7ff bdd8 	b.w	d8f24 <_ZN7TwoWire6unlockEv>

000d9374 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d9374:	b510      	push	{r4, lr}
{
    if (lock_) {
   d9376:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d9378:	4604      	mov	r4, r0
{
    if (lock_) {
   d937a:	b10b      	cbz	r3, d9380 <_ZN4PMICD1Ev+0xc>
        unlock();
   d937c:	f7ff fff3 	bl	d9366 <_ZN4PMIC6unlockEv>
    }
}
   d9380:	4620      	mov	r0, r4
   d9382:	bd10      	pop	{r4, pc}

000d9384 <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d9384:	b510      	push	{r4, lr}
   d9386:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9388:	6800      	ldr	r0, [r0, #0]
   d938a:	f7ff ffec 	bl	d9366 <_ZN4PMIC6unlockEv>
   d938e:	4620      	mov	r0, r4
   d9390:	bd10      	pop	{r4, pc}

000d9392 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d9392:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9394:	ac02      	add	r4, sp, #8
   d9396:	460d      	mov	r5, r1
   d9398:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d939c:	f7ff ffd4 	bl	d9348 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93a0:	f000 fff6 	bl	da390 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d93a4:	216b      	movs	r1, #107	; 0x6b
   d93a6:	f7ff fda9 	bl	d8efc <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93aa:	f000 fff1 	bl	da390 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d93ae:	6803      	ldr	r3, [r0, #0]
   d93b0:	4629      	mov	r1, r5
   d93b2:	689b      	ldr	r3, [r3, #8]
   d93b4:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93b6:	f000 ffeb 	bl	da390 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d93ba:	2101      	movs	r1, #1
   d93bc:	f7ff fda1 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93c0:	f000 ffe6 	bl	da390 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d93c4:	2301      	movs	r3, #1
   d93c6:	461a      	mov	r2, r3
   d93c8:	216b      	movs	r1, #107	; 0x6b
   d93ca:	f7ff fd81 	bl	d8ed0 <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93ce:	f000 ffdf 	bl	da390 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d93d2:	6803      	ldr	r3, [r0, #0]
   d93d4:	695b      	ldr	r3, [r3, #20]
   d93d6:	4798      	blx	r3
   d93d8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d93da:	4620      	mov	r0, r4
   d93dc:	f7ff ffd2 	bl	d9384 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d93e0:	b2e8      	uxtb	r0, r5
   d93e2:	b003      	add	sp, #12
   d93e4:	bd30      	pop	{r4, r5, pc}

000d93e6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d93e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d93e8:	ac02      	add	r4, sp, #8
   d93ea:	4615      	mov	r5, r2
   d93ec:	460e      	mov	r6, r1
   d93ee:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d93f2:	f7ff ffa9 	bl	d9348 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d93f6:	f000 ffcb 	bl	da390 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d93fa:	216b      	movs	r1, #107	; 0x6b
   d93fc:	f7ff fd7e 	bl	d8efc <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d9400:	f000 ffc6 	bl	da390 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d9404:	6803      	ldr	r3, [r0, #0]
   d9406:	4631      	mov	r1, r6
   d9408:	689b      	ldr	r3, [r3, #8]
   d940a:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d940c:	f000 ffc0 	bl	da390 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d9410:	6803      	ldr	r3, [r0, #0]
   d9412:	4629      	mov	r1, r5
   d9414:	689b      	ldr	r3, [r3, #8]
   d9416:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d9418:	f000 ffba 	bl	da390 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d941c:	2101      	movs	r1, #1
   d941e:	f7ff fd70 	bl	d8f02 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d9422:	4620      	mov	r0, r4
   d9424:	f7ff ffae 	bl	d9384 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d9428:	b002      	add	sp, #8
   d942a:	bd70      	pop	{r4, r5, r6, pc}

000d942c <_ZN4PMIC10enableBuckEv>:
 * Function Name  : enableBuck
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
   d942c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d942e:	ac02      	add	r4, sp, #8
   d9430:	4605      	mov	r5, r0
   d9432:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d9436:	f7ff ff87 	bl	d9348 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d943a:	2100      	movs	r1, #0
   d943c:	4628      	mov	r0, r5
   d943e:	f7ff ffa8 	bl	d9392 <_ZN4PMIC12readRegisterEh>
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
   d9442:	2100      	movs	r1, #0
   d9444:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d9448:	4628      	mov	r0, r5
   d944a:	f7ff ffcc 	bl	d93e6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
    std::lock_guard<PMIC> l(*this);
   d944e:	4620      	mov	r0, r4
   d9450:	f7ff ff98 	bl	d9384 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
    return 1;
}
   d9454:	2001      	movs	r0, #1
   d9456:	b003      	add	sp, #12
   d9458:	bd30      	pop	{r4, r5, pc}

000d945a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d945a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d945c:	4606      	mov	r6, r0
   d945e:	460d      	mov	r5, r1
   d9460:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9462:	2400      	movs	r4, #0
  while (size--) {
   d9464:	42bd      	cmp	r5, r7
   d9466:	d00c      	beq.n	d9482 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9468:	6833      	ldr	r3, [r6, #0]
   d946a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d946e:	689b      	ldr	r3, [r3, #8]
   d9470:	4630      	mov	r0, r6
   d9472:	4798      	blx	r3
     if (chunk>=0)
   d9474:	2800      	cmp	r0, #0
   d9476:	db01      	blt.n	d947c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9478:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d947a:	e7f3      	b.n	d9464 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d947c:	2c00      	cmp	r4, #0
   d947e:	bf08      	it	eq
   d9480:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d9482:	4620      	mov	r0, r4
   d9484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9486 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d9486:	b570      	push	{r4, r5, r6, lr}
   d9488:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d948a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d948c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d948e:	b149      	cbz	r1, d94a4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d9490:	f002 ffea 	bl	dc468 <strlen>
   d9494:	682b      	ldr	r3, [r5, #0]
   d9496:	4602      	mov	r2, r0
   d9498:	4621      	mov	r1, r4
   d949a:	4628      	mov	r0, r5
   d949c:	68db      	ldr	r3, [r3, #12]
    }
   d949e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d94a2:	4718      	bx	r3
    }
   d94a4:	bd70      	pop	{r4, r5, r6, pc}

000d94a6 <_ZN5Print5printEPKc>:
   d94a6:	b508      	push	{r3, lr}
   d94a8:	f7ff ffed 	bl	d9486 <_ZN5Print5writeEPKc>
   d94ac:	bd08      	pop	{r3, pc}

000d94ae <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d94ae:	6803      	ldr	r3, [r0, #0]
   d94b0:	689b      	ldr	r3, [r3, #8]
   d94b2:	4718      	bx	r3

000d94b4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94b4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d94b6:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d94b8:	4605      	mov	r5, r0
  size_t n = print('\r');
   d94ba:	f7ff fff8 	bl	d94ae <_ZN5Print5printEc>
  n += print('\n');
   d94be:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d94c0:	4604      	mov	r4, r0
  n += print('\n');
   d94c2:	4628      	mov	r0, r5
   d94c4:	f7ff fff3 	bl	d94ae <_ZN5Print5printEc>
  return n;
}
   d94c8:	4420      	add	r0, r4
   d94ca:	bd38      	pop	{r3, r4, r5, pc}

000d94cc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d94cc:	b538      	push	{r3, r4, r5, lr}
   d94ce:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94d0:	f7ff ffd9 	bl	d9486 <_ZN5Print5writeEPKc>
   d94d4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d94d6:	4628      	mov	r0, r5
   d94d8:	f7ff ffec 	bl	d94b4 <_ZN5Print7printlnEv>
  return n;
}
   d94dc:	4420      	add	r0, r4
   d94de:	bd38      	pop	{r3, r4, r5, pc}

000d94e0 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d94e0:	b530      	push	{r4, r5, lr}
   d94e2:	b08b      	sub	sp, #44	; 0x2c
   d94e4:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d94e6:	2100      	movs	r1, #0
   d94e8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d94ec:	2a01      	cmp	r2, #1
   d94ee:	bf98      	it	ls
   d94f0:	220a      	movls	r2, #10
   d94f2:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d94f6:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d94fa:	fb05 3312 	mls	r3, r5, r2, r3
   d94fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9502:	2b09      	cmp	r3, #9
   d9504:	bf94      	ite	ls
   d9506:	3330      	addls	r3, #48	; 0x30
   d9508:	3337      	addhi	r3, #55	; 0x37
   d950a:	b2db      	uxtb	r3, r3
   d950c:	4621      	mov	r1, r4
   d950e:	f804 3901 	strb.w	r3, [r4], #-1
   d9512:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d9514:	2d00      	cmp	r5, #0
   d9516:	d1ee      	bne.n	d94f6 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d9518:	f7ff ffb5 	bl	d9486 <_ZN5Print5writeEPKc>
}
   d951c:	b00b      	add	sp, #44	; 0x2c
   d951e:	bd30      	pop	{r4, r5, pc}

000d9520 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d9520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9524:	ec57 6b10 	vmov	r6, r7, d0
   d9528:	4682      	mov	sl, r0
   d952a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d952c:	ee10 2a10 	vmov	r2, s0
   d9530:	463b      	mov	r3, r7
   d9532:	ee10 0a10 	vmov	r0, s0
   d9536:	4639      	mov	r1, r7
   d9538:	f001 fd0e 	bl	daf58 <__aeabi_dcmpun>
   d953c:	b108      	cbz	r0, d9542 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d953e:	494e      	ldr	r1, [pc, #312]	; (d9678 <_ZN5Print10printFloatEdh+0x158>)
   d9540:	e012      	b.n	d9568 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d9542:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d9546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d954a:	4b4c      	ldr	r3, [pc, #304]	; (d967c <_ZN5Print10printFloatEdh+0x15c>)
   d954c:	4630      	mov	r0, r6
   d954e:	4649      	mov	r1, r9
   d9550:	f001 fd02 	bl	daf58 <__aeabi_dcmpun>
   d9554:	b968      	cbnz	r0, d9572 <_ZN5Print10printFloatEdh+0x52>
   d9556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d955a:	4b48      	ldr	r3, [pc, #288]	; (d967c <_ZN5Print10printFloatEdh+0x15c>)
   d955c:	4630      	mov	r0, r6
   d955e:	4649      	mov	r1, r9
   d9560:	f001 fcdc 	bl	daf1c <__aeabi_dcmple>
   d9564:	b928      	cbnz	r0, d9572 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9566:	4946      	ldr	r1, [pc, #280]	; (d9680 <_ZN5Print10printFloatEdh+0x160>)
   d9568:	4650      	mov	r0, sl
   d956a:	f7ff ff8c 	bl	d9486 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d956e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d9572:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9576:	4b43      	ldr	r3, [pc, #268]	; (d9684 <_ZN5Print10printFloatEdh+0x164>)
   d9578:	4630      	mov	r0, r6
   d957a:	4639      	mov	r1, r7
   d957c:	f001 fce2 	bl	daf44 <__aeabi_dcmpgt>
   d9580:	b108      	cbz	r0, d9586 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9582:	4941      	ldr	r1, [pc, #260]	; (d9688 <_ZN5Print10printFloatEdh+0x168>)
   d9584:	e7f0      	b.n	d9568 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9586:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d958a:	4b40      	ldr	r3, [pc, #256]	; (d968c <_ZN5Print10printFloatEdh+0x16c>)
   d958c:	4630      	mov	r0, r6
   d958e:	4639      	mov	r1, r7
   d9590:	f001 fcba 	bl	daf08 <__aeabi_dcmplt>
   d9594:	2800      	cmp	r0, #0
   d9596:	d1f4      	bne.n	d9582 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d9598:	2200      	movs	r2, #0
   d959a:	2300      	movs	r3, #0
   d959c:	4630      	mov	r0, r6
   d959e:	4639      	mov	r1, r7
   d95a0:	f001 fcb2 	bl	daf08 <__aeabi_dcmplt>
   d95a4:	b140      	cbz	r0, d95b8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d95a6:	212d      	movs	r1, #45	; 0x2d
   d95a8:	4650      	mov	r0, sl
   d95aa:	f7ff ff80 	bl	d94ae <_ZN5Print5printEc>
     number = -number;
   d95ae:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d95b2:	4604      	mov	r4, r0
     number = -number;
   d95b4:	461f      	mov	r7, r3
   d95b6:	e000      	b.n	d95ba <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d95b8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d95ba:	4935      	ldr	r1, [pc, #212]	; (d9690 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d95bc:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d95c0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d95c2:	fa5f f388 	uxtb.w	r3, r8
   d95c6:	429d      	cmp	r5, r3
   d95c8:	d906      	bls.n	d95d8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d95ca:	2200      	movs	r2, #0
   d95cc:	4b31      	ldr	r3, [pc, #196]	; (d9694 <_ZN5Print10printFloatEdh+0x174>)
   d95ce:	f001 fb53 	bl	dac78 <__aeabi_ddiv>
   d95d2:	f108 0801 	add.w	r8, r8, #1
   d95d6:	e7f4      	b.n	d95c2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d95d8:	4632      	mov	r2, r6
   d95da:	463b      	mov	r3, r7
   d95dc:	f001 f870 	bl	da6c0 <__adddf3>
   d95e0:	460f      	mov	r7, r1
   d95e2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d95e4:	f001 fcf6 	bl	dafd4 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d95e8:	220a      	movs	r2, #10
   d95ea:	4601      	mov	r1, r0
   d95ec:	4680      	mov	r8, r0
   d95ee:	4650      	mov	r0, sl
   d95f0:	f7ff ff76 	bl	d94e0 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d95f4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d95f6:	b3e5      	cbz	r5, d9672 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d95f8:	4640      	mov	r0, r8
   d95fa:	f001 f99d 	bl	da938 <__aeabi_ui2d>
   d95fe:	4602      	mov	r2, r0
   d9600:	460b      	mov	r3, r1
   d9602:	4630      	mov	r0, r6
   d9604:	4639      	mov	r1, r7
   d9606:	f001 f859 	bl	da6bc <__aeabi_dsub>
   d960a:	4606      	mov	r6, r0
   d960c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d960e:	4650      	mov	r0, sl
   d9610:	4921      	ldr	r1, [pc, #132]	; (d9698 <_ZN5Print10printFloatEdh+0x178>)
   d9612:	f7ff ff38 	bl	d9486 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d9616:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d9618:	2200      	movs	r2, #0
   d961a:	4b1e      	ldr	r3, [pc, #120]	; (d9694 <_ZN5Print10printFloatEdh+0x174>)
   d961c:	4630      	mov	r0, r6
   d961e:	4639      	mov	r1, r7
   d9620:	f001 fa00 	bl	daa24 <__aeabi_dmul>
   d9624:	4606      	mov	r6, r0
   d9626:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d9628:	f001 fcac 	bl	daf84 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d962c:	f1b0 0900 	subs.w	r9, r0, #0
   d9630:	da07      	bge.n	d9642 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d9632:	212d      	movs	r1, #45	; 0x2d
   d9634:	4650      	mov	r0, sl
   d9636:	f7ff ff3a 	bl	d94ae <_ZN5Print5printEc>
            val = -n;
   d963a:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d963e:	4680      	mov	r8, r0
   d9640:	e002      	b.n	d9648 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d9642:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9644:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9648:	220a      	movs	r2, #10
   d964a:	4650      	mov	r0, sl
   d964c:	f7ff ff48 	bl	d94e0 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d9650:	4440      	add	r0, r8
   d9652:	4404      	add	r4, r0
    remainder -= toPrint;
   d9654:	4648      	mov	r0, r9
   d9656:	f001 f97f 	bl	da958 <__aeabi_i2d>
   d965a:	4602      	mov	r2, r0
   d965c:	460b      	mov	r3, r1
   d965e:	4630      	mov	r0, r6
   d9660:	4639      	mov	r1, r7
   d9662:	f001 f82b 	bl	da6bc <__aeabi_dsub>
   d9666:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9668:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d966c:	4606      	mov	r6, r0
   d966e:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9670:	d1d2      	bne.n	d9618 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d9672:	4620      	mov	r0, r4
   d9674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9678:	000ddb28 	.word	0x000ddb28
   d967c:	7fefffff 	.word	0x7fefffff
   d9680:	000ddb32 	.word	0x000ddb32
   d9684:	41efffff 	.word	0x41efffff
   d9688:	000ddb2c 	.word	0x000ddb2c
   d968c:	c1efffff 	.word	0xc1efffff
   d9690:	3fe00000 	.word	0x3fe00000
   d9694:	40240000 	.word	0x40240000
   d9698:	000ddb30 	.word	0x000ddb30

000d969c <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d969c:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d969e:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d96a0:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d96a2:	f7ff ff3d 	bl	d9520 <_ZN5Print10printFloatEdh>
   d96a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d96a8:	4628      	mov	r0, r5
   d96aa:	f7ff ff03 	bl	d94b4 <_ZN5Print7printlnEv>
  return n;
}
   d96ae:	4420      	add	r0, r4
   d96b0:	bd38      	pop	{r3, r4, r5, pc}

000d96b2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d96b2:	b40c      	push	{r2, r3}
   d96b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d96b8:	b087      	sub	sp, #28
   d96ba:	af00      	add	r7, sp, #0
   d96bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d96c0:	4605      	mov	r5, r0
   d96c2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d96c6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d96c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d96ca:	4623      	mov	r3, r4
   d96cc:	464a      	mov	r2, r9
   d96ce:	2114      	movs	r1, #20
   d96d0:	1d38      	adds	r0, r7, #4
   d96d2:	f7fe fecb 	bl	d846c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d96d6:	2813      	cmp	r0, #19
   d96d8:	d805      	bhi.n	d96e6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d96da:	1d39      	adds	r1, r7, #4
   d96dc:	4628      	mov	r0, r5
   d96de:	f7ff fed2 	bl	d9486 <_ZN5Print5writeEPKc>
   d96e2:	4604      	mov	r4, r0
   d96e4:	e013      	b.n	d970e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d96e6:	f100 0308 	add.w	r3, r0, #8
   d96ea:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d96ee:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d96f0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d96f4:	1c41      	adds	r1, r0, #1
   d96f6:	4623      	mov	r3, r4
   d96f8:	464a      	mov	r2, r9
   d96fa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d96fc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d96fe:	f7fe feb5 	bl	d846c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9702:	4669      	mov	r1, sp
   d9704:	4628      	mov	r0, r5
   d9706:	f7ff febe 	bl	d9486 <_ZN5Print5writeEPKc>
   d970a:	4604      	mov	r4, r0
   d970c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d970e:	b11e      	cbz	r6, d9718 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d9710:	4628      	mov	r0, r5
   d9712:	f7ff fecf 	bl	d94b4 <_ZN5Print7printlnEv>
   d9716:	4404      	add	r4, r0
    return n;
}
   d9718:	4620      	mov	r0, r4
   d971a:	371c      	adds	r7, #28
   d971c:	46bd      	mov	sp, r7
   d971e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9722:	b002      	add	sp, #8
   d9724:	4770      	bx	lr

000d9726 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9726:	b510      	push	{r4, lr}
   d9728:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d972a:	f7fc f923 	bl	d5974 <_ZNSt14_Function_baseD1Ev>
   d972e:	4620      	mov	r0, r4
   d9730:	bd10      	pop	{r4, pc}
	...

000d9734 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9734:	4803      	ldr	r0, [pc, #12]	; (d9744 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9736:	4a04      	ldr	r2, [pc, #16]	; (d9748 <_GLOBAL__sub_I_RGB+0x14>)
   d9738:	4904      	ldr	r1, [pc, #16]	; (d974c <_GLOBAL__sub_I_RGB+0x18>)
   d973a:	2300      	movs	r3, #0
   d973c:	6083      	str	r3, [r0, #8]
   d973e:	f000 be4d 	b.w	da3dc <__aeabi_atexit>
   d9742:	bf00      	nop
   d9744:	2003e45c 	.word	0x2003e45c
   d9748:	2003de88 	.word	0x2003de88
   d974c:	000d9727 	.word	0x000d9727

000d9750 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9750:	2100      	movs	r1, #0
   d9752:	f7fe bc93 	b.w	d807c <HAL_SPI_Acquire>

000d9756 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9756:	2100      	movs	r1, #0
   d9758:	f7fe bc98 	b.w	d808c <HAL_SPI_Release>

000d975c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d975c:	b510      	push	{r4, lr}
   d975e:	4604      	mov	r4, r0
{
    _spi = spi;
   d9760:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d9762:	4608      	mov	r0, r1
   d9764:	f7fe fc6a 	bl	d803c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9768:	2300      	movs	r3, #0
   d976a:	6063      	str	r3, [r4, #4]
}
   d976c:	4620      	mov	r0, r4
   d976e:	bd10      	pop	{r4, pc}

000d9770 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9770:	b538      	push	{r3, r4, r5, lr}
   d9772:	4604      	mov	r4, r0
    if (!lock())
   d9774:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9776:	460d      	mov	r5, r1
    if (!lock())
   d9778:	f7ff ffea 	bl	d9750 <_ZN8SPIClass4lockEv.isra.0>
   d977c:	b940      	cbnz	r0, d9790 <_ZN8SPIClass5beginEt+0x20>
    {
        HAL_SPI_Begin(_spi, ss_pin);
   d977e:	7820      	ldrb	r0, [r4, #0]
   d9780:	4629      	mov	r1, r5
   d9782:	f7fe fc4b 	bl	d801c <HAL_SPI_Begin>
        unlock();
   d9786:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::begin(uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
        unlock();
   d978c:	f7ff bfe3 	b.w	d9756 <_ZN8SPIClass6unlockEv.isra.1>
   d9790:	bd38      	pop	{r3, r4, r5, pc}

000d9792 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9792:	7800      	ldrb	r0, [r0, #0]
   d9794:	f7ff bfdf 	b.w	d9756 <_ZN8SPIClass6unlockEv.isra.1>

000d9798 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9798:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d979a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d979c:	6018      	str	r0, [r3, #0]
   d979e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d97a0:	6818      	ldr	r0, [r3, #0]
   d97a2:	4288      	cmp	r0, r1
   d97a4:	b2e5      	uxtb	r5, r4
   d97a6:	d906      	bls.n	d97b6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d97a8:	3401      	adds	r4, #1
   d97aa:	2c08      	cmp	r4, #8
   d97ac:	d002      	beq.n	d97b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d97ae:	0840      	lsrs	r0, r0, #1
   d97b0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d97b2:	e7f5      	b.n	d97a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d97b4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d97b6:	4b02      	ldr	r3, [pc, #8]	; (d97c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d97b8:	5d5b      	ldrb	r3, [r3, r5]
   d97ba:	7013      	strb	r3, [r2, #0]
   d97bc:	bd30      	pop	{r4, r5, pc}
   d97be:	bf00      	nop
   d97c0:	000ddb36 	.word	0x000ddb36

000d97c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d97c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d97c8:	4607      	mov	r7, r0
   d97ca:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d97cc:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d97ce:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d97d0:	f7ff ffbe 	bl	d9750 <_ZN8SPIClass4lockEv.isra.0>
   d97d4:	2800      	cmp	r0, #0
   d97d6:	db62      	blt.n	d989e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d97d8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d97da:	2214      	movs	r2, #20
   d97dc:	2100      	movs	r1, #0
   d97de:	a809      	add	r0, sp, #36	; 0x24
   d97e0:	f001 fe82 	bl	db4e8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d97e4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d97e6:	4620      	mov	r0, r4
   d97e8:	2200      	movs	r2, #0
   d97ea:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d97ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d97f0:	f7fe fc34 	bl	d805c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d97f4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d97f8:	b154      	cbz	r4, d9810 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d97fa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d97fe:	b935      	cbnz	r5, d980e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d9800:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9804:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9808:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d980c:	e003      	b.n	d9816 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d980e:	2400      	movs	r4, #0
   d9810:	46a1      	mov	r9, r4
   d9812:	46a0      	mov	r8, r4
   d9814:	2501      	movs	r5, #1
   d9816:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9818:	b105      	cbz	r5, d981c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d981a:	b9bb      	cbnz	r3, d984c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d981c:	429d      	cmp	r5, r3
   d981e:	d10b      	bne.n	d9838 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d9820:	68b2      	ldr	r2, [r6, #8]
   d9822:	4542      	cmp	r2, r8
   d9824:	d108      	bne.n	d9838 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9826:	f88d 9020 	strb.w	r9, [sp, #32]
   d982a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d982e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d9832:	89b2      	ldrh	r2, [r6, #12]
   d9834:	4291      	cmp	r1, r2
   d9836:	d009      	beq.n	d984c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d9838:	b153      	cbz	r3, d9850 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d983a:	2400      	movs	r4, #0
   d983c:	7838      	ldrb	r0, [r7, #0]
   d983e:	9401      	str	r4, [sp, #4]
   d9840:	9400      	str	r4, [sp, #0]
   d9842:	4623      	mov	r3, r4
   d9844:	4622      	mov	r2, r4
   d9846:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9848:	f7fe fc10 	bl	d806c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d984c:	2000      	movs	r0, #0
   d984e:	e026      	b.n	d989e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9850:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9854:	68b1      	ldr	r1, [r6, #8]
   d9856:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9858:	ab04      	add	r3, sp, #16
   d985a:	f10d 020f 	add.w	r2, sp, #15
   d985e:	f7ff ff9b 	bl	d9798 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9862:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9864:	b105      	cbz	r5, d9868 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9866:	b9b1      	cbnz	r1, d9896 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9868:	42a9      	cmp	r1, r5
   d986a:	d008      	beq.n	d987e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d986c:	2400      	movs	r4, #0
   d986e:	7838      	ldrb	r0, [r7, #0]
   d9870:	9401      	str	r4, [sp, #4]
   d9872:	7b74      	ldrb	r4, [r6, #13]
   d9874:	7b33      	ldrb	r3, [r6, #12]
   d9876:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d987a:	9400      	str	r4, [sp, #0]
   d987c:	e7e4      	b.n	d9848 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d987e:	68b3      	ldr	r3, [r6, #8]
   d9880:	4543      	cmp	r3, r8
   d9882:	d3f3      	bcc.n	d986c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9884:	f88d 9020 	strb.w	r9, [sp, #32]
   d9888:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d988c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9890:	89b3      	ldrh	r3, [r6, #12]
   d9892:	429a      	cmp	r2, r3
   d9894:	d1ea      	bne.n	d986c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9896:	9b04      	ldr	r3, [sp, #16]
   d9898:	4543      	cmp	r3, r8
   d989a:	d1e7      	bne.n	d986c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d989c:	e7d6      	b.n	d984c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d989e:	b00f      	add	sp, #60	; 0x3c
   d98a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d98a4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d98a4:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d98a6:	7800      	ldrb	r0, [r0, #0]
   d98a8:	f7fe fbc0 	bl	d802c <HAL_SPI_Send_Receive_Data>
}
   d98ac:	b2c0      	uxtb	r0, r0
   d98ae:	bd08      	pop	{r3, pc}

000d98b0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d98b0:	7800      	ldrb	r0, [r0, #0]
   d98b2:	f7fe bbcb 	b.w	d804c <HAL_SPI_Is_Enabled>

000d98b6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d98b6:	b510      	push	{r4, lr}
   d98b8:	4604      	mov	r4, r0
{
	free(buffer);
   d98ba:	6800      	ldr	r0, [r0, #0]
   d98bc:	f7fe fda6 	bl	d840c <free>
}
   d98c0:	4620      	mov	r0, r4
   d98c2:	bd10      	pop	{r4, pc}

000d98c4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d98c4:	b510      	push	{r4, lr}
   d98c6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d98c8:	6800      	ldr	r0, [r0, #0]
   d98ca:	b108      	cbz	r0, d98d0 <_ZN6String10invalidateEv+0xc>
   d98cc:	f7fe fd9e 	bl	d840c <free>
	buffer = NULL;
   d98d0:	2300      	movs	r3, #0
   d98d2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d98d4:	60a3      	str	r3, [r4, #8]
   d98d6:	6063      	str	r3, [r4, #4]
   d98d8:	bd10      	pop	{r4, pc}

000d98da <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d98da:	b538      	push	{r3, r4, r5, lr}
   d98dc:	4604      	mov	r4, r0
   d98de:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d98e0:	6800      	ldr	r0, [r0, #0]
   d98e2:	3101      	adds	r1, #1
   d98e4:	f7fe fd9a 	bl	d841c <realloc>
	if (newbuffer) {
   d98e8:	b110      	cbz	r0, d98f0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d98ea:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d98ee:	2001      	movs	r0, #1
	}
	return 0;
}
   d98f0:	bd38      	pop	{r3, r4, r5, pc}

000d98f2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d98f2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d98f4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d98f6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d98f8:	b113      	cbz	r3, d9900 <_ZN6String7reserveEj+0xe>
   d98fa:	6843      	ldr	r3, [r0, #4]
   d98fc:	428b      	cmp	r3, r1
   d98fe:	d207      	bcs.n	d9910 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d9900:	4620      	mov	r0, r4
   d9902:	f7ff ffea 	bl	d98da <_ZN6String12changeBufferEj>
   d9906:	b120      	cbz	r0, d9912 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d9908:	68a3      	ldr	r3, [r4, #8]
   d990a:	b90b      	cbnz	r3, d9910 <_ZN6String7reserveEj+0x1e>
   d990c:	6822      	ldr	r2, [r4, #0]
   d990e:	7013      	strb	r3, [r2, #0]
   d9910:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d9912:	bd10      	pop	{r4, pc}

000d9914 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9914:	b570      	push	{r4, r5, r6, lr}
   d9916:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d9918:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d991a:	4604      	mov	r4, r0
   d991c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d991e:	f7ff ffe8 	bl	d98f2 <_ZN6String7reserveEj>
   d9922:	b918      	cbnz	r0, d992c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9924:	4620      	mov	r0, r4
   d9926:	f7ff ffcd 	bl	d98c4 <_ZN6String10invalidateEv>
		return *this;
   d992a:	e009      	b.n	d9940 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d992c:	462a      	mov	r2, r5
   d992e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d9930:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d9932:	6820      	ldr	r0, [r4, #0]
   d9934:	f001 fdb2 	bl	db49c <memcpy>
	buffer[len] = 0;
   d9938:	6822      	ldr	r2, [r4, #0]
   d993a:	68a3      	ldr	r3, [r4, #8]
   d993c:	2100      	movs	r1, #0
   d993e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d9940:	4620      	mov	r0, r4
   d9942:	bd70      	pop	{r4, r5, r6, pc}

000d9944 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9944:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9946:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9948:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d994a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d994c:	6043      	str	r3, [r0, #4]
	len = 0;
   d994e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9950:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9952:	460d      	mov	r5, r1
   d9954:	b139      	cbz	r1, d9966 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9956:	4608      	mov	r0, r1
   d9958:	f002 fd86 	bl	dc468 <strlen>
   d995c:	4629      	mov	r1, r5
   d995e:	4602      	mov	r2, r0
   d9960:	4620      	mov	r0, r4
   d9962:	f7ff ffd7 	bl	d9914 <_ZN6String4copyEPKcj>
}
   d9966:	4620      	mov	r0, r4
   d9968:	bd38      	pop	{r3, r4, r5, pc}

000d996a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d996a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d996c:	b510      	push	{r4, lr}
   d996e:	460b      	mov	r3, r1
   d9970:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9972:	d007      	beq.n	d9984 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9974:	6809      	ldr	r1, [r1, #0]
   d9976:	b119      	cbz	r1, d9980 <_ZN6StringaSERKS_+0x16>
   d9978:	689a      	ldr	r2, [r3, #8]
   d997a:	f7ff ffcb 	bl	d9914 <_ZN6String4copyEPKcj>
   d997e:	e001      	b.n	d9984 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9980:	f7ff ffa0 	bl	d98c4 <_ZN6String10invalidateEv>

	return *this;
}
   d9984:	4620      	mov	r0, r4
   d9986:	bd10      	pop	{r4, pc}

000d9988 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9988:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d998a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d998c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d998e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9990:	6043      	str	r3, [r0, #4]
	len = 0;
   d9992:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9994:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9996:	f7ff ffe8 	bl	d996a <_ZN6StringaSERKS_>
}
   d999a:	4620      	mov	r0, r4
   d999c:	bd10      	pop	{r4, pc}

000d999e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d999e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d99a0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d99a2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d99a4:	b912      	cbnz	r2, d99ac <_ZNK6String6equalsEPKc+0xe>
   d99a6:	b919      	cbnz	r1, d99b0 <_ZNK6String6equalsEPKc+0x12>
   d99a8:	2001      	movs	r0, #1
   d99aa:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d99ac:	b911      	cbnz	r1, d99b4 <_ZNK6String6equalsEPKc+0x16>
   d99ae:	6803      	ldr	r3, [r0, #0]
   d99b0:	7818      	ldrb	r0, [r3, #0]
   d99b2:	e002      	b.n	d99ba <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d99b4:	6800      	ldr	r0, [r0, #0]
   d99b6:	f002 f815 	bl	db9e4 <strcmp>
   d99ba:	fab0 f080 	clz	r0, r0
   d99be:	0940      	lsrs	r0, r0, #5
}
   d99c0:	bd08      	pop	{r3, pc}

000d99c2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d99c2:	b570      	push	{r4, r5, r6, lr}
   d99c4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d99c6:	b19a      	cbz	r2, d99f0 <_ZNK6String8getBytesEPhjj+0x2e>
   d99c8:	b191      	cbz	r1, d99f0 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d99ca:	6885      	ldr	r5, [r0, #8]
   d99cc:	429d      	cmp	r5, r3
   d99ce:	d802      	bhi.n	d99d6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d99d0:	2300      	movs	r3, #0
   d99d2:	700b      	strb	r3, [r1, #0]
		return;
   d99d4:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d99d6:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d99d8:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d99da:	6801      	ldr	r1, [r0, #0]
   d99dc:	42ac      	cmp	r4, r5
   d99de:	bf28      	it	cs
   d99e0:	462c      	movcs	r4, r5
   d99e2:	4419      	add	r1, r3
   d99e4:	4622      	mov	r2, r4
   d99e6:	4630      	mov	r0, r6
   d99e8:	f002 fd5b 	bl	dc4a2 <strncpy>
	buf[n] = 0;
   d99ec:	2300      	movs	r3, #0
   d99ee:	5533      	strb	r3, [r6, r4]
   d99f0:	bd70      	pop	{r4, r5, r6, pc}

000d99f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d99f2:	b510      	push	{r4, lr}
   d99f4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d99f6:	6800      	ldr	r0, [r0, #0]
   d99f8:	b118      	cbz	r0, d9a02 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d99fa:	f7fe fd07 	bl	d840c <free>
            wakeupSource_ = nullptr;
   d99fe:	2300      	movs	r3, #0
   d9a00:	6023      	str	r3, [r4, #0]
   d9a02:	bd10      	pop	{r4, pc}

000d9a04 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9a04:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d9a06:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9a0a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d9a0c:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9a0e:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d9a10:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d9a14:	f8c0 2006 	str.w	r2, [r0, #6]
   d9a18:	889b      	ldrh	r3, [r3, #4]
   d9a1a:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9a1c:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d9a1e:	f7ff ffe8 	bl	d99f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d9a22:	682b      	ldr	r3, [r5, #0]
   d9a24:	b113      	cbz	r3, d9a2c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d9a26:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d9a28:	2300      	movs	r3, #0
   d9a2a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d9a2c:	4620      	mov	r0, r4
   d9a2e:	bd38      	pop	{r3, r4, r5, pc}

000d9a30 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d9a30:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d9a34:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d9a36:	b90b      	cbnz	r3, d9a3c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d9a38:	680a      	ldr	r2, [r1, #0]
   d9a3a:	b19a      	cbz	r2, d9a64 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d9a3c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d9a3e:	b15c      	cbz	r4, d9a58 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d9a40:	88a2      	ldrh	r2, [r4, #4]
   d9a42:	2a01      	cmp	r2, #1
   d9a44:	d003      	beq.n	d9a4e <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d9a46:	2a04      	cmp	r2, #4
   d9a48:	d106      	bne.n	d9a58 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d9a4a:	2202      	movs	r2, #2
   d9a4c:	e005      	b.n	d9a5a <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d9a4e:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d9a50:	814c      	strh	r4, [r1, #10]
   d9a52:	718a      	strb	r2, [r1, #6]
   d9a54:	810b      	strh	r3, [r1, #8]
                    break;
   d9a56:	e005      	b.n	d9a64 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d9a58:	2204      	movs	r2, #4
   d9a5a:	810b      	strh	r3, [r1, #8]
   d9a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9a60:	718a      	strb	r2, [r1, #6]
   d9a62:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d9a64:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d9a68:	6003      	str	r3, [r0, #0]
   d9a6a:	888b      	ldrh	r3, [r1, #4]
   d9a6c:	8083      	strh	r3, [r0, #4]
    }
   d9a6e:	bd10      	pop	{r4, pc}

000d9a70 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9a70:	4601      	mov	r1, r0
   d9a72:	2200      	movs	r2, #0
   d9a74:	208c      	movs	r0, #140	; 0x8c
   d9a76:	f7fe b9a9 	b.w	d7dcc <HAL_Core_System_Reset_Ex>

000d9a7a <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9a7a:	2000      	movs	r0, #0
   d9a7c:	f7ff bff8 	b.w	d9a70 <_ZN11SystemClass5resetEm>

000d9a80 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9a80:	b530      	push	{r4, r5, lr}
   d9a82:	4604      	mov	r4, r0
   d9a84:	b085      	sub	sp, #20
   d9a86:	4608      	mov	r0, r1
   d9a88:	4611      	mov	r1, r2
   d9a8a:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9a8c:	2300      	movs	r3, #0
   d9a8e:	f7fe fbaf 	bl	d81f0 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d9a92:	4d0d      	ldr	r5, [pc, #52]	; (d9ac8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d9a94:	f8ad 000c 	strh.w	r0, [sp, #12]
   d9a98:	2300      	movs	r3, #0
   d9a9a:	a901      	add	r1, sp, #4
   d9a9c:	9301      	str	r3, [sp, #4]
   d9a9e:	f8ad 3008 	strh.w	r3, [sp, #8]
   d9aa2:	f88d 300a 	strb.w	r3, [sp, #10]
   d9aa6:	4628      	mov	r0, r5
   d9aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9aac:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9ab0:	f7ff ffa8 	bl	d9a04 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9ab4:	a801      	add	r0, sp, #4
   d9ab6:	f7ff ff9c 	bl	d99f2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d9aba:	4620      	mov	r0, r4
   d9abc:	4629      	mov	r1, r5
   d9abe:	f7ff ffb7 	bl	d9a30 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d9ac2:	4620      	mov	r0, r4
   d9ac4:	b005      	add	sp, #20
   d9ac6:	bd30      	pop	{r4, r5, pc}
   d9ac8:	2003e46c 	.word	0x2003e46c

000d9acc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9acc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9ace:	4c09      	ldr	r4, [pc, #36]	; (d9af4 <_GLOBAL__sub_I_System+0x28>)
   d9ad0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9ad6:	6020      	str	r0, [r4, #0]
   d9ad8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9ada:	71a0      	strb	r0, [r4, #6]
   d9adc:	8120      	strh	r0, [r4, #8]
   d9ade:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9ae0:	f7fe fb76 	bl	d81d0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9ae4:	4620      	mov	r0, r4
   d9ae6:	4a04      	ldr	r2, [pc, #16]	; (d9af8 <_GLOBAL__sub_I_System+0x2c>)
   d9ae8:	4904      	ldr	r1, [pc, #16]	; (d9afc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9aee:	f000 bc75 	b.w	da3dc <__aeabi_atexit>
   d9af2:	bf00      	nop
   d9af4:	2003e46c 	.word	0x2003e46c
   d9af8:	2003de88 	.word	0x2003de88
   d9afc:	000d41a9 	.word	0x000d41a9

000d9b00 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d9b02:	4b14      	ldr	r3, [pc, #80]	; (d9b54 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9b04:	4f14      	ldr	r7, [pc, #80]	; (d9b58 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9b06:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d9b08:	4b14      	ldr	r3, [pc, #80]	; (d9b5c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d9b0a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9b0c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9b0e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9b10:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9b12:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9b14:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9b16:	d01b      	beq.n	d9b50 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d9b18:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d9b1a:	ad01      	add	r5, sp, #4
   d9b1c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9b20:	f001 fbc4 	bl	db2ac <localtime>
	calendar_time->tm_year += 1900;
   d9b24:	6943      	ldr	r3, [r0, #20]
   d9b26:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9b2a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9b2c:	4604      	mov	r4, r0
   d9b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9b36:	f8d4 e000 	ldr.w	lr, [r4]
   d9b3a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b3e:	ad01      	add	r5, sp, #4
   d9b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b42:	4c07      	ldr	r4, [pc, #28]	; (d9b60 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9b4a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b4c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9b50:	b00b      	add	sp, #44	; 0x2c
   d9b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9b54:	2003e4a8 	.word	0x2003e4a8
   d9b58:	2003e4a4 	.word	0x2003e4a4
   d9b5c:	2003e4a0 	.word	0x2003e4a0
   d9b60:	2003e478 	.word	0x2003e478

000d9b64 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d9b64:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9b66:	2000      	movs	r0, #0
   d9b68:	f7fe fbe0 	bl	d832c <spark_sync_time_pending>
   d9b6c:	b128      	cbz	r0, d9b7a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9b6e:	f7fe fbb5 	bl	d82dc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9b72:	f080 0001 	eor.w	r0, r0, #1
   d9b76:	b2c0      	uxtb	r0, r0
   d9b78:	bd08      	pop	{r3, pc}
   d9b7a:	2001      	movs	r0, #1
    }
   d9b7c:	bd08      	pop	{r3, pc}
	...

000d9b80 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d9b80:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9b82:	f7ff ffbd 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9b86:	4b02      	ldr	r3, [pc, #8]	; (d9b90 <_ZN9TimeClass7weekdayEl+0x10>)
   d9b88:	6998      	ldr	r0, [r3, #24]
}
   d9b8a:	3001      	adds	r0, #1
   d9b8c:	bd08      	pop	{r3, pc}
   d9b8e:	bf00      	nop
   d9b90:	2003e478 	.word	0x2003e478

000d9b94 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9b94:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9b96:	f7ff ffb3 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9b9a:	4b02      	ldr	r3, [pc, #8]	; (d9ba4 <_ZN9TimeClass5monthEl+0x10>)
   d9b9c:	6918      	ldr	r0, [r3, #16]
}
   d9b9e:	3001      	adds	r0, #1
   d9ba0:	bd08      	pop	{r3, pc}
   d9ba2:	bf00      	nop
   d9ba4:	2003e478 	.word	0x2003e478

000d9ba8 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d9ba8:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d9baa:	f7fe f93f 	bl	d7e2c <HAL_RTC_Get_UnixTime>
   d9bae:	4b03      	ldr	r3, [pc, #12]	; (d9bbc <_ZN9TimeClass5localEv+0x14>)
   d9bb0:	681b      	ldr	r3, [r3, #0]
   d9bb2:	4418      	add	r0, r3
   d9bb4:	4b02      	ldr	r3, [pc, #8]	; (d9bc0 <_ZN9TimeClass5localEv+0x18>)
   d9bb6:	681b      	ldr	r3, [r3, #0]
}
   d9bb8:	4418      	add	r0, r3
   d9bba:	bd08      	pop	{r3, pc}
   d9bbc:	2003e4a8 	.word	0x2003e4a8
   d9bc0:	2003e4a0 	.word	0x2003e4a0

000d9bc4 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9bc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9bc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9bd0:	d40f      	bmi.n	d9bf2 <_ZN9TimeClass4zoneEf+0x2e>
   d9bd2:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9bd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9bde:	dc08      	bgt.n	d9bf2 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9be0:	eddf 7a04 	vldr	s15, [pc, #16]	; d9bf4 <_ZN9TimeClass4zoneEf+0x30>
   d9be4:	4b04      	ldr	r3, [pc, #16]	; (d9bf8 <_ZN9TimeClass4zoneEf+0x34>)
   d9be6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9bea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9bee:	ed83 0a00 	vstr	s0, [r3]
   d9bf2:	4770      	bx	lr
   d9bf4:	45610000 	.word	0x45610000
   d9bf8:	2003e4a8 	.word	0x2003e4a8

000d9bfc <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c04:	d40f      	bmi.n	d9c26 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d9c06:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9c0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c12:	dc08      	bgt.n	d9c26 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9c14:	eddf 7a04 	vldr	s15, [pc, #16]	; d9c28 <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d9c18:	4b04      	ldr	r3, [pc, #16]	; (d9c2c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d9c1a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9c1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9c22:	ed83 0a00 	vstr	s0, [r3]
   d9c26:	4770      	bx	lr
   d9c28:	45610000 	.word	0x45610000
   d9c2c:	2003ddcc 	.word	0x2003ddcc

000d9c30 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9c30:	4b02      	ldr	r3, [pc, #8]	; (d9c3c <_ZN9TimeClass8beginDSTEv+0xc>)
   d9c32:	681a      	ldr	r2, [r3, #0]
   d9c34:	4b02      	ldr	r3, [pc, #8]	; (d9c40 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9c36:	601a      	str	r2, [r3, #0]
   d9c38:	4770      	bx	lr
   d9c3a:	bf00      	nop
   d9c3c:	2003ddcc 	.word	0x2003ddcc
   d9c40:	2003e4a0 	.word	0x2003e4a0

000d9c44 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9c44:	4b01      	ldr	r3, [pc, #4]	; (d9c4c <_ZN9TimeClass6endDSTEv+0x8>)
   d9c46:	2200      	movs	r2, #0
   d9c48:	601a      	str	r2, [r3, #0]
   d9c4a:	4770      	bx	lr
   d9c4c:	2003e4a0 	.word	0x2003e4a0

000d9c50 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9c50:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d9c52:	f7fe f8f3 	bl	d7e3c <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9c56:	2200      	movs	r2, #0
   d9c58:	4611      	mov	r1, r2
   d9c5a:	4610      	mov	r0, r2
}
   d9c5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9c60:	f7fe baee 	b.w	d8240 <system_notify_time_changed>

000d9c64 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d9c66:	4b0e      	ldr	r3, [pc, #56]	; (d9ca0 <_ZN9TimeClass7timeStrEl+0x3c>)
   d9c68:	681b      	ldr	r3, [r3, #0]
   d9c6a:	4419      	add	r1, r3
   d9c6c:	4b0d      	ldr	r3, [pc, #52]	; (d9ca4 <_ZN9TimeClass7timeStrEl+0x40>)
   d9c6e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9c70:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d9c72:	a802      	add	r0, sp, #8
   d9c74:	4419      	add	r1, r3
   d9c76:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9c7a:	f001 fb17 	bl	db2ac <localtime>
        char* ascstr = asctime(calendar_time);
   d9c7e:	f001 fa19 	bl	db0b4 <asctime>
   d9c82:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9c84:	f002 fbf0 	bl	dc468 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9c88:	4428      	add	r0, r5
   d9c8a:	2300      	movs	r3, #0
   d9c8c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d9c90:	4629      	mov	r1, r5
   d9c92:	4620      	mov	r0, r4
   d9c94:	f7ff fe56 	bl	d9944 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9c98:	4620      	mov	r0, r4
   d9c9a:	b003      	add	sp, #12
   d9c9c:	bd30      	pop	{r4, r5, pc}
   d9c9e:	bf00      	nop
   d9ca0:	2003e4a8 	.word	0x2003e4a8
   d9ca4:	2003e4a0 	.word	0x2003e4a0

000d9ca8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9cac:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9cae:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9cb0:	4607      	mov	r7, r0
   d9cb2:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9cb4:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9cb6:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9cb8:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9cba:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9cbc:	f002 fbf1 	bl	dc4a2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9cc0:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9cc2:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9cc4:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9cc8:	f002 fbce 	bl	dc468 <strlen>
   d9ccc:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9cce:	b925      	cbnz	r5, d9cda <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d9cd0:	4924      	ldr	r1, [pc, #144]	; (d9d64 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d9cd2:	a803      	add	r0, sp, #12
   d9cd4:	f001 fe90 	bl	db9f8 <strcpy>
   d9cd8:	e013      	b.n	d9d02 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9cda:	213c      	movs	r1, #60	; 0x3c
   d9cdc:	fb95 f2f1 	sdiv	r2, r5, r1
   d9ce0:	2a00      	cmp	r2, #0
   d9ce2:	bfb8      	it	lt
   d9ce4:	4252      	neglt	r2, r2
   d9ce6:	fb92 f3f1 	sdiv	r3, r2, r1
   d9cea:	fb01 2213 	mls	r2, r1, r3, r2
   d9cee:	9200      	str	r2, [sp, #0]
   d9cf0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9cf4:	4a1c      	ldr	r2, [pc, #112]	; (d9d68 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d9cf6:	fb95 f3f3 	sdiv	r3, r5, r3
   d9cfa:	2110      	movs	r1, #16
   d9cfc:	a803      	add	r0, sp, #12
   d9cfe:	f7fe fba5 	bl	d844c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9d02:	4625      	mov	r5, r4
   d9d04:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9d06:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d9d0a:	45b2      	cmp	sl, r6
   d9d0c:	d91b      	bls.n	d9d46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9d0e:	782b      	ldrb	r3, [r5, #0]
   d9d10:	2b25      	cmp	r3, #37	; 0x25
   d9d12:	d116      	bne.n	d9d42 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9d14:	786b      	ldrb	r3, [r5, #1]
   d9d16:	2b7a      	cmp	r3, #122	; 0x7a
   d9d18:	d113      	bne.n	d9d42 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d9d1a:	a803      	add	r0, sp, #12
   d9d1c:	f002 fba4 	bl	dc468 <strlen>
   d9d20:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9d22:	4430      	add	r0, r6
   d9d24:	ebc6 020a 	rsb	r2, r6, sl
   d9d28:	1ca9      	adds	r1, r5, #2
   d9d2a:	4420      	add	r0, r4
   d9d2c:	f001 fbb6 	bl	db49c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9d30:	4642      	mov	r2, r8
   d9d32:	a903      	add	r1, sp, #12
   d9d34:	4628      	mov	r0, r5
   d9d36:	f001 fbb1 	bl	db49c <memcpy>
            len = strlen(format_str);
   d9d3a:	4620      	mov	r0, r4
   d9d3c:	f002 fb94 	bl	dc468 <strlen>
   d9d40:	4680      	mov	r8, r0
   d9d42:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9d44:	e7de      	b.n	d9d04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d9d46:	464b      	mov	r3, r9
   d9d48:	4622      	mov	r2, r4
   d9d4a:	2132      	movs	r1, #50	; 0x32
   d9d4c:	a807      	add	r0, sp, #28
   d9d4e:	f001 fed7 	bl	dbb00 <strftime>
    return String(buf);
   d9d52:	a907      	add	r1, sp, #28
   d9d54:	4638      	mov	r0, r7
   d9d56:	f7ff fdf5 	bl	d9944 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9d5a:	4638      	mov	r0, r7
   d9d5c:	b024      	add	sp, #144	; 0x90
   d9d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d62:	bf00      	nop
   d9d64:	000de0c9 	.word	0x000de0c9
   d9d68:	000ddb3e 	.word	0x000ddb3e

000d9d6c <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9d6e:	4605      	mov	r5, r0
   d9d70:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9d72:	461c      	mov	r4, r3
   d9d74:	b913      	cbnz	r3, d9d7c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d9d76:	4b12      	ldr	r3, [pc, #72]	; (d9dc0 <_ZN9TimeClass6formatElPKc+0x54>)
   d9d78:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d9d7a:	b12c      	cbz	r4, d9d88 <_ZN9TimeClass6formatElPKc+0x1c>
   d9d7c:	4b11      	ldr	r3, [pc, #68]	; (d9dc4 <_ZN9TimeClass6formatElPKc+0x58>)
   d9d7e:	4620      	mov	r0, r4
   d9d80:	6819      	ldr	r1, [r3, #0]
   d9d82:	f001 fe2f 	bl	db9e4 <strcmp>
   d9d86:	b920      	cbnz	r0, d9d92 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d9d88:	9901      	ldr	r1, [sp, #4]
   d9d8a:	4628      	mov	r0, r5
   d9d8c:	f7ff ff6a 	bl	d9c64 <_ZN9TimeClass7timeStrEl>
   d9d90:	e013      	b.n	d9dba <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9d92:	4f0d      	ldr	r7, [pc, #52]	; (d9dc8 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9d94:	9a01      	ldr	r2, [sp, #4]
   d9d96:	683b      	ldr	r3, [r7, #0]
   d9d98:	4e0c      	ldr	r6, [pc, #48]	; (d9dcc <_ZN9TimeClass6formatElPKc+0x60>)
   d9d9a:	441a      	add	r2, r3
   d9d9c:	6833      	ldr	r3, [r6, #0]
   d9d9e:	a802      	add	r0, sp, #8
   d9da0:	4413      	add	r3, r2
   d9da2:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d9da6:	f001 fa81 	bl	db2ac <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9daa:	683a      	ldr	r2, [r7, #0]
   d9dac:	6833      	ldr	r3, [r6, #0]
   d9dae:	4601      	mov	r1, r0
   d9db0:	4413      	add	r3, r2
   d9db2:	4628      	mov	r0, r5
   d9db4:	4622      	mov	r2, r4
   d9db6:	f7ff ff77 	bl	d9ca8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d9dba:	4628      	mov	r0, r5
   d9dbc:	b003      	add	sp, #12
   d9dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9dc0:	2003e49c 	.word	0x2003e49c
   d9dc4:	2003ddd0 	.word	0x2003ddd0
   d9dc8:	2003e4a8 	.word	0x2003e4a8
   d9dcc:	2003e4a0 	.word	0x2003e4a0

000d9dd0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9dd0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9dd2:	2000      	movs	r0, #0
   d9dd4:	f7fe f84a 	bl	d7e6c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9dd8:	4604      	mov	r4, r0
   d9dda:	b968      	cbnz	r0, d9df8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9ddc:	f7fe f9f0 	bl	d81c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9de0:	2801      	cmp	r0, #1
   d9de2:	d10b      	bne.n	d9dfc <_ZN9TimeClass7isValidEv+0x2c>
   d9de4:	4620      	mov	r0, r4
   d9de6:	f7fe fa23 	bl	d8230 <system_thread_get_state>
   d9dea:	b938      	cbnz	r0, d9dfc <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9dec:	f7ff feba 	bl	d9b64 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9df0:	b930      	cbnz	r0, d9e00 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9df2:	f7fe fa5b 	bl	d82ac <spark_process>
   d9df6:	e7f9      	b.n	d9dec <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9df8:	2001      	movs	r0, #1
   d9dfa:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9dfc:	2000      	movs	r0, #0
   d9dfe:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9e00:	f7ff feb0 	bl	d9b64 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9e04:	2000      	movs	r0, #0
   d9e06:	f7fe f831 	bl	d7e6c <HAL_RTC_Time_Is_Valid>
   d9e0a:	3000      	adds	r0, #0
   d9e0c:	bf18      	it	ne
   d9e0e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9e10:	bd10      	pop	{r4, pc}

000d9e12 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9e12:	b508      	push	{r3, lr}
    (void)isValid();
   d9e14:	f7ff ffdc 	bl	d9dd0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9e1c:	f7fe b806 	b.w	d7e2c <HAL_RTC_Get_UnixTime>

000d9e20 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9e20:	b508      	push	{r3, lr}
	return hour(now());
   d9e22:	f7ff fff6 	bl	d9e12 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9e26:	f7ff fe6b 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9e2a:	4b01      	ldr	r3, [pc, #4]	; (d9e30 <_ZN9TimeClass4hourEv+0x10>)
   d9e2c:	6898      	ldr	r0, [r3, #8]
   d9e2e:	bd08      	pop	{r3, pc}
   d9e30:	2003e478 	.word	0x2003e478

000d9e34 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9e34:	b508      	push	{r3, lr}
	return minute(now());
   d9e36:	f7ff ffec 	bl	d9e12 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9e3a:	f7ff fe61 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9e3e:	4b01      	ldr	r3, [pc, #4]	; (d9e44 <_ZN9TimeClass6minuteEv+0x10>)
   d9e40:	6858      	ldr	r0, [r3, #4]
   d9e42:	bd08      	pop	{r3, pc}
   d9e44:	2003e478 	.word	0x2003e478

000d9e48 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9e48:	b508      	push	{r3, lr}
	return day(now());
   d9e4a:	f7ff ffe2 	bl	d9e12 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9e4e:	f7ff fe57 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9e52:	4b01      	ldr	r3, [pc, #4]	; (d9e58 <_ZN9TimeClass3dayEv+0x10>)
   d9e54:	68d8      	ldr	r0, [r3, #12]
   d9e56:	bd08      	pop	{r3, pc}
   d9e58:	2003e478 	.word	0x2003e478

000d9e5c <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d9e5c:	b508      	push	{r3, lr}
	return weekday(now());
   d9e5e:	f7ff ffd8 	bl	d9e12 <_ZN9TimeClass3nowEv>
}
   d9e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d9e66:	f7ff be8b 	b.w	d9b80 <_ZN9TimeClass7weekdayEl>

000d9e6a <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9e6a:	b508      	push	{r3, lr}
	return month(now());
   d9e6c:	f7ff ffd1 	bl	d9e12 <_ZN9TimeClass3nowEv>
}
   d9e70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9e74:	f7ff be8e 	b.w	d9b94 <_ZN9TimeClass5monthEl>

000d9e78 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9e78:	b508      	push	{r3, lr}
	return year(now());
   d9e7a:	f7ff ffca 	bl	d9e12 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9e7e:	f7ff fe3f 	bl	d9b00 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9e82:	4b01      	ldr	r3, [pc, #4]	; (d9e88 <_ZN9TimeClass4yearEv+0x10>)
   d9e84:	6958      	ldr	r0, [r3, #20]
   d9e86:	bd08      	pop	{r3, pc}
   d9e88:	2003e478 	.word	0x2003e478

000d9e8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9e8c:	4b02      	ldr	r3, [pc, #8]	; (d9e98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9e8e:	681a      	ldr	r2, [r3, #0]
   d9e90:	4b02      	ldr	r3, [pc, #8]	; (d9e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9e92:	601a      	str	r2, [r3, #0]
   d9e94:	4770      	bx	lr
   d9e96:	bf00      	nop
   d9e98:	2003ddd0 	.word	0x2003ddd0
   d9e9c:	2003e49c 	.word	0x2003e49c

000d9ea0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9ea0:	4770      	bx	lr

000d9ea2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ea2:	7441      	strb	r1, [r0, #17]
   d9ea4:	4770      	bx	lr

000d9ea6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9ea6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9ea8:	7c00      	ldrb	r0, [r0, #16]
   d9eaa:	f7fe f92f 	bl	d810c <HAL_USART_Available_Data_For_Write>
}
   d9eae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9eb2:	bd08      	pop	{r3, pc}

000d9eb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9eb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9eb6:	7c00      	ldrb	r0, [r0, #16]
   d9eb8:	f7fe f900 	bl	d80bc <HAL_USART_Available_Data>
}
   d9ebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ec0:	bd08      	pop	{r3, pc}

000d9ec2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9ec2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9ec4:	7c00      	ldrb	r0, [r0, #16]
   d9ec6:	f7fe f909 	bl	d80dc <HAL_USART_Peek_Data>
}
   d9eca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9ece:	bf28      	it	cs
   d9ed0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9ed4:	bd08      	pop	{r3, pc}

000d9ed6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9ed6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9ed8:	7c00      	ldrb	r0, [r0, #16]
   d9eda:	f7fe f8f7 	bl	d80cc <HAL_USART_Read_Data>
}
   d9ede:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9ee2:	bf28      	it	cs
   d9ee4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9ee8:	bd08      	pop	{r3, pc}

000d9eea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9eea:	7c00      	ldrb	r0, [r0, #16]
   d9eec:	f7fe b8fe 	b.w	d80ec <HAL_USART_Flush_Data>

000d9ef0 <_ZN11USARTSerialD0Ev>:
   d9ef0:	b510      	push	{r4, lr}
   d9ef2:	2114      	movs	r1, #20
   d9ef4:	4604      	mov	r4, r0
   d9ef6:	f000 fa76 	bl	da3e6 <_ZdlPvj>
   d9efa:	4620      	mov	r0, r4
   d9efc:	bd10      	pop	{r4, pc}

000d9efe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9efe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9f02:	4604      	mov	r4, r0
   d9f04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f06:	b925      	cbnz	r5, d9f12 <_ZN11USARTSerial5writeEh+0x14>
   d9f08:	7c00      	ldrb	r0, [r0, #16]
   d9f0a:	f7fe f8ff 	bl	d810c <HAL_USART_Available_Data_For_Write>
   d9f0e:	2800      	cmp	r0, #0
   d9f10:	dd05      	ble.n	d9f1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f12:	4631      	mov	r1, r6
   d9f14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f1a:	f7fe b8c7 	b.w	d80ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d9f1e:	4628      	mov	r0, r5
   d9f20:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9f24:	b510      	push	{r4, lr}
   d9f26:	4604      	mov	r4, r0
   d9f28:	4608      	mov	r0, r1
   d9f2a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9f2c:	2200      	movs	r2, #0
   d9f2e:	6062      	str	r2, [r4, #4]
   d9f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9f34:	60a2      	str	r2, [r4, #8]
   d9f36:	4a05      	ldr	r2, [pc, #20]	; (d9f4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9f38:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9f3a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9f3c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9f3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9f40:	461a      	mov	r2, r3
   d9f42:	f7fe f8ab 	bl	d809c <HAL_USART_Init>
}
   d9f46:	4620      	mov	r0, r4
   d9f48:	bd10      	pop	{r4, pc}
   d9f4a:	bf00      	nop
   d9f4c:	000ddb70 	.word	0x000ddb70

000d9f50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9f50:	7c00      	ldrb	r0, [r0, #16]
   d9f52:	f7fe b8d3 	b.w	d80fc <HAL_USART_Is_Enabled>
	...

000d9f58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9f58:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9f5a:	4d0c      	ldr	r5, [pc, #48]	; (d9f8c <_Z22__fetch_global_Serial1v+0x34>)
   d9f5c:	6829      	ldr	r1, [r5, #0]
   d9f5e:	f011 0401 	ands.w	r4, r1, #1
   d9f62:	d111      	bne.n	d9f88 <_Z22__fetch_global_Serial1v+0x30>
   d9f64:	4628      	mov	r0, r5
   d9f66:	f7fa f8a9 	bl	d40bc <__cxa_guard_acquire>
   d9f6a:	b168      	cbz	r0, d9f88 <_Z22__fetch_global_Serial1v+0x30>
   d9f6c:	4a08      	ldr	r2, [pc, #32]	; (d9f90 <_Z22__fetch_global_Serial1v+0x38>)
   d9f6e:	4b09      	ldr	r3, [pc, #36]	; (d9f94 <_Z22__fetch_global_Serial1v+0x3c>)
   d9f70:	4809      	ldr	r0, [pc, #36]	; (d9f98 <_Z22__fetch_global_Serial1v+0x40>)
   d9f72:	4621      	mov	r1, r4
   d9f74:	f7ff ffd6 	bl	d9f24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9f78:	4628      	mov	r0, r5
   d9f7a:	f7fa f8a4 	bl	d40c6 <__cxa_guard_release>
   d9f7e:	4a07      	ldr	r2, [pc, #28]	; (d9f9c <_Z22__fetch_global_Serial1v+0x44>)
   d9f80:	4907      	ldr	r1, [pc, #28]	; (d9fa0 <_Z22__fetch_global_Serial1v+0x48>)
   d9f82:	4805      	ldr	r0, [pc, #20]	; (d9f98 <_Z22__fetch_global_Serial1v+0x40>)
   d9f84:	f000 fa2a 	bl	da3dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9f88:	4803      	ldr	r0, [pc, #12]	; (d9f98 <_Z22__fetch_global_Serial1v+0x40>)
   d9f8a:	bd38      	pop	{r3, r4, r5, pc}
   d9f8c:	2003e548 	.word	0x2003e548
   d9f90:	2003e54c 	.word	0x2003e54c
   d9f94:	2003e4c4 	.word	0x2003e4c4
   d9f98:	2003e4b0 	.word	0x2003e4b0
   d9f9c:	2003de88 	.word	0x2003de88
   d9fa0:	000d9ea1 	.word	0x000d9ea1

000d9fa4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9fa4:	7441      	strb	r1, [r0, #17]
   d9fa6:	4770      	bx	lr

000d9fa8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9fa8:	4770      	bx	lr

000d9faa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9faa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9fac:	2100      	movs	r1, #0
   d9fae:	7c00      	ldrb	r0, [r0, #16]
   d9fb0:	f7fe f8d4 	bl	d815c <HAL_USB_USART_Receive_Data>
}
   d9fb4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9fb8:	bf28      	it	cs
   d9fba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9fbe:	bd08      	pop	{r3, pc}

000d9fc0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9fc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9fc2:	2101      	movs	r1, #1
   d9fc4:	7c00      	ldrb	r0, [r0, #16]
   d9fc6:	f7fe f8c9 	bl	d815c <HAL_USB_USART_Receive_Data>
}
   d9fca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9fce:	bf28      	it	cs
   d9fd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9fd4:	bd08      	pop	{r3, pc}

000d9fd6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9fd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9fd8:	7c00      	ldrb	r0, [r0, #16]
   d9fda:	f7fe f8b7 	bl	d814c <HAL_USB_USART_Available_Data_For_Write>
}
   d9fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9fe2:	bd08      	pop	{r3, pc}

000d9fe4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9fe4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9fe6:	7c00      	ldrb	r0, [r0, #16]
   d9fe8:	f7fe f8a8 	bl	d813c <HAL_USB_USART_Available_Data>
}
   d9fec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ff0:	bd08      	pop	{r3, pc}

000d9ff2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9ff2:	7c00      	ldrb	r0, [r0, #16]
   d9ff4:	f7fe b8c2 	b.w	d817c <HAL_USB_USART_Flush_Data>

000d9ff8 <_ZN9USBSerialD0Ev>:
   d9ff8:	b510      	push	{r4, lr}
   d9ffa:	2114      	movs	r1, #20
   d9ffc:	4604      	mov	r4, r0
   d9ffe:	f000 f9f2 	bl	da3e6 <_ZdlPvj>
   da002:	4620      	mov	r0, r4
   da004:	bd10      	pop	{r4, pc}

000da006 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   da006:	b538      	push	{r3, r4, r5, lr}
   da008:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da00a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   da00c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da00e:	f7fe f89d 	bl	d814c <HAL_USB_USART_Available_Data_For_Write>
   da012:	2800      	cmp	r0, #0
   da014:	dc01      	bgt.n	da01a <_ZN9USBSerial5writeEh+0x14>
   da016:	7c60      	ldrb	r0, [r4, #17]
   da018:	b128      	cbz	r0, da026 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da01a:	4629      	mov	r1, r5
   da01c:	7c20      	ldrb	r0, [r4, #16]
   da01e:	f7fe f8a5 	bl	d816c <HAL_USB_USART_Send_Data>
   da022:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   da026:	bd38      	pop	{r3, r4, r5, pc}

000da028 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da028:	b510      	push	{r4, lr}
   da02a:	4604      	mov	r4, r0
   da02c:	2300      	movs	r3, #0
   da02e:	6063      	str	r3, [r4, #4]
   da030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da034:	60a3      	str	r3, [r4, #8]
   da036:	4b05      	ldr	r3, [pc, #20]	; (da04c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da038:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   da03a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da03c:	4608      	mov	r0, r1
{
  _serial = serial;
   da03e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   da040:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   da042:	4611      	mov	r1, r2
   da044:	f7fe f86a 	bl	d811c <HAL_USB_USART_Init>
}
   da048:	4620      	mov	r0, r4
   da04a:	bd10      	pop	{r4, pc}
   da04c:	000ddba0 	.word	0x000ddba0

000da050 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   da050:	2200      	movs	r2, #0
   da052:	7c00      	ldrb	r0, [r0, #16]
   da054:	f7fe b86a 	b.w	d812c <HAL_USB_USART_Begin>

000da058 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da058:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da05a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da05c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da05e:	2100      	movs	r1, #0
   da060:	f001 fa42 	bl	db4e8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da064:	4620      	mov	r0, r4
   da066:	bd10      	pop	{r4, pc}

000da068 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da068:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da06a:	4d0e      	ldr	r5, [pc, #56]	; (da0a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   da06c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da06e:	a801      	add	r0, sp, #4
   da070:	f7ff fff2 	bl	da058 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da074:	6829      	ldr	r1, [r5, #0]
   da076:	f011 0401 	ands.w	r4, r1, #1
   da07a:	d110      	bne.n	da09e <_Z16_fetch_usbserialv+0x36>
   da07c:	4628      	mov	r0, r5
   da07e:	f7fa f81d 	bl	d40bc <__cxa_guard_acquire>
   da082:	b160      	cbz	r0, da09e <_Z16_fetch_usbserialv+0x36>
   da084:	aa01      	add	r2, sp, #4
   da086:	4621      	mov	r1, r4
   da088:	4807      	ldr	r0, [pc, #28]	; (da0a8 <_Z16_fetch_usbserialv+0x40>)
   da08a:	f7ff ffcd 	bl	da028 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da08e:	4628      	mov	r0, r5
   da090:	f7fa f819 	bl	d40c6 <__cxa_guard_release>
   da094:	4a05      	ldr	r2, [pc, #20]	; (da0ac <_Z16_fetch_usbserialv+0x44>)
   da096:	4906      	ldr	r1, [pc, #24]	; (da0b0 <_Z16_fetch_usbserialv+0x48>)
   da098:	4803      	ldr	r0, [pc, #12]	; (da0a8 <_Z16_fetch_usbserialv+0x40>)
   da09a:	f000 f99f 	bl	da3dc <__aeabi_atexit>
	return _usbserial;
}
   da09e:	4802      	ldr	r0, [pc, #8]	; (da0a8 <_Z16_fetch_usbserialv+0x40>)
   da0a0:	b007      	add	sp, #28
   da0a2:	bd30      	pop	{r4, r5, pc}
   da0a4:	2003e5d0 	.word	0x2003e5d0
   da0a8:	2003e5d4 	.word	0x2003e5d4
   da0ac:	2003de88 	.word	0x2003de88
   da0b0:	000d9fa9 	.word	0x000d9fa9

000da0b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   da0b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da0b6:	4b0c      	ldr	r3, [pc, #48]	; (da0e8 <serialEventRun+0x34>)
   da0b8:	b133      	cbz	r3, da0c8 <serialEventRun+0x14>
   da0ba:	f7ff ffd5 	bl	da068 <_Z16_fetch_usbserialv>
   da0be:	6803      	ldr	r3, [r0, #0]
   da0c0:	691b      	ldr	r3, [r3, #16]
   da0c2:	4798      	blx	r3
   da0c4:	2800      	cmp	r0, #0
   da0c6:	dc09      	bgt.n	da0dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   da0c8:	4b08      	ldr	r3, [pc, #32]	; (da0ec <serialEventRun+0x38>)
   da0ca:	b163      	cbz	r3, da0e6 <serialEventRun+0x32>
   da0cc:	f7ff ff44 	bl	d9f58 <_Z22__fetch_global_Serial1v>
   da0d0:	6803      	ldr	r3, [r0, #0]
   da0d2:	691b      	ldr	r3, [r3, #16]
   da0d4:	4798      	blx	r3
   da0d6:	2800      	cmp	r0, #0
   da0d8:	dc03      	bgt.n	da0e2 <serialEventRun+0x2e>
   da0da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   da0dc:	f3af 8000 	nop.w
   da0e0:	e7f2      	b.n	da0c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   da0e2:	f3af 8000 	nop.w
   da0e6:	bd08      	pop	{r3, pc}
	...

000da0f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   da0f0:	b508      	push	{r3, lr}
	serialEventRun();
   da0f2:	f7ff ffdf 	bl	da0b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da0f6:	f7fd fe91 	bl	d7e1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da0fa:	4b01      	ldr	r3, [pc, #4]	; (da100 <_post_loop+0x10>)
   da0fc:	6018      	str	r0, [r3, #0]
   da0fe:	bd08      	pop	{r3, pc}
   da100:	2003e5f0 	.word	0x2003e5f0

000da104 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da104:	4802      	ldr	r0, [pc, #8]	; (da110 <_Z33system_initialize_user_backup_ramv+0xc>)
   da106:	4a03      	ldr	r2, [pc, #12]	; (da114 <_Z33system_initialize_user_backup_ramv+0x10>)
   da108:	4903      	ldr	r1, [pc, #12]	; (da118 <_Z33system_initialize_user_backup_ramv+0x14>)
   da10a:	1a12      	subs	r2, r2, r0
   da10c:	f001 b9c6 	b.w	db49c <memcpy>
   da110:	2003f400 	.word	0x2003f400
   da114:	2003fc1c 	.word	0x2003fc1c
   da118:	000de170 	.word	0x000de170

000da11c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da11c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da11e:	2300      	movs	r3, #0
   da120:	9300      	str	r3, [sp, #0]
   da122:	461a      	mov	r2, r3
   da124:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da128:	f7fe f89c 	bl	d8264 <system_ctrl_set_result>
}
   da12c:	b003      	add	sp, #12
   da12e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da134 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   da134:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da136:	8843      	ldrh	r3, [r0, #2]
   da138:	2b0a      	cmp	r3, #10
   da13a:	d008      	beq.n	da14e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da13c:	2b50      	cmp	r3, #80	; 0x50
   da13e:	d109      	bne.n	da154 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   da140:	4b09      	ldr	r3, [pc, #36]	; (da168 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da142:	681b      	ldr	r3, [r3, #0]
   da144:	b13b      	cbz	r3, da156 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   da146:	b003      	add	sp, #12
   da148:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da14c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da14e:	f7ff ffe5 	bl	da11c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da152:	e006      	b.n	da162 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da154:	2300      	movs	r3, #0
   da156:	9300      	str	r3, [sp, #0]
   da158:	461a      	mov	r2, r3
   da15a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da15e:	f7fe f881 	bl	d8264 <system_ctrl_set_result>
        break;
    }
}
   da162:	b003      	add	sp, #12
   da164:	f85d fb04 	ldr.w	pc, [sp], #4
   da168:	2003e5e8 	.word	0x2003e5e8

000da16c <module_user_init_hook>:

void module_user_init_hook()
{
   da16c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da16e:	4c10      	ldr	r4, [pc, #64]	; (da1b0 <module_user_init_hook+0x44>)
   da170:	4d10      	ldr	r5, [pc, #64]	; (da1b4 <module_user_init_hook+0x48>)
   da172:	6823      	ldr	r3, [r4, #0]
   da174:	42ab      	cmp	r3, r5
   da176:	4b10      	ldr	r3, [pc, #64]	; (da1b8 <module_user_init_hook+0x4c>)
   da178:	bf0c      	ite	eq
   da17a:	2201      	moveq	r2, #1
   da17c:	2200      	movne	r2, #0
   da17e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da180:	d002      	beq.n	da188 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   da182:	f7ff ffbf 	bl	da104 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da186:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da188:	f7fd fe30 	bl	d7dec <HAL_RNG_GetRandomNumber>
   da18c:	4604      	mov	r4, r0
    srand(seed);
   da18e:	f001 fc01 	bl	db994 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da192:	4b0a      	ldr	r3, [pc, #40]	; (da1bc <module_user_init_hook+0x50>)
   da194:	b113      	cbz	r3, da19c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   da196:	4620      	mov	r0, r4
   da198:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da19c:	2100      	movs	r1, #0
   da19e:	4807      	ldr	r0, [pc, #28]	; (da1bc <module_user_init_hook+0x50>)
   da1a0:	f7fe f8d4 	bl	d834c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da1a4:	2100      	movs	r1, #0
   da1a6:	4806      	ldr	r0, [pc, #24]	; (da1c0 <module_user_init_hook+0x54>)
}
   da1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da1ac:	f7fe b850 	b.w	d8250 <system_ctrl_set_app_request_handler>
   da1b0:	2003fc18 	.word	0x2003fc18
   da1b4:	9a271c1e 	.word	0x9a271c1e
   da1b8:	2003e5ec 	.word	0x2003e5ec
   da1bc:	00000000 	.word	0x00000000
   da1c0:	000da135 	.word	0x000da135

000da1c4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da1c4:	b508      	push	{r3, lr}
   da1c6:	4b02      	ldr	r3, [pc, #8]	; (da1d0 <spark_protocol_instance+0xc>)
   da1c8:	681b      	ldr	r3, [r3, #0]
   da1ca:	681b      	ldr	r3, [r3, #0]
   da1cc:	9301      	str	r3, [sp, #4]
   da1ce:	bd08      	pop	{r3, pc}
   da1d0:	0003025c 	.word	0x0003025c

000da1d4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da1d4:	b508      	push	{r3, lr}
   da1d6:	4b02      	ldr	r3, [pc, #8]	; (da1e0 <spark_protocol_set_product_id+0xc>)
   da1d8:	681b      	ldr	r3, [r3, #0]
   da1da:	685b      	ldr	r3, [r3, #4]
   da1dc:	9301      	str	r3, [sp, #4]
   da1de:	bd08      	pop	{r3, pc}
   da1e0:	0003025c 	.word	0x0003025c

000da1e4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da1e4:	b508      	push	{r3, lr}
   da1e6:	4b02      	ldr	r3, [pc, #8]	; (da1f0 <spark_protocol_set_product_firmware_version+0xc>)
   da1e8:	681b      	ldr	r3, [r3, #0]
   da1ea:	689b      	ldr	r3, [r3, #8]
   da1ec:	9301      	str	r3, [sp, #4]
   da1ee:	bd08      	pop	{r3, pc}
   da1f0:	0003025c 	.word	0x0003025c

000da1f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da1f4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da1f6:	4e18      	ldr	r6, [pc, #96]	; (da258 <pinAvailable+0x64>)
   da1f8:	6831      	ldr	r1, [r6, #0]
   da1fa:	f011 0501 	ands.w	r5, r1, #1
   da1fe:	4604      	mov	r4, r0
   da200:	d10a      	bne.n	da218 <pinAvailable+0x24>
   da202:	4630      	mov	r0, r6
   da204:	f7f9 ff5a 	bl	d40bc <__cxa_guard_acquire>
   da208:	b130      	cbz	r0, da218 <pinAvailable+0x24>
   da20a:	4629      	mov	r1, r5
   da20c:	4813      	ldr	r0, [pc, #76]	; (da25c <pinAvailable+0x68>)
   da20e:	f7ff faa5 	bl	d975c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da212:	4630      	mov	r0, r6
   da214:	f7f9 ff57 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da218:	4810      	ldr	r0, [pc, #64]	; (da25c <pinAvailable+0x68>)
   da21a:	f7ff fb49 	bl	d98b0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da21e:	b128      	cbz	r0, da22c <pinAvailable+0x38>
   da220:	f1a4 030b 	sub.w	r3, r4, #11
   da224:	2b02      	cmp	r3, #2
   da226:	d801      	bhi.n	da22c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da228:	2000      	movs	r0, #0
   da22a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da22c:	f000 f88a 	bl	da344 <_Z19__fetch_global_Wirev>
   da230:	f7fe fe6b 	bl	d8f0a <_ZN7TwoWire9isEnabledEv>
   da234:	b108      	cbz	r0, da23a <pinAvailable+0x46>
   da236:	2c01      	cmp	r4, #1
   da238:	d9f6      	bls.n	da228 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da23a:	f7ff fe8d 	bl	d9f58 <_Z22__fetch_global_Serial1v>
   da23e:	f7ff fe87 	bl	d9f50 <_ZN11USARTSerial9isEnabledEv>
   da242:	b118      	cbz	r0, da24c <pinAvailable+0x58>
   da244:	f1a4 0309 	sub.w	r3, r4, #9
   da248:	2b01      	cmp	r3, #1
   da24a:	d9ed      	bls.n	da228 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da24c:	2c23      	cmp	r4, #35	; 0x23
   da24e:	bf8c      	ite	hi
   da250:	2000      	movhi	r0, #0
   da252:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da254:	bd70      	pop	{r4, r5, r6, pc}
   da256:	bf00      	nop
   da258:	2003e050 	.word	0x2003e050
   da25c:	2003e054 	.word	0x2003e054

000da260 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da260:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da262:	b538      	push	{r3, r4, r5, lr}
   da264:	4604      	mov	r4, r0
   da266:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da268:	d80a      	bhi.n	da280 <pinMode+0x20>
   da26a:	29ff      	cmp	r1, #255	; 0xff
   da26c:	d008      	beq.n	da280 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da26e:	f7ff ffc1 	bl	da1f4 <pinAvailable>
   da272:	b128      	cbz	r0, da280 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da274:	4629      	mov	r1, r5
   da276:	4620      	mov	r0, r4
}
   da278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da27c:	f7fd be0e 	b.w	d7e9c <HAL_Pin_Mode>
   da280:	bd38      	pop	{r3, r4, r5, pc}

000da282 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da282:	b538      	push	{r3, r4, r5, lr}
   da284:	4604      	mov	r4, r0
   da286:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da288:	f7fd fe10 	bl	d7eac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da28c:	28ff      	cmp	r0, #255	; 0xff
   da28e:	d010      	beq.n	da2b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da290:	2806      	cmp	r0, #6
   da292:	d804      	bhi.n	da29e <digitalWrite+0x1c>
   da294:	234d      	movs	r3, #77	; 0x4d
   da296:	fa23 f000 	lsr.w	r0, r3, r0
   da29a:	07c3      	lsls	r3, r0, #31
   da29c:	d409      	bmi.n	da2b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da29e:	4620      	mov	r0, r4
   da2a0:	f7ff ffa8 	bl	da1f4 <pinAvailable>
   da2a4:	b128      	cbz	r0, da2b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da2a6:	4629      	mov	r1, r5
   da2a8:	4620      	mov	r0, r4
}
   da2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da2ae:	f7fd be05 	b.w	d7ebc <HAL_GPIO_Write>
   da2b2:	bd38      	pop	{r3, r4, r5, pc}

000da2b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da2b4:	b510      	push	{r4, lr}
   da2b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da2b8:	f7fd fdf8 	bl	d7eac <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da2bc:	3804      	subs	r0, #4
   da2be:	b2c0      	uxtb	r0, r0
   da2c0:	2801      	cmp	r0, #1
   da2c2:	d908      	bls.n	da2d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da2c4:	4620      	mov	r0, r4
   da2c6:	f7ff ff95 	bl	da1f4 <pinAvailable>
   da2ca:	b120      	cbz	r0, da2d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da2cc:	4620      	mov	r0, r4
}
   da2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da2d2:	f7fd bdfb 	b.w	d7ecc <HAL_GPIO_Read>
}
   da2d6:	2000      	movs	r0, #0
   da2d8:	bd10      	pop	{r4, pc}
	...

000da2dc <_Z17acquireWireBufferv>:
   da2dc:	b570      	push	{r4, r5, r6, lr}
   da2de:	4604      	mov	r4, r0
   da2e0:	2514      	movs	r5, #20
   da2e2:	462a      	mov	r2, r5
   da2e4:	4e09      	ldr	r6, [pc, #36]	; (da30c <_Z17acquireWireBufferv+0x30>)
   da2e6:	2100      	movs	r1, #0
   da2e8:	f001 f8fe 	bl	db4e8 <memset>
   da2ec:	8025      	strh	r5, [r4, #0]
   da2ee:	2520      	movs	r5, #32
   da2f0:	4631      	mov	r1, r6
   da2f2:	60a5      	str	r5, [r4, #8]
   da2f4:	6125      	str	r5, [r4, #16]
   da2f6:	4628      	mov	r0, r5
   da2f8:	f000 f88f 	bl	da41a <_ZnajRKSt9nothrow_t>
   da2fc:	4631      	mov	r1, r6
   da2fe:	6060      	str	r0, [r4, #4]
   da300:	4628      	mov	r0, r5
   da302:	f000 f88a 	bl	da41a <_ZnajRKSt9nothrow_t>
   da306:	60e0      	str	r0, [r4, #12]
   da308:	4620      	mov	r0, r4
   da30a:	bd70      	pop	{r4, r5, r6, pc}
   da30c:	000ddbc8 	.word	0x000ddbc8

000da310 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   da310:	b570      	push	{r4, r5, r6, lr}
   da312:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da314:	2514      	movs	r5, #20
   da316:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da318:	4e09      	ldr	r6, [pc, #36]	; (da340 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da31a:	2100      	movs	r1, #0
   da31c:	f001 f8e4 	bl	db4e8 <memset>
   da320:	8025      	strh	r5, [r4, #0]
   da322:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da324:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da326:	60a5      	str	r5, [r4, #8]
   da328:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da32a:	4628      	mov	r0, r5
   da32c:	f000 f875 	bl	da41a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da330:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da332:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da334:	4628      	mov	r0, r5
   da336:	f000 f870 	bl	da41a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   da33a:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   da33c:	4620      	mov	r0, r4
   da33e:	bd70      	pop	{r4, r5, r6, pc}
   da340:	000ddbc8 	.word	0x000ddbc8

000da344 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da344:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da346:	4d0e      	ldr	r5, [pc, #56]	; (da380 <_Z19__fetch_global_Wirev+0x3c>)
   da348:	6829      	ldr	r1, [r5, #0]
   da34a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da34e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da350:	d113      	bne.n	da37a <_Z19__fetch_global_Wirev+0x36>
   da352:	4628      	mov	r0, r5
   da354:	f7f9 feb2 	bl	d40bc <__cxa_guard_acquire>
   da358:	b178      	cbz	r0, da37a <_Z19__fetch_global_Wirev+0x36>
   da35a:	a801      	add	r0, sp, #4
   da35c:	f7ff ffbe 	bl	da2dc <_Z17acquireWireBufferv>
   da360:	aa01      	add	r2, sp, #4
   da362:	4621      	mov	r1, r4
   da364:	4807      	ldr	r0, [pc, #28]	; (da384 <_Z19__fetch_global_Wirev+0x40>)
   da366:	f7fe fd7f 	bl	d8e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da36a:	4628      	mov	r0, r5
   da36c:	f7f9 feab 	bl	d40c6 <__cxa_guard_release>
   da370:	4a05      	ldr	r2, [pc, #20]	; (da388 <_Z19__fetch_global_Wirev+0x44>)
   da372:	4906      	ldr	r1, [pc, #24]	; (da38c <_Z19__fetch_global_Wirev+0x48>)
   da374:	4803      	ldr	r0, [pc, #12]	; (da384 <_Z19__fetch_global_Wirev+0x40>)
   da376:	f000 f831 	bl	da3dc <__aeabi_atexit>
	return wire;
}
   da37a:	4802      	ldr	r0, [pc, #8]	; (da384 <_Z19__fetch_global_Wirev+0x40>)
   da37c:	b007      	add	sp, #28
   da37e:	bd30      	pop	{r4, r5, pc}
   da380:	2003e5f4 	.word	0x2003e5f4
   da384:	2003e60c 	.word	0x2003e60c
   da388:	2003de88 	.word	0x2003de88
   da38c:	000d8e11 	.word	0x000d8e11

000da390 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da390:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da392:	4c0e      	ldr	r4, [pc, #56]	; (da3cc <_Z20__fetch_global_Wire1v+0x3c>)
   da394:	6823      	ldr	r3, [r4, #0]
   da396:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da398:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da39a:	d413      	bmi.n	da3c4 <_Z20__fetch_global_Wire1v+0x34>
   da39c:	4620      	mov	r0, r4
   da39e:	f7f9 fe8d 	bl	d40bc <__cxa_guard_acquire>
   da3a2:	b178      	cbz	r0, da3c4 <_Z20__fetch_global_Wire1v+0x34>
   da3a4:	a801      	add	r0, sp, #4
   da3a6:	f7ff ffb3 	bl	da310 <_Z18acquireWire1Bufferv>
   da3aa:	aa01      	add	r2, sp, #4
   da3ac:	2101      	movs	r1, #1
   da3ae:	4808      	ldr	r0, [pc, #32]	; (da3d0 <_Z20__fetch_global_Wire1v+0x40>)
   da3b0:	f7fe fd5a 	bl	d8e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da3b4:	4620      	mov	r0, r4
   da3b6:	f7f9 fe86 	bl	d40c6 <__cxa_guard_release>
   da3ba:	4a06      	ldr	r2, [pc, #24]	; (da3d4 <_Z20__fetch_global_Wire1v+0x44>)
   da3bc:	4906      	ldr	r1, [pc, #24]	; (da3d8 <_Z20__fetch_global_Wire1v+0x48>)
   da3be:	4804      	ldr	r0, [pc, #16]	; (da3d0 <_Z20__fetch_global_Wire1v+0x40>)
   da3c0:	f000 f80c 	bl	da3dc <__aeabi_atexit>
	return wire;
}
   da3c4:	4802      	ldr	r0, [pc, #8]	; (da3d0 <_Z20__fetch_global_Wire1v+0x40>)
   da3c6:	b006      	add	sp, #24
   da3c8:	bd10      	pop	{r4, pc}
   da3ca:	bf00      	nop
   da3cc:	2003e620 	.word	0x2003e620
   da3d0:	2003e5f8 	.word	0x2003e5f8
   da3d4:	2003de88 	.word	0x2003de88
   da3d8:	000d8e11 	.word	0x000d8e11

000da3dc <__aeabi_atexit>:
   da3dc:	460b      	mov	r3, r1
   da3de:	4601      	mov	r1, r0
   da3e0:	4618      	mov	r0, r3
   da3e2:	f000 beab 	b.w	db13c <__cxa_atexit>

000da3e6 <_ZdlPvj>:
   da3e6:	f7f9 be5a 	b.w	d409e <_ZdlPv>
	...

000da3ec <_ZSt15get_new_handlerv>:
   da3ec:	4b02      	ldr	r3, [pc, #8]	; (da3f8 <_ZSt15get_new_handlerv+0xc>)
   da3ee:	6818      	ldr	r0, [r3, #0]
   da3f0:	f3bf 8f5f 	dmb	sy
   da3f4:	4770      	bx	lr
   da3f6:	bf00      	nop
   da3f8:	2003e624 	.word	0x2003e624

000da3fc <_ZnwjRKSt9nothrow_t>:
   da3fc:	b510      	push	{r4, lr}
   da3fe:	2800      	cmp	r0, #0
   da400:	bf14      	ite	ne
   da402:	4604      	movne	r4, r0
   da404:	2401      	moveq	r4, #1
   da406:	4620      	mov	r0, r4
   da408:	f7fd fff8 	bl	d83fc <malloc>
   da40c:	b920      	cbnz	r0, da418 <_ZnwjRKSt9nothrow_t+0x1c>
   da40e:	f7ff ffed 	bl	da3ec <_ZSt15get_new_handlerv>
   da412:	b108      	cbz	r0, da418 <_ZnwjRKSt9nothrow_t+0x1c>
   da414:	4780      	blx	r0
   da416:	e7f6      	b.n	da406 <_ZnwjRKSt9nothrow_t+0xa>
   da418:	bd10      	pop	{r4, pc}

000da41a <_ZnajRKSt9nothrow_t>:
   da41a:	f7ff bfef 	b.w	da3fc <_ZnwjRKSt9nothrow_t>

000da41e <_ZSt25__throw_bad_function_callv>:
   da41e:	b508      	push	{r3, lr}
   da420:	f7fe f82c 	bl	d847c <abort>

000da424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da424:	4b24      	ldr	r3, [pc, #144]	; (da4b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da426:	681a      	ldr	r2, [r3, #0]
   da428:	07d0      	lsls	r0, r2, #31
   da42a:	bf5c      	itt	pl
   da42c:	2201      	movpl	r2, #1
   da42e:	601a      	strpl	r2, [r3, #0]
   da430:	4b22      	ldr	r3, [pc, #136]	; (da4bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da432:	681a      	ldr	r2, [r3, #0]
   da434:	07d1      	lsls	r1, r2, #31
   da436:	bf5c      	itt	pl
   da438:	2201      	movpl	r2, #1
   da43a:	601a      	strpl	r2, [r3, #0]
   da43c:	4b20      	ldr	r3, [pc, #128]	; (da4c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da43e:	681a      	ldr	r2, [r3, #0]
   da440:	07d2      	lsls	r2, r2, #31
   da442:	bf5c      	itt	pl
   da444:	2201      	movpl	r2, #1
   da446:	601a      	strpl	r2, [r3, #0]
   da448:	4b1e      	ldr	r3, [pc, #120]	; (da4c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da44a:	681a      	ldr	r2, [r3, #0]
   da44c:	07d0      	lsls	r0, r2, #31
   da44e:	bf5c      	itt	pl
   da450:	2201      	movpl	r2, #1
   da452:	601a      	strpl	r2, [r3, #0]
   da454:	4b1c      	ldr	r3, [pc, #112]	; (da4c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da456:	681a      	ldr	r2, [r3, #0]
   da458:	07d1      	lsls	r1, r2, #31
   da45a:	bf5c      	itt	pl
   da45c:	2201      	movpl	r2, #1
   da45e:	601a      	strpl	r2, [r3, #0]
   da460:	4b1a      	ldr	r3, [pc, #104]	; (da4cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da462:	681a      	ldr	r2, [r3, #0]
   da464:	07d2      	lsls	r2, r2, #31
   da466:	bf5c      	itt	pl
   da468:	2201      	movpl	r2, #1
   da46a:	601a      	strpl	r2, [r3, #0]
   da46c:	4b18      	ldr	r3, [pc, #96]	; (da4d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da46e:	681a      	ldr	r2, [r3, #0]
   da470:	07d0      	lsls	r0, r2, #31
   da472:	bf5c      	itt	pl
   da474:	2201      	movpl	r2, #1
   da476:	601a      	strpl	r2, [r3, #0]
   da478:	4b16      	ldr	r3, [pc, #88]	; (da4d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da47a:	681a      	ldr	r2, [r3, #0]
   da47c:	07d1      	lsls	r1, r2, #31
   da47e:	bf5c      	itt	pl
   da480:	2201      	movpl	r2, #1
   da482:	601a      	strpl	r2, [r3, #0]
   da484:	4b14      	ldr	r3, [pc, #80]	; (da4d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da486:	681a      	ldr	r2, [r3, #0]
   da488:	07d2      	lsls	r2, r2, #31
   da48a:	bf5c      	itt	pl
   da48c:	2201      	movpl	r2, #1
   da48e:	601a      	strpl	r2, [r3, #0]
   da490:	4b12      	ldr	r3, [pc, #72]	; (da4dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da492:	681a      	ldr	r2, [r3, #0]
   da494:	07d0      	lsls	r0, r2, #31
   da496:	bf5c      	itt	pl
   da498:	2201      	movpl	r2, #1
   da49a:	601a      	strpl	r2, [r3, #0]
   da49c:	4b10      	ldr	r3, [pc, #64]	; (da4e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da49e:	681a      	ldr	r2, [r3, #0]
   da4a0:	07d1      	lsls	r1, r2, #31
   da4a2:	bf5c      	itt	pl
   da4a4:	2201      	movpl	r2, #1
   da4a6:	601a      	strpl	r2, [r3, #0]
   da4a8:	4b0e      	ldr	r3, [pc, #56]	; (da4e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da4aa:	681a      	ldr	r2, [r3, #0]
   da4ac:	07d2      	lsls	r2, r2, #31
   da4ae:	bf5c      	itt	pl
   da4b0:	2201      	movpl	r2, #1
   da4b2:	601a      	strpl	r2, [r3, #0]
   da4b4:	4770      	bx	lr
   da4b6:	bf00      	nop
   da4b8:	2003e654 	.word	0x2003e654
   da4bc:	2003e650 	.word	0x2003e650
   da4c0:	2003e64c 	.word	0x2003e64c
   da4c4:	2003e648 	.word	0x2003e648
   da4c8:	2003e644 	.word	0x2003e644
   da4cc:	2003e640 	.word	0x2003e640
   da4d0:	2003e63c 	.word	0x2003e63c
   da4d4:	2003e638 	.word	0x2003e638
   da4d8:	2003e634 	.word	0x2003e634
   da4dc:	2003e630 	.word	0x2003e630
   da4e0:	2003e62c 	.word	0x2003e62c
   da4e4:	2003e628 	.word	0x2003e628

000da4e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da4e8:	4b18      	ldr	r3, [pc, #96]	; (da54c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da4ea:	681a      	ldr	r2, [r3, #0]
   da4ec:	07d1      	lsls	r1, r2, #31
   da4ee:	bf5c      	itt	pl
   da4f0:	2201      	movpl	r2, #1
   da4f2:	601a      	strpl	r2, [r3, #0]
   da4f4:	4b16      	ldr	r3, [pc, #88]	; (da550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da4f6:	681a      	ldr	r2, [r3, #0]
   da4f8:	07d2      	lsls	r2, r2, #31
   da4fa:	bf5c      	itt	pl
   da4fc:	2201      	movpl	r2, #1
   da4fe:	601a      	strpl	r2, [r3, #0]
   da500:	4b14      	ldr	r3, [pc, #80]	; (da554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da502:	681a      	ldr	r2, [r3, #0]
   da504:	07d0      	lsls	r0, r2, #31
   da506:	bf5c      	itt	pl
   da508:	2201      	movpl	r2, #1
   da50a:	601a      	strpl	r2, [r3, #0]
   da50c:	4b12      	ldr	r3, [pc, #72]	; (da558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da50e:	681a      	ldr	r2, [r3, #0]
   da510:	07d1      	lsls	r1, r2, #31
   da512:	bf5c      	itt	pl
   da514:	2201      	movpl	r2, #1
   da516:	601a      	strpl	r2, [r3, #0]
   da518:	4b10      	ldr	r3, [pc, #64]	; (da55c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da51a:	681a      	ldr	r2, [r3, #0]
   da51c:	07d2      	lsls	r2, r2, #31
   da51e:	bf5c      	itt	pl
   da520:	2201      	movpl	r2, #1
   da522:	601a      	strpl	r2, [r3, #0]
   da524:	4b0e      	ldr	r3, [pc, #56]	; (da560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da526:	681a      	ldr	r2, [r3, #0]
   da528:	07d0      	lsls	r0, r2, #31
   da52a:	bf5c      	itt	pl
   da52c:	2201      	movpl	r2, #1
   da52e:	601a      	strpl	r2, [r3, #0]
   da530:	4b0c      	ldr	r3, [pc, #48]	; (da564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da532:	681a      	ldr	r2, [r3, #0]
   da534:	07d1      	lsls	r1, r2, #31
   da536:	bf5c      	itt	pl
   da538:	2201      	movpl	r2, #1
   da53a:	601a      	strpl	r2, [r3, #0]
   da53c:	4b0a      	ldr	r3, [pc, #40]	; (da568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da53e:	681a      	ldr	r2, [r3, #0]
   da540:	07d2      	lsls	r2, r2, #31
   da542:	bf5c      	itt	pl
   da544:	2201      	movpl	r2, #1
   da546:	601a      	strpl	r2, [r3, #0]
   da548:	4770      	bx	lr
   da54a:	bf00      	nop
   da54c:	2003e674 	.word	0x2003e674
   da550:	2003e670 	.word	0x2003e670
   da554:	2003e66c 	.word	0x2003e66c
   da558:	2003e668 	.word	0x2003e668
   da55c:	2003e664 	.word	0x2003e664
   da560:	2003e660 	.word	0x2003e660
   da564:	2003e65c 	.word	0x2003e65c
   da568:	2003e658 	.word	0x2003e658

000da56c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da56c:	4b18      	ldr	r3, [pc, #96]	; (da5d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da56e:	681a      	ldr	r2, [r3, #0]
   da570:	07d1      	lsls	r1, r2, #31
   da572:	bf5c      	itt	pl
   da574:	2201      	movpl	r2, #1
   da576:	601a      	strpl	r2, [r3, #0]
   da578:	4b16      	ldr	r3, [pc, #88]	; (da5d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da57a:	681a      	ldr	r2, [r3, #0]
   da57c:	07d2      	lsls	r2, r2, #31
   da57e:	bf5c      	itt	pl
   da580:	2201      	movpl	r2, #1
   da582:	601a      	strpl	r2, [r3, #0]
   da584:	4b14      	ldr	r3, [pc, #80]	; (da5d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da586:	681a      	ldr	r2, [r3, #0]
   da588:	07d0      	lsls	r0, r2, #31
   da58a:	bf5c      	itt	pl
   da58c:	2201      	movpl	r2, #1
   da58e:	601a      	strpl	r2, [r3, #0]
   da590:	4b12      	ldr	r3, [pc, #72]	; (da5dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da592:	681a      	ldr	r2, [r3, #0]
   da594:	07d1      	lsls	r1, r2, #31
   da596:	bf5c      	itt	pl
   da598:	2201      	movpl	r2, #1
   da59a:	601a      	strpl	r2, [r3, #0]
   da59c:	4b10      	ldr	r3, [pc, #64]	; (da5e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da59e:	681a      	ldr	r2, [r3, #0]
   da5a0:	07d2      	lsls	r2, r2, #31
   da5a2:	bf5c      	itt	pl
   da5a4:	2201      	movpl	r2, #1
   da5a6:	601a      	strpl	r2, [r3, #0]
   da5a8:	4b0e      	ldr	r3, [pc, #56]	; (da5e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da5aa:	681a      	ldr	r2, [r3, #0]
   da5ac:	07d0      	lsls	r0, r2, #31
   da5ae:	bf5c      	itt	pl
   da5b0:	2201      	movpl	r2, #1
   da5b2:	601a      	strpl	r2, [r3, #0]
   da5b4:	4b0c      	ldr	r3, [pc, #48]	; (da5e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da5b6:	681a      	ldr	r2, [r3, #0]
   da5b8:	07d1      	lsls	r1, r2, #31
   da5ba:	bf5c      	itt	pl
   da5bc:	2201      	movpl	r2, #1
   da5be:	601a      	strpl	r2, [r3, #0]
   da5c0:	4b0a      	ldr	r3, [pc, #40]	; (da5ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da5c2:	681a      	ldr	r2, [r3, #0]
   da5c4:	07d2      	lsls	r2, r2, #31
   da5c6:	bf5c      	itt	pl
   da5c8:	2201      	movpl	r2, #1
   da5ca:	601a      	strpl	r2, [r3, #0]
   da5cc:	4770      	bx	lr
   da5ce:	bf00      	nop
   da5d0:	2003e694 	.word	0x2003e694
   da5d4:	2003e690 	.word	0x2003e690
   da5d8:	2003e68c 	.word	0x2003e68c
   da5dc:	2003e688 	.word	0x2003e688
   da5e0:	2003e684 	.word	0x2003e684
   da5e4:	2003e680 	.word	0x2003e680
   da5e8:	2003e67c 	.word	0x2003e67c
   da5ec:	2003e678 	.word	0x2003e678

000da5f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da5f0:	4b24      	ldr	r3, [pc, #144]	; (da684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da5f2:	681a      	ldr	r2, [r3, #0]
   da5f4:	07d0      	lsls	r0, r2, #31
   da5f6:	bf5c      	itt	pl
   da5f8:	2201      	movpl	r2, #1
   da5fa:	601a      	strpl	r2, [r3, #0]
   da5fc:	4b22      	ldr	r3, [pc, #136]	; (da688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da5fe:	681a      	ldr	r2, [r3, #0]
   da600:	07d1      	lsls	r1, r2, #31
   da602:	bf5c      	itt	pl
   da604:	2201      	movpl	r2, #1
   da606:	601a      	strpl	r2, [r3, #0]
   da608:	4b20      	ldr	r3, [pc, #128]	; (da68c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da60a:	681a      	ldr	r2, [r3, #0]
   da60c:	07d2      	lsls	r2, r2, #31
   da60e:	bf5c      	itt	pl
   da610:	2201      	movpl	r2, #1
   da612:	601a      	strpl	r2, [r3, #0]
   da614:	4b1e      	ldr	r3, [pc, #120]	; (da690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da616:	681a      	ldr	r2, [r3, #0]
   da618:	07d0      	lsls	r0, r2, #31
   da61a:	bf5c      	itt	pl
   da61c:	2201      	movpl	r2, #1
   da61e:	601a      	strpl	r2, [r3, #0]
   da620:	4b1c      	ldr	r3, [pc, #112]	; (da694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da622:	681a      	ldr	r2, [r3, #0]
   da624:	07d1      	lsls	r1, r2, #31
   da626:	bf5c      	itt	pl
   da628:	2201      	movpl	r2, #1
   da62a:	601a      	strpl	r2, [r3, #0]
   da62c:	4b1a      	ldr	r3, [pc, #104]	; (da698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da62e:	681a      	ldr	r2, [r3, #0]
   da630:	07d2      	lsls	r2, r2, #31
   da632:	bf5c      	itt	pl
   da634:	2201      	movpl	r2, #1
   da636:	601a      	strpl	r2, [r3, #0]
   da638:	4b18      	ldr	r3, [pc, #96]	; (da69c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da63a:	681a      	ldr	r2, [r3, #0]
   da63c:	07d0      	lsls	r0, r2, #31
   da63e:	bf5c      	itt	pl
   da640:	2201      	movpl	r2, #1
   da642:	601a      	strpl	r2, [r3, #0]
   da644:	4b16      	ldr	r3, [pc, #88]	; (da6a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da646:	681a      	ldr	r2, [r3, #0]
   da648:	07d1      	lsls	r1, r2, #31
   da64a:	bf5c      	itt	pl
   da64c:	2201      	movpl	r2, #1
   da64e:	601a      	strpl	r2, [r3, #0]
   da650:	4b14      	ldr	r3, [pc, #80]	; (da6a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da652:	681a      	ldr	r2, [r3, #0]
   da654:	07d2      	lsls	r2, r2, #31
   da656:	bf5c      	itt	pl
   da658:	2201      	movpl	r2, #1
   da65a:	601a      	strpl	r2, [r3, #0]
   da65c:	4b12      	ldr	r3, [pc, #72]	; (da6a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da65e:	681a      	ldr	r2, [r3, #0]
   da660:	07d0      	lsls	r0, r2, #31
   da662:	bf5c      	itt	pl
   da664:	2201      	movpl	r2, #1
   da666:	601a      	strpl	r2, [r3, #0]
   da668:	4b10      	ldr	r3, [pc, #64]	; (da6ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da66a:	681a      	ldr	r2, [r3, #0]
   da66c:	07d1      	lsls	r1, r2, #31
   da66e:	bf5c      	itt	pl
   da670:	2201      	movpl	r2, #1
   da672:	601a      	strpl	r2, [r3, #0]
   da674:	4b0e      	ldr	r3, [pc, #56]	; (da6b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da676:	681a      	ldr	r2, [r3, #0]
   da678:	07d2      	lsls	r2, r2, #31
   da67a:	bf5c      	itt	pl
   da67c:	2201      	movpl	r2, #1
   da67e:	601a      	strpl	r2, [r3, #0]
   da680:	4770      	bx	lr
   da682:	bf00      	nop
   da684:	2003e6c4 	.word	0x2003e6c4
   da688:	2003e6c0 	.word	0x2003e6c0
   da68c:	2003e6bc 	.word	0x2003e6bc
   da690:	2003e6b8 	.word	0x2003e6b8
   da694:	2003e6b4 	.word	0x2003e6b4
   da698:	2003e6b0 	.word	0x2003e6b0
   da69c:	2003e6ac 	.word	0x2003e6ac
   da6a0:	2003e6a8 	.word	0x2003e6a8
   da6a4:	2003e6a4 	.word	0x2003e6a4
   da6a8:	2003e6a0 	.word	0x2003e6a0
   da6ac:	2003e69c 	.word	0x2003e69c
   da6b0:	2003e698 	.word	0x2003e698

000da6b4 <__aeabi_drsub>:
   da6b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da6b8:	e002      	b.n	da6c0 <__adddf3>
   da6ba:	bf00      	nop

000da6bc <__aeabi_dsub>:
   da6bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da6c0 <__adddf3>:
   da6c0:	b530      	push	{r4, r5, lr}
   da6c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da6c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da6ca:	ea94 0f05 	teq	r4, r5
   da6ce:	bf08      	it	eq
   da6d0:	ea90 0f02 	teqeq	r0, r2
   da6d4:	bf1f      	itttt	ne
   da6d6:	ea54 0c00 	orrsne.w	ip, r4, r0
   da6da:	ea55 0c02 	orrsne.w	ip, r5, r2
   da6de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da6e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da6e6:	f000 80e2 	beq.w	da8ae <__adddf3+0x1ee>
   da6ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da6ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da6f2:	bfb8      	it	lt
   da6f4:	426d      	neglt	r5, r5
   da6f6:	dd0c      	ble.n	da712 <__adddf3+0x52>
   da6f8:	442c      	add	r4, r5
   da6fa:	ea80 0202 	eor.w	r2, r0, r2
   da6fe:	ea81 0303 	eor.w	r3, r1, r3
   da702:	ea82 0000 	eor.w	r0, r2, r0
   da706:	ea83 0101 	eor.w	r1, r3, r1
   da70a:	ea80 0202 	eor.w	r2, r0, r2
   da70e:	ea81 0303 	eor.w	r3, r1, r3
   da712:	2d36      	cmp	r5, #54	; 0x36
   da714:	bf88      	it	hi
   da716:	bd30      	pophi	{r4, r5, pc}
   da718:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da71c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da720:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da724:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da728:	d002      	beq.n	da730 <__adddf3+0x70>
   da72a:	4240      	negs	r0, r0
   da72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da730:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da734:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da738:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da73c:	d002      	beq.n	da744 <__adddf3+0x84>
   da73e:	4252      	negs	r2, r2
   da740:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da744:	ea94 0f05 	teq	r4, r5
   da748:	f000 80a7 	beq.w	da89a <__adddf3+0x1da>
   da74c:	f1a4 0401 	sub.w	r4, r4, #1
   da750:	f1d5 0e20 	rsbs	lr, r5, #32
   da754:	db0d      	blt.n	da772 <__adddf3+0xb2>
   da756:	fa02 fc0e 	lsl.w	ip, r2, lr
   da75a:	fa22 f205 	lsr.w	r2, r2, r5
   da75e:	1880      	adds	r0, r0, r2
   da760:	f141 0100 	adc.w	r1, r1, #0
   da764:	fa03 f20e 	lsl.w	r2, r3, lr
   da768:	1880      	adds	r0, r0, r2
   da76a:	fa43 f305 	asr.w	r3, r3, r5
   da76e:	4159      	adcs	r1, r3
   da770:	e00e      	b.n	da790 <__adddf3+0xd0>
   da772:	f1a5 0520 	sub.w	r5, r5, #32
   da776:	f10e 0e20 	add.w	lr, lr, #32
   da77a:	2a01      	cmp	r2, #1
   da77c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da780:	bf28      	it	cs
   da782:	f04c 0c02 	orrcs.w	ip, ip, #2
   da786:	fa43 f305 	asr.w	r3, r3, r5
   da78a:	18c0      	adds	r0, r0, r3
   da78c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da790:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da794:	d507      	bpl.n	da7a6 <__adddf3+0xe6>
   da796:	f04f 0e00 	mov.w	lr, #0
   da79a:	f1dc 0c00 	rsbs	ip, ip, #0
   da79e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da7a2:	eb6e 0101 	sbc.w	r1, lr, r1
   da7a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da7aa:	d31b      	bcc.n	da7e4 <__adddf3+0x124>
   da7ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da7b0:	d30c      	bcc.n	da7cc <__adddf3+0x10c>
   da7b2:	0849      	lsrs	r1, r1, #1
   da7b4:	ea5f 0030 	movs.w	r0, r0, rrx
   da7b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da7bc:	f104 0401 	add.w	r4, r4, #1
   da7c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da7c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da7c8:	f080 809a 	bcs.w	da900 <__adddf3+0x240>
   da7cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da7d0:	bf08      	it	eq
   da7d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da7d6:	f150 0000 	adcs.w	r0, r0, #0
   da7da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da7de:	ea41 0105 	orr.w	r1, r1, r5
   da7e2:	bd30      	pop	{r4, r5, pc}
   da7e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da7e8:	4140      	adcs	r0, r0
   da7ea:	eb41 0101 	adc.w	r1, r1, r1
   da7ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da7f2:	f1a4 0401 	sub.w	r4, r4, #1
   da7f6:	d1e9      	bne.n	da7cc <__adddf3+0x10c>
   da7f8:	f091 0f00 	teq	r1, #0
   da7fc:	bf04      	itt	eq
   da7fe:	4601      	moveq	r1, r0
   da800:	2000      	moveq	r0, #0
   da802:	fab1 f381 	clz	r3, r1
   da806:	bf08      	it	eq
   da808:	3320      	addeq	r3, #32
   da80a:	f1a3 030b 	sub.w	r3, r3, #11
   da80e:	f1b3 0220 	subs.w	r2, r3, #32
   da812:	da0c      	bge.n	da82e <__adddf3+0x16e>
   da814:	320c      	adds	r2, #12
   da816:	dd08      	ble.n	da82a <__adddf3+0x16a>
   da818:	f102 0c14 	add.w	ip, r2, #20
   da81c:	f1c2 020c 	rsb	r2, r2, #12
   da820:	fa01 f00c 	lsl.w	r0, r1, ip
   da824:	fa21 f102 	lsr.w	r1, r1, r2
   da828:	e00c      	b.n	da844 <__adddf3+0x184>
   da82a:	f102 0214 	add.w	r2, r2, #20
   da82e:	bfd8      	it	le
   da830:	f1c2 0c20 	rsble	ip, r2, #32
   da834:	fa01 f102 	lsl.w	r1, r1, r2
   da838:	fa20 fc0c 	lsr.w	ip, r0, ip
   da83c:	bfdc      	itt	le
   da83e:	ea41 010c 	orrle.w	r1, r1, ip
   da842:	4090      	lslle	r0, r2
   da844:	1ae4      	subs	r4, r4, r3
   da846:	bfa2      	ittt	ge
   da848:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da84c:	4329      	orrge	r1, r5
   da84e:	bd30      	popge	{r4, r5, pc}
   da850:	ea6f 0404 	mvn.w	r4, r4
   da854:	3c1f      	subs	r4, #31
   da856:	da1c      	bge.n	da892 <__adddf3+0x1d2>
   da858:	340c      	adds	r4, #12
   da85a:	dc0e      	bgt.n	da87a <__adddf3+0x1ba>
   da85c:	f104 0414 	add.w	r4, r4, #20
   da860:	f1c4 0220 	rsb	r2, r4, #32
   da864:	fa20 f004 	lsr.w	r0, r0, r4
   da868:	fa01 f302 	lsl.w	r3, r1, r2
   da86c:	ea40 0003 	orr.w	r0, r0, r3
   da870:	fa21 f304 	lsr.w	r3, r1, r4
   da874:	ea45 0103 	orr.w	r1, r5, r3
   da878:	bd30      	pop	{r4, r5, pc}
   da87a:	f1c4 040c 	rsb	r4, r4, #12
   da87e:	f1c4 0220 	rsb	r2, r4, #32
   da882:	fa20 f002 	lsr.w	r0, r0, r2
   da886:	fa01 f304 	lsl.w	r3, r1, r4
   da88a:	ea40 0003 	orr.w	r0, r0, r3
   da88e:	4629      	mov	r1, r5
   da890:	bd30      	pop	{r4, r5, pc}
   da892:	fa21 f004 	lsr.w	r0, r1, r4
   da896:	4629      	mov	r1, r5
   da898:	bd30      	pop	{r4, r5, pc}
   da89a:	f094 0f00 	teq	r4, #0
   da89e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da8a2:	bf06      	itte	eq
   da8a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da8a8:	3401      	addeq	r4, #1
   da8aa:	3d01      	subne	r5, #1
   da8ac:	e74e      	b.n	da74c <__adddf3+0x8c>
   da8ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da8b2:	bf18      	it	ne
   da8b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da8b8:	d029      	beq.n	da90e <__adddf3+0x24e>
   da8ba:	ea94 0f05 	teq	r4, r5
   da8be:	bf08      	it	eq
   da8c0:	ea90 0f02 	teqeq	r0, r2
   da8c4:	d005      	beq.n	da8d2 <__adddf3+0x212>
   da8c6:	ea54 0c00 	orrs.w	ip, r4, r0
   da8ca:	bf04      	itt	eq
   da8cc:	4619      	moveq	r1, r3
   da8ce:	4610      	moveq	r0, r2
   da8d0:	bd30      	pop	{r4, r5, pc}
   da8d2:	ea91 0f03 	teq	r1, r3
   da8d6:	bf1e      	ittt	ne
   da8d8:	2100      	movne	r1, #0
   da8da:	2000      	movne	r0, #0
   da8dc:	bd30      	popne	{r4, r5, pc}
   da8de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da8e2:	d105      	bne.n	da8f0 <__adddf3+0x230>
   da8e4:	0040      	lsls	r0, r0, #1
   da8e6:	4149      	adcs	r1, r1
   da8e8:	bf28      	it	cs
   da8ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da8ee:	bd30      	pop	{r4, r5, pc}
   da8f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da8f4:	bf3c      	itt	cc
   da8f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da8fa:	bd30      	popcc	{r4, r5, pc}
   da8fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da900:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da904:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da908:	f04f 0000 	mov.w	r0, #0
   da90c:	bd30      	pop	{r4, r5, pc}
   da90e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da912:	bf1a      	itte	ne
   da914:	4619      	movne	r1, r3
   da916:	4610      	movne	r0, r2
   da918:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da91c:	bf1c      	itt	ne
   da91e:	460b      	movne	r3, r1
   da920:	4602      	movne	r2, r0
   da922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da926:	bf06      	itte	eq
   da928:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da92c:	ea91 0f03 	teqeq	r1, r3
   da930:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da934:	bd30      	pop	{r4, r5, pc}
   da936:	bf00      	nop

000da938 <__aeabi_ui2d>:
   da938:	f090 0f00 	teq	r0, #0
   da93c:	bf04      	itt	eq
   da93e:	2100      	moveq	r1, #0
   da940:	4770      	bxeq	lr
   da942:	b530      	push	{r4, r5, lr}
   da944:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da948:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da94c:	f04f 0500 	mov.w	r5, #0
   da950:	f04f 0100 	mov.w	r1, #0
   da954:	e750      	b.n	da7f8 <__adddf3+0x138>
   da956:	bf00      	nop

000da958 <__aeabi_i2d>:
   da958:	f090 0f00 	teq	r0, #0
   da95c:	bf04      	itt	eq
   da95e:	2100      	moveq	r1, #0
   da960:	4770      	bxeq	lr
   da962:	b530      	push	{r4, r5, lr}
   da964:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da968:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da96c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da970:	bf48      	it	mi
   da972:	4240      	negmi	r0, r0
   da974:	f04f 0100 	mov.w	r1, #0
   da978:	e73e      	b.n	da7f8 <__adddf3+0x138>
   da97a:	bf00      	nop

000da97c <__aeabi_f2d>:
   da97c:	0042      	lsls	r2, r0, #1
   da97e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da982:	ea4f 0131 	mov.w	r1, r1, rrx
   da986:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da98a:	bf1f      	itttt	ne
   da98c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da990:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da994:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da998:	4770      	bxne	lr
   da99a:	f092 0f00 	teq	r2, #0
   da99e:	bf14      	ite	ne
   da9a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da9a4:	4770      	bxeq	lr
   da9a6:	b530      	push	{r4, r5, lr}
   da9a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   da9ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da9b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da9b4:	e720      	b.n	da7f8 <__adddf3+0x138>
   da9b6:	bf00      	nop

000da9b8 <__aeabi_ul2d>:
   da9b8:	ea50 0201 	orrs.w	r2, r0, r1
   da9bc:	bf08      	it	eq
   da9be:	4770      	bxeq	lr
   da9c0:	b530      	push	{r4, r5, lr}
   da9c2:	f04f 0500 	mov.w	r5, #0
   da9c6:	e00a      	b.n	da9de <__aeabi_l2d+0x16>

000da9c8 <__aeabi_l2d>:
   da9c8:	ea50 0201 	orrs.w	r2, r0, r1
   da9cc:	bf08      	it	eq
   da9ce:	4770      	bxeq	lr
   da9d0:	b530      	push	{r4, r5, lr}
   da9d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da9d6:	d502      	bpl.n	da9de <__aeabi_l2d+0x16>
   da9d8:	4240      	negs	r0, r0
   da9da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da9de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da9e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da9e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da9ea:	f43f aedc 	beq.w	da7a6 <__adddf3+0xe6>
   da9ee:	f04f 0203 	mov.w	r2, #3
   da9f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da9f6:	bf18      	it	ne
   da9f8:	3203      	addne	r2, #3
   da9fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da9fe:	bf18      	it	ne
   daa00:	3203      	addne	r2, #3
   daa02:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   daa06:	f1c2 0320 	rsb	r3, r2, #32
   daa0a:	fa00 fc03 	lsl.w	ip, r0, r3
   daa0e:	fa20 f002 	lsr.w	r0, r0, r2
   daa12:	fa01 fe03 	lsl.w	lr, r1, r3
   daa16:	ea40 000e 	orr.w	r0, r0, lr
   daa1a:	fa21 f102 	lsr.w	r1, r1, r2
   daa1e:	4414      	add	r4, r2
   daa20:	e6c1      	b.n	da7a6 <__adddf3+0xe6>
   daa22:	bf00      	nop

000daa24 <__aeabi_dmul>:
   daa24:	b570      	push	{r4, r5, r6, lr}
   daa26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa32:	bf1d      	ittte	ne
   daa34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa38:	ea94 0f0c 	teqne	r4, ip
   daa3c:	ea95 0f0c 	teqne	r5, ip
   daa40:	f000 f8de 	bleq	dac00 <__aeabi_dmul+0x1dc>
   daa44:	442c      	add	r4, r5
   daa46:	ea81 0603 	eor.w	r6, r1, r3
   daa4a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   daa4e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   daa52:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   daa56:	bf18      	it	ne
   daa58:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   daa5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daa60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daa64:	d038      	beq.n	daad8 <__aeabi_dmul+0xb4>
   daa66:	fba0 ce02 	umull	ip, lr, r0, r2
   daa6a:	f04f 0500 	mov.w	r5, #0
   daa6e:	fbe1 e502 	umlal	lr, r5, r1, r2
   daa72:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   daa76:	fbe0 e503 	umlal	lr, r5, r0, r3
   daa7a:	f04f 0600 	mov.w	r6, #0
   daa7e:	fbe1 5603 	umlal	r5, r6, r1, r3
   daa82:	f09c 0f00 	teq	ip, #0
   daa86:	bf18      	it	ne
   daa88:	f04e 0e01 	orrne.w	lr, lr, #1
   daa8c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   daa90:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   daa94:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   daa98:	d204      	bcs.n	daaa4 <__aeabi_dmul+0x80>
   daa9a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   daa9e:	416d      	adcs	r5, r5
   daaa0:	eb46 0606 	adc.w	r6, r6, r6
   daaa4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   daaa8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   daaac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   daab0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   daab4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   daab8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daabc:	bf88      	it	hi
   daabe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daac2:	d81e      	bhi.n	dab02 <__aeabi_dmul+0xde>
   daac4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   daac8:	bf08      	it	eq
   daaca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   daace:	f150 0000 	adcs.w	r0, r0, #0
   daad2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daad6:	bd70      	pop	{r4, r5, r6, pc}
   daad8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daadc:	ea46 0101 	orr.w	r1, r6, r1
   daae0:	ea40 0002 	orr.w	r0, r0, r2
   daae4:	ea81 0103 	eor.w	r1, r1, r3
   daae8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   daaec:	bfc2      	ittt	gt
   daaee:	ebd4 050c 	rsbsgt	r5, r4, ip
   daaf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daaf6:	bd70      	popgt	{r4, r5, r6, pc}
   daaf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daafc:	f04f 0e00 	mov.w	lr, #0
   dab00:	3c01      	subs	r4, #1
   dab02:	f300 80ab 	bgt.w	dac5c <__aeabi_dmul+0x238>
   dab06:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dab0a:	bfde      	ittt	le
   dab0c:	2000      	movle	r0, #0
   dab0e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dab12:	bd70      	pople	{r4, r5, r6, pc}
   dab14:	f1c4 0400 	rsb	r4, r4, #0
   dab18:	3c20      	subs	r4, #32
   dab1a:	da35      	bge.n	dab88 <__aeabi_dmul+0x164>
   dab1c:	340c      	adds	r4, #12
   dab1e:	dc1b      	bgt.n	dab58 <__aeabi_dmul+0x134>
   dab20:	f104 0414 	add.w	r4, r4, #20
   dab24:	f1c4 0520 	rsb	r5, r4, #32
   dab28:	fa00 f305 	lsl.w	r3, r0, r5
   dab2c:	fa20 f004 	lsr.w	r0, r0, r4
   dab30:	fa01 f205 	lsl.w	r2, r1, r5
   dab34:	ea40 0002 	orr.w	r0, r0, r2
   dab38:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dab3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dab40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dab44:	fa21 f604 	lsr.w	r6, r1, r4
   dab48:	eb42 0106 	adc.w	r1, r2, r6
   dab4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dab50:	bf08      	it	eq
   dab52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dab56:	bd70      	pop	{r4, r5, r6, pc}
   dab58:	f1c4 040c 	rsb	r4, r4, #12
   dab5c:	f1c4 0520 	rsb	r5, r4, #32
   dab60:	fa00 f304 	lsl.w	r3, r0, r4
   dab64:	fa20 f005 	lsr.w	r0, r0, r5
   dab68:	fa01 f204 	lsl.w	r2, r1, r4
   dab6c:	ea40 0002 	orr.w	r0, r0, r2
   dab70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dab74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dab78:	f141 0100 	adc.w	r1, r1, #0
   dab7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dab80:	bf08      	it	eq
   dab82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dab86:	bd70      	pop	{r4, r5, r6, pc}
   dab88:	f1c4 0520 	rsb	r5, r4, #32
   dab8c:	fa00 f205 	lsl.w	r2, r0, r5
   dab90:	ea4e 0e02 	orr.w	lr, lr, r2
   dab94:	fa20 f304 	lsr.w	r3, r0, r4
   dab98:	fa01 f205 	lsl.w	r2, r1, r5
   dab9c:	ea43 0302 	orr.w	r3, r3, r2
   daba0:	fa21 f004 	lsr.w	r0, r1, r4
   daba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daba8:	fa21 f204 	lsr.w	r2, r1, r4
   dabac:	ea20 0002 	bic.w	r0, r0, r2
   dabb0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dabb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dabb8:	bf08      	it	eq
   dabba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dabbe:	bd70      	pop	{r4, r5, r6, pc}
   dabc0:	f094 0f00 	teq	r4, #0
   dabc4:	d10f      	bne.n	dabe6 <__aeabi_dmul+0x1c2>
   dabc6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dabca:	0040      	lsls	r0, r0, #1
   dabcc:	eb41 0101 	adc.w	r1, r1, r1
   dabd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dabd4:	bf08      	it	eq
   dabd6:	3c01      	subeq	r4, #1
   dabd8:	d0f7      	beq.n	dabca <__aeabi_dmul+0x1a6>
   dabda:	ea41 0106 	orr.w	r1, r1, r6
   dabde:	f095 0f00 	teq	r5, #0
   dabe2:	bf18      	it	ne
   dabe4:	4770      	bxne	lr
   dabe6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dabea:	0052      	lsls	r2, r2, #1
   dabec:	eb43 0303 	adc.w	r3, r3, r3
   dabf0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dabf4:	bf08      	it	eq
   dabf6:	3d01      	subeq	r5, #1
   dabf8:	d0f7      	beq.n	dabea <__aeabi_dmul+0x1c6>
   dabfa:	ea43 0306 	orr.w	r3, r3, r6
   dabfe:	4770      	bx	lr
   dac00:	ea94 0f0c 	teq	r4, ip
   dac04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dac08:	bf18      	it	ne
   dac0a:	ea95 0f0c 	teqne	r5, ip
   dac0e:	d00c      	beq.n	dac2a <__aeabi_dmul+0x206>
   dac10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac14:	bf18      	it	ne
   dac16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac1a:	d1d1      	bne.n	dabc0 <__aeabi_dmul+0x19c>
   dac1c:	ea81 0103 	eor.w	r1, r1, r3
   dac20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac24:	f04f 0000 	mov.w	r0, #0
   dac28:	bd70      	pop	{r4, r5, r6, pc}
   dac2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac2e:	bf06      	itte	eq
   dac30:	4610      	moveq	r0, r2
   dac32:	4619      	moveq	r1, r3
   dac34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac38:	d019      	beq.n	dac6e <__aeabi_dmul+0x24a>
   dac3a:	ea94 0f0c 	teq	r4, ip
   dac3e:	d102      	bne.n	dac46 <__aeabi_dmul+0x222>
   dac40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dac44:	d113      	bne.n	dac6e <__aeabi_dmul+0x24a>
   dac46:	ea95 0f0c 	teq	r5, ip
   dac4a:	d105      	bne.n	dac58 <__aeabi_dmul+0x234>
   dac4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dac50:	bf1c      	itt	ne
   dac52:	4610      	movne	r0, r2
   dac54:	4619      	movne	r1, r3
   dac56:	d10a      	bne.n	dac6e <__aeabi_dmul+0x24a>
   dac58:	ea81 0103 	eor.w	r1, r1, r3
   dac5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dac60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dac64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dac68:	f04f 0000 	mov.w	r0, #0
   dac6c:	bd70      	pop	{r4, r5, r6, pc}
   dac6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dac72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dac76:	bd70      	pop	{r4, r5, r6, pc}

000dac78 <__aeabi_ddiv>:
   dac78:	b570      	push	{r4, r5, r6, lr}
   dac7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dac7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dac82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dac86:	bf1d      	ittte	ne
   dac88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dac8c:	ea94 0f0c 	teqne	r4, ip
   dac90:	ea95 0f0c 	teqne	r5, ip
   dac94:	f000 f8a7 	bleq	dade6 <__aeabi_ddiv+0x16e>
   dac98:	eba4 0405 	sub.w	r4, r4, r5
   dac9c:	ea81 0e03 	eor.w	lr, r1, r3
   daca0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daca4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daca8:	f000 8088 	beq.w	dadbc <__aeabi_ddiv+0x144>
   dacac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dacb0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dacb4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dacb8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dacbc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dacc0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dacc4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dacc8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daccc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dacd0:	429d      	cmp	r5, r3
   dacd2:	bf08      	it	eq
   dacd4:	4296      	cmpeq	r6, r2
   dacd6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dacda:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dacde:	d202      	bcs.n	dace6 <__aeabi_ddiv+0x6e>
   dace0:	085b      	lsrs	r3, r3, #1
   dace2:	ea4f 0232 	mov.w	r2, r2, rrx
   dace6:	1ab6      	subs	r6, r6, r2
   dace8:	eb65 0503 	sbc.w	r5, r5, r3
   dacec:	085b      	lsrs	r3, r3, #1
   dacee:	ea4f 0232 	mov.w	r2, r2, rrx
   dacf2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dacf6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dacfa:	ebb6 0e02 	subs.w	lr, r6, r2
   dacfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   dad02:	bf22      	ittt	cs
   dad04:	1ab6      	subcs	r6, r6, r2
   dad06:	4675      	movcs	r5, lr
   dad08:	ea40 000c 	orrcs.w	r0, r0, ip
   dad0c:	085b      	lsrs	r3, r3, #1
   dad0e:	ea4f 0232 	mov.w	r2, r2, rrx
   dad12:	ebb6 0e02 	subs.w	lr, r6, r2
   dad16:	eb75 0e03 	sbcs.w	lr, r5, r3
   dad1a:	bf22      	ittt	cs
   dad1c:	1ab6      	subcs	r6, r6, r2
   dad1e:	4675      	movcs	r5, lr
   dad20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dad24:	085b      	lsrs	r3, r3, #1
   dad26:	ea4f 0232 	mov.w	r2, r2, rrx
   dad2a:	ebb6 0e02 	subs.w	lr, r6, r2
   dad2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dad32:	bf22      	ittt	cs
   dad34:	1ab6      	subcs	r6, r6, r2
   dad36:	4675      	movcs	r5, lr
   dad38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dad3c:	085b      	lsrs	r3, r3, #1
   dad3e:	ea4f 0232 	mov.w	r2, r2, rrx
   dad42:	ebb6 0e02 	subs.w	lr, r6, r2
   dad46:	eb75 0e03 	sbcs.w	lr, r5, r3
   dad4a:	bf22      	ittt	cs
   dad4c:	1ab6      	subcs	r6, r6, r2
   dad4e:	4675      	movcs	r5, lr
   dad50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dad54:	ea55 0e06 	orrs.w	lr, r5, r6
   dad58:	d018      	beq.n	dad8c <__aeabi_ddiv+0x114>
   dad5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dad5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dad62:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dad66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dad6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dad6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dad72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dad76:	d1c0      	bne.n	dacfa <__aeabi_ddiv+0x82>
   dad78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dad7c:	d10b      	bne.n	dad96 <__aeabi_ddiv+0x11e>
   dad7e:	ea41 0100 	orr.w	r1, r1, r0
   dad82:	f04f 0000 	mov.w	r0, #0
   dad86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dad8a:	e7b6      	b.n	dacfa <__aeabi_ddiv+0x82>
   dad8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dad90:	bf04      	itt	eq
   dad92:	4301      	orreq	r1, r0
   dad94:	2000      	moveq	r0, #0
   dad96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dad9a:	bf88      	it	hi
   dad9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dada0:	f63f aeaf 	bhi.w	dab02 <__aeabi_dmul+0xde>
   dada4:	ebb5 0c03 	subs.w	ip, r5, r3
   dada8:	bf04      	itt	eq
   dadaa:	ebb6 0c02 	subseq.w	ip, r6, r2
   dadae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dadb2:	f150 0000 	adcs.w	r0, r0, #0
   dadb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dadba:	bd70      	pop	{r4, r5, r6, pc}
   dadbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dadc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dadc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dadc8:	bfc2      	ittt	gt
   dadca:	ebd4 050c 	rsbsgt	r5, r4, ip
   dadce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dadd2:	bd70      	popgt	{r4, r5, r6, pc}
   dadd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dadd8:	f04f 0e00 	mov.w	lr, #0
   daddc:	3c01      	subs	r4, #1
   dadde:	e690      	b.n	dab02 <__aeabi_dmul+0xde>
   dade0:	ea45 0e06 	orr.w	lr, r5, r6
   dade4:	e68d      	b.n	dab02 <__aeabi_dmul+0xde>
   dade6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dadea:	ea94 0f0c 	teq	r4, ip
   dadee:	bf08      	it	eq
   dadf0:	ea95 0f0c 	teqeq	r5, ip
   dadf4:	f43f af3b 	beq.w	dac6e <__aeabi_dmul+0x24a>
   dadf8:	ea94 0f0c 	teq	r4, ip
   dadfc:	d10a      	bne.n	dae14 <__aeabi_ddiv+0x19c>
   dadfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dae02:	f47f af34 	bne.w	dac6e <__aeabi_dmul+0x24a>
   dae06:	ea95 0f0c 	teq	r5, ip
   dae0a:	f47f af25 	bne.w	dac58 <__aeabi_dmul+0x234>
   dae0e:	4610      	mov	r0, r2
   dae10:	4619      	mov	r1, r3
   dae12:	e72c      	b.n	dac6e <__aeabi_dmul+0x24a>
   dae14:	ea95 0f0c 	teq	r5, ip
   dae18:	d106      	bne.n	dae28 <__aeabi_ddiv+0x1b0>
   dae1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dae1e:	f43f aefd 	beq.w	dac1c <__aeabi_dmul+0x1f8>
   dae22:	4610      	mov	r0, r2
   dae24:	4619      	mov	r1, r3
   dae26:	e722      	b.n	dac6e <__aeabi_dmul+0x24a>
   dae28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dae2c:	bf18      	it	ne
   dae2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dae32:	f47f aec5 	bne.w	dabc0 <__aeabi_dmul+0x19c>
   dae36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dae3a:	f47f af0d 	bne.w	dac58 <__aeabi_dmul+0x234>
   dae3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dae42:	f47f aeeb 	bne.w	dac1c <__aeabi_dmul+0x1f8>
   dae46:	e712      	b.n	dac6e <__aeabi_dmul+0x24a>

000dae48 <__gedf2>:
   dae48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dae4c:	e006      	b.n	dae5c <__cmpdf2+0x4>
   dae4e:	bf00      	nop

000dae50 <__ledf2>:
   dae50:	f04f 0c01 	mov.w	ip, #1
   dae54:	e002      	b.n	dae5c <__cmpdf2+0x4>
   dae56:	bf00      	nop

000dae58 <__cmpdf2>:
   dae58:	f04f 0c01 	mov.w	ip, #1
   dae5c:	f84d cd04 	str.w	ip, [sp, #-4]!
   dae60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dae64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dae68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dae6c:	bf18      	it	ne
   dae6e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dae72:	d01b      	beq.n	daeac <__cmpdf2+0x54>
   dae74:	b001      	add	sp, #4
   dae76:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dae7a:	bf0c      	ite	eq
   dae7c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dae80:	ea91 0f03 	teqne	r1, r3
   dae84:	bf02      	ittt	eq
   dae86:	ea90 0f02 	teqeq	r0, r2
   dae8a:	2000      	moveq	r0, #0
   dae8c:	4770      	bxeq	lr
   dae8e:	f110 0f00 	cmn.w	r0, #0
   dae92:	ea91 0f03 	teq	r1, r3
   dae96:	bf58      	it	pl
   dae98:	4299      	cmppl	r1, r3
   dae9a:	bf08      	it	eq
   dae9c:	4290      	cmpeq	r0, r2
   dae9e:	bf2c      	ite	cs
   daea0:	17d8      	asrcs	r0, r3, #31
   daea2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   daea6:	f040 0001 	orr.w	r0, r0, #1
   daeaa:	4770      	bx	lr
   daeac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daeb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daeb4:	d102      	bne.n	daebc <__cmpdf2+0x64>
   daeb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daeba:	d107      	bne.n	daecc <__cmpdf2+0x74>
   daebc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daec4:	d1d6      	bne.n	dae74 <__cmpdf2+0x1c>
   daec6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daeca:	d0d3      	beq.n	dae74 <__cmpdf2+0x1c>
   daecc:	f85d 0b04 	ldr.w	r0, [sp], #4
   daed0:	4770      	bx	lr
   daed2:	bf00      	nop

000daed4 <__aeabi_cdrcmple>:
   daed4:	4684      	mov	ip, r0
   daed6:	4610      	mov	r0, r2
   daed8:	4662      	mov	r2, ip
   daeda:	468c      	mov	ip, r1
   daedc:	4619      	mov	r1, r3
   daede:	4663      	mov	r3, ip
   daee0:	e000      	b.n	daee4 <__aeabi_cdcmpeq>
   daee2:	bf00      	nop

000daee4 <__aeabi_cdcmpeq>:
   daee4:	b501      	push	{r0, lr}
   daee6:	f7ff ffb7 	bl	dae58 <__cmpdf2>
   daeea:	2800      	cmp	r0, #0
   daeec:	bf48      	it	mi
   daeee:	f110 0f00 	cmnmi.w	r0, #0
   daef2:	bd01      	pop	{r0, pc}

000daef4 <__aeabi_dcmpeq>:
   daef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   daef8:	f7ff fff4 	bl	daee4 <__aeabi_cdcmpeq>
   daefc:	bf0c      	ite	eq
   daefe:	2001      	moveq	r0, #1
   daf00:	2000      	movne	r0, #0
   daf02:	f85d fb08 	ldr.w	pc, [sp], #8
   daf06:	bf00      	nop

000daf08 <__aeabi_dcmplt>:
   daf08:	f84d ed08 	str.w	lr, [sp, #-8]!
   daf0c:	f7ff ffea 	bl	daee4 <__aeabi_cdcmpeq>
   daf10:	bf34      	ite	cc
   daf12:	2001      	movcc	r0, #1
   daf14:	2000      	movcs	r0, #0
   daf16:	f85d fb08 	ldr.w	pc, [sp], #8
   daf1a:	bf00      	nop

000daf1c <__aeabi_dcmple>:
   daf1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   daf20:	f7ff ffe0 	bl	daee4 <__aeabi_cdcmpeq>
   daf24:	bf94      	ite	ls
   daf26:	2001      	movls	r0, #1
   daf28:	2000      	movhi	r0, #0
   daf2a:	f85d fb08 	ldr.w	pc, [sp], #8
   daf2e:	bf00      	nop

000daf30 <__aeabi_dcmpge>:
   daf30:	f84d ed08 	str.w	lr, [sp, #-8]!
   daf34:	f7ff ffce 	bl	daed4 <__aeabi_cdrcmple>
   daf38:	bf94      	ite	ls
   daf3a:	2001      	movls	r0, #1
   daf3c:	2000      	movhi	r0, #0
   daf3e:	f85d fb08 	ldr.w	pc, [sp], #8
   daf42:	bf00      	nop

000daf44 <__aeabi_dcmpgt>:
   daf44:	f84d ed08 	str.w	lr, [sp, #-8]!
   daf48:	f7ff ffc4 	bl	daed4 <__aeabi_cdrcmple>
   daf4c:	bf34      	ite	cc
   daf4e:	2001      	movcc	r0, #1
   daf50:	2000      	movcs	r0, #0
   daf52:	f85d fb08 	ldr.w	pc, [sp], #8
   daf56:	bf00      	nop

000daf58 <__aeabi_dcmpun>:
   daf58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daf5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf60:	d102      	bne.n	daf68 <__aeabi_dcmpun+0x10>
   daf62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daf66:	d10a      	bne.n	daf7e <__aeabi_dcmpun+0x26>
   daf68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daf6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daf70:	d102      	bne.n	daf78 <__aeabi_dcmpun+0x20>
   daf72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daf76:	d102      	bne.n	daf7e <__aeabi_dcmpun+0x26>
   daf78:	f04f 0000 	mov.w	r0, #0
   daf7c:	4770      	bx	lr
   daf7e:	f04f 0001 	mov.w	r0, #1
   daf82:	4770      	bx	lr

000daf84 <__aeabi_d2iz>:
   daf84:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daf88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   daf8c:	d215      	bcs.n	dafba <__aeabi_d2iz+0x36>
   daf8e:	d511      	bpl.n	dafb4 <__aeabi_d2iz+0x30>
   daf90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   daf94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   daf98:	d912      	bls.n	dafc0 <__aeabi_d2iz+0x3c>
   daf9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daf9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dafa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dafa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dafaa:	fa23 f002 	lsr.w	r0, r3, r2
   dafae:	bf18      	it	ne
   dafb0:	4240      	negne	r0, r0
   dafb2:	4770      	bx	lr
   dafb4:	f04f 0000 	mov.w	r0, #0
   dafb8:	4770      	bx	lr
   dafba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dafbe:	d105      	bne.n	dafcc <__aeabi_d2iz+0x48>
   dafc0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dafc4:	bf08      	it	eq
   dafc6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dafca:	4770      	bx	lr
   dafcc:	f04f 0000 	mov.w	r0, #0
   dafd0:	4770      	bx	lr
   dafd2:	bf00      	nop

000dafd4 <__aeabi_d2uiz>:
   dafd4:	004a      	lsls	r2, r1, #1
   dafd6:	d211      	bcs.n	daffc <__aeabi_d2uiz+0x28>
   dafd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dafdc:	d211      	bcs.n	db002 <__aeabi_d2uiz+0x2e>
   dafde:	d50d      	bpl.n	daffc <__aeabi_d2uiz+0x28>
   dafe0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dafe4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dafe8:	d40e      	bmi.n	db008 <__aeabi_d2uiz+0x34>
   dafea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dafee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   daff2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   daff6:	fa23 f002 	lsr.w	r0, r3, r2
   daffa:	4770      	bx	lr
   daffc:	f04f 0000 	mov.w	r0, #0
   db000:	4770      	bx	lr
   db002:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db006:	d102      	bne.n	db00e <__aeabi_d2uiz+0x3a>
   db008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db00c:	4770      	bx	lr
   db00e:	f04f 0000 	mov.w	r0, #0
   db012:	4770      	bx	lr

000db014 <__aeabi_d2f>:
   db014:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db018:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db01c:	bf24      	itt	cs
   db01e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db022:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db026:	d90d      	bls.n	db044 <__aeabi_d2f+0x30>
   db028:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db02c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db030:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db034:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db038:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db03c:	bf08      	it	eq
   db03e:	f020 0001 	biceq.w	r0, r0, #1
   db042:	4770      	bx	lr
   db044:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db048:	d121      	bne.n	db08e <__aeabi_d2f+0x7a>
   db04a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db04e:	bfbc      	itt	lt
   db050:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db054:	4770      	bxlt	lr
   db056:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db05a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db05e:	f1c2 0218 	rsb	r2, r2, #24
   db062:	f1c2 0c20 	rsb	ip, r2, #32
   db066:	fa10 f30c 	lsls.w	r3, r0, ip
   db06a:	fa20 f002 	lsr.w	r0, r0, r2
   db06e:	bf18      	it	ne
   db070:	f040 0001 	orrne.w	r0, r0, #1
   db074:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db078:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db07c:	fa03 fc0c 	lsl.w	ip, r3, ip
   db080:	ea40 000c 	orr.w	r0, r0, ip
   db084:	fa23 f302 	lsr.w	r3, r3, r2
   db088:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db08c:	e7cc      	b.n	db028 <__aeabi_d2f+0x14>
   db08e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db092:	d107      	bne.n	db0a4 <__aeabi_d2f+0x90>
   db094:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db098:	bf1e      	ittt	ne
   db09a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db09e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db0a2:	4770      	bxne	lr
   db0a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db0a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db0ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db0b0:	4770      	bx	lr
   db0b2:	bf00      	nop

000db0b4 <asctime>:
   db0b4:	4b09      	ldr	r3, [pc, #36]	; (db0dc <asctime+0x28>)
   db0b6:	b570      	push	{r4, r5, r6, lr}
   db0b8:	681c      	ldr	r4, [r3, #0]
   db0ba:	6c25      	ldr	r5, [r4, #64]	; 0x40
   db0bc:	4606      	mov	r6, r0
   db0be:	b93d      	cbnz	r5, db0d0 <asctime+0x1c>
   db0c0:	201a      	movs	r0, #26
   db0c2:	f7fd f99b 	bl	d83fc <malloc>
   db0c6:	221a      	movs	r2, #26
   db0c8:	6420      	str	r0, [r4, #64]	; 0x40
   db0ca:	4629      	mov	r1, r5
   db0cc:	f000 fa0c 	bl	db4e8 <memset>
   db0d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
   db0d2:	4630      	mov	r0, r6
   db0d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db0d8:	f000 b802 	b.w	db0e0 <asctime_r>
   db0dc:	2003de38 	.word	0x2003de38

000db0e0 <asctime_r>:
   db0e0:	b510      	push	{r4, lr}
   db0e2:	460c      	mov	r4, r1
   db0e4:	6941      	ldr	r1, [r0, #20]
   db0e6:	6903      	ldr	r3, [r0, #16]
   db0e8:	6982      	ldr	r2, [r0, #24]
   db0ea:	b086      	sub	sp, #24
   db0ec:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db0f0:	9104      	str	r1, [sp, #16]
   db0f2:	6801      	ldr	r1, [r0, #0]
   db0f4:	9103      	str	r1, [sp, #12]
   db0f6:	6841      	ldr	r1, [r0, #4]
   db0f8:	9102      	str	r1, [sp, #8]
   db0fa:	6881      	ldr	r1, [r0, #8]
   db0fc:	9101      	str	r1, [sp, #4]
   db0fe:	68c1      	ldr	r1, [r0, #12]
   db100:	9100      	str	r1, [sp, #0]
   db102:	4907      	ldr	r1, [pc, #28]	; (db120 <asctime_r+0x40>)
   db104:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db108:	440b      	add	r3, r1
   db10a:	4906      	ldr	r1, [pc, #24]	; (db124 <asctime_r+0x44>)
   db10c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db110:	440a      	add	r2, r1
   db112:	4620      	mov	r0, r4
   db114:	4904      	ldr	r1, [pc, #16]	; (db128 <asctime_r+0x48>)
   db116:	f7fd f989 	bl	d842c <siprintf>
   db11a:	4620      	mov	r0, r4
   db11c:	b006      	add	sp, #24
   db11e:	bd10      	pop	{r4, pc}
   db120:	000ddbde 	.word	0x000ddbde
   db124:	000ddbc9 	.word	0x000ddbc9
   db128:	000ddc02 	.word	0x000ddc02

000db12c <atoi>:
   db12c:	220a      	movs	r2, #10
   db12e:	2100      	movs	r1, #0
   db130:	f001 ba50 	b.w	dc5d4 <strtol>

000db134 <atol>:
   db134:	220a      	movs	r2, #10
   db136:	2100      	movs	r1, #0
   db138:	f001 ba4c 	b.w	dc5d4 <strtol>

000db13c <__cxa_atexit>:
   db13c:	b510      	push	{r4, lr}
   db13e:	4c05      	ldr	r4, [pc, #20]	; (db154 <__cxa_atexit+0x18>)
   db140:	4613      	mov	r3, r2
   db142:	b12c      	cbz	r4, db150 <__cxa_atexit+0x14>
   db144:	460a      	mov	r2, r1
   db146:	4601      	mov	r1, r0
   db148:	2002      	movs	r0, #2
   db14a:	f3af 8000 	nop.w
   db14e:	bd10      	pop	{r4, pc}
   db150:	4620      	mov	r0, r4
   db152:	bd10      	pop	{r4, pc}
   db154:	00000000 	.word	0x00000000

000db158 <gmtime>:
   db158:	b538      	push	{r3, r4, r5, lr}
   db15a:	4b07      	ldr	r3, [pc, #28]	; (db178 <gmtime+0x20>)
   db15c:	681c      	ldr	r4, [r3, #0]
   db15e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db160:	4605      	mov	r5, r0
   db162:	b91b      	cbnz	r3, db16c <gmtime+0x14>
   db164:	2024      	movs	r0, #36	; 0x24
   db166:	f7fd f949 	bl	d83fc <malloc>
   db16a:	63e0      	str	r0, [r4, #60]	; 0x3c
   db16c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db16e:	4628      	mov	r0, r5
   db170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db174:	f000 b802 	b.w	db17c <gmtime_r>
   db178:	2003de38 	.word	0x2003de38

000db17c <gmtime_r>:
   db17c:	6802      	ldr	r2, [r0, #0]
   db17e:	4b47      	ldr	r3, [pc, #284]	; (db29c <gmtime_r+0x120>)
   db180:	b5f0      	push	{r4, r5, r6, r7, lr}
   db182:	fb92 f4f3 	sdiv	r4, r2, r3
   db186:	fb03 2214 	mls	r2, r3, r4, r2
   db18a:	2a00      	cmp	r2, #0
   db18c:	bfbc      	itt	lt
   db18e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   db192:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   db196:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   db19a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   db19e:	fb92 f3f0 	sdiv	r3, r2, r0
   db1a2:	fb00 2213 	mls	r2, r0, r3, r2
   db1a6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   db1aa:	bfac      	ite	ge
   db1ac:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   db1b0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   db1b4:	608b      	str	r3, [r1, #8]
   db1b6:	fb92 f3f0 	sdiv	r3, r2, r0
   db1ba:	fb00 2213 	mls	r2, r0, r3, r2
   db1be:	604b      	str	r3, [r1, #4]
   db1c0:	600a      	str	r2, [r1, #0]
   db1c2:	2307      	movs	r3, #7
   db1c4:	1ce2      	adds	r2, r4, #3
   db1c6:	fb92 f3f3 	sdiv	r3, r2, r3
   db1ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db1ce:	1ad3      	subs	r3, r2, r3
   db1d0:	618b      	str	r3, [r1, #24]
   db1d2:	4b33      	ldr	r3, [pc, #204]	; (db2a0 <gmtime_r+0x124>)
   db1d4:	4d33      	ldr	r5, [pc, #204]	; (db2a4 <gmtime_r+0x128>)
   db1d6:	fb94 f5f5 	sdiv	r5, r4, r5
   db1da:	fb03 4405 	mla	r4, r3, r5, r4
   db1de:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db1e2:	fbb4 f2f2 	udiv	r2, r4, r2
   db1e6:	4422      	add	r2, r4
   db1e8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db1ec:	fbb4 f3f7 	udiv	r3, r4, r7
   db1f0:	1ad2      	subs	r2, r2, r3
   db1f2:	482d      	ldr	r0, [pc, #180]	; (db2a8 <gmtime_r+0x12c>)
   db1f4:	fbb4 f0f0 	udiv	r0, r4, r0
   db1f8:	f648 6694 	movw	r6, #36500	; 0x8e94
   db1fc:	1a13      	subs	r3, r2, r0
   db1fe:	fbb3 f6f6 	udiv	r6, r3, r6
   db202:	4434      	add	r4, r6
   db204:	f240 126d 	movw	r2, #365	; 0x16d
   db208:	fbb3 f0f2 	udiv	r0, r3, r2
   db20c:	fbb3 f3f7 	udiv	r3, r3, r7
   db210:	1ae3      	subs	r3, r4, r3
   db212:	fb02 3310 	mls	r3, r2, r0, r3
   db216:	2499      	movs	r4, #153	; 0x99
   db218:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db21c:	3202      	adds	r2, #2
   db21e:	fbb2 f2f4 	udiv	r2, r2, r4
   db222:	2a0a      	cmp	r2, #10
   db224:	fb04 f402 	mul.w	r4, r4, r2
   db228:	f104 0602 	add.w	r6, r4, #2
   db22c:	f04f 0405 	mov.w	r4, #5
   db230:	fbb6 f4f4 	udiv	r4, r6, r4
   db234:	bf34      	ite	cc
   db236:	2602      	movcc	r6, #2
   db238:	f06f 0609 	mvncs.w	r6, #9
   db23c:	4416      	add	r6, r2
   db23e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db242:	fb02 0505 	mla	r5, r2, r5, r0
   db246:	1c5f      	adds	r7, r3, #1
   db248:	2e01      	cmp	r6, #1
   db24a:	bf98      	it	ls
   db24c:	3501      	addls	r5, #1
   db24e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db252:	eba7 0704 	sub.w	r7, r7, r4
   db256:	d302      	bcc.n	db25e <gmtime_r+0xe2>
   db258:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db25c:	e014      	b.n	db288 <gmtime_r+0x10c>
   db25e:	0782      	lsls	r2, r0, #30
   db260:	d105      	bne.n	db26e <gmtime_r+0xf2>
   db262:	2464      	movs	r4, #100	; 0x64
   db264:	fbb0 f2f4 	udiv	r2, r0, r4
   db268:	fb04 0212 	mls	r2, r4, r2, r0
   db26c:	b94a      	cbnz	r2, db282 <gmtime_r+0x106>
   db26e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db272:	fbb0 f4f2 	udiv	r4, r0, r2
   db276:	fb02 0014 	mls	r0, r2, r4, r0
   db27a:	fab0 f280 	clz	r2, r0
   db27e:	0952      	lsrs	r2, r2, #5
   db280:	e000      	b.n	db284 <gmtime_r+0x108>
   db282:	2201      	movs	r2, #1
   db284:	333b      	adds	r3, #59	; 0x3b
   db286:	441a      	add	r2, r3
   db288:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db28c:	2300      	movs	r3, #0
   db28e:	61ca      	str	r2, [r1, #28]
   db290:	614d      	str	r5, [r1, #20]
   db292:	610e      	str	r6, [r1, #16]
   db294:	60cf      	str	r7, [r1, #12]
   db296:	620b      	str	r3, [r1, #32]
   db298:	4608      	mov	r0, r1
   db29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db29c:	00015180 	.word	0x00015180
   db2a0:	fffdc54f 	.word	0xfffdc54f
   db2a4:	00023ab1 	.word	0x00023ab1
   db2a8:	00023ab0 	.word	0x00023ab0

000db2ac <localtime>:
   db2ac:	b538      	push	{r3, r4, r5, lr}
   db2ae:	4b07      	ldr	r3, [pc, #28]	; (db2cc <localtime+0x20>)
   db2b0:	681c      	ldr	r4, [r3, #0]
   db2b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db2b4:	4605      	mov	r5, r0
   db2b6:	b91b      	cbnz	r3, db2c0 <localtime+0x14>
   db2b8:	2024      	movs	r0, #36	; 0x24
   db2ba:	f7fd f89f 	bl	d83fc <malloc>
   db2be:	63e0      	str	r0, [r4, #60]	; 0x3c
   db2c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db2c2:	4628      	mov	r0, r5
   db2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db2c8:	f000 b802 	b.w	db2d0 <localtime_r>
   db2cc:	2003de38 	.word	0x2003de38

000db2d0 <localtime_r>:
   db2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db2d4:	460c      	mov	r4, r1
   db2d6:	4680      	mov	r8, r0
   db2d8:	f001 fcaa 	bl	dcc30 <__gettzinfo>
   db2dc:	4621      	mov	r1, r4
   db2de:	4607      	mov	r7, r0
   db2e0:	4640      	mov	r0, r8
   db2e2:	f7ff ff4b 	bl	db17c <gmtime_r>
   db2e6:	6946      	ldr	r6, [r0, #20]
   db2e8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db2ec:	07b3      	lsls	r3, r6, #30
   db2ee:	4604      	mov	r4, r0
   db2f0:	d105      	bne.n	db2fe <localtime_r+0x2e>
   db2f2:	2264      	movs	r2, #100	; 0x64
   db2f4:	fb96 f3f2 	sdiv	r3, r6, r2
   db2f8:	fb02 6313 	mls	r3, r2, r3, r6
   db2fc:	b94b      	cbnz	r3, db312 <localtime_r+0x42>
   db2fe:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db302:	fb96 f3f5 	sdiv	r3, r6, r5
   db306:	fb05 6513 	mls	r5, r5, r3, r6
   db30a:	fab5 f385 	clz	r3, r5
   db30e:	095b      	lsrs	r3, r3, #5
   db310:	e000      	b.n	db314 <localtime_r+0x44>
   db312:	2301      	movs	r3, #1
   db314:	4a5f      	ldr	r2, [pc, #380]	; (db494 <localtime_r+0x1c4>)
   db316:	2530      	movs	r5, #48	; 0x30
   db318:	fb05 2503 	mla	r5, r5, r3, r2
   db31c:	f001 faa4 	bl	dc868 <__tz_lock>
   db320:	f001 faa4 	bl	dc86c <_tzset_unlocked>
   db324:	4b5c      	ldr	r3, [pc, #368]	; (db498 <localtime_r+0x1c8>)
   db326:	681b      	ldr	r3, [r3, #0]
   db328:	b1f3      	cbz	r3, db368 <localtime_r+0x98>
   db32a:	687b      	ldr	r3, [r7, #4]
   db32c:	429e      	cmp	r6, r3
   db32e:	d105      	bne.n	db33c <localtime_r+0x6c>
   db330:	6839      	ldr	r1, [r7, #0]
   db332:	f8d8 3000 	ldr.w	r3, [r8]
   db336:	69fa      	ldr	r2, [r7, #28]
   db338:	b941      	cbnz	r1, db34c <localtime_r+0x7c>
   db33a:	e00a      	b.n	db352 <localtime_r+0x82>
   db33c:	4630      	mov	r0, r6
   db33e:	f001 f9eb 	bl	dc718 <__tzcalc_limits>
   db342:	2800      	cmp	r0, #0
   db344:	d1f4      	bne.n	db330 <localtime_r+0x60>
   db346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db34a:	e00d      	b.n	db368 <localtime_r+0x98>
   db34c:	4293      	cmp	r3, r2
   db34e:	db08      	blt.n	db362 <localtime_r+0x92>
   db350:	e001      	b.n	db356 <localtime_r+0x86>
   db352:	4293      	cmp	r3, r2
   db354:	da07      	bge.n	db366 <localtime_r+0x96>
   db356:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db358:	4293      	cmp	r3, r2
   db35a:	bfac      	ite	ge
   db35c:	2300      	movge	r3, #0
   db35e:	2301      	movlt	r3, #1
   db360:	e002      	b.n	db368 <localtime_r+0x98>
   db362:	2300      	movs	r3, #0
   db364:	e000      	b.n	db368 <localtime_r+0x98>
   db366:	2301      	movs	r3, #1
   db368:	6223      	str	r3, [r4, #32]
   db36a:	6a23      	ldr	r3, [r4, #32]
   db36c:	2b01      	cmp	r3, #1
   db36e:	bf0c      	ite	eq
   db370:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db372:	6a39      	ldrne	r1, [r7, #32]
   db374:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db378:	203c      	movs	r0, #60	; 0x3c
   db37a:	fb91 f6f3 	sdiv	r6, r1, r3
   db37e:	fb03 1316 	mls	r3, r3, r6, r1
   db382:	6861      	ldr	r1, [r4, #4]
   db384:	fb93 f2f0 	sdiv	r2, r3, r0
   db388:	fb00 3012 	mls	r0, r0, r2, r3
   db38c:	6823      	ldr	r3, [r4, #0]
   db38e:	1a89      	subs	r1, r1, r2
   db390:	68a2      	ldr	r2, [r4, #8]
   db392:	6061      	str	r1, [r4, #4]
   db394:	1a1b      	subs	r3, r3, r0
   db396:	1b92      	subs	r2, r2, r6
   db398:	2b3b      	cmp	r3, #59	; 0x3b
   db39a:	6023      	str	r3, [r4, #0]
   db39c:	60a2      	str	r2, [r4, #8]
   db39e:	dd03      	ble.n	db3a8 <localtime_r+0xd8>
   db3a0:	3101      	adds	r1, #1
   db3a2:	6061      	str	r1, [r4, #4]
   db3a4:	3b3c      	subs	r3, #60	; 0x3c
   db3a6:	e004      	b.n	db3b2 <localtime_r+0xe2>
   db3a8:	2b00      	cmp	r3, #0
   db3aa:	da03      	bge.n	db3b4 <localtime_r+0xe4>
   db3ac:	3901      	subs	r1, #1
   db3ae:	6061      	str	r1, [r4, #4]
   db3b0:	333c      	adds	r3, #60	; 0x3c
   db3b2:	6023      	str	r3, [r4, #0]
   db3b4:	6863      	ldr	r3, [r4, #4]
   db3b6:	2b3b      	cmp	r3, #59	; 0x3b
   db3b8:	dd03      	ble.n	db3c2 <localtime_r+0xf2>
   db3ba:	3201      	adds	r2, #1
   db3bc:	60a2      	str	r2, [r4, #8]
   db3be:	3b3c      	subs	r3, #60	; 0x3c
   db3c0:	e004      	b.n	db3cc <localtime_r+0xfc>
   db3c2:	2b00      	cmp	r3, #0
   db3c4:	da03      	bge.n	db3ce <localtime_r+0xfe>
   db3c6:	3a01      	subs	r2, #1
   db3c8:	60a2      	str	r2, [r4, #8]
   db3ca:	333c      	adds	r3, #60	; 0x3c
   db3cc:	6063      	str	r3, [r4, #4]
   db3ce:	68a3      	ldr	r3, [r4, #8]
   db3d0:	2b17      	cmp	r3, #23
   db3d2:	dd22      	ble.n	db41a <localtime_r+0x14a>
   db3d4:	69e2      	ldr	r2, [r4, #28]
   db3d6:	3201      	adds	r2, #1
   db3d8:	61e2      	str	r2, [r4, #28]
   db3da:	69a2      	ldr	r2, [r4, #24]
   db3dc:	3201      	adds	r2, #1
   db3de:	2a06      	cmp	r2, #6
   db3e0:	bfc8      	it	gt
   db3e2:	2200      	movgt	r2, #0
   db3e4:	61a2      	str	r2, [r4, #24]
   db3e6:	68e2      	ldr	r2, [r4, #12]
   db3e8:	3b18      	subs	r3, #24
   db3ea:	3201      	adds	r2, #1
   db3ec:	60a3      	str	r3, [r4, #8]
   db3ee:	6923      	ldr	r3, [r4, #16]
   db3f0:	60e2      	str	r2, [r4, #12]
   db3f2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db3f6:	428a      	cmp	r2, r1
   db3f8:	dd46      	ble.n	db488 <localtime_r+0x1b8>
   db3fa:	3301      	adds	r3, #1
   db3fc:	2b0c      	cmp	r3, #12
   db3fe:	bf0c      	ite	eq
   db400:	6963      	ldreq	r3, [r4, #20]
   db402:	6123      	strne	r3, [r4, #16]
   db404:	eba2 0201 	sub.w	r2, r2, r1
   db408:	60e2      	str	r2, [r4, #12]
   db40a:	bf01      	itttt	eq
   db40c:	3301      	addeq	r3, #1
   db40e:	2200      	moveq	r2, #0
   db410:	6122      	streq	r2, [r4, #16]
   db412:	6163      	streq	r3, [r4, #20]
   db414:	bf08      	it	eq
   db416:	61e2      	streq	r2, [r4, #28]
   db418:	e036      	b.n	db488 <localtime_r+0x1b8>
   db41a:	2b00      	cmp	r3, #0
   db41c:	da34      	bge.n	db488 <localtime_r+0x1b8>
   db41e:	69e2      	ldr	r2, [r4, #28]
   db420:	3a01      	subs	r2, #1
   db422:	61e2      	str	r2, [r4, #28]
   db424:	69a2      	ldr	r2, [r4, #24]
   db426:	3a01      	subs	r2, #1
   db428:	bf48      	it	mi
   db42a:	2206      	movmi	r2, #6
   db42c:	61a2      	str	r2, [r4, #24]
   db42e:	68e2      	ldr	r2, [r4, #12]
   db430:	3318      	adds	r3, #24
   db432:	3a01      	subs	r2, #1
   db434:	60e2      	str	r2, [r4, #12]
   db436:	60a3      	str	r3, [r4, #8]
   db438:	bb32      	cbnz	r2, db488 <localtime_r+0x1b8>
   db43a:	6923      	ldr	r3, [r4, #16]
   db43c:	3b01      	subs	r3, #1
   db43e:	d401      	bmi.n	db444 <localtime_r+0x174>
   db440:	6123      	str	r3, [r4, #16]
   db442:	e01d      	b.n	db480 <localtime_r+0x1b0>
   db444:	230b      	movs	r3, #11
   db446:	6123      	str	r3, [r4, #16]
   db448:	6963      	ldr	r3, [r4, #20]
   db44a:	1e5a      	subs	r2, r3, #1
   db44c:	f012 0f03 	tst.w	r2, #3
   db450:	6162      	str	r2, [r4, #20]
   db452:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db456:	d105      	bne.n	db464 <localtime_r+0x194>
   db458:	2164      	movs	r1, #100	; 0x64
   db45a:	fb93 f2f1 	sdiv	r2, r3, r1
   db45e:	fb01 3212 	mls	r2, r1, r2, r3
   db462:	b94a      	cbnz	r2, db478 <localtime_r+0x1a8>
   db464:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db468:	fb93 f2f1 	sdiv	r2, r3, r1
   db46c:	fb01 3312 	mls	r3, r1, r2, r3
   db470:	fab3 f383 	clz	r3, r3
   db474:	095b      	lsrs	r3, r3, #5
   db476:	e000      	b.n	db47a <localtime_r+0x1aa>
   db478:	2301      	movs	r3, #1
   db47a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db47e:	61e3      	str	r3, [r4, #28]
   db480:	6923      	ldr	r3, [r4, #16]
   db482:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db486:	60e3      	str	r3, [r4, #12]
   db488:	f001 f9ef 	bl	dc86a <__tz_unlock>
   db48c:	4620      	mov	r0, r4
   db48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db492:	bf00      	nop
   db494:	000ddde4 	.word	0x000ddde4
   db498:	2003e7e4 	.word	0x2003e7e4

000db49c <memcpy>:
   db49c:	b510      	push	{r4, lr}
   db49e:	1e43      	subs	r3, r0, #1
   db4a0:	440a      	add	r2, r1
   db4a2:	4291      	cmp	r1, r2
   db4a4:	d004      	beq.n	db4b0 <memcpy+0x14>
   db4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   db4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   db4ae:	e7f8      	b.n	db4a2 <memcpy+0x6>
   db4b0:	bd10      	pop	{r4, pc}

000db4b2 <memmove>:
   db4b2:	4288      	cmp	r0, r1
   db4b4:	b510      	push	{r4, lr}
   db4b6:	eb01 0302 	add.w	r3, r1, r2
   db4ba:	d801      	bhi.n	db4c0 <memmove+0xe>
   db4bc:	1e42      	subs	r2, r0, #1
   db4be:	e00b      	b.n	db4d8 <memmove+0x26>
   db4c0:	4298      	cmp	r0, r3
   db4c2:	d2fb      	bcs.n	db4bc <memmove+0xa>
   db4c4:	1881      	adds	r1, r0, r2
   db4c6:	1ad2      	subs	r2, r2, r3
   db4c8:	42d3      	cmn	r3, r2
   db4ca:	d004      	beq.n	db4d6 <memmove+0x24>
   db4cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db4d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db4d4:	e7f8      	b.n	db4c8 <memmove+0x16>
   db4d6:	bd10      	pop	{r4, pc}
   db4d8:	4299      	cmp	r1, r3
   db4da:	d004      	beq.n	db4e6 <memmove+0x34>
   db4dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   db4e0:	f802 4f01 	strb.w	r4, [r2, #1]!
   db4e4:	e7f8      	b.n	db4d8 <memmove+0x26>
   db4e6:	bd10      	pop	{r4, pc}

000db4e8 <memset>:
   db4e8:	4402      	add	r2, r0
   db4ea:	4603      	mov	r3, r0
   db4ec:	4293      	cmp	r3, r2
   db4ee:	d002      	beq.n	db4f6 <memset+0xe>
   db4f0:	f803 1b01 	strb.w	r1, [r3], #1
   db4f4:	e7fa      	b.n	db4ec <memset+0x4>
   db4f6:	4770      	bx	lr

000db4f8 <validate_structure>:
   db4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db4fa:	6801      	ldr	r1, [r0, #0]
   db4fc:	293b      	cmp	r1, #59	; 0x3b
   db4fe:	4604      	mov	r4, r0
   db500:	d911      	bls.n	db526 <validate_structure+0x2e>
   db502:	223c      	movs	r2, #60	; 0x3c
   db504:	4668      	mov	r0, sp
   db506:	f001 fb3b 	bl	dcb80 <div>
   db50a:	9a01      	ldr	r2, [sp, #4]
   db50c:	6863      	ldr	r3, [r4, #4]
   db50e:	9900      	ldr	r1, [sp, #0]
   db510:	2a00      	cmp	r2, #0
   db512:	440b      	add	r3, r1
   db514:	6063      	str	r3, [r4, #4]
   db516:	bfbb      	ittet	lt
   db518:	323c      	addlt	r2, #60	; 0x3c
   db51a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db51e:	6022      	strge	r2, [r4, #0]
   db520:	6022      	strlt	r2, [r4, #0]
   db522:	bfb8      	it	lt
   db524:	6063      	strlt	r3, [r4, #4]
   db526:	6861      	ldr	r1, [r4, #4]
   db528:	293b      	cmp	r1, #59	; 0x3b
   db52a:	d911      	bls.n	db550 <validate_structure+0x58>
   db52c:	223c      	movs	r2, #60	; 0x3c
   db52e:	4668      	mov	r0, sp
   db530:	f001 fb26 	bl	dcb80 <div>
   db534:	9a01      	ldr	r2, [sp, #4]
   db536:	68a1      	ldr	r1, [r4, #8]
   db538:	9b00      	ldr	r3, [sp, #0]
   db53a:	2a00      	cmp	r2, #0
   db53c:	440b      	add	r3, r1
   db53e:	60a3      	str	r3, [r4, #8]
   db540:	bfbb      	ittet	lt
   db542:	323c      	addlt	r2, #60	; 0x3c
   db544:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db548:	6062      	strge	r2, [r4, #4]
   db54a:	6062      	strlt	r2, [r4, #4]
   db54c:	bfb8      	it	lt
   db54e:	60a3      	strlt	r3, [r4, #8]
   db550:	68a1      	ldr	r1, [r4, #8]
   db552:	2917      	cmp	r1, #23
   db554:	d911      	bls.n	db57a <validate_structure+0x82>
   db556:	2218      	movs	r2, #24
   db558:	4668      	mov	r0, sp
   db55a:	f001 fb11 	bl	dcb80 <div>
   db55e:	9a01      	ldr	r2, [sp, #4]
   db560:	68e1      	ldr	r1, [r4, #12]
   db562:	9b00      	ldr	r3, [sp, #0]
   db564:	2a00      	cmp	r2, #0
   db566:	440b      	add	r3, r1
   db568:	60e3      	str	r3, [r4, #12]
   db56a:	bfbb      	ittet	lt
   db56c:	3218      	addlt	r2, #24
   db56e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db572:	60a2      	strge	r2, [r4, #8]
   db574:	60a2      	strlt	r2, [r4, #8]
   db576:	bfb8      	it	lt
   db578:	60e3      	strlt	r3, [r4, #12]
   db57a:	6921      	ldr	r1, [r4, #16]
   db57c:	290b      	cmp	r1, #11
   db57e:	d911      	bls.n	db5a4 <validate_structure+0xac>
   db580:	220c      	movs	r2, #12
   db582:	4668      	mov	r0, sp
   db584:	f001 fafc 	bl	dcb80 <div>
   db588:	9a01      	ldr	r2, [sp, #4]
   db58a:	6961      	ldr	r1, [r4, #20]
   db58c:	9b00      	ldr	r3, [sp, #0]
   db58e:	2a00      	cmp	r2, #0
   db590:	440b      	add	r3, r1
   db592:	6163      	str	r3, [r4, #20]
   db594:	bfbb      	ittet	lt
   db596:	320c      	addlt	r2, #12
   db598:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db59c:	6122      	strge	r2, [r4, #16]
   db59e:	6122      	strlt	r2, [r4, #16]
   db5a0:	bfb8      	it	lt
   db5a2:	6163      	strlt	r3, [r4, #20]
   db5a4:	6963      	ldr	r3, [r4, #20]
   db5a6:	0799      	lsls	r1, r3, #30
   db5a8:	d112      	bne.n	db5d0 <validate_structure+0xd8>
   db5aa:	2164      	movs	r1, #100	; 0x64
   db5ac:	fb93 f2f1 	sdiv	r2, r3, r1
   db5b0:	fb01 3212 	mls	r2, r1, r2, r3
   db5b4:	b972      	cbnz	r2, db5d4 <validate_structure+0xdc>
   db5b6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db5ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db5be:	fb93 f2f1 	sdiv	r2, r3, r1
   db5c2:	fb01 3312 	mls	r3, r1, r2, r3
   db5c6:	2b00      	cmp	r3, #0
   db5c8:	bf14      	ite	ne
   db5ca:	231c      	movne	r3, #28
   db5cc:	231d      	moveq	r3, #29
   db5ce:	e002      	b.n	db5d6 <validate_structure+0xde>
   db5d0:	231c      	movs	r3, #28
   db5d2:	e000      	b.n	db5d6 <validate_structure+0xde>
   db5d4:	231d      	movs	r3, #29
   db5d6:	68e2      	ldr	r2, [r4, #12]
   db5d8:	2a00      	cmp	r2, #0
   db5da:	dd06      	ble.n	db5ea <validate_structure+0xf2>
   db5dc:	4f33      	ldr	r7, [pc, #204]	; (db6ac <validate_structure+0x1b4>)
   db5de:	f04f 0e00 	mov.w	lr, #0
   db5e2:	2564      	movs	r5, #100	; 0x64
   db5e4:	f44f 76c8 	mov.w	r6, #400	; 0x190
   db5e8:	e039      	b.n	db65e <validate_structure+0x166>
   db5ea:	4f30      	ldr	r7, [pc, #192]	; (db6ac <validate_structure+0x1b4>)
   db5ec:	260b      	movs	r6, #11
   db5ee:	2064      	movs	r0, #100	; 0x64
   db5f0:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db5f4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   db5f8:	f1be 0f00 	cmp.w	lr, #0
   db5fc:	dc53      	bgt.n	db6a6 <validate_structure+0x1ae>
   db5fe:	6921      	ldr	r1, [r4, #16]
   db600:	3901      	subs	r1, #1
   db602:	6121      	str	r1, [r4, #16]
   db604:	3101      	adds	r1, #1
   db606:	d118      	bne.n	db63a <validate_structure+0x142>
   db608:	6963      	ldr	r3, [r4, #20]
   db60a:	6126      	str	r6, [r4, #16]
   db60c:	1e59      	subs	r1, r3, #1
   db60e:	078a      	lsls	r2, r1, #30
   db610:	6161      	str	r1, [r4, #20]
   db612:	d10f      	bne.n	db634 <validate_structure+0x13c>
   db614:	fb91 f2f0 	sdiv	r2, r1, r0
   db618:	fb00 1112 	mls	r1, r0, r2, r1
   db61c:	b961      	cbnz	r1, db638 <validate_structure+0x140>
   db61e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db622:	fb93 f2f5 	sdiv	r2, r3, r5
   db626:	fb05 3312 	mls	r3, r5, r2, r3
   db62a:	2b00      	cmp	r3, #0
   db62c:	bf14      	ite	ne
   db62e:	231c      	movne	r3, #28
   db630:	231d      	moveq	r3, #29
   db632:	e002      	b.n	db63a <validate_structure+0x142>
   db634:	231c      	movs	r3, #28
   db636:	e000      	b.n	db63a <validate_structure+0x142>
   db638:	231d      	movs	r3, #29
   db63a:	6922      	ldr	r2, [r4, #16]
   db63c:	2a01      	cmp	r2, #1
   db63e:	bf14      	ite	ne
   db640:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   db644:	461a      	moveq	r2, r3
   db646:	4472      	add	r2, lr
   db648:	60e2      	str	r2, [r4, #12]
   db64a:	e7d3      	b.n	db5f4 <validate_structure+0xfc>
   db64c:	428b      	cmp	r3, r1
   db64e:	da2a      	bge.n	db6a6 <validate_structure+0x1ae>
   db650:	4618      	mov	r0, r3
   db652:	3201      	adds	r2, #1
   db654:	1a09      	subs	r1, r1, r0
   db656:	2a0c      	cmp	r2, #12
   db658:	60e1      	str	r1, [r4, #12]
   db65a:	6122      	str	r2, [r4, #16]
   db65c:	d008      	beq.n	db670 <validate_structure+0x178>
   db65e:	6922      	ldr	r2, [r4, #16]
   db660:	68e1      	ldr	r1, [r4, #12]
   db662:	2a01      	cmp	r2, #1
   db664:	d0f2      	beq.n	db64c <validate_structure+0x154>
   db666:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   db66a:	4281      	cmp	r1, r0
   db66c:	dcf1      	bgt.n	db652 <validate_structure+0x15a>
   db66e:	e01a      	b.n	db6a6 <validate_structure+0x1ae>
   db670:	6963      	ldr	r3, [r4, #20]
   db672:	f8c4 e010 	str.w	lr, [r4, #16]
   db676:	1c5a      	adds	r2, r3, #1
   db678:	0791      	lsls	r1, r2, #30
   db67a:	6162      	str	r2, [r4, #20]
   db67c:	d10f      	bne.n	db69e <validate_structure+0x1a6>
   db67e:	fb92 f1f5 	sdiv	r1, r2, r5
   db682:	fb05 2211 	mls	r2, r5, r1, r2
   db686:	b962      	cbnz	r2, db6a2 <validate_structure+0x1aa>
   db688:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   db68c:	fb93 f2f6 	sdiv	r2, r3, r6
   db690:	fb06 3312 	mls	r3, r6, r2, r3
   db694:	2b00      	cmp	r3, #0
   db696:	bf14      	ite	ne
   db698:	231c      	movne	r3, #28
   db69a:	231d      	moveq	r3, #29
   db69c:	e7df      	b.n	db65e <validate_structure+0x166>
   db69e:	231c      	movs	r3, #28
   db6a0:	e7dd      	b.n	db65e <validate_structure+0x166>
   db6a2:	231d      	movs	r3, #29
   db6a4:	e7db      	b.n	db65e <validate_structure+0x166>
   db6a6:	b003      	add	sp, #12
   db6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db6aa:	bf00      	nop
   db6ac:	000dddb4 	.word	0x000dddb4

000db6b0 <mktime>:
   db6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db6b4:	4605      	mov	r5, r0
   db6b6:	f001 fabb 	bl	dcc30 <__gettzinfo>
   db6ba:	4681      	mov	r9, r0
   db6bc:	4628      	mov	r0, r5
   db6be:	f7ff ff1b 	bl	db4f8 <validate_structure>
   db6c2:	e895 000c 	ldmia.w	r5, {r2, r3}
   db6c6:	213c      	movs	r1, #60	; 0x3c
   db6c8:	fb01 2303 	mla	r3, r1, r3, r2
   db6cc:	68aa      	ldr	r2, [r5, #8]
   db6ce:	68ec      	ldr	r4, [r5, #12]
   db6d0:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   db6d4:	fb08 3102 	mla	r1, r8, r2, r3
   db6d8:	692b      	ldr	r3, [r5, #16]
   db6da:	4aab      	ldr	r2, [pc, #684]	; (db988 <mktime+0x2d8>)
   db6dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   db6e0:	3c01      	subs	r4, #1
   db6e2:	2b01      	cmp	r3, #1
   db6e4:	4414      	add	r4, r2
   db6e6:	696b      	ldr	r3, [r5, #20]
   db6e8:	dd11      	ble.n	db70e <mktime+0x5e>
   db6ea:	079e      	lsls	r6, r3, #30
   db6ec:	d10f      	bne.n	db70e <mktime+0x5e>
   db6ee:	2064      	movs	r0, #100	; 0x64
   db6f0:	fb93 f2f0 	sdiv	r2, r3, r0
   db6f4:	fb00 3212 	mls	r2, r0, r2, r3
   db6f8:	b942      	cbnz	r2, db70c <mktime+0x5c>
   db6fa:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   db6fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db702:	fb96 f0f2 	sdiv	r0, r6, r2
   db706:	fb02 6210 	mls	r2, r2, r0, r6
   db70a:	b902      	cbnz	r2, db70e <mktime+0x5e>
   db70c:	3401      	adds	r4, #1
   db70e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   db712:	3210      	adds	r2, #16
   db714:	f644 6020 	movw	r0, #20000	; 0x4e20
   db718:	4282      	cmp	r2, r0
   db71a:	61ec      	str	r4, [r5, #28]
   db71c:	461f      	mov	r7, r3
   db71e:	f200 812e 	bhi.w	db97e <mktime+0x2ce>
   db722:	2b46      	cmp	r3, #70	; 0x46
   db724:	dd22      	ble.n	db76c <mktime+0xbc>
   db726:	2246      	movs	r2, #70	; 0x46
   db728:	f240 1c6d 	movw	ip, #365	; 0x16d
   db72c:	2664      	movs	r6, #100	; 0x64
   db72e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   db732:	0790      	lsls	r0, r2, #30
   db734:	d110      	bne.n	db758 <mktime+0xa8>
   db736:	fb92 f0f6 	sdiv	r0, r2, r6
   db73a:	fb06 2010 	mls	r0, r6, r0, r2
   db73e:	b970      	cbnz	r0, db75e <mktime+0xae>
   db740:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   db744:	fb98 f0fe 	sdiv	r0, r8, lr
   db748:	fb0e 8010 	mls	r0, lr, r0, r8
   db74c:	2800      	cmp	r0, #0
   db74e:	bf14      	ite	ne
   db750:	4660      	movne	r0, ip
   db752:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db756:	e004      	b.n	db762 <mktime+0xb2>
   db758:	f240 106d 	movw	r0, #365	; 0x16d
   db75c:	e001      	b.n	db762 <mktime+0xb2>
   db75e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db762:	3201      	adds	r2, #1
   db764:	4293      	cmp	r3, r2
   db766:	4404      	add	r4, r0
   db768:	d1e3      	bne.n	db732 <mktime+0x82>
   db76a:	e044      	b.n	db7f6 <mktime+0x146>
   db76c:	d043      	beq.n	db7f6 <mktime+0x146>
   db76e:	2245      	movs	r2, #69	; 0x45
   db770:	f240 1e6d 	movw	lr, #365	; 0x16d
   db774:	2664      	movs	r6, #100	; 0x64
   db776:	f44f 77c8 	mov.w	r7, #400	; 0x190
   db77a:	429a      	cmp	r2, r3
   db77c:	dd1a      	ble.n	db7b4 <mktime+0x104>
   db77e:	0790      	lsls	r0, r2, #30
   db780:	d110      	bne.n	db7a4 <mktime+0xf4>
   db782:	fb92 f0f6 	sdiv	r0, r2, r6
   db786:	fb06 2010 	mls	r0, r6, r0, r2
   db78a:	b970      	cbnz	r0, db7aa <mktime+0xfa>
   db78c:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   db790:	fb9c f0f7 	sdiv	r0, ip, r7
   db794:	fb07 c010 	mls	r0, r7, r0, ip
   db798:	2800      	cmp	r0, #0
   db79a:	bf14      	ite	ne
   db79c:	4670      	movne	r0, lr
   db79e:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db7a2:	e004      	b.n	db7ae <mktime+0xfe>
   db7a4:	f240 106d 	movw	r0, #365	; 0x16d
   db7a8:	e001      	b.n	db7ae <mktime+0xfe>
   db7aa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db7ae:	1a24      	subs	r4, r4, r0
   db7b0:	3a01      	subs	r2, #1
   db7b2:	e7e2      	b.n	db77a <mktime+0xca>
   db7b4:	2b45      	cmp	r3, #69	; 0x45
   db7b6:	bfa8      	it	ge
   db7b8:	2345      	movge	r3, #69	; 0x45
   db7ba:	079e      	lsls	r6, r3, #30
   db7bc:	461f      	mov	r7, r3
   db7be:	d114      	bne.n	db7ea <mktime+0x13a>
   db7c0:	2264      	movs	r2, #100	; 0x64
   db7c2:	fb93 f3f2 	sdiv	r3, r3, r2
   db7c6:	fb02 7313 	mls	r3, r2, r3, r7
   db7ca:	b98b      	cbnz	r3, db7f0 <mktime+0x140>
   db7cc:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   db7d0:	f44f 73c8 	mov.w	r3, #400	; 0x190
   db7d4:	fb90 f2f3 	sdiv	r2, r0, r3
   db7d8:	fb03 0312 	mls	r3, r3, r2, r0
   db7dc:	2b00      	cmp	r3, #0
   db7de:	f240 136d 	movw	r3, #365	; 0x16d
   db7e2:	bf08      	it	eq
   db7e4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   db7e8:	e004      	b.n	db7f4 <mktime+0x144>
   db7ea:	f240 136d 	movw	r3, #365	; 0x16d
   db7ee:	e001      	b.n	db7f4 <mktime+0x144>
   db7f0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   db7f4:	1ae4      	subs	r4, r4, r3
   db7f6:	4865      	ldr	r0, [pc, #404]	; (db98c <mktime+0x2dc>)
   db7f8:	fb00 1804 	mla	r8, r0, r4, r1
   db7fc:	f001 f834 	bl	dc868 <__tz_lock>
   db800:	f001 f834 	bl	dc86c <_tzset_unlocked>
   db804:	4b62      	ldr	r3, [pc, #392]	; (db990 <mktime+0x2e0>)
   db806:	681e      	ldr	r6, [r3, #0]
   db808:	2e00      	cmp	r6, #0
   db80a:	f000 80a4 	beq.w	db956 <mktime+0x2a6>
   db80e:	6a2b      	ldr	r3, [r5, #32]
   db810:	6968      	ldr	r0, [r5, #20]
   db812:	2b01      	cmp	r3, #1
   db814:	bfa8      	it	ge
   db816:	2301      	movge	r3, #1
   db818:	469a      	mov	sl, r3
   db81a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   db81e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db822:	4298      	cmp	r0, r3
   db824:	d10d      	bne.n	db842 <mktime+0x192>
   db826:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   db82a:	f8d9 3020 	ldr.w	r3, [r9, #32]
   db82e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db832:	f8d9 101c 	ldr.w	r1, [r9, #28]
   db836:	1ad6      	subs	r6, r2, r3
   db838:	45b0      	cmp	r8, r6
   db83a:	eba1 0100 	sub.w	r1, r1, r0
   db83e:	da05      	bge.n	db84c <mktime+0x19c>
   db840:	e007      	b.n	db852 <mktime+0x1a2>
   db842:	f000 ff69 	bl	dc718 <__tzcalc_limits>
   db846:	2800      	cmp	r0, #0
   db848:	d1ed      	bne.n	db826 <mktime+0x176>
   db84a:	e076      	b.n	db93a <mktime+0x28a>
   db84c:	1a12      	subs	r2, r2, r0
   db84e:	4590      	cmp	r8, r2
   db850:	db73      	blt.n	db93a <mktime+0x28a>
   db852:	f8d9 2000 	ldr.w	r2, [r9]
   db856:	b112      	cbz	r2, db85e <mktime+0x1ae>
   db858:	4588      	cmp	r8, r1
   db85a:	db77      	blt.n	db94c <mktime+0x29c>
   db85c:	e001      	b.n	db862 <mktime+0x1b2>
   db85e:	4588      	cmp	r8, r1
   db860:	da07      	bge.n	db872 <mktime+0x1c2>
   db862:	45b0      	cmp	r8, r6
   db864:	bfac      	ite	ge
   db866:	2600      	movge	r6, #0
   db868:	2601      	movlt	r6, #1
   db86a:	f1ba 0f00 	cmp.w	sl, #0
   db86e:	da04      	bge.n	db87a <mktime+0x1ca>
   db870:	e064      	b.n	db93c <mktime+0x28c>
   db872:	f1ba 0f00 	cmp.w	sl, #0
   db876:	db63      	blt.n	db940 <mktime+0x290>
   db878:	2601      	movs	r6, #1
   db87a:	ea8a 0a06 	eor.w	sl, sl, r6
   db87e:	f1ba 0f01 	cmp.w	sl, #1
   db882:	d15b      	bne.n	db93c <mktime+0x28c>
   db884:	1a1b      	subs	r3, r3, r0
   db886:	b906      	cbnz	r6, db88a <mktime+0x1da>
   db888:	425b      	negs	r3, r3
   db88a:	682a      	ldr	r2, [r5, #0]
   db88c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   db890:	441a      	add	r2, r3
   db892:	602a      	str	r2, [r5, #0]
   db894:	4628      	mov	r0, r5
   db896:	4498      	add	r8, r3
   db898:	f7ff fe2e 	bl	db4f8 <validate_structure>
   db89c:	68eb      	ldr	r3, [r5, #12]
   db89e:	ebb3 030a 	subs.w	r3, r3, sl
   db8a2:	d04b      	beq.n	db93c <mktime+0x28c>
   db8a4:	2b01      	cmp	r3, #1
   db8a6:	dc03      	bgt.n	db8b0 <mktime+0x200>
   db8a8:	1c98      	adds	r0, r3, #2
   db8aa:	bfd8      	it	le
   db8ac:	2301      	movle	r3, #1
   db8ae:	e001      	b.n	db8b4 <mktime+0x204>
   db8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db8b4:	69ea      	ldr	r2, [r5, #28]
   db8b6:	441c      	add	r4, r3
   db8b8:	189b      	adds	r3, r3, r2
   db8ba:	d51d      	bpl.n	db8f8 <mktime+0x248>
   db8bc:	1e7b      	subs	r3, r7, #1
   db8be:	0799      	lsls	r1, r3, #30
   db8c0:	d114      	bne.n	db8ec <mktime+0x23c>
   db8c2:	2164      	movs	r1, #100	; 0x64
   db8c4:	fb93 f2f1 	sdiv	r2, r3, r1
   db8c8:	fb01 3312 	mls	r3, r1, r2, r3
   db8cc:	b98b      	cbnz	r3, db8f2 <mktime+0x242>
   db8ce:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   db8d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db8d6:	fb97 f3f2 	sdiv	r3, r7, r2
   db8da:	fb02 7713 	mls	r7, r2, r3, r7
   db8de:	2f00      	cmp	r7, #0
   db8e0:	f240 136d 	movw	r3, #365	; 0x16d
   db8e4:	bf18      	it	ne
   db8e6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   db8ea:	e024      	b.n	db936 <mktime+0x286>
   db8ec:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   db8f0:	e021      	b.n	db936 <mktime+0x286>
   db8f2:	f240 136d 	movw	r3, #365	; 0x16d
   db8f6:	e01e      	b.n	db936 <mktime+0x286>
   db8f8:	07ba      	lsls	r2, r7, #30
   db8fa:	d114      	bne.n	db926 <mktime+0x276>
   db8fc:	2164      	movs	r1, #100	; 0x64
   db8fe:	fb97 f2f1 	sdiv	r2, r7, r1
   db902:	fb01 7212 	mls	r2, r1, r2, r7
   db906:	b98a      	cbnz	r2, db92c <mktime+0x27c>
   db908:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   db90c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db910:	fb97 f2f1 	sdiv	r2, r7, r1
   db914:	fb01 7712 	mls	r7, r1, r2, r7
   db918:	2f00      	cmp	r7, #0
   db91a:	f240 126d 	movw	r2, #365	; 0x16d
   db91e:	bf08      	it	eq
   db920:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db924:	e004      	b.n	db930 <mktime+0x280>
   db926:	f240 126d 	movw	r2, #365	; 0x16d
   db92a:	e001      	b.n	db930 <mktime+0x280>
   db92c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db930:	429a      	cmp	r2, r3
   db932:	bfd8      	it	le
   db934:	1a9b      	suble	r3, r3, r2
   db936:	61eb      	str	r3, [r5, #28]
   db938:	e000      	b.n	db93c <mktime+0x28c>
   db93a:	4656      	mov	r6, sl
   db93c:	2e01      	cmp	r6, #1
   db93e:	d10a      	bne.n	db956 <mktime+0x2a6>
   db940:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db944:	2601      	movs	r6, #1
   db946:	eb08 0700 	add.w	r7, r8, r0
   db94a:	e008      	b.n	db95e <mktime+0x2ae>
   db94c:	f1ba 0f00 	cmp.w	sl, #0
   db950:	f04f 0600 	mov.w	r6, #0
   db954:	da91      	bge.n	db87a <mktime+0x1ca>
   db956:	f8d9 0020 	ldr.w	r0, [r9, #32]
   db95a:	eb08 0700 	add.w	r7, r8, r0
   db95e:	f000 ff84 	bl	dc86a <__tz_unlock>
   db962:	3404      	adds	r4, #4
   db964:	2307      	movs	r3, #7
   db966:	fb94 f3f3 	sdiv	r3, r4, r3
   db96a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db96e:	1ae4      	subs	r4, r4, r3
   db970:	bf48      	it	mi
   db972:	3407      	addmi	r4, #7
   db974:	622e      	str	r6, [r5, #32]
   db976:	61ac      	str	r4, [r5, #24]
   db978:	4638      	mov	r0, r7
   db97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db986:	bf00      	nop
   db988:	000ddd84 	.word	0x000ddd84
   db98c:	00015180 	.word	0x00015180
   db990:	2003e7e4 	.word	0x2003e7e4

000db994 <srand>:
   db994:	b538      	push	{r3, r4, r5, lr}
   db996:	4b12      	ldr	r3, [pc, #72]	; (db9e0 <srand+0x4c>)
   db998:	681c      	ldr	r4, [r3, #0]
   db99a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db99c:	4605      	mov	r5, r0
   db99e:	b9d3      	cbnz	r3, db9d6 <srand+0x42>
   db9a0:	2018      	movs	r0, #24
   db9a2:	f7fc fd2b 	bl	d83fc <malloc>
   db9a6:	f243 330e 	movw	r3, #13070	; 0x330e
   db9aa:	63a0      	str	r0, [r4, #56]	; 0x38
   db9ac:	8003      	strh	r3, [r0, #0]
   db9ae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db9b2:	8043      	strh	r3, [r0, #2]
   db9b4:	f241 2334 	movw	r3, #4660	; 0x1234
   db9b8:	8083      	strh	r3, [r0, #4]
   db9ba:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db9be:	80c3      	strh	r3, [r0, #6]
   db9c0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db9c4:	8103      	strh	r3, [r0, #8]
   db9c6:	2305      	movs	r3, #5
   db9c8:	8143      	strh	r3, [r0, #10]
   db9ca:	230b      	movs	r3, #11
   db9cc:	8183      	strh	r3, [r0, #12]
   db9ce:	2201      	movs	r2, #1
   db9d0:	2300      	movs	r3, #0
   db9d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db9d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db9d8:	2200      	movs	r2, #0
   db9da:	611d      	str	r5, [r3, #16]
   db9dc:	615a      	str	r2, [r3, #20]
   db9de:	bd38      	pop	{r3, r4, r5, pc}
   db9e0:	2003de38 	.word	0x2003de38

000db9e4 <strcmp>:
   db9e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   db9e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   db9ec:	2a01      	cmp	r2, #1
   db9ee:	bf28      	it	cs
   db9f0:	429a      	cmpcs	r2, r3
   db9f2:	d0f7      	beq.n	db9e4 <strcmp>
   db9f4:	1ad0      	subs	r0, r2, r3
   db9f6:	4770      	bx	lr

000db9f8 <strcpy>:
   db9f8:	4603      	mov	r3, r0
   db9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   db9fe:	f803 2b01 	strb.w	r2, [r3], #1
   dba02:	2a00      	cmp	r2, #0
   dba04:	d1f9      	bne.n	db9fa <strcpy+0x2>
   dba06:	4770      	bx	lr

000dba08 <strdup>:
   dba08:	4b02      	ldr	r3, [pc, #8]	; (dba14 <strdup+0xc>)
   dba0a:	4601      	mov	r1, r0
   dba0c:	6818      	ldr	r0, [r3, #0]
   dba0e:	f000 b803 	b.w	dba18 <_strdup_r>
   dba12:	bf00      	nop
   dba14:	2003de38 	.word	0x2003de38

000dba18 <_strdup_r>:
   dba18:	b570      	push	{r4, r5, r6, lr}
   dba1a:	4606      	mov	r6, r0
   dba1c:	4608      	mov	r0, r1
   dba1e:	460c      	mov	r4, r1
   dba20:	f000 fd22 	bl	dc468 <strlen>
   dba24:	1c45      	adds	r5, r0, #1
   dba26:	4629      	mov	r1, r5
   dba28:	4630      	mov	r0, r6
   dba2a:	f7fc fd2f 	bl	d848c <_malloc_r>
   dba2e:	4606      	mov	r6, r0
   dba30:	b118      	cbz	r0, dba3a <_strdup_r+0x22>
   dba32:	462a      	mov	r2, r5
   dba34:	4621      	mov	r1, r4
   dba36:	f7ff fd31 	bl	db49c <memcpy>
   dba3a:	4630      	mov	r0, r6
   dba3c:	bd70      	pop	{r4, r5, r6, pc}

000dba3e <iso_year_adjust>:
   dba3e:	6941      	ldr	r1, [r0, #20]
   dba40:	078b      	lsls	r3, r1, #30
   dba42:	b510      	push	{r4, lr}
   dba44:	d10c      	bne.n	dba60 <iso_year_adjust+0x22>
   dba46:	2900      	cmp	r1, #0
   dba48:	f240 736c 	movw	r3, #1900	; 0x76c
   dba4c:	bfa8      	it	ge
   dba4e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dba52:	440b      	add	r3, r1
   dba54:	2464      	movs	r4, #100	; 0x64
   dba56:	fb93 f2f4 	sdiv	r2, r3, r4
   dba5a:	fb04 3312 	mls	r3, r4, r2, r3
   dba5e:	b983      	cbnz	r3, dba82 <iso_year_adjust+0x44>
   dba60:	2900      	cmp	r1, #0
   dba62:	f240 736c 	movw	r3, #1900	; 0x76c
   dba66:	bfa8      	it	ge
   dba68:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   dba6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dba70:	440b      	add	r3, r1
   dba72:	fb93 f1f2 	sdiv	r1, r3, r2
   dba76:	fb02 3311 	mls	r3, r2, r1, r3
   dba7a:	fab3 f283 	clz	r2, r3
   dba7e:	0952      	lsrs	r2, r2, #5
   dba80:	e000      	b.n	dba84 <iso_year_adjust+0x46>
   dba82:	2201      	movs	r2, #1
   dba84:	6983      	ldr	r3, [r0, #24]
   dba86:	69c1      	ldr	r1, [r0, #28]
   dba88:	005b      	lsls	r3, r3, #1
   dba8a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   dba8e:	4413      	add	r3, r2
   dba90:	2b21      	cmp	r3, #33	; 0x21
   dba92:	dc0e      	bgt.n	dbab2 <iso_year_adjust+0x74>
   dba94:	2b20      	cmp	r3, #32
   dba96:	da2f      	bge.n	dbaf8 <iso_year_adjust+0xba>
   dba98:	2b0d      	cmp	r3, #13
   dba9a:	dc02      	bgt.n	dbaa2 <iso_year_adjust+0x64>
   dba9c:	2b0a      	cmp	r3, #10
   dba9e:	db05      	blt.n	dbaac <iso_year_adjust+0x6e>
   dbaa0:	e02a      	b.n	dbaf8 <iso_year_adjust+0xba>
   dbaa2:	2b10      	cmp	r3, #16
   dbaa4:	db26      	blt.n	dbaf4 <iso_year_adjust+0xb6>
   dbaa6:	2b11      	cmp	r3, #17
   dbaa8:	dd26      	ble.n	dbaf8 <iso_year_adjust+0xba>
   dbaaa:	3b1c      	subs	r3, #28
   dbaac:	2b01      	cmp	r3, #1
   dbaae:	d923      	bls.n	dbaf8 <iso_year_adjust+0xba>
   dbab0:	e020      	b.n	dbaf4 <iso_year_adjust+0xb6>
   dbab2:	f241 62c6 	movw	r2, #5830	; 0x16c6
   dbab6:	4293      	cmp	r3, r2
   dbab8:	dc0e      	bgt.n	dbad8 <iso_year_adjust+0x9a>
   dbaba:	f241 62c2 	movw	r2, #5826	; 0x16c2
   dbabe:	4293      	cmp	r3, r2
   dbac0:	da16      	bge.n	dbaf0 <iso_year_adjust+0xb2>
   dbac2:	f241 62a2 	movw	r2, #5794	; 0x16a2
   dbac6:	4293      	cmp	r3, r2
   dbac8:	d012      	beq.n	dbaf0 <iso_year_adjust+0xb2>
   dbaca:	db13      	blt.n	dbaf4 <iso_year_adjust+0xb6>
   dbacc:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   dbad0:	3b12      	subs	r3, #18
   dbad2:	2b02      	cmp	r3, #2
   dbad4:	d90c      	bls.n	dbaf0 <iso_year_adjust+0xb2>
   dbad6:	e00d      	b.n	dbaf4 <iso_year_adjust+0xb6>
   dbad8:	f241 62d5 	movw	r2, #5845	; 0x16d5
   dbadc:	4293      	cmp	r3, r2
   dbade:	d007      	beq.n	dbaf0 <iso_year_adjust+0xb2>
   dbae0:	f241 62d7 	movw	r2, #5847	; 0x16d7
   dbae4:	4293      	cmp	r3, r2
   dbae6:	d003      	beq.n	dbaf0 <iso_year_adjust+0xb2>
   dbae8:	f241 62d3 	movw	r2, #5843	; 0x16d3
   dbaec:	4293      	cmp	r3, r2
   dbaee:	d101      	bne.n	dbaf4 <iso_year_adjust+0xb6>
   dbaf0:	2001      	movs	r0, #1
   dbaf2:	bd10      	pop	{r4, pc}
   dbaf4:	2000      	movs	r0, #0
   dbaf6:	bd10      	pop	{r4, pc}
   dbaf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbafc:	bd10      	pop	{r4, pc}
	...

000dbb00 <strftime>:
   dbb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbb04:	b093      	sub	sp, #76	; 0x4c
   dbb06:	460e      	mov	r6, r1
   dbb08:	461d      	mov	r5, r3
   dbb0a:	4607      	mov	r7, r0
   dbb0c:	4691      	mov	r9, r2
   dbb0e:	f000 fdf3 	bl	dc6f8 <__get_current_time_locale>
   dbb12:	2300      	movs	r3, #0
   dbb14:	9306      	str	r3, [sp, #24]
   dbb16:	461c      	mov	r4, r3
   dbb18:	1e73      	subs	r3, r6, #1
   dbb1a:	9003      	str	r0, [sp, #12]
   dbb1c:	9302      	str	r3, [sp, #8]
   dbb1e:	f899 3000 	ldrb.w	r3, [r9]
   dbb22:	2b00      	cmp	r3, #0
   dbb24:	f000 8492 	beq.w	dc44c <strftime+0x94c>
   dbb28:	2b25      	cmp	r3, #37	; 0x25
   dbb2a:	d008      	beq.n	dbb3e <strftime+0x3e>
   dbb2c:	9a02      	ldr	r2, [sp, #8]
   dbb2e:	4294      	cmp	r4, r2
   dbb30:	f080 8490 	bcs.w	dc454 <strftime+0x954>
   dbb34:	553b      	strb	r3, [r7, r4]
   dbb36:	f109 0901 	add.w	r9, r9, #1
   dbb3a:	3401      	adds	r4, #1
   dbb3c:	e7ef      	b.n	dbb1e <strftime+0x1e>
   dbb3e:	f899 a001 	ldrb.w	sl, [r9, #1]
   dbb42:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   dbb46:	d007      	beq.n	dbb58 <strftime+0x58>
   dbb48:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbb4c:	d004      	beq.n	dbb58 <strftime+0x58>
   dbb4e:	f109 0901 	add.w	r9, r9, #1
   dbb52:	f04f 0a00 	mov.w	sl, #0
   dbb56:	e001      	b.n	dbb5c <strftime+0x5c>
   dbb58:	f109 0902 	add.w	r9, r9, #2
   dbb5c:	f899 3000 	ldrb.w	r3, [r9]
   dbb60:	3b31      	subs	r3, #49	; 0x31
   dbb62:	2b08      	cmp	r3, #8
   dbb64:	d808      	bhi.n	dbb78 <strftime+0x78>
   dbb66:	4648      	mov	r0, r9
   dbb68:	220a      	movs	r2, #10
   dbb6a:	a90a      	add	r1, sp, #40	; 0x28
   dbb6c:	f000 fdba 	bl	dc6e4 <strtoul>
   dbb70:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   dbb74:	4680      	mov	r8, r0
   dbb76:	e001      	b.n	dbb7c <strftime+0x7c>
   dbb78:	f04f 0800 	mov.w	r8, #0
   dbb7c:	f899 3000 	ldrb.w	r3, [r9]
   dbb80:	2b45      	cmp	r3, #69	; 0x45
   dbb82:	d001      	beq.n	dbb88 <strftime+0x88>
   dbb84:	2b4f      	cmp	r3, #79	; 0x4f
   dbb86:	d101      	bne.n	dbb8c <strftime+0x8c>
   dbb88:	f109 0901 	add.w	r9, r9, #1
   dbb8c:	f899 0000 	ldrb.w	r0, [r9]
   dbb90:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   dbb94:	2b55      	cmp	r3, #85	; 0x55
   dbb96:	f200 845d 	bhi.w	dc454 <strftime+0x954>
   dbb9a:	e8df f013 	tbh	[pc, r3, lsl #1]
   dbb9e:	044a      	.short	0x044a
   dbba0:	045b045b 	.word	0x045b045b
   dbba4:	045b045b 	.word	0x045b045b
   dbba8:	045b045b 	.word	0x045b045b
   dbbac:	045b045b 	.word	0x045b045b
   dbbb0:	045b045b 	.word	0x045b045b
   dbbb4:	045b045b 	.word	0x045b045b
   dbbb8:	045b045b 	.word	0x045b045b
   dbbbc:	045b045b 	.word	0x045b045b
   dbbc0:	045b045b 	.word	0x045b045b
   dbbc4:	045b045b 	.word	0x045b045b
   dbbc8:	045b045b 	.word	0x045b045b
   dbbcc:	045b045b 	.word	0x045b045b
   dbbd0:	045b045b 	.word	0x045b045b
   dbbd4:	006f045b 	.word	0x006f045b
   dbbd8:	00d400a1 	.word	0x00d400a1
   dbbdc:	045b011a 	.word	0x045b011a
   dbbe0:	01a0013f 	.word	0x01a0013f
   dbbe4:	022d0226 	.word	0x022d0226
   dbbe8:	045b045b 	.word	0x045b045b
   dbbec:	0260045b 	.word	0x0260045b
   dbbf0:	045b045b 	.word	0x045b045b
   dbbf4:	045b0268 	.word	0x045b0268
   dbbf8:	031d0297 	.word	0x031d0297
   dbbfc:	033b0325 	.word	0x033b0325
   dbc00:	03860343 	.word	0x03860343
   dbc04:	03a000c6 	.word	0x03a000c6
   dbc08:	045b041f 	.word	0x045b041f
   dbc0c:	045b045b 	.word	0x045b045b
   dbc10:	045b045b 	.word	0x045b045b
   dbc14:	0056045b 	.word	0x0056045b
   dbc18:	00ba0089 	.word	0x00ba0089
   dbc1c:	010c010c 	.word	0x010c010c
   dbc20:	0171045b 	.word	0x0171045b
   dbc24:	045b0089 	.word	0x045b0089
   dbc28:	0226023d 	.word	0x0226023d
   dbc2c:	025d022d 	.word	0x025d022d
   dbc30:	045b0262 	.word	0x045b0262
   dbc34:	045b0268 	.word	0x045b0268
   dbc38:	029c00be 	.word	0x029c00be
   dbc3c:	032e031f 	.word	0x032e031f
   dbc40:	037f045b 	.word	0x037f045b
   dbc44:	039200c2 	.word	0x039200c2
   dbc48:	03e7      	.short	0x03e7
   dbc4a:	69ab      	ldr	r3, [r5, #24]
   dbc4c:	9a03      	ldr	r2, [sp, #12]
   dbc4e:	3318      	adds	r3, #24
   dbc50:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbc54:	4640      	mov	r0, r8
   dbc56:	f000 fc07 	bl	dc468 <strlen>
   dbc5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbc5e:	193b      	adds	r3, r7, r4
   dbc60:	4420      	add	r0, r4
   dbc62:	4284      	cmp	r4, r0
   dbc64:	f000 83eb 	beq.w	dc43e <strftime+0x93e>
   dbc68:	9a02      	ldr	r2, [sp, #8]
   dbc6a:	4294      	cmp	r4, r2
   dbc6c:	f080 83f2 	bcs.w	dc454 <strftime+0x954>
   dbc70:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbc74:	f803 2b01 	strb.w	r2, [r3], #1
   dbc78:	3401      	adds	r4, #1
   dbc7a:	e7f2      	b.n	dbc62 <strftime+0x162>
   dbc7c:	69ab      	ldr	r3, [r5, #24]
   dbc7e:	9a03      	ldr	r2, [sp, #12]
   dbc80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbc84:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dbc88:	4640      	mov	r0, r8
   dbc8a:	f000 fbed 	bl	dc468 <strlen>
   dbc8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbc92:	193b      	adds	r3, r7, r4
   dbc94:	4420      	add	r0, r4
   dbc96:	4284      	cmp	r4, r0
   dbc98:	f000 83d1 	beq.w	dc43e <strftime+0x93e>
   dbc9c:	9a02      	ldr	r2, [sp, #8]
   dbc9e:	4294      	cmp	r4, r2
   dbca0:	f080 83d8 	bcs.w	dc454 <strftime+0x954>
   dbca4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbca8:	f803 2b01 	strb.w	r2, [r3], #1
   dbcac:	3401      	adds	r4, #1
   dbcae:	e7f2      	b.n	dbc96 <strftime+0x196>
   dbcb0:	692b      	ldr	r3, [r5, #16]
   dbcb2:	9a03      	ldr	r2, [sp, #12]
   dbcb4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbcb8:	4640      	mov	r0, r8
   dbcba:	f000 fbd5 	bl	dc468 <strlen>
   dbcbe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbcc2:	193b      	adds	r3, r7, r4
   dbcc4:	4420      	add	r0, r4
   dbcc6:	4284      	cmp	r4, r0
   dbcc8:	f000 83b9 	beq.w	dc43e <strftime+0x93e>
   dbccc:	9a02      	ldr	r2, [sp, #8]
   dbcce:	4294      	cmp	r4, r2
   dbcd0:	f080 83c0 	bcs.w	dc454 <strftime+0x954>
   dbcd4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbcd8:	f803 2b01 	strb.w	r2, [r3], #1
   dbcdc:	3401      	adds	r4, #1
   dbcde:	e7f2      	b.n	dbcc6 <strftime+0x1c6>
   dbce0:	692b      	ldr	r3, [r5, #16]
   dbce2:	9a03      	ldr	r2, [sp, #12]
   dbce4:	330c      	adds	r3, #12
   dbce6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbcea:	4640      	mov	r0, r8
   dbcec:	f000 fbbc 	bl	dc468 <strlen>
   dbcf0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbcf4:	193b      	adds	r3, r7, r4
   dbcf6:	4420      	add	r0, r4
   dbcf8:	4284      	cmp	r4, r0
   dbcfa:	f000 83a0 	beq.w	dc43e <strftime+0x93e>
   dbcfe:	9a02      	ldr	r2, [sp, #8]
   dbd00:	4294      	cmp	r4, r2
   dbd02:	f080 83a7 	bcs.w	dc454 <strftime+0x954>
   dbd06:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbd0a:	f803 2b01 	strb.w	r2, [r3], #1
   dbd0e:	3401      	adds	r4, #1
   dbd10:	e7f2      	b.n	dbcf8 <strftime+0x1f8>
   dbd12:	9b03      	ldr	r3, [sp, #12]
   dbd14:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dbd18:	e00a      	b.n	dbd30 <strftime+0x230>
   dbd1a:	9b03      	ldr	r3, [sp, #12]
   dbd1c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dbd20:	e006      	b.n	dbd30 <strftime+0x230>
   dbd22:	9b03      	ldr	r3, [sp, #12]
   dbd24:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dbd28:	e002      	b.n	dbd30 <strftime+0x230>
   dbd2a:	9b03      	ldr	r3, [sp, #12]
   dbd2c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dbd30:	4640      	mov	r0, r8
   dbd32:	f000 fb99 	bl	dc468 <strlen>
   dbd36:	f898 3000 	ldrb.w	r3, [r8]
   dbd3a:	2b00      	cmp	r3, #0
   dbd3c:	f000 837f 	beq.w	dc43e <strftime+0x93e>
   dbd40:	462b      	mov	r3, r5
   dbd42:	4642      	mov	r2, r8
   dbd44:	e093      	b.n	dbe6e <strftime+0x36e>
   dbd46:	49b6      	ldr	r1, [pc, #728]	; (dc020 <strftime+0x520>)
   dbd48:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbd4c:	458b      	cmp	fp, r1
   dbd4e:	bfac      	ite	ge
   dbd50:	2100      	movge	r1, #0
   dbd52:	2101      	movlt	r1, #1
   dbd54:	f1bb 0f00 	cmp.w	fp, #0
   dbd58:	db04      	blt.n	dbd64 <strftime+0x264>
   dbd5a:	2064      	movs	r0, #100	; 0x64
   dbd5c:	fb9b f0f0 	sdiv	r0, fp, r0
   dbd60:	3013      	adds	r0, #19
   dbd62:	e008      	b.n	dbd76 <strftime+0x276>
   dbd64:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbd68:	9107      	str	r1, [sp, #28]
   dbd6a:	f000 ff05 	bl	dcb78 <abs>
   dbd6e:	9907      	ldr	r1, [sp, #28]
   dbd70:	2364      	movs	r3, #100	; 0x64
   dbd72:	fb90 f0f3 	sdiv	r0, r0, r3
   dbd76:	f1ba 0f00 	cmp.w	sl, #0
   dbd7a:	d008      	beq.n	dbd8e <strftime+0x28e>
   dbd7c:	2863      	cmp	r0, #99	; 0x63
   dbd7e:	dd09      	ble.n	dbd94 <strftime+0x294>
   dbd80:	4ba8      	ldr	r3, [pc, #672]	; (dc024 <strftime+0x524>)
   dbd82:	4aa9      	ldr	r2, [pc, #676]	; (dc028 <strftime+0x528>)
   dbd84:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbd88:	bf18      	it	ne
   dbd8a:	4613      	movne	r3, r2
   dbd8c:	e003      	b.n	dbd96 <strftime+0x296>
   dbd8e:	4ba6      	ldr	r3, [pc, #664]	; (dc028 <strftime+0x528>)
   dbd90:	4aa6      	ldr	r2, [pc, #664]	; (dc02c <strftime+0x52c>)
   dbd92:	e001      	b.n	dbd98 <strftime+0x298>
   dbd94:	4ba4      	ldr	r3, [pc, #656]	; (dc028 <strftime+0x528>)
   dbd96:	4aa6      	ldr	r2, [pc, #664]	; (dc030 <strftime+0x530>)
   dbd98:	9001      	str	r0, [sp, #4]
   dbd9a:	f1b8 0f01 	cmp.w	r8, #1
   dbd9e:	bf98      	it	ls
   dbda0:	f04f 0802 	movls.w	r8, #2
   dbda4:	ebc1 0108 	rsb	r1, r1, r8
   dbda8:	9100      	str	r1, [sp, #0]
   dbdaa:	489d      	ldr	r0, [pc, #628]	; (dc020 <strftime+0x520>)
   dbdac:	49a1      	ldr	r1, [pc, #644]	; (dc034 <strftime+0x534>)
   dbdae:	4583      	cmp	fp, r0
   dbdb0:	bfb8      	it	lt
   dbdb2:	460b      	movlt	r3, r1
   dbdb4:	e21e      	b.n	dc1f4 <strftime+0x6f4>
   dbdb6:	4aa0      	ldr	r2, [pc, #640]	; (dc038 <strftime+0x538>)
   dbdb8:	49a0      	ldr	r1, [pc, #640]	; (dc03c <strftime+0x53c>)
   dbdba:	68eb      	ldr	r3, [r5, #12]
   dbdbc:	2864      	cmp	r0, #100	; 0x64
   dbdbe:	bf08      	it	eq
   dbdc0:	460a      	moveq	r2, r1
   dbdc2:	1b31      	subs	r1, r6, r4
   dbdc4:	1938      	adds	r0, r7, r4
   dbdc6:	f7fc fb49 	bl	d845c <sniprintf>
   dbdca:	2800      	cmp	r0, #0
   dbdcc:	f280 8302 	bge.w	dc3d4 <strftime+0x8d4>
   dbdd0:	e340      	b.n	dc454 <strftime+0x954>
   dbdd2:	6968      	ldr	r0, [r5, #20]
   dbdd4:	692b      	ldr	r3, [r5, #16]
   dbdd6:	2800      	cmp	r0, #0
   dbdd8:	f103 0b01 	add.w	fp, r3, #1
   dbddc:	eb07 0804 	add.w	r8, r7, r4
   dbde0:	ebc4 0a06 	rsb	sl, r4, r6
   dbde4:	68eb      	ldr	r3, [r5, #12]
   dbde6:	db05      	blt.n	dbdf4 <strftime+0x2f4>
   dbde8:	2264      	movs	r2, #100	; 0x64
   dbdea:	fb90 f1f2 	sdiv	r1, r0, r2
   dbdee:	fb02 0011 	mls	r0, r2, r1, r0
   dbdf2:	e00a      	b.n	dbe0a <strftime+0x30a>
   dbdf4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbdf8:	9307      	str	r3, [sp, #28]
   dbdfa:	f000 febd 	bl	dcb78 <abs>
   dbdfe:	2264      	movs	r2, #100	; 0x64
   dbe00:	9b07      	ldr	r3, [sp, #28]
   dbe02:	fb90 f1f2 	sdiv	r1, r0, r2
   dbe06:	fb01 0012 	mls	r0, r1, r2, r0
   dbe0a:	4a8d      	ldr	r2, [pc, #564]	; (dc040 <strftime+0x540>)
   dbe0c:	9001      	str	r0, [sp, #4]
   dbe0e:	9300      	str	r3, [sp, #0]
   dbe10:	4651      	mov	r1, sl
   dbe12:	465b      	mov	r3, fp
   dbe14:	4640      	mov	r0, r8
   dbe16:	f7fc fb21 	bl	d845c <sniprintf>
   dbe1a:	e7d6      	b.n	dbdca <strftime+0x2ca>
   dbe1c:	2325      	movs	r3, #37	; 0x25
   dbe1e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbe22:	f1ba 0f00 	cmp.w	sl, #0
   dbe26:	d007      	beq.n	dbe38 <strftime+0x338>
   dbe28:	f1b8 0f05 	cmp.w	r8, #5
   dbe2c:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbe30:	bf98      	it	ls
   dbe32:	f04f 0806 	movls.w	r8, #6
   dbe36:	e004      	b.n	dbe42 <strftime+0x342>
   dbe38:	232b      	movs	r3, #43	; 0x2b
   dbe3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbe3e:	f04f 080a 	mov.w	r8, #10
   dbe42:	f1b8 0306 	subs.w	r3, r8, #6
   dbe46:	d102      	bne.n	dbe4e <strftime+0x34e>
   dbe48:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbe4c:	e00a      	b.n	dbe64 <strftime+0x364>
   dbe4e:	4a7d      	ldr	r2, [pc, #500]	; (dc044 <strftime+0x544>)
   dbe50:	211e      	movs	r1, #30
   dbe52:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbe56:	f7fc fb01 	bl	d845c <sniprintf>
   dbe5a:	2800      	cmp	r0, #0
   dbe5c:	ddf4      	ble.n	dbe48 <strftime+0x348>
   dbe5e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbe62:	4418      	add	r0, r3
   dbe64:	4978      	ldr	r1, [pc, #480]	; (dc048 <strftime+0x548>)
   dbe66:	f7ff fdc7 	bl	db9f8 <strcpy>
   dbe6a:	462b      	mov	r3, r5
   dbe6c:	aa0a      	add	r2, sp, #40	; 0x28
   dbe6e:	1b31      	subs	r1, r6, r4
   dbe70:	1938      	adds	r0, r7, r4
   dbe72:	f7ff fe45 	bl	dbb00 <strftime>
   dbe76:	2800      	cmp	r0, #0
   dbe78:	f340 82ec 	ble.w	dc454 <strftime+0x954>
   dbe7c:	4404      	add	r4, r0
   dbe7e:	e2de      	b.n	dc43e <strftime+0x93e>
   dbe80:	4628      	mov	r0, r5
   dbe82:	f7ff fddc 	bl	dba3e <iso_year_adjust>
   dbe86:	4680      	mov	r8, r0
   dbe88:	6968      	ldr	r0, [r5, #20]
   dbe8a:	2800      	cmp	r0, #0
   dbe8c:	db05      	blt.n	dbe9a <strftime+0x39a>
   dbe8e:	2264      	movs	r2, #100	; 0x64
   dbe90:	fb90 f1f2 	sdiv	r1, r0, r2
   dbe94:	fb02 0011 	mls	r0, r2, r1, r0
   dbe98:	e008      	b.n	dbeac <strftime+0x3ac>
   dbe9a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbe9e:	f000 fe6b 	bl	dcb78 <abs>
   dbea2:	2264      	movs	r2, #100	; 0x64
   dbea4:	fb90 f3f2 	sdiv	r3, r0, r2
   dbea8:	fb03 0012 	mls	r0, r3, r2, r0
   dbeac:	f1b8 0f00 	cmp.w	r8, #0
   dbeb0:	da06      	bge.n	dbec0 <strftime+0x3c0>
   dbeb2:	696a      	ldr	r2, [r5, #20]
   dbeb4:	4b65      	ldr	r3, [pc, #404]	; (dc04c <strftime+0x54c>)
   dbeb6:	429a      	cmp	r2, r3
   dbeb8:	bfb8      	it	lt
   dbeba:	f04f 0801 	movlt.w	r8, #1
   dbebe:	e006      	b.n	dbece <strftime+0x3ce>
   dbec0:	d005      	beq.n	dbece <strftime+0x3ce>
   dbec2:	696a      	ldr	r2, [r5, #20]
   dbec4:	4b56      	ldr	r3, [pc, #344]	; (dc020 <strftime+0x520>)
   dbec6:	429a      	cmp	r2, r3
   dbec8:	bfb8      	it	lt
   dbeca:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   dbece:	2364      	movs	r3, #100	; 0x64
   dbed0:	4440      	add	r0, r8
   dbed2:	fb90 f2f3 	sdiv	r2, r0, r3
   dbed6:	fb03 0012 	mls	r0, r3, r2, r0
   dbeda:	4418      	add	r0, r3
   dbedc:	e1f9      	b.n	dc2d2 <strftime+0x7d2>
   dbede:	4b50      	ldr	r3, [pc, #320]	; (dc020 <strftime+0x520>)
   dbee0:	6969      	ldr	r1, [r5, #20]
   dbee2:	9108      	str	r1, [sp, #32]
   dbee4:	4299      	cmp	r1, r3
   dbee6:	bfac      	ite	ge
   dbee8:	2300      	movge	r3, #0
   dbeea:	2301      	movlt	r3, #1
   dbeec:	4628      	mov	r0, r5
   dbeee:	9307      	str	r3, [sp, #28]
   dbef0:	f7ff fda5 	bl	dba3e <iso_year_adjust>
   dbef4:	9908      	ldr	r1, [sp, #32]
   dbef6:	2900      	cmp	r1, #0
   dbef8:	4683      	mov	fp, r0
   dbefa:	db04      	blt.n	dbf06 <strftime+0x406>
   dbefc:	2364      	movs	r3, #100	; 0x64
   dbefe:	fb91 f3f3 	sdiv	r3, r1, r3
   dbf02:	3313      	adds	r3, #19
   dbf04:	e008      	b.n	dbf18 <strftime+0x418>
   dbf06:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbf0a:	9108      	str	r1, [sp, #32]
   dbf0c:	f000 fe34 	bl	dcb78 <abs>
   dbf10:	9908      	ldr	r1, [sp, #32]
   dbf12:	2364      	movs	r3, #100	; 0x64
   dbf14:	fb90 f3f3 	sdiv	r3, r0, r3
   dbf18:	6968      	ldr	r0, [r5, #20]
   dbf1a:	2800      	cmp	r0, #0
   dbf1c:	db06      	blt.n	dbf2c <strftime+0x42c>
   dbf1e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbf22:	fb90 fcfe 	sdiv	ip, r0, lr
   dbf26:	fb0e 001c 	mls	r0, lr, ip, r0
   dbf2a:	e00d      	b.n	dbf48 <strftime+0x448>
   dbf2c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbf30:	9109      	str	r1, [sp, #36]	; 0x24
   dbf32:	9308      	str	r3, [sp, #32]
   dbf34:	f000 fe20 	bl	dcb78 <abs>
   dbf38:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbf3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbf3e:	9b08      	ldr	r3, [sp, #32]
   dbf40:	fb90 fcfe 	sdiv	ip, r0, lr
   dbf44:	fb0c 001e 	mls	r0, ip, lr, r0
   dbf48:	f1bb 0f00 	cmp.w	fp, #0
   dbf4c:	da08      	bge.n	dbf60 <strftime+0x460>
   dbf4e:	6969      	ldr	r1, [r5, #20]
   dbf50:	4a3e      	ldr	r2, [pc, #248]	; (dc04c <strftime+0x54c>)
   dbf52:	4291      	cmp	r1, r2
   dbf54:	da0a      	bge.n	dbf6c <strftime+0x46c>
   dbf56:	f04f 0b01 	mov.w	fp, #1
   dbf5a:	f8cd b01c 	str.w	fp, [sp, #28]
   dbf5e:	e005      	b.n	dbf6c <strftime+0x46c>
   dbf60:	d004      	beq.n	dbf6c <strftime+0x46c>
   dbf62:	4a2f      	ldr	r2, [pc, #188]	; (dc020 <strftime+0x520>)
   dbf64:	4291      	cmp	r1, r2
   dbf66:	bfb8      	it	lt
   dbf68:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   dbf6c:	eb0b 0200 	add.w	r2, fp, r0
   dbf70:	1c50      	adds	r0, r2, #1
   dbf72:	d102      	bne.n	dbf7a <strftime+0x47a>
   dbf74:	3b01      	subs	r3, #1
   dbf76:	2263      	movs	r2, #99	; 0x63
   dbf78:	e003      	b.n	dbf82 <strftime+0x482>
   dbf7a:	2a64      	cmp	r2, #100	; 0x64
   dbf7c:	bf04      	itt	eq
   dbf7e:	3301      	addeq	r3, #1
   dbf80:	2200      	moveq	r2, #0
   dbf82:	2064      	movs	r0, #100	; 0x64
   dbf84:	fb00 2303 	mla	r3, r0, r3, r2
   dbf88:	9a07      	ldr	r2, [sp, #28]
   dbf8a:	b142      	cbz	r2, dbf9e <strftime+0x49e>
   dbf8c:	222d      	movs	r2, #45	; 0x2d
   dbf8e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dbf92:	f1b8 0f00 	cmp.w	r8, #0
   dbf96:	d013      	beq.n	dbfc0 <strftime+0x4c0>
   dbf98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbf9c:	e010      	b.n	dbfc0 <strftime+0x4c0>
   dbf9e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbfa2:	d110      	bne.n	dbfc6 <strftime+0x4c6>
   dbfa4:	f242 720f 	movw	r2, #9999	; 0x270f
   dbfa8:	4293      	cmp	r3, r2
   dbfaa:	d90c      	bls.n	dbfc6 <strftime+0x4c6>
   dbfac:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dbfb0:	f1b8 0f00 	cmp.w	r8, #0
   dbfb4:	d1f0      	bne.n	dbf98 <strftime+0x498>
   dbfb6:	aa12      	add	r2, sp, #72	; 0x48
   dbfb8:	2125      	movs	r1, #37	; 0x25
   dbfba:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dbfbe:	e00a      	b.n	dbfd6 <strftime+0x4d6>
   dbfc0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dbfc4:	e000      	b.n	dbfc8 <strftime+0x4c8>
   dbfc6:	aa0a      	add	r2, sp, #40	; 0x28
   dbfc8:	2125      	movs	r1, #37	; 0x25
   dbfca:	7011      	strb	r1, [r2, #0]
   dbfcc:	f1ba 0f00 	cmp.w	sl, #0
   dbfd0:	d101      	bne.n	dbfd6 <strftime+0x4d6>
   dbfd2:	1c50      	adds	r0, r2, #1
   dbfd4:	e002      	b.n	dbfdc <strftime+0x4dc>
   dbfd6:	2130      	movs	r1, #48	; 0x30
   dbfd8:	1c90      	adds	r0, r2, #2
   dbfda:	7051      	strb	r1, [r2, #1]
   dbfdc:	491c      	ldr	r1, [pc, #112]	; (dc050 <strftime+0x550>)
   dbfde:	9307      	str	r3, [sp, #28]
   dbfe0:	f7ff fd0a 	bl	db9f8 <strcpy>
   dbfe4:	9b07      	ldr	r3, [sp, #28]
   dbfe6:	9300      	str	r3, [sp, #0]
   dbfe8:	e1ad      	b.n	dc346 <strftime+0x846>
   dbfea:	4a14      	ldr	r2, [pc, #80]	; (dc03c <strftime+0x53c>)
   dbfec:	4912      	ldr	r1, [pc, #72]	; (dc038 <strftime+0x538>)
   dbfee:	68ab      	ldr	r3, [r5, #8]
   dbff0:	286b      	cmp	r0, #107	; 0x6b
   dbff2:	bf08      	it	eq
   dbff4:	460a      	moveq	r2, r1
   dbff6:	e6e4      	b.n	dbdc2 <strftime+0x2c2>
   dbff8:	68a9      	ldr	r1, [r5, #8]
   dbffa:	230c      	movs	r3, #12
   dbffc:	b131      	cbz	r1, dc00c <strftime+0x50c>
   dbffe:	4299      	cmp	r1, r3
   dc000:	bf0e      	itee	eq
   dc002:	460b      	moveq	r3, r1
   dc004:	fb91 f2f3 	sdivne	r2, r1, r3
   dc008:	fb03 1312 	mlsne	r3, r3, r2, r1
   dc00c:	4a0a      	ldr	r2, [pc, #40]	; (dc038 <strftime+0x538>)
   dc00e:	490b      	ldr	r1, [pc, #44]	; (dc03c <strftime+0x53c>)
   dc010:	2849      	cmp	r0, #73	; 0x49
   dc012:	bf08      	it	eq
   dc014:	460a      	moveq	r2, r1
   dc016:	e6d4      	b.n	dbdc2 <strftime+0x2c2>
   dc018:	69eb      	ldr	r3, [r5, #28]
   dc01a:	4a0e      	ldr	r2, [pc, #56]	; (dc054 <strftime+0x554>)
   dc01c:	3301      	adds	r3, #1
   dc01e:	e6d0      	b.n	dbdc2 <strftime+0x2c2>
   dc020:	fffff894 	.word	0xfffff894
   dc024:	000dde53 	.word	0x000dde53
   dc028:	000dd50e 	.word	0x000dd50e
   dc02c:	000dde44 	.word	0x000dde44
   dc030:	000dde4b 	.word	0x000dde4b
   dc034:	000dde55 	.word	0x000dde55
   dc038:	000dde57 	.word	0x000dde57
   dc03c:	000dde65 	.word	0x000dde65
   dc040:	000dde5b 	.word	0x000dde5b
   dc044:	000dde6a 	.word	0x000dde6a
   dc048:	000dde6e 	.word	0x000dde6e
   dc04c:	fffff895 	.word	0xfffff895
   dc050:	000dde76 	.word	0x000dde76
   dc054:	000dde7a 	.word	0x000dde7a
   dc058:	692b      	ldr	r3, [r5, #16]
   dc05a:	3301      	adds	r3, #1
   dc05c:	e13d      	b.n	dc2da <strftime+0x7da>
   dc05e:	686b      	ldr	r3, [r5, #4]
   dc060:	e13b      	b.n	dc2da <strftime+0x7da>
   dc062:	9b02      	ldr	r3, [sp, #8]
   dc064:	429c      	cmp	r4, r3
   dc066:	f080 81f5 	bcs.w	dc454 <strftime+0x954>
   dc06a:	230a      	movs	r3, #10
   dc06c:	e1e5      	b.n	dc43a <strftime+0x93a>
   dc06e:	68ab      	ldr	r3, [r5, #8]
   dc070:	9a03      	ldr	r2, [sp, #12]
   dc072:	2b0b      	cmp	r3, #11
   dc074:	bfcc      	ite	gt
   dc076:	23a4      	movgt	r3, #164	; 0xa4
   dc078:	23a0      	movle	r3, #160	; 0xa0
   dc07a:	4413      	add	r3, r2
   dc07c:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dc080:	4640      	mov	r0, r8
   dc082:	f000 f9f1 	bl	dc468 <strlen>
   dc086:	4bb2      	ldr	r3, [pc, #712]	; (dc350 <strftime+0x850>)
   dc088:	f8d3 e000 	ldr.w	lr, [r3]
   dc08c:	1939      	adds	r1, r7, r4
   dc08e:	4642      	mov	r2, r8
   dc090:	4420      	add	r0, r4
   dc092:	4284      	cmp	r4, r0
   dc094:	f000 81d3 	beq.w	dc43e <strftime+0x93e>
   dc098:	9b02      	ldr	r3, [sp, #8]
   dc09a:	429c      	cmp	r4, r3
   dc09c:	f080 81da 	bcs.w	dc454 <strftime+0x954>
   dc0a0:	f899 3000 	ldrb.w	r3, [r9]
   dc0a4:	2b50      	cmp	r3, #80	; 0x50
   dc0a6:	f104 0401 	add.w	r4, r4, #1
   dc0aa:	7813      	ldrb	r3, [r2, #0]
   dc0ac:	d10a      	bne.n	dc0c4 <strftime+0x5c4>
   dc0ae:	eb0e 0c03 	add.w	ip, lr, r3
   dc0b2:	f89c c001 	ldrb.w	ip, [ip, #1]
   dc0b6:	f00c 0c03 	and.w	ip, ip, #3
   dc0ba:	f1bc 0f01 	cmp.w	ip, #1
   dc0be:	bf08      	it	eq
   dc0c0:	3320      	addeq	r3, #32
   dc0c2:	b2db      	uxtb	r3, r3
   dc0c4:	f801 3b01 	strb.w	r3, [r1], #1
   dc0c8:	3201      	adds	r2, #1
   dc0ca:	e7e2      	b.n	dc092 <strftime+0x592>
   dc0cc:	686b      	ldr	r3, [r5, #4]
   dc0ce:	9300      	str	r3, [sp, #0]
   dc0d0:	4aa0      	ldr	r2, [pc, #640]	; (dc354 <strftime+0x854>)
   dc0d2:	68ab      	ldr	r3, [r5, #8]
   dc0d4:	e139      	b.n	dc34a <strftime+0x84a>
   dc0d6:	6a2b      	ldr	r3, [r5, #32]
   dc0d8:	2b00      	cmp	r3, #0
   dc0da:	db17      	blt.n	dc10c <strftime+0x60c>
   dc0dc:	f000 fbc4 	bl	dc868 <__tz_lock>
   dc0e0:	9b06      	ldr	r3, [sp, #24]
   dc0e2:	b91b      	cbnz	r3, dc0ec <strftime+0x5ec>
   dc0e4:	f000 fbc2 	bl	dc86c <_tzset_unlocked>
   dc0e8:	2301      	movs	r3, #1
   dc0ea:	9306      	str	r3, [sp, #24]
   dc0ec:	f000 fda0 	bl	dcc30 <__gettzinfo>
   dc0f0:	6a2b      	ldr	r3, [r5, #32]
   dc0f2:	2b00      	cmp	r3, #0
   dc0f4:	bfd4      	ite	le
   dc0f6:	2300      	movle	r3, #0
   dc0f8:	2301      	movgt	r3, #1
   dc0fa:	221c      	movs	r2, #28
   dc0fc:	fb02 0003 	mla	r0, r2, r3, r0
   dc100:	6a03      	ldr	r3, [r0, #32]
   dc102:	f1c3 0800 	rsb	r8, r3, #0
   dc106:	f000 fbb0 	bl	dc86a <__tz_unlock>
   dc10a:	e001      	b.n	dc110 <strftime+0x610>
   dc10c:	f04f 0800 	mov.w	r8, #0
   dc110:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dc114:	4670      	mov	r0, lr
   dc116:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dc11a:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dc11e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dc122:	2a00      	cmp	r2, #0
   dc124:	f173 0b00 	sbcs.w	fp, r3, #0
   dc128:	ebc4 0c06 	rsb	ip, r4, r6
   dc12c:	eb07 0a04 	add.w	sl, r7, r4
   dc130:	da03      	bge.n	dc13a <strftime+0x63a>
   dc132:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dc136:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dc13a:	0891      	lsrs	r1, r2, #2
   dc13c:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dc140:	109b      	asrs	r3, r3, #2
   dc142:	9104      	str	r1, [sp, #16]
   dc144:	9305      	str	r3, [sp, #20]
   dc146:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   dc14a:	2364      	movs	r3, #100	; 0x64
   dc14c:	fb91 f1f3 	sdiv	r1, r1, r3
   dc150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dc154:	1a52      	subs	r2, r2, r1
   dc156:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dc15a:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dc15e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dc162:	fb90 f1f1 	sdiv	r1, r0, r1
   dc166:	1852      	adds	r2, r2, r1
   dc168:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc16c:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dc170:	f240 116d 	movw	r1, #365	; 0x16d
   dc174:	fb01 fe0e 	mul.w	lr, r1, lr
   dc178:	69e9      	ldr	r1, [r5, #28]
   dc17a:	eb12 020e 	adds.w	r2, r2, lr
   dc17e:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dc182:	1852      	adds	r2, r2, r1
   dc184:	f04f 0e18 	mov.w	lr, #24
   dc188:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc18c:	fba2 010e 	umull	r0, r1, r2, lr
   dc190:	fb0e 1103 	mla	r1, lr, r3, r1
   dc194:	68ab      	ldr	r3, [r5, #8]
   dc196:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dc19a:	18c0      	adds	r0, r0, r3
   dc19c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc1a0:	fba0 230e 	umull	r2, r3, r0, lr
   dc1a4:	fb0e 3301 	mla	r3, lr, r1, r3
   dc1a8:	6869      	ldr	r1, [r5, #4]
   dc1aa:	1852      	adds	r2, r2, r1
   dc1ac:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dc1b0:	fba2 010e 	umull	r0, r1, r2, lr
   dc1b4:	fb0e 1103 	mla	r1, lr, r3, r1
   dc1b8:	682b      	ldr	r3, [r5, #0]
   dc1ba:	4a67      	ldr	r2, [pc, #412]	; (dc358 <strftime+0x858>)
   dc1bc:	18c0      	adds	r0, r0, r3
   dc1be:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dc1c2:	ebb0 0008 	subs.w	r0, r0, r8
   dc1c6:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dc1ca:	e9cd 0100 	strd	r0, r1, [sp]
   dc1ce:	4661      	mov	r1, ip
   dc1d0:	4650      	mov	r0, sl
   dc1d2:	f7fc f943 	bl	d845c <sniprintf>
   dc1d6:	e5f8      	b.n	dbdca <strftime+0x2ca>
   dc1d8:	682b      	ldr	r3, [r5, #0]
   dc1da:	e07e      	b.n	dc2da <strftime+0x7da>
   dc1dc:	9b02      	ldr	r3, [sp, #8]
   dc1de:	429c      	cmp	r4, r3
   dc1e0:	f080 8138 	bcs.w	dc454 <strftime+0x954>
   dc1e4:	2309      	movs	r3, #9
   dc1e6:	e128      	b.n	dc43a <strftime+0x93a>
   dc1e8:	682b      	ldr	r3, [r5, #0]
   dc1ea:	9301      	str	r3, [sp, #4]
   dc1ec:	686b      	ldr	r3, [r5, #4]
   dc1ee:	9300      	str	r3, [sp, #0]
   dc1f0:	4a5a      	ldr	r2, [pc, #360]	; (dc35c <strftime+0x85c>)
   dc1f2:	68ab      	ldr	r3, [r5, #8]
   dc1f4:	1b31      	subs	r1, r6, r4
   dc1f6:	1938      	adds	r0, r7, r4
   dc1f8:	e60d      	b.n	dbe16 <strftime+0x316>
   dc1fa:	9b02      	ldr	r3, [sp, #8]
   dc1fc:	429c      	cmp	r4, r3
   dc1fe:	f080 8129 	bcs.w	dc454 <strftime+0x954>
   dc202:	69ab      	ldr	r3, [r5, #24]
   dc204:	1c62      	adds	r2, r4, #1
   dc206:	b90b      	cbnz	r3, dc20c <strftime+0x70c>
   dc208:	2337      	movs	r3, #55	; 0x37
   dc20a:	e000      	b.n	dc20e <strftime+0x70e>
   dc20c:	3330      	adds	r3, #48	; 0x30
   dc20e:	553b      	strb	r3, [r7, r4]
   dc210:	4614      	mov	r4, r2
   dc212:	e114      	b.n	dc43e <strftime+0x93e>
   dc214:	69eb      	ldr	r3, [r5, #28]
   dc216:	69aa      	ldr	r2, [r5, #24]
   dc218:	3307      	adds	r3, #7
   dc21a:	1a9b      	subs	r3, r3, r2
   dc21c:	2207      	movs	r2, #7
   dc21e:	fb93 f3f2 	sdiv	r3, r3, r2
   dc222:	e05a      	b.n	dc2da <strftime+0x7da>
   dc224:	4628      	mov	r0, r5
   dc226:	f7ff fc0a 	bl	dba3e <iso_year_adjust>
   dc22a:	69aa      	ldr	r2, [r5, #24]
   dc22c:	b10a      	cbz	r2, dc232 <strftime+0x732>
   dc22e:	1e53      	subs	r3, r2, #1
   dc230:	e000      	b.n	dc234 <strftime+0x734>
   dc232:	2306      	movs	r3, #6
   dc234:	2800      	cmp	r0, #0
   dc236:	dc2f      	bgt.n	dc298 <strftime+0x798>
   dc238:	69ea      	ldr	r2, [r5, #28]
   dc23a:	d101      	bne.n	dc240 <strftime+0x740>
   dc23c:	320a      	adds	r2, #10
   dc23e:	e03b      	b.n	dc2b8 <strftime+0x7b8>
   dc240:	1a9a      	subs	r2, r3, r2
   dc242:	696b      	ldr	r3, [r5, #20]
   dc244:	f240 716b 	movw	r1, #1899	; 0x76b
   dc248:	2b00      	cmp	r3, #0
   dc24a:	bfb4      	ite	lt
   dc24c:	4608      	movlt	r0, r1
   dc24e:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc252:	4418      	add	r0, r3
   dc254:	0781      	lsls	r1, r0, #30
   dc256:	d107      	bne.n	dc268 <strftime+0x768>
   dc258:	4601      	mov	r1, r0
   dc25a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc25e:	fb90 f0fe 	sdiv	r0, r0, lr
   dc262:	fb0e 1110 	mls	r1, lr, r0, r1
   dc266:	b981      	cbnz	r1, dc28a <strftime+0x78a>
   dc268:	2b00      	cmp	r3, #0
   dc26a:	f240 716b 	movw	r1, #1899	; 0x76b
   dc26e:	bfa8      	it	ge
   dc270:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc274:	4419      	add	r1, r3
   dc276:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc27a:	fb91 f0f3 	sdiv	r0, r1, r3
   dc27e:	fb03 1110 	mls	r1, r3, r0, r1
   dc282:	fab1 f181 	clz	r1, r1
   dc286:	0949      	lsrs	r1, r1, #5
   dc288:	e000      	b.n	dc28c <strftime+0x78c>
   dc28a:	2101      	movs	r1, #1
   dc28c:	1a52      	subs	r2, r2, r1
   dc28e:	2a05      	cmp	r2, #5
   dc290:	bfb4      	ite	lt
   dc292:	2335      	movlt	r3, #53	; 0x35
   dc294:	2334      	movge	r3, #52	; 0x34
   dc296:	e020      	b.n	dc2da <strftime+0x7da>
   dc298:	2301      	movs	r3, #1
   dc29a:	e01e      	b.n	dc2da <strftime+0x7da>
   dc29c:	9b02      	ldr	r3, [sp, #8]
   dc29e:	429c      	cmp	r4, r3
   dc2a0:	f080 80d8 	bcs.w	dc454 <strftime+0x954>
   dc2a4:	69ab      	ldr	r3, [r5, #24]
   dc2a6:	3330      	adds	r3, #48	; 0x30
   dc2a8:	e0c7      	b.n	dc43a <strftime+0x93a>
   dc2aa:	69aa      	ldr	r2, [r5, #24]
   dc2ac:	b10a      	cbz	r2, dc2b2 <strftime+0x7b2>
   dc2ae:	1e53      	subs	r3, r2, #1
   dc2b0:	e000      	b.n	dc2b4 <strftime+0x7b4>
   dc2b2:	2306      	movs	r3, #6
   dc2b4:	69ea      	ldr	r2, [r5, #28]
   dc2b6:	3207      	adds	r2, #7
   dc2b8:	1ad2      	subs	r2, r2, r3
   dc2ba:	2307      	movs	r3, #7
   dc2bc:	fb92 f3f3 	sdiv	r3, r2, r3
   dc2c0:	e00b      	b.n	dc2da <strftime+0x7da>
   dc2c2:	6968      	ldr	r0, [r5, #20]
   dc2c4:	2800      	cmp	r0, #0
   dc2c6:	da03      	bge.n	dc2d0 <strftime+0x7d0>
   dc2c8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc2cc:	f000 fc54 	bl	dcb78 <abs>
   dc2d0:	2364      	movs	r3, #100	; 0x64
   dc2d2:	fb90 f2f3 	sdiv	r2, r0, r3
   dc2d6:	fb02 0313 	mls	r3, r2, r3, r0
   dc2da:	4a21      	ldr	r2, [pc, #132]	; (dc360 <strftime+0x860>)
   dc2dc:	e571      	b.n	dbdc2 <strftime+0x2c2>
   dc2de:	696b      	ldr	r3, [r5, #20]
   dc2e0:	4a20      	ldr	r2, [pc, #128]	; (dc364 <strftime+0x864>)
   dc2e2:	4293      	cmp	r3, r2
   dc2e4:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc2e8:	da05      	bge.n	dc2f6 <strftime+0x7f6>
   dc2ea:	232d      	movs	r3, #45	; 0x2d
   dc2ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc2f0:	f1cb 0b00 	rsb	fp, fp, #0
   dc2f4:	e008      	b.n	dc308 <strftime+0x808>
   dc2f6:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc2fa:	d10d      	bne.n	dc318 <strftime+0x818>
   dc2fc:	f242 730f 	movw	r3, #9999	; 0x270f
   dc300:	459b      	cmp	fp, r3
   dc302:	d911      	bls.n	dc328 <strftime+0x828>
   dc304:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc308:	f1b8 0f00 	cmp.w	r8, #0
   dc30c:	d001      	beq.n	dc312 <strftime+0x812>
   dc30e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc312:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc316:	e000      	b.n	dc31a <strftime+0x81a>
   dc318:	ab0a      	add	r3, sp, #40	; 0x28
   dc31a:	2225      	movs	r2, #37	; 0x25
   dc31c:	701a      	strb	r2, [r3, #0]
   dc31e:	f1ba 0f00 	cmp.w	sl, #0
   dc322:	d108      	bne.n	dc336 <strftime+0x836>
   dc324:	1c58      	adds	r0, r3, #1
   dc326:	e009      	b.n	dc33c <strftime+0x83c>
   dc328:	f1b8 0f00 	cmp.w	r8, #0
   dc32c:	d1f4      	bne.n	dc318 <strftime+0x818>
   dc32e:	2325      	movs	r3, #37	; 0x25
   dc330:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc334:	ab0a      	add	r3, sp, #40	; 0x28
   dc336:	2230      	movs	r2, #48	; 0x30
   dc338:	1c98      	adds	r0, r3, #2
   dc33a:	705a      	strb	r2, [r3, #1]
   dc33c:	490a      	ldr	r1, [pc, #40]	; (dc368 <strftime+0x868>)
   dc33e:	f7ff fb5b 	bl	db9f8 <strcpy>
   dc342:	f8cd b000 	str.w	fp, [sp]
   dc346:	4643      	mov	r3, r8
   dc348:	aa0a      	add	r2, sp, #40	; 0x28
   dc34a:	1b31      	subs	r1, r6, r4
   dc34c:	1938      	adds	r0, r7, r4
   dc34e:	e03e      	b.n	dc3ce <strftime+0x8ce>
   dc350:	2003ddd4 	.word	0x2003ddd4
   dc354:	000dde89 	.word	0x000dde89
   dc358:	000dde7f 	.word	0x000dde7f
   dc35c:	000dde84 	.word	0x000dde84
   dc360:	000dde65 	.word	0x000dde65
   dc364:	fffff894 	.word	0xfffff894
   dc368:	000dde76 	.word	0x000dde76
   dc36c:	6a2b      	ldr	r3, [r5, #32]
   dc36e:	2b00      	cmp	r3, #0
   dc370:	db65      	blt.n	dc43e <strftime+0x93e>
   dc372:	f000 fa79 	bl	dc868 <__tz_lock>
   dc376:	9b06      	ldr	r3, [sp, #24]
   dc378:	b91b      	cbnz	r3, dc382 <strftime+0x882>
   dc37a:	f000 fa77 	bl	dc86c <_tzset_unlocked>
   dc37e:	2301      	movs	r3, #1
   dc380:	9306      	str	r3, [sp, #24]
   dc382:	f000 fc55 	bl	dcc30 <__gettzinfo>
   dc386:	6a2b      	ldr	r3, [r5, #32]
   dc388:	2b00      	cmp	r3, #0
   dc38a:	bfd4      	ite	le
   dc38c:	2300      	movle	r3, #0
   dc38e:	2301      	movgt	r3, #1
   dc390:	221c      	movs	r2, #28
   dc392:	fb02 0003 	mla	r0, r2, r3, r0
   dc396:	eb07 0a04 	add.w	sl, r7, r4
   dc39a:	6a03      	ldr	r3, [r0, #32]
   dc39c:	f1c3 0800 	rsb	r8, r3, #0
   dc3a0:	f000 fa63 	bl	dc86a <__tz_unlock>
   dc3a4:	233c      	movs	r3, #60	; 0x3c
   dc3a6:	fb98 f0f3 	sdiv	r0, r8, r3
   dc3aa:	9307      	str	r3, [sp, #28]
   dc3ac:	f000 fc44 	bl	dcc38 <labs>
   dc3b0:	9b07      	ldr	r3, [sp, #28]
   dc3b2:	fb90 f2f3 	sdiv	r2, r0, r3
   dc3b6:	ebc4 0b06 	rsb	fp, r4, r6
   dc3ba:	fb02 0013 	mls	r0, r2, r3, r0
   dc3be:	4a28      	ldr	r2, [pc, #160]	; (dc460 <strftime+0x960>)
   dc3c0:	9000      	str	r0, [sp, #0]
   dc3c2:	4659      	mov	r1, fp
   dc3c4:	4650      	mov	r0, sl
   dc3c6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc3ca:	fb98 f3f3 	sdiv	r3, r8, r3
   dc3ce:	f7fc f845 	bl	d845c <sniprintf>
   dc3d2:	e4fa      	b.n	dbdca <strftime+0x2ca>
   dc3d4:	4404      	add	r4, r0
   dc3d6:	42a6      	cmp	r6, r4
   dc3d8:	d831      	bhi.n	dc43e <strftime+0x93e>
   dc3da:	e03b      	b.n	dc454 <strftime+0x954>
   dc3dc:	6a2b      	ldr	r3, [r5, #32]
   dc3de:	2b00      	cmp	r3, #0
   dc3e0:	db2d      	blt.n	dc43e <strftime+0x93e>
   dc3e2:	f000 fa41 	bl	dc868 <__tz_lock>
   dc3e6:	9b06      	ldr	r3, [sp, #24]
   dc3e8:	b91b      	cbnz	r3, dc3f2 <strftime+0x8f2>
   dc3ea:	f000 fa3f 	bl	dc86c <_tzset_unlocked>
   dc3ee:	2301      	movs	r3, #1
   dc3f0:	9306      	str	r3, [sp, #24]
   dc3f2:	6a2b      	ldr	r3, [r5, #32]
   dc3f4:	4a1b      	ldr	r2, [pc, #108]	; (dc464 <strftime+0x964>)
   dc3f6:	2b00      	cmp	r3, #0
   dc3f8:	bfd4      	ite	le
   dc3fa:	2300      	movle	r3, #0
   dc3fc:	2301      	movgt	r3, #1
   dc3fe:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc402:	4640      	mov	r0, r8
   dc404:	f000 f830 	bl	dc468 <strlen>
   dc408:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc40c:	193b      	adds	r3, r7, r4
   dc40e:	4420      	add	r0, r4
   dc410:	4284      	cmp	r4, r0
   dc412:	d00b      	beq.n	dc42c <strftime+0x92c>
   dc414:	9a02      	ldr	r2, [sp, #8]
   dc416:	4294      	cmp	r4, r2
   dc418:	d205      	bcs.n	dc426 <strftime+0x926>
   dc41a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc41e:	f803 2b01 	strb.w	r2, [r3], #1
   dc422:	3401      	adds	r4, #1
   dc424:	e7f4      	b.n	dc410 <strftime+0x910>
   dc426:	f000 fa20 	bl	dc86a <__tz_unlock>
   dc42a:	e013      	b.n	dc454 <strftime+0x954>
   dc42c:	f000 fa1d 	bl	dc86a <__tz_unlock>
   dc430:	e005      	b.n	dc43e <strftime+0x93e>
   dc432:	9b02      	ldr	r3, [sp, #8]
   dc434:	429c      	cmp	r4, r3
   dc436:	d20d      	bcs.n	dc454 <strftime+0x954>
   dc438:	2325      	movs	r3, #37	; 0x25
   dc43a:	553b      	strb	r3, [r7, r4]
   dc43c:	3401      	adds	r4, #1
   dc43e:	f899 3000 	ldrb.w	r3, [r9]
   dc442:	b11b      	cbz	r3, dc44c <strftime+0x94c>
   dc444:	f109 0901 	add.w	r9, r9, #1
   dc448:	f7ff bb69 	b.w	dbb1e <strftime+0x1e>
   dc44c:	b126      	cbz	r6, dc458 <strftime+0x958>
   dc44e:	2300      	movs	r3, #0
   dc450:	553b      	strb	r3, [r7, r4]
   dc452:	e001      	b.n	dc458 <strftime+0x958>
   dc454:	2000      	movs	r0, #0
   dc456:	e000      	b.n	dc45a <strftime+0x95a>
   dc458:	4620      	mov	r0, r4
   dc45a:	b013      	add	sp, #76	; 0x4c
   dc45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc460:	000dde93 	.word	0x000dde93
   dc464:	2003de3c 	.word	0x2003de3c

000dc468 <strlen>:
   dc468:	4603      	mov	r3, r0
   dc46a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc46e:	2a00      	cmp	r2, #0
   dc470:	d1fb      	bne.n	dc46a <strlen+0x2>
   dc472:	1a18      	subs	r0, r3, r0
   dc474:	3801      	subs	r0, #1
   dc476:	4770      	bx	lr

000dc478 <strncmp>:
   dc478:	b530      	push	{r4, r5, lr}
   dc47a:	b182      	cbz	r2, dc49e <strncmp+0x26>
   dc47c:	1e45      	subs	r5, r0, #1
   dc47e:	3901      	subs	r1, #1
   dc480:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc488:	42a3      	cmp	r3, r4
   dc48a:	d106      	bne.n	dc49a <strncmp+0x22>
   dc48c:	43ec      	mvns	r4, r5
   dc48e:	4414      	add	r4, r2
   dc490:	42e0      	cmn	r0, r4
   dc492:	d001      	beq.n	dc498 <strncmp+0x20>
   dc494:	2b00      	cmp	r3, #0
   dc496:	d1f3      	bne.n	dc480 <strncmp+0x8>
   dc498:	461c      	mov	r4, r3
   dc49a:	1b18      	subs	r0, r3, r4
   dc49c:	bd30      	pop	{r4, r5, pc}
   dc49e:	4610      	mov	r0, r2
   dc4a0:	bd30      	pop	{r4, r5, pc}

000dc4a2 <strncpy>:
   dc4a2:	b510      	push	{r4, lr}
   dc4a4:	4603      	mov	r3, r0
   dc4a6:	b142      	cbz	r2, dc4ba <strncpy+0x18>
   dc4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc4ac:	f803 4b01 	strb.w	r4, [r3], #1
   dc4b0:	3a01      	subs	r2, #1
   dc4b2:	2c00      	cmp	r4, #0
   dc4b4:	d1f7      	bne.n	dc4a6 <strncpy+0x4>
   dc4b6:	441a      	add	r2, r3
   dc4b8:	e000      	b.n	dc4bc <strncpy+0x1a>
   dc4ba:	bd10      	pop	{r4, pc}
   dc4bc:	4293      	cmp	r3, r2
   dc4be:	d002      	beq.n	dc4c6 <strncpy+0x24>
   dc4c0:	f803 4b01 	strb.w	r4, [r3], #1
   dc4c4:	e7fa      	b.n	dc4bc <strncpy+0x1a>
   dc4c6:	bd10      	pop	{r4, pc}

000dc4c8 <_strtol_r>:
   dc4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc4cc:	4680      	mov	r8, r0
   dc4ce:	4840      	ldr	r0, [pc, #256]	; (dc5d0 <_strtol_r+0x108>)
   dc4d0:	f8d0 9000 	ldr.w	r9, [r0]
   dc4d4:	460f      	mov	r7, r1
   dc4d6:	463d      	mov	r5, r7
   dc4d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc4dc:	eb09 0004 	add.w	r0, r9, r4
   dc4e0:	7840      	ldrb	r0, [r0, #1]
   dc4e2:	f000 0008 	and.w	r0, r0, #8
   dc4e6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dc4ea:	b108      	cbz	r0, dc4f0 <_strtol_r+0x28>
   dc4ec:	462f      	mov	r7, r5
   dc4ee:	e7f2      	b.n	dc4d6 <_strtol_r+0xe>
   dc4f0:	2c2d      	cmp	r4, #45	; 0x2d
   dc4f2:	d103      	bne.n	dc4fc <_strtol_r+0x34>
   dc4f4:	1cbd      	adds	r5, r7, #2
   dc4f6:	787c      	ldrb	r4, [r7, #1]
   dc4f8:	2601      	movs	r6, #1
   dc4fa:	e003      	b.n	dc504 <_strtol_r+0x3c>
   dc4fc:	2c2b      	cmp	r4, #43	; 0x2b
   dc4fe:	bf04      	itt	eq
   dc500:	787c      	ldrbeq	r4, [r7, #1]
   dc502:	1cbd      	addeq	r5, r7, #2
   dc504:	b113      	cbz	r3, dc50c <_strtol_r+0x44>
   dc506:	2b10      	cmp	r3, #16
   dc508:	d10a      	bne.n	dc520 <_strtol_r+0x58>
   dc50a:	e05b      	b.n	dc5c4 <_strtol_r+0xfc>
   dc50c:	2c30      	cmp	r4, #48	; 0x30
   dc50e:	d157      	bne.n	dc5c0 <_strtol_r+0xf8>
   dc510:	7828      	ldrb	r0, [r5, #0]
   dc512:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc516:	2858      	cmp	r0, #88	; 0x58
   dc518:	d14d      	bne.n	dc5b6 <_strtol_r+0xee>
   dc51a:	786c      	ldrb	r4, [r5, #1]
   dc51c:	2310      	movs	r3, #16
   dc51e:	3502      	adds	r5, #2
   dc520:	2e00      	cmp	r6, #0
   dc522:	bf14      	ite	ne
   dc524:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dc528:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dc52c:	2700      	movs	r7, #0
   dc52e:	fbbc faf3 	udiv	sl, ip, r3
   dc532:	4638      	mov	r0, r7
   dc534:	fb03 cc1a 	mls	ip, r3, sl, ip
   dc538:	eb09 0e04 	add.w	lr, r9, r4
   dc53c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc540:	f01e 0f04 	tst.w	lr, #4
   dc544:	d001      	beq.n	dc54a <_strtol_r+0x82>
   dc546:	3c30      	subs	r4, #48	; 0x30
   dc548:	e00b      	b.n	dc562 <_strtol_r+0x9a>
   dc54a:	f01e 0e03 	ands.w	lr, lr, #3
   dc54e:	d01b      	beq.n	dc588 <_strtol_r+0xc0>
   dc550:	f1be 0f01 	cmp.w	lr, #1
   dc554:	bf0c      	ite	eq
   dc556:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc55a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc55e:	ebce 0404 	rsb	r4, lr, r4
   dc562:	42a3      	cmp	r3, r4
   dc564:	dd10      	ble.n	dc588 <_strtol_r+0xc0>
   dc566:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dc56a:	d00a      	beq.n	dc582 <_strtol_r+0xba>
   dc56c:	4550      	cmp	r0, sl
   dc56e:	d806      	bhi.n	dc57e <_strtol_r+0xb6>
   dc570:	d101      	bne.n	dc576 <_strtol_r+0xae>
   dc572:	4564      	cmp	r4, ip
   dc574:	dc03      	bgt.n	dc57e <_strtol_r+0xb6>
   dc576:	fb03 4000 	mla	r0, r3, r0, r4
   dc57a:	2701      	movs	r7, #1
   dc57c:	e001      	b.n	dc582 <_strtol_r+0xba>
   dc57e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc582:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc586:	e7d7      	b.n	dc538 <_strtol_r+0x70>
   dc588:	1c7b      	adds	r3, r7, #1
   dc58a:	d10c      	bne.n	dc5a6 <_strtol_r+0xde>
   dc58c:	2e00      	cmp	r6, #0
   dc58e:	f04f 0322 	mov.w	r3, #34	; 0x22
   dc592:	bf14      	ite	ne
   dc594:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dc598:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc59c:	f8c8 3000 	str.w	r3, [r8]
   dc5a0:	b92a      	cbnz	r2, dc5ae <_strtol_r+0xe6>
   dc5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc5a6:	b106      	cbz	r6, dc5aa <_strtol_r+0xe2>
   dc5a8:	4240      	negs	r0, r0
   dc5aa:	b172      	cbz	r2, dc5ca <_strtol_r+0x102>
   dc5ac:	b107      	cbz	r7, dc5b0 <_strtol_r+0xe8>
   dc5ae:	1e69      	subs	r1, r5, #1
   dc5b0:	6011      	str	r1, [r2, #0]
   dc5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc5b6:	2430      	movs	r4, #48	; 0x30
   dc5b8:	2b00      	cmp	r3, #0
   dc5ba:	d1b1      	bne.n	dc520 <_strtol_r+0x58>
   dc5bc:	2308      	movs	r3, #8
   dc5be:	e7af      	b.n	dc520 <_strtol_r+0x58>
   dc5c0:	230a      	movs	r3, #10
   dc5c2:	e7ad      	b.n	dc520 <_strtol_r+0x58>
   dc5c4:	2c30      	cmp	r4, #48	; 0x30
   dc5c6:	d0a3      	beq.n	dc510 <_strtol_r+0x48>
   dc5c8:	e7aa      	b.n	dc520 <_strtol_r+0x58>
   dc5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc5ce:	bf00      	nop
   dc5d0:	2003ddd4 	.word	0x2003ddd4

000dc5d4 <strtol>:
   dc5d4:	4613      	mov	r3, r2
   dc5d6:	460a      	mov	r2, r1
   dc5d8:	4601      	mov	r1, r0
   dc5da:	4802      	ldr	r0, [pc, #8]	; (dc5e4 <strtol+0x10>)
   dc5dc:	6800      	ldr	r0, [r0, #0]
   dc5de:	f7ff bf73 	b.w	dc4c8 <_strtol_r>
   dc5e2:	bf00      	nop
   dc5e4:	2003de38 	.word	0x2003de38

000dc5e8 <_strtoul_r>:
   dc5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc5ec:	4680      	mov	r8, r0
   dc5ee:	483c      	ldr	r0, [pc, #240]	; (dc6e0 <_strtoul_r+0xf8>)
   dc5f0:	f8d0 9000 	ldr.w	r9, [r0]
   dc5f4:	460e      	mov	r6, r1
   dc5f6:	4635      	mov	r5, r6
   dc5f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc5fc:	eb09 0004 	add.w	r0, r9, r4
   dc600:	7840      	ldrb	r0, [r0, #1]
   dc602:	f000 0008 	and.w	r0, r0, #8
   dc606:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc60a:	b108      	cbz	r0, dc610 <_strtoul_r+0x28>
   dc60c:	462e      	mov	r6, r5
   dc60e:	e7f2      	b.n	dc5f6 <_strtoul_r+0xe>
   dc610:	2c2d      	cmp	r4, #45	; 0x2d
   dc612:	d103      	bne.n	dc61c <_strtoul_r+0x34>
   dc614:	1cb5      	adds	r5, r6, #2
   dc616:	7874      	ldrb	r4, [r6, #1]
   dc618:	2701      	movs	r7, #1
   dc61a:	e003      	b.n	dc624 <_strtoul_r+0x3c>
   dc61c:	2c2b      	cmp	r4, #43	; 0x2b
   dc61e:	bf04      	itt	eq
   dc620:	7874      	ldrbeq	r4, [r6, #1]
   dc622:	1cb5      	addeq	r5, r6, #2
   dc624:	b113      	cbz	r3, dc62c <_strtoul_r+0x44>
   dc626:	2b10      	cmp	r3, #16
   dc628:	d10a      	bne.n	dc640 <_strtoul_r+0x58>
   dc62a:	e053      	b.n	dc6d4 <_strtoul_r+0xec>
   dc62c:	2c30      	cmp	r4, #48	; 0x30
   dc62e:	d14f      	bne.n	dc6d0 <_strtoul_r+0xe8>
   dc630:	7828      	ldrb	r0, [r5, #0]
   dc632:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc636:	2858      	cmp	r0, #88	; 0x58
   dc638:	d145      	bne.n	dc6c6 <_strtoul_r+0xde>
   dc63a:	786c      	ldrb	r4, [r5, #1]
   dc63c:	2310      	movs	r3, #16
   dc63e:	3502      	adds	r5, #2
   dc640:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc644:	2600      	movs	r6, #0
   dc646:	fbbc fcf3 	udiv	ip, ip, r3
   dc64a:	fb03 fa0c 	mul.w	sl, r3, ip
   dc64e:	ea6f 0a0a 	mvn.w	sl, sl
   dc652:	4630      	mov	r0, r6
   dc654:	eb09 0e04 	add.w	lr, r9, r4
   dc658:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc65c:	f01e 0f04 	tst.w	lr, #4
   dc660:	d001      	beq.n	dc666 <_strtoul_r+0x7e>
   dc662:	3c30      	subs	r4, #48	; 0x30
   dc664:	e00b      	b.n	dc67e <_strtoul_r+0x96>
   dc666:	f01e 0e03 	ands.w	lr, lr, #3
   dc66a:	d01a      	beq.n	dc6a2 <_strtoul_r+0xba>
   dc66c:	f1be 0f01 	cmp.w	lr, #1
   dc670:	bf0c      	ite	eq
   dc672:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc676:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc67a:	ebce 0404 	rsb	r4, lr, r4
   dc67e:	42a3      	cmp	r3, r4
   dc680:	dd0f      	ble.n	dc6a2 <_strtoul_r+0xba>
   dc682:	2e00      	cmp	r6, #0
   dc684:	db08      	blt.n	dc698 <_strtoul_r+0xb0>
   dc686:	4560      	cmp	r0, ip
   dc688:	d806      	bhi.n	dc698 <_strtoul_r+0xb0>
   dc68a:	d101      	bne.n	dc690 <_strtoul_r+0xa8>
   dc68c:	4554      	cmp	r4, sl
   dc68e:	dc03      	bgt.n	dc698 <_strtoul_r+0xb0>
   dc690:	fb03 4000 	mla	r0, r3, r0, r4
   dc694:	2601      	movs	r6, #1
   dc696:	e001      	b.n	dc69c <_strtoul_r+0xb4>
   dc698:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc69c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc6a0:	e7d8      	b.n	dc654 <_strtoul_r+0x6c>
   dc6a2:	2e00      	cmp	r6, #0
   dc6a4:	da07      	bge.n	dc6b6 <_strtoul_r+0xce>
   dc6a6:	2322      	movs	r3, #34	; 0x22
   dc6a8:	f8c8 3000 	str.w	r3, [r8]
   dc6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc6b0:	b92a      	cbnz	r2, dc6be <_strtoul_r+0xd6>
   dc6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6b6:	b107      	cbz	r7, dc6ba <_strtoul_r+0xd2>
   dc6b8:	4240      	negs	r0, r0
   dc6ba:	b172      	cbz	r2, dc6da <_strtoul_r+0xf2>
   dc6bc:	b106      	cbz	r6, dc6c0 <_strtoul_r+0xd8>
   dc6be:	1e69      	subs	r1, r5, #1
   dc6c0:	6011      	str	r1, [r2, #0]
   dc6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6c6:	2430      	movs	r4, #48	; 0x30
   dc6c8:	2b00      	cmp	r3, #0
   dc6ca:	d1b9      	bne.n	dc640 <_strtoul_r+0x58>
   dc6cc:	2308      	movs	r3, #8
   dc6ce:	e7b7      	b.n	dc640 <_strtoul_r+0x58>
   dc6d0:	230a      	movs	r3, #10
   dc6d2:	e7b5      	b.n	dc640 <_strtoul_r+0x58>
   dc6d4:	2c30      	cmp	r4, #48	; 0x30
   dc6d6:	d0ab      	beq.n	dc630 <_strtoul_r+0x48>
   dc6d8:	e7b2      	b.n	dc640 <_strtoul_r+0x58>
   dc6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6de:	bf00      	nop
   dc6e0:	2003ddd4 	.word	0x2003ddd4

000dc6e4 <strtoul>:
   dc6e4:	4613      	mov	r3, r2
   dc6e6:	460a      	mov	r2, r1
   dc6e8:	4601      	mov	r1, r0
   dc6ea:	4802      	ldr	r0, [pc, #8]	; (dc6f4 <strtoul+0x10>)
   dc6ec:	6800      	ldr	r0, [r0, #0]
   dc6ee:	f7ff bf7b 	b.w	dc5e8 <_strtoul_r>
   dc6f2:	bf00      	nop
   dc6f4:	2003de38 	.word	0x2003de38

000dc6f8 <__get_current_time_locale>:
   dc6f8:	4b04      	ldr	r3, [pc, #16]	; (dc70c <__get_current_time_locale+0x14>)
   dc6fa:	4a05      	ldr	r2, [pc, #20]	; (dc710 <__get_current_time_locale+0x18>)
   dc6fc:	6818      	ldr	r0, [r3, #0]
   dc6fe:	4b05      	ldr	r3, [pc, #20]	; (dc714 <__get_current_time_locale+0x1c>)
   dc700:	2800      	cmp	r0, #0
   dc702:	bf14      	ite	ne
   dc704:	4610      	movne	r0, r2
   dc706:	4618      	moveq	r0, r3
   dc708:	4770      	bx	lr
   dc70a:	bf00      	nop
   dc70c:	2003e6c8 	.word	0x2003e6c8
   dc710:	2003e6cc 	.word	0x2003e6cc
   dc714:	000ddfcc 	.word	0x000ddfcc

000dc718 <__tzcalc_limits>:
   dc718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc71c:	4604      	mov	r4, r0
   dc71e:	f000 fa87 	bl	dcc30 <__gettzinfo>
   dc722:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc726:	429c      	cmp	r4, r3
   dc728:	f340 8096 	ble.w	dc858 <__tzcalc_limits+0x140>
   dc72c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc730:	18e3      	adds	r3, r4, r3
   dc732:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc736:	109b      	asrs	r3, r3, #2
   dc738:	f240 156d 	movw	r5, #365	; 0x16d
   dc73c:	fb05 3502 	mla	r5, r5, r2, r3
   dc740:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc744:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc748:	fb92 f3f3 	sdiv	r3, r2, r3
   dc74c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc750:	442b      	add	r3, r5
   dc752:	18a5      	adds	r5, r4, r2
   dc754:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc758:	fb95 f5f2 	sdiv	r5, r5, r2
   dc75c:	441d      	add	r5, r3
   dc75e:	2364      	movs	r3, #100	; 0x64
   dc760:	fb94 f7f2 	sdiv	r7, r4, r2
   dc764:	fb94 f6f3 	sdiv	r6, r4, r3
   dc768:	fb02 4717 	mls	r7, r2, r7, r4
   dc76c:	fb03 4616 	mls	r6, r3, r6, r4
   dc770:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc774:	fab7 fe87 	clz	lr, r7
   dc778:	9301      	str	r3, [sp, #4]
   dc77a:	f004 0303 	and.w	r3, r4, #3
   dc77e:	6044      	str	r4, [r0, #4]
   dc780:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc784:	4601      	mov	r1, r0
   dc786:	9300      	str	r3, [sp, #0]
   dc788:	f04f 0c07 	mov.w	ip, #7
   dc78c:	7a0b      	ldrb	r3, [r1, #8]
   dc78e:	2b4a      	cmp	r3, #74	; 0x4a
   dc790:	d10e      	bne.n	dc7b0 <__tzcalc_limits+0x98>
   dc792:	694b      	ldr	r3, [r1, #20]
   dc794:	9a00      	ldr	r2, [sp, #0]
   dc796:	18ec      	adds	r4, r5, r3
   dc798:	b902      	cbnz	r2, dc79c <__tzcalc_limits+0x84>
   dc79a:	b906      	cbnz	r6, dc79e <__tzcalc_limits+0x86>
   dc79c:	b927      	cbnz	r7, dc7a8 <__tzcalc_limits+0x90>
   dc79e:	2b3b      	cmp	r3, #59	; 0x3b
   dc7a0:	bfd4      	ite	le
   dc7a2:	2300      	movle	r3, #0
   dc7a4:	2301      	movgt	r3, #1
   dc7a6:	e000      	b.n	dc7aa <__tzcalc_limits+0x92>
   dc7a8:	2300      	movs	r3, #0
   dc7aa:	4423      	add	r3, r4
   dc7ac:	3b01      	subs	r3, #1
   dc7ae:	e03f      	b.n	dc830 <__tzcalc_limits+0x118>
   dc7b0:	2b44      	cmp	r3, #68	; 0x44
   dc7b2:	d102      	bne.n	dc7ba <__tzcalc_limits+0xa2>
   dc7b4:	694b      	ldr	r3, [r1, #20]
   dc7b6:	442b      	add	r3, r5
   dc7b8:	e03a      	b.n	dc830 <__tzcalc_limits+0x118>
   dc7ba:	9b00      	ldr	r3, [sp, #0]
   dc7bc:	b92b      	cbnz	r3, dc7ca <__tzcalc_limits+0xb2>
   dc7be:	2e00      	cmp	r6, #0
   dc7c0:	bf0c      	ite	eq
   dc7c2:	46f0      	moveq	r8, lr
   dc7c4:	f04f 0801 	movne.w	r8, #1
   dc7c8:	e000      	b.n	dc7cc <__tzcalc_limits+0xb4>
   dc7ca:	46f0      	mov	r8, lr
   dc7cc:	4b24      	ldr	r3, [pc, #144]	; (dc860 <__tzcalc_limits+0x148>)
   dc7ce:	68cc      	ldr	r4, [r1, #12]
   dc7d0:	2230      	movs	r2, #48	; 0x30
   dc7d2:	fb02 3808 	mla	r8, r2, r8, r3
   dc7d6:	f1a8 0a04 	sub.w	sl, r8, #4
   dc7da:	46a9      	mov	r9, r5
   dc7dc:	2301      	movs	r3, #1
   dc7de:	42a3      	cmp	r3, r4
   dc7e0:	da04      	bge.n	dc7ec <__tzcalc_limits+0xd4>
   dc7e2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc7e6:	3301      	adds	r3, #1
   dc7e8:	44d9      	add	r9, fp
   dc7ea:	e7f8      	b.n	dc7de <__tzcalc_limits+0xc6>
   dc7ec:	f109 0304 	add.w	r3, r9, #4
   dc7f0:	fb93 fbfc 	sdiv	fp, r3, ip
   dc7f4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc7f8:	2c01      	cmp	r4, #1
   dc7fa:	ebca 0a03 	rsb	sl, sl, r3
   dc7fe:	694b      	ldr	r3, [r1, #20]
   dc800:	bfb8      	it	lt
   dc802:	2401      	movlt	r4, #1
   dc804:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc808:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc80c:	690b      	ldr	r3, [r1, #16]
   dc80e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dc812:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc816:	bf48      	it	mi
   dc818:	f10a 0a07 	addmi.w	sl, sl, #7
   dc81c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc820:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc824:	4453      	add	r3, sl
   dc826:	42a3      	cmp	r3, r4
   dc828:	db01      	blt.n	dc82e <__tzcalc_limits+0x116>
   dc82a:	3b07      	subs	r3, #7
   dc82c:	e7fb      	b.n	dc826 <__tzcalc_limits+0x10e>
   dc82e:	444b      	add	r3, r9
   dc830:	698c      	ldr	r4, [r1, #24]
   dc832:	4a0c      	ldr	r2, [pc, #48]	; (dc864 <__tzcalc_limits+0x14c>)
   dc834:	fb02 4303 	mla	r3, r2, r3, r4
   dc838:	6a0c      	ldr	r4, [r1, #32]
   dc83a:	4423      	add	r3, r4
   dc83c:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc840:	9b01      	ldr	r3, [sp, #4]
   dc842:	4299      	cmp	r1, r3
   dc844:	d1a2      	bne.n	dc78c <__tzcalc_limits+0x74>
   dc846:	69c3      	ldr	r3, [r0, #28]
   dc848:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc84a:	4293      	cmp	r3, r2
   dc84c:	bfac      	ite	ge
   dc84e:	2300      	movge	r3, #0
   dc850:	2301      	movlt	r3, #1
   dc852:	6003      	str	r3, [r0, #0]
   dc854:	2001      	movs	r0, #1
   dc856:	e000      	b.n	dc85a <__tzcalc_limits+0x142>
   dc858:	2000      	movs	r0, #0
   dc85a:	b003      	add	sp, #12
   dc85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc860:	000ddde4 	.word	0x000ddde4
   dc864:	00015180 	.word	0x00015180

000dc868 <__tz_lock>:
   dc868:	4770      	bx	lr

000dc86a <__tz_unlock>:
   dc86a:	4770      	bx	lr

000dc86c <_tzset_unlocked>:
   dc86c:	4b01      	ldr	r3, [pc, #4]	; (dc874 <_tzset_unlocked+0x8>)
   dc86e:	6818      	ldr	r0, [r3, #0]
   dc870:	f000 b802 	b.w	dc878 <_tzset_unlocked_r>
   dc874:	2003de38 	.word	0x2003de38

000dc878 <_tzset_unlocked_r>:
   dc878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc87c:	b08d      	sub	sp, #52	; 0x34
   dc87e:	4607      	mov	r7, r0
   dc880:	f000 f9d6 	bl	dcc30 <__gettzinfo>
   dc884:	49b0      	ldr	r1, [pc, #704]	; (dcb48 <_tzset_unlocked_r+0x2d0>)
   dc886:	4eb1      	ldr	r6, [pc, #708]	; (dcb4c <_tzset_unlocked_r+0x2d4>)
   dc888:	4604      	mov	r4, r0
   dc88a:	4638      	mov	r0, r7
   dc88c:	f000 f9c8 	bl	dcc20 <_getenv_r>
   dc890:	4605      	mov	r5, r0
   dc892:	b960      	cbnz	r0, dc8ae <_tzset_unlocked_r+0x36>
   dc894:	4bae      	ldr	r3, [pc, #696]	; (dcb50 <_tzset_unlocked_r+0x2d8>)
   dc896:	4aaf      	ldr	r2, [pc, #700]	; (dcb54 <_tzset_unlocked_r+0x2dc>)
   dc898:	6018      	str	r0, [r3, #0]
   dc89a:	4baf      	ldr	r3, [pc, #700]	; (dcb58 <_tzset_unlocked_r+0x2e0>)
   dc89c:	6018      	str	r0, [r3, #0]
   dc89e:	4baf      	ldr	r3, [pc, #700]	; (dcb5c <_tzset_unlocked_r+0x2e4>)
   dc8a0:	6830      	ldr	r0, [r6, #0]
   dc8a2:	601a      	str	r2, [r3, #0]
   dc8a4:	605a      	str	r2, [r3, #4]
   dc8a6:	f7fb fdb1 	bl	d840c <free>
   dc8aa:	6035      	str	r5, [r6, #0]
   dc8ac:	e148      	b.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dc8ae:	6831      	ldr	r1, [r6, #0]
   dc8b0:	b979      	cbnz	r1, dc8d2 <_tzset_unlocked_r+0x5a>
   dc8b2:	6830      	ldr	r0, [r6, #0]
   dc8b4:	f7fb fdaa 	bl	d840c <free>
   dc8b8:	4628      	mov	r0, r5
   dc8ba:	f7ff fdd5 	bl	dc468 <strlen>
   dc8be:	1c41      	adds	r1, r0, #1
   dc8c0:	4638      	mov	r0, r7
   dc8c2:	f7fb fde3 	bl	d848c <_malloc_r>
   dc8c6:	6030      	str	r0, [r6, #0]
   dc8c8:	b148      	cbz	r0, dc8de <_tzset_unlocked_r+0x66>
   dc8ca:	4629      	mov	r1, r5
   dc8cc:	f7ff f894 	bl	db9f8 <strcpy>
   dc8d0:	e005      	b.n	dc8de <_tzset_unlocked_r+0x66>
   dc8d2:	f7ff f887 	bl	db9e4 <strcmp>
   dc8d6:	2800      	cmp	r0, #0
   dc8d8:	f000 8132 	beq.w	dcb40 <_tzset_unlocked_r+0x2c8>
   dc8dc:	e7e9      	b.n	dc8b2 <_tzset_unlocked_r+0x3a>
   dc8de:	782b      	ldrb	r3, [r5, #0]
   dc8e0:	4a9f      	ldr	r2, [pc, #636]	; (dcb60 <_tzset_unlocked_r+0x2e8>)
   dc8e2:	49a0      	ldr	r1, [pc, #640]	; (dcb64 <_tzset_unlocked_r+0x2ec>)
   dc8e4:	2b3a      	cmp	r3, #58	; 0x3a
   dc8e6:	bf08      	it	eq
   dc8e8:	3501      	addeq	r5, #1
   dc8ea:	ae0a      	add	r6, sp, #40	; 0x28
   dc8ec:	4633      	mov	r3, r6
   dc8ee:	4628      	mov	r0, r5
   dc8f0:	f7fb fda4 	bl	d843c <siscanf>
   dc8f4:	2800      	cmp	r0, #0
   dc8f6:	f340 8123 	ble.w	dcb40 <_tzset_unlocked_r+0x2c8>
   dc8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc8fc:	18ef      	adds	r7, r5, r3
   dc8fe:	5ceb      	ldrb	r3, [r5, r3]
   dc900:	2b2d      	cmp	r3, #45	; 0x2d
   dc902:	d103      	bne.n	dc90c <_tzset_unlocked_r+0x94>
   dc904:	3701      	adds	r7, #1
   dc906:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc90a:	e003      	b.n	dc914 <_tzset_unlocked_r+0x9c>
   dc90c:	2b2b      	cmp	r3, #43	; 0x2b
   dc90e:	bf08      	it	eq
   dc910:	3701      	addeq	r7, #1
   dc912:	2501      	movs	r5, #1
   dc914:	f10d 0a20 	add.w	sl, sp, #32
   dc918:	f10d 0b1e 	add.w	fp, sp, #30
   dc91c:	f04f 0800 	mov.w	r8, #0
   dc920:	9603      	str	r6, [sp, #12]
   dc922:	f8cd a008 	str.w	sl, [sp, #8]
   dc926:	9601      	str	r6, [sp, #4]
   dc928:	f8cd b000 	str.w	fp, [sp]
   dc92c:	4633      	mov	r3, r6
   dc92e:	aa07      	add	r2, sp, #28
   dc930:	498d      	ldr	r1, [pc, #564]	; (dcb68 <_tzset_unlocked_r+0x2f0>)
   dc932:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc936:	4638      	mov	r0, r7
   dc938:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc93c:	f7fb fd7e 	bl	d843c <siscanf>
   dc940:	4540      	cmp	r0, r8
   dc942:	f340 80fd 	ble.w	dcb40 <_tzset_unlocked_r+0x2c8>
   dc946:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc94a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc94e:	f8df 9224 	ldr.w	r9, [pc, #548]	; dcb74 <_tzset_unlocked_r+0x2fc>
   dc952:	213c      	movs	r1, #60	; 0x3c
   dc954:	fb01 3302 	mla	r3, r1, r2, r3
   dc958:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc95c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc960:	fb01 3302 	mla	r3, r1, r2, r3
   dc964:	435d      	muls	r5, r3
   dc966:	6225      	str	r5, [r4, #32]
   dc968:	4d7c      	ldr	r5, [pc, #496]	; (dcb5c <_tzset_unlocked_r+0x2e4>)
   dc96a:	4b7d      	ldr	r3, [pc, #500]	; (dcb60 <_tzset_unlocked_r+0x2e8>)
   dc96c:	602b      	str	r3, [r5, #0]
   dc96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc970:	497c      	ldr	r1, [pc, #496]	; (dcb64 <_tzset_unlocked_r+0x2ec>)
   dc972:	441f      	add	r7, r3
   dc974:	464a      	mov	r2, r9
   dc976:	4633      	mov	r3, r6
   dc978:	4638      	mov	r0, r7
   dc97a:	f7fb fd5f 	bl	d843c <siscanf>
   dc97e:	4540      	cmp	r0, r8
   dc980:	dc08      	bgt.n	dc994 <_tzset_unlocked_r+0x11c>
   dc982:	682b      	ldr	r3, [r5, #0]
   dc984:	606b      	str	r3, [r5, #4]
   dc986:	4b72      	ldr	r3, [pc, #456]	; (dcb50 <_tzset_unlocked_r+0x2d8>)
   dc988:	6a22      	ldr	r2, [r4, #32]
   dc98a:	601a      	str	r2, [r3, #0]
   dc98c:	4b72      	ldr	r3, [pc, #456]	; (dcb58 <_tzset_unlocked_r+0x2e0>)
   dc98e:	f8c3 8000 	str.w	r8, [r3]
   dc992:	e0d5      	b.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dc994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc996:	f8c5 9004 	str.w	r9, [r5, #4]
   dc99a:	18fd      	adds	r5, r7, r3
   dc99c:	5cfb      	ldrb	r3, [r7, r3]
   dc99e:	2b2d      	cmp	r3, #45	; 0x2d
   dc9a0:	d103      	bne.n	dc9aa <_tzset_unlocked_r+0x132>
   dc9a2:	3501      	adds	r5, #1
   dc9a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc9a8:	e003      	b.n	dc9b2 <_tzset_unlocked_r+0x13a>
   dc9aa:	2b2b      	cmp	r3, #43	; 0x2b
   dc9ac:	bf08      	it	eq
   dc9ae:	3501      	addeq	r5, #1
   dc9b0:	2701      	movs	r7, #1
   dc9b2:	2300      	movs	r3, #0
   dc9b4:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc9b8:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc9bc:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc9c0:	930a      	str	r3, [sp, #40]	; 0x28
   dc9c2:	9603      	str	r6, [sp, #12]
   dc9c4:	f8cd a008 	str.w	sl, [sp, #8]
   dc9c8:	9601      	str	r6, [sp, #4]
   dc9ca:	f8cd b000 	str.w	fp, [sp]
   dc9ce:	4633      	mov	r3, r6
   dc9d0:	aa07      	add	r2, sp, #28
   dc9d2:	4965      	ldr	r1, [pc, #404]	; (dcb68 <_tzset_unlocked_r+0x2f0>)
   dc9d4:	4628      	mov	r0, r5
   dc9d6:	f7fb fd31 	bl	d843c <siscanf>
   dc9da:	2800      	cmp	r0, #0
   dc9dc:	dc04      	bgt.n	dc9e8 <_tzset_unlocked_r+0x170>
   dc9de:	6a23      	ldr	r3, [r4, #32]
   dc9e0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc9e4:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc9e6:	e00e      	b.n	dca06 <_tzset_unlocked_r+0x18e>
   dc9e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc9ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc9f0:	213c      	movs	r1, #60	; 0x3c
   dc9f2:	fb01 3302 	mla	r3, r1, r2, r3
   dc9f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc9fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc9fe:	fb01 3302 	mla	r3, r1, r2, r3
   dca02:	435f      	muls	r7, r3
   dca04:	63e7      	str	r7, [r4, #60]	; 0x3c
   dca06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dca08:	4627      	mov	r7, r4
   dca0a:	441d      	add	r5, r3
   dca0c:	f04f 0900 	mov.w	r9, #0
   dca10:	782b      	ldrb	r3, [r5, #0]
   dca12:	2b2c      	cmp	r3, #44	; 0x2c
   dca14:	bf08      	it	eq
   dca16:	3501      	addeq	r5, #1
   dca18:	f895 8000 	ldrb.w	r8, [r5]
   dca1c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dca20:	d126      	bne.n	dca70 <_tzset_unlocked_r+0x1f8>
   dca22:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dca26:	9302      	str	r3, [sp, #8]
   dca28:	ab09      	add	r3, sp, #36	; 0x24
   dca2a:	9300      	str	r3, [sp, #0]
   dca2c:	9603      	str	r6, [sp, #12]
   dca2e:	9601      	str	r6, [sp, #4]
   dca30:	4633      	mov	r3, r6
   dca32:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dca36:	494d      	ldr	r1, [pc, #308]	; (dcb6c <_tzset_unlocked_r+0x2f4>)
   dca38:	4628      	mov	r0, r5
   dca3a:	f7fb fcff 	bl	d843c <siscanf>
   dca3e:	2803      	cmp	r0, #3
   dca40:	d17e      	bne.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dca42:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dca46:	1e4b      	subs	r3, r1, #1
   dca48:	2b0b      	cmp	r3, #11
   dca4a:	d879      	bhi.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dca4c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dca50:	1e53      	subs	r3, r2, #1
   dca52:	2b04      	cmp	r3, #4
   dca54:	d874      	bhi.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dca56:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dca5a:	2b06      	cmp	r3, #6
   dca5c:	d870      	bhi.n	dcb40 <_tzset_unlocked_r+0x2c8>
   dca5e:	f887 8008 	strb.w	r8, [r7, #8]
   dca62:	60f9      	str	r1, [r7, #12]
   dca64:	613a      	str	r2, [r7, #16]
   dca66:	617b      	str	r3, [r7, #20]
   dca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dca6a:	eb05 0803 	add.w	r8, r5, r3
   dca6e:	e02a      	b.n	dcac6 <_tzset_unlocked_r+0x24e>
   dca70:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dca74:	bf06      	itte	eq
   dca76:	3501      	addeq	r5, #1
   dca78:	4643      	moveq	r3, r8
   dca7a:	2344      	movne	r3, #68	; 0x44
   dca7c:	220a      	movs	r2, #10
   dca7e:	a90b      	add	r1, sp, #44	; 0x2c
   dca80:	4628      	mov	r0, r5
   dca82:	9305      	str	r3, [sp, #20]
   dca84:	f7ff fe2e 	bl	dc6e4 <strtoul>
   dca88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dca8c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dca90:	4545      	cmp	r5, r8
   dca92:	9b05      	ldr	r3, [sp, #20]
   dca94:	d114      	bne.n	dcac0 <_tzset_unlocked_r+0x248>
   dca96:	234d      	movs	r3, #77	; 0x4d
   dca98:	f1b9 0f00 	cmp.w	r9, #0
   dca9c:	d107      	bne.n	dcaae <_tzset_unlocked_r+0x236>
   dca9e:	7223      	strb	r3, [r4, #8]
   dcaa0:	2303      	movs	r3, #3
   dcaa2:	60e3      	str	r3, [r4, #12]
   dcaa4:	2302      	movs	r3, #2
   dcaa6:	6123      	str	r3, [r4, #16]
   dcaa8:	f8c4 9014 	str.w	r9, [r4, #20]
   dcaac:	e00b      	b.n	dcac6 <_tzset_unlocked_r+0x24e>
   dcaae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dcab2:	230b      	movs	r3, #11
   dcab4:	62a3      	str	r3, [r4, #40]	; 0x28
   dcab6:	2301      	movs	r3, #1
   dcab8:	62e3      	str	r3, [r4, #44]	; 0x2c
   dcaba:	2300      	movs	r3, #0
   dcabc:	6323      	str	r3, [r4, #48]	; 0x30
   dcabe:	e002      	b.n	dcac6 <_tzset_unlocked_r+0x24e>
   dcac0:	b280      	uxth	r0, r0
   dcac2:	723b      	strb	r3, [r7, #8]
   dcac4:	6178      	str	r0, [r7, #20]
   dcac6:	2302      	movs	r3, #2
   dcac8:	f8ad 301c 	strh.w	r3, [sp, #28]
   dcacc:	2300      	movs	r3, #0
   dcace:	f8ad 301e 	strh.w	r3, [sp, #30]
   dcad2:	f8ad 3020 	strh.w	r3, [sp, #32]
   dcad6:	930a      	str	r3, [sp, #40]	; 0x28
   dcad8:	f898 3000 	ldrb.w	r3, [r8]
   dcadc:	2b2f      	cmp	r3, #47	; 0x2f
   dcade:	d10b      	bne.n	dcaf8 <_tzset_unlocked_r+0x280>
   dcae0:	9603      	str	r6, [sp, #12]
   dcae2:	f8cd a008 	str.w	sl, [sp, #8]
   dcae6:	9601      	str	r6, [sp, #4]
   dcae8:	f8cd b000 	str.w	fp, [sp]
   dcaec:	4633      	mov	r3, r6
   dcaee:	aa07      	add	r2, sp, #28
   dcaf0:	491f      	ldr	r1, [pc, #124]	; (dcb70 <_tzset_unlocked_r+0x2f8>)
   dcaf2:	4640      	mov	r0, r8
   dcaf4:	f7fb fca2 	bl	d843c <siscanf>
   dcaf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dcafc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dcb00:	213c      	movs	r1, #60	; 0x3c
   dcb02:	fb01 3302 	mla	r3, r1, r2, r3
   dcb06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dcb0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dcb0e:	fb01 3302 	mla	r3, r1, r2, r3
   dcb12:	61bb      	str	r3, [r7, #24]
   dcb14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dcb16:	f109 0901 	add.w	r9, r9, #1
   dcb1a:	f1b9 0f02 	cmp.w	r9, #2
   dcb1e:	4445      	add	r5, r8
   dcb20:	f107 071c 	add.w	r7, r7, #28
   dcb24:	f47f af74 	bne.w	dca10 <_tzset_unlocked_r+0x198>
   dcb28:	6860      	ldr	r0, [r4, #4]
   dcb2a:	f7ff fdf5 	bl	dc718 <__tzcalc_limits>
   dcb2e:	4b08      	ldr	r3, [pc, #32]	; (dcb50 <_tzset_unlocked_r+0x2d8>)
   dcb30:	6a22      	ldr	r2, [r4, #32]
   dcb32:	601a      	str	r2, [r3, #0]
   dcb34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dcb36:	1a9b      	subs	r3, r3, r2
   dcb38:	4a07      	ldr	r2, [pc, #28]	; (dcb58 <_tzset_unlocked_r+0x2e0>)
   dcb3a:	bf18      	it	ne
   dcb3c:	2301      	movne	r3, #1
   dcb3e:	6013      	str	r3, [r2, #0]
   dcb40:	b00d      	add	sp, #52	; 0x34
   dcb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb46:	bf00      	nop
   dcb48:	000de0c8 	.word	0x000de0c8
   dcb4c:	2003e7e0 	.word	0x2003e7e0
   dcb50:	2003e7e8 	.word	0x2003e7e8
   dcb54:	000de0cb 	.word	0x000de0cb
   dcb58:	2003e7e4 	.word	0x2003e7e4
   dcb5c:	2003de3c 	.word	0x2003de3c
   dcb60:	2003e7d3 	.word	0x2003e7d3
   dcb64:	000de0cf 	.word	0x000de0cf
   dcb68:	000de0f2 	.word	0x000de0f2
   dcb6c:	000de0de 	.word	0x000de0de
   dcb70:	000de0f1 	.word	0x000de0f1
   dcb74:	2003e7c8 	.word	0x2003e7c8

000dcb78 <abs>:
   dcb78:	2800      	cmp	r0, #0
   dcb7a:	bfb8      	it	lt
   dcb7c:	4240      	neglt	r0, r0
   dcb7e:	4770      	bx	lr

000dcb80 <div>:
   dcb80:	2900      	cmp	r1, #0
   dcb82:	b510      	push	{r4, lr}
   dcb84:	fb91 f4f2 	sdiv	r4, r1, r2
   dcb88:	fb02 1314 	mls	r3, r2, r4, r1
   dcb8c:	db04      	blt.n	dcb98 <div+0x18>
   dcb8e:	2b00      	cmp	r3, #0
   dcb90:	da07      	bge.n	dcba2 <div+0x22>
   dcb92:	3401      	adds	r4, #1
   dcb94:	1a9b      	subs	r3, r3, r2
   dcb96:	e004      	b.n	dcba2 <div+0x22>
   dcb98:	2b00      	cmp	r3, #0
   dcb9a:	bfc4      	itt	gt
   dcb9c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dcba0:	189b      	addgt	r3, r3, r2
   dcba2:	6004      	str	r4, [r0, #0]
   dcba4:	6043      	str	r3, [r0, #4]
   dcba6:	bd10      	pop	{r4, pc}

000dcba8 <_findenv_r>:
   dcba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcbac:	4607      	mov	r7, r0
   dcbae:	468b      	mov	fp, r1
   dcbb0:	4690      	mov	r8, r2
   dcbb2:	f000 f845 	bl	dcc40 <__env_lock>
   dcbb6:	4b19      	ldr	r3, [pc, #100]	; (dcc1c <_findenv_r+0x74>)
   dcbb8:	681d      	ldr	r5, [r3, #0]
   dcbba:	469a      	mov	sl, r3
   dcbbc:	b13d      	cbz	r5, dcbce <_findenv_r+0x26>
   dcbbe:	465c      	mov	r4, fp
   dcbc0:	4623      	mov	r3, r4
   dcbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   dcbc6:	b142      	cbz	r2, dcbda <_findenv_r+0x32>
   dcbc8:	2a3d      	cmp	r2, #61	; 0x3d
   dcbca:	461c      	mov	r4, r3
   dcbcc:	d1f8      	bne.n	dcbc0 <_findenv_r+0x18>
   dcbce:	4638      	mov	r0, r7
   dcbd0:	f000 f837 	bl	dcc42 <__env_unlock>
   dcbd4:	2000      	movs	r0, #0
   dcbd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcbda:	ebcb 0404 	rsb	r4, fp, r4
   dcbde:	46a9      	mov	r9, r5
   dcbe0:	f859 0b04 	ldr.w	r0, [r9], #4
   dcbe4:	2800      	cmp	r0, #0
   dcbe6:	d0f2      	beq.n	dcbce <_findenv_r+0x26>
   dcbe8:	4622      	mov	r2, r4
   dcbea:	4659      	mov	r1, fp
   dcbec:	f7ff fc44 	bl	dc478 <strncmp>
   dcbf0:	b988      	cbnz	r0, dcc16 <_findenv_r+0x6e>
   dcbf2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dcbf6:	191e      	adds	r6, r3, r4
   dcbf8:	5d1b      	ldrb	r3, [r3, r4]
   dcbfa:	2b3d      	cmp	r3, #61	; 0x3d
   dcbfc:	d10b      	bne.n	dcc16 <_findenv_r+0x6e>
   dcbfe:	f8da 3000 	ldr.w	r3, [sl]
   dcc02:	1aed      	subs	r5, r5, r3
   dcc04:	10ad      	asrs	r5, r5, #2
   dcc06:	4638      	mov	r0, r7
   dcc08:	f8c8 5000 	str.w	r5, [r8]
   dcc0c:	f000 f819 	bl	dcc42 <__env_unlock>
   dcc10:	1c70      	adds	r0, r6, #1
   dcc12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcc16:	464d      	mov	r5, r9
   dcc18:	e7e1      	b.n	dcbde <_findenv_r+0x36>
   dcc1a:	bf00      	nop
   dcc1c:	2003de84 	.word	0x2003de84

000dcc20 <_getenv_r>:
   dcc20:	b507      	push	{r0, r1, r2, lr}
   dcc22:	aa01      	add	r2, sp, #4
   dcc24:	f7ff ffc0 	bl	dcba8 <_findenv_r>
   dcc28:	b003      	add	sp, #12
   dcc2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dcc30 <__gettzinfo>:
   dcc30:	4800      	ldr	r0, [pc, #0]	; (dcc34 <__gettzinfo+0x4>)
   dcc32:	4770      	bx	lr
   dcc34:	2003de44 	.word	0x2003de44

000dcc38 <labs>:
   dcc38:	2800      	cmp	r0, #0
   dcc3a:	bfb8      	it	lt
   dcc3c:	4240      	neglt	r0, r0
   dcc3e:	4770      	bx	lr

000dcc40 <__env_lock>:
   dcc40:	4770      	bx	lr

000dcc42 <__env_unlock>:
   dcc42:	4770      	bx	lr

000dcc44 <dynalib_user>:
   dcc44:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dcc54:	0000 0000                                   ....

000dcc58 <_ZTV8MB85RC64>:
	...
   dcc60:	4181 000d 4195 000d 6849 000d 68f5 000d     .A...A..Ih...h..
   dcc70:	696f 000d                                   oi..

000dcc74 <_ZTV17PublishQueueAsync>:
	...
   dcc7c:	4159 000d 416d 000d 774d 000d 78ed 000d     YA..mA..Mw...x..
   dcc8c:	78a9 000d 7887 000d 7a33 000d 78cf 000d     .x...x..3z...x..
   dcc9c:	d083 000d d0c9 000d d0ce 000d d0d3 000d     ................
   dccac:	d0d7 000d d0dc 000d d0e1 000d d0e5 000d     ................
   dccbc:	d0f0 000d d0fb 000d d083 000d d08b 000d     ................
   dcccc:	d08f 000d d098 000d d0a7 000d d0b7 000d     ................
   dccdc:	d0bd 000d 6f4e 4420 7461 0061 6255 6469     ....No Data.Ubid
   dccec:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dccfc:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dcd0c:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dcd1c:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
   dcd2c:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
   dcd3c:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dcd4c:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dcd5c:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
   dcd6c:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
   dcd7c:	7465 2520 0069 6954 656d 5300 6d61 6c70     et %i.Time.Sampl
   dcd8c:	2065 6e49 6574 7672 6c61 6920 2073 6f6e     e Interval is no
   dcd9c:	2077 6925 6d20 6e69 7475 7365 7b00 6322     w %i minutes.{"c
   dcdac:	6261 6e69 2254 253a 2e34 6632 202c 7622     abinT":%4.2f, "v
   dcdbc:	6e65 5474 3a22 3425 322e 2c66 2220 756f     entT":%4.2f, "ou
   dcdcc:	7374 6469 5465 3a22 3425 322e 2c66 2220     tsideT":%4.2f, "
   dcddc:	6162 7474 7265 2279 253a 2c69 2020 6b22     battery":%i,  "k
   dcdec:	7965 2231 223a 7325 2c22 2220 6572 6573     ey1":"%s", "rese
   dcdfc:	7374 3a22 6925 202c 6122 656c 7472 2273     ts":%i, "alerts"
   dce0c:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
   dce1c:	253a 756c 3030 2c30 2220 616c 2274 253a     :%lu000, "lat":%
   dce2c:	2c66 2220 6e6c 2267 253a 7d66 5500 6962     f, "lng":%f}.Ubi
   dce3c:	6f64 7374 4d2d 5442 2d41 6f48 6b6f 762d     dots-MBTA-Hook-v
   dce4c:	2d32 6150 7372 0065 6e49 6176 696c 2064     2-Parse.Invalid 
   dce5c:	6572 6461 6e69 0067 7325 5320 253a 2e32     reading.%s S:%2.
   dce6c:	6630 2525 202c 3a51 3225 302e 2566 2025     0f%%, Q:%2.0f%% 
   dce7c:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   dce8c:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   dce9c:	5441 432b 5546 3d4e 3531 0a0d 5200 6e75     AT+CFUN=15...Run
   dceac:	696e 676e 4400 6961 796c 4320 656c 6e61     ning.Daily Clean
   dcebc:	7075 4400 5453 6f20 6666 6573 2074 3225     up.DST offset %2
   dcecc:	312e 0066 6f6c 6163 6974 6e6f 253a 2c66     .1f.location:%f,
   dcedc:	6625 6120 746c 7469 6475 3a65 6625 7320     %f altitude:%f s
   dceec:	7461 6c65 696c 6574 3a73 6425 6820 6f64     atellites:%d hdo
   dcefc:	3a70 6c25 2500 756c 6d20 6c69 696c 6573     p:%l.%lu millise
   dcf0c:	6f63 646e 2073 6f74 6720 7465 4720 5350     conds to get GPS
   dcf1c:	6620 7869 6e00 206f 6f6c 6163 6974 6e6f      fix.no location
   dcf2c:	7320 7461 6c65 696c 6574 3a73 6425 6700      satellites:%d.g
   dcf3c:	7370 2500 2e34 6632 4620 4c00 616f 6964     ps.%4.2f F.Loadi
   dcf4c:	676e 5320 7379 6574 206d 6544 6166 6c75     ng System Defaul
   dcf5c:	7374 7300 6170 6b72 642f 7665 6369 2f65     ts.spark/device/
   dcf6c:	6573 7373 6f69 2f6e 6e65 0064 7245 6f72     session/end.Erro
   dcf7c:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
   dcf8c:	7453 7461 0065 7245 6f72 2072 7453 7461     State.Error Stat
   dcf9c:	2065 202d 6f50 6577 2072 7943 6c63 0065     e - Power Cycle.
   dcfac:	7245 6f72 2072 7453 7461 2065 202d 7546     Error State - Fu
   dcfbc:	6c6c 4d20 646f 6d65 5220 7365 7465 5300     ll Modem Reset.S
   dcfcc:	6769 616e 006c 6153 706d 656c 6e49 6574     ignal.SampleInte
   dcfdc:	7672 6c61 5200 7365 7465 6f43 6e75 0074     rval.ResetCount.
   dcfec:	6143 6962 546e 6d65 0070 6556 746e 6554     CabinTemp.VentTe
   dcffc:	706d 4f00 7475 6973 6564 6554 706d 5200     mp.OutsideTemp.R
   dd00c:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
   dd01c:	0067 6c41 7265 7374 5400 6d69 4f65 6666     g.Alerts.TimeOff
   dd02c:	6573 0074 6142 7474 7265 4379 6e6f 6574     set.BatteryConte
   dd03c:	7478 7200 7365 7465 5246 4d41 4800 7261     xt.resetFRAM.Har
   dd04c:	5264 7365 7465 5300 6e65 4e64 776f 5600     dReset.SendNow.V
   dd05c:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
   dd06c:	6954 656d 6f7a 656e 5300 7465 442d 5453     Timezone.Set-DST
   dd07c:	664f 7366 7465 5500 6b6e 6f6e 6e77 4e00     Offset.Unknown.N
   dd08c:	746f 4320 6168 6772 6e69 0067 6e4f 5620     ot Charging.On V
   dd09c:	6865 6369 656c 5020 7277 4f00 6666 5620     ehicle Pwr.Off V
   dd0ac:	6865 6369 656c 5020 7277 4600 7561 746c     ehicle Pwr.Fault
   dd0bc:	4400 6369 6e6f 656e 7463 6465 4e00 6e6f     .Diconnected.Non
   dd0cc:	0065 6957 6946 4700 4d53 5500 544d 0053     e.WiFi.GSM.UMTS.
   dd0dc:	4443 414d 4c00 4554 4900 4545 3845 3230     CDMA.LTE.IEEE802
   dd0ec:	3531 0034 544c 5f45 4143 5f54 314d 4c00     154.LTE_CAT_M1.L
   dd0fc:	4554 435f 5441 4e5f 3142 0000               TE_CAT_NB1..

000dd108 <_ZL17FRAMversionNumber>:
   dd108:	0001 0000                                   ....

000dd10c <_ZTVN8particle13__SPISettingsE>:
	...
   dd114:	591d 000d 6564 6166 6c75 2074 4d00 4253     .Y..default .MSB
   dd124:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dd134:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dd144:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dd154:	4d20 444f 2545 3e64 4100 7373 7465 7254      MODE%d>.AssetTr
   dd164:	6361 656b 0072 6977 6572 6552 6461 7942     acker.wireReadBy
   dd174:	6574 4173 6176 6c69 6261 656c 4920 4332     tesAvailable I2C
   dd184:	6520 7272 726f 2520 0075 6977 6572 6552      error %u.wireRe
   dd194:	6461 7942 6574 4173 6176 6c69 6261 656c     adBytesAvailable
   dd1a4:	6920 636e 726f 6572 7463 6320 756f 746e      incorrect count
   dd1b4:	2520 0075 6977 6572 6552 6461 7942 6574      %u.wireReadByte
   dd1c4:	2073 3249 2043 7265 6f72 2072 7525 7700     s I2C error %u.w
   dd1d4:	7269 5265 6165 4264 7479 7365 6920 636e     ireReadBytes inc
   dd1e4:	726f 6572 7463 6320 756f 746e 2520 0075     orrect count %u.

000dd1f4 <_ZTV12AssetTracker>:
	...
   dd1fc:	5989 000d 59a5 000d                         .Y...Y..

000dd204 <_ZTV13LegacyAdapter>:
	...
   dd20c:	5d21 000d 5d23 000d 5047 4d52 0043 4e47     !]..#]..GPRMC.GN
   dd21c:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   dd22c:	004e 4e4e 0045 4e45 0045 5345 0045 5353     N.NNE.ENE.ESE.SS
   dd23c:	0045 5353 0057 5357 0057 4e57 0057 4e4e     E.SSW.WSW.WNW.NN
   dd24c:	0057 6e6f 696c 656e 6c2d 7669 3165 732e     W.online-live1.s
   dd25c:	7265 6976 6563 2e73 2d75 6c62 786f 632e     ervices.u-blox.c
   dd26c:	6d6f 6400 7461 2061 6f74 206f 6f6c 676e     om.data too long
   dd27c:	7020 7961 6f6c 6461 654c 3d6e 7525 6900      payloadLen=%u.i
   dd28c:	766e 6c61 6469 4320 4352 4400 6e6f 2065     nvalid CRC.Done 
   dd29c:	6573 646e 6e69 2067 6961 6964 676e 6420     sending aiding d
   dd2ac:	7461 2061 6f74 4720 5350 0021 6164 6174     ata to GPS!.data
   dd2bc:	6420 6469 276e 2074 6562 6967 206e 6977      didn't begin wi
   dd2cc:	6874 7320 6e79 2063 7962 6574 2073 666f     th sync bytes of
   dd2dc:	7366 7465 253d 0075 6170 6c79 616f 4c64     fset=%u.payloadL
   dd2ec:	6e65 6f20 2066 7525 7320 6565 736d 7420     en of %u seems t
   dd2fc:	206f 6562 6320 726f 7572 7470 6465 2c00     o be corrupted.,
   dd30c:	7b00 6c22 7461 3a22 6625 202c 6c22 676e     .{"lat":%f, "lng
   dd31c:	3a22 6625 007d 6572 7571 7365 6974 676e     ":%f}.requesting
   dd32c:	6520 656c 6176 6974 6e6f 6620 726f 2520      elevation for %
   dd33c:	0073 7341 6973 7473 6c45 7665 7461 6f69     s.AssistElevatio
   dd34c:	006e 6c65 7665 7461 6f69 3d6e 6625 7300     n.elevation=%f.s
   dd35c:	7265 6576 2072 6964 6373 6e6f 656e 7463     erver disconnect
   dd36c:	6465 7520 656e 7078 6365 6574 6c64 0079     ed unexpectedly.
   dd37c:	6f43 746e 6e65 2d74 654c 676e 6874 003a     Content-Length:.
   dd38c:	6f43 6c75 2064 6f6e 2074 6170 7372 2065     Could not parse 
   dd39c:	6f43 746e 6e65 2d74 654c 676e 6874 202c     Content-Length, 
   dd3ac:	7865 7469 6e69 0067 6f43 746e 6e65 2d74     exiting.Content-
   dd3bc:	654c 676e 6874 6f20 2066 7525 6920 2073     Length of %u is 
   dd3cc:	616c 6772 7265 7420 6168 206e 7562 6666     larger than buff
   dd3dc:	7265 6c20 6e65 7467 2068 7525 5400 6d69     er length %u.Tim
   dd3ec:	6465 6f20 7475 6720 7465 6974 676e 6c20     ed out getting l
   dd3fc:	636f 7461 6f69 206e 6e69 6f66 6d72 7461     ocation informat
   dd40c:	6f69 2c6e 6420 6665 7561 746c 6e69 2067     ion, defaulting 
   dd41c:	6f74 6e20 206f 6f6c 6163 6974 6e6f 6d20     to no location m
   dd42c:	646f 0065 6f63 6e6e 6365 6574 2064 6f74     ode.connected to
   dd43c:	2520 0073 472f 7465 6e4f 696c 656e 6144      %s./GetOnlineDa
   dd44c:	6174 612e 6873 3f78 6f74 656b 3d6e 7325     ta.ashx?token=%s
   dd45c:	673b 736e 3d73 7067 3b73 6164 6174 7974     ;gnss=gps;dataty
   dd46c:	6570 653d 6870 612c 6d6c 612c 7875 702c     pe=eph,alm,aux,p
   dd47c:	736f 6c3b 7461 253d 372e 3b66 6f6c 3d6e     os;lat=%.7f;lon=
   dd48c:	2e25 6637 703b 6361 3d63 6425 613b 746c     %.7f;pacc=%d;alt
   dd49c:	253d 3b64 6966 746c 7265 6e6f 6f70 3b73     =%d;filteronpos;
   dd4ac:	616c 6574 636e 3d79 0032 472f 7465 6e4f     latency=2./GetOn
   dd4bc:	696c 656e 6144 6174 612e 6873 3f78 6f74     lineData.ashx?to
   dd4cc:	656b 3d6e 7325 673b 736e 3d73 7067 3b73     ken=%s;gnss=gps;
   dd4dc:	6164 6174 7974 6570 653d 6870 612c 6d6c     datatype=eph,alm
   dd4ec:	612c 7875 4700 5445 2520 2073 5448 5054     ,aux.GET %s HTTP
   dd4fc:	312f 312e 0a0d 6f48 7473 203a 7325 0a0d     /1.1..Host: %s..
   dd50c:	0a0d 6300 6e6f 656e 7463 6f69 206e 6f74     ...connection to
   dd51c:	2520 2073 6166 6c69 6465 4100 726c 6165      %s failed.Alrea
   dd52c:	7964 6820 7661 2065 5047 2053 6966 2c78     dy have GPS fix,
   dd53c:	7320 696b 7070 6e69 2067 7341 6973 7473      skipping Assist
   dd54c:	6f4e 0077 6f4e 6b20 7965 202c 6163 276e     Now.No key, can'
   dd55c:	2074 7375 2065 7341 6973 7473 6f4e 0077     t use AssistNow.
   dd56c:	6f68 6b6f 722d 7365 6f70 736e 2f65 7325     hook-response/%s
   dd57c:	252f 0073 6166 6c69 6465 7420 206f 6c61     /%s.failed to al
   dd58c:	6f6c 6163 6574 4120 7373 7369 4e74 776f     locate AssistNow
   dd59c:	6f44 6e77 6f6c 6461 6100 7070 752e 6c62     Download.app.ubl
   dd5ac:	786f 0000                                   ox..

000dd5b0 <_ZTV9LIS3DHSPI>:
	...
   dd5b8:	6675 000d 6677 000d 677d 000d 66b5 000d     uf..wf..}g...f..
   dd5c8:	66f7 000d 6685 000d 669f 000d               .f...f...f..

000dd5d4 <_ZTV6LIS3DH>:
	...
   dd5e4:	6759 000d 40a9 000d 40a9 000d 7277 7469     Yg...@...@..writ
   dd5f4:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   dd604:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dd614:	7264 253d 0075 6572 6461 7320 7465 6120     dr=%u.read set a
   dd624:	6464 6572 7373 6620 6961 656c 2064 6425     ddress failed %d
   dd634:	6400 6469 276e 2074 6572 6563 7669 2065     .didn't receive 
   dd644:	6e65 756f 6867 6220 7479 7365 6320 756f     enough bytes cou
   dd654:	746e 253d 0075 7277 7469 2065 6166 6c69     nt=%u.write fail
   dd664:	6465 2520 0064 0000                         ed %d...

000dd66c <_ZTV6MB85RC>:
	...
   dd674:	6797 000d 6799 000d 6849 000d 68f5 000d     .g...g..Ih...h..
   dd684:	696f 000d                                   oi..

000dd688 <_ZTV14MCP79410EEPROM>:
	...
   dd690:	6a37 000d 6a59 000d 6a2d 000d 6a31 000d     7j..Yj..-j..1j..
   dd6a0:	6a75 000d 6ea9 000d 72c5 000d               uj...n...r..

000dd6ac <_ZTV12MCP79410SRAM>:
	...
   dd6b4:	6a35 000d 6a4b 000d 6a25 000d 6a29 000d     5j..Kj..%j..)j..
   dd6c4:	6a75 000d 6ee1 000d 712f 000d 6579 7261     uj...n../q..year
   dd6d4:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd6e4:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd6f4:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd704:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd714:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd724:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd734:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd744:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd754:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd764:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd774:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd784:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd794:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd7a4:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd7b4:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd7c4:	7061 2e70 7472 0063                         app.rtc.

000dd7cc <_ZTV12MCP79410Time>:
	...
   dd7d4:	6a39 000d 6a3d 000d                         9j..=j..

000dd7dc <_ZTV8MCP79410>:
	...
   dd7e4:	6a3b 000d 6a67 000d                         ;j..gj..

000dd7ec <_ZTV25PublishQueueAsyncRetained>:
	...
   dd7f4:	7845 000d 7859 000d 774d 000d 78ed 000d     Ex..Yx..Mw...x..
   dd804:	78a9 000d 7887 000d 7a33 000d 78cf 000d     .x...x..3z...x..
   dd814:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
   dd824:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
   dd834:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
   dd844:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
   dd854:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
   dd864:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
   dd874:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
   dd884:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
   dd894:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
   dd8a4:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
   dd8b4:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
   dd8c4:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

000dd8d0 <_ZTV21PublishQueueAsyncBase>:
	...
   dd8e0:	774d 000d 40a9 000d 40a9 000d 40a9 000d     Mw...@...@...@..
   dd8f0:	40a9 000d 40a9 000d                         .@...@..

000dd8f8 <_ZTVN5spark13CellularClassE>:
	...
   dd900:	85a7 000d 859d 000d 8593 000d 8549 000d     ............I...
   dd910:	8587 000d 857b 000d 856f 000d 8567 000d     ....{...o...g...
   dd920:	855d 000d 8553 000d 9269 000d               ]...S...i...

000dd92c <_ZTV14CellularSignal>:
	...
   dd934:	8655 000d 86b5 000d 8657 000d 86f9 000d     U.......W.......
   dd944:	865d 000d 86c5 000d 8689 000d 8783 000d     ]...............
   dd954:	fffc ffff 0000 0000 87ad 000d               ............

000dd960 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd968:	87b5 000d 87bb 000d 87ff 000d 87c9 000d     ................
   dd978:	87b7 000d                                   ....

000dd97c <_ZTVN5spark13EthernetClassE>:
	...
   dd984:	8df3 000d 8de9 000d 8ddf 000d 8dd5 000d     ................
   dd994:	8dc9 000d 8dbd 000d 8db1 000d 8da9 000d     ................
   dd9a4:	8d9f 000d 8d95 000d 9269 000d               ........i...

000dd9b0 <_ZTV7TwoWire>:
	...
   dd9b8:	8e11 000d 8e5b 000d 8e33 000d 8e13 000d     ....[...3.......
   dd9c8:	8e3b 000d 8e43 000d 8e4b 000d 8e53 000d     ;...C...K...S...

000dd9d8 <_ZTV9IPAddress>:
	...
   dd9e0:	8fa1 000d 8f91 000d 8f93 000d 6162 6475     ............baud
   dd9f0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dda00:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dda10:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dda20:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dda30:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dda40:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dda50:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dda60:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dda70:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dda80:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dda90:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   ddaa0:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   ddab0:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000ddac0 <_ZTVN5spark9MeshClassE>:
	...
   ddac8:	90e3 000d 90d9 000d 90cf 000d 90c5 000d     ................
   ddad8:	90b9 000d 90ad 000d 90a1 000d 9099 000d     ................
   ddae8:	908f 000d 9085 000d 9269 000d               ........i...

000ddaf4 <_ZTVN5spark12NetworkClassE>:
	...
   ddafc:	9201 000d 920b 000d 9215 000d 921f 000d     ................
   ddb0c:	9229 000d 9235 000d 9241 000d 924d 000d     )...5...A...M...
   ddb1c:	9255 000d 925f 000d 9269 000d 616e 006e     U..._...i...nan.
   ddb2c:	766f 0066 002e 6e69 0066                    ovf...inf.

000ddb36 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddb36:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   ddb46:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   ddb56:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..
	...

000ddb68 <_ZTV11USARTSerial>:
	...
   ddb70:	9ea1 000d 9ef1 000d 9eff 000d 945b 000d     ............[...
   ddb80:	9eb5 000d 9ed7 000d 9ec3 000d 9eeb 000d     ................
   ddb90:	9ea3 000d 9ea7 000d                         ........

000ddb98 <_ZTV9USBSerial>:
	...
   ddba0:	9fa9 000d 9ff9 000d a007 000d 945b 000d     ............[...
   ddbb0:	9fe5 000d 9fab 000d 9fc1 000d 9ff3 000d     ................
   ddbc0:	9fd7 000d 9fa5 000d                         ........

000ddbc8 <_ZSt7nothrow>:
	...

000ddbc9 <day_name.4725>:
   ddbc9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddbd9:	6972 6153 4a74                                   riSat

000ddbde <mon_name.4726>:
   ddbde:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddbee:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddbfe:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   ddc0e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   ddc1e:	6425 000a                                   %d..

000ddc22 <_ctype_>:
   ddc22:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddc32:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddc42:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ddc52:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ddc62:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ddc72:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddc82:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddc92:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddca2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddd24 <__sf_fake_stdin>:
	...

000ddd44 <__sf_fake_stdout>:
	...

000ddd64 <__sf_fake_stderr>:
	...

000ddd84 <_DAYS_BEFORE_MONTH>:
   ddd84:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddd94:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddda4:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000dddb4 <DAYS_IN_MONTH>:
   dddb4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dddc4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dddd4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddde4 <__month_lengths>:
   ddde4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dddf4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dde04:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dde14:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dde24:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dde34:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dde44:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dde54:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dde64:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dde74:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dde84:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dde94:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   ddea4:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   ddeb4:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   ddec4:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dded4:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   ddee4:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   ddef4:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   ddf04:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   ddf14:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   ddf24:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   ddf34:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   ddf44:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   ddf54:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   ddf64:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   ddf74:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   ddf84:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   ddf94:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   ddfa4:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   ddfb4:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   ddfc4:	3a4d 5325 2520 0070                         M:%S %p.

000ddfcc <_C_time_locale>:
   ddfcc:	dea7 000d deab 000d deaf 000d deb3 000d     ................
   ddfdc:	deb7 000d debb 000d debf 000d dec3 000d     ................
   ddfec:	dec7 000d decb 000d decf 000d ded3 000d     ................
   ddffc:	ded7 000d dedf 000d dee8 000d deee 000d     ................
   de00c:	deb7 000d def4 000d def9 000d defe 000d     ................
   de01c:	df05 000d df0f 000d df17 000d df20 000d     ............ ...
   de02c:	df29 000d df2d 000d df31 000d df35 000d     )...-...1...5...
   de03c:	df39 000d df3d 000d df41 000d df45 000d     9...=...A...E...
   de04c:	df4c 000d df53 000d df5b 000d df65 000d     L...S...[...e...
   de05c:	df6e 000d df75 000d df7e 000d df87 000d     n...u...~.......
   de06c:	df90 000d d046 000d dfa5 000d dfa8 000d     ....F...........
   de07c:	ded7 000d dedf 000d dee8 000d deee 000d     ................
   de08c:	deb7 000d def4 000d def9 000d defe 000d     ................
   de09c:	df05 000d df0f 000d df17 000d df20 000d     ............ ...
   de0ac:	da0c 000d dfc0 000d d50e 000d d50e 000d     ................
   de0bc:	d50e 000d d50e 000d d50e 000d 5a54 4700     ............TZ.G
   de0cc:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   de0dc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   de0ec:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   de0fc:	3a6e 6825 2575 006e                         n:%hu%n.

000de104 <link_const_variable_data_end>:
   de104:	000d576d 	.word	0x000d576d
   de108:	000d5c95 	.word	0x000d5c95
   de10c:	000d5d3d 	.word	0x000d5d3d
   de110:	000d63fd 	.word	0x000d63fd
   de114:	000d6421 	.word	0x000d6421
   de118:	000d6441 	.word	0x000d6441
   de11c:	000d6671 	.word	0x000d6671
   de120:	000d6793 	.word	0x000d6793
   de124:	000d6a21 	.word	0x000d6a21
   de128:	000d72fd 	.word	0x000d72fd
   de12c:	000d7315 	.word	0x000d7315
   de130:	000d770d 	.word	0x000d770d
   de134:	000d7cb5 	.word	0x000d7cb5
   de138:	000d7ccd 	.word	0x000d7ccd
   de13c:	000d8521 	.word	0x000d8521
   de140:	000d8625 	.word	0x000d8625
   de144:	000d8dfd 	.word	0x000d8dfd
   de148:	000d9075 	.word	0x000d9075
   de14c:	000d91b1 	.word	0x000d91b1
   de150:	000d9335 	.word	0x000d9335
   de154:	000d9735 	.word	0x000d9735
   de158:	000d9acd 	.word	0x000d9acd
   de15c:	000d9e8d 	.word	0x000d9e8d
   de160:	000da425 	.word	0x000da425
   de164:	000da4e9 	.word	0x000da4e9
   de168:	000da56d 	.word	0x000da56d
   de16c:	000da5f1 	.word	0x000da5f1
