
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/1.5.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009f80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000ddfa0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000164  2003dd40  000de7bc  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000094c  2003dea8  2003dea8  0002dea8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000de920  000de920  0001e920  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de94c  000de94c  0001e94c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00192484  00000000  00000000  0001e950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e194  00000000  00000000  001b0dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032f69  00000000  00000000  001cef68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003bf8  00000000  00000000  00201ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007160  00000000  00000000  00205ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047996  00000000  00000000  0020cc29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d439  00000000  00000000  002545bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123fbe  00000000  00000000  002a19f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00011768  00000000  00000000  003c59b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f94d 	bl	db2d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f96d 	bl	db31c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd40 	.word	0x2003dd40
   d404c:	000de7bc 	.word	0x000de7bc
   d4050:	2003dea4 	.word	0x2003dea4
   d4054:	2003dea8 	.word	0x2003dea8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 ffdf 	bl	da020 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000ddf98 	.word	0x000ddf98
   d4084:	000ddf2c 	.word	0x000ddf2c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b9a6 	b.w	d53d8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ffa5 	bl	d4fdc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bf85 	b.w	d9fa4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b991 	b.w	d83c0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b997 	b.w	d83d0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b995 	b.w	d83d0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f004 f84e 	bl	d8150 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7dd1 	.word	0x000d7dd1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40cc:	4b01      	ldr	r3, [pc, #4]	; (d40d4 <_Z11watchdogISRv+0x8>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	701a      	strb	r2, [r3, #0]
   d40d2:	4770      	bx	lr
   d40d4:	2003df38 	.word	0x2003df38

000d40d8 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d8:	b538      	push	{r3, r4, r5, lr}
   d40da:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40dc:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40de:	b128      	cbz	r0, d40ec <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40e0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40e2:	210c      	movs	r1, #12
   d40e4:	f006 f899 	bl	da21a <_ZdlPvj>
            wakeupSource = next;
   d40e8:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40ea:	e7f8      	b.n	d40de <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40ec:	4620      	mov	r0, r4
   d40ee:	bd38      	pop	{r3, r4, r5, pc}

000d40f0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40f0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f2:	6803      	ldr	r3, [r0, #0]
   d40f4:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40f6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f8:	d904      	bls.n	d4104 <nrf_gpio_pin_port_decode+0x14>
   d40fa:	4a07      	ldr	r2, [pc, #28]	; (d4118 <nrf_gpio_pin_port_decode+0x28>)
   d40fc:	2100      	movs	r1, #0
   d40fe:	200a      	movs	r0, #10
   d4100:	f004 f826 	bl	d8150 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4104:	6823      	ldr	r3, [r4, #0]
   d4106:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4108:	bf83      	ittte	hi
   d410a:	f003 031f 	andhi.w	r3, r3, #31
   d410e:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4110:	4802      	ldrhi	r0, [pc, #8]	; (d411c <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4112:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4116:	bd10      	pop	{r4, pc}
   d4118:	000d7dd1 	.word	0x000d7dd1
   d411c:	50000300 	.word	0x50000300

000d4120 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z9resetFRAM6String+0x14>)
   d4124:	f005 fb95 	bl	d9852 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4128:	b118      	cbz	r0, d4132 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d412a:	4803      	ldr	r0, [pc, #12]	; (d4138 <_Z9resetFRAM6String+0x18>)
   d412c:	f001 fcfa 	bl	d5b24 <_ZN6MB85RC5eraseEv>
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dcf2e 	.word	0x000dcf2e
   d4138:	2003deb8 	.word	0x2003deb8

000d413c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d413c:	b508      	push	{r3, lr}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z7sendNow6String+0x14>)
   d4140:	f005 fb87 	bl	d9852 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4146:	4b03      	ldr	r3, [pc, #12]	; (d4154 <_Z7sendNow6String+0x18>)
   d4148:	2203      	movs	r2, #3
   d414a:	701a      	strb	r2, [r3, #0]
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dcf2e 	.word	0x000dcf2e
   d4154:	2003defe 	.word	0x2003defe

000d4158 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4158:	b510      	push	{r4, lr}
   d415a:	4b03      	ldr	r3, [pc, #12]	; (d4168 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d415c:	6003      	str	r3, [r0, #0]
   d415e:	4604      	mov	r4, r0
   d4160:	f002 fd36 	bl	d6bd0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}
   d4168:	000dcab0 	.word	0x000dcab0

000d416c <_ZN17PublishQueueAsyncD0Ev>:
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f7ff fff2 	bl	d4158 <_ZN17PublishQueueAsyncD1Ev>
   d4174:	4620      	mov	r0, r4
   d4176:	2138      	movs	r1, #56	; 0x38
   d4178:	f006 f84f 	bl	da21a <_ZdlPvj>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4180:	b510      	push	{r4, lr}
   d4182:	4b03      	ldr	r3, [pc, #12]	; (d4190 <_ZN8MB85RC64D1Ev+0x10>)
   d4184:	6003      	str	r3, [r0, #0]
   d4186:	4604      	mov	r4, r0
   d4188:	f001 fcac 	bl	d5ae4 <_ZN6MB85RCD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}
   d4190:	000dca94 	.word	0x000dca94

000d4194 <_ZN8MB85RC64D0Ev>:
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
   d4198:	f7ff fff2 	bl	d4180 <_ZN8MB85RC64D1Ev>
   d419c:	4620      	mov	r0, r4
   d419e:	2110      	movs	r1, #16
   d41a0:	f006 f83b 	bl	da21a <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f004 f90e 	bl	d83d0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ba:	f004 f871 	bl	d82a0 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41be:	b120      	cbz	r0, d41ca <_ZN10CloudClass8syncTimeEv.isra.11+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
    }
   d41c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d41c6:	f004 b88b 	b.w	d82e0 <spark_sync_time>
    }
   d41ca:	bd08      	pop	{r3, pc}

000d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ce:	2000      	movs	r0, #0
   d41d0:	f004 f88e 	bl	d82f0 <spark_sync_time_pending>
   d41d4:	b128      	cbz	r0, d41e2 <_ZN10CloudClass12syncTimeDoneEv.isra.13+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d6:	f004 f863 	bl	d82a0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41da:	f080 0001 	eor.w	r0, r0, #1
   d41de:	b2c0      	uxtb	r0, r0
   d41e0:	bd08      	pop	{r3, pc}
   d41e2:	2001      	movs	r0, #1
    }
   d41e4:	bd08      	pop	{r3, pc}

000d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41e6:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41e8:	2100      	movs	r1, #0
   d41ea:	4604      	mov	r4, r0
   d41ec:	4608      	mov	r0, r1
   d41ee:	f003 fd8f 	bl	d7d10 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f2:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41f6:	2100      	movs	r1, #0
   d41f8:	2001      	movs	r0, #1
   d41fa:	f003 fd89 	bl	d7d10 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41fe:	b2e0      	uxtb	r0, r4
   d4200:	bd10      	pop	{r4, pc}

000d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>:
	/**
	 * @brief Returns the latitude in degrees as a float. May be positive or negative.
	 *
	 * Negative values are used for south latitude.
	 */
	float readLatDeg(void) const {
   d4202:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4204:	2100      	movs	r1, #0
   d4206:	b08f      	sub	sp, #60	; 0x3c
   d4208:	4604      	mov	r4, r0
   d420a:	4608      	mov	r0, r1
   d420c:	f003 fd80 	bl	d7d10 <os_thread_scheduling>
	/**
	 * @brief Get the location (latitude and longitude)
	 */
	TinyGPSLocation getLocation() const {
	    SINGLE_THREADED_BLOCK() {
	    	return location;
   d4210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4212:	466d      	mov	r5, sp
   d4214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4222:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4226:	2100      	movs	r1, #0
   d4228:	2001      	movs	r0, #1
   d422a:	f003 fd71 	bl	d7d10 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d422e:	4668      	mov	r0, sp
   d4230:	f003 fa16 	bl	d7660 <_ZN15TinyGPSLocation3latEv>
   d4234:	ec51 0b10 	vmov	r0, r1, d0
   d4238:	f006 fe06 	bl	dae48 <__aeabi_d2f>
	}
   d423c:	ee00 0a10 	vmov	s0, r0
   d4240:	b00f      	add	sp, #60	; 0x3c
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>:
	/**
	 * @brief Returns the longitude in degrees as a float. May be positive or negative.
 	 *
	 * Negative values are used for east longitude.
	 */
	float readLonDeg(void) const {
   d4244:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4246:	2100      	movs	r1, #0
   d4248:	b08f      	sub	sp, #60	; 0x3c
   d424a:	4604      	mov	r4, r0
   d424c:	4608      	mov	r0, r1
   d424e:	f003 fd5f 	bl	d7d10 <os_thread_scheduling>
   d4252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4254:	466d      	mov	r5, sp
   d4256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4264:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4268:	2100      	movs	r1, #0
   d426a:	2001      	movs	r0, #1
   d426c:	f003 fd50 	bl	d7d10 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4270:	4668      	mov	r0, sp
   d4272:	f003 fa1d 	bl	d76b0 <_ZN15TinyGPSLocation3lngEv>
   d4276:	ec51 0b10 	vmov	r0, r1, d0
   d427a:	f006 fde5 	bl	dae48 <__aeabi_d2f>
	}
   d427e:	ee00 0a10 	vmov	s0, r0
   d4282:	b00f      	add	sp, #60	; 0x3c
   d4284:	bd30      	pop	{r4, r5, pc}

000d4286 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4286:	2000      	movs	r0, #0
   d4288:	f003 bdda 	b.w	d7e40 <hal_timer_millis>

000d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d428c:	b508      	push	{r3, lr}
   d428e:	ed2d 8b02 	vpush	{d8}
   d4292:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4296:	b128      	cbz	r0, d42a4 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4298:	3801      	subs	r0, #1
   d429a:	f7ff fff7 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d429e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d42a2:	e001      	b.n	d42a8 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d42a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d42a8:	ecbd 8b02 	vpop	{d8}
   d42ac:	bd08      	pop	{r3, pc}

000d42ae <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42ae:	b40e      	push	{r1, r2, r3}
   d42b0:	b500      	push	{lr}
   d42b2:	b08c      	sub	sp, #48	; 0x30
   d42b4:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42b6:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42b8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d42bc:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42be:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42c2:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c4:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42c6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c8:	aa04      	add	r2, sp, #16
   d42ca:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42cc:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42ce:	f003 ff47 	bl	d8160 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d42d2:	b00c      	add	sp, #48	; 0x30
   d42d4:	f85d eb04 	ldr.w	lr, [sp], #4
   d42d8:	b003      	add	sp, #12
   d42da:	4770      	bx	lr

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d42fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42fc:	b092      	sub	sp, #72	; 0x48
   d42fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4300:	b923      	cbnz	r3, d430c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4302:	4919      	ldr	r1, [pc, #100]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4304:	a802      	add	r0, sp, #8
   d4306:	f007 fa91 	bl	db82c <strcpy>
   d430a:	e017      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d430c:	4608      	mov	r0, r1
   d430e:	f006 fe27 	bl	daf60 <atoi>
   d4312:	28c8      	cmp	r0, #200	; 0xc8
   d4314:	d004      	beq.n	d4320 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4316:	4620      	mov	r0, r4
   d4318:	f006 fe22 	bl	daf60 <atoi>
   d431c:	28c9      	cmp	r0, #201	; 0xc9
   d431e:	d119      	bne.n	d4354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4320:	4912      	ldr	r1, [pc, #72]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f007 fa82 	bl	db82c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4328:	f005 fccd 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d432c:	4b10      	ldr	r3, [pc, #64]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432e:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4330:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4332:	2201      	movs	r2, #1
   d4334:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4338:	2200      	movs	r2, #0
   d433a:	701a      	strb	r2, [r3, #0]
   d433c:	4b0f      	ldr	r3, [pc, #60]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d433e:	4910      	ldr	r1, [pc, #64]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	4810      	ldr	r0, [pc, #64]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4344:	2200      	movs	r2, #0
   d4346:	f88d 2000 	strb.w	r2, [sp]
   d434a:	aa02      	add	r2, sp, #8
   d434c:	f7ff ffc6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4350:	b012      	add	sp, #72	; 0x48
   d4352:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4354:	4620      	mov	r0, r4
   d4356:	f006 fe03 	bl	daf60 <atoi>
   d435a:	4a0b      	ldr	r2, [pc, #44]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	4603      	mov	r3, r0
   d435e:	2140      	movs	r1, #64	; 0x40
   d4360:	a802      	add	r0, sp, #8
   d4362:	f004 f855 	bl	d8410 <snprintf>
   d4366:	e7e9      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4368:	000dcb14 	.word	0x000dcb14
   d436c:	000dcb29 	.word	0x000dcb29
   d4370:	2003e04c 	.word	0x2003e04c
   d4374:	2003defd 	.word	0x2003defd
   d4378:	2003dff0 	.word	0x2003dff0
   d437c:	2003dee4 	.word	0x2003dee4
   d4380:	000dcb1c 	.word	0x000dcb1c
   d4384:	2003e010 	.word	0x2003e010
   d4388:	000dcb3b 	.word	0x000dcb3b

000d438c <_Z12hardResetNow6String>:
  else return 0;
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d438c:	b513      	push	{r0, r1, r4, lr}
   d438e:	490b      	ldr	r1, [pc, #44]	; (d43bc <_Z12hardResetNow6String+0x30>)
   d4390:	f005 fa5f 	bl	d9852 <_ZNK6String6equalsEPKc>
   d4394:	2400      	movs	r4, #0
  if (command == "1")
   d4396:	b178      	cbz	r0, d43b8 <_Z12hardResetNow6String+0x2c>
   d4398:	4b09      	ldr	r3, [pc, #36]	; (d43c0 <_Z12hardResetNow6String+0x34>)
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d439a:	4a0a      	ldr	r2, [pc, #40]	; (d43c4 <_Z12hardResetNow6String+0x38>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d439c:	781b      	ldrb	r3, [r3, #0]
   d439e:	490a      	ldr	r1, [pc, #40]	; (d43c8 <_Z12hardResetNow6String+0x3c>)
   d43a0:	f88d 4000 	strb.w	r4, [sp]
   d43a4:	4809      	ldr	r0, [pc, #36]	; (d43cc <_Z12hardResetNow6String+0x40>)
   d43a6:	f7ff ff99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    rtc.setAlarm(10);
   d43aa:	4623      	mov	r3, r4
   d43ac:	2201      	movs	r2, #1
   d43ae:	210a      	movs	r1, #10
   d43b0:	4807      	ldr	r0, [pc, #28]	; (d43d0 <_Z12hardResetNow6String+0x44>)
   d43b2:	f002 f8d0 	bl	d6556 <_ZN8MCP794108setAlarmEibi>
   d43b6:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d43b8:	b002      	add	sp, #8
   d43ba:	bd10      	pop	{r4, pc}
   d43bc:	000dcf2e 	.word	0x000dcf2e
   d43c0:	2003dee4 	.word	0x2003dee4
   d43c4:	000dcb58 	.word	0x000dcb58
   d43c8:	000dcda2 	.word	0x000dcda2
   d43cc:	2003e010 	.word	0x2003e010
   d43d0:	2003dec8 	.word	0x2003dec8

000d43d4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d6:	491a      	ldr	r1, [pc, #104]	; (d4440 <_Z14setverboseMode6String+0x6c>)
   d43d8:	4604      	mov	r4, r0
   d43da:	f005 fa3a 	bl	d9852 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43de:	4605      	mov	r5, r0
   d43e0:	b1a0      	cbz	r0, d440c <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
   d43e2:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d43e4:	2401      	movs	r4, #1
   d43e6:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d43e8:	4b17      	ldr	r3, [pc, #92]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d43ea:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ec:	f003 ff58 	bl	d82a0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f0:	b908      	cbnz	r0, d43f6 <_Z14setverboseMode6String+0x22>
    return 1;
   d43f2:	2001      	movs	r0, #1
   d43f4:	e022      	b.n	d443c <_Z14setverboseMode6String+0x68>
   d43f6:	4b15      	ldr	r3, [pc, #84]	; (d444c <_Z14setverboseMode6String+0x78>)
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f8:	4915      	ldr	r1, [pc, #84]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d43fa:	781b      	ldrb	r3, [r3, #0]
   d43fc:	4815      	ldr	r0, [pc, #84]	; (d4454 <_Z14setverboseMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d43fe:	2200      	movs	r2, #0
   d4400:	f88d 2000 	strb.w	r2, [sp]
   d4404:	4a14      	ldr	r2, [pc, #80]	; (d4458 <_Z14setverboseMode6String+0x84>)
   d4406:	f7ff ff69 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d440a:	e7f2      	b.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d440c:	4913      	ldr	r1, [pc, #76]	; (d445c <_Z14setverboseMode6String+0x88>)
   d440e:	4620      	mov	r0, r4
   d4410:	f005 fa1f 	bl	d9852 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4414:	b190      	cbz	r0, d443c <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
   d4416:	4b0b      	ldr	r3, [pc, #44]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d4418:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d441a:	4b0b      	ldr	r3, [pc, #44]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d441c:	2401      	movs	r4, #1
   d441e:	701c      	strb	r4, [r3, #0]
   d4420:	f003 ff3e 	bl	d82a0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	2800      	cmp	r0, #0
   d4426:	d0e4      	beq.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d4428:	4b08      	ldr	r3, [pc, #32]	; (d444c <_Z14setverboseMode6String+0x78>)
   d442a:	4a0d      	ldr	r2, [pc, #52]	; (d4460 <_Z14setverboseMode6String+0x8c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d442c:	781b      	ldrb	r3, [r3, #0]
   d442e:	4908      	ldr	r1, [pc, #32]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d4430:	f88d 5000 	strb.w	r5, [sp]
   d4434:	4807      	ldr	r0, [pc, #28]	; (d4454 <_Z14setverboseMode6String+0x80>)
   d4436:	f7ff ff51 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d443a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d443c:	b003      	add	sp, #12
   d443e:	bd30      	pop	{r4, r5, pc}
   d4440:	000dcf2e 	.word	0x000dcf2e
   d4444:	2003e04c 	.word	0x2003e04c
   d4448:	2003defd 	.word	0x2003defd
   d444c:	2003dee4 	.word	0x2003dee4
   d4450:	000dcb93 	.word	0x000dcb93
   d4454:	2003e010 	.word	0x2003e010
   d4458:	000dcb70 	.word	0x000dcb70
   d445c:	000dcb81 	.word	0x000dcb81
   d4460:	000dcb83 	.word	0x000dcb83
   d4464:	00000000 	.word	0x00000000

000d4468 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d446c:	b0cb      	sub	sp, #300	; 0x12c
   d446e:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4470:	f7ff fea2 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4474:	f7ff ff07 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4478:	2700      	movs	r7, #0
   d447a:	4606      	mov	r6, r0
   d447c:	f247 582f 	movw	r8, #29999	; 0x752f
   d4480:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4484:	f7ff feff 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4488:	1b80      	subs	r0, r0, r6
   d448a:	eb61 0107 	sbc.w	r1, r1, r7
   d448e:	4589      	cmp	r9, r1
   d4490:	bf08      	it	eq
   d4492:	4580      	cmpeq	r8, r0
   d4494:	d305      	bcc.n	d44a2 <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4496:	f7ff fe99 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d449a:	b910      	cbnz	r0, d44a2 <_Z11setTimeZone6String+0x3a>
            spark_process();
   d449c:	f003 fee8 	bl	d8270 <spark_process>
   d44a0:	e7f0      	b.n	d4484 <_Z11setTimeZone6String+0x1c>
   d44a2:	f7ff fe93 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44a6:	220a      	movs	r2, #10
   d44a8:	a905      	add	r1, sp, #20
   d44aa:	6820      	ldr	r0, [r4, #0]
   d44ac:	f007 ffac 	bl	dc408 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44b0:	f100 030c 	add.w	r3, r0, #12
   d44b4:	b2db      	uxtb	r3, r3
   d44b6:	2b18      	cmp	r3, #24
   d44b8:	d849      	bhi.n	d454e <_Z11setTimeZone6String+0xe6>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44ba:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44bc:	ee07 5a90 	vmov	s15, r5
   d44c0:	4b27      	ldr	r3, [pc, #156]	; (d4560 <_Z11setTimeZone6String+0xf8>)
   d44c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44c6:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44c8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44cc:	f005 fad4 	bl	d9a78 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44d0:	4b24      	ldr	r3, [pc, #144]	; (d4564 <_Z11setTimeZone6String+0xfc>)
   d44d2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44d4:	f005 fac2 	bl	d9a5c <_ZN9TimeClass5localEv>
   d44d8:	4606      	mov	r6, r0
   d44da:	f005 fbf4 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d44de:	1a30      	subs	r0, r6, r0
   d44e0:	f006 f954 	bl	da78c <__aeabi_i2d>
   d44e4:	a31c      	add	r3, pc, #112	; (adr r3, d4558 <_Z11setTimeZone6String+0xf0>)
   d44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ea:	f006 fadf 	bl	daaac <__aeabi_ddiv>
   d44ee:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <_Z11setTimeZone6String+0x100>)
   d44f0:	e9cd 0100 	strd	r0, r1, [sp]
   d44f4:	210a      	movs	r1, #10
   d44f6:	481d      	ldr	r0, [pc, #116]	; (d456c <_Z11setTimeZone6String+0x104>)
   d44f8:	f003 ff8a 	bl	d8410 <snprintf>
   d44fc:	f003 fed0 	bl	d82a0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4500:	b318      	cbz	r0, d454a <_Z11setTimeZone6String+0xe2>
   d4502:	4e1b      	ldr	r6, [pc, #108]	; (d4570 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4504:	4a1b      	ldr	r2, [pc, #108]	; (d4574 <_Z11setTimeZone6String+0x10c>)
   d4506:	462b      	mov	r3, r5
   d4508:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d450c:	2500      	movs	r5, #0
   d450e:	a80a      	add	r0, sp, #40	; 0x28
   d4510:	f003 ff7e 	bl	d8410 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4514:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d4518:	f88d 5000 	strb.w	r5, [sp]
   d451c:	aa0a      	add	r2, sp, #40	; 0x28
   d451e:	4817      	ldr	r0, [pc, #92]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4520:	f7ff fedc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4524:	f005 fbcf 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d4528:	4601      	mov	r1, r0
   d452a:	a806      	add	r0, sp, #24
   d452c:	f005 faf4 	bl	d9b18 <_ZN9TimeClass7timeStrEl>
   d4530:	9b06      	ldr	r3, [sp, #24]
   d4532:	9303      	str	r3, [sp, #12]
   d4534:	9a03      	ldr	r2, [sp, #12]
   d4536:	7833      	ldrb	r3, [r6, #0]
   d4538:	490f      	ldr	r1, [pc, #60]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d453a:	f88d 5000 	strb.w	r5, [sp]
   d453e:	480f      	ldr	r0, [pc, #60]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4540:	f7ff fecc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4544:	a806      	add	r0, sp, #24
   d4546:	f005 f910 	bl	d976a <_ZN6StringD1Ev>
  }

  return 1;
   d454a:	4620      	mov	r0, r4
   d454c:	e000      	b.n	d4550 <_Z11setTimeZone6String+0xe8>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d454e:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
   d4550:	b04b      	add	sp, #300	; 0x12c
   d4552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4556:	bf00      	nop
   d4558:	00000000 	.word	0x00000000
   d455c:	40ac2000 	.word	0x40ac2000
   d4560:	2003e04c 	.word	0x2003e04c
   d4564:	2003defd 	.word	0x2003defd
   d4568:	000dcb98 	.word	0x000dcb98
   d456c:	2003deac 	.word	0x2003deac
   d4570:	2003dee4 	.word	0x2003dee4
   d4574:	000dcba2 	.word	0x000dcba2
   d4578:	000dcbb6 	.word	0x000dcbb6
   d457c:	2003e010 	.word	0x2003e010

000d4580 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4580:	b530      	push	{r4, r5, lr}
   d4582:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4584:	220a      	movs	r2, #10
   d4586:	a903      	add	r1, sp, #12
   d4588:	6800      	ldr	r0, [r0, #0]
   d458a:	f007 ff3d 	bl	dc408 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d458e:	b2c3      	uxtb	r3, r0
   d4590:	1e5a      	subs	r2, r3, #1
   d4592:	2a3b      	cmp	r2, #59	; 0x3b
   d4594:	d81e      	bhi.n	d45d4 <_Z17setSampleInterval6String+0x54>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d4596:	4a12      	ldr	r2, [pc, #72]	; (d45e0 <_Z17setSampleInterval6String+0x60>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d4598:	4d12      	ldr	r5, [pc, #72]	; (d45e4 <_Z17setSampleInterval6String+0x64>)
  systemStatusWriteNeeded = true;
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d459a:	4813      	ldr	r0, [pc, #76]	; (d45e8 <_Z17setSampleInterval6String+0x68>)
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d459c:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d459e:	2401      	movs	r4, #1
   d45a0:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45a2:	210c      	movs	r1, #12
   d45a4:	4a11      	ldr	r2, [pc, #68]	; (d45ec <_Z17setSampleInterval6String+0x6c>)
   d45a6:	f003 ff33 	bl	d8410 <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45aa:	79ab      	ldrb	r3, [r5, #6]
   d45ac:	4a10      	ldr	r2, [pc, #64]	; (d45f0 <_Z17setSampleInterval6String+0x70>)
   d45ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45b2:	a804      	add	r0, sp, #16
   d45b4:	f003 ff2c 	bl	d8410 <snprintf>
   d45b8:	f003 fe72 	bl	d82a0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45bc:	b160      	cbz	r0, d45d8 <_Z17setSampleInterval6String+0x58>
   d45be:	4b0d      	ldr	r3, [pc, #52]	; (d45f4 <_Z17setSampleInterval6String+0x74>)
    publishQueue.publish("Interval", data, PRIVATE);
   d45c0:	490d      	ldr	r1, [pc, #52]	; (d45f8 <_Z17setSampleInterval6String+0x78>)
   d45c2:	781b      	ldrb	r3, [r3, #0]
   d45c4:	480d      	ldr	r0, [pc, #52]	; (d45fc <_Z17setSampleInterval6String+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d45c6:	2200      	movs	r2, #0
   d45c8:	f88d 2000 	strb.w	r2, [sp]
   d45cc:	aa04      	add	r2, sp, #16
   d45ce:	f7ff fe85 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45d2:	e001      	b.n	d45d8 <_Z17setSampleInterval6String+0x58>

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45d4:	2000      	movs	r0, #0
   d45d6:	e000      	b.n	d45da <_Z17setSampleInterval6String+0x5a>
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
  if (Particle.connected()) {
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
   d45d8:	4620      	mov	r0, r4
}
   d45da:	b045      	add	sp, #276	; 0x114
   d45dc:	bd30      	pop	{r4, r5, pc}
   d45de:	bf00      	nop
   d45e0:	2003defd 	.word	0x2003defd
   d45e4:	2003e04c 	.word	0x2003e04c
   d45e8:	2003ddd9 	.word	0x2003ddd9
   d45ec:	000dcbd2 	.word	0x000dcbd2
   d45f0:	000dcbbb 	.word	0x000dcbbb
   d45f4:	2003dee4 	.word	0x2003dee4
   d45f8:	000dce0c 	.word	0x000dce0c
   d45fc:	2003e010 	.word	0x2003e010

000d4600 <_Z9sendEventv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d4600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4604:	4b23      	ldr	r3, [pc, #140]	; (d4694 <_Z9sendEventv+0x94>)
   d4606:	4c24      	ldr	r4, [pc, #144]	; (d4698 <_Z9sendEventv+0x98>)
   d4608:	689d      	ldr	r5, [r3, #8]
   d460a:	69a2      	ldr	r2, [r4, #24]
   d460c:	691b      	ldr	r3, [r3, #16]
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d460e:	b0d3      	sub	sp, #332	; 0x14c
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4610:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4614:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d4618:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d461c:	9311      	str	r3, [sp, #68]	; 0x44
   d461e:	9210      	str	r2, [sp, #64]	; 0x40
   d4620:	f005 fb51 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d4624:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d4628:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d462c:	ed94 7b08 	vldr	d7, [r4, #32]
   d4630:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d4632:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4634:	9308      	str	r3, [sp, #32]
   d4636:	4b19      	ldr	r3, [pc, #100]	; (d469c <_Z9sendEventv+0x9c>)
   d4638:	900a      	str	r0, [sp, #40]	; 0x28
   d463a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d463e:	9209      	str	r2, [sp, #36]	; 0x24
   d4640:	9307      	str	r3, [sp, #28]
   d4642:	9506      	str	r5, [sp, #24]
   d4644:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d4648:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d464c:	e9cd 6700 	strd	r6, r7, [sp]
   d4650:	4a13      	ldr	r2, [pc, #76]	; (d46a0 <_Z9sendEventv+0xa0>)
   d4652:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4656:	a812      	add	r0, sp, #72	; 0x48
   d4658:	f003 feda 	bl	d8410 <snprintf>
   d465c:	4b11      	ldr	r3, [pc, #68]	; (d46a4 <_Z9sendEventv+0xa4>)
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d465e:	4912      	ldr	r1, [pc, #72]	; (d46a8 <_Z9sendEventv+0xa8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4660:	781b      	ldrb	r3, [r3, #0]
   d4662:	4812      	ldr	r0, [pc, #72]	; (d46ac <_Z9sendEventv+0xac>)
   d4664:	2200      	movs	r2, #0
   d4666:	f88d 2000 	strb.w	r2, [sp]
   d466a:	aa12      	add	r2, sp, #72	; 0x48
   d466c:	f7ff fe36 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4670:	4b0f      	ldr	r3, [pc, #60]	; (d46b0 <_Z9sendEventv+0xb0>)
   d4672:	2201      	movs	r2, #1
   d4674:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4676:	f003 fbb3 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d467a:	4b0e      	ldr	r3, [pc, #56]	; (d46b4 <_Z9sendEventv+0xb4>)
   d467c:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d467e:	f005 fb29 	bl	d9cd4 <_ZN9TimeClass4hourEv>
   d4682:	4b0d      	ldr	r3, [pc, #52]	; (d46b8 <_Z9sendEventv+0xb8>)
   d4684:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d4686:	f005 fb2f 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d468a:	4b0c      	ldr	r3, [pc, #48]	; (d46bc <_Z9sendEventv+0xbc>)
   d468c:	6018      	str	r0, [r3, #0]
}
   d468e:	b053      	add	sp, #332	; 0x14c
   d4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4694:	2003e04c 	.word	0x2003e04c
   d4698:	2003dfc0 	.word	0x2003dfc0
   d469c:	2003dee6 	.word	0x2003dee6
   d46a0:	000dcbdd 	.word	0x000dcbdd
   d46a4:	2003dee4 	.word	0x2003dee4
   d46a8:	000dcc6d 	.word	0x000dcc6d
   d46ac:	2003e010 	.word	0x2003e010
   d46b0:	2003dff0 	.word	0x2003dff0
   d46b4:	2003def8 	.word	0x2003def8
   d46b8:	2003df04 	.word	0x2003df04
   d46bc:	2003dfb8 	.word	0x2003dfb8

000d46c0 <_Z7getTempPh>:
  getBatteryContext();                                               // What is the battery up to?
  systemStatusWriteNeeded=true;
  currentCountsWriteNeeded=true;
}

double getTemp(uint8_t addr[8]) {
   d46c0:	b538      	push	{r3, r4, r5, lr}
   d46c2:	ed2d 8b02 	vpush	{d8}
   d46c6:	4605      	mov	r5, r0
  double _temp;
  int   i = 0;
   d46c8:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
   d46ca:	481b      	ldr	r0, [pc, #108]	; (d4738 <_Z7getTempPh+0x78>)
   d46cc:	2200      	movs	r2, #0
   d46ce:	4629      	mov	r1, r5
   d46d0:	f001 f926 	bl	d5920 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46d4:	4818      	ldr	r0, [pc, #96]	; (d4738 <_Z7getTempPh+0x78>)
double getTemp(uint8_t addr[8]) {
  double _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
   d46d6:	eeb0 8a40 	vmov.f32	s16, s0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46da:	f001 f9fb 	bl	d5ad4 <_ZN7DS18B208crcCheckEv>
   d46de:	b950      	cbnz	r0, d46f6 <_Z7getTempPh+0x36>
   d46e0:	3401      	adds	r4, #1
   d46e2:	2c04      	cmp	r4, #4
   d46e4:	d1f1      	bne.n	d46ca <_Z7getTempPh+0xa>
    _temp = ds18b20.convertToFahrenheit(_temp);
    Serial.println(_temp);
  }
  else {
    _temp = NAN;
    Serial.println("Invalid reading");
   d46e6:	f005 fc19 	bl	d9f1c <_Z16_fetch_usbserialv>
   d46ea:	4914      	ldr	r1, [pc, #80]	; (d473c <_Z7getTempPh+0x7c>)
   d46ec:	f004 fe47 	bl	d937e <_ZN5Print7printlnEPKc>
   d46f0:	ed9f 8b0f 	vldr	d8, [pc, #60]	; d4730 <_Z7getTempPh+0x70>
  }

  return _temp;
   d46f4:	e015      	b.n	d4722 <_Z7getTempPh+0x62>

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d46f6:	2c03      	cmp	r4, #3
   d46f8:	d0f5      	beq.n	d46e6 <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d46fa:	eeb0 0a48 	vmov.f32	s0, s16
   d46fe:	480e      	ldr	r0, [pc, #56]	; (d4738 <_Z7getTempPh+0x78>)
   d4700:	f001 f9ce 	bl	d5aa0 <_ZN7DS18B2019convertToFahrenheitEf>
   d4704:	ee10 0a10 	vmov	r0, s0
   d4708:	f006 f852 	bl	da7b0 <__aeabi_f2d>
   d470c:	ec41 0b18 	vmov	d8, r0, r1
    Serial.println(_temp);
   d4710:	f005 fc04 	bl	d9f1c <_Z16_fetch_usbserialv>
   d4714:	eeb0 0a48 	vmov.f32	s0, s16
   d4718:	eef0 0a68 	vmov.f32	s1, s17
   d471c:	2102      	movs	r1, #2
   d471e:	f004 ff17 	bl	d9550 <_ZN5Print7printlnEdi>
    _temp = NAN;
    Serial.println("Invalid reading");
  }

  return _temp;
}
   d4722:	eeb0 0a48 	vmov.f32	s0, s16
   d4726:	eef0 0a68 	vmov.f32	s1, s17
   d472a:	ecbd 8b02 	vpop	{d8}
   d472e:	bd38      	pop	{r3, r4, r5, pc}
   d4730:	00000000 	.word	0x00000000
   d4734:	7ff80000 	.word	0x7ff80000
   d4738:	2003dff4 	.word	0x2003dff4
   d473c:	000dcc88 	.word	0x000dcc88

000d4740 <_Z17getSignalStrengthv>:

void getSignalStrength() {
   d4740:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4742:	4d19      	ldr	r5, [pc, #100]	; (d47a8 <_Z17getSignalStrengthv+0x68>)
   d4744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  }

  return _temp;
}

void getSignalStrength() {
   d4746:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4748:	ac04      	add	r4, sp, #16
   d474a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d474c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d474e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4750:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4754:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4758:	4914      	ldr	r1, [pc, #80]	; (d47ac <_Z17getSignalStrengthv+0x6c>)
   d475a:	a80e      	add	r0, sp, #56	; 0x38
   d475c:	f003 ff0a 	bl	d8574 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4760:	a80e      	add	r0, sp, #56	; 0x38
   d4762:	f003 ff5a 	bl	d861a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4766:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4768:	a80e      	add	r0, sp, #56	; 0x38
   d476a:	f003 ffa7 	bl	d86bc <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d476e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4770:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4774:	f003 ff88 	bl	d8688 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4778:	ab18      	add	r3, sp, #96	; 0x60
   d477a:	ee10 0a10 	vmov	r0, s0
   d477e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4782:	f006 f815 	bl	da7b0 <__aeabi_f2d>
   d4786:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d478a:	4628      	mov	r0, r5
   d478c:	f006 f810 	bl	da7b0 <__aeabi_f2d>
   d4790:	e9cd 0100 	strd	r0, r1, [sp]
   d4794:	4a06      	ldr	r2, [pc, #24]	; (d47b0 <_Z17getSignalStrengthv+0x70>)
   d4796:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d479a:	4806      	ldr	r0, [pc, #24]	; (d47b4 <_Z17getSignalStrengthv+0x74>)
   d479c:	2140      	movs	r1, #64	; 0x40
   d479e:	f003 fe37 	bl	d8410 <snprintf>
}
   d47a2:	b019      	add	sp, #100	; 0x64
   d47a4:	bd30      	pop	{r4, r5, pc}
   d47a6:	bf00      	nop
   d47a8:	000dcad0 	.word	0x000dcad0
   d47ac:	2003e260 	.word	0x2003e260
   d47b0:	000dcc98 	.word	0x000dcc98
   d47b4:	2003df6c 	.word	0x2003df6c

000d47b8 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d47b8:	b537      	push	{r0, r1, r2, r4, r5, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47ba:	4d16      	ldr	r5, [pc, #88]	; (d4814 <_Z11petWatchdogv+0x5c>)
   d47bc:	682a      	ldr	r2, [r5, #0]
   d47be:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47c2:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47c6:	a802      	add	r0, sp, #8
   d47c8:	f003 031f 	and.w	r3, r3, #31
   d47cc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47d0:	f840 3d08 	str.w	r3, [r0, #-8]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47d4:	f7ff fc8c 	bl	d40f0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47d8:	9b00      	ldr	r3, [sp, #0]
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47da:	682a      	ldr	r2, [r5, #0]
   d47dc:	2401      	movs	r4, #1
   d47de:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d47e2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d47e6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47ea:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47ee:	a802      	add	r0, sp, #8
   d47f0:	f003 031f 	and.w	r3, r3, #31
   d47f4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47f8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47fc:	f7ff fc78 	bl	d40f0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4800:	9b01      	ldr	r3, [sp, #4]
   d4802:	409c      	lsls	r4, r3
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4804:	4b04      	ldr	r3, [pc, #16]	; (d4818 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4806:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d480a:	2200      	movs	r2, #0
   d480c:	701a      	strb	r2, [r3, #0]
}
   d480e:	b003      	add	sp, #12
   d4810:	bd30      	pop	{r4, r5, pc}
   d4812:	bf00      	nop
   d4814:	2003df68 	.word	0x2003df68
   d4818:	2003df38 	.word	0x2003df38

000d481c <_Z14setPowerConfigv>:


// Power Management function
int setPowerConfig() {
   d481c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d481e:	2420      	movs	r4, #32
   d4820:	b090      	sub	sp, #64	; 0x40
   d4822:	4622      	mov	r2, r4
   d4824:	2100      	movs	r1, #0
   d4826:	4668      	mov	r0, sp
   d4828:	f006 fd78 	bl	db31c <memset>
   d482c:	4622      	mov	r2, r4
   d482e:	2100      	movs	r1, #0
   d4830:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4834:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4838:	f006 fd70 	bl	db31c <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d483c:	2100      	movs	r1, #0
   d483e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4842:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4846:	f003 fcf9 	bl	d823c <system_power_management_set_config>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d484a:	f44f 7361 	mov.w	r3, #900	; 0x384
   d484e:	f8ad 3008 	strh.w	r3, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4852:	f8ad 300a 	strh.w	r3, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4856:	f241 0310 	movw	r3, #4112	; 0x1010
   d485a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d485e:	9b00      	ldr	r3, [sp, #0]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4860:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4868:	2100      	movs	r1, #0
   d486a:	4668      	mov	r0, sp

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d486c:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4870:	9300      	str	r3, [sp, #0]
   d4872:	f003 fce3 	bl	d823c <system_power_management_set_config>
      .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
      .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}
   d4876:	b010      	add	sp, #64	; 0x40
   d4878:	bd10      	pop	{r4, pc}
	...

000d487c <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4880:	481d      	ldr	r0, [pc, #116]	; (d48f8 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4882:	4d1e      	ldr	r5, [pc, #120]	; (d48fc <_Z17connectToParticlev+0x80>)
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	2300      	movs	r3, #0
   d4888:	461a      	mov	r2, r3
   d488a:	4619      	mov	r1, r3
   d488c:	f003 fd68 	bl	d8360 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4890:	f003 fcf6 	bl	d8280 <spark_cloud_flag_connect>
   d4894:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4898:	f240 36e7 	movw	r6, #999	; 0x3e7
   d489c:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d489e:	f7ff fcf2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48a2:	f04f 0900 	mov.w	r9, #0
   d48a6:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48a8:	f7ff fced 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d48ac:	ebb0 0008 	subs.w	r0, r0, r8
   d48b0:	eb61 0109 	sbc.w	r1, r1, r9
   d48b4:	428f      	cmp	r7, r1
   d48b6:	bf08      	it	eq
   d48b8:	4286      	cmpeq	r6, r0
   d48ba:	d305      	bcc.n	d48c8 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48bc:	f003 fcf0 	bl	d82a0 <spark_cloud_flag_connected>
   d48c0:	b910      	cbnz	r0, d48c8 <_Z17connectToParticlev+0x4c>
            spark_process();
   d48c2:	f003 fcd5 	bl	d8270 <spark_process>
   d48c6:	e7ef      	b.n	d48a8 <_Z17connectToParticlev+0x2c>
   d48c8:	f003 fcea 	bl	d82a0 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48cc:	b158      	cbz	r0, d48e6 <_Z17connectToParticlev+0x6a>
   d48ce:	f003 fce7 	bl	d82a0 <spark_cloud_flag_connected>

    Particle.process();
  }
  if (Particle.connected()) {
   d48d2:	b130      	cbz	r0, d48e2 <_Z17connectToParticlev+0x66>
    sysStatus.connectedStatus = true;
   d48d4:	4a0a      	ldr	r2, [pc, #40]	; (d4900 <_Z17connectToParticlev+0x84>)
   d48d6:	2301      	movs	r3, #1
   d48d8:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d48da:	4a0a      	ldr	r2, [pc, #40]	; (d4904 <_Z17connectToParticlev+0x88>)
   d48dc:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d48de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d48e6:	f003 fa7b 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48ea:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48ec:	f003 fcc0 	bl	d8270 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48f0:	3c01      	subs	r4, #1
   d48f2:	d0ec      	beq.n	d48ce <_Z17connectToParticlev+0x52>
   d48f4:	e7d3      	b.n	d489e <_Z17connectToParticlev+0x22>
   d48f6:	bf00      	nop
   d48f8:	2003e260 	.word	0x2003e260
   d48fc:	2003e60c 	.word	0x2003e60c
   d4900:	2003e04c 	.word	0x2003e04c
   d4904:	2003defd 	.word	0x2003defd

000d4908 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4908:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d490a:	f003 fcc9 	bl	d82a0 <spark_cloud_flag_connected>
  return !Particle.connected();
   d490e:	f080 0001 	eor.w	r0, r0, #1
}
   d4912:	b2c0      	uxtb	r0, r0
   d4914:	bd08      	pop	{r3, pc}
	...

000d4918 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d491a:	f003 fcb9 	bl	d8290 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d491e:	f7ff fcb2 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4922:	2500      	movs	r5, #0
   d4924:	4604      	mov	r4, r0
   d4926:	f643 2697 	movw	r6, #14999	; 0x3a97
   d492a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d492c:	f7ff fcab 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4930:	1b00      	subs	r0, r0, r4
   d4932:	eb61 0105 	sbc.w	r1, r1, r5
   d4936:	428f      	cmp	r7, r1
   d4938:	bf08      	it	eq
   d493a:	4286      	cmpeq	r6, r0
   d493c:	d305      	bcc.n	d494a <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d493e:	f7ff ffe3 	bl	d4908 <_Z12notConnectedv>
   d4942:	b910      	cbnz	r0, d494a <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4944:	f003 fc94 	bl	d8270 <spark_process>
   d4948:	e7f0      	b.n	d492c <_Z22disconnectFromParticlev+0x14>
   d494a:	f7ff ffdd 	bl	d4908 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d494e:	4809      	ldr	r0, [pc, #36]	; (d4974 <_Z22disconnectFromParticlev+0x5c>)
   d4950:	2300      	movs	r3, #0
   d4952:	4619      	mov	r1, r3
   d4954:	461a      	mov	r2, r3
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f003 fd0a 	bl	d8370 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d495c:	4b06      	ldr	r3, [pc, #24]	; (d4978 <_Z22disconnectFromParticlev+0x60>)
   d495e:	2200      	movs	r2, #0
   d4960:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4962:	4b06      	ldr	r3, [pc, #24]	; (d497c <_Z22disconnectFromParticlev+0x64>)
   d4964:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d496a:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d496c:	f003 fd78 	bl	d8460 <delay>
  return true;
}
   d4970:	4620      	mov	r0, r4
   d4972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4974:	2003e260 	.word	0x2003e260
   d4978:	2003e04c 	.word	0x2003e04c
   d497c:	2003defd 	.word	0x2003defd

000d4980 <_Z22publishStateTransitionv>:

  return 1;
}

void publishStateTransition(void)
{
   d4980:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4982:	4d13      	ldr	r5, [pc, #76]	; (d49d0 <_Z22publishStateTransitionv+0x50>)
   d4984:	4c13      	ldr	r4, [pc, #76]	; (d49d4 <_Z22publishStateTransitionv+0x54>)
   d4986:	4914      	ldr	r1, [pc, #80]	; (d49d8 <_Z22publishStateTransitionv+0x58>)
   d4988:	782a      	ldrb	r2, [r5, #0]
   d498a:	7820      	ldrb	r0, [r4, #0]

  return 1;
}

void publishStateTransition(void)
{
   d498c:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d498e:	230e      	movs	r3, #14
   d4990:	fb03 1202 	mla	r2, r3, r2, r1
   d4994:	9200      	str	r2, [sp, #0]
   d4996:	fb03 1300 	mla	r3, r3, r0, r1
   d499a:	4a10      	ldr	r2, [pc, #64]	; (d49dc <_Z22publishStateTransitionv+0x5c>)
   d499c:	2128      	movs	r1, #40	; 0x28
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f003 fd36 	bl	d8410 <snprintf>
  oldState = state;
   d49a4:	782b      	ldrb	r3, [r5, #0]
   d49a6:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a8:	f003 fc7a 	bl	d82a0 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49ac:	b148      	cbz	r0, d49c2 <_Z22publishStateTransitionv+0x42>
   d49ae:	4b0c      	ldr	r3, [pc, #48]	; (d49e0 <_Z22publishStateTransitionv+0x60>)
   d49b0:	490c      	ldr	r1, [pc, #48]	; (d49e4 <_Z22publishStateTransitionv+0x64>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	480c      	ldr	r0, [pc, #48]	; (d49e8 <_Z22publishStateTransitionv+0x68>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d49b6:	2200      	movs	r2, #0
   d49b8:	f88d 2000 	strb.w	r2, [sp]
   d49bc:	aa02      	add	r2, sp, #8
   d49be:	f7ff fc8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49c2:	f005 faab 	bl	d9f1c <_Z16_fetch_usbserialv>
   d49c6:	a902      	add	r1, sp, #8
   d49c8:	f004 fcd9 	bl	d937e <_ZN5Print7printlnEPKc>
}
   d49cc:	b00d      	add	sp, #52	; 0x34
   d49ce:	bd30      	pop	{r4, r5, pc}
   d49d0:	2003defe 	.word	0x2003defe
   d49d4:	2003dee5 	.word	0x2003dee5
   d49d8:	2003dd4c 	.word	0x2003dd4c
   d49dc:	000dccb1 	.word	0x000dccb1
   d49e0:	2003dee4 	.word	0x2003dee4
   d49e4:	000dccbf 	.word	0x000dccbf
   d49e8:	2003e010 	.word	0x2003e010

000d49ec <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d49ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d49ee:	f003 fc4f 	bl	d8290 <spark_cloud_flag_disconnect>
   d49f2:	f003 f9f5 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d49f6:	f643 2597 	movw	r5, #14999	; 0x3a97
   d49fa:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49fc:	f003 fc50 	bl	d82a0 <spark_cloud_flag_connected>
   d4a00:	b140      	cbz	r0, d4a14 <_Z14fullModemResetv+0x28>
   d4a02:	f003 f9ed 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   d4a06:	1b00      	subs	r0, r0, r4
   d4a08:	42a8      	cmp	r0, r5
   d4a0a:	d803      	bhi.n	d4a14 <_Z14fullModemResetv+0x28>
		delay(100);
   d4a0c:	2064      	movs	r0, #100	; 0x64
   d4a0e:	f003 fd27 	bl	d8460 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4a12:	e7f3      	b.n	d49fc <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4a14:	2100      	movs	r1, #0
   d4a16:	4b09      	ldr	r3, [pc, #36]	; (d4a3c <_Z14fullModemResetv+0x50>)
   d4a18:	f247 5230 	movw	r2, #30000	; 0x7530
   d4a1c:	4608      	mov	r0, r1
   d4a1e:	f003 f947 	bl	d7cb0 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a26:	f003 fd1b 	bl	d8460 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4a2a:	4b05      	ldr	r3, [pc, #20]	; (d4a40 <_Z14fullModemResetv+0x54>)
   d4a2c:	220a      	movs	r2, #10
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	2101      	movs	r1, #1
   d4a32:	4668      	mov	r0, sp
   d4a34:	f004 ff7e 	bl	d9934 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4a38:	b003      	add	sp, #12
   d4a3a:	bd30      	pop	{r4, r5, pc}
   d4a3c:	000dccd0 	.word	0x000dccd0
   d4a40:	2003df54 	.word	0x2003df54

000d4a44 <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a46:	4b15      	ldr	r3, [pc, #84]	; (d4a9c <_Z12dailyCleanupv+0x58>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a48:	4a15      	ldr	r2, [pc, #84]	; (d4aa0 <_Z12dailyCleanupv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a4a:	781b      	ldrb	r3, [r3, #0]
   d4a4c:	4915      	ldr	r1, [pc, #84]	; (d4aa4 <_Z12dailyCleanupv+0x60>)
   d4a4e:	4816      	ldr	r0, [pc, #88]	; (d4aa8 <_Z12dailyCleanupv+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a50:	2400      	movs	r4, #0
   d4a52:	f88d 4000 	strb.w	r4, [sp]
   d4a56:	f7ff fc41 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a5a:	4b14      	ldr	r3, [pc, #80]	; (d4aac <_Z12dailyCleanupv+0x68>)
   d4a5c:	711c      	strb	r4, [r3, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a5e:	f7ff fbab 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4a62:	f7ff fc10 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a66:	2500      	movs	r5, #0
   d4a68:	4604      	mov	r4, r0
   d4a6a:	f247 562f 	movw	r6, #29999	; 0x752f
   d4a6e:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a70:	f7ff fc09 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a74:	1b00      	subs	r0, r0, r4
   d4a76:	eb61 0105 	sbc.w	r1, r1, r5
   d4a7a:	428f      	cmp	r7, r1
   d4a7c:	bf08      	it	eq
   d4a7e:	4286      	cmpeq	r6, r0
   d4a80:	d305      	bcc.n	d4a8e <_Z12dailyCleanupv+0x4a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a82:	f7ff fba3 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d4a86:	b910      	cbnz	r0, d4a8e <_Z12dailyCleanupv+0x4a>
            spark_process();
   d4a88:	f003 fbf2 	bl	d8270 <spark_process>
   d4a8c:	e7f0      	b.n	d4a70 <_Z12dailyCleanupv+0x2c>
   d4a8e:	f7ff fb9d 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  systemStatusWriteNeeded=true;
   d4a92:	4b07      	ldr	r3, [pc, #28]	; (d4ab0 <_Z12dailyCleanupv+0x6c>)
   d4a94:	2201      	movs	r2, #1
   d4a96:	701a      	strb	r2, [r3, #0]
}
   d4a98:	b003      	add	sp, #12
   d4a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a9c:	2003dee4 	.word	0x2003dee4
   d4aa0:	000dccdd 	.word	0x000dccdd
   d4aa4:	000dcce5 	.word	0x000dcce5
   d4aa8:	2003e010 	.word	0x2003e010
   d4aac:	2003e04c 	.word	0x2003e04c
   d4ab0:	2003defd 	.word	0x2003defd

000d4ab4 <_Z8isDSTusav>:
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
   d4ab4:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4ab6:	f005 f921 	bl	d9cfc <_ZN9TimeClass3dayEv>
   d4aba:	4605      	mov	r5, r0
  int month = Time.month();
   d4abc:	f005 f92f 	bl	d9d1e <_ZN9TimeClass5monthEv>
   d4ac0:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4ac2:	f005 f925 	bl	d9d10 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4ac6:	1f23      	subs	r3, r4, #4
   d4ac8:	2b06      	cmp	r3, #6
   d4aca:	d90e      	bls.n	d4aea <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4acc:	1ee3      	subs	r3, r4, #3
   d4ace:	2b08      	cmp	r3, #8
   d4ad0:	d80d      	bhi.n	d4aee <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4ad2:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4ad4:	1a2d      	subs	r5, r5, r0
   d4ad6:	d501      	bpl.n	d4adc <_Z8isDSTusav+0x28>
   d4ad8:	2c0b      	cmp	r4, #11
   d4ada:	e002      	b.n	d4ae2 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4adc:	2d07      	cmp	r5, #7
   d4ade:	dd06      	ble.n	d4aee <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ae0:	2c03      	cmp	r4, #3
   d4ae2:	bf14      	ite	ne
   d4ae4:	2000      	movne	r0, #0
   d4ae6:	2001      	moveq	r0, #1
   d4ae8:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4aea:	2001      	movs	r0, #1
   d4aec:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4aee:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4af0:	bd38      	pop	{r3, r4, r5, pc}
   d4af2:	0000      	movs	r0, r0
   d4af4:	0000      	movs	r0, r0
	...

000d4af8 <_Z12setDSTOffset6String>:
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4af8:	b570      	push	{r4, r5, r6, lr}
   d4afa:	ed2d 8b02 	vpush	{d8}
   d4afe:	b0ca      	sub	sp, #296	; 0x128
   d4b00:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b02:	f005 f8e0 	bl	d9cc6 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b06:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4b08:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b0a:	a905      	add	r1, sp, #20
   d4b0c:	6820      	ldr	r0, [r4, #0]
   d4b0e:	f007 fc7b 	bl	dc408 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4b12:	b2c3      	uxtb	r3, r0
   d4b14:	2b02      	cmp	r3, #2
   d4b16:	d858      	bhi.n	d4bca <_Z12setDSTOffset6String+0xd2>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b18:	b240      	sxtb	r0, r0
   d4b1a:	ee07 0a90 	vmov	s15, r0
   d4b1e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4b22:	eeb0 0a48 	vmov.f32	s0, s16
   d4b26:	f004 ffc3 	bl	d9ab0 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b2a:	4b2d      	ldr	r3, [pc, #180]	; (d4be0 <_Z12setDSTOffset6String+0xe8>)
   d4b2c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b30:	4b2c      	ldr	r3, [pc, #176]	; (d4be4 <_Z12setDSTOffset6String+0xec>)
   d4b32:	2201      	movs	r2, #1
   d4b34:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b36:	ee18 0a10 	vmov	r0, s16
   d4b3a:	f005 fe39 	bl	da7b0 <__aeabi_f2d>
   d4b3e:	4a2a      	ldr	r2, [pc, #168]	; (d4be8 <_Z12setDSTOffset6String+0xf0>)
   d4b40:	e9cd 0100 	strd	r0, r1, [sp]
   d4b44:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b48:	a80a      	add	r0, sp, #40	; 0x28
   d4b4a:	f003 fc61 	bl	d8410 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b4e:	f005 f899 	bl	d9c84 <_ZN9TimeClass7isValidEv>
   d4b52:	b138      	cbz	r0, d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b54:	f7ff ffae 	bl	d4ab4 <_Z8isDSTusav>
   d4b58:	b110      	cbz	r0, d4b60 <_Z12setDSTOffset6String+0x68>
   d4b5a:	f004 ffc3 	bl	d9ae4 <_ZN9TimeClass8beginDSTEv>
   d4b5e:	e001      	b.n	d4b64 <_Z12setDSTOffset6String+0x6c>
   d4b60:	f004 ffca 	bl	d9af8 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b64:	f004 ff7a 	bl	d9a5c <_ZN9TimeClass5localEv>
   d4b68:	4604      	mov	r4, r0
   d4b6a:	f005 f8ac 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d4b6e:	1a20      	subs	r0, r4, r0
   d4b70:	f005 fe0c 	bl	da78c <__aeabi_i2d>
   d4b74:	a318      	add	r3, pc, #96	; (adr r3, d4bd8 <_Z12setDSTOffset6String+0xe0>)
   d4b76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b7a:	f005 ff97 	bl	daaac <__aeabi_ddiv>
   d4b7e:	4a1b      	ldr	r2, [pc, #108]	; (d4bec <_Z12setDSTOffset6String+0xf4>)
   d4b80:	e9cd 0100 	strd	r0, r1, [sp]
   d4b84:	210a      	movs	r1, #10
   d4b86:	481a      	ldr	r0, [pc, #104]	; (d4bf0 <_Z12setDSTOffset6String+0xf8>)
   d4b88:	f003 fc42 	bl	d8410 <snprintf>
   d4b8c:	f003 fb88 	bl	d82a0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b90:	b1e8      	cbz	r0, d4bce <_Z12setDSTOffset6String+0xd6>
   d4b92:	4d18      	ldr	r5, [pc, #96]	; (d4bf4 <_Z12setDSTOffset6String+0xfc>)
    publishQueue.publish("Time",data, PRIVATE);
   d4b94:	4918      	ldr	r1, [pc, #96]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4b96:	782b      	ldrb	r3, [r5, #0]
   d4b98:	4818      	ldr	r0, [pc, #96]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b9a:	2400      	movs	r4, #0
   d4b9c:	aa0a      	add	r2, sp, #40	; 0x28
   d4b9e:	f88d 4000 	strb.w	r4, [sp]
   d4ba2:	f7ff fb9b 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4ba6:	4631      	mov	r1, r6
   d4ba8:	a806      	add	r0, sp, #24
   d4baa:	f004 ffb5 	bl	d9b18 <_ZN9TimeClass7timeStrEl>
   d4bae:	9b06      	ldr	r3, [sp, #24]
   d4bb0:	9303      	str	r3, [sp, #12]
   d4bb2:	f88d 4000 	strb.w	r4, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4bb6:	782b      	ldrb	r3, [r5, #0]
   d4bb8:	9a03      	ldr	r2, [sp, #12]
   d4bba:	490f      	ldr	r1, [pc, #60]	; (d4bf8 <_Z12setDSTOffset6String+0x100>)
   d4bbc:	480f      	ldr	r0, [pc, #60]	; (d4bfc <_Z12setDSTOffset6String+0x104>)
   d4bbe:	f7ff fb8d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4bc2:	a806      	add	r0, sp, #24
   d4bc4:	f004 fdd1 	bl	d976a <_ZN6StringD1Ev>
   d4bc8:	e001      	b.n	d4bce <_Z12setDSTOffset6String+0xd6>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bca:	2000      	movs	r0, #0
   d4bcc:	e000      	b.n	d4bd0 <_Z12setDSTOffset6String+0xd8>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
   d4bce:	2001      	movs	r0, #1
}
   d4bd0:	b04a      	add	sp, #296	; 0x128
   d4bd2:	ecbd 8b02 	vpop	{d8}
   d4bd6:	bd70      	pop	{r4, r5, r6, pc}
   d4bd8:	00000000 	.word	0x00000000
   d4bdc:	40ac2000 	.word	0x40ac2000
   d4be0:	2003e04c 	.word	0x2003e04c
   d4be4:	2003defd 	.word	0x2003defd
   d4be8:	000dccf3 	.word	0x000dccf3
   d4bec:	000dcb98 	.word	0x000dcb98
   d4bf0:	2003deac 	.word	0x2003deac
   d4bf4:	2003dee4 	.word	0x2003dee4
   d4bf8:	000dcbb6 	.word	0x000dcbb6
   d4bfc:	2003e010 	.word	0x2003e010

000d4c00 <_Z11displayInfov>:
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c04:	4c69      	ldr	r4, [pc, #420]	; (d4dac <_Z11displayInfov+0x1ac>)
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4c06:	b0ac      	sub	sp, #176	; 0xb0
   d4c08:	f003 f8ea 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4c0c:	6823      	ldr	r3, [r4, #0]
   d4c0e:	1ac0      	subs	r0, r0, r3
   d4c10:	f241 3387 	movw	r3, #4999	; 0x1387
   d4c14:	4298      	cmp	r0, r3
   d4c16:	f240 80c6 	bls.w	d4da6 <_Z11displayInfov+0x1a6>
   d4c1a:	f003 f8e1 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4c1e:	6020      	str	r0, [r4, #0]
   d4c20:	4c63      	ldr	r4, [pc, #396]	; (d4db0 <_Z11displayInfov+0x1b0>)
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c22:	2100      	movs	r1, #0
   d4c24:	6865      	ldr	r5, [r4, #4]
   d4c26:	4608      	mov	r0, r1
   d4c28:	f003 f872 	bl	d7d10 <os_thread_scheduling>
   d4c2c:	f895 8000 	ldrb.w	r8, [r5]
   d4c30:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   d4c32:	4d60      	ldr	r5, [pc, #384]	; (d4db4 <_Z11displayInfov+0x1b4>)
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c34:	2100      	movs	r1, #0
   d4c36:	2001      	movs	r0, #1
   d4c38:	f003 f86a 	bl	d7d10 <os_thread_scheduling>
   d4c3c:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4c3e:	f1b8 0f00 	cmp.w	r8, #0
   d4c42:	d070      	beq.n	d4d26 <_Z11displayInfov+0x126>
   d4c44:	f003 f8cc 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>

		char buf[128];
		if (t.gpsFix()) {
   d4c48:	f242 730f 	movw	r3, #9999	; 0x270f
   d4c4c:	1b80      	subs	r0, r0, r6
   d4c4e:	4298      	cmp	r0, r3
   d4c50:	d869      	bhi.n	d4d26 <_Z11displayInfov+0x126>
      current.latitude = t.readLatDeg();
   d4c52:	6860      	ldr	r0, [r4, #4]
   d4c54:	4e58      	ldr	r6, [pc, #352]	; (d4db8 <_Z11displayInfov+0x1b8>)
   d4c56:	f7ff fad4 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c5a:	ee10 0a10 	vmov	r0, s0
   d4c5e:	f005 fda7 	bl	da7b0 <__aeabi_f2d>
   d4c62:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4c66:	6860      	ldr	r0, [r4, #4]
   d4c68:	f7ff faec 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
   d4c6c:	ee10 0a10 	vmov	r0, s0
   d4c70:	f005 fd9e 	bl	da7b0 <__aeabi_f2d>
   d4c74:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4c78:	6860      	ldr	r0, [r4, #4]
   d4c7a:	f7ff fac2 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c7e:	6860      	ldr	r0, [r4, #4]
   d4c80:	ee10 6a10 	vmov	r6, s0
   d4c84:	f7ff fade 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c88:	2100      	movs	r1, #0
   d4c8a:	6867      	ldr	r7, [r4, #4]
   d4c8c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
   d4c90:	4608      	mov	r0, r1
   d4c92:	f003 f83d 	bl	d7d10 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c96:	2100      	movs	r1, #0
   d4c98:	2001      	movs	r0, #1
	/**
	 * @brief Get the altitude
	 */
	TinyGPSAltitude getAltitude() const {
	    SINGLE_THREADED_BLOCK() {
	    	return altitude;
   d4c9a:	f8d7 7080 	ldr.w	r7, [r7, #128]	; 0x80
   d4c9e:	f003 f837 	bl	d7d10 <os_thread_scheduling>
   d4ca2:	6860      	ldr	r0, [r4, #4]
   d4ca4:	f7ff fa9f 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4ca8:	4680      	mov	r8, r0
   d4caa:	4620      	mov	r0, r4
   d4cac:	f002 fb18 	bl	d72e0 <_ZN12AssetTracker14getTinyGPSPlusEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4cb0:	2100      	movs	r1, #0
   d4cb2:	4604      	mov	r4, r0
   d4cb4:	4608      	mov	r0, r1
   d4cb6:	f003 f82b 	bl	d7d10 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4cba:	2100      	movs	r1, #0
   d4cbc:	2001      	movs	r0, #1
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4cbe:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
   d4cc2:	f003 f825 	bl	d7d10 <os_thread_scheduling>
   d4cc6:	4638      	mov	r0, r7
   d4cc8:	9407      	str	r4, [sp, #28]
   d4cca:	f8cd 8018 	str.w	r8, [sp, #24]
   d4cce:	f005 fd5d 	bl	da78c <__aeabi_i2d>
   d4cd2:	4b3a      	ldr	r3, [pc, #232]	; (d4dbc <_Z11displayInfov+0x1bc>)
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	f005 fee9 	bl	daaac <__aeabi_ddiv>
   d4cda:	f006 f8b5 	bl	dae48 <__aeabi_d2f>
   d4cde:	f005 fd67 	bl	da7b0 <__aeabi_f2d>
   d4ce2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4cea:	ee10 0a10 	vmov	r0, s0
   d4cee:	f005 fd5f 	bl	da7b0 <__aeabi_f2d>
   d4cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f005 fd5a 	bl	da7b0 <__aeabi_f2d>
   d4cfc:	4a30      	ldr	r2, [pc, #192]	; (d4dc0 <_Z11displayInfov+0x1c0>)
   d4cfe:	e9cd 0100 	strd	r0, r1, [sp]
   d4d02:	2180      	movs	r1, #128	; 0x80
   d4d04:	a80c      	add	r0, sp, #48	; 0x30
   d4d06:	f003 fb83 	bl	d8410 <snprintf>
			if (gettingFix) {
   d4d0a:	782b      	ldrb	r3, [r5, #0]
   d4d0c:	b1eb      	cbz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = false;
   d4d0e:	2300      	movs	r3, #0
   d4d10:	702b      	strb	r3, [r5, #0]
   d4d12:	f003 f865 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4d16:	4b2b      	ldr	r3, [pc, #172]	; (d4dc4 <_Z11displayInfov+0x1c4>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4d18:	492b      	ldr	r1, [pc, #172]	; (d4dc8 <_Z11displayInfov+0x1c8>)
   d4d1a:	681a      	ldr	r2, [r3, #0]
   d4d1c:	1a82      	subs	r2, r0, r2
   d4d1e:	482b      	ldr	r0, [pc, #172]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d20:	f7ff fac5 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d24:	e011      	b.n	d4d4a <_Z11displayInfov+0x14a>
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d26:	6878      	ldr	r0, [r7, #4]
   d4d28:	f7ff fa5d 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4d2c:	4a28      	ldr	r2, [pc, #160]	; (d4dd0 <_Z11displayInfov+0x1d0>)
   d4d2e:	4603      	mov	r3, r0
   d4d30:	2180      	movs	r1, #128	; 0x80
   d4d32:	a80c      	add	r0, sp, #48	; 0x30
   d4d34:	f003 fb6c 	bl	d8410 <snprintf>
			if (!gettingFix) {
   d4d38:	782b      	ldrb	r3, [r5, #0]
   d4d3a:	b933      	cbnz	r3, d4d4a <_Z11displayInfov+0x14a>
				gettingFix = true;
   d4d3c:	4b1d      	ldr	r3, [pc, #116]	; (d4db4 <_Z11displayInfov+0x1b4>)
   d4d3e:	2201      	movs	r2, #1
   d4d40:	701a      	strb	r2, [r3, #0]
   d4d42:	f003 f84d 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4d46:	4b1f      	ldr	r3, [pc, #124]	; (d4dc4 <_Z11displayInfov+0x1c4>)
   d4d48:	6018      	str	r0, [r3, #0]
			}
		}
		Log.info(buf);
   d4d4a:	a90c      	add	r1, sp, #48	; 0x30
   d4d4c:	481f      	ldr	r0, [pc, #124]	; (d4dcc <_Z11displayInfov+0x1cc>)
   d4d4e:	f7ff faae 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d52:	f003 faa5 	bl	d82a0 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4d56:	b330      	cbz	r0, d4da6 <_Z11displayInfov+0x1a6>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4d58:	4c1e      	ldr	r4, [pc, #120]	; (d4dd4 <_Z11displayInfov+0x1d4>)
   d4d5a:	f003 f841 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   d4d5e:	6823      	ldr	r3, [r4, #0]
   d4d60:	1ac0      	subs	r0, r0, r3
   d4d62:	4b1d      	ldr	r3, [pc, #116]	; (d4dd8 <_Z11displayInfov+0x1d8>)
   d4d64:	4298      	cmp	r0, r3
   d4d66:	d91e      	bls.n	d4da6 <_Z11displayInfov+0x1a6>
   d4d68:	f003 f83a 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   d4d6c:	4b1b      	ldr	r3, [pc, #108]	; (d4ddc <_Z11displayInfov+0x1dc>)
				lastPublish = millis();
   d4d6e:	6020      	str	r0, [r4, #0]
   d4d70:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4d72:	f88d 3000 	strb.w	r3, [sp]
   d4d76:	aa0c      	add	r2, sp, #48	; 0x30
   d4d78:	233c      	movs	r3, #60	; 0x3c
   d4d7a:	4919      	ldr	r1, [pc, #100]	; (d4de0 <_Z11displayInfov+0x1e0>)
   d4d7c:	a80a      	add	r0, sp, #40	; 0x28
   d4d7e:	f003 fe69 	bl	d8a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4d82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d4d84:	b17c      	cbz	r4, d4da6 <_Z11displayInfov+0x1a6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d86:	6863      	ldr	r3, [r4, #4]
   d4d88:	3b01      	subs	r3, #1
   d4d8a:	6063      	str	r3, [r4, #4]
   d4d8c:	b95b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
        {
          _M_dispose();
   d4d8e:	6823      	ldr	r3, [r4, #0]
   d4d90:	4620      	mov	r0, r4
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d96:	68a3      	ldr	r3, [r4, #8]
   d4d98:	3b01      	subs	r3, #1
   d4d9a:	60a3      	str	r3, [r4, #8]
   d4d9c:	b91b      	cbnz	r3, d4da6 <_Z11displayInfov+0x1a6>
            _M_destroy();
   d4d9e:	6823      	ldr	r3, [r4, #0]
   d4da0:	4620      	mov	r0, r4
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	4798      	blx	r3
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4da6:	b02c      	add	sp, #176	; 0xb0
   d4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4dac:	2003df00 	.word	0x2003df00
   d4db0:	2003df08 	.word	0x2003df08
   d4db4:	2003df64 	.word	0x2003df64
   d4db8:	2003dfc0 	.word	0x2003dfc0
   d4dbc:	40590000 	.word	0x40590000
   d4dc0:	000dcd04 	.word	0x000dcd04
   d4dc4:	2003dfac 	.word	0x2003dfac
   d4dc8:	000dcd35 	.word	0x000dcd35
   d4dcc:	2003e298 	.word	0x2003e298
   d4dd0:	000dcd55 	.word	0x000dcd55
   d4dd4:	2003e048 	.word	0x2003e048
   d4dd8:	0001d4bf 	.word	0x0001d4bf
   d4ddc:	2003dee4 	.word	0x2003dee4
   d4de0:	000dcd6f 	.word	0x000dcd6f

000d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4de4:	b530      	push	{r4, r5, lr}
   d4de6:	b085      	sub	sp, #20
   d4de8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4dea:	a904      	add	r1, sp, #16
   d4dec:	2200      	movs	r2, #0
   d4dee:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4df2:	f003 f9bd 	bl	d8170 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4df6:	b9a8      	cbnz	r0, d4e24 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4df8:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4dfa:	b10c      	cbz	r4, d4e00 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4dfc:	6923      	ldr	r3, [r4, #16]
   d4dfe:	b923      	cbnz	r3, d4e0a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4e00:	4a09      	ldr	r2, [pc, #36]	; (d4e28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4e02:	2100      	movs	r1, #0
   d4e04:	200a      	movs	r0, #10
   d4e06:	f003 f9a3 	bl	d8150 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	230c      	movs	r3, #12
   d4e10:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4e14:	2304      	movs	r3, #4
   d4e16:	9303      	str	r3, [sp, #12]
   d4e18:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4e1a:	6923      	ldr	r3, [r4, #16]
   d4e1c:	aa01      	add	r2, sp, #4
   d4e1e:	2101      	movs	r1, #1
   d4e20:	4620      	mov	r0, r4
   d4e22:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4e24:	b005      	add	sp, #20
   d4e26:	bd30      	pop	{r4, r5, pc}
   d4e28:	000d7dd1 	.word	0x000d7dd1

000d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>:
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val));
        return val;
    }

    int batteryState() const {
   d4e2c:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4e2e:	2007      	movs	r0, #7
   d4e30:	a901      	add	r1, sp, #4
   d4e32:	f7ff ffd7 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4e36:	2800      	cmp	r0, #0
        return val;
   d4e38:	bfa8      	it	ge
   d4e3a:	9801      	ldrge	r0, [sp, #4]
    }
   d4e3c:	b003      	add	sp, #12
   d4e3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e44 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e46:	b089      	sub	sp, #36	; 0x24
   d4e48:	a901      	add	r1, sp, #4
   d4e4a:	2003      	movs	r0, #3
   d4e4c:	f7ff ffca 	bl	d4de4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4e50:	b988      	cbnz	r0, d4e76 <_Z17getBatteryContextv+0x32>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4e52:	2006      	movs	r0, #6
   d4e54:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4e58:	f7ff fa18 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4e5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4e60:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4e64:	ee07 3a10 	vmov	s14, r3
   d4e68:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4e6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4e70:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4e74:	e001      	b.n	d4e7a <_Z17getBatteryContextv+0x36>
            return -1.0f;
   d4e76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0

  static bool alreadyOnBattery = false;                             // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e7a:	4d23      	ldr	r5, [pc, #140]	; (d4f08 <_Z17getBatteryContextv+0xc4>)

void getBatteryContext() {

  static bool alreadyOnBattery = false;                             // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4e7c:	4f23      	ldr	r7, [pc, #140]	; (d4f0c <_Z17getBatteryContextv+0xc8>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

  if (!alreadyOnBattery && System.batteryState() == 4) {           // Keep track how long we are on battery power
   d4e7e:	4e24      	ldr	r6, [pc, #144]	; (d4f10 <_Z17getBatteryContextv+0xcc>)

  static bool alreadyOnBattery = false;                             // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e82:	ac01      	add	r4, sp, #4
   d4e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

void getBatteryContext() {

  static bool alreadyOnBattery = false;                             // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

void getBatteryContext() {

  static bool alreadyOnBattery = false;                             // Wee need to watch how long we are on battery power

  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4e92:	edc7 7a02 	vstr	s15, [r7, #8]

  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4e96:	f7ff ffc9 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4e9a:	ab08      	add	r3, sp, #32
   d4e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4ea0:	4a1c      	ldr	r2, [pc, #112]	; (d4f14 <_Z17getBatteryContextv+0xd0>)
   d4ea2:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4ea6:	481c      	ldr	r0, [pc, #112]	; (d4f18 <_Z17getBatteryContextv+0xd4>)
   d4ea8:	4d1c      	ldr	r5, [pc, #112]	; (d4f1c <_Z17getBatteryContextv+0xd8>)
   d4eaa:	2110      	movs	r1, #16
   d4eac:	f003 fab0 	bl	d8410 <snprintf>

  if (!alreadyOnBattery && System.batteryState() == 4) {           // Keep track how long we are on battery power
   d4eb0:	7833      	ldrb	r3, [r6, #0]
   d4eb2:	463c      	mov	r4, r7
   d4eb4:	4637      	mov	r7, r6
   d4eb6:	b99b      	cbnz	r3, d4ee0 <_Z17getBatteryContextv+0x9c>
   d4eb8:	f7ff ffb8 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4ebc:	2804      	cmp	r0, #4
   d4ebe:	d10f      	bne.n	d4ee0 <_Z17getBatteryContextv+0x9c>
    alreadyOnBattery = true;
   d4ec0:	2301      	movs	r3, #1
   d4ec2:	7033      	strb	r3, [r6, #0]
   d4ec4:	f002 ff8c 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
    lastTimePowered = millis();
  }
  else if (System.batteryState() == 2 || System.batteryState() == 3) {    // If charged or charging
    alreadyOnBattery = false;
    lastTimePowered = millis();
   d4ec8:	6028      	str	r0, [r5, #0]
   d4eca:	f002 ff89 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
  }

  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 60) {                      // If we have been on battery for four hours, or the battery is less than 60%
   d4ece:	682b      	ldr	r3, [r5, #0]
   d4ed0:	1ac0      	subs	r0, r0, r3
   d4ed2:	4b13      	ldr	r3, [pc, #76]	; (d4f20 <_Z17getBatteryContextv+0xdc>)
   d4ed4:	4298      	cmp	r0, r3
   d4ed6:	d80e      	bhi.n	d4ef6 <_Z17getBatteryContextv+0xb2>
   d4ed8:	68a3      	ldr	r3, [r4, #8]
   d4eda:	2b3c      	cmp	r3, #60	; 0x3c
   d4edc:	dd0b      	ble.n	d4ef6 <_Z17getBatteryContextv+0xb2>
   d4ede:	e00d      	b.n	d4efc <_Z17getBatteryContextv+0xb8>

  if (!alreadyOnBattery && System.batteryState() == 4) {           // Keep track how long we are on battery power
    alreadyOnBattery = true;
    lastTimePowered = millis();
  }
  else if (System.batteryState() == 2 || System.batteryState() == 3) {    // If charged or charging
   d4ee0:	f7ff ffa4 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4ee4:	2802      	cmp	r0, #2
   d4ee6:	d003      	beq.n	d4ef0 <_Z17getBatteryContextv+0xac>
   d4ee8:	f7ff ffa0 	bl	d4e2c <_ZNK11SystemClass12batteryStateEv.isra.33>
   d4eec:	2803      	cmp	r0, #3
   d4eee:	d1ec      	bne.n	d4eca <_Z17getBatteryContextv+0x86>
    alreadyOnBattery = false;
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	703b      	strb	r3, [r7, #0]
   d4ef4:	e7e6      	b.n	d4ec4 <_Z17getBatteryContextv+0x80>
    lastTimePowered = millis();
  }

  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 60) {                      // If we have been on battery for four hours, or the battery is less than 60%
    sysStatus.lowBatteryMode = true;
   d4ef6:	2301      	movs	r3, #1
   d4ef8:	7163      	strb	r3, [r4, #5]
   d4efa:	e002      	b.n	d4f02 <_Z17getBatteryContextv+0xbe>
  } 
  else sysStatus.lowBatteryMode = false;
   d4efc:	4b03      	ldr	r3, [pc, #12]	; (d4f0c <_Z17getBatteryContextv+0xc8>)
   d4efe:	2200      	movs	r2, #0
   d4f00:	715a      	strb	r2, [r3, #5]

}
   d4f02:	b009      	add	sp, #36	; 0x24
   d4f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f06:	bf00      	nop
   d4f08:	000dcaf8 	.word	0x000dcaf8
   d4f0c:	2003e04c 	.word	0x2003e04c
   d4f10:	2003defc 	.word	0x2003defc
   d4f14:	000dd09e 	.word	0x000dd09e
   d4f18:	2003dee6 	.word	0x2003dee6
   d4f1c:	2003e06c 	.word	0x2003e06c
   d4f20:	00dbba00 	.word	0x00dbba00

000d4f24 <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4f26:	f7ff fe6b 	bl	d4c00 <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f2a:	4b23      	ldr	r3, [pc, #140]	; (d4fb8 <_Z16takeMeasurementsv+0x94>)
   d4f2c:	2200      	movs	r2, #0
   d4f2e:	4611      	mov	r1, r2
   d4f30:	6858      	ldr	r0, [r3, #4]
   d4f32:	f003 fa0d 	bl	d8350 <network_ready>

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4f36:	b108      	cbz	r0, d4f3c <_Z16takeMeasurementsv+0x18>
   d4f38:	f7ff fc02 	bl	d4740 <_Z17getSignalStrengthv>
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4f3c:	4e1f      	ldr	r6, [pc, #124]	; (d4fbc <_Z16takeMeasurementsv+0x98>)
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f3e:	4f20      	ldr	r7, [pc, #128]	; (d4fc0 <_Z16takeMeasurementsv+0x9c>)
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4f40:	2400      	movs	r4, #0
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4f42:	1930      	adds	r0, r6, r4
   d4f44:	f7ff fbbc 	bl	d46c0 <_Z7getTempPh>
   d4f48:	ec51 0b10 	vmov	r0, r1, d0
   d4f4c:	f005 ff7c 	bl	dae48 <__aeabi_d2f>
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f50:	ee07 0a90 	vmov	s15, r0
   d4f54:	eef4 7a67 	vcmp.f32	s15, s15
   d4f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f5c:	d604      	bvs.n	d4f68 <_Z16takeMeasurementsv+0x44>
   d4f5e:	f005 fc27 	bl	da7b0 <__aeabi_f2d>
   d4f62:	193d      	adds	r5, r7, r4
   d4f64:	e9c5 0100 	strd	r0, r1, [r5]
   d4f68:	3408      	adds	r4, #8
void takeMeasurements()
{
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
   d4f6a:	2c18      	cmp	r4, #24
   d4f6c:	d1e9      	bne.n	d4f42 <_Z16takeMeasurementsv+0x1e>
    float temp = getTemp(sensorAddresses[i]);
    if (!isnan(temp)) current.tempArray[i] = temp;
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4f6e:	4c14      	ldr	r4, [pc, #80]	; (d4fc0 <_Z16takeMeasurementsv+0x9c>)
   d4f70:	4814      	ldr	r0, [pc, #80]	; (d4fc4 <_Z16takeMeasurementsv+0xa0>)
   d4f72:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4f76:	210c      	movs	r1, #12
   d4f78:	e9cd 2300 	strd	r2, r3, [sp]
   d4f7c:	4a12      	ldr	r2, [pc, #72]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4f7e:	f003 fa47 	bl	d8410 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4f82:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4f86:	210c      	movs	r1, #12
   d4f88:	e9cd 2300 	strd	r2, r3, [sp]
   d4f8c:	480f      	ldr	r0, [pc, #60]	; (d4fcc <_Z16takeMeasurementsv+0xa8>)
   d4f8e:	4a0e      	ldr	r2, [pc, #56]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4f90:	f003 fa3e 	bl	d8410 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4f94:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4f98:	210c      	movs	r1, #12
   d4f9a:	e9cd 2300 	strd	r2, r3, [sp]
   d4f9e:	480c      	ldr	r0, [pc, #48]	; (d4fd0 <_Z16takeMeasurementsv+0xac>)
   d4fa0:	4a09      	ldr	r2, [pc, #36]	; (d4fc8 <_Z16takeMeasurementsv+0xa4>)
   d4fa2:	f003 fa35 	bl	d8410 <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4fa6:	f7ff ff4d 	bl	d4e44 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4faa:	4a0a      	ldr	r2, [pc, #40]	; (d4fd4 <_Z16takeMeasurementsv+0xb0>)
   d4fac:	2301      	movs	r3, #1
   d4fae:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4fb0:	4a09      	ldr	r2, [pc, #36]	; (d4fd8 <_Z16takeMeasurementsv+0xb4>)
   d4fb2:	7013      	strb	r3, [r2, #0]
}
   d4fb4:	b003      	add	sp, #12
   d4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fb8:	2003e260 	.word	0x2003e260
   d4fbc:	2003f400 	.word	0x2003f400
   d4fc0:	2003dfc0 	.word	0x2003dfc0
   d4fc4:	2003ddcd 	.word	0x2003ddcd
   d4fc8:	000dcd73 	.word	0x000dcd73
   d4fcc:	2003dd40 	.word	0x2003dd40
   d4fd0:	2003ddbc 	.word	0x2003ddbc
   d4fd4:	2003defd 	.word	0x2003defd
   d4fd8:	2003dfb4 	.word	0x2003dfb4

000d4fdc <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d4fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4fde:	4c99      	ldr	r4, [pc, #612]	; (d5244 <loop+0x268>)
   d4fe0:	7823      	ldrb	r3, [r4, #0]
   d4fe2:	3b01      	subs	r3, #1
   d4fe4:	2b05      	cmp	r3, #5
   d4fe6:	f200 8114 	bhi.w	d5212 <loop+0x236>
   d4fea:	e8df f003 	tbb	[pc, r3]
   d4fee:	03af      	.short	0x03af
   d4ff0:	88683964 	.word	0x88683964
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ff4:	4d94      	ldr	r5, [pc, #592]	; (d5248 <loop+0x26c>)
   d4ff6:	792b      	ldrb	r3, [r5, #4]
   d4ff8:	b12b      	cbz	r3, d5006 <loop+0x2a>
   d4ffa:	4b94      	ldr	r3, [pc, #592]	; (d524c <loop+0x270>)
   d4ffc:	781b      	ldrb	r3, [r3, #0]
   d4ffe:	2b02      	cmp	r3, #2
   d5000:	d001      	beq.n	d5006 <loop+0x2a>
   d5002:	f7ff fcbd 	bl	d4980 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d5006:	4b92      	ldr	r3, [pc, #584]	; (d5250 <loop+0x274>)
   d5008:	781b      	ldrb	r3, [r3, #0]
   d500a:	b10b      	cbz	r3, d5010 <loop+0x34>
   d500c:	f7ff fbd4 	bl	d47b8 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d5010:	4e90      	ldr	r6, [pc, #576]	; (d5254 <loop+0x278>)
   d5012:	7833      	ldrb	r3, [r6, #0]
   d5014:	b13b      	cbz	r3, d5026 <loop+0x4a>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5016:	2320      	movs	r3, #32
   d5018:	4a8b      	ldr	r2, [pc, #556]	; (d5248 <loop+0x26c>)
   d501a:	488f      	ldr	r0, [pc, #572]	; (d5258 <loop+0x27c>)
   d501c:	2101      	movs	r1, #1
   d501e:	f000 fe0f 	bl	d5c40 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d5022:	2300      	movs	r3, #0
   d5024:	7033      	strb	r3, [r6, #0]
    }
    if (currentCountsWriteNeeded) {
   d5026:	4e8d      	ldr	r6, [pc, #564]	; (d525c <loop+0x280>)
   d5028:	7833      	ldrb	r3, [r6, #0]
   d502a:	b13b      	cbz	r3, d503c <loop+0x60>
   d502c:	2330      	movs	r3, #48	; 0x30
   d502e:	4a8c      	ldr	r2, [pc, #560]	; (d5260 <loop+0x284>)
   d5030:	4889      	ldr	r0, [pc, #548]	; (d5258 <loop+0x27c>)
   d5032:	2150      	movs	r1, #80	; 0x50
   d5034:	f000 fe04 	bl	d5c40 <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d5038:	2300      	movs	r3, #0
   d503a:	7033      	strb	r3, [r6, #0]
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d503c:	f004 fe54 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5040:	79ab      	ldrb	r3, [r5, #6]
   d5042:	fb90 f2f3 	sdiv	r2, r0, r3
   d5046:	fb02 0013 	mls	r0, r2, r3, r0
   d504a:	2800      	cmp	r0, #0
   d504c:	f040 80e7 	bne.w	d521e <loop+0x242>
   d5050:	f004 fe4a 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5054:	4b83      	ldr	r3, [pc, #524]	; (d5264 <loop+0x288>)
   d5056:	681b      	ldr	r3, [r3, #0]
   d5058:	4298      	cmp	r0, r3
   d505a:	f040 80e9 	bne.w	d5230 <loop+0x254>
   d505e:	e0de      	b.n	d521e <loop+0x242>
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;

    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5060:	4b79      	ldr	r3, [pc, #484]	; (d5248 <loop+0x26c>)
   d5062:	791a      	ldrb	r2, [r3, #4]
   d5064:	461c      	mov	r4, r3
   d5066:	b12a      	cbz	r2, d5074 <loop+0x98>
   d5068:	4b78      	ldr	r3, [pc, #480]	; (d524c <loop+0x270>)
   d506a:	781b      	ldrb	r3, [r3, #0]
   d506c:	2b04      	cmp	r3, #4
   d506e:	d001      	beq.n	d5074 <loop+0x98>
   d5070:	f7ff fc86 	bl	d4980 <_Z22publishStateTransitionv>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d5074:	f004 fe38 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5078:	2801      	cmp	r0, #1
   d507a:	dd03      	ble.n	d5084 <loop+0xa8>
   d507c:	78e3      	ldrb	r3, [r4, #3]
   d507e:	2b00      	cmp	r3, #0
   d5080:	f040 80dd 	bne.w	d523e <loop+0x262>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5084:	2100      	movs	r1, #0
   d5086:	2007      	movs	r0, #7
   d5088:	f005 f855 	bl	da136 <digitalWrite>
      petWatchdog();
   d508c:	f7ff fb94 	bl	d47b8 <_Z11petWatchdogv>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5090:	f004 fe2a 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5094:	233c      	movs	r3, #60	; 0x3c
   d5096:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d509a:	fb03 f100 	mul.w	r1, r3, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d509e:	2900      	cmp	r1, #0
   d50a0:	dd05      	ble.n	d50ae <loop+0xd2>
   d50a2:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d50a6:	bfa8      	it	ge
   d50a8:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d50ac:	e000      	b.n	d50b0 <loop+0xd4>
   d50ae:	2101      	movs	r1, #1
      rtc.setAlarm(wakeInSeconds);                                      // The Real Time Clock will turn the Enable pin back on to wake the device
   d50b0:	2300      	movs	r3, #0
   d50b2:	2201      	movs	r2, #1
   d50b4:	e092      	b.n	d51dc <loop+0x200>
    } break;

  case MEASURING_STATE:
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d50b6:	f7ff ff35 	bl	d4f24 <_Z16takeMeasurementsv>
    state = REPORTING_STATE;
   d50ba:	2305      	movs	r3, #5
   d50bc:	e018      	b.n	d50f0 <loop+0x114>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50be:	4b62      	ldr	r3, [pc, #392]	; (d5248 <loop+0x26c>)
   d50c0:	791a      	ldrb	r2, [r3, #4]
   d50c2:	461d      	mov	r5, r3
   d50c4:	b12a      	cbz	r2, d50d2 <loop+0xf6>
   d50c6:	4b61      	ldr	r3, [pc, #388]	; (d524c <loop+0x270>)
   d50c8:	781b      	ldrb	r3, [r3, #0]
   d50ca:	2b05      	cmp	r3, #5
   d50cc:	d001      	beq.n	d50d2 <loop+0xf6>
   d50ce:	f7ff fc57 	bl	d4980 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d50d2:	78eb      	ldrb	r3, [r5, #3]
   d50d4:	b90b      	cbnz	r3, d50da <loop+0xfe>
   d50d6:	f7ff fbd1 	bl	d487c <_Z17connectToParticlev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50da:	f003 f8e1 	bl	d82a0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d50de:	b148      	cbz	r0, d50f4 <loop+0x118>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d50e0:	f004 fdf8 	bl	d9cd4 <_ZN9TimeClass4hourEv>
   d50e4:	b908      	cbnz	r0, d50ea <loop+0x10e>
   d50e6:	f7ff fcad 	bl	d4a44 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d50ea:	f7ff fa89 	bl	d4600 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d50ee:	2306      	movs	r3, #6
   d50f0:	7023      	strb	r3, [r4, #0]
   d50f2:	e08e      	b.n	d5212 <loop+0x236>
   d50f4:	f002 fe74 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d50f8:	4b5b      	ldr	r3, [pc, #364]	; (d5268 <loop+0x28c>)
   d50fa:	6018      	str	r0, [r3, #0]
   d50fc:	e024      	b.n	d5148 <loop+0x16c>
      state = ERROR_STATE;
    }
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50fe:	4b52      	ldr	r3, [pc, #328]	; (d5248 <loop+0x26c>)
   d5100:	791b      	ldrb	r3, [r3, #4]
   d5102:	b12b      	cbz	r3, d5110 <loop+0x134>
   d5104:	4b51      	ldr	r3, [pc, #324]	; (d524c <loop+0x270>)
   d5106:	781b      	ldrb	r3, [r3, #0]
   d5108:	2b06      	cmp	r3, #6
   d510a:	d001      	beq.n	d5110 <loop+0x134>
   d510c:	f7ff fc38 	bl	d4980 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d5110:	4b56      	ldr	r3, [pc, #344]	; (d526c <loop+0x290>)
   d5112:	781b      	ldrb	r3, [r3, #0]
   d5114:	b90b      	cbnz	r3, d511a <loop+0x13e>
      state = IDLE_STATE;
   d5116:	2302      	movs	r3, #2
   d5118:	e7ea      	b.n	d50f0 <loop+0x114>
   d511a:	f002 fe61 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d511e:	4b54      	ldr	r3, [pc, #336]	; (d5270 <loop+0x294>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	1ac0      	subs	r0, r0, r3
   d5124:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5128:	4298      	cmp	r0, r3
   d512a:	d972      	bls.n	d5212 <loop+0x236>
   d512c:	f002 fe58 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5130:	4b4d      	ldr	r3, [pc, #308]	; (d5268 <loop+0x28c>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5132:	4950      	ldr	r1, [pc, #320]	; (d5274 <loop+0x298>)
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (!dataInFlight)  {                                             // Response received back to IDLE state
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d5134:	6018      	str	r0, [r3, #0]
   d5136:	4b50      	ldr	r3, [pc, #320]	; (d5278 <loop+0x29c>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5138:	4850      	ldr	r0, [pc, #320]	; (d527c <loop+0x2a0>)
   d513a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d513c:	2200      	movs	r2, #0
   d513e:	f88d 2000 	strb.w	r2, [sp]
   d5142:	4a4f      	ldr	r2, [pc, #316]	; (d5280 <loop+0x2a4>)
   d5144:	f7ff f8ca 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d5148:	2301      	movs	r3, #1
   d514a:	e7d1      	b.n	d50f0 <loop+0x114>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d514c:	4c3e      	ldr	r4, [pc, #248]	; (d5248 <loop+0x26c>)
   d514e:	7923      	ldrb	r3, [r4, #4]
   d5150:	b12b      	cbz	r3, d515e <loop+0x182>
   d5152:	4b3e      	ldr	r3, [pc, #248]	; (d524c <loop+0x270>)
   d5154:	781b      	ldrb	r3, [r3, #0]
   d5156:	2b01      	cmp	r3, #1
   d5158:	d001      	beq.n	d515e <loop+0x182>
   d515a:	f7ff fc11 	bl	d4980 <_Z22publishStateTransitionv>
   d515e:	f002 fe3f 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5162:	4b41      	ldr	r3, [pc, #260]	; (d5268 <loop+0x28c>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d516a:	3330      	adds	r3, #48	; 0x30
   d516c:	4298      	cmp	r0, r3
   d516e:	d950      	bls.n	d5212 <loop+0x236>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5170:	6923      	ldr	r3, [r4, #16]
   d5172:	2b03      	cmp	r3, #3
   d5174:	dc13      	bgt.n	d519e <loop+0x1c2>
   d5176:	f003 f893 	bl	d82a0 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d517a:	b148      	cbz	r0, d5190 <loop+0x1b4>
   d517c:	4b3e      	ldr	r3, [pc, #248]	; (d5278 <loop+0x29c>)
   d517e:	4941      	ldr	r1, [pc, #260]	; (d5284 <loop+0x2a8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5180:	781b      	ldrb	r3, [r3, #0]
   d5182:	483e      	ldr	r0, [pc, #248]	; (d527c <loop+0x2a0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5184:	2200      	movs	r2, #0
   d5186:	f88d 2000 	strb.w	r2, [sp]
   d518a:	4a3f      	ldr	r2, [pc, #252]	; (d5288 <loop+0x2ac>)
   d518c:	f7ff f8a6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5190:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5194:	f003 f964 	bl	d8460 <delay>
        System.reset();
   d5198:	f004 fbc9 	bl	d992e <_ZN11SystemClass5resetEv>
   d519c:	e039      	b.n	d5212 <loop+0x236>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d519e:	f004 fd92 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d51a2:	4b29      	ldr	r3, [pc, #164]	; (d5248 <loop+0x26c>)
   d51a4:	4d2b      	ldr	r5, [pc, #172]	; (d5254 <loop+0x278>)
   d51a6:	69db      	ldr	r3, [r3, #28]
   d51a8:	1ac0      	subs	r0, r0, r3
   d51aa:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d51ae:	d919      	bls.n	d51e4 <loop+0x208>
   d51b0:	f003 f876 	bl	d82a0 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d51b4:	b148      	cbz	r0, d51ca <loop+0x1ee>
   d51b6:	4b30      	ldr	r3, [pc, #192]	; (d5278 <loop+0x29c>)
   d51b8:	4932      	ldr	r1, [pc, #200]	; (d5284 <loop+0x2a8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d51ba:	781b      	ldrb	r3, [r3, #0]
   d51bc:	482f      	ldr	r0, [pc, #188]	; (d527c <loop+0x2a0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d51be:	2200      	movs	r2, #0
   d51c0:	f88d 2000 	strb.w	r2, [sp]
   d51c4:	4a31      	ldr	r2, [pc, #196]	; (d528c <loop+0x2b0>)
   d51c6:	f7ff f889 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d51ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d51ce:	f003 f947 	bl	d8460 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d51d2:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d51d4:	2201      	movs	r2, #1
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d51d6:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d51d8:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d51da:	210a      	movs	r1, #10
   d51dc:	482c      	ldr	r0, [pc, #176]	; (d5290 <loop+0x2b4>)
   d51de:	f001 f9ba 	bl	d6556 <_ZN8MCP794108setAlarmEibi>
   d51e2:	e016      	b.n	d5212 <loop+0x236>
   d51e4:	f003 f85c 	bl	d82a0 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d51e8:	b148      	cbz	r0, d51fe <loop+0x222>
   d51ea:	4b23      	ldr	r3, [pc, #140]	; (d5278 <loop+0x29c>)
   d51ec:	4925      	ldr	r1, [pc, #148]	; (d5284 <loop+0x2a8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d51ee:	781b      	ldrb	r3, [r3, #0]
   d51f0:	4822      	ldr	r0, [pc, #136]	; (d527c <loop+0x2a0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d51f2:	2200      	movs	r2, #0
   d51f4:	f88d 2000 	strb.w	r2, [sp]
   d51f8:	4a26      	ldr	r2, [pc, #152]	; (d5294 <loop+0x2b8>)
   d51fa:	f7ff f86f 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d51fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5202:	f003 f92d 	bl	d8460 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5206:	2300      	movs	r3, #0
   d5208:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d520a:	2301      	movs	r3, #1
   d520c:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d520e:	f7ff fbed 	bl	d49ec <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d5212:	481f      	ldr	r0, [pc, #124]	; (d5290 <loop+0x2b4>)
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
   d5214:	b002      	add	sp, #8
   d5216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d521a:	f001 b8d5 	b.w	d63c8 <_ZN8MCP794104loopEv>
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d521e:	f004 fd63 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5222:	b938      	cbnz	r0, d5234 <loop+0x258>
   d5224:	f004 fd60 	bl	d9ce8 <_ZN9TimeClass6minuteEv>
   d5228:	4b0e      	ldr	r3, [pc, #56]	; (d5264 <loop+0x288>)
   d522a:	681b      	ldr	r3, [r3, #0]
   d522c:	4298      	cmp	r0, r3
   d522e:	d001      	beq.n	d5234 <loop+0x258>
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d5230:	2303      	movs	r3, #3
   d5232:	7023      	strb	r3, [r4, #0]
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval

    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d5234:	796b      	ldrb	r3, [r5, #5]
   d5236:	2b00      	cmp	r3, #0
   d5238:	d0eb      	beq.n	d5212 <loop+0x236>
   d523a:	2304      	movs	r3, #4
   d523c:	e758      	b.n	d50f0 <loop+0x114>

    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d523e:	f7ff fb6b 	bl	d4918 <_Z22disconnectFromParticlev>
   d5242:	e71f      	b.n	d5084 <loop+0xa8>
   d5244:	2003defe 	.word	0x2003defe
   d5248:	2003e04c 	.word	0x2003e04c
   d524c:	2003dee5 	.word	0x2003dee5
   d5250:	2003df38 	.word	0x2003df38
   d5254:	2003defd 	.word	0x2003defd
   d5258:	2003deb8 	.word	0x2003deb8
   d525c:	2003dfb4 	.word	0x2003dfb4
   d5260:	2003dfc0 	.word	0x2003dfc0
   d5264:	2003dfb8 	.word	0x2003dfb8
   d5268:	2003dfb0 	.word	0x2003dfb0
   d526c:	2003dff0 	.word	0x2003dff0
   d5270:	2003def8 	.word	0x2003def8
   d5274:	000dcd7b 	.word	0x000dcd7b
   d5278:	2003dee4 	.word	0x2003dee4
   d527c:	2003e010 	.word	0x2003e010
   d5280:	000dd63e 	.word	0x000dd63e
   d5284:	000dcda8 	.word	0x000dcda8
   d5288:	000dcd94 	.word	0x000dcd94
   d528c:	000dcdae 	.word	0x000dcdae
   d5290:	2003dec8 	.word	0x2003dec8
   d5294:	000dcdc8 	.word	0x000dcdc8

000d5298 <_Z18loadSystemDefaultsv>:
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5298:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d529a:	f7ff faef 	bl	d487c <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d529e:	f7ff fe41 	bl	d4f24 <_Z16takeMeasurementsv>
   d52a2:	f002 fffd 	bl	d82a0 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d52a6:	b148      	cbz	r0, d52bc <_Z18loadSystemDefaultsv+0x24>
   d52a8:	4b11      	ldr	r3, [pc, #68]	; (d52f0 <_Z18loadSystemDefaultsv+0x58>)
   d52aa:	4912      	ldr	r1, [pc, #72]	; (d52f4 <_Z18loadSystemDefaultsv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d52ac:	781b      	ldrb	r3, [r3, #0]
   d52ae:	4812      	ldr	r0, [pc, #72]	; (d52f8 <_Z18loadSystemDefaultsv+0x60>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d52b0:	2200      	movs	r2, #0
   d52b2:	f88d 2000 	strb.w	r2, [sp]
   d52b6:	4a11      	ldr	r2, [pc, #68]	; (d52fc <_Z18loadSystemDefaultsv+0x64>)
   d52b8:	f7ff f810 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d52bc:	4a10      	ldr	r2, [pc, #64]	; (d5300 <_Z18loadSystemDefaultsv+0x68>)
   d52be:	4811      	ldr	r0, [pc, #68]	; (d5304 <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d52c0:	2300      	movs	r3, #0
   d52c2:	7093      	strb	r3, [r2, #2]
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d52c4:	6893      	ldr	r3, [r2, #8]
   d52c6:	2b1d      	cmp	r3, #29
   d52c8:	bfcc      	ite	gt
   d52ca:	2300      	movgt	r3, #0
   d52cc:	2301      	movle	r3, #1
   d52ce:	7153      	strb	r3, [r2, #5]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d52d0:	230a      	movs	r3, #10
   d52d2:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d52d4:	4b0c      	ldr	r3, [pc, #48]	; (d5308 <_Z18loadSystemDefaultsv+0x70>)
   d52d6:	6153      	str	r3, [r2, #20]
  sysStatus.dstOffset = 1;
   d52d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d52dc:	2101      	movs	r1, #1
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d52de:	6193      	str	r3, [r2, #24]
   d52e0:	2320      	movs	r3, #32

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d52e2:	7011      	strb	r1, [r2, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
   d52e4:	7111      	strb	r1, [r2, #4]
  else sysStatus.lowBatteryMode = false;
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d52e6:	b003      	add	sp, #12
   d52e8:	f85d eb04 	ldr.w	lr, [sp], #4
   d52ec:	f000 bca8 	b.w	d5c40 <_ZN6MB85RC9writeDataEjPKhj>
   d52f0:	2003dee4 	.word	0x2003dee4
   d52f4:	000dcb93 	.word	0x000dcb93
   d52f8:	2003e010 	.word	0x2003e010
   d52fc:	000dcde7 	.word	0x000dcde7
   d5300:	2003e04c 	.word	0x2003e04c
   d5304:	2003deb8 	.word	0x2003deb8
   d5308:	c0a00000 	.word	0xc0a00000

000d530c <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d530c:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d530e:	4c28      	ldr	r4, [pc, #160]	; (d53b0 <_Z17checkSystemValuesv+0xa4>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d5310:	4d27      	ldr	r5, [pc, #156]	; (d53b0 <_Z17checkSystemValuesv+0xa4>)
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d5312:	f7ff fe07 	bl	d4f24 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d5316:	78a3      	ldrb	r3, [r4, #2]
   d5318:	2b01      	cmp	r3, #1
   d531a:	bf84      	itt	hi
   d531c:	2300      	movhi	r3, #0
   d531e:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d5320:	78e3      	ldrb	r3, [r4, #3]
   d5322:	2b01      	cmp	r3, #1
   d5324:	d906      	bls.n	d5334 <_Z17checkSystemValuesv+0x28>
   d5326:	f002 ffbb 	bl	d82a0 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d532a:	b110      	cbz	r0, d5332 <_Z17checkSystemValuesv+0x26>
   d532c:	2301      	movs	r3, #1
   d532e:	70eb      	strb	r3, [r5, #3]
   d5330:	e000      	b.n	d5334 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
   d5332:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d5334:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5336:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d533a:	2b01      	cmp	r3, #1
   d533c:	bf82      	ittt	hi
   d533e:	4b1c      	ldrhi	r3, [pc, #112]	; (d53b0 <_Z17checkSystemValuesv+0xa4>)
   d5340:	2200      	movhi	r2, #0
   d5342:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5344:	68a2      	ldr	r2, [r4, #8]
   d5346:	4b1a      	ldr	r3, [pc, #104]	; (d53b0 <_Z17checkSystemValuesv+0xa4>)
   d5348:	2a1d      	cmp	r2, #29
   d534a:	bfd4      	ite	le
   d534c:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d534e:	2200      	movgt	r2, #0
   d5350:	715a      	strb	r2, [r3, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5352:	6923      	ldr	r3, [r4, #16]
   d5354:	2bff      	cmp	r3, #255	; 0xff
   d5356:	bf88      	it	hi
   d5358:	4b15      	ldrhi	r3, [pc, #84]	; (d53b0 <_Z17checkSystemValuesv+0xa4>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d535a:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d535e:	bf88      	it	hi
   d5360:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5362:	eef4 7ac7 	vcmpe.f32	s15, s14
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5366:	bf88      	it	hi
   d5368:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d536e:	d406      	bmi.n	d537e <_Z17checkSystemValuesv+0x72>
   d5370:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5374:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d537c:	dd01      	ble.n	d5382 <_Z17checkSystemValuesv+0x76>
   d537e:	4b0d      	ldr	r3, [pc, #52]	; (d53b4 <_Z17checkSystemValuesv+0xa8>)
   d5380:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5382:	edd4 7a06 	vldr	s15, [r4, #24]
   d5386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d538e:	d406      	bmi.n	d539e <_Z17checkSystemValuesv+0x92>
   d5390:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5394:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d539c:	dd02      	ble.n	d53a4 <_Z17checkSystemValuesv+0x98>
   d539e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d53a2:	61a3      	str	r3, [r4, #24]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d53a4:	230a      	movs	r3, #10
   d53a6:	71a3      	strb	r3, [r4, #6]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d53a8:	4b03      	ldr	r3, [pc, #12]	; (d53b8 <_Z17checkSystemValuesv+0xac>)
   d53aa:	2201      	movs	r2, #1
   d53ac:	701a      	strb	r2, [r3, #0]
   d53ae:	bd38      	pop	{r3, r4, r5, pc}
   d53b0:	2003e04c 	.word	0x2003e04c
   d53b4:	c0a00000 	.word	0xc0a00000
   d53b8:	2003defd 	.word	0x2003defd

000d53bc <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53bc:	2300      	movs	r3, #0
   d53be:	2202      	movs	r2, #2
   d53c0:	f002 bf46 	b.w	d8250 <spark_variable>

000d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d53c4:	2300      	movs	r3, #0
   d53c6:	2204      	movs	r2, #4
   d53c8:	f002 bf42 	b.w	d8250 <spark_variable>

000d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d53cc:	4602      	mov	r2, r0
   d53ce:	4801      	ldr	r0, [pc, #4]	; (d53d4 <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d53d0:	f003 ba30 	b.w	d8834 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d53d4:	000d8809 	.word	0x000d8809

000d53d8 <setup>:
float celsius[nSENSORS] = {NAN, NAN};
retained uint8_t sensorAddresses[nSENSORS][8];
const int MAXRETRY = 3;

void setup()                                        // Note: Disconnected Setup()
{
   d53d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53da:	b0a9      	sub	sp, #164	; 0xa4

  Serial.begin(9600);
   d53dc:	f004 fd9e 	bl	d9f1c <_Z16_fetch_usbserialv>
   d53e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d53e4:	f004 fd8e 	bl	d9f04 <_ZN9USBSerial5beginEl>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d53e8:	2100      	movs	r1, #0
   d53ea:	2008      	movs	r0, #8
   d53ec:	f004 fe92 	bl	da114 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d53f0:	2100      	movs	r1, #0
   d53f2:	2004      	movs	r0, #4
   d53f4:	f004 fe8e 	bl	da114 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d53f8:	2101      	movs	r1, #1
   d53fa:	2007      	movs	r0, #7
   d53fc:	f004 fe8a 	bl	da114 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5400:	2101      	movs	r1, #1
   d5402:	2005      	movs	r0, #5

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5404:	2400      	movs	r4, #0
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5406:	f004 fe85 	bl	da114 <pinMode>

  digitalWrite(blueLED,HIGH);
   d540a:	2101      	movs	r1, #1
   d540c:	2007      	movs	r0, #7
   d540e:	f004 fe92 	bl	da136 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d5412:	f7ff f9d1 	bl	d47b8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d541a:	2201      	movs	r2, #1
   d541c:	4996      	ldr	r1, [pc, #600]	; (d5678 <setup+0x2a0>)
   d541e:	9400      	str	r4, [sp, #0]
   d5420:	2008      	movs	r0, #8
   d5422:	f003 fd6b 	bl	d8efc <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5426:	a804      	add	r0, sp, #16
   d5428:	f002 ff42 	bl	d82b0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d542c:	4623      	mov	r3, r4
   d542e:	227d      	movs	r2, #125	; 0x7d
   d5430:	a908      	add	r1, sp, #32
   d5432:	a804      	add	r0, sp, #16
   d5434:	f004 fa1f 	bl	d9876 <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5438:	4623      	mov	r3, r4
   d543a:	4622      	mov	r2, r4
   d543c:	498f      	ldr	r1, [pc, #572]	; (d567c <setup+0x2a4>)
   d543e:	9401      	str	r4, [sp, #4]
   d5440:	9400      	str	r4, [sp, #0]
   d5442:	a808      	add	r0, sp, #32
   d5444:	f002 ff44 	bl	d82d0 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);
   d5448:	498d      	ldr	r1, [pc, #564]	; (d5680 <setup+0x2a8>)
   d544a:	488e      	ldr	r0, [pc, #568]	; (d5684 <setup+0x2ac>)
   d544c:	4d8e      	ldr	r5, [pc, #568]	; (d5688 <setup+0x2b0>)
   d544e:	4f8f      	ldr	r7, [pc, #572]	; (d568c <setup+0x2b4>)
   d5450:	f7ff ffb8 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SampleInterval",sampleIntervalStr);
   d5454:	498e      	ldr	r1, [pc, #568]	; (d5690 <setup+0x2b8>)
   d5456:	488f      	ldr	r0, [pc, #572]	; (d5694 <setup+0x2bc>)
   d5458:	f7ff ffb4 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d545c:	498e      	ldr	r1, [pc, #568]	; (d5698 <setup+0x2c0>)
   d545e:	488f      	ldr	r0, [pc, #572]	; (d569c <setup+0x2c4>)
   d5460:	f7ff ffac 	bl	d53bc <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CabinTemp",cabinTempStr);
   d5464:	498e      	ldr	r1, [pc, #568]	; (d56a0 <setup+0x2c8>)
   d5466:	488f      	ldr	r0, [pc, #572]	; (d56a4 <setup+0x2cc>)
   d5468:	f7ff ffac 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("VentTemp",ventTempStr);
   d546c:	498e      	ldr	r1, [pc, #568]	; (d56a8 <setup+0x2d0>)
   d546e:	488f      	ldr	r0, [pc, #572]	; (d56ac <setup+0x2d4>)
   d5470:	f7ff ffa8 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OutsideTemp",outsideTempStr);
   d5474:	498e      	ldr	r1, [pc, #568]	; (d56b0 <setup+0x2d8>)
   d5476:	488f      	ldr	r0, [pc, #572]	; (d56b4 <setup+0x2dc>)
   d5478:	f7ff ffa4 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d547c:	498e      	ldr	r1, [pc, #568]	; (d56b8 <setup+0x2e0>)
   d547e:	488f      	ldr	r0, [pc, #572]	; (d56bc <setup+0x2e4>)
   d5480:	f7ff ffa0 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5484:	498e      	ldr	r1, [pc, #568]	; (d56c0 <setup+0x2e8>)
   d5486:	488f      	ldr	r0, [pc, #572]	; (d56c4 <setup+0x2ec>)
   d5488:	f7ff ff98 	bl	d53bc <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d548c:	498e      	ldr	r1, [pc, #568]	; (d56c8 <setup+0x2f0>)
   d548e:	488f      	ldr	r0, [pc, #572]	; (d56cc <setup+0x2f4>)
   d5490:	f7ff ff94 	bl	d53bc <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d5494:	498e      	ldr	r1, [pc, #568]	; (d56d0 <setup+0x2f8>)
   d5496:	488f      	ldr	r0, [pc, #572]	; (d56d4 <setup+0x2fc>)
   d5498:	f7ff ff94 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d549c:	498e      	ldr	r1, [pc, #568]	; (d56d8 <setup+0x300>)
   d549e:	488f      	ldr	r0, [pc, #572]	; (d56dc <setup+0x304>)
   d54a0:	f7ff ff90 	bl	d53c4 <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d54a4:	498e      	ldr	r1, [pc, #568]	; (d56e0 <setup+0x308>)
   d54a6:	488f      	ldr	r0, [pc, #572]	; (d56e4 <setup+0x30c>)
   d54a8:	f7ff ff90 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d54ac:	498e      	ldr	r1, [pc, #568]	; (d56e8 <setup+0x310>)
   d54ae:	488f      	ldr	r0, [pc, #572]	; (d56ec <setup+0x314>)
   d54b0:	f7ff ff8c 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d54b4:	498e      	ldr	r1, [pc, #568]	; (d56f0 <setup+0x318>)
   d54b6:	488f      	ldr	r0, [pc, #572]	; (d56f4 <setup+0x31c>)
   d54b8:	f7ff ff88 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d54bc:	498e      	ldr	r1, [pc, #568]	; (d56f8 <setup+0x320>)
   d54be:	488f      	ldr	r0, [pc, #572]	; (d56fc <setup+0x324>)
   d54c0:	f7ff ff84 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d54c4:	498e      	ldr	r1, [pc, #568]	; (d5700 <setup+0x328>)
   d54c6:	488f      	ldr	r0, [pc, #572]	; (d5704 <setup+0x32c>)
   d54c8:	f7ff ff80 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d54cc:	498e      	ldr	r1, [pc, #568]	; (d5708 <setup+0x330>)
   d54ce:	488f      	ldr	r0, [pc, #572]	; (d570c <setup+0x334>)
   d54d0:	f7ff ff7c 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SampleInterval",setSampleInterval);
   d54d4:	498e      	ldr	r1, [pc, #568]	; (d5710 <setup+0x338>)
   d54d6:	486f      	ldr	r0, [pc, #444]	; (d5694 <setup+0x2bc>)
   d54d8:	f7ff ff78 	bl	d53cc <_ZN10CloudClass8functionIA15_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d54dc:	488d      	ldr	r0, [pc, #564]	; (d5714 <setup+0x33c>)
   d54de:	f000 fb17 	bl	d5b10 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54e2:	4621      	mov	r1, r4
   d54e4:	2301      	movs	r3, #1
   d54e6:	f10d 020b 	add.w	r2, sp, #11
   d54ea:	488a      	ldr	r0, [pc, #552]	; (d5714 <setup+0x33c>)
   d54ec:	f000 fb52 	bl	d5b94 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d54f0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d54f4:	2901      	cmp	r1, #1
   d54f6:	d019      	beq.n	d552c <setup+0x154>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d54f8:	4886      	ldr	r0, [pc, #536]	; (d5714 <setup+0x33c>)
   d54fa:	f000 fb13 	bl	d5b24 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d54fe:	2304      	movs	r3, #4
   d5500:	4a85      	ldr	r2, [pc, #532]	; (d5718 <setup+0x340>)
   d5502:	4884      	ldr	r0, [pc, #528]	; (d5714 <setup+0x33c>)
   d5504:	4621      	mov	r1, r4
   d5506:	f000 fb9b 	bl	d5c40 <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d550a:	2301      	movs	r3, #1
   d550c:	f10d 020b 	add.w	r2, sp, #11
   d5510:	4621      	mov	r1, r4
   d5512:	4880      	ldr	r0, [pc, #512]	; (d5714 <setup+0x33c>)
   d5514:	f000 fb3e 	bl	d5b94 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5518:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d551c:	2b01      	cmp	r3, #1
   d551e:	d002      	beq.n	d5526 <setup+0x14e>
   d5520:	2301      	movs	r3, #1
   d5522:	703b      	strb	r3, [r7, #0]
   d5524:	e007      	b.n	d5536 <setup+0x15e>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5526:	f7ff feb7 	bl	d5298 <_Z18loadSystemDefaultsv>
   d552a:	e004      	b.n	d5536 <setup+0x15e>
   d552c:	2320      	movs	r3, #32
   d552e:	462a      	mov	r2, r5
   d5530:	4878      	ldr	r0, [pc, #480]	; (d5714 <setup+0x33c>)
   d5532:	f000 fb2f 	bl	d5b94 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5536:	ae28      	add	r6, sp, #160	; 0xa0
   d5538:	2400      	movs	r4, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d553a:	f7ff fee7 	bl	d530c <_Z17checkSystemValuesv>

  getBatteryContext();                                                // See if we have enought juice
   d553e:	f7ff fc81 	bl	d4e44 <_Z17getBatteryContextv>
   d5542:	f846 4d94 	str.w	r4, [r6, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5546:	4622      	mov	r2, r4
   d5548:	4621      	mov	r1, r4
   d554a:	4630      	mov	r0, r6
   d554c:	f002 fc28 	bl	d7da0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5550:	9b03      	ldr	r3, [sp, #12]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5552:	2b14      	cmp	r3, #20
   d5554:	f000 8084 	beq.w	d5660 <setup+0x288>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5558:	4622      	mov	r2, r4
   d555a:	4621      	mov	r1, r4
   d555c:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d555e:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5560:	f002 fc1e 	bl	d7da0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5564:	9b03      	ldr	r3, [sp, #12]
   d5566:	2b8c      	cmp	r3, #140	; 0x8c
   d5568:	d07a      	beq.n	d5660 <setup+0x288>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d556a:	79ab      	ldrb	r3, [r5, #6]
   d556c:	4a6b      	ldr	r2, [pc, #428]	; (d571c <setup+0x344>)
   d556e:	4848      	ldr	r0, [pc, #288]	; (d5690 <setup+0x2b8>)
   d5570:	210c      	movs	r1, #12
   d5572:	f002 ff4d 	bl	d8410 <snprintf>

  rtc.setup();                                                        // Start the real time clock
   d5576:	486a      	ldr	r0, [pc, #424]	; (d5720 <setup+0x348>)
   d5578:	f000 fe0e 	bl	d6198 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d557c:	2100      	movs	r1, #0
   d557e:	4868      	ldr	r0, [pc, #416]	; (d5720 <setup+0x348>)
   d5580:	f000 ff5f 	bl	d6442 <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5584:	ed95 0a06 	vldr	s0, [r5, #24]
   d5588:	f004 fa92 	bl	d9ab0 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d558c:	f004 fb7a 	bl	d9c84 <_ZN9TimeClass7isValidEv>
   d5590:	b920      	cbnz	r0, d559c <setup+0x1c4>
   d5592:	4863      	ldr	r0, [pc, #396]	; (d5720 <setup+0x348>)
   d5594:	f000 fdf0 	bl	d6178 <_ZNK8MCP7941010getRTCTimeEv>
   d5598:	f004 fab4 	bl	d9b04 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d559c:	f7ff fa8a 	bl	d4ab4 <_Z8isDSTusav>
   d55a0:	b110      	cbz	r0, d55a8 <setup+0x1d0>
   d55a2:	f004 fa9f 	bl	d9ae4 <_ZN9TimeClass8beginDSTEv>
   d55a6:	e001      	b.n	d55ac <setup+0x1d4>
   d55a8:	f004 faa6 	bl	d9af8 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d55ac:	ed95 0a05 	vldr	s0, [r5, #20]
   d55b0:	f004 fa62 	bl	d9a78 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d55b4:	f004 fa52 	bl	d9a5c <_ZN9TimeClass5localEv>
   d55b8:	4604      	mov	r4, r0
   d55ba:	f004 fb84 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d55be:	1a20      	subs	r0, r4, r0
   d55c0:	f005 f8e4 	bl	da78c <__aeabi_i2d>
   d55c4:	a32a      	add	r3, pc, #168	; (adr r3, d5670 <setup+0x298>)
   d55c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55ca:	f005 fa6f 	bl	daaac <__aeabi_ddiv>
   d55ce:	4a55      	ldr	r2, [pc, #340]	; (d5724 <setup+0x34c>)
   d55d0:	e9cd 0100 	strd	r0, r1, [sp]
   d55d4:	210a      	movs	r1, #10
   d55d6:	483e      	ldr	r0, [pc, #248]	; (d56d0 <setup+0x2f8>)
   d55d8:	f002 ff1a 	bl	d8410 <snprintf>
   d55dc:	2330      	movs	r3, #48	; 0x30
   d55de:	4a52      	ldr	r2, [pc, #328]	; (d5728 <setup+0x350>)
   d55e0:	484c      	ldr	r0, [pc, #304]	; (d5714 <setup+0x33c>)
   d55e2:	2150      	movs	r1, #80	; 0x50
   d55e4:	f000 fad6 	bl	d5b94 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d55e8:	f004 fb74 	bl	d9cd4 <_ZN9TimeClass4hourEv>
   d55ec:	4b4f      	ldr	r3, [pc, #316]	; (d572c <setup+0x354>)
   d55ee:	6018      	str	r0, [r3, #0]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d55f0:	f7ff f914 	bl	d481c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d55f4:	2004      	movs	r0, #4
   d55f6:	f004 fdb7 	bl	da168 <digitalRead>
   d55fa:	b908      	cbnz	r0, d5600 <setup+0x228>
   d55fc:	f7ff fe4c 	bl	d5298 <_Z18loadSystemDefaultsv>

  ds18b20.resetsearch();                 // initialise for sensor search
   d5600:	484b      	ldr	r0, [pc, #300]	; (d5730 <setup+0x358>)
   d5602:	f000 f989 	bl	d5918 <_ZN7DS18B2011resetsearchEv>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addresses
    ds18b20.search(sensorAddresses[i]); // and if available store
   d5606:	494b      	ldr	r1, [pc, #300]	; (d5734 <setup+0x35c>)
   d5608:	4849      	ldr	r0, [pc, #292]	; (d5730 <setup+0x358>)
   d560a:	f000 f96a 	bl	d58e2 <_ZN7DS18B206searchEPh>
   d560e:	494a      	ldr	r1, [pc, #296]	; (d5738 <setup+0x360>)
   d5610:	4847      	ldr	r0, [pc, #284]	; (d5730 <setup+0x358>)
   d5612:	f000 f966 	bl	d58e2 <_ZN7DS18B206searchEPh>
   d5616:	4949      	ldr	r1, [pc, #292]	; (d573c <setup+0x364>)
   d5618:	4845      	ldr	r0, [pc, #276]	; (d5730 <setup+0x358>)
   d561a:	f000 f962 	bl	d58e2 <_ZN7DS18B206searchEPh>
	 * On some devices (Electron, Argon, and Xenon), there is an optional Wire1.
	 *
	 * @param addr The I2C address to use. This is optional, and the default is 0x42.
	 * The address can be reprogrammed in software on the u-blox GPS, but 0x42 is the default.
	 */
	AssetTracker &withI2C(TwoWire &wire = Wire, uint8_t addr = 0x42);
   d561e:	f004 fdd1 	bl	da1c4 <_Z19__fetch_global_Wirev>
  }

  t.withI2C();
   d5622:	2242      	movs	r2, #66	; 0x42
   d5624:	4601      	mov	r1, r0
   d5626:	4846      	ldr	r0, [pc, #280]	; (d5740 <setup+0x368>)
   d5628:	f001 fdc8 	bl	d71bc <_ZN12AssetTracker7withI2CER7TwoWireh>
  // Run in threaded mode - this eliminates the need to read Serial1 from loop or updateGPS() and dramatically
	// lowers the risk of lost or corrupted GPS data caused by blocking loop for too long and overflowing the
	// 64-byte serial buffer.
	t.startThreadedMode();
   d562c:	4844      	ldr	r0, [pc, #272]	; (d5740 <setup+0x368>)
   d562e:	f001 fd79 	bl	d7124 <_ZN12AssetTracker17startThreadedModeEv>
   d5632:	f002 fbd5 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d5636:	4b43      	ldr	r3, [pc, #268]	; (d5744 <setup+0x36c>)
   d5638:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d563a:	4b43      	ldr	r3, [pc, #268]	; (d5748 <setup+0x370>)
   d563c:	2201      	movs	r2, #1
   d563e:	701a      	strb	r2, [r3, #0]


  // Here is where the code diverges based on why we are running Setup()
 
  connectToParticle();
   d5640:	f7ff f91c 	bl	d487c <_Z17connectToParticlev>
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5644:	783b      	ldrb	r3, [r7, #0]
   d5646:	b913      	cbnz	r3, d564e <setup+0x276>
   d5648:	4b10      	ldr	r3, [pc, #64]	; (d568c <setup+0x2b4>)
   d564a:	2202      	movs	r2, #2
   d564c:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d564e:	2100      	movs	r1, #0
   d5650:	2007      	movs	r0, #7
   d5652:	f004 fd70 	bl	da136 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5656:	a804      	add	r0, sp, #16
   d5658:	f004 f887 	bl	d976a <_ZN6StringD1Ev>
  connectToParticle();
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d565c:	b029      	add	sp, #164	; 0xa4
   d565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  checkSystemValues();                                                // Make sure System values are all in valid range

  getBatteryContext();                                                // See if we have enought juice

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5660:	692b      	ldr	r3, [r5, #16]
   d5662:	3301      	adds	r3, #1
   d5664:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5666:	4b39      	ldr	r3, [pc, #228]	; (d574c <setup+0x374>)
   d5668:	2201      	movs	r2, #1
   d566a:	701a      	strb	r2, [r3, #0]
   d566c:	e77d      	b.n	d556a <setup+0x192>
   d566e:	bf00      	nop
   d5670:	00000000 	.word	0x00000000
   d5674:	40ac2000 	.word	0x40ac2000
   d5678:	000d40cd 	.word	0x000d40cd
   d567c:	000d42f9 	.word	0x000d42f9
   d5680:	2003df6c 	.word	0x2003df6c
   d5684:	000dcdff 	.word	0x000dcdff
   d5688:	2003e04c 	.word	0x2003e04c
   d568c:	2003defe 	.word	0x2003defe
   d5690:	2003ddd9 	.word	0x2003ddd9
   d5694:	000dce06 	.word	0x000dce06
   d5698:	2003e05c 	.word	0x2003e05c
   d569c:	000dce15 	.word	0x000dce15
   d56a0:	2003ddcd 	.word	0x2003ddcd
   d56a4:	000dce20 	.word	0x000dce20
   d56a8:	2003dd40 	.word	0x2003dd40
   d56ac:	000dce2a 	.word	0x000dce2a
   d56b0:	2003ddbc 	.word	0x2003ddbc
   d56b4:	000dce33 	.word	0x000dce33
   d56b8:	2003ddc8 	.word	0x2003ddc8
   d56bc:	000dce3f 	.word	0x000dce3f
   d56c0:	2003e054 	.word	0x2003e054
   d56c4:	000dce47 	.word	0x000dce47
   d56c8:	2003dfd8 	.word	0x2003dfd8
   d56cc:	000dce52 	.word	0x000dce52
   d56d0:	2003deac 	.word	0x2003deac
   d56d4:	000dce59 	.word	0x000dce59
   d56d8:	2003dee6 	.word	0x2003dee6
   d56dc:	000dce64 	.word	0x000dce64
   d56e0:	000d4121 	.word	0x000d4121
   d56e4:	000dce73 	.word	0x000dce73
   d56e8:	000d438d 	.word	0x000d438d
   d56ec:	000dce7d 	.word	0x000dce7d
   d56f0:	000d413d 	.word	0x000d413d
   d56f4:	000dce87 	.word	0x000dce87
   d56f8:	000d43d5 	.word	0x000d43d5
   d56fc:	000dce8f 	.word	0x000dce8f
   d5700:	000d4469 	.word	0x000d4469
   d5704:	000dce9c 	.word	0x000dce9c
   d5708:	000d4af9 	.word	0x000d4af9
   d570c:	000dcea9 	.word	0x000dcea9
   d5710:	000d4581 	.word	0x000d4581
   d5714:	2003deb8 	.word	0x2003deb8
   d5718:	000dcf30 	.word	0x000dcf30
   d571c:	000dcbd2 	.word	0x000dcbd2
   d5720:	2003dec8 	.word	0x2003dec8
   d5724:	000dcb98 	.word	0x000dcb98
   d5728:	2003dfc0 	.word	0x2003dfc0
   d572c:	2003df04 	.word	0x2003df04
   d5730:	2003dff4 	.word	0x2003dff4
   d5734:	2003f400 	.word	0x2003f400
   d5738:	2003f408 	.word	0x2003f408
   d573c:	2003f410 	.word	0x2003f410
   d5740:	2003df08 	.word	0x2003df08
   d5744:	2003dfac 	.word	0x2003dfac
   d5748:	2003df64 	.word	0x2003df64
   d574c:	2003defd 	.word	0x2003defd

000d5750 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5750:	4b43      	ldr	r3, [pc, #268]	; (d5860 <_GLOBAL__sub_I___appProductID+0x110>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d5752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5756:	2400      	movs	r4, #0
   d5758:	601c      	str	r4, [r3, #0]
   d575a:	4b42      	ldr	r3, [pc, #264]	; (d5864 <_GLOBAL__sub_I___appProductID+0x114>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d575c:	4e42      	ldr	r6, [pc, #264]	; (d5868 <_GLOBAL__sub_I___appProductID+0x118>)

// Pin Constants - Sensors
const int tempSensors =   A3;                      // PThree on-wire temp sensors on this pin (pulled up to VCC via 10k)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d575e:	4d43      	ldr	r5, [pc, #268]	; (d586c <_GLOBAL__sub_I___appProductID+0x11c>)
   d5760:	2701      	movs	r7, #1
   d5762:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5764:	f002 fb74 	bl	d7e50 <HAL_Pin_Map>
   d5768:	4b41      	ldr	r3, [pc, #260]	; (d5870 <_GLOBAL__sub_I___appProductID+0x120>)
   d576a:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d576c:	f004 fc84 	bl	da078 <spark_protocol_instance>
   d5770:	4623      	mov	r3, r4
   d5772:	4622      	mov	r2, r4
   d5774:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5778:	f004 fc86 	bl	da088 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d577c:	f004 fc7c 	bl	da078 <spark_protocol_instance>
   d5780:	4622      	mov	r2, r4
   d5782:	4623      	mov	r3, r4
   d5784:	2102      	movs	r1, #2
   d5786:	f004 fc87 	bl	da098 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d578a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d578e:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5790:	6034      	str	r4, [r6, #0]
   d5792:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5794:	71b4      	strb	r4, [r6, #6]
   d5796:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5798:	2002      	movs	r0, #2
   d579a:	f002 fcfb 	bl	d8194 <set_system_mode>
   d579e:	462a      	mov	r2, r5
   d57a0:	4934      	ldr	r1, [pc, #208]	; (d5874 <_GLOBAL__sub_I___appProductID+0x124>)
   d57a2:	4630      	mov	r0, r6
   d57a4:	f004 fd34 	bl	da210 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57a8:	4e33      	ldr	r6, [pc, #204]	; (d5878 <_GLOBAL__sub_I___appProductID+0x128>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d57aa:	4621      	mov	r1, r4
   d57ac:	4638      	mov	r0, r7
   d57ae:	f002 fd09 	bl	d81c4 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d57b2:	4639      	mov	r1, r7
   d57b4:	2004      	movs	r0, #4
   d57b6:	f002 fae3 	bl	d7d80 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57ba:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57be:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57c0:	4642      	mov	r2, r8
   d57c2:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d57c4:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57c6:	f005 fda9 	bl	db31c <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d57ca:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d57cc:	462a      	mov	r2, r5
   d57ce:	492b      	ldr	r1, [pc, #172]	; (d587c <_GLOBAL__sub_I___appProductID+0x12c>)
   d57d0:	80f3      	strh	r3, [r6, #6]
   d57d2:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d57d4:	7537      	strb	r7, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d57d6:	f8a6 8004 	strh.w	r8, [r6, #4]
   d57da:	f004 fd19 	bl	da210 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d57de:	f004 fcf1 	bl	da1c4 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d57e2:	4e27      	ldr	r6, [pc, #156]	; (d5880 <_GLOBAL__sub_I___appProductID+0x130>)
   d57e4:	4601      	mov	r1, r0
   d57e6:	4630      	mov	r0, r6
   d57e8:	f000 fc14 	bl	d6014 <_ZN8MCP79410C1ER7TwoWire>
   d57ec:	462a      	mov	r2, r5
   d57ee:	4925      	ldr	r1, [pc, #148]	; (d5884 <_GLOBAL__sub_I___appProductID+0x134>)
   d57f0:	4630      	mov	r0, r6
   d57f2:	f004 fd0d 	bl	da210 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d57f6:	f004 fce5 	bl	da1c4 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d57fa:	4e23      	ldr	r6, [pc, #140]	; (d5888 <_GLOBAL__sub_I___appProductID+0x138>)
   d57fc:	4623      	mov	r3, r4
   d57fe:	4601      	mov	r1, r0
   d5800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5804:	4630      	mov	r0, r6
   d5806:	f000 f979 	bl	d5afc <_ZN6MB85RCC1ER7TwoWireji>
   d580a:	4b20      	ldr	r3, [pc, #128]	; (d588c <_GLOBAL__sub_I___appProductID+0x13c>)
   d580c:	6033      	str	r3, [r6, #0]
   d580e:	4630      	mov	r0, r6
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5810:	4e1f      	ldr	r6, [pc, #124]	; (d5890 <_GLOBAL__sub_I___appProductID+0x140>)
   d5812:	4920      	ldr	r1, [pc, #128]	; (d5894 <_GLOBAL__sub_I___appProductID+0x144>)
   d5814:	462a      	mov	r2, r5
   d5816:	f004 fcfb 	bl	da210 <__aeabi_atexit>
   d581a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d581e:	491e      	ldr	r1, [pc, #120]	; (d5898 <_GLOBAL__sub_I___appProductID+0x148>)
   d5820:	4630      	mov	r0, r6
   d5822:	f001 fb01 	bl	d6e28 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5826:	4b1d      	ldr	r3, [pc, #116]	; (d589c <_GLOBAL__sub_I___appProductID+0x14c>)
   d5828:	6033      	str	r3, [r6, #0]
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d582a:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d582c:	4e1c      	ldr	r6, [pc, #112]	; (d58a0 <_GLOBAL__sub_I___appProductID+0x150>)
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d582e:	491d      	ldr	r1, [pc, #116]	; (d58a4 <_GLOBAL__sub_I___appProductID+0x154>)
   d5830:	462a      	mov	r2, r5
   d5832:	f004 fced 	bl	da210 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d5836:	4622      	mov	r2, r4
   d5838:	4641      	mov	r1, r8
AssetTracker t;
   d583a:	4c1b      	ldr	r4, [pc, #108]	; (d58a8 <_GLOBAL__sub_I___appProductID+0x158>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
   d583c:	4630      	mov	r0, r6
   d583e:	f000 f839 	bl	d58b4 <_ZN7DS18B20C1Etb>
   d5842:	462a      	mov	r2, r5
   d5844:	4919      	ldr	r1, [pc, #100]	; (d58ac <_GLOBAL__sub_I___appProductID+0x15c>)
   d5846:	4630      	mov	r0, r6
   d5848:	f004 fce2 	bl	da210 <__aeabi_atexit>
AssetTracker t;
   d584c:	4620      	mov	r0, r4
   d584e:	f001 fc4b 	bl	d70e8 <_ZN12AssetTrackerC1Ev>
   d5852:	462a      	mov	r2, r5
   d5854:	4620      	mov	r0, r4
   d5856:	4916      	ldr	r1, [pc, #88]	; (d58b0 <_GLOBAL__sub_I___appProductID+0x160>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d5858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
AssetTracker t;
   d585c:	f004 bcd8 	b.w	da210 <__aeabi_atexit>
   d5860:	2003df54 	.word	0x2003df54
   d5864:	2003dee4 	.word	0x2003dee4
   d5868:	2003df58 	.word	0x2003df58
   d586c:	2003dea8 	.word	0x2003dea8
   d5870:	2003df68 	.word	0x2003df68
   d5874:	000d41a9 	.word	0x000d41a9
   d5878:	2003df3c 	.word	0x2003df3c
   d587c:	000d40d9 	.word	0x000d40d9
   d5880:	2003dec8 	.word	0x2003dec8
   d5884:	000d5d87 	.word	0x000d5d87
   d5888:	2003deb8 	.word	0x2003deb8
   d588c:	000dca94 	.word	0x000dca94
   d5890:	2003e010 	.word	0x2003e010
   d5894:	000d4181 	.word	0x000d4181
   d5898:	2003f418 	.word	0x2003f418
   d589c:	000dcab0 	.word	0x000dcab0
   d58a0:	2003dff4 	.word	0x2003dff4
   d58a4:	000d4159 	.word	0x000d4159
   d58a8:	2003df08 	.word	0x2003df08
   d58ac:	000d5909 	.word	0x000d5909
   d58b0:	000d70b1 	.word	0x000d70b1

000d58b4 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d58b4:	b570      	push	{r4, r5, r6, lr}
   d58b6:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d58b8:	2300      	movs	r3, #0
   d58ba:	6063      	str	r3, [r4, #4]
   d58bc:	60a3      	str	r3, [r4, #8]
   d58be:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d58c0:	6123      	str	r3, [r4, #16]
   d58c2:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d58c4:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d58c6:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d58c8:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d58ca:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d58cc:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d58ce:	f7fe fbe4 	bl	d409a <_Znwj>
   d58d2:	4605      	mov	r5, r0
   d58d4:	b110      	cbz	r0, d58dc <_ZN7DS18B20C1Etb+0x28>
   d58d6:	4631      	mov	r1, r6
   d58d8:	f000 ff32 	bl	d6740 <_ZN7OneWireC1Et>
   d58dc:	6025      	str	r5, [r4, #0]
}
   d58de:	4620      	mov	r0, r4
   d58e0:	bd70      	pop	{r4, r5, r6, pc}

000d58e2 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d58e2:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d58e4:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d58e8:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d58ea:	6800      	ldr	r0, [r0, #0]
   d58ec:	4629      	mov	r1, r5
   d58ee:	f001 f81b 	bl	d6928 <_ZN7OneWire6searchEPh>
   d58f2:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d58f4:	bf1d      	ittte	ne
   d58f6:	682b      	ldrne	r3, [r5, #0]
   d58f8:	6023      	strne	r3, [r4, #0]
   d58fa:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d58fc:	6023      	streq	r3, [r4, #0]
   d58fe:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d5900:	bf14      	ite	ne
   d5902:	2001      	movne	r0, #1
   d5904:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d5906:	bd38      	pop	{r3, r4, r5, pc}

000d5908 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d5908:	b510      	push	{r4, lr}
{
  delete(ds);
   d590a:	210e      	movs	r1, #14
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d590c:	4604      	mov	r4, r0
{
  delete(ds);
   d590e:	6800      	ldr	r0, [r0, #0]
   d5910:	f004 fc83 	bl	da21a <_ZdlPvj>
}
   d5914:	4620      	mov	r0, r4
   d5916:	bd10      	pop	{r4, pc}

000d5918 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d5918:	6800      	ldr	r0, [r0, #0]
   d591a:	f000 bff9 	b.w	d6910 <_ZN7OneWire12reset_searchEv>
	...

000d5920 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d5920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d5922:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d5924:	4604      	mov	r4, r0
   d5926:	460d      	mov	r5, r1
   d5928:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d592a:	b91b      	cbnz	r3, d5934 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d592c:	780b      	ldrb	r3, [r1, #0]
   d592e:	2b00      	cmp	r3, #0
   d5930:	f000 80a6 	beq.w	d5a80 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d5934:	6820      	ldr	r0, [r4, #0]
   d5936:	f000 ff0d 	bl	d6754 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d593a:	7ea3      	ldrb	r3, [r4, #26]
   d593c:	b123      	cbz	r3, d5948 <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d593e:	b91e      	cbnz	r6, d5948 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d5940:	6820      	ldr	r0, [r4, #0]
   d5942:	f000 ffe1 	bl	d6908 <_ZN7OneWire4skipEv>
   d5946:	e003      	b.n	d5950 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d5948:	4629      	mov	r1, r5
   d594a:	6820      	ldr	r0, [r4, #0]
   d594c:	f000 ffca 	bl	d68e4 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d5950:	2200      	movs	r2, #0
   d5952:	2144      	movs	r1, #68	; 0x44
   d5954:	6820      	ldr	r0, [r4, #0]
   d5956:	f000 ff92 	bl	d687e <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d595a:	f240 20ee 	movw	r0, #750	; 0x2ee
   d595e:	f002 fd7f 	bl	d8460 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d5962:	6820      	ldr	r0, [r4, #0]
   d5964:	f000 fef6 	bl	d6754 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d5968:	7ea3      	ldrb	r3, [r4, #26]
   d596a:	b123      	cbz	r3, d5976 <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d596c:	b91e      	cbnz	r6, d5976 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d596e:	6820      	ldr	r0, [r4, #0]
   d5970:	f000 ffca 	bl	d6908 <_ZN7OneWire4skipEv>
   d5974:	e003      	b.n	d597e <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d5976:	4629      	mov	r1, r5
   d5978:	6820      	ldr	r0, [r4, #0]
   d597a:	f000 ffb3 	bl	d68e4 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d597e:	2200      	movs	r2, #0
   d5980:	21be      	movs	r1, #190	; 0xbe
   d5982:	6820      	ldr	r0, [r4, #0]
   d5984:	f000 ff7b 	bl	d687e <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d5988:	782b      	ldrb	r3, [r5, #0]
   d598a:	2b26      	cmp	r3, #38	; 0x26
   d598c:	d104      	bne.n	d5998 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d598e:	2200      	movs	r2, #0
   d5990:	4611      	mov	r1, r2
   d5992:	6820      	ldr	r0, [r4, #0]
   d5994:	f000 ff73 	bl	d687e <_ZN7OneWire5writeEhh>
   d5998:	1ce6      	adds	r6, r4, #3
   d599a:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d599e:	6820      	ldr	r0, [r4, #0]
   d59a0:	f000 ff90 	bl	d68c4 <_ZN7OneWire4readEv>
   d59a4:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d59a8:	42be      	cmp	r6, r7
   d59aa:	d1f8      	bne.n	d599e <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d59ac:	2108      	movs	r1, #8
   d59ae:	1d20      	adds	r0, r4, #4
   d59b0:	f001 f835 	bl	d6a1e <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d59b4:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d59b6:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d59b8:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d59ba:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d59bc:	d160      	bne.n	d5a80 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d59be:	782b      	ldrb	r3, [r5, #0]
   d59c0:	2b22      	cmp	r3, #34	; 0x22
   d59c2:	d019      	beq.n	d59f8 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d59c4:	d814      	bhi.n	d59f0 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d59c6:	2b10      	cmp	r3, #16
   d59c8:	d15a      	bne.n	d5a80 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d59ca:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d59cc:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d59ce:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d59d0:	bf08      	it	eq
   d59d2:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d59d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d59d8:	bf02      	ittt	eq
   d59da:	f023 030f 	biceq.w	r3, r3, #15
   d59de:	f1c2 020c 	rsbeq	r2, r2, #12
   d59e2:	189b      	addeq	r3, r3, r2
   d59e4:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d59e6:	ee00 3a10 	vmov	s0, r3
   d59ea:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d59ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d59f0:	2b26      	cmp	r3, #38	; 0x26
   d59f2:	d01f      	beq.n	d5a34 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d59f4:	2b28      	cmp	r3, #40	; 0x28
   d59f6:	d143      	bne.n	d5a80 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d59f8:	7a22      	ldrb	r2, [r4, #8]
   d59fa:	7923      	ldrb	r3, [r4, #4]
   d59fc:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d5a00:	2a20      	cmp	r2, #32
   d5a02:	d005      	beq.n	d5a10 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d5a04:	2a40      	cmp	r2, #64	; 0x40
   d5a06:	d006      	beq.n	d5a16 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d5a08:	b942      	cbnz	r2, d5a1c <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d5a0a:	f023 0307 	bic.w	r3, r3, #7
   d5a0e:	e004      	b.n	d5a1a <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d5a10:	f023 0303 	bic.w	r3, r3, #3
   d5a14:	e001      	b.n	d5a1a <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d5a16:	f023 0301 	bic.w	r3, r3, #1
   d5a1a:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d5a1c:	7923      	ldrb	r3, [r4, #4]
   d5a1e:	7960      	ldrb	r0, [r4, #5]
   d5a20:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5a24:	b200      	sxth	r0, r0
   d5a26:	f004 feb1 	bl	da78c <__aeabi_i2d>
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	4b16      	ldr	r3, [pc, #88]	; (d5a88 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d5a2e:	f004 ff13 	bl	da858 <__aeabi_dmul>
   d5a32:	e020      	b.n	d5a76 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d5a34:	79a5      	ldrb	r5, [r4, #6]
   d5a36:	4628      	mov	r0, r5
   d5a38:	f004 fea8 	bl	da78c <__aeabi_i2d>
   d5a3c:	4606      	mov	r6, r0
   d5a3e:	7960      	ldrb	r0, [r4, #5]
   d5a40:	10c0      	asrs	r0, r0, #3
   d5a42:	ee07 0a90 	vmov	s15, r0
   d5a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a4a:	460f      	mov	r7, r1
   d5a4c:	ee17 0a90 	vmov	r0, s15
   d5a50:	f004 feae 	bl	da7b0 <__aeabi_f2d>
   d5a54:	2200      	movs	r2, #0
   d5a56:	4b0d      	ldr	r3, [pc, #52]	; (d5a8c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d5a58:	f004 fefe 	bl	da858 <__aeabi_dmul>
   d5a5c:	460b      	mov	r3, r1
   d5a5e:	0629      	lsls	r1, r5, #24
   d5a60:	4602      	mov	r2, r0
   d5a62:	bf4c      	ite	mi
   d5a64:	490a      	ldrmi	r1, [pc, #40]	; (d5a90 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d5a66:	490b      	ldrpl	r1, [pc, #44]	; (d5a94 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d5a68:	2000      	movs	r0, #0
   d5a6a:	f004 fef5 	bl	da858 <__aeabi_dmul>
   d5a6e:	4632      	mov	r2, r6
   d5a70:	463b      	mov	r3, r7
   d5a72:	f004 fd3f 	bl	da4f4 <__adddf3>
   d5a76:	f005 f9e7 	bl	dae48 <__aeabi_d2f>
   d5a7a:	ee00 0a10 	vmov	s0, r0
      break;
   d5a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d5a80:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5a98 <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a86:	bf00      	nop
   d5a88:	3fb00000 	.word	0x3fb00000
   d5a8c:	3fa00000 	.word	0x3fa00000
   d5a90:	bff00000 	.word	0xbff00000
   d5a94:	3ff00000 	.word	0x3ff00000
   d5a98:	7fc00000 	.word	0x7fc00000
   d5a9c:	00000000 	.word	0x00000000

000d5aa0 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d5aa0:	b508      	push	{r3, lr}
  return celsius * 1.8 + 32.0;
   d5aa2:	ee10 0a10 	vmov	r0, s0
   d5aa6:	f004 fe83 	bl	da7b0 <__aeabi_f2d>
   d5aaa:	a308      	add	r3, pc, #32	; (adr r3, d5acc <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d5aac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ab0:	f004 fed2 	bl	da858 <__aeabi_dmul>
   d5ab4:	2200      	movs	r2, #0
   d5ab6:	4b04      	ldr	r3, [pc, #16]	; (d5ac8 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d5ab8:	f004 fd1c 	bl	da4f4 <__adddf3>
   d5abc:	f005 f9c4 	bl	dae48 <__aeabi_d2f>
}
   d5ac0:	ee00 0a10 	vmov	s0, r0
   d5ac4:	bd08      	pop	{r3, pc}
   d5ac6:	bf00      	nop
   d5ac8:	40400000 	.word	0x40400000
   d5acc:	cccccccd 	.word	0xcccccccd
   d5ad0:	3ffccccc 	.word	0x3ffccccc

000d5ad4 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d5ad4:	7e02      	ldrb	r2, [r0, #24]
   d5ad6:	7e40      	ldrb	r0, [r0, #25]
}
   d5ad8:	1a13      	subs	r3, r2, r0
   d5ada:	4258      	negs	r0, r3
   d5adc:	4158      	adcs	r0, r3
   d5ade:	4770      	bx	lr

000d5ae0 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d5ae0:	f002 b9b6 	b.w	d7e50 <HAL_Pin_Map>

000d5ae4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5ae4:	4770      	bx	lr

000d5ae6 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5ae6:	b510      	push	{r4, lr}
}
   d5ae8:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5aea:	4604      	mov	r4, r0
}
   d5aec:	f004 fb95 	bl	da21a <_ZdlPvj>
   d5af0:	4620      	mov	r0, r4
   d5af2:	bd10      	pop	{r4, pc}

000d5af4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5af4:	6803      	ldr	r3, [r0, #0]
   d5af6:	b2c9      	uxtb	r1, r1
   d5af8:	689b      	ldr	r3, [r3, #8]
   d5afa:	4718      	bx	r3

000d5afc <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5afc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5afe:	4d03      	ldr	r5, [pc, #12]	; (d5b0c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5b00:	6005      	str	r5, [r0, #0]
   d5b02:	6041      	str	r1, [r0, #4]
   d5b04:	6082      	str	r2, [r0, #8]
   d5b06:	60c3      	str	r3, [r0, #12]
}
   d5b08:	bd30      	pop	{r4, r5, pc}
   d5b0a:	bf00      	nop
   d5b0c:	000dcfb8 	.word	0x000dcfb8

000d5b10 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5b10:	6840      	ldr	r0, [r0, #4]
   d5b12:	f003 b99d 	b.w	d8e50 <_ZN7TwoWire5beginEv>

000d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5b16:	b510      	push	{r4, lr}
   d5b18:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5b1a:	6800      	ldr	r0, [r0, #0]
   d5b1c:	f003 f9e4 	bl	d8ee8 <_ZN7TwoWire6unlockEv>
   d5b20:	4620      	mov	r0, r4
   d5b22:	bd10      	pop	{r4, pc}

000d5b24 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b28:	b08a      	sub	sp, #40	; 0x28
   d5b2a:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5b2c:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b2e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5b30:	f003 f9d1 	bl	d8ed6 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5b34:	221e      	movs	r2, #30
   d5b36:	2100      	movs	r1, #0
   d5b38:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5b3a:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5b3c:	f005 fbee 	bl	db31c <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5b40:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5b42:	b1de      	cbz	r6, d5b7c <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5b44:	683b      	ldr	r3, [r7, #0]
   d5b46:	2e1e      	cmp	r6, #30
   d5b48:	46b0      	mov	r8, r6
   d5b4a:	bf28      	it	cs
   d5b4c:	f04f 081e 	movcs.w	r8, #30
   d5b50:	68dc      	ldr	r4, [r3, #12]
   d5b52:	aa02      	add	r2, sp, #8
   d5b54:	4643      	mov	r3, r8
   d5b56:	4629      	mov	r1, r5
   d5b58:	4638      	mov	r0, r7
   d5b5a:	47a0      	blx	r4
			if (!result) {
   d5b5c:	4604      	mov	r4, r0
   d5b5e:	b948      	cbnz	r0, d5b74 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5b60:	462a      	mov	r2, r5
   d5b62:	490a      	ldr	r1, [pc, #40]	; (d5b8c <_ZN6MB85RC5eraseEv+0x68>)
   d5b64:	480a      	ldr	r0, [pc, #40]	; (d5b90 <_ZN6MB85RC5eraseEv+0x6c>)
   d5b66:	f7fe fba2 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d5b6a:	a801      	add	r0, sp, #4
   d5b6c:	f7ff ffd3 	bl	d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5b70:	4620      	mov	r0, r4
   d5b72:	e007      	b.n	d5b84 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5b74:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5b78:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5b7a:	e7e2      	b.n	d5b42 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5b7c:	a801      	add	r0, sp, #4
   d5b7e:	f7ff ffca 	bl	d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5b82:	2001      	movs	r0, #1
}
   d5b84:	b00a      	add	sp, #40	; 0x28
   d5b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b8a:	bf00      	nop
   d5b8c:	000dcf34 	.word	0x000dcf34
   d5b90:	2003e298 	.word	0x2003e298

000d5b94 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b98:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b9a:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b9c:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b9e:	460e      	mov	r6, r1
   d5ba0:	4617      	mov	r7, r2
   d5ba2:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5ba4:	f003 f997 	bl	d8ed6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5ba8:	f1b8 0f00 	cmp.w	r8, #0
   d5bac:	d101      	bne.n	d5bb2 <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5bae:	2401      	movs	r4, #1
   d5bb0:	e03f      	b.n	d5c32 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5bb2:	68e1      	ldr	r1, [r4, #12]
   d5bb4:	6860      	ldr	r0, [r4, #4]
   d5bb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5bba:	f003 f981 	bl	d8ec0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5bbe:	0a31      	lsrs	r1, r6, #8
   d5bc0:	6860      	ldr	r0, [r4, #4]
   d5bc2:	f7ff ff97 	bl	d5af4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5bc6:	4631      	mov	r1, r6
   d5bc8:	6860      	ldr	r0, [r4, #4]
   d5bca:	f7ff ff93 	bl	d5af4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5bce:	2100      	movs	r1, #0
   d5bd0:	6860      	ldr	r0, [r4, #4]
   d5bd2:	f003 f978 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5bd6:	b108      	cbz	r0, d5bdc <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5bd8:	2400      	movs	r4, #0
   d5bda:	e02a      	b.n	d5c32 <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5bdc:	68e1      	ldr	r1, [r4, #12]
   d5bde:	6860      	ldr	r0, [r4, #4]
   d5be0:	f1b8 0f20 	cmp.w	r8, #32
   d5be4:	46c1      	mov	r9, r8
   d5be6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5bea:	bf28      	it	cs
   d5bec:	f04f 0920 	movcs.w	r9, #32
   d5bf0:	2301      	movs	r3, #1
   d5bf2:	464a      	mov	r2, r9
   d5bf4:	b2c9      	uxtb	r1, r1
   d5bf6:	f003 f94d 	bl	d8e94 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5bfa:	f004 fae3 	bl	da1c4 <_Z19__fetch_global_Wirev>
   d5bfe:	6803      	ldr	r3, [r0, #0]
   d5c00:	691b      	ldr	r3, [r3, #16]
   d5c02:	4798      	blx	r3
   d5c04:	4548      	cmp	r0, r9
   d5c06:	dbe7      	blt.n	d5bd8 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5c08:	463d      	mov	r5, r7
   d5c0a:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5c0e:	f004 fad9 	bl	da1c4 <_Z19__fetch_global_Wirev>
   d5c12:	6803      	ldr	r3, [r0, #0]
   d5c14:	695b      	ldr	r3, [r3, #20]
   d5c16:	4798      	blx	r3
   d5c18:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5c1c:	1bea      	subs	r2, r5, r7
   d5c1e:	ebc5 0308 	rsb	r3, r5, r8
   d5c22:	4591      	cmp	r9, r2
   d5c24:	eb05 060a 	add.w	r6, r5, sl
   d5c28:	443b      	add	r3, r7
   d5c2a:	d8f0      	bhi.n	d5c0e <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5c2c:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5c2e:	462f      	mov	r7, r5
   d5c30:	e7ba      	b.n	d5ba8 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5c32:	a801      	add	r0, sp, #4
   d5c34:	f7ff ff6f 	bl	d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5c38:	4620      	mov	r0, r4
   d5c3a:	b002      	add	sp, #8
   d5c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5c40 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5c44:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5c46:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c48:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5c4a:	460d      	mov	r5, r1
   d5c4c:	4690      	mov	r8, r2
   d5c4e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5c50:	f003 f941 	bl	d8ed6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5c54:	b34f      	cbz	r7, d5caa <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5c56:	68e1      	ldr	r1, [r4, #12]
   d5c58:	6860      	ldr	r0, [r4, #4]
   d5c5a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5c5e:	f003 f92f 	bl	d8ec0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5c62:	0a29      	lsrs	r1, r5, #8
   d5c64:	6860      	ldr	r0, [r4, #4]
   d5c66:	f7ff ff45 	bl	d5af4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5c6a:	4629      	mov	r1, r5
   d5c6c:	6860      	ldr	r0, [r4, #4]
   d5c6e:	f7ff ff41 	bl	d5af4 <_ZN7TwoWire5writeEj>
   d5c72:	f108 091e 	add.w	r9, r8, #30
   d5c76:	4646      	mov	r6, r8
   d5c78:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5c7c:	6860      	ldr	r0, [r4, #4]
   d5c7e:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5c82:	6803      	ldr	r3, [r0, #0]
   d5c84:	689b      	ldr	r3, [r3, #8]
   d5c86:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5c88:	45b1      	cmp	r9, r6
   d5c8a:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5c8e:	46b0      	mov	r8, r6
				dataLen--;
   d5c90:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5c94:	d001      	beq.n	d5c9a <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5c96:	2f00      	cmp	r7, #0
   d5c98:	d1f0      	bne.n	d5c7c <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5c9a:	2101      	movs	r1, #1
   d5c9c:	6860      	ldr	r0, [r4, #4]
   d5c9e:	f003 f912 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5ca2:	2800      	cmp	r0, #0
   d5ca4:	d0d6      	beq.n	d5c54 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5ca6:	2400      	movs	r4, #0
   d5ca8:	e000      	b.n	d5cac <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5caa:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5cac:	a801      	add	r0, sp, #4
   d5cae:	f7ff ff32 	bl	d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	b002      	add	sp, #8
   d5cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5cba <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5cba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5cbe:	b08b      	sub	sp, #44	; 0x2c
   d5cc0:	460e      	mov	r6, r1
   d5cc2:	4615      	mov	r5, r2
   d5cc4:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5cc6:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5cc8:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5cca:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5ccc:	f003 f903 	bl	d8ed6 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5cd0:	42ae      	cmp	r6, r5
   d5cd2:	d223      	bcs.n	d5d1c <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5cd4:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5cd6:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5cd8:	b90c      	cbnz	r4, d5cde <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5cda:	2401      	movs	r4, #1
   d5cdc:	e03f      	b.n	d5d5e <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5cde:	2c1e      	cmp	r4, #30
   d5ce0:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5ce2:	f8d8 3000 	ldr.w	r3, [r8]
   d5ce6:	bf28      	it	cs
   d5ce8:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5cea:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5cec:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5cf0:	aa02      	add	r2, sp, #8
   d5cf2:	463b      	mov	r3, r7
   d5cf4:	4631      	mov	r1, r6
   d5cf6:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5cf8:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5cfa:	47c8      	blx	r9
				if (!result) {
   d5cfc:	b908      	cbnz	r0, d5d02 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5cfe:	2400      	movs	r4, #0
   d5d00:	e02d      	b.n	d5d5e <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5d02:	f8d8 3000 	ldr.w	r3, [r8]
   d5d06:	aa02      	add	r2, sp, #8
   d5d08:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5d0c:	4629      	mov	r1, r5
   d5d0e:	463b      	mov	r3, r7
   d5d10:	4640      	mov	r0, r8
   d5d12:	47c8      	blx	r9
				if (!result) {
   d5d14:	2800      	cmp	r0, #0
   d5d16:	d0f2      	beq.n	d5cfe <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5d18:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5d1a:	e7dd      	b.n	d5cd8 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5d1c:	d9dd      	bls.n	d5cda <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5d1e:	2c00      	cmp	r4, #0
   d5d20:	d0db      	beq.n	d5cda <_ZN6MB85RC8moveDataEjjj+0x20>
   d5d22:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5d24:	f8d8 3000 	ldr.w	r3, [r8]
   d5d28:	4627      	mov	r7, r4
   d5d2a:	bf28      	it	cs
   d5d2c:	271e      	movcs	r7, #30
   d5d2e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5d32:	aa02      	add	r2, sp, #8
   d5d34:	463b      	mov	r3, r7
   d5d36:	4631      	mov	r1, r6
   d5d38:	4640      	mov	r0, r8
   d5d3a:	47c8      	blx	r9
				if (!result) {
   d5d3c:	2800      	cmp	r0, #0
   d5d3e:	d0de      	beq.n	d5cfe <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5d40:	f8d8 3000 	ldr.w	r3, [r8]
   d5d44:	aa02      	add	r2, sp, #8
   d5d46:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5d4a:	4629      	mov	r1, r5
   d5d4c:	463b      	mov	r3, r7
   d5d4e:	4640      	mov	r0, r8
   d5d50:	47c8      	blx	r9
				if (!result) {
   d5d52:	2800      	cmp	r0, #0
   d5d54:	d0d3      	beq.n	d5cfe <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5d56:	443e      	add	r6, r7
				framAddrTo += count;
   d5d58:	443d      	add	r5, r7
				numBytes -= count;
   d5d5a:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5d5c:	e7df      	b.n	d5d1e <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5d5e:	a801      	add	r0, sp, #4
   d5d60:	f7ff fed9 	bl	d5b16 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5d64:	4620      	mov	r0, r4
   d5d66:	b00b      	add	sp, #44	; 0x2c
   d5d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d6c <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5d6c:	f002 b870 	b.w	d7e50 <HAL_Pin_Map>

000d5d70 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5d70:	2040      	movs	r0, #64	; 0x40
   d5d72:	4770      	bx	lr

000d5d74 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5d74:	2000      	movs	r0, #0
   d5d76:	4770      	bx	lr

000d5d78 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5d78:	2080      	movs	r0, #128	; 0x80
   d5d7a:	4770      	bx	lr

000d5d7c <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5d7c:	20ff      	movs	r0, #255	; 0xff
   d5d7e:	4770      	bx	lr

000d5d80 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5d80:	4770      	bx	lr

000d5d82 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5d82:	4770      	bx	lr

000d5d84 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5d84:	4770      	bx	lr

000d5d86 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5d86:	4770      	bx	lr

000d5d88 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5d88:	b510      	push	{r4, lr}

}
   d5d8a:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5d8c:	4604      	mov	r4, r0

}
   d5d8e:	f004 fa44 	bl	da21a <_ZdlPvj>
   d5d92:	4620      	mov	r0, r4
   d5d94:	bd10      	pop	{r4, pc}

000d5d96 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5d96:	b510      	push	{r4, lr}

}
   d5d98:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5d9a:	4604      	mov	r4, r0

}
   d5d9c:	f004 fa3d 	bl	da21a <_ZdlPvj>
   d5da0:	4620      	mov	r0, r4
   d5da2:	bd10      	pop	{r4, pc}

000d5da4 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5da4:	b510      	push	{r4, lr}

}
   d5da6:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5da8:	4604      	mov	r4, r0

}
   d5daa:	f004 fa36 	bl	da21a <_ZdlPvj>
   d5dae:	4620      	mov	r0, r4
   d5db0:	bd10      	pop	{r4, pc}

000d5db2 <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5db2:	b510      	push	{r4, lr}

}
   d5db4:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5db6:	4604      	mov	r4, r0

}
   d5db8:	f004 fa2f 	bl	da21a <_ZdlPvj>
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd10      	pop	{r4, pc}

000d5dc0 <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5dc4:	6803      	ldr	r3, [r0, #0]
   d5dc6:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5dc8:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5dca:	4798      	blx	r3
   d5dcc:	2210      	movs	r2, #16
   d5dce:	4601      	mov	r1, r0
   d5dd0:	4668      	mov	r0, sp
   d5dd2:	f005 faa3 	bl	db31c <memset>

	size_t len = length();
   d5dd6:	682b      	ldr	r3, [r5, #0]
   d5dd8:	4628      	mov	r0, r5
   d5dda:	689b      	ldr	r3, [r3, #8]
   d5ddc:	4798      	blx	r3
	size_t offset = 0;
   d5dde:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5de0:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5de2:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5de4:	42bc      	cmp	r4, r7
   d5de6:	d20e      	bcs.n	d5e06 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5de8:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5dea:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5dec:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5dee:	bf28      	it	cs
   d5df0:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5df2:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5df6:	466a      	mov	r2, sp
   d5df8:	4633      	mov	r3, r6
   d5dfa:	4621      	mov	r1, r4
   d5dfc:	4628      	mov	r0, r5
   d5dfe:	47c0      	blx	r8
		if (!bResult) {
   d5e00:	b108      	cbz	r0, d5e06 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5e02:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5e04:	e7ee      	b.n	d5de4 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5e06:	b004      	add	sp, #16
   d5e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e0c <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5e0c:	2300      	movs	r3, #0
	rawMonth = 1;
   d5e0e:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5e10:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5e12:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5e14:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5e16:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5e18:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5e1a:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5e1c:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d5e1e:	7443      	strb	r3, [r0, #17]
   d5e20:	4770      	bx	lr
	...

000d5e24 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d5e24:	2201      	movs	r2, #1
   d5e26:	b508      	push	{r3, lr}
   d5e28:	7142      	strb	r2, [r0, #5]
   d5e2a:	2202      	movs	r2, #2
   d5e2c:	7182      	strb	r2, [r0, #6]
   d5e2e:	2203      	movs	r2, #3
   d5e30:	4b06      	ldr	r3, [pc, #24]	; (d5e4c <_ZN12MCP79410TimeC1Ev+0x28>)
   d5e32:	71c2      	strb	r2, [r0, #7]
   d5e34:	2204      	movs	r2, #4
   d5e36:	6003      	str	r3, [r0, #0]
   d5e38:	7202      	strb	r2, [r0, #8]
   d5e3a:	2300      	movs	r3, #0
   d5e3c:	2207      	movs	r2, #7
   d5e3e:	7103      	strb	r3, [r0, #4]
   d5e40:	7242      	strb	r2, [r0, #9]
   d5e42:	7443      	strb	r3, [r0, #17]
	clear();
   d5e44:	f7ff ffe2 	bl	d5e0c <_ZN12MCP79410Time5clearEv>
}
   d5e48:	bd08      	pop	{r3, pc}
   d5e4a:	bf00      	nop
   d5e4c:	000dd118 	.word	0x000dd118

000d5e50 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5e50:	0903      	lsrs	r3, r0, #4
}
   d5e52:	220a      	movs	r2, #10
   d5e54:	f000 000f 	and.w	r0, r0, #15
   d5e58:	fb02 0003 	mla	r0, r2, r3, r0
   d5e5c:	4770      	bx	lr

000d5e5e <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d5e5e:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d5e60:	7a80      	ldrb	r0, [r0, #10]
   d5e62:	f7ff fff5 	bl	d5e50 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5e66:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5e6a:	bd08      	pop	{r3, pc}

000d5e6c <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d5e6c:	7ac0      	ldrb	r0, [r0, #11]
   d5e6e:	f000 001f 	and.w	r0, r0, #31
   d5e72:	f7ff bfed 	b.w	d5e50 <_ZN12MCP79410Time8bcdToIntEh>

000d5e76 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5e76:	7b00      	ldrb	r0, [r0, #12]
   d5e78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5e7c:	f7ff bfe8 	b.w	d5e50 <_ZN12MCP79410Time8bcdToIntEh>

000d5e80 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d5e80:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5e82:	7b81      	ldrb	r1, [r0, #14]
   d5e84:	064a      	lsls	r2, r1, #25
   d5e86:	d50d      	bpl.n	d5ea4 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5e88:	f001 001f 	and.w	r0, r1, #31
   d5e8c:	f7ff ffe0 	bl	d5e50 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d5e90:	068b      	lsls	r3, r1, #26
   d5e92:	d503      	bpl.n	d5e9c <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d5e94:	280c      	cmp	r0, #12
   d5e96:	d00b      	beq.n	d5eb0 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d5e98:	300c      	adds	r0, #12
   d5e9a:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d5e9c:	280c      	cmp	r0, #12
   d5e9e:	bf08      	it	eq
   d5ea0:	2000      	moveq	r0, #0
   d5ea2:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5ea4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d5ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5eac:	f7ff bfd0 	b.w	d5e50 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d5eb0:	bd08      	pop	{r3, pc}

000d5eb2 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d5eb2:	7bc0      	ldrb	r0, [r0, #15]
   d5eb4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5eb8:	f7ff bfca 	b.w	d5e50 <_ZN12MCP79410Time8bcdToIntEh>

000d5ebc <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d5ebc:	7c00      	ldrb	r0, [r0, #16]
   d5ebe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5ec2:	f7ff bfc5 	b.w	d5e50 <_ZN12MCP79410Time8bcdToIntEh>

000d5ec6 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5ec6:	b510      	push	{r4, lr}
   d5ec8:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5eca:	2224      	movs	r2, #36	; 0x24
   d5ecc:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5ece:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5ed0:	a801      	add	r0, sp, #4
   d5ed2:	f005 fa23 	bl	db31c <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	f7ff ffc1 	bl	d5e5e <_ZNK12MCP79410Time7getYearEv>
   d5edc:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5ee0:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	f7ff ffc2 	bl	d5e6c <_ZNK12MCP79410Time8getMonthEv>
   d5ee8:	3801      	subs	r0, #1
   d5eea:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5eec:	4620      	mov	r0, r4
   d5eee:	f7ff ffc2 	bl	d5e76 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5ef2:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	f7ff ffc3 	bl	d5e80 <_ZNK12MCP79410Time7getHourEv>
   d5efa:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5efc:	4620      	mov	r0, r4
   d5efe:	f7ff ffd8 	bl	d5eb2 <_ZNK12MCP79410Time9getMinuteEv>
   d5f02:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5f04:	4620      	mov	r0, r4
   d5f06:	f7ff ffd9 	bl	d5ebc <_ZNK12MCP79410Time9getSecondEv>
   d5f0a:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d5f0c:	a801      	add	r0, sp, #4
   d5f0e:	f005 fae9 	bl	db4e4 <mktime>
}
   d5f12:	b00a      	add	sp, #40	; 0x28
   d5f14:	bd10      	pop	{r4, pc}

000d5f16 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d5f16:	220a      	movs	r2, #10
   d5f18:	fb90 f3f2 	sdiv	r3, r0, r2
   d5f1c:	fb93 f1f2 	sdiv	r1, r3, r2
   d5f20:	fb02 3111 	mls	r1, r2, r1, r3
   d5f24:	fb02 0313 	mls	r3, r2, r3, r0
   d5f28:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d5f2c:	b2c0      	uxtb	r0, r0
   d5f2e:	4770      	bx	lr

000d5f30 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d5f30:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d5f32:	b510      	push	{r4, lr}
   d5f34:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5f36:	fb91 f0f3 	sdiv	r0, r1, r3
   d5f3a:	fb00 1013 	mls	r0, r0, r3, r1
   d5f3e:	f7ff ffea 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f42:	72a0      	strb	r0, [r4, #10]
   d5f44:	bd10      	pop	{r4, pc}

000d5f46 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d5f46:	b510      	push	{r4, lr}
   d5f48:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5f4a:	4608      	mov	r0, r1
   d5f4c:	f7ff ffe3 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f50:	72e0      	strb	r0, [r4, #11]
   d5f52:	bd10      	pop	{r4, pc}

000d5f54 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d5f54:	b510      	push	{r4, lr}
   d5f56:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d5f58:	4608      	mov	r0, r1
   d5f5a:	f7ff ffdc 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f5e:	7b23      	ldrb	r3, [r4, #12]
   d5f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5f64:	4318      	orrs	r0, r3
   d5f66:	7320      	strb	r0, [r4, #12]
   d5f68:	bd10      	pop	{r4, pc}

000d5f6a <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d5f6a:	b510      	push	{r4, lr}
   d5f6c:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d5f6e:	1c48      	adds	r0, r1, #1
   d5f70:	f7ff ffd1 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f74:	7b63      	ldrb	r3, [r4, #13]
   d5f76:	f023 0307 	bic.w	r3, r3, #7
   d5f7a:	4318      	orrs	r0, r3
   d5f7c:	7360      	strb	r0, [r4, #13]
   d5f7e:	bd10      	pop	{r4, pc}

000d5f80 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d5f80:	b510      	push	{r4, lr}
   d5f82:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5f84:	4608      	mov	r0, r1
   d5f86:	f7ff ffc6 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f8a:	73a0      	strb	r0, [r4, #14]
   d5f8c:	bd10      	pop	{r4, pc}

000d5f8e <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d5f8e:	b510      	push	{r4, lr}
   d5f90:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5f92:	4608      	mov	r0, r1
   d5f94:	f7ff ffbf 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5f98:	73e0      	strb	r0, [r4, #15]
   d5f9a:	bd10      	pop	{r4, pc}

000d5f9c <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d5f9c:	b510      	push	{r4, lr}
   d5f9e:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d5fa0:	4608      	mov	r0, r1
   d5fa2:	f7ff ffb8 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d5fa6:	7c23      	ldrb	r3, [r4, #16]
   d5fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5fac:	4318      	orrs	r0, r3
   d5fae:	7420      	strb	r0, [r4, #16]
   d5fb0:	bd10      	pop	{r4, pc}

000d5fb2 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d5fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fb4:	4604      	mov	r4, r0
   d5fb6:	a802      	add	r0, sp, #8
   d5fb8:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d5fbc:	f004 ffe6 	bl	daf8c <gmtime>
   d5fc0:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d5fc2:	6941      	ldr	r1, [r0, #20]
   d5fc4:	4620      	mov	r0, r4
   d5fc6:	f7ff ffb3 	bl	d5f30 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d5fca:	6929      	ldr	r1, [r5, #16]
   d5fcc:	4620      	mov	r0, r4
   d5fce:	3101      	adds	r1, #1
   d5fd0:	f7ff ffb9 	bl	d5f46 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d5fd4:	68e9      	ldr	r1, [r5, #12]
   d5fd6:	4620      	mov	r0, r4
   d5fd8:	f7ff ffbc 	bl	d5f54 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d5fdc:	69a9      	ldr	r1, [r5, #24]
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f7ff ffc3 	bl	d5f6a <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d5fe4:	68a9      	ldr	r1, [r5, #8]
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	f7ff ffca 	bl	d5f80 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5fec:	6869      	ldr	r1, [r5, #4]
   d5fee:	4620      	mov	r0, r4
   d5ff0:	f7ff ffcd 	bl	d5f8e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5ff4:	6829      	ldr	r1, [r5, #0]
   d5ff6:	293b      	cmp	r1, #59	; 0x3b
   d5ff8:	bfa8      	it	ge
   d5ffa:	213b      	movge	r1, #59	; 0x3b
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	f7ff ffcd 	bl	d5f9c <_ZN12MCP79410Time9setSecondEi>
}
   d6002:	b003      	add	sp, #12
   d6004:	bd30      	pop	{r4, r5, pc}

000d6006 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6006:	b510      	push	{r4, lr}
   d6008:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d600a:	f7ff ffd2 	bl	d5fb2 <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d600e:	7a63      	ldrb	r3, [r4, #9]
   d6010:	7463      	strb	r3, [r4, #17]
   d6012:	bd10      	pop	{r4, pc}

000d6014 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6014:	4a08      	ldr	r2, [pc, #32]	; (d6038 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d6016:	6002      	str	r2, [r0, #0]
   d6018:	2200      	movs	r2, #0
   d601a:	7202      	strb	r2, [r0, #8]
   d601c:	7242      	strb	r2, [r0, #9]
   d601e:	2201      	movs	r2, #1
   d6020:	7282      	strb	r2, [r0, #10]
   d6022:	4603      	mov	r3, r0
   d6024:	2203      	movs	r2, #3
   d6026:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6028:	4a04      	ldr	r2, [pc, #16]	; (d603c <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d602a:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d602c:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d602e:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6030:	4a03      	ldr	r2, [pc, #12]	; (d6040 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6032:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6034:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d6036:	4770      	bx	lr
   d6038:	000dd128 	.word	0x000dd128
   d603c:	000dcff8 	.word	0x000dcff8
   d6040:	000dcfd4 	.word	0x000dcfd4

000d6044 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6048:	4605      	mov	r5, r0
   d604a:	460f      	mov	r7, r1
   d604c:	4691      	mov	r9, r2
   d604e:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6050:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6054:	429c      	cmp	r4, r3
   d6056:	d230      	bcs.n	d60ba <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6058:	4639      	mov	r1, r7
   d605a:	6868      	ldr	r0, [r5, #4]
   d605c:	f002 ff2c 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6060:	eb09 0104 	add.w	r1, r9, r4
   d6064:	6868      	ldr	r0, [r5, #4]
   d6066:	f7ff fd45 	bl	d5af4 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d606a:	2100      	movs	r1, #0
   d606c:	6868      	ldr	r0, [r5, #4]
   d606e:	f002 ff2a 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6072:	4606      	mov	r6, r0
   d6074:	b9d8      	cbnz	r0, d60ae <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6078:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d607a:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d607c:	2a20      	cmp	r2, #32
   d607e:	f04f 0301 	mov.w	r3, #1
   d6082:	bf28      	it	cs
   d6084:	2220      	movcs	r2, #32
   d6086:	4639      	mov	r1, r7
   d6088:	f002 ff04 	bl	d8e94 <_ZN7TwoWire11requestFromEhjh>
   d608c:	eb0a 0804 	add.w	r8, sl, r4
   d6090:	4683      	mov	fp, r0
   d6092:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6094:	ebc8 0306 	rsb	r3, r8, r6
   d6098:	459b      	cmp	fp, r3
   d609a:	d906      	bls.n	d60aa <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d609c:	6868      	ldr	r0, [r5, #4]
   d609e:	6803      	ldr	r3, [r0, #0]
   d60a0:	695b      	ldr	r3, [r3, #20]
   d60a2:	4798      	blx	r3
   d60a4:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d60a8:	e7f4      	b.n	d6094 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d60aa:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d60ac:	e7d1      	b.n	d6052 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d60ae:	4602      	mov	r2, r0
   d60b0:	4904      	ldr	r1, [pc, #16]	; (d60c4 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d60b2:	4805      	ldr	r0, [pc, #20]	; (d60c8 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d60b4:	f7fe f8fb 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d60b8:	e000      	b.n	d60bc <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d60ba:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d60bc:	4630      	mov	r0, r6
   d60be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60c2:	bf00      	nop
   d60c4:	000dd072 	.word	0x000dd072
   d60c8:	2003e070 	.word	0x2003e070

000d60cc <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d60cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d60ce:	2301      	movs	r3, #1
   d60d0:	9300      	str	r3, [sp, #0]
   d60d2:	460a      	mov	r2, r1
   d60d4:	ab03      	add	r3, sp, #12
   d60d6:	216f      	movs	r1, #111	; 0x6f
   d60d8:	f7ff ffb4 	bl	d6044 <_ZNK8MCP7941010deviceReadEhhPhj>
   d60dc:	b910      	cbnz	r0, d60e4 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d60de:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d60e2:	e000      	b.n	d60e6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d60e4:	2000      	movs	r0, #0
	}
}
   d60e6:	b005      	add	sp, #20
   d60e8:	f85d fb04 	ldr.w	pc, [sp], #4

000d60ec <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d60ec:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d60ee:	2103      	movs	r1, #3
   d60f0:	f7ff ffec 	bl	d60cc <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d60f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d60f8:	bd08      	pop	{r3, pc}

000d60fa <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d60fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d60fc:	461e      	mov	r6, r3
   d60fe:	2b00      	cmp	r3, #0
   d6100:	bf0c      	ite	eq
   d6102:	2307      	moveq	r3, #7
   d6104:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6106:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6108:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d610a:	ab02      	add	r3, sp, #8
   d610c:	460a      	mov	r2, r1
   d610e:	216f      	movs	r1, #111	; 0x6f
   d6110:	f7ff ff98 	bl	d6044 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6114:	4605      	mov	r5, r0
   d6116:	b9d8      	cbnz	r0, d6150 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d6118:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d611c:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d611e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6122:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6124:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6128:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d612a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d612e:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6130:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6134:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6136:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d613a:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d613c:	b91e      	cbnz	r6, d6146 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d613e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6142:	72a3      	strb	r3, [r4, #10]
   d6144:	e004      	b.n	d6150 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6146:	f003 fdf1 	bl	d9d2c <_ZN9TimeClass4yearEv>
   d614a:	f7ff fee4 	bl	d5f16 <_ZN12MCP79410Time8intToBcdEi>
   d614e:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d6150:	4628      	mov	r0, r5
   d6152:	b004      	add	sp, #16
   d6154:	bd70      	pop	{r4, r5, r6, pc}

000d6156 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6156:	b538      	push	{r3, r4, r5, lr}
   d6158:	2300      	movs	r3, #0
   d615a:	460c      	mov	r4, r1
   d615c:	460a      	mov	r2, r1
   d615e:	4619      	mov	r1, r3
   d6160:	4605      	mov	r5, r0
   d6162:	f7ff ffca 	bl	d60fa <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d6166:	b928      	cbnz	r0, d6174 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6168:	7aa3      	ldrb	r3, [r4, #10]
   d616a:	b11b      	cbz	r3, d6174 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d616c:	4628      	mov	r0, r5
   d616e:	f7ff ffbd 	bl	d60ec <_ZNK8MCP7941020getOscillatorRunningEv>
   d6172:	b900      	cbnz	r0, d6176 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d6174:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d6176:	bd38      	pop	{r3, r4, r5, pc}

000d6178 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6178:	b510      	push	{r4, lr}
   d617a:	b086      	sub	sp, #24
   d617c:	4604      	mov	r4, r0
	MCP79410Time time;
   d617e:	a801      	add	r0, sp, #4
   d6180:	f7ff fe50 	bl	d5e24 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6184:	a901      	add	r1, sp, #4
   d6186:	4620      	mov	r0, r4
   d6188:	f7ff ffe5 	bl	d6156 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d618c:	b110      	cbz	r0, d6194 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d618e:	a801      	add	r0, sp, #4
   d6190:	f7ff fe99 	bl	d5ec6 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6194:	b006      	add	sp, #24
   d6196:	bd10      	pop	{r4, pc}

000d6198 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6198:	b530      	push	{r4, r5, lr}
   d619a:	4604      	mov	r4, r0
   d619c:	b085      	sub	sp, #20
	wire.begin();
   d619e:	6840      	ldr	r0, [r0, #4]
   d61a0:	f002 fe56 	bl	d8e50 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d61a4:	f003 fd6e 	bl	d9c84 <_ZN9TimeClass7isValidEv>
   d61a8:	b9c0      	cbnz	r0, d61dc <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d61aa:	7ae3      	ldrb	r3, [r4, #11]
   d61ac:	079b      	lsls	r3, r3, #30
   d61ae:	d515      	bpl.n	d61dc <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d61b0:	4620      	mov	r0, r4
   d61b2:	f7ff ffe1 	bl	d6178 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d61b6:	4605      	mov	r5, r0
   d61b8:	b180      	cbz	r0, d61dc <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d61ba:	f003 fca3 	bl	d9b04 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d61be:	4b09      	ldr	r3, [pc, #36]	; (d61e4 <_ZN8MCP794105setupEv+0x4c>)
   d61c0:	4909      	ldr	r1, [pc, #36]	; (d61e8 <_ZN8MCP794105setupEv+0x50>)
   d61c2:	681b      	ldr	r3, [r3, #0]
   d61c4:	462a      	mov	r2, r5
   d61c6:	4668      	mov	r0, sp
   d61c8:	f003 fd2a 	bl	d9c20 <_ZN9TimeClass6formatElPKc>
   d61cc:	4807      	ldr	r0, [pc, #28]	; (d61ec <_ZN8MCP794105setupEv+0x54>)
   d61ce:	9a00      	ldr	r2, [sp, #0]
   d61d0:	4907      	ldr	r1, [pc, #28]	; (d61f0 <_ZN8MCP794105setupEv+0x58>)
   d61d2:	f7fe f86c 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d61d6:	4668      	mov	r0, sp
   d61d8:	f003 fac7 	bl	d976a <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d61dc:	2301      	movs	r3, #1
   d61de:	7223      	strb	r3, [r4, #8]
}
   d61e0:	b005      	add	sp, #20
   d61e2:	bd30      	pop	{r4, r5, pc}
   d61e4:	2003ddec 	.word	0x2003ddec
   d61e8:	2003e4c8 	.word	0x2003e4c8
   d61ec:	2003e070 	.word	0x2003e070
   d61f0:	000dd08c 	.word	0x000dd08c

000d61f4 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d61f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d61f8:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d61fc:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d61fe:	6803      	ldr	r3, [r0, #0]
   d6200:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6202:	4604      	mov	r4, r0
   d6204:	460d      	mov	r5, r1
   d6206:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6208:	4798      	blx	r3
   d620a:	4580      	cmp	r8, r0
   d620c:	d80a      	bhi.n	d6224 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d620e:	9600      	str	r6, [sp, #0]
   d6210:	463b      	mov	r3, r7
   d6212:	b2ea      	uxtb	r2, r5
   d6214:	2157      	movs	r1, #87	; 0x57
   d6216:	6860      	ldr	r0, [r4, #4]
   d6218:	f7ff ff14 	bl	d6044 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d621c:	fab0 f080 	clz	r0, r0
   d6220:	0940      	lsrs	r0, r0, #5
   d6222:	e000      	b.n	d6226 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6224:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d6226:	b002      	add	sp, #8
   d6228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d622c <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d622c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6230:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6234:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6236:	6803      	ldr	r3, [r0, #0]
   d6238:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d623a:	4605      	mov	r5, r0
   d623c:	460c      	mov	r4, r1
   d623e:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6240:	4798      	blx	r3
   d6242:	4580      	cmp	r8, r0
   d6244:	d80c      	bhi.n	d6260 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6246:	f104 0220 	add.w	r2, r4, #32
   d624a:	9600      	str	r6, [sp, #0]
   d624c:	463b      	mov	r3, r7
   d624e:	b2d2      	uxtb	r2, r2
   d6250:	216f      	movs	r1, #111	; 0x6f
   d6252:	6868      	ldr	r0, [r5, #4]
   d6254:	f7ff fef6 	bl	d6044 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6258:	fab0 f080 	clz	r0, r0
   d625c:	0940      	lsrs	r0, r0, #5
   d625e:	e000      	b.n	d6262 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6260:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d6262:	b002      	add	sp, #8
   d6264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6268 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d626c:	4607      	mov	r7, r0
   d626e:	4689      	mov	r9, r1
   d6270:	4692      	mov	sl, r2
   d6272:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6274:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6278:	429c      	cmp	r4, r3
   d627a:	d228      	bcs.n	d62ce <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d627c:	4649      	mov	r1, r9
   d627e:	6878      	ldr	r0, [r7, #4]
   d6280:	f002 fe1a 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6284:	eb0a 0104 	add.w	r1, sl, r4
   d6288:	6878      	ldr	r0, [r7, #4]
   d628a:	f7ff fc33 	bl	d5af4 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6290:	1b1e      	subs	r6, r3, r4
   d6292:	2e1f      	cmp	r6, #31
   d6294:	eb0b 0804 	add.w	r8, fp, r4
   d6298:	bf28      	it	cs
   d629a:	261f      	movcs	r6, #31
   d629c:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d629e:	6878      	ldr	r0, [r7, #4]
   d62a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d62a4:	6802      	ldr	r2, [r0, #0]
   d62a6:	6892      	ldr	r2, [r2, #8]
   d62a8:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d62aa:	ebc8 0205 	rsb	r2, r8, r5
   d62ae:	42b2      	cmp	r2, r6
   d62b0:	d3f5      	bcc.n	d629e <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d62b2:	2101      	movs	r1, #1
   d62b4:	6878      	ldr	r0, [r7, #4]
   d62b6:	f002 fe06 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d62ba:	4605      	mov	r5, r0
   d62bc:	b128      	cbz	r0, d62ca <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d62be:	4602      	mov	r2, r0
   d62c0:	4905      	ldr	r1, [pc, #20]	; (d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d62c2:	4806      	ldr	r0, [pc, #24]	; (d62dc <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d62c4:	f7fd fff3 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d62c8:	e002      	b.n	d62d0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d62ca:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d62cc:	e7d3      	b.n	d6276 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d62ce:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d62d0:	4628      	mov	r0, r5
   d62d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62d6:	bf00      	nop
   d62d8:	000dd0a1 	.word	0x000dd0a1
   d62dc:	2003e070 	.word	0x2003e070

000d62e0 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d62e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d62e2:	7c13      	ldrb	r3, [r2, #16]
   d62e4:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d62e8:	7bd3      	ldrb	r3, [r2, #15]
   d62ea:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d62ee:	7b93      	ldrb	r3, [r2, #14]
   d62f0:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d62f4:	7b53      	ldrb	r3, [r2, #13]
   d62f6:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d62fa:	7b13      	ldrb	r3, [r2, #12]
   d62fc:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6300:	7ad3      	ldrb	r3, [r2, #11]
   d6302:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6306:	7a93      	ldrb	r3, [r2, #10]
   d6308:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d630c:	2307      	movs	r3, #7
   d630e:	9300      	str	r3, [sp, #0]
   d6310:	460a      	mov	r2, r1
   d6312:	ab02      	add	r3, sp, #8
   d6314:	216f      	movs	r1, #111	; 0x6f
   d6316:	f7ff ffa7 	bl	d6268 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d631a:	b005      	add	sp, #20
   d631c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6320 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d6320:	b510      	push	{r4, lr}
   d6322:	b086      	sub	sp, #24
   d6324:	4604      	mov	r4, r0
	MCP79410Time time;
   d6326:	a801      	add	r0, sp, #4
   d6328:	f7ff fd7c 	bl	d5e24 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d632c:	a801      	add	r0, sp, #4
   d632e:	f7ff fe40 	bl	d5fb2 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6332:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d6336:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6338:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d633c:	f88d 3014 	strb.w	r3, [sp, #20]
   d6340:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d6344:	b112      	cbz	r2, d634c <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6346:	f043 0308 	orr.w	r3, r3, #8
   d634a:	e001      	b.n	d6350 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d634c:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6350:	aa01      	add	r2, sp, #4
   d6352:	2100      	movs	r1, #0
   d6354:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6356:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d635a:	f7ff ffc1 	bl	d62e0 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d635e:	fab0 f080 	clz	r0, r0
   d6362:	0940      	lsrs	r0, r0, #5
   d6364:	b006      	add	sp, #24
   d6366:	bd10      	pop	{r4, pc}

000d6368 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d636a:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d636c:	f003 fc8a 	bl	d9c84 <_ZN9TimeClass7isValidEv>
   d6370:	4604      	mov	r4, r0
   d6372:	b1b8      	cbz	r0, d63a4 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d6374:	f003 fca7 	bl	d9cc6 <_ZN9TimeClass3nowEv>
   d6378:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d637a:	4601      	mov	r1, r0
   d637c:	4630      	mov	r0, r6
   d637e:	f7ff ffcf 	bl	d6320 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6382:	4b0c      	ldr	r3, [pc, #48]	; (d63b4 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d6384:	490c      	ldr	r1, [pc, #48]	; (d63b8 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d6386:	681b      	ldr	r3, [r3, #0]
   d6388:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d638a:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d638c:	4668      	mov	r0, sp
   d638e:	f003 fc47 	bl	d9c20 <_ZN9TimeClass6formatElPKc>
   d6392:	9a00      	ldr	r2, [sp, #0]
   d6394:	4909      	ldr	r1, [pc, #36]	; (d63bc <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6396:	480a      	ldr	r0, [pc, #40]	; (d63c0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6398:	f7fd ff89 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d639c:	4668      	mov	r0, sp
   d639e:	f003 f9e4 	bl	d976a <_ZN6StringD1Ev>
   d63a2:	e003      	b.n	d63ac <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d63a4:	4907      	ldr	r1, [pc, #28]	; (d63c4 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d63a6:	4806      	ldr	r0, [pc, #24]	; (d63c0 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d63a8:	f7fd ff81 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	b004      	add	sp, #16
   d63b0:	bd70      	pop	{r4, r5, r6, pc}
   d63b2:	bf00      	nop
   d63b4:	2003ddec 	.word	0x2003ddec
   d63b8:	2003e4c8 	.word	0x2003e4c8
   d63bc:	000dd0bc 	.word	0x000dd0bc
   d63c0:	2003e070 	.word	0x2003e070
   d63c4:	000dd0d2 	.word	0x000dd0d2

000d63c8 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d63c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d63ca:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d63cc:	4604      	mov	r4, r0
	if (!timeSet) {
   d63ce:	b98d      	cbnz	r5, d63f4 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d63d0:	f003 fc58 	bl	d9c84 <_ZN9TimeClass7isValidEv>
   d63d4:	b170      	cbz	r0, d63f4 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d63d6:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d63d8:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d63da:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d63de:	f001 ff8f 	bl	d8300 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d63e2:	b138      	cbz	r0, d63f4 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d63e4:	7ae3      	ldrb	r3, [r4, #11]
   d63e6:	07db      	lsls	r3, r3, #31
   d63e8:	d502      	bpl.n	d63f0 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d63ea:	4620      	mov	r0, r4
   d63ec:	f7ff ffbc 	bl	d6368 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d63f0:	2301      	movs	r3, #1
   d63f2:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d63f4:	b003      	add	sp, #12
   d63f6:	bd30      	pop	{r4, r5, pc}

000d63f8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d63f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d63fa:	ab04      	add	r3, sp, #16
   d63fc:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6400:	2201      	movs	r2, #1
   d6402:	9200      	str	r2, [sp, #0]
   d6404:	460a      	mov	r2, r1
   d6406:	216f      	movs	r1, #111	; 0x6f
   d6408:	f7ff ff2e 	bl	d6268 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d640c:	b005      	add	sp, #20
   d640e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6412 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6414:	4614      	mov	r4, r2
   d6416:	4605      	mov	r5, r0
   d6418:	460e      	mov	r6, r1
   d641a:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d641c:	f7ff fe56 	bl	d60cc <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d6420:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d6422:	ea40 0207 	orr.w	r2, r0, r7
   d6426:	4631      	mov	r1, r6
   d6428:	4628      	mov	r0, r5
}
   d642a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d642e:	f7ff bfe3 	b.w	d63f8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d6432 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d6432:	b113      	cbz	r3, d643a <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d6434:	4613      	mov	r3, r2
   d6436:	22ff      	movs	r2, #255	; 0xff
   d6438:	e001      	b.n	d643e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d643a:	43d2      	mvns	r2, r2
   d643c:	b2d2      	uxtb	r2, r2
   d643e:	f7ff bfe8 	b.w	d6412 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d6442 <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d6442:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d6444:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6446:	d80c      	bhi.n	d6462 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6448:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d644a:	f04f 0300 	mov.w	r3, #0
   d644e:	bf0c      	ite	eq
   d6450:	2210      	moveq	r2, #16
   d6452:	2220      	movne	r2, #32
   d6454:	2107      	movs	r1, #7
   d6456:	f7ff ffec 	bl	d6432 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d645a:	fab0 f080 	clz	r0, r0
   d645e:	0940      	lsrs	r0, r0, #5
   d6460:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6462:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d6464:	bd08      	pop	{r3, pc}

000d6466 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d6466:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d6468:	f04f 0300 	mov.w	r3, #0
   d646c:	f04f 0208 	mov.w	r2, #8
   d6470:	bf14      	ite	ne
   d6472:	2114      	movne	r1, #20
   d6474:	210d      	moveq	r1, #13
   d6476:	f7ff bfdc 	b.w	d6432 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d647a <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d647a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d647e:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6482:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6484:	6803      	ldr	r3, [r0, #0]
   d6486:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6488:	4605      	mov	r5, r0
   d648a:	460c      	mov	r4, r1
   d648c:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d648e:	4798      	blx	r3
   d6490:	4580      	cmp	r8, r0
   d6492:	d80c      	bhi.n	d64ae <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6494:	f104 0220 	add.w	r2, r4, #32
   d6498:	9600      	str	r6, [sp, #0]
   d649a:	463b      	mov	r3, r7
   d649c:	b2d2      	uxtb	r2, r2
   d649e:	216f      	movs	r1, #111	; 0x6f
   d64a0:	6868      	ldr	r0, [r5, #4]
   d64a2:	f7ff fee1 	bl	d6268 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d64a6:	fab0 f080 	clz	r0, r0
   d64aa:	0940      	lsrs	r0, r0, #5
   d64ac:	e000      	b.n	d64b0 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d64ae:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d64b0:	b002      	add	sp, #8
   d64b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64b6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d64b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d64b8:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d64ba:	b085      	sub	sp, #20
   d64bc:	4606      	mov	r6, r0
   d64be:	460c      	mov	r4, r1
   d64c0:	4617      	mov	r7, r2
   d64c2:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d64c4:	d901      	bls.n	d64ca <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d64c6:	2000      	movs	r0, #0
   d64c8:	e043      	b.n	d6552 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d64ca:	f7ff fe0f 	bl	d60ec <_ZNK8MCP7941020getOscillatorRunningEv>
   d64ce:	2800      	cmp	r0, #0
   d64d0:	d0f9      	beq.n	d64c6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d64d2:	4629      	mov	r1, r5
   d64d4:	4630      	mov	r0, r6
   d64d6:	f7ff ffc6 	bl	d6466 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d64da:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d64dc:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d64de:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d64e2:	7be3      	ldrb	r3, [r4, #15]
   d64e4:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d64e8:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d64ec:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d64ee:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d64f0:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d64f4:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d64f8:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d64fa:	b117      	cbz	r7, d6502 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d64fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6500:	e001      	b.n	d6506 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d6502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d6506:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d650a:	7c63      	ldrb	r3, [r4, #17]
   d650c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d6510:	011b      	lsls	r3, r3, #4
   d6512:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d6516:	4313      	orrs	r3, r2
   d6518:	2d00      	cmp	r5, #0
   d651a:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d651e:	f04f 0306 	mov.w	r3, #6
   d6522:	9300      	str	r3, [sp, #0]
   d6524:	bf08      	it	eq
   d6526:	220a      	moveq	r2, #10
   d6528:	ab02      	add	r3, sp, #8
   d652a:	bf18      	it	ne
   d652c:	2211      	movne	r2, #17
   d652e:	216f      	movs	r1, #111	; 0x6f
   d6530:	4630      	mov	r0, r6
   d6532:	f7ff fe99 	bl	d6268 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d6536:	4604      	mov	r4, r0
   d6538:	b940      	cbnz	r0, d654c <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d653a:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d653c:	bf0c      	ite	eq
   d653e:	2310      	moveq	r3, #16
   d6540:	2320      	movne	r3, #32
   d6542:	22ff      	movs	r2, #255	; 0xff
   d6544:	2107      	movs	r1, #7
   d6546:	4630      	mov	r0, r6
   d6548:	f7ff ff63 	bl	d6412 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d654c:	fab4 f084 	clz	r0, r4
   d6550:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d6552:	b005      	add	sp, #20
   d6554:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6556 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6556:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6558:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d655a:	b087      	sub	sp, #28
   d655c:	4606      	mov	r6, r0
   d655e:	460c      	mov	r4, r1
   d6560:	4617      	mov	r7, r2
   d6562:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6564:	d901      	bls.n	d656a <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6566:	2000      	movs	r0, #0
   d6568:	e010      	b.n	d658c <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d656a:	f7ff fe05 	bl	d6178 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d656e:	2800      	cmp	r0, #0
   d6570:	d0f9      	beq.n	d6566 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d6572:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d6574:	a801      	add	r0, sp, #4
   d6576:	f7ff fc55 	bl	d5e24 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d657a:	a801      	add	r0, sp, #4
   d657c:	f7ff fd43 	bl	d6006 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d6580:	462b      	mov	r3, r5
   d6582:	463a      	mov	r2, r7
   d6584:	a901      	add	r1, sp, #4
   d6586:	4630      	mov	r0, r6
   d6588:	f7ff ff95 	bl	d64b6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d658c:	b007      	add	sp, #28
   d658e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6590 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d6590:	b538      	push	{r3, r4, r5, lr}
   d6592:	4605      	mov	r5, r0
   d6594:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6596:	2157      	movs	r1, #87	; 0x57
   d6598:	6868      	ldr	r0, [r5, #4]
   d659a:	f002 fc8d 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d659e:	2101      	movs	r1, #1
   d65a0:	6868      	ldr	r0, [r5, #4]
   d65a2:	f002 fc90 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d65a6:	b108      	cbz	r0, d65ac <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d65a8:	3c01      	subs	r4, #1
   d65aa:	d1f4      	bne.n	d6596 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d65ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d65b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65b4:	4605      	mov	r5, r0
   d65b6:	18d7      	adds	r7, r2, r3
   d65b8:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d65ba:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d65be:	42bc      	cmp	r4, r7
   d65c0:	d01e      	beq.n	d6600 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d65c2:	2157      	movs	r1, #87	; 0x57
   d65c4:	6868      	ldr	r0, [r5, #4]
   d65c6:	f002 fc77 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d65ca:	eb08 0104 	add.w	r1, r8, r4
   d65ce:	6868      	ldr	r0, [r5, #4]
   d65d0:	f7ff fa90 	bl	d5af4 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d65d4:	6868      	ldr	r0, [r5, #4]
   d65d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d65da:	6803      	ldr	r3, [r0, #0]
   d65dc:	689b      	ldr	r3, [r3, #8]
   d65de:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d65e0:	2101      	movs	r1, #1
   d65e2:	6868      	ldr	r0, [r5, #4]
   d65e4:	f002 fc6f 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d65e8:	4606      	mov	r6, r0
   d65ea:	b128      	cbz	r0, d65f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d65ec:	4602      	mov	r2, r0
   d65ee:	4906      	ldr	r1, [pc, #24]	; (d6608 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d65f0:	4806      	ldr	r0, [pc, #24]	; (d660c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d65f2:	f7fd fe5c 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d65f6:	e004      	b.n	d6602 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d65f8:	4628      	mov	r0, r5
   d65fa:	f7ff ffc9 	bl	d6590 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d65fe:	e7de      	b.n	d65be <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6600:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d6602:	4630      	mov	r0, r6
   d6604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6608:	000dd0e7 	.word	0x000dd0e7
   d660c:	2003e070 	.word	0x2003e070

000d6610 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6614:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6618:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d661a:	6803      	ldr	r3, [r0, #0]
   d661c:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d661e:	4604      	mov	r4, r0
   d6620:	460d      	mov	r5, r1
   d6622:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6624:	4798      	blx	r3
   d6626:	4580      	cmp	r8, r0
   d6628:	d80a      	bhi.n	d6640 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d662a:	4633      	mov	r3, r6
   d662c:	463a      	mov	r2, r7
   d662e:	b2e9      	uxtb	r1, r5
   d6630:	6860      	ldr	r0, [r4, #4]
   d6632:	f7ff ffbd 	bl	d65b0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d6636:	fab0 f080 	clz	r0, r0
   d663a:	0940      	lsrs	r0, r0, #5
   d663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d6640:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d6642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6648 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d6648:	b508      	push	{r3, lr}
   d664a:	f001 fc01 	bl	d7e50 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d6650:	4a02      	ldr	r2, [pc, #8]	; (d665c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d6652:	601a      	str	r2, [r3, #0]
   d6654:	bd08      	pop	{r3, pc}
   d6656:	bf00      	nop
   d6658:	2003e070 	.word	0x2003e070
   d665c:	000dd108 	.word	0x000dd108

000d6660 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d6660:	f001 bbf6 	b.w	d7e50 <HAL_Pin_Map>

000d6664 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d6664:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d6666:	6803      	ldr	r3, [r0, #0]
   d6668:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d666a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d666c:	d904      	bls.n	d6678 <nrf_gpio_pin_port_decode+0x14>
   d666e:	4a07      	ldr	r2, [pc, #28]	; (d668c <nrf_gpio_pin_port_decode+0x28>)
   d6670:	2100      	movs	r1, #0
   d6672:	200a      	movs	r0, #10
   d6674:	f001 fd6c 	bl	d8150 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d6678:	6823      	ldr	r3, [r4, #0]
   d667a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d667c:	bf83      	ittte	hi
   d667e:	f003 031f 	andhi.w	r3, r3, #31
   d6682:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d6684:	4802      	ldrhi	r0, [pc, #8]	; (d6690 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d6686:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d668a:	bd10      	pop	{r4, pc}
   d668c:	000d7dd1 	.word	0x000d7dd1
   d6690:	50000300 	.word	0x50000300

000d6694 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d6694:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d6696:	4b0b      	ldr	r3, [pc, #44]	; (d66c4 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	0100      	lsls	r0, r0, #4
   d669c:	1819      	adds	r1, r3, r0
   d669e:	5c1a      	ldrb	r2, [r3, r0]
   d66a0:	784b      	ldrb	r3, [r1, #1]
   d66a2:	a802      	add	r0, sp, #8
   d66a4:	f003 031f 	and.w	r3, r3, #31
   d66a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d66ac:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d66b0:	f7ff ffd8 	bl	d6664 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d66b4:	9a01      	ldr	r2, [sp, #4]
   d66b6:	2301      	movs	r3, #1
   d66b8:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d66ba:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d66be:	b003      	add	sp, #12
   d66c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d66c4:	2003e074 	.word	0x2003e074

000d66c8 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d66c8:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d66ca:	4b0b      	ldr	r3, [pc, #44]	; (d66f8 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	0100      	lsls	r0, r0, #4
   d66d0:	1819      	adds	r1, r3, r0
   d66d2:	5c1a      	ldrb	r2, [r3, r0]
   d66d4:	784b      	ldrb	r3, [r1, #1]
   d66d6:	a802      	add	r0, sp, #8
   d66d8:	f003 031f 	and.w	r3, r3, #31
   d66dc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d66e0:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d66e4:	f7ff ffbe 	bl	d6664 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d66e8:	9a01      	ldr	r2, [sp, #4]
   d66ea:	2301      	movs	r3, #1
   d66ec:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d66ee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d66f2:	b003      	add	sp, #12
   d66f4:	f85d fb04 	ldr.w	pc, [sp], #4
   d66f8:	2003e074 	.word	0x2003e074

000d66fc <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d66fc:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d66fe:	4b0f      	ldr	r3, [pc, #60]	; (d673c <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	0100      	lsls	r0, r0, #4
   d6704:	181a      	adds	r2, r3, r0
   d6706:	5c1c      	ldrb	r4, [r3, r0]
   d6708:	7853      	ldrb	r3, [r2, #1]
   d670a:	a802      	add	r0, sp, #8
   d670c:	f003 031f 	and.w	r3, r3, #31
   d6710:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d6714:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6718:	f7ff ffa4 	bl	d6664 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d671c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d6720:	a802      	add	r0, sp, #8
   d6722:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6726:	f7ff ff9d 	bl	d6664 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d672a:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d672e:	9800      	ldr	r0, [sp, #0]
   d6730:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d6734:	f000 0001 	and.w	r0, r0, #1
   d6738:	b002      	add	sp, #8
   d673a:	bd10      	pop	{r4, pc}
   d673c:	2003e074 	.word	0x2003e074

000d6740 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d6740:	b538      	push	{r3, r4, r5, lr}
   d6742:	4604      	mov	r4, r0
   d6744:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d6746:	4628      	mov	r0, r5
   d6748:	2100      	movs	r1, #0
   d674a:	f003 fce3 	bl	da114 <pinMode>
    _pin = pin;
   d674e:	8025      	strh	r5, [r4, #0]
}
   d6750:	4620      	mov	r0, r4
   d6752:	bd38      	pop	{r3, r4, r5, pc}

000d6754 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d6754:	b570      	push	{r4, r5, r6, lr}
   d6756:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d6758:	f002 fbf8 	bl	d8f4c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d675c:	2100      	movs	r1, #0
   d675e:	8828      	ldrh	r0, [r5, #0]
   d6760:	f001 fb7e 	bl	d7e60 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d6764:	f002 fbf4 	bl	d8f50 <_Z10interruptsv>
   d6768:	247d      	movs	r4, #125	; 0x7d
   d676a:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d676c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d6770:	d02d      	beq.n	d67ce <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6772:	2002      	movs	r0, #2
   d6774:	f001 fb2c 	bl	d7dd0 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d6778:	8828      	ldrh	r0, [r5, #0]
   d677a:	f7ff ffbf 	bl	d66fc <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
   d677e:	2800      	cmp	r0, #0
   d6780:	d0f3      	beq.n	d676a <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
   d6782:	f002 fbe3 	bl	d8f4c <_Z12noInterruptsv>

    digitalWriteFastLow();
   d6786:	8828      	ldrh	r0, [r5, #0]
   d6788:	f7ff ff84 	bl	d6694 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d678c:	2101      	movs	r1, #1
   d678e:	8828      	ldrh	r0, [r5, #0]
   d6790:	f001 fb66 	bl	d7e60 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d6794:	f002 fbdc 	bl	d8f50 <_Z10interruptsv>
   d6798:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d679c:	f001 fb18 	bl	d7dd0 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d67a0:	f001 fb36 	bl	d7e10 <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d67a4:	2100      	movs	r1, #0
   d67a6:	4606      	mov	r6, r0
   d67a8:	8828      	ldrh	r0, [r5, #0]
   d67aa:	f001 fb59 	bl	d7e60 <HAL_Pin_Mode>
   d67ae:	2046      	movs	r0, #70	; 0x46
   d67b0:	f001 fb0e 	bl	d7dd0 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d67b4:	8828      	ldrh	r0, [r5, #0]
   d67b6:	f7ff ffa1 	bl	d66fc <_ZN7OneWire15digitalReadFastEv.isra.4>
   d67ba:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d67be:	4630      	mov	r0, r6
   d67c0:	f001 fb2e 	bl	d7e20 <HAL_enable_irq>
   d67c4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d67c8:	0964      	lsrs	r4, r4, #5
   d67ca:	f001 fb01 	bl	d7dd0 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d67ce:	4620      	mov	r0, r4
   d67d0:	bd70      	pop	{r4, r5, r6, pc}

000d67d2 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d67d2:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d67d4:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d67d8:	4604      	mov	r4, r0
    if (v & 1)
   d67da:	d015      	beq.n	d6808 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d67dc:	f001 fb18 	bl	d7e10 <HAL_disable_irq>
   d67e0:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d67e2:	8820      	ldrh	r0, [r4, #0]
   d67e4:	f7ff ff56 	bl	d6694 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d67e8:	2101      	movs	r1, #1
   d67ea:	8820      	ldrh	r0, [r4, #0]
   d67ec:	f001 fb38 	bl	d7e60 <HAL_Pin_Mode>
   d67f0:	2001      	movs	r0, #1
   d67f2:	f001 faed 	bl	d7dd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d67f6:	2100      	movs	r1, #0
   d67f8:	8820      	ldrh	r0, [r4, #0]
   d67fa:	f001 fb31 	bl	d7e60 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d67fe:	4628      	mov	r0, r5
   d6800:	f001 fb0e 	bl	d7e20 <HAL_enable_irq>
   d6804:	203b      	movs	r0, #59	; 0x3b
   d6806:	e014      	b.n	d6832 <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d6808:	f001 fb02 	bl	d7e10 <HAL_disable_irq>
   d680c:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d680e:	8820      	ldrh	r0, [r4, #0]
   d6810:	f7ff ff40 	bl	d6694 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6814:	2101      	movs	r1, #1
   d6816:	8820      	ldrh	r0, [r4, #0]
   d6818:	f001 fb22 	bl	d7e60 <HAL_Pin_Mode>
   d681c:	2041      	movs	r0, #65	; 0x41
   d681e:	f001 fad7 	bl	d7dd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6822:	4631      	mov	r1, r6
   d6824:	8820      	ldrh	r0, [r4, #0]
   d6826:	f001 fb1b 	bl	d7e60 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d682a:	4628      	mov	r0, r5
   d682c:	f001 faf8 	bl	d7e20 <HAL_enable_irq>
   d6830:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d6832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6836:	f001 bacb 	b.w	d7dd0 <HAL_Delay_Microseconds>

000d683a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d683a:	b538      	push	{r3, r4, r5, lr}
   d683c:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d683e:	f001 fae7 	bl	d7e10 <HAL_disable_irq>
   d6842:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d6844:	8820      	ldrh	r0, [r4, #0]
   d6846:	f7ff ff25 	bl	d6694 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d684a:	2101      	movs	r1, #1
   d684c:	8820      	ldrh	r0, [r4, #0]
   d684e:	f001 fb07 	bl	d7e60 <HAL_Pin_Mode>
   d6852:	2001      	movs	r0, #1
   d6854:	f001 fabc 	bl	d7dd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6858:	2100      	movs	r1, #0
   d685a:	8820      	ldrh	r0, [r4, #0]
   d685c:	f001 fb00 	bl	d7e60 <HAL_Pin_Mode>
   d6860:	200d      	movs	r0, #13
   d6862:	f001 fab5 	bl	d7dd0 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d6866:	8820      	ldrh	r0, [r4, #0]
   d6868:	f7ff ff48 	bl	d66fc <_ZN7OneWire15digitalReadFastEv.isra.4>
   d686c:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d686e:	4628      	mov	r0, r5
   d6870:	f001 fad6 	bl	d7e20 <HAL_enable_irq>
   d6874:	202e      	movs	r0, #46	; 0x2e
   d6876:	f001 faab 	bl	d7dd0 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d687a:	4620      	mov	r0, r4
   d687c:	bd38      	pop	{r3, r4, r5, pc}

000d687e <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d687e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6882:	4605      	mov	r5, r0
   d6884:	4688      	mov	r8, r1
   d6886:	4617      	mov	r7, r2
   d6888:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d688a:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d688c:	ea18 0f04 	tst.w	r8, r4
   d6890:	bf14      	ite	ne
   d6892:	2101      	movne	r1, #1
   d6894:	2100      	moveq	r1, #0
   d6896:	4628      	mov	r0, r5
   d6898:	f7ff ff9b 	bl	d67d2 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d689c:	0064      	lsls	r4, r4, #1
   d689e:	3e01      	subs	r6, #1
   d68a0:	b2e4      	uxtb	r4, r4
   d68a2:	d1f3      	bne.n	d688c <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
   d68a4:	b167      	cbz	r7, d68c0 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d68a6:	f002 fb51 	bl	d8f4c <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d68aa:	8828      	ldrh	r0, [r5, #0]
   d68ac:	f7ff ff0c 	bl	d66c8 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d68b0:	8828      	ldrh	r0, [r5, #0]
   d68b2:	2101      	movs	r1, #1
   d68b4:	f001 fad4 	bl	d7e60 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d68b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
   d68bc:	f002 bb48 	b.w	d8f50 <_Z10interruptsv>
   d68c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d68c4 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d68c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68c6:	4607      	mov	r7, r0
   d68c8:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d68ca:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d68cc:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d68ce:	4638      	mov	r0, r7
   d68d0:	f7ff ffb3 	bl	d683a <_ZN7OneWire8read_bitEv>
   d68d4:	b100      	cbz	r0, d68d8 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d68d6:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d68d8:	0064      	lsls	r4, r4, #1
   d68da:	3e01      	subs	r6, #1
   d68dc:	b2e4      	uxtb	r4, r4
   d68de:	d1f6      	bne.n	d68ce <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
   d68e0:	4628      	mov	r0, r5
   d68e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68e4 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d68e4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d68e6:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d68e8:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
   d68ea:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d68ec:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
   d68ee:	f7ff ffc6 	bl	d687e <_ZN7OneWire5writeEhh>
   d68f2:	1e65      	subs	r5, r4, #1
   d68f4:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
   d68f6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d68fa:	2200      	movs	r2, #0
   d68fc:	4630      	mov	r0, r6
   d68fe:	f7ff ffbe 	bl	d687e <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
   d6902:	42a5      	cmp	r5, r4
   d6904:	d1f7      	bne.n	d68f6 <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
   d6906:	bd70      	pop	{r4, r5, r6, pc}

000d6908 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d6908:	2200      	movs	r2, #0
   d690a:	21cc      	movs	r1, #204	; 0xcc
   d690c:	f7ff bfb7 	b.w	d687e <_ZN7OneWire5writeEhh>

000d6910 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d6910:	2300      	movs	r3, #0
   d6912:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d6914:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d6916:	72c3      	strb	r3, [r0, #11]
   d6918:	f100 020a 	add.w	r2, r0, #10
   d691c:	3002      	adds	r0, #2

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d691e:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
   d6922:	4282      	cmp	r2, r0
   d6924:	d1fb      	bne.n	d691e <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
   d6926:	4770      	bx	lr

000d6928 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d6928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d692c:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d692e:	4604      	mov	r4, r0
   d6930:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d6932:	2d00      	cmp	r5, #0
   d6934:	d15e      	bne.n	d69f4 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
   d6936:	f7ff ff0d 	bl	d6754 <_ZN7OneWire5resetEv>
   d693a:	b920      	cbnz	r0, d6946 <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
   d693c:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d693e:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d6940:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d6942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d6946:	462a      	mov	r2, r5
   d6948:	21f0      	movs	r1, #240	; 0xf0
   d694a:	4620      	mov	r0, r4
   d694c:	f7ff ff97 	bl	d687e <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d6950:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d6952:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d6954:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d6956:	4620      	mov	r0, r4
   d6958:	f7ff ff6f 	bl	d683a <_ZN7OneWire8read_bitEv>
   d695c:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ff6b 	bl	d683a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d6964:	f1b9 0f01 	cmp.w	r9, #1
   d6968:	d102      	bne.n	d6970 <_ZN7OneWire6searchEPh+0x48>
   d696a:	2801      	cmp	r0, #1
   d696c:	d11b      	bne.n	d69a6 <_ZN7OneWire6searchEPh+0x7e>
   d696e:	e037      	b.n	d69e0 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
   d6970:	4581      	cmp	r9, r0
   d6972:	eb04 0305 	add.w	r3, r4, r5
   d6976:	d11e      	bne.n	d69b6 <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d6978:	7aa2      	ldrb	r2, [r4, #10]
   d697a:	4297      	cmp	r7, r2
   d697c:	d207      	bcs.n	d698e <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d697e:	789a      	ldrb	r2, [r3, #2]
   d6980:	4216      	tst	r6, r2
   d6982:	bf14      	ite	ne
   d6984:	f04f 0901 	movne.w	r9, #1
   d6988:	f04f 0900 	moveq.w	r9, #0
   d698c:	e004      	b.n	d6998 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d698e:	bf0c      	ite	eq
   d6990:	f04f 0901 	moveq.w	r9, #1
   d6994:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
   d6998:	f1b9 0f00 	cmp.w	r9, #0
   d699c:	d103      	bne.n	d69a6 <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d699e:	2f08      	cmp	r7, #8
   d69a0:	d808      	bhi.n	d69b4 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d69a2:	72e7      	strb	r7, [r4, #11]
   d69a4:	e006      	b.n	d69b4 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d69a6:	1962      	adds	r2, r4, r5
   d69a8:	f04f 0901 	mov.w	r9, #1
   d69ac:	7893      	ldrb	r3, [r2, #2]
   d69ae:	4333      	orrs	r3, r6
   d69b0:	7093      	strb	r3, [r2, #2]
   d69b2:	e004      	b.n	d69be <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d69b4:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d69b6:	789a      	ldrb	r2, [r3, #2]
   d69b8:	ea22 0206 	bic.w	r2, r2, r6
   d69bc:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d69be:	4649      	mov	r1, r9
   d69c0:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d69c2:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d69c4:	f7ff ff05 	bl	d67d2 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d69c8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d69cc:	bf04      	itt	eq
   d69ce:	3501      	addeq	r5, #1
   d69d0:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d69d2:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d69d6:	bf08      	it	eq
   d69d8:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d69da:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d69dc:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d69de:	d9ba      	bls.n	d6956 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d69e0:	2f40      	cmp	r7, #64	; 0x40
   d69e2:	d907      	bls.n	d69f4 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d69e4:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d69e8:	f1ba 0f00 	cmp.w	sl, #0
   d69ec:	d112      	bne.n	d6a14 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d69ee:	2301      	movs	r3, #1
   d69f0:	7323      	strb	r3, [r4, #12]
   d69f2:	e00f      	b.n	d6a14 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d69f4:	2000      	movs	r0, #0
   d69f6:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d69f8:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d69fa:	72e0      	strb	r0, [r4, #11]
   d69fc:	1c63      	adds	r3, r4, #1
   d69fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d6a02:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
   d6a04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d6a08:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d6a0c:	42a3      	cmp	r3, r4
   d6a0e:	d1f9      	bne.n	d6a04 <_ZN7OneWire6searchEPh+0xdc>
   d6a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
   d6a14:	78a3      	ldrb	r3, [r4, #2]
   d6a16:	2b00      	cmp	r3, #0
   d6a18:	d0ec      	beq.n	d69f4 <_ZN7OneWire6searchEPh+0xcc>
   d6a1a:	2001      	movs	r0, #1
   d6a1c:	e7ee      	b.n	d69fc <_ZN7OneWire6searchEPh+0xd4>

000d6a1e <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d6a1e:	b530      	push	{r4, r5, lr}
   d6a20:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d6a22:	2000      	movs	r0, #0

    while (len--)
   d6a24:	3901      	subs	r1, #1
   d6a26:	b2c9      	uxtb	r1, r1
   d6a28:	29ff      	cmp	r1, #255	; 0xff
   d6a2a:	d013      	beq.n	d6a54 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
   d6a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6a30:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d6a32:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
   d6a36:	f013 0f01 	tst.w	r3, #1
   d6a3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d6a3e:	bf1c      	itt	ne
   d6a40:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d6a44:	b2d8      	uxtbne	r0, r3
   d6a46:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d6a48:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
   d6a4c:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d6a50:	d1ef      	bne.n	d6a32 <_ZN7OneWire4crc8EPhh+0x14>
   d6a52:	e7e7      	b.n	d6a24 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
   d6a54:	bd30      	pop	{r4, r5, pc}
	...

000d6a58 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d6a58:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d6a5a:	f001 f9f9 	bl	d7e50 <HAL_Pin_Map>
   d6a5e:	4b01      	ldr	r3, [pc, #4]	; (d6a64 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d6a60:	6018      	str	r0, [r3, #0]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	2003e074 	.word	0x2003e074

000d6a68 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a68:	6842      	ldr	r2, [r0, #4]
   d6a6a:	6803      	ldr	r3, [r0, #0]
   d6a6c:	1050      	asrs	r0, r2, #1
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
   d6a6e:	f012 0f01 	tst.w	r2, #1
   d6a72:	bf18      	it	ne
   d6a74:	580a      	ldrne	r2, [r1, r0]
   d6a76:	4408      	add	r0, r1
   d6a78:	bf18      	it	ne
   d6a7a:	58d3      	ldrne	r3, [r2, r3]
   d6a7c:	4718      	bx	r3

000d6a7e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6a7e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6a80:	2301      	movs	r3, #1
   d6a82:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6a84:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6a86:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d6a88:	b10b      	cbz	r3, d6a8e <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d6a8a:	68c0      	ldr	r0, [r0, #12]
   d6a8c:	e006      	b.n	d6a9c <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6a8e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6a90:	b128      	cbz	r0, d6a9e <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a92:	6883      	ldr	r3, [r0, #8]
   d6a94:	b90b      	cbnz	r3, d6a9a <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6a96:	f003 fbdc 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a9a:	68c3      	ldr	r3, [r0, #12]
   d6a9c:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6a9e:	2301      	movs	r3, #1
   d6aa0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6aa2:	2000      	movs	r0, #0
    }
   d6aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d6aa8:	f001 b962 	b.w	d7d70 <os_thread_exit>

000d6aac <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d6aac:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6aae:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
   d6ab0:	d101      	bne.n	d6ab6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d6ab2:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
   d6ab4:	e005      	b.n	d6ac2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ab6:	2a02      	cmp	r2, #2
   d6ab8:	d103      	bne.n	d6ac2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6aba:	b110      	cbz	r0, d6ac2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
   d6abc:	c903      	ldmia	r1, {r0, r1}
   d6abe:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d6ac2:	2000      	movs	r0, #0
   d6ac4:	4770      	bx	lr

000d6ac6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ac6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6ac8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6aca:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6acc:	b113      	cbz	r3, d6ad4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ace:	2203      	movs	r2, #3
   d6ad0:	4601      	mov	r1, r0
   d6ad2:	4798      	blx	r3
    }
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	bd10      	pop	{r4, pc}

000d6ad8 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6ad8:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6adc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6ae0:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
   d6ae2:	3008      	adds	r0, #8
   d6ae4:	f001 f91c 	bl	d7d20 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6ae8:	2004      	movs	r0, #4
   d6aea:	f7fd fad6 	bl	d409a <_Znwj>
   d6aee:	4604      	mov	r4, r0
   d6af0:	2800      	cmp	r0, #0
   d6af2:	d035      	beq.n	d6b60 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6af4:	491c      	ldr	r1, [pc, #112]	; (d6b68 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
   d6af6:	2014      	movs	r0, #20
   d6af8:	f003 fb9a 	bl	da230 <_ZnwjRKSt9nothrow_t>
   d6afc:	b130      	cbz	r0, d6b0c <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6afe:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d6b00:	7403      	strb	r3, [r0, #16]
   d6b02:	6003      	str	r3, [r0, #0]
   d6b04:	6043      	str	r3, [r0, #4]
   d6b06:	6083      	str	r3, [r0, #8]
   d6b08:	60c3      	str	r3, [r0, #12]
   d6b0a:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b0c:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d6b0e:	b1b0      	cbz	r0, d6b3e <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
   d6b10:	4b16      	ldr	r3, [pc, #88]	; (d6b6c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6b12:	6083      	str	r3, [r0, #8]
   d6b14:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6b16:	4916      	ldr	r1, [pc, #88]	; (d6b70 <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d6b18:	60dd      	str	r5, [r3, #12]
   d6b1a:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6b20:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6b24:	2202      	movs	r2, #2
   d6b26:	4b13      	ldr	r3, [pc, #76]	; (d6b74 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d6b28:	3004      	adds	r0, #4
   d6b2a:	f001 f8c9 	bl	d7cc0 <os_thread_create>
   d6b2e:	b930      	cbnz	r0, d6b3e <_ZN21PublishQueueAsyncBase5setupEv+0x66>
   d6b30:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d6b32:	7c1b      	ldrb	r3, [r3, #16]
   d6b34:	b9a3      	cbnz	r3, d6b60 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d6b36:	2001      	movs	r0, #1
   d6b38:	f001 f942 	bl	d7dc0 <HAL_Delay_Milliseconds>
   d6b3c:	e7f8      	b.n	d6b30 <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b3e:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b40:	2300      	movs	r3, #0
   d6b42:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b44:	b166      	cbz	r6, d6b60 <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b46:	6837      	ldr	r7, [r6, #0]
   d6b48:	b137      	cbz	r7, d6b58 <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b4a:	4638      	mov	r0, r7
   d6b4c:	f7ff ffbb 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b50:	2110      	movs	r1, #16
   d6b52:	4638      	mov	r0, r7
   d6b54:	f003 fb61 	bl	da21a <_ZdlPvj>
   d6b58:	2114      	movs	r1, #20
   d6b5a:	4630      	mov	r0, r6
   d6b5c:	f003 fb5d 	bl	da21a <_ZdlPvj>
   d6b60:	606c      	str	r4, [r5, #4]
}
   d6b62:	b003      	add	sp, #12
   d6b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b66:	bf00      	nop
   d6b68:	000dd9f0 	.word	0x000dd9f0
   d6b6c:	000d6d8b 	.word	0x000d6d8b
   d6b70:	000dd158 	.word	0x000dd158
   d6b74:	000d6a7f 	.word	0x000d6a7f

000d6b78 <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6b78:	f247 5130 	movw	r1, #30000	; 0x7530
   d6b7c:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6b7e:	490a      	ldr	r1, [pc, #40]	; (d6ba8 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6b80:	4a0a      	ldr	r2, [pc, #40]	; (d6bac <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6b82:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6b84:	490a      	ldr	r1, [pc, #40]	; (d6bb0 <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
   d6b86:	6002      	str	r2, [r0, #0]
   d6b88:	61c1      	str	r1, [r0, #28]
   d6b8a:	2200      	movs	r2, #0
	    _M_manager = &_My_handler::_M_manager;
   d6b8c:	4909      	ldr	r1, [pc, #36]	; (d6bb4 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
   d6b8e:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6b90:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6b92:	6181      	str	r1, [r0, #24]
   d6b94:	6202      	str	r2, [r0, #32]
   d6b96:	6242      	str	r2, [r0, #36]	; 0x24
   d6b98:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   d6b9c:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   d6ba0:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
   d6ba4:	4770      	bx	lr
   d6ba6:	bf00      	nop
   d6ba8:	000d6ee5 	.word	0x000d6ee5
   d6bac:	000dd21c 	.word	0x000dd21c
   d6bb0:	000d6a69 	.word	0x000d6a69
   d6bb4:	000d6aad 	.word	0x000d6aad

000d6bb8 <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6bb8:	b510      	push	{r4, lr}
   d6bba:	4b04      	ldr	r3, [pc, #16]	; (d6bcc <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6bbc:	4604      	mov	r4, r0
   d6bbe:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bc2:	f7ff ff80 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>

}
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	bd10      	pop	{r4, pc}
   d6bca:	bf00      	nop
   d6bcc:	000dd21c 	.word	0x000dd21c

000d6bd0 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6bd0:	b510      	push	{r4, lr}
   d6bd2:	4b03      	ldr	r3, [pc, #12]	; (d6be0 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6bd4:	6003      	str	r3, [r0, #0]
   d6bd6:	4604      	mov	r4, r0
   d6bd8:	f7ff ffee 	bl	d6bb8 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6bdc:	4620      	mov	r0, r4
   d6bde:	bd10      	pop	{r4, pc}
   d6be0:	000dd138 	.word	0x000dd138

000d6be4 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6be4:	b510      	push	{r4, lr}
   d6be6:	4604      	mov	r4, r0

}
   d6be8:	f7ff fff2 	bl	d6bd0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6bec:	4620      	mov	r0, r4
   d6bee:	2138      	movs	r1, #56	; 0x38
   d6bf0:	f003 fb13 	bl	da21a <_ZdlPvj>
   d6bf4:	4620      	mov	r0, r4
   d6bf6:	bd10      	pop	{r4, pc}

000d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
   d6bf8:	6880      	ldr	r0, [r0, #8]
   d6bfa:	f001 b899 	b.w	d7d30 <os_mutex_lock>

000d6bfe <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
   d6bfe:	6880      	ldr	r0, [r0, #8]
   d6c00:	f001 b89e 	b.w	d7d40 <os_mutex_unlock>

000d6c04 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6c04:	b510      	push	{r4, lr}
   d6c06:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6c08:	6800      	ldr	r0, [r0, #0]
   d6c0a:	f7ff fff8 	bl	d6bfe <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6c0e:	4620      	mov	r0, r4
   d6c10:	bd10      	pop	{r4, pc}

000d6c12 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6c12:	b513      	push	{r0, r1, r4, lr}
   d6c14:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6c16:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6c18:	f7ff ffee 	bl	d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6c1e:	88dc      	ldrh	r4, [r3, #6]
   d6c20:	b2a4      	uxth	r4, r4
   d6c22:	b10c      	cbz	r4, d6c28 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6c24:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6c28:	a801      	add	r0, sp, #4
   d6c2a:	f7ff ffeb 	bl	d6c04 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
   d6c2e:	4620      	mov	r0, r4
   d6c30:	b002      	add	sp, #8
   d6c32:	bd10      	pop	{r4, pc}

000d6c34 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6c34:	b513      	push	{r0, r1, r4, lr}
   d6c36:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6c38:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6c3a:	f7ff ffdd 	bl	d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6c3e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6c42:	b91b      	cbnz	r3, d6c4c <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6c44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
   d6c46:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
   d6c48:	80d3      	strh	r3, [r2, #6]
   d6c4a:	e000      	b.n	d6c4e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
   d6c4c:	2400      	movs	r4, #0

	StMutexLock lock(this);
   d6c4e:	a801      	add	r0, sp, #4
   d6c50:	f7ff ffd8 	bl	d6c04 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
   d6c54:	4620      	mov	r0, r4
   d6c56:	b002      	add	sp, #8
   d6c58:	bd10      	pop	{r4, pc}

000d6c5a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6c5c:	ac02      	add	r4, sp, #8
   d6c5e:	4605      	mov	r5, r0
   d6c60:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
   d6c64:	f7ff ffc8 	bl	d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6c68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6c6a:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6c6c:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6c6e:	f7ff ffc9 	bl	d6c04 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6c72:	4628      	mov	r0, r5
   d6c74:	b003      	add	sp, #12
   d6c76:	bd30      	pop	{r4, r5, pc}

000d6c78 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c7c:	469a      	mov	sl, r3
   d6c7e:	b086      	sub	sp, #24

	if (!haveSetup) {
   d6c80:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6c84:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d6c88:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6c8c:	4604      	mov	r4, r0
   d6c8e:	4688      	mov	r8, r1
   d6c90:	4616      	mov	r6, r2

	if (!haveSetup) {
   d6c92:	b913      	cbnz	r3, d6c9a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6c94:	6803      	ldr	r3, [r0, #0]
   d6c96:	689b      	ldr	r3, [r3, #8]
   d6c98:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
   d6c9a:	4b31      	ldr	r3, [pc, #196]	; (d6d60 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6c9c:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
   d6c9e:	2e00      	cmp	r6, #0
   d6ca0:	bf08      	it	eq
   d6ca2:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6ca4:	f005 fafa 	bl	dc29c <strlen>
   d6ca8:	4605      	mov	r5, r0
   d6caa:	4630      	mov	r0, r6
   d6cac:	f005 faf6 	bl	dc29c <strlen>
   d6cb0:	4428      	add	r0, r5
   d6cb2:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6cb6:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6cb8:	bf1c      	itt	ne
   d6cba:	f025 0503 	bicne.w	r5, r5, #3
   d6cbe:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6cc0:	4633      	mov	r3, r6
   d6cc2:	9503      	str	r5, [sp, #12]
   d6cc4:	9702      	str	r7, [sp, #8]
   d6cc6:	f8cd 9004 	str.w	r9, [sp, #4]
   d6cca:	f8cd a000 	str.w	sl, [sp]
   d6cce:	4642      	mov	r2, r8
   d6cd0:	4924      	ldr	r1, [pc, #144]	; (d6d64 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6cd2:	4825      	ldr	r0, [pc, #148]	; (d6d68 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6cd4:	f7fd faeb 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6cd8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6cda:	3b08      	subs	r3, #8
   d6cdc:	429d      	cmp	r5, r3
   d6cde:	d90f      	bls.n	d6d00 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
   d6ce0:	2400      	movs	r4, #0
   d6ce2:	e038      	b.n	d6d56 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
   d6ce4:	88cb      	ldrh	r3, [r1, #6]
   d6ce6:	2b01      	cmp	r3, #1
   d6ce8:	d031      	beq.n	d6d4e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
   d6cea:	a805      	add	r0, sp, #20
   d6cec:	f7ff ff8a 	bl	d6c04 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
   d6cf0:	6823      	ldr	r3, [r4, #0]
   d6cf2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6cf6:	699b      	ldr	r3, [r3, #24]
   d6cf8:	4620      	mov	r0, r4
   d6cfa:	4798      	blx	r3
   d6cfc:	2800      	cmp	r0, #0
   d6cfe:	d0ef      	beq.n	d6ce0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
   d6d00:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6d02:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6d04:	f7ff ff78 	bl	d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6d08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
   d6d0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6d0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d6d0e:	440b      	add	r3, r1
   d6d10:	1a9b      	subs	r3, r3, r2
   d6d12:	429d      	cmp	r5, r3
   d6d14:	d8e6      	bhi.n	d6ce4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
   d6d16:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
   d6d1a:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
   d6d1e:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
   d6d20:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6d22:	3708      	adds	r7, #8

				strcpy(cp, eventName);
   d6d24:	4641      	mov	r1, r8
   d6d26:	4638      	mov	r0, r7
   d6d28:	f004 fd80 	bl	db82c <strcpy>
				cp += strlen(cp) + 1;
   d6d2c:	4638      	mov	r0, r7
   d6d2e:	f005 fab5 	bl	dc29c <strlen>

				strcpy(cp, data);
   d6d32:	3001      	adds	r0, #1
   d6d34:	4631      	mov	r1, r6
   d6d36:	4438      	add	r0, r7
   d6d38:	f004 fd78 	bl	db82c <strcpy>

				nextFree += size;
   d6d3c:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6d3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
   d6d40:	4428      	add	r0, r5
   d6d42:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
   d6d44:	88d3      	ldrh	r3, [r2, #6]
   d6d46:	3301      	adds	r3, #1
   d6d48:	80d3      	strh	r3, [r2, #6]
				return true;
   d6d4a:	2401      	movs	r4, #1
   d6d4c:	e000      	b.n	d6d50 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
   d6d4e:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
   d6d50:	a805      	add	r0, sp, #20
   d6d52:	f7ff ff57 	bl	d6c04 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
   d6d56:	4620      	mov	r0, r4
   d6d58:	b006      	add	sp, #24
   d6d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d5e:	bf00      	nop
   d6d60:	000dd63e 	.word	0x000dd63e
   d6d64:	000dd16a 	.word	0x000dd16a
   d6d68:	2003e078 	.word	0x2003e078

000d6d6c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4604      	mov	r4, r0
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d70:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d74:	69a3      	ldr	r3, [r4, #24]
   d6d76:	b90b      	cbnz	r3, d6d7c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6d78:	f003 fa6b 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d7c:	69e3      	ldr	r3, [r4, #28]
   d6d7e:	4621      	mov	r1, r4
   d6d80:	4628      	mov	r0, r5
   d6d82:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
   d6d84:	f000 ffac 	bl	d7ce0 <os_thread_yield>
   d6d88:	e7f4      	b.n	d6d74 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6d8a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6d8a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6d8c:	f7ff ffee 	bl	d6d6c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6d90 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6d90:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
   d6d92:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6d96:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6d98:	4620      	mov	r0, r4
   d6d9a:	f005 fa7f 	bl	dc29c <strlen>
   d6d9e:	3001      	adds	r0, #1
   d6da0:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6da2:	4620      	mov	r0, r4
   d6da4:	f005 fa7a 	bl	dc29c <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6da8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6daa:	3001      	adds	r0, #1
   d6dac:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6dae:	1ac3      	subs	r3, r0, r3
   d6db0:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6db4:	bf1c      	itt	ne
   d6db6:	f1c3 0304 	rsbne	r3, r3, #4
   d6dba:	18c0      	addne	r0, r0, r3
	}


	return start;
}
   d6dbc:	bd38      	pop	{r3, r4, r5, pc}

000d6dbe <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6dbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6dc2:	4605      	mov	r5, r0
   d6dc4:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6dc6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6dc8:	f7ff ff16 	bl	d6bf8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6dcc:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6dce:	f106 0708 	add.w	r7, r6, #8
   d6dd2:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
   d6dd4:	f1b8 0f00 	cmp.w	r8, #0
   d6dd8:	d007      	beq.n	d6dea <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
   d6dda:	2c01      	cmp	r4, #1
   d6ddc:	d91c      	bls.n	d6e18 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
   d6dde:	4639      	mov	r1, r7
   d6de0:	4628      	mov	r0, r5
   d6de2:	f7ff ffd5 	bl	d6d90 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6de6:	4607      	mov	r7, r0
   d6de8:	e000      	b.n	d6dec <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
   d6dea:	b1b4      	cbz	r4, d6e1a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6dec:	4639      	mov	r1, r7
   d6dee:	4628      	mov	r0, r5
   d6df0:	f7ff ffce 	bl	d6d90 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
   d6df4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   d6df6:	4432      	add	r2, r6
	if (after > 0) {
   d6df8:	1a12      	subs	r2, r2, r0
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6dfa:	4601      	mov	r1, r0
	size_t len = next - start;
   d6dfc:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
   d6e00:	d002      	beq.n	d6e08 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
   d6e02:	4638      	mov	r0, r7
   d6e04:	f004 fa6f 	bl	db2e6 <memmove>
	}

	nextFree -= len;
   d6e08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d6e0a:	1b1b      	subs	r3, r3, r4
   d6e0c:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
   d6e0e:	88f3      	ldrh	r3, [r6, #6]
   d6e10:	3b01      	subs	r3, #1
   d6e12:	80f3      	strh	r3, [r6, #6]


	return true;
   d6e14:	2401      	movs	r4, #1
   d6e16:	e000      	b.n	d6e1a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
   d6e18:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6e1a:	a801      	add	r0, sp, #4
   d6e1c:	f7ff fef2 	bl	d6c04 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
   d6e20:	4620      	mov	r0, r4
   d6e22:	b002      	add	sp, #8
   d6e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e28 <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e2c:	4604      	mov	r4, r0
   d6e2e:	460d      	mov	r5, r1
   d6e30:	4690      	mov	r8, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6e32:	2600      	movs	r6, #0
   d6e34:	f7ff fea0 	bl	d6b78 <_ZN21PublishQueueAsyncBaseC1Ev>

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6e38:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6e3a:	4b15      	ldr	r3, [pc, #84]	; (d6e90 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
   d6e3c:	6023      	str	r3, [r4, #0]
   d6e3e:	62e5      	str	r5, [r4, #44]	; 0x2c
   d6e40:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
   d6e44:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6e46:	4b13      	ldr	r3, [pc, #76]	; (d6e94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
   d6e48:	f857 2b08 	ldr.w	r2, [r7], #8
   d6e4c:	429a      	cmp	r2, r3
   d6e4e:	4699      	mov	r9, r3
   d6e50:	d114      	bne.n	d6e7c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6e52:	88ab      	ldrh	r3, [r5, #4]
   d6e54:	b29b      	uxth	r3, r3
   d6e56:	4598      	cmp	r8, r3
   d6e58:	d110      	bne.n	d6e7c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6e5a:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6e5e:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6e60:	88eb      	ldrh	r3, [r5, #6]
   d6e62:	b2b2      	uxth	r2, r6
   d6e64:	b29b      	uxth	r3, r3
   d6e66:	429a      	cmp	r2, r3
   d6e68:	d20f      	bcs.n	d6e8a <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
   d6e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	f7ff ff8f 	bl	d6d90 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6e72:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
   d6e74:	6360      	str	r0, [r4, #52]	; 0x34
   d6e76:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
   d6e7a:	d2f1      	bcs.n	d6e60 <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
   d6e7c:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6e7e:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
   d6e82:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
   d6e86:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6e88:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
   d6e8a:	4620      	mov	r0, r4
   d6e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e90:	000dd138 	.word	0x000dd138
   d6e94:	d19cab61 	.word	0xd19cab61

000d6e98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6e98:	b510      	push	{r4, lr}
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6e9a:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6e9e:	b086      	sub	sp, #24
   d6ea0:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6ea2:	9202      	str	r2, [sp, #8]
   d6ea4:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ea6:	ab02      	add	r3, sp, #8
   d6ea8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6eac:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6eb4:	68a2      	ldr	r2, [r4, #8]
   d6eb6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6eba:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6ebe:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ec0:	4a06      	ldr	r2, [pc, #24]	; (d6edc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
   d6ec2:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6ec4:	68e2      	ldr	r2, [r4, #12]
   d6ec6:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ec8:	4a05      	ldr	r2, [pc, #20]	; (d6ee0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
   d6eca:	60e2      	str	r2, [r4, #12]
   d6ecc:	e884 0003 	stmia.w	r4, {r0, r1}
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ed0:	4618      	mov	r0, r3
   d6ed2:	f7ff fdf8 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	b006      	add	sp, #24
   d6eda:	bd10      	pop	{r4, pc}
   d6edc:	000d6aad 	.word	0x000d6aad
   d6ee0:	000d6a69 	.word	0x000d6a69

000d6ee4 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
   d6ee4:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6ee6:	4b05      	ldr	r3, [pc, #20]	; (d6efc <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6ee8:	9300      	str	r3, [sp, #0]
   d6eea:	4669      	mov	r1, sp
   d6eec:	2300      	movs	r3, #0
   d6eee:	3010      	adds	r0, #16
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	f7ff ffd1 	bl	d6e98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
   d6ef6:	b003      	add	sp, #12
   d6ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   d6efc:	000d6f2d 	.word	0x000d6f2d

000d6f00 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   d6f00:	b513      	push	{r0, r1, r4, lr}
   d6f02:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6f04:	f000 ff6c 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6f0a:	1ac0      	subs	r0, r0, r3
   d6f0c:	68e3      	ldr	r3, [r4, #12]
   d6f0e:	4298      	cmp	r0, r3
   d6f10:	d308      	bcc.n	d6f24 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6f12:	4b05      	ldr	r3, [pc, #20]	; (d6f28 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6f14:	9300      	str	r3, [sp, #0]
   d6f16:	4669      	mov	r1, sp
   d6f18:	2300      	movs	r3, #0
   d6f1a:	f104 0010 	add.w	r0, r4, #16
   d6f1e:	9301      	str	r3, [sp, #4]
   d6f20:	f7ff ffba 	bl	d6e98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
   d6f24:	b002      	add	sp, #8
   d6f26:	bd10      	pop	{r4, pc}
   d6f28:	000d6f2d 	.word	0x000d6f2d

000d6f2c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6f30:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6f34:	b086      	sub	sp, #24
   d6f36:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6f38:	2b00      	cmp	r3, #0
   d6f3a:	d173      	bne.n	d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6f3c:	f001 f9b0 	bl	d82a0 <spark_cloud_flag_connected>
   d6f40:	2800      	cmp	r0, #0
   d6f42:	d06f      	beq.n	d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
   d6f44:	f000 ff4c 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   d6f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6f4a:	1ac0      	subs	r0, r0, r3
   d6f4c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6f50:	4298      	cmp	r0, r3
   d6f52:	d967      	bls.n	d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
   d6f54:	6823      	ldr	r3, [r4, #0]
   d6f56:	4620      	mov	r0, r4
   d6f58:	695b      	ldr	r3, [r3, #20]
   d6f5a:	4798      	blx	r3
		if (data) {
   d6f5c:	4605      	mov	r5, r0
   d6f5e:	2800      	cmp	r0, #0
   d6f60:	d060      	beq.n	d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6f62:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
   d6f66:	2301      	movs	r3, #1
   d6f68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6f6c:	4630      	mov	r0, r6
   d6f6e:	f005 f995 	bl	dc29c <strlen>

			PublishFlags flags(PublishFlag(data->flags));
   d6f72:	f895 8004 	ldrb.w	r8, [r5, #4]

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6f76:	f8cd 8004 	str.w	r8, [sp, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6f7a:	3001      	adds	r0, #1
   d6f7c:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6f7e:	682b      	ldr	r3, [r5, #0]
   d6f80:	9300      	str	r3, [sp, #0]
   d6f82:	4632      	mov	r2, r6
   d6f84:	463b      	mov	r3, r7
   d6f86:	4929      	ldr	r1, [pc, #164]	; (d702c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6f88:	4829      	ldr	r0, [pc, #164]	; (d7030 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6f8a:	f7fd f990 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6f8e:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6f90:	f88d 8000 	strb.w	r8, [sp]
   d6f94:	463a      	mov	r2, r7
   d6f96:	4631      	mov	r1, r6
   d6f98:	a802      	add	r0, sp, #8
   d6f9a:	f001 fd5b 	bl	d8a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6f9e:	9d02      	ldr	r5, [sp, #8]
   d6fa0:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
   d6fa2:	b91b      	cbnz	r3, d6fac <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6fa4:	2001      	movs	r0, #1
   d6fa6:	f001 fa5b 	bl	d8460 <delay>
   d6faa:	e7f8      	b.n	d6f9e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6fac:	2000      	movs	r0, #0
   d6fae:	f001 f911 	bl	d81d4 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d6fb2:	b120      	cbz	r0, d6fbe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6fb4:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6fb6:	b913      	cbnz	r3, d6fbe <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d6fb8:	f001 f95a 	bl	d8270 <spark_process>
   d6fbc:	e7fa      	b.n	d6fb4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6fbe:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
   d6fc0:	2b01      	cmp	r3, #1
   d6fc2:	d109      	bne.n	d6fd8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
   d6fc4:	491b      	ldr	r1, [pc, #108]	; (d7034 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6fc6:	481a      	ldr	r0, [pc, #104]	; (d7030 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6fc8:	f7fd f971 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6fcc:	6823      	ldr	r3, [r4, #0]
   d6fce:	2100      	movs	r1, #0
   d6fd0:	699b      	ldr	r3, [r3, #24]
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	4798      	blx	r3
   d6fd6:	e00d      	b.n	d6ff4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6fd8:	4917      	ldr	r1, [pc, #92]	; (d7038 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6fda:	4815      	ldr	r0, [pc, #84]	; (d7030 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6fdc:	68e2      	ldr	r2, [r4, #12]
   d6fde:	f7fd f966 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6fe2:	4b16      	ldr	r3, [pc, #88]	; (d703c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6fe4:	9304      	str	r3, [sp, #16]
   d6fe6:	a904      	add	r1, sp, #16
   d6fe8:	2300      	movs	r3, #0
   d6fea:	f104 0010 	add.w	r0, r4, #16
   d6fee:	9305      	str	r3, [sp, #20]
   d6ff0:	f7ff ff52 	bl	d6e98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
   d6ff4:	2300      	movs	r3, #0
   d6ff6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6ffa:	f000 fef1 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6ffe:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7000:	9c03      	ldr	r4, [sp, #12]
   d7002:	b17c      	cbz	r4, d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7004:	6863      	ldr	r3, [r4, #4]
   d7006:	3b01      	subs	r3, #1
   d7008:	6063      	str	r3, [r4, #4]
   d700a:	b95b      	cbnz	r3, d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
   d700c:	6823      	ldr	r3, [r4, #0]
   d700e:	4620      	mov	r0, r4
   d7010:	689b      	ldr	r3, [r3, #8]
   d7012:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7014:	68a3      	ldr	r3, [r4, #8]
   d7016:	3b01      	subs	r3, #1
   d7018:	60a3      	str	r3, [r4, #8]
   d701a:	b91b      	cbnz	r3, d7024 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
   d701c:	6823      	ldr	r3, [r4, #0]
   d701e:	4620      	mov	r0, r4
   d7020:	68db      	ldr	r3, [r3, #12]
   d7022:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
   d7024:	b006      	add	sp, #24
   d7026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d702a:	bf00      	nop
   d702c:	000dd1ab 	.word	0x000dd1ab
   d7030:	2003e078 	.word	0x2003e078
   d7034:	000dd1cc 	.word	0x000dd1cc
   d7038:	000dd1e3 	.word	0x000dd1e3
   d703c:	000d6f01 	.word	0x000d6f01

000d7040 <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d7040:	b508      	push	{r3, lr}
   d7042:	f000 ff05 	bl	d7e50 <HAL_Pin_Map>
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <_GLOBAL__sub_I_pubqLogger+0x10>)
   d7048:	4a02      	ldr	r2, [pc, #8]	; (d7054 <_GLOBAL__sub_I_pubqLogger+0x14>)
   d704a:	601a      	str	r2, [r3, #0]
   d704c:	bd08      	pop	{r3, pc}
   d704e:	bf00      	nop
   d7050:	2003e078 	.word	0x2003e078
   d7054:	000dd20a 	.word	0x000dd20a

000d7058 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d7058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d705a:	4602      	mov	r2, r0
   d705c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d705e:	7913      	ldrb	r3, [r2, #4]
   d7060:	6895      	ldr	r5, [r2, #8]
   d7062:	b133      	cbz	r3, d7072 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d7064:	b93d      	cbnz	r5, d7076 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d7066:	490c      	ldr	r1, [pc, #48]	; (d7098 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d7068:	b004      	add	sp, #16
   d706a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d706e:	f002 b973 	b.w	d9358 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d7072:	4b0a      	ldr	r3, [pc, #40]	; (d709c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d7074:	e000      	b.n	d7078 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d7076:	4b0a      	ldr	r3, [pc, #40]	; (d70a0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d7078:	7b16      	ldrb	r6, [r2, #12]
   d707a:	4c0a      	ldr	r4, [pc, #40]	; (d70a4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d707c:	490a      	ldr	r1, [pc, #40]	; (d70a8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d707e:	7b52      	ldrb	r2, [r2, #13]
   d7080:	9202      	str	r2, [sp, #8]
   d7082:	2e01      	cmp	r6, #1
   d7084:	bf08      	it	eq
   d7086:	4621      	moveq	r1, r4
   d7088:	9101      	str	r1, [sp, #4]
   d708a:	9500      	str	r5, [sp, #0]
   d708c:	4a07      	ldr	r2, [pc, #28]	; (d70ac <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d708e:	2100      	movs	r1, #0
   d7090:	f002 fa69 	bl	d9566 <_ZN5Print11printf_implEbPKcz>
  }
   d7094:	b004      	add	sp, #16
   d7096:	bd70      	pop	{r4, r5, r6, pc}
   d7098:	000dd259 	.word	0x000dd259
   d709c:	000dd63e 	.word	0x000dd63e
   d70a0:	000dd248 	.word	0x000dd248
   d70a4:	000dd251 	.word	0x000dd251
   d70a8:	000dd255 	.word	0x000dd255
   d70ac:	000dd26f 	.word	0x000dd26f

000d70b0 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d70b0:	b510      	push	{r4, lr}
   d70b2:	4b05      	ldr	r3, [pc, #20]	; (d70c8 <_ZN12AssetTrackerD1Ev+0x18>)
   d70b4:	4604      	mov	r4, r0
   d70b6:	f840 3b20 	str.w	r3, [r0], #32
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70ba:	f7ff fd04 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
   d70be:	4620      	mov	r0, r4
   d70c0:	f000 f9c2 	bl	d7448 <_ZN13LegacyAdapterD1Ev>

}
   d70c4:	4620      	mov	r0, r4
   d70c6:	bd10      	pop	{r4, pc}
   d70c8:	000dd32c 	.word	0x000dd32c

000d70cc <_ZN12AssetTrackerD0Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d70cc:	b510      	push	{r4, lr}
   d70ce:	4604      	mov	r4, r0

}
   d70d0:	f7ff ffee 	bl	d70b0 <_ZN12AssetTrackerD1Ev>
   d70d4:	4620      	mov	r0, r4
   d70d6:	2130      	movs	r1, #48	; 0x30
   d70d8:	f003 f89f 	bl	da21a <_ZdlPvj>
   d70dc:	4620      	mov	r0, r4
   d70de:	bd10      	pop	{r4, pc}

000d70e0 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d70e0:	6803      	ldr	r3, [r0, #0]
   d70e2:	b2c9      	uxtb	r1, r1
   d70e4:	689b      	ldr	r3, [r3, #8]
   d70e6:	4718      	bx	r3

000d70e8 <_ZN12AssetTrackerC1Ev>:
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d70e8:	b538      	push	{r3, r4, r5, lr}
   d70ea:	490b      	ldr	r1, [pc, #44]	; (d7118 <_ZN12AssetTrackerC1Ev+0x30>)
   d70ec:	4604      	mov	r4, r0
   d70ee:	2500      	movs	r5, #0
   d70f0:	f000 f9b2 	bl	d7458 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d70f4:	4b09      	ldr	r3, [pc, #36]	; (d711c <_ZN12AssetTrackerC1Ev+0x34>)
   d70f6:	6023      	str	r3, [r4, #0]
   d70f8:	7225      	strb	r5, [r4, #8]

	void threadFunction();
	static void threadFunctionStatic(void *param);

	bool useWire = false;
	TwoWire &wire = Wire;
   d70fa:	f003 f863 	bl	da1c4 <_Z19__fetch_global_Wirev>
   d70fe:	2342      	movs	r3, #66	; 0x42
   d7100:	7423      	strb	r3, [r4, #16]
   d7102:	60e0      	str	r0, [r4, #12]
	uint8_t wireAddr = 0x42;
	USARTSerial &serialPort = Serial1;
   d7104:	f002 fe82 	bl	d9e0c <_Z22__fetch_global_Serial1v>
	instance = this;
   d7108:	4b05      	ldr	r3, [pc, #20]	; (d7120 <_ZN12AssetTrackerC1Ev+0x38>)
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d710a:	6160      	str	r0, [r4, #20]
   d710c:	61a5      	str	r5, [r4, #24]
   d710e:	61e5      	str	r5, [r4, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7110:	62a5      	str	r5, [r4, #40]	; 0x28
	instance = this;
   d7112:	601c      	str	r4, [r3, #0]
}
   d7114:	4620      	mov	r0, r4
   d7116:	bd38      	pop	{r3, r4, r5, pc}
   d7118:	2003e0b4 	.word	0x2003e0b4
   d711c:	000dd32c 	.word	0x000dd32c
   d7120:	2003e088 	.word	0x2003e088

000d7124 <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d7124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d7126:	6985      	ldr	r5, [r0, #24]
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d7128:	4606      	mov	r6, r0
	if (thread == NULL) {
   d712a:	2d00      	cmp	r5, #0
   d712c:	d13b      	bne.n	d71a6 <_ZN12AssetTracker17startThreadedModeEv+0x82>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d712e:	2004      	movs	r0, #4
   d7130:	f7fc ffb3 	bl	d409a <_Znwj>
   d7134:	4604      	mov	r4, r0
   d7136:	2800      	cmp	r0, #0
   d7138:	d034      	beq.n	d71a4 <_ZN12AssetTracker17startThreadedModeEv+0x80>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d713a:	491c      	ldr	r1, [pc, #112]	; (d71ac <_ZN12AssetTracker17startThreadedModeEv+0x88>)
   d713c:	2014      	movs	r0, #20
   d713e:	f003 f877 	bl	da230 <_ZnwjRKSt9nothrow_t>
   d7142:	b128      	cbz	r0, d7150 <_ZN12AssetTracker17startThreadedModeEv+0x2c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7144:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7146:	6005      	str	r5, [r0, #0]
   d7148:	6045      	str	r5, [r0, #4]
   d714a:	6085      	str	r5, [r0, #8]
   d714c:	60c5      	str	r5, [r0, #12]
   d714e:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7150:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d7152:	b1b0      	cbz	r0, d7182 <_ZN12AssetTracker17startThreadedModeEv+0x5e>
            goto error;
        }
        d_->func = function;
   d7154:	4b16      	ldr	r3, [pc, #88]	; (d71b0 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d7156:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7158:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d715a:	4916      	ldr	r1, [pc, #88]	; (d71b4 <_ZN12AssetTracker17startThreadedModeEv+0x90>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d715c:	60de      	str	r6, [r3, #12]
   d715e:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7160:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7164:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7168:	2202      	movs	r2, #2
   d716a:	4b13      	ldr	r3, [pc, #76]	; (d71b8 <_ZN12AssetTracker17startThreadedModeEv+0x94>)
   d716c:	3004      	adds	r0, #4
   d716e:	f000 fda7 	bl	d7cc0 <os_thread_create>
   d7172:	b930      	cbnz	r0, d7182 <_ZN12AssetTracker17startThreadedModeEv+0x5e>
   d7174:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d7176:	7c1b      	ldrb	r3, [r3, #16]
   d7178:	b9a3      	cbnz	r3, d71a4 <_ZN12AssetTracker17startThreadedModeEv+0x80>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d717a:	2001      	movs	r0, #1
   d717c:	f000 fe20 	bl	d7dc0 <HAL_Delay_Milliseconds>
   d7180:	e7f8      	b.n	d7174 <_ZN12AssetTracker17startThreadedModeEv+0x50>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7182:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7184:	2300      	movs	r3, #0
   d7186:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7188:	b165      	cbz	r5, d71a4 <_ZN12AssetTracker17startThreadedModeEv+0x80>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d718a:	682f      	ldr	r7, [r5, #0]
   d718c:	b137      	cbz	r7, d719c <_ZN12AssetTracker17startThreadedModeEv+0x78>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d718e:	4638      	mov	r0, r7
   d7190:	f7ff fc99 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7194:	2110      	movs	r1, #16
   d7196:	4638      	mov	r0, r7
   d7198:	f003 f83f 	bl	da21a <_ZdlPvj>
   d719c:	2114      	movs	r1, #20
   d719e:	4628      	mov	r0, r5
   d71a0:	f003 f83b 	bl	da21a <_ZdlPvj>
   d71a4:	61b4      	str	r4, [r6, #24]
	}
}
   d71a6:	b003      	add	sp, #12
   d71a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71aa:	bf00      	nop
   d71ac:	000dd9f0 	.word	0x000dd9f0
   d71b0:	000d73b5 	.word	0x000d73b5
   d71b4:	000dd28d 	.word	0x000dd28d
   d71b8:	000d6a7f 	.word	0x000d6a7f

000d71bc <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d71bc:	b510      	push	{r4, lr}
	useWire = true;
   d71be:	2301      	movs	r3, #1
   d71c0:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d71c2:	68c3      	ldr	r3, [r0, #12]
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d71c4:	4604      	mov	r4, r0
   d71c6:	6848      	ldr	r0, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d71c8:	6058      	str	r0, [r3, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d71ca:	6888      	ldr	r0, [r1, #8]
   d71cc:	6098      	str	r0, [r3, #8]
   d71ce:	68c8      	ldr	r0, [r1, #12]
   d71d0:	60d8      	str	r0, [r3, #12]
  size_t size_;
  bool stop_;
  system_tick_t timeout_;
};

class TwoWire : public Stream
   d71d2:	7c08      	ldrb	r0, [r1, #16]
   d71d4:	7418      	strb	r0, [r3, #16]
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;

	wire.begin();
   d71d6:	4608      	mov	r0, r1
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;
   d71d8:	7422      	strb	r2, [r4, #16]

	wire.begin();
   d71da:	f001 fe39 	bl	d8e50 <_ZN7TwoWire5beginEv>

	return *this;
}
   d71de:	4620      	mov	r0, r4
   d71e0:	bd10      	pop	{r4, pc}
	...

000d71e4 <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d71e4:	b538      	push	{r3, r4, r5, lr}
   d71e6:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d71e8:	7c01      	ldrb	r1, [r0, #16]
   d71ea:	68c0      	ldr	r0, [r0, #12]
   d71ec:	f001 fe64 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d71f0:	21fd      	movs	r1, #253	; 0xfd
   d71f2:	68e8      	ldr	r0, [r5, #12]
   d71f4:	f7ff ff74 	bl	d70e0 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d71f8:	2100      	movs	r1, #0
   d71fa:	68e8      	ldr	r0, [r5, #12]
   d71fc:	f001 fe63 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d7200:	b130      	cbz	r0, d7210 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d7202:	490f      	ldr	r1, [pc, #60]	; (d7240 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d7204:	4602      	mov	r2, r0
   d7206:	480f      	ldr	r0, [pc, #60]	; (d7244 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d7208:	f7fd f851 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d720c:	2000      	movs	r0, #0
   d720e:	bd38      	pop	{r3, r4, r5, pc}
	}

	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d7210:	2202      	movs	r2, #2
   d7212:	2301      	movs	r3, #1
   d7214:	7c29      	ldrb	r1, [r5, #16]
   d7216:	68e8      	ldr	r0, [r5, #12]
   d7218:	f001 fe3c 	bl	d8e94 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d721c:	b2c2      	uxtb	r2, r0
   d721e:	2a02      	cmp	r2, #2
   d7220:	d001      	beq.n	d7226 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d7222:	4909      	ldr	r1, [pc, #36]	; (d7248 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d7224:	e7ef      	b.n	d7206 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
		return 0;
	}

	uint16_t available = wire.read() << 8;
   d7226:	68e8      	ldr	r0, [r5, #12]
   d7228:	6803      	ldr	r3, [r0, #0]
   d722a:	695b      	ldr	r3, [r3, #20]
   d722c:	4798      	blx	r3
   d722e:	4604      	mov	r4, r0
	available |= wire.read();
   d7230:	68e8      	ldr	r0, [r5, #12]
   d7232:	6803      	ldr	r3, [r0, #0]
   d7234:	695b      	ldr	r3, [r3, #20]
   d7236:	4798      	blx	r3
   d7238:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d723c:	b280      	uxth	r0, r0

	return available;
}
   d723e:	bd38      	pop	{r3, r4, r5, pc}
   d7240:	000dd29a 	.word	0x000dd29a
   d7244:	2003e298 	.word	0x2003e298
   d7248:	000dd2be 	.word	0x000dd2be

000d724c <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7250:	4606      	mov	r6, r0
   d7252:	4689      	mov	r9, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d7254:	7c01      	ldrb	r1, [r0, #16]
   d7256:	68c0      	ldr	r0, [r0, #12]
	available |= wire.read();

	return available;
}

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d7258:	4615      	mov	r5, r2
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d725a:	f001 fe2d 	bl	d8eb8 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d725e:	21ff      	movs	r1, #255	; 0xff
   d7260:	68f0      	ldr	r0, [r6, #12]
   d7262:	f7ff ff3d 	bl	d70e0 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d7266:	2100      	movs	r1, #0
   d7268:	68f0      	ldr	r0, [r6, #12]
   d726a:	f001 fe2c 	bl	d8ec6 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d726e:	4602      	mov	r2, r0
   d7270:	b108      	cbz	r0, d7276 <_ZN12AssetTracker13wireReadBytesEPhj+0x2a>
		Log.info("wireReadBytes I2C error %u", res);
   d7272:	4918      	ldr	r1, [pc, #96]	; (d72d4 <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d7274:	e015      	b.n	d72a2 <_ZN12AssetTracker13wireReadBytesEPhj+0x56>
   d7276:	4604      	mov	r4, r0
		return -1;
	}

	size_t offset = 0;

	while(offset < len) {
   d7278:	42ac      	cmp	r4, r5
   d727a:	d227      	bcs.n	d72cc <_ZN12AssetTracker13wireReadBytesEPhj+0x80>
		size_t reqLen = (len - offset);
   d727c:	1b2f      	subs	r7, r5, r4
   d727e:	2f20      	cmp	r7, #32
   d7280:	bf28      	it	cs
   d7282:	2720      	movcs	r7, #32
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d7284:	eb04 0a07 	add.w	sl, r4, r7
   d7288:	ebca 0205 	rsb	r2, sl, r5
   d728c:	4253      	negs	r3, r2
   d728e:	4153      	adcs	r3, r2
   d7290:	7c31      	ldrb	r1, [r6, #16]
   d7292:	68f0      	ldr	r0, [r6, #12]
   d7294:	463a      	mov	r2, r7
   d7296:	f001 fdfd 	bl	d8e94 <_ZN7TwoWire11requestFromEhjh>
   d729a:	b2c2      	uxtb	r2, r0
		if (res != reqLen) {
   d729c:	4297      	cmp	r7, r2
   d729e:	d007      	beq.n	d72b0 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d72a0:	490d      	ldr	r1, [pc, #52]	; (d72d8 <_ZN12AssetTracker13wireReadBytesEPhj+0x8c>)
   d72a2:	480e      	ldr	r0, [pc, #56]	; (d72dc <_ZN12AssetTracker13wireReadBytesEPhj+0x90>)
   d72a4:	f7fd f803 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d72a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d72ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d72b0:	444c      	add	r4, r9
		size_t reqLen = (len - offset);
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
   d72b2:	46a0      	mov	r8, r4
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
			buf[offset + ii] = wire.read();
   d72b4:	68f0      	ldr	r0, [r6, #12]
   d72b6:	6803      	ldr	r3, [r0, #0]
   d72b8:	695b      	ldr	r3, [r3, #20]
   d72ba:	4798      	blx	r3
   d72bc:	f808 0b01 	strb.w	r0, [r8], #1
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
   d72c0:	ebc4 0308 	rsb	r3, r4, r8
   d72c4:	429f      	cmp	r7, r3
   d72c6:	d8f5      	bhi.n	d72b4 <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
   d72c8:	4654      	mov	r4, sl
   d72ca:	e7d5      	b.n	d7278 <_ZN12AssetTracker13wireReadBytesEPhj+0x2c>
 	}
	return len;
   d72cc:	4628      	mov	r0, r5
}
   d72ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d72d2:	bf00      	nop
   d72d4:	000dd2e8 	.word	0x000dd2e8
   d72d8:	000dd303 	.word	0x000dd303
   d72dc:	2003e298 	.word	0x2003e298

000d72e0 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d72e0:	4800      	ldr	r0, [pc, #0]	; (d72e4 <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d72e2:	4770      	bx	lr
   d72e4:	2003e0b4 	.word	0x2003e0b4

000d72e8 <_ZNKSt8functionIFbcEEclEc>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d72e8:	b507      	push	{r0, r1, r2, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72ea:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d72ec:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d72f0:	b90a      	cbnz	r2, d72f6 <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d72f2:	f002 ffae 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72f6:	68c3      	ldr	r3, [r0, #12]
   d72f8:	f10d 0107 	add.w	r1, sp, #7
   d72fc:	4798      	blx	r3
    }
   d72fe:	b003      	add	sp, #12
   d7300:	f85d fb04 	ldr.w	pc, [sp], #4

000d7304 <_ZN12AssetTracker9updateGPSEv>:
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d7304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!useWire) {
   d7308:	7a03      	ldrb	r3, [r0, #8]
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d730a:	b089      	sub	sp, #36	; 0x24
   d730c:	4604      	mov	r4, r0
	if (!useWire) {
   d730e:	b913      	cbnz	r3, d7316 <_ZN12AssetTracker9updateGPSEv+0x12>
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
			gps.encode(c);
			if (externalDecoder) {
				externalDecoder(c);
   d7310:	f100 0620 	add.w	r6, r0, #32
   d7314:	e03b      	b.n	d738e <_ZN12AssetTracker9updateGPSEv+0x8a>
		}
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
   d7316:	f8d0 800c 	ldr.w	r8, [r0, #12]
   d731a:	4640      	mov	r0, r8
   d731c:	f001 fddb 	bl	d8ed6 <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d7320:	4620      	mov	r0, r4
   d7322:	f7ff ff5f 	bl	d71e4 <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d7326:	2820      	cmp	r0, #32
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
						if (externalDecoder) {
							externalDecoder(buf[ii]);
   d7328:	f104 0920 	add.w	r9, r4, #32
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
   d732c:	4605      	mov	r5, r0
			if (available > 32) {
   d732e:	d801      	bhi.n	d7334 <_ZN12AssetTracker9updateGPSEv+0x30>
				available = 32;
			}
			if (available > 0) {
   d7330:	b908      	cbnz	r0, d7336 <_ZN12AssetTracker9updateGPSEv+0x32>
   d7332:	e019      	b.n	d7368 <_ZN12AssetTracker9updateGPSEv+0x64>
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
			if (available > 32) {
				available = 32;
   d7334:	2520      	movs	r5, #32
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
   d7336:	462a      	mov	r2, r5
   d7338:	4669      	mov	r1, sp
   d733a:	4620      	mov	r0, r4
   d733c:	f7ff ff86 	bl	d724c <_ZN12AssetTracker13wireReadBytesEPhj>
   d7340:	42a8      	cmp	r0, r5
   d7342:	466f      	mov	r7, sp
   d7344:	d110      	bne.n	d7368 <_ZN12AssetTracker9updateGPSEv+0x64>
   d7346:	466e      	mov	r6, sp
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
   d7348:	f816 1b01 	ldrb.w	r1, [r6], #1
   d734c:	4814      	ldr	r0, [pc, #80]	; (d73a0 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d734e:	f000 fb91 	bl	d7a74 <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d7352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7354:	b123      	cbz	r3, d7360 <_ZN12AssetTracker9updateGPSEv+0x5c>
							externalDecoder(buf[ii]);
   d7356:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d735a:	4648      	mov	r0, r9
   d735c:	f7ff ffc4 	bl	d72e8 <_ZNKSt8functionIFbcEEclEc>
			if (available > 32) {
				available = 32;
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
   d7360:	1bf3      	subs	r3, r6, r7
   d7362:	b29b      	uxth	r3, r3
   d7364:	42ab      	cmp	r3, r5
   d7366:	d3ef      	bcc.n	d7348 <_ZN12AssetTracker9updateGPSEv+0x44>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7368:	4640      	mov	r0, r8
   d736a:	f001 fdbd 	bl	d8ee8 <_ZN7TwoWire6unlockEv>
   d736e:	e014      	b.n	d739a <_ZN12AssetTracker9updateGPSEv+0x96>
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
   d7370:	6960      	ldr	r0, [r4, #20]
   d7372:	6803      	ldr	r3, [r0, #0]
   d7374:	695b      	ldr	r3, [r3, #20]
   d7376:	4798      	blx	r3
   d7378:	b2c5      	uxtb	r5, r0
			gps.encode(c);
   d737a:	4629      	mov	r1, r5
   d737c:	4808      	ldr	r0, [pc, #32]	; (d73a0 <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d737e:	f000 fb79 	bl	d7a74 <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d7382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7384:	b11b      	cbz	r3, d738e <_ZN12AssetTracker9updateGPSEv+0x8a>
				externalDecoder(c);
   d7386:	4629      	mov	r1, r5
   d7388:	4630      	mov	r0, r6
   d738a:	f7ff ffad 	bl	d72e8 <_ZNKSt8functionIFbcEEclEc>
	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
   d738e:	6960      	ldr	r0, [r4, #20]
   d7390:	6803      	ldr	r3, [r0, #0]
   d7392:	691b      	ldr	r3, [r3, #16]
   d7394:	4798      	blx	r3
   d7396:	2800      	cmp	r0, #0
   d7398:	dcea      	bgt.n	d7370 <_ZN12AssetTracker9updateGPSEv+0x6c>
					}
				}
			}
		}
	}
}
   d739a:	b009      	add	sp, #36	; 0x24
   d739c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d73a0:	2003e0b4 	.word	0x2003e0b4

000d73a4 <_ZN12AssetTracker14threadFunctionEv>:
	if (thread == NULL) {
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
	}
}

void AssetTracker::threadFunction() {
   d73a4:	b508      	push	{r3, lr}
   d73a6:	4604      	mov	r4, r0
	while(true) {
		updateGPS();
   d73a8:	4620      	mov	r0, r4
   d73aa:	f7ff ffab 	bl	d7304 <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d73ae:	f000 fc97 	bl	d7ce0 <os_thread_yield>
   d73b2:	e7f9      	b.n	d73a8 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d73b4 <_ZN12AssetTracker20threadFunctionStaticEPv>:
	}
}

// [static]
void AssetTracker::threadFunctionStatic(void *param) {
   d73b4:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d73b6:	f7ff fff5 	bl	d73a4 <_ZN12AssetTracker14threadFunctionEv>
	...

000d73bc <_GLOBAL__sub_I_emptyResponse>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d73bc:	b570      	push	{r4, r5, r6, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d73be:	4c19      	ldr	r4, [pc, #100]	; (d7424 <_GLOBAL__sub_I_emptyResponse+0x68>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d73c0:	4e19      	ldr	r6, [pc, #100]	; (d7428 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d73c2:	f000 fd45 	bl	d7e50 <HAL_Pin_Map>
   d73c6:	2108      	movs	r1, #8
   d73c8:	4620      	mov	r0, r4
   d73ca:	f000 fc2f 	bl	d7c2c <_ZN6LIS3DHC1Ei>
   d73ce:	6831      	ldr	r1, [r6, #0]
   d73d0:	4b16      	ldr	r3, [pc, #88]	; (d742c <_GLOBAL__sub_I_emptyResponse+0x70>)
   d73d2:	6023      	str	r3, [r4, #0]
   d73d4:	f011 0501 	ands.w	r5, r1, #1
   d73d8:	d10a      	bne.n	d73f0 <_GLOBAL__sub_I_emptyResponse+0x34>
   d73da:	4630      	mov	r0, r6
   d73dc:	f7fc fe6e 	bl	d40bc <__cxa_guard_acquire>
   d73e0:	b130      	cbz	r0, d73f0 <_GLOBAL__sub_I_emptyResponse+0x34>
   d73e2:	4629      	mov	r1, r5
   d73e4:	4812      	ldr	r0, [pc, #72]	; (d7430 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d73e6:	f002 f913 	bl	d9610 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d73ea:	4630      	mov	r0, r6
   d73ec:	f7fc fe6b 	bl	d40c6 <__cxa_guard_release>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d73f0:	4a10      	ldr	r2, [pc, #64]	; (d7434 <_GLOBAL__sub_I_emptyResponse+0x78>)
   d73f2:	61a2      	str	r2, [r4, #24]
   d73f4:	4b0e      	ldr	r3, [pc, #56]	; (d7430 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d73f6:	4a10      	ldr	r2, [pc, #64]	; (d7438 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d73f8:	60e3      	str	r3, [r4, #12]
   d73fa:	6222      	str	r2, [r4, #32]
   d73fc:	2311      	movs	r3, #17
   d73fe:	2201      	movs	r2, #1
   d7400:	6123      	str	r3, [r4, #16]
   d7402:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
   d7406:	2300      	movs	r3, #0
 */

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
   d7408:	4a0c      	ldr	r2, [pc, #48]	; (d743c <_GLOBAL__sub_I_emptyResponse+0x80>)
   d740a:	490d      	ldr	r1, [pc, #52]	; (d7440 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d740c:	4805      	ldr	r0, [pc, #20]	; (d7424 <_GLOBAL__sub_I_emptyResponse+0x68>)
   d740e:	7523      	strb	r3, [r4, #20]
   d7410:	7723      	strb	r3, [r4, #28]
   d7412:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d7416:	f002 fefb 	bl	da210 <__aeabi_atexit>
static TinyGPSPlus gps;
   d741a:	480a      	ldr	r0, [pc, #40]	; (d7444 <_GLOBAL__sub_I_emptyResponse+0x88>)
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d741c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
static TinyGPSPlus gps;
   d7420:	f000 b878 	b.w	d7514 <_ZN11TinyGPSPlusC1Ev>
   d7424:	2003e08c 	.word	0x2003e08c
   d7428:	2003e07c 	.word	0x2003e07c
   d742c:	000dd6e8 	.word	0x000dd6e8
   d7430:	2003e080 	.word	0x2003e080
   d7434:	000dd244 	.word	0x000dd244
   d7438:	00989680 	.word	0x00989680
   d743c:	2003dea8 	.word	0x2003dea8
   d7440:	000d7b6d 	.word	0x000d7b6d
   d7444:	2003e0b4 	.word	0x2003e0b4

000d7448 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d7448:	4770      	bx	lr

000d744a <_ZN13LegacyAdapterD0Ev>:

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d744a:	b510      	push	{r4, lr}

}
   d744c:	2108      	movs	r1, #8

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d744e:	4604      	mov	r4, r0

}
   d7450:	f002 fee3 	bl	da21a <_ZdlPvj>
   d7454:	4620      	mov	r0, r4
   d7456:	bd10      	pop	{r4, pc}

000d7458 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:

#include "LegacyAdapter.h"


LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d7458:	4a01      	ldr	r2, [pc, #4]	; (d7460 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d745a:	6002      	str	r2, [r0, #0]
   d745c:	6041      	str	r1, [r0, #4]

}
   d745e:	4770      	bx	lr
   d7460:	000dd33c 	.word	0x000dd33c

000d7464 <_GLOBAL__sub_I__ZN13LegacyAdapterC2ER11TinyGPSPlus>:
   d7464:	f000 bcf4 	b.w	d7e50 <HAL_Pin_Map>

000d7468 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d7468:	2200      	movs	r2, #0
   d746a:	7002      	strb	r2, [r0, #0]
   d746c:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d746e:	8082      	strh	r2, [r0, #4]
   d7470:	6082      	str	r2, [r0, #8]
   d7472:	7302      	strb	r2, [r0, #12]
   d7474:	8202      	strh	r2, [r0, #16]
   d7476:	6142      	str	r2, [r0, #20]
   d7478:	7602      	strb	r2, [r0, #24]
   d747a:	8382      	strh	r2, [r0, #28]
   d747c:	6202      	str	r2, [r0, #32]
   d747e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d7482:	8502      	strh	r2, [r0, #40]	; 0x28
   d7484:	62c2      	str	r2, [r0, #44]	; 0x2c
   d7486:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d748a:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d748c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d7490:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d7494:	63c2      	str	r2, [r0, #60]	; 0x3c
   d7496:	6402      	str	r2, [r0, #64]	; 0x40
   d7498:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d749a:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d749e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d74a2:	64c2      	str	r2, [r0, #76]	; 0x4c
   d74a4:	6502      	str	r2, [r0, #80]	; 0x50
   d74a6:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d74a8:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d74ac:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d74b0:	65c2      	str	r2, [r0, #92]	; 0x5c
   d74b2:	6602      	str	r2, [r0, #96]	; 0x60
   d74b4:	6642      	str	r2, [r0, #100]	; 0x64
   d74b6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d74ba:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d74be:	66c2      	str	r2, [r0, #108]	; 0x6c
   d74c0:	6702      	str	r2, [r0, #112]	; 0x70
   d74c2:	6742      	str	r2, [r0, #116]	; 0x74
   d74c4:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d74c8:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d74cc:	67c2      	str	r2, [r0, #124]	; 0x7c
   d74ce:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d74d2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d74d6:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d74da:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d74de:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d74e2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d74e6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d74ea:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d74ee:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d74f2:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d74f6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d74fa:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d74fe:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d7502:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d7506:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d750a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d750e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d7512:	4770      	bx	lr

000d7514 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d7514:	b510      	push	{r4, lr}
   d7516:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d7518:	f7ff ffa6 	bl	d7468 <_ZN11TinyGPSDataC1Ev>
   d751c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d7520:	f7ff ffa2 	bl	d7468 <_ZN11TinyGPSDataC1Ev>
   d7524:	2300      	movs	r3, #0
   d7526:	2202      	movs	r2, #2
   d7528:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d752c:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d7530:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d7534:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d7538:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d753c:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d7540:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d7544:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d7548:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d754c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d7550:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d7554:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d7558:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d755c:	4620      	mov	r0, r4
   d755e:	bd10      	pop	{r4, pc}

000d7560 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d7560:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d7564:	2b05      	cmp	r3, #5
   d7566:	d802      	bhi.n	d756e <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d7568:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d756c:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d756e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d7572:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d7574:	bf94      	ite	ls
   d7576:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d757a:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d757e:	4770      	bx	lr

000d7580 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d7580:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d7582:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d7584:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d7586:	2d2d      	cmp	r5, #45	; 0x2d
   d7588:	bf08      	it	eq
   d758a:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d758c:	4620      	mov	r0, r4
   d758e:	f003 fceb 	bl	daf68 <atol>
   d7592:	2364      	movs	r3, #100	; 0x64
   d7594:	4358      	muls	r0, r3
   d7596:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d7598:	f814 3b01 	ldrb.w	r3, [r4], #1
   d759c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d75a0:	2909      	cmp	r1, #9
   d75a2:	d9f8      	bls.n	d7596 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d75a4:	2b2e      	cmp	r3, #46	; 0x2e
   d75a6:	d10b      	bne.n	d75c0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d75a8:	7853      	ldrb	r3, [r2, #1]
   d75aa:	3b30      	subs	r3, #48	; 0x30
   d75ac:	2b09      	cmp	r3, #9
   d75ae:	d807      	bhi.n	d75c0 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d75b0:	210a      	movs	r1, #10
   d75b2:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d75b6:	7893      	ldrb	r3, [r2, #2]
   d75b8:	3b30      	subs	r3, #48	; 0x30
   d75ba:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d75bc:	bf98      	it	ls
   d75be:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d75c0:	2d2d      	cmp	r5, #45	; 0x2d
   d75c2:	bf08      	it	eq
   d75c4:	4240      	negeq	r0, r0
}
   d75c6:	bd38      	pop	{r3, r4, r5, pc}

000d75c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d75c8:	b538      	push	{r3, r4, r5, lr}
   d75ca:	4604      	mov	r4, r0
   d75cc:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d75ce:	f003 fccb 	bl	daf68 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d75d2:	2364      	movs	r3, #100	; 0x64
   d75d4:	fbb0 f2f3 	udiv	r2, r0, r3
   d75d8:	fb03 0012 	mls	r0, r3, r2, r0
   d75dc:	4b11      	ldr	r3, [pc, #68]	; (d7624 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d75de:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d75e0:	4343      	muls	r3, r0
   d75e2:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d75e4:	7802      	ldrb	r2, [r0, #0]
   d75e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d75ea:	2909      	cmp	r1, #9
   d75ec:	4604      	mov	r4, r0
   d75ee:	f100 0001 	add.w	r0, r0, #1
   d75f2:	d9f7      	bls.n	d75e4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d75f4:	2a2e      	cmp	r2, #46	; 0x2e
   d75f6:	d10b      	bne.n	d7610 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d75f8:	490a      	ldr	r1, [pc, #40]	; (d7624 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d75fa:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d75fc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d7600:	3a30      	subs	r2, #48	; 0x30
   d7602:	2a09      	cmp	r2, #9
   d7604:	d804      	bhi.n	d7610 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d7606:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d760a:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d760e:	e7f5      	b.n	d75fc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d7610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d7614:	3301      	adds	r3, #1
   d7616:	2203      	movs	r2, #3
   d7618:	fbb3 f3f2 	udiv	r3, r3, r2
   d761c:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d761e:	2300      	movs	r3, #0
   d7620:	722b      	strb	r3, [r5, #8]
   d7622:	bd38      	pop	{r3, r4, r5, pc}
   d7624:	00989680 	.word	0x00989680

000d7628 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d7628:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d762a:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d762c:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d762e:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d7632:	6042      	str	r2, [r0, #4]
   d7634:	685a      	ldr	r2, [r3, #4]
   d7636:	6082      	str	r2, [r0, #8]
   d7638:	7a1b      	ldrb	r3, [r3, #8]
   d763a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d763c:	4603      	mov	r3, r0
   d763e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d7642:	6102      	str	r2, [r0, #16]
   d7644:	685a      	ldr	r2, [r3, #4]
   d7646:	6142      	str	r2, [r0, #20]
   d7648:	7a1b      	ldrb	r3, [r3, #8]
   d764a:	7603      	strb	r3, [r0, #24]
   d764c:	f000 fbc8 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d7650:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d7652:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d7654:	7063      	strb	r3, [r4, #1]
   d7656:	7023      	strb	r3, [r4, #0]
   d7658:	bd10      	pop	{r4, pc}
   d765a:	0000      	movs	r0, r0
   d765c:	0000      	movs	r0, r0
	...

000d7660 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d7660:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d7662:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d7664:	4604      	mov	r4, r0
   updated = false;
   d7666:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d7668:	6880      	ldr	r0, [r0, #8]
   d766a:	f003 f87f 	bl	da76c <__aeabi_ui2d>
   d766e:	a30e      	add	r3, pc, #56	; (adr r3, d76a8 <_ZN15TinyGPSLocation3latEv+0x48>)
   d7670:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7674:	f003 fa1a 	bl	daaac <__aeabi_ddiv>
   d7678:	4606      	mov	r6, r0
   d767a:	88a0      	ldrh	r0, [r4, #4]
   d767c:	460f      	mov	r7, r1
   d767e:	f003 f885 	bl	da78c <__aeabi_i2d>
   d7682:	460b      	mov	r3, r1
   d7684:	4602      	mov	r2, r0
   d7686:	4639      	mov	r1, r7
   d7688:	4630      	mov	r0, r6
   d768a:	f002 ff33 	bl	da4f4 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d768e:	7b23      	ldrb	r3, [r4, #12]
   d7690:	b11b      	cbz	r3, d769a <_ZN15TinyGPSLocation3latEv+0x3a>
   d7692:	4602      	mov	r2, r0
   d7694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7698:	e001      	b.n	d769e <_ZN15TinyGPSLocation3latEv+0x3e>
   d769a:	4602      	mov	r2, r0
   d769c:	460b      	mov	r3, r1
}
   d769e:	ec43 2b10 	vmov	d0, r2, r3
   d76a2:	bdd0      	pop	{r4, r6, r7, pc}
   d76a4:	f3af 8000 	nop.w
   d76a8:	00000000 	.word	0x00000000
   d76ac:	41cdcd65 	.word	0x41cdcd65

000d76b0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d76b0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d76b2:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d76b4:	4604      	mov	r4, r0
   updated = false;
   d76b6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d76b8:	6940      	ldr	r0, [r0, #20]
   d76ba:	f003 f857 	bl	da76c <__aeabi_ui2d>
   d76be:	a30e      	add	r3, pc, #56	; (adr r3, d76f8 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d76c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d76c4:	f003 f9f2 	bl	daaac <__aeabi_ddiv>
   d76c8:	4606      	mov	r6, r0
   d76ca:	8a20      	ldrh	r0, [r4, #16]
   d76cc:	460f      	mov	r7, r1
   d76ce:	f003 f85d 	bl	da78c <__aeabi_i2d>
   d76d2:	460b      	mov	r3, r1
   d76d4:	4602      	mov	r2, r0
   d76d6:	4639      	mov	r1, r7
   d76d8:	4630      	mov	r0, r6
   d76da:	f002 ff0b 	bl	da4f4 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d76de:	7e23      	ldrb	r3, [r4, #24]
   d76e0:	b11b      	cbz	r3, d76ea <_ZN15TinyGPSLocation3lngEv+0x3a>
   d76e2:	4602      	mov	r2, r0
   d76e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d76e8:	e001      	b.n	d76ee <_ZN15TinyGPSLocation3lngEv+0x3e>
   d76ea:	4602      	mov	r2, r0
   d76ec:	460b      	mov	r3, r1
}
   d76ee:	ec43 2b10 	vmov	d0, r2, r3
   d76f2:	bdd0      	pop	{r4, r6, r7, pc}
   d76f4:	f3af 8000 	nop.w
   d76f8:	00000000 	.word	0x00000000
   d76fc:	41cdcd65 	.word	0x41cdcd65

000d7700 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d7700:	b510      	push	{r4, lr}
   date = newDate;
   d7702:	6883      	ldr	r3, [r0, #8]
   d7704:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d7706:	4604      	mov	r4, r0
   d7708:	f000 fb6a 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d770c:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d770e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d7710:	7063      	strb	r3, [r4, #1]
   d7712:	7023      	strb	r3, [r4, #0]
   d7714:	bd10      	pop	{r4, pc}

000d7716 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d7716:	b510      	push	{r4, lr}
   time = newTime;
   d7718:	6883      	ldr	r3, [r0, #8]
   d771a:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d771c:	4604      	mov	r4, r0
   d771e:	f000 fb5f 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d7722:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d7724:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d7726:	7063      	strb	r3, [r4, #1]
   d7728:	7023      	strb	r3, [r4, #0]
   d772a:	bd10      	pop	{r4, pc}

000d772c <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d772c:	b510      	push	{r4, lr}
   d772e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d7730:	4608      	mov	r0, r1
   d7732:	f7ff ff25 	bl	d7580 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d7736:	60a0      	str	r0, [r4, #8]
   d7738:	bd10      	pop	{r4, pc}

000d773a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d773a:	b510      	push	{r4, lr}
   d773c:	4604      	mov	r4, r0
   newDate = atol(term);
   d773e:	4608      	mov	r0, r1
   d7740:	f003 fc12 	bl	daf68 <atol>
   d7744:	60a0      	str	r0, [r4, #8]
   d7746:	bd10      	pop	{r4, pc}

000d7748 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d7748:	b510      	push	{r4, lr}
   val = newval;
   d774a:	68c3      	ldr	r3, [r0, #12]
   d774c:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d774e:	4604      	mov	r4, r0
   d7750:	f000 fb46 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d7754:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d7756:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d7758:	7063      	strb	r3, [r4, #1]
   d775a:	7023      	strb	r3, [r4, #0]
   d775c:	bd10      	pop	{r4, pc}

000d775e <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d775e:	b510      	push	{r4, lr}
   d7760:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d7762:	4608      	mov	r0, r1
   d7764:	f7ff ff0c 	bl	d7580 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d7768:	60e0      	str	r0, [r4, #12]
   d776a:	bd10      	pop	{r4, pc}

000d776c <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d776c:	b510      	push	{r4, lr}
   val = newval;
   d776e:	68c3      	ldr	r3, [r0, #12]
   d7770:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d7772:	4604      	mov	r4, r0
   d7774:	f000 fb34 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d7778:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d777a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d777c:	7063      	strb	r3, [r4, #1]
   d777e:	7023      	strb	r3, [r4, #0]
   d7780:	bd10      	pop	{r4, pc}

000d7782 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d7782:	b510      	push	{r4, lr}
   d7784:	4604      	mov	r4, r0
   newval = atol(term);
   d7786:	4608      	mov	r0, r1
   d7788:	f003 fbee 	bl	daf68 <atol>
   d778c:	60e0      	str	r0, [r4, #12]
   d778e:	bd10      	pop	{r4, pc}

000d7790 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d7790:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d7792:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d7794:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d7796:	3010      	adds	r0, #16
   d7798:	f004 f848 	bl	db82c <strcpy>
   d779c:	f000 fb20 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d77a0:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d77a2:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d77a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d77a8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d77ac:	bd10      	pop	{r4, pc}

000d77ae <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d77ae:	2210      	movs	r2, #16
   d77b0:	f004 bd91 	b.w	dc2d6 <strncpy>

000d77b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d77b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d77b6:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d77ba:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d77bc:	2d00      	cmp	r5, #0
   d77be:	f000 808b 	beq.w	d78d8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d77c2:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d77c6:	f7ff fecb 	bl	d7560 <_ZN11TinyGPSPlus7fromHexEc>
   d77ca:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d77ce:	4602      	mov	r2, r0
   d77d0:	4620      	mov	r0, r4
   d77d2:	f7ff fec5 	bl	d7560 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d77d6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d77da:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d77de:	b2c0      	uxtb	r0, r0
   d77e0:	4283      	cmp	r3, r0
   d77e2:	d172      	bne.n	d78ca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d77e4:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d77e8:	3301      	adds	r3, #1
   d77ea:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d77ee:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d77f2:	b123      	cbz	r3, d77fe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d77f4:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d77f8:	3301      	adds	r3, #1
   d77fa:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d77fe:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d7802:	b1fb      	cbz	r3, d7844 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d7804:	2b01      	cmp	r3, #1
   d7806:	d14d      	bne.n	d78a4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d7808:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d780c:	f7ff ff78 	bl	d7700 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d7810:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d7814:	f7ff ff7f 	bl	d7716 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d7818:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d781c:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d7820:	b14b      	cbz	r3, d7836 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d7822:	4630      	mov	r0, r6
   d7824:	f7ff ff00 	bl	d7628 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d7828:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d782c:	f7ff ff8c 	bl	d7748 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d7830:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d7834:	e027      	b.n	d7886 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7836:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d783a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d783e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d7842:	e022      	b.n	d788a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d7844:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d7848:	f7ff ff65 	bl	d7716 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d784c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d7850:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d7854:	b15b      	cbz	r3, d786e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d7856:	4630      	mov	r0, r6
   d7858:	f7ff fee6 	bl	d7628 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d785c:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d7860:	f7ff ff72 	bl	d7748 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d7864:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d7868:	f7ff ff6e 	bl	d7748 <_ZN14TinyGPSDecimal6commitEv>
   d786c:	e005      	b.n	d787a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d786e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7872:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d7876:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d787a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d787e:	f7ff ff75 	bl	d776c <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d7882:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d7886:	f7ff ff5f 	bl	d7748 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d788a:	2100      	movs	r1, #0
   d788c:	4608      	mov	r0, r1
   d788e:	f000 fa3f 	bl	d7d10 <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d7892:	4631      	mov	r1, r6
   d7894:	22b8      	movs	r2, #184	; 0xb8
   d7896:	4620      	mov	r0, r4
   d7898:	f003 fd1a 	bl	db2d0 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d789c:	2100      	movs	r1, #0
   d789e:	2001      	movs	r0, #1
   d78a0:	f000 fa36 	bl	d7d10 <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d78a4:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d78a8:	2e00      	cmp	r6, #0
   d78aa:	f000 80d9 	beq.w	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d78ae:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d78b2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d78b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d78b6:	f003 ffaf 	bl	db818 <strcmp>
   d78ba:	2800      	cmp	r0, #0
   d78bc:	f040 80d0 	bne.w	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d78c0:	4630      	mov	r0, r6
   d78c2:	f7ff ff65 	bl	d7790 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d78c6:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d78c8:	e7ee      	b.n	d78a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d78ca:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d78ce:	3301      	adds	r3, #1
   d78d0:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d78d4:	2500      	movs	r5, #0
   d78d6:	e0c3      	b.n	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d78d8:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d78dc:	bb72      	cbnz	r2, d793c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d78de:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d78e2:	4960      	ldr	r1, [pc, #384]	; (d7a64 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d78e4:	4630      	mov	r0, r6
   d78e6:	f003 ff97 	bl	db818 <strcmp>
   d78ea:	b120      	cbz	r0, d78f6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d78ec:	495e      	ldr	r1, [pc, #376]	; (d7a68 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d78ee:	4630      	mov	r0, r6
   d78f0:	f003 ff92 	bl	db818 <strcmp>
   d78f4:	b908      	cbnz	r0, d78fa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d78f6:	2301      	movs	r3, #1
   d78f8:	e00c      	b.n	d7914 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d78fa:	495c      	ldr	r1, [pc, #368]	; (d7a6c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d78fc:	4630      	mov	r0, r6
   d78fe:	f003 ff8b 	bl	db818 <strcmp>
   d7902:	b120      	cbz	r0, d790e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d7904:	495a      	ldr	r1, [pc, #360]	; (d7a70 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d7906:	4630      	mov	r0, r6
   d7908:	f003 ff86 	bl	db818 <strcmp>
   d790c:	b908      	cbnz	r0, d7912 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d790e:	2300      	movs	r3, #0
   d7910:	e000      	b.n	d7914 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d7912:	2302      	movs	r3, #2
   d7914:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d7918:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d791c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d7920:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d7924:	2f00      	cmp	r7, #0
   d7926:	f000 809b 	beq.w	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d792a:	4631      	mov	r1, r6
   d792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d792e:	f003 ff73 	bl	db818 <strcmp>
   d7932:	2800      	cmp	r0, #0
   d7934:	f280 8090 	bge.w	d7a58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d7938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d793a:	e7ef      	b.n	d791c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d793c:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d7940:	2902      	cmp	r1, #2
   d7942:	d071      	beq.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d7944:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d7948:	2b00      	cmp	r3, #0
   d794a:	d06d      	beq.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d794c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d7950:	3a01      	subs	r2, #1
   d7952:	2a28      	cmp	r2, #40	; 0x28
   d7954:	d868      	bhi.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d7956:	e8df f002 	tbb	[pc, r2]
   d795a:	2115      	.short	0x2115
   d795c:	49322b24 	.word	0x49322b24
   d7960:	675c5750 	.word	0x675c5750
   d7964:	67676761 	.word	0x67676761
   d7968:	67676767 	.word	0x67676767
   d796c:	67676767 	.word	0x67676767
   d7970:	67676767 	.word	0x67676767
   d7974:	67676767 	.word	0x67676767
   d7978:	1c156767 	.word	0x1c156767
   d797c:	322b2421 	.word	0x322b2421
   d7980:	3e39      	.short	0x3e39
   d7982:	43          	.byte	0x43
   d7983:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d7984:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7988:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d798c:	f7ff fece 	bl	d772c <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d7990:	e04a      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d7992:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d7996:	4243      	negs	r3, r0
   d7998:	4143      	adcs	r3, r0
   d799a:	e02b      	b.n	d79f4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d799c:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d79a0:	e008      	b.n	d79b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d79a2:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d79a6:	424b      	negs	r3, r1
   d79a8:	414b      	adcs	r3, r1
   d79aa:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d79ae:	e03b      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d79b0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d79b4:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d79b8:	f7ff fe06 	bl	d75c8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d79bc:	e034      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d79be:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d79c2:	4253      	negs	r3, r2
   d79c4:	4153      	adcs	r3, r2
   d79c6:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d79ca:	e02d      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d79cc:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79d0:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d79d4:	e026      	b.n	d7a24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d79d6:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79da:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d79de:	e021      	b.n	d7a24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d79e0:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79e4:	30f0      	adds	r0, #240	; 0xf0
   d79e6:	f7ff fea8 	bl	d773a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d79ea:	e01d      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d79ec:	2b30      	cmp	r3, #48	; 0x30
   d79ee:	bf94      	ite	ls
   d79f0:	2300      	movls	r3, #0
   d79f2:	2301      	movhi	r3, #1
   d79f4:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d79f8:	e016      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d79fa:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d79fe:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d7a02:	f7ff febe 	bl	d7782 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d7a06:	e00f      	b.n	d7a28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d7a08:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7a0c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d7a10:	e008      	b.n	d7a24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d7a12:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7a16:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d7a1a:	e003      	b.n	d7a24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d7a1c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7a20:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d7a24:	f7ff fe9b 	bl	d775e <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d7a28:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d7a2c:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d7a30:	b1b6      	cbz	r6, d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d7a32:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d7a36:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d7a38:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d7a3a:	f003 feed 	bl	db818 <strcmp>
   d7a3e:	b978      	cbnz	r0, d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d7a40:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d7a42:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d7a46:	429a      	cmp	r2, r3
   d7a48:	dc0a      	bgt.n	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d7a4a:	d103      	bne.n	d7a54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d7a4c:	4639      	mov	r1, r7
   d7a4e:	4630      	mov	r0, r6
   d7a50:	f7ff fead 	bl	d77ae <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d7a54:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d7a56:	e7eb      	b.n	d7a30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d7a58:	d002      	beq.n	d7a60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d7a5a:	2300      	movs	r3, #0
   d7a5c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d7a60:	4628      	mov	r0, r5
   d7a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7a64:	000dd344 	.word	0x000dd344
   d7a68:	000dd34a 	.word	0x000dd34a
   d7a6c:	000dd350 	.word	0x000dd350
   d7a70:	000dd356 	.word	0x000dd356

000d7a74 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7a74:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d7a76:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d7a7a:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d7a7c:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d7a80:	4604      	mov	r4, r0
   d7a82:	460d      	mov	r5, r1
  ++encodedCharCount;
   d7a84:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d7a88:	d02a      	beq.n	d7ae0 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d7a8a:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d7a8e:	d804      	bhi.n	d7a9a <_ZN11TinyGPSPlus6encodeEc+0x26>
   d7a90:	290a      	cmp	r1, #10
   d7a92:	d00c      	beq.n	d7aae <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a94:	290d      	cmp	r1, #13
   d7a96:	d132      	bne.n	d7afe <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d7a98:	e009      	b.n	d7aae <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a9a:	292a      	cmp	r1, #42	; 0x2a
   d7a9c:	d007      	beq.n	d7aae <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d7a9e:	292c      	cmp	r1, #44	; 0x2c
   d7aa0:	d12d      	bne.n	d7afe <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d7aa2:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d7aa6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d7aaa:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d7aae:	2b0e      	cmp	r3, #14
   d7ab0:	f04f 0000 	mov.w	r0, #0
   d7ab4:	d805      	bhi.n	d7ac2 <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d7ab6:	4423      	add	r3, r4
   d7ab8:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d7abc:	4620      	mov	r0, r4
   d7abe:	f7ff fe79 	bl	d77b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d7ac2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d7ac6:	3301      	adds	r3, #1
   d7ac8:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d7acc:	2300      	movs	r3, #0
   d7ace:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d7ad2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d7ad6:	425d      	negs	r5, r3
   d7ad8:	415d      	adcs	r5, r3
   d7ada:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d7ade:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7ae0:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d7ae2:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7ae4:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d7ae8:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d7aec:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d7af0:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d7af4:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d7af8:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d7afc:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d7afe:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d7b00:	bf9f      	itttt	ls
   d7b02:	1c5a      	addls	r2, r3, #1
   d7b04:	191b      	addls	r3, r3, r4
   d7b06:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d7b0a:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d7b0e:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d7b12:	b928      	cbnz	r0, d7b20 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d7b14:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d7b18:	404d      	eors	r5, r1
   d7b1a:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d7b1e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d7b20:	2000      	movs	r0, #0
  }

  return false;
}
   d7b22:	bd38      	pop	{r3, r4, r5, pc}

000d7b24 <_GLOBAL__sub_I__Z7radiansd>:
   d7b24:	f000 b994 	b.w	d7e50 <HAL_Pin_Map>

000d7b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7b28:	b513      	push	{r0, r1, r4, lr}
   d7b2a:	460b      	mov	r3, r1
   d7b2c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b2e:	c803      	ldmia	r0, {r0, r1}
   d7b30:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7b34:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7b38:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7b3c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7b40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7b44:	b002      	add	sp, #8
   d7b46:	bd10      	pop	{r4, pc}

000d7b48 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d7b48:	b508      	push	{r3, lr}
   d7b4a:	4b04      	ldr	r3, [pc, #16]	; (d7b5c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d7b4c:	2201      	movs	r2, #1
   d7b4e:	701a      	strb	r2, [r3, #0]
   d7b50:	f000 f97e 	bl	d7e50 <HAL_Pin_Map>
   d7b54:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d7b56:	4a03      	ldr	r2, [pc, #12]	; (d7b64 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x1c>)
   d7b58:	601a      	str	r2, [r3, #0]
   d7b5a:	bd08      	pop	{r3, pc}
   d7b5c:	2003e258 	.word	0x2003e258
   d7b60:	2003e254 	.word	0x2003e254
   d7b64:	000dd6d5 	.word	0x000dd6d5

000d7b68 <_GLOBAL__sub_I_CellularHelper>:
   d7b68:	f000 b972 	b.w	d7e50 <HAL_Pin_Map>

000d7b6c <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d7b6c:	4770      	bx	lr

000d7b6e <_ZN9LIS3DHSPID0Ev>:
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7b6e:	b510      	push	{r4, lr}
}
   d7b70:	2128      	movs	r1, #40	; 0x28
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7b72:	4604      	mov	r4, r0
}
   d7b74:	f002 fb51 	bl	da21a <_ZdlPvj>
   d7b78:	4620      	mov	r0, r4
   d7b7a:	bd10      	pop	{r4, pc}

000d7b7c <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d7b7c:	b510      	push	{r4, lr}
   d7b7e:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d7b80:	f100 0118 	add.w	r1, r0, #24
   d7b84:	68c0      	ldr	r0, [r0, #12]
   d7b86:	f001 fd77 	bl	d9678 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

	digitalWrite(ss, LOW);
   d7b8a:	8a20      	ldrh	r0, [r4, #16]
   d7b8c:	2100      	movs	r1, #0
}
   d7b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::beginTransaction() {
	spi.beginTransaction(spiSettings);

	digitalWrite(ss, LOW);
   d7b92:	f002 bad0 	b.w	da136 <digitalWrite>

000d7b96 <_ZN9LIS3DHSPI14endTransactionEv>:
}

void LIS3DHSPI::endTransaction() {
   d7b96:	b510      	push	{r4, lr}
   d7b98:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d7b9a:	2101      	movs	r1, #1
   d7b9c:	8a00      	ldrh	r0, [r0, #16]
   d7b9e:	f002 faca 	bl	da136 <digitalWrite>

	spi.endTransaction();
   d7ba2:	68e0      	ldr	r0, [r4, #12]
}
   d7ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);

	spi.endTransaction();
   d7ba8:	f001 bd4d 	b.w	d9646 <_ZN8SPIClass14endTransactionEv>

000d7bac <_ZN9LIS3DHSPI8readDataEhPhj>:
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bae:	461e      	mov	r6, r3
	beginTransaction();
   d7bb0:	6803      	ldr	r3, [r0, #0]
   d7bb2:	695b      	ldr	r3, [r3, #20]
	digitalWrite(ss, HIGH);

	spi.endTransaction();
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7bb4:	460f      	mov	r7, r1
   d7bb6:	4614      	mov	r4, r2
   d7bb8:	4605      	mov	r5, r0
	beginTransaction();
   d7bba:	4798      	blx	r3

	if (numBytes > 1) {
   d7bbc:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7bbe:	bf88      	it	hi
   d7bc0:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d7bc4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7bc8:	68e8      	ldr	r0, [r5, #12]
   d7bca:	f001 fdc5 	bl	d9758 <_ZN8SPIClass8transferEh>
   d7bce:	4426      	add	r6, r4

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7bd0:	42b4      	cmp	r4, r6
   d7bd2:	d006      	beq.n	d7be2 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d7bd4:	2100      	movs	r1, #0
   d7bd6:	68e8      	ldr	r0, [r5, #12]
   d7bd8:	f001 fdbe 	bl	d9758 <_ZN8SPIClass8transferEh>
   d7bdc:	f804 0b01 	strb.w	r0, [r4], #1
		addr |= SPI_INCREMENT;
	}

	spi.transfer(SPI_READ | addr);

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7be0:	e7f6      	b.n	d7bd0 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
		buf[ii] = spi.transfer(0);
	}

	endTransaction();
   d7be2:	682b      	ldr	r3, [r5, #0]
   d7be4:	4628      	mov	r0, r5
   d7be6:	699b      	ldr	r3, [r3, #24]
   d7be8:	4798      	blx	r3

	return true;
}
   d7bea:	2001      	movs	r0, #1
   d7bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bee <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bf0:	461e      	mov	r6, r3
	beginTransaction();
   d7bf2:	6803      	ldr	r3, [r0, #0]
   d7bf4:	695b      	ldr	r3, [r3, #20]
	endTransaction();

	return true;
}

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7bf6:	460f      	mov	r7, r1
   d7bf8:	4614      	mov	r4, r2
   d7bfa:	4605      	mov	r5, r0
	beginTransaction();
   d7bfc:	4798      	blx	r3

	if (numBytes > 1) {
   d7bfe:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7c00:	bf88      	it	hi
   d7c02:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d7c06:	4639      	mov	r1, r7
   d7c08:	68e8      	ldr	r0, [r5, #12]
   d7c0a:	f001 fda5 	bl	d9758 <_ZN8SPIClass8transferEh>
   d7c0e:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7c10:	42b4      	cmp	r4, r6
   d7c12:	d005      	beq.n	d7c20 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d7c14:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c18:	68e8      	ldr	r0, [r5, #12]
   d7c1a:	f001 fd9d 	bl	d9758 <_ZN8SPIClass8transferEh>
	if (numBytes > 1) {
		addr |= SPI_INCREMENT;
	}

	spi.transfer(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7c1e:	e7f7      	b.n	d7c10 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
		spi.transfer(buf[ii]);
	}

	endTransaction();
   d7c20:	682b      	ldr	r3, [r5, #0]
   d7c22:	4628      	mov	r0, r5
   d7c24:	699b      	ldr	r3, [r3, #24]
   d7c26:	4798      	blx	r3

	return true;
}
   d7c28:	2001      	movs	r0, #1
   d7c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c2c <_ZN6LIS3DHC1Ei>:

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d7c2c:	4a02      	ldr	r2, [pc, #8]	; (d7c38 <_ZN6LIS3DHC1Ei+0xc>)
   d7c2e:	6002      	str	r2, [r0, #0]
   d7c30:	2200      	movs	r2, #0
   d7c32:	6041      	str	r1, [r0, #4]
   d7c34:	7202      	strb	r2, [r0, #8]

}
   d7c36:	4770      	bx	lr
   d7c38:	000dd70c 	.word	0x000dd70c

000d7c3c <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d7c3c:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
   d7c3e:	6803      	ldr	r3, [r0, #0]
   d7c40:	aa01      	add	r2, sp, #4
   d7c42:	68dc      	ldr	r4, [r3, #12]
   d7c44:	2301      	movs	r3, #1
   d7c46:	47a0      	blx	r4

	return resp[0];
}
   d7c48:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d7c4c:	b002      	add	sp, #8
   d7c4e:	bd10      	pop	{r4, pc}

000d7c50 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
   d7c50:	b538      	push	{r3, r4, r5, lr}
   d7c52:	4605      	mov	r5, r0
   d7c54:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d7c56:	210f      	movs	r1, #15
   d7c58:	4628      	mov	r0, r5
   d7c5a:	f7ff ffef 	bl	d7c3c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d7c5e:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d7c60:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
   d7c64:	d005      	beq.n	d7c72 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
   d7c66:	f000 fbfb 	bl	d8460 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
   d7c6a:	3c01      	subs	r4, #1
   d7c6c:	d1f3      	bne.n	d7c56 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
   d7c6e:	4620      	mov	r0, r4
   d7c70:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
   d7c72:	bd38      	pop	{r3, r4, r5, pc}

000d7c74 <_ZN9LIS3DHSPI9hasDeviceEv>:
}

LIS3DHSPI::~LIS3DHSPI() {
}

bool LIS3DHSPI::hasDevice() {
   d7c74:	b510      	push	{r4, lr}
   d7c76:	4604      	mov	r4, r0
	spi.begin(ss);
   d7c78:	8a01      	ldrh	r1, [r0, #16]
   d7c7a:	68c0      	ldr	r0, [r0, #12]
   d7c7c:	f001 fcd2 	bl	d9624 <_ZN8SPIClass5beginEt>

	return LIS3DH::hasDevice();
   d7c80:	4620      	mov	r0, r4
}
   d7c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

bool LIS3DHSPI::hasDevice() {
	spi.begin(ss);

	return LIS3DH::hasDevice();
   d7c86:	f7ff bfe3 	b.w	d7c50 <_ZN6LIS3DH9hasDeviceEv>

000d7c8a <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
   d7c8a:	f000 b8e1 	b.w	d7e50 <HAL_Pin_Map>
	...

000d7c90 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7c90:	4b02      	ldr	r3, [pc, #8]	; (d7c9c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d7c92:	2201      	movs	r2, #1
   d7c94:	701a      	strb	r2, [r3, #0]
   d7c96:	f000 b8db 	b.w	d7e50 <HAL_Pin_Map>
   d7c9a:	bf00      	nop
   d7c9c:	2003e259 	.word	0x2003e259

000d7ca0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <cellular_signal+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030274 	.word	0x00030274

000d7cb0 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <cellular_command+0xc>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cb8:	9301      	str	r3, [sp, #4]
   d7cba:	bd08      	pop	{r3, pc}
   d7cbc:	00030274 	.word	0x00030274

000d7cc0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b02      	ldr	r3, [pc, #8]	; (d7ccc <os_thread_create+0xc>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	685b      	ldr	r3, [r3, #4]
   d7cc8:	9301      	str	r3, [sp, #4]
   d7cca:	bd08      	pop	{r3, pc}
   d7ccc:	00030248 	.word	0x00030248

000d7cd0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7cd0:	b508      	push	{r3, lr}
   d7cd2:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <os_thread_is_current+0xc>)
   d7cd4:	681b      	ldr	r3, [r3, #0]
   d7cd6:	689b      	ldr	r3, [r3, #8]
   d7cd8:	9301      	str	r3, [sp, #4]
   d7cda:	bd08      	pop	{r3, pc}
   d7cdc:	00030248 	.word	0x00030248

000d7ce0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7ce0:	b508      	push	{r3, lr}
   d7ce2:	4b02      	ldr	r3, [pc, #8]	; (d7cec <os_thread_yield+0xc>)
   d7ce4:	681b      	ldr	r3, [r3, #0]
   d7ce6:	68db      	ldr	r3, [r3, #12]
   d7ce8:	9301      	str	r3, [sp, #4]
   d7cea:	bd08      	pop	{r3, pc}
   d7cec:	00030248 	.word	0x00030248

000d7cf0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7cf0:	b508      	push	{r3, lr}
   d7cf2:	4b02      	ldr	r3, [pc, #8]	; (d7cfc <os_thread_join+0xc>)
   d7cf4:	681b      	ldr	r3, [r3, #0]
   d7cf6:	691b      	ldr	r3, [r3, #16]
   d7cf8:	9301      	str	r3, [sp, #4]
   d7cfa:	bd08      	pop	{r3, pc}
   d7cfc:	00030248 	.word	0x00030248

000d7d00 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <os_thread_cleanup+0xc>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	695b      	ldr	r3, [r3, #20]
   d7d08:	9301      	str	r3, [sp, #4]
   d7d0a:	bd08      	pop	{r3, pc}
   d7d0c:	00030248 	.word	0x00030248

000d7d10 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <os_thread_scheduling+0xc>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	69db      	ldr	r3, [r3, #28]
   d7d18:	9301      	str	r3, [sp, #4]
   d7d1a:	bd08      	pop	{r3, pc}
   d7d1c:	00030248 	.word	0x00030248

000d7d20 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7d20:	b508      	push	{r3, lr}
   d7d22:	4b02      	ldr	r3, [pc, #8]	; (d7d2c <os_mutex_create+0xc>)
   d7d24:	681b      	ldr	r3, [r3, #0]
   d7d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d28:	9301      	str	r3, [sp, #4]
   d7d2a:	bd08      	pop	{r3, pc}
   d7d2c:	00030248 	.word	0x00030248

000d7d30 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7d30:	b508      	push	{r3, lr}
   d7d32:	4b02      	ldr	r3, [pc, #8]	; (d7d3c <os_mutex_lock+0xc>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d38:	9301      	str	r3, [sp, #4]
   d7d3a:	bd08      	pop	{r3, pc}
   d7d3c:	00030248 	.word	0x00030248

000d7d40 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7d40:	b508      	push	{r3, lr}
   d7d42:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <os_mutex_unlock+0xc>)
   d7d44:	681b      	ldr	r3, [r3, #0]
   d7d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	bd08      	pop	{r3, pc}
   d7d4c:	00030248 	.word	0x00030248

000d7d50 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <os_mutex_recursive_create+0xc>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	00030248 	.word	0x00030248

000d7d60 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <os_mutex_recursive_destroy+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	00030248 	.word	0x00030248

000d7d70 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <os_thread_exit+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030248 	.word	0x00030248

000d7d80 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <HAL_Feature_Set+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030234 	.word	0x00030234

000d7d90 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <HAL_Core_System_Reset_Ex+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030234 	.word	0x00030234

000d7da0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030234 	.word	0x00030234

000d7db0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <HAL_RNG_GetRandomNumber+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	685b      	ldr	r3, [r3, #4]
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	00030218 	.word	0x00030218

000d7dc0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <HAL_Delay_Milliseconds+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	689b      	ldr	r3, [r3, #8]
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030218 	.word	0x00030218

000d7dd0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <HAL_Delay_Microseconds+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	68db      	ldr	r3, [r3, #12]
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	00030218 	.word	0x00030218

000d7de0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	695b      	ldr	r3, [r3, #20]
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	00030218 	.word	0x00030218

000d7df0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <HAL_RTC_Get_UnixTime+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	69db      	ldr	r3, [r3, #28]
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	00030218 	.word	0x00030218

000d7e00 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <HAL_RTC_Set_UnixTime+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	6a1b      	ldr	r3, [r3, #32]
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	00030218 	.word	0x00030218

000d7e10 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <HAL_disable_irq+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	00030218 	.word	0x00030218

000d7e20 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <HAL_enable_irq+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	00030218 	.word	0x00030218

000d7e30 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <HAL_RTC_Time_Is_Valid+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	00030218 	.word	0x00030218

000d7e40 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <hal_timer_millis+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	00030218 	.word	0x00030218

000d7e50 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <HAL_Pin_Map+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	681b      	ldr	r3, [r3, #0]
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	0003022c 	.word	0x0003022c

000d7e60 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <HAL_Pin_Mode+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	689b      	ldr	r3, [r3, #8]
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	0003022c 	.word	0x0003022c

000d7e70 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <HAL_Get_Pin_Mode+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	68db      	ldr	r3, [r3, #12]
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	0003022c 	.word	0x0003022c

000d7e80 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <HAL_GPIO_Write+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	691b      	ldr	r3, [r3, #16]
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	0003022c 	.word	0x0003022c

000d7e90 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <HAL_GPIO_Read+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	695b      	ldr	r3, [r3, #20]
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	0003022c 	.word	0x0003022c

000d7ea0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <HAL_Interrupts_Attach+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	699b      	ldr	r3, [r3, #24]
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	0003022c 	.word	0x0003022c

000d7eb0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <HAL_Interrupts_Detach+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	69db      	ldr	r3, [r3, #28]
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	0003022c 	.word	0x0003022c

000d7ec0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <HAL_Interrupts_Enable_All+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	6a1b      	ldr	r3, [r3, #32]
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	0003022c 	.word	0x0003022c

000d7ed0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <HAL_Interrupts_Disable_All+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	0003022c 	.word	0x0003022c

000d7ee0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <HAL_I2C_Begin+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	68db      	ldr	r3, [r3, #12]
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030228 	.word	0x00030228

000d7ef0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <HAL_I2C_Begin_Transmission+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	699b      	ldr	r3, [r3, #24]
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030228 	.word	0x00030228

000d7f00 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <HAL_I2C_End_Transmission+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	69db      	ldr	r3, [r3, #28]
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030228 	.word	0x00030228

000d7f10 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <HAL_I2C_Write_Data+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	6a1b      	ldr	r3, [r3, #32]
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030228 	.word	0x00030228

000d7f20 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <HAL_I2C_Available_Data+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030228 	.word	0x00030228

000d7f30 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <HAL_I2C_Read_Data+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030228 	.word	0x00030228

000d7f40 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <HAL_I2C_Peek_Data+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	00030228 	.word	0x00030228

000d7f50 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <HAL_I2C_Flush_Data+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	00030228 	.word	0x00030228

000d7f60 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <HAL_I2C_Is_Enabled+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	00030228 	.word	0x00030228

000d7f70 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <HAL_I2C_Init+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	00030228 	.word	0x00030228

000d7f80 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <HAL_I2C_Acquire+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	00030228 	.word	0x00030228

000d7f90 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <HAL_I2C_Release+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	00030228 	.word	0x00030228

000d7fa0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <HAL_I2C_Request_Data_Ex+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	00030228 	.word	0x00030228

000d7fb0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <inet_inet_ntop+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	695b      	ldr	r3, [r3, #20]
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	00030264 	.word	0x00030264

000d7fc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <netdb_freeaddrinfo+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	689b      	ldr	r3, [r3, #8]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030268 	.word	0x00030268

000d7fd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <netdb_getaddrinfo+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	68db      	ldr	r3, [r3, #12]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030268 	.word	0x00030268

000d7fe0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <HAL_SPI_Begin+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	681b      	ldr	r3, [r3, #0]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	00030230 	.word	0x00030230

000d7ff0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <HAL_SPI_Send_Receive_Data+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	695b      	ldr	r3, [r3, #20]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	00030230 	.word	0x00030230

000d8000 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <HAL_SPI_Init+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	69db      	ldr	r3, [r3, #28]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	00030230 	.word	0x00030230

000d8010 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <HAL_SPI_Is_Enabled+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6a1b      	ldr	r3, [r3, #32]
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	00030230 	.word	0x00030230

000d8020 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <HAL_SPI_Info+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	00030230 	.word	0x00030230

000d8030 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <HAL_SPI_Set_Settings+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	00030230 	.word	0x00030230

000d8040 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <HAL_SPI_Acquire+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	00030230 	.word	0x00030230

000d8050 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <HAL_SPI_Release+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	00030230 	.word	0x00030230

000d8060 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <HAL_USART_Init+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	681b      	ldr	r3, [r3, #0]
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	0003023c 	.word	0x0003023c

000d8070 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <HAL_USART_Write_Data+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	68db      	ldr	r3, [r3, #12]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003023c 	.word	0x0003023c

000d8080 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <HAL_USART_Available_Data+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	691b      	ldr	r3, [r3, #16]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003023c 	.word	0x0003023c

000d8090 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <HAL_USART_Read_Data+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	695b      	ldr	r3, [r3, #20]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003023c 	.word	0x0003023c

000d80a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <HAL_USART_Peek_Data+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	699b      	ldr	r3, [r3, #24]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	0003023c 	.word	0x0003023c

000d80b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <HAL_USART_Flush_Data+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	69db      	ldr	r3, [r3, #28]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	0003023c 	.word	0x0003023c

000d80c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <HAL_USART_Is_Enabled+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	6a1b      	ldr	r3, [r3, #32]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	0003023c 	.word	0x0003023c

000d80d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <HAL_USART_Available_Data_For_Write+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	0003023c 	.word	0x0003023c

000d80e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <HAL_USB_USART_Init+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	681b      	ldr	r3, [r3, #0]
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	0003024c 	.word	0x0003024c

000d80f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <HAL_USB_USART_Begin+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	685b      	ldr	r3, [r3, #4]
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	0003024c 	.word	0x0003024c

000d8100 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b02      	ldr	r3, [pc, #8]	; (d810c <HAL_USB_USART_Available_Data+0xc>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	691b      	ldr	r3, [r3, #16]
   d8108:	9301      	str	r3, [sp, #4]
   d810a:	bd08      	pop	{r3, pc}
   d810c:	0003024c 	.word	0x0003024c

000d8110 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b02      	ldr	r3, [pc, #8]	; (d811c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	695b      	ldr	r3, [r3, #20]
   d8118:	9301      	str	r3, [sp, #4]
   d811a:	bd08      	pop	{r3, pc}
   d811c:	0003024c 	.word	0x0003024c

000d8120 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <HAL_USB_USART_Receive_Data+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	699b      	ldr	r3, [r3, #24]
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	0003024c 	.word	0x0003024c

000d8130 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <HAL_USB_USART_Send_Data+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	69db      	ldr	r3, [r3, #28]
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	0003024c 	.word	0x0003024c

000d8140 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <HAL_USB_USART_Flush_Data+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	6a1b      	ldr	r3, [r3, #32]
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	0003024c 	.word	0x0003024c

000d8150 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <panic_+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	00030260 	.word	0x00030260

000d8160 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <log_message_v+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	00030260 	.word	0x00030260

000d8170 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b03      	ldr	r3, [pc, #12]	; (d8180 <diag_get_source+0x10>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d817a:	9301      	str	r3, [sp, #4]
   d817c:	bd08      	pop	{r3, pc}
   d817e:	0000      	.short	0x0000
   d8180:	00030260 	.word	0x00030260

000d8184 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <system_mode+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	681b      	ldr	r3, [r3, #0]
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030220 	.word	0x00030220

000d8194 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <set_system_mode+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	685b      	ldr	r3, [r3, #4]
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030220 	.word	0x00030220

000d81a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <system_delay_ms+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	695b      	ldr	r3, [r3, #20]
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030220 	.word	0x00030220

000d81b4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <system_sleep+0xc>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	699b      	ldr	r3, [r3, #24]
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	bd08      	pop	{r3, pc}
   d81c0:	00030220 	.word	0x00030220

000d81c4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d81c4:	b508      	push	{r3, lr}
   d81c6:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <system_thread_set_state+0xc>)
   d81c8:	681b      	ldr	r3, [r3, #0]
   d81ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d81cc:	9301      	str	r3, [sp, #4]
   d81ce:	bd08      	pop	{r3, pc}
   d81d0:	00030220 	.word	0x00030220

000d81d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <application_thread_current+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030220 	.word	0x00030220

000d81e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <application_thread_invoke+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030220 	.word	0x00030220

000d81f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <system_thread_get_state+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030220 	.word	0x00030220

000d8204 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <system_notify_time_changed+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030220 	.word	0x00030220

000d8214 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b03      	ldr	r3, [pc, #12]	; (d8224 <system_ctrl_set_app_request_handler+0x10>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d821e:	9301      	str	r3, [sp, #4]
   d8220:	bd08      	pop	{r3, pc}
   d8222:	0000      	.short	0x0000
   d8224:	00030220 	.word	0x00030220

000d8228 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8228:	b508      	push	{r3, lr}
   d822a:	4b03      	ldr	r3, [pc, #12]	; (d8238 <system_ctrl_set_result+0x10>)
   d822c:	681b      	ldr	r3, [r3, #0]
   d822e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8232:	9301      	str	r3, [sp, #4]
   d8234:	bd08      	pop	{r3, pc}
   d8236:	0000      	.short	0x0000
   d8238:	00030220 	.word	0x00030220

000d823c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b03      	ldr	r3, [pc, #12]	; (d824c <system_power_management_set_config+0x10>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8246:	9301      	str	r3, [sp, #4]
   d8248:	bd08      	pop	{r3, pc}
   d824a:	0000      	.short	0x0000
   d824c:	00030220 	.word	0x00030220

000d8250 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b02      	ldr	r3, [pc, #8]	; (d825c <spark_variable+0xc>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	681b      	ldr	r3, [r3, #0]
   d8258:	9301      	str	r3, [sp, #4]
   d825a:	bd08      	pop	{r3, pc}
   d825c:	00030244 	.word	0x00030244

000d8260 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8260:	b508      	push	{r3, lr}
   d8262:	4b02      	ldr	r3, [pc, #8]	; (d826c <spark_function+0xc>)
   d8264:	681b      	ldr	r3, [r3, #0]
   d8266:	685b      	ldr	r3, [r3, #4]
   d8268:	9301      	str	r3, [sp, #4]
   d826a:	bd08      	pop	{r3, pc}
   d826c:	00030244 	.word	0x00030244

000d8270 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8270:	b508      	push	{r3, lr}
   d8272:	4b02      	ldr	r3, [pc, #8]	; (d827c <spark_process+0xc>)
   d8274:	681b      	ldr	r3, [r3, #0]
   d8276:	689b      	ldr	r3, [r3, #8]
   d8278:	9301      	str	r3, [sp, #4]
   d827a:	bd08      	pop	{r3, pc}
   d827c:	00030244 	.word	0x00030244

000d8280 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8280:	b508      	push	{r3, lr}
   d8282:	4b02      	ldr	r3, [pc, #8]	; (d828c <spark_cloud_flag_connect+0xc>)
   d8284:	681b      	ldr	r3, [r3, #0]
   d8286:	68db      	ldr	r3, [r3, #12]
   d8288:	9301      	str	r3, [sp, #4]
   d828a:	bd08      	pop	{r3, pc}
   d828c:	00030244 	.word	0x00030244

000d8290 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d8290:	b508      	push	{r3, lr}
   d8292:	4b02      	ldr	r3, [pc, #8]	; (d829c <spark_cloud_flag_disconnect+0xc>)
   d8294:	681b      	ldr	r3, [r3, #0]
   d8296:	691b      	ldr	r3, [r3, #16]
   d8298:	9301      	str	r3, [sp, #4]
   d829a:	bd08      	pop	{r3, pc}
   d829c:	00030244 	.word	0x00030244

000d82a0 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d82a0:	b508      	push	{r3, lr}
   d82a2:	4b02      	ldr	r3, [pc, #8]	; (d82ac <spark_cloud_flag_connected+0xc>)
   d82a4:	681b      	ldr	r3, [r3, #0]
   d82a6:	695b      	ldr	r3, [r3, #20]
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	bd08      	pop	{r3, pc}
   d82ac:	00030244 	.word	0x00030244

000d82b0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d82b0:	b508      	push	{r3, lr}
   d82b2:	4b02      	ldr	r3, [pc, #8]	; (d82bc <spark_deviceID+0xc>)
   d82b4:	681b      	ldr	r3, [r3, #0]
   d82b6:	69db      	ldr	r3, [r3, #28]
   d82b8:	9301      	str	r3, [sp, #4]
   d82ba:	bd08      	pop	{r3, pc}
   d82bc:	00030244 	.word	0x00030244

000d82c0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d82c0:	b508      	push	{r3, lr}
   d82c2:	4b02      	ldr	r3, [pc, #8]	; (d82cc <spark_send_event+0xc>)
   d82c4:	681b      	ldr	r3, [r3, #0]
   d82c6:	6a1b      	ldr	r3, [r3, #32]
   d82c8:	9301      	str	r3, [sp, #4]
   d82ca:	bd08      	pop	{r3, pc}
   d82cc:	00030244 	.word	0x00030244

000d82d0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d82d0:	b508      	push	{r3, lr}
   d82d2:	4b02      	ldr	r3, [pc, #8]	; (d82dc <spark_subscribe+0xc>)
   d82d4:	681b      	ldr	r3, [r3, #0]
   d82d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	00030244 	.word	0x00030244

000d82e0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d82e0:	b508      	push	{r3, lr}
   d82e2:	4b02      	ldr	r3, [pc, #8]	; (d82ec <spark_sync_time+0xc>)
   d82e4:	681b      	ldr	r3, [r3, #0]
   d82e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82e8:	9301      	str	r3, [sp, #4]
   d82ea:	bd08      	pop	{r3, pc}
   d82ec:	00030244 	.word	0x00030244

000d82f0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d82f0:	b508      	push	{r3, lr}
   d82f2:	4b02      	ldr	r3, [pc, #8]	; (d82fc <spark_sync_time_pending+0xc>)
   d82f4:	681b      	ldr	r3, [r3, #0]
   d82f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82f8:	9301      	str	r3, [sp, #4]
   d82fa:	bd08      	pop	{r3, pc}
   d82fc:	00030244 	.word	0x00030244

000d8300 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d8300:	b508      	push	{r3, lr}
   d8302:	4b02      	ldr	r3, [pc, #8]	; (d830c <spark_sync_time_last+0xc>)
   d8304:	681b      	ldr	r3, [r3, #0]
   d8306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8308:	9301      	str	r3, [sp, #4]
   d830a:	bd08      	pop	{r3, pc}
   d830c:	00030244 	.word	0x00030244

000d8310 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8310:	b508      	push	{r3, lr}
   d8312:	4b02      	ldr	r3, [pc, #8]	; (d831c <spark_set_random_seed_from_cloud_handler+0xc>)
   d8314:	681b      	ldr	r3, [r3, #0]
   d8316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8318:	9301      	str	r3, [sp, #4]
   d831a:	bd08      	pop	{r3, pc}
   d831c:	00030244 	.word	0x00030244

000d8320 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8320:	b508      	push	{r3, lr}
   d8322:	4b02      	ldr	r3, [pc, #8]	; (d832c <network_connect+0xc>)
   d8324:	681b      	ldr	r3, [r3, #0]
   d8326:	685b      	ldr	r3, [r3, #4]
   d8328:	9301      	str	r3, [sp, #4]
   d832a:	bd08      	pop	{r3, pc}
   d832c:	00030240 	.word	0x00030240

000d8330 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8330:	b508      	push	{r3, lr}
   d8332:	4b02      	ldr	r3, [pc, #8]	; (d833c <network_connecting+0xc>)
   d8334:	681b      	ldr	r3, [r3, #0]
   d8336:	689b      	ldr	r3, [r3, #8]
   d8338:	9301      	str	r3, [sp, #4]
   d833a:	bd08      	pop	{r3, pc}
   d833c:	00030240 	.word	0x00030240

000d8340 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b02      	ldr	r3, [pc, #8]	; (d834c <network_disconnect+0xc>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	68db      	ldr	r3, [r3, #12]
   d8348:	9301      	str	r3, [sp, #4]
   d834a:	bd08      	pop	{r3, pc}
   d834c:	00030240 	.word	0x00030240

000d8350 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8350:	b508      	push	{r3, lr}
   d8352:	4b02      	ldr	r3, [pc, #8]	; (d835c <network_ready+0xc>)
   d8354:	681b      	ldr	r3, [r3, #0]
   d8356:	691b      	ldr	r3, [r3, #16]
   d8358:	9301      	str	r3, [sp, #4]
   d835a:	bd08      	pop	{r3, pc}
   d835c:	00030240 	.word	0x00030240

000d8360 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8360:	b508      	push	{r3, lr}
   d8362:	4b02      	ldr	r3, [pc, #8]	; (d836c <network_on+0xc>)
   d8364:	681b      	ldr	r3, [r3, #0]
   d8366:	695b      	ldr	r3, [r3, #20]
   d8368:	9301      	str	r3, [sp, #4]
   d836a:	bd08      	pop	{r3, pc}
   d836c:	00030240 	.word	0x00030240

000d8370 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8370:	b508      	push	{r3, lr}
   d8372:	4b02      	ldr	r3, [pc, #8]	; (d837c <network_off+0xc>)
   d8374:	681b      	ldr	r3, [r3, #0]
   d8376:	699b      	ldr	r3, [r3, #24]
   d8378:	9301      	str	r3, [sp, #4]
   d837a:	bd08      	pop	{r3, pc}
   d837c:	00030240 	.word	0x00030240

000d8380 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8380:	b508      	push	{r3, lr}
   d8382:	4b02      	ldr	r3, [pc, #8]	; (d838c <network_listen+0xc>)
   d8384:	681b      	ldr	r3, [r3, #0]
   d8386:	69db      	ldr	r3, [r3, #28]
   d8388:	9301      	str	r3, [sp, #4]
   d838a:	bd08      	pop	{r3, pc}
   d838c:	00030240 	.word	0x00030240

000d8390 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8390:	b508      	push	{r3, lr}
   d8392:	4b02      	ldr	r3, [pc, #8]	; (d839c <network_listening+0xc>)
   d8394:	681b      	ldr	r3, [r3, #0]
   d8396:	6a1b      	ldr	r3, [r3, #32]
   d8398:	9301      	str	r3, [sp, #4]
   d839a:	bd08      	pop	{r3, pc}
   d839c:	00030240 	.word	0x00030240

000d83a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d83a0:	b508      	push	{r3, lr}
   d83a2:	4b02      	ldr	r3, [pc, #8]	; (d83ac <network_set_listen_timeout+0xc>)
   d83a4:	681b      	ldr	r3, [r3, #0]
   d83a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83a8:	9301      	str	r3, [sp, #4]
   d83aa:	bd08      	pop	{r3, pc}
   d83ac:	00030240 	.word	0x00030240

000d83b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d83b0:	b508      	push	{r3, lr}
   d83b2:	4b02      	ldr	r3, [pc, #8]	; (d83bc <network_get_listen_timeout+0xc>)
   d83b4:	681b      	ldr	r3, [r3, #0]
   d83b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d83b8:	9301      	str	r3, [sp, #4]
   d83ba:	bd08      	pop	{r3, pc}
   d83bc:	00030240 	.word	0x00030240

000d83c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d83c0:	b508      	push	{r3, lr}
   d83c2:	4b02      	ldr	r3, [pc, #8]	; (d83cc <malloc+0xc>)
   d83c4:	681b      	ldr	r3, [r3, #0]
   d83c6:	681b      	ldr	r3, [r3, #0]
   d83c8:	9301      	str	r3, [sp, #4]
   d83ca:	bd08      	pop	{r3, pc}
   d83cc:	0003021c 	.word	0x0003021c

000d83d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d83d0:	b508      	push	{r3, lr}
   d83d2:	4b02      	ldr	r3, [pc, #8]	; (d83dc <free+0xc>)
   d83d4:	681b      	ldr	r3, [r3, #0]
   d83d6:	685b      	ldr	r3, [r3, #4]
   d83d8:	9301      	str	r3, [sp, #4]
   d83da:	bd08      	pop	{r3, pc}
   d83dc:	0003021c 	.word	0x0003021c

000d83e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d83e0:	b508      	push	{r3, lr}
   d83e2:	4b02      	ldr	r3, [pc, #8]	; (d83ec <realloc+0xc>)
   d83e4:	681b      	ldr	r3, [r3, #0]
   d83e6:	689b      	ldr	r3, [r3, #8]
   d83e8:	9301      	str	r3, [sp, #4]
   d83ea:	bd08      	pop	{r3, pc}
   d83ec:	0003021c 	.word	0x0003021c

000d83f0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d83f0:	b508      	push	{r3, lr}
   d83f2:	4b02      	ldr	r3, [pc, #8]	; (d83fc <siprintf+0xc>)
   d83f4:	681b      	ldr	r3, [r3, #0]
   d83f6:	691b      	ldr	r3, [r3, #16]
   d83f8:	9301      	str	r3, [sp, #4]
   d83fa:	bd08      	pop	{r3, pc}
   d83fc:	0003021c 	.word	0x0003021c

000d8400 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8400:	b508      	push	{r3, lr}
   d8402:	4b02      	ldr	r3, [pc, #8]	; (d840c <siscanf+0xc>)
   d8404:	681b      	ldr	r3, [r3, #0]
   d8406:	699b      	ldr	r3, [r3, #24]
   d8408:	9301      	str	r3, [sp, #4]
   d840a:	bd08      	pop	{r3, pc}
   d840c:	0003021c 	.word	0x0003021c

000d8410 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8410:	b508      	push	{r3, lr}
   d8412:	4b02      	ldr	r3, [pc, #8]	; (d841c <snprintf+0xc>)
   d8414:	681b      	ldr	r3, [r3, #0]
   d8416:	69db      	ldr	r3, [r3, #28]
   d8418:	9301      	str	r3, [sp, #4]
   d841a:	bd08      	pop	{r3, pc}
   d841c:	0003021c 	.word	0x0003021c

000d8420 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8420:	b508      	push	{r3, lr}
   d8422:	4b02      	ldr	r3, [pc, #8]	; (d842c <sniprintf+0xc>)
   d8424:	681b      	ldr	r3, [r3, #0]
   d8426:	6a1b      	ldr	r3, [r3, #32]
   d8428:	9301      	str	r3, [sp, #4]
   d842a:	bd08      	pop	{r3, pc}
   d842c:	0003021c 	.word	0x0003021c

000d8430 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8430:	b508      	push	{r3, lr}
   d8432:	4b02      	ldr	r3, [pc, #8]	; (d843c <vsnprintf+0xc>)
   d8434:	681b      	ldr	r3, [r3, #0]
   d8436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8438:	9301      	str	r3, [sp, #4]
   d843a:	bd08      	pop	{r3, pc}
   d843c:	0003021c 	.word	0x0003021c

000d8440 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8440:	b508      	push	{r3, lr}
   d8442:	4b02      	ldr	r3, [pc, #8]	; (d844c <abort+0xc>)
   d8444:	681b      	ldr	r3, [r3, #0]
   d8446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8448:	9301      	str	r3, [sp, #4]
   d844a:	bd08      	pop	{r3, pc}
   d844c:	0003021c 	.word	0x0003021c

000d8450 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8450:	b508      	push	{r3, lr}
   d8452:	4b02      	ldr	r3, [pc, #8]	; (d845c <_malloc_r+0xc>)
   d8454:	681b      	ldr	r3, [r3, #0]
   d8456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8458:	9301      	str	r3, [sp, #4]
   d845a:	bd08      	pop	{r3, pc}
   d845c:	0003021c 	.word	0x0003021c

000d8460 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8460:	2100      	movs	r1, #0
   d8462:	f7ff be9f 	b.w	d81a4 <system_delay_ms>

000d8466 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8466:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8468:	6883      	ldr	r3, [r0, #8]
   d846a:	4604      	mov	r4, r0
   d846c:	b90b      	cbnz	r3, d8472 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d846e:	f001 fef0 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8472:	68c3      	ldr	r3, [r0, #12]
   d8474:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8476:	68a3      	ldr	r3, [r4, #8]
   d8478:	b11b      	cbz	r3, d8482 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d847a:	2203      	movs	r2, #3
   d847c:	4621      	mov	r1, r4
   d847e:	4620      	mov	r0, r4
   d8480:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8482:	4620      	mov	r0, r4
   d8484:	2110      	movs	r1, #16
}
   d8486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d848a:	f001 bec6 	b.w	da21a <_ZdlPvj>

000d848e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d848e:	b510      	push	{r4, lr}
   d8490:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8492:	6800      	ldr	r0, [r0, #0]
   d8494:	b108      	cbz	r0, d849a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d8496:	f7ff fc63 	bl	d7d60 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d849a:	4620      	mov	r0, r4
   d849c:	bd10      	pop	{r4, pc}

000d849e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d849e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84a0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84a2:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d84a4:	689b      	ldr	r3, [r3, #8]
   d84a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d84a8:	68a3      	ldr	r3, [r4, #8]
   d84aa:	3b01      	subs	r3, #1
   d84ac:	60a3      	str	r3, [r4, #8]
   d84ae:	b92b      	cbnz	r3, d84bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d84b0:	6823      	ldr	r3, [r4, #0]
   d84b2:	4620      	mov	r0, r4
   d84b4:	68db      	ldr	r3, [r3, #12]
        }
    }
   d84b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d84ba:	4718      	bx	r3
   d84bc:	bd10      	pop	{r4, pc}

000d84be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d84be:	680b      	ldr	r3, [r1, #0]
   d84c0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d84c2:	b113      	cbz	r3, d84ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d84c4:	685a      	ldr	r2, [r3, #4]
   d84c6:	3201      	adds	r2, #1
   d84c8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d84ca:	4770      	bx	lr

000d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d84cc:	b510      	push	{r4, lr}
   d84ce:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d84d0:	6800      	ldr	r0, [r0, #0]
   d84d2:	b128      	cbz	r0, d84e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d84d4:	6843      	ldr	r3, [r0, #4]
   d84d6:	3b01      	subs	r3, #1
   d84d8:	6043      	str	r3, [r0, #4]
   d84da:	b90b      	cbnz	r3, d84e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d84dc:	f7ff ffdf 	bl	d849e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d84e0:	4620      	mov	r0, r4
   d84e2:	bd10      	pop	{r4, pc}

000d84e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84e4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84e6:	4c06      	ldr	r4, [pc, #24]	; (d8500 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d84e8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d84ea:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84ec:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d84ee:	f7ff fc2f 	bl	d7d50 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84f2:	4620      	mov	r0, r4
   d84f4:	4a03      	ldr	r2, [pc, #12]	; (d8504 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d84f6:	4904      	ldr	r1, [pc, #16]	; (d8508 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d84fc:	f001 be88 	b.w	da210 <__aeabi_atexit>
   d8500:	2003e25c 	.word	0x2003e25c
   d8504:	2003dea8 	.word	0x2003dea8
   d8508:	000d848f 	.word	0x000d848f

000d850c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d850c:	2200      	movs	r2, #0
   d850e:	4611      	mov	r1, r2
   d8510:	6840      	ldr	r0, [r0, #4]
   d8512:	f7ff bf1d 	b.w	d8350 <network_ready>

000d8516 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8516:	2200      	movs	r2, #0
   d8518:	4611      	mov	r1, r2
   d851a:	6840      	ldr	r0, [r0, #4]
   d851c:	f7ff bf38 	b.w	d8390 <network_listening>

000d8520 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8520:	2200      	movs	r2, #0
   d8522:	4611      	mov	r1, r2
   d8524:	6840      	ldr	r0, [r0, #4]
   d8526:	f7ff bf43 	b.w	d83b0 <network_get_listen_timeout>

000d852a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d852a:	2200      	movs	r2, #0
   d852c:	6840      	ldr	r0, [r0, #4]
   d852e:	f7ff bf37 	b.w	d83a0 <network_set_listen_timeout>

000d8532 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8532:	2200      	movs	r2, #0
   d8534:	f081 0101 	eor.w	r1, r1, #1
   d8538:	6840      	ldr	r0, [r0, #4]
   d853a:	f7ff bf21 	b.w	d8380 <network_listen>

000d853e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d853e:	2300      	movs	r3, #0
   d8540:	461a      	mov	r2, r3
   d8542:	4619      	mov	r1, r3
   d8544:	6840      	ldr	r0, [r0, #4]
   d8546:	f7ff bf13 	b.w	d8370 <network_off>

000d854a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d854a:	2300      	movs	r3, #0
   d854c:	461a      	mov	r2, r3
   d854e:	4619      	mov	r1, r3
   d8550:	6840      	ldr	r0, [r0, #4]
   d8552:	f7ff bf05 	b.w	d8360 <network_on>

000d8556 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8556:	2200      	movs	r2, #0
   d8558:	4611      	mov	r1, r2
   d855a:	6840      	ldr	r0, [r0, #4]
   d855c:	f7ff bee8 	b.w	d8330 <network_connecting>

000d8560 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8560:	2200      	movs	r2, #0
   d8562:	2102      	movs	r1, #2
   d8564:	6840      	ldr	r0, [r0, #4]
   d8566:	f7ff beeb 	b.w	d8340 <network_disconnect>

000d856a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d856a:	2300      	movs	r3, #0
   d856c:	461a      	mov	r2, r3
   d856e:	6840      	ldr	r0, [r0, #4]
   d8570:	f7ff bed6 	b.w	d8320 <network_connect>

000d8574 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8574:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d8576:	4b1b      	ldr	r3, [pc, #108]	; (d85e4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8578:	6003      	str	r3, [r0, #0]
   d857a:	2500      	movs	r5, #0
   d857c:	460f      	mov	r7, r1
   d857e:	3328      	adds	r3, #40	; 0x28
   d8580:	2618      	movs	r6, #24
   d8582:	b089      	sub	sp, #36	; 0x24
   d8584:	6043      	str	r3, [r0, #4]
   d8586:	6085      	str	r5, [r0, #8]
   d8588:	60c5      	str	r5, [r0, #12]
   d858a:	4632      	mov	r2, r6
   d858c:	4629      	mov	r1, r5
   d858e:	4604      	mov	r4, r0
   d8590:	3010      	adds	r0, #16
   d8592:	f002 fec3 	bl	db31c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8596:	462a      	mov	r2, r5
   d8598:	4629      	mov	r1, r5
   d859a:	6878      	ldr	r0, [r7, #4]
   d859c:	f7ff fed8 	bl	d8350 <network_ready>
   d85a0:	b908      	cbnz	r0, d85a6 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d85a2:	60a0      	str	r0, [r4, #8]
            return sig;
   d85a4:	e01b      	b.n	d85de <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d85a6:	4629      	mov	r1, r5
   d85a8:	4632      	mov	r2, r6
   d85aa:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d85ac:	9500      	str	r5, [sp, #0]
   d85ae:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d85b0:	f002 feb4 	bl	db31c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d85b4:	a902      	add	r1, sp, #8
   d85b6:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d85b8:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d85bc:	f7ff fb70 	bl	d7ca0 <cellular_signal>
   d85c0:	b110      	cbz	r0, d85c8 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d85c2:	2301      	movs	r3, #1
   d85c4:	60a3      	str	r3, [r4, #8]
            return sig;
   d85c6:	e00a      	b.n	d85de <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d85c8:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d85ca:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d85cc:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d85ce:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d85d0:	b90b      	cbnz	r3, d85d6 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d85d2:	2302      	movs	r3, #2
   d85d4:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d85d6:	a902      	add	r1, sp, #8
   d85d8:	4620      	mov	r0, r4
   d85da:	f000 f889 	bl	d86f0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d85de:	4620      	mov	r0, r4
   d85e0:	b009      	add	sp, #36	; 0x24
   d85e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d85e4:	000dd75c 	.word	0x000dd75c

000d85e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d85e8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d85ea:	4c08      	ldr	r4, [pc, #32]	; (d860c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d85ec:	2528      	movs	r5, #40	; 0x28
   d85ee:	462a      	mov	r2, r5
   d85f0:	2100      	movs	r1, #0
   d85f2:	4620      	mov	r0, r4
   d85f4:	f002 fe92 	bl	db31c <memset>
        cid = -1;
   d85f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d85fc:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d85fe:	4b04      	ldr	r3, [pc, #16]	; (d8610 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8600:	8025      	strh	r5, [r4, #0]
   d8602:	2204      	movs	r2, #4
   d8604:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8606:	4a03      	ldr	r2, [pc, #12]	; (d8614 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8608:	601a      	str	r2, [r3, #0]
   d860a:	bd38      	pop	{r3, r4, r5, pc}
   d860c:	2003e268 	.word	0x2003e268
   d8610:	2003e260 	.word	0x2003e260
   d8614:	000dd728 	.word	0x000dd728

000d8618 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8618:	4770      	bx	lr

000d861a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d861a:	7d00      	ldrb	r0, [r0, #20]
   d861c:	4770      	bx	lr
	...

000d8620 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8620:	7d03      	ldrb	r3, [r0, #20]
   d8622:	b11b      	cbz	r3, d862c <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d8624:	6983      	ldr	r3, [r0, #24]
   d8626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d862a:	d102      	bne.n	d8632 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d862c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8644 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8630:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d8632:	ee07 3a90 	vmov	s15, r3
   d8636:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8648 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d863a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d863e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8642:	4770      	bx	lr
   d8644:	00000000 	.word	0x00000000
   d8648:	42c80000 	.word	0x42c80000

000d864c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d864c:	7d03      	ldrb	r3, [r0, #20]
   d864e:	b11b      	cbz	r3, d8658 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d8650:	6a03      	ldr	r3, [r0, #32]
   d8652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8656:	d102      	bne.n	d865e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8658:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8670 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d865c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d865e:	ee07 3a90 	vmov	s15, r3
   d8662:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8674 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d8666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d866a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d866e:	4770      	bx	lr
   d8670:	00000000 	.word	0x00000000
   d8674:	42c80000 	.word	0x42c80000

000d8678 <_ZN14CellularSignalD0Ev>:
   d8678:	b510      	push	{r4, lr}
   d867a:	2128      	movs	r1, #40	; 0x28
   d867c:	4604      	mov	r4, r0
   d867e:	f001 fdcc 	bl	da21a <_ZdlPvj>
   d8682:	4620      	mov	r0, r4
   d8684:	bd10      	pop	{r4, pc}
	...

000d8688 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8688:	7d03      	ldrb	r3, [r0, #20]
   d868a:	b17b      	cbz	r3, d86ac <_ZNK14CellularSignal10getQualityEv+0x24>
   d868c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d868e:	2b00      	cmp	r3, #0
   d8690:	db0c      	blt.n	d86ac <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8692:	ee07 3a90 	vmov	s15, r3
   d8696:	eddf 6a07 	vldr	s13, [pc, #28]	; d86b4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d869a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d86b8 <_ZNK14CellularSignal10getQualityEv+0x30>
   d869e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d86a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d86a6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d86aa:	4770      	bx	lr
    }

    return -1.0f;
   d86ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d86b0:	4770      	bx	lr
   d86b2:	bf00      	nop
   d86b4:	477fff00 	.word	0x477fff00
   d86b8:	42c80000 	.word	0x42c80000

000d86bc <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d86bc:	7d03      	ldrb	r3, [r0, #20]
   d86be:	b17b      	cbz	r3, d86e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d86c0:	69c3      	ldr	r3, [r0, #28]
   d86c2:	2b00      	cmp	r3, #0
   d86c4:	db0c      	blt.n	d86e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d86c6:	ee07 3a90 	vmov	s15, r3
   d86ca:	eddf 6a07 	vldr	s13, [pc, #28]	; d86e8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d86ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; d86ec <_ZNK14CellularSignal11getStrengthEv+0x30>
   d86d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d86d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d86da:	ee27 0a80 	vmul.f32	s0, s15, s0
   d86de:	4770      	bx	lr
    }

    return -1.0f;
   d86e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d86e4:	4770      	bx	lr
   d86e6:	bf00      	nop
   d86e8:	477fff00 	.word	0x477fff00
   d86ec:	42c80000 	.word	0x42c80000

000d86f0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d86f0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d86f2:	460d      	mov	r5, r1
   d86f4:	f100 0410 	add.w	r4, r0, #16
   d86f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8700:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d8704:	2001      	movs	r0, #1
   d8706:	bd30      	pop	{r4, r5, pc}

000d8708 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d870c:	4607      	mov	r7, r0
   d870e:	460c      	mov	r4, r1
{
    if (base == 0) {
   d8710:	4615      	mov	r5, r2
   d8712:	b92a      	cbnz	r2, d8720 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d8714:	6803      	ldr	r3, [r0, #0]
   d8716:	b2c9      	uxtb	r1, r1
   d8718:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d871a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d871e:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8720:	2900      	cmp	r1, #0
   d8722:	da07      	bge.n	d8734 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d8724:	2a0a      	cmp	r2, #10
   d8726:	d105      	bne.n	d8734 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d8728:	212d      	movs	r1, #45	; 0x2d
   d872a:	f000 fe19 	bl	d9360 <_ZN5Print5printEc>
            val = -n;
   d872e:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8730:	4606      	mov	r6, r0
            val = -n;
   d8732:	e001      	b.n	d8738 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d8734:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d8736:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8738:	b2ea      	uxtb	r2, r5
   d873a:	4638      	mov	r0, r7
   d873c:	f000 fe29 	bl	d9392 <_ZN5Print11printNumberEmh>
    }
}
   d8740:	4430      	add	r0, r6
   d8742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8746 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d8746:	b570      	push	{r4, r5, r6, lr}
   d8748:	460d      	mov	r5, r1
   d874a:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d874c:	220a      	movs	r2, #10
   d874e:	6881      	ldr	r1, [r0, #8]
   d8750:	4628      	mov	r0, r5
   d8752:	f7ff ffd9 	bl	d8708 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d8756:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8758:	4604      	mov	r4, r0
    n += p.print(',');
   d875a:	4628      	mov	r0, r5
   d875c:	f000 fe00 	bl	d9360 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d8760:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8762:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d8764:	68f1      	ldr	r1, [r6, #12]
   d8766:	4628      	mov	r0, r5
   d8768:	f7ff ffce 	bl	d8708 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d876c:	4420      	add	r0, r4
   d876e:	bd70      	pop	{r4, r5, r6, pc}

000d8770 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8770:	f1a0 0004 	sub.w	r0, r0, #4
   d8774:	f7ff bfe7 	b.w	d8746 <_ZNK14CellularSignal7printToER5Print>

000d8778 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8778:	4770      	bx	lr

000d877a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d877a:	2000      	movs	r0, #0
   d877c:	4770      	bx	lr

000d877e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d877e:	b510      	push	{r4, lr}
   d8780:	2110      	movs	r1, #16
   d8782:	4604      	mov	r4, r0
   d8784:	f001 fd49 	bl	da21a <_ZdlPvj>
   d8788:	4620      	mov	r0, r4
   d878a:	bd10      	pop	{r4, pc}

000d878c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d878c:	b508      	push	{r3, lr}
      { delete this; }
   d878e:	b108      	cbz	r0, d8794 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d8790:	f7ff fff5 	bl	d877e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8794:	bd08      	pop	{r3, pc}

000d8796 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8796:	2200      	movs	r2, #0
   d8798:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d879a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d879c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d87a0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d87a2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d87a6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d87a8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d87aa:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d87ac:	680c      	ldr	r4, [r1, #0]
   d87ae:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d87b0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d87b2:	bd10      	pop	{r4, pc}

000d87b4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d87b4:	b510      	push	{r4, lr}
   d87b6:	4604      	mov	r4, r0
    free((void*)msg_);
   d87b8:	6800      	ldr	r0, [r0, #0]
   d87ba:	f7ff fe09 	bl	d83d0 <free>
}
   d87be:	4620      	mov	r0, r4
   d87c0:	bd10      	pop	{r4, pc}

000d87c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d87c2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d87c4:	68c4      	ldr	r4, [r0, #12]
   d87c6:	b1f4      	cbz	r4, d8806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d87c8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d87ca:	2b02      	cmp	r3, #2
   d87cc:	d103      	bne.n	d87d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d87ce:	f104 000c 	add.w	r0, r4, #12
   d87d2:	f7ff ffef 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d87d6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d87d8:	b135      	cbz	r5, d87e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d87da:	4628      	mov	r0, r5
   d87dc:	f7fe f973 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
   d87e0:	2110      	movs	r1, #16
   d87e2:	4628      	mov	r0, r5
   d87e4:	f001 fd19 	bl	da21a <_ZdlPvj>
   d87e8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d87ea:	b135      	cbz	r5, d87fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d87ec:	4628      	mov	r0, r5
   d87ee:	f7fe f96a 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
   d87f2:	2110      	movs	r1, #16
   d87f4:	4628      	mov	r0, r5
   d87f6:	f001 fd10 	bl	da21a <_ZdlPvj>
   d87fa:	4620      	mov	r0, r4
   d87fc:	2114      	movs	r1, #20
   d87fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8802:	f001 bd0a 	b.w	da21a <_ZdlPvj>
   d8806:	bd38      	pop	{r3, r4, r5, pc}

000d8808 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8808:	b510      	push	{r4, lr}
   d880a:	b088      	sub	sp, #32
   d880c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d880e:	4668      	mov	r0, sp
   d8810:	f000 fff2 	bl	d97f8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d8814:	4669      	mov	r1, sp
   d8816:	a804      	add	r0, sp, #16
   d8818:	f001 f810 	bl	d983c <_ZN6StringC1ERKS_>
   d881c:	a804      	add	r0, sp, #16
   d881e:	47a0      	blx	r4
   d8820:	4604      	mov	r4, r0
   d8822:	a804      	add	r0, sp, #16
   d8824:	f000 ffa1 	bl	d976a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8828:	4668      	mov	r0, sp
   d882a:	f000 ff9e 	bl	d976a <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d882e:	4620      	mov	r0, r4
   d8830:	b008      	add	sp, #32
   d8832:	bd10      	pop	{r4, pc}

000d8834 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8834:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8836:	2410      	movs	r4, #16
   d8838:	b085      	sub	sp, #20
   d883a:	4607      	mov	r7, r0
   d883c:	460e      	mov	r6, r1
   d883e:	4615      	mov	r5, r2
   d8840:	2100      	movs	r1, #0
   d8842:	4622      	mov	r2, r4
   d8844:	4668      	mov	r0, sp
   d8846:	f002 fd69 	bl	db31c <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d884a:	2200      	movs	r2, #0
   d884c:	4669      	mov	r1, sp
   d884e:	4610      	mov	r0, r2
         size = sizeof(*this);
   d8850:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d8854:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d8856:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d8858:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d885a:	f7ff fd01 	bl	d8260 <spark_function>
}
   d885e:	b005      	add	sp, #20
   d8860:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8862 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d8862:	b513      	push	{r0, r1, r4, lr}
   d8864:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8866:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d886a:	2300      	movs	r3, #0
   d886c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d886e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8870:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8872:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8874:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8876:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8878:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d887a:	f7ff fe27 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d887e:	4620      	mov	r0, r4
   d8880:	b002      	add	sp, #8
   d8882:	bd10      	pop	{r4, pc}

000d8884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8886:	460c      	mov	r4, r1
   d8888:	ad02      	add	r5, sp, #8
   d888a:	f854 3b04 	ldr.w	r3, [r4], #4
   d888e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8892:	4606      	mov	r6, r0
   d8894:	460f      	mov	r7, r1
   d8896:	a801      	add	r0, sp, #4
   d8898:	4621      	mov	r1, r4
   d889a:	f7ff fe10 	bl	d84be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d889e:	4629      	mov	r1, r5
   d88a0:	4630      	mov	r0, r6
   d88a2:	f7ff ffde 	bl	d8862 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d88a6:	a801      	add	r0, sp, #4
   d88a8:	f7ff fe10 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88ac:	4620      	mov	r0, r4
   d88ae:	f7ff fe0d 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d88b2:	4638      	mov	r0, r7
   d88b4:	2108      	movs	r1, #8
   d88b6:	f001 fcb0 	bl	da21a <_ZdlPvj>
        return p;
    }
   d88ba:	4630      	mov	r0, r6
   d88bc:	b003      	add	sp, #12
   d88be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d88c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d88c0:	b538      	push	{r3, r4, r5, lr}
   d88c2:	2300      	movs	r3, #0
   d88c4:	4604      	mov	r4, r0
   d88c6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d88c8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d88ca:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d88cc:	f7fb fbe5 	bl	d409a <_Znwj>
   d88d0:	b128      	cbz	r0, d88de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d88d2:	2301      	movs	r3, #1
   d88d4:	6043      	str	r3, [r0, #4]
   d88d6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d88d8:	4b02      	ldr	r3, [pc, #8]	; (d88e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d88da:	6003      	str	r3, [r0, #0]
   d88dc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d88de:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d88e0:	4620      	mov	r0, r4
   d88e2:	bd38      	pop	{r3, r4, r5, pc}
   d88e4:	000dd790 	.word	0x000dd790

000d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d88e8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d88ea:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d88ec:	b90a      	cbnz	r2, d88f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d88ee:	f001 fcb0 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88f2:	68c3      	ldr	r3, [r0, #12]
    }
   d88f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88f8:	4718      	bx	r3

000d88fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d88fa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d88fc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d88fe:	f100 0110 	add.w	r1, r0, #16
   d8902:	f7ff fff1 	bl	d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d8906:	bd08      	pop	{r3, pc}

000d8908 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8908:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d890a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d890c:	b90a      	cbnz	r2, d8912 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d890e:	f001 fca0 	bl	da252 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8912:	68c3      	ldr	r3, [r0, #12]
    }
   d8914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8918:	4718      	bx	r3

000d891a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d891a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d891c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d891e:	f100 0110 	add.w	r1, r0, #16
   d8922:	f7ff fff1 	bl	d8908 <_ZNKSt8functionIFvRKbEEclES1_>
   d8926:	bd08      	pop	{r3, pc}

000d8928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8928:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d892a:	2300      	movs	r3, #0
   d892c:	6083      	str	r3, [r0, #8]
   d892e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8930:	4604      	mov	r4, r0
   d8932:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8934:	b12b      	cbz	r3, d8942 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8936:	2202      	movs	r2, #2
   d8938:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d893a:	68eb      	ldr	r3, [r5, #12]
   d893c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d893e:	68ab      	ldr	r3, [r5, #8]
   d8940:	60a3      	str	r3, [r4, #8]
	}
    }
   d8942:	4620      	mov	r0, r4
   d8944:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d8948:	b5f0      	push	{r4, r5, r6, r7, lr}
   d894a:	b089      	sub	sp, #36	; 0x24
   d894c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d894e:	4668      	mov	r0, sp
   d8950:	f7ff ff21 	bl	d8796 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8954:	2300      	movs	r3, #0
   d8956:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d895a:	f04f 0202 	mov.w	r2, #2
   d895e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d8962:	2b00      	cmp	r3, #0
   d8964:	d103      	bne.n	d896e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d8966:	e8c4 2f41 	strexb	r1, r2, [r4]
   d896a:	2900      	cmp	r1, #0
   d896c:	d1f7      	bne.n	d895e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d896e:	d002      	beq.n	d8976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8970:	f88d 3008 	strb.w	r3, [sp, #8]
   d8974:	e063      	b.n	d8a3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d8976:	f114 050c 	adds.w	r5, r4, #12
   d897a:	d003      	beq.n	d8984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d897c:	4669      	mov	r1, sp
   d897e:	4628      	mov	r0, r5
   d8980:	f7ff ff09 	bl	d8796 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8984:	f3bf 8f5f 	dmb	sy
   d8988:	2301      	movs	r3, #1
   d898a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d898c:	2000      	movs	r0, #0
   d898e:	f104 0308 	add.w	r3, r4, #8
   d8992:	f3bf 8f5f 	dmb	sy
   d8996:	e853 6f00 	ldrex	r6, [r3]
   d899a:	e843 0200 	strex	r2, r0, [r3]
   d899e:	2a00      	cmp	r2, #0
   d89a0:	d1f9      	bne.n	d8996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d89a2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d89a6:	2e00      	cmp	r6, #0
   d89a8:	d049      	beq.n	d8a3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d89aa:	f7ff fc13 	bl	d81d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d89ae:	b120      	cbz	r0, d89ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d89b0:	4629      	mov	r1, r5
   d89b2:	4630      	mov	r0, r6
   d89b4:	f7ff ff98 	bl	d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d89b8:	e03a      	b.n	d8a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d89ba:	4631      	mov	r1, r6
   d89bc:	a802      	add	r0, sp, #8
   d89be:	f7ff ffb3 	bl	d8928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d89c2:	68e0      	ldr	r0, [r4, #12]
   d89c4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d89c8:	b108      	cbz	r0, d89ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d89ca:	f002 ff37 	bl	db83c <strdup>
   d89ce:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d89d0:	2010      	movs	r0, #16
   d89d2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d89d6:	f7fb fb60 	bl	d409a <_Znwj>
   d89da:	4605      	mov	r5, r0
   d89dc:	b1e8      	cbz	r0, d8a1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d89de:	2700      	movs	r7, #0
   d89e0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d89e2:	2018      	movs	r0, #24
   d89e4:	f7fb fb59 	bl	d409a <_Znwj>
   d89e8:	4604      	mov	r4, r0
   d89ea:	b188      	cbz	r0, d8a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d89ec:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d89ee:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d89f0:	a802      	add	r0, sp, #8
   d89f2:	f7ff f899 	bl	d7b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d89f6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d89f8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d89fa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d89fc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d89fe:	9204      	str	r2, [sp, #16]
   d8a00:	a906      	add	r1, sp, #24
   d8a02:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a04:	60e3      	str	r3, [r4, #12]
   d8a06:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8a0a:	9205      	str	r2, [sp, #20]
   d8a0c:	f7ff fec3 	bl	d8796 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8a10:	4b0d      	ldr	r3, [pc, #52]	; (d8a48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d8a12:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8a14:	4b0d      	ldr	r3, [pc, #52]	; (d8a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a16:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8a18:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d8a1a:	a806      	add	r0, sp, #24
   d8a1c:	f7ff feca 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8a20:	a802      	add	r0, sp, #8
   d8a22:	f7fe f850 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8a26:	2200      	movs	r2, #0
   d8a28:	4629      	mov	r1, r5
   d8a2a:	4809      	ldr	r0, [pc, #36]	; (d8a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8a2c:	f7ff fbda 	bl	d81e4 <application_thread_invoke>
   d8a30:	4630      	mov	r0, r6
   d8a32:	f7fe f848 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8a36:	2110      	movs	r1, #16
   d8a38:	4630      	mov	r0, r6
   d8a3a:	f001 fbee 	bl	da21a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d8a3e:	4668      	mov	r0, sp
   d8a40:	f7ff feb8 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
    }
   d8a44:	b009      	add	sp, #36	; 0x24
   d8a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a48:	000d88fb 	.word	0x000d88fb
   d8a4c:	000d8b71 	.word	0x000d8b71
   d8a50:	000d8467 	.word	0x000d8467

000d8a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a58:	b08b      	sub	sp, #44	; 0x2c
   d8a5a:	4606      	mov	r6, r0
   d8a5c:	460f      	mov	r7, r1
   d8a5e:	4690      	mov	r8, r2
   d8a60:	4699      	mov	r9, r3
   d8a62:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8a66:	f7ff fc1b 	bl	d82a0 <spark_cloud_flag_connected>
   d8a6a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d8a6c:	4683      	mov	fp, r0
   d8a6e:	bb30      	cbnz	r0, d8abe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8a70:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8a74:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a76:	a905      	add	r1, sp, #20
   d8a78:	4628      	mov	r0, r5
   d8a7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a7e:	f7ff fe8a 	bl	d8796 <_ZN8particle5ErrorC1EOS0_>
   d8a82:	2014      	movs	r0, #20
   d8a84:	f7fb fb09 	bl	d409a <_Znwj>
   d8a88:	4604      	mov	r4, r0
   d8a8a:	b158      	cbz	r0, d8aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8a8c:	2302      	movs	r3, #2
   d8a8e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8a90:	2301      	movs	r3, #1
   d8a92:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8a94:	f8c0 b004 	str.w	fp, [r0, #4]
   d8a98:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8a9c:	4629      	mov	r1, r5
   d8a9e:	300c      	adds	r0, #12
   d8aa0:	f7ff fe79 	bl	d8796 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d8aa4:	4630      	mov	r0, r6
   d8aa6:	4621      	mov	r1, r4
   d8aa8:	f840 4b04 	str.w	r4, [r0], #4
   d8aac:	f7ff ff08 	bl	d88c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8ab0:	4628      	mov	r0, r5
   d8ab2:	f7ff fe7f 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8ab6:	a805      	add	r0, sp, #20
   d8ab8:	f7ff fe7c 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
   d8abc:	e052      	b.n	d8b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8abe:	2400      	movs	r4, #0
   d8ac0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8ac2:	2014      	movs	r0, #20
   d8ac4:	606c      	str	r4, [r5, #4]
   d8ac6:	60ac      	str	r4, [r5, #8]
   d8ac8:	9307      	str	r3, [sp, #28]
   d8aca:	f7fb fae6 	bl	d409a <_Znwj>
   d8ace:	4601      	mov	r1, r0
   d8ad0:	b118      	cbz	r0, d8ada <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d8ad2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ad4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8ad6:	6044      	str	r4, [r0, #4]
   d8ad8:	6084      	str	r4, [r0, #8]
   d8ada:	a804      	add	r0, sp, #16
   d8adc:	9103      	str	r1, [sp, #12]
   d8ade:	f7ff feef 	bl	d88c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d8ae2:	4b22      	ldr	r3, [pc, #136]	; (d8b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d8ae4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8ae6:	2008      	movs	r0, #8
   d8ae8:	f7fb fad7 	bl	d409a <_Znwj>
   d8aec:	4604      	mov	r4, r0
   d8aee:	b128      	cbz	r0, d8afc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8af0:	9b03      	ldr	r3, [sp, #12]
   d8af2:	f840 3b04 	str.w	r3, [r0], #4
   d8af6:	a904      	add	r1, sp, #16
   d8af8:	f7ff fce1 	bl	d84be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8afc:	9500      	str	r5, [sp, #0]
   d8afe:	fa5f f38a 	uxtb.w	r3, sl
   d8b02:	464a      	mov	r2, r9
   d8b04:	4641      	mov	r1, r8
   d8b06:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d8b08:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b0a:	f7ff fbd9 	bl	d82c0 <spark_send_event>
   d8b0e:	b920      	cbnz	r0, d8b1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8b10:	9b03      	ldr	r3, [sp, #12]
   d8b12:	785b      	ldrb	r3, [r3, #1]
   d8b14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8b18:	b183      	cbz	r3, d8b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d8b1a:	9b03      	ldr	r3, [sp, #12]
   d8b1c:	9305      	str	r3, [sp, #20]
   d8b1e:	a904      	add	r1, sp, #16
   d8b20:	a806      	add	r0, sp, #24
   d8b22:	f7ff fccc 	bl	d84be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d8b26:	a905      	add	r1, sp, #20
   d8b28:	4630      	mov	r0, r6
   d8b2a:	f7ff fe9a 	bl	d8862 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8b2e:	a806      	add	r0, sp, #24
   d8b30:	f7ff fccc 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b34:	a804      	add	r0, sp, #16
   d8b36:	f7ff fcc9 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b3a:	e013      	b.n	d8b64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d8b3c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8b40:	a905      	add	r1, sp, #20
   d8b42:	a803      	add	r0, sp, #12
   d8b44:	9205      	str	r2, [sp, #20]
   d8b46:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b4a:	f7ff fefd 	bl	d8948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b4e:	a805      	add	r0, sp, #20
   d8b50:	f7ff fe30 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8b54:	a805      	add	r0, sp, #20
   d8b56:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8b58:	f7ff fe94 	bl	d8884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8b5c:	a806      	add	r0, sp, #24
   d8b5e:	f7ff fcb5 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b62:	e7da      	b.n	d8b1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d8b64:	4630      	mov	r0, r6
   d8b66:	b00b      	add	sp, #44	; 0x2c
   d8b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b6c:	000d8ce1 	.word	0x000d8ce1

000d8b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b70:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b74:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b76:	d006      	beq.n	d8b86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d8b78:	2a03      	cmp	r2, #3
   d8b7a:	d017      	beq.n	d8bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8b7c:	2a01      	cmp	r2, #1
   d8b7e:	d122      	bne.n	d8bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8b80:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b82:	6003      	str	r3, [r0, #0]
	      break;
   d8b84:	e01f      	b.n	d8bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b86:	2018      	movs	r0, #24
   d8b88:	680e      	ldr	r6, [r1, #0]
   d8b8a:	f7fb fa86 	bl	d409a <_Znwj>
   d8b8e:	4605      	mov	r5, r0
   d8b90:	b150      	cbz	r0, d8ba8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8b92:	4631      	mov	r1, r6
   d8b94:	f7ff fec8 	bl	d8928 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8b98:	6930      	ldr	r0, [r6, #16]
   d8b9a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8b9e:	b108      	cbz	r0, d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8ba0:	f002 fe4c 	bl	db83c <strdup>
   d8ba4:	6128      	str	r0, [r5, #16]
   d8ba6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8ba8:	6025      	str	r5, [r4, #0]
   d8baa:	e00c      	b.n	d8bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8bac:	6804      	ldr	r4, [r0, #0]
   d8bae:	b154      	cbz	r4, d8bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8bb0:	f104 0010 	add.w	r0, r4, #16
   d8bb4:	f7ff fdfe 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8bb8:	4620      	mov	r0, r4
   d8bba:	f7fd ff84 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8bbe:	2118      	movs	r1, #24
   d8bc0:	4620      	mov	r0, r4
   d8bc2:	f001 fb2a 	bl	da21a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8bc6:	2000      	movs	r0, #0
   d8bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8bca <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8bca:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8bcc:	2300      	movs	r3, #0
   d8bce:	6083      	str	r3, [r0, #8]
   d8bd0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8bd2:	4604      	mov	r4, r0
   d8bd4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8bd6:	b12b      	cbz	r3, d8be4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bd8:	2202      	movs	r2, #2
   d8bda:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8bdc:	68eb      	ldr	r3, [r5, #12]
   d8bde:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8be0:	68ab      	ldr	r3, [r5, #8]
   d8be2:	60a3      	str	r3, [r4, #8]
	}
    }
   d8be4:	4620      	mov	r0, r4
   d8be6:	bd38      	pop	{r3, r4, r5, pc}

000d8be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8be8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8bea:	b570      	push	{r4, r5, r6, lr}
   d8bec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8bee:	d006      	beq.n	d8bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8bf0:	2a03      	cmp	r2, #3
   d8bf2:	d011      	beq.n	d8c18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8bf4:	2a01      	cmp	r2, #1
   d8bf6:	d118      	bne.n	d8c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8bf8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8bfa:	6003      	str	r3, [r0, #0]
	      break;
   d8bfc:	e015      	b.n	d8c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8bfe:	2014      	movs	r0, #20
   d8c00:	680e      	ldr	r6, [r1, #0]
   d8c02:	f7fb fa4a 	bl	d409a <_Znwj>
   d8c06:	4605      	mov	r5, r0
   d8c08:	b120      	cbz	r0, d8c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8c0a:	4631      	mov	r1, r6
   d8c0c:	f7ff ffdd 	bl	d8bca <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8c10:	7c33      	ldrb	r3, [r6, #16]
   d8c12:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8c14:	6025      	str	r5, [r4, #0]
   d8c16:	e008      	b.n	d8c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8c18:	6804      	ldr	r4, [r0, #0]
   d8c1a:	b134      	cbz	r4, d8c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8c1c:	4620      	mov	r0, r4
   d8c1e:	f7fd ff52 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8c22:	2114      	movs	r1, #20
   d8c24:	4620      	mov	r0, r4
   d8c26:	f001 faf8 	bl	da21a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8c2a:	2000      	movs	r0, #0
   d8c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8c30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8c30:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8c32:	2300      	movs	r3, #0
   d8c34:	b087      	sub	sp, #28
   d8c36:	460c      	mov	r4, r1
   d8c38:	f3bf 8f5f 	dmb	sy
   d8c3c:	e850 6f00 	ldrex	r6, [r0]
   d8c40:	e840 3200 	strex	r2, r3, [r0]
   d8c44:	2a00      	cmp	r2, #0
   d8c46:	d1f9      	bne.n	d8c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8c48:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8c4c:	2e00      	cmp	r6, #0
   d8c4e:	d03f      	beq.n	d8cd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8c50:	4618      	mov	r0, r3
   d8c52:	f7ff fabf 	bl	d81d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8c56:	4607      	mov	r7, r0
   d8c58:	b120      	cbz	r0, d8c64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8c5a:	4621      	mov	r1, r4
   d8c5c:	4630      	mov	r0, r6
   d8c5e:	f7ff fe53 	bl	d8908 <_ZNKSt8functionIFvRKbEEclES1_>
   d8c62:	e02e      	b.n	d8cc2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8c64:	4631      	mov	r1, r6
   d8c66:	a801      	add	r0, sp, #4
   d8c68:	f7ff ffaf 	bl	d8bca <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8c6c:	7823      	ldrb	r3, [r4, #0]
   d8c6e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8c72:	2010      	movs	r0, #16
   d8c74:	f7fb fa11 	bl	d409a <_Znwj>
   d8c78:	4605      	mov	r5, r0
   d8c7a:	b1d0      	cbz	r0, d8cb2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8c7c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c7e:	2014      	movs	r0, #20
   d8c80:	f7fb fa0b 	bl	d409a <_Znwj>
   d8c84:	4604      	mov	r4, r0
   d8c86:	b178      	cbz	r0, d8ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8c88:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8c8a:	4601      	mov	r1, r0
   d8c8c:	a801      	add	r0, sp, #4
   d8c8e:	f7fe ff4b 	bl	d7b28 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c92:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8c94:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c96:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c98:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8c9a:	9203      	str	r2, [sp, #12]
   d8c9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c9e:	60e3      	str	r3, [r4, #12]
   d8ca0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8ca4:	9204      	str	r2, [sp, #16]
   d8ca6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8ca8:	4b0a      	ldr	r3, [pc, #40]	; (d8cd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8caa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8cac:	4b0a      	ldr	r3, [pc, #40]	; (d8cd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8cb0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8cb2:	a801      	add	r0, sp, #4
   d8cb4:	f7fd ff07 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8cb8:	2200      	movs	r2, #0
   d8cba:	4629      	mov	r1, r5
   d8cbc:	4807      	ldr	r0, [pc, #28]	; (d8cdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8cbe:	f7ff fa91 	bl	d81e4 <application_thread_invoke>
   d8cc2:	4630      	mov	r0, r6
   d8cc4:	f7fd feff 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8cc8:	2110      	movs	r1, #16
   d8cca:	4630      	mov	r0, r6
   d8ccc:	f001 faa5 	bl	da21a <_ZdlPvj>
        }
    }
   d8cd0:	b007      	add	sp, #28
   d8cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8cd4:	000d891b 	.word	0x000d891b
   d8cd8:	000d8be9 	.word	0x000d8be9
   d8cdc:	000d8467 	.word	0x000d8467

000d8ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8ce0:	b530      	push	{r4, r5, lr}
   d8ce2:	b085      	sub	sp, #20
   d8ce4:	4604      	mov	r4, r0
   d8ce6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8ce8:	4668      	mov	r0, sp
   d8cea:	4611      	mov	r1, r2
   d8cec:	f7ff fdca 	bl	d8884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8cf0:	b17c      	cbz	r4, d8d12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8cf2:	b224      	sxth	r4, r4
   d8cf4:	4628      	mov	r0, r5
   d8cf6:	b10d      	cbz	r5, d8cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8cf8:	f002 fda0 	bl	db83c <strdup>
   d8cfc:	9002      	str	r0, [sp, #8]
   d8cfe:	a902      	add	r1, sp, #8
   d8d00:	4668      	mov	r0, sp
   d8d02:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8d06:	f7ff fe1f 	bl	d8948 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8d0a:	a802      	add	r0, sp, #8
   d8d0c:	f7ff fd52 	bl	d87b4 <_ZN8particle5ErrorD1Ev>
   d8d10:	e01d      	b.n	d8d4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8d12:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8d14:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8d18:	f04f 0201 	mov.w	r2, #1
   d8d1c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8d20:	42a3      	cmp	r3, r4
   d8d22:	d103      	bne.n	d8d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8d24:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8d28:	2900      	cmp	r1, #0
   d8d2a:	d1f7      	bne.n	d8d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8d2c:	d002      	beq.n	d8d34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8d2e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d32:	e00c      	b.n	d8d4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8d34:	f110 010c 	adds.w	r1, r0, #12
   d8d38:	f04f 0301 	mov.w	r3, #1
   d8d3c:	bf18      	it	ne
   d8d3e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8d40:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8d44:	3004      	adds	r0, #4
   d8d46:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8d4a:	f7ff ff71 	bl	d8c30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8d4e:	a801      	add	r0, sp, #4
   d8d50:	f7ff fbbc 	bl	d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8d54:	b005      	add	sp, #20
   d8d56:	bd30      	pop	{r4, r5, pc}

000d8d58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d58:	2200      	movs	r2, #0
   d8d5a:	4611      	mov	r1, r2
   d8d5c:	6840      	ldr	r0, [r0, #4]
   d8d5e:	f7ff bb17 	b.w	d8390 <network_listening>

000d8d62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8d62:	2200      	movs	r2, #0
   d8d64:	4611      	mov	r1, r2
   d8d66:	6840      	ldr	r0, [r0, #4]
   d8d68:	f7ff bb22 	b.w	d83b0 <network_get_listen_timeout>

000d8d6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8d6c:	2200      	movs	r2, #0
   d8d6e:	6840      	ldr	r0, [r0, #4]
   d8d70:	f7ff bb16 	b.w	d83a0 <network_set_listen_timeout>

000d8d74 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d74:	2200      	movs	r2, #0
   d8d76:	f081 0101 	eor.w	r1, r1, #1
   d8d7a:	6840      	ldr	r0, [r0, #4]
   d8d7c:	f7ff bb00 	b.w	d8380 <network_listen>

000d8d80 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8d80:	2300      	movs	r3, #0
   d8d82:	461a      	mov	r2, r3
   d8d84:	4619      	mov	r1, r3
   d8d86:	6840      	ldr	r0, [r0, #4]
   d8d88:	f7ff baf2 	b.w	d8370 <network_off>

000d8d8c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8d8c:	2300      	movs	r3, #0
   d8d8e:	461a      	mov	r2, r3
   d8d90:	4619      	mov	r1, r3
   d8d92:	6840      	ldr	r0, [r0, #4]
   d8d94:	f7ff bae4 	b.w	d8360 <network_on>

000d8d98 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8d98:	2200      	movs	r2, #0
   d8d9a:	4611      	mov	r1, r2
   d8d9c:	6840      	ldr	r0, [r0, #4]
   d8d9e:	f7ff bad7 	b.w	d8350 <network_ready>

000d8da2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8da2:	2200      	movs	r2, #0
   d8da4:	4611      	mov	r1, r2
   d8da6:	6840      	ldr	r0, [r0, #4]
   d8da8:	f7ff bac2 	b.w	d8330 <network_connecting>

000d8dac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8dac:	2200      	movs	r2, #0
   d8dae:	2102      	movs	r1, #2
   d8db0:	6840      	ldr	r0, [r0, #4]
   d8db2:	f7ff bac5 	b.w	d8340 <network_disconnect>

000d8db6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8db6:	2300      	movs	r3, #0
   d8db8:	461a      	mov	r2, r3
   d8dba:	6840      	ldr	r0, [r0, #4]
   d8dbc:	f7ff bab0 	b.w	d8320 <network_connect>

000d8dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8dc0:	4b02      	ldr	r3, [pc, #8]	; (d8dcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8dc2:	2203      	movs	r2, #3
   d8dc4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8dc6:	4a02      	ldr	r2, [pc, #8]	; (d8dd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8dc8:	601a      	str	r2, [r3, #0]
   d8dca:	4770      	bx	lr
   d8dcc:	2003e290 	.word	0x2003e290
   d8dd0:	000dd7ac 	.word	0x000dd7ac

000d8dd4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8dd4:	4770      	bx	lr

000d8dd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8dd8:	4606      	mov	r6, r0
   d8dda:	4615      	mov	r5, r2
   d8ddc:	460c      	mov	r4, r1
   d8dde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8de0:	42bc      	cmp	r4, r7
   d8de2:	d006      	beq.n	d8df2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8de4:	6833      	ldr	r3, [r6, #0]
   d8de6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8dea:	689b      	ldr	r3, [r3, #8]
   d8dec:	4630      	mov	r0, r6
   d8dee:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8df0:	e7f6      	b.n	d8de0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8df2:	4628      	mov	r0, r5
   d8df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8df6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8df6:	2200      	movs	r2, #0
   d8df8:	7c00      	ldrb	r0, [r0, #16]
   d8dfa:	f7ff b889 	b.w	d7f10 <HAL_I2C_Write_Data>

000d8dfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8dfe:	2100      	movs	r1, #0
   d8e00:	7c00      	ldrb	r0, [r0, #16]
   d8e02:	f7ff b88d 	b.w	d7f20 <HAL_I2C_Available_Data>

000d8e06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8e06:	2100      	movs	r1, #0
   d8e08:	7c00      	ldrb	r0, [r0, #16]
   d8e0a:	f7ff b891 	b.w	d7f30 <HAL_I2C_Read_Data>

000d8e0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8e0e:	2100      	movs	r1, #0
   d8e10:	7c00      	ldrb	r0, [r0, #16]
   d8e12:	f7ff b895 	b.w	d7f40 <HAL_I2C_Peek_Data>

000d8e16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8e16:	2100      	movs	r1, #0
   d8e18:	7c00      	ldrb	r0, [r0, #16]
   d8e1a:	f7ff b899 	b.w	d7f50 <HAL_I2C_Flush_Data>

000d8e1e <_ZN7TwoWireD0Ev>:
   d8e1e:	b510      	push	{r4, lr}
   d8e20:	2114      	movs	r1, #20
   d8e22:	4604      	mov	r4, r0
   d8e24:	f001 f9f9 	bl	da21a <_ZdlPvj>
   d8e28:	4620      	mov	r0, r4
   d8e2a:	bd10      	pop	{r4, pc}

000d8e2c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8e2c:	b510      	push	{r4, lr}
   d8e2e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8e30:	2300      	movs	r3, #0
   d8e32:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8e38:	60a3      	str	r3, [r4, #8]
   d8e3a:	4b04      	ldr	r3, [pc, #16]	; (d8e4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8e3c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8e3e:	4608      	mov	r0, r1
   d8e40:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8e42:	4611      	mov	r1, r2
   d8e44:	f7ff f894 	bl	d7f70 <HAL_I2C_Init>
}
   d8e48:	4620      	mov	r0, r4
   d8e4a:	bd10      	pop	{r4, pc}
   d8e4c:	000dd7e0 	.word	0x000dd7e0

000d8e50 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8e50:	2300      	movs	r3, #0
   d8e52:	461a      	mov	r2, r3
   d8e54:	4619      	mov	r1, r3
   d8e56:	7c00      	ldrb	r0, [r0, #16]
   d8e58:	f7ff b842 	b.w	d7ee0 <HAL_I2C_Begin>

000d8e5c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8e5c:	b570      	push	{r4, r5, r6, lr}
   d8e5e:	460c      	mov	r4, r1
   d8e60:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8e62:	2514      	movs	r5, #20
   d8e64:	4606      	mov	r6, r0
   d8e66:	462a      	mov	r2, r5
   d8e68:	2100      	movs	r1, #0
   d8e6a:	a801      	add	r0, sp, #4
   d8e6c:	f002 fa56 	bl	db31c <memset>
   d8e70:	7823      	ldrb	r3, [r4, #0]
   d8e72:	f88d 3008 	strb.w	r3, [sp, #8]
   d8e76:	6863      	ldr	r3, [r4, #4]
   d8e78:	9303      	str	r3, [sp, #12]
   d8e7a:	68e3      	ldr	r3, [r4, #12]
   d8e7c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8e7e:	2200      	movs	r2, #0
   d8e80:	7a23      	ldrb	r3, [r4, #8]
   d8e82:	7c30      	ldrb	r0, [r6, #16]
   d8e84:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8e88:	a901      	add	r1, sp, #4
   d8e8a:	9305      	str	r3, [sp, #20]
   d8e8c:	f7ff f888 	bl	d7fa0 <HAL_I2C_Request_Data_Ex>
}
   d8e90:	b006      	add	sp, #24
   d8e92:	bd70      	pop	{r4, r5, r6, pc}

000d8e94 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8e96:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e98:	f88d 1000 	strb.w	r1, [sp]
   d8e9c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8ea0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8ea2:	bf18      	it	ne
   d8ea4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8ea6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8ea8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8eaa:	f88d 3008 	strb.w	r3, [sp, #8]
   d8eae:	f7ff ffd5 	bl	d8e5c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8eb2:	b005      	add	sp, #20
   d8eb4:	f85d fb04 	ldr.w	pc, [sp], #4

000d8eb8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8eb8:	2200      	movs	r2, #0
   d8eba:	7c00      	ldrb	r0, [r0, #16]
   d8ebc:	f7ff b818 	b.w	d7ef0 <HAL_I2C_Begin_Transmission>

000d8ec0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8ec0:	b2c9      	uxtb	r1, r1
   d8ec2:	f7ff bff9 	b.w	d8eb8 <_ZN7TwoWire17beginTransmissionEh>

000d8ec6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8ec6:	2200      	movs	r2, #0
   d8ec8:	7c00      	ldrb	r0, [r0, #16]
   d8eca:	f7ff b819 	b.w	d7f00 <HAL_I2C_End_Transmission>

000d8ece <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8ece:	2100      	movs	r1, #0
   d8ed0:	7c00      	ldrb	r0, [r0, #16]
   d8ed2:	f7ff b845 	b.w	d7f60 <HAL_I2C_Is_Enabled>

000d8ed6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8ed6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8ed8:	2100      	movs	r1, #0
   d8eda:	7c00      	ldrb	r0, [r0, #16]
   d8edc:	f7ff f850 	bl	d7f80 <HAL_I2C_Acquire>
}
   d8ee0:	fab0 f080 	clz	r0, r0
   d8ee4:	0940      	lsrs	r0, r0, #5
   d8ee6:	bd08      	pop	{r3, pc}

000d8ee8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8ee8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8eea:	2100      	movs	r1, #0
   d8eec:	7c00      	ldrb	r0, [r0, #16]
   d8eee:	f7ff f84f 	bl	d7f90 <HAL_I2C_Release>
}
   d8ef2:	fab0 f080 	clz	r0, r0
   d8ef6:	0940      	lsrs	r0, r0, #5
   d8ef8:	bd08      	pop	{r3, pc}

000d8efa <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8efa:	4700      	bx	r0

000d8efc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8efc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8efe:	b085      	sub	sp, #20
   d8f00:	461c      	mov	r4, r3
   d8f02:	460e      	mov	r6, r1
   d8f04:	4617      	mov	r7, r2
   d8f06:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d8f08:	f7fe ffd2 	bl	d7eb0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8f0c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8f0e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f10:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8f14:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f16:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d8f1a:	bfa5      	ittet	ge
   d8f1c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8f20:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8f24:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8f26:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f28:	9300      	str	r3, [sp, #0]
   d8f2a:	4632      	mov	r2, r6
   d8f2c:	463b      	mov	r3, r7
   d8f2e:	4906      	ldr	r1, [pc, #24]	; (d8f48 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8f30:	bfa8      	it	ge
   d8f32:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f36:	4628      	mov	r0, r5
   d8f38:	f7fe ffb2 	bl	d7ea0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8f3c:	fab0 f080 	clz	r0, r0
   d8f40:	0940      	lsrs	r0, r0, #5
   d8f42:	b005      	add	sp, #20
   d8f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8f46:	bf00      	nop
   d8f48:	000d8efb 	.word	0x000d8efb

000d8f4c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8f4c:	f7fe bfc0 	b.w	d7ed0 <HAL_Interrupts_Disable_All>

000d8f50 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8f50:	f7fe bfb6 	b.w	d7ec0 <HAL_Interrupts_Enable_All>

000d8f54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8f54:	4770      	bx	lr

000d8f56 <_ZN9IPAddressD0Ev>:
   d8f56:	b510      	push	{r4, lr}
   d8f58:	2118      	movs	r1, #24
   d8f5a:	4604      	mov	r4, r0
   d8f5c:	f001 f95d 	bl	da21a <_ZdlPvj>
   d8f60:	4620      	mov	r0, r4
   d8f62:	bd10      	pop	{r4, pc}

000d8f64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8f64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8f66:	7d03      	ldrb	r3, [r0, #20]
   d8f68:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8f6a:	b08d      	sub	sp, #52	; 0x34
   d8f6c:	460e      	mov	r6, r1
   d8f6e:	f100 0704 	add.w	r7, r0, #4
   d8f72:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8f76:	d002      	beq.n	d8f7e <_ZNK9IPAddress7printToER5Print+0x1a>
   d8f78:	f100 0508 	add.w	r5, r0, #8
   d8f7c:	e018      	b.n	d8fb0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8f7e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8f80:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8f82:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8f86:	232f      	movs	r3, #47	; 0x2f
   d8f88:	462a      	mov	r2, r5
   d8f8a:	200a      	movs	r0, #10
   d8f8c:	f7ff f810 	bl	d7fb0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8f90:	4628      	mov	r0, r5
   d8f92:	f003 f983 	bl	dc29c <strlen>
   d8f96:	6833      	ldr	r3, [r6, #0]
   d8f98:	4602      	mov	r2, r0
   d8f9a:	68db      	ldr	r3, [r3, #12]
   d8f9c:	4629      	mov	r1, r5
   d8f9e:	4630      	mov	r0, r6
   d8fa0:	4798      	blx	r3
   d8fa2:	e00f      	b.n	d8fc4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8fa4:	b124      	cbz	r4, d8fb0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8fa6:	212e      	movs	r1, #46	; 0x2e
   d8fa8:	4630      	mov	r0, r6
   d8faa:	f000 f9d9 	bl	d9360 <_ZN5Print5printEc>
   d8fae:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8fb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8fb4:	220a      	movs	r2, #10
   d8fb6:	4630      	mov	r0, r6
   d8fb8:	f000 f9eb 	bl	d9392 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8fbc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8fbe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8fc0:	d1f0      	bne.n	d8fa4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8fc2:	4620      	mov	r0, r4
    }
    return n;
}
   d8fc4:	b00d      	add	sp, #52	; 0x34
   d8fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8fc8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8fc8:	b510      	push	{r4, lr}
   d8fca:	4b05      	ldr	r3, [pc, #20]	; (d8fe0 <_ZN9IPAddressC1Ev+0x18>)
   d8fcc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8fce:	2211      	movs	r2, #17
   d8fd0:	f840 3b04 	str.w	r3, [r0], #4
   d8fd4:	2100      	movs	r1, #0
   d8fd6:	f002 f9a1 	bl	db31c <memset>
{
    clear();
}
   d8fda:	4620      	mov	r0, r4
   d8fdc:	bd10      	pop	{r4, pc}
   d8fde:	bf00      	nop
   d8fe0:	000dd808 	.word	0x000dd808

000d8fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8fe4:	4603      	mov	r3, r0
   d8fe6:	4a07      	ldr	r2, [pc, #28]	; (d9004 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8fe8:	b510      	push	{r4, lr}
   d8fea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8fee:	f101 0210 	add.w	r2, r1, #16
   d8ff2:	f851 4b04 	ldr.w	r4, [r1], #4
   d8ff6:	f843 4b04 	str.w	r4, [r3], #4
   d8ffa:	4291      	cmp	r1, r2
   d8ffc:	d1f9      	bne.n	d8ff2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8ffe:	780a      	ldrb	r2, [r1, #0]
   d9000:	701a      	strb	r2, [r3, #0]
}
   d9002:	bd10      	pop	{r4, pc}
   d9004:	000dd808 	.word	0x000dd808

000d9008 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9008:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d900a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d900e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9012:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9016:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d901a:	2304      	movs	r3, #4
   d901c:	6041      	str	r1, [r0, #4]
   d901e:	7503      	strb	r3, [r0, #20]
   d9020:	bd10      	pop	{r4, pc}

000d9022 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9022:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9024:	780d      	ldrb	r5, [r1, #0]
   d9026:	788b      	ldrb	r3, [r1, #2]
   d9028:	784a      	ldrb	r2, [r1, #1]
   d902a:	78c9      	ldrb	r1, [r1, #3]
   d902c:	9100      	str	r1, [sp, #0]
   d902e:	4629      	mov	r1, r5
   d9030:	f7ff ffea 	bl	d9008 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9034:	b003      	add	sp, #12
   d9036:	bd30      	pop	{r4, r5, pc}

000d9038 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9038:	4b01      	ldr	r3, [pc, #4]	; (d9040 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d903a:	4a02      	ldr	r2, [pc, #8]	; (d9044 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d903c:	601a      	str	r2, [r3, #0]
   d903e:	4770      	bx	lr
   d9040:	2003e298 	.word	0x2003e298
   d9044:	000dd884 	.word	0x000dd884

000d9048 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9048:	2200      	movs	r2, #0
   d904a:	4611      	mov	r1, r2
   d904c:	6840      	ldr	r0, [r0, #4]
   d904e:	f7ff b99f 	b.w	d8390 <network_listening>

000d9052 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9052:	2200      	movs	r2, #0
   d9054:	4611      	mov	r1, r2
   d9056:	6840      	ldr	r0, [r0, #4]
   d9058:	f7ff b9aa 	b.w	d83b0 <network_get_listen_timeout>

000d905c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d905c:	2200      	movs	r2, #0
   d905e:	6840      	ldr	r0, [r0, #4]
   d9060:	f7ff b99e 	b.w	d83a0 <network_set_listen_timeout>

000d9064 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9064:	2200      	movs	r2, #0
   d9066:	f081 0101 	eor.w	r1, r1, #1
   d906a:	6840      	ldr	r0, [r0, #4]
   d906c:	f7ff b988 	b.w	d8380 <network_listen>

000d9070 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d9070:	2300      	movs	r3, #0
   d9072:	461a      	mov	r2, r3
   d9074:	2101      	movs	r1, #1
   d9076:	6840      	ldr	r0, [r0, #4]
   d9078:	f7ff b97a 	b.w	d8370 <network_off>

000d907c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d907c:	2300      	movs	r3, #0
   d907e:	461a      	mov	r2, r3
   d9080:	4619      	mov	r1, r3
   d9082:	6840      	ldr	r0, [r0, #4]
   d9084:	f7ff b96c 	b.w	d8360 <network_on>

000d9088 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9088:	2200      	movs	r2, #0
   d908a:	4611      	mov	r1, r2
   d908c:	6840      	ldr	r0, [r0, #4]
   d908e:	f7ff b95f 	b.w	d8350 <network_ready>

000d9092 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9092:	2200      	movs	r2, #0
   d9094:	4611      	mov	r1, r2
   d9096:	6840      	ldr	r0, [r0, #4]
   d9098:	f7ff b94a 	b.w	d8330 <network_connecting>

000d909c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d909c:	2200      	movs	r2, #0
   d909e:	2102      	movs	r1, #2
   d90a0:	6840      	ldr	r0, [r0, #4]
   d90a2:	f7ff b94d 	b.w	d8340 <network_disconnect>

000d90a6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d90a6:	2300      	movs	r3, #0
   d90a8:	461a      	mov	r2, r3
   d90aa:	6840      	ldr	r0, [r0, #4]
   d90ac:	f7ff b938 	b.w	d8320 <network_connect>

000d90b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d90b0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d90b2:	4605      	mov	r5, r0
   d90b4:	b188      	cbz	r0, d90da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d90b6:	6804      	ldr	r4, [r0, #0]
   d90b8:	b14c      	cbz	r4, d90ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d90ba:	68a3      	ldr	r3, [r4, #8]
   d90bc:	b11b      	cbz	r3, d90c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d90be:	2203      	movs	r2, #3
   d90c0:	4621      	mov	r1, r4
   d90c2:	4620      	mov	r0, r4
   d90c4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d90c6:	2110      	movs	r1, #16
   d90c8:	4620      	mov	r0, r4
   d90ca:	f001 f8a6 	bl	da21a <_ZdlPvj>
   d90ce:	4628      	mov	r0, r5
   d90d0:	2114      	movs	r1, #20
      }
   d90d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d90d6:	f001 b8a0 	b.w	da21a <_ZdlPvj>
   d90da:	bd38      	pop	{r3, r4, r5, pc}

000d90dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d90dc:	b110      	cbz	r0, d90e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d90de:	6803      	ldr	r3, [r0, #0]
   d90e0:	685b      	ldr	r3, [r3, #4]
   d90e2:	4718      	bx	r3
   d90e4:	4770      	bx	lr

000d90e6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d90e6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d90e8:	6803      	ldr	r3, [r0, #0]
   d90ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d90ec:	b1bb      	cbz	r3, d911e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d90ee:	6858      	ldr	r0, [r3, #4]
   d90f0:	f7fe fdee 	bl	d7cd0 <os_thread_is_current>
   d90f4:	b978      	cbnz	r0, d9116 <_ZN6ThreadD1Ev+0x30>
   d90f6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d90f8:	7c5a      	ldrb	r2, [r3, #17]
   d90fa:	b912      	cbnz	r2, d9102 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d90fc:	6858      	ldr	r0, [r3, #4]
   d90fe:	f7fe fdf7 	bl	d7cf0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d9102:	6823      	ldr	r3, [r4, #0]
   d9104:	6858      	ldr	r0, [r3, #4]
   d9106:	f7fe fdfb 	bl	d7d00 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d910a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d910c:	2300      	movs	r3, #0
   d910e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d9110:	b128      	cbz	r0, d911e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d9112:	f7ff ffcd 	bl	d90b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9116:	6820      	ldr	r0, [r4, #0]
   d9118:	b108      	cbz	r0, d911e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d911a:	f7ff ffc9 	bl	d90b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d911e:	4620      	mov	r0, r4
   d9120:	bd10      	pop	{r4, pc}

000d9122 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d9122:	b538      	push	{r3, r4, r5, lr}
   d9124:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9126:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d912a:	b108      	cbz	r0, d9130 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d912c:	f7fa ffb9 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9130:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d9134:	b108      	cbz	r0, d913a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d9136:	f7fe fe13 	bl	d7d60 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d913a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d913e:	b135      	cbz	r5, d914e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9140:	4628      	mov	r0, r5
   d9142:	f7ff ffd0 	bl	d90e6 <_ZN6ThreadD1Ev>
   d9146:	2104      	movs	r1, #4
   d9148:	4628      	mov	r0, r5
   d914a:	f001 f866 	bl	da21a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d914e:	6820      	ldr	r0, [r4, #0]
   d9150:	b108      	cbz	r0, d9156 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d9152:	f7ff ffc3 	bl	d90dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d9156:	4620      	mov	r0, r4
   d9158:	bd38      	pop	{r3, r4, r5, pc}
	...

000d915c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d915c:	b510      	push	{r4, lr}
   d915e:	4b04      	ldr	r3, [pc, #16]	; (d9170 <_ZN5spark9MeshClassD1Ev+0x14>)
   d9160:	4604      	mov	r4, r0
   d9162:	f840 3b08 	str.w	r3, [r0], #8
   d9166:	f7ff ffdc 	bl	d9122 <_ZN5spark11MeshPublishD1Ev>
   d916a:	4620      	mov	r0, r4
   d916c:	bd10      	pop	{r4, pc}
   d916e:	bf00      	nop
   d9170:	000dd8f0 	.word	0x000dd8f0

000d9174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d9174:	b538      	push	{r3, r4, r5, lr}
   d9176:	4c0e      	ldr	r4, [pc, #56]	; (d91b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d9178:	4b0e      	ldr	r3, [pc, #56]	; (d91b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d917a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d917c:	2500      	movs	r5, #0
   d917e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d9180:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d9184:	6063      	str	r3, [r4, #4]
   d9186:	60a5      	str	r5, [r4, #8]
   d9188:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d918c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d9190:	f7fe fdde 	bl	d7d50 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d9194:	4b08      	ldr	r3, [pc, #32]	; (d91b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d9196:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d919a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d919e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d91a0:	4620      	mov	r0, r4
   d91a2:	4a06      	ldr	r2, [pc, #24]	; (d91bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d91a4:	4906      	ldr	r1, [pc, #24]	; (d91c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d91a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d91aa:	f001 b831 	b.w	da210 <__aeabi_atexit>
   d91ae:	bf00      	nop
   d91b0:	2003e29c 	.word	0x2003e29c
   d91b4:	000dd924 	.word	0x000dd924
   d91b8:	000dd8f0 	.word	0x000dd8f0
   d91bc:	2003dea8 	.word	0x2003dea8
   d91c0:	000d915d 	.word	0x000d915d

000d91c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d91c4:	2300      	movs	r3, #0
   d91c6:	461a      	mov	r2, r3
   d91c8:	6840      	ldr	r0, [r0, #4]
   d91ca:	f7ff b8a9 	b.w	d8320 <network_connect>

000d91ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d91ce:	2200      	movs	r2, #0
   d91d0:	2102      	movs	r1, #2
   d91d2:	6840      	ldr	r0, [r0, #4]
   d91d4:	f7ff b8b4 	b.w	d8340 <network_disconnect>

000d91d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d91d8:	2200      	movs	r2, #0
   d91da:	4611      	mov	r1, r2
   d91dc:	6840      	ldr	r0, [r0, #4]
   d91de:	f7ff b8a7 	b.w	d8330 <network_connecting>

000d91e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d91e2:	2200      	movs	r2, #0
   d91e4:	4611      	mov	r1, r2
   d91e6:	6840      	ldr	r0, [r0, #4]
   d91e8:	f7ff b8b2 	b.w	d8350 <network_ready>

000d91ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d91ec:	2300      	movs	r3, #0
   d91ee:	461a      	mov	r2, r3
   d91f0:	4619      	mov	r1, r3
   d91f2:	6840      	ldr	r0, [r0, #4]
   d91f4:	f7ff b8b4 	b.w	d8360 <network_on>

000d91f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d91f8:	2300      	movs	r3, #0
   d91fa:	461a      	mov	r2, r3
   d91fc:	4619      	mov	r1, r3
   d91fe:	6840      	ldr	r0, [r0, #4]
   d9200:	f7ff b8b6 	b.w	d8370 <network_off>

000d9204 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9204:	2200      	movs	r2, #0
   d9206:	f081 0101 	eor.w	r1, r1, #1
   d920a:	6840      	ldr	r0, [r0, #4]
   d920c:	f7ff b8b8 	b.w	d8380 <network_listen>

000d9210 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9210:	2200      	movs	r2, #0
   d9212:	6840      	ldr	r0, [r0, #4]
   d9214:	f7ff b8c4 	b.w	d83a0 <network_set_listen_timeout>

000d9218 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9218:	2200      	movs	r2, #0
   d921a:	4611      	mov	r1, r2
   d921c:	6840      	ldr	r0, [r0, #4]
   d921e:	f7ff b8c7 	b.w	d83b0 <network_get_listen_timeout>

000d9222 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9222:	2200      	movs	r2, #0
   d9224:	4611      	mov	r1, r2
   d9226:	6840      	ldr	r0, [r0, #4]
   d9228:	f7ff b8b2 	b.w	d8390 <network_listening>

000d922c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d922c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9230:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d9232:	b095      	sub	sp, #84	; 0x54
   d9234:	4616      	mov	r6, r2
   d9236:	460d      	mov	r5, r1
   d9238:	4607      	mov	r7, r0
    IPAddress addr;
   d923a:	f7ff fec5 	bl	d8fc8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d923e:	4621      	mov	r1, r4
   d9240:	2220      	movs	r2, #32
   d9242:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9244:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9246:	f002 f869 	bl	db31c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d924a:	2340      	movs	r3, #64	; 0x40
   d924c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d924e:	4621      	mov	r1, r4
   d9250:	466b      	mov	r3, sp
   d9252:	aa0c      	add	r2, sp, #48	; 0x30
   d9254:	4630      	mov	r0, r6
   d9256:	f7fe febb 	bl	d7fd0 <netdb_getaddrinfo>
    if (!r) {
   d925a:	4604      	mov	r4, r0
   d925c:	2800      	cmp	r0, #0
   d925e:	d144      	bne.n	d92ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9260:	4602      	mov	r2, r0
   d9262:	2101      	movs	r1, #1
   d9264:	6868      	ldr	r0, [r5, #4]
   d9266:	f7ff f873 	bl	d8350 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d926a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d926c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d926e:	4622      	mov	r2, r4
   d9270:	6868      	ldr	r0, [r5, #4]
   d9272:	f7ff f86d 	bl	d8350 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9276:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9278:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d927a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d927c:	2e00      	cmp	r6, #0
   d927e:	d034      	beq.n	d92ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d9280:	2900      	cmp	r1, #0
   d9282:	d132      	bne.n	d92ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9284:	6873      	ldr	r3, [r6, #4]
   d9286:	2b02      	cmp	r3, #2
   d9288:	d002      	beq.n	d9290 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d928a:	2b0a      	cmp	r3, #10
   d928c:	d009      	beq.n	d92a2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d928e:	e02a      	b.n	d92e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d9290:	f1b8 0f00 	cmp.w	r8, #0
   d9294:	d027      	beq.n	d92e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9296:	6971      	ldr	r1, [r6, #20]
   d9298:	4638      	mov	r0, r7
   d929a:	3104      	adds	r1, #4
   d929c:	f7ff fec1 	bl	d9022 <_ZN9IPAddressaSEPKh>
   d92a0:	e020      	b.n	d92e4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d92a2:	f1b9 0f00 	cmp.w	r9, #0
   d92a6:	d01e      	beq.n	d92e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d92a8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d92aa:	2211      	movs	r2, #17
   d92ac:	a801      	add	r0, sp, #4
   d92ae:	f002 f835 	bl	db31c <memset>
                    a.v = 6;
   d92b2:	2306      	movs	r3, #6
   d92b4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d92b8:	ad01      	add	r5, sp, #4
   d92ba:	f104 0308 	add.w	r3, r4, #8
   d92be:	3418      	adds	r4, #24
   d92c0:	6818      	ldr	r0, [r3, #0]
   d92c2:	6859      	ldr	r1, [r3, #4]
   d92c4:	462a      	mov	r2, r5
   d92c6:	c203      	stmia	r2!, {r0, r1}
   d92c8:	3308      	adds	r3, #8
   d92ca:	42a3      	cmp	r3, r4
   d92cc:	4615      	mov	r5, r2
   d92ce:	d1f7      	bne.n	d92c0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d92d0:	a901      	add	r1, sp, #4
   d92d2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d92d4:	ad07      	add	r5, sp, #28
   d92d6:	f7ff fe85 	bl	d8fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d92da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d92dc:	1d3c      	adds	r4, r7, #4
   d92de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d92e0:	682b      	ldr	r3, [r5, #0]
   d92e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d92e4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d92e6:	69f6      	ldr	r6, [r6, #28]
   d92e8:	e7c8      	b.n	d927c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d92ea:	9800      	ldr	r0, [sp, #0]
   d92ec:	f7fe fe68 	bl	d7fc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d92f0:	4638      	mov	r0, r7
   d92f2:	b015      	add	sp, #84	; 0x54
   d92f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d92f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d92f8:	4b02      	ldr	r3, [pc, #8]	; (d9304 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d92fa:	4a03      	ldr	r2, [pc, #12]	; (d9308 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d92fc:	601a      	str	r2, [r3, #0]
   d92fe:	2200      	movs	r2, #0
   d9300:	605a      	str	r2, [r3, #4]
   d9302:	4770      	bx	lr
   d9304:	2003e470 	.word	0x2003e470
   d9308:	000dd924 	.word	0x000dd924

000d930c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d930e:	4606      	mov	r6, r0
   d9310:	460d      	mov	r5, r1
   d9312:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d9314:	2400      	movs	r4, #0
  while (size--) {
   d9316:	42bd      	cmp	r5, r7
   d9318:	d00c      	beq.n	d9334 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d931a:	6833      	ldr	r3, [r6, #0]
   d931c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9320:	689b      	ldr	r3, [r3, #8]
   d9322:	4630      	mov	r0, r6
   d9324:	4798      	blx	r3
     if (chunk>=0)
   d9326:	2800      	cmp	r0, #0
   d9328:	db01      	blt.n	d932e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d932a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d932c:	e7f3      	b.n	d9316 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d932e:	2c00      	cmp	r4, #0
   d9330:	bf08      	it	eq
   d9332:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d9334:	4620      	mov	r0, r4
   d9336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9338 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d9338:	b570      	push	{r4, r5, r6, lr}
   d933a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d933c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d933e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d9340:	b149      	cbz	r1, d9356 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d9342:	f002 ffab 	bl	dc29c <strlen>
   d9346:	682b      	ldr	r3, [r5, #0]
   d9348:	4602      	mov	r2, r0
   d934a:	4621      	mov	r1, r4
   d934c:	4628      	mov	r0, r5
   d934e:	68db      	ldr	r3, [r3, #12]
    }
   d9350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9354:	4718      	bx	r3
    }
   d9356:	bd70      	pop	{r4, r5, r6, pc}

000d9358 <_ZN5Print5printEPKc>:
   d9358:	b508      	push	{r3, lr}
   d935a:	f7ff ffed 	bl	d9338 <_ZN5Print5writeEPKc>
   d935e:	bd08      	pop	{r3, pc}

000d9360 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9360:	6803      	ldr	r3, [r0, #0]
   d9362:	689b      	ldr	r3, [r3, #8]
   d9364:	4718      	bx	r3

000d9366 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9366:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9368:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d936a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d936c:	f7ff fff8 	bl	d9360 <_ZN5Print5printEc>
  n += print('\n');
   d9370:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d9372:	4604      	mov	r4, r0
  n += print('\n');
   d9374:	4628      	mov	r0, r5
   d9376:	f7ff fff3 	bl	d9360 <_ZN5Print5printEc>
  return n;
}
   d937a:	4420      	add	r0, r4
   d937c:	bd38      	pop	{r3, r4, r5, pc}

000d937e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d937e:	b538      	push	{r3, r4, r5, lr}
   d9380:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9382:	f7ff ffd9 	bl	d9338 <_ZN5Print5writeEPKc>
   d9386:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d9388:	4628      	mov	r0, r5
   d938a:	f7ff ffec 	bl	d9366 <_ZN5Print7printlnEv>
  return n;
}
   d938e:	4420      	add	r0, r4
   d9390:	bd38      	pop	{r3, r4, r5, pc}

000d9392 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9392:	b530      	push	{r4, r5, lr}
   d9394:	b08b      	sub	sp, #44	; 0x2c
   d9396:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9398:	2100      	movs	r1, #0
   d939a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d939e:	2a01      	cmp	r2, #1
   d93a0:	bf98      	it	ls
   d93a2:	220a      	movls	r2, #10
   d93a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d93a8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d93ac:	fb05 3312 	mls	r3, r5, r2, r3
   d93b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d93b4:	2b09      	cmp	r3, #9
   d93b6:	bf94      	ite	ls
   d93b8:	3330      	addls	r3, #48	; 0x30
   d93ba:	3337      	addhi	r3, #55	; 0x37
   d93bc:	b2db      	uxtb	r3, r3
   d93be:	4621      	mov	r1, r4
   d93c0:	f804 3901 	strb.w	r3, [r4], #-1
   d93c4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d93c6:	2d00      	cmp	r5, #0
   d93c8:	d1ee      	bne.n	d93a8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d93ca:	f7ff ffb5 	bl	d9338 <_ZN5Print5writeEPKc>
}
   d93ce:	b00b      	add	sp, #44	; 0x2c
   d93d0:	bd30      	pop	{r4, r5, pc}
	...

000d93d4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d93d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93d8:	ec57 6b10 	vmov	r6, r7, d0
   d93dc:	4682      	mov	sl, r0
   d93de:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d93e0:	ee10 2a10 	vmov	r2, s0
   d93e4:	463b      	mov	r3, r7
   d93e6:	ee10 0a10 	vmov	r0, s0
   d93ea:	4639      	mov	r1, r7
   d93ec:	f001 fcce 	bl	dad8c <__aeabi_dcmpun>
   d93f0:	b108      	cbz	r0, d93f6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93f2:	494e      	ldr	r1, [pc, #312]	; (d952c <_ZN5Print10printFloatEdh+0x158>)
   d93f4:	e012      	b.n	d941c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d93f6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d93fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d93fe:	4b4c      	ldr	r3, [pc, #304]	; (d9530 <_ZN5Print10printFloatEdh+0x15c>)
   d9400:	4630      	mov	r0, r6
   d9402:	4649      	mov	r1, r9
   d9404:	f001 fcc2 	bl	dad8c <__aeabi_dcmpun>
   d9408:	b968      	cbnz	r0, d9426 <_ZN5Print10printFloatEdh+0x52>
   d940a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d940e:	4b48      	ldr	r3, [pc, #288]	; (d9530 <_ZN5Print10printFloatEdh+0x15c>)
   d9410:	4630      	mov	r0, r6
   d9412:	4649      	mov	r1, r9
   d9414:	f001 fc9c 	bl	dad50 <__aeabi_dcmple>
   d9418:	b928      	cbnz	r0, d9426 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d941a:	4946      	ldr	r1, [pc, #280]	; (d9534 <_ZN5Print10printFloatEdh+0x160>)
   d941c:	4650      	mov	r0, sl
   d941e:	f7ff ff8b 	bl	d9338 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d9422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d9426:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d942a:	4b43      	ldr	r3, [pc, #268]	; (d9538 <_ZN5Print10printFloatEdh+0x164>)
   d942c:	4630      	mov	r0, r6
   d942e:	4639      	mov	r1, r7
   d9430:	f001 fca2 	bl	dad78 <__aeabi_dcmpgt>
   d9434:	b108      	cbz	r0, d943a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9436:	4941      	ldr	r1, [pc, #260]	; (d953c <_ZN5Print10printFloatEdh+0x168>)
   d9438:	e7f0      	b.n	d941c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d943a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d943e:	4b40      	ldr	r3, [pc, #256]	; (d9540 <_ZN5Print10printFloatEdh+0x16c>)
   d9440:	4630      	mov	r0, r6
   d9442:	4639      	mov	r1, r7
   d9444:	f001 fc7a 	bl	dad3c <__aeabi_dcmplt>
   d9448:	2800      	cmp	r0, #0
   d944a:	d1f4      	bne.n	d9436 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d944c:	2200      	movs	r2, #0
   d944e:	2300      	movs	r3, #0
   d9450:	4630      	mov	r0, r6
   d9452:	4639      	mov	r1, r7
   d9454:	f001 fc72 	bl	dad3c <__aeabi_dcmplt>
   d9458:	b140      	cbz	r0, d946c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d945a:	212d      	movs	r1, #45	; 0x2d
   d945c:	4650      	mov	r0, sl
   d945e:	f7ff ff7f 	bl	d9360 <_ZN5Print5printEc>
     number = -number;
   d9462:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d9466:	4604      	mov	r4, r0
     number = -number;
   d9468:	461f      	mov	r7, r3
   d946a:	e000      	b.n	d946e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d946c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d946e:	4935      	ldr	r1, [pc, #212]	; (d9544 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9470:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9474:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d9476:	fa5f f388 	uxtb.w	r3, r8
   d947a:	429d      	cmp	r5, r3
   d947c:	d906      	bls.n	d948c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d947e:	2200      	movs	r2, #0
   d9480:	4b31      	ldr	r3, [pc, #196]	; (d9548 <_ZN5Print10printFloatEdh+0x174>)
   d9482:	f001 fb13 	bl	daaac <__aeabi_ddiv>
   d9486:	f108 0801 	add.w	r8, r8, #1
   d948a:	e7f4      	b.n	d9476 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d948c:	4632      	mov	r2, r6
   d948e:	463b      	mov	r3, r7
   d9490:	f001 f830 	bl	da4f4 <__adddf3>
   d9494:	460f      	mov	r7, r1
   d9496:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d9498:	f001 fcb6 	bl	dae08 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d949c:	220a      	movs	r2, #10
   d949e:	4601      	mov	r1, r0
   d94a0:	4680      	mov	r8, r0
   d94a2:	4650      	mov	r0, sl
   d94a4:	f7ff ff75 	bl	d9392 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d94a8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d94aa:	b3e5      	cbz	r5, d9526 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d94ac:	4640      	mov	r0, r8
   d94ae:	f001 f95d 	bl	da76c <__aeabi_ui2d>
   d94b2:	4602      	mov	r2, r0
   d94b4:	460b      	mov	r3, r1
   d94b6:	4630      	mov	r0, r6
   d94b8:	4639      	mov	r1, r7
   d94ba:	f001 f819 	bl	da4f0 <__aeabi_dsub>
   d94be:	4606      	mov	r6, r0
   d94c0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94c2:	4650      	mov	r0, sl
   d94c4:	4921      	ldr	r1, [pc, #132]	; (d954c <_ZN5Print10printFloatEdh+0x178>)
   d94c6:	f7ff ff37 	bl	d9338 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d94ca:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d94cc:	2200      	movs	r2, #0
   d94ce:	4b1e      	ldr	r3, [pc, #120]	; (d9548 <_ZN5Print10printFloatEdh+0x174>)
   d94d0:	4630      	mov	r0, r6
   d94d2:	4639      	mov	r1, r7
   d94d4:	f001 f9c0 	bl	da858 <__aeabi_dmul>
   d94d8:	4606      	mov	r6, r0
   d94da:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d94dc:	f001 fc6c 	bl	dadb8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d94e0:	f1b0 0900 	subs.w	r9, r0, #0
   d94e4:	da07      	bge.n	d94f6 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d94e6:	212d      	movs	r1, #45	; 0x2d
   d94e8:	4650      	mov	r0, sl
   d94ea:	f7ff ff39 	bl	d9360 <_ZN5Print5printEc>
            val = -n;
   d94ee:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d94f2:	4680      	mov	r8, r0
   d94f4:	e002      	b.n	d94fc <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d94f6:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d94f8:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d94fc:	220a      	movs	r2, #10
   d94fe:	4650      	mov	r0, sl
   d9500:	f7ff ff47 	bl	d9392 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d9504:	4440      	add	r0, r8
   d9506:	4404      	add	r4, r0
    remainder -= toPrint;
   d9508:	4648      	mov	r0, r9
   d950a:	f001 f93f 	bl	da78c <__aeabi_i2d>
   d950e:	4602      	mov	r2, r0
   d9510:	460b      	mov	r3, r1
   d9512:	4630      	mov	r0, r6
   d9514:	4639      	mov	r1, r7
   d9516:	f000 ffeb 	bl	da4f0 <__aeabi_dsub>
   d951a:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d951c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d9520:	4606      	mov	r6, r0
   d9522:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9524:	d1d2      	bne.n	d94cc <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d9526:	4620      	mov	r0, r4
   d9528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d952c:	000dd950 	.word	0x000dd950
   d9530:	7fefffff 	.word	0x7fefffff
   d9534:	000dd95a 	.word	0x000dd95a
   d9538:	41efffff 	.word	0x41efffff
   d953c:	000dd954 	.word	0x000dd954
   d9540:	c1efffff 	.word	0xc1efffff
   d9544:	3fe00000 	.word	0x3fe00000
   d9548:	40240000 	.word	0x40240000
   d954c:	000dd958 	.word	0x000dd958

000d9550 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d9550:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d9552:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d9554:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d9556:	f7ff ff3d 	bl	d93d4 <_ZN5Print10printFloatEdh>
   d955a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d955c:	4628      	mov	r0, r5
   d955e:	f7ff ff02 	bl	d9366 <_ZN5Print7printlnEv>
  return n;
}
   d9562:	4420      	add	r0, r4
   d9564:	bd38      	pop	{r3, r4, r5, pc}

000d9566 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d9566:	b40c      	push	{r2, r3}
   d9568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d956c:	b087      	sub	sp, #28
   d956e:	af00      	add	r7, sp, #0
   d9570:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d9574:	4605      	mov	r5, r0
   d9576:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d957a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d957c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d957e:	4623      	mov	r3, r4
   d9580:	464a      	mov	r2, r9
   d9582:	2114      	movs	r1, #20
   d9584:	1d38      	adds	r0, r7, #4
   d9586:	f7fe ff53 	bl	d8430 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d958a:	2813      	cmp	r0, #19
   d958c:	d805      	bhi.n	d959a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d958e:	1d39      	adds	r1, r7, #4
   d9590:	4628      	mov	r0, r5
   d9592:	f7ff fed1 	bl	d9338 <_ZN5Print5writeEPKc>
   d9596:	4604      	mov	r4, r0
   d9598:	e013      	b.n	d95c2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d959a:	f100 0308 	add.w	r3, r0, #8
   d959e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d95a2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d95a4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d95a8:	1c41      	adds	r1, r0, #1
   d95aa:	4623      	mov	r3, r4
   d95ac:	464a      	mov	r2, r9
   d95ae:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d95b0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d95b2:	f7fe ff3d 	bl	d8430 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d95b6:	4669      	mov	r1, sp
   d95b8:	4628      	mov	r0, r5
   d95ba:	f7ff febd 	bl	d9338 <_ZN5Print5writeEPKc>
   d95be:	4604      	mov	r4, r0
   d95c0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d95c2:	b11e      	cbz	r6, d95cc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d95c4:	4628      	mov	r0, r5
   d95c6:	f7ff fece 	bl	d9366 <_ZN5Print7printlnEv>
   d95ca:	4404      	add	r4, r0
    return n;
}
   d95cc:	4620      	mov	r0, r4
   d95ce:	371c      	adds	r7, #28
   d95d0:	46bd      	mov	sp, r7
   d95d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d95d6:	b002      	add	sp, #8
   d95d8:	4770      	bx	lr

000d95da <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d95da:	b510      	push	{r4, lr}
   d95dc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d95de:	f7fd fa72 	bl	d6ac6 <_ZNSt14_Function_baseD1Ev>
   d95e2:	4620      	mov	r0, r4
   d95e4:	bd10      	pop	{r4, pc}
	...

000d95e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d95e8:	4803      	ldr	r0, [pc, #12]	; (d95f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d95ea:	4a04      	ldr	r2, [pc, #16]	; (d95fc <_GLOBAL__sub_I_RGB+0x14>)
   d95ec:	4904      	ldr	r1, [pc, #16]	; (d9600 <_GLOBAL__sub_I_RGB+0x18>)
   d95ee:	2300      	movs	r3, #0
   d95f0:	6083      	str	r3, [r0, #8]
   d95f2:	f000 be0d 	b.w	da210 <__aeabi_atexit>
   d95f6:	bf00      	nop
   d95f8:	2003e478 	.word	0x2003e478
   d95fc:	2003dea8 	.word	0x2003dea8
   d9600:	000d95db 	.word	0x000d95db

000d9604 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d9604:	2100      	movs	r1, #0
   d9606:	f7fe bd1b 	b.w	d8040 <HAL_SPI_Acquire>

000d960a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d960a:	2100      	movs	r1, #0
   d960c:	f7fe bd20 	b.w	d8050 <HAL_SPI_Release>

000d9610 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9610:	b510      	push	{r4, lr}
   d9612:	4604      	mov	r4, r0
{
    _spi = spi;
   d9614:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d9616:	4608      	mov	r0, r1
   d9618:	f7fe fcf2 	bl	d8000 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d961c:	2300      	movs	r3, #0
   d961e:	6063      	str	r3, [r4, #4]
}
   d9620:	4620      	mov	r0, r4
   d9622:	bd10      	pop	{r4, pc}

000d9624 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9624:	b538      	push	{r3, r4, r5, lr}
   d9626:	4604      	mov	r4, r0
    if (!lock())
   d9628:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d962a:	460d      	mov	r5, r1
    if (!lock())
   d962c:	f7ff ffea 	bl	d9604 <_ZN8SPIClass4lockEv.isra.0>
   d9630:	b940      	cbnz	r0, d9644 <_ZN8SPIClass5beginEt+0x20>
    {
        HAL_SPI_Begin(_spi, ss_pin);
   d9632:	7820      	ldrb	r0, [r4, #0]
   d9634:	4629      	mov	r1, r5
   d9636:	f7fe fcd3 	bl	d7fe0 <HAL_SPI_Begin>
        unlock();
   d963a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d963c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::begin(uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
        unlock();
   d9640:	f7ff bfe3 	b.w	d960a <_ZN8SPIClass6unlockEv.isra.1>
   d9644:	bd38      	pop	{r3, r4, r5, pc}

000d9646 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9646:	7800      	ldrb	r0, [r0, #0]
   d9648:	f7ff bfdf 	b.w	d960a <_ZN8SPIClass6unlockEv.isra.1>

000d964c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d964c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d964e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9650:	6018      	str	r0, [r3, #0]
   d9652:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9654:	6818      	ldr	r0, [r3, #0]
   d9656:	4288      	cmp	r0, r1
   d9658:	b2e5      	uxtb	r5, r4
   d965a:	d906      	bls.n	d966a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d965c:	3401      	adds	r4, #1
   d965e:	2c08      	cmp	r4, #8
   d9660:	d002      	beq.n	d9668 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9662:	0840      	lsrs	r0, r0, #1
   d9664:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d9666:	e7f5      	b.n	d9654 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9668:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d966a:	4b02      	ldr	r3, [pc, #8]	; (d9674 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d966c:	5d5b      	ldrb	r3, [r3, r5]
   d966e:	7013      	strb	r3, [r2, #0]
   d9670:	bd30      	pop	{r4, r5, pc}
   d9672:	bf00      	nop
   d9674:	000dd95e 	.word	0x000dd95e

000d9678 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d967c:	4607      	mov	r7, r0
   d967e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d9680:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d9682:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d9684:	f7ff ffbe 	bl	d9604 <_ZN8SPIClass4lockEv.isra.0>
   d9688:	2800      	cmp	r0, #0
   d968a:	db62      	blt.n	d9752 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d968c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d968e:	2214      	movs	r2, #20
   d9690:	2100      	movs	r1, #0
   d9692:	a809      	add	r0, sp, #36	; 0x24
   d9694:	f001 fe42 	bl	db31c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9698:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d969a:	4620      	mov	r0, r4
   d969c:	2200      	movs	r2, #0
   d969e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d96a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d96a4:	f7fe fcbc 	bl	d8020 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d96a8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d96ac:	b154      	cbz	r4, d96c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d96ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d96b2:	b935      	cbnz	r5, d96c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d96b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d96b8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d96bc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d96c0:	e003      	b.n	d96ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d96c2:	2400      	movs	r4, #0
   d96c4:	46a1      	mov	r9, r4
   d96c6:	46a0      	mov	r8, r4
   d96c8:	2501      	movs	r5, #1
   d96ca:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d96cc:	b105      	cbz	r5, d96d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d96ce:	b9bb      	cbnz	r3, d9700 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d96d0:	429d      	cmp	r5, r3
   d96d2:	d10b      	bne.n	d96ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d96d4:	68b2      	ldr	r2, [r6, #8]
   d96d6:	4542      	cmp	r2, r8
   d96d8:	d108      	bne.n	d96ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d96da:	f88d 9020 	strb.w	r9, [sp, #32]
   d96de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d96e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d96e6:	89b2      	ldrh	r2, [r6, #12]
   d96e8:	4291      	cmp	r1, r2
   d96ea:	d009      	beq.n	d9700 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d96ec:	b153      	cbz	r3, d9704 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d96ee:	2400      	movs	r4, #0
   d96f0:	7838      	ldrb	r0, [r7, #0]
   d96f2:	9401      	str	r4, [sp, #4]
   d96f4:	9400      	str	r4, [sp, #0]
   d96f6:	4623      	mov	r3, r4
   d96f8:	4622      	mov	r2, r4
   d96fa:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d96fc:	f7fe fc98 	bl	d8030 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d9700:	2000      	movs	r0, #0
   d9702:	e026      	b.n	d9752 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d9704:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9708:	68b1      	ldr	r1, [r6, #8]
   d970a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d970c:	ab04      	add	r3, sp, #16
   d970e:	f10d 020f 	add.w	r2, sp, #15
   d9712:	f7ff ff9b 	bl	d964c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d9716:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9718:	b105      	cbz	r5, d971c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d971a:	b9b1      	cbnz	r1, d974a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d971c:	42a9      	cmp	r1, r5
   d971e:	d008      	beq.n	d9732 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9720:	2400      	movs	r4, #0
   d9722:	7838      	ldrb	r0, [r7, #0]
   d9724:	9401      	str	r4, [sp, #4]
   d9726:	7b74      	ldrb	r4, [r6, #13]
   d9728:	7b33      	ldrb	r3, [r6, #12]
   d972a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d972e:	9400      	str	r4, [sp, #0]
   d9730:	e7e4      	b.n	d96fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d9732:	68b3      	ldr	r3, [r6, #8]
   d9734:	4543      	cmp	r3, r8
   d9736:	d3f3      	bcc.n	d9720 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9738:	f88d 9020 	strb.w	r9, [sp, #32]
   d973c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9740:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9744:	89b3      	ldrh	r3, [r6, #12]
   d9746:	429a      	cmp	r2, r3
   d9748:	d1ea      	bne.n	d9720 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d974a:	9b04      	ldr	r3, [sp, #16]
   d974c:	4543      	cmp	r3, r8
   d974e:	d1e7      	bne.n	d9720 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9750:	e7d6      	b.n	d9700 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d9752:	b00f      	add	sp, #60	; 0x3c
   d9754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9758 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9758:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d975a:	7800      	ldrb	r0, [r0, #0]
   d975c:	f7fe fc48 	bl	d7ff0 <HAL_SPI_Send_Receive_Data>
}
   d9760:	b2c0      	uxtb	r0, r0
   d9762:	bd08      	pop	{r3, pc}

000d9764 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d9764:	7800      	ldrb	r0, [r0, #0]
   d9766:	f7fe bc53 	b.w	d8010 <HAL_SPI_Is_Enabled>

000d976a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d976a:	b510      	push	{r4, lr}
   d976c:	4604      	mov	r4, r0
{
	free(buffer);
   d976e:	6800      	ldr	r0, [r0, #0]
   d9770:	f7fe fe2e 	bl	d83d0 <free>
}
   d9774:	4620      	mov	r0, r4
   d9776:	bd10      	pop	{r4, pc}

000d9778 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9778:	b510      	push	{r4, lr}
   d977a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d977c:	6800      	ldr	r0, [r0, #0]
   d977e:	b108      	cbz	r0, d9784 <_ZN6String10invalidateEv+0xc>
   d9780:	f7fe fe26 	bl	d83d0 <free>
	buffer = NULL;
   d9784:	2300      	movs	r3, #0
   d9786:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d9788:	60a3      	str	r3, [r4, #8]
   d978a:	6063      	str	r3, [r4, #4]
   d978c:	bd10      	pop	{r4, pc}

000d978e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d978e:	b538      	push	{r3, r4, r5, lr}
   d9790:	4604      	mov	r4, r0
   d9792:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9794:	6800      	ldr	r0, [r0, #0]
   d9796:	3101      	adds	r1, #1
   d9798:	f7fe fe22 	bl	d83e0 <realloc>
	if (newbuffer) {
   d979c:	b110      	cbz	r0, d97a4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d979e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d97a2:	2001      	movs	r0, #1
	}
	return 0;
}
   d97a4:	bd38      	pop	{r3, r4, r5, pc}

000d97a6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d97a6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d97a8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d97aa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d97ac:	b113      	cbz	r3, d97b4 <_ZN6String7reserveEj+0xe>
   d97ae:	6843      	ldr	r3, [r0, #4]
   d97b0:	428b      	cmp	r3, r1
   d97b2:	d207      	bcs.n	d97c4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d97b4:	4620      	mov	r0, r4
   d97b6:	f7ff ffea 	bl	d978e <_ZN6String12changeBufferEj>
   d97ba:	b120      	cbz	r0, d97c6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d97bc:	68a3      	ldr	r3, [r4, #8]
   d97be:	b90b      	cbnz	r3, d97c4 <_ZN6String7reserveEj+0x1e>
   d97c0:	6822      	ldr	r2, [r4, #0]
   d97c2:	7013      	strb	r3, [r2, #0]
   d97c4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d97c6:	bd10      	pop	{r4, pc}

000d97c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d97c8:	b570      	push	{r4, r5, r6, lr}
   d97ca:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d97cc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d97ce:	4604      	mov	r4, r0
   d97d0:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d97d2:	f7ff ffe8 	bl	d97a6 <_ZN6String7reserveEj>
   d97d6:	b918      	cbnz	r0, d97e0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d97d8:	4620      	mov	r0, r4
   d97da:	f7ff ffcd 	bl	d9778 <_ZN6String10invalidateEv>
		return *this;
   d97de:	e009      	b.n	d97f4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d97e0:	462a      	mov	r2, r5
   d97e2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d97e4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d97e6:	6820      	ldr	r0, [r4, #0]
   d97e8:	f001 fd72 	bl	db2d0 <memcpy>
	buffer[len] = 0;
   d97ec:	6822      	ldr	r2, [r4, #0]
   d97ee:	68a3      	ldr	r3, [r4, #8]
   d97f0:	2100      	movs	r1, #0
   d97f2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d97f4:	4620      	mov	r0, r4
   d97f6:	bd70      	pop	{r4, r5, r6, pc}

000d97f8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d97f8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d97fa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d97fc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d97fe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9800:	6043      	str	r3, [r0, #4]
	len = 0;
   d9802:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9804:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d9806:	460d      	mov	r5, r1
   d9808:	b139      	cbz	r1, d981a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d980a:	4608      	mov	r0, r1
   d980c:	f002 fd46 	bl	dc29c <strlen>
   d9810:	4629      	mov	r1, r5
   d9812:	4602      	mov	r2, r0
   d9814:	4620      	mov	r0, r4
   d9816:	f7ff ffd7 	bl	d97c8 <_ZN6String4copyEPKcj>
}
   d981a:	4620      	mov	r0, r4
   d981c:	bd38      	pop	{r3, r4, r5, pc}

000d981e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d981e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9820:	b510      	push	{r4, lr}
   d9822:	460b      	mov	r3, r1
   d9824:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9826:	d007      	beq.n	d9838 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9828:	6809      	ldr	r1, [r1, #0]
   d982a:	b119      	cbz	r1, d9834 <_ZN6StringaSERKS_+0x16>
   d982c:	689a      	ldr	r2, [r3, #8]
   d982e:	f7ff ffcb 	bl	d97c8 <_ZN6String4copyEPKcj>
   d9832:	e001      	b.n	d9838 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d9834:	f7ff ffa0 	bl	d9778 <_ZN6String10invalidateEv>

	return *this;
}
   d9838:	4620      	mov	r0, r4
   d983a:	bd10      	pop	{r4, pc}

000d983c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d983c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d983e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9840:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9842:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9844:	6043      	str	r3, [r0, #4]
	len = 0;
   d9846:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9848:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d984a:	f7ff ffe8 	bl	d981e <_ZN6StringaSERKS_>
}
   d984e:	4620      	mov	r0, r4
   d9850:	bd10      	pop	{r4, pc}

000d9852 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9852:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9854:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9856:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9858:	b912      	cbnz	r2, d9860 <_ZNK6String6equalsEPKc+0xe>
   d985a:	b919      	cbnz	r1, d9864 <_ZNK6String6equalsEPKc+0x12>
   d985c:	2001      	movs	r0, #1
   d985e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9860:	b911      	cbnz	r1, d9868 <_ZNK6String6equalsEPKc+0x16>
   d9862:	6803      	ldr	r3, [r0, #0]
   d9864:	7818      	ldrb	r0, [r3, #0]
   d9866:	e002      	b.n	d986e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d9868:	6800      	ldr	r0, [r0, #0]
   d986a:	f001 ffd5 	bl	db818 <strcmp>
   d986e:	fab0 f080 	clz	r0, r0
   d9872:	0940      	lsrs	r0, r0, #5
}
   d9874:	bd08      	pop	{r3, pc}

000d9876 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d9876:	b570      	push	{r4, r5, r6, lr}
   d9878:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d987a:	b19a      	cbz	r2, d98a4 <_ZNK6String8getBytesEPhjj+0x2e>
   d987c:	b191      	cbz	r1, d98a4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d987e:	6885      	ldr	r5, [r0, #8]
   d9880:	429d      	cmp	r5, r3
   d9882:	d802      	bhi.n	d988a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d9884:	2300      	movs	r3, #0
   d9886:	700b      	strb	r3, [r1, #0]
		return;
   d9888:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d988a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d988c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d988e:	6801      	ldr	r1, [r0, #0]
   d9890:	42ac      	cmp	r4, r5
   d9892:	bf28      	it	cs
   d9894:	462c      	movcs	r4, r5
   d9896:	4419      	add	r1, r3
   d9898:	4622      	mov	r2, r4
   d989a:	4630      	mov	r0, r6
   d989c:	f002 fd1b 	bl	dc2d6 <strncpy>
	buf[n] = 0;
   d98a0:	2300      	movs	r3, #0
   d98a2:	5533      	strb	r3, [r6, r4]
   d98a4:	bd70      	pop	{r4, r5, r6, pc}

000d98a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d98a6:	b510      	push	{r4, lr}
   d98a8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d98aa:	6800      	ldr	r0, [r0, #0]
   d98ac:	b118      	cbz	r0, d98b6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d98ae:	f7fe fd8f 	bl	d83d0 <free>
            wakeupSource_ = nullptr;
   d98b2:	2300      	movs	r3, #0
   d98b4:	6023      	str	r3, [r4, #0]
   d98b6:	bd10      	pop	{r4, pc}

000d98b8 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d98b8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d98ba:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d98be:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d98c0:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d98c2:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d98c4:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d98c8:	f8c0 2006 	str.w	r2, [r0, #6]
   d98cc:	889b      	ldrh	r3, [r3, #4]
   d98ce:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d98d0:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d98d2:	f7ff ffe8 	bl	d98a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d98d6:	682b      	ldr	r3, [r5, #0]
   d98d8:	b113      	cbz	r3, d98e0 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d98da:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d98dc:	2300      	movs	r3, #0
   d98de:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d98e0:	4620      	mov	r0, r4
   d98e2:	bd38      	pop	{r3, r4, r5, pc}

000d98e4 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d98e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d98e8:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d98ea:	b90b      	cbnz	r3, d98f0 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d98ec:	680a      	ldr	r2, [r1, #0]
   d98ee:	b19a      	cbz	r2, d9918 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d98f0:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d98f2:	b15c      	cbz	r4, d990c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d98f4:	88a2      	ldrh	r2, [r4, #4]
   d98f6:	2a01      	cmp	r2, #1
   d98f8:	d003      	beq.n	d9902 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d98fa:	2a04      	cmp	r2, #4
   d98fc:	d106      	bne.n	d990c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d98fe:	2202      	movs	r2, #2
   d9900:	e005      	b.n	d990e <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d9902:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d9904:	814c      	strh	r4, [r1, #10]
   d9906:	718a      	strb	r2, [r1, #6]
   d9908:	810b      	strh	r3, [r1, #8]
                    break;
   d990a:	e005      	b.n	d9918 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d990c:	2204      	movs	r2, #4
   d990e:	810b      	strh	r3, [r1, #8]
   d9910:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9914:	718a      	strb	r2, [r1, #6]
   d9916:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d9918:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d991c:	6003      	str	r3, [r0, #0]
   d991e:	888b      	ldrh	r3, [r1, #4]
   d9920:	8083      	strh	r3, [r0, #4]
    }
   d9922:	bd10      	pop	{r4, pc}

000d9924 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d9924:	4601      	mov	r1, r0
   d9926:	2200      	movs	r2, #0
   d9928:	208c      	movs	r0, #140	; 0x8c
   d992a:	f7fe ba31 	b.w	d7d90 <HAL_Core_System_Reset_Ex>

000d992e <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d992e:	2000      	movs	r0, #0
   d9930:	f7ff bff8 	b.w	d9924 <_ZN11SystemClass5resetEm>

000d9934 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9934:	b530      	push	{r4, r5, lr}
   d9936:	4604      	mov	r4, r0
   d9938:	b085      	sub	sp, #20
   d993a:	4608      	mov	r0, r1
   d993c:	4611      	mov	r1, r2
   d993e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9940:	2300      	movs	r3, #0
   d9942:	f7fe fc37 	bl	d81b4 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d9946:	4d0d      	ldr	r5, [pc, #52]	; (d997c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d9948:	f8ad 000c 	strh.w	r0, [sp, #12]
   d994c:	2300      	movs	r3, #0
   d994e:	a901      	add	r1, sp, #4
   d9950:	9301      	str	r3, [sp, #4]
   d9952:	f8ad 3008 	strh.w	r3, [sp, #8]
   d9956:	f88d 300a 	strb.w	r3, [sp, #10]
   d995a:	4628      	mov	r0, r5
   d995c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9960:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9964:	f7ff ffa8 	bl	d98b8 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9968:	a801      	add	r0, sp, #4
   d996a:	f7ff ff9c 	bl	d98a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d996e:	4620      	mov	r0, r4
   d9970:	4629      	mov	r1, r5
   d9972:	f7ff ffb7 	bl	d98e4 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d9976:	4620      	mov	r0, r4
   d9978:	b005      	add	sp, #20
   d997a:	bd30      	pop	{r4, r5, pc}
   d997c:	2003e488 	.word	0x2003e488

000d9980 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9980:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9982:	4c09      	ldr	r4, [pc, #36]	; (d99a8 <_GLOBAL__sub_I_System+0x28>)
   d9984:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d9986:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d998a:	6020      	str	r0, [r4, #0]
   d998c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d998e:	71a0      	strb	r0, [r4, #6]
   d9990:	8120      	strh	r0, [r4, #8]
   d9992:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9994:	f7fe fbfe 	bl	d8194 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d9998:	4620      	mov	r0, r4
   d999a:	4a04      	ldr	r2, [pc, #16]	; (d99ac <_GLOBAL__sub_I_System+0x2c>)
   d999c:	4904      	ldr	r1, [pc, #16]	; (d99b0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d999e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d99a2:	f000 bc35 	b.w	da210 <__aeabi_atexit>
   d99a6:	bf00      	nop
   d99a8:	2003e488 	.word	0x2003e488
   d99ac:	2003dea8 	.word	0x2003dea8
   d99b0:	000d41a9 	.word	0x000d41a9

000d99b4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d99b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d99b6:	4b14      	ldr	r3, [pc, #80]	; (d9a08 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d99b8:	4f14      	ldr	r7, [pc, #80]	; (d9a0c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d99ba:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d99bc:	4b14      	ldr	r3, [pc, #80]	; (d9a10 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d99be:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d99c0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d99c2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d99c4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d99c6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d99c8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d99ca:	d01b      	beq.n	d9a04 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d99cc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d99ce:	ad01      	add	r5, sp, #4
   d99d0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d99d4:	f001 fb84 	bl	db0e0 <localtime>
	calendar_time->tm_year += 1900;
   d99d8:	6943      	ldr	r3, [r0, #20]
   d99da:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d99de:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d99e0:	4604      	mov	r4, r0
   d99e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d99e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d99e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d99e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d99ea:	f8d4 e000 	ldr.w	lr, [r4]
   d99ee:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d99f2:	ad01      	add	r5, sp, #4
   d99f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d99f6:	4c07      	ldr	r4, [pc, #28]	; (d9a14 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d99f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d99fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d99fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d99fe:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9a00:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9a04:	b00b      	add	sp, #44	; 0x2c
   d9a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9a08:	2003e4c4 	.word	0x2003e4c4
   d9a0c:	2003e4c0 	.word	0x2003e4c0
   d9a10:	2003e4bc 	.word	0x2003e4bc
   d9a14:	2003e494 	.word	0x2003e494

000d9a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d9a18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9a1a:	2000      	movs	r0, #0
   d9a1c:	f7fe fc68 	bl	d82f0 <spark_sync_time_pending>
   d9a20:	b128      	cbz	r0, d9a2e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9a22:	f7fe fc3d 	bl	d82a0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9a26:	f080 0001 	eor.w	r0, r0, #1
   d9a2a:	b2c0      	uxtb	r0, r0
   d9a2c:	bd08      	pop	{r3, pc}
   d9a2e:	2001      	movs	r0, #1
    }
   d9a30:	bd08      	pop	{r3, pc}
	...

000d9a34 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d9a34:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9a36:	f7ff ffbd 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9a3a:	4b02      	ldr	r3, [pc, #8]	; (d9a44 <_ZN9TimeClass7weekdayEl+0x10>)
   d9a3c:	6998      	ldr	r0, [r3, #24]
}
   d9a3e:	3001      	adds	r0, #1
   d9a40:	bd08      	pop	{r3, pc}
   d9a42:	bf00      	nop
   d9a44:	2003e494 	.word	0x2003e494

000d9a48 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9a48:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9a4a:	f7ff ffb3 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9a4e:	4b02      	ldr	r3, [pc, #8]	; (d9a58 <_ZN9TimeClass5monthEl+0x10>)
   d9a50:	6918      	ldr	r0, [r3, #16]
}
   d9a52:	3001      	adds	r0, #1
   d9a54:	bd08      	pop	{r3, pc}
   d9a56:	bf00      	nop
   d9a58:	2003e494 	.word	0x2003e494

000d9a5c <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d9a5c:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d9a5e:	f7fe f9c7 	bl	d7df0 <HAL_RTC_Get_UnixTime>
   d9a62:	4b03      	ldr	r3, [pc, #12]	; (d9a70 <_ZN9TimeClass5localEv+0x14>)
   d9a64:	681b      	ldr	r3, [r3, #0]
   d9a66:	4418      	add	r0, r3
   d9a68:	4b02      	ldr	r3, [pc, #8]	; (d9a74 <_ZN9TimeClass5localEv+0x18>)
   d9a6a:	681b      	ldr	r3, [r3, #0]
}
   d9a6c:	4418      	add	r0, r3
   d9a6e:	bd08      	pop	{r3, pc}
   d9a70:	2003e4c4 	.word	0x2003e4c4
   d9a74:	2003e4bc 	.word	0x2003e4bc

000d9a78 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9a78:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9a7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a84:	d40f      	bmi.n	d9aa6 <_ZN9TimeClass4zoneEf+0x2e>
   d9a86:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9a8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9a92:	dc08      	bgt.n	d9aa6 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9a94:	eddf 7a04 	vldr	s15, [pc, #16]	; d9aa8 <_ZN9TimeClass4zoneEf+0x30>
   d9a98:	4b04      	ldr	r3, [pc, #16]	; (d9aac <_ZN9TimeClass4zoneEf+0x34>)
   d9a9a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9a9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9aa2:	ed83 0a00 	vstr	s0, [r3]
   d9aa6:	4770      	bx	lr
   d9aa8:	45610000 	.word	0x45610000
   d9aac:	2003e4c4 	.word	0x2003e4c4

000d9ab0 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9ab0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9ab8:	d40f      	bmi.n	d9ada <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d9aba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9abe:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9ac6:	dc08      	bgt.n	d9ada <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9ac8:	eddf 7a04 	vldr	s15, [pc, #16]	; d9adc <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d9acc:	4b04      	ldr	r3, [pc, #16]	; (d9ae0 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d9ace:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9ad2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d9ad6:	ed83 0a00 	vstr	s0, [r3]
   d9ada:	4770      	bx	lr
   d9adc:	45610000 	.word	0x45610000
   d9ae0:	2003dde8 	.word	0x2003dde8

000d9ae4 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9ae4:	4b02      	ldr	r3, [pc, #8]	; (d9af0 <_ZN9TimeClass8beginDSTEv+0xc>)
   d9ae6:	681a      	ldr	r2, [r3, #0]
   d9ae8:	4b02      	ldr	r3, [pc, #8]	; (d9af4 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9aea:	601a      	str	r2, [r3, #0]
   d9aec:	4770      	bx	lr
   d9aee:	bf00      	nop
   d9af0:	2003dde8 	.word	0x2003dde8
   d9af4:	2003e4bc 	.word	0x2003e4bc

000d9af8 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9af8:	4b01      	ldr	r3, [pc, #4]	; (d9b00 <_ZN9TimeClass6endDSTEv+0x8>)
   d9afa:	2200      	movs	r2, #0
   d9afc:	601a      	str	r2, [r3, #0]
   d9afe:	4770      	bx	lr
   d9b00:	2003e4bc 	.word	0x2003e4bc

000d9b04 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9b04:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d9b06:	f7fe f97b 	bl	d7e00 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9b0a:	2200      	movs	r2, #0
   d9b0c:	4611      	mov	r1, r2
   d9b0e:	4610      	mov	r0, r2
}
   d9b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9b14:	f7fe bb76 	b.w	d8204 <system_notify_time_changed>

000d9b18 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d9b1a:	4b0e      	ldr	r3, [pc, #56]	; (d9b54 <_ZN9TimeClass7timeStrEl+0x3c>)
   d9b1c:	681b      	ldr	r3, [r3, #0]
   d9b1e:	4419      	add	r1, r3
   d9b20:	4b0d      	ldr	r3, [pc, #52]	; (d9b58 <_ZN9TimeClass7timeStrEl+0x40>)
   d9b22:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9b24:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d9b26:	a802      	add	r0, sp, #8
   d9b28:	4419      	add	r1, r3
   d9b2a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9b2e:	f001 fad7 	bl	db0e0 <localtime>
        char* ascstr = asctime(calendar_time);
   d9b32:	f001 f9d9 	bl	daee8 <asctime>
   d9b36:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9b38:	f002 fbb0 	bl	dc29c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9b3c:	4428      	add	r0, r5
   d9b3e:	2300      	movs	r3, #0
   d9b40:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d9b44:	4629      	mov	r1, r5
   d9b46:	4620      	mov	r0, r4
   d9b48:	f7ff fe56 	bl	d97f8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9b4c:	4620      	mov	r0, r4
   d9b4e:	b003      	add	sp, #12
   d9b50:	bd30      	pop	{r4, r5, pc}
   d9b52:	bf00      	nop
   d9b54:	2003e4c4 	.word	0x2003e4c4
   d9b58:	2003e4bc 	.word	0x2003e4bc

000d9b5c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9b60:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9b62:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9b64:	4607      	mov	r7, r0
   d9b66:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9b68:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9b6a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9b6c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9b6e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9b70:	f002 fbb1 	bl	dc2d6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9b74:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9b76:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9b78:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9b7c:	f002 fb8e 	bl	dc29c <strlen>
   d9b80:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9b82:	b925      	cbnz	r5, d9b8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d9b84:	4924      	ldr	r1, [pc, #144]	; (d9c18 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d9b86:	a803      	add	r0, sp, #12
   d9b88:	f001 fe50 	bl	db82c <strcpy>
   d9b8c:	e013      	b.n	d9bb6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9b8e:	213c      	movs	r1, #60	; 0x3c
   d9b90:	fb95 f2f1 	sdiv	r2, r5, r1
   d9b94:	2a00      	cmp	r2, #0
   d9b96:	bfb8      	it	lt
   d9b98:	4252      	neglt	r2, r2
   d9b9a:	fb92 f3f1 	sdiv	r3, r2, r1
   d9b9e:	fb01 2213 	mls	r2, r1, r3, r2
   d9ba2:	9200      	str	r2, [sp, #0]
   d9ba4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9ba8:	4a1c      	ldr	r2, [pc, #112]	; (d9c1c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d9baa:	fb95 f3f3 	sdiv	r3, r5, r3
   d9bae:	2110      	movs	r1, #16
   d9bb0:	a803      	add	r0, sp, #12
   d9bb2:	f7fe fc2d 	bl	d8410 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9bb6:	4625      	mov	r5, r4
   d9bb8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9bba:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d9bbe:	45b2      	cmp	sl, r6
   d9bc0:	d91b      	bls.n	d9bfa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9bc2:	782b      	ldrb	r3, [r5, #0]
   d9bc4:	2b25      	cmp	r3, #37	; 0x25
   d9bc6:	d116      	bne.n	d9bf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9bc8:	786b      	ldrb	r3, [r5, #1]
   d9bca:	2b7a      	cmp	r3, #122	; 0x7a
   d9bcc:	d113      	bne.n	d9bf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d9bce:	a803      	add	r0, sp, #12
   d9bd0:	f002 fb64 	bl	dc29c <strlen>
   d9bd4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9bd6:	4430      	add	r0, r6
   d9bd8:	ebc6 020a 	rsb	r2, r6, sl
   d9bdc:	1ca9      	adds	r1, r5, #2
   d9bde:	4420      	add	r0, r4
   d9be0:	f001 fb76 	bl	db2d0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9be4:	4642      	mov	r2, r8
   d9be6:	a903      	add	r1, sp, #12
   d9be8:	4628      	mov	r0, r5
   d9bea:	f001 fb71 	bl	db2d0 <memcpy>
            len = strlen(format_str);
   d9bee:	4620      	mov	r0, r4
   d9bf0:	f002 fb54 	bl	dc29c <strlen>
   d9bf4:	4680      	mov	r8, r0
   d9bf6:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9bf8:	e7de      	b.n	d9bb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d9bfa:	464b      	mov	r3, r9
   d9bfc:	4622      	mov	r2, r4
   d9bfe:	2132      	movs	r1, #50	; 0x32
   d9c00:	a807      	add	r0, sp, #28
   d9c02:	f001 fe97 	bl	db934 <strftime>
    return String(buf);
   d9c06:	a907      	add	r1, sp, #28
   d9c08:	4638      	mov	r0, r7
   d9c0a:	f7ff fdf5 	bl	d97f8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9c0e:	4638      	mov	r0, r7
   d9c10:	b024      	add	sp, #144	; 0x90
   d9c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9c16:	bf00      	nop
   d9c18:	000ddef1 	.word	0x000ddef1
   d9c1c:	000dd966 	.word	0x000dd966

000d9c20 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9c22:	4605      	mov	r5, r0
   d9c24:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9c26:	461c      	mov	r4, r3
   d9c28:	b913      	cbnz	r3, d9c30 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d9c2a:	4b12      	ldr	r3, [pc, #72]	; (d9c74 <_ZN9TimeClass6formatElPKc+0x54>)
   d9c2c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d9c2e:	b12c      	cbz	r4, d9c3c <_ZN9TimeClass6formatElPKc+0x1c>
   d9c30:	4b11      	ldr	r3, [pc, #68]	; (d9c78 <_ZN9TimeClass6formatElPKc+0x58>)
   d9c32:	4620      	mov	r0, r4
   d9c34:	6819      	ldr	r1, [r3, #0]
   d9c36:	f001 fdef 	bl	db818 <strcmp>
   d9c3a:	b920      	cbnz	r0, d9c46 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d9c3c:	9901      	ldr	r1, [sp, #4]
   d9c3e:	4628      	mov	r0, r5
   d9c40:	f7ff ff6a 	bl	d9b18 <_ZN9TimeClass7timeStrEl>
   d9c44:	e013      	b.n	d9c6e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9c46:	4f0d      	ldr	r7, [pc, #52]	; (d9c7c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9c48:	9a01      	ldr	r2, [sp, #4]
   d9c4a:	683b      	ldr	r3, [r7, #0]
   d9c4c:	4e0c      	ldr	r6, [pc, #48]	; (d9c80 <_ZN9TimeClass6formatElPKc+0x60>)
   d9c4e:	441a      	add	r2, r3
   d9c50:	6833      	ldr	r3, [r6, #0]
   d9c52:	a802      	add	r0, sp, #8
   d9c54:	4413      	add	r3, r2
   d9c56:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d9c5a:	f001 fa41 	bl	db0e0 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9c5e:	683a      	ldr	r2, [r7, #0]
   d9c60:	6833      	ldr	r3, [r6, #0]
   d9c62:	4601      	mov	r1, r0
   d9c64:	4413      	add	r3, r2
   d9c66:	4628      	mov	r0, r5
   d9c68:	4622      	mov	r2, r4
   d9c6a:	f7ff ff77 	bl	d9b5c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d9c6e:	4628      	mov	r0, r5
   d9c70:	b003      	add	sp, #12
   d9c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c74:	2003e4b8 	.word	0x2003e4b8
   d9c78:	2003ddec 	.word	0x2003ddec
   d9c7c:	2003e4c4 	.word	0x2003e4c4
   d9c80:	2003e4bc 	.word	0x2003e4bc

000d9c84 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9c84:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9c86:	2000      	movs	r0, #0
   d9c88:	f7fe f8d2 	bl	d7e30 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9c8c:	4604      	mov	r4, r0
   d9c8e:	b968      	cbnz	r0, d9cac <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9c90:	f7fe fa78 	bl	d8184 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9c94:	2801      	cmp	r0, #1
   d9c96:	d10b      	bne.n	d9cb0 <_ZN9TimeClass7isValidEv+0x2c>
   d9c98:	4620      	mov	r0, r4
   d9c9a:	f7fe faab 	bl	d81f4 <system_thread_get_state>
   d9c9e:	b938      	cbnz	r0, d9cb0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9ca0:	f7ff feba 	bl	d9a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9ca4:	b930      	cbnz	r0, d9cb4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9ca6:	f7fe fae3 	bl	d8270 <spark_process>
   d9caa:	e7f9      	b.n	d9ca0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9cac:	2001      	movs	r0, #1
   d9cae:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9cb0:	2000      	movs	r0, #0
   d9cb2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9cb4:	f7ff feb0 	bl	d9a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9cb8:	2000      	movs	r0, #0
   d9cba:	f7fe f8b9 	bl	d7e30 <HAL_RTC_Time_Is_Valid>
   d9cbe:	3000      	adds	r0, #0
   d9cc0:	bf18      	it	ne
   d9cc2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9cc4:	bd10      	pop	{r4, pc}

000d9cc6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9cc6:	b508      	push	{r3, lr}
    (void)isValid();
   d9cc8:	f7ff ffdc 	bl	d9c84 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9cd0:	f7fe b88e 	b.w	d7df0 <HAL_RTC_Get_UnixTime>

000d9cd4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9cd4:	b508      	push	{r3, lr}
	return hour(now());
   d9cd6:	f7ff fff6 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9cda:	f7ff fe6b 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9cde:	4b01      	ldr	r3, [pc, #4]	; (d9ce4 <_ZN9TimeClass4hourEv+0x10>)
   d9ce0:	6898      	ldr	r0, [r3, #8]
   d9ce2:	bd08      	pop	{r3, pc}
   d9ce4:	2003e494 	.word	0x2003e494

000d9ce8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9ce8:	b508      	push	{r3, lr}
	return minute(now());
   d9cea:	f7ff ffec 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9cee:	f7ff fe61 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9cf2:	4b01      	ldr	r3, [pc, #4]	; (d9cf8 <_ZN9TimeClass6minuteEv+0x10>)
   d9cf4:	6858      	ldr	r0, [r3, #4]
   d9cf6:	bd08      	pop	{r3, pc}
   d9cf8:	2003e494 	.word	0x2003e494

000d9cfc <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9cfc:	b508      	push	{r3, lr}
	return day(now());
   d9cfe:	f7ff ffe2 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9d02:	f7ff fe57 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9d06:	4b01      	ldr	r3, [pc, #4]	; (d9d0c <_ZN9TimeClass3dayEv+0x10>)
   d9d08:	68d8      	ldr	r0, [r3, #12]
   d9d0a:	bd08      	pop	{r3, pc}
   d9d0c:	2003e494 	.word	0x2003e494

000d9d10 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d9d10:	b508      	push	{r3, lr}
	return weekday(now());
   d9d12:	f7ff ffd8 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}
   d9d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d9d1a:	f7ff be8b 	b.w	d9a34 <_ZN9TimeClass7weekdayEl>

000d9d1e <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9d1e:	b508      	push	{r3, lr}
	return month(now());
   d9d20:	f7ff ffd1 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}
   d9d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9d28:	f7ff be8e 	b.w	d9a48 <_ZN9TimeClass5monthEl>

000d9d2c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9d2c:	b508      	push	{r3, lr}
	return year(now());
   d9d2e:	f7ff ffca 	bl	d9cc6 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9d32:	f7ff fe3f 	bl	d99b4 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9d36:	4b01      	ldr	r3, [pc, #4]	; (d9d3c <_ZN9TimeClass4yearEv+0x10>)
   d9d38:	6958      	ldr	r0, [r3, #20]
   d9d3a:	bd08      	pop	{r3, pc}
   d9d3c:	2003e494 	.word	0x2003e494

000d9d40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9d40:	4b02      	ldr	r3, [pc, #8]	; (d9d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9d42:	681a      	ldr	r2, [r3, #0]
   d9d44:	4b02      	ldr	r3, [pc, #8]	; (d9d50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9d46:	601a      	str	r2, [r3, #0]
   d9d48:	4770      	bx	lr
   d9d4a:	bf00      	nop
   d9d4c:	2003ddec 	.word	0x2003ddec
   d9d50:	2003e4b8 	.word	0x2003e4b8

000d9d54 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9d54:	4770      	bx	lr

000d9d56 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9d56:	7441      	strb	r1, [r0, #17]
   d9d58:	4770      	bx	lr

000d9d5a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9d5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9d5c:	7c00      	ldrb	r0, [r0, #16]
   d9d5e:	f7fe f9b7 	bl	d80d0 <HAL_USART_Available_Data_For_Write>
}
   d9d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d66:	bd08      	pop	{r3, pc}

000d9d68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9d68:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9d6a:	7c00      	ldrb	r0, [r0, #16]
   d9d6c:	f7fe f988 	bl	d8080 <HAL_USART_Available_Data>
}
   d9d70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d74:	bd08      	pop	{r3, pc}

000d9d76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9d76:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9d78:	7c00      	ldrb	r0, [r0, #16]
   d9d7a:	f7fe f991 	bl	d80a0 <HAL_USART_Peek_Data>
}
   d9d7e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d82:	bf28      	it	cs
   d9d84:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9d88:	bd08      	pop	{r3, pc}

000d9d8a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9d8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9d8c:	7c00      	ldrb	r0, [r0, #16]
   d9d8e:	f7fe f97f 	bl	d8090 <HAL_USART_Read_Data>
}
   d9d92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d96:	bf28      	it	cs
   d9d98:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9d9c:	bd08      	pop	{r3, pc}

000d9d9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9d9e:	7c00      	ldrb	r0, [r0, #16]
   d9da0:	f7fe b986 	b.w	d80b0 <HAL_USART_Flush_Data>

000d9da4 <_ZN11USARTSerialD0Ev>:
   d9da4:	b510      	push	{r4, lr}
   d9da6:	2114      	movs	r1, #20
   d9da8:	4604      	mov	r4, r0
   d9daa:	f000 fa36 	bl	da21a <_ZdlPvj>
   d9dae:	4620      	mov	r0, r4
   d9db0:	bd10      	pop	{r4, pc}

000d9db2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9db2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9db4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9db6:	4604      	mov	r4, r0
   d9db8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9dba:	b925      	cbnz	r5, d9dc6 <_ZN11USARTSerial5writeEh+0x14>
   d9dbc:	7c00      	ldrb	r0, [r0, #16]
   d9dbe:	f7fe f987 	bl	d80d0 <HAL_USART_Available_Data_For_Write>
   d9dc2:	2800      	cmp	r0, #0
   d9dc4:	dd05      	ble.n	d9dd2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9dc6:	4631      	mov	r1, r6
   d9dc8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9dce:	f7fe b94f 	b.w	d8070 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9dd2:	4628      	mov	r0, r5
   d9dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9dd8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9dd8:	b510      	push	{r4, lr}
   d9dda:	4604      	mov	r4, r0
   d9ddc:	4608      	mov	r0, r1
   d9dde:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9de0:	2200      	movs	r2, #0
   d9de2:	6062      	str	r2, [r4, #4]
   d9de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9de8:	60a2      	str	r2, [r4, #8]
   d9dea:	4a05      	ldr	r2, [pc, #20]	; (d9e00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9dec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9dee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9df0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9df2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9df4:	461a      	mov	r2, r3
   d9df6:	f7fe f933 	bl	d8060 <HAL_USART_Init>
}
   d9dfa:	4620      	mov	r0, r4
   d9dfc:	bd10      	pop	{r4, pc}
   d9dfe:	bf00      	nop
   d9e00:	000dd998 	.word	0x000dd998

000d9e04 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9e04:	7c00      	ldrb	r0, [r0, #16]
   d9e06:	f7fe b95b 	b.w	d80c0 <HAL_USART_Is_Enabled>
	...

000d9e0c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9e0c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9e0e:	4d0c      	ldr	r5, [pc, #48]	; (d9e40 <_Z22__fetch_global_Serial1v+0x34>)
   d9e10:	6829      	ldr	r1, [r5, #0]
   d9e12:	f011 0401 	ands.w	r4, r1, #1
   d9e16:	d111      	bne.n	d9e3c <_Z22__fetch_global_Serial1v+0x30>
   d9e18:	4628      	mov	r0, r5
   d9e1a:	f7fa f94f 	bl	d40bc <__cxa_guard_acquire>
   d9e1e:	b168      	cbz	r0, d9e3c <_Z22__fetch_global_Serial1v+0x30>
   d9e20:	4a08      	ldr	r2, [pc, #32]	; (d9e44 <_Z22__fetch_global_Serial1v+0x38>)
   d9e22:	4b09      	ldr	r3, [pc, #36]	; (d9e48 <_Z22__fetch_global_Serial1v+0x3c>)
   d9e24:	4809      	ldr	r0, [pc, #36]	; (d9e4c <_Z22__fetch_global_Serial1v+0x40>)
   d9e26:	4621      	mov	r1, r4
   d9e28:	f7ff ffd6 	bl	d9dd8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9e2c:	4628      	mov	r0, r5
   d9e2e:	f7fa f94a 	bl	d40c6 <__cxa_guard_release>
   d9e32:	4a07      	ldr	r2, [pc, #28]	; (d9e50 <_Z22__fetch_global_Serial1v+0x44>)
   d9e34:	4907      	ldr	r1, [pc, #28]	; (d9e54 <_Z22__fetch_global_Serial1v+0x48>)
   d9e36:	4805      	ldr	r0, [pc, #20]	; (d9e4c <_Z22__fetch_global_Serial1v+0x40>)
   d9e38:	f000 f9ea 	bl	da210 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9e3c:	4803      	ldr	r0, [pc, #12]	; (d9e4c <_Z22__fetch_global_Serial1v+0x40>)
   d9e3e:	bd38      	pop	{r3, r4, r5, pc}
   d9e40:	2003e564 	.word	0x2003e564
   d9e44:	2003e568 	.word	0x2003e568
   d9e48:	2003e4e0 	.word	0x2003e4e0
   d9e4c:	2003e4cc 	.word	0x2003e4cc
   d9e50:	2003dea8 	.word	0x2003dea8
   d9e54:	000d9d55 	.word	0x000d9d55

000d9e58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9e58:	7441      	strb	r1, [r0, #17]
   d9e5a:	4770      	bx	lr

000d9e5c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9e5c:	4770      	bx	lr

000d9e5e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9e5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9e60:	2100      	movs	r1, #0
   d9e62:	7c00      	ldrb	r0, [r0, #16]
   d9e64:	f7fe f95c 	bl	d8120 <HAL_USB_USART_Receive_Data>
}
   d9e68:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e6c:	bf28      	it	cs
   d9e6e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e72:	bd08      	pop	{r3, pc}

000d9e74 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9e74:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9e76:	2101      	movs	r1, #1
   d9e78:	7c00      	ldrb	r0, [r0, #16]
   d9e7a:	f7fe f951 	bl	d8120 <HAL_USB_USART_Receive_Data>
}
   d9e7e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e82:	bf28      	it	cs
   d9e84:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9e88:	bd08      	pop	{r3, pc}

000d9e8a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9e8a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9e8c:	7c00      	ldrb	r0, [r0, #16]
   d9e8e:	f7fe f93f 	bl	d8110 <HAL_USB_USART_Available_Data_For_Write>
}
   d9e92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e96:	bd08      	pop	{r3, pc}

000d9e98 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9e98:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9e9a:	7c00      	ldrb	r0, [r0, #16]
   d9e9c:	f7fe f930 	bl	d8100 <HAL_USB_USART_Available_Data>
}
   d9ea0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ea4:	bd08      	pop	{r3, pc}

000d9ea6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9ea6:	7c00      	ldrb	r0, [r0, #16]
   d9ea8:	f7fe b94a 	b.w	d8140 <HAL_USB_USART_Flush_Data>

000d9eac <_ZN9USBSerialD0Ev>:
   d9eac:	b510      	push	{r4, lr}
   d9eae:	2114      	movs	r1, #20
   d9eb0:	4604      	mov	r4, r0
   d9eb2:	f000 f9b2 	bl	da21a <_ZdlPvj>
   d9eb6:	4620      	mov	r0, r4
   d9eb8:	bd10      	pop	{r4, pc}

000d9eba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9eba:	b538      	push	{r3, r4, r5, lr}
   d9ebc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9ebe:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9ec0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9ec2:	f7fe f925 	bl	d8110 <HAL_USB_USART_Available_Data_For_Write>
   d9ec6:	2800      	cmp	r0, #0
   d9ec8:	dc01      	bgt.n	d9ece <_ZN9USBSerial5writeEh+0x14>
   d9eca:	7c60      	ldrb	r0, [r4, #17]
   d9ecc:	b128      	cbz	r0, d9eda <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9ece:	4629      	mov	r1, r5
   d9ed0:	7c20      	ldrb	r0, [r4, #16]
   d9ed2:	f7fe f92d 	bl	d8130 <HAL_USB_USART_Send_Data>
   d9ed6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9eda:	bd38      	pop	{r3, r4, r5, pc}

000d9edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9edc:	b510      	push	{r4, lr}
   d9ede:	4604      	mov	r4, r0
   d9ee0:	2300      	movs	r3, #0
   d9ee2:	6063      	str	r3, [r4, #4]
   d9ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9ee8:	60a3      	str	r3, [r4, #8]
   d9eea:	4b05      	ldr	r3, [pc, #20]	; (d9f00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9eec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9eee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9ef0:	4608      	mov	r0, r1
{
  _serial = serial;
   d9ef2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9ef4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9ef6:	4611      	mov	r1, r2
   d9ef8:	f7fe f8f2 	bl	d80e0 <HAL_USB_USART_Init>
}
   d9efc:	4620      	mov	r0, r4
   d9efe:	bd10      	pop	{r4, pc}
   d9f00:	000dd9c8 	.word	0x000dd9c8

000d9f04 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9f04:	2200      	movs	r2, #0
   d9f06:	7c00      	ldrb	r0, [r0, #16]
   d9f08:	f7fe b8f2 	b.w	d80f0 <HAL_USB_USART_Begin>

000d9f0c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9f0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9f0e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9f10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9f12:	2100      	movs	r1, #0
   d9f14:	f001 fa02 	bl	db31c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9f18:	4620      	mov	r0, r4
   d9f1a:	bd10      	pop	{r4, pc}

000d9f1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9f1c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9f1e:	4d0e      	ldr	r5, [pc, #56]	; (d9f58 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9f20:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9f22:	a801      	add	r0, sp, #4
   d9f24:	f7ff fff2 	bl	d9f0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9f28:	6829      	ldr	r1, [r5, #0]
   d9f2a:	f011 0401 	ands.w	r4, r1, #1
   d9f2e:	d110      	bne.n	d9f52 <_Z16_fetch_usbserialv+0x36>
   d9f30:	4628      	mov	r0, r5
   d9f32:	f7fa f8c3 	bl	d40bc <__cxa_guard_acquire>
   d9f36:	b160      	cbz	r0, d9f52 <_Z16_fetch_usbserialv+0x36>
   d9f38:	aa01      	add	r2, sp, #4
   d9f3a:	4621      	mov	r1, r4
   d9f3c:	4807      	ldr	r0, [pc, #28]	; (d9f5c <_Z16_fetch_usbserialv+0x40>)
   d9f3e:	f7ff ffcd 	bl	d9edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9f42:	4628      	mov	r0, r5
   d9f44:	f7fa f8bf 	bl	d40c6 <__cxa_guard_release>
   d9f48:	4a05      	ldr	r2, [pc, #20]	; (d9f60 <_Z16_fetch_usbserialv+0x44>)
   d9f4a:	4906      	ldr	r1, [pc, #24]	; (d9f64 <_Z16_fetch_usbserialv+0x48>)
   d9f4c:	4803      	ldr	r0, [pc, #12]	; (d9f5c <_Z16_fetch_usbserialv+0x40>)
   d9f4e:	f000 f95f 	bl	da210 <__aeabi_atexit>
	return _usbserial;
}
   d9f52:	4802      	ldr	r0, [pc, #8]	; (d9f5c <_Z16_fetch_usbserialv+0x40>)
   d9f54:	b007      	add	sp, #28
   d9f56:	bd30      	pop	{r4, r5, pc}
   d9f58:	2003e5ec 	.word	0x2003e5ec
   d9f5c:	2003e5f0 	.word	0x2003e5f0
   d9f60:	2003dea8 	.word	0x2003dea8
   d9f64:	000d9e5d 	.word	0x000d9e5d

000d9f68 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9f68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9f6a:	4b0c      	ldr	r3, [pc, #48]	; (d9f9c <serialEventRun+0x34>)
   d9f6c:	b133      	cbz	r3, d9f7c <serialEventRun+0x14>
   d9f6e:	f7ff ffd5 	bl	d9f1c <_Z16_fetch_usbserialv>
   d9f72:	6803      	ldr	r3, [r0, #0]
   d9f74:	691b      	ldr	r3, [r3, #16]
   d9f76:	4798      	blx	r3
   d9f78:	2800      	cmp	r0, #0
   d9f7a:	dc09      	bgt.n	d9f90 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9f7c:	4b08      	ldr	r3, [pc, #32]	; (d9fa0 <serialEventRun+0x38>)
   d9f7e:	b163      	cbz	r3, d9f9a <serialEventRun+0x32>
   d9f80:	f7ff ff44 	bl	d9e0c <_Z22__fetch_global_Serial1v>
   d9f84:	6803      	ldr	r3, [r0, #0]
   d9f86:	691b      	ldr	r3, [r3, #16]
   d9f88:	4798      	blx	r3
   d9f8a:	2800      	cmp	r0, #0
   d9f8c:	dc03      	bgt.n	d9f96 <serialEventRun+0x2e>
   d9f8e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9f90:	f3af 8000 	nop.w
   d9f94:	e7f2      	b.n	d9f7c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9f96:	f3af 8000 	nop.w
   d9f9a:	bd08      	pop	{r3, pc}
	...

000d9fa4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9fa4:	b508      	push	{r3, lr}
	serialEventRun();
   d9fa6:	f7ff ffdf 	bl	d9f68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9faa:	f7fd ff19 	bl	d7de0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9fae:	4b01      	ldr	r3, [pc, #4]	; (d9fb4 <_post_loop+0x10>)
   d9fb0:	6018      	str	r0, [r3, #0]
   d9fb2:	bd08      	pop	{r3, pc}
   d9fb4:	2003e60c 	.word	0x2003e60c

000d9fb8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9fb8:	4802      	ldr	r0, [pc, #8]	; (d9fc4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9fba:	4a03      	ldr	r2, [pc, #12]	; (d9fc8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9fbc:	4903      	ldr	r1, [pc, #12]	; (d9fcc <_Z33system_initialize_user_backup_ramv+0x14>)
   d9fbe:	1a12      	subs	r2, r2, r0
   d9fc0:	f001 b986 	b.w	db2d0 <memcpy>
   d9fc4:	2003f400 	.word	0x2003f400
   d9fc8:	2003fc1c 	.word	0x2003fc1c
   d9fcc:	000ddfa0 	.word	0x000ddfa0

000d9fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9fd0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9fd2:	2300      	movs	r3, #0
   d9fd4:	9300      	str	r3, [sp, #0]
   d9fd6:	461a      	mov	r2, r3
   d9fd8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9fdc:	f7fe f924 	bl	d8228 <system_ctrl_set_result>
}
   d9fe0:	b003      	add	sp, #12
   d9fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9fe8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9fe8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9fea:	8843      	ldrh	r3, [r0, #2]
   d9fec:	2b0a      	cmp	r3, #10
   d9fee:	d008      	beq.n	da002 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9ff0:	2b50      	cmp	r3, #80	; 0x50
   d9ff2:	d109      	bne.n	da008 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9ff4:	4b09      	ldr	r3, [pc, #36]	; (da01c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9ff6:	681b      	ldr	r3, [r3, #0]
   d9ff8:	b13b      	cbz	r3, da00a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9ffa:	b003      	add	sp, #12
   d9ffc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   da000:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   da002:	f7ff ffe5 	bl	d9fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   da006:	e006      	b.n	da016 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da008:	2300      	movs	r3, #0
   da00a:	9300      	str	r3, [sp, #0]
   da00c:	461a      	mov	r2, r3
   da00e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da012:	f7fe f909 	bl	d8228 <system_ctrl_set_result>
        break;
    }
}
   da016:	b003      	add	sp, #12
   da018:	f85d fb04 	ldr.w	pc, [sp], #4
   da01c:	2003e604 	.word	0x2003e604

000da020 <module_user_init_hook>:

void module_user_init_hook()
{
   da020:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da022:	4c10      	ldr	r4, [pc, #64]	; (da064 <module_user_init_hook+0x44>)
   da024:	4d10      	ldr	r5, [pc, #64]	; (da068 <module_user_init_hook+0x48>)
   da026:	6823      	ldr	r3, [r4, #0]
   da028:	42ab      	cmp	r3, r5
   da02a:	4b10      	ldr	r3, [pc, #64]	; (da06c <module_user_init_hook+0x4c>)
   da02c:	bf0c      	ite	eq
   da02e:	2201      	moveq	r2, #1
   da030:	2200      	movne	r2, #0
   da032:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da034:	d002      	beq.n	da03c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   da036:	f7ff ffbf 	bl	d9fb8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da03a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da03c:	f7fd feb8 	bl	d7db0 <HAL_RNG_GetRandomNumber>
   da040:	4604      	mov	r4, r0
    srand(seed);
   da042:	f001 fbc1 	bl	db7c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da046:	4b0a      	ldr	r3, [pc, #40]	; (da070 <module_user_init_hook+0x50>)
   da048:	b113      	cbz	r3, da050 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   da04a:	4620      	mov	r0, r4
   da04c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da050:	2100      	movs	r1, #0
   da052:	4807      	ldr	r0, [pc, #28]	; (da070 <module_user_init_hook+0x50>)
   da054:	f7fe f95c 	bl	d8310 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da058:	2100      	movs	r1, #0
   da05a:	4806      	ldr	r0, [pc, #24]	; (da074 <module_user_init_hook+0x54>)
}
   da05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da060:	f7fe b8d8 	b.w	d8214 <system_ctrl_set_app_request_handler>
   da064:	2003fc18 	.word	0x2003fc18
   da068:	9a271c1e 	.word	0x9a271c1e
   da06c:	2003e608 	.word	0x2003e608
   da070:	00000000 	.word	0x00000000
   da074:	000d9fe9 	.word	0x000d9fe9

000da078 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da078:	b508      	push	{r3, lr}
   da07a:	4b02      	ldr	r3, [pc, #8]	; (da084 <spark_protocol_instance+0xc>)
   da07c:	681b      	ldr	r3, [r3, #0]
   da07e:	681b      	ldr	r3, [r3, #0]
   da080:	9301      	str	r3, [sp, #4]
   da082:	bd08      	pop	{r3, pc}
   da084:	0003025c 	.word	0x0003025c

000da088 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da088:	b508      	push	{r3, lr}
   da08a:	4b02      	ldr	r3, [pc, #8]	; (da094 <spark_protocol_set_product_id+0xc>)
   da08c:	681b      	ldr	r3, [r3, #0]
   da08e:	685b      	ldr	r3, [r3, #4]
   da090:	9301      	str	r3, [sp, #4]
   da092:	bd08      	pop	{r3, pc}
   da094:	0003025c 	.word	0x0003025c

000da098 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da098:	b508      	push	{r3, lr}
   da09a:	4b02      	ldr	r3, [pc, #8]	; (da0a4 <spark_protocol_set_product_firmware_version+0xc>)
   da09c:	681b      	ldr	r3, [r3, #0]
   da09e:	689b      	ldr	r3, [r3, #8]
   da0a0:	9301      	str	r3, [sp, #4]
   da0a2:	bd08      	pop	{r3, pc}
   da0a4:	0003025c 	.word	0x0003025c

000da0a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   da0a8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da0aa:	4e18      	ldr	r6, [pc, #96]	; (da10c <pinAvailable+0x64>)
   da0ac:	6831      	ldr	r1, [r6, #0]
   da0ae:	f011 0501 	ands.w	r5, r1, #1
   da0b2:	4604      	mov	r4, r0
   da0b4:	d10a      	bne.n	da0cc <pinAvailable+0x24>
   da0b6:	4630      	mov	r0, r6
   da0b8:	f7fa f800 	bl	d40bc <__cxa_guard_acquire>
   da0bc:	b130      	cbz	r0, da0cc <pinAvailable+0x24>
   da0be:	4629      	mov	r1, r5
   da0c0:	4813      	ldr	r0, [pc, #76]	; (da110 <pinAvailable+0x68>)
   da0c2:	f7ff faa5 	bl	d9610 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   da0c6:	4630      	mov	r0, r6
   da0c8:	f7f9 fffd 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   da0cc:	4810      	ldr	r0, [pc, #64]	; (da110 <pinAvailable+0x68>)
   da0ce:	f7ff fb49 	bl	d9764 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   da0d2:	b128      	cbz	r0, da0e0 <pinAvailable+0x38>
   da0d4:	f1a4 030b 	sub.w	r3, r4, #11
   da0d8:	2b02      	cmp	r3, #2
   da0da:	d801      	bhi.n	da0e0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da0dc:	2000      	movs	r0, #0
   da0de:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da0e0:	f000 f870 	bl	da1c4 <_Z19__fetch_global_Wirev>
   da0e4:	f7fe fef3 	bl	d8ece <_ZN7TwoWire9isEnabledEv>
   da0e8:	b108      	cbz	r0, da0ee <pinAvailable+0x46>
   da0ea:	2c01      	cmp	r4, #1
   da0ec:	d9f6      	bls.n	da0dc <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da0ee:	f7ff fe8d 	bl	d9e0c <_Z22__fetch_global_Serial1v>
   da0f2:	f7ff fe87 	bl	d9e04 <_ZN11USARTSerial9isEnabledEv>
   da0f6:	b118      	cbz	r0, da100 <pinAvailable+0x58>
   da0f8:	f1a4 0309 	sub.w	r3, r4, #9
   da0fc:	2b01      	cmp	r3, #1
   da0fe:	d9ed      	bls.n	da0dc <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da100:	2c23      	cmp	r4, #35	; 0x23
   da102:	bf8c      	ite	hi
   da104:	2000      	movhi	r0, #0
   da106:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da108:	bd70      	pop	{r4, r5, r6, pc}
   da10a:	bf00      	nop
   da10c:	2003e07c 	.word	0x2003e07c
   da110:	2003e080 	.word	0x2003e080

000da114 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da114:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da116:	b538      	push	{r3, r4, r5, lr}
   da118:	4604      	mov	r4, r0
   da11a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da11c:	d80a      	bhi.n	da134 <pinMode+0x20>
   da11e:	29ff      	cmp	r1, #255	; 0xff
   da120:	d008      	beq.n	da134 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da122:	f7ff ffc1 	bl	da0a8 <pinAvailable>
   da126:	b128      	cbz	r0, da134 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da128:	4629      	mov	r1, r5
   da12a:	4620      	mov	r0, r4
}
   da12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da130:	f7fd be96 	b.w	d7e60 <HAL_Pin_Mode>
   da134:	bd38      	pop	{r3, r4, r5, pc}

000da136 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da136:	b538      	push	{r3, r4, r5, lr}
   da138:	4604      	mov	r4, r0
   da13a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da13c:	f7fd fe98 	bl	d7e70 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da140:	28ff      	cmp	r0, #255	; 0xff
   da142:	d010      	beq.n	da166 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da144:	2806      	cmp	r0, #6
   da146:	d804      	bhi.n	da152 <digitalWrite+0x1c>
   da148:	234d      	movs	r3, #77	; 0x4d
   da14a:	fa23 f000 	lsr.w	r0, r3, r0
   da14e:	07c3      	lsls	r3, r0, #31
   da150:	d409      	bmi.n	da166 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da152:	4620      	mov	r0, r4
   da154:	f7ff ffa8 	bl	da0a8 <pinAvailable>
   da158:	b128      	cbz	r0, da166 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da15a:	4629      	mov	r1, r5
   da15c:	4620      	mov	r0, r4
}
   da15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da162:	f7fd be8d 	b.w	d7e80 <HAL_GPIO_Write>
   da166:	bd38      	pop	{r3, r4, r5, pc}

000da168 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da168:	b510      	push	{r4, lr}
   da16a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da16c:	f7fd fe80 	bl	d7e70 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da170:	3804      	subs	r0, #4
   da172:	b2c0      	uxtb	r0, r0
   da174:	2801      	cmp	r0, #1
   da176:	d908      	bls.n	da18a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da178:	4620      	mov	r0, r4
   da17a:	f7ff ff95 	bl	da0a8 <pinAvailable>
   da17e:	b120      	cbz	r0, da18a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da180:	4620      	mov	r0, r4
}
   da182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da186:	f7fd be83 	b.w	d7e90 <HAL_GPIO_Read>
}
   da18a:	2000      	movs	r0, #0
   da18c:	bd10      	pop	{r4, pc}
	...

000da190 <_Z17acquireWireBufferv>:
   da190:	b570      	push	{r4, r5, r6, lr}
   da192:	4604      	mov	r4, r0
   da194:	2514      	movs	r5, #20
   da196:	462a      	mov	r2, r5
   da198:	4e09      	ldr	r6, [pc, #36]	; (da1c0 <_Z17acquireWireBufferv+0x30>)
   da19a:	2100      	movs	r1, #0
   da19c:	f001 f8be 	bl	db31c <memset>
   da1a0:	8025      	strh	r5, [r4, #0]
   da1a2:	2520      	movs	r5, #32
   da1a4:	4631      	mov	r1, r6
   da1a6:	60a5      	str	r5, [r4, #8]
   da1a8:	6125      	str	r5, [r4, #16]
   da1aa:	4628      	mov	r0, r5
   da1ac:	f000 f84f 	bl	da24e <_ZnajRKSt9nothrow_t>
   da1b0:	4631      	mov	r1, r6
   da1b2:	6060      	str	r0, [r4, #4]
   da1b4:	4628      	mov	r0, r5
   da1b6:	f000 f84a 	bl	da24e <_ZnajRKSt9nothrow_t>
   da1ba:	60e0      	str	r0, [r4, #12]
   da1bc:	4620      	mov	r0, r4
   da1be:	bd70      	pop	{r4, r5, r6, pc}
   da1c0:	000dd9f0 	.word	0x000dd9f0

000da1c4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da1c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da1c6:	4d0e      	ldr	r5, [pc, #56]	; (da200 <_Z19__fetch_global_Wirev+0x3c>)
   da1c8:	6829      	ldr	r1, [r5, #0]
   da1ca:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da1ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da1d0:	d113      	bne.n	da1fa <_Z19__fetch_global_Wirev+0x36>
   da1d2:	4628      	mov	r0, r5
   da1d4:	f7f9 ff72 	bl	d40bc <__cxa_guard_acquire>
   da1d8:	b178      	cbz	r0, da1fa <_Z19__fetch_global_Wirev+0x36>
   da1da:	a801      	add	r0, sp, #4
   da1dc:	f7ff ffd8 	bl	da190 <_Z17acquireWireBufferv>
   da1e0:	aa01      	add	r2, sp, #4
   da1e2:	4621      	mov	r1, r4
   da1e4:	4807      	ldr	r0, [pc, #28]	; (da204 <_Z19__fetch_global_Wirev+0x40>)
   da1e6:	f7fe fe21 	bl	d8e2c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da1ea:	4628      	mov	r0, r5
   da1ec:	f7f9 ff6b 	bl	d40c6 <__cxa_guard_release>
   da1f0:	4a05      	ldr	r2, [pc, #20]	; (da208 <_Z19__fetch_global_Wirev+0x44>)
   da1f2:	4906      	ldr	r1, [pc, #24]	; (da20c <_Z19__fetch_global_Wirev+0x48>)
   da1f4:	4803      	ldr	r0, [pc, #12]	; (da204 <_Z19__fetch_global_Wirev+0x40>)
   da1f6:	f000 f80b 	bl	da210 <__aeabi_atexit>
	return wire;
}
   da1fa:	4802      	ldr	r0, [pc, #8]	; (da204 <_Z19__fetch_global_Wirev+0x40>)
   da1fc:	b007      	add	sp, #28
   da1fe:	bd30      	pop	{r4, r5, pc}
   da200:	2003e610 	.word	0x2003e610
   da204:	2003e614 	.word	0x2003e614
   da208:	2003dea8 	.word	0x2003dea8
   da20c:	000d8dd5 	.word	0x000d8dd5

000da210 <__aeabi_atexit>:
   da210:	460b      	mov	r3, r1
   da212:	4601      	mov	r1, r0
   da214:	4618      	mov	r0, r3
   da216:	f000 beab 	b.w	daf70 <__cxa_atexit>

000da21a <_ZdlPvj>:
   da21a:	f7f9 bf40 	b.w	d409e <_ZdlPv>
	...

000da220 <_ZSt15get_new_handlerv>:
   da220:	4b02      	ldr	r3, [pc, #8]	; (da22c <_ZSt15get_new_handlerv+0xc>)
   da222:	6818      	ldr	r0, [r3, #0]
   da224:	f3bf 8f5f 	dmb	sy
   da228:	4770      	bx	lr
   da22a:	bf00      	nop
   da22c:	2003e628 	.word	0x2003e628

000da230 <_ZnwjRKSt9nothrow_t>:
   da230:	b510      	push	{r4, lr}
   da232:	2800      	cmp	r0, #0
   da234:	bf14      	ite	ne
   da236:	4604      	movne	r4, r0
   da238:	2401      	moveq	r4, #1
   da23a:	4620      	mov	r0, r4
   da23c:	f7fe f8c0 	bl	d83c0 <malloc>
   da240:	b920      	cbnz	r0, da24c <_ZnwjRKSt9nothrow_t+0x1c>
   da242:	f7ff ffed 	bl	da220 <_ZSt15get_new_handlerv>
   da246:	b108      	cbz	r0, da24c <_ZnwjRKSt9nothrow_t+0x1c>
   da248:	4780      	blx	r0
   da24a:	e7f6      	b.n	da23a <_ZnwjRKSt9nothrow_t+0xa>
   da24c:	bd10      	pop	{r4, pc}

000da24e <_ZnajRKSt9nothrow_t>:
   da24e:	f7ff bfef 	b.w	da230 <_ZnwjRKSt9nothrow_t>

000da252 <_ZSt25__throw_bad_function_callv>:
   da252:	b508      	push	{r3, lr}
   da254:	f7fe f8f4 	bl	d8440 <abort>

000da258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da258:	4b24      	ldr	r3, [pc, #144]	; (da2ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da25a:	681a      	ldr	r2, [r3, #0]
   da25c:	07d0      	lsls	r0, r2, #31
   da25e:	bf5c      	itt	pl
   da260:	2201      	movpl	r2, #1
   da262:	601a      	strpl	r2, [r3, #0]
   da264:	4b22      	ldr	r3, [pc, #136]	; (da2f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da266:	681a      	ldr	r2, [r3, #0]
   da268:	07d1      	lsls	r1, r2, #31
   da26a:	bf5c      	itt	pl
   da26c:	2201      	movpl	r2, #1
   da26e:	601a      	strpl	r2, [r3, #0]
   da270:	4b20      	ldr	r3, [pc, #128]	; (da2f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da272:	681a      	ldr	r2, [r3, #0]
   da274:	07d2      	lsls	r2, r2, #31
   da276:	bf5c      	itt	pl
   da278:	2201      	movpl	r2, #1
   da27a:	601a      	strpl	r2, [r3, #0]
   da27c:	4b1e      	ldr	r3, [pc, #120]	; (da2f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da27e:	681a      	ldr	r2, [r3, #0]
   da280:	07d0      	lsls	r0, r2, #31
   da282:	bf5c      	itt	pl
   da284:	2201      	movpl	r2, #1
   da286:	601a      	strpl	r2, [r3, #0]
   da288:	4b1c      	ldr	r3, [pc, #112]	; (da2fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da28a:	681a      	ldr	r2, [r3, #0]
   da28c:	07d1      	lsls	r1, r2, #31
   da28e:	bf5c      	itt	pl
   da290:	2201      	movpl	r2, #1
   da292:	601a      	strpl	r2, [r3, #0]
   da294:	4b1a      	ldr	r3, [pc, #104]	; (da300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da296:	681a      	ldr	r2, [r3, #0]
   da298:	07d2      	lsls	r2, r2, #31
   da29a:	bf5c      	itt	pl
   da29c:	2201      	movpl	r2, #1
   da29e:	601a      	strpl	r2, [r3, #0]
   da2a0:	4b18      	ldr	r3, [pc, #96]	; (da304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da2a2:	681a      	ldr	r2, [r3, #0]
   da2a4:	07d0      	lsls	r0, r2, #31
   da2a6:	bf5c      	itt	pl
   da2a8:	2201      	movpl	r2, #1
   da2aa:	601a      	strpl	r2, [r3, #0]
   da2ac:	4b16      	ldr	r3, [pc, #88]	; (da308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da2ae:	681a      	ldr	r2, [r3, #0]
   da2b0:	07d1      	lsls	r1, r2, #31
   da2b2:	bf5c      	itt	pl
   da2b4:	2201      	movpl	r2, #1
   da2b6:	601a      	strpl	r2, [r3, #0]
   da2b8:	4b14      	ldr	r3, [pc, #80]	; (da30c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da2ba:	681a      	ldr	r2, [r3, #0]
   da2bc:	07d2      	lsls	r2, r2, #31
   da2be:	bf5c      	itt	pl
   da2c0:	2201      	movpl	r2, #1
   da2c2:	601a      	strpl	r2, [r3, #0]
   da2c4:	4b12      	ldr	r3, [pc, #72]	; (da310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da2c6:	681a      	ldr	r2, [r3, #0]
   da2c8:	07d0      	lsls	r0, r2, #31
   da2ca:	bf5c      	itt	pl
   da2cc:	2201      	movpl	r2, #1
   da2ce:	601a      	strpl	r2, [r3, #0]
   da2d0:	4b10      	ldr	r3, [pc, #64]	; (da314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da2d2:	681a      	ldr	r2, [r3, #0]
   da2d4:	07d1      	lsls	r1, r2, #31
   da2d6:	bf5c      	itt	pl
   da2d8:	2201      	movpl	r2, #1
   da2da:	601a      	strpl	r2, [r3, #0]
   da2dc:	4b0e      	ldr	r3, [pc, #56]	; (da318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da2de:	681a      	ldr	r2, [r3, #0]
   da2e0:	07d2      	lsls	r2, r2, #31
   da2e2:	bf5c      	itt	pl
   da2e4:	2201      	movpl	r2, #1
   da2e6:	601a      	strpl	r2, [r3, #0]
   da2e8:	4770      	bx	lr
   da2ea:	bf00      	nop
   da2ec:	2003e658 	.word	0x2003e658
   da2f0:	2003e654 	.word	0x2003e654
   da2f4:	2003e650 	.word	0x2003e650
   da2f8:	2003e64c 	.word	0x2003e64c
   da2fc:	2003e648 	.word	0x2003e648
   da300:	2003e644 	.word	0x2003e644
   da304:	2003e640 	.word	0x2003e640
   da308:	2003e63c 	.word	0x2003e63c
   da30c:	2003e638 	.word	0x2003e638
   da310:	2003e634 	.word	0x2003e634
   da314:	2003e630 	.word	0x2003e630
   da318:	2003e62c 	.word	0x2003e62c

000da31c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da31c:	4b18      	ldr	r3, [pc, #96]	; (da380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da31e:	681a      	ldr	r2, [r3, #0]
   da320:	07d1      	lsls	r1, r2, #31
   da322:	bf5c      	itt	pl
   da324:	2201      	movpl	r2, #1
   da326:	601a      	strpl	r2, [r3, #0]
   da328:	4b16      	ldr	r3, [pc, #88]	; (da384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da32a:	681a      	ldr	r2, [r3, #0]
   da32c:	07d2      	lsls	r2, r2, #31
   da32e:	bf5c      	itt	pl
   da330:	2201      	movpl	r2, #1
   da332:	601a      	strpl	r2, [r3, #0]
   da334:	4b14      	ldr	r3, [pc, #80]	; (da388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da336:	681a      	ldr	r2, [r3, #0]
   da338:	07d0      	lsls	r0, r2, #31
   da33a:	bf5c      	itt	pl
   da33c:	2201      	movpl	r2, #1
   da33e:	601a      	strpl	r2, [r3, #0]
   da340:	4b12      	ldr	r3, [pc, #72]	; (da38c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da342:	681a      	ldr	r2, [r3, #0]
   da344:	07d1      	lsls	r1, r2, #31
   da346:	bf5c      	itt	pl
   da348:	2201      	movpl	r2, #1
   da34a:	601a      	strpl	r2, [r3, #0]
   da34c:	4b10      	ldr	r3, [pc, #64]	; (da390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da34e:	681a      	ldr	r2, [r3, #0]
   da350:	07d2      	lsls	r2, r2, #31
   da352:	bf5c      	itt	pl
   da354:	2201      	movpl	r2, #1
   da356:	601a      	strpl	r2, [r3, #0]
   da358:	4b0e      	ldr	r3, [pc, #56]	; (da394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da35a:	681a      	ldr	r2, [r3, #0]
   da35c:	07d0      	lsls	r0, r2, #31
   da35e:	bf5c      	itt	pl
   da360:	2201      	movpl	r2, #1
   da362:	601a      	strpl	r2, [r3, #0]
   da364:	4b0c      	ldr	r3, [pc, #48]	; (da398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da366:	681a      	ldr	r2, [r3, #0]
   da368:	07d1      	lsls	r1, r2, #31
   da36a:	bf5c      	itt	pl
   da36c:	2201      	movpl	r2, #1
   da36e:	601a      	strpl	r2, [r3, #0]
   da370:	4b0a      	ldr	r3, [pc, #40]	; (da39c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da372:	681a      	ldr	r2, [r3, #0]
   da374:	07d2      	lsls	r2, r2, #31
   da376:	bf5c      	itt	pl
   da378:	2201      	movpl	r2, #1
   da37a:	601a      	strpl	r2, [r3, #0]
   da37c:	4770      	bx	lr
   da37e:	bf00      	nop
   da380:	2003e678 	.word	0x2003e678
   da384:	2003e674 	.word	0x2003e674
   da388:	2003e670 	.word	0x2003e670
   da38c:	2003e66c 	.word	0x2003e66c
   da390:	2003e668 	.word	0x2003e668
   da394:	2003e664 	.word	0x2003e664
   da398:	2003e660 	.word	0x2003e660
   da39c:	2003e65c 	.word	0x2003e65c

000da3a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da3a0:	4b18      	ldr	r3, [pc, #96]	; (da404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da3a2:	681a      	ldr	r2, [r3, #0]
   da3a4:	07d1      	lsls	r1, r2, #31
   da3a6:	bf5c      	itt	pl
   da3a8:	2201      	movpl	r2, #1
   da3aa:	601a      	strpl	r2, [r3, #0]
   da3ac:	4b16      	ldr	r3, [pc, #88]	; (da408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da3ae:	681a      	ldr	r2, [r3, #0]
   da3b0:	07d2      	lsls	r2, r2, #31
   da3b2:	bf5c      	itt	pl
   da3b4:	2201      	movpl	r2, #1
   da3b6:	601a      	strpl	r2, [r3, #0]
   da3b8:	4b14      	ldr	r3, [pc, #80]	; (da40c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da3ba:	681a      	ldr	r2, [r3, #0]
   da3bc:	07d0      	lsls	r0, r2, #31
   da3be:	bf5c      	itt	pl
   da3c0:	2201      	movpl	r2, #1
   da3c2:	601a      	strpl	r2, [r3, #0]
   da3c4:	4b12      	ldr	r3, [pc, #72]	; (da410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da3c6:	681a      	ldr	r2, [r3, #0]
   da3c8:	07d1      	lsls	r1, r2, #31
   da3ca:	bf5c      	itt	pl
   da3cc:	2201      	movpl	r2, #1
   da3ce:	601a      	strpl	r2, [r3, #0]
   da3d0:	4b10      	ldr	r3, [pc, #64]	; (da414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da3d2:	681a      	ldr	r2, [r3, #0]
   da3d4:	07d2      	lsls	r2, r2, #31
   da3d6:	bf5c      	itt	pl
   da3d8:	2201      	movpl	r2, #1
   da3da:	601a      	strpl	r2, [r3, #0]
   da3dc:	4b0e      	ldr	r3, [pc, #56]	; (da418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da3de:	681a      	ldr	r2, [r3, #0]
   da3e0:	07d0      	lsls	r0, r2, #31
   da3e2:	bf5c      	itt	pl
   da3e4:	2201      	movpl	r2, #1
   da3e6:	601a      	strpl	r2, [r3, #0]
   da3e8:	4b0c      	ldr	r3, [pc, #48]	; (da41c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da3ea:	681a      	ldr	r2, [r3, #0]
   da3ec:	07d1      	lsls	r1, r2, #31
   da3ee:	bf5c      	itt	pl
   da3f0:	2201      	movpl	r2, #1
   da3f2:	601a      	strpl	r2, [r3, #0]
   da3f4:	4b0a      	ldr	r3, [pc, #40]	; (da420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da3f6:	681a      	ldr	r2, [r3, #0]
   da3f8:	07d2      	lsls	r2, r2, #31
   da3fa:	bf5c      	itt	pl
   da3fc:	2201      	movpl	r2, #1
   da3fe:	601a      	strpl	r2, [r3, #0]
   da400:	4770      	bx	lr
   da402:	bf00      	nop
   da404:	2003e698 	.word	0x2003e698
   da408:	2003e694 	.word	0x2003e694
   da40c:	2003e690 	.word	0x2003e690
   da410:	2003e68c 	.word	0x2003e68c
   da414:	2003e688 	.word	0x2003e688
   da418:	2003e684 	.word	0x2003e684
   da41c:	2003e680 	.word	0x2003e680
   da420:	2003e67c 	.word	0x2003e67c

000da424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da424:	4b24      	ldr	r3, [pc, #144]	; (da4b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da426:	681a      	ldr	r2, [r3, #0]
   da428:	07d0      	lsls	r0, r2, #31
   da42a:	bf5c      	itt	pl
   da42c:	2201      	movpl	r2, #1
   da42e:	601a      	strpl	r2, [r3, #0]
   da430:	4b22      	ldr	r3, [pc, #136]	; (da4bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da432:	681a      	ldr	r2, [r3, #0]
   da434:	07d1      	lsls	r1, r2, #31
   da436:	bf5c      	itt	pl
   da438:	2201      	movpl	r2, #1
   da43a:	601a      	strpl	r2, [r3, #0]
   da43c:	4b20      	ldr	r3, [pc, #128]	; (da4c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da43e:	681a      	ldr	r2, [r3, #0]
   da440:	07d2      	lsls	r2, r2, #31
   da442:	bf5c      	itt	pl
   da444:	2201      	movpl	r2, #1
   da446:	601a      	strpl	r2, [r3, #0]
   da448:	4b1e      	ldr	r3, [pc, #120]	; (da4c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da44a:	681a      	ldr	r2, [r3, #0]
   da44c:	07d0      	lsls	r0, r2, #31
   da44e:	bf5c      	itt	pl
   da450:	2201      	movpl	r2, #1
   da452:	601a      	strpl	r2, [r3, #0]
   da454:	4b1c      	ldr	r3, [pc, #112]	; (da4c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da456:	681a      	ldr	r2, [r3, #0]
   da458:	07d1      	lsls	r1, r2, #31
   da45a:	bf5c      	itt	pl
   da45c:	2201      	movpl	r2, #1
   da45e:	601a      	strpl	r2, [r3, #0]
   da460:	4b1a      	ldr	r3, [pc, #104]	; (da4cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da462:	681a      	ldr	r2, [r3, #0]
   da464:	07d2      	lsls	r2, r2, #31
   da466:	bf5c      	itt	pl
   da468:	2201      	movpl	r2, #1
   da46a:	601a      	strpl	r2, [r3, #0]
   da46c:	4b18      	ldr	r3, [pc, #96]	; (da4d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da46e:	681a      	ldr	r2, [r3, #0]
   da470:	07d0      	lsls	r0, r2, #31
   da472:	bf5c      	itt	pl
   da474:	2201      	movpl	r2, #1
   da476:	601a      	strpl	r2, [r3, #0]
   da478:	4b16      	ldr	r3, [pc, #88]	; (da4d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da47a:	681a      	ldr	r2, [r3, #0]
   da47c:	07d1      	lsls	r1, r2, #31
   da47e:	bf5c      	itt	pl
   da480:	2201      	movpl	r2, #1
   da482:	601a      	strpl	r2, [r3, #0]
   da484:	4b14      	ldr	r3, [pc, #80]	; (da4d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da486:	681a      	ldr	r2, [r3, #0]
   da488:	07d2      	lsls	r2, r2, #31
   da48a:	bf5c      	itt	pl
   da48c:	2201      	movpl	r2, #1
   da48e:	601a      	strpl	r2, [r3, #0]
   da490:	4b12      	ldr	r3, [pc, #72]	; (da4dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da492:	681a      	ldr	r2, [r3, #0]
   da494:	07d0      	lsls	r0, r2, #31
   da496:	bf5c      	itt	pl
   da498:	2201      	movpl	r2, #1
   da49a:	601a      	strpl	r2, [r3, #0]
   da49c:	4b10      	ldr	r3, [pc, #64]	; (da4e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da49e:	681a      	ldr	r2, [r3, #0]
   da4a0:	07d1      	lsls	r1, r2, #31
   da4a2:	bf5c      	itt	pl
   da4a4:	2201      	movpl	r2, #1
   da4a6:	601a      	strpl	r2, [r3, #0]
   da4a8:	4b0e      	ldr	r3, [pc, #56]	; (da4e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da4aa:	681a      	ldr	r2, [r3, #0]
   da4ac:	07d2      	lsls	r2, r2, #31
   da4ae:	bf5c      	itt	pl
   da4b0:	2201      	movpl	r2, #1
   da4b2:	601a      	strpl	r2, [r3, #0]
   da4b4:	4770      	bx	lr
   da4b6:	bf00      	nop
   da4b8:	2003e6c8 	.word	0x2003e6c8
   da4bc:	2003e6c4 	.word	0x2003e6c4
   da4c0:	2003e6c0 	.word	0x2003e6c0
   da4c4:	2003e6bc 	.word	0x2003e6bc
   da4c8:	2003e6b8 	.word	0x2003e6b8
   da4cc:	2003e6b4 	.word	0x2003e6b4
   da4d0:	2003e6b0 	.word	0x2003e6b0
   da4d4:	2003e6ac 	.word	0x2003e6ac
   da4d8:	2003e6a8 	.word	0x2003e6a8
   da4dc:	2003e6a4 	.word	0x2003e6a4
   da4e0:	2003e6a0 	.word	0x2003e6a0
   da4e4:	2003e69c 	.word	0x2003e69c

000da4e8 <__aeabi_drsub>:
   da4e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da4ec:	e002      	b.n	da4f4 <__adddf3>
   da4ee:	bf00      	nop

000da4f0 <__aeabi_dsub>:
   da4f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da4f4 <__adddf3>:
   da4f4:	b530      	push	{r4, r5, lr}
   da4f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da4fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da4fe:	ea94 0f05 	teq	r4, r5
   da502:	bf08      	it	eq
   da504:	ea90 0f02 	teqeq	r0, r2
   da508:	bf1f      	itttt	ne
   da50a:	ea54 0c00 	orrsne.w	ip, r4, r0
   da50e:	ea55 0c02 	orrsne.w	ip, r5, r2
   da512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da51a:	f000 80e2 	beq.w	da6e2 <__adddf3+0x1ee>
   da51e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da526:	bfb8      	it	lt
   da528:	426d      	neglt	r5, r5
   da52a:	dd0c      	ble.n	da546 <__adddf3+0x52>
   da52c:	442c      	add	r4, r5
   da52e:	ea80 0202 	eor.w	r2, r0, r2
   da532:	ea81 0303 	eor.w	r3, r1, r3
   da536:	ea82 0000 	eor.w	r0, r2, r0
   da53a:	ea83 0101 	eor.w	r1, r3, r1
   da53e:	ea80 0202 	eor.w	r2, r0, r2
   da542:	ea81 0303 	eor.w	r3, r1, r3
   da546:	2d36      	cmp	r5, #54	; 0x36
   da548:	bf88      	it	hi
   da54a:	bd30      	pophi	{r4, r5, pc}
   da54c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da550:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da55c:	d002      	beq.n	da564 <__adddf3+0x70>
   da55e:	4240      	negs	r0, r0
   da560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da568:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da56c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da570:	d002      	beq.n	da578 <__adddf3+0x84>
   da572:	4252      	negs	r2, r2
   da574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da578:	ea94 0f05 	teq	r4, r5
   da57c:	f000 80a7 	beq.w	da6ce <__adddf3+0x1da>
   da580:	f1a4 0401 	sub.w	r4, r4, #1
   da584:	f1d5 0e20 	rsbs	lr, r5, #32
   da588:	db0d      	blt.n	da5a6 <__adddf3+0xb2>
   da58a:	fa02 fc0e 	lsl.w	ip, r2, lr
   da58e:	fa22 f205 	lsr.w	r2, r2, r5
   da592:	1880      	adds	r0, r0, r2
   da594:	f141 0100 	adc.w	r1, r1, #0
   da598:	fa03 f20e 	lsl.w	r2, r3, lr
   da59c:	1880      	adds	r0, r0, r2
   da59e:	fa43 f305 	asr.w	r3, r3, r5
   da5a2:	4159      	adcs	r1, r3
   da5a4:	e00e      	b.n	da5c4 <__adddf3+0xd0>
   da5a6:	f1a5 0520 	sub.w	r5, r5, #32
   da5aa:	f10e 0e20 	add.w	lr, lr, #32
   da5ae:	2a01      	cmp	r2, #1
   da5b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   da5b4:	bf28      	it	cs
   da5b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   da5ba:	fa43 f305 	asr.w	r3, r3, r5
   da5be:	18c0      	adds	r0, r0, r3
   da5c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da5c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da5c8:	d507      	bpl.n	da5da <__adddf3+0xe6>
   da5ca:	f04f 0e00 	mov.w	lr, #0
   da5ce:	f1dc 0c00 	rsbs	ip, ip, #0
   da5d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   da5d6:	eb6e 0101 	sbc.w	r1, lr, r1
   da5da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da5de:	d31b      	bcc.n	da618 <__adddf3+0x124>
   da5e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da5e4:	d30c      	bcc.n	da600 <__adddf3+0x10c>
   da5e6:	0849      	lsrs	r1, r1, #1
   da5e8:	ea5f 0030 	movs.w	r0, r0, rrx
   da5ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da5f0:	f104 0401 	add.w	r4, r4, #1
   da5f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da5f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da5fc:	f080 809a 	bcs.w	da734 <__adddf3+0x240>
   da600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da604:	bf08      	it	eq
   da606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da60a:	f150 0000 	adcs.w	r0, r0, #0
   da60e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da612:	ea41 0105 	orr.w	r1, r1, r5
   da616:	bd30      	pop	{r4, r5, pc}
   da618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da61c:	4140      	adcs	r0, r0
   da61e:	eb41 0101 	adc.w	r1, r1, r1
   da622:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da626:	f1a4 0401 	sub.w	r4, r4, #1
   da62a:	d1e9      	bne.n	da600 <__adddf3+0x10c>
   da62c:	f091 0f00 	teq	r1, #0
   da630:	bf04      	itt	eq
   da632:	4601      	moveq	r1, r0
   da634:	2000      	moveq	r0, #0
   da636:	fab1 f381 	clz	r3, r1
   da63a:	bf08      	it	eq
   da63c:	3320      	addeq	r3, #32
   da63e:	f1a3 030b 	sub.w	r3, r3, #11
   da642:	f1b3 0220 	subs.w	r2, r3, #32
   da646:	da0c      	bge.n	da662 <__adddf3+0x16e>
   da648:	320c      	adds	r2, #12
   da64a:	dd08      	ble.n	da65e <__adddf3+0x16a>
   da64c:	f102 0c14 	add.w	ip, r2, #20
   da650:	f1c2 020c 	rsb	r2, r2, #12
   da654:	fa01 f00c 	lsl.w	r0, r1, ip
   da658:	fa21 f102 	lsr.w	r1, r1, r2
   da65c:	e00c      	b.n	da678 <__adddf3+0x184>
   da65e:	f102 0214 	add.w	r2, r2, #20
   da662:	bfd8      	it	le
   da664:	f1c2 0c20 	rsble	ip, r2, #32
   da668:	fa01 f102 	lsl.w	r1, r1, r2
   da66c:	fa20 fc0c 	lsr.w	ip, r0, ip
   da670:	bfdc      	itt	le
   da672:	ea41 010c 	orrle.w	r1, r1, ip
   da676:	4090      	lslle	r0, r2
   da678:	1ae4      	subs	r4, r4, r3
   da67a:	bfa2      	ittt	ge
   da67c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da680:	4329      	orrge	r1, r5
   da682:	bd30      	popge	{r4, r5, pc}
   da684:	ea6f 0404 	mvn.w	r4, r4
   da688:	3c1f      	subs	r4, #31
   da68a:	da1c      	bge.n	da6c6 <__adddf3+0x1d2>
   da68c:	340c      	adds	r4, #12
   da68e:	dc0e      	bgt.n	da6ae <__adddf3+0x1ba>
   da690:	f104 0414 	add.w	r4, r4, #20
   da694:	f1c4 0220 	rsb	r2, r4, #32
   da698:	fa20 f004 	lsr.w	r0, r0, r4
   da69c:	fa01 f302 	lsl.w	r3, r1, r2
   da6a0:	ea40 0003 	orr.w	r0, r0, r3
   da6a4:	fa21 f304 	lsr.w	r3, r1, r4
   da6a8:	ea45 0103 	orr.w	r1, r5, r3
   da6ac:	bd30      	pop	{r4, r5, pc}
   da6ae:	f1c4 040c 	rsb	r4, r4, #12
   da6b2:	f1c4 0220 	rsb	r2, r4, #32
   da6b6:	fa20 f002 	lsr.w	r0, r0, r2
   da6ba:	fa01 f304 	lsl.w	r3, r1, r4
   da6be:	ea40 0003 	orr.w	r0, r0, r3
   da6c2:	4629      	mov	r1, r5
   da6c4:	bd30      	pop	{r4, r5, pc}
   da6c6:	fa21 f004 	lsr.w	r0, r1, r4
   da6ca:	4629      	mov	r1, r5
   da6cc:	bd30      	pop	{r4, r5, pc}
   da6ce:	f094 0f00 	teq	r4, #0
   da6d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da6d6:	bf06      	itte	eq
   da6d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da6dc:	3401      	addeq	r4, #1
   da6de:	3d01      	subne	r5, #1
   da6e0:	e74e      	b.n	da580 <__adddf3+0x8c>
   da6e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6e6:	bf18      	it	ne
   da6e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da6ec:	d029      	beq.n	da742 <__adddf3+0x24e>
   da6ee:	ea94 0f05 	teq	r4, r5
   da6f2:	bf08      	it	eq
   da6f4:	ea90 0f02 	teqeq	r0, r2
   da6f8:	d005      	beq.n	da706 <__adddf3+0x212>
   da6fa:	ea54 0c00 	orrs.w	ip, r4, r0
   da6fe:	bf04      	itt	eq
   da700:	4619      	moveq	r1, r3
   da702:	4610      	moveq	r0, r2
   da704:	bd30      	pop	{r4, r5, pc}
   da706:	ea91 0f03 	teq	r1, r3
   da70a:	bf1e      	ittt	ne
   da70c:	2100      	movne	r1, #0
   da70e:	2000      	movne	r0, #0
   da710:	bd30      	popne	{r4, r5, pc}
   da712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da716:	d105      	bne.n	da724 <__adddf3+0x230>
   da718:	0040      	lsls	r0, r0, #1
   da71a:	4149      	adcs	r1, r1
   da71c:	bf28      	it	cs
   da71e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da722:	bd30      	pop	{r4, r5, pc}
   da724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da728:	bf3c      	itt	cc
   da72a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da72e:	bd30      	popcc	{r4, r5, pc}
   da730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da73c:	f04f 0000 	mov.w	r0, #0
   da740:	bd30      	pop	{r4, r5, pc}
   da742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da746:	bf1a      	itte	ne
   da748:	4619      	movne	r1, r3
   da74a:	4610      	movne	r0, r2
   da74c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da750:	bf1c      	itt	ne
   da752:	460b      	movne	r3, r1
   da754:	4602      	movne	r2, r0
   da756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da75a:	bf06      	itte	eq
   da75c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da760:	ea91 0f03 	teqeq	r1, r3
   da764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da768:	bd30      	pop	{r4, r5, pc}
   da76a:	bf00      	nop

000da76c <__aeabi_ui2d>:
   da76c:	f090 0f00 	teq	r0, #0
   da770:	bf04      	itt	eq
   da772:	2100      	moveq	r1, #0
   da774:	4770      	bxeq	lr
   da776:	b530      	push	{r4, r5, lr}
   da778:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da77c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da780:	f04f 0500 	mov.w	r5, #0
   da784:	f04f 0100 	mov.w	r1, #0
   da788:	e750      	b.n	da62c <__adddf3+0x138>
   da78a:	bf00      	nop

000da78c <__aeabi_i2d>:
   da78c:	f090 0f00 	teq	r0, #0
   da790:	bf04      	itt	eq
   da792:	2100      	moveq	r1, #0
   da794:	4770      	bxeq	lr
   da796:	b530      	push	{r4, r5, lr}
   da798:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da79c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da7a4:	bf48      	it	mi
   da7a6:	4240      	negmi	r0, r0
   da7a8:	f04f 0100 	mov.w	r1, #0
   da7ac:	e73e      	b.n	da62c <__adddf3+0x138>
   da7ae:	bf00      	nop

000da7b0 <__aeabi_f2d>:
   da7b0:	0042      	lsls	r2, r0, #1
   da7b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da7b6:	ea4f 0131 	mov.w	r1, r1, rrx
   da7ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da7be:	bf1f      	itttt	ne
   da7c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da7c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da7cc:	4770      	bxne	lr
   da7ce:	f092 0f00 	teq	r2, #0
   da7d2:	bf14      	ite	ne
   da7d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da7d8:	4770      	bxeq	lr
   da7da:	b530      	push	{r4, r5, lr}
   da7dc:	f44f 7460 	mov.w	r4, #896	; 0x380
   da7e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da7e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da7e8:	e720      	b.n	da62c <__adddf3+0x138>
   da7ea:	bf00      	nop

000da7ec <__aeabi_ul2d>:
   da7ec:	ea50 0201 	orrs.w	r2, r0, r1
   da7f0:	bf08      	it	eq
   da7f2:	4770      	bxeq	lr
   da7f4:	b530      	push	{r4, r5, lr}
   da7f6:	f04f 0500 	mov.w	r5, #0
   da7fa:	e00a      	b.n	da812 <__aeabi_l2d+0x16>

000da7fc <__aeabi_l2d>:
   da7fc:	ea50 0201 	orrs.w	r2, r0, r1
   da800:	bf08      	it	eq
   da802:	4770      	bxeq	lr
   da804:	b530      	push	{r4, r5, lr}
   da806:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da80a:	d502      	bpl.n	da812 <__aeabi_l2d+0x16>
   da80c:	4240      	negs	r0, r0
   da80e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da812:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da816:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da81a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da81e:	f43f aedc 	beq.w	da5da <__adddf3+0xe6>
   da822:	f04f 0203 	mov.w	r2, #3
   da826:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da82a:	bf18      	it	ne
   da82c:	3203      	addne	r2, #3
   da82e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da832:	bf18      	it	ne
   da834:	3203      	addne	r2, #3
   da836:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da83a:	f1c2 0320 	rsb	r3, r2, #32
   da83e:	fa00 fc03 	lsl.w	ip, r0, r3
   da842:	fa20 f002 	lsr.w	r0, r0, r2
   da846:	fa01 fe03 	lsl.w	lr, r1, r3
   da84a:	ea40 000e 	orr.w	r0, r0, lr
   da84e:	fa21 f102 	lsr.w	r1, r1, r2
   da852:	4414      	add	r4, r2
   da854:	e6c1      	b.n	da5da <__adddf3+0xe6>
   da856:	bf00      	nop

000da858 <__aeabi_dmul>:
   da858:	b570      	push	{r4, r5, r6, lr}
   da85a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da85e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da862:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da866:	bf1d      	ittte	ne
   da868:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da86c:	ea94 0f0c 	teqne	r4, ip
   da870:	ea95 0f0c 	teqne	r5, ip
   da874:	f000 f8de 	bleq	daa34 <__aeabi_dmul+0x1dc>
   da878:	442c      	add	r4, r5
   da87a:	ea81 0603 	eor.w	r6, r1, r3
   da87e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da882:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da886:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da88a:	bf18      	it	ne
   da88c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da898:	d038      	beq.n	da90c <__aeabi_dmul+0xb4>
   da89a:	fba0 ce02 	umull	ip, lr, r0, r2
   da89e:	f04f 0500 	mov.w	r5, #0
   da8a2:	fbe1 e502 	umlal	lr, r5, r1, r2
   da8a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da8aa:	fbe0 e503 	umlal	lr, r5, r0, r3
   da8ae:	f04f 0600 	mov.w	r6, #0
   da8b2:	fbe1 5603 	umlal	r5, r6, r1, r3
   da8b6:	f09c 0f00 	teq	ip, #0
   da8ba:	bf18      	it	ne
   da8bc:	f04e 0e01 	orrne.w	lr, lr, #1
   da8c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da8c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da8c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da8cc:	d204      	bcs.n	da8d8 <__aeabi_dmul+0x80>
   da8ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da8d2:	416d      	adcs	r5, r5
   da8d4:	eb46 0606 	adc.w	r6, r6, r6
   da8d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da8dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da8e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da8e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da8e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da8ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da8f0:	bf88      	it	hi
   da8f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da8f6:	d81e      	bhi.n	da936 <__aeabi_dmul+0xde>
   da8f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da8fc:	bf08      	it	eq
   da8fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da902:	f150 0000 	adcs.w	r0, r0, #0
   da906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da90a:	bd70      	pop	{r4, r5, r6, pc}
   da90c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da910:	ea46 0101 	orr.w	r1, r6, r1
   da914:	ea40 0002 	orr.w	r0, r0, r2
   da918:	ea81 0103 	eor.w	r1, r1, r3
   da91c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da920:	bfc2      	ittt	gt
   da922:	ebd4 050c 	rsbsgt	r5, r4, ip
   da926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da92a:	bd70      	popgt	{r4, r5, r6, pc}
   da92c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da930:	f04f 0e00 	mov.w	lr, #0
   da934:	3c01      	subs	r4, #1
   da936:	f300 80ab 	bgt.w	daa90 <__aeabi_dmul+0x238>
   da93a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da93e:	bfde      	ittt	le
   da940:	2000      	movle	r0, #0
   da942:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da946:	bd70      	pople	{r4, r5, r6, pc}
   da948:	f1c4 0400 	rsb	r4, r4, #0
   da94c:	3c20      	subs	r4, #32
   da94e:	da35      	bge.n	da9bc <__aeabi_dmul+0x164>
   da950:	340c      	adds	r4, #12
   da952:	dc1b      	bgt.n	da98c <__aeabi_dmul+0x134>
   da954:	f104 0414 	add.w	r4, r4, #20
   da958:	f1c4 0520 	rsb	r5, r4, #32
   da95c:	fa00 f305 	lsl.w	r3, r0, r5
   da960:	fa20 f004 	lsr.w	r0, r0, r4
   da964:	fa01 f205 	lsl.w	r2, r1, r5
   da968:	ea40 0002 	orr.w	r0, r0, r2
   da96c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da978:	fa21 f604 	lsr.w	r6, r1, r4
   da97c:	eb42 0106 	adc.w	r1, r2, r6
   da980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da984:	bf08      	it	eq
   da986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da98a:	bd70      	pop	{r4, r5, r6, pc}
   da98c:	f1c4 040c 	rsb	r4, r4, #12
   da990:	f1c4 0520 	rsb	r5, r4, #32
   da994:	fa00 f304 	lsl.w	r3, r0, r4
   da998:	fa20 f005 	lsr.w	r0, r0, r5
   da99c:	fa01 f204 	lsl.w	r2, r1, r4
   da9a0:	ea40 0002 	orr.w	r0, r0, r2
   da9a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da9ac:	f141 0100 	adc.w	r1, r1, #0
   da9b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da9b4:	bf08      	it	eq
   da9b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da9ba:	bd70      	pop	{r4, r5, r6, pc}
   da9bc:	f1c4 0520 	rsb	r5, r4, #32
   da9c0:	fa00 f205 	lsl.w	r2, r0, r5
   da9c4:	ea4e 0e02 	orr.w	lr, lr, r2
   da9c8:	fa20 f304 	lsr.w	r3, r0, r4
   da9cc:	fa01 f205 	lsl.w	r2, r1, r5
   da9d0:	ea43 0302 	orr.w	r3, r3, r2
   da9d4:	fa21 f004 	lsr.w	r0, r1, r4
   da9d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9dc:	fa21 f204 	lsr.w	r2, r1, r4
   da9e0:	ea20 0002 	bic.w	r0, r0, r2
   da9e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da9e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da9ec:	bf08      	it	eq
   da9ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da9f2:	bd70      	pop	{r4, r5, r6, pc}
   da9f4:	f094 0f00 	teq	r4, #0
   da9f8:	d10f      	bne.n	daa1a <__aeabi_dmul+0x1c2>
   da9fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da9fe:	0040      	lsls	r0, r0, #1
   daa00:	eb41 0101 	adc.w	r1, r1, r1
   daa04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daa08:	bf08      	it	eq
   daa0a:	3c01      	subeq	r4, #1
   daa0c:	d0f7      	beq.n	da9fe <__aeabi_dmul+0x1a6>
   daa0e:	ea41 0106 	orr.w	r1, r1, r6
   daa12:	f095 0f00 	teq	r5, #0
   daa16:	bf18      	it	ne
   daa18:	4770      	bxne	lr
   daa1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   daa1e:	0052      	lsls	r2, r2, #1
   daa20:	eb43 0303 	adc.w	r3, r3, r3
   daa24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   daa28:	bf08      	it	eq
   daa2a:	3d01      	subeq	r5, #1
   daa2c:	d0f7      	beq.n	daa1e <__aeabi_dmul+0x1c6>
   daa2e:	ea43 0306 	orr.w	r3, r3, r6
   daa32:	4770      	bx	lr
   daa34:	ea94 0f0c 	teq	r4, ip
   daa38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   daa3c:	bf18      	it	ne
   daa3e:	ea95 0f0c 	teqne	r5, ip
   daa42:	d00c      	beq.n	daa5e <__aeabi_dmul+0x206>
   daa44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa48:	bf18      	it	ne
   daa4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa4e:	d1d1      	bne.n	da9f4 <__aeabi_dmul+0x19c>
   daa50:	ea81 0103 	eor.w	r1, r1, r3
   daa54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa58:	f04f 0000 	mov.w	r0, #0
   daa5c:	bd70      	pop	{r4, r5, r6, pc}
   daa5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa62:	bf06      	itte	eq
   daa64:	4610      	moveq	r0, r2
   daa66:	4619      	moveq	r1, r3
   daa68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa6c:	d019      	beq.n	daaa2 <__aeabi_dmul+0x24a>
   daa6e:	ea94 0f0c 	teq	r4, ip
   daa72:	d102      	bne.n	daa7a <__aeabi_dmul+0x222>
   daa74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa78:	d113      	bne.n	daaa2 <__aeabi_dmul+0x24a>
   daa7a:	ea95 0f0c 	teq	r5, ip
   daa7e:	d105      	bne.n	daa8c <__aeabi_dmul+0x234>
   daa80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa84:	bf1c      	itt	ne
   daa86:	4610      	movne	r0, r2
   daa88:	4619      	movne	r1, r3
   daa8a:	d10a      	bne.n	daaa2 <__aeabi_dmul+0x24a>
   daa8c:	ea81 0103 	eor.w	r1, r1, r3
   daa90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa9c:	f04f 0000 	mov.w	r0, #0
   daaa0:	bd70      	pop	{r4, r5, r6, pc}
   daaa2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daaa6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daaaa:	bd70      	pop	{r4, r5, r6, pc}

000daaac <__aeabi_ddiv>:
   daaac:	b570      	push	{r4, r5, r6, lr}
   daaae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daaba:	bf1d      	ittte	ne
   daabc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daac0:	ea94 0f0c 	teqne	r4, ip
   daac4:	ea95 0f0c 	teqne	r5, ip
   daac8:	f000 f8a7 	bleq	dac1a <__aeabi_ddiv+0x16e>
   daacc:	eba4 0405 	sub.w	r4, r4, r5
   daad0:	ea81 0e03 	eor.w	lr, r1, r3
   daad4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daadc:	f000 8088 	beq.w	dabf0 <__aeabi_ddiv+0x144>
   daae0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daae4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daae8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daaec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daaf0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daaf4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daaf8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daafc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dab00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dab04:	429d      	cmp	r5, r3
   dab06:	bf08      	it	eq
   dab08:	4296      	cmpeq	r6, r2
   dab0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dab0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dab12:	d202      	bcs.n	dab1a <__aeabi_ddiv+0x6e>
   dab14:	085b      	lsrs	r3, r3, #1
   dab16:	ea4f 0232 	mov.w	r2, r2, rrx
   dab1a:	1ab6      	subs	r6, r6, r2
   dab1c:	eb65 0503 	sbc.w	r5, r5, r3
   dab20:	085b      	lsrs	r3, r3, #1
   dab22:	ea4f 0232 	mov.w	r2, r2, rrx
   dab26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dab2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dab2e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab32:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab36:	bf22      	ittt	cs
   dab38:	1ab6      	subcs	r6, r6, r2
   dab3a:	4675      	movcs	r5, lr
   dab3c:	ea40 000c 	orrcs.w	r0, r0, ip
   dab40:	085b      	lsrs	r3, r3, #1
   dab42:	ea4f 0232 	mov.w	r2, r2, rrx
   dab46:	ebb6 0e02 	subs.w	lr, r6, r2
   dab4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab4e:	bf22      	ittt	cs
   dab50:	1ab6      	subcs	r6, r6, r2
   dab52:	4675      	movcs	r5, lr
   dab54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dab58:	085b      	lsrs	r3, r3, #1
   dab5a:	ea4f 0232 	mov.w	r2, r2, rrx
   dab5e:	ebb6 0e02 	subs.w	lr, r6, r2
   dab62:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab66:	bf22      	ittt	cs
   dab68:	1ab6      	subcs	r6, r6, r2
   dab6a:	4675      	movcs	r5, lr
   dab6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab70:	085b      	lsrs	r3, r3, #1
   dab72:	ea4f 0232 	mov.w	r2, r2, rrx
   dab76:	ebb6 0e02 	subs.w	lr, r6, r2
   dab7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab7e:	bf22      	ittt	cs
   dab80:	1ab6      	subcs	r6, r6, r2
   dab82:	4675      	movcs	r5, lr
   dab84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab88:	ea55 0e06 	orrs.w	lr, r5, r6
   dab8c:	d018      	beq.n	dabc0 <__aeabi_ddiv+0x114>
   dab8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab96:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   daba2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   daba6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dabaa:	d1c0      	bne.n	dab2e <__aeabi_ddiv+0x82>
   dabac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dabb0:	d10b      	bne.n	dabca <__aeabi_ddiv+0x11e>
   dabb2:	ea41 0100 	orr.w	r1, r1, r0
   dabb6:	f04f 0000 	mov.w	r0, #0
   dabba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dabbe:	e7b6      	b.n	dab2e <__aeabi_ddiv+0x82>
   dabc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dabc4:	bf04      	itt	eq
   dabc6:	4301      	orreq	r1, r0
   dabc8:	2000      	moveq	r0, #0
   dabca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dabce:	bf88      	it	hi
   dabd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dabd4:	f63f aeaf 	bhi.w	da936 <__aeabi_dmul+0xde>
   dabd8:	ebb5 0c03 	subs.w	ip, r5, r3
   dabdc:	bf04      	itt	eq
   dabde:	ebb6 0c02 	subseq.w	ip, r6, r2
   dabe2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dabe6:	f150 0000 	adcs.w	r0, r0, #0
   dabea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dabee:	bd70      	pop	{r4, r5, r6, pc}
   dabf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dabf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dabf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dabfc:	bfc2      	ittt	gt
   dabfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   dac02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dac06:	bd70      	popgt	{r4, r5, r6, pc}
   dac08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac0c:	f04f 0e00 	mov.w	lr, #0
   dac10:	3c01      	subs	r4, #1
   dac12:	e690      	b.n	da936 <__aeabi_dmul+0xde>
   dac14:	ea45 0e06 	orr.w	lr, r5, r6
   dac18:	e68d      	b.n	da936 <__aeabi_dmul+0xde>
   dac1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dac1e:	ea94 0f0c 	teq	r4, ip
   dac22:	bf08      	it	eq
   dac24:	ea95 0f0c 	teqeq	r5, ip
   dac28:	f43f af3b 	beq.w	daaa2 <__aeabi_dmul+0x24a>
   dac2c:	ea94 0f0c 	teq	r4, ip
   dac30:	d10a      	bne.n	dac48 <__aeabi_ddiv+0x19c>
   dac32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dac36:	f47f af34 	bne.w	daaa2 <__aeabi_dmul+0x24a>
   dac3a:	ea95 0f0c 	teq	r5, ip
   dac3e:	f47f af25 	bne.w	daa8c <__aeabi_dmul+0x234>
   dac42:	4610      	mov	r0, r2
   dac44:	4619      	mov	r1, r3
   dac46:	e72c      	b.n	daaa2 <__aeabi_dmul+0x24a>
   dac48:	ea95 0f0c 	teq	r5, ip
   dac4c:	d106      	bne.n	dac5c <__aeabi_ddiv+0x1b0>
   dac4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dac52:	f43f aefd 	beq.w	daa50 <__aeabi_dmul+0x1f8>
   dac56:	4610      	mov	r0, r2
   dac58:	4619      	mov	r1, r3
   dac5a:	e722      	b.n	daaa2 <__aeabi_dmul+0x24a>
   dac5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac60:	bf18      	it	ne
   dac62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac66:	f47f aec5 	bne.w	da9f4 <__aeabi_dmul+0x19c>
   dac6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dac6e:	f47f af0d 	bne.w	daa8c <__aeabi_dmul+0x234>
   dac72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac76:	f47f aeeb 	bne.w	daa50 <__aeabi_dmul+0x1f8>
   dac7a:	e712      	b.n	daaa2 <__aeabi_dmul+0x24a>

000dac7c <__gedf2>:
   dac7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dac80:	e006      	b.n	dac90 <__cmpdf2+0x4>
   dac82:	bf00      	nop

000dac84 <__ledf2>:
   dac84:	f04f 0c01 	mov.w	ip, #1
   dac88:	e002      	b.n	dac90 <__cmpdf2+0x4>
   dac8a:	bf00      	nop

000dac8c <__cmpdf2>:
   dac8c:	f04f 0c01 	mov.w	ip, #1
   dac90:	f84d cd04 	str.w	ip, [sp, #-4]!
   dac94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daca0:	bf18      	it	ne
   daca2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   daca6:	d01b      	beq.n	dace0 <__cmpdf2+0x54>
   daca8:	b001      	add	sp, #4
   dacaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dacae:	bf0c      	ite	eq
   dacb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dacb4:	ea91 0f03 	teqne	r1, r3
   dacb8:	bf02      	ittt	eq
   dacba:	ea90 0f02 	teqeq	r0, r2
   dacbe:	2000      	moveq	r0, #0
   dacc0:	4770      	bxeq	lr
   dacc2:	f110 0f00 	cmn.w	r0, #0
   dacc6:	ea91 0f03 	teq	r1, r3
   dacca:	bf58      	it	pl
   daccc:	4299      	cmppl	r1, r3
   dacce:	bf08      	it	eq
   dacd0:	4290      	cmpeq	r0, r2
   dacd2:	bf2c      	ite	cs
   dacd4:	17d8      	asrcs	r0, r3, #31
   dacd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dacda:	f040 0001 	orr.w	r0, r0, #1
   dacde:	4770      	bx	lr
   dace0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dace4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dace8:	d102      	bne.n	dacf0 <__cmpdf2+0x64>
   dacea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dacee:	d107      	bne.n	dad00 <__cmpdf2+0x74>
   dacf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dacf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacf8:	d1d6      	bne.n	daca8 <__cmpdf2+0x1c>
   dacfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dacfe:	d0d3      	beq.n	daca8 <__cmpdf2+0x1c>
   dad00:	f85d 0b04 	ldr.w	r0, [sp], #4
   dad04:	4770      	bx	lr
   dad06:	bf00      	nop

000dad08 <__aeabi_cdrcmple>:
   dad08:	4684      	mov	ip, r0
   dad0a:	4610      	mov	r0, r2
   dad0c:	4662      	mov	r2, ip
   dad0e:	468c      	mov	ip, r1
   dad10:	4619      	mov	r1, r3
   dad12:	4663      	mov	r3, ip
   dad14:	e000      	b.n	dad18 <__aeabi_cdcmpeq>
   dad16:	bf00      	nop

000dad18 <__aeabi_cdcmpeq>:
   dad18:	b501      	push	{r0, lr}
   dad1a:	f7ff ffb7 	bl	dac8c <__cmpdf2>
   dad1e:	2800      	cmp	r0, #0
   dad20:	bf48      	it	mi
   dad22:	f110 0f00 	cmnmi.w	r0, #0
   dad26:	bd01      	pop	{r0, pc}

000dad28 <__aeabi_dcmpeq>:
   dad28:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad2c:	f7ff fff4 	bl	dad18 <__aeabi_cdcmpeq>
   dad30:	bf0c      	ite	eq
   dad32:	2001      	moveq	r0, #1
   dad34:	2000      	movne	r0, #0
   dad36:	f85d fb08 	ldr.w	pc, [sp], #8
   dad3a:	bf00      	nop

000dad3c <__aeabi_dcmplt>:
   dad3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad40:	f7ff ffea 	bl	dad18 <__aeabi_cdcmpeq>
   dad44:	bf34      	ite	cc
   dad46:	2001      	movcc	r0, #1
   dad48:	2000      	movcs	r0, #0
   dad4a:	f85d fb08 	ldr.w	pc, [sp], #8
   dad4e:	bf00      	nop

000dad50 <__aeabi_dcmple>:
   dad50:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad54:	f7ff ffe0 	bl	dad18 <__aeabi_cdcmpeq>
   dad58:	bf94      	ite	ls
   dad5a:	2001      	movls	r0, #1
   dad5c:	2000      	movhi	r0, #0
   dad5e:	f85d fb08 	ldr.w	pc, [sp], #8
   dad62:	bf00      	nop

000dad64 <__aeabi_dcmpge>:
   dad64:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad68:	f7ff ffce 	bl	dad08 <__aeabi_cdrcmple>
   dad6c:	bf94      	ite	ls
   dad6e:	2001      	movls	r0, #1
   dad70:	2000      	movhi	r0, #0
   dad72:	f85d fb08 	ldr.w	pc, [sp], #8
   dad76:	bf00      	nop

000dad78 <__aeabi_dcmpgt>:
   dad78:	f84d ed08 	str.w	lr, [sp, #-8]!
   dad7c:	f7ff ffc4 	bl	dad08 <__aeabi_cdrcmple>
   dad80:	bf34      	ite	cc
   dad82:	2001      	movcc	r0, #1
   dad84:	2000      	movcs	r0, #0
   dad86:	f85d fb08 	ldr.w	pc, [sp], #8
   dad8a:	bf00      	nop

000dad8c <__aeabi_dcmpun>:
   dad8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dad90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dad94:	d102      	bne.n	dad9c <__aeabi_dcmpun+0x10>
   dad96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dad9a:	d10a      	bne.n	dadb2 <__aeabi_dcmpun+0x26>
   dad9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dada0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dada4:	d102      	bne.n	dadac <__aeabi_dcmpun+0x20>
   dada6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dadaa:	d102      	bne.n	dadb2 <__aeabi_dcmpun+0x26>
   dadac:	f04f 0000 	mov.w	r0, #0
   dadb0:	4770      	bx	lr
   dadb2:	f04f 0001 	mov.w	r0, #1
   dadb6:	4770      	bx	lr

000dadb8 <__aeabi_d2iz>:
   dadb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dadbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dadc0:	d215      	bcs.n	dadee <__aeabi_d2iz+0x36>
   dadc2:	d511      	bpl.n	dade8 <__aeabi_d2iz+0x30>
   dadc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dadc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dadcc:	d912      	bls.n	dadf4 <__aeabi_d2iz+0x3c>
   dadce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dadd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dadda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dadde:	fa23 f002 	lsr.w	r0, r3, r2
   dade2:	bf18      	it	ne
   dade4:	4240      	negne	r0, r0
   dade6:	4770      	bx	lr
   dade8:	f04f 0000 	mov.w	r0, #0
   dadec:	4770      	bx	lr
   dadee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dadf2:	d105      	bne.n	dae00 <__aeabi_d2iz+0x48>
   dadf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dadf8:	bf08      	it	eq
   dadfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dadfe:	4770      	bx	lr
   dae00:	f04f 0000 	mov.w	r0, #0
   dae04:	4770      	bx	lr
   dae06:	bf00      	nop

000dae08 <__aeabi_d2uiz>:
   dae08:	004a      	lsls	r2, r1, #1
   dae0a:	d211      	bcs.n	dae30 <__aeabi_d2uiz+0x28>
   dae0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dae10:	d211      	bcs.n	dae36 <__aeabi_d2uiz+0x2e>
   dae12:	d50d      	bpl.n	dae30 <__aeabi_d2uiz+0x28>
   dae14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dae18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dae1c:	d40e      	bmi.n	dae3c <__aeabi_d2uiz+0x34>
   dae1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dae22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dae26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dae2a:	fa23 f002 	lsr.w	r0, r3, r2
   dae2e:	4770      	bx	lr
   dae30:	f04f 0000 	mov.w	r0, #0
   dae34:	4770      	bx	lr
   dae36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dae3a:	d102      	bne.n	dae42 <__aeabi_d2uiz+0x3a>
   dae3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dae40:	4770      	bx	lr
   dae42:	f04f 0000 	mov.w	r0, #0
   dae46:	4770      	bx	lr

000dae48 <__aeabi_d2f>:
   dae48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dae4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dae50:	bf24      	itt	cs
   dae52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dae56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dae5a:	d90d      	bls.n	dae78 <__aeabi_d2f+0x30>
   dae5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dae60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dae64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dae68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dae6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dae70:	bf08      	it	eq
   dae72:	f020 0001 	biceq.w	r0, r0, #1
   dae76:	4770      	bx	lr
   dae78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dae7c:	d121      	bne.n	daec2 <__aeabi_d2f+0x7a>
   dae7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dae82:	bfbc      	itt	lt
   dae84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dae88:	4770      	bxlt	lr
   dae8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dae8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dae92:	f1c2 0218 	rsb	r2, r2, #24
   dae96:	f1c2 0c20 	rsb	ip, r2, #32
   dae9a:	fa10 f30c 	lsls.w	r3, r0, ip
   dae9e:	fa20 f002 	lsr.w	r0, r0, r2
   daea2:	bf18      	it	ne
   daea4:	f040 0001 	orrne.w	r0, r0, #1
   daea8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daeac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   daeb0:	fa03 fc0c 	lsl.w	ip, r3, ip
   daeb4:	ea40 000c 	orr.w	r0, r0, ip
   daeb8:	fa23 f302 	lsr.w	r3, r3, r2
   daebc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   daec0:	e7cc      	b.n	dae5c <__aeabi_d2f+0x14>
   daec2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   daec6:	d107      	bne.n	daed8 <__aeabi_d2f+0x90>
   daec8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   daecc:	bf1e      	ittt	ne
   daece:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   daed2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   daed6:	4770      	bxne	lr
   daed8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   daedc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   daee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   daee4:	4770      	bx	lr
   daee6:	bf00      	nop

000daee8 <asctime>:
   daee8:	4b09      	ldr	r3, [pc, #36]	; (daf10 <asctime+0x28>)
   daeea:	b570      	push	{r4, r5, r6, lr}
   daeec:	681c      	ldr	r4, [r3, #0]
   daeee:	6c25      	ldr	r5, [r4, #64]	; 0x40
   daef0:	4606      	mov	r6, r0
   daef2:	b93d      	cbnz	r5, daf04 <asctime+0x1c>
   daef4:	201a      	movs	r0, #26
   daef6:	f7fd fa63 	bl	d83c0 <malloc>
   daefa:	221a      	movs	r2, #26
   daefc:	6420      	str	r0, [r4, #64]	; 0x40
   daefe:	4629      	mov	r1, r5
   daf00:	f000 fa0c 	bl	db31c <memset>
   daf04:	6c21      	ldr	r1, [r4, #64]	; 0x40
   daf06:	4630      	mov	r0, r6
   daf08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   daf0c:	f000 b802 	b.w	daf14 <asctime_r>
   daf10:	2003de54 	.word	0x2003de54

000daf14 <asctime_r>:
   daf14:	b510      	push	{r4, lr}
   daf16:	460c      	mov	r4, r1
   daf18:	6941      	ldr	r1, [r0, #20]
   daf1a:	6903      	ldr	r3, [r0, #16]
   daf1c:	6982      	ldr	r2, [r0, #24]
   daf1e:	b086      	sub	sp, #24
   daf20:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daf24:	9104      	str	r1, [sp, #16]
   daf26:	6801      	ldr	r1, [r0, #0]
   daf28:	9103      	str	r1, [sp, #12]
   daf2a:	6841      	ldr	r1, [r0, #4]
   daf2c:	9102      	str	r1, [sp, #8]
   daf2e:	6881      	ldr	r1, [r0, #8]
   daf30:	9101      	str	r1, [sp, #4]
   daf32:	68c1      	ldr	r1, [r0, #12]
   daf34:	9100      	str	r1, [sp, #0]
   daf36:	4907      	ldr	r1, [pc, #28]	; (daf54 <asctime_r+0x40>)
   daf38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daf3c:	440b      	add	r3, r1
   daf3e:	4906      	ldr	r1, [pc, #24]	; (daf58 <asctime_r+0x44>)
   daf40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daf44:	440a      	add	r2, r1
   daf46:	4620      	mov	r0, r4
   daf48:	4904      	ldr	r1, [pc, #16]	; (daf5c <asctime_r+0x48>)
   daf4a:	f7fd fa51 	bl	d83f0 <siprintf>
   daf4e:	4620      	mov	r0, r4
   daf50:	b006      	add	sp, #24
   daf52:	bd10      	pop	{r4, pc}
   daf54:	000dda06 	.word	0x000dda06
   daf58:	000dd9f1 	.word	0x000dd9f1
   daf5c:	000dda2a 	.word	0x000dda2a

000daf60 <atoi>:
   daf60:	220a      	movs	r2, #10
   daf62:	2100      	movs	r1, #0
   daf64:	f001 ba50 	b.w	dc408 <strtol>

000daf68 <atol>:
   daf68:	220a      	movs	r2, #10
   daf6a:	2100      	movs	r1, #0
   daf6c:	f001 ba4c 	b.w	dc408 <strtol>

000daf70 <__cxa_atexit>:
   daf70:	b510      	push	{r4, lr}
   daf72:	4c05      	ldr	r4, [pc, #20]	; (daf88 <__cxa_atexit+0x18>)
   daf74:	4613      	mov	r3, r2
   daf76:	b12c      	cbz	r4, daf84 <__cxa_atexit+0x14>
   daf78:	460a      	mov	r2, r1
   daf7a:	4601      	mov	r1, r0
   daf7c:	2002      	movs	r0, #2
   daf7e:	f3af 8000 	nop.w
   daf82:	bd10      	pop	{r4, pc}
   daf84:	4620      	mov	r0, r4
   daf86:	bd10      	pop	{r4, pc}
   daf88:	00000000 	.word	0x00000000

000daf8c <gmtime>:
   daf8c:	b538      	push	{r3, r4, r5, lr}
   daf8e:	4b07      	ldr	r3, [pc, #28]	; (dafac <gmtime+0x20>)
   daf90:	681c      	ldr	r4, [r3, #0]
   daf92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daf94:	4605      	mov	r5, r0
   daf96:	b91b      	cbnz	r3, dafa0 <gmtime+0x14>
   daf98:	2024      	movs	r0, #36	; 0x24
   daf9a:	f7fd fa11 	bl	d83c0 <malloc>
   daf9e:	63e0      	str	r0, [r4, #60]	; 0x3c
   dafa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dafa2:	4628      	mov	r0, r5
   dafa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dafa8:	f000 b802 	b.w	dafb0 <gmtime_r>
   dafac:	2003de54 	.word	0x2003de54

000dafb0 <gmtime_r>:
   dafb0:	6802      	ldr	r2, [r0, #0]
   dafb2:	4b47      	ldr	r3, [pc, #284]	; (db0d0 <gmtime_r+0x120>)
   dafb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafb6:	fb92 f4f3 	sdiv	r4, r2, r3
   dafba:	fb03 2214 	mls	r2, r3, r4, r2
   dafbe:	2a00      	cmp	r2, #0
   dafc0:	bfbc      	itt	lt
   dafc2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   dafc6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   dafca:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   dafce:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   dafd2:	fb92 f3f0 	sdiv	r3, r2, r0
   dafd6:	fb00 2213 	mls	r2, r0, r3, r2
   dafda:	f04f 003c 	mov.w	r0, #60	; 0x3c
   dafde:	bfac      	ite	ge
   dafe0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   dafe4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   dafe8:	608b      	str	r3, [r1, #8]
   dafea:	fb92 f3f0 	sdiv	r3, r2, r0
   dafee:	fb00 2213 	mls	r2, r0, r3, r2
   daff2:	604b      	str	r3, [r1, #4]
   daff4:	600a      	str	r2, [r1, #0]
   daff6:	2307      	movs	r3, #7
   daff8:	1ce2      	adds	r2, r4, #3
   daffa:	fb92 f3f3 	sdiv	r3, r2, r3
   daffe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db002:	1ad3      	subs	r3, r2, r3
   db004:	618b      	str	r3, [r1, #24]
   db006:	4b33      	ldr	r3, [pc, #204]	; (db0d4 <gmtime_r+0x124>)
   db008:	4d33      	ldr	r5, [pc, #204]	; (db0d8 <gmtime_r+0x128>)
   db00a:	fb94 f5f5 	sdiv	r5, r4, r5
   db00e:	fb03 4405 	mla	r4, r3, r5, r4
   db012:	f648 62ac 	movw	r2, #36524	; 0x8eac
   db016:	fbb4 f2f2 	udiv	r2, r4, r2
   db01a:	4422      	add	r2, r4
   db01c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   db020:	fbb4 f3f7 	udiv	r3, r4, r7
   db024:	1ad2      	subs	r2, r2, r3
   db026:	482d      	ldr	r0, [pc, #180]	; (db0dc <gmtime_r+0x12c>)
   db028:	fbb4 f0f0 	udiv	r0, r4, r0
   db02c:	f648 6694 	movw	r6, #36500	; 0x8e94
   db030:	1a13      	subs	r3, r2, r0
   db032:	fbb3 f6f6 	udiv	r6, r3, r6
   db036:	4434      	add	r4, r6
   db038:	f240 126d 	movw	r2, #365	; 0x16d
   db03c:	fbb3 f0f2 	udiv	r0, r3, r2
   db040:	fbb3 f3f7 	udiv	r3, r3, r7
   db044:	1ae3      	subs	r3, r4, r3
   db046:	fb02 3310 	mls	r3, r2, r0, r3
   db04a:	2499      	movs	r4, #153	; 0x99
   db04c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   db050:	3202      	adds	r2, #2
   db052:	fbb2 f2f4 	udiv	r2, r2, r4
   db056:	2a0a      	cmp	r2, #10
   db058:	fb04 f402 	mul.w	r4, r4, r2
   db05c:	f104 0602 	add.w	r6, r4, #2
   db060:	f04f 0405 	mov.w	r4, #5
   db064:	fbb6 f4f4 	udiv	r4, r6, r4
   db068:	bf34      	ite	cc
   db06a:	2602      	movcc	r6, #2
   db06c:	f06f 0609 	mvncs.w	r6, #9
   db070:	4416      	add	r6, r2
   db072:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db076:	fb02 0505 	mla	r5, r2, r5, r0
   db07a:	1c5f      	adds	r7, r3, #1
   db07c:	2e01      	cmp	r6, #1
   db07e:	bf98      	it	ls
   db080:	3501      	addls	r5, #1
   db082:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   db086:	eba7 0704 	sub.w	r7, r7, r4
   db08a:	d302      	bcc.n	db092 <gmtime_r+0xe2>
   db08c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   db090:	e014      	b.n	db0bc <gmtime_r+0x10c>
   db092:	0782      	lsls	r2, r0, #30
   db094:	d105      	bne.n	db0a2 <gmtime_r+0xf2>
   db096:	2464      	movs	r4, #100	; 0x64
   db098:	fbb0 f2f4 	udiv	r2, r0, r4
   db09c:	fb04 0212 	mls	r2, r4, r2, r0
   db0a0:	b94a      	cbnz	r2, db0b6 <gmtime_r+0x106>
   db0a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db0a6:	fbb0 f4f2 	udiv	r4, r0, r2
   db0aa:	fb02 0014 	mls	r0, r2, r4, r0
   db0ae:	fab0 f280 	clz	r2, r0
   db0b2:	0952      	lsrs	r2, r2, #5
   db0b4:	e000      	b.n	db0b8 <gmtime_r+0x108>
   db0b6:	2201      	movs	r2, #1
   db0b8:	333b      	adds	r3, #59	; 0x3b
   db0ba:	441a      	add	r2, r3
   db0bc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   db0c0:	2300      	movs	r3, #0
   db0c2:	61ca      	str	r2, [r1, #28]
   db0c4:	614d      	str	r5, [r1, #20]
   db0c6:	610e      	str	r6, [r1, #16]
   db0c8:	60cf      	str	r7, [r1, #12]
   db0ca:	620b      	str	r3, [r1, #32]
   db0cc:	4608      	mov	r0, r1
   db0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0d0:	00015180 	.word	0x00015180
   db0d4:	fffdc54f 	.word	0xfffdc54f
   db0d8:	00023ab1 	.word	0x00023ab1
   db0dc:	00023ab0 	.word	0x00023ab0

000db0e0 <localtime>:
   db0e0:	b538      	push	{r3, r4, r5, lr}
   db0e2:	4b07      	ldr	r3, [pc, #28]	; (db100 <localtime+0x20>)
   db0e4:	681c      	ldr	r4, [r3, #0]
   db0e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db0e8:	4605      	mov	r5, r0
   db0ea:	b91b      	cbnz	r3, db0f4 <localtime+0x14>
   db0ec:	2024      	movs	r0, #36	; 0x24
   db0ee:	f7fd f967 	bl	d83c0 <malloc>
   db0f2:	63e0      	str	r0, [r4, #60]	; 0x3c
   db0f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db0f6:	4628      	mov	r0, r5
   db0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db0fc:	f000 b802 	b.w	db104 <localtime_r>
   db100:	2003de54 	.word	0x2003de54

000db104 <localtime_r>:
   db104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db108:	460c      	mov	r4, r1
   db10a:	4680      	mov	r8, r0
   db10c:	f001 fcaa 	bl	dca64 <__gettzinfo>
   db110:	4621      	mov	r1, r4
   db112:	4607      	mov	r7, r0
   db114:	4640      	mov	r0, r8
   db116:	f7ff ff4b 	bl	dafb0 <gmtime_r>
   db11a:	6946      	ldr	r6, [r0, #20]
   db11c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db120:	07b3      	lsls	r3, r6, #30
   db122:	4604      	mov	r4, r0
   db124:	d105      	bne.n	db132 <localtime_r+0x2e>
   db126:	2264      	movs	r2, #100	; 0x64
   db128:	fb96 f3f2 	sdiv	r3, r6, r2
   db12c:	fb02 6313 	mls	r3, r2, r3, r6
   db130:	b94b      	cbnz	r3, db146 <localtime_r+0x42>
   db132:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db136:	fb96 f3f5 	sdiv	r3, r6, r5
   db13a:	fb05 6513 	mls	r5, r5, r3, r6
   db13e:	fab5 f385 	clz	r3, r5
   db142:	095b      	lsrs	r3, r3, #5
   db144:	e000      	b.n	db148 <localtime_r+0x44>
   db146:	2301      	movs	r3, #1
   db148:	4a5f      	ldr	r2, [pc, #380]	; (db2c8 <localtime_r+0x1c4>)
   db14a:	2530      	movs	r5, #48	; 0x30
   db14c:	fb05 2503 	mla	r5, r5, r3, r2
   db150:	f001 faa4 	bl	dc69c <__tz_lock>
   db154:	f001 faa4 	bl	dc6a0 <_tzset_unlocked>
   db158:	4b5c      	ldr	r3, [pc, #368]	; (db2cc <localtime_r+0x1c8>)
   db15a:	681b      	ldr	r3, [r3, #0]
   db15c:	b1f3      	cbz	r3, db19c <localtime_r+0x98>
   db15e:	687b      	ldr	r3, [r7, #4]
   db160:	429e      	cmp	r6, r3
   db162:	d105      	bne.n	db170 <localtime_r+0x6c>
   db164:	6839      	ldr	r1, [r7, #0]
   db166:	f8d8 3000 	ldr.w	r3, [r8]
   db16a:	69fa      	ldr	r2, [r7, #28]
   db16c:	b941      	cbnz	r1, db180 <localtime_r+0x7c>
   db16e:	e00a      	b.n	db186 <localtime_r+0x82>
   db170:	4630      	mov	r0, r6
   db172:	f001 f9eb 	bl	dc54c <__tzcalc_limits>
   db176:	2800      	cmp	r0, #0
   db178:	d1f4      	bne.n	db164 <localtime_r+0x60>
   db17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db17e:	e00d      	b.n	db19c <localtime_r+0x98>
   db180:	4293      	cmp	r3, r2
   db182:	db08      	blt.n	db196 <localtime_r+0x92>
   db184:	e001      	b.n	db18a <localtime_r+0x86>
   db186:	4293      	cmp	r3, r2
   db188:	da07      	bge.n	db19a <localtime_r+0x96>
   db18a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db18c:	4293      	cmp	r3, r2
   db18e:	bfac      	ite	ge
   db190:	2300      	movge	r3, #0
   db192:	2301      	movlt	r3, #1
   db194:	e002      	b.n	db19c <localtime_r+0x98>
   db196:	2300      	movs	r3, #0
   db198:	e000      	b.n	db19c <localtime_r+0x98>
   db19a:	2301      	movs	r3, #1
   db19c:	6223      	str	r3, [r4, #32]
   db19e:	6a23      	ldr	r3, [r4, #32]
   db1a0:	2b01      	cmp	r3, #1
   db1a2:	bf0c      	ite	eq
   db1a4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db1a6:	6a39      	ldrne	r1, [r7, #32]
   db1a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db1ac:	203c      	movs	r0, #60	; 0x3c
   db1ae:	fb91 f6f3 	sdiv	r6, r1, r3
   db1b2:	fb03 1316 	mls	r3, r3, r6, r1
   db1b6:	6861      	ldr	r1, [r4, #4]
   db1b8:	fb93 f2f0 	sdiv	r2, r3, r0
   db1bc:	fb00 3012 	mls	r0, r0, r2, r3
   db1c0:	6823      	ldr	r3, [r4, #0]
   db1c2:	1a89      	subs	r1, r1, r2
   db1c4:	68a2      	ldr	r2, [r4, #8]
   db1c6:	6061      	str	r1, [r4, #4]
   db1c8:	1a1b      	subs	r3, r3, r0
   db1ca:	1b92      	subs	r2, r2, r6
   db1cc:	2b3b      	cmp	r3, #59	; 0x3b
   db1ce:	6023      	str	r3, [r4, #0]
   db1d0:	60a2      	str	r2, [r4, #8]
   db1d2:	dd03      	ble.n	db1dc <localtime_r+0xd8>
   db1d4:	3101      	adds	r1, #1
   db1d6:	6061      	str	r1, [r4, #4]
   db1d8:	3b3c      	subs	r3, #60	; 0x3c
   db1da:	e004      	b.n	db1e6 <localtime_r+0xe2>
   db1dc:	2b00      	cmp	r3, #0
   db1de:	da03      	bge.n	db1e8 <localtime_r+0xe4>
   db1e0:	3901      	subs	r1, #1
   db1e2:	6061      	str	r1, [r4, #4]
   db1e4:	333c      	adds	r3, #60	; 0x3c
   db1e6:	6023      	str	r3, [r4, #0]
   db1e8:	6863      	ldr	r3, [r4, #4]
   db1ea:	2b3b      	cmp	r3, #59	; 0x3b
   db1ec:	dd03      	ble.n	db1f6 <localtime_r+0xf2>
   db1ee:	3201      	adds	r2, #1
   db1f0:	60a2      	str	r2, [r4, #8]
   db1f2:	3b3c      	subs	r3, #60	; 0x3c
   db1f4:	e004      	b.n	db200 <localtime_r+0xfc>
   db1f6:	2b00      	cmp	r3, #0
   db1f8:	da03      	bge.n	db202 <localtime_r+0xfe>
   db1fa:	3a01      	subs	r2, #1
   db1fc:	60a2      	str	r2, [r4, #8]
   db1fe:	333c      	adds	r3, #60	; 0x3c
   db200:	6063      	str	r3, [r4, #4]
   db202:	68a3      	ldr	r3, [r4, #8]
   db204:	2b17      	cmp	r3, #23
   db206:	dd22      	ble.n	db24e <localtime_r+0x14a>
   db208:	69e2      	ldr	r2, [r4, #28]
   db20a:	3201      	adds	r2, #1
   db20c:	61e2      	str	r2, [r4, #28]
   db20e:	69a2      	ldr	r2, [r4, #24]
   db210:	3201      	adds	r2, #1
   db212:	2a06      	cmp	r2, #6
   db214:	bfc8      	it	gt
   db216:	2200      	movgt	r2, #0
   db218:	61a2      	str	r2, [r4, #24]
   db21a:	68e2      	ldr	r2, [r4, #12]
   db21c:	3b18      	subs	r3, #24
   db21e:	3201      	adds	r2, #1
   db220:	60a3      	str	r3, [r4, #8]
   db222:	6923      	ldr	r3, [r4, #16]
   db224:	60e2      	str	r2, [r4, #12]
   db226:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db22a:	428a      	cmp	r2, r1
   db22c:	dd46      	ble.n	db2bc <localtime_r+0x1b8>
   db22e:	3301      	adds	r3, #1
   db230:	2b0c      	cmp	r3, #12
   db232:	bf0c      	ite	eq
   db234:	6963      	ldreq	r3, [r4, #20]
   db236:	6123      	strne	r3, [r4, #16]
   db238:	eba2 0201 	sub.w	r2, r2, r1
   db23c:	60e2      	str	r2, [r4, #12]
   db23e:	bf01      	itttt	eq
   db240:	3301      	addeq	r3, #1
   db242:	2200      	moveq	r2, #0
   db244:	6122      	streq	r2, [r4, #16]
   db246:	6163      	streq	r3, [r4, #20]
   db248:	bf08      	it	eq
   db24a:	61e2      	streq	r2, [r4, #28]
   db24c:	e036      	b.n	db2bc <localtime_r+0x1b8>
   db24e:	2b00      	cmp	r3, #0
   db250:	da34      	bge.n	db2bc <localtime_r+0x1b8>
   db252:	69e2      	ldr	r2, [r4, #28]
   db254:	3a01      	subs	r2, #1
   db256:	61e2      	str	r2, [r4, #28]
   db258:	69a2      	ldr	r2, [r4, #24]
   db25a:	3a01      	subs	r2, #1
   db25c:	bf48      	it	mi
   db25e:	2206      	movmi	r2, #6
   db260:	61a2      	str	r2, [r4, #24]
   db262:	68e2      	ldr	r2, [r4, #12]
   db264:	3318      	adds	r3, #24
   db266:	3a01      	subs	r2, #1
   db268:	60e2      	str	r2, [r4, #12]
   db26a:	60a3      	str	r3, [r4, #8]
   db26c:	bb32      	cbnz	r2, db2bc <localtime_r+0x1b8>
   db26e:	6923      	ldr	r3, [r4, #16]
   db270:	3b01      	subs	r3, #1
   db272:	d401      	bmi.n	db278 <localtime_r+0x174>
   db274:	6123      	str	r3, [r4, #16]
   db276:	e01d      	b.n	db2b4 <localtime_r+0x1b0>
   db278:	230b      	movs	r3, #11
   db27a:	6123      	str	r3, [r4, #16]
   db27c:	6963      	ldr	r3, [r4, #20]
   db27e:	1e5a      	subs	r2, r3, #1
   db280:	f012 0f03 	tst.w	r2, #3
   db284:	6162      	str	r2, [r4, #20]
   db286:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db28a:	d105      	bne.n	db298 <localtime_r+0x194>
   db28c:	2164      	movs	r1, #100	; 0x64
   db28e:	fb93 f2f1 	sdiv	r2, r3, r1
   db292:	fb01 3212 	mls	r2, r1, r2, r3
   db296:	b94a      	cbnz	r2, db2ac <localtime_r+0x1a8>
   db298:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db29c:	fb93 f2f1 	sdiv	r2, r3, r1
   db2a0:	fb01 3312 	mls	r3, r1, r2, r3
   db2a4:	fab3 f383 	clz	r3, r3
   db2a8:	095b      	lsrs	r3, r3, #5
   db2aa:	e000      	b.n	db2ae <localtime_r+0x1aa>
   db2ac:	2301      	movs	r3, #1
   db2ae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db2b2:	61e3      	str	r3, [r4, #28]
   db2b4:	6923      	ldr	r3, [r4, #16]
   db2b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db2ba:	60e3      	str	r3, [r4, #12]
   db2bc:	f001 f9ef 	bl	dc69e <__tz_unlock>
   db2c0:	4620      	mov	r0, r4
   db2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db2c6:	bf00      	nop
   db2c8:	000ddc0c 	.word	0x000ddc0c
   db2cc:	2003e7e8 	.word	0x2003e7e8

000db2d0 <memcpy>:
   db2d0:	b510      	push	{r4, lr}
   db2d2:	1e43      	subs	r3, r0, #1
   db2d4:	440a      	add	r2, r1
   db2d6:	4291      	cmp	r1, r2
   db2d8:	d004      	beq.n	db2e4 <memcpy+0x14>
   db2da:	f811 4b01 	ldrb.w	r4, [r1], #1
   db2de:	f803 4f01 	strb.w	r4, [r3, #1]!
   db2e2:	e7f8      	b.n	db2d6 <memcpy+0x6>
   db2e4:	bd10      	pop	{r4, pc}

000db2e6 <memmove>:
   db2e6:	4288      	cmp	r0, r1
   db2e8:	b510      	push	{r4, lr}
   db2ea:	eb01 0302 	add.w	r3, r1, r2
   db2ee:	d801      	bhi.n	db2f4 <memmove+0xe>
   db2f0:	1e42      	subs	r2, r0, #1
   db2f2:	e00b      	b.n	db30c <memmove+0x26>
   db2f4:	4298      	cmp	r0, r3
   db2f6:	d2fb      	bcs.n	db2f0 <memmove+0xa>
   db2f8:	1881      	adds	r1, r0, r2
   db2fa:	1ad2      	subs	r2, r2, r3
   db2fc:	42d3      	cmn	r3, r2
   db2fe:	d004      	beq.n	db30a <memmove+0x24>
   db300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db304:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db308:	e7f8      	b.n	db2fc <memmove+0x16>
   db30a:	bd10      	pop	{r4, pc}
   db30c:	4299      	cmp	r1, r3
   db30e:	d004      	beq.n	db31a <memmove+0x34>
   db310:	f811 4b01 	ldrb.w	r4, [r1], #1
   db314:	f802 4f01 	strb.w	r4, [r2, #1]!
   db318:	e7f8      	b.n	db30c <memmove+0x26>
   db31a:	bd10      	pop	{r4, pc}

000db31c <memset>:
   db31c:	4402      	add	r2, r0
   db31e:	4603      	mov	r3, r0
   db320:	4293      	cmp	r3, r2
   db322:	d002      	beq.n	db32a <memset+0xe>
   db324:	f803 1b01 	strb.w	r1, [r3], #1
   db328:	e7fa      	b.n	db320 <memset+0x4>
   db32a:	4770      	bx	lr

000db32c <validate_structure>:
   db32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db32e:	6801      	ldr	r1, [r0, #0]
   db330:	293b      	cmp	r1, #59	; 0x3b
   db332:	4604      	mov	r4, r0
   db334:	d911      	bls.n	db35a <validate_structure+0x2e>
   db336:	223c      	movs	r2, #60	; 0x3c
   db338:	4668      	mov	r0, sp
   db33a:	f001 fb3b 	bl	dc9b4 <div>
   db33e:	9a01      	ldr	r2, [sp, #4]
   db340:	6863      	ldr	r3, [r4, #4]
   db342:	9900      	ldr	r1, [sp, #0]
   db344:	2a00      	cmp	r2, #0
   db346:	440b      	add	r3, r1
   db348:	6063      	str	r3, [r4, #4]
   db34a:	bfbb      	ittet	lt
   db34c:	323c      	addlt	r2, #60	; 0x3c
   db34e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db352:	6022      	strge	r2, [r4, #0]
   db354:	6022      	strlt	r2, [r4, #0]
   db356:	bfb8      	it	lt
   db358:	6063      	strlt	r3, [r4, #4]
   db35a:	6861      	ldr	r1, [r4, #4]
   db35c:	293b      	cmp	r1, #59	; 0x3b
   db35e:	d911      	bls.n	db384 <validate_structure+0x58>
   db360:	223c      	movs	r2, #60	; 0x3c
   db362:	4668      	mov	r0, sp
   db364:	f001 fb26 	bl	dc9b4 <div>
   db368:	9a01      	ldr	r2, [sp, #4]
   db36a:	68a1      	ldr	r1, [r4, #8]
   db36c:	9b00      	ldr	r3, [sp, #0]
   db36e:	2a00      	cmp	r2, #0
   db370:	440b      	add	r3, r1
   db372:	60a3      	str	r3, [r4, #8]
   db374:	bfbb      	ittet	lt
   db376:	323c      	addlt	r2, #60	; 0x3c
   db378:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db37c:	6062      	strge	r2, [r4, #4]
   db37e:	6062      	strlt	r2, [r4, #4]
   db380:	bfb8      	it	lt
   db382:	60a3      	strlt	r3, [r4, #8]
   db384:	68a1      	ldr	r1, [r4, #8]
   db386:	2917      	cmp	r1, #23
   db388:	d911      	bls.n	db3ae <validate_structure+0x82>
   db38a:	2218      	movs	r2, #24
   db38c:	4668      	mov	r0, sp
   db38e:	f001 fb11 	bl	dc9b4 <div>
   db392:	9a01      	ldr	r2, [sp, #4]
   db394:	68e1      	ldr	r1, [r4, #12]
   db396:	9b00      	ldr	r3, [sp, #0]
   db398:	2a00      	cmp	r2, #0
   db39a:	440b      	add	r3, r1
   db39c:	60e3      	str	r3, [r4, #12]
   db39e:	bfbb      	ittet	lt
   db3a0:	3218      	addlt	r2, #24
   db3a2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db3a6:	60a2      	strge	r2, [r4, #8]
   db3a8:	60a2      	strlt	r2, [r4, #8]
   db3aa:	bfb8      	it	lt
   db3ac:	60e3      	strlt	r3, [r4, #12]
   db3ae:	6921      	ldr	r1, [r4, #16]
   db3b0:	290b      	cmp	r1, #11
   db3b2:	d911      	bls.n	db3d8 <validate_structure+0xac>
   db3b4:	220c      	movs	r2, #12
   db3b6:	4668      	mov	r0, sp
   db3b8:	f001 fafc 	bl	dc9b4 <div>
   db3bc:	9a01      	ldr	r2, [sp, #4]
   db3be:	6961      	ldr	r1, [r4, #20]
   db3c0:	9b00      	ldr	r3, [sp, #0]
   db3c2:	2a00      	cmp	r2, #0
   db3c4:	440b      	add	r3, r1
   db3c6:	6163      	str	r3, [r4, #20]
   db3c8:	bfbb      	ittet	lt
   db3ca:	320c      	addlt	r2, #12
   db3cc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db3d0:	6122      	strge	r2, [r4, #16]
   db3d2:	6122      	strlt	r2, [r4, #16]
   db3d4:	bfb8      	it	lt
   db3d6:	6163      	strlt	r3, [r4, #20]
   db3d8:	6963      	ldr	r3, [r4, #20]
   db3da:	0799      	lsls	r1, r3, #30
   db3dc:	d112      	bne.n	db404 <validate_structure+0xd8>
   db3de:	2164      	movs	r1, #100	; 0x64
   db3e0:	fb93 f2f1 	sdiv	r2, r3, r1
   db3e4:	fb01 3212 	mls	r2, r1, r2, r3
   db3e8:	b972      	cbnz	r2, db408 <validate_structure+0xdc>
   db3ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db3ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db3f2:	fb93 f2f1 	sdiv	r2, r3, r1
   db3f6:	fb01 3312 	mls	r3, r1, r2, r3
   db3fa:	2b00      	cmp	r3, #0
   db3fc:	bf14      	ite	ne
   db3fe:	231c      	movne	r3, #28
   db400:	231d      	moveq	r3, #29
   db402:	e002      	b.n	db40a <validate_structure+0xde>
   db404:	231c      	movs	r3, #28
   db406:	e000      	b.n	db40a <validate_structure+0xde>
   db408:	231d      	movs	r3, #29
   db40a:	68e2      	ldr	r2, [r4, #12]
   db40c:	2a00      	cmp	r2, #0
   db40e:	dd06      	ble.n	db41e <validate_structure+0xf2>
   db410:	4f33      	ldr	r7, [pc, #204]	; (db4e0 <validate_structure+0x1b4>)
   db412:	f04f 0e00 	mov.w	lr, #0
   db416:	2564      	movs	r5, #100	; 0x64
   db418:	f44f 76c8 	mov.w	r6, #400	; 0x190
   db41c:	e039      	b.n	db492 <validate_structure+0x166>
   db41e:	4f30      	ldr	r7, [pc, #192]	; (db4e0 <validate_structure+0x1b4>)
   db420:	260b      	movs	r6, #11
   db422:	2064      	movs	r0, #100	; 0x64
   db424:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db428:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   db42c:	f1be 0f00 	cmp.w	lr, #0
   db430:	dc53      	bgt.n	db4da <validate_structure+0x1ae>
   db432:	6921      	ldr	r1, [r4, #16]
   db434:	3901      	subs	r1, #1
   db436:	6121      	str	r1, [r4, #16]
   db438:	3101      	adds	r1, #1
   db43a:	d118      	bne.n	db46e <validate_structure+0x142>
   db43c:	6963      	ldr	r3, [r4, #20]
   db43e:	6126      	str	r6, [r4, #16]
   db440:	1e59      	subs	r1, r3, #1
   db442:	078a      	lsls	r2, r1, #30
   db444:	6161      	str	r1, [r4, #20]
   db446:	d10f      	bne.n	db468 <validate_structure+0x13c>
   db448:	fb91 f2f0 	sdiv	r2, r1, r0
   db44c:	fb00 1112 	mls	r1, r0, r2, r1
   db450:	b961      	cbnz	r1, db46c <validate_structure+0x140>
   db452:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db456:	fb93 f2f5 	sdiv	r2, r3, r5
   db45a:	fb05 3312 	mls	r3, r5, r2, r3
   db45e:	2b00      	cmp	r3, #0
   db460:	bf14      	ite	ne
   db462:	231c      	movne	r3, #28
   db464:	231d      	moveq	r3, #29
   db466:	e002      	b.n	db46e <validate_structure+0x142>
   db468:	231c      	movs	r3, #28
   db46a:	e000      	b.n	db46e <validate_structure+0x142>
   db46c:	231d      	movs	r3, #29
   db46e:	6922      	ldr	r2, [r4, #16]
   db470:	2a01      	cmp	r2, #1
   db472:	bf14      	ite	ne
   db474:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   db478:	461a      	moveq	r2, r3
   db47a:	4472      	add	r2, lr
   db47c:	60e2      	str	r2, [r4, #12]
   db47e:	e7d3      	b.n	db428 <validate_structure+0xfc>
   db480:	428b      	cmp	r3, r1
   db482:	da2a      	bge.n	db4da <validate_structure+0x1ae>
   db484:	4618      	mov	r0, r3
   db486:	3201      	adds	r2, #1
   db488:	1a09      	subs	r1, r1, r0
   db48a:	2a0c      	cmp	r2, #12
   db48c:	60e1      	str	r1, [r4, #12]
   db48e:	6122      	str	r2, [r4, #16]
   db490:	d008      	beq.n	db4a4 <validate_structure+0x178>
   db492:	6922      	ldr	r2, [r4, #16]
   db494:	68e1      	ldr	r1, [r4, #12]
   db496:	2a01      	cmp	r2, #1
   db498:	d0f2      	beq.n	db480 <validate_structure+0x154>
   db49a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   db49e:	4281      	cmp	r1, r0
   db4a0:	dcf1      	bgt.n	db486 <validate_structure+0x15a>
   db4a2:	e01a      	b.n	db4da <validate_structure+0x1ae>
   db4a4:	6963      	ldr	r3, [r4, #20]
   db4a6:	f8c4 e010 	str.w	lr, [r4, #16]
   db4aa:	1c5a      	adds	r2, r3, #1
   db4ac:	0791      	lsls	r1, r2, #30
   db4ae:	6162      	str	r2, [r4, #20]
   db4b0:	d10f      	bne.n	db4d2 <validate_structure+0x1a6>
   db4b2:	fb92 f1f5 	sdiv	r1, r2, r5
   db4b6:	fb05 2211 	mls	r2, r5, r1, r2
   db4ba:	b962      	cbnz	r2, db4d6 <validate_structure+0x1aa>
   db4bc:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   db4c0:	fb93 f2f6 	sdiv	r2, r3, r6
   db4c4:	fb06 3312 	mls	r3, r6, r2, r3
   db4c8:	2b00      	cmp	r3, #0
   db4ca:	bf14      	ite	ne
   db4cc:	231c      	movne	r3, #28
   db4ce:	231d      	moveq	r3, #29
   db4d0:	e7df      	b.n	db492 <validate_structure+0x166>
   db4d2:	231c      	movs	r3, #28
   db4d4:	e7dd      	b.n	db492 <validate_structure+0x166>
   db4d6:	231d      	movs	r3, #29
   db4d8:	e7db      	b.n	db492 <validate_structure+0x166>
   db4da:	b003      	add	sp, #12
   db4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db4de:	bf00      	nop
   db4e0:	000ddbdc 	.word	0x000ddbdc

000db4e4 <mktime>:
   db4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db4e8:	4605      	mov	r5, r0
   db4ea:	f001 fabb 	bl	dca64 <__gettzinfo>
   db4ee:	4681      	mov	r9, r0
   db4f0:	4628      	mov	r0, r5
   db4f2:	f7ff ff1b 	bl	db32c <validate_structure>
   db4f6:	e895 000c 	ldmia.w	r5, {r2, r3}
   db4fa:	213c      	movs	r1, #60	; 0x3c
   db4fc:	fb01 2303 	mla	r3, r1, r3, r2
   db500:	68aa      	ldr	r2, [r5, #8]
   db502:	68ec      	ldr	r4, [r5, #12]
   db504:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   db508:	fb08 3102 	mla	r1, r8, r2, r3
   db50c:	692b      	ldr	r3, [r5, #16]
   db50e:	4aab      	ldr	r2, [pc, #684]	; (db7bc <mktime+0x2d8>)
   db510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   db514:	3c01      	subs	r4, #1
   db516:	2b01      	cmp	r3, #1
   db518:	4414      	add	r4, r2
   db51a:	696b      	ldr	r3, [r5, #20]
   db51c:	dd11      	ble.n	db542 <mktime+0x5e>
   db51e:	079e      	lsls	r6, r3, #30
   db520:	d10f      	bne.n	db542 <mktime+0x5e>
   db522:	2064      	movs	r0, #100	; 0x64
   db524:	fb93 f2f0 	sdiv	r2, r3, r0
   db528:	fb00 3212 	mls	r2, r0, r2, r3
   db52c:	b942      	cbnz	r2, db540 <mktime+0x5c>
   db52e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   db532:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db536:	fb96 f0f2 	sdiv	r0, r6, r2
   db53a:	fb02 6210 	mls	r2, r2, r0, r6
   db53e:	b902      	cbnz	r2, db542 <mktime+0x5e>
   db540:	3401      	adds	r4, #1
   db542:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   db546:	3210      	adds	r2, #16
   db548:	f644 6020 	movw	r0, #20000	; 0x4e20
   db54c:	4282      	cmp	r2, r0
   db54e:	61ec      	str	r4, [r5, #28]
   db550:	461f      	mov	r7, r3
   db552:	f200 812e 	bhi.w	db7b2 <mktime+0x2ce>
   db556:	2b46      	cmp	r3, #70	; 0x46
   db558:	dd22      	ble.n	db5a0 <mktime+0xbc>
   db55a:	2246      	movs	r2, #70	; 0x46
   db55c:	f240 1c6d 	movw	ip, #365	; 0x16d
   db560:	2664      	movs	r6, #100	; 0x64
   db562:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   db566:	0790      	lsls	r0, r2, #30
   db568:	d110      	bne.n	db58c <mktime+0xa8>
   db56a:	fb92 f0f6 	sdiv	r0, r2, r6
   db56e:	fb06 2010 	mls	r0, r6, r0, r2
   db572:	b970      	cbnz	r0, db592 <mktime+0xae>
   db574:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   db578:	fb98 f0fe 	sdiv	r0, r8, lr
   db57c:	fb0e 8010 	mls	r0, lr, r0, r8
   db580:	2800      	cmp	r0, #0
   db582:	bf14      	ite	ne
   db584:	4660      	movne	r0, ip
   db586:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db58a:	e004      	b.n	db596 <mktime+0xb2>
   db58c:	f240 106d 	movw	r0, #365	; 0x16d
   db590:	e001      	b.n	db596 <mktime+0xb2>
   db592:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db596:	3201      	adds	r2, #1
   db598:	4293      	cmp	r3, r2
   db59a:	4404      	add	r4, r0
   db59c:	d1e3      	bne.n	db566 <mktime+0x82>
   db59e:	e044      	b.n	db62a <mktime+0x146>
   db5a0:	d043      	beq.n	db62a <mktime+0x146>
   db5a2:	2245      	movs	r2, #69	; 0x45
   db5a4:	f240 1e6d 	movw	lr, #365	; 0x16d
   db5a8:	2664      	movs	r6, #100	; 0x64
   db5aa:	f44f 77c8 	mov.w	r7, #400	; 0x190
   db5ae:	429a      	cmp	r2, r3
   db5b0:	dd1a      	ble.n	db5e8 <mktime+0x104>
   db5b2:	0790      	lsls	r0, r2, #30
   db5b4:	d110      	bne.n	db5d8 <mktime+0xf4>
   db5b6:	fb92 f0f6 	sdiv	r0, r2, r6
   db5ba:	fb06 2010 	mls	r0, r6, r0, r2
   db5be:	b970      	cbnz	r0, db5de <mktime+0xfa>
   db5c0:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   db5c4:	fb9c f0f7 	sdiv	r0, ip, r7
   db5c8:	fb07 c010 	mls	r0, r7, r0, ip
   db5cc:	2800      	cmp	r0, #0
   db5ce:	bf14      	ite	ne
   db5d0:	4670      	movne	r0, lr
   db5d2:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db5d6:	e004      	b.n	db5e2 <mktime+0xfe>
   db5d8:	f240 106d 	movw	r0, #365	; 0x16d
   db5dc:	e001      	b.n	db5e2 <mktime+0xfe>
   db5de:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db5e2:	1a24      	subs	r4, r4, r0
   db5e4:	3a01      	subs	r2, #1
   db5e6:	e7e2      	b.n	db5ae <mktime+0xca>
   db5e8:	2b45      	cmp	r3, #69	; 0x45
   db5ea:	bfa8      	it	ge
   db5ec:	2345      	movge	r3, #69	; 0x45
   db5ee:	079e      	lsls	r6, r3, #30
   db5f0:	461f      	mov	r7, r3
   db5f2:	d114      	bne.n	db61e <mktime+0x13a>
   db5f4:	2264      	movs	r2, #100	; 0x64
   db5f6:	fb93 f3f2 	sdiv	r3, r3, r2
   db5fa:	fb02 7313 	mls	r3, r2, r3, r7
   db5fe:	b98b      	cbnz	r3, db624 <mktime+0x140>
   db600:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   db604:	f44f 73c8 	mov.w	r3, #400	; 0x190
   db608:	fb90 f2f3 	sdiv	r2, r0, r3
   db60c:	fb03 0312 	mls	r3, r3, r2, r0
   db610:	2b00      	cmp	r3, #0
   db612:	f240 136d 	movw	r3, #365	; 0x16d
   db616:	bf08      	it	eq
   db618:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   db61c:	e004      	b.n	db628 <mktime+0x144>
   db61e:	f240 136d 	movw	r3, #365	; 0x16d
   db622:	e001      	b.n	db628 <mktime+0x144>
   db624:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   db628:	1ae4      	subs	r4, r4, r3
   db62a:	4865      	ldr	r0, [pc, #404]	; (db7c0 <mktime+0x2dc>)
   db62c:	fb00 1804 	mla	r8, r0, r4, r1
   db630:	f001 f834 	bl	dc69c <__tz_lock>
   db634:	f001 f834 	bl	dc6a0 <_tzset_unlocked>
   db638:	4b62      	ldr	r3, [pc, #392]	; (db7c4 <mktime+0x2e0>)
   db63a:	681e      	ldr	r6, [r3, #0]
   db63c:	2e00      	cmp	r6, #0
   db63e:	f000 80a4 	beq.w	db78a <mktime+0x2a6>
   db642:	6a2b      	ldr	r3, [r5, #32]
   db644:	6968      	ldr	r0, [r5, #20]
   db646:	2b01      	cmp	r3, #1
   db648:	bfa8      	it	ge
   db64a:	2301      	movge	r3, #1
   db64c:	469a      	mov	sl, r3
   db64e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   db652:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db656:	4298      	cmp	r0, r3
   db658:	d10d      	bne.n	db676 <mktime+0x192>
   db65a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   db65e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   db662:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db666:	f8d9 101c 	ldr.w	r1, [r9, #28]
   db66a:	1ad6      	subs	r6, r2, r3
   db66c:	45b0      	cmp	r8, r6
   db66e:	eba1 0100 	sub.w	r1, r1, r0
   db672:	da05      	bge.n	db680 <mktime+0x19c>
   db674:	e007      	b.n	db686 <mktime+0x1a2>
   db676:	f000 ff69 	bl	dc54c <__tzcalc_limits>
   db67a:	2800      	cmp	r0, #0
   db67c:	d1ed      	bne.n	db65a <mktime+0x176>
   db67e:	e076      	b.n	db76e <mktime+0x28a>
   db680:	1a12      	subs	r2, r2, r0
   db682:	4590      	cmp	r8, r2
   db684:	db73      	blt.n	db76e <mktime+0x28a>
   db686:	f8d9 2000 	ldr.w	r2, [r9]
   db68a:	b112      	cbz	r2, db692 <mktime+0x1ae>
   db68c:	4588      	cmp	r8, r1
   db68e:	db77      	blt.n	db780 <mktime+0x29c>
   db690:	e001      	b.n	db696 <mktime+0x1b2>
   db692:	4588      	cmp	r8, r1
   db694:	da07      	bge.n	db6a6 <mktime+0x1c2>
   db696:	45b0      	cmp	r8, r6
   db698:	bfac      	ite	ge
   db69a:	2600      	movge	r6, #0
   db69c:	2601      	movlt	r6, #1
   db69e:	f1ba 0f00 	cmp.w	sl, #0
   db6a2:	da04      	bge.n	db6ae <mktime+0x1ca>
   db6a4:	e064      	b.n	db770 <mktime+0x28c>
   db6a6:	f1ba 0f00 	cmp.w	sl, #0
   db6aa:	db63      	blt.n	db774 <mktime+0x290>
   db6ac:	2601      	movs	r6, #1
   db6ae:	ea8a 0a06 	eor.w	sl, sl, r6
   db6b2:	f1ba 0f01 	cmp.w	sl, #1
   db6b6:	d15b      	bne.n	db770 <mktime+0x28c>
   db6b8:	1a1b      	subs	r3, r3, r0
   db6ba:	b906      	cbnz	r6, db6be <mktime+0x1da>
   db6bc:	425b      	negs	r3, r3
   db6be:	682a      	ldr	r2, [r5, #0]
   db6c0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   db6c4:	441a      	add	r2, r3
   db6c6:	602a      	str	r2, [r5, #0]
   db6c8:	4628      	mov	r0, r5
   db6ca:	4498      	add	r8, r3
   db6cc:	f7ff fe2e 	bl	db32c <validate_structure>
   db6d0:	68eb      	ldr	r3, [r5, #12]
   db6d2:	ebb3 030a 	subs.w	r3, r3, sl
   db6d6:	d04b      	beq.n	db770 <mktime+0x28c>
   db6d8:	2b01      	cmp	r3, #1
   db6da:	dc03      	bgt.n	db6e4 <mktime+0x200>
   db6dc:	1c98      	adds	r0, r3, #2
   db6de:	bfd8      	it	le
   db6e0:	2301      	movle	r3, #1
   db6e2:	e001      	b.n	db6e8 <mktime+0x204>
   db6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db6e8:	69ea      	ldr	r2, [r5, #28]
   db6ea:	441c      	add	r4, r3
   db6ec:	189b      	adds	r3, r3, r2
   db6ee:	d51d      	bpl.n	db72c <mktime+0x248>
   db6f0:	1e7b      	subs	r3, r7, #1
   db6f2:	0799      	lsls	r1, r3, #30
   db6f4:	d114      	bne.n	db720 <mktime+0x23c>
   db6f6:	2164      	movs	r1, #100	; 0x64
   db6f8:	fb93 f2f1 	sdiv	r2, r3, r1
   db6fc:	fb01 3312 	mls	r3, r1, r2, r3
   db700:	b98b      	cbnz	r3, db726 <mktime+0x242>
   db702:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   db706:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db70a:	fb97 f3f2 	sdiv	r3, r7, r2
   db70e:	fb02 7713 	mls	r7, r2, r3, r7
   db712:	2f00      	cmp	r7, #0
   db714:	f240 136d 	movw	r3, #365	; 0x16d
   db718:	bf18      	it	ne
   db71a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   db71e:	e024      	b.n	db76a <mktime+0x286>
   db720:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   db724:	e021      	b.n	db76a <mktime+0x286>
   db726:	f240 136d 	movw	r3, #365	; 0x16d
   db72a:	e01e      	b.n	db76a <mktime+0x286>
   db72c:	07ba      	lsls	r2, r7, #30
   db72e:	d114      	bne.n	db75a <mktime+0x276>
   db730:	2164      	movs	r1, #100	; 0x64
   db732:	fb97 f2f1 	sdiv	r2, r7, r1
   db736:	fb01 7212 	mls	r2, r1, r2, r7
   db73a:	b98a      	cbnz	r2, db760 <mktime+0x27c>
   db73c:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   db740:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db744:	fb97 f2f1 	sdiv	r2, r7, r1
   db748:	fb01 7712 	mls	r7, r1, r2, r7
   db74c:	2f00      	cmp	r7, #0
   db74e:	f240 126d 	movw	r2, #365	; 0x16d
   db752:	bf08      	it	eq
   db754:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db758:	e004      	b.n	db764 <mktime+0x280>
   db75a:	f240 126d 	movw	r2, #365	; 0x16d
   db75e:	e001      	b.n	db764 <mktime+0x280>
   db760:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db764:	429a      	cmp	r2, r3
   db766:	bfd8      	it	le
   db768:	1a9b      	suble	r3, r3, r2
   db76a:	61eb      	str	r3, [r5, #28]
   db76c:	e000      	b.n	db770 <mktime+0x28c>
   db76e:	4656      	mov	r6, sl
   db770:	2e01      	cmp	r6, #1
   db772:	d10a      	bne.n	db78a <mktime+0x2a6>
   db774:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db778:	2601      	movs	r6, #1
   db77a:	eb08 0700 	add.w	r7, r8, r0
   db77e:	e008      	b.n	db792 <mktime+0x2ae>
   db780:	f1ba 0f00 	cmp.w	sl, #0
   db784:	f04f 0600 	mov.w	r6, #0
   db788:	da91      	bge.n	db6ae <mktime+0x1ca>
   db78a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   db78e:	eb08 0700 	add.w	r7, r8, r0
   db792:	f000 ff84 	bl	dc69e <__tz_unlock>
   db796:	3404      	adds	r4, #4
   db798:	2307      	movs	r3, #7
   db79a:	fb94 f3f3 	sdiv	r3, r4, r3
   db79e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db7a2:	1ae4      	subs	r4, r4, r3
   db7a4:	bf48      	it	mi
   db7a6:	3407      	addmi	r4, #7
   db7a8:	622e      	str	r6, [r5, #32]
   db7aa:	61ac      	str	r4, [r5, #24]
   db7ac:	4638      	mov	r0, r7
   db7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db7ba:	bf00      	nop
   db7bc:	000ddbac 	.word	0x000ddbac
   db7c0:	00015180 	.word	0x00015180
   db7c4:	2003e7e8 	.word	0x2003e7e8

000db7c8 <srand>:
   db7c8:	b538      	push	{r3, r4, r5, lr}
   db7ca:	4b12      	ldr	r3, [pc, #72]	; (db814 <srand+0x4c>)
   db7cc:	681c      	ldr	r4, [r3, #0]
   db7ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db7d0:	4605      	mov	r5, r0
   db7d2:	b9d3      	cbnz	r3, db80a <srand+0x42>
   db7d4:	2018      	movs	r0, #24
   db7d6:	f7fc fdf3 	bl	d83c0 <malloc>
   db7da:	f243 330e 	movw	r3, #13070	; 0x330e
   db7de:	63a0      	str	r0, [r4, #56]	; 0x38
   db7e0:	8003      	strh	r3, [r0, #0]
   db7e2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db7e6:	8043      	strh	r3, [r0, #2]
   db7e8:	f241 2334 	movw	r3, #4660	; 0x1234
   db7ec:	8083      	strh	r3, [r0, #4]
   db7ee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db7f2:	80c3      	strh	r3, [r0, #6]
   db7f4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db7f8:	8103      	strh	r3, [r0, #8]
   db7fa:	2305      	movs	r3, #5
   db7fc:	8143      	strh	r3, [r0, #10]
   db7fe:	230b      	movs	r3, #11
   db800:	8183      	strh	r3, [r0, #12]
   db802:	2201      	movs	r2, #1
   db804:	2300      	movs	r3, #0
   db806:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db80a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db80c:	2200      	movs	r2, #0
   db80e:	611d      	str	r5, [r3, #16]
   db810:	615a      	str	r2, [r3, #20]
   db812:	bd38      	pop	{r3, r4, r5, pc}
   db814:	2003de54 	.word	0x2003de54

000db818 <strcmp>:
   db818:	f810 2b01 	ldrb.w	r2, [r0], #1
   db81c:	f811 3b01 	ldrb.w	r3, [r1], #1
   db820:	2a01      	cmp	r2, #1
   db822:	bf28      	it	cs
   db824:	429a      	cmpcs	r2, r3
   db826:	d0f7      	beq.n	db818 <strcmp>
   db828:	1ad0      	subs	r0, r2, r3
   db82a:	4770      	bx	lr

000db82c <strcpy>:
   db82c:	4603      	mov	r3, r0
   db82e:	f811 2b01 	ldrb.w	r2, [r1], #1
   db832:	f803 2b01 	strb.w	r2, [r3], #1
   db836:	2a00      	cmp	r2, #0
   db838:	d1f9      	bne.n	db82e <strcpy+0x2>
   db83a:	4770      	bx	lr

000db83c <strdup>:
   db83c:	4b02      	ldr	r3, [pc, #8]	; (db848 <strdup+0xc>)
   db83e:	4601      	mov	r1, r0
   db840:	6818      	ldr	r0, [r3, #0]
   db842:	f000 b803 	b.w	db84c <_strdup_r>
   db846:	bf00      	nop
   db848:	2003de54 	.word	0x2003de54

000db84c <_strdup_r>:
   db84c:	b570      	push	{r4, r5, r6, lr}
   db84e:	4606      	mov	r6, r0
   db850:	4608      	mov	r0, r1
   db852:	460c      	mov	r4, r1
   db854:	f000 fd22 	bl	dc29c <strlen>
   db858:	1c45      	adds	r5, r0, #1
   db85a:	4629      	mov	r1, r5
   db85c:	4630      	mov	r0, r6
   db85e:	f7fc fdf7 	bl	d8450 <_malloc_r>
   db862:	4606      	mov	r6, r0
   db864:	b118      	cbz	r0, db86e <_strdup_r+0x22>
   db866:	462a      	mov	r2, r5
   db868:	4621      	mov	r1, r4
   db86a:	f7ff fd31 	bl	db2d0 <memcpy>
   db86e:	4630      	mov	r0, r6
   db870:	bd70      	pop	{r4, r5, r6, pc}

000db872 <iso_year_adjust>:
   db872:	6941      	ldr	r1, [r0, #20]
   db874:	078b      	lsls	r3, r1, #30
   db876:	b510      	push	{r4, lr}
   db878:	d10c      	bne.n	db894 <iso_year_adjust+0x22>
   db87a:	2900      	cmp	r1, #0
   db87c:	f240 736c 	movw	r3, #1900	; 0x76c
   db880:	bfa8      	it	ge
   db882:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db886:	440b      	add	r3, r1
   db888:	2464      	movs	r4, #100	; 0x64
   db88a:	fb93 f2f4 	sdiv	r2, r3, r4
   db88e:	fb04 3312 	mls	r3, r4, r2, r3
   db892:	b983      	cbnz	r3, db8b6 <iso_year_adjust+0x44>
   db894:	2900      	cmp	r1, #0
   db896:	f240 736c 	movw	r3, #1900	; 0x76c
   db89a:	bfa8      	it	ge
   db89c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db8a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db8a4:	440b      	add	r3, r1
   db8a6:	fb93 f1f2 	sdiv	r1, r3, r2
   db8aa:	fb02 3311 	mls	r3, r2, r1, r3
   db8ae:	fab3 f283 	clz	r2, r3
   db8b2:	0952      	lsrs	r2, r2, #5
   db8b4:	e000      	b.n	db8b8 <iso_year_adjust+0x46>
   db8b6:	2201      	movs	r2, #1
   db8b8:	6983      	ldr	r3, [r0, #24]
   db8ba:	69c1      	ldr	r1, [r0, #28]
   db8bc:	005b      	lsls	r3, r3, #1
   db8be:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   db8c2:	4413      	add	r3, r2
   db8c4:	2b21      	cmp	r3, #33	; 0x21
   db8c6:	dc0e      	bgt.n	db8e6 <iso_year_adjust+0x74>
   db8c8:	2b20      	cmp	r3, #32
   db8ca:	da2f      	bge.n	db92c <iso_year_adjust+0xba>
   db8cc:	2b0d      	cmp	r3, #13
   db8ce:	dc02      	bgt.n	db8d6 <iso_year_adjust+0x64>
   db8d0:	2b0a      	cmp	r3, #10
   db8d2:	db05      	blt.n	db8e0 <iso_year_adjust+0x6e>
   db8d4:	e02a      	b.n	db92c <iso_year_adjust+0xba>
   db8d6:	2b10      	cmp	r3, #16
   db8d8:	db26      	blt.n	db928 <iso_year_adjust+0xb6>
   db8da:	2b11      	cmp	r3, #17
   db8dc:	dd26      	ble.n	db92c <iso_year_adjust+0xba>
   db8de:	3b1c      	subs	r3, #28
   db8e0:	2b01      	cmp	r3, #1
   db8e2:	d923      	bls.n	db92c <iso_year_adjust+0xba>
   db8e4:	e020      	b.n	db928 <iso_year_adjust+0xb6>
   db8e6:	f241 62c6 	movw	r2, #5830	; 0x16c6
   db8ea:	4293      	cmp	r3, r2
   db8ec:	dc0e      	bgt.n	db90c <iso_year_adjust+0x9a>
   db8ee:	f241 62c2 	movw	r2, #5826	; 0x16c2
   db8f2:	4293      	cmp	r3, r2
   db8f4:	da16      	bge.n	db924 <iso_year_adjust+0xb2>
   db8f6:	f241 62a2 	movw	r2, #5794	; 0x16a2
   db8fa:	4293      	cmp	r3, r2
   db8fc:	d012      	beq.n	db924 <iso_year_adjust+0xb2>
   db8fe:	db13      	blt.n	db928 <iso_year_adjust+0xb6>
   db900:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   db904:	3b12      	subs	r3, #18
   db906:	2b02      	cmp	r3, #2
   db908:	d90c      	bls.n	db924 <iso_year_adjust+0xb2>
   db90a:	e00d      	b.n	db928 <iso_year_adjust+0xb6>
   db90c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   db910:	4293      	cmp	r3, r2
   db912:	d007      	beq.n	db924 <iso_year_adjust+0xb2>
   db914:	f241 62d7 	movw	r2, #5847	; 0x16d7
   db918:	4293      	cmp	r3, r2
   db91a:	d003      	beq.n	db924 <iso_year_adjust+0xb2>
   db91c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   db920:	4293      	cmp	r3, r2
   db922:	d101      	bne.n	db928 <iso_year_adjust+0xb6>
   db924:	2001      	movs	r0, #1
   db926:	bd10      	pop	{r4, pc}
   db928:	2000      	movs	r0, #0
   db92a:	bd10      	pop	{r4, pc}
   db92c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db930:	bd10      	pop	{r4, pc}
	...

000db934 <strftime>:
   db934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db938:	b093      	sub	sp, #76	; 0x4c
   db93a:	460e      	mov	r6, r1
   db93c:	461d      	mov	r5, r3
   db93e:	4607      	mov	r7, r0
   db940:	4691      	mov	r9, r2
   db942:	f000 fdf3 	bl	dc52c <__get_current_time_locale>
   db946:	2300      	movs	r3, #0
   db948:	9306      	str	r3, [sp, #24]
   db94a:	461c      	mov	r4, r3
   db94c:	1e73      	subs	r3, r6, #1
   db94e:	9003      	str	r0, [sp, #12]
   db950:	9302      	str	r3, [sp, #8]
   db952:	f899 3000 	ldrb.w	r3, [r9]
   db956:	2b00      	cmp	r3, #0
   db958:	f000 8492 	beq.w	dc280 <strftime+0x94c>
   db95c:	2b25      	cmp	r3, #37	; 0x25
   db95e:	d008      	beq.n	db972 <strftime+0x3e>
   db960:	9a02      	ldr	r2, [sp, #8]
   db962:	4294      	cmp	r4, r2
   db964:	f080 8490 	bcs.w	dc288 <strftime+0x954>
   db968:	553b      	strb	r3, [r7, r4]
   db96a:	f109 0901 	add.w	r9, r9, #1
   db96e:	3401      	adds	r4, #1
   db970:	e7ef      	b.n	db952 <strftime+0x1e>
   db972:	f899 a001 	ldrb.w	sl, [r9, #1]
   db976:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   db97a:	d007      	beq.n	db98c <strftime+0x58>
   db97c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db980:	d004      	beq.n	db98c <strftime+0x58>
   db982:	f109 0901 	add.w	r9, r9, #1
   db986:	f04f 0a00 	mov.w	sl, #0
   db98a:	e001      	b.n	db990 <strftime+0x5c>
   db98c:	f109 0902 	add.w	r9, r9, #2
   db990:	f899 3000 	ldrb.w	r3, [r9]
   db994:	3b31      	subs	r3, #49	; 0x31
   db996:	2b08      	cmp	r3, #8
   db998:	d808      	bhi.n	db9ac <strftime+0x78>
   db99a:	4648      	mov	r0, r9
   db99c:	220a      	movs	r2, #10
   db99e:	a90a      	add	r1, sp, #40	; 0x28
   db9a0:	f000 fdba 	bl	dc518 <strtoul>
   db9a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   db9a8:	4680      	mov	r8, r0
   db9aa:	e001      	b.n	db9b0 <strftime+0x7c>
   db9ac:	f04f 0800 	mov.w	r8, #0
   db9b0:	f899 3000 	ldrb.w	r3, [r9]
   db9b4:	2b45      	cmp	r3, #69	; 0x45
   db9b6:	d001      	beq.n	db9bc <strftime+0x88>
   db9b8:	2b4f      	cmp	r3, #79	; 0x4f
   db9ba:	d101      	bne.n	db9c0 <strftime+0x8c>
   db9bc:	f109 0901 	add.w	r9, r9, #1
   db9c0:	f899 0000 	ldrb.w	r0, [r9]
   db9c4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   db9c8:	2b55      	cmp	r3, #85	; 0x55
   db9ca:	f200 845d 	bhi.w	dc288 <strftime+0x954>
   db9ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   db9d2:	044a      	.short	0x044a
   db9d4:	045b045b 	.word	0x045b045b
   db9d8:	045b045b 	.word	0x045b045b
   db9dc:	045b045b 	.word	0x045b045b
   db9e0:	045b045b 	.word	0x045b045b
   db9e4:	045b045b 	.word	0x045b045b
   db9e8:	045b045b 	.word	0x045b045b
   db9ec:	045b045b 	.word	0x045b045b
   db9f0:	045b045b 	.word	0x045b045b
   db9f4:	045b045b 	.word	0x045b045b
   db9f8:	045b045b 	.word	0x045b045b
   db9fc:	045b045b 	.word	0x045b045b
   dba00:	045b045b 	.word	0x045b045b
   dba04:	045b045b 	.word	0x045b045b
   dba08:	006f045b 	.word	0x006f045b
   dba0c:	00d400a1 	.word	0x00d400a1
   dba10:	045b011a 	.word	0x045b011a
   dba14:	01a0013f 	.word	0x01a0013f
   dba18:	022d0226 	.word	0x022d0226
   dba1c:	045b045b 	.word	0x045b045b
   dba20:	0260045b 	.word	0x0260045b
   dba24:	045b045b 	.word	0x045b045b
   dba28:	045b0268 	.word	0x045b0268
   dba2c:	031d0297 	.word	0x031d0297
   dba30:	033b0325 	.word	0x033b0325
   dba34:	03860343 	.word	0x03860343
   dba38:	03a000c6 	.word	0x03a000c6
   dba3c:	045b041f 	.word	0x045b041f
   dba40:	045b045b 	.word	0x045b045b
   dba44:	045b045b 	.word	0x045b045b
   dba48:	0056045b 	.word	0x0056045b
   dba4c:	00ba0089 	.word	0x00ba0089
   dba50:	010c010c 	.word	0x010c010c
   dba54:	0171045b 	.word	0x0171045b
   dba58:	045b0089 	.word	0x045b0089
   dba5c:	0226023d 	.word	0x0226023d
   dba60:	025d022d 	.word	0x025d022d
   dba64:	045b0262 	.word	0x045b0262
   dba68:	045b0268 	.word	0x045b0268
   dba6c:	029c00be 	.word	0x029c00be
   dba70:	032e031f 	.word	0x032e031f
   dba74:	037f045b 	.word	0x037f045b
   dba78:	039200c2 	.word	0x039200c2
   dba7c:	03e7      	.short	0x03e7
   dba7e:	69ab      	ldr	r3, [r5, #24]
   dba80:	9a03      	ldr	r2, [sp, #12]
   dba82:	3318      	adds	r3, #24
   dba84:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dba88:	4640      	mov	r0, r8
   dba8a:	f000 fc07 	bl	dc29c <strlen>
   dba8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba92:	193b      	adds	r3, r7, r4
   dba94:	4420      	add	r0, r4
   dba96:	4284      	cmp	r4, r0
   dba98:	f000 83eb 	beq.w	dc272 <strftime+0x93e>
   dba9c:	9a02      	ldr	r2, [sp, #8]
   dba9e:	4294      	cmp	r4, r2
   dbaa0:	f080 83f2 	bcs.w	dc288 <strftime+0x954>
   dbaa4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbaa8:	f803 2b01 	strb.w	r2, [r3], #1
   dbaac:	3401      	adds	r4, #1
   dbaae:	e7f2      	b.n	dba96 <strftime+0x162>
   dbab0:	69ab      	ldr	r3, [r5, #24]
   dbab2:	9a03      	ldr	r2, [sp, #12]
   dbab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dbab8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   dbabc:	4640      	mov	r0, r8
   dbabe:	f000 fbed 	bl	dc29c <strlen>
   dbac2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbac6:	193b      	adds	r3, r7, r4
   dbac8:	4420      	add	r0, r4
   dbaca:	4284      	cmp	r4, r0
   dbacc:	f000 83d1 	beq.w	dc272 <strftime+0x93e>
   dbad0:	9a02      	ldr	r2, [sp, #8]
   dbad2:	4294      	cmp	r4, r2
   dbad4:	f080 83d8 	bcs.w	dc288 <strftime+0x954>
   dbad8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbadc:	f803 2b01 	strb.w	r2, [r3], #1
   dbae0:	3401      	adds	r4, #1
   dbae2:	e7f2      	b.n	dbaca <strftime+0x196>
   dbae4:	692b      	ldr	r3, [r5, #16]
   dbae6:	9a03      	ldr	r2, [sp, #12]
   dbae8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbaec:	4640      	mov	r0, r8
   dbaee:	f000 fbd5 	bl	dc29c <strlen>
   dbaf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbaf6:	193b      	adds	r3, r7, r4
   dbaf8:	4420      	add	r0, r4
   dbafa:	4284      	cmp	r4, r0
   dbafc:	f000 83b9 	beq.w	dc272 <strftime+0x93e>
   dbb00:	9a02      	ldr	r2, [sp, #8]
   dbb02:	4294      	cmp	r4, r2
   dbb04:	f080 83c0 	bcs.w	dc288 <strftime+0x954>
   dbb08:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbb0c:	f803 2b01 	strb.w	r2, [r3], #1
   dbb10:	3401      	adds	r4, #1
   dbb12:	e7f2      	b.n	dbafa <strftime+0x1c6>
   dbb14:	692b      	ldr	r3, [r5, #16]
   dbb16:	9a03      	ldr	r2, [sp, #12]
   dbb18:	330c      	adds	r3, #12
   dbb1a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dbb1e:	4640      	mov	r0, r8
   dbb20:	f000 fbbc 	bl	dc29c <strlen>
   dbb24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbb28:	193b      	adds	r3, r7, r4
   dbb2a:	4420      	add	r0, r4
   dbb2c:	4284      	cmp	r4, r0
   dbb2e:	f000 83a0 	beq.w	dc272 <strftime+0x93e>
   dbb32:	9a02      	ldr	r2, [sp, #8]
   dbb34:	4294      	cmp	r4, r2
   dbb36:	f080 83a7 	bcs.w	dc288 <strftime+0x954>
   dbb3a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dbb3e:	f803 2b01 	strb.w	r2, [r3], #1
   dbb42:	3401      	adds	r4, #1
   dbb44:	e7f2      	b.n	dbb2c <strftime+0x1f8>
   dbb46:	9b03      	ldr	r3, [sp, #12]
   dbb48:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dbb4c:	e00a      	b.n	dbb64 <strftime+0x230>
   dbb4e:	9b03      	ldr	r3, [sp, #12]
   dbb50:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dbb54:	e006      	b.n	dbb64 <strftime+0x230>
   dbb56:	9b03      	ldr	r3, [sp, #12]
   dbb58:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dbb5c:	e002      	b.n	dbb64 <strftime+0x230>
   dbb5e:	9b03      	ldr	r3, [sp, #12]
   dbb60:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dbb64:	4640      	mov	r0, r8
   dbb66:	f000 fb99 	bl	dc29c <strlen>
   dbb6a:	f898 3000 	ldrb.w	r3, [r8]
   dbb6e:	2b00      	cmp	r3, #0
   dbb70:	f000 837f 	beq.w	dc272 <strftime+0x93e>
   dbb74:	462b      	mov	r3, r5
   dbb76:	4642      	mov	r2, r8
   dbb78:	e093      	b.n	dbca2 <strftime+0x36e>
   dbb7a:	49b6      	ldr	r1, [pc, #728]	; (dbe54 <strftime+0x520>)
   dbb7c:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbb80:	458b      	cmp	fp, r1
   dbb82:	bfac      	ite	ge
   dbb84:	2100      	movge	r1, #0
   dbb86:	2101      	movlt	r1, #1
   dbb88:	f1bb 0f00 	cmp.w	fp, #0
   dbb8c:	db04      	blt.n	dbb98 <strftime+0x264>
   dbb8e:	2064      	movs	r0, #100	; 0x64
   dbb90:	fb9b f0f0 	sdiv	r0, fp, r0
   dbb94:	3013      	adds	r0, #19
   dbb96:	e008      	b.n	dbbaa <strftime+0x276>
   dbb98:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbb9c:	9107      	str	r1, [sp, #28]
   dbb9e:	f000 ff05 	bl	dc9ac <abs>
   dbba2:	9907      	ldr	r1, [sp, #28]
   dbba4:	2364      	movs	r3, #100	; 0x64
   dbba6:	fb90 f0f3 	sdiv	r0, r0, r3
   dbbaa:	f1ba 0f00 	cmp.w	sl, #0
   dbbae:	d008      	beq.n	dbbc2 <strftime+0x28e>
   dbbb0:	2863      	cmp	r0, #99	; 0x63
   dbbb2:	dd09      	ble.n	dbbc8 <strftime+0x294>
   dbbb4:	4ba8      	ldr	r3, [pc, #672]	; (dbe58 <strftime+0x524>)
   dbbb6:	4aa9      	ldr	r2, [pc, #676]	; (dbe5c <strftime+0x528>)
   dbbb8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbbbc:	bf18      	it	ne
   dbbbe:	4613      	movne	r3, r2
   dbbc0:	e003      	b.n	dbbca <strftime+0x296>
   dbbc2:	4ba6      	ldr	r3, [pc, #664]	; (dbe5c <strftime+0x528>)
   dbbc4:	4aa6      	ldr	r2, [pc, #664]	; (dbe60 <strftime+0x52c>)
   dbbc6:	e001      	b.n	dbbcc <strftime+0x298>
   dbbc8:	4ba4      	ldr	r3, [pc, #656]	; (dbe5c <strftime+0x528>)
   dbbca:	4aa6      	ldr	r2, [pc, #664]	; (dbe64 <strftime+0x530>)
   dbbcc:	9001      	str	r0, [sp, #4]
   dbbce:	f1b8 0f01 	cmp.w	r8, #1
   dbbd2:	bf98      	it	ls
   dbbd4:	f04f 0802 	movls.w	r8, #2
   dbbd8:	ebc1 0108 	rsb	r1, r1, r8
   dbbdc:	9100      	str	r1, [sp, #0]
   dbbde:	489d      	ldr	r0, [pc, #628]	; (dbe54 <strftime+0x520>)
   dbbe0:	49a1      	ldr	r1, [pc, #644]	; (dbe68 <strftime+0x534>)
   dbbe2:	4583      	cmp	fp, r0
   dbbe4:	bfb8      	it	lt
   dbbe6:	460b      	movlt	r3, r1
   dbbe8:	e21e      	b.n	dc028 <strftime+0x6f4>
   dbbea:	4aa0      	ldr	r2, [pc, #640]	; (dbe6c <strftime+0x538>)
   dbbec:	49a0      	ldr	r1, [pc, #640]	; (dbe70 <strftime+0x53c>)
   dbbee:	68eb      	ldr	r3, [r5, #12]
   dbbf0:	2864      	cmp	r0, #100	; 0x64
   dbbf2:	bf08      	it	eq
   dbbf4:	460a      	moveq	r2, r1
   dbbf6:	1b31      	subs	r1, r6, r4
   dbbf8:	1938      	adds	r0, r7, r4
   dbbfa:	f7fc fc11 	bl	d8420 <sniprintf>
   dbbfe:	2800      	cmp	r0, #0
   dbc00:	f280 8302 	bge.w	dc208 <strftime+0x8d4>
   dbc04:	e340      	b.n	dc288 <strftime+0x954>
   dbc06:	6968      	ldr	r0, [r5, #20]
   dbc08:	692b      	ldr	r3, [r5, #16]
   dbc0a:	2800      	cmp	r0, #0
   dbc0c:	f103 0b01 	add.w	fp, r3, #1
   dbc10:	eb07 0804 	add.w	r8, r7, r4
   dbc14:	ebc4 0a06 	rsb	sl, r4, r6
   dbc18:	68eb      	ldr	r3, [r5, #12]
   dbc1a:	db05      	blt.n	dbc28 <strftime+0x2f4>
   dbc1c:	2264      	movs	r2, #100	; 0x64
   dbc1e:	fb90 f1f2 	sdiv	r1, r0, r2
   dbc22:	fb02 0011 	mls	r0, r2, r1, r0
   dbc26:	e00a      	b.n	dbc3e <strftime+0x30a>
   dbc28:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbc2c:	9307      	str	r3, [sp, #28]
   dbc2e:	f000 febd 	bl	dc9ac <abs>
   dbc32:	2264      	movs	r2, #100	; 0x64
   dbc34:	9b07      	ldr	r3, [sp, #28]
   dbc36:	fb90 f1f2 	sdiv	r1, r0, r2
   dbc3a:	fb01 0012 	mls	r0, r1, r2, r0
   dbc3e:	4a8d      	ldr	r2, [pc, #564]	; (dbe74 <strftime+0x540>)
   dbc40:	9001      	str	r0, [sp, #4]
   dbc42:	9300      	str	r3, [sp, #0]
   dbc44:	4651      	mov	r1, sl
   dbc46:	465b      	mov	r3, fp
   dbc48:	4640      	mov	r0, r8
   dbc4a:	f7fc fbe9 	bl	d8420 <sniprintf>
   dbc4e:	e7d6      	b.n	dbbfe <strftime+0x2ca>
   dbc50:	2325      	movs	r3, #37	; 0x25
   dbc52:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbc56:	f1ba 0f00 	cmp.w	sl, #0
   dbc5a:	d007      	beq.n	dbc6c <strftime+0x338>
   dbc5c:	f1b8 0f05 	cmp.w	r8, #5
   dbc60:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbc64:	bf98      	it	ls
   dbc66:	f04f 0806 	movls.w	r8, #6
   dbc6a:	e004      	b.n	dbc76 <strftime+0x342>
   dbc6c:	232b      	movs	r3, #43	; 0x2b
   dbc6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbc72:	f04f 080a 	mov.w	r8, #10
   dbc76:	f1b8 0306 	subs.w	r3, r8, #6
   dbc7a:	d102      	bne.n	dbc82 <strftime+0x34e>
   dbc7c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbc80:	e00a      	b.n	dbc98 <strftime+0x364>
   dbc82:	4a7d      	ldr	r2, [pc, #500]	; (dbe78 <strftime+0x544>)
   dbc84:	211e      	movs	r1, #30
   dbc86:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbc8a:	f7fc fbc9 	bl	d8420 <sniprintf>
   dbc8e:	2800      	cmp	r0, #0
   dbc90:	ddf4      	ble.n	dbc7c <strftime+0x348>
   dbc92:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbc96:	4418      	add	r0, r3
   dbc98:	4978      	ldr	r1, [pc, #480]	; (dbe7c <strftime+0x548>)
   dbc9a:	f7ff fdc7 	bl	db82c <strcpy>
   dbc9e:	462b      	mov	r3, r5
   dbca0:	aa0a      	add	r2, sp, #40	; 0x28
   dbca2:	1b31      	subs	r1, r6, r4
   dbca4:	1938      	adds	r0, r7, r4
   dbca6:	f7ff fe45 	bl	db934 <strftime>
   dbcaa:	2800      	cmp	r0, #0
   dbcac:	f340 82ec 	ble.w	dc288 <strftime+0x954>
   dbcb0:	4404      	add	r4, r0
   dbcb2:	e2de      	b.n	dc272 <strftime+0x93e>
   dbcb4:	4628      	mov	r0, r5
   dbcb6:	f7ff fddc 	bl	db872 <iso_year_adjust>
   dbcba:	4680      	mov	r8, r0
   dbcbc:	6968      	ldr	r0, [r5, #20]
   dbcbe:	2800      	cmp	r0, #0
   dbcc0:	db05      	blt.n	dbcce <strftime+0x39a>
   dbcc2:	2264      	movs	r2, #100	; 0x64
   dbcc4:	fb90 f1f2 	sdiv	r1, r0, r2
   dbcc8:	fb02 0011 	mls	r0, r2, r1, r0
   dbccc:	e008      	b.n	dbce0 <strftime+0x3ac>
   dbcce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbcd2:	f000 fe6b 	bl	dc9ac <abs>
   dbcd6:	2264      	movs	r2, #100	; 0x64
   dbcd8:	fb90 f3f2 	sdiv	r3, r0, r2
   dbcdc:	fb03 0012 	mls	r0, r3, r2, r0
   dbce0:	f1b8 0f00 	cmp.w	r8, #0
   dbce4:	da06      	bge.n	dbcf4 <strftime+0x3c0>
   dbce6:	696a      	ldr	r2, [r5, #20]
   dbce8:	4b65      	ldr	r3, [pc, #404]	; (dbe80 <strftime+0x54c>)
   dbcea:	429a      	cmp	r2, r3
   dbcec:	bfb8      	it	lt
   dbcee:	f04f 0801 	movlt.w	r8, #1
   dbcf2:	e006      	b.n	dbd02 <strftime+0x3ce>
   dbcf4:	d005      	beq.n	dbd02 <strftime+0x3ce>
   dbcf6:	696a      	ldr	r2, [r5, #20]
   dbcf8:	4b56      	ldr	r3, [pc, #344]	; (dbe54 <strftime+0x520>)
   dbcfa:	429a      	cmp	r2, r3
   dbcfc:	bfb8      	it	lt
   dbcfe:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   dbd02:	2364      	movs	r3, #100	; 0x64
   dbd04:	4440      	add	r0, r8
   dbd06:	fb90 f2f3 	sdiv	r2, r0, r3
   dbd0a:	fb03 0012 	mls	r0, r3, r2, r0
   dbd0e:	4418      	add	r0, r3
   dbd10:	e1f9      	b.n	dc106 <strftime+0x7d2>
   dbd12:	4b50      	ldr	r3, [pc, #320]	; (dbe54 <strftime+0x520>)
   dbd14:	6969      	ldr	r1, [r5, #20]
   dbd16:	9108      	str	r1, [sp, #32]
   dbd18:	4299      	cmp	r1, r3
   dbd1a:	bfac      	ite	ge
   dbd1c:	2300      	movge	r3, #0
   dbd1e:	2301      	movlt	r3, #1
   dbd20:	4628      	mov	r0, r5
   dbd22:	9307      	str	r3, [sp, #28]
   dbd24:	f7ff fda5 	bl	db872 <iso_year_adjust>
   dbd28:	9908      	ldr	r1, [sp, #32]
   dbd2a:	2900      	cmp	r1, #0
   dbd2c:	4683      	mov	fp, r0
   dbd2e:	db04      	blt.n	dbd3a <strftime+0x406>
   dbd30:	2364      	movs	r3, #100	; 0x64
   dbd32:	fb91 f3f3 	sdiv	r3, r1, r3
   dbd36:	3313      	adds	r3, #19
   dbd38:	e008      	b.n	dbd4c <strftime+0x418>
   dbd3a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbd3e:	9108      	str	r1, [sp, #32]
   dbd40:	f000 fe34 	bl	dc9ac <abs>
   dbd44:	9908      	ldr	r1, [sp, #32]
   dbd46:	2364      	movs	r3, #100	; 0x64
   dbd48:	fb90 f3f3 	sdiv	r3, r0, r3
   dbd4c:	6968      	ldr	r0, [r5, #20]
   dbd4e:	2800      	cmp	r0, #0
   dbd50:	db06      	blt.n	dbd60 <strftime+0x42c>
   dbd52:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbd56:	fb90 fcfe 	sdiv	ip, r0, lr
   dbd5a:	fb0e 001c 	mls	r0, lr, ip, r0
   dbd5e:	e00d      	b.n	dbd7c <strftime+0x448>
   dbd60:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbd64:	9109      	str	r1, [sp, #36]	; 0x24
   dbd66:	9308      	str	r3, [sp, #32]
   dbd68:	f000 fe20 	bl	dc9ac <abs>
   dbd6c:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbd70:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbd72:	9b08      	ldr	r3, [sp, #32]
   dbd74:	fb90 fcfe 	sdiv	ip, r0, lr
   dbd78:	fb0c 001e 	mls	r0, ip, lr, r0
   dbd7c:	f1bb 0f00 	cmp.w	fp, #0
   dbd80:	da08      	bge.n	dbd94 <strftime+0x460>
   dbd82:	6969      	ldr	r1, [r5, #20]
   dbd84:	4a3e      	ldr	r2, [pc, #248]	; (dbe80 <strftime+0x54c>)
   dbd86:	4291      	cmp	r1, r2
   dbd88:	da0a      	bge.n	dbda0 <strftime+0x46c>
   dbd8a:	f04f 0b01 	mov.w	fp, #1
   dbd8e:	f8cd b01c 	str.w	fp, [sp, #28]
   dbd92:	e005      	b.n	dbda0 <strftime+0x46c>
   dbd94:	d004      	beq.n	dbda0 <strftime+0x46c>
   dbd96:	4a2f      	ldr	r2, [pc, #188]	; (dbe54 <strftime+0x520>)
   dbd98:	4291      	cmp	r1, r2
   dbd9a:	bfb8      	it	lt
   dbd9c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   dbda0:	eb0b 0200 	add.w	r2, fp, r0
   dbda4:	1c50      	adds	r0, r2, #1
   dbda6:	d102      	bne.n	dbdae <strftime+0x47a>
   dbda8:	3b01      	subs	r3, #1
   dbdaa:	2263      	movs	r2, #99	; 0x63
   dbdac:	e003      	b.n	dbdb6 <strftime+0x482>
   dbdae:	2a64      	cmp	r2, #100	; 0x64
   dbdb0:	bf04      	itt	eq
   dbdb2:	3301      	addeq	r3, #1
   dbdb4:	2200      	moveq	r2, #0
   dbdb6:	2064      	movs	r0, #100	; 0x64
   dbdb8:	fb00 2303 	mla	r3, r0, r3, r2
   dbdbc:	9a07      	ldr	r2, [sp, #28]
   dbdbe:	b142      	cbz	r2, dbdd2 <strftime+0x49e>
   dbdc0:	222d      	movs	r2, #45	; 0x2d
   dbdc2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dbdc6:	f1b8 0f00 	cmp.w	r8, #0
   dbdca:	d013      	beq.n	dbdf4 <strftime+0x4c0>
   dbdcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbdd0:	e010      	b.n	dbdf4 <strftime+0x4c0>
   dbdd2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbdd6:	d110      	bne.n	dbdfa <strftime+0x4c6>
   dbdd8:	f242 720f 	movw	r2, #9999	; 0x270f
   dbddc:	4293      	cmp	r3, r2
   dbdde:	d90c      	bls.n	dbdfa <strftime+0x4c6>
   dbde0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dbde4:	f1b8 0f00 	cmp.w	r8, #0
   dbde8:	d1f0      	bne.n	dbdcc <strftime+0x498>
   dbdea:	aa12      	add	r2, sp, #72	; 0x48
   dbdec:	2125      	movs	r1, #37	; 0x25
   dbdee:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dbdf2:	e00a      	b.n	dbe0a <strftime+0x4d6>
   dbdf4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dbdf8:	e000      	b.n	dbdfc <strftime+0x4c8>
   dbdfa:	aa0a      	add	r2, sp, #40	; 0x28
   dbdfc:	2125      	movs	r1, #37	; 0x25
   dbdfe:	7011      	strb	r1, [r2, #0]
   dbe00:	f1ba 0f00 	cmp.w	sl, #0
   dbe04:	d101      	bne.n	dbe0a <strftime+0x4d6>
   dbe06:	1c50      	adds	r0, r2, #1
   dbe08:	e002      	b.n	dbe10 <strftime+0x4dc>
   dbe0a:	2130      	movs	r1, #48	; 0x30
   dbe0c:	1c90      	adds	r0, r2, #2
   dbe0e:	7051      	strb	r1, [r2, #1]
   dbe10:	491c      	ldr	r1, [pc, #112]	; (dbe84 <strftime+0x550>)
   dbe12:	9307      	str	r3, [sp, #28]
   dbe14:	f7ff fd0a 	bl	db82c <strcpy>
   dbe18:	9b07      	ldr	r3, [sp, #28]
   dbe1a:	9300      	str	r3, [sp, #0]
   dbe1c:	e1ad      	b.n	dc17a <strftime+0x846>
   dbe1e:	4a14      	ldr	r2, [pc, #80]	; (dbe70 <strftime+0x53c>)
   dbe20:	4912      	ldr	r1, [pc, #72]	; (dbe6c <strftime+0x538>)
   dbe22:	68ab      	ldr	r3, [r5, #8]
   dbe24:	286b      	cmp	r0, #107	; 0x6b
   dbe26:	bf08      	it	eq
   dbe28:	460a      	moveq	r2, r1
   dbe2a:	e6e4      	b.n	dbbf6 <strftime+0x2c2>
   dbe2c:	68a9      	ldr	r1, [r5, #8]
   dbe2e:	230c      	movs	r3, #12
   dbe30:	b131      	cbz	r1, dbe40 <strftime+0x50c>
   dbe32:	4299      	cmp	r1, r3
   dbe34:	bf0e      	itee	eq
   dbe36:	460b      	moveq	r3, r1
   dbe38:	fb91 f2f3 	sdivne	r2, r1, r3
   dbe3c:	fb03 1312 	mlsne	r3, r3, r2, r1
   dbe40:	4a0a      	ldr	r2, [pc, #40]	; (dbe6c <strftime+0x538>)
   dbe42:	490b      	ldr	r1, [pc, #44]	; (dbe70 <strftime+0x53c>)
   dbe44:	2849      	cmp	r0, #73	; 0x49
   dbe46:	bf08      	it	eq
   dbe48:	460a      	moveq	r2, r1
   dbe4a:	e6d4      	b.n	dbbf6 <strftime+0x2c2>
   dbe4c:	69eb      	ldr	r3, [r5, #28]
   dbe4e:	4a0e      	ldr	r2, [pc, #56]	; (dbe88 <strftime+0x554>)
   dbe50:	3301      	adds	r3, #1
   dbe52:	e6d0      	b.n	dbbf6 <strftime+0x2c2>
   dbe54:	fffff894 	.word	0xfffff894
   dbe58:	000ddc7b 	.word	0x000ddc7b
   dbe5c:	000dd63e 	.word	0x000dd63e
   dbe60:	000ddc6c 	.word	0x000ddc6c
   dbe64:	000ddc73 	.word	0x000ddc73
   dbe68:	000ddc7d 	.word	0x000ddc7d
   dbe6c:	000ddc7f 	.word	0x000ddc7f
   dbe70:	000ddc8d 	.word	0x000ddc8d
   dbe74:	000ddc83 	.word	0x000ddc83
   dbe78:	000ddc92 	.word	0x000ddc92
   dbe7c:	000ddc96 	.word	0x000ddc96
   dbe80:	fffff895 	.word	0xfffff895
   dbe84:	000ddc9e 	.word	0x000ddc9e
   dbe88:	000ddca2 	.word	0x000ddca2
   dbe8c:	692b      	ldr	r3, [r5, #16]
   dbe8e:	3301      	adds	r3, #1
   dbe90:	e13d      	b.n	dc10e <strftime+0x7da>
   dbe92:	686b      	ldr	r3, [r5, #4]
   dbe94:	e13b      	b.n	dc10e <strftime+0x7da>
   dbe96:	9b02      	ldr	r3, [sp, #8]
   dbe98:	429c      	cmp	r4, r3
   dbe9a:	f080 81f5 	bcs.w	dc288 <strftime+0x954>
   dbe9e:	230a      	movs	r3, #10
   dbea0:	e1e5      	b.n	dc26e <strftime+0x93a>
   dbea2:	68ab      	ldr	r3, [r5, #8]
   dbea4:	9a03      	ldr	r2, [sp, #12]
   dbea6:	2b0b      	cmp	r3, #11
   dbea8:	bfcc      	ite	gt
   dbeaa:	23a4      	movgt	r3, #164	; 0xa4
   dbeac:	23a0      	movle	r3, #160	; 0xa0
   dbeae:	4413      	add	r3, r2
   dbeb0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dbeb4:	4640      	mov	r0, r8
   dbeb6:	f000 f9f1 	bl	dc29c <strlen>
   dbeba:	4bb2      	ldr	r3, [pc, #712]	; (dc184 <strftime+0x850>)
   dbebc:	f8d3 e000 	ldr.w	lr, [r3]
   dbec0:	1939      	adds	r1, r7, r4
   dbec2:	4642      	mov	r2, r8
   dbec4:	4420      	add	r0, r4
   dbec6:	4284      	cmp	r4, r0
   dbec8:	f000 81d3 	beq.w	dc272 <strftime+0x93e>
   dbecc:	9b02      	ldr	r3, [sp, #8]
   dbece:	429c      	cmp	r4, r3
   dbed0:	f080 81da 	bcs.w	dc288 <strftime+0x954>
   dbed4:	f899 3000 	ldrb.w	r3, [r9]
   dbed8:	2b50      	cmp	r3, #80	; 0x50
   dbeda:	f104 0401 	add.w	r4, r4, #1
   dbede:	7813      	ldrb	r3, [r2, #0]
   dbee0:	d10a      	bne.n	dbef8 <strftime+0x5c4>
   dbee2:	eb0e 0c03 	add.w	ip, lr, r3
   dbee6:	f89c c001 	ldrb.w	ip, [ip, #1]
   dbeea:	f00c 0c03 	and.w	ip, ip, #3
   dbeee:	f1bc 0f01 	cmp.w	ip, #1
   dbef2:	bf08      	it	eq
   dbef4:	3320      	addeq	r3, #32
   dbef6:	b2db      	uxtb	r3, r3
   dbef8:	f801 3b01 	strb.w	r3, [r1], #1
   dbefc:	3201      	adds	r2, #1
   dbefe:	e7e2      	b.n	dbec6 <strftime+0x592>
   dbf00:	686b      	ldr	r3, [r5, #4]
   dbf02:	9300      	str	r3, [sp, #0]
   dbf04:	4aa0      	ldr	r2, [pc, #640]	; (dc188 <strftime+0x854>)
   dbf06:	68ab      	ldr	r3, [r5, #8]
   dbf08:	e139      	b.n	dc17e <strftime+0x84a>
   dbf0a:	6a2b      	ldr	r3, [r5, #32]
   dbf0c:	2b00      	cmp	r3, #0
   dbf0e:	db17      	blt.n	dbf40 <strftime+0x60c>
   dbf10:	f000 fbc4 	bl	dc69c <__tz_lock>
   dbf14:	9b06      	ldr	r3, [sp, #24]
   dbf16:	b91b      	cbnz	r3, dbf20 <strftime+0x5ec>
   dbf18:	f000 fbc2 	bl	dc6a0 <_tzset_unlocked>
   dbf1c:	2301      	movs	r3, #1
   dbf1e:	9306      	str	r3, [sp, #24]
   dbf20:	f000 fda0 	bl	dca64 <__gettzinfo>
   dbf24:	6a2b      	ldr	r3, [r5, #32]
   dbf26:	2b00      	cmp	r3, #0
   dbf28:	bfd4      	ite	le
   dbf2a:	2300      	movle	r3, #0
   dbf2c:	2301      	movgt	r3, #1
   dbf2e:	221c      	movs	r2, #28
   dbf30:	fb02 0003 	mla	r0, r2, r3, r0
   dbf34:	6a03      	ldr	r3, [r0, #32]
   dbf36:	f1c3 0800 	rsb	r8, r3, #0
   dbf3a:	f000 fbb0 	bl	dc69e <__tz_unlock>
   dbf3e:	e001      	b.n	dbf44 <strftime+0x610>
   dbf40:	f04f 0800 	mov.w	r8, #0
   dbf44:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dbf48:	4670      	mov	r0, lr
   dbf4a:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dbf4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dbf52:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbf56:	2a00      	cmp	r2, #0
   dbf58:	f173 0b00 	sbcs.w	fp, r3, #0
   dbf5c:	ebc4 0c06 	rsb	ip, r4, r6
   dbf60:	eb07 0a04 	add.w	sl, r7, r4
   dbf64:	da03      	bge.n	dbf6e <strftime+0x63a>
   dbf66:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dbf6a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbf6e:	0891      	lsrs	r1, r2, #2
   dbf70:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dbf74:	109b      	asrs	r3, r3, #2
   dbf76:	9104      	str	r1, [sp, #16]
   dbf78:	9305      	str	r3, [sp, #20]
   dbf7a:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   dbf7e:	2364      	movs	r3, #100	; 0x64
   dbf80:	fb91 f1f3 	sdiv	r1, r1, r3
   dbf84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dbf88:	1a52      	subs	r2, r2, r1
   dbf8a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dbf8e:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dbf92:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbf96:	fb90 f1f1 	sdiv	r1, r0, r1
   dbf9a:	1852      	adds	r2, r2, r1
   dbf9c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbfa0:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dbfa4:	f240 116d 	movw	r1, #365	; 0x16d
   dbfa8:	fb01 fe0e 	mul.w	lr, r1, lr
   dbfac:	69e9      	ldr	r1, [r5, #28]
   dbfae:	eb12 020e 	adds.w	r2, r2, lr
   dbfb2:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dbfb6:	1852      	adds	r2, r2, r1
   dbfb8:	f04f 0e18 	mov.w	lr, #24
   dbfbc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbfc0:	fba2 010e 	umull	r0, r1, r2, lr
   dbfc4:	fb0e 1103 	mla	r1, lr, r3, r1
   dbfc8:	68ab      	ldr	r3, [r5, #8]
   dbfca:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dbfce:	18c0      	adds	r0, r0, r3
   dbfd0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbfd4:	fba0 230e 	umull	r2, r3, r0, lr
   dbfd8:	fb0e 3301 	mla	r3, lr, r1, r3
   dbfdc:	6869      	ldr	r1, [r5, #4]
   dbfde:	1852      	adds	r2, r2, r1
   dbfe0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbfe4:	fba2 010e 	umull	r0, r1, r2, lr
   dbfe8:	fb0e 1103 	mla	r1, lr, r3, r1
   dbfec:	682b      	ldr	r3, [r5, #0]
   dbfee:	4a67      	ldr	r2, [pc, #412]	; (dc18c <strftime+0x858>)
   dbff0:	18c0      	adds	r0, r0, r3
   dbff2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbff6:	ebb0 0008 	subs.w	r0, r0, r8
   dbffa:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dbffe:	e9cd 0100 	strd	r0, r1, [sp]
   dc002:	4661      	mov	r1, ip
   dc004:	4650      	mov	r0, sl
   dc006:	f7fc fa0b 	bl	d8420 <sniprintf>
   dc00a:	e5f8      	b.n	dbbfe <strftime+0x2ca>
   dc00c:	682b      	ldr	r3, [r5, #0]
   dc00e:	e07e      	b.n	dc10e <strftime+0x7da>
   dc010:	9b02      	ldr	r3, [sp, #8]
   dc012:	429c      	cmp	r4, r3
   dc014:	f080 8138 	bcs.w	dc288 <strftime+0x954>
   dc018:	2309      	movs	r3, #9
   dc01a:	e128      	b.n	dc26e <strftime+0x93a>
   dc01c:	682b      	ldr	r3, [r5, #0]
   dc01e:	9301      	str	r3, [sp, #4]
   dc020:	686b      	ldr	r3, [r5, #4]
   dc022:	9300      	str	r3, [sp, #0]
   dc024:	4a5a      	ldr	r2, [pc, #360]	; (dc190 <strftime+0x85c>)
   dc026:	68ab      	ldr	r3, [r5, #8]
   dc028:	1b31      	subs	r1, r6, r4
   dc02a:	1938      	adds	r0, r7, r4
   dc02c:	e60d      	b.n	dbc4a <strftime+0x316>
   dc02e:	9b02      	ldr	r3, [sp, #8]
   dc030:	429c      	cmp	r4, r3
   dc032:	f080 8129 	bcs.w	dc288 <strftime+0x954>
   dc036:	69ab      	ldr	r3, [r5, #24]
   dc038:	1c62      	adds	r2, r4, #1
   dc03a:	b90b      	cbnz	r3, dc040 <strftime+0x70c>
   dc03c:	2337      	movs	r3, #55	; 0x37
   dc03e:	e000      	b.n	dc042 <strftime+0x70e>
   dc040:	3330      	adds	r3, #48	; 0x30
   dc042:	553b      	strb	r3, [r7, r4]
   dc044:	4614      	mov	r4, r2
   dc046:	e114      	b.n	dc272 <strftime+0x93e>
   dc048:	69eb      	ldr	r3, [r5, #28]
   dc04a:	69aa      	ldr	r2, [r5, #24]
   dc04c:	3307      	adds	r3, #7
   dc04e:	1a9b      	subs	r3, r3, r2
   dc050:	2207      	movs	r2, #7
   dc052:	fb93 f3f2 	sdiv	r3, r3, r2
   dc056:	e05a      	b.n	dc10e <strftime+0x7da>
   dc058:	4628      	mov	r0, r5
   dc05a:	f7ff fc0a 	bl	db872 <iso_year_adjust>
   dc05e:	69aa      	ldr	r2, [r5, #24]
   dc060:	b10a      	cbz	r2, dc066 <strftime+0x732>
   dc062:	1e53      	subs	r3, r2, #1
   dc064:	e000      	b.n	dc068 <strftime+0x734>
   dc066:	2306      	movs	r3, #6
   dc068:	2800      	cmp	r0, #0
   dc06a:	dc2f      	bgt.n	dc0cc <strftime+0x798>
   dc06c:	69ea      	ldr	r2, [r5, #28]
   dc06e:	d101      	bne.n	dc074 <strftime+0x740>
   dc070:	320a      	adds	r2, #10
   dc072:	e03b      	b.n	dc0ec <strftime+0x7b8>
   dc074:	1a9a      	subs	r2, r3, r2
   dc076:	696b      	ldr	r3, [r5, #20]
   dc078:	f240 716b 	movw	r1, #1899	; 0x76b
   dc07c:	2b00      	cmp	r3, #0
   dc07e:	bfb4      	ite	lt
   dc080:	4608      	movlt	r0, r1
   dc082:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dc086:	4418      	add	r0, r3
   dc088:	0781      	lsls	r1, r0, #30
   dc08a:	d107      	bne.n	dc09c <strftime+0x768>
   dc08c:	4601      	mov	r1, r0
   dc08e:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dc092:	fb90 f0fe 	sdiv	r0, r0, lr
   dc096:	fb0e 1110 	mls	r1, lr, r0, r1
   dc09a:	b981      	cbnz	r1, dc0be <strftime+0x78a>
   dc09c:	2b00      	cmp	r3, #0
   dc09e:	f240 716b 	movw	r1, #1899	; 0x76b
   dc0a2:	bfa8      	it	ge
   dc0a4:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dc0a8:	4419      	add	r1, r3
   dc0aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dc0ae:	fb91 f0f3 	sdiv	r0, r1, r3
   dc0b2:	fb03 1110 	mls	r1, r3, r0, r1
   dc0b6:	fab1 f181 	clz	r1, r1
   dc0ba:	0949      	lsrs	r1, r1, #5
   dc0bc:	e000      	b.n	dc0c0 <strftime+0x78c>
   dc0be:	2101      	movs	r1, #1
   dc0c0:	1a52      	subs	r2, r2, r1
   dc0c2:	2a05      	cmp	r2, #5
   dc0c4:	bfb4      	ite	lt
   dc0c6:	2335      	movlt	r3, #53	; 0x35
   dc0c8:	2334      	movge	r3, #52	; 0x34
   dc0ca:	e020      	b.n	dc10e <strftime+0x7da>
   dc0cc:	2301      	movs	r3, #1
   dc0ce:	e01e      	b.n	dc10e <strftime+0x7da>
   dc0d0:	9b02      	ldr	r3, [sp, #8]
   dc0d2:	429c      	cmp	r4, r3
   dc0d4:	f080 80d8 	bcs.w	dc288 <strftime+0x954>
   dc0d8:	69ab      	ldr	r3, [r5, #24]
   dc0da:	3330      	adds	r3, #48	; 0x30
   dc0dc:	e0c7      	b.n	dc26e <strftime+0x93a>
   dc0de:	69aa      	ldr	r2, [r5, #24]
   dc0e0:	b10a      	cbz	r2, dc0e6 <strftime+0x7b2>
   dc0e2:	1e53      	subs	r3, r2, #1
   dc0e4:	e000      	b.n	dc0e8 <strftime+0x7b4>
   dc0e6:	2306      	movs	r3, #6
   dc0e8:	69ea      	ldr	r2, [r5, #28]
   dc0ea:	3207      	adds	r2, #7
   dc0ec:	1ad2      	subs	r2, r2, r3
   dc0ee:	2307      	movs	r3, #7
   dc0f0:	fb92 f3f3 	sdiv	r3, r2, r3
   dc0f4:	e00b      	b.n	dc10e <strftime+0x7da>
   dc0f6:	6968      	ldr	r0, [r5, #20]
   dc0f8:	2800      	cmp	r0, #0
   dc0fa:	da03      	bge.n	dc104 <strftime+0x7d0>
   dc0fc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc100:	f000 fc54 	bl	dc9ac <abs>
   dc104:	2364      	movs	r3, #100	; 0x64
   dc106:	fb90 f2f3 	sdiv	r2, r0, r3
   dc10a:	fb02 0313 	mls	r3, r2, r3, r0
   dc10e:	4a21      	ldr	r2, [pc, #132]	; (dc194 <strftime+0x860>)
   dc110:	e571      	b.n	dbbf6 <strftime+0x2c2>
   dc112:	696b      	ldr	r3, [r5, #20]
   dc114:	4a20      	ldr	r2, [pc, #128]	; (dc198 <strftime+0x864>)
   dc116:	4293      	cmp	r3, r2
   dc118:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc11c:	da05      	bge.n	dc12a <strftime+0x7f6>
   dc11e:	232d      	movs	r3, #45	; 0x2d
   dc120:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc124:	f1cb 0b00 	rsb	fp, fp, #0
   dc128:	e008      	b.n	dc13c <strftime+0x808>
   dc12a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc12e:	d10d      	bne.n	dc14c <strftime+0x818>
   dc130:	f242 730f 	movw	r3, #9999	; 0x270f
   dc134:	459b      	cmp	fp, r3
   dc136:	d911      	bls.n	dc15c <strftime+0x828>
   dc138:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc13c:	f1b8 0f00 	cmp.w	r8, #0
   dc140:	d001      	beq.n	dc146 <strftime+0x812>
   dc142:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc146:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc14a:	e000      	b.n	dc14e <strftime+0x81a>
   dc14c:	ab0a      	add	r3, sp, #40	; 0x28
   dc14e:	2225      	movs	r2, #37	; 0x25
   dc150:	701a      	strb	r2, [r3, #0]
   dc152:	f1ba 0f00 	cmp.w	sl, #0
   dc156:	d108      	bne.n	dc16a <strftime+0x836>
   dc158:	1c58      	adds	r0, r3, #1
   dc15a:	e009      	b.n	dc170 <strftime+0x83c>
   dc15c:	f1b8 0f00 	cmp.w	r8, #0
   dc160:	d1f4      	bne.n	dc14c <strftime+0x818>
   dc162:	2325      	movs	r3, #37	; 0x25
   dc164:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc168:	ab0a      	add	r3, sp, #40	; 0x28
   dc16a:	2230      	movs	r2, #48	; 0x30
   dc16c:	1c98      	adds	r0, r3, #2
   dc16e:	705a      	strb	r2, [r3, #1]
   dc170:	490a      	ldr	r1, [pc, #40]	; (dc19c <strftime+0x868>)
   dc172:	f7ff fb5b 	bl	db82c <strcpy>
   dc176:	f8cd b000 	str.w	fp, [sp]
   dc17a:	4643      	mov	r3, r8
   dc17c:	aa0a      	add	r2, sp, #40	; 0x28
   dc17e:	1b31      	subs	r1, r6, r4
   dc180:	1938      	adds	r0, r7, r4
   dc182:	e03e      	b.n	dc202 <strftime+0x8ce>
   dc184:	2003ddf0 	.word	0x2003ddf0
   dc188:	000ddcb1 	.word	0x000ddcb1
   dc18c:	000ddca7 	.word	0x000ddca7
   dc190:	000ddcac 	.word	0x000ddcac
   dc194:	000ddc8d 	.word	0x000ddc8d
   dc198:	fffff894 	.word	0xfffff894
   dc19c:	000ddc9e 	.word	0x000ddc9e
   dc1a0:	6a2b      	ldr	r3, [r5, #32]
   dc1a2:	2b00      	cmp	r3, #0
   dc1a4:	db65      	blt.n	dc272 <strftime+0x93e>
   dc1a6:	f000 fa79 	bl	dc69c <__tz_lock>
   dc1aa:	9b06      	ldr	r3, [sp, #24]
   dc1ac:	b91b      	cbnz	r3, dc1b6 <strftime+0x882>
   dc1ae:	f000 fa77 	bl	dc6a0 <_tzset_unlocked>
   dc1b2:	2301      	movs	r3, #1
   dc1b4:	9306      	str	r3, [sp, #24]
   dc1b6:	f000 fc55 	bl	dca64 <__gettzinfo>
   dc1ba:	6a2b      	ldr	r3, [r5, #32]
   dc1bc:	2b00      	cmp	r3, #0
   dc1be:	bfd4      	ite	le
   dc1c0:	2300      	movle	r3, #0
   dc1c2:	2301      	movgt	r3, #1
   dc1c4:	221c      	movs	r2, #28
   dc1c6:	fb02 0003 	mla	r0, r2, r3, r0
   dc1ca:	eb07 0a04 	add.w	sl, r7, r4
   dc1ce:	6a03      	ldr	r3, [r0, #32]
   dc1d0:	f1c3 0800 	rsb	r8, r3, #0
   dc1d4:	f000 fa63 	bl	dc69e <__tz_unlock>
   dc1d8:	233c      	movs	r3, #60	; 0x3c
   dc1da:	fb98 f0f3 	sdiv	r0, r8, r3
   dc1de:	9307      	str	r3, [sp, #28]
   dc1e0:	f000 fc44 	bl	dca6c <labs>
   dc1e4:	9b07      	ldr	r3, [sp, #28]
   dc1e6:	fb90 f2f3 	sdiv	r2, r0, r3
   dc1ea:	ebc4 0b06 	rsb	fp, r4, r6
   dc1ee:	fb02 0013 	mls	r0, r2, r3, r0
   dc1f2:	4a28      	ldr	r2, [pc, #160]	; (dc294 <strftime+0x960>)
   dc1f4:	9000      	str	r0, [sp, #0]
   dc1f6:	4659      	mov	r1, fp
   dc1f8:	4650      	mov	r0, sl
   dc1fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc1fe:	fb98 f3f3 	sdiv	r3, r8, r3
   dc202:	f7fc f90d 	bl	d8420 <sniprintf>
   dc206:	e4fa      	b.n	dbbfe <strftime+0x2ca>
   dc208:	4404      	add	r4, r0
   dc20a:	42a6      	cmp	r6, r4
   dc20c:	d831      	bhi.n	dc272 <strftime+0x93e>
   dc20e:	e03b      	b.n	dc288 <strftime+0x954>
   dc210:	6a2b      	ldr	r3, [r5, #32]
   dc212:	2b00      	cmp	r3, #0
   dc214:	db2d      	blt.n	dc272 <strftime+0x93e>
   dc216:	f000 fa41 	bl	dc69c <__tz_lock>
   dc21a:	9b06      	ldr	r3, [sp, #24]
   dc21c:	b91b      	cbnz	r3, dc226 <strftime+0x8f2>
   dc21e:	f000 fa3f 	bl	dc6a0 <_tzset_unlocked>
   dc222:	2301      	movs	r3, #1
   dc224:	9306      	str	r3, [sp, #24]
   dc226:	6a2b      	ldr	r3, [r5, #32]
   dc228:	4a1b      	ldr	r2, [pc, #108]	; (dc298 <strftime+0x964>)
   dc22a:	2b00      	cmp	r3, #0
   dc22c:	bfd4      	ite	le
   dc22e:	2300      	movle	r3, #0
   dc230:	2301      	movgt	r3, #1
   dc232:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc236:	4640      	mov	r0, r8
   dc238:	f000 f830 	bl	dc29c <strlen>
   dc23c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc240:	193b      	adds	r3, r7, r4
   dc242:	4420      	add	r0, r4
   dc244:	4284      	cmp	r4, r0
   dc246:	d00b      	beq.n	dc260 <strftime+0x92c>
   dc248:	9a02      	ldr	r2, [sp, #8]
   dc24a:	4294      	cmp	r4, r2
   dc24c:	d205      	bcs.n	dc25a <strftime+0x926>
   dc24e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc252:	f803 2b01 	strb.w	r2, [r3], #1
   dc256:	3401      	adds	r4, #1
   dc258:	e7f4      	b.n	dc244 <strftime+0x910>
   dc25a:	f000 fa20 	bl	dc69e <__tz_unlock>
   dc25e:	e013      	b.n	dc288 <strftime+0x954>
   dc260:	f000 fa1d 	bl	dc69e <__tz_unlock>
   dc264:	e005      	b.n	dc272 <strftime+0x93e>
   dc266:	9b02      	ldr	r3, [sp, #8]
   dc268:	429c      	cmp	r4, r3
   dc26a:	d20d      	bcs.n	dc288 <strftime+0x954>
   dc26c:	2325      	movs	r3, #37	; 0x25
   dc26e:	553b      	strb	r3, [r7, r4]
   dc270:	3401      	adds	r4, #1
   dc272:	f899 3000 	ldrb.w	r3, [r9]
   dc276:	b11b      	cbz	r3, dc280 <strftime+0x94c>
   dc278:	f109 0901 	add.w	r9, r9, #1
   dc27c:	f7ff bb69 	b.w	db952 <strftime+0x1e>
   dc280:	b126      	cbz	r6, dc28c <strftime+0x958>
   dc282:	2300      	movs	r3, #0
   dc284:	553b      	strb	r3, [r7, r4]
   dc286:	e001      	b.n	dc28c <strftime+0x958>
   dc288:	2000      	movs	r0, #0
   dc28a:	e000      	b.n	dc28e <strftime+0x95a>
   dc28c:	4620      	mov	r0, r4
   dc28e:	b013      	add	sp, #76	; 0x4c
   dc290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc294:	000ddcbb 	.word	0x000ddcbb
   dc298:	2003de58 	.word	0x2003de58

000dc29c <strlen>:
   dc29c:	4603      	mov	r3, r0
   dc29e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc2a2:	2a00      	cmp	r2, #0
   dc2a4:	d1fb      	bne.n	dc29e <strlen+0x2>
   dc2a6:	1a18      	subs	r0, r3, r0
   dc2a8:	3801      	subs	r0, #1
   dc2aa:	4770      	bx	lr

000dc2ac <strncmp>:
   dc2ac:	b530      	push	{r4, r5, lr}
   dc2ae:	b182      	cbz	r2, dc2d2 <strncmp+0x26>
   dc2b0:	1e45      	subs	r5, r0, #1
   dc2b2:	3901      	subs	r1, #1
   dc2b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc2b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc2bc:	42a3      	cmp	r3, r4
   dc2be:	d106      	bne.n	dc2ce <strncmp+0x22>
   dc2c0:	43ec      	mvns	r4, r5
   dc2c2:	4414      	add	r4, r2
   dc2c4:	42e0      	cmn	r0, r4
   dc2c6:	d001      	beq.n	dc2cc <strncmp+0x20>
   dc2c8:	2b00      	cmp	r3, #0
   dc2ca:	d1f3      	bne.n	dc2b4 <strncmp+0x8>
   dc2cc:	461c      	mov	r4, r3
   dc2ce:	1b18      	subs	r0, r3, r4
   dc2d0:	bd30      	pop	{r4, r5, pc}
   dc2d2:	4610      	mov	r0, r2
   dc2d4:	bd30      	pop	{r4, r5, pc}

000dc2d6 <strncpy>:
   dc2d6:	b510      	push	{r4, lr}
   dc2d8:	4603      	mov	r3, r0
   dc2da:	b142      	cbz	r2, dc2ee <strncpy+0x18>
   dc2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc2e0:	f803 4b01 	strb.w	r4, [r3], #1
   dc2e4:	3a01      	subs	r2, #1
   dc2e6:	2c00      	cmp	r4, #0
   dc2e8:	d1f7      	bne.n	dc2da <strncpy+0x4>
   dc2ea:	441a      	add	r2, r3
   dc2ec:	e000      	b.n	dc2f0 <strncpy+0x1a>
   dc2ee:	bd10      	pop	{r4, pc}
   dc2f0:	4293      	cmp	r3, r2
   dc2f2:	d002      	beq.n	dc2fa <strncpy+0x24>
   dc2f4:	f803 4b01 	strb.w	r4, [r3], #1
   dc2f8:	e7fa      	b.n	dc2f0 <strncpy+0x1a>
   dc2fa:	bd10      	pop	{r4, pc}

000dc2fc <_strtol_r>:
   dc2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc300:	4680      	mov	r8, r0
   dc302:	4840      	ldr	r0, [pc, #256]	; (dc404 <_strtol_r+0x108>)
   dc304:	f8d0 9000 	ldr.w	r9, [r0]
   dc308:	460f      	mov	r7, r1
   dc30a:	463d      	mov	r5, r7
   dc30c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc310:	eb09 0004 	add.w	r0, r9, r4
   dc314:	7840      	ldrb	r0, [r0, #1]
   dc316:	f000 0008 	and.w	r0, r0, #8
   dc31a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dc31e:	b108      	cbz	r0, dc324 <_strtol_r+0x28>
   dc320:	462f      	mov	r7, r5
   dc322:	e7f2      	b.n	dc30a <_strtol_r+0xe>
   dc324:	2c2d      	cmp	r4, #45	; 0x2d
   dc326:	d103      	bne.n	dc330 <_strtol_r+0x34>
   dc328:	1cbd      	adds	r5, r7, #2
   dc32a:	787c      	ldrb	r4, [r7, #1]
   dc32c:	2601      	movs	r6, #1
   dc32e:	e003      	b.n	dc338 <_strtol_r+0x3c>
   dc330:	2c2b      	cmp	r4, #43	; 0x2b
   dc332:	bf04      	itt	eq
   dc334:	787c      	ldrbeq	r4, [r7, #1]
   dc336:	1cbd      	addeq	r5, r7, #2
   dc338:	b113      	cbz	r3, dc340 <_strtol_r+0x44>
   dc33a:	2b10      	cmp	r3, #16
   dc33c:	d10a      	bne.n	dc354 <_strtol_r+0x58>
   dc33e:	e05b      	b.n	dc3f8 <_strtol_r+0xfc>
   dc340:	2c30      	cmp	r4, #48	; 0x30
   dc342:	d157      	bne.n	dc3f4 <_strtol_r+0xf8>
   dc344:	7828      	ldrb	r0, [r5, #0]
   dc346:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc34a:	2858      	cmp	r0, #88	; 0x58
   dc34c:	d14d      	bne.n	dc3ea <_strtol_r+0xee>
   dc34e:	786c      	ldrb	r4, [r5, #1]
   dc350:	2310      	movs	r3, #16
   dc352:	3502      	adds	r5, #2
   dc354:	2e00      	cmp	r6, #0
   dc356:	bf14      	ite	ne
   dc358:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dc35c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dc360:	2700      	movs	r7, #0
   dc362:	fbbc faf3 	udiv	sl, ip, r3
   dc366:	4638      	mov	r0, r7
   dc368:	fb03 cc1a 	mls	ip, r3, sl, ip
   dc36c:	eb09 0e04 	add.w	lr, r9, r4
   dc370:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc374:	f01e 0f04 	tst.w	lr, #4
   dc378:	d001      	beq.n	dc37e <_strtol_r+0x82>
   dc37a:	3c30      	subs	r4, #48	; 0x30
   dc37c:	e00b      	b.n	dc396 <_strtol_r+0x9a>
   dc37e:	f01e 0e03 	ands.w	lr, lr, #3
   dc382:	d01b      	beq.n	dc3bc <_strtol_r+0xc0>
   dc384:	f1be 0f01 	cmp.w	lr, #1
   dc388:	bf0c      	ite	eq
   dc38a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc38e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc392:	ebce 0404 	rsb	r4, lr, r4
   dc396:	42a3      	cmp	r3, r4
   dc398:	dd10      	ble.n	dc3bc <_strtol_r+0xc0>
   dc39a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dc39e:	d00a      	beq.n	dc3b6 <_strtol_r+0xba>
   dc3a0:	4550      	cmp	r0, sl
   dc3a2:	d806      	bhi.n	dc3b2 <_strtol_r+0xb6>
   dc3a4:	d101      	bne.n	dc3aa <_strtol_r+0xae>
   dc3a6:	4564      	cmp	r4, ip
   dc3a8:	dc03      	bgt.n	dc3b2 <_strtol_r+0xb6>
   dc3aa:	fb03 4000 	mla	r0, r3, r0, r4
   dc3ae:	2701      	movs	r7, #1
   dc3b0:	e001      	b.n	dc3b6 <_strtol_r+0xba>
   dc3b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc3b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc3ba:	e7d7      	b.n	dc36c <_strtol_r+0x70>
   dc3bc:	1c7b      	adds	r3, r7, #1
   dc3be:	d10c      	bne.n	dc3da <_strtol_r+0xde>
   dc3c0:	2e00      	cmp	r6, #0
   dc3c2:	f04f 0322 	mov.w	r3, #34	; 0x22
   dc3c6:	bf14      	ite	ne
   dc3c8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dc3cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc3d0:	f8c8 3000 	str.w	r3, [r8]
   dc3d4:	b92a      	cbnz	r2, dc3e2 <_strtol_r+0xe6>
   dc3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc3da:	b106      	cbz	r6, dc3de <_strtol_r+0xe2>
   dc3dc:	4240      	negs	r0, r0
   dc3de:	b172      	cbz	r2, dc3fe <_strtol_r+0x102>
   dc3e0:	b107      	cbz	r7, dc3e4 <_strtol_r+0xe8>
   dc3e2:	1e69      	subs	r1, r5, #1
   dc3e4:	6011      	str	r1, [r2, #0]
   dc3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc3ea:	2430      	movs	r4, #48	; 0x30
   dc3ec:	2b00      	cmp	r3, #0
   dc3ee:	d1b1      	bne.n	dc354 <_strtol_r+0x58>
   dc3f0:	2308      	movs	r3, #8
   dc3f2:	e7af      	b.n	dc354 <_strtol_r+0x58>
   dc3f4:	230a      	movs	r3, #10
   dc3f6:	e7ad      	b.n	dc354 <_strtol_r+0x58>
   dc3f8:	2c30      	cmp	r4, #48	; 0x30
   dc3fa:	d0a3      	beq.n	dc344 <_strtol_r+0x48>
   dc3fc:	e7aa      	b.n	dc354 <_strtol_r+0x58>
   dc3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc402:	bf00      	nop
   dc404:	2003ddf0 	.word	0x2003ddf0

000dc408 <strtol>:
   dc408:	4613      	mov	r3, r2
   dc40a:	460a      	mov	r2, r1
   dc40c:	4601      	mov	r1, r0
   dc40e:	4802      	ldr	r0, [pc, #8]	; (dc418 <strtol+0x10>)
   dc410:	6800      	ldr	r0, [r0, #0]
   dc412:	f7ff bf73 	b.w	dc2fc <_strtol_r>
   dc416:	bf00      	nop
   dc418:	2003de54 	.word	0x2003de54

000dc41c <_strtoul_r>:
   dc41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc420:	4680      	mov	r8, r0
   dc422:	483c      	ldr	r0, [pc, #240]	; (dc514 <_strtoul_r+0xf8>)
   dc424:	f8d0 9000 	ldr.w	r9, [r0]
   dc428:	460e      	mov	r6, r1
   dc42a:	4635      	mov	r5, r6
   dc42c:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc430:	eb09 0004 	add.w	r0, r9, r4
   dc434:	7840      	ldrb	r0, [r0, #1]
   dc436:	f000 0008 	and.w	r0, r0, #8
   dc43a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc43e:	b108      	cbz	r0, dc444 <_strtoul_r+0x28>
   dc440:	462e      	mov	r6, r5
   dc442:	e7f2      	b.n	dc42a <_strtoul_r+0xe>
   dc444:	2c2d      	cmp	r4, #45	; 0x2d
   dc446:	d103      	bne.n	dc450 <_strtoul_r+0x34>
   dc448:	1cb5      	adds	r5, r6, #2
   dc44a:	7874      	ldrb	r4, [r6, #1]
   dc44c:	2701      	movs	r7, #1
   dc44e:	e003      	b.n	dc458 <_strtoul_r+0x3c>
   dc450:	2c2b      	cmp	r4, #43	; 0x2b
   dc452:	bf04      	itt	eq
   dc454:	7874      	ldrbeq	r4, [r6, #1]
   dc456:	1cb5      	addeq	r5, r6, #2
   dc458:	b113      	cbz	r3, dc460 <_strtoul_r+0x44>
   dc45a:	2b10      	cmp	r3, #16
   dc45c:	d10a      	bne.n	dc474 <_strtoul_r+0x58>
   dc45e:	e053      	b.n	dc508 <_strtoul_r+0xec>
   dc460:	2c30      	cmp	r4, #48	; 0x30
   dc462:	d14f      	bne.n	dc504 <_strtoul_r+0xe8>
   dc464:	7828      	ldrb	r0, [r5, #0]
   dc466:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc46a:	2858      	cmp	r0, #88	; 0x58
   dc46c:	d145      	bne.n	dc4fa <_strtoul_r+0xde>
   dc46e:	786c      	ldrb	r4, [r5, #1]
   dc470:	2310      	movs	r3, #16
   dc472:	3502      	adds	r5, #2
   dc474:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc478:	2600      	movs	r6, #0
   dc47a:	fbbc fcf3 	udiv	ip, ip, r3
   dc47e:	fb03 fa0c 	mul.w	sl, r3, ip
   dc482:	ea6f 0a0a 	mvn.w	sl, sl
   dc486:	4630      	mov	r0, r6
   dc488:	eb09 0e04 	add.w	lr, r9, r4
   dc48c:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc490:	f01e 0f04 	tst.w	lr, #4
   dc494:	d001      	beq.n	dc49a <_strtoul_r+0x7e>
   dc496:	3c30      	subs	r4, #48	; 0x30
   dc498:	e00b      	b.n	dc4b2 <_strtoul_r+0x96>
   dc49a:	f01e 0e03 	ands.w	lr, lr, #3
   dc49e:	d01a      	beq.n	dc4d6 <_strtoul_r+0xba>
   dc4a0:	f1be 0f01 	cmp.w	lr, #1
   dc4a4:	bf0c      	ite	eq
   dc4a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc4aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc4ae:	ebce 0404 	rsb	r4, lr, r4
   dc4b2:	42a3      	cmp	r3, r4
   dc4b4:	dd0f      	ble.n	dc4d6 <_strtoul_r+0xba>
   dc4b6:	2e00      	cmp	r6, #0
   dc4b8:	db08      	blt.n	dc4cc <_strtoul_r+0xb0>
   dc4ba:	4560      	cmp	r0, ip
   dc4bc:	d806      	bhi.n	dc4cc <_strtoul_r+0xb0>
   dc4be:	d101      	bne.n	dc4c4 <_strtoul_r+0xa8>
   dc4c0:	4554      	cmp	r4, sl
   dc4c2:	dc03      	bgt.n	dc4cc <_strtoul_r+0xb0>
   dc4c4:	fb03 4000 	mla	r0, r3, r0, r4
   dc4c8:	2601      	movs	r6, #1
   dc4ca:	e001      	b.n	dc4d0 <_strtoul_r+0xb4>
   dc4cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc4d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc4d4:	e7d8      	b.n	dc488 <_strtoul_r+0x6c>
   dc4d6:	2e00      	cmp	r6, #0
   dc4d8:	da07      	bge.n	dc4ea <_strtoul_r+0xce>
   dc4da:	2322      	movs	r3, #34	; 0x22
   dc4dc:	f8c8 3000 	str.w	r3, [r8]
   dc4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc4e4:	b92a      	cbnz	r2, dc4f2 <_strtoul_r+0xd6>
   dc4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc4ea:	b107      	cbz	r7, dc4ee <_strtoul_r+0xd2>
   dc4ec:	4240      	negs	r0, r0
   dc4ee:	b172      	cbz	r2, dc50e <_strtoul_r+0xf2>
   dc4f0:	b106      	cbz	r6, dc4f4 <_strtoul_r+0xd8>
   dc4f2:	1e69      	subs	r1, r5, #1
   dc4f4:	6011      	str	r1, [r2, #0]
   dc4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc4fa:	2430      	movs	r4, #48	; 0x30
   dc4fc:	2b00      	cmp	r3, #0
   dc4fe:	d1b9      	bne.n	dc474 <_strtoul_r+0x58>
   dc500:	2308      	movs	r3, #8
   dc502:	e7b7      	b.n	dc474 <_strtoul_r+0x58>
   dc504:	230a      	movs	r3, #10
   dc506:	e7b5      	b.n	dc474 <_strtoul_r+0x58>
   dc508:	2c30      	cmp	r4, #48	; 0x30
   dc50a:	d0ab      	beq.n	dc464 <_strtoul_r+0x48>
   dc50c:	e7b2      	b.n	dc474 <_strtoul_r+0x58>
   dc50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc512:	bf00      	nop
   dc514:	2003ddf0 	.word	0x2003ddf0

000dc518 <strtoul>:
   dc518:	4613      	mov	r3, r2
   dc51a:	460a      	mov	r2, r1
   dc51c:	4601      	mov	r1, r0
   dc51e:	4802      	ldr	r0, [pc, #8]	; (dc528 <strtoul+0x10>)
   dc520:	6800      	ldr	r0, [r0, #0]
   dc522:	f7ff bf7b 	b.w	dc41c <_strtoul_r>
   dc526:	bf00      	nop
   dc528:	2003de54 	.word	0x2003de54

000dc52c <__get_current_time_locale>:
   dc52c:	4b04      	ldr	r3, [pc, #16]	; (dc540 <__get_current_time_locale+0x14>)
   dc52e:	4a05      	ldr	r2, [pc, #20]	; (dc544 <__get_current_time_locale+0x18>)
   dc530:	6818      	ldr	r0, [r3, #0]
   dc532:	4b05      	ldr	r3, [pc, #20]	; (dc548 <__get_current_time_locale+0x1c>)
   dc534:	2800      	cmp	r0, #0
   dc536:	bf14      	ite	ne
   dc538:	4610      	movne	r0, r2
   dc53a:	4618      	moveq	r0, r3
   dc53c:	4770      	bx	lr
   dc53e:	bf00      	nop
   dc540:	2003e6cc 	.word	0x2003e6cc
   dc544:	2003e6d0 	.word	0x2003e6d0
   dc548:	000dddf4 	.word	0x000dddf4

000dc54c <__tzcalc_limits>:
   dc54c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc550:	4604      	mov	r4, r0
   dc552:	f000 fa87 	bl	dca64 <__gettzinfo>
   dc556:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc55a:	429c      	cmp	r4, r3
   dc55c:	f340 8096 	ble.w	dc68c <__tzcalc_limits+0x140>
   dc560:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc564:	18e3      	adds	r3, r4, r3
   dc566:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc56a:	109b      	asrs	r3, r3, #2
   dc56c:	f240 156d 	movw	r5, #365	; 0x16d
   dc570:	fb05 3502 	mla	r5, r5, r2, r3
   dc574:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc578:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc57c:	fb92 f3f3 	sdiv	r3, r2, r3
   dc580:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc584:	442b      	add	r3, r5
   dc586:	18a5      	adds	r5, r4, r2
   dc588:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc58c:	fb95 f5f2 	sdiv	r5, r5, r2
   dc590:	441d      	add	r5, r3
   dc592:	2364      	movs	r3, #100	; 0x64
   dc594:	fb94 f7f2 	sdiv	r7, r4, r2
   dc598:	fb94 f6f3 	sdiv	r6, r4, r3
   dc59c:	fb02 4717 	mls	r7, r2, r7, r4
   dc5a0:	fb03 4616 	mls	r6, r3, r6, r4
   dc5a4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc5a8:	fab7 fe87 	clz	lr, r7
   dc5ac:	9301      	str	r3, [sp, #4]
   dc5ae:	f004 0303 	and.w	r3, r4, #3
   dc5b2:	6044      	str	r4, [r0, #4]
   dc5b4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc5b8:	4601      	mov	r1, r0
   dc5ba:	9300      	str	r3, [sp, #0]
   dc5bc:	f04f 0c07 	mov.w	ip, #7
   dc5c0:	7a0b      	ldrb	r3, [r1, #8]
   dc5c2:	2b4a      	cmp	r3, #74	; 0x4a
   dc5c4:	d10e      	bne.n	dc5e4 <__tzcalc_limits+0x98>
   dc5c6:	694b      	ldr	r3, [r1, #20]
   dc5c8:	9a00      	ldr	r2, [sp, #0]
   dc5ca:	18ec      	adds	r4, r5, r3
   dc5cc:	b902      	cbnz	r2, dc5d0 <__tzcalc_limits+0x84>
   dc5ce:	b906      	cbnz	r6, dc5d2 <__tzcalc_limits+0x86>
   dc5d0:	b927      	cbnz	r7, dc5dc <__tzcalc_limits+0x90>
   dc5d2:	2b3b      	cmp	r3, #59	; 0x3b
   dc5d4:	bfd4      	ite	le
   dc5d6:	2300      	movle	r3, #0
   dc5d8:	2301      	movgt	r3, #1
   dc5da:	e000      	b.n	dc5de <__tzcalc_limits+0x92>
   dc5dc:	2300      	movs	r3, #0
   dc5de:	4423      	add	r3, r4
   dc5e0:	3b01      	subs	r3, #1
   dc5e2:	e03f      	b.n	dc664 <__tzcalc_limits+0x118>
   dc5e4:	2b44      	cmp	r3, #68	; 0x44
   dc5e6:	d102      	bne.n	dc5ee <__tzcalc_limits+0xa2>
   dc5e8:	694b      	ldr	r3, [r1, #20]
   dc5ea:	442b      	add	r3, r5
   dc5ec:	e03a      	b.n	dc664 <__tzcalc_limits+0x118>
   dc5ee:	9b00      	ldr	r3, [sp, #0]
   dc5f0:	b92b      	cbnz	r3, dc5fe <__tzcalc_limits+0xb2>
   dc5f2:	2e00      	cmp	r6, #0
   dc5f4:	bf0c      	ite	eq
   dc5f6:	46f0      	moveq	r8, lr
   dc5f8:	f04f 0801 	movne.w	r8, #1
   dc5fc:	e000      	b.n	dc600 <__tzcalc_limits+0xb4>
   dc5fe:	46f0      	mov	r8, lr
   dc600:	4b24      	ldr	r3, [pc, #144]	; (dc694 <__tzcalc_limits+0x148>)
   dc602:	68cc      	ldr	r4, [r1, #12]
   dc604:	2230      	movs	r2, #48	; 0x30
   dc606:	fb02 3808 	mla	r8, r2, r8, r3
   dc60a:	f1a8 0a04 	sub.w	sl, r8, #4
   dc60e:	46a9      	mov	r9, r5
   dc610:	2301      	movs	r3, #1
   dc612:	42a3      	cmp	r3, r4
   dc614:	da04      	bge.n	dc620 <__tzcalc_limits+0xd4>
   dc616:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc61a:	3301      	adds	r3, #1
   dc61c:	44d9      	add	r9, fp
   dc61e:	e7f8      	b.n	dc612 <__tzcalc_limits+0xc6>
   dc620:	f109 0304 	add.w	r3, r9, #4
   dc624:	fb93 fbfc 	sdiv	fp, r3, ip
   dc628:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc62c:	2c01      	cmp	r4, #1
   dc62e:	ebca 0a03 	rsb	sl, sl, r3
   dc632:	694b      	ldr	r3, [r1, #20]
   dc634:	bfb8      	it	lt
   dc636:	2401      	movlt	r4, #1
   dc638:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc63c:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc640:	690b      	ldr	r3, [r1, #16]
   dc642:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dc646:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc64a:	bf48      	it	mi
   dc64c:	f10a 0a07 	addmi.w	sl, sl, #7
   dc650:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc654:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc658:	4453      	add	r3, sl
   dc65a:	42a3      	cmp	r3, r4
   dc65c:	db01      	blt.n	dc662 <__tzcalc_limits+0x116>
   dc65e:	3b07      	subs	r3, #7
   dc660:	e7fb      	b.n	dc65a <__tzcalc_limits+0x10e>
   dc662:	444b      	add	r3, r9
   dc664:	698c      	ldr	r4, [r1, #24]
   dc666:	4a0c      	ldr	r2, [pc, #48]	; (dc698 <__tzcalc_limits+0x14c>)
   dc668:	fb02 4303 	mla	r3, r2, r3, r4
   dc66c:	6a0c      	ldr	r4, [r1, #32]
   dc66e:	4423      	add	r3, r4
   dc670:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc674:	9b01      	ldr	r3, [sp, #4]
   dc676:	4299      	cmp	r1, r3
   dc678:	d1a2      	bne.n	dc5c0 <__tzcalc_limits+0x74>
   dc67a:	69c3      	ldr	r3, [r0, #28]
   dc67c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc67e:	4293      	cmp	r3, r2
   dc680:	bfac      	ite	ge
   dc682:	2300      	movge	r3, #0
   dc684:	2301      	movlt	r3, #1
   dc686:	6003      	str	r3, [r0, #0]
   dc688:	2001      	movs	r0, #1
   dc68a:	e000      	b.n	dc68e <__tzcalc_limits+0x142>
   dc68c:	2000      	movs	r0, #0
   dc68e:	b003      	add	sp, #12
   dc690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc694:	000ddc0c 	.word	0x000ddc0c
   dc698:	00015180 	.word	0x00015180

000dc69c <__tz_lock>:
   dc69c:	4770      	bx	lr

000dc69e <__tz_unlock>:
   dc69e:	4770      	bx	lr

000dc6a0 <_tzset_unlocked>:
   dc6a0:	4b01      	ldr	r3, [pc, #4]	; (dc6a8 <_tzset_unlocked+0x8>)
   dc6a2:	6818      	ldr	r0, [r3, #0]
   dc6a4:	f000 b802 	b.w	dc6ac <_tzset_unlocked_r>
   dc6a8:	2003de54 	.word	0x2003de54

000dc6ac <_tzset_unlocked_r>:
   dc6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc6b0:	b08d      	sub	sp, #52	; 0x34
   dc6b2:	4607      	mov	r7, r0
   dc6b4:	f000 f9d6 	bl	dca64 <__gettzinfo>
   dc6b8:	49b0      	ldr	r1, [pc, #704]	; (dc97c <_tzset_unlocked_r+0x2d0>)
   dc6ba:	4eb1      	ldr	r6, [pc, #708]	; (dc980 <_tzset_unlocked_r+0x2d4>)
   dc6bc:	4604      	mov	r4, r0
   dc6be:	4638      	mov	r0, r7
   dc6c0:	f000 f9c8 	bl	dca54 <_getenv_r>
   dc6c4:	4605      	mov	r5, r0
   dc6c6:	b960      	cbnz	r0, dc6e2 <_tzset_unlocked_r+0x36>
   dc6c8:	4bae      	ldr	r3, [pc, #696]	; (dc984 <_tzset_unlocked_r+0x2d8>)
   dc6ca:	4aaf      	ldr	r2, [pc, #700]	; (dc988 <_tzset_unlocked_r+0x2dc>)
   dc6cc:	6018      	str	r0, [r3, #0]
   dc6ce:	4baf      	ldr	r3, [pc, #700]	; (dc98c <_tzset_unlocked_r+0x2e0>)
   dc6d0:	6018      	str	r0, [r3, #0]
   dc6d2:	4baf      	ldr	r3, [pc, #700]	; (dc990 <_tzset_unlocked_r+0x2e4>)
   dc6d4:	6830      	ldr	r0, [r6, #0]
   dc6d6:	601a      	str	r2, [r3, #0]
   dc6d8:	605a      	str	r2, [r3, #4]
   dc6da:	f7fb fe79 	bl	d83d0 <free>
   dc6de:	6035      	str	r5, [r6, #0]
   dc6e0:	e148      	b.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc6e2:	6831      	ldr	r1, [r6, #0]
   dc6e4:	b979      	cbnz	r1, dc706 <_tzset_unlocked_r+0x5a>
   dc6e6:	6830      	ldr	r0, [r6, #0]
   dc6e8:	f7fb fe72 	bl	d83d0 <free>
   dc6ec:	4628      	mov	r0, r5
   dc6ee:	f7ff fdd5 	bl	dc29c <strlen>
   dc6f2:	1c41      	adds	r1, r0, #1
   dc6f4:	4638      	mov	r0, r7
   dc6f6:	f7fb feab 	bl	d8450 <_malloc_r>
   dc6fa:	6030      	str	r0, [r6, #0]
   dc6fc:	b148      	cbz	r0, dc712 <_tzset_unlocked_r+0x66>
   dc6fe:	4629      	mov	r1, r5
   dc700:	f7ff f894 	bl	db82c <strcpy>
   dc704:	e005      	b.n	dc712 <_tzset_unlocked_r+0x66>
   dc706:	f7ff f887 	bl	db818 <strcmp>
   dc70a:	2800      	cmp	r0, #0
   dc70c:	f000 8132 	beq.w	dc974 <_tzset_unlocked_r+0x2c8>
   dc710:	e7e9      	b.n	dc6e6 <_tzset_unlocked_r+0x3a>
   dc712:	782b      	ldrb	r3, [r5, #0]
   dc714:	4a9f      	ldr	r2, [pc, #636]	; (dc994 <_tzset_unlocked_r+0x2e8>)
   dc716:	49a0      	ldr	r1, [pc, #640]	; (dc998 <_tzset_unlocked_r+0x2ec>)
   dc718:	2b3a      	cmp	r3, #58	; 0x3a
   dc71a:	bf08      	it	eq
   dc71c:	3501      	addeq	r5, #1
   dc71e:	ae0a      	add	r6, sp, #40	; 0x28
   dc720:	4633      	mov	r3, r6
   dc722:	4628      	mov	r0, r5
   dc724:	f7fb fe6c 	bl	d8400 <siscanf>
   dc728:	2800      	cmp	r0, #0
   dc72a:	f340 8123 	ble.w	dc974 <_tzset_unlocked_r+0x2c8>
   dc72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc730:	18ef      	adds	r7, r5, r3
   dc732:	5ceb      	ldrb	r3, [r5, r3]
   dc734:	2b2d      	cmp	r3, #45	; 0x2d
   dc736:	d103      	bne.n	dc740 <_tzset_unlocked_r+0x94>
   dc738:	3701      	adds	r7, #1
   dc73a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc73e:	e003      	b.n	dc748 <_tzset_unlocked_r+0x9c>
   dc740:	2b2b      	cmp	r3, #43	; 0x2b
   dc742:	bf08      	it	eq
   dc744:	3701      	addeq	r7, #1
   dc746:	2501      	movs	r5, #1
   dc748:	f10d 0a20 	add.w	sl, sp, #32
   dc74c:	f10d 0b1e 	add.w	fp, sp, #30
   dc750:	f04f 0800 	mov.w	r8, #0
   dc754:	9603      	str	r6, [sp, #12]
   dc756:	f8cd a008 	str.w	sl, [sp, #8]
   dc75a:	9601      	str	r6, [sp, #4]
   dc75c:	f8cd b000 	str.w	fp, [sp]
   dc760:	4633      	mov	r3, r6
   dc762:	aa07      	add	r2, sp, #28
   dc764:	498d      	ldr	r1, [pc, #564]	; (dc99c <_tzset_unlocked_r+0x2f0>)
   dc766:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc76a:	4638      	mov	r0, r7
   dc76c:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc770:	f7fb fe46 	bl	d8400 <siscanf>
   dc774:	4540      	cmp	r0, r8
   dc776:	f340 80fd 	ble.w	dc974 <_tzset_unlocked_r+0x2c8>
   dc77a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc77e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc782:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc9a8 <_tzset_unlocked_r+0x2fc>
   dc786:	213c      	movs	r1, #60	; 0x3c
   dc788:	fb01 3302 	mla	r3, r1, r2, r3
   dc78c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc790:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc794:	fb01 3302 	mla	r3, r1, r2, r3
   dc798:	435d      	muls	r5, r3
   dc79a:	6225      	str	r5, [r4, #32]
   dc79c:	4d7c      	ldr	r5, [pc, #496]	; (dc990 <_tzset_unlocked_r+0x2e4>)
   dc79e:	4b7d      	ldr	r3, [pc, #500]	; (dc994 <_tzset_unlocked_r+0x2e8>)
   dc7a0:	602b      	str	r3, [r5, #0]
   dc7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc7a4:	497c      	ldr	r1, [pc, #496]	; (dc998 <_tzset_unlocked_r+0x2ec>)
   dc7a6:	441f      	add	r7, r3
   dc7a8:	464a      	mov	r2, r9
   dc7aa:	4633      	mov	r3, r6
   dc7ac:	4638      	mov	r0, r7
   dc7ae:	f7fb fe27 	bl	d8400 <siscanf>
   dc7b2:	4540      	cmp	r0, r8
   dc7b4:	dc08      	bgt.n	dc7c8 <_tzset_unlocked_r+0x11c>
   dc7b6:	682b      	ldr	r3, [r5, #0]
   dc7b8:	606b      	str	r3, [r5, #4]
   dc7ba:	4b72      	ldr	r3, [pc, #456]	; (dc984 <_tzset_unlocked_r+0x2d8>)
   dc7bc:	6a22      	ldr	r2, [r4, #32]
   dc7be:	601a      	str	r2, [r3, #0]
   dc7c0:	4b72      	ldr	r3, [pc, #456]	; (dc98c <_tzset_unlocked_r+0x2e0>)
   dc7c2:	f8c3 8000 	str.w	r8, [r3]
   dc7c6:	e0d5      	b.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc7ca:	f8c5 9004 	str.w	r9, [r5, #4]
   dc7ce:	18fd      	adds	r5, r7, r3
   dc7d0:	5cfb      	ldrb	r3, [r7, r3]
   dc7d2:	2b2d      	cmp	r3, #45	; 0x2d
   dc7d4:	d103      	bne.n	dc7de <_tzset_unlocked_r+0x132>
   dc7d6:	3501      	adds	r5, #1
   dc7d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc7dc:	e003      	b.n	dc7e6 <_tzset_unlocked_r+0x13a>
   dc7de:	2b2b      	cmp	r3, #43	; 0x2b
   dc7e0:	bf08      	it	eq
   dc7e2:	3501      	addeq	r5, #1
   dc7e4:	2701      	movs	r7, #1
   dc7e6:	2300      	movs	r3, #0
   dc7e8:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc7ec:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc7f0:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc7f4:	930a      	str	r3, [sp, #40]	; 0x28
   dc7f6:	9603      	str	r6, [sp, #12]
   dc7f8:	f8cd a008 	str.w	sl, [sp, #8]
   dc7fc:	9601      	str	r6, [sp, #4]
   dc7fe:	f8cd b000 	str.w	fp, [sp]
   dc802:	4633      	mov	r3, r6
   dc804:	aa07      	add	r2, sp, #28
   dc806:	4965      	ldr	r1, [pc, #404]	; (dc99c <_tzset_unlocked_r+0x2f0>)
   dc808:	4628      	mov	r0, r5
   dc80a:	f7fb fdf9 	bl	d8400 <siscanf>
   dc80e:	2800      	cmp	r0, #0
   dc810:	dc04      	bgt.n	dc81c <_tzset_unlocked_r+0x170>
   dc812:	6a23      	ldr	r3, [r4, #32]
   dc814:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc818:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc81a:	e00e      	b.n	dc83a <_tzset_unlocked_r+0x18e>
   dc81c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc820:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc824:	213c      	movs	r1, #60	; 0x3c
   dc826:	fb01 3302 	mla	r3, r1, r2, r3
   dc82a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc82e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc832:	fb01 3302 	mla	r3, r1, r2, r3
   dc836:	435f      	muls	r7, r3
   dc838:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc83c:	4627      	mov	r7, r4
   dc83e:	441d      	add	r5, r3
   dc840:	f04f 0900 	mov.w	r9, #0
   dc844:	782b      	ldrb	r3, [r5, #0]
   dc846:	2b2c      	cmp	r3, #44	; 0x2c
   dc848:	bf08      	it	eq
   dc84a:	3501      	addeq	r5, #1
   dc84c:	f895 8000 	ldrb.w	r8, [r5]
   dc850:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc854:	d126      	bne.n	dc8a4 <_tzset_unlocked_r+0x1f8>
   dc856:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc85a:	9302      	str	r3, [sp, #8]
   dc85c:	ab09      	add	r3, sp, #36	; 0x24
   dc85e:	9300      	str	r3, [sp, #0]
   dc860:	9603      	str	r6, [sp, #12]
   dc862:	9601      	str	r6, [sp, #4]
   dc864:	4633      	mov	r3, r6
   dc866:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc86a:	494d      	ldr	r1, [pc, #308]	; (dc9a0 <_tzset_unlocked_r+0x2f4>)
   dc86c:	4628      	mov	r0, r5
   dc86e:	f7fb fdc7 	bl	d8400 <siscanf>
   dc872:	2803      	cmp	r0, #3
   dc874:	d17e      	bne.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc876:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc87a:	1e4b      	subs	r3, r1, #1
   dc87c:	2b0b      	cmp	r3, #11
   dc87e:	d879      	bhi.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc880:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc884:	1e53      	subs	r3, r2, #1
   dc886:	2b04      	cmp	r3, #4
   dc888:	d874      	bhi.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc88a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc88e:	2b06      	cmp	r3, #6
   dc890:	d870      	bhi.n	dc974 <_tzset_unlocked_r+0x2c8>
   dc892:	f887 8008 	strb.w	r8, [r7, #8]
   dc896:	60f9      	str	r1, [r7, #12]
   dc898:	613a      	str	r2, [r7, #16]
   dc89a:	617b      	str	r3, [r7, #20]
   dc89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc89e:	eb05 0803 	add.w	r8, r5, r3
   dc8a2:	e02a      	b.n	dc8fa <_tzset_unlocked_r+0x24e>
   dc8a4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc8a8:	bf06      	itte	eq
   dc8aa:	3501      	addeq	r5, #1
   dc8ac:	4643      	moveq	r3, r8
   dc8ae:	2344      	movne	r3, #68	; 0x44
   dc8b0:	220a      	movs	r2, #10
   dc8b2:	a90b      	add	r1, sp, #44	; 0x2c
   dc8b4:	4628      	mov	r0, r5
   dc8b6:	9305      	str	r3, [sp, #20]
   dc8b8:	f7ff fe2e 	bl	dc518 <strtoul>
   dc8bc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc8c0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc8c4:	4545      	cmp	r5, r8
   dc8c6:	9b05      	ldr	r3, [sp, #20]
   dc8c8:	d114      	bne.n	dc8f4 <_tzset_unlocked_r+0x248>
   dc8ca:	234d      	movs	r3, #77	; 0x4d
   dc8cc:	f1b9 0f00 	cmp.w	r9, #0
   dc8d0:	d107      	bne.n	dc8e2 <_tzset_unlocked_r+0x236>
   dc8d2:	7223      	strb	r3, [r4, #8]
   dc8d4:	2303      	movs	r3, #3
   dc8d6:	60e3      	str	r3, [r4, #12]
   dc8d8:	2302      	movs	r3, #2
   dc8da:	6123      	str	r3, [r4, #16]
   dc8dc:	f8c4 9014 	str.w	r9, [r4, #20]
   dc8e0:	e00b      	b.n	dc8fa <_tzset_unlocked_r+0x24e>
   dc8e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc8e6:	230b      	movs	r3, #11
   dc8e8:	62a3      	str	r3, [r4, #40]	; 0x28
   dc8ea:	2301      	movs	r3, #1
   dc8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc8ee:	2300      	movs	r3, #0
   dc8f0:	6323      	str	r3, [r4, #48]	; 0x30
   dc8f2:	e002      	b.n	dc8fa <_tzset_unlocked_r+0x24e>
   dc8f4:	b280      	uxth	r0, r0
   dc8f6:	723b      	strb	r3, [r7, #8]
   dc8f8:	6178      	str	r0, [r7, #20]
   dc8fa:	2302      	movs	r3, #2
   dc8fc:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc900:	2300      	movs	r3, #0
   dc902:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc906:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc90a:	930a      	str	r3, [sp, #40]	; 0x28
   dc90c:	f898 3000 	ldrb.w	r3, [r8]
   dc910:	2b2f      	cmp	r3, #47	; 0x2f
   dc912:	d10b      	bne.n	dc92c <_tzset_unlocked_r+0x280>
   dc914:	9603      	str	r6, [sp, #12]
   dc916:	f8cd a008 	str.w	sl, [sp, #8]
   dc91a:	9601      	str	r6, [sp, #4]
   dc91c:	f8cd b000 	str.w	fp, [sp]
   dc920:	4633      	mov	r3, r6
   dc922:	aa07      	add	r2, sp, #28
   dc924:	491f      	ldr	r1, [pc, #124]	; (dc9a4 <_tzset_unlocked_r+0x2f8>)
   dc926:	4640      	mov	r0, r8
   dc928:	f7fb fd6a 	bl	d8400 <siscanf>
   dc92c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc930:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc934:	213c      	movs	r1, #60	; 0x3c
   dc936:	fb01 3302 	mla	r3, r1, r2, r3
   dc93a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc93e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc942:	fb01 3302 	mla	r3, r1, r2, r3
   dc946:	61bb      	str	r3, [r7, #24]
   dc948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc94a:	f109 0901 	add.w	r9, r9, #1
   dc94e:	f1b9 0f02 	cmp.w	r9, #2
   dc952:	4445      	add	r5, r8
   dc954:	f107 071c 	add.w	r7, r7, #28
   dc958:	f47f af74 	bne.w	dc844 <_tzset_unlocked_r+0x198>
   dc95c:	6860      	ldr	r0, [r4, #4]
   dc95e:	f7ff fdf5 	bl	dc54c <__tzcalc_limits>
   dc962:	4b08      	ldr	r3, [pc, #32]	; (dc984 <_tzset_unlocked_r+0x2d8>)
   dc964:	6a22      	ldr	r2, [r4, #32]
   dc966:	601a      	str	r2, [r3, #0]
   dc968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc96a:	1a9b      	subs	r3, r3, r2
   dc96c:	4a07      	ldr	r2, [pc, #28]	; (dc98c <_tzset_unlocked_r+0x2e0>)
   dc96e:	bf18      	it	ne
   dc970:	2301      	movne	r3, #1
   dc972:	6013      	str	r3, [r2, #0]
   dc974:	b00d      	add	sp, #52	; 0x34
   dc976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc97a:	bf00      	nop
   dc97c:	000ddef0 	.word	0x000ddef0
   dc980:	2003e7e4 	.word	0x2003e7e4
   dc984:	2003e7ec 	.word	0x2003e7ec
   dc988:	000ddef3 	.word	0x000ddef3
   dc98c:	2003e7e8 	.word	0x2003e7e8
   dc990:	2003de58 	.word	0x2003de58
   dc994:	2003e7d7 	.word	0x2003e7d7
   dc998:	000ddef7 	.word	0x000ddef7
   dc99c:	000ddf1a 	.word	0x000ddf1a
   dc9a0:	000ddf06 	.word	0x000ddf06
   dc9a4:	000ddf19 	.word	0x000ddf19
   dc9a8:	2003e7cc 	.word	0x2003e7cc

000dc9ac <abs>:
   dc9ac:	2800      	cmp	r0, #0
   dc9ae:	bfb8      	it	lt
   dc9b0:	4240      	neglt	r0, r0
   dc9b2:	4770      	bx	lr

000dc9b4 <div>:
   dc9b4:	2900      	cmp	r1, #0
   dc9b6:	b510      	push	{r4, lr}
   dc9b8:	fb91 f4f2 	sdiv	r4, r1, r2
   dc9bc:	fb02 1314 	mls	r3, r2, r4, r1
   dc9c0:	db04      	blt.n	dc9cc <div+0x18>
   dc9c2:	2b00      	cmp	r3, #0
   dc9c4:	da07      	bge.n	dc9d6 <div+0x22>
   dc9c6:	3401      	adds	r4, #1
   dc9c8:	1a9b      	subs	r3, r3, r2
   dc9ca:	e004      	b.n	dc9d6 <div+0x22>
   dc9cc:	2b00      	cmp	r3, #0
   dc9ce:	bfc4      	itt	gt
   dc9d0:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc9d4:	189b      	addgt	r3, r3, r2
   dc9d6:	6004      	str	r4, [r0, #0]
   dc9d8:	6043      	str	r3, [r0, #4]
   dc9da:	bd10      	pop	{r4, pc}

000dc9dc <_findenv_r>:
   dc9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc9e0:	4607      	mov	r7, r0
   dc9e2:	468b      	mov	fp, r1
   dc9e4:	4690      	mov	r8, r2
   dc9e6:	f000 f845 	bl	dca74 <__env_lock>
   dc9ea:	4b19      	ldr	r3, [pc, #100]	; (dca50 <_findenv_r+0x74>)
   dc9ec:	681d      	ldr	r5, [r3, #0]
   dc9ee:	469a      	mov	sl, r3
   dc9f0:	b13d      	cbz	r5, dca02 <_findenv_r+0x26>
   dc9f2:	465c      	mov	r4, fp
   dc9f4:	4623      	mov	r3, r4
   dc9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc9fa:	b142      	cbz	r2, dca0e <_findenv_r+0x32>
   dc9fc:	2a3d      	cmp	r2, #61	; 0x3d
   dc9fe:	461c      	mov	r4, r3
   dca00:	d1f8      	bne.n	dc9f4 <_findenv_r+0x18>
   dca02:	4638      	mov	r0, r7
   dca04:	f000 f837 	bl	dca76 <__env_unlock>
   dca08:	2000      	movs	r0, #0
   dca0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca0e:	ebcb 0404 	rsb	r4, fp, r4
   dca12:	46a9      	mov	r9, r5
   dca14:	f859 0b04 	ldr.w	r0, [r9], #4
   dca18:	2800      	cmp	r0, #0
   dca1a:	d0f2      	beq.n	dca02 <_findenv_r+0x26>
   dca1c:	4622      	mov	r2, r4
   dca1e:	4659      	mov	r1, fp
   dca20:	f7ff fc44 	bl	dc2ac <strncmp>
   dca24:	b988      	cbnz	r0, dca4a <_findenv_r+0x6e>
   dca26:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dca2a:	191e      	adds	r6, r3, r4
   dca2c:	5d1b      	ldrb	r3, [r3, r4]
   dca2e:	2b3d      	cmp	r3, #61	; 0x3d
   dca30:	d10b      	bne.n	dca4a <_findenv_r+0x6e>
   dca32:	f8da 3000 	ldr.w	r3, [sl]
   dca36:	1aed      	subs	r5, r5, r3
   dca38:	10ad      	asrs	r5, r5, #2
   dca3a:	4638      	mov	r0, r7
   dca3c:	f8c8 5000 	str.w	r5, [r8]
   dca40:	f000 f819 	bl	dca76 <__env_unlock>
   dca44:	1c70      	adds	r0, r6, #1
   dca46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dca4a:	464d      	mov	r5, r9
   dca4c:	e7e1      	b.n	dca12 <_findenv_r+0x36>
   dca4e:	bf00      	nop
   dca50:	2003dea0 	.word	0x2003dea0

000dca54 <_getenv_r>:
   dca54:	b507      	push	{r0, r1, r2, lr}
   dca56:	aa01      	add	r2, sp, #4
   dca58:	f7ff ffc0 	bl	dc9dc <_findenv_r>
   dca5c:	b003      	add	sp, #12
   dca5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dca64 <__gettzinfo>:
   dca64:	4800      	ldr	r0, [pc, #0]	; (dca68 <__gettzinfo+0x4>)
   dca66:	4770      	bx	lr
   dca68:	2003de60 	.word	0x2003de60

000dca6c <labs>:
   dca6c:	2800      	cmp	r0, #0
   dca6e:	bfb8      	it	lt
   dca70:	4240      	neglt	r0, r0
   dca72:	4770      	bx	lr

000dca74 <__env_lock>:
   dca74:	4770      	bx	lr

000dca76 <__env_unlock>:
   dca76:	4770      	bx	lr

000dca78 <dynalib_user>:
   dca78:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dca88:	0000 0000                                   ....

000dca8c <_ZTV8MB85RC64>:
	...
   dca94:	4181 000d 4195 000d 5b95 000d 5c41 000d     .A...A...[..A\..
   dcaa4:	5cbb 000d                                   .\..

000dcaa8 <_ZTV17PublishQueueAsync>:
	...
   dcab0:	4159 000d 416d 000d 6ad9 000d 6c79 000d     YA..mA...j..yl..
   dcac0:	6c35 000d 6c13 000d 6dbf 000d 6c5b 000d     5l...l...m..[l..
   dcad0:	ceb7 000d cef2 000d cef7 000d cefc 000d     ................
   dcae0:	cf00 000d cf05 000d cf0a 000d cf0e 000d     ................
   dcaf0:	cf19 000d cf24 000d ceb7 000d cebf 000d     ....$...........
   dcb00:	cec3 000d cecc 000d ced4 000d cee0 000d     ................
   dcb10:	cee6 000d 6f4e 4420 7461 0061 6255 6469     ....No Data.Ubid
   dcb20:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dcb30:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dcb40:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dcb50:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
   dcb60:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
   dcb70:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dcb80:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dcb90:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
   dcba0:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
   dcbb0:	7465 2520 0069 6954 656d 5300 6d61 6c70     et %i.Time.Sampl
   dcbc0:	2065 6e49 6574 7672 6c61 6920 2073 6f6e     e Interval is no
   dcbd0:	2077 6925 6d20 6e69 7475 7365 7b00 6322     w %i minutes.{"c
   dcbe0:	6261 6e69 2254 253a 2e34 6632 202c 7622     abinT":%4.2f, "v
   dcbf0:	6e65 5474 3a22 3425 322e 2c66 2220 756f     entT":%4.2f, "ou
   dcc00:	7374 6469 5465 3a22 3425 322e 2c66 2220     tsideT":%4.2f, "
   dcc10:	6162 7474 7265 2279 253a 2c69 2020 6b22     battery":%i,  "k
   dcc20:	7965 2231 223a 7325 2c22 2220 6572 6573     ey1":"%s", "rese
   dcc30:	7374 3a22 6925 202c 6122 656c 7472 2273     ts":%i, "alerts"
   dcc40:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
   dcc50:	253a 756c 3030 2c30 2220 616c 2274 253a     :%lu000, "lat":%
   dcc60:	2c66 2220 6e6c 2267 253a 7d66 5500 6962     f, "lng":%f}.Ubi
   dcc70:	6f64 7374 4d2d 5442 2d41 6f48 6b6f 762d     dots-MBTA-Hook-v
   dcc80:	2d32 6150 7372 0065 6e49 6176 696c 2064     2-Parse.Invalid 
   dcc90:	6572 6461 6e69 0067 7325 5320 253a 2e32     reading.%s S:%2.
   dcca0:	6630 2525 202c 3a51 3225 302e 2566 2025     0f%%, Q:%2.0f%% 
   dccb0:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   dccc0:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   dccd0:	5441 432b 5546 3d4e 3531 0a0d 5200 6e75     AT+CFUN=15...Run
   dcce0:	696e 676e 4400 6961 796c 4320 656c 6e61     ning.Daily Clean
   dccf0:	7075 4400 5453 6f20 6666 6573 2074 3225     up.DST offset %2
   dcd00:	312e 0066 6f6c 6163 6974 6e6f 253a 2c66     .1f.location:%f,
   dcd10:	6625 6120 746c 7469 6475 3a65 6625 7320     %f altitude:%f s
   dcd20:	7461 6c65 696c 6574 3a73 6425 6820 6f64     atellites:%d hdo
   dcd30:	3a70 6c25 2500 756c 6d20 6c69 696c 6573     p:%l.%lu millise
   dcd40:	6f63 646e 2073 6f74 6720 7465 4720 5350     conds to get GPS
   dcd50:	6620 7869 6e00 206f 6f6c 6163 6974 6e6f      fix.no location
   dcd60:	7320 7461 6c65 696c 6574 3a73 6425 6700      satellites:%d.g
   dcd70:	7370 2500 2e34 6632 4620 7300 6170 6b72     ps.%4.2f F.spark
   dcd80:	642f 7665 6369 2f65 6573 7373 6f69 2f6e     /device/session/
   dcd90:	6e65 0064 7245 6f72 2072 7453 7461 2065     end.Error State 
   dcda0:	202d 6552 6573 0074 7453 7461 0065 7245     - Reset.State.Er
   dcdb0:	6f72 2072 7453 7461 2065 202d 6f50 6577     ror State - Powe
   dcdc0:	2072 7943 6c63 0065 7245 6f72 2072 7453     r Cycle.Error St
   dcdd0:	7461 2065 202d 7546 6c6c 4d20 646f 6d65     ate - Full Modem
   dcde0:	5220 7365 7465 4c00 616f 6964 676e 5320      Reset.Loading S
   dcdf0:	7379 6574 206d 6544 6166 6c75 7374 5300     ystem Defaults.S
   dce00:	6769 616e 006c 6153 706d 656c 6e49 6574     ignal.SampleInte
   dce10:	7672 6c61 5200 7365 7465 6f43 6e75 0074     rval.ResetCount.
   dce20:	6143 6962 546e 6d65 0070 6556 746e 6554     CabinTemp.VentTe
   dce30:	706d 4f00 7475 6973 6564 6554 706d 5200     mp.OutsideTemp.R
   dce40:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
   dce50:	0067 6c41 7265 7374 5400 6d69 4f65 6666     g.Alerts.TimeOff
   dce60:	6573 0074 6142 7474 7265 4379 6e6f 6574     set.BatteryConte
   dce70:	7478 7200 7365 7465 5246 4d41 4800 7261     xt.resetFRAM.Har
   dce80:	5264 7365 7465 5300 6e65 4e64 776f 5600     dReset.SendNow.V
   dce90:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
   dcea0:	6954 656d 6f7a 656e 5300 7465 442d 5453     Timezone.Set-DST
   dceb0:	664f 7366 7465 5500 6b6e 6f6e 6e77 4e00     Offset.Unknown.N
   dcec0:	746f 4320 6168 6772 6e69 0067 6843 7261     ot Charging.Char
   dced0:	6567 0064 6944 6373 6168 6772 6e69 0067     ged.Discharging.
   dcee0:	6146 6c75 0074 6944 6f63 6e6e 6365 6574     Fault.Diconnecte
   dcef0:	0064 6f4e 656e 5700 4669 0069 5347 004d     d.None.WiFi.GSM.
   dcf00:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   dcf10:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   dcf20:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.

000dcf30 <_ZL17FRAMversionNumber>:
   dcf30:	0001 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dcf40:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dcf50:	2065 7266 6d61 6441 7264 253d 0075 6572     e framAddr=%u.re
   dcf60:	6461 7320 7465 6120 6464 6572 7373 6620     ad set address f
   dcf70:	6961 656c 2064 6425 6400 6469 276e 2074     ailed %d.didn't 
   dcf80:	6572 6563 7669 2065 6e65 756f 6867 6220     receive enough b
   dcf90:	7479 7365 6320 756f 746e 253d 0075 7277     ytes count=%u.wr
   dcfa0:	7469 2065 6166 6c69 6465 2520 0064 0000     ite failed %d...

000dcfb0 <_ZTV6MB85RC>:
	...
   dcfb8:	5ae5 000d 5ae7 000d 5b95 000d 5c41 000d     .Z...Z...[..A\..
   dcfc8:	5cbb 000d                                   .\..

000dcfcc <_ZTV14MCP79410EEPROM>:
	...
   dcfd4:	5d83 000d 5da5 000d 5d79 000d 5d7d 000d     .]...]..y]..}]..
   dcfe4:	5dc1 000d 61f5 000d 6611 000d               .]...a...f..

000dcff0 <_ZTV12MCP79410SRAM>:
	...
   dcff8:	5d81 000d 5d97 000d 5d71 000d 5d75 000d     .]...]..q]..u]..
   dd008:	5dc1 000d 622d 000d 647b 000d 6579 7261     .]..-b..{d..year
   dd018:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dd028:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dd038:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dd048:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dd058:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dd068:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dd078:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dd088:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dd098:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dd0a8:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dd0b8:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dd0c8:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd0d8:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd0e8:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd0f8:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd108:	7061 2e70 7472 0063                         app.rtc.

000dd110 <_ZTV12MCP79410Time>:
	...
   dd118:	5d85 000d 5d89 000d                         .]...]..

000dd120 <_ZTV8MCP79410>:
	...
   dd128:	5d87 000d 5db3 000d                         .]...]..

000dd130 <_ZTV25PublishQueueAsyncRetained>:
	...
   dd138:	6bd1 000d 6be5 000d 6ad9 000d 6c79 000d     .k...k...j..yl..
   dd148:	6c35 000d 6c13 000d 6dbf 000d 6c5b 000d     5l...l...m..[l..
   dd158:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
   dd168:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
   dd178:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
   dd188:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
   dd198:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
   dd1a8:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
   dd1b8:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
   dd1c8:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
   dd1d8:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
   dd1e8:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
   dd1f8:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
   dd208:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

000dd214 <_ZTV21PublishQueueAsyncBase>:
	...
   dd224:	6ad9 000d 40a9 000d 40a9 000d 40a9 000d     .j...@...@...@..
   dd234:	40a9 000d 40a9 000d                         .@...@..

000dd23c <_ZTVN8particle13__SPISettingsE>:
	...
   dd244:	7059 000d 6564 6166 6c75 2074 4d00 4253     Yp..default .MSB
   dd254:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dd264:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dd274:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dd284:	4d20 444f 2545 3e64 4100 7373 7465 7254      MODE%d>.AssetTr
   dd294:	6361 656b 0072 6977 6572 6552 6461 7942     acker.wireReadBy
   dd2a4:	6574 4173 6176 6c69 6261 656c 4920 4332     tesAvailable I2C
   dd2b4:	6520 7272 726f 2520 0075 6977 6572 6552      error %u.wireRe
   dd2c4:	6461 7942 6574 4173 6176 6c69 6261 656c     adBytesAvailable
   dd2d4:	6920 636e 726f 6572 7463 6320 756f 746e      incorrect count
   dd2e4:	2520 0075 6977 6572 6552 6461 7942 6574      %u.wireReadByte
   dd2f4:	2073 3249 2043 7265 6f72 2072 7525 7700     s I2C error %u.w
   dd304:	7269 5265 6165 4264 7479 7365 6920 636e     ireReadBytes inc
   dd314:	726f 6572 7463 6320 756f 746e 2520 0075     orrect count %u.

000dd324 <_ZTV12AssetTracker>:
	...
   dd32c:	70b1 000d 70cd 000d                         .p...p..

000dd334 <_ZTV13LegacyAdapter>:
	...
   dd33c:	7449 000d 744b 000d 5047 4d52 0043 4e47     It..Kt..GPRMC.GN
   dd34c:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   dd35c:	004e 4e4e 0045 4e45 0045 5345 0045 5353     N.NNE.ENE.ESE.SS
   dd36c:	0045 5353 0057 5357 0057 4e57 0057 4e4e     E.SSW.WSW.WNW.NN
   dd37c:	0057 6e6f 696c 656e 6c2d 7669 3165 732e     W.online-live1.s
   dd38c:	7265 6976 6563 2e73 2d75 6c62 786f 632e     ervices.u-blox.c
   dd39c:	6d6f 6400 7461 2061 6f74 206f 6f6c 676e     om.data too long
   dd3ac:	7020 7961 6f6c 6461 654c 3d6e 7525 6900      payloadLen=%u.i
   dd3bc:	766e 6c61 6469 4320 4352 4400 6e6f 2065     nvalid CRC.Done 
   dd3cc:	6573 646e 6e69 2067 6961 6964 676e 6420     sending aiding d
   dd3dc:	7461 2061 6f74 4720 5350 0021 6164 6174     ata to GPS!.data
   dd3ec:	6420 6469 276e 2074 6562 6967 206e 6977      didn't begin wi
   dd3fc:	6874 7320 6e79 2063 7962 6574 2073 666f     th sync bytes of
   dd40c:	7366 7465 253d 0075 6170 6c79 616f 4c64     fset=%u.payloadL
   dd41c:	6e65 6f20 2066 7525 7320 6565 736d 7420     en of %u seems t
   dd42c:	206f 6562 6320 726f 7572 7470 6465 2c00     o be corrupted.,
   dd43c:	7b00 6c22 7461 3a22 6625 202c 6c22 676e     .{"lat":%f, "lng
   dd44c:	3a22 6625 007d 6572 7571 7365 6974 676e     ":%f}.requesting
   dd45c:	6520 656c 6176 6974 6e6f 6620 726f 2520      elevation for %
   dd46c:	0073 7341 6973 7473 6c45 7665 7461 6f69     s.AssistElevatio
   dd47c:	006e 6c65 7665 7461 6f69 3d6e 6625 7300     n.elevation=%f.s
   dd48c:	7265 6576 2072 6964 6373 6e6f 656e 7463     erver disconnect
   dd49c:	6465 7520 656e 7078 6365 6574 6c64 0079     ed unexpectedly.
   dd4ac:	6f43 746e 6e65 2d74 654c 676e 6874 003a     Content-Length:.
   dd4bc:	6f43 6c75 2064 6f6e 2074 6170 7372 2065     Could not parse 
   dd4cc:	6f43 746e 6e65 2d74 654c 676e 6874 202c     Content-Length, 
   dd4dc:	7865 7469 6e69 0067 6f43 746e 6e65 2d74     exiting.Content-
   dd4ec:	654c 676e 6874 6f20 2066 7525 6920 2073     Length of %u is 
   dd4fc:	616c 6772 7265 7420 6168 206e 7562 6666     larger than buff
   dd50c:	7265 6c20 6e65 7467 2068 7525 5400 6d69     er length %u.Tim
   dd51c:	6465 6f20 7475 6720 7465 6974 676e 6c20     ed out getting l
   dd52c:	636f 7461 6f69 206e 6e69 6f66 6d72 7461     ocation informat
   dd53c:	6f69 2c6e 6420 6665 7561 746c 6e69 2067     ion, defaulting 
   dd54c:	6f74 6e20 206f 6f6c 6163 6974 6e6f 6d20     to no location m
   dd55c:	646f 0065 6f63 6e6e 6365 6574 2064 6f74     ode.connected to
   dd56c:	2520 0073 472f 7465 6e4f 696c 656e 6144      %s./GetOnlineDa
   dd57c:	6174 612e 6873 3f78 6f74 656b 3d6e 7325     ta.ashx?token=%s
   dd58c:	673b 736e 3d73 7067 3b73 6164 6174 7974     ;gnss=gps;dataty
   dd59c:	6570 653d 6870 612c 6d6c 612c 7875 702c     pe=eph,alm,aux,p
   dd5ac:	736f 6c3b 7461 253d 372e 3b66 6f6c 3d6e     os;lat=%.7f;lon=
   dd5bc:	2e25 6637 703b 6361 3d63 6425 613b 746c     %.7f;pacc=%d;alt
   dd5cc:	253d 3b64 6966 746c 7265 6e6f 6f70 3b73     =%d;filteronpos;
   dd5dc:	616c 6574 636e 3d79 0032 472f 7465 6e4f     latency=2./GetOn
   dd5ec:	696c 656e 6144 6174 612e 6873 3f78 6f74     lineData.ashx?to
   dd5fc:	656b 3d6e 7325 673b 736e 3d73 7067 3b73     ken=%s;gnss=gps;
   dd60c:	6164 6174 7974 6570 653d 6870 612c 6d6c     datatype=eph,alm
   dd61c:	612c 7875 4700 5445 2520 2073 5448 5054     ,aux.GET %s HTTP
   dd62c:	312f 312e 0a0d 6f48 7473 203a 7325 0a0d     /1.1..Host: %s..
   dd63c:	0a0d 6300 6e6f 656e 7463 6f69 206e 6f74     ...connection to
   dd64c:	2520 2073 6166 6c69 6465 4100 726c 6165      %s failed.Alrea
   dd65c:	7964 6820 7661 2065 5047 2053 6966 2c78     dy have GPS fix,
   dd66c:	7320 696b 7070 6e69 2067 7341 6973 7473      skipping Assist
   dd67c:	6f4e 0077 6f4e 6b20 7965 202c 6163 276e     Now.No key, can'
   dd68c:	2074 7375 2065 7341 6973 7473 6f4e 0077     t use AssistNow.
   dd69c:	6f68 6b6f 722d 7365 6f70 736e 2f65 7325     hook-response/%s
   dd6ac:	252f 0073 6166 6c69 6465 7420 206f 6c61     /%s.failed to al
   dd6bc:	6f6c 6163 6574 4120 7373 7369 4e74 776f     locate AssistNow
   dd6cc:	6f44 6e77 6f6c 6461 6100 7070 752e 6c62     Download.app.ubl
   dd6dc:	786f 0000                                   ox..

000dd6e0 <_ZTV9LIS3DHSPI>:
	...
   dd6e8:	7b6d 000d 7b6f 000d 7c75 000d 7bad 000d     m{..o{..u|...{..
   dd6f8:	7bef 000d 7b7d 000d 7b97 000d               .{..}{...{..

000dd704 <_ZTV6LIS3DH>:
	...
   dd714:	7c51 000d 40a9 000d 40a9 000d               Q|...@...@..

000dd720 <_ZTVN5spark13CellularClassE>:
	...
   dd728:	856b 000d 8561 000d 8557 000d 850d 000d     k...a...W.......
   dd738:	854b 000d 853f 000d 8533 000d 852b 000d     K...?...3...+...
   dd748:	8521 000d 8517 000d 922d 000d               !.......-...

000dd754 <_ZTV14CellularSignal>:
	...
   dd75c:	8619 000d 8679 000d 861b 000d 86bd 000d     ....y...........
   dd76c:	8621 000d 8689 000d 864d 000d 8747 000d     !.......M...G...
   dd77c:	fffc ffff 0000 0000 8771 000d               ........q...

000dd788 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd790:	8779 000d 877f 000d 87c3 000d 878d 000d     y...............
   dd7a0:	877b 000d                                   {...

000dd7a4 <_ZTVN5spark13EthernetClassE>:
	...
   dd7ac:	8db7 000d 8dad 000d 8da3 000d 8d99 000d     ................
   dd7bc:	8d8d 000d 8d81 000d 8d75 000d 8d6d 000d     ........u...m...
   dd7cc:	8d63 000d 8d59 000d 922d 000d               c...Y...-...

000dd7d8 <_ZTV7TwoWire>:
	...
   dd7e0:	8dd5 000d 8e1f 000d 8df7 000d 8dd7 000d     ................
   dd7f0:	8dff 000d 8e07 000d 8e0f 000d 8e17 000d     ................

000dd800 <_ZTV9IPAddress>:
	...
   dd808:	8f65 000d 8f55 000d 8f57 000d 6162 6475     e...U...W...baud
   dd818:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd828:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd838:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd848:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd858:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd868:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd878:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd888:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd898:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd8a8:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd8b8:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd8c8:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd8d8:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd8e8 <_ZTVN5spark9MeshClassE>:
	...
   dd8f0:	90a7 000d 909d 000d 9093 000d 9089 000d     ................
   dd900:	907d 000d 9071 000d 9065 000d 905d 000d     }...q...e...]...
   dd910:	9053 000d 9049 000d 922d 000d               S...I...-...

000dd91c <_ZTVN5spark12NetworkClassE>:
	...
   dd924:	91c5 000d 91cf 000d 91d9 000d 91e3 000d     ................
   dd934:	91ed 000d 91f9 000d 9205 000d 9211 000d     ................
   dd944:	9219 000d 9223 000d 922d 000d 616e 006e     ....#...-...nan.
   dd954:	766f 0066 002e 6e69 0066                    ovf...inf.

000dd95e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd95e:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dd96e:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd97e:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..
	...

000dd990 <_ZTV11USARTSerial>:
	...
   dd998:	9d55 000d 9da5 000d 9db3 000d 930d 000d     U...............
   dd9a8:	9d69 000d 9d8b 000d 9d77 000d 9d9f 000d     i.......w.......
   dd9b8:	9d57 000d 9d5b 000d                         W...[...

000dd9c0 <_ZTV9USBSerial>:
	...
   dd9c8:	9e5d 000d 9ead 000d 9ebb 000d 930d 000d     ]...............
   dd9d8:	9e99 000d 9e5f 000d 9e75 000d 9ea7 000d     ...._...u.......
   dd9e8:	9e8b 000d 9e59 000d                         ....Y...

000dd9f0 <_ZSt7nothrow>:
	...

000dd9f1 <day_name.4725>:
   dd9f1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dda01:	6972 6153 4a74                                   riSat

000dda06 <mon_name.4726>:
   dda06:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dda16:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dda26:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dda36:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dda46:	6425 000a                                   %d..

000dda4a <_ctype_>:
   dda4a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dda5a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dda6a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dda7a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dda8a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dda9a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddaaa:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddaba:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddaca:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddb4c <__sf_fake_stdin>:
	...

000ddb6c <__sf_fake_stdout>:
	...

000ddb8c <__sf_fake_stderr>:
	...

000ddbac <_DAYS_BEFORE_MONTH>:
   ddbac:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddbbc:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddbcc:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddbdc <DAYS_IN_MONTH>:
   ddbdc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddbec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddbfc:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddc0c <__month_lengths>:
   ddc0c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddc1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddc2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddc3c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddc4c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddc5c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddc6c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddc7c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddc8c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddc9c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   ddcac:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   ddcbc:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   ddccc:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   ddcdc:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   ddcec:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   ddcfc:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   ddd0c:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   ddd1c:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   ddd2c:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   ddd3c:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   ddd4c:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   ddd5c:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   ddd6c:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   ddd7c:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   ddd8c:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   ddd9c:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dddac:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dddbc:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dddcc:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   ddddc:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   dddec:	3a4d 5325 2520 0070                         M:%S %p.

000dddf4 <_C_time_locale>:
   dddf4:	dccf 000d dcd3 000d dcd7 000d dcdb 000d     ................
   dde04:	dcdf 000d dce3 000d dce7 000d dceb 000d     ................
   dde14:	dcef 000d dcf3 000d dcf7 000d dcfb 000d     ................
   dde24:	dcff 000d dd07 000d dd10 000d dd16 000d     ................
   dde34:	dcdf 000d dd1c 000d dd21 000d dd26 000d     ........!...&...
   dde44:	dd2d 000d dd37 000d dd3f 000d dd48 000d     -...7...?...H...
   dde54:	dd51 000d dd55 000d dd59 000d dd5d 000d     Q...U...Y...]...
   dde64:	dd61 000d dd65 000d dd69 000d dd6d 000d     a...e...i...m...
   dde74:	dd74 000d dd7b 000d dd83 000d dd8d 000d     t...{...........
   dde84:	dd96 000d dd9d 000d dda6 000d ddaf 000d     ................
   dde94:	ddb8 000d ce7a 000d ddcd 000d ddd0 000d     ....z...........
   ddea4:	dcff 000d dd07 000d dd10 000d dd16 000d     ................
   ddeb4:	dcdf 000d dd1c 000d dd21 000d dd26 000d     ........!...&...
   ddec4:	dd2d 000d dd37 000d dd3f 000d dd48 000d     -...7...?...H...
   dded4:	d834 000d dde8 000d d63e 000d d63e 000d     4.......>...>...
   ddee4:	d63e 000d d63e 000d d63e 000d 5a54 4700     >...>...>...TZ.G
   ddef4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   ddf04:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   ddf14:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   ddf24:	3a6e 6825 2575 006e                         n:%hu%n.

000ddf2c <link_const_variable_data_end>:
   ddf2c:	000d5751 	.word	0x000d5751
   ddf30:	000d5ae1 	.word	0x000d5ae1
   ddf34:	000d5d6d 	.word	0x000d5d6d
   ddf38:	000d6649 	.word	0x000d6649
   ddf3c:	000d6661 	.word	0x000d6661
   ddf40:	000d6a59 	.word	0x000d6a59
   ddf44:	000d7041 	.word	0x000d7041
   ddf48:	000d73bd 	.word	0x000d73bd
   ddf4c:	000d7465 	.word	0x000d7465
   ddf50:	000d7b25 	.word	0x000d7b25
   ddf54:	000d7b49 	.word	0x000d7b49
   ddf58:	000d7b69 	.word	0x000d7b69
   ddf5c:	000d7c8b 	.word	0x000d7c8b
   ddf60:	000d7c91 	.word	0x000d7c91
   ddf64:	000d84e5 	.word	0x000d84e5
   ddf68:	000d85e9 	.word	0x000d85e9
   ddf6c:	000d8dc1 	.word	0x000d8dc1
   ddf70:	000d9039 	.word	0x000d9039
   ddf74:	000d9175 	.word	0x000d9175
   ddf78:	000d92f9 	.word	0x000d92f9
   ddf7c:	000d95e9 	.word	0x000d95e9
   ddf80:	000d9981 	.word	0x000d9981
   ddf84:	000d9d41 	.word	0x000d9d41
   ddf88:	000da259 	.word	0x000da259
   ddf8c:	000da31d 	.word	0x000da31d
   ddf90:	000da3a1 	.word	0x000da3a1
   ddf94:	000da425 	.word	0x000da425

000ddf98 <link_constructors_end>:
	...
