
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/1.5.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009eb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000dded0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000158  2003dd50  000de6ec  0001dd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000948  2003dea8  2003dea8  0002dea8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000de844  000de844  0001e844  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000de870  000de870  0001e870  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001924d3  00000000  00000000  0001e874  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e18f  00000000  00000000  001b0d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032f6d  00000000  00000000  001ceed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003bf0  00000000  00000000  00201e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007178  00000000  00000000  00205a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047996  00000000  00000000  0020cbab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004d409  00000000  00000000  00254541  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124052  00000000  00000000  002a194a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00011750  00000000  00000000  003c599c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f8e1 	bl	db1f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f901 	bl	db244 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd50 	.word	0x2003dd50
   d404c:	000de6ec 	.word	0x000de6ec
   d4050:	2003dea8 	.word	0x2003dea8
   d4054:	2003dea8 	.word	0x2003dea8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 ff73 	bl	d9f48 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000ddec4 	.word	0x000ddec4
   d4084:	000dde58 	.word	0x000dde58

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b962 	b.w	d5350 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ff63 	bl	d4f58 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f005 bf19 	b.w	d9ecc <_post_loop>

000d409a <_Znwj>:
   d409a:	f004 b925 	b.w	d82e8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f004 b92b 	b.w	d82f8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f004 b929 	b.w	d82f8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f003 ffe2 	bl	d8078 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d7cf9 	.word	0x000d7cf9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40cc:	4b01      	ldr	r3, [pc, #4]	; (d40d4 <_Z11watchdogISRv+0x8>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	701a      	strb	r2, [r3, #0]
   d40d2:	4770      	bx	lr
   d40d4:	2003df64 	.word	0x2003df64

000d40d8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40da:	6803      	ldr	r3, [r0, #0]
   d40dc:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40de:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40e0:	d904      	bls.n	d40ec <nrf_gpio_pin_port_decode+0x14>
   d40e2:	4a07      	ldr	r2, [pc, #28]	; (d4100 <nrf_gpio_pin_port_decode+0x28>)
   d40e4:	2100      	movs	r1, #0
   d40e6:	200a      	movs	r0, #10
   d40e8:	f003 ffc6 	bl	d8078 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40f0:	bf83      	ittte	hi
   d40f2:	f003 031f 	andhi.w	r3, r3, #31
   d40f6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d40f8:	4802      	ldrhi	r0, [pc, #8]	; (d4104 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d40fa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	000d7cf9 	.word	0x000d7cf9
   d4104:	50000300 	.word	0x50000300

000d4108 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d410c:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d410e:	b128      	cbz	r0, d411c <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4110:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4112:	210c      	movs	r1, #12
   d4114:	f006 f815 	bl	da142 <_ZdlPvj>
            wakeupSource = next;
   d4118:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d411a:	e7f8      	b.n	d410e <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d411c:	4620      	mov	r0, r4
   d411e:	bd38      	pop	{r3, r4, r5, pc}

000d4120 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4120:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4122:	4904      	ldr	r1, [pc, #16]	; (d4134 <_Z9resetFRAM6String+0x14>)
   d4124:	f005 fb29 	bl	d977a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4128:	b118      	cbz	r0, d4132 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d412a:	4803      	ldr	r0, [pc, #12]	; (d4138 <_Z9resetFRAM6String+0x18>)
   d412c:	f001 fc90 	bl	d5a50 <_ZN6MB85RC5eraseEv>
    return 1;
   d4130:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4132:	bd08      	pop	{r3, pc}
   d4134:	000dce5f 	.word	0x000dce5f
   d4138:	2003e018 	.word	0x2003e018

000d413c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d413c:	b508      	push	{r3, lr}
   d413e:	4904      	ldr	r1, [pc, #16]	; (d4150 <_Z7sendNow6String+0x14>)
   d4140:	f005 fb1b 	bl	d977a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4144:	b118      	cbz	r0, d414e <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4146:	4b03      	ldr	r3, [pc, #12]	; (d4154 <_Z7sendNow6String+0x18>)
   d4148:	2203      	movs	r2, #3
   d414a:	701a      	strb	r2, [r3, #0]
    return 1;
   d414c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	000dce5f 	.word	0x000dce5f
   d4154:	2003df59 	.word	0x2003df59

000d4158 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4158:	b510      	push	{r4, lr}
   d415a:	4b03      	ldr	r3, [pc, #12]	; (d4168 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d415c:	6003      	str	r3, [r0, #0]
   d415e:	4604      	mov	r4, r0
   d4160:	f002 fccc 	bl	d6afc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}
   d4168:	000dc9d8 	.word	0x000dc9d8

000d416c <_ZN17PublishQueueAsyncD0Ev>:
   d416c:	b510      	push	{r4, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	f7ff fff2 	bl	d4158 <_ZN17PublishQueueAsyncD1Ev>
   d4174:	4620      	mov	r0, r4
   d4176:	2138      	movs	r1, #56	; 0x38
   d4178:	f005 ffe3 	bl	da142 <_ZdlPvj>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4180:	b510      	push	{r4, lr}
   d4182:	4b03      	ldr	r3, [pc, #12]	; (d4190 <_ZN8MB85RC64D1Ev+0x10>)
   d4184:	6003      	str	r3, [r0, #0]
   d4186:	4604      	mov	r4, r0
   d4188:	f001 fc42 	bl	d5a10 <_ZN6MB85RCD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}
   d4190:	000dc9bc 	.word	0x000dc9bc

000d4194 <_ZN8MB85RC64D0Ev>:
   d4194:	b510      	push	{r4, lr}
   d4196:	4604      	mov	r4, r0
   d4198:	f7ff fff2 	bl	d4180 <_ZN8MB85RC64D1Ev>
   d419c:	4620      	mov	r0, r4
   d419e:	2110      	movs	r1, #16
   d41a0:	f005 ffcf 	bl	da142 <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f004 f8a2 	bl	d82f8 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ba:	f004 f805 	bl	d81c8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d41be:	b120      	cbz	r0, d41ca <_ZN10CloudClass8syncTimeEv.isra.11+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
    }
   d41c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d41c6:	f004 b81f 	b.w	d8208 <spark_sync_time>
    }
   d41ca:	bd08      	pop	{r3, pc}

000d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ce:	2000      	movs	r0, #0
   d41d0:	f004 f822 	bl	d8218 <spark_sync_time_pending>
   d41d4:	b128      	cbz	r0, d41e2 <_ZN10CloudClass12syncTimeDoneEv.isra.13+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d6:	f003 fff7 	bl	d81c8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41da:	f080 0001 	eor.w	r0, r0, #1
   d41de:	b2c0      	uxtb	r0, r0
   d41e0:	bd08      	pop	{r3, pc}
   d41e2:	2001      	movs	r0, #1
    }
   d41e4:	bd08      	pop	{r3, pc}

000d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41e6:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41e8:	2100      	movs	r1, #0
   d41ea:	4604      	mov	r4, r0
   d41ec:	4608      	mov	r0, r1
   d41ee:	f003 fd23 	bl	d7c38 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f2:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41f6:	2100      	movs	r1, #0
   d41f8:	2001      	movs	r0, #1
   d41fa:	f003 fd1d 	bl	d7c38 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41fe:	b2e0      	uxtb	r0, r4
   d4200:	bd10      	pop	{r4, pc}

000d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>:
	/**
	 * @brief Returns the latitude in degrees as a float. May be positive or negative.
	 *
	 * Negative values are used for south latitude.
	 */
	float readLatDeg(void) const {
   d4202:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4204:	2100      	movs	r1, #0
   d4206:	b08f      	sub	sp, #60	; 0x3c
   d4208:	4604      	mov	r4, r0
   d420a:	4608      	mov	r0, r1
   d420c:	f003 fd14 	bl	d7c38 <os_thread_scheduling>
	/**
	 * @brief Get the location (latitude and longitude)
	 */
	TinyGPSLocation getLocation() const {
	    SINGLE_THREADED_BLOCK() {
	    	return location;
   d4210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4212:	466d      	mov	r5, sp
   d4214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4222:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4226:	2100      	movs	r1, #0
   d4228:	2001      	movs	r0, #1
   d422a:	f003 fd05 	bl	d7c38 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d422e:	4668      	mov	r0, sp
   d4230:	f003 f9aa 	bl	d7588 <_ZN15TinyGPSLocation3latEv>
   d4234:	ec51 0b10 	vmov	r0, r1, d0
   d4238:	f006 fd9a 	bl	dad70 <__aeabi_d2f>
	}
   d423c:	ee00 0a10 	vmov	s0, r0
   d4240:	b00f      	add	sp, #60	; 0x3c
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>:
	/**
	 * @brief Returns the longitude in degrees as a float. May be positive or negative.
 	 *
	 * Negative values are used for east longitude.
	 */
	float readLonDeg(void) const {
   d4244:	b530      	push	{r4, r5, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4246:	2100      	movs	r1, #0
   d4248:	b08f      	sub	sp, #60	; 0x3c
   d424a:	4604      	mov	r4, r0
   d424c:	4608      	mov	r0, r1
   d424e:	f003 fcf3 	bl	d7c38 <os_thread_scheduling>
   d4252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4254:	466d      	mov	r5, sp
   d4256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4264:	e885 0003 	stmia.w	r5, {r0, r1}
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4268:	2100      	movs	r1, #0
   d426a:	2001      	movs	r0, #1
   d426c:	f003 fce4 	bl	d7c38 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4270:	4668      	mov	r0, sp
   d4272:	f003 f9b1 	bl	d75d8 <_ZN15TinyGPSLocation3lngEv>
   d4276:	ec51 0b10 	vmov	r0, r1, d0
   d427a:	f006 fd79 	bl	dad70 <__aeabi_d2f>
	}
   d427e:	ee00 0a10 	vmov	s0, r0
   d4282:	b00f      	add	sp, #60	; 0x3c
   d4284:	bd30      	pop	{r4, r5, pc}

000d4286 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4286:	2000      	movs	r0, #0
   d4288:	f003 bd6e 	b.w	d7d68 <hal_timer_millis>

000d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d428c:	b508      	push	{r3, lr}
   d428e:	ed2d 8b02 	vpush	{d8}
   d4292:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4296:	b128      	cbz	r0, d42a4 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4298:	3801      	subs	r0, #1
   d429a:	f7ff fff7 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d429e:	ee28 0a00 	vmul.f32	s0, s16, s0
   d42a2:	e001      	b.n	d42a8 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d42a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d42a8:	ecbd 8b02 	vpop	{d8}
   d42ac:	bd08      	pop	{r3, pc}

000d42ae <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42ae:	b40e      	push	{r1, r2, r3}
   d42b0:	b500      	push	{lr}
   d42b2:	b08c      	sub	sp, #48	; 0x30
   d42b4:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42b6:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d42b8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d42bc:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42be:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d42c2:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c4:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42c6:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42c8:	aa04      	add	r2, sp, #16
   d42ca:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42cc:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42ce:	f003 fedb 	bl	d8088 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d42d2:	b00c      	add	sp, #48	; 0x30
   d42d4:	f85d eb04 	ldr.w	lr, [sp], #4
   d42d8:	b003      	add	sp, #12
   d42da:	4770      	bx	lr

000d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42de:	6804      	ldr	r4, [r0, #0]
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42e4:	f88d 3000 	strb.w	r3, [sp]
   d42e8:	f88d 5004 	strb.w	r5, [sp, #4]
   d42ec:	68e4      	ldr	r4, [r4, #12]
   d42ee:	233c      	movs	r3, #60	; 0x3c
   d42f0:	47a0      	blx	r4
	}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}
	...

000d42f8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f8:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d42fa:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  currentMinutePeriod = Time.minute();
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42fc:	b092      	sub	sp, #72	; 0x48
   d42fe:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4300:	b923      	cbnz	r3, d430c <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4302:	4919      	ldr	r1, [pc, #100]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4304:	a802      	add	r0, sp, #8
   d4306:	f007 fa25 	bl	db754 <strcpy>
   d430a:	e017      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d430c:	4608      	mov	r0, r1
   d430e:	f006 fdbb 	bl	dae88 <atoi>
   d4312:	28c8      	cmp	r0, #200	; 0xc8
   d4314:	d004      	beq.n	d4320 <_Z14UbidotsHandlerPKcS0_+0x28>
   d4316:	4620      	mov	r0, r4
   d4318:	f006 fdb6 	bl	dae88 <atoi>
   d431c:	28c9      	cmp	r0, #201	; 0xc9
   d431e:	d119      	bne.n	d4354 <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4320:	4912      	ldr	r1, [pc, #72]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f007 fa16 	bl	db754 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4328:	f005 fc61 	bl	d9bee <_ZN9TimeClass3nowEv>
   d432c:	4b10      	ldr	r3, [pc, #64]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432e:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4330:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4332:	2201      	movs	r2, #1
   d4334:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4336:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4338:	2200      	movs	r2, #0
   d433a:	701a      	strb	r2, [r3, #0]
   d433c:	4b0f      	ldr	r3, [pc, #60]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x84>)
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d433e:	4910      	ldr	r1, [pc, #64]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	4810      	ldr	r0, [pc, #64]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x8c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4344:	2200      	movs	r2, #0
   d4346:	f88d 2000 	strb.w	r2, [sp]
   d434a:	aa02      	add	r2, sp, #8
   d434c:	f7ff ffc6 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4350:	b012      	add	sp, #72	; 0x48
   d4352:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4354:	4620      	mov	r0, r4
   d4356:	f006 fd97 	bl	dae88 <atoi>
   d435a:	4a0b      	ldr	r2, [pc, #44]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d435c:	4603      	mov	r3, r0
   d435e:	2140      	movs	r1, #64	; 0x40
   d4360:	a802      	add	r0, sp, #8
   d4362:	f003 ffe9 	bl	d8338 <snprintf>
   d4366:	e7e9      	b.n	d433c <_Z14UbidotsHandlerPKcS0_+0x44>
   d4368:	000dca40 	.word	0x000dca40
   d436c:	000dca55 	.word	0x000dca55
   d4370:	2003e04c 	.word	0x2003e04c
   d4374:	2003df58 	.word	0x2003df58
   d4378:	2003e028 	.word	0x2003e028
   d437c:	2003df0c 	.word	0x2003df0c
   d4380:	000dca48 	.word	0x000dca48
   d4384:	2003deac 	.word	0x2003deac
   d4388:	000dca67 	.word	0x000dca67

000d438c <_Z12hardResetNow6String>:
  else return 0;
}


int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d438c:	b513      	push	{r0, r1, r4, lr}
   d438e:	490b      	ldr	r1, [pc, #44]	; (d43bc <_Z12hardResetNow6String+0x30>)
   d4390:	f005 f9f3 	bl	d977a <_ZNK6String6equalsEPKc>
   d4394:	2400      	movs	r4, #0
  if (command == "1")
   d4396:	b178      	cbz	r0, d43b8 <_Z12hardResetNow6String+0x2c>
   d4398:	4b09      	ldr	r3, [pc, #36]	; (d43c0 <_Z12hardResetNow6String+0x34>)
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d439a:	4a0a      	ldr	r2, [pc, #40]	; (d43c4 <_Z12hardResetNow6String+0x38>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d439c:	781b      	ldrb	r3, [r3, #0]
   d439e:	490a      	ldr	r1, [pc, #40]	; (d43c8 <_Z12hardResetNow6String+0x3c>)
   d43a0:	f88d 4000 	strb.w	r4, [sp]
   d43a4:	4809      	ldr	r0, [pc, #36]	; (d43cc <_Z12hardResetNow6String+0x40>)
   d43a6:	f7ff ff99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    rtc.setAlarm(10);
   d43aa:	4623      	mov	r3, r4
   d43ac:	2201      	movs	r2, #1
   d43ae:	210a      	movs	r1, #10
   d43b0:	4807      	ldr	r0, [pc, #28]	; (d43d0 <_Z12hardResetNow6String+0x44>)
   d43b2:	f002 f866 	bl	d6482 <_ZN8MCP794108setAlarmEibi>
   d43b6:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d43b8:	b002      	add	sp, #8
   d43ba:	bd10      	pop	{r4, pc}
   d43bc:	000dce5f 	.word	0x000dce5f
   d43c0:	2003df0c 	.word	0x2003df0c
   d43c4:	000dca84 	.word	0x000dca84
   d43c8:	000dccc8 	.word	0x000dccc8
   d43cc:	2003deac 	.word	0x2003deac
   d43d0:	2003def0 	.word	0x2003def0

000d43d4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43d6:	491a      	ldr	r1, [pc, #104]	; (d4440 <_Z14setverboseMode6String+0x6c>)
   d43d8:	4604      	mov	r4, r0
   d43da:	f005 f9ce 	bl	d977a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43de:	4605      	mov	r5, r0
   d43e0:	b1a0      	cbz	r0, d440c <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
   d43e2:	4b18      	ldr	r3, [pc, #96]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d43e4:	2401      	movs	r4, #1
   d43e6:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d43e8:	4b17      	ldr	r3, [pc, #92]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d43ea:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d43ec:	f003 feec 	bl	d81c8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f0:	b908      	cbnz	r0, d43f6 <_Z14setverboseMode6String+0x22>
    return 1;
   d43f2:	2001      	movs	r0, #1
   d43f4:	e022      	b.n	d443c <_Z14setverboseMode6String+0x68>
   d43f6:	4b15      	ldr	r3, [pc, #84]	; (d444c <_Z14setverboseMode6String+0x78>)
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d43f8:	4915      	ldr	r1, [pc, #84]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d43fa:	781b      	ldrb	r3, [r3, #0]
   d43fc:	4815      	ldr	r0, [pc, #84]	; (d4454 <_Z14setverboseMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d43fe:	2200      	movs	r2, #0
   d4400:	f88d 2000 	strb.w	r2, [sp]
   d4404:	4a14      	ldr	r2, [pc, #80]	; (d4458 <_Z14setverboseMode6String+0x84>)
   d4406:	f7ff ff69 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d440a:	e7f2      	b.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d440c:	4913      	ldr	r1, [pc, #76]	; (d445c <_Z14setverboseMode6String+0x88>)
   d440e:	4620      	mov	r0, r4
   d4410:	f005 f9b3 	bl	d977a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4414:	b190      	cbz	r0, d443c <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
   d4416:	4b0b      	ldr	r3, [pc, #44]	; (d4444 <_Z14setverboseMode6String+0x70>)
   d4418:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d441a:	4b0b      	ldr	r3, [pc, #44]	; (d4448 <_Z14setverboseMode6String+0x74>)
   d441c:	2401      	movs	r4, #1
   d441e:	701c      	strb	r4, [r3, #0]
   d4420:	f003 fed2 	bl	d81c8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	2800      	cmp	r0, #0
   d4426:	d0e4      	beq.n	d43f2 <_Z14setverboseMode6String+0x1e>
   d4428:	4b08      	ldr	r3, [pc, #32]	; (d444c <_Z14setverboseMode6String+0x78>)
   d442a:	4a0d      	ldr	r2, [pc, #52]	; (d4460 <_Z14setverboseMode6String+0x8c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d442c:	781b      	ldrb	r3, [r3, #0]
   d442e:	4908      	ldr	r1, [pc, #32]	; (d4450 <_Z14setverboseMode6String+0x7c>)
   d4430:	f88d 5000 	strb.w	r5, [sp]
   d4434:	4807      	ldr	r0, [pc, #28]	; (d4454 <_Z14setverboseMode6String+0x80>)
   d4436:	f7ff ff51 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d443a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d443c:	b003      	add	sp, #12
   d443e:	bd30      	pop	{r4, r5, pc}
   d4440:	000dce5f 	.word	0x000dce5f
   d4444:	2003e04c 	.word	0x2003e04c
   d4448:	2003df58 	.word	0x2003df58
   d444c:	2003df0c 	.word	0x2003df0c
   d4450:	000dcabf 	.word	0x000dcabf
   d4454:	2003deac 	.word	0x2003deac
   d4458:	000dca9c 	.word	0x000dca9c
   d445c:	000dcaad 	.word	0x000dcaad
   d4460:	000dcaaf 	.word	0x000dcaaf
   d4464:	00000000 	.word	0x00000000

000d4468 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d446c:	b0cb      	sub	sp, #300	; 0x12c
   d446e:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4470:	f7ff fea2 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4474:	f7ff ff07 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4478:	2700      	movs	r7, #0
   d447a:	4606      	mov	r6, r0
   d447c:	f247 582f 	movw	r8, #29999	; 0x752f
   d4480:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4484:	f7ff feff 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4488:	1b80      	subs	r0, r0, r6
   d448a:	eb61 0107 	sbc.w	r1, r1, r7
   d448e:	4589      	cmp	r9, r1
   d4490:	bf08      	it	eq
   d4492:	4580      	cmpeq	r8, r0
   d4494:	d305      	bcc.n	d44a2 <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d4496:	f7ff fe99 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d449a:	b910      	cbnz	r0, d44a2 <_Z11setTimeZone6String+0x3a>
            spark_process();
   d449c:	f003 fe7c 	bl	d8198 <spark_process>
   d44a0:	e7f0      	b.n	d4484 <_Z11setTimeZone6String+0x1c>
   d44a2:	f7ff fe93 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44a6:	220a      	movs	r2, #10
   d44a8:	a905      	add	r1, sp, #20
   d44aa:	6820      	ldr	r0, [r4, #0]
   d44ac:	f007 ff40 	bl	dc330 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44b0:	f100 030c 	add.w	r3, r0, #12
   d44b4:	b2db      	uxtb	r3, r3
   d44b6:	2b18      	cmp	r3, #24
   d44b8:	d849      	bhi.n	d454e <_Z11setTimeZone6String+0xe6>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44ba:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44bc:	ee07 5a90 	vmov	s15, r5
   d44c0:	4b27      	ldr	r3, [pc, #156]	; (d4560 <_Z11setTimeZone6String+0xf8>)
   d44c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44c6:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44c8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44cc:	f005 fa68 	bl	d99a0 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44d0:	4b24      	ldr	r3, [pc, #144]	; (d4564 <_Z11setTimeZone6String+0xfc>)
   d44d2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44d4:	f005 fa56 	bl	d9984 <_ZN9TimeClass5localEv>
   d44d8:	4606      	mov	r6, r0
   d44da:	f005 fb88 	bl	d9bee <_ZN9TimeClass3nowEv>
   d44de:	1a30      	subs	r0, r6, r0
   d44e0:	f006 f8e8 	bl	da6b4 <__aeabi_i2d>
   d44e4:	a31c      	add	r3, pc, #112	; (adr r3, d4558 <_Z11setTimeZone6String+0xf0>)
   d44e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ea:	f006 fa73 	bl	da9d4 <__aeabi_ddiv>
   d44ee:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <_Z11setTimeZone6String+0x100>)
   d44f0:	e9cd 0100 	strd	r0, r1, [sp]
   d44f4:	210a      	movs	r1, #10
   d44f6:	481d      	ldr	r0, [pc, #116]	; (d456c <_Z11setTimeZone6String+0x104>)
   d44f8:	f003 ff1e 	bl	d8338 <snprintf>
   d44fc:	f003 fe64 	bl	d81c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4500:	b318      	cbz	r0, d454a <_Z11setTimeZone6String+0xe2>
   d4502:	4e1b      	ldr	r6, [pc, #108]	; (d4570 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4504:	4a1b      	ldr	r2, [pc, #108]	; (d4574 <_Z11setTimeZone6String+0x10c>)
   d4506:	462b      	mov	r3, r5
   d4508:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d450c:	2500      	movs	r5, #0
   d450e:	a80a      	add	r0, sp, #40	; 0x28
   d4510:	f003 ff12 	bl	d8338 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4514:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
   d4516:	4918      	ldr	r1, [pc, #96]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d4518:	f88d 5000 	strb.w	r5, [sp]
   d451c:	aa0a      	add	r2, sp, #40	; 0x28
   d451e:	4817      	ldr	r0, [pc, #92]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4520:	f7ff fedc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4524:	f005 fb63 	bl	d9bee <_ZN9TimeClass3nowEv>
   d4528:	4601      	mov	r1, r0
   d452a:	a806      	add	r0, sp, #24
   d452c:	f005 fa88 	bl	d9a40 <_ZN9TimeClass7timeStrEl>
   d4530:	9b06      	ldr	r3, [sp, #24]
   d4532:	9303      	str	r3, [sp, #12]
   d4534:	9a03      	ldr	r2, [sp, #12]
   d4536:	7833      	ldrb	r3, [r6, #0]
   d4538:	490f      	ldr	r1, [pc, #60]	; (d4578 <_Z11setTimeZone6String+0x110>)
   d453a:	f88d 5000 	strb.w	r5, [sp]
   d453e:	480f      	ldr	r0, [pc, #60]	; (d457c <_Z11setTimeZone6String+0x114>)
   d4540:	f7ff fecc 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4544:	a806      	add	r0, sp, #24
   d4546:	f005 f8a4 	bl	d9692 <_ZN6StringD1Ev>
  }

  return 1;
   d454a:	4620      	mov	r0, r4
   d454c:	e000      	b.n	d4550 <_Z11setTimeZone6String+0xe8>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d454e:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
   d4550:	b04b      	add	sp, #300	; 0x12c
   d4552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4556:	bf00      	nop
   d4558:	00000000 	.word	0x00000000
   d455c:	40ac2000 	.word	0x40ac2000
   d4560:	2003e04c 	.word	0x2003e04c
   d4564:	2003df58 	.word	0x2003df58
   d4568:	000dcac4 	.word	0x000dcac4
   d456c:	2003dee4 	.word	0x2003dee4
   d4570:	2003df0c 	.word	0x2003df0c
   d4574:	000dcace 	.word	0x000dcace
   d4578:	000dcae2 	.word	0x000dcae2
   d457c:	2003deac 	.word	0x2003deac

000d4580 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4580:	b510      	push	{r4, lr}
   d4582:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4584:	220a      	movs	r2, #10
   d4586:	a903      	add	r1, sp, #12
   d4588:	6800      	ldr	r0, [r0, #0]
   d458a:	f007 fed1 	bl	dc330 <strtol>
  if ((tempSampleInterval < 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d458e:	b2c3      	uxtb	r3, r0
   d4590:	2b3c      	cmp	r3, #60	; 0x3c
   d4592:	d818      	bhi.n	d45c6 <_Z17setSampleInterval6String+0x46>
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d4594:	4a0e      	ldr	r2, [pc, #56]	; (d45d0 <_Z17setSampleInterval6String+0x50>)
   d4596:	7193      	strb	r3, [r2, #6]
  systemStatusWriteNeeded = true;
   d4598:	4a0e      	ldr	r2, [pc, #56]	; (d45d4 <_Z17setSampleInterval6String+0x54>)
   d459a:	2401      	movs	r4, #1
   d459c:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d459e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45a2:	4a0d      	ldr	r2, [pc, #52]	; (d45d8 <_Z17setSampleInterval6String+0x58>)
   d45a4:	a804      	add	r0, sp, #16
   d45a6:	f003 fec7 	bl	d8338 <snprintf>
   d45aa:	f003 fe0d 	bl	d81c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45ae:	b160      	cbz	r0, d45ca <_Z17setSampleInterval6String+0x4a>
   d45b0:	4b0a      	ldr	r3, [pc, #40]	; (d45dc <_Z17setSampleInterval6String+0x5c>)
    publishQueue.publish("Interval", data, PRIVATE);
   d45b2:	490b      	ldr	r1, [pc, #44]	; (d45e0 <_Z17setSampleInterval6String+0x60>)
   d45b4:	781b      	ldrb	r3, [r3, #0]
   d45b6:	480b      	ldr	r0, [pc, #44]	; (d45e4 <_Z17setSampleInterval6String+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d45b8:	2200      	movs	r2, #0
   d45ba:	f88d 2000 	strb.w	r2, [sp]
   d45be:	aa04      	add	r2, sp, #16
   d45c0:	f7ff fe8c 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45c4:	e001      	b.n	d45ca <_Z17setSampleInterval6String+0x4a>

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempSampleInterval < 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45c6:	2000      	movs	r0, #0
   d45c8:	e000      	b.n	d45cc <_Z17setSampleInterval6String+0x4c>
  systemStatusWriteNeeded = true;
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
  if (Particle.connected()) {
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
   d45ca:	4620      	mov	r0, r4
}
   d45cc:	b044      	add	sp, #272	; 0x110
   d45ce:	bd10      	pop	{r4, pc}
   d45d0:	2003e04c 	.word	0x2003e04c
   d45d4:	2003df58 	.word	0x2003df58
   d45d8:	000dcae7 	.word	0x000dcae7
   d45dc:	2003df0c 	.word	0x2003df0c
   d45e0:	000dcd32 	.word	0x000dcd32
   d45e4:	2003deac 	.word	0x2003deac

000d45e8 <_Z9sendEventv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d45e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d45ec:	4b23      	ldr	r3, [pc, #140]	; (d467c <_Z9sendEventv+0x94>)
   d45ee:	4c24      	ldr	r4, [pc, #144]	; (d4680 <_Z9sendEventv+0x98>)
   d45f0:	689d      	ldr	r5, [r3, #8]
   d45f2:	69a2      	ldr	r2, [r4, #24]
   d45f4:	691b      	ldr	r3, [r3, #16]
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}


void sendEvent() {
   d45f6:	b0d3      	sub	sp, #332	; 0x14c
  char data[256];                                                     // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d45f8:	e9d4 6700 	ldrd	r6, r7, [r4]
   d45fc:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d4600:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4604:	9311      	str	r3, [sp, #68]	; 0x44
   d4606:	9210      	str	r2, [sp, #64]	; 0x40
   d4608:	f005 faf1 	bl	d9bee <_ZN9TimeClass3nowEv>
   d460c:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d4610:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d4614:	ed94 7b08 	vldr	d7, [r4, #32]
   d4618:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d461a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d461c:	9308      	str	r3, [sp, #32]
   d461e:	4b19      	ldr	r3, [pc, #100]	; (d4684 <_Z9sendEventv+0x9c>)
   d4620:	900a      	str	r0, [sp, #40]	; 0x28
   d4622:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d4626:	9209      	str	r2, [sp, #36]	; 0x24
   d4628:	9307      	str	r3, [sp, #28]
   d462a:	9506      	str	r5, [sp, #24]
   d462c:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d4630:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4634:	e9cd 6700 	strd	r6, r7, [sp]
   d4638:	4a13      	ldr	r2, [pc, #76]	; (d4688 <_Z9sendEventv+0xa0>)
   d463a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d463e:	a812      	add	r0, sp, #72	; 0x48
   d4640:	f003 fe7a 	bl	d8338 <snprintf>
   d4644:	4b11      	ldr	r3, [pc, #68]	; (d468c <_Z9sendEventv+0xa4>)
  publishQueue.publish("Ubidots-MBTA-Hook-v1", data, PRIVATE);
   d4646:	4912      	ldr	r1, [pc, #72]	; (d4690 <_Z9sendEventv+0xa8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4648:	781b      	ldrb	r3, [r3, #0]
   d464a:	4812      	ldr	r0, [pc, #72]	; (d4694 <_Z9sendEventv+0xac>)
   d464c:	2200      	movs	r2, #0
   d464e:	f88d 2000 	strb.w	r2, [sp]
   d4652:	aa12      	add	r2, sp, #72	; 0x48
   d4654:	f7ff fe42 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4658:	4b0f      	ldr	r3, [pc, #60]	; (d4698 <_Z9sendEventv+0xb0>)
   d465a:	2201      	movs	r2, #1
   d465c:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d465e:	f003 fb53 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4662:	4b0e      	ldr	r3, [pc, #56]	; (d469c <_Z9sendEventv+0xb4>)
   d4664:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4666:	f005 fac9 	bl	d9bfc <_ZN9TimeClass4hourEv>
   d466a:	4b0d      	ldr	r3, [pc, #52]	; (d46a0 <_Z9sendEventv+0xb8>)
   d466c:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d466e:	f005 facf 	bl	d9c10 <_ZN9TimeClass6minuteEv>
   d4672:	4b0c      	ldr	r3, [pc, #48]	; (d46a4 <_Z9sendEventv+0xbc>)
   d4674:	6018      	str	r0, [r3, #0]
}
   d4676:	b053      	add	sp, #332	; 0x14c
   d4678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d467c:	2003e04c 	.word	0x2003e04c
   d4680:	2003dfe8 	.word	0x2003dfe8
   d4684:	2003df41 	.word	0x2003df41
   d4688:	000dcb09 	.word	0x000dcb09
   d468c:	2003df0c 	.word	0x2003df0c
   d4690:	000dcb99 	.word	0x000dcb99
   d4694:	2003deac 	.word	0x2003deac
   d4698:	2003e028 	.word	0x2003e028
   d469c:	2003df54 	.word	0x2003df54
   d46a0:	2003df60 	.word	0x2003df60
   d46a4:	2003dfe4 	.word	0x2003dfe4

000d46a8 <_Z7getTempPh>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
  currentCountsWriteNeeded=true;
}

double getTemp(uint8_t addr[8]) {
   d46a8:	b530      	push	{r4, r5, lr}
   d46aa:	ed2d 8b02 	vpush	{d8}
   d46ae:	4605      	mov	r5, r0
   d46b0:	b083      	sub	sp, #12
  double _temp;
  int   i = 0;
   d46b2:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
   d46b4:	2200      	movs	r2, #0
   d46b6:	4629      	mov	r1, r5
   d46b8:	4819      	ldr	r0, [pc, #100]	; (d4720 <_Z7getTempPh+0x78>)
   d46ba:	f001 f8e3 	bl	d5884 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46be:	4818      	ldr	r0, [pc, #96]	; (d4720 <_Z7getTempPh+0x78>)
double getTemp(uint8_t addr[8]) {
  double _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
   d46c0:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46c4:	f001 f99c 	bl	d5a00 <_ZN7DS18B208crcCheckEv>
   d46c8:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46cc:	b950      	cbnz	r0, d46e4 <_Z7getTempPh+0x3c>
   d46ce:	3401      	adds	r4, #1
   d46d0:	2c04      	cmp	r4, #4
   d46d2:	d1ef      	bne.n	d46b4 <_Z7getTempPh+0xc>
    //_temp = ds18b20.convertToFahrenheit(_temp);
    Serial.println(_temp);
  }
  else {
    _temp = NAN;
    Serial.println("Invalid reading");
   d46d4:	f005 fbb6 	bl	d9e44 <_Z16_fetch_usbserialv>
   d46d8:	4912      	ldr	r1, [pc, #72]	; (d4724 <_Z7getTempPh+0x7c>)
   d46da:	f004 fde4 	bl	d92a6 <_ZN5Print7printlnEPKc>
   d46de:	ed9f 8b0e 	vldr	d8, [pc, #56]	; d4718 <_Z7getTempPh+0x70>
  }

  return _temp;
   d46e2:	e010      	b.n	d4706 <_Z7getTempPh+0x5e>

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d46e4:	2c03      	cmp	r4, #3
   d46e6:	d0f5      	beq.n	d46d4 <_Z7getTempPh+0x2c>
double getTemp(uint8_t addr[8]) {
  double _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
   d46e8:	ee10 0a10 	vmov	r0, s0
   d46ec:	f005 fff4 	bl	da6d8 <__aeabi_f2d>
   d46f0:	ec41 0b18 	vmov	d8, r0, r1
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
    //_temp = ds18b20.convertToFahrenheit(_temp);
    Serial.println(_temp);
   d46f4:	f005 fba6 	bl	d9e44 <_Z16_fetch_usbserialv>
   d46f8:	eeb0 0a48 	vmov.f32	s0, s16
   d46fc:	eef0 0a68 	vmov.f32	s1, s17
   d4700:	2102      	movs	r1, #2
   d4702:	f004 feb9 	bl	d9478 <_ZN5Print7printlnEdi>
    _temp = NAN;
    Serial.println("Invalid reading");
  }

  return _temp;
}
   d4706:	eeb0 0a48 	vmov.f32	s0, s16
   d470a:	eef0 0a68 	vmov.f32	s1, s17
   d470e:	b003      	add	sp, #12
   d4710:	ecbd 8b02 	vpop	{d8}
   d4714:	bd30      	pop	{r4, r5, pc}
   d4716:	bf00      	nop
   d4718:	00000000 	.word	0x00000000
   d471c:	7ff80000 	.word	0x7ff80000
   d4720:	2003e02c 	.word	0x2003e02c
   d4724:	000dcbae 	.word	0x000dcbae

000d4728 <_Z17getSignalStrengthv>:

void getSignalStrength() {
   d4728:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d472a:	4d19      	ldr	r5, [pc, #100]	; (d4790 <_Z17getSignalStrengthv+0x68>)
   d472c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  }

  return _temp;
}

void getSignalStrength() {
   d472e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4730:	ac04      	add	r4, sp, #16
   d4732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4738:	e895 0003 	ldmia.w	r5, {r0, r1}
   d473c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4740:	4914      	ldr	r1, [pc, #80]	; (d4794 <_Z17getSignalStrengthv+0x6c>)
   d4742:	a80e      	add	r0, sp, #56	; 0x38
   d4744:	f003 feaa 	bl	d849c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4748:	a80e      	add	r0, sp, #56	; 0x38
   d474a:	f003 fefa 	bl	d8542 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d474e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4750:	a80e      	add	r0, sp, #56	; 0x38
   d4752:	f003 ff47 	bl	d85e4 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4756:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4758:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d475c:	f003 ff28 	bl	d85b0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4760:	ab18      	add	r3, sp, #96	; 0x60
   d4762:	ee10 0a10 	vmov	r0, s0
   d4766:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d476a:	f005 ffb5 	bl	da6d8 <__aeabi_f2d>
   d476e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4772:	4628      	mov	r0, r5
   d4774:	f005 ffb0 	bl	da6d8 <__aeabi_f2d>
   d4778:	e9cd 0100 	strd	r0, r1, [sp]
   d477c:	4a06      	ldr	r2, [pc, #24]	; (d4798 <_Z17getSignalStrengthv+0x70>)
   d477e:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4782:	4806      	ldr	r0, [pc, #24]	; (d479c <_Z17getSignalStrengthv+0x74>)
   d4784:	2140      	movs	r1, #64	; 0x40
   d4786:	f003 fdd7 	bl	d8338 <snprintf>
}
   d478a:	b019      	add	sp, #100	; 0x64
   d478c:	bd30      	pop	{r4, r5, pc}
   d478e:	bf00      	nop
   d4790:	000dc9f8 	.word	0x000dc9f8
   d4794:	2003e25c 	.word	0x2003e25c
   d4798:	000dcbbe 	.word	0x000dcbbe
   d479c:	2003df98 	.word	0x2003df98

000d47a0 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d47a0:	b537      	push	{r0, r1, r2, r4, r5, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47a2:	4d16      	ldr	r5, [pc, #88]	; (d47fc <_Z11petWatchdogv+0x5c>)
   d47a4:	682a      	ldr	r2, [r5, #0]
   d47a6:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47aa:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47ae:	a802      	add	r0, sp, #8
   d47b0:	f003 031f 	and.w	r3, r3, #31
   d47b4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47b8:	f840 3d08 	str.w	r3, [r0, #-8]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47bc:	f7ff fc8c 	bl	d40d8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47c0:	9b00      	ldr	r3, [sp, #0]
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d47c2:	682a      	ldr	r2, [r5, #0]
   d47c4:	2401      	movs	r4, #1
   d47c6:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d47ca:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d47ce:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
   d47d2:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
   d47d6:	a802      	add	r0, sp, #8
   d47d8:	f003 031f 	and.w	r3, r3, #31
   d47dc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47e0:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47e4:	f7ff fc78 	bl	d40d8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d47e8:	9b01      	ldr	r3, [sp, #4]
   d47ea:	409c      	lsls	r4, r3
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d47ec:	4b04      	ldr	r3, [pc, #16]	; (d4800 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d47ee:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d47f2:	2200      	movs	r2, #0
   d47f4:	701a      	strb	r2, [r3, #0]
}
   d47f6:	b003      	add	sp, #12
   d47f8:	bd30      	pop	{r4, r5, pc}
   d47fa:	bf00      	nop
   d47fc:	2003df94 	.word	0x2003df94
   d4800:	2003df64 	.word	0x2003df64

000d4804 <_Z14setPowerConfigv>:


// Power Management function
int setPowerConfig() {
   d4804:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4806:	2420      	movs	r4, #32
   d4808:	b090      	sub	sp, #64	; 0x40
   d480a:	4622      	mov	r2, r4
   d480c:	2100      	movs	r1, #0
   d480e:	4668      	mov	r0, sp
   d4810:	f006 fd18 	bl	db244 <memset>
   d4814:	4622      	mov	r2, r4
   d4816:	2100      	movs	r1, #0
   d4818:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d481c:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4820:	f006 fd10 	bl	db244 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4824:	2100      	movs	r1, #0
   d4826:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d482a:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d482e:	f003 fc99 	bl	d8164 <system_power_management_set_config>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4832:	f44f 7361 	mov.w	r3, #900	; 0x384
   d4836:	f8ad 3008 	strh.w	r3, [sp, #8]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d483a:	f8ad 300a 	strh.w	r3, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d483e:	f241 0310 	movw	r3, #4112	; 0x1010
   d4842:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4846:	9b00      	ldr	r3, [sp, #0]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4848:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d484c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4850:	2100      	movs	r1, #0
   d4852:	4668      	mov	r0, sp

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4854:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4858:	9300      	str	r3, [sp, #0]
   d485a:	f003 fc83 	bl	d8164 <system_power_management_set_config>
      .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
      .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}
   d485e:	b010      	add	sp, #64	; 0x40
   d4860:	bd10      	pop	{r4, pc}
	...

000d4864 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d4864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4868:	481d      	ldr	r0, [pc, #116]	; (d48e0 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d486a:	4d1e      	ldr	r5, [pc, #120]	; (d48e4 <_Z17connectToParticlev+0x80>)
   d486c:	6840      	ldr	r0, [r0, #4]
   d486e:	2300      	movs	r3, #0
   d4870:	461a      	mov	r2, r3
   d4872:	4619      	mov	r1, r3
   d4874:	f003 fd08 	bl	d8288 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4878:	f003 fc96 	bl	d81a8 <spark_cloud_flag_connect>
   d487c:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4880:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4884:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4886:	f7ff fcfe 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d488a:	f04f 0900 	mov.w	r9, #0
   d488e:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4890:	f7ff fcf9 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4894:	ebb0 0008 	subs.w	r0, r0, r8
   d4898:	eb61 0109 	sbc.w	r1, r1, r9
   d489c:	428f      	cmp	r7, r1
   d489e:	bf08      	it	eq
   d48a0:	4286      	cmpeq	r6, r0
   d48a2:	d305      	bcc.n	d48b0 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48a4:	f003 fc90 	bl	d81c8 <spark_cloud_flag_connected>
   d48a8:	b910      	cbnz	r0, d48b0 <_Z17connectToParticlev+0x4c>
            spark_process();
   d48aa:	f003 fc75 	bl	d8198 <spark_process>
   d48ae:	e7ef      	b.n	d4890 <_Z17connectToParticlev+0x2c>
   d48b0:	f003 fc8a 	bl	d81c8 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48b4:	b158      	cbz	r0, d48ce <_Z17connectToParticlev+0x6a>
   d48b6:	f003 fc87 	bl	d81c8 <spark_cloud_flag_connected>

    Particle.process();
  }
  if (Particle.connected()) {
   d48ba:	b130      	cbz	r0, d48ca <_Z17connectToParticlev+0x66>
    sysStatus.connectedStatus = true;
   d48bc:	4a0a      	ldr	r2, [pc, #40]	; (d48e8 <_Z17connectToParticlev+0x84>)
   d48be:	2301      	movs	r3, #1
   d48c0:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d48c2:	4a0a      	ldr	r2, [pc, #40]	; (d48ec <_Z17connectToParticlev+0x88>)
   d48c4:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d48c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d48ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d48ce:	f003 fa1b 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48d2:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48d4:	f003 fc60 	bl	d8198 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48d8:	3c01      	subs	r4, #1
   d48da:	d0ec      	beq.n	d48b6 <_Z17connectToParticlev+0x52>
   d48dc:	e7d3      	b.n	d4886 <_Z17connectToParticlev+0x22>
   d48de:	bf00      	nop
   d48e0:	2003e25c 	.word	0x2003e25c
   d48e4:	2003e608 	.word	0x2003e608
   d48e8:	2003e04c 	.word	0x2003e04c
   d48ec:	2003df58 	.word	0x2003df58

000d48f0 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d48f0:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48f2:	f003 fc69 	bl	d81c8 <spark_cloud_flag_connected>
  return !Particle.connected();
   d48f6:	f080 0001 	eor.w	r0, r0, #1
}
   d48fa:	b2c0      	uxtb	r0, r0
   d48fc:	bd08      	pop	{r3, pc}
	...

000d4900 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4902:	f003 fc59 	bl	d81b8 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4906:	f7ff fcbe 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d490a:	2500      	movs	r5, #0
   d490c:	4604      	mov	r4, r0
   d490e:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4912:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4914:	f7ff fcb7 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4918:	1b00      	subs	r0, r0, r4
   d491a:	eb61 0105 	sbc.w	r1, r1, r5
   d491e:	428f      	cmp	r7, r1
   d4920:	bf08      	it	eq
   d4922:	4286      	cmpeq	r6, r0
   d4924:	d305      	bcc.n	d4932 <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4926:	f7ff ffe3 	bl	d48f0 <_Z12notConnectedv>
   d492a:	b910      	cbnz	r0, d4932 <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d492c:	f003 fc34 	bl	d8198 <spark_process>
   d4930:	e7f0      	b.n	d4914 <_Z22disconnectFromParticlev+0x14>
   d4932:	f7ff ffdd 	bl	d48f0 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4936:	4809      	ldr	r0, [pc, #36]	; (d495c <_Z22disconnectFromParticlev+0x5c>)
   d4938:	2300      	movs	r3, #0
   d493a:	4619      	mov	r1, r3
   d493c:	461a      	mov	r2, r3
   d493e:	6840      	ldr	r0, [r0, #4]
   d4940:	f003 fcaa 	bl	d8298 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d4944:	4b06      	ldr	r3, [pc, #24]	; (d4960 <_Z22disconnectFromParticlev+0x60>)
   d4946:	2200      	movs	r2, #0
   d4948:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d494a:	4b06      	ldr	r3, [pc, #24]	; (d4964 <_Z22disconnectFromParticlev+0x64>)
   d494c:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d494e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d4952:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4954:	f003 fd18 	bl	d8388 <delay>
  return true;
}
   d4958:	4620      	mov	r0, r4
   d495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d495c:	2003e25c 	.word	0x2003e25c
   d4960:	2003e04c 	.word	0x2003e04c
   d4964:	2003df58 	.word	0x2003df58

000d4968 <_Z22publishStateTransitionv>:

  return 1;
}

void publishStateTransition(void)
{
   d4968:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d496a:	4d13      	ldr	r5, [pc, #76]	; (d49b8 <_Z22publishStateTransitionv+0x50>)
   d496c:	4c13      	ldr	r4, [pc, #76]	; (d49bc <_Z22publishStateTransitionv+0x54>)
   d496e:	4914      	ldr	r1, [pc, #80]	; (d49c0 <_Z22publishStateTransitionv+0x58>)
   d4970:	782a      	ldrb	r2, [r5, #0]
   d4972:	7820      	ldrb	r0, [r4, #0]

  return 1;
}

void publishStateTransition(void)
{
   d4974:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4976:	230e      	movs	r3, #14
   d4978:	fb03 1202 	mla	r2, r3, r2, r1
   d497c:	9200      	str	r2, [sp, #0]
   d497e:	fb03 1300 	mla	r3, r3, r0, r1
   d4982:	4a10      	ldr	r2, [pc, #64]	; (d49c4 <_Z22publishStateTransitionv+0x5c>)
   d4984:	2128      	movs	r1, #40	; 0x28
   d4986:	a802      	add	r0, sp, #8
   d4988:	f003 fcd6 	bl	d8338 <snprintf>
  oldState = state;
   d498c:	782b      	ldrb	r3, [r5, #0]
   d498e:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4990:	f003 fc1a 	bl	d81c8 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4994:	b148      	cbz	r0, d49aa <_Z22publishStateTransitionv+0x42>
   d4996:	4b0c      	ldr	r3, [pc, #48]	; (d49c8 <_Z22publishStateTransitionv+0x60>)
   d4998:	490c      	ldr	r1, [pc, #48]	; (d49cc <_Z22publishStateTransitionv+0x64>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	480c      	ldr	r0, [pc, #48]	; (d49d0 <_Z22publishStateTransitionv+0x68>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d499e:	2200      	movs	r2, #0
   d49a0:	f88d 2000 	strb.w	r2, [sp]
   d49a4:	aa02      	add	r2, sp, #8
   d49a6:	f7ff fc99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49aa:	f005 fa4b 	bl	d9e44 <_Z16_fetch_usbserialv>
   d49ae:	a902      	add	r1, sp, #8
   d49b0:	f004 fc79 	bl	d92a6 <_ZN5Print7printlnEPKc>
}
   d49b4:	b00d      	add	sp, #52	; 0x34
   d49b6:	bd30      	pop	{r4, r5, pc}
   d49b8:	2003df59 	.word	0x2003df59
   d49bc:	2003df40 	.word	0x2003df40
   d49c0:	2003dd50 	.word	0x2003dd50
   d49c4:	000dcbd7 	.word	0x000dcbd7
   d49c8:	2003df0c 	.word	0x2003df0c
   d49cc:	000dcbe5 	.word	0x000dcbe5
   d49d0:	2003deac 	.word	0x2003deac

000d49d4 <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d49d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d49d6:	f003 fbef 	bl	d81b8 <spark_cloud_flag_disconnect>
   d49da:	f003 f995 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d49de:	f643 2597 	movw	r5, #14999	; 0x3a97
   d49e2:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49e4:	f003 fbf0 	bl	d81c8 <spark_cloud_flag_connected>
   d49e8:	b140      	cbz	r0, d49fc <_Z14fullModemResetv+0x28>
   d49ea:	f003 f98d 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d49ee:	1b00      	subs	r0, r0, r4
   d49f0:	42a8      	cmp	r0, r5
   d49f2:	d803      	bhi.n	d49fc <_Z14fullModemResetv+0x28>
		delay(100);
   d49f4:	2064      	movs	r0, #100	; 0x64
   d49f6:	f003 fcc7 	bl	d8388 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d49fa:	e7f3      	b.n	d49e4 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d49fc:	2100      	movs	r1, #0
   d49fe:	4b09      	ldr	r3, [pc, #36]	; (d4a24 <_Z14fullModemResetv+0x50>)
   d4a00:	f247 5230 	movw	r2, #30000	; 0x7530
   d4a04:	4608      	mov	r0, r1
   d4a06:	f003 f8e7 	bl	d7bd8 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a0e:	f003 fcbb 	bl	d8388 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4a12:	4b05      	ldr	r3, [pc, #20]	; (d4a28 <_Z14fullModemResetv+0x54>)
   d4a14:	220a      	movs	r2, #10
   d4a16:	681b      	ldr	r3, [r3, #0]
   d4a18:	2101      	movs	r1, #1
   d4a1a:	4668      	mov	r0, sp
   d4a1c:	f004 ff1e 	bl	d985c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4a20:	b003      	add	sp, #12
   d4a22:	bd30      	pop	{r4, r5, pc}
   d4a24:	000dcbf6 	.word	0x000dcbf6
   d4a28:	2003df80 	.word	0x2003df80

000d4a2c <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a2e:	4b15      	ldr	r3, [pc, #84]	; (d4a84 <_Z12dailyCleanupv+0x58>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a30:	4a15      	ldr	r2, [pc, #84]	; (d4a88 <_Z12dailyCleanupv+0x5c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a32:	781b      	ldrb	r3, [r3, #0]
   d4a34:	4915      	ldr	r1, [pc, #84]	; (d4a8c <_Z12dailyCleanupv+0x60>)
   d4a36:	4816      	ldr	r0, [pc, #88]	; (d4a90 <_Z12dailyCleanupv+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a38:	2400      	movs	r4, #0
   d4a3a:	f88d 4000 	strb.w	r4, [sp]
   d4a3e:	f7ff fc4d 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a42:	4b14      	ldr	r3, [pc, #80]	; (d4a94 <_Z12dailyCleanupv+0x68>)
   d4a44:	711c      	strb	r4, [r3, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a46:	f7ff fbb7 	bl	d41b8 <_ZN10CloudClass8syncTimeEv.isra.11>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4a4a:	f7ff fc1c 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a4e:	2500      	movs	r5, #0
   d4a50:	4604      	mov	r4, r0
   d4a52:	f247 562f 	movw	r6, #29999	; 0x752f
   d4a56:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a58:	f7ff fc15 	bl	d4286 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4a5c:	1b00      	subs	r0, r0, r4
   d4a5e:	eb61 0105 	sbc.w	r1, r1, r5
   d4a62:	428f      	cmp	r7, r1
   d4a64:	bf08      	it	eq
   d4a66:	4286      	cmpeq	r6, r0
   d4a68:	d305      	bcc.n	d4a76 <_Z12dailyCleanupv+0x4a>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a6a:	f7ff fbaf 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
   d4a6e:	b910      	cbnz	r0, d4a76 <_Z12dailyCleanupv+0x4a>
            spark_process();
   d4a70:	f003 fb92 	bl	d8198 <spark_process>
   d4a74:	e7f0      	b.n	d4a58 <_Z12dailyCleanupv+0x2c>
   d4a76:	f7ff fba9 	bl	d41cc <_ZN10CloudClass12syncTimeDoneEv.isra.13>
  systemStatusWriteNeeded=true;
   d4a7a:	4b07      	ldr	r3, [pc, #28]	; (d4a98 <_Z12dailyCleanupv+0x6c>)
   d4a7c:	2201      	movs	r2, #1
   d4a7e:	701a      	strb	r2, [r3, #0]
}
   d4a80:	b003      	add	sp, #12
   d4a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a84:	2003df0c 	.word	0x2003df0c
   d4a88:	000dcc03 	.word	0x000dcc03
   d4a8c:	000dcc0b 	.word	0x000dcc0b
   d4a90:	2003deac 	.word	0x2003deac
   d4a94:	2003e04c 	.word	0x2003e04c
   d4a98:	2003df58 	.word	0x2003df58

000d4a9c <_Z8isDSTusav>:
    publishQueue.publish("Interval", data, PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
   d4a9c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4a9e:	f005 f8c1 	bl	d9c24 <_ZN9TimeClass3dayEv>
   d4aa2:	4605      	mov	r5, r0
  int month = Time.month();
   d4aa4:	f005 f8cf 	bl	d9c46 <_ZN9TimeClass5monthEv>
   d4aa8:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4aaa:	f005 f8c5 	bl	d9c38 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4aae:	1f23      	subs	r3, r4, #4
   d4ab0:	2b06      	cmp	r3, #6
   d4ab2:	d90e      	bls.n	d4ad2 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4ab4:	1ee3      	subs	r3, r4, #3
   d4ab6:	2b08      	cmp	r3, #8
   d4ab8:	d80d      	bhi.n	d4ad6 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4aba:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4abc:	1a2d      	subs	r5, r5, r0
   d4abe:	d501      	bpl.n	d4ac4 <_Z8isDSTusav+0x28>
   d4ac0:	2c0b      	cmp	r4, #11
   d4ac2:	e002      	b.n	d4aca <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4ac4:	2d07      	cmp	r5, #7
   d4ac6:	dd06      	ble.n	d4ad6 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ac8:	2c03      	cmp	r4, #3
   d4aca:	bf14      	ite	ne
   d4acc:	2000      	movne	r0, #0
   d4ace:	2001      	moveq	r0, #1
   d4ad0:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4ad2:	2001      	movs	r0, #1
   d4ad4:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4ad6:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4ad8:	bd38      	pop	{r3, r4, r5, pc}
   d4ada:	0000      	movs	r0, r0
   d4adc:	0000      	movs	r0, r0
	...

000d4ae0 <_Z12setDSTOffset6String>:
  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4ae0:	b570      	push	{r4, r5, r6, lr}
   d4ae2:	ed2d 8b02 	vpush	{d8}
   d4ae6:	b0ca      	sub	sp, #296	; 0x128
   d4ae8:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4aea:	f005 f880 	bl	d9bee <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4aee:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4af0:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4af2:	a905      	add	r1, sp, #20
   d4af4:	6820      	ldr	r0, [r4, #0]
   d4af6:	f007 fc1b 	bl	dc330 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4afa:	b2c3      	uxtb	r3, r0
   d4afc:	2b02      	cmp	r3, #2
   d4afe:	d858      	bhi.n	d4bb2 <_Z12setDSTOffset6String+0xd2>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b00:	b240      	sxtb	r0, r0
   d4b02:	ee07 0a90 	vmov	s15, r0
   d4b06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4b0a:	eeb0 0a48 	vmov.f32	s0, s16
   d4b0e:	f004 ff63 	bl	d99d8 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b12:	4b2d      	ldr	r3, [pc, #180]	; (d4bc8 <_Z12setDSTOffset6String+0xe8>)
   d4b14:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b18:	4b2c      	ldr	r3, [pc, #176]	; (d4bcc <_Z12setDSTOffset6String+0xec>)
   d4b1a:	2201      	movs	r2, #1
   d4b1c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b1e:	ee18 0a10 	vmov	r0, s16
   d4b22:	f005 fdd9 	bl	da6d8 <__aeabi_f2d>
   d4b26:	4a2a      	ldr	r2, [pc, #168]	; (d4bd0 <_Z12setDSTOffset6String+0xf0>)
   d4b28:	e9cd 0100 	strd	r0, r1, [sp]
   d4b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b30:	a80a      	add	r0, sp, #40	; 0x28
   d4b32:	f003 fc01 	bl	d8338 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b36:	f005 f839 	bl	d9bac <_ZN9TimeClass7isValidEv>
   d4b3a:	b138      	cbz	r0, d4b4c <_Z12setDSTOffset6String+0x6c>
   d4b3c:	f7ff ffae 	bl	d4a9c <_Z8isDSTusav>
   d4b40:	b110      	cbz	r0, d4b48 <_Z12setDSTOffset6String+0x68>
   d4b42:	f004 ff63 	bl	d9a0c <_ZN9TimeClass8beginDSTEv>
   d4b46:	e001      	b.n	d4b4c <_Z12setDSTOffset6String+0x6c>
   d4b48:	f004 ff6a 	bl	d9a20 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b4c:	f004 ff1a 	bl	d9984 <_ZN9TimeClass5localEv>
   d4b50:	4604      	mov	r4, r0
   d4b52:	f005 f84c 	bl	d9bee <_ZN9TimeClass3nowEv>
   d4b56:	1a20      	subs	r0, r4, r0
   d4b58:	f005 fdac 	bl	da6b4 <__aeabi_i2d>
   d4b5c:	a318      	add	r3, pc, #96	; (adr r3, d4bc0 <_Z12setDSTOffset6String+0xe0>)
   d4b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b62:	f005 ff37 	bl	da9d4 <__aeabi_ddiv>
   d4b66:	4a1b      	ldr	r2, [pc, #108]	; (d4bd4 <_Z12setDSTOffset6String+0xf4>)
   d4b68:	e9cd 0100 	strd	r0, r1, [sp]
   d4b6c:	210a      	movs	r1, #10
   d4b6e:	481a      	ldr	r0, [pc, #104]	; (d4bd8 <_Z12setDSTOffset6String+0xf8>)
   d4b70:	f003 fbe2 	bl	d8338 <snprintf>
   d4b74:	f003 fb28 	bl	d81c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b78:	b1e8      	cbz	r0, d4bb6 <_Z12setDSTOffset6String+0xd6>
   d4b7a:	4d18      	ldr	r5, [pc, #96]	; (d4bdc <_Z12setDSTOffset6String+0xfc>)
    publishQueue.publish("Time",data, PRIVATE);
   d4b7c:	4918      	ldr	r1, [pc, #96]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4b7e:	782b      	ldrb	r3, [r5, #0]
   d4b80:	4818      	ldr	r0, [pc, #96]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b82:	2400      	movs	r4, #0
   d4b84:	aa0a      	add	r2, sp, #40	; 0x28
   d4b86:	f88d 4000 	strb.w	r4, [sp]
   d4b8a:	f7ff fba7 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4b8e:	4631      	mov	r1, r6
   d4b90:	a806      	add	r0, sp, #24
   d4b92:	f004 ff55 	bl	d9a40 <_ZN9TimeClass7timeStrEl>
   d4b96:	9b06      	ldr	r3, [sp, #24]
   d4b98:	9303      	str	r3, [sp, #12]
   d4b9a:	f88d 4000 	strb.w	r4, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4b9e:	782b      	ldrb	r3, [r5, #0]
   d4ba0:	9a03      	ldr	r2, [sp, #12]
   d4ba2:	490f      	ldr	r1, [pc, #60]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
   d4ba4:	480f      	ldr	r0, [pc, #60]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
   d4ba6:	f7ff fb99 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4baa:	a806      	add	r0, sp, #24
   d4bac:	f004 fd71 	bl	d9692 <_ZN6StringD1Ev>
   d4bb0:	e001      	b.n	d4bb6 <_Z12setDSTOffset6String+0xd6>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bb2:	2000      	movs	r0, #0
   d4bb4:	e000      	b.n	d4bb8 <_Z12setDSTOffset6String+0xd8>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
   d4bb6:	2001      	movs	r0, #1
}
   d4bb8:	b04a      	add	sp, #296	; 0x128
   d4bba:	ecbd 8b02 	vpop	{d8}
   d4bbe:	bd70      	pop	{r4, r5, r6, pc}
   d4bc0:	00000000 	.word	0x00000000
   d4bc4:	40ac2000 	.word	0x40ac2000
   d4bc8:	2003e04c 	.word	0x2003e04c
   d4bcc:	2003df58 	.word	0x2003df58
   d4bd0:	000dcc19 	.word	0x000dcc19
   d4bd4:	000dcac4 	.word	0x000dcac4
   d4bd8:	2003dee4 	.word	0x2003dee4
   d4bdc:	2003df0c 	.word	0x2003df0c
   d4be0:	000dcae2 	.word	0x000dcae2
   d4be4:	2003deac 	.word	0x2003deac

000d4be8 <_Z11displayInfov>:
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4bec:	4c69      	ldr	r4, [pc, #420]	; (d4d94 <_Z11displayInfov+0x1ac>)
  }
  return dayStartedAs;
}

void displayInfo()
{
   d4bee:	b0ac      	sub	sp, #176	; 0xb0
   d4bf0:	f003 f88a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4bf4:	6823      	ldr	r3, [r4, #0]
   d4bf6:	1ac0      	subs	r0, r0, r3
   d4bf8:	f241 3387 	movw	r3, #4999	; 0x1387
   d4bfc:	4298      	cmp	r0, r3
   d4bfe:	f240 80c6 	bls.w	d4d8e <_Z11displayInfov+0x1a6>
   d4c02:	f003 f881 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4c06:	6020      	str	r0, [r4, #0]
   d4c08:	4c63      	ldr	r4, [pc, #396]	; (d4d98 <_Z11displayInfov+0x1b0>)
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c0a:	2100      	movs	r1, #0
   d4c0c:	6865      	ldr	r5, [r4, #4]
   d4c0e:	4608      	mov	r0, r1
   d4c10:	f003 f812 	bl	d7c38 <os_thread_scheduling>
   d4c14:	f895 8000 	ldrb.w	r8, [r5]
   d4c18:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   d4c1a:	4d60      	ldr	r5, [pc, #384]	; (d4d9c <_Z11displayInfov+0x1b4>)
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c1c:	2100      	movs	r1, #0
   d4c1e:	2001      	movs	r0, #1
   d4c20:	f003 f80a 	bl	d7c38 <os_thread_scheduling>
   d4c24:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4c26:	f1b8 0f00 	cmp.w	r8, #0
   d4c2a:	d070      	beq.n	d4d0e <_Z11displayInfov+0x126>
   d4c2c:	f003 f86c 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>

		char buf[128];
		if (t.gpsFix()) {
   d4c30:	f242 730f 	movw	r3, #9999	; 0x270f
   d4c34:	1b80      	subs	r0, r0, r6
   d4c36:	4298      	cmp	r0, r3
   d4c38:	d869      	bhi.n	d4d0e <_Z11displayInfov+0x126>
      current.latitude = t.readLatDeg();
   d4c3a:	6860      	ldr	r0, [r4, #4]
   d4c3c:	4e58      	ldr	r6, [pc, #352]	; (d4da0 <_Z11displayInfov+0x1b8>)
   d4c3e:	f7ff fae0 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c42:	ee10 0a10 	vmov	r0, s0
   d4c46:	f005 fd47 	bl	da6d8 <__aeabi_f2d>
   d4c4a:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4c4e:	6860      	ldr	r0, [r4, #4]
   d4c50:	f7ff faf8 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
   d4c54:	ee10 0a10 	vmov	r0, s0
   d4c58:	f005 fd3e 	bl	da6d8 <__aeabi_f2d>
   d4c5c:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4c60:	6860      	ldr	r0, [r4, #4]
   d4c62:	f7ff face 	bl	d4202 <_ZNK13LegacyAdapter10readLatDegEv.isra.23>
   d4c66:	6860      	ldr	r0, [r4, #4]
   d4c68:	ee10 6a10 	vmov	r6, s0
   d4c6c:	f7ff faea 	bl	d4244 <_ZNK13LegacyAdapter10readLonDegEv.isra.24>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c70:	2100      	movs	r1, #0
   d4c72:	6867      	ldr	r7, [r4, #4]
   d4c74:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
   d4c78:	4608      	mov	r0, r1
   d4c7a:	f002 ffdd 	bl	d7c38 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4c7e:	2100      	movs	r1, #0
   d4c80:	2001      	movs	r0, #1
	/**
	 * @brief Get the altitude
	 */
	TinyGPSAltitude getAltitude() const {
	    SINGLE_THREADED_BLOCK() {
	    	return altitude;
   d4c82:	f8d7 7080 	ldr.w	r7, [r7, #128]	; 0x80
   d4c86:	f002 ffd7 	bl	d7c38 <os_thread_scheduling>
   d4c8a:	6860      	ldr	r0, [r4, #4]
   d4c8c:	f7ff faab 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4c90:	4680      	mov	r8, r0
   d4c92:	4620      	mov	r0, r4
   d4c94:	f002 faba 	bl	d720c <_ZN12AssetTracker14getTinyGPSPlusEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4c98:	2100      	movs	r1, #0
   d4c9a:	4604      	mov	r4, r0
   d4c9c:	4608      	mov	r0, r1
   d4c9e:	f002 ffcb 	bl	d7c38 <os_thread_scheduling>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4ca2:	2100      	movs	r1, #0
   d4ca4:	2001      	movs	r0, #1
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4ca6:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
   d4caa:	f002 ffc5 	bl	d7c38 <os_thread_scheduling>
   d4cae:	4638      	mov	r0, r7
   d4cb0:	9407      	str	r4, [sp, #28]
   d4cb2:	f8cd 8018 	str.w	r8, [sp, #24]
   d4cb6:	f005 fcfd 	bl	da6b4 <__aeabi_i2d>
   d4cba:	4b3a      	ldr	r3, [pc, #232]	; (d4da4 <_Z11displayInfov+0x1bc>)
   d4cbc:	2200      	movs	r2, #0
   d4cbe:	f005 fe89 	bl	da9d4 <__aeabi_ddiv>
   d4cc2:	f006 f855 	bl	dad70 <__aeabi_d2f>
   d4cc6:	f005 fd07 	bl	da6d8 <__aeabi_f2d>
   d4cca:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4cce:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4cd2:	ee10 0a10 	vmov	r0, s0
   d4cd6:	f005 fcff 	bl	da6d8 <__aeabi_f2d>
   d4cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4cde:	4630      	mov	r0, r6
   d4ce0:	f005 fcfa 	bl	da6d8 <__aeabi_f2d>
   d4ce4:	4a30      	ldr	r2, [pc, #192]	; (d4da8 <_Z11displayInfov+0x1c0>)
   d4ce6:	e9cd 0100 	strd	r0, r1, [sp]
   d4cea:	2180      	movs	r1, #128	; 0x80
   d4cec:	a80c      	add	r0, sp, #48	; 0x30
   d4cee:	f003 fb23 	bl	d8338 <snprintf>
			if (gettingFix) {
   d4cf2:	782b      	ldrb	r3, [r5, #0]
   d4cf4:	b1eb      	cbz	r3, d4d32 <_Z11displayInfov+0x14a>
				gettingFix = false;
   d4cf6:	2300      	movs	r3, #0
   d4cf8:	702b      	strb	r3, [r5, #0]
   d4cfa:	f003 f805 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4cfe:	4b2b      	ldr	r3, [pc, #172]	; (d4dac <_Z11displayInfov+0x1c4>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4d00:	492b      	ldr	r1, [pc, #172]	; (d4db0 <_Z11displayInfov+0x1c8>)
   d4d02:	681a      	ldr	r2, [r3, #0]
   d4d04:	1a82      	subs	r2, r0, r2
   d4d06:	482b      	ldr	r0, [pc, #172]	; (d4db4 <_Z11displayInfov+0x1cc>)
   d4d08:	f7ff fad1 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d0c:	e011      	b.n	d4d32 <_Z11displayInfov+0x14a>
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d0e:	6878      	ldr	r0, [r7, #4]
   d4d10:	f7ff fa69 	bl	d41e6 <_ZNK13LegacyAdapter13getSatellitesEv.isra.26>
   d4d14:	4a28      	ldr	r2, [pc, #160]	; (d4db8 <_Z11displayInfov+0x1d0>)
   d4d16:	4603      	mov	r3, r0
   d4d18:	2180      	movs	r1, #128	; 0x80
   d4d1a:	a80c      	add	r0, sp, #48	; 0x30
   d4d1c:	f003 fb0c 	bl	d8338 <snprintf>
			if (!gettingFix) {
   d4d20:	782b      	ldrb	r3, [r5, #0]
   d4d22:	b933      	cbnz	r3, d4d32 <_Z11displayInfov+0x14a>
				gettingFix = true;
   d4d24:	4b1d      	ldr	r3, [pc, #116]	; (d4d9c <_Z11displayInfov+0x1b4>)
   d4d26:	2201      	movs	r2, #1
   d4d28:	701a      	strb	r2, [r3, #0]
   d4d2a:	f002 ffed 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4d2e:	4b1f      	ldr	r3, [pc, #124]	; (d4dac <_Z11displayInfov+0x1c4>)
   d4d30:	6018      	str	r0, [r3, #0]
			}
		}
		Log.info(buf);
   d4d32:	a90c      	add	r1, sp, #48	; 0x30
   d4d34:	481f      	ldr	r0, [pc, #124]	; (d4db4 <_Z11displayInfov+0x1cc>)
   d4d36:	f7ff faba 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d4d3a:	f003 fa45 	bl	d81c8 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4d3e:	b330      	cbz	r0, d4d8e <_Z11displayInfov+0x1a6>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4d40:	4c1e      	ldr	r4, [pc, #120]	; (d4dbc <_Z11displayInfov+0x1d4>)
   d4d42:	f002 ffe1 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d4d46:	6823      	ldr	r3, [r4, #0]
   d4d48:	1ac0      	subs	r0, r0, r3
   d4d4a:	4b1d      	ldr	r3, [pc, #116]	; (d4dc0 <_Z11displayInfov+0x1d8>)
   d4d4c:	4298      	cmp	r0, r3
   d4d4e:	d91e      	bls.n	d4d8e <_Z11displayInfov+0x1a6>
   d4d50:	f002 ffda 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d4d54:	4b1b      	ldr	r3, [pc, #108]	; (d4dc4 <_Z11displayInfov+0x1dc>)
				lastPublish = millis();
   d4d56:	6020      	str	r0, [r4, #0]
   d4d58:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4d5a:	f88d 3000 	strb.w	r3, [sp]
   d4d5e:	aa0c      	add	r2, sp, #48	; 0x30
   d4d60:	233c      	movs	r3, #60	; 0x3c
   d4d62:	4919      	ldr	r1, [pc, #100]	; (d4dc8 <_Z11displayInfov+0x1e0>)
   d4d64:	a80a      	add	r0, sp, #40	; 0x28
   d4d66:	f003 fe09 	bl	d897c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4d6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d4d6c:	b17c      	cbz	r4, d4d8e <_Z11displayInfov+0x1a6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d6e:	6863      	ldr	r3, [r4, #4]
   d4d70:	3b01      	subs	r3, #1
   d4d72:	6063      	str	r3, [r4, #4]
   d4d74:	b95b      	cbnz	r3, d4d8e <_Z11displayInfov+0x1a6>
        {
          _M_dispose();
   d4d76:	6823      	ldr	r3, [r4, #0]
   d4d78:	4620      	mov	r0, r4
   d4d7a:	689b      	ldr	r3, [r3, #8]
   d4d7c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d7e:	68a3      	ldr	r3, [r4, #8]
   d4d80:	3b01      	subs	r3, #1
   d4d82:	60a3      	str	r3, [r4, #8]
   d4d84:	b91b      	cbnz	r3, d4d8e <_Z11displayInfov+0x1a6>
            _M_destroy();
   d4d86:	6823      	ldr	r3, [r4, #0]
   d4d88:	4620      	mov	r0, r4
   d4d8a:	68db      	ldr	r3, [r3, #12]
   d4d8c:	4798      	blx	r3
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4d8e:	b02c      	add	sp, #176	; 0xb0
   d4d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d94:	2003df5c 	.word	0x2003df5c
   d4d98:	2003df10 	.word	0x2003df10
   d4d9c:	2003df90 	.word	0x2003df90
   d4da0:	2003dfe8 	.word	0x2003dfe8
   d4da4:	40590000 	.word	0x40590000
   d4da8:	000dcc2a 	.word	0x000dcc2a
   d4dac:	2003dfd8 	.word	0x2003dfd8
   d4db0:	000dcc5b 	.word	0x000dcc5b
   d4db4:	2003e294 	.word	0x2003e294
   d4db8:	000dcc7b 	.word	0x000dcc7b
   d4dbc:	2003e048 	.word	0x2003e048
   d4dc0:	0001d4bf 	.word	0x0001d4bf
   d4dc4:	2003df0c 	.word	0x2003df0c
   d4dc8:	000dcc95 	.word	0x000dcc95

000d4dcc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4dcc:	b530      	push	{r4, r5, lr}
   d4dce:	b085      	sub	sp, #20
   d4dd0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4dd2:	a904      	add	r1, sp, #16
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4dda:	f003 f95d 	bl	d8098 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4dde:	b9a8      	cbnz	r0, d4e0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4de0:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4de2:	b10c      	cbz	r4, d4de8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4de4:	6923      	ldr	r3, [r4, #16]
   d4de6:	b923      	cbnz	r3, d4df2 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4de8:	4a09      	ldr	r2, [pc, #36]	; (d4e10 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4dea:	2100      	movs	r1, #0
   d4dec:	200a      	movs	r0, #10
   d4dee:	f003 f943 	bl	d8078 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4df2:	2300      	movs	r3, #0
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	230c      	movs	r3, #12
   d4df8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4dfc:	2304      	movs	r3, #4
   d4dfe:	9303      	str	r3, [sp, #12]
   d4e00:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4e02:	6923      	ldr	r3, [r4, #16]
   d4e04:	aa01      	add	r2, sp, #4
   d4e06:	2101      	movs	r1, #1
   d4e08:	4620      	mov	r0, r4
   d4e0a:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4e0c:	b005      	add	sp, #20
   d4e0e:	bd30      	pop	{r4, r5, pc}
   d4e10:	000d7cf9 	.word	0x000d7cf9

000d4e14 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e14:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e16:	4d0e      	ldr	r5, [pc, #56]	; (d4e50 <_Z17getBatteryContextv+0x3c>)
   d4e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4e1a:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4e1c:	ac01      	add	r4, sp, #4
   d4e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4e28:	4669      	mov	r1, sp
   d4e2a:	2007      	movs	r0, #7
   d4e2c:	f7ff ffce 	bl	d4dcc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4e30:	2800      	cmp	r0, #0
        return val;
   d4e32:	bfa8      	it	ge
   d4e34:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4e36:	4a07      	ldr	r2, [pc, #28]	; (d4e54 <_Z17getBatteryContextv+0x40>)
   d4e38:	ab08      	add	r3, sp, #32
   d4e3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4e3e:	2110      	movs	r1, #16
   d4e40:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4e44:	4804      	ldr	r0, [pc, #16]	; (d4e58 <_Z17getBatteryContextv+0x44>)
   d4e46:	f003 fa77 	bl	d8338 <snprintf>

}
   d4e4a:	b009      	add	sp, #36	; 0x24
   d4e4c:	bd30      	pop	{r4, r5, pc}
   d4e4e:	bf00      	nop
   d4e50:	000dca20 	.word	0x000dca20
   d4e54:	000dcfca 	.word	0x000dcfca
   d4e58:	2003df41 	.word	0x2003df41

000d4e5c <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e5e:	b085      	sub	sp, #20
  displayInfo();
   d4e60:	f7ff fec2 	bl	d4be8 <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4e64:	4b32      	ldr	r3, [pc, #200]	; (d4f30 <_Z16takeMeasurementsv+0xd4>)
   d4e66:	2200      	movs	r2, #0
   d4e68:	4611      	mov	r1, r2
   d4e6a:	6858      	ldr	r0, [r3, #4]
   d4e6c:	f003 fa04 	bl	d8278 <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4e70:	b108      	cbz	r0, d4e76 <_Z16takeMeasurementsv+0x1a>
   d4e72:	f7ff fc59 	bl	d4728 <_Z17getSignalStrengthv>
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4e76:	4e2f      	ldr	r6, [pc, #188]	; (d4f34 <_Z16takeMeasurementsv+0xd8>)
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4e78:	4f2f      	ldr	r7, [pc, #188]	; (d4f38 <_Z16takeMeasurementsv+0xdc>)
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d4e7a:	2400      	movs	r4, #0
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
    float temp = getTemp(sensorAddresses[i]);
   d4e7c:	1930      	adds	r0, r6, r4
   d4e7e:	f7ff fc13 	bl	d46a8 <_Z7getTempPh>
   d4e82:	ec51 0b10 	vmov	r0, r1, d0
   d4e86:	f005 ff73 	bl	dad70 <__aeabi_d2f>
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4e8a:	ee07 0a90 	vmov	s15, r0
   d4e8e:	eef4 7a67 	vcmp.f32	s15, s15
   d4e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e96:	d604      	bvs.n	d4ea2 <_Z16takeMeasurementsv+0x46>
   d4e98:	f005 fc1e 	bl	da6d8 <__aeabi_f2d>
   d4e9c:	193d      	adds	r5, r7, r4
   d4e9e:	e9c5 0100 	strd	r0, r1, [r5]
   d4ea2:	3408      	adds	r4, #8
void takeMeasurements()
{
  displayInfo();

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  for (int i = 0; i < nSENSORS; i++) {
   d4ea4:	2c18      	cmp	r4, #24
   d4ea6:	d1e9      	bne.n	d4e7c <_Z16takeMeasurementsv+0x20>
    float temp = getTemp(sensorAddresses[i]);
    if (!isnan(temp)) current.tempArray[i] = temp;
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f C", current.tempArray[0]);
   d4ea8:	4c23      	ldr	r4, [pc, #140]	; (d4f38 <_Z16takeMeasurementsv+0xdc>)
   d4eaa:	4824      	ldr	r0, [pc, #144]	; (d4f3c <_Z16takeMeasurementsv+0xe0>)
   d4eac:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4eb0:	210c      	movs	r1, #12
   d4eb2:	e9cd 2300 	strd	r2, r3, [sp]
   d4eb6:	4a22      	ldr	r2, [pc, #136]	; (d4f40 <_Z16takeMeasurementsv+0xe4>)
   d4eb8:	f003 fa3e 	bl	d8338 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f C", current.tempArray[1]);
   d4ebc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4ec0:	210c      	movs	r1, #12
   d4ec2:	e9cd 2300 	strd	r2, r3, [sp]
   d4ec6:	481f      	ldr	r0, [pc, #124]	; (d4f44 <_Z16takeMeasurementsv+0xe8>)
   d4ec8:	4a1d      	ldr	r2, [pc, #116]	; (d4f40 <_Z16takeMeasurementsv+0xe4>)
   d4eca:	f003 fa35 	bl	d8338 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f C", current.tempArray[2]);
   d4ece:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4ed2:	210c      	movs	r1, #12
   d4ed4:	e9cd 2300 	strd	r2, r3, [sp]
   d4ed8:	481b      	ldr	r0, [pc, #108]	; (d4f48 <_Z16takeMeasurementsv+0xec>)
   d4eda:	4a19      	ldr	r2, [pc, #100]	; (d4f40 <_Z16takeMeasurementsv+0xe4>)
   d4edc:	f003 fa2c 	bl	d8338 <snprintf>
  getBatteryContext();                                                // What is the battery up to?
   d4ee0:	f7ff ff98 	bl	d4e14 <_Z17getBatteryContextv>
   d4ee4:	a903      	add	r1, sp, #12
   d4ee6:	2003      	movs	r0, #3
   d4ee8:	f7ff ff70 	bl	d4dcc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4eec:	b988      	cbnz	r0, d4f12 <_Z16takeMeasurementsv+0xb6>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4eee:	2006      	movs	r0, #6
   d4ef0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4ef4:	f7ff f9ca 	bl	d428c <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4ef8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4efc:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4f00:	ee07 3a10 	vmov	s14, r3
   d4f04:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4f08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d4f0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d4f10:	e001      	b.n	d4f16 <_Z16takeMeasurementsv+0xba>
            return -1.0f;
   d4f12:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4f1a:	4b0c      	ldr	r3, [pc, #48]	; (d4f4c <_Z16takeMeasurementsv+0xf0>)
  systemStatusWriteNeeded=true;
   d4f1c:	4a0c      	ldr	r2, [pc, #48]	; (d4f50 <_Z16takeMeasurementsv+0xf4>)
  }
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f C", current.tempArray[0]);
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f C", current.tempArray[1]);
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f C", current.tempArray[2]);
  getBatteryContext();                                                // What is the battery up to?
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d4f1e:	edc3 7a02 	vstr	s15, [r3, #8]
  systemStatusWriteNeeded=true;
   d4f22:	2301      	movs	r3, #1
   d4f24:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4f26:	4a0b      	ldr	r2, [pc, #44]	; (d4f54 <_Z16takeMeasurementsv+0xf8>)
   d4f28:	7013      	strb	r3, [r2, #0]
}
   d4f2a:	b005      	add	sp, #20
   d4f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f2e:	bf00      	nop
   d4f30:	2003e25c 	.word	0x2003e25c
   d4f34:	2003f400 	.word	0x2003f400
   d4f38:	2003dfe8 	.word	0x2003dfe8
   d4f3c:	2003ddd1 	.word	0x2003ddd1
   d4f40:	000dcc99 	.word	0x000dcc99
   d4f44:	2003dddd 	.word	0x2003dddd
   d4f48:	2003ddc0 	.word	0x2003ddc0
   d4f4c:	2003e04c 	.word	0x2003e04c
   d4f50:	2003df58 	.word	0x2003df58
   d4f54:	2003dfe0 	.word	0x2003dfe0

000d4f58 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d4f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(state) {
   d4f5a:	4c9a      	ldr	r4, [pc, #616]	; (d51c4 <loop+0x26c>)
   d4f5c:	7823      	ldrb	r3, [r4, #0]
   d4f5e:	3b01      	subs	r3, #1
   d4f60:	2b05      	cmp	r3, #5
   d4f62:	f200 8122 	bhi.w	d51aa <loop+0x252>
   d4f66:	e8df f003 	tbb	[pc, r3]
   d4f6a:	03bd      	.short	0x03bd
   d4f6c:	96774473 	.word	0x96774473
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f70:	4b95      	ldr	r3, [pc, #596]	; (d51c8 <loop+0x270>)
   d4f72:	791a      	ldrb	r2, [r3, #4]
   d4f74:	461e      	mov	r6, r3
   d4f76:	b12a      	cbz	r2, d4f84 <loop+0x2c>
   d4f78:	4b94      	ldr	r3, [pc, #592]	; (d51cc <loop+0x274>)
   d4f7a:	781b      	ldrb	r3, [r3, #0]
   d4f7c:	2b02      	cmp	r3, #2
   d4f7e:	d001      	beq.n	d4f84 <loop+0x2c>
   d4f80:	f7ff fcf2 	bl	d4968 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d4f84:	4b92      	ldr	r3, [pc, #584]	; (d51d0 <loop+0x278>)
   d4f86:	781b      	ldrb	r3, [r3, #0]
   d4f88:	b10b      	cbz	r3, d4f8e <loop+0x36>
   d4f8a:	f7ff fc09 	bl	d47a0 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d4f8e:	4d91      	ldr	r5, [pc, #580]	; (d51d4 <loop+0x27c>)
   d4f90:	782b      	ldrb	r3, [r5, #0]
   d4f92:	b13b      	cbz	r3, d4fa4 <loop+0x4c>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f94:	2320      	movs	r3, #32
   d4f96:	4a8c      	ldr	r2, [pc, #560]	; (d51c8 <loop+0x270>)
   d4f98:	488f      	ldr	r0, [pc, #572]	; (d51d8 <loop+0x280>)
   d4f9a:	2101      	movs	r1, #1
   d4f9c:	f000 fde6 	bl	d5b6c <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d4fa0:	2300      	movs	r3, #0
   d4fa2:	702b      	strb	r3, [r5, #0]
    }
    if (currentCountsWriteNeeded) {
   d4fa4:	4d8d      	ldr	r5, [pc, #564]	; (d51dc <loop+0x284>)
   d4fa6:	782b      	ldrb	r3, [r5, #0]
   d4fa8:	b13b      	cbz	r3, d4fba <loop+0x62>
   d4faa:	2330      	movs	r3, #48	; 0x30
   d4fac:	4a8c      	ldr	r2, [pc, #560]	; (d51e0 <loop+0x288>)
   d4fae:	488a      	ldr	r0, [pc, #552]	; (d51d8 <loop+0x280>)
   d4fb0:	2150      	movs	r1, #80	; 0x50
   d4fb2:	f000 fddb 	bl	d5b6c <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d4fb6:	2300      	movs	r3, #0
   d4fb8:	702b      	strb	r3, [r5, #0]
    }
    if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d4fba:	f004 fe29 	bl	d9c10 <_ZN9TimeClass6minuteEv>
   d4fbe:	b930      	cbnz	r0, d4fce <loop+0x76>
   d4fc0:	f004 fe26 	bl	d9c10 <_ZN9TimeClass6minuteEv>
   d4fc4:	4b87      	ldr	r3, [pc, #540]	; (d51e4 <loop+0x28c>)
   d4fc6:	681b      	ldr	r3, [r3, #0]
   d4fc8:	4298      	cmp	r0, r3
   d4fca:	f040 80f4 	bne.w	d51b6 <loop+0x25e>
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d4fce:	f004 fe1f 	bl	d9c10 <_ZN9TimeClass6minuteEv>
   d4fd2:	79b3      	ldrb	r3, [r6, #6]
   d4fd4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fd8:	fb02 0013 	mls	r0, r2, r3, r0
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	f040 80e4 	bne.w	d51aa <loop+0x252>
   d4fe2:	f004 fe15 	bl	d9c10 <_ZN9TimeClass6minuteEv>
   d4fe6:	4b7f      	ldr	r3, [pc, #508]	; (d51e4 <loop+0x28c>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	4298      	cmp	r0, r3
   d4fec:	f040 80e6 	bne.w	d51bc <loop+0x264>
   d4ff0:	e0db      	b.n	d51aa <loop+0x252>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ff2:	4c75      	ldr	r4, [pc, #468]	; (d51c8 <loop+0x270>)
   d4ff4:	7923      	ldrb	r3, [r4, #4]
   d4ff6:	b12b      	cbz	r3, d5004 <loop+0xac>
   d4ff8:	4b74      	ldr	r3, [pc, #464]	; (d51cc <loop+0x274>)
   d4ffa:	781b      	ldrb	r3, [r3, #0]
   d4ffc:	2b04      	cmp	r3, #4
   d4ffe:	d001      	beq.n	d5004 <loop+0xac>
   d5000:	f7ff fcb2 	bl	d4968 <_Z22publishStateTransitionv>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5004:	78e3      	ldrb	r3, [r4, #3]
   d5006:	b10b      	cbz	r3, d500c <loop+0xb4>
   d5008:	f7ff fc7a 	bl	d4900 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d500c:	2100      	movs	r1, #0
   d500e:	2007      	movs	r0, #7
   d5010:	f005 f825 	bl	da05e <digitalWrite>
    petWatchdog();
   d5014:	f7ff fbc4 	bl	d47a0 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(sysStatus.sampleIntervalMin * 60  - Time.now() % sysStatus.sampleIntervalMin * 60, 1, sysStatus.sampleIntervalMin * 60);
   d5018:	79a5      	ldrb	r5, [r4, #6]
   d501a:	f004 fde8 	bl	d9bee <_ZN9TimeClass3nowEv>
   d501e:	79a3      	ldrb	r3, [r4, #6]
   d5020:	fb90 f2f3 	sdiv	r2, r0, r3
   d5024:	fb02 0013 	mls	r0, r2, r3, r0
   d5028:	f06f 023b 	mvn.w	r2, #59	; 0x3b
   d502c:	4350      	muls	r0, r2
   d502e:	223c      	movs	r2, #60	; 0x3c
   d5030:	fb12 0105 	smlabb	r1, r2, r5, r0
   d5034:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d5038:	2900      	cmp	r1, #0
   d503a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   d503e:	dd03      	ble.n	d5048 <loop+0xf0>
   d5040:	4299      	cmp	r1, r3
   d5042:	bfa8      	it	ge
   d5044:	4619      	movge	r1, r3
   d5046:	e000      	b.n	d504a <loop+0xf2>
   d5048:	2101      	movs	r1, #1
    rtc.setAlarm(wakeInSeconds);                                // The Real Time Clock will turn the Enable pin back on to wake the device
   d504a:	2300      	movs	r3, #0
   d504c:	2201      	movs	r2, #1
   d504e:	e091      	b.n	d5174 <loop+0x21c>
    } break;

  case MEASURING_STATE:
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5050:	f7ff ff04 	bl	d4e5c <_Z16takeMeasurementsv>
    state = REPORTING_STATE;
   d5054:	2305      	movs	r3, #5
   d5056:	e0b2      	b.n	d51be <loop+0x266>
    break;

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5058:	4b5b      	ldr	r3, [pc, #364]	; (d51c8 <loop+0x270>)
   d505a:	791a      	ldrb	r2, [r3, #4]
   d505c:	461d      	mov	r5, r3
   d505e:	b12a      	cbz	r2, d506c <loop+0x114>
   d5060:	4b5a      	ldr	r3, [pc, #360]	; (d51cc <loop+0x274>)
   d5062:	781b      	ldrb	r3, [r3, #0]
   d5064:	2b05      	cmp	r3, #5
   d5066:	d001      	beq.n	d506c <loop+0x114>
   d5068:	f7ff fc7e 	bl	d4968 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d506c:	78eb      	ldrb	r3, [r5, #3]
   d506e:	b90b      	cbnz	r3, d5074 <loop+0x11c>
   d5070:	f7ff fbf8 	bl	d4864 <_Z17connectToParticlev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5074:	f003 f8a8 	bl	d81c8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5078:	b140      	cbz	r0, d508c <loop+0x134>
      if (Time.hour() == 0) dailyCleanup();          // Once a day, clean house
   d507a:	f004 fdbf 	bl	d9bfc <_ZN9TimeClass4hourEv>
   d507e:	b908      	cbnz	r0, d5084 <loop+0x12c>
   d5080:	f7ff fcd4 	bl	d4a2c <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d5084:	f7ff fab0 	bl	d45e8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5088:	2306      	movs	r3, #6
   d508a:	e098      	b.n	d51be <loop+0x266>
   d508c:	f002 fe3c 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d5090:	4b55      	ldr	r3, [pc, #340]	; (d51e8 <loop+0x290>)
   d5092:	6018      	str	r0, [r3, #0]
   d5094:	e024      	b.n	d50e0 <loop+0x188>
      state = ERROR_STATE;
    }
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5096:	4b4c      	ldr	r3, [pc, #304]	; (d51c8 <loop+0x270>)
   d5098:	791b      	ldrb	r3, [r3, #4]
   d509a:	b12b      	cbz	r3, d50a8 <loop+0x150>
   d509c:	4b4b      	ldr	r3, [pc, #300]	; (d51cc <loop+0x274>)
   d509e:	781b      	ldrb	r3, [r3, #0]
   d50a0:	2b06      	cmp	r3, #6
   d50a2:	d001      	beq.n	d50a8 <loop+0x150>
   d50a4:	f7ff fc60 	bl	d4968 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d50a8:	4b50      	ldr	r3, [pc, #320]	; (d51ec <loop+0x294>)
   d50aa:	781b      	ldrb	r3, [r3, #0]
   d50ac:	b90b      	cbnz	r3, d50b2 <loop+0x15a>
      state = IDLE_STATE;
   d50ae:	2302      	movs	r3, #2
   d50b0:	e085      	b.n	d51be <loop+0x266>
   d50b2:	f002 fe29 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d50b6:	4b4e      	ldr	r3, [pc, #312]	; (d51f0 <loop+0x298>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	1ac0      	subs	r0, r0, r3
   d50bc:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d50c0:	4298      	cmp	r0, r3
   d50c2:	d972      	bls.n	d51aa <loop+0x252>
   d50c4:	f002 fe20 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50c8:	4b47      	ldr	r3, [pc, #284]	; (d51e8 <loop+0x290>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50ca:	494a      	ldr	r1, [pc, #296]	; (d51f4 <loop+0x29c>)
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
    if (!dataInFlight)  {                                             // Response received back to IDLE state
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d50cc:	6018      	str	r0, [r3, #0]
   d50ce:	4b4a      	ldr	r3, [pc, #296]	; (d51f8 <loop+0x2a0>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50d0:	484a      	ldr	r0, [pc, #296]	; (d51fc <loop+0x2a4>)
   d50d2:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d50d4:	2200      	movs	r2, #0
   d50d6:	f88d 2000 	strb.w	r2, [sp]
   d50da:	4a49      	ldr	r2, [pc, #292]	; (d5200 <loop+0x2a8>)
   d50dc:	f7ff f8fe 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d50e0:	2301      	movs	r3, #1
   d50e2:	e06c      	b.n	d51be <loop+0x266>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50e4:	4c38      	ldr	r4, [pc, #224]	; (d51c8 <loop+0x270>)
   d50e6:	7923      	ldrb	r3, [r4, #4]
   d50e8:	b12b      	cbz	r3, d50f6 <loop+0x19e>
   d50ea:	4b38      	ldr	r3, [pc, #224]	; (d51cc <loop+0x274>)
   d50ec:	781b      	ldrb	r3, [r3, #0]
   d50ee:	2b01      	cmp	r3, #1
   d50f0:	d001      	beq.n	d50f6 <loop+0x19e>
   d50f2:	f7ff fc39 	bl	d4968 <_Z22publishStateTransitionv>
   d50f6:	f002 fe07 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d50fa:	4b3b      	ldr	r3, [pc, #236]	; (d51e8 <loop+0x290>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5102:	3330      	adds	r3, #48	; 0x30
   d5104:	4298      	cmp	r0, r3
   d5106:	d950      	bls.n	d51aa <loop+0x252>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5108:	6923      	ldr	r3, [r4, #16]
   d510a:	2b03      	cmp	r3, #3
   d510c:	dc13      	bgt.n	d5136 <loop+0x1de>
   d510e:	f003 f85b 	bl	d81c8 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5112:	b148      	cbz	r0, d5128 <loop+0x1d0>
   d5114:	4b38      	ldr	r3, [pc, #224]	; (d51f8 <loop+0x2a0>)
   d5116:	493b      	ldr	r1, [pc, #236]	; (d5204 <loop+0x2ac>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5118:	781b      	ldrb	r3, [r3, #0]
   d511a:	4838      	ldr	r0, [pc, #224]	; (d51fc <loop+0x2a4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d511c:	2200      	movs	r2, #0
   d511e:	f88d 2000 	strb.w	r2, [sp]
   d5122:	4a39      	ldr	r2, [pc, #228]	; (d5208 <loop+0x2b0>)
   d5124:	f7ff f8da 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d512c:	f003 f92c 	bl	d8388 <delay>
        System.reset();
   d5130:	f004 fb91 	bl	d9856 <_ZN11SystemClass5resetEv>
   d5134:	e039      	b.n	d51aa <loop+0x252>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5136:	f004 fd5a 	bl	d9bee <_ZN9TimeClass3nowEv>
   d513a:	4b23      	ldr	r3, [pc, #140]	; (d51c8 <loop+0x270>)
   d513c:	4d25      	ldr	r5, [pc, #148]	; (d51d4 <loop+0x27c>)
   d513e:	69db      	ldr	r3, [r3, #28]
   d5140:	1ac0      	subs	r0, r0, r3
   d5142:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5146:	d919      	bls.n	d517c <loop+0x224>
   d5148:	f003 f83e 	bl	d81c8 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d514c:	b148      	cbz	r0, d5162 <loop+0x20a>
   d514e:	4b2a      	ldr	r3, [pc, #168]	; (d51f8 <loop+0x2a0>)
   d5150:	492c      	ldr	r1, [pc, #176]	; (d5204 <loop+0x2ac>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5152:	781b      	ldrb	r3, [r3, #0]
   d5154:	4829      	ldr	r0, [pc, #164]	; (d51fc <loop+0x2a4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5156:	2200      	movs	r2, #0
   d5158:	f88d 2000 	strb.w	r2, [sp]
   d515c:	4a2b      	ldr	r2, [pc, #172]	; (d520c <loop+0x2b4>)
   d515e:	f7ff f8bd 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5162:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5166:	f003 f90f 	bl	d8388 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d516a:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d516c:	2201      	movs	r2, #1
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d516e:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d5170:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d5172:	210a      	movs	r1, #10
   d5174:	4826      	ldr	r0, [pc, #152]	; (d5210 <loop+0x2b8>)
   d5176:	f001 f984 	bl	d6482 <_ZN8MCP794108setAlarmEibi>
   d517a:	e016      	b.n	d51aa <loop+0x252>
   d517c:	f003 f824 	bl	d81c8 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d5180:	b148      	cbz	r0, d5196 <loop+0x23e>
   d5182:	4b1d      	ldr	r3, [pc, #116]	; (d51f8 <loop+0x2a0>)
   d5184:	491f      	ldr	r1, [pc, #124]	; (d5204 <loop+0x2ac>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5186:	781b      	ldrb	r3, [r3, #0]
   d5188:	481c      	ldr	r0, [pc, #112]	; (d51fc <loop+0x2a4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d518a:	2200      	movs	r2, #0
   d518c:	f88d 2000 	strb.w	r2, [sp]
   d5190:	4a20      	ldr	r2, [pc, #128]	; (d5214 <loop+0x2bc>)
   d5192:	f7ff f8a3 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5196:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d519a:	f003 f8f5 	bl	d8388 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d519e:	2300      	movs	r3, #0
   d51a0:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d51a2:	2301      	movs	r3, #1
   d51a4:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d51a6:	f7ff fc15 	bl	d49d4 <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d51aa:	4819      	ldr	r0, [pc, #100]	; (d5210 <loop+0x2b8>)
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
   d51ac:	b002      	add	sp, #8
   d51ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d51b2:	f001 b89f 	b.w	d62f4 <_ZN8MCP794104loopEv>
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d51b6:	2303      	movs	r3, #3
   d51b8:	7023      	strb	r3, [r4, #0]
   d51ba:	e708      	b.n	d4fce <loop+0x76>
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d51bc:	2303      	movs	r3, #3
   d51be:	7023      	strb	r3, [r4, #0]
   d51c0:	e7f3      	b.n	d51aa <loop+0x252>
   d51c2:	bf00      	nop
   d51c4:	2003df59 	.word	0x2003df59
   d51c8:	2003e04c 	.word	0x2003e04c
   d51cc:	2003df40 	.word	0x2003df40
   d51d0:	2003df64 	.word	0x2003df64
   d51d4:	2003df58 	.word	0x2003df58
   d51d8:	2003e018 	.word	0x2003e018
   d51dc:	2003dfe0 	.word	0x2003dfe0
   d51e0:	2003dfe8 	.word	0x2003dfe8
   d51e4:	2003dfe4 	.word	0x2003dfe4
   d51e8:	2003dfdc 	.word	0x2003dfdc
   d51ec:	2003e028 	.word	0x2003e028
   d51f0:	2003df54 	.word	0x2003df54
   d51f4:	000dcca1 	.word	0x000dcca1
   d51f8:	2003df0c 	.word	0x2003df0c
   d51fc:	2003deac 	.word	0x2003deac
   d5200:	000dd56a 	.word	0x000dd56a
   d5204:	000dccce 	.word	0x000dccce
   d5208:	000dccba 	.word	0x000dccba
   d520c:	000dccd4 	.word	0x000dccd4
   d5210:	2003def0 	.word	0x2003def0
   d5214:	000dccee 	.word	0x000dccee

000d5218 <_Z18loadSystemDefaultsv>:
      .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
  return res;
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5218:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d521a:	f7ff fb23 	bl	d4864 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d521e:	f7ff fe1d 	bl	d4e5c <_Z16takeMeasurementsv>
   d5222:	f002 ffd1 	bl	d81c8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d5226:	b148      	cbz	r0, d523c <_Z18loadSystemDefaultsv+0x24>
   d5228:	4b10      	ldr	r3, [pc, #64]	; (d526c <_Z18loadSystemDefaultsv+0x54>)
   d522a:	4911      	ldr	r1, [pc, #68]	; (d5270 <_Z18loadSystemDefaultsv+0x58>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d522c:	781b      	ldrb	r3, [r3, #0]
   d522e:	4811      	ldr	r0, [pc, #68]	; (d5274 <_Z18loadSystemDefaultsv+0x5c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5230:	2200      	movs	r2, #0
   d5232:	f88d 2000 	strb.w	r2, [sp]
   d5236:	4a10      	ldr	r2, [pc, #64]	; (d5278 <_Z18loadSystemDefaultsv+0x60>)
   d5238:	f7ff f850 	bl	d42dc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d523c:	4a0f      	ldr	r2, [pc, #60]	; (d527c <_Z18loadSystemDefaultsv+0x64>)
   d523e:	4810      	ldr	r0, [pc, #64]	; (d5280 <_Z18loadSystemDefaultsv+0x68>)
  sysStatus.metricUnits = false;
   d5240:	2300      	movs	r3, #0
   d5242:	7093      	strb	r3, [r2, #2]
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5244:	6893      	ldr	r3, [r2, #8]
   d5246:	2b1d      	cmp	r3, #29
   d5248:	bfcc      	ite	gt
   d524a:	2300      	movgt	r3, #0
   d524c:	2301      	movle	r3, #1
   d524e:	7153      	strb	r3, [r2, #5]
  else sysStatus.lowBatteryMode = false;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5250:	4b0c      	ldr	r3, [pc, #48]	; (d5284 <_Z18loadSystemDefaultsv+0x6c>)
   d5252:	6153      	str	r3, [r2, #20]
  sysStatus.dstOffset = 1;
   d5254:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d5258:	2101      	movs	r1, #1
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
   d525a:	6193      	str	r3, [r2, #24]
   d525c:	2320      	movs	r3, #32

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d525e:	7011      	strb	r1, [r2, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
   d5260:	7111      	strb	r1, [r2, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d5262:	b003      	add	sp, #12
   d5264:	f85d eb04 	ldr.w	lr, [sp], #4
   d5268:	f000 bc80 	b.w	d5b6c <_ZN6MB85RC9writeDataEjPKhj>
   d526c:	2003df0c 	.word	0x2003df0c
   d5270:	000dcabf 	.word	0x000dcabf
   d5274:	2003deac 	.word	0x2003deac
   d5278:	000dcd0d 	.word	0x000dcd0d
   d527c:	2003e04c 	.word	0x2003e04c
   d5280:	2003e018 	.word	0x2003e018
   d5284:	c0a00000 	.word	0xc0a00000

000d5288 <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d5288:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d528a:	4c27      	ldr	r4, [pc, #156]	; (d5328 <_Z17checkSystemValuesv+0xa0>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d528c:	4d26      	ldr	r5, [pc, #152]	; (d5328 <_Z17checkSystemValuesv+0xa0>)
  sysStatus.dstOffset = 1;
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d528e:	f7ff fde5 	bl	d4e5c <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d5292:	78a3      	ldrb	r3, [r4, #2]
   d5294:	2b01      	cmp	r3, #1
   d5296:	bf84      	itt	hi
   d5298:	2300      	movhi	r3, #0
   d529a:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d529c:	78e3      	ldrb	r3, [r4, #3]
   d529e:	2b01      	cmp	r3, #1
   d52a0:	d906      	bls.n	d52b0 <_Z17checkSystemValuesv+0x28>
   d52a2:	f002 ff91 	bl	d81c8 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d52a6:	b110      	cbz	r0, d52ae <_Z17checkSystemValuesv+0x26>
   d52a8:	2301      	movs	r3, #1
   d52aa:	70eb      	strb	r3, [r5, #3]
   d52ac:	e000      	b.n	d52b0 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
   d52ae:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d52b0:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52b2:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d52b6:	2b01      	cmp	r3, #1
   d52b8:	bf82      	ittt	hi
   d52ba:	4b1b      	ldrhi	r3, [pc, #108]	; (d5328 <_Z17checkSystemValuesv+0xa0>)
   d52bc:	2200      	movhi	r2, #0
   d52be:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d52c0:	68a2      	ldr	r2, [r4, #8]
   d52c2:	4b19      	ldr	r3, [pc, #100]	; (d5328 <_Z17checkSystemValuesv+0xa0>)
   d52c4:	2a1d      	cmp	r2, #29
   d52c6:	bfd4      	ite	le
   d52c8:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d52ca:	2200      	movgt	r2, #0
   d52cc:	715a      	strb	r2, [r3, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52ce:	6923      	ldr	r3, [r4, #16]
   d52d0:	2bff      	cmp	r3, #255	; 0xff
   d52d2:	bf88      	it	hi
   d52d4:	4b14      	ldrhi	r3, [pc, #80]	; (d5328 <_Z17checkSystemValuesv+0xa0>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52d6:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52da:	bf88      	it	hi
   d52dc:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52de:	eef4 7ac7 	vcmpe.f32	s15, s14
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d52e2:	bf88      	it	hi
   d52e4:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d52e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52ea:	d406      	bmi.n	d52fa <_Z17checkSystemValuesv+0x72>
   d52ec:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d52f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d52f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d52f8:	dd01      	ble.n	d52fe <_Z17checkSystemValuesv+0x76>
   d52fa:	4b0c      	ldr	r3, [pc, #48]	; (d532c <_Z17checkSystemValuesv+0xa4>)
   d52fc:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d52fe:	edd4 7a06 	vldr	s15, [r4, #24]
   d5302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d530a:	d406      	bmi.n	d531a <_Z17checkSystemValuesv+0x92>
   d530c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5310:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5318:	dd02      	ble.n	d5320 <_Z17checkSystemValuesv+0x98>
   d531a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d531e:	61a3      	str	r3, [r4, #24]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d5320:	4b03      	ldr	r3, [pc, #12]	; (d5330 <_Z17checkSystemValuesv+0xa8>)
   d5322:	2201      	movs	r2, #1
   d5324:	701a      	strb	r2, [r3, #0]
   d5326:	bd38      	pop	{r3, r4, r5, pc}
   d5328:	2003e04c 	.word	0x2003e04c
   d532c:	c0a00000 	.word	0xc0a00000
   d5330:	2003df58 	.word	0x2003df58

000d5334 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5334:	2300      	movs	r3, #0
   d5336:	2202      	movs	r2, #2
   d5338:	f002 bf1e 	b.w	d8178 <spark_variable>

000d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d533c:	2300      	movs	r3, #0
   d533e:	2204      	movs	r2, #4
   d5340:	f002 bf1a 	b.w	d8178 <spark_variable>

000d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5344:	4602      	mov	r2, r0
   d5346:	4801      	ldr	r0, [pc, #4]	; (d534c <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5348:	f003 ba08 	b.w	d875c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d534c:	000d8731 	.word	0x000d8731

000d5350 <setup>:
float celsius[nSENSORS] = {NAN, NAN};
retained uint8_t sensorAddresses[nSENSORS][8];
const int MAXRETRY = 3;

void setup()                                        // Note: Disconnected Setup()
{
   d5350:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5352:	b0a9      	sub	sp, #164	; 0xa4

  Serial.begin(9600);
   d5354:	f004 fd76 	bl	d9e44 <_Z16_fetch_usbserialv>
   d5358:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d535c:	f004 fd66 	bl	d9e2c <_ZN9USBSerial5beginEl>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5360:	2100      	movs	r1, #0
   d5362:	2008      	movs	r0, #8
   d5364:	f004 fe6a 	bl	da03c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5368:	2100      	movs	r1, #0
   d536a:	2004      	movs	r0, #4
   d536c:	f004 fe66 	bl	da03c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5370:	2101      	movs	r1, #1
   d5372:	2007      	movs	r0, #7
   d5374:	f004 fe62 	bl	da03c <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d5378:	2101      	movs	r1, #1
   d537a:	2005      	movs	r0, #5

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d537c:	2500      	movs	r5, #0
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d537e:	f004 fe5d 	bl	da03c <pinMode>

  digitalWrite(blueLED,HIGH);
   d5382:	2101      	movs	r1, #1
   d5384:	2007      	movs	r0, #7
   d5386:	f004 fe6a 	bl	da05e <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d538a:	f7ff fa09 	bl	d47a0 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d538e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5392:	2201      	movs	r2, #1
   d5394:	4994      	ldr	r1, [pc, #592]	; (d55e8 <setup+0x298>)
   d5396:	9500      	str	r5, [sp, #0]
   d5398:	2008      	movs	r0, #8
   d539a:	f003 fd43 	bl	d8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d539e:	a804      	add	r0, sp, #16
   d53a0:	f002 ff1a 	bl	d81d8 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d53a4:	462b      	mov	r3, r5
   d53a6:	227d      	movs	r2, #125	; 0x7d
   d53a8:	a908      	add	r1, sp, #32
   d53aa:	a804      	add	r0, sp, #16
   d53ac:	f004 f9f7 	bl	d979e <_ZNK6String8getBytesEPhjj>
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   d53b0:	4c8e      	ldr	r4, [pc, #568]	; (d55ec <setup+0x29c>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53b2:	498f      	ldr	r1, [pc, #572]	; (d55f0 <setup+0x2a0>)
   d53b4:	9501      	str	r5, [sp, #4]
   d53b6:	462b      	mov	r3, r5
   d53b8:	462a      	mov	r2, r5
   d53ba:	9500      	str	r5, [sp, #0]
   d53bc:	a808      	add	r0, sp, #32
   d53be:	f002 ff1b 	bl	d81f8 <spark_subscribe>
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   d53c2:	ae28      	add	r6, sp, #160	; 0xa0
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);
   d53c4:	498b      	ldr	r1, [pc, #556]	; (d55f4 <setup+0x2a4>)
   d53c6:	488c      	ldr	r0, [pc, #560]	; (d55f8 <setup+0x2a8>)
   d53c8:	4f8c      	ldr	r7, [pc, #560]	; (d55fc <setup+0x2ac>)
   d53ca:	f7ff ffb7 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
   d53ce:	79a3      	ldrb	r3, [r4, #6]
   d53d0:	f846 3d94 	str.w	r3, [r6, #-148]!
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53d4:	2202      	movs	r2, #2
   d53d6:	462b      	mov	r3, r5
   d53d8:	4631      	mov	r1, r6
   d53da:	4889      	ldr	r0, [pc, #548]	; (d5600 <setup+0x2b0>)
   d53dc:	f002 fecc 	bl	d8178 <spark_variable>
  Particle.variable("SampleInterval",sysStatus.sampleIntervalMin);
  Particle.variable("ResetCount", sysStatus.resetCount);
   d53e0:	f104 0110 	add.w	r1, r4, #16
   d53e4:	4887      	ldr	r0, [pc, #540]	; (d5604 <setup+0x2b4>)
   d53e6:	f7ff ffa5 	bl	d5334 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CabinTemp",cabinTempStr);
   d53ea:	4987      	ldr	r1, [pc, #540]	; (d5608 <setup+0x2b8>)
   d53ec:	4887      	ldr	r0, [pc, #540]	; (d560c <setup+0x2bc>)
   d53ee:	f7ff ffa5 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("VentTemp",ventTempStr);
   d53f2:	4987      	ldr	r1, [pc, #540]	; (d5610 <setup+0x2c0>)
   d53f4:	4887      	ldr	r0, [pc, #540]	; (d5614 <setup+0x2c4>)
   d53f6:	f7ff ffa1 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OutsideTemp",outsideTempStr);
   d53fa:	4987      	ldr	r1, [pc, #540]	; (d5618 <setup+0x2c8>)
   d53fc:	4887      	ldr	r0, [pc, #540]	; (d561c <setup+0x2cc>)
   d53fe:	f7ff ff9d 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d5402:	4987      	ldr	r1, [pc, #540]	; (d5620 <setup+0x2d0>)
   d5404:	4887      	ldr	r0, [pc, #540]	; (d5624 <setup+0x2d4>)
   d5406:	f7ff ff99 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d540a:	f104 0108 	add.w	r1, r4, #8
   d540e:	4886      	ldr	r0, [pc, #536]	; (d5628 <setup+0x2d8>)
   d5410:	f7ff ff90 	bl	d5334 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d5414:	4985      	ldr	r1, [pc, #532]	; (d562c <setup+0x2dc>)
   d5416:	4886      	ldr	r0, [pc, #536]	; (d5630 <setup+0x2e0>)
   d5418:	f7ff ff8c 	bl	d5334 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d541c:	4985      	ldr	r1, [pc, #532]	; (d5634 <setup+0x2e4>)
   d541e:	4886      	ldr	r0, [pc, #536]	; (d5638 <setup+0x2e8>)
   d5420:	f7ff ff8c 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d5424:	4985      	ldr	r1, [pc, #532]	; (d563c <setup+0x2ec>)
   d5426:	4886      	ldr	r0, [pc, #536]	; (d5640 <setup+0x2f0>)
   d5428:	f7ff ff88 	bl	d533c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d542c:	4985      	ldr	r1, [pc, #532]	; (d5644 <setup+0x2f4>)
   d542e:	4886      	ldr	r0, [pc, #536]	; (d5648 <setup+0x2f8>)
   d5430:	f7ff ff88 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d5434:	4985      	ldr	r1, [pc, #532]	; (d564c <setup+0x2fc>)
   d5436:	4886      	ldr	r0, [pc, #536]	; (d5650 <setup+0x300>)
   d5438:	f7ff ff84 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d543c:	4985      	ldr	r1, [pc, #532]	; (d5654 <setup+0x304>)
   d543e:	4886      	ldr	r0, [pc, #536]	; (d5658 <setup+0x308>)
   d5440:	f7ff ff80 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d5444:	4985      	ldr	r1, [pc, #532]	; (d565c <setup+0x30c>)
   d5446:	4886      	ldr	r0, [pc, #536]	; (d5660 <setup+0x310>)
   d5448:	f7ff ff7c 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d544c:	4985      	ldr	r1, [pc, #532]	; (d5664 <setup+0x314>)
   d544e:	4886      	ldr	r0, [pc, #536]	; (d5668 <setup+0x318>)
   d5450:	f7ff ff78 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d5454:	4985      	ldr	r1, [pc, #532]	; (d566c <setup+0x31c>)
   d5456:	4886      	ldr	r0, [pc, #536]	; (d5670 <setup+0x320>)
   d5458:	f7ff ff74 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SampleRate",setSampleInterval);
   d545c:	4985      	ldr	r1, [pc, #532]	; (d5674 <setup+0x324>)
   d545e:	4886      	ldr	r0, [pc, #536]	; (d5678 <setup+0x328>)
   d5460:	f7ff ff70 	bl	d5344 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d5464:	4885      	ldr	r0, [pc, #532]	; (d567c <setup+0x32c>)
   d5466:	f000 fae9 	bl	d5a3c <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d546a:	4629      	mov	r1, r5
   d546c:	2301      	movs	r3, #1
   d546e:	f10d 020b 	add.w	r2, sp, #11
   d5472:	4882      	ldr	r0, [pc, #520]	; (d567c <setup+0x32c>)
   d5474:	f000 fb24 	bl	d5ac0 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5478:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d547c:	2901      	cmp	r1, #1
   d547e:	d019      	beq.n	d54b4 <setup+0x164>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5480:	487e      	ldr	r0, [pc, #504]	; (d567c <setup+0x32c>)
   d5482:	f000 fae5 	bl	d5a50 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5486:	2304      	movs	r3, #4
   d5488:	4a7d      	ldr	r2, [pc, #500]	; (d5680 <setup+0x330>)
   d548a:	487c      	ldr	r0, [pc, #496]	; (d567c <setup+0x32c>)
   d548c:	4629      	mov	r1, r5
   d548e:	f000 fb6d 	bl	d5b6c <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5492:	2301      	movs	r3, #1
   d5494:	f10d 020b 	add.w	r2, sp, #11
   d5498:	4629      	mov	r1, r5
   d549a:	4878      	ldr	r0, [pc, #480]	; (d567c <setup+0x32c>)
   d549c:	f000 fb10 	bl	d5ac0 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d54a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54a4:	2b01      	cmp	r3, #1
   d54a6:	d002      	beq.n	d54ae <setup+0x15e>
   d54a8:	2301      	movs	r3, #1
   d54aa:	703b      	strb	r3, [r7, #0]
   d54ac:	e007      	b.n	d54be <setup+0x16e>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d54ae:	f7ff feb3 	bl	d5218 <_Z18loadSystemDefaultsv>
   d54b2:	e004      	b.n	d54be <setup+0x16e>
   d54b4:	2320      	movs	r3, #32
   d54b6:	4622      	mov	r2, r4
   d54b8:	4870      	ldr	r0, [pc, #448]	; (d567c <setup+0x32c>)
   d54ba:	f000 fb01 	bl	d5ac0 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d54be:	2500      	movs	r5, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d54c0:	f7ff fee2 	bl	d5288 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54c4:	462a      	mov	r2, r5
   d54c6:	4629      	mov	r1, r5
   d54c8:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d54ca:	9503      	str	r5, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54cc:	f002 fbfc 	bl	d7cc8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d54d0:	9b03      	ldr	r3, [sp, #12]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d54d2:	2b14      	cmp	r3, #20
   d54d4:	d07d      	beq.n	d55d2 <setup+0x282>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54d6:	462a      	mov	r2, r5
   d54d8:	4629      	mov	r1, r5
   d54da:	4630      	mov	r0, r6
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d54dc:	9503      	str	r5, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d54de:	f002 fbf3 	bl	d7cc8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d54e2:	9b03      	ldr	r3, [sp, #12]
   d54e4:	2b8c      	cmp	r3, #140	; 0x8c
   d54e6:	d074      	beq.n	d55d2 <setup+0x282>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  rtc.setup();                                                        // Start the real time clock
   d54e8:	4866      	ldr	r0, [pc, #408]	; (d5684 <setup+0x334>)
   d54ea:	f000 fdeb 	bl	d60c4 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d54ee:	2100      	movs	r1, #0
   d54f0:	4864      	ldr	r0, [pc, #400]	; (d5684 <setup+0x334>)
   d54f2:	f000 ff3c 	bl	d636e <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d54f6:	ed94 0a06 	vldr	s0, [r4, #24]
   d54fa:	f004 fa6d 	bl	d99d8 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d54fe:	f004 fb55 	bl	d9bac <_ZN9TimeClass7isValidEv>
   d5502:	b920      	cbnz	r0, d550e <setup+0x1be>
   d5504:	485f      	ldr	r0, [pc, #380]	; (d5684 <setup+0x334>)
   d5506:	f000 fdcd 	bl	d60a4 <_ZNK8MCP7941010getRTCTimeEv>
   d550a:	f004 fa8f 	bl	d9a2c <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d550e:	f7ff fac5 	bl	d4a9c <_Z8isDSTusav>
   d5512:	b110      	cbz	r0, d551a <setup+0x1ca>
   d5514:	f004 fa7a 	bl	d9a0c <_ZN9TimeClass8beginDSTEv>
   d5518:	e001      	b.n	d551e <setup+0x1ce>
   d551a:	f004 fa81 	bl	d9a20 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d551e:	ed94 0a05 	vldr	s0, [r4, #20]
   d5522:	f004 fa3d 	bl	d99a0 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5526:	f004 fa2d 	bl	d9984 <_ZN9TimeClass5localEv>
   d552a:	4604      	mov	r4, r0
   d552c:	f004 fb5f 	bl	d9bee <_ZN9TimeClass3nowEv>
   d5530:	1a20      	subs	r0, r4, r0
   d5532:	f005 f8bf 	bl	da6b4 <__aeabi_i2d>
   d5536:	a32a      	add	r3, pc, #168	; (adr r3, d55e0 <setup+0x290>)
   d5538:	e9d3 2300 	ldrd	r2, r3, [r3]
   d553c:	f005 fa4a 	bl	da9d4 <__aeabi_ddiv>
   d5540:	4a51      	ldr	r2, [pc, #324]	; (d5688 <setup+0x338>)
   d5542:	e9cd 0100 	strd	r0, r1, [sp]
   d5546:	210a      	movs	r1, #10
   d5548:	483a      	ldr	r0, [pc, #232]	; (d5634 <setup+0x2e4>)
   d554a:	f002 fef5 	bl	d8338 <snprintf>
   d554e:	2330      	movs	r3, #48	; 0x30
   d5550:	4a4e      	ldr	r2, [pc, #312]	; (d568c <setup+0x33c>)
   d5552:	484a      	ldr	r0, [pc, #296]	; (d567c <setup+0x32c>)
   d5554:	2150      	movs	r1, #80	; 0x50
   d5556:	f000 fab3 	bl	d5ac0 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d555a:	f004 fb4f 	bl	d9bfc <_ZN9TimeClass4hourEv>
   d555e:	4b4c      	ldr	r3, [pc, #304]	; (d5690 <setup+0x340>)
   d5560:	6018      	str	r0, [r3, #0]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5562:	f7ff f94f 	bl	d4804 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5566:	2004      	movs	r0, #4
   d5568:	f004 fd92 	bl	da090 <digitalRead>
   d556c:	b908      	cbnz	r0, d5572 <setup+0x222>
   d556e:	f7ff fe53 	bl	d5218 <_Z18loadSystemDefaultsv>

  ds18b20.resetsearch();                 // initialise for sensor search
   d5572:	4848      	ldr	r0, [pc, #288]	; (d5694 <setup+0x344>)
   d5574:	f000 f982 	bl	d587c <_ZN7DS18B2011resetsearchEv>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addresses
    ds18b20.search(sensorAddresses[i]); // and if available store
   d5578:	4947      	ldr	r1, [pc, #284]	; (d5698 <setup+0x348>)
   d557a:	4846      	ldr	r0, [pc, #280]	; (d5694 <setup+0x344>)
   d557c:	f000 f963 	bl	d5846 <_ZN7DS18B206searchEPh>
   d5580:	4946      	ldr	r1, [pc, #280]	; (d569c <setup+0x34c>)
   d5582:	4844      	ldr	r0, [pc, #272]	; (d5694 <setup+0x344>)
   d5584:	f000 f95f 	bl	d5846 <_ZN7DS18B206searchEPh>
   d5588:	4945      	ldr	r1, [pc, #276]	; (d56a0 <setup+0x350>)
   d558a:	4842      	ldr	r0, [pc, #264]	; (d5694 <setup+0x344>)
   d558c:	f000 f95b 	bl	d5846 <_ZN7DS18B206searchEPh>
	 * On some devices (Electron, Argon, and Xenon), there is an optional Wire1.
	 *
	 * @param addr The I2C address to use. This is optional, and the default is 0x42.
	 * The address can be reprogrammed in software on the u-blox GPS, but 0x42 is the default.
	 */
	AssetTracker &withI2C(TwoWire &wire = Wire, uint8_t addr = 0x42);
   d5590:	f004 fdac 	bl	da0ec <_Z19__fetch_global_Wirev>
  }

  t.withI2C();
   d5594:	2242      	movs	r2, #66	; 0x42
   d5596:	4601      	mov	r1, r0
   d5598:	4842      	ldr	r0, [pc, #264]	; (d56a4 <setup+0x354>)
   d559a:	f001 fda5 	bl	d70e8 <_ZN12AssetTracker7withI2CER7TwoWireh>
  // Run in threaded mode - this eliminates the need to read Serial1 from loop or updateGPS() and dramatically
	// lowers the risk of lost or corrupted GPS data caused by blocking loop for too long and overflowing the
	// 64-byte serial buffer.
	t.startThreadedMode();
   d559e:	4841      	ldr	r0, [pc, #260]	; (d56a4 <setup+0x354>)
   d55a0:	f001 fd56 	bl	d7050 <_ZN12AssetTracker17startThreadedModeEv>
   d55a4:	f002 fbb0 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d55a8:	4b3f      	ldr	r3, [pc, #252]	; (d56a8 <setup+0x358>)
   d55aa:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d55ac:	4b3f      	ldr	r3, [pc, #252]	; (d56ac <setup+0x35c>)
   d55ae:	2201      	movs	r2, #1
   d55b0:	701a      	strb	r2, [r3, #0]


  // Here is where the code diverges based on why we are running Setup()
 
  connectToParticle();
   d55b2:	f7ff f957 	bl	d4864 <_Z17connectToParticlev>
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d55b6:	783b      	ldrb	r3, [r7, #0]
   d55b8:	b913      	cbnz	r3, d55c0 <setup+0x270>
   d55ba:	4b10      	ldr	r3, [pc, #64]	; (d55fc <setup+0x2ac>)
   d55bc:	2202      	movs	r2, #2
   d55be:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d55c0:	2100      	movs	r1, #0
   d55c2:	2007      	movs	r0, #7
   d55c4:	f004 fd4b 	bl	da05e <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d55c8:	a804      	add	r0, sp, #16
   d55ca:	f004 f862 	bl	d9692 <_ZN6StringD1Ev>
  connectToParticle();
  
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d55ce:	b029      	add	sp, #164	; 0xa4
   d55d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d55d2:	6923      	ldr	r3, [r4, #16]
   d55d4:	3301      	adds	r3, #1
   d55d6:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d55d8:	4b35      	ldr	r3, [pc, #212]	; (d56b0 <setup+0x360>)
   d55da:	2201      	movs	r2, #1
   d55dc:	701a      	strb	r2, [r3, #0]
   d55de:	e783      	b.n	d54e8 <setup+0x198>
   d55e0:	00000000 	.word	0x00000000
   d55e4:	40ac2000 	.word	0x40ac2000
   d55e8:	000d40cd 	.word	0x000d40cd
   d55ec:	2003e04c 	.word	0x2003e04c
   d55f0:	000d42f9 	.word	0x000d42f9
   d55f4:	2003df98 	.word	0x2003df98
   d55f8:	000dcd25 	.word	0x000dcd25
   d55fc:	2003df59 	.word	0x2003df59
   d5600:	000dcd2c 	.word	0x000dcd2c
   d5604:	000dcd3b 	.word	0x000dcd3b
   d5608:	2003ddd1 	.word	0x2003ddd1
   d560c:	000dcd46 	.word	0x000dcd46
   d5610:	2003dddd 	.word	0x2003dddd
   d5614:	000dcd50 	.word	0x000dcd50
   d5618:	2003ddc0 	.word	0x2003ddc0
   d561c:	000dcd59 	.word	0x000dcd59
   d5620:	2003ddcc 	.word	0x2003ddcc
   d5624:	000dcd65 	.word	0x000dcd65
   d5628:	000dcd6d 	.word	0x000dcd6d
   d562c:	2003e000 	.word	0x2003e000
   d5630:	000dcd78 	.word	0x000dcd78
   d5634:	2003dee4 	.word	0x2003dee4
   d5638:	000dcd7f 	.word	0x000dcd7f
   d563c:	2003df41 	.word	0x2003df41
   d5640:	000dcd8a 	.word	0x000dcd8a
   d5644:	000d4121 	.word	0x000d4121
   d5648:	000dcd99 	.word	0x000dcd99
   d564c:	000d438d 	.word	0x000d438d
   d5650:	000dcda3 	.word	0x000dcda3
   d5654:	000d413d 	.word	0x000d413d
   d5658:	000dcdad 	.word	0x000dcdad
   d565c:	000d43d5 	.word	0x000d43d5
   d5660:	000dcdb5 	.word	0x000dcdb5
   d5664:	000d4469 	.word	0x000d4469
   d5668:	000dcdc2 	.word	0x000dcdc2
   d566c:	000d4ae1 	.word	0x000d4ae1
   d5670:	000dcdcf 	.word	0x000dcdcf
   d5674:	000d4581 	.word	0x000d4581
   d5678:	000dcddd 	.word	0x000dcddd
   d567c:	2003e018 	.word	0x2003e018
   d5680:	000dca3c 	.word	0x000dca3c
   d5684:	2003def0 	.word	0x2003def0
   d5688:	000dcac4 	.word	0x000dcac4
   d568c:	2003dfe8 	.word	0x2003dfe8
   d5690:	2003df60 	.word	0x2003df60
   d5694:	2003e02c 	.word	0x2003e02c
   d5698:	2003f400 	.word	0x2003f400
   d569c:	2003f408 	.word	0x2003f408
   d56a0:	2003f410 	.word	0x2003f410
   d56a4:	2003df10 	.word	0x2003df10
   d56a8:	2003dfd8 	.word	0x2003dfd8
   d56ac:	2003df90 	.word	0x2003df90
   d56b0:	2003df58 	.word	0x2003df58

000d56b4 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d56b4:	4b43      	ldr	r3, [pc, #268]	; (d57c4 <_GLOBAL__sub_I___appProductID+0x110>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d56b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56ba:	2400      	movs	r4, #0
   d56bc:	601c      	str	r4, [r3, #0]
   d56be:	4b42      	ldr	r3, [pc, #264]	; (d57c8 <_GLOBAL__sub_I___appProductID+0x114>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d56c0:	4e42      	ldr	r6, [pc, #264]	; (d57cc <_GLOBAL__sub_I___appProductID+0x118>)

// Pin Constants - Sensors
const int tempSensors =   A3;                      // PThree on-wire temp sensors on this pin (pulled up to VCC via 10k)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d56c2:	4d43      	ldr	r5, [pc, #268]	; (d57d0 <_GLOBAL__sub_I___appProductID+0x11c>)
   d56c4:	2701      	movs	r7, #1
   d56c6:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d56c8:	f002 fb56 	bl	d7d78 <HAL_Pin_Map>
   d56cc:	4b41      	ldr	r3, [pc, #260]	; (d57d4 <_GLOBAL__sub_I___appProductID+0x120>)
   d56ce:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d56d0:	f004 fc66 	bl	d9fa0 <spark_protocol_instance>
   d56d4:	4623      	mov	r3, r4
   d56d6:	4622      	mov	r2, r4
   d56d8:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d56dc:	f004 fc68 	bl	d9fb0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d56e0:	f004 fc5e 	bl	d9fa0 <spark_protocol_instance>
   d56e4:	4622      	mov	r2, r4
   d56e6:	4623      	mov	r3, r4
   d56e8:	2102      	movs	r1, #2
   d56ea:	f004 fc69 	bl	d9fc0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d56ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d56f2:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d56f4:	6034      	str	r4, [r6, #0]
   d56f6:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d56f8:	71b4      	strb	r4, [r6, #6]
   d56fa:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56fc:	2002      	movs	r0, #2
   d56fe:	f002 fcdd 	bl	d80bc <set_system_mode>
   d5702:	462a      	mov	r2, r5
   d5704:	4934      	ldr	r1, [pc, #208]	; (d57d8 <_GLOBAL__sub_I___appProductID+0x124>)
   d5706:	4630      	mov	r0, r6
   d5708:	f004 fd16 	bl	da138 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d570c:	4e33      	ldr	r6, [pc, #204]	; (d57dc <_GLOBAL__sub_I___appProductID+0x128>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d570e:	4621      	mov	r1, r4
   d5710:	4638      	mov	r0, r7
   d5712:	f002 fceb 	bl	d80ec <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5716:	4639      	mov	r1, r7
   d5718:	2004      	movs	r0, #4
   d571a:	f002 fac5 	bl	d7ca8 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d571e:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5722:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5724:	4642      	mov	r2, r8
   d5726:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5728:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d572a:	f005 fd8b 	bl	db244 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d572e:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5730:	462a      	mov	r2, r5
   d5732:	492b      	ldr	r1, [pc, #172]	; (d57e0 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5734:	80f3      	strh	r3, [r6, #6]
   d5736:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5738:	7537      	strb	r7, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d573a:	f8a6 8004 	strh.w	r8, [r6, #4]
   d573e:	f004 fcfb 	bl	da138 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5742:	f004 fcd3 	bl	da0ec <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5746:	4e27      	ldr	r6, [pc, #156]	; (d57e4 <_GLOBAL__sub_I___appProductID+0x130>)
   d5748:	4601      	mov	r1, r0
   d574a:	4630      	mov	r0, r6
   d574c:	f000 fbf8 	bl	d5f40 <_ZN8MCP79410C1ER7TwoWire>
   d5750:	462a      	mov	r2, r5
   d5752:	4925      	ldr	r1, [pc, #148]	; (d57e8 <_GLOBAL__sub_I___appProductID+0x134>)
   d5754:	4630      	mov	r0, r6
   d5756:	f004 fcef 	bl	da138 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d575a:	f004 fcc7 	bl	da0ec <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d575e:	4e23      	ldr	r6, [pc, #140]	; (d57ec <_GLOBAL__sub_I___appProductID+0x138>)
   d5760:	4623      	mov	r3, r4
   d5762:	4601      	mov	r1, r0
   d5764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5768:	4630      	mov	r0, r6
   d576a:	f000 f95d 	bl	d5a28 <_ZN6MB85RCC1ER7TwoWireji>
   d576e:	4b20      	ldr	r3, [pc, #128]	; (d57f0 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5770:	6033      	str	r3, [r6, #0]
   d5772:	4630      	mov	r0, r6
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5774:	4e1f      	ldr	r6, [pc, #124]	; (d57f4 <_GLOBAL__sub_I___appProductID+0x140>)
   d5776:	4920      	ldr	r1, [pc, #128]	; (d57f8 <_GLOBAL__sub_I___appProductID+0x144>)
   d5778:	462a      	mov	r2, r5
   d577a:	f004 fcdd 	bl	da138 <__aeabi_atexit>
   d577e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5782:	491e      	ldr	r1, [pc, #120]	; (d57fc <_GLOBAL__sub_I___appProductID+0x148>)
   d5784:	4630      	mov	r0, r6
   d5786:	f001 fae5 	bl	d6d54 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d578a:	4b1d      	ldr	r3, [pc, #116]	; (d5800 <_GLOBAL__sub_I___appProductID+0x14c>)
   d578c:	6033      	str	r3, [r6, #0]
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d578e:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d5790:	4e1c      	ldr	r6, [pc, #112]	; (d5804 <_GLOBAL__sub_I___appProductID+0x150>)
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5792:	491d      	ldr	r1, [pc, #116]	; (d5808 <_GLOBAL__sub_I___appProductID+0x154>)
   d5794:	462a      	mov	r2, r5
   d5796:	f004 fccf 	bl	da138 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d579a:	4622      	mov	r2, r4
   d579c:	4641      	mov	r1, r8
AssetTracker t;
   d579e:	4c1b      	ldr	r4, [pc, #108]	; (d580c <_GLOBAL__sub_I___appProductID+0x158>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
   d57a0:	4630      	mov	r0, r6
   d57a2:	f000 f839 	bl	d5818 <_ZN7DS18B20C1Etb>
   d57a6:	462a      	mov	r2, r5
   d57a8:	4919      	ldr	r1, [pc, #100]	; (d5810 <_GLOBAL__sub_I___appProductID+0x15c>)
   d57aa:	4630      	mov	r0, r6
   d57ac:	f004 fcc4 	bl	da138 <__aeabi_atexit>
AssetTracker t;
   d57b0:	4620      	mov	r0, r4
   d57b2:	f001 fc2f 	bl	d7014 <_ZN12AssetTrackerC1Ev>
   d57b6:	462a      	mov	r2, r5
   d57b8:	4620      	mov	r0, r4
   d57ba:	4916      	ldr	r1, [pc, #88]	; (d5814 <_GLOBAL__sub_I___appProductID+0x160>)
				lastPublish = millis();
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d57bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
DS18B20 ds18b20(tempSensors);
AssetTracker t;
   d57c0:	f004 bcba 	b.w	da138 <__aeabi_atexit>
   d57c4:	2003df80 	.word	0x2003df80
   d57c8:	2003df0c 	.word	0x2003df0c
   d57cc:	2003df84 	.word	0x2003df84
   d57d0:	2003dea8 	.word	0x2003dea8
   d57d4:	2003df94 	.word	0x2003df94
   d57d8:	000d41a9 	.word	0x000d41a9
   d57dc:	2003df68 	.word	0x2003df68
   d57e0:	000d4109 	.word	0x000d4109
   d57e4:	2003def0 	.word	0x2003def0
   d57e8:	000d5cb3 	.word	0x000d5cb3
   d57ec:	2003e018 	.word	0x2003e018
   d57f0:	000dc9bc 	.word	0x000dc9bc
   d57f4:	2003deac 	.word	0x2003deac
   d57f8:	000d4181 	.word	0x000d4181
   d57fc:	2003f418 	.word	0x2003f418
   d5800:	000dc9d8 	.word	0x000dc9d8
   d5804:	2003e02c 	.word	0x2003e02c
   d5808:	000d4159 	.word	0x000d4159
   d580c:	2003df10 	.word	0x2003df10
   d5810:	000d586d 	.word	0x000d586d
   d5814:	000d6fdd 	.word	0x000d6fdd

000d5818 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d5818:	b570      	push	{r4, r5, r6, lr}
   d581a:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d581c:	2300      	movs	r3, #0
   d581e:	6063      	str	r3, [r4, #4]
   d5820:	60a3      	str	r3, [r4, #8]
   d5822:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d5824:	6123      	str	r3, [r4, #16]
   d5826:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d5828:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d582a:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d582c:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d582e:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d5830:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d5832:	f7fe fc32 	bl	d409a <_Znwj>
   d5836:	4605      	mov	r5, r0
   d5838:	b110      	cbz	r0, d5840 <_ZN7DS18B20C1Etb+0x28>
   d583a:	4631      	mov	r1, r6
   d583c:	f000 ff16 	bl	d666c <_ZN7OneWireC1Et>
   d5840:	6025      	str	r5, [r4, #0]
}
   d5842:	4620      	mov	r0, r4
   d5844:	bd70      	pop	{r4, r5, r6, pc}

000d5846 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d5846:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d5848:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d584c:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d584e:	6800      	ldr	r0, [r0, #0]
   d5850:	4629      	mov	r1, r5
   d5852:	f000 ffff 	bl	d6854 <_ZN7OneWire6searchEPh>
   d5856:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d5858:	bf1d      	ittte	ne
   d585a:	682b      	ldrne	r3, [r5, #0]
   d585c:	6023      	strne	r3, [r4, #0]
   d585e:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d5860:	6023      	streq	r3, [r4, #0]
   d5862:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d5864:	bf14      	ite	ne
   d5866:	2001      	movne	r0, #1
   d5868:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d586a:	bd38      	pop	{r3, r4, r5, pc}

000d586c <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d586c:	b510      	push	{r4, lr}
{
  delete(ds);
   d586e:	210e      	movs	r1, #14
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d5870:	4604      	mov	r4, r0
{
  delete(ds);
   d5872:	6800      	ldr	r0, [r0, #0]
   d5874:	f004 fc65 	bl	da142 <_ZdlPvj>
}
   d5878:	4620      	mov	r0, r4
   d587a:	bd10      	pop	{r4, pc}

000d587c <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d587c:	6800      	ldr	r0, [r0, #0]
   d587e:	f000 bfdd 	b.w	d683c <_ZN7OneWire12reset_searchEv>
	...

000d5884 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d5884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d5886:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d5888:	4604      	mov	r4, r0
   d588a:	460d      	mov	r5, r1
   d588c:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d588e:	b91b      	cbnz	r3, d5898 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d5890:	780b      	ldrb	r3, [r1, #0]
   d5892:	2b00      	cmp	r3, #0
   d5894:	f000 80a6 	beq.w	d59e4 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d5898:	6820      	ldr	r0, [r4, #0]
   d589a:	f000 fef1 	bl	d6680 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d589e:	7ea3      	ldrb	r3, [r4, #26]
   d58a0:	b123      	cbz	r3, d58ac <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d58a2:	b91e      	cbnz	r6, d58ac <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d58a4:	6820      	ldr	r0, [r4, #0]
   d58a6:	f000 ffc5 	bl	d6834 <_ZN7OneWire4skipEv>
   d58aa:	e003      	b.n	d58b4 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d58ac:	4629      	mov	r1, r5
   d58ae:	6820      	ldr	r0, [r4, #0]
   d58b0:	f000 ffae 	bl	d6810 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d58b4:	2200      	movs	r2, #0
   d58b6:	2144      	movs	r1, #68	; 0x44
   d58b8:	6820      	ldr	r0, [r4, #0]
   d58ba:	f000 ff76 	bl	d67aa <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d58be:	f240 20ee 	movw	r0, #750	; 0x2ee
   d58c2:	f002 fd61 	bl	d8388 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d58c6:	6820      	ldr	r0, [r4, #0]
   d58c8:	f000 feda 	bl	d6680 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d58cc:	7ea3      	ldrb	r3, [r4, #26]
   d58ce:	b123      	cbz	r3, d58da <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d58d0:	b91e      	cbnz	r6, d58da <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d58d2:	6820      	ldr	r0, [r4, #0]
   d58d4:	f000 ffae 	bl	d6834 <_ZN7OneWire4skipEv>
   d58d8:	e003      	b.n	d58e2 <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d58da:	4629      	mov	r1, r5
   d58dc:	6820      	ldr	r0, [r4, #0]
   d58de:	f000 ff97 	bl	d6810 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d58e2:	2200      	movs	r2, #0
   d58e4:	21be      	movs	r1, #190	; 0xbe
   d58e6:	6820      	ldr	r0, [r4, #0]
   d58e8:	f000 ff5f 	bl	d67aa <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d58ec:	782b      	ldrb	r3, [r5, #0]
   d58ee:	2b26      	cmp	r3, #38	; 0x26
   d58f0:	d104      	bne.n	d58fc <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d58f2:	2200      	movs	r2, #0
   d58f4:	4611      	mov	r1, r2
   d58f6:	6820      	ldr	r0, [r4, #0]
   d58f8:	f000 ff57 	bl	d67aa <_ZN7OneWire5writeEhh>
   d58fc:	1ce6      	adds	r6, r4, #3
   d58fe:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d5902:	6820      	ldr	r0, [r4, #0]
   d5904:	f000 ff74 	bl	d67f0 <_ZN7OneWire4readEv>
   d5908:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d590c:	42be      	cmp	r6, r7
   d590e:	d1f8      	bne.n	d5902 <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d5910:	2108      	movs	r1, #8
   d5912:	1d20      	adds	r0, r4, #4
   d5914:	f001 f819 	bl	d694a <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d5918:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d591a:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d591c:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d591e:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d5920:	d160      	bne.n	d59e4 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d5922:	782b      	ldrb	r3, [r5, #0]
   d5924:	2b22      	cmp	r3, #34	; 0x22
   d5926:	d019      	beq.n	d595c <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d5928:	d814      	bhi.n	d5954 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d592a:	2b10      	cmp	r3, #16
   d592c:	d15a      	bne.n	d59e4 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d592e:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d5930:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d5932:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d5934:	bf08      	it	eq
   d5936:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d5938:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d593c:	bf02      	ittt	eq
   d593e:	f023 030f 	biceq.w	r3, r3, #15
   d5942:	f1c2 020c 	rsbeq	r2, r2, #12
   d5946:	189b      	addeq	r3, r3, r2
   d5948:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d594a:	ee00 3a10 	vmov	s0, r3
   d594e:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d5952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d5954:	2b26      	cmp	r3, #38	; 0x26
   d5956:	d01f      	beq.n	d5998 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d5958:	2b28      	cmp	r3, #40	; 0x28
   d595a:	d143      	bne.n	d59e4 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d595c:	7a22      	ldrb	r2, [r4, #8]
   d595e:	7923      	ldrb	r3, [r4, #4]
   d5960:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d5964:	2a20      	cmp	r2, #32
   d5966:	d005      	beq.n	d5974 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d5968:	2a40      	cmp	r2, #64	; 0x40
   d596a:	d006      	beq.n	d597a <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d596c:	b942      	cbnz	r2, d5980 <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d596e:	f023 0307 	bic.w	r3, r3, #7
   d5972:	e004      	b.n	d597e <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d5974:	f023 0303 	bic.w	r3, r3, #3
   d5978:	e001      	b.n	d597e <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d597a:	f023 0301 	bic.w	r3, r3, #1
   d597e:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d5980:	7923      	ldrb	r3, [r4, #4]
   d5982:	7960      	ldrb	r0, [r4, #5]
   d5984:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5988:	b200      	sxth	r0, r0
   d598a:	f004 fe93 	bl	da6b4 <__aeabi_i2d>
   d598e:	2200      	movs	r2, #0
   d5990:	4b16      	ldr	r3, [pc, #88]	; (d59ec <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d5992:	f004 fef5 	bl	da780 <__aeabi_dmul>
   d5996:	e020      	b.n	d59da <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d5998:	79a5      	ldrb	r5, [r4, #6]
   d599a:	4628      	mov	r0, r5
   d599c:	f004 fe8a 	bl	da6b4 <__aeabi_i2d>
   d59a0:	4606      	mov	r6, r0
   d59a2:	7960      	ldrb	r0, [r4, #5]
   d59a4:	10c0      	asrs	r0, r0, #3
   d59a6:	ee07 0a90 	vmov	s15, r0
   d59aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d59ae:	460f      	mov	r7, r1
   d59b0:	ee17 0a90 	vmov	r0, s15
   d59b4:	f004 fe90 	bl	da6d8 <__aeabi_f2d>
   d59b8:	2200      	movs	r2, #0
   d59ba:	4b0d      	ldr	r3, [pc, #52]	; (d59f0 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d59bc:	f004 fee0 	bl	da780 <__aeabi_dmul>
   d59c0:	460b      	mov	r3, r1
   d59c2:	0629      	lsls	r1, r5, #24
   d59c4:	4602      	mov	r2, r0
   d59c6:	bf4c      	ite	mi
   d59c8:	490a      	ldrmi	r1, [pc, #40]	; (d59f4 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d59ca:	490b      	ldrpl	r1, [pc, #44]	; (d59f8 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d59cc:	2000      	movs	r0, #0
   d59ce:	f004 fed7 	bl	da780 <__aeabi_dmul>
   d59d2:	4632      	mov	r2, r6
   d59d4:	463b      	mov	r3, r7
   d59d6:	f004 fd21 	bl	da41c <__adddf3>
   d59da:	f005 f9c9 	bl	dad70 <__aeabi_d2f>
   d59de:	ee00 0a10 	vmov	s0, r0
      break;
   d59e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d59e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d59fc <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d59e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d59ea:	bf00      	nop
   d59ec:	3fb00000 	.word	0x3fb00000
   d59f0:	3fa00000 	.word	0x3fa00000
   d59f4:	bff00000 	.word	0xbff00000
   d59f8:	3ff00000 	.word	0x3ff00000
   d59fc:	7fc00000 	.word	0x7fc00000

000d5a00 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d5a00:	7e02      	ldrb	r2, [r0, #24]
   d5a02:	7e40      	ldrb	r0, [r0, #25]
}
   d5a04:	1a13      	subs	r3, r2, r0
   d5a06:	4258      	negs	r0, r3
   d5a08:	4158      	adcs	r0, r3
   d5a0a:	4770      	bx	lr

000d5a0c <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d5a0c:	f002 b9b4 	b.w	d7d78 <HAL_Pin_Map>

000d5a10 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5a10:	4770      	bx	lr

000d5a12 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5a12:	b510      	push	{r4, lr}
}
   d5a14:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5a16:	4604      	mov	r4, r0
}
   d5a18:	f004 fb93 	bl	da142 <_ZdlPvj>
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	bd10      	pop	{r4, pc}

000d5a20 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5a20:	6803      	ldr	r3, [r0, #0]
   d5a22:	b2c9      	uxtb	r1, r1
   d5a24:	689b      	ldr	r3, [r3, #8]
   d5a26:	4718      	bx	r3

000d5a28 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5a28:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5a2a:	4d03      	ldr	r5, [pc, #12]	; (d5a38 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5a2c:	6005      	str	r5, [r0, #0]
   d5a2e:	6041      	str	r1, [r0, #4]
   d5a30:	6082      	str	r2, [r0, #8]
   d5a32:	60c3      	str	r3, [r0, #12]
}
   d5a34:	bd30      	pop	{r4, r5, pc}
   d5a36:	bf00      	nop
   d5a38:	000dcee4 	.word	0x000dcee4

000d5a3c <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5a3c:	6840      	ldr	r0, [r0, #4]
   d5a3e:	f003 b99b 	b.w	d8d78 <_ZN7TwoWire5beginEv>

000d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5a42:	b510      	push	{r4, lr}
   d5a44:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5a46:	6800      	ldr	r0, [r0, #0]
   d5a48:	f003 f9e2 	bl	d8e10 <_ZN7TwoWire6unlockEv>
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	bd10      	pop	{r4, pc}

000d5a50 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a54:	b08a      	sub	sp, #40	; 0x28
   d5a56:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5a58:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a5a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a5c:	f003 f9cf 	bl	d8dfe <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5a60:	221e      	movs	r2, #30
   d5a62:	2100      	movs	r1, #0
   d5a64:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5a66:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5a68:	f005 fbec 	bl	db244 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5a6c:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5a6e:	b1de      	cbz	r6, d5aa8 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5a70:	683b      	ldr	r3, [r7, #0]
   d5a72:	2e1e      	cmp	r6, #30
   d5a74:	46b0      	mov	r8, r6
   d5a76:	bf28      	it	cs
   d5a78:	f04f 081e 	movcs.w	r8, #30
   d5a7c:	68dc      	ldr	r4, [r3, #12]
   d5a7e:	aa02      	add	r2, sp, #8
   d5a80:	4643      	mov	r3, r8
   d5a82:	4629      	mov	r1, r5
   d5a84:	4638      	mov	r0, r7
   d5a86:	47a0      	blx	r4
			if (!result) {
   d5a88:	4604      	mov	r4, r0
   d5a8a:	b948      	cbnz	r0, d5aa0 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5a8c:	462a      	mov	r2, r5
   d5a8e:	490a      	ldr	r1, [pc, #40]	; (d5ab8 <_ZN6MB85RC5eraseEv+0x68>)
   d5a90:	480a      	ldr	r0, [pc, #40]	; (d5abc <_ZN6MB85RC5eraseEv+0x6c>)
   d5a92:	f7fe fc0c 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d5a96:	a801      	add	r0, sp, #4
   d5a98:	f7ff ffd3 	bl	d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	e007      	b.n	d5ab0 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5aa0:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5aa4:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5aa6:	e7e2      	b.n	d5a6e <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5aa8:	a801      	add	r0, sp, #4
   d5aaa:	f7ff ffca 	bl	d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5aae:	2001      	movs	r0, #1
}
   d5ab0:	b00a      	add	sp, #40	; 0x28
   d5ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ab6:	bf00      	nop
   d5ab8:	000dce61 	.word	0x000dce61
   d5abc:	2003e294 	.word	0x2003e294

000d5ac0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5ac0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5ac4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5ac6:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ac8:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5aca:	460e      	mov	r6, r1
   d5acc:	4617      	mov	r7, r2
   d5ace:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5ad0:	f003 f995 	bl	d8dfe <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5ad4:	f1b8 0f00 	cmp.w	r8, #0
   d5ad8:	d101      	bne.n	d5ade <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5ada:	2401      	movs	r4, #1
   d5adc:	e03f      	b.n	d5b5e <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5ade:	68e1      	ldr	r1, [r4, #12]
   d5ae0:	6860      	ldr	r0, [r4, #4]
   d5ae2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ae6:	f003 f97f 	bl	d8de8 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5aea:	0a31      	lsrs	r1, r6, #8
   d5aec:	6860      	ldr	r0, [r4, #4]
   d5aee:	f7ff ff97 	bl	d5a20 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5af2:	4631      	mov	r1, r6
   d5af4:	6860      	ldr	r0, [r4, #4]
   d5af6:	f7ff ff93 	bl	d5a20 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5afa:	2100      	movs	r1, #0
   d5afc:	6860      	ldr	r0, [r4, #4]
   d5afe:	f003 f976 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5b02:	b108      	cbz	r0, d5b08 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5b04:	2400      	movs	r4, #0
   d5b06:	e02a      	b.n	d5b5e <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5b08:	68e1      	ldr	r1, [r4, #12]
   d5b0a:	6860      	ldr	r0, [r4, #4]
   d5b0c:	f1b8 0f20 	cmp.w	r8, #32
   d5b10:	46c1      	mov	r9, r8
   d5b12:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b16:	bf28      	it	cs
   d5b18:	f04f 0920 	movcs.w	r9, #32
   d5b1c:	2301      	movs	r3, #1
   d5b1e:	464a      	mov	r2, r9
   d5b20:	b2c9      	uxtb	r1, r1
   d5b22:	f003 f94b 	bl	d8dbc <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5b26:	f004 fae1 	bl	da0ec <_Z19__fetch_global_Wirev>
   d5b2a:	6803      	ldr	r3, [r0, #0]
   d5b2c:	691b      	ldr	r3, [r3, #16]
   d5b2e:	4798      	blx	r3
   d5b30:	4548      	cmp	r0, r9
   d5b32:	dbe7      	blt.n	d5b04 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5b34:	463d      	mov	r5, r7
   d5b36:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5b3a:	f004 fad7 	bl	da0ec <_Z19__fetch_global_Wirev>
   d5b3e:	6803      	ldr	r3, [r0, #0]
   d5b40:	695b      	ldr	r3, [r3, #20]
   d5b42:	4798      	blx	r3
   d5b44:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5b48:	1bea      	subs	r2, r5, r7
   d5b4a:	ebc5 0308 	rsb	r3, r5, r8
   d5b4e:	4591      	cmp	r9, r2
   d5b50:	eb05 060a 	add.w	r6, r5, sl
   d5b54:	443b      	add	r3, r7
   d5b56:	d8f0      	bhi.n	d5b3a <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5b58:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5b5a:	462f      	mov	r7, r5
   d5b5c:	e7ba      	b.n	d5ad4 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5b5e:	a801      	add	r0, sp, #4
   d5b60:	f7ff ff6f 	bl	d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5b64:	4620      	mov	r0, r4
   d5b66:	b002      	add	sp, #8
   d5b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5b6c <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b70:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b72:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b74:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b76:	460d      	mov	r5, r1
   d5b78:	4690      	mov	r8, r2
   d5b7a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5b7c:	f003 f93f 	bl	d8dfe <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5b80:	b34f      	cbz	r7, d5bd6 <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5b82:	68e1      	ldr	r1, [r4, #12]
   d5b84:	6860      	ldr	r0, [r4, #4]
   d5b86:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b8a:	f003 f92d 	bl	d8de8 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5b8e:	0a29      	lsrs	r1, r5, #8
   d5b90:	6860      	ldr	r0, [r4, #4]
   d5b92:	f7ff ff45 	bl	d5a20 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5b96:	4629      	mov	r1, r5
   d5b98:	6860      	ldr	r0, [r4, #4]
   d5b9a:	f7ff ff41 	bl	d5a20 <_ZN7TwoWire5writeEj>
   d5b9e:	f108 091e 	add.w	r9, r8, #30
   d5ba2:	4646      	mov	r6, r8
   d5ba4:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5ba8:	6860      	ldr	r0, [r4, #4]
   d5baa:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5bae:	6803      	ldr	r3, [r0, #0]
   d5bb0:	689b      	ldr	r3, [r3, #8]
   d5bb2:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bb4:	45b1      	cmp	r9, r6
   d5bb6:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5bba:	46b0      	mov	r8, r6
				dataLen--;
   d5bbc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bc0:	d001      	beq.n	d5bc6 <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5bc2:	2f00      	cmp	r7, #0
   d5bc4:	d1f0      	bne.n	d5ba8 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5bc6:	2101      	movs	r1, #1
   d5bc8:	6860      	ldr	r0, [r4, #4]
   d5bca:	f003 f910 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5bce:	2800      	cmp	r0, #0
   d5bd0:	d0d6      	beq.n	d5b80 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5bd2:	2400      	movs	r4, #0
   d5bd4:	e000      	b.n	d5bd8 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5bd6:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5bd8:	a801      	add	r0, sp, #4
   d5bda:	f7ff ff32 	bl	d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5bde:	4620      	mov	r0, r4
   d5be0:	b002      	add	sp, #8
   d5be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5be6 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5bea:	b08b      	sub	sp, #44	; 0x2c
   d5bec:	460e      	mov	r6, r1
   d5bee:	4615      	mov	r5, r2
   d5bf0:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5bf2:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5bf4:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5bf6:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5bf8:	f003 f901 	bl	d8dfe <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5bfc:	42ae      	cmp	r6, r5
   d5bfe:	d223      	bcs.n	d5c48 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5c00:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5c02:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5c04:	b90c      	cbnz	r4, d5c0a <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c06:	2401      	movs	r4, #1
   d5c08:	e03f      	b.n	d5c8a <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5c0a:	2c1e      	cmp	r4, #30
   d5c0c:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c0e:	f8d8 3000 	ldr.w	r3, [r8]
   d5c12:	bf28      	it	cs
   d5c14:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5c16:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c18:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c1c:	aa02      	add	r2, sp, #8
   d5c1e:	463b      	mov	r3, r7
   d5c20:	4631      	mov	r1, r6
   d5c22:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5c24:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5c26:	47c8      	blx	r9
				if (!result) {
   d5c28:	b908      	cbnz	r0, d5c2e <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c2a:	2400      	movs	r4, #0
   d5c2c:	e02d      	b.n	d5c8a <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5c2e:	f8d8 3000 	ldr.w	r3, [r8]
   d5c32:	aa02      	add	r2, sp, #8
   d5c34:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c38:	4629      	mov	r1, r5
   d5c3a:	463b      	mov	r3, r7
   d5c3c:	4640      	mov	r0, r8
   d5c3e:	47c8      	blx	r9
				if (!result) {
   d5c40:	2800      	cmp	r0, #0
   d5c42:	d0f2      	beq.n	d5c2a <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5c44:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5c46:	e7dd      	b.n	d5c04 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5c48:	d9dd      	bls.n	d5c06 <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5c4a:	2c00      	cmp	r4, #0
   d5c4c:	d0db      	beq.n	d5c06 <_ZN6MB85RC8moveDataEjjj+0x20>
   d5c4e:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5c50:	f8d8 3000 	ldr.w	r3, [r8]
   d5c54:	4627      	mov	r7, r4
   d5c56:	bf28      	it	cs
   d5c58:	271e      	movcs	r7, #30
   d5c5a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c5e:	aa02      	add	r2, sp, #8
   d5c60:	463b      	mov	r3, r7
   d5c62:	4631      	mov	r1, r6
   d5c64:	4640      	mov	r0, r8
   d5c66:	47c8      	blx	r9
				if (!result) {
   d5c68:	2800      	cmp	r0, #0
   d5c6a:	d0de      	beq.n	d5c2a <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5c6c:	f8d8 3000 	ldr.w	r3, [r8]
   d5c70:	aa02      	add	r2, sp, #8
   d5c72:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c76:	4629      	mov	r1, r5
   d5c78:	463b      	mov	r3, r7
   d5c7a:	4640      	mov	r0, r8
   d5c7c:	47c8      	blx	r9
				if (!result) {
   d5c7e:	2800      	cmp	r0, #0
   d5c80:	d0d3      	beq.n	d5c2a <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5c82:	443e      	add	r6, r7
				framAddrTo += count;
   d5c84:	443d      	add	r5, r7
				numBytes -= count;
   d5c86:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5c88:	e7df      	b.n	d5c4a <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5c8a:	a801      	add	r0, sp, #4
   d5c8c:	f7ff fed9 	bl	d5a42 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5c90:	4620      	mov	r0, r4
   d5c92:	b00b      	add	sp, #44	; 0x2c
   d5c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5c98 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5c98:	f002 b86e 	b.w	d7d78 <HAL_Pin_Map>

000d5c9c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5c9c:	2040      	movs	r0, #64	; 0x40
   d5c9e:	4770      	bx	lr

000d5ca0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5ca0:	2000      	movs	r0, #0
   d5ca2:	4770      	bx	lr

000d5ca4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5ca4:	2080      	movs	r0, #128	; 0x80
   d5ca6:	4770      	bx	lr

000d5ca8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5ca8:	20ff      	movs	r0, #255	; 0xff
   d5caa:	4770      	bx	lr

000d5cac <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5cac:	4770      	bx	lr

000d5cae <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5cae:	4770      	bx	lr

000d5cb0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5cb2:	4770      	bx	lr

000d5cb4 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5cb4:	b510      	push	{r4, lr}

}
   d5cb6:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5cb8:	4604      	mov	r4, r0

}
   d5cba:	f004 fa42 	bl	da142 <_ZdlPvj>
   d5cbe:	4620      	mov	r0, r4
   d5cc0:	bd10      	pop	{r4, pc}

000d5cc2 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5cc2:	b510      	push	{r4, lr}

}
   d5cc4:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5cc6:	4604      	mov	r4, r0

}
   d5cc8:	f004 fa3b 	bl	da142 <_ZdlPvj>
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd10      	pop	{r4, pc}

000d5cd0 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5cd0:	b510      	push	{r4, lr}

}
   d5cd2:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5cd4:	4604      	mov	r4, r0

}
   d5cd6:	f004 fa34 	bl	da142 <_ZdlPvj>
   d5cda:	4620      	mov	r0, r4
   d5cdc:	bd10      	pop	{r4, pc}

000d5cde <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5cde:	b510      	push	{r4, lr}

}
   d5ce0:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5ce2:	4604      	mov	r4, r0

}
   d5ce4:	f004 fa2d 	bl	da142 <_ZdlPvj>
   d5ce8:	4620      	mov	r0, r4
   d5cea:	bd10      	pop	{r4, pc}

000d5cec <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5cec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5cf0:	6803      	ldr	r3, [r0, #0]
   d5cf2:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5cf4:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5cf6:	4798      	blx	r3
   d5cf8:	2210      	movs	r2, #16
   d5cfa:	4601      	mov	r1, r0
   d5cfc:	4668      	mov	r0, sp
   d5cfe:	f005 faa1 	bl	db244 <memset>

	size_t len = length();
   d5d02:	682b      	ldr	r3, [r5, #0]
   d5d04:	4628      	mov	r0, r5
   d5d06:	689b      	ldr	r3, [r3, #8]
   d5d08:	4798      	blx	r3
	size_t offset = 0;
   d5d0a:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5d0c:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5d0e:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5d10:	42bc      	cmp	r4, r7
   d5d12:	d20e      	bcs.n	d5d32 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5d14:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5d16:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5d18:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5d1a:	bf28      	it	cs
   d5d1c:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5d1e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d22:	466a      	mov	r2, sp
   d5d24:	4633      	mov	r3, r6
   d5d26:	4621      	mov	r1, r4
   d5d28:	4628      	mov	r0, r5
   d5d2a:	47c0      	blx	r8
		if (!bResult) {
   d5d2c:	b108      	cbz	r0, d5d32 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5d2e:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5d30:	e7ee      	b.n	d5d10 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5d32:	b004      	add	sp, #16
   d5d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d38 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5d38:	2300      	movs	r3, #0
	rawMonth = 1;
   d5d3a:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5d3c:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5d3e:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5d40:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5d42:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5d44:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5d46:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5d48:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d5d4a:	7443      	strb	r3, [r0, #17]
   d5d4c:	4770      	bx	lr
	...

000d5d50 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d5d50:	2201      	movs	r2, #1
   d5d52:	b508      	push	{r3, lr}
   d5d54:	7142      	strb	r2, [r0, #5]
   d5d56:	2202      	movs	r2, #2
   d5d58:	7182      	strb	r2, [r0, #6]
   d5d5a:	2203      	movs	r2, #3
   d5d5c:	4b06      	ldr	r3, [pc, #24]	; (d5d78 <_ZN12MCP79410TimeC1Ev+0x28>)
   d5d5e:	71c2      	strb	r2, [r0, #7]
   d5d60:	2204      	movs	r2, #4
   d5d62:	6003      	str	r3, [r0, #0]
   d5d64:	7202      	strb	r2, [r0, #8]
   d5d66:	2300      	movs	r3, #0
   d5d68:	2207      	movs	r2, #7
   d5d6a:	7103      	strb	r3, [r0, #4]
   d5d6c:	7242      	strb	r2, [r0, #9]
   d5d6e:	7443      	strb	r3, [r0, #17]
	clear();
   d5d70:	f7ff ffe2 	bl	d5d38 <_ZN12MCP79410Time5clearEv>
}
   d5d74:	bd08      	pop	{r3, pc}
   d5d76:	bf00      	nop
   d5d78:	000dd044 	.word	0x000dd044

000d5d7c <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d7c:	0903      	lsrs	r3, r0, #4
}
   d5d7e:	220a      	movs	r2, #10
   d5d80:	f000 000f 	and.w	r0, r0, #15
   d5d84:	fb02 0003 	mla	r0, r2, r3, r0
   d5d88:	4770      	bx	lr

000d5d8a <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d5d8a:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d5d8c:	7a80      	ldrb	r0, [r0, #10]
   d5d8e:	f7ff fff5 	bl	d5d7c <_ZN12MCP79410Time8bcdToIntEh>
}
   d5d92:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5d96:	bd08      	pop	{r3, pc}

000d5d98 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d5d98:	7ac0      	ldrb	r0, [r0, #11]
   d5d9a:	f000 001f 	and.w	r0, r0, #31
   d5d9e:	f7ff bfed 	b.w	d5d7c <_ZN12MCP79410Time8bcdToIntEh>

000d5da2 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5da2:	7b00      	ldrb	r0, [r0, #12]
   d5da4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5da8:	f7ff bfe8 	b.w	d5d7c <_ZN12MCP79410Time8bcdToIntEh>

000d5dac <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d5dac:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5dae:	7b81      	ldrb	r1, [r0, #14]
   d5db0:	064a      	lsls	r2, r1, #25
   d5db2:	d50d      	bpl.n	d5dd0 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5db4:	f001 001f 	and.w	r0, r1, #31
   d5db8:	f7ff ffe0 	bl	d5d7c <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d5dbc:	068b      	lsls	r3, r1, #26
   d5dbe:	d503      	bpl.n	d5dc8 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d5dc0:	280c      	cmp	r0, #12
   d5dc2:	d00b      	beq.n	d5ddc <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d5dc4:	300c      	adds	r0, #12
   d5dc6:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d5dc8:	280c      	cmp	r0, #12
   d5dca:	bf08      	it	eq
   d5dcc:	2000      	moveq	r0, #0
   d5dce:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5dd0:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d5dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d5dd8:	f7ff bfd0 	b.w	d5d7c <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d5ddc:	bd08      	pop	{r3, pc}

000d5dde <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d5dde:	7bc0      	ldrb	r0, [r0, #15]
   d5de0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5de4:	f7ff bfca 	b.w	d5d7c <_ZN12MCP79410Time8bcdToIntEh>

000d5de8 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d5de8:	7c00      	ldrb	r0, [r0, #16]
   d5dea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5dee:	f7ff bfc5 	b.w	d5d7c <_ZN12MCP79410Time8bcdToIntEh>

000d5df2 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5df2:	b510      	push	{r4, lr}
   d5df4:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5df6:	2224      	movs	r2, #36	; 0x24
   d5df8:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d5dfa:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d5dfc:	a801      	add	r0, sp, #4
   d5dfe:	f005 fa21 	bl	db244 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff ffc1 	bl	d5d8a <_ZNK12MCP79410Time7getYearEv>
   d5e08:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5e0c:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f7ff ffc2 	bl	d5d98 <_ZNK12MCP79410Time8getMonthEv>
   d5e14:	3801      	subs	r0, #1
   d5e16:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff ffc2 	bl	d5da2 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5e1e:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d5e20:	4620      	mov	r0, r4
   d5e22:	f7ff ffc3 	bl	d5dac <_ZNK12MCP79410Time7getHourEv>
   d5e26:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5e28:	4620      	mov	r0, r4
   d5e2a:	f7ff ffd8 	bl	d5dde <_ZNK12MCP79410Time9getMinuteEv>
   d5e2e:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e30:	4620      	mov	r0, r4
   d5e32:	f7ff ffd9 	bl	d5de8 <_ZNK12MCP79410Time9getSecondEv>
   d5e36:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d5e38:	a801      	add	r0, sp, #4
   d5e3a:	f005 fae7 	bl	db40c <mktime>
}
   d5e3e:	b00a      	add	sp, #40	; 0x28
   d5e40:	bd10      	pop	{r4, pc}

000d5e42 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d5e42:	220a      	movs	r2, #10
   d5e44:	fb90 f3f2 	sdiv	r3, r0, r2
   d5e48:	fb93 f1f2 	sdiv	r1, r3, r2
   d5e4c:	fb02 3111 	mls	r1, r2, r1, r3
   d5e50:	fb02 0313 	mls	r3, r2, r3, r0
   d5e54:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d5e58:	b2c0      	uxtb	r0, r0
   d5e5a:	4770      	bx	lr

000d5e5c <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d5e5c:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d5e5e:	b510      	push	{r4, lr}
   d5e60:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5e62:	fb91 f0f3 	sdiv	r0, r1, r3
   d5e66:	fb00 1013 	mls	r0, r0, r3, r1
   d5e6a:	f7ff ffea 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5e6e:	72a0      	strb	r0, [r4, #10]
   d5e70:	bd10      	pop	{r4, pc}

000d5e72 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d5e72:	b510      	push	{r4, lr}
   d5e74:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5e76:	4608      	mov	r0, r1
   d5e78:	f7ff ffe3 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5e7c:	72e0      	strb	r0, [r4, #11]
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d5e80:	b510      	push	{r4, lr}
   d5e82:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d5e84:	4608      	mov	r0, r1
   d5e86:	f7ff ffdc 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5e8a:	7b23      	ldrb	r3, [r4, #12]
   d5e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d5e90:	4318      	orrs	r0, r3
   d5e92:	7320      	strb	r0, [r4, #12]
   d5e94:	bd10      	pop	{r4, pc}

000d5e96 <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d5e96:	b510      	push	{r4, lr}
   d5e98:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d5e9a:	1c48      	adds	r0, r1, #1
   d5e9c:	f7ff ffd1 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5ea0:	7b63      	ldrb	r3, [r4, #13]
   d5ea2:	f023 0307 	bic.w	r3, r3, #7
   d5ea6:	4318      	orrs	r0, r3
   d5ea8:	7360      	strb	r0, [r4, #13]
   d5eaa:	bd10      	pop	{r4, pc}

000d5eac <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d5eac:	b510      	push	{r4, lr}
   d5eae:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5eb0:	4608      	mov	r0, r1
   d5eb2:	f7ff ffc6 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5eb6:	73a0      	strb	r0, [r4, #14]
   d5eb8:	bd10      	pop	{r4, pc}

000d5eba <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d5eba:	b510      	push	{r4, lr}
   d5ebc:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5ebe:	4608      	mov	r0, r1
   d5ec0:	f7ff ffbf 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5ec4:	73e0      	strb	r0, [r4, #15]
   d5ec6:	bd10      	pop	{r4, pc}

000d5ec8 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d5ec8:	b510      	push	{r4, lr}
   d5eca:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d5ecc:	4608      	mov	r0, r1
   d5ece:	f7ff ffb8 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d5ed2:	7c23      	ldrb	r3, [r4, #16]
   d5ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5ed8:	4318      	orrs	r0, r3
   d5eda:	7420      	strb	r0, [r4, #16]
   d5edc:	bd10      	pop	{r4, pc}

000d5ede <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d5ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ee0:	4604      	mov	r4, r0
   d5ee2:	a802      	add	r0, sp, #8
   d5ee4:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d5ee8:	f004 ffe4 	bl	daeb4 <gmtime>
   d5eec:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d5eee:	6941      	ldr	r1, [r0, #20]
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	f7ff ffb3 	bl	d5e5c <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d5ef6:	6929      	ldr	r1, [r5, #16]
   d5ef8:	4620      	mov	r0, r4
   d5efa:	3101      	adds	r1, #1
   d5efc:	f7ff ffb9 	bl	d5e72 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d5f00:	68e9      	ldr	r1, [r5, #12]
   d5f02:	4620      	mov	r0, r4
   d5f04:	f7ff ffbc 	bl	d5e80 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d5f08:	69a9      	ldr	r1, [r5, #24]
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	f7ff ffc3 	bl	d5e96 <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d5f10:	68a9      	ldr	r1, [r5, #8]
   d5f12:	4620      	mov	r0, r4
   d5f14:	f7ff ffca 	bl	d5eac <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5f18:	6869      	ldr	r1, [r5, #4]
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	f7ff ffcd 	bl	d5eba <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5f20:	6829      	ldr	r1, [r5, #0]
   d5f22:	293b      	cmp	r1, #59	; 0x3b
   d5f24:	bfa8      	it	ge
   d5f26:	213b      	movge	r1, #59	; 0x3b
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f7ff ffcd 	bl	d5ec8 <_ZN12MCP79410Time9setSecondEi>
}
   d5f2e:	b003      	add	sp, #12
   d5f30:	bd30      	pop	{r4, r5, pc}

000d5f32 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d5f32:	b510      	push	{r4, lr}
   d5f34:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d5f36:	f7ff ffd2 	bl	d5ede <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d5f3a:	7a63      	ldrb	r3, [r4, #9]
   d5f3c:	7463      	strb	r3, [r4, #17]
   d5f3e:	bd10      	pop	{r4, pc}

000d5f40 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f40:	4a08      	ldr	r2, [pc, #32]	; (d5f64 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d5f42:	6002      	str	r2, [r0, #0]
   d5f44:	2200      	movs	r2, #0
   d5f46:	7202      	strb	r2, [r0, #8]
   d5f48:	7242      	strb	r2, [r0, #9]
   d5f4a:	2201      	movs	r2, #1
   d5f4c:	7282      	strb	r2, [r0, #10]
   d5f4e:	4603      	mov	r3, r0
   d5f50:	2203      	movs	r2, #3
   d5f52:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f54:	4a04      	ldr	r2, [pc, #16]	; (d5f68 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f56:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f58:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f5a:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f5c:	4a03      	ldr	r2, [pc, #12]	; (d5f6c <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f5e:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f60:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d5f62:	4770      	bx	lr
   d5f64:	000dd054 	.word	0x000dd054
   d5f68:	000dcf24 	.word	0x000dcf24
   d5f6c:	000dcf00 	.word	0x000dcf00

000d5f70 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f74:	4605      	mov	r5, r0
   d5f76:	460f      	mov	r7, r1
   d5f78:	4691      	mov	r9, r2
   d5f7a:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f7c:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d5f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f80:	429c      	cmp	r4, r3
   d5f82:	d230      	bcs.n	d5fe6 <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d5f84:	4639      	mov	r1, r7
   d5f86:	6868      	ldr	r0, [r5, #4]
   d5f88:	f002 ff2a 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f8c:	eb09 0104 	add.w	r1, r9, r4
   d5f90:	6868      	ldr	r0, [r5, #4]
   d5f92:	f7ff fd45 	bl	d5a20 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5f96:	2100      	movs	r1, #0
   d5f98:	6868      	ldr	r0, [r5, #4]
   d5f9a:	f002 ff28 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5f9e:	4606      	mov	r6, r0
   d5fa0:	b9d8      	cbnz	r0, d5fda <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d5fa4:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5fa6:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d5fa8:	2a20      	cmp	r2, #32
   d5faa:	f04f 0301 	mov.w	r3, #1
   d5fae:	bf28      	it	cs
   d5fb0:	2220      	movcs	r2, #32
   d5fb2:	4639      	mov	r1, r7
   d5fb4:	f002 ff02 	bl	d8dbc <_ZN7TwoWire11requestFromEhjh>
   d5fb8:	eb0a 0804 	add.w	r8, sl, r4
   d5fbc:	4683      	mov	fp, r0
   d5fbe:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d5fc0:	ebc8 0306 	rsb	r3, r8, r6
   d5fc4:	459b      	cmp	fp, r3
   d5fc6:	d906      	bls.n	d5fd6 <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d5fc8:	6868      	ldr	r0, [r5, #4]
   d5fca:	6803      	ldr	r3, [r0, #0]
   d5fcc:	695b      	ldr	r3, [r3, #20]
   d5fce:	4798      	blx	r3
   d5fd0:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d5fd4:	e7f4      	b.n	d5fc0 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d5fd6:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d5fd8:	e7d1      	b.n	d5f7e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5fda:	4602      	mov	r2, r0
   d5fdc:	4904      	ldr	r1, [pc, #16]	; (d5ff0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5fde:	4805      	ldr	r0, [pc, #20]	; (d5ff4 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d5fe0:	f7fe f965 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d5fe4:	e000      	b.n	d5fe8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d5fe6:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d5fe8:	4630      	mov	r0, r6
   d5fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fee:	bf00      	nop
   d5ff0:	000dcf9e 	.word	0x000dcf9e
   d5ff4:	2003e06c 	.word	0x2003e06c

000d5ff8 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5ffa:	2301      	movs	r3, #1
   d5ffc:	9300      	str	r3, [sp, #0]
   d5ffe:	460a      	mov	r2, r1
   d6000:	ab03      	add	r3, sp, #12
   d6002:	216f      	movs	r1, #111	; 0x6f
   d6004:	f7ff ffb4 	bl	d5f70 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6008:	b910      	cbnz	r0, d6010 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d600a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d600e:	e000      	b.n	d6012 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d6010:	2000      	movs	r0, #0
	}
}
   d6012:	b005      	add	sp, #20
   d6014:	f85d fb04 	ldr.w	pc, [sp], #4

000d6018 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d6018:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d601a:	2103      	movs	r1, #3
   d601c:	f7ff ffec 	bl	d5ff8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6020:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6024:	bd08      	pop	{r3, pc}

000d6026 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6026:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6028:	461e      	mov	r6, r3
   d602a:	2b00      	cmp	r3, #0
   d602c:	bf0c      	ite	eq
   d602e:	2307      	moveq	r3, #7
   d6030:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6032:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6034:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6036:	ab02      	add	r3, sp, #8
   d6038:	460a      	mov	r2, r1
   d603a:	216f      	movs	r1, #111	; 0x6f
   d603c:	f7ff ff98 	bl	d5f70 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6040:	4605      	mov	r5, r0
   d6042:	b9d8      	cbnz	r0, d607c <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d6044:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6048:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d604a:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d604e:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6050:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6054:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6056:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d605a:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d605c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6060:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6062:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6066:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6068:	b91e      	cbnz	r6, d6072 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d606a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d606e:	72a3      	strb	r3, [r4, #10]
   d6070:	e004      	b.n	d607c <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6072:	f003 fdef 	bl	d9c54 <_ZN9TimeClass4yearEv>
   d6076:	f7ff fee4 	bl	d5e42 <_ZN12MCP79410Time8intToBcdEi>
   d607a:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d607c:	4628      	mov	r0, r5
   d607e:	b004      	add	sp, #16
   d6080:	bd70      	pop	{r4, r5, r6, pc}

000d6082 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6082:	b538      	push	{r3, r4, r5, lr}
   d6084:	2300      	movs	r3, #0
   d6086:	460c      	mov	r4, r1
   d6088:	460a      	mov	r2, r1
   d608a:	4619      	mov	r1, r3
   d608c:	4605      	mov	r5, r0
   d608e:	f7ff ffca 	bl	d6026 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d6092:	b928      	cbnz	r0, d60a0 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6094:	7aa3      	ldrb	r3, [r4, #10]
   d6096:	b11b      	cbz	r3, d60a0 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d6098:	4628      	mov	r0, r5
   d609a:	f7ff ffbd 	bl	d6018 <_ZNK8MCP7941020getOscillatorRunningEv>
   d609e:	b900      	cbnz	r0, d60a2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d60a0:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d60a2:	bd38      	pop	{r3, r4, r5, pc}

000d60a4 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d60a4:	b510      	push	{r4, lr}
   d60a6:	b086      	sub	sp, #24
   d60a8:	4604      	mov	r4, r0
	MCP79410Time time;
   d60aa:	a801      	add	r0, sp, #4
   d60ac:	f7ff fe50 	bl	d5d50 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d60b0:	a901      	add	r1, sp, #4
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7ff ffe5 	bl	d6082 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d60b8:	b110      	cbz	r0, d60c0 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d60ba:	a801      	add	r0, sp, #4
   d60bc:	f7ff fe99 	bl	d5df2 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d60c0:	b006      	add	sp, #24
   d60c2:	bd10      	pop	{r4, pc}

000d60c4 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d60c4:	b530      	push	{r4, r5, lr}
   d60c6:	4604      	mov	r4, r0
   d60c8:	b085      	sub	sp, #20
	wire.begin();
   d60ca:	6840      	ldr	r0, [r0, #4]
   d60cc:	f002 fe54 	bl	d8d78 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d60d0:	f003 fd6c 	bl	d9bac <_ZN9TimeClass7isValidEv>
   d60d4:	b9c0      	cbnz	r0, d6108 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d60d6:	7ae3      	ldrb	r3, [r4, #11]
   d60d8:	079b      	lsls	r3, r3, #30
   d60da:	d515      	bpl.n	d6108 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff ffe1 	bl	d60a4 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d60e2:	4605      	mov	r5, r0
   d60e4:	b180      	cbz	r0, d6108 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d60e6:	f003 fca1 	bl	d9a2c <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d60ea:	4b09      	ldr	r3, [pc, #36]	; (d6110 <_ZN8MCP794105setupEv+0x4c>)
   d60ec:	4909      	ldr	r1, [pc, #36]	; (d6114 <_ZN8MCP794105setupEv+0x50>)
   d60ee:	681b      	ldr	r3, [r3, #0]
   d60f0:	462a      	mov	r2, r5
   d60f2:	4668      	mov	r0, sp
   d60f4:	f003 fd28 	bl	d9b48 <_ZN9TimeClass6formatElPKc>
   d60f8:	4807      	ldr	r0, [pc, #28]	; (d6118 <_ZN8MCP794105setupEv+0x54>)
   d60fa:	9a00      	ldr	r2, [sp, #0]
   d60fc:	4907      	ldr	r1, [pc, #28]	; (d611c <_ZN8MCP794105setupEv+0x58>)
   d60fe:	f7fe f8d6 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d6102:	4668      	mov	r0, sp
   d6104:	f003 fac5 	bl	d9692 <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d6108:	2301      	movs	r3, #1
   d610a:	7223      	strb	r3, [r4, #8]
}
   d610c:	b005      	add	sp, #20
   d610e:	bd30      	pop	{r4, r5, pc}
   d6110:	2003ddf0 	.word	0x2003ddf0
   d6114:	2003e4c4 	.word	0x2003e4c4
   d6118:	2003e06c 	.word	0x2003e06c
   d611c:	000dcfb8 	.word	0x000dcfb8

000d6120 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6124:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6128:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d612a:	6803      	ldr	r3, [r0, #0]
   d612c:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d612e:	4604      	mov	r4, r0
   d6130:	460d      	mov	r5, r1
   d6132:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6134:	4798      	blx	r3
   d6136:	4580      	cmp	r8, r0
   d6138:	d80a      	bhi.n	d6150 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d613a:	9600      	str	r6, [sp, #0]
   d613c:	463b      	mov	r3, r7
   d613e:	b2ea      	uxtb	r2, r5
   d6140:	2157      	movs	r1, #87	; 0x57
   d6142:	6860      	ldr	r0, [r4, #4]
   d6144:	f7ff ff14 	bl	d5f70 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6148:	fab0 f080 	clz	r0, r0
   d614c:	0940      	lsrs	r0, r0, #5
   d614e:	e000      	b.n	d6152 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d6150:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d6152:	b002      	add	sp, #8
   d6154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6158 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d615c:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6160:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6162:	6803      	ldr	r3, [r0, #0]
   d6164:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6166:	4605      	mov	r5, r0
   d6168:	460c      	mov	r4, r1
   d616a:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d616c:	4798      	blx	r3
   d616e:	4580      	cmp	r8, r0
   d6170:	d80c      	bhi.n	d618c <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6172:	f104 0220 	add.w	r2, r4, #32
   d6176:	9600      	str	r6, [sp, #0]
   d6178:	463b      	mov	r3, r7
   d617a:	b2d2      	uxtb	r2, r2
   d617c:	216f      	movs	r1, #111	; 0x6f
   d617e:	6868      	ldr	r0, [r5, #4]
   d6180:	f7ff fef6 	bl	d5f70 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6184:	fab0 f080 	clz	r0, r0
   d6188:	0940      	lsrs	r0, r0, #5
   d618a:	e000      	b.n	d618e <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d618c:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d618e:	b002      	add	sp, #8
   d6190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6194 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6198:	4607      	mov	r7, r0
   d619a:	4689      	mov	r9, r1
   d619c:	4692      	mov	sl, r2
   d619e:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d61a0:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d61a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61a4:	429c      	cmp	r4, r3
   d61a6:	d228      	bcs.n	d61fa <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d61a8:	4649      	mov	r1, r9
   d61aa:	6878      	ldr	r0, [r7, #4]
   d61ac:	f002 fe18 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d61b0:	eb0a 0104 	add.w	r1, sl, r4
   d61b4:	6878      	ldr	r0, [r7, #4]
   d61b6:	f7ff fc33 	bl	d5a20 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d61ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61bc:	1b1e      	subs	r6, r3, r4
   d61be:	2e1f      	cmp	r6, #31
   d61c0:	eb0b 0804 	add.w	r8, fp, r4
   d61c4:	bf28      	it	cs
   d61c6:	261f      	movcs	r6, #31
   d61c8:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d61ca:	6878      	ldr	r0, [r7, #4]
   d61cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d61d0:	6802      	ldr	r2, [r0, #0]
   d61d2:	6892      	ldr	r2, [r2, #8]
   d61d4:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d61d6:	ebc8 0205 	rsb	r2, r8, r5
   d61da:	42b2      	cmp	r2, r6
   d61dc:	d3f5      	bcc.n	d61ca <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d61de:	2101      	movs	r1, #1
   d61e0:	6878      	ldr	r0, [r7, #4]
   d61e2:	f002 fe04 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d61e6:	4605      	mov	r5, r0
   d61e8:	b128      	cbz	r0, d61f6 <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d61ea:	4602      	mov	r2, r0
   d61ec:	4905      	ldr	r1, [pc, #20]	; (d6204 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d61ee:	4806      	ldr	r0, [pc, #24]	; (d6208 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d61f0:	f7fe f85d 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d61f4:	e002      	b.n	d61fc <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d61f6:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d61f8:	e7d3      	b.n	d61a2 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d61fa:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d61fc:	4628      	mov	r0, r5
   d61fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6202:	bf00      	nop
   d6204:	000dcfcd 	.word	0x000dcfcd
   d6208:	2003e06c 	.word	0x2003e06c

000d620c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d620c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d620e:	7c13      	ldrb	r3, [r2, #16]
   d6210:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6214:	7bd3      	ldrb	r3, [r2, #15]
   d6216:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d621a:	7b93      	ldrb	r3, [r2, #14]
   d621c:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6220:	7b53      	ldrb	r3, [r2, #13]
   d6222:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6226:	7b13      	ldrb	r3, [r2, #12]
   d6228:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d622c:	7ad3      	ldrb	r3, [r2, #11]
   d622e:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6232:	7a93      	ldrb	r3, [r2, #10]
   d6234:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6238:	2307      	movs	r3, #7
   d623a:	9300      	str	r3, [sp, #0]
   d623c:	460a      	mov	r2, r1
   d623e:	ab02      	add	r3, sp, #8
   d6240:	216f      	movs	r1, #111	; 0x6f
   d6242:	f7ff ffa7 	bl	d6194 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6246:	b005      	add	sp, #20
   d6248:	f85d fb04 	ldr.w	pc, [sp], #4

000d624c <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d624c:	b510      	push	{r4, lr}
   d624e:	b086      	sub	sp, #24
   d6250:	4604      	mov	r4, r0
	MCP79410Time time;
   d6252:	a801      	add	r0, sp, #4
   d6254:	f7ff fd7c 	bl	d5d50 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d6258:	a801      	add	r0, sp, #4
   d625a:	f7ff fe40 	bl	d5ede <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d625e:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d6262:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6264:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6268:	f88d 3014 	strb.w	r3, [sp, #20]
   d626c:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d6270:	b112      	cbz	r2, d6278 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6272:	f043 0308 	orr.w	r3, r3, #8
   d6276:	e001      	b.n	d627c <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6278:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d627c:	aa01      	add	r2, sp, #4
   d627e:	2100      	movs	r1, #0
   d6280:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6282:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6286:	f7ff ffc1 	bl	d620c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d628a:	fab0 f080 	clz	r0, r0
   d628e:	0940      	lsrs	r0, r0, #5
   d6290:	b006      	add	sp, #24
   d6292:	bd10      	pop	{r4, pc}

000d6294 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6296:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d6298:	f003 fc88 	bl	d9bac <_ZN9TimeClass7isValidEv>
   d629c:	4604      	mov	r4, r0
   d629e:	b1b8      	cbz	r0, d62d0 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d62a0:	f003 fca5 	bl	d9bee <_ZN9TimeClass3nowEv>
   d62a4:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d62a6:	4601      	mov	r1, r0
   d62a8:	4630      	mov	r0, r6
   d62aa:	f7ff ffcf 	bl	d624c <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62ae:	4b0c      	ldr	r3, [pc, #48]	; (d62e0 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d62b0:	490c      	ldr	r1, [pc, #48]	; (d62e4 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d62b2:	681b      	ldr	r3, [r3, #0]
   d62b4:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d62b6:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62b8:	4668      	mov	r0, sp
   d62ba:	f003 fc45 	bl	d9b48 <_ZN9TimeClass6formatElPKc>
   d62be:	9a00      	ldr	r2, [sp, #0]
   d62c0:	4909      	ldr	r1, [pc, #36]	; (d62e8 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d62c2:	480a      	ldr	r0, [pc, #40]	; (d62ec <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d62c4:	f7fd fff3 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
   d62c8:	4668      	mov	r0, sp
   d62ca:	f003 f9e2 	bl	d9692 <_ZN6StringD1Ev>
   d62ce:	e003      	b.n	d62d8 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d62d0:	4907      	ldr	r1, [pc, #28]	; (d62f0 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d62d2:	4806      	ldr	r0, [pc, #24]	; (d62ec <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d62d4:	f7fd ffeb 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d62d8:	4620      	mov	r0, r4
   d62da:	b004      	add	sp, #16
   d62dc:	bd70      	pop	{r4, r5, r6, pc}
   d62de:	bf00      	nop
   d62e0:	2003ddf0 	.word	0x2003ddf0
   d62e4:	2003e4c4 	.word	0x2003e4c4
   d62e8:	000dcfe8 	.word	0x000dcfe8
   d62ec:	2003e06c 	.word	0x2003e06c
   d62f0:	000dcffe 	.word	0x000dcffe

000d62f4 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d62f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d62f6:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d62f8:	4604      	mov	r4, r0
	if (!timeSet) {
   d62fa:	b98d      	cbnz	r5, d6320 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d62fc:	f003 fc56 	bl	d9bac <_ZN9TimeClass7isValidEv>
   d6300:	b170      	cbz	r0, d6320 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6302:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d6304:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6306:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d630a:	f001 ff8d 	bl	d8228 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d630e:	b138      	cbz	r0, d6320 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6310:	7ae3      	ldrb	r3, [r4, #11]
   d6312:	07db      	lsls	r3, r3, #31
   d6314:	d502      	bpl.n	d631c <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d6316:	4620      	mov	r0, r4
   d6318:	f7ff ffbc 	bl	d6294 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d631c:	2301      	movs	r3, #1
   d631e:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d6320:	b003      	add	sp, #12
   d6322:	bd30      	pop	{r4, r5, pc}

000d6324 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d6326:	ab04      	add	r3, sp, #16
   d6328:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d632c:	2201      	movs	r2, #1
   d632e:	9200      	str	r2, [sp, #0]
   d6330:	460a      	mov	r2, r1
   d6332:	216f      	movs	r1, #111	; 0x6f
   d6334:	f7ff ff2e 	bl	d6194 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6338:	b005      	add	sp, #20
   d633a:	f85d fb04 	ldr.w	pc, [sp], #4

000d633e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d633e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6340:	4614      	mov	r4, r2
   d6342:	4605      	mov	r5, r0
   d6344:	460e      	mov	r6, r1
   d6346:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d6348:	f7ff fe56 	bl	d5ff8 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d634c:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d634e:	ea40 0207 	orr.w	r2, r0, r7
   d6352:	4631      	mov	r1, r6
   d6354:	4628      	mov	r0, r5
}
   d6356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d635a:	f7ff bfe3 	b.w	d6324 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d635e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d635e:	b113      	cbz	r3, d6366 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d6360:	4613      	mov	r3, r2
   d6362:	22ff      	movs	r2, #255	; 0xff
   d6364:	e001      	b.n	d636a <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d6366:	43d2      	mvns	r2, r2
   d6368:	b2d2      	uxtb	r2, r2
   d636a:	f7ff bfe8 	b.w	d633e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d636e <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d636e:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d6370:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6372:	d80c      	bhi.n	d638e <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6374:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d6376:	f04f 0300 	mov.w	r3, #0
   d637a:	bf0c      	ite	eq
   d637c:	2210      	moveq	r2, #16
   d637e:	2220      	movne	r2, #32
   d6380:	2107      	movs	r1, #7
   d6382:	f7ff ffec 	bl	d635e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d6386:	fab0 f080 	clz	r0, r0
   d638a:	0940      	lsrs	r0, r0, #5
   d638c:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d638e:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d6390:	bd08      	pop	{r3, pc}

000d6392 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d6392:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d6394:	f04f 0300 	mov.w	r3, #0
   d6398:	f04f 0208 	mov.w	r2, #8
   d639c:	bf14      	ite	ne
   d639e:	2114      	movne	r1, #20
   d63a0:	210d      	moveq	r1, #13
   d63a2:	f7ff bfdc 	b.w	d635e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d63a6 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d63a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d63aa:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d63ae:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d63b0:	6803      	ldr	r3, [r0, #0]
   d63b2:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d63b4:	4605      	mov	r5, r0
   d63b6:	460c      	mov	r4, r1
   d63b8:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d63ba:	4798      	blx	r3
   d63bc:	4580      	cmp	r8, r0
   d63be:	d80c      	bhi.n	d63da <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d63c0:	f104 0220 	add.w	r2, r4, #32
   d63c4:	9600      	str	r6, [sp, #0]
   d63c6:	463b      	mov	r3, r7
   d63c8:	b2d2      	uxtb	r2, r2
   d63ca:	216f      	movs	r1, #111	; 0x6f
   d63cc:	6868      	ldr	r0, [r5, #4]
   d63ce:	f7ff fee1 	bl	d6194 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d63d2:	fab0 f080 	clz	r0, r0
   d63d6:	0940      	lsrs	r0, r0, #5
   d63d8:	e000      	b.n	d63dc <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d63da:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d63dc:	b002      	add	sp, #8
   d63de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63e2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d63e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d63e4:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d63e6:	b085      	sub	sp, #20
   d63e8:	4606      	mov	r6, r0
   d63ea:	460c      	mov	r4, r1
   d63ec:	4617      	mov	r7, r2
   d63ee:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d63f0:	d901      	bls.n	d63f6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d63f2:	2000      	movs	r0, #0
   d63f4:	e043      	b.n	d647e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d63f6:	f7ff fe0f 	bl	d6018 <_ZNK8MCP7941020getOscillatorRunningEv>
   d63fa:	2800      	cmp	r0, #0
   d63fc:	d0f9      	beq.n	d63f2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d63fe:	4629      	mov	r1, r5
   d6400:	4630      	mov	r0, r6
   d6402:	f7ff ffc6 	bl	d6392 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d6406:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6408:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d640a:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d640e:	7be3      	ldrb	r3, [r4, #15]
   d6410:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6414:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6418:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d641a:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d641c:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d6420:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d6424:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d6426:	b117      	cbz	r7, d642e <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d6428:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d642c:	e001      	b.n	d6432 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d642e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d6432:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d6436:	7c63      	ldrb	r3, [r4, #17]
   d6438:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d643c:	011b      	lsls	r3, r3, #4
   d643e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d6442:	4313      	orrs	r3, r2
   d6444:	2d00      	cmp	r5, #0
   d6446:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d644a:	f04f 0306 	mov.w	r3, #6
   d644e:	9300      	str	r3, [sp, #0]
   d6450:	bf08      	it	eq
   d6452:	220a      	moveq	r2, #10
   d6454:	ab02      	add	r3, sp, #8
   d6456:	bf18      	it	ne
   d6458:	2211      	movne	r2, #17
   d645a:	216f      	movs	r1, #111	; 0x6f
   d645c:	4630      	mov	r0, r6
   d645e:	f7ff fe99 	bl	d6194 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d6462:	4604      	mov	r4, r0
   d6464:	b940      	cbnz	r0, d6478 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d6466:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d6468:	bf0c      	ite	eq
   d646a:	2310      	moveq	r3, #16
   d646c:	2320      	movne	r3, #32
   d646e:	22ff      	movs	r2, #255	; 0xff
   d6470:	2107      	movs	r1, #7
   d6472:	4630      	mov	r0, r6
   d6474:	f7ff ff63 	bl	d633e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d6478:	fab4 f084 	clz	r0, r4
   d647c:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d647e:	b005      	add	sp, #20
   d6480:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6482 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6482:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6484:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6486:	b087      	sub	sp, #28
   d6488:	4606      	mov	r6, r0
   d648a:	460c      	mov	r4, r1
   d648c:	4617      	mov	r7, r2
   d648e:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6490:	d901      	bls.n	d6496 <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6492:	2000      	movs	r0, #0
   d6494:	e010      	b.n	d64b8 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d6496:	f7ff fe05 	bl	d60a4 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d649a:	2800      	cmp	r0, #0
   d649c:	d0f9      	beq.n	d6492 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d649e:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d64a0:	a801      	add	r0, sp, #4
   d64a2:	f7ff fc55 	bl	d5d50 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d64a6:	a801      	add	r0, sp, #4
   d64a8:	f7ff fd43 	bl	d5f32 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d64ac:	462b      	mov	r3, r5
   d64ae:	463a      	mov	r2, r7
   d64b0:	a901      	add	r1, sp, #4
   d64b2:	4630      	mov	r0, r6
   d64b4:	f7ff ff95 	bl	d63e2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d64b8:	b007      	add	sp, #28
   d64ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64bc <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d64bc:	b538      	push	{r3, r4, r5, lr}
   d64be:	4605      	mov	r5, r0
   d64c0:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d64c2:	2157      	movs	r1, #87	; 0x57
   d64c4:	6868      	ldr	r0, [r5, #4]
   d64c6:	f002 fc8b 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d64ca:	2101      	movs	r1, #1
   d64cc:	6868      	ldr	r0, [r5, #4]
   d64ce:	f002 fc8e 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d64d2:	b108      	cbz	r0, d64d8 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d64d4:	3c01      	subs	r4, #1
   d64d6:	d1f4      	bne.n	d64c2 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d64d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64dc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d64dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64e0:	4605      	mov	r5, r0
   d64e2:	18d7      	adds	r7, r2, r3
   d64e4:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d64e6:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d64ea:	42bc      	cmp	r4, r7
   d64ec:	d01e      	beq.n	d652c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d64ee:	2157      	movs	r1, #87	; 0x57
   d64f0:	6868      	ldr	r0, [r5, #4]
   d64f2:	f002 fc75 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d64f6:	eb08 0104 	add.w	r1, r8, r4
   d64fa:	6868      	ldr	r0, [r5, #4]
   d64fc:	f7ff fa90 	bl	d5a20 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6500:	6868      	ldr	r0, [r5, #4]
   d6502:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6506:	6803      	ldr	r3, [r0, #0]
   d6508:	689b      	ldr	r3, [r3, #8]
   d650a:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d650c:	2101      	movs	r1, #1
   d650e:	6868      	ldr	r0, [r5, #4]
   d6510:	f002 fc6d 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6514:	4606      	mov	r6, r0
   d6516:	b128      	cbz	r0, d6524 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6518:	4602      	mov	r2, r0
   d651a:	4906      	ldr	r1, [pc, #24]	; (d6534 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d651c:	4806      	ldr	r0, [pc, #24]	; (d6538 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d651e:	f7fd fec6 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6522:	e004      	b.n	d652e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d6524:	4628      	mov	r0, r5
   d6526:	f7ff ffc9 	bl	d64bc <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d652a:	e7de      	b.n	d64ea <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d652c:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d652e:	4630      	mov	r0, r6
   d6530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6534:	000dd013 	.word	0x000dd013
   d6538:	2003e06c 	.word	0x2003e06c

000d653c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d6540:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6544:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6546:	6803      	ldr	r3, [r0, #0]
   d6548:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d654a:	4604      	mov	r4, r0
   d654c:	460d      	mov	r5, r1
   d654e:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d6550:	4798      	blx	r3
   d6552:	4580      	cmp	r8, r0
   d6554:	d80a      	bhi.n	d656c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d6556:	4633      	mov	r3, r6
   d6558:	463a      	mov	r2, r7
   d655a:	b2e9      	uxtb	r1, r5
   d655c:	6860      	ldr	r0, [r4, #4]
   d655e:	f7ff ffbd 	bl	d64dc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d6562:	fab0 f080 	clz	r0, r0
   d6566:	0940      	lsrs	r0, r0, #5
   d6568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d656c:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6574 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d6574:	b508      	push	{r3, lr}
   d6576:	f001 fbff 	bl	d7d78 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d657a:	4b02      	ldr	r3, [pc, #8]	; (d6584 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d657c:	4a02      	ldr	r2, [pc, #8]	; (d6588 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d657e:	601a      	str	r2, [r3, #0]
   d6580:	bd08      	pop	{r3, pc}
   d6582:	bf00      	nop
   d6584:	2003e06c 	.word	0x2003e06c
   d6588:	000dd034 	.word	0x000dd034

000d658c <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d658c:	f001 bbf4 	b.w	d7d78 <HAL_Pin_Map>

000d6590 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d6590:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d6592:	6803      	ldr	r3, [r0, #0]
   d6594:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d6596:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d6598:	d904      	bls.n	d65a4 <nrf_gpio_pin_port_decode+0x14>
   d659a:	4a07      	ldr	r2, [pc, #28]	; (d65b8 <nrf_gpio_pin_port_decode+0x28>)
   d659c:	2100      	movs	r1, #0
   d659e:	200a      	movs	r0, #10
   d65a0:	f001 fd6a 	bl	d8078 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d65a4:	6823      	ldr	r3, [r4, #0]
   d65a6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d65a8:	bf83      	ittte	hi
   d65aa:	f003 031f 	andhi.w	r3, r3, #31
   d65ae:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d65b0:	4802      	ldrhi	r0, [pc, #8]	; (d65bc <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d65b2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d65b6:	bd10      	pop	{r4, pc}
   d65b8:	000d7cf9 	.word	0x000d7cf9
   d65bc:	50000300 	.word	0x50000300

000d65c0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d65c0:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d65c2:	4b0b      	ldr	r3, [pc, #44]	; (d65f0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	0100      	lsls	r0, r0, #4
   d65c8:	1819      	adds	r1, r3, r0
   d65ca:	5c1a      	ldrb	r2, [r3, r0]
   d65cc:	784b      	ldrb	r3, [r1, #1]
   d65ce:	a802      	add	r0, sp, #8
   d65d0:	f003 031f 	and.w	r3, r3, #31
   d65d4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d65d8:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d65dc:	f7ff ffd8 	bl	d6590 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d65e0:	9a01      	ldr	r2, [sp, #4]
   d65e2:	2301      	movs	r3, #1
   d65e4:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d65e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d65ea:	b003      	add	sp, #12
   d65ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d65f0:	2003e070 	.word	0x2003e070

000d65f4 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d65f4:	b507      	push	{r0, r1, r2, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d65f6:	4b0b      	ldr	r3, [pc, #44]	; (d6624 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	0100      	lsls	r0, r0, #4
   d65fc:	1819      	adds	r1, r3, r0
   d65fe:	5c1a      	ldrb	r2, [r3, r0]
   d6600:	784b      	ldrb	r3, [r1, #1]
   d6602:	a802      	add	r0, sp, #8
   d6604:	f003 031f 	and.w	r3, r3, #31
   d6608:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d660c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6610:	f7ff ffbe 	bl	d6590 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d6614:	9a01      	ldr	r2, [sp, #4]
   d6616:	2301      	movs	r3, #1
   d6618:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d661a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d661e:	b003      	add	sp, #12
   d6620:	f85d fb04 	ldr.w	pc, [sp], #4
   d6624:	2003e070 	.word	0x2003e070

000d6628 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d6628:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d662a:	4b0f      	ldr	r3, [pc, #60]	; (d6668 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d662c:	681b      	ldr	r3, [r3, #0]
   d662e:	0100      	lsls	r0, r0, #4
   d6630:	181a      	adds	r2, r3, r0
   d6632:	5c1c      	ldrb	r4, [r3, r0]
   d6634:	7853      	ldrb	r3, [r2, #1]
   d6636:	a802      	add	r0, sp, #8
   d6638:	f003 031f 	and.w	r3, r3, #31
   d663c:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d6640:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6644:	f7ff ffa4 	bl	d6590 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d6648:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d664c:	a802      	add	r0, sp, #8
   d664e:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6652:	f7ff ff9d 	bl	d6590 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d6656:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d665a:	9800      	ldr	r0, [sp, #0]
   d665c:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d6660:	f000 0001 	and.w	r0, r0, #1
   d6664:	b002      	add	sp, #8
   d6666:	bd10      	pop	{r4, pc}
   d6668:	2003e070 	.word	0x2003e070

000d666c <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d666c:	b538      	push	{r3, r4, r5, lr}
   d666e:	4604      	mov	r4, r0
   d6670:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d6672:	4628      	mov	r0, r5
   d6674:	2100      	movs	r1, #0
   d6676:	f003 fce1 	bl	da03c <pinMode>
    _pin = pin;
   d667a:	8025      	strh	r5, [r4, #0]
}
   d667c:	4620      	mov	r0, r4
   d667e:	bd38      	pop	{r3, r4, r5, pc}

000d6680 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d6680:	b570      	push	{r4, r5, r6, lr}
   d6682:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d6684:	f002 fbf6 	bl	d8e74 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6688:	2100      	movs	r1, #0
   d668a:	8828      	ldrh	r0, [r5, #0]
   d668c:	f001 fb7c 	bl	d7d88 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d6690:	f002 fbf2 	bl	d8e78 <_Z10interruptsv>
   d6694:	247d      	movs	r4, #125	; 0x7d
   d6696:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d6698:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d669c:	d02d      	beq.n	d66fa <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d669e:	2002      	movs	r0, #2
   d66a0:	f001 fb2a 	bl	d7cf8 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d66a4:	8828      	ldrh	r0, [r5, #0]
   d66a6:	f7ff ffbf 	bl	d6628 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
   d66aa:	2800      	cmp	r0, #0
   d66ac:	d0f3      	beq.n	d6696 <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
   d66ae:	f002 fbe1 	bl	d8e74 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d66b2:	8828      	ldrh	r0, [r5, #0]
   d66b4:	f7ff ff84 	bl	d65c0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d66b8:	2101      	movs	r1, #1
   d66ba:	8828      	ldrh	r0, [r5, #0]
   d66bc:	f001 fb64 	bl	d7d88 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d66c0:	f002 fbda 	bl	d8e78 <_Z10interruptsv>
   d66c4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d66c8:	f001 fb16 	bl	d7cf8 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d66cc:	f001 fb34 	bl	d7d38 <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d66d0:	2100      	movs	r1, #0
   d66d2:	4606      	mov	r6, r0
   d66d4:	8828      	ldrh	r0, [r5, #0]
   d66d6:	f001 fb57 	bl	d7d88 <HAL_Pin_Mode>
   d66da:	2046      	movs	r0, #70	; 0x46
   d66dc:	f001 fb0c 	bl	d7cf8 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d66e0:	8828      	ldrh	r0, [r5, #0]
   d66e2:	f7ff ffa1 	bl	d6628 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d66e6:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d66ea:	4630      	mov	r0, r6
   d66ec:	f001 fb2c 	bl	d7d48 <HAL_enable_irq>
   d66f0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d66f4:	0964      	lsrs	r4, r4, #5
   d66f6:	f001 faff 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d66fa:	4620      	mov	r0, r4
   d66fc:	bd70      	pop	{r4, r5, r6, pc}

000d66fe <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d66fe:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d6700:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d6704:	4604      	mov	r4, r0
    if (v & 1)
   d6706:	d015      	beq.n	d6734 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d6708:	f001 fb16 	bl	d7d38 <HAL_disable_irq>
   d670c:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d670e:	8820      	ldrh	r0, [r4, #0]
   d6710:	f7ff ff56 	bl	d65c0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6714:	2101      	movs	r1, #1
   d6716:	8820      	ldrh	r0, [r4, #0]
   d6718:	f001 fb36 	bl	d7d88 <HAL_Pin_Mode>
   d671c:	2001      	movs	r0, #1
   d671e:	f001 faeb 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6722:	2100      	movs	r1, #0
   d6724:	8820      	ldrh	r0, [r4, #0]
   d6726:	f001 fb2f 	bl	d7d88 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d672a:	4628      	mov	r0, r5
   d672c:	f001 fb0c 	bl	d7d48 <HAL_enable_irq>
   d6730:	203b      	movs	r0, #59	; 0x3b
   d6732:	e014      	b.n	d675e <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d6734:	f001 fb00 	bl	d7d38 <HAL_disable_irq>
   d6738:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d673a:	8820      	ldrh	r0, [r4, #0]
   d673c:	f7ff ff40 	bl	d65c0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6740:	2101      	movs	r1, #1
   d6742:	8820      	ldrh	r0, [r4, #0]
   d6744:	f001 fb20 	bl	d7d88 <HAL_Pin_Mode>
   d6748:	2041      	movs	r0, #65	; 0x41
   d674a:	f001 fad5 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d674e:	4631      	mov	r1, r6
   d6750:	8820      	ldrh	r0, [r4, #0]
   d6752:	f001 fb19 	bl	d7d88 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d6756:	4628      	mov	r0, r5
   d6758:	f001 faf6 	bl	d7d48 <HAL_enable_irq>
   d675c:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d675e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6762:	f001 bac9 	b.w	d7cf8 <HAL_Delay_Microseconds>

000d6766 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d6766:	b538      	push	{r3, r4, r5, lr}
   d6768:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d676a:	f001 fae5 	bl	d7d38 <HAL_disable_irq>
   d676e:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d6770:	8820      	ldrh	r0, [r4, #0]
   d6772:	f7ff ff25 	bl	d65c0 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d6776:	2101      	movs	r1, #1
   d6778:	8820      	ldrh	r0, [r4, #0]
   d677a:	f001 fb05 	bl	d7d88 <HAL_Pin_Mode>
   d677e:	2001      	movs	r0, #1
   d6780:	f001 faba 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d6784:	2100      	movs	r1, #0
   d6786:	8820      	ldrh	r0, [r4, #0]
   d6788:	f001 fafe 	bl	d7d88 <HAL_Pin_Mode>
   d678c:	200d      	movs	r0, #13
   d678e:	f001 fab3 	bl	d7cf8 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d6792:	8820      	ldrh	r0, [r4, #0]
   d6794:	f7ff ff48 	bl	d6628 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d6798:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d679a:	4628      	mov	r0, r5
   d679c:	f001 fad4 	bl	d7d48 <HAL_enable_irq>
   d67a0:	202e      	movs	r0, #46	; 0x2e
   d67a2:	f001 faa9 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d67a6:	4620      	mov	r0, r4
   d67a8:	bd38      	pop	{r3, r4, r5, pc}

000d67aa <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d67aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67ae:	4605      	mov	r5, r0
   d67b0:	4688      	mov	r8, r1
   d67b2:	4617      	mov	r7, r2
   d67b4:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d67b6:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d67b8:	ea18 0f04 	tst.w	r8, r4
   d67bc:	bf14      	ite	ne
   d67be:	2101      	movne	r1, #1
   d67c0:	2100      	moveq	r1, #0
   d67c2:	4628      	mov	r0, r5
   d67c4:	f7ff ff9b 	bl	d66fe <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d67c8:	0064      	lsls	r4, r4, #1
   d67ca:	3e01      	subs	r6, #1
   d67cc:	b2e4      	uxtb	r4, r4
   d67ce:	d1f3      	bne.n	d67b8 <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
   d67d0:	b167      	cbz	r7, d67ec <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d67d2:	f002 fb4f 	bl	d8e74 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d67d6:	8828      	ldrh	r0, [r5, #0]
   d67d8:	f7ff ff0c 	bl	d65f4 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d67dc:	8828      	ldrh	r0, [r5, #0]
   d67de:	2101      	movs	r1, #1
   d67e0:	f001 fad2 	bl	d7d88 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d67e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
   d67e8:	f002 bb46 	b.w	d8e78 <_Z10interruptsv>
   d67ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d67f0 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d67f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67f2:	4607      	mov	r7, r0
   d67f4:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d67f6:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d67f8:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d67fa:	4638      	mov	r0, r7
   d67fc:	f7ff ffb3 	bl	d6766 <_ZN7OneWire8read_bitEv>
   d6800:	b100      	cbz	r0, d6804 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d6802:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d6804:	0064      	lsls	r4, r4, #1
   d6806:	3e01      	subs	r6, #1
   d6808:	b2e4      	uxtb	r4, r4
   d680a:	d1f6      	bne.n	d67fa <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
   d680c:	4628      	mov	r0, r5
   d680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6810 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d6810:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d6812:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d6814:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
   d6816:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d6818:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
   d681a:	f7ff ffc6 	bl	d67aa <_ZN7OneWire5writeEhh>
   d681e:	1e65      	subs	r5, r4, #1
   d6820:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
   d6822:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d6826:	2200      	movs	r2, #0
   d6828:	4630      	mov	r0, r6
   d682a:	f7ff ffbe 	bl	d67aa <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
   d682e:	42a5      	cmp	r5, r4
   d6830:	d1f7      	bne.n	d6822 <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
   d6832:	bd70      	pop	{r4, r5, r6, pc}

000d6834 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d6834:	2200      	movs	r2, #0
   d6836:	21cc      	movs	r1, #204	; 0xcc
   d6838:	f7ff bfb7 	b.w	d67aa <_ZN7OneWire5writeEhh>

000d683c <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d683c:	2300      	movs	r3, #0
   d683e:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d6840:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d6842:	72c3      	strb	r3, [r0, #11]
   d6844:	f100 020a 	add.w	r2, r0, #10
   d6848:	3002      	adds	r0, #2

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d684a:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
   d684e:	4282      	cmp	r2, r0
   d6850:	d1fb      	bne.n	d684a <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
   d6852:	4770      	bx	lr

000d6854 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d6854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d6858:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d685a:	4604      	mov	r4, r0
   d685c:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d685e:	2d00      	cmp	r5, #0
   d6860:	d15e      	bne.n	d6920 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
   d6862:	f7ff ff0d 	bl	d6680 <_ZN7OneWire5resetEv>
   d6866:	b920      	cbnz	r0, d6872 <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
   d6868:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d686a:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d686c:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d6872:	462a      	mov	r2, r5
   d6874:	21f0      	movs	r1, #240	; 0xf0
   d6876:	4620      	mov	r0, r4
   d6878:	f7ff ff97 	bl	d67aa <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d687c:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d687e:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d6880:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d6882:	4620      	mov	r0, r4
   d6884:	f7ff ff6f 	bl	d6766 <_ZN7OneWire8read_bitEv>
   d6888:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d688a:	4620      	mov	r0, r4
   d688c:	f7ff ff6b 	bl	d6766 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d6890:	f1b9 0f01 	cmp.w	r9, #1
   d6894:	d102      	bne.n	d689c <_ZN7OneWire6searchEPh+0x48>
   d6896:	2801      	cmp	r0, #1
   d6898:	d11b      	bne.n	d68d2 <_ZN7OneWire6searchEPh+0x7e>
   d689a:	e037      	b.n	d690c <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
   d689c:	4581      	cmp	r9, r0
   d689e:	eb04 0305 	add.w	r3, r4, r5
   d68a2:	d11e      	bne.n	d68e2 <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d68a4:	7aa2      	ldrb	r2, [r4, #10]
   d68a6:	4297      	cmp	r7, r2
   d68a8:	d207      	bcs.n	d68ba <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d68aa:	789a      	ldrb	r2, [r3, #2]
   d68ac:	4216      	tst	r6, r2
   d68ae:	bf14      	ite	ne
   d68b0:	f04f 0901 	movne.w	r9, #1
   d68b4:	f04f 0900 	moveq.w	r9, #0
   d68b8:	e004      	b.n	d68c4 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d68ba:	bf0c      	ite	eq
   d68bc:	f04f 0901 	moveq.w	r9, #1
   d68c0:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
   d68c4:	f1b9 0f00 	cmp.w	r9, #0
   d68c8:	d103      	bne.n	d68d2 <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d68ca:	2f08      	cmp	r7, #8
   d68cc:	d808      	bhi.n	d68e0 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d68ce:	72e7      	strb	r7, [r4, #11]
   d68d0:	e006      	b.n	d68e0 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d68d2:	1962      	adds	r2, r4, r5
   d68d4:	f04f 0901 	mov.w	r9, #1
   d68d8:	7893      	ldrb	r3, [r2, #2]
   d68da:	4333      	orrs	r3, r6
   d68dc:	7093      	strb	r3, [r2, #2]
   d68de:	e004      	b.n	d68ea <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d68e0:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d68e2:	789a      	ldrb	r2, [r3, #2]
   d68e4:	ea22 0206 	bic.w	r2, r2, r6
   d68e8:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d68ea:	4649      	mov	r1, r9
   d68ec:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d68ee:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d68f0:	f7ff ff05 	bl	d66fe <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d68f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d68f8:	bf04      	itt	eq
   d68fa:	3501      	addeq	r5, #1
   d68fc:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d68fe:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d6902:	bf08      	it	eq
   d6904:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d6906:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d6908:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d690a:	d9ba      	bls.n	d6882 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d690c:	2f40      	cmp	r7, #64	; 0x40
   d690e:	d907      	bls.n	d6920 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d6910:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d6914:	f1ba 0f00 	cmp.w	sl, #0
   d6918:	d112      	bne.n	d6940 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d691a:	2301      	movs	r3, #1
   d691c:	7323      	strb	r3, [r4, #12]
   d691e:	e00f      	b.n	d6940 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d6920:	2000      	movs	r0, #0
   d6922:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d6924:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d6926:	72e0      	strb	r0, [r4, #11]
   d6928:	1c63      	adds	r3, r4, #1
   d692a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d692e:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
   d6930:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d6934:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d6938:	42a3      	cmp	r3, r4
   d693a:	d1f9      	bne.n	d6930 <_ZN7OneWire6searchEPh+0xdc>
   d693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
   d6940:	78a3      	ldrb	r3, [r4, #2]
   d6942:	2b00      	cmp	r3, #0
   d6944:	d0ec      	beq.n	d6920 <_ZN7OneWire6searchEPh+0xcc>
   d6946:	2001      	movs	r0, #1
   d6948:	e7ee      	b.n	d6928 <_ZN7OneWire6searchEPh+0xd4>

000d694a <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d694a:	b530      	push	{r4, r5, lr}
   d694c:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d694e:	2000      	movs	r0, #0

    while (len--)
   d6950:	3901      	subs	r1, #1
   d6952:	b2c9      	uxtb	r1, r1
   d6954:	29ff      	cmp	r1, #255	; 0xff
   d6956:	d013      	beq.n	d6980 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
   d6958:	f815 4b01 	ldrb.w	r4, [r5], #1
   d695c:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d695e:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
   d6962:	f013 0f01 	tst.w	r3, #1
   d6966:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d696a:	bf1c      	itt	ne
   d696c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d6970:	b2d8      	uxtbne	r0, r3
   d6972:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d6974:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
   d6978:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
   d697c:	d1ef      	bne.n	d695e <_ZN7OneWire4crc8EPhh+0x14>
   d697e:	e7e7      	b.n	d6950 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
   d6980:	bd30      	pop	{r4, r5, pc}
	...

000d6984 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d6984:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d6986:	f001 f9f7 	bl	d7d78 <HAL_Pin_Map>
   d698a:	4b01      	ldr	r3, [pc, #4]	; (d6990 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d698c:	6018      	str	r0, [r3, #0]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	2003e070 	.word	0x2003e070

000d6994 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6994:	6842      	ldr	r2, [r0, #4]
   d6996:	6803      	ldr	r3, [r0, #0]
   d6998:	1050      	asrs	r0, r2, #1
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
   d699a:	f012 0f01 	tst.w	r2, #1
   d699e:	bf18      	it	ne
   d69a0:	580a      	ldrne	r2, [r1, r0]
   d69a2:	4408      	add	r0, r1
   d69a4:	bf18      	it	ne
   d69a6:	58d3      	ldrne	r3, [r2, r3]
   d69a8:	4718      	bx	r3

000d69aa <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d69aa:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d69ac:	2301      	movs	r3, #1
   d69ae:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d69b0:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d69b2:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d69b4:	b10b      	cbz	r3, d69ba <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d69b6:	68c0      	ldr	r0, [r0, #12]
   d69b8:	e006      	b.n	d69c8 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d69ba:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d69bc:	b128      	cbz	r0, d69ca <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69be:	6883      	ldr	r3, [r0, #8]
   d69c0:	b90b      	cbnz	r3, d69c6 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d69c2:	f003 fbda 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69c6:	68c3      	ldr	r3, [r0, #12]
   d69c8:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d69ca:	2301      	movs	r3, #1
   d69cc:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d69ce:	2000      	movs	r0, #0
    }
   d69d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d69d4:	f001 b960 	b.w	d7c98 <os_thread_exit>

000d69d8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d69d8:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d69da:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
   d69dc:	d101      	bne.n	d69e2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d69de:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
   d69e0:	e005      	b.n	d69ee <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d69e2:	2a02      	cmp	r2, #2
   d69e4:	d103      	bne.n	d69ee <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d69e6:	b110      	cbz	r0, d69ee <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
   d69e8:	c903      	ldmia	r1, {r0, r1}
   d69ea:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d69ee:	2000      	movs	r0, #0
   d69f0:	4770      	bx	lr

000d69f2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d69f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d69f4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d69f6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d69f8:	b113      	cbz	r3, d6a00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d69fa:	2203      	movs	r2, #3
   d69fc:	4601      	mov	r1, r0
   d69fe:	4798      	blx	r3
    }
   d6a00:	4620      	mov	r0, r4
   d6a02:	bd10      	pop	{r4, pc}

000d6a04 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6a04:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6a08:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6a0c:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
   d6a0e:	3008      	adds	r0, #8
   d6a10:	f001 f91a 	bl	d7c48 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6a14:	2004      	movs	r0, #4
   d6a16:	f7fd fb40 	bl	d409a <_Znwj>
   d6a1a:	4604      	mov	r4, r0
   d6a1c:	2800      	cmp	r0, #0
   d6a1e:	d035      	beq.n	d6a8c <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6a20:	491c      	ldr	r1, [pc, #112]	; (d6a94 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
   d6a22:	2014      	movs	r0, #20
   d6a24:	f003 fb98 	bl	da158 <_ZnwjRKSt9nothrow_t>
   d6a28:	b130      	cbz	r0, d6a38 <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a2a:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d6a2c:	7403      	strb	r3, [r0, #16]
   d6a2e:	6003      	str	r3, [r0, #0]
   d6a30:	6043      	str	r3, [r0, #4]
   d6a32:	6083      	str	r3, [r0, #8]
   d6a34:	60c3      	str	r3, [r0, #12]
   d6a36:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a38:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d6a3a:	b1b0      	cbz	r0, d6a6a <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
   d6a3c:	4b16      	ldr	r3, [pc, #88]	; (d6a98 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6a3e:	6083      	str	r3, [r0, #8]
   d6a40:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6a42:	4916      	ldr	r1, [pc, #88]	; (d6a9c <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d6a44:	60dd      	str	r5, [r3, #12]
   d6a46:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6a4c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6a50:	2202      	movs	r2, #2
   d6a52:	4b13      	ldr	r3, [pc, #76]	; (d6aa0 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d6a54:	3004      	adds	r0, #4
   d6a56:	f001 f8c7 	bl	d7be8 <os_thread_create>
   d6a5a:	b930      	cbnz	r0, d6a6a <_ZN21PublishQueueAsyncBase5setupEv+0x66>
   d6a5c:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d6a5e:	7c1b      	ldrb	r3, [r3, #16]
   d6a60:	b9a3      	cbnz	r3, d6a8c <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d6a62:	2001      	movs	r0, #1
   d6a64:	f001 f940 	bl	d7ce8 <HAL_Delay_Milliseconds>
   d6a68:	e7f8      	b.n	d6a5c <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a6a:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6a6c:	2300      	movs	r3, #0
   d6a6e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6a70:	b166      	cbz	r6, d6a8c <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a72:	6837      	ldr	r7, [r6, #0]
   d6a74:	b137      	cbz	r7, d6a84 <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a76:	4638      	mov	r0, r7
   d6a78:	f7ff ffbb 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a7c:	2110      	movs	r1, #16
   d6a7e:	4638      	mov	r0, r7
   d6a80:	f003 fb5f 	bl	da142 <_ZdlPvj>
   d6a84:	2114      	movs	r1, #20
   d6a86:	4630      	mov	r0, r6
   d6a88:	f003 fb5b 	bl	da142 <_ZdlPvj>
   d6a8c:	606c      	str	r4, [r5, #4]
}
   d6a8e:	b003      	add	sp, #12
   d6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a92:	bf00      	nop
   d6a94:	000dd91c 	.word	0x000dd91c
   d6a98:	000d6cb7 	.word	0x000d6cb7
   d6a9c:	000dd084 	.word	0x000dd084
   d6aa0:	000d69ab 	.word	0x000d69ab

000d6aa4 <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6aa4:	f247 5130 	movw	r1, #30000	; 0x7530
   d6aa8:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6aaa:	490a      	ldr	r1, [pc, #40]	; (d6ad4 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6aac:	4a0a      	ldr	r2, [pc, #40]	; (d6ad8 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6aae:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6ab0:	490a      	ldr	r1, [pc, #40]	; (d6adc <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
   d6ab2:	6002      	str	r2, [r0, #0]
   d6ab4:	61c1      	str	r1, [r0, #28]
   d6ab6:	2200      	movs	r2, #0
	    _M_manager = &_My_handler::_M_manager;
   d6ab8:	4909      	ldr	r1, [pc, #36]	; (d6ae0 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
   d6aba:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6abc:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6abe:	6181      	str	r1, [r0, #24]
   d6ac0:	6202      	str	r2, [r0, #32]
   d6ac2:	6242      	str	r2, [r0, #36]	; 0x24
   d6ac4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   d6ac8:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   d6acc:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
   d6ad0:	4770      	bx	lr
   d6ad2:	bf00      	nop
   d6ad4:	000d6e11 	.word	0x000d6e11
   d6ad8:	000dd148 	.word	0x000dd148
   d6adc:	000d6995 	.word	0x000d6995
   d6ae0:	000d69d9 	.word	0x000d69d9

000d6ae4 <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6ae4:	b510      	push	{r4, lr}
   d6ae6:	4b04      	ldr	r3, [pc, #16]	; (d6af8 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6ae8:	4604      	mov	r4, r0
   d6aea:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6aee:	f7ff ff80 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>

}
   d6af2:	4620      	mov	r0, r4
   d6af4:	bd10      	pop	{r4, pc}
   d6af6:	bf00      	nop
   d6af8:	000dd148 	.word	0x000dd148

000d6afc <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6afc:	b510      	push	{r4, lr}
   d6afe:	4b03      	ldr	r3, [pc, #12]	; (d6b0c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6b00:	6003      	str	r3, [r0, #0]
   d6b02:	4604      	mov	r4, r0
   d6b04:	f7ff ffee 	bl	d6ae4 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6b08:	4620      	mov	r0, r4
   d6b0a:	bd10      	pop	{r4, pc}
   d6b0c:	000dd064 	.word	0x000dd064

000d6b10 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6b10:	b510      	push	{r4, lr}
   d6b12:	4604      	mov	r4, r0

}
   d6b14:	f7ff fff2 	bl	d6afc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6b18:	4620      	mov	r0, r4
   d6b1a:	2138      	movs	r1, #56	; 0x38
   d6b1c:	f003 fb11 	bl	da142 <_ZdlPvj>
   d6b20:	4620      	mov	r0, r4
   d6b22:	bd10      	pop	{r4, pc}

000d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
   d6b24:	6880      	ldr	r0, [r0, #8]
   d6b26:	f001 b897 	b.w	d7c58 <os_mutex_lock>

000d6b2a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
   d6b2a:	6880      	ldr	r0, [r0, #8]
   d6b2c:	f001 b89c 	b.w	d7c68 <os_mutex_unlock>

000d6b30 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6b30:	b510      	push	{r4, lr}
   d6b32:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6b34:	6800      	ldr	r0, [r0, #0]
   d6b36:	f7ff fff8 	bl	d6b2a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6b3a:	4620      	mov	r0, r4
   d6b3c:	bd10      	pop	{r4, pc}

000d6b3e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6b3e:	b513      	push	{r0, r1, r4, lr}
   d6b40:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6b42:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6b44:	f7ff ffee 	bl	d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6b4a:	88dc      	ldrh	r4, [r3, #6]
   d6b4c:	b2a4      	uxth	r4, r4
   d6b4e:	b10c      	cbz	r4, d6b54 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6b50:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6b54:	a801      	add	r0, sp, #4
   d6b56:	f7ff ffeb 	bl	d6b30 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	b002      	add	sp, #8
   d6b5e:	bd10      	pop	{r4, pc}

000d6b60 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6b60:	b513      	push	{r0, r1, r4, lr}
   d6b62:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6b64:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6b66:	f7ff ffdd 	bl	d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6b6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6b6e:	b91b      	cbnz	r3, d6b78 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6b70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
   d6b72:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
   d6b74:	80d3      	strh	r3, [r2, #6]
   d6b76:	e000      	b.n	d6b7a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
   d6b78:	2400      	movs	r4, #0

	StMutexLock lock(this);
   d6b7a:	a801      	add	r0, sp, #4
   d6b7c:	f7ff ffd8 	bl	d6b30 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
   d6b80:	4620      	mov	r0, r4
   d6b82:	b002      	add	sp, #8
   d6b84:	bd10      	pop	{r4, pc}

000d6b86 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6b86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6b88:	ac02      	add	r4, sp, #8
   d6b8a:	4605      	mov	r5, r0
   d6b8c:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
   d6b90:	f7ff ffc8 	bl	d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6b94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6b96:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6b98:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6b9a:	f7ff ffc9 	bl	d6b30 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6b9e:	4628      	mov	r0, r5
   d6ba0:	b003      	add	sp, #12
   d6ba2:	bd30      	pop	{r4, r5, pc}

000d6ba4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ba8:	469a      	mov	sl, r3
   d6baa:	b086      	sub	sp, #24

	if (!haveSetup) {
   d6bac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6bb0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d6bb4:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6bb8:	4604      	mov	r4, r0
   d6bba:	4688      	mov	r8, r1
   d6bbc:	4616      	mov	r6, r2

	if (!haveSetup) {
   d6bbe:	b913      	cbnz	r3, d6bc6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6bc0:	6803      	ldr	r3, [r0, #0]
   d6bc2:	689b      	ldr	r3, [r3, #8]
   d6bc4:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
   d6bc6:	4b31      	ldr	r3, [pc, #196]	; (d6c8c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6bc8:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
   d6bca:	2e00      	cmp	r6, #0
   d6bcc:	bf08      	it	eq
   d6bce:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6bd0:	f005 faf8 	bl	dc1c4 <strlen>
   d6bd4:	4605      	mov	r5, r0
   d6bd6:	4630      	mov	r0, r6
   d6bd8:	f005 faf4 	bl	dc1c4 <strlen>
   d6bdc:	4428      	add	r0, r5
   d6bde:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6be2:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6be4:	bf1c      	itt	ne
   d6be6:	f025 0503 	bicne.w	r5, r5, #3
   d6bea:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6bec:	4633      	mov	r3, r6
   d6bee:	9503      	str	r5, [sp, #12]
   d6bf0:	9702      	str	r7, [sp, #8]
   d6bf2:	f8cd 9004 	str.w	r9, [sp, #4]
   d6bf6:	f8cd a000 	str.w	sl, [sp]
   d6bfa:	4642      	mov	r2, r8
   d6bfc:	4924      	ldr	r1, [pc, #144]	; (d6c90 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6bfe:	4825      	ldr	r0, [pc, #148]	; (d6c94 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6c00:	f7fd fb55 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6c04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6c06:	3b08      	subs	r3, #8
   d6c08:	429d      	cmp	r5, r3
   d6c0a:	d90f      	bls.n	d6c2c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
   d6c0c:	2400      	movs	r4, #0
   d6c0e:	e038      	b.n	d6c82 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
   d6c10:	88cb      	ldrh	r3, [r1, #6]
   d6c12:	2b01      	cmp	r3, #1
   d6c14:	d031      	beq.n	d6c7a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
   d6c16:	a805      	add	r0, sp, #20
   d6c18:	f7ff ff8a 	bl	d6b30 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
   d6c1c:	6823      	ldr	r3, [r4, #0]
   d6c1e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6c22:	699b      	ldr	r3, [r3, #24]
   d6c24:	4620      	mov	r0, r4
   d6c26:	4798      	blx	r3
   d6c28:	2800      	cmp	r0, #0
   d6c2a:	d0ef      	beq.n	d6c0c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
   d6c2c:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6c2e:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6c30:	f7ff ff78 	bl	d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6c34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
   d6c36:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6c38:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d6c3a:	440b      	add	r3, r1
   d6c3c:	1a9b      	subs	r3, r3, r2
   d6c3e:	429d      	cmp	r5, r3
   d6c40:	d8e6      	bhi.n	d6c10 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
   d6c42:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
   d6c46:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
   d6c4a:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
   d6c4c:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6c4e:	3708      	adds	r7, #8

				strcpy(cp, eventName);
   d6c50:	4641      	mov	r1, r8
   d6c52:	4638      	mov	r0, r7
   d6c54:	f004 fd7e 	bl	db754 <strcpy>
				cp += strlen(cp) + 1;
   d6c58:	4638      	mov	r0, r7
   d6c5a:	f005 fab3 	bl	dc1c4 <strlen>

				strcpy(cp, data);
   d6c5e:	3001      	adds	r0, #1
   d6c60:	4631      	mov	r1, r6
   d6c62:	4438      	add	r0, r7
   d6c64:	f004 fd76 	bl	db754 <strcpy>

				nextFree += size;
   d6c68:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6c6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
   d6c6c:	4428      	add	r0, r5
   d6c6e:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
   d6c70:	88d3      	ldrh	r3, [r2, #6]
   d6c72:	3301      	adds	r3, #1
   d6c74:	80d3      	strh	r3, [r2, #6]
				return true;
   d6c76:	2401      	movs	r4, #1
   d6c78:	e000      	b.n	d6c7c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
   d6c7a:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
   d6c7c:	a805      	add	r0, sp, #20
   d6c7e:	f7ff ff57 	bl	d6b30 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
   d6c82:	4620      	mov	r0, r4
   d6c84:	b006      	add	sp, #24
   d6c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c8a:	bf00      	nop
   d6c8c:	000dd56a 	.word	0x000dd56a
   d6c90:	000dd096 	.word	0x000dd096
   d6c94:	2003e074 	.word	0x2003e074

000d6c98 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4604      	mov	r4, r0
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c9c:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ca0:	69a3      	ldr	r3, [r4, #24]
   d6ca2:	b90b      	cbnz	r3, d6ca8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6ca4:	f003 fa69 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ca8:	69e3      	ldr	r3, [r4, #28]
   d6caa:	4621      	mov	r1, r4
   d6cac:	4628      	mov	r0, r5
   d6cae:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
   d6cb0:	f000 ffaa 	bl	d7c08 <os_thread_yield>
   d6cb4:	e7f4      	b.n	d6ca0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6cb6 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6cb6:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6cb8:	f7ff ffee 	bl	d6c98 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6cbc <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6cbc:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
   d6cbe:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6cc2:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f005 fa7d 	bl	dc1c4 <strlen>
   d6cca:	3001      	adds	r0, #1
   d6ccc:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6cce:	4620      	mov	r0, r4
   d6cd0:	f005 fa78 	bl	dc1c4 <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6cd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6cd6:	3001      	adds	r0, #1
   d6cd8:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6cda:	1ac3      	subs	r3, r0, r3
   d6cdc:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6ce0:	bf1c      	itt	ne
   d6ce2:	f1c3 0304 	rsbne	r3, r3, #4
   d6ce6:	18c0      	addne	r0, r0, r3
	}


	return start;
}
   d6ce8:	bd38      	pop	{r3, r4, r5, pc}

000d6cea <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6cea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6cee:	4605      	mov	r5, r0
   d6cf0:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6cf2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6cf4:	f7ff ff16 	bl	d6b24 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6cf8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6cfa:	f106 0708 	add.w	r7, r6, #8
   d6cfe:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
   d6d00:	f1b8 0f00 	cmp.w	r8, #0
   d6d04:	d007      	beq.n	d6d16 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
   d6d06:	2c01      	cmp	r4, #1
   d6d08:	d91c      	bls.n	d6d44 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
   d6d0a:	4639      	mov	r1, r7
   d6d0c:	4628      	mov	r0, r5
   d6d0e:	f7ff ffd5 	bl	d6cbc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6d12:	4607      	mov	r7, r0
   d6d14:	e000      	b.n	d6d18 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
   d6d16:	b1b4      	cbz	r4, d6d46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6d18:	4639      	mov	r1, r7
   d6d1a:	4628      	mov	r0, r5
   d6d1c:	f7ff ffce 	bl	d6cbc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
   d6d20:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   d6d22:	4432      	add	r2, r6
	if (after > 0) {
   d6d24:	1a12      	subs	r2, r2, r0
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6d26:	4601      	mov	r1, r0
	size_t len = next - start;
   d6d28:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
   d6d2c:	d002      	beq.n	d6d34 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
   d6d2e:	4638      	mov	r0, r7
   d6d30:	f004 fa6d 	bl	db20e <memmove>
	}

	nextFree -= len;
   d6d34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d6d36:	1b1b      	subs	r3, r3, r4
   d6d38:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
   d6d3a:	88f3      	ldrh	r3, [r6, #6]
   d6d3c:	3b01      	subs	r3, #1
   d6d3e:	80f3      	strh	r3, [r6, #6]


	return true;
   d6d40:	2401      	movs	r4, #1
   d6d42:	e000      	b.n	d6d46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
   d6d44:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6d46:	a801      	add	r0, sp, #4
   d6d48:	f7ff fef2 	bl	d6b30 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	b002      	add	sp, #8
   d6d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d54 <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d58:	4604      	mov	r4, r0
   d6d5a:	460d      	mov	r5, r1
   d6d5c:	4690      	mov	r8, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6d5e:	2600      	movs	r6, #0
   d6d60:	f7ff fea0 	bl	d6aa4 <_ZN21PublishQueueAsyncBaseC1Ev>

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6d64:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6d66:	4b15      	ldr	r3, [pc, #84]	; (d6dbc <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
   d6d68:	6023      	str	r3, [r4, #0]
   d6d6a:	62e5      	str	r5, [r4, #44]	; 0x2c
   d6d6c:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
   d6d70:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6d72:	4b13      	ldr	r3, [pc, #76]	; (d6dc0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
   d6d74:	f857 2b08 	ldr.w	r2, [r7], #8
   d6d78:	429a      	cmp	r2, r3
   d6d7a:	4699      	mov	r9, r3
   d6d7c:	d114      	bne.n	d6da8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6d7e:	88ab      	ldrh	r3, [r5, #4]
   d6d80:	b29b      	uxth	r3, r3
   d6d82:	4598      	cmp	r8, r3
   d6d84:	d110      	bne.n	d6da8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6d86:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6d8a:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6d8c:	88eb      	ldrh	r3, [r5, #6]
   d6d8e:	b2b2      	uxth	r2, r6
   d6d90:	b29b      	uxth	r3, r3
   d6d92:	429a      	cmp	r2, r3
   d6d94:	d20f      	bcs.n	d6db6 <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
   d6d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6d98:	4620      	mov	r0, r4
   d6d9a:	f7ff ff8f 	bl	d6cbc <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6d9e:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
   d6da0:	6360      	str	r0, [r4, #52]	; 0x34
   d6da2:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
   d6da6:	d2f1      	bcs.n	d6d8c <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
   d6da8:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6daa:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
   d6dae:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
   d6db2:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6db4:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
   d6db6:	4620      	mov	r0, r4
   d6db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dbc:	000dd064 	.word	0x000dd064
   d6dc0:	d19cab61 	.word	0xd19cab61

000d6dc4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6dc4:	b510      	push	{r4, lr}
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6dc6:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6dca:	b086      	sub	sp, #24
   d6dcc:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6dce:	9202      	str	r2, [sp, #8]
   d6dd0:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dd2:	ab02      	add	r3, sp, #8
   d6dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6dd8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6de0:	68a2      	ldr	r2, [r4, #8]
   d6de2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6de6:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dea:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dec:	4a06      	ldr	r2, [pc, #24]	; (d6e08 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
   d6dee:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6df0:	68e2      	ldr	r2, [r4, #12]
   d6df2:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6df4:	4a05      	ldr	r2, [pc, #20]	; (d6e0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
   d6df6:	60e2      	str	r2, [r4, #12]
   d6df8:	e884 0003 	stmia.w	r4, {r0, r1}
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dfc:	4618      	mov	r0, r3
   d6dfe:	f7ff fdf8 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d6e02:	4620      	mov	r0, r4
   d6e04:	b006      	add	sp, #24
   d6e06:	bd10      	pop	{r4, pc}
   d6e08:	000d69d9 	.word	0x000d69d9
   d6e0c:	000d6995 	.word	0x000d6995

000d6e10 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
   d6e10:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6e12:	4b05      	ldr	r3, [pc, #20]	; (d6e28 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6e14:	9300      	str	r3, [sp, #0]
   d6e16:	4669      	mov	r1, sp
   d6e18:	2300      	movs	r3, #0
   d6e1a:	3010      	adds	r0, #16
   d6e1c:	9301      	str	r3, [sp, #4]
   d6e1e:	f7ff ffd1 	bl	d6dc4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
   d6e22:	b003      	add	sp, #12
   d6e24:	f85d fb04 	ldr.w	pc, [sp], #4
   d6e28:	000d6e59 	.word	0x000d6e59

000d6e2c <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   d6e2c:	b513      	push	{r0, r1, r4, lr}
   d6e2e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6e30:	f000 ff6a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6e36:	1ac0      	subs	r0, r0, r3
   d6e38:	68e3      	ldr	r3, [r4, #12]
   d6e3a:	4298      	cmp	r0, r3
   d6e3c:	d308      	bcc.n	d6e50 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6e3e:	4b05      	ldr	r3, [pc, #20]	; (d6e54 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6e40:	9300      	str	r3, [sp, #0]
   d6e42:	4669      	mov	r1, sp
   d6e44:	2300      	movs	r3, #0
   d6e46:	f104 0010 	add.w	r0, r4, #16
   d6e4a:	9301      	str	r3, [sp, #4]
   d6e4c:	f7ff ffba 	bl	d6dc4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
   d6e50:	b002      	add	sp, #8
   d6e52:	bd10      	pop	{r4, pc}
   d6e54:	000d6e59 	.word	0x000d6e59

000d6e58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6e5c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6e60:	b086      	sub	sp, #24
   d6e62:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6e64:	2b00      	cmp	r3, #0
   d6e66:	d173      	bne.n	d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6e68:	f001 f9ae 	bl	d81c8 <spark_cloud_flag_connected>
   d6e6c:	2800      	cmp	r0, #0
   d6e6e:	d06f      	beq.n	d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
   d6e70:	f000 ff4a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d6e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6e76:	1ac0      	subs	r0, r0, r3
   d6e78:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6e7c:	4298      	cmp	r0, r3
   d6e7e:	d967      	bls.n	d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
   d6e80:	6823      	ldr	r3, [r4, #0]
   d6e82:	4620      	mov	r0, r4
   d6e84:	695b      	ldr	r3, [r3, #20]
   d6e86:	4798      	blx	r3
		if (data) {
   d6e88:	4605      	mov	r5, r0
   d6e8a:	2800      	cmp	r0, #0
   d6e8c:	d060      	beq.n	d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6e8e:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
   d6e92:	2301      	movs	r3, #1
   d6e94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6e98:	4630      	mov	r0, r6
   d6e9a:	f005 f993 	bl	dc1c4 <strlen>

			PublishFlags flags(PublishFlag(data->flags));
   d6e9e:	f895 8004 	ldrb.w	r8, [r5, #4]

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6ea2:	f8cd 8004 	str.w	r8, [sp, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6ea6:	3001      	adds	r0, #1
   d6ea8:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6eaa:	682b      	ldr	r3, [r5, #0]
   d6eac:	9300      	str	r3, [sp, #0]
   d6eae:	4632      	mov	r2, r6
   d6eb0:	463b      	mov	r3, r7
   d6eb2:	4929      	ldr	r1, [pc, #164]	; (d6f58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6eb4:	4829      	ldr	r0, [pc, #164]	; (d6f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6eb6:	f7fd f9fa 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6eba:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6ebc:	f88d 8000 	strb.w	r8, [sp]
   d6ec0:	463a      	mov	r2, r7
   d6ec2:	4631      	mov	r1, r6
   d6ec4:	a802      	add	r0, sp, #8
   d6ec6:	f001 fd59 	bl	d897c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6eca:	9d02      	ldr	r5, [sp, #8]
   d6ecc:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
   d6ece:	b91b      	cbnz	r3, d6ed8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6ed0:	2001      	movs	r0, #1
   d6ed2:	f001 fa59 	bl	d8388 <delay>
   d6ed6:	e7f8      	b.n	d6eca <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6ed8:	2000      	movs	r0, #0
   d6eda:	f001 f90f 	bl	d80fc <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d6ede:	b120      	cbz	r0, d6eea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6ee0:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6ee2:	b913      	cbnz	r3, d6eea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d6ee4:	f001 f958 	bl	d8198 <spark_process>
   d6ee8:	e7fa      	b.n	d6ee0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6eea:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
   d6eec:	2b01      	cmp	r3, #1
   d6eee:	d109      	bne.n	d6f04 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
   d6ef0:	491b      	ldr	r1, [pc, #108]	; (d6f60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6ef2:	481a      	ldr	r0, [pc, #104]	; (d6f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6ef4:	f7fd f9db 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6ef8:	6823      	ldr	r3, [r4, #0]
   d6efa:	2100      	movs	r1, #0
   d6efc:	699b      	ldr	r3, [r3, #24]
   d6efe:	4620      	mov	r0, r4
   d6f00:	4798      	blx	r3
   d6f02:	e00d      	b.n	d6f20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6f04:	4917      	ldr	r1, [pc, #92]	; (d6f64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6f06:	4815      	ldr	r0, [pc, #84]	; (d6f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6f08:	68e2      	ldr	r2, [r4, #12]
   d6f0a:	f7fd f9d0 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6f0e:	4b16      	ldr	r3, [pc, #88]	; (d6f68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6f10:	9304      	str	r3, [sp, #16]
   d6f12:	a904      	add	r1, sp, #16
   d6f14:	2300      	movs	r3, #0
   d6f16:	f104 0010 	add.w	r0, r4, #16
   d6f1a:	9305      	str	r3, [sp, #20]
   d6f1c:	f7ff ff52 	bl	d6dc4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
   d6f20:	2300      	movs	r3, #0
   d6f22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6f26:	f000 feef 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6f2a:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6f2c:	9c03      	ldr	r4, [sp, #12]
   d6f2e:	b17c      	cbz	r4, d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6f30:	6863      	ldr	r3, [r4, #4]
   d6f32:	3b01      	subs	r3, #1
   d6f34:	6063      	str	r3, [r4, #4]
   d6f36:	b95b      	cbnz	r3, d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
   d6f38:	6823      	ldr	r3, [r4, #0]
   d6f3a:	4620      	mov	r0, r4
   d6f3c:	689b      	ldr	r3, [r3, #8]
   d6f3e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6f40:	68a3      	ldr	r3, [r4, #8]
   d6f42:	3b01      	subs	r3, #1
   d6f44:	60a3      	str	r3, [r4, #8]
   d6f46:	b91b      	cbnz	r3, d6f50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
   d6f48:	6823      	ldr	r3, [r4, #0]
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	68db      	ldr	r3, [r3, #12]
   d6f4e:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
   d6f50:	b006      	add	sp, #24
   d6f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f56:	bf00      	nop
   d6f58:	000dd0d7 	.word	0x000dd0d7
   d6f5c:	2003e074 	.word	0x2003e074
   d6f60:	000dd0f8 	.word	0x000dd0f8
   d6f64:	000dd10f 	.word	0x000dd10f
   d6f68:	000d6e2d 	.word	0x000d6e2d

000d6f6c <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	f000 ff03 	bl	d7d78 <HAL_Pin_Map>
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <_GLOBAL__sub_I_pubqLogger+0x10>)
   d6f74:	4a02      	ldr	r2, [pc, #8]	; (d6f80 <_GLOBAL__sub_I_pubqLogger+0x14>)
   d6f76:	601a      	str	r2, [r3, #0]
   d6f78:	bd08      	pop	{r3, pc}
   d6f7a:	bf00      	nop
   d6f7c:	2003e074 	.word	0x2003e074
   d6f80:	000dd136 	.word	0x000dd136

000d6f84 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d6f84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6f86:	4602      	mov	r2, r0
   d6f88:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d6f8a:	7913      	ldrb	r3, [r2, #4]
   d6f8c:	6895      	ldr	r5, [r2, #8]
   d6f8e:	b133      	cbz	r3, d6f9e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d6f90:	b93d      	cbnz	r5, d6fa2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d6f92:	490c      	ldr	r1, [pc, #48]	; (d6fc4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d6f94:	b004      	add	sp, #16
   d6f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d6f9a:	f002 b971 	b.w	d9280 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d6f9e:	4b0a      	ldr	r3, [pc, #40]	; (d6fc8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d6fa0:	e000      	b.n	d6fa4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d6fa2:	4b0a      	ldr	r3, [pc, #40]	; (d6fcc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d6fa4:	7b16      	ldrb	r6, [r2, #12]
   d6fa6:	4c0a      	ldr	r4, [pc, #40]	; (d6fd0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d6fa8:	490a      	ldr	r1, [pc, #40]	; (d6fd4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6faa:	7b52      	ldrb	r2, [r2, #13]
   d6fac:	9202      	str	r2, [sp, #8]
   d6fae:	2e01      	cmp	r6, #1
   d6fb0:	bf08      	it	eq
   d6fb2:	4621      	moveq	r1, r4
   d6fb4:	9101      	str	r1, [sp, #4]
   d6fb6:	9500      	str	r5, [sp, #0]
   d6fb8:	4a07      	ldr	r2, [pc, #28]	; (d6fd8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d6fba:	2100      	movs	r1, #0
   d6fbc:	f002 fa67 	bl	d948e <_ZN5Print11printf_implEbPKcz>
  }
   d6fc0:	b004      	add	sp, #16
   d6fc2:	bd70      	pop	{r4, r5, r6, pc}
   d6fc4:	000dd185 	.word	0x000dd185
   d6fc8:	000dd56a 	.word	0x000dd56a
   d6fcc:	000dd174 	.word	0x000dd174
   d6fd0:	000dd17d 	.word	0x000dd17d
   d6fd4:	000dd181 	.word	0x000dd181
   d6fd8:	000dd19b 	.word	0x000dd19b

000d6fdc <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d6fdc:	b510      	push	{r4, lr}
   d6fde:	4b05      	ldr	r3, [pc, #20]	; (d6ff4 <_ZN12AssetTrackerD1Ev+0x18>)
   d6fe0:	4604      	mov	r4, r0
   d6fe2:	f840 3b20 	str.w	r3, [r0], #32
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fe6:	f7ff fd04 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
   d6fea:	4620      	mov	r0, r4
   d6fec:	f000 f9c2 	bl	d7374 <_ZN13LegacyAdapterD1Ev>

}
   d6ff0:	4620      	mov	r0, r4
   d6ff2:	bd10      	pop	{r4, pc}
   d6ff4:	000dd258 	.word	0x000dd258

000d6ff8 <_ZN12AssetTrackerD0Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d6ff8:	b510      	push	{r4, lr}
   d6ffa:	4604      	mov	r4, r0

}
   d6ffc:	f7ff ffee 	bl	d6fdc <_ZN12AssetTrackerD1Ev>
   d7000:	4620      	mov	r0, r4
   d7002:	2130      	movs	r1, #48	; 0x30
   d7004:	f003 f89d 	bl	da142 <_ZdlPvj>
   d7008:	4620      	mov	r0, r4
   d700a:	bd10      	pop	{r4, pc}

000d700c <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d700c:	6803      	ldr	r3, [r0, #0]
   d700e:	b2c9      	uxtb	r1, r1
   d7010:	689b      	ldr	r3, [r3, #8]
   d7012:	4718      	bx	r3

000d7014 <_ZN12AssetTrackerC1Ev>:
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d7014:	b538      	push	{r3, r4, r5, lr}
   d7016:	490b      	ldr	r1, [pc, #44]	; (d7044 <_ZN12AssetTrackerC1Ev+0x30>)
   d7018:	4604      	mov	r4, r0
   d701a:	2500      	movs	r5, #0
   d701c:	f000 f9b2 	bl	d7384 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d7020:	4b09      	ldr	r3, [pc, #36]	; (d7048 <_ZN12AssetTrackerC1Ev+0x34>)
   d7022:	6023      	str	r3, [r4, #0]
   d7024:	7225      	strb	r5, [r4, #8]

	void threadFunction();
	static void threadFunctionStatic(void *param);

	bool useWire = false;
	TwoWire &wire = Wire;
   d7026:	f003 f861 	bl	da0ec <_Z19__fetch_global_Wirev>
   d702a:	2342      	movs	r3, #66	; 0x42
   d702c:	7423      	strb	r3, [r4, #16]
   d702e:	60e0      	str	r0, [r4, #12]
	uint8_t wireAddr = 0x42;
	USARTSerial &serialPort = Serial1;
   d7030:	f002 fe80 	bl	d9d34 <_Z22__fetch_global_Serial1v>
	instance = this;
   d7034:	4b05      	ldr	r3, [pc, #20]	; (d704c <_ZN12AssetTrackerC1Ev+0x38>)
static uint8_t externalANT[]={0xB5,0x62,0x06,0x13,0x04,0x00,0x01,0x00,0xF0,0x7D,0x8B,0x2E};

AssetTracker *AssetTracker::instance = 0;


AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d7036:	6160      	str	r0, [r4, #20]
   d7038:	61a5      	str	r5, [r4, #24]
   d703a:	61e5      	str	r5, [r4, #28]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d703c:	62a5      	str	r5, [r4, #40]	; 0x28
	instance = this;
   d703e:	601c      	str	r4, [r3, #0]
}
   d7040:	4620      	mov	r0, r4
   d7042:	bd38      	pop	{r3, r4, r5, pc}
   d7044:	2003e0b0 	.word	0x2003e0b0
   d7048:	000dd258 	.word	0x000dd258
   d704c:	2003e084 	.word	0x2003e084

000d7050 <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d7050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d7052:	6985      	ldr	r5, [r0, #24]
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d7054:	4606      	mov	r6, r0
	if (thread == NULL) {
   d7056:	2d00      	cmp	r5, #0
   d7058:	d13b      	bne.n	d70d2 <_ZN12AssetTracker17startThreadedModeEv+0x82>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d705a:	2004      	movs	r0, #4
   d705c:	f7fd f81d 	bl	d409a <_Znwj>
   d7060:	4604      	mov	r4, r0
   d7062:	2800      	cmp	r0, #0
   d7064:	d034      	beq.n	d70d0 <_ZN12AssetTracker17startThreadedModeEv+0x80>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d7066:	491c      	ldr	r1, [pc, #112]	; (d70d8 <_ZN12AssetTracker17startThreadedModeEv+0x88>)
   d7068:	2014      	movs	r0, #20
   d706a:	f003 f875 	bl	da158 <_ZnwjRKSt9nothrow_t>
   d706e:	b128      	cbz	r0, d707c <_ZN12AssetTracker17startThreadedModeEv+0x2c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7070:	7405      	strb	r5, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7072:	6005      	str	r5, [r0, #0]
   d7074:	6045      	str	r5, [r0, #4]
   d7076:	6085      	str	r5, [r0, #8]
   d7078:	60c5      	str	r5, [r0, #12]
   d707a:	7445      	strb	r5, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d707c:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d707e:	b1b0      	cbz	r0, d70ae <_ZN12AssetTracker17startThreadedModeEv+0x5e>
            goto error;
        }
        d_->func = function;
   d7080:	4b16      	ldr	r3, [pc, #88]	; (d70dc <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d7082:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7084:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7086:	4916      	ldr	r1, [pc, #88]	; (d70e0 <_ZN12AssetTracker17startThreadedModeEv+0x90>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d7088:	60de      	str	r6, [r3, #12]
   d708a:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d708c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7090:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7094:	2202      	movs	r2, #2
   d7096:	4b13      	ldr	r3, [pc, #76]	; (d70e4 <_ZN12AssetTracker17startThreadedModeEv+0x94>)
   d7098:	3004      	adds	r0, #4
   d709a:	f000 fda5 	bl	d7be8 <os_thread_create>
   d709e:	b930      	cbnz	r0, d70ae <_ZN12AssetTracker17startThreadedModeEv+0x5e>
   d70a0:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d70a2:	7c1b      	ldrb	r3, [r3, #16]
   d70a4:	b9a3      	cbnz	r3, d70d0 <_ZN12AssetTracker17startThreadedModeEv+0x80>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d70a6:	2001      	movs	r0, #1
   d70a8:	f000 fe1e 	bl	d7ce8 <HAL_Delay_Milliseconds>
   d70ac:	e7f8      	b.n	d70a0 <_ZN12AssetTracker17startThreadedModeEv+0x50>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d70ae:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d70b0:	2300      	movs	r3, #0
   d70b2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d70b4:	b165      	cbz	r5, d70d0 <_ZN12AssetTracker17startThreadedModeEv+0x80>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d70b6:	682f      	ldr	r7, [r5, #0]
   d70b8:	b137      	cbz	r7, d70c8 <_ZN12AssetTracker17startThreadedModeEv+0x78>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d70ba:	4638      	mov	r0, r7
   d70bc:	f7ff fc99 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d70c0:	2110      	movs	r1, #16
   d70c2:	4638      	mov	r0, r7
   d70c4:	f003 f83d 	bl	da142 <_ZdlPvj>
   d70c8:	2114      	movs	r1, #20
   d70ca:	4628      	mov	r0, r5
   d70cc:	f003 f839 	bl	da142 <_ZdlPvj>
   d70d0:	61b4      	str	r4, [r6, #24]
	}
}
   d70d2:	b003      	add	sp, #12
   d70d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70d6:	bf00      	nop
   d70d8:	000dd91c 	.word	0x000dd91c
   d70dc:	000d72e1 	.word	0x000d72e1
   d70e0:	000dd1b9 	.word	0x000dd1b9
   d70e4:	000d69ab 	.word	0x000d69ab

000d70e8 <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d70e8:	b510      	push	{r4, lr}
	useWire = true;
   d70ea:	2301      	movs	r3, #1
   d70ec:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d70ee:	68c3      	ldr	r3, [r0, #12]
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d70f0:	4604      	mov	r4, r0
   d70f2:	6848      	ldr	r0, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d70f4:	6058      	str	r0, [r3, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d70f6:	6888      	ldr	r0, [r1, #8]
   d70f8:	6098      	str	r0, [r3, #8]
   d70fa:	68c8      	ldr	r0, [r1, #12]
   d70fc:	60d8      	str	r0, [r3, #12]
  size_t size_;
  bool stop_;
  system_tick_t timeout_;
};

class TwoWire : public Stream
   d70fe:	7c08      	ldrb	r0, [r1, #16]
   d7100:	7418      	strb	r0, [r3, #16]
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;

	wire.begin();
   d7102:	4608      	mov	r0, r1
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
	useWire = true;
	this->wire = wire;
	this->wireAddr = addr;
   d7104:	7422      	strb	r2, [r4, #16]

	wire.begin();
   d7106:	f001 fe37 	bl	d8d78 <_ZN7TwoWire5beginEv>

	return *this;
}
   d710a:	4620      	mov	r0, r4
   d710c:	bd10      	pop	{r4, pc}
	...

000d7110 <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d7110:	b538      	push	{r3, r4, r5, lr}
   d7112:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d7114:	7c01      	ldrb	r1, [r0, #16]
   d7116:	68c0      	ldr	r0, [r0, #12]
   d7118:	f001 fe62 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d711c:	21fd      	movs	r1, #253	; 0xfd
   d711e:	68e8      	ldr	r0, [r5, #12]
   d7120:	f7ff ff74 	bl	d700c <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d7124:	2100      	movs	r1, #0
   d7126:	68e8      	ldr	r0, [r5, #12]
   d7128:	f001 fe61 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d712c:	b130      	cbz	r0, d713c <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d712e:	490f      	ldr	r1, [pc, #60]	; (d716c <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d7130:	4602      	mov	r2, r0
   d7132:	480f      	ldr	r0, [pc, #60]	; (d7170 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d7134:	f7fd f8bb 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d7138:	2000      	movs	r0, #0
   d713a:	bd38      	pop	{r3, r4, r5, pc}
	}

	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d713c:	2202      	movs	r2, #2
   d713e:	2301      	movs	r3, #1
   d7140:	7c29      	ldrb	r1, [r5, #16]
   d7142:	68e8      	ldr	r0, [r5, #12]
   d7144:	f001 fe3a 	bl	d8dbc <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d7148:	b2c2      	uxtb	r2, r0
   d714a:	2a02      	cmp	r2, #2
   d714c:	d001      	beq.n	d7152 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d714e:	4909      	ldr	r1, [pc, #36]	; (d7174 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d7150:	e7ef      	b.n	d7132 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
		return 0;
	}

	uint16_t available = wire.read() << 8;
   d7152:	68e8      	ldr	r0, [r5, #12]
   d7154:	6803      	ldr	r3, [r0, #0]
   d7156:	695b      	ldr	r3, [r3, #20]
   d7158:	4798      	blx	r3
   d715a:	4604      	mov	r4, r0
	available |= wire.read();
   d715c:	68e8      	ldr	r0, [r5, #12]
   d715e:	6803      	ldr	r3, [r0, #0]
   d7160:	695b      	ldr	r3, [r3, #20]
   d7162:	4798      	blx	r3
   d7164:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d7168:	b280      	uxth	r0, r0

	return available;
}
   d716a:	bd38      	pop	{r3, r4, r5, pc}
   d716c:	000dd1c6 	.word	0x000dd1c6
   d7170:	2003e294 	.word	0x2003e294
   d7174:	000dd1ea 	.word	0x000dd1ea

000d7178 <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d7178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d717c:	4606      	mov	r6, r0
   d717e:	4689      	mov	r9, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d7180:	7c01      	ldrb	r1, [r0, #16]
   d7182:	68c0      	ldr	r0, [r0, #12]
	available |= wire.read();

	return available;
}

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d7184:	4615      	mov	r5, r2
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d7186:	f001 fe2b 	bl	d8de0 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d718a:	21ff      	movs	r1, #255	; 0xff
   d718c:	68f0      	ldr	r0, [r6, #12]
   d718e:	f7ff ff3d 	bl	d700c <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d7192:	2100      	movs	r1, #0
   d7194:	68f0      	ldr	r0, [r6, #12]
   d7196:	f001 fe2a 	bl	d8dee <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d719a:	4602      	mov	r2, r0
   d719c:	b108      	cbz	r0, d71a2 <_ZN12AssetTracker13wireReadBytesEPhj+0x2a>
		Log.info("wireReadBytes I2C error %u", res);
   d719e:	4918      	ldr	r1, [pc, #96]	; (d7200 <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d71a0:	e015      	b.n	d71ce <_ZN12AssetTracker13wireReadBytesEPhj+0x56>
   d71a2:	4604      	mov	r4, r0
		return -1;
	}

	size_t offset = 0;

	while(offset < len) {
   d71a4:	42ac      	cmp	r4, r5
   d71a6:	d227      	bcs.n	d71f8 <_ZN12AssetTracker13wireReadBytesEPhj+0x80>
		size_t reqLen = (len - offset);
   d71a8:	1b2f      	subs	r7, r5, r4
   d71aa:	2f20      	cmp	r7, #32
   d71ac:	bf28      	it	cs
   d71ae:	2720      	movcs	r7, #32
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d71b0:	eb04 0a07 	add.w	sl, r4, r7
   d71b4:	ebca 0205 	rsb	r2, sl, r5
   d71b8:	4253      	negs	r3, r2
   d71ba:	4153      	adcs	r3, r2
   d71bc:	7c31      	ldrb	r1, [r6, #16]
   d71be:	68f0      	ldr	r0, [r6, #12]
   d71c0:	463a      	mov	r2, r7
   d71c2:	f001 fdfb 	bl	d8dbc <_ZN7TwoWire11requestFromEhjh>
   d71c6:	b2c2      	uxtb	r2, r0
		if (res != reqLen) {
   d71c8:	4297      	cmp	r7, r2
   d71ca:	d007      	beq.n	d71dc <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d71cc:	490d      	ldr	r1, [pc, #52]	; (d7204 <_ZN12AssetTracker13wireReadBytesEPhj+0x8c>)
   d71ce:	480e      	ldr	r0, [pc, #56]	; (d7208 <_ZN12AssetTracker13wireReadBytesEPhj+0x90>)
   d71d0:	f7fd f86d 	bl	d42ae <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d71d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d71d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71dc:	444c      	add	r4, r9
		size_t reqLen = (len - offset);
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
   d71de:	46a0      	mov	r8, r4
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
			buf[offset + ii] = wire.read();
   d71e0:	68f0      	ldr	r0, [r6, #12]
   d71e2:	6803      	ldr	r3, [r0, #0]
   d71e4:	695b      	ldr	r3, [r3, #20]
   d71e6:	4798      	blx	r3
   d71e8:	f808 0b01 	strb.w	r0, [r8], #1
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
			return -1;
		}

		for(size_t ii = 0; ii < reqLen; ii++) {
   d71ec:	ebc4 0308 	rsb	r3, r4, r8
   d71f0:	429f      	cmp	r7, r3
   d71f2:	d8f5      	bhi.n	d71e0 <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
   d71f4:	4654      	mov	r4, sl
   d71f6:	e7d5      	b.n	d71a4 <_ZN12AssetTracker13wireReadBytesEPhj+0x2c>
 	}
	return len;
   d71f8:	4628      	mov	r0, r5
}
   d71fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71fe:	bf00      	nop
   d7200:	000dd214 	.word	0x000dd214
   d7204:	000dd22f 	.word	0x000dd22f
   d7208:	2003e294 	.word	0x2003e294

000d720c <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d720c:	4800      	ldr	r0, [pc, #0]	; (d7210 <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d720e:	4770      	bx	lr
   d7210:	2003e0b0 	.word	0x2003e0b0

000d7214 <_ZNKSt8functionIFbcEEclEc>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7214:	b507      	push	{r0, r1, r2, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7216:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7218:	f88d 1007 	strb.w	r1, [sp, #7]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d721c:	b90a      	cbnz	r2, d7222 <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d721e:	f002 ffac 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7222:	68c3      	ldr	r3, [r0, #12]
   d7224:	f10d 0107 	add.w	r1, sp, #7
   d7228:	4798      	blx	r3
    }
   d722a:	b003      	add	sp, #12
   d722c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7230 <_ZN12AssetTracker9updateGPSEv>:
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d7230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!useWire) {
   d7234:	7a03      	ldrb	r3, [r0, #8]
	config.setAccelMode(LIS3DH::RATE_100_HZ);

	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
   d7236:	b089      	sub	sp, #36	; 0x24
   d7238:	4604      	mov	r4, r0
	if (!useWire) {
   d723a:	b913      	cbnz	r3, d7242 <_ZN12AssetTracker9updateGPSEv+0x12>
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
			gps.encode(c);
			if (externalDecoder) {
				externalDecoder(c);
   d723c:	f100 0620 	add.w	r6, r0, #32
   d7240:	e03b      	b.n	d72ba <_ZN12AssetTracker9updateGPSEv+0x8a>
		}
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
   d7242:	f8d0 800c 	ldr.w	r8, [r0, #12]
   d7246:	4640      	mov	r0, r8
   d7248:	f001 fdd9 	bl	d8dfe <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d724c:	4620      	mov	r0, r4
   d724e:	f7ff ff5f 	bl	d7110 <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d7252:	2820      	cmp	r0, #32
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
						if (externalDecoder) {
							externalDecoder(buf[ii]);
   d7254:	f104 0920 	add.w	r9, r4, #32
	}
	else {
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
   d7258:	4605      	mov	r5, r0
			if (available > 32) {
   d725a:	d801      	bhi.n	d7260 <_ZN12AssetTracker9updateGPSEv+0x30>
				available = 32;
			}
			if (available > 0) {
   d725c:	b908      	cbnz	r0, d7262 <_ZN12AssetTracker9updateGPSEv+0x32>
   d725e:	e019      	b.n	d7294 <_ZN12AssetTracker9updateGPSEv+0x64>
		uint8_t buf[32];

		WITH_LOCK(wire) {
			uint16_t available = wireReadBytesAvailable();
			if (available > 32) {
				available = 32;
   d7260:	2520      	movs	r5, #32
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
   d7262:	462a      	mov	r2, r5
   d7264:	4669      	mov	r1, sp
   d7266:	4620      	mov	r0, r4
   d7268:	f7ff ff86 	bl	d7178 <_ZN12AssetTracker13wireReadBytesEPhj>
   d726c:	42a8      	cmp	r0, r5
   d726e:	466f      	mov	r7, sp
   d7270:	d110      	bne.n	d7294 <_ZN12AssetTracker9updateGPSEv+0x64>
   d7272:	466e      	mov	r6, sp
					for(uint16_t ii = 0; ii < available; ii++) {
						gps.encode(buf[ii]);
   d7274:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7278:	4814      	ldr	r0, [pc, #80]	; (d72cc <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d727a:	f000 fb8f 	bl	d799c <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d727e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d7280:	b123      	cbz	r3, d728c <_ZN12AssetTracker9updateGPSEv+0x5c>
							externalDecoder(buf[ii]);
   d7282:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d7286:	4648      	mov	r0, r9
   d7288:	f7ff ffc4 	bl	d7214 <_ZNKSt8functionIFbcEEclEc>
			if (available > 32) {
				available = 32;
			}
			if (available > 0) {
				if (wireReadBytes(buf, available) == available) {
					for(uint16_t ii = 0; ii < available; ii++) {
   d728c:	1bf3      	subs	r3, r6, r7
   d728e:	b29b      	uxth	r3, r3
   d7290:	42ab      	cmp	r3, r5
   d7292:	d3ef      	bcc.n	d7274 <_ZN12AssetTracker9updateGPSEv+0x44>

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d7294:	4640      	mov	r0, r8
   d7296:	f001 fdbb 	bl	d8e10 <_ZN7TwoWire6unlockEv>
   d729a:	e014      	b.n	d72c6 <_ZN12AssetTracker9updateGPSEv+0x96>
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
			char c = (char)serialPort.read();
   d729c:	6960      	ldr	r0, [r4, #20]
   d729e:	6803      	ldr	r3, [r0, #0]
   d72a0:	695b      	ldr	r3, [r3, #20]
   d72a2:	4798      	blx	r3
   d72a4:	b2c5      	uxtb	r5, r0
			gps.encode(c);
   d72a6:	4629      	mov	r1, r5
   d72a8:	4808      	ldr	r0, [pc, #32]	; (d72cc <_ZN12AssetTracker9updateGPSEv+0x9c>)
   d72aa:	f000 fb77 	bl	d799c <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d72ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d72b0:	b11b      	cbz	r3, d72ba <_ZN12AssetTracker9updateGPSEv+0x8a>
				externalDecoder(c);
   d72b2:	4629      	mov	r1, r5
   d72b4:	4630      	mov	r0, r6
   d72b6:	f7ff ffad 	bl	d7214 <_ZNKSt8functionIFbcEEclEc>
	accel.setup(config);
}

void AssetTracker::updateGPS(void) {
	if (!useWire) {
		while (serialPort.available() > 0) {
   d72ba:	6960      	ldr	r0, [r4, #20]
   d72bc:	6803      	ldr	r3, [r0, #0]
   d72be:	691b      	ldr	r3, [r3, #16]
   d72c0:	4798      	blx	r3
   d72c2:	2800      	cmp	r0, #0
   d72c4:	dcea      	bgt.n	d729c <_ZN12AssetTracker9updateGPSEv+0x6c>
					}
				}
			}
		}
	}
}
   d72c6:	b009      	add	sp, #36	; 0x24
   d72c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d72cc:	2003e0b0 	.word	0x2003e0b0

000d72d0 <_ZN12AssetTracker14threadFunctionEv>:
	if (thread == NULL) {
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
	}
}

void AssetTracker::threadFunction() {
   d72d0:	b508      	push	{r3, lr}
   d72d2:	4604      	mov	r4, r0
	while(true) {
		updateGPS();
   d72d4:	4620      	mov	r0, r4
   d72d6:	f7ff ffab 	bl	d7230 <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d72da:	f000 fc95 	bl	d7c08 <os_thread_yield>
   d72de:	e7f9      	b.n	d72d4 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d72e0 <_ZN12AssetTracker20threadFunctionStaticEPv>:
	}
}

// [static]
void AssetTracker::threadFunctionStatic(void *param) {
   d72e0:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d72e2:	f7ff fff5 	bl	d72d0 <_ZN12AssetTracker14threadFunctionEv>
	...

000d72e8 <_GLOBAL__sub_I_emptyResponse>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d72e8:	b570      	push	{r4, r5, r6, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d72ea:	4c19      	ldr	r4, [pc, #100]	; (d7350 <_GLOBAL__sub_I_emptyResponse+0x68>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d72ec:	4e19      	ldr	r6, [pc, #100]	; (d7354 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d72ee:	f000 fd43 	bl	d7d78 <HAL_Pin_Map>
   d72f2:	2108      	movs	r1, #8
   d72f4:	4620      	mov	r0, r4
   d72f6:	f000 fc2d 	bl	d7b54 <_ZN6LIS3DHC1Ei>
   d72fa:	6831      	ldr	r1, [r6, #0]
   d72fc:	4b16      	ldr	r3, [pc, #88]	; (d7358 <_GLOBAL__sub_I_emptyResponse+0x70>)
   d72fe:	6023      	str	r3, [r4, #0]
   d7300:	f011 0501 	ands.w	r5, r1, #1
   d7304:	d10a      	bne.n	d731c <_GLOBAL__sub_I_emptyResponse+0x34>
   d7306:	4630      	mov	r0, r6
   d7308:	f7fc fed8 	bl	d40bc <__cxa_guard_acquire>
   d730c:	b130      	cbz	r0, d731c <_GLOBAL__sub_I_emptyResponse+0x34>
   d730e:	4629      	mov	r1, r5
   d7310:	4812      	ldr	r0, [pc, #72]	; (d735c <_GLOBAL__sub_I_emptyResponse+0x74>)
   d7312:	f002 f911 	bl	d9538 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7316:	4630      	mov	r0, r6
   d7318:	f7fc fed5 	bl	d40c6 <__cxa_guard_release>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d731c:	4a10      	ldr	r2, [pc, #64]	; (d7360 <_GLOBAL__sub_I_emptyResponse+0x78>)
   d731e:	61a2      	str	r2, [r4, #24]
   d7320:	4b0e      	ldr	r3, [pc, #56]	; (d735c <_GLOBAL__sub_I_emptyResponse+0x74>)
   d7322:	4a10      	ldr	r2, [pc, #64]	; (d7364 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d7324:	60e3      	str	r3, [r4, #12]
   d7326:	6222      	str	r2, [r4, #32]
   d7328:	2311      	movs	r3, #17
   d732a:	2201      	movs	r2, #1
   d732c:	6123      	str	r3, [r4, #16]
   d732e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
   d7332:	2300      	movs	r3, #0
 */

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
   d7334:	4a0c      	ldr	r2, [pc, #48]	; (d7368 <_GLOBAL__sub_I_emptyResponse+0x80>)
   d7336:	490d      	ldr	r1, [pc, #52]	; (d736c <_GLOBAL__sub_I_emptyResponse+0x84>)
   d7338:	4805      	ldr	r0, [pc, #20]	; (d7350 <_GLOBAL__sub_I_emptyResponse+0x68>)
   d733a:	7523      	strb	r3, [r4, #20]
   d733c:	7723      	strb	r3, [r4, #28]
   d733e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d7342:	f002 fef9 	bl	da138 <__aeabi_atexit>
static TinyGPSPlus gps;
   d7346:	480a      	ldr	r0, [pc, #40]	; (d7370 <_GLOBAL__sub_I_emptyResponse+0x88>)
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d7348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

static const int GPS_POWER_PIN = D6;
static const int GPS_BAUD = 9600;

static LIS3DHSPI accel(SPI, A2, WKP);
static TinyGPSPlus gps;
   d734c:	f000 b878 	b.w	d7440 <_ZN11TinyGPSPlusC1Ev>
   d7350:	2003e088 	.word	0x2003e088
   d7354:	2003e078 	.word	0x2003e078
   d7358:	000dd614 	.word	0x000dd614
   d735c:	2003e07c 	.word	0x2003e07c
   d7360:	000dd170 	.word	0x000dd170
   d7364:	00989680 	.word	0x00989680
   d7368:	2003dea8 	.word	0x2003dea8
   d736c:	000d7a95 	.word	0x000d7a95
   d7370:	2003e0b0 	.word	0x2003e0b0

000d7374 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d7374:	4770      	bx	lr

000d7376 <_ZN13LegacyAdapterD0Ev>:

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d7376:	b510      	push	{r4, lr}

}
   d7378:	2108      	movs	r1, #8

LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {

}

LegacyAdapter::~LegacyAdapter() {
   d737a:	4604      	mov	r4, r0

}
   d737c:	f002 fee1 	bl	da142 <_ZdlPvj>
   d7380:	4620      	mov	r0, r4
   d7382:	bd10      	pop	{r4, pc}

000d7384 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:

#include "LegacyAdapter.h"


LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d7384:	4a01      	ldr	r2, [pc, #4]	; (d738c <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d7386:	6002      	str	r2, [r0, #0]
   d7388:	6041      	str	r1, [r0, #4]

}
   d738a:	4770      	bx	lr
   d738c:	000dd268 	.word	0x000dd268

000d7390 <_GLOBAL__sub_I__ZN13LegacyAdapterC2ER11TinyGPSPlus>:
   d7390:	f000 bcf2 	b.w	d7d78 <HAL_Pin_Map>

000d7394 <_ZN11TinyGPSDataC1Ev>:
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d7394:	2200      	movs	r2, #0
   d7396:	7002      	strb	r2, [r0, #0]
   d7398:	7042      	strb	r2, [r0, #1]
{
	uint16_t deg; 			//!< Degree value (0 <= deg < 365)
	uint32_t billionths; 	//!< Billionths of a segree
	bool negative; 			//!< true if negative (south latitude or east longitude)
public:
	RawDegrees() : deg(0), billionths(0), negative(false)
   d739a:	8082      	strh	r2, [r0, #4]
   d739c:	6082      	str	r2, [r0, #8]
   d739e:	7302      	strb	r2, [r0, #12]
   d73a0:	8202      	strh	r2, [r0, #16]
   d73a2:	6142      	str	r2, [r0, #20]
   d73a4:	7602      	strb	r2, [r0, #24]
   d73a6:	8382      	strh	r2, [r0, #28]
   d73a8:	6202      	str	r2, [r0, #32]
   d73aa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d73ae:	8502      	strh	r2, [r0, #40]	; 0x28
   d73b0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d73b2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d73b6:	6342      	str	r2, [r0, #52]	; 0x34
	uint8_t day();

	/**
	 * @brief Constructor
	 */
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d73b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d73bc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d73c0:	63c2      	str	r2, [r0, #60]	; 0x3c
   d73c2:	6402      	str	r2, [r0, #64]	; 0x40
   d73c4:	6442      	str	r2, [r0, #68]	; 0x44
	uint8_t centisecond();

	/**
	 * @brief Constructor
	 */
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d73c6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d73ca:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d73ce:	64c2      	str	r2, [r0, #76]	; 0x4c
   d73d0:	6502      	str	r2, [r0, #80]	; 0x50
   d73d2:	6542      	str	r2, [r0, #84]	; 0x54
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d73d4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d73d8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d73dc:	65c2      	str	r2, [r0, #92]	; 0x5c
   d73de:	6602      	str	r2, [r0, #96]	; 0x60
   d73e0:	6642      	str	r2, [r0, #100]	; 0x64
   d73e2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d73e6:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d73ea:	66c2      	str	r2, [r0, #108]	; 0x6c
   d73ec:	6702      	str	r2, [r0, #112]	; 0x70
   d73ee:	6742      	str	r2, [r0, #116]	; 0x74
   d73f0:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d73f4:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d73f8:	67c2      	str	r2, [r0, #124]	; 0x7c
   d73fa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   d73fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d7402:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d7406:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d740a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   d740e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   d7412:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d7416:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d741a:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d741e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
   d7422:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d7426:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	void invalidate() { valid = false; }

	/**
	 * @brief Constructor
	 */
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d742a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d742e:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d7432:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   d7436:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   d743a:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
 *
 * For best thread safety, you should avoid using fields like location directly and instead should
 * use methods like getLocation() to make a copy of the location data. This will assure that your
 * data is valid and does not change while you are reading it.
 */
class TinyGPSData {
   d743e:	4770      	bx	lr

000d7440 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d7440:	b510      	push	{r4, lr}
   d7442:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d7444:	f7ff ffa6 	bl	d7394 <_ZN11TinyGPSDataC1Ev>
   d7448:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d744c:	f7ff ffa2 	bl	d7394 <_ZN11TinyGPSDataC1Ev>
   d7450:	2300      	movs	r3, #0
   d7452:	2202      	movs	r2, #2
   d7454:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
   d7458:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
   d745c:	f884 2181 	strb.w	r2, [r4, #385]	; 0x181
   d7460:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
   d7464:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
   d7468:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d746c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
   d7470:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d7474:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
   d7478:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
   d747c:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
   d7480:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
{
  term[0] = '\0';
   d7484:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d7488:	4620      	mov	r0, r4
   d748a:	bd10      	pop	{r4, pc}

000d748c <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d748c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d7490:	2b05      	cmp	r3, #5
   d7492:	d802      	bhi.n	d749a <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d7494:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d7498:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d749a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d749e:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d74a0:	bf94      	ite	ls
   d74a2:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d74a6:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d74aa:	4770      	bx	lr

000d74ac <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d74ac:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d74ae:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d74b0:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d74b2:	2d2d      	cmp	r5, #45	; 0x2d
   d74b4:	bf08      	it	eq
   d74b6:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d74b8:	4620      	mov	r0, r4
   d74ba:	f003 fce9 	bl	dae90 <atol>
   d74be:	2364      	movs	r3, #100	; 0x64
   d74c0:	4358      	muls	r0, r3
   d74c2:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d74c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   d74c8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d74cc:	2909      	cmp	r1, #9
   d74ce:	d9f8      	bls.n	d74c2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d74d0:	2b2e      	cmp	r3, #46	; 0x2e
   d74d2:	d10b      	bne.n	d74ec <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d74d4:	7853      	ldrb	r3, [r2, #1]
   d74d6:	3b30      	subs	r3, #48	; 0x30
   d74d8:	2b09      	cmp	r3, #9
   d74da:	d807      	bhi.n	d74ec <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d74dc:	210a      	movs	r1, #10
   d74de:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d74e2:	7893      	ldrb	r3, [r2, #2]
   d74e4:	3b30      	subs	r3, #48	; 0x30
   d74e6:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d74e8:	bf98      	it	ls
   d74ea:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d74ec:	2d2d      	cmp	r5, #45	; 0x2d
   d74ee:	bf08      	it	eq
   d74f0:	4240      	negeq	r0, r0
}
   d74f2:	bd38      	pop	{r3, r4, r5, pc}

000d74f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d74f4:	b538      	push	{r3, r4, r5, lr}
   d74f6:	4604      	mov	r4, r0
   d74f8:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d74fa:	f003 fcc9 	bl	dae90 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d74fe:	2364      	movs	r3, #100	; 0x64
   d7500:	fbb0 f2f3 	udiv	r2, r0, r3
   d7504:	fb03 0012 	mls	r0, r3, r2, r0
   d7508:	4b11      	ldr	r3, [pc, #68]	; (d7550 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d750a:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d750c:	4343      	muls	r3, r0
   d750e:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d7510:	7802      	ldrb	r2, [r0, #0]
   d7512:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d7516:	2909      	cmp	r1, #9
   d7518:	4604      	mov	r4, r0
   d751a:	f100 0001 	add.w	r0, r0, #1
   d751e:	d9f7      	bls.n	d7510 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d7520:	2a2e      	cmp	r2, #46	; 0x2e
   d7522:	d10b      	bne.n	d753c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d7524:	490a      	ldr	r1, [pc, #40]	; (d7550 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d7526:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d7528:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d752c:	3a30      	subs	r2, #48	; 0x30
   d752e:	2a09      	cmp	r2, #9
   d7530:	d804      	bhi.n	d753c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d7532:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d7536:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d753a:	e7f5      	b.n	d7528 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d753c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d7540:	3301      	adds	r3, #1
   d7542:	2203      	movs	r2, #3
   d7544:	fbb3 f3f2 	udiv	r3, r3, r2
   d7548:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d754a:	2300      	movs	r3, #0
   d754c:	722b      	strb	r3, [r5, #8]
   d754e:	bd38      	pop	{r3, r4, r5, pc}
   d7550:	00989680 	.word	0x00989680

000d7554 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d7554:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d7556:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d7558:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d755a:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d755e:	6042      	str	r2, [r0, #4]
   d7560:	685a      	ldr	r2, [r3, #4]
   d7562:	6082      	str	r2, [r0, #8]
   d7564:	7a1b      	ldrb	r3, [r3, #8]
   d7566:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d7568:	4603      	mov	r3, r0
   d756a:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d756e:	6102      	str	r2, [r0, #16]
   d7570:	685a      	ldr	r2, [r3, #4]
   d7572:	6142      	str	r2, [r0, #20]
   d7574:	7a1b      	ldrb	r3, [r3, #8]
   d7576:	7603      	strb	r3, [r0, #24]
   d7578:	f000 fbc6 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d757c:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d757e:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d7580:	7063      	strb	r3, [r4, #1]
   d7582:	7023      	strb	r3, [r4, #0]
   d7584:	bd10      	pop	{r4, pc}
	...

000d7588 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d7588:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d758a:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d758c:	4604      	mov	r4, r0
   updated = false;
   d758e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d7590:	6880      	ldr	r0, [r0, #8]
   d7592:	f003 f87f 	bl	da694 <__aeabi_ui2d>
   d7596:	a30e      	add	r3, pc, #56	; (adr r3, d75d0 <_ZN15TinyGPSLocation3latEv+0x48>)
   d7598:	e9d3 2300 	ldrd	r2, r3, [r3]
   d759c:	f003 fa1a 	bl	da9d4 <__aeabi_ddiv>
   d75a0:	4606      	mov	r6, r0
   d75a2:	88a0      	ldrh	r0, [r4, #4]
   d75a4:	460f      	mov	r7, r1
   d75a6:	f003 f885 	bl	da6b4 <__aeabi_i2d>
   d75aa:	460b      	mov	r3, r1
   d75ac:	4602      	mov	r2, r0
   d75ae:	4639      	mov	r1, r7
   d75b0:	4630      	mov	r0, r6
   d75b2:	f002 ff33 	bl	da41c <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d75b6:	7b23      	ldrb	r3, [r4, #12]
   d75b8:	b11b      	cbz	r3, d75c2 <_ZN15TinyGPSLocation3latEv+0x3a>
   d75ba:	4602      	mov	r2, r0
   d75bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d75c0:	e001      	b.n	d75c6 <_ZN15TinyGPSLocation3latEv+0x3e>
   d75c2:	4602      	mov	r2, r0
   d75c4:	460b      	mov	r3, r1
}
   d75c6:	ec43 2b10 	vmov	d0, r2, r3
   d75ca:	bdd0      	pop	{r4, r6, r7, pc}
   d75cc:	f3af 8000 	nop.w
   d75d0:	00000000 	.word	0x00000000
   d75d4:	41cdcd65 	.word	0x41cdcd65

000d75d8 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d75d8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d75da:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d75dc:	4604      	mov	r4, r0
   updated = false;
   d75de:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d75e0:	6940      	ldr	r0, [r0, #20]
   d75e2:	f003 f857 	bl	da694 <__aeabi_ui2d>
   d75e6:	a30e      	add	r3, pc, #56	; (adr r3, d7620 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d75e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d75ec:	f003 f9f2 	bl	da9d4 <__aeabi_ddiv>
   d75f0:	4606      	mov	r6, r0
   d75f2:	8a20      	ldrh	r0, [r4, #16]
   d75f4:	460f      	mov	r7, r1
   d75f6:	f003 f85d 	bl	da6b4 <__aeabi_i2d>
   d75fa:	460b      	mov	r3, r1
   d75fc:	4602      	mov	r2, r0
   d75fe:	4639      	mov	r1, r7
   d7600:	4630      	mov	r0, r6
   d7602:	f002 ff0b 	bl	da41c <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d7606:	7e23      	ldrb	r3, [r4, #24]
   d7608:	b11b      	cbz	r3, d7612 <_ZN15TinyGPSLocation3lngEv+0x3a>
   d760a:	4602      	mov	r2, r0
   d760c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7610:	e001      	b.n	d7616 <_ZN15TinyGPSLocation3lngEv+0x3e>
   d7612:	4602      	mov	r2, r0
   d7614:	460b      	mov	r3, r1
}
   d7616:	ec43 2b10 	vmov	d0, r2, r3
   d761a:	bdd0      	pop	{r4, r6, r7, pc}
   d761c:	f3af 8000 	nop.w
   d7620:	00000000 	.word	0x00000000
   d7624:	41cdcd65 	.word	0x41cdcd65

000d7628 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d7628:	b510      	push	{r4, lr}
   date = newDate;
   d762a:	6883      	ldr	r3, [r0, #8]
   d762c:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d762e:	4604      	mov	r4, r0
   d7630:	f000 fb6a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d7634:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d7636:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d7638:	7063      	strb	r3, [r4, #1]
   d763a:	7023      	strb	r3, [r4, #0]
   d763c:	bd10      	pop	{r4, pc}

000d763e <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d763e:	b510      	push	{r4, lr}
   time = newTime;
   d7640:	6883      	ldr	r3, [r0, #8]
   d7642:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d7644:	4604      	mov	r4, r0
   d7646:	f000 fb5f 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d764a:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d764c:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d764e:	7063      	strb	r3, [r4, #1]
   d7650:	7023      	strb	r3, [r4, #0]
   d7652:	bd10      	pop	{r4, pc}

000d7654 <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d7654:	b510      	push	{r4, lr}
   d7656:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d7658:	4608      	mov	r0, r1
   d765a:	f7ff ff27 	bl	d74ac <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d765e:	60a0      	str	r0, [r4, #8]
   d7660:	bd10      	pop	{r4, pc}

000d7662 <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d7662:	b510      	push	{r4, lr}
   d7664:	4604      	mov	r4, r0
   newDate = atol(term);
   d7666:	4608      	mov	r0, r1
   d7668:	f003 fc12 	bl	dae90 <atol>
   d766c:	60a0      	str	r0, [r4, #8]
   d766e:	bd10      	pop	{r4, pc}

000d7670 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d7670:	b510      	push	{r4, lr}
   val = newval;
   d7672:	68c3      	ldr	r3, [r0, #12]
   d7674:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d7676:	4604      	mov	r4, r0
   d7678:	f000 fb46 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d767c:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d767e:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d7680:	7063      	strb	r3, [r4, #1]
   d7682:	7023      	strb	r3, [r4, #0]
   d7684:	bd10      	pop	{r4, pc}

000d7686 <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d7686:	b510      	push	{r4, lr}
   d7688:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d768a:	4608      	mov	r0, r1
   d768c:	f7ff ff0e 	bl	d74ac <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d7690:	60e0      	str	r0, [r4, #12]
   d7692:	bd10      	pop	{r4, pc}

000d7694 <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d7694:	b510      	push	{r4, lr}
   val = newval;
   d7696:	68c3      	ldr	r3, [r0, #12]
   d7698:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d769a:	4604      	mov	r4, r0
   d769c:	f000 fb34 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d76a0:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d76a2:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d76a4:	7063      	strb	r3, [r4, #1]
   d76a6:	7023      	strb	r3, [r4, #0]
   d76a8:	bd10      	pop	{r4, pc}

000d76aa <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d76aa:	b510      	push	{r4, lr}
   d76ac:	4604      	mov	r4, r0
   newval = atol(term);
   d76ae:	4608      	mov	r0, r1
   d76b0:	f003 fbee 	bl	dae90 <atol>
   d76b4:	60e0      	str	r0, [r4, #12]
   d76b6:	bd10      	pop	{r4, pc}

000d76b8 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d76b8:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d76ba:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d76bc:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d76be:	3010      	adds	r0, #16
   d76c0:	f004 f848 	bl	db754 <strcpy>
   d76c4:	f000 fb20 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d76c8:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d76ca:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d76cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d76d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d76d4:	bd10      	pop	{r4, pc}

000d76d6 <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d76d6:	2210      	movs	r2, #16
   d76d8:	f004 bd91 	b.w	dc1fe <strncpy>

000d76dc <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d76dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d76de:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d76e2:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d76e4:	2d00      	cmp	r5, #0
   d76e6:	f000 808b 	beq.w	d7800 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x124>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d76ea:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d76ee:	f7ff fecd 	bl	d748c <_ZN11TinyGPSPlus7fromHexEc>
   d76f2:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d76f6:	4602      	mov	r2, r0
   d76f8:	4620      	mov	r0, r4
   d76fa:	f7ff fec7 	bl	d748c <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d76fe:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   d7702:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d7706:	b2c0      	uxtb	r0, r0
   d7708:	4283      	cmp	r3, r0
   d770a:	d172      	bne.n	d77f2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x116>
    {
      passedChecksumCount++;
   d770c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d7710:	3301      	adds	r3, #1
   d7712:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d7716:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d771a:	b123      	cbz	r3, d7726 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d771c:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d7720:	3301      	adds	r3, #1
   d7722:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194

      switch(curSentenceType)
   d7726:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d772a:	b1fb      	cbz	r3, d776c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x90>
   d772c:	2b01      	cmp	r3, #1
   d772e:	d14d      	bne.n	d77cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf0>
      {
      case GPS_SENTENCE_GPRMC:
    	tempData.date.commit();
   d7730:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d7734:	f7ff ff78 	bl	d7628 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d7738:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d773c:	f7ff ff7f 	bl	d763e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d7740:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d7744:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d7748:	b14b      	cbz	r3, d775e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        {
           tempData.location.commit();
   d774a:	4630      	mov	r0, r6
   d774c:	f7ff ff02 	bl	d7554 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d7750:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d7754:	f7ff ff8c 	bl	d7670 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d7758:	f504 7090 	add.w	r0, r4, #288	; 0x120
   d775c:	e027      	b.n	d77ae <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d775e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7762:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d7766:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
   d776a:	e022      	b.n	d77b2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
        }
        break;
      case GPS_SENTENCE_GPGGA:
        tempData.time.commit();
   d776c:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d7770:	f7ff ff65 	bl	d763e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d7774:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d7778:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d777c:	b15b      	cbz	r3, d7796 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xba>
        {
          tempData.location.commit();
   d777e:	4630      	mov	r0, r6
   d7780:	f7ff fee8 	bl	d7554 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d7784:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d7788:	f7ff ff72 	bl	d7670 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d778c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d7790:	f7ff ff6e 	bl	d7670 <_ZN14TinyGPSDecimal6commitEv>
   d7794:	e005      	b.n	d77a2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d7796:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	 * @brief Sets the valid flag to false (marks data as invalid)
	 *
	 * This is used internally when we get a valid GPS sentence that does not have a fix.
	 * It can be checked by using the isValid() method.
	 */
	void invalidate() { valid = false; }
   d779a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d779e:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
        {
            tempData.location.invalidate();
            tempData.altitude.invalidate();
            tempData.geoidSeparation.invalidate();
        }
        tempData.satellites.commit();
   d77a2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d77a6:	f7ff ff75 	bl	d7694 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d77aa:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d77ae:	f7ff ff5f 	bl	d7670 <_ZN14TinyGPSDecimal6commitEv>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d77b2:	2100      	movs	r1, #0
   d77b4:	4608      	mov	r0, r1
   d77b6:	f000 fa3f 	bl	d7c38 <os_thread_scheduling>
        SINGLE_THREADED_BLOCK() {
        	TinyGPSData::operator=(tempData);
   d77ba:	4631      	mov	r1, r6
   d77bc:	22b8      	movs	r2, #184	; 0xb8
   d77be:	4620      	mov	r0, r4
   d77c0:	f003 fd1a 	bl	db1f8 <memcpy>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d77c4:	2100      	movs	r1, #0
   d77c6:	2001      	movs	r0, #1
   d77c8:	f000 fa36 	bl	d7c38 <os_thread_scheduling>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d77cc:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d77d0:	2e00      	cmp	r6, #0
   d77d2:	f000 80d9 	beq.w	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d77d6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d77da:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d77dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d77de:	f003 ffaf 	bl	db740 <strcmp>
   d77e2:	2800      	cmp	r0, #0
   d77e4:	f040 80d0 	bne.w	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
         p->commit();
   d77e8:	4630      	mov	r0, r6
   d77ea:	f7ff ff65 	bl	d76b8 <_ZN13TinyGPSCustom6commitEv>
        }
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d77ee:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d77f0:	e7ee      	b.n	d77d0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d77f2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d77f6:	3301      	adds	r3, #1
   d77f8:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    }

    return false;
   d77fc:	2500      	movs	r5, #0
   d77fe:	e0c3      	b.n	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d7800:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d7804:	bb72      	cbnz	r2, d7864 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x188>
  {
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d7806:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d780a:	4960      	ldr	r1, [pc, #384]	; (d798c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d780c:	4630      	mov	r0, r6
   d780e:	f003 ff97 	bl	db740 <strcmp>
   d7812:	b120      	cbz	r0, d781e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x142>
   d7814:	495e      	ldr	r1, [pc, #376]	; (d7990 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d7816:	4630      	mov	r0, r6
   d7818:	f003 ff92 	bl	db740 <strcmp>
   d781c:	b908      	cbnz	r0, d7822 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d781e:	2301      	movs	r3, #1
   d7820:	e00c      	b.n	d783c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d7822:	495c      	ldr	r1, [pc, #368]	; (d7994 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d7824:	4630      	mov	r0, r6
   d7826:	f003 ff8b 	bl	db740 <strcmp>
   d782a:	b120      	cbz	r0, d7836 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15a>
   d782c:	495a      	ldr	r1, [pc, #360]	; (d7998 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2bc>)
   d782e:	4630      	mov	r0, r6
   d7830:	f003 ff86 	bl	db740 <strcmp>
   d7834:	b908      	cbnz	r0, d783a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x15e>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d7836:	2300      	movs	r3, #0
   d7838:	e000      	b.n	d783c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x160>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d783a:	2302      	movs	r3, #2
   d783c:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d7840:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d7844:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d7848:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d784c:	2f00      	cmp	r7, #0
   d784e:	f000 809b 	beq.w	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d7852:	4631      	mov	r1, r6
   d7854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d7856:	f003 ff73 	bl	db740 <strcmp>
   d785a:	2800      	cmp	r0, #0
   d785c:	f280 8090 	bge.w	d7980 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a4>
   d7860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d7862:	e7ef      	b.n	d7844 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x168>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d7864:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d7868:	2902      	cmp	r1, #2
   d786a:	d071      	beq.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d786c:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d7870:	2b00      	cmp	r3, #0
   d7872:	d06d      	beq.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    switch(COMBINE(curSentenceType, curTermNumber))
   d7874:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d7878:	3a01      	subs	r2, #1
   d787a:	2a28      	cmp	r2, #40	; 0x28
   d787c:	d868      	bhi.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   d787e:	e8df f002 	tbb	[pc, r2]
   d7882:	2115      	.short	0x2115
   d7884:	49322b24 	.word	0x49322b24
   d7888:	675c5750 	.word	0x675c5750
   d788c:	67676761 	.word	0x67676761
   d7890:	67676767 	.word	0x67676767
   d7894:	67676767 	.word	0x67676767
   d7898:	67676767 	.word	0x67676767
   d789c:	67676767 	.word	0x67676767
   d78a0:	1c156767 	.word	0x1c156767
   d78a4:	322b2421 	.word	0x322b2421
   d78a8:	3e39      	.short	0x3e39
   d78aa:	43          	.byte	0x43
   d78ab:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
	  tempData.time.setTime(term);
   d78ac:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d78b0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d78b4:	f7ff fece 	bl	d7654 <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d78b8:	e04a      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d78ba:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d78be:	4243      	negs	r3, r0
   d78c0:	4143      	adcs	r3, r0
   d78c2:	e02b      	b.n	d791c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d78c4:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   d78c8:	e008      	b.n	d78dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      tempData.location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d78ca:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d78ce:	424b      	negs	r3, r1
   d78d0:	414b      	adcs	r3, r1
   d78d2:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d78d6:	e03b      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d78d8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d78dc:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d78e0:	f7ff fe08 	bl	d74f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d78e4:	e034      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      tempData.location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d78e6:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d78ea:	4253      	negs	r3, r2
   d78ec:	4153      	adcs	r3, r2
   d78ee:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d78f2:	e02d      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
	  tempData.speed.set(term);
   d78f4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d78f8:	f500 7088 	add.w	r0, r0, #272	; 0x110
   d78fc:	e026      	b.n	d794c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
	  tempData.course.set(term);
   d78fe:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7902:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d7906:	e021      	b.n	d794c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
	  tempData.date.setDate(term);
   d7908:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d790c:	30f0      	adds	r0, #240	; 0xf0
   d790e:	f7ff fea8 	bl	d7662 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d7912:	e01d      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d7914:	2b30      	cmp	r3, #48	; 0x30
   d7916:	bf94      	ite	ls
   d7918:	2300      	movls	r3, #0
   d791a:	2301      	movhi	r3, #1
   d791c:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d7920:	e016      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
	  tempData.satellites.set(term);
   d7922:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7926:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d792a:	f7ff febe 	bl	d76aa <_ZN14TinyGPSInteger3setEPKc>
      break;
   d792e:	e00f      	b.n	d7950 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x274>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
	  tempData.hdop.set(term);
   d7930:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7934:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d7938:	e008      	b.n	d794c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
	  tempData.altitude.set(term);
   d793a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d793e:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d7942:	e003      	b.n	d794c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x270>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 11): // Geoid Separation (GPGGA) (difference between ellipsoid and mean sea level)
	  tempData.geoidSeparation.set(term);
   d7944:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d7948:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d794c:	f7ff fe9b 	bl	d7686 <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d7950:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
    if (p->termNumber == curTermNumber)
         p->set(term);
   d7954:	f504 77b9 	add.w	r7, r4, #370	; 0x172
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d7958:	b1b6      	cbz	r6, d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d795a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d795e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d7960:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d7962:	f003 feed 	bl	db740 <strcmp>
   d7966:	b978      	cbnz	r0, d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
   d7968:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d796a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d796e:	429a      	cmp	r2, r3
   d7970:	dc0a      	bgt.n	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
    if (p->termNumber == curTermNumber)
   d7972:	d103      	bne.n	d797c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2a0>
         p->set(term);
   d7974:	4639      	mov	r1, r7
   d7976:	4630      	mov	r0, r6
   d7978:	f7ff fead 	bl	d76d6 <_ZN13TinyGPSCustom3setEPKc>
	  tempData.geoidSeparation.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d797c:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d797e:	e7eb      	b.n	d7958 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x27c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d7980:	d002      	beq.n	d7988 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>
       customCandidates = NULL;
   d7982:	2300      	movs	r3, #0
   d7984:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d7988:	4628      	mov	r0, r5
   d798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d798c:	000dd270 	.word	0x000dd270
   d7990:	000dd276 	.word	0x000dd276
   d7994:	000dd27c 	.word	0x000dd27c
   d7998:	000dd282 	.word	0x000dd282

000d799c <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d799c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d799e:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190

  switch(c)
   d79a2:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d79a4:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d79a8:	4604      	mov	r4, r0
   d79aa:	460d      	mov	r5, r1
  ++encodedCharCount;
   d79ac:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190

  switch(c)
   d79b0:	d02a      	beq.n	d7a08 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d79b2:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d79b6:	d804      	bhi.n	d79c2 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d79b8:	290a      	cmp	r1, #10
   d79ba:	d00c      	beq.n	d79d6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d79bc:	290d      	cmp	r1, #13
   d79be:	d132      	bne.n	d7a26 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d79c0:	e009      	b.n	d79d6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d79c2:	292a      	cmp	r1, #42	; 0x2a
   d79c4:	d007      	beq.n	d79d6 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d79c6:	292c      	cmp	r1, #44	; 0x2c
   d79c8:	d12d      	bne.n	d7a26 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d79ca:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d79ce:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d79d2:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d79d6:	2b0e      	cmp	r3, #14
   d79d8:	f04f 0000 	mov.w	r0, #0
   d79dc:	d805      	bhi.n	d79ea <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d79de:	4423      	add	r3, r4
   d79e0:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d79e4:	4620      	mov	r0, r4
   d79e6:	f7ff fe79 	bl	d76dc <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d79ea:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d79ee:	3301      	adds	r3, #1
   d79f0:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d79f4:	2300      	movs	r3, #0
   d79f6:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d79fa:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d79fe:	425d      	negs	r5, r3
   d7a00:	415d      	adcs	r5, r3
   d7a02:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
      return isValidSentence;
   d7a06:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7a08:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d7a0a:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d7a0c:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
   d7a10:	f884 0182 	strb.w	r0, [r4, #386]	; 0x182
    parity = 0;
   d7a14:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d7a18:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    isChecksumTerm = false;
   d7a1c:	f884 0171 	strb.w	r0, [r4, #369]	; 0x171
    sentenceHasFix = false;
   d7a20:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d7a24:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d7a26:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d7a28:	bf9f      	itttt	ls
   d7a2a:	1c5a      	addls	r2, r3, #1
   d7a2c:	191b      	addls	r3, r3, r4
   d7a2e:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d7a32:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d7a36:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d7a3a:	b928      	cbnz	r0, d7a48 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d7a3c:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d7a40:	404d      	eors	r5, r1
   d7a42:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d7a46:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d7a48:	2000      	movs	r0, #0
  }

  return false;
}
   d7a4a:	bd38      	pop	{r3, r4, r5, pc}

000d7a4c <_GLOBAL__sub_I__Z7radiansd>:
   d7a4c:	f000 b994 	b.w	d7d78 <HAL_Pin_Map>

000d7a50 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7a50:	b513      	push	{r0, r1, r4, lr}
   d7a52:	460b      	mov	r3, r1
   d7a54:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a56:	c803      	ldmia	r0, {r0, r1}
   d7a58:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a5c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a60:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a64:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7a68:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7a6c:	b002      	add	sp, #8
   d7a6e:	bd10      	pop	{r4, pc}

000d7a70 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d7a70:	b508      	push	{r3, lr}
   d7a72:	4b04      	ldr	r3, [pc, #16]	; (d7a84 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d7a74:	2201      	movs	r2, #1
   d7a76:	701a      	strb	r2, [r3, #0]
   d7a78:	f000 f97e 	bl	d7d78 <HAL_Pin_Map>
   d7a7c:	4b02      	ldr	r3, [pc, #8]	; (d7a88 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d7a7e:	4a03      	ldr	r2, [pc, #12]	; (d7a8c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x1c>)
   d7a80:	601a      	str	r2, [r3, #0]
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	2003e254 	.word	0x2003e254
   d7a88:	2003e250 	.word	0x2003e250
   d7a8c:	000dd601 	.word	0x000dd601

000d7a90 <_GLOBAL__sub_I_CellularHelper>:
   d7a90:	f000 b972 	b.w	d7d78 <HAL_Pin_Map>

000d7a94 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d7a94:	4770      	bx	lr

000d7a96 <_ZN9LIS3DHSPID0Ev>:
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7a96:	b510      	push	{r4, lr}
}
   d7a98:	2128      	movs	r1, #40	; 0x28
//

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
   d7a9a:	4604      	mov	r4, r0
}
   d7a9c:	f002 fb51 	bl	da142 <_ZdlPvj>
   d7aa0:	4620      	mov	r0, r4
   d7aa2:	bd10      	pop	{r4, pc}

000d7aa4 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d7aa4:	b510      	push	{r4, lr}
   d7aa6:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d7aa8:	f100 0118 	add.w	r1, r0, #24
   d7aac:	68c0      	ldr	r0, [r0, #12]
   d7aae:	f001 fd77 	bl	d95a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

	digitalWrite(ss, LOW);
   d7ab2:	8a20      	ldrh	r0, [r4, #16]
   d7ab4:	2100      	movs	r1, #0
}
   d7ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::beginTransaction() {
	spi.beginTransaction(spiSettings);

	digitalWrite(ss, LOW);
   d7aba:	f002 bad0 	b.w	da05e <digitalWrite>

000d7abe <_ZN9LIS3DHSPI14endTransactionEv>:
}

void LIS3DHSPI::endTransaction() {
   d7abe:	b510      	push	{r4, lr}
   d7ac0:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d7ac2:	2101      	movs	r1, #1
   d7ac4:	8a00      	ldrh	r0, [r0, #16]
   d7ac6:	f002 faca 	bl	da05e <digitalWrite>

	spi.endTransaction();
   d7aca:	68e0      	ldr	r0, [r4, #12]
}
   d7acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void LIS3DHSPI::endTransaction() {
	digitalWrite(ss, HIGH);

	spi.endTransaction();
   d7ad0:	f001 bd4d 	b.w	d956e <_ZN8SPIClass14endTransactionEv>

000d7ad4 <_ZN9LIS3DHSPI8readDataEhPhj>:
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ad6:	461e      	mov	r6, r3
	beginTransaction();
   d7ad8:	6803      	ldr	r3, [r0, #0]
   d7ada:	695b      	ldr	r3, [r3, #20]
	digitalWrite(ss, HIGH);

	spi.endTransaction();
}

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d7adc:	460f      	mov	r7, r1
   d7ade:	4614      	mov	r4, r2
   d7ae0:	4605      	mov	r5, r0
	beginTransaction();
   d7ae2:	4798      	blx	r3

	if (numBytes > 1) {
   d7ae4:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7ae6:	bf88      	it	hi
   d7ae8:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d7aec:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7af0:	68e8      	ldr	r0, [r5, #12]
   d7af2:	f001 fdc5 	bl	d9680 <_ZN8SPIClass8transferEh>
   d7af6:	4426      	add	r6, r4

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7af8:	42b4      	cmp	r4, r6
   d7afa:	d006      	beq.n	d7b0a <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d7afc:	2100      	movs	r1, #0
   d7afe:	68e8      	ldr	r0, [r5, #12]
   d7b00:	f001 fdbe 	bl	d9680 <_ZN8SPIClass8transferEh>
   d7b04:	f804 0b01 	strb.w	r0, [r4], #1
		addr |= SPI_INCREMENT;
	}

	spi.transfer(SPI_READ | addr);

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7b08:	e7f6      	b.n	d7af8 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
		buf[ii] = spi.transfer(0);
	}

	endTransaction();
   d7b0a:	682b      	ldr	r3, [r5, #0]
   d7b0c:	4628      	mov	r0, r5
   d7b0e:	699b      	ldr	r3, [r3, #24]
   d7b10:	4798      	blx	r3

	return true;
}
   d7b12:	2001      	movs	r0, #1
   d7b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b16 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b18:	461e      	mov	r6, r3
	beginTransaction();
   d7b1a:	6803      	ldr	r3, [r0, #0]
   d7b1c:	695b      	ldr	r3, [r3, #20]
	endTransaction();

	return true;
}

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7b1e:	460f      	mov	r7, r1
   d7b20:	4614      	mov	r4, r2
   d7b22:	4605      	mov	r5, r0
	beginTransaction();
   d7b24:	4798      	blx	r3

	if (numBytes > 1) {
   d7b26:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7b28:	bf88      	it	hi
   d7b2a:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d7b2e:	4639      	mov	r1, r7
   d7b30:	68e8      	ldr	r0, [r5, #12]
   d7b32:	f001 fda5 	bl	d9680 <_ZN8SPIClass8transferEh>
   d7b36:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7b38:	42b4      	cmp	r4, r6
   d7b3a:	d005      	beq.n	d7b48 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d7b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7b40:	68e8      	ldr	r0, [r5, #12]
   d7b42:	f001 fd9d 	bl	d9680 <_ZN8SPIClass8transferEh>
	if (numBytes > 1) {
		addr |= SPI_INCREMENT;
	}

	spi.transfer(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7b46:	e7f7      	b.n	d7b38 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
		spi.transfer(buf[ii]);
	}

	endTransaction();
   d7b48:	682b      	ldr	r3, [r5, #0]
   d7b4a:	4628      	mov	r0, r5
   d7b4c:	699b      	ldr	r3, [r3, #24]
   d7b4e:	4798      	blx	r3

	return true;
}
   d7b50:	2001      	movs	r0, #1
   d7b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b54 <_ZN6LIS3DHC1Ei>:

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d7b54:	4a02      	ldr	r2, [pc, #8]	; (d7b60 <_ZN6LIS3DHC1Ei+0xc>)
   d7b56:	6002      	str	r2, [r0, #0]
   d7b58:	2200      	movs	r2, #0
   d7b5a:	6041      	str	r1, [r0, #4]
   d7b5c:	7202      	strb	r2, [r0, #8]

}
   d7b5e:	4770      	bx	lr
   d7b60:	000dd638 	.word	0x000dd638

000d7b64 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d7b64:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
   d7b66:	6803      	ldr	r3, [r0, #0]
   d7b68:	aa01      	add	r2, sp, #4
   d7b6a:	68dc      	ldr	r4, [r3, #12]
   d7b6c:	2301      	movs	r3, #1
   d7b6e:	47a0      	blx	r4

	return resp[0];
}
   d7b70:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d7b74:	b002      	add	sp, #8
   d7b76:	bd10      	pop	{r4, pc}

000d7b78 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
   d7b78:	b538      	push	{r3, r4, r5, lr}
   d7b7a:	4605      	mov	r5, r0
   d7b7c:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d7b7e:	210f      	movs	r1, #15
   d7b80:	4628      	mov	r0, r5
   d7b82:	f7ff ffef 	bl	d7b64 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d7b86:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d7b88:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
   d7b8c:	d005      	beq.n	d7b9a <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
   d7b8e:	f000 fbfb 	bl	d8388 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
   d7b92:	3c01      	subs	r4, #1
   d7b94:	d1f3      	bne.n	d7b7e <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
   d7b96:	4620      	mov	r0, r4
   d7b98:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
   d7b9a:	bd38      	pop	{r3, r4, r5, pc}

000d7b9c <_ZN9LIS3DHSPI9hasDeviceEv>:
}

LIS3DHSPI::~LIS3DHSPI() {
}

bool LIS3DHSPI::hasDevice() {
   d7b9c:	b510      	push	{r4, lr}
   d7b9e:	4604      	mov	r4, r0
	spi.begin(ss);
   d7ba0:	8a01      	ldrh	r1, [r0, #16]
   d7ba2:	68c0      	ldr	r0, [r0, #12]
   d7ba4:	f001 fcd2 	bl	d954c <_ZN8SPIClass5beginEt>

	return LIS3DH::hasDevice();
   d7ba8:	4620      	mov	r0, r4
}
   d7baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

bool LIS3DHSPI::hasDevice() {
	spi.begin(ss);

	return LIS3DH::hasDevice();
   d7bae:	f7ff bfe3 	b.w	d7b78 <_ZN6LIS3DH9hasDeviceEv>

000d7bb2 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
   d7bb2:	f000 b8e1 	b.w	d7d78 <HAL_Pin_Map>
	...

000d7bb8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7bb8:	4b02      	ldr	r3, [pc, #8]	; (d7bc4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d7bba:	2201      	movs	r2, #1
   d7bbc:	701a      	strb	r2, [r3, #0]
   d7bbe:	f000 b8db 	b.w	d7d78 <HAL_Pin_Map>
   d7bc2:	bf00      	nop
   d7bc4:	2003e255 	.word	0x2003e255

000d7bc8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7bc8:	b508      	push	{r3, lr}
   d7bca:	4b02      	ldr	r3, [pc, #8]	; (d7bd4 <cellular_signal+0xc>)
   d7bcc:	681b      	ldr	r3, [r3, #0]
   d7bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7bd0:	9301      	str	r3, [sp, #4]
   d7bd2:	bd08      	pop	{r3, pc}
   d7bd4:	00030274 	.word	0x00030274

000d7bd8 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d7bd8:	b508      	push	{r3, lr}
   d7bda:	4b02      	ldr	r3, [pc, #8]	; (d7be4 <cellular_command+0xc>)
   d7bdc:	681b      	ldr	r3, [r3, #0]
   d7bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7be0:	9301      	str	r3, [sp, #4]
   d7be2:	bd08      	pop	{r3, pc}
   d7be4:	00030274 	.word	0x00030274

000d7be8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7be8:	b508      	push	{r3, lr}
   d7bea:	4b02      	ldr	r3, [pc, #8]	; (d7bf4 <os_thread_create+0xc>)
   d7bec:	681b      	ldr	r3, [r3, #0]
   d7bee:	685b      	ldr	r3, [r3, #4]
   d7bf0:	9301      	str	r3, [sp, #4]
   d7bf2:	bd08      	pop	{r3, pc}
   d7bf4:	00030248 	.word	0x00030248

000d7bf8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7bf8:	b508      	push	{r3, lr}
   d7bfa:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <os_thread_is_current+0xc>)
   d7bfc:	681b      	ldr	r3, [r3, #0]
   d7bfe:	689b      	ldr	r3, [r3, #8]
   d7c00:	9301      	str	r3, [sp, #4]
   d7c02:	bd08      	pop	{r3, pc}
   d7c04:	00030248 	.word	0x00030248

000d7c08 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c08:	b508      	push	{r3, lr}
   d7c0a:	4b02      	ldr	r3, [pc, #8]	; (d7c14 <os_thread_yield+0xc>)
   d7c0c:	681b      	ldr	r3, [r3, #0]
   d7c0e:	68db      	ldr	r3, [r3, #12]
   d7c10:	9301      	str	r3, [sp, #4]
   d7c12:	bd08      	pop	{r3, pc}
   d7c14:	00030248 	.word	0x00030248

000d7c18 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7c18:	b508      	push	{r3, lr}
   d7c1a:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <os_thread_join+0xc>)
   d7c1c:	681b      	ldr	r3, [r3, #0]
   d7c1e:	691b      	ldr	r3, [r3, #16]
   d7c20:	9301      	str	r3, [sp, #4]
   d7c22:	bd08      	pop	{r3, pc}
   d7c24:	00030248 	.word	0x00030248

000d7c28 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7c28:	b508      	push	{r3, lr}
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <os_thread_cleanup+0xc>)
   d7c2c:	681b      	ldr	r3, [r3, #0]
   d7c2e:	695b      	ldr	r3, [r3, #20]
   d7c30:	9301      	str	r3, [sp, #4]
   d7c32:	bd08      	pop	{r3, pc}
   d7c34:	00030248 	.word	0x00030248

000d7c38 <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7c38:	b508      	push	{r3, lr}
   d7c3a:	4b02      	ldr	r3, [pc, #8]	; (d7c44 <os_thread_scheduling+0xc>)
   d7c3c:	681b      	ldr	r3, [r3, #0]
   d7c3e:	69db      	ldr	r3, [r3, #28]
   d7c40:	9301      	str	r3, [sp, #4]
   d7c42:	bd08      	pop	{r3, pc}
   d7c44:	00030248 	.word	0x00030248

000d7c48 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7c48:	b508      	push	{r3, lr}
   d7c4a:	4b02      	ldr	r3, [pc, #8]	; (d7c54 <os_mutex_create+0xc>)
   d7c4c:	681b      	ldr	r3, [r3, #0]
   d7c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c50:	9301      	str	r3, [sp, #4]
   d7c52:	bd08      	pop	{r3, pc}
   d7c54:	00030248 	.word	0x00030248

000d7c58 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7c58:	b508      	push	{r3, lr}
   d7c5a:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <os_mutex_lock+0xc>)
   d7c5c:	681b      	ldr	r3, [r3, #0]
   d7c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7c60:	9301      	str	r3, [sp, #4]
   d7c62:	bd08      	pop	{r3, pc}
   d7c64:	00030248 	.word	0x00030248

000d7c68 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7c68:	b508      	push	{r3, lr}
   d7c6a:	4b02      	ldr	r3, [pc, #8]	; (d7c74 <os_mutex_unlock+0xc>)
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	bd08      	pop	{r3, pc}
   d7c74:	00030248 	.word	0x00030248

000d7c78 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c78:	b508      	push	{r3, lr}
   d7c7a:	4b02      	ldr	r3, [pc, #8]	; (d7c84 <os_mutex_recursive_create+0xc>)
   d7c7c:	681b      	ldr	r3, [r3, #0]
   d7c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c80:	9301      	str	r3, [sp, #4]
   d7c82:	bd08      	pop	{r3, pc}
   d7c84:	00030248 	.word	0x00030248

000d7c88 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7c88:	b508      	push	{r3, lr}
   d7c8a:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <os_mutex_recursive_destroy+0xc>)
   d7c8c:	681b      	ldr	r3, [r3, #0]
   d7c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c90:	9301      	str	r3, [sp, #4]
   d7c92:	bd08      	pop	{r3, pc}
   d7c94:	00030248 	.word	0x00030248

000d7c98 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <os_thread_exit+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030248 	.word	0x00030248

000d7ca8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <HAL_Feature_Set+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030234 	.word	0x00030234

000d7cb8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <HAL_Core_System_Reset_Ex+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030234 	.word	0x00030234

000d7cc8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030234 	.word	0x00030234

000d7cd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <HAL_RNG_GetRandomNumber+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	685b      	ldr	r3, [r3, #4]
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030218 	.word	0x00030218

000d7ce8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <HAL_Delay_Milliseconds+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	689b      	ldr	r3, [r3, #8]
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030218 	.word	0x00030218

000d7cf8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <HAL_Delay_Microseconds+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	68db      	ldr	r3, [r3, #12]
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030218 	.word	0x00030218

000d7d08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	695b      	ldr	r3, [r3, #20]
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030218 	.word	0x00030218

000d7d18 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <HAL_RTC_Get_UnixTime+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	69db      	ldr	r3, [r3, #28]
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030218 	.word	0x00030218

000d7d28 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <HAL_RTC_Set_UnixTime+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	6a1b      	ldr	r3, [r3, #32]
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030218 	.word	0x00030218

000d7d38 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <HAL_disable_irq+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030218 	.word	0x00030218

000d7d48 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <HAL_enable_irq+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030218 	.word	0x00030218

000d7d58 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <HAL_RTC_Time_Is_Valid+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030218 	.word	0x00030218

000d7d68 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <hal_timer_millis+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030218 	.word	0x00030218

000d7d78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <HAL_Pin_Map+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	681b      	ldr	r3, [r3, #0]
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	0003022c 	.word	0x0003022c

000d7d88 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <HAL_Pin_Mode+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	689b      	ldr	r3, [r3, #8]
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	0003022c 	.word	0x0003022c

000d7d98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <HAL_Get_Pin_Mode+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	68db      	ldr	r3, [r3, #12]
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	0003022c 	.word	0x0003022c

000d7da8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <HAL_GPIO_Write+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	691b      	ldr	r3, [r3, #16]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003022c 	.word	0x0003022c

000d7db8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <HAL_GPIO_Read+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	695b      	ldr	r3, [r3, #20]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003022c 	.word	0x0003022c

000d7dc8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <HAL_Interrupts_Attach+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	699b      	ldr	r3, [r3, #24]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003022c 	.word	0x0003022c

000d7dd8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <HAL_Interrupts_Detach+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	69db      	ldr	r3, [r3, #28]
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003022c 	.word	0x0003022c

000d7de8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <HAL_Interrupts_Enable_All+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	6a1b      	ldr	r3, [r3, #32]
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003022c 	.word	0x0003022c

000d7df8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <HAL_Interrupts_Disable_All+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003022c 	.word	0x0003022c

000d7e08 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <HAL_I2C_Begin+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	68db      	ldr	r3, [r3, #12]
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	00030228 	.word	0x00030228

000d7e18 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <HAL_I2C_Begin_Transmission+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	699b      	ldr	r3, [r3, #24]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	00030228 	.word	0x00030228

000d7e28 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <HAL_I2C_End_Transmission+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	69db      	ldr	r3, [r3, #28]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	00030228 	.word	0x00030228

000d7e38 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <HAL_I2C_Write_Data+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	6a1b      	ldr	r3, [r3, #32]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	00030228 	.word	0x00030228

000d7e48 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <HAL_I2C_Available_Data+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	00030228 	.word	0x00030228

000d7e58 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <HAL_I2C_Read_Data+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	00030228 	.word	0x00030228

000d7e68 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <HAL_I2C_Peek_Data+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	00030228 	.word	0x00030228

000d7e78 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <HAL_I2C_Flush_Data+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	00030228 	.word	0x00030228

000d7e88 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <HAL_I2C_Is_Enabled+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	00030228 	.word	0x00030228

000d7e98 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <HAL_I2C_Init+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030228 	.word	0x00030228

000d7ea8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <HAL_I2C_Acquire+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030228 	.word	0x00030228

000d7eb8 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <HAL_I2C_Release+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030228 	.word	0x00030228

000d7ec8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <HAL_I2C_Request_Data_Ex+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030228 	.word	0x00030228

000d7ed8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <inet_inet_ntop+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	695b      	ldr	r3, [r3, #20]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030264 	.word	0x00030264

000d7ee8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <netdb_freeaddrinfo+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	689b      	ldr	r3, [r3, #8]
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030268 	.word	0x00030268

000d7ef8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <netdb_getaddrinfo+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	68db      	ldr	r3, [r3, #12]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030268 	.word	0x00030268

000d7f08 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <HAL_SPI_Begin+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	681b      	ldr	r3, [r3, #0]
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030230 	.word	0x00030230

000d7f18 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <HAL_SPI_Send_Receive_Data+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	695b      	ldr	r3, [r3, #20]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030230 	.word	0x00030230

000d7f28 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <HAL_SPI_Init+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	69db      	ldr	r3, [r3, #28]
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030230 	.word	0x00030230

000d7f38 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <HAL_SPI_Is_Enabled+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	6a1b      	ldr	r3, [r3, #32]
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030230 	.word	0x00030230

000d7f48 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <HAL_SPI_Info+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030230 	.word	0x00030230

000d7f58 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <HAL_SPI_Set_Settings+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030230 	.word	0x00030230

000d7f68 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <HAL_SPI_Acquire+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030230 	.word	0x00030230

000d7f78 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <HAL_SPI_Release+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030230 	.word	0x00030230

000d7f88 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <HAL_USART_Init+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	681b      	ldr	r3, [r3, #0]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	0003023c 	.word	0x0003023c

000d7f98 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <HAL_USART_Write_Data+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	68db      	ldr	r3, [r3, #12]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	0003023c 	.word	0x0003023c

000d7fa8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <HAL_USART_Available_Data+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	691b      	ldr	r3, [r3, #16]
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	0003023c 	.word	0x0003023c

000d7fb8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <HAL_USART_Read_Data+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	695b      	ldr	r3, [r3, #20]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	0003023c 	.word	0x0003023c

000d7fc8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <HAL_USART_Peek_Data+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	699b      	ldr	r3, [r3, #24]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	0003023c 	.word	0x0003023c

000d7fd8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <HAL_USART_Flush_Data+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	69db      	ldr	r3, [r3, #28]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	0003023c 	.word	0x0003023c

000d7fe8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <HAL_USART_Is_Enabled+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	6a1b      	ldr	r3, [r3, #32]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	0003023c 	.word	0x0003023c

000d7ff8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <HAL_USART_Available_Data_For_Write+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	0003023c 	.word	0x0003023c

000d8008 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <HAL_USB_USART_Init+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	681b      	ldr	r3, [r3, #0]
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	0003024c 	.word	0x0003024c

000d8018 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <HAL_USB_USART_Begin+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	685b      	ldr	r3, [r3, #4]
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	0003024c 	.word	0x0003024c

000d8028 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <HAL_USB_USART_Available_Data+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	691b      	ldr	r3, [r3, #16]
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	0003024c 	.word	0x0003024c

000d8038 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	695b      	ldr	r3, [r3, #20]
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	0003024c 	.word	0x0003024c

000d8048 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <HAL_USB_USART_Receive_Data+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	699b      	ldr	r3, [r3, #24]
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	0003024c 	.word	0x0003024c

000d8058 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <HAL_USB_USART_Send_Data+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	69db      	ldr	r3, [r3, #28]
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	0003024c 	.word	0x0003024c

000d8068 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <HAL_USB_USART_Flush_Data+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	6a1b      	ldr	r3, [r3, #32]
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	0003024c 	.word	0x0003024c

000d8078 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <panic_+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	00030260 	.word	0x00030260

000d8088 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <log_message_v+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	00030260 	.word	0x00030260

000d8098 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b03      	ldr	r3, [pc, #12]	; (d80a8 <diag_get_source+0x10>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80a2:	9301      	str	r3, [sp, #4]
   d80a4:	bd08      	pop	{r3, pc}
   d80a6:	0000      	.short	0x0000
   d80a8:	00030260 	.word	0x00030260

000d80ac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <system_mode+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	681b      	ldr	r3, [r3, #0]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030220 	.word	0x00030220

000d80bc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <set_system_mode+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	685b      	ldr	r3, [r3, #4]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030220 	.word	0x00030220

000d80cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <system_delay_ms+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	695b      	ldr	r3, [r3, #20]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030220 	.word	0x00030220

000d80dc <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <system_sleep+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	699b      	ldr	r3, [r3, #24]
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030220 	.word	0x00030220

000d80ec <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <system_thread_set_state+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030220 	.word	0x00030220

000d80fc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <application_thread_current+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030220 	.word	0x00030220

000d810c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <application_thread_invoke+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030220 	.word	0x00030220

000d811c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <system_thread_get_state+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	00030220 	.word	0x00030220

000d812c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <system_notify_time_changed+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	00030220 	.word	0x00030220

000d813c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b03      	ldr	r3, [pc, #12]	; (d814c <system_ctrl_set_app_request_handler+0x10>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8146:	9301      	str	r3, [sp, #4]
   d8148:	bd08      	pop	{r3, pc}
   d814a:	0000      	.short	0x0000
   d814c:	00030220 	.word	0x00030220

000d8150 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b03      	ldr	r3, [pc, #12]	; (d8160 <system_ctrl_set_result+0x10>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d815a:	9301      	str	r3, [sp, #4]
   d815c:	bd08      	pop	{r3, pc}
   d815e:	0000      	.short	0x0000
   d8160:	00030220 	.word	0x00030220

000d8164 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b03      	ldr	r3, [pc, #12]	; (d8174 <system_power_management_set_config+0x10>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d816e:	9301      	str	r3, [sp, #4]
   d8170:	bd08      	pop	{r3, pc}
   d8172:	0000      	.short	0x0000
   d8174:	00030220 	.word	0x00030220

000d8178 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <spark_variable+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	681b      	ldr	r3, [r3, #0]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	00030244 	.word	0x00030244

000d8188 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <spark_function+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	685b      	ldr	r3, [r3, #4]
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	00030244 	.word	0x00030244

000d8198 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <spark_process+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	689b      	ldr	r3, [r3, #8]
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	00030244 	.word	0x00030244

000d81a8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <spark_cloud_flag_connect+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	68db      	ldr	r3, [r3, #12]
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	00030244 	.word	0x00030244

000d81b8 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <spark_cloud_flag_disconnect+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	691b      	ldr	r3, [r3, #16]
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	00030244 	.word	0x00030244

000d81c8 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b02      	ldr	r3, [pc, #8]	; (d81d4 <spark_cloud_flag_connected+0xc>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	695b      	ldr	r3, [r3, #20]
   d81d0:	9301      	str	r3, [sp, #4]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	00030244 	.word	0x00030244

000d81d8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d81d8:	b508      	push	{r3, lr}
   d81da:	4b02      	ldr	r3, [pc, #8]	; (d81e4 <spark_deviceID+0xc>)
   d81dc:	681b      	ldr	r3, [r3, #0]
   d81de:	69db      	ldr	r3, [r3, #28]
   d81e0:	9301      	str	r3, [sp, #4]
   d81e2:	bd08      	pop	{r3, pc}
   d81e4:	00030244 	.word	0x00030244

000d81e8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d81e8:	b508      	push	{r3, lr}
   d81ea:	4b02      	ldr	r3, [pc, #8]	; (d81f4 <spark_send_event+0xc>)
   d81ec:	681b      	ldr	r3, [r3, #0]
   d81ee:	6a1b      	ldr	r3, [r3, #32]
   d81f0:	9301      	str	r3, [sp, #4]
   d81f2:	bd08      	pop	{r3, pc}
   d81f4:	00030244 	.word	0x00030244

000d81f8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d81f8:	b508      	push	{r3, lr}
   d81fa:	4b02      	ldr	r3, [pc, #8]	; (d8204 <spark_subscribe+0xc>)
   d81fc:	681b      	ldr	r3, [r3, #0]
   d81fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8200:	9301      	str	r3, [sp, #4]
   d8202:	bd08      	pop	{r3, pc}
   d8204:	00030244 	.word	0x00030244

000d8208 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8208:	b508      	push	{r3, lr}
   d820a:	4b02      	ldr	r3, [pc, #8]	; (d8214 <spark_sync_time+0xc>)
   d820c:	681b      	ldr	r3, [r3, #0]
   d820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8210:	9301      	str	r3, [sp, #4]
   d8212:	bd08      	pop	{r3, pc}
   d8214:	00030244 	.word	0x00030244

000d8218 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8218:	b508      	push	{r3, lr}
   d821a:	4b02      	ldr	r3, [pc, #8]	; (d8224 <spark_sync_time_pending+0xc>)
   d821c:	681b      	ldr	r3, [r3, #0]
   d821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8220:	9301      	str	r3, [sp, #4]
   d8222:	bd08      	pop	{r3, pc}
   d8224:	00030244 	.word	0x00030244

000d8228 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d8228:	b508      	push	{r3, lr}
   d822a:	4b02      	ldr	r3, [pc, #8]	; (d8234 <spark_sync_time_last+0xc>)
   d822c:	681b      	ldr	r3, [r3, #0]
   d822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8230:	9301      	str	r3, [sp, #4]
   d8232:	bd08      	pop	{r3, pc}
   d8234:	00030244 	.word	0x00030244

000d8238 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8238:	b508      	push	{r3, lr}
   d823a:	4b02      	ldr	r3, [pc, #8]	; (d8244 <spark_set_random_seed_from_cloud_handler+0xc>)
   d823c:	681b      	ldr	r3, [r3, #0]
   d823e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8240:	9301      	str	r3, [sp, #4]
   d8242:	bd08      	pop	{r3, pc}
   d8244:	00030244 	.word	0x00030244

000d8248 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8248:	b508      	push	{r3, lr}
   d824a:	4b02      	ldr	r3, [pc, #8]	; (d8254 <network_connect+0xc>)
   d824c:	681b      	ldr	r3, [r3, #0]
   d824e:	685b      	ldr	r3, [r3, #4]
   d8250:	9301      	str	r3, [sp, #4]
   d8252:	bd08      	pop	{r3, pc}
   d8254:	00030240 	.word	0x00030240

000d8258 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8258:	b508      	push	{r3, lr}
   d825a:	4b02      	ldr	r3, [pc, #8]	; (d8264 <network_connecting+0xc>)
   d825c:	681b      	ldr	r3, [r3, #0]
   d825e:	689b      	ldr	r3, [r3, #8]
   d8260:	9301      	str	r3, [sp, #4]
   d8262:	bd08      	pop	{r3, pc}
   d8264:	00030240 	.word	0x00030240

000d8268 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8268:	b508      	push	{r3, lr}
   d826a:	4b02      	ldr	r3, [pc, #8]	; (d8274 <network_disconnect+0xc>)
   d826c:	681b      	ldr	r3, [r3, #0]
   d826e:	68db      	ldr	r3, [r3, #12]
   d8270:	9301      	str	r3, [sp, #4]
   d8272:	bd08      	pop	{r3, pc}
   d8274:	00030240 	.word	0x00030240

000d8278 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8278:	b508      	push	{r3, lr}
   d827a:	4b02      	ldr	r3, [pc, #8]	; (d8284 <network_ready+0xc>)
   d827c:	681b      	ldr	r3, [r3, #0]
   d827e:	691b      	ldr	r3, [r3, #16]
   d8280:	9301      	str	r3, [sp, #4]
   d8282:	bd08      	pop	{r3, pc}
   d8284:	00030240 	.word	0x00030240

000d8288 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8288:	b508      	push	{r3, lr}
   d828a:	4b02      	ldr	r3, [pc, #8]	; (d8294 <network_on+0xc>)
   d828c:	681b      	ldr	r3, [r3, #0]
   d828e:	695b      	ldr	r3, [r3, #20]
   d8290:	9301      	str	r3, [sp, #4]
   d8292:	bd08      	pop	{r3, pc}
   d8294:	00030240 	.word	0x00030240

000d8298 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8298:	b508      	push	{r3, lr}
   d829a:	4b02      	ldr	r3, [pc, #8]	; (d82a4 <network_off+0xc>)
   d829c:	681b      	ldr	r3, [r3, #0]
   d829e:	699b      	ldr	r3, [r3, #24]
   d82a0:	9301      	str	r3, [sp, #4]
   d82a2:	bd08      	pop	{r3, pc}
   d82a4:	00030240 	.word	0x00030240

000d82a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d82a8:	b508      	push	{r3, lr}
   d82aa:	4b02      	ldr	r3, [pc, #8]	; (d82b4 <network_listen+0xc>)
   d82ac:	681b      	ldr	r3, [r3, #0]
   d82ae:	69db      	ldr	r3, [r3, #28]
   d82b0:	9301      	str	r3, [sp, #4]
   d82b2:	bd08      	pop	{r3, pc}
   d82b4:	00030240 	.word	0x00030240

000d82b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d82b8:	b508      	push	{r3, lr}
   d82ba:	4b02      	ldr	r3, [pc, #8]	; (d82c4 <network_listening+0xc>)
   d82bc:	681b      	ldr	r3, [r3, #0]
   d82be:	6a1b      	ldr	r3, [r3, #32]
   d82c0:	9301      	str	r3, [sp, #4]
   d82c2:	bd08      	pop	{r3, pc}
   d82c4:	00030240 	.word	0x00030240

000d82c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d82c8:	b508      	push	{r3, lr}
   d82ca:	4b02      	ldr	r3, [pc, #8]	; (d82d4 <network_set_listen_timeout+0xc>)
   d82cc:	681b      	ldr	r3, [r3, #0]
   d82ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82d0:	9301      	str	r3, [sp, #4]
   d82d2:	bd08      	pop	{r3, pc}
   d82d4:	00030240 	.word	0x00030240

000d82d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d82d8:	b508      	push	{r3, lr}
   d82da:	4b02      	ldr	r3, [pc, #8]	; (d82e4 <network_get_listen_timeout+0xc>)
   d82dc:	681b      	ldr	r3, [r3, #0]
   d82de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d82e0:	9301      	str	r3, [sp, #4]
   d82e2:	bd08      	pop	{r3, pc}
   d82e4:	00030240 	.word	0x00030240

000d82e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d82e8:	b508      	push	{r3, lr}
   d82ea:	4b02      	ldr	r3, [pc, #8]	; (d82f4 <malloc+0xc>)
   d82ec:	681b      	ldr	r3, [r3, #0]
   d82ee:	681b      	ldr	r3, [r3, #0]
   d82f0:	9301      	str	r3, [sp, #4]
   d82f2:	bd08      	pop	{r3, pc}
   d82f4:	0003021c 	.word	0x0003021c

000d82f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d82f8:	b508      	push	{r3, lr}
   d82fa:	4b02      	ldr	r3, [pc, #8]	; (d8304 <free+0xc>)
   d82fc:	681b      	ldr	r3, [r3, #0]
   d82fe:	685b      	ldr	r3, [r3, #4]
   d8300:	9301      	str	r3, [sp, #4]
   d8302:	bd08      	pop	{r3, pc}
   d8304:	0003021c 	.word	0x0003021c

000d8308 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8308:	b508      	push	{r3, lr}
   d830a:	4b02      	ldr	r3, [pc, #8]	; (d8314 <realloc+0xc>)
   d830c:	681b      	ldr	r3, [r3, #0]
   d830e:	689b      	ldr	r3, [r3, #8]
   d8310:	9301      	str	r3, [sp, #4]
   d8312:	bd08      	pop	{r3, pc}
   d8314:	0003021c 	.word	0x0003021c

000d8318 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8318:	b508      	push	{r3, lr}
   d831a:	4b02      	ldr	r3, [pc, #8]	; (d8324 <siprintf+0xc>)
   d831c:	681b      	ldr	r3, [r3, #0]
   d831e:	691b      	ldr	r3, [r3, #16]
   d8320:	9301      	str	r3, [sp, #4]
   d8322:	bd08      	pop	{r3, pc}
   d8324:	0003021c 	.word	0x0003021c

000d8328 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d8328:	b508      	push	{r3, lr}
   d832a:	4b02      	ldr	r3, [pc, #8]	; (d8334 <siscanf+0xc>)
   d832c:	681b      	ldr	r3, [r3, #0]
   d832e:	699b      	ldr	r3, [r3, #24]
   d8330:	9301      	str	r3, [sp, #4]
   d8332:	bd08      	pop	{r3, pc}
   d8334:	0003021c 	.word	0x0003021c

000d8338 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8338:	b508      	push	{r3, lr}
   d833a:	4b02      	ldr	r3, [pc, #8]	; (d8344 <snprintf+0xc>)
   d833c:	681b      	ldr	r3, [r3, #0]
   d833e:	69db      	ldr	r3, [r3, #28]
   d8340:	9301      	str	r3, [sp, #4]
   d8342:	bd08      	pop	{r3, pc}
   d8344:	0003021c 	.word	0x0003021c

000d8348 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d8348:	b508      	push	{r3, lr}
   d834a:	4b02      	ldr	r3, [pc, #8]	; (d8354 <sniprintf+0xc>)
   d834c:	681b      	ldr	r3, [r3, #0]
   d834e:	6a1b      	ldr	r3, [r3, #32]
   d8350:	9301      	str	r3, [sp, #4]
   d8352:	bd08      	pop	{r3, pc}
   d8354:	0003021c 	.word	0x0003021c

000d8358 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8358:	b508      	push	{r3, lr}
   d835a:	4b02      	ldr	r3, [pc, #8]	; (d8364 <vsnprintf+0xc>)
   d835c:	681b      	ldr	r3, [r3, #0]
   d835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8360:	9301      	str	r3, [sp, #4]
   d8362:	bd08      	pop	{r3, pc}
   d8364:	0003021c 	.word	0x0003021c

000d8368 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8368:	b508      	push	{r3, lr}
   d836a:	4b02      	ldr	r3, [pc, #8]	; (d8374 <abort+0xc>)
   d836c:	681b      	ldr	r3, [r3, #0]
   d836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8370:	9301      	str	r3, [sp, #4]
   d8372:	bd08      	pop	{r3, pc}
   d8374:	0003021c 	.word	0x0003021c

000d8378 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8378:	b508      	push	{r3, lr}
   d837a:	4b02      	ldr	r3, [pc, #8]	; (d8384 <_malloc_r+0xc>)
   d837c:	681b      	ldr	r3, [r3, #0]
   d837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8380:	9301      	str	r3, [sp, #4]
   d8382:	bd08      	pop	{r3, pc}
   d8384:	0003021c 	.word	0x0003021c

000d8388 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8388:	2100      	movs	r1, #0
   d838a:	f7ff be9f 	b.w	d80cc <system_delay_ms>

000d838e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d838e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8390:	6883      	ldr	r3, [r0, #8]
   d8392:	4604      	mov	r4, r0
   d8394:	b90b      	cbnz	r3, d839a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8396:	f001 fef0 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d839a:	68c3      	ldr	r3, [r0, #12]
   d839c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d839e:	68a3      	ldr	r3, [r4, #8]
   d83a0:	b11b      	cbz	r3, d83aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83a2:	2203      	movs	r2, #3
   d83a4:	4621      	mov	r1, r4
   d83a6:	4620      	mov	r0, r4
   d83a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83aa:	4620      	mov	r0, r4
   d83ac:	2110      	movs	r1, #16
}
   d83ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83b2:	f001 bec6 	b.w	da142 <_ZdlPvj>

000d83b6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d83b6:	b510      	push	{r4, lr}
   d83b8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d83ba:	6800      	ldr	r0, [r0, #0]
   d83bc:	b108      	cbz	r0, d83c2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d83be:	f7ff fc63 	bl	d7c88 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d83c2:	4620      	mov	r0, r4
   d83c4:	bd10      	pop	{r4, pc}

000d83c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d83c6:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d83c8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d83ca:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d83cc:	689b      	ldr	r3, [r3, #8]
   d83ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d83d0:	68a3      	ldr	r3, [r4, #8]
   d83d2:	3b01      	subs	r3, #1
   d83d4:	60a3      	str	r3, [r4, #8]
   d83d6:	b92b      	cbnz	r3, d83e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d83d8:	6823      	ldr	r3, [r4, #0]
   d83da:	4620      	mov	r0, r4
   d83dc:	68db      	ldr	r3, [r3, #12]
        }
    }
   d83de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d83e2:	4718      	bx	r3
   d83e4:	bd10      	pop	{r4, pc}

000d83e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d83e6:	680b      	ldr	r3, [r1, #0]
   d83e8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d83ea:	b113      	cbz	r3, d83f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d83ec:	685a      	ldr	r2, [r3, #4]
   d83ee:	3201      	adds	r2, #1
   d83f0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d83f2:	4770      	bx	lr

000d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d83f4:	b510      	push	{r4, lr}
   d83f6:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d83f8:	6800      	ldr	r0, [r0, #0]
   d83fa:	b128      	cbz	r0, d8408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d83fc:	6843      	ldr	r3, [r0, #4]
   d83fe:	3b01      	subs	r3, #1
   d8400:	6043      	str	r3, [r0, #4]
   d8402:	b90b      	cbnz	r3, d8408 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8404:	f7ff ffdf 	bl	d83c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d8408:	4620      	mov	r0, r4
   d840a:	bd10      	pop	{r4, pc}

000d840c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d840c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d840e:	4c06      	ldr	r4, [pc, #24]	; (d8428 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8410:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8412:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8414:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8416:	f7ff fc2f 	bl	d7c78 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d841a:	4620      	mov	r0, r4
   d841c:	4a03      	ldr	r2, [pc, #12]	; (d842c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d841e:	4904      	ldr	r1, [pc, #16]	; (d8430 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8424:	f001 be88 	b.w	da138 <__aeabi_atexit>
   d8428:	2003e258 	.word	0x2003e258
   d842c:	2003dea8 	.word	0x2003dea8
   d8430:	000d83b7 	.word	0x000d83b7

000d8434 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8434:	2200      	movs	r2, #0
   d8436:	4611      	mov	r1, r2
   d8438:	6840      	ldr	r0, [r0, #4]
   d843a:	f7ff bf1d 	b.w	d8278 <network_ready>

000d843e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d843e:	2200      	movs	r2, #0
   d8440:	4611      	mov	r1, r2
   d8442:	6840      	ldr	r0, [r0, #4]
   d8444:	f7ff bf38 	b.w	d82b8 <network_listening>

000d8448 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8448:	2200      	movs	r2, #0
   d844a:	4611      	mov	r1, r2
   d844c:	6840      	ldr	r0, [r0, #4]
   d844e:	f7ff bf43 	b.w	d82d8 <network_get_listen_timeout>

000d8452 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8452:	2200      	movs	r2, #0
   d8454:	6840      	ldr	r0, [r0, #4]
   d8456:	f7ff bf37 	b.w	d82c8 <network_set_listen_timeout>

000d845a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d845a:	2200      	movs	r2, #0
   d845c:	f081 0101 	eor.w	r1, r1, #1
   d8460:	6840      	ldr	r0, [r0, #4]
   d8462:	f7ff bf21 	b.w	d82a8 <network_listen>

000d8466 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d8466:	2300      	movs	r3, #0
   d8468:	461a      	mov	r2, r3
   d846a:	4619      	mov	r1, r3
   d846c:	6840      	ldr	r0, [r0, #4]
   d846e:	f7ff bf13 	b.w	d8298 <network_off>

000d8472 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8472:	2300      	movs	r3, #0
   d8474:	461a      	mov	r2, r3
   d8476:	4619      	mov	r1, r3
   d8478:	6840      	ldr	r0, [r0, #4]
   d847a:	f7ff bf05 	b.w	d8288 <network_on>

000d847e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d847e:	2200      	movs	r2, #0
   d8480:	4611      	mov	r1, r2
   d8482:	6840      	ldr	r0, [r0, #4]
   d8484:	f7ff bee8 	b.w	d8258 <network_connecting>

000d8488 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8488:	2200      	movs	r2, #0
   d848a:	2102      	movs	r1, #2
   d848c:	6840      	ldr	r0, [r0, #4]
   d848e:	f7ff beeb 	b.w	d8268 <network_disconnect>

000d8492 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8492:	2300      	movs	r3, #0
   d8494:	461a      	mov	r2, r3
   d8496:	6840      	ldr	r0, [r0, #4]
   d8498:	f7ff bed6 	b.w	d8248 <network_connect>

000d849c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d849c:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d849e:	4b1b      	ldr	r3, [pc, #108]	; (d850c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d84a0:	6003      	str	r3, [r0, #0]
   d84a2:	2500      	movs	r5, #0
   d84a4:	460f      	mov	r7, r1
   d84a6:	3328      	adds	r3, #40	; 0x28
   d84a8:	2618      	movs	r6, #24
   d84aa:	b089      	sub	sp, #36	; 0x24
   d84ac:	6043      	str	r3, [r0, #4]
   d84ae:	6085      	str	r5, [r0, #8]
   d84b0:	60c5      	str	r5, [r0, #12]
   d84b2:	4632      	mov	r2, r6
   d84b4:	4629      	mov	r1, r5
   d84b6:	4604      	mov	r4, r0
   d84b8:	3010      	adds	r0, #16
   d84ba:	f002 fec3 	bl	db244 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d84be:	462a      	mov	r2, r5
   d84c0:	4629      	mov	r1, r5
   d84c2:	6878      	ldr	r0, [r7, #4]
   d84c4:	f7ff fed8 	bl	d8278 <network_ready>
   d84c8:	b908      	cbnz	r0, d84ce <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d84ca:	60a0      	str	r0, [r4, #8]
            return sig;
   d84cc:	e01b      	b.n	d8506 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d84ce:	4629      	mov	r1, r5
   d84d0:	4632      	mov	r2, r6
   d84d2:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d84d4:	9500      	str	r5, [sp, #0]
   d84d6:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d84d8:	f002 feb4 	bl	db244 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84dc:	a902      	add	r1, sp, #8
   d84de:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d84e0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84e4:	f7ff fb70 	bl	d7bc8 <cellular_signal>
   d84e8:	b110      	cbz	r0, d84f0 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d84ea:	2301      	movs	r3, #1
   d84ec:	60a3      	str	r3, [r4, #8]
            return sig;
   d84ee:	e00a      	b.n	d8506 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d84f0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d84f2:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d84f4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d84f6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d84f8:	b90b      	cbnz	r3, d84fe <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d84fa:	2302      	movs	r3, #2
   d84fc:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d84fe:	a902      	add	r1, sp, #8
   d8500:	4620      	mov	r0, r4
   d8502:	f000 f889 	bl	d8618 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d8506:	4620      	mov	r0, r4
   d8508:	b009      	add	sp, #36	; 0x24
   d850a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d850c:	000dd688 	.word	0x000dd688

000d8510 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8510:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8512:	4c08      	ldr	r4, [pc, #32]	; (d8534 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8514:	2528      	movs	r5, #40	; 0x28
   d8516:	462a      	mov	r2, r5
   d8518:	2100      	movs	r1, #0
   d851a:	4620      	mov	r0, r4
   d851c:	f002 fe92 	bl	db244 <memset>
        cid = -1;
   d8520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8524:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8526:	4b04      	ldr	r3, [pc, #16]	; (d8538 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8528:	8025      	strh	r5, [r4, #0]
   d852a:	2204      	movs	r2, #4
   d852c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d852e:	4a03      	ldr	r2, [pc, #12]	; (d853c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8530:	601a      	str	r2, [r3, #0]
   d8532:	bd38      	pop	{r3, r4, r5, pc}
   d8534:	2003e264 	.word	0x2003e264
   d8538:	2003e25c 	.word	0x2003e25c
   d853c:	000dd654 	.word	0x000dd654

000d8540 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8540:	4770      	bx	lr

000d8542 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8542:	7d00      	ldrb	r0, [r0, #20]
   d8544:	4770      	bx	lr
	...

000d8548 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8548:	7d03      	ldrb	r3, [r0, #20]
   d854a:	b11b      	cbz	r3, d8554 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d854c:	6983      	ldr	r3, [r0, #24]
   d854e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8552:	d102      	bne.n	d855a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d8554:	ed9f 0a05 	vldr	s0, [pc, #20]	; d856c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8558:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d855a:	ee07 3a90 	vmov	s15, r3
   d855e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8570 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d8562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8566:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d856a:	4770      	bx	lr
   d856c:	00000000 	.word	0x00000000
   d8570:	42c80000 	.word	0x42c80000

000d8574 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8574:	7d03      	ldrb	r3, [r0, #20]
   d8576:	b11b      	cbz	r3, d8580 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d8578:	6a03      	ldr	r3, [r0, #32]
   d857a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d857e:	d102      	bne.n	d8586 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d8580:	ed9f 0a05 	vldr	s0, [pc, #20]	; d8598 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8584:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d8586:	ee07 3a90 	vmov	s15, r3
   d858a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d859c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d858e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8592:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d8596:	4770      	bx	lr
   d8598:	00000000 	.word	0x00000000
   d859c:	42c80000 	.word	0x42c80000

000d85a0 <_ZN14CellularSignalD0Ev>:
   d85a0:	b510      	push	{r4, lr}
   d85a2:	2128      	movs	r1, #40	; 0x28
   d85a4:	4604      	mov	r4, r0
   d85a6:	f001 fdcc 	bl	da142 <_ZdlPvj>
   d85aa:	4620      	mov	r0, r4
   d85ac:	bd10      	pop	{r4, pc}
	...

000d85b0 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d85b0:	7d03      	ldrb	r3, [r0, #20]
   d85b2:	b17b      	cbz	r3, d85d4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d85b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d85b6:	2b00      	cmp	r3, #0
   d85b8:	db0c      	blt.n	d85d4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d85ba:	ee07 3a90 	vmov	s15, r3
   d85be:	eddf 6a07 	vldr	s13, [pc, #28]	; d85dc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d85c2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d85e0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d85c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d85ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d85ce:	ee27 0a80 	vmul.f32	s0, s15, s0
   d85d2:	4770      	bx	lr
    }

    return -1.0f;
   d85d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d85d8:	4770      	bx	lr
   d85da:	bf00      	nop
   d85dc:	477fff00 	.word	0x477fff00
   d85e0:	42c80000 	.word	0x42c80000

000d85e4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d85e4:	7d03      	ldrb	r3, [r0, #20]
   d85e6:	b17b      	cbz	r3, d8608 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d85e8:	69c3      	ldr	r3, [r0, #28]
   d85ea:	2b00      	cmp	r3, #0
   d85ec:	db0c      	blt.n	d8608 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d85ee:	ee07 3a90 	vmov	s15, r3
   d85f2:	eddf 6a07 	vldr	s13, [pc, #28]	; d8610 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d85f6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d8614 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d85fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d85fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d8602:	ee27 0a80 	vmul.f32	s0, s15, s0
   d8606:	4770      	bx	lr
    }

    return -1.0f;
   d8608:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d860c:	4770      	bx	lr
   d860e:	bf00      	nop
   d8610:	477fff00 	.word	0x477fff00
   d8614:	42c80000 	.word	0x42c80000

000d8618 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d8618:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d861a:	460d      	mov	r5, r1
   d861c:	f100 0410 	add.w	r4, r0, #16
   d8620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8624:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8628:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d862c:	2001      	movs	r0, #1
   d862e:	bd30      	pop	{r4, r5, pc}

000d8630 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d8630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8634:	4607      	mov	r7, r0
   d8636:	460c      	mov	r4, r1
{
    if (base == 0) {
   d8638:	4615      	mov	r5, r2
   d863a:	b92a      	cbnz	r2, d8648 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d863c:	6803      	ldr	r3, [r0, #0]
   d863e:	b2c9      	uxtb	r1, r1
   d8640:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d8642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d8646:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d8648:	2900      	cmp	r1, #0
   d864a:	da07      	bge.n	d865c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d864c:	2a0a      	cmp	r2, #10
   d864e:	d105      	bne.n	d865c <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d8650:	212d      	movs	r1, #45	; 0x2d
   d8652:	f000 fe19 	bl	d9288 <_ZN5Print5printEc>
            val = -n;
   d8656:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d8658:	4606      	mov	r6, r0
            val = -n;
   d865a:	e001      	b.n	d8660 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d865c:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d865e:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8660:	b2ea      	uxtb	r2, r5
   d8662:	4638      	mov	r0, r7
   d8664:	f000 fe29 	bl	d92ba <_ZN5Print11printNumberEmh>
    }
}
   d8668:	4430      	add	r0, r6
   d866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d866e <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d866e:	b570      	push	{r4, r5, r6, lr}
   d8670:	460d      	mov	r5, r1
   d8672:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8674:	220a      	movs	r2, #10
   d8676:	6881      	ldr	r1, [r0, #8]
   d8678:	4628      	mov	r0, r5
   d867a:	f7ff ffd9 	bl	d8630 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d867e:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d8680:	4604      	mov	r4, r0
    n += p.print(',');
   d8682:	4628      	mov	r0, r5
   d8684:	f000 fe00 	bl	d9288 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d8688:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d868a:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d868c:	68f1      	ldr	r1, [r6, #12]
   d868e:	4628      	mov	r0, r5
   d8690:	f7ff ffce 	bl	d8630 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d8694:	4420      	add	r0, r4
   d8696:	bd70      	pop	{r4, r5, r6, pc}

000d8698 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8698:	f1a0 0004 	sub.w	r0, r0, #4
   d869c:	f7ff bfe7 	b.w	d866e <_ZNK14CellularSignal7printToER5Print>

000d86a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86a0:	4770      	bx	lr

000d86a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d86a2:	2000      	movs	r0, #0
   d86a4:	4770      	bx	lr

000d86a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86a6:	b510      	push	{r4, lr}
   d86a8:	2110      	movs	r1, #16
   d86aa:	4604      	mov	r4, r0
   d86ac:	f001 fd49 	bl	da142 <_ZdlPvj>
   d86b0:	4620      	mov	r0, r4
   d86b2:	bd10      	pop	{r4, pc}

000d86b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d86b4:	b508      	push	{r3, lr}
      { delete this; }
   d86b6:	b108      	cbz	r0, d86bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d86b8:	f7ff fff5 	bl	d86a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d86bc:	bd08      	pop	{r3, pc}

000d86be <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d86be:	2200      	movs	r2, #0
   d86c0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d86c2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d86c4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d86c8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d86ca:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d86ce:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d86d0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d86d2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d86d4:	680c      	ldr	r4, [r1, #0]
   d86d6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d86d8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d86da:	bd10      	pop	{r4, pc}

000d86dc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d86dc:	b510      	push	{r4, lr}
   d86de:	4604      	mov	r4, r0
    free((void*)msg_);
   d86e0:	6800      	ldr	r0, [r0, #0]
   d86e2:	f7ff fe09 	bl	d82f8 <free>
}
   d86e6:	4620      	mov	r0, r4
   d86e8:	bd10      	pop	{r4, pc}

000d86ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d86ea:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d86ec:	68c4      	ldr	r4, [r0, #12]
   d86ee:	b1f4      	cbz	r4, d872e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d86f0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d86f2:	2b02      	cmp	r3, #2
   d86f4:	d103      	bne.n	d86fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d86f6:	f104 000c 	add.w	r0, r4, #12
   d86fa:	f7ff ffef 	bl	d86dc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d86fe:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d8700:	b135      	cbz	r5, d8710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8702:	4628      	mov	r0, r5
   d8704:	f7fe f975 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
   d8708:	2110      	movs	r1, #16
   d870a:	4628      	mov	r0, r5
   d870c:	f001 fd19 	bl	da142 <_ZdlPvj>
   d8710:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8712:	b135      	cbz	r5, d8722 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8714:	4628      	mov	r0, r5
   d8716:	f7fe f96c 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
   d871a:	2110      	movs	r1, #16
   d871c:	4628      	mov	r0, r5
   d871e:	f001 fd10 	bl	da142 <_ZdlPvj>
   d8722:	4620      	mov	r0, r4
   d8724:	2114      	movs	r1, #20
   d8726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d872a:	f001 bd0a 	b.w	da142 <_ZdlPvj>
   d872e:	bd38      	pop	{r3, r4, r5, pc}

000d8730 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8730:	b510      	push	{r4, lr}
   d8732:	b088      	sub	sp, #32
   d8734:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8736:	4668      	mov	r0, sp
   d8738:	f000 fff2 	bl	d9720 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d873c:	4669      	mov	r1, sp
   d873e:	a804      	add	r0, sp, #16
   d8740:	f001 f810 	bl	d9764 <_ZN6StringC1ERKS_>
   d8744:	a804      	add	r0, sp, #16
   d8746:	47a0      	blx	r4
   d8748:	4604      	mov	r4, r0
   d874a:	a804      	add	r0, sp, #16
   d874c:	f000 ffa1 	bl	d9692 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8750:	4668      	mov	r0, sp
   d8752:	f000 ff9e 	bl	d9692 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d8756:	4620      	mov	r0, r4
   d8758:	b008      	add	sp, #32
   d875a:	bd10      	pop	{r4, pc}

000d875c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d875c:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d875e:	2410      	movs	r4, #16
   d8760:	b085      	sub	sp, #20
   d8762:	4607      	mov	r7, r0
   d8764:	460e      	mov	r6, r1
   d8766:	4615      	mov	r5, r2
   d8768:	2100      	movs	r1, #0
   d876a:	4622      	mov	r2, r4
   d876c:	4668      	mov	r0, sp
   d876e:	f002 fd69 	bl	db244 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8772:	2200      	movs	r2, #0
   d8774:	4669      	mov	r1, sp
   d8776:	4610      	mov	r0, r2
         size = sizeof(*this);
   d8778:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d877c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d877e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d8780:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8782:	f7ff fd01 	bl	d8188 <spark_function>
}
   d8786:	b005      	add	sp, #20
   d8788:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d878a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d878a:	b513      	push	{r0, r1, r4, lr}
   d878c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d878e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d8792:	2300      	movs	r3, #0
   d8794:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8796:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8798:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d879a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d879c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d879e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d87a0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d87a2:	f7ff fe27 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87a6:	4620      	mov	r0, r4
   d87a8:	b002      	add	sp, #8
   d87aa:	bd10      	pop	{r4, pc}

000d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d87ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d87ae:	460c      	mov	r4, r1
   d87b0:	ad02      	add	r5, sp, #8
   d87b2:	f854 3b04 	ldr.w	r3, [r4], #4
   d87b6:	f845 3d08 	str.w	r3, [r5, #-8]!
   d87ba:	4606      	mov	r6, r0
   d87bc:	460f      	mov	r7, r1
   d87be:	a801      	add	r0, sp, #4
   d87c0:	4621      	mov	r1, r4
   d87c2:	f7ff fe10 	bl	d83e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d87c6:	4629      	mov	r1, r5
   d87c8:	4630      	mov	r0, r6
   d87ca:	f7ff ffde 	bl	d878a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d87ce:	a801      	add	r0, sp, #4
   d87d0:	f7ff fe10 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87d4:	4620      	mov	r0, r4
   d87d6:	f7ff fe0d 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d87da:	4638      	mov	r0, r7
   d87dc:	2108      	movs	r1, #8
   d87de:	f001 fcb0 	bl	da142 <_ZdlPvj>
        return p;
    }
   d87e2:	4630      	mov	r0, r6
   d87e4:	b003      	add	sp, #12
   d87e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d87e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d87e8:	b538      	push	{r3, r4, r5, lr}
   d87ea:	2300      	movs	r3, #0
   d87ec:	4604      	mov	r4, r0
   d87ee:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87f0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d87f2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87f4:	f7fb fc51 	bl	d409a <_Znwj>
   d87f8:	b128      	cbz	r0, d8806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d87fa:	2301      	movs	r3, #1
   d87fc:	6043      	str	r3, [r0, #4]
   d87fe:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d8800:	4b02      	ldr	r3, [pc, #8]	; (d880c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8802:	6003      	str	r3, [r0, #0]
   d8804:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8806:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d8808:	4620      	mov	r0, r4
   d880a:	bd38      	pop	{r3, r4, r5, pc}
   d880c:	000dd6bc 	.word	0x000dd6bc

000d8810 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8810:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8812:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8814:	b90a      	cbnz	r2, d881a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8816:	f001 fcb0 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d881a:	68c3      	ldr	r3, [r0, #12]
    }
   d881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8820:	4718      	bx	r3

000d8822 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8822:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8824:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d8826:	f100 0110 	add.w	r1, r0, #16
   d882a:	f7ff fff1 	bl	d8810 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d882e:	bd08      	pop	{r3, pc}

000d8830 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8830:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d8832:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8834:	b90a      	cbnz	r2, d883a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8836:	f001 fca0 	bl	da17a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d883a:	68c3      	ldr	r3, [r0, #12]
    }
   d883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8840:	4718      	bx	r3

000d8842 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8842:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8844:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d8846:	f100 0110 	add.w	r1, r0, #16
   d884a:	f7ff fff1 	bl	d8830 <_ZNKSt8functionIFvRKbEEclES1_>
   d884e:	bd08      	pop	{r3, pc}

000d8850 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8850:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8852:	2300      	movs	r3, #0
   d8854:	6083      	str	r3, [r0, #8]
   d8856:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8858:	4604      	mov	r4, r0
   d885a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d885c:	b12b      	cbz	r3, d886a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d885e:	2202      	movs	r2, #2
   d8860:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8862:	68eb      	ldr	r3, [r5, #12]
   d8864:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8866:	68ab      	ldr	r3, [r5, #8]
   d8868:	60a3      	str	r3, [r4, #8]
	}
    }
   d886a:	4620      	mov	r0, r4
   d886c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d8870:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8872:	b089      	sub	sp, #36	; 0x24
   d8874:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8876:	4668      	mov	r0, sp
   d8878:	f7ff ff21 	bl	d86be <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d887c:	2300      	movs	r3, #0
   d887e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8882:	f04f 0202 	mov.w	r2, #2
   d8886:	e8d4 3f4f 	ldrexb	r3, [r4]
   d888a:	2b00      	cmp	r3, #0
   d888c:	d103      	bne.n	d8896 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d888e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d8892:	2900      	cmp	r1, #0
   d8894:	d1f7      	bne.n	d8886 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d8896:	d002      	beq.n	d889e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8898:	f88d 3008 	strb.w	r3, [sp, #8]
   d889c:	e063      	b.n	d8966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d889e:	f114 050c 	adds.w	r5, r4, #12
   d88a2:	d003      	beq.n	d88ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d88a4:	4669      	mov	r1, sp
   d88a6:	4628      	mov	r0, r5
   d88a8:	f7ff ff09 	bl	d86be <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d88ac:	f3bf 8f5f 	dmb	sy
   d88b0:	2301      	movs	r3, #1
   d88b2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d88b4:	2000      	movs	r0, #0
   d88b6:	f104 0308 	add.w	r3, r4, #8
   d88ba:	f3bf 8f5f 	dmb	sy
   d88be:	e853 6f00 	ldrex	r6, [r3]
   d88c2:	e843 0200 	strex	r2, r0, [r3]
   d88c6:	2a00      	cmp	r2, #0
   d88c8:	d1f9      	bne.n	d88be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d88ca:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d88ce:	2e00      	cmp	r6, #0
   d88d0:	d049      	beq.n	d8966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d88d2:	f7ff fc13 	bl	d80fc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d88d6:	b120      	cbz	r0, d88e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d88d8:	4629      	mov	r1, r5
   d88da:	4630      	mov	r0, r6
   d88dc:	f7ff ff98 	bl	d8810 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d88e0:	e03a      	b.n	d8958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d88e2:	4631      	mov	r1, r6
   d88e4:	a802      	add	r0, sp, #8
   d88e6:	f7ff ffb3 	bl	d8850 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d88ea:	68e0      	ldr	r0, [r4, #12]
   d88ec:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d88f0:	b108      	cbz	r0, d88f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d88f2:	f002 ff37 	bl	db764 <strdup>
   d88f6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d88f8:	2010      	movs	r0, #16
   d88fa:	f8ad 501c 	strh.w	r5, [sp, #28]
   d88fe:	f7fb fbcc 	bl	d409a <_Znwj>
   d8902:	4605      	mov	r5, r0
   d8904:	b1e8      	cbz	r0, d8942 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8906:	2700      	movs	r7, #0
   d8908:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d890a:	2018      	movs	r0, #24
   d890c:	f7fb fbc5 	bl	d409a <_Znwj>
   d8910:	4604      	mov	r4, r0
   d8912:	b188      	cbz	r0, d8938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8914:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8916:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8918:	a802      	add	r0, sp, #8
   d891a:	f7ff f899 	bl	d7a50 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d891e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8920:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8922:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8924:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8926:	9204      	str	r2, [sp, #16]
   d8928:	a906      	add	r1, sp, #24
   d892a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d892c:	60e3      	str	r3, [r4, #12]
   d892e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8932:	9205      	str	r2, [sp, #20]
   d8934:	f7ff fec3 	bl	d86be <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8938:	4b0d      	ldr	r3, [pc, #52]	; (d8970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d893a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d893c:	4b0d      	ldr	r3, [pc, #52]	; (d8974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d893e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8940:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d8942:	a806      	add	r0, sp, #24
   d8944:	f7ff feca 	bl	d86dc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8948:	a802      	add	r0, sp, #8
   d894a:	f7fe f852 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d894e:	2200      	movs	r2, #0
   d8950:	4629      	mov	r1, r5
   d8952:	4809      	ldr	r0, [pc, #36]	; (d8978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8954:	f7ff fbda 	bl	d810c <application_thread_invoke>
   d8958:	4630      	mov	r0, r6
   d895a:	f7fe f84a 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d895e:	2110      	movs	r1, #16
   d8960:	4630      	mov	r0, r6
   d8962:	f001 fbee 	bl	da142 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d8966:	4668      	mov	r0, sp
   d8968:	f7ff feb8 	bl	d86dc <_ZN8particle5ErrorD1Ev>
    }
   d896c:	b009      	add	sp, #36	; 0x24
   d896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8970:	000d8823 	.word	0x000d8823
   d8974:	000d8a99 	.word	0x000d8a99
   d8978:	000d838f 	.word	0x000d838f

000d897c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8980:	b08b      	sub	sp, #44	; 0x2c
   d8982:	4606      	mov	r6, r0
   d8984:	460f      	mov	r7, r1
   d8986:	4690      	mov	r8, r2
   d8988:	4699      	mov	r9, r3
   d898a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d898e:	f7ff fc1b 	bl	d81c8 <spark_cloud_flag_connected>
   d8992:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d8994:	4683      	mov	fp, r0
   d8996:	bb30      	cbnz	r0, d89e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8998:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d899c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d899e:	a905      	add	r1, sp, #20
   d89a0:	4628      	mov	r0, r5
   d89a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d89a6:	f7ff fe8a 	bl	d86be <_ZN8particle5ErrorC1EOS0_>
   d89aa:	2014      	movs	r0, #20
   d89ac:	f7fb fb75 	bl	d409a <_Znwj>
   d89b0:	4604      	mov	r4, r0
   d89b2:	b158      	cbz	r0, d89cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d89b4:	2302      	movs	r3, #2
   d89b6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89b8:	2301      	movs	r3, #1
   d89ba:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89bc:	f8c0 b004 	str.w	fp, [r0, #4]
   d89c0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d89c4:	4629      	mov	r1, r5
   d89c6:	300c      	adds	r0, #12
   d89c8:	f7ff fe79 	bl	d86be <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d89cc:	4630      	mov	r0, r6
   d89ce:	4621      	mov	r1, r4
   d89d0:	f840 4b04 	str.w	r4, [r0], #4
   d89d4:	f7ff ff08 	bl	d87e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d89d8:	4628      	mov	r0, r5
   d89da:	f7ff fe7f 	bl	d86dc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d89de:	a805      	add	r0, sp, #20
   d89e0:	f7ff fe7c 	bl	d86dc <_ZN8particle5ErrorD1Ev>
   d89e4:	e052      	b.n	d8a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d89e6:	2400      	movs	r4, #0
   d89e8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d89ea:	2014      	movs	r0, #20
   d89ec:	606c      	str	r4, [r5, #4]
   d89ee:	60ac      	str	r4, [r5, #8]
   d89f0:	9307      	str	r3, [sp, #28]
   d89f2:	f7fb fb52 	bl	d409a <_Znwj>
   d89f6:	4601      	mov	r1, r0
   d89f8:	b118      	cbz	r0, d8a02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d89fa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89fc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89fe:	6044      	str	r4, [r0, #4]
   d8a00:	6084      	str	r4, [r0, #8]
   d8a02:	a804      	add	r0, sp, #16
   d8a04:	9103      	str	r1, [sp, #12]
   d8a06:	f7ff feef 	bl	d87e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d8a0a:	4b22      	ldr	r3, [pc, #136]	; (d8a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d8a0c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8a0e:	2008      	movs	r0, #8
   d8a10:	f7fb fb43 	bl	d409a <_Znwj>
   d8a14:	4604      	mov	r4, r0
   d8a16:	b128      	cbz	r0, d8a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a18:	9b03      	ldr	r3, [sp, #12]
   d8a1a:	f840 3b04 	str.w	r3, [r0], #4
   d8a1e:	a904      	add	r1, sp, #16
   d8a20:	f7ff fce1 	bl	d83e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a24:	9500      	str	r5, [sp, #0]
   d8a26:	fa5f f38a 	uxtb.w	r3, sl
   d8a2a:	464a      	mov	r2, r9
   d8a2c:	4641      	mov	r1, r8
   d8a2e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d8a30:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8a32:	f7ff fbd9 	bl	d81e8 <spark_send_event>
   d8a36:	b920      	cbnz	r0, d8a42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8a38:	9b03      	ldr	r3, [sp, #12]
   d8a3a:	785b      	ldrb	r3, [r3, #1]
   d8a3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8a40:	b183      	cbz	r3, d8a64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d8a42:	9b03      	ldr	r3, [sp, #12]
   d8a44:	9305      	str	r3, [sp, #20]
   d8a46:	a904      	add	r1, sp, #16
   d8a48:	a806      	add	r0, sp, #24
   d8a4a:	f7ff fccc 	bl	d83e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d8a4e:	a905      	add	r1, sp, #20
   d8a50:	4630      	mov	r0, r6
   d8a52:	f7ff fe9a 	bl	d878a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8a56:	a806      	add	r0, sp, #24
   d8a58:	f7ff fccc 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a5c:	a804      	add	r0, sp, #16
   d8a5e:	f7ff fcc9 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a62:	e013      	b.n	d8a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d8a64:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8a68:	a905      	add	r1, sp, #20
   d8a6a:	a803      	add	r0, sp, #12
   d8a6c:	9205      	str	r2, [sp, #20]
   d8a6e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a72:	f7ff fefd 	bl	d8870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a76:	a805      	add	r0, sp, #20
   d8a78:	f7ff fe30 	bl	d86dc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8a7c:	a805      	add	r0, sp, #20
   d8a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8a80:	f7ff fe94 	bl	d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8a84:	a806      	add	r0, sp, #24
   d8a86:	f7ff fcb5 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a8a:	e7da      	b.n	d8a42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d8a8c:	4630      	mov	r0, r6
   d8a8e:	b00b      	add	sp, #44	; 0x2c
   d8a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a94:	000d8c09 	.word	0x000d8c09

000d8a98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a98:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a9c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8a9e:	d006      	beq.n	d8aae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d8aa0:	2a03      	cmp	r2, #3
   d8aa2:	d017      	beq.n	d8ad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8aa4:	2a01      	cmp	r2, #1
   d8aa6:	d122      	bne.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8aa8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8aaa:	6003      	str	r3, [r0, #0]
	      break;
   d8aac:	e01f      	b.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8aae:	2018      	movs	r0, #24
   d8ab0:	680e      	ldr	r6, [r1, #0]
   d8ab2:	f7fb faf2 	bl	d409a <_Znwj>
   d8ab6:	4605      	mov	r5, r0
   d8ab8:	b150      	cbz	r0, d8ad0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8aba:	4631      	mov	r1, r6
   d8abc:	f7ff fec8 	bl	d8850 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8ac0:	6930      	ldr	r0, [r6, #16]
   d8ac2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8ac6:	b108      	cbz	r0, d8acc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8ac8:	f002 fe4c 	bl	db764 <strdup>
   d8acc:	6128      	str	r0, [r5, #16]
   d8ace:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8ad0:	6025      	str	r5, [r4, #0]
   d8ad2:	e00c      	b.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8ad4:	6804      	ldr	r4, [r0, #0]
   d8ad6:	b154      	cbz	r4, d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8ad8:	f104 0010 	add.w	r0, r4, #16
   d8adc:	f7ff fdfe 	bl	d86dc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8ae0:	4620      	mov	r0, r4
   d8ae2:	f7fd ff86 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8ae6:	2118      	movs	r1, #24
   d8ae8:	4620      	mov	r0, r4
   d8aea:	f001 fb2a 	bl	da142 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8aee:	2000      	movs	r0, #0
   d8af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8af2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8af2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8af4:	2300      	movs	r3, #0
   d8af6:	6083      	str	r3, [r0, #8]
   d8af8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8afa:	4604      	mov	r4, r0
   d8afc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8afe:	b12b      	cbz	r3, d8b0c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8b00:	2202      	movs	r2, #2
   d8b02:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8b04:	68eb      	ldr	r3, [r5, #12]
   d8b06:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8b08:	68ab      	ldr	r3, [r5, #8]
   d8b0a:	60a3      	str	r3, [r4, #8]
	}
    }
   d8b0c:	4620      	mov	r0, r4
   d8b0e:	bd38      	pop	{r3, r4, r5, pc}

000d8b10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b10:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b12:	b570      	push	{r4, r5, r6, lr}
   d8b14:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8b16:	d006      	beq.n	d8b26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8b18:	2a03      	cmp	r2, #3
   d8b1a:	d011      	beq.n	d8b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8b1c:	2a01      	cmp	r2, #1
   d8b1e:	d118      	bne.n	d8b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8b20:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b22:	6003      	str	r3, [r0, #0]
	      break;
   d8b24:	e015      	b.n	d8b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b26:	2014      	movs	r0, #20
   d8b28:	680e      	ldr	r6, [r1, #0]
   d8b2a:	f7fb fab6 	bl	d409a <_Znwj>
   d8b2e:	4605      	mov	r5, r0
   d8b30:	b120      	cbz	r0, d8b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8b32:	4631      	mov	r1, r6
   d8b34:	f7ff ffdd 	bl	d8af2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8b38:	7c33      	ldrb	r3, [r6, #16]
   d8b3a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8b3c:	6025      	str	r5, [r4, #0]
   d8b3e:	e008      	b.n	d8b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8b40:	6804      	ldr	r4, [r0, #0]
   d8b42:	b134      	cbz	r4, d8b52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8b44:	4620      	mov	r0, r4
   d8b46:	f7fd ff54 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8b4a:	2114      	movs	r1, #20
   d8b4c:	4620      	mov	r0, r4
   d8b4e:	f001 faf8 	bl	da142 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8b52:	2000      	movs	r0, #0
   d8b54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8b58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8b58:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8b5a:	2300      	movs	r3, #0
   d8b5c:	b087      	sub	sp, #28
   d8b5e:	460c      	mov	r4, r1
   d8b60:	f3bf 8f5f 	dmb	sy
   d8b64:	e850 6f00 	ldrex	r6, [r0]
   d8b68:	e840 3200 	strex	r2, r3, [r0]
   d8b6c:	2a00      	cmp	r2, #0
   d8b6e:	d1f9      	bne.n	d8b64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d8b70:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8b74:	2e00      	cmp	r6, #0
   d8b76:	d03f      	beq.n	d8bf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8b78:	4618      	mov	r0, r3
   d8b7a:	f7ff fabf 	bl	d80fc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8b7e:	4607      	mov	r7, r0
   d8b80:	b120      	cbz	r0, d8b8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b82:	4621      	mov	r1, r4
   d8b84:	4630      	mov	r0, r6
   d8b86:	f7ff fe53 	bl	d8830 <_ZNKSt8functionIFvRKbEEclES1_>
   d8b8a:	e02e      	b.n	d8bea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b8c:	4631      	mov	r1, r6
   d8b8e:	a801      	add	r0, sp, #4
   d8b90:	f7ff ffaf 	bl	d8af2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8b94:	7823      	ldrb	r3, [r4, #0]
   d8b96:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b9a:	2010      	movs	r0, #16
   d8b9c:	f7fb fa7d 	bl	d409a <_Znwj>
   d8ba0:	4605      	mov	r5, r0
   d8ba2:	b1d0      	cbz	r0, d8bda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8ba4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ba6:	2014      	movs	r0, #20
   d8ba8:	f7fb fa77 	bl	d409a <_Znwj>
   d8bac:	4604      	mov	r4, r0
   d8bae:	b178      	cbz	r0, d8bd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8bb0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8bb2:	4601      	mov	r1, r0
   d8bb4:	a801      	add	r0, sp, #4
   d8bb6:	f7fe ff4b 	bl	d7a50 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bba:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8bbc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bbe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bc0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8bc2:	9203      	str	r2, [sp, #12]
   d8bc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bc6:	60e3      	str	r3, [r4, #12]
   d8bc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8bcc:	9204      	str	r2, [sp, #16]
   d8bce:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8bd0:	4b0a      	ldr	r3, [pc, #40]	; (d8bfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d8bd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8bd4:	4b0a      	ldr	r3, [pc, #40]	; (d8c00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8bd8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8bda:	a801      	add	r0, sp, #4
   d8bdc:	f7fd ff09 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8be0:	2200      	movs	r2, #0
   d8be2:	4629      	mov	r1, r5
   d8be4:	4807      	ldr	r0, [pc, #28]	; (d8c04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8be6:	f7ff fa91 	bl	d810c <application_thread_invoke>
   d8bea:	4630      	mov	r0, r6
   d8bec:	f7fd ff01 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8bf0:	2110      	movs	r1, #16
   d8bf2:	4630      	mov	r0, r6
   d8bf4:	f001 faa5 	bl	da142 <_ZdlPvj>
        }
    }
   d8bf8:	b007      	add	sp, #28
   d8bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8bfc:	000d8843 	.word	0x000d8843
   d8c00:	000d8b11 	.word	0x000d8b11
   d8c04:	000d838f 	.word	0x000d838f

000d8c08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8c08:	b530      	push	{r4, r5, lr}
   d8c0a:	b085      	sub	sp, #20
   d8c0c:	4604      	mov	r4, r0
   d8c0e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8c10:	4668      	mov	r0, sp
   d8c12:	4611      	mov	r1, r2
   d8c14:	f7ff fdca 	bl	d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8c18:	b17c      	cbz	r4, d8c3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8c1a:	b224      	sxth	r4, r4
   d8c1c:	4628      	mov	r0, r5
   d8c1e:	b10d      	cbz	r5, d8c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8c20:	f002 fda0 	bl	db764 <strdup>
   d8c24:	9002      	str	r0, [sp, #8]
   d8c26:	a902      	add	r1, sp, #8
   d8c28:	4668      	mov	r0, sp
   d8c2a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8c2e:	f7ff fe1f 	bl	d8870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8c32:	a802      	add	r0, sp, #8
   d8c34:	f7ff fd52 	bl	d86dc <_ZN8particle5ErrorD1Ev>
   d8c38:	e01d      	b.n	d8c76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8c3a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8c3c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8c40:	f04f 0201 	mov.w	r2, #1
   d8c44:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8c48:	42a3      	cmp	r3, r4
   d8c4a:	d103      	bne.n	d8c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8c4c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8c50:	2900      	cmp	r1, #0
   d8c52:	d1f7      	bne.n	d8c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8c54:	d002      	beq.n	d8c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8c56:	f88d 3008 	strb.w	r3, [sp, #8]
   d8c5a:	e00c      	b.n	d8c76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8c5c:	f110 010c 	adds.w	r1, r0, #12
   d8c60:	f04f 0301 	mov.w	r3, #1
   d8c64:	bf18      	it	ne
   d8c66:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8c68:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8c6c:	3004      	adds	r0, #4
   d8c6e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d8c72:	f7ff ff71 	bl	d8b58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8c76:	a801      	add	r0, sp, #4
   d8c78:	f7ff fbbc 	bl	d83f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8c7c:	b005      	add	sp, #20
   d8c7e:	bd30      	pop	{r4, r5, pc}

000d8c80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8c80:	2200      	movs	r2, #0
   d8c82:	4611      	mov	r1, r2
   d8c84:	6840      	ldr	r0, [r0, #4]
   d8c86:	f7ff bb17 	b.w	d82b8 <network_listening>

000d8c8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8c8a:	2200      	movs	r2, #0
   d8c8c:	4611      	mov	r1, r2
   d8c8e:	6840      	ldr	r0, [r0, #4]
   d8c90:	f7ff bb22 	b.w	d82d8 <network_get_listen_timeout>

000d8c94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8c94:	2200      	movs	r2, #0
   d8c96:	6840      	ldr	r0, [r0, #4]
   d8c98:	f7ff bb16 	b.w	d82c8 <network_set_listen_timeout>

000d8c9c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8c9c:	2200      	movs	r2, #0
   d8c9e:	f081 0101 	eor.w	r1, r1, #1
   d8ca2:	6840      	ldr	r0, [r0, #4]
   d8ca4:	f7ff bb00 	b.w	d82a8 <network_listen>

000d8ca8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8ca8:	2300      	movs	r3, #0
   d8caa:	461a      	mov	r2, r3
   d8cac:	4619      	mov	r1, r3
   d8cae:	6840      	ldr	r0, [r0, #4]
   d8cb0:	f7ff baf2 	b.w	d8298 <network_off>

000d8cb4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8cb4:	2300      	movs	r3, #0
   d8cb6:	461a      	mov	r2, r3
   d8cb8:	4619      	mov	r1, r3
   d8cba:	6840      	ldr	r0, [r0, #4]
   d8cbc:	f7ff bae4 	b.w	d8288 <network_on>

000d8cc0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8cc0:	2200      	movs	r2, #0
   d8cc2:	4611      	mov	r1, r2
   d8cc4:	6840      	ldr	r0, [r0, #4]
   d8cc6:	f7ff bad7 	b.w	d8278 <network_ready>

000d8cca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8cca:	2200      	movs	r2, #0
   d8ccc:	4611      	mov	r1, r2
   d8cce:	6840      	ldr	r0, [r0, #4]
   d8cd0:	f7ff bac2 	b.w	d8258 <network_connecting>

000d8cd4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8cd4:	2200      	movs	r2, #0
   d8cd6:	2102      	movs	r1, #2
   d8cd8:	6840      	ldr	r0, [r0, #4]
   d8cda:	f7ff bac5 	b.w	d8268 <network_disconnect>

000d8cde <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8cde:	2300      	movs	r3, #0
   d8ce0:	461a      	mov	r2, r3
   d8ce2:	6840      	ldr	r0, [r0, #4]
   d8ce4:	f7ff bab0 	b.w	d8248 <network_connect>

000d8ce8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8ce8:	4b02      	ldr	r3, [pc, #8]	; (d8cf4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8cea:	2203      	movs	r2, #3
   d8cec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8cee:	4a02      	ldr	r2, [pc, #8]	; (d8cf8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8cf0:	601a      	str	r2, [r3, #0]
   d8cf2:	4770      	bx	lr
   d8cf4:	2003e28c 	.word	0x2003e28c
   d8cf8:	000dd6d8 	.word	0x000dd6d8

000d8cfc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8cfc:	4770      	bx	lr

000d8cfe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8d00:	4606      	mov	r6, r0
   d8d02:	4615      	mov	r5, r2
   d8d04:	460c      	mov	r4, r1
   d8d06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8d08:	42bc      	cmp	r4, r7
   d8d0a:	d006      	beq.n	d8d1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8d0c:	6833      	ldr	r3, [r6, #0]
   d8d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8d12:	689b      	ldr	r3, [r3, #8]
   d8d14:	4630      	mov	r0, r6
   d8d16:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8d18:	e7f6      	b.n	d8d08 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8d1a:	4628      	mov	r0, r5
   d8d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d1e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8d1e:	2200      	movs	r2, #0
   d8d20:	7c00      	ldrb	r0, [r0, #16]
   d8d22:	f7ff b889 	b.w	d7e38 <HAL_I2C_Write_Data>

000d8d26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8d26:	2100      	movs	r1, #0
   d8d28:	7c00      	ldrb	r0, [r0, #16]
   d8d2a:	f7ff b88d 	b.w	d7e48 <HAL_I2C_Available_Data>

000d8d2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8d2e:	2100      	movs	r1, #0
   d8d30:	7c00      	ldrb	r0, [r0, #16]
   d8d32:	f7ff b891 	b.w	d7e58 <HAL_I2C_Read_Data>

000d8d36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8d36:	2100      	movs	r1, #0
   d8d38:	7c00      	ldrb	r0, [r0, #16]
   d8d3a:	f7ff b895 	b.w	d7e68 <HAL_I2C_Peek_Data>

000d8d3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8d3e:	2100      	movs	r1, #0
   d8d40:	7c00      	ldrb	r0, [r0, #16]
   d8d42:	f7ff b899 	b.w	d7e78 <HAL_I2C_Flush_Data>

000d8d46 <_ZN7TwoWireD0Ev>:
   d8d46:	b510      	push	{r4, lr}
   d8d48:	2114      	movs	r1, #20
   d8d4a:	4604      	mov	r4, r0
   d8d4c:	f001 f9f9 	bl	da142 <_ZdlPvj>
   d8d50:	4620      	mov	r0, r4
   d8d52:	bd10      	pop	{r4, pc}

000d8d54 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8d54:	b510      	push	{r4, lr}
   d8d56:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8d58:	2300      	movs	r3, #0
   d8d5a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8d60:	60a3      	str	r3, [r4, #8]
   d8d62:	4b04      	ldr	r3, [pc, #16]	; (d8d74 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8d64:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8d66:	4608      	mov	r0, r1
   d8d68:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8d6a:	4611      	mov	r1, r2
   d8d6c:	f7ff f894 	bl	d7e98 <HAL_I2C_Init>
}
   d8d70:	4620      	mov	r0, r4
   d8d72:	bd10      	pop	{r4, pc}
   d8d74:	000dd70c 	.word	0x000dd70c

000d8d78 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8d78:	2300      	movs	r3, #0
   d8d7a:	461a      	mov	r2, r3
   d8d7c:	4619      	mov	r1, r3
   d8d7e:	7c00      	ldrb	r0, [r0, #16]
   d8d80:	f7ff b842 	b.w	d7e08 <HAL_I2C_Begin>

000d8d84 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8d84:	b570      	push	{r4, r5, r6, lr}
   d8d86:	460c      	mov	r4, r1
   d8d88:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d8d8a:	2514      	movs	r5, #20
   d8d8c:	4606      	mov	r6, r0
   d8d8e:	462a      	mov	r2, r5
   d8d90:	2100      	movs	r1, #0
   d8d92:	a801      	add	r0, sp, #4
   d8d94:	f002 fa56 	bl	db244 <memset>
   d8d98:	7823      	ldrb	r3, [r4, #0]
   d8d9a:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d9e:	6863      	ldr	r3, [r4, #4]
   d8da0:	9303      	str	r3, [sp, #12]
   d8da2:	68e3      	ldr	r3, [r4, #12]
   d8da4:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d8da6:	2200      	movs	r2, #0
   d8da8:	7a23      	ldrb	r3, [r4, #8]
   d8daa:	7c30      	ldrb	r0, [r6, #16]
   d8dac:	f8ad 5004 	strh.w	r5, [sp, #4]
   d8db0:	a901      	add	r1, sp, #4
   d8db2:	9305      	str	r3, [sp, #20]
   d8db4:	f7ff f888 	bl	d7ec8 <HAL_I2C_Request_Data_Ex>
}
   d8db8:	b006      	add	sp, #24
   d8dba:	bd70      	pop	{r4, r5, r6, pc}

000d8dbc <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d8dbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8dbe:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8dc0:	f88d 1000 	strb.w	r1, [sp]
   d8dc4:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8dc8:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8dca:	bf18      	it	ne
   d8dcc:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8dce:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d8dd0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8dd2:	f88d 3008 	strb.w	r3, [sp, #8]
   d8dd6:	f7ff ffd5 	bl	d8d84 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8dda:	b005      	add	sp, #20
   d8ddc:	f85d fb04 	ldr.w	pc, [sp], #4

000d8de0 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8de0:	2200      	movs	r2, #0
   d8de2:	7c00      	ldrb	r0, [r0, #16]
   d8de4:	f7ff b818 	b.w	d7e18 <HAL_I2C_Begin_Transmission>

000d8de8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d8de8:	b2c9      	uxtb	r1, r1
   d8dea:	f7ff bff9 	b.w	d8de0 <_ZN7TwoWire17beginTransmissionEh>

000d8dee <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d8dee:	2200      	movs	r2, #0
   d8df0:	7c00      	ldrb	r0, [r0, #16]
   d8df2:	f7ff b819 	b.w	d7e28 <HAL_I2C_End_Transmission>

000d8df6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8df6:	2100      	movs	r1, #0
   d8df8:	7c00      	ldrb	r0, [r0, #16]
   d8dfa:	f7ff b845 	b.w	d7e88 <HAL_I2C_Is_Enabled>

000d8dfe <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8dfe:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d8e00:	2100      	movs	r1, #0
   d8e02:	7c00      	ldrb	r0, [r0, #16]
   d8e04:	f7ff f850 	bl	d7ea8 <HAL_I2C_Acquire>
}
   d8e08:	fab0 f080 	clz	r0, r0
   d8e0c:	0940      	lsrs	r0, r0, #5
   d8e0e:	bd08      	pop	{r3, pc}

000d8e10 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8e10:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d8e12:	2100      	movs	r1, #0
   d8e14:	7c00      	ldrb	r0, [r0, #16]
   d8e16:	f7ff f84f 	bl	d7eb8 <HAL_I2C_Release>
}
   d8e1a:	fab0 f080 	clz	r0, r0
   d8e1e:	0940      	lsrs	r0, r0, #5
   d8e20:	bd08      	pop	{r3, pc}

000d8e22 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8e22:	4700      	bx	r0

000d8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8e26:	b085      	sub	sp, #20
   d8e28:	461c      	mov	r4, r3
   d8e2a:	460e      	mov	r6, r1
   d8e2c:	4617      	mov	r7, r2
   d8e2e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d8e30:	f7fe ffd2 	bl	d7dd8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d8e34:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d8e36:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e38:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8e3c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8e3e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d8e42:	bfa5      	ittet	ge
   d8e44:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8e48:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8e4c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8e4e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e50:	9300      	str	r3, [sp, #0]
   d8e52:	4632      	mov	r2, r6
   d8e54:	463b      	mov	r3, r7
   d8e56:	4906      	ldr	r1, [pc, #24]	; (d8e70 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8e58:	bfa8      	it	ge
   d8e5a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8e5e:	4628      	mov	r0, r5
   d8e60:	f7fe ffb2 	bl	d7dc8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8e64:	fab0 f080 	clz	r0, r0
   d8e68:	0940      	lsrs	r0, r0, #5
   d8e6a:	b005      	add	sp, #20
   d8e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e6e:	bf00      	nop
   d8e70:	000d8e23 	.word	0x000d8e23

000d8e74 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8e74:	f7fe bfc0 	b.w	d7df8 <HAL_Interrupts_Disable_All>

000d8e78 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8e78:	f7fe bfb6 	b.w	d7de8 <HAL_Interrupts_Enable_All>

000d8e7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8e7c:	4770      	bx	lr

000d8e7e <_ZN9IPAddressD0Ev>:
   d8e7e:	b510      	push	{r4, lr}
   d8e80:	2118      	movs	r1, #24
   d8e82:	4604      	mov	r4, r0
   d8e84:	f001 f95d 	bl	da142 <_ZdlPvj>
   d8e88:	4620      	mov	r0, r4
   d8e8a:	bd10      	pop	{r4, pc}

000d8e8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8e8e:	7d03      	ldrb	r3, [r0, #20]
   d8e90:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8e92:	b08d      	sub	sp, #52	; 0x34
   d8e94:	460e      	mov	r6, r1
   d8e96:	f100 0704 	add.w	r7, r0, #4
   d8e9a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8e9e:	d002      	beq.n	d8ea6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d8ea0:	f100 0508 	add.w	r5, r0, #8
   d8ea4:	e018      	b.n	d8ed8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8ea6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8ea8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8eaa:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8eae:	232f      	movs	r3, #47	; 0x2f
   d8eb0:	462a      	mov	r2, r5
   d8eb2:	200a      	movs	r0, #10
   d8eb4:	f7ff f810 	bl	d7ed8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8eb8:	4628      	mov	r0, r5
   d8eba:	f003 f983 	bl	dc1c4 <strlen>
   d8ebe:	6833      	ldr	r3, [r6, #0]
   d8ec0:	4602      	mov	r2, r0
   d8ec2:	68db      	ldr	r3, [r3, #12]
   d8ec4:	4629      	mov	r1, r5
   d8ec6:	4630      	mov	r0, r6
   d8ec8:	4798      	blx	r3
   d8eca:	e00f      	b.n	d8eec <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8ecc:	b124      	cbz	r4, d8ed8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8ece:	212e      	movs	r1, #46	; 0x2e
   d8ed0:	4630      	mov	r0, r6
   d8ed2:	f000 f9d9 	bl	d9288 <_ZN5Print5printEc>
   d8ed6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8ed8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8edc:	220a      	movs	r2, #10
   d8ede:	4630      	mov	r0, r6
   d8ee0:	f000 f9eb 	bl	d92ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ee4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8ee6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ee8:	d1f0      	bne.n	d8ecc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8eea:	4620      	mov	r0, r4
    }
    return n;
}
   d8eec:	b00d      	add	sp, #52	; 0x34
   d8eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8ef0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8ef0:	b510      	push	{r4, lr}
   d8ef2:	4b05      	ldr	r3, [pc, #20]	; (d8f08 <_ZN9IPAddressC1Ev+0x18>)
   d8ef4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8ef6:	2211      	movs	r2, #17
   d8ef8:	f840 3b04 	str.w	r3, [r0], #4
   d8efc:	2100      	movs	r1, #0
   d8efe:	f002 f9a1 	bl	db244 <memset>
{
    clear();
}
   d8f02:	4620      	mov	r0, r4
   d8f04:	bd10      	pop	{r4, pc}
   d8f06:	bf00      	nop
   d8f08:	000dd734 	.word	0x000dd734

000d8f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8f0c:	4603      	mov	r3, r0
   d8f0e:	4a07      	ldr	r2, [pc, #28]	; (d8f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8f10:	b510      	push	{r4, lr}
   d8f12:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8f16:	f101 0210 	add.w	r2, r1, #16
   d8f1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d8f1e:	f843 4b04 	str.w	r4, [r3], #4
   d8f22:	4291      	cmp	r1, r2
   d8f24:	d1f9      	bne.n	d8f1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8f26:	780a      	ldrb	r2, [r1, #0]
   d8f28:	701a      	strb	r2, [r3, #0]
}
   d8f2a:	bd10      	pop	{r4, pc}
   d8f2c:	000dd734 	.word	0x000dd734

000d8f30 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8f30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8f32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8f36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8f3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8f3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8f42:	2304      	movs	r3, #4
   d8f44:	6041      	str	r1, [r0, #4]
   d8f46:	7503      	strb	r3, [r0, #20]
   d8f48:	bd10      	pop	{r4, pc}

000d8f4a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8f4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8f4c:	780d      	ldrb	r5, [r1, #0]
   d8f4e:	788b      	ldrb	r3, [r1, #2]
   d8f50:	784a      	ldrb	r2, [r1, #1]
   d8f52:	78c9      	ldrb	r1, [r1, #3]
   d8f54:	9100      	str	r1, [sp, #0]
   d8f56:	4629      	mov	r1, r5
   d8f58:	f7ff ffea 	bl	d8f30 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8f5c:	b003      	add	sp, #12
   d8f5e:	bd30      	pop	{r4, r5, pc}

000d8f60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8f60:	4b01      	ldr	r3, [pc, #4]	; (d8f68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8f62:	4a02      	ldr	r2, [pc, #8]	; (d8f6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8f64:	601a      	str	r2, [r3, #0]
   d8f66:	4770      	bx	lr
   d8f68:	2003e294 	.word	0x2003e294
   d8f6c:	000dd7b0 	.word	0x000dd7b0

000d8f70 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8f70:	2200      	movs	r2, #0
   d8f72:	4611      	mov	r1, r2
   d8f74:	6840      	ldr	r0, [r0, #4]
   d8f76:	f7ff b99f 	b.w	d82b8 <network_listening>

000d8f7a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8f7a:	2200      	movs	r2, #0
   d8f7c:	4611      	mov	r1, r2
   d8f7e:	6840      	ldr	r0, [r0, #4]
   d8f80:	f7ff b9aa 	b.w	d82d8 <network_get_listen_timeout>

000d8f84 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8f84:	2200      	movs	r2, #0
   d8f86:	6840      	ldr	r0, [r0, #4]
   d8f88:	f7ff b99e 	b.w	d82c8 <network_set_listen_timeout>

000d8f8c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8f8c:	2200      	movs	r2, #0
   d8f8e:	f081 0101 	eor.w	r1, r1, #1
   d8f92:	6840      	ldr	r0, [r0, #4]
   d8f94:	f7ff b988 	b.w	d82a8 <network_listen>

000d8f98 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8f98:	2300      	movs	r3, #0
   d8f9a:	461a      	mov	r2, r3
   d8f9c:	2101      	movs	r1, #1
   d8f9e:	6840      	ldr	r0, [r0, #4]
   d8fa0:	f7ff b97a 	b.w	d8298 <network_off>

000d8fa4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8fa4:	2300      	movs	r3, #0
   d8fa6:	461a      	mov	r2, r3
   d8fa8:	4619      	mov	r1, r3
   d8faa:	6840      	ldr	r0, [r0, #4]
   d8fac:	f7ff b96c 	b.w	d8288 <network_on>

000d8fb0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8fb0:	2200      	movs	r2, #0
   d8fb2:	4611      	mov	r1, r2
   d8fb4:	6840      	ldr	r0, [r0, #4]
   d8fb6:	f7ff b95f 	b.w	d8278 <network_ready>

000d8fba <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8fba:	2200      	movs	r2, #0
   d8fbc:	4611      	mov	r1, r2
   d8fbe:	6840      	ldr	r0, [r0, #4]
   d8fc0:	f7ff b94a 	b.w	d8258 <network_connecting>

000d8fc4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8fc4:	2200      	movs	r2, #0
   d8fc6:	2102      	movs	r1, #2
   d8fc8:	6840      	ldr	r0, [r0, #4]
   d8fca:	f7ff b94d 	b.w	d8268 <network_disconnect>

000d8fce <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8fce:	2300      	movs	r3, #0
   d8fd0:	461a      	mov	r2, r3
   d8fd2:	6840      	ldr	r0, [r0, #4]
   d8fd4:	f7ff b938 	b.w	d8248 <network_connect>

000d8fd8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8fd8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8fda:	4605      	mov	r5, r0
   d8fdc:	b188      	cbz	r0, d9002 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8fde:	6804      	ldr	r4, [r0, #0]
   d8fe0:	b14c      	cbz	r4, d8ff6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8fe2:	68a3      	ldr	r3, [r4, #8]
   d8fe4:	b11b      	cbz	r3, d8fee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8fe6:	2203      	movs	r2, #3
   d8fe8:	4621      	mov	r1, r4
   d8fea:	4620      	mov	r0, r4
   d8fec:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8fee:	2110      	movs	r1, #16
   d8ff0:	4620      	mov	r0, r4
   d8ff2:	f001 f8a6 	bl	da142 <_ZdlPvj>
   d8ff6:	4628      	mov	r0, r5
   d8ff8:	2114      	movs	r1, #20
      }
   d8ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8ffe:	f001 b8a0 	b.w	da142 <_ZdlPvj>
   d9002:	bd38      	pop	{r3, r4, r5, pc}

000d9004 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d9004:	b110      	cbz	r0, d900c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d9006:	6803      	ldr	r3, [r0, #0]
   d9008:	685b      	ldr	r3, [r3, #4]
   d900a:	4718      	bx	r3
   d900c:	4770      	bx	lr

000d900e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d900e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9010:	6803      	ldr	r3, [r0, #0]
   d9012:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d9014:	b1bb      	cbz	r3, d9046 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d9016:	6858      	ldr	r0, [r3, #4]
   d9018:	f7fe fdee 	bl	d7bf8 <os_thread_is_current>
   d901c:	b978      	cbnz	r0, d903e <_ZN6ThreadD1Ev+0x30>
   d901e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d9020:	7c5a      	ldrb	r2, [r3, #17]
   d9022:	b912      	cbnz	r2, d902a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d9024:	6858      	ldr	r0, [r3, #4]
   d9026:	f7fe fdf7 	bl	d7c18 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d902a:	6823      	ldr	r3, [r4, #0]
   d902c:	6858      	ldr	r0, [r3, #4]
   d902e:	f7fe fdfb 	bl	d7c28 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9032:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9034:	2300      	movs	r3, #0
   d9036:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d9038:	b128      	cbz	r0, d9046 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d903a:	f7ff ffcd 	bl	d8fd8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d903e:	6820      	ldr	r0, [r4, #0]
   d9040:	b108      	cbz	r0, d9046 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d9042:	f7ff ffc9 	bl	d8fd8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d9046:	4620      	mov	r0, r4
   d9048:	bd10      	pop	{r4, pc}

000d904a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d904a:	b538      	push	{r3, r4, r5, lr}
   d904c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d904e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d9052:	b108      	cbz	r0, d9058 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d9054:	f7fb f825 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d9058:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d905c:	b108      	cbz	r0, d9062 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d905e:	f7fe fe13 	bl	d7c88 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9062:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d9066:	b135      	cbz	r5, d9076 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9068:	4628      	mov	r0, r5
   d906a:	f7ff ffd0 	bl	d900e <_ZN6ThreadD1Ev>
   d906e:	2104      	movs	r1, #4
   d9070:	4628      	mov	r0, r5
   d9072:	f001 f866 	bl	da142 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9076:	6820      	ldr	r0, [r4, #0]
   d9078:	b108      	cbz	r0, d907e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d907a:	f7ff ffc3 	bl	d9004 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d907e:	4620      	mov	r0, r4
   d9080:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9084 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d9084:	b510      	push	{r4, lr}
   d9086:	4b04      	ldr	r3, [pc, #16]	; (d9098 <_ZN5spark9MeshClassD1Ev+0x14>)
   d9088:	4604      	mov	r4, r0
   d908a:	f840 3b08 	str.w	r3, [r0], #8
   d908e:	f7ff ffdc 	bl	d904a <_ZN5spark11MeshPublishD1Ev>
   d9092:	4620      	mov	r0, r4
   d9094:	bd10      	pop	{r4, pc}
   d9096:	bf00      	nop
   d9098:	000dd81c 	.word	0x000dd81c

000d909c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d909c:	b538      	push	{r3, r4, r5, lr}
   d909e:	4c0e      	ldr	r4, [pc, #56]	; (d90d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d90a0:	4b0e      	ldr	r3, [pc, #56]	; (d90dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d90a2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d90a4:	2500      	movs	r5, #0
   d90a6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d90a8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d90ac:	6063      	str	r3, [r4, #4]
   d90ae:	60a5      	str	r5, [r4, #8]
   d90b0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d90b4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d90b8:	f7fe fdde 	bl	d7c78 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d90bc:	4b08      	ldr	r3, [pc, #32]	; (d90e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d90be:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d90c2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d90c6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d90c8:	4620      	mov	r0, r4
   d90ca:	4a06      	ldr	r2, [pc, #24]	; (d90e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d90cc:	4906      	ldr	r1, [pc, #24]	; (d90e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d90ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d90d2:	f001 b831 	b.w	da138 <__aeabi_atexit>
   d90d6:	bf00      	nop
   d90d8:	2003e298 	.word	0x2003e298
   d90dc:	000dd850 	.word	0x000dd850
   d90e0:	000dd81c 	.word	0x000dd81c
   d90e4:	2003dea8 	.word	0x2003dea8
   d90e8:	000d9085 	.word	0x000d9085

000d90ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d90ec:	2300      	movs	r3, #0
   d90ee:	461a      	mov	r2, r3
   d90f0:	6840      	ldr	r0, [r0, #4]
   d90f2:	f7ff b8a9 	b.w	d8248 <network_connect>

000d90f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d90f6:	2200      	movs	r2, #0
   d90f8:	2102      	movs	r1, #2
   d90fa:	6840      	ldr	r0, [r0, #4]
   d90fc:	f7ff b8b4 	b.w	d8268 <network_disconnect>

000d9100 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9100:	2200      	movs	r2, #0
   d9102:	4611      	mov	r1, r2
   d9104:	6840      	ldr	r0, [r0, #4]
   d9106:	f7ff b8a7 	b.w	d8258 <network_connecting>

000d910a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d910a:	2200      	movs	r2, #0
   d910c:	4611      	mov	r1, r2
   d910e:	6840      	ldr	r0, [r0, #4]
   d9110:	f7ff b8b2 	b.w	d8278 <network_ready>

000d9114 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9114:	2300      	movs	r3, #0
   d9116:	461a      	mov	r2, r3
   d9118:	4619      	mov	r1, r3
   d911a:	6840      	ldr	r0, [r0, #4]
   d911c:	f7ff b8b4 	b.w	d8288 <network_on>

000d9120 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9120:	2300      	movs	r3, #0
   d9122:	461a      	mov	r2, r3
   d9124:	4619      	mov	r1, r3
   d9126:	6840      	ldr	r0, [r0, #4]
   d9128:	f7ff b8b6 	b.w	d8298 <network_off>

000d912c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d912c:	2200      	movs	r2, #0
   d912e:	f081 0101 	eor.w	r1, r1, #1
   d9132:	6840      	ldr	r0, [r0, #4]
   d9134:	f7ff b8b8 	b.w	d82a8 <network_listen>

000d9138 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9138:	2200      	movs	r2, #0
   d913a:	6840      	ldr	r0, [r0, #4]
   d913c:	f7ff b8c4 	b.w	d82c8 <network_set_listen_timeout>

000d9140 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9140:	2200      	movs	r2, #0
   d9142:	4611      	mov	r1, r2
   d9144:	6840      	ldr	r0, [r0, #4]
   d9146:	f7ff b8c7 	b.w	d82d8 <network_get_listen_timeout>

000d914a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d914a:	2200      	movs	r2, #0
   d914c:	4611      	mov	r1, r2
   d914e:	6840      	ldr	r0, [r0, #4]
   d9150:	f7ff b8b2 	b.w	d82b8 <network_listening>

000d9154 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9158:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d915a:	b095      	sub	sp, #84	; 0x54
   d915c:	4616      	mov	r6, r2
   d915e:	460d      	mov	r5, r1
   d9160:	4607      	mov	r7, r0
    IPAddress addr;
   d9162:	f7ff fec5 	bl	d8ef0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d9166:	4621      	mov	r1, r4
   d9168:	2220      	movs	r2, #32
   d916a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d916c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d916e:	f002 f869 	bl	db244 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9172:	2340      	movs	r3, #64	; 0x40
   d9174:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9176:	4621      	mov	r1, r4
   d9178:	466b      	mov	r3, sp
   d917a:	aa0c      	add	r2, sp, #48	; 0x30
   d917c:	4630      	mov	r0, r6
   d917e:	f7fe febb 	bl	d7ef8 <netdb_getaddrinfo>
    if (!r) {
   d9182:	4604      	mov	r4, r0
   d9184:	2800      	cmp	r0, #0
   d9186:	d144      	bne.n	d9212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9188:	4602      	mov	r2, r0
   d918a:	2101      	movs	r1, #1
   d918c:	6868      	ldr	r0, [r5, #4]
   d918e:	f7ff f873 	bl	d8278 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9192:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9194:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9196:	4622      	mov	r2, r4
   d9198:	6868      	ldr	r0, [r5, #4]
   d919a:	f7ff f86d 	bl	d8278 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d919e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d91a0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d91a2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d91a4:	2e00      	cmp	r6, #0
   d91a6:	d034      	beq.n	d9212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d91a8:	2900      	cmp	r1, #0
   d91aa:	d132      	bne.n	d9212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d91ac:	6873      	ldr	r3, [r6, #4]
   d91ae:	2b02      	cmp	r3, #2
   d91b0:	d002      	beq.n	d91b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d91b2:	2b0a      	cmp	r3, #10
   d91b4:	d009      	beq.n	d91ca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d91b6:	e02a      	b.n	d920e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d91b8:	f1b8 0f00 	cmp.w	r8, #0
   d91bc:	d027      	beq.n	d920e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d91be:	6971      	ldr	r1, [r6, #20]
   d91c0:	4638      	mov	r0, r7
   d91c2:	3104      	adds	r1, #4
   d91c4:	f7ff fec1 	bl	d8f4a <_ZN9IPAddressaSEPKh>
   d91c8:	e020      	b.n	d920c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d91ca:	f1b9 0f00 	cmp.w	r9, #0
   d91ce:	d01e      	beq.n	d920e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d91d0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d91d2:	2211      	movs	r2, #17
   d91d4:	a801      	add	r0, sp, #4
   d91d6:	f002 f835 	bl	db244 <memset>
                    a.v = 6;
   d91da:	2306      	movs	r3, #6
   d91dc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d91e0:	ad01      	add	r5, sp, #4
   d91e2:	f104 0308 	add.w	r3, r4, #8
   d91e6:	3418      	adds	r4, #24
   d91e8:	6818      	ldr	r0, [r3, #0]
   d91ea:	6859      	ldr	r1, [r3, #4]
   d91ec:	462a      	mov	r2, r5
   d91ee:	c203      	stmia	r2!, {r0, r1}
   d91f0:	3308      	adds	r3, #8
   d91f2:	42a3      	cmp	r3, r4
   d91f4:	4615      	mov	r5, r2
   d91f6:	d1f7      	bne.n	d91e8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d91f8:	a901      	add	r1, sp, #4
   d91fa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d91fc:	ad07      	add	r5, sp, #28
   d91fe:	f7ff fe85 	bl	d8f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9204:	1d3c      	adds	r4, r7, #4
   d9206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9208:	682b      	ldr	r3, [r5, #0]
   d920a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d920c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d920e:	69f6      	ldr	r6, [r6, #28]
   d9210:	e7c8      	b.n	d91a4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9212:	9800      	ldr	r0, [sp, #0]
   d9214:	f7fe fe68 	bl	d7ee8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9218:	4638      	mov	r0, r7
   d921a:	b015      	add	sp, #84	; 0x54
   d921c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9220 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9220:	4b02      	ldr	r3, [pc, #8]	; (d922c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9222:	4a03      	ldr	r2, [pc, #12]	; (d9230 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9224:	601a      	str	r2, [r3, #0]
   d9226:	2200      	movs	r2, #0
   d9228:	605a      	str	r2, [r3, #4]
   d922a:	4770      	bx	lr
   d922c:	2003e46c 	.word	0x2003e46c
   d9230:	000dd850 	.word	0x000dd850

000d9234 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9236:	4606      	mov	r6, r0
   d9238:	460d      	mov	r5, r1
   d923a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d923c:	2400      	movs	r4, #0
  while (size--) {
   d923e:	42bd      	cmp	r5, r7
   d9240:	d00c      	beq.n	d925c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9242:	6833      	ldr	r3, [r6, #0]
   d9244:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9248:	689b      	ldr	r3, [r3, #8]
   d924a:	4630      	mov	r0, r6
   d924c:	4798      	blx	r3
     if (chunk>=0)
   d924e:	2800      	cmp	r0, #0
   d9250:	db01      	blt.n	d9256 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9252:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d9254:	e7f3      	b.n	d923e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9256:	2c00      	cmp	r4, #0
   d9258:	bf08      	it	eq
   d925a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d925c:	4620      	mov	r0, r4
   d925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9260 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d9260:	b570      	push	{r4, r5, r6, lr}
   d9262:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d9264:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d9266:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d9268:	b149      	cbz	r1, d927e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d926a:	f002 ffab 	bl	dc1c4 <strlen>
   d926e:	682b      	ldr	r3, [r5, #0]
   d9270:	4602      	mov	r2, r0
   d9272:	4621      	mov	r1, r4
   d9274:	4628      	mov	r0, r5
   d9276:	68db      	ldr	r3, [r3, #12]
    }
   d9278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d927c:	4718      	bx	r3
    }
   d927e:	bd70      	pop	{r4, r5, r6, pc}

000d9280 <_ZN5Print5printEPKc>:
   d9280:	b508      	push	{r3, lr}
   d9282:	f7ff ffed 	bl	d9260 <_ZN5Print5writeEPKc>
   d9286:	bd08      	pop	{r3, pc}

000d9288 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d9288:	6803      	ldr	r3, [r0, #0]
   d928a:	689b      	ldr	r3, [r3, #8]
   d928c:	4718      	bx	r3

000d928e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d928e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9290:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9292:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9294:	f7ff fff8 	bl	d9288 <_ZN5Print5printEc>
  n += print('\n');
   d9298:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d929a:	4604      	mov	r4, r0
  n += print('\n');
   d929c:	4628      	mov	r0, r5
   d929e:	f7ff fff3 	bl	d9288 <_ZN5Print5printEc>
  return n;
}
   d92a2:	4420      	add	r0, r4
   d92a4:	bd38      	pop	{r3, r4, r5, pc}

000d92a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d92a6:	b538      	push	{r3, r4, r5, lr}
   d92a8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d92aa:	f7ff ffd9 	bl	d9260 <_ZN5Print5writeEPKc>
   d92ae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d92b0:	4628      	mov	r0, r5
   d92b2:	f7ff ffec 	bl	d928e <_ZN5Print7printlnEv>
  return n;
}
   d92b6:	4420      	add	r0, r4
   d92b8:	bd38      	pop	{r3, r4, r5, pc}

000d92ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d92ba:	b530      	push	{r4, r5, lr}
   d92bc:	b08b      	sub	sp, #44	; 0x2c
   d92be:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d92c0:	2100      	movs	r1, #0
   d92c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d92c6:	2a01      	cmp	r2, #1
   d92c8:	bf98      	it	ls
   d92ca:	220a      	movls	r2, #10
   d92cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d92d0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d92d4:	fb05 3312 	mls	r3, r5, r2, r3
   d92d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d92dc:	2b09      	cmp	r3, #9
   d92de:	bf94      	ite	ls
   d92e0:	3330      	addls	r3, #48	; 0x30
   d92e2:	3337      	addhi	r3, #55	; 0x37
   d92e4:	b2db      	uxtb	r3, r3
   d92e6:	4621      	mov	r1, r4
   d92e8:	f804 3901 	strb.w	r3, [r4], #-1
   d92ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d92ee:	2d00      	cmp	r5, #0
   d92f0:	d1ee      	bne.n	d92d0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d92f2:	f7ff ffb5 	bl	d9260 <_ZN5Print5writeEPKc>
}
   d92f6:	b00b      	add	sp, #44	; 0x2c
   d92f8:	bd30      	pop	{r4, r5, pc}
	...

000d92fc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d92fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9300:	ec57 6b10 	vmov	r6, r7, d0
   d9304:	4682      	mov	sl, r0
   d9306:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9308:	ee10 2a10 	vmov	r2, s0
   d930c:	463b      	mov	r3, r7
   d930e:	ee10 0a10 	vmov	r0, s0
   d9312:	4639      	mov	r1, r7
   d9314:	f001 fcce 	bl	dacb4 <__aeabi_dcmpun>
   d9318:	b108      	cbz	r0, d931e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d931a:	494e      	ldr	r1, [pc, #312]	; (d9454 <_ZN5Print10printFloatEdh+0x158>)
   d931c:	e012      	b.n	d9344 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d931e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d9322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9326:	4b4c      	ldr	r3, [pc, #304]	; (d9458 <_ZN5Print10printFloatEdh+0x15c>)
   d9328:	4630      	mov	r0, r6
   d932a:	4649      	mov	r1, r9
   d932c:	f001 fcc2 	bl	dacb4 <__aeabi_dcmpun>
   d9330:	b968      	cbnz	r0, d934e <_ZN5Print10printFloatEdh+0x52>
   d9332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9336:	4b48      	ldr	r3, [pc, #288]	; (d9458 <_ZN5Print10printFloatEdh+0x15c>)
   d9338:	4630      	mov	r0, r6
   d933a:	4649      	mov	r1, r9
   d933c:	f001 fc9c 	bl	dac78 <__aeabi_dcmple>
   d9340:	b928      	cbnz	r0, d934e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d9342:	4946      	ldr	r1, [pc, #280]	; (d945c <_ZN5Print10printFloatEdh+0x160>)
   d9344:	4650      	mov	r0, sl
   d9346:	f7ff ff8b 	bl	d9260 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d934e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9352:	4b43      	ldr	r3, [pc, #268]	; (d9460 <_ZN5Print10printFloatEdh+0x164>)
   d9354:	4630      	mov	r0, r6
   d9356:	4639      	mov	r1, r7
   d9358:	f001 fca2 	bl	daca0 <__aeabi_dcmpgt>
   d935c:	b108      	cbz	r0, d9362 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d935e:	4941      	ldr	r1, [pc, #260]	; (d9464 <_ZN5Print10printFloatEdh+0x168>)
   d9360:	e7f0      	b.n	d9344 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9362:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9366:	4b40      	ldr	r3, [pc, #256]	; (d9468 <_ZN5Print10printFloatEdh+0x16c>)
   d9368:	4630      	mov	r0, r6
   d936a:	4639      	mov	r1, r7
   d936c:	f001 fc7a 	bl	dac64 <__aeabi_dcmplt>
   d9370:	2800      	cmp	r0, #0
   d9372:	d1f4      	bne.n	d935e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d9374:	2200      	movs	r2, #0
   d9376:	2300      	movs	r3, #0
   d9378:	4630      	mov	r0, r6
   d937a:	4639      	mov	r1, r7
   d937c:	f001 fc72 	bl	dac64 <__aeabi_dcmplt>
   d9380:	b140      	cbz	r0, d9394 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d9382:	212d      	movs	r1, #45	; 0x2d
   d9384:	4650      	mov	r0, sl
   d9386:	f7ff ff7f 	bl	d9288 <_ZN5Print5printEc>
     number = -number;
   d938a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d938e:	4604      	mov	r4, r0
     number = -number;
   d9390:	461f      	mov	r7, r3
   d9392:	e000      	b.n	d9396 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9394:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d9396:	4935      	ldr	r1, [pc, #212]	; (d946c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d9398:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d939c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d939e:	fa5f f388 	uxtb.w	r3, r8
   d93a2:	429d      	cmp	r5, r3
   d93a4:	d906      	bls.n	d93b4 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d93a6:	2200      	movs	r2, #0
   d93a8:	4b31      	ldr	r3, [pc, #196]	; (d9470 <_ZN5Print10printFloatEdh+0x174>)
   d93aa:	f001 fb13 	bl	da9d4 <__aeabi_ddiv>
   d93ae:	f108 0801 	add.w	r8, r8, #1
   d93b2:	e7f4      	b.n	d939e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d93b4:	4632      	mov	r2, r6
   d93b6:	463b      	mov	r3, r7
   d93b8:	f001 f830 	bl	da41c <__adddf3>
   d93bc:	460f      	mov	r7, r1
   d93be:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d93c0:	f001 fcb6 	bl	dad30 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d93c4:	220a      	movs	r2, #10
   d93c6:	4601      	mov	r1, r0
   d93c8:	4680      	mov	r8, r0
   d93ca:	4650      	mov	r0, sl
   d93cc:	f7ff ff75 	bl	d92ba <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d93d0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d93d2:	b3e5      	cbz	r5, d944e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d93d4:	4640      	mov	r0, r8
   d93d6:	f001 f95d 	bl	da694 <__aeabi_ui2d>
   d93da:	4602      	mov	r2, r0
   d93dc:	460b      	mov	r3, r1
   d93de:	4630      	mov	r0, r6
   d93e0:	4639      	mov	r1, r7
   d93e2:	f001 f819 	bl	da418 <__aeabi_dsub>
   d93e6:	4606      	mov	r6, r0
   d93e8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d93ea:	4650      	mov	r0, sl
   d93ec:	4921      	ldr	r1, [pc, #132]	; (d9474 <_ZN5Print10printFloatEdh+0x178>)
   d93ee:	f7ff ff37 	bl	d9260 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d93f2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d93f4:	2200      	movs	r2, #0
   d93f6:	4b1e      	ldr	r3, [pc, #120]	; (d9470 <_ZN5Print10printFloatEdh+0x174>)
   d93f8:	4630      	mov	r0, r6
   d93fa:	4639      	mov	r1, r7
   d93fc:	f001 f9c0 	bl	da780 <__aeabi_dmul>
   d9400:	4606      	mov	r6, r0
   d9402:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d9404:	f001 fc6c 	bl	dace0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d9408:	f1b0 0900 	subs.w	r9, r0, #0
   d940c:	da07      	bge.n	d941e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d940e:	212d      	movs	r1, #45	; 0x2d
   d9410:	4650      	mov	r0, sl
   d9412:	f7ff ff39 	bl	d9288 <_ZN5Print5printEc>
            val = -n;
   d9416:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d941a:	4680      	mov	r8, r0
   d941c:	e002      	b.n	d9424 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d941e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d9420:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9424:	220a      	movs	r2, #10
   d9426:	4650      	mov	r0, sl
   d9428:	f7ff ff47 	bl	d92ba <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d942c:	4440      	add	r0, r8
   d942e:	4404      	add	r4, r0
    remainder -= toPrint;
   d9430:	4648      	mov	r0, r9
   d9432:	f001 f93f 	bl	da6b4 <__aeabi_i2d>
   d9436:	4602      	mov	r2, r0
   d9438:	460b      	mov	r3, r1
   d943a:	4630      	mov	r0, r6
   d943c:	4639      	mov	r1, r7
   d943e:	f000 ffeb 	bl	da418 <__aeabi_dsub>
   d9442:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d9444:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d9448:	4606      	mov	r6, r0
   d944a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d944c:	d1d2      	bne.n	d93f4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d944e:	4620      	mov	r0, r4
   d9450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9454:	000dd87c 	.word	0x000dd87c
   d9458:	7fefffff 	.word	0x7fefffff
   d945c:	000dd886 	.word	0x000dd886
   d9460:	41efffff 	.word	0x41efffff
   d9464:	000dd880 	.word	0x000dd880
   d9468:	c1efffff 	.word	0xc1efffff
   d946c:	3fe00000 	.word	0x3fe00000
   d9470:	40240000 	.word	0x40240000
   d9474:	000dd884 	.word	0x000dd884

000d9478 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d9478:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d947a:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d947c:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d947e:	f7ff ff3d 	bl	d92fc <_ZN5Print10printFloatEdh>
   d9482:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d9484:	4628      	mov	r0, r5
   d9486:	f7ff ff02 	bl	d928e <_ZN5Print7printlnEv>
  return n;
}
   d948a:	4420      	add	r0, r4
   d948c:	bd38      	pop	{r3, r4, r5, pc}

000d948e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d948e:	b40c      	push	{r2, r3}
   d9490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9494:	b087      	sub	sp, #28
   d9496:	af00      	add	r7, sp, #0
   d9498:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d949c:	4605      	mov	r5, r0
   d949e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d94a2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d94a4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d94a6:	4623      	mov	r3, r4
   d94a8:	464a      	mov	r2, r9
   d94aa:	2114      	movs	r1, #20
   d94ac:	1d38      	adds	r0, r7, #4
   d94ae:	f7fe ff53 	bl	d8358 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d94b2:	2813      	cmp	r0, #19
   d94b4:	d805      	bhi.n	d94c2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94b6:	1d39      	adds	r1, r7, #4
   d94b8:	4628      	mov	r0, r5
   d94ba:	f7ff fed1 	bl	d9260 <_ZN5Print5writeEPKc>
   d94be:	4604      	mov	r4, r0
   d94c0:	e013      	b.n	d94ea <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d94c2:	f100 0308 	add.w	r3, r0, #8
   d94c6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d94ca:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d94cc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d94d0:	1c41      	adds	r1, r0, #1
   d94d2:	4623      	mov	r3, r4
   d94d4:	464a      	mov	r2, r9
   d94d6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d94d8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d94da:	f7fe ff3d 	bl	d8358 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d94de:	4669      	mov	r1, sp
   d94e0:	4628      	mov	r0, r5
   d94e2:	f7ff febd 	bl	d9260 <_ZN5Print5writeEPKc>
   d94e6:	4604      	mov	r4, r0
   d94e8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d94ea:	b11e      	cbz	r6, d94f4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d94ec:	4628      	mov	r0, r5
   d94ee:	f7ff fece 	bl	d928e <_ZN5Print7printlnEv>
   d94f2:	4404      	add	r4, r0
    return n;
}
   d94f4:	4620      	mov	r0, r4
   d94f6:	371c      	adds	r7, #28
   d94f8:	46bd      	mov	sp, r7
   d94fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d94fe:	b002      	add	sp, #8
   d9500:	4770      	bx	lr

000d9502 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9502:	b510      	push	{r4, lr}
   d9504:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9506:	f7fd fa74 	bl	d69f2 <_ZNSt14_Function_baseD1Ev>
   d950a:	4620      	mov	r0, r4
   d950c:	bd10      	pop	{r4, pc}
	...

000d9510 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9510:	4803      	ldr	r0, [pc, #12]	; (d9520 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9512:	4a04      	ldr	r2, [pc, #16]	; (d9524 <_GLOBAL__sub_I_RGB+0x14>)
   d9514:	4904      	ldr	r1, [pc, #16]	; (d9528 <_GLOBAL__sub_I_RGB+0x18>)
   d9516:	2300      	movs	r3, #0
   d9518:	6083      	str	r3, [r0, #8]
   d951a:	f000 be0d 	b.w	da138 <__aeabi_atexit>
   d951e:	bf00      	nop
   d9520:	2003e474 	.word	0x2003e474
   d9524:	2003dea8 	.word	0x2003dea8
   d9528:	000d9503 	.word	0x000d9503

000d952c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d952c:	2100      	movs	r1, #0
   d952e:	f7fe bd1b 	b.w	d7f68 <HAL_SPI_Acquire>

000d9532 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d9532:	2100      	movs	r1, #0
   d9534:	f7fe bd20 	b.w	d7f78 <HAL_SPI_Release>

000d9538 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d9538:	b510      	push	{r4, lr}
   d953a:	4604      	mov	r4, r0
{
    _spi = spi;
   d953c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d953e:	4608      	mov	r0, r1
   d9540:	f7fe fcf2 	bl	d7f28 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9544:	2300      	movs	r3, #0
   d9546:	6063      	str	r3, [r4, #4]
}
   d9548:	4620      	mov	r0, r4
   d954a:	bd10      	pop	{r4, pc}

000d954c <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d954c:	b538      	push	{r3, r4, r5, lr}
   d954e:	4604      	mov	r4, r0
    if (!lock())
   d9550:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9552:	460d      	mov	r5, r1
    if (!lock())
   d9554:	f7ff ffea 	bl	d952c <_ZN8SPIClass4lockEv.isra.0>
   d9558:	b940      	cbnz	r0, d956c <_ZN8SPIClass5beginEt+0x20>
    {
        HAL_SPI_Begin(_spi, ss_pin);
   d955a:	7820      	ldrb	r0, [r4, #0]
   d955c:	4629      	mov	r1, r5
   d955e:	f7fe fcd3 	bl	d7f08 <HAL_SPI_Begin>
        unlock();
   d9562:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::begin(uint16_t ss_pin)
{
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
        unlock();
   d9568:	f7ff bfe3 	b.w	d9532 <_ZN8SPIClass6unlockEv.isra.1>
   d956c:	bd38      	pop	{r3, r4, r5, pc}

000d956e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d956e:	7800      	ldrb	r0, [r0, #0]
   d9570:	f7ff bfdf 	b.w	d9532 <_ZN8SPIClass6unlockEv.isra.1>

000d9574 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9574:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d9576:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9578:	6018      	str	r0, [r3, #0]
   d957a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d957c:	6818      	ldr	r0, [r3, #0]
   d957e:	4288      	cmp	r0, r1
   d9580:	b2e5      	uxtb	r5, r4
   d9582:	d906      	bls.n	d9592 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9584:	3401      	adds	r4, #1
   d9586:	2c08      	cmp	r4, #8
   d9588:	d002      	beq.n	d9590 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d958a:	0840      	lsrs	r0, r0, #1
   d958c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d958e:	e7f5      	b.n	d957c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9590:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d9592:	4b02      	ldr	r3, [pc, #8]	; (d959c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9594:	5d5b      	ldrb	r3, [r3, r5]
   d9596:	7013      	strb	r3, [r2, #0]
   d9598:	bd30      	pop	{r4, r5, pc}
   d959a:	bf00      	nop
   d959c:	000dd88a 	.word	0x000dd88a

000d95a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d95a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d95a4:	4607      	mov	r7, r0
   d95a6:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d95a8:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d95aa:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d95ac:	f7ff ffbe 	bl	d952c <_ZN8SPIClass4lockEv.isra.0>
   d95b0:	2800      	cmp	r0, #0
   d95b2:	db62      	blt.n	d967a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d95b4:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d95b6:	2214      	movs	r2, #20
   d95b8:	2100      	movs	r1, #0
   d95ba:	a809      	add	r0, sp, #36	; 0x24
   d95bc:	f001 fe42 	bl	db244 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d95c0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d95c2:	4620      	mov	r0, r4
   d95c4:	2200      	movs	r2, #0
   d95c6:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d95c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d95cc:	f7fe fcbc 	bl	d7f48 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d95d0:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d95d4:	b154      	cbz	r4, d95ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d95d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d95da:	b935      	cbnz	r5, d95ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d95dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d95e0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d95e4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d95e8:	e003      	b.n	d95f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d95ea:	2400      	movs	r4, #0
   d95ec:	46a1      	mov	r9, r4
   d95ee:	46a0      	mov	r8, r4
   d95f0:	2501      	movs	r5, #1
   d95f2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d95f4:	b105      	cbz	r5, d95f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d95f6:	b9bb      	cbnz	r3, d9628 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d95f8:	429d      	cmp	r5, r3
   d95fa:	d10b      	bne.n	d9614 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d95fc:	68b2      	ldr	r2, [r6, #8]
   d95fe:	4542      	cmp	r2, r8
   d9600:	d108      	bne.n	d9614 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9602:	f88d 9020 	strb.w	r9, [sp, #32]
   d9606:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d960a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d960e:	89b2      	ldrh	r2, [r6, #12]
   d9610:	4291      	cmp	r1, r2
   d9612:	d009      	beq.n	d9628 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d9614:	b153      	cbz	r3, d962c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9616:	2400      	movs	r4, #0
   d9618:	7838      	ldrb	r0, [r7, #0]
   d961a:	9401      	str	r4, [sp, #4]
   d961c:	9400      	str	r4, [sp, #0]
   d961e:	4623      	mov	r3, r4
   d9620:	4622      	mov	r2, r4
   d9622:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9624:	f7fe fc98 	bl	d7f58 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d9628:	2000      	movs	r0, #0
   d962a:	e026      	b.n	d967a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d962c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d9630:	68b1      	ldr	r1, [r6, #8]
   d9632:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9634:	ab04      	add	r3, sp, #16
   d9636:	f10d 020f 	add.w	r2, sp, #15
   d963a:	f7ff ff9b 	bl	d9574 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d963e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d9640:	b105      	cbz	r5, d9644 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d9642:	b9b1      	cbnz	r1, d9672 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d9644:	42a9      	cmp	r1, r5
   d9646:	d008      	beq.n	d965a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d9648:	2400      	movs	r4, #0
   d964a:	7838      	ldrb	r0, [r7, #0]
   d964c:	9401      	str	r4, [sp, #4]
   d964e:	7b74      	ldrb	r4, [r6, #13]
   d9650:	7b33      	ldrb	r3, [r6, #12]
   d9652:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9656:	9400      	str	r4, [sp, #0]
   d9658:	e7e4      	b.n	d9624 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d965a:	68b3      	ldr	r3, [r6, #8]
   d965c:	4543      	cmp	r3, r8
   d965e:	d3f3      	bcc.n	d9648 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d9660:	f88d 9020 	strb.w	r9, [sp, #32]
   d9664:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d9668:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d966c:	89b3      	ldrh	r3, [r6, #12]
   d966e:	429a      	cmp	r2, r3
   d9670:	d1ea      	bne.n	d9648 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9672:	9b04      	ldr	r3, [sp, #16]
   d9674:	4543      	cmp	r3, r8
   d9676:	d1e7      	bne.n	d9648 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d9678:	e7d6      	b.n	d9628 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d967a:	b00f      	add	sp, #60	; 0x3c
   d967c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9680 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9680:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d9682:	7800      	ldrb	r0, [r0, #0]
   d9684:	f7fe fc48 	bl	d7f18 <HAL_SPI_Send_Receive_Data>
}
   d9688:	b2c0      	uxtb	r0, r0
   d968a:	bd08      	pop	{r3, pc}

000d968c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d968c:	7800      	ldrb	r0, [r0, #0]
   d968e:	f7fe bc53 	b.w	d7f38 <HAL_SPI_Is_Enabled>

000d9692 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9692:	b510      	push	{r4, lr}
   d9694:	4604      	mov	r4, r0
{
	free(buffer);
   d9696:	6800      	ldr	r0, [r0, #0]
   d9698:	f7fe fe2e 	bl	d82f8 <free>
}
   d969c:	4620      	mov	r0, r4
   d969e:	bd10      	pop	{r4, pc}

000d96a0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d96a0:	b510      	push	{r4, lr}
   d96a2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d96a4:	6800      	ldr	r0, [r0, #0]
   d96a6:	b108      	cbz	r0, d96ac <_ZN6String10invalidateEv+0xc>
   d96a8:	f7fe fe26 	bl	d82f8 <free>
	buffer = NULL;
   d96ac:	2300      	movs	r3, #0
   d96ae:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d96b0:	60a3      	str	r3, [r4, #8]
   d96b2:	6063      	str	r3, [r4, #4]
   d96b4:	bd10      	pop	{r4, pc}

000d96b6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d96b6:	b538      	push	{r3, r4, r5, lr}
   d96b8:	4604      	mov	r4, r0
   d96ba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d96bc:	6800      	ldr	r0, [r0, #0]
   d96be:	3101      	adds	r1, #1
   d96c0:	f7fe fe22 	bl	d8308 <realloc>
	if (newbuffer) {
   d96c4:	b110      	cbz	r0, d96cc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d96c6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d96ca:	2001      	movs	r0, #1
	}
	return 0;
}
   d96cc:	bd38      	pop	{r3, r4, r5, pc}

000d96ce <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d96ce:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d96d0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d96d2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d96d4:	b113      	cbz	r3, d96dc <_ZN6String7reserveEj+0xe>
   d96d6:	6843      	ldr	r3, [r0, #4]
   d96d8:	428b      	cmp	r3, r1
   d96da:	d207      	bcs.n	d96ec <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d96dc:	4620      	mov	r0, r4
   d96de:	f7ff ffea 	bl	d96b6 <_ZN6String12changeBufferEj>
   d96e2:	b120      	cbz	r0, d96ee <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d96e4:	68a3      	ldr	r3, [r4, #8]
   d96e6:	b90b      	cbnz	r3, d96ec <_ZN6String7reserveEj+0x1e>
   d96e8:	6822      	ldr	r2, [r4, #0]
   d96ea:	7013      	strb	r3, [r2, #0]
   d96ec:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d96ee:	bd10      	pop	{r4, pc}

000d96f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d96f0:	b570      	push	{r4, r5, r6, lr}
   d96f2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d96f4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d96f6:	4604      	mov	r4, r0
   d96f8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d96fa:	f7ff ffe8 	bl	d96ce <_ZN6String7reserveEj>
   d96fe:	b918      	cbnz	r0, d9708 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d9700:	4620      	mov	r0, r4
   d9702:	f7ff ffcd 	bl	d96a0 <_ZN6String10invalidateEv>
		return *this;
   d9706:	e009      	b.n	d971c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d9708:	462a      	mov	r2, r5
   d970a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d970c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d970e:	6820      	ldr	r0, [r4, #0]
   d9710:	f001 fd72 	bl	db1f8 <memcpy>
	buffer[len] = 0;
   d9714:	6822      	ldr	r2, [r4, #0]
   d9716:	68a3      	ldr	r3, [r4, #8]
   d9718:	2100      	movs	r1, #0
   d971a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d971c:	4620      	mov	r0, r4
   d971e:	bd70      	pop	{r4, r5, r6, pc}

000d9720 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9720:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9722:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d9724:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9726:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d9728:	6043      	str	r3, [r0, #4]
	len = 0;
   d972a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d972c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d972e:	460d      	mov	r5, r1
   d9730:	b139      	cbz	r1, d9742 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d9732:	4608      	mov	r0, r1
   d9734:	f002 fd46 	bl	dc1c4 <strlen>
   d9738:	4629      	mov	r1, r5
   d973a:	4602      	mov	r2, r0
   d973c:	4620      	mov	r0, r4
   d973e:	f7ff ffd7 	bl	d96f0 <_ZN6String4copyEPKcj>
}
   d9742:	4620      	mov	r0, r4
   d9744:	bd38      	pop	{r3, r4, r5, pc}

000d9746 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9746:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d9748:	b510      	push	{r4, lr}
   d974a:	460b      	mov	r3, r1
   d974c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d974e:	d007      	beq.n	d9760 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9750:	6809      	ldr	r1, [r1, #0]
   d9752:	b119      	cbz	r1, d975c <_ZN6StringaSERKS_+0x16>
   d9754:	689a      	ldr	r2, [r3, #8]
   d9756:	f7ff ffcb 	bl	d96f0 <_ZN6String4copyEPKcj>
   d975a:	e001      	b.n	d9760 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d975c:	f7ff ffa0 	bl	d96a0 <_ZN6String10invalidateEv>

	return *this;
}
   d9760:	4620      	mov	r0, r4
   d9762:	bd10      	pop	{r4, pc}

000d9764 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9764:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d9766:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d9768:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d976a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d976c:	6043      	str	r3, [r0, #4]
	len = 0;
   d976e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9770:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d9772:	f7ff ffe8 	bl	d9746 <_ZN6StringaSERKS_>
}
   d9776:	4620      	mov	r0, r4
   d9778:	bd10      	pop	{r4, pc}

000d977a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d977a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d977c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d977e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9780:	b912      	cbnz	r2, d9788 <_ZNK6String6equalsEPKc+0xe>
   d9782:	b919      	cbnz	r1, d978c <_ZNK6String6equalsEPKc+0x12>
   d9784:	2001      	movs	r0, #1
   d9786:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9788:	b911      	cbnz	r1, d9790 <_ZNK6String6equalsEPKc+0x16>
   d978a:	6803      	ldr	r3, [r0, #0]
   d978c:	7818      	ldrb	r0, [r3, #0]
   d978e:	e002      	b.n	d9796 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d9790:	6800      	ldr	r0, [r0, #0]
   d9792:	f001 ffd5 	bl	db740 <strcmp>
   d9796:	fab0 f080 	clz	r0, r0
   d979a:	0940      	lsrs	r0, r0, #5
}
   d979c:	bd08      	pop	{r3, pc}

000d979e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d979e:	b570      	push	{r4, r5, r6, lr}
   d97a0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d97a2:	b19a      	cbz	r2, d97cc <_ZNK6String8getBytesEPhjj+0x2e>
   d97a4:	b191      	cbz	r1, d97cc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d97a6:	6885      	ldr	r5, [r0, #8]
   d97a8:	429d      	cmp	r5, r3
   d97aa:	d802      	bhi.n	d97b2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d97ac:	2300      	movs	r3, #0
   d97ae:	700b      	strb	r3, [r1, #0]
		return;
   d97b0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d97b2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d97b4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d97b6:	6801      	ldr	r1, [r0, #0]
   d97b8:	42ac      	cmp	r4, r5
   d97ba:	bf28      	it	cs
   d97bc:	462c      	movcs	r4, r5
   d97be:	4419      	add	r1, r3
   d97c0:	4622      	mov	r2, r4
   d97c2:	4630      	mov	r0, r6
   d97c4:	f002 fd1b 	bl	dc1fe <strncpy>
	buf[n] = 0;
   d97c8:	2300      	movs	r3, #0
   d97ca:	5533      	strb	r3, [r6, r4]
   d97cc:	bd70      	pop	{r4, r5, r6, pc}

000d97ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d97ce:	b510      	push	{r4, lr}
   d97d0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d97d2:	6800      	ldr	r0, [r0, #0]
   d97d4:	b118      	cbz	r0, d97de <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d97d6:	f7fe fd8f 	bl	d82f8 <free>
            wakeupSource_ = nullptr;
   d97da:	2300      	movs	r3, #0
   d97dc:	6023      	str	r3, [r4, #0]
   d97de:	bd10      	pop	{r4, pc}

000d97e0 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d97e0:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d97e2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d97e6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d97e8:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d97ea:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d97ec:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d97f0:	f8c0 2006 	str.w	r2, [r0, #6]
   d97f4:	889b      	ldrh	r3, [r3, #4]
   d97f6:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d97f8:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d97fa:	f7ff ffe8 	bl	d97ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d97fe:	682b      	ldr	r3, [r5, #0]
   d9800:	b113      	cbz	r3, d9808 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d9802:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d9804:	2300      	movs	r3, #0
   d9806:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d9808:	4620      	mov	r0, r4
   d980a:	bd38      	pop	{r3, r4, r5, pc}

000d980c <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d980c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d9810:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d9812:	b90b      	cbnz	r3, d9818 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d9814:	680a      	ldr	r2, [r1, #0]
   d9816:	b19a      	cbz	r2, d9840 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d9818:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d981a:	b15c      	cbz	r4, d9834 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d981c:	88a2      	ldrh	r2, [r4, #4]
   d981e:	2a01      	cmp	r2, #1
   d9820:	d003      	beq.n	d982a <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d9822:	2a04      	cmp	r2, #4
   d9824:	d106      	bne.n	d9834 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d9826:	2202      	movs	r2, #2
   d9828:	e005      	b.n	d9836 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d982a:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d982c:	814c      	strh	r4, [r1, #10]
   d982e:	718a      	strb	r2, [r1, #6]
   d9830:	810b      	strh	r3, [r1, #8]
                    break;
   d9832:	e005      	b.n	d9840 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d9834:	2204      	movs	r2, #4
   d9836:	810b      	strh	r3, [r1, #8]
   d9838:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d983c:	718a      	strb	r2, [r1, #6]
   d983e:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d9840:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d9844:	6003      	str	r3, [r0, #0]
   d9846:	888b      	ldrh	r3, [r1, #4]
   d9848:	8083      	strh	r3, [r0, #4]
    }
   d984a:	bd10      	pop	{r4, pc}

000d984c <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d984c:	4601      	mov	r1, r0
   d984e:	2200      	movs	r2, #0
   d9850:	208c      	movs	r0, #140	; 0x8c
   d9852:	f7fe ba31 	b.w	d7cb8 <HAL_Core_System_Reset_Ex>

000d9856 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d9856:	2000      	movs	r0, #0
   d9858:	f7ff bff8 	b.w	d984c <_ZN11SystemClass5resetEm>

000d985c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d985c:	b530      	push	{r4, r5, lr}
   d985e:	4604      	mov	r4, r0
   d9860:	b085      	sub	sp, #20
   d9862:	4608      	mov	r0, r1
   d9864:	4611      	mov	r1, r2
   d9866:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9868:	2300      	movs	r3, #0
   d986a:	f7fe fc37 	bl	d80dc <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d986e:	4d0d      	ldr	r5, [pc, #52]	; (d98a4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d9870:	f8ad 000c 	strh.w	r0, [sp, #12]
   d9874:	2300      	movs	r3, #0
   d9876:	a901      	add	r1, sp, #4
   d9878:	9301      	str	r3, [sp, #4]
   d987a:	f8ad 3008 	strh.w	r3, [sp, #8]
   d987e:	f88d 300a 	strb.w	r3, [sp, #10]
   d9882:	4628      	mov	r0, r5
   d9884:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9888:	f8ad 300e 	strh.w	r3, [sp, #14]
   d988c:	f7ff ffa8 	bl	d97e0 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d9890:	a801      	add	r0, sp, #4
   d9892:	f7ff ff9c 	bl	d97ce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d9896:	4620      	mov	r0, r4
   d9898:	4629      	mov	r1, r5
   d989a:	f7ff ffb7 	bl	d980c <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d989e:	4620      	mov	r0, r4
   d98a0:	b005      	add	sp, #20
   d98a2:	bd30      	pop	{r4, r5, pc}
   d98a4:	2003e484 	.word	0x2003e484

000d98a8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d98a8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d98aa:	4c09      	ldr	r4, [pc, #36]	; (d98d0 <_GLOBAL__sub_I_System+0x28>)
   d98ac:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d98ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d98b2:	6020      	str	r0, [r4, #0]
   d98b4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d98b6:	71a0      	strb	r0, [r4, #6]
   d98b8:	8120      	strh	r0, [r4, #8]
   d98ba:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d98bc:	f7fe fbfe 	bl	d80bc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d98c0:	4620      	mov	r0, r4
   d98c2:	4a04      	ldr	r2, [pc, #16]	; (d98d4 <_GLOBAL__sub_I_System+0x2c>)
   d98c4:	4904      	ldr	r1, [pc, #16]	; (d98d8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d98c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d98ca:	f000 bc35 	b.w	da138 <__aeabi_atexit>
   d98ce:	bf00      	nop
   d98d0:	2003e484 	.word	0x2003e484
   d98d4:	2003dea8 	.word	0x2003dea8
   d98d8:	000d41a9 	.word	0x000d41a9

000d98dc <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d98dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d98de:	4b14      	ldr	r3, [pc, #80]	; (d9930 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d98e0:	4f14      	ldr	r7, [pc, #80]	; (d9934 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d98e2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d98e4:	4b14      	ldr	r3, [pc, #80]	; (d9938 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d98e6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d98e8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d98ea:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d98ec:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d98ee:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d98f0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d98f2:	d01b      	beq.n	d992c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d98f4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d98f6:	ad01      	add	r5, sp, #4
   d98f8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d98fc:	f001 fb84 	bl	db008 <localtime>
	calendar_time->tm_year += 1900;
   d9900:	6943      	ldr	r3, [r0, #20]
   d9902:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d9906:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9908:	4604      	mov	r4, r0
   d990a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d990c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d990e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9912:	f8d4 e000 	ldr.w	lr, [r4]
   d9916:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d991a:	ad01      	add	r5, sp, #4
   d991c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d991e:	4c07      	ldr	r4, [pc, #28]	; (d993c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9926:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9928:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d992c:	b00b      	add	sp, #44	; 0x2c
   d992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9930:	2003e4c0 	.word	0x2003e4c0
   d9934:	2003e4bc 	.word	0x2003e4bc
   d9938:	2003e4b8 	.word	0x2003e4b8
   d993c:	2003e490 	.word	0x2003e490

000d9940 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d9940:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9942:	2000      	movs	r0, #0
   d9944:	f7fe fc68 	bl	d8218 <spark_sync_time_pending>
   d9948:	b128      	cbz	r0, d9956 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d994a:	f7fe fc3d 	bl	d81c8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d994e:	f080 0001 	eor.w	r0, r0, #1
   d9952:	b2c0      	uxtb	r0, r0
   d9954:	bd08      	pop	{r3, pc}
   d9956:	2001      	movs	r0, #1
    }
   d9958:	bd08      	pop	{r3, pc}
	...

000d995c <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d995c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d995e:	f7ff ffbd 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9962:	4b02      	ldr	r3, [pc, #8]	; (d996c <_ZN9TimeClass7weekdayEl+0x10>)
   d9964:	6998      	ldr	r0, [r3, #24]
}
   d9966:	3001      	adds	r0, #1
   d9968:	bd08      	pop	{r3, pc}
   d996a:	bf00      	nop
   d996c:	2003e490 	.word	0x2003e490

000d9970 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9970:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9972:	f7ff ffb3 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9976:	4b02      	ldr	r3, [pc, #8]	; (d9980 <_ZN9TimeClass5monthEl+0x10>)
   d9978:	6918      	ldr	r0, [r3, #16]
}
   d997a:	3001      	adds	r0, #1
   d997c:	bd08      	pop	{r3, pc}
   d997e:	bf00      	nop
   d9980:	2003e490 	.word	0x2003e490

000d9984 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d9984:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d9986:	f7fe f9c7 	bl	d7d18 <HAL_RTC_Get_UnixTime>
   d998a:	4b03      	ldr	r3, [pc, #12]	; (d9998 <_ZN9TimeClass5localEv+0x14>)
   d998c:	681b      	ldr	r3, [r3, #0]
   d998e:	4418      	add	r0, r3
   d9990:	4b02      	ldr	r3, [pc, #8]	; (d999c <_ZN9TimeClass5localEv+0x18>)
   d9992:	681b      	ldr	r3, [r3, #0]
}
   d9994:	4418      	add	r0, r3
   d9996:	bd08      	pop	{r3, pc}
   d9998:	2003e4c0 	.word	0x2003e4c0
   d999c:	2003e4b8 	.word	0x2003e4b8

000d99a0 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d99a0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d99a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d99a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d99ac:	d40f      	bmi.n	d99ce <_ZN9TimeClass4zoneEf+0x2e>
   d99ae:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d99b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d99b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d99ba:	dc08      	bgt.n	d99ce <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d99bc:	eddf 7a04 	vldr	s15, [pc, #16]	; d99d0 <_ZN9TimeClass4zoneEf+0x30>
   d99c0:	4b04      	ldr	r3, [pc, #16]	; (d99d4 <_ZN9TimeClass4zoneEf+0x34>)
   d99c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d99c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d99ca:	ed83 0a00 	vstr	s0, [r3]
   d99ce:	4770      	bx	lr
   d99d0:	45610000 	.word	0x45610000
   d99d4:	2003e4c0 	.word	0x2003e4c0

000d99d8 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d99d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d99dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d99e0:	d40f      	bmi.n	d9a02 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d99e2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d99e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d99ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d99ee:	dc08      	bgt.n	d9a02 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d99f0:	eddf 7a04 	vldr	s15, [pc, #16]	; d9a04 <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d99f4:	4b04      	ldr	r3, [pc, #16]	; (d9a08 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d99f6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d99fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d99fe:	ed83 0a00 	vstr	s0, [r3]
   d9a02:	4770      	bx	lr
   d9a04:	45610000 	.word	0x45610000
   d9a08:	2003ddec 	.word	0x2003ddec

000d9a0c <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9a0c:	4b02      	ldr	r3, [pc, #8]	; (d9a18 <_ZN9TimeClass8beginDSTEv+0xc>)
   d9a0e:	681a      	ldr	r2, [r3, #0]
   d9a10:	4b02      	ldr	r3, [pc, #8]	; (d9a1c <_ZN9TimeClass8beginDSTEv+0x10>)
   d9a12:	601a      	str	r2, [r3, #0]
   d9a14:	4770      	bx	lr
   d9a16:	bf00      	nop
   d9a18:	2003ddec 	.word	0x2003ddec
   d9a1c:	2003e4b8 	.word	0x2003e4b8

000d9a20 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9a20:	4b01      	ldr	r3, [pc, #4]	; (d9a28 <_ZN9TimeClass6endDSTEv+0x8>)
   d9a22:	2200      	movs	r2, #0
   d9a24:	601a      	str	r2, [r3, #0]
   d9a26:	4770      	bx	lr
   d9a28:	2003e4b8 	.word	0x2003e4b8

000d9a2c <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9a2c:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d9a2e:	f7fe f97b 	bl	d7d28 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9a32:	2200      	movs	r2, #0
   d9a34:	4611      	mov	r1, r2
   d9a36:	4610      	mov	r0, r2
}
   d9a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9a3c:	f7fe bb76 	b.w	d812c <system_notify_time_changed>

000d9a40 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d9a42:	4b0e      	ldr	r3, [pc, #56]	; (d9a7c <_ZN9TimeClass7timeStrEl+0x3c>)
   d9a44:	681b      	ldr	r3, [r3, #0]
   d9a46:	4419      	add	r1, r3
   d9a48:	4b0d      	ldr	r3, [pc, #52]	; (d9a80 <_ZN9TimeClass7timeStrEl+0x40>)
   d9a4a:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9a4c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d9a4e:	a802      	add	r0, sp, #8
   d9a50:	4419      	add	r1, r3
   d9a52:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d9a56:	f001 fad7 	bl	db008 <localtime>
        char* ascstr = asctime(calendar_time);
   d9a5a:	f001 f9d9 	bl	dae10 <asctime>
   d9a5e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d9a60:	f002 fbb0 	bl	dc1c4 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d9a64:	4428      	add	r0, r5
   d9a66:	2300      	movs	r3, #0
   d9a68:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d9a6c:	4629      	mov	r1, r5
   d9a6e:	4620      	mov	r0, r4
   d9a70:	f7ff fe56 	bl	d9720 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9a74:	4620      	mov	r0, r4
   d9a76:	b003      	add	sp, #12
   d9a78:	bd30      	pop	{r4, r5, pc}
   d9a7a:	bf00      	nop
   d9a7c:	2003e4c0 	.word	0x2003e4c0
   d9a80:	2003e4b8 	.word	0x2003e4b8

000d9a84 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9a88:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9a8a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9a8c:	4607      	mov	r7, r0
   d9a8e:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9a90:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9a92:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9a94:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9a96:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9a98:	f002 fbb1 	bl	dc1fe <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9a9c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9a9e:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9aa0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9aa4:	f002 fb8e 	bl	dc1c4 <strlen>
   d9aa8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9aaa:	b925      	cbnz	r5, d9ab6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d9aac:	4924      	ldr	r1, [pc, #144]	; (d9b40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d9aae:	a803      	add	r0, sp, #12
   d9ab0:	f001 fe50 	bl	db754 <strcpy>
   d9ab4:	e013      	b.n	d9ade <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9ab6:	213c      	movs	r1, #60	; 0x3c
   d9ab8:	fb95 f2f1 	sdiv	r2, r5, r1
   d9abc:	2a00      	cmp	r2, #0
   d9abe:	bfb8      	it	lt
   d9ac0:	4252      	neglt	r2, r2
   d9ac2:	fb92 f3f1 	sdiv	r3, r2, r1
   d9ac6:	fb01 2213 	mls	r2, r1, r3, r2
   d9aca:	9200      	str	r2, [sp, #0]
   d9acc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9ad0:	4a1c      	ldr	r2, [pc, #112]	; (d9b44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d9ad2:	fb95 f3f3 	sdiv	r3, r5, r3
   d9ad6:	2110      	movs	r1, #16
   d9ad8:	a803      	add	r0, sp, #12
   d9ada:	f7fe fc2d 	bl	d8338 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9ade:	4625      	mov	r5, r4
   d9ae0:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9ae2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d9ae6:	45b2      	cmp	sl, r6
   d9ae8:	d91b      	bls.n	d9b22 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9aea:	782b      	ldrb	r3, [r5, #0]
   d9aec:	2b25      	cmp	r3, #37	; 0x25
   d9aee:	d116      	bne.n	d9b1e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d9af0:	786b      	ldrb	r3, [r5, #1]
   d9af2:	2b7a      	cmp	r3, #122	; 0x7a
   d9af4:	d113      	bne.n	d9b1e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d9af6:	a803      	add	r0, sp, #12
   d9af8:	f002 fb64 	bl	dc1c4 <strlen>
   d9afc:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9afe:	4430      	add	r0, r6
   d9b00:	ebc6 020a 	rsb	r2, r6, sl
   d9b04:	1ca9      	adds	r1, r5, #2
   d9b06:	4420      	add	r0, r4
   d9b08:	f001 fb76 	bl	db1f8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9b0c:	4642      	mov	r2, r8
   d9b0e:	a903      	add	r1, sp, #12
   d9b10:	4628      	mov	r0, r5
   d9b12:	f001 fb71 	bl	db1f8 <memcpy>
            len = strlen(format_str);
   d9b16:	4620      	mov	r0, r4
   d9b18:	f002 fb54 	bl	dc1c4 <strlen>
   d9b1c:	4680      	mov	r8, r0
   d9b1e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9b20:	e7de      	b.n	d9ae0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d9b22:	464b      	mov	r3, r9
   d9b24:	4622      	mov	r2, r4
   d9b26:	2132      	movs	r1, #50	; 0x32
   d9b28:	a807      	add	r0, sp, #28
   d9b2a:	f001 fe97 	bl	db85c <strftime>
    return String(buf);
   d9b2e:	a907      	add	r1, sp, #28
   d9b30:	4638      	mov	r0, r7
   d9b32:	f7ff fdf5 	bl	d9720 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d9b36:	4638      	mov	r0, r7
   d9b38:	b024      	add	sp, #144	; 0x90
   d9b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9b3e:	bf00      	nop
   d9b40:	000dde1d 	.word	0x000dde1d
   d9b44:	000dd892 	.word	0x000dd892

000d9b48 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d9b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9b4a:	4605      	mov	r5, r0
   d9b4c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d9b4e:	461c      	mov	r4, r3
   d9b50:	b913      	cbnz	r3, d9b58 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d9b52:	4b12      	ldr	r3, [pc, #72]	; (d9b9c <_ZN9TimeClass6formatElPKc+0x54>)
   d9b54:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d9b56:	b12c      	cbz	r4, d9b64 <_ZN9TimeClass6formatElPKc+0x1c>
   d9b58:	4b11      	ldr	r3, [pc, #68]	; (d9ba0 <_ZN9TimeClass6formatElPKc+0x58>)
   d9b5a:	4620      	mov	r0, r4
   d9b5c:	6819      	ldr	r1, [r3, #0]
   d9b5e:	f001 fdef 	bl	db740 <strcmp>
   d9b62:	b920      	cbnz	r0, d9b6e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d9b64:	9901      	ldr	r1, [sp, #4]
   d9b66:	4628      	mov	r0, r5
   d9b68:	f7ff ff6a 	bl	d9a40 <_ZN9TimeClass7timeStrEl>
   d9b6c:	e013      	b.n	d9b96 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d9b6e:	4f0d      	ldr	r7, [pc, #52]	; (d9ba4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d9b70:	9a01      	ldr	r2, [sp, #4]
   d9b72:	683b      	ldr	r3, [r7, #0]
   d9b74:	4e0c      	ldr	r6, [pc, #48]	; (d9ba8 <_ZN9TimeClass6formatElPKc+0x60>)
   d9b76:	441a      	add	r2, r3
   d9b78:	6833      	ldr	r3, [r6, #0]
   d9b7a:	a802      	add	r0, sp, #8
   d9b7c:	4413      	add	r3, r2
   d9b7e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d9b82:	f001 fa41 	bl	db008 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9b86:	683a      	ldr	r2, [r7, #0]
   d9b88:	6833      	ldr	r3, [r6, #0]
   d9b8a:	4601      	mov	r1, r0
   d9b8c:	4413      	add	r3, r2
   d9b8e:	4628      	mov	r0, r5
   d9b90:	4622      	mov	r2, r4
   d9b92:	f7ff ff77 	bl	d9a84 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d9b96:	4628      	mov	r0, r5
   d9b98:	b003      	add	sp, #12
   d9b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9b9c:	2003e4b4 	.word	0x2003e4b4
   d9ba0:	2003ddf0 	.word	0x2003ddf0
   d9ba4:	2003e4c0 	.word	0x2003e4c0
   d9ba8:	2003e4b8 	.word	0x2003e4b8

000d9bac <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d9bac:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d9bae:	2000      	movs	r0, #0
   d9bb0:	f7fe f8d2 	bl	d7d58 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d9bb4:	4604      	mov	r4, r0
   d9bb6:	b968      	cbnz	r0, d9bd4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9bb8:	f7fe fa78 	bl	d80ac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9bbc:	2801      	cmp	r0, #1
   d9bbe:	d10b      	bne.n	d9bd8 <_ZN9TimeClass7isValidEv+0x2c>
   d9bc0:	4620      	mov	r0, r4
   d9bc2:	f7fe faab 	bl	d811c <system_thread_get_state>
   d9bc6:	b938      	cbnz	r0, d9bd8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d9bc8:	f7ff feba 	bl	d9940 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9bcc:	b930      	cbnz	r0, d9bdc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d9bce:	f7fe fae3 	bl	d8198 <spark_process>
   d9bd2:	e7f9      	b.n	d9bc8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9bd4:	2001      	movs	r0, #1
   d9bd6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9bd8:	2000      	movs	r0, #0
   d9bda:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9bdc:	f7ff feb0 	bl	d9940 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d9be0:	2000      	movs	r0, #0
   d9be2:	f7fe f8b9 	bl	d7d58 <HAL_RTC_Time_Is_Valid>
   d9be6:	3000      	adds	r0, #0
   d9be8:	bf18      	it	ne
   d9bea:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9bec:	bd10      	pop	{r4, pc}

000d9bee <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9bee:	b508      	push	{r3, lr}
    (void)isValid();
   d9bf0:	f7ff ffdc 	bl	d9bac <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9bf8:	f7fe b88e 	b.w	d7d18 <HAL_RTC_Get_UnixTime>

000d9bfc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d9bfc:	b508      	push	{r3, lr}
	return hour(now());
   d9bfe:	f7ff fff6 	bl	d9bee <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c02:	f7ff fe6b 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d9c06:	4b01      	ldr	r3, [pc, #4]	; (d9c0c <_ZN9TimeClass4hourEv+0x10>)
   d9c08:	6898      	ldr	r0, [r3, #8]
   d9c0a:	bd08      	pop	{r3, pc}
   d9c0c:	2003e490 	.word	0x2003e490

000d9c10 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d9c10:	b508      	push	{r3, lr}
	return minute(now());
   d9c12:	f7ff ffec 	bl	d9bee <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c16:	f7ff fe61 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d9c1a:	4b01      	ldr	r3, [pc, #4]	; (d9c20 <_ZN9TimeClass6minuteEv+0x10>)
   d9c1c:	6858      	ldr	r0, [r3, #4]
   d9c1e:	bd08      	pop	{r3, pc}
   d9c20:	2003e490 	.word	0x2003e490

000d9c24 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d9c24:	b508      	push	{r3, lr}
	return day(now());
   d9c26:	f7ff ffe2 	bl	d9bee <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c2a:	f7ff fe57 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d9c2e:	4b01      	ldr	r3, [pc, #4]	; (d9c34 <_ZN9TimeClass3dayEv+0x10>)
   d9c30:	68d8      	ldr	r0, [r3, #12]
   d9c32:	bd08      	pop	{r3, pc}
   d9c34:	2003e490 	.word	0x2003e490

000d9c38 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d9c38:	b508      	push	{r3, lr}
	return weekday(now());
   d9c3a:	f7ff ffd8 	bl	d9bee <_ZN9TimeClass3nowEv>
}
   d9c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d9c42:	f7ff be8b 	b.w	d995c <_ZN9TimeClass7weekdayEl>

000d9c46 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d9c46:	b508      	push	{r3, lr}
	return month(now());
   d9c48:	f7ff ffd1 	bl	d9bee <_ZN9TimeClass3nowEv>
}
   d9c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d9c50:	f7ff be8e 	b.w	d9970 <_ZN9TimeClass5monthEl>

000d9c54 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d9c54:	b508      	push	{r3, lr}
	return year(now());
   d9c56:	f7ff ffca 	bl	d9bee <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d9c5a:	f7ff fe3f 	bl	d98dc <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d9c5e:	4b01      	ldr	r3, [pc, #4]	; (d9c64 <_ZN9TimeClass4yearEv+0x10>)
   d9c60:	6958      	ldr	r0, [r3, #20]
   d9c62:	bd08      	pop	{r3, pc}
   d9c64:	2003e490 	.word	0x2003e490

000d9c68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9c68:	4b02      	ldr	r3, [pc, #8]	; (d9c74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9c6a:	681a      	ldr	r2, [r3, #0]
   d9c6c:	4b02      	ldr	r3, [pc, #8]	; (d9c78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9c6e:	601a      	str	r2, [r3, #0]
   d9c70:	4770      	bx	lr
   d9c72:	bf00      	nop
   d9c74:	2003ddf0 	.word	0x2003ddf0
   d9c78:	2003e4b4 	.word	0x2003e4b4

000d9c7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9c7c:	4770      	bx	lr

000d9c7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9c7e:	7441      	strb	r1, [r0, #17]
   d9c80:	4770      	bx	lr

000d9c82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9c82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9c84:	7c00      	ldrb	r0, [r0, #16]
   d9c86:	f7fe f9b7 	bl	d7ff8 <HAL_USART_Available_Data_For_Write>
}
   d9c8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c8e:	bd08      	pop	{r3, pc}

000d9c90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9c90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9c92:	7c00      	ldrb	r0, [r0, #16]
   d9c94:	f7fe f988 	bl	d7fa8 <HAL_USART_Available_Data>
}
   d9c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c9c:	bd08      	pop	{r3, pc}

000d9c9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9c9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9ca0:	7c00      	ldrb	r0, [r0, #16]
   d9ca2:	f7fe f991 	bl	d7fc8 <HAL_USART_Peek_Data>
}
   d9ca6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9caa:	bf28      	it	cs
   d9cac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9cb0:	bd08      	pop	{r3, pc}

000d9cb2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9cb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9cb4:	7c00      	ldrb	r0, [r0, #16]
   d9cb6:	f7fe f97f 	bl	d7fb8 <HAL_USART_Read_Data>
}
   d9cba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9cbe:	bf28      	it	cs
   d9cc0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9cc4:	bd08      	pop	{r3, pc}

000d9cc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9cc6:	7c00      	ldrb	r0, [r0, #16]
   d9cc8:	f7fe b986 	b.w	d7fd8 <HAL_USART_Flush_Data>

000d9ccc <_ZN11USARTSerialD0Ev>:
   d9ccc:	b510      	push	{r4, lr}
   d9cce:	2114      	movs	r1, #20
   d9cd0:	4604      	mov	r4, r0
   d9cd2:	f000 fa36 	bl	da142 <_ZdlPvj>
   d9cd6:	4620      	mov	r0, r4
   d9cd8:	bd10      	pop	{r4, pc}

000d9cda <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9cda:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9cdc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9cde:	4604      	mov	r4, r0
   d9ce0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9ce2:	b925      	cbnz	r5, d9cee <_ZN11USARTSerial5writeEh+0x14>
   d9ce4:	7c00      	ldrb	r0, [r0, #16]
   d9ce6:	f7fe f987 	bl	d7ff8 <HAL_USART_Available_Data_For_Write>
   d9cea:	2800      	cmp	r0, #0
   d9cec:	dd05      	ble.n	d9cfa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9cee:	4631      	mov	r1, r6
   d9cf0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9cf6:	f7fe b94f 	b.w	d7f98 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9cfa:	4628      	mov	r0, r5
   d9cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9d00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9d00:	b510      	push	{r4, lr}
   d9d02:	4604      	mov	r4, r0
   d9d04:	4608      	mov	r0, r1
   d9d06:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d08:	2200      	movs	r2, #0
   d9d0a:	6062      	str	r2, [r4, #4]
   d9d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9d10:	60a2      	str	r2, [r4, #8]
   d9d12:	4a05      	ldr	r2, [pc, #20]	; (d9d28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9d14:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9d16:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9d18:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9d1a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9d1c:	461a      	mov	r2, r3
   d9d1e:	f7fe f933 	bl	d7f88 <HAL_USART_Init>
}
   d9d22:	4620      	mov	r0, r4
   d9d24:	bd10      	pop	{r4, pc}
   d9d26:	bf00      	nop
   d9d28:	000dd8c4 	.word	0x000dd8c4

000d9d2c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d9d2c:	7c00      	ldrb	r0, [r0, #16]
   d9d2e:	f7fe b95b 	b.w	d7fe8 <HAL_USART_Is_Enabled>
	...

000d9d34 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9d34:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9d36:	4d0c      	ldr	r5, [pc, #48]	; (d9d68 <_Z22__fetch_global_Serial1v+0x34>)
   d9d38:	6829      	ldr	r1, [r5, #0]
   d9d3a:	f011 0401 	ands.w	r4, r1, #1
   d9d3e:	d111      	bne.n	d9d64 <_Z22__fetch_global_Serial1v+0x30>
   d9d40:	4628      	mov	r0, r5
   d9d42:	f7fa f9bb 	bl	d40bc <__cxa_guard_acquire>
   d9d46:	b168      	cbz	r0, d9d64 <_Z22__fetch_global_Serial1v+0x30>
   d9d48:	4a08      	ldr	r2, [pc, #32]	; (d9d6c <_Z22__fetch_global_Serial1v+0x38>)
   d9d4a:	4b09      	ldr	r3, [pc, #36]	; (d9d70 <_Z22__fetch_global_Serial1v+0x3c>)
   d9d4c:	4809      	ldr	r0, [pc, #36]	; (d9d74 <_Z22__fetch_global_Serial1v+0x40>)
   d9d4e:	4621      	mov	r1, r4
   d9d50:	f7ff ffd6 	bl	d9d00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9d54:	4628      	mov	r0, r5
   d9d56:	f7fa f9b6 	bl	d40c6 <__cxa_guard_release>
   d9d5a:	4a07      	ldr	r2, [pc, #28]	; (d9d78 <_Z22__fetch_global_Serial1v+0x44>)
   d9d5c:	4907      	ldr	r1, [pc, #28]	; (d9d7c <_Z22__fetch_global_Serial1v+0x48>)
   d9d5e:	4805      	ldr	r0, [pc, #20]	; (d9d74 <_Z22__fetch_global_Serial1v+0x40>)
   d9d60:	f000 f9ea 	bl	da138 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9d64:	4803      	ldr	r0, [pc, #12]	; (d9d74 <_Z22__fetch_global_Serial1v+0x40>)
   d9d66:	bd38      	pop	{r3, r4, r5, pc}
   d9d68:	2003e560 	.word	0x2003e560
   d9d6c:	2003e564 	.word	0x2003e564
   d9d70:	2003e4dc 	.word	0x2003e4dc
   d9d74:	2003e4c8 	.word	0x2003e4c8
   d9d78:	2003dea8 	.word	0x2003dea8
   d9d7c:	000d9c7d 	.word	0x000d9c7d

000d9d80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9d80:	7441      	strb	r1, [r0, #17]
   d9d82:	4770      	bx	lr

000d9d84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9d84:	4770      	bx	lr

000d9d86 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9d86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9d88:	2100      	movs	r1, #0
   d9d8a:	7c00      	ldrb	r0, [r0, #16]
   d9d8c:	f7fe f95c 	bl	d8048 <HAL_USB_USART_Receive_Data>
}
   d9d90:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d94:	bf28      	it	cs
   d9d96:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9d9a:	bd08      	pop	{r3, pc}

000d9d9c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9d9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d9e:	2101      	movs	r1, #1
   d9da0:	7c00      	ldrb	r0, [r0, #16]
   d9da2:	f7fe f951 	bl	d8048 <HAL_USB_USART_Receive_Data>
}
   d9da6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9daa:	bf28      	it	cs
   d9dac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9db0:	bd08      	pop	{r3, pc}

000d9db2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9db2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9db4:	7c00      	ldrb	r0, [r0, #16]
   d9db6:	f7fe f93f 	bl	d8038 <HAL_USB_USART_Available_Data_For_Write>
}
   d9dba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9dbe:	bd08      	pop	{r3, pc}

000d9dc0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9dc0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9dc2:	7c00      	ldrb	r0, [r0, #16]
   d9dc4:	f7fe f930 	bl	d8028 <HAL_USB_USART_Available_Data>
}
   d9dc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9dcc:	bd08      	pop	{r3, pc}

000d9dce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9dce:	7c00      	ldrb	r0, [r0, #16]
   d9dd0:	f7fe b94a 	b.w	d8068 <HAL_USB_USART_Flush_Data>

000d9dd4 <_ZN9USBSerialD0Ev>:
   d9dd4:	b510      	push	{r4, lr}
   d9dd6:	2114      	movs	r1, #20
   d9dd8:	4604      	mov	r4, r0
   d9dda:	f000 f9b2 	bl	da142 <_ZdlPvj>
   d9dde:	4620      	mov	r0, r4
   d9de0:	bd10      	pop	{r4, pc}

000d9de2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9de2:	b538      	push	{r3, r4, r5, lr}
   d9de4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9de6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9de8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9dea:	f7fe f925 	bl	d8038 <HAL_USB_USART_Available_Data_For_Write>
   d9dee:	2800      	cmp	r0, #0
   d9df0:	dc01      	bgt.n	d9df6 <_ZN9USBSerial5writeEh+0x14>
   d9df2:	7c60      	ldrb	r0, [r4, #17]
   d9df4:	b128      	cbz	r0, d9e02 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9df6:	4629      	mov	r1, r5
   d9df8:	7c20      	ldrb	r0, [r4, #16]
   d9dfa:	f7fe f92d 	bl	d8058 <HAL_USB_USART_Send_Data>
   d9dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9e02:	bd38      	pop	{r3, r4, r5, pc}

000d9e04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e04:	b510      	push	{r4, lr}
   d9e06:	4604      	mov	r4, r0
   d9e08:	2300      	movs	r3, #0
   d9e0a:	6063      	str	r3, [r4, #4]
   d9e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9e10:	60a3      	str	r3, [r4, #8]
   d9e12:	4b05      	ldr	r3, [pc, #20]	; (d9e28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9e14:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9e16:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e18:	4608      	mov	r0, r1
{
  _serial = serial;
   d9e1a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9e1c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9e1e:	4611      	mov	r1, r2
   d9e20:	f7fe f8f2 	bl	d8008 <HAL_USB_USART_Init>
}
   d9e24:	4620      	mov	r0, r4
   d9e26:	bd10      	pop	{r4, pc}
   d9e28:	000dd8f4 	.word	0x000dd8f4

000d9e2c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9e2c:	2200      	movs	r2, #0
   d9e2e:	7c00      	ldrb	r0, [r0, #16]
   d9e30:	f7fe b8f2 	b.w	d8018 <HAL_USB_USART_Begin>

000d9e34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9e36:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e38:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9e3a:	2100      	movs	r1, #0
   d9e3c:	f001 fa02 	bl	db244 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9e40:	4620      	mov	r0, r4
   d9e42:	bd10      	pop	{r4, pc}

000d9e44 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9e44:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e46:	4d0e      	ldr	r5, [pc, #56]	; (d9e80 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9e48:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9e4a:	a801      	add	r0, sp, #4
   d9e4c:	f7ff fff2 	bl	d9e34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e50:	6829      	ldr	r1, [r5, #0]
   d9e52:	f011 0401 	ands.w	r4, r1, #1
   d9e56:	d110      	bne.n	d9e7a <_Z16_fetch_usbserialv+0x36>
   d9e58:	4628      	mov	r0, r5
   d9e5a:	f7fa f92f 	bl	d40bc <__cxa_guard_acquire>
   d9e5e:	b160      	cbz	r0, d9e7a <_Z16_fetch_usbserialv+0x36>
   d9e60:	aa01      	add	r2, sp, #4
   d9e62:	4621      	mov	r1, r4
   d9e64:	4807      	ldr	r0, [pc, #28]	; (d9e84 <_Z16_fetch_usbserialv+0x40>)
   d9e66:	f7ff ffcd 	bl	d9e04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9e6a:	4628      	mov	r0, r5
   d9e6c:	f7fa f92b 	bl	d40c6 <__cxa_guard_release>
   d9e70:	4a05      	ldr	r2, [pc, #20]	; (d9e88 <_Z16_fetch_usbserialv+0x44>)
   d9e72:	4906      	ldr	r1, [pc, #24]	; (d9e8c <_Z16_fetch_usbserialv+0x48>)
   d9e74:	4803      	ldr	r0, [pc, #12]	; (d9e84 <_Z16_fetch_usbserialv+0x40>)
   d9e76:	f000 f95f 	bl	da138 <__aeabi_atexit>
	return _usbserial;
}
   d9e7a:	4802      	ldr	r0, [pc, #8]	; (d9e84 <_Z16_fetch_usbserialv+0x40>)
   d9e7c:	b007      	add	sp, #28
   d9e7e:	bd30      	pop	{r4, r5, pc}
   d9e80:	2003e5e8 	.word	0x2003e5e8
   d9e84:	2003e5ec 	.word	0x2003e5ec
   d9e88:	2003dea8 	.word	0x2003dea8
   d9e8c:	000d9d85 	.word	0x000d9d85

000d9e90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9e90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9e92:	4b0c      	ldr	r3, [pc, #48]	; (d9ec4 <serialEventRun+0x34>)
   d9e94:	b133      	cbz	r3, d9ea4 <serialEventRun+0x14>
   d9e96:	f7ff ffd5 	bl	d9e44 <_Z16_fetch_usbserialv>
   d9e9a:	6803      	ldr	r3, [r0, #0]
   d9e9c:	691b      	ldr	r3, [r3, #16]
   d9e9e:	4798      	blx	r3
   d9ea0:	2800      	cmp	r0, #0
   d9ea2:	dc09      	bgt.n	d9eb8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9ea4:	4b08      	ldr	r3, [pc, #32]	; (d9ec8 <serialEventRun+0x38>)
   d9ea6:	b163      	cbz	r3, d9ec2 <serialEventRun+0x32>
   d9ea8:	f7ff ff44 	bl	d9d34 <_Z22__fetch_global_Serial1v>
   d9eac:	6803      	ldr	r3, [r0, #0]
   d9eae:	691b      	ldr	r3, [r3, #16]
   d9eb0:	4798      	blx	r3
   d9eb2:	2800      	cmp	r0, #0
   d9eb4:	dc03      	bgt.n	d9ebe <serialEventRun+0x2e>
   d9eb6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9eb8:	f3af 8000 	nop.w
   d9ebc:	e7f2      	b.n	d9ea4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d9ebe:	f3af 8000 	nop.w
   d9ec2:	bd08      	pop	{r3, pc}
	...

000d9ecc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9ecc:	b508      	push	{r3, lr}
	serialEventRun();
   d9ece:	f7ff ffdf 	bl	d9e90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9ed2:	f7fd ff19 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9ed6:	4b01      	ldr	r3, [pc, #4]	; (d9edc <_post_loop+0x10>)
   d9ed8:	6018      	str	r0, [r3, #0]
   d9eda:	bd08      	pop	{r3, pc}
   d9edc:	2003e608 	.word	0x2003e608

000d9ee0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9ee0:	4802      	ldr	r0, [pc, #8]	; (d9eec <_Z33system_initialize_user_backup_ramv+0xc>)
   d9ee2:	4a03      	ldr	r2, [pc, #12]	; (d9ef0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9ee4:	4903      	ldr	r1, [pc, #12]	; (d9ef4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9ee6:	1a12      	subs	r2, r2, r0
   d9ee8:	f001 b986 	b.w	db1f8 <memcpy>
   d9eec:	2003f400 	.word	0x2003f400
   d9ef0:	2003fc1c 	.word	0x2003fc1c
   d9ef4:	000dded0 	.word	0x000dded0

000d9ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9ef8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9efa:	2300      	movs	r3, #0
   d9efc:	9300      	str	r3, [sp, #0]
   d9efe:	461a      	mov	r2, r3
   d9f00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f04:	f7fe f924 	bl	d8150 <system_ctrl_set_result>
}
   d9f08:	b003      	add	sp, #12
   d9f0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f10 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9f10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9f12:	8843      	ldrh	r3, [r0, #2]
   d9f14:	2b0a      	cmp	r3, #10
   d9f16:	d008      	beq.n	d9f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9f18:	2b50      	cmp	r3, #80	; 0x50
   d9f1a:	d109      	bne.n	d9f30 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9f1c:	4b09      	ldr	r3, [pc, #36]	; (d9f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9f1e:	681b      	ldr	r3, [r3, #0]
   d9f20:	b13b      	cbz	r3, d9f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9f22:	b003      	add	sp, #12
   d9f24:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9f28:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9f2a:	f7ff ffe5 	bl	d9ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9f2e:	e006      	b.n	d9f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f30:	2300      	movs	r3, #0
   d9f32:	9300      	str	r3, [sp, #0]
   d9f34:	461a      	mov	r2, r3
   d9f36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f3a:	f7fe f909 	bl	d8150 <system_ctrl_set_result>
        break;
    }
}
   d9f3e:	b003      	add	sp, #12
   d9f40:	f85d fb04 	ldr.w	pc, [sp], #4
   d9f44:	2003e600 	.word	0x2003e600

000d9f48 <module_user_init_hook>:

void module_user_init_hook()
{
   d9f48:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9f4a:	4c10      	ldr	r4, [pc, #64]	; (d9f8c <module_user_init_hook+0x44>)
   d9f4c:	4d10      	ldr	r5, [pc, #64]	; (d9f90 <module_user_init_hook+0x48>)
   d9f4e:	6823      	ldr	r3, [r4, #0]
   d9f50:	42ab      	cmp	r3, r5
   d9f52:	4b10      	ldr	r3, [pc, #64]	; (d9f94 <module_user_init_hook+0x4c>)
   d9f54:	bf0c      	ite	eq
   d9f56:	2201      	moveq	r2, #1
   d9f58:	2200      	movne	r2, #0
   d9f5a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9f5c:	d002      	beq.n	d9f64 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9f5e:	f7ff ffbf 	bl	d9ee0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9f62:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9f64:	f7fd feb8 	bl	d7cd8 <HAL_RNG_GetRandomNumber>
   d9f68:	4604      	mov	r4, r0
    srand(seed);
   d9f6a:	f001 fbc1 	bl	db6f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9f6e:	4b0a      	ldr	r3, [pc, #40]	; (d9f98 <module_user_init_hook+0x50>)
   d9f70:	b113      	cbz	r3, d9f78 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9f72:	4620      	mov	r0, r4
   d9f74:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9f78:	2100      	movs	r1, #0
   d9f7a:	4807      	ldr	r0, [pc, #28]	; (d9f98 <module_user_init_hook+0x50>)
   d9f7c:	f7fe f95c 	bl	d8238 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9f80:	2100      	movs	r1, #0
   d9f82:	4806      	ldr	r0, [pc, #24]	; (d9f9c <module_user_init_hook+0x54>)
}
   d9f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9f88:	f7fe b8d8 	b.w	d813c <system_ctrl_set_app_request_handler>
   d9f8c:	2003fc18 	.word	0x2003fc18
   d9f90:	9a271c1e 	.word	0x9a271c1e
   d9f94:	2003e604 	.word	0x2003e604
   d9f98:	00000000 	.word	0x00000000
   d9f9c:	000d9f11 	.word	0x000d9f11

000d9fa0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9fa0:	b508      	push	{r3, lr}
   d9fa2:	4b02      	ldr	r3, [pc, #8]	; (d9fac <spark_protocol_instance+0xc>)
   d9fa4:	681b      	ldr	r3, [r3, #0]
   d9fa6:	681b      	ldr	r3, [r3, #0]
   d9fa8:	9301      	str	r3, [sp, #4]
   d9faa:	bd08      	pop	{r3, pc}
   d9fac:	0003025c 	.word	0x0003025c

000d9fb0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9fb0:	b508      	push	{r3, lr}
   d9fb2:	4b02      	ldr	r3, [pc, #8]	; (d9fbc <spark_protocol_set_product_id+0xc>)
   d9fb4:	681b      	ldr	r3, [r3, #0]
   d9fb6:	685b      	ldr	r3, [r3, #4]
   d9fb8:	9301      	str	r3, [sp, #4]
   d9fba:	bd08      	pop	{r3, pc}
   d9fbc:	0003025c 	.word	0x0003025c

000d9fc0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9fc0:	b508      	push	{r3, lr}
   d9fc2:	4b02      	ldr	r3, [pc, #8]	; (d9fcc <spark_protocol_set_product_firmware_version+0xc>)
   d9fc4:	681b      	ldr	r3, [r3, #0]
   d9fc6:	689b      	ldr	r3, [r3, #8]
   d9fc8:	9301      	str	r3, [sp, #4]
   d9fca:	bd08      	pop	{r3, pc}
   d9fcc:	0003025c 	.word	0x0003025c

000d9fd0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9fd0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9fd2:	4e18      	ldr	r6, [pc, #96]	; (da034 <pinAvailable+0x64>)
   d9fd4:	6831      	ldr	r1, [r6, #0]
   d9fd6:	f011 0501 	ands.w	r5, r1, #1
   d9fda:	4604      	mov	r4, r0
   d9fdc:	d10a      	bne.n	d9ff4 <pinAvailable+0x24>
   d9fde:	4630      	mov	r0, r6
   d9fe0:	f7fa f86c 	bl	d40bc <__cxa_guard_acquire>
   d9fe4:	b130      	cbz	r0, d9ff4 <pinAvailable+0x24>
   d9fe6:	4629      	mov	r1, r5
   d9fe8:	4813      	ldr	r0, [pc, #76]	; (da038 <pinAvailable+0x68>)
   d9fea:	f7ff faa5 	bl	d9538 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9fee:	4630      	mov	r0, r6
   d9ff0:	f7fa f869 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9ff4:	4810      	ldr	r0, [pc, #64]	; (da038 <pinAvailable+0x68>)
   d9ff6:	f7ff fb49 	bl	d968c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9ffa:	b128      	cbz	r0, da008 <pinAvailable+0x38>
   d9ffc:	f1a4 030b 	sub.w	r3, r4, #11
   da000:	2b02      	cmp	r3, #2
   da002:	d801      	bhi.n	da008 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   da004:	2000      	movs	r0, #0
   da006:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   da008:	f000 f870 	bl	da0ec <_Z19__fetch_global_Wirev>
   da00c:	f7fe fef3 	bl	d8df6 <_ZN7TwoWire9isEnabledEv>
   da010:	b108      	cbz	r0, da016 <pinAvailable+0x46>
   da012:	2c01      	cmp	r4, #1
   da014:	d9f6      	bls.n	da004 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   da016:	f7ff fe8d 	bl	d9d34 <_Z22__fetch_global_Serial1v>
   da01a:	f7ff fe87 	bl	d9d2c <_ZN11USARTSerial9isEnabledEv>
   da01e:	b118      	cbz	r0, da028 <pinAvailable+0x58>
   da020:	f1a4 0309 	sub.w	r3, r4, #9
   da024:	2b01      	cmp	r3, #1
   da026:	d9ed      	bls.n	da004 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   da028:	2c23      	cmp	r4, #35	; 0x23
   da02a:	bf8c      	ite	hi
   da02c:	2000      	movhi	r0, #0
   da02e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   da030:	bd70      	pop	{r4, r5, r6, pc}
   da032:	bf00      	nop
   da034:	2003e078 	.word	0x2003e078
   da038:	2003e07c 	.word	0x2003e07c

000da03c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da03c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   da03e:	b538      	push	{r3, r4, r5, lr}
   da040:	4604      	mov	r4, r0
   da042:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da044:	d80a      	bhi.n	da05c <pinMode+0x20>
   da046:	29ff      	cmp	r1, #255	; 0xff
   da048:	d008      	beq.n	da05c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da04a:	f7ff ffc1 	bl	d9fd0 <pinAvailable>
   da04e:	b128      	cbz	r0, da05c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da050:	4629      	mov	r1, r5
   da052:	4620      	mov	r0, r4
}
   da054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   da058:	f7fd be96 	b.w	d7d88 <HAL_Pin_Mode>
   da05c:	bd38      	pop	{r3, r4, r5, pc}

000da05e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da05e:	b538      	push	{r3, r4, r5, lr}
   da060:	4604      	mov	r4, r0
   da062:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da064:	f7fd fe98 	bl	d7d98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da068:	28ff      	cmp	r0, #255	; 0xff
   da06a:	d010      	beq.n	da08e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   da06c:	2806      	cmp	r0, #6
   da06e:	d804      	bhi.n	da07a <digitalWrite+0x1c>
   da070:	234d      	movs	r3, #77	; 0x4d
   da072:	fa23 f000 	lsr.w	r0, r3, r0
   da076:	07c3      	lsls	r3, r0, #31
   da078:	d409      	bmi.n	da08e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da07a:	4620      	mov	r0, r4
   da07c:	f7ff ffa8 	bl	d9fd0 <pinAvailable>
   da080:	b128      	cbz	r0, da08e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da082:	4629      	mov	r1, r5
   da084:	4620      	mov	r0, r4
}
   da086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   da08a:	f7fd be8d 	b.w	d7da8 <HAL_GPIO_Write>
   da08e:	bd38      	pop	{r3, r4, r5, pc}

000da090 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da090:	b510      	push	{r4, lr}
   da092:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da094:	f7fd fe80 	bl	d7d98 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   da098:	3804      	subs	r0, #4
   da09a:	b2c0      	uxtb	r0, r0
   da09c:	2801      	cmp	r0, #1
   da09e:	d908      	bls.n	da0b2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da0a0:	4620      	mov	r0, r4
   da0a2:	f7ff ff95 	bl	d9fd0 <pinAvailable>
   da0a6:	b120      	cbz	r0, da0b2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da0a8:	4620      	mov	r0, r4
}
   da0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da0ae:	f7fd be83 	b.w	d7db8 <HAL_GPIO_Read>
}
   da0b2:	2000      	movs	r0, #0
   da0b4:	bd10      	pop	{r4, pc}
	...

000da0b8 <_Z17acquireWireBufferv>:
   da0b8:	b570      	push	{r4, r5, r6, lr}
   da0ba:	4604      	mov	r4, r0
   da0bc:	2514      	movs	r5, #20
   da0be:	462a      	mov	r2, r5
   da0c0:	4e09      	ldr	r6, [pc, #36]	; (da0e8 <_Z17acquireWireBufferv+0x30>)
   da0c2:	2100      	movs	r1, #0
   da0c4:	f001 f8be 	bl	db244 <memset>
   da0c8:	8025      	strh	r5, [r4, #0]
   da0ca:	2520      	movs	r5, #32
   da0cc:	4631      	mov	r1, r6
   da0ce:	60a5      	str	r5, [r4, #8]
   da0d0:	6125      	str	r5, [r4, #16]
   da0d2:	4628      	mov	r0, r5
   da0d4:	f000 f84f 	bl	da176 <_ZnajRKSt9nothrow_t>
   da0d8:	4631      	mov	r1, r6
   da0da:	6060      	str	r0, [r4, #4]
   da0dc:	4628      	mov	r0, r5
   da0de:	f000 f84a 	bl	da176 <_ZnajRKSt9nothrow_t>
   da0e2:	60e0      	str	r0, [r4, #12]
   da0e4:	4620      	mov	r0, r4
   da0e6:	bd70      	pop	{r4, r5, r6, pc}
   da0e8:	000dd91c 	.word	0x000dd91c

000da0ec <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da0ec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0ee:	4d0e      	ldr	r5, [pc, #56]	; (da128 <_Z19__fetch_global_Wirev+0x3c>)
   da0f0:	6829      	ldr	r1, [r5, #0]
   da0f2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da0f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0f8:	d113      	bne.n	da122 <_Z19__fetch_global_Wirev+0x36>
   da0fa:	4628      	mov	r0, r5
   da0fc:	f7f9 ffde 	bl	d40bc <__cxa_guard_acquire>
   da100:	b178      	cbz	r0, da122 <_Z19__fetch_global_Wirev+0x36>
   da102:	a801      	add	r0, sp, #4
   da104:	f7ff ffd8 	bl	da0b8 <_Z17acquireWireBufferv>
   da108:	aa01      	add	r2, sp, #4
   da10a:	4621      	mov	r1, r4
   da10c:	4807      	ldr	r0, [pc, #28]	; (da12c <_Z19__fetch_global_Wirev+0x40>)
   da10e:	f7fe fe21 	bl	d8d54 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   da112:	4628      	mov	r0, r5
   da114:	f7f9 ffd7 	bl	d40c6 <__cxa_guard_release>
   da118:	4a05      	ldr	r2, [pc, #20]	; (da130 <_Z19__fetch_global_Wirev+0x44>)
   da11a:	4906      	ldr	r1, [pc, #24]	; (da134 <_Z19__fetch_global_Wirev+0x48>)
   da11c:	4803      	ldr	r0, [pc, #12]	; (da12c <_Z19__fetch_global_Wirev+0x40>)
   da11e:	f000 f80b 	bl	da138 <__aeabi_atexit>
	return wire;
}
   da122:	4802      	ldr	r0, [pc, #8]	; (da12c <_Z19__fetch_global_Wirev+0x40>)
   da124:	b007      	add	sp, #28
   da126:	bd30      	pop	{r4, r5, pc}
   da128:	2003e60c 	.word	0x2003e60c
   da12c:	2003e610 	.word	0x2003e610
   da130:	2003dea8 	.word	0x2003dea8
   da134:	000d8cfd 	.word	0x000d8cfd

000da138 <__aeabi_atexit>:
   da138:	460b      	mov	r3, r1
   da13a:	4601      	mov	r1, r0
   da13c:	4618      	mov	r0, r3
   da13e:	f000 beab 	b.w	dae98 <__cxa_atexit>

000da142 <_ZdlPvj>:
   da142:	f7f9 bfac 	b.w	d409e <_ZdlPv>
	...

000da148 <_ZSt15get_new_handlerv>:
   da148:	4b02      	ldr	r3, [pc, #8]	; (da154 <_ZSt15get_new_handlerv+0xc>)
   da14a:	6818      	ldr	r0, [r3, #0]
   da14c:	f3bf 8f5f 	dmb	sy
   da150:	4770      	bx	lr
   da152:	bf00      	nop
   da154:	2003e624 	.word	0x2003e624

000da158 <_ZnwjRKSt9nothrow_t>:
   da158:	b510      	push	{r4, lr}
   da15a:	2800      	cmp	r0, #0
   da15c:	bf14      	ite	ne
   da15e:	4604      	movne	r4, r0
   da160:	2401      	moveq	r4, #1
   da162:	4620      	mov	r0, r4
   da164:	f7fe f8c0 	bl	d82e8 <malloc>
   da168:	b920      	cbnz	r0, da174 <_ZnwjRKSt9nothrow_t+0x1c>
   da16a:	f7ff ffed 	bl	da148 <_ZSt15get_new_handlerv>
   da16e:	b108      	cbz	r0, da174 <_ZnwjRKSt9nothrow_t+0x1c>
   da170:	4780      	blx	r0
   da172:	e7f6      	b.n	da162 <_ZnwjRKSt9nothrow_t+0xa>
   da174:	bd10      	pop	{r4, pc}

000da176 <_ZnajRKSt9nothrow_t>:
   da176:	f7ff bfef 	b.w	da158 <_ZnwjRKSt9nothrow_t>

000da17a <_ZSt25__throw_bad_function_callv>:
   da17a:	b508      	push	{r3, lr}
   da17c:	f7fe f8f4 	bl	d8368 <abort>

000da180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   da180:	4b24      	ldr	r3, [pc, #144]	; (da214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   da182:	681a      	ldr	r2, [r3, #0]
   da184:	07d0      	lsls	r0, r2, #31
   da186:	bf5c      	itt	pl
   da188:	2201      	movpl	r2, #1
   da18a:	601a      	strpl	r2, [r3, #0]
   da18c:	4b22      	ldr	r3, [pc, #136]	; (da218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   da18e:	681a      	ldr	r2, [r3, #0]
   da190:	07d1      	lsls	r1, r2, #31
   da192:	bf5c      	itt	pl
   da194:	2201      	movpl	r2, #1
   da196:	601a      	strpl	r2, [r3, #0]
   da198:	4b20      	ldr	r3, [pc, #128]	; (da21c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   da19a:	681a      	ldr	r2, [r3, #0]
   da19c:	07d2      	lsls	r2, r2, #31
   da19e:	bf5c      	itt	pl
   da1a0:	2201      	movpl	r2, #1
   da1a2:	601a      	strpl	r2, [r3, #0]
   da1a4:	4b1e      	ldr	r3, [pc, #120]	; (da220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   da1a6:	681a      	ldr	r2, [r3, #0]
   da1a8:	07d0      	lsls	r0, r2, #31
   da1aa:	bf5c      	itt	pl
   da1ac:	2201      	movpl	r2, #1
   da1ae:	601a      	strpl	r2, [r3, #0]
   da1b0:	4b1c      	ldr	r3, [pc, #112]	; (da224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   da1b2:	681a      	ldr	r2, [r3, #0]
   da1b4:	07d1      	lsls	r1, r2, #31
   da1b6:	bf5c      	itt	pl
   da1b8:	2201      	movpl	r2, #1
   da1ba:	601a      	strpl	r2, [r3, #0]
   da1bc:	4b1a      	ldr	r3, [pc, #104]	; (da228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   da1be:	681a      	ldr	r2, [r3, #0]
   da1c0:	07d2      	lsls	r2, r2, #31
   da1c2:	bf5c      	itt	pl
   da1c4:	2201      	movpl	r2, #1
   da1c6:	601a      	strpl	r2, [r3, #0]
   da1c8:	4b18      	ldr	r3, [pc, #96]	; (da22c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   da1ca:	681a      	ldr	r2, [r3, #0]
   da1cc:	07d0      	lsls	r0, r2, #31
   da1ce:	bf5c      	itt	pl
   da1d0:	2201      	movpl	r2, #1
   da1d2:	601a      	strpl	r2, [r3, #0]
   da1d4:	4b16      	ldr	r3, [pc, #88]	; (da230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   da1d6:	681a      	ldr	r2, [r3, #0]
   da1d8:	07d1      	lsls	r1, r2, #31
   da1da:	bf5c      	itt	pl
   da1dc:	2201      	movpl	r2, #1
   da1de:	601a      	strpl	r2, [r3, #0]
   da1e0:	4b14      	ldr	r3, [pc, #80]	; (da234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   da1e2:	681a      	ldr	r2, [r3, #0]
   da1e4:	07d2      	lsls	r2, r2, #31
   da1e6:	bf5c      	itt	pl
   da1e8:	2201      	movpl	r2, #1
   da1ea:	601a      	strpl	r2, [r3, #0]
   da1ec:	4b12      	ldr	r3, [pc, #72]	; (da238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   da1ee:	681a      	ldr	r2, [r3, #0]
   da1f0:	07d0      	lsls	r0, r2, #31
   da1f2:	bf5c      	itt	pl
   da1f4:	2201      	movpl	r2, #1
   da1f6:	601a      	strpl	r2, [r3, #0]
   da1f8:	4b10      	ldr	r3, [pc, #64]	; (da23c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   da1fa:	681a      	ldr	r2, [r3, #0]
   da1fc:	07d1      	lsls	r1, r2, #31
   da1fe:	bf5c      	itt	pl
   da200:	2201      	movpl	r2, #1
   da202:	601a      	strpl	r2, [r3, #0]
   da204:	4b0e      	ldr	r3, [pc, #56]	; (da240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   da206:	681a      	ldr	r2, [r3, #0]
   da208:	07d2      	lsls	r2, r2, #31
   da20a:	bf5c      	itt	pl
   da20c:	2201      	movpl	r2, #1
   da20e:	601a      	strpl	r2, [r3, #0]
   da210:	4770      	bx	lr
   da212:	bf00      	nop
   da214:	2003e654 	.word	0x2003e654
   da218:	2003e650 	.word	0x2003e650
   da21c:	2003e64c 	.word	0x2003e64c
   da220:	2003e648 	.word	0x2003e648
   da224:	2003e644 	.word	0x2003e644
   da228:	2003e640 	.word	0x2003e640
   da22c:	2003e63c 	.word	0x2003e63c
   da230:	2003e638 	.word	0x2003e638
   da234:	2003e634 	.word	0x2003e634
   da238:	2003e630 	.word	0x2003e630
   da23c:	2003e62c 	.word	0x2003e62c
   da240:	2003e628 	.word	0x2003e628

000da244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da244:	4b18      	ldr	r3, [pc, #96]	; (da2a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da246:	681a      	ldr	r2, [r3, #0]
   da248:	07d1      	lsls	r1, r2, #31
   da24a:	bf5c      	itt	pl
   da24c:	2201      	movpl	r2, #1
   da24e:	601a      	strpl	r2, [r3, #0]
   da250:	4b16      	ldr	r3, [pc, #88]	; (da2ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da252:	681a      	ldr	r2, [r3, #0]
   da254:	07d2      	lsls	r2, r2, #31
   da256:	bf5c      	itt	pl
   da258:	2201      	movpl	r2, #1
   da25a:	601a      	strpl	r2, [r3, #0]
   da25c:	4b14      	ldr	r3, [pc, #80]	; (da2b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da25e:	681a      	ldr	r2, [r3, #0]
   da260:	07d0      	lsls	r0, r2, #31
   da262:	bf5c      	itt	pl
   da264:	2201      	movpl	r2, #1
   da266:	601a      	strpl	r2, [r3, #0]
   da268:	4b12      	ldr	r3, [pc, #72]	; (da2b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da26a:	681a      	ldr	r2, [r3, #0]
   da26c:	07d1      	lsls	r1, r2, #31
   da26e:	bf5c      	itt	pl
   da270:	2201      	movpl	r2, #1
   da272:	601a      	strpl	r2, [r3, #0]
   da274:	4b10      	ldr	r3, [pc, #64]	; (da2b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da276:	681a      	ldr	r2, [r3, #0]
   da278:	07d2      	lsls	r2, r2, #31
   da27a:	bf5c      	itt	pl
   da27c:	2201      	movpl	r2, #1
   da27e:	601a      	strpl	r2, [r3, #0]
   da280:	4b0e      	ldr	r3, [pc, #56]	; (da2bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da282:	681a      	ldr	r2, [r3, #0]
   da284:	07d0      	lsls	r0, r2, #31
   da286:	bf5c      	itt	pl
   da288:	2201      	movpl	r2, #1
   da28a:	601a      	strpl	r2, [r3, #0]
   da28c:	4b0c      	ldr	r3, [pc, #48]	; (da2c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da28e:	681a      	ldr	r2, [r3, #0]
   da290:	07d1      	lsls	r1, r2, #31
   da292:	bf5c      	itt	pl
   da294:	2201      	movpl	r2, #1
   da296:	601a      	strpl	r2, [r3, #0]
   da298:	4b0a      	ldr	r3, [pc, #40]	; (da2c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da29a:	681a      	ldr	r2, [r3, #0]
   da29c:	07d2      	lsls	r2, r2, #31
   da29e:	bf5c      	itt	pl
   da2a0:	2201      	movpl	r2, #1
   da2a2:	601a      	strpl	r2, [r3, #0]
   da2a4:	4770      	bx	lr
   da2a6:	bf00      	nop
   da2a8:	2003e674 	.word	0x2003e674
   da2ac:	2003e670 	.word	0x2003e670
   da2b0:	2003e66c 	.word	0x2003e66c
   da2b4:	2003e668 	.word	0x2003e668
   da2b8:	2003e664 	.word	0x2003e664
   da2bc:	2003e660 	.word	0x2003e660
   da2c0:	2003e65c 	.word	0x2003e65c
   da2c4:	2003e658 	.word	0x2003e658

000da2c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   da2c8:	4b18      	ldr	r3, [pc, #96]	; (da32c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   da2ca:	681a      	ldr	r2, [r3, #0]
   da2cc:	07d1      	lsls	r1, r2, #31
   da2ce:	bf5c      	itt	pl
   da2d0:	2201      	movpl	r2, #1
   da2d2:	601a      	strpl	r2, [r3, #0]
   da2d4:	4b16      	ldr	r3, [pc, #88]	; (da330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   da2d6:	681a      	ldr	r2, [r3, #0]
   da2d8:	07d2      	lsls	r2, r2, #31
   da2da:	bf5c      	itt	pl
   da2dc:	2201      	movpl	r2, #1
   da2de:	601a      	strpl	r2, [r3, #0]
   da2e0:	4b14      	ldr	r3, [pc, #80]	; (da334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   da2e2:	681a      	ldr	r2, [r3, #0]
   da2e4:	07d0      	lsls	r0, r2, #31
   da2e6:	bf5c      	itt	pl
   da2e8:	2201      	movpl	r2, #1
   da2ea:	601a      	strpl	r2, [r3, #0]
   da2ec:	4b12      	ldr	r3, [pc, #72]	; (da338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   da2ee:	681a      	ldr	r2, [r3, #0]
   da2f0:	07d1      	lsls	r1, r2, #31
   da2f2:	bf5c      	itt	pl
   da2f4:	2201      	movpl	r2, #1
   da2f6:	601a      	strpl	r2, [r3, #0]
   da2f8:	4b10      	ldr	r3, [pc, #64]	; (da33c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   da2fa:	681a      	ldr	r2, [r3, #0]
   da2fc:	07d2      	lsls	r2, r2, #31
   da2fe:	bf5c      	itt	pl
   da300:	2201      	movpl	r2, #1
   da302:	601a      	strpl	r2, [r3, #0]
   da304:	4b0e      	ldr	r3, [pc, #56]	; (da340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   da306:	681a      	ldr	r2, [r3, #0]
   da308:	07d0      	lsls	r0, r2, #31
   da30a:	bf5c      	itt	pl
   da30c:	2201      	movpl	r2, #1
   da30e:	601a      	strpl	r2, [r3, #0]
   da310:	4b0c      	ldr	r3, [pc, #48]	; (da344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   da312:	681a      	ldr	r2, [r3, #0]
   da314:	07d1      	lsls	r1, r2, #31
   da316:	bf5c      	itt	pl
   da318:	2201      	movpl	r2, #1
   da31a:	601a      	strpl	r2, [r3, #0]
   da31c:	4b0a      	ldr	r3, [pc, #40]	; (da348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   da31e:	681a      	ldr	r2, [r3, #0]
   da320:	07d2      	lsls	r2, r2, #31
   da322:	bf5c      	itt	pl
   da324:	2201      	movpl	r2, #1
   da326:	601a      	strpl	r2, [r3, #0]
   da328:	4770      	bx	lr
   da32a:	bf00      	nop
   da32c:	2003e694 	.word	0x2003e694
   da330:	2003e690 	.word	0x2003e690
   da334:	2003e68c 	.word	0x2003e68c
   da338:	2003e688 	.word	0x2003e688
   da33c:	2003e684 	.word	0x2003e684
   da340:	2003e680 	.word	0x2003e680
   da344:	2003e67c 	.word	0x2003e67c
   da348:	2003e678 	.word	0x2003e678

000da34c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   da34c:	4b24      	ldr	r3, [pc, #144]	; (da3e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   da34e:	681a      	ldr	r2, [r3, #0]
   da350:	07d0      	lsls	r0, r2, #31
   da352:	bf5c      	itt	pl
   da354:	2201      	movpl	r2, #1
   da356:	601a      	strpl	r2, [r3, #0]
   da358:	4b22      	ldr	r3, [pc, #136]	; (da3e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   da35a:	681a      	ldr	r2, [r3, #0]
   da35c:	07d1      	lsls	r1, r2, #31
   da35e:	bf5c      	itt	pl
   da360:	2201      	movpl	r2, #1
   da362:	601a      	strpl	r2, [r3, #0]
   da364:	4b20      	ldr	r3, [pc, #128]	; (da3e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   da366:	681a      	ldr	r2, [r3, #0]
   da368:	07d2      	lsls	r2, r2, #31
   da36a:	bf5c      	itt	pl
   da36c:	2201      	movpl	r2, #1
   da36e:	601a      	strpl	r2, [r3, #0]
   da370:	4b1e      	ldr	r3, [pc, #120]	; (da3ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   da372:	681a      	ldr	r2, [r3, #0]
   da374:	07d0      	lsls	r0, r2, #31
   da376:	bf5c      	itt	pl
   da378:	2201      	movpl	r2, #1
   da37a:	601a      	strpl	r2, [r3, #0]
   da37c:	4b1c      	ldr	r3, [pc, #112]	; (da3f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   da37e:	681a      	ldr	r2, [r3, #0]
   da380:	07d1      	lsls	r1, r2, #31
   da382:	bf5c      	itt	pl
   da384:	2201      	movpl	r2, #1
   da386:	601a      	strpl	r2, [r3, #0]
   da388:	4b1a      	ldr	r3, [pc, #104]	; (da3f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   da38a:	681a      	ldr	r2, [r3, #0]
   da38c:	07d2      	lsls	r2, r2, #31
   da38e:	bf5c      	itt	pl
   da390:	2201      	movpl	r2, #1
   da392:	601a      	strpl	r2, [r3, #0]
   da394:	4b18      	ldr	r3, [pc, #96]	; (da3f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   da396:	681a      	ldr	r2, [r3, #0]
   da398:	07d0      	lsls	r0, r2, #31
   da39a:	bf5c      	itt	pl
   da39c:	2201      	movpl	r2, #1
   da39e:	601a      	strpl	r2, [r3, #0]
   da3a0:	4b16      	ldr	r3, [pc, #88]	; (da3fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   da3a2:	681a      	ldr	r2, [r3, #0]
   da3a4:	07d1      	lsls	r1, r2, #31
   da3a6:	bf5c      	itt	pl
   da3a8:	2201      	movpl	r2, #1
   da3aa:	601a      	strpl	r2, [r3, #0]
   da3ac:	4b14      	ldr	r3, [pc, #80]	; (da400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   da3ae:	681a      	ldr	r2, [r3, #0]
   da3b0:	07d2      	lsls	r2, r2, #31
   da3b2:	bf5c      	itt	pl
   da3b4:	2201      	movpl	r2, #1
   da3b6:	601a      	strpl	r2, [r3, #0]
   da3b8:	4b12      	ldr	r3, [pc, #72]	; (da404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   da3ba:	681a      	ldr	r2, [r3, #0]
   da3bc:	07d0      	lsls	r0, r2, #31
   da3be:	bf5c      	itt	pl
   da3c0:	2201      	movpl	r2, #1
   da3c2:	601a      	strpl	r2, [r3, #0]
   da3c4:	4b10      	ldr	r3, [pc, #64]	; (da408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   da3c6:	681a      	ldr	r2, [r3, #0]
   da3c8:	07d1      	lsls	r1, r2, #31
   da3ca:	bf5c      	itt	pl
   da3cc:	2201      	movpl	r2, #1
   da3ce:	601a      	strpl	r2, [r3, #0]
   da3d0:	4b0e      	ldr	r3, [pc, #56]	; (da40c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   da3d2:	681a      	ldr	r2, [r3, #0]
   da3d4:	07d2      	lsls	r2, r2, #31
   da3d6:	bf5c      	itt	pl
   da3d8:	2201      	movpl	r2, #1
   da3da:	601a      	strpl	r2, [r3, #0]
   da3dc:	4770      	bx	lr
   da3de:	bf00      	nop
   da3e0:	2003e6c4 	.word	0x2003e6c4
   da3e4:	2003e6c0 	.word	0x2003e6c0
   da3e8:	2003e6bc 	.word	0x2003e6bc
   da3ec:	2003e6b8 	.word	0x2003e6b8
   da3f0:	2003e6b4 	.word	0x2003e6b4
   da3f4:	2003e6b0 	.word	0x2003e6b0
   da3f8:	2003e6ac 	.word	0x2003e6ac
   da3fc:	2003e6a8 	.word	0x2003e6a8
   da400:	2003e6a4 	.word	0x2003e6a4
   da404:	2003e6a0 	.word	0x2003e6a0
   da408:	2003e69c 	.word	0x2003e69c
   da40c:	2003e698 	.word	0x2003e698

000da410 <__aeabi_drsub>:
   da410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da414:	e002      	b.n	da41c <__adddf3>
   da416:	bf00      	nop

000da418 <__aeabi_dsub>:
   da418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da41c <__adddf3>:
   da41c:	b530      	push	{r4, r5, lr}
   da41e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da422:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da426:	ea94 0f05 	teq	r4, r5
   da42a:	bf08      	it	eq
   da42c:	ea90 0f02 	teqeq	r0, r2
   da430:	bf1f      	itttt	ne
   da432:	ea54 0c00 	orrsne.w	ip, r4, r0
   da436:	ea55 0c02 	orrsne.w	ip, r5, r2
   da43a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da43e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da442:	f000 80e2 	beq.w	da60a <__adddf3+0x1ee>
   da446:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da44a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da44e:	bfb8      	it	lt
   da450:	426d      	neglt	r5, r5
   da452:	dd0c      	ble.n	da46e <__adddf3+0x52>
   da454:	442c      	add	r4, r5
   da456:	ea80 0202 	eor.w	r2, r0, r2
   da45a:	ea81 0303 	eor.w	r3, r1, r3
   da45e:	ea82 0000 	eor.w	r0, r2, r0
   da462:	ea83 0101 	eor.w	r1, r3, r1
   da466:	ea80 0202 	eor.w	r2, r0, r2
   da46a:	ea81 0303 	eor.w	r3, r1, r3
   da46e:	2d36      	cmp	r5, #54	; 0x36
   da470:	bf88      	it	hi
   da472:	bd30      	pophi	{r4, r5, pc}
   da474:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da478:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da47c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da480:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da484:	d002      	beq.n	da48c <__adddf3+0x70>
   da486:	4240      	negs	r0, r0
   da488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da48c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da490:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da494:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da498:	d002      	beq.n	da4a0 <__adddf3+0x84>
   da49a:	4252      	negs	r2, r2
   da49c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4a0:	ea94 0f05 	teq	r4, r5
   da4a4:	f000 80a7 	beq.w	da5f6 <__adddf3+0x1da>
   da4a8:	f1a4 0401 	sub.w	r4, r4, #1
   da4ac:	f1d5 0e20 	rsbs	lr, r5, #32
   da4b0:	db0d      	blt.n	da4ce <__adddf3+0xb2>
   da4b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   da4b6:	fa22 f205 	lsr.w	r2, r2, r5
   da4ba:	1880      	adds	r0, r0, r2
   da4bc:	f141 0100 	adc.w	r1, r1, #0
   da4c0:	fa03 f20e 	lsl.w	r2, r3, lr
   da4c4:	1880      	adds	r0, r0, r2
   da4c6:	fa43 f305 	asr.w	r3, r3, r5
   da4ca:	4159      	adcs	r1, r3
   da4cc:	e00e      	b.n	da4ec <__adddf3+0xd0>
   da4ce:	f1a5 0520 	sub.w	r5, r5, #32
   da4d2:	f10e 0e20 	add.w	lr, lr, #32
   da4d6:	2a01      	cmp	r2, #1
   da4d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   da4dc:	bf28      	it	cs
   da4de:	f04c 0c02 	orrcs.w	ip, ip, #2
   da4e2:	fa43 f305 	asr.w	r3, r3, r5
   da4e6:	18c0      	adds	r0, r0, r3
   da4e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da4ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da4f0:	d507      	bpl.n	da502 <__adddf3+0xe6>
   da4f2:	f04f 0e00 	mov.w	lr, #0
   da4f6:	f1dc 0c00 	rsbs	ip, ip, #0
   da4fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   da4fe:	eb6e 0101 	sbc.w	r1, lr, r1
   da502:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da506:	d31b      	bcc.n	da540 <__adddf3+0x124>
   da508:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da50c:	d30c      	bcc.n	da528 <__adddf3+0x10c>
   da50e:	0849      	lsrs	r1, r1, #1
   da510:	ea5f 0030 	movs.w	r0, r0, rrx
   da514:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da518:	f104 0401 	add.w	r4, r4, #1
   da51c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da520:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da524:	f080 809a 	bcs.w	da65c <__adddf3+0x240>
   da528:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da52c:	bf08      	it	eq
   da52e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da532:	f150 0000 	adcs.w	r0, r0, #0
   da536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da53a:	ea41 0105 	orr.w	r1, r1, r5
   da53e:	bd30      	pop	{r4, r5, pc}
   da540:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da544:	4140      	adcs	r0, r0
   da546:	eb41 0101 	adc.w	r1, r1, r1
   da54a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da54e:	f1a4 0401 	sub.w	r4, r4, #1
   da552:	d1e9      	bne.n	da528 <__adddf3+0x10c>
   da554:	f091 0f00 	teq	r1, #0
   da558:	bf04      	itt	eq
   da55a:	4601      	moveq	r1, r0
   da55c:	2000      	moveq	r0, #0
   da55e:	fab1 f381 	clz	r3, r1
   da562:	bf08      	it	eq
   da564:	3320      	addeq	r3, #32
   da566:	f1a3 030b 	sub.w	r3, r3, #11
   da56a:	f1b3 0220 	subs.w	r2, r3, #32
   da56e:	da0c      	bge.n	da58a <__adddf3+0x16e>
   da570:	320c      	adds	r2, #12
   da572:	dd08      	ble.n	da586 <__adddf3+0x16a>
   da574:	f102 0c14 	add.w	ip, r2, #20
   da578:	f1c2 020c 	rsb	r2, r2, #12
   da57c:	fa01 f00c 	lsl.w	r0, r1, ip
   da580:	fa21 f102 	lsr.w	r1, r1, r2
   da584:	e00c      	b.n	da5a0 <__adddf3+0x184>
   da586:	f102 0214 	add.w	r2, r2, #20
   da58a:	bfd8      	it	le
   da58c:	f1c2 0c20 	rsble	ip, r2, #32
   da590:	fa01 f102 	lsl.w	r1, r1, r2
   da594:	fa20 fc0c 	lsr.w	ip, r0, ip
   da598:	bfdc      	itt	le
   da59a:	ea41 010c 	orrle.w	r1, r1, ip
   da59e:	4090      	lslle	r0, r2
   da5a0:	1ae4      	subs	r4, r4, r3
   da5a2:	bfa2      	ittt	ge
   da5a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da5a8:	4329      	orrge	r1, r5
   da5aa:	bd30      	popge	{r4, r5, pc}
   da5ac:	ea6f 0404 	mvn.w	r4, r4
   da5b0:	3c1f      	subs	r4, #31
   da5b2:	da1c      	bge.n	da5ee <__adddf3+0x1d2>
   da5b4:	340c      	adds	r4, #12
   da5b6:	dc0e      	bgt.n	da5d6 <__adddf3+0x1ba>
   da5b8:	f104 0414 	add.w	r4, r4, #20
   da5bc:	f1c4 0220 	rsb	r2, r4, #32
   da5c0:	fa20 f004 	lsr.w	r0, r0, r4
   da5c4:	fa01 f302 	lsl.w	r3, r1, r2
   da5c8:	ea40 0003 	orr.w	r0, r0, r3
   da5cc:	fa21 f304 	lsr.w	r3, r1, r4
   da5d0:	ea45 0103 	orr.w	r1, r5, r3
   da5d4:	bd30      	pop	{r4, r5, pc}
   da5d6:	f1c4 040c 	rsb	r4, r4, #12
   da5da:	f1c4 0220 	rsb	r2, r4, #32
   da5de:	fa20 f002 	lsr.w	r0, r0, r2
   da5e2:	fa01 f304 	lsl.w	r3, r1, r4
   da5e6:	ea40 0003 	orr.w	r0, r0, r3
   da5ea:	4629      	mov	r1, r5
   da5ec:	bd30      	pop	{r4, r5, pc}
   da5ee:	fa21 f004 	lsr.w	r0, r1, r4
   da5f2:	4629      	mov	r1, r5
   da5f4:	bd30      	pop	{r4, r5, pc}
   da5f6:	f094 0f00 	teq	r4, #0
   da5fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da5fe:	bf06      	itte	eq
   da600:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da604:	3401      	addeq	r4, #1
   da606:	3d01      	subne	r5, #1
   da608:	e74e      	b.n	da4a8 <__adddf3+0x8c>
   da60a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da60e:	bf18      	it	ne
   da610:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da614:	d029      	beq.n	da66a <__adddf3+0x24e>
   da616:	ea94 0f05 	teq	r4, r5
   da61a:	bf08      	it	eq
   da61c:	ea90 0f02 	teqeq	r0, r2
   da620:	d005      	beq.n	da62e <__adddf3+0x212>
   da622:	ea54 0c00 	orrs.w	ip, r4, r0
   da626:	bf04      	itt	eq
   da628:	4619      	moveq	r1, r3
   da62a:	4610      	moveq	r0, r2
   da62c:	bd30      	pop	{r4, r5, pc}
   da62e:	ea91 0f03 	teq	r1, r3
   da632:	bf1e      	ittt	ne
   da634:	2100      	movne	r1, #0
   da636:	2000      	movne	r0, #0
   da638:	bd30      	popne	{r4, r5, pc}
   da63a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da63e:	d105      	bne.n	da64c <__adddf3+0x230>
   da640:	0040      	lsls	r0, r0, #1
   da642:	4149      	adcs	r1, r1
   da644:	bf28      	it	cs
   da646:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da64a:	bd30      	pop	{r4, r5, pc}
   da64c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da650:	bf3c      	itt	cc
   da652:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da656:	bd30      	popcc	{r4, r5, pc}
   da658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da65c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da664:	f04f 0000 	mov.w	r0, #0
   da668:	bd30      	pop	{r4, r5, pc}
   da66a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da66e:	bf1a      	itte	ne
   da670:	4619      	movne	r1, r3
   da672:	4610      	movne	r0, r2
   da674:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da678:	bf1c      	itt	ne
   da67a:	460b      	movne	r3, r1
   da67c:	4602      	movne	r2, r0
   da67e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da682:	bf06      	itte	eq
   da684:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da688:	ea91 0f03 	teqeq	r1, r3
   da68c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da690:	bd30      	pop	{r4, r5, pc}
   da692:	bf00      	nop

000da694 <__aeabi_ui2d>:
   da694:	f090 0f00 	teq	r0, #0
   da698:	bf04      	itt	eq
   da69a:	2100      	moveq	r1, #0
   da69c:	4770      	bxeq	lr
   da69e:	b530      	push	{r4, r5, lr}
   da6a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da6a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da6a8:	f04f 0500 	mov.w	r5, #0
   da6ac:	f04f 0100 	mov.w	r1, #0
   da6b0:	e750      	b.n	da554 <__adddf3+0x138>
   da6b2:	bf00      	nop

000da6b4 <__aeabi_i2d>:
   da6b4:	f090 0f00 	teq	r0, #0
   da6b8:	bf04      	itt	eq
   da6ba:	2100      	moveq	r1, #0
   da6bc:	4770      	bxeq	lr
   da6be:	b530      	push	{r4, r5, lr}
   da6c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da6c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da6c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da6cc:	bf48      	it	mi
   da6ce:	4240      	negmi	r0, r0
   da6d0:	f04f 0100 	mov.w	r1, #0
   da6d4:	e73e      	b.n	da554 <__adddf3+0x138>
   da6d6:	bf00      	nop

000da6d8 <__aeabi_f2d>:
   da6d8:	0042      	lsls	r2, r0, #1
   da6da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da6de:	ea4f 0131 	mov.w	r1, r1, rrx
   da6e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da6e6:	bf1f      	itttt	ne
   da6e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da6ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da6f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da6f4:	4770      	bxne	lr
   da6f6:	f092 0f00 	teq	r2, #0
   da6fa:	bf14      	ite	ne
   da6fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da700:	4770      	bxeq	lr
   da702:	b530      	push	{r4, r5, lr}
   da704:	f44f 7460 	mov.w	r4, #896	; 0x380
   da708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da70c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da710:	e720      	b.n	da554 <__adddf3+0x138>
   da712:	bf00      	nop

000da714 <__aeabi_ul2d>:
   da714:	ea50 0201 	orrs.w	r2, r0, r1
   da718:	bf08      	it	eq
   da71a:	4770      	bxeq	lr
   da71c:	b530      	push	{r4, r5, lr}
   da71e:	f04f 0500 	mov.w	r5, #0
   da722:	e00a      	b.n	da73a <__aeabi_l2d+0x16>

000da724 <__aeabi_l2d>:
   da724:	ea50 0201 	orrs.w	r2, r0, r1
   da728:	bf08      	it	eq
   da72a:	4770      	bxeq	lr
   da72c:	b530      	push	{r4, r5, lr}
   da72e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da732:	d502      	bpl.n	da73a <__aeabi_l2d+0x16>
   da734:	4240      	negs	r0, r0
   da736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da73a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da73e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da742:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da746:	f43f aedc 	beq.w	da502 <__adddf3+0xe6>
   da74a:	f04f 0203 	mov.w	r2, #3
   da74e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da752:	bf18      	it	ne
   da754:	3203      	addne	r2, #3
   da756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da75a:	bf18      	it	ne
   da75c:	3203      	addne	r2, #3
   da75e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da762:	f1c2 0320 	rsb	r3, r2, #32
   da766:	fa00 fc03 	lsl.w	ip, r0, r3
   da76a:	fa20 f002 	lsr.w	r0, r0, r2
   da76e:	fa01 fe03 	lsl.w	lr, r1, r3
   da772:	ea40 000e 	orr.w	r0, r0, lr
   da776:	fa21 f102 	lsr.w	r1, r1, r2
   da77a:	4414      	add	r4, r2
   da77c:	e6c1      	b.n	da502 <__adddf3+0xe6>
   da77e:	bf00      	nop

000da780 <__aeabi_dmul>:
   da780:	b570      	push	{r4, r5, r6, lr}
   da782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da78a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da78e:	bf1d      	ittte	ne
   da790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da794:	ea94 0f0c 	teqne	r4, ip
   da798:	ea95 0f0c 	teqne	r5, ip
   da79c:	f000 f8de 	bleq	da95c <__aeabi_dmul+0x1dc>
   da7a0:	442c      	add	r4, r5
   da7a2:	ea81 0603 	eor.w	r6, r1, r3
   da7a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da7aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da7ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da7b2:	bf18      	it	ne
   da7b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da7b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da7c0:	d038      	beq.n	da834 <__aeabi_dmul+0xb4>
   da7c2:	fba0 ce02 	umull	ip, lr, r0, r2
   da7c6:	f04f 0500 	mov.w	r5, #0
   da7ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   da7ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da7d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   da7d6:	f04f 0600 	mov.w	r6, #0
   da7da:	fbe1 5603 	umlal	r5, r6, r1, r3
   da7de:	f09c 0f00 	teq	ip, #0
   da7e2:	bf18      	it	ne
   da7e4:	f04e 0e01 	orrne.w	lr, lr, #1
   da7e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da7ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da7f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da7f4:	d204      	bcs.n	da800 <__aeabi_dmul+0x80>
   da7f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da7fa:	416d      	adcs	r5, r5
   da7fc:	eb46 0606 	adc.w	r6, r6, r6
   da800:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da804:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da808:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da80c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da810:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da814:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da818:	bf88      	it	hi
   da81a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da81e:	d81e      	bhi.n	da85e <__aeabi_dmul+0xde>
   da820:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da824:	bf08      	it	eq
   da826:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da82a:	f150 0000 	adcs.w	r0, r0, #0
   da82e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da832:	bd70      	pop	{r4, r5, r6, pc}
   da834:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da838:	ea46 0101 	orr.w	r1, r6, r1
   da83c:	ea40 0002 	orr.w	r0, r0, r2
   da840:	ea81 0103 	eor.w	r1, r1, r3
   da844:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da848:	bfc2      	ittt	gt
   da84a:	ebd4 050c 	rsbsgt	r5, r4, ip
   da84e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da852:	bd70      	popgt	{r4, r5, r6, pc}
   da854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da858:	f04f 0e00 	mov.w	lr, #0
   da85c:	3c01      	subs	r4, #1
   da85e:	f300 80ab 	bgt.w	da9b8 <__aeabi_dmul+0x238>
   da862:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da866:	bfde      	ittt	le
   da868:	2000      	movle	r0, #0
   da86a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da86e:	bd70      	pople	{r4, r5, r6, pc}
   da870:	f1c4 0400 	rsb	r4, r4, #0
   da874:	3c20      	subs	r4, #32
   da876:	da35      	bge.n	da8e4 <__aeabi_dmul+0x164>
   da878:	340c      	adds	r4, #12
   da87a:	dc1b      	bgt.n	da8b4 <__aeabi_dmul+0x134>
   da87c:	f104 0414 	add.w	r4, r4, #20
   da880:	f1c4 0520 	rsb	r5, r4, #32
   da884:	fa00 f305 	lsl.w	r3, r0, r5
   da888:	fa20 f004 	lsr.w	r0, r0, r4
   da88c:	fa01 f205 	lsl.w	r2, r1, r5
   da890:	ea40 0002 	orr.w	r0, r0, r2
   da894:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da89c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da8a0:	fa21 f604 	lsr.w	r6, r1, r4
   da8a4:	eb42 0106 	adc.w	r1, r2, r6
   da8a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da8ac:	bf08      	it	eq
   da8ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da8b2:	bd70      	pop	{r4, r5, r6, pc}
   da8b4:	f1c4 040c 	rsb	r4, r4, #12
   da8b8:	f1c4 0520 	rsb	r5, r4, #32
   da8bc:	fa00 f304 	lsl.w	r3, r0, r4
   da8c0:	fa20 f005 	lsr.w	r0, r0, r5
   da8c4:	fa01 f204 	lsl.w	r2, r1, r4
   da8c8:	ea40 0002 	orr.w	r0, r0, r2
   da8cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da8d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da8d4:	f141 0100 	adc.w	r1, r1, #0
   da8d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da8dc:	bf08      	it	eq
   da8de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da8e2:	bd70      	pop	{r4, r5, r6, pc}
   da8e4:	f1c4 0520 	rsb	r5, r4, #32
   da8e8:	fa00 f205 	lsl.w	r2, r0, r5
   da8ec:	ea4e 0e02 	orr.w	lr, lr, r2
   da8f0:	fa20 f304 	lsr.w	r3, r0, r4
   da8f4:	fa01 f205 	lsl.w	r2, r1, r5
   da8f8:	ea43 0302 	orr.w	r3, r3, r2
   da8fc:	fa21 f004 	lsr.w	r0, r1, r4
   da900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da904:	fa21 f204 	lsr.w	r2, r1, r4
   da908:	ea20 0002 	bic.w	r0, r0, r2
   da90c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da914:	bf08      	it	eq
   da916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da91a:	bd70      	pop	{r4, r5, r6, pc}
   da91c:	f094 0f00 	teq	r4, #0
   da920:	d10f      	bne.n	da942 <__aeabi_dmul+0x1c2>
   da922:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da926:	0040      	lsls	r0, r0, #1
   da928:	eb41 0101 	adc.w	r1, r1, r1
   da92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da930:	bf08      	it	eq
   da932:	3c01      	subeq	r4, #1
   da934:	d0f7      	beq.n	da926 <__aeabi_dmul+0x1a6>
   da936:	ea41 0106 	orr.w	r1, r1, r6
   da93a:	f095 0f00 	teq	r5, #0
   da93e:	bf18      	it	ne
   da940:	4770      	bxne	lr
   da942:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da946:	0052      	lsls	r2, r2, #1
   da948:	eb43 0303 	adc.w	r3, r3, r3
   da94c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da950:	bf08      	it	eq
   da952:	3d01      	subeq	r5, #1
   da954:	d0f7      	beq.n	da946 <__aeabi_dmul+0x1c6>
   da956:	ea43 0306 	orr.w	r3, r3, r6
   da95a:	4770      	bx	lr
   da95c:	ea94 0f0c 	teq	r4, ip
   da960:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da964:	bf18      	it	ne
   da966:	ea95 0f0c 	teqne	r5, ip
   da96a:	d00c      	beq.n	da986 <__aeabi_dmul+0x206>
   da96c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da970:	bf18      	it	ne
   da972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da976:	d1d1      	bne.n	da91c <__aeabi_dmul+0x19c>
   da978:	ea81 0103 	eor.w	r1, r1, r3
   da97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da980:	f04f 0000 	mov.w	r0, #0
   da984:	bd70      	pop	{r4, r5, r6, pc}
   da986:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da98a:	bf06      	itte	eq
   da98c:	4610      	moveq	r0, r2
   da98e:	4619      	moveq	r1, r3
   da990:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da994:	d019      	beq.n	da9ca <__aeabi_dmul+0x24a>
   da996:	ea94 0f0c 	teq	r4, ip
   da99a:	d102      	bne.n	da9a2 <__aeabi_dmul+0x222>
   da99c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da9a0:	d113      	bne.n	da9ca <__aeabi_dmul+0x24a>
   da9a2:	ea95 0f0c 	teq	r5, ip
   da9a6:	d105      	bne.n	da9b4 <__aeabi_dmul+0x234>
   da9a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da9ac:	bf1c      	itt	ne
   da9ae:	4610      	movne	r0, r2
   da9b0:	4619      	movne	r1, r3
   da9b2:	d10a      	bne.n	da9ca <__aeabi_dmul+0x24a>
   da9b4:	ea81 0103 	eor.w	r1, r1, r3
   da9b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da9c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da9c4:	f04f 0000 	mov.w	r0, #0
   da9c8:	bd70      	pop	{r4, r5, r6, pc}
   da9ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da9ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da9d2:	bd70      	pop	{r4, r5, r6, pc}

000da9d4 <__aeabi_ddiv>:
   da9d4:	b570      	push	{r4, r5, r6, lr}
   da9d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da9da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da9de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da9e2:	bf1d      	ittte	ne
   da9e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da9e8:	ea94 0f0c 	teqne	r4, ip
   da9ec:	ea95 0f0c 	teqne	r5, ip
   da9f0:	f000 f8a7 	bleq	dab42 <__aeabi_ddiv+0x16e>
   da9f4:	eba4 0405 	sub.w	r4, r4, r5
   da9f8:	ea81 0e03 	eor.w	lr, r1, r3
   da9fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daa00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daa04:	f000 8088 	beq.w	dab18 <__aeabi_ddiv+0x144>
   daa08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daa0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daa10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daa14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daa18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daa1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daa20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daa24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daa28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daa2c:	429d      	cmp	r5, r3
   daa2e:	bf08      	it	eq
   daa30:	4296      	cmpeq	r6, r2
   daa32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daa36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daa3a:	d202      	bcs.n	daa42 <__aeabi_ddiv+0x6e>
   daa3c:	085b      	lsrs	r3, r3, #1
   daa3e:	ea4f 0232 	mov.w	r2, r2, rrx
   daa42:	1ab6      	subs	r6, r6, r2
   daa44:	eb65 0503 	sbc.w	r5, r5, r3
   daa48:	085b      	lsrs	r3, r3, #1
   daa4a:	ea4f 0232 	mov.w	r2, r2, rrx
   daa4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daa52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daa56:	ebb6 0e02 	subs.w	lr, r6, r2
   daa5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   daa5e:	bf22      	ittt	cs
   daa60:	1ab6      	subcs	r6, r6, r2
   daa62:	4675      	movcs	r5, lr
   daa64:	ea40 000c 	orrcs.w	r0, r0, ip
   daa68:	085b      	lsrs	r3, r3, #1
   daa6a:	ea4f 0232 	mov.w	r2, r2, rrx
   daa6e:	ebb6 0e02 	subs.w	lr, r6, r2
   daa72:	eb75 0e03 	sbcs.w	lr, r5, r3
   daa76:	bf22      	ittt	cs
   daa78:	1ab6      	subcs	r6, r6, r2
   daa7a:	4675      	movcs	r5, lr
   daa7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daa80:	085b      	lsrs	r3, r3, #1
   daa82:	ea4f 0232 	mov.w	r2, r2, rrx
   daa86:	ebb6 0e02 	subs.w	lr, r6, r2
   daa8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   daa8e:	bf22      	ittt	cs
   daa90:	1ab6      	subcs	r6, r6, r2
   daa92:	4675      	movcs	r5, lr
   daa94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   daa98:	085b      	lsrs	r3, r3, #1
   daa9a:	ea4f 0232 	mov.w	r2, r2, rrx
   daa9e:	ebb6 0e02 	subs.w	lr, r6, r2
   daaa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   daaa6:	bf22      	ittt	cs
   daaa8:	1ab6      	subcs	r6, r6, r2
   daaaa:	4675      	movcs	r5, lr
   daaac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   daab0:	ea55 0e06 	orrs.w	lr, r5, r6
   daab4:	d018      	beq.n	daae8 <__aeabi_ddiv+0x114>
   daab6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   daaba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   daabe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   daac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   daac6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   daaca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   daace:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   daad2:	d1c0      	bne.n	daa56 <__aeabi_ddiv+0x82>
   daad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daad8:	d10b      	bne.n	daaf2 <__aeabi_ddiv+0x11e>
   daada:	ea41 0100 	orr.w	r1, r1, r0
   daade:	f04f 0000 	mov.w	r0, #0
   daae2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   daae6:	e7b6      	b.n	daa56 <__aeabi_ddiv+0x82>
   daae8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daaec:	bf04      	itt	eq
   daaee:	4301      	orreq	r1, r0
   daaf0:	2000      	moveq	r0, #0
   daaf2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daaf6:	bf88      	it	hi
   daaf8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daafc:	f63f aeaf 	bhi.w	da85e <__aeabi_dmul+0xde>
   dab00:	ebb5 0c03 	subs.w	ip, r5, r3
   dab04:	bf04      	itt	eq
   dab06:	ebb6 0c02 	subseq.w	ip, r6, r2
   dab0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab0e:	f150 0000 	adcs.w	r0, r0, #0
   dab12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab16:	bd70      	pop	{r4, r5, r6, pc}
   dab18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dab1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dab20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dab24:	bfc2      	ittt	gt
   dab26:	ebd4 050c 	rsbsgt	r5, r4, ip
   dab2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dab2e:	bd70      	popgt	{r4, r5, r6, pc}
   dab30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab34:	f04f 0e00 	mov.w	lr, #0
   dab38:	3c01      	subs	r4, #1
   dab3a:	e690      	b.n	da85e <__aeabi_dmul+0xde>
   dab3c:	ea45 0e06 	orr.w	lr, r5, r6
   dab40:	e68d      	b.n	da85e <__aeabi_dmul+0xde>
   dab42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dab46:	ea94 0f0c 	teq	r4, ip
   dab4a:	bf08      	it	eq
   dab4c:	ea95 0f0c 	teqeq	r5, ip
   dab50:	f43f af3b 	beq.w	da9ca <__aeabi_dmul+0x24a>
   dab54:	ea94 0f0c 	teq	r4, ip
   dab58:	d10a      	bne.n	dab70 <__aeabi_ddiv+0x19c>
   dab5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dab5e:	f47f af34 	bne.w	da9ca <__aeabi_dmul+0x24a>
   dab62:	ea95 0f0c 	teq	r5, ip
   dab66:	f47f af25 	bne.w	da9b4 <__aeabi_dmul+0x234>
   dab6a:	4610      	mov	r0, r2
   dab6c:	4619      	mov	r1, r3
   dab6e:	e72c      	b.n	da9ca <__aeabi_dmul+0x24a>
   dab70:	ea95 0f0c 	teq	r5, ip
   dab74:	d106      	bne.n	dab84 <__aeabi_ddiv+0x1b0>
   dab76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dab7a:	f43f aefd 	beq.w	da978 <__aeabi_dmul+0x1f8>
   dab7e:	4610      	mov	r0, r2
   dab80:	4619      	mov	r1, r3
   dab82:	e722      	b.n	da9ca <__aeabi_dmul+0x24a>
   dab84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dab88:	bf18      	it	ne
   dab8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dab8e:	f47f aec5 	bne.w	da91c <__aeabi_dmul+0x19c>
   dab92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dab96:	f47f af0d 	bne.w	da9b4 <__aeabi_dmul+0x234>
   dab9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dab9e:	f47f aeeb 	bne.w	da978 <__aeabi_dmul+0x1f8>
   daba2:	e712      	b.n	da9ca <__aeabi_dmul+0x24a>

000daba4 <__gedf2>:
   daba4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   daba8:	e006      	b.n	dabb8 <__cmpdf2+0x4>
   dabaa:	bf00      	nop

000dabac <__ledf2>:
   dabac:	f04f 0c01 	mov.w	ip, #1
   dabb0:	e002      	b.n	dabb8 <__cmpdf2+0x4>
   dabb2:	bf00      	nop

000dabb4 <__cmpdf2>:
   dabb4:	f04f 0c01 	mov.w	ip, #1
   dabb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   dabbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dabc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dabc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dabc8:	bf18      	it	ne
   dabca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dabce:	d01b      	beq.n	dac08 <__cmpdf2+0x54>
   dabd0:	b001      	add	sp, #4
   dabd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dabd6:	bf0c      	ite	eq
   dabd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dabdc:	ea91 0f03 	teqne	r1, r3
   dabe0:	bf02      	ittt	eq
   dabe2:	ea90 0f02 	teqeq	r0, r2
   dabe6:	2000      	moveq	r0, #0
   dabe8:	4770      	bxeq	lr
   dabea:	f110 0f00 	cmn.w	r0, #0
   dabee:	ea91 0f03 	teq	r1, r3
   dabf2:	bf58      	it	pl
   dabf4:	4299      	cmppl	r1, r3
   dabf6:	bf08      	it	eq
   dabf8:	4290      	cmpeq	r0, r2
   dabfa:	bf2c      	ite	cs
   dabfc:	17d8      	asrcs	r0, r3, #31
   dabfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dac02:	f040 0001 	orr.w	r0, r0, #1
   dac06:	4770      	bx	lr
   dac08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dac0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac10:	d102      	bne.n	dac18 <__cmpdf2+0x64>
   dac12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dac16:	d107      	bne.n	dac28 <__cmpdf2+0x74>
   dac18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dac1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dac20:	d1d6      	bne.n	dabd0 <__cmpdf2+0x1c>
   dac22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dac26:	d0d3      	beq.n	dabd0 <__cmpdf2+0x1c>
   dac28:	f85d 0b04 	ldr.w	r0, [sp], #4
   dac2c:	4770      	bx	lr
   dac2e:	bf00      	nop

000dac30 <__aeabi_cdrcmple>:
   dac30:	4684      	mov	ip, r0
   dac32:	4610      	mov	r0, r2
   dac34:	4662      	mov	r2, ip
   dac36:	468c      	mov	ip, r1
   dac38:	4619      	mov	r1, r3
   dac3a:	4663      	mov	r3, ip
   dac3c:	e000      	b.n	dac40 <__aeabi_cdcmpeq>
   dac3e:	bf00      	nop

000dac40 <__aeabi_cdcmpeq>:
   dac40:	b501      	push	{r0, lr}
   dac42:	f7ff ffb7 	bl	dabb4 <__cmpdf2>
   dac46:	2800      	cmp	r0, #0
   dac48:	bf48      	it	mi
   dac4a:	f110 0f00 	cmnmi.w	r0, #0
   dac4e:	bd01      	pop	{r0, pc}

000dac50 <__aeabi_dcmpeq>:
   dac50:	f84d ed08 	str.w	lr, [sp, #-8]!
   dac54:	f7ff fff4 	bl	dac40 <__aeabi_cdcmpeq>
   dac58:	bf0c      	ite	eq
   dac5a:	2001      	moveq	r0, #1
   dac5c:	2000      	movne	r0, #0
   dac5e:	f85d fb08 	ldr.w	pc, [sp], #8
   dac62:	bf00      	nop

000dac64 <__aeabi_dcmplt>:
   dac64:	f84d ed08 	str.w	lr, [sp, #-8]!
   dac68:	f7ff ffea 	bl	dac40 <__aeabi_cdcmpeq>
   dac6c:	bf34      	ite	cc
   dac6e:	2001      	movcc	r0, #1
   dac70:	2000      	movcs	r0, #0
   dac72:	f85d fb08 	ldr.w	pc, [sp], #8
   dac76:	bf00      	nop

000dac78 <__aeabi_dcmple>:
   dac78:	f84d ed08 	str.w	lr, [sp, #-8]!
   dac7c:	f7ff ffe0 	bl	dac40 <__aeabi_cdcmpeq>
   dac80:	bf94      	ite	ls
   dac82:	2001      	movls	r0, #1
   dac84:	2000      	movhi	r0, #0
   dac86:	f85d fb08 	ldr.w	pc, [sp], #8
   dac8a:	bf00      	nop

000dac8c <__aeabi_dcmpge>:
   dac8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dac90:	f7ff ffce 	bl	dac30 <__aeabi_cdrcmple>
   dac94:	bf94      	ite	ls
   dac96:	2001      	movls	r0, #1
   dac98:	2000      	movhi	r0, #0
   dac9a:	f85d fb08 	ldr.w	pc, [sp], #8
   dac9e:	bf00      	nop

000daca0 <__aeabi_dcmpgt>:
   daca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   daca4:	f7ff ffc4 	bl	dac30 <__aeabi_cdrcmple>
   daca8:	bf34      	ite	cc
   dacaa:	2001      	movcc	r0, #1
   dacac:	2000      	movcs	r0, #0
   dacae:	f85d fb08 	ldr.w	pc, [sp], #8
   dacb2:	bf00      	nop

000dacb4 <__aeabi_dcmpun>:
   dacb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dacb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dacbc:	d102      	bne.n	dacc4 <__aeabi_dcmpun+0x10>
   dacbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dacc2:	d10a      	bne.n	dacda <__aeabi_dcmpun+0x26>
   dacc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dacc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daccc:	d102      	bne.n	dacd4 <__aeabi_dcmpun+0x20>
   dacce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dacd2:	d102      	bne.n	dacda <__aeabi_dcmpun+0x26>
   dacd4:	f04f 0000 	mov.w	r0, #0
   dacd8:	4770      	bx	lr
   dacda:	f04f 0001 	mov.w	r0, #1
   dacde:	4770      	bx	lr

000dace0 <__aeabi_d2iz>:
   dace0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dace4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dace8:	d215      	bcs.n	dad16 <__aeabi_d2iz+0x36>
   dacea:	d511      	bpl.n	dad10 <__aeabi_d2iz+0x30>
   dacec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dacf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dacf4:	d912      	bls.n	dad1c <__aeabi_d2iz+0x3c>
   dacf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dacfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dacfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dad02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dad06:	fa23 f002 	lsr.w	r0, r3, r2
   dad0a:	bf18      	it	ne
   dad0c:	4240      	negne	r0, r0
   dad0e:	4770      	bx	lr
   dad10:	f04f 0000 	mov.w	r0, #0
   dad14:	4770      	bx	lr
   dad16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dad1a:	d105      	bne.n	dad28 <__aeabi_d2iz+0x48>
   dad1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dad20:	bf08      	it	eq
   dad22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dad26:	4770      	bx	lr
   dad28:	f04f 0000 	mov.w	r0, #0
   dad2c:	4770      	bx	lr
   dad2e:	bf00      	nop

000dad30 <__aeabi_d2uiz>:
   dad30:	004a      	lsls	r2, r1, #1
   dad32:	d211      	bcs.n	dad58 <__aeabi_d2uiz+0x28>
   dad34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dad38:	d211      	bcs.n	dad5e <__aeabi_d2uiz+0x2e>
   dad3a:	d50d      	bpl.n	dad58 <__aeabi_d2uiz+0x28>
   dad3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dad40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dad44:	d40e      	bmi.n	dad64 <__aeabi_d2uiz+0x34>
   dad46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dad4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dad4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dad52:	fa23 f002 	lsr.w	r0, r3, r2
   dad56:	4770      	bx	lr
   dad58:	f04f 0000 	mov.w	r0, #0
   dad5c:	4770      	bx	lr
   dad5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dad62:	d102      	bne.n	dad6a <__aeabi_d2uiz+0x3a>
   dad64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dad68:	4770      	bx	lr
   dad6a:	f04f 0000 	mov.w	r0, #0
   dad6e:	4770      	bx	lr

000dad70 <__aeabi_d2f>:
   dad70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dad74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dad78:	bf24      	itt	cs
   dad7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dad7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dad82:	d90d      	bls.n	dada0 <__aeabi_d2f+0x30>
   dad84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dad88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dad8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dad90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dad94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dad98:	bf08      	it	eq
   dad9a:	f020 0001 	biceq.w	r0, r0, #1
   dad9e:	4770      	bx	lr
   dada0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dada4:	d121      	bne.n	dadea <__aeabi_d2f+0x7a>
   dada6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dadaa:	bfbc      	itt	lt
   dadac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dadb0:	4770      	bxlt	lr
   dadb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dadb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dadba:	f1c2 0218 	rsb	r2, r2, #24
   dadbe:	f1c2 0c20 	rsb	ip, r2, #32
   dadc2:	fa10 f30c 	lsls.w	r3, r0, ip
   dadc6:	fa20 f002 	lsr.w	r0, r0, r2
   dadca:	bf18      	it	ne
   dadcc:	f040 0001 	orrne.w	r0, r0, #1
   dadd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dadd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dadd8:	fa03 fc0c 	lsl.w	ip, r3, ip
   daddc:	ea40 000c 	orr.w	r0, r0, ip
   dade0:	fa23 f302 	lsr.w	r3, r3, r2
   dade4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dade8:	e7cc      	b.n	dad84 <__aeabi_d2f+0x14>
   dadea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dadee:	d107      	bne.n	dae00 <__aeabi_d2f+0x90>
   dadf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dadf4:	bf1e      	ittt	ne
   dadf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dadfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dadfe:	4770      	bxne	lr
   dae00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dae04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dae08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dae0c:	4770      	bx	lr
   dae0e:	bf00      	nop

000dae10 <asctime>:
   dae10:	4b09      	ldr	r3, [pc, #36]	; (dae38 <asctime+0x28>)
   dae12:	b570      	push	{r4, r5, r6, lr}
   dae14:	681c      	ldr	r4, [r3, #0]
   dae16:	6c25      	ldr	r5, [r4, #64]	; 0x40
   dae18:	4606      	mov	r6, r0
   dae1a:	b93d      	cbnz	r5, dae2c <asctime+0x1c>
   dae1c:	201a      	movs	r0, #26
   dae1e:	f7fd fa63 	bl	d82e8 <malloc>
   dae22:	221a      	movs	r2, #26
   dae24:	6420      	str	r0, [r4, #64]	; 0x40
   dae26:	4629      	mov	r1, r5
   dae28:	f000 fa0c 	bl	db244 <memset>
   dae2c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   dae2e:	4630      	mov	r0, r6
   dae30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dae34:	f000 b802 	b.w	dae3c <asctime_r>
   dae38:	2003de58 	.word	0x2003de58

000dae3c <asctime_r>:
   dae3c:	b510      	push	{r4, lr}
   dae3e:	460c      	mov	r4, r1
   dae40:	6941      	ldr	r1, [r0, #20]
   dae42:	6903      	ldr	r3, [r0, #16]
   dae44:	6982      	ldr	r2, [r0, #24]
   dae46:	b086      	sub	sp, #24
   dae48:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dae4c:	9104      	str	r1, [sp, #16]
   dae4e:	6801      	ldr	r1, [r0, #0]
   dae50:	9103      	str	r1, [sp, #12]
   dae52:	6841      	ldr	r1, [r0, #4]
   dae54:	9102      	str	r1, [sp, #8]
   dae56:	6881      	ldr	r1, [r0, #8]
   dae58:	9101      	str	r1, [sp, #4]
   dae5a:	68c1      	ldr	r1, [r0, #12]
   dae5c:	9100      	str	r1, [sp, #0]
   dae5e:	4907      	ldr	r1, [pc, #28]	; (dae7c <asctime_r+0x40>)
   dae60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dae64:	440b      	add	r3, r1
   dae66:	4906      	ldr	r1, [pc, #24]	; (dae80 <asctime_r+0x44>)
   dae68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dae6c:	440a      	add	r2, r1
   dae6e:	4620      	mov	r0, r4
   dae70:	4904      	ldr	r1, [pc, #16]	; (dae84 <asctime_r+0x48>)
   dae72:	f7fd fa51 	bl	d8318 <siprintf>
   dae76:	4620      	mov	r0, r4
   dae78:	b006      	add	sp, #24
   dae7a:	bd10      	pop	{r4, pc}
   dae7c:	000dd932 	.word	0x000dd932
   dae80:	000dd91d 	.word	0x000dd91d
   dae84:	000dd956 	.word	0x000dd956

000dae88 <atoi>:
   dae88:	220a      	movs	r2, #10
   dae8a:	2100      	movs	r1, #0
   dae8c:	f001 ba50 	b.w	dc330 <strtol>

000dae90 <atol>:
   dae90:	220a      	movs	r2, #10
   dae92:	2100      	movs	r1, #0
   dae94:	f001 ba4c 	b.w	dc330 <strtol>

000dae98 <__cxa_atexit>:
   dae98:	b510      	push	{r4, lr}
   dae9a:	4c05      	ldr	r4, [pc, #20]	; (daeb0 <__cxa_atexit+0x18>)
   dae9c:	4613      	mov	r3, r2
   dae9e:	b12c      	cbz	r4, daeac <__cxa_atexit+0x14>
   daea0:	460a      	mov	r2, r1
   daea2:	4601      	mov	r1, r0
   daea4:	2002      	movs	r0, #2
   daea6:	f3af 8000 	nop.w
   daeaa:	bd10      	pop	{r4, pc}
   daeac:	4620      	mov	r0, r4
   daeae:	bd10      	pop	{r4, pc}
   daeb0:	00000000 	.word	0x00000000

000daeb4 <gmtime>:
   daeb4:	b538      	push	{r3, r4, r5, lr}
   daeb6:	4b07      	ldr	r3, [pc, #28]	; (daed4 <gmtime+0x20>)
   daeb8:	681c      	ldr	r4, [r3, #0]
   daeba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daebc:	4605      	mov	r5, r0
   daebe:	b91b      	cbnz	r3, daec8 <gmtime+0x14>
   daec0:	2024      	movs	r0, #36	; 0x24
   daec2:	f7fd fa11 	bl	d82e8 <malloc>
   daec6:	63e0      	str	r0, [r4, #60]	; 0x3c
   daec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daeca:	4628      	mov	r0, r5
   daecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daed0:	f000 b802 	b.w	daed8 <gmtime_r>
   daed4:	2003de58 	.word	0x2003de58

000daed8 <gmtime_r>:
   daed8:	6802      	ldr	r2, [r0, #0]
   daeda:	4b47      	ldr	r3, [pc, #284]	; (daff8 <gmtime_r+0x120>)
   daedc:	b5f0      	push	{r4, r5, r6, r7, lr}
   daede:	fb92 f4f3 	sdiv	r4, r2, r3
   daee2:	fb03 2214 	mls	r2, r3, r4, r2
   daee6:	2a00      	cmp	r2, #0
   daee8:	bfbc      	itt	lt
   daeea:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daeee:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   daef2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   daef6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   daefa:	fb92 f3f0 	sdiv	r3, r2, r0
   daefe:	fb00 2213 	mls	r2, r0, r3, r2
   daf02:	f04f 003c 	mov.w	r0, #60	; 0x3c
   daf06:	bfac      	ite	ge
   daf08:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daf0c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daf10:	608b      	str	r3, [r1, #8]
   daf12:	fb92 f3f0 	sdiv	r3, r2, r0
   daf16:	fb00 2213 	mls	r2, r0, r3, r2
   daf1a:	604b      	str	r3, [r1, #4]
   daf1c:	600a      	str	r2, [r1, #0]
   daf1e:	2307      	movs	r3, #7
   daf20:	1ce2      	adds	r2, r4, #3
   daf22:	fb92 f3f3 	sdiv	r3, r2, r3
   daf26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daf2a:	1ad3      	subs	r3, r2, r3
   daf2c:	618b      	str	r3, [r1, #24]
   daf2e:	4b33      	ldr	r3, [pc, #204]	; (daffc <gmtime_r+0x124>)
   daf30:	4d33      	ldr	r5, [pc, #204]	; (db000 <gmtime_r+0x128>)
   daf32:	fb94 f5f5 	sdiv	r5, r4, r5
   daf36:	fb03 4405 	mla	r4, r3, r5, r4
   daf3a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   daf3e:	fbb4 f2f2 	udiv	r2, r4, r2
   daf42:	4422      	add	r2, r4
   daf44:	f240 57b4 	movw	r7, #1460	; 0x5b4
   daf48:	fbb4 f3f7 	udiv	r3, r4, r7
   daf4c:	1ad2      	subs	r2, r2, r3
   daf4e:	482d      	ldr	r0, [pc, #180]	; (db004 <gmtime_r+0x12c>)
   daf50:	fbb4 f0f0 	udiv	r0, r4, r0
   daf54:	f648 6694 	movw	r6, #36500	; 0x8e94
   daf58:	1a13      	subs	r3, r2, r0
   daf5a:	fbb3 f6f6 	udiv	r6, r3, r6
   daf5e:	4434      	add	r4, r6
   daf60:	f240 126d 	movw	r2, #365	; 0x16d
   daf64:	fbb3 f0f2 	udiv	r0, r3, r2
   daf68:	fbb3 f3f7 	udiv	r3, r3, r7
   daf6c:	1ae3      	subs	r3, r4, r3
   daf6e:	fb02 3310 	mls	r3, r2, r0, r3
   daf72:	2499      	movs	r4, #153	; 0x99
   daf74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   daf78:	3202      	adds	r2, #2
   daf7a:	fbb2 f2f4 	udiv	r2, r2, r4
   daf7e:	2a0a      	cmp	r2, #10
   daf80:	fb04 f402 	mul.w	r4, r4, r2
   daf84:	f104 0602 	add.w	r6, r4, #2
   daf88:	f04f 0405 	mov.w	r4, #5
   daf8c:	fbb6 f4f4 	udiv	r4, r6, r4
   daf90:	bf34      	ite	cc
   daf92:	2602      	movcc	r6, #2
   daf94:	f06f 0609 	mvncs.w	r6, #9
   daf98:	4416      	add	r6, r2
   daf9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daf9e:	fb02 0505 	mla	r5, r2, r5, r0
   dafa2:	1c5f      	adds	r7, r3, #1
   dafa4:	2e01      	cmp	r6, #1
   dafa6:	bf98      	it	ls
   dafa8:	3501      	addls	r5, #1
   dafaa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dafae:	eba7 0704 	sub.w	r7, r7, r4
   dafb2:	d302      	bcc.n	dafba <gmtime_r+0xe2>
   dafb4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dafb8:	e014      	b.n	dafe4 <gmtime_r+0x10c>
   dafba:	0782      	lsls	r2, r0, #30
   dafbc:	d105      	bne.n	dafca <gmtime_r+0xf2>
   dafbe:	2464      	movs	r4, #100	; 0x64
   dafc0:	fbb0 f2f4 	udiv	r2, r0, r4
   dafc4:	fb04 0212 	mls	r2, r4, r2, r0
   dafc8:	b94a      	cbnz	r2, dafde <gmtime_r+0x106>
   dafca:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dafce:	fbb0 f4f2 	udiv	r4, r0, r2
   dafd2:	fb02 0014 	mls	r0, r2, r4, r0
   dafd6:	fab0 f280 	clz	r2, r0
   dafda:	0952      	lsrs	r2, r2, #5
   dafdc:	e000      	b.n	dafe0 <gmtime_r+0x108>
   dafde:	2201      	movs	r2, #1
   dafe0:	333b      	adds	r3, #59	; 0x3b
   dafe2:	441a      	add	r2, r3
   dafe4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dafe8:	2300      	movs	r3, #0
   dafea:	61ca      	str	r2, [r1, #28]
   dafec:	614d      	str	r5, [r1, #20]
   dafee:	610e      	str	r6, [r1, #16]
   daff0:	60cf      	str	r7, [r1, #12]
   daff2:	620b      	str	r3, [r1, #32]
   daff4:	4608      	mov	r0, r1
   daff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daff8:	00015180 	.word	0x00015180
   daffc:	fffdc54f 	.word	0xfffdc54f
   db000:	00023ab1 	.word	0x00023ab1
   db004:	00023ab0 	.word	0x00023ab0

000db008 <localtime>:
   db008:	b538      	push	{r3, r4, r5, lr}
   db00a:	4b07      	ldr	r3, [pc, #28]	; (db028 <localtime+0x20>)
   db00c:	681c      	ldr	r4, [r3, #0]
   db00e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db010:	4605      	mov	r5, r0
   db012:	b91b      	cbnz	r3, db01c <localtime+0x14>
   db014:	2024      	movs	r0, #36	; 0x24
   db016:	f7fd f967 	bl	d82e8 <malloc>
   db01a:	63e0      	str	r0, [r4, #60]	; 0x3c
   db01c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   db01e:	4628      	mov	r0, r5
   db020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db024:	f000 b802 	b.w	db02c <localtime_r>
   db028:	2003de58 	.word	0x2003de58

000db02c <localtime_r>:
   db02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db030:	460c      	mov	r4, r1
   db032:	4680      	mov	r8, r0
   db034:	f001 fcaa 	bl	dc98c <__gettzinfo>
   db038:	4621      	mov	r1, r4
   db03a:	4607      	mov	r7, r0
   db03c:	4640      	mov	r0, r8
   db03e:	f7ff ff4b 	bl	daed8 <gmtime_r>
   db042:	6946      	ldr	r6, [r0, #20]
   db044:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   db048:	07b3      	lsls	r3, r6, #30
   db04a:	4604      	mov	r4, r0
   db04c:	d105      	bne.n	db05a <localtime_r+0x2e>
   db04e:	2264      	movs	r2, #100	; 0x64
   db050:	fb96 f3f2 	sdiv	r3, r6, r2
   db054:	fb02 6313 	mls	r3, r2, r3, r6
   db058:	b94b      	cbnz	r3, db06e <localtime_r+0x42>
   db05a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db05e:	fb96 f3f5 	sdiv	r3, r6, r5
   db062:	fb05 6513 	mls	r5, r5, r3, r6
   db066:	fab5 f385 	clz	r3, r5
   db06a:	095b      	lsrs	r3, r3, #5
   db06c:	e000      	b.n	db070 <localtime_r+0x44>
   db06e:	2301      	movs	r3, #1
   db070:	4a5f      	ldr	r2, [pc, #380]	; (db1f0 <localtime_r+0x1c4>)
   db072:	2530      	movs	r5, #48	; 0x30
   db074:	fb05 2503 	mla	r5, r5, r3, r2
   db078:	f001 faa4 	bl	dc5c4 <__tz_lock>
   db07c:	f001 faa4 	bl	dc5c8 <_tzset_unlocked>
   db080:	4b5c      	ldr	r3, [pc, #368]	; (db1f4 <localtime_r+0x1c8>)
   db082:	681b      	ldr	r3, [r3, #0]
   db084:	b1f3      	cbz	r3, db0c4 <localtime_r+0x98>
   db086:	687b      	ldr	r3, [r7, #4]
   db088:	429e      	cmp	r6, r3
   db08a:	d105      	bne.n	db098 <localtime_r+0x6c>
   db08c:	6839      	ldr	r1, [r7, #0]
   db08e:	f8d8 3000 	ldr.w	r3, [r8]
   db092:	69fa      	ldr	r2, [r7, #28]
   db094:	b941      	cbnz	r1, db0a8 <localtime_r+0x7c>
   db096:	e00a      	b.n	db0ae <localtime_r+0x82>
   db098:	4630      	mov	r0, r6
   db09a:	f001 f9eb 	bl	dc474 <__tzcalc_limits>
   db09e:	2800      	cmp	r0, #0
   db0a0:	d1f4      	bne.n	db08c <localtime_r+0x60>
   db0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db0a6:	e00d      	b.n	db0c4 <localtime_r+0x98>
   db0a8:	4293      	cmp	r3, r2
   db0aa:	db08      	blt.n	db0be <localtime_r+0x92>
   db0ac:	e001      	b.n	db0b2 <localtime_r+0x86>
   db0ae:	4293      	cmp	r3, r2
   db0b0:	da07      	bge.n	db0c2 <localtime_r+0x96>
   db0b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   db0b4:	4293      	cmp	r3, r2
   db0b6:	bfac      	ite	ge
   db0b8:	2300      	movge	r3, #0
   db0ba:	2301      	movlt	r3, #1
   db0bc:	e002      	b.n	db0c4 <localtime_r+0x98>
   db0be:	2300      	movs	r3, #0
   db0c0:	e000      	b.n	db0c4 <localtime_r+0x98>
   db0c2:	2301      	movs	r3, #1
   db0c4:	6223      	str	r3, [r4, #32]
   db0c6:	6a23      	ldr	r3, [r4, #32]
   db0c8:	2b01      	cmp	r3, #1
   db0ca:	bf0c      	ite	eq
   db0cc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   db0ce:	6a39      	ldrne	r1, [r7, #32]
   db0d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db0d4:	203c      	movs	r0, #60	; 0x3c
   db0d6:	fb91 f6f3 	sdiv	r6, r1, r3
   db0da:	fb03 1316 	mls	r3, r3, r6, r1
   db0de:	6861      	ldr	r1, [r4, #4]
   db0e0:	fb93 f2f0 	sdiv	r2, r3, r0
   db0e4:	fb00 3012 	mls	r0, r0, r2, r3
   db0e8:	6823      	ldr	r3, [r4, #0]
   db0ea:	1a89      	subs	r1, r1, r2
   db0ec:	68a2      	ldr	r2, [r4, #8]
   db0ee:	6061      	str	r1, [r4, #4]
   db0f0:	1a1b      	subs	r3, r3, r0
   db0f2:	1b92      	subs	r2, r2, r6
   db0f4:	2b3b      	cmp	r3, #59	; 0x3b
   db0f6:	6023      	str	r3, [r4, #0]
   db0f8:	60a2      	str	r2, [r4, #8]
   db0fa:	dd03      	ble.n	db104 <localtime_r+0xd8>
   db0fc:	3101      	adds	r1, #1
   db0fe:	6061      	str	r1, [r4, #4]
   db100:	3b3c      	subs	r3, #60	; 0x3c
   db102:	e004      	b.n	db10e <localtime_r+0xe2>
   db104:	2b00      	cmp	r3, #0
   db106:	da03      	bge.n	db110 <localtime_r+0xe4>
   db108:	3901      	subs	r1, #1
   db10a:	6061      	str	r1, [r4, #4]
   db10c:	333c      	adds	r3, #60	; 0x3c
   db10e:	6023      	str	r3, [r4, #0]
   db110:	6863      	ldr	r3, [r4, #4]
   db112:	2b3b      	cmp	r3, #59	; 0x3b
   db114:	dd03      	ble.n	db11e <localtime_r+0xf2>
   db116:	3201      	adds	r2, #1
   db118:	60a2      	str	r2, [r4, #8]
   db11a:	3b3c      	subs	r3, #60	; 0x3c
   db11c:	e004      	b.n	db128 <localtime_r+0xfc>
   db11e:	2b00      	cmp	r3, #0
   db120:	da03      	bge.n	db12a <localtime_r+0xfe>
   db122:	3a01      	subs	r2, #1
   db124:	60a2      	str	r2, [r4, #8]
   db126:	333c      	adds	r3, #60	; 0x3c
   db128:	6063      	str	r3, [r4, #4]
   db12a:	68a3      	ldr	r3, [r4, #8]
   db12c:	2b17      	cmp	r3, #23
   db12e:	dd22      	ble.n	db176 <localtime_r+0x14a>
   db130:	69e2      	ldr	r2, [r4, #28]
   db132:	3201      	adds	r2, #1
   db134:	61e2      	str	r2, [r4, #28]
   db136:	69a2      	ldr	r2, [r4, #24]
   db138:	3201      	adds	r2, #1
   db13a:	2a06      	cmp	r2, #6
   db13c:	bfc8      	it	gt
   db13e:	2200      	movgt	r2, #0
   db140:	61a2      	str	r2, [r4, #24]
   db142:	68e2      	ldr	r2, [r4, #12]
   db144:	3b18      	subs	r3, #24
   db146:	3201      	adds	r2, #1
   db148:	60a3      	str	r3, [r4, #8]
   db14a:	6923      	ldr	r3, [r4, #16]
   db14c:	60e2      	str	r2, [r4, #12]
   db14e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   db152:	428a      	cmp	r2, r1
   db154:	dd46      	ble.n	db1e4 <localtime_r+0x1b8>
   db156:	3301      	adds	r3, #1
   db158:	2b0c      	cmp	r3, #12
   db15a:	bf0c      	ite	eq
   db15c:	6963      	ldreq	r3, [r4, #20]
   db15e:	6123      	strne	r3, [r4, #16]
   db160:	eba2 0201 	sub.w	r2, r2, r1
   db164:	60e2      	str	r2, [r4, #12]
   db166:	bf01      	itttt	eq
   db168:	3301      	addeq	r3, #1
   db16a:	2200      	moveq	r2, #0
   db16c:	6122      	streq	r2, [r4, #16]
   db16e:	6163      	streq	r3, [r4, #20]
   db170:	bf08      	it	eq
   db172:	61e2      	streq	r2, [r4, #28]
   db174:	e036      	b.n	db1e4 <localtime_r+0x1b8>
   db176:	2b00      	cmp	r3, #0
   db178:	da34      	bge.n	db1e4 <localtime_r+0x1b8>
   db17a:	69e2      	ldr	r2, [r4, #28]
   db17c:	3a01      	subs	r2, #1
   db17e:	61e2      	str	r2, [r4, #28]
   db180:	69a2      	ldr	r2, [r4, #24]
   db182:	3a01      	subs	r2, #1
   db184:	bf48      	it	mi
   db186:	2206      	movmi	r2, #6
   db188:	61a2      	str	r2, [r4, #24]
   db18a:	68e2      	ldr	r2, [r4, #12]
   db18c:	3318      	adds	r3, #24
   db18e:	3a01      	subs	r2, #1
   db190:	60e2      	str	r2, [r4, #12]
   db192:	60a3      	str	r3, [r4, #8]
   db194:	bb32      	cbnz	r2, db1e4 <localtime_r+0x1b8>
   db196:	6923      	ldr	r3, [r4, #16]
   db198:	3b01      	subs	r3, #1
   db19a:	d401      	bmi.n	db1a0 <localtime_r+0x174>
   db19c:	6123      	str	r3, [r4, #16]
   db19e:	e01d      	b.n	db1dc <localtime_r+0x1b0>
   db1a0:	230b      	movs	r3, #11
   db1a2:	6123      	str	r3, [r4, #16]
   db1a4:	6963      	ldr	r3, [r4, #20]
   db1a6:	1e5a      	subs	r2, r3, #1
   db1a8:	f012 0f03 	tst.w	r2, #3
   db1ac:	6162      	str	r2, [r4, #20]
   db1ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db1b2:	d105      	bne.n	db1c0 <localtime_r+0x194>
   db1b4:	2164      	movs	r1, #100	; 0x64
   db1b6:	fb93 f2f1 	sdiv	r2, r3, r1
   db1ba:	fb01 3212 	mls	r2, r1, r2, r3
   db1be:	b94a      	cbnz	r2, db1d4 <localtime_r+0x1a8>
   db1c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db1c4:	fb93 f2f1 	sdiv	r2, r3, r1
   db1c8:	fb01 3312 	mls	r3, r1, r2, r3
   db1cc:	fab3 f383 	clz	r3, r3
   db1d0:	095b      	lsrs	r3, r3, #5
   db1d2:	e000      	b.n	db1d6 <localtime_r+0x1aa>
   db1d4:	2301      	movs	r3, #1
   db1d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   db1da:	61e3      	str	r3, [r4, #28]
   db1dc:	6923      	ldr	r3, [r4, #16]
   db1de:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   db1e2:	60e3      	str	r3, [r4, #12]
   db1e4:	f001 f9ef 	bl	dc5c6 <__tz_unlock>
   db1e8:	4620      	mov	r0, r4
   db1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db1ee:	bf00      	nop
   db1f0:	000ddb38 	.word	0x000ddb38
   db1f4:	2003e7e4 	.word	0x2003e7e4

000db1f8 <memcpy>:
   db1f8:	b510      	push	{r4, lr}
   db1fa:	1e43      	subs	r3, r0, #1
   db1fc:	440a      	add	r2, r1
   db1fe:	4291      	cmp	r1, r2
   db200:	d004      	beq.n	db20c <memcpy+0x14>
   db202:	f811 4b01 	ldrb.w	r4, [r1], #1
   db206:	f803 4f01 	strb.w	r4, [r3, #1]!
   db20a:	e7f8      	b.n	db1fe <memcpy+0x6>
   db20c:	bd10      	pop	{r4, pc}

000db20e <memmove>:
   db20e:	4288      	cmp	r0, r1
   db210:	b510      	push	{r4, lr}
   db212:	eb01 0302 	add.w	r3, r1, r2
   db216:	d801      	bhi.n	db21c <memmove+0xe>
   db218:	1e42      	subs	r2, r0, #1
   db21a:	e00b      	b.n	db234 <memmove+0x26>
   db21c:	4298      	cmp	r0, r3
   db21e:	d2fb      	bcs.n	db218 <memmove+0xa>
   db220:	1881      	adds	r1, r0, r2
   db222:	1ad2      	subs	r2, r2, r3
   db224:	42d3      	cmn	r3, r2
   db226:	d004      	beq.n	db232 <memmove+0x24>
   db228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db22c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   db230:	e7f8      	b.n	db224 <memmove+0x16>
   db232:	bd10      	pop	{r4, pc}
   db234:	4299      	cmp	r1, r3
   db236:	d004      	beq.n	db242 <memmove+0x34>
   db238:	f811 4b01 	ldrb.w	r4, [r1], #1
   db23c:	f802 4f01 	strb.w	r4, [r2, #1]!
   db240:	e7f8      	b.n	db234 <memmove+0x26>
   db242:	bd10      	pop	{r4, pc}

000db244 <memset>:
   db244:	4402      	add	r2, r0
   db246:	4603      	mov	r3, r0
   db248:	4293      	cmp	r3, r2
   db24a:	d002      	beq.n	db252 <memset+0xe>
   db24c:	f803 1b01 	strb.w	r1, [r3], #1
   db250:	e7fa      	b.n	db248 <memset+0x4>
   db252:	4770      	bx	lr

000db254 <validate_structure>:
   db254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db256:	6801      	ldr	r1, [r0, #0]
   db258:	293b      	cmp	r1, #59	; 0x3b
   db25a:	4604      	mov	r4, r0
   db25c:	d911      	bls.n	db282 <validate_structure+0x2e>
   db25e:	223c      	movs	r2, #60	; 0x3c
   db260:	4668      	mov	r0, sp
   db262:	f001 fb3b 	bl	dc8dc <div>
   db266:	9a01      	ldr	r2, [sp, #4]
   db268:	6863      	ldr	r3, [r4, #4]
   db26a:	9900      	ldr	r1, [sp, #0]
   db26c:	2a00      	cmp	r2, #0
   db26e:	440b      	add	r3, r1
   db270:	6063      	str	r3, [r4, #4]
   db272:	bfbb      	ittet	lt
   db274:	323c      	addlt	r2, #60	; 0x3c
   db276:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db27a:	6022      	strge	r2, [r4, #0]
   db27c:	6022      	strlt	r2, [r4, #0]
   db27e:	bfb8      	it	lt
   db280:	6063      	strlt	r3, [r4, #4]
   db282:	6861      	ldr	r1, [r4, #4]
   db284:	293b      	cmp	r1, #59	; 0x3b
   db286:	d911      	bls.n	db2ac <validate_structure+0x58>
   db288:	223c      	movs	r2, #60	; 0x3c
   db28a:	4668      	mov	r0, sp
   db28c:	f001 fb26 	bl	dc8dc <div>
   db290:	9a01      	ldr	r2, [sp, #4]
   db292:	68a1      	ldr	r1, [r4, #8]
   db294:	9b00      	ldr	r3, [sp, #0]
   db296:	2a00      	cmp	r2, #0
   db298:	440b      	add	r3, r1
   db29a:	60a3      	str	r3, [r4, #8]
   db29c:	bfbb      	ittet	lt
   db29e:	323c      	addlt	r2, #60	; 0x3c
   db2a0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db2a4:	6062      	strge	r2, [r4, #4]
   db2a6:	6062      	strlt	r2, [r4, #4]
   db2a8:	bfb8      	it	lt
   db2aa:	60a3      	strlt	r3, [r4, #8]
   db2ac:	68a1      	ldr	r1, [r4, #8]
   db2ae:	2917      	cmp	r1, #23
   db2b0:	d911      	bls.n	db2d6 <validate_structure+0x82>
   db2b2:	2218      	movs	r2, #24
   db2b4:	4668      	mov	r0, sp
   db2b6:	f001 fb11 	bl	dc8dc <div>
   db2ba:	9a01      	ldr	r2, [sp, #4]
   db2bc:	68e1      	ldr	r1, [r4, #12]
   db2be:	9b00      	ldr	r3, [sp, #0]
   db2c0:	2a00      	cmp	r2, #0
   db2c2:	440b      	add	r3, r1
   db2c4:	60e3      	str	r3, [r4, #12]
   db2c6:	bfbb      	ittet	lt
   db2c8:	3218      	addlt	r2, #24
   db2ca:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db2ce:	60a2      	strge	r2, [r4, #8]
   db2d0:	60a2      	strlt	r2, [r4, #8]
   db2d2:	bfb8      	it	lt
   db2d4:	60e3      	strlt	r3, [r4, #12]
   db2d6:	6921      	ldr	r1, [r4, #16]
   db2d8:	290b      	cmp	r1, #11
   db2da:	d911      	bls.n	db300 <validate_structure+0xac>
   db2dc:	220c      	movs	r2, #12
   db2de:	4668      	mov	r0, sp
   db2e0:	f001 fafc 	bl	dc8dc <div>
   db2e4:	9a01      	ldr	r2, [sp, #4]
   db2e6:	6961      	ldr	r1, [r4, #20]
   db2e8:	9b00      	ldr	r3, [sp, #0]
   db2ea:	2a00      	cmp	r2, #0
   db2ec:	440b      	add	r3, r1
   db2ee:	6163      	str	r3, [r4, #20]
   db2f0:	bfbb      	ittet	lt
   db2f2:	320c      	addlt	r2, #12
   db2f4:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   db2f8:	6122      	strge	r2, [r4, #16]
   db2fa:	6122      	strlt	r2, [r4, #16]
   db2fc:	bfb8      	it	lt
   db2fe:	6163      	strlt	r3, [r4, #20]
   db300:	6963      	ldr	r3, [r4, #20]
   db302:	0799      	lsls	r1, r3, #30
   db304:	d112      	bne.n	db32c <validate_structure+0xd8>
   db306:	2164      	movs	r1, #100	; 0x64
   db308:	fb93 f2f1 	sdiv	r2, r3, r1
   db30c:	fb01 3212 	mls	r2, r1, r2, r3
   db310:	b972      	cbnz	r2, db330 <validate_structure+0xdc>
   db312:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   db316:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db31a:	fb93 f2f1 	sdiv	r2, r3, r1
   db31e:	fb01 3312 	mls	r3, r1, r2, r3
   db322:	2b00      	cmp	r3, #0
   db324:	bf14      	ite	ne
   db326:	231c      	movne	r3, #28
   db328:	231d      	moveq	r3, #29
   db32a:	e002      	b.n	db332 <validate_structure+0xde>
   db32c:	231c      	movs	r3, #28
   db32e:	e000      	b.n	db332 <validate_structure+0xde>
   db330:	231d      	movs	r3, #29
   db332:	68e2      	ldr	r2, [r4, #12]
   db334:	2a00      	cmp	r2, #0
   db336:	dd06      	ble.n	db346 <validate_structure+0xf2>
   db338:	4f33      	ldr	r7, [pc, #204]	; (db408 <validate_structure+0x1b4>)
   db33a:	f04f 0e00 	mov.w	lr, #0
   db33e:	2564      	movs	r5, #100	; 0x64
   db340:	f44f 76c8 	mov.w	r6, #400	; 0x190
   db344:	e039      	b.n	db3ba <validate_structure+0x166>
   db346:	4f30      	ldr	r7, [pc, #192]	; (db408 <validate_structure+0x1b4>)
   db348:	260b      	movs	r6, #11
   db34a:	2064      	movs	r0, #100	; 0x64
   db34c:	f44f 75c8 	mov.w	r5, #400	; 0x190
   db350:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   db354:	f1be 0f00 	cmp.w	lr, #0
   db358:	dc53      	bgt.n	db402 <validate_structure+0x1ae>
   db35a:	6921      	ldr	r1, [r4, #16]
   db35c:	3901      	subs	r1, #1
   db35e:	6121      	str	r1, [r4, #16]
   db360:	3101      	adds	r1, #1
   db362:	d118      	bne.n	db396 <validate_structure+0x142>
   db364:	6963      	ldr	r3, [r4, #20]
   db366:	6126      	str	r6, [r4, #16]
   db368:	1e59      	subs	r1, r3, #1
   db36a:	078a      	lsls	r2, r1, #30
   db36c:	6161      	str	r1, [r4, #20]
   db36e:	d10f      	bne.n	db390 <validate_structure+0x13c>
   db370:	fb91 f2f0 	sdiv	r2, r1, r0
   db374:	fb00 1112 	mls	r1, r0, r2, r1
   db378:	b961      	cbnz	r1, db394 <validate_structure+0x140>
   db37a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   db37e:	fb93 f2f5 	sdiv	r2, r3, r5
   db382:	fb05 3312 	mls	r3, r5, r2, r3
   db386:	2b00      	cmp	r3, #0
   db388:	bf14      	ite	ne
   db38a:	231c      	movne	r3, #28
   db38c:	231d      	moveq	r3, #29
   db38e:	e002      	b.n	db396 <validate_structure+0x142>
   db390:	231c      	movs	r3, #28
   db392:	e000      	b.n	db396 <validate_structure+0x142>
   db394:	231d      	movs	r3, #29
   db396:	6922      	ldr	r2, [r4, #16]
   db398:	2a01      	cmp	r2, #1
   db39a:	bf14      	ite	ne
   db39c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   db3a0:	461a      	moveq	r2, r3
   db3a2:	4472      	add	r2, lr
   db3a4:	60e2      	str	r2, [r4, #12]
   db3a6:	e7d3      	b.n	db350 <validate_structure+0xfc>
   db3a8:	428b      	cmp	r3, r1
   db3aa:	da2a      	bge.n	db402 <validate_structure+0x1ae>
   db3ac:	4618      	mov	r0, r3
   db3ae:	3201      	adds	r2, #1
   db3b0:	1a09      	subs	r1, r1, r0
   db3b2:	2a0c      	cmp	r2, #12
   db3b4:	60e1      	str	r1, [r4, #12]
   db3b6:	6122      	str	r2, [r4, #16]
   db3b8:	d008      	beq.n	db3cc <validate_structure+0x178>
   db3ba:	6922      	ldr	r2, [r4, #16]
   db3bc:	68e1      	ldr	r1, [r4, #12]
   db3be:	2a01      	cmp	r2, #1
   db3c0:	d0f2      	beq.n	db3a8 <validate_structure+0x154>
   db3c2:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   db3c6:	4281      	cmp	r1, r0
   db3c8:	dcf1      	bgt.n	db3ae <validate_structure+0x15a>
   db3ca:	e01a      	b.n	db402 <validate_structure+0x1ae>
   db3cc:	6963      	ldr	r3, [r4, #20]
   db3ce:	f8c4 e010 	str.w	lr, [r4, #16]
   db3d2:	1c5a      	adds	r2, r3, #1
   db3d4:	0791      	lsls	r1, r2, #30
   db3d6:	6162      	str	r2, [r4, #20]
   db3d8:	d10f      	bne.n	db3fa <validate_structure+0x1a6>
   db3da:	fb92 f1f5 	sdiv	r1, r2, r5
   db3de:	fb05 2211 	mls	r2, r5, r1, r2
   db3e2:	b962      	cbnz	r2, db3fe <validate_structure+0x1aa>
   db3e4:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   db3e8:	fb93 f2f6 	sdiv	r2, r3, r6
   db3ec:	fb06 3312 	mls	r3, r6, r2, r3
   db3f0:	2b00      	cmp	r3, #0
   db3f2:	bf14      	ite	ne
   db3f4:	231c      	movne	r3, #28
   db3f6:	231d      	moveq	r3, #29
   db3f8:	e7df      	b.n	db3ba <validate_structure+0x166>
   db3fa:	231c      	movs	r3, #28
   db3fc:	e7dd      	b.n	db3ba <validate_structure+0x166>
   db3fe:	231d      	movs	r3, #29
   db400:	e7db      	b.n	db3ba <validate_structure+0x166>
   db402:	b003      	add	sp, #12
   db404:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db406:	bf00      	nop
   db408:	000ddb08 	.word	0x000ddb08

000db40c <mktime>:
   db40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db410:	4605      	mov	r5, r0
   db412:	f001 fabb 	bl	dc98c <__gettzinfo>
   db416:	4681      	mov	r9, r0
   db418:	4628      	mov	r0, r5
   db41a:	f7ff ff1b 	bl	db254 <validate_structure>
   db41e:	e895 000c 	ldmia.w	r5, {r2, r3}
   db422:	213c      	movs	r1, #60	; 0x3c
   db424:	fb01 2303 	mla	r3, r1, r3, r2
   db428:	68aa      	ldr	r2, [r5, #8]
   db42a:	68ec      	ldr	r4, [r5, #12]
   db42c:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   db430:	fb08 3102 	mla	r1, r8, r2, r3
   db434:	692b      	ldr	r3, [r5, #16]
   db436:	4aab      	ldr	r2, [pc, #684]	; (db6e4 <mktime+0x2d8>)
   db438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   db43c:	3c01      	subs	r4, #1
   db43e:	2b01      	cmp	r3, #1
   db440:	4414      	add	r4, r2
   db442:	696b      	ldr	r3, [r5, #20]
   db444:	dd11      	ble.n	db46a <mktime+0x5e>
   db446:	079e      	lsls	r6, r3, #30
   db448:	d10f      	bne.n	db46a <mktime+0x5e>
   db44a:	2064      	movs	r0, #100	; 0x64
   db44c:	fb93 f2f0 	sdiv	r2, r3, r0
   db450:	fb00 3212 	mls	r2, r0, r2, r3
   db454:	b942      	cbnz	r2, db468 <mktime+0x5c>
   db456:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   db45a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db45e:	fb96 f0f2 	sdiv	r0, r6, r2
   db462:	fb02 6210 	mls	r2, r2, r0, r6
   db466:	b902      	cbnz	r2, db46a <mktime+0x5e>
   db468:	3401      	adds	r4, #1
   db46a:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   db46e:	3210      	adds	r2, #16
   db470:	f644 6020 	movw	r0, #20000	; 0x4e20
   db474:	4282      	cmp	r2, r0
   db476:	61ec      	str	r4, [r5, #28]
   db478:	461f      	mov	r7, r3
   db47a:	f200 812e 	bhi.w	db6da <mktime+0x2ce>
   db47e:	2b46      	cmp	r3, #70	; 0x46
   db480:	dd22      	ble.n	db4c8 <mktime+0xbc>
   db482:	2246      	movs	r2, #70	; 0x46
   db484:	f240 1c6d 	movw	ip, #365	; 0x16d
   db488:	2664      	movs	r6, #100	; 0x64
   db48a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   db48e:	0790      	lsls	r0, r2, #30
   db490:	d110      	bne.n	db4b4 <mktime+0xa8>
   db492:	fb92 f0f6 	sdiv	r0, r2, r6
   db496:	fb06 2010 	mls	r0, r6, r0, r2
   db49a:	b970      	cbnz	r0, db4ba <mktime+0xae>
   db49c:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   db4a0:	fb98 f0fe 	sdiv	r0, r8, lr
   db4a4:	fb0e 8010 	mls	r0, lr, r0, r8
   db4a8:	2800      	cmp	r0, #0
   db4aa:	bf14      	ite	ne
   db4ac:	4660      	movne	r0, ip
   db4ae:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db4b2:	e004      	b.n	db4be <mktime+0xb2>
   db4b4:	f240 106d 	movw	r0, #365	; 0x16d
   db4b8:	e001      	b.n	db4be <mktime+0xb2>
   db4ba:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db4be:	3201      	adds	r2, #1
   db4c0:	4293      	cmp	r3, r2
   db4c2:	4404      	add	r4, r0
   db4c4:	d1e3      	bne.n	db48e <mktime+0x82>
   db4c6:	e044      	b.n	db552 <mktime+0x146>
   db4c8:	d043      	beq.n	db552 <mktime+0x146>
   db4ca:	2245      	movs	r2, #69	; 0x45
   db4cc:	f240 1e6d 	movw	lr, #365	; 0x16d
   db4d0:	2664      	movs	r6, #100	; 0x64
   db4d2:	f44f 77c8 	mov.w	r7, #400	; 0x190
   db4d6:	429a      	cmp	r2, r3
   db4d8:	dd1a      	ble.n	db510 <mktime+0x104>
   db4da:	0790      	lsls	r0, r2, #30
   db4dc:	d110      	bne.n	db500 <mktime+0xf4>
   db4de:	fb92 f0f6 	sdiv	r0, r2, r6
   db4e2:	fb06 2010 	mls	r0, r6, r0, r2
   db4e6:	b970      	cbnz	r0, db506 <mktime+0xfa>
   db4e8:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   db4ec:	fb9c f0f7 	sdiv	r0, ip, r7
   db4f0:	fb07 c010 	mls	r0, r7, r0, ip
   db4f4:	2800      	cmp	r0, #0
   db4f6:	bf14      	ite	ne
   db4f8:	4670      	movne	r0, lr
   db4fa:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   db4fe:	e004      	b.n	db50a <mktime+0xfe>
   db500:	f240 106d 	movw	r0, #365	; 0x16d
   db504:	e001      	b.n	db50a <mktime+0xfe>
   db506:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   db50a:	1a24      	subs	r4, r4, r0
   db50c:	3a01      	subs	r2, #1
   db50e:	e7e2      	b.n	db4d6 <mktime+0xca>
   db510:	2b45      	cmp	r3, #69	; 0x45
   db512:	bfa8      	it	ge
   db514:	2345      	movge	r3, #69	; 0x45
   db516:	079e      	lsls	r6, r3, #30
   db518:	461f      	mov	r7, r3
   db51a:	d114      	bne.n	db546 <mktime+0x13a>
   db51c:	2264      	movs	r2, #100	; 0x64
   db51e:	fb93 f3f2 	sdiv	r3, r3, r2
   db522:	fb02 7313 	mls	r3, r2, r3, r7
   db526:	b98b      	cbnz	r3, db54c <mktime+0x140>
   db528:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   db52c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   db530:	fb90 f2f3 	sdiv	r2, r0, r3
   db534:	fb03 0312 	mls	r3, r3, r2, r0
   db538:	2b00      	cmp	r3, #0
   db53a:	f240 136d 	movw	r3, #365	; 0x16d
   db53e:	bf08      	it	eq
   db540:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   db544:	e004      	b.n	db550 <mktime+0x144>
   db546:	f240 136d 	movw	r3, #365	; 0x16d
   db54a:	e001      	b.n	db550 <mktime+0x144>
   db54c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   db550:	1ae4      	subs	r4, r4, r3
   db552:	4865      	ldr	r0, [pc, #404]	; (db6e8 <mktime+0x2dc>)
   db554:	fb00 1804 	mla	r8, r0, r4, r1
   db558:	f001 f834 	bl	dc5c4 <__tz_lock>
   db55c:	f001 f834 	bl	dc5c8 <_tzset_unlocked>
   db560:	4b62      	ldr	r3, [pc, #392]	; (db6ec <mktime+0x2e0>)
   db562:	681e      	ldr	r6, [r3, #0]
   db564:	2e00      	cmp	r6, #0
   db566:	f000 80a4 	beq.w	db6b2 <mktime+0x2a6>
   db56a:	6a2b      	ldr	r3, [r5, #32]
   db56c:	6968      	ldr	r0, [r5, #20]
   db56e:	2b01      	cmp	r3, #1
   db570:	bfa8      	it	ge
   db572:	2301      	movge	r3, #1
   db574:	469a      	mov	sl, r3
   db576:	f8d9 3004 	ldr.w	r3, [r9, #4]
   db57a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db57e:	4298      	cmp	r0, r3
   db580:	d10d      	bne.n	db59e <mktime+0x192>
   db582:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   db586:	f8d9 3020 	ldr.w	r3, [r9, #32]
   db58a:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db58e:	f8d9 101c 	ldr.w	r1, [r9, #28]
   db592:	1ad6      	subs	r6, r2, r3
   db594:	45b0      	cmp	r8, r6
   db596:	eba1 0100 	sub.w	r1, r1, r0
   db59a:	da05      	bge.n	db5a8 <mktime+0x19c>
   db59c:	e007      	b.n	db5ae <mktime+0x1a2>
   db59e:	f000 ff69 	bl	dc474 <__tzcalc_limits>
   db5a2:	2800      	cmp	r0, #0
   db5a4:	d1ed      	bne.n	db582 <mktime+0x176>
   db5a6:	e076      	b.n	db696 <mktime+0x28a>
   db5a8:	1a12      	subs	r2, r2, r0
   db5aa:	4590      	cmp	r8, r2
   db5ac:	db73      	blt.n	db696 <mktime+0x28a>
   db5ae:	f8d9 2000 	ldr.w	r2, [r9]
   db5b2:	b112      	cbz	r2, db5ba <mktime+0x1ae>
   db5b4:	4588      	cmp	r8, r1
   db5b6:	db77      	blt.n	db6a8 <mktime+0x29c>
   db5b8:	e001      	b.n	db5be <mktime+0x1b2>
   db5ba:	4588      	cmp	r8, r1
   db5bc:	da07      	bge.n	db5ce <mktime+0x1c2>
   db5be:	45b0      	cmp	r8, r6
   db5c0:	bfac      	ite	ge
   db5c2:	2600      	movge	r6, #0
   db5c4:	2601      	movlt	r6, #1
   db5c6:	f1ba 0f00 	cmp.w	sl, #0
   db5ca:	da04      	bge.n	db5d6 <mktime+0x1ca>
   db5cc:	e064      	b.n	db698 <mktime+0x28c>
   db5ce:	f1ba 0f00 	cmp.w	sl, #0
   db5d2:	db63      	blt.n	db69c <mktime+0x290>
   db5d4:	2601      	movs	r6, #1
   db5d6:	ea8a 0a06 	eor.w	sl, sl, r6
   db5da:	f1ba 0f01 	cmp.w	sl, #1
   db5de:	d15b      	bne.n	db698 <mktime+0x28c>
   db5e0:	1a1b      	subs	r3, r3, r0
   db5e2:	b906      	cbnz	r6, db5e6 <mktime+0x1da>
   db5e4:	425b      	negs	r3, r3
   db5e6:	682a      	ldr	r2, [r5, #0]
   db5e8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   db5ec:	441a      	add	r2, r3
   db5ee:	602a      	str	r2, [r5, #0]
   db5f0:	4628      	mov	r0, r5
   db5f2:	4498      	add	r8, r3
   db5f4:	f7ff fe2e 	bl	db254 <validate_structure>
   db5f8:	68eb      	ldr	r3, [r5, #12]
   db5fa:	ebb3 030a 	subs.w	r3, r3, sl
   db5fe:	d04b      	beq.n	db698 <mktime+0x28c>
   db600:	2b01      	cmp	r3, #1
   db602:	dc03      	bgt.n	db60c <mktime+0x200>
   db604:	1c98      	adds	r0, r3, #2
   db606:	bfd8      	it	le
   db608:	2301      	movle	r3, #1
   db60a:	e001      	b.n	db610 <mktime+0x204>
   db60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db610:	69ea      	ldr	r2, [r5, #28]
   db612:	441c      	add	r4, r3
   db614:	189b      	adds	r3, r3, r2
   db616:	d51d      	bpl.n	db654 <mktime+0x248>
   db618:	1e7b      	subs	r3, r7, #1
   db61a:	0799      	lsls	r1, r3, #30
   db61c:	d114      	bne.n	db648 <mktime+0x23c>
   db61e:	2164      	movs	r1, #100	; 0x64
   db620:	fb93 f2f1 	sdiv	r2, r3, r1
   db624:	fb01 3312 	mls	r3, r1, r2, r3
   db628:	b98b      	cbnz	r3, db64e <mktime+0x242>
   db62a:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   db62e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db632:	fb97 f3f2 	sdiv	r3, r7, r2
   db636:	fb02 7713 	mls	r7, r2, r3, r7
   db63a:	2f00      	cmp	r7, #0
   db63c:	f240 136d 	movw	r3, #365	; 0x16d
   db640:	bf18      	it	ne
   db642:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   db646:	e024      	b.n	db692 <mktime+0x286>
   db648:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   db64c:	e021      	b.n	db692 <mktime+0x286>
   db64e:	f240 136d 	movw	r3, #365	; 0x16d
   db652:	e01e      	b.n	db692 <mktime+0x286>
   db654:	07ba      	lsls	r2, r7, #30
   db656:	d114      	bne.n	db682 <mktime+0x276>
   db658:	2164      	movs	r1, #100	; 0x64
   db65a:	fb97 f2f1 	sdiv	r2, r7, r1
   db65e:	fb01 7212 	mls	r2, r1, r2, r7
   db662:	b98a      	cbnz	r2, db688 <mktime+0x27c>
   db664:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   db668:	f44f 71c8 	mov.w	r1, #400	; 0x190
   db66c:	fb97 f2f1 	sdiv	r2, r7, r1
   db670:	fb01 7712 	mls	r7, r1, r2, r7
   db674:	2f00      	cmp	r7, #0
   db676:	f240 126d 	movw	r2, #365	; 0x16d
   db67a:	bf08      	it	eq
   db67c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   db680:	e004      	b.n	db68c <mktime+0x280>
   db682:	f240 126d 	movw	r2, #365	; 0x16d
   db686:	e001      	b.n	db68c <mktime+0x280>
   db688:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   db68c:	429a      	cmp	r2, r3
   db68e:	bfd8      	it	le
   db690:	1a9b      	suble	r3, r3, r2
   db692:	61eb      	str	r3, [r5, #28]
   db694:	e000      	b.n	db698 <mktime+0x28c>
   db696:	4656      	mov	r6, sl
   db698:	2e01      	cmp	r6, #1
   db69a:	d10a      	bne.n	db6b2 <mktime+0x2a6>
   db69c:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   db6a0:	2601      	movs	r6, #1
   db6a2:	eb08 0700 	add.w	r7, r8, r0
   db6a6:	e008      	b.n	db6ba <mktime+0x2ae>
   db6a8:	f1ba 0f00 	cmp.w	sl, #0
   db6ac:	f04f 0600 	mov.w	r6, #0
   db6b0:	da91      	bge.n	db5d6 <mktime+0x1ca>
   db6b2:	f8d9 0020 	ldr.w	r0, [r9, #32]
   db6b6:	eb08 0700 	add.w	r7, r8, r0
   db6ba:	f000 ff84 	bl	dc5c6 <__tz_unlock>
   db6be:	3404      	adds	r4, #4
   db6c0:	2307      	movs	r3, #7
   db6c2:	fb94 f3f3 	sdiv	r3, r4, r3
   db6c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db6ca:	1ae4      	subs	r4, r4, r3
   db6cc:	bf48      	it	mi
   db6ce:	3407      	addmi	r4, #7
   db6d0:	622e      	str	r6, [r5, #32]
   db6d2:	61ac      	str	r4, [r5, #24]
   db6d4:	4638      	mov	r0, r7
   db6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db6e2:	bf00      	nop
   db6e4:	000ddad8 	.word	0x000ddad8
   db6e8:	00015180 	.word	0x00015180
   db6ec:	2003e7e4 	.word	0x2003e7e4

000db6f0 <srand>:
   db6f0:	b538      	push	{r3, r4, r5, lr}
   db6f2:	4b12      	ldr	r3, [pc, #72]	; (db73c <srand+0x4c>)
   db6f4:	681c      	ldr	r4, [r3, #0]
   db6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db6f8:	4605      	mov	r5, r0
   db6fa:	b9d3      	cbnz	r3, db732 <srand+0x42>
   db6fc:	2018      	movs	r0, #24
   db6fe:	f7fc fdf3 	bl	d82e8 <malloc>
   db702:	f243 330e 	movw	r3, #13070	; 0x330e
   db706:	63a0      	str	r0, [r4, #56]	; 0x38
   db708:	8003      	strh	r3, [r0, #0]
   db70a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   db70e:	8043      	strh	r3, [r0, #2]
   db710:	f241 2334 	movw	r3, #4660	; 0x1234
   db714:	8083      	strh	r3, [r0, #4]
   db716:	f24e 636d 	movw	r3, #58989	; 0xe66d
   db71a:	80c3      	strh	r3, [r0, #6]
   db71c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   db720:	8103      	strh	r3, [r0, #8]
   db722:	2305      	movs	r3, #5
   db724:	8143      	strh	r3, [r0, #10]
   db726:	230b      	movs	r3, #11
   db728:	8183      	strh	r3, [r0, #12]
   db72a:	2201      	movs	r2, #1
   db72c:	2300      	movs	r3, #0
   db72e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db734:	2200      	movs	r2, #0
   db736:	611d      	str	r5, [r3, #16]
   db738:	615a      	str	r2, [r3, #20]
   db73a:	bd38      	pop	{r3, r4, r5, pc}
   db73c:	2003de58 	.word	0x2003de58

000db740 <strcmp>:
   db740:	f810 2b01 	ldrb.w	r2, [r0], #1
   db744:	f811 3b01 	ldrb.w	r3, [r1], #1
   db748:	2a01      	cmp	r2, #1
   db74a:	bf28      	it	cs
   db74c:	429a      	cmpcs	r2, r3
   db74e:	d0f7      	beq.n	db740 <strcmp>
   db750:	1ad0      	subs	r0, r2, r3
   db752:	4770      	bx	lr

000db754 <strcpy>:
   db754:	4603      	mov	r3, r0
   db756:	f811 2b01 	ldrb.w	r2, [r1], #1
   db75a:	f803 2b01 	strb.w	r2, [r3], #1
   db75e:	2a00      	cmp	r2, #0
   db760:	d1f9      	bne.n	db756 <strcpy+0x2>
   db762:	4770      	bx	lr

000db764 <strdup>:
   db764:	4b02      	ldr	r3, [pc, #8]	; (db770 <strdup+0xc>)
   db766:	4601      	mov	r1, r0
   db768:	6818      	ldr	r0, [r3, #0]
   db76a:	f000 b803 	b.w	db774 <_strdup_r>
   db76e:	bf00      	nop
   db770:	2003de58 	.word	0x2003de58

000db774 <_strdup_r>:
   db774:	b570      	push	{r4, r5, r6, lr}
   db776:	4606      	mov	r6, r0
   db778:	4608      	mov	r0, r1
   db77a:	460c      	mov	r4, r1
   db77c:	f000 fd22 	bl	dc1c4 <strlen>
   db780:	1c45      	adds	r5, r0, #1
   db782:	4629      	mov	r1, r5
   db784:	4630      	mov	r0, r6
   db786:	f7fc fdf7 	bl	d8378 <_malloc_r>
   db78a:	4606      	mov	r6, r0
   db78c:	b118      	cbz	r0, db796 <_strdup_r+0x22>
   db78e:	462a      	mov	r2, r5
   db790:	4621      	mov	r1, r4
   db792:	f7ff fd31 	bl	db1f8 <memcpy>
   db796:	4630      	mov	r0, r6
   db798:	bd70      	pop	{r4, r5, r6, pc}

000db79a <iso_year_adjust>:
   db79a:	6941      	ldr	r1, [r0, #20]
   db79c:	078b      	lsls	r3, r1, #30
   db79e:	b510      	push	{r4, lr}
   db7a0:	d10c      	bne.n	db7bc <iso_year_adjust+0x22>
   db7a2:	2900      	cmp	r1, #0
   db7a4:	f240 736c 	movw	r3, #1900	; 0x76c
   db7a8:	bfa8      	it	ge
   db7aa:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db7ae:	440b      	add	r3, r1
   db7b0:	2464      	movs	r4, #100	; 0x64
   db7b2:	fb93 f2f4 	sdiv	r2, r3, r4
   db7b6:	fb04 3312 	mls	r3, r4, r2, r3
   db7ba:	b983      	cbnz	r3, db7de <iso_year_adjust+0x44>
   db7bc:	2900      	cmp	r1, #0
   db7be:	f240 736c 	movw	r3, #1900	; 0x76c
   db7c2:	bfa8      	it	ge
   db7c4:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   db7c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db7cc:	440b      	add	r3, r1
   db7ce:	fb93 f1f2 	sdiv	r1, r3, r2
   db7d2:	fb02 3311 	mls	r3, r2, r1, r3
   db7d6:	fab3 f283 	clz	r2, r3
   db7da:	0952      	lsrs	r2, r2, #5
   db7dc:	e000      	b.n	db7e0 <iso_year_adjust+0x46>
   db7de:	2201      	movs	r2, #1
   db7e0:	6983      	ldr	r3, [r0, #24]
   db7e2:	69c1      	ldr	r1, [r0, #28]
   db7e4:	005b      	lsls	r3, r3, #1
   db7e6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   db7ea:	4413      	add	r3, r2
   db7ec:	2b21      	cmp	r3, #33	; 0x21
   db7ee:	dc0e      	bgt.n	db80e <iso_year_adjust+0x74>
   db7f0:	2b20      	cmp	r3, #32
   db7f2:	da2f      	bge.n	db854 <iso_year_adjust+0xba>
   db7f4:	2b0d      	cmp	r3, #13
   db7f6:	dc02      	bgt.n	db7fe <iso_year_adjust+0x64>
   db7f8:	2b0a      	cmp	r3, #10
   db7fa:	db05      	blt.n	db808 <iso_year_adjust+0x6e>
   db7fc:	e02a      	b.n	db854 <iso_year_adjust+0xba>
   db7fe:	2b10      	cmp	r3, #16
   db800:	db26      	blt.n	db850 <iso_year_adjust+0xb6>
   db802:	2b11      	cmp	r3, #17
   db804:	dd26      	ble.n	db854 <iso_year_adjust+0xba>
   db806:	3b1c      	subs	r3, #28
   db808:	2b01      	cmp	r3, #1
   db80a:	d923      	bls.n	db854 <iso_year_adjust+0xba>
   db80c:	e020      	b.n	db850 <iso_year_adjust+0xb6>
   db80e:	f241 62c6 	movw	r2, #5830	; 0x16c6
   db812:	4293      	cmp	r3, r2
   db814:	dc0e      	bgt.n	db834 <iso_year_adjust+0x9a>
   db816:	f241 62c2 	movw	r2, #5826	; 0x16c2
   db81a:	4293      	cmp	r3, r2
   db81c:	da16      	bge.n	db84c <iso_year_adjust+0xb2>
   db81e:	f241 62a2 	movw	r2, #5794	; 0x16a2
   db822:	4293      	cmp	r3, r2
   db824:	d012      	beq.n	db84c <iso_year_adjust+0xb2>
   db826:	db13      	blt.n	db850 <iso_year_adjust+0xb6>
   db828:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   db82c:	3b12      	subs	r3, #18
   db82e:	2b02      	cmp	r3, #2
   db830:	d90c      	bls.n	db84c <iso_year_adjust+0xb2>
   db832:	e00d      	b.n	db850 <iso_year_adjust+0xb6>
   db834:	f241 62d5 	movw	r2, #5845	; 0x16d5
   db838:	4293      	cmp	r3, r2
   db83a:	d007      	beq.n	db84c <iso_year_adjust+0xb2>
   db83c:	f241 62d7 	movw	r2, #5847	; 0x16d7
   db840:	4293      	cmp	r3, r2
   db842:	d003      	beq.n	db84c <iso_year_adjust+0xb2>
   db844:	f241 62d3 	movw	r2, #5843	; 0x16d3
   db848:	4293      	cmp	r3, r2
   db84a:	d101      	bne.n	db850 <iso_year_adjust+0xb6>
   db84c:	2001      	movs	r0, #1
   db84e:	bd10      	pop	{r4, pc}
   db850:	2000      	movs	r0, #0
   db852:	bd10      	pop	{r4, pc}
   db854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db858:	bd10      	pop	{r4, pc}
	...

000db85c <strftime>:
   db85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db860:	b093      	sub	sp, #76	; 0x4c
   db862:	460e      	mov	r6, r1
   db864:	461d      	mov	r5, r3
   db866:	4607      	mov	r7, r0
   db868:	4691      	mov	r9, r2
   db86a:	f000 fdf3 	bl	dc454 <__get_current_time_locale>
   db86e:	2300      	movs	r3, #0
   db870:	9306      	str	r3, [sp, #24]
   db872:	461c      	mov	r4, r3
   db874:	1e73      	subs	r3, r6, #1
   db876:	9003      	str	r0, [sp, #12]
   db878:	9302      	str	r3, [sp, #8]
   db87a:	f899 3000 	ldrb.w	r3, [r9]
   db87e:	2b00      	cmp	r3, #0
   db880:	f000 8492 	beq.w	dc1a8 <strftime+0x94c>
   db884:	2b25      	cmp	r3, #37	; 0x25
   db886:	d008      	beq.n	db89a <strftime+0x3e>
   db888:	9a02      	ldr	r2, [sp, #8]
   db88a:	4294      	cmp	r4, r2
   db88c:	f080 8490 	bcs.w	dc1b0 <strftime+0x954>
   db890:	553b      	strb	r3, [r7, r4]
   db892:	f109 0901 	add.w	r9, r9, #1
   db896:	3401      	adds	r4, #1
   db898:	e7ef      	b.n	db87a <strftime+0x1e>
   db89a:	f899 a001 	ldrb.w	sl, [r9, #1]
   db89e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   db8a2:	d007      	beq.n	db8b4 <strftime+0x58>
   db8a4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db8a8:	d004      	beq.n	db8b4 <strftime+0x58>
   db8aa:	f109 0901 	add.w	r9, r9, #1
   db8ae:	f04f 0a00 	mov.w	sl, #0
   db8b2:	e001      	b.n	db8b8 <strftime+0x5c>
   db8b4:	f109 0902 	add.w	r9, r9, #2
   db8b8:	f899 3000 	ldrb.w	r3, [r9]
   db8bc:	3b31      	subs	r3, #49	; 0x31
   db8be:	2b08      	cmp	r3, #8
   db8c0:	d808      	bhi.n	db8d4 <strftime+0x78>
   db8c2:	4648      	mov	r0, r9
   db8c4:	220a      	movs	r2, #10
   db8c6:	a90a      	add	r1, sp, #40	; 0x28
   db8c8:	f000 fdba 	bl	dc440 <strtoul>
   db8cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   db8d0:	4680      	mov	r8, r0
   db8d2:	e001      	b.n	db8d8 <strftime+0x7c>
   db8d4:	f04f 0800 	mov.w	r8, #0
   db8d8:	f899 3000 	ldrb.w	r3, [r9]
   db8dc:	2b45      	cmp	r3, #69	; 0x45
   db8de:	d001      	beq.n	db8e4 <strftime+0x88>
   db8e0:	2b4f      	cmp	r3, #79	; 0x4f
   db8e2:	d101      	bne.n	db8e8 <strftime+0x8c>
   db8e4:	f109 0901 	add.w	r9, r9, #1
   db8e8:	f899 0000 	ldrb.w	r0, [r9]
   db8ec:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   db8f0:	2b55      	cmp	r3, #85	; 0x55
   db8f2:	f200 845d 	bhi.w	dc1b0 <strftime+0x954>
   db8f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   db8fa:	044a      	.short	0x044a
   db8fc:	045b045b 	.word	0x045b045b
   db900:	045b045b 	.word	0x045b045b
   db904:	045b045b 	.word	0x045b045b
   db908:	045b045b 	.word	0x045b045b
   db90c:	045b045b 	.word	0x045b045b
   db910:	045b045b 	.word	0x045b045b
   db914:	045b045b 	.word	0x045b045b
   db918:	045b045b 	.word	0x045b045b
   db91c:	045b045b 	.word	0x045b045b
   db920:	045b045b 	.word	0x045b045b
   db924:	045b045b 	.word	0x045b045b
   db928:	045b045b 	.word	0x045b045b
   db92c:	045b045b 	.word	0x045b045b
   db930:	006f045b 	.word	0x006f045b
   db934:	00d400a1 	.word	0x00d400a1
   db938:	045b011a 	.word	0x045b011a
   db93c:	01a0013f 	.word	0x01a0013f
   db940:	022d0226 	.word	0x022d0226
   db944:	045b045b 	.word	0x045b045b
   db948:	0260045b 	.word	0x0260045b
   db94c:	045b045b 	.word	0x045b045b
   db950:	045b0268 	.word	0x045b0268
   db954:	031d0297 	.word	0x031d0297
   db958:	033b0325 	.word	0x033b0325
   db95c:	03860343 	.word	0x03860343
   db960:	03a000c6 	.word	0x03a000c6
   db964:	045b041f 	.word	0x045b041f
   db968:	045b045b 	.word	0x045b045b
   db96c:	045b045b 	.word	0x045b045b
   db970:	0056045b 	.word	0x0056045b
   db974:	00ba0089 	.word	0x00ba0089
   db978:	010c010c 	.word	0x010c010c
   db97c:	0171045b 	.word	0x0171045b
   db980:	045b0089 	.word	0x045b0089
   db984:	0226023d 	.word	0x0226023d
   db988:	025d022d 	.word	0x025d022d
   db98c:	045b0262 	.word	0x045b0262
   db990:	045b0268 	.word	0x045b0268
   db994:	029c00be 	.word	0x029c00be
   db998:	032e031f 	.word	0x032e031f
   db99c:	037f045b 	.word	0x037f045b
   db9a0:	039200c2 	.word	0x039200c2
   db9a4:	03e7      	.short	0x03e7
   db9a6:	69ab      	ldr	r3, [r5, #24]
   db9a8:	9a03      	ldr	r2, [sp, #12]
   db9aa:	3318      	adds	r3, #24
   db9ac:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   db9b0:	4640      	mov	r0, r8
   db9b2:	f000 fc07 	bl	dc1c4 <strlen>
   db9b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db9ba:	193b      	adds	r3, r7, r4
   db9bc:	4420      	add	r0, r4
   db9be:	4284      	cmp	r4, r0
   db9c0:	f000 83eb 	beq.w	dc19a <strftime+0x93e>
   db9c4:	9a02      	ldr	r2, [sp, #8]
   db9c6:	4294      	cmp	r4, r2
   db9c8:	f080 83f2 	bcs.w	dc1b0 <strftime+0x954>
   db9cc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db9d0:	f803 2b01 	strb.w	r2, [r3], #1
   db9d4:	3401      	adds	r4, #1
   db9d6:	e7f2      	b.n	db9be <strftime+0x162>
   db9d8:	69ab      	ldr	r3, [r5, #24]
   db9da:	9a03      	ldr	r2, [sp, #12]
   db9dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db9e0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   db9e4:	4640      	mov	r0, r8
   db9e6:	f000 fbed 	bl	dc1c4 <strlen>
   db9ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db9ee:	193b      	adds	r3, r7, r4
   db9f0:	4420      	add	r0, r4
   db9f2:	4284      	cmp	r4, r0
   db9f4:	f000 83d1 	beq.w	dc19a <strftime+0x93e>
   db9f8:	9a02      	ldr	r2, [sp, #8]
   db9fa:	4294      	cmp	r4, r2
   db9fc:	f080 83d8 	bcs.w	dc1b0 <strftime+0x954>
   dba00:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba04:	f803 2b01 	strb.w	r2, [r3], #1
   dba08:	3401      	adds	r4, #1
   dba0a:	e7f2      	b.n	db9f2 <strftime+0x196>
   dba0c:	692b      	ldr	r3, [r5, #16]
   dba0e:	9a03      	ldr	r2, [sp, #12]
   dba10:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dba14:	4640      	mov	r0, r8
   dba16:	f000 fbd5 	bl	dc1c4 <strlen>
   dba1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba1e:	193b      	adds	r3, r7, r4
   dba20:	4420      	add	r0, r4
   dba22:	4284      	cmp	r4, r0
   dba24:	f000 83b9 	beq.w	dc19a <strftime+0x93e>
   dba28:	9a02      	ldr	r2, [sp, #8]
   dba2a:	4294      	cmp	r4, r2
   dba2c:	f080 83c0 	bcs.w	dc1b0 <strftime+0x954>
   dba30:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba34:	f803 2b01 	strb.w	r2, [r3], #1
   dba38:	3401      	adds	r4, #1
   dba3a:	e7f2      	b.n	dba22 <strftime+0x1c6>
   dba3c:	692b      	ldr	r3, [r5, #16]
   dba3e:	9a03      	ldr	r2, [sp, #12]
   dba40:	330c      	adds	r3, #12
   dba42:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dba46:	4640      	mov	r0, r8
   dba48:	f000 fbbc 	bl	dc1c4 <strlen>
   dba4c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dba50:	193b      	adds	r3, r7, r4
   dba52:	4420      	add	r0, r4
   dba54:	4284      	cmp	r4, r0
   dba56:	f000 83a0 	beq.w	dc19a <strftime+0x93e>
   dba5a:	9a02      	ldr	r2, [sp, #8]
   dba5c:	4294      	cmp	r4, r2
   dba5e:	f080 83a7 	bcs.w	dc1b0 <strftime+0x954>
   dba62:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dba66:	f803 2b01 	strb.w	r2, [r3], #1
   dba6a:	3401      	adds	r4, #1
   dba6c:	e7f2      	b.n	dba54 <strftime+0x1f8>
   dba6e:	9b03      	ldr	r3, [sp, #12]
   dba70:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   dba74:	e00a      	b.n	dba8c <strftime+0x230>
   dba76:	9b03      	ldr	r3, [sp, #12]
   dba78:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   dba7c:	e006      	b.n	dba8c <strftime+0x230>
   dba7e:	9b03      	ldr	r3, [sp, #12]
   dba80:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   dba84:	e002      	b.n	dba8c <strftime+0x230>
   dba86:	9b03      	ldr	r3, [sp, #12]
   dba88:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   dba8c:	4640      	mov	r0, r8
   dba8e:	f000 fb99 	bl	dc1c4 <strlen>
   dba92:	f898 3000 	ldrb.w	r3, [r8]
   dba96:	2b00      	cmp	r3, #0
   dba98:	f000 837f 	beq.w	dc19a <strftime+0x93e>
   dba9c:	462b      	mov	r3, r5
   dba9e:	4642      	mov	r2, r8
   dbaa0:	e093      	b.n	dbbca <strftime+0x36e>
   dbaa2:	49b6      	ldr	r1, [pc, #728]	; (dbd7c <strftime+0x520>)
   dbaa4:	f8d5 b014 	ldr.w	fp, [r5, #20]
   dbaa8:	458b      	cmp	fp, r1
   dbaaa:	bfac      	ite	ge
   dbaac:	2100      	movge	r1, #0
   dbaae:	2101      	movlt	r1, #1
   dbab0:	f1bb 0f00 	cmp.w	fp, #0
   dbab4:	db04      	blt.n	dbac0 <strftime+0x264>
   dbab6:	2064      	movs	r0, #100	; 0x64
   dbab8:	fb9b f0f0 	sdiv	r0, fp, r0
   dbabc:	3013      	adds	r0, #19
   dbabe:	e008      	b.n	dbad2 <strftime+0x276>
   dbac0:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dbac4:	9107      	str	r1, [sp, #28]
   dbac6:	f000 ff05 	bl	dc8d4 <abs>
   dbaca:	9907      	ldr	r1, [sp, #28]
   dbacc:	2364      	movs	r3, #100	; 0x64
   dbace:	fb90 f0f3 	sdiv	r0, r0, r3
   dbad2:	f1ba 0f00 	cmp.w	sl, #0
   dbad6:	d008      	beq.n	dbaea <strftime+0x28e>
   dbad8:	2863      	cmp	r0, #99	; 0x63
   dbada:	dd09      	ble.n	dbaf0 <strftime+0x294>
   dbadc:	4ba8      	ldr	r3, [pc, #672]	; (dbd80 <strftime+0x524>)
   dbade:	4aa9      	ldr	r2, [pc, #676]	; (dbd84 <strftime+0x528>)
   dbae0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbae4:	bf18      	it	ne
   dbae6:	4613      	movne	r3, r2
   dbae8:	e003      	b.n	dbaf2 <strftime+0x296>
   dbaea:	4ba6      	ldr	r3, [pc, #664]	; (dbd84 <strftime+0x528>)
   dbaec:	4aa6      	ldr	r2, [pc, #664]	; (dbd88 <strftime+0x52c>)
   dbaee:	e001      	b.n	dbaf4 <strftime+0x298>
   dbaf0:	4ba4      	ldr	r3, [pc, #656]	; (dbd84 <strftime+0x528>)
   dbaf2:	4aa6      	ldr	r2, [pc, #664]	; (dbd8c <strftime+0x530>)
   dbaf4:	9001      	str	r0, [sp, #4]
   dbaf6:	f1b8 0f01 	cmp.w	r8, #1
   dbafa:	bf98      	it	ls
   dbafc:	f04f 0802 	movls.w	r8, #2
   dbb00:	ebc1 0108 	rsb	r1, r1, r8
   dbb04:	9100      	str	r1, [sp, #0]
   dbb06:	489d      	ldr	r0, [pc, #628]	; (dbd7c <strftime+0x520>)
   dbb08:	49a1      	ldr	r1, [pc, #644]	; (dbd90 <strftime+0x534>)
   dbb0a:	4583      	cmp	fp, r0
   dbb0c:	bfb8      	it	lt
   dbb0e:	460b      	movlt	r3, r1
   dbb10:	e21e      	b.n	dbf50 <strftime+0x6f4>
   dbb12:	4aa0      	ldr	r2, [pc, #640]	; (dbd94 <strftime+0x538>)
   dbb14:	49a0      	ldr	r1, [pc, #640]	; (dbd98 <strftime+0x53c>)
   dbb16:	68eb      	ldr	r3, [r5, #12]
   dbb18:	2864      	cmp	r0, #100	; 0x64
   dbb1a:	bf08      	it	eq
   dbb1c:	460a      	moveq	r2, r1
   dbb1e:	1b31      	subs	r1, r6, r4
   dbb20:	1938      	adds	r0, r7, r4
   dbb22:	f7fc fc11 	bl	d8348 <sniprintf>
   dbb26:	2800      	cmp	r0, #0
   dbb28:	f280 8302 	bge.w	dc130 <strftime+0x8d4>
   dbb2c:	e340      	b.n	dc1b0 <strftime+0x954>
   dbb2e:	6968      	ldr	r0, [r5, #20]
   dbb30:	692b      	ldr	r3, [r5, #16]
   dbb32:	2800      	cmp	r0, #0
   dbb34:	f103 0b01 	add.w	fp, r3, #1
   dbb38:	eb07 0804 	add.w	r8, r7, r4
   dbb3c:	ebc4 0a06 	rsb	sl, r4, r6
   dbb40:	68eb      	ldr	r3, [r5, #12]
   dbb42:	db05      	blt.n	dbb50 <strftime+0x2f4>
   dbb44:	2264      	movs	r2, #100	; 0x64
   dbb46:	fb90 f1f2 	sdiv	r1, r0, r2
   dbb4a:	fb02 0011 	mls	r0, r2, r1, r0
   dbb4e:	e00a      	b.n	dbb66 <strftime+0x30a>
   dbb50:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbb54:	9307      	str	r3, [sp, #28]
   dbb56:	f000 febd 	bl	dc8d4 <abs>
   dbb5a:	2264      	movs	r2, #100	; 0x64
   dbb5c:	9b07      	ldr	r3, [sp, #28]
   dbb5e:	fb90 f1f2 	sdiv	r1, r0, r2
   dbb62:	fb01 0012 	mls	r0, r1, r2, r0
   dbb66:	4a8d      	ldr	r2, [pc, #564]	; (dbd9c <strftime+0x540>)
   dbb68:	9001      	str	r0, [sp, #4]
   dbb6a:	9300      	str	r3, [sp, #0]
   dbb6c:	4651      	mov	r1, sl
   dbb6e:	465b      	mov	r3, fp
   dbb70:	4640      	mov	r0, r8
   dbb72:	f7fc fbe9 	bl	d8348 <sniprintf>
   dbb76:	e7d6      	b.n	dbb26 <strftime+0x2ca>
   dbb78:	2325      	movs	r3, #37	; 0x25
   dbb7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dbb7e:	f1ba 0f00 	cmp.w	sl, #0
   dbb82:	d007      	beq.n	dbb94 <strftime+0x338>
   dbb84:	f1b8 0f05 	cmp.w	r8, #5
   dbb88:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dbb8c:	bf98      	it	ls
   dbb8e:	f04f 0806 	movls.w	r8, #6
   dbb92:	e004      	b.n	dbb9e <strftime+0x342>
   dbb94:	232b      	movs	r3, #43	; 0x2b
   dbb96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dbb9a:	f04f 080a 	mov.w	r8, #10
   dbb9e:	f1b8 0306 	subs.w	r3, r8, #6
   dbba2:	d102      	bne.n	dbbaa <strftime+0x34e>
   dbba4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbba8:	e00a      	b.n	dbbc0 <strftime+0x364>
   dbbaa:	4a7d      	ldr	r2, [pc, #500]	; (dbda0 <strftime+0x544>)
   dbbac:	211e      	movs	r1, #30
   dbbae:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dbbb2:	f7fc fbc9 	bl	d8348 <sniprintf>
   dbbb6:	2800      	cmp	r0, #0
   dbbb8:	ddf4      	ble.n	dbba4 <strftime+0x348>
   dbbba:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dbbbe:	4418      	add	r0, r3
   dbbc0:	4978      	ldr	r1, [pc, #480]	; (dbda4 <strftime+0x548>)
   dbbc2:	f7ff fdc7 	bl	db754 <strcpy>
   dbbc6:	462b      	mov	r3, r5
   dbbc8:	aa0a      	add	r2, sp, #40	; 0x28
   dbbca:	1b31      	subs	r1, r6, r4
   dbbcc:	1938      	adds	r0, r7, r4
   dbbce:	f7ff fe45 	bl	db85c <strftime>
   dbbd2:	2800      	cmp	r0, #0
   dbbd4:	f340 82ec 	ble.w	dc1b0 <strftime+0x954>
   dbbd8:	4404      	add	r4, r0
   dbbda:	e2de      	b.n	dc19a <strftime+0x93e>
   dbbdc:	4628      	mov	r0, r5
   dbbde:	f7ff fddc 	bl	db79a <iso_year_adjust>
   dbbe2:	4680      	mov	r8, r0
   dbbe4:	6968      	ldr	r0, [r5, #20]
   dbbe6:	2800      	cmp	r0, #0
   dbbe8:	db05      	blt.n	dbbf6 <strftime+0x39a>
   dbbea:	2264      	movs	r2, #100	; 0x64
   dbbec:	fb90 f1f2 	sdiv	r1, r0, r2
   dbbf0:	fb02 0011 	mls	r0, r2, r1, r0
   dbbf4:	e008      	b.n	dbc08 <strftime+0x3ac>
   dbbf6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbbfa:	f000 fe6b 	bl	dc8d4 <abs>
   dbbfe:	2264      	movs	r2, #100	; 0x64
   dbc00:	fb90 f3f2 	sdiv	r3, r0, r2
   dbc04:	fb03 0012 	mls	r0, r3, r2, r0
   dbc08:	f1b8 0f00 	cmp.w	r8, #0
   dbc0c:	da06      	bge.n	dbc1c <strftime+0x3c0>
   dbc0e:	696a      	ldr	r2, [r5, #20]
   dbc10:	4b65      	ldr	r3, [pc, #404]	; (dbda8 <strftime+0x54c>)
   dbc12:	429a      	cmp	r2, r3
   dbc14:	bfb8      	it	lt
   dbc16:	f04f 0801 	movlt.w	r8, #1
   dbc1a:	e006      	b.n	dbc2a <strftime+0x3ce>
   dbc1c:	d005      	beq.n	dbc2a <strftime+0x3ce>
   dbc1e:	696a      	ldr	r2, [r5, #20]
   dbc20:	4b56      	ldr	r3, [pc, #344]	; (dbd7c <strftime+0x520>)
   dbc22:	429a      	cmp	r2, r3
   dbc24:	bfb8      	it	lt
   dbc26:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   dbc2a:	2364      	movs	r3, #100	; 0x64
   dbc2c:	4440      	add	r0, r8
   dbc2e:	fb90 f2f3 	sdiv	r2, r0, r3
   dbc32:	fb03 0012 	mls	r0, r3, r2, r0
   dbc36:	4418      	add	r0, r3
   dbc38:	e1f9      	b.n	dc02e <strftime+0x7d2>
   dbc3a:	4b50      	ldr	r3, [pc, #320]	; (dbd7c <strftime+0x520>)
   dbc3c:	6969      	ldr	r1, [r5, #20]
   dbc3e:	9108      	str	r1, [sp, #32]
   dbc40:	4299      	cmp	r1, r3
   dbc42:	bfac      	ite	ge
   dbc44:	2300      	movge	r3, #0
   dbc46:	2301      	movlt	r3, #1
   dbc48:	4628      	mov	r0, r5
   dbc4a:	9307      	str	r3, [sp, #28]
   dbc4c:	f7ff fda5 	bl	db79a <iso_year_adjust>
   dbc50:	9908      	ldr	r1, [sp, #32]
   dbc52:	2900      	cmp	r1, #0
   dbc54:	4683      	mov	fp, r0
   dbc56:	db04      	blt.n	dbc62 <strftime+0x406>
   dbc58:	2364      	movs	r3, #100	; 0x64
   dbc5a:	fb91 f3f3 	sdiv	r3, r1, r3
   dbc5e:	3313      	adds	r3, #19
   dbc60:	e008      	b.n	dbc74 <strftime+0x418>
   dbc62:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dbc66:	9108      	str	r1, [sp, #32]
   dbc68:	f000 fe34 	bl	dc8d4 <abs>
   dbc6c:	9908      	ldr	r1, [sp, #32]
   dbc6e:	2364      	movs	r3, #100	; 0x64
   dbc70:	fb90 f3f3 	sdiv	r3, r0, r3
   dbc74:	6968      	ldr	r0, [r5, #20]
   dbc76:	2800      	cmp	r0, #0
   dbc78:	db06      	blt.n	dbc88 <strftime+0x42c>
   dbc7a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbc7e:	fb90 fcfe 	sdiv	ip, r0, lr
   dbc82:	fb0e 001c 	mls	r0, lr, ip, r0
   dbc86:	e00d      	b.n	dbca4 <strftime+0x448>
   dbc88:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dbc8c:	9109      	str	r1, [sp, #36]	; 0x24
   dbc8e:	9308      	str	r3, [sp, #32]
   dbc90:	f000 fe20 	bl	dc8d4 <abs>
   dbc94:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbc98:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbc9a:	9b08      	ldr	r3, [sp, #32]
   dbc9c:	fb90 fcfe 	sdiv	ip, r0, lr
   dbca0:	fb0c 001e 	mls	r0, ip, lr, r0
   dbca4:	f1bb 0f00 	cmp.w	fp, #0
   dbca8:	da08      	bge.n	dbcbc <strftime+0x460>
   dbcaa:	6969      	ldr	r1, [r5, #20]
   dbcac:	4a3e      	ldr	r2, [pc, #248]	; (dbda8 <strftime+0x54c>)
   dbcae:	4291      	cmp	r1, r2
   dbcb0:	da0a      	bge.n	dbcc8 <strftime+0x46c>
   dbcb2:	f04f 0b01 	mov.w	fp, #1
   dbcb6:	f8cd b01c 	str.w	fp, [sp, #28]
   dbcba:	e005      	b.n	dbcc8 <strftime+0x46c>
   dbcbc:	d004      	beq.n	dbcc8 <strftime+0x46c>
   dbcbe:	4a2f      	ldr	r2, [pc, #188]	; (dbd7c <strftime+0x520>)
   dbcc0:	4291      	cmp	r1, r2
   dbcc2:	bfb8      	it	lt
   dbcc4:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   dbcc8:	eb0b 0200 	add.w	r2, fp, r0
   dbccc:	1c50      	adds	r0, r2, #1
   dbcce:	d102      	bne.n	dbcd6 <strftime+0x47a>
   dbcd0:	3b01      	subs	r3, #1
   dbcd2:	2263      	movs	r2, #99	; 0x63
   dbcd4:	e003      	b.n	dbcde <strftime+0x482>
   dbcd6:	2a64      	cmp	r2, #100	; 0x64
   dbcd8:	bf04      	itt	eq
   dbcda:	3301      	addeq	r3, #1
   dbcdc:	2200      	moveq	r2, #0
   dbcde:	2064      	movs	r0, #100	; 0x64
   dbce0:	fb00 2303 	mla	r3, r0, r3, r2
   dbce4:	9a07      	ldr	r2, [sp, #28]
   dbce6:	b142      	cbz	r2, dbcfa <strftime+0x49e>
   dbce8:	222d      	movs	r2, #45	; 0x2d
   dbcea:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dbcee:	f1b8 0f00 	cmp.w	r8, #0
   dbcf2:	d013      	beq.n	dbd1c <strftime+0x4c0>
   dbcf4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dbcf8:	e010      	b.n	dbd1c <strftime+0x4c0>
   dbcfa:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dbcfe:	d110      	bne.n	dbd22 <strftime+0x4c6>
   dbd00:	f242 720f 	movw	r2, #9999	; 0x270f
   dbd04:	4293      	cmp	r3, r2
   dbd06:	d90c      	bls.n	dbd22 <strftime+0x4c6>
   dbd08:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dbd0c:	f1b8 0f00 	cmp.w	r8, #0
   dbd10:	d1f0      	bne.n	dbcf4 <strftime+0x498>
   dbd12:	aa12      	add	r2, sp, #72	; 0x48
   dbd14:	2125      	movs	r1, #37	; 0x25
   dbd16:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dbd1a:	e00a      	b.n	dbd32 <strftime+0x4d6>
   dbd1c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dbd20:	e000      	b.n	dbd24 <strftime+0x4c8>
   dbd22:	aa0a      	add	r2, sp, #40	; 0x28
   dbd24:	2125      	movs	r1, #37	; 0x25
   dbd26:	7011      	strb	r1, [r2, #0]
   dbd28:	f1ba 0f00 	cmp.w	sl, #0
   dbd2c:	d101      	bne.n	dbd32 <strftime+0x4d6>
   dbd2e:	1c50      	adds	r0, r2, #1
   dbd30:	e002      	b.n	dbd38 <strftime+0x4dc>
   dbd32:	2130      	movs	r1, #48	; 0x30
   dbd34:	1c90      	adds	r0, r2, #2
   dbd36:	7051      	strb	r1, [r2, #1]
   dbd38:	491c      	ldr	r1, [pc, #112]	; (dbdac <strftime+0x550>)
   dbd3a:	9307      	str	r3, [sp, #28]
   dbd3c:	f7ff fd0a 	bl	db754 <strcpy>
   dbd40:	9b07      	ldr	r3, [sp, #28]
   dbd42:	9300      	str	r3, [sp, #0]
   dbd44:	e1ad      	b.n	dc0a2 <strftime+0x846>
   dbd46:	4a14      	ldr	r2, [pc, #80]	; (dbd98 <strftime+0x53c>)
   dbd48:	4912      	ldr	r1, [pc, #72]	; (dbd94 <strftime+0x538>)
   dbd4a:	68ab      	ldr	r3, [r5, #8]
   dbd4c:	286b      	cmp	r0, #107	; 0x6b
   dbd4e:	bf08      	it	eq
   dbd50:	460a      	moveq	r2, r1
   dbd52:	e6e4      	b.n	dbb1e <strftime+0x2c2>
   dbd54:	68a9      	ldr	r1, [r5, #8]
   dbd56:	230c      	movs	r3, #12
   dbd58:	b131      	cbz	r1, dbd68 <strftime+0x50c>
   dbd5a:	4299      	cmp	r1, r3
   dbd5c:	bf0e      	itee	eq
   dbd5e:	460b      	moveq	r3, r1
   dbd60:	fb91 f2f3 	sdivne	r2, r1, r3
   dbd64:	fb03 1312 	mlsne	r3, r3, r2, r1
   dbd68:	4a0a      	ldr	r2, [pc, #40]	; (dbd94 <strftime+0x538>)
   dbd6a:	490b      	ldr	r1, [pc, #44]	; (dbd98 <strftime+0x53c>)
   dbd6c:	2849      	cmp	r0, #73	; 0x49
   dbd6e:	bf08      	it	eq
   dbd70:	460a      	moveq	r2, r1
   dbd72:	e6d4      	b.n	dbb1e <strftime+0x2c2>
   dbd74:	69eb      	ldr	r3, [r5, #28]
   dbd76:	4a0e      	ldr	r2, [pc, #56]	; (dbdb0 <strftime+0x554>)
   dbd78:	3301      	adds	r3, #1
   dbd7a:	e6d0      	b.n	dbb1e <strftime+0x2c2>
   dbd7c:	fffff894 	.word	0xfffff894
   dbd80:	000ddba7 	.word	0x000ddba7
   dbd84:	000dd56a 	.word	0x000dd56a
   dbd88:	000ddb98 	.word	0x000ddb98
   dbd8c:	000ddb9f 	.word	0x000ddb9f
   dbd90:	000ddba9 	.word	0x000ddba9
   dbd94:	000ddbab 	.word	0x000ddbab
   dbd98:	000ddbb9 	.word	0x000ddbb9
   dbd9c:	000ddbaf 	.word	0x000ddbaf
   dbda0:	000ddbbe 	.word	0x000ddbbe
   dbda4:	000ddbc2 	.word	0x000ddbc2
   dbda8:	fffff895 	.word	0xfffff895
   dbdac:	000ddbca 	.word	0x000ddbca
   dbdb0:	000ddbce 	.word	0x000ddbce
   dbdb4:	692b      	ldr	r3, [r5, #16]
   dbdb6:	3301      	adds	r3, #1
   dbdb8:	e13d      	b.n	dc036 <strftime+0x7da>
   dbdba:	686b      	ldr	r3, [r5, #4]
   dbdbc:	e13b      	b.n	dc036 <strftime+0x7da>
   dbdbe:	9b02      	ldr	r3, [sp, #8]
   dbdc0:	429c      	cmp	r4, r3
   dbdc2:	f080 81f5 	bcs.w	dc1b0 <strftime+0x954>
   dbdc6:	230a      	movs	r3, #10
   dbdc8:	e1e5      	b.n	dc196 <strftime+0x93a>
   dbdca:	68ab      	ldr	r3, [r5, #8]
   dbdcc:	9a03      	ldr	r2, [sp, #12]
   dbdce:	2b0b      	cmp	r3, #11
   dbdd0:	bfcc      	ite	gt
   dbdd2:	23a4      	movgt	r3, #164	; 0xa4
   dbdd4:	23a0      	movle	r3, #160	; 0xa0
   dbdd6:	4413      	add	r3, r2
   dbdd8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dbddc:	4640      	mov	r0, r8
   dbdde:	f000 f9f1 	bl	dc1c4 <strlen>
   dbde2:	4bb2      	ldr	r3, [pc, #712]	; (dc0ac <strftime+0x850>)
   dbde4:	f8d3 e000 	ldr.w	lr, [r3]
   dbde8:	1939      	adds	r1, r7, r4
   dbdea:	4642      	mov	r2, r8
   dbdec:	4420      	add	r0, r4
   dbdee:	4284      	cmp	r4, r0
   dbdf0:	f000 81d3 	beq.w	dc19a <strftime+0x93e>
   dbdf4:	9b02      	ldr	r3, [sp, #8]
   dbdf6:	429c      	cmp	r4, r3
   dbdf8:	f080 81da 	bcs.w	dc1b0 <strftime+0x954>
   dbdfc:	f899 3000 	ldrb.w	r3, [r9]
   dbe00:	2b50      	cmp	r3, #80	; 0x50
   dbe02:	f104 0401 	add.w	r4, r4, #1
   dbe06:	7813      	ldrb	r3, [r2, #0]
   dbe08:	d10a      	bne.n	dbe20 <strftime+0x5c4>
   dbe0a:	eb0e 0c03 	add.w	ip, lr, r3
   dbe0e:	f89c c001 	ldrb.w	ip, [ip, #1]
   dbe12:	f00c 0c03 	and.w	ip, ip, #3
   dbe16:	f1bc 0f01 	cmp.w	ip, #1
   dbe1a:	bf08      	it	eq
   dbe1c:	3320      	addeq	r3, #32
   dbe1e:	b2db      	uxtb	r3, r3
   dbe20:	f801 3b01 	strb.w	r3, [r1], #1
   dbe24:	3201      	adds	r2, #1
   dbe26:	e7e2      	b.n	dbdee <strftime+0x592>
   dbe28:	686b      	ldr	r3, [r5, #4]
   dbe2a:	9300      	str	r3, [sp, #0]
   dbe2c:	4aa0      	ldr	r2, [pc, #640]	; (dc0b0 <strftime+0x854>)
   dbe2e:	68ab      	ldr	r3, [r5, #8]
   dbe30:	e139      	b.n	dc0a6 <strftime+0x84a>
   dbe32:	6a2b      	ldr	r3, [r5, #32]
   dbe34:	2b00      	cmp	r3, #0
   dbe36:	db17      	blt.n	dbe68 <strftime+0x60c>
   dbe38:	f000 fbc4 	bl	dc5c4 <__tz_lock>
   dbe3c:	9b06      	ldr	r3, [sp, #24]
   dbe3e:	b91b      	cbnz	r3, dbe48 <strftime+0x5ec>
   dbe40:	f000 fbc2 	bl	dc5c8 <_tzset_unlocked>
   dbe44:	2301      	movs	r3, #1
   dbe46:	9306      	str	r3, [sp, #24]
   dbe48:	f000 fda0 	bl	dc98c <__gettzinfo>
   dbe4c:	6a2b      	ldr	r3, [r5, #32]
   dbe4e:	2b00      	cmp	r3, #0
   dbe50:	bfd4      	ite	le
   dbe52:	2300      	movle	r3, #0
   dbe54:	2301      	movgt	r3, #1
   dbe56:	221c      	movs	r2, #28
   dbe58:	fb02 0003 	mla	r0, r2, r3, r0
   dbe5c:	6a03      	ldr	r3, [r0, #32]
   dbe5e:	f1c3 0800 	rsb	r8, r3, #0
   dbe62:	f000 fbb0 	bl	dc5c6 <__tz_unlock>
   dbe66:	e001      	b.n	dbe6c <strftime+0x610>
   dbe68:	f04f 0800 	mov.w	r8, #0
   dbe6c:	f8d5 e014 	ldr.w	lr, [r5, #20]
   dbe70:	4670      	mov	r0, lr
   dbe72:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   dbe76:	ea4f 71e0 	mov.w	r1, r0, asr #31
   dbe7a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbe7e:	2a00      	cmp	r2, #0
   dbe80:	f173 0b00 	sbcs.w	fp, r3, #0
   dbe84:	ebc4 0c06 	rsb	ip, r4, r6
   dbe88:	eb07 0a04 	add.w	sl, r7, r4
   dbe8c:	da03      	bge.n	dbe96 <strftime+0x63a>
   dbe8e:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   dbe92:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   dbe96:	0891      	lsrs	r1, r2, #2
   dbe98:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   dbe9c:	109b      	asrs	r3, r3, #2
   dbe9e:	9104      	str	r1, [sp, #16]
   dbea0:	9305      	str	r3, [sp, #20]
   dbea2:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   dbea6:	2364      	movs	r3, #100	; 0x64
   dbea8:	fb91 f1f3 	sdiv	r1, r1, r3
   dbeac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   dbeb0:	1a52      	subs	r2, r2, r1
   dbeb2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   dbeb6:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   dbeba:	f44f 71c8 	mov.w	r1, #400	; 0x190
   dbebe:	fb90 f1f1 	sdiv	r1, r0, r1
   dbec2:	1852      	adds	r2, r2, r1
   dbec4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbec8:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   dbecc:	f240 116d 	movw	r1, #365	; 0x16d
   dbed0:	fb01 fe0e 	mul.w	lr, r1, lr
   dbed4:	69e9      	ldr	r1, [r5, #28]
   dbed6:	eb12 020e 	adds.w	r2, r2, lr
   dbeda:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   dbede:	1852      	adds	r2, r2, r1
   dbee0:	f04f 0e18 	mov.w	lr, #24
   dbee4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbee8:	fba2 010e 	umull	r0, r1, r2, lr
   dbeec:	fb0e 1103 	mla	r1, lr, r3, r1
   dbef0:	68ab      	ldr	r3, [r5, #8]
   dbef2:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   dbef6:	18c0      	adds	r0, r0, r3
   dbef8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbefc:	fba0 230e 	umull	r2, r3, r0, lr
   dbf00:	fb0e 3301 	mla	r3, lr, r1, r3
   dbf04:	6869      	ldr	r1, [r5, #4]
   dbf06:	1852      	adds	r2, r2, r1
   dbf08:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   dbf0c:	fba2 010e 	umull	r0, r1, r2, lr
   dbf10:	fb0e 1103 	mla	r1, lr, r3, r1
   dbf14:	682b      	ldr	r3, [r5, #0]
   dbf16:	4a67      	ldr	r2, [pc, #412]	; (dc0b4 <strftime+0x858>)
   dbf18:	18c0      	adds	r0, r0, r3
   dbf1a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   dbf1e:	ebb0 0008 	subs.w	r0, r0, r8
   dbf22:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   dbf26:	e9cd 0100 	strd	r0, r1, [sp]
   dbf2a:	4661      	mov	r1, ip
   dbf2c:	4650      	mov	r0, sl
   dbf2e:	f7fc fa0b 	bl	d8348 <sniprintf>
   dbf32:	e5f8      	b.n	dbb26 <strftime+0x2ca>
   dbf34:	682b      	ldr	r3, [r5, #0]
   dbf36:	e07e      	b.n	dc036 <strftime+0x7da>
   dbf38:	9b02      	ldr	r3, [sp, #8]
   dbf3a:	429c      	cmp	r4, r3
   dbf3c:	f080 8138 	bcs.w	dc1b0 <strftime+0x954>
   dbf40:	2309      	movs	r3, #9
   dbf42:	e128      	b.n	dc196 <strftime+0x93a>
   dbf44:	682b      	ldr	r3, [r5, #0]
   dbf46:	9301      	str	r3, [sp, #4]
   dbf48:	686b      	ldr	r3, [r5, #4]
   dbf4a:	9300      	str	r3, [sp, #0]
   dbf4c:	4a5a      	ldr	r2, [pc, #360]	; (dc0b8 <strftime+0x85c>)
   dbf4e:	68ab      	ldr	r3, [r5, #8]
   dbf50:	1b31      	subs	r1, r6, r4
   dbf52:	1938      	adds	r0, r7, r4
   dbf54:	e60d      	b.n	dbb72 <strftime+0x316>
   dbf56:	9b02      	ldr	r3, [sp, #8]
   dbf58:	429c      	cmp	r4, r3
   dbf5a:	f080 8129 	bcs.w	dc1b0 <strftime+0x954>
   dbf5e:	69ab      	ldr	r3, [r5, #24]
   dbf60:	1c62      	adds	r2, r4, #1
   dbf62:	b90b      	cbnz	r3, dbf68 <strftime+0x70c>
   dbf64:	2337      	movs	r3, #55	; 0x37
   dbf66:	e000      	b.n	dbf6a <strftime+0x70e>
   dbf68:	3330      	adds	r3, #48	; 0x30
   dbf6a:	553b      	strb	r3, [r7, r4]
   dbf6c:	4614      	mov	r4, r2
   dbf6e:	e114      	b.n	dc19a <strftime+0x93e>
   dbf70:	69eb      	ldr	r3, [r5, #28]
   dbf72:	69aa      	ldr	r2, [r5, #24]
   dbf74:	3307      	adds	r3, #7
   dbf76:	1a9b      	subs	r3, r3, r2
   dbf78:	2207      	movs	r2, #7
   dbf7a:	fb93 f3f2 	sdiv	r3, r3, r2
   dbf7e:	e05a      	b.n	dc036 <strftime+0x7da>
   dbf80:	4628      	mov	r0, r5
   dbf82:	f7ff fc0a 	bl	db79a <iso_year_adjust>
   dbf86:	69aa      	ldr	r2, [r5, #24]
   dbf88:	b10a      	cbz	r2, dbf8e <strftime+0x732>
   dbf8a:	1e53      	subs	r3, r2, #1
   dbf8c:	e000      	b.n	dbf90 <strftime+0x734>
   dbf8e:	2306      	movs	r3, #6
   dbf90:	2800      	cmp	r0, #0
   dbf92:	dc2f      	bgt.n	dbff4 <strftime+0x798>
   dbf94:	69ea      	ldr	r2, [r5, #28]
   dbf96:	d101      	bne.n	dbf9c <strftime+0x740>
   dbf98:	320a      	adds	r2, #10
   dbf9a:	e03b      	b.n	dc014 <strftime+0x7b8>
   dbf9c:	1a9a      	subs	r2, r3, r2
   dbf9e:	696b      	ldr	r3, [r5, #20]
   dbfa0:	f240 716b 	movw	r1, #1899	; 0x76b
   dbfa4:	2b00      	cmp	r3, #0
   dbfa6:	bfb4      	ite	lt
   dbfa8:	4608      	movlt	r0, r1
   dbfaa:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   dbfae:	4418      	add	r0, r3
   dbfb0:	0781      	lsls	r1, r0, #30
   dbfb2:	d107      	bne.n	dbfc4 <strftime+0x768>
   dbfb4:	4601      	mov	r1, r0
   dbfb6:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dbfba:	fb90 f0fe 	sdiv	r0, r0, lr
   dbfbe:	fb0e 1110 	mls	r1, lr, r0, r1
   dbfc2:	b981      	cbnz	r1, dbfe6 <strftime+0x78a>
   dbfc4:	2b00      	cmp	r3, #0
   dbfc6:	f240 716b 	movw	r1, #1899	; 0x76b
   dbfca:	bfa8      	it	ge
   dbfcc:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   dbfd0:	4419      	add	r1, r3
   dbfd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   dbfd6:	fb91 f0f3 	sdiv	r0, r1, r3
   dbfda:	fb03 1110 	mls	r1, r3, r0, r1
   dbfde:	fab1 f181 	clz	r1, r1
   dbfe2:	0949      	lsrs	r1, r1, #5
   dbfe4:	e000      	b.n	dbfe8 <strftime+0x78c>
   dbfe6:	2101      	movs	r1, #1
   dbfe8:	1a52      	subs	r2, r2, r1
   dbfea:	2a05      	cmp	r2, #5
   dbfec:	bfb4      	ite	lt
   dbfee:	2335      	movlt	r3, #53	; 0x35
   dbff0:	2334      	movge	r3, #52	; 0x34
   dbff2:	e020      	b.n	dc036 <strftime+0x7da>
   dbff4:	2301      	movs	r3, #1
   dbff6:	e01e      	b.n	dc036 <strftime+0x7da>
   dbff8:	9b02      	ldr	r3, [sp, #8]
   dbffa:	429c      	cmp	r4, r3
   dbffc:	f080 80d8 	bcs.w	dc1b0 <strftime+0x954>
   dc000:	69ab      	ldr	r3, [r5, #24]
   dc002:	3330      	adds	r3, #48	; 0x30
   dc004:	e0c7      	b.n	dc196 <strftime+0x93a>
   dc006:	69aa      	ldr	r2, [r5, #24]
   dc008:	b10a      	cbz	r2, dc00e <strftime+0x7b2>
   dc00a:	1e53      	subs	r3, r2, #1
   dc00c:	e000      	b.n	dc010 <strftime+0x7b4>
   dc00e:	2306      	movs	r3, #6
   dc010:	69ea      	ldr	r2, [r5, #28]
   dc012:	3207      	adds	r2, #7
   dc014:	1ad2      	subs	r2, r2, r3
   dc016:	2307      	movs	r3, #7
   dc018:	fb92 f3f3 	sdiv	r3, r2, r3
   dc01c:	e00b      	b.n	dc036 <strftime+0x7da>
   dc01e:	6968      	ldr	r0, [r5, #20]
   dc020:	2800      	cmp	r0, #0
   dc022:	da03      	bge.n	dc02c <strftime+0x7d0>
   dc024:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dc028:	f000 fc54 	bl	dc8d4 <abs>
   dc02c:	2364      	movs	r3, #100	; 0x64
   dc02e:	fb90 f2f3 	sdiv	r2, r0, r3
   dc032:	fb02 0313 	mls	r3, r2, r3, r0
   dc036:	4a21      	ldr	r2, [pc, #132]	; (dc0bc <strftime+0x860>)
   dc038:	e571      	b.n	dbb1e <strftime+0x2c2>
   dc03a:	696b      	ldr	r3, [r5, #20]
   dc03c:	4a20      	ldr	r2, [pc, #128]	; (dc0c0 <strftime+0x864>)
   dc03e:	4293      	cmp	r3, r2
   dc040:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   dc044:	da05      	bge.n	dc052 <strftime+0x7f6>
   dc046:	232d      	movs	r3, #45	; 0x2d
   dc048:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc04c:	f1cb 0b00 	rsb	fp, fp, #0
   dc050:	e008      	b.n	dc064 <strftime+0x808>
   dc052:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dc056:	d10d      	bne.n	dc074 <strftime+0x818>
   dc058:	f242 730f 	movw	r3, #9999	; 0x270f
   dc05c:	459b      	cmp	fp, r3
   dc05e:	d911      	bls.n	dc084 <strftime+0x828>
   dc060:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dc064:	f1b8 0f00 	cmp.w	r8, #0
   dc068:	d001      	beq.n	dc06e <strftime+0x812>
   dc06a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc06e:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   dc072:	e000      	b.n	dc076 <strftime+0x81a>
   dc074:	ab0a      	add	r3, sp, #40	; 0x28
   dc076:	2225      	movs	r2, #37	; 0x25
   dc078:	701a      	strb	r2, [r3, #0]
   dc07a:	f1ba 0f00 	cmp.w	sl, #0
   dc07e:	d108      	bne.n	dc092 <strftime+0x836>
   dc080:	1c58      	adds	r0, r3, #1
   dc082:	e009      	b.n	dc098 <strftime+0x83c>
   dc084:	f1b8 0f00 	cmp.w	r8, #0
   dc088:	d1f4      	bne.n	dc074 <strftime+0x818>
   dc08a:	2325      	movs	r3, #37	; 0x25
   dc08c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dc090:	ab0a      	add	r3, sp, #40	; 0x28
   dc092:	2230      	movs	r2, #48	; 0x30
   dc094:	1c98      	adds	r0, r3, #2
   dc096:	705a      	strb	r2, [r3, #1]
   dc098:	490a      	ldr	r1, [pc, #40]	; (dc0c4 <strftime+0x868>)
   dc09a:	f7ff fb5b 	bl	db754 <strcpy>
   dc09e:	f8cd b000 	str.w	fp, [sp]
   dc0a2:	4643      	mov	r3, r8
   dc0a4:	aa0a      	add	r2, sp, #40	; 0x28
   dc0a6:	1b31      	subs	r1, r6, r4
   dc0a8:	1938      	adds	r0, r7, r4
   dc0aa:	e03e      	b.n	dc12a <strftime+0x8ce>
   dc0ac:	2003ddf4 	.word	0x2003ddf4
   dc0b0:	000ddbdd 	.word	0x000ddbdd
   dc0b4:	000ddbd3 	.word	0x000ddbd3
   dc0b8:	000ddbd8 	.word	0x000ddbd8
   dc0bc:	000ddbb9 	.word	0x000ddbb9
   dc0c0:	fffff894 	.word	0xfffff894
   dc0c4:	000ddbca 	.word	0x000ddbca
   dc0c8:	6a2b      	ldr	r3, [r5, #32]
   dc0ca:	2b00      	cmp	r3, #0
   dc0cc:	db65      	blt.n	dc19a <strftime+0x93e>
   dc0ce:	f000 fa79 	bl	dc5c4 <__tz_lock>
   dc0d2:	9b06      	ldr	r3, [sp, #24]
   dc0d4:	b91b      	cbnz	r3, dc0de <strftime+0x882>
   dc0d6:	f000 fa77 	bl	dc5c8 <_tzset_unlocked>
   dc0da:	2301      	movs	r3, #1
   dc0dc:	9306      	str	r3, [sp, #24]
   dc0de:	f000 fc55 	bl	dc98c <__gettzinfo>
   dc0e2:	6a2b      	ldr	r3, [r5, #32]
   dc0e4:	2b00      	cmp	r3, #0
   dc0e6:	bfd4      	ite	le
   dc0e8:	2300      	movle	r3, #0
   dc0ea:	2301      	movgt	r3, #1
   dc0ec:	221c      	movs	r2, #28
   dc0ee:	fb02 0003 	mla	r0, r2, r3, r0
   dc0f2:	eb07 0a04 	add.w	sl, r7, r4
   dc0f6:	6a03      	ldr	r3, [r0, #32]
   dc0f8:	f1c3 0800 	rsb	r8, r3, #0
   dc0fc:	f000 fa63 	bl	dc5c6 <__tz_unlock>
   dc100:	233c      	movs	r3, #60	; 0x3c
   dc102:	fb98 f0f3 	sdiv	r0, r8, r3
   dc106:	9307      	str	r3, [sp, #28]
   dc108:	f000 fc44 	bl	dc994 <labs>
   dc10c:	9b07      	ldr	r3, [sp, #28]
   dc10e:	fb90 f2f3 	sdiv	r2, r0, r3
   dc112:	ebc4 0b06 	rsb	fp, r4, r6
   dc116:	fb02 0013 	mls	r0, r2, r3, r0
   dc11a:	4a28      	ldr	r2, [pc, #160]	; (dc1bc <strftime+0x960>)
   dc11c:	9000      	str	r0, [sp, #0]
   dc11e:	4659      	mov	r1, fp
   dc120:	4650      	mov	r0, sl
   dc122:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dc126:	fb98 f3f3 	sdiv	r3, r8, r3
   dc12a:	f7fc f90d 	bl	d8348 <sniprintf>
   dc12e:	e4fa      	b.n	dbb26 <strftime+0x2ca>
   dc130:	4404      	add	r4, r0
   dc132:	42a6      	cmp	r6, r4
   dc134:	d831      	bhi.n	dc19a <strftime+0x93e>
   dc136:	e03b      	b.n	dc1b0 <strftime+0x954>
   dc138:	6a2b      	ldr	r3, [r5, #32]
   dc13a:	2b00      	cmp	r3, #0
   dc13c:	db2d      	blt.n	dc19a <strftime+0x93e>
   dc13e:	f000 fa41 	bl	dc5c4 <__tz_lock>
   dc142:	9b06      	ldr	r3, [sp, #24]
   dc144:	b91b      	cbnz	r3, dc14e <strftime+0x8f2>
   dc146:	f000 fa3f 	bl	dc5c8 <_tzset_unlocked>
   dc14a:	2301      	movs	r3, #1
   dc14c:	9306      	str	r3, [sp, #24]
   dc14e:	6a2b      	ldr	r3, [r5, #32]
   dc150:	4a1b      	ldr	r2, [pc, #108]	; (dc1c0 <strftime+0x964>)
   dc152:	2b00      	cmp	r3, #0
   dc154:	bfd4      	ite	le
   dc156:	2300      	movle	r3, #0
   dc158:	2301      	movgt	r3, #1
   dc15a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   dc15e:	4640      	mov	r0, r8
   dc160:	f000 f830 	bl	dc1c4 <strlen>
   dc164:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dc168:	193b      	adds	r3, r7, r4
   dc16a:	4420      	add	r0, r4
   dc16c:	4284      	cmp	r4, r0
   dc16e:	d00b      	beq.n	dc188 <strftime+0x92c>
   dc170:	9a02      	ldr	r2, [sp, #8]
   dc172:	4294      	cmp	r4, r2
   dc174:	d205      	bcs.n	dc182 <strftime+0x926>
   dc176:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   dc17a:	f803 2b01 	strb.w	r2, [r3], #1
   dc17e:	3401      	adds	r4, #1
   dc180:	e7f4      	b.n	dc16c <strftime+0x910>
   dc182:	f000 fa20 	bl	dc5c6 <__tz_unlock>
   dc186:	e013      	b.n	dc1b0 <strftime+0x954>
   dc188:	f000 fa1d 	bl	dc5c6 <__tz_unlock>
   dc18c:	e005      	b.n	dc19a <strftime+0x93e>
   dc18e:	9b02      	ldr	r3, [sp, #8]
   dc190:	429c      	cmp	r4, r3
   dc192:	d20d      	bcs.n	dc1b0 <strftime+0x954>
   dc194:	2325      	movs	r3, #37	; 0x25
   dc196:	553b      	strb	r3, [r7, r4]
   dc198:	3401      	adds	r4, #1
   dc19a:	f899 3000 	ldrb.w	r3, [r9]
   dc19e:	b11b      	cbz	r3, dc1a8 <strftime+0x94c>
   dc1a0:	f109 0901 	add.w	r9, r9, #1
   dc1a4:	f7ff bb69 	b.w	db87a <strftime+0x1e>
   dc1a8:	b126      	cbz	r6, dc1b4 <strftime+0x958>
   dc1aa:	2300      	movs	r3, #0
   dc1ac:	553b      	strb	r3, [r7, r4]
   dc1ae:	e001      	b.n	dc1b4 <strftime+0x958>
   dc1b0:	2000      	movs	r0, #0
   dc1b2:	e000      	b.n	dc1b6 <strftime+0x95a>
   dc1b4:	4620      	mov	r0, r4
   dc1b6:	b013      	add	sp, #76	; 0x4c
   dc1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc1bc:	000ddbe7 	.word	0x000ddbe7
   dc1c0:	2003de5c 	.word	0x2003de5c

000dc1c4 <strlen>:
   dc1c4:	4603      	mov	r3, r0
   dc1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc1ca:	2a00      	cmp	r2, #0
   dc1cc:	d1fb      	bne.n	dc1c6 <strlen+0x2>
   dc1ce:	1a18      	subs	r0, r3, r0
   dc1d0:	3801      	subs	r0, #1
   dc1d2:	4770      	bx	lr

000dc1d4 <strncmp>:
   dc1d4:	b530      	push	{r4, r5, lr}
   dc1d6:	b182      	cbz	r2, dc1fa <strncmp+0x26>
   dc1d8:	1e45      	subs	r5, r0, #1
   dc1da:	3901      	subs	r1, #1
   dc1dc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc1e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc1e4:	42a3      	cmp	r3, r4
   dc1e6:	d106      	bne.n	dc1f6 <strncmp+0x22>
   dc1e8:	43ec      	mvns	r4, r5
   dc1ea:	4414      	add	r4, r2
   dc1ec:	42e0      	cmn	r0, r4
   dc1ee:	d001      	beq.n	dc1f4 <strncmp+0x20>
   dc1f0:	2b00      	cmp	r3, #0
   dc1f2:	d1f3      	bne.n	dc1dc <strncmp+0x8>
   dc1f4:	461c      	mov	r4, r3
   dc1f6:	1b18      	subs	r0, r3, r4
   dc1f8:	bd30      	pop	{r4, r5, pc}
   dc1fa:	4610      	mov	r0, r2
   dc1fc:	bd30      	pop	{r4, r5, pc}

000dc1fe <strncpy>:
   dc1fe:	b510      	push	{r4, lr}
   dc200:	4603      	mov	r3, r0
   dc202:	b142      	cbz	r2, dc216 <strncpy+0x18>
   dc204:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc208:	f803 4b01 	strb.w	r4, [r3], #1
   dc20c:	3a01      	subs	r2, #1
   dc20e:	2c00      	cmp	r4, #0
   dc210:	d1f7      	bne.n	dc202 <strncpy+0x4>
   dc212:	441a      	add	r2, r3
   dc214:	e000      	b.n	dc218 <strncpy+0x1a>
   dc216:	bd10      	pop	{r4, pc}
   dc218:	4293      	cmp	r3, r2
   dc21a:	d002      	beq.n	dc222 <strncpy+0x24>
   dc21c:	f803 4b01 	strb.w	r4, [r3], #1
   dc220:	e7fa      	b.n	dc218 <strncpy+0x1a>
   dc222:	bd10      	pop	{r4, pc}

000dc224 <_strtol_r>:
   dc224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc228:	4680      	mov	r8, r0
   dc22a:	4840      	ldr	r0, [pc, #256]	; (dc32c <_strtol_r+0x108>)
   dc22c:	f8d0 9000 	ldr.w	r9, [r0]
   dc230:	460f      	mov	r7, r1
   dc232:	463d      	mov	r5, r7
   dc234:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc238:	eb09 0004 	add.w	r0, r9, r4
   dc23c:	7840      	ldrb	r0, [r0, #1]
   dc23e:	f000 0008 	and.w	r0, r0, #8
   dc242:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   dc246:	b108      	cbz	r0, dc24c <_strtol_r+0x28>
   dc248:	462f      	mov	r7, r5
   dc24a:	e7f2      	b.n	dc232 <_strtol_r+0xe>
   dc24c:	2c2d      	cmp	r4, #45	; 0x2d
   dc24e:	d103      	bne.n	dc258 <_strtol_r+0x34>
   dc250:	1cbd      	adds	r5, r7, #2
   dc252:	787c      	ldrb	r4, [r7, #1]
   dc254:	2601      	movs	r6, #1
   dc256:	e003      	b.n	dc260 <_strtol_r+0x3c>
   dc258:	2c2b      	cmp	r4, #43	; 0x2b
   dc25a:	bf04      	itt	eq
   dc25c:	787c      	ldrbeq	r4, [r7, #1]
   dc25e:	1cbd      	addeq	r5, r7, #2
   dc260:	b113      	cbz	r3, dc268 <_strtol_r+0x44>
   dc262:	2b10      	cmp	r3, #16
   dc264:	d10a      	bne.n	dc27c <_strtol_r+0x58>
   dc266:	e05b      	b.n	dc320 <_strtol_r+0xfc>
   dc268:	2c30      	cmp	r4, #48	; 0x30
   dc26a:	d157      	bne.n	dc31c <_strtol_r+0xf8>
   dc26c:	7828      	ldrb	r0, [r5, #0]
   dc26e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc272:	2858      	cmp	r0, #88	; 0x58
   dc274:	d14d      	bne.n	dc312 <_strtol_r+0xee>
   dc276:	786c      	ldrb	r4, [r5, #1]
   dc278:	2310      	movs	r3, #16
   dc27a:	3502      	adds	r5, #2
   dc27c:	2e00      	cmp	r6, #0
   dc27e:	bf14      	ite	ne
   dc280:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   dc284:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   dc288:	2700      	movs	r7, #0
   dc28a:	fbbc faf3 	udiv	sl, ip, r3
   dc28e:	4638      	mov	r0, r7
   dc290:	fb03 cc1a 	mls	ip, r3, sl, ip
   dc294:	eb09 0e04 	add.w	lr, r9, r4
   dc298:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc29c:	f01e 0f04 	tst.w	lr, #4
   dc2a0:	d001      	beq.n	dc2a6 <_strtol_r+0x82>
   dc2a2:	3c30      	subs	r4, #48	; 0x30
   dc2a4:	e00b      	b.n	dc2be <_strtol_r+0x9a>
   dc2a6:	f01e 0e03 	ands.w	lr, lr, #3
   dc2aa:	d01b      	beq.n	dc2e4 <_strtol_r+0xc0>
   dc2ac:	f1be 0f01 	cmp.w	lr, #1
   dc2b0:	bf0c      	ite	eq
   dc2b2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc2b6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc2ba:	ebce 0404 	rsb	r4, lr, r4
   dc2be:	42a3      	cmp	r3, r4
   dc2c0:	dd10      	ble.n	dc2e4 <_strtol_r+0xc0>
   dc2c2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   dc2c6:	d00a      	beq.n	dc2de <_strtol_r+0xba>
   dc2c8:	4550      	cmp	r0, sl
   dc2ca:	d806      	bhi.n	dc2da <_strtol_r+0xb6>
   dc2cc:	d101      	bne.n	dc2d2 <_strtol_r+0xae>
   dc2ce:	4564      	cmp	r4, ip
   dc2d0:	dc03      	bgt.n	dc2da <_strtol_r+0xb6>
   dc2d2:	fb03 4000 	mla	r0, r3, r0, r4
   dc2d6:	2701      	movs	r7, #1
   dc2d8:	e001      	b.n	dc2de <_strtol_r+0xba>
   dc2da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc2de:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc2e2:	e7d7      	b.n	dc294 <_strtol_r+0x70>
   dc2e4:	1c7b      	adds	r3, r7, #1
   dc2e6:	d10c      	bne.n	dc302 <_strtol_r+0xde>
   dc2e8:	2e00      	cmp	r6, #0
   dc2ea:	f04f 0322 	mov.w	r3, #34	; 0x22
   dc2ee:	bf14      	ite	ne
   dc2f0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   dc2f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc2f8:	f8c8 3000 	str.w	r3, [r8]
   dc2fc:	b92a      	cbnz	r2, dc30a <_strtol_r+0xe6>
   dc2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc302:	b106      	cbz	r6, dc306 <_strtol_r+0xe2>
   dc304:	4240      	negs	r0, r0
   dc306:	b172      	cbz	r2, dc326 <_strtol_r+0x102>
   dc308:	b107      	cbz	r7, dc30c <_strtol_r+0xe8>
   dc30a:	1e69      	subs	r1, r5, #1
   dc30c:	6011      	str	r1, [r2, #0]
   dc30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc312:	2430      	movs	r4, #48	; 0x30
   dc314:	2b00      	cmp	r3, #0
   dc316:	d1b1      	bne.n	dc27c <_strtol_r+0x58>
   dc318:	2308      	movs	r3, #8
   dc31a:	e7af      	b.n	dc27c <_strtol_r+0x58>
   dc31c:	230a      	movs	r3, #10
   dc31e:	e7ad      	b.n	dc27c <_strtol_r+0x58>
   dc320:	2c30      	cmp	r4, #48	; 0x30
   dc322:	d0a3      	beq.n	dc26c <_strtol_r+0x48>
   dc324:	e7aa      	b.n	dc27c <_strtol_r+0x58>
   dc326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc32a:	bf00      	nop
   dc32c:	2003ddf4 	.word	0x2003ddf4

000dc330 <strtol>:
   dc330:	4613      	mov	r3, r2
   dc332:	460a      	mov	r2, r1
   dc334:	4601      	mov	r1, r0
   dc336:	4802      	ldr	r0, [pc, #8]	; (dc340 <strtol+0x10>)
   dc338:	6800      	ldr	r0, [r0, #0]
   dc33a:	f7ff bf73 	b.w	dc224 <_strtol_r>
   dc33e:	bf00      	nop
   dc340:	2003de58 	.word	0x2003de58

000dc344 <_strtoul_r>:
   dc344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc348:	4680      	mov	r8, r0
   dc34a:	483c      	ldr	r0, [pc, #240]	; (dc43c <_strtoul_r+0xf8>)
   dc34c:	f8d0 9000 	ldr.w	r9, [r0]
   dc350:	460e      	mov	r6, r1
   dc352:	4635      	mov	r5, r6
   dc354:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc358:	eb09 0004 	add.w	r0, r9, r4
   dc35c:	7840      	ldrb	r0, [r0, #1]
   dc35e:	f000 0008 	and.w	r0, r0, #8
   dc362:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   dc366:	b108      	cbz	r0, dc36c <_strtoul_r+0x28>
   dc368:	462e      	mov	r6, r5
   dc36a:	e7f2      	b.n	dc352 <_strtoul_r+0xe>
   dc36c:	2c2d      	cmp	r4, #45	; 0x2d
   dc36e:	d103      	bne.n	dc378 <_strtoul_r+0x34>
   dc370:	1cb5      	adds	r5, r6, #2
   dc372:	7874      	ldrb	r4, [r6, #1]
   dc374:	2701      	movs	r7, #1
   dc376:	e003      	b.n	dc380 <_strtoul_r+0x3c>
   dc378:	2c2b      	cmp	r4, #43	; 0x2b
   dc37a:	bf04      	itt	eq
   dc37c:	7874      	ldrbeq	r4, [r6, #1]
   dc37e:	1cb5      	addeq	r5, r6, #2
   dc380:	b113      	cbz	r3, dc388 <_strtoul_r+0x44>
   dc382:	2b10      	cmp	r3, #16
   dc384:	d10a      	bne.n	dc39c <_strtoul_r+0x58>
   dc386:	e053      	b.n	dc430 <_strtoul_r+0xec>
   dc388:	2c30      	cmp	r4, #48	; 0x30
   dc38a:	d14f      	bne.n	dc42c <_strtoul_r+0xe8>
   dc38c:	7828      	ldrb	r0, [r5, #0]
   dc38e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc392:	2858      	cmp	r0, #88	; 0x58
   dc394:	d145      	bne.n	dc422 <_strtoul_r+0xde>
   dc396:	786c      	ldrb	r4, [r5, #1]
   dc398:	2310      	movs	r3, #16
   dc39a:	3502      	adds	r5, #2
   dc39c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc3a0:	2600      	movs	r6, #0
   dc3a2:	fbbc fcf3 	udiv	ip, ip, r3
   dc3a6:	fb03 fa0c 	mul.w	sl, r3, ip
   dc3aa:	ea6f 0a0a 	mvn.w	sl, sl
   dc3ae:	4630      	mov	r0, r6
   dc3b0:	eb09 0e04 	add.w	lr, r9, r4
   dc3b4:	f89e e001 	ldrb.w	lr, [lr, #1]
   dc3b8:	f01e 0f04 	tst.w	lr, #4
   dc3bc:	d001      	beq.n	dc3c2 <_strtoul_r+0x7e>
   dc3be:	3c30      	subs	r4, #48	; 0x30
   dc3c0:	e00b      	b.n	dc3da <_strtoul_r+0x96>
   dc3c2:	f01e 0e03 	ands.w	lr, lr, #3
   dc3c6:	d01a      	beq.n	dc3fe <_strtoul_r+0xba>
   dc3c8:	f1be 0f01 	cmp.w	lr, #1
   dc3cc:	bf0c      	ite	eq
   dc3ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   dc3d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   dc3d6:	ebce 0404 	rsb	r4, lr, r4
   dc3da:	42a3      	cmp	r3, r4
   dc3dc:	dd0f      	ble.n	dc3fe <_strtoul_r+0xba>
   dc3de:	2e00      	cmp	r6, #0
   dc3e0:	db08      	blt.n	dc3f4 <_strtoul_r+0xb0>
   dc3e2:	4560      	cmp	r0, ip
   dc3e4:	d806      	bhi.n	dc3f4 <_strtoul_r+0xb0>
   dc3e6:	d101      	bne.n	dc3ec <_strtoul_r+0xa8>
   dc3e8:	4554      	cmp	r4, sl
   dc3ea:	dc03      	bgt.n	dc3f4 <_strtoul_r+0xb0>
   dc3ec:	fb03 4000 	mla	r0, r3, r0, r4
   dc3f0:	2601      	movs	r6, #1
   dc3f2:	e001      	b.n	dc3f8 <_strtoul_r+0xb4>
   dc3f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc3f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   dc3fc:	e7d8      	b.n	dc3b0 <_strtoul_r+0x6c>
   dc3fe:	2e00      	cmp	r6, #0
   dc400:	da07      	bge.n	dc412 <_strtoul_r+0xce>
   dc402:	2322      	movs	r3, #34	; 0x22
   dc404:	f8c8 3000 	str.w	r3, [r8]
   dc408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc40c:	b92a      	cbnz	r2, dc41a <_strtoul_r+0xd6>
   dc40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc412:	b107      	cbz	r7, dc416 <_strtoul_r+0xd2>
   dc414:	4240      	negs	r0, r0
   dc416:	b172      	cbz	r2, dc436 <_strtoul_r+0xf2>
   dc418:	b106      	cbz	r6, dc41c <_strtoul_r+0xd8>
   dc41a:	1e69      	subs	r1, r5, #1
   dc41c:	6011      	str	r1, [r2, #0]
   dc41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc422:	2430      	movs	r4, #48	; 0x30
   dc424:	2b00      	cmp	r3, #0
   dc426:	d1b9      	bne.n	dc39c <_strtoul_r+0x58>
   dc428:	2308      	movs	r3, #8
   dc42a:	e7b7      	b.n	dc39c <_strtoul_r+0x58>
   dc42c:	230a      	movs	r3, #10
   dc42e:	e7b5      	b.n	dc39c <_strtoul_r+0x58>
   dc430:	2c30      	cmp	r4, #48	; 0x30
   dc432:	d0ab      	beq.n	dc38c <_strtoul_r+0x48>
   dc434:	e7b2      	b.n	dc39c <_strtoul_r+0x58>
   dc436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc43a:	bf00      	nop
   dc43c:	2003ddf4 	.word	0x2003ddf4

000dc440 <strtoul>:
   dc440:	4613      	mov	r3, r2
   dc442:	460a      	mov	r2, r1
   dc444:	4601      	mov	r1, r0
   dc446:	4802      	ldr	r0, [pc, #8]	; (dc450 <strtoul+0x10>)
   dc448:	6800      	ldr	r0, [r0, #0]
   dc44a:	f7ff bf7b 	b.w	dc344 <_strtoul_r>
   dc44e:	bf00      	nop
   dc450:	2003de58 	.word	0x2003de58

000dc454 <__get_current_time_locale>:
   dc454:	4b04      	ldr	r3, [pc, #16]	; (dc468 <__get_current_time_locale+0x14>)
   dc456:	4a05      	ldr	r2, [pc, #20]	; (dc46c <__get_current_time_locale+0x18>)
   dc458:	6818      	ldr	r0, [r3, #0]
   dc45a:	4b05      	ldr	r3, [pc, #20]	; (dc470 <__get_current_time_locale+0x1c>)
   dc45c:	2800      	cmp	r0, #0
   dc45e:	bf14      	ite	ne
   dc460:	4610      	movne	r0, r2
   dc462:	4618      	moveq	r0, r3
   dc464:	4770      	bx	lr
   dc466:	bf00      	nop
   dc468:	2003e6c8 	.word	0x2003e6c8
   dc46c:	2003e6cc 	.word	0x2003e6cc
   dc470:	000ddd20 	.word	0x000ddd20

000dc474 <__tzcalc_limits>:
   dc474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc478:	4604      	mov	r4, r0
   dc47a:	f000 fa87 	bl	dc98c <__gettzinfo>
   dc47e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   dc482:	429c      	cmp	r4, r3
   dc484:	f340 8096 	ble.w	dc5b4 <__tzcalc_limits+0x140>
   dc488:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   dc48c:	18e3      	adds	r3, r4, r3
   dc48e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   dc492:	109b      	asrs	r3, r3, #2
   dc494:	f240 156d 	movw	r5, #365	; 0x16d
   dc498:	fb05 3502 	mla	r5, r5, r2, r3
   dc49c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   dc4a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   dc4a4:	fb92 f3f3 	sdiv	r3, r2, r3
   dc4a8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   dc4ac:	442b      	add	r3, r5
   dc4ae:	18a5      	adds	r5, r4, r2
   dc4b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dc4b4:	fb95 f5f2 	sdiv	r5, r5, r2
   dc4b8:	441d      	add	r5, r3
   dc4ba:	2364      	movs	r3, #100	; 0x64
   dc4bc:	fb94 f7f2 	sdiv	r7, r4, r2
   dc4c0:	fb94 f6f3 	sdiv	r6, r4, r3
   dc4c4:	fb02 4717 	mls	r7, r2, r7, r4
   dc4c8:	fb03 4616 	mls	r6, r3, r6, r4
   dc4cc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   dc4d0:	fab7 fe87 	clz	lr, r7
   dc4d4:	9301      	str	r3, [sp, #4]
   dc4d6:	f004 0303 	and.w	r3, r4, #3
   dc4da:	6044      	str	r4, [r0, #4]
   dc4dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   dc4e0:	4601      	mov	r1, r0
   dc4e2:	9300      	str	r3, [sp, #0]
   dc4e4:	f04f 0c07 	mov.w	ip, #7
   dc4e8:	7a0b      	ldrb	r3, [r1, #8]
   dc4ea:	2b4a      	cmp	r3, #74	; 0x4a
   dc4ec:	d10e      	bne.n	dc50c <__tzcalc_limits+0x98>
   dc4ee:	694b      	ldr	r3, [r1, #20]
   dc4f0:	9a00      	ldr	r2, [sp, #0]
   dc4f2:	18ec      	adds	r4, r5, r3
   dc4f4:	b902      	cbnz	r2, dc4f8 <__tzcalc_limits+0x84>
   dc4f6:	b906      	cbnz	r6, dc4fa <__tzcalc_limits+0x86>
   dc4f8:	b927      	cbnz	r7, dc504 <__tzcalc_limits+0x90>
   dc4fa:	2b3b      	cmp	r3, #59	; 0x3b
   dc4fc:	bfd4      	ite	le
   dc4fe:	2300      	movle	r3, #0
   dc500:	2301      	movgt	r3, #1
   dc502:	e000      	b.n	dc506 <__tzcalc_limits+0x92>
   dc504:	2300      	movs	r3, #0
   dc506:	4423      	add	r3, r4
   dc508:	3b01      	subs	r3, #1
   dc50a:	e03f      	b.n	dc58c <__tzcalc_limits+0x118>
   dc50c:	2b44      	cmp	r3, #68	; 0x44
   dc50e:	d102      	bne.n	dc516 <__tzcalc_limits+0xa2>
   dc510:	694b      	ldr	r3, [r1, #20]
   dc512:	442b      	add	r3, r5
   dc514:	e03a      	b.n	dc58c <__tzcalc_limits+0x118>
   dc516:	9b00      	ldr	r3, [sp, #0]
   dc518:	b92b      	cbnz	r3, dc526 <__tzcalc_limits+0xb2>
   dc51a:	2e00      	cmp	r6, #0
   dc51c:	bf0c      	ite	eq
   dc51e:	46f0      	moveq	r8, lr
   dc520:	f04f 0801 	movne.w	r8, #1
   dc524:	e000      	b.n	dc528 <__tzcalc_limits+0xb4>
   dc526:	46f0      	mov	r8, lr
   dc528:	4b24      	ldr	r3, [pc, #144]	; (dc5bc <__tzcalc_limits+0x148>)
   dc52a:	68cc      	ldr	r4, [r1, #12]
   dc52c:	2230      	movs	r2, #48	; 0x30
   dc52e:	fb02 3808 	mla	r8, r2, r8, r3
   dc532:	f1a8 0a04 	sub.w	sl, r8, #4
   dc536:	46a9      	mov	r9, r5
   dc538:	2301      	movs	r3, #1
   dc53a:	42a3      	cmp	r3, r4
   dc53c:	da04      	bge.n	dc548 <__tzcalc_limits+0xd4>
   dc53e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   dc542:	3301      	adds	r3, #1
   dc544:	44d9      	add	r9, fp
   dc546:	e7f8      	b.n	dc53a <__tzcalc_limits+0xc6>
   dc548:	f109 0304 	add.w	r3, r9, #4
   dc54c:	fb93 fbfc 	sdiv	fp, r3, ip
   dc550:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   dc554:	2c01      	cmp	r4, #1
   dc556:	ebca 0a03 	rsb	sl, sl, r3
   dc55a:	694b      	ldr	r3, [r1, #20]
   dc55c:	bfb8      	it	lt
   dc55e:	2401      	movlt	r4, #1
   dc560:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   dc564:	ebb3 0a0a 	subs.w	sl, r3, sl
   dc568:	690b      	ldr	r3, [r1, #16]
   dc56a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   dc56e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   dc572:	bf48      	it	mi
   dc574:	f10a 0a07 	addmi.w	sl, sl, #7
   dc578:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dc57c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   dc580:	4453      	add	r3, sl
   dc582:	42a3      	cmp	r3, r4
   dc584:	db01      	blt.n	dc58a <__tzcalc_limits+0x116>
   dc586:	3b07      	subs	r3, #7
   dc588:	e7fb      	b.n	dc582 <__tzcalc_limits+0x10e>
   dc58a:	444b      	add	r3, r9
   dc58c:	698c      	ldr	r4, [r1, #24]
   dc58e:	4a0c      	ldr	r2, [pc, #48]	; (dc5c0 <__tzcalc_limits+0x14c>)
   dc590:	fb02 4303 	mla	r3, r2, r3, r4
   dc594:	6a0c      	ldr	r4, [r1, #32]
   dc596:	4423      	add	r3, r4
   dc598:	f841 3f1c 	str.w	r3, [r1, #28]!
   dc59c:	9b01      	ldr	r3, [sp, #4]
   dc59e:	4299      	cmp	r1, r3
   dc5a0:	d1a2      	bne.n	dc4e8 <__tzcalc_limits+0x74>
   dc5a2:	69c3      	ldr	r3, [r0, #28]
   dc5a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dc5a6:	4293      	cmp	r3, r2
   dc5a8:	bfac      	ite	ge
   dc5aa:	2300      	movge	r3, #0
   dc5ac:	2301      	movlt	r3, #1
   dc5ae:	6003      	str	r3, [r0, #0]
   dc5b0:	2001      	movs	r0, #1
   dc5b2:	e000      	b.n	dc5b6 <__tzcalc_limits+0x142>
   dc5b4:	2000      	movs	r0, #0
   dc5b6:	b003      	add	sp, #12
   dc5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5bc:	000ddb38 	.word	0x000ddb38
   dc5c0:	00015180 	.word	0x00015180

000dc5c4 <__tz_lock>:
   dc5c4:	4770      	bx	lr

000dc5c6 <__tz_unlock>:
   dc5c6:	4770      	bx	lr

000dc5c8 <_tzset_unlocked>:
   dc5c8:	4b01      	ldr	r3, [pc, #4]	; (dc5d0 <_tzset_unlocked+0x8>)
   dc5ca:	6818      	ldr	r0, [r3, #0]
   dc5cc:	f000 b802 	b.w	dc5d4 <_tzset_unlocked_r>
   dc5d0:	2003de58 	.word	0x2003de58

000dc5d4 <_tzset_unlocked_r>:
   dc5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc5d8:	b08d      	sub	sp, #52	; 0x34
   dc5da:	4607      	mov	r7, r0
   dc5dc:	f000 f9d6 	bl	dc98c <__gettzinfo>
   dc5e0:	49b0      	ldr	r1, [pc, #704]	; (dc8a4 <_tzset_unlocked_r+0x2d0>)
   dc5e2:	4eb1      	ldr	r6, [pc, #708]	; (dc8a8 <_tzset_unlocked_r+0x2d4>)
   dc5e4:	4604      	mov	r4, r0
   dc5e6:	4638      	mov	r0, r7
   dc5e8:	f000 f9c8 	bl	dc97c <_getenv_r>
   dc5ec:	4605      	mov	r5, r0
   dc5ee:	b960      	cbnz	r0, dc60a <_tzset_unlocked_r+0x36>
   dc5f0:	4bae      	ldr	r3, [pc, #696]	; (dc8ac <_tzset_unlocked_r+0x2d8>)
   dc5f2:	4aaf      	ldr	r2, [pc, #700]	; (dc8b0 <_tzset_unlocked_r+0x2dc>)
   dc5f4:	6018      	str	r0, [r3, #0]
   dc5f6:	4baf      	ldr	r3, [pc, #700]	; (dc8b4 <_tzset_unlocked_r+0x2e0>)
   dc5f8:	6018      	str	r0, [r3, #0]
   dc5fa:	4baf      	ldr	r3, [pc, #700]	; (dc8b8 <_tzset_unlocked_r+0x2e4>)
   dc5fc:	6830      	ldr	r0, [r6, #0]
   dc5fe:	601a      	str	r2, [r3, #0]
   dc600:	605a      	str	r2, [r3, #4]
   dc602:	f7fb fe79 	bl	d82f8 <free>
   dc606:	6035      	str	r5, [r6, #0]
   dc608:	e148      	b.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc60a:	6831      	ldr	r1, [r6, #0]
   dc60c:	b979      	cbnz	r1, dc62e <_tzset_unlocked_r+0x5a>
   dc60e:	6830      	ldr	r0, [r6, #0]
   dc610:	f7fb fe72 	bl	d82f8 <free>
   dc614:	4628      	mov	r0, r5
   dc616:	f7ff fdd5 	bl	dc1c4 <strlen>
   dc61a:	1c41      	adds	r1, r0, #1
   dc61c:	4638      	mov	r0, r7
   dc61e:	f7fb feab 	bl	d8378 <_malloc_r>
   dc622:	6030      	str	r0, [r6, #0]
   dc624:	b148      	cbz	r0, dc63a <_tzset_unlocked_r+0x66>
   dc626:	4629      	mov	r1, r5
   dc628:	f7ff f894 	bl	db754 <strcpy>
   dc62c:	e005      	b.n	dc63a <_tzset_unlocked_r+0x66>
   dc62e:	f7ff f887 	bl	db740 <strcmp>
   dc632:	2800      	cmp	r0, #0
   dc634:	f000 8132 	beq.w	dc89c <_tzset_unlocked_r+0x2c8>
   dc638:	e7e9      	b.n	dc60e <_tzset_unlocked_r+0x3a>
   dc63a:	782b      	ldrb	r3, [r5, #0]
   dc63c:	4a9f      	ldr	r2, [pc, #636]	; (dc8bc <_tzset_unlocked_r+0x2e8>)
   dc63e:	49a0      	ldr	r1, [pc, #640]	; (dc8c0 <_tzset_unlocked_r+0x2ec>)
   dc640:	2b3a      	cmp	r3, #58	; 0x3a
   dc642:	bf08      	it	eq
   dc644:	3501      	addeq	r5, #1
   dc646:	ae0a      	add	r6, sp, #40	; 0x28
   dc648:	4633      	mov	r3, r6
   dc64a:	4628      	mov	r0, r5
   dc64c:	f7fb fe6c 	bl	d8328 <siscanf>
   dc650:	2800      	cmp	r0, #0
   dc652:	f340 8123 	ble.w	dc89c <_tzset_unlocked_r+0x2c8>
   dc656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc658:	18ef      	adds	r7, r5, r3
   dc65a:	5ceb      	ldrb	r3, [r5, r3]
   dc65c:	2b2d      	cmp	r3, #45	; 0x2d
   dc65e:	d103      	bne.n	dc668 <_tzset_unlocked_r+0x94>
   dc660:	3701      	adds	r7, #1
   dc662:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dc666:	e003      	b.n	dc670 <_tzset_unlocked_r+0x9c>
   dc668:	2b2b      	cmp	r3, #43	; 0x2b
   dc66a:	bf08      	it	eq
   dc66c:	3701      	addeq	r7, #1
   dc66e:	2501      	movs	r5, #1
   dc670:	f10d 0a20 	add.w	sl, sp, #32
   dc674:	f10d 0b1e 	add.w	fp, sp, #30
   dc678:	f04f 0800 	mov.w	r8, #0
   dc67c:	9603      	str	r6, [sp, #12]
   dc67e:	f8cd a008 	str.w	sl, [sp, #8]
   dc682:	9601      	str	r6, [sp, #4]
   dc684:	f8cd b000 	str.w	fp, [sp]
   dc688:	4633      	mov	r3, r6
   dc68a:	aa07      	add	r2, sp, #28
   dc68c:	498d      	ldr	r1, [pc, #564]	; (dc8c4 <_tzset_unlocked_r+0x2f0>)
   dc68e:	f8ad 801e 	strh.w	r8, [sp, #30]
   dc692:	4638      	mov	r0, r7
   dc694:	f8ad 8020 	strh.w	r8, [sp, #32]
   dc698:	f7fb fe46 	bl	d8328 <siscanf>
   dc69c:	4540      	cmp	r0, r8
   dc69e:	f340 80fd 	ble.w	dc89c <_tzset_unlocked_r+0x2c8>
   dc6a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc6a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc6aa:	f8df 9224 	ldr.w	r9, [pc, #548]	; dc8d0 <_tzset_unlocked_r+0x2fc>
   dc6ae:	213c      	movs	r1, #60	; 0x3c
   dc6b0:	fb01 3302 	mla	r3, r1, r2, r3
   dc6b4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc6b8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc6bc:	fb01 3302 	mla	r3, r1, r2, r3
   dc6c0:	435d      	muls	r5, r3
   dc6c2:	6225      	str	r5, [r4, #32]
   dc6c4:	4d7c      	ldr	r5, [pc, #496]	; (dc8b8 <_tzset_unlocked_r+0x2e4>)
   dc6c6:	4b7d      	ldr	r3, [pc, #500]	; (dc8bc <_tzset_unlocked_r+0x2e8>)
   dc6c8:	602b      	str	r3, [r5, #0]
   dc6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc6cc:	497c      	ldr	r1, [pc, #496]	; (dc8c0 <_tzset_unlocked_r+0x2ec>)
   dc6ce:	441f      	add	r7, r3
   dc6d0:	464a      	mov	r2, r9
   dc6d2:	4633      	mov	r3, r6
   dc6d4:	4638      	mov	r0, r7
   dc6d6:	f7fb fe27 	bl	d8328 <siscanf>
   dc6da:	4540      	cmp	r0, r8
   dc6dc:	dc08      	bgt.n	dc6f0 <_tzset_unlocked_r+0x11c>
   dc6de:	682b      	ldr	r3, [r5, #0]
   dc6e0:	606b      	str	r3, [r5, #4]
   dc6e2:	4b72      	ldr	r3, [pc, #456]	; (dc8ac <_tzset_unlocked_r+0x2d8>)
   dc6e4:	6a22      	ldr	r2, [r4, #32]
   dc6e6:	601a      	str	r2, [r3, #0]
   dc6e8:	4b72      	ldr	r3, [pc, #456]	; (dc8b4 <_tzset_unlocked_r+0x2e0>)
   dc6ea:	f8c3 8000 	str.w	r8, [r3]
   dc6ee:	e0d5      	b.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc6f2:	f8c5 9004 	str.w	r9, [r5, #4]
   dc6f6:	18fd      	adds	r5, r7, r3
   dc6f8:	5cfb      	ldrb	r3, [r7, r3]
   dc6fa:	2b2d      	cmp	r3, #45	; 0x2d
   dc6fc:	d103      	bne.n	dc706 <_tzset_unlocked_r+0x132>
   dc6fe:	3501      	adds	r5, #1
   dc700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dc704:	e003      	b.n	dc70e <_tzset_unlocked_r+0x13a>
   dc706:	2b2b      	cmp	r3, #43	; 0x2b
   dc708:	bf08      	it	eq
   dc70a:	3501      	addeq	r5, #1
   dc70c:	2701      	movs	r7, #1
   dc70e:	2300      	movs	r3, #0
   dc710:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc714:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc718:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc71c:	930a      	str	r3, [sp, #40]	; 0x28
   dc71e:	9603      	str	r6, [sp, #12]
   dc720:	f8cd a008 	str.w	sl, [sp, #8]
   dc724:	9601      	str	r6, [sp, #4]
   dc726:	f8cd b000 	str.w	fp, [sp]
   dc72a:	4633      	mov	r3, r6
   dc72c:	aa07      	add	r2, sp, #28
   dc72e:	4965      	ldr	r1, [pc, #404]	; (dc8c4 <_tzset_unlocked_r+0x2f0>)
   dc730:	4628      	mov	r0, r5
   dc732:	f7fb fdf9 	bl	d8328 <siscanf>
   dc736:	2800      	cmp	r0, #0
   dc738:	dc04      	bgt.n	dc744 <_tzset_unlocked_r+0x170>
   dc73a:	6a23      	ldr	r3, [r4, #32]
   dc73c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dc740:	63e3      	str	r3, [r4, #60]	; 0x3c
   dc742:	e00e      	b.n	dc762 <_tzset_unlocked_r+0x18e>
   dc744:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc748:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc74c:	213c      	movs	r1, #60	; 0x3c
   dc74e:	fb01 3302 	mla	r3, r1, r2, r3
   dc752:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc756:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc75a:	fb01 3302 	mla	r3, r1, r2, r3
   dc75e:	435f      	muls	r7, r3
   dc760:	63e7      	str	r7, [r4, #60]	; 0x3c
   dc762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc764:	4627      	mov	r7, r4
   dc766:	441d      	add	r5, r3
   dc768:	f04f 0900 	mov.w	r9, #0
   dc76c:	782b      	ldrb	r3, [r5, #0]
   dc76e:	2b2c      	cmp	r3, #44	; 0x2c
   dc770:	bf08      	it	eq
   dc772:	3501      	addeq	r5, #1
   dc774:	f895 8000 	ldrb.w	r8, [r5]
   dc778:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dc77c:	d126      	bne.n	dc7cc <_tzset_unlocked_r+0x1f8>
   dc77e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dc782:	9302      	str	r3, [sp, #8]
   dc784:	ab09      	add	r3, sp, #36	; 0x24
   dc786:	9300      	str	r3, [sp, #0]
   dc788:	9603      	str	r6, [sp, #12]
   dc78a:	9601      	str	r6, [sp, #4]
   dc78c:	4633      	mov	r3, r6
   dc78e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dc792:	494d      	ldr	r1, [pc, #308]	; (dc8c8 <_tzset_unlocked_r+0x2f4>)
   dc794:	4628      	mov	r0, r5
   dc796:	f7fb fdc7 	bl	d8328 <siscanf>
   dc79a:	2803      	cmp	r0, #3
   dc79c:	d17e      	bne.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc79e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dc7a2:	1e4b      	subs	r3, r1, #1
   dc7a4:	2b0b      	cmp	r3, #11
   dc7a6:	d879      	bhi.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc7a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dc7ac:	1e53      	subs	r3, r2, #1
   dc7ae:	2b04      	cmp	r3, #4
   dc7b0:	d874      	bhi.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc7b2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dc7b6:	2b06      	cmp	r3, #6
   dc7b8:	d870      	bhi.n	dc89c <_tzset_unlocked_r+0x2c8>
   dc7ba:	f887 8008 	strb.w	r8, [r7, #8]
   dc7be:	60f9      	str	r1, [r7, #12]
   dc7c0:	613a      	str	r2, [r7, #16]
   dc7c2:	617b      	str	r3, [r7, #20]
   dc7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc7c6:	eb05 0803 	add.w	r8, r5, r3
   dc7ca:	e02a      	b.n	dc822 <_tzset_unlocked_r+0x24e>
   dc7cc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dc7d0:	bf06      	itte	eq
   dc7d2:	3501      	addeq	r5, #1
   dc7d4:	4643      	moveq	r3, r8
   dc7d6:	2344      	movne	r3, #68	; 0x44
   dc7d8:	220a      	movs	r2, #10
   dc7da:	a90b      	add	r1, sp, #44	; 0x2c
   dc7dc:	4628      	mov	r0, r5
   dc7de:	9305      	str	r3, [sp, #20]
   dc7e0:	f7ff fe2e 	bl	dc440 <strtoul>
   dc7e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dc7e8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dc7ec:	4545      	cmp	r5, r8
   dc7ee:	9b05      	ldr	r3, [sp, #20]
   dc7f0:	d114      	bne.n	dc81c <_tzset_unlocked_r+0x248>
   dc7f2:	234d      	movs	r3, #77	; 0x4d
   dc7f4:	f1b9 0f00 	cmp.w	r9, #0
   dc7f8:	d107      	bne.n	dc80a <_tzset_unlocked_r+0x236>
   dc7fa:	7223      	strb	r3, [r4, #8]
   dc7fc:	2303      	movs	r3, #3
   dc7fe:	60e3      	str	r3, [r4, #12]
   dc800:	2302      	movs	r3, #2
   dc802:	6123      	str	r3, [r4, #16]
   dc804:	f8c4 9014 	str.w	r9, [r4, #20]
   dc808:	e00b      	b.n	dc822 <_tzset_unlocked_r+0x24e>
   dc80a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dc80e:	230b      	movs	r3, #11
   dc810:	62a3      	str	r3, [r4, #40]	; 0x28
   dc812:	2301      	movs	r3, #1
   dc814:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc816:	2300      	movs	r3, #0
   dc818:	6323      	str	r3, [r4, #48]	; 0x30
   dc81a:	e002      	b.n	dc822 <_tzset_unlocked_r+0x24e>
   dc81c:	b280      	uxth	r0, r0
   dc81e:	723b      	strb	r3, [r7, #8]
   dc820:	6178      	str	r0, [r7, #20]
   dc822:	2302      	movs	r3, #2
   dc824:	f8ad 301c 	strh.w	r3, [sp, #28]
   dc828:	2300      	movs	r3, #0
   dc82a:	f8ad 301e 	strh.w	r3, [sp, #30]
   dc82e:	f8ad 3020 	strh.w	r3, [sp, #32]
   dc832:	930a      	str	r3, [sp, #40]	; 0x28
   dc834:	f898 3000 	ldrb.w	r3, [r8]
   dc838:	2b2f      	cmp	r3, #47	; 0x2f
   dc83a:	d10b      	bne.n	dc854 <_tzset_unlocked_r+0x280>
   dc83c:	9603      	str	r6, [sp, #12]
   dc83e:	f8cd a008 	str.w	sl, [sp, #8]
   dc842:	9601      	str	r6, [sp, #4]
   dc844:	f8cd b000 	str.w	fp, [sp]
   dc848:	4633      	mov	r3, r6
   dc84a:	aa07      	add	r2, sp, #28
   dc84c:	491f      	ldr	r1, [pc, #124]	; (dc8cc <_tzset_unlocked_r+0x2f8>)
   dc84e:	4640      	mov	r0, r8
   dc850:	f7fb fd6a 	bl	d8328 <siscanf>
   dc854:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dc858:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dc85c:	213c      	movs	r1, #60	; 0x3c
   dc85e:	fb01 3302 	mla	r3, r1, r2, r3
   dc862:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dc866:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dc86a:	fb01 3302 	mla	r3, r1, r2, r3
   dc86e:	61bb      	str	r3, [r7, #24]
   dc870:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dc872:	f109 0901 	add.w	r9, r9, #1
   dc876:	f1b9 0f02 	cmp.w	r9, #2
   dc87a:	4445      	add	r5, r8
   dc87c:	f107 071c 	add.w	r7, r7, #28
   dc880:	f47f af74 	bne.w	dc76c <_tzset_unlocked_r+0x198>
   dc884:	6860      	ldr	r0, [r4, #4]
   dc886:	f7ff fdf5 	bl	dc474 <__tzcalc_limits>
   dc88a:	4b08      	ldr	r3, [pc, #32]	; (dc8ac <_tzset_unlocked_r+0x2d8>)
   dc88c:	6a22      	ldr	r2, [r4, #32]
   dc88e:	601a      	str	r2, [r3, #0]
   dc890:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dc892:	1a9b      	subs	r3, r3, r2
   dc894:	4a07      	ldr	r2, [pc, #28]	; (dc8b4 <_tzset_unlocked_r+0x2e0>)
   dc896:	bf18      	it	ne
   dc898:	2301      	movne	r3, #1
   dc89a:	6013      	str	r3, [r2, #0]
   dc89c:	b00d      	add	sp, #52	; 0x34
   dc89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8a2:	bf00      	nop
   dc8a4:	000dde1c 	.word	0x000dde1c
   dc8a8:	2003e7e0 	.word	0x2003e7e0
   dc8ac:	2003e7e8 	.word	0x2003e7e8
   dc8b0:	000dde1f 	.word	0x000dde1f
   dc8b4:	2003e7e4 	.word	0x2003e7e4
   dc8b8:	2003de5c 	.word	0x2003de5c
   dc8bc:	2003e7d3 	.word	0x2003e7d3
   dc8c0:	000dde23 	.word	0x000dde23
   dc8c4:	000dde46 	.word	0x000dde46
   dc8c8:	000dde32 	.word	0x000dde32
   dc8cc:	000dde45 	.word	0x000dde45
   dc8d0:	2003e7c8 	.word	0x2003e7c8

000dc8d4 <abs>:
   dc8d4:	2800      	cmp	r0, #0
   dc8d6:	bfb8      	it	lt
   dc8d8:	4240      	neglt	r0, r0
   dc8da:	4770      	bx	lr

000dc8dc <div>:
   dc8dc:	2900      	cmp	r1, #0
   dc8de:	b510      	push	{r4, lr}
   dc8e0:	fb91 f4f2 	sdiv	r4, r1, r2
   dc8e4:	fb02 1314 	mls	r3, r2, r4, r1
   dc8e8:	db04      	blt.n	dc8f4 <div+0x18>
   dc8ea:	2b00      	cmp	r3, #0
   dc8ec:	da07      	bge.n	dc8fe <div+0x22>
   dc8ee:	3401      	adds	r4, #1
   dc8f0:	1a9b      	subs	r3, r3, r2
   dc8f2:	e004      	b.n	dc8fe <div+0x22>
   dc8f4:	2b00      	cmp	r3, #0
   dc8f6:	bfc4      	itt	gt
   dc8f8:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc8fc:	189b      	addgt	r3, r3, r2
   dc8fe:	6004      	str	r4, [r0, #0]
   dc900:	6043      	str	r3, [r0, #4]
   dc902:	bd10      	pop	{r4, pc}

000dc904 <_findenv_r>:
   dc904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc908:	4607      	mov	r7, r0
   dc90a:	468b      	mov	fp, r1
   dc90c:	4690      	mov	r8, r2
   dc90e:	f000 f845 	bl	dc99c <__env_lock>
   dc912:	4b19      	ldr	r3, [pc, #100]	; (dc978 <_findenv_r+0x74>)
   dc914:	681d      	ldr	r5, [r3, #0]
   dc916:	469a      	mov	sl, r3
   dc918:	b13d      	cbz	r5, dc92a <_findenv_r+0x26>
   dc91a:	465c      	mov	r4, fp
   dc91c:	4623      	mov	r3, r4
   dc91e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc922:	b142      	cbz	r2, dc936 <_findenv_r+0x32>
   dc924:	2a3d      	cmp	r2, #61	; 0x3d
   dc926:	461c      	mov	r4, r3
   dc928:	d1f8      	bne.n	dc91c <_findenv_r+0x18>
   dc92a:	4638      	mov	r0, r7
   dc92c:	f000 f837 	bl	dc99e <__env_unlock>
   dc930:	2000      	movs	r0, #0
   dc932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc936:	ebcb 0404 	rsb	r4, fp, r4
   dc93a:	46a9      	mov	r9, r5
   dc93c:	f859 0b04 	ldr.w	r0, [r9], #4
   dc940:	2800      	cmp	r0, #0
   dc942:	d0f2      	beq.n	dc92a <_findenv_r+0x26>
   dc944:	4622      	mov	r2, r4
   dc946:	4659      	mov	r1, fp
   dc948:	f7ff fc44 	bl	dc1d4 <strncmp>
   dc94c:	b988      	cbnz	r0, dc972 <_findenv_r+0x6e>
   dc94e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dc952:	191e      	adds	r6, r3, r4
   dc954:	5d1b      	ldrb	r3, [r3, r4]
   dc956:	2b3d      	cmp	r3, #61	; 0x3d
   dc958:	d10b      	bne.n	dc972 <_findenv_r+0x6e>
   dc95a:	f8da 3000 	ldr.w	r3, [sl]
   dc95e:	1aed      	subs	r5, r5, r3
   dc960:	10ad      	asrs	r5, r5, #2
   dc962:	4638      	mov	r0, r7
   dc964:	f8c8 5000 	str.w	r5, [r8]
   dc968:	f000 f819 	bl	dc99e <__env_unlock>
   dc96c:	1c70      	adds	r0, r6, #1
   dc96e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc972:	464d      	mov	r5, r9
   dc974:	e7e1      	b.n	dc93a <_findenv_r+0x36>
   dc976:	bf00      	nop
   dc978:	2003dea4 	.word	0x2003dea4

000dc97c <_getenv_r>:
   dc97c:	b507      	push	{r0, r1, r2, lr}
   dc97e:	aa01      	add	r2, sp, #4
   dc980:	f7ff ffc0 	bl	dc904 <_findenv_r>
   dc984:	b003      	add	sp, #12
   dc986:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dc98c <__gettzinfo>:
   dc98c:	4800      	ldr	r0, [pc, #0]	; (dc990 <__gettzinfo+0x4>)
   dc98e:	4770      	bx	lr
   dc990:	2003de64 	.word	0x2003de64

000dc994 <labs>:
   dc994:	2800      	cmp	r0, #0
   dc996:	bfb8      	it	lt
   dc998:	4240      	neglt	r0, r0
   dc99a:	4770      	bx	lr

000dc99c <__env_lock>:
   dc99c:	4770      	bx	lr

000dc99e <__env_unlock>:
   dc99e:	4770      	bx	lr

000dc9a0 <dynalib_user>:
   dc9a0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   dc9b0:	0000 0000                                   ....

000dc9b4 <_ZTV8MB85RC64>:
	...
   dc9bc:	4181 000d 4195 000d 5ac1 000d 5b6d 000d     .A...A...Z..m[..
   dc9cc:	5be7 000d                                   .[..

000dc9d0 <_ZTV17PublishQueueAsync>:
	...
   dc9d8:	4159 000d 416d 000d 6a05 000d 6ba5 000d     YA..mA...j...k..
   dc9e8:	6b61 000d 6b3f 000d 6ceb 000d 6b87 000d     ak..?k...l...k..
   dc9f8:	cde8 000d ce23 000d ce28 000d ce2d 000d     ....#...(...-...
   dca08:	ce31 000d ce36 000d ce3b 000d ce3f 000d     1...6...;...?...
   dca18:	ce4a 000d ce55 000d cde8 000d cdf0 000d     J...U...........
   dca28:	cdf4 000d cdfd 000d ce05 000d ce11 000d     ................
   dca38:	ce17 000d                                   ....

000dca3c <_ZL17FRAMversionNumber>:
   dca3c:	0001 0000 6f4e 4420 7461 0061 6255 6469     ....No Data.Ubid
   dca4c:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dca5c:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dca6c:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dca7c:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
   dca8c:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
   dca9c:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dcaac:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dcabc:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
   dcacc:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
   dcadc:	7465 2520 0069 6954 656d 5300 6d61 6c70     et %i.Time.Sampl
   dcaec:	2065 6e49 6574 7672 6c61 6920 2073 6f6e     e Interval is no
   dcafc:	2077 6925 6d20 6e69 7475 7365 7b00 6322     w %i minutes.{"c
   dcb0c:	6261 6e69 2254 253a 2e34 6632 202c 7622     abinT":%4.2f, "v
   dcb1c:	6e65 5474 3a22 3425 322e 2c66 2220 756f     entT":%4.2f, "ou
   dcb2c:	7374 6469 5465 3a22 3425 322e 2c66 2220     tsideT":%4.2f, "
   dcb3c:	6162 7474 7265 2279 253a 2c69 2020 6b22     battery":%i,  "k
   dcb4c:	7965 2231 223a 7325 2c22 2220 6572 6573     ey1":"%s", "rese
   dcb5c:	7374 3a22 6925 202c 6122 656c 7472 2273     ts":%i, "alerts"
   dcb6c:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
   dcb7c:	253a 756c 3030 2c30 2220 616c 2274 253a     :%lu000, "lat":%
   dcb8c:	2c66 2220 6e6c 2267 253a 7d66 5500 6962     f, "lng":%f}.Ubi
   dcb9c:	6f64 7374 4d2d 5442 2d41 6f48 6b6f 762d     dots-MBTA-Hook-v
   dcbac:	0031 6e49 6176 696c 2064 6572 6461 6e69     1.Invalid readin
   dcbbc:	0067 7325 5320 253a 2e32 6630 2525 202c     g.%s S:%2.0f%%, 
   dcbcc:	3a51 3225 302e 2566 2025 4600 6f72 206d     Q:%2.0f%% .From 
   dcbdc:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
   dcbec:	6172 736e 7469 6f69 006e 5441 432b 5546     ransition.AT+CFU
   dcbfc:	3d4e 3531 0a0d 5200 6e75 696e 676e 4400     N=15...Running.D
   dcc0c:	6961 796c 4320 656c 6e61 7075 4400 5453     aily Cleanup.DST
   dcc1c:	6f20 6666 6573 2074 3225 312e 0066 6f6c      offset %2.1f.lo
   dcc2c:	6163 6974 6e6f 253a 2c66 6625 6120 746c     cation:%f,%f alt
   dcc3c:	7469 6475 3a65 6625 7320 7461 6c65 696c     itude:%f satelli
   dcc4c:	6574 3a73 6425 6820 6f64 3a70 6c25 2500     tes:%d hdop:%l.%
   dcc5c:	756c 6d20 6c69 696c 6573 6f63 646e 2073     lu milliseconds 
   dcc6c:	6f74 6720 7465 4720 5350 6620 7869 6e00     to get GPS fix.n
   dcc7c:	206f 6f6c 6163 6974 6e6f 7320 7461 6c65     o location satel
   dcc8c:	696c 6574 3a73 6425 6700 7370 2500 2e34     lites:%d.gps.%4.
   dcc9c:	6632 4320 7300 6170 6b72 642f 7665 6369     2f C.spark/devic
   dccac:	2f65 6573 7373 6f69 2f6e 6e65 0064 7245     e/session/end.Er
   dccbc:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   dcccc:	0074 7453 7461 0065 7245 6f72 2072 7453     t.State.Error St
   dccdc:	7461 2065 202d 6f50 6577 2072 7943 6c63     ate - Power Cycl
   dccec:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
   dccfc:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   dcd0c:	4c00 616f 6964 676e 5320 7379 6574 206d     .Loading System 
   dcd1c:	6544 6166 6c75 7374 5300 6769 616e 006c     Defaults.Signal.
   dcd2c:	6153 706d 656c 6e49 6574 7672 6c61 5200     SampleInterval.R
   dcd3c:	7365 7465 6f43 6e75 0074 6143 6962 546e     esetCount.CabinT
   dcd4c:	6d65 0070 6556 746e 6554 706d 4f00 7475     emp.VentTemp.Out
   dcd5c:	6973 6564 6554 706d 5200 6c65 6165 6573     sideTemp.Release
   dcd6c:	7300 6174 6574 664f 6843 0067 6c41 7265     .stateOfChg.Aler
   dcd7c:	7374 5400 6d69 4f65 6666 6573 0074 6142     ts.TimeOffset.Ba
   dcd8c:	7474 7265 4379 6e6f 6574 7478 7200 7365     tteryContext.res
   dcd9c:	7465 5246 4d41 4800 7261 5264 7365 7465     etFRAM.HardReset
   dcdac:	5300 6e65 4e64 776f 5600 7265 6f62 6573     .SendNow.Verbose
   dcdbc:	4d2d 646f 0065 6553 2d74 6954 656d 6f7a     -Mode.Set-Timezo
   dcdcc:	656e 5300 7465 442d 5453 664f 7366 7465     ne.Set-DSTOffset
   dcddc:	5300 6d61 6c70 5265 7461 0065 6e55 6e6b     .SampleRate.Unkn
   dcdec:	776f 006e 6f4e 2074 6843 7261 6967 676e     own.Not Charging
   dcdfc:	4300 6168 6772 6465 4400 7369 6863 7261     .Charged.Dischar
   dce0c:	6967 676e 4600 7561 746c 4400 6369 6e6f     ging.Fault.Dicon
   dce1c:	656e 7463 6465 4e00 6e6f 0065 6957 6946     nected.None.WiFi
   dce2c:	4700 4d53 5500 544d 0053 4443 414d 4c00     .GSM.UMTS.CDMA.L
   dce3c:	4554 4900 4545 3845 3230 3531 0034 544c     TE.IEEE802154.LT
   dce4c:	5f45 4143 5f54 314d 4c00 4554 435f 5441     E_CAT_M1.LTE_CAT
   dce5c:	4e5f 3142 7700 6972 6574 6144 6174 6620     _NB1.writeData f
   dce6c:	6961 656c 2064 7564 6972 676e 6520 6172     ailed during era
   dce7c:	6573 6620 6172 416d 6464 3d72 7525 7200     se framAddr=%u.r
   dce8c:	6165 2064 6573 2074 6461 7264 7365 2073     ead set address 
   dce9c:	6166 6c69 6465 2520 0064 6964 6e64 7427     failed %d.didn't
   dceac:	7220 6365 6965 6576 6520 6f6e 6775 2068      receive enough 
   dcebc:	7962 6574 2073 6f63 6e75 3d74 7525 7700     bytes count=%u.w
   dcecc:	6972 6574 6620 6961 656c 2064 6425 0000     rite failed %d..

000dcedc <_ZTV6MB85RC>:
	...
   dcee4:	5a11 000d 5a13 000d 5ac1 000d 5b6d 000d     .Z...Z...Z..m[..
   dcef4:	5be7 000d                                   .[..

000dcef8 <_ZTV14MCP79410EEPROM>:
	...
   dcf00:	5caf 000d 5cd1 000d 5ca5 000d 5ca9 000d     .\...\...\...\..
   dcf10:	5ced 000d 6121 000d 653d 000d               .\..!a..=e..

000dcf1c <_ZTV12MCP79410SRAM>:
	...
   dcf24:	5cad 000d 5cc3 000d 5c9d 000d 5ca1 000d     .\...\...\...\..
   dcf34:	5ced 000d 6159 000d 63a7 000d 6579 7261     .\..Ya...c..year
   dcf44:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dcf54:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dcf64:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dcf74:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dcf84:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dcf94:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dcfa4:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dcfb4:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dcfc4:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dcfd4:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dcfe4:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dcff4:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dd004:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dd014:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dd024:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dd034:	7061 2e70 7472 0063                         app.rtc.

000dd03c <_ZTV12MCP79410Time>:
	...
   dd044:	5cb1 000d 5cb5 000d                         .\...\..

000dd04c <_ZTV8MCP79410>:
	...
   dd054:	5cb3 000d 5cdf 000d                         .\...\..

000dd05c <_ZTV25PublishQueueAsyncRetained>:
	...
   dd064:	6afd 000d 6b11 000d 6a05 000d 6ba5 000d     .j...k...j...k..
   dd074:	6b61 000d 6b3f 000d 6ceb 000d 6b87 000d     ak..?k...l...k..
   dd084:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
   dd094:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
   dd0a4:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
   dd0b4:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
   dd0c4:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
   dd0d4:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
   dd0e4:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
   dd0f4:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
   dd104:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
   dd114:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
   dd124:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
   dd134:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

000dd140 <_ZTV21PublishQueueAsyncBase>:
	...
   dd150:	6a05 000d 40a9 000d 40a9 000d 40a9 000d     .j...@...@...@..
   dd160:	40a9 000d 40a9 000d                         .@...@..

000dd168 <_ZTVN8particle13__SPISettingsE>:
	...
   dd170:	6f85 000d 6564 6166 6c75 2074 4d00 4253     .o..default .MSB
   dd180:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dd190:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dd1a0:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   dd1b0:	4d20 444f 2545 3e64 4100 7373 7465 7254      MODE%d>.AssetTr
   dd1c0:	6361 656b 0072 6977 6572 6552 6461 7942     acker.wireReadBy
   dd1d0:	6574 4173 6176 6c69 6261 656c 4920 4332     tesAvailable I2C
   dd1e0:	6520 7272 726f 2520 0075 6977 6572 6552      error %u.wireRe
   dd1f0:	6461 7942 6574 4173 6176 6c69 6261 656c     adBytesAvailable
   dd200:	6920 636e 726f 6572 7463 6320 756f 746e      incorrect count
   dd210:	2520 0075 6977 6572 6552 6461 7942 6574      %u.wireReadByte
   dd220:	2073 3249 2043 7265 6f72 2072 7525 7700     s I2C error %u.w
   dd230:	7269 5265 6165 4264 7479 7365 6920 636e     ireReadBytes inc
   dd240:	726f 6572 7463 6320 756f 746e 2520 0075     orrect count %u.

000dd250 <_ZTV12AssetTracker>:
	...
   dd258:	6fdd 000d 6ff9 000d                         .o...o..

000dd260 <_ZTV13LegacyAdapter>:
	...
   dd268:	7375 000d 7377 000d 5047 4d52 0043 4e47     us..ws..GPRMC.GN
   dd278:	4d52 0043 5047 4747 0041 4e47 4747 0041     RMC.GPGGA.GNGGA.
   dd288:	004e 4e4e 0045 4e45 0045 5345 0045 5353     N.NNE.ENE.ESE.SS
   dd298:	0045 5353 0057 5357 0057 4e57 0057 4e4e     E.SSW.WSW.WNW.NN
   dd2a8:	0057 6e6f 696c 656e 6c2d 7669 3165 732e     W.online-live1.s
   dd2b8:	7265 6976 6563 2e73 2d75 6c62 786f 632e     ervices.u-blox.c
   dd2c8:	6d6f 6400 7461 2061 6f74 206f 6f6c 676e     om.data too long
   dd2d8:	7020 7961 6f6c 6461 654c 3d6e 7525 6900      payloadLen=%u.i
   dd2e8:	766e 6c61 6469 4320 4352 4400 6e6f 2065     nvalid CRC.Done 
   dd2f8:	6573 646e 6e69 2067 6961 6964 676e 6420     sending aiding d
   dd308:	7461 2061 6f74 4720 5350 0021 6164 6174     ata to GPS!.data
   dd318:	6420 6469 276e 2074 6562 6967 206e 6977      didn't begin wi
   dd328:	6874 7320 6e79 2063 7962 6574 2073 666f     th sync bytes of
   dd338:	7366 7465 253d 0075 6170 6c79 616f 4c64     fset=%u.payloadL
   dd348:	6e65 6f20 2066 7525 7320 6565 736d 7420     en of %u seems t
   dd358:	206f 6562 6320 726f 7572 7470 6465 2c00     o be corrupted.,
   dd368:	7b00 6c22 7461 3a22 6625 202c 6c22 676e     .{"lat":%f, "lng
   dd378:	3a22 6625 007d 6572 7571 7365 6974 676e     ":%f}.requesting
   dd388:	6520 656c 6176 6974 6e6f 6620 726f 2520      elevation for %
   dd398:	0073 7341 6973 7473 6c45 7665 7461 6f69     s.AssistElevatio
   dd3a8:	006e 6c65 7665 7461 6f69 3d6e 6625 7300     n.elevation=%f.s
   dd3b8:	7265 6576 2072 6964 6373 6e6f 656e 7463     erver disconnect
   dd3c8:	6465 7520 656e 7078 6365 6574 6c64 0079     ed unexpectedly.
   dd3d8:	6f43 746e 6e65 2d74 654c 676e 6874 003a     Content-Length:.
   dd3e8:	6f43 6c75 2064 6f6e 2074 6170 7372 2065     Could not parse 
   dd3f8:	6f43 746e 6e65 2d74 654c 676e 6874 202c     Content-Length, 
   dd408:	7865 7469 6e69 0067 6f43 746e 6e65 2d74     exiting.Content-
   dd418:	654c 676e 6874 6f20 2066 7525 6920 2073     Length of %u is 
   dd428:	616c 6772 7265 7420 6168 206e 7562 6666     larger than buff
   dd438:	7265 6c20 6e65 7467 2068 7525 5400 6d69     er length %u.Tim
   dd448:	6465 6f20 7475 6720 7465 6974 676e 6c20     ed out getting l
   dd458:	636f 7461 6f69 206e 6e69 6f66 6d72 7461     ocation informat
   dd468:	6f69 2c6e 6420 6665 7561 746c 6e69 2067     ion, defaulting 
   dd478:	6f74 6e20 206f 6f6c 6163 6974 6e6f 6d20     to no location m
   dd488:	646f 0065 6f63 6e6e 6365 6574 2064 6f74     ode.connected to
   dd498:	2520 0073 472f 7465 6e4f 696c 656e 6144      %s./GetOnlineDa
   dd4a8:	6174 612e 6873 3f78 6f74 656b 3d6e 7325     ta.ashx?token=%s
   dd4b8:	673b 736e 3d73 7067 3b73 6164 6174 7974     ;gnss=gps;dataty
   dd4c8:	6570 653d 6870 612c 6d6c 612c 7875 702c     pe=eph,alm,aux,p
   dd4d8:	736f 6c3b 7461 253d 372e 3b66 6f6c 3d6e     os;lat=%.7f;lon=
   dd4e8:	2e25 6637 703b 6361 3d63 6425 613b 746c     %.7f;pacc=%d;alt
   dd4f8:	253d 3b64 6966 746c 7265 6e6f 6f70 3b73     =%d;filteronpos;
   dd508:	616c 6574 636e 3d79 0032 472f 7465 6e4f     latency=2./GetOn
   dd518:	696c 656e 6144 6174 612e 6873 3f78 6f74     lineData.ashx?to
   dd528:	656b 3d6e 7325 673b 736e 3d73 7067 3b73     ken=%s;gnss=gps;
   dd538:	6164 6174 7974 6570 653d 6870 612c 6d6c     datatype=eph,alm
   dd548:	612c 7875 4700 5445 2520 2073 5448 5054     ,aux.GET %s HTTP
   dd558:	312f 312e 0a0d 6f48 7473 203a 7325 0a0d     /1.1..Host: %s..
   dd568:	0a0d 6300 6e6f 656e 7463 6f69 206e 6f74     ...connection to
   dd578:	2520 2073 6166 6c69 6465 4100 726c 6165      %s failed.Alrea
   dd588:	7964 6820 7661 2065 5047 2053 6966 2c78     dy have GPS fix,
   dd598:	7320 696b 7070 6e69 2067 7341 6973 7473      skipping Assist
   dd5a8:	6f4e 0077 6f4e 6b20 7965 202c 6163 276e     Now.No key, can'
   dd5b8:	2074 7375 2065 7341 6973 7473 6f4e 0077     t use AssistNow.
   dd5c8:	6f68 6b6f 722d 7365 6f70 736e 2f65 7325     hook-response/%s
   dd5d8:	252f 0073 6166 6c69 6465 7420 206f 6c61     /%s.failed to al
   dd5e8:	6f6c 6163 6574 4120 7373 7369 4e74 776f     locate AssistNow
   dd5f8:	6f44 6e77 6f6c 6461 6100 7070 752e 6c62     Download.app.ubl
   dd608:	786f 0000                                   ox..

000dd60c <_ZTV9LIS3DHSPI>:
	...
   dd614:	7a95 000d 7a97 000d 7b9d 000d 7ad5 000d     .z...z...{...z..
   dd624:	7b17 000d 7aa5 000d 7abf 000d               .{...z...z..

000dd630 <_ZTV6LIS3DH>:
	...
   dd640:	7b79 000d 40a9 000d 40a9 000d               y{...@...@..

000dd64c <_ZTVN5spark13CellularClassE>:
	...
   dd654:	8493 000d 8489 000d 847f 000d 8435 000d     ............5...
   dd664:	8473 000d 8467 000d 845b 000d 8453 000d     s...g...[...S...
   dd674:	8449 000d 843f 000d 9155 000d               I...?...U...

000dd680 <_ZTV14CellularSignal>:
	...
   dd688:	8541 000d 85a1 000d 8543 000d 85e5 000d     A.......C.......
   dd698:	8549 000d 85b1 000d 8575 000d 866f 000d     I.......u...o...
   dd6a8:	fffc ffff 0000 0000 8699 000d               ............

000dd6b4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd6bc:	86a1 000d 86a7 000d 86eb 000d 86b5 000d     ................
   dd6cc:	86a3 000d                                   ....

000dd6d0 <_ZTVN5spark13EthernetClassE>:
	...
   dd6d8:	8cdf 000d 8cd5 000d 8ccb 000d 8cc1 000d     ................
   dd6e8:	8cb5 000d 8ca9 000d 8c9d 000d 8c95 000d     ................
   dd6f8:	8c8b 000d 8c81 000d 9155 000d               ........U...

000dd704 <_ZTV7TwoWire>:
	...
   dd70c:	8cfd 000d 8d47 000d 8d1f 000d 8cff 000d     ....G...........
   dd71c:	8d27 000d 8d2f 000d 8d37 000d 8d3f 000d     '.../...7...?...

000dd72c <_ZTV9IPAddress>:
	...
   dd734:	8e8d 000d 8e7d 000d 8e7f 000d 6162 6475     ....}.......baud
   dd744:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dd754:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dd764:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dd774:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dd784:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dd794:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dd7a4:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dd7b4:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dd7c4:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dd7d4:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dd7e4:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dd7f4:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dd804:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dd814 <_ZTVN5spark9MeshClassE>:
	...
   dd81c:	8fcf 000d 8fc5 000d 8fbb 000d 8fb1 000d     ................
   dd82c:	8fa5 000d 8f99 000d 8f8d 000d 8f85 000d     ................
   dd83c:	8f7b 000d 8f71 000d 9155 000d               {...q...U...

000dd848 <_ZTVN5spark12NetworkClassE>:
	...
   dd850:	90ed 000d 90f7 000d 9101 000d 910b 000d     ................
   dd860:	9115 000d 9121 000d 912d 000d 9139 000d     ....!...-...9...
   dd870:	9141 000d 914b 000d 9155 000d 616e 006e     A...K...U...nan.
   dd880:	766f 0066 002e 6e69 0066                    ovf...inf.

000dd88a <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dd88a:	0800 1810 2820 3830 2b25 3330 3a64 3025     .... (08%+03d:%0
   dd89a:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dd8aa:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..
	...

000dd8bc <_ZTV11USARTSerial>:
	...
   dd8c4:	9c7d 000d 9ccd 000d 9cdb 000d 9235 000d     }...........5...
   dd8d4:	9c91 000d 9cb3 000d 9c9f 000d 9cc7 000d     ................
   dd8e4:	9c7f 000d 9c83 000d                         ........

000dd8ec <_ZTV9USBSerial>:
	...
   dd8f4:	9d85 000d 9dd5 000d 9de3 000d 9235 000d     ............5...
   dd904:	9dc1 000d 9d87 000d 9d9d 000d 9dcf 000d     ................
   dd914:	9db3 000d 9d81 000d                         ........

000dd91c <_ZSt7nothrow>:
	...

000dd91d <day_name.4725>:
   dd91d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd92d:	6972 6153 4a74                                   riSat

000dd932 <mon_name.4726>:
   dd932:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd942:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd952:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dd962:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dd972:	6425 000a                                   %d..

000dd976 <_ctype_>:
   dd976:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd986:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd996:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd9a6:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd9b6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd9c6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd9d6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd9e6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd9f6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dda78 <__sf_fake_stdin>:
	...

000dda98 <__sf_fake_stdout>:
	...

000ddab8 <__sf_fake_stderr>:
	...

000ddad8 <_DAYS_BEFORE_MONTH>:
   ddad8:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   ddae8:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   ddaf8:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000ddb08 <DAYS_IN_MONTH>:
   ddb08:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddb18:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb28:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000ddb38 <__month_lengths>:
   ddb38:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   ddb48:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb58:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddb68:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ddb78:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ddb88:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ddb98:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   ddba8:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   ddbb8:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   ddbc8:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   ddbd8:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   ddbe8:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   ddbf8:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   ddc08:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   ddc18:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   ddc28:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   ddc38:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   ddc48:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   ddc58:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   ddc68:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   ddc78:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   ddc88:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   ddc98:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   ddca8:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   ddcb8:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   ddcc8:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   ddcd8:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   ddce8:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   ddcf8:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   ddd08:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   ddd18:	3a4d 5325 2520 0070                         M:%S %p.

000ddd20 <_C_time_locale>:
   ddd20:	dbfb 000d dbff 000d dc03 000d dc07 000d     ................
   ddd30:	dc0b 000d dc0f 000d dc13 000d dc17 000d     ................
   ddd40:	dc1b 000d dc1f 000d dc23 000d dc27 000d     ........#...'...
   ddd50:	dc2b 000d dc33 000d dc3c 000d dc42 000d     +...3...<...B...
   ddd60:	dc0b 000d dc48 000d dc4d 000d dc52 000d     ....H...M...R...
   ddd70:	dc59 000d dc63 000d dc6b 000d dc74 000d     Y...c...k...t...
   ddd80:	dc7d 000d dc81 000d dc85 000d dc89 000d     }...............
   ddd90:	dc8d 000d dc91 000d dc95 000d dc99 000d     ................
   ddda0:	dca0 000d dca7 000d dcaf 000d dcb9 000d     ................
   dddb0:	dcc2 000d dcc9 000d dcd2 000d dcdb 000d     ................
   dddc0:	dce4 000d cda0 000d dcf9 000d dcfc 000d     ................
   dddd0:	dc2b 000d dc33 000d dc3c 000d dc42 000d     +...3...<...B...
   ddde0:	dc0b 000d dc48 000d dc4d 000d dc52 000d     ....H...M...R...
   dddf0:	dc59 000d dc63 000d dc6b 000d dc74 000d     Y...c...k...t...
   dde00:	d760 000d dd14 000d d56a 000d d56a 000d     `.......j...j...
   dde10:	d56a 000d d56a 000d d56a 000d 5a54 4700     j...j...j...TZ.G
   dde20:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dde30:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dde40:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dde50:	3a6e 6825 2575 006e                         n:%hu%n.

000dde58 <link_const_variable_data_end>:
   dde58:	000d56b5 	.word	0x000d56b5
   dde5c:	000d5a0d 	.word	0x000d5a0d
   dde60:	000d5c99 	.word	0x000d5c99
   dde64:	000d6575 	.word	0x000d6575
   dde68:	000d658d 	.word	0x000d658d
   dde6c:	000d6985 	.word	0x000d6985
   dde70:	000d6f6d 	.word	0x000d6f6d
   dde74:	000d72e9 	.word	0x000d72e9
   dde78:	000d7391 	.word	0x000d7391
   dde7c:	000d7a4d 	.word	0x000d7a4d
   dde80:	000d7a71 	.word	0x000d7a71
   dde84:	000d7a91 	.word	0x000d7a91
   dde88:	000d7bb3 	.word	0x000d7bb3
   dde8c:	000d7bb9 	.word	0x000d7bb9
   dde90:	000d840d 	.word	0x000d840d
   dde94:	000d8511 	.word	0x000d8511
   dde98:	000d8ce9 	.word	0x000d8ce9
   dde9c:	000d8f61 	.word	0x000d8f61
   ddea0:	000d909d 	.word	0x000d909d
   ddea4:	000d9221 	.word	0x000d9221
   ddea8:	000d9511 	.word	0x000d9511
   ddeac:	000d98a9 	.word	0x000d98a9
   ddeb0:	000d9c69 	.word	0x000d9c69
   ddeb4:	000da181 	.word	0x000da181
   ddeb8:	000da245 	.word	0x000da245
   ddebc:	000da2c9 	.word	0x000da2c9
   ddec0:	000da34d 	.word	0x000da34d

000ddec4 <link_constructors_end>:
	...
