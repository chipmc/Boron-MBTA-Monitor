
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-Connected-Counter/target/1.5.1/boron/Boron-Connected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008a20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dca40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  2003def8  000dd244  0001def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007c4  2003e02c  2003e02c  0002e02c  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000dd378  000dd378  0002d378  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dd3a4  000dd3a4  0002d3a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011fe31  00000000  00000000  0002d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016089  00000000  00000000  0014d1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000287bb  00000000  00000000  00163262  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000032d8  00000000  00000000  0018ba1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005e58  00000000  00000000  0018ecf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b5a0  00000000  00000000  00194b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035c37  00000000  00000000  001d00ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010edc7  00000000  00000000  00205d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000faa0  00000000  00000000  00314aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 f905 	bl	da240 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 f925 	bl	da28c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003def8 	.word	0x2003def8
   d404c:	000dd244 	.word	0x000dd244
   d4050:	2003e02c 	.word	0x2003e02c
   d4054:	2003e02c 	.word	0x2003e02c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f005 f803 	bl	d9068 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dca3c 	.word	0x000dca3c
   d4084:	000dc9f8 	.word	0x000dc9f8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 bb02 	b.w	d5690 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f8b3 	bl	d51f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 bfa9 	b.w	d8fec <_post_loop>

000d409a <_Znwj>:
   d409a:	f003 ba01 	b.w	d74a0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f003 ba07 	b.w	d74b0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f003 ba05 	b.w	d74b0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f003 f8ac 	bl	d720c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6f1d 	.word	0x000d6f1d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_Z9sensorISRv>:

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
  static bool frontTireFlag = false;
  if (frontTireFlag) {
   d40cc:	4b04      	ldr	r3, [pc, #16]	; (d40e0 <_Z9sensorISRv+0x14>)
   d40ce:	7819      	ldrb	r1, [r3, #0]
   d40d0:	2201      	movs	r2, #1
   d40d2:	b111      	cbz	r1, d40da <_Z9sensorISRv+0xe>
    sensorDetect = true;                              // sets the sensor flag for the main loop
   d40d4:	4903      	ldr	r1, [pc, #12]	; (d40e4 <_Z9sensorISRv+0x18>)
   d40d6:	700a      	strb	r2, [r1, #0]
    frontTireFlag = false;
   d40d8:	2200      	movs	r2, #0
  }
  else frontTireFlag = true;
   d40da:	701a      	strb	r2, [r3, #0]
   d40dc:	4770      	bx	lr
   d40de:	bf00      	nop
   d40e0:	2003e104 	.word	0x2003e104
   d40e4:	2003e030 	.word	0x2003e030

000d40e8 <_Z11watchdogISRv>:
}

void watchdogISR()
{
  watchdogFlag = true;
   d40e8:	4b01      	ldr	r3, [pc, #4]	; (d40f0 <_Z11watchdogISRv+0x8>)
   d40ea:	2201      	movs	r2, #1
   d40ec:	701a      	strb	r2, [r3, #0]
   d40ee:	4770      	bx	lr
   d40f0:	2003e090 	.word	0x2003e090

000d40f4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f6:	6803      	ldr	r3, [r0, #0]
   d40f8:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40fa:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40fc:	d904      	bls.n	d4108 <nrf_gpio_pin_port_decode+0x14>
   d40fe:	4a07      	ldr	r2, [pc, #28]	; (d411c <nrf_gpio_pin_port_decode+0x28>)
   d4100:	2100      	movs	r1, #0
   d4102:	200a      	movs	r0, #10
   d4104:	f003 f882 	bl	d720c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d410c:	bf83      	ittte	hi
   d410e:	f003 031f 	andhi.w	r3, r3, #31
   d4112:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4114:	4802      	ldrhi	r0, [pc, #8]	; (d4120 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4116:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d411a:	bd10      	pop	{r4, pc}
   d411c:	000d6f1d 	.word	0x000d6f1d
   d4120:	50000300 	.word	0x50000300

000d4124 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4124:	b507      	push	{r0, r1, r2, lr}
   d4126:	ab02      	add	r3, sp, #8
   d4128:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d412c:	4618      	mov	r0, r3
   d412e:	f7ff ffe1 	bl	d40f4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4132:	9a01      	ldr	r2, [sp, #4]
   d4134:	2301      	movs	r3, #1
   d4136:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4138:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d413c:	b003      	add	sp, #12
   d413e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4142 <nrf_gpio_pin_clear>:


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d4142:	b507      	push	{r0, r1, r2, lr}
   d4144:	ab02      	add	r3, sp, #8
   d4146:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d414a:	4618      	mov	r0, r3
   d414c:	f7ff ffd2 	bl	d40f4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4150:	9a01      	ldr	r2, [sp, #4]
   d4152:	2301      	movs	r3, #1
   d4154:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4156:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}
   d415a:	b003      	add	sp, #12
   d415c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4160 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4160:	b538      	push	{r3, r4, r5, lr}
   d4162:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4164:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4166:	b128      	cbz	r0, d4174 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4168:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d416a:	210c      	movs	r1, #12
   d416c:	f005 f8cf 	bl	d930e <_ZdlPvj>
            wakeupSource = next;
   d4170:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4172:	e7f8      	b.n	d4166 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4174:	4620      	mov	r0, r4
   d4176:	bd38      	pop	{r3, r4, r5, pc}

000d4178 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d4178:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d417a:	4904      	ldr	r1, [pc, #16]	; (d418c <_Z9resetFRAM6String+0x14>)
   d417c:	f004 fb03 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4180:	b118      	cbz	r0, d418a <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4182:	4803      	ldr	r0, [pc, #12]	; (d4190 <_Z9resetFRAM6String+0x18>)
   d4184:	f001 fda4 	bl	d5cd0 <_ZN6MB85RC5eraseEv>
    return 1;
   d4188:	2001      	movs	r0, #1
  }
  else return 0;
}
   d418a:	bd08      	pop	{r3, pc}
   d418c:	000dbec5 	.word	0x000dbec5
   d4190:	2003e03c 	.word	0x2003e03c

000d4194 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4194:	b508      	push	{r3, lr}
   d4196:	4904      	ldr	r1, [pc, #16]	; (d41a8 <_Z7sendNow6String+0x14>)
   d4198:	f004 faf5 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d419c:	b118      	cbz	r0, d41a6 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
   d419e:	4b03      	ldr	r3, [pc, #12]	; (d41ac <_Z7sendNow6String+0x18>)
   d41a0:	2205      	movs	r2, #5
   d41a2:	701a      	strb	r2, [r3, #0]
    return 1;
   d41a4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	000dbec5 	.word	0x000dbec5
   d41ac:	2003e088 	.word	0x2003e088

000d41b0 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41b0:	b510      	push	{r4, lr}
   d41b2:	4b03      	ldr	r3, [pc, #12]	; (d41c0 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41b4:	6003      	str	r3, [r0, #0]
   d41b6:	4604      	mov	r4, r0
   d41b8:	f002 fbdc 	bl	d6974 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41bc:	4620      	mov	r0, r4
   d41be:	bd10      	pop	{r4, pc}
   d41c0:	000dba20 	.word	0x000dba20

000d41c4 <_ZN17PublishQueueAsyncD0Ev>:
   d41c4:	b510      	push	{r4, lr}
   d41c6:	4604      	mov	r4, r0
   d41c8:	f7ff fff2 	bl	d41b0 <_ZN17PublishQueueAsyncD1Ev>
   d41cc:	4620      	mov	r0, r4
   d41ce:	2138      	movs	r1, #56	; 0x38
   d41d0:	f005 f89d 	bl	d930e <_ZdlPvj>
   d41d4:	4620      	mov	r0, r4
   d41d6:	bd10      	pop	{r4, pc}

000d41d8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41d8:	b510      	push	{r4, lr}
   d41da:	4b03      	ldr	r3, [pc, #12]	; (d41e8 <_ZN8MB85RC64D1Ev+0x10>)
   d41dc:	6003      	str	r3, [r0, #0]
   d41de:	4604      	mov	r4, r0
   d41e0:	f001 fd3e 	bl	d5c60 <_ZN6MB85RCD1Ev>
   d41e4:	4620      	mov	r0, r4
   d41e6:	bd10      	pop	{r4, pc}
   d41e8:	000dba04 	.word	0x000dba04

000d41ec <_ZN8MB85RC64D0Ev>:
   d41ec:	b510      	push	{r4, lr}
   d41ee:	4604      	mov	r4, r0
   d41f0:	f7ff fff2 	bl	d41d8 <_ZN8MB85RC64D1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	2110      	movs	r1, #16
   d41f8:	f005 f889 	bl	d930e <_ZdlPvj>
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd10      	pop	{r4, pc}

000d4200 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
   d4200:	b508      	push	{r3, lr}
   d4202:	490a      	ldr	r1, [pc, #40]	; (d422c <_Z11resetCounts6String+0x2c>)
   d4204:	f004 fabf 	bl	d8786 <_ZNK6String6equalsEPKc>
   d4208:	2300      	movs	r3, #0
  if (command == "1")
   d420a:	b168      	cbz	r0, d4228 <_Z11resetCounts6String+0x28>
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d420c:	4a08      	ldr	r2, [pc, #32]	; (d4230 <_Z11resetCounts6String+0x30>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d420e:	4909      	ldr	r1, [pc, #36]	; (d4234 <_Z11resetCounts6String+0x34>)
int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d4210:	6013      	str	r3, [r2, #0]

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d4212:	6093      	str	r3, [r2, #8]
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
    current.alertCount = 0;                                           // Reset count variables
   d4214:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d4216:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d4218:	4a07      	ldr	r2, [pc, #28]	; (d4238 <_Z11resetCounts6String+0x38>)
{
  if (command == "1")
  {
    current.dailyCount = 0;                                           // Reset Daily Count in memory
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d421a:	610b      	str	r3, [r1, #16]
    current.alertCount = 0;                                           // Reset count variables
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
    dataInFlight = false;
   d421c:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d421e:	4b07      	ldr	r3, [pc, #28]	; (d423c <_Z11resetCounts6String+0x3c>)
   d4220:	2001      	movs	r0, #1
   d4222:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d4224:	4b06      	ldr	r3, [pc, #24]	; (d4240 <_Z11resetCounts6String+0x40>)
   d4226:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
   d4228:	bd08      	pop	{r3, pc}
   d422a:	bf00      	nop
   d422c:	000dbec5 	.word	0x000dbec5
   d4230:	2003e114 	.word	0x2003e114
   d4234:	2003e174 	.word	0x2003e174
   d4238:	2003e130 	.word	0x2003e130
   d423c:	2003e10c 	.word	0x2003e10c
   d4240:	2003e16c 	.word	0x2003e16c

000d4244 <_ZN10CloudClass8syncTimeEv.isra.15>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d4244:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4246:	f003 f89b 	bl	d7380 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d424a:	b120      	cbz	r0, d4256 <_ZN10CloudClass8syncTimeEv.isra.15+0x12>
            return false;
        }
        return spark_sync_time(NULL);
   d424c:	2000      	movs	r0, #0
    }
   d424e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return spark_sync_time(NULL);
   d4252:	f003 b8b5 	b.w	d73c0 <spark_sync_time>
    }
   d4256:	bd08      	pop	{r3, pc}

000d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.17>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4258:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d425a:	2000      	movs	r0, #0
   d425c:	f003 f8b8 	bl	d73d0 <spark_sync_time_pending>
   d4260:	b128      	cbz	r0, d426e <_ZN10CloudClass12syncTimeDoneEv.isra.17+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4262:	f003 f88d 	bl	d7380 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4266:	f080 0001 	eor.w	r0, r0, #1
   d426a:	b2c0      	uxtb	r0, r0
   d426c:	bd08      	pop	{r3, pc}
   d426e:	2001      	movs	r0, #1
    }
   d4270:	bd08      	pop	{r3, pc}

000d4272 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4272:	b510      	push	{r4, lr}
   d4274:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4276:	6800      	ldr	r0, [r0, #0]
   d4278:	b108      	cbz	r0, d427e <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d427a:	f003 f919 	bl	d74b0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d427e:	4620      	mov	r0, r4
   d4280:	bd10      	pop	{r4, pc}

000d4282 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4282:	6803      	ldr	r3, [r0, #0]
   d4284:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4286:	b120      	cbz	r0, d4292 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4288:	8883      	ldrh	r3, [r0, #4]
   d428a:	428b      	cmp	r3, r1
   d428c:	d001      	beq.n	d4292 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d428e:	6880      	ldr	r0, [r0, #8]
   d4290:	e7f9      	b.n	d4286 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d4292:	4770      	bx	lr

000d4294 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d4298:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d429a:	4605      	mov	r5, r0
   d429c:	460f      	mov	r7, r1
   d429e:	4616      	mov	r6, r2
        if (valid_) {
   d42a0:	b33b      	cbz	r3, d42f2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d42a2:	2101      	movs	r1, #1
   d42a4:	f7ff ffed 	bl	d4282 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d42a8:	b150      	cbz	r0, d42c0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d42aa:	8983      	ldrh	r3, [r0, #12]
   d42ac:	42bb      	cmp	r3, r7
   d42ae:	d104      	bne.n	d42ba <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d42b0:	7386      	strb	r6, [r0, #14]
                    return *this;
   d42b2:	e01e      	b.n	d42f2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d42b4:	8883      	ldrh	r3, [r0, #4]
   d42b6:	2b01      	cmp	r3, #1
   d42b8:	d0f6      	beq.n	d42a8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d42ba:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d42bc:	2800      	cmp	r0, #0
   d42be:	d1f9      	bne.n	d42b4 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d42c0:	490d      	ldr	r1, [pc, #52]	; (d42f8 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d42c2:	2010      	movs	r0, #16
   d42c4:	f005 f82e 	bl	d9324 <_ZnwjRKSt9nothrow_t>
   d42c8:	4604      	mov	r4, r0
   d42ca:	b188      	cbz	r0, d42f0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d42cc:	f04f 0810 	mov.w	r8, #16
   d42d0:	4642      	mov	r2, r8
   d42d2:	2100      	movs	r1, #0
   d42d4:	f005 ffda 	bl	da28c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d42d8:	2302      	movs	r3, #2
   d42da:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d42dc:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d42de:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d42e2:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d42e4:	692b      	ldr	r3, [r5, #16]
   d42e6:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d42e8:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d42ea:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42ec:	612c      	str	r4, [r5, #16]
   d42ee:	e000      	b.n	d42f2 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d42f0:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d42f2:	4628      	mov	r0, r5
   d42f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42f8:	000dc4bc 	.word	0x000dc4bc

000d42fc <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d42fc:	2000      	movs	r0, #0
   d42fe:	f002 be35 	b.w	d6f6c <hal_timer_millis>

000d4302 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d4302:	b508      	push	{r3, lr}
   d4304:	ed2d 8b02 	vpush	{d8}
   d4308:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d430c:	b128      	cbz	r0, d431a <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d430e:	3801      	subs	r0, #1
   d4310:	f7ff fff7 	bl	d4302 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d4314:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4318:	e001      	b.n	d431e <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d431a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d431e:	ecbd 8b02 	vpop	{d8}
   d4322:	bd08      	pop	{r3, pc}

000d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4324:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4326:	6804      	ldr	r4, [r0, #0]
	 * @return true if the event was queued or false if it was not.
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4328:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d432c:	f88d 3000 	strb.w	r3, [sp]
   d4330:	f88d 5004 	strb.w	r5, [sp, #4]
   d4334:	68e4      	ldr	r4, [r4, #12]
   d4336:	233c      	movs	r3, #60	; 0x3c
   d4338:	47a0      	blx	r4
	}
   d433a:	b003      	add	sp, #12
   d433c:	bd30      	pop	{r4, r5, pc}
	...

000d4340 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4340:	b510      	push	{r4, lr}
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4342:	780b      	ldrb	r3, [r1, #0]
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
}

void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4344:	b092      	sub	sp, #72	; 0x48
   d4346:	460c      	mov	r4, r1
  char responseString[64];
    // Response is only a single number thanks to Template
  if (!strlen(data)) {                                                // No data in response - Error
   d4348:	b923      	cbnz	r3, d4354 <_Z14UbidotsHandlerPKcS0_+0x14>
    snprintf(responseString, sizeof(responseString),"No Data");
   d434a:	4919      	ldr	r1, [pc, #100]	; (d43b0 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d434c:	a802      	add	r0, sp, #8
   d434e:	f006 fa25 	bl	da79c <strcpy>
   d4352:	e017      	b.n	d4384 <_Z14UbidotsHandlerPKcS0_+0x44>
  }
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4354:	4608      	mov	r0, r1
   d4356:	f005 fdbf 	bl	d9ed8 <atoi>
   d435a:	28c8      	cmp	r0, #200	; 0xc8
   d435c:	d004      	beq.n	d4368 <_Z14UbidotsHandlerPKcS0_+0x28>
   d435e:	4620      	mov	r0, r4
   d4360:	f005 fdba 	bl	d9ed8 <atoi>
   d4364:	28c9      	cmp	r0, #201	; 0xc9
   d4366:	d119      	bne.n	d439c <_Z14UbidotsHandlerPKcS0_+0x5c>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4368:	4912      	ldr	r1, [pc, #72]	; (d43b4 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d436a:	a802      	add	r0, sp, #8
   d436c:	f006 fa16 	bl	da79c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4370:	f004 fcd1 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d4374:	4b10      	ldr	r3, [pc, #64]	; (d43b8 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d4376:	6258      	str	r0, [r3, #36]	; 0x24
    systemStatusWriteNeeded = true;
   d4378:	4b10      	ldr	r3, [pc, #64]	; (d43bc <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d437a:	2201      	movs	r2, #1
   d437c:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d437e:	4b10      	ldr	r3, [pc, #64]	; (d43c0 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4380:	2200      	movs	r2, #0
   d4382:	701a      	strb	r2, [r3, #0]
   d4384:	4b0f      	ldr	r3, [pc, #60]	; (d43c4 <_Z14UbidotsHandlerPKcS0_+0x84>)
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
  }
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4386:	4910      	ldr	r1, [pc, #64]	; (d43c8 <_Z14UbidotsHandlerPKcS0_+0x88>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4388:	781b      	ldrb	r3, [r3, #0]
   d438a:	4810      	ldr	r0, [pc, #64]	; (d43cc <_Z14UbidotsHandlerPKcS0_+0x8c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d438c:	2200      	movs	r2, #0
   d438e:	f88d 2000 	strb.w	r2, [sp]
   d4392:	aa02      	add	r2, sp, #8
   d4394:	f7ff ffc6 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4398:	b012      	add	sp, #72	; 0x48
   d439a:	bd10      	pop	{r4, pc}
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
    systemStatusWriteNeeded = true;
    dataInFlight = false;                                             // Data has been received
  }
  else {
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d439c:	4620      	mov	r0, r4
   d439e:	f005 fd9b 	bl	d9ed8 <atoi>
   d43a2:	4a0b      	ldr	r2, [pc, #44]	; (d43d0 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43a4:	4603      	mov	r3, r0
   d43a6:	2140      	movs	r1, #64	; 0x40
   d43a8:	a802      	add	r0, sp, #8
   d43aa:	f003 f8a1 	bl	d74f0 <snprintf>
   d43ae:	e7e9      	b.n	d4384 <_Z14UbidotsHandlerPKcS0_+0x44>
   d43b0:	000dba84 	.word	0x000dba84
   d43b4:	000dba99 	.word	0x000dba99
   d43b8:	2003e174 	.word	0x2003e174
   d43bc:	2003e16c 	.word	0x2003e16c
   d43c0:	2003e130 	.word	0x2003e130
   d43c4:	2003e068 	.word	0x2003e068
   d43c8:	000dba8c 	.word	0x000dba8c
   d43cc:	2003e134 	.word	0x2003e134
   d43d0:	000dbaab 	.word	0x000dbaab

000d43d4 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)                                      // Will perform a hard reset on the Electron
{
   d43d4:	b513      	push	{r0, r1, r4, lr}
   d43d6:	490b      	ldr	r1, [pc, #44]	; (d4404 <_Z12hardResetNow6String+0x30>)
   d43d8:	f004 f9d5 	bl	d8786 <_ZNK6String6equalsEPKc>
   d43dc:	2400      	movs	r4, #0
  if (command == "1")
   d43de:	b178      	cbz	r0, d4400 <_Z12hardResetNow6String+0x2c>
   d43e0:	4b09      	ldr	r3, [pc, #36]	; (d4408 <_Z12hardResetNow6String+0x34>)
  {
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d43e2:	4a0a      	ldr	r2, [pc, #40]	; (d440c <_Z12hardResetNow6String+0x38>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43e4:	781b      	ldrb	r3, [r3, #0]
   d43e6:	490a      	ldr	r1, [pc, #40]	; (d4410 <_Z12hardResetNow6String+0x3c>)
   d43e8:	f88d 4000 	strb.w	r4, [sp]
   d43ec:	4809      	ldr	r0, [pc, #36]	; (d4414 <_Z12hardResetNow6String+0x40>)
   d43ee:	f7ff ff99 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    rtc.setAlarm(10);
   d43f2:	4623      	mov	r3, r4
   d43f4:	2201      	movs	r2, #1
   d43f6:	210a      	movs	r1, #10
   d43f8:	4807      	ldr	r0, [pc, #28]	; (d4418 <_Z12hardResetNow6String+0x44>)
   d43fa:	f002 f982 	bl	d6702 <_ZN8MCP794108setAlarmEibi>
   d43fe:	2001      	movs	r0, #1
    return 1;                                                         // Unfortunately, this will never be sent
  }
  else return 0;
}
   d4400:	b002      	add	sp, #8
   d4402:	bd10      	pop	{r4, pc}
   d4404:	000dbec5 	.word	0x000dbec5
   d4408:	2003e068 	.word	0x2003e068
   d440c:	000dbac8 	.word	0x000dbac8
   d4410:	000dbd0a 	.word	0x000dbd0a
   d4414:	2003e134 	.word	0x2003e134
   d4418:	2003e04c 	.word	0x2003e04c

000d441c <_Z14setverboseMode6String>:
  }
  else return 0;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d441c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d441e:	491a      	ldr	r1, [pc, #104]	; (d4488 <_Z14setverboseMode6String+0x6c>)
   d4420:	4604      	mov	r4, r0
   d4422:	f004 f9b0 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4426:	4605      	mov	r5, r0
   d4428:	b1a0      	cbz	r0, d4454 <_Z14setverboseMode6String+0x38>
  {
    sysStatus.verboseMode = true;
   d442a:	4b18      	ldr	r3, [pc, #96]	; (d448c <_Z14setverboseMode6String+0x70>)
   d442c:	2401      	movs	r4, #1
   d442e:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4430:	4b17      	ldr	r3, [pc, #92]	; (d4490 <_Z14setverboseMode6String+0x74>)
   d4432:	701c      	strb	r4, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4434:	f002 ffa4 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4438:	b908      	cbnz	r0, d443e <_Z14setverboseMode6String+0x22>
    return 1;
   d443a:	2001      	movs	r0, #1
   d443c:	e022      	b.n	d4484 <_Z14setverboseMode6String+0x68>
   d443e:	4b15      	ldr	r3, [pc, #84]	; (d4494 <_Z14setverboseMode6String+0x78>)
{
  if (command == "1")
  {
    sysStatus.verboseMode = true;
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4440:	4915      	ldr	r1, [pc, #84]	; (d4498 <_Z14setverboseMode6String+0x7c>)
   d4442:	781b      	ldrb	r3, [r3, #0]
   d4444:	4815      	ldr	r0, [pc, #84]	; (d449c <_Z14setverboseMode6String+0x80>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4446:	2200      	movs	r2, #0
   d4448:	f88d 2000 	strb.w	r2, [sp]
   d444c:	4a14      	ldr	r2, [pc, #80]	; (d44a0 <_Z14setverboseMode6String+0x84>)
   d444e:	f7ff ff69 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4452:	e7f2      	b.n	d443a <_Z14setverboseMode6String+0x1e>
   d4454:	4913      	ldr	r1, [pc, #76]	; (d44a4 <_Z14setverboseMode6String+0x88>)
   d4456:	4620      	mov	r0, r4
   d4458:	f004 f995 	bl	d8786 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d445c:	b190      	cbz	r0, d4484 <_Z14setverboseMode6String+0x68>
  {
    sysStatus.verboseMode = false;
   d445e:	4b0b      	ldr	r3, [pc, #44]	; (d448c <_Z14setverboseMode6String+0x70>)
   d4460:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4462:	4b0b      	ldr	r3, [pc, #44]	; (d4490 <_Z14setverboseMode6String+0x74>)
   d4464:	2401      	movs	r4, #1
   d4466:	701c      	strb	r4, [r3, #0]
   d4468:	f002 ff8a 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d446c:	2800      	cmp	r0, #0
   d446e:	d0e4      	beq.n	d443a <_Z14setverboseMode6String+0x1e>
   d4470:	4b08      	ldr	r3, [pc, #32]	; (d4494 <_Z14setverboseMode6String+0x78>)
   d4472:	4a0d      	ldr	r2, [pc, #52]	; (d44a8 <_Z14setverboseMode6String+0x8c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4474:	781b      	ldrb	r3, [r3, #0]
   d4476:	4908      	ldr	r1, [pc, #32]	; (d4498 <_Z14setverboseMode6String+0x7c>)
   d4478:	f88d 5000 	strb.w	r5, [sp]
   d447c:	4807      	ldr	r0, [pc, #28]	; (d449c <_Z14setverboseMode6String+0x80>)
   d447e:	f7ff ff51 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4482:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4484:	b003      	add	sp, #12
   d4486:	bd30      	pop	{r4, r5, pc}
   d4488:	000dbec5 	.word	0x000dbec5
   d448c:	2003e174 	.word	0x2003e174
   d4490:	2003e16c 	.word	0x2003e16c
   d4494:	2003e068 	.word	0x2003e068
   d4498:	000dbc47 	.word	0x000dbc47
   d449c:	2003e134 	.word	0x2003e134
   d44a0:	000dbae0 	.word	0x000dbae0
   d44a4:	000dbaf1 	.word	0x000dbaf1
   d44a8:	000dbaf3 	.word	0x000dbaf3
   d44ac:	00000000 	.word	0x00000000

000d44b0 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d44b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d44b4:	b0cb      	sub	sp, #300	; 0x12c
   d44b6:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d44b8:	f7ff fec4 	bl	d4244 <_ZN10CloudClass8syncTimeEv.isra.15>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d44bc:	f7ff ff1e 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44c0:	2700      	movs	r7, #0
   d44c2:	4606      	mov	r6, r0
   d44c4:	f247 582f 	movw	r8, #29999	; 0x752f
   d44c8:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d44cc:	f7ff ff16 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44d0:	1b80      	subs	r0, r0, r6
   d44d2:	eb61 0107 	sbc.w	r1, r1, r7
   d44d6:	4589      	cmp	r9, r1
   d44d8:	bf08      	it	eq
   d44da:	4580      	cmpeq	r8, r0
   d44dc:	d305      	bcc.n	d44ea <_Z11setTimeZone6String+0x3a>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d44de:	f7ff febb 	bl	d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
   d44e2:	b910      	cbnz	r0, d44ea <_Z11setTimeZone6String+0x3a>
            spark_process();
   d44e4:	f002 ff34 	bl	d7350 <spark_process>
   d44e8:	e7f0      	b.n	d44cc <_Z11setTimeZone6String+0x1c>
   d44ea:	f7ff feb5 	bl	d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44ee:	220a      	movs	r2, #10
   d44f0:	a905      	add	r1, sp, #20
   d44f2:	6820      	ldr	r0, [r4, #0]
   d44f4:	f006 ff40 	bl	db378 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44f8:	f100 030c 	add.w	r3, r0, #12
   d44fc:	b2db      	uxtb	r3, r3
   d44fe:	2b18      	cmp	r3, #24
   d4500:	d849      	bhi.n	d4596 <_Z11setTimeZone6String+0xe6>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4502:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4504:	ee07 5a90 	vmov	s15, r5
   d4508:	4b27      	ldr	r3, [pc, #156]	; (d45a8 <_Z11setTimeZone6String+0xf8>)
   d450a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d450e:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4510:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d4514:	f004 fad8 	bl	d8ac8 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4518:	4b24      	ldr	r3, [pc, #144]	; (d45ac <_Z11setTimeZone6String+0xfc>)
   d451a:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d451c:	f004 fac6 	bl	d8aac <_ZN9TimeClass5localEv>
   d4520:	4606      	mov	r6, r0
   d4522:	f004 fbf8 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d4526:	1a30      	subs	r0, r6, r0
   d4528:	f005 f9aa 	bl	d9880 <__aeabi_i2d>
   d452c:	a31c      	add	r3, pc, #112	; (adr r3, d45a0 <_Z11setTimeZone6String+0xf0>)
   d452e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4532:	f005 fb35 	bl	d9ba0 <__aeabi_ddiv>
   d4536:	4a1e      	ldr	r2, [pc, #120]	; (d45b0 <_Z11setTimeZone6String+0x100>)
   d4538:	e9cd 0100 	strd	r0, r1, [sp]
   d453c:	210a      	movs	r1, #10
   d453e:	481d      	ldr	r0, [pc, #116]	; (d45b4 <_Z11setTimeZone6String+0x104>)
   d4540:	f002 ffd6 	bl	d74f0 <snprintf>
   d4544:	f002 ff1c 	bl	d7380 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4548:	b318      	cbz	r0, d4592 <_Z11setTimeZone6String+0xe2>
   d454a:	4e1b      	ldr	r6, [pc, #108]	; (d45b8 <_Z11setTimeZone6String+0x108>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d454c:	4a1b      	ldr	r2, [pc, #108]	; (d45bc <_Z11setTimeZone6String+0x10c>)
   d454e:	462b      	mov	r3, r5
   d4550:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4554:	2500      	movs	r5, #0
   d4556:	a80a      	add	r0, sp, #40	; 0x28
   d4558:	f002 ffca 	bl	d74f0 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d455c:	7833      	ldrb	r3, [r6, #0]
    publishQueue.publish("Time",data, PRIVATE);
   d455e:	4918      	ldr	r1, [pc, #96]	; (d45c0 <_Z11setTimeZone6String+0x110>)
   d4560:	f88d 5000 	strb.w	r5, [sp]
   d4564:	aa0a      	add	r2, sp, #40	; 0x28
   d4566:	4817      	ldr	r0, [pc, #92]	; (d45c4 <_Z11setTimeZone6String+0x114>)
   d4568:	f7ff fedc 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d456c:	f004 fbd3 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d4570:	4601      	mov	r1, r0
   d4572:	a806      	add	r0, sp, #24
   d4574:	f004 faf8 	bl	d8b68 <_ZN9TimeClass7timeStrEl>
   d4578:	9b06      	ldr	r3, [sp, #24]
   d457a:	9303      	str	r3, [sp, #12]
   d457c:	9a03      	ldr	r2, [sp, #12]
   d457e:	7833      	ldrb	r3, [r6, #0]
   d4580:	490f      	ldr	r1, [pc, #60]	; (d45c0 <_Z11setTimeZone6String+0x110>)
   d4582:	f88d 5000 	strb.w	r5, [sp]
   d4586:	480f      	ldr	r0, [pc, #60]	; (d45c4 <_Z11setTimeZone6String+0x114>)
   d4588:	f7ff fecc 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d458c:	a806      	add	r0, sp, #24
   d458e:	f004 f886 	bl	d869e <_ZN6StringD1Ev>
  }

  return 1;
   d4592:	4620      	mov	r0, r4
   d4594:	e000      	b.n	d4598 <_Z11setTimeZone6String+0xe8>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4596:	2000      	movs	r0, #0
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
   d4598:	b04b      	add	sp, #300	; 0x12c
   d459a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d459e:	bf00      	nop
   d45a0:	00000000 	.word	0x00000000
   d45a4:	40ac2000 	.word	0x40ac2000
   d45a8:	2003e174 	.word	0x2003e174
   d45ac:	2003e16c 	.word	0x2003e16c
   d45b0:	000dbb08 	.word	0x000dbb08
   d45b4:	2003e031 	.word	0x2003e031
   d45b8:	2003e068 	.word	0x2003e068
   d45bc:	000dbb12 	.word	0x000dbb12
   d45c0:	000dbda9 	.word	0x000dbda9
   d45c4:	2003e134 	.word	0x2003e134

000d45c8 <_Z11setOpenTime6String.part.36>:

int setOpenTime(String command)
   d45c8:	b500      	push	{lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d45ca:	4b0b      	ldr	r3, [pc, #44]	; (d45f8 <_Z11setOpenTime6String.part.36+0x30>)
   d45cc:	4a0b      	ldr	r2, [pc, #44]	; (d45fc <_Z11setOpenTime6String.part.36+0x34>)
   d45ce:	69db      	ldr	r3, [r3, #28]
  }

  return 1;
}

int setOpenTime(String command)
   d45d0:	b0c3      	sub	sp, #268	; 0x10c
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d45d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45d6:	a802      	add	r0, sp, #8
   d45d8:	f002 ff8a 	bl	d74f0 <snprintf>
   d45dc:	4b08      	ldr	r3, [pc, #32]	; (d4600 <_Z11setOpenTime6String.part.36+0x38>)
    publishQueue.publish("Time",data, PRIVATE);
   d45de:	4909      	ldr	r1, [pc, #36]	; (d4604 <_Z11setOpenTime6String.part.36+0x3c>)
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	4809      	ldr	r0, [pc, #36]	; (d4608 <_Z11setOpenTime6String.part.36+0x40>)
   d45e4:	2200      	movs	r2, #0
   d45e6:	f88d 2000 	strb.w	r2, [sp]
   d45ea:	aa02      	add	r2, sp, #8
   d45ec:	f7ff fe9a 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d45f0:	2001      	movs	r0, #1
   d45f2:	b043      	add	sp, #268	; 0x10c
   d45f4:	f85d fb04 	ldr.w	pc, [sp], #4
   d45f8:	2003e174 	.word	0x2003e174
   d45fc:	000dbb26 	.word	0x000dbb26
   d4600:	2003e068 	.word	0x2003e068
   d4604:	000dbda9 	.word	0x000dbda9
   d4608:	2003e134 	.word	0x2003e134

000d460c <_Z11setOpenTime6String>:

  return 1;
}

int setOpenTime(String command)
{
   d460c:	b513      	push	{r0, r1, r4, lr}
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d460e:	220a      	movs	r2, #10
   d4610:	a901      	add	r1, sp, #4
   d4612:	6800      	ldr	r0, [r0, #0]
   d4614:	f006 feb0 	bl	db378 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4618:	2817      	cmp	r0, #23
   d461a:	d80a      	bhi.n	d4632 <_Z11setOpenTime6String+0x26>
  sysStatus.openTime = tempTime;
   d461c:	4b07      	ldr	r3, [pc, #28]	; (d463c <_Z11setOpenTime6String+0x30>)
   d461e:	61d8      	str	r0, [r3, #28]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4620:	4b07      	ldr	r3, [pc, #28]	; (d4640 <_Z11setOpenTime6String+0x34>)
   d4622:	2401      	movs	r4, #1
   d4624:	701c      	strb	r4, [r3, #0]
   d4626:	f002 feab 	bl	d7380 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d462a:	b120      	cbz	r0, d4636 <_Z11setOpenTime6String+0x2a>
   d462c:	f7ff ffcc 	bl	d45c8 <_Z11setOpenTime6String.part.36>
   d4630:	e002      	b.n	d4638 <_Z11setOpenTime6String+0x2c>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4632:	2000      	movs	r0, #0
   d4634:	e000      	b.n	d4638 <_Z11setOpenTime6String+0x2c>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
    publishQueue.publish("Time",data, PRIVATE);
  }
  return 1;
   d4636:	4620      	mov	r0, r4
}
   d4638:	b002      	add	sp, #8
   d463a:	bd10      	pop	{r4, pc}
   d463c:	2003e174 	.word	0x2003e174
   d4640:	2003e16c 	.word	0x2003e16c

000d4644 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
   d4644:	b510      	push	{r4, lr}
   d4646:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4648:	220a      	movs	r2, #10
   d464a:	a903      	add	r1, sp, #12
   d464c:	6800      	ldr	r0, [r0, #0]
   d464e:	f006 fe93 	bl	db378 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4652:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4654:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4656:	d818      	bhi.n	d468a <_Z12setCloseTime6String+0x46>
  sysStatus.closeTime = tempTime;
   d4658:	4a0e      	ldr	r2, [pc, #56]	; (d4694 <_Z12setCloseTime6String+0x50>)
   d465a:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d465c:	4a0e      	ldr	r2, [pc, #56]	; (d4698 <_Z12setCloseTime6String+0x54>)
   d465e:	2401      	movs	r4, #1
   d4660:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4662:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4666:	4a0d      	ldr	r2, [pc, #52]	; (d469c <_Z12setCloseTime6String+0x58>)
   d4668:	a804      	add	r0, sp, #16
   d466a:	f002 ff41 	bl	d74f0 <snprintf>
   d466e:	f002 fe87 	bl	d7380 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
   d4672:	b160      	cbz	r0, d468e <_Z12setCloseTime6String+0x4a>
   d4674:	4b0a      	ldr	r3, [pc, #40]	; (d46a0 <_Z12setCloseTime6String+0x5c>)
   d4676:	490b      	ldr	r1, [pc, #44]	; (d46a4 <_Z12setCloseTime6String+0x60>)
   d4678:	781b      	ldrb	r3, [r3, #0]
   d467a:	480b      	ldr	r0, [pc, #44]	; (d46a8 <_Z12setCloseTime6String+0x64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d467c:	2200      	movs	r2, #0
   d467e:	f88d 2000 	strb.w	r2, [sp]
   d4682:	aa04      	add	r2, sp, #16
   d4684:	f7ff fe4e 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4688:	e001      	b.n	d468e <_Z12setCloseTime6String+0x4a>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d468a:	2000      	movs	r0, #0
   d468c:	e000      	b.n	d4690 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
  return 1;
   d468e:	4620      	mov	r0, r4
}
   d4690:	b044      	add	sp, #272	; 0x110
   d4692:	bd10      	pop	{r4, pc}
   d4694:	2003e174 	.word	0x2003e174
   d4698:	2003e16c 	.word	0x2003e16c
   d469c:	000dbb3a 	.word	0x000dbb3a
   d46a0:	2003e068 	.word	0x2003e068
   d46a4:	000dbda9 	.word	0x000dbda9
   d46a8:	2003e134 	.word	0x2003e134

000d46ac <_Z11recordCountv>:
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d46ac:	b570      	push	{r4, r5, r6, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d46ae:	4d29      	ldr	r5, [pc, #164]	; (d4754 <_Z11recordCountv+0xa8>)
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d46b0:	4e29      	ldr	r6, [pc, #164]	; (d4758 <_Z11recordCountv+0xac>)
   d46b2:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_set(nrf_pin);
   d46b4:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d46b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d46bc:	f003 031f 	and.w	r3, r3, #31
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
   d46c0:	b0c2      	sub	sp, #264	; 0x108
   d46c2:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d46c6:	f7ff fd2d 	bl	d4124 <nrf_gpio_pin_set>
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
   d46ca:	7834      	ldrb	r4, [r6, #0]
   d46cc:	f004 fb34 	bl	d8d38 <_ZN9TimeClass6minuteEv>
   d46d0:	4284      	cmp	r4, r0
   d46d2:	4c22      	ldr	r4, [pc, #136]	; (d475c <_Z11recordCountv+0xb0>)
   d46d4:	d004      	beq.n	d46e0 <_Z11recordCountv+0x34>
    currentMinutePeriod = Time.minute();                            // Reset period
   d46d6:	f004 fb2f 	bl	d8d38 <_ZN9TimeClass6minuteEv>
    current.maxMinValue = 1;                                        // Reset for the new minute
   d46da:	2301      	movs	r3, #1
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
    currentMinutePeriod = Time.minute();                            // Reset period
   d46dc:	7030      	strb	r0, [r6, #0]
    current.maxMinValue = 1;                                        // Reset for the new minute
   d46de:	61a3      	str	r3, [r4, #24]
  }
  current.maxMinValue++;
   d46e0:	69a3      	ldr	r3, [r4, #24]
   d46e2:	4e1e      	ldr	r6, [pc, #120]	; (d475c <_Z11recordCountv+0xb0>)
   d46e4:	3301      	adds	r3, #1
   d46e6:	61a3      	str	r3, [r4, #24]

  current.lastCountTime = Time.now();
   d46e8:	f004 fb15 	bl	d8d16 <_ZN9TimeClass3nowEv>
  current.hourlyCount++;                                                // Increment the PersonCount
   d46ec:	6823      	ldr	r3, [r4, #0]
    currentMinutePeriod = Time.minute();                            // Reset period
    current.maxMinValue = 1;                                        // Reset for the new minute
  }
  current.maxMinValue++;

  current.lastCountTime = Time.now();
   d46ee:	60e0      	str	r0, [r4, #12]
  current.hourlyCount++;                                                // Increment the PersonCount
   d46f0:	3301      	adds	r3, #1
   d46f2:	6023      	str	r3, [r4, #0]
  current.dailyCount++;                                                 // Increment the PersonCount
   d46f4:	68a3      	ldr	r3, [r4, #8]
   d46f6:	3301      	adds	r3, #1
   d46f8:	60a3      	str	r3, [r4, #8]
  if (sysStatus.verboseMode && Particle.connected()) {
   d46fa:	4b19      	ldr	r3, [pc, #100]	; (d4760 <_Z11recordCountv+0xb4>)
   d46fc:	791b      	ldrb	r3, [r3, #4]
   d46fe:	b113      	cbz	r3, d4706 <_Z11recordCountv+0x5a>
   d4700:	f002 fe3e 	bl	d7380 <spark_cloud_flag_connected>
   d4704:	b990      	cbnz	r0, d472c <_Z11recordCountv+0x80>
    char data[256];                                                    // Store the date in this character array - not global
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
    publishQueue.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
  }

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4706:	4b17      	ldr	r3, [pc, #92]	; (d4764 <_Z11recordCountv+0xb8>)
   d4708:	2201      	movs	r2, #1
   d470a:	701a      	strb	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d470c:	682b      	ldr	r3, [r5, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d470e:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
   d4712:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d4716:	f003 031f 	and.w	r3, r3, #31
   d471a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d471e:	f7ff fd10 	bl	d4142 <nrf_gpio_pin_clear>
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
   d4722:	4b11      	ldr	r3, [pc, #68]	; (d4768 <_Z11recordCountv+0xbc>)
   d4724:	2200      	movs	r2, #0
   d4726:	701a      	strb	r2, [r3, #0]
}
   d4728:	b042      	add	sp, #264	; 0x108
   d472a:	bd70      	pop	{r4, r5, r6, pc}
  current.lastCountTime = Time.now();
  current.hourlyCount++;                                                // Increment the PersonCount
  current.dailyCount++;                                                 // Increment the PersonCount
  if (sysStatus.verboseMode && Particle.connected()) {
    char data[256];                                                    // Store the date in this character array - not global
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d472c:	68b3      	ldr	r3, [r6, #8]
   d472e:	9300      	str	r3, [sp, #0]
   d4730:	6833      	ldr	r3, [r6, #0]
   d4732:	4a0e      	ldr	r2, [pc, #56]	; (d476c <_Z11recordCountv+0xc0>)
   d4734:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4738:	a802      	add	r0, sp, #8
   d473a:	f002 fed9 	bl	d74f0 <snprintf>
   d473e:	4b0c      	ldr	r3, [pc, #48]	; (d4770 <_Z11recordCountv+0xc4>)
    publishQueue.publish("Count",data, PRIVATE);                           // Helpful for monitoring and calibration
   d4740:	490c      	ldr	r1, [pc, #48]	; (d4774 <_Z11recordCountv+0xc8>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4742:	781b      	ldrb	r3, [r3, #0]
   d4744:	480c      	ldr	r0, [pc, #48]	; (d4778 <_Z11recordCountv+0xcc>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4746:	2200      	movs	r2, #0
   d4748:	f88d 2000 	strb.w	r2, [sp]
   d474c:	aa02      	add	r2, sp, #8
   d474e:	f7ff fde9 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4752:	e7d8      	b.n	d4706 <_Z11recordCountv+0x5a>
   d4754:	2003e0bc 	.word	0x2003e0bc
   d4758:	2003e089 	.word	0x2003e089
   d475c:	2003e114 	.word	0x2003e114
   d4760:	2003e174 	.word	0x2003e174
   d4764:	2003e10c 	.word	0x2003e10c
   d4768:	2003e030 	.word	0x2003e030
   d476c:	000dbb51 	.word	0x000dbb51
   d4770:	2003e068 	.word	0x2003e068
   d4774:	000dbd72 	.word	0x000dbd72
   d4778:	2003e134 	.word	0x2003e134

000d477c <_Z9sendEventv>:
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
}


void sendEvent() {
   d477c:	b510      	push	{r4, lr}
   d477e:	b0c8      	sub	sp, #288	; 0x120
  char data[256];                                                     // Store the date in this character array - not global
  unsigned long timeStampValue = Time.now();                          // Going to start sending timestamps - and will modify for midnight to fix reporting issue
   d4780:	f004 fac9 	bl	d8d16 <_ZN9TimeClass3nowEv>
  int secondsPastHour = timeStampValue % 3600;
  timeStampValue = timeStampValue - (secondsPastHour + 1);            // This ensures that the midnight report is back-dated 5 minutes 
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i, \"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, timeStampValue);
   d4784:	4c1c      	ldr	r4, [pc, #112]	; (d47f8 <_Z9sendEventv+0x7c>)


void sendEvent() {
  char data[256];                                                     // Store the date in this character array - not global
  unsigned long timeStampValue = Time.now();                          // Going to start sending timestamps - and will modify for midnight to fix reporting issue
  int secondsPastHour = timeStampValue % 3600;
   d4786:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d478a:	fbb0 f3f2 	udiv	r3, r0, r2
   d478e:	fb02 0313 	mls	r3, r2, r3, r0
   d4792:	3801      	subs	r0, #1
  timeStampValue = timeStampValue - (secondsPastHour + 1);            // This ensures that the midnight report is back-dated 5 minutes 
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,  \"key1\":\"%s\", \"temp\":%i, \"resets\":%i, \"alerts\":%i, \"maxmin\":%i, \"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContextStr, current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, timeStampValue);
   d4794:	1ac0      	subs	r0, r0, r3
   d4796:	69a3      	ldr	r3, [r4, #24]
   d4798:	9306      	str	r3, [sp, #24]
   d479a:	6963      	ldr	r3, [r4, #20]
   d479c:	9305      	str	r3, [sp, #20]
   d479e:	4b17      	ldr	r3, [pc, #92]	; (d47fc <_Z9sendEventv+0x80>)
   d47a0:	9007      	str	r0, [sp, #28]
   d47a2:	691a      	ldr	r2, [r3, #16]
   d47a4:	9204      	str	r2, [sp, #16]
   d47a6:	6922      	ldr	r2, [r4, #16]
   d47a8:	9203      	str	r2, [sp, #12]
   d47aa:	4a15      	ldr	r2, [pc, #84]	; (d4800 <_Z9sendEventv+0x84>)
   d47ac:	9202      	str	r2, [sp, #8]
   d47ae:	689b      	ldr	r3, [r3, #8]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	68a3      	ldr	r3, [r4, #8]
   d47b4:	9300      	str	r3, [sp, #0]
   d47b6:	4a13      	ldr	r2, [pc, #76]	; (d4804 <_Z9sendEventv+0x88>)
   d47b8:	6823      	ldr	r3, [r4, #0]
   d47ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47be:	a808      	add	r0, sp, #32
   d47c0:	f002 fe96 	bl	d74f0 <snprintf>
   d47c4:	4b10      	ldr	r3, [pc, #64]	; (d4808 <_Z9sendEventv+0x8c>)
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d47c6:	4911      	ldr	r1, [pc, #68]	; (d480c <_Z9sendEventv+0x90>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d47c8:	781b      	ldrb	r3, [r3, #0]
   d47ca:	4811      	ldr	r0, [pc, #68]	; (d4810 <_Z9sendEventv+0x94>)
   d47cc:	2200      	movs	r2, #0
   d47ce:	f88d 2000 	strb.w	r2, [sp]
   d47d2:	aa08      	add	r2, sp, #32
   d47d4:	f7ff fda6 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d47d8:	4b0e      	ldr	r3, [pc, #56]	; (d4814 <_Z9sendEventv+0x98>)
   d47da:	2201      	movs	r2, #1
   d47dc:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47de:	f002 fba5 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d47e2:	4b0d      	ldr	r3, [pc, #52]	; (d4818 <_Z9sendEventv+0x9c>)
   d47e4:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d47e6:	f004 fa9d 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d47ea:	4b0c      	ldr	r3, [pc, #48]	; (d481c <_Z9sendEventv+0xa0>)
   d47ec:	6018      	str	r0, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d47ee:	6823      	ldr	r3, [r4, #0]
   d47f0:	6063      	str	r3, [r4, #4]
}
   d47f2:	b048      	add	sp, #288	; 0x120
   d47f4:	bd10      	pop	{r4, pc}
   d47f6:	bf00      	nop
   d47f8:	2003e114 	.word	0x2003e114
   d47fc:	2003e174 	.word	0x2003e174
   d4800:	2003e071 	.word	0x2003e071
   d4804:	000dbb6e 	.word	0x000dbb6e
   d4808:	2003e068 	.word	0x2003e068
   d480c:	000dbbe9 	.word	0x000dbbe9
   d4810:	2003e134 	.word	0x2003e134
   d4814:	2003e130 	.word	0x2003e130
   d4818:	2003e084 	.word	0x2003e084
   d481c:	2003e08c 	.word	0x2003e08c

000d4820 <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d4820:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4822:	4d19      	ldr	r5, [pc, #100]	; (d4888 <_Z17getSignalStrengthv+0x68>)
   d4824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
   d4826:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4828:	ac04      	add	r4, sp, #16
   d482a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d482c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d482e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4830:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4834:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4838:	4914      	ldr	r1, [pc, #80]	; (d488c <_Z17getSignalStrengthv+0x6c>)
   d483a:	a80e      	add	r0, sp, #56	; 0x38
   d483c:	f002 ff02 	bl	d7644 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4840:	a80e      	add	r0, sp, #56	; 0x38
   d4842:	f002 ff52 	bl	d76ea <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4846:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4848:	a80e      	add	r0, sp, #56	; 0x38
   d484a:	f002 ff9f 	bl	d778c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d484e:	a80e      	add	r0, sp, #56	; 0x38
  CellularSignal sig = Cellular.RSSI();

  auto rat = sig.getAccessTechnology();

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4850:	ee10 5a10 	vmov	r5, s0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4854:	f002 ff80 	bl	d7758 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4858:	ab18      	add	r3, sp, #96	; 0x60
   d485a:	ee10 0a10 	vmov	r0, s0
   d485e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4862:	f005 f81f 	bl	d98a4 <__aeabi_f2d>
   d4866:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d486a:	4628      	mov	r0, r5
   d486c:	f005 f81a 	bl	d98a4 <__aeabi_f2d>
   d4870:	e9cd 0100 	strd	r0, r1, [sp]
   d4874:	4a06      	ldr	r2, [pc, #24]	; (d4890 <_Z17getSignalStrengthv+0x70>)
   d4876:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d487a:	4806      	ldr	r0, [pc, #24]	; (d4894 <_Z17getSignalStrengthv+0x74>)
   d487c:	2140      	movs	r1, #64	; 0x40
   d487e:	f002 fe37 	bl	d74f0 <snprintf>
}
   d4882:	b019      	add	sp, #100	; 0x64
   d4884:	bd30      	pop	{r4, r5, pc}
   d4886:	bf00      	nop
   d4888:	000dba40 	.word	0x000dba40
   d488c:	2003e1a8 	.word	0x2003e1a8
   d4890:	000dbc01 	.word	0x000dbc01
   d4894:	2003e0c4 	.word	0x2003e0c4

000d4898 <_Z14getTemperaturev>:
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

int getTemperature()
{
   d4898:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d489a:	200f      	movs	r0, #15
   d489c:	f004 fc9b 	bl	d91d6 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d48a0:	f004 ffee 	bl	d9880 <__aeabi_i2d>
   d48a4:	a320      	add	r3, pc, #128	; (adr r3, d4928 <_Z14getTemperaturev+0x90>)
   d48a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48aa:	f005 f84f 	bl	d994c <__aeabi_dmul>
   d48ae:	f005 fa87 	bl	d9dc0 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d48b2:	eddf 7a15 	vldr	s15, [pc, #84]	; d4908 <_Z14getTemperaturev+0x70>
   d48b6:	ee07 0a10 	vmov	s14, r0
   d48ba:	ee67 7a27 	vmul.f32	s15, s14, s15
   d48be:	ee17 0a90 	vmov	r0, s15
   d48c2:	f004 ffef 	bl	d98a4 <__aeabi_f2d>
   d48c6:	2200      	movs	r2, #0
   d48c8:	4b10      	ldr	r3, [pc, #64]	; (d490c <_Z14getTemperaturev+0x74>)
   d48ca:	f004 fe8b 	bl	d95e4 <__aeabi_dsub>
   d48ce:	2200      	movs	r2, #0
   d48d0:	4b0f      	ldr	r3, [pc, #60]	; (d4910 <_Z14getTemperaturev+0x78>)
   d48d2:	f005 f83b 	bl	d994c <__aeabi_dmul>
   d48d6:	f005 fa4b 	bl	d9d70 <__aeabi_d2iz>
   d48da:	f004 ffd1 	bl	d9880 <__aeabi_i2d>
   d48de:	2200      	movs	r2, #0
   d48e0:	4b0c      	ldr	r3, [pc, #48]	; (d4914 <_Z14getTemperaturev+0x7c>)
   d48e2:	f005 f833 	bl	d994c <__aeabi_dmul>
   d48e6:	2200      	movs	r2, #0
   d48e8:	4b0b      	ldr	r3, [pc, #44]	; (d4918 <_Z14getTemperaturev+0x80>)
   d48ea:	f005 f959 	bl	d9ba0 <__aeabi_ddiv>
   d48ee:	2200      	movs	r2, #0
   d48f0:	4b0a      	ldr	r3, [pc, #40]	; (d491c <_Z14getTemperaturev+0x84>)
   d48f2:	f004 fe79 	bl	d95e8 <__adddf3>
   d48f6:	f005 fa3b 	bl	d9d70 <__aeabi_d2iz>
   d48fa:	4b09      	ldr	r3, [pc, #36]	; (d4920 <_Z14getTemperaturev+0x88>)
   d48fc:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d48fe:	4b09      	ldr	r3, [pc, #36]	; (d4924 <_Z14getTemperaturev+0x8c>)
   d4900:	2201      	movs	r2, #1
   d4902:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
   d4904:	bd08      	pop	{r3, pc}
   d4906:	bf00      	nop
   d4908:	39800000 	.word	0x39800000
   d490c:	3fe00000 	.word	0x3fe00000
   d4910:	40590000 	.word	0x40590000
   d4914:	40220000 	.word	0x40220000
   d4918:	40140000 	.word	0x40140000
   d491c:	40400000 	.word	0x40400000
   d4920:	2003e114 	.word	0x2003e114
   d4924:	2003e10c 	.word	0x2003e10c
   d4928:	66666666 	.word	0x66666666
   d492c:	400a6666 	.word	0x400a6666

000d4930 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
   d4930:	b510      	push	{r4, lr}

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4932:	4c0d      	ldr	r4, [pc, #52]	; (d4968 <_Z11petWatchdogv+0x38>)
   d4934:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4936:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d493a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d493e:	f003 031f 	and.w	r3, r3, #31
   d4942:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4946:	f7ff fbed 	bl	d4124 <nrf_gpio_pin_set>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d494a:	6823      	ldr	r3, [r4, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d494c:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
   d4950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   d4954:	f003 031f 	and.w	r3, r3, #31
   d4958:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d495c:	f7ff fbf1 	bl	d4142 <nrf_gpio_pin_clear>
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
   d4960:	4b02      	ldr	r3, [pc, #8]	; (d496c <_Z11petWatchdogv+0x3c>)
   d4962:	2200      	movs	r2, #0
   d4964:	701a      	strb	r2, [r3, #0]
   d4966:	bd10      	pop	{r4, pc}
   d4968:	2003e0bc 	.word	0x2003e0bc
   d496c:	2003e090 	.word	0x2003e090

000d4970 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
   d4970:	b513      	push	{r0, r1, r4, lr}
   d4972:	4604      	mov	r4, r0
  PMIC pmic(true);
   d4974:	2101      	movs	r1, #1
   d4976:	a801      	add	r0, sp, #4
   d4978:	f003 fd5d 	bl	d8436 <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
   d497c:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
   d497e:	b11c      	cbz	r4, d4988 <_Z14enableChargingb+0x18>
    pmic.enableCharging();
   d4980:	f003 fe0b 	bl	d859a <_ZN4PMIC14enableChargingEv>
    return TRUE;
   d4984:	2401      	movs	r4, #1
   d4986:	e001      	b.n	d498c <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
   d4988:	f003 fdd7 	bl	d853a <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
   d498c:	a801      	add	r0, sp, #4
   d498e:	f003 fd61 	bl	d8454 <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
   d4992:	4620      	mov	r0, r4
   d4994:	b002      	add	sp, #8
   d4996:	bd10      	pop	{r4, pc}

000d4998 <_Z14setPowerConfigv>:
  watchdogFlag = false;
}


// Power Management function
int setPowerConfig() {
   d4998:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d499a:	2420      	movs	r4, #32
   d499c:	b090      	sub	sp, #64	; 0x40
   d499e:	4622      	mov	r2, r4
   d49a0:	2100      	movs	r1, #0
   d49a2:	4668      	mov	r0, sp
   d49a4:	f005 fc72 	bl	da28c <memset>
   d49a8:	4622      	mov	r2, r4
   d49aa:	2100      	movs	r1, #0
   d49ac:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d49b0:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d49b4:	f005 fc6a 	bl	da28c <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d49b8:	2100      	movs	r1, #0
   d49ba:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d49be:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d49c2:	f002 fca1 	bl	d7308 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
  if (sysStatus.solarPowerMode) {
   d49c6:	4b18      	ldr	r3, [pc, #96]	; (d4a28 <_Z14setPowerConfigv+0x90>)
   d49c8:	7959      	ldrb	r1, [r3, #5]
   d49ca:	9b00      	ldr	r3, [sp, #0]
   d49cc:	f44f 7261 	mov.w	r2, #900	; 0x384
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d49d0:	f8ad 2008 	strh.w	r2, [sp, #8]
   d49d4:	b181      	cbz	r1, d49f8 <_Z14setPowerConfigv+0x60>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d49d6:	f241 32d8 	movw	r2, #5080	; 0x13d8
   d49da:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d49de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d49e2:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d49e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d49ea:	f241 0270 	movw	r2, #4208	; 0x1070
   d49ee:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d49f2:	9300      	str	r3, [sp, #0]
   d49f4:	2100      	movs	r1, #0
   d49f6:	e00c      	b.n	d4a12 <_Z14setPowerConfigv+0x7a>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d49f8:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d49fc:	f8ad 200a 	strh.w	r2, [sp, #10]
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4a04:	f241 0210 	movw	r2, #4112	; 0x1010

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4a08:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4a0c:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4a10:	9300      	str	r3, [sp, #0]
   d4a12:	4668      	mov	r0, sp
   d4a14:	f002 fc78 	bl	d7308 <system_power_management_set_config>
   d4a18:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                  // This is the default value for the Boron
        .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
   d4a1a:	2001      	movs	r0, #1
   d4a1c:	f7ff ffa8 	bl	d4970 <_Z14enableChargingb>
    return res;
  }
}
   d4a20:	4620      	mov	r0, r4
   d4a22:	b010      	add	sp, #64	; 0x40
   d4a24:	bd10      	pop	{r4, pc}
   d4a26:	bf00      	nop
   d4a28:	2003e174 	.word	0x2003e174

000d4a2c <_Z12setSolarMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
   d4a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a2e:	491c      	ldr	r1, [pc, #112]	; (d4aa0 <_Z12setSolarMode6String+0x74>)
   d4a30:	4604      	mov	r4, r0
   d4a32:	f003 fea8 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a36:	4605      	mov	r5, r0
   d4a38:	b1b0      	cbz	r0, d4a68 <_Z12setSolarMode6String+0x3c>
  {
    sysStatus.solarPowerMode = true;
   d4a3a:	4b1a      	ldr	r3, [pc, #104]	; (d4aa4 <_Z12setSolarMode6String+0x78>)
   d4a3c:	2401      	movs	r4, #1
   d4a3e:	715c      	strb	r4, [r3, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4a40:	f7ff ffaa 	bl	d4998 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4a44:	4b18      	ldr	r3, [pc, #96]	; (d4aa8 <_Z12setSolarMode6String+0x7c>)
   d4a46:	701c      	strb	r4, [r3, #0]
   d4a48:	f002 fc9a 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4a4c:	b908      	cbnz	r0, d4a52 <_Z12setSolarMode6String+0x26>
    return 1;
   d4a4e:	2001      	movs	r0, #1
   d4a50:	e024      	b.n	d4a9c <_Z12setSolarMode6String+0x70>
   d4a52:	4b16      	ldr	r3, [pc, #88]	; (d4aac <_Z12setSolarMode6String+0x80>)
  if (command == "1")
  {
    sysStatus.solarPowerMode = true;
    setPowerConfig();                                               // Change the power management Settings
    systemStatusWriteNeeded=true;
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE);
   d4a54:	4916      	ldr	r1, [pc, #88]	; (d4ab0 <_Z12setSolarMode6String+0x84>)
   d4a56:	781b      	ldrb	r3, [r3, #0]
   d4a58:	4816      	ldr	r0, [pc, #88]	; (d4ab4 <_Z12setSolarMode6String+0x88>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a5a:	2200      	movs	r2, #0
   d4a5c:	f88d 2000 	strb.w	r2, [sp]
   d4a60:	4a15      	ldr	r2, [pc, #84]	; (d4ab8 <_Z12setSolarMode6String+0x8c>)
   d4a62:	f7ff fc5f 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a66:	e7f2      	b.n	d4a4e <_Z12setSolarMode6String+0x22>
   d4a68:	4914      	ldr	r1, [pc, #80]	; (d4abc <_Z12setSolarMode6String+0x90>)
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f003 fe8b 	bl	d8786 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d4a70:	b1a0      	cbz	r0, d4a9c <_Z12setSolarMode6String+0x70>
  {
    sysStatus.solarPowerMode = false;
   d4a72:	4b0c      	ldr	r3, [pc, #48]	; (d4aa4 <_Z12setSolarMode6String+0x78>)
   d4a74:	715d      	strb	r5, [r3, #5]
    systemStatusWriteNeeded=true;
   d4a76:	4b0c      	ldr	r3, [pc, #48]	; (d4aa8 <_Z12setSolarMode6String+0x7c>)
   d4a78:	2401      	movs	r4, #1
   d4a7a:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4a7c:	f7ff ff8c 	bl	d4998 <_Z14setPowerConfigv>
   d4a80:	f002 fc7e 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
   d4a84:	2800      	cmp	r0, #0
   d4a86:	d0e2      	beq.n	d4a4e <_Z12setSolarMode6String+0x22>
   d4a88:	4b08      	ldr	r3, [pc, #32]	; (d4aac <_Z12setSolarMode6String+0x80>)
   d4a8a:	4a0d      	ldr	r2, [pc, #52]	; (d4ac0 <_Z12setSolarMode6String+0x94>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4a8c:	781b      	ldrb	r3, [r3, #0]
   d4a8e:	4908      	ldr	r1, [pc, #32]	; (d4ab0 <_Z12setSolarMode6String+0x84>)
   d4a90:	f88d 5000 	strb.w	r5, [sp]
   d4a94:	4807      	ldr	r0, [pc, #28]	; (d4ab4 <_Z12setSolarMode6String+0x88>)
   d4a96:	f7ff fc45 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a9a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
   d4a9c:	b003      	add	sp, #12
   d4a9e:	bd30      	pop	{r4, r5, pc}
   d4aa0:	000dbec5 	.word	0x000dbec5
   d4aa4:	2003e174 	.word	0x2003e174
   d4aa8:	2003e16c 	.word	0x2003e16c
   d4aac:	2003e068 	.word	0x2003e068
   d4ab0:	000dbc47 	.word	0x000dbc47
   d4ab4:	2003e134 	.word	0x2003e134
   d4ab8:	000dbc1a 	.word	0x000dbc1a
   d4abc:	000dbaf1 	.word	0x000dbaf1
   d4ac0:	000dbc31 	.word	0x000dbc31

000d4ac4 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
   d4ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4ac8:	481f      	ldr	r0, [pc, #124]	; (d4b48 <_Z17connectToParticlev+0x84>)
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4aca:	4d20      	ldr	r5, [pc, #128]	; (d4b4c <_Z17connectToParticlev+0x88>)
   d4acc:	6840      	ldr	r0, [r0, #4]
   d4ace:	2300      	movs	r3, #0
   d4ad0:	461a      	mov	r2, r3
   d4ad2:	4619      	mov	r1, r3
   d4ad4:	f002 fcb4 	bl	d7440 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4ad8:	f002 fc42 	bl	d7360 <spark_cloud_flag_connect>
   d4adc:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4ae0:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4ae4:	2700      	movs	r7, #0
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4ae6:	f7ff fc09 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4aea:	f04f 0900 	mov.w	r9, #0
   d4aee:	4680      	mov	r8, r0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4af0:	f7ff fc04 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4af4:	ebb0 0008 	subs.w	r0, r0, r8
   d4af8:	eb61 0109 	sbc.w	r1, r1, r9
   d4afc:	428f      	cmp	r7, r1
   d4afe:	bf08      	it	eq
   d4b00:	4286      	cmpeq	r6, r0
   d4b02:	d305      	bcc.n	d4b10 <_Z17connectToParticlev+0x4c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b04:	f002 fc3c 	bl	d7380 <spark_cloud_flag_connected>
   d4b08:	b910      	cbnz	r0, d4b10 <_Z17connectToParticlev+0x4c>
            spark_process();
   d4b0a:	f002 fc21 	bl	d7350 <spark_process>
   d4b0e:	e7ef      	b.n	d4af0 <_Z17connectToParticlev+0x2c>
   d4b10:	f002 fc36 	bl	d7380 <spark_cloud_flag_connected>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4b14:	b148      	cbz	r0, d4b2a <_Z17connectToParticlev+0x66>
   d4b16:	f002 fc33 	bl	d7380 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
   d4b1a:	b198      	cbz	r0, d4b44 <_Z17connectToParticlev+0x80>
    sysStatus.connectedStatus = true;
   d4b1c:	4a0c      	ldr	r2, [pc, #48]	; (d4b50 <_Z17connectToParticlev+0x8c>)
   d4b1e:	2301      	movs	r3, #1
   d4b20:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d4b22:	4a0c      	ldr	r2, [pc, #48]	; (d4b54 <_Z17connectToParticlev+0x90>)
   d4b24:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
   d4b2a:	782b      	ldrb	r3, [r5, #0]
   d4b2c:	b10b      	cbz	r3, d4b32 <_Z17connectToParticlev+0x6e>
   d4b2e:	f7ff fdbd 	bl	d46ac <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b32:	f002 f9fb 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b36:	4b08      	ldr	r3, [pc, #32]	; (d4b58 <_Z17connectToParticlev+0x94>)
   d4b38:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4b3a:	f002 fc09 	bl	d7350 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4b3e:	3c01      	subs	r4, #1
   d4b40:	d0e9      	beq.n	d4b16 <_Z17connectToParticlev+0x52>
   d4b42:	e7d0      	b.n	d4ae6 <_Z17connectToParticlev+0x22>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
   d4b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4b48:	2003e1a8 	.word	0x2003e1a8
   d4b4c:	2003e030 	.word	0x2003e030
   d4b50:	2003e174 	.word	0x2003e174
   d4b54:	2003e16c 	.word	0x2003e16c
   d4b58:	2003e5f0 	.word	0x2003e5f0

000d4b5c <_Z15setLowPowerMode6String>:
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE);
  return 1;
}

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4b5e:	4923      	ldr	r1, [pc, #140]	; (d4bec <_Z15setLowPowerMode6String+0x90>)
   d4b60:	4604      	mov	r4, r0
   d4b62:	f003 fe10 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4b66:	b928      	cbnz	r0, d4b74 <_Z15setLowPowerMode6String+0x18>
   d4b68:	4921      	ldr	r1, [pc, #132]	; (d4bf0 <_Z15setLowPowerMode6String+0x94>)
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	f003 fe0b 	bl	d8786 <_ZNK6String6equalsEPKc>
   d4b70:	2800      	cmp	r0, #0
   d4b72:	d039      	beq.n	d4be8 <_Z15setLowPowerMode6String+0x8c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4b74:	491d      	ldr	r1, [pc, #116]	; (d4bec <_Z15setLowPowerMode6String+0x90>)
   d4b76:	4620      	mov	r0, r4
   d4b78:	f003 fe05 	bl	d8786 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4b7c:	b188      	cbz	r0, d4ba2 <_Z15setLowPowerMode6String+0x46>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b7e:	f002 fbff 	bl	d7380 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
   d4b82:	b148      	cbz	r0, d4b98 <_Z15setLowPowerMode6String+0x3c>
   d4b84:	4b1b      	ldr	r3, [pc, #108]	; (d4bf4 <_Z15setLowPowerMode6String+0x98>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE);
   d4b86:	491c      	ldr	r1, [pc, #112]	; (d4bf8 <_Z15setLowPowerMode6String+0x9c>)
   d4b88:	781b      	ldrb	r3, [r3, #0]
   d4b8a:	481c      	ldr	r0, [pc, #112]	; (d4bfc <_Z15setLowPowerMode6String+0xa0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4b8c:	2200      	movs	r2, #0
   d4b8e:	f88d 2000 	strb.w	r2, [sp]
   d4b92:	4a1b      	ldr	r2, [pc, #108]	; (d4c00 <_Z15setLowPowerMode6String+0xa4>)
   d4b94:	f7ff fbc6 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    }
    sysStatus.lowPowerMode = true;
   d4b98:	4b1a      	ldr	r3, [pc, #104]	; (d4c04 <_Z15setLowPowerMode6String+0xa8>)
    strcpy(lowPowerModeStr,"True");
   d4b9a:	491b      	ldr	r1, [pc, #108]	; (d4c08 <_Z15setLowPowerMode6String+0xac>)
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    if (Particle.connected()) {
      publishQueue.publish("Mode","Low Power Mode", PRIVATE);
    }
    sysStatus.lowPowerMode = true;
   d4b9c:	2201      	movs	r2, #1
   d4b9e:	719a      	strb	r2, [r3, #6]
   d4ba0:	e01c      	b.n	d4bdc <_Z15setLowPowerMode6String+0x80>
   d4ba2:	4913      	ldr	r1, [pc, #76]	; (d4bf0 <_Z15setLowPowerMode6String+0x94>)
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	f003 fdee 	bl	d8786 <_ZNK6String6equalsEPKc>
    strcpy(lowPowerModeStr,"True");
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4baa:	b1d0      	cbz	r0, d4be2 <_Z15setLowPowerMode6String+0x86>
   d4bac:	f002 fbe8 	bl	d7380 <spark_cloud_flag_connected>
   d4bb0:	4c14      	ldr	r4, [pc, #80]	; (d4c04 <_Z15setLowPowerMode6String+0xa8>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d4bb2:	b918      	cbnz	r0, d4bbc <_Z15setLowPowerMode6String+0x60>
      connectToParticle();
   d4bb4:	f7ff ff86 	bl	d4ac4 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
   d4bb8:	2301      	movs	r3, #1
   d4bba:	70e3      	strb	r3, [r4, #3]
   d4bbc:	4b0d      	ldr	r3, [pc, #52]	; (d4bf4 <_Z15setLowPowerMode6String+0x98>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
   d4bbe:	490e      	ldr	r1, [pc, #56]	; (d4bf8 <_Z15setLowPowerMode6String+0x9c>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4bc0:	781b      	ldrb	r3, [r3, #0]
   d4bc2:	4a12      	ldr	r2, [pc, #72]	; (d4c0c <_Z15setLowPowerMode6String+0xb0>)
   d4bc4:	480d      	ldr	r0, [pc, #52]	; (d4bfc <_Z15setLowPowerMode6String+0xa0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4bc6:	2500      	movs	r5, #0
   d4bc8:	f88d 5000 	strb.w	r5, [sp]
   d4bcc:	f7ff fbaa 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4bd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4bd4:	f002 fcac 	bl	d7530 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4bd8:	490d      	ldr	r1, [pc, #52]	; (d4c10 <_Z15setLowPowerMode6String+0xb4>)
      connectToParticle();
      sysStatus.connectedStatus = true;
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4bda:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
   d4bdc:	480d      	ldr	r0, [pc, #52]	; (d4c14 <_Z15setLowPowerMode6String+0xb8>)
   d4bde:	f005 fddd 	bl	da79c <strcpy>
  }
  systemStatusWriteNeeded = true;
   d4be2:	4b0d      	ldr	r3, [pc, #52]	; (d4c18 <_Z15setLowPowerMode6String+0xbc>)
   d4be4:	2001      	movs	r0, #1
   d4be6:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d4be8:	b003      	add	sp, #12
   d4bea:	bd30      	pop	{r4, r5, pc}
   d4bec:	000dbec5 	.word	0x000dbec5
   d4bf0:	000dbaf1 	.word	0x000dbaf1
   d4bf4:	2003e068 	.word	0x2003e068
   d4bf8:	000dbc47 	.word	0x000dbc47
   d4bfc:	2003e134 	.word	0x2003e134
   d4c00:	000dbc4c 	.word	0x000dbc4c
   d4c04:	2003e174 	.word	0x2003e174
   d4c08:	000dbc5b 	.word	0x000dbc5b
   d4c0c:	000dbc60 	.word	0x000dbc60
   d4c10:	000dbc72 	.word	0x000dbc72
   d4c14:	2003e10d 	.word	0x2003e10d
   d4c18:	2003e16c 	.word	0x2003e16c

000d4c1c <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	f002 fbaf 	bl	d7380 <spark_cloud_flag_connected>
  return !Particle.connected();
   d4c22:	f080 0001 	eor.w	r0, r0, #1
}
   d4c26:	b2c0      	uxtb	r0, r0
   d4c28:	bd08      	pop	{r3, pc}
	...

000d4c2c <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
   d4c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4c2e:	f002 fb9f 	bl	d7370 <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4c32:	f7ff fb63 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4c36:	2500      	movs	r5, #0
   d4c38:	4604      	mov	r4, r0
   d4c3a:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4c3e:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4c40:	f7ff fb5c 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4c44:	1b00      	subs	r0, r0, r4
   d4c46:	eb61 0105 	sbc.w	r1, r1, r5
   d4c4a:	428f      	cmp	r7, r1
   d4c4c:	bf08      	it	eq
   d4c4e:	4286      	cmpeq	r6, r0
   d4c50:	d305      	bcc.n	d4c5e <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4c52:	f7ff ffe3 	bl	d4c1c <_Z12notConnectedv>
   d4c56:	b910      	cbnz	r0, d4c5e <_Z22disconnectFromParticlev+0x32>
            spark_process();
   d4c58:	f002 fb7a 	bl	d7350 <spark_process>
   d4c5c:	e7f0      	b.n	d4c40 <_Z22disconnectFromParticlev+0x14>
   d4c5e:	f7ff ffdd 	bl	d4c1c <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4c62:	4809      	ldr	r0, [pc, #36]	; (d4c88 <_Z22disconnectFromParticlev+0x5c>)
   d4c64:	2300      	movs	r3, #0
   d4c66:	4619      	mov	r1, r3
   d4c68:	461a      	mov	r2, r3
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	f002 fbf0 	bl	d7450 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
   d4c70:	4b06      	ldr	r3, [pc, #24]	; (d4c8c <_Z22disconnectFromParticlev+0x60>)
   d4c72:	2200      	movs	r2, #0
   d4c74:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4c76:	4b06      	ldr	r3, [pc, #24]	; (d4c90 <_Z22disconnectFromParticlev+0x64>)
   d4c78:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4c7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
   d4c7e:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4c80:	f002 fc56 	bl	d7530 <delay>
  return true;
}
   d4c84:	4620      	mov	r0, r4
   d4c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4c88:	2003e1a8 	.word	0x2003e1a8
   d4c8c:	2003e174 	.word	0x2003e174
   d4c90:	2003e16c 	.word	0x2003e16c

000d4c94 <_Z15resetEverythingv>:
    return 1;
  }
  else return 0;
}

void resetEverything() {                                            // The device is waking up in a new day or is a new install
   d4c94:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
   d4c96:	4d08      	ldr	r5, [pc, #32]	; (d4cb8 <_Z15resetEverythingv+0x24>)
   d4c98:	2400      	movs	r4, #0
   d4c9a:	60ac      	str	r4, [r5, #8]
  current.hourlyCount = 0;
   d4c9c:	602c      	str	r4, [r5, #0]
  current.hourlyCountInFlight = 0;
   d4c9e:	606c      	str	r4, [r5, #4]
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4ca0:	f004 f839 	bl	d8d16 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4ca4:	4b05      	ldr	r3, [pc, #20]	; (d4cbc <_Z15resetEverythingv+0x28>)
  currentCountsWriteNeeded=true;
   d4ca6:	4a06      	ldr	r2, [pc, #24]	; (d4cc0 <_Z15resetEverythingv+0x2c>)
void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4ca8:	611c      	str	r4, [r3, #16]
  currentCountsWriteNeeded=true;
   d4caa:	2301      	movs	r3, #1
   d4cac:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4cae:	4a05      	ldr	r2, [pc, #20]	; (d4cc4 <_Z15resetEverythingv+0x30>)

void resetEverything() {                                            // The device is waking up in a new day or is a new install
  current.dailyCount = 0;                              // Reset the counts in FRAM as well
  current.hourlyCount = 0;
  current.hourlyCountInFlight = 0;
  current.lastCountTime = Time.now();                      // Set the time context to the new day
   d4cb0:	60e8      	str	r0, [r5, #12]
  sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
   d4cb2:	616c      	str	r4, [r5, #20]
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
   d4cb4:	7013      	strb	r3, [r2, #0]
   d4cb6:	bd38      	pop	{r3, r4, r5, pc}
   d4cb8:	2003e114 	.word	0x2003e114
   d4cbc:	2003e174 	.word	0x2003e174
   d4cc0:	2003e10c 	.word	0x2003e10c
   d4cc4:	2003e16c 	.word	0x2003e16c

000d4cc8 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
   d4cc8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4cca:	4d13      	ldr	r5, [pc, #76]	; (d4d18 <_Z22publishStateTransitionv+0x50>)
   d4ccc:	4c13      	ldr	r4, [pc, #76]	; (d4d1c <_Z22publishStateTransitionv+0x54>)
   d4cce:	4914      	ldr	r1, [pc, #80]	; (d4d20 <_Z22publishStateTransitionv+0x58>)
   d4cd0:	782a      	ldrb	r2, [r5, #0]
   d4cd2:	7820      	ldrb	r0, [r4, #0]
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
   d4cd4:	b08d      	sub	sp, #52	; 0x34
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4cd6:	230e      	movs	r3, #14
   d4cd8:	fb03 1202 	mla	r2, r3, r2, r1
   d4cdc:	9200      	str	r2, [sp, #0]
   d4cde:	fb03 1300 	mla	r3, r3, r0, r1
   d4ce2:	4a10      	ldr	r2, [pc, #64]	; (d4d24 <_Z22publishStateTransitionv+0x5c>)
   d4ce4:	2128      	movs	r1, #40	; 0x28
   d4ce6:	a802      	add	r0, sp, #8
   d4ce8:	f002 fc02 	bl	d74f0 <snprintf>
  oldState = state;
   d4cec:	782b      	ldrb	r3, [r5, #0]
   d4cee:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4cf0:	f002 fb46 	bl	d7380 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4cf4:	b148      	cbz	r0, d4d0a <_Z22publishStateTransitionv+0x42>
   d4cf6:	4b0c      	ldr	r3, [pc, #48]	; (d4d28 <_Z22publishStateTransitionv+0x60>)
   d4cf8:	490c      	ldr	r1, [pc, #48]	; (d4d2c <_Z22publishStateTransitionv+0x64>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4cfa:	781b      	ldrb	r3, [r3, #0]
   d4cfc:	480c      	ldr	r0, [pc, #48]	; (d4d30 <_Z22publishStateTransitionv+0x68>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4cfe:	2200      	movs	r2, #0
   d4d00:	f88d 2000 	strb.w	r2, [sp]
   d4d04:	aa02      	add	r2, sp, #8
   d4d06:	f7ff fb0d 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d4d0a:	f004 f92b 	bl	d8f64 <_Z16_fetch_usbserialv>
   d4d0e:	a902      	add	r1, sp, #8
   d4d10:	f003 fc7a 	bl	d8608 <_ZN5Print7printlnEPKc>
}
   d4d14:	b00d      	add	sp, #52	; 0x34
   d4d16:	bd30      	pop	{r4, r5, pc}
   d4d18:	2003e088 	.word	0x2003e088
   d4d1c:	2003e070 	.word	0x2003e070
   d4d20:	2003def8 	.word	0x2003def8
   d4d24:	000dbc78 	.word	0x000dbc78
   d4d28:	2003e068 	.word	0x2003e068
   d4d2c:	000dbc86 	.word	0x000dbc86
   d4d30:	2003e134 	.word	0x2003e134

000d4d34 <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4d36:	f002 fb1b 	bl	d7370 <spark_cloud_flag_disconnect>
   d4d3a:	f002 f8f7 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4d3e:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4d42:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d44:	f002 fb1c 	bl	d7380 <spark_cloud_flag_connected>
   d4d48:	b140      	cbz	r0, d4d5c <_Z14fullModemResetv+0x28>
   d4d4a:	f002 f8ef 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
   d4d4e:	1b00      	subs	r0, r0, r4
   d4d50:	42a8      	cmp	r0, r5
   d4d52:	d803      	bhi.n	d4d5c <_Z14fullModemResetv+0x28>
		delay(100);
   d4d54:	2064      	movs	r0, #100	; 0x64
   d4d56:	f002 fbeb 	bl	d7530 <delay>
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4d5a:	e7f3      	b.n	d4d44 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4d5c:	2100      	movs	r1, #0
   d4d5e:	4b09      	ldr	r3, [pc, #36]	; (d4d84 <_Z14fullModemResetv+0x50>)
   d4d60:	f247 5230 	movw	r2, #30000	; 0x7530
   d4d64:	4608      	mov	r0, r1
   d4d66:	f002 f851 	bl	d6e0c <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d4d6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d6e:	f002 fbdf 	bl	d7530 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4d72:	4b05      	ldr	r3, [pc, #20]	; (d4d88 <_Z14fullModemResetv+0x54>)
   d4d74:	220a      	movs	r2, #10
   d4d76:	681b      	ldr	r3, [r3, #0]
   d4d78:	2101      	movs	r1, #1
   d4d7a:	4668      	mov	r0, sp
   d4d7c:	f003 fdf2 	bl	d8964 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4d80:	b003      	add	sp, #12
   d4d82:	bd30      	pop	{r4, r5, pc}
   d4d84:	000dbc97 	.word	0x000dbc97
   d4d88:	2003e170 	.word	0x2003e170

000d4d8c <_Z12dailyCleanupv>:

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d90:	4b1e      	ldr	r3, [pc, #120]	; (d4e0c <_Z12dailyCleanupv+0x80>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
  sysStatus.verboseMode = false;
   d4d92:	4c1f      	ldr	r4, [pc, #124]	; (d4e10 <_Z12dailyCleanupv+0x84>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d94:	781b      	ldrb	r3, [r3, #0]
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4d96:	4a1f      	ldr	r2, [pc, #124]	; (d4e14 <_Z12dailyCleanupv+0x88>)
   d4d98:	491f      	ldr	r1, [pc, #124]	; (d4e18 <_Z12dailyCleanupv+0x8c>)
   d4d9a:	4820      	ldr	r0, [pc, #128]	; (d4e1c <_Z12dailyCleanupv+0x90>)
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4d9c:	b087      	sub	sp, #28
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4d9e:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4da0:	f88d 5000 	strb.w	r5, [sp]
   d4da4:	f7ff fabe 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4da8:	7125      	strb	r5, [r4, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4daa:	f7ff fa4b 	bl	d4244 <_ZN10CloudClass8syncTimeEv.isra.15>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
   d4dae:	f7ff faa5 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4db2:	2700      	movs	r7, #0
   d4db4:	4606      	mov	r6, r0
   d4db6:	f247 582f 	movw	r8, #29999	; 0x752f
   d4dba:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4dbe:	f7ff fa9d 	bl	d42fc <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4dc2:	1b80      	subs	r0, r0, r6
   d4dc4:	eb61 0107 	sbc.w	r1, r1, r7
   d4dc8:	4589      	cmp	r9, r1
   d4dca:	bf08      	it	eq
   d4dcc:	4580      	cmpeq	r8, r0
   d4dce:	d305      	bcc.n	d4ddc <_Z12dailyCleanupv+0x50>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4dd0:	f7ff fa42 	bl	d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
   d4dd4:	b910      	cbnz	r0, d4ddc <_Z12dailyCleanupv+0x50>
            spark_process();
   d4dd6:	f002 fabb 	bl	d7350 <spark_process>
   d4dda:	e7f0      	b.n	d4dbe <_Z12dailyCleanupv+0x32>
   d4ddc:	f7ff fa3c 	bl	d4258 <_ZN10CloudClass12syncTimeDoneEv.isra.17>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {    // If Solar or if the battery is being discharged
   d4de0:	7963      	ldrb	r3, [r4, #5]
   d4de2:	b91b      	cbnz	r3, d4dec <_Z12dailyCleanupv+0x60>
   d4de4:	4b0a      	ldr	r3, [pc, #40]	; (d4e10 <_Z12dailyCleanupv+0x84>)
   d4de6:	689b      	ldr	r3, [r3, #8]
   d4de8:	2b46      	cmp	r3, #70	; 0x46
   d4dea:	dc09      	bgt.n	d4e00 <_Z12dailyCleanupv+0x74>
    setLowPowerMode("1");
   d4dec:	490c      	ldr	r1, [pc, #48]	; (d4e20 <_Z12dailyCleanupv+0x94>)
   d4dee:	a802      	add	r0, sp, #8
   d4df0:	f003 fc9c 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
   d4df4:	a802      	add	r0, sp, #8
   d4df6:	f7ff feb1 	bl	d4b5c <_Z15setLowPowerMode6String>
   d4dfa:	a802      	add	r0, sp, #8
   d4dfc:	f003 fc4f 	bl	d869e <_ZN6StringD1Ev>
  }
  systemStatusWriteNeeded=true;
   d4e00:	4b08      	ldr	r3, [pc, #32]	; (d4e24 <_Z12dailyCleanupv+0x98>)
   d4e02:	2201      	movs	r2, #1
   d4e04:	701a      	strb	r2, [r3, #0]
}
   d4e06:	b007      	add	sp, #28
   d4e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e0c:	2003e068 	.word	0x2003e068
   d4e10:	2003e174 	.word	0x2003e174
   d4e14:	000dbca4 	.word	0x000dbca4
   d4e18:	000dbcac 	.word	0x000dbcac
   d4e1c:	2003e134 	.word	0x2003e134
   d4e20:	000dbec5 	.word	0x000dbec5
   d4e24:	2003e16c 	.word	0x2003e16c

000d4e28 <_Z8isDSTusav>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
   d4e28:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4e2a:	f003 ff8f 	bl	d8d4c <_ZN9TimeClass3dayEv>
   d4e2e:	4605      	mov	r5, r0
  int month = Time.month();
   d4e30:	f003 ff9d 	bl	d8d6e <_ZN9TimeClass5monthEv>
   d4e34:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4e36:	f003 ff93 	bl	d8d60 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4e3a:	1f23      	subs	r3, r4, #4
   d4e3c:	2b06      	cmp	r3, #6
   d4e3e:	d90e      	bls.n	d4e5e <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4e40:	1ee3      	subs	r3, r4, #3
   d4e42:	2b08      	cmp	r3, #8
   d4e44:	d80d      	bhi.n	d4e62 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
   d4e46:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4e48:	1a2d      	subs	r5, r5, r0
   d4e4a:	d501      	bpl.n	d4e50 <_Z8isDSTusav+0x28>
   d4e4c:	2c0b      	cmp	r4, #11
   d4e4e:	e002      	b.n	d4e56 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4e50:	2d07      	cmp	r5, #7
   d4e52:	dd06      	ble.n	d4e62 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4e54:	2c03      	cmp	r4, #3
   d4e56:	bf14      	ite	ne
   d4e58:	2000      	movne	r0, #0
   d4e5a:	2001      	moveq	r0, #1
   d4e5c:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
   d4e5e:	2001      	movs	r0, #1
   d4e60:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
   d4e62:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4e64:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e68 <_Z12setDSTOffset6String>:
    setLowPowerMode("1");
  }
  systemStatusWriteNeeded=true;
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4e68:	b570      	push	{r4, r5, r6, lr}
   d4e6a:	ed2d 8b02 	vpush	{d8}
   d4e6e:	b0ca      	sub	sp, #296	; 0x128
   d4e70:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4e72:	f003 ff50 	bl	d8d16 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4e76:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4e78:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4e7a:	a905      	add	r1, sp, #20
   d4e7c:	6820      	ldr	r0, [r4, #0]
   d4e7e:	f006 fa7b 	bl	db378 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4e82:	b2c3      	uxtb	r3, r0
   d4e84:	2b02      	cmp	r3, #2
   d4e86:	d858      	bhi.n	d4f3a <_Z12setDSTOffset6String+0xd2>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4e88:	b240      	sxtb	r0, r0
   d4e8a:	ee07 0a90 	vmov	s15, r0
   d4e8e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4e92:	eeb0 0a48 	vmov.f32	s0, s16
   d4e96:	f003 fe33 	bl	d8b00 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4e9a:	4b2d      	ldr	r3, [pc, #180]	; (d4f50 <_Z12setDSTOffset6String+0xe8>)
   d4e9c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4ea0:	4b2c      	ldr	r3, [pc, #176]	; (d4f54 <_Z12setDSTOffset6String+0xec>)
   d4ea2:	2201      	movs	r2, #1
   d4ea4:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4ea6:	ee18 0a10 	vmov	r0, s16
   d4eaa:	f004 fcfb 	bl	d98a4 <__aeabi_f2d>
   d4eae:	4a2a      	ldr	r2, [pc, #168]	; (d4f58 <_Z12setDSTOffset6String+0xf0>)
   d4eb0:	e9cd 0100 	strd	r0, r1, [sp]
   d4eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4eb8:	a80a      	add	r0, sp, #40	; 0x28
   d4eba:	f002 fb19 	bl	d74f0 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4ebe:	f003 ff09 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
   d4ec2:	b138      	cbz	r0, d4ed4 <_Z12setDSTOffset6String+0x6c>
   d4ec4:	f7ff ffb0 	bl	d4e28 <_Z8isDSTusav>
   d4ec8:	b110      	cbz	r0, d4ed0 <_Z12setDSTOffset6String+0x68>
   d4eca:	f003 fe33 	bl	d8b34 <_ZN9TimeClass8beginDSTEv>
   d4ece:	e001      	b.n	d4ed4 <_Z12setDSTOffset6String+0x6c>
   d4ed0:	f003 fe3a 	bl	d8b48 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4ed4:	f003 fdea 	bl	d8aac <_ZN9TimeClass5localEv>
   d4ed8:	4604      	mov	r4, r0
   d4eda:	f003 ff1c 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d4ede:	1a20      	subs	r0, r4, r0
   d4ee0:	f004 fcce 	bl	d9880 <__aeabi_i2d>
   d4ee4:	a318      	add	r3, pc, #96	; (adr r3, d4f48 <_Z12setDSTOffset6String+0xe0>)
   d4ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4eea:	f004 fe59 	bl	d9ba0 <__aeabi_ddiv>
   d4eee:	4a1b      	ldr	r2, [pc, #108]	; (d4f5c <_Z12setDSTOffset6String+0xf4>)
   d4ef0:	e9cd 0100 	strd	r0, r1, [sp]
   d4ef4:	210a      	movs	r1, #10
   d4ef6:	481a      	ldr	r0, [pc, #104]	; (d4f60 <_Z12setDSTOffset6String+0xf8>)
   d4ef8:	f002 fafa 	bl	d74f0 <snprintf>
   d4efc:	f002 fa40 	bl	d7380 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4f00:	b1e8      	cbz	r0, d4f3e <_Z12setDSTOffset6String+0xd6>
   d4f02:	4d18      	ldr	r5, [pc, #96]	; (d4f64 <_Z12setDSTOffset6String+0xfc>)
    publishQueue.publish("Time",data, PRIVATE);
   d4f04:	4918      	ldr	r1, [pc, #96]	; (d4f68 <_Z12setDSTOffset6String+0x100>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4f06:	782b      	ldrb	r3, [r5, #0]
   d4f08:	4818      	ldr	r0, [pc, #96]	; (d4f6c <_Z12setDSTOffset6String+0x104>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4f0a:	2400      	movs	r4, #0
   d4f0c:	aa0a      	add	r2, sp, #40	; 0x28
   d4f0e:	f88d 4000 	strb.w	r4, [sp]
   d4f12:	f7ff fa07 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4f16:	4631      	mov	r1, r6
   d4f18:	a806      	add	r0, sp, #24
   d4f1a:	f003 fe25 	bl	d8b68 <_ZN9TimeClass7timeStrEl>
   d4f1e:	9b06      	ldr	r3, [sp, #24]
   d4f20:	9303      	str	r3, [sp, #12]
   d4f22:	f88d 4000 	strb.w	r4, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4f26:	782b      	ldrb	r3, [r5, #0]
   d4f28:	9a03      	ldr	r2, [sp, #12]
   d4f2a:	490f      	ldr	r1, [pc, #60]	; (d4f68 <_Z12setDSTOffset6String+0x100>)
   d4f2c:	480f      	ldr	r0, [pc, #60]	; (d4f6c <_Z12setDSTOffset6String+0x104>)
   d4f2e:	f7ff f9f9 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4f32:	a806      	add	r0, sp, #24
   d4f34:	f003 fbb3 	bl	d869e <_ZN6StringD1Ev>
   d4f38:	e001      	b.n	d4f3e <_Z12setDSTOffset6String+0xd6>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	e000      	b.n	d4f40 <_Z12setDSTOffset6String+0xd8>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    publishQueue.publish("Time",data, PRIVATE);
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
   d4f3e:	2001      	movs	r0, #1
}
   d4f40:	b04a      	add	sp, #296	; 0x128
   d4f42:	ecbd 8b02 	vpop	{d8}
   d4f46:	bd70      	pop	{r4, r5, r6, pc}
   d4f48:	00000000 	.word	0x00000000
   d4f4c:	40ac2000 	.word	0x40ac2000
   d4f50:	2003e174 	.word	0x2003e174
   d4f54:	2003e16c 	.word	0x2003e16c
   d4f58:	000dbcba 	.word	0x000dbcba
   d4f5c:	000dbb08 	.word	0x000dbb08
   d4f60:	2003e031 	.word	0x2003e031
   d4f64:	2003e068 	.word	0x2003e068
   d4f68:	000dbda9 	.word	0x000dbda9
   d4f6c:	2003e134 	.word	0x2003e134

000d4f70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4f70:	b530      	push	{r4, r5, lr}
   d4f72:	b085      	sub	sp, #20
   d4f74:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4f76:	a904      	add	r1, sp, #16
   d4f78:	2200      	movs	r2, #0
   d4f7a:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d4f7e:	f002 f95d 	bl	d723c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4f82:	b9a8      	cbnz	r0, d4fb0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4f84:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d4f86:	b10c      	cbz	r4, d4f8c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d4f88:	6923      	ldr	r3, [r4, #16]
   d4f8a:	b923      	cbnz	r3, d4f96 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d4f8c:	4a09      	ldr	r2, [pc, #36]	; (d4fb4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4f8e:	2100      	movs	r1, #0
   d4f90:	200a      	movs	r0, #10
   d4f92:	f002 f93b 	bl	d720c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4f96:	2300      	movs	r3, #0
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	230c      	movs	r3, #12
   d4f9c:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4fa0:	2304      	movs	r3, #4
   d4fa2:	9303      	str	r3, [sp, #12]
   d4fa4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4fa6:	6923      	ldr	r3, [r4, #16]
   d4fa8:	aa01      	add	r2, sp, #4
   d4faa:	2101      	movs	r1, #1
   d4fac:	4620      	mov	r0, r4
   d4fae:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4fb0:	b005      	add	sp, #20
   d4fb2:	bd30      	pop	{r4, r5, pc}
   d4fb4:	000d6f1d 	.word	0x000d6f1d

000d4fb8 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4fb8:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4fba:	4d0e      	ldr	r5, [pc, #56]	; (d4ff4 <_Z17getBatteryContextv+0x3c>)
   d4fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
   d4fbe:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4fc0:	ac01      	add	r4, sp, #4
   d4fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4fcc:	4669      	mov	r1, sp
   d4fce:	2007      	movs	r0, #7
   d4fd0:	f7ff ffce 	bl	d4f70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d4fd4:	2800      	cmp	r0, #0
        return val;
   d4fd6:	bfa8      	it	ge
   d4fd8:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4fda:	4a07      	ldr	r2, [pc, #28]	; (d4ff8 <_Z17getBatteryContextv+0x40>)
   d4fdc:	ab08      	add	r3, sp, #32
   d4fde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4fe2:	2110      	movs	r1, #16
   d4fe4:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4fe8:	4804      	ldr	r0, [pc, #16]	; (d4ffc <_Z17getBatteryContextv+0x44>)
   d4fea:	f002 fa81 	bl	d74f0 <snprintf>

}
   d4fee:	b009      	add	sp, #36	; 0x24
   d4ff0:	bd30      	pop	{r4, r5, pc}
   d4ff2:	bf00      	nop
   d4ff4:	000dba68 	.word	0x000dba68
   d4ff8:	000dc036 	.word	0x000dc036
   d4ffc:	2003e071 	.word	0x2003e071

000d5000 <_Z16takeMeasurementsv>:
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
}

// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
   d5000:	b507      	push	{r0, r1, r2, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5002:	4b18      	ldr	r3, [pc, #96]	; (d5064 <_Z16takeMeasurementsv+0x64>)
   d5004:	2200      	movs	r2, #0
   d5006:	4611      	mov	r1, r2
   d5008:	6858      	ldr	r0, [r3, #4]
   d500a:	f002 fa11 	bl	d7430 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d500e:	b108      	cbz	r0, d5014 <_Z16takeMeasurementsv+0x14>
   d5010:	f7ff fc06 	bl	d4820 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d5014:	f7ff fc40 	bl	d4898 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
   d5018:	f7ff ffce 	bl	d4fb8 <_Z17getBatteryContextv>
   d501c:	a901      	add	r1, sp, #4
   d501e:	2003      	movs	r0, #3
   d5020:	f7ff ffa6 	bl	d4f70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d5024:	b988      	cbnz	r0, d504a <_Z16takeMeasurementsv+0x4a>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d5026:	2006      	movs	r0, #6
   d5028:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d502c:	f7ff f969 	bl	d4302 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d5030:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d5034:	ee30 0a00 	vadd.f32	s0, s0, s0
   d5038:	ee07 3a10 	vmov	s14, r3
   d503c:	ee30 0a00 	vadd.f32	s0, s0, s0
   d5040:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   d5044:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d5048:	e001      	b.n	d504e <_Z16takeMeasurementsv+0x4e>
            return -1.0f;
   d504a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  //sysStatus.stateOfCharge = int(batteryMonitor.getSoC());
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
   d504e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5052:	4b05      	ldr	r3, [pc, #20]	; (d5068 <_Z16takeMeasurementsv+0x68>)
   d5054:	edc3 7a02 	vstr	s15, [r3, #8]
  systemStatusWriteNeeded=true;
   d5058:	4b04      	ldr	r3, [pc, #16]	; (d506c <_Z16takeMeasurementsv+0x6c>)
   d505a:	2201      	movs	r2, #1
   d505c:	701a      	strb	r2, [r3, #0]
}
   d505e:	b003      	add	sp, #12
   d5060:	f85d fb04 	ldr.w	pc, [sp], #4
   d5064:	2003e1a8 	.word	0x2003e1a8
   d5068:	2003e174 	.word	0x2003e174
   d506c:	2003e16c 	.word	0x2003e16c

000d5070 <_Z18loadSystemDefaultsv>:
    pmic.disableCharging();
    return FALSE;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5070:	b570      	push	{r4, r5, r6, lr}
   d5072:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d5074:	f7ff fd26 	bl	d4ac4 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d5078:	f7ff ffc2 	bl	d5000 <_Z16takeMeasurementsv>
   d507c:	f002 f980 	bl	d7380 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d5080:	b148      	cbz	r0, d5096 <_Z18loadSystemDefaultsv+0x26>
   d5082:	4b18      	ldr	r3, [pc, #96]	; (d50e4 <_Z18loadSystemDefaultsv+0x74>)
   d5084:	4918      	ldr	r1, [pc, #96]	; (d50e8 <_Z18loadSystemDefaultsv+0x78>)
   d5086:	781b      	ldrb	r3, [r3, #0]
   d5088:	4818      	ldr	r0, [pc, #96]	; (d50ec <_Z18loadSystemDefaultsv+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d508a:	2200      	movs	r2, #0
   d508c:	f88d 2000 	strb.w	r2, [sp]
   d5090:	4a17      	ldr	r2, [pc, #92]	; (d50f0 <_Z18loadSystemDefaultsv+0x80>)
   d5092:	f7ff f947 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d5096:	4c17      	ldr	r4, [pc, #92]	; (d50f4 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d5098:	4917      	ldr	r1, [pc, #92]	; (d50f8 <_Z18loadSystemDefaultsv+0x88>)
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d509a:	68a3      	ldr	r3, [r4, #8]
   d509c:	2b1d      	cmp	r3, #29
   d509e:	bfcc      	ite	gt
   d50a0:	2300      	movgt	r3, #0
   d50a2:	2301      	movle	r3, #1

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d50a4:	2501      	movs	r5, #1
  sysStatus.metricUnits = false;
   d50a6:	2600      	movs	r6, #0
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d50a8:	a802      	add	r0, sp, #8
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = true;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d50aa:	71e3      	strb	r3, [r4, #7]

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 1;
   d50ac:	7025      	strb	r5, [r4, #0]
  sysStatus.metricUnits = false;
   d50ae:	70a6      	strb	r6, [r4, #2]
  sysStatus.verboseMode = true;
   d50b0:	7125      	strb	r5, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
   d50b2:	f003 fb3b 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
   d50b6:	a802      	add	r0, sp, #8
   d50b8:	f7ff fd50 	bl	d4b5c <_Z15setLowPowerMode6String>
   d50bc:	a802      	add	r0, sp, #8
   d50be:	f003 faee 	bl	d869e <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d50c2:	4b0e      	ldr	r3, [pc, #56]	; (d50fc <_Z18loadSystemDefaultsv+0x8c>)
   d50c4:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d50c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d50ca:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 0;
  sysStatus.closeTime = 24;
   d50cc:	2318      	movs	r3, #24
   d50ce:	6223      	str	r3, [r4, #32]
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50d0:	4622      	mov	r2, r4
   d50d2:	2328      	movs	r3, #40	; 0x28
   d50d4:	4629      	mov	r1, r5
   d50d6:	480a      	ldr	r0, [pc, #40]	; (d5100 <_Z18loadSystemDefaultsv+0x90>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 0;
   d50d8:	61e6      	str	r6, [r4, #28]
   d50da:	f000 fe87 	bl	d5dec <_ZN6MB85RC9writeDataEjPKhj>
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
   d50de:	b006      	add	sp, #24
   d50e0:	bd70      	pop	{r4, r5, r6, pc}
   d50e2:	bf00      	nop
   d50e4:	2003e068 	.word	0x2003e068
   d50e8:	000dbc47 	.word	0x000dbc47
   d50ec:	2003e134 	.word	0x2003e134
   d50f0:	000dbccb 	.word	0x000dbccb
   d50f4:	2003e174 	.word	0x2003e174
   d50f8:	000dbaf1 	.word	0x000dbaf1
   d50fc:	c0a00000 	.word	0xc0a00000
   d5100:	2003e03c 	.word	0x2003e03c

000d5104 <_Z17checkSystemValuesv>:

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d5104:	b530      	push	{r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d5106:	4c38      	ldr	r4, [pc, #224]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d5108:	4d37      	ldr	r5, [pc, #220]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
  sysStatus.closeTime = 24;

  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d510a:	b085      	sub	sp, #20
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d510c:	f7ff ff78 	bl	d5000 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d5110:	78a3      	ldrb	r3, [r4, #2]
   d5112:	2b01      	cmp	r3, #1
   d5114:	bf84      	itt	hi
   d5116:	2300      	movhi	r3, #0
   d5118:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d511a:	78e3      	ldrb	r3, [r4, #3]
   d511c:	2b01      	cmp	r3, #1
   d511e:	d906      	bls.n	d512e <_Z17checkSystemValuesv+0x2a>
   d5120:	f002 f92e 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d5124:	b110      	cbz	r0, d512c <_Z17checkSystemValuesv+0x28>
   d5126:	2301      	movs	r3, #1
   d5128:	70eb      	strb	r3, [r5, #3]
   d512a:	e000      	b.n	d512e <_Z17checkSystemValuesv+0x2a>
    else sysStatus.connectedStatus = false;
   d512c:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d512e:	7923      	ldrb	r3, [r4, #4]
   d5130:	2b01      	cmp	r3, #1
   d5132:	bf82      	ittt	hi
   d5134:	4b2c      	ldrhi	r3, [pc, #176]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
   d5136:	2200      	movhi	r2, #0
   d5138:	711a      	strbhi	r2, [r3, #4]
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
   d513a:	7963      	ldrb	r3, [r4, #5]
   d513c:	2b01      	cmp	r3, #1
   d513e:	bf82      	ittt	hi
   d5140:	4b29      	ldrhi	r3, [pc, #164]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
   d5142:	2200      	movhi	r2, #0
   d5144:	715a      	strbhi	r2, [r3, #5]
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
   d5146:	79a3      	ldrb	r3, [r4, #6]
   d5148:	2b01      	cmp	r3, #1
   d514a:	d909      	bls.n	d5160 <_Z17checkSystemValuesv+0x5c>
   d514c:	4927      	ldr	r1, [pc, #156]	; (d51ec <_Z17checkSystemValuesv+0xe8>)
   d514e:	4668      	mov	r0, sp
   d5150:	f003 faec 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
   d5154:	4668      	mov	r0, sp
   d5156:	f7ff fd01 	bl	d4b5c <_Z15setLowPowerMode6String>
   d515a:	4668      	mov	r0, sp
   d515c:	f003 fa9f 	bl	d869e <_ZN6StringD1Ev>
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5160:	68a2      	ldr	r2, [r4, #8]
   d5162:	4b21      	ldr	r3, [pc, #132]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5164:	edd4 7a05 	vldr	s15, [r4, #20]
  }
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d5168:	2a1d      	cmp	r2, #29
   d516a:	bfd4      	ite	le
   d516c:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
   d516e:	2200      	movgt	r2, #0
   d5170:	71da      	strb	r2, [r3, #7]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5172:	6923      	ldr	r3, [r4, #16]
   d5174:	2bff      	cmp	r3, #255	; 0xff
   d5176:	bf88      	it	hi
   d5178:	4b1b      	ldrhi	r3, [pc, #108]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d517a:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d517e:	bf88      	it	hi
   d5180:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5182:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.solarPowerMode < 0 || sysStatus.solarPowerMode >1) sysStatus.solarPowerMode = 0;
  if (sysStatus.lowPowerMode < 0 || sysStatus.lowPowerMode > 1) setLowPowerMode("1");
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5186:	bf88      	it	hi
   d5188:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d518e:	d406      	bmi.n	d519e <_Z17checkSystemValuesv+0x9a>
   d5190:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5194:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d519c:	dd01      	ble.n	d51a2 <_Z17checkSystemValuesv+0x9e>
   d519e:	4b14      	ldr	r3, [pc, #80]	; (d51f0 <_Z17checkSystemValuesv+0xec>)
   d51a0:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d51a2:	edd4 7a06 	vldr	s15, [r4, #24]
   d51a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d51aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51ae:	d406      	bmi.n	d51be <_Z17checkSystemValuesv+0xba>
   d51b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d51b4:	eef4 7ac7 	vcmpe.f32	s15, s14
   d51b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d51bc:	dd02      	ble.n	d51c4 <_Z17checkSystemValuesv+0xc0>
   d51be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d51c2:	61a3      	str	r3, [r4, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d51c4:	69e3      	ldr	r3, [r4, #28]
   d51c6:	2b0c      	cmp	r3, #12
   d51c8:	bf82      	ittt	hi
   d51ca:	4b07      	ldrhi	r3, [pc, #28]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
   d51cc:	2200      	movhi	r2, #0
   d51ce:	61da      	strhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d51d0:	6a23      	ldr	r3, [r4, #32]
   d51d2:	3b0c      	subs	r3, #12
   d51d4:	2b0c      	cmp	r3, #12
   d51d6:	bf82      	ittt	hi
   d51d8:	4b03      	ldrhi	r3, [pc, #12]	; (d51e8 <_Z17checkSystemValuesv+0xe4>)
   d51da:	2218      	movhi	r2, #24
   d51dc:	621a      	strhi	r2, [r3, #32]
  // None for lastHookResponse

  systemStatusWriteNeeded = true;
   d51de:	4b05      	ldr	r3, [pc, #20]	; (d51f4 <_Z17checkSystemValuesv+0xf0>)
   d51e0:	2201      	movs	r2, #1
   d51e2:	701a      	strb	r2, [r3, #0]
}
   d51e4:	b005      	add	sp, #20
   d51e6:	bd30      	pop	{r4, r5, pc}
   d51e8:	2003e174 	.word	0x2003e174
   d51ec:	000dbec5 	.word	0x000dbec5
   d51f0:	c0a00000 	.word	0xc0a00000
   d51f4:	2003e16c 	.word	0x2003e16c

000d51f8 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d51f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d51fc:	4ca1      	ldr	r4, [pc, #644]	; (d5484 <loop+0x28c>)
   d51fe:	7823      	ldrb	r3, [r4, #0]
   d5200:	3b01      	subs	r3, #1

  digitalWrite(blueLED,LOW);
}

void loop()
{
   d5202:	b08b      	sub	sp, #44	; 0x2c
  switch(state) {
   d5204:	2b05      	cmp	r3, #5
   d5206:	f200 8204 	bhi.w	d5612 <loop+0x41a>
   d520a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d520e:	019f      	.short	0x019f
   d5210:	005e0006 	.word	0x005e0006
   d5214:	011e0099 	.word	0x011e0099
   d5218:	016b      	.short	0x016b
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d521a:	4d9b      	ldr	r5, [pc, #620]	; (d5488 <loop+0x290>)
   d521c:	792b      	ldrb	r3, [r5, #4]
   d521e:	b12b      	cbz	r3, d522c <loop+0x34>
   d5220:	4b9a      	ldr	r3, [pc, #616]	; (d548c <loop+0x294>)
   d5222:	781b      	ldrb	r3, [r3, #0]
   d5224:	2b02      	cmp	r3, #2
   d5226:	d001      	beq.n	d522c <loop+0x34>
   d5228:	f7ff fd4e 	bl	d4cc8 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d522c:	4b98      	ldr	r3, [pc, #608]	; (d5490 <loop+0x298>)
   d522e:	781b      	ldrb	r3, [r3, #0]
   d5230:	b10b      	cbz	r3, d5236 <loop+0x3e>
   d5232:	f7ff fb7d 	bl	d4930 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
   d5236:	4b97      	ldr	r3, [pc, #604]	; (d5494 <loop+0x29c>)
   d5238:	781b      	ldrb	r3, [r3, #0]
   d523a:	b10b      	cbz	r3, d5240 <loop+0x48>
   d523c:	f7ff fa36 	bl	d46ac <_Z11recordCountv>
    if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d5240:	4b95      	ldr	r3, [pc, #596]	; (d5498 <loop+0x2a0>)
   d5242:	4e96      	ldr	r6, [pc, #600]	; (d549c <loop+0x2a4>)
   d5244:	6859      	ldr	r1, [r3, #4]
   d5246:	b141      	cbz	r1, d525a <loop+0x62>
      current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d5248:	681a      	ldr	r2, [r3, #0]
   d524a:	1a52      	subs	r2, r2, r1
   d524c:	601a      	str	r2, [r3, #0]
      current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d524e:	2200      	movs	r2, #0
   d5250:	615a      	str	r2, [r3, #20]
   d5252:	619a      	str	r2, [r3, #24]
   d5254:	605a      	str	r2, [r3, #4]
      currentCountsWriteNeeded=true;
   d5256:	2301      	movs	r3, #1
   d5258:	7033      	strb	r3, [r6, #0]
    }
    if (systemStatusWriteNeeded) {
   d525a:	4f91      	ldr	r7, [pc, #580]	; (d54a0 <loop+0x2a8>)
   d525c:	783b      	ldrb	r3, [r7, #0]
   d525e:	b13b      	cbz	r3, d5270 <loop+0x78>
   d5260:	2328      	movs	r3, #40	; 0x28
   d5262:	4a89      	ldr	r2, [pc, #548]	; (d5488 <loop+0x290>)
   d5264:	488f      	ldr	r0, [pc, #572]	; (d54a4 <loop+0x2ac>)
   d5266:	2101      	movs	r1, #1
   d5268:	f000 fdc0 	bl	d5dec <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::systemStatusAddr,sysStatus);
      systemStatusWriteNeeded = false;
   d526c:	2300      	movs	r3, #0
   d526e:	703b      	strb	r3, [r7, #0]
    }
    if (currentCountsWriteNeeded) {
   d5270:	7833      	ldrb	r3, [r6, #0]
   d5272:	b143      	cbz	r3, d5286 <loop+0x8e>
   d5274:	231c      	movs	r3, #28
   d5276:	4a88      	ldr	r2, [pc, #544]	; (d5498 <loop+0x2a0>)
   d5278:	488a      	ldr	r0, [pc, #552]	; (d54a4 <loop+0x2ac>)
   d527a:	2150      	movs	r1, #80	; 0x50
   d527c:	f000 fdb6 	bl	d5dec <_ZN6MB85RC9writeDataEjPKhj>
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
   d5280:	4b86      	ldr	r3, [pc, #536]	; (d549c <loop+0x2a4>)
   d5282:	2200      	movs	r2, #0
   d5284:	701a      	strb	r2, [r3, #0]
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d5286:	79ab      	ldrb	r3, [r5, #6]
   d5288:	b14b      	cbz	r3, d529e <loop+0xa6>
   d528a:	f001 fe4f 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
   d528e:	4b86      	ldr	r3, [pc, #536]	; (d54a8 <loop+0x2b0>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	1ac0      	subs	r0, r0, r3
   d5294:	4b85      	ldr	r3, [pc, #532]	; (d54ac <loop+0x2b4>)
   d5296:	681b      	ldr	r3, [r3, #0]
   d5298:	4298      	cmp	r0, r3
   d529a:	f200 81c0 	bhi.w	d561e <loop+0x426>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
   d529e:	f003 fd41 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d52a2:	4b83      	ldr	r3, [pc, #524]	; (d54b0 <loop+0x2b8>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	4298      	cmp	r0, r3
   d52a8:	bf1c      	itt	ne
   d52aa:	2305      	movne	r3, #5
   d52ac:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d52ae:	f003 fd39 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d52b2:	6a2b      	ldr	r3, [r5, #32]
   d52b4:	4298      	cmp	r0, r3
   d52b6:	f280 81b5 	bge.w	d5624 <loop+0x42c>
   d52ba:	f003 fd33 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d52be:	4b72      	ldr	r3, [pc, #456]	; (d5488 <loop+0x290>)
   d52c0:	69db      	ldr	r3, [r3, #28]
   d52c2:	4298      	cmp	r0, r3
   d52c4:	f2c0 81ae 	blt.w	d5624 <loop+0x42c>
   d52c8:	e1a3      	b.n	d5612 <loop+0x41a>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d52ca:	4b6f      	ldr	r3, [pc, #444]	; (d5488 <loop+0x290>)
   d52cc:	791a      	ldrb	r2, [r3, #4]
   d52ce:	461d      	mov	r5, r3
   d52d0:	b12a      	cbz	r2, d52de <loop+0xe6>
   d52d2:	4b6e      	ldr	r3, [pc, #440]	; (d548c <loop+0x294>)
   d52d4:	781b      	ldrb	r3, [r3, #0]
   d52d6:	2b03      	cmp	r3, #3
   d52d8:	d001      	beq.n	d52de <loop+0xe6>
   d52da:	f7ff fcf5 	bl	d4cc8 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d52de:	200d      	movs	r0, #13
   d52e0:	f002 feac 	bl	d803c <_Z15detachInterruptt>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d52e4:	4b73      	ldr	r3, [pc, #460]	; (d54b4 <loop+0x2bc>)
   d52e6:	681b      	ldr	r3, [r3, #0]
    nrf_gpio_pin_set(nrf_pin);
   d52e8:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d52ec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d52f0:	f003 031f 	and.w	r3, r3, #31
   d52f4:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d52f8:	f7fe ff14 	bl	d4124 <nrf_gpio_pin_set>
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d52fc:	4b66      	ldr	r3, [pc, #408]	; (d5498 <loop+0x2a0>)
   d52fe:	681b      	ldr	r3, [r3, #0]
   d5300:	b10b      	cbz	r3, d5306 <loop+0x10e>
      state = REPORTING_STATE;
   d5302:	2305      	movs	r3, #5
   d5304:	e120      	b.n	d5548 <loop+0x350>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5306:	78eb      	ldrb	r3, [r5, #3]
   d5308:	b10b      	cbz	r3, d530e <loop+0x116>
   d530a:	f7ff fc8f 	bl	d4c2c <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d530e:	2100      	movs	r1, #0
   d5310:	2007      	movs	r0, #7
   d5312:	f003 ff34 	bl	d917e <digitalWrite>
    petWatchdog();
   d5316:	f7ff fb0b 	bl	d4930 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d531a:	f003 fcfc 	bl	d8d16 <_ZN9TimeClass3nowEv>
    rtc.setAlarm(wakeInSeconds);                                // The Real Time Clock will turn the Enable pin back on to wake the device
   d531e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d5322:	fb90 f1f3 	sdiv	r1, r0, r3
   d5326:	fb01 0013 	mls	r0, r1, r3, r0
   d532a:	1a19      	subs	r1, r3, r0
   d532c:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d5330:	f04f 0300 	mov.w	r3, #0
   d5334:	f04f 0201 	mov.w	r2, #1
   d5338:	bfa8      	it	ge
   d533a:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d533e:	e14d      	b.n	d55dc <loop+0x3e4>
    } break;

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5340:	4b51      	ldr	r3, [pc, #324]	; (d5488 <loop+0x290>)
   d5342:	791a      	ldrb	r2, [r3, #4]
   d5344:	461d      	mov	r5, r3
   d5346:	b12a      	cbz	r2, d5354 <loop+0x15c>
   d5348:	4b50      	ldr	r3, [pc, #320]	; (d548c <loop+0x294>)
   d534a:	781b      	ldrb	r3, [r3, #0]
   d534c:	2b04      	cmp	r3, #4
   d534e:	d001      	beq.n	d5354 <loop+0x15c>
   d5350:	f7ff fcba 	bl	d4cc8 <_Z22publishStateTransitionv>
    if (sensorDetect) break;                                          // Don't nap until we are done with event
   d5354:	4b4f      	ldr	r3, [pc, #316]	; (d5494 <loop+0x29c>)
   d5356:	781b      	ldrb	r3, [r3, #0]
   d5358:	2b00      	cmp	r3, #0
   d535a:	f040 815a 	bne.w	d5612 <loop+0x41a>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d535e:	78eb      	ldrb	r3, [r5, #3]
   d5360:	b10b      	cbz	r3, d5366 <loop+0x16e>
   d5362:	f7ff fc63 	bl	d4c2c <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                   // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5366:	4b51      	ldr	r3, [pc, #324]	; (d54ac <loop+0x2b4>)
   d5368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d536c:	601a      	str	r2, [r3, #0]
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d536e:	f003 fcd2 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d5372:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
   d5374:	f7ff fadc 	bl	d4930 <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5378:	4b4f      	ldr	r3, [pc, #316]	; (d54b8 <loop+0x2c0>)
   d537a:	7d1a      	ldrb	r2, [r3, #20]
   d537c:	b10a      	cbz	r2, d5382 <loop+0x18a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d537e:	2201      	movs	r2, #1
   d5380:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
   d5382:	2200      	movs	r2, #0
   d5384:	2104      	movs	r1, #4
   d5386:	484c      	ldr	r0, [pc, #304]	; (d54b8 <loop+0x2c0>)
   d5388:	f7fe ff84 	bl	d4294 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
   d538c:	2201      	movs	r2, #1
   d538e:	210d      	movs	r1, #13
   d5390:	f7fe ff80 	bl	d4294 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d5394:	7d03      	ldrb	r3, [r0, #20]
   d5396:	4605      	mov	r5, r0
   d5398:	b35b      	cbz	r3, d53f2 <loop+0x1fa>
   d539a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d539e:	fb96 f3f2 	sdiv	r3, r6, r2
   d53a2:	fb02 6313 	mls	r3, r2, r3, r6
   d53a6:	1ad3      	subs	r3, r2, r3
   d53a8:	4293      	cmp	r3, r2
   d53aa:	bfa8      	it	ge
   d53ac:	4613      	movge	r3, r2
   d53ae:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d53b2:	2104      	movs	r1, #4
   d53b4:	435f      	muls	r7, r3
   d53b6:	f7fe ff64 	bl	d4282 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d53ba:	4680      	mov	r8, r0
   d53bc:	b108      	cbz	r0, d53c2 <loop+0x1ca>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d53be:	60c7      	str	r7, [r0, #12]
   d53c0:	e017      	b.n	d53f2 <loop+0x1fa>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d53c2:	493e      	ldr	r1, [pc, #248]	; (d54bc <loop+0x2c4>)
   d53c4:	2010      	movs	r0, #16
   d53c6:	f003 ffad 	bl	d9324 <_ZnwjRKSt9nothrow_t>
   d53ca:	4606      	mov	r6, r0
   d53cc:	2800      	cmp	r0, #0
   d53ce:	f000 812b 	beq.w	d5628 <loop+0x430>
   d53d2:	f04f 0910 	mov.w	r9, #16
   d53d6:	464a      	mov	r2, r9
   d53d8:	4641      	mov	r1, r8
   d53da:	f004 ff57 	bl	da28c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d53de:	2302      	movs	r3, #2
   d53e0:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d53e2:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d53e4:	f8a6 9000 	strh.w	r9, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d53e8:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d53ea:	692b      	ldr	r3, [r5, #16]
   d53ec:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
   d53ee:	60f7      	str	r7, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d53f0:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
   d53f2:	7d2b      	ldrb	r3, [r5, #20]
   d53f4:	b11b      	cbz	r3, d53fe <loop+0x206>
            config_.flags |= f.value();
   d53f6:	68eb      	ldr	r3, [r5, #12]
   d53f8:	f043 0301 	orr.w	r3, r3, #1
   d53fc:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                    // Put the device to sleep
   d53fe:	492e      	ldr	r1, [pc, #184]	; (d54b8 <loop+0x2c0>)
   d5400:	a803      	add	r0, sp, #12
   d5402:	f003 fa47 	bl	d8894 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
   d5406:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d5408:	b1b3      	cbz	r3, d5438 <loop+0x240>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d540a:	889a      	ldrh	r2, [r3, #4]
   d540c:	2a01      	cmp	r2, #1
   d540e:	d113      	bne.n	d5438 <loop+0x240>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5410:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                               // Executions starts here after sleep - time or sensor interrupt?
   d5412:	2b0d      	cmp	r3, #13
   d5414:	d104      	bne.n	d5420 <loop+0x228>
   d5416:	f001 fd89 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d541a:	4b23      	ldr	r3, [pc, #140]	; (d54a8 <loop+0x2b0>)
   d541c:	6018      	str	r0, [r3, #0]
   d541e:	e00b      	b.n	d5438 <loop+0x240>
    }
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5420:	2b04      	cmp	r3, #4
   d5422:	d109      	bne.n	d5438 <loop+0x240>
   d5424:	4926      	ldr	r1, [pc, #152]	; (d54c0 <loop+0x2c8>)
   d5426:	a806      	add	r0, sp, #24
   d5428:	f003 f980 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
   d542c:	a806      	add	r0, sp, #24
   d542e:	f7ff fb95 	bl	d4b5c <_Z15setLowPowerMode6String>
   d5432:	a806      	add	r0, sp, #24
   d5434:	f003 f933 	bl	d869e <_ZN6StringD1Ev>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d5438:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d543a:	2302      	movs	r3, #2
   d543c:	7023      	strb	r3, [r4, #0]
   d543e:	2800      	cmp	r0, #0
   d5440:	f000 80e7 	beq.w	d5612 <loop+0x41a>
            free(wakeupSource_);
   d5444:	f002 f834 	bl	d74b0 <free>
    } break;
   d5448:	e0e3      	b.n	d5612 <loop+0x41a>

  case REPORTING_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d544a:	4d0f      	ldr	r5, [pc, #60]	; (d5488 <loop+0x290>)
   d544c:	792b      	ldrb	r3, [r5, #4]
   d544e:	b12b      	cbz	r3, d545c <loop+0x264>
   d5450:	4b0e      	ldr	r3, [pc, #56]	; (d548c <loop+0x294>)
   d5452:	781b      	ldrb	r3, [r3, #0]
   d5454:	2b05      	cmp	r3, #5
   d5456:	d001      	beq.n	d545c <loop+0x264>
   d5458:	f7ff fc36 	bl	d4cc8 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d545c:	78eb      	ldrb	r3, [r5, #3]
   d545e:	b90b      	cbnz	r3, d5464 <loop+0x26c>
   d5460:	f7ff fb30 	bl	d4ac4 <_Z17connectToParticlev>
   d5464:	f001 ff8c 	bl	d7380 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5468:	b360      	cbz	r0, d54c4 <loop+0x2cc>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house
   d546a:	f003 fc5b 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d546e:	69eb      	ldr	r3, [r5, #28]
   d5470:	4298      	cmp	r0, r3
   d5472:	d101      	bne.n	d5478 <loop+0x280>
   d5474:	f7ff fc8a 	bl	d4d8c <_Z12dailyCleanupv>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d5478:	f7ff fdc2 	bl	d5000 <_Z16takeMeasurementsv>
      sendEvent();                                                    // Send data to Ubidots
   d547c:	f7ff f97e 	bl	d477c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5480:	2306      	movs	r3, #6
   d5482:	e024      	b.n	d54ce <loop+0x2d6>
   d5484:	2003e088 	.word	0x2003e088
   d5488:	2003e174 	.word	0x2003e174
   d548c:	2003e070 	.word	0x2003e070
   d5490:	2003e090 	.word	0x2003e090
   d5494:	2003e030 	.word	0x2003e030
   d5498:	2003e114 	.word	0x2003e114
   d549c:	2003e10c 	.word	0x2003e10c
   d54a0:	2003e16c 	.word	0x2003e16c
   d54a4:	2003e03c 	.word	0x2003e03c
   d54a8:	2003e0c0 	.word	0x2003e0c0
   d54ac:	2003e06c 	.word	0x2003e06c
   d54b0:	2003e08c 	.word	0x2003e08c
   d54b4:	2003e0bc 	.word	0x2003e0bc
   d54b8:	2003e094 	.word	0x2003e094
   d54bc:	000dc4bc 	.word	0x000dc4bc
   d54c0:	000dbaf1 	.word	0x000dbaf1
   d54c4:	f001 fd32 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
    }
    else {
      resetTimeStamp = millis();
   d54c8:	4b58      	ldr	r3, [pc, #352]	; (d562c <loop+0x434>)
   d54ca:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;
   d54cc:	2301      	movs	r3, #1
   d54ce:	7023      	strb	r3, [r4, #0]
    }
  
    if (sysStatus.lowPowerMode) Time.setTime(rtc.getRTCTime());
   d54d0:	79ab      	ldrb	r3, [r5, #6]
   d54d2:	2b00      	cmp	r3, #0
   d54d4:	f000 809d 	beq.w	d5612 <loop+0x41a>
   d54d8:	4855      	ldr	r0, [pc, #340]	; (d5630 <loop+0x438>)
   d54da:	f000 ff23 	bl	d6324 <_ZNK8MCP7941010getRTCTimeEv>
   d54de:	f003 fb39 	bl	d8b54 <_ZN9TimeClass7setTimeEl>
   d54e2:	e096      	b.n	d5612 <loop+0x41a>
    break;

  case RESP_WAIT_STATE:
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d54e4:	4b53      	ldr	r3, [pc, #332]	; (d5634 <loop+0x43c>)
   d54e6:	791b      	ldrb	r3, [r3, #4]
   d54e8:	b12b      	cbz	r3, d54f6 <loop+0x2fe>
   d54ea:	4b53      	ldr	r3, [pc, #332]	; (d5638 <loop+0x440>)
   d54ec:	781b      	ldrb	r3, [r3, #0]
   d54ee:	2b06      	cmp	r3, #6
   d54f0:	d001      	beq.n	d54f6 <loop+0x2fe>
   d54f2:	f7ff fbe9 	bl	d4cc8 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d54f6:	4b51      	ldr	r3, [pc, #324]	; (d563c <loop+0x444>)
   d54f8:	781b      	ldrb	r3, [r3, #0]
   d54fa:	b96b      	cbnz	r3, d5518 <loop+0x320>
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
   d54fc:	4b50      	ldr	r3, [pc, #320]	; (d5640 <loop+0x448>)
   d54fe:	4a51      	ldr	r2, [pc, #324]	; (d5644 <loop+0x44c>)
   d5500:	601a      	str	r2, [r3, #0]
   d5502:	f001 fd13 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5506:	4b50      	ldr	r3, [pc, #320]	; (d5648 <loop+0x450>)
   d5508:	6018      	str	r0, [r3, #0]
      if (Time.hour() == 0) resetEverything();                        // It is a new day.  Zero everything so we can start fresh
   d550a:	f003 fc0b 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d550e:	b908      	cbnz	r0, d5514 <loop+0x31c>
   d5510:	f7ff fbc0 	bl	d4c94 <_Z15resetEverythingv>
      state = IDLE_STATE;
   d5514:	2302      	movs	r3, #2
   d5516:	e017      	b.n	d5548 <loop+0x350>
   d5518:	f001 fd08 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d551c:	4b4b      	ldr	r3, [pc, #300]	; (d564c <loop+0x454>)
   d551e:	681b      	ldr	r3, [r3, #0]
   d5520:	1ac0      	subs	r0, r0, r3
   d5522:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5526:	4298      	cmp	r0, r3
   d5528:	d973      	bls.n	d5612 <loop+0x41a>
   d552a:	f001 fcff 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d552e:	4b3f      	ldr	r3, [pc, #252]	; (d562c <loop+0x434>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5530:	4947      	ldr	r1, [pc, #284]	; (d5650 <loop+0x458>)
      stayAwakeTimeStamp = millis();
      if (Time.hour() == 0) resetEverything();                        // It is a new day.  Zero everything so we can start fresh
      state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d5532:	6018      	str	r0, [r3, #0]
   d5534:	4b47      	ldr	r3, [pc, #284]	; (d5654 <loop+0x45c>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5536:	4848      	ldr	r0, [pc, #288]	; (d5658 <loop+0x460>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5538:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d553a:	2200      	movs	r2, #0
   d553c:	f88d 2000 	strb.w	r2, [sp]
   d5540:	4a46      	ldr	r2, [pc, #280]	; (d565c <loop+0x464>)
   d5542:	f7fe feef 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d5546:	2301      	movs	r3, #1
   d5548:	7023      	strb	r3, [r4, #0]
   d554a:	e062      	b.n	d5612 <loop+0x41a>
    }
    break;

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d554c:	4c39      	ldr	r4, [pc, #228]	; (d5634 <loop+0x43c>)
   d554e:	7923      	ldrb	r3, [r4, #4]
   d5550:	b12b      	cbz	r3, d555e <loop+0x366>
   d5552:	4b39      	ldr	r3, [pc, #228]	; (d5638 <loop+0x440>)
   d5554:	781b      	ldrb	r3, [r3, #0]
   d5556:	2b01      	cmp	r3, #1
   d5558:	d001      	beq.n	d555e <loop+0x366>
   d555a:	f7ff fbb5 	bl	d4cc8 <_Z22publishStateTransitionv>
   d555e:	f001 fce5 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5562:	4b32      	ldr	r3, [pc, #200]	; (d562c <loop+0x434>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d556a:	3330      	adds	r3, #48	; 0x30
   d556c:	4298      	cmp	r0, r3
   d556e:	d950      	bls.n	d5612 <loop+0x41a>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5570:	6923      	ldr	r3, [r4, #16]
   d5572:	2b03      	cmp	r3, #3
   d5574:	dc13      	bgt.n	d559e <loop+0x3a6>
   d5576:	f001 ff03 	bl	d7380 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d557a:	b148      	cbz	r0, d5590 <loop+0x398>
   d557c:	4b35      	ldr	r3, [pc, #212]	; (d5654 <loop+0x45c>)
   d557e:	4938      	ldr	r1, [pc, #224]	; (d5660 <loop+0x468>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d5580:	781b      	ldrb	r3, [r3, #0]
   d5582:	4835      	ldr	r0, [pc, #212]	; (d5658 <loop+0x460>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5584:	2200      	movs	r2, #0
   d5586:	f88d 2000 	strb.w	r2, [sp]
   d558a:	4a36      	ldr	r2, [pc, #216]	; (d5664 <loop+0x46c>)
   d558c:	f7fe feca 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5594:	f001 ffcc 	bl	d7530 <delay>
        System.reset();
   d5598:	f003 f979 	bl	d888e <_ZN11SystemClass5resetEv>
   d559c:	e039      	b.n	d5612 <loop+0x41a>
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d559e:	f003 fbba 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d55a2:	4b24      	ldr	r3, [pc, #144]	; (d5634 <loop+0x43c>)
   d55a4:	4d30      	ldr	r5, [pc, #192]	; (d5668 <loop+0x470>)
   d55a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55a8:	1ac0      	subs	r0, r0, r3
   d55aa:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d55ae:	d919      	bls.n	d55e4 <loop+0x3ec>
   d55b0:	f001 fee6 	bl	d7380 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d55b4:	b148      	cbz	r0, d55ca <loop+0x3d2>
   d55b6:	4b27      	ldr	r3, [pc, #156]	; (d5654 <loop+0x45c>)
   d55b8:	4929      	ldr	r1, [pc, #164]	; (d5660 <loop+0x468>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d55ba:	781b      	ldrb	r3, [r3, #0]
   d55bc:	4826      	ldr	r0, [pc, #152]	; (d5658 <loop+0x460>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d55be:	2200      	movs	r2, #0
   d55c0:	f88d 2000 	strb.w	r2, [sp]
   d55c4:	4a29      	ldr	r2, [pc, #164]	; (d566c <loop+0x474>)
   d55c6:	f7fe fead 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d55ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d55ce:	f001 ffaf 	bl	d7530 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d55d2:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
   d55d4:	2201      	movs	r2, #1
        System.reset();
      }
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
        delay(2000);
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d55d6:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d55d8:	702a      	strb	r2, [r5, #0]
        rtc.setAlarm(10);
   d55da:	210a      	movs	r1, #10
   d55dc:	4814      	ldr	r0, [pc, #80]	; (d5630 <loop+0x438>)
   d55de:	f001 f890 	bl	d6702 <_ZN8MCP794108setAlarmEibi>
   d55e2:	e016      	b.n	d5612 <loop+0x41a>
   d55e4:	f001 fecc 	bl	d7380 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d55e8:	b148      	cbz	r0, d55fe <loop+0x406>
   d55ea:	4b1a      	ldr	r3, [pc, #104]	; (d5654 <loop+0x45c>)
   d55ec:	491c      	ldr	r1, [pc, #112]	; (d5660 <loop+0x468>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d55ee:	781b      	ldrb	r3, [r3, #0]
   d55f0:	4819      	ldr	r0, [pc, #100]	; (d5658 <loop+0x460>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d55f2:	2200      	movs	r2, #0
   d55f4:	f88d 2000 	strb.w	r2, [sp]
   d55f8:	4a1d      	ldr	r2, [pc, #116]	; (d5670 <loop+0x478>)
   d55fa:	f7fe fe93 	bl	d4324 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d55fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5602:	f001 ff95 	bl	d7530 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5606:	2300      	movs	r3, #0
   d5608:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d560a:	2301      	movs	r3, #1
   d560c:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d560e:	f7ff fb91 	bl	d4d34 <_Z14fullModemResetv>
      }
    }
    break;
  }
  rtc.loop();                                                         // keeps the clock up to date
   d5612:	4807      	ldr	r0, [pc, #28]	; (d5630 <loop+0x438>)
   d5614:	f000 ffae 	bl	d6574 <_ZN8MCP794104loopEv>
  //sensorDetect = steadyCountTest();                                     // Comment out to cause the device to run through a series of tests
  
}
   d5618:	b00b      	add	sp, #44	; 0x2c
   d561a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (currentCountsWriteNeeded) {
      fram.put(FRAM::currentCountsAddr,current);
      currentCountsWriteNeeded = false;
    }
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;  // When in low power mode, we can nap between taps
   d561e:	2304      	movs	r3, #4
   d5620:	7023      	strb	r3, [r4, #0]
   d5622:	e63c      	b.n	d529e <loop+0xa6>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5624:	2303      	movs	r3, #3
   d5626:	e78f      	b.n	d5548 <loop+0x350>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d5628:	7528      	strb	r0, [r5, #20]
   d562a:	e6e2      	b.n	d53f2 <loop+0x1fa>
   d562c:	2003e108 	.word	0x2003e108
   d5630:	2003e04c 	.word	0x2003e04c
   d5634:	2003e174 	.word	0x2003e174
   d5638:	2003e070 	.word	0x2003e070
   d563c:	2003e130 	.word	0x2003e130
   d5640:	2003e06c 	.word	0x2003e06c
   d5644:	00015f90 	.word	0x00015f90
   d5648:	2003e0c0 	.word	0x2003e0c0
   d564c:	2003e084 	.word	0x2003e084
   d5650:	000dbce3 	.word	0x000dbce3
   d5654:	2003e068 	.word	0x2003e068
   d5658:	2003e134 	.word	0x2003e134
   d565c:	000dbca3 	.word	0x000dbca3
   d5660:	000dbd10 	.word	0x000dbd10
   d5664:	000dbcfc 	.word	0x000dbcfc
   d5668:	2003e16c 	.word	0x2003e16c
   d566c:	000dbd16 	.word	0x000dbd16
   d5670:	000dbd30 	.word	0x000dbd30

000d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5674:	2300      	movs	r3, #0
   d5676:	2202      	movs	r2, #2
   d5678:	f001 be5a 	b.w	d7330 <spark_variable>

000d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>:
   d567c:	2300      	movs	r3, #0
   d567e:	2204      	movs	r2, #4
   d5680:	f001 be56 	b.w	d7330 <spark_variable>

000d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5684:	4602      	mov	r2, r0
   d5686:	4801      	ldr	r0, [pc, #4]	; (d568c <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d5688:	f002 b93c 	b.w	d7904 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d568c:	000d78d9 	.word	0x000d78d9

000d5690 <setup>:
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5694:	2100      	movs	r1, #0
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
   d5696:	b0ad      	sub	sp, #180	; 0xb4
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5698:	2008      	movs	r0, #8
   d569a:	f003 fd5f 	bl	d915c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d569e:	2100      	movs	r1, #0
   d56a0:	2004      	movs	r0, #4
   d56a2:	f003 fd5b 	bl	d915c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d56a6:	2101      	movs	r1, #1
   d56a8:	2007      	movs	r0, #7
   d56aa:	f003 fd57 	bl	d915c <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d56ae:	2101      	movs	r1, #1
   d56b0:	2005      	movs	r0, #5
   d56b2:	f003 fd53 	bl	d915c <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d56b6:	4fa0      	ldr	r7, [pc, #640]	; (d5938 <setup+0x2a8>)
   d56b8:	4da0      	ldr	r5, [pc, #640]	; (d593c <setup+0x2ac>)
   d56ba:	f8df 8368 	ldr.w	r8, [pc, #872]	; d5a24 <setup+0x394>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d56be:	2103      	movs	r1, #3
   d56c0:	200d      	movs	r0, #13
   d56c2:	f003 fd4b 	bl	d915c <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d56c6:	2101      	movs	r1, #1
   d56c8:	200c      	movs	r0, #12
   d56ca:	f003 fd47 	bl	d915c <pinMode>
   d56ce:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d56d0:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   d56d4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   d56d8:	f003 031f 	and.w	r3, r3, #31
   d56dc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d56e0:	f7fe fd2f 	bl	d4142 <nrf_gpio_pin_clear>
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d56e4:	2101      	movs	r1, #1
   d56e6:	200b      	movs	r0, #11
   d56e8:	f003 fd38 	bl	d915c <pinMode>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d56ec:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_set(nrf_pin);
   d56ee:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d56f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d56f6:	f003 031f 	and.w	r3, r3, #31
   d56fa:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d56fe:	2400      	movs	r4, #0
   d5700:	f7fe fd10 	bl	d4124 <nrf_gpio_pin_set>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
   d5704:	2101      	movs	r1, #1
   d5706:	2007      	movs	r0, #7
   d5708:	f003 fd39 	bl	d917e <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d570c:	f7ff f910 	bl	d4930 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d5710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5714:	2201      	movs	r2, #1
   d5716:	498a      	ldr	r1, [pc, #552]	; (d5940 <setup+0x2b0>)
   d5718:	9400      	str	r4, [sp, #0]
   d571a:	2008      	movs	r0, #8
   d571c:	f002 fc66 	bl	d7fec <_Z15attachInterrupttPFvvE13InterruptModeah>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5720:	a804      	add	r0, sp, #16
   d5722:	f001 fe35 	bl	d7390 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5726:	4623      	mov	r3, r4
   d5728:	227d      	movs	r2, #125	; 0x7d
   d572a:	a90c      	add	r1, sp, #48	; 0x30
   d572c:	a804      	add	r0, sp, #16
   d572e:	f003 f83c 	bl	d87aa <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5732:	4623      	mov	r3, r4
   d5734:	4622      	mov	r2, r4
   d5736:	4983      	ldr	r1, [pc, #524]	; (d5944 <setup+0x2b4>)
   d5738:	9401      	str	r4, [sp, #4]
   d573a:	9400      	str	r4, [sp, #0]
   d573c:	a80c      	add	r0, sp, #48	; 0x30
   d573e:	f001 fe37 	bl	d73b0 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);          // Puts the deviceID into the response topic array
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
   d5742:	4981      	ldr	r1, [pc, #516]	; (d5948 <setup+0x2b8>)
   d5744:	4881      	ldr	r0, [pc, #516]	; (d594c <setup+0x2bc>)
   d5746:	f7ff ff95 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d574a:	4981      	ldr	r1, [pc, #516]	; (d5950 <setup+0x2c0>)
   d574c:	4881      	ldr	r0, [pc, #516]	; (d5954 <setup+0x2c4>)
   d574e:	f7ff ff91 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
   d5752:	4981      	ldr	r1, [pc, #516]	; (d5958 <setup+0x2c8>)
   d5754:	4881      	ldr	r0, [pc, #516]	; (d595c <setup+0x2cc>)
   d5756:	f7ff ff91 	bl	d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d575a:	4981      	ldr	r1, [pc, #516]	; (d5960 <setup+0x2d0>)
   d575c:	4881      	ldr	r0, [pc, #516]	; (d5964 <setup+0x2d4>)
   d575e:	f7ff ff89 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Temperature",current.temperature);
   d5762:	4981      	ldr	r1, [pc, #516]	; (d5968 <setup+0x2d8>)
   d5764:	4881      	ldr	r0, [pc, #516]	; (d596c <setup+0x2dc>)
   d5766:	f7ff ff85 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
   d576a:	4981      	ldr	r1, [pc, #516]	; (d5970 <setup+0x2e0>)
   d576c:	4881      	ldr	r0, [pc, #516]	; (d5974 <setup+0x2e4>)
   d576e:	f7ff ff85 	bl	d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5772:	4981      	ldr	r1, [pc, #516]	; (d5978 <setup+0x2e8>)
   d5774:	4881      	ldr	r0, [pc, #516]	; (d597c <setup+0x2ec>)
   d5776:	f7ff ff7d 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("lowPowerMode",lowPowerModeStr);
   d577a:	4981      	ldr	r1, [pc, #516]	; (d5980 <setup+0x2f0>)
   d577c:	4881      	ldr	r0, [pc, #516]	; (d5984 <setup+0x2f4>)
   d577e:	f7ff ff7d 	bl	d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
   d5782:	4981      	ldr	r1, [pc, #516]	; (d5988 <setup+0x2f8>)
   d5784:	4881      	ldr	r0, [pc, #516]	; (d598c <setup+0x2fc>)
   d5786:	f7ff ff75 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
   d578a:	4981      	ldr	r1, [pc, #516]	; (d5990 <setup+0x300>)
   d578c:	4881      	ldr	r0, [pc, #516]	; (d5994 <setup+0x304>)
   d578e:	f7ff ff71 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
   d5792:	4981      	ldr	r1, [pc, #516]	; (d5998 <setup+0x308>)
   d5794:	4881      	ldr	r0, [pc, #516]	; (d599c <setup+0x30c>)
   d5796:	f7ff ff6d 	bl	d5674 <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
   d579a:	4981      	ldr	r1, [pc, #516]	; (d59a0 <setup+0x310>)
   d579c:	4881      	ldr	r0, [pc, #516]	; (d59a4 <setup+0x314>)
   d579e:	f7ff ff6d 	bl	d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
   d57a2:	4981      	ldr	r1, [pc, #516]	; (d59a8 <setup+0x318>)
   d57a4:	4881      	ldr	r0, [pc, #516]	; (d59ac <setup+0x31c>)
   d57a6:	f7ff ff69 	bl	d567c <_ZN10CloudClass8variableIA15_cIRA16_cEEEbRKT_DpOT0_>


  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
   d57aa:	4981      	ldr	r1, [pc, #516]	; (d59b0 <setup+0x320>)
   d57ac:	4881      	ldr	r0, [pc, #516]	; (d59b4 <setup+0x324>)
   d57ae:	f7ff ff69 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
   d57b2:	4981      	ldr	r1, [pc, #516]	; (d59b8 <setup+0x328>)
   d57b4:	4881      	ldr	r0, [pc, #516]	; (d59bc <setup+0x32c>)
   d57b6:	f7ff ff65 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
   d57ba:	4981      	ldr	r1, [pc, #516]	; (d59c0 <setup+0x330>)
   d57bc:	4881      	ldr	r0, [pc, #516]	; (d59c4 <setup+0x334>)
   d57be:	f7ff ff61 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SendNow",sendNow);
   d57c2:	4981      	ldr	r1, [pc, #516]	; (d59c8 <setup+0x338>)
   d57c4:	4881      	ldr	r0, [pc, #516]	; (d59cc <setup+0x33c>)
   d57c6:	f7ff ff5d 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d57ca:	4981      	ldr	r1, [pc, #516]	; (d59d0 <setup+0x340>)
   d57cc:	4881      	ldr	r0, [pc, #516]	; (d59d4 <setup+0x344>)
   d57ce:	f7ff ff59 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
   d57d2:	4981      	ldr	r1, [pc, #516]	; (d59d8 <setup+0x348>)
   d57d4:	4881      	ldr	r0, [pc, #516]	; (d59dc <setup+0x34c>)
   d57d6:	f7ff ff55 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setverboseMode);
   d57da:	4981      	ldr	r1, [pc, #516]	; (d59e0 <setup+0x350>)
   d57dc:	4881      	ldr	r0, [pc, #516]	; (d59e4 <setup+0x354>)
   d57de:	f7ff ff51 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d57e2:	4981      	ldr	r1, [pc, #516]	; (d59e8 <setup+0x358>)
   d57e4:	4881      	ldr	r0, [pc, #516]	; (d59ec <setup+0x35c>)
   d57e6:	f7ff ff4d 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
   d57ea:	4981      	ldr	r1, [pc, #516]	; (d59f0 <setup+0x360>)
   d57ec:	4881      	ldr	r0, [pc, #516]	; (d59f4 <setup+0x364>)
   d57ee:	f7ff ff49 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
   d57f2:	4981      	ldr	r1, [pc, #516]	; (d59f8 <setup+0x368>)
   d57f4:	4881      	ldr	r0, [pc, #516]	; (d59fc <setup+0x36c>)
   d57f6:	f7ff ff45 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
   d57fa:	4981      	ldr	r1, [pc, #516]	; (d5a00 <setup+0x370>)
   d57fc:	4881      	ldr	r0, [pc, #516]	; (d5a04 <setup+0x374>)
   d57fe:	f7ff ff41 	bl	d5684 <_ZN10CloudClass8functionIA14_cIPFi6StringEEEEbRKT_DpT0_>

  pmic.enableBuck();                                                  // To enable charging 
   d5802:	4881      	ldr	r0, [pc, #516]	; (d5a08 <setup+0x378>)
   d5804:	f002 fe82 	bl	d850c <_ZN4PMIC10enableBuckEv>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
   d5808:	4880      	ldr	r0, [pc, #512]	; (d5a0c <setup+0x37c>)
   d580a:	f000 fa57 	bl	d5cbc <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d580e:	2301      	movs	r3, #1
   d5810:	f10d 020f 	add.w	r2, sp, #15
   d5814:	4621      	mov	r1, r4
   d5816:	487d      	ldr	r0, [pc, #500]	; (d5a0c <setup+0x37c>)
   d5818:	f000 fa92 	bl	d5d40 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d581c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5820:	2b02      	cmp	r3, #2
   d5822:	d01a      	beq.n	d585a <setup+0x1ca>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5824:	4879      	ldr	r0, [pc, #484]	; (d5a0c <setup+0x37c>)
   d5826:	f000 fa53 	bl	d5cd0 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d582a:	2304      	movs	r3, #4
   d582c:	4a78      	ldr	r2, [pc, #480]	; (d5a10 <setup+0x380>)
   d582e:	4877      	ldr	r0, [pc, #476]	; (d5a0c <setup+0x37c>)
   d5830:	4621      	mov	r1, r4
   d5832:	f000 fadb 	bl	d5dec <_ZN6MB85RC9writeDataEjPKhj>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5836:	2301      	movs	r3, #1
   d5838:	f10d 020f 	add.w	r2, sp, #15
   d583c:	4621      	mov	r1, r4
   d583e:	4873      	ldr	r0, [pc, #460]	; (d5a0c <setup+0x37c>)
   d5840:	f000 fa7e 	bl	d5d40 <_ZN6MB85RC8readDataEjPhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    fram.get(FRAM::versionAddr, tempVersion);                         // See if this worked
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5844:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5848:	2b02      	cmp	r3, #2
   d584a:	d003      	beq.n	d5854 <setup+0x1c4>
   d584c:	2301      	movs	r3, #1
   d584e:	f888 3000 	strb.w	r3, [r8]
   d5852:	e008      	b.n	d5866 <setup+0x1d6>
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5854:	f7ff fc0c 	bl	d5070 <_Z18loadSystemDefaultsv>
   d5858:	e005      	b.n	d5866 <setup+0x1d6>
   d585a:	2328      	movs	r3, #40	; 0x28
   d585c:	462a      	mov	r2, r5
   d585e:	2101      	movs	r1, #1
   d5860:	486a      	ldr	r0, [pc, #424]	; (d5a0c <setup+0x37c>)
   d5862:	f000 fa6d 	bl	d5d40 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5866:	ac2c      	add	r4, sp, #176	; 0xb0
   d5868:	2600      	movs	r6, #0
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
   d586a:	f7ff fc4b 	bl	d5104 <_Z17checkSystemValuesv>
   d586e:	f844 6d90 	str.w	r6, [r4, #-144]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5872:	4632      	mov	r2, r6
   d5874:	4631      	mov	r1, r6
   d5876:	4620      	mov	r0, r4
   d5878:	f001 fb38 	bl	d6eec <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d587c:	9b08      	ldr	r3, [sp, #32]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d587e:	2b14      	cmp	r3, #20
   d5880:	f000 8132 	beq.w	d5ae8 <setup+0x458>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5884:	4632      	mov	r2, r6
   d5886:	4631      	mov	r1, r6
   d5888:	4620      	mov	r0, r4
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d588a:	9608      	str	r6, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d588c:	f001 fb2e 	bl	d6eec <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5890:	9b08      	ldr	r3, [sp, #32]
   d5892:	2b8c      	cmp	r3, #140	; 0x8c
   d5894:	f000 8128 	beq.w	d5ae8 <setup+0x458>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
   d5898:	79ab      	ldrb	r3, [r5, #6]
   d589a:	b10b      	cbz	r3, d58a0 <setup+0x210>
   d589c:	495d      	ldr	r1, [pc, #372]	; (d5a14 <setup+0x384>)
   d589e:	e000      	b.n	d58a2 <setup+0x212>
   d58a0:	495d      	ldr	r1, [pc, #372]	; (d5a18 <setup+0x388>)
   d58a2:	4837      	ldr	r0, [pc, #220]	; (d5980 <setup+0x2f0>)
   d58a4:	f004 ff7a 	bl	da79c <strcpy>

  rtc.setup();                                                        // Start the real time clock
   d58a8:	485c      	ldr	r0, [pc, #368]	; (d5a1c <setup+0x38c>)
   d58aa:	f000 fd4b 	bl	d6344 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d58ae:	2100      	movs	r1, #0
   d58b0:	485a      	ldr	r0, [pc, #360]	; (d5a1c <setup+0x38c>)
   d58b2:	f000 fe9c 	bl	d65ee <_ZN8MCP7941010clearAlarmEi>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d58b6:	ed95 0a06 	vldr	s0, [r5, #24]
   d58ba:	f003 f921 	bl	d8b00 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d58be:	f003 fa09 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
   d58c2:	b920      	cbnz	r0, d58ce <setup+0x23e>
   d58c4:	4855      	ldr	r0, [pc, #340]	; (d5a1c <setup+0x38c>)
   d58c6:	f000 fd2d 	bl	d6324 <_ZNK8MCP7941010getRTCTimeEv>
   d58ca:	f003 f943 	bl	d8b54 <_ZN9TimeClass7setTimeEl>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d58ce:	f7ff faab 	bl	d4e28 <_Z8isDSTusav>
   d58d2:	b110      	cbz	r0, d58da <setup+0x24a>
   d58d4:	f003 f92e 	bl	d8b34 <_ZN9TimeClass8beginDSTEv>
   d58d8:	e001      	b.n	d58de <setup+0x24e>
   d58da:	f003 f935 	bl	d8b48 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d58de:	ed95 0a05 	vldr	s0, [r5, #20]
   d58e2:	f8df 9144 	ldr.w	r9, [pc, #324]	; d5a28 <setup+0x398>
   d58e6:	f003 f8ef 	bl	d8ac8 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d58ea:	f003 f8df 	bl	d8aac <_ZN9TimeClass5localEv>
   d58ee:	4606      	mov	r6, r0
   d58f0:	f003 fa11 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d58f4:	1a30      	subs	r0, r6, r0
   d58f6:	f003 ffc3 	bl	d9880 <__aeabi_i2d>
   d58fa:	a30d      	add	r3, pc, #52	; (adr r3, d5930 <setup+0x2a0>)
   d58fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5900:	f004 f94e 	bl	d9ba0 <__aeabi_ddiv>
   d5904:	4e10      	ldr	r6, [pc, #64]	; (d5948 <setup+0x2b8>)
   d5906:	4a46      	ldr	r2, [pc, #280]	; (d5a20 <setup+0x390>)
   d5908:	e9cd 0100 	strd	r0, r1, [sp]
   d590c:	210a      	movs	r1, #10
   d590e:	4824      	ldr	r0, [pc, #144]	; (d59a0 <setup+0x310>)
   d5910:	f001 fdee 	bl	d74f0 <snprintf>
   d5914:	231c      	movs	r3, #28
   d5916:	4632      	mov	r2, r6
   d5918:	2150      	movs	r1, #80	; 0x50
   d591a:	483c      	ldr	r0, [pc, #240]	; (d5a0c <setup+0x37c>)
   d591c:	f000 fa10 	bl	d5d40 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr,current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
   d5920:	6833      	ldr	r3, [r6, #0]
   d5922:	2b00      	cmp	r3, #0
   d5924:	f000 8082 	beq.w	d5a2c <setup+0x39c>
   d5928:	68f0      	ldr	r0, [r6, #12]
   d592a:	f003 f89b 	bl	d8a64 <_ZN9TimeClass4hourEl>
   d592e:	e07f      	b.n	d5a30 <setup+0x3a0>
   d5930:	00000000 	.word	0x00000000
   d5934:	40ac2000 	.word	0x40ac2000
   d5938:	2003e0bc 	.word	0x2003e0bc
   d593c:	2003e174 	.word	0x2003e174
   d5940:	000d40e9 	.word	0x000d40e9
   d5944:	000d4341 	.word	0x000d4341
   d5948:	2003e114 	.word	0x2003e114
   d594c:	000dbd4f 	.word	0x000dbd4f
   d5950:	2003e11c 	.word	0x2003e11c
   d5954:	000dbd5b 	.word	0x000dbd5b
   d5958:	2003e0c4 	.word	0x2003e0c4
   d595c:	000dbd66 	.word	0x000dbd66
   d5960:	2003e184 	.word	0x2003e184
   d5964:	000dbd6d 	.word	0x000dbd6d
   d5968:	2003e124 	.word	0x2003e124
   d596c:	000dbd78 	.word	0x000dbd78
   d5970:	2003df68 	.word	0x2003df68
   d5974:	000dbd84 	.word	0x000dbd84
   d5978:	2003e17c 	.word	0x2003e17c
   d597c:	000dbd8c 	.word	0x000dbd8c
   d5980:	2003e10d 	.word	0x2003e10d
   d5984:	000dbd97 	.word	0x000dbd97
   d5988:	2003e190 	.word	0x2003e190
   d598c:	000dbe3b 	.word	0x000dbe3b
   d5990:	2003e194 	.word	0x2003e194
   d5994:	000dbda4 	.word	0x000dbda4
   d5998:	2003e128 	.word	0x2003e128
   d599c:	000dbdae 	.word	0x000dbdae
   d59a0:	2003e031 	.word	0x2003e031
   d59a4:	000dbdb5 	.word	0x000dbdb5
   d59a8:	2003e071 	.word	0x2003e071
   d59ac:	000dbdc0 	.word	0x000dbdc0
   d59b0:	000d4179 	.word	0x000d4179
   d59b4:	000dbdcf 	.word	0x000dbdcf
   d59b8:	000d4201 	.word	0x000d4201
   d59bc:	000dbdd9 	.word	0x000dbdd9
   d59c0:	000d43d5 	.word	0x000d43d5
   d59c4:	000dbde5 	.word	0x000dbde5
   d59c8:	000d4195 	.word	0x000d4195
   d59cc:	000dbdef 	.word	0x000dbdef
   d59d0:	000d4b5d 	.word	0x000d4b5d
   d59d4:	000dbdf7 	.word	0x000dbdf7
   d59d8:	000d4a2d 	.word	0x000d4a2d
   d59dc:	000dbe04 	.word	0x000dbe04
   d59e0:	000d441d 	.word	0x000d441d
   d59e4:	000dbe0f 	.word	0x000dbe0f
   d59e8:	000d44b1 	.word	0x000d44b1
   d59ec:	000dbe1c 	.word	0x000dbe1c
   d59f0:	000d4e69 	.word	0x000d4e69
   d59f4:	000dbe29 	.word	0x000dbe29
   d59f8:	000d460d 	.word	0x000d460d
   d59fc:	000dbe37 	.word	0x000dbe37
   d5a00:	000d4645 	.word	0x000d4645
   d5a04:	000dbe44 	.word	0x000dbe44
   d5a08:	2003e0ac 	.word	0x2003e0ac
   d5a0c:	2003e03c 	.word	0x2003e03c
   d5a10:	000dbec8 	.word	0x000dbec8
   d5a14:	000dbc5b 	.word	0x000dbc5b
   d5a18:	000dbc72 	.word	0x000dbc72
   d5a1c:	2003e04c 	.word	0x2003e04c
   d5a20:	000dbb08 	.word	0x000dbb08
   d5a24:	2003e088 	.word	0x2003e088
   d5a28:	2003e08c 	.word	0x2003e08c
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
   d5a2c:	f003 f97a 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d5a30:	f8c9 0000 	str.w	r0, [r9]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5a34:	f7fe ffb0 	bl	d4998 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) loadSystemDefaults();                 // Make sure the device wakes up and connects
   d5a38:	2004      	movs	r0, #4
   d5a3a:	f003 fbb9 	bl	d91b0 <digitalRead>
   d5a3e:	b908      	cbnz	r0, d5a44 <setup+0x3b4>
   d5a40:	f7ff fb16 	bl	d5070 <_Z18loadSystemDefaultsv>

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  
  if (Time.day() != Time.day(current.lastCountTime)) {    // ******  - These are debug lines
   d5a44:	f003 f982 	bl	d8d4c <_ZN9TimeClass3dayEv>
   d5a48:	4681      	mov	r9, r0
   d5a4a:	68f0      	ldr	r0, [r6, #12]
   d5a4c:	f003 f812 	bl	d8a74 <_ZN9TimeClass3dayEl>
   d5a50:	4581      	cmp	r9, r0
   d5a52:	d010      	beq.n	d5a76 <setup+0x3e6>
    resetEverything();                                               // Zero the counts for the new day
   d5a54:	f7ff f91e 	bl	d4c94 <_Z15resetEverythingv>
    if (sysStatus.solarPowerMode && !sysStatus.lowPowerMode) {
   d5a58:	796b      	ldrb	r3, [r5, #5]
   d5a5a:	b163      	cbz	r3, d5a76 <setup+0x3e6>
   d5a5c:	4b27      	ldr	r3, [pc, #156]	; (d5afc <setup+0x46c>)
   d5a5e:	799b      	ldrb	r3, [r3, #6]
   d5a60:	b94b      	cbnz	r3, d5a76 <setup+0x3e6>
      setLowPowerMode("1");                                           // If we are running on solar, we will reset to lowPowerMode at Midnight
   d5a62:	4927      	ldr	r1, [pc, #156]	; (d5b00 <setup+0x470>)
   d5a64:	4620      	mov	r0, r4
   d5a66:	f002 fe61 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	f7ff f876 	bl	d4b5c <_Z15setLowPowerMode6String>
   d5a70:	4620      	mov	r0, r4
   d5a72:	f002 fe14 	bl	d869e <_ZN6StringD1Ev>
    }
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
   d5a76:	f003 f955 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d5a7a:	6a2b      	ldr	r3, [r5, #32]
   d5a7c:	4c1f      	ldr	r4, [pc, #124]	; (d5afc <setup+0x46c>)
   d5a7e:	4298      	cmp	r0, r3
   d5a80:	da17      	bge.n	d5ab2 <setup+0x422>
   d5a82:	f003 f94f 	bl	d8d24 <_ZN9TimeClass4hourEv>
   d5a86:	69e3      	ldr	r3, [r4, #28]
   d5a88:	4298      	cmp	r0, r3
   d5a8a:	db12      	blt.n	d5ab2 <setup+0x422>
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5a8c:	2300      	movs	r3, #0
   d5a8e:	9300      	str	r3, [sp, #0]
   d5a90:	2201      	movs	r2, #1
   d5a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5a96:	491b      	ldr	r1, [pc, #108]	; (d5b04 <setup+0x474>)
   d5a98:	200d      	movs	r0, #13
   d5a9a:	f002 faa7 	bl	d7fec <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5a9e:	78e3      	ldrb	r3, [r4, #3]
   d5aa0:	b113      	cbz	r3, d5aa8 <setup+0x418>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5aa2:	f001 fc6d 	bl	d7380 <spark_cloud_flag_connected>
   d5aa6:	b330      	cbz	r0, d5af6 <setup+0x466>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d5aa8:	f7ff faaa 	bl	d5000 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d5aac:	4b16      	ldr	r3, [pc, #88]	; (d5b08 <setup+0x478>)
   d5aae:	4a17      	ldr	r2, [pc, #92]	; (d5b0c <setup+0x47c>)
   d5ab0:	601a      	str	r2, [r3, #0]
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5ab2:	683b      	ldr	r3, [r7, #0]
    nrf_gpio_pin_clear(nrf_pin);
   d5ab4:	f893 00b0 	ldrb.w	r0, [r3, #176]	; 0xb0
   d5ab8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   d5abc:	f003 031f 	and.w	r3, r3, #31
   d5ac0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5ac4:	f7fe fb3d 	bl	d4142 <nrf_gpio_pin_clear>
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5ac8:	f898 3000 	ldrb.w	r3, [r8]
   d5acc:	b913      	cbnz	r3, d5ad4 <setup+0x444>
   d5ace:	4b10      	ldr	r3, [pc, #64]	; (d5b10 <setup+0x480>)
   d5ad0:	2202      	movs	r2, #2
   d5ad2:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
   d5ad4:	2100      	movs	r1, #0
   d5ad6:	2007      	movs	r0, #7
   d5ad8:	f003 fb51 	bl	d917e <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond

  char responseTopic[125];
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5adc:	a804      	add	r0, sp, #16
   d5ade:	f002 fdde 	bl	d869e <_ZN6StringD1Ev>
  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code

  digitalWrite(blueLED,LOW);
}
   d5ae2:	b02d      	add	sp, #180	; 0xb4
   d5ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
   d5ae8:	692b      	ldr	r3, [r5, #16]
   d5aea:	3301      	adds	r3, #1
   d5aec:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5aee:	4b09      	ldr	r3, [pc, #36]	; (d5b14 <setup+0x484>)
   d5af0:	2201      	movs	r2, #1
   d5af2:	701a      	strb	r2, [r3, #0]
   d5af4:	e6d0      	b.n	d5898 <setup+0x208>
  }

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
   d5af6:	f7fe ffe5 	bl	d4ac4 <_Z17connectToParticlev>
   d5afa:	e7d5      	b.n	d5aa8 <setup+0x418>
   d5afc:	2003e174 	.word	0x2003e174
   d5b00:	000dbec5 	.word	0x000dbec5
   d5b04:	000d40cd 	.word	0x000d40cd
   d5b08:	2003e06c 	.word	0x2003e06c
   d5b0c:	00015f90 	.word	0x00015f90
   d5b10:	2003e088 	.word	0x2003e088
   d5b14:	2003e16c 	.word	0x2003e16c

000d5b18 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b18:	4b3e      	ldr	r3, [pc, #248]	; (d5c14 <_GLOBAL__sub_I___appProductID+0xfc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b1e:	2400      	movs	r4, #0
   d5b20:	601c      	str	r4, [r3, #0]
   d5b22:	4b3d      	ldr	r3, [pc, #244]	; (d5c18 <_GLOBAL__sub_I___appProductID+0x100>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b24:	4e3d      	ldr	r6, [pc, #244]	; (d5c1c <_GLOBAL__sub_I___appProductID+0x104>)
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include "UnitTestCode.h"                           // This code will exercise the device
#include "PublishQueueAsyncRK.h"                    // Async Particle Publish

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5b26:	4d3e      	ldr	r5, [pc, #248]	; (d5c20 <_GLOBAL__sub_I___appProductID+0x108>)
   d5b28:	2701      	movs	r7, #1
   d5b2a:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5b2c:	f001 fa26 	bl	d6f7c <HAL_Pin_Map>
   d5b30:	4b3c      	ldr	r3, [pc, #240]	; (d5c24 <_GLOBAL__sub_I___appProductID+0x10c>)
   d5b32:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5b34:	f003 fac4 	bl	d90c0 <spark_protocol_instance>
   d5b38:	4623      	mov	r3, r4
   d5b3a:	4622      	mov	r2, r4
   d5b3c:	f642 2170 	movw	r1, #10864	; 0x2a70
   d5b40:	f003 fac6 	bl	d90d0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5b44:	f003 fabc 	bl	d90c0 <spark_protocol_instance>
   d5b48:	4622      	mov	r2, r4
   d5b4a:	4623      	mov	r3, r4
   d5b4c:	2108      	movs	r1, #8
   d5b4e:	f003 fac7 	bl	d90e0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5b56:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b58:	6034      	str	r4, [r6, #0]
   d5b5a:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b5c:	71b4      	strb	r4, [r6, #6]
   d5b5e:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b60:	2002      	movs	r0, #2
   d5b62:	f001 fb7d 	bl	d7260 <set_system_mode>
   d5b66:	462a      	mov	r2, r5
   d5b68:	492f      	ldr	r1, [pc, #188]	; (d5c28 <_GLOBAL__sub_I___appProductID+0x110>)
   d5b6a:	4630      	mov	r0, r6
   d5b6c:	f003 fbca 	bl	d9304 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5b70:	4e2e      	ldr	r6, [pc, #184]	; (d5c2c <_GLOBAL__sub_I___appProductID+0x114>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5b72:	4621      	mov	r1, r4
   d5b74:	4638      	mov	r0, r7
   d5b76:	f001 fb8b 	bl	d7290 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d5b7a:	4639      	mov	r1, r7
   d5b7c:	2004      	movs	r0, #4
   d5b7e:	f001 f9a5 	bl	d6ecc <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5b82:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5b86:	1d30      	adds	r0, r6, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5b88:	4642      	mov	r2, r8
   d5b8a:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d5b8c:	6030      	str	r0, [r6, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5b8e:	f004 fb7d 	bl	da28c <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d5b92:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5b94:	462a      	mov	r2, r5
   d5b96:	4926      	ldr	r1, [pc, #152]	; (d5c30 <_GLOBAL__sub_I___appProductID+0x118>)
   d5b98:	80f3      	strh	r3, [r6, #6]
   d5b9a:	4630      	mov	r0, r6
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d5b9c:	7537      	strb	r7, [r6, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d5b9e:	f8a6 8004 	strh.w	r8, [r6, #4]
   d5ba2:	f003 fbaf 	bl	d9304 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d5ba6:	f003 fb61 	bl	d926c <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d5baa:	4e22      	ldr	r6, [pc, #136]	; (d5c34 <_GLOBAL__sub_I___appProductID+0x11c>)
   d5bac:	4601      	mov	r1, r0
   d5bae:	4630      	mov	r0, r6
   d5bb0:	f000 fb06 	bl	d61c0 <_ZN8MCP79410C1ER7TwoWire>
   d5bb4:	462a      	mov	r2, r5
   d5bb6:	4920      	ldr	r1, [pc, #128]	; (d5c38 <_GLOBAL__sub_I___appProductID+0x120>)
   d5bb8:	4630      	mov	r0, r6
   d5bba:	f003 fba3 	bl	d9304 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5bbe:	f003 fb55 	bl	d926c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5bc2:	4e1e      	ldr	r6, [pc, #120]	; (d5c3c <_GLOBAL__sub_I___appProductID+0x124>)
   d5bc4:	4623      	mov	r3, r4
   d5bc6:	4601      	mov	r1, r0
   d5bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5bcc:	4630      	mov	r0, r6
   d5bce:	f000 f86b 	bl	d5ca8 <_ZN6MB85RCC1ER7TwoWireji>
   d5bd2:	4b1b      	ldr	r3, [pc, #108]	; (d5c40 <_GLOBAL__sub_I___appProductID+0x128>)
   d5bd4:	6033      	str	r3, [r6, #0]
   d5bd6:	4630      	mov	r0, r6
	 * @brief Construct a publish queue
	 *
	 * You normally allocate one of these as a global object. You should not create more than one, as
	 * the rate limiting would not work right.
	 */
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5bd8:	4e1a      	ldr	r6, [pc, #104]	; (d5c44 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5bda:	491b      	ldr	r1, [pc, #108]	; (d5c48 <_GLOBAL__sub_I___appProductID+0x130>)
   d5bdc:	462a      	mov	r2, r5
   d5bde:	f003 fb91 	bl	d9304 <__aeabi_atexit>
   d5be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5be6:	4919      	ldr	r1, [pc, #100]	; (d5c4c <_GLOBAL__sub_I___appProductID+0x134>)
   d5be8:	4630      	mov	r0, r6
   d5bea:	f000 ffef 	bl	d6bcc <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5bee:	4b18      	ldr	r3, [pc, #96]	; (d5c50 <_GLOBAL__sub_I___appProductID+0x138>)
   d5bf0:	6033      	str	r3, [r6, #0]
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5bf2:	4630      	mov	r0, r6
PMIC pmic;
   d5bf4:	4e17      	ldr	r6, [pc, #92]	; (d5c54 <_GLOBAL__sub_I___appProductID+0x13c>)
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5bf6:	4918      	ldr	r1, [pc, #96]	; (d5c58 <_GLOBAL__sub_I___appProductID+0x140>)
   d5bf8:	462a      	mov	r2, r5
   d5bfa:	f003 fb83 	bl	d9304 <__aeabi_atexit>
PMIC pmic;
   d5bfe:	4621      	mov	r1, r4
   d5c00:	4630      	mov	r0, r6
   d5c02:	f002 fc18 	bl	d8436 <_ZN4PMICC1Eb>
   d5c06:	462a      	mov	r2, r5
   d5c08:	4630      	mov	r0, r6
   d5c0a:	4914      	ldr	r1, [pc, #80]	; (d5c5c <_GLOBAL__sub_I___appProductID+0x144>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d5c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
retained uint8_t publishQueueRetainedBuffer[2048];
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
PMIC pmic;
   d5c10:	f003 bb78 	b.w	d9304 <__aeabi_atexit>
   d5c14:	2003e170 	.word	0x2003e170
   d5c18:	2003e068 	.word	0x2003e068
   d5c1c:	2003e0b0 	.word	0x2003e0b0
   d5c20:	2003e02c 	.word	0x2003e02c
   d5c24:	2003e0bc 	.word	0x2003e0bc
   d5c28:	000d4273 	.word	0x000d4273
   d5c2c:	2003e094 	.word	0x2003e094
   d5c30:	000d4161 	.word	0x000d4161
   d5c34:	2003e04c 	.word	0x2003e04c
   d5c38:	000d5f33 	.word	0x000d5f33
   d5c3c:	2003e03c 	.word	0x2003e03c
   d5c40:	000dba04 	.word	0x000dba04
   d5c44:	2003e134 	.word	0x2003e134
   d5c48:	000d41d9 	.word	0x000d41d9
   d5c4c:	2003f400 	.word	0x2003f400
   d5c50:	000dba20 	.word	0x000dba20
   d5c54:	2003e0ac 	.word	0x2003e0ac
   d5c58:	000d41b1 	.word	0x000d41b1
   d5c5c:	000d8455 	.word	0x000d8455

000d5c60 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5c60:	4770      	bx	lr

000d5c62 <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5c62:	b510      	push	{r4, lr}
}
   d5c64:	2110      	movs	r1, #16

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
   d5c66:	4604      	mov	r4, r0
}
   d5c68:	f003 fb51 	bl	d930e <_ZdlPvj>
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	bd10      	pop	{r4, pc}

000d5c70 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5c70:	6803      	ldr	r3, [r0, #0]
   d5c72:	b2c9      	uxtb	r1, r1
   d5c74:	689b      	ldr	r3, [r3, #8]
   d5c76:	4718      	bx	r3

000d5c78 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5c78:	b40e      	push	{r1, r2, r3}
   d5c7a:	b500      	push	{lr}
   d5c7c:	b08c      	sub	sp, #48	; 0x30
   d5c7e:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5c80:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5c82:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d5c86:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5c88:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d5c8c:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5c8e:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5c90:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5c92:	aa04      	add	r2, sp, #16
   d5c94:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5c96:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5c98:	f001 fac8 	bl	d722c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d5c9c:	b00c      	add	sp, #48	; 0x30
   d5c9e:	f85d eb04 	ldr.w	lr, [sp], #4
   d5ca2:	b003      	add	sp, #12
   d5ca4:	4770      	bx	lr
	...

000d5ca8 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5ca8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5caa:	4d03      	ldr	r5, [pc, #12]	; (d5cb8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5cac:	6005      	str	r5, [r0, #0]
   d5cae:	6041      	str	r1, [r0, #4]
   d5cb0:	6082      	str	r2, [r0, #8]
   d5cb2:	60c3      	str	r3, [r0, #12]
}
   d5cb4:	bd30      	pop	{r4, r5, pc}
   d5cb6:	bf00      	nop
   d5cb8:	000dbf50 	.word	0x000dbf50

000d5cbc <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
   d5cbc:	6840      	ldr	r0, [r0, #4]
   d5cbe:	f002 b93f 	b.w	d7f40 <_ZN7TwoWire5beginEv>

000d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5cc2:	b510      	push	{r4, lr}
   d5cc4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5cc6:	6800      	ldr	r0, [r0, #0]
   d5cc8:	f002 f986 	bl	d7fd8 <_ZN7TwoWire6unlockEv>
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd10      	pop	{r4, pc}

000d5cd0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cd4:	b08a      	sub	sp, #40	; 0x28
   d5cd6:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
   d5cd8:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5cda:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5cdc:	f002 f973 	bl	d7fc6 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5ce0:	221e      	movs	r2, #30
   d5ce2:	2100      	movs	r1, #0
   d5ce4:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
   d5ce6:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5ce8:	f004 fad0 	bl	da28c <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
   d5cec:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5cee:	b1de      	cbz	r6, d5d28 <_ZN6MB85RC5eraseEv+0x58>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5cf0:	683b      	ldr	r3, [r7, #0]
   d5cf2:	2e1e      	cmp	r6, #30
   d5cf4:	46b0      	mov	r8, r6
   d5cf6:	bf28      	it	cs
   d5cf8:	f04f 081e 	movcs.w	r8, #30
   d5cfc:	68dc      	ldr	r4, [r3, #12]
   d5cfe:	aa02      	add	r2, sp, #8
   d5d00:	4643      	mov	r3, r8
   d5d02:	4629      	mov	r1, r5
   d5d04:	4638      	mov	r0, r7
   d5d06:	47a0      	blx	r4
			if (!result) {
   d5d08:	4604      	mov	r4, r0
   d5d0a:	b948      	cbnz	r0, d5d20 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5d0c:	462a      	mov	r2, r5
   d5d0e:	490a      	ldr	r1, [pc, #40]	; (d5d38 <_ZN6MB85RC5eraseEv+0x68>)
   d5d10:	480a      	ldr	r0, [pc, #40]	; (d5d3c <_ZN6MB85RC5eraseEv+0x6c>)
   d5d12:	f7ff ffb1 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
   d5d16:	a801      	add	r0, sp, #4
   d5d18:	f7ff ffd3 	bl	d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	e007      	b.n	d5d30 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
   d5d20:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
   d5d24:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
   d5d26:	e7e2      	b.n	d5cee <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
   d5d28:	a801      	add	r0, sp, #4
   d5d2a:	f7ff ffca 	bl	d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
   d5d2e:	2001      	movs	r0, #1
}
   d5d30:	b00a      	add	sp, #40	; 0x28
   d5d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d36:	bf00      	nop
   d5d38:	000dbecc 	.word	0x000dbecc
   d5d3c:	2003e270 	.word	0x2003e270

000d5d40 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5d44:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5d46:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d48:	9001      	str	r0, [sp, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d4a:	460e      	mov	r6, r1
   d5d4c:	4617      	mov	r7, r2
   d5d4e:	4698      	mov	r8, r3
      { _M_device.lock(); }
   d5d50:	f002 f939 	bl	d7fc6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
   d5d54:	f1b8 0f00 	cmp.w	r8, #0
   d5d58:	d101      	bne.n	d5d5e <_ZN6MB85RC8readDataEjPhj+0x1e>
   d5d5a:	2401      	movs	r4, #1
   d5d5c:	e03f      	b.n	d5dde <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5d5e:	68e1      	ldr	r1, [r4, #12]
   d5d60:	6860      	ldr	r0, [r4, #4]
   d5d62:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d66:	f002 f923 	bl	d7fb0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5d6a:	0a31      	lsrs	r1, r6, #8
   d5d6c:	6860      	ldr	r0, [r4, #4]
   d5d6e:	f7ff ff7f 	bl	d5c70 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5d72:	4631      	mov	r1, r6
   d5d74:	6860      	ldr	r0, [r4, #4]
   d5d76:	f7ff ff7b 	bl	d5c70 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5d7a:	2100      	movs	r1, #0
   d5d7c:	6860      	ldr	r0, [r4, #4]
   d5d7e:	f002 f91a 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5d82:	b108      	cbz	r0, d5d88 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5d84:	2400      	movs	r4, #0
   d5d86:	e02a      	b.n	d5dde <_ZN6MB85RC8readDataEjPhj+0x9e>
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5d88:	68e1      	ldr	r1, [r4, #12]
   d5d8a:	6860      	ldr	r0, [r4, #4]
   d5d8c:	f1b8 0f20 	cmp.w	r8, #32
   d5d90:	46c1      	mov	r9, r8
   d5d92:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d96:	bf28      	it	cs
   d5d98:	f04f 0920 	movcs.w	r9, #32
   d5d9c:	2301      	movs	r3, #1
   d5d9e:	464a      	mov	r2, r9
   d5da0:	b2c9      	uxtb	r1, r1
   d5da2:	f002 f8ef 	bl	d7f84 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
   d5da6:	f003 fa61 	bl	d926c <_Z19__fetch_global_Wirev>
   d5daa:	6803      	ldr	r3, [r0, #0]
   d5dac:	691b      	ldr	r3, [r3, #16]
   d5dae:	4798      	blx	r3
   d5db0:	4548      	cmp	r0, r9
   d5db2:	dbe7      	blt.n	d5d84 <_ZN6MB85RC8readDataEjPhj+0x44>
   d5db4:	463d      	mov	r5, r7
   d5db6:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
   d5dba:	f003 fa57 	bl	d926c <_Z19__fetch_global_Wirev>
   d5dbe:	6803      	ldr	r3, [r0, #0]
   d5dc0:	695b      	ldr	r3, [r3, #20]
   d5dc2:	4798      	blx	r3
   d5dc4:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5dc8:	1bea      	subs	r2, r5, r7
   d5dca:	ebc5 0308 	rsb	r3, r5, r8
   d5dce:	4591      	cmp	r9, r2
   d5dd0:	eb05 060a 	add.w	r6, r5, sl
   d5dd4:	443b      	add	r3, r7
   d5dd6:	d8f0      	bhi.n	d5dba <_ZN6MB85RC8readDataEjPhj+0x7a>
   d5dd8:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
   d5dda:	462f      	mov	r7, r5
   d5ddc:	e7ba      	b.n	d5d54 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5dde:	a801      	add	r0, sp, #4
   d5de0:	f7ff ff6f 	bl	d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5de4:	4620      	mov	r0, r4
   d5de6:	b002      	add	sp, #8
   d5de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5dec <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5dec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5df0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5df2:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5df4:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5df6:	460d      	mov	r5, r1
   d5df8:	4690      	mov	r8, r2
   d5dfa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5dfc:	f002 f8e3 	bl	d7fc6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
   d5e00:	b34f      	cbz	r7, d5e56 <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5e02:	68e1      	ldr	r1, [r4, #12]
   d5e04:	6860      	ldr	r0, [r4, #4]
   d5e06:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5e0a:	f002 f8d1 	bl	d7fb0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5e0e:	0a29      	lsrs	r1, r5, #8
   d5e10:	6860      	ldr	r0, [r4, #4]
   d5e12:	f7ff ff2d 	bl	d5c70 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5e16:	4629      	mov	r1, r5
   d5e18:	6860      	ldr	r0, [r4, #4]
   d5e1a:	f7ff ff29 	bl	d5c70 <_ZN7TwoWire5writeEj>
   d5e1e:	f108 091e 	add.w	r9, r8, #30
   d5e22:	4646      	mov	r6, r8
   d5e24:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
   d5e28:	6860      	ldr	r0, [r4, #4]
   d5e2a:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5e2e:	6803      	ldr	r3, [r0, #0]
   d5e30:	689b      	ldr	r3, [r3, #8]
   d5e32:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e34:	45b1      	cmp	r9, r6
   d5e36:	eb06 050a 	add.w	r5, r6, sl
				wire.write(*data);
				framAddr++;
				data++;
   d5e3a:	46b0      	mov	r8, r6
				dataLen--;
   d5e3c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e40:	d001      	beq.n	d5e46 <_ZN6MB85RC9writeDataEjPKhj+0x5a>
   d5e42:	2f00      	cmp	r7, #0
   d5e44:	d1f0      	bne.n	d5e28 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
   d5e46:	2101      	movs	r1, #1
   d5e48:	6860      	ldr	r0, [r4, #4]
   d5e4a:	f002 f8b4 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5e4e:	2800      	cmp	r0, #0
   d5e50:	d0d6      	beq.n	d5e00 <_ZN6MB85RC9writeDataEjPKhj+0x14>
   d5e52:	2400      	movs	r4, #0
   d5e54:	e000      	b.n	d5e58 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
   d5e56:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
   d5e58:	a801      	add	r0, sp, #4
   d5e5a:	f7ff ff32 	bl	d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	b002      	add	sp, #8
   d5e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5e66 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e6a:	b08b      	sub	sp, #44	; 0x2c
   d5e6c:	460e      	mov	r6, r1
   d5e6e:	4615      	mov	r5, r2
   d5e70:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5e72:	6840      	ldr	r0, [r0, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5e74:	9001      	str	r0, [sp, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e76:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5e78:	f002 f8a5 	bl	d7fc6 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
   d5e7c:	42ae      	cmp	r6, r5
   d5e7e:	d223      	bcs.n	d5ec8 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5e80:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5e82:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5e84:	b90c      	cbnz	r4, d5e8a <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e86:	2401      	movs	r4, #1
   d5e88:	e03f      	b.n	d5f0a <_ZN6MB85RC8moveDataEjjj+0xa4>
   d5e8a:	2c1e      	cmp	r4, #30
   d5e8c:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5e8e:	f8d8 3000 	ldr.w	r3, [r8]
   d5e92:	bf28      	it	cs
   d5e94:	271e      	movcs	r7, #30
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
   d5e96:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5e98:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5e9c:	aa02      	add	r2, sp, #8
   d5e9e:	463b      	mov	r3, r7
   d5ea0:	4631      	mov	r1, r6
   d5ea2:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
   d5ea4:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
   d5ea6:	47c8      	blx	r9
				if (!result) {
   d5ea8:	b908      	cbnz	r0, d5eae <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5eaa:	2400      	movs	r4, #0
   d5eac:	e02d      	b.n	d5f0a <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5eae:	f8d8 3000 	ldr.w	r3, [r8]
   d5eb2:	aa02      	add	r2, sp, #8
   d5eb4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5eb8:	4629      	mov	r1, r5
   d5eba:	463b      	mov	r3, r7
   d5ebc:	4640      	mov	r0, r8
   d5ebe:	47c8      	blx	r9
				if (!result) {
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	d0f2      	beq.n	d5eaa <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
   d5ec4:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
   d5ec6:	e7dd      	b.n	d5e84 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
   d5ec8:	d9dd      	bls.n	d5e86 <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5eca:	2c00      	cmp	r4, #0
   d5ecc:	d0db      	beq.n	d5e86 <_ZN6MB85RC8moveDataEjjj+0x20>
   d5ece:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
   d5ed0:	f8d8 3000 	ldr.w	r3, [r8]
   d5ed4:	4627      	mov	r7, r4
   d5ed6:	bf28      	it	cs
   d5ed8:	271e      	movcs	r7, #30
   d5eda:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5ede:	aa02      	add	r2, sp, #8
   d5ee0:	463b      	mov	r3, r7
   d5ee2:	4631      	mov	r1, r6
   d5ee4:	4640      	mov	r0, r8
   d5ee6:	47c8      	blx	r9
				if (!result) {
   d5ee8:	2800      	cmp	r0, #0
   d5eea:	d0de      	beq.n	d5eaa <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
   d5eec:	f8d8 3000 	ldr.w	r3, [r8]
   d5ef0:	aa02      	add	r2, sp, #8
   d5ef2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5ef6:	4629      	mov	r1, r5
   d5ef8:	463b      	mov	r3, r7
   d5efa:	4640      	mov	r0, r8
   d5efc:	47c8      	blx	r9
				if (!result) {
   d5efe:	2800      	cmp	r0, #0
   d5f00:	d0d3      	beq.n	d5eaa <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
   d5f02:	443e      	add	r6, r7
				framAddrTo += count;
   d5f04:	443d      	add	r5, r7
				numBytes -= count;
   d5f06:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
   d5f08:	e7df      	b.n	d5eca <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5f0a:	a801      	add	r0, sp, #4
   d5f0c:	f7ff fed9 	bl	d5cc2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5f10:	4620      	mov	r0, r4
   d5f12:	b00b      	add	sp, #44	; 0x2c
   d5f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f18 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
   d5f18:	f001 b830 	b.w	d6f7c <HAL_Pin_Map>

000d5f1c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5f1c:	2040      	movs	r0, #64	; 0x40
   d5f1e:	4770      	bx	lr

000d5f20 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5f20:	2000      	movs	r0, #0
   d5f22:	4770      	bx	lr

000d5f24 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5f24:	2080      	movs	r0, #128	; 0x80
   d5f26:	4770      	bx	lr

000d5f28 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5f28:	20ff      	movs	r0, #255	; 0xff
   d5f2a:	4770      	bx	lr

000d5f2c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5f2c:	4770      	bx	lr

000d5f2e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5f2e:	4770      	bx	lr

000d5f30 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5f30:	4770      	bx	lr

000d5f32 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5f32:	4770      	bx	lr

000d5f34 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5f34:	b510      	push	{r4, lr}

}
   d5f36:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d5f38:	4604      	mov	r4, r0

}
   d5f3a:	f003 f9e8 	bl	d930e <_ZdlPvj>
   d5f3e:	4620      	mov	r0, r4
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5f42:	b510      	push	{r4, lr}

}
   d5f44:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d5f46:	4604      	mov	r4, r0

}
   d5f48:	f003 f9e1 	bl	d930e <_ZdlPvj>
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	bd10      	pop	{r4, pc}

000d5f50 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5f50:	b510      	push	{r4, lr}

}
   d5f52:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d5f54:	4604      	mov	r4, r0

}
   d5f56:	f003 f9da 	bl	d930e <_ZdlPvj>
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	bd10      	pop	{r4, pc}

000d5f5e <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5f5e:	b510      	push	{r4, lr}

}
   d5f60:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d5f62:	4604      	mov	r4, r0

}
   d5f64:	f003 f9d3 	bl	d930e <_ZdlPvj>
   d5f68:	4620      	mov	r0, r4
   d5f6a:	bd10      	pop	{r4, pc}

000d5f6c <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5f70:	6803      	ldr	r3, [r0, #0]
   d5f72:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d5f74:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d5f76:	4798      	blx	r3
   d5f78:	2210      	movs	r2, #16
   d5f7a:	4601      	mov	r1, r0
   d5f7c:	4668      	mov	r0, sp
   d5f7e:	f004 f985 	bl	da28c <memset>

	size_t len = length();
   d5f82:	682b      	ldr	r3, [r5, #0]
   d5f84:	4628      	mov	r0, r5
   d5f86:	689b      	ldr	r3, [r3, #8]
   d5f88:	4798      	blx	r3
	size_t offset = 0;
   d5f8a:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d5f8c:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d5f8e:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5f90:	42bc      	cmp	r4, r7
   d5f92:	d20e      	bcs.n	d5fb2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d5f94:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5f96:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5f98:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d5f9a:	bf28      	it	cs
   d5f9c:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d5f9e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5fa2:	466a      	mov	r2, sp
   d5fa4:	4633      	mov	r3, r6
   d5fa6:	4621      	mov	r1, r4
   d5fa8:	4628      	mov	r0, r5
   d5faa:	47c0      	blx	r8
		if (!bResult) {
   d5fac:	b108      	cbz	r0, d5fb2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d5fae:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d5fb0:	e7ee      	b.n	d5f90 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d5fb2:	b004      	add	sp, #16
   d5fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fb8 <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5fb8:	2300      	movs	r3, #0
	rawMonth = 1;
   d5fba:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d5fbc:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d5fbe:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d5fc0:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d5fc2:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d5fc4:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d5fc6:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d5fc8:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d5fca:	7443      	strb	r3, [r0, #17]
   d5fcc:	4770      	bx	lr
	...

000d5fd0 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d5fd0:	2201      	movs	r2, #1
   d5fd2:	b508      	push	{r3, lr}
   d5fd4:	7142      	strb	r2, [r0, #5]
   d5fd6:	2202      	movs	r2, #2
   d5fd8:	7182      	strb	r2, [r0, #6]
   d5fda:	2203      	movs	r2, #3
   d5fdc:	4b06      	ldr	r3, [pc, #24]	; (d5ff8 <_ZN12MCP79410TimeC1Ev+0x28>)
   d5fde:	71c2      	strb	r2, [r0, #7]
   d5fe0:	2204      	movs	r2, #4
   d5fe2:	6003      	str	r3, [r0, #0]
   d5fe4:	7202      	strb	r2, [r0, #8]
   d5fe6:	2300      	movs	r3, #0
   d5fe8:	2207      	movs	r2, #7
   d5fea:	7103      	strb	r3, [r0, #4]
   d5fec:	7242      	strb	r2, [r0, #9]
   d5fee:	7443      	strb	r3, [r0, #17]
	clear();
   d5ff0:	f7ff ffe2 	bl	d5fb8 <_ZN12MCP79410Time5clearEv>
}
   d5ff4:	bd08      	pop	{r3, pc}
   d5ff6:	bf00      	nop
   d5ff8:	000dc0b0 	.word	0x000dc0b0

000d5ffc <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5ffc:	0903      	lsrs	r3, r0, #4
}
   d5ffe:	220a      	movs	r2, #10
   d6000:	f000 000f 	and.w	r0, r0, #15
   d6004:	fb02 0003 	mla	r0, r2, r3, r0
   d6008:	4770      	bx	lr

000d600a <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d600a:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d600c:	7a80      	ldrb	r0, [r0, #10]
   d600e:	f7ff fff5 	bl	d5ffc <_ZN12MCP79410Time8bcdToIntEh>
}
   d6012:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6016:	bd08      	pop	{r3, pc}

000d6018 <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d6018:	7ac0      	ldrb	r0, [r0, #11]
   d601a:	f000 001f 	and.w	r0, r0, #31
   d601e:	f7ff bfed 	b.w	d5ffc <_ZN12MCP79410Time8bcdToIntEh>

000d6022 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6022:	7b00      	ldrb	r0, [r0, #12]
   d6024:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6028:	f7ff bfe8 	b.w	d5ffc <_ZN12MCP79410Time8bcdToIntEh>

000d602c <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d602c:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d602e:	7b81      	ldrb	r1, [r0, #14]
   d6030:	064a      	lsls	r2, r1, #25
   d6032:	d50d      	bpl.n	d6050 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6034:	f001 001f 	and.w	r0, r1, #31
   d6038:	f7ff ffe0 	bl	d5ffc <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d603c:	068b      	lsls	r3, r1, #26
   d603e:	d503      	bpl.n	d6048 <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d6040:	280c      	cmp	r0, #12
   d6042:	d00b      	beq.n	d605c <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d6044:	300c      	adds	r0, #12
   d6046:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d6048:	280c      	cmp	r0, #12
   d604a:	bf08      	it	eq
   d604c:	2000      	moveq	r0, #0
   d604e:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6050:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d6054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d6058:	f7ff bfd0 	b.w	d5ffc <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d605c:	bd08      	pop	{r3, pc}

000d605e <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d605e:	7bc0      	ldrb	r0, [r0, #15]
   d6060:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6064:	f7ff bfca 	b.w	d5ffc <_ZN12MCP79410Time8bcdToIntEh>

000d6068 <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d6068:	7c00      	ldrb	r0, [r0, #16]
   d606a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d606e:	f7ff bfc5 	b.w	d5ffc <_ZN12MCP79410Time8bcdToIntEh>

000d6072 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d6072:	b510      	push	{r4, lr}
   d6074:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d6076:	2224      	movs	r2, #36	; 0x24
   d6078:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d607a:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d607c:	a801      	add	r0, sp, #4
   d607e:	f004 f905 	bl	da28c <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6082:	4620      	mov	r0, r4
   d6084:	f7ff ffc1 	bl	d600a <_ZNK12MCP79410Time7getYearEv>
   d6088:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d608c:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d608e:	4620      	mov	r0, r4
   d6090:	f7ff ffc2 	bl	d6018 <_ZNK12MCP79410Time8getMonthEv>
   d6094:	3801      	subs	r0, #1
   d6096:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6098:	4620      	mov	r0, r4
   d609a:	f7ff ffc2 	bl	d6022 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d609e:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d60a0:	4620      	mov	r0, r4
   d60a2:	f7ff ffc3 	bl	d602c <_ZNK12MCP79410Time7getHourEv>
   d60a6:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d60a8:	4620      	mov	r0, r4
   d60aa:	f7ff ffd8 	bl	d605e <_ZNK12MCP79410Time9getMinuteEv>
   d60ae:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d60b0:	4620      	mov	r0, r4
   d60b2:	f7ff ffd9 	bl	d6068 <_ZNK12MCP79410Time9getSecondEv>
   d60b6:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d60b8:	a801      	add	r0, sp, #4
   d60ba:	f004 f9cb 	bl	da454 <mktime>
}
   d60be:	b00a      	add	sp, #40	; 0x28
   d60c0:	bd10      	pop	{r4, pc}

000d60c2 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d60c2:	220a      	movs	r2, #10
   d60c4:	fb90 f3f2 	sdiv	r3, r0, r2
   d60c8:	fb93 f1f2 	sdiv	r1, r3, r2
   d60cc:	fb02 3111 	mls	r1, r2, r1, r3
   d60d0:	fb02 0313 	mls	r3, r2, r3, r0
   d60d4:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d60d8:	b2c0      	uxtb	r0, r0
   d60da:	4770      	bx	lr

000d60dc <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d60dc:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d60de:	b510      	push	{r4, lr}
   d60e0:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d60e2:	fb91 f0f3 	sdiv	r0, r1, r3
   d60e6:	fb00 1013 	mls	r0, r0, r3, r1
   d60ea:	f7ff ffea 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d60ee:	72a0      	strb	r0, [r4, #10]
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d60f2:	b510      	push	{r4, lr}
   d60f4:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d60f6:	4608      	mov	r0, r1
   d60f8:	f7ff ffe3 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d60fc:	72e0      	strb	r0, [r4, #11]
   d60fe:	bd10      	pop	{r4, pc}

000d6100 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d6100:	b510      	push	{r4, lr}
   d6102:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d6104:	4608      	mov	r0, r1
   d6106:	f7ff ffdc 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d610a:	7b23      	ldrb	r3, [r4, #12]
   d610c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d6110:	4318      	orrs	r0, r3
   d6112:	7320      	strb	r0, [r4, #12]
   d6114:	bd10      	pop	{r4, pc}

000d6116 <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d6116:	b510      	push	{r4, lr}
   d6118:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d611a:	1c48      	adds	r0, r1, #1
   d611c:	f7ff ffd1 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d6120:	7b63      	ldrb	r3, [r4, #13]
   d6122:	f023 0307 	bic.w	r3, r3, #7
   d6126:	4318      	orrs	r0, r3
   d6128:	7360      	strb	r0, [r4, #13]
   d612a:	bd10      	pop	{r4, pc}

000d612c <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d612c:	b510      	push	{r4, lr}
   d612e:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6130:	4608      	mov	r0, r1
   d6132:	f7ff ffc6 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d6136:	73a0      	strb	r0, [r4, #14]
   d6138:	bd10      	pop	{r4, pc}

000d613a <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d613a:	b510      	push	{r4, lr}
   d613c:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d613e:	4608      	mov	r0, r1
   d6140:	f7ff ffbf 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d6144:	73e0      	strb	r0, [r4, #15]
   d6146:	bd10      	pop	{r4, pc}

000d6148 <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d6148:	b510      	push	{r4, lr}
   d614a:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d614c:	4608      	mov	r0, r1
   d614e:	f7ff ffb8 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d6152:	7c23      	ldrb	r3, [r4, #16]
   d6154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6158:	4318      	orrs	r0, r3
   d615a:	7420      	strb	r0, [r4, #16]
   d615c:	bd10      	pop	{r4, pc}

000d615e <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d615e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6160:	4604      	mov	r4, r0
   d6162:	a802      	add	r0, sp, #8
   d6164:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d6168:	f003 fec8 	bl	d9efc <gmtime>
   d616c:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d616e:	6941      	ldr	r1, [r0, #20]
   d6170:	4620      	mov	r0, r4
   d6172:	f7ff ffb3 	bl	d60dc <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d6176:	6929      	ldr	r1, [r5, #16]
   d6178:	4620      	mov	r0, r4
   d617a:	3101      	adds	r1, #1
   d617c:	f7ff ffb9 	bl	d60f2 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d6180:	68e9      	ldr	r1, [r5, #12]
   d6182:	4620      	mov	r0, r4
   d6184:	f7ff ffbc 	bl	d6100 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d6188:	69a9      	ldr	r1, [r5, #24]
   d618a:	4620      	mov	r0, r4
   d618c:	f7ff ffc3 	bl	d6116 <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d6190:	68a9      	ldr	r1, [r5, #8]
   d6192:	4620      	mov	r0, r4
   d6194:	f7ff ffca 	bl	d612c <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6198:	6869      	ldr	r1, [r5, #4]
   d619a:	4620      	mov	r0, r4
   d619c:	f7ff ffcd 	bl	d613a <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d61a0:	6829      	ldr	r1, [r5, #0]
   d61a2:	293b      	cmp	r1, #59	; 0x3b
   d61a4:	bfa8      	it	ge
   d61a6:	213b      	movge	r1, #59	; 0x3b
   d61a8:	4620      	mov	r0, r4
   d61aa:	f7ff ffcd 	bl	d6148 <_ZN12MCP79410Time9setSecondEi>
}
   d61ae:	b003      	add	sp, #12
   d61b0:	bd30      	pop	{r4, r5, pc}

000d61b2 <_ZN12MCP79410Time12setAlarmTimeEl>:
	clear();
	alarmMode = ALARM_DAY_OF_MONTH;
	setDayOfMonth(dayOfMonth);
}

void MCP79410Time::setAlarmTime(time_t unixTime) {
   d61b2:	b510      	push	{r4, lr}
   d61b4:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d61b6:	f7ff ffd2 	bl	d615e <_ZN12MCP79410Time12fromUnixTimeEl>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d61ba:	7a63      	ldrb	r3, [r4, #9]
   d61bc:	7463      	strb	r3, [r4, #17]
   d61be:	bd10      	pop	{r4, pc}

000d61c0 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d61c0:	4a08      	ldr	r2, [pc, #32]	; (d61e4 <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d61c2:	6002      	str	r2, [r0, #0]
   d61c4:	2200      	movs	r2, #0
   d61c6:	7202      	strb	r2, [r0, #8]
   d61c8:	7242      	strb	r2, [r0, #9]
   d61ca:	2201      	movs	r2, #1
   d61cc:	7282      	strb	r2, [r0, #10]
   d61ce:	4603      	mov	r3, r0
   d61d0:	2203      	movs	r2, #3
   d61d2:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d61d4:	4a04      	ldr	r2, [pc, #16]	; (d61e8 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d61d6:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d61d8:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d61da:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d61dc:	4a03      	ldr	r2, [pc, #12]	; (d61ec <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d61de:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d61e0:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d61e2:	4770      	bx	lr
   d61e4:	000dc0c0 	.word	0x000dc0c0
   d61e8:	000dbf90 	.word	0x000dbf90
   d61ec:	000dbf6c 	.word	0x000dbf6c

000d61f0 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d61f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61f4:	4605      	mov	r5, r0
   d61f6:	460f      	mov	r7, r1
   d61f8:	4691      	mov	r9, r2
   d61fa:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d61fc:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d61fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6200:	429c      	cmp	r4, r3
   d6202:	d230      	bcs.n	d6266 <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d6204:	4639      	mov	r1, r7
   d6206:	6868      	ldr	r0, [r5, #4]
   d6208:	f001 fece 	bl	d7fa8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d620c:	eb09 0104 	add.w	r1, r9, r4
   d6210:	6868      	ldr	r0, [r5, #4]
   d6212:	f7ff fd2d 	bl	d5c70 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6216:	2100      	movs	r1, #0
   d6218:	6868      	ldr	r0, [r5, #4]
   d621a:	f001 fecc 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d621e:	4606      	mov	r6, r0
   d6220:	b9d8      	cbnz	r0, d625a <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6224:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6226:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6228:	2a20      	cmp	r2, #32
   d622a:	f04f 0301 	mov.w	r3, #1
   d622e:	bf28      	it	cs
   d6230:	2220      	movcs	r2, #32
   d6232:	4639      	mov	r1, r7
   d6234:	f001 fea6 	bl	d7f84 <_ZN7TwoWire11requestFromEhjh>
   d6238:	eb0a 0804 	add.w	r8, sl, r4
   d623c:	4683      	mov	fp, r0
   d623e:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d6240:	ebc8 0306 	rsb	r3, r8, r6
   d6244:	459b      	cmp	fp, r3
   d6246:	d906      	bls.n	d6256 <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d6248:	6868      	ldr	r0, [r5, #4]
   d624a:	6803      	ldr	r3, [r0, #0]
   d624c:	695b      	ldr	r3, [r3, #20]
   d624e:	4798      	blx	r3
   d6250:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d6254:	e7f4      	b.n	d6240 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d6256:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6258:	e7d1      	b.n	d61fe <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d625a:	4602      	mov	r2, r0
   d625c:	4904      	ldr	r1, [pc, #16]	; (d6270 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d625e:	4805      	ldr	r0, [pc, #20]	; (d6274 <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d6260:	f7ff fd0a 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6264:	e000      	b.n	d6268 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d6266:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d6268:	4630      	mov	r0, r6
   d626a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d626e:	bf00      	nop
   d6270:	000dc00a 	.word	0x000dc00a
   d6274:	2003e19c 	.word	0x2003e19c

000d6278 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d627a:	2301      	movs	r3, #1
   d627c:	9300      	str	r3, [sp, #0]
   d627e:	460a      	mov	r2, r1
   d6280:	ab03      	add	r3, sp, #12
   d6282:	216f      	movs	r1, #111	; 0x6f
   d6284:	f7ff ffb4 	bl	d61f0 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6288:	b910      	cbnz	r0, d6290 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d628a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d628e:	e000      	b.n	d6292 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d6290:	2000      	movs	r0, #0
	}
}
   d6292:	b005      	add	sp, #20
   d6294:	f85d fb04 	ldr.w	pc, [sp], #4

000d6298 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d6298:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d629a:	2103      	movs	r1, #3
   d629c:	f7ff ffec 	bl	d6278 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d62a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d62a4:	bd08      	pop	{r3, pc}

000d62a6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d62a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d62a8:	461e      	mov	r6, r3
   d62aa:	2b00      	cmp	r3, #0
   d62ac:	bf0c      	ite	eq
   d62ae:	2307      	moveq	r3, #7
   d62b0:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d62b2:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d62b4:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d62b6:	ab02      	add	r3, sp, #8
   d62b8:	460a      	mov	r2, r1
   d62ba:	216f      	movs	r1, #111	; 0x6f
   d62bc:	f7ff ff98 	bl	d61f0 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d62c0:	4605      	mov	r5, r0
   d62c2:	b9d8      	cbnz	r0, d62fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d62c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d62c8:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d62ca:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d62ce:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d62d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d62d4:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d62d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d62da:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d62dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d62e0:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d62e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d62e6:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d62e8:	b91e      	cbnz	r6, d62f2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d62ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d62ee:	72a3      	strb	r3, [r4, #10]
   d62f0:	e004      	b.n	d62fc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d62f2:	f002 fd43 	bl	d8d7c <_ZN9TimeClass4yearEv>
   d62f6:	f7ff fee4 	bl	d60c2 <_ZN12MCP79410Time8intToBcdEi>
   d62fa:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d62fc:	4628      	mov	r0, r5
   d62fe:	b004      	add	sp, #16
   d6300:	bd70      	pop	{r4, r5, r6, pc}

000d6302 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6302:	b538      	push	{r3, r4, r5, lr}
   d6304:	2300      	movs	r3, #0
   d6306:	460c      	mov	r4, r1
   d6308:	460a      	mov	r2, r1
   d630a:	4619      	mov	r1, r3
   d630c:	4605      	mov	r5, r0
   d630e:	f7ff ffca 	bl	d62a6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d6312:	b928      	cbnz	r0, d6320 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6314:	7aa3      	ldrb	r3, [r4, #10]
   d6316:	b11b      	cbz	r3, d6320 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d6318:	4628      	mov	r0, r5
   d631a:	f7ff ffbd 	bl	d6298 <_ZNK8MCP7941020getOscillatorRunningEv>
   d631e:	b900      	cbnz	r0, d6322 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d6320:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d6322:	bd38      	pop	{r3, r4, r5, pc}

000d6324 <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d6324:	b510      	push	{r4, lr}
   d6326:	b086      	sub	sp, #24
   d6328:	4604      	mov	r4, r0
	MCP79410Time time;
   d632a:	a801      	add	r0, sp, #4
   d632c:	f7ff fe50 	bl	d5fd0 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d6330:	a901      	add	r1, sp, #4
   d6332:	4620      	mov	r0, r4
   d6334:	f7ff ffe5 	bl	d6302 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6338:	b110      	cbz	r0, d6340 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d633a:	a801      	add	r0, sp, #4
   d633c:	f7ff fe99 	bl	d6072 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d6340:	b006      	add	sp, #24
   d6342:	bd10      	pop	{r4, pc}

000d6344 <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d6344:	b530      	push	{r4, r5, lr}
   d6346:	4604      	mov	r4, r0
   d6348:	b085      	sub	sp, #20
	wire.begin();
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	f001 fdf8 	bl	d7f40 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d6350:	f002 fcc0 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
   d6354:	b9c0      	cbnz	r0, d6388 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6356:	7ae3      	ldrb	r3, [r4, #11]
   d6358:	079b      	lsls	r3, r3, #30
   d635a:	d515      	bpl.n	d6388 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d635c:	4620      	mov	r0, r4
   d635e:	f7ff ffe1 	bl	d6324 <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d6362:	4605      	mov	r5, r0
   d6364:	b180      	cbz	r0, d6388 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d6366:	f002 fbf5 	bl	d8b54 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d636a:	4b09      	ldr	r3, [pc, #36]	; (d6390 <_ZN8MCP794105setupEv+0x4c>)
   d636c:	4909      	ldr	r1, [pc, #36]	; (d6394 <_ZN8MCP794105setupEv+0x50>)
   d636e:	681b      	ldr	r3, [r3, #0]
   d6370:	462a      	mov	r2, r5
   d6372:	4668      	mov	r0, sp
   d6374:	f002 fc7c 	bl	d8c70 <_ZN9TimeClass6formatElPKc>
   d6378:	4807      	ldr	r0, [pc, #28]	; (d6398 <_ZN8MCP794105setupEv+0x54>)
   d637a:	9a00      	ldr	r2, [sp, #0]
   d637c:	4907      	ldr	r1, [pc, #28]	; (d639c <_ZN8MCP794105setupEv+0x58>)
   d637e:	f7ff fc7b 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
   d6382:	4668      	mov	r0, sp
   d6384:	f002 f98b 	bl	d869e <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d6388:	2301      	movs	r3, #1
   d638a:	7223      	strb	r3, [r4, #8]
}
   d638c:	b005      	add	sp, #20
   d638e:	bd30      	pop	{r4, r5, pc}
   d6390:	2003df74 	.word	0x2003df74
   d6394:	2003e4a0 	.word	0x2003e4a0
   d6398:	2003e19c 	.word	0x2003e19c
   d639c:	000dc024 	.word	0x000dc024

000d63a0 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d63a4:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63a8:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d63aa:	6803      	ldr	r3, [r0, #0]
   d63ac:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63ae:	4604      	mov	r4, r0
   d63b0:	460d      	mov	r5, r1
   d63b2:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d63b4:	4798      	blx	r3
   d63b6:	4580      	cmp	r8, r0
   d63b8:	d80a      	bhi.n	d63d0 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d63ba:	9600      	str	r6, [sp, #0]
   d63bc:	463b      	mov	r3, r7
   d63be:	b2ea      	uxtb	r2, r5
   d63c0:	2157      	movs	r1, #87	; 0x57
   d63c2:	6860      	ldr	r0, [r4, #4]
   d63c4:	f7ff ff14 	bl	d61f0 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d63c8:	fab0 f080 	clz	r0, r0
   d63cc:	0940      	lsrs	r0, r0, #5
   d63ce:	e000      	b.n	d63d2 <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d63d0:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d63d2:	b002      	add	sp, #8
   d63d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63d8 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d63dc:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63e0:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d63e2:	6803      	ldr	r3, [r0, #0]
   d63e4:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d63e6:	4605      	mov	r5, r0
   d63e8:	460c      	mov	r4, r1
   d63ea:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d63ec:	4798      	blx	r3
   d63ee:	4580      	cmp	r8, r0
   d63f0:	d80c      	bhi.n	d640c <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d63f2:	f104 0220 	add.w	r2, r4, #32
   d63f6:	9600      	str	r6, [sp, #0]
   d63f8:	463b      	mov	r3, r7
   d63fa:	b2d2      	uxtb	r2, r2
   d63fc:	216f      	movs	r1, #111	; 0x6f
   d63fe:	6868      	ldr	r0, [r5, #4]
   d6400:	f7ff fef6 	bl	d61f0 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d6404:	fab0 f080 	clz	r0, r0
   d6408:	0940      	lsrs	r0, r0, #5
   d640a:	e000      	b.n	d640e <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d640c:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d640e:	b002      	add	sp, #8
   d6410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6414 <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6418:	4607      	mov	r7, r0
   d641a:	4689      	mov	r9, r1
   d641c:	4692      	mov	sl, r2
   d641e:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6420:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d6422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6424:	429c      	cmp	r4, r3
   d6426:	d228      	bcs.n	d647a <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d6428:	4649      	mov	r1, r9
   d642a:	6878      	ldr	r0, [r7, #4]
   d642c:	f001 fdbc 	bl	d7fa8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6430:	eb0a 0104 	add.w	r1, sl, r4
   d6434:	6878      	ldr	r0, [r7, #4]
   d6436:	f7ff fc1b 	bl	d5c70 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d643a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d643c:	1b1e      	subs	r6, r3, r4
   d643e:	2e1f      	cmp	r6, #31
   d6440:	eb0b 0804 	add.w	r8, fp, r4
   d6444:	bf28      	it	cs
   d6446:	261f      	movcs	r6, #31
   d6448:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d644a:	6878      	ldr	r0, [r7, #4]
   d644c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6450:	6802      	ldr	r2, [r0, #0]
   d6452:	6892      	ldr	r2, [r2, #8]
   d6454:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6456:	ebc8 0205 	rsb	r2, r8, r5
   d645a:	42b2      	cmp	r2, r6
   d645c:	d3f5      	bcc.n	d644a <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d645e:	2101      	movs	r1, #1
   d6460:	6878      	ldr	r0, [r7, #4]
   d6462:	f001 fda8 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6466:	4605      	mov	r5, r0
   d6468:	b128      	cbz	r0, d6476 <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d646a:	4602      	mov	r2, r0
   d646c:	4905      	ldr	r1, [pc, #20]	; (d6484 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d646e:	4806      	ldr	r0, [pc, #24]	; (d6488 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d6470:	f7ff fc02 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d6474:	e002      	b.n	d647c <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d6476:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d6478:	e7d3      	b.n	d6422 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d647a:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d647c:	4628      	mov	r0, r5
   d647e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6482:	bf00      	nop
   d6484:	000dc039 	.word	0x000dc039
   d6488:	2003e19c 	.word	0x2003e19c

000d648c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d648c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d648e:	7c13      	ldrb	r3, [r2, #16]
   d6490:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6494:	7bd3      	ldrb	r3, [r2, #15]
   d6496:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d649a:	7b93      	ldrb	r3, [r2, #14]
   d649c:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d64a0:	7b53      	ldrb	r3, [r2, #13]
   d64a2:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d64a6:	7b13      	ldrb	r3, [r2, #12]
   d64a8:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d64ac:	7ad3      	ldrb	r3, [r2, #11]
   d64ae:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d64b2:	7a93      	ldrb	r3, [r2, #10]
   d64b4:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d64b8:	2307      	movs	r3, #7
   d64ba:	9300      	str	r3, [sp, #0]
   d64bc:	460a      	mov	r2, r1
   d64be:	ab02      	add	r3, sp, #8
   d64c0:	216f      	movs	r1, #111	; 0x6f
   d64c2:	f7ff ffa7 	bl	d6414 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d64c6:	b005      	add	sp, #20
   d64c8:	f85d fb04 	ldr.w	pc, [sp], #4

000d64cc <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d64cc:	b510      	push	{r4, lr}
   d64ce:	b086      	sub	sp, #24
   d64d0:	4604      	mov	r4, r0
	MCP79410Time time;
   d64d2:	a801      	add	r0, sp, #4
   d64d4:	f7ff fd7c 	bl	d5fd0 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d64d8:	a801      	add	r0, sp, #4
   d64da:	f7ff fe40 	bl	d615e <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d64de:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d64e2:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d64e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d64e8:	f88d 3014 	strb.w	r3, [sp, #20]
   d64ec:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d64f0:	b112      	cbz	r2, d64f8 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d64f2:	f043 0308 	orr.w	r3, r3, #8
   d64f6:	e001      	b.n	d64fc <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d64f8:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d64fc:	aa01      	add	r2, sp, #4
   d64fe:	2100      	movs	r1, #0
   d6500:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6502:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6506:	f7ff ffc1 	bl	d648c <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d650a:	fab0 f080 	clz	r0, r0
   d650e:	0940      	lsrs	r0, r0, #5
   d6510:	b006      	add	sp, #24
   d6512:	bd10      	pop	{r4, pc}

000d6514 <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d6514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6516:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d6518:	f002 fbdc 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
   d651c:	4604      	mov	r4, r0
   d651e:	b1b8      	cbz	r0, d6550 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d6520:	f002 fbf9 	bl	d8d16 <_ZN9TimeClass3nowEv>
   d6524:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d6526:	4601      	mov	r1, r0
   d6528:	4630      	mov	r0, r6
   d652a:	f7ff ffcf 	bl	d64cc <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d652e:	4b0c      	ldr	r3, [pc, #48]	; (d6560 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d6530:	490c      	ldr	r1, [pc, #48]	; (d6564 <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d6532:	681b      	ldr	r3, [r3, #0]
   d6534:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d6536:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6538:	4668      	mov	r0, sp
   d653a:	f002 fb99 	bl	d8c70 <_ZN9TimeClass6formatElPKc>
   d653e:	9a00      	ldr	r2, [sp, #0]
   d6540:	4909      	ldr	r1, [pc, #36]	; (d6568 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6542:	480a      	ldr	r0, [pc, #40]	; (d656c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6544:	f7ff fb98 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
   d6548:	4668      	mov	r0, sp
   d654a:	f002 f8a8 	bl	d869e <_ZN6StringD1Ev>
   d654e:	e003      	b.n	d6558 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d6550:	4907      	ldr	r1, [pc, #28]	; (d6570 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6552:	4806      	ldr	r0, [pc, #24]	; (d656c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6554:	f7ff fb90 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d6558:	4620      	mov	r0, r4
   d655a:	b004      	add	sp, #16
   d655c:	bd70      	pop	{r4, r5, r6, pc}
   d655e:	bf00      	nop
   d6560:	2003df74 	.word	0x2003df74
   d6564:	2003e4a0 	.word	0x2003e4a0
   d6568:	000dc054 	.word	0x000dc054
   d656c:	2003e19c 	.word	0x2003e19c
   d6570:	000dc06a 	.word	0x000dc06a

000d6574 <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6574:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6576:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d6578:	4604      	mov	r4, r0
	if (!timeSet) {
   d657a:	b98d      	cbnz	r5, d65a0 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d657c:	f002 fbaa 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
   d6580:	b170      	cbz	r0, d65a0 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6582:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d6584:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d6586:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d658a:	f000 ff29 	bl	d73e0 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d658e:	b138      	cbz	r0, d65a0 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6590:	7ae3      	ldrb	r3, [r4, #11]
   d6592:	07db      	lsls	r3, r3, #31
   d6594:	d502      	bpl.n	d659c <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff ffbc 	bl	d6514 <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d659c:	2301      	movs	r3, #1
   d659e:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d65a0:	b003      	add	sp, #12
   d65a2:	bd30      	pop	{r4, r5, pc}

000d65a4 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d65a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d65a6:	ab04      	add	r3, sp, #16
   d65a8:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d65ac:	2201      	movs	r2, #1
   d65ae:	9200      	str	r2, [sp, #0]
   d65b0:	460a      	mov	r2, r1
   d65b2:	216f      	movs	r1, #111	; 0x6f
   d65b4:	f7ff ff2e 	bl	d6414 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d65b8:	b005      	add	sp, #20
   d65ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d65be <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d65be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65c0:	4614      	mov	r4, r2
   d65c2:	4605      	mov	r5, r0
   d65c4:	460e      	mov	r6, r1
   d65c6:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d65c8:	f7ff fe56 	bl	d6278 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d65cc:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d65ce:	ea40 0207 	orr.w	r2, r0, r7
   d65d2:	4631      	mov	r1, r6
   d65d4:	4628      	mov	r0, r5
}
   d65d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d65da:	f7ff bfe3 	b.w	d65a4 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d65de <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d65de:	b113      	cbz	r3, d65e6 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d65e0:	4613      	mov	r3, r2
   d65e2:	22ff      	movs	r2, #255	; 0xff
   d65e4:	e001      	b.n	d65ea <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d65e6:	43d2      	mvns	r2, r2
   d65e8:	b2d2      	uxtb	r2, r2
   d65ea:	f7ff bfe8 	b.w	d65be <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d65ee <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d65ee:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d65f0:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d65f2:	d80c      	bhi.n	d660e <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d65f4:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d65f6:	f04f 0300 	mov.w	r3, #0
   d65fa:	bf0c      	ite	eq
   d65fc:	2210      	moveq	r2, #16
   d65fe:	2220      	movne	r2, #32
   d6600:	2107      	movs	r1, #7
   d6602:	f7ff ffec 	bl	d65de <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d6606:	fab0 f080 	clz	r0, r0
   d660a:	0940      	lsrs	r0, r0, #5
   d660c:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d660e:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d6610:	bd08      	pop	{r3, pc}

000d6612 <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d6612:	2900      	cmp	r1, #0

	return (wkday & REG_ALARM_WKDAY_ALMIF) != 0;
}

void MCP79410::clearInterrupt(int alarmNum) {
	deviceWriteRegisterFlag(getAlarmRegister(alarmNum, REG_ALARM_WKDAY_OFFSET), REG_ALARM_WKDAY_ALMIF, false);
   d6614:	f04f 0300 	mov.w	r3, #0
   d6618:	f04f 0208 	mov.w	r2, #8
   d661c:	bf14      	ite	ne
   d661e:	2114      	movne	r1, #20
   d6620:	210d      	moveq	r1, #13
   d6622:	f7ff bfdc 	b.w	d65de <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>

000d6626 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6626:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d662a:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d662e:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d6630:	6803      	ldr	r3, [r0, #0]
   d6632:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6634:	4605      	mov	r5, r0
   d6636:	460c      	mov	r4, r1
   d6638:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d663a:	4798      	blx	r3
   d663c:	4580      	cmp	r8, r0
   d663e:	d80c      	bhi.n	d665a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6640:	f104 0220 	add.w	r2, r4, #32
   d6644:	9600      	str	r6, [sp, #0]
   d6646:	463b      	mov	r3, r7
   d6648:	b2d2      	uxtb	r2, r2
   d664a:	216f      	movs	r1, #111	; 0x6f
   d664c:	6868      	ldr	r0, [r5, #4]
   d664e:	f7ff fee1 	bl	d6414 <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d6652:	fab0 f080 	clz	r0, r0
   d6656:	0940      	lsrs	r0, r0, #5
   d6658:	e000      	b.n	d665c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d665a:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d665c:	b002      	add	sp, #8
   d665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6662 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6662:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d6664:	2b01      	cmp	r3, #1
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}

bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d6666:	b085      	sub	sp, #20
   d6668:	4606      	mov	r6, r0
   d666a:	460c      	mov	r4, r1
   d666c:	4617      	mov	r7, r2
   d666e:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d6670:	d901      	bls.n	d6676 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6672:	2000      	movs	r0, #0
   d6674:	e043      	b.n	d66fe <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x9c>
	}

	if (getOscillatorRunning()) {
   d6676:	f7ff fe0f 	bl	d6298 <_ZNK8MCP7941020getOscillatorRunningEv>
   d667a:	2800      	cmp	r0, #0
   d667c:	d0f9      	beq.n	d6672 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		uint8_t buf[6];

		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);
   d667e:	4629      	mov	r1, r5
   d6680:	4630      	mov	r0, r6
   d6682:	f7ff ffc6 	bl	d6612 <_ZN8MCP7941014clearInterruptEi>

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d6686:	7c23      	ldrb	r3, [r4, #16]
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6688:	7b22      	ldrb	r2, [r4, #12]
		// Clear any existing alarm interrupt, otherwise this one will not fire. Fixed in 0.0.2.
		clearInterrupt(alarmNum);

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
   d668a:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d668e:	7be3      	ldrb	r3, [r4, #15]
   d6690:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
   d6694:	f88d 200c 	strb.w	r2, [sp, #12]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d6698:	7ba3      	ldrb	r3, [r4, #14]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d669a:	7ae2      	ldrb	r2, [r4, #11]

		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
   d669c:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[3] = time.rawDayOfWeek;
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;
   d66a0:	f88d 200d 	strb.w	r2, [sp, #13]
		// log.trace("setAlarm %s polarity=%d alarmNum=%d", time.toStringRaw().c_str(), polarity, alarmNum);

		buf[0] = time.rawSecond;
		buf[1] = time.rawMinute;
		buf[2] = time.rawHour;
		buf[3] = time.rawDayOfWeek;
   d66a4:	7b63      	ldrb	r3, [r4, #13]
		buf[4] = time.rawDayOfMonth;
		buf[5] = time.rawMonth;

		if (polarity) {
   d66a6:	b117      	cbz	r7, d66ae <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>
			// REG_ALARM_WKDAY_ALMPOL: 1 = alarm triggered, 0 = alarm did not trigger
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d66a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d66ac:	e001      	b.n	d66b2 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x50>
		}
		else {
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d66ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d66b2:	f88d 300b 	strb.w	r3, [sp, #11]
		}
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d66b6:	7c63      	ldrb	r3, [r4, #17]
   d66b8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d66bc:	011b      	lsls	r3, r3, #4
   d66be:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d66c2:	4313      	orrs	r3, r2
   d66c4:	2d00      	cmp	r5, #0
   d66c6:	f88d 300b 	strb.w	r3, [sp, #11]

		uint8_t reg = getAlarmRegister(alarmNum);

		// log.trace("setAlarm %02x%02x%02x%02x%02x%02x starting at reg=%02x", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], reg);

		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d66ca:	f04f 0306 	mov.w	r3, #6
   d66ce:	9300      	str	r3, [sp, #0]
   d66d0:	bf08      	it	eq
   d66d2:	220a      	moveq	r2, #10
   d66d4:	ab02      	add	r3, sp, #8
   d66d6:	bf18      	it	ne
   d66d8:	2211      	movne	r2, #17
   d66da:	216f      	movs	r1, #111	; 0x6f
   d66dc:	4630      	mov	r0, r6
   d66de:	f7ff fe99 	bl	d6414 <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d66e2:	4604      	mov	r4, r0
   d66e4:	b940      	cbnz	r0, d66f8 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x96>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d66e6:	2d00      	cmp	r5, #0
int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d66e8:	bf0c      	ite	eq
   d66ea:	2310      	moveq	r3, #16
   d66ec:	2320      	movne	r3, #32
   d66ee:	22ff      	movs	r2, #255	; 0xff
   d66f0:	2107      	movs	r1, #7
   d66f2:	4630      	mov	r0, r6
   d66f4:	f7ff ff63 	bl	d65be <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
		if (stat == 0) {
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
		}

		return (stat == 0);
   d66f8:	fab4 f084 	clz	r0, r4
   d66fc:	0940      	lsrs	r0, r0, #5
	}
	else {
		return false;
	}
}
   d66fe:	b005      	add	sp, #20
   d6700:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6702 <_ZN8MCP794108setAlarmEibi>:

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6702:	b5f0      	push	{r4, r5, r6, r7, lr}
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6704:	2b01      	cmp	r3, #1
	else {
		return false;
	}
}

bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d6706:	b087      	sub	sp, #28
   d6708:	4606      	mov	r6, r0
   d670a:	460c      	mov	r4, r1
   d670c:	4617      	mov	r7, r2
   d670e:	461d      	mov	r5, r3
	// log.trace("setAlarm secondsFromNow=%d polarity=%d alarmNum=%d", secondsFromNow, polarity, alarmNum);
	if (alarmNum < 0 || alarmNum > 1) {
   d6710:	d901      	bls.n	d6716 <_ZN8MCP794108setAlarmEibi+0x14>
		// Invalid alarmNum, must be 0 or 1
		return false;
   d6712:	2000      	movs	r0, #0
   d6714:	e010      	b.n	d6738 <_ZN8MCP794108setAlarmEibi+0x36>
	}

	time_t unixTime = getRTCTime();
   d6716:	f7ff fe05 	bl	d6324 <_ZNK8MCP7941010getRTCTimeEv>
	if (unixTime != 0) {
   d671a:	2800      	cmp	r0, #0
   d671c:	d0f9      	beq.n	d6712 <_ZN8MCP794108setAlarmEibi+0x10>
		unixTime += secondsFromNow;
   d671e:	1901      	adds	r1, r0, r4

		// Set an alarm for month, dayOfMonth, dayOfWeek, hour, minute, second
		MCP79410Time time;
   d6720:	a801      	add	r0, sp, #4
   d6722:	f7ff fc55 	bl	d5fd0 <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d6726:	a801      	add	r0, sp, #4
   d6728:	f7ff fd43 	bl	d61b2 <_ZN12MCP79410Time12setAlarmTimeEl>

		return setAlarm(time, polarity, alarmNum);
   d672c:	462b      	mov	r3, r5
   d672e:	463a      	mov	r2, r7
   d6730:	a901      	add	r1, sp, #4
   d6732:	4630      	mov	r0, r6
   d6734:	f7ff ff95 	bl	d6662 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
	}
	else {
		// RTC is not set or not running, cannot set an alarm
		return false;
	}
}
   d6738:	b007      	add	sp, #28
   d673a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d673c <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d673c:	b538      	push	{r3, r4, r5, lr}
   d673e:	4605      	mov	r5, r0
   d6740:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6742:	2157      	movs	r1, #87	; 0x57
   d6744:	6868      	ldr	r0, [r5, #4]
   d6746:	f001 fc2f 	bl	d7fa8 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d674a:	2101      	movs	r1, #1
   d674c:	6868      	ldr	r0, [r5, #4]
   d674e:	f001 fc32 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6752:	b108      	cbz	r0, d6758 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d6754:	3c01      	subs	r4, #1
   d6756:	d1f4      	bne.n	d6742 <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d6758:	bd38      	pop	{r3, r4, r5, pc}
	...

000d675c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6760:	4605      	mov	r5, r0
   d6762:	18d7      	adds	r7, r2, r3
   d6764:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d6766:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d676a:	42bc      	cmp	r4, r7
   d676c:	d01e      	beq.n	d67ac <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d676e:	2157      	movs	r1, #87	; 0x57
   d6770:	6868      	ldr	r0, [r5, #4]
   d6772:	f001 fc19 	bl	d7fa8 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6776:	eb08 0104 	add.w	r1, r8, r4
   d677a:	6868      	ldr	r0, [r5, #4]
   d677c:	f7ff fa78 	bl	d5c70 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d6780:	6868      	ldr	r0, [r5, #4]
   d6782:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6786:	6803      	ldr	r3, [r0, #0]
   d6788:	689b      	ldr	r3, [r3, #8]
   d678a:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d678c:	2101      	movs	r1, #1
   d678e:	6868      	ldr	r0, [r5, #4]
   d6790:	f001 fc11 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6794:	4606      	mov	r6, r0
   d6796:	b128      	cbz	r0, d67a4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6798:	4602      	mov	r2, r0
   d679a:	4906      	ldr	r1, [pc, #24]	; (d67b4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d679c:	4806      	ldr	r0, [pc, #24]	; (d67b8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d679e:	f7ff fa6b 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d67a2:	e004      	b.n	d67ae <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d67a4:	4628      	mov	r0, r5
   d67a6:	f7ff ffc9 	bl	d673c <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d67aa:	e7de      	b.n	d676a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d67ac:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d67ae:	4630      	mov	r0, r6
   d67b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d67b4:	000dc07f 	.word	0x000dc07f
   d67b8:	2003e19c 	.word	0x2003e19c

000d67bc <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d67c0:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67c4:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d67c6:	6803      	ldr	r3, [r0, #0]
   d67c8:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d67ca:	4604      	mov	r4, r0
   d67cc:	460d      	mov	r5, r1
   d67ce:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d67d0:	4798      	blx	r3
   d67d2:	4580      	cmp	r8, r0
   d67d4:	d80a      	bhi.n	d67ec <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d67d6:	4633      	mov	r3, r6
   d67d8:	463a      	mov	r2, r7
   d67da:	b2e9      	uxtb	r1, r5
   d67dc:	6860      	ldr	r0, [r4, #4]
   d67de:	f7ff ffbd 	bl	d675c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d67e2:	fab0 f080 	clz	r0, r0
   d67e6:	0940      	lsrs	r0, r0, #5
   d67e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d67ec:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d67ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d67f4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d67f4:	b508      	push	{r3, lr}
   d67f6:	f000 fbc1 	bl	d6f7c <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d67fc:	4a02      	ldr	r2, [pc, #8]	; (d6808 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d67fe:	601a      	str	r2, [r3, #0]
   d6800:	bd08      	pop	{r3, pc}
   d6802:	bf00      	nop
   d6804:	2003e19c 	.word	0x2003e19c
   d6808:	000dc0a0 	.word	0x000dc0a0

000d680c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
	  }
	return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d680c:	6842      	ldr	r2, [r0, #4]
   d680e:	6803      	ldr	r3, [r0, #0]
   d6810:	1050      	asrs	r0, r2, #1
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class& __object, _Args&&... __args) const
	{ return (__object.*_M_pmf)(std::forward<_Args>(__args)...); }
   d6812:	f012 0f01 	tst.w	r2, #1
   d6816:	bf18      	it	ne
   d6818:	580a      	ldrne	r2, [r1, r0]
   d681a:	4408      	add	r0, r1
   d681c:	bf18      	it	ne
   d681e:	58d3      	ldrne	r3, [r2, r3]
   d6820:	4718      	bx	r3

000d6822 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6822:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6824:	2301      	movs	r3, #1
   d6826:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6828:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d682a:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d682c:	b10b      	cbz	r3, d6832 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d682e:	68c0      	ldr	r0, [r0, #12]
   d6830:	e006      	b.n	d6840 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6832:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6834:	b128      	cbz	r0, d6842 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6836:	6883      	ldr	r3, [r0, #8]
   d6838:	b90b      	cbnz	r3, d683e <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d683a:	f002 fd84 	bl	d9346 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d683e:	68c3      	ldr	r3, [r0, #12]
   d6840:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6842:	2301      	movs	r3, #1
   d6844:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6846:	2000      	movs	r0, #0
    }
   d6848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d684c:	f000 bb36 	b.w	d6ebc <os_thread_exit>

000d6850 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d6850:	2a01      	cmp	r2, #1
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6852:	4603      	mov	r3, r0
		 _Manager_operation __op)
      {
	switch (__op)
   d6854:	d101      	bne.n	d685a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d6856:	6001      	str	r1, [r0, #0]
	      &_Base::_M_get_pointer(__source)->__value;
	    break;
   d6858:	e005      	b.n	d6866 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d685a:	2a02      	cmp	r2, #2
   d685c:	d103      	bne.n	d6866 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d685e:	b110      	cbz	r0, d6866 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
   d6860:	c903      	ldmia	r1, {r0, r1}
   d6862:	e883 0003 	stmia.w	r3, {r0, r1}

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d6866:	2000      	movs	r0, #0
   d6868:	4770      	bx	lr

000d686a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d686a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d686c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d686e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6870:	b113      	cbz	r3, d6878 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6872:	2203      	movs	r2, #3
   d6874:	4601      	mov	r1, r0
   d6876:	4798      	blx	r3
    }
   d6878:	4620      	mov	r0, r4
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d687c:	2301      	movs	r3, #1

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6880:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29

PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
   d6884:	4605      	mov	r5, r0
	haveSetup = true;

	os_mutex_create(&mutex);
   d6886:	3008      	adds	r0, #8
   d6888:	f000 faf0 	bl	d6e6c <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d688c:	2004      	movs	r0, #4
   d688e:	f7fd fc04 	bl	d409a <_Znwj>
   d6892:	4604      	mov	r4, r0
   d6894:	2800      	cmp	r0, #0
   d6896:	d035      	beq.n	d6904 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d6898:	491c      	ldr	r1, [pc, #112]	; (d690c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
   d689a:	2014      	movs	r0, #20
   d689c:	f002 fd42 	bl	d9324 <_ZnwjRKSt9nothrow_t>
   d68a0:	b130      	cbz	r0, d68b0 <_ZN21PublishQueueAsyncBase5setupEv+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d68a2:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d68a4:	7403      	strb	r3, [r0, #16]
   d68a6:	6003      	str	r3, [r0, #0]
   d68a8:	6043      	str	r3, [r0, #4]
   d68aa:	6083      	str	r3, [r0, #8]
   d68ac:	60c3      	str	r3, [r0, #12]
   d68ae:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68b0:	6020      	str	r0, [r4, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d68b2:	b1b0      	cbz	r0, d68e2 <_ZN21PublishQueueAsyncBase5setupEv+0x66>
            goto error;
        }
        d_->func = function;
   d68b4:	4b16      	ldr	r3, [pc, #88]	; (d6910 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d68b6:	6083      	str	r3, [r0, #8]
   d68b8:	6823      	ldr	r3, [r4, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68ba:	4916      	ldr	r1, [pc, #88]	; (d6914 <_ZN21PublishQueueAsyncBase5setupEv+0x98>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d68bc:	60dd      	str	r5, [r3, #12]
   d68be:	6820      	ldr	r0, [r4, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d68c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d68c4:	e88d 0009 	stmia.w	sp, {r0, r3}
   d68c8:	2202      	movs	r2, #2
   d68ca:	4b13      	ldr	r3, [pc, #76]	; (d6918 <_ZN21PublishQueueAsyncBase5setupEv+0x9c>)
   d68cc:	3004      	adds	r0, #4
   d68ce:	f000 faa5 	bl	d6e1c <os_thread_create>
   d68d2:	b930      	cbnz	r0, d68e2 <_ZN21PublishQueueAsyncBase5setupEv+0x66>
   d68d4:	6823      	ldr	r3, [r4, #0]
            goto error;
        }
        while (!d_->started) {
   d68d6:	7c1b      	ldrb	r3, [r3, #16]
   d68d8:	b9a3      	cbnz	r3, d6904 <_ZN21PublishQueueAsyncBase5setupEv+0x88>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d68da:	2001      	movs	r0, #1
   d68dc:	f000 fb16 	bl	d6f0c <HAL_Delay_Milliseconds>
   d68e0:	e7f8      	b.n	d68d4 <_ZN21PublishQueueAsyncBase5setupEv+0x58>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68e2:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68e4:	2300      	movs	r3, #0
   d68e6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68e8:	b166      	cbz	r6, d6904 <_ZN21PublishQueueAsyncBase5setupEv+0x88>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68ea:	6837      	ldr	r7, [r6, #0]
   d68ec:	b137      	cbz	r7, d68fc <_ZN21PublishQueueAsyncBase5setupEv+0x80>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68ee:	4638      	mov	r0, r7
   d68f0:	f7ff ffbb 	bl	d686a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68f4:	2110      	movs	r1, #16
   d68f6:	4638      	mov	r0, r7
   d68f8:	f002 fd09 	bl	d930e <_ZdlPvj>
   d68fc:	2114      	movs	r1, #20
   d68fe:	4630      	mov	r0, r6
   d6900:	f002 fd05 	bl	d930e <_ZdlPvj>
   d6904:	606c      	str	r4, [r5, #4]
}
   d6906:	b003      	add	sp, #12
   d6908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d690a:	bf00      	nop
   d690c:	000dc4bc 	.word	0x000dc4bc
   d6910:	000d6b2f 	.word	0x000d6b2f
   d6914:	000dc0f0 	.word	0x000dc0f0
   d6918:	000d6823 	.word	0x000d6823

000d691c <_ZN21PublishQueueAsyncBaseC1Ev>:
#include "PublishQueueAsyncRK.h"


Logger pubqLogger("app.pubq");

PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d691c:	f247 5130 	movw	r1, #30000	; 0x7530
   d6920:	60c1      	str	r1, [r0, #12]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6922:	490a      	ldr	r1, [pc, #40]	; (d694c <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6924:	4a0a      	ldr	r2, [pc, #40]	; (d6950 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d6926:	6101      	str	r1, [r0, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6928:	490a      	ldr	r1, [pc, #40]	; (d6954 <_ZN21PublishQueueAsyncBaseC1Ev+0x38>)
   d692a:	6002      	str	r2, [r0, #0]
   d692c:	61c1      	str	r1, [r0, #28]
   d692e:	2200      	movs	r2, #0
	    _M_manager = &_My_handler::_M_manager;
   d6930:	4909      	ldr	r1, [pc, #36]	; (d6958 <_ZN21PublishQueueAsyncBaseC1Ev+0x3c>)
   d6932:	6042      	str	r2, [r0, #4]
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6934:	6142      	str	r2, [r0, #20]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6936:	6181      	str	r1, [r0, #24]
   d6938:	6202      	str	r2, [r0, #32]
   d693a:	6242      	str	r2, [r0, #36]	; 0x24
   d693c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   d6940:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
   d6944:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a

}
   d6948:	4770      	bx	lr
   d694a:	bf00      	nop
   d694c:	000d6c89 	.word	0x000d6c89
   d6950:	000dc1b4 	.word	0x000dc1b4
   d6954:	000d680d 	.word	0x000d680d
   d6958:	000d6851 	.word	0x000d6851

000d695c <_ZN21PublishQueueAsyncBaseD1Ev>:

PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d695c:	b510      	push	{r4, lr}
   d695e:	4b04      	ldr	r3, [pc, #16]	; (d6970 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6960:	4604      	mov	r4, r0
   d6962:	f840 3b10 	str.w	r3, [r0], #16
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6966:	f7ff ff80 	bl	d686a <_ZNSt14_Function_baseD1Ev>

}
   d696a:	4620      	mov	r0, r4
   d696c:	bd10      	pop	{r4, pc}
   d696e:	bf00      	nop
   d6970:	000dc1b4 	.word	0x000dc1b4

000d6974 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6974:	b510      	push	{r4, lr}
   d6976:	4b03      	ldr	r3, [pc, #12]	; (d6984 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6978:	6003      	str	r3, [r0, #0]
   d697a:	4604      	mov	r4, r0
   d697c:	f7ff ffee 	bl	d695c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6980:	4620      	mov	r0, r4
   d6982:	bd10      	pop	{r4, pc}
   d6984:	000dc0d0 	.word	0x000dc0d0

000d6988 <_ZN25PublishQueueAsyncRetainedD0Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6988:	b510      	push	{r4, lr}
   d698a:	4604      	mov	r4, r0

}
   d698c:	f7ff fff2 	bl	d6974 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6990:	4620      	mov	r0, r4
   d6992:	2138      	movs	r1, #56	; 0x38
   d6994:	f002 fcbb 	bl	d930e <_ZdlPvj>
   d6998:	4620      	mov	r0, r4
   d699a:	bd10      	pop	{r4, pc}

000d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
}

void PublishQueueAsyncBase::mutexLock() const {
	os_mutex_lock(mutex);
   d699c:	6880      	ldr	r0, [r0, #8]
   d699e:	f000 ba6d 	b.w	d6e7c <os_mutex_lock>

000d69a2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
}

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
   d69a2:	6880      	ldr	r0, [r0, #8]
   d69a4:	f000 ba72 	b.w	d6e8c <os_mutex_unlock>

000d69a8 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d69a8:	b510      	push	{r4, lr}
   d69aa:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d69ac:	6800      	ldr	r0, [r0, #0]
   d69ae:	f7ff fff8 	bl	d69a2 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d69b2:	4620      	mov	r0, r4
   d69b4:	bd10      	pop	{r4, pc}

000d69b6 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d69b6:	b513      	push	{r0, r1, r4, lr}
   d69b8:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d69ba:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d69bc:	f7ff ffee 	bl	d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d69c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d69c2:	88dc      	ldrh	r4, [r3, #6]
   d69c4:	b2a4      	uxth	r4, r4
   d69c6:	b10c      	cbz	r4, d69cc <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d69c8:	f103 0408 	add.w	r4, r3, #8
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d69cc:	a801      	add	r0, sp, #4
   d69ce:	f7ff ffeb 	bl	d69a8 <_ZN11StMutexLockD1Ev>
	if (hdr->numEvents > 0) {
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
	}

	return eventData;
}
   d69d2:	4620      	mov	r0, r4
   d69d4:	b002      	add	sp, #8
   d69d6:	bd10      	pop	{r4, pc}

000d69d8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d69d8:	b513      	push	{r0, r1, r4, lr}
   d69da:	4604      	mov	r4, r0
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d69dc:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d69de:	f7ff ffdd 	bl	d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d69e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d69e6:	b91b      	cbnz	r3, d69f0 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x18>

	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d69e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	if (!isSending) {
		hdr->numEvents = 0;
		result = true;
   d69ea:	2401      	movs	r4, #1

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
		hdr->numEvents = 0;
   d69ec:	80d3      	strh	r3, [r2, #6]
   d69ee:	e000      	b.n	d69f2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x1a>

bool PublishQueueAsyncRetained::clearEvents() {

	// This entire function holds a mutex lock that's released when returning

	bool result = false;
   d69f0:	2400      	movs	r4, #0

	StMutexLock lock(this);
   d69f2:	a801      	add	r0, sp, #4
   d69f4:	f7ff ffd8 	bl	d69a8 <_ZN11StMutexLockD1Ev>
		hdr->numEvents = 0;
		result = true;
	}

	return result;
}
   d69f8:	4620      	mov	r0, r4
   d69fa:	b002      	add	sp, #8
   d69fc:	bd10      	pop	{r4, pc}

000d69fe <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d69fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6a00:	ac02      	add	r4, sp, #8
   d6a02:	4605      	mov	r5, r0
   d6a04:	f844 0d04 	str.w	r0, [r4, #-4]!
		publishQueue->mutexLock();
   d6a08:	f7ff ffc8 	bl	d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6a0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6a0e:	4620      	mov	r0, r4

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6a10:	88dd      	ldrh	r5, [r3, #6]

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
	uint16_t numEvents = 0;

	{
		StMutexLock lock(this);
   d6a12:	f7ff ffc9 	bl	d69a8 <_ZN11StMutexLockD1Ev>
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6a16:	4628      	mov	r0, r5
   d6a18:	b003      	add	sp, #12
   d6a1a:	bd30      	pop	{r4, r5, pc}

000d6a1c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a20:	469a      	mov	sl, r3
   d6a22:	b086      	sub	sp, #24

	if (!haveSetup) {
   d6a24:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6a28:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d6a2c:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {

}


bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6a30:	4604      	mov	r4, r0
   d6a32:	4688      	mov	r8, r1
   d6a34:	4616      	mov	r6, r2

	if (!haveSetup) {
   d6a36:	b913      	cbnz	r3, d6a3e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6a38:	6803      	ldr	r3, [r0, #0]
   d6a3a:	689b      	ldr	r3, [r3, #8]
   d6a3c:	4798      	blx	r3
	}

	if (data == NULL) {
		data = "";
   d6a3e:	4b31      	ldr	r3, [pc, #196]	; (d6b04 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a40:	4640      	mov	r0, r8
	if (!haveSetup) {
		setup();
	}

	if (data == NULL) {
		data = "";
   d6a42:	2e00      	cmp	r6, #0
   d6a44:	bf08      	it	eq
   d6a46:	461e      	moveq	r6, r3
	}

	// Size is the size of the header, the two c-strings (with null terminators), rounded up to a multiple of 4
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d6a48:	f004 fbe0 	bl	db20c <strlen>
   d6a4c:	4605      	mov	r5, r0
   d6a4e:	4630      	mov	r0, r6
   d6a50:	f004 fbdc 	bl	db20c <strlen>
   d6a54:	4428      	add	r0, r5
   d6a56:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d6a5a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6a5c:	bf1c      	itt	ne
   d6a5e:	f025 0503 	bicne.w	r5, r5, #3
   d6a62:	3504      	addne	r5, #4
	}

	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6a64:	4633      	mov	r3, r6
   d6a66:	9503      	str	r5, [sp, #12]
   d6a68:	9702      	str	r7, [sp, #8]
   d6a6a:	f8cd 9004 	str.w	r9, [sp, #4]
   d6a6e:	f8cd a000 	str.w	sl, [sp]
   d6a72:	4642      	mov	r2, r8
   d6a74:	4924      	ldr	r1, [pc, #144]	; (d6b08 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6a76:	4825      	ldr	r0, [pc, #148]	; (d6b0c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6a78:	f7ff f8fe 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>

	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d6a7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6a7e:	3b08      	subs	r3, #8
   d6a80:	429d      	cmp	r5, r3
   d6a82:	d90f      	bls.n	d6aa4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		// Special case: event is larger than the retained buffer. Rather than throw out all events
		// before discovering this, check that case first
		return false;
   d6a84:	2400      	movs	r4, #0
   d6a86:	e038      	b.n	d6afa <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xde>

			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
   d6a88:	88cb      	ldrh	r3, [r1, #6]
   d6a8a:	2b01      	cmp	r3, #1
   d6a8c:	d031      	beq.n	d6af2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd6>
		return false;
	}

	while(true) {
		{
			StMutexLock lock(this);
   d6a8e:	a805      	add	r0, sp, #20
   d6a90:	f7ff ff8a 	bl	d69a8 <_ZN11StMutexLockD1Ev>
			}
		}

		// Discard the oldest event (false) if we're not currently sending.
		// If we are sending (isSending=true), discard the second oldest event
		if (!discardOldEvent(isSending)) {
   d6a94:	6823      	ldr	r3, [r4, #0]
   d6a96:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6a9a:	699b      	ldr	r3, [r3, #24]
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	4798      	blx	r3
   d6aa0:	2800      	cmp	r0, #0
   d6aa2:	d0ef      	beq.n	d6a84 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x68>
   d6aa4:	4620      	mov	r0, r4
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6aa6:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6aa8:	f7ff ff78 	bl	d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	while(true) {
		{
			StMutexLock lock(this);

			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			if ((size_t)(end - nextFree) >= size) {
   d6aae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d6ab0:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d6ab2:	440b      	add	r3, r1
   d6ab4:	1a9b      	subs	r3, r3, r2
   d6ab6:	429d      	cmp	r5, r3
   d6ab8:	d8e6      	bhi.n	d6a88 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
				eventData->flags = flags1.value() | flags2.value();
   d6aba:	ea47 0709 	orr.w	r7, r7, r9

			uint8_t *end = &retainedBuffer[retainedBufferSize];
			if ((size_t)(end - nextFree) >= size) {
				// There is room to fit this
				PublishQueueEventData *eventData = reinterpret_cast<PublishQueueEventData *>(nextFree);
				eventData->ttl = ttl;
   d6abe:	f8c2 a000 	str.w	sl, [r2]
				eventData->flags = flags1.value() | flags2.value();
   d6ac2:	7117      	strb	r7, [r2, #4]

				char *cp = reinterpret_cast<char *>(nextFree);
   d6ac4:	6b67      	ldr	r7, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6ac6:	3708      	adds	r7, #8

				strcpy(cp, eventName);
   d6ac8:	4641      	mov	r1, r8
   d6aca:	4638      	mov	r0, r7
   d6acc:	f003 fe66 	bl	da79c <strcpy>
				cp += strlen(cp) + 1;
   d6ad0:	4638      	mov	r0, r7
   d6ad2:	f004 fb9b 	bl	db20c <strlen>

				strcpy(cp, data);
   d6ad6:	3001      	adds	r0, #1
   d6ad8:	4631      	mov	r1, r6
   d6ada:	4438      	add	r0, r7
   d6adc:	f003 fe5e 	bl	da79c <strcpy>

				nextFree += size;
   d6ae0:	6b60      	ldr	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6ae2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				strcpy(cp, eventName);
				cp += strlen(cp) + 1;

				strcpy(cp, data);

				nextFree += size;
   d6ae4:	4428      	add	r0, r5
   d6ae6:	6360      	str	r0, [r4, #52]	; 0x34

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
   d6ae8:	88d3      	ldrh	r3, [r2, #6]
   d6aea:	3301      	adds	r3, #1
   d6aec:	80d3      	strh	r3, [r2, #6]
				return true;
   d6aee:	2401      	movs	r4, #1
   d6af0:	e000      	b.n	d6af4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
			// If there's only one event, there's nothing left to discard, this event is too large
			// to fit with the existing first event (which we can't delete because it might be
			// in the process of being sent)
			PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
			if (hdr->numEvents == 1) {
				return false;
   d6af2:	2400      	movs	r4, #0

				nextFree += size;

				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
				hdr->numEvents++;
				return true;
   d6af4:	a805      	add	r0, sp, #20
   d6af6:	f7ff ff57 	bl	d69a8 <_ZN11StMutexLockD1Ev>
		}
	}

	// Not reached
	return false;
}
   d6afa:	4620      	mov	r0, r4
   d6afc:	b006      	add	sp, #24
   d6afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b02:	bf00      	nop
   d6b04:	000dbca3 	.word	0x000dbca3
   d6b08:	000dc102 	.word	0x000dc102
   d6b0c:	2003e1a0 	.word	0x2003e1a0

000d6b10 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:

void PublishQueueAsyncBase::mutexUnlock() const {
	os_mutex_unlock(mutex);
}

void PublishQueueAsyncBase::threadFunction() {
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4604      	mov	r4, r0
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b14:	f100 0510 	add.w	r5, r0, #16
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6b18:	69a3      	ldr	r3, [r4, #24]
   d6b1a:	b90b      	cbnz	r3, d6b20 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6b1c:	f002 fc13 	bl	d9346 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b20:	69e3      	ldr	r3, [r4, #28]
   d6b22:	4621      	mov	r1, r4
   d6b24:	4628      	mov	r0, r5
   d6b26:	4798      	blx	r3
	// Call the stateHandler forever
	while(true) {
		stateHandler(*this);
		os_thread_yield();
   d6b28:	f000 f988 	bl	d6e3c <os_thread_yield>
   d6b2c:	e7f4      	b.n	d6b18 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d6b2e <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
	}
}


// [static]
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d6b2e:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d6b30:	f7ff ffee 	bl	d6b10 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6b34 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b34:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
   d6b36:	f101 0408 	add.w	r4, r1, #8
	}

	return result;
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6b3a:	4605      	mov	r5, r0
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f004 fb65 	bl	db20c <strlen>
   d6b42:	3001      	adds	r0, #1
   d6b44:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b46:	4620      	mov	r0, r4
   d6b48:	f004 fb60 	bl	db20c <strlen>

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6b4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
}

uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
	start += sizeof(PublishQueueEventData);
	start += strlen(reinterpret_cast<char *>(start)) + 1;
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6b4e:	3001      	adds	r0, #1
   d6b50:	4420      	add	r0, r4

	// Align
	size_t offset = start - retainedBuffer;
	if ((offset % 4) != 0) {
   d6b52:	1ac3      	subs	r3, r0, r3
   d6b54:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d6b58:	bf1c      	itt	ne
   d6b5a:	f1c3 0304 	rsbne	r3, r3, #4
   d6b5e:	18c0      	addne	r0, r0, r3
	}


	return start;
}
   d6b60:	bd38      	pop	{r3, r4, r5, pc}

000d6b62 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6b62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6b66:	4605      	mov	r5, r0
   d6b68:	4688      	mov	r8, r1
	 * @brief Call the mutexLock() method of publishQueue()
	 *
	 * Instantiate this object on the stack so unlock can be done when the variable goes out of
	 * scope, such as when exiting a block or function.
	 */
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6b6a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6b6c:	f7ff ff16 	bl	d699c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6b70:	6aee      	ldr	r6, [r5, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6b72:	f106 0708 	add.w	r7, r6, #8
   d6b76:	88f4      	ldrh	r4, [r6, #6]
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
   d6b78:	f1b8 0f00 	cmp.w	r8, #0
   d6b7c:	d007      	beq.n	d6b8e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2c>
		if (hdr->numEvents < 2) {
   d6b7e:	2c01      	cmp	r4, #1
   d6b80:	d91c      	bls.n	d6bbc <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5a>
			return false;
		}
		start = skipEvent(start);
   d6b82:	4639      	mov	r1, r7
   d6b84:	4628      	mov	r0, r5
   d6b86:	f7ff ffd5 	bl	d6b34 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6b8a:	4607      	mov	r7, r0
   d6b8c:	e000      	b.n	d6b90 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x2e>
	}
	else {
		if (hdr->numEvents < 1) {
   d6b8e:	b1b4      	cbz	r4, d6bbe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6b90:	4639      	mov	r1, r7
   d6b92:	4628      	mov	r0, r5
   d6b94:	f7ff ffce 	bl	d6b34 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	size_t len = next - start;

	size_t after = end - next;
   d6b98:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   d6b9a:	4432      	add	r2, r6
	if (after > 0) {
   d6b9c:	1a12      	subs	r2, r2, r0
			return false;
		}
	}

	// Remove the event at start
	uint8_t *next = skipEvent(start);
   d6b9e:	4601      	mov	r1, r0
	size_t len = next - start;
   d6ba0:	eba0 0407 	sub.w	r4, r0, r7

	size_t after = end - next;
	if (after > 0) {
   d6ba4:	d002      	beq.n	d6bac <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x4a>
		// Move events down
		memmove(start, next, after);
   d6ba6:	4638      	mov	r0, r7
   d6ba8:	f003 fb55 	bl	da256 <memmove>
	}

	nextFree -= len;
   d6bac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d6bae:	1b1b      	subs	r3, r3, r4
   d6bb0:	636b      	str	r3, [r5, #52]	; 0x34
	hdr->numEvents--;
   d6bb2:	88f3      	ldrh	r3, [r6, #6]
   d6bb4:	3b01      	subs	r3, #1
   d6bb6:	80f3      	strh	r3, [r6, #6]


	return true;
   d6bb8:	2401      	movs	r4, #1
   d6bba:	e000      	b.n	d6bbe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x5c>
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
	uint8_t *end = &retainedBuffer[retainedBufferSize];

	if (secondEvent) {
		if (hdr->numEvents < 2) {
			return false;
   d6bbc:	2400      	movs	r4, #0
}


bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
   d6bbe:	a801      	add	r0, sp, #4
   d6bc0:	f7ff fef2 	bl	d69a8 <_ZN11StMutexLockD1Ev>
	nextFree -= len;
	hdr->numEvents--;


	return true;
}
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	b002      	add	sp, #8
   d6bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6bcc <_ZN25PublishQueueAsyncRetainedC1EPht>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6bd0:	4604      	mov	r4, r0
   d6bd2:	460d      	mov	r5, r1
   d6bd4:	4690      	mov	r8, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6bd6:	2600      	movs	r6, #0
   d6bd8:	f7ff fea0 	bl	d691c <_ZN21PublishQueueAsyncBaseC1Ev>

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bdc:	462f      	mov	r7, r5
	static_cast<PublishQueueAsync *>(param)->threadFunction();
}


PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6bde:	4b15      	ldr	r3, [pc, #84]	; (d6c34 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
   d6be0:	6023      	str	r3, [r4, #0]
   d6be2:	62e5      	str	r5, [r4, #44]	; 0x2c
   d6be4:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
   d6be8:	6366      	str	r6, [r4, #52]	; 0x34

	// Initialize the retained buffer
	bool initBuffer = false;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6bea:	4b13      	ldr	r3, [pc, #76]	; (d6c38 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
   d6bec:	f857 2b08 	ldr.w	r2, [r7], #8
   d6bf0:	429a      	cmp	r2, r3
   d6bf2:	4699      	mov	r9, r3
   d6bf4:	d114      	bne.n	d6c20 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6bf6:	88ab      	ldrh	r3, [r5, #4]
   d6bf8:	b29b      	uxth	r3, r3
   d6bfa:	4598      	cmp	r8, r3
   d6bfc:	d110      	bne.n	d6c20 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6bfe:	eb05 0a08 	add.w	sl, r5, r8

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6c02:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6c04:	88eb      	ldrh	r3, [r5, #6]
   d6c06:	b2b2      	uxth	r2, r6
   d6c08:	b29b      	uxth	r3, r3
   d6c0a:	429a      	cmp	r2, r3
   d6c0c:	d20f      	bcs.n	d6c2e <_ZN25PublishQueueAsyncRetainedC1EPht+0x62>
			nextFree = skipEvent(nextFree);
   d6c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6c10:	4620      	mov	r0, r4
   d6c12:	f7ff ff8f 	bl	d6b34 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6c16:	4582      	cmp	sl, r0
		// Calculate the next write offset
		uint8_t *end = &retainedBuffer[retainedBufferSize];

		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
			nextFree = skipEvent(nextFree);
   d6c18:	6360      	str	r0, [r4, #52]	; 0x34
   d6c1a:	f106 0601 	add.w	r6, r6, #1
			if (nextFree > end) {
   d6c1e:	d2f1      	bcs.n	d6c04 <_ZN25PublishQueueAsyncRetainedC1EPht+0x38>
	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
		hdr->size = retainedBufferSize;
		hdr->numEvents = 0;
   d6c20:	2300      	movs	r3, #0
	}

	//initBuffer = true; // Uncomment to discard old data

	if (initBuffer) {
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d6c22:	f8c5 9000 	str.w	r9, [r5]
		hdr->size = retainedBufferSize;
   d6c26:	f8a5 8004 	strh.w	r8, [r5, #4]
		hdr->numEvents = 0;
   d6c2a:	80eb      	strh	r3, [r5, #6]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6c2c:	6367      	str	r7, [r4, #52]	; 0x34
	}
}
   d6c2e:	4620      	mov	r0, r4
   d6c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c34:	000dc0d0 	.word	0x000dc0d0
   d6c38:	d19cab61 	.word	0xd19cab61

000d6c3c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6c3c:	b510      	push	{r4, lr}
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6c3e:	e891 000c 	ldmia.w	r1, {r2, r3}
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d6c42:	b086      	sub	sp, #24
   d6c44:	4604      	mov	r4, r0
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6c46:	9202      	str	r2, [sp, #8]
   d6c48:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c4a:	ab02      	add	r3, sp, #8
   d6c4c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6c50:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6c54:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6c58:	68a2      	ldr	r2, [r4, #8]
   d6c5a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6c5e:	e89d 0003 	ldmia.w	sp, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6c62:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c64:	4a06      	ldr	r2, [pc, #24]	; (d6c80 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x44>)
   d6c66:	60a2      	str	r2, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6c68:	68e2      	ldr	r2, [r4, #12]
   d6c6a:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c6c:	4a05      	ldr	r2, [pc, #20]	; (d6c84 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_+0x48>)
   d6c6e:	60e2      	str	r2, [r4, #12]
   d6c70:	e884 0003 	stmia.w	r4, {r0, r1}
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c74:	4618      	mov	r0, r3
   d6c76:	f7ff fdf8 	bl	d686a <_ZNSt14_Function_baseD1Ev>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d6c7a:	4620      	mov	r0, r4
   d6c7c:	b006      	add	sp, #24
   d6c7e:	bd10      	pop	{r4, pc}
   d6c80:	000d6851 	.word	0x000d6851
   d6c84:	000d680d 	.word	0x000d680d

000d6c88 <_ZN21PublishQueueAsyncBase10startStateEv>:
		stateHandler(*this);
		os_thread_yield();
	}
}

void PublishQueueAsyncBase::startState() {
   d6c88:	b507      	push	{r0, r1, r2, lr}
	// If we had other initialization to do, this would be a good place to do it.

	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6c8a:	4b05      	ldr	r3, [pc, #20]	; (d6ca0 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6c8c:	9300      	str	r3, [sp, #0]
   d6c8e:	4669      	mov	r1, sp
   d6c90:	2300      	movs	r3, #0
   d6c92:	3010      	adds	r0, #16
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	f7ff ffd1 	bl	d6c3c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
}
   d6c9a:	b003      	add	sp, #12
   d6c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6ca0:	000d6cd1 	.word	0x000d6cd1

000d6ca4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}

void PublishQueueAsyncBase::waitRetryState() {
   d6ca4:	b513      	push	{r0, r1, r4, lr}
   d6ca6:	4604      	mov	r4, r0
   d6ca8:	f000 f940 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6cae:	1ac0      	subs	r0, r0, r3
   d6cb0:	68e3      	ldr	r3, [r4, #12]
   d6cb2:	4298      	cmp	r0, r3
   d6cb4:	d308      	bcc.n	d6cc8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6cb6:	4b05      	ldr	r3, [pc, #20]	; (d6ccc <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6cb8:	9300      	str	r3, [sp, #0]
   d6cba:	4669      	mov	r1, sp
   d6cbc:	2300      	movs	r3, #0
   d6cbe:	f104 0010 	add.w	r0, r4, #16
   d6cc2:	9301      	str	r3, [sp, #4]
   d6cc4:	f7ff ffba 	bl	d6c3c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
	}
}
   d6cc8:	b002      	add	sp, #8
   d6cca:	bd10      	pop	{r4, pc}
   d6ccc:	000d6cd1 	.word	0x000d6cd1

000d6cd0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6cd4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	// Ready to process events
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
}


void PublishQueueAsyncBase::checkQueueState() {
   d6cd8:	b086      	sub	sp, #24
   d6cda:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6cdc:	2b00      	cmp	r3, #0
   d6cde:	d173      	bne.n	d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6ce0:	f000 fb4e 	bl	d7380 <spark_cloud_flag_connected>
   d6ce4:	2800      	cmp	r0, #0
   d6ce6:	d06f      	beq.n	d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
   d6ce8:	f000 f920 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
   d6cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6cee:	1ac0      	subs	r0, r0, r3
   d6cf0:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6cf4:	4298      	cmp	r0, r3
   d6cf6:	d967      	bls.n	d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

		PublishQueueEventData *data = getOldestEvent();
   d6cf8:	6823      	ldr	r3, [r4, #0]
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	695b      	ldr	r3, [r3, #20]
   d6cfe:	4798      	blx	r3
		if (data) {
   d6d00:	4605      	mov	r5, r0
   d6d02:	2800      	cmp	r0, #0
   d6d04:	d060      	beq.n	d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
			// We have an event and can probably publish
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6d06:	f105 0608 	add.w	r6, r5, #8
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {

		PublishQueueEventData *data = getOldestEvent();
		if (data) {
			// We have an event and can probably publish
			isSending = true;
   d6d0a:	2301      	movs	r3, #1
   d6d0c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6d10:	4630      	mov	r0, r6
   d6d12:	f004 fa7b 	bl	db20c <strlen>

			PublishFlags flags(PublishFlag(data->flags));
   d6d16:	f895 8004 	ldrb.w	r8, [r5, #4]

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d1a:	f8cd 8004 	str.w	r8, [sp, #4]
			isSending = true;

			const char *buf = reinterpret_cast<const char *>(data);
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
			const char *eventData = eventName;
			eventData += strlen(eventData) + 1;
   d6d1e:	3001      	adds	r0, #1
   d6d20:	1837      	adds	r7, r6, r0

			PublishFlags flags(PublishFlag(data->flags));

			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6d22:	682b      	ldr	r3, [r5, #0]
   d6d24:	9300      	str	r3, [sp, #0]
   d6d26:	4632      	mov	r2, r6
   d6d28:	463b      	mov	r3, r7
   d6d2a:	4929      	ldr	r1, [pc, #164]	; (d6dd0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6d2c:	4829      	ldr	r0, [pc, #164]	; (d6dd4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d2e:	f7fe ffa3 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>

			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6d32:	682b      	ldr	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6d34:	f88d 8000 	strb.w	r8, [sp]
   d6d38:	463a      	mov	r2, r7
   d6d3a:	4631      	mov	r1, r6
   d6d3c:	a802      	add	r0, sp, #8
   d6d3e:	f000 ff01 	bl	d7b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6d42:	9d02      	ldr	r5, [sp, #8]
   d6d44:	786b      	ldrb	r3, [r5, #1]

			// Use this technique of looping because the future will not be handled properly
			// when waiting in a worker thread like this.
			while(!request.isDone()) {
   d6d46:	b91b      	cbnz	r3, d6d50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6d48:	2001      	movs	r0, #1
   d6d4a:	f000 fbf1 	bl	d7530 <delay>
   d6d4e:	e7f8      	b.n	d6d42 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d50:	2000      	movs	r0, #0
   d6d52:	f000 faa5 	bl	d72a0 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d6d56:	b120      	cbz	r0, d6d62 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6d58:	786b      	ldrb	r3, [r5, #1]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6d5a:	b913      	cbnz	r3, d6d62 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d6d5c:	f000 faf8 	bl	d7350 <spark_process>
   d6d60:	e7fa      	b.n	d6d58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6d62:	782b      	ldrb	r3, [r5, #0]
			}
			bool bResult = request.isSucceeded();
			if (bResult) {
   d6d64:	2b01      	cmp	r3, #1
   d6d66:	d109      	bne.n	d6d7c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xac>
				// Successfully published
				pubqLogger.info("published successfully");
   d6d68:	491b      	ldr	r1, [pc, #108]	; (d6dd8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6d6a:	481a      	ldr	r0, [pc, #104]	; (d6dd4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d6c:	f7fe ff84 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6d70:	6823      	ldr	r3, [r4, #0]
   d6d72:	2100      	movs	r1, #0
   d6d74:	699b      	ldr	r3, [r3, #24]
   d6d76:	4620      	mov	r0, r4
   d6d78:	4798      	blx	r3
   d6d7a:	e00d      	b.n	d6d98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xc8>
			}
			else {
				// Did not successfully transmit, try again after retry time
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6d7c:	4917      	ldr	r1, [pc, #92]	; (d6ddc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6d7e:	4815      	ldr	r0, [pc, #84]	; (d6dd4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6d80:	68e2      	ldr	r2, [r4, #12]
   d6d82:	f7fe ff79 	bl	d5c78 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6d86:	4b16      	ldr	r3, [pc, #88]	; (d6de0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6d88:	9304      	str	r3, [sp, #16]
   d6d8a:	a904      	add	r1, sp, #16
   d6d8c:	2300      	movs	r3, #0
   d6d8e:	f104 0010 	add.w	r0, r4, #16
   d6d92:	9305      	str	r3, [sp, #20]
   d6d94:	f7ff ff52 	bl	d6c3c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeENSt9result_ofIFSC_S1_EE4typeEEE5valueERS3_E4typeEOSA_>
			}
			isSending = false;
   d6d98:	2300      	movs	r3, #0
   d6d9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6d9e:	f000 f8c5 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6da2:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6da4:	9c03      	ldr	r4, [sp, #12]
   d6da6:	b17c      	cbz	r4, d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6da8:	6863      	ldr	r3, [r4, #4]
   d6daa:	3b01      	subs	r3, #1
   d6dac:	6063      	str	r3, [r4, #4]
   d6dae:	b95b      	cbnz	r3, d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
        {
          _M_dispose();
   d6db0:	6823      	ldr	r3, [r4, #0]
   d6db2:	4620      	mov	r0, r4
   d6db4:	689b      	ldr	r3, [r3, #8]
   d6db6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6db8:	68a3      	ldr	r3, [r4, #8]
   d6dba:	3b01      	subs	r3, #1
   d6dbc:	60a3      	str	r3, [r4, #8]
   d6dbe:	b91b      	cbnz	r3, d6dc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xf8>
            _M_destroy();
   d6dc0:	6823      	ldr	r3, [r4, #0]
   d6dc2:	4620      	mov	r0, r4
   d6dc4:	68db      	ldr	r3, [r3, #12]
   d6dc6:	4798      	blx	r3
	}
	else {
		// Not cloud connected or can't publish yet (not connected or published too recently)
	}

}
   d6dc8:	b006      	add	sp, #24
   d6dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6dce:	bf00      	nop
   d6dd0:	000dc143 	.word	0x000dc143
   d6dd4:	2003e1a0 	.word	0x2003e1a0
   d6dd8:	000dc164 	.word	0x000dc164
   d6ddc:	000dc17b 	.word	0x000dc17b
   d6de0:	000d6ca5 	.word	0x000d6ca5

000d6de4 <_GLOBAL__sub_I_pubqLogger>:
		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
	}

	return numEvents;
}
   d6de4:	b508      	push	{r3, lr}
   d6de6:	f000 f8c9 	bl	d6f7c <HAL_Pin_Map>
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <_GLOBAL__sub_I_pubqLogger+0x10>)
   d6dec:	4a02      	ldr	r2, [pc, #8]	; (d6df8 <_GLOBAL__sub_I_pubqLogger+0x14>)
   d6dee:	601a      	str	r2, [r3, #0]
   d6df0:	bd08      	pop	{r3, pc}
   d6df2:	bf00      	nop
   d6df4:	2003e1a0 	.word	0x2003e1a0
   d6df8:	000dc1a2 	.word	0x000dc1a2

000d6dfc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <cellular_signal+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030274 	.word	0x00030274

000d6e0c <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <cellular_command+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030274 	.word	0x00030274

000d6e1c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <os_thread_create+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	685b      	ldr	r3, [r3, #4]
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030248 	.word	0x00030248

000d6e2c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <os_thread_is_current+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	689b      	ldr	r3, [r3, #8]
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030248 	.word	0x00030248

000d6e3c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <os_thread_yield+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	68db      	ldr	r3, [r3, #12]
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030248 	.word	0x00030248

000d6e4c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <os_thread_join+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	691b      	ldr	r3, [r3, #16]
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030248 	.word	0x00030248

000d6e5c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <os_thread_cleanup+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	695b      	ldr	r3, [r3, #20]
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030248 	.word	0x00030248

000d6e6c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <os_mutex_create+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030248 	.word	0x00030248

000d6e7c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <os_mutex_lock+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030248 	.word	0x00030248

000d6e8c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <os_mutex_unlock+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	00030248 	.word	0x00030248

000d6e9c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <os_mutex_recursive_create+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	00030248 	.word	0x00030248

000d6eac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <os_mutex_recursive_destroy+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	00030248 	.word	0x00030248

000d6ebc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <os_thread_exit+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	00030248 	.word	0x00030248

000d6ecc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <HAL_Feature_Set+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	00030234 	.word	0x00030234

000d6edc <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <HAL_Core_System_Reset_Ex+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	00030234 	.word	0x00030234

000d6eec <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	00030234 	.word	0x00030234

000d6efc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <HAL_RNG_GetRandomNumber+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	685b      	ldr	r3, [r3, #4]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	00030218 	.word	0x00030218

000d6f0c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <HAL_Delay_Milliseconds+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	689b      	ldr	r3, [r3, #8]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	00030218 	.word	0x00030218

000d6f1c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_Delay_Microseconds+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	68db      	ldr	r3, [r3, #12]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	00030218 	.word	0x00030218

000d6f2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	695b      	ldr	r3, [r3, #20]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030218 	.word	0x00030218

000d6f3c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_RTC_Get_UnixTime+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	69db      	ldr	r3, [r3, #28]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030218 	.word	0x00030218

000d6f4c <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_RTC_Set_UnixTime+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	6a1b      	ldr	r3, [r3, #32]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030218 	.word	0x00030218

000d6f5c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <HAL_RTC_Time_Is_Valid+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030218 	.word	0x00030218

000d6f6c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <hal_timer_millis+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030218 	.word	0x00030218

000d6f7c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <HAL_Pin_Map+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	681b      	ldr	r3, [r3, #0]
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	0003022c 	.word	0x0003022c

000d6f8c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <HAL_Validate_Pin_Function+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	685b      	ldr	r3, [r3, #4]
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	0003022c 	.word	0x0003022c

000d6f9c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <HAL_Pin_Mode+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	689b      	ldr	r3, [r3, #8]
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	0003022c 	.word	0x0003022c

000d6fac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <HAL_Get_Pin_Mode+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	68db      	ldr	r3, [r3, #12]
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	0003022c 	.word	0x0003022c

000d6fbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <HAL_GPIO_Write+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	691b      	ldr	r3, [r3, #16]
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	0003022c 	.word	0x0003022c

000d6fcc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <HAL_GPIO_Read+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	695b      	ldr	r3, [r3, #20]
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	0003022c 	.word	0x0003022c

000d6fdc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <HAL_Interrupts_Attach+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	699b      	ldr	r3, [r3, #24]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	0003022c 	.word	0x0003022c

000d6fec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <HAL_Interrupts_Detach+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	69db      	ldr	r3, [r3, #28]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	0003022c 	.word	0x0003022c

000d6ffc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <HAL_ADC_Read+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	0003022c 	.word	0x0003022c

000d700c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <HAL_I2C_Begin+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	68db      	ldr	r3, [r3, #12]
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030228 	.word	0x00030228

000d701c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <HAL_I2C_Begin_Transmission+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	699b      	ldr	r3, [r3, #24]
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030228 	.word	0x00030228

000d702c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <HAL_I2C_End_Transmission+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	69db      	ldr	r3, [r3, #28]
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030228 	.word	0x00030228

000d703c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <HAL_I2C_Write_Data+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	6a1b      	ldr	r3, [r3, #32]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	00030228 	.word	0x00030228

000d704c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <HAL_I2C_Available_Data+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	00030228 	.word	0x00030228

000d705c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <HAL_I2C_Read_Data+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	00030228 	.word	0x00030228

000d706c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <HAL_I2C_Peek_Data+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	00030228 	.word	0x00030228

000d707c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <HAL_I2C_Flush_Data+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	00030228 	.word	0x00030228

000d708c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <HAL_I2C_Is_Enabled+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	00030228 	.word	0x00030228

000d709c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <HAL_I2C_Init+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	00030228 	.word	0x00030228

000d70ac <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <HAL_I2C_Acquire+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	00030228 	.word	0x00030228

000d70bc <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <HAL_I2C_Release+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	00030228 	.word	0x00030228

000d70cc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b02      	ldr	r3, [pc, #8]	; (d70d8 <HAL_I2C_Request_Data_Ex+0xc>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d70d4:	9301      	str	r3, [sp, #4]
   d70d6:	bd08      	pop	{r3, pc}
   d70d8:	00030228 	.word	0x00030228

000d70dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <inet_inet_ntop+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	695b      	ldr	r3, [r3, #20]
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	00030264 	.word	0x00030264

000d70ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <netdb_freeaddrinfo+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	689b      	ldr	r3, [r3, #8]
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	00030268 	.word	0x00030268

000d70fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b02      	ldr	r3, [pc, #8]	; (d7108 <netdb_getaddrinfo+0xc>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	68db      	ldr	r3, [r3, #12]
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	bd08      	pop	{r3, pc}
   d7108:	00030268 	.word	0x00030268

000d710c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d710c:	b508      	push	{r3, lr}
   d710e:	4b02      	ldr	r3, [pc, #8]	; (d7118 <HAL_SPI_Init+0xc>)
   d7110:	681b      	ldr	r3, [r3, #0]
   d7112:	69db      	ldr	r3, [r3, #28]
   d7114:	9301      	str	r3, [sp, #4]
   d7116:	bd08      	pop	{r3, pc}
   d7118:	00030230 	.word	0x00030230

000d711c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d711c:	b508      	push	{r3, lr}
   d711e:	4b02      	ldr	r3, [pc, #8]	; (d7128 <HAL_SPI_Is_Enabled+0xc>)
   d7120:	681b      	ldr	r3, [r3, #0]
   d7122:	6a1b      	ldr	r3, [r3, #32]
   d7124:	9301      	str	r3, [sp, #4]
   d7126:	bd08      	pop	{r3, pc}
   d7128:	00030230 	.word	0x00030230

000d712c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d712c:	b508      	push	{r3, lr}
   d712e:	4b02      	ldr	r3, [pc, #8]	; (d7138 <HAL_USART_Init+0xc>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	681b      	ldr	r3, [r3, #0]
   d7134:	9301      	str	r3, [sp, #4]
   d7136:	bd08      	pop	{r3, pc}
   d7138:	0003023c 	.word	0x0003023c

000d713c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d713c:	b508      	push	{r3, lr}
   d713e:	4b02      	ldr	r3, [pc, #8]	; (d7148 <HAL_USART_Write_Data+0xc>)
   d7140:	681b      	ldr	r3, [r3, #0]
   d7142:	68db      	ldr	r3, [r3, #12]
   d7144:	9301      	str	r3, [sp, #4]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	0003023c 	.word	0x0003023c

000d714c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d714c:	b508      	push	{r3, lr}
   d714e:	4b02      	ldr	r3, [pc, #8]	; (d7158 <HAL_USART_Available_Data+0xc>)
   d7150:	681b      	ldr	r3, [r3, #0]
   d7152:	691b      	ldr	r3, [r3, #16]
   d7154:	9301      	str	r3, [sp, #4]
   d7156:	bd08      	pop	{r3, pc}
   d7158:	0003023c 	.word	0x0003023c

000d715c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d715c:	b508      	push	{r3, lr}
   d715e:	4b02      	ldr	r3, [pc, #8]	; (d7168 <HAL_USART_Read_Data+0xc>)
   d7160:	681b      	ldr	r3, [r3, #0]
   d7162:	695b      	ldr	r3, [r3, #20]
   d7164:	9301      	str	r3, [sp, #4]
   d7166:	bd08      	pop	{r3, pc}
   d7168:	0003023c 	.word	0x0003023c

000d716c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d716c:	b508      	push	{r3, lr}
   d716e:	4b02      	ldr	r3, [pc, #8]	; (d7178 <HAL_USART_Peek_Data+0xc>)
   d7170:	681b      	ldr	r3, [r3, #0]
   d7172:	699b      	ldr	r3, [r3, #24]
   d7174:	9301      	str	r3, [sp, #4]
   d7176:	bd08      	pop	{r3, pc}
   d7178:	0003023c 	.word	0x0003023c

000d717c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d717c:	b508      	push	{r3, lr}
   d717e:	4b02      	ldr	r3, [pc, #8]	; (d7188 <HAL_USART_Flush_Data+0xc>)
   d7180:	681b      	ldr	r3, [r3, #0]
   d7182:	69db      	ldr	r3, [r3, #28]
   d7184:	9301      	str	r3, [sp, #4]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	0003023c 	.word	0x0003023c

000d718c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <HAL_USART_Is_Enabled+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	6a1b      	ldr	r3, [r3, #32]
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	0003023c 	.word	0x0003023c

000d719c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <HAL_USART_Available_Data_For_Write+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	0003023c 	.word	0x0003023c

000d71ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <HAL_USB_USART_Init+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	681b      	ldr	r3, [r3, #0]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	0003024c 	.word	0x0003024c

000d71bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <HAL_USB_USART_Available_Data+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	691b      	ldr	r3, [r3, #16]
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	0003024c 	.word	0x0003024c

000d71cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	695b      	ldr	r3, [r3, #20]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	0003024c 	.word	0x0003024c

000d71dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <HAL_USB_USART_Receive_Data+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	699b      	ldr	r3, [r3, #24]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	0003024c 	.word	0x0003024c

000d71ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <HAL_USB_USART_Send_Data+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	69db      	ldr	r3, [r3, #28]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	0003024c 	.word	0x0003024c

000d71fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <HAL_USB_USART_Flush_Data+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	6a1b      	ldr	r3, [r3, #32]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	0003024c 	.word	0x0003024c

000d720c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <panic_+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	00030260 	.word	0x00030260

000d721c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <log_message+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	00030260 	.word	0x00030260

000d722c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <log_message_v+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	00030260 	.word	0x00030260

000d723c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b03      	ldr	r3, [pc, #12]	; (d724c <diag_get_source+0x10>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7246:	9301      	str	r3, [sp, #4]
   d7248:	bd08      	pop	{r3, pc}
   d724a:	0000      	.short	0x0000
   d724c:	00030260 	.word	0x00030260

000d7250 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7250:	b508      	push	{r3, lr}
   d7252:	4b02      	ldr	r3, [pc, #8]	; (d725c <system_mode+0xc>)
   d7254:	681b      	ldr	r3, [r3, #0]
   d7256:	681b      	ldr	r3, [r3, #0]
   d7258:	9301      	str	r3, [sp, #4]
   d725a:	bd08      	pop	{r3, pc}
   d725c:	00030220 	.word	0x00030220

000d7260 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7260:	b508      	push	{r3, lr}
   d7262:	4b02      	ldr	r3, [pc, #8]	; (d726c <set_system_mode+0xc>)
   d7264:	681b      	ldr	r3, [r3, #0]
   d7266:	685b      	ldr	r3, [r3, #4]
   d7268:	9301      	str	r3, [sp, #4]
   d726a:	bd08      	pop	{r3, pc}
   d726c:	00030220 	.word	0x00030220

000d7270 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7270:	b508      	push	{r3, lr}
   d7272:	4b02      	ldr	r3, [pc, #8]	; (d727c <system_delay_ms+0xc>)
   d7274:	681b      	ldr	r3, [r3, #0]
   d7276:	695b      	ldr	r3, [r3, #20]
   d7278:	9301      	str	r3, [sp, #4]
   d727a:	bd08      	pop	{r3, pc}
   d727c:	00030220 	.word	0x00030220

000d7280 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d7280:	b508      	push	{r3, lr}
   d7282:	4b02      	ldr	r3, [pc, #8]	; (d728c <system_sleep+0xc>)
   d7284:	681b      	ldr	r3, [r3, #0]
   d7286:	699b      	ldr	r3, [r3, #24]
   d7288:	9301      	str	r3, [sp, #4]
   d728a:	bd08      	pop	{r3, pc}
   d728c:	00030220 	.word	0x00030220

000d7290 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7290:	b508      	push	{r3, lr}
   d7292:	4b02      	ldr	r3, [pc, #8]	; (d729c <system_thread_set_state+0xc>)
   d7294:	681b      	ldr	r3, [r3, #0]
   d7296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7298:	9301      	str	r3, [sp, #4]
   d729a:	bd08      	pop	{r3, pc}
   d729c:	00030220 	.word	0x00030220

000d72a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d72a0:	b508      	push	{r3, lr}
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <application_thread_current+0xc>)
   d72a4:	681b      	ldr	r3, [r3, #0]
   d72a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	bd08      	pop	{r3, pc}
   d72ac:	00030220 	.word	0x00030220

000d72b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d72b0:	b508      	push	{r3, lr}
   d72b2:	4b02      	ldr	r3, [pc, #8]	; (d72bc <application_thread_invoke+0xc>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d72b8:	9301      	str	r3, [sp, #4]
   d72ba:	bd08      	pop	{r3, pc}
   d72bc:	00030220 	.word	0x00030220

000d72c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d72c0:	b508      	push	{r3, lr}
   d72c2:	4b02      	ldr	r3, [pc, #8]	; (d72cc <system_thread_get_state+0xc>)
   d72c4:	681b      	ldr	r3, [r3, #0]
   d72c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d72c8:	9301      	str	r3, [sp, #4]
   d72ca:	bd08      	pop	{r3, pc}
   d72cc:	00030220 	.word	0x00030220

000d72d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d72d0:	b508      	push	{r3, lr}
   d72d2:	4b02      	ldr	r3, [pc, #8]	; (d72dc <system_notify_time_changed+0xc>)
   d72d4:	681b      	ldr	r3, [r3, #0]
   d72d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d72d8:	9301      	str	r3, [sp, #4]
   d72da:	bd08      	pop	{r3, pc}
   d72dc:	00030220 	.word	0x00030220

000d72e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d72e0:	b508      	push	{r3, lr}
   d72e2:	4b03      	ldr	r3, [pc, #12]	; (d72f0 <system_ctrl_set_app_request_handler+0x10>)
   d72e4:	681b      	ldr	r3, [r3, #0]
   d72e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d72ea:	9301      	str	r3, [sp, #4]
   d72ec:	bd08      	pop	{r3, pc}
   d72ee:	0000      	.short	0x0000
   d72f0:	00030220 	.word	0x00030220

000d72f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d72f4:	b508      	push	{r3, lr}
   d72f6:	4b03      	ldr	r3, [pc, #12]	; (d7304 <system_ctrl_set_result+0x10>)
   d72f8:	681b      	ldr	r3, [r3, #0]
   d72fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d72fe:	9301      	str	r3, [sp, #4]
   d7300:	bd08      	pop	{r3, pc}
   d7302:	0000      	.short	0x0000
   d7304:	00030220 	.word	0x00030220

000d7308 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7308:	b508      	push	{r3, lr}
   d730a:	4b03      	ldr	r3, [pc, #12]	; (d7318 <system_power_management_set_config+0x10>)
   d730c:	681b      	ldr	r3, [r3, #0]
   d730e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7312:	9301      	str	r3, [sp, #4]
   d7314:	bd08      	pop	{r3, pc}
   d7316:	0000      	.short	0x0000
   d7318:	00030220 	.word	0x00030220

000d731c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b03      	ldr	r3, [pc, #12]	; (d732c <system_sleep_ext+0x10>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d7326:	9301      	str	r3, [sp, #4]
   d7328:	bd08      	pop	{r3, pc}
   d732a:	0000      	.short	0x0000
   d732c:	00030220 	.word	0x00030220

000d7330 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7330:	b508      	push	{r3, lr}
   d7332:	4b02      	ldr	r3, [pc, #8]	; (d733c <spark_variable+0xc>)
   d7334:	681b      	ldr	r3, [r3, #0]
   d7336:	681b      	ldr	r3, [r3, #0]
   d7338:	9301      	str	r3, [sp, #4]
   d733a:	bd08      	pop	{r3, pc}
   d733c:	00030244 	.word	0x00030244

000d7340 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7340:	b508      	push	{r3, lr}
   d7342:	4b02      	ldr	r3, [pc, #8]	; (d734c <spark_function+0xc>)
   d7344:	681b      	ldr	r3, [r3, #0]
   d7346:	685b      	ldr	r3, [r3, #4]
   d7348:	9301      	str	r3, [sp, #4]
   d734a:	bd08      	pop	{r3, pc}
   d734c:	00030244 	.word	0x00030244

000d7350 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7350:	b508      	push	{r3, lr}
   d7352:	4b02      	ldr	r3, [pc, #8]	; (d735c <spark_process+0xc>)
   d7354:	681b      	ldr	r3, [r3, #0]
   d7356:	689b      	ldr	r3, [r3, #8]
   d7358:	9301      	str	r3, [sp, #4]
   d735a:	bd08      	pop	{r3, pc}
   d735c:	00030244 	.word	0x00030244

000d7360 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7360:	b508      	push	{r3, lr}
   d7362:	4b02      	ldr	r3, [pc, #8]	; (d736c <spark_cloud_flag_connect+0xc>)
   d7364:	681b      	ldr	r3, [r3, #0]
   d7366:	68db      	ldr	r3, [r3, #12]
   d7368:	9301      	str	r3, [sp, #4]
   d736a:	bd08      	pop	{r3, pc}
   d736c:	00030244 	.word	0x00030244

000d7370 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d7370:	b508      	push	{r3, lr}
   d7372:	4b02      	ldr	r3, [pc, #8]	; (d737c <spark_cloud_flag_disconnect+0xc>)
   d7374:	681b      	ldr	r3, [r3, #0]
   d7376:	691b      	ldr	r3, [r3, #16]
   d7378:	9301      	str	r3, [sp, #4]
   d737a:	bd08      	pop	{r3, pc}
   d737c:	00030244 	.word	0x00030244

000d7380 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7380:	b508      	push	{r3, lr}
   d7382:	4b02      	ldr	r3, [pc, #8]	; (d738c <spark_cloud_flag_connected+0xc>)
   d7384:	681b      	ldr	r3, [r3, #0]
   d7386:	695b      	ldr	r3, [r3, #20]
   d7388:	9301      	str	r3, [sp, #4]
   d738a:	bd08      	pop	{r3, pc}
   d738c:	00030244 	.word	0x00030244

000d7390 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7390:	b508      	push	{r3, lr}
   d7392:	4b02      	ldr	r3, [pc, #8]	; (d739c <spark_deviceID+0xc>)
   d7394:	681b      	ldr	r3, [r3, #0]
   d7396:	69db      	ldr	r3, [r3, #28]
   d7398:	9301      	str	r3, [sp, #4]
   d739a:	bd08      	pop	{r3, pc}
   d739c:	00030244 	.word	0x00030244

000d73a0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d73a0:	b508      	push	{r3, lr}
   d73a2:	4b02      	ldr	r3, [pc, #8]	; (d73ac <spark_send_event+0xc>)
   d73a4:	681b      	ldr	r3, [r3, #0]
   d73a6:	6a1b      	ldr	r3, [r3, #32]
   d73a8:	9301      	str	r3, [sp, #4]
   d73aa:	bd08      	pop	{r3, pc}
   d73ac:	00030244 	.word	0x00030244

000d73b0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d73b0:	b508      	push	{r3, lr}
   d73b2:	4b02      	ldr	r3, [pc, #8]	; (d73bc <spark_subscribe+0xc>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d73b8:	9301      	str	r3, [sp, #4]
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	00030244 	.word	0x00030244

000d73c0 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d73c0:	b508      	push	{r3, lr}
   d73c2:	4b02      	ldr	r3, [pc, #8]	; (d73cc <spark_sync_time+0xc>)
   d73c4:	681b      	ldr	r3, [r3, #0]
   d73c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73c8:	9301      	str	r3, [sp, #4]
   d73ca:	bd08      	pop	{r3, pc}
   d73cc:	00030244 	.word	0x00030244

000d73d0 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d73d0:	b508      	push	{r3, lr}
   d73d2:	4b02      	ldr	r3, [pc, #8]	; (d73dc <spark_sync_time_pending+0xc>)
   d73d4:	681b      	ldr	r3, [r3, #0]
   d73d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73d8:	9301      	str	r3, [sp, #4]
   d73da:	bd08      	pop	{r3, pc}
   d73dc:	00030244 	.word	0x00030244

000d73e0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d73e0:	b508      	push	{r3, lr}
   d73e2:	4b02      	ldr	r3, [pc, #8]	; (d73ec <spark_sync_time_last+0xc>)
   d73e4:	681b      	ldr	r3, [r3, #0]
   d73e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d73e8:	9301      	str	r3, [sp, #4]
   d73ea:	bd08      	pop	{r3, pc}
   d73ec:	00030244 	.word	0x00030244

000d73f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d73f0:	b508      	push	{r3, lr}
   d73f2:	4b02      	ldr	r3, [pc, #8]	; (d73fc <spark_set_random_seed_from_cloud_handler+0xc>)
   d73f4:	681b      	ldr	r3, [r3, #0]
   d73f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d73f8:	9301      	str	r3, [sp, #4]
   d73fa:	bd08      	pop	{r3, pc}
   d73fc:	00030244 	.word	0x00030244

000d7400 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7400:	b508      	push	{r3, lr}
   d7402:	4b02      	ldr	r3, [pc, #8]	; (d740c <network_connect+0xc>)
   d7404:	681b      	ldr	r3, [r3, #0]
   d7406:	685b      	ldr	r3, [r3, #4]
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	bd08      	pop	{r3, pc}
   d740c:	00030240 	.word	0x00030240

000d7410 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7410:	b508      	push	{r3, lr}
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <network_connecting+0xc>)
   d7414:	681b      	ldr	r3, [r3, #0]
   d7416:	689b      	ldr	r3, [r3, #8]
   d7418:	9301      	str	r3, [sp, #4]
   d741a:	bd08      	pop	{r3, pc}
   d741c:	00030240 	.word	0x00030240

000d7420 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7420:	b508      	push	{r3, lr}
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <network_disconnect+0xc>)
   d7424:	681b      	ldr	r3, [r3, #0]
   d7426:	68db      	ldr	r3, [r3, #12]
   d7428:	9301      	str	r3, [sp, #4]
   d742a:	bd08      	pop	{r3, pc}
   d742c:	00030240 	.word	0x00030240

000d7430 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7430:	b508      	push	{r3, lr}
   d7432:	4b02      	ldr	r3, [pc, #8]	; (d743c <network_ready+0xc>)
   d7434:	681b      	ldr	r3, [r3, #0]
   d7436:	691b      	ldr	r3, [r3, #16]
   d7438:	9301      	str	r3, [sp, #4]
   d743a:	bd08      	pop	{r3, pc}
   d743c:	00030240 	.word	0x00030240

000d7440 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7440:	b508      	push	{r3, lr}
   d7442:	4b02      	ldr	r3, [pc, #8]	; (d744c <network_on+0xc>)
   d7444:	681b      	ldr	r3, [r3, #0]
   d7446:	695b      	ldr	r3, [r3, #20]
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	bd08      	pop	{r3, pc}
   d744c:	00030240 	.word	0x00030240

000d7450 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7450:	b508      	push	{r3, lr}
   d7452:	4b02      	ldr	r3, [pc, #8]	; (d745c <network_off+0xc>)
   d7454:	681b      	ldr	r3, [r3, #0]
   d7456:	699b      	ldr	r3, [r3, #24]
   d7458:	9301      	str	r3, [sp, #4]
   d745a:	bd08      	pop	{r3, pc}
   d745c:	00030240 	.word	0x00030240

000d7460 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7460:	b508      	push	{r3, lr}
   d7462:	4b02      	ldr	r3, [pc, #8]	; (d746c <network_listen+0xc>)
   d7464:	681b      	ldr	r3, [r3, #0]
   d7466:	69db      	ldr	r3, [r3, #28]
   d7468:	9301      	str	r3, [sp, #4]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	00030240 	.word	0x00030240

000d7470 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b02      	ldr	r3, [pc, #8]	; (d747c <network_listening+0xc>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	6a1b      	ldr	r3, [r3, #32]
   d7478:	9301      	str	r3, [sp, #4]
   d747a:	bd08      	pop	{r3, pc}
   d747c:	00030240 	.word	0x00030240

000d7480 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7480:	b508      	push	{r3, lr}
   d7482:	4b02      	ldr	r3, [pc, #8]	; (d748c <network_set_listen_timeout+0xc>)
   d7484:	681b      	ldr	r3, [r3, #0]
   d7486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	bd08      	pop	{r3, pc}
   d748c:	00030240 	.word	0x00030240

000d7490 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7490:	b508      	push	{r3, lr}
   d7492:	4b02      	ldr	r3, [pc, #8]	; (d749c <network_get_listen_timeout+0xc>)
   d7494:	681b      	ldr	r3, [r3, #0]
   d7496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7498:	9301      	str	r3, [sp, #4]
   d749a:	bd08      	pop	{r3, pc}
   d749c:	00030240 	.word	0x00030240

000d74a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d74a0:	b508      	push	{r3, lr}
   d74a2:	4b02      	ldr	r3, [pc, #8]	; (d74ac <malloc+0xc>)
   d74a4:	681b      	ldr	r3, [r3, #0]
   d74a6:	681b      	ldr	r3, [r3, #0]
   d74a8:	9301      	str	r3, [sp, #4]
   d74aa:	bd08      	pop	{r3, pc}
   d74ac:	0003021c 	.word	0x0003021c

000d74b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d74b0:	b508      	push	{r3, lr}
   d74b2:	4b02      	ldr	r3, [pc, #8]	; (d74bc <free+0xc>)
   d74b4:	681b      	ldr	r3, [r3, #0]
   d74b6:	685b      	ldr	r3, [r3, #4]
   d74b8:	9301      	str	r3, [sp, #4]
   d74ba:	bd08      	pop	{r3, pc}
   d74bc:	0003021c 	.word	0x0003021c

000d74c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b02      	ldr	r3, [pc, #8]	; (d74cc <realloc+0xc>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	689b      	ldr	r3, [r3, #8]
   d74c8:	9301      	str	r3, [sp, #4]
   d74ca:	bd08      	pop	{r3, pc}
   d74cc:	0003021c 	.word	0x0003021c

000d74d0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d74d0:	b508      	push	{r3, lr}
   d74d2:	4b02      	ldr	r3, [pc, #8]	; (d74dc <siprintf+0xc>)
   d74d4:	681b      	ldr	r3, [r3, #0]
   d74d6:	691b      	ldr	r3, [r3, #16]
   d74d8:	9301      	str	r3, [sp, #4]
   d74da:	bd08      	pop	{r3, pc}
   d74dc:	0003021c 	.word	0x0003021c

000d74e0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d74e0:	b508      	push	{r3, lr}
   d74e2:	4b02      	ldr	r3, [pc, #8]	; (d74ec <siscanf+0xc>)
   d74e4:	681b      	ldr	r3, [r3, #0]
   d74e6:	699b      	ldr	r3, [r3, #24]
   d74e8:	9301      	str	r3, [sp, #4]
   d74ea:	bd08      	pop	{r3, pc}
   d74ec:	0003021c 	.word	0x0003021c

000d74f0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <snprintf+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	69db      	ldr	r3, [r3, #28]
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	0003021c 	.word	0x0003021c

000d7500 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <sniprintf+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	6a1b      	ldr	r3, [r3, #32]
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	0003021c 	.word	0x0003021c

000d7510 <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <abort+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	0003021c 	.word	0x0003021c

000d7520 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <_malloc_r+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	0003021c 	.word	0x0003021c

000d7530 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7530:	2100      	movs	r1, #0
   d7532:	f7ff be9d 	b.w	d7270 <system_delay_ms>

000d7536 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7536:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7538:	6883      	ldr	r3, [r0, #8]
   d753a:	4604      	mov	r4, r0
   d753c:	b90b      	cbnz	r3, d7542 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d753e:	f001 ff02 	bl	d9346 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7542:	68c3      	ldr	r3, [r0, #12]
   d7544:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7546:	68a3      	ldr	r3, [r4, #8]
   d7548:	b11b      	cbz	r3, d7552 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d754a:	2203      	movs	r2, #3
   d754c:	4621      	mov	r1, r4
   d754e:	4620      	mov	r0, r4
   d7550:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7552:	4620      	mov	r0, r4
   d7554:	2110      	movs	r1, #16
}
   d7556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d755a:	f001 bed8 	b.w	d930e <_ZdlPvj>

000d755e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d755e:	b510      	push	{r4, lr}
   d7560:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7562:	6800      	ldr	r0, [r0, #0]
   d7564:	b108      	cbz	r0, d756a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7566:	f7ff fca1 	bl	d6eac <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d756a:	4620      	mov	r0, r4
   d756c:	bd10      	pop	{r4, pc}

000d756e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d756e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7570:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7572:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7574:	689b      	ldr	r3, [r3, #8]
   d7576:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7578:	68a3      	ldr	r3, [r4, #8]
   d757a:	3b01      	subs	r3, #1
   d757c:	60a3      	str	r3, [r4, #8]
   d757e:	b92b      	cbnz	r3, d758c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d7580:	6823      	ldr	r3, [r4, #0]
   d7582:	4620      	mov	r0, r4
   d7584:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d758a:	4718      	bx	r3
   d758c:	bd10      	pop	{r4, pc}

000d758e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d758e:	680b      	ldr	r3, [r1, #0]
   d7590:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7592:	b113      	cbz	r3, d759a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7594:	685a      	ldr	r2, [r3, #4]
   d7596:	3201      	adds	r2, #1
   d7598:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d759a:	4770      	bx	lr

000d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d759c:	b510      	push	{r4, lr}
   d759e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d75a0:	6800      	ldr	r0, [r0, #0]
   d75a2:	b128      	cbz	r0, d75b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d75a4:	6843      	ldr	r3, [r0, #4]
   d75a6:	3b01      	subs	r3, #1
   d75a8:	6043      	str	r3, [r0, #4]
   d75aa:	b90b      	cbnz	r3, d75b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d75ac:	f7ff ffdf 	bl	d756e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d75b0:	4620      	mov	r0, r4
   d75b2:	bd10      	pop	{r4, pc}

000d75b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d75b4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75b6:	4c06      	ldr	r4, [pc, #24]	; (d75d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d75b8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d75ba:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75bc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d75be:	f7ff fc6d 	bl	d6e9c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d75c2:	4620      	mov	r0, r4
   d75c4:	4a03      	ldr	r2, [pc, #12]	; (d75d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d75c6:	4904      	ldr	r1, [pc, #16]	; (d75d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d75c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d75cc:	f001 be9a 	b.w	d9304 <__aeabi_atexit>
   d75d0:	2003e1a4 	.word	0x2003e1a4
   d75d4:	2003e02c 	.word	0x2003e02c
   d75d8:	000d755f 	.word	0x000d755f

000d75dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d75dc:	2200      	movs	r2, #0
   d75de:	4611      	mov	r1, r2
   d75e0:	6840      	ldr	r0, [r0, #4]
   d75e2:	f7ff bf25 	b.w	d7430 <network_ready>

000d75e6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75e6:	2200      	movs	r2, #0
   d75e8:	4611      	mov	r1, r2
   d75ea:	6840      	ldr	r0, [r0, #4]
   d75ec:	f7ff bf40 	b.w	d7470 <network_listening>

000d75f0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d75f0:	2200      	movs	r2, #0
   d75f2:	4611      	mov	r1, r2
   d75f4:	6840      	ldr	r0, [r0, #4]
   d75f6:	f7ff bf4b 	b.w	d7490 <network_get_listen_timeout>

000d75fa <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d75fa:	2200      	movs	r2, #0
   d75fc:	6840      	ldr	r0, [r0, #4]
   d75fe:	f7ff bf3f 	b.w	d7480 <network_set_listen_timeout>

000d7602 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7602:	2200      	movs	r2, #0
   d7604:	f081 0101 	eor.w	r1, r1, #1
   d7608:	6840      	ldr	r0, [r0, #4]
   d760a:	f7ff bf29 	b.w	d7460 <network_listen>

000d760e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d760e:	2300      	movs	r3, #0
   d7610:	461a      	mov	r2, r3
   d7612:	4619      	mov	r1, r3
   d7614:	6840      	ldr	r0, [r0, #4]
   d7616:	f7ff bf1b 	b.w	d7450 <network_off>

000d761a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d761a:	2300      	movs	r3, #0
   d761c:	461a      	mov	r2, r3
   d761e:	4619      	mov	r1, r3
   d7620:	6840      	ldr	r0, [r0, #4]
   d7622:	f7ff bf0d 	b.w	d7440 <network_on>

000d7626 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7626:	2200      	movs	r2, #0
   d7628:	4611      	mov	r1, r2
   d762a:	6840      	ldr	r0, [r0, #4]
   d762c:	f7ff bef0 	b.w	d7410 <network_connecting>

000d7630 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7630:	2200      	movs	r2, #0
   d7632:	2102      	movs	r1, #2
   d7634:	6840      	ldr	r0, [r0, #4]
   d7636:	f7ff bef3 	b.w	d7420 <network_disconnect>

000d763a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d763a:	2300      	movs	r3, #0
   d763c:	461a      	mov	r2, r3
   d763e:	6840      	ldr	r0, [r0, #4]
   d7640:	f7ff bede 	b.w	d7400 <network_connect>

000d7644 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7644:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d7646:	4b1b      	ldr	r3, [pc, #108]	; (d76b4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7648:	6003      	str	r3, [r0, #0]
   d764a:	2500      	movs	r5, #0
   d764c:	460f      	mov	r7, r1
   d764e:	3328      	adds	r3, #40	; 0x28
   d7650:	2618      	movs	r6, #24
   d7652:	b089      	sub	sp, #36	; 0x24
   d7654:	6043      	str	r3, [r0, #4]
   d7656:	6085      	str	r5, [r0, #8]
   d7658:	60c5      	str	r5, [r0, #12]
   d765a:	4632      	mov	r2, r6
   d765c:	4629      	mov	r1, r5
   d765e:	4604      	mov	r4, r0
   d7660:	3010      	adds	r0, #16
   d7662:	f002 fe13 	bl	da28c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7666:	462a      	mov	r2, r5
   d7668:	4629      	mov	r1, r5
   d766a:	6878      	ldr	r0, [r7, #4]
   d766c:	f7ff fee0 	bl	d7430 <network_ready>
   d7670:	b908      	cbnz	r0, d7676 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d7672:	60a0      	str	r0, [r4, #8]
            return sig;
   d7674:	e01b      	b.n	d76ae <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d7676:	4629      	mov	r1, r5
   d7678:	4632      	mov	r2, r6
   d767a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d767c:	9500      	str	r5, [sp, #0]
   d767e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d7680:	f002 fe04 	bl	da28c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7684:	a902      	add	r1, sp, #8
   d7686:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d7688:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d768c:	f7ff fbb6 	bl	d6dfc <cellular_signal>
   d7690:	b110      	cbz	r0, d7698 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d7692:	2301      	movs	r3, #1
   d7694:	60a3      	str	r3, [r4, #8]
            return sig;
   d7696:	e00a      	b.n	d76ae <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d7698:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d769a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d769c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d769e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d76a0:	b90b      	cbnz	r3, d76a6 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d76a2:	2302      	movs	r3, #2
   d76a4:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d76a6:	a902      	add	r1, sp, #8
   d76a8:	4620      	mov	r0, r4
   d76aa:	f000 f889 	bl	d77c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d76ae:	4620      	mov	r0, r4
   d76b0:	b009      	add	sp, #36	; 0x24
   d76b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76b4:	000dc210 	.word	0x000dc210

000d76b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d76b8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d76ba:	4c08      	ldr	r4, [pc, #32]	; (d76dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d76bc:	2528      	movs	r5, #40	; 0x28
   d76be:	462a      	mov	r2, r5
   d76c0:	2100      	movs	r1, #0
   d76c2:	4620      	mov	r0, r4
   d76c4:	f002 fde2 	bl	da28c <memset>
        cid = -1;
   d76c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d76cc:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d76ce:	4b04      	ldr	r3, [pc, #16]	; (d76e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d76d0:	8025      	strh	r5, [r4, #0]
   d76d2:	2204      	movs	r2, #4
   d76d4:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d76d6:	4a03      	ldr	r2, [pc, #12]	; (d76e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d76d8:	601a      	str	r2, [r3, #0]
   d76da:	bd38      	pop	{r3, r4, r5, pc}
   d76dc:	2003e1b0 	.word	0x2003e1b0
   d76e0:	2003e1a8 	.word	0x2003e1a8
   d76e4:	000dc1dc 	.word	0x000dc1dc

000d76e8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d76e8:	4770      	bx	lr

000d76ea <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d76ea:	7d00      	ldrb	r0, [r0, #20]
   d76ec:	4770      	bx	lr
	...

000d76f0 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d76f0:	7d03      	ldrb	r3, [r0, #20]
   d76f2:	b11b      	cbz	r3, d76fc <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d76f4:	6983      	ldr	r3, [r0, #24]
   d76f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d76fa:	d102      	bne.n	d7702 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d76fc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7714 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7700:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d7702:	ee07 3a90 	vmov	s15, r3
   d7706:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7718 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d770a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d770e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d7712:	4770      	bx	lr
   d7714:	00000000 	.word	0x00000000
   d7718:	42c80000 	.word	0x42c80000

000d771c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d771c:	7d03      	ldrb	r3, [r0, #20]
   d771e:	b11b      	cbz	r3, d7728 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d7720:	6a03      	ldr	r3, [r0, #32]
   d7722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7726:	d102      	bne.n	d772e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d7728:	ed9f 0a05 	vldr	s0, [pc, #20]	; d7740 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d772c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d772e:	ee07 3a90 	vmov	s15, r3
   d7732:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7744 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d7736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d773a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d773e:	4770      	bx	lr
   d7740:	00000000 	.word	0x00000000
   d7744:	42c80000 	.word	0x42c80000

000d7748 <_ZN14CellularSignalD0Ev>:
   d7748:	b510      	push	{r4, lr}
   d774a:	2128      	movs	r1, #40	; 0x28
   d774c:	4604      	mov	r4, r0
   d774e:	f001 fdde 	bl	d930e <_ZdlPvj>
   d7752:	4620      	mov	r0, r4
   d7754:	bd10      	pop	{r4, pc}
	...

000d7758 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7758:	7d03      	ldrb	r3, [r0, #20]
   d775a:	b17b      	cbz	r3, d777c <_ZNK14CellularSignal10getQualityEv+0x24>
   d775c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d775e:	2b00      	cmp	r3, #0
   d7760:	db0c      	blt.n	d777c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7762:	ee07 3a90 	vmov	s15, r3
   d7766:	eddf 6a07 	vldr	s13, [pc, #28]	; d7784 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d776a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d7788 <_ZNK14CellularSignal10getQualityEv+0x30>
   d776e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d7772:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d7776:	ee27 0a80 	vmul.f32	s0, s15, s0
   d777a:	4770      	bx	lr
    }

    return -1.0f;
   d777c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7780:	4770      	bx	lr
   d7782:	bf00      	nop
   d7784:	477fff00 	.word	0x477fff00
   d7788:	42c80000 	.word	0x42c80000

000d778c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d778c:	7d03      	ldrb	r3, [r0, #20]
   d778e:	b17b      	cbz	r3, d77b0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7790:	69c3      	ldr	r3, [r0, #28]
   d7792:	2b00      	cmp	r3, #0
   d7794:	db0c      	blt.n	d77b0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7796:	ee07 3a90 	vmov	s15, r3
   d779a:	eddf 6a07 	vldr	s13, [pc, #28]	; d77b8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d779e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d77bc <_ZNK14CellularSignal11getStrengthEv+0x30>
   d77a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d77a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d77aa:	ee27 0a80 	vmul.f32	s0, s15, s0
   d77ae:	4770      	bx	lr
    }

    return -1.0f;
   d77b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d77b4:	4770      	bx	lr
   d77b6:	bf00      	nop
   d77b8:	477fff00 	.word	0x477fff00
   d77bc:	42c80000 	.word	0x42c80000

000d77c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d77c0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d77c2:	460d      	mov	r5, r1
   d77c4:	f100 0410 	add.w	r4, r0, #16
   d77c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d77d0:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d77d4:	2001      	movs	r0, #1
   d77d6:	bd30      	pop	{r4, r5, pc}

000d77d8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d77d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d77dc:	4607      	mov	r7, r0
   d77de:	460c      	mov	r4, r1
{
    if (base == 0) {
   d77e0:	4615      	mov	r5, r2
   d77e2:	b92a      	cbnz	r2, d77f0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d77e4:	6803      	ldr	r3, [r0, #0]
   d77e6:	b2c9      	uxtb	r1, r1
   d77e8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d77ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d77ee:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d77f0:	2900      	cmp	r1, #0
   d77f2:	da07      	bge.n	d7804 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d77f4:	2a0a      	cmp	r2, #10
   d77f6:	d105      	bne.n	d7804 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d77f8:	212d      	movs	r1, #45	; 0x2d
   d77fa:	f000 fef6 	bl	d85ea <_ZN5Print5printEc>
            val = -n;
   d77fe:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d7800:	4606      	mov	r6, r0
            val = -n;
   d7802:	e001      	b.n	d7808 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d7804:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d7806:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7808:	b2ea      	uxtb	r2, r5
   d780a:	4638      	mov	r0, r7
   d780c:	f000 ff06 	bl	d861c <_ZN5Print11printNumberEmh>
    }
}
   d7810:	4430      	add	r0, r6
   d7812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7816 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
   d7816:	b570      	push	{r4, r5, r6, lr}
   d7818:	460d      	mov	r5, r1
   d781a:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d781c:	220a      	movs	r2, #10
   d781e:	6881      	ldr	r1, [r0, #8]
   d7820:	4628      	mov	r0, r5
   d7822:	f7ff ffd9 	bl	d77d8 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
   d7826:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d7828:	4604      	mov	r4, r0
    n += p.print(',');
   d782a:	4628      	mov	r0, r5
   d782c:	f000 fedd 	bl	d85ea <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d7830:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d7832:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d7834:	68f1      	ldr	r1, [r6, #12]
   d7836:	4628      	mov	r0, r5
   d7838:	f7ff ffce 	bl	d77d8 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
   d783c:	4420      	add	r0, r4
   d783e:	bd70      	pop	{r4, r5, r6, pc}

000d7840 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7840:	f1a0 0004 	sub.w	r0, r0, #4
   d7844:	f7ff bfe7 	b.w	d7816 <_ZNK14CellularSignal7printToER5Print>

000d7848 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7848:	4770      	bx	lr

000d784a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d784a:	2000      	movs	r0, #0
   d784c:	4770      	bx	lr

000d784e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d784e:	b510      	push	{r4, lr}
   d7850:	2110      	movs	r1, #16
   d7852:	4604      	mov	r4, r0
   d7854:	f001 fd5b 	bl	d930e <_ZdlPvj>
   d7858:	4620      	mov	r0, r4
   d785a:	bd10      	pop	{r4, pc}

000d785c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d785c:	b508      	push	{r3, lr}
      { delete this; }
   d785e:	b108      	cbz	r0, d7864 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7860:	f7ff fff5 	bl	d784e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7864:	bd08      	pop	{r3, pc}

000d7866 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7866:	2200      	movs	r2, #0
   d7868:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d786a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d786c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d7870:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7872:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7876:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7878:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d787a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d787c:	680c      	ldr	r4, [r1, #0]
   d787e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7880:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d7882:	bd10      	pop	{r4, pc}

000d7884 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7884:	b510      	push	{r4, lr}
   d7886:	4604      	mov	r4, r0
    free((void*)msg_);
   d7888:	6800      	ldr	r0, [r0, #0]
   d788a:	f7ff fe11 	bl	d74b0 <free>
}
   d788e:	4620      	mov	r0, r4
   d7890:	bd10      	pop	{r4, pc}

000d7892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7892:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7894:	68c4      	ldr	r4, [r0, #12]
   d7896:	b1f4      	cbz	r4, d78d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7898:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d789a:	2b02      	cmp	r3, #2
   d789c:	d103      	bne.n	d78a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d789e:	f104 000c 	add.w	r0, r4, #12
   d78a2:	f7ff ffef 	bl	d7884 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d78a6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d78a8:	b135      	cbz	r5, d78b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78aa:	4628      	mov	r0, r5
   d78ac:	f7fe ffdd 	bl	d686a <_ZNSt14_Function_baseD1Ev>
   d78b0:	2110      	movs	r1, #16
   d78b2:	4628      	mov	r0, r5
   d78b4:	f001 fd2b 	bl	d930e <_ZdlPvj>
   d78b8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d78ba:	b135      	cbz	r5, d78ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d78bc:	4628      	mov	r0, r5
   d78be:	f7fe ffd4 	bl	d686a <_ZNSt14_Function_baseD1Ev>
   d78c2:	2110      	movs	r1, #16
   d78c4:	4628      	mov	r0, r5
   d78c6:	f001 fd22 	bl	d930e <_ZdlPvj>
   d78ca:	4620      	mov	r0, r4
   d78cc:	2114      	movs	r1, #20
   d78ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d78d2:	f001 bd1c 	b.w	d930e <_ZdlPvj>
   d78d6:	bd38      	pop	{r3, r4, r5, pc}

000d78d8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d78d8:	b510      	push	{r4, lr}
   d78da:	b088      	sub	sp, #32
   d78dc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d78de:	4668      	mov	r0, sp
   d78e0:	f000 ff24 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d78e4:	4669      	mov	r1, sp
   d78e6:	a804      	add	r0, sp, #16
   d78e8:	f000 ff42 	bl	d8770 <_ZN6StringC1ERKS_>
   d78ec:	a804      	add	r0, sp, #16
   d78ee:	47a0      	blx	r4
   d78f0:	4604      	mov	r4, r0
   d78f2:	a804      	add	r0, sp, #16
   d78f4:	f000 fed3 	bl	d869e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d78f8:	4668      	mov	r0, sp
   d78fa:	f000 fed0 	bl	d869e <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d78fe:	4620      	mov	r0, r4
   d7900:	b008      	add	sp, #32
   d7902:	bd10      	pop	{r4, pc}

000d7904 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7904:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7906:	2410      	movs	r4, #16
   d7908:	b085      	sub	sp, #20
   d790a:	4607      	mov	r7, r0
   d790c:	460e      	mov	r6, r1
   d790e:	4615      	mov	r5, r2
   d7910:	2100      	movs	r1, #0
   d7912:	4622      	mov	r2, r4
   d7914:	4668      	mov	r0, sp
   d7916:	f002 fcb9 	bl	da28c <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d791a:	2200      	movs	r2, #0
   d791c:	4669      	mov	r1, sp
   d791e:	4610      	mov	r0, r2
         size = sizeof(*this);
   d7920:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d7924:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d7926:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d7928:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d792a:	f7ff fd09 	bl	d7340 <spark_function>
}
   d792e:	b005      	add	sp, #20
   d7930:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7932 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7932:	b513      	push	{r0, r1, r4, lr}
   d7934:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7936:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d793a:	2300      	movs	r3, #0
   d793c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d793e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7940:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7942:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7944:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7946:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7948:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d794a:	f7ff fe27 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d794e:	4620      	mov	r0, r4
   d7950:	b002      	add	sp, #8
   d7952:	bd10      	pop	{r4, pc}

000d7954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7956:	460c      	mov	r4, r1
   d7958:	ad02      	add	r5, sp, #8
   d795a:	f854 3b04 	ldr.w	r3, [r4], #4
   d795e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7962:	4606      	mov	r6, r0
   d7964:	460f      	mov	r7, r1
   d7966:	a801      	add	r0, sp, #4
   d7968:	4621      	mov	r1, r4
   d796a:	f7ff fe10 	bl	d758e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d796e:	4629      	mov	r1, r5
   d7970:	4630      	mov	r0, r6
   d7972:	f7ff ffde 	bl	d7932 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7976:	a801      	add	r0, sp, #4
   d7978:	f7ff fe10 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d797c:	4620      	mov	r0, r4
   d797e:	f7ff fe0d 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7982:	4638      	mov	r0, r7
   d7984:	2108      	movs	r1, #8
   d7986:	f001 fcc2 	bl	d930e <_ZdlPvj>
        return p;
    }
   d798a:	4630      	mov	r0, r6
   d798c:	b003      	add	sp, #12
   d798e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7990 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7990:	b513      	push	{r0, r1, r4, lr}
   d7992:	460b      	mov	r3, r1
   d7994:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7996:	c803      	ldmia	r0, {r0, r1}
   d7998:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d799c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d79a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d79a4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d79a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d79ac:	b002      	add	sp, #8
   d79ae:	bd10      	pop	{r4, pc}

000d79b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d79b0:	b538      	push	{r3, r4, r5, lr}
   d79b2:	2300      	movs	r3, #0
   d79b4:	4604      	mov	r4, r0
   d79b6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d79b8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d79ba:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d79bc:	f7fc fb6d 	bl	d409a <_Znwj>
   d79c0:	b128      	cbz	r0, d79ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d79c2:	2301      	movs	r3, #1
   d79c4:	6043      	str	r3, [r0, #4]
   d79c6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d79c8:	4b02      	ldr	r3, [pc, #8]	; (d79d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d79ca:	6003      	str	r3, [r0, #0]
   d79cc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d79ce:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d79d0:	4620      	mov	r0, r4
   d79d2:	bd38      	pop	{r3, r4, r5, pc}
   d79d4:	000dc244 	.word	0x000dc244

000d79d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d79d8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d79da:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d79dc:	b90a      	cbnz	r2, d79e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d79de:	f001 fcb2 	bl	d9346 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d79e2:	68c3      	ldr	r3, [r0, #12]
    }
   d79e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d79e8:	4718      	bx	r3

000d79ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d79ea:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d79ec:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d79ee:	f100 0110 	add.w	r1, r0, #16
   d79f2:	f7ff fff1 	bl	d79d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d79f6:	bd08      	pop	{r3, pc}

000d79f8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d79f8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d79fa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d79fc:	b90a      	cbnz	r2, d7a02 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d79fe:	f001 fca2 	bl	d9346 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a02:	68c3      	ldr	r3, [r0, #12]
    }
   d7a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a08:	4718      	bx	r3

000d7a0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7a0a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7a0c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7a0e:	f100 0110 	add.w	r1, r0, #16
   d7a12:	f7ff fff1 	bl	d79f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7a16:	bd08      	pop	{r3, pc}

000d7a18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a18:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7a1a:	2300      	movs	r3, #0
   d7a1c:	6083      	str	r3, [r0, #8]
   d7a1e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7a20:	4604      	mov	r4, r0
   d7a22:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7a24:	b12b      	cbz	r3, d7a32 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7a26:	2202      	movs	r2, #2
   d7a28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7a2a:	68eb      	ldr	r3, [r5, #12]
   d7a2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7a2e:	68ab      	ldr	r3, [r5, #8]
   d7a30:	60a3      	str	r3, [r4, #8]
	}
    }
   d7a32:	4620      	mov	r0, r4
   d7a34:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7a3a:	b089      	sub	sp, #36	; 0x24
   d7a3c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7a3e:	4668      	mov	r0, sp
   d7a40:	f7ff ff11 	bl	d7866 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7a44:	2300      	movs	r3, #0
   d7a46:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7a4a:	f04f 0202 	mov.w	r2, #2
   d7a4e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7a52:	2b00      	cmp	r3, #0
   d7a54:	d103      	bne.n	d7a5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7a56:	e8c4 2f41 	strexb	r1, r2, [r4]
   d7a5a:	2900      	cmp	r1, #0
   d7a5c:	d1f7      	bne.n	d7a4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7a5e:	d002      	beq.n	d7a66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7a60:	f88d 3008 	strb.w	r3, [sp, #8]
   d7a64:	e063      	b.n	d7b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7a66:	f114 050c 	adds.w	r5, r4, #12
   d7a6a:	d003      	beq.n	d7a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7a6c:	4669      	mov	r1, sp
   d7a6e:	4628      	mov	r0, r5
   d7a70:	f7ff fef9 	bl	d7866 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7a74:	f3bf 8f5f 	dmb	sy
   d7a78:	2301      	movs	r3, #1
   d7a7a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7a7c:	2000      	movs	r0, #0
   d7a7e:	f104 0308 	add.w	r3, r4, #8
   d7a82:	f3bf 8f5f 	dmb	sy
   d7a86:	e853 6f00 	ldrex	r6, [r3]
   d7a8a:	e843 0200 	strex	r2, r0, [r3]
   d7a8e:	2a00      	cmp	r2, #0
   d7a90:	d1f9      	bne.n	d7a86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7a92:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7a96:	2e00      	cmp	r6, #0
   d7a98:	d049      	beq.n	d7b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7a9a:	f7ff fc01 	bl	d72a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7a9e:	b120      	cbz	r0, d7aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7aa0:	4629      	mov	r1, r5
   d7aa2:	4630      	mov	r0, r6
   d7aa4:	f7ff ff98 	bl	d79d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7aa8:	e03a      	b.n	d7b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7aaa:	4631      	mov	r1, r6
   d7aac:	a802      	add	r0, sp, #8
   d7aae:	f7ff ffb3 	bl	d7a18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7ab2:	68e0      	ldr	r0, [r4, #12]
   d7ab4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7ab8:	b108      	cbz	r0, d7abe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d7aba:	f002 fe77 	bl	da7ac <strdup>
   d7abe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7ac0:	2010      	movs	r0, #16
   d7ac2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7ac6:	f7fc fae8 	bl	d409a <_Znwj>
   d7aca:	4605      	mov	r5, r0
   d7acc:	b1e8      	cbz	r0, d7b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ace:	2700      	movs	r7, #0
   d7ad0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7ad2:	2018      	movs	r0, #24
   d7ad4:	f7fc fae1 	bl	d409a <_Znwj>
   d7ad8:	4604      	mov	r4, r0
   d7ada:	b188      	cbz	r0, d7b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7adc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7ade:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7ae0:	a802      	add	r0, sp, #8
   d7ae2:	f7ff ff55 	bl	d7990 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ae6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7ae8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7aea:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aec:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7aee:	9204      	str	r2, [sp, #16]
   d7af0:	a906      	add	r1, sp, #24
   d7af2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7af4:	60e3      	str	r3, [r4, #12]
   d7af6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7afa:	9205      	str	r2, [sp, #20]
   d7afc:	f7ff feb3 	bl	d7866 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7b00:	4b0d      	ldr	r3, [pc, #52]	; (d7b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7b02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7b04:	4b0d      	ldr	r3, [pc, #52]	; (d7b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b06:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7b08:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d7b0a:	a806      	add	r0, sp, #24
   d7b0c:	f7ff feba 	bl	d7884 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b10:	a802      	add	r0, sp, #8
   d7b12:	f7fe feaa 	bl	d686a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7b16:	2200      	movs	r2, #0
   d7b18:	4629      	mov	r1, r5
   d7b1a:	4809      	ldr	r0, [pc, #36]	; (d7b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7b1c:	f7ff fbc8 	bl	d72b0 <application_thread_invoke>
   d7b20:	4630      	mov	r0, r6
   d7b22:	f7fe fea2 	bl	d686a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7b26:	2110      	movs	r1, #16
   d7b28:	4630      	mov	r0, r6
   d7b2a:	f001 fbf0 	bl	d930e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7b2e:	4668      	mov	r0, sp
   d7b30:	f7ff fea8 	bl	d7884 <_ZN8particle5ErrorD1Ev>
    }
   d7b34:	b009      	add	sp, #36	; 0x24
   d7b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7b38:	000d79eb 	.word	0x000d79eb
   d7b3c:	000d7c61 	.word	0x000d7c61
   d7b40:	000d7537 	.word	0x000d7537

000d7b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b48:	b08b      	sub	sp, #44	; 0x2c
   d7b4a:	4606      	mov	r6, r0
   d7b4c:	460f      	mov	r7, r1
   d7b4e:	4690      	mov	r8, r2
   d7b50:	4699      	mov	r9, r3
   d7b52:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b56:	f7ff fc13 	bl	d7380 <spark_cloud_flag_connected>
   d7b5a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7b5c:	4683      	mov	fp, r0
   d7b5e:	bb30      	cbnz	r0, d7bae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7b60:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7b64:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7b66:	a905      	add	r1, sp, #20
   d7b68:	4628      	mov	r0, r5
   d7b6a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7b6e:	f7ff fe7a 	bl	d7866 <_ZN8particle5ErrorC1EOS0_>
   d7b72:	2014      	movs	r0, #20
   d7b74:	f7fc fa91 	bl	d409a <_Znwj>
   d7b78:	4604      	mov	r4, r0
   d7b7a:	b158      	cbz	r0, d7b94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7b7c:	2302      	movs	r3, #2
   d7b7e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7b80:	2301      	movs	r3, #1
   d7b82:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7b84:	f8c0 b004 	str.w	fp, [r0, #4]
   d7b88:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d7b8c:	4629      	mov	r1, r5
   d7b8e:	300c      	adds	r0, #12
   d7b90:	f7ff fe69 	bl	d7866 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7b94:	4630      	mov	r0, r6
   d7b96:	4621      	mov	r1, r4
   d7b98:	f840 4b04 	str.w	r4, [r0], #4
   d7b9c:	f7ff ff08 	bl	d79b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7ba0:	4628      	mov	r0, r5
   d7ba2:	f7ff fe6f 	bl	d7884 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7ba6:	a805      	add	r0, sp, #20
   d7ba8:	f7ff fe6c 	bl	d7884 <_ZN8particle5ErrorD1Ev>
   d7bac:	e052      	b.n	d7c54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7bae:	2400      	movs	r4, #0
   d7bb0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7bb2:	2014      	movs	r0, #20
   d7bb4:	606c      	str	r4, [r5, #4]
   d7bb6:	60ac      	str	r4, [r5, #8]
   d7bb8:	9307      	str	r3, [sp, #28]
   d7bba:	f7fc fa6e 	bl	d409a <_Znwj>
   d7bbe:	4601      	mov	r1, r0
   d7bc0:	b118      	cbz	r0, d7bca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d7bc2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7bc4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7bc6:	6044      	str	r4, [r0, #4]
   d7bc8:	6084      	str	r4, [r0, #8]
   d7bca:	a804      	add	r0, sp, #16
   d7bcc:	9103      	str	r1, [sp, #12]
   d7bce:	f7ff feef 	bl	d79b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7bd2:	4b22      	ldr	r3, [pc, #136]	; (d7c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d7bd4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7bd6:	2008      	movs	r0, #8
   d7bd8:	f7fc fa5f 	bl	d409a <_Znwj>
   d7bdc:	4604      	mov	r4, r0
   d7bde:	b128      	cbz	r0, d7bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7be0:	9b03      	ldr	r3, [sp, #12]
   d7be2:	f840 3b04 	str.w	r3, [r0], #4
   d7be6:	a904      	add	r1, sp, #16
   d7be8:	f7ff fcd1 	bl	d758e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7bec:	9500      	str	r5, [sp, #0]
   d7bee:	fa5f f38a 	uxtb.w	r3, sl
   d7bf2:	464a      	mov	r2, r9
   d7bf4:	4641      	mov	r1, r8
   d7bf6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7bf8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7bfa:	f7ff fbd1 	bl	d73a0 <spark_send_event>
   d7bfe:	b920      	cbnz	r0, d7c0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7c00:	9b03      	ldr	r3, [sp, #12]
   d7c02:	785b      	ldrb	r3, [r3, #1]
   d7c04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7c08:	b183      	cbz	r3, d7c2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7c0a:	9b03      	ldr	r3, [sp, #12]
   d7c0c:	9305      	str	r3, [sp, #20]
   d7c0e:	a904      	add	r1, sp, #16
   d7c10:	a806      	add	r0, sp, #24
   d7c12:	f7ff fcbc 	bl	d758e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7c16:	a905      	add	r1, sp, #20
   d7c18:	4630      	mov	r0, r6
   d7c1a:	f7ff fe8a 	bl	d7932 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7c1e:	a806      	add	r0, sp, #24
   d7c20:	f7ff fcbc 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c24:	a804      	add	r0, sp, #16
   d7c26:	f7ff fcb9 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c2a:	e013      	b.n	d7c54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7c2c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7c30:	a905      	add	r1, sp, #20
   d7c32:	a803      	add	r0, sp, #12
   d7c34:	9205      	str	r2, [sp, #20]
   d7c36:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7c3a:	f7ff fefd 	bl	d7a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7c3e:	a805      	add	r0, sp, #20
   d7c40:	f7ff fe20 	bl	d7884 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7c44:	a805      	add	r0, sp, #20
   d7c46:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7c48:	f7ff fe84 	bl	d7954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7c4c:	a806      	add	r0, sp, #24
   d7c4e:	f7ff fca5 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c52:	e7da      	b.n	d7c0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7c54:	4630      	mov	r0, r6
   d7c56:	b00b      	add	sp, #44	; 0x2c
   d7c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c5c:	000d7dd1 	.word	0x000d7dd1

000d7c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7c60:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c64:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7c66:	d006      	beq.n	d7c76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7c68:	2a03      	cmp	r2, #3
   d7c6a:	d017      	beq.n	d7c9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7c6c:	2a01      	cmp	r2, #1
   d7c6e:	d122      	bne.n	d7cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7c70:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7c72:	6003      	str	r3, [r0, #0]
	      break;
   d7c74:	e01f      	b.n	d7cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7c76:	2018      	movs	r0, #24
   d7c78:	680e      	ldr	r6, [r1, #0]
   d7c7a:	f7fc fa0e 	bl	d409a <_Znwj>
   d7c7e:	4605      	mov	r5, r0
   d7c80:	b150      	cbz	r0, d7c98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7c82:	4631      	mov	r1, r6
   d7c84:	f7ff fec8 	bl	d7a18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7c88:	6930      	ldr	r0, [r6, #16]
   d7c8a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7c8e:	b108      	cbz	r0, d7c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7c90:	f002 fd8c 	bl	da7ac <strdup>
   d7c94:	6128      	str	r0, [r5, #16]
   d7c96:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7c98:	6025      	str	r5, [r4, #0]
   d7c9a:	e00c      	b.n	d7cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7c9c:	6804      	ldr	r4, [r0, #0]
   d7c9e:	b154      	cbz	r4, d7cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7ca0:	f104 0010 	add.w	r0, r4, #16
   d7ca4:	f7ff fdee 	bl	d7884 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ca8:	4620      	mov	r0, r4
   d7caa:	f7fe fdde 	bl	d686a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7cae:	2118      	movs	r1, #24
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	f001 fb2c 	bl	d930e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7cb6:	2000      	movs	r0, #0
   d7cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cba <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7cba:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7cbc:	2300      	movs	r3, #0
   d7cbe:	6083      	str	r3, [r0, #8]
   d7cc0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7cc2:	4604      	mov	r4, r0
   d7cc4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7cc6:	b12b      	cbz	r3, d7cd4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7cc8:	2202      	movs	r2, #2
   d7cca:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7ccc:	68eb      	ldr	r3, [r5, #12]
   d7cce:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7cd0:	68ab      	ldr	r3, [r5, #8]
   d7cd2:	60a3      	str	r3, [r4, #8]
	}
    }
   d7cd4:	4620      	mov	r0, r4
   d7cd6:	bd38      	pop	{r3, r4, r5, pc}

000d7cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7cd8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7cda:	b570      	push	{r4, r5, r6, lr}
   d7cdc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7cde:	d006      	beq.n	d7cee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7ce0:	2a03      	cmp	r2, #3
   d7ce2:	d011      	beq.n	d7d08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7ce4:	2a01      	cmp	r2, #1
   d7ce6:	d118      	bne.n	d7d1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7ce8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7cea:	6003      	str	r3, [r0, #0]
	      break;
   d7cec:	e015      	b.n	d7d1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7cee:	2014      	movs	r0, #20
   d7cf0:	680e      	ldr	r6, [r1, #0]
   d7cf2:	f7fc f9d2 	bl	d409a <_Znwj>
   d7cf6:	4605      	mov	r5, r0
   d7cf8:	b120      	cbz	r0, d7d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7cfa:	4631      	mov	r1, r6
   d7cfc:	f7ff ffdd 	bl	d7cba <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7d00:	7c33      	ldrb	r3, [r6, #16]
   d7d02:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7d04:	6025      	str	r5, [r4, #0]
   d7d06:	e008      	b.n	d7d1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7d08:	6804      	ldr	r4, [r0, #0]
   d7d0a:	b134      	cbz	r4, d7d1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7d0c:	4620      	mov	r0, r4
   d7d0e:	f7fe fdac 	bl	d686a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7d12:	2114      	movs	r1, #20
   d7d14:	4620      	mov	r0, r4
   d7d16:	f001 fafa 	bl	d930e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7d1a:	2000      	movs	r0, #0
   d7d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7d20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7d20:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7d22:	2300      	movs	r3, #0
   d7d24:	b087      	sub	sp, #28
   d7d26:	460c      	mov	r4, r1
   d7d28:	f3bf 8f5f 	dmb	sy
   d7d2c:	e850 6f00 	ldrex	r6, [r0]
   d7d30:	e840 3200 	strex	r2, r3, [r0]
   d7d34:	2a00      	cmp	r2, #0
   d7d36:	d1f9      	bne.n	d7d2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7d38:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7d3c:	2e00      	cmp	r6, #0
   d7d3e:	d03f      	beq.n	d7dc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7d40:	4618      	mov	r0, r3
   d7d42:	f7ff faad 	bl	d72a0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7d46:	4607      	mov	r7, r0
   d7d48:	b120      	cbz	r0, d7d54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7d4a:	4621      	mov	r1, r4
   d7d4c:	4630      	mov	r0, r6
   d7d4e:	f7ff fe53 	bl	d79f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7d52:	e02e      	b.n	d7db2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7d54:	4631      	mov	r1, r6
   d7d56:	a801      	add	r0, sp, #4
   d7d58:	f7ff ffaf 	bl	d7cba <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d5c:	7823      	ldrb	r3, [r4, #0]
   d7d5e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7d62:	2010      	movs	r0, #16
   d7d64:	f7fc f999 	bl	d409a <_Znwj>
   d7d68:	4605      	mov	r5, r0
   d7d6a:	b1d0      	cbz	r0, d7da2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d6c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d6e:	2014      	movs	r0, #20
   d7d70:	f7fc f993 	bl	d409a <_Znwj>
   d7d74:	4604      	mov	r4, r0
   d7d76:	b178      	cbz	r0, d7d98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7d78:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7d7a:	4601      	mov	r1, r0
   d7d7c:	a801      	add	r0, sp, #4
   d7d7e:	f7ff fe07 	bl	d7990 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d82:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7d84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d88:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7d8a:	9203      	str	r2, [sp, #12]
   d7d8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d8e:	60e3      	str	r3, [r4, #12]
   d7d90:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7d94:	9204      	str	r2, [sp, #16]
   d7d96:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7d98:	4b0a      	ldr	r3, [pc, #40]	; (d7dc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7d9a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7d9c:	4b0a      	ldr	r3, [pc, #40]	; (d7dc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d9e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7da0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7da2:	a801      	add	r0, sp, #4
   d7da4:	f7fe fd61 	bl	d686a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7da8:	2200      	movs	r2, #0
   d7daa:	4629      	mov	r1, r5
   d7dac:	4807      	ldr	r0, [pc, #28]	; (d7dcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7dae:	f7ff fa7f 	bl	d72b0 <application_thread_invoke>
   d7db2:	4630      	mov	r0, r6
   d7db4:	f7fe fd59 	bl	d686a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7db8:	2110      	movs	r1, #16
   d7dba:	4630      	mov	r0, r6
   d7dbc:	f001 faa7 	bl	d930e <_ZdlPvj>
        }
    }
   d7dc0:	b007      	add	sp, #28
   d7dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7dc4:	000d7a0b 	.word	0x000d7a0b
   d7dc8:	000d7cd9 	.word	0x000d7cd9
   d7dcc:	000d7537 	.word	0x000d7537

000d7dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7dd0:	b530      	push	{r4, r5, lr}
   d7dd2:	b085      	sub	sp, #20
   d7dd4:	4604      	mov	r4, r0
   d7dd6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7dd8:	4668      	mov	r0, sp
   d7dda:	4611      	mov	r1, r2
   d7ddc:	f7ff fdba 	bl	d7954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7de0:	b17c      	cbz	r4, d7e02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7de2:	b224      	sxth	r4, r4
   d7de4:	4628      	mov	r0, r5
   d7de6:	b10d      	cbz	r5, d7dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7de8:	f002 fce0 	bl	da7ac <strdup>
   d7dec:	9002      	str	r0, [sp, #8]
   d7dee:	a902      	add	r1, sp, #8
   d7df0:	4668      	mov	r0, sp
   d7df2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7df6:	f7ff fe1f 	bl	d7a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7dfa:	a802      	add	r0, sp, #8
   d7dfc:	f7ff fd42 	bl	d7884 <_ZN8particle5ErrorD1Ev>
   d7e00:	e01d      	b.n	d7e3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7e02:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7e04:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7e08:	f04f 0201 	mov.w	r2, #1
   d7e0c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7e10:	42a3      	cmp	r3, r4
   d7e12:	d103      	bne.n	d7e1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7e14:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7e18:	2900      	cmp	r1, #0
   d7e1a:	d1f7      	bne.n	d7e0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7e1c:	d002      	beq.n	d7e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7e1e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7e22:	e00c      	b.n	d7e3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7e24:	f110 010c 	adds.w	r1, r0, #12
   d7e28:	f04f 0301 	mov.w	r3, #1
   d7e2c:	bf18      	it	ne
   d7e2e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7e30:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7e34:	3004      	adds	r0, #4
   d7e36:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7e3a:	f7ff ff71 	bl	d7d20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7e3e:	a801      	add	r0, sp, #4
   d7e40:	f7ff fbac 	bl	d759c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7e44:	b005      	add	sp, #20
   d7e46:	bd30      	pop	{r4, r5, pc}

000d7e48 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e48:	2200      	movs	r2, #0
   d7e4a:	4611      	mov	r1, r2
   d7e4c:	6840      	ldr	r0, [r0, #4]
   d7e4e:	f7ff bb0f 	b.w	d7470 <network_listening>

000d7e52 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7e52:	2200      	movs	r2, #0
   d7e54:	4611      	mov	r1, r2
   d7e56:	6840      	ldr	r0, [r0, #4]
   d7e58:	f7ff bb1a 	b.w	d7490 <network_get_listen_timeout>

000d7e5c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7e5c:	2200      	movs	r2, #0
   d7e5e:	6840      	ldr	r0, [r0, #4]
   d7e60:	f7ff bb0e 	b.w	d7480 <network_set_listen_timeout>

000d7e64 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e64:	2200      	movs	r2, #0
   d7e66:	f081 0101 	eor.w	r1, r1, #1
   d7e6a:	6840      	ldr	r0, [r0, #4]
   d7e6c:	f7ff baf8 	b.w	d7460 <network_listen>

000d7e70 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7e70:	2300      	movs	r3, #0
   d7e72:	461a      	mov	r2, r3
   d7e74:	4619      	mov	r1, r3
   d7e76:	6840      	ldr	r0, [r0, #4]
   d7e78:	f7ff baea 	b.w	d7450 <network_off>

000d7e7c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7e7c:	2300      	movs	r3, #0
   d7e7e:	461a      	mov	r2, r3
   d7e80:	4619      	mov	r1, r3
   d7e82:	6840      	ldr	r0, [r0, #4]
   d7e84:	f7ff badc 	b.w	d7440 <network_on>

000d7e88 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7e88:	2200      	movs	r2, #0
   d7e8a:	4611      	mov	r1, r2
   d7e8c:	6840      	ldr	r0, [r0, #4]
   d7e8e:	f7ff bacf 	b.w	d7430 <network_ready>

000d7e92 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7e92:	2200      	movs	r2, #0
   d7e94:	4611      	mov	r1, r2
   d7e96:	6840      	ldr	r0, [r0, #4]
   d7e98:	f7ff baba 	b.w	d7410 <network_connecting>

000d7e9c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e9c:	2200      	movs	r2, #0
   d7e9e:	2102      	movs	r1, #2
   d7ea0:	6840      	ldr	r0, [r0, #4]
   d7ea2:	f7ff babd 	b.w	d7420 <network_disconnect>

000d7ea6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7ea6:	2300      	movs	r3, #0
   d7ea8:	461a      	mov	r2, r3
   d7eaa:	6840      	ldr	r0, [r0, #4]
   d7eac:	f7ff baa8 	b.w	d7400 <network_connect>

000d7eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7eb0:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7eb2:	2203      	movs	r2, #3
   d7eb4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7eb6:	4a02      	ldr	r2, [pc, #8]	; (d7ec0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7eb8:	601a      	str	r2, [r3, #0]
   d7eba:	4770      	bx	lr
   d7ebc:	2003e1d8 	.word	0x2003e1d8
   d7ec0:	000dc260 	.word	0x000dc260

000d7ec4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7ec4:	4770      	bx	lr

000d7ec6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ec8:	4606      	mov	r6, r0
   d7eca:	4615      	mov	r5, r2
   d7ecc:	460c      	mov	r4, r1
   d7ece:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7ed0:	42bc      	cmp	r4, r7
   d7ed2:	d006      	beq.n	d7ee2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7ed4:	6833      	ldr	r3, [r6, #0]
   d7ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7eda:	689b      	ldr	r3, [r3, #8]
   d7edc:	4630      	mov	r0, r6
   d7ede:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7ee0:	e7f6      	b.n	d7ed0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7ee2:	4628      	mov	r0, r5
   d7ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ee6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	7c00      	ldrb	r0, [r0, #16]
   d7eea:	f7ff b8a7 	b.w	d703c <HAL_I2C_Write_Data>

000d7eee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7eee:	2100      	movs	r1, #0
   d7ef0:	7c00      	ldrb	r0, [r0, #16]
   d7ef2:	f7ff b8ab 	b.w	d704c <HAL_I2C_Available_Data>

000d7ef6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7ef6:	2100      	movs	r1, #0
   d7ef8:	7c00      	ldrb	r0, [r0, #16]
   d7efa:	f7ff b8af 	b.w	d705c <HAL_I2C_Read_Data>

000d7efe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7efe:	2100      	movs	r1, #0
   d7f00:	7c00      	ldrb	r0, [r0, #16]
   d7f02:	f7ff b8b3 	b.w	d706c <HAL_I2C_Peek_Data>

000d7f06 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7f06:	2100      	movs	r1, #0
   d7f08:	7c00      	ldrb	r0, [r0, #16]
   d7f0a:	f7ff b8b7 	b.w	d707c <HAL_I2C_Flush_Data>

000d7f0e <_ZN7TwoWireD0Ev>:
   d7f0e:	b510      	push	{r4, lr}
   d7f10:	2114      	movs	r1, #20
   d7f12:	4604      	mov	r4, r0
   d7f14:	f001 f9fb 	bl	d930e <_ZdlPvj>
   d7f18:	4620      	mov	r0, r4
   d7f1a:	bd10      	pop	{r4, pc}

000d7f1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7f1c:	b510      	push	{r4, lr}
   d7f1e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7f20:	2300      	movs	r3, #0
   d7f22:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7f28:	60a3      	str	r3, [r4, #8]
   d7f2a:	4b04      	ldr	r3, [pc, #16]	; (d7f3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7f2c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7f2e:	4608      	mov	r0, r1
   d7f30:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7f32:	4611      	mov	r1, r2
   d7f34:	f7ff f8b2 	bl	d709c <HAL_I2C_Init>
}
   d7f38:	4620      	mov	r0, r4
   d7f3a:	bd10      	pop	{r4, pc}
   d7f3c:	000dc294 	.word	0x000dc294

000d7f40 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7f40:	2300      	movs	r3, #0
   d7f42:	461a      	mov	r2, r3
   d7f44:	4619      	mov	r1, r3
   d7f46:	7c00      	ldrb	r0, [r0, #16]
   d7f48:	f7ff b860 	b.w	d700c <HAL_I2C_Begin>

000d7f4c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7f4c:	b570      	push	{r4, r5, r6, lr}
   d7f4e:	460c      	mov	r4, r1
   d7f50:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7f52:	2514      	movs	r5, #20
   d7f54:	4606      	mov	r6, r0
   d7f56:	462a      	mov	r2, r5
   d7f58:	2100      	movs	r1, #0
   d7f5a:	a801      	add	r0, sp, #4
   d7f5c:	f002 f996 	bl	da28c <memset>
   d7f60:	7823      	ldrb	r3, [r4, #0]
   d7f62:	f88d 3008 	strb.w	r3, [sp, #8]
   d7f66:	6863      	ldr	r3, [r4, #4]
   d7f68:	9303      	str	r3, [sp, #12]
   d7f6a:	68e3      	ldr	r3, [r4, #12]
   d7f6c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7f6e:	2200      	movs	r2, #0
   d7f70:	7a23      	ldrb	r3, [r4, #8]
   d7f72:	7c30      	ldrb	r0, [r6, #16]
   d7f74:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7f78:	a901      	add	r1, sp, #4
   d7f7a:	9305      	str	r3, [sp, #20]
   d7f7c:	f7ff f8a6 	bl	d70cc <HAL_I2C_Request_Data_Ex>
}
   d7f80:	b006      	add	sp, #24
   d7f82:	bd70      	pop	{r4, r5, r6, pc}

000d7f84 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7f86:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7f88:	f88d 1000 	strb.w	r1, [sp]
   d7f8c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7f90:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7f92:	bf18      	it	ne
   d7f94:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7f96:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7f98:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7f9a:	f88d 3008 	strb.w	r3, [sp, #8]
   d7f9e:	f7ff ffd5 	bl	d7f4c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7fa2:	b005      	add	sp, #20
   d7fa4:	f85d fb04 	ldr.w	pc, [sp], #4

000d7fa8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7fa8:	2200      	movs	r2, #0
   d7faa:	7c00      	ldrb	r0, [r0, #16]
   d7fac:	f7ff b836 	b.w	d701c <HAL_I2C_Begin_Transmission>

000d7fb0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7fb0:	b2c9      	uxtb	r1, r1
   d7fb2:	f7ff bff9 	b.w	d7fa8 <_ZN7TwoWire17beginTransmissionEh>

000d7fb6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7fb6:	2200      	movs	r2, #0
   d7fb8:	7c00      	ldrb	r0, [r0, #16]
   d7fba:	f7ff b837 	b.w	d702c <HAL_I2C_End_Transmission>

000d7fbe <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7fbe:	2100      	movs	r1, #0
   d7fc0:	7c00      	ldrb	r0, [r0, #16]
   d7fc2:	f7ff b863 	b.w	d708c <HAL_I2C_Is_Enabled>

000d7fc6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7fc6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d7fc8:	2100      	movs	r1, #0
   d7fca:	7c00      	ldrb	r0, [r0, #16]
   d7fcc:	f7ff f86e 	bl	d70ac <HAL_I2C_Acquire>
}
   d7fd0:	fab0 f080 	clz	r0, r0
   d7fd4:	0940      	lsrs	r0, r0, #5
   d7fd6:	bd08      	pop	{r3, pc}

000d7fd8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7fd8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d7fda:	2100      	movs	r1, #0
   d7fdc:	7c00      	ldrb	r0, [r0, #16]
   d7fde:	f7ff f86d 	bl	d70bc <HAL_I2C_Release>
}
   d7fe2:	fab0 f080 	clz	r0, r0
   d7fe6:	0940      	lsrs	r0, r0, #5
   d7fe8:	bd08      	pop	{r3, pc}

000d7fea <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7fea:	4700      	bx	r0

000d7fec <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7fee:	b085      	sub	sp, #20
   d7ff0:	461c      	mov	r4, r3
   d7ff2:	460e      	mov	r6, r1
   d7ff4:	4617      	mov	r7, r2
   d7ff6:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7ff8:	f7fe fff8 	bl	d6fec <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7ffc:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7ffe:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8000:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8004:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8006:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d800a:	bfa5      	ittet	ge
   d800c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8010:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8014:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8016:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8018:	9300      	str	r3, [sp, #0]
   d801a:	4632      	mov	r2, r6
   d801c:	463b      	mov	r3, r7
   d801e:	4906      	ldr	r1, [pc, #24]	; (d8038 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8020:	bfa8      	it	ge
   d8022:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8026:	4628      	mov	r0, r5
   d8028:	f7fe ffd8 	bl	d6fdc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d802c:	fab0 f080 	clz	r0, r0
   d8030:	0940      	lsrs	r0, r0, #5
   d8032:	b005      	add	sp, #20
   d8034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8036:	bf00      	nop
   d8038:	000d7feb 	.word	0x000d7feb

000d803c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d803e:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d8040:	f7fe ffd4 	bl	d6fec <HAL_Interrupts_Detach>
   d8044:	4607      	mov	r7, r0
   d8046:	b968      	cbnz	r0, d8064 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
   d8048:	4d08      	ldr	r5, [pc, #32]	; (d806c <_Z15detachInterruptt+0x30>)
   d804a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
   d804e:	b15c      	cbz	r4, d8068 <_Z15detachInterruptt+0x2c>
   d8050:	4620      	mov	r0, r4
   d8052:	f7fe fc0a 	bl	d686a <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d8056:	2110      	movs	r1, #16
   d8058:	4620      	mov	r0, r4
   d805a:	f001 f958 	bl	d930e <_ZdlPvj>
        handlers[pin] = nullptr;
   d805e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
   d8062:	e001      	b.n	d8068 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
   d8064:	2000      	movs	r0, #0
   d8066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
   d8068:	2001      	movs	r0, #1
}
   d806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d806c:	2003e1e0 	.word	0x2003e1e0

000d8070 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8070:	4770      	bx	lr

000d8072 <_ZN9IPAddressD0Ev>:
   d8072:	b510      	push	{r4, lr}
   d8074:	2118      	movs	r1, #24
   d8076:	4604      	mov	r4, r0
   d8078:	f001 f949 	bl	d930e <_ZdlPvj>
   d807c:	4620      	mov	r0, r4
   d807e:	bd10      	pop	{r4, pc}

000d8080 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8080:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8082:	7d03      	ldrb	r3, [r0, #20]
   d8084:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8086:	b08d      	sub	sp, #52	; 0x34
   d8088:	460e      	mov	r6, r1
   d808a:	f100 0704 	add.w	r7, r0, #4
   d808e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8092:	d002      	beq.n	d809a <_ZNK9IPAddress7printToER5Print+0x1a>
   d8094:	f100 0508 	add.w	r5, r0, #8
   d8098:	e018      	b.n	d80cc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d809a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d809c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d809e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d80a2:	232f      	movs	r3, #47	; 0x2f
   d80a4:	462a      	mov	r2, r5
   d80a6:	200a      	movs	r0, #10
   d80a8:	f7ff f818 	bl	d70dc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d80ac:	4628      	mov	r0, r5
   d80ae:	f003 f8ad 	bl	db20c <strlen>
   d80b2:	6833      	ldr	r3, [r6, #0]
   d80b4:	4602      	mov	r2, r0
   d80b6:	68db      	ldr	r3, [r3, #12]
   d80b8:	4629      	mov	r1, r5
   d80ba:	4630      	mov	r0, r6
   d80bc:	4798      	blx	r3
   d80be:	e00f      	b.n	d80e0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d80c0:	b124      	cbz	r4, d80cc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d80c2:	212e      	movs	r1, #46	; 0x2e
   d80c4:	4630      	mov	r0, r6
   d80c6:	f000 fa90 	bl	d85ea <_ZN5Print5printEc>
   d80ca:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d80cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d80d0:	220a      	movs	r2, #10
   d80d2:	4630      	mov	r0, r6
   d80d4:	f000 faa2 	bl	d861c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80d8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80da:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d80dc:	d1f0      	bne.n	d80c0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d80de:	4620      	mov	r0, r4
    }
    return n;
}
   d80e0:	b00d      	add	sp, #52	; 0x34
   d80e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d80e4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d80e4:	b510      	push	{r4, lr}
   d80e6:	4b05      	ldr	r3, [pc, #20]	; (d80fc <_ZN9IPAddressC1Ev+0x18>)
   d80e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d80ea:	2211      	movs	r2, #17
   d80ec:	f840 3b04 	str.w	r3, [r0], #4
   d80f0:	2100      	movs	r1, #0
   d80f2:	f002 f8cb 	bl	da28c <memset>
{
    clear();
}
   d80f6:	4620      	mov	r0, r4
   d80f8:	bd10      	pop	{r4, pc}
   d80fa:	bf00      	nop
   d80fc:	000dc2bc 	.word	0x000dc2bc

000d8100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8100:	4603      	mov	r3, r0
   d8102:	4a07      	ldr	r2, [pc, #28]	; (d8120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8104:	b510      	push	{r4, lr}
   d8106:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d810a:	f101 0210 	add.w	r2, r1, #16
   d810e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8112:	f843 4b04 	str.w	r4, [r3], #4
   d8116:	4291      	cmp	r1, r2
   d8118:	d1f9      	bne.n	d810e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d811a:	780a      	ldrb	r2, [r1, #0]
   d811c:	701a      	strb	r2, [r3, #0]
}
   d811e:	bd10      	pop	{r4, pc}
   d8120:	000dc2bc 	.word	0x000dc2bc

000d8124 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8124:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8126:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d812a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d812e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8132:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8136:	2304      	movs	r3, #4
   d8138:	6041      	str	r1, [r0, #4]
   d813a:	7503      	strb	r3, [r0, #20]
   d813c:	bd10      	pop	{r4, pc}

000d813e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d813e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8140:	780d      	ldrb	r5, [r1, #0]
   d8142:	788b      	ldrb	r3, [r1, #2]
   d8144:	784a      	ldrb	r2, [r1, #1]
   d8146:	78c9      	ldrb	r1, [r1, #3]
   d8148:	9100      	str	r1, [sp, #0]
   d814a:	4629      	mov	r1, r5
   d814c:	f7ff ffea 	bl	d8124 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8150:	b003      	add	sp, #12
   d8152:	bd30      	pop	{r4, r5, pc}

000d8154 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8154:	4b01      	ldr	r3, [pc, #4]	; (d815c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8156:	4a02      	ldr	r2, [pc, #8]	; (d8160 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8158:	601a      	str	r2, [r3, #0]
   d815a:	4770      	bx	lr
   d815c:	2003e270 	.word	0x2003e270
   d8160:	000dc338 	.word	0x000dc338

000d8164 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8164:	2200      	movs	r2, #0
   d8166:	4611      	mov	r1, r2
   d8168:	6840      	ldr	r0, [r0, #4]
   d816a:	f7ff b981 	b.w	d7470 <network_listening>

000d816e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d816e:	2200      	movs	r2, #0
   d8170:	4611      	mov	r1, r2
   d8172:	6840      	ldr	r0, [r0, #4]
   d8174:	f7ff b98c 	b.w	d7490 <network_get_listen_timeout>

000d8178 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8178:	2200      	movs	r2, #0
   d817a:	6840      	ldr	r0, [r0, #4]
   d817c:	f7ff b980 	b.w	d7480 <network_set_listen_timeout>

000d8180 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8180:	2200      	movs	r2, #0
   d8182:	f081 0101 	eor.w	r1, r1, #1
   d8186:	6840      	ldr	r0, [r0, #4]
   d8188:	f7ff b96a 	b.w	d7460 <network_listen>

000d818c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d818c:	2300      	movs	r3, #0
   d818e:	461a      	mov	r2, r3
   d8190:	2101      	movs	r1, #1
   d8192:	6840      	ldr	r0, [r0, #4]
   d8194:	f7ff b95c 	b.w	d7450 <network_off>

000d8198 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8198:	2300      	movs	r3, #0
   d819a:	461a      	mov	r2, r3
   d819c:	4619      	mov	r1, r3
   d819e:	6840      	ldr	r0, [r0, #4]
   d81a0:	f7ff b94e 	b.w	d7440 <network_on>

000d81a4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d81a4:	2200      	movs	r2, #0
   d81a6:	4611      	mov	r1, r2
   d81a8:	6840      	ldr	r0, [r0, #4]
   d81aa:	f7ff b941 	b.w	d7430 <network_ready>

000d81ae <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d81ae:	2200      	movs	r2, #0
   d81b0:	4611      	mov	r1, r2
   d81b2:	6840      	ldr	r0, [r0, #4]
   d81b4:	f7ff b92c 	b.w	d7410 <network_connecting>

000d81b8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81b8:	2200      	movs	r2, #0
   d81ba:	2102      	movs	r1, #2
   d81bc:	6840      	ldr	r0, [r0, #4]
   d81be:	f7ff b92f 	b.w	d7420 <network_disconnect>

000d81c2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81c2:	2300      	movs	r3, #0
   d81c4:	461a      	mov	r2, r3
   d81c6:	6840      	ldr	r0, [r0, #4]
   d81c8:	f7ff b91a 	b.w	d7400 <network_connect>

000d81cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d81cc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d81ce:	4605      	mov	r5, r0
   d81d0:	b188      	cbz	r0, d81f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d81d2:	6804      	ldr	r4, [r0, #0]
   d81d4:	b14c      	cbz	r4, d81ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d81d6:	68a3      	ldr	r3, [r4, #8]
   d81d8:	b11b      	cbz	r3, d81e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d81da:	2203      	movs	r2, #3
   d81dc:	4621      	mov	r1, r4
   d81de:	4620      	mov	r0, r4
   d81e0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d81e2:	2110      	movs	r1, #16
   d81e4:	4620      	mov	r0, r4
   d81e6:	f001 f892 	bl	d930e <_ZdlPvj>
   d81ea:	4628      	mov	r0, r5
   d81ec:	2114      	movs	r1, #20
      }
   d81ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d81f2:	f001 b88c 	b.w	d930e <_ZdlPvj>
   d81f6:	bd38      	pop	{r3, r4, r5, pc}

000d81f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d81f8:	b110      	cbz	r0, d8200 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d81fa:	6803      	ldr	r3, [r0, #0]
   d81fc:	685b      	ldr	r3, [r3, #4]
   d81fe:	4718      	bx	r3
   d8200:	4770      	bx	lr

000d8202 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8202:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8204:	6803      	ldr	r3, [r0, #0]
   d8206:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8208:	b1bb      	cbz	r3, d823a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d820a:	6858      	ldr	r0, [r3, #4]
   d820c:	f7fe fe0e 	bl	d6e2c <os_thread_is_current>
   d8210:	b978      	cbnz	r0, d8232 <_ZN6ThreadD1Ev+0x30>
   d8212:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8214:	7c5a      	ldrb	r2, [r3, #17]
   d8216:	b912      	cbnz	r2, d821e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8218:	6858      	ldr	r0, [r3, #4]
   d821a:	f7fe fe17 	bl	d6e4c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d821e:	6823      	ldr	r3, [r4, #0]
   d8220:	6858      	ldr	r0, [r3, #4]
   d8222:	f7fe fe1b 	bl	d6e5c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8226:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8228:	2300      	movs	r3, #0
   d822a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d822c:	b128      	cbz	r0, d823a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d822e:	f7ff ffcd 	bl	d81cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8232:	6820      	ldr	r0, [r4, #0]
   d8234:	b108      	cbz	r0, d823a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8236:	f7ff ffc9 	bl	d81cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d823a:	4620      	mov	r0, r4
   d823c:	bd10      	pop	{r4, pc}

000d823e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d823e:	b538      	push	{r3, r4, r5, lr}
   d8240:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8242:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8246:	b108      	cbz	r0, d824c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8248:	f7fb ff2b 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d824c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8250:	b108      	cbz	r0, d8256 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8252:	f7fe fe2b 	bl	d6eac <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8256:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d825a:	b135      	cbz	r5, d826a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d825c:	4628      	mov	r0, r5
   d825e:	f7ff ffd0 	bl	d8202 <_ZN6ThreadD1Ev>
   d8262:	2104      	movs	r1, #4
   d8264:	4628      	mov	r0, r5
   d8266:	f001 f852 	bl	d930e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d826a:	6820      	ldr	r0, [r4, #0]
   d826c:	b108      	cbz	r0, d8272 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d826e:	f7ff ffc3 	bl	d81f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8272:	4620      	mov	r0, r4
   d8274:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8278 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8278:	b510      	push	{r4, lr}
   d827a:	4b04      	ldr	r3, [pc, #16]	; (d828c <_ZN5spark9MeshClassD1Ev+0x14>)
   d827c:	4604      	mov	r4, r0
   d827e:	f840 3b08 	str.w	r3, [r0], #8
   d8282:	f7ff ffdc 	bl	d823e <_ZN5spark11MeshPublishD1Ev>
   d8286:	4620      	mov	r0, r4
   d8288:	bd10      	pop	{r4, pc}
   d828a:	bf00      	nop
   d828c:	000dc3a4 	.word	0x000dc3a4

000d8290 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8290:	b538      	push	{r3, r4, r5, lr}
   d8292:	4c0e      	ldr	r4, [pc, #56]	; (d82cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8294:	4b0e      	ldr	r3, [pc, #56]	; (d82d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8296:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8298:	2500      	movs	r5, #0
   d829a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d829c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d82a0:	6063      	str	r3, [r4, #4]
   d82a2:	60a5      	str	r5, [r4, #8]
   d82a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d82a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d82ac:	f7fe fdf6 	bl	d6e9c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d82b0:	4b08      	ldr	r3, [pc, #32]	; (d82d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d82b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d82b6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d82ba:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d82bc:	4620      	mov	r0, r4
   d82be:	4a06      	ldr	r2, [pc, #24]	; (d82d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d82c0:	4906      	ldr	r1, [pc, #24]	; (d82dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d82c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d82c6:	f001 b81d 	b.w	d9304 <__aeabi_atexit>
   d82ca:	bf00      	nop
   d82cc:	2003e274 	.word	0x2003e274
   d82d0:	000dc3d8 	.word	0x000dc3d8
   d82d4:	000dc3a4 	.word	0x000dc3a4
   d82d8:	2003e02c 	.word	0x2003e02c
   d82dc:	000d8279 	.word	0x000d8279

000d82e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d82e0:	2300      	movs	r3, #0
   d82e2:	461a      	mov	r2, r3
   d82e4:	6840      	ldr	r0, [r0, #4]
   d82e6:	f7ff b88b 	b.w	d7400 <network_connect>

000d82ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d82ea:	2200      	movs	r2, #0
   d82ec:	2102      	movs	r1, #2
   d82ee:	6840      	ldr	r0, [r0, #4]
   d82f0:	f7ff b896 	b.w	d7420 <network_disconnect>

000d82f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d82f4:	2200      	movs	r2, #0
   d82f6:	4611      	mov	r1, r2
   d82f8:	6840      	ldr	r0, [r0, #4]
   d82fa:	f7ff b889 	b.w	d7410 <network_connecting>

000d82fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d82fe:	2200      	movs	r2, #0
   d8300:	4611      	mov	r1, r2
   d8302:	6840      	ldr	r0, [r0, #4]
   d8304:	f7ff b894 	b.w	d7430 <network_ready>

000d8308 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8308:	2300      	movs	r3, #0
   d830a:	461a      	mov	r2, r3
   d830c:	4619      	mov	r1, r3
   d830e:	6840      	ldr	r0, [r0, #4]
   d8310:	f7ff b896 	b.w	d7440 <network_on>

000d8314 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8314:	2300      	movs	r3, #0
   d8316:	461a      	mov	r2, r3
   d8318:	4619      	mov	r1, r3
   d831a:	6840      	ldr	r0, [r0, #4]
   d831c:	f7ff b898 	b.w	d7450 <network_off>

000d8320 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8320:	2200      	movs	r2, #0
   d8322:	f081 0101 	eor.w	r1, r1, #1
   d8326:	6840      	ldr	r0, [r0, #4]
   d8328:	f7ff b89a 	b.w	d7460 <network_listen>

000d832c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d832c:	2200      	movs	r2, #0
   d832e:	6840      	ldr	r0, [r0, #4]
   d8330:	f7ff b8a6 	b.w	d7480 <network_set_listen_timeout>

000d8334 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8334:	2200      	movs	r2, #0
   d8336:	4611      	mov	r1, r2
   d8338:	6840      	ldr	r0, [r0, #4]
   d833a:	f7ff b8a9 	b.w	d7490 <network_get_listen_timeout>

000d833e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d833e:	2200      	movs	r2, #0
   d8340:	4611      	mov	r1, r2
   d8342:	6840      	ldr	r0, [r0, #4]
   d8344:	f7ff b894 	b.w	d7470 <network_listening>

000d8348 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d834c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d834e:	b095      	sub	sp, #84	; 0x54
   d8350:	4616      	mov	r6, r2
   d8352:	460d      	mov	r5, r1
   d8354:	4607      	mov	r7, r0
    IPAddress addr;
   d8356:	f7ff fec5 	bl	d80e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d835a:	4621      	mov	r1, r4
   d835c:	2220      	movs	r2, #32
   d835e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8360:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8362:	f001 ff93 	bl	da28c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8366:	2340      	movs	r3, #64	; 0x40
   d8368:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d836a:	4621      	mov	r1, r4
   d836c:	466b      	mov	r3, sp
   d836e:	aa0c      	add	r2, sp, #48	; 0x30
   d8370:	4630      	mov	r0, r6
   d8372:	f7fe fec3 	bl	d70fc <netdb_getaddrinfo>
    if (!r) {
   d8376:	4604      	mov	r4, r0
   d8378:	2800      	cmp	r0, #0
   d837a:	d144      	bne.n	d8406 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d837c:	4602      	mov	r2, r0
   d837e:	2101      	movs	r1, #1
   d8380:	6868      	ldr	r0, [r5, #4]
   d8382:	f7ff f855 	bl	d7430 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8386:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8388:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d838a:	4622      	mov	r2, r4
   d838c:	6868      	ldr	r0, [r5, #4]
   d838e:	f7ff f84f 	bl	d7430 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8392:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8394:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8396:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8398:	2e00      	cmp	r6, #0
   d839a:	d034      	beq.n	d8406 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d839c:	2900      	cmp	r1, #0
   d839e:	d132      	bne.n	d8406 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d83a0:	6873      	ldr	r3, [r6, #4]
   d83a2:	2b02      	cmp	r3, #2
   d83a4:	d002      	beq.n	d83ac <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d83a6:	2b0a      	cmp	r3, #10
   d83a8:	d009      	beq.n	d83be <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d83aa:	e02a      	b.n	d8402 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d83ac:	f1b8 0f00 	cmp.w	r8, #0
   d83b0:	d027      	beq.n	d8402 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d83b2:	6971      	ldr	r1, [r6, #20]
   d83b4:	4638      	mov	r0, r7
   d83b6:	3104      	adds	r1, #4
   d83b8:	f7ff fec1 	bl	d813e <_ZN9IPAddressaSEPKh>
   d83bc:	e020      	b.n	d8400 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d83be:	f1b9 0f00 	cmp.w	r9, #0
   d83c2:	d01e      	beq.n	d8402 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d83c4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d83c6:	2211      	movs	r2, #17
   d83c8:	a801      	add	r0, sp, #4
   d83ca:	f001 ff5f 	bl	da28c <memset>
                    a.v = 6;
   d83ce:	2306      	movs	r3, #6
   d83d0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d83d4:	ad01      	add	r5, sp, #4
   d83d6:	f104 0308 	add.w	r3, r4, #8
   d83da:	3418      	adds	r4, #24
   d83dc:	6818      	ldr	r0, [r3, #0]
   d83de:	6859      	ldr	r1, [r3, #4]
   d83e0:	462a      	mov	r2, r5
   d83e2:	c203      	stmia	r2!, {r0, r1}
   d83e4:	3308      	adds	r3, #8
   d83e6:	42a3      	cmp	r3, r4
   d83e8:	4615      	mov	r5, r2
   d83ea:	d1f7      	bne.n	d83dc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d83ec:	a901      	add	r1, sp, #4
   d83ee:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d83f0:	ad07      	add	r5, sp, #28
   d83f2:	f7ff fe85 	bl	d8100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d83f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83f8:	1d3c      	adds	r4, r7, #4
   d83fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83fc:	682b      	ldr	r3, [r5, #0]
   d83fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8400:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8402:	69f6      	ldr	r6, [r6, #28]
   d8404:	e7c8      	b.n	d8398 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8406:	9800      	ldr	r0, [sp, #0]
   d8408:	f7fe fe70 	bl	d70ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d840c:	4638      	mov	r0, r7
   d840e:	b015      	add	sp, #84	; 0x54
   d8410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8414 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8414:	4b02      	ldr	r3, [pc, #8]	; (d8420 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8416:	4a03      	ldr	r2, [pc, #12]	; (d8424 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8418:	601a      	str	r2, [r3, #0]
   d841a:	2200      	movs	r2, #0
   d841c:	605a      	str	r2, [r3, #4]
   d841e:	4770      	bx	lr
   d8420:	2003e448 	.word	0x2003e448
   d8424:	000dc3d8 	.word	0x000dc3d8

000d8428 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d8428:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d842a:	f000 ff45 	bl	d92b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d842e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d8432:	f7ff bdc8 	b.w	d7fc6 <_ZN7TwoWire4lockEv>

000d8436 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d8436:	b510      	push	{r4, lr}
   d8438:	4604      	mov	r4, r0
    lock_(_lock)
   d843a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d843c:	b109      	cbz	r1, d8442 <_ZN4PMICC1Eb+0xc>
        lock();
   d843e:	f7ff fff3 	bl	d8428 <_ZN4PMIC4lockEv>
    }
}
   d8442:	4620      	mov	r0, r4
   d8444:	bd10      	pop	{r4, pc}

000d8446 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d8446:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8448:	f000 ff36 	bl	d92b8 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d844c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d8450:	f7ff bdc2 	b.w	d7fd8 <_ZN7TwoWire6unlockEv>

000d8454 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d8454:	b510      	push	{r4, lr}
{
    if (lock_) {
   d8456:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d8458:	4604      	mov	r4, r0
{
    if (lock_) {
   d845a:	b10b      	cbz	r3, d8460 <_ZN4PMICD1Ev+0xc>
        unlock();
   d845c:	f7ff fff3 	bl	d8446 <_ZN4PMIC6unlockEv>
    }
}
   d8460:	4620      	mov	r0, r4
   d8462:	bd10      	pop	{r4, pc}

000d8464 <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8464:	b510      	push	{r4, lr}
   d8466:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d8468:	6800      	ldr	r0, [r0, #0]
   d846a:	f7ff ffec 	bl	d8446 <_ZN4PMIC6unlockEv>
   d846e:	4620      	mov	r0, r4
   d8470:	bd10      	pop	{r4, pc}

000d8472 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d8472:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8474:	ac02      	add	r4, sp, #8
   d8476:	460d      	mov	r5, r1
   d8478:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d847c:	f7ff ffd4 	bl	d8428 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8480:	f000 ff1a 	bl	d92b8 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d8484:	216b      	movs	r1, #107	; 0x6b
   d8486:	f7ff fd93 	bl	d7fb0 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d848a:	f000 ff15 	bl	d92b8 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d848e:	6803      	ldr	r3, [r0, #0]
   d8490:	4629      	mov	r1, r5
   d8492:	689b      	ldr	r3, [r3, #8]
   d8494:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d8496:	f000 ff0f 	bl	d92b8 <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d849a:	2101      	movs	r1, #1
   d849c:	f7ff fd8b 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84a0:	f000 ff0a 	bl	d92b8 <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d84a4:	2301      	movs	r3, #1
   d84a6:	461a      	mov	r2, r3
   d84a8:	216b      	movs	r1, #107	; 0x6b
   d84aa:	f7ff fd6b 	bl	d7f84 <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84ae:	f000 ff03 	bl	d92b8 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d84b2:	6803      	ldr	r3, [r0, #0]
   d84b4:	695b      	ldr	r3, [r3, #20]
   d84b6:	4798      	blx	r3
   d84b8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d84ba:	4620      	mov	r0, r4
   d84bc:	f7ff ffd2 	bl	d8464 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d84c0:	b2e8      	uxtb	r0, r5
   d84c2:	b003      	add	sp, #12
   d84c4:	bd30      	pop	{r4, r5, pc}

000d84c6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d84c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d84c8:	ac02      	add	r4, sp, #8
   d84ca:	4615      	mov	r5, r2
   d84cc:	460e      	mov	r6, r1
   d84ce:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d84d2:	f7ff ffa9 	bl	d8428 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84d6:	f000 feef 	bl	d92b8 <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d84da:	216b      	movs	r1, #107	; 0x6b
   d84dc:	f7ff fd68 	bl	d7fb0 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84e0:	f000 feea 	bl	d92b8 <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d84e4:	6803      	ldr	r3, [r0, #0]
   d84e6:	4631      	mov	r1, r6
   d84e8:	689b      	ldr	r3, [r3, #8]
   d84ea:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84ec:	f000 fee4 	bl	d92b8 <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d84f0:	6803      	ldr	r3, [r0, #0]
   d84f2:	4629      	mov	r1, r5
   d84f4:	689b      	ldr	r3, [r3, #8]
   d84f6:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d84f8:	f000 fede 	bl	d92b8 <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d84fc:	2101      	movs	r1, #1
   d84fe:	f7ff fd5a 	bl	d7fb6 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d8502:	4620      	mov	r0, r4
   d8504:	f7ff ffae 	bl	d8464 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d8508:	b002      	add	sp, #8
   d850a:	bd70      	pop	{r4, r5, r6, pc}

000d850c <_ZN4PMIC10enableBuckEv>:
 * Function Name  : enableBuck
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
   d850c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d850e:	ac02      	add	r4, sp, #8
   d8510:	4605      	mov	r5, r0
   d8512:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d8516:	f7ff ff87 	bl	d8428 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d851a:	2100      	movs	r1, #0
   d851c:	4628      	mov	r0, r5
   d851e:	f7ff ffa8 	bl	d8472 <_ZN4PMIC12readRegisterEh>
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
   d8522:	2100      	movs	r1, #0
   d8524:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d8528:	4628      	mov	r0, r5
   d852a:	f7ff ffcc 	bl	d84c6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
    std::lock_guard<PMIC> l(*this);
   d852e:	4620      	mov	r0, r4
   d8530:	f7ff ff98 	bl	d8464 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
    return 1;
}
   d8534:	2001      	movs	r0, #1
   d8536:	b003      	add	sp, #12
   d8538:	bd30      	pop	{r4, r5, pc}

000d853a <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
   d853a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d853c:	ac02      	add	r4, sp, #8
   d853e:	4605      	mov	r5, r0
   d8540:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d8544:	f7ff ff70 	bl	d8428 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8548:	2101      	movs	r1, #1
   d854a:	4628      	mov	r0, r5
   d854c:	f7ff ff91 	bl	d8472 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d8550:	2101      	movs	r1, #1
   d8552:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d8556:	4628      	mov	r0, r5
   d8558:	f7ff ffb5 	bl	d84c6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
   d855c:	4620      	mov	r0, r4
   d855e:	f7ff ff81 	bl	d8464 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
   d8562:	2001      	movs	r0, #1
   d8564:	b003      	add	sp, #12
   d8566:	bd30      	pop	{r4, r5, pc}

000d8568 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
   d8568:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d856a:	ac02      	add	r4, sp, #8
   d856c:	4605      	mov	r5, r0
   d856e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d8572:	f7ff ff59 	bl	d8428 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8576:	2101      	movs	r1, #1
   d8578:	4628      	mov	r0, r5
   d857a:	f7ff ff7a 	bl	d8472 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d857e:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d8582:	f042 0210 	orr.w	r2, r2, #16
   d8586:	2101      	movs	r1, #1
   d8588:	4628      	mov	r0, r5
   d858a:	f7ff ff9c 	bl	d84c6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
   d858e:	4620      	mov	r0, r4
   d8590:	f7ff ff68 	bl	d8464 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
   d8594:	2001      	movs	r0, #1
   d8596:	b003      	add	sp, #12
   d8598:	bd30      	pop	{r4, r5, pc}

000d859a <_ZN4PMIC14enableChargingEv>:
   d859a:	f7ff bfe5 	b.w	d8568 <_ZN4PMIC10disableOTGEv>

000d859e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d85a0:	4606      	mov	r6, r0
   d85a2:	460d      	mov	r5, r1
   d85a4:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d85a6:	2400      	movs	r4, #0
  while (size--) {
   d85a8:	42bd      	cmp	r5, r7
   d85aa:	d00c      	beq.n	d85c6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d85ac:	6833      	ldr	r3, [r6, #0]
   d85ae:	f815 1b01 	ldrb.w	r1, [r5], #1
   d85b2:	689b      	ldr	r3, [r3, #8]
   d85b4:	4630      	mov	r0, r6
   d85b6:	4798      	blx	r3
     if (chunk>=0)
   d85b8:	2800      	cmp	r0, #0
   d85ba:	db01      	blt.n	d85c0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d85bc:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d85be:	e7f3      	b.n	d85a8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d85c0:	2c00      	cmp	r4, #0
   d85c2:	bf08      	it	eq
   d85c4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d85c6:	4620      	mov	r0, r4
   d85c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d85ca <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d85ca:	b570      	push	{r4, r5, r6, lr}
   d85cc:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d85ce:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d85d0:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d85d2:	b149      	cbz	r1, d85e8 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d85d4:	f002 fe1a 	bl	db20c <strlen>
   d85d8:	682b      	ldr	r3, [r5, #0]
   d85da:	4602      	mov	r2, r0
   d85dc:	4621      	mov	r1, r4
   d85de:	4628      	mov	r0, r5
   d85e0:	68db      	ldr	r3, [r3, #12]
    }
   d85e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d85e6:	4718      	bx	r3
    }
   d85e8:	bd70      	pop	{r4, r5, r6, pc}

000d85ea <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d85ea:	6803      	ldr	r3, [r0, #0]
   d85ec:	689b      	ldr	r3, [r3, #8]
   d85ee:	4718      	bx	r3

000d85f0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d85f0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d85f2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d85f4:	4605      	mov	r5, r0
  size_t n = print('\r');
   d85f6:	f7ff fff8 	bl	d85ea <_ZN5Print5printEc>
  n += print('\n');
   d85fa:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d85fc:	4604      	mov	r4, r0
  n += print('\n');
   d85fe:	4628      	mov	r0, r5
   d8600:	f7ff fff3 	bl	d85ea <_ZN5Print5printEc>
  return n;
}
   d8604:	4420      	add	r0, r4
   d8606:	bd38      	pop	{r3, r4, r5, pc}

000d8608 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8608:	b538      	push	{r3, r4, r5, lr}
   d860a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d860c:	f7ff ffdd 	bl	d85ca <_ZN5Print5writeEPKc>
   d8610:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d8612:	4628      	mov	r0, r5
   d8614:	f7ff ffec 	bl	d85f0 <_ZN5Print7printlnEv>
  return n;
}
   d8618:	4420      	add	r0, r4
   d861a:	bd38      	pop	{r3, r4, r5, pc}

000d861c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d861c:	b530      	push	{r4, r5, lr}
   d861e:	b08b      	sub	sp, #44	; 0x2c
   d8620:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8622:	2100      	movs	r1, #0
   d8624:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8628:	2a01      	cmp	r2, #1
   d862a:	bf98      	it	ls
   d862c:	220a      	movls	r2, #10
   d862e:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d8632:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d8636:	fb05 3312 	mls	r3, r5, r2, r3
   d863a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d863e:	2b09      	cmp	r3, #9
   d8640:	bf94      	ite	ls
   d8642:	3330      	addls	r3, #48	; 0x30
   d8644:	3337      	addhi	r3, #55	; 0x37
   d8646:	b2db      	uxtb	r3, r3
   d8648:	4621      	mov	r1, r4
   d864a:	f804 3901 	strb.w	r3, [r4], #-1
   d864e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8650:	2d00      	cmp	r5, #0
   d8652:	d1ee      	bne.n	d8632 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8654:	f7ff ffb9 	bl	d85ca <_ZN5Print5writeEPKc>
}
   d8658:	b00b      	add	sp, #44	; 0x2c
   d865a:	bd30      	pop	{r4, r5, pc}

000d865c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d865c:	b510      	push	{r4, lr}
   d865e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8660:	f7fe f903 	bl	d686a <_ZNSt14_Function_baseD1Ev>
   d8664:	4620      	mov	r0, r4
   d8666:	bd10      	pop	{r4, pc}

000d8668 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8668:	4803      	ldr	r0, [pc, #12]	; (d8678 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d866a:	4a04      	ldr	r2, [pc, #16]	; (d867c <_GLOBAL__sub_I_RGB+0x14>)
   d866c:	4904      	ldr	r1, [pc, #16]	; (d8680 <_GLOBAL__sub_I_RGB+0x18>)
   d866e:	2300      	movs	r3, #0
   d8670:	6083      	str	r3, [r0, #8]
   d8672:	f000 be47 	b.w	d9304 <__aeabi_atexit>
   d8676:	bf00      	nop
   d8678:	2003e450 	.word	0x2003e450
   d867c:	2003e02c 	.word	0x2003e02c
   d8680:	000d865d 	.word	0x000d865d

000d8684 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8684:	b510      	push	{r4, lr}
   d8686:	4604      	mov	r4, r0
{
    _spi = spi;
   d8688:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d868a:	4608      	mov	r0, r1
   d868c:	f7fe fd3e 	bl	d710c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8690:	2300      	movs	r3, #0
   d8692:	6063      	str	r3, [r4, #4]
}
   d8694:	4620      	mov	r0, r4
   d8696:	bd10      	pop	{r4, pc}

000d8698 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d8698:	7800      	ldrb	r0, [r0, #0]
   d869a:	f7fe bd3f 	b.w	d711c <HAL_SPI_Is_Enabled>

000d869e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d869e:	b510      	push	{r4, lr}
   d86a0:	4604      	mov	r4, r0
{
	free(buffer);
   d86a2:	6800      	ldr	r0, [r0, #0]
   d86a4:	f7fe ff04 	bl	d74b0 <free>
}
   d86a8:	4620      	mov	r0, r4
   d86aa:	bd10      	pop	{r4, pc}

000d86ac <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d86ac:	b510      	push	{r4, lr}
   d86ae:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d86b0:	6800      	ldr	r0, [r0, #0]
   d86b2:	b108      	cbz	r0, d86b8 <_ZN6String10invalidateEv+0xc>
   d86b4:	f7fe fefc 	bl	d74b0 <free>
	buffer = NULL;
   d86b8:	2300      	movs	r3, #0
   d86ba:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d86bc:	60a3      	str	r3, [r4, #8]
   d86be:	6063      	str	r3, [r4, #4]
   d86c0:	bd10      	pop	{r4, pc}

000d86c2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d86c2:	b538      	push	{r3, r4, r5, lr}
   d86c4:	4604      	mov	r4, r0
   d86c6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d86c8:	6800      	ldr	r0, [r0, #0]
   d86ca:	3101      	adds	r1, #1
   d86cc:	f7fe fef8 	bl	d74c0 <realloc>
	if (newbuffer) {
   d86d0:	b110      	cbz	r0, d86d8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d86d2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d86d6:	2001      	movs	r0, #1
	}
	return 0;
}
   d86d8:	bd38      	pop	{r3, r4, r5, pc}

000d86da <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d86da:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d86dc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d86de:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d86e0:	b113      	cbz	r3, d86e8 <_ZN6String7reserveEj+0xe>
   d86e2:	6843      	ldr	r3, [r0, #4]
   d86e4:	428b      	cmp	r3, r1
   d86e6:	d207      	bcs.n	d86f8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d86e8:	4620      	mov	r0, r4
   d86ea:	f7ff ffea 	bl	d86c2 <_ZN6String12changeBufferEj>
   d86ee:	b120      	cbz	r0, d86fa <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d86f0:	68a3      	ldr	r3, [r4, #8]
   d86f2:	b90b      	cbnz	r3, d86f8 <_ZN6String7reserveEj+0x1e>
   d86f4:	6822      	ldr	r2, [r4, #0]
   d86f6:	7013      	strb	r3, [r2, #0]
   d86f8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d86fa:	bd10      	pop	{r4, pc}

000d86fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d86fc:	b570      	push	{r4, r5, r6, lr}
   d86fe:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8700:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8702:	4604      	mov	r4, r0
   d8704:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8706:	f7ff ffe8 	bl	d86da <_ZN6String7reserveEj>
   d870a:	b918      	cbnz	r0, d8714 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d870c:	4620      	mov	r0, r4
   d870e:	f7ff ffcd 	bl	d86ac <_ZN6String10invalidateEv>
		return *this;
   d8712:	e009      	b.n	d8728 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8714:	462a      	mov	r2, r5
   d8716:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8718:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d871a:	6820      	ldr	r0, [r4, #0]
   d871c:	f001 fd90 	bl	da240 <memcpy>
	buffer[len] = 0;
   d8720:	6822      	ldr	r2, [r4, #0]
   d8722:	68a3      	ldr	r3, [r4, #8]
   d8724:	2100      	movs	r1, #0
   d8726:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8728:	4620      	mov	r0, r4
   d872a:	bd70      	pop	{r4, r5, r6, pc}

000d872c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d872c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d872e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8730:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8732:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8734:	6043      	str	r3, [r0, #4]
	len = 0;
   d8736:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8738:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d873a:	460d      	mov	r5, r1
   d873c:	b139      	cbz	r1, d874e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d873e:	4608      	mov	r0, r1
   d8740:	f002 fd64 	bl	db20c <strlen>
   d8744:	4629      	mov	r1, r5
   d8746:	4602      	mov	r2, r0
   d8748:	4620      	mov	r0, r4
   d874a:	f7ff ffd7 	bl	d86fc <_ZN6String4copyEPKcj>
}
   d874e:	4620      	mov	r0, r4
   d8750:	bd38      	pop	{r3, r4, r5, pc}

000d8752 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8752:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8754:	b510      	push	{r4, lr}
   d8756:	460b      	mov	r3, r1
   d8758:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d875a:	d007      	beq.n	d876c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d875c:	6809      	ldr	r1, [r1, #0]
   d875e:	b119      	cbz	r1, d8768 <_ZN6StringaSERKS_+0x16>
   d8760:	689a      	ldr	r2, [r3, #8]
   d8762:	f7ff ffcb 	bl	d86fc <_ZN6String4copyEPKcj>
   d8766:	e001      	b.n	d876c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8768:	f7ff ffa0 	bl	d86ac <_ZN6String10invalidateEv>

	return *this;
}
   d876c:	4620      	mov	r0, r4
   d876e:	bd10      	pop	{r4, pc}

000d8770 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8770:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8772:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8774:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8776:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8778:	6043      	str	r3, [r0, #4]
	len = 0;
   d877a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d877c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d877e:	f7ff ffe8 	bl	d8752 <_ZN6StringaSERKS_>
}
   d8782:	4620      	mov	r0, r4
   d8784:	bd10      	pop	{r4, pc}

000d8786 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8786:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8788:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d878a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d878c:	b912      	cbnz	r2, d8794 <_ZNK6String6equalsEPKc+0xe>
   d878e:	b919      	cbnz	r1, d8798 <_ZNK6String6equalsEPKc+0x12>
   d8790:	2001      	movs	r0, #1
   d8792:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8794:	b911      	cbnz	r1, d879c <_ZNK6String6equalsEPKc+0x16>
   d8796:	6803      	ldr	r3, [r0, #0]
   d8798:	7818      	ldrb	r0, [r3, #0]
   d879a:	e002      	b.n	d87a2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d879c:	6800      	ldr	r0, [r0, #0]
   d879e:	f001 fff3 	bl	da788 <strcmp>
   d87a2:	fab0 f080 	clz	r0, r0
   d87a6:	0940      	lsrs	r0, r0, #5
}
   d87a8:	bd08      	pop	{r3, pc}

000d87aa <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d87aa:	b570      	push	{r4, r5, r6, lr}
   d87ac:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d87ae:	b19a      	cbz	r2, d87d8 <_ZNK6String8getBytesEPhjj+0x2e>
   d87b0:	b191      	cbz	r1, d87d8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d87b2:	6885      	ldr	r5, [r0, #8]
   d87b4:	429d      	cmp	r5, r3
   d87b6:	d802      	bhi.n	d87be <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d87b8:	2300      	movs	r3, #0
   d87ba:	700b      	strb	r3, [r1, #0]
		return;
   d87bc:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d87be:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d87c0:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d87c2:	6801      	ldr	r1, [r0, #0]
   d87c4:	42ac      	cmp	r4, r5
   d87c6:	bf28      	it	cs
   d87c8:	462c      	movcs	r4, r5
   d87ca:	4419      	add	r1, r3
   d87cc:	4622      	mov	r2, r4
   d87ce:	4630      	mov	r0, r6
   d87d0:	f002 fd39 	bl	db246 <strncpy>
	buf[n] = 0;
   d87d4:	2300      	movs	r3, #0
   d87d6:	5533      	strb	r3, [r6, r4]
   d87d8:	bd70      	pop	{r4, r5, r6, pc}

000d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d87da:	b510      	push	{r4, lr}
   d87dc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d87de:	6800      	ldr	r0, [r0, #0]
   d87e0:	b118      	cbz	r0, d87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d87e2:	f7fe fe65 	bl	d74b0 <free>
            wakeupSource_ = nullptr;
   d87e6:	2300      	movs	r3, #0
   d87e8:	6023      	str	r3, [r4, #0]
   d87ea:	bd10      	pop	{r4, pc}

000d87ec <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d87ec:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d87ee:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d87f2:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d87f4:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d87f6:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d87f8:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d87fc:	f8c0 2006 	str.w	r2, [r0, #6]
   d8800:	889b      	ldrh	r3, [r3, #4]
   d8802:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8804:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d8806:	f7ff ffe8 	bl	d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d880a:	682b      	ldr	r3, [r5, #0]
   d880c:	b113      	cbz	r3, d8814 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d880e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8810:	2300      	movs	r3, #0
   d8812:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d8814:	4620      	mov	r0, r4
   d8816:	bd38      	pop	{r3, r4, r5, pc}

000d8818 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
   d8818:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
   d881c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d881e:	b90b      	cbnz	r3, d8824 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
   d8820:	680a      	ldr	r2, [r1, #0]
   d8822:	b19a      	cbz	r2, d884c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
   d8824:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d8826:	b15c      	cbz	r4, d8840 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
   d8828:	88a2      	ldrh	r2, [r4, #4]
   d882a:	2a01      	cmp	r2, #1
   d882c:	d003      	beq.n	d8836 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
   d882e:	2a04      	cmp	r2, #4
   d8830:	d106      	bne.n	d8840 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d8832:	2202      	movs	r2, #2
   d8834:	e005      	b.n	d8842 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d8836:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d8838:	814c      	strh	r4, [r1, #10]
   d883a:	718a      	strb	r2, [r1, #6]
   d883c:	810b      	strh	r3, [r1, #8]
                    break;
   d883e:	e005      	b.n	d884c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d8840:	2204      	movs	r2, #4
   d8842:	810b      	strh	r3, [r1, #8]
   d8844:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8848:	718a      	strb	r2, [r1, #6]
   d884a:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
   d884c:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d8850:	6003      	str	r3, [r0, #0]
   d8852:	888b      	ldrh	r3, [r1, #4]
   d8854:	8083      	strh	r3, [r0, #4]
    }
   d8856:	bd10      	pop	{r4, pc}

000d8858 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d8858:	b538      	push	{r3, r4, r5, lr}
   d885a:	460c      	mov	r4, r1
   d885c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d885e:	f7ff ffbc 	bl	d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d8862:	b144      	cbz	r4, d8876 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d8864:	8820      	ldrh	r0, [r4, #0]
   d8866:	f7fe fe1b 	bl	d74a0 <malloc>
   d886a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d886c:	b128      	cbz	r0, d887a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d886e:	8822      	ldrh	r2, [r4, #0]
   d8870:	4621      	mov	r1, r4
   d8872:	f001 fce5 	bl	da240 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d8876:	2000      	movs	r0, #0
   d8878:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d887a:	4801      	ldr	r0, [pc, #4]	; (d8880 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d887c:	bd38      	pop	{r3, r4, r5, pc}
   d887e:	bf00      	nop
   d8880:	fffffefc 	.word	0xfffffefc

000d8884 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d8884:	4601      	mov	r1, r0
   d8886:	2200      	movs	r2, #0
   d8888:	208c      	movs	r0, #140	; 0x8c
   d888a:	f7fe bb27 	b.w	d6edc <HAL_Core_System_Reset_Ex>

000d888e <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d888e:	2000      	movs	r0, #0
   d8890:	f7ff bff8 	b.w	d8884 <_ZN11SystemClass5resetEm>

000d8894 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d8894:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8896:	4d30      	ldr	r5, [pc, #192]	; (d8958 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d8898:	7d0b      	ldrb	r3, [r1, #20]
   d889a:	4604      	mov	r4, r0
   d889c:	b08b      	sub	sp, #44	; 0x2c
   d889e:	4608      	mov	r0, r1
   d88a0:	1daf      	adds	r7, r5, #6
   d88a2:	b313      	cbz	r3, d88ea <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d88a4:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d88a6:	791b      	ldrb	r3, [r3, #4]
   d88a8:	b1fb      	cbz	r3, d88ea <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d88aa:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d88ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d88b0:	a902      	add	r1, sp, #8
   d88b2:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d88b4:	9202      	str	r2, [sp, #8]
   d88b6:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d88ba:	f88d 200e 	strb.w	r2, [sp, #14]
   d88be:	f8ad 2010 	strh.w	r2, [sp, #16]
   d88c2:	f8ad 3012 	strh.w	r3, [sp, #18]
   d88c6:	f7fe fd29 	bl	d731c <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d88ca:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d88cc:	b200      	sxth	r0, r0
   d88ce:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d88d2:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d88d6:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d88d8:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d88da:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d88de:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d88e0:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d88e2:	4628      	mov	r0, r5
   d88e4:	f7ff ffb8 	bl	d8858 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d88e8:	e01c      	b.n	d8924 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d88ea:	2320      	movs	r3, #32
   d88ec:	2600      	movs	r6, #0
   d88ee:	9302      	str	r3, [sp, #8]
   d88f0:	4b1a      	ldr	r3, [pc, #104]	; (d895c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d88f2:	9300      	str	r3, [sp, #0]
   d88f4:	491a      	ldr	r1, [pc, #104]	; (d8960 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d88f6:	9603      	str	r6, [sp, #12]
   d88f8:	4633      	mov	r3, r6
   d88fa:	2032      	movs	r0, #50	; 0x32
   d88fc:	aa02      	add	r2, sp, #8
   d88fe:	f7fe fc8d 	bl	d721c <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8902:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8906:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d890a:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d890c:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d8910:	4811      	ldr	r0, [pc, #68]	; (d8958 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8912:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8914:	f88d 600e 	strb.w	r6, [sp, #14]
   d8918:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d891c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8920:	f7ff ff64 	bl	d87ec <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8924:	a802      	add	r0, sp, #8
   d8926:	f7ff ff58 	bl	d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d892a:	2300      	movs	r3, #0
   d892c:	6023      	str	r3, [r4, #0]
   d892e:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8930:	71a3      	strb	r3, [r4, #6]
   d8932:	8123      	strh	r3, [r4, #8]
   d8934:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8938:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d893a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d893e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d8940:	683b      	ldr	r3, [r7, #0]
   d8942:	f8c4 3006 	str.w	r3, [r4, #6]
   d8946:	88bb      	ldrh	r3, [r7, #4]
   d8948:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d894a:	6829      	ldr	r1, [r5, #0]
   d894c:	4620      	mov	r0, r4
   d894e:	f7ff ff83 	bl	d8858 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d8952:	4620      	mov	r0, r4
   d8954:	b00b      	add	sp, #44	; 0x2c
   d8956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8958:	2003e460 	.word	0x2003e460
   d895c:	000dc40b 	.word	0x000dc40b
   d8960:	000dc404 	.word	0x000dc404

000d8964 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d8964:	b530      	push	{r4, r5, lr}
   d8966:	4604      	mov	r4, r0
   d8968:	b085      	sub	sp, #20
   d896a:	4608      	mov	r0, r1
   d896c:	4611      	mov	r1, r2
   d896e:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d8970:	2300      	movs	r3, #0
   d8972:	f7fe fc85 	bl	d7280 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d8976:	4d0d      	ldr	r5, [pc, #52]	; (d89ac <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
   d8978:	f8ad 000c 	strh.w	r0, [sp, #12]
   d897c:	2300      	movs	r3, #0
   d897e:	a901      	add	r1, sp, #4
   d8980:	9301      	str	r3, [sp, #4]
   d8982:	f8ad 3008 	strh.w	r3, [sp, #8]
   d8986:	f88d 300a 	strb.w	r3, [sp, #10]
   d898a:	4628      	mov	r0, r5
   d898c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8990:	f8ad 300e 	strh.w	r3, [sp, #14]
   d8994:	f7ff ff2a 	bl	d87ec <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d8998:	a801      	add	r0, sp, #4
   d899a:	f7ff ff1e 	bl	d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
   d899e:	4620      	mov	r0, r4
   d89a0:	4629      	mov	r1, r5
   d89a2:	f7ff ff39 	bl	d8818 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d89a6:	4620      	mov	r0, r4
   d89a8:	b005      	add	sp, #20
   d89aa:	bd30      	pop	{r4, r5, pc}
   d89ac:	2003e460 	.word	0x2003e460

000d89b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d89b0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d89b2:	4c09      	ldr	r4, [pc, #36]	; (d89d8 <_GLOBAL__sub_I_System+0x28>)
   d89b4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d89b6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d89ba:	6020      	str	r0, [r4, #0]
   d89bc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d89be:	71a0      	strb	r0, [r4, #6]
   d89c0:	8120      	strh	r0, [r4, #8]
   d89c2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d89c4:	f7fe fc4c 	bl	d7260 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d89c8:	4620      	mov	r0, r4
   d89ca:	4a04      	ldr	r2, [pc, #16]	; (d89dc <_GLOBAL__sub_I_System+0x2c>)
   d89cc:	4904      	ldr	r1, [pc, #16]	; (d89e0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d89ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d89d2:	f000 bc97 	b.w	d9304 <__aeabi_atexit>
   d89d6:	bf00      	nop
   d89d8:	2003e460 	.word	0x2003e460
   d89dc:	2003e02c 	.word	0x2003e02c
   d89e0:	000d4273 	.word	0x000d4273

000d89e4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d89e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d89e6:	4b14      	ldr	r3, [pc, #80]	; (d8a38 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d89e8:	4f14      	ldr	r7, [pc, #80]	; (d8a3c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d89ea:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d89ec:	4b14      	ldr	r3, [pc, #80]	; (d8a40 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d89ee:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d89f0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d89f2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d89f4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d89f6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d89f8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d89fa:	d01b      	beq.n	d8a34 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d89fc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d89fe:	ad01      	add	r5, sp, #4
   d8a00:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d8a04:	f001 fb24 	bl	da050 <localtime>
	calendar_time->tm_year += 1900;
   d8a08:	6943      	ldr	r3, [r0, #20]
   d8a0a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8a0e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d8a10:	4604      	mov	r4, r0
   d8a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a1a:	f8d4 e000 	ldr.w	lr, [r4]
   d8a1e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8a22:	ad01      	add	r5, sp, #4
   d8a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a26:	4c07      	ldr	r4, [pc, #28]	; (d8a44 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d8a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8a2e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8a30:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d8a34:	b00b      	add	sp, #44	; 0x2c
   d8a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a38:	2003e49c 	.word	0x2003e49c
   d8a3c:	2003e498 	.word	0x2003e498
   d8a40:	2003e494 	.word	0x2003e494
   d8a44:	2003e46c 	.word	0x2003e46c

000d8a48 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d8a48:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8a4a:	2000      	movs	r0, #0
   d8a4c:	f7fe fcc0 	bl	d73d0 <spark_sync_time_pending>
   d8a50:	b128      	cbz	r0, d8a5e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8a52:	f7fe fc95 	bl	d7380 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8a56:	f080 0001 	eor.w	r0, r0, #1
   d8a5a:	b2c0      	uxtb	r0, r0
   d8a5c:	bd08      	pop	{r3, pc}
   d8a5e:	2001      	movs	r0, #1
    }
   d8a60:	bd08      	pop	{r3, pc}
	...

000d8a64 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d8a64:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8a66:	f7ff ffbd 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d8a6a:	4b01      	ldr	r3, [pc, #4]	; (d8a70 <_ZN9TimeClass4hourEl+0xc>)
   d8a6c:	6898      	ldr	r0, [r3, #8]
   d8a6e:	bd08      	pop	{r3, pc}
   d8a70:	2003e46c 	.word	0x2003e46c

000d8a74 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d8a74:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8a76:	f7ff ffb5 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d8a7a:	4b01      	ldr	r3, [pc, #4]	; (d8a80 <_ZN9TimeClass3dayEl+0xc>)
   d8a7c:	68d8      	ldr	r0, [r3, #12]
   d8a7e:	bd08      	pop	{r3, pc}
   d8a80:	2003e46c 	.word	0x2003e46c

000d8a84 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d8a84:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8a86:	f7ff ffad 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d8a8a:	4b02      	ldr	r3, [pc, #8]	; (d8a94 <_ZN9TimeClass7weekdayEl+0x10>)
   d8a8c:	6998      	ldr	r0, [r3, #24]
}
   d8a8e:	3001      	adds	r0, #1
   d8a90:	bd08      	pop	{r3, pc}
   d8a92:	bf00      	nop
   d8a94:	2003e46c 	.word	0x2003e46c

000d8a98 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d8a98:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d8a9a:	f7ff ffa3 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d8a9e:	4b02      	ldr	r3, [pc, #8]	; (d8aa8 <_ZN9TimeClass5monthEl+0x10>)
   d8aa0:	6918      	ldr	r0, [r3, #16]
}
   d8aa2:	3001      	adds	r0, #1
   d8aa4:	bd08      	pop	{r3, pc}
   d8aa6:	bf00      	nop
   d8aa8:	2003e46c 	.word	0x2003e46c

000d8aac <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d8aac:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d8aae:	f7fe fa45 	bl	d6f3c <HAL_RTC_Get_UnixTime>
   d8ab2:	4b03      	ldr	r3, [pc, #12]	; (d8ac0 <_ZN9TimeClass5localEv+0x14>)
   d8ab4:	681b      	ldr	r3, [r3, #0]
   d8ab6:	4418      	add	r0, r3
   d8ab8:	4b02      	ldr	r3, [pc, #8]	; (d8ac4 <_ZN9TimeClass5localEv+0x18>)
   d8aba:	681b      	ldr	r3, [r3, #0]
}
   d8abc:	4418      	add	r0, r3
   d8abe:	bd08      	pop	{r3, pc}
   d8ac0:	2003e49c 	.word	0x2003e49c
   d8ac4:	2003e494 	.word	0x2003e494

000d8ac8 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8ac8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8acc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8ad4:	d40f      	bmi.n	d8af6 <_ZN9TimeClass4zoneEf+0x2e>
   d8ad6:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d8ada:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8ae2:	dc08      	bgt.n	d8af6 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8ae4:	eddf 7a04 	vldr	s15, [pc, #16]	; d8af8 <_ZN9TimeClass4zoneEf+0x30>
   d8ae8:	4b04      	ldr	r3, [pc, #16]	; (d8afc <_ZN9TimeClass4zoneEf+0x34>)
   d8aea:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8aee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8af2:	ed83 0a00 	vstr	s0, [r3]
   d8af6:	4770      	bx	lr
   d8af8:	45610000 	.word	0x45610000
   d8afc:	2003e49c 	.word	0x2003e49c

000d8b00 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d8b00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d8b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8b08:	d40f      	bmi.n	d8b2a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
   d8b0a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d8b0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8b16:	dc08      	bgt.n	d8b2a <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
   d8b18:	eddf 7a04 	vldr	s15, [pc, #16]	; d8b2c <_ZN9TimeClass12setDSTOffsetEf+0x2c>
   d8b1c:	4b04      	ldr	r3, [pc, #16]	; (d8b30 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
   d8b1e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8b22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8b26:	ed83 0a00 	vstr	s0, [r3]
   d8b2a:	4770      	bx	lr
   d8b2c:	45610000 	.word	0x45610000
   d8b30:	2003df70 	.word	0x2003df70

000d8b34 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d8b34:	4b02      	ldr	r3, [pc, #8]	; (d8b40 <_ZN9TimeClass8beginDSTEv+0xc>)
   d8b36:	681a      	ldr	r2, [r3, #0]
   d8b38:	4b02      	ldr	r3, [pc, #8]	; (d8b44 <_ZN9TimeClass8beginDSTEv+0x10>)
   d8b3a:	601a      	str	r2, [r3, #0]
   d8b3c:	4770      	bx	lr
   d8b3e:	bf00      	nop
   d8b40:	2003df70 	.word	0x2003df70
   d8b44:	2003e494 	.word	0x2003e494

000d8b48 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d8b48:	4b01      	ldr	r3, [pc, #4]	; (d8b50 <_ZN9TimeClass6endDSTEv+0x8>)
   d8b4a:	2200      	movs	r2, #0
   d8b4c:	601a      	str	r2, [r3, #0]
   d8b4e:	4770      	bx	lr
   d8b50:	2003e494 	.word	0x2003e494

000d8b54 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8b54:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d8b56:	f7fe f9f9 	bl	d6f4c <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8b5a:	2200      	movs	r2, #0
   d8b5c:	4611      	mov	r1, r2
   d8b5e:	4610      	mov	r0, r2
}
   d8b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8b64:	f7fe bbb4 	b.w	d72d0 <system_notify_time_changed>

000d8b68 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d8b6a:	4b0e      	ldr	r3, [pc, #56]	; (d8ba4 <_ZN9TimeClass7timeStrEl+0x3c>)
   d8b6c:	681b      	ldr	r3, [r3, #0]
   d8b6e:	4419      	add	r1, r3
   d8b70:	4b0d      	ldr	r3, [pc, #52]	; (d8ba8 <_ZN9TimeClass7timeStrEl+0x40>)
   d8b72:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8b74:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d8b76:	a802      	add	r0, sp, #8
   d8b78:	4419      	add	r1, r3
   d8b7a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d8b7e:	f001 fa67 	bl	da050 <localtime>
        char* ascstr = asctime(calendar_time);
   d8b82:	f001 f96d 	bl	d9e60 <asctime>
   d8b86:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d8b88:	f002 fb40 	bl	db20c <strlen>
        ascstr[len-1] = 0; // remove final newline
   d8b8c:	4428      	add	r0, r5
   d8b8e:	2300      	movs	r3, #0
   d8b90:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d8b94:	4629      	mov	r1, r5
   d8b96:	4620      	mov	r0, r4
   d8b98:	f7ff fdc8 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8b9c:	4620      	mov	r0, r4
   d8b9e:	b003      	add	sp, #12
   d8ba0:	bd30      	pop	{r4, r5, pc}
   d8ba2:	bf00      	nop
   d8ba4:	2003e49c 	.word	0x2003e49c
   d8ba8:	2003e494 	.word	0x2003e494

000d8bac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8bb0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8bb2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8bb4:	4607      	mov	r7, r0
   d8bb6:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8bb8:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8bba:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8bbc:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8bbe:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8bc0:	f002 fb41 	bl	db246 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8bc4:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8bc6:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8bc8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8bcc:	f002 fb1e 	bl	db20c <strlen>
   d8bd0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8bd2:	b925      	cbnz	r5, d8bde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d8bd4:	4924      	ldr	r1, [pc, #144]	; (d8c68 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d8bd6:	a803      	add	r0, sp, #12
   d8bd8:	f001 fde0 	bl	da79c <strcpy>
   d8bdc:	e013      	b.n	d8c06 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8bde:	213c      	movs	r1, #60	; 0x3c
   d8be0:	fb95 f2f1 	sdiv	r2, r5, r1
   d8be4:	2a00      	cmp	r2, #0
   d8be6:	bfb8      	it	lt
   d8be8:	4252      	neglt	r2, r2
   d8bea:	fb92 f3f1 	sdiv	r3, r2, r1
   d8bee:	fb01 2213 	mls	r2, r1, r3, r2
   d8bf2:	9200      	str	r2, [sp, #0]
   d8bf4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8bf8:	4a1c      	ldr	r2, [pc, #112]	; (d8c6c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d8bfa:	fb95 f3f3 	sdiv	r3, r5, r3
   d8bfe:	2110      	movs	r1, #16
   d8c00:	a803      	add	r0, sp, #12
   d8c02:	f7fe fc75 	bl	d74f0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8c06:	4625      	mov	r5, r4
   d8c08:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8c0a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d8c0e:	45b2      	cmp	sl, r6
   d8c10:	d91b      	bls.n	d8c4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8c12:	782b      	ldrb	r3, [r5, #0]
   d8c14:	2b25      	cmp	r3, #37	; 0x25
   d8c16:	d116      	bne.n	d8c46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d8c18:	786b      	ldrb	r3, [r5, #1]
   d8c1a:	2b7a      	cmp	r3, #122	; 0x7a
   d8c1c:	d113      	bne.n	d8c46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d8c1e:	a803      	add	r0, sp, #12
   d8c20:	f002 faf4 	bl	db20c <strlen>
   d8c24:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8c26:	4430      	add	r0, r6
   d8c28:	ebc6 020a 	rsb	r2, r6, sl
   d8c2c:	1ca9      	adds	r1, r5, #2
   d8c2e:	4420      	add	r0, r4
   d8c30:	f001 fb06 	bl	da240 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8c34:	4642      	mov	r2, r8
   d8c36:	a903      	add	r1, sp, #12
   d8c38:	4628      	mov	r0, r5
   d8c3a:	f001 fb01 	bl	da240 <memcpy>
            len = strlen(format_str);
   d8c3e:	4620      	mov	r0, r4
   d8c40:	f002 fae4 	bl	db20c <strlen>
   d8c44:	4680      	mov	r8, r0
   d8c46:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8c48:	e7de      	b.n	d8c08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d8c4a:	464b      	mov	r3, r9
   d8c4c:	4622      	mov	r2, r4
   d8c4e:	2132      	movs	r1, #50	; 0x32
   d8c50:	a807      	add	r0, sp, #28
   d8c52:	f001 fe27 	bl	da8a4 <strftime>
    return String(buf);
   d8c56:	a907      	add	r1, sp, #28
   d8c58:	4638      	mov	r0, r7
   d8c5a:	f7ff fd67 	bl	d872c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d8c5e:	4638      	mov	r0, r7
   d8c60:	b024      	add	sp, #144	; 0x90
   d8c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c66:	bf00      	nop
   d8c68:	000dc9bd 	.word	0x000dc9bd
   d8c6c:	000dc432 	.word	0x000dc432

000d8c70 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d8c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8c72:	4605      	mov	r5, r0
   d8c74:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d8c76:	461c      	mov	r4, r3
   d8c78:	b913      	cbnz	r3, d8c80 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d8c7a:	4b12      	ldr	r3, [pc, #72]	; (d8cc4 <_ZN9TimeClass6formatElPKc+0x54>)
   d8c7c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d8c7e:	b12c      	cbz	r4, d8c8c <_ZN9TimeClass6formatElPKc+0x1c>
   d8c80:	4b11      	ldr	r3, [pc, #68]	; (d8cc8 <_ZN9TimeClass6formatElPKc+0x58>)
   d8c82:	4620      	mov	r0, r4
   d8c84:	6819      	ldr	r1, [r3, #0]
   d8c86:	f001 fd7f 	bl	da788 <strcmp>
   d8c8a:	b920      	cbnz	r0, d8c96 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d8c8c:	9901      	ldr	r1, [sp, #4]
   d8c8e:	4628      	mov	r0, r5
   d8c90:	f7ff ff6a 	bl	d8b68 <_ZN9TimeClass7timeStrEl>
   d8c94:	e013      	b.n	d8cbe <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d8c96:	4f0d      	ldr	r7, [pc, #52]	; (d8ccc <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d8c98:	9a01      	ldr	r2, [sp, #4]
   d8c9a:	683b      	ldr	r3, [r7, #0]
   d8c9c:	4e0c      	ldr	r6, [pc, #48]	; (d8cd0 <_ZN9TimeClass6formatElPKc+0x60>)
   d8c9e:	441a      	add	r2, r3
   d8ca0:	6833      	ldr	r3, [r6, #0]
   d8ca2:	a802      	add	r0, sp, #8
   d8ca4:	4413      	add	r3, r2
   d8ca6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d8caa:	f001 f9d1 	bl	da050 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8cae:	683a      	ldr	r2, [r7, #0]
   d8cb0:	6833      	ldr	r3, [r6, #0]
   d8cb2:	4601      	mov	r1, r0
   d8cb4:	4413      	add	r3, r2
   d8cb6:	4628      	mov	r0, r5
   d8cb8:	4622      	mov	r2, r4
   d8cba:	f7ff ff77 	bl	d8bac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d8cbe:	4628      	mov	r0, r5
   d8cc0:	b003      	add	sp, #12
   d8cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8cc4:	2003e490 	.word	0x2003e490
   d8cc8:	2003df74 	.word	0x2003df74
   d8ccc:	2003e49c 	.word	0x2003e49c
   d8cd0:	2003e494 	.word	0x2003e494

000d8cd4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d8cd4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d8cd6:	2000      	movs	r0, #0
   d8cd8:	f7fe f940 	bl	d6f5c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d8cdc:	4604      	mov	r4, r0
   d8cde:	b968      	cbnz	r0, d8cfc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8ce0:	f7fe fab6 	bl	d7250 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8ce4:	2801      	cmp	r0, #1
   d8ce6:	d10b      	bne.n	d8d00 <_ZN9TimeClass7isValidEv+0x2c>
   d8ce8:	4620      	mov	r0, r4
   d8cea:	f7fe fae9 	bl	d72c0 <system_thread_get_state>
   d8cee:	b938      	cbnz	r0, d8d00 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d8cf0:	f7ff feaa 	bl	d8a48 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8cf4:	b930      	cbnz	r0, d8d04 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d8cf6:	f7fe fb2b 	bl	d7350 <spark_process>
   d8cfa:	e7f9      	b.n	d8cf0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d8cfc:	2001      	movs	r0, #1
   d8cfe:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d8d00:	2000      	movs	r0, #0
   d8d02:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d8d04:	f7ff fea0 	bl	d8a48 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d8d08:	2000      	movs	r0, #0
   d8d0a:	f7fe f927 	bl	d6f5c <HAL_RTC_Time_Is_Valid>
   d8d0e:	3000      	adds	r0, #0
   d8d10:	bf18      	it	ne
   d8d12:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d8d14:	bd10      	pop	{r4, pc}

000d8d16 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d8d16:	b508      	push	{r3, lr}
    (void)isValid();
   d8d18:	f7ff ffdc 	bl	d8cd4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d8d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d8d20:	f7fe b90c 	b.w	d6f3c <HAL_RTC_Get_UnixTime>

000d8d24 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d8d24:	b508      	push	{r3, lr}
	return hour(now());
   d8d26:	f7ff fff6 	bl	d8d16 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8d2a:	f7ff fe5b 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d8d2e:	4b01      	ldr	r3, [pc, #4]	; (d8d34 <_ZN9TimeClass4hourEv+0x10>)
   d8d30:	6898      	ldr	r0, [r3, #8]
   d8d32:	bd08      	pop	{r3, pc}
   d8d34:	2003e46c 	.word	0x2003e46c

000d8d38 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d8d38:	b508      	push	{r3, lr}
	return minute(now());
   d8d3a:	f7ff ffec 	bl	d8d16 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8d3e:	f7ff fe51 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d8d42:	4b01      	ldr	r3, [pc, #4]	; (d8d48 <_ZN9TimeClass6minuteEv+0x10>)
   d8d44:	6858      	ldr	r0, [r3, #4]
   d8d46:	bd08      	pop	{r3, pc}
   d8d48:	2003e46c 	.word	0x2003e46c

000d8d4c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d8d4c:	b508      	push	{r3, lr}
	return day(now());
   d8d4e:	f7ff ffe2 	bl	d8d16 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8d52:	f7ff fe47 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d8d56:	4b01      	ldr	r3, [pc, #4]	; (d8d5c <_ZN9TimeClass3dayEv+0x10>)
   d8d58:	68d8      	ldr	r0, [r3, #12]
   d8d5a:	bd08      	pop	{r3, pc}
   d8d5c:	2003e46c 	.word	0x2003e46c

000d8d60 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
   d8d60:	b508      	push	{r3, lr}
	return weekday(now());
   d8d62:	f7ff ffd8 	bl	d8d16 <_ZN9TimeClass3nowEv>
}
   d8d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
   d8d6a:	f7ff be8b 	b.w	d8a84 <_ZN9TimeClass7weekdayEl>

000d8d6e <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d8d6e:	b508      	push	{r3, lr}
	return month(now());
   d8d70:	f7ff ffd1 	bl	d8d16 <_ZN9TimeClass3nowEv>
}
   d8d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d8d78:	f7ff be8e 	b.w	d8a98 <_ZN9TimeClass5monthEl>

000d8d7c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d8d7c:	b508      	push	{r3, lr}
	return year(now());
   d8d7e:	f7ff ffca 	bl	d8d16 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d8d82:	f7ff fe2f 	bl	d89e4 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d8d86:	4b01      	ldr	r3, [pc, #4]	; (d8d8c <_ZN9TimeClass4yearEv+0x10>)
   d8d88:	6958      	ldr	r0, [r3, #20]
   d8d8a:	bd08      	pop	{r3, pc}
   d8d8c:	2003e46c 	.word	0x2003e46c

000d8d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8d90:	4b02      	ldr	r3, [pc, #8]	; (d8d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8d92:	681a      	ldr	r2, [r3, #0]
   d8d94:	4b02      	ldr	r3, [pc, #8]	; (d8da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8d96:	601a      	str	r2, [r3, #0]
   d8d98:	4770      	bx	lr
   d8d9a:	bf00      	nop
   d8d9c:	2003df74 	.word	0x2003df74
   d8da0:	2003e490 	.word	0x2003e490

000d8da4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8da4:	4770      	bx	lr

000d8da6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8da6:	7441      	strb	r1, [r0, #17]
   d8da8:	4770      	bx	lr

000d8daa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8daa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8dac:	7c00      	ldrb	r0, [r0, #16]
   d8dae:	f7fe f9f5 	bl	d719c <HAL_USART_Available_Data_For_Write>
}
   d8db2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8db6:	bd08      	pop	{r3, pc}

000d8db8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8db8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8dba:	7c00      	ldrb	r0, [r0, #16]
   d8dbc:	f7fe f9c6 	bl	d714c <HAL_USART_Available_Data>
}
   d8dc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8dc4:	bd08      	pop	{r3, pc}

000d8dc6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8dc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8dc8:	7c00      	ldrb	r0, [r0, #16]
   d8dca:	f7fe f9cf 	bl	d716c <HAL_USART_Peek_Data>
}
   d8dce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8dd2:	bf28      	it	cs
   d8dd4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8dd8:	bd08      	pop	{r3, pc}

000d8dda <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8dda:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8ddc:	7c00      	ldrb	r0, [r0, #16]
   d8dde:	f7fe f9bd 	bl	d715c <HAL_USART_Read_Data>
}
   d8de2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8de6:	bf28      	it	cs
   d8de8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8dec:	bd08      	pop	{r3, pc}

000d8dee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8dee:	7c00      	ldrb	r0, [r0, #16]
   d8df0:	f7fe b9c4 	b.w	d717c <HAL_USART_Flush_Data>

000d8df4 <_ZN11USARTSerialD0Ev>:
   d8df4:	b510      	push	{r4, lr}
   d8df6:	2114      	movs	r1, #20
   d8df8:	4604      	mov	r4, r0
   d8dfa:	f000 fa88 	bl	d930e <_ZdlPvj>
   d8dfe:	4620      	mov	r0, r4
   d8e00:	bd10      	pop	{r4, pc}

000d8e02 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8e02:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8e04:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8e06:	4604      	mov	r4, r0
   d8e08:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8e0a:	b925      	cbnz	r5, d8e16 <_ZN11USARTSerial5writeEh+0x14>
   d8e0c:	7c00      	ldrb	r0, [r0, #16]
   d8e0e:	f7fe f9c5 	bl	d719c <HAL_USART_Available_Data_For_Write>
   d8e12:	2800      	cmp	r0, #0
   d8e14:	dd05      	ble.n	d8e22 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8e16:	4631      	mov	r1, r6
   d8e18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8e1e:	f7fe b98d 	b.w	d713c <HAL_USART_Write_Data>
  }
  return 0;
}
   d8e22:	4628      	mov	r0, r5
   d8e24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8e28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8e28:	b510      	push	{r4, lr}
   d8e2a:	4604      	mov	r4, r0
   d8e2c:	4608      	mov	r0, r1
   d8e2e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8e30:	2200      	movs	r2, #0
   d8e32:	6062      	str	r2, [r4, #4]
   d8e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8e38:	60a2      	str	r2, [r4, #8]
   d8e3a:	4a05      	ldr	r2, [pc, #20]	; (d8e50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8e3c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8e3e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8e40:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8e42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8e44:	461a      	mov	r2, r3
   d8e46:	f7fe f971 	bl	d712c <HAL_USART_Init>
}
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	bd10      	pop	{r4, pc}
   d8e4e:	bf00      	nop
   d8e50:	000dc464 	.word	0x000dc464

000d8e54 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8e54:	7c00      	ldrb	r0, [r0, #16]
   d8e56:	f7fe b999 	b.w	d718c <HAL_USART_Is_Enabled>
	...

000d8e5c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8e5c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8e5e:	4d0c      	ldr	r5, [pc, #48]	; (d8e90 <_Z22__fetch_global_Serial1v+0x34>)
   d8e60:	6829      	ldr	r1, [r5, #0]
   d8e62:	f011 0401 	ands.w	r4, r1, #1
   d8e66:	d111      	bne.n	d8e8c <_Z22__fetch_global_Serial1v+0x30>
   d8e68:	4628      	mov	r0, r5
   d8e6a:	f7fb f927 	bl	d40bc <__cxa_guard_acquire>
   d8e6e:	b168      	cbz	r0, d8e8c <_Z22__fetch_global_Serial1v+0x30>
   d8e70:	4a08      	ldr	r2, [pc, #32]	; (d8e94 <_Z22__fetch_global_Serial1v+0x38>)
   d8e72:	4b09      	ldr	r3, [pc, #36]	; (d8e98 <_Z22__fetch_global_Serial1v+0x3c>)
   d8e74:	4809      	ldr	r0, [pc, #36]	; (d8e9c <_Z22__fetch_global_Serial1v+0x40>)
   d8e76:	4621      	mov	r1, r4
   d8e78:	f7ff ffd6 	bl	d8e28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8e7c:	4628      	mov	r0, r5
   d8e7e:	f7fb f922 	bl	d40c6 <__cxa_guard_release>
   d8e82:	4a07      	ldr	r2, [pc, #28]	; (d8ea0 <_Z22__fetch_global_Serial1v+0x44>)
   d8e84:	4907      	ldr	r1, [pc, #28]	; (d8ea4 <_Z22__fetch_global_Serial1v+0x48>)
   d8e86:	4805      	ldr	r0, [pc, #20]	; (d8e9c <_Z22__fetch_global_Serial1v+0x40>)
   d8e88:	f000 fa3c 	bl	d9304 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8e8c:	4803      	ldr	r0, [pc, #12]	; (d8e9c <_Z22__fetch_global_Serial1v+0x40>)
   d8e8e:	bd38      	pop	{r3, r4, r5, pc}
   d8e90:	2003e53c 	.word	0x2003e53c
   d8e94:	2003e540 	.word	0x2003e540
   d8e98:	2003e4b8 	.word	0x2003e4b8
   d8e9c:	2003e4a4 	.word	0x2003e4a4
   d8ea0:	2003e02c 	.word	0x2003e02c
   d8ea4:	000d8da5 	.word	0x000d8da5

000d8ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8ea8:	7441      	strb	r1, [r0, #17]
   d8eaa:	4770      	bx	lr

000d8eac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8eac:	4770      	bx	lr

000d8eae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8eae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8eb0:	2100      	movs	r1, #0
   d8eb2:	7c00      	ldrb	r0, [r0, #16]
   d8eb4:	f7fe f992 	bl	d71dc <HAL_USB_USART_Receive_Data>
}
   d8eb8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8ebc:	bf28      	it	cs
   d8ebe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8ec2:	bd08      	pop	{r3, pc}

000d8ec4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8ec4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8ec6:	2101      	movs	r1, #1
   d8ec8:	7c00      	ldrb	r0, [r0, #16]
   d8eca:	f7fe f987 	bl	d71dc <HAL_USB_USART_Receive_Data>
}
   d8ece:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8ed2:	bf28      	it	cs
   d8ed4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8ed8:	bd08      	pop	{r3, pc}

000d8eda <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8eda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8edc:	7c00      	ldrb	r0, [r0, #16]
   d8ede:	f7fe f975 	bl	d71cc <HAL_USB_USART_Available_Data_For_Write>
}
   d8ee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ee6:	bd08      	pop	{r3, pc}

000d8ee8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8ee8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8eea:	7c00      	ldrb	r0, [r0, #16]
   d8eec:	f7fe f966 	bl	d71bc <HAL_USB_USART_Available_Data>
}
   d8ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ef4:	bd08      	pop	{r3, pc}

000d8ef6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8ef6:	7c00      	ldrb	r0, [r0, #16]
   d8ef8:	f7fe b980 	b.w	d71fc <HAL_USB_USART_Flush_Data>

000d8efc <_ZN9USBSerialD0Ev>:
   d8efc:	b510      	push	{r4, lr}
   d8efe:	2114      	movs	r1, #20
   d8f00:	4604      	mov	r4, r0
   d8f02:	f000 fa04 	bl	d930e <_ZdlPvj>
   d8f06:	4620      	mov	r0, r4
   d8f08:	bd10      	pop	{r4, pc}

000d8f0a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8f0a:	b538      	push	{r3, r4, r5, lr}
   d8f0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8f0e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8f10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8f12:	f7fe f95b 	bl	d71cc <HAL_USB_USART_Available_Data_For_Write>
   d8f16:	2800      	cmp	r0, #0
   d8f18:	dc01      	bgt.n	d8f1e <_ZN9USBSerial5writeEh+0x14>
   d8f1a:	7c60      	ldrb	r0, [r4, #17]
   d8f1c:	b128      	cbz	r0, d8f2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8f1e:	4629      	mov	r1, r5
   d8f20:	7c20      	ldrb	r0, [r4, #16]
   d8f22:	f7fe f963 	bl	d71ec <HAL_USB_USART_Send_Data>
   d8f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8f2a:	bd38      	pop	{r3, r4, r5, pc}

000d8f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8f2c:	b510      	push	{r4, lr}
   d8f2e:	4604      	mov	r4, r0
   d8f30:	2300      	movs	r3, #0
   d8f32:	6063      	str	r3, [r4, #4]
   d8f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8f38:	60a3      	str	r3, [r4, #8]
   d8f3a:	4b05      	ldr	r3, [pc, #20]	; (d8f50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8f3c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8f3e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8f40:	4608      	mov	r0, r1
{
  _serial = serial;
   d8f42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8f44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8f46:	4611      	mov	r1, r2
   d8f48:	f7fe f930 	bl	d71ac <HAL_USB_USART_Init>
}
   d8f4c:	4620      	mov	r0, r4
   d8f4e:	bd10      	pop	{r4, pc}
   d8f50:	000dc494 	.word	0x000dc494

000d8f54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8f54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8f56:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8f58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8f5a:	2100      	movs	r1, #0
   d8f5c:	f001 f996 	bl	da28c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8f60:	4620      	mov	r0, r4
   d8f62:	bd10      	pop	{r4, pc}

000d8f64 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8f64:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f66:	4d0e      	ldr	r5, [pc, #56]	; (d8fa0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8f68:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8f6a:	a801      	add	r0, sp, #4
   d8f6c:	f7ff fff2 	bl	d8f54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f70:	6829      	ldr	r1, [r5, #0]
   d8f72:	f011 0401 	ands.w	r4, r1, #1
   d8f76:	d110      	bne.n	d8f9a <_Z16_fetch_usbserialv+0x36>
   d8f78:	4628      	mov	r0, r5
   d8f7a:	f7fb f89f 	bl	d40bc <__cxa_guard_acquire>
   d8f7e:	b160      	cbz	r0, d8f9a <_Z16_fetch_usbserialv+0x36>
   d8f80:	aa01      	add	r2, sp, #4
   d8f82:	4621      	mov	r1, r4
   d8f84:	4807      	ldr	r0, [pc, #28]	; (d8fa4 <_Z16_fetch_usbserialv+0x40>)
   d8f86:	f7ff ffd1 	bl	d8f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8f8a:	4628      	mov	r0, r5
   d8f8c:	f7fb f89b 	bl	d40c6 <__cxa_guard_release>
   d8f90:	4a05      	ldr	r2, [pc, #20]	; (d8fa8 <_Z16_fetch_usbserialv+0x44>)
   d8f92:	4906      	ldr	r1, [pc, #24]	; (d8fac <_Z16_fetch_usbserialv+0x48>)
   d8f94:	4803      	ldr	r0, [pc, #12]	; (d8fa4 <_Z16_fetch_usbserialv+0x40>)
   d8f96:	f000 f9b5 	bl	d9304 <__aeabi_atexit>
	return _usbserial;
}
   d8f9a:	4802      	ldr	r0, [pc, #8]	; (d8fa4 <_Z16_fetch_usbserialv+0x40>)
   d8f9c:	b007      	add	sp, #28
   d8f9e:	bd30      	pop	{r4, r5, pc}
   d8fa0:	2003e5c4 	.word	0x2003e5c4
   d8fa4:	2003e5c8 	.word	0x2003e5c8
   d8fa8:	2003e02c 	.word	0x2003e02c
   d8fac:	000d8ead 	.word	0x000d8ead

000d8fb0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8fb2:	4b0c      	ldr	r3, [pc, #48]	; (d8fe4 <serialEventRun+0x34>)
   d8fb4:	b133      	cbz	r3, d8fc4 <serialEventRun+0x14>
   d8fb6:	f7ff ffd5 	bl	d8f64 <_Z16_fetch_usbserialv>
   d8fba:	6803      	ldr	r3, [r0, #0]
   d8fbc:	691b      	ldr	r3, [r3, #16]
   d8fbe:	4798      	blx	r3
   d8fc0:	2800      	cmp	r0, #0
   d8fc2:	dc09      	bgt.n	d8fd8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8fc4:	4b08      	ldr	r3, [pc, #32]	; (d8fe8 <serialEventRun+0x38>)
   d8fc6:	b163      	cbz	r3, d8fe2 <serialEventRun+0x32>
   d8fc8:	f7ff ff48 	bl	d8e5c <_Z22__fetch_global_Serial1v>
   d8fcc:	6803      	ldr	r3, [r0, #0]
   d8fce:	691b      	ldr	r3, [r3, #16]
   d8fd0:	4798      	blx	r3
   d8fd2:	2800      	cmp	r0, #0
   d8fd4:	dc03      	bgt.n	d8fde <serialEventRun+0x2e>
   d8fd6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8fd8:	f3af 8000 	nop.w
   d8fdc:	e7f2      	b.n	d8fc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8fde:	f3af 8000 	nop.w
   d8fe2:	bd08      	pop	{r3, pc}
	...

000d8fec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8fec:	b508      	push	{r3, lr}
	serialEventRun();
   d8fee:	f7ff ffdf 	bl	d8fb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8ff2:	f7fd ff9b 	bl	d6f2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8ff6:	4b01      	ldr	r3, [pc, #4]	; (d8ffc <_post_loop+0x10>)
   d8ff8:	6018      	str	r0, [r3, #0]
   d8ffa:	bd08      	pop	{r3, pc}
   d8ffc:	2003e5f0 	.word	0x2003e5f0

000d9000 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9000:	4802      	ldr	r0, [pc, #8]	; (d900c <_Z33system_initialize_user_backup_ramv+0xc>)
   d9002:	4a03      	ldr	r2, [pc, #12]	; (d9010 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9004:	4903      	ldr	r1, [pc, #12]	; (d9014 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9006:	1a12      	subs	r2, r2, r0
   d9008:	f001 b91a 	b.w	da240 <memcpy>
   d900c:	2003f400 	.word	0x2003f400
   d9010:	2003fc04 	.word	0x2003fc04
   d9014:	000dca40 	.word	0x000dca40

000d9018 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9018:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d901a:	2300      	movs	r3, #0
   d901c:	9300      	str	r3, [sp, #0]
   d901e:	461a      	mov	r2, r3
   d9020:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9024:	f7fe f966 	bl	d72f4 <system_ctrl_set_result>
}
   d9028:	b003      	add	sp, #12
   d902a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9030 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9030:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9032:	8843      	ldrh	r3, [r0, #2]
   d9034:	2b0a      	cmp	r3, #10
   d9036:	d008      	beq.n	d904a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9038:	2b50      	cmp	r3, #80	; 0x50
   d903a:	d109      	bne.n	d9050 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d903c:	4b09      	ldr	r3, [pc, #36]	; (d9064 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d903e:	681b      	ldr	r3, [r3, #0]
   d9040:	b13b      	cbz	r3, d9052 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9042:	b003      	add	sp, #12
   d9044:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9048:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d904a:	f7ff ffe5 	bl	d9018 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d904e:	e006      	b.n	d905e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9050:	2300      	movs	r3, #0
   d9052:	9300      	str	r3, [sp, #0]
   d9054:	461a      	mov	r2, r3
   d9056:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d905a:	f7fe f94b 	bl	d72f4 <system_ctrl_set_result>
        break;
    }
}
   d905e:	b003      	add	sp, #12
   d9060:	f85d fb04 	ldr.w	pc, [sp], #4
   d9064:	2003e5dc 	.word	0x2003e5dc

000d9068 <module_user_init_hook>:

void module_user_init_hook()
{
   d9068:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d906a:	4c10      	ldr	r4, [pc, #64]	; (d90ac <module_user_init_hook+0x44>)
   d906c:	4d10      	ldr	r5, [pc, #64]	; (d90b0 <module_user_init_hook+0x48>)
   d906e:	6823      	ldr	r3, [r4, #0]
   d9070:	42ab      	cmp	r3, r5
   d9072:	4b10      	ldr	r3, [pc, #64]	; (d90b4 <module_user_init_hook+0x4c>)
   d9074:	bf0c      	ite	eq
   d9076:	2201      	moveq	r2, #1
   d9078:	2200      	movne	r2, #0
   d907a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d907c:	d002      	beq.n	d9084 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d907e:	f7ff ffbf 	bl	d9000 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9082:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9084:	f7fd ff3a 	bl	d6efc <HAL_RNG_GetRandomNumber>
   d9088:	4604      	mov	r4, r0
    srand(seed);
   d908a:	f001 fb55 	bl	da738 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d908e:	4b0a      	ldr	r3, [pc, #40]	; (d90b8 <module_user_init_hook+0x50>)
   d9090:	b113      	cbz	r3, d9098 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d9092:	4620      	mov	r0, r4
   d9094:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9098:	2100      	movs	r1, #0
   d909a:	4807      	ldr	r0, [pc, #28]	; (d90b8 <module_user_init_hook+0x50>)
   d909c:	f7fe f9a8 	bl	d73f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d90a0:	2100      	movs	r1, #0
   d90a2:	4806      	ldr	r0, [pc, #24]	; (d90bc <module_user_init_hook+0x54>)
}
   d90a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d90a8:	f7fe b91a 	b.w	d72e0 <system_ctrl_set_app_request_handler>
   d90ac:	2003fc00 	.word	0x2003fc00
   d90b0:	9a271c1e 	.word	0x9a271c1e
   d90b4:	2003e5e0 	.word	0x2003e5e0
   d90b8:	00000000 	.word	0x00000000
   d90bc:	000d9031 	.word	0x000d9031

000d90c0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d90c0:	b508      	push	{r3, lr}
   d90c2:	4b02      	ldr	r3, [pc, #8]	; (d90cc <spark_protocol_instance+0xc>)
   d90c4:	681b      	ldr	r3, [r3, #0]
   d90c6:	681b      	ldr	r3, [r3, #0]
   d90c8:	9301      	str	r3, [sp, #4]
   d90ca:	bd08      	pop	{r3, pc}
   d90cc:	0003025c 	.word	0x0003025c

000d90d0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d90d0:	b508      	push	{r3, lr}
   d90d2:	4b02      	ldr	r3, [pc, #8]	; (d90dc <spark_protocol_set_product_id+0xc>)
   d90d4:	681b      	ldr	r3, [r3, #0]
   d90d6:	685b      	ldr	r3, [r3, #4]
   d90d8:	9301      	str	r3, [sp, #4]
   d90da:	bd08      	pop	{r3, pc}
   d90dc:	0003025c 	.word	0x0003025c

000d90e0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d90e0:	b508      	push	{r3, lr}
   d90e2:	4b02      	ldr	r3, [pc, #8]	; (d90ec <spark_protocol_set_product_firmware_version+0xc>)
   d90e4:	681b      	ldr	r3, [r3, #0]
   d90e6:	689b      	ldr	r3, [r3, #8]
   d90e8:	9301      	str	r3, [sp, #4]
   d90ea:	bd08      	pop	{r3, pc}
   d90ec:	0003025c 	.word	0x0003025c

000d90f0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d90f0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d90f2:	4e18      	ldr	r6, [pc, #96]	; (d9154 <pinAvailable+0x64>)
   d90f4:	6831      	ldr	r1, [r6, #0]
   d90f6:	f011 0501 	ands.w	r5, r1, #1
   d90fa:	4604      	mov	r4, r0
   d90fc:	d10a      	bne.n	d9114 <pinAvailable+0x24>
   d90fe:	4630      	mov	r0, r6
   d9100:	f7fa ffdc 	bl	d40bc <__cxa_guard_acquire>
   d9104:	b130      	cbz	r0, d9114 <pinAvailable+0x24>
   d9106:	4629      	mov	r1, r5
   d9108:	4813      	ldr	r0, [pc, #76]	; (d9158 <pinAvailable+0x68>)
   d910a:	f7ff fabb 	bl	d8684 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d910e:	4630      	mov	r0, r6
   d9110:	f7fa ffd9 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9114:	4810      	ldr	r0, [pc, #64]	; (d9158 <pinAvailable+0x68>)
   d9116:	f7ff fabf 	bl	d8698 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d911a:	b128      	cbz	r0, d9128 <pinAvailable+0x38>
   d911c:	f1a4 030b 	sub.w	r3, r4, #11
   d9120:	2b02      	cmp	r3, #2
   d9122:	d801      	bhi.n	d9128 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9124:	2000      	movs	r0, #0
   d9126:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9128:	f000 f8a0 	bl	d926c <_Z19__fetch_global_Wirev>
   d912c:	f7fe ff47 	bl	d7fbe <_ZN7TwoWire9isEnabledEv>
   d9130:	b108      	cbz	r0, d9136 <pinAvailable+0x46>
   d9132:	2c01      	cmp	r4, #1
   d9134:	d9f6      	bls.n	d9124 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9136:	f7ff fe91 	bl	d8e5c <_Z22__fetch_global_Serial1v>
   d913a:	f7ff fe8b 	bl	d8e54 <_ZN11USARTSerial9isEnabledEv>
   d913e:	b118      	cbz	r0, d9148 <pinAvailable+0x58>
   d9140:	f1a4 0309 	sub.w	r3, r4, #9
   d9144:	2b01      	cmp	r3, #1
   d9146:	d9ed      	bls.n	d9124 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9148:	2c23      	cmp	r4, #35	; 0x23
   d914a:	bf8c      	ite	hi
   d914c:	2000      	movhi	r0, #0
   d914e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d9150:	bd70      	pop	{r4, r5, r6, pc}
   d9152:	bf00      	nop
   d9154:	2003e5e4 	.word	0x2003e5e4
   d9158:	2003e5e8 	.word	0x2003e5e8

000d915c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d915c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d915e:	b538      	push	{r3, r4, r5, lr}
   d9160:	4604      	mov	r4, r0
   d9162:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9164:	d80a      	bhi.n	d917c <pinMode+0x20>
   d9166:	29ff      	cmp	r1, #255	; 0xff
   d9168:	d008      	beq.n	d917c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d916a:	f7ff ffc1 	bl	d90f0 <pinAvailable>
   d916e:	b128      	cbz	r0, d917c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9170:	4629      	mov	r1, r5
   d9172:	4620      	mov	r0, r4
}
   d9174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9178:	f7fd bf10 	b.w	d6f9c <HAL_Pin_Mode>
   d917c:	bd38      	pop	{r3, r4, r5, pc}

000d917e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d917e:	b538      	push	{r3, r4, r5, lr}
   d9180:	4604      	mov	r4, r0
   d9182:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9184:	f7fd ff12 	bl	d6fac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9188:	28ff      	cmp	r0, #255	; 0xff
   d918a:	d010      	beq.n	d91ae <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d918c:	2806      	cmp	r0, #6
   d918e:	d804      	bhi.n	d919a <digitalWrite+0x1c>
   d9190:	234d      	movs	r3, #77	; 0x4d
   d9192:	fa23 f000 	lsr.w	r0, r3, r0
   d9196:	07c3      	lsls	r3, r0, #31
   d9198:	d409      	bmi.n	d91ae <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d919a:	4620      	mov	r0, r4
   d919c:	f7ff ffa8 	bl	d90f0 <pinAvailable>
   d91a0:	b128      	cbz	r0, d91ae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d91a2:	4629      	mov	r1, r5
   d91a4:	4620      	mov	r0, r4
}
   d91a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d91aa:	f7fd bf07 	b.w	d6fbc <HAL_GPIO_Write>
   d91ae:	bd38      	pop	{r3, r4, r5, pc}

000d91b0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d91b0:	b510      	push	{r4, lr}
   d91b2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d91b4:	f7fd fefa 	bl	d6fac <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d91b8:	3804      	subs	r0, #4
   d91ba:	b2c0      	uxtb	r0, r0
   d91bc:	2801      	cmp	r0, #1
   d91be:	d908      	bls.n	d91d2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d91c0:	4620      	mov	r0, r4
   d91c2:	f7ff ff95 	bl	d90f0 <pinAvailable>
   d91c6:	b120      	cbz	r0, d91d2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d91c8:	4620      	mov	r0, r4
}
   d91ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d91ce:	f7fd befd 	b.w	d6fcc <HAL_GPIO_Read>
}
   d91d2:	2000      	movs	r0, #0
   d91d4:	bd10      	pop	{r4, pc}

000d91d6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d91d6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d91d8:	b510      	push	{r4, lr}
   d91da:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d91dc:	bf9c      	itt	ls
   d91de:	340e      	addls	r4, #14
   d91e0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d91e2:	4620      	mov	r0, r4
   d91e4:	f7ff ff84 	bl	d90f0 <pinAvailable>
   d91e8:	b150      	cbz	r0, d9200 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d91ea:	2103      	movs	r1, #3
   d91ec:	4620      	mov	r0, r4
   d91ee:	f7fd fecd 	bl	d6f8c <HAL_Validate_Pin_Function>
   d91f2:	2803      	cmp	r0, #3
   d91f4:	d104      	bne.n	d9200 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d91f6:	4620      	mov	r0, r4
}
   d91f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d91fc:	f7fd befe 	b.w	d6ffc <HAL_ADC_Read>
}
   d9200:	2000      	movs	r0, #0
   d9202:	bd10      	pop	{r4, pc}

000d9204 <_Z17acquireWireBufferv>:
   d9204:	b570      	push	{r4, r5, r6, lr}
   d9206:	4604      	mov	r4, r0
   d9208:	2514      	movs	r5, #20
   d920a:	462a      	mov	r2, r5
   d920c:	4e09      	ldr	r6, [pc, #36]	; (d9234 <_Z17acquireWireBufferv+0x30>)
   d920e:	2100      	movs	r1, #0
   d9210:	f001 f83c 	bl	da28c <memset>
   d9214:	8025      	strh	r5, [r4, #0]
   d9216:	2520      	movs	r5, #32
   d9218:	4631      	mov	r1, r6
   d921a:	60a5      	str	r5, [r4, #8]
   d921c:	6125      	str	r5, [r4, #16]
   d921e:	4628      	mov	r0, r5
   d9220:	f000 f88f 	bl	d9342 <_ZnajRKSt9nothrow_t>
   d9224:	4631      	mov	r1, r6
   d9226:	6060      	str	r0, [r4, #4]
   d9228:	4628      	mov	r0, r5
   d922a:	f000 f88a 	bl	d9342 <_ZnajRKSt9nothrow_t>
   d922e:	60e0      	str	r0, [r4, #12]
   d9230:	4620      	mov	r0, r4
   d9232:	bd70      	pop	{r4, r5, r6, pc}
   d9234:	000dc4bc 	.word	0x000dc4bc

000d9238 <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d9238:	b570      	push	{r4, r5, r6, lr}
   d923a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d923c:	2514      	movs	r5, #20
   d923e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9240:	4e09      	ldr	r6, [pc, #36]	; (d9268 <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d9242:	2100      	movs	r1, #0
   d9244:	f001 f822 	bl	da28c <memset>
   d9248:	8025      	strh	r5, [r4, #0]
   d924a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d924c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d924e:	60a5      	str	r5, [r4, #8]
   d9250:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9252:	4628      	mov	r0, r5
   d9254:	f000 f875 	bl	d9342 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9258:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d925a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d925c:	4628      	mov	r0, r5
   d925e:	f000 f870 	bl	d9342 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d9262:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d9264:	4620      	mov	r0, r4
   d9266:	bd70      	pop	{r4, r5, r6, pc}
   d9268:	000dc4bc 	.word	0x000dc4bc

000d926c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d926c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d926e:	4d0e      	ldr	r5, [pc, #56]	; (d92a8 <_Z19__fetch_global_Wirev+0x3c>)
   d9270:	6829      	ldr	r1, [r5, #0]
   d9272:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9276:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9278:	d113      	bne.n	d92a2 <_Z19__fetch_global_Wirev+0x36>
   d927a:	4628      	mov	r0, r5
   d927c:	f7fa ff1e 	bl	d40bc <__cxa_guard_acquire>
   d9280:	b178      	cbz	r0, d92a2 <_Z19__fetch_global_Wirev+0x36>
   d9282:	a801      	add	r0, sp, #4
   d9284:	f7ff ffbe 	bl	d9204 <_Z17acquireWireBufferv>
   d9288:	aa01      	add	r2, sp, #4
   d928a:	4621      	mov	r1, r4
   d928c:	4807      	ldr	r0, [pc, #28]	; (d92ac <_Z19__fetch_global_Wirev+0x40>)
   d928e:	f7fe fe45 	bl	d7f1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d9292:	4628      	mov	r0, r5
   d9294:	f7fa ff17 	bl	d40c6 <__cxa_guard_release>
   d9298:	4a05      	ldr	r2, [pc, #20]	; (d92b0 <_Z19__fetch_global_Wirev+0x44>)
   d929a:	4906      	ldr	r1, [pc, #24]	; (d92b4 <_Z19__fetch_global_Wirev+0x48>)
   d929c:	4803      	ldr	r0, [pc, #12]	; (d92ac <_Z19__fetch_global_Wirev+0x40>)
   d929e:	f000 f831 	bl	d9304 <__aeabi_atexit>
	return wire;
}
   d92a2:	4802      	ldr	r0, [pc, #8]	; (d92ac <_Z19__fetch_global_Wirev+0x40>)
   d92a4:	b007      	add	sp, #28
   d92a6:	bd30      	pop	{r4, r5, pc}
   d92a8:	2003e5f4 	.word	0x2003e5f4
   d92ac:	2003e60c 	.word	0x2003e60c
   d92b0:	2003e02c 	.word	0x2003e02c
   d92b4:	000d7ec5 	.word	0x000d7ec5

000d92b8 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d92b8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d92ba:	4c0e      	ldr	r4, [pc, #56]	; (d92f4 <_Z20__fetch_global_Wire1v+0x3c>)
   d92bc:	6823      	ldr	r3, [r4, #0]
   d92be:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d92c0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d92c2:	d413      	bmi.n	d92ec <_Z20__fetch_global_Wire1v+0x34>
   d92c4:	4620      	mov	r0, r4
   d92c6:	f7fa fef9 	bl	d40bc <__cxa_guard_acquire>
   d92ca:	b178      	cbz	r0, d92ec <_Z20__fetch_global_Wire1v+0x34>
   d92cc:	a801      	add	r0, sp, #4
   d92ce:	f7ff ffb3 	bl	d9238 <_Z18acquireWire1Bufferv>
   d92d2:	aa01      	add	r2, sp, #4
   d92d4:	2101      	movs	r1, #1
   d92d6:	4808      	ldr	r0, [pc, #32]	; (d92f8 <_Z20__fetch_global_Wire1v+0x40>)
   d92d8:	f7fe fe20 	bl	d7f1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d92dc:	4620      	mov	r0, r4
   d92de:	f7fa fef2 	bl	d40c6 <__cxa_guard_release>
   d92e2:	4a06      	ldr	r2, [pc, #24]	; (d92fc <_Z20__fetch_global_Wire1v+0x44>)
   d92e4:	4906      	ldr	r1, [pc, #24]	; (d9300 <_Z20__fetch_global_Wire1v+0x48>)
   d92e6:	4804      	ldr	r0, [pc, #16]	; (d92f8 <_Z20__fetch_global_Wire1v+0x40>)
   d92e8:	f000 f80c 	bl	d9304 <__aeabi_atexit>
	return wire;
}
   d92ec:	4802      	ldr	r0, [pc, #8]	; (d92f8 <_Z20__fetch_global_Wire1v+0x40>)
   d92ee:	b006      	add	sp, #24
   d92f0:	bd10      	pop	{r4, pc}
   d92f2:	bf00      	nop
   d92f4:	2003e620 	.word	0x2003e620
   d92f8:	2003e5f8 	.word	0x2003e5f8
   d92fc:	2003e02c 	.word	0x2003e02c
   d9300:	000d7ec5 	.word	0x000d7ec5

000d9304 <__aeabi_atexit>:
   d9304:	460b      	mov	r3, r1
   d9306:	4601      	mov	r1, r0
   d9308:	4618      	mov	r0, r3
   d930a:	f000 bde9 	b.w	d9ee0 <__cxa_atexit>

000d930e <_ZdlPvj>:
   d930e:	f7fa bec6 	b.w	d409e <_ZdlPv>
	...

000d9314 <_ZSt15get_new_handlerv>:
   d9314:	4b02      	ldr	r3, [pc, #8]	; (d9320 <_ZSt15get_new_handlerv+0xc>)
   d9316:	6818      	ldr	r0, [r3, #0]
   d9318:	f3bf 8f5f 	dmb	sy
   d931c:	4770      	bx	lr
   d931e:	bf00      	nop
   d9320:	2003e624 	.word	0x2003e624

000d9324 <_ZnwjRKSt9nothrow_t>:
   d9324:	b510      	push	{r4, lr}
   d9326:	2800      	cmp	r0, #0
   d9328:	bf14      	ite	ne
   d932a:	4604      	movne	r4, r0
   d932c:	2401      	moveq	r4, #1
   d932e:	4620      	mov	r0, r4
   d9330:	f7fe f8b6 	bl	d74a0 <malloc>
   d9334:	b920      	cbnz	r0, d9340 <_ZnwjRKSt9nothrow_t+0x1c>
   d9336:	f7ff ffed 	bl	d9314 <_ZSt15get_new_handlerv>
   d933a:	b108      	cbz	r0, d9340 <_ZnwjRKSt9nothrow_t+0x1c>
   d933c:	4780      	blx	r0
   d933e:	e7f6      	b.n	d932e <_ZnwjRKSt9nothrow_t+0xa>
   d9340:	bd10      	pop	{r4, pc}

000d9342 <_ZnajRKSt9nothrow_t>:
   d9342:	f7ff bfef 	b.w	d9324 <_ZnwjRKSt9nothrow_t>

000d9346 <_ZSt25__throw_bad_function_callv>:
   d9346:	b508      	push	{r3, lr}
   d9348:	f7fe f8e2 	bl	d7510 <abort>

000d934c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d934c:	4b24      	ldr	r3, [pc, #144]	; (d93e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d934e:	681a      	ldr	r2, [r3, #0]
   d9350:	07d0      	lsls	r0, r2, #31
   d9352:	bf5c      	itt	pl
   d9354:	2201      	movpl	r2, #1
   d9356:	601a      	strpl	r2, [r3, #0]
   d9358:	4b22      	ldr	r3, [pc, #136]	; (d93e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d935a:	681a      	ldr	r2, [r3, #0]
   d935c:	07d1      	lsls	r1, r2, #31
   d935e:	bf5c      	itt	pl
   d9360:	2201      	movpl	r2, #1
   d9362:	601a      	strpl	r2, [r3, #0]
   d9364:	4b20      	ldr	r3, [pc, #128]	; (d93e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9366:	681a      	ldr	r2, [r3, #0]
   d9368:	07d2      	lsls	r2, r2, #31
   d936a:	bf5c      	itt	pl
   d936c:	2201      	movpl	r2, #1
   d936e:	601a      	strpl	r2, [r3, #0]
   d9370:	4b1e      	ldr	r3, [pc, #120]	; (d93ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d9372:	681a      	ldr	r2, [r3, #0]
   d9374:	07d0      	lsls	r0, r2, #31
   d9376:	bf5c      	itt	pl
   d9378:	2201      	movpl	r2, #1
   d937a:	601a      	strpl	r2, [r3, #0]
   d937c:	4b1c      	ldr	r3, [pc, #112]	; (d93f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d937e:	681a      	ldr	r2, [r3, #0]
   d9380:	07d1      	lsls	r1, r2, #31
   d9382:	bf5c      	itt	pl
   d9384:	2201      	movpl	r2, #1
   d9386:	601a      	strpl	r2, [r3, #0]
   d9388:	4b1a      	ldr	r3, [pc, #104]	; (d93f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d938a:	681a      	ldr	r2, [r3, #0]
   d938c:	07d2      	lsls	r2, r2, #31
   d938e:	bf5c      	itt	pl
   d9390:	2201      	movpl	r2, #1
   d9392:	601a      	strpl	r2, [r3, #0]
   d9394:	4b18      	ldr	r3, [pc, #96]	; (d93f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9396:	681a      	ldr	r2, [r3, #0]
   d9398:	07d0      	lsls	r0, r2, #31
   d939a:	bf5c      	itt	pl
   d939c:	2201      	movpl	r2, #1
   d939e:	601a      	strpl	r2, [r3, #0]
   d93a0:	4b16      	ldr	r3, [pc, #88]	; (d93fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d93a2:	681a      	ldr	r2, [r3, #0]
   d93a4:	07d1      	lsls	r1, r2, #31
   d93a6:	bf5c      	itt	pl
   d93a8:	2201      	movpl	r2, #1
   d93aa:	601a      	strpl	r2, [r3, #0]
   d93ac:	4b14      	ldr	r3, [pc, #80]	; (d9400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d93ae:	681a      	ldr	r2, [r3, #0]
   d93b0:	07d2      	lsls	r2, r2, #31
   d93b2:	bf5c      	itt	pl
   d93b4:	2201      	movpl	r2, #1
   d93b6:	601a      	strpl	r2, [r3, #0]
   d93b8:	4b12      	ldr	r3, [pc, #72]	; (d9404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d93ba:	681a      	ldr	r2, [r3, #0]
   d93bc:	07d0      	lsls	r0, r2, #31
   d93be:	bf5c      	itt	pl
   d93c0:	2201      	movpl	r2, #1
   d93c2:	601a      	strpl	r2, [r3, #0]
   d93c4:	4b10      	ldr	r3, [pc, #64]	; (d9408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d93c6:	681a      	ldr	r2, [r3, #0]
   d93c8:	07d1      	lsls	r1, r2, #31
   d93ca:	bf5c      	itt	pl
   d93cc:	2201      	movpl	r2, #1
   d93ce:	601a      	strpl	r2, [r3, #0]
   d93d0:	4b0e      	ldr	r3, [pc, #56]	; (d940c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d93d2:	681a      	ldr	r2, [r3, #0]
   d93d4:	07d2      	lsls	r2, r2, #31
   d93d6:	bf5c      	itt	pl
   d93d8:	2201      	movpl	r2, #1
   d93da:	601a      	strpl	r2, [r3, #0]
   d93dc:	4770      	bx	lr
   d93de:	bf00      	nop
   d93e0:	2003e654 	.word	0x2003e654
   d93e4:	2003e650 	.word	0x2003e650
   d93e8:	2003e64c 	.word	0x2003e64c
   d93ec:	2003e648 	.word	0x2003e648
   d93f0:	2003e644 	.word	0x2003e644
   d93f4:	2003e640 	.word	0x2003e640
   d93f8:	2003e63c 	.word	0x2003e63c
   d93fc:	2003e638 	.word	0x2003e638
   d9400:	2003e634 	.word	0x2003e634
   d9404:	2003e630 	.word	0x2003e630
   d9408:	2003e62c 	.word	0x2003e62c
   d940c:	2003e628 	.word	0x2003e628

000d9410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9410:	4b18      	ldr	r3, [pc, #96]	; (d9474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9412:	681a      	ldr	r2, [r3, #0]
   d9414:	07d1      	lsls	r1, r2, #31
   d9416:	bf5c      	itt	pl
   d9418:	2201      	movpl	r2, #1
   d941a:	601a      	strpl	r2, [r3, #0]
   d941c:	4b16      	ldr	r3, [pc, #88]	; (d9478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d941e:	681a      	ldr	r2, [r3, #0]
   d9420:	07d2      	lsls	r2, r2, #31
   d9422:	bf5c      	itt	pl
   d9424:	2201      	movpl	r2, #1
   d9426:	601a      	strpl	r2, [r3, #0]
   d9428:	4b14      	ldr	r3, [pc, #80]	; (d947c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d942a:	681a      	ldr	r2, [r3, #0]
   d942c:	07d0      	lsls	r0, r2, #31
   d942e:	bf5c      	itt	pl
   d9430:	2201      	movpl	r2, #1
   d9432:	601a      	strpl	r2, [r3, #0]
   d9434:	4b12      	ldr	r3, [pc, #72]	; (d9480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9436:	681a      	ldr	r2, [r3, #0]
   d9438:	07d1      	lsls	r1, r2, #31
   d943a:	bf5c      	itt	pl
   d943c:	2201      	movpl	r2, #1
   d943e:	601a      	strpl	r2, [r3, #0]
   d9440:	4b10      	ldr	r3, [pc, #64]	; (d9484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9442:	681a      	ldr	r2, [r3, #0]
   d9444:	07d2      	lsls	r2, r2, #31
   d9446:	bf5c      	itt	pl
   d9448:	2201      	movpl	r2, #1
   d944a:	601a      	strpl	r2, [r3, #0]
   d944c:	4b0e      	ldr	r3, [pc, #56]	; (d9488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d944e:	681a      	ldr	r2, [r3, #0]
   d9450:	07d0      	lsls	r0, r2, #31
   d9452:	bf5c      	itt	pl
   d9454:	2201      	movpl	r2, #1
   d9456:	601a      	strpl	r2, [r3, #0]
   d9458:	4b0c      	ldr	r3, [pc, #48]	; (d948c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d945a:	681a      	ldr	r2, [r3, #0]
   d945c:	07d1      	lsls	r1, r2, #31
   d945e:	bf5c      	itt	pl
   d9460:	2201      	movpl	r2, #1
   d9462:	601a      	strpl	r2, [r3, #0]
   d9464:	4b0a      	ldr	r3, [pc, #40]	; (d9490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9466:	681a      	ldr	r2, [r3, #0]
   d9468:	07d2      	lsls	r2, r2, #31
   d946a:	bf5c      	itt	pl
   d946c:	2201      	movpl	r2, #1
   d946e:	601a      	strpl	r2, [r3, #0]
   d9470:	4770      	bx	lr
   d9472:	bf00      	nop
   d9474:	2003e674 	.word	0x2003e674
   d9478:	2003e670 	.word	0x2003e670
   d947c:	2003e66c 	.word	0x2003e66c
   d9480:	2003e668 	.word	0x2003e668
   d9484:	2003e664 	.word	0x2003e664
   d9488:	2003e660 	.word	0x2003e660
   d948c:	2003e65c 	.word	0x2003e65c
   d9490:	2003e658 	.word	0x2003e658

000d9494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9494:	4b18      	ldr	r3, [pc, #96]	; (d94f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9496:	681a      	ldr	r2, [r3, #0]
   d9498:	07d1      	lsls	r1, r2, #31
   d949a:	bf5c      	itt	pl
   d949c:	2201      	movpl	r2, #1
   d949e:	601a      	strpl	r2, [r3, #0]
   d94a0:	4b16      	ldr	r3, [pc, #88]	; (d94fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d94a2:	681a      	ldr	r2, [r3, #0]
   d94a4:	07d2      	lsls	r2, r2, #31
   d94a6:	bf5c      	itt	pl
   d94a8:	2201      	movpl	r2, #1
   d94aa:	601a      	strpl	r2, [r3, #0]
   d94ac:	4b14      	ldr	r3, [pc, #80]	; (d9500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d94ae:	681a      	ldr	r2, [r3, #0]
   d94b0:	07d0      	lsls	r0, r2, #31
   d94b2:	bf5c      	itt	pl
   d94b4:	2201      	movpl	r2, #1
   d94b6:	601a      	strpl	r2, [r3, #0]
   d94b8:	4b12      	ldr	r3, [pc, #72]	; (d9504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d94ba:	681a      	ldr	r2, [r3, #0]
   d94bc:	07d1      	lsls	r1, r2, #31
   d94be:	bf5c      	itt	pl
   d94c0:	2201      	movpl	r2, #1
   d94c2:	601a      	strpl	r2, [r3, #0]
   d94c4:	4b10      	ldr	r3, [pc, #64]	; (d9508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d94c6:	681a      	ldr	r2, [r3, #0]
   d94c8:	07d2      	lsls	r2, r2, #31
   d94ca:	bf5c      	itt	pl
   d94cc:	2201      	movpl	r2, #1
   d94ce:	601a      	strpl	r2, [r3, #0]
   d94d0:	4b0e      	ldr	r3, [pc, #56]	; (d950c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d94d2:	681a      	ldr	r2, [r3, #0]
   d94d4:	07d0      	lsls	r0, r2, #31
   d94d6:	bf5c      	itt	pl
   d94d8:	2201      	movpl	r2, #1
   d94da:	601a      	strpl	r2, [r3, #0]
   d94dc:	4b0c      	ldr	r3, [pc, #48]	; (d9510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d94de:	681a      	ldr	r2, [r3, #0]
   d94e0:	07d1      	lsls	r1, r2, #31
   d94e2:	bf5c      	itt	pl
   d94e4:	2201      	movpl	r2, #1
   d94e6:	601a      	strpl	r2, [r3, #0]
   d94e8:	4b0a      	ldr	r3, [pc, #40]	; (d9514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d94ea:	681a      	ldr	r2, [r3, #0]
   d94ec:	07d2      	lsls	r2, r2, #31
   d94ee:	bf5c      	itt	pl
   d94f0:	2201      	movpl	r2, #1
   d94f2:	601a      	strpl	r2, [r3, #0]
   d94f4:	4770      	bx	lr
   d94f6:	bf00      	nop
   d94f8:	2003e694 	.word	0x2003e694
   d94fc:	2003e690 	.word	0x2003e690
   d9500:	2003e68c 	.word	0x2003e68c
   d9504:	2003e688 	.word	0x2003e688
   d9508:	2003e684 	.word	0x2003e684
   d950c:	2003e680 	.word	0x2003e680
   d9510:	2003e67c 	.word	0x2003e67c
   d9514:	2003e678 	.word	0x2003e678

000d9518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9518:	4b24      	ldr	r3, [pc, #144]	; (d95ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d951a:	681a      	ldr	r2, [r3, #0]
   d951c:	07d0      	lsls	r0, r2, #31
   d951e:	bf5c      	itt	pl
   d9520:	2201      	movpl	r2, #1
   d9522:	601a      	strpl	r2, [r3, #0]
   d9524:	4b22      	ldr	r3, [pc, #136]	; (d95b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9526:	681a      	ldr	r2, [r3, #0]
   d9528:	07d1      	lsls	r1, r2, #31
   d952a:	bf5c      	itt	pl
   d952c:	2201      	movpl	r2, #1
   d952e:	601a      	strpl	r2, [r3, #0]
   d9530:	4b20      	ldr	r3, [pc, #128]	; (d95b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9532:	681a      	ldr	r2, [r3, #0]
   d9534:	07d2      	lsls	r2, r2, #31
   d9536:	bf5c      	itt	pl
   d9538:	2201      	movpl	r2, #1
   d953a:	601a      	strpl	r2, [r3, #0]
   d953c:	4b1e      	ldr	r3, [pc, #120]	; (d95b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d953e:	681a      	ldr	r2, [r3, #0]
   d9540:	07d0      	lsls	r0, r2, #31
   d9542:	bf5c      	itt	pl
   d9544:	2201      	movpl	r2, #1
   d9546:	601a      	strpl	r2, [r3, #0]
   d9548:	4b1c      	ldr	r3, [pc, #112]	; (d95bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d954a:	681a      	ldr	r2, [r3, #0]
   d954c:	07d1      	lsls	r1, r2, #31
   d954e:	bf5c      	itt	pl
   d9550:	2201      	movpl	r2, #1
   d9552:	601a      	strpl	r2, [r3, #0]
   d9554:	4b1a      	ldr	r3, [pc, #104]	; (d95c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9556:	681a      	ldr	r2, [r3, #0]
   d9558:	07d2      	lsls	r2, r2, #31
   d955a:	bf5c      	itt	pl
   d955c:	2201      	movpl	r2, #1
   d955e:	601a      	strpl	r2, [r3, #0]
   d9560:	4b18      	ldr	r3, [pc, #96]	; (d95c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9562:	681a      	ldr	r2, [r3, #0]
   d9564:	07d0      	lsls	r0, r2, #31
   d9566:	bf5c      	itt	pl
   d9568:	2201      	movpl	r2, #1
   d956a:	601a      	strpl	r2, [r3, #0]
   d956c:	4b16      	ldr	r3, [pc, #88]	; (d95c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d956e:	681a      	ldr	r2, [r3, #0]
   d9570:	07d1      	lsls	r1, r2, #31
   d9572:	bf5c      	itt	pl
   d9574:	2201      	movpl	r2, #1
   d9576:	601a      	strpl	r2, [r3, #0]
   d9578:	4b14      	ldr	r3, [pc, #80]	; (d95cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d957a:	681a      	ldr	r2, [r3, #0]
   d957c:	07d2      	lsls	r2, r2, #31
   d957e:	bf5c      	itt	pl
   d9580:	2201      	movpl	r2, #1
   d9582:	601a      	strpl	r2, [r3, #0]
   d9584:	4b12      	ldr	r3, [pc, #72]	; (d95d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9586:	681a      	ldr	r2, [r3, #0]
   d9588:	07d0      	lsls	r0, r2, #31
   d958a:	bf5c      	itt	pl
   d958c:	2201      	movpl	r2, #1
   d958e:	601a      	strpl	r2, [r3, #0]
   d9590:	4b10      	ldr	r3, [pc, #64]	; (d95d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9592:	681a      	ldr	r2, [r3, #0]
   d9594:	07d1      	lsls	r1, r2, #31
   d9596:	bf5c      	itt	pl
   d9598:	2201      	movpl	r2, #1
   d959a:	601a      	strpl	r2, [r3, #0]
   d959c:	4b0e      	ldr	r3, [pc, #56]	; (d95d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d959e:	681a      	ldr	r2, [r3, #0]
   d95a0:	07d2      	lsls	r2, r2, #31
   d95a2:	bf5c      	itt	pl
   d95a4:	2201      	movpl	r2, #1
   d95a6:	601a      	strpl	r2, [r3, #0]
   d95a8:	4770      	bx	lr
   d95aa:	bf00      	nop
   d95ac:	2003e6c4 	.word	0x2003e6c4
   d95b0:	2003e6c0 	.word	0x2003e6c0
   d95b4:	2003e6bc 	.word	0x2003e6bc
   d95b8:	2003e6b8 	.word	0x2003e6b8
   d95bc:	2003e6b4 	.word	0x2003e6b4
   d95c0:	2003e6b0 	.word	0x2003e6b0
   d95c4:	2003e6ac 	.word	0x2003e6ac
   d95c8:	2003e6a8 	.word	0x2003e6a8
   d95cc:	2003e6a4 	.word	0x2003e6a4
   d95d0:	2003e6a0 	.word	0x2003e6a0
   d95d4:	2003e69c 	.word	0x2003e69c
   d95d8:	2003e698 	.word	0x2003e698

000d95dc <__aeabi_drsub>:
   d95dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d95e0:	e002      	b.n	d95e8 <__adddf3>
   d95e2:	bf00      	nop

000d95e4 <__aeabi_dsub>:
   d95e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d95e8 <__adddf3>:
   d95e8:	b530      	push	{r4, r5, lr}
   d95ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d95ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d95f2:	ea94 0f05 	teq	r4, r5
   d95f6:	bf08      	it	eq
   d95f8:	ea90 0f02 	teqeq	r0, r2
   d95fc:	bf1f      	itttt	ne
   d95fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9602:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9606:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d960a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d960e:	f000 80e2 	beq.w	d97d6 <__adddf3+0x1ee>
   d9612:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9616:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d961a:	bfb8      	it	lt
   d961c:	426d      	neglt	r5, r5
   d961e:	dd0c      	ble.n	d963a <__adddf3+0x52>
   d9620:	442c      	add	r4, r5
   d9622:	ea80 0202 	eor.w	r2, r0, r2
   d9626:	ea81 0303 	eor.w	r3, r1, r3
   d962a:	ea82 0000 	eor.w	r0, r2, r0
   d962e:	ea83 0101 	eor.w	r1, r3, r1
   d9632:	ea80 0202 	eor.w	r2, r0, r2
   d9636:	ea81 0303 	eor.w	r3, r1, r3
   d963a:	2d36      	cmp	r5, #54	; 0x36
   d963c:	bf88      	it	hi
   d963e:	bd30      	pophi	{r4, r5, pc}
   d9640:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9644:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9648:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d964c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9650:	d002      	beq.n	d9658 <__adddf3+0x70>
   d9652:	4240      	negs	r0, r0
   d9654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9658:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d965c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9660:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9664:	d002      	beq.n	d966c <__adddf3+0x84>
   d9666:	4252      	negs	r2, r2
   d9668:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d966c:	ea94 0f05 	teq	r4, r5
   d9670:	f000 80a7 	beq.w	d97c2 <__adddf3+0x1da>
   d9674:	f1a4 0401 	sub.w	r4, r4, #1
   d9678:	f1d5 0e20 	rsbs	lr, r5, #32
   d967c:	db0d      	blt.n	d969a <__adddf3+0xb2>
   d967e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9682:	fa22 f205 	lsr.w	r2, r2, r5
   d9686:	1880      	adds	r0, r0, r2
   d9688:	f141 0100 	adc.w	r1, r1, #0
   d968c:	fa03 f20e 	lsl.w	r2, r3, lr
   d9690:	1880      	adds	r0, r0, r2
   d9692:	fa43 f305 	asr.w	r3, r3, r5
   d9696:	4159      	adcs	r1, r3
   d9698:	e00e      	b.n	d96b8 <__adddf3+0xd0>
   d969a:	f1a5 0520 	sub.w	r5, r5, #32
   d969e:	f10e 0e20 	add.w	lr, lr, #32
   d96a2:	2a01      	cmp	r2, #1
   d96a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d96a8:	bf28      	it	cs
   d96aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d96ae:	fa43 f305 	asr.w	r3, r3, r5
   d96b2:	18c0      	adds	r0, r0, r3
   d96b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d96b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d96bc:	d507      	bpl.n	d96ce <__adddf3+0xe6>
   d96be:	f04f 0e00 	mov.w	lr, #0
   d96c2:	f1dc 0c00 	rsbs	ip, ip, #0
   d96c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d96ca:	eb6e 0101 	sbc.w	r1, lr, r1
   d96ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d96d2:	d31b      	bcc.n	d970c <__adddf3+0x124>
   d96d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d96d8:	d30c      	bcc.n	d96f4 <__adddf3+0x10c>
   d96da:	0849      	lsrs	r1, r1, #1
   d96dc:	ea5f 0030 	movs.w	r0, r0, rrx
   d96e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d96e4:	f104 0401 	add.w	r4, r4, #1
   d96e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d96ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d96f0:	f080 809a 	bcs.w	d9828 <__adddf3+0x240>
   d96f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d96f8:	bf08      	it	eq
   d96fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d96fe:	f150 0000 	adcs.w	r0, r0, #0
   d9702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9706:	ea41 0105 	orr.w	r1, r1, r5
   d970a:	bd30      	pop	{r4, r5, pc}
   d970c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9710:	4140      	adcs	r0, r0
   d9712:	eb41 0101 	adc.w	r1, r1, r1
   d9716:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d971a:	f1a4 0401 	sub.w	r4, r4, #1
   d971e:	d1e9      	bne.n	d96f4 <__adddf3+0x10c>
   d9720:	f091 0f00 	teq	r1, #0
   d9724:	bf04      	itt	eq
   d9726:	4601      	moveq	r1, r0
   d9728:	2000      	moveq	r0, #0
   d972a:	fab1 f381 	clz	r3, r1
   d972e:	bf08      	it	eq
   d9730:	3320      	addeq	r3, #32
   d9732:	f1a3 030b 	sub.w	r3, r3, #11
   d9736:	f1b3 0220 	subs.w	r2, r3, #32
   d973a:	da0c      	bge.n	d9756 <__adddf3+0x16e>
   d973c:	320c      	adds	r2, #12
   d973e:	dd08      	ble.n	d9752 <__adddf3+0x16a>
   d9740:	f102 0c14 	add.w	ip, r2, #20
   d9744:	f1c2 020c 	rsb	r2, r2, #12
   d9748:	fa01 f00c 	lsl.w	r0, r1, ip
   d974c:	fa21 f102 	lsr.w	r1, r1, r2
   d9750:	e00c      	b.n	d976c <__adddf3+0x184>
   d9752:	f102 0214 	add.w	r2, r2, #20
   d9756:	bfd8      	it	le
   d9758:	f1c2 0c20 	rsble	ip, r2, #32
   d975c:	fa01 f102 	lsl.w	r1, r1, r2
   d9760:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9764:	bfdc      	itt	le
   d9766:	ea41 010c 	orrle.w	r1, r1, ip
   d976a:	4090      	lslle	r0, r2
   d976c:	1ae4      	subs	r4, r4, r3
   d976e:	bfa2      	ittt	ge
   d9770:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9774:	4329      	orrge	r1, r5
   d9776:	bd30      	popge	{r4, r5, pc}
   d9778:	ea6f 0404 	mvn.w	r4, r4
   d977c:	3c1f      	subs	r4, #31
   d977e:	da1c      	bge.n	d97ba <__adddf3+0x1d2>
   d9780:	340c      	adds	r4, #12
   d9782:	dc0e      	bgt.n	d97a2 <__adddf3+0x1ba>
   d9784:	f104 0414 	add.w	r4, r4, #20
   d9788:	f1c4 0220 	rsb	r2, r4, #32
   d978c:	fa20 f004 	lsr.w	r0, r0, r4
   d9790:	fa01 f302 	lsl.w	r3, r1, r2
   d9794:	ea40 0003 	orr.w	r0, r0, r3
   d9798:	fa21 f304 	lsr.w	r3, r1, r4
   d979c:	ea45 0103 	orr.w	r1, r5, r3
   d97a0:	bd30      	pop	{r4, r5, pc}
   d97a2:	f1c4 040c 	rsb	r4, r4, #12
   d97a6:	f1c4 0220 	rsb	r2, r4, #32
   d97aa:	fa20 f002 	lsr.w	r0, r0, r2
   d97ae:	fa01 f304 	lsl.w	r3, r1, r4
   d97b2:	ea40 0003 	orr.w	r0, r0, r3
   d97b6:	4629      	mov	r1, r5
   d97b8:	bd30      	pop	{r4, r5, pc}
   d97ba:	fa21 f004 	lsr.w	r0, r1, r4
   d97be:	4629      	mov	r1, r5
   d97c0:	bd30      	pop	{r4, r5, pc}
   d97c2:	f094 0f00 	teq	r4, #0
   d97c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d97ca:	bf06      	itte	eq
   d97cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d97d0:	3401      	addeq	r4, #1
   d97d2:	3d01      	subne	r5, #1
   d97d4:	e74e      	b.n	d9674 <__adddf3+0x8c>
   d97d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d97da:	bf18      	it	ne
   d97dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d97e0:	d029      	beq.n	d9836 <__adddf3+0x24e>
   d97e2:	ea94 0f05 	teq	r4, r5
   d97e6:	bf08      	it	eq
   d97e8:	ea90 0f02 	teqeq	r0, r2
   d97ec:	d005      	beq.n	d97fa <__adddf3+0x212>
   d97ee:	ea54 0c00 	orrs.w	ip, r4, r0
   d97f2:	bf04      	itt	eq
   d97f4:	4619      	moveq	r1, r3
   d97f6:	4610      	moveq	r0, r2
   d97f8:	bd30      	pop	{r4, r5, pc}
   d97fa:	ea91 0f03 	teq	r1, r3
   d97fe:	bf1e      	ittt	ne
   d9800:	2100      	movne	r1, #0
   d9802:	2000      	movne	r0, #0
   d9804:	bd30      	popne	{r4, r5, pc}
   d9806:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d980a:	d105      	bne.n	d9818 <__adddf3+0x230>
   d980c:	0040      	lsls	r0, r0, #1
   d980e:	4149      	adcs	r1, r1
   d9810:	bf28      	it	cs
   d9812:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9816:	bd30      	pop	{r4, r5, pc}
   d9818:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d981c:	bf3c      	itt	cc
   d981e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9822:	bd30      	popcc	{r4, r5, pc}
   d9824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9828:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d982c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9830:	f04f 0000 	mov.w	r0, #0
   d9834:	bd30      	pop	{r4, r5, pc}
   d9836:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d983a:	bf1a      	itte	ne
   d983c:	4619      	movne	r1, r3
   d983e:	4610      	movne	r0, r2
   d9840:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9844:	bf1c      	itt	ne
   d9846:	460b      	movne	r3, r1
   d9848:	4602      	movne	r2, r0
   d984a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d984e:	bf06      	itte	eq
   d9850:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9854:	ea91 0f03 	teqeq	r1, r3
   d9858:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d985c:	bd30      	pop	{r4, r5, pc}
   d985e:	bf00      	nop

000d9860 <__aeabi_ui2d>:
   d9860:	f090 0f00 	teq	r0, #0
   d9864:	bf04      	itt	eq
   d9866:	2100      	moveq	r1, #0
   d9868:	4770      	bxeq	lr
   d986a:	b530      	push	{r4, r5, lr}
   d986c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9870:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9874:	f04f 0500 	mov.w	r5, #0
   d9878:	f04f 0100 	mov.w	r1, #0
   d987c:	e750      	b.n	d9720 <__adddf3+0x138>
   d987e:	bf00      	nop

000d9880 <__aeabi_i2d>:
   d9880:	f090 0f00 	teq	r0, #0
   d9884:	bf04      	itt	eq
   d9886:	2100      	moveq	r1, #0
   d9888:	4770      	bxeq	lr
   d988a:	b530      	push	{r4, r5, lr}
   d988c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9890:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9894:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9898:	bf48      	it	mi
   d989a:	4240      	negmi	r0, r0
   d989c:	f04f 0100 	mov.w	r1, #0
   d98a0:	e73e      	b.n	d9720 <__adddf3+0x138>
   d98a2:	bf00      	nop

000d98a4 <__aeabi_f2d>:
   d98a4:	0042      	lsls	r2, r0, #1
   d98a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d98aa:	ea4f 0131 	mov.w	r1, r1, rrx
   d98ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d98b2:	bf1f      	itttt	ne
   d98b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d98b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d98bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d98c0:	4770      	bxne	lr
   d98c2:	f092 0f00 	teq	r2, #0
   d98c6:	bf14      	ite	ne
   d98c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d98cc:	4770      	bxeq	lr
   d98ce:	b530      	push	{r4, r5, lr}
   d98d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d98d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d98dc:	e720      	b.n	d9720 <__adddf3+0x138>
   d98de:	bf00      	nop

000d98e0 <__aeabi_ul2d>:
   d98e0:	ea50 0201 	orrs.w	r2, r0, r1
   d98e4:	bf08      	it	eq
   d98e6:	4770      	bxeq	lr
   d98e8:	b530      	push	{r4, r5, lr}
   d98ea:	f04f 0500 	mov.w	r5, #0
   d98ee:	e00a      	b.n	d9906 <__aeabi_l2d+0x16>

000d98f0 <__aeabi_l2d>:
   d98f0:	ea50 0201 	orrs.w	r2, r0, r1
   d98f4:	bf08      	it	eq
   d98f6:	4770      	bxeq	lr
   d98f8:	b530      	push	{r4, r5, lr}
   d98fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d98fe:	d502      	bpl.n	d9906 <__aeabi_l2d+0x16>
   d9900:	4240      	negs	r0, r0
   d9902:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9906:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d990a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d990e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9912:	f43f aedc 	beq.w	d96ce <__adddf3+0xe6>
   d9916:	f04f 0203 	mov.w	r2, #3
   d991a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d991e:	bf18      	it	ne
   d9920:	3203      	addne	r2, #3
   d9922:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9926:	bf18      	it	ne
   d9928:	3203      	addne	r2, #3
   d992a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d992e:	f1c2 0320 	rsb	r3, r2, #32
   d9932:	fa00 fc03 	lsl.w	ip, r0, r3
   d9936:	fa20 f002 	lsr.w	r0, r0, r2
   d993a:	fa01 fe03 	lsl.w	lr, r1, r3
   d993e:	ea40 000e 	orr.w	r0, r0, lr
   d9942:	fa21 f102 	lsr.w	r1, r1, r2
   d9946:	4414      	add	r4, r2
   d9948:	e6c1      	b.n	d96ce <__adddf3+0xe6>
   d994a:	bf00      	nop

000d994c <__aeabi_dmul>:
   d994c:	b570      	push	{r4, r5, r6, lr}
   d994e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d995a:	bf1d      	ittte	ne
   d995c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9960:	ea94 0f0c 	teqne	r4, ip
   d9964:	ea95 0f0c 	teqne	r5, ip
   d9968:	f000 f8de 	bleq	d9b28 <__aeabi_dmul+0x1dc>
   d996c:	442c      	add	r4, r5
   d996e:	ea81 0603 	eor.w	r6, r1, r3
   d9972:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9976:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d997a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d997e:	bf18      	it	ne
   d9980:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d998c:	d038      	beq.n	d9a00 <__aeabi_dmul+0xb4>
   d998e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9992:	f04f 0500 	mov.w	r5, #0
   d9996:	fbe1 e502 	umlal	lr, r5, r1, r2
   d999a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d999e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d99a2:	f04f 0600 	mov.w	r6, #0
   d99a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d99aa:	f09c 0f00 	teq	ip, #0
   d99ae:	bf18      	it	ne
   d99b0:	f04e 0e01 	orrne.w	lr, lr, #1
   d99b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d99b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d99bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d99c0:	d204      	bcs.n	d99cc <__aeabi_dmul+0x80>
   d99c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d99c6:	416d      	adcs	r5, r5
   d99c8:	eb46 0606 	adc.w	r6, r6, r6
   d99cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d99d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d99d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d99d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d99dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d99e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d99e4:	bf88      	it	hi
   d99e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d99ea:	d81e      	bhi.n	d9a2a <__aeabi_dmul+0xde>
   d99ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d99f0:	bf08      	it	eq
   d99f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d99f6:	f150 0000 	adcs.w	r0, r0, #0
   d99fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d99fe:	bd70      	pop	{r4, r5, r6, pc}
   d9a00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9a04:	ea46 0101 	orr.w	r1, r6, r1
   d9a08:	ea40 0002 	orr.w	r0, r0, r2
   d9a0c:	ea81 0103 	eor.w	r1, r1, r3
   d9a10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9a14:	bfc2      	ittt	gt
   d9a16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9a1e:	bd70      	popgt	{r4, r5, r6, pc}
   d9a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a24:	f04f 0e00 	mov.w	lr, #0
   d9a28:	3c01      	subs	r4, #1
   d9a2a:	f300 80ab 	bgt.w	d9b84 <__aeabi_dmul+0x238>
   d9a2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9a32:	bfde      	ittt	le
   d9a34:	2000      	movle	r0, #0
   d9a36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9a3a:	bd70      	pople	{r4, r5, r6, pc}
   d9a3c:	f1c4 0400 	rsb	r4, r4, #0
   d9a40:	3c20      	subs	r4, #32
   d9a42:	da35      	bge.n	d9ab0 <__aeabi_dmul+0x164>
   d9a44:	340c      	adds	r4, #12
   d9a46:	dc1b      	bgt.n	d9a80 <__aeabi_dmul+0x134>
   d9a48:	f104 0414 	add.w	r4, r4, #20
   d9a4c:	f1c4 0520 	rsb	r5, r4, #32
   d9a50:	fa00 f305 	lsl.w	r3, r0, r5
   d9a54:	fa20 f004 	lsr.w	r0, r0, r4
   d9a58:	fa01 f205 	lsl.w	r2, r1, r5
   d9a5c:	ea40 0002 	orr.w	r0, r0, r2
   d9a60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9a64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9a6c:	fa21 f604 	lsr.w	r6, r1, r4
   d9a70:	eb42 0106 	adc.w	r1, r2, r6
   d9a74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9a78:	bf08      	it	eq
   d9a7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9a7e:	bd70      	pop	{r4, r5, r6, pc}
   d9a80:	f1c4 040c 	rsb	r4, r4, #12
   d9a84:	f1c4 0520 	rsb	r5, r4, #32
   d9a88:	fa00 f304 	lsl.w	r3, r0, r4
   d9a8c:	fa20 f005 	lsr.w	r0, r0, r5
   d9a90:	fa01 f204 	lsl.w	r2, r1, r4
   d9a94:	ea40 0002 	orr.w	r0, r0, r2
   d9a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9a9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9aa0:	f141 0100 	adc.w	r1, r1, #0
   d9aa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9aa8:	bf08      	it	eq
   d9aaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9aae:	bd70      	pop	{r4, r5, r6, pc}
   d9ab0:	f1c4 0520 	rsb	r5, r4, #32
   d9ab4:	fa00 f205 	lsl.w	r2, r0, r5
   d9ab8:	ea4e 0e02 	orr.w	lr, lr, r2
   d9abc:	fa20 f304 	lsr.w	r3, r0, r4
   d9ac0:	fa01 f205 	lsl.w	r2, r1, r5
   d9ac4:	ea43 0302 	orr.w	r3, r3, r2
   d9ac8:	fa21 f004 	lsr.w	r0, r1, r4
   d9acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ad0:	fa21 f204 	lsr.w	r2, r1, r4
   d9ad4:	ea20 0002 	bic.w	r0, r0, r2
   d9ad8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9adc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ae0:	bf08      	it	eq
   d9ae2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9ae6:	bd70      	pop	{r4, r5, r6, pc}
   d9ae8:	f094 0f00 	teq	r4, #0
   d9aec:	d10f      	bne.n	d9b0e <__aeabi_dmul+0x1c2>
   d9aee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9af2:	0040      	lsls	r0, r0, #1
   d9af4:	eb41 0101 	adc.w	r1, r1, r1
   d9af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9afc:	bf08      	it	eq
   d9afe:	3c01      	subeq	r4, #1
   d9b00:	d0f7      	beq.n	d9af2 <__aeabi_dmul+0x1a6>
   d9b02:	ea41 0106 	orr.w	r1, r1, r6
   d9b06:	f095 0f00 	teq	r5, #0
   d9b0a:	bf18      	it	ne
   d9b0c:	4770      	bxne	lr
   d9b0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9b12:	0052      	lsls	r2, r2, #1
   d9b14:	eb43 0303 	adc.w	r3, r3, r3
   d9b18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9b1c:	bf08      	it	eq
   d9b1e:	3d01      	subeq	r5, #1
   d9b20:	d0f7      	beq.n	d9b12 <__aeabi_dmul+0x1c6>
   d9b22:	ea43 0306 	orr.w	r3, r3, r6
   d9b26:	4770      	bx	lr
   d9b28:	ea94 0f0c 	teq	r4, ip
   d9b2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9b30:	bf18      	it	ne
   d9b32:	ea95 0f0c 	teqne	r5, ip
   d9b36:	d00c      	beq.n	d9b52 <__aeabi_dmul+0x206>
   d9b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9b3c:	bf18      	it	ne
   d9b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9b42:	d1d1      	bne.n	d9ae8 <__aeabi_dmul+0x19c>
   d9b44:	ea81 0103 	eor.w	r1, r1, r3
   d9b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b4c:	f04f 0000 	mov.w	r0, #0
   d9b50:	bd70      	pop	{r4, r5, r6, pc}
   d9b52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9b56:	bf06      	itte	eq
   d9b58:	4610      	moveq	r0, r2
   d9b5a:	4619      	moveq	r1, r3
   d9b5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9b60:	d019      	beq.n	d9b96 <__aeabi_dmul+0x24a>
   d9b62:	ea94 0f0c 	teq	r4, ip
   d9b66:	d102      	bne.n	d9b6e <__aeabi_dmul+0x222>
   d9b68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9b6c:	d113      	bne.n	d9b96 <__aeabi_dmul+0x24a>
   d9b6e:	ea95 0f0c 	teq	r5, ip
   d9b72:	d105      	bne.n	d9b80 <__aeabi_dmul+0x234>
   d9b74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9b78:	bf1c      	itt	ne
   d9b7a:	4610      	movne	r0, r2
   d9b7c:	4619      	movne	r1, r3
   d9b7e:	d10a      	bne.n	d9b96 <__aeabi_dmul+0x24a>
   d9b80:	ea81 0103 	eor.w	r1, r1, r3
   d9b84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9b8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9b90:	f04f 0000 	mov.w	r0, #0
   d9b94:	bd70      	pop	{r4, r5, r6, pc}
   d9b96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9b9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9b9e:	bd70      	pop	{r4, r5, r6, pc}

000d9ba0 <__aeabi_ddiv>:
   d9ba0:	b570      	push	{r4, r5, r6, lr}
   d9ba2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9ba6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9baa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9bae:	bf1d      	ittte	ne
   d9bb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9bb4:	ea94 0f0c 	teqne	r4, ip
   d9bb8:	ea95 0f0c 	teqne	r5, ip
   d9bbc:	f000 f8a7 	bleq	d9d0e <__aeabi_ddiv+0x16e>
   d9bc0:	eba4 0405 	sub.w	r4, r4, r5
   d9bc4:	ea81 0e03 	eor.w	lr, r1, r3
   d9bc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9bcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9bd0:	f000 8088 	beq.w	d9ce4 <__aeabi_ddiv+0x144>
   d9bd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9bd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9bdc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9be0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9be4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9be8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9bec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9bf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9bf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9bf8:	429d      	cmp	r5, r3
   d9bfa:	bf08      	it	eq
   d9bfc:	4296      	cmpeq	r6, r2
   d9bfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9c02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9c06:	d202      	bcs.n	d9c0e <__aeabi_ddiv+0x6e>
   d9c08:	085b      	lsrs	r3, r3, #1
   d9c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c0e:	1ab6      	subs	r6, r6, r2
   d9c10:	eb65 0503 	sbc.w	r5, r5, r3
   d9c14:	085b      	lsrs	r3, r3, #1
   d9c16:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9c1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9c22:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c2a:	bf22      	ittt	cs
   d9c2c:	1ab6      	subcs	r6, r6, r2
   d9c2e:	4675      	movcs	r5, lr
   d9c30:	ea40 000c 	orrcs.w	r0, r0, ip
   d9c34:	085b      	lsrs	r3, r3, #1
   d9c36:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c42:	bf22      	ittt	cs
   d9c44:	1ab6      	subcs	r6, r6, r2
   d9c46:	4675      	movcs	r5, lr
   d9c48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9c4c:	085b      	lsrs	r3, r3, #1
   d9c4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c52:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c5a:	bf22      	ittt	cs
   d9c5c:	1ab6      	subcs	r6, r6, r2
   d9c5e:	4675      	movcs	r5, lr
   d9c60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9c64:	085b      	lsrs	r3, r3, #1
   d9c66:	ea4f 0232 	mov.w	r2, r2, rrx
   d9c6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d9c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9c72:	bf22      	ittt	cs
   d9c74:	1ab6      	subcs	r6, r6, r2
   d9c76:	4675      	movcs	r5, lr
   d9c78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9c7c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9c80:	d018      	beq.n	d9cb4 <__aeabi_ddiv+0x114>
   d9c82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9c86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9c8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9c8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9c92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9c96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9c9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9c9e:	d1c0      	bne.n	d9c22 <__aeabi_ddiv+0x82>
   d9ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ca4:	d10b      	bne.n	d9cbe <__aeabi_ddiv+0x11e>
   d9ca6:	ea41 0100 	orr.w	r1, r1, r0
   d9caa:	f04f 0000 	mov.w	r0, #0
   d9cae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9cb2:	e7b6      	b.n	d9c22 <__aeabi_ddiv+0x82>
   d9cb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9cb8:	bf04      	itt	eq
   d9cba:	4301      	orreq	r1, r0
   d9cbc:	2000      	moveq	r0, #0
   d9cbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9cc2:	bf88      	it	hi
   d9cc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9cc8:	f63f aeaf 	bhi.w	d9a2a <__aeabi_dmul+0xde>
   d9ccc:	ebb5 0c03 	subs.w	ip, r5, r3
   d9cd0:	bf04      	itt	eq
   d9cd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9cd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9cda:	f150 0000 	adcs.w	r0, r0, #0
   d9cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9ce2:	bd70      	pop	{r4, r5, r6, pc}
   d9ce4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9ce8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9cec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9cf0:	bfc2      	ittt	gt
   d9cf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9cf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9cfa:	bd70      	popgt	{r4, r5, r6, pc}
   d9cfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9d00:	f04f 0e00 	mov.w	lr, #0
   d9d04:	3c01      	subs	r4, #1
   d9d06:	e690      	b.n	d9a2a <__aeabi_dmul+0xde>
   d9d08:	ea45 0e06 	orr.w	lr, r5, r6
   d9d0c:	e68d      	b.n	d9a2a <__aeabi_dmul+0xde>
   d9d0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9d12:	ea94 0f0c 	teq	r4, ip
   d9d16:	bf08      	it	eq
   d9d18:	ea95 0f0c 	teqeq	r5, ip
   d9d1c:	f43f af3b 	beq.w	d9b96 <__aeabi_dmul+0x24a>
   d9d20:	ea94 0f0c 	teq	r4, ip
   d9d24:	d10a      	bne.n	d9d3c <__aeabi_ddiv+0x19c>
   d9d26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9d2a:	f47f af34 	bne.w	d9b96 <__aeabi_dmul+0x24a>
   d9d2e:	ea95 0f0c 	teq	r5, ip
   d9d32:	f47f af25 	bne.w	d9b80 <__aeabi_dmul+0x234>
   d9d36:	4610      	mov	r0, r2
   d9d38:	4619      	mov	r1, r3
   d9d3a:	e72c      	b.n	d9b96 <__aeabi_dmul+0x24a>
   d9d3c:	ea95 0f0c 	teq	r5, ip
   d9d40:	d106      	bne.n	d9d50 <__aeabi_ddiv+0x1b0>
   d9d42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9d46:	f43f aefd 	beq.w	d9b44 <__aeabi_dmul+0x1f8>
   d9d4a:	4610      	mov	r0, r2
   d9d4c:	4619      	mov	r1, r3
   d9d4e:	e722      	b.n	d9b96 <__aeabi_dmul+0x24a>
   d9d50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9d54:	bf18      	it	ne
   d9d56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9d5a:	f47f aec5 	bne.w	d9ae8 <__aeabi_dmul+0x19c>
   d9d5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9d62:	f47f af0d 	bne.w	d9b80 <__aeabi_dmul+0x234>
   d9d66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9d6a:	f47f aeeb 	bne.w	d9b44 <__aeabi_dmul+0x1f8>
   d9d6e:	e712      	b.n	d9b96 <__aeabi_dmul+0x24a>

000d9d70 <__aeabi_d2iz>:
   d9d70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9d74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9d78:	d215      	bcs.n	d9da6 <__aeabi_d2iz+0x36>
   d9d7a:	d511      	bpl.n	d9da0 <__aeabi_d2iz+0x30>
   d9d7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9d80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9d84:	d912      	bls.n	d9dac <__aeabi_d2iz+0x3c>
   d9d86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9d8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9d92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9d96:	fa23 f002 	lsr.w	r0, r3, r2
   d9d9a:	bf18      	it	ne
   d9d9c:	4240      	negne	r0, r0
   d9d9e:	4770      	bx	lr
   d9da0:	f04f 0000 	mov.w	r0, #0
   d9da4:	4770      	bx	lr
   d9da6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9daa:	d105      	bne.n	d9db8 <__aeabi_d2iz+0x48>
   d9dac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9db0:	bf08      	it	eq
   d9db2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9db6:	4770      	bx	lr
   d9db8:	f04f 0000 	mov.w	r0, #0
   d9dbc:	4770      	bx	lr
   d9dbe:	bf00      	nop

000d9dc0 <__aeabi_d2f>:
   d9dc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9dc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9dc8:	bf24      	itt	cs
   d9dca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9dce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9dd2:	d90d      	bls.n	d9df0 <__aeabi_d2f+0x30>
   d9dd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9dd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9ddc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9de0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9de4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9de8:	bf08      	it	eq
   d9dea:	f020 0001 	biceq.w	r0, r0, #1
   d9dee:	4770      	bx	lr
   d9df0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9df4:	d121      	bne.n	d9e3a <__aeabi_d2f+0x7a>
   d9df6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9dfa:	bfbc      	itt	lt
   d9dfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9e00:	4770      	bxlt	lr
   d9e02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9e0a:	f1c2 0218 	rsb	r2, r2, #24
   d9e0e:	f1c2 0c20 	rsb	ip, r2, #32
   d9e12:	fa10 f30c 	lsls.w	r3, r0, ip
   d9e16:	fa20 f002 	lsr.w	r0, r0, r2
   d9e1a:	bf18      	it	ne
   d9e1c:	f040 0001 	orrne.w	r0, r0, #1
   d9e20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9e24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9e28:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9e2c:	ea40 000c 	orr.w	r0, r0, ip
   d9e30:	fa23 f302 	lsr.w	r3, r3, r2
   d9e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9e38:	e7cc      	b.n	d9dd4 <__aeabi_d2f+0x14>
   d9e3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9e3e:	d107      	bne.n	d9e50 <__aeabi_d2f+0x90>
   d9e40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9e44:	bf1e      	ittt	ne
   d9e46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9e4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9e4e:	4770      	bxne	lr
   d9e50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9e54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9e58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9e5c:	4770      	bx	lr
   d9e5e:	bf00      	nop

000d9e60 <asctime>:
   d9e60:	4b09      	ldr	r3, [pc, #36]	; (d9e88 <asctime+0x28>)
   d9e62:	b570      	push	{r4, r5, r6, lr}
   d9e64:	681c      	ldr	r4, [r3, #0]
   d9e66:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9e68:	4606      	mov	r6, r0
   d9e6a:	b93d      	cbnz	r5, d9e7c <asctime+0x1c>
   d9e6c:	201a      	movs	r0, #26
   d9e6e:	f7fd fb17 	bl	d74a0 <malloc>
   d9e72:	221a      	movs	r2, #26
   d9e74:	6420      	str	r0, [r4, #64]	; 0x40
   d9e76:	4629      	mov	r1, r5
   d9e78:	f000 fa08 	bl	da28c <memset>
   d9e7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9e7e:	4630      	mov	r0, r6
   d9e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9e84:	f000 b802 	b.w	d9e8c <asctime_r>
   d9e88:	2003dfdc 	.word	0x2003dfdc

000d9e8c <asctime_r>:
   d9e8c:	b510      	push	{r4, lr}
   d9e8e:	460c      	mov	r4, r1
   d9e90:	6941      	ldr	r1, [r0, #20]
   d9e92:	6903      	ldr	r3, [r0, #16]
   d9e94:	6982      	ldr	r2, [r0, #24]
   d9e96:	b086      	sub	sp, #24
   d9e98:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9e9c:	9104      	str	r1, [sp, #16]
   d9e9e:	6801      	ldr	r1, [r0, #0]
   d9ea0:	9103      	str	r1, [sp, #12]
   d9ea2:	6841      	ldr	r1, [r0, #4]
   d9ea4:	9102      	str	r1, [sp, #8]
   d9ea6:	6881      	ldr	r1, [r0, #8]
   d9ea8:	9101      	str	r1, [sp, #4]
   d9eaa:	68c1      	ldr	r1, [r0, #12]
   d9eac:	9100      	str	r1, [sp, #0]
   d9eae:	4907      	ldr	r1, [pc, #28]	; (d9ecc <asctime_r+0x40>)
   d9eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9eb4:	440b      	add	r3, r1
   d9eb6:	4906      	ldr	r1, [pc, #24]	; (d9ed0 <asctime_r+0x44>)
   d9eb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9ebc:	440a      	add	r2, r1
   d9ebe:	4620      	mov	r0, r4
   d9ec0:	4904      	ldr	r1, [pc, #16]	; (d9ed4 <asctime_r+0x48>)
   d9ec2:	f7fd fb05 	bl	d74d0 <siprintf>
   d9ec6:	4620      	mov	r0, r4
   d9ec8:	b006      	add	sp, #24
   d9eca:	bd10      	pop	{r4, pc}
   d9ecc:	000dc4d2 	.word	0x000dc4d2
   d9ed0:	000dc4bd 	.word	0x000dc4bd
   d9ed4:	000dc4f6 	.word	0x000dc4f6

000d9ed8 <atoi>:
   d9ed8:	220a      	movs	r2, #10
   d9eda:	2100      	movs	r1, #0
   d9edc:	f001 ba4c 	b.w	db378 <strtol>

000d9ee0 <__cxa_atexit>:
   d9ee0:	b510      	push	{r4, lr}
   d9ee2:	4c05      	ldr	r4, [pc, #20]	; (d9ef8 <__cxa_atexit+0x18>)
   d9ee4:	4613      	mov	r3, r2
   d9ee6:	b12c      	cbz	r4, d9ef4 <__cxa_atexit+0x14>
   d9ee8:	460a      	mov	r2, r1
   d9eea:	4601      	mov	r1, r0
   d9eec:	2002      	movs	r0, #2
   d9eee:	f3af 8000 	nop.w
   d9ef2:	bd10      	pop	{r4, pc}
   d9ef4:	4620      	mov	r0, r4
   d9ef6:	bd10      	pop	{r4, pc}
   d9ef8:	00000000 	.word	0x00000000

000d9efc <gmtime>:
   d9efc:	b538      	push	{r3, r4, r5, lr}
   d9efe:	4b07      	ldr	r3, [pc, #28]	; (d9f1c <gmtime+0x20>)
   d9f00:	681c      	ldr	r4, [r3, #0]
   d9f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9f04:	4605      	mov	r5, r0
   d9f06:	b91b      	cbnz	r3, d9f10 <gmtime+0x14>
   d9f08:	2024      	movs	r0, #36	; 0x24
   d9f0a:	f7fd fac9 	bl	d74a0 <malloc>
   d9f0e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9f10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9f12:	4628      	mov	r0, r5
   d9f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9f18:	f000 b802 	b.w	d9f20 <gmtime_r>
   d9f1c:	2003dfdc 	.word	0x2003dfdc

000d9f20 <gmtime_r>:
   d9f20:	6802      	ldr	r2, [r0, #0]
   d9f22:	4b47      	ldr	r3, [pc, #284]	; (da040 <gmtime_r+0x120>)
   d9f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9f26:	fb92 f4f3 	sdiv	r4, r2, r3
   d9f2a:	fb03 2214 	mls	r2, r3, r4, r2
   d9f2e:	2a00      	cmp	r2, #0
   d9f30:	bfbc      	itt	lt
   d9f32:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9f36:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9f3a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9f3e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9f42:	fb92 f3f0 	sdiv	r3, r2, r0
   d9f46:	fb00 2213 	mls	r2, r0, r3, r2
   d9f4a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9f4e:	bfac      	ite	ge
   d9f50:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9f54:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9f58:	608b      	str	r3, [r1, #8]
   d9f5a:	fb92 f3f0 	sdiv	r3, r2, r0
   d9f5e:	fb00 2213 	mls	r2, r0, r3, r2
   d9f62:	604b      	str	r3, [r1, #4]
   d9f64:	600a      	str	r2, [r1, #0]
   d9f66:	2307      	movs	r3, #7
   d9f68:	1ce2      	adds	r2, r4, #3
   d9f6a:	fb92 f3f3 	sdiv	r3, r2, r3
   d9f6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9f72:	1ad3      	subs	r3, r2, r3
   d9f74:	618b      	str	r3, [r1, #24]
   d9f76:	4b33      	ldr	r3, [pc, #204]	; (da044 <gmtime_r+0x124>)
   d9f78:	4d33      	ldr	r5, [pc, #204]	; (da048 <gmtime_r+0x128>)
   d9f7a:	fb94 f5f5 	sdiv	r5, r4, r5
   d9f7e:	fb03 4405 	mla	r4, r3, r5, r4
   d9f82:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9f86:	fbb4 f2f2 	udiv	r2, r4, r2
   d9f8a:	4422      	add	r2, r4
   d9f8c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9f90:	fbb4 f3f7 	udiv	r3, r4, r7
   d9f94:	1ad2      	subs	r2, r2, r3
   d9f96:	482d      	ldr	r0, [pc, #180]	; (da04c <gmtime_r+0x12c>)
   d9f98:	fbb4 f0f0 	udiv	r0, r4, r0
   d9f9c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9fa0:	1a13      	subs	r3, r2, r0
   d9fa2:	fbb3 f6f6 	udiv	r6, r3, r6
   d9fa6:	4434      	add	r4, r6
   d9fa8:	f240 126d 	movw	r2, #365	; 0x16d
   d9fac:	fbb3 f0f2 	udiv	r0, r3, r2
   d9fb0:	fbb3 f3f7 	udiv	r3, r3, r7
   d9fb4:	1ae3      	subs	r3, r4, r3
   d9fb6:	fb02 3310 	mls	r3, r2, r0, r3
   d9fba:	2499      	movs	r4, #153	; 0x99
   d9fbc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9fc0:	3202      	adds	r2, #2
   d9fc2:	fbb2 f2f4 	udiv	r2, r2, r4
   d9fc6:	2a0a      	cmp	r2, #10
   d9fc8:	fb04 f402 	mul.w	r4, r4, r2
   d9fcc:	f104 0602 	add.w	r6, r4, #2
   d9fd0:	f04f 0405 	mov.w	r4, #5
   d9fd4:	fbb6 f4f4 	udiv	r4, r6, r4
   d9fd8:	bf34      	ite	cc
   d9fda:	2602      	movcc	r6, #2
   d9fdc:	f06f 0609 	mvncs.w	r6, #9
   d9fe0:	4416      	add	r6, r2
   d9fe2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9fe6:	fb02 0505 	mla	r5, r2, r5, r0
   d9fea:	1c5f      	adds	r7, r3, #1
   d9fec:	2e01      	cmp	r6, #1
   d9fee:	bf98      	it	ls
   d9ff0:	3501      	addls	r5, #1
   d9ff2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9ff6:	eba7 0704 	sub.w	r7, r7, r4
   d9ffa:	d302      	bcc.n	da002 <gmtime_r+0xe2>
   d9ffc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da000:	e014      	b.n	da02c <gmtime_r+0x10c>
   da002:	0782      	lsls	r2, r0, #30
   da004:	d105      	bne.n	da012 <gmtime_r+0xf2>
   da006:	2464      	movs	r4, #100	; 0x64
   da008:	fbb0 f2f4 	udiv	r2, r0, r4
   da00c:	fb04 0212 	mls	r2, r4, r2, r0
   da010:	b94a      	cbnz	r2, da026 <gmtime_r+0x106>
   da012:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da016:	fbb0 f4f2 	udiv	r4, r0, r2
   da01a:	fb02 0014 	mls	r0, r2, r4, r0
   da01e:	fab0 f280 	clz	r2, r0
   da022:	0952      	lsrs	r2, r2, #5
   da024:	e000      	b.n	da028 <gmtime_r+0x108>
   da026:	2201      	movs	r2, #1
   da028:	333b      	adds	r3, #59	; 0x3b
   da02a:	441a      	add	r2, r3
   da02c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da030:	2300      	movs	r3, #0
   da032:	61ca      	str	r2, [r1, #28]
   da034:	614d      	str	r5, [r1, #20]
   da036:	610e      	str	r6, [r1, #16]
   da038:	60cf      	str	r7, [r1, #12]
   da03a:	620b      	str	r3, [r1, #32]
   da03c:	4608      	mov	r0, r1
   da03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da040:	00015180 	.word	0x00015180
   da044:	fffdc54f 	.word	0xfffdc54f
   da048:	00023ab1 	.word	0x00023ab1
   da04c:	00023ab0 	.word	0x00023ab0

000da050 <localtime>:
   da050:	b538      	push	{r3, r4, r5, lr}
   da052:	4b07      	ldr	r3, [pc, #28]	; (da070 <localtime+0x20>)
   da054:	681c      	ldr	r4, [r3, #0]
   da056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da058:	4605      	mov	r5, r0
   da05a:	b91b      	cbnz	r3, da064 <localtime+0x14>
   da05c:	2024      	movs	r0, #36	; 0x24
   da05e:	f7fd fa1f 	bl	d74a0 <malloc>
   da062:	63e0      	str	r0, [r4, #60]	; 0x3c
   da064:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da066:	4628      	mov	r0, r5
   da068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da06c:	f000 b802 	b.w	da074 <localtime_r>
   da070:	2003dfdc 	.word	0x2003dfdc

000da074 <localtime_r>:
   da074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da078:	460c      	mov	r4, r1
   da07a:	4680      	mov	r8, r0
   da07c:	f001 fcaa 	bl	db9d4 <__gettzinfo>
   da080:	4621      	mov	r1, r4
   da082:	4607      	mov	r7, r0
   da084:	4640      	mov	r0, r8
   da086:	f7ff ff4b 	bl	d9f20 <gmtime_r>
   da08a:	6946      	ldr	r6, [r0, #20]
   da08c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   da090:	07b3      	lsls	r3, r6, #30
   da092:	4604      	mov	r4, r0
   da094:	d105      	bne.n	da0a2 <localtime_r+0x2e>
   da096:	2264      	movs	r2, #100	; 0x64
   da098:	fb96 f3f2 	sdiv	r3, r6, r2
   da09c:	fb02 6313 	mls	r3, r2, r3, r6
   da0a0:	b94b      	cbnz	r3, da0b6 <localtime_r+0x42>
   da0a2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da0a6:	fb96 f3f5 	sdiv	r3, r6, r5
   da0aa:	fb05 6513 	mls	r5, r5, r3, r6
   da0ae:	fab5 f385 	clz	r3, r5
   da0b2:	095b      	lsrs	r3, r3, #5
   da0b4:	e000      	b.n	da0b8 <localtime_r+0x44>
   da0b6:	2301      	movs	r3, #1
   da0b8:	4a5f      	ldr	r2, [pc, #380]	; (da238 <localtime_r+0x1c4>)
   da0ba:	2530      	movs	r5, #48	; 0x30
   da0bc:	fb05 2503 	mla	r5, r5, r3, r2
   da0c0:	f001 faa4 	bl	db60c <__tz_lock>
   da0c4:	f001 faa4 	bl	db610 <_tzset_unlocked>
   da0c8:	4b5c      	ldr	r3, [pc, #368]	; (da23c <localtime_r+0x1c8>)
   da0ca:	681b      	ldr	r3, [r3, #0]
   da0cc:	b1f3      	cbz	r3, da10c <localtime_r+0x98>
   da0ce:	687b      	ldr	r3, [r7, #4]
   da0d0:	429e      	cmp	r6, r3
   da0d2:	d105      	bne.n	da0e0 <localtime_r+0x6c>
   da0d4:	6839      	ldr	r1, [r7, #0]
   da0d6:	f8d8 3000 	ldr.w	r3, [r8]
   da0da:	69fa      	ldr	r2, [r7, #28]
   da0dc:	b941      	cbnz	r1, da0f0 <localtime_r+0x7c>
   da0de:	e00a      	b.n	da0f6 <localtime_r+0x82>
   da0e0:	4630      	mov	r0, r6
   da0e2:	f001 f9eb 	bl	db4bc <__tzcalc_limits>
   da0e6:	2800      	cmp	r0, #0
   da0e8:	d1f4      	bne.n	da0d4 <localtime_r+0x60>
   da0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da0ee:	e00d      	b.n	da10c <localtime_r+0x98>
   da0f0:	4293      	cmp	r3, r2
   da0f2:	db08      	blt.n	da106 <localtime_r+0x92>
   da0f4:	e001      	b.n	da0fa <localtime_r+0x86>
   da0f6:	4293      	cmp	r3, r2
   da0f8:	da07      	bge.n	da10a <localtime_r+0x96>
   da0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   da0fc:	4293      	cmp	r3, r2
   da0fe:	bfac      	ite	ge
   da100:	2300      	movge	r3, #0
   da102:	2301      	movlt	r3, #1
   da104:	e002      	b.n	da10c <localtime_r+0x98>
   da106:	2300      	movs	r3, #0
   da108:	e000      	b.n	da10c <localtime_r+0x98>
   da10a:	2301      	movs	r3, #1
   da10c:	6223      	str	r3, [r4, #32]
   da10e:	6a23      	ldr	r3, [r4, #32]
   da110:	2b01      	cmp	r3, #1
   da112:	bf0c      	ite	eq
   da114:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   da116:	6a39      	ldrne	r1, [r7, #32]
   da118:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da11c:	203c      	movs	r0, #60	; 0x3c
   da11e:	fb91 f6f3 	sdiv	r6, r1, r3
   da122:	fb03 1316 	mls	r3, r3, r6, r1
   da126:	6861      	ldr	r1, [r4, #4]
   da128:	fb93 f2f0 	sdiv	r2, r3, r0
   da12c:	fb00 3012 	mls	r0, r0, r2, r3
   da130:	6823      	ldr	r3, [r4, #0]
   da132:	1a89      	subs	r1, r1, r2
   da134:	68a2      	ldr	r2, [r4, #8]
   da136:	6061      	str	r1, [r4, #4]
   da138:	1a1b      	subs	r3, r3, r0
   da13a:	1b92      	subs	r2, r2, r6
   da13c:	2b3b      	cmp	r3, #59	; 0x3b
   da13e:	6023      	str	r3, [r4, #0]
   da140:	60a2      	str	r2, [r4, #8]
   da142:	dd03      	ble.n	da14c <localtime_r+0xd8>
   da144:	3101      	adds	r1, #1
   da146:	6061      	str	r1, [r4, #4]
   da148:	3b3c      	subs	r3, #60	; 0x3c
   da14a:	e004      	b.n	da156 <localtime_r+0xe2>
   da14c:	2b00      	cmp	r3, #0
   da14e:	da03      	bge.n	da158 <localtime_r+0xe4>
   da150:	3901      	subs	r1, #1
   da152:	6061      	str	r1, [r4, #4]
   da154:	333c      	adds	r3, #60	; 0x3c
   da156:	6023      	str	r3, [r4, #0]
   da158:	6863      	ldr	r3, [r4, #4]
   da15a:	2b3b      	cmp	r3, #59	; 0x3b
   da15c:	dd03      	ble.n	da166 <localtime_r+0xf2>
   da15e:	3201      	adds	r2, #1
   da160:	60a2      	str	r2, [r4, #8]
   da162:	3b3c      	subs	r3, #60	; 0x3c
   da164:	e004      	b.n	da170 <localtime_r+0xfc>
   da166:	2b00      	cmp	r3, #0
   da168:	da03      	bge.n	da172 <localtime_r+0xfe>
   da16a:	3a01      	subs	r2, #1
   da16c:	60a2      	str	r2, [r4, #8]
   da16e:	333c      	adds	r3, #60	; 0x3c
   da170:	6063      	str	r3, [r4, #4]
   da172:	68a3      	ldr	r3, [r4, #8]
   da174:	2b17      	cmp	r3, #23
   da176:	dd22      	ble.n	da1be <localtime_r+0x14a>
   da178:	69e2      	ldr	r2, [r4, #28]
   da17a:	3201      	adds	r2, #1
   da17c:	61e2      	str	r2, [r4, #28]
   da17e:	69a2      	ldr	r2, [r4, #24]
   da180:	3201      	adds	r2, #1
   da182:	2a06      	cmp	r2, #6
   da184:	bfc8      	it	gt
   da186:	2200      	movgt	r2, #0
   da188:	61a2      	str	r2, [r4, #24]
   da18a:	68e2      	ldr	r2, [r4, #12]
   da18c:	3b18      	subs	r3, #24
   da18e:	3201      	adds	r2, #1
   da190:	60a3      	str	r3, [r4, #8]
   da192:	6923      	ldr	r3, [r4, #16]
   da194:	60e2      	str	r2, [r4, #12]
   da196:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   da19a:	428a      	cmp	r2, r1
   da19c:	dd46      	ble.n	da22c <localtime_r+0x1b8>
   da19e:	3301      	adds	r3, #1
   da1a0:	2b0c      	cmp	r3, #12
   da1a2:	bf0c      	ite	eq
   da1a4:	6963      	ldreq	r3, [r4, #20]
   da1a6:	6123      	strne	r3, [r4, #16]
   da1a8:	eba2 0201 	sub.w	r2, r2, r1
   da1ac:	60e2      	str	r2, [r4, #12]
   da1ae:	bf01      	itttt	eq
   da1b0:	3301      	addeq	r3, #1
   da1b2:	2200      	moveq	r2, #0
   da1b4:	6122      	streq	r2, [r4, #16]
   da1b6:	6163      	streq	r3, [r4, #20]
   da1b8:	bf08      	it	eq
   da1ba:	61e2      	streq	r2, [r4, #28]
   da1bc:	e036      	b.n	da22c <localtime_r+0x1b8>
   da1be:	2b00      	cmp	r3, #0
   da1c0:	da34      	bge.n	da22c <localtime_r+0x1b8>
   da1c2:	69e2      	ldr	r2, [r4, #28]
   da1c4:	3a01      	subs	r2, #1
   da1c6:	61e2      	str	r2, [r4, #28]
   da1c8:	69a2      	ldr	r2, [r4, #24]
   da1ca:	3a01      	subs	r2, #1
   da1cc:	bf48      	it	mi
   da1ce:	2206      	movmi	r2, #6
   da1d0:	61a2      	str	r2, [r4, #24]
   da1d2:	68e2      	ldr	r2, [r4, #12]
   da1d4:	3318      	adds	r3, #24
   da1d6:	3a01      	subs	r2, #1
   da1d8:	60e2      	str	r2, [r4, #12]
   da1da:	60a3      	str	r3, [r4, #8]
   da1dc:	bb32      	cbnz	r2, da22c <localtime_r+0x1b8>
   da1de:	6923      	ldr	r3, [r4, #16]
   da1e0:	3b01      	subs	r3, #1
   da1e2:	d401      	bmi.n	da1e8 <localtime_r+0x174>
   da1e4:	6123      	str	r3, [r4, #16]
   da1e6:	e01d      	b.n	da224 <localtime_r+0x1b0>
   da1e8:	230b      	movs	r3, #11
   da1ea:	6123      	str	r3, [r4, #16]
   da1ec:	6963      	ldr	r3, [r4, #20]
   da1ee:	1e5a      	subs	r2, r3, #1
   da1f0:	f012 0f03 	tst.w	r2, #3
   da1f4:	6162      	str	r2, [r4, #20]
   da1f6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   da1fa:	d105      	bne.n	da208 <localtime_r+0x194>
   da1fc:	2164      	movs	r1, #100	; 0x64
   da1fe:	fb93 f2f1 	sdiv	r2, r3, r1
   da202:	fb01 3212 	mls	r2, r1, r2, r3
   da206:	b94a      	cbnz	r2, da21c <localtime_r+0x1a8>
   da208:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da20c:	fb93 f2f1 	sdiv	r2, r3, r1
   da210:	fb01 3312 	mls	r3, r1, r2, r3
   da214:	fab3 f383 	clz	r3, r3
   da218:	095b      	lsrs	r3, r3, #5
   da21a:	e000      	b.n	da21e <localtime_r+0x1aa>
   da21c:	2301      	movs	r3, #1
   da21e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   da222:	61e3      	str	r3, [r4, #28]
   da224:	6923      	ldr	r3, [r4, #16]
   da226:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   da22a:	60e3      	str	r3, [r4, #12]
   da22c:	f001 f9ef 	bl	db60e <__tz_unlock>
   da230:	4620      	mov	r0, r4
   da232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da236:	bf00      	nop
   da238:	000dc6d8 	.word	0x000dc6d8
   da23c:	2003e7e4 	.word	0x2003e7e4

000da240 <memcpy>:
   da240:	b510      	push	{r4, lr}
   da242:	1e43      	subs	r3, r0, #1
   da244:	440a      	add	r2, r1
   da246:	4291      	cmp	r1, r2
   da248:	d004      	beq.n	da254 <memcpy+0x14>
   da24a:	f811 4b01 	ldrb.w	r4, [r1], #1
   da24e:	f803 4f01 	strb.w	r4, [r3, #1]!
   da252:	e7f8      	b.n	da246 <memcpy+0x6>
   da254:	bd10      	pop	{r4, pc}

000da256 <memmove>:
   da256:	4288      	cmp	r0, r1
   da258:	b510      	push	{r4, lr}
   da25a:	eb01 0302 	add.w	r3, r1, r2
   da25e:	d801      	bhi.n	da264 <memmove+0xe>
   da260:	1e42      	subs	r2, r0, #1
   da262:	e00b      	b.n	da27c <memmove+0x26>
   da264:	4298      	cmp	r0, r3
   da266:	d2fb      	bcs.n	da260 <memmove+0xa>
   da268:	1881      	adds	r1, r0, r2
   da26a:	1ad2      	subs	r2, r2, r3
   da26c:	42d3      	cmn	r3, r2
   da26e:	d004      	beq.n	da27a <memmove+0x24>
   da270:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da274:	f801 4d01 	strb.w	r4, [r1, #-1]!
   da278:	e7f8      	b.n	da26c <memmove+0x16>
   da27a:	bd10      	pop	{r4, pc}
   da27c:	4299      	cmp	r1, r3
   da27e:	d004      	beq.n	da28a <memmove+0x34>
   da280:	f811 4b01 	ldrb.w	r4, [r1], #1
   da284:	f802 4f01 	strb.w	r4, [r2, #1]!
   da288:	e7f8      	b.n	da27c <memmove+0x26>
   da28a:	bd10      	pop	{r4, pc}

000da28c <memset>:
   da28c:	4402      	add	r2, r0
   da28e:	4603      	mov	r3, r0
   da290:	4293      	cmp	r3, r2
   da292:	d002      	beq.n	da29a <memset+0xe>
   da294:	f803 1b01 	strb.w	r1, [r3], #1
   da298:	e7fa      	b.n	da290 <memset+0x4>
   da29a:	4770      	bx	lr

000da29c <validate_structure>:
   da29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   da29e:	6801      	ldr	r1, [r0, #0]
   da2a0:	293b      	cmp	r1, #59	; 0x3b
   da2a2:	4604      	mov	r4, r0
   da2a4:	d911      	bls.n	da2ca <validate_structure+0x2e>
   da2a6:	223c      	movs	r2, #60	; 0x3c
   da2a8:	4668      	mov	r0, sp
   da2aa:	f001 fb3b 	bl	db924 <div>
   da2ae:	9a01      	ldr	r2, [sp, #4]
   da2b0:	6863      	ldr	r3, [r4, #4]
   da2b2:	9900      	ldr	r1, [sp, #0]
   da2b4:	2a00      	cmp	r2, #0
   da2b6:	440b      	add	r3, r1
   da2b8:	6063      	str	r3, [r4, #4]
   da2ba:	bfbb      	ittet	lt
   da2bc:	323c      	addlt	r2, #60	; 0x3c
   da2be:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   da2c2:	6022      	strge	r2, [r4, #0]
   da2c4:	6022      	strlt	r2, [r4, #0]
   da2c6:	bfb8      	it	lt
   da2c8:	6063      	strlt	r3, [r4, #4]
   da2ca:	6861      	ldr	r1, [r4, #4]
   da2cc:	293b      	cmp	r1, #59	; 0x3b
   da2ce:	d911      	bls.n	da2f4 <validate_structure+0x58>
   da2d0:	223c      	movs	r2, #60	; 0x3c
   da2d2:	4668      	mov	r0, sp
   da2d4:	f001 fb26 	bl	db924 <div>
   da2d8:	9a01      	ldr	r2, [sp, #4]
   da2da:	68a1      	ldr	r1, [r4, #8]
   da2dc:	9b00      	ldr	r3, [sp, #0]
   da2de:	2a00      	cmp	r2, #0
   da2e0:	440b      	add	r3, r1
   da2e2:	60a3      	str	r3, [r4, #8]
   da2e4:	bfbb      	ittet	lt
   da2e6:	323c      	addlt	r2, #60	; 0x3c
   da2e8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   da2ec:	6062      	strge	r2, [r4, #4]
   da2ee:	6062      	strlt	r2, [r4, #4]
   da2f0:	bfb8      	it	lt
   da2f2:	60a3      	strlt	r3, [r4, #8]
   da2f4:	68a1      	ldr	r1, [r4, #8]
   da2f6:	2917      	cmp	r1, #23
   da2f8:	d911      	bls.n	da31e <validate_structure+0x82>
   da2fa:	2218      	movs	r2, #24
   da2fc:	4668      	mov	r0, sp
   da2fe:	f001 fb11 	bl	db924 <div>
   da302:	9a01      	ldr	r2, [sp, #4]
   da304:	68e1      	ldr	r1, [r4, #12]
   da306:	9b00      	ldr	r3, [sp, #0]
   da308:	2a00      	cmp	r2, #0
   da30a:	440b      	add	r3, r1
   da30c:	60e3      	str	r3, [r4, #12]
   da30e:	bfbb      	ittet	lt
   da310:	3218      	addlt	r2, #24
   da312:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   da316:	60a2      	strge	r2, [r4, #8]
   da318:	60a2      	strlt	r2, [r4, #8]
   da31a:	bfb8      	it	lt
   da31c:	60e3      	strlt	r3, [r4, #12]
   da31e:	6921      	ldr	r1, [r4, #16]
   da320:	290b      	cmp	r1, #11
   da322:	d911      	bls.n	da348 <validate_structure+0xac>
   da324:	220c      	movs	r2, #12
   da326:	4668      	mov	r0, sp
   da328:	f001 fafc 	bl	db924 <div>
   da32c:	9a01      	ldr	r2, [sp, #4]
   da32e:	6961      	ldr	r1, [r4, #20]
   da330:	9b00      	ldr	r3, [sp, #0]
   da332:	2a00      	cmp	r2, #0
   da334:	440b      	add	r3, r1
   da336:	6163      	str	r3, [r4, #20]
   da338:	bfbb      	ittet	lt
   da33a:	320c      	addlt	r2, #12
   da33c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   da340:	6122      	strge	r2, [r4, #16]
   da342:	6122      	strlt	r2, [r4, #16]
   da344:	bfb8      	it	lt
   da346:	6163      	strlt	r3, [r4, #20]
   da348:	6963      	ldr	r3, [r4, #20]
   da34a:	0799      	lsls	r1, r3, #30
   da34c:	d112      	bne.n	da374 <validate_structure+0xd8>
   da34e:	2164      	movs	r1, #100	; 0x64
   da350:	fb93 f2f1 	sdiv	r2, r3, r1
   da354:	fb01 3212 	mls	r2, r1, r2, r3
   da358:	b972      	cbnz	r2, da378 <validate_structure+0xdc>
   da35a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   da35e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da362:	fb93 f2f1 	sdiv	r2, r3, r1
   da366:	fb01 3312 	mls	r3, r1, r2, r3
   da36a:	2b00      	cmp	r3, #0
   da36c:	bf14      	ite	ne
   da36e:	231c      	movne	r3, #28
   da370:	231d      	moveq	r3, #29
   da372:	e002      	b.n	da37a <validate_structure+0xde>
   da374:	231c      	movs	r3, #28
   da376:	e000      	b.n	da37a <validate_structure+0xde>
   da378:	231d      	movs	r3, #29
   da37a:	68e2      	ldr	r2, [r4, #12]
   da37c:	2a00      	cmp	r2, #0
   da37e:	dd06      	ble.n	da38e <validate_structure+0xf2>
   da380:	4f33      	ldr	r7, [pc, #204]	; (da450 <validate_structure+0x1b4>)
   da382:	f04f 0e00 	mov.w	lr, #0
   da386:	2564      	movs	r5, #100	; 0x64
   da388:	f44f 76c8 	mov.w	r6, #400	; 0x190
   da38c:	e039      	b.n	da402 <validate_structure+0x166>
   da38e:	4f30      	ldr	r7, [pc, #192]	; (da450 <validate_structure+0x1b4>)
   da390:	260b      	movs	r6, #11
   da392:	2064      	movs	r0, #100	; 0x64
   da394:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da398:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   da39c:	f1be 0f00 	cmp.w	lr, #0
   da3a0:	dc53      	bgt.n	da44a <validate_structure+0x1ae>
   da3a2:	6921      	ldr	r1, [r4, #16]
   da3a4:	3901      	subs	r1, #1
   da3a6:	6121      	str	r1, [r4, #16]
   da3a8:	3101      	adds	r1, #1
   da3aa:	d118      	bne.n	da3de <validate_structure+0x142>
   da3ac:	6963      	ldr	r3, [r4, #20]
   da3ae:	6126      	str	r6, [r4, #16]
   da3b0:	1e59      	subs	r1, r3, #1
   da3b2:	078a      	lsls	r2, r1, #30
   da3b4:	6161      	str	r1, [r4, #20]
   da3b6:	d10f      	bne.n	da3d8 <validate_structure+0x13c>
   da3b8:	fb91 f2f0 	sdiv	r2, r1, r0
   da3bc:	fb00 1112 	mls	r1, r0, r2, r1
   da3c0:	b961      	cbnz	r1, da3dc <validate_structure+0x140>
   da3c2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   da3c6:	fb93 f2f5 	sdiv	r2, r3, r5
   da3ca:	fb05 3312 	mls	r3, r5, r2, r3
   da3ce:	2b00      	cmp	r3, #0
   da3d0:	bf14      	ite	ne
   da3d2:	231c      	movne	r3, #28
   da3d4:	231d      	moveq	r3, #29
   da3d6:	e002      	b.n	da3de <validate_structure+0x142>
   da3d8:	231c      	movs	r3, #28
   da3da:	e000      	b.n	da3de <validate_structure+0x142>
   da3dc:	231d      	movs	r3, #29
   da3de:	6922      	ldr	r2, [r4, #16]
   da3e0:	2a01      	cmp	r2, #1
   da3e2:	bf14      	ite	ne
   da3e4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   da3e8:	461a      	moveq	r2, r3
   da3ea:	4472      	add	r2, lr
   da3ec:	60e2      	str	r2, [r4, #12]
   da3ee:	e7d3      	b.n	da398 <validate_structure+0xfc>
   da3f0:	428b      	cmp	r3, r1
   da3f2:	da2a      	bge.n	da44a <validate_structure+0x1ae>
   da3f4:	4618      	mov	r0, r3
   da3f6:	3201      	adds	r2, #1
   da3f8:	1a09      	subs	r1, r1, r0
   da3fa:	2a0c      	cmp	r2, #12
   da3fc:	60e1      	str	r1, [r4, #12]
   da3fe:	6122      	str	r2, [r4, #16]
   da400:	d008      	beq.n	da414 <validate_structure+0x178>
   da402:	6922      	ldr	r2, [r4, #16]
   da404:	68e1      	ldr	r1, [r4, #12]
   da406:	2a01      	cmp	r2, #1
   da408:	d0f2      	beq.n	da3f0 <validate_structure+0x154>
   da40a:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   da40e:	4281      	cmp	r1, r0
   da410:	dcf1      	bgt.n	da3f6 <validate_structure+0x15a>
   da412:	e01a      	b.n	da44a <validate_structure+0x1ae>
   da414:	6963      	ldr	r3, [r4, #20]
   da416:	f8c4 e010 	str.w	lr, [r4, #16]
   da41a:	1c5a      	adds	r2, r3, #1
   da41c:	0791      	lsls	r1, r2, #30
   da41e:	6162      	str	r2, [r4, #20]
   da420:	d10f      	bne.n	da442 <validate_structure+0x1a6>
   da422:	fb92 f1f5 	sdiv	r1, r2, r5
   da426:	fb05 2211 	mls	r2, r5, r1, r2
   da42a:	b962      	cbnz	r2, da446 <validate_structure+0x1aa>
   da42c:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   da430:	fb93 f2f6 	sdiv	r2, r3, r6
   da434:	fb06 3312 	mls	r3, r6, r2, r3
   da438:	2b00      	cmp	r3, #0
   da43a:	bf14      	ite	ne
   da43c:	231c      	movne	r3, #28
   da43e:	231d      	moveq	r3, #29
   da440:	e7df      	b.n	da402 <validate_structure+0x166>
   da442:	231c      	movs	r3, #28
   da444:	e7dd      	b.n	da402 <validate_structure+0x166>
   da446:	231d      	movs	r3, #29
   da448:	e7db      	b.n	da402 <validate_structure+0x166>
   da44a:	b003      	add	sp, #12
   da44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da44e:	bf00      	nop
   da450:	000dc6a8 	.word	0x000dc6a8

000da454 <mktime>:
   da454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da458:	4605      	mov	r5, r0
   da45a:	f001 fabb 	bl	db9d4 <__gettzinfo>
   da45e:	4681      	mov	r9, r0
   da460:	4628      	mov	r0, r5
   da462:	f7ff ff1b 	bl	da29c <validate_structure>
   da466:	e895 000c 	ldmia.w	r5, {r2, r3}
   da46a:	213c      	movs	r1, #60	; 0x3c
   da46c:	fb01 2303 	mla	r3, r1, r3, r2
   da470:	68aa      	ldr	r2, [r5, #8]
   da472:	68ec      	ldr	r4, [r5, #12]
   da474:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   da478:	fb08 3102 	mla	r1, r8, r2, r3
   da47c:	692b      	ldr	r3, [r5, #16]
   da47e:	4aab      	ldr	r2, [pc, #684]	; (da72c <mktime+0x2d8>)
   da480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   da484:	3c01      	subs	r4, #1
   da486:	2b01      	cmp	r3, #1
   da488:	4414      	add	r4, r2
   da48a:	696b      	ldr	r3, [r5, #20]
   da48c:	dd11      	ble.n	da4b2 <mktime+0x5e>
   da48e:	079e      	lsls	r6, r3, #30
   da490:	d10f      	bne.n	da4b2 <mktime+0x5e>
   da492:	2064      	movs	r0, #100	; 0x64
   da494:	fb93 f2f0 	sdiv	r2, r3, r0
   da498:	fb00 3212 	mls	r2, r0, r2, r3
   da49c:	b942      	cbnz	r2, da4b0 <mktime+0x5c>
   da49e:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   da4a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da4a6:	fb96 f0f2 	sdiv	r0, r6, r2
   da4aa:	fb02 6210 	mls	r2, r2, r0, r6
   da4ae:	b902      	cbnz	r2, da4b2 <mktime+0x5e>
   da4b0:	3401      	adds	r4, #1
   da4b2:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   da4b6:	3210      	adds	r2, #16
   da4b8:	f644 6020 	movw	r0, #20000	; 0x4e20
   da4bc:	4282      	cmp	r2, r0
   da4be:	61ec      	str	r4, [r5, #28]
   da4c0:	461f      	mov	r7, r3
   da4c2:	f200 812e 	bhi.w	da722 <mktime+0x2ce>
   da4c6:	2b46      	cmp	r3, #70	; 0x46
   da4c8:	dd22      	ble.n	da510 <mktime+0xbc>
   da4ca:	2246      	movs	r2, #70	; 0x46
   da4cc:	f240 1c6d 	movw	ip, #365	; 0x16d
   da4d0:	2664      	movs	r6, #100	; 0x64
   da4d2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   da4d6:	0790      	lsls	r0, r2, #30
   da4d8:	d110      	bne.n	da4fc <mktime+0xa8>
   da4da:	fb92 f0f6 	sdiv	r0, r2, r6
   da4de:	fb06 2010 	mls	r0, r6, r0, r2
   da4e2:	b970      	cbnz	r0, da502 <mktime+0xae>
   da4e4:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   da4e8:	fb98 f0fe 	sdiv	r0, r8, lr
   da4ec:	fb0e 8010 	mls	r0, lr, r0, r8
   da4f0:	2800      	cmp	r0, #0
   da4f2:	bf14      	ite	ne
   da4f4:	4660      	movne	r0, ip
   da4f6:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da4fa:	e004      	b.n	da506 <mktime+0xb2>
   da4fc:	f240 106d 	movw	r0, #365	; 0x16d
   da500:	e001      	b.n	da506 <mktime+0xb2>
   da502:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da506:	3201      	adds	r2, #1
   da508:	4293      	cmp	r3, r2
   da50a:	4404      	add	r4, r0
   da50c:	d1e3      	bne.n	da4d6 <mktime+0x82>
   da50e:	e044      	b.n	da59a <mktime+0x146>
   da510:	d043      	beq.n	da59a <mktime+0x146>
   da512:	2245      	movs	r2, #69	; 0x45
   da514:	f240 1e6d 	movw	lr, #365	; 0x16d
   da518:	2664      	movs	r6, #100	; 0x64
   da51a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   da51e:	429a      	cmp	r2, r3
   da520:	dd1a      	ble.n	da558 <mktime+0x104>
   da522:	0790      	lsls	r0, r2, #30
   da524:	d110      	bne.n	da548 <mktime+0xf4>
   da526:	fb92 f0f6 	sdiv	r0, r2, r6
   da52a:	fb06 2010 	mls	r0, r6, r0, r2
   da52e:	b970      	cbnz	r0, da54e <mktime+0xfa>
   da530:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   da534:	fb9c f0f7 	sdiv	r0, ip, r7
   da538:	fb07 c010 	mls	r0, r7, r0, ip
   da53c:	2800      	cmp	r0, #0
   da53e:	bf14      	ite	ne
   da540:	4670      	movne	r0, lr
   da542:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   da546:	e004      	b.n	da552 <mktime+0xfe>
   da548:	f240 106d 	movw	r0, #365	; 0x16d
   da54c:	e001      	b.n	da552 <mktime+0xfe>
   da54e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   da552:	1a24      	subs	r4, r4, r0
   da554:	3a01      	subs	r2, #1
   da556:	e7e2      	b.n	da51e <mktime+0xca>
   da558:	2b45      	cmp	r3, #69	; 0x45
   da55a:	bfa8      	it	ge
   da55c:	2345      	movge	r3, #69	; 0x45
   da55e:	079e      	lsls	r6, r3, #30
   da560:	461f      	mov	r7, r3
   da562:	d114      	bne.n	da58e <mktime+0x13a>
   da564:	2264      	movs	r2, #100	; 0x64
   da566:	fb93 f3f2 	sdiv	r3, r3, r2
   da56a:	fb02 7313 	mls	r3, r2, r3, r7
   da56e:	b98b      	cbnz	r3, da594 <mktime+0x140>
   da570:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   da574:	f44f 73c8 	mov.w	r3, #400	; 0x190
   da578:	fb90 f2f3 	sdiv	r2, r0, r3
   da57c:	fb03 0312 	mls	r3, r3, r2, r0
   da580:	2b00      	cmp	r3, #0
   da582:	f240 136d 	movw	r3, #365	; 0x16d
   da586:	bf08      	it	eq
   da588:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   da58c:	e004      	b.n	da598 <mktime+0x144>
   da58e:	f240 136d 	movw	r3, #365	; 0x16d
   da592:	e001      	b.n	da598 <mktime+0x144>
   da594:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   da598:	1ae4      	subs	r4, r4, r3
   da59a:	4865      	ldr	r0, [pc, #404]	; (da730 <mktime+0x2dc>)
   da59c:	fb00 1804 	mla	r8, r0, r4, r1
   da5a0:	f001 f834 	bl	db60c <__tz_lock>
   da5a4:	f001 f834 	bl	db610 <_tzset_unlocked>
   da5a8:	4b62      	ldr	r3, [pc, #392]	; (da734 <mktime+0x2e0>)
   da5aa:	681e      	ldr	r6, [r3, #0]
   da5ac:	2e00      	cmp	r6, #0
   da5ae:	f000 80a4 	beq.w	da6fa <mktime+0x2a6>
   da5b2:	6a2b      	ldr	r3, [r5, #32]
   da5b4:	6968      	ldr	r0, [r5, #20]
   da5b6:	2b01      	cmp	r3, #1
   da5b8:	bfa8      	it	ge
   da5ba:	2301      	movge	r3, #1
   da5bc:	469a      	mov	sl, r3
   da5be:	f8d9 3004 	ldr.w	r3, [r9, #4]
   da5c2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   da5c6:	4298      	cmp	r0, r3
   da5c8:	d10d      	bne.n	da5e6 <mktime+0x192>
   da5ca:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   da5ce:	f8d9 3020 	ldr.w	r3, [r9, #32]
   da5d2:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da5d6:	f8d9 101c 	ldr.w	r1, [r9, #28]
   da5da:	1ad6      	subs	r6, r2, r3
   da5dc:	45b0      	cmp	r8, r6
   da5de:	eba1 0100 	sub.w	r1, r1, r0
   da5e2:	da05      	bge.n	da5f0 <mktime+0x19c>
   da5e4:	e007      	b.n	da5f6 <mktime+0x1a2>
   da5e6:	f000 ff69 	bl	db4bc <__tzcalc_limits>
   da5ea:	2800      	cmp	r0, #0
   da5ec:	d1ed      	bne.n	da5ca <mktime+0x176>
   da5ee:	e076      	b.n	da6de <mktime+0x28a>
   da5f0:	1a12      	subs	r2, r2, r0
   da5f2:	4590      	cmp	r8, r2
   da5f4:	db73      	blt.n	da6de <mktime+0x28a>
   da5f6:	f8d9 2000 	ldr.w	r2, [r9]
   da5fa:	b112      	cbz	r2, da602 <mktime+0x1ae>
   da5fc:	4588      	cmp	r8, r1
   da5fe:	db77      	blt.n	da6f0 <mktime+0x29c>
   da600:	e001      	b.n	da606 <mktime+0x1b2>
   da602:	4588      	cmp	r8, r1
   da604:	da07      	bge.n	da616 <mktime+0x1c2>
   da606:	45b0      	cmp	r8, r6
   da608:	bfac      	ite	ge
   da60a:	2600      	movge	r6, #0
   da60c:	2601      	movlt	r6, #1
   da60e:	f1ba 0f00 	cmp.w	sl, #0
   da612:	da04      	bge.n	da61e <mktime+0x1ca>
   da614:	e064      	b.n	da6e0 <mktime+0x28c>
   da616:	f1ba 0f00 	cmp.w	sl, #0
   da61a:	db63      	blt.n	da6e4 <mktime+0x290>
   da61c:	2601      	movs	r6, #1
   da61e:	ea8a 0a06 	eor.w	sl, sl, r6
   da622:	f1ba 0f01 	cmp.w	sl, #1
   da626:	d15b      	bne.n	da6e0 <mktime+0x28c>
   da628:	1a1b      	subs	r3, r3, r0
   da62a:	b906      	cbnz	r6, da62e <mktime+0x1da>
   da62c:	425b      	negs	r3, r3
   da62e:	682a      	ldr	r2, [r5, #0]
   da630:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   da634:	441a      	add	r2, r3
   da636:	602a      	str	r2, [r5, #0]
   da638:	4628      	mov	r0, r5
   da63a:	4498      	add	r8, r3
   da63c:	f7ff fe2e 	bl	da29c <validate_structure>
   da640:	68eb      	ldr	r3, [r5, #12]
   da642:	ebb3 030a 	subs.w	r3, r3, sl
   da646:	d04b      	beq.n	da6e0 <mktime+0x28c>
   da648:	2b01      	cmp	r3, #1
   da64a:	dc03      	bgt.n	da654 <mktime+0x200>
   da64c:	1c98      	adds	r0, r3, #2
   da64e:	bfd8      	it	le
   da650:	2301      	movle	r3, #1
   da652:	e001      	b.n	da658 <mktime+0x204>
   da654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da658:	69ea      	ldr	r2, [r5, #28]
   da65a:	441c      	add	r4, r3
   da65c:	189b      	adds	r3, r3, r2
   da65e:	d51d      	bpl.n	da69c <mktime+0x248>
   da660:	1e7b      	subs	r3, r7, #1
   da662:	0799      	lsls	r1, r3, #30
   da664:	d114      	bne.n	da690 <mktime+0x23c>
   da666:	2164      	movs	r1, #100	; 0x64
   da668:	fb93 f2f1 	sdiv	r2, r3, r1
   da66c:	fb01 3312 	mls	r3, r1, r2, r3
   da670:	b98b      	cbnz	r3, da696 <mktime+0x242>
   da672:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   da676:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da67a:	fb97 f3f2 	sdiv	r3, r7, r2
   da67e:	fb02 7713 	mls	r7, r2, r3, r7
   da682:	2f00      	cmp	r7, #0
   da684:	f240 136d 	movw	r3, #365	; 0x16d
   da688:	bf18      	it	ne
   da68a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   da68e:	e024      	b.n	da6da <mktime+0x286>
   da690:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   da694:	e021      	b.n	da6da <mktime+0x286>
   da696:	f240 136d 	movw	r3, #365	; 0x16d
   da69a:	e01e      	b.n	da6da <mktime+0x286>
   da69c:	07ba      	lsls	r2, r7, #30
   da69e:	d114      	bne.n	da6ca <mktime+0x276>
   da6a0:	2164      	movs	r1, #100	; 0x64
   da6a2:	fb97 f2f1 	sdiv	r2, r7, r1
   da6a6:	fb01 7212 	mls	r2, r1, r2, r7
   da6aa:	b98a      	cbnz	r2, da6d0 <mktime+0x27c>
   da6ac:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   da6b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da6b4:	fb97 f2f1 	sdiv	r2, r7, r1
   da6b8:	fb01 7712 	mls	r7, r1, r2, r7
   da6bc:	2f00      	cmp	r7, #0
   da6be:	f240 126d 	movw	r2, #365	; 0x16d
   da6c2:	bf08      	it	eq
   da6c4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   da6c8:	e004      	b.n	da6d4 <mktime+0x280>
   da6ca:	f240 126d 	movw	r2, #365	; 0x16d
   da6ce:	e001      	b.n	da6d4 <mktime+0x280>
   da6d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   da6d4:	429a      	cmp	r2, r3
   da6d6:	bfd8      	it	le
   da6d8:	1a9b      	suble	r3, r3, r2
   da6da:	61eb      	str	r3, [r5, #28]
   da6dc:	e000      	b.n	da6e0 <mktime+0x28c>
   da6de:	4656      	mov	r6, sl
   da6e0:	2e01      	cmp	r6, #1
   da6e2:	d10a      	bne.n	da6fa <mktime+0x2a6>
   da6e4:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   da6e8:	2601      	movs	r6, #1
   da6ea:	eb08 0700 	add.w	r7, r8, r0
   da6ee:	e008      	b.n	da702 <mktime+0x2ae>
   da6f0:	f1ba 0f00 	cmp.w	sl, #0
   da6f4:	f04f 0600 	mov.w	r6, #0
   da6f8:	da91      	bge.n	da61e <mktime+0x1ca>
   da6fa:	f8d9 0020 	ldr.w	r0, [r9, #32]
   da6fe:	eb08 0700 	add.w	r7, r8, r0
   da702:	f000 ff84 	bl	db60e <__tz_unlock>
   da706:	3404      	adds	r4, #4
   da708:	2307      	movs	r3, #7
   da70a:	fb94 f3f3 	sdiv	r3, r4, r3
   da70e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da712:	1ae4      	subs	r4, r4, r3
   da714:	bf48      	it	mi
   da716:	3407      	addmi	r4, #7
   da718:	622e      	str	r6, [r5, #32]
   da71a:	61ac      	str	r4, [r5, #24]
   da71c:	4638      	mov	r0, r7
   da71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da72a:	bf00      	nop
   da72c:	000dc678 	.word	0x000dc678
   da730:	00015180 	.word	0x00015180
   da734:	2003e7e4 	.word	0x2003e7e4

000da738 <srand>:
   da738:	b538      	push	{r3, r4, r5, lr}
   da73a:	4b12      	ldr	r3, [pc, #72]	; (da784 <srand+0x4c>)
   da73c:	681c      	ldr	r4, [r3, #0]
   da73e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da740:	4605      	mov	r5, r0
   da742:	b9d3      	cbnz	r3, da77a <srand+0x42>
   da744:	2018      	movs	r0, #24
   da746:	f7fc feab 	bl	d74a0 <malloc>
   da74a:	f243 330e 	movw	r3, #13070	; 0x330e
   da74e:	63a0      	str	r0, [r4, #56]	; 0x38
   da750:	8003      	strh	r3, [r0, #0]
   da752:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da756:	8043      	strh	r3, [r0, #2]
   da758:	f241 2334 	movw	r3, #4660	; 0x1234
   da75c:	8083      	strh	r3, [r0, #4]
   da75e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da762:	80c3      	strh	r3, [r0, #6]
   da764:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da768:	8103      	strh	r3, [r0, #8]
   da76a:	2305      	movs	r3, #5
   da76c:	8143      	strh	r3, [r0, #10]
   da76e:	230b      	movs	r3, #11
   da770:	8183      	strh	r3, [r0, #12]
   da772:	2201      	movs	r2, #1
   da774:	2300      	movs	r3, #0
   da776:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da77a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da77c:	2200      	movs	r2, #0
   da77e:	611d      	str	r5, [r3, #16]
   da780:	615a      	str	r2, [r3, #20]
   da782:	bd38      	pop	{r3, r4, r5, pc}
   da784:	2003dfdc 	.word	0x2003dfdc

000da788 <strcmp>:
   da788:	f810 2b01 	ldrb.w	r2, [r0], #1
   da78c:	f811 3b01 	ldrb.w	r3, [r1], #1
   da790:	2a01      	cmp	r2, #1
   da792:	bf28      	it	cs
   da794:	429a      	cmpcs	r2, r3
   da796:	d0f7      	beq.n	da788 <strcmp>
   da798:	1ad0      	subs	r0, r2, r3
   da79a:	4770      	bx	lr

000da79c <strcpy>:
   da79c:	4603      	mov	r3, r0
   da79e:	f811 2b01 	ldrb.w	r2, [r1], #1
   da7a2:	f803 2b01 	strb.w	r2, [r3], #1
   da7a6:	2a00      	cmp	r2, #0
   da7a8:	d1f9      	bne.n	da79e <strcpy+0x2>
   da7aa:	4770      	bx	lr

000da7ac <strdup>:
   da7ac:	4b02      	ldr	r3, [pc, #8]	; (da7b8 <strdup+0xc>)
   da7ae:	4601      	mov	r1, r0
   da7b0:	6818      	ldr	r0, [r3, #0]
   da7b2:	f000 b803 	b.w	da7bc <_strdup_r>
   da7b6:	bf00      	nop
   da7b8:	2003dfdc 	.word	0x2003dfdc

000da7bc <_strdup_r>:
   da7bc:	b570      	push	{r4, r5, r6, lr}
   da7be:	4606      	mov	r6, r0
   da7c0:	4608      	mov	r0, r1
   da7c2:	460c      	mov	r4, r1
   da7c4:	f000 fd22 	bl	db20c <strlen>
   da7c8:	1c45      	adds	r5, r0, #1
   da7ca:	4629      	mov	r1, r5
   da7cc:	4630      	mov	r0, r6
   da7ce:	f7fc fea7 	bl	d7520 <_malloc_r>
   da7d2:	4606      	mov	r6, r0
   da7d4:	b118      	cbz	r0, da7de <_strdup_r+0x22>
   da7d6:	462a      	mov	r2, r5
   da7d8:	4621      	mov	r1, r4
   da7da:	f7ff fd31 	bl	da240 <memcpy>
   da7de:	4630      	mov	r0, r6
   da7e0:	bd70      	pop	{r4, r5, r6, pc}

000da7e2 <iso_year_adjust>:
   da7e2:	6941      	ldr	r1, [r0, #20]
   da7e4:	078b      	lsls	r3, r1, #30
   da7e6:	b510      	push	{r4, lr}
   da7e8:	d10c      	bne.n	da804 <iso_year_adjust+0x22>
   da7ea:	2900      	cmp	r1, #0
   da7ec:	f240 736c 	movw	r3, #1900	; 0x76c
   da7f0:	bfa8      	it	ge
   da7f2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da7f6:	440b      	add	r3, r1
   da7f8:	2464      	movs	r4, #100	; 0x64
   da7fa:	fb93 f2f4 	sdiv	r2, r3, r4
   da7fe:	fb04 3312 	mls	r3, r4, r2, r3
   da802:	b983      	cbnz	r3, da826 <iso_year_adjust+0x44>
   da804:	2900      	cmp	r1, #0
   da806:	f240 736c 	movw	r3, #1900	; 0x76c
   da80a:	bfa8      	it	ge
   da80c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   da810:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da814:	440b      	add	r3, r1
   da816:	fb93 f1f2 	sdiv	r1, r3, r2
   da81a:	fb02 3311 	mls	r3, r2, r1, r3
   da81e:	fab3 f283 	clz	r2, r3
   da822:	0952      	lsrs	r2, r2, #5
   da824:	e000      	b.n	da828 <iso_year_adjust+0x46>
   da826:	2201      	movs	r2, #1
   da828:	6983      	ldr	r3, [r0, #24]
   da82a:	69c1      	ldr	r1, [r0, #28]
   da82c:	005b      	lsls	r3, r3, #1
   da82e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   da832:	4413      	add	r3, r2
   da834:	2b21      	cmp	r3, #33	; 0x21
   da836:	dc0e      	bgt.n	da856 <iso_year_adjust+0x74>
   da838:	2b20      	cmp	r3, #32
   da83a:	da2f      	bge.n	da89c <iso_year_adjust+0xba>
   da83c:	2b0d      	cmp	r3, #13
   da83e:	dc02      	bgt.n	da846 <iso_year_adjust+0x64>
   da840:	2b0a      	cmp	r3, #10
   da842:	db05      	blt.n	da850 <iso_year_adjust+0x6e>
   da844:	e02a      	b.n	da89c <iso_year_adjust+0xba>
   da846:	2b10      	cmp	r3, #16
   da848:	db26      	blt.n	da898 <iso_year_adjust+0xb6>
   da84a:	2b11      	cmp	r3, #17
   da84c:	dd26      	ble.n	da89c <iso_year_adjust+0xba>
   da84e:	3b1c      	subs	r3, #28
   da850:	2b01      	cmp	r3, #1
   da852:	d923      	bls.n	da89c <iso_year_adjust+0xba>
   da854:	e020      	b.n	da898 <iso_year_adjust+0xb6>
   da856:	f241 62c6 	movw	r2, #5830	; 0x16c6
   da85a:	4293      	cmp	r3, r2
   da85c:	dc0e      	bgt.n	da87c <iso_year_adjust+0x9a>
   da85e:	f241 62c2 	movw	r2, #5826	; 0x16c2
   da862:	4293      	cmp	r3, r2
   da864:	da16      	bge.n	da894 <iso_year_adjust+0xb2>
   da866:	f241 62a2 	movw	r2, #5794	; 0x16a2
   da86a:	4293      	cmp	r3, r2
   da86c:	d012      	beq.n	da894 <iso_year_adjust+0xb2>
   da86e:	db13      	blt.n	da898 <iso_year_adjust+0xb6>
   da870:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   da874:	3b12      	subs	r3, #18
   da876:	2b02      	cmp	r3, #2
   da878:	d90c      	bls.n	da894 <iso_year_adjust+0xb2>
   da87a:	e00d      	b.n	da898 <iso_year_adjust+0xb6>
   da87c:	f241 62d5 	movw	r2, #5845	; 0x16d5
   da880:	4293      	cmp	r3, r2
   da882:	d007      	beq.n	da894 <iso_year_adjust+0xb2>
   da884:	f241 62d7 	movw	r2, #5847	; 0x16d7
   da888:	4293      	cmp	r3, r2
   da88a:	d003      	beq.n	da894 <iso_year_adjust+0xb2>
   da88c:	f241 62d3 	movw	r2, #5843	; 0x16d3
   da890:	4293      	cmp	r3, r2
   da892:	d101      	bne.n	da898 <iso_year_adjust+0xb6>
   da894:	2001      	movs	r0, #1
   da896:	bd10      	pop	{r4, pc}
   da898:	2000      	movs	r0, #0
   da89a:	bd10      	pop	{r4, pc}
   da89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da8a0:	bd10      	pop	{r4, pc}
	...

000da8a4 <strftime>:
   da8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8a8:	b093      	sub	sp, #76	; 0x4c
   da8aa:	460e      	mov	r6, r1
   da8ac:	461d      	mov	r5, r3
   da8ae:	4607      	mov	r7, r0
   da8b0:	4691      	mov	r9, r2
   da8b2:	f000 fdf3 	bl	db49c <__get_current_time_locale>
   da8b6:	2300      	movs	r3, #0
   da8b8:	9306      	str	r3, [sp, #24]
   da8ba:	461c      	mov	r4, r3
   da8bc:	1e73      	subs	r3, r6, #1
   da8be:	9003      	str	r0, [sp, #12]
   da8c0:	9302      	str	r3, [sp, #8]
   da8c2:	f899 3000 	ldrb.w	r3, [r9]
   da8c6:	2b00      	cmp	r3, #0
   da8c8:	f000 8492 	beq.w	db1f0 <strftime+0x94c>
   da8cc:	2b25      	cmp	r3, #37	; 0x25
   da8ce:	d008      	beq.n	da8e2 <strftime+0x3e>
   da8d0:	9a02      	ldr	r2, [sp, #8]
   da8d2:	4294      	cmp	r4, r2
   da8d4:	f080 8490 	bcs.w	db1f8 <strftime+0x954>
   da8d8:	553b      	strb	r3, [r7, r4]
   da8da:	f109 0901 	add.w	r9, r9, #1
   da8de:	3401      	adds	r4, #1
   da8e0:	e7ef      	b.n	da8c2 <strftime+0x1e>
   da8e2:	f899 a001 	ldrb.w	sl, [r9, #1]
   da8e6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   da8ea:	d007      	beq.n	da8fc <strftime+0x58>
   da8ec:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   da8f0:	d004      	beq.n	da8fc <strftime+0x58>
   da8f2:	f109 0901 	add.w	r9, r9, #1
   da8f6:	f04f 0a00 	mov.w	sl, #0
   da8fa:	e001      	b.n	da900 <strftime+0x5c>
   da8fc:	f109 0902 	add.w	r9, r9, #2
   da900:	f899 3000 	ldrb.w	r3, [r9]
   da904:	3b31      	subs	r3, #49	; 0x31
   da906:	2b08      	cmp	r3, #8
   da908:	d808      	bhi.n	da91c <strftime+0x78>
   da90a:	4648      	mov	r0, r9
   da90c:	220a      	movs	r2, #10
   da90e:	a90a      	add	r1, sp, #40	; 0x28
   da910:	f000 fdba 	bl	db488 <strtoul>
   da914:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   da918:	4680      	mov	r8, r0
   da91a:	e001      	b.n	da920 <strftime+0x7c>
   da91c:	f04f 0800 	mov.w	r8, #0
   da920:	f899 3000 	ldrb.w	r3, [r9]
   da924:	2b45      	cmp	r3, #69	; 0x45
   da926:	d001      	beq.n	da92c <strftime+0x88>
   da928:	2b4f      	cmp	r3, #79	; 0x4f
   da92a:	d101      	bne.n	da930 <strftime+0x8c>
   da92c:	f109 0901 	add.w	r9, r9, #1
   da930:	f899 0000 	ldrb.w	r0, [r9]
   da934:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   da938:	2b55      	cmp	r3, #85	; 0x55
   da93a:	f200 845d 	bhi.w	db1f8 <strftime+0x954>
   da93e:	e8df f013 	tbh	[pc, r3, lsl #1]
   da942:	044a      	.short	0x044a
   da944:	045b045b 	.word	0x045b045b
   da948:	045b045b 	.word	0x045b045b
   da94c:	045b045b 	.word	0x045b045b
   da950:	045b045b 	.word	0x045b045b
   da954:	045b045b 	.word	0x045b045b
   da958:	045b045b 	.word	0x045b045b
   da95c:	045b045b 	.word	0x045b045b
   da960:	045b045b 	.word	0x045b045b
   da964:	045b045b 	.word	0x045b045b
   da968:	045b045b 	.word	0x045b045b
   da96c:	045b045b 	.word	0x045b045b
   da970:	045b045b 	.word	0x045b045b
   da974:	045b045b 	.word	0x045b045b
   da978:	006f045b 	.word	0x006f045b
   da97c:	00d400a1 	.word	0x00d400a1
   da980:	045b011a 	.word	0x045b011a
   da984:	01a0013f 	.word	0x01a0013f
   da988:	022d0226 	.word	0x022d0226
   da98c:	045b045b 	.word	0x045b045b
   da990:	0260045b 	.word	0x0260045b
   da994:	045b045b 	.word	0x045b045b
   da998:	045b0268 	.word	0x045b0268
   da99c:	031d0297 	.word	0x031d0297
   da9a0:	033b0325 	.word	0x033b0325
   da9a4:	03860343 	.word	0x03860343
   da9a8:	03a000c6 	.word	0x03a000c6
   da9ac:	045b041f 	.word	0x045b041f
   da9b0:	045b045b 	.word	0x045b045b
   da9b4:	045b045b 	.word	0x045b045b
   da9b8:	0056045b 	.word	0x0056045b
   da9bc:	00ba0089 	.word	0x00ba0089
   da9c0:	010c010c 	.word	0x010c010c
   da9c4:	0171045b 	.word	0x0171045b
   da9c8:	045b0089 	.word	0x045b0089
   da9cc:	0226023d 	.word	0x0226023d
   da9d0:	025d022d 	.word	0x025d022d
   da9d4:	045b0262 	.word	0x045b0262
   da9d8:	045b0268 	.word	0x045b0268
   da9dc:	029c00be 	.word	0x029c00be
   da9e0:	032e031f 	.word	0x032e031f
   da9e4:	037f045b 	.word	0x037f045b
   da9e8:	039200c2 	.word	0x039200c2
   da9ec:	03e7      	.short	0x03e7
   da9ee:	69ab      	ldr	r3, [r5, #24]
   da9f0:	9a03      	ldr	r2, [sp, #12]
   da9f2:	3318      	adds	r3, #24
   da9f4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   da9f8:	4640      	mov	r0, r8
   da9fa:	f000 fc07 	bl	db20c <strlen>
   da9fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   daa02:	193b      	adds	r3, r7, r4
   daa04:	4420      	add	r0, r4
   daa06:	4284      	cmp	r4, r0
   daa08:	f000 83eb 	beq.w	db1e2 <strftime+0x93e>
   daa0c:	9a02      	ldr	r2, [sp, #8]
   daa0e:	4294      	cmp	r4, r2
   daa10:	f080 83f2 	bcs.w	db1f8 <strftime+0x954>
   daa14:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   daa18:	f803 2b01 	strb.w	r2, [r3], #1
   daa1c:	3401      	adds	r4, #1
   daa1e:	e7f2      	b.n	daa06 <strftime+0x162>
   daa20:	69ab      	ldr	r3, [r5, #24]
   daa22:	9a03      	ldr	r2, [sp, #12]
   daa24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daa28:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   daa2c:	4640      	mov	r0, r8
   daa2e:	f000 fbed 	bl	db20c <strlen>
   daa32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   daa36:	193b      	adds	r3, r7, r4
   daa38:	4420      	add	r0, r4
   daa3a:	4284      	cmp	r4, r0
   daa3c:	f000 83d1 	beq.w	db1e2 <strftime+0x93e>
   daa40:	9a02      	ldr	r2, [sp, #8]
   daa42:	4294      	cmp	r4, r2
   daa44:	f080 83d8 	bcs.w	db1f8 <strftime+0x954>
   daa48:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   daa4c:	f803 2b01 	strb.w	r2, [r3], #1
   daa50:	3401      	adds	r4, #1
   daa52:	e7f2      	b.n	daa3a <strftime+0x196>
   daa54:	692b      	ldr	r3, [r5, #16]
   daa56:	9a03      	ldr	r2, [sp, #12]
   daa58:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   daa5c:	4640      	mov	r0, r8
   daa5e:	f000 fbd5 	bl	db20c <strlen>
   daa62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   daa66:	193b      	adds	r3, r7, r4
   daa68:	4420      	add	r0, r4
   daa6a:	4284      	cmp	r4, r0
   daa6c:	f000 83b9 	beq.w	db1e2 <strftime+0x93e>
   daa70:	9a02      	ldr	r2, [sp, #8]
   daa72:	4294      	cmp	r4, r2
   daa74:	f080 83c0 	bcs.w	db1f8 <strftime+0x954>
   daa78:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   daa7c:	f803 2b01 	strb.w	r2, [r3], #1
   daa80:	3401      	adds	r4, #1
   daa82:	e7f2      	b.n	daa6a <strftime+0x1c6>
   daa84:	692b      	ldr	r3, [r5, #16]
   daa86:	9a03      	ldr	r2, [sp, #12]
   daa88:	330c      	adds	r3, #12
   daa8a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   daa8e:	4640      	mov	r0, r8
   daa90:	f000 fbbc 	bl	db20c <strlen>
   daa94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   daa98:	193b      	adds	r3, r7, r4
   daa9a:	4420      	add	r0, r4
   daa9c:	4284      	cmp	r4, r0
   daa9e:	f000 83a0 	beq.w	db1e2 <strftime+0x93e>
   daaa2:	9a02      	ldr	r2, [sp, #8]
   daaa4:	4294      	cmp	r4, r2
   daaa6:	f080 83a7 	bcs.w	db1f8 <strftime+0x954>
   daaaa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   daaae:	f803 2b01 	strb.w	r2, [r3], #1
   daab2:	3401      	adds	r4, #1
   daab4:	e7f2      	b.n	daa9c <strftime+0x1f8>
   daab6:	9b03      	ldr	r3, [sp, #12]
   daab8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   daabc:	e00a      	b.n	daad4 <strftime+0x230>
   daabe:	9b03      	ldr	r3, [sp, #12]
   daac0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   daac4:	e006      	b.n	daad4 <strftime+0x230>
   daac6:	9b03      	ldr	r3, [sp, #12]
   daac8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   daacc:	e002      	b.n	daad4 <strftime+0x230>
   daace:	9b03      	ldr	r3, [sp, #12]
   daad0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   daad4:	4640      	mov	r0, r8
   daad6:	f000 fb99 	bl	db20c <strlen>
   daada:	f898 3000 	ldrb.w	r3, [r8]
   daade:	2b00      	cmp	r3, #0
   daae0:	f000 837f 	beq.w	db1e2 <strftime+0x93e>
   daae4:	462b      	mov	r3, r5
   daae6:	4642      	mov	r2, r8
   daae8:	e093      	b.n	dac12 <strftime+0x36e>
   daaea:	49b6      	ldr	r1, [pc, #728]	; (dadc4 <strftime+0x520>)
   daaec:	f8d5 b014 	ldr.w	fp, [r5, #20]
   daaf0:	458b      	cmp	fp, r1
   daaf2:	bfac      	ite	ge
   daaf4:	2100      	movge	r1, #0
   daaf6:	2101      	movlt	r1, #1
   daaf8:	f1bb 0f00 	cmp.w	fp, #0
   daafc:	db04      	blt.n	dab08 <strftime+0x264>
   daafe:	2064      	movs	r0, #100	; 0x64
   dab00:	fb9b f0f0 	sdiv	r0, fp, r0
   dab04:	3013      	adds	r0, #19
   dab06:	e008      	b.n	dab1a <strftime+0x276>
   dab08:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   dab0c:	9107      	str	r1, [sp, #28]
   dab0e:	f000 ff05 	bl	db91c <abs>
   dab12:	9907      	ldr	r1, [sp, #28]
   dab14:	2364      	movs	r3, #100	; 0x64
   dab16:	fb90 f0f3 	sdiv	r0, r0, r3
   dab1a:	f1ba 0f00 	cmp.w	sl, #0
   dab1e:	d008      	beq.n	dab32 <strftime+0x28e>
   dab20:	2863      	cmp	r0, #99	; 0x63
   dab22:	dd09      	ble.n	dab38 <strftime+0x294>
   dab24:	4ba8      	ldr	r3, [pc, #672]	; (dadc8 <strftime+0x524>)
   dab26:	4aa9      	ldr	r2, [pc, #676]	; (dadcc <strftime+0x528>)
   dab28:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dab2c:	bf18      	it	ne
   dab2e:	4613      	movne	r3, r2
   dab30:	e003      	b.n	dab3a <strftime+0x296>
   dab32:	4ba6      	ldr	r3, [pc, #664]	; (dadcc <strftime+0x528>)
   dab34:	4aa6      	ldr	r2, [pc, #664]	; (dadd0 <strftime+0x52c>)
   dab36:	e001      	b.n	dab3c <strftime+0x298>
   dab38:	4ba4      	ldr	r3, [pc, #656]	; (dadcc <strftime+0x528>)
   dab3a:	4aa6      	ldr	r2, [pc, #664]	; (dadd4 <strftime+0x530>)
   dab3c:	9001      	str	r0, [sp, #4]
   dab3e:	f1b8 0f01 	cmp.w	r8, #1
   dab42:	bf98      	it	ls
   dab44:	f04f 0802 	movls.w	r8, #2
   dab48:	ebc1 0108 	rsb	r1, r1, r8
   dab4c:	9100      	str	r1, [sp, #0]
   dab4e:	489d      	ldr	r0, [pc, #628]	; (dadc4 <strftime+0x520>)
   dab50:	49a1      	ldr	r1, [pc, #644]	; (dadd8 <strftime+0x534>)
   dab52:	4583      	cmp	fp, r0
   dab54:	bfb8      	it	lt
   dab56:	460b      	movlt	r3, r1
   dab58:	e21e      	b.n	daf98 <strftime+0x6f4>
   dab5a:	4aa0      	ldr	r2, [pc, #640]	; (daddc <strftime+0x538>)
   dab5c:	49a0      	ldr	r1, [pc, #640]	; (dade0 <strftime+0x53c>)
   dab5e:	68eb      	ldr	r3, [r5, #12]
   dab60:	2864      	cmp	r0, #100	; 0x64
   dab62:	bf08      	it	eq
   dab64:	460a      	moveq	r2, r1
   dab66:	1b31      	subs	r1, r6, r4
   dab68:	1938      	adds	r0, r7, r4
   dab6a:	f7fc fcc9 	bl	d7500 <sniprintf>
   dab6e:	2800      	cmp	r0, #0
   dab70:	f280 8302 	bge.w	db178 <strftime+0x8d4>
   dab74:	e340      	b.n	db1f8 <strftime+0x954>
   dab76:	6968      	ldr	r0, [r5, #20]
   dab78:	692b      	ldr	r3, [r5, #16]
   dab7a:	2800      	cmp	r0, #0
   dab7c:	f103 0b01 	add.w	fp, r3, #1
   dab80:	eb07 0804 	add.w	r8, r7, r4
   dab84:	ebc4 0a06 	rsb	sl, r4, r6
   dab88:	68eb      	ldr	r3, [r5, #12]
   dab8a:	db05      	blt.n	dab98 <strftime+0x2f4>
   dab8c:	2264      	movs	r2, #100	; 0x64
   dab8e:	fb90 f1f2 	sdiv	r1, r0, r2
   dab92:	fb02 0011 	mls	r0, r2, r1, r0
   dab96:	e00a      	b.n	dabae <strftime+0x30a>
   dab98:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dab9c:	9307      	str	r3, [sp, #28]
   dab9e:	f000 febd 	bl	db91c <abs>
   daba2:	2264      	movs	r2, #100	; 0x64
   daba4:	9b07      	ldr	r3, [sp, #28]
   daba6:	fb90 f1f2 	sdiv	r1, r0, r2
   dabaa:	fb01 0012 	mls	r0, r1, r2, r0
   dabae:	4a8d      	ldr	r2, [pc, #564]	; (dade4 <strftime+0x540>)
   dabb0:	9001      	str	r0, [sp, #4]
   dabb2:	9300      	str	r3, [sp, #0]
   dabb4:	4651      	mov	r1, sl
   dabb6:	465b      	mov	r3, fp
   dabb8:	4640      	mov	r0, r8
   dabba:	f7fc fca1 	bl	d7500 <sniprintf>
   dabbe:	e7d6      	b.n	dab6e <strftime+0x2ca>
   dabc0:	2325      	movs	r3, #37	; 0x25
   dabc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   dabc6:	f1ba 0f00 	cmp.w	sl, #0
   dabca:	d007      	beq.n	dabdc <strftime+0x338>
   dabcc:	f1b8 0f05 	cmp.w	r8, #5
   dabd0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   dabd4:	bf98      	it	ls
   dabd6:	f04f 0806 	movls.w	r8, #6
   dabda:	e004      	b.n	dabe6 <strftime+0x342>
   dabdc:	232b      	movs	r3, #43	; 0x2b
   dabde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   dabe2:	f04f 080a 	mov.w	r8, #10
   dabe6:	f1b8 0306 	subs.w	r3, r8, #6
   dabea:	d102      	bne.n	dabf2 <strftime+0x34e>
   dabec:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dabf0:	e00a      	b.n	dac08 <strftime+0x364>
   dabf2:	4a7d      	ldr	r2, [pc, #500]	; (dade8 <strftime+0x544>)
   dabf4:	211e      	movs	r1, #30
   dabf6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   dabfa:	f7fc fc81 	bl	d7500 <sniprintf>
   dabfe:	2800      	cmp	r0, #0
   dac00:	ddf4      	ble.n	dabec <strftime+0x348>
   dac02:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   dac06:	4418      	add	r0, r3
   dac08:	4978      	ldr	r1, [pc, #480]	; (dadec <strftime+0x548>)
   dac0a:	f7ff fdc7 	bl	da79c <strcpy>
   dac0e:	462b      	mov	r3, r5
   dac10:	aa0a      	add	r2, sp, #40	; 0x28
   dac12:	1b31      	subs	r1, r6, r4
   dac14:	1938      	adds	r0, r7, r4
   dac16:	f7ff fe45 	bl	da8a4 <strftime>
   dac1a:	2800      	cmp	r0, #0
   dac1c:	f340 82ec 	ble.w	db1f8 <strftime+0x954>
   dac20:	4404      	add	r4, r0
   dac22:	e2de      	b.n	db1e2 <strftime+0x93e>
   dac24:	4628      	mov	r0, r5
   dac26:	f7ff fddc 	bl	da7e2 <iso_year_adjust>
   dac2a:	4680      	mov	r8, r0
   dac2c:	6968      	ldr	r0, [r5, #20]
   dac2e:	2800      	cmp	r0, #0
   dac30:	db05      	blt.n	dac3e <strftime+0x39a>
   dac32:	2264      	movs	r2, #100	; 0x64
   dac34:	fb90 f1f2 	sdiv	r1, r0, r2
   dac38:	fb02 0011 	mls	r0, r2, r1, r0
   dac3c:	e008      	b.n	dac50 <strftime+0x3ac>
   dac3e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dac42:	f000 fe6b 	bl	db91c <abs>
   dac46:	2264      	movs	r2, #100	; 0x64
   dac48:	fb90 f3f2 	sdiv	r3, r0, r2
   dac4c:	fb03 0012 	mls	r0, r3, r2, r0
   dac50:	f1b8 0f00 	cmp.w	r8, #0
   dac54:	da06      	bge.n	dac64 <strftime+0x3c0>
   dac56:	696a      	ldr	r2, [r5, #20]
   dac58:	4b65      	ldr	r3, [pc, #404]	; (dadf0 <strftime+0x54c>)
   dac5a:	429a      	cmp	r2, r3
   dac5c:	bfb8      	it	lt
   dac5e:	f04f 0801 	movlt.w	r8, #1
   dac62:	e006      	b.n	dac72 <strftime+0x3ce>
   dac64:	d005      	beq.n	dac72 <strftime+0x3ce>
   dac66:	696a      	ldr	r2, [r5, #20]
   dac68:	4b56      	ldr	r3, [pc, #344]	; (dadc4 <strftime+0x520>)
   dac6a:	429a      	cmp	r2, r3
   dac6c:	bfb8      	it	lt
   dac6e:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   dac72:	2364      	movs	r3, #100	; 0x64
   dac74:	4440      	add	r0, r8
   dac76:	fb90 f2f3 	sdiv	r2, r0, r3
   dac7a:	fb03 0012 	mls	r0, r3, r2, r0
   dac7e:	4418      	add	r0, r3
   dac80:	e1f9      	b.n	db076 <strftime+0x7d2>
   dac82:	4b50      	ldr	r3, [pc, #320]	; (dadc4 <strftime+0x520>)
   dac84:	6969      	ldr	r1, [r5, #20]
   dac86:	9108      	str	r1, [sp, #32]
   dac88:	4299      	cmp	r1, r3
   dac8a:	bfac      	ite	ge
   dac8c:	2300      	movge	r3, #0
   dac8e:	2301      	movlt	r3, #1
   dac90:	4628      	mov	r0, r5
   dac92:	9307      	str	r3, [sp, #28]
   dac94:	f7ff fda5 	bl	da7e2 <iso_year_adjust>
   dac98:	9908      	ldr	r1, [sp, #32]
   dac9a:	2900      	cmp	r1, #0
   dac9c:	4683      	mov	fp, r0
   dac9e:	db04      	blt.n	dacaa <strftime+0x406>
   daca0:	2364      	movs	r3, #100	; 0x64
   daca2:	fb91 f3f3 	sdiv	r3, r1, r3
   daca6:	3313      	adds	r3, #19
   daca8:	e008      	b.n	dacbc <strftime+0x418>
   dacaa:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   dacae:	9108      	str	r1, [sp, #32]
   dacb0:	f000 fe34 	bl	db91c <abs>
   dacb4:	9908      	ldr	r1, [sp, #32]
   dacb6:	2364      	movs	r3, #100	; 0x64
   dacb8:	fb90 f3f3 	sdiv	r3, r0, r3
   dacbc:	6968      	ldr	r0, [r5, #20]
   dacbe:	2800      	cmp	r0, #0
   dacc0:	db06      	blt.n	dacd0 <strftime+0x42c>
   dacc2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dacc6:	fb90 fcfe 	sdiv	ip, r0, lr
   dacca:	fb0e 001c 	mls	r0, lr, ip, r0
   dacce:	e00d      	b.n	dacec <strftime+0x448>
   dacd0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   dacd4:	9109      	str	r1, [sp, #36]	; 0x24
   dacd6:	9308      	str	r3, [sp, #32]
   dacd8:	f000 fe20 	bl	db91c <abs>
   dacdc:	f04f 0e64 	mov.w	lr, #100	; 0x64
   dace0:	9909      	ldr	r1, [sp, #36]	; 0x24
   dace2:	9b08      	ldr	r3, [sp, #32]
   dace4:	fb90 fcfe 	sdiv	ip, r0, lr
   dace8:	fb0c 001e 	mls	r0, ip, lr, r0
   dacec:	f1bb 0f00 	cmp.w	fp, #0
   dacf0:	da08      	bge.n	dad04 <strftime+0x460>
   dacf2:	6969      	ldr	r1, [r5, #20]
   dacf4:	4a3e      	ldr	r2, [pc, #248]	; (dadf0 <strftime+0x54c>)
   dacf6:	4291      	cmp	r1, r2
   dacf8:	da0a      	bge.n	dad10 <strftime+0x46c>
   dacfa:	f04f 0b01 	mov.w	fp, #1
   dacfe:	f8cd b01c 	str.w	fp, [sp, #28]
   dad02:	e005      	b.n	dad10 <strftime+0x46c>
   dad04:	d004      	beq.n	dad10 <strftime+0x46c>
   dad06:	4a2f      	ldr	r2, [pc, #188]	; (dadc4 <strftime+0x520>)
   dad08:	4291      	cmp	r1, r2
   dad0a:	bfb8      	it	lt
   dad0c:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   dad10:	eb0b 0200 	add.w	r2, fp, r0
   dad14:	1c50      	adds	r0, r2, #1
   dad16:	d102      	bne.n	dad1e <strftime+0x47a>
   dad18:	3b01      	subs	r3, #1
   dad1a:	2263      	movs	r2, #99	; 0x63
   dad1c:	e003      	b.n	dad26 <strftime+0x482>
   dad1e:	2a64      	cmp	r2, #100	; 0x64
   dad20:	bf04      	itt	eq
   dad22:	3301      	addeq	r3, #1
   dad24:	2200      	moveq	r2, #0
   dad26:	2064      	movs	r0, #100	; 0x64
   dad28:	fb00 2303 	mla	r3, r0, r3, r2
   dad2c:	9a07      	ldr	r2, [sp, #28]
   dad2e:	b142      	cbz	r2, dad42 <strftime+0x49e>
   dad30:	222d      	movs	r2, #45	; 0x2d
   dad32:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   dad36:	f1b8 0f00 	cmp.w	r8, #0
   dad3a:	d013      	beq.n	dad64 <strftime+0x4c0>
   dad3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dad40:	e010      	b.n	dad64 <strftime+0x4c0>
   dad42:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   dad46:	d110      	bne.n	dad6a <strftime+0x4c6>
   dad48:	f242 720f 	movw	r2, #9999	; 0x270f
   dad4c:	4293      	cmp	r3, r2
   dad4e:	d90c      	bls.n	dad6a <strftime+0x4c6>
   dad50:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   dad54:	f1b8 0f00 	cmp.w	r8, #0
   dad58:	d1f0      	bne.n	dad3c <strftime+0x498>
   dad5a:	aa12      	add	r2, sp, #72	; 0x48
   dad5c:	2125      	movs	r1, #37	; 0x25
   dad5e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   dad62:	e00a      	b.n	dad7a <strftime+0x4d6>
   dad64:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   dad68:	e000      	b.n	dad6c <strftime+0x4c8>
   dad6a:	aa0a      	add	r2, sp, #40	; 0x28
   dad6c:	2125      	movs	r1, #37	; 0x25
   dad6e:	7011      	strb	r1, [r2, #0]
   dad70:	f1ba 0f00 	cmp.w	sl, #0
   dad74:	d101      	bne.n	dad7a <strftime+0x4d6>
   dad76:	1c50      	adds	r0, r2, #1
   dad78:	e002      	b.n	dad80 <strftime+0x4dc>
   dad7a:	2130      	movs	r1, #48	; 0x30
   dad7c:	1c90      	adds	r0, r2, #2
   dad7e:	7051      	strb	r1, [r2, #1]
   dad80:	491c      	ldr	r1, [pc, #112]	; (dadf4 <strftime+0x550>)
   dad82:	9307      	str	r3, [sp, #28]
   dad84:	f7ff fd0a 	bl	da79c <strcpy>
   dad88:	9b07      	ldr	r3, [sp, #28]
   dad8a:	9300      	str	r3, [sp, #0]
   dad8c:	e1ad      	b.n	db0ea <strftime+0x846>
   dad8e:	4a14      	ldr	r2, [pc, #80]	; (dade0 <strftime+0x53c>)
   dad90:	4912      	ldr	r1, [pc, #72]	; (daddc <strftime+0x538>)
   dad92:	68ab      	ldr	r3, [r5, #8]
   dad94:	286b      	cmp	r0, #107	; 0x6b
   dad96:	bf08      	it	eq
   dad98:	460a      	moveq	r2, r1
   dad9a:	e6e4      	b.n	dab66 <strftime+0x2c2>
   dad9c:	68a9      	ldr	r1, [r5, #8]
   dad9e:	230c      	movs	r3, #12
   dada0:	b131      	cbz	r1, dadb0 <strftime+0x50c>
   dada2:	4299      	cmp	r1, r3
   dada4:	bf0e      	itee	eq
   dada6:	460b      	moveq	r3, r1
   dada8:	fb91 f2f3 	sdivne	r2, r1, r3
   dadac:	fb03 1312 	mlsne	r3, r3, r2, r1
   dadb0:	4a0a      	ldr	r2, [pc, #40]	; (daddc <strftime+0x538>)
   dadb2:	490b      	ldr	r1, [pc, #44]	; (dade0 <strftime+0x53c>)
   dadb4:	2849      	cmp	r0, #73	; 0x49
   dadb6:	bf08      	it	eq
   dadb8:	460a      	moveq	r2, r1
   dadba:	e6d4      	b.n	dab66 <strftime+0x2c2>
   dadbc:	69eb      	ldr	r3, [r5, #28]
   dadbe:	4a0e      	ldr	r2, [pc, #56]	; (dadf8 <strftime+0x554>)
   dadc0:	3301      	adds	r3, #1
   dadc2:	e6d0      	b.n	dab66 <strftime+0x2c2>
   dadc4:	fffff894 	.word	0xfffff894
   dadc8:	000dc747 	.word	0x000dc747
   dadcc:	000dbca3 	.word	0x000dbca3
   dadd0:	000dc738 	.word	0x000dc738
   dadd4:	000dc73f 	.word	0x000dc73f
   dadd8:	000dc749 	.word	0x000dc749
   daddc:	000dc74b 	.word	0x000dc74b
   dade0:	000dc759 	.word	0x000dc759
   dade4:	000dc74f 	.word	0x000dc74f
   dade8:	000dc75e 	.word	0x000dc75e
   dadec:	000dc762 	.word	0x000dc762
   dadf0:	fffff895 	.word	0xfffff895
   dadf4:	000dc76a 	.word	0x000dc76a
   dadf8:	000dc76e 	.word	0x000dc76e
   dadfc:	692b      	ldr	r3, [r5, #16]
   dadfe:	3301      	adds	r3, #1
   dae00:	e13d      	b.n	db07e <strftime+0x7da>
   dae02:	686b      	ldr	r3, [r5, #4]
   dae04:	e13b      	b.n	db07e <strftime+0x7da>
   dae06:	9b02      	ldr	r3, [sp, #8]
   dae08:	429c      	cmp	r4, r3
   dae0a:	f080 81f5 	bcs.w	db1f8 <strftime+0x954>
   dae0e:	230a      	movs	r3, #10
   dae10:	e1e5      	b.n	db1de <strftime+0x93a>
   dae12:	68ab      	ldr	r3, [r5, #8]
   dae14:	9a03      	ldr	r2, [sp, #12]
   dae16:	2b0b      	cmp	r3, #11
   dae18:	bfcc      	ite	gt
   dae1a:	23a4      	movgt	r3, #164	; 0xa4
   dae1c:	23a0      	movle	r3, #160	; 0xa0
   dae1e:	4413      	add	r3, r2
   dae20:	f8d3 8004 	ldr.w	r8, [r3, #4]
   dae24:	4640      	mov	r0, r8
   dae26:	f000 f9f1 	bl	db20c <strlen>
   dae2a:	4bb2      	ldr	r3, [pc, #712]	; (db0f4 <strftime+0x850>)
   dae2c:	f8d3 e000 	ldr.w	lr, [r3]
   dae30:	1939      	adds	r1, r7, r4
   dae32:	4642      	mov	r2, r8
   dae34:	4420      	add	r0, r4
   dae36:	4284      	cmp	r4, r0
   dae38:	f000 81d3 	beq.w	db1e2 <strftime+0x93e>
   dae3c:	9b02      	ldr	r3, [sp, #8]
   dae3e:	429c      	cmp	r4, r3
   dae40:	f080 81da 	bcs.w	db1f8 <strftime+0x954>
   dae44:	f899 3000 	ldrb.w	r3, [r9]
   dae48:	2b50      	cmp	r3, #80	; 0x50
   dae4a:	f104 0401 	add.w	r4, r4, #1
   dae4e:	7813      	ldrb	r3, [r2, #0]
   dae50:	d10a      	bne.n	dae68 <strftime+0x5c4>
   dae52:	eb0e 0c03 	add.w	ip, lr, r3
   dae56:	f89c c001 	ldrb.w	ip, [ip, #1]
   dae5a:	f00c 0c03 	and.w	ip, ip, #3
   dae5e:	f1bc 0f01 	cmp.w	ip, #1
   dae62:	bf08      	it	eq
   dae64:	3320      	addeq	r3, #32
   dae66:	b2db      	uxtb	r3, r3
   dae68:	f801 3b01 	strb.w	r3, [r1], #1
   dae6c:	3201      	adds	r2, #1
   dae6e:	e7e2      	b.n	dae36 <strftime+0x592>
   dae70:	686b      	ldr	r3, [r5, #4]
   dae72:	9300      	str	r3, [sp, #0]
   dae74:	4aa0      	ldr	r2, [pc, #640]	; (db0f8 <strftime+0x854>)
   dae76:	68ab      	ldr	r3, [r5, #8]
   dae78:	e139      	b.n	db0ee <strftime+0x84a>
   dae7a:	6a2b      	ldr	r3, [r5, #32]
   dae7c:	2b00      	cmp	r3, #0
   dae7e:	db17      	blt.n	daeb0 <strftime+0x60c>
   dae80:	f000 fbc4 	bl	db60c <__tz_lock>
   dae84:	9b06      	ldr	r3, [sp, #24]
   dae86:	b91b      	cbnz	r3, dae90 <strftime+0x5ec>
   dae88:	f000 fbc2 	bl	db610 <_tzset_unlocked>
   dae8c:	2301      	movs	r3, #1
   dae8e:	9306      	str	r3, [sp, #24]
   dae90:	f000 fda0 	bl	db9d4 <__gettzinfo>
   dae94:	6a2b      	ldr	r3, [r5, #32]
   dae96:	2b00      	cmp	r3, #0
   dae98:	bfd4      	ite	le
   dae9a:	2300      	movle	r3, #0
   dae9c:	2301      	movgt	r3, #1
   dae9e:	221c      	movs	r2, #28
   daea0:	fb02 0003 	mla	r0, r2, r3, r0
   daea4:	6a03      	ldr	r3, [r0, #32]
   daea6:	f1c3 0800 	rsb	r8, r3, #0
   daeaa:	f000 fbb0 	bl	db60e <__tz_unlock>
   daeae:	e001      	b.n	daeb4 <strftime+0x610>
   daeb0:	f04f 0800 	mov.w	r8, #0
   daeb4:	f8d5 e014 	ldr.w	lr, [r5, #20]
   daeb8:	4670      	mov	r0, lr
   daeba:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   daebe:	ea4f 71e0 	mov.w	r1, r0, asr #31
   daec2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   daec6:	2a00      	cmp	r2, #0
   daec8:	f173 0b00 	sbcs.w	fp, r3, #0
   daecc:	ebc4 0c06 	rsb	ip, r4, r6
   daed0:	eb07 0a04 	add.w	sl, r7, r4
   daed4:	da03      	bge.n	daede <strftime+0x63a>
   daed6:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   daeda:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   daede:	0891      	lsrs	r1, r2, #2
   daee0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   daee4:	109b      	asrs	r3, r3, #2
   daee6:	9104      	str	r1, [sp, #16]
   daee8:	9305      	str	r3, [sp, #20]
   daeea:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   daeee:	2364      	movs	r3, #100	; 0x64
   daef0:	fb91 f1f3 	sdiv	r1, r1, r3
   daef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   daef8:	1a52      	subs	r2, r2, r1
   daefa:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   daefe:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   daf02:	f44f 71c8 	mov.w	r1, #400	; 0x190
   daf06:	fb90 f1f1 	sdiv	r1, r0, r1
   daf0a:	1852      	adds	r2, r2, r1
   daf0c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daf10:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   daf14:	f240 116d 	movw	r1, #365	; 0x16d
   daf18:	fb01 fe0e 	mul.w	lr, r1, lr
   daf1c:	69e9      	ldr	r1, [r5, #28]
   daf1e:	eb12 020e 	adds.w	r2, r2, lr
   daf22:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   daf26:	1852      	adds	r2, r2, r1
   daf28:	f04f 0e18 	mov.w	lr, #24
   daf2c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daf30:	fba2 010e 	umull	r0, r1, r2, lr
   daf34:	fb0e 1103 	mla	r1, lr, r3, r1
   daf38:	68ab      	ldr	r3, [r5, #8]
   daf3a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   daf3e:	18c0      	adds	r0, r0, r3
   daf40:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daf44:	fba0 230e 	umull	r2, r3, r0, lr
   daf48:	fb0e 3301 	mla	r3, lr, r1, r3
   daf4c:	6869      	ldr	r1, [r5, #4]
   daf4e:	1852      	adds	r2, r2, r1
   daf50:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   daf54:	fba2 010e 	umull	r0, r1, r2, lr
   daf58:	fb0e 1103 	mla	r1, lr, r3, r1
   daf5c:	682b      	ldr	r3, [r5, #0]
   daf5e:	4a67      	ldr	r2, [pc, #412]	; (db0fc <strftime+0x858>)
   daf60:	18c0      	adds	r0, r0, r3
   daf62:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   daf66:	ebb0 0008 	subs.w	r0, r0, r8
   daf6a:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   daf6e:	e9cd 0100 	strd	r0, r1, [sp]
   daf72:	4661      	mov	r1, ip
   daf74:	4650      	mov	r0, sl
   daf76:	f7fc fac3 	bl	d7500 <sniprintf>
   daf7a:	e5f8      	b.n	dab6e <strftime+0x2ca>
   daf7c:	682b      	ldr	r3, [r5, #0]
   daf7e:	e07e      	b.n	db07e <strftime+0x7da>
   daf80:	9b02      	ldr	r3, [sp, #8]
   daf82:	429c      	cmp	r4, r3
   daf84:	f080 8138 	bcs.w	db1f8 <strftime+0x954>
   daf88:	2309      	movs	r3, #9
   daf8a:	e128      	b.n	db1de <strftime+0x93a>
   daf8c:	682b      	ldr	r3, [r5, #0]
   daf8e:	9301      	str	r3, [sp, #4]
   daf90:	686b      	ldr	r3, [r5, #4]
   daf92:	9300      	str	r3, [sp, #0]
   daf94:	4a5a      	ldr	r2, [pc, #360]	; (db100 <strftime+0x85c>)
   daf96:	68ab      	ldr	r3, [r5, #8]
   daf98:	1b31      	subs	r1, r6, r4
   daf9a:	1938      	adds	r0, r7, r4
   daf9c:	e60d      	b.n	dabba <strftime+0x316>
   daf9e:	9b02      	ldr	r3, [sp, #8]
   dafa0:	429c      	cmp	r4, r3
   dafa2:	f080 8129 	bcs.w	db1f8 <strftime+0x954>
   dafa6:	69ab      	ldr	r3, [r5, #24]
   dafa8:	1c62      	adds	r2, r4, #1
   dafaa:	b90b      	cbnz	r3, dafb0 <strftime+0x70c>
   dafac:	2337      	movs	r3, #55	; 0x37
   dafae:	e000      	b.n	dafb2 <strftime+0x70e>
   dafb0:	3330      	adds	r3, #48	; 0x30
   dafb2:	553b      	strb	r3, [r7, r4]
   dafb4:	4614      	mov	r4, r2
   dafb6:	e114      	b.n	db1e2 <strftime+0x93e>
   dafb8:	69eb      	ldr	r3, [r5, #28]
   dafba:	69aa      	ldr	r2, [r5, #24]
   dafbc:	3307      	adds	r3, #7
   dafbe:	1a9b      	subs	r3, r3, r2
   dafc0:	2207      	movs	r2, #7
   dafc2:	fb93 f3f2 	sdiv	r3, r3, r2
   dafc6:	e05a      	b.n	db07e <strftime+0x7da>
   dafc8:	4628      	mov	r0, r5
   dafca:	f7ff fc0a 	bl	da7e2 <iso_year_adjust>
   dafce:	69aa      	ldr	r2, [r5, #24]
   dafd0:	b10a      	cbz	r2, dafd6 <strftime+0x732>
   dafd2:	1e53      	subs	r3, r2, #1
   dafd4:	e000      	b.n	dafd8 <strftime+0x734>
   dafd6:	2306      	movs	r3, #6
   dafd8:	2800      	cmp	r0, #0
   dafda:	dc2f      	bgt.n	db03c <strftime+0x798>
   dafdc:	69ea      	ldr	r2, [r5, #28]
   dafde:	d101      	bne.n	dafe4 <strftime+0x740>
   dafe0:	320a      	adds	r2, #10
   dafe2:	e03b      	b.n	db05c <strftime+0x7b8>
   dafe4:	1a9a      	subs	r2, r3, r2
   dafe6:	696b      	ldr	r3, [r5, #20]
   dafe8:	f240 716b 	movw	r1, #1899	; 0x76b
   dafec:	2b00      	cmp	r3, #0
   dafee:	bfb4      	ite	lt
   daff0:	4608      	movlt	r0, r1
   daff2:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   daff6:	4418      	add	r0, r3
   daff8:	0781      	lsls	r1, r0, #30
   daffa:	d107      	bne.n	db00c <strftime+0x768>
   daffc:	4601      	mov	r1, r0
   daffe:	f04f 0e64 	mov.w	lr, #100	; 0x64
   db002:	fb90 f0fe 	sdiv	r0, r0, lr
   db006:	fb0e 1110 	mls	r1, lr, r0, r1
   db00a:	b981      	cbnz	r1, db02e <strftime+0x78a>
   db00c:	2b00      	cmp	r3, #0
   db00e:	f240 716b 	movw	r1, #1899	; 0x76b
   db012:	bfa8      	it	ge
   db014:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   db018:	4419      	add	r1, r3
   db01a:	f44f 73c8 	mov.w	r3, #400	; 0x190
   db01e:	fb91 f0f3 	sdiv	r0, r1, r3
   db022:	fb03 1110 	mls	r1, r3, r0, r1
   db026:	fab1 f181 	clz	r1, r1
   db02a:	0949      	lsrs	r1, r1, #5
   db02c:	e000      	b.n	db030 <strftime+0x78c>
   db02e:	2101      	movs	r1, #1
   db030:	1a52      	subs	r2, r2, r1
   db032:	2a05      	cmp	r2, #5
   db034:	bfb4      	ite	lt
   db036:	2335      	movlt	r3, #53	; 0x35
   db038:	2334      	movge	r3, #52	; 0x34
   db03a:	e020      	b.n	db07e <strftime+0x7da>
   db03c:	2301      	movs	r3, #1
   db03e:	e01e      	b.n	db07e <strftime+0x7da>
   db040:	9b02      	ldr	r3, [sp, #8]
   db042:	429c      	cmp	r4, r3
   db044:	f080 80d8 	bcs.w	db1f8 <strftime+0x954>
   db048:	69ab      	ldr	r3, [r5, #24]
   db04a:	3330      	adds	r3, #48	; 0x30
   db04c:	e0c7      	b.n	db1de <strftime+0x93a>
   db04e:	69aa      	ldr	r2, [r5, #24]
   db050:	b10a      	cbz	r2, db056 <strftime+0x7b2>
   db052:	1e53      	subs	r3, r2, #1
   db054:	e000      	b.n	db058 <strftime+0x7b4>
   db056:	2306      	movs	r3, #6
   db058:	69ea      	ldr	r2, [r5, #28]
   db05a:	3207      	adds	r2, #7
   db05c:	1ad2      	subs	r2, r2, r3
   db05e:	2307      	movs	r3, #7
   db060:	fb92 f3f3 	sdiv	r3, r2, r3
   db064:	e00b      	b.n	db07e <strftime+0x7da>
   db066:	6968      	ldr	r0, [r5, #20]
   db068:	2800      	cmp	r0, #0
   db06a:	da03      	bge.n	db074 <strftime+0x7d0>
   db06c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   db070:	f000 fc54 	bl	db91c <abs>
   db074:	2364      	movs	r3, #100	; 0x64
   db076:	fb90 f2f3 	sdiv	r2, r0, r3
   db07a:	fb02 0313 	mls	r3, r2, r3, r0
   db07e:	4a21      	ldr	r2, [pc, #132]	; (db104 <strftime+0x860>)
   db080:	e571      	b.n	dab66 <strftime+0x2c2>
   db082:	696b      	ldr	r3, [r5, #20]
   db084:	4a20      	ldr	r2, [pc, #128]	; (db108 <strftime+0x864>)
   db086:	4293      	cmp	r3, r2
   db088:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   db08c:	da05      	bge.n	db09a <strftime+0x7f6>
   db08e:	232d      	movs	r3, #45	; 0x2d
   db090:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   db094:	f1cb 0b00 	rsb	fp, fp, #0
   db098:	e008      	b.n	db0ac <strftime+0x808>
   db09a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   db09e:	d10d      	bne.n	db0bc <strftime+0x818>
   db0a0:	f242 730f 	movw	r3, #9999	; 0x270f
   db0a4:	459b      	cmp	fp, r3
   db0a6:	d911      	bls.n	db0cc <strftime+0x828>
   db0a8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   db0ac:	f1b8 0f00 	cmp.w	r8, #0
   db0b0:	d001      	beq.n	db0b6 <strftime+0x812>
   db0b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db0b6:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   db0ba:	e000      	b.n	db0be <strftime+0x81a>
   db0bc:	ab0a      	add	r3, sp, #40	; 0x28
   db0be:	2225      	movs	r2, #37	; 0x25
   db0c0:	701a      	strb	r2, [r3, #0]
   db0c2:	f1ba 0f00 	cmp.w	sl, #0
   db0c6:	d108      	bne.n	db0da <strftime+0x836>
   db0c8:	1c58      	adds	r0, r3, #1
   db0ca:	e009      	b.n	db0e0 <strftime+0x83c>
   db0cc:	f1b8 0f00 	cmp.w	r8, #0
   db0d0:	d1f4      	bne.n	db0bc <strftime+0x818>
   db0d2:	2325      	movs	r3, #37	; 0x25
   db0d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   db0d8:	ab0a      	add	r3, sp, #40	; 0x28
   db0da:	2230      	movs	r2, #48	; 0x30
   db0dc:	1c98      	adds	r0, r3, #2
   db0de:	705a      	strb	r2, [r3, #1]
   db0e0:	490a      	ldr	r1, [pc, #40]	; (db10c <strftime+0x868>)
   db0e2:	f7ff fb5b 	bl	da79c <strcpy>
   db0e6:	f8cd b000 	str.w	fp, [sp]
   db0ea:	4643      	mov	r3, r8
   db0ec:	aa0a      	add	r2, sp, #40	; 0x28
   db0ee:	1b31      	subs	r1, r6, r4
   db0f0:	1938      	adds	r0, r7, r4
   db0f2:	e03e      	b.n	db172 <strftime+0x8ce>
   db0f4:	2003df78 	.word	0x2003df78
   db0f8:	000dc77d 	.word	0x000dc77d
   db0fc:	000dc773 	.word	0x000dc773
   db100:	000dc778 	.word	0x000dc778
   db104:	000dc759 	.word	0x000dc759
   db108:	fffff894 	.word	0xfffff894
   db10c:	000dc76a 	.word	0x000dc76a
   db110:	6a2b      	ldr	r3, [r5, #32]
   db112:	2b00      	cmp	r3, #0
   db114:	db65      	blt.n	db1e2 <strftime+0x93e>
   db116:	f000 fa79 	bl	db60c <__tz_lock>
   db11a:	9b06      	ldr	r3, [sp, #24]
   db11c:	b91b      	cbnz	r3, db126 <strftime+0x882>
   db11e:	f000 fa77 	bl	db610 <_tzset_unlocked>
   db122:	2301      	movs	r3, #1
   db124:	9306      	str	r3, [sp, #24]
   db126:	f000 fc55 	bl	db9d4 <__gettzinfo>
   db12a:	6a2b      	ldr	r3, [r5, #32]
   db12c:	2b00      	cmp	r3, #0
   db12e:	bfd4      	ite	le
   db130:	2300      	movle	r3, #0
   db132:	2301      	movgt	r3, #1
   db134:	221c      	movs	r2, #28
   db136:	fb02 0003 	mla	r0, r2, r3, r0
   db13a:	eb07 0a04 	add.w	sl, r7, r4
   db13e:	6a03      	ldr	r3, [r0, #32]
   db140:	f1c3 0800 	rsb	r8, r3, #0
   db144:	f000 fa63 	bl	db60e <__tz_unlock>
   db148:	233c      	movs	r3, #60	; 0x3c
   db14a:	fb98 f0f3 	sdiv	r0, r8, r3
   db14e:	9307      	str	r3, [sp, #28]
   db150:	f000 fc44 	bl	db9dc <labs>
   db154:	9b07      	ldr	r3, [sp, #28]
   db156:	fb90 f2f3 	sdiv	r2, r0, r3
   db15a:	ebc4 0b06 	rsb	fp, r4, r6
   db15e:	fb02 0013 	mls	r0, r2, r3, r0
   db162:	4a28      	ldr	r2, [pc, #160]	; (db204 <strftime+0x960>)
   db164:	9000      	str	r0, [sp, #0]
   db166:	4659      	mov	r1, fp
   db168:	4650      	mov	r0, sl
   db16a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db16e:	fb98 f3f3 	sdiv	r3, r8, r3
   db172:	f7fc f9c5 	bl	d7500 <sniprintf>
   db176:	e4fa      	b.n	dab6e <strftime+0x2ca>
   db178:	4404      	add	r4, r0
   db17a:	42a6      	cmp	r6, r4
   db17c:	d831      	bhi.n	db1e2 <strftime+0x93e>
   db17e:	e03b      	b.n	db1f8 <strftime+0x954>
   db180:	6a2b      	ldr	r3, [r5, #32]
   db182:	2b00      	cmp	r3, #0
   db184:	db2d      	blt.n	db1e2 <strftime+0x93e>
   db186:	f000 fa41 	bl	db60c <__tz_lock>
   db18a:	9b06      	ldr	r3, [sp, #24]
   db18c:	b91b      	cbnz	r3, db196 <strftime+0x8f2>
   db18e:	f000 fa3f 	bl	db610 <_tzset_unlocked>
   db192:	2301      	movs	r3, #1
   db194:	9306      	str	r3, [sp, #24]
   db196:	6a2b      	ldr	r3, [r5, #32]
   db198:	4a1b      	ldr	r2, [pc, #108]	; (db208 <strftime+0x964>)
   db19a:	2b00      	cmp	r3, #0
   db19c:	bfd4      	ite	le
   db19e:	2300      	movle	r3, #0
   db1a0:	2301      	movgt	r3, #1
   db1a2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   db1a6:	4640      	mov	r0, r8
   db1a8:	f000 f830 	bl	db20c <strlen>
   db1ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db1b0:	193b      	adds	r3, r7, r4
   db1b2:	4420      	add	r0, r4
   db1b4:	4284      	cmp	r4, r0
   db1b6:	d00b      	beq.n	db1d0 <strftime+0x92c>
   db1b8:	9a02      	ldr	r2, [sp, #8]
   db1ba:	4294      	cmp	r4, r2
   db1bc:	d205      	bcs.n	db1ca <strftime+0x926>
   db1be:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   db1c2:	f803 2b01 	strb.w	r2, [r3], #1
   db1c6:	3401      	adds	r4, #1
   db1c8:	e7f4      	b.n	db1b4 <strftime+0x910>
   db1ca:	f000 fa20 	bl	db60e <__tz_unlock>
   db1ce:	e013      	b.n	db1f8 <strftime+0x954>
   db1d0:	f000 fa1d 	bl	db60e <__tz_unlock>
   db1d4:	e005      	b.n	db1e2 <strftime+0x93e>
   db1d6:	9b02      	ldr	r3, [sp, #8]
   db1d8:	429c      	cmp	r4, r3
   db1da:	d20d      	bcs.n	db1f8 <strftime+0x954>
   db1dc:	2325      	movs	r3, #37	; 0x25
   db1de:	553b      	strb	r3, [r7, r4]
   db1e0:	3401      	adds	r4, #1
   db1e2:	f899 3000 	ldrb.w	r3, [r9]
   db1e6:	b11b      	cbz	r3, db1f0 <strftime+0x94c>
   db1e8:	f109 0901 	add.w	r9, r9, #1
   db1ec:	f7ff bb69 	b.w	da8c2 <strftime+0x1e>
   db1f0:	b126      	cbz	r6, db1fc <strftime+0x958>
   db1f2:	2300      	movs	r3, #0
   db1f4:	553b      	strb	r3, [r7, r4]
   db1f6:	e001      	b.n	db1fc <strftime+0x958>
   db1f8:	2000      	movs	r0, #0
   db1fa:	e000      	b.n	db1fe <strftime+0x95a>
   db1fc:	4620      	mov	r0, r4
   db1fe:	b013      	add	sp, #76	; 0x4c
   db200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db204:	000dc787 	.word	0x000dc787
   db208:	2003dfe0 	.word	0x2003dfe0

000db20c <strlen>:
   db20c:	4603      	mov	r3, r0
   db20e:	f813 2b01 	ldrb.w	r2, [r3], #1
   db212:	2a00      	cmp	r2, #0
   db214:	d1fb      	bne.n	db20e <strlen+0x2>
   db216:	1a18      	subs	r0, r3, r0
   db218:	3801      	subs	r0, #1
   db21a:	4770      	bx	lr

000db21c <strncmp>:
   db21c:	b530      	push	{r4, r5, lr}
   db21e:	b182      	cbz	r2, db242 <strncmp+0x26>
   db220:	1e45      	subs	r5, r0, #1
   db222:	3901      	subs	r1, #1
   db224:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db228:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db22c:	42a3      	cmp	r3, r4
   db22e:	d106      	bne.n	db23e <strncmp+0x22>
   db230:	43ec      	mvns	r4, r5
   db232:	4414      	add	r4, r2
   db234:	42e0      	cmn	r0, r4
   db236:	d001      	beq.n	db23c <strncmp+0x20>
   db238:	2b00      	cmp	r3, #0
   db23a:	d1f3      	bne.n	db224 <strncmp+0x8>
   db23c:	461c      	mov	r4, r3
   db23e:	1b18      	subs	r0, r3, r4
   db240:	bd30      	pop	{r4, r5, pc}
   db242:	4610      	mov	r0, r2
   db244:	bd30      	pop	{r4, r5, pc}

000db246 <strncpy>:
   db246:	b510      	push	{r4, lr}
   db248:	4603      	mov	r3, r0
   db24a:	b142      	cbz	r2, db25e <strncpy+0x18>
   db24c:	f811 4b01 	ldrb.w	r4, [r1], #1
   db250:	f803 4b01 	strb.w	r4, [r3], #1
   db254:	3a01      	subs	r2, #1
   db256:	2c00      	cmp	r4, #0
   db258:	d1f7      	bne.n	db24a <strncpy+0x4>
   db25a:	441a      	add	r2, r3
   db25c:	e000      	b.n	db260 <strncpy+0x1a>
   db25e:	bd10      	pop	{r4, pc}
   db260:	4293      	cmp	r3, r2
   db262:	d002      	beq.n	db26a <strncpy+0x24>
   db264:	f803 4b01 	strb.w	r4, [r3], #1
   db268:	e7fa      	b.n	db260 <strncpy+0x1a>
   db26a:	bd10      	pop	{r4, pc}

000db26c <_strtol_r>:
   db26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db270:	4680      	mov	r8, r0
   db272:	4840      	ldr	r0, [pc, #256]	; (db374 <_strtol_r+0x108>)
   db274:	f8d0 9000 	ldr.w	r9, [r0]
   db278:	460f      	mov	r7, r1
   db27a:	463d      	mov	r5, r7
   db27c:	f815 4b01 	ldrb.w	r4, [r5], #1
   db280:	eb09 0004 	add.w	r0, r9, r4
   db284:	7840      	ldrb	r0, [r0, #1]
   db286:	f000 0008 	and.w	r0, r0, #8
   db28a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db28e:	b108      	cbz	r0, db294 <_strtol_r+0x28>
   db290:	462f      	mov	r7, r5
   db292:	e7f2      	b.n	db27a <_strtol_r+0xe>
   db294:	2c2d      	cmp	r4, #45	; 0x2d
   db296:	d103      	bne.n	db2a0 <_strtol_r+0x34>
   db298:	1cbd      	adds	r5, r7, #2
   db29a:	787c      	ldrb	r4, [r7, #1]
   db29c:	2601      	movs	r6, #1
   db29e:	e003      	b.n	db2a8 <_strtol_r+0x3c>
   db2a0:	2c2b      	cmp	r4, #43	; 0x2b
   db2a2:	bf04      	itt	eq
   db2a4:	787c      	ldrbeq	r4, [r7, #1]
   db2a6:	1cbd      	addeq	r5, r7, #2
   db2a8:	b113      	cbz	r3, db2b0 <_strtol_r+0x44>
   db2aa:	2b10      	cmp	r3, #16
   db2ac:	d10a      	bne.n	db2c4 <_strtol_r+0x58>
   db2ae:	e05b      	b.n	db368 <_strtol_r+0xfc>
   db2b0:	2c30      	cmp	r4, #48	; 0x30
   db2b2:	d157      	bne.n	db364 <_strtol_r+0xf8>
   db2b4:	7828      	ldrb	r0, [r5, #0]
   db2b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db2ba:	2858      	cmp	r0, #88	; 0x58
   db2bc:	d14d      	bne.n	db35a <_strtol_r+0xee>
   db2be:	786c      	ldrb	r4, [r5, #1]
   db2c0:	2310      	movs	r3, #16
   db2c2:	3502      	adds	r5, #2
   db2c4:	2e00      	cmp	r6, #0
   db2c6:	bf14      	ite	ne
   db2c8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db2cc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db2d0:	2700      	movs	r7, #0
   db2d2:	fbbc faf3 	udiv	sl, ip, r3
   db2d6:	4638      	mov	r0, r7
   db2d8:	fb03 cc1a 	mls	ip, r3, sl, ip
   db2dc:	eb09 0e04 	add.w	lr, r9, r4
   db2e0:	f89e e001 	ldrb.w	lr, [lr, #1]
   db2e4:	f01e 0f04 	tst.w	lr, #4
   db2e8:	d001      	beq.n	db2ee <_strtol_r+0x82>
   db2ea:	3c30      	subs	r4, #48	; 0x30
   db2ec:	e00b      	b.n	db306 <_strtol_r+0x9a>
   db2ee:	f01e 0e03 	ands.w	lr, lr, #3
   db2f2:	d01b      	beq.n	db32c <_strtol_r+0xc0>
   db2f4:	f1be 0f01 	cmp.w	lr, #1
   db2f8:	bf0c      	ite	eq
   db2fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db2fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db302:	ebce 0404 	rsb	r4, lr, r4
   db306:	42a3      	cmp	r3, r4
   db308:	dd10      	ble.n	db32c <_strtol_r+0xc0>
   db30a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   db30e:	d00a      	beq.n	db326 <_strtol_r+0xba>
   db310:	4550      	cmp	r0, sl
   db312:	d806      	bhi.n	db322 <_strtol_r+0xb6>
   db314:	d101      	bne.n	db31a <_strtol_r+0xae>
   db316:	4564      	cmp	r4, ip
   db318:	dc03      	bgt.n	db322 <_strtol_r+0xb6>
   db31a:	fb03 4000 	mla	r0, r3, r0, r4
   db31e:	2701      	movs	r7, #1
   db320:	e001      	b.n	db326 <_strtol_r+0xba>
   db322:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   db326:	f815 4b01 	ldrb.w	r4, [r5], #1
   db32a:	e7d7      	b.n	db2dc <_strtol_r+0x70>
   db32c:	1c7b      	adds	r3, r7, #1
   db32e:	d10c      	bne.n	db34a <_strtol_r+0xde>
   db330:	2e00      	cmp	r6, #0
   db332:	f04f 0322 	mov.w	r3, #34	; 0x22
   db336:	bf14      	ite	ne
   db338:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db33c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db340:	f8c8 3000 	str.w	r3, [r8]
   db344:	b92a      	cbnz	r2, db352 <_strtol_r+0xe6>
   db346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db34a:	b106      	cbz	r6, db34e <_strtol_r+0xe2>
   db34c:	4240      	negs	r0, r0
   db34e:	b172      	cbz	r2, db36e <_strtol_r+0x102>
   db350:	b107      	cbz	r7, db354 <_strtol_r+0xe8>
   db352:	1e69      	subs	r1, r5, #1
   db354:	6011      	str	r1, [r2, #0]
   db356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db35a:	2430      	movs	r4, #48	; 0x30
   db35c:	2b00      	cmp	r3, #0
   db35e:	d1b1      	bne.n	db2c4 <_strtol_r+0x58>
   db360:	2308      	movs	r3, #8
   db362:	e7af      	b.n	db2c4 <_strtol_r+0x58>
   db364:	230a      	movs	r3, #10
   db366:	e7ad      	b.n	db2c4 <_strtol_r+0x58>
   db368:	2c30      	cmp	r4, #48	; 0x30
   db36a:	d0a3      	beq.n	db2b4 <_strtol_r+0x48>
   db36c:	e7aa      	b.n	db2c4 <_strtol_r+0x58>
   db36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db372:	bf00      	nop
   db374:	2003df78 	.word	0x2003df78

000db378 <strtol>:
   db378:	4613      	mov	r3, r2
   db37a:	460a      	mov	r2, r1
   db37c:	4601      	mov	r1, r0
   db37e:	4802      	ldr	r0, [pc, #8]	; (db388 <strtol+0x10>)
   db380:	6800      	ldr	r0, [r0, #0]
   db382:	f7ff bf73 	b.w	db26c <_strtol_r>
   db386:	bf00      	nop
   db388:	2003dfdc 	.word	0x2003dfdc

000db38c <_strtoul_r>:
   db38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db390:	4680      	mov	r8, r0
   db392:	483c      	ldr	r0, [pc, #240]	; (db484 <_strtoul_r+0xf8>)
   db394:	f8d0 9000 	ldr.w	r9, [r0]
   db398:	460e      	mov	r6, r1
   db39a:	4635      	mov	r5, r6
   db39c:	f815 4b01 	ldrb.w	r4, [r5], #1
   db3a0:	eb09 0004 	add.w	r0, r9, r4
   db3a4:	7840      	ldrb	r0, [r0, #1]
   db3a6:	f000 0008 	and.w	r0, r0, #8
   db3aa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   db3ae:	b108      	cbz	r0, db3b4 <_strtoul_r+0x28>
   db3b0:	462e      	mov	r6, r5
   db3b2:	e7f2      	b.n	db39a <_strtoul_r+0xe>
   db3b4:	2c2d      	cmp	r4, #45	; 0x2d
   db3b6:	d103      	bne.n	db3c0 <_strtoul_r+0x34>
   db3b8:	1cb5      	adds	r5, r6, #2
   db3ba:	7874      	ldrb	r4, [r6, #1]
   db3bc:	2701      	movs	r7, #1
   db3be:	e003      	b.n	db3c8 <_strtoul_r+0x3c>
   db3c0:	2c2b      	cmp	r4, #43	; 0x2b
   db3c2:	bf04      	itt	eq
   db3c4:	7874      	ldrbeq	r4, [r6, #1]
   db3c6:	1cb5      	addeq	r5, r6, #2
   db3c8:	b113      	cbz	r3, db3d0 <_strtoul_r+0x44>
   db3ca:	2b10      	cmp	r3, #16
   db3cc:	d10a      	bne.n	db3e4 <_strtoul_r+0x58>
   db3ce:	e053      	b.n	db478 <_strtoul_r+0xec>
   db3d0:	2c30      	cmp	r4, #48	; 0x30
   db3d2:	d14f      	bne.n	db474 <_strtoul_r+0xe8>
   db3d4:	7828      	ldrb	r0, [r5, #0]
   db3d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db3da:	2858      	cmp	r0, #88	; 0x58
   db3dc:	d145      	bne.n	db46a <_strtoul_r+0xde>
   db3de:	786c      	ldrb	r4, [r5, #1]
   db3e0:	2310      	movs	r3, #16
   db3e2:	3502      	adds	r5, #2
   db3e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db3e8:	2600      	movs	r6, #0
   db3ea:	fbbc fcf3 	udiv	ip, ip, r3
   db3ee:	fb03 fa0c 	mul.w	sl, r3, ip
   db3f2:	ea6f 0a0a 	mvn.w	sl, sl
   db3f6:	4630      	mov	r0, r6
   db3f8:	eb09 0e04 	add.w	lr, r9, r4
   db3fc:	f89e e001 	ldrb.w	lr, [lr, #1]
   db400:	f01e 0f04 	tst.w	lr, #4
   db404:	d001      	beq.n	db40a <_strtoul_r+0x7e>
   db406:	3c30      	subs	r4, #48	; 0x30
   db408:	e00b      	b.n	db422 <_strtoul_r+0x96>
   db40a:	f01e 0e03 	ands.w	lr, lr, #3
   db40e:	d01a      	beq.n	db446 <_strtoul_r+0xba>
   db410:	f1be 0f01 	cmp.w	lr, #1
   db414:	bf0c      	ite	eq
   db416:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db41a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db41e:	ebce 0404 	rsb	r4, lr, r4
   db422:	42a3      	cmp	r3, r4
   db424:	dd0f      	ble.n	db446 <_strtoul_r+0xba>
   db426:	2e00      	cmp	r6, #0
   db428:	db08      	blt.n	db43c <_strtoul_r+0xb0>
   db42a:	4560      	cmp	r0, ip
   db42c:	d806      	bhi.n	db43c <_strtoul_r+0xb0>
   db42e:	d101      	bne.n	db434 <_strtoul_r+0xa8>
   db430:	4554      	cmp	r4, sl
   db432:	dc03      	bgt.n	db43c <_strtoul_r+0xb0>
   db434:	fb03 4000 	mla	r0, r3, r0, r4
   db438:	2601      	movs	r6, #1
   db43a:	e001      	b.n	db440 <_strtoul_r+0xb4>
   db43c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   db440:	f815 4b01 	ldrb.w	r4, [r5], #1
   db444:	e7d8      	b.n	db3f8 <_strtoul_r+0x6c>
   db446:	2e00      	cmp	r6, #0
   db448:	da07      	bge.n	db45a <_strtoul_r+0xce>
   db44a:	2322      	movs	r3, #34	; 0x22
   db44c:	f8c8 3000 	str.w	r3, [r8]
   db450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db454:	b92a      	cbnz	r2, db462 <_strtoul_r+0xd6>
   db456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db45a:	b107      	cbz	r7, db45e <_strtoul_r+0xd2>
   db45c:	4240      	negs	r0, r0
   db45e:	b172      	cbz	r2, db47e <_strtoul_r+0xf2>
   db460:	b106      	cbz	r6, db464 <_strtoul_r+0xd8>
   db462:	1e69      	subs	r1, r5, #1
   db464:	6011      	str	r1, [r2, #0]
   db466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db46a:	2430      	movs	r4, #48	; 0x30
   db46c:	2b00      	cmp	r3, #0
   db46e:	d1b9      	bne.n	db3e4 <_strtoul_r+0x58>
   db470:	2308      	movs	r3, #8
   db472:	e7b7      	b.n	db3e4 <_strtoul_r+0x58>
   db474:	230a      	movs	r3, #10
   db476:	e7b5      	b.n	db3e4 <_strtoul_r+0x58>
   db478:	2c30      	cmp	r4, #48	; 0x30
   db47a:	d0ab      	beq.n	db3d4 <_strtoul_r+0x48>
   db47c:	e7b2      	b.n	db3e4 <_strtoul_r+0x58>
   db47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db482:	bf00      	nop
   db484:	2003df78 	.word	0x2003df78

000db488 <strtoul>:
   db488:	4613      	mov	r3, r2
   db48a:	460a      	mov	r2, r1
   db48c:	4601      	mov	r1, r0
   db48e:	4802      	ldr	r0, [pc, #8]	; (db498 <strtoul+0x10>)
   db490:	6800      	ldr	r0, [r0, #0]
   db492:	f7ff bf7b 	b.w	db38c <_strtoul_r>
   db496:	bf00      	nop
   db498:	2003dfdc 	.word	0x2003dfdc

000db49c <__get_current_time_locale>:
   db49c:	4b04      	ldr	r3, [pc, #16]	; (db4b0 <__get_current_time_locale+0x14>)
   db49e:	4a05      	ldr	r2, [pc, #20]	; (db4b4 <__get_current_time_locale+0x18>)
   db4a0:	6818      	ldr	r0, [r3, #0]
   db4a2:	4b05      	ldr	r3, [pc, #20]	; (db4b8 <__get_current_time_locale+0x1c>)
   db4a4:	2800      	cmp	r0, #0
   db4a6:	bf14      	ite	ne
   db4a8:	4610      	movne	r0, r2
   db4aa:	4618      	moveq	r0, r3
   db4ac:	4770      	bx	lr
   db4ae:	bf00      	nop
   db4b0:	2003e6c8 	.word	0x2003e6c8
   db4b4:	2003e6cc 	.word	0x2003e6cc
   db4b8:	000dc8c0 	.word	0x000dc8c0

000db4bc <__tzcalc_limits>:
   db4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db4c0:	4604      	mov	r4, r0
   db4c2:	f000 fa87 	bl	db9d4 <__gettzinfo>
   db4c6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   db4ca:	429c      	cmp	r4, r3
   db4cc:	f340 8096 	ble.w	db5fc <__tzcalc_limits+0x140>
   db4d0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   db4d4:	18e3      	adds	r3, r4, r3
   db4d6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   db4da:	109b      	asrs	r3, r3, #2
   db4dc:	f240 156d 	movw	r5, #365	; 0x16d
   db4e0:	fb05 3502 	mla	r5, r5, r2, r3
   db4e4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   db4e8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   db4ec:	fb92 f3f3 	sdiv	r3, r2, r3
   db4f0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   db4f4:	442b      	add	r3, r5
   db4f6:	18a5      	adds	r5, r4, r2
   db4f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   db4fc:	fb95 f5f2 	sdiv	r5, r5, r2
   db500:	441d      	add	r5, r3
   db502:	2364      	movs	r3, #100	; 0x64
   db504:	fb94 f7f2 	sdiv	r7, r4, r2
   db508:	fb94 f6f3 	sdiv	r6, r4, r3
   db50c:	fb02 4717 	mls	r7, r2, r7, r4
   db510:	fb03 4616 	mls	r6, r3, r6, r4
   db514:	f100 0338 	add.w	r3, r0, #56	; 0x38
   db518:	fab7 fe87 	clz	lr, r7
   db51c:	9301      	str	r3, [sp, #4]
   db51e:	f004 0303 	and.w	r3, r4, #3
   db522:	6044      	str	r4, [r0, #4]
   db524:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   db528:	4601      	mov	r1, r0
   db52a:	9300      	str	r3, [sp, #0]
   db52c:	f04f 0c07 	mov.w	ip, #7
   db530:	7a0b      	ldrb	r3, [r1, #8]
   db532:	2b4a      	cmp	r3, #74	; 0x4a
   db534:	d10e      	bne.n	db554 <__tzcalc_limits+0x98>
   db536:	694b      	ldr	r3, [r1, #20]
   db538:	9a00      	ldr	r2, [sp, #0]
   db53a:	18ec      	adds	r4, r5, r3
   db53c:	b902      	cbnz	r2, db540 <__tzcalc_limits+0x84>
   db53e:	b906      	cbnz	r6, db542 <__tzcalc_limits+0x86>
   db540:	b927      	cbnz	r7, db54c <__tzcalc_limits+0x90>
   db542:	2b3b      	cmp	r3, #59	; 0x3b
   db544:	bfd4      	ite	le
   db546:	2300      	movle	r3, #0
   db548:	2301      	movgt	r3, #1
   db54a:	e000      	b.n	db54e <__tzcalc_limits+0x92>
   db54c:	2300      	movs	r3, #0
   db54e:	4423      	add	r3, r4
   db550:	3b01      	subs	r3, #1
   db552:	e03f      	b.n	db5d4 <__tzcalc_limits+0x118>
   db554:	2b44      	cmp	r3, #68	; 0x44
   db556:	d102      	bne.n	db55e <__tzcalc_limits+0xa2>
   db558:	694b      	ldr	r3, [r1, #20]
   db55a:	442b      	add	r3, r5
   db55c:	e03a      	b.n	db5d4 <__tzcalc_limits+0x118>
   db55e:	9b00      	ldr	r3, [sp, #0]
   db560:	b92b      	cbnz	r3, db56e <__tzcalc_limits+0xb2>
   db562:	2e00      	cmp	r6, #0
   db564:	bf0c      	ite	eq
   db566:	46f0      	moveq	r8, lr
   db568:	f04f 0801 	movne.w	r8, #1
   db56c:	e000      	b.n	db570 <__tzcalc_limits+0xb4>
   db56e:	46f0      	mov	r8, lr
   db570:	4b24      	ldr	r3, [pc, #144]	; (db604 <__tzcalc_limits+0x148>)
   db572:	68cc      	ldr	r4, [r1, #12]
   db574:	2230      	movs	r2, #48	; 0x30
   db576:	fb02 3808 	mla	r8, r2, r8, r3
   db57a:	f1a8 0a04 	sub.w	sl, r8, #4
   db57e:	46a9      	mov	r9, r5
   db580:	2301      	movs	r3, #1
   db582:	42a3      	cmp	r3, r4
   db584:	da04      	bge.n	db590 <__tzcalc_limits+0xd4>
   db586:	f85a bf04 	ldr.w	fp, [sl, #4]!
   db58a:	3301      	adds	r3, #1
   db58c:	44d9      	add	r9, fp
   db58e:	e7f8      	b.n	db582 <__tzcalc_limits+0xc6>
   db590:	f109 0304 	add.w	r3, r9, #4
   db594:	fb93 fbfc 	sdiv	fp, r3, ip
   db598:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   db59c:	2c01      	cmp	r4, #1
   db59e:	ebca 0a03 	rsb	sl, sl, r3
   db5a2:	694b      	ldr	r3, [r1, #20]
   db5a4:	bfb8      	it	lt
   db5a6:	2401      	movlt	r4, #1
   db5a8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   db5ac:	ebb3 0a0a 	subs.w	sl, r3, sl
   db5b0:	690b      	ldr	r3, [r1, #16]
   db5b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   db5b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   db5ba:	bf48      	it	mi
   db5bc:	f10a 0a07 	addmi.w	sl, sl, #7
   db5c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   db5c4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   db5c8:	4453      	add	r3, sl
   db5ca:	42a3      	cmp	r3, r4
   db5cc:	db01      	blt.n	db5d2 <__tzcalc_limits+0x116>
   db5ce:	3b07      	subs	r3, #7
   db5d0:	e7fb      	b.n	db5ca <__tzcalc_limits+0x10e>
   db5d2:	444b      	add	r3, r9
   db5d4:	698c      	ldr	r4, [r1, #24]
   db5d6:	4a0c      	ldr	r2, [pc, #48]	; (db608 <__tzcalc_limits+0x14c>)
   db5d8:	fb02 4303 	mla	r3, r2, r3, r4
   db5dc:	6a0c      	ldr	r4, [r1, #32]
   db5de:	4423      	add	r3, r4
   db5e0:	f841 3f1c 	str.w	r3, [r1, #28]!
   db5e4:	9b01      	ldr	r3, [sp, #4]
   db5e6:	4299      	cmp	r1, r3
   db5e8:	d1a2      	bne.n	db530 <__tzcalc_limits+0x74>
   db5ea:	69c3      	ldr	r3, [r0, #28]
   db5ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
   db5ee:	4293      	cmp	r3, r2
   db5f0:	bfac      	ite	ge
   db5f2:	2300      	movge	r3, #0
   db5f4:	2301      	movlt	r3, #1
   db5f6:	6003      	str	r3, [r0, #0]
   db5f8:	2001      	movs	r0, #1
   db5fa:	e000      	b.n	db5fe <__tzcalc_limits+0x142>
   db5fc:	2000      	movs	r0, #0
   db5fe:	b003      	add	sp, #12
   db600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db604:	000dc6d8 	.word	0x000dc6d8
   db608:	00015180 	.word	0x00015180

000db60c <__tz_lock>:
   db60c:	4770      	bx	lr

000db60e <__tz_unlock>:
   db60e:	4770      	bx	lr

000db610 <_tzset_unlocked>:
   db610:	4b01      	ldr	r3, [pc, #4]	; (db618 <_tzset_unlocked+0x8>)
   db612:	6818      	ldr	r0, [r3, #0]
   db614:	f000 b802 	b.w	db61c <_tzset_unlocked_r>
   db618:	2003dfdc 	.word	0x2003dfdc

000db61c <_tzset_unlocked_r>:
   db61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db620:	b08d      	sub	sp, #52	; 0x34
   db622:	4607      	mov	r7, r0
   db624:	f000 f9d6 	bl	db9d4 <__gettzinfo>
   db628:	49b0      	ldr	r1, [pc, #704]	; (db8ec <_tzset_unlocked_r+0x2d0>)
   db62a:	4eb1      	ldr	r6, [pc, #708]	; (db8f0 <_tzset_unlocked_r+0x2d4>)
   db62c:	4604      	mov	r4, r0
   db62e:	4638      	mov	r0, r7
   db630:	f000 f9c8 	bl	db9c4 <_getenv_r>
   db634:	4605      	mov	r5, r0
   db636:	b960      	cbnz	r0, db652 <_tzset_unlocked_r+0x36>
   db638:	4bae      	ldr	r3, [pc, #696]	; (db8f4 <_tzset_unlocked_r+0x2d8>)
   db63a:	4aaf      	ldr	r2, [pc, #700]	; (db8f8 <_tzset_unlocked_r+0x2dc>)
   db63c:	6018      	str	r0, [r3, #0]
   db63e:	4baf      	ldr	r3, [pc, #700]	; (db8fc <_tzset_unlocked_r+0x2e0>)
   db640:	6018      	str	r0, [r3, #0]
   db642:	4baf      	ldr	r3, [pc, #700]	; (db900 <_tzset_unlocked_r+0x2e4>)
   db644:	6830      	ldr	r0, [r6, #0]
   db646:	601a      	str	r2, [r3, #0]
   db648:	605a      	str	r2, [r3, #4]
   db64a:	f7fb ff31 	bl	d74b0 <free>
   db64e:	6035      	str	r5, [r6, #0]
   db650:	e148      	b.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db652:	6831      	ldr	r1, [r6, #0]
   db654:	b979      	cbnz	r1, db676 <_tzset_unlocked_r+0x5a>
   db656:	6830      	ldr	r0, [r6, #0]
   db658:	f7fb ff2a 	bl	d74b0 <free>
   db65c:	4628      	mov	r0, r5
   db65e:	f7ff fdd5 	bl	db20c <strlen>
   db662:	1c41      	adds	r1, r0, #1
   db664:	4638      	mov	r0, r7
   db666:	f7fb ff5b 	bl	d7520 <_malloc_r>
   db66a:	6030      	str	r0, [r6, #0]
   db66c:	b148      	cbz	r0, db682 <_tzset_unlocked_r+0x66>
   db66e:	4629      	mov	r1, r5
   db670:	f7ff f894 	bl	da79c <strcpy>
   db674:	e005      	b.n	db682 <_tzset_unlocked_r+0x66>
   db676:	f7ff f887 	bl	da788 <strcmp>
   db67a:	2800      	cmp	r0, #0
   db67c:	f000 8132 	beq.w	db8e4 <_tzset_unlocked_r+0x2c8>
   db680:	e7e9      	b.n	db656 <_tzset_unlocked_r+0x3a>
   db682:	782b      	ldrb	r3, [r5, #0]
   db684:	4a9f      	ldr	r2, [pc, #636]	; (db904 <_tzset_unlocked_r+0x2e8>)
   db686:	49a0      	ldr	r1, [pc, #640]	; (db908 <_tzset_unlocked_r+0x2ec>)
   db688:	2b3a      	cmp	r3, #58	; 0x3a
   db68a:	bf08      	it	eq
   db68c:	3501      	addeq	r5, #1
   db68e:	ae0a      	add	r6, sp, #40	; 0x28
   db690:	4633      	mov	r3, r6
   db692:	4628      	mov	r0, r5
   db694:	f7fb ff24 	bl	d74e0 <siscanf>
   db698:	2800      	cmp	r0, #0
   db69a:	f340 8123 	ble.w	db8e4 <_tzset_unlocked_r+0x2c8>
   db69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db6a0:	18ef      	adds	r7, r5, r3
   db6a2:	5ceb      	ldrb	r3, [r5, r3]
   db6a4:	2b2d      	cmp	r3, #45	; 0x2d
   db6a6:	d103      	bne.n	db6b0 <_tzset_unlocked_r+0x94>
   db6a8:	3701      	adds	r7, #1
   db6aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   db6ae:	e003      	b.n	db6b8 <_tzset_unlocked_r+0x9c>
   db6b0:	2b2b      	cmp	r3, #43	; 0x2b
   db6b2:	bf08      	it	eq
   db6b4:	3701      	addeq	r7, #1
   db6b6:	2501      	movs	r5, #1
   db6b8:	f10d 0a20 	add.w	sl, sp, #32
   db6bc:	f10d 0b1e 	add.w	fp, sp, #30
   db6c0:	f04f 0800 	mov.w	r8, #0
   db6c4:	9603      	str	r6, [sp, #12]
   db6c6:	f8cd a008 	str.w	sl, [sp, #8]
   db6ca:	9601      	str	r6, [sp, #4]
   db6cc:	f8cd b000 	str.w	fp, [sp]
   db6d0:	4633      	mov	r3, r6
   db6d2:	aa07      	add	r2, sp, #28
   db6d4:	498d      	ldr	r1, [pc, #564]	; (db90c <_tzset_unlocked_r+0x2f0>)
   db6d6:	f8ad 801e 	strh.w	r8, [sp, #30]
   db6da:	4638      	mov	r0, r7
   db6dc:	f8ad 8020 	strh.w	r8, [sp, #32]
   db6e0:	f7fb fefe 	bl	d74e0 <siscanf>
   db6e4:	4540      	cmp	r0, r8
   db6e6:	f340 80fd 	ble.w	db8e4 <_tzset_unlocked_r+0x2c8>
   db6ea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db6ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db6f2:	f8df 9224 	ldr.w	r9, [pc, #548]	; db918 <_tzset_unlocked_r+0x2fc>
   db6f6:	213c      	movs	r1, #60	; 0x3c
   db6f8:	fb01 3302 	mla	r3, r1, r2, r3
   db6fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db700:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db704:	fb01 3302 	mla	r3, r1, r2, r3
   db708:	435d      	muls	r5, r3
   db70a:	6225      	str	r5, [r4, #32]
   db70c:	4d7c      	ldr	r5, [pc, #496]	; (db900 <_tzset_unlocked_r+0x2e4>)
   db70e:	4b7d      	ldr	r3, [pc, #500]	; (db904 <_tzset_unlocked_r+0x2e8>)
   db710:	602b      	str	r3, [r5, #0]
   db712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db714:	497c      	ldr	r1, [pc, #496]	; (db908 <_tzset_unlocked_r+0x2ec>)
   db716:	441f      	add	r7, r3
   db718:	464a      	mov	r2, r9
   db71a:	4633      	mov	r3, r6
   db71c:	4638      	mov	r0, r7
   db71e:	f7fb fedf 	bl	d74e0 <siscanf>
   db722:	4540      	cmp	r0, r8
   db724:	dc08      	bgt.n	db738 <_tzset_unlocked_r+0x11c>
   db726:	682b      	ldr	r3, [r5, #0]
   db728:	606b      	str	r3, [r5, #4]
   db72a:	4b72      	ldr	r3, [pc, #456]	; (db8f4 <_tzset_unlocked_r+0x2d8>)
   db72c:	6a22      	ldr	r2, [r4, #32]
   db72e:	601a      	str	r2, [r3, #0]
   db730:	4b72      	ldr	r3, [pc, #456]	; (db8fc <_tzset_unlocked_r+0x2e0>)
   db732:	f8c3 8000 	str.w	r8, [r3]
   db736:	e0d5      	b.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db73a:	f8c5 9004 	str.w	r9, [r5, #4]
   db73e:	18fd      	adds	r5, r7, r3
   db740:	5cfb      	ldrb	r3, [r7, r3]
   db742:	2b2d      	cmp	r3, #45	; 0x2d
   db744:	d103      	bne.n	db74e <_tzset_unlocked_r+0x132>
   db746:	3501      	adds	r5, #1
   db748:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   db74c:	e003      	b.n	db756 <_tzset_unlocked_r+0x13a>
   db74e:	2b2b      	cmp	r3, #43	; 0x2b
   db750:	bf08      	it	eq
   db752:	3501      	addeq	r5, #1
   db754:	2701      	movs	r7, #1
   db756:	2300      	movs	r3, #0
   db758:	f8ad 301c 	strh.w	r3, [sp, #28]
   db75c:	f8ad 301e 	strh.w	r3, [sp, #30]
   db760:	f8ad 3020 	strh.w	r3, [sp, #32]
   db764:	930a      	str	r3, [sp, #40]	; 0x28
   db766:	9603      	str	r6, [sp, #12]
   db768:	f8cd a008 	str.w	sl, [sp, #8]
   db76c:	9601      	str	r6, [sp, #4]
   db76e:	f8cd b000 	str.w	fp, [sp]
   db772:	4633      	mov	r3, r6
   db774:	aa07      	add	r2, sp, #28
   db776:	4965      	ldr	r1, [pc, #404]	; (db90c <_tzset_unlocked_r+0x2f0>)
   db778:	4628      	mov	r0, r5
   db77a:	f7fb feb1 	bl	d74e0 <siscanf>
   db77e:	2800      	cmp	r0, #0
   db780:	dc04      	bgt.n	db78c <_tzset_unlocked_r+0x170>
   db782:	6a23      	ldr	r3, [r4, #32]
   db784:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   db788:	63e3      	str	r3, [r4, #60]	; 0x3c
   db78a:	e00e      	b.n	db7aa <_tzset_unlocked_r+0x18e>
   db78c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db790:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db794:	213c      	movs	r1, #60	; 0x3c
   db796:	fb01 3302 	mla	r3, r1, r2, r3
   db79a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db79e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db7a2:	fb01 3302 	mla	r3, r1, r2, r3
   db7a6:	435f      	muls	r7, r3
   db7a8:	63e7      	str	r7, [r4, #60]	; 0x3c
   db7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db7ac:	4627      	mov	r7, r4
   db7ae:	441d      	add	r5, r3
   db7b0:	f04f 0900 	mov.w	r9, #0
   db7b4:	782b      	ldrb	r3, [r5, #0]
   db7b6:	2b2c      	cmp	r3, #44	; 0x2c
   db7b8:	bf08      	it	eq
   db7ba:	3501      	addeq	r5, #1
   db7bc:	f895 8000 	ldrb.w	r8, [r5]
   db7c0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   db7c4:	d126      	bne.n	db814 <_tzset_unlocked_r+0x1f8>
   db7c6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   db7ca:	9302      	str	r3, [sp, #8]
   db7cc:	ab09      	add	r3, sp, #36	; 0x24
   db7ce:	9300      	str	r3, [sp, #0]
   db7d0:	9603      	str	r6, [sp, #12]
   db7d2:	9601      	str	r6, [sp, #4]
   db7d4:	4633      	mov	r3, r6
   db7d6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   db7da:	494d      	ldr	r1, [pc, #308]	; (db910 <_tzset_unlocked_r+0x2f4>)
   db7dc:	4628      	mov	r0, r5
   db7de:	f7fb fe7f 	bl	d74e0 <siscanf>
   db7e2:	2803      	cmp	r0, #3
   db7e4:	d17e      	bne.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db7e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   db7ea:	1e4b      	subs	r3, r1, #1
   db7ec:	2b0b      	cmp	r3, #11
   db7ee:	d879      	bhi.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db7f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   db7f4:	1e53      	subs	r3, r2, #1
   db7f6:	2b04      	cmp	r3, #4
   db7f8:	d874      	bhi.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db7fa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   db7fe:	2b06      	cmp	r3, #6
   db800:	d870      	bhi.n	db8e4 <_tzset_unlocked_r+0x2c8>
   db802:	f887 8008 	strb.w	r8, [r7, #8]
   db806:	60f9      	str	r1, [r7, #12]
   db808:	613a      	str	r2, [r7, #16]
   db80a:	617b      	str	r3, [r7, #20]
   db80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db80e:	eb05 0803 	add.w	r8, r5, r3
   db812:	e02a      	b.n	db86a <_tzset_unlocked_r+0x24e>
   db814:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   db818:	bf06      	itte	eq
   db81a:	3501      	addeq	r5, #1
   db81c:	4643      	moveq	r3, r8
   db81e:	2344      	movne	r3, #68	; 0x44
   db820:	220a      	movs	r2, #10
   db822:	a90b      	add	r1, sp, #44	; 0x2c
   db824:	4628      	mov	r0, r5
   db826:	9305      	str	r3, [sp, #20]
   db828:	f7ff fe2e 	bl	db488 <strtoul>
   db82c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   db830:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   db834:	4545      	cmp	r5, r8
   db836:	9b05      	ldr	r3, [sp, #20]
   db838:	d114      	bne.n	db864 <_tzset_unlocked_r+0x248>
   db83a:	234d      	movs	r3, #77	; 0x4d
   db83c:	f1b9 0f00 	cmp.w	r9, #0
   db840:	d107      	bne.n	db852 <_tzset_unlocked_r+0x236>
   db842:	7223      	strb	r3, [r4, #8]
   db844:	2303      	movs	r3, #3
   db846:	60e3      	str	r3, [r4, #12]
   db848:	2302      	movs	r3, #2
   db84a:	6123      	str	r3, [r4, #16]
   db84c:	f8c4 9014 	str.w	r9, [r4, #20]
   db850:	e00b      	b.n	db86a <_tzset_unlocked_r+0x24e>
   db852:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   db856:	230b      	movs	r3, #11
   db858:	62a3      	str	r3, [r4, #40]	; 0x28
   db85a:	2301      	movs	r3, #1
   db85c:	62e3      	str	r3, [r4, #44]	; 0x2c
   db85e:	2300      	movs	r3, #0
   db860:	6323      	str	r3, [r4, #48]	; 0x30
   db862:	e002      	b.n	db86a <_tzset_unlocked_r+0x24e>
   db864:	b280      	uxth	r0, r0
   db866:	723b      	strb	r3, [r7, #8]
   db868:	6178      	str	r0, [r7, #20]
   db86a:	2302      	movs	r3, #2
   db86c:	f8ad 301c 	strh.w	r3, [sp, #28]
   db870:	2300      	movs	r3, #0
   db872:	f8ad 301e 	strh.w	r3, [sp, #30]
   db876:	f8ad 3020 	strh.w	r3, [sp, #32]
   db87a:	930a      	str	r3, [sp, #40]	; 0x28
   db87c:	f898 3000 	ldrb.w	r3, [r8]
   db880:	2b2f      	cmp	r3, #47	; 0x2f
   db882:	d10b      	bne.n	db89c <_tzset_unlocked_r+0x280>
   db884:	9603      	str	r6, [sp, #12]
   db886:	f8cd a008 	str.w	sl, [sp, #8]
   db88a:	9601      	str	r6, [sp, #4]
   db88c:	f8cd b000 	str.w	fp, [sp]
   db890:	4633      	mov	r3, r6
   db892:	aa07      	add	r2, sp, #28
   db894:	491f      	ldr	r1, [pc, #124]	; (db914 <_tzset_unlocked_r+0x2f8>)
   db896:	4640      	mov	r0, r8
   db898:	f7fb fe22 	bl	d74e0 <siscanf>
   db89c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   db8a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   db8a4:	213c      	movs	r1, #60	; 0x3c
   db8a6:	fb01 3302 	mla	r3, r1, r2, r3
   db8aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   db8ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   db8b2:	fb01 3302 	mla	r3, r1, r2, r3
   db8b6:	61bb      	str	r3, [r7, #24]
   db8b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   db8ba:	f109 0901 	add.w	r9, r9, #1
   db8be:	f1b9 0f02 	cmp.w	r9, #2
   db8c2:	4445      	add	r5, r8
   db8c4:	f107 071c 	add.w	r7, r7, #28
   db8c8:	f47f af74 	bne.w	db7b4 <_tzset_unlocked_r+0x198>
   db8cc:	6860      	ldr	r0, [r4, #4]
   db8ce:	f7ff fdf5 	bl	db4bc <__tzcalc_limits>
   db8d2:	4b08      	ldr	r3, [pc, #32]	; (db8f4 <_tzset_unlocked_r+0x2d8>)
   db8d4:	6a22      	ldr	r2, [r4, #32]
   db8d6:	601a      	str	r2, [r3, #0]
   db8d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   db8da:	1a9b      	subs	r3, r3, r2
   db8dc:	4a07      	ldr	r2, [pc, #28]	; (db8fc <_tzset_unlocked_r+0x2e0>)
   db8de:	bf18      	it	ne
   db8e0:	2301      	movne	r3, #1
   db8e2:	6013      	str	r3, [r2, #0]
   db8e4:	b00d      	add	sp, #52	; 0x34
   db8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db8ea:	bf00      	nop
   db8ec:	000dc9bc 	.word	0x000dc9bc
   db8f0:	2003e7e0 	.word	0x2003e7e0
   db8f4:	2003e7e8 	.word	0x2003e7e8
   db8f8:	000dc9bf 	.word	0x000dc9bf
   db8fc:	2003e7e4 	.word	0x2003e7e4
   db900:	2003dfe0 	.word	0x2003dfe0
   db904:	2003e7d3 	.word	0x2003e7d3
   db908:	000dc9c3 	.word	0x000dc9c3
   db90c:	000dc9e6 	.word	0x000dc9e6
   db910:	000dc9d2 	.word	0x000dc9d2
   db914:	000dc9e5 	.word	0x000dc9e5
   db918:	2003e7c8 	.word	0x2003e7c8

000db91c <abs>:
   db91c:	2800      	cmp	r0, #0
   db91e:	bfb8      	it	lt
   db920:	4240      	neglt	r0, r0
   db922:	4770      	bx	lr

000db924 <div>:
   db924:	2900      	cmp	r1, #0
   db926:	b510      	push	{r4, lr}
   db928:	fb91 f4f2 	sdiv	r4, r1, r2
   db92c:	fb02 1314 	mls	r3, r2, r4, r1
   db930:	db04      	blt.n	db93c <div+0x18>
   db932:	2b00      	cmp	r3, #0
   db934:	da07      	bge.n	db946 <div+0x22>
   db936:	3401      	adds	r4, #1
   db938:	1a9b      	subs	r3, r3, r2
   db93a:	e004      	b.n	db946 <div+0x22>
   db93c:	2b00      	cmp	r3, #0
   db93e:	bfc4      	itt	gt
   db940:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   db944:	189b      	addgt	r3, r3, r2
   db946:	6004      	str	r4, [r0, #0]
   db948:	6043      	str	r3, [r0, #4]
   db94a:	bd10      	pop	{r4, pc}

000db94c <_findenv_r>:
   db94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db950:	4607      	mov	r7, r0
   db952:	468b      	mov	fp, r1
   db954:	4690      	mov	r8, r2
   db956:	f000 f845 	bl	db9e4 <__env_lock>
   db95a:	4b19      	ldr	r3, [pc, #100]	; (db9c0 <_findenv_r+0x74>)
   db95c:	681d      	ldr	r5, [r3, #0]
   db95e:	469a      	mov	sl, r3
   db960:	b13d      	cbz	r5, db972 <_findenv_r+0x26>
   db962:	465c      	mov	r4, fp
   db964:	4623      	mov	r3, r4
   db966:	f813 2b01 	ldrb.w	r2, [r3], #1
   db96a:	b142      	cbz	r2, db97e <_findenv_r+0x32>
   db96c:	2a3d      	cmp	r2, #61	; 0x3d
   db96e:	461c      	mov	r4, r3
   db970:	d1f8      	bne.n	db964 <_findenv_r+0x18>
   db972:	4638      	mov	r0, r7
   db974:	f000 f837 	bl	db9e6 <__env_unlock>
   db978:	2000      	movs	r0, #0
   db97a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db97e:	ebcb 0404 	rsb	r4, fp, r4
   db982:	46a9      	mov	r9, r5
   db984:	f859 0b04 	ldr.w	r0, [r9], #4
   db988:	2800      	cmp	r0, #0
   db98a:	d0f2      	beq.n	db972 <_findenv_r+0x26>
   db98c:	4622      	mov	r2, r4
   db98e:	4659      	mov	r1, fp
   db990:	f7ff fc44 	bl	db21c <strncmp>
   db994:	b988      	cbnz	r0, db9ba <_findenv_r+0x6e>
   db996:	f859 3c04 	ldr.w	r3, [r9, #-4]
   db99a:	191e      	adds	r6, r3, r4
   db99c:	5d1b      	ldrb	r3, [r3, r4]
   db99e:	2b3d      	cmp	r3, #61	; 0x3d
   db9a0:	d10b      	bne.n	db9ba <_findenv_r+0x6e>
   db9a2:	f8da 3000 	ldr.w	r3, [sl]
   db9a6:	1aed      	subs	r5, r5, r3
   db9a8:	10ad      	asrs	r5, r5, #2
   db9aa:	4638      	mov	r0, r7
   db9ac:	f8c8 5000 	str.w	r5, [r8]
   db9b0:	f000 f819 	bl	db9e6 <__env_unlock>
   db9b4:	1c70      	adds	r0, r6, #1
   db9b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db9ba:	464d      	mov	r5, r9
   db9bc:	e7e1      	b.n	db982 <_findenv_r+0x36>
   db9be:	bf00      	nop
   db9c0:	2003e028 	.word	0x2003e028

000db9c4 <_getenv_r>:
   db9c4:	b507      	push	{r0, r1, r2, lr}
   db9c6:	aa01      	add	r2, sp, #4
   db9c8:	f7ff ffc0 	bl	db94c <_findenv_r>
   db9cc:	b003      	add	sp, #12
   db9ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db9d4 <__gettzinfo>:
   db9d4:	4800      	ldr	r0, [pc, #0]	; (db9d8 <__gettzinfo+0x4>)
   db9d6:	4770      	bx	lr
   db9d8:	2003dfe8 	.word	0x2003dfe8

000db9dc <labs>:
   db9dc:	2800      	cmp	r0, #0
   db9de:	bfb8      	it	lt
   db9e0:	4240      	neglt	r0, r0
   db9e2:	4770      	bx	lr

000db9e4 <__env_lock>:
   db9e4:	4770      	bx	lr

000db9e6 <__env_unlock>:
   db9e6:	4770      	bx	lr

000db9e8 <dynalib_user>:
   db9e8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db9f8:	0000 0000                                   ....

000db9fc <_ZTV8MB85RC64>:
	...
   dba04:	41d9 000d 41ed 000d 5d41 000d 5ded 000d     .A...A..A]...]..
   dba14:	5e67 000d                                   g^..

000dba18 <_ZTV17PublishQueueAsync>:
	...
   dba20:	41b1 000d 41c5 000d 687d 000d 6a1d 000d     .A...A..}h...j..
   dba30:	69d9 000d 69b7 000d 6b63 000d 69ff 000d     .i...i..ck...i..
   dba40:	be4e 000d be89 000d be8e 000d be93 000d     N...............
   dba50:	be97 000d be9c 000d bea1 000d bea5 000d     ................
   dba60:	beb0 000d bebb 000d be4e 000d be56 000d     ........N...V...
   dba70:	be5a 000d be63 000d be6b 000d be77 000d     Z...c...k...w...
   dba80:	be7d 000d 6f4e 4420 7461 0061 6255 6469     }...No Data.Ubid
   dba90:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
   dbaa0:	2065 6552 6563 7669 6465 5500 6b6e 6f6e     e Received.Unkno
   dbab0:	6e77 7220 7365 6f70 736e 2065 6572 6563     wn response rece
   dbac0:	6976 6465 2520 0069 6148 6472 5220 7365     vied %i.Hard Res
   dbad0:	7465 6920 206e 2032 6573 6f63 646e 0073     et in 2 seconds.
   dbae0:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
   dbaf0:	3000 4300 656c 7261 6465 5620 7265 6f62     .0.Cleared Verbo
   dbb00:	6573 4d20 646f 0065 3225 312e 2066 5455     se Mode.%2.1f UT
   dbb10:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
   dbb20:	7465 2520 0069 704f 6e65 7420 6d69 2065     et %i.Open time 
   dbb30:	6573 2074 6f74 2520 0069 6c43 736f 6e69     set to %i.Closin
   dbb40:	2067 6974 656d 7320 7465 7420 206f 6925     g time set to %i
   dbb50:	4300 756f 746e 202c 6f68 7275 796c 203a     .Count, hourly: 
   dbb60:	6925 202c 6164 6c69 3a79 2520 0069 227b     %i, daily: %i.{"
   dbb70:	6f68 7275 796c 3a22 6925 202c 6422 6961     hourly":%i, "dai
   dbb80:	796c 3a22 6925 222c 6162 7474 7265 2279     ly":%i,"battery"
   dbb90:	253a 2c69 2020 6b22 7965 2231 223a 7325     :%i,  "key1":"%s
   dbba0:	2c22 2220 6574 706d 3a22 6925 202c 7222     ", "temp":%i, "r
   dbbb0:	7365 7465 2273 253a 2c69 2220 6c61 7265     esets":%i, "aler
   dbbc0:	7374 3a22 6925 202c 6d22 7861 696d 226e     ts":%i, "maxmin"
   dbbd0:	253a 2c69 2220 6974 656d 7473 6d61 2270     :%i, "timestamp"
   dbbe0:	253a 756c 3030 7d30 5500 6962 6f64 7374     :%lu000}.Ubidots
   dbbf0:	432d 756f 746e 7265 482d 6f6f 2d6b 3176     -Counter-Hook-v1
   dbc00:	2500 2073 3a53 3225 302e 2566 2c25 5120     .%s S:%2.0f%%, Q
   dbc10:	253a 2e32 6630 2525 0020 6553 2074 6f53     :%2.0f%% .Set So
   dbc20:	616c 2072 6f50 6577 6572 2064 6f4d 6564     lar Powered Mode
   dbc30:	4300 656c 7261 6465 5320 6c6f 7261 5020     .Cleared Solar P
   dbc40:	776f 7265 6465 4d20 646f 0065 6f4c 2077     owered Mode.Low 
   dbc50:	6f50 6577 2072 6f4d 6564 5400 7572 0065     Power Mode.True.
   dbc60:	6f4e 6d72 6c61 4f20 6570 6172 6974 6e6f     Normal Operation
   dbc70:	0073 6146 736c 0065 7246 6d6f 2520 2073     s.False.From %s 
   dbc80:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   dbc90:	6973 6974 6e6f 4100 2b54 4643 4e55 313d     sition.AT+CFUN=1
   dbca0:	0d35 000a 7552 6e6e 6e69 0067 6144 6c69     5...Running.Dail
   dbcb0:	2079 6c43 6165 756e 0070 5344 2054 666f     y Cleanup.DST of
   dbcc0:	7366 7465 2520 2e32 6631 4c00 616f 6964     fset %2.1f.Loadi
   dbcd0:	676e 5320 7379 6574 206d 6544 6166 6c75     ng System Defaul
   dbce0:	7374 7300 6170 6b72 642f 7665 6369 2f65     ts.spark/device/
   dbcf0:	6573 7373 6f69 2f6e 6e65 0064 7245 6f72     session/end.Erro
   dbd00:	2072 7453 7461 2065 202d 6552 6573 0074     r State - Reset.
   dbd10:	7453 7461 0065 7245 6f72 2072 7453 7461     State.Error Stat
   dbd20:	2065 202d 6f50 6577 2072 7943 6c63 0065     e - Power Cycle.
   dbd30:	7245 6f72 2072 7453 7461 2065 202d 7546     Error State - Fu
   dbd40:	6c6c 4d20 646f 6d65 5220 7365 7465 4800     ll Modem Reset.H
   dbd50:	756f 6c72 4379 756f 746e 4400 6961 796c     ourlyCount.Daily
   dbd60:	6f43 6e75 0074 6953 6e67 6c61 5200 7365     Count.Signal.Res
   dbd70:	7465 6f43 6e75 0074 6554 706d 7265 7461     etCount.Temperat
   dbd80:	7275 0065 6552 656c 7361 0065 7473 7461     ure.Release.stat
   dbd90:	4f65 4366 6768 6c00 776f 6f50 6577 4d72     eOfChg.lowPowerM
   dbda0:	646f 0065 6c43 736f 5465 6d69 0065 6c41     ode.CloseTime.Al
   dbdb0:	7265 7374 5400 6d69 4f65 6666 6573 0074     erts.TimeOffset.
   dbdc0:	6142 7474 7265 4379 6e6f 6574 7478 7200     BatteryContext.r
   dbdd0:	7365 7465 5246 4d41 7200 7365 7465 6f43     esetFRAM.resetCo
   dbde0:	6e75 7374 4800 7261 5264 7365 7465 5300     unts.HardReset.S
   dbdf0:	6e65 4e64 776f 4c00 776f 6f50 6577 4d72     endNow.LowPowerM
   dbe00:	646f 0065 6f53 616c 2d72 6f4d 6564 5600     ode.Solar-Mode.V
   dbe10:	7265 6f62 6573 4d2d 646f 0065 6553 2d74     erbose-Mode.Set-
   dbe20:	6954 656d 6f7a 656e 5300 7465 442d 5453     Timezone.Set-DST
   dbe30:	664f 7366 7465 5300 7465 4f2d 6570 546e     Offset.Set-OpenT
   dbe40:	6d69 0065 6553 2d74 6c43 736f 0065 6e55     ime.Set-Close.Un
   dbe50:	6e6b 776f 006e 6f4e 2074 6843 7261 6967     known.Not Chargi
   dbe60:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   dbe70:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   dbe80:	6e6f 656e 7463 6465 4e00 6e6f 0065 6957     onnected.None.Wi
   dbe90:	6946 4700 4d53 5500 544d 0053 4443 414d     Fi.GSM.UMTS.CDMA
   dbea0:	4c00 4554 4900 4545 3845 3230 3531 0034     .LTE.IEEE802154.
   dbeb0:	544c 5f45 4143 5f54 314d 4c00 4554 435f     LTE_CAT_M1.LTE_C
   dbec0:	5441 4e5f 3142 0000                         AT_NB1..

000dbec8 <_ZL17FRAMversionNumber>:
   dbec8:	0002 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dbed8:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dbee8:	2065 7266 6d61 6441 7264 253d 0075 6572     e framAddr=%u.re
   dbef8:	6461 7320 7465 6120 6464 6572 7373 6620     ad set address f
   dbf08:	6961 656c 2064 6425 6400 6469 276e 2074     ailed %d.didn't 
   dbf18:	6572 6563 7669 2065 6e65 756f 6867 6220     receive enough b
   dbf28:	7479 7365 6320 756f 746e 253d 0075 7277     ytes count=%u.wr
   dbf38:	7469 2065 6166 6c69 6465 2520 0064 0000     ite failed %d...

000dbf48 <_ZTV6MB85RC>:
	...
   dbf50:	5c61 000d 5c63 000d 5d41 000d 5ded 000d     a\..c\..A]...]..
   dbf60:	5e67 000d                                   g^..

000dbf64 <_ZTV14MCP79410EEPROM>:
	...
   dbf6c:	5f2f 000d 5f51 000d 5f25 000d 5f29 000d     /_..Q_..%_..)_..
   dbf7c:	5f6d 000d 63a1 000d 67bd 000d               m_...c...g..

000dbf88 <_ZTV12MCP79410SRAM>:
	...
   dbf90:	5f2d 000d 5f43 000d 5f1d 000d 5f21 000d     -_..C_..._..!_..
   dbfa0:	5f6d 000d 63d9 000d 6627 000d 6579 7261     m_...c..'f..year
   dbfb0:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   dbfc0:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   dbfd0:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   dbfe0:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   dbff0:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   dc000:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   dc010:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   dc020:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   dc030:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   dc040:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   dc050:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   dc060:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   dc070:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   dc080:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   dc090:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   dc0a0:	7061 2e70 7472 0063                         app.rtc.

000dc0a8 <_ZTV12MCP79410Time>:
	...
   dc0b0:	5f31 000d 5f35 000d                         1_..5_..

000dc0b8 <_ZTV8MCP79410>:
	...
   dc0c0:	5f33 000d 5f5f 000d                         3_..__..

000dc0c8 <_ZTV25PublishQueueAsyncRetained>:
	...
   dc0d0:	6975 000d 6989 000d 687d 000d 6a1d 000d     ui...i..}h...j..
   dc0e0:	69d9 000d 69b7 000d 6b63 000d 69ff 000d     .i...i..ck...i..
   dc0f0:	7550 6c62 7369 5168 6575 6575 7341 6e79     PublishQueueAsyn
   dc100:	0063 7571 7565 6965 676e 6520 6576 746e     c.queueing event
   dc110:	614e 656d 253d 2073 6164 6174 253d 2073     Name=%s data=%s 
   dc120:	7474 3d6c 6425 6620 616c 7367 3d31 6425     ttl=%d flags1=%d
   dc130:	6620 616c 7367 3d32 6425 7320 7a69 3d65      flags2=%d size=
   dc140:	6425 7000 6275 696c 6873 6e69 2067 7325     %d.publishing %s
   dc150:	2520 2073 7474 3d6c 6425 6620 616c 7367      %s ttl=%d flags
   dc160:	253d 0078 7570 6c62 7369 6568 2064 7573     =%x.published su
   dc170:	6363 7365 6673 6c75 796c 7000 6275 696c     ccessfully.publi
   dc180:	6873 6465 6620 6961 656c 2c64 7720 6c69     shed failed, wil
   dc190:	206c 6572 7274 2079 6e69 2520 756c 6d20     l retry in %lu m
   dc1a0:	0073 7061 2e70 7570 7162 0000               s.app.pubq..

000dc1ac <_ZTV21PublishQueueAsyncBase>:
	...
   dc1bc:	687d 000d 40a9 000d 40a9 000d 40a9 000d     }h...@...@...@..
   dc1cc:	40a9 000d 40a9 000d                         .@...@..

000dc1d4 <_ZTVN5spark13CellularClassE>:
	...
   dc1dc:	763b 000d 7631 000d 7627 000d 75dd 000d     ;v..1v..'v...u..
   dc1ec:	761b 000d 760f 000d 7603 000d 75fb 000d     .v...v...v...u..
   dc1fc:	75f1 000d 75e7 000d 8349 000d               .u...u..I...

000dc208 <_ZTV14CellularSignal>:
	...
   dc210:	76e9 000d 7749 000d 76eb 000d 778d 000d     .v..Iw...v...w..
   dc220:	76f1 000d 7759 000d 771d 000d 7817 000d     .v..Yw...w...x..
   dc230:	fffc ffff 0000 0000 7841 000d               ........Ax..

000dc23c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc244:	7849 000d 784f 000d 7893 000d 785d 000d     Ix..Ox...x..]x..
   dc254:	784b 000d                                   Kx..

000dc258 <_ZTVN5spark13EthernetClassE>:
	...
   dc260:	7ea7 000d 7e9d 000d 7e93 000d 7e89 000d     .~...~...~...~..
   dc270:	7e7d 000d 7e71 000d 7e65 000d 7e5d 000d     }~..q~..e~..]~..
   dc280:	7e53 000d 7e49 000d 8349 000d               S~..I~..I...

000dc28c <_ZTV7TwoWire>:
	...
   dc294:	7ec5 000d 7f0f 000d 7ee7 000d 7ec7 000d     .~.......~...~..
   dc2a4:	7eef 000d 7ef7 000d 7eff 000d 7f07 000d     .~...~...~......

000dc2b4 <_ZTV9IPAddress>:
	...
   dc2bc:	8081 000d 8071 000d 8073 000d 6162 6475     ....q...s...baud
   dc2cc:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   dc2dc:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   dc2ec:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dc2fc:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dc30c:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dc31c:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dc32c:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dc33c:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   dc34c:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
   dc35c:	6961 736c 3d20 0020 6e6c 6600 006e 6f63     ails = .ln.fn.co
   dc36c:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   dc37c:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dc38c:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000dc39c <_ZTVN5spark9MeshClassE>:
	...
   dc3a4:	81c3 000d 81b9 000d 81af 000d 81a5 000d     ................
   dc3b4:	8199 000d 818d 000d 8181 000d 8179 000d     ............y...
   dc3c4:	816f 000d 8165 000d 8349 000d               o...e...I...

000dc3d0 <_ZTVN5spark12NetworkClassE>:
	...
   dc3d8:	82e1 000d 82eb 000d 82f5 000d 82ff 000d     ................
   dc3e8:	8309 000d 8315 000d 8321 000d 832d 000d     ........!...-...
   dc3f8:	8335 000d 833f 000d 8349 000d 6977 6972     5...?...I...wiri
   dc408:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   dc418:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   dc428:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
   dc438:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dc448:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   dc458:	0000 0000                                   ....

000dc45c <_ZTV11USARTSerial>:
	...
   dc464:	8da5 000d 8df5 000d 8e03 000d 859f 000d     ................
   dc474:	8db9 000d 8ddb 000d 8dc7 000d 8def 000d     ................
   dc484:	8da7 000d 8dab 000d                         ........

000dc48c <_ZTV9USBSerial>:
	...
   dc494:	8ead 000d 8efd 000d 8f0b 000d 859f 000d     ................
   dc4a4:	8ee9 000d 8eaf 000d 8ec5 000d 8ef7 000d     ................
   dc4b4:	8edb 000d 8ea9 000d                         ........

000dc4bc <_ZSt7nothrow>:
	...

000dc4bd <day_name.4725>:
   dc4bd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc4cd:	6972 6153 4a74                                   riSat

000dc4d2 <mon_name.4726>:
   dc4d2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc4e2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc4f2:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   dc502:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   dc512:	6425 000a                                   %d..

000dc516 <_ctype_>:
   dc516:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc526:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc536:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc546:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc556:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc566:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc576:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc586:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc596:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc618 <__sf_fake_stdin>:
	...

000dc638 <__sf_fake_stdout>:
	...

000dc658 <__sf_fake_stderr>:
	...

000dc678 <_DAYS_BEFORE_MONTH>:
   dc678:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   dc688:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   dc698:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000dc6a8 <DAYS_IN_MONTH>:
   dc6a8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc6b8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc6c8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc6d8 <__month_lengths>:
   dc6d8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc6e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc6f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc708:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc718:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc728:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc738:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   dc748:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   dc758:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   dc768:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   dc778:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   dc788:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   dc798:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   dc7a8:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   dc7b8:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   dc7c8:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   dc7d8:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   dc7e8:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   dc7f8:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   dc808:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   dc818:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   dc828:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   dc838:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   dc848:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   dc858:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   dc868:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   dc878:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   dc888:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   dc898:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
   dc8a8:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
   dc8b8:	3a4d 5325 2520 0070                         M:%S %p.

000dc8c0 <_C_time_locale>:
   dc8c0:	c79b 000d c79f 000d c7a3 000d c7a7 000d     ................
   dc8d0:	c7ab 000d c7af 000d c7b3 000d c7b7 000d     ................
   dc8e0:	c7bb 000d c7bf 000d c7c3 000d c7c7 000d     ................
   dc8f0:	c7cb 000d c7d3 000d c7dc 000d c7e2 000d     ................
   dc900:	c7ab 000d c7e8 000d c7ed 000d c7f2 000d     ................
   dc910:	c7f9 000d c803 000d c80b 000d c814 000d     ................
   dc920:	c81d 000d c821 000d c825 000d c829 000d     ....!...%...)...
   dc930:	c82d 000d c831 000d c835 000d c839 000d     -...1...5...9...
   dc940:	c840 000d c847 000d c84f 000d c859 000d     @...G...O...Y...
   dc950:	c862 000d c869 000d c872 000d c87b 000d     b...i...r...{...
   dc960:	c884 000d bdd6 000d c899 000d c89c 000d     ................
   dc970:	c7cb 000d c7d3 000d c7dc 000d c7e2 000d     ................
   dc980:	c7ab 000d c7e8 000d c7ed 000d c7f2 000d     ................
   dc990:	c7f9 000d c803 000d c80b 000d c814 000d     ................
   dc9a0:	c2e8 000d c8b4 000d bca3 000d bca3 000d     ................
   dc9b0:	bca3 000d bca3 000d bca3 000d 5a54 4700     ............TZ.G
   dc9c0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   dc9d0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   dc9e0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   dc9f0:	3a6e 6825 2575 006e                         n:%hu%n.

000dc9f8 <link_const_variable_data_end>:
   dc9f8:	000d5b19 	.word	0x000d5b19
   dc9fc:	000d5f19 	.word	0x000d5f19
   dca00:	000d67f5 	.word	0x000d67f5
   dca04:	000d6de5 	.word	0x000d6de5
   dca08:	000d75b5 	.word	0x000d75b5
   dca0c:	000d76b9 	.word	0x000d76b9
   dca10:	000d7eb1 	.word	0x000d7eb1
   dca14:	000d8155 	.word	0x000d8155
   dca18:	000d8291 	.word	0x000d8291
   dca1c:	000d8415 	.word	0x000d8415
   dca20:	000d8669 	.word	0x000d8669
   dca24:	000d89b1 	.word	0x000d89b1
   dca28:	000d8d91 	.word	0x000d8d91
   dca2c:	000d934d 	.word	0x000d934d
   dca30:	000d9411 	.word	0x000d9411
   dca34:	000d9495 	.word	0x000d9495
   dca38:	000d9519 	.word	0x000d9519

000dca3c <link_constructors_end>:
   dca3c:	00000000 	.word	0x00000000
