
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/2.0.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007d10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000dbd30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000013c  2003e0c0  000dc54c  0001e0c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f4  2003e200  2003e200  0002e200  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc688  000dc688  0002c688  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc6b4  000dc6b4  0002c6b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00260577  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023c68  00000000  00000000  0028cc2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00044a8a  00000000  00000000  002b0897  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003a38  00000000  00000000  002f5321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000c028  00000000  00000000  002f8d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047007  00000000  00000000  00304d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005e150  00000000  00000000  0034bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00131343  00000000  00000000  003a9ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a4cc  00000000  00000000  004db21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fee7 	bl	dae04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 ff09 	bl	dae54 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0c0 	.word	0x2003e0c0
   d404c:	000dc54c 	.word	0x000dc54c
   d4050:	2003e1fc 	.word	0x2003e1fc
   d4054:	2003e200 	.word	0x2003e200
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 f8fb 	bl	da25c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dbcfc 	.word	0x000dbcfc
   d4080:	000dbd30 	.word	0x000dbd30

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf8c 	b.w	d4fa0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f981 	bl	d5390 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 b8a5 	b.w	da1e0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bb95 	b.w	d87c4 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bb93 	b.w	d87c4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bb99 	b.w	d87d4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fa26 	bl	d84fc <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d81ad 	.word	0x000d81ad

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z18outOfMemoryHandleryi>:
  return 1;
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
  outOfMemory = param;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z18outOfMemoryHandleryi+0x8>)
   d40ca:	601a      	str	r2, [r3, #0]
}
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	2003e0f4 	.word	0x2003e0f4

000d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40da:	b128      	cbz	r0, d40e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40de:	210c      	movs	r1, #12
   d40e0:	f006 f9c7 	bl	da472 <_ZdlPvj>
            wakeupSource = next;
   d40e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e6:	e7f8      	b.n	d40da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <_Z9resetFRAM6String>:
{
   d40ec:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ee:	4904      	ldr	r1, [pc, #16]	; (d4100 <_Z9resetFRAM6String+0x14>)
   d40f0:	f005 fbcf 	bl	d9892 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40f4:	b118      	cbz	r0, d40fe <_Z9resetFRAM6String+0x12>
    fram.erase();
   d40f6:	4803      	ldr	r0, [pc, #12]	; (d4104 <_Z9resetFRAM6String+0x18>)
   d40f8:	f003 f988 	bl	d740c <_ZN6MB85RC5eraseEv>
    return 1;
   d40fc:	2001      	movs	r0, #1
}
   d40fe:	bd08      	pop	{r3, pc}
   d4100:	000db0a0 	.word	0x000db0a0
   d4104:	2003e31c 	.word	0x2003e31c

000d4108 <_Z7sendNow6String>:
{
   d4108:	b508      	push	{r3, lr}
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z7sendNow6String+0x14>)
   d410c:	f005 fbc1 	bl	d9892 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4110:	b118      	cbz	r0, d411a <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_Z7sendNow6String+0x18>)
   d4114:	2203      	movs	r2, #3
   d4116:	701a      	strb	r2, [r3, #0]
    return 1;
   d4118:	2001      	movs	r0, #1
}
   d411a:	bd08      	pop	{r3, pc}
   d411c:	000db0a0 	.word	0x000db0a0
   d4120:	2003e588 	.word	0x2003e588

000d4124 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4124:	b510      	push	{r4, lr}
   d4126:	4b03      	ldr	r3, [pc, #12]	; (d4134 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4128:	6003      	str	r3, [r0, #0]
   d412a:	4604      	mov	r4, r0
   d412c:	f003 fd72 	bl	d7c14 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}
   d4134:	000db490 	.word	0x000db490

000d4138 <_ZN17PublishQueueAsyncD0Ev>:
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	f7ff fff2 	bl	d4124 <_ZN17PublishQueueAsyncD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	2138      	movs	r1, #56	; 0x38
   d4144:	f006 f995 	bl	da472 <_ZdlPvj>
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d414c:	b510      	push	{r4, lr}
   d414e:	4b03      	ldr	r3, [pc, #12]	; (d415c <_ZN8MB85RC64D1Ev+0x10>)
   d4150:	6003      	str	r3, [r0, #0]
   d4152:	4604      	mov	r4, r0
   d4154:	f003 f93a 	bl	d73cc <_ZN6MB85RCD1Ev>
   d4158:	4620      	mov	r0, r4
   d415a:	bd10      	pop	{r4, pc}
   d415c:	000db474 	.word	0x000db474

000d4160 <_ZN8MB85RC64D0Ev>:
   d4160:	b510      	push	{r4, lr}
   d4162:	4604      	mov	r4, r0
   d4164:	f7ff fff2 	bl	d414c <_ZN8MB85RC64D1Ev>
   d4168:	4620      	mov	r0, r4
   d416a:	2110      	movs	r1, #16
   d416c:	f006 f981 	bl	da472 <_ZdlPvj>
   d4170:	4620      	mov	r0, r4
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d4174:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4176:	f004 fa85 	bl	d8684 <spark_cloud_flag_connected>
        if (!connected()) {
   d417a:	b120      	cbz	r0, d4186 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d417c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d4180:	2000      	movs	r0, #0
   d4182:	f004 ba9f 	b.w	d86c4 <spark_sync_time>
    }
   d4186:	bd08      	pop	{r3, pc}

000d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4188:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d418a:	2000      	movs	r0, #0
   d418c:	f004 faa2 	bl	d86d4 <spark_sync_time_pending>
   d4190:	b128      	cbz	r0, d419e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4192:	f004 fa77 	bl	d8684 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4196:	f080 0001 	eor.w	r0, r0, #1
   d419a:	b2c0      	uxtb	r0, r0
    }
   d419c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d419e:	2001      	movs	r0, #1
   d41a0:	e7fc      	b.n	d419c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41a2:	2300      	movs	r3, #0
   d41a4:	2204      	movs	r2, #4
   d41a6:	f004 ba4d 	b.w	d8644 <spark_variable>

000d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41aa:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4604      	mov	r4, r0
   d41b0:	4608      	mov	r0, r1
   d41b2:	f003 ff9b 	bl	d80ec <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41b6:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ba:	2100      	movs	r1, #0
   d41bc:	2001      	movs	r0, #1
   d41be:	f003 ff95 	bl	d80ec <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41c2:	b2e0      	uxtb	r0, r4
   d41c4:	bd10      	pop	{r4, pc}

000d41c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41c6:	b510      	push	{r4, lr}
   d41c8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41ca:	6800      	ldr	r0, [r0, #0]
   d41cc:	b108      	cbz	r0, d41d2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41ce:	f004 fb01 	bl	d87d4 <free>
class SystemClass {
   d41d2:	4620      	mov	r0, r4
   d41d4:	bd10      	pop	{r4, pc}
	...

000d41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41da:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41dc:	4605      	mov	r5, r0
   d41de:	460f      	mov	r7, r1
   d41e0:	4616      	mov	r6, r2
        if (valid_) {
   d41e2:	b18b      	cbz	r3, d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41e4:	6803      	ldr	r3, [r0, #0]
   d41e6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41e8:	b183      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ea:	889a      	ldrh	r2, [r3, #4]
   d41ec:	2a01      	cmp	r2, #1
   d41ee:	d006      	beq.n	d41fe <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41f0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41f2:	e7f9      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41f4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41f6:	b14b      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41f8:	889a      	ldrh	r2, [r3, #4]
   d41fa:	2a01      	cmp	r2, #1
   d41fc:	d1fa      	bne.n	d41f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41fe:	b12b      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4200:	899a      	ldrh	r2, [r3, #12]
   d4202:	42ba      	cmp	r2, r7
   d4204:	d1f6      	bne.n	d41f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4206:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4208:	4628      	mov	r0, r5
   d420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d420c:	490a      	ldr	r1, [pc, #40]	; (d4238 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d420e:	2010      	movs	r0, #16
   d4210:	f006 f931 	bl	da476 <_ZnwjRKSt9nothrow_t>
   d4214:	4604      	mov	r4, r0
   d4216:	b168      	cbz	r0, d4234 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4218:	2210      	movs	r2, #16
   d421a:	2100      	movs	r1, #0
   d421c:	f006 fe1a 	bl	dae54 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4220:	4b06      	ldr	r3, [pc, #24]	; (d423c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4222:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4224:	2301      	movs	r3, #1
   d4226:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4228:	692b      	ldr	r3, [r5, #16]
   d422a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d422c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d422e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4230:	612c      	str	r4, [r5, #16]
   d4232:	e7e9      	b.n	d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4234:	7528      	strb	r0, [r5, #20]
                return *this;
   d4236:	e7e7      	b.n	d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4238:	000dbba0 	.word	0x000dbba0
   d423c:	00030010 	.word	0x00030010

000d4240 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4240:	2000      	movs	r0, #0
   d4242:	f003 bfdb 	b.w	d81fc <hal_timer_millis>

000d4246 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4246:	b40e      	push	{r1, r2, r3}
   d4248:	b510      	push	{r4, lr}
   d424a:	b08d      	sub	sp, #52	; 0x34
   d424c:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d424e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4250:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4254:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4256:	2300      	movs	r3, #0
   d4258:	2020      	movs	r0, #32
   d425a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d425e:	e9cd 4200 	strd	r4, r2, [sp]
   d4262:	201e      	movs	r0, #30
   d4264:	aa04      	add	r2, sp, #16
   d4266:	f004 f959 	bl	d851c <log_message_v>
}
   d426a:	b00d      	add	sp, #52	; 0x34
   d426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4270:	b003      	add	sp, #12
   d4272:	4770      	bx	lr

000d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4274:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4276:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4278:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d427c:	f88d 3000 	strb.w	r3, [sp]
   d4280:	f88d 5004 	strb.w	r5, [sp, #4]
   d4284:	68e4      	ldr	r4, [r4, #12]
   d4286:	233c      	movs	r3, #60	; 0x3c
   d4288:	47a0      	blx	r4
	}
   d428a:	b003      	add	sp, #12
   d428c:	bd30      	pop	{r4, r5, pc}
	...

000d4290 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4290:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4292:	780b      	ldrb	r3, [r1, #0]
   d4294:	4d1b      	ldr	r5, [pc, #108]	; (d4304 <_Z14UbidotsHandlerPKcS0_+0x74>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4296:	b093      	sub	sp, #76	; 0x4c
   d4298:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d429a:	b98b      	cbnz	r3, d42c0 <_Z14UbidotsHandlerPKcS0_+0x30>
    snprintf(responseString, sizeof(responseString),"No Data");
   d429c:	491a      	ldr	r1, [pc, #104]	; (d4308 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d429e:	a802      	add	r0, sp, #8
   d42a0:	f006 fe0e 	bl	daec0 <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d42a4:	792b      	ldrb	r3, [r5, #4]
   d42a6:	b14b      	cbz	r3, d42bc <_Z14UbidotsHandlerPKcS0_+0x2c>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42a8:	2300      	movs	r3, #0
   d42aa:	f88d 3000 	strb.w	r3, [sp]
   d42ae:	4b17      	ldr	r3, [pc, #92]	; (d430c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d42b0:	4917      	ldr	r1, [pc, #92]	; (d4310 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d42b2:	781b      	ldrb	r3, [r3, #0]
   d42b4:	4817      	ldr	r0, [pc, #92]	; (d4314 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d42b6:	aa02      	add	r2, sp, #8
   d42b8:	f7ff ffdc 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d42bc:	b013      	add	sp, #76	; 0x4c
   d42be:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d42c0:	4608      	mov	r0, r1
   d42c2:	f006 fd77 	bl	dadb4 <atoi>
   d42c6:	28c8      	cmp	r0, #200	; 0xc8
   d42c8:	d10d      	bne.n	d42e6 <_Z14UbidotsHandlerPKcS0_+0x56>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d42ca:	4913      	ldr	r1, [pc, #76]	; (d4318 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d42cc:	a802      	add	r0, sp, #8
   d42ce:	f006 fdf7 	bl	daec0 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d42d2:	f005 fe04 	bl	d9ede <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d42d6:	4b11      	ldr	r3, [pc, #68]	; (d431c <_Z14UbidotsHandlerPKcS0_+0x8c>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d42d8:	61e8      	str	r0, [r5, #28]
    systemStatusWriteNeeded = true;
   d42da:	2201      	movs	r2, #1
   d42dc:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d42de:	4b10      	ldr	r3, [pc, #64]	; (d4320 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d42e0:	2200      	movs	r2, #0
   d42e2:	701a      	strb	r2, [r3, #0]
   d42e4:	e7de      	b.n	d42a4 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d42e6:	4620      	mov	r0, r4
   d42e8:	f006 fd64 	bl	dadb4 <atoi>
   d42ec:	28c9      	cmp	r0, #201	; 0xc9
   d42ee:	d0ec      	beq.n	d42ca <_Z14UbidotsHandlerPKcS0_+0x3a>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d42f0:	4620      	mov	r0, r4
   d42f2:	f006 fd5f 	bl	dadb4 <atoi>
   d42f6:	4a0b      	ldr	r2, [pc, #44]	; (d4324 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d42f8:	4603      	mov	r3, r0
   d42fa:	2140      	movs	r1, #64	; 0x40
   d42fc:	a802      	add	r0, sp, #8
   d42fe:	f004 fa81 	bl	d8804 <snprintf>
   d4302:	e7cf      	b.n	d42a4 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4304:	2003e58c 	.word	0x2003e58c
   d4308:	000db0e0 	.word	0x000db0e0
   d430c:	2003e260 	.word	0x2003e260
   d4310:	000db117 	.word	0x000db117
   d4314:	2003e54c 	.word	0x2003e54c
   d4318:	000db0e8 	.word	0x000db0e8
   d431c:	2003e5b0 	.word	0x2003e5b0
   d4320:	2003e2fe 	.word	0x2003e2fe
   d4324:	000db0fa 	.word	0x000db0fa

000d4328 <_Z14setverboseMode6String>:
{
   d4328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d432a:	4919      	ldr	r1, [pc, #100]	; (d4390 <_Z14setverboseMode6String+0x68>)
   d432c:	4604      	mov	r4, r0
   d432e:	f005 fab0 	bl	d9892 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4332:	4605      	mov	r5, r0
   d4334:	b1b0      	cbz	r0, d4364 <_Z14setverboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d4336:	4b17      	ldr	r3, [pc, #92]	; (d4394 <_Z14setverboseMode6String+0x6c>)
   d4338:	2401      	movs	r4, #1
   d433a:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d433c:	4b16      	ldr	r3, [pc, #88]	; (d4398 <_Z14setverboseMode6String+0x70>)
   d433e:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4340:	f004 f9a0 	bl	d8684 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4344:	b910      	cbnz	r0, d434c <_Z14setverboseMode6String+0x24>
    return 1;
   d4346:	2001      	movs	r0, #1
}
   d4348:	b003      	add	sp, #12
   d434a:	bd30      	pop	{r4, r5, pc}
   d434c:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d434e:	f88d 3000 	strb.w	r3, [sp]
   d4352:	4b12      	ldr	r3, [pc, #72]	; (d439c <_Z14setverboseMode6String+0x74>)
   d4354:	4a12      	ldr	r2, [pc, #72]	; (d43a0 <_Z14setverboseMode6String+0x78>)
   d4356:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4358:	4912      	ldr	r1, [pc, #72]	; (d43a4 <_Z14setverboseMode6String+0x7c>)
   d435a:	4813      	ldr	r0, [pc, #76]	; (d43a8 <_Z14setverboseMode6String+0x80>)
   d435c:	f7ff ff8a 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4360:	4620      	mov	r0, r4
   d4362:	e7f1      	b.n	d4348 <_Z14setverboseMode6String+0x20>
   d4364:	4911      	ldr	r1, [pc, #68]	; (d43ac <_Z14setverboseMode6String+0x84>)
   d4366:	4620      	mov	r0, r4
   d4368:	f005 fa93 	bl	d9892 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d436c:	2800      	cmp	r0, #0
   d436e:	d0eb      	beq.n	d4348 <_Z14setverboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d4370:	4b08      	ldr	r3, [pc, #32]	; (d4394 <_Z14setverboseMode6String+0x6c>)
   d4372:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4374:	4b08      	ldr	r3, [pc, #32]	; (d4398 <_Z14setverboseMode6String+0x70>)
   d4376:	2401      	movs	r4, #1
   d4378:	701c      	strb	r4, [r3, #0]
   d437a:	f004 f983 	bl	d8684 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d437e:	2800      	cmp	r0, #0
   d4380:	d0e1      	beq.n	d4346 <_Z14setverboseMode6String+0x1e>
   d4382:	4b06      	ldr	r3, [pc, #24]	; (d439c <_Z14setverboseMode6String+0x74>)
   d4384:	f88d 5000 	strb.w	r5, [sp]
   d4388:	781b      	ldrb	r3, [r3, #0]
   d438a:	4a09      	ldr	r2, [pc, #36]	; (d43b0 <_Z14setverboseMode6String+0x88>)
   d438c:	e7e4      	b.n	d4358 <_Z14setverboseMode6String+0x30>
   d438e:	bf00      	nop
   d4390:	000db0a0 	.word	0x000db0a0
   d4394:	2003e58c 	.word	0x2003e58c
   d4398:	2003e5b0 	.word	0x2003e5b0
   d439c:	2003e260 	.word	0x2003e260
   d43a0:	000db124 	.word	0x000db124
   d43a4:	000db147 	.word	0x000db147
   d43a8:	2003e54c 	.word	0x2003e54c
   d43ac:	000db135 	.word	0x000db135
   d43b0:	000db137 	.word	0x000db137
   d43b4:	00000000 	.word	0x00000000

000d43b8 <_Z11setTimeZone6String>:
{
   d43b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d43bc:	b0c8      	sub	sp, #288	; 0x120
   d43be:	4680      	mov	r8, r0
  Particle.syncTime();                                                        // Set the clock each day
   d43c0:	f7ff fed8 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d43c4:	f7ff ff3c 	bl	d4240 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d43c8:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d43cc:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d43ce:	f247 562f 	movw	r6, #29999	; 0x752f
   d43d2:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d43d4:	f7ff ff34 	bl	d4240 <_ZN11SystemClass6millisEv>
   d43d8:	ebb0 0409 	subs.w	r4, r0, r9
   d43dc:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d43e0:	42af      	cmp	r7, r5
   d43e2:	bf08      	it	eq
   d43e4:	42a6      	cmpeq	r6, r4
   d43e6:	d305      	bcc.n	d43f4 <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d43e8:	f7ff fece 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d43ec:	b910      	cbnz	r0, d43f4 <_Z11setTimeZone6String+0x3c>
            spark_process();
   d43ee:	f004 f939 	bl	d8664 <spark_process>
        while (_while() && !_condition()) {
   d43f2:	e7ef      	b.n	d43d4 <_Z11setTimeZone6String+0x1c>
   d43f4:	f7ff fec8 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d43f8:	f8d8 0000 	ldr.w	r0, [r8]
   d43fc:	220a      	movs	r2, #10
   d43fe:	a903      	add	r1, sp, #12
   d4400:	f006 fe18 	bl	db034 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4404:	f100 030c 	add.w	r3, r0, #12
   d4408:	b2db      	uxtb	r3, r3
   d440a:	2b18      	cmp	r3, #24
   d440c:	d848      	bhi.n	d44a0 <_Z11setTimeZone6String+0xe8>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d440e:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4410:	ee07 5a90 	vmov	s15, r5
   d4414:	4b26      	ldr	r3, [pc, #152]	; (d44b0 <_Z11setTimeZone6String+0xf8>)
   d4416:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d441a:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d441c:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d4420:	f005 fbf4 	bl	d9c0c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4424:	4b23      	ldr	r3, [pc, #140]	; (d44b4 <_Z11setTimeZone6String+0xfc>)
   d4426:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4428:	f005 fd9e 	bl	d9f68 <_ZN9TimeClass5localEv>
   d442c:	4606      	mov	r6, r0
   d442e:	f005 fd56 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4432:	1a30      	subs	r0, r6, r0
   d4434:	f006 f978 	bl	da728 <__aeabi_i2d>
   d4438:	a31b      	add	r3, pc, #108	; (adr r3, d44a8 <_Z11setTimeZone6String+0xf0>)
   d443a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d443e:	f006 fb07 	bl	daa50 <__aeabi_ddiv>
   d4442:	4a1d      	ldr	r2, [pc, #116]	; (d44b8 <_Z11setTimeZone6String+0x100>)
   d4444:	e9cd 0100 	strd	r0, r1, [sp]
   d4448:	210a      	movs	r1, #10
   d444a:	481c      	ldr	r0, [pc, #112]	; (d44bc <_Z11setTimeZone6String+0x104>)
   d444c:	f004 f9da 	bl	d8804 <snprintf>
   d4450:	f004 f918 	bl	d8684 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4454:	b310      	cbz	r0, d449c <_Z11setTimeZone6String+0xe4>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d4456:	462b      	mov	r3, r5
   d4458:	4a19      	ldr	r2, [pc, #100]	; (d44c0 <_Z11setTimeZone6String+0x108>)
   d445a:	4d1a      	ldr	r5, [pc, #104]	; (d44c4 <_Z11setTimeZone6String+0x10c>)
   d445c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4460:	2600      	movs	r6, #0
   d4462:	a808      	add	r0, sp, #32
   d4464:	f004 f9ce 	bl	d8804 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d4468:	f88d 6000 	strb.w	r6, [sp]
   d446c:	4916      	ldr	r1, [pc, #88]	; (d44c8 <_Z11setTimeZone6String+0x110>)
   d446e:	782b      	ldrb	r3, [r5, #0]
   d4470:	4816      	ldr	r0, [pc, #88]	; (d44cc <_Z11setTimeZone6String+0x114>)
   d4472:	aa08      	add	r2, sp, #32
   d4474:	f7ff fefe 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4478:	f005 fd31 	bl	d9ede <_ZN9TimeClass3nowEv>
   d447c:	4602      	mov	r2, r0
   d447e:	17c3      	asrs	r3, r0, #31
   d4480:	a804      	add	r0, sp, #16
   d4482:	f005 fc29 	bl	d9cd8 <_ZN9TimeClass7timeStrEx>
   d4486:	f88d 6000 	strb.w	r6, [sp]
   d448a:	782b      	ldrb	r3, [r5, #0]
   d448c:	9a04      	ldr	r2, [sp, #16]
   d448e:	490e      	ldr	r1, [pc, #56]	; (d44c8 <_Z11setTimeZone6String+0x110>)
   d4490:	480e      	ldr	r0, [pc, #56]	; (d44cc <_Z11setTimeZone6String+0x114>)
   d4492:	f7ff feef 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4496:	a804      	add	r0, sp, #16
   d4498:	f005 f982 	bl	d97a0 <_ZN6StringD1Ev>
  return 1;
   d449c:	4620      	mov	r0, r4
   d449e:	e000      	b.n	d44a2 <_Z11setTimeZone6String+0xea>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44a0:	2000      	movs	r0, #0
}
   d44a2:	b048      	add	sp, #288	; 0x120
   d44a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d44a8:	00000000 	.word	0x00000000
   d44ac:	40ac2000 	.word	0x40ac2000
   d44b0:	2003e58c 	.word	0x2003e58c
   d44b4:	2003e5b0 	.word	0x2003e5b0
   d44b8:	000db14c 	.word	0x000db14c
   d44bc:	2003e2f4 	.word	0x2003e2f4
   d44c0:	000db156 	.word	0x000db156
   d44c4:	2003e260 	.word	0x2003e260
   d44c8:	000db16a 	.word	0x000db16a
   d44cc:	2003e54c 	.word	0x2003e54c

000d44d0 <_Z17setSampleInterval6String>:
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d44d0:	b530      	push	{r4, r5, lr}
   d44d2:	b0c5      	sub	sp, #276	; 0x114
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d44d4:	220a      	movs	r2, #10
   d44d6:	6800      	ldr	r0, [r0, #0]
   d44d8:	a903      	add	r1, sp, #12
   d44da:	f006 fdab 	bl	db034 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d44de:	b2c3      	uxtb	r3, r0
   d44e0:	1e5a      	subs	r2, r3, #1
   d44e2:	2a3b      	cmp	r2, #59	; 0x3b
   d44e4:	d81f      	bhi.n	d4526 <_Z17setSampleInterval6String+0x56>
  systemStatusWriteNeeded = true;
   d44e6:	4a11      	ldr	r2, [pc, #68]	; (d452c <_Z17setSampleInterval6String+0x5c>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d44e8:	4d11      	ldr	r5, [pc, #68]	; (d4530 <_Z17setSampleInterval6String+0x60>)
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d44ea:	4812      	ldr	r0, [pc, #72]	; (d4534 <_Z17setSampleInterval6String+0x64>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d44ec:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d44ee:	2401      	movs	r4, #1
   d44f0:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d44f2:	210c      	movs	r1, #12
   d44f4:	4a10      	ldr	r2, [pc, #64]	; (d4538 <_Z17setSampleInterval6String+0x68>)
   d44f6:	f004 f985 	bl	d8804 <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d44fa:	79ab      	ldrb	r3, [r5, #6]
   d44fc:	4a0f      	ldr	r2, [pc, #60]	; (d453c <_Z17setSampleInterval6String+0x6c>)
   d44fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4502:	a804      	add	r0, sp, #16
   d4504:	f004 f97e 	bl	d8804 <snprintf>
   d4508:	f004 f8bc 	bl	d8684 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d450c:	b148      	cbz	r0, d4522 <_Z17setSampleInterval6String+0x52>
   d450e:	2300      	movs	r3, #0
    publishQueue.publish("Interval", data, PRIVATE);
   d4510:	f88d 3000 	strb.w	r3, [sp]
   d4514:	4b0a      	ldr	r3, [pc, #40]	; (d4540 <_Z17setSampleInterval6String+0x70>)
   d4516:	490b      	ldr	r1, [pc, #44]	; (d4544 <_Z17setSampleInterval6String+0x74>)
   d4518:	781b      	ldrb	r3, [r3, #0]
   d451a:	480b      	ldr	r0, [pc, #44]	; (d4548 <_Z17setSampleInterval6String+0x78>)
   d451c:	aa04      	add	r2, sp, #16
   d451e:	f7ff fea9 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4522:	4620      	mov	r0, r4
   d4524:	e000      	b.n	d4528 <_Z17setSampleInterval6String+0x58>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4526:	2000      	movs	r0, #0
}
   d4528:	b045      	add	sp, #276	; 0x114
   d452a:	bd30      	pop	{r4, r5, pc}
   d452c:	2003e5b0 	.word	0x2003e5b0
   d4530:	2003e58c 	.word	0x2003e58c
   d4534:	2003e104 	.word	0x2003e104
   d4538:	000db186 	.word	0x000db186
   d453c:	000db16f 	.word	0x000db16f
   d4540:	2003e260 	.word	0x2003e260
   d4544:	000db323 	.word	0x000db323
   d4548:	2003e54c 	.word	0x2003e54c

000d454c <_Z9sendEventv>:
void sendEvent() {
   d454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4550:	4b23      	ldr	r3, [pc, #140]	; (d45e0 <_Z9sendEventv+0x94>)
   d4552:	4c24      	ldr	r4, [pc, #144]	; (d45e4 <_Z9sendEventv+0x98>)
   d4554:	689d      	ldr	r5, [r3, #8]
   d4556:	69a2      	ldr	r2, [r4, #24]
   d4558:	691b      	ldr	r3, [r3, #16]
void sendEvent() {
   d455a:	b0d3      	sub	sp, #332	; 0x14c
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d455c:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4560:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d4564:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4568:	9311      	str	r3, [sp, #68]	; 0x44
   d456a:	9210      	str	r2, [sp, #64]	; 0x40
   d456c:	f005 fcb7 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4570:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d4574:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d4576:	9308      	str	r3, [sp, #32]
   d4578:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d457c:	ed94 7b08 	vldr	d7, [r4, #32]
   d4580:	4b19      	ldr	r3, [pc, #100]	; (d45e8 <_Z9sendEventv+0x9c>)
   d4582:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4584:	900a      	str	r0, [sp, #40]	; 0x28
   d4586:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d458a:	e9cd 5306 	strd	r5, r3, [sp, #24]
   d458e:	9209      	str	r2, [sp, #36]	; 0x24
   d4590:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d4594:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4598:	e9cd 6700 	strd	r6, r7, [sp]
   d459c:	4a13      	ldr	r2, [pc, #76]	; (d45ec <_Z9sendEventv+0xa0>)
   d459e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45a2:	a812      	add	r0, sp, #72	; 0x48
   d45a4:	f004 f92e 	bl	d8804 <snprintf>
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d45a8:	2300      	movs	r3, #0
   d45aa:	f88d 3000 	strb.w	r3, [sp]
   d45ae:	4b10      	ldr	r3, [pc, #64]	; (d45f0 <_Z9sendEventv+0xa4>)
   d45b0:	4910      	ldr	r1, [pc, #64]	; (d45f4 <_Z9sendEventv+0xa8>)
   d45b2:	781b      	ldrb	r3, [r3, #0]
   d45b4:	4810      	ldr	r0, [pc, #64]	; (d45f8 <_Z9sendEventv+0xac>)
   d45b6:	aa12      	add	r2, sp, #72	; 0x48
   d45b8:	f7ff fe5c 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d45bc:	4b0f      	ldr	r3, [pc, #60]	; (d45fc <_Z9sendEventv+0xb0>)
   d45be:	2201      	movs	r2, #1
   d45c0:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45c2:	f003 fdfb 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d45c6:	4b0e      	ldr	r3, [pc, #56]	; (d4600 <_Z9sendEventv+0xb4>)
   d45c8:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d45ca:	f005 fc99 	bl	d9f00 <_ZN9TimeClass4hourEv>
   d45ce:	4b0d      	ldr	r3, [pc, #52]	; (d4604 <_Z9sendEventv+0xb8>)
   d45d0:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d45d2:	f005 fca1 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d45d6:	4b0c      	ldr	r3, [pc, #48]	; (d4608 <_Z9sendEventv+0xbc>)
   d45d8:	6018      	str	r0, [r3, #0]
}
   d45da:	b053      	add	sp, #332	; 0x14c
   d45dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45e0:	2003e58c 	.word	0x2003e58c
   d45e4:	2003e2b8 	.word	0x2003e2b8
   d45e8:	2003e290 	.word	0x2003e290
   d45ec:	000db191 	.word	0x000db191
   d45f0:	2003e260 	.word	0x2003e260
   d45f4:	000db221 	.word	0x000db221
   d45f8:	2003e54c 	.word	0x2003e54c
   d45fc:	2003e2fe 	.word	0x2003e2fe
   d4600:	2003e5b4 	.word	0x2003e5b4
   d4604:	2003e2ec 	.word	0x2003e2ec
   d4608:	2003e2f0 	.word	0x2003e2f0

000d460c <_Z11displayInfov>:
{
   d460c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (millis() - lastSerial >= 1000) {                                      // Don't read more than once a second
   d4610:	4c53      	ldr	r4, [pc, #332]	; (d4760 <_Z11displayInfov+0x154>)
{
   d4612:	b0a9      	sub	sp, #164	; 0xa4
   d4614:	f003 fdd2 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= 1000) {                                      // Don't read more than once a second
   d4618:	6823      	ldr	r3, [r4, #0]
   d461a:	1ac0      	subs	r0, r0, r3
   d461c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4620:	d32a      	bcc.n	d4678 <_Z11displayInfov+0x6c>
   d4622:	f003 fdcb 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
		if (gps.gpsFix()) {
   d4626:	4f4f      	ldr	r7, [pc, #316]	; (d4764 <_Z11displayInfov+0x158>)
		lastSerial = millis();
   d4628:	6020      	str	r0, [r4, #0]
        os_thread_scheduling(false, NULL);
   d462a:	2100      	movs	r1, #0
		if (gps.gpsFix()) {
   d462c:	687c      	ldr	r4, [r7, #4]
   d462e:	4608      	mov	r0, r1
   d4630:	f003 fd5c 	bl	d80ec <os_thread_scheduling>
	    	return location;
   d4634:	7826      	ldrb	r6, [r4, #0]
   d4636:	6b64      	ldr	r4, [r4, #52]	; 0x34
        os_thread_scheduling(true, NULL);
   d4638:	2100      	movs	r1, #0
   d463a:	2001      	movs	r0, #1
   d463c:	f003 fd56 	bl	d80ec <os_thread_scheduling>
	bool isValid() const    { return valid; }
   d4640:	463d      	mov	r5, r7
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4642:	b9e6      	cbnz	r6, d467e <_Z11displayInfov+0x72>
			snprintf(buf, sizeof(buf), "no location satellites:%d", gps.getSatellites());
   d4644:	6868      	ldr	r0, [r5, #4]
   d4646:	f7ff fdb0 	bl	d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d464a:	4a47      	ldr	r2, [pc, #284]	; (d4768 <_Z11displayInfov+0x15c>)
   d464c:	4603      	mov	r3, r0
   d464e:	2180      	movs	r1, #128	; 0x80
   d4650:	a808      	add	r0, sp, #32
   d4652:	f004 f8d7 	bl	d8804 <snprintf>
		Log.info(buf);
   d4656:	4845      	ldr	r0, [pc, #276]	; (d476c <_Z11displayInfov+0x160>)
   d4658:	a908      	add	r1, sp, #32
   d465a:	f7ff fdf4 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
		if (sysStatus.verboseMode) publishQueue.publish("gps", buf, PRIVATE);
   d465e:	4b44      	ldr	r3, [pc, #272]	; (d4770 <_Z11displayInfov+0x164>)
   d4660:	791b      	ldrb	r3, [r3, #4]
   d4662:	b14b      	cbz	r3, d4678 <_Z11displayInfov+0x6c>
   d4664:	2300      	movs	r3, #0
   d4666:	f88d 3000 	strb.w	r3, [sp]
   d466a:	4b42      	ldr	r3, [pc, #264]	; (d4774 <_Z11displayInfov+0x168>)
   d466c:	4942      	ldr	r1, [pc, #264]	; (d4778 <_Z11displayInfov+0x16c>)
   d466e:	781b      	ldrb	r3, [r3, #0]
   d4670:	4842      	ldr	r0, [pc, #264]	; (d477c <_Z11displayInfov+0x170>)
   d4672:	aa08      	add	r2, sp, #32
   d4674:	f7ff fdfe 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4678:	b029      	add	sp, #164	; 0xa4
   d467a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d467e:	f003 fd9d 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d4682:	f242 730f 	movw	r3, #9999	; 0x270f
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4686:	1b00      	subs	r0, r0, r4
   d4688:	4298      	cmp	r0, r3
   d468a:	d8db      	bhi.n	d4644 <_Z11displayInfov+0x38>
      current.latitude = gps.readLatDeg();
   d468c:	687d      	ldr	r5, [r7, #4]
   d468e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; d4788 <_Z11displayInfov+0x17c>
        os_thread_scheduling(false, NULL);
   d4692:	2100      	movs	r1, #0
   d4694:	4608      	mov	r0, r1
   d4696:	f003 fd29 	bl	d80ec <os_thread_scheduling>
	    	return location;
   d469a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d469c:	ac08      	add	r4, sp, #32
   d469e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46a8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d46ac:	e884 0003 	stmia.w	r4, {r0, r1}
        os_thread_scheduling(true, NULL);
   d46b0:	2100      	movs	r1, #0
   d46b2:	2001      	movs	r0, #1
   d46b4:	f003 fd1a 	bl	d80ec <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d46b8:	a808      	add	r0, sp, #32
   d46ba:	f002 fa59 	bl	d6b70 <_ZN15TinyGPSLocation3latEv>
   d46be:	ec51 0b10 	vmov	r0, r1, d0
   d46c2:	f006 facd 	bl	dac60 <__aeabi_d2f>
   d46c6:	f006 f841 	bl	da74c <__aeabi_f2d>
      current.longitude = gps.readLonDeg();
   d46ca:	687d      	ldr	r5, [r7, #4]
      current.latitude = gps.readLatDeg();
   d46cc:	e9c8 0108 	strd	r0, r1, [r8, #32]
        os_thread_scheduling(false, NULL);
   d46d0:	2100      	movs	r1, #0
   d46d2:	4608      	mov	r0, r1
   d46d4:	f003 fd0a 	bl	d80ec <os_thread_scheduling>
   d46d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46da:	ae08      	add	r6, sp, #32
   d46dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d46de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d46e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d46e6:	e895 0003 	ldmia.w	r5, {r0, r1}
   d46ea:	e884 0003 	stmia.w	r4, {r0, r1}
        os_thread_scheduling(true, NULL);
   d46ee:	2100      	movs	r1, #0
   d46f0:	2001      	movs	r0, #1
   d46f2:	f003 fcfb 	bl	d80ec <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d46f6:	a808      	add	r0, sp, #32
   d46f8:	f002 fa5e 	bl	d6bb8 <_ZN15TinyGPSLocation3lngEv>
   d46fc:	ec51 0b10 	vmov	r0, r1, d0
   d4700:	f006 faae 	bl	dac60 <__aeabi_d2f>
      current.longitude = gps.readLonDeg();
   d4704:	f006 f822 	bl	da74c <__aeabi_f2d>
   d4708:	460d      	mov	r5, r1
        os_thread_scheduling(false, NULL);
   d470a:	2100      	movs	r1, #0
   d470c:	4604      	mov	r4, r0
			snprintf(buf, sizeof(buf), "location: %f, %f altitude: %4.1fm %d sattelites", current.latitude, current.longitude, gps.getAltitude(), gps.getSatellites());
   d470e:	687e      	ldr	r6, [r7, #4]
   d4710:	4608      	mov	r0, r1
      current.longitude = gps.readLonDeg();
   d4712:	e9c8 450a 	strd	r4, r5, [r8, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location: %f, %f altitude: %4.1fm %d sattelites", current.latitude, current.longitude, gps.getAltitude(), gps.getSatellites());
   d4716:	e9d8 8908 	ldrd	r8, r9, [r8, #32]
   d471a:	f003 fce7 	bl	d80ec <os_thread_scheduling>
        os_thread_scheduling(true, NULL);
   d471e:	2100      	movs	r1, #0
   d4720:	2001      	movs	r0, #1
	    	return altitude;
   d4722:	f8d6 6080 	ldr.w	r6, [r6, #128]	; 0x80
   d4726:	f003 fce1 	bl	d80ec <os_thread_scheduling>
   d472a:	6878      	ldr	r0, [r7, #4]
   d472c:	f7ff fd3d 	bl	d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4730:	9006      	str	r0, [sp, #24]
	double meters()       { return value() / 100.0; }
   d4732:	4630      	mov	r0, r6
   d4734:	f005 fff8 	bl	da728 <__aeabi_i2d>
   d4738:	4b11      	ldr	r3, [pc, #68]	; (d4780 <_Z11displayInfov+0x174>)
   d473a:	2200      	movs	r2, #0
   d473c:	f006 f988 	bl	daa50 <__aeabi_ddiv>
		return gpsData.getAltitude().meters();
   d4740:	f006 fa8e 	bl	dac60 <__aeabi_d2f>
   d4744:	f006 f802 	bl	da74c <__aeabi_f2d>
   d4748:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d474c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4750:	e9cd 8900 	strd	r8, r9, [sp]
   d4754:	4a0b      	ldr	r2, [pc, #44]	; (d4784 <_Z11displayInfov+0x178>)
   d4756:	2180      	movs	r1, #128	; 0x80
   d4758:	a808      	add	r0, sp, #32
   d475a:	f004 f853 	bl	d8804 <snprintf>
   d475e:	e77a      	b.n	d4656 <_Z11displayInfov+0x4a>
   d4760:	2003e264 	.word	0x2003e264
   d4764:	2003e32c 	.word	0x2003e32c
   d4768:	000db23c 	.word	0x000db23c
   d476c:	2003e624 	.word	0x2003e624
   d4770:	2003e58c 	.word	0x2003e58c
   d4774:	2003e260 	.word	0x2003e260
   d4778:	000db286 	.word	0x000db286
   d477c:	2003e54c 	.word	0x2003e54c
   d4780:	40590000 	.word	0x40590000
   d4784:	000db256 	.word	0x000db256
   d4788:	2003e2b8 	.word	0x2003e2b8
   d478c:	00000000 	.word	0x00000000

000d4790 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d4790:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4792:	4605      	mov	r5, r0
  int   i = 0;
   d4794:	2400      	movs	r4, #0
    _temp = ds18b20.getTemperature(addr);
   d4796:	4812      	ldr	r0, [pc, #72]	; (d47e0 <_Z7getTempPh+0x50>)
   d4798:	2200      	movs	r2, #0
   d479a:	4629      	mov	r1, r5
   d479c:	f002 fca6 	bl	d70ec <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d47a0:	480f      	ldr	r0, [pc, #60]	; (d47e0 <_Z7getTempPh+0x50>)
    _temp = ds18b20.getTemperature(addr);
   d47a2:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d47a6:	f002 fd7d 	bl	d72a4 <_ZN7DS18B208crcCheckEv>
   d47aa:	ed9d 0a01 	vldr	s0, [sp, #4]
   d47ae:	b928      	cbnz	r0, d47bc <_Z7getTempPh+0x2c>
   d47b0:	3401      	adds	r4, #1
   d47b2:	2c04      	cmp	r4, #4
   d47b4:	d1ef      	bne.n	d4796 <_Z7getTempPh+0x6>
  else _temp = NAN;
   d47b6:	ed9f 0b08 	vldr	d0, [pc, #32]	; d47d8 <_Z7getTempPh+0x48>
  return _temp;
   d47ba:	e00a      	b.n	d47d2 <_Z7getTempPh+0x42>
  if (i < MAXRETRY) {
   d47bc:	2c03      	cmp	r4, #3
   d47be:	d0fa      	beq.n	d47b6 <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d47c0:	4807      	ldr	r0, [pc, #28]	; (d47e0 <_Z7getTempPh+0x50>)
   d47c2:	f002 fd55 	bl	d7270 <_ZN7DS18B2019convertToFahrenheitEf>
   d47c6:	ee10 0a10 	vmov	r0, s0
   d47ca:	f005 ffbf 	bl	da74c <__aeabi_f2d>
   d47ce:	ec41 0b10 	vmov	d0, r0, r1
}
   d47d2:	b003      	add	sp, #12
   d47d4:	bd30      	pop	{r4, r5, pc}
   d47d6:	bf00      	nop
   d47d8:	00000000 	.word	0x00000000
   d47dc:	7ff80000 	.word	0x7ff80000
   d47e0:	2003e300 	.word	0x2003e300

000d47e4 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d47e4:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d47e6:	4d19      	ldr	r5, [pc, #100]	; (d484c <_Z17getSignalStrengthv+0x68>)
   d47e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d47ea:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d47ec:	ac04      	add	r4, sp, #16
   d47ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d47f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47f4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d47f8:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d47fc:	4914      	ldr	r1, [pc, #80]	; (d4850 <_Z17getSignalStrengthv+0x6c>)
   d47fe:	a80e      	add	r0, sp, #56	; 0x38
   d4800:	f004 f8b6 	bl	d8970 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4804:	a80e      	add	r0, sp, #56	; 0x38
   d4806:	f004 f906 	bl	d8a16 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d480a:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d480c:	a80e      	add	r0, sp, #56	; 0x38
   d480e:	f004 f90b 	bl	d8a28 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4812:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4814:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4818:	f004 f936 	bl	d8a88 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d481c:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d481e:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4822:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4826:	f005 ff91 	bl	da74c <__aeabi_f2d>
   d482a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d482e:	4628      	mov	r0, r5
   d4830:	f005 ff8c 	bl	da74c <__aeabi_f2d>
   d4834:	e9cd 0100 	strd	r0, r1, [sp]
   d4838:	4a06      	ldr	r2, [pc, #24]	; (d4854 <_Z17getSignalStrengthv+0x70>)
   d483a:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d483e:	4806      	ldr	r0, [pc, #24]	; (d4858 <_Z17getSignalStrengthv+0x74>)
   d4840:	2140      	movs	r1, #64	; 0x40
   d4842:	f003 ffdf 	bl	d8804 <snprintf>
}
   d4846:	b019      	add	sp, #100	; 0x64
   d4848:	bd30      	pop	{r4, r5, pc}
   d484a:	bf00      	nop
   d484c:	000db4b0 	.word	0x000db4b0
   d4850:	2003e5ec 	.word	0x2003e5ec
   d4854:	000db28a 	.word	0x000db28a
   d4858:	2003e210 	.word	0x2003e210

000d485c <_Z14setPowerConfigv>:
int setPowerConfig() {
   d485c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d485e:	2420      	movs	r4, #32
   d4860:	b090      	sub	sp, #64	; 0x40
   d4862:	4622      	mov	r2, r4
   d4864:	2100      	movs	r1, #0
   d4866:	4668      	mov	r0, sp
   d4868:	f006 faf4 	bl	dae54 <memset>
   d486c:	4622      	mov	r2, r4
   d486e:	2100      	movs	r1, #0
   d4870:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4874:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4878:	f006 faec 	bl	dae54 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d487c:	2100      	movs	r1, #0
   d487e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4882:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4886:	f003 febf 	bl	d8608 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d488a:	f241 0370 	movw	r3, #4208	; 0x1070
   d488e:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4892:	4b08      	ldr	r3, [pc, #32]	; (d48b4 <_Z14setPowerConfigv+0x58>)
   d4894:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4896:	f241 0310 	movw	r3, #4112	; 0x1010
   d489a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d489e:	9b00      	ldr	r3, [sp, #0]
   d48a0:	2100      	movs	r1, #0
   d48a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d48a6:	4668      	mov	r0, sp
   d48a8:	9300      	str	r3, [sp, #0]
   d48aa:	f003 fead 	bl	d8608 <system_power_management_set_config>
}
   d48ae:	b010      	add	sp, #64	; 0x40
   d48b0:	bd10      	pop	{r4, pc}
   d48b2:	bf00      	nop
   d48b4:	03840384 	.word	0x03840384

000d48b8 <_Z17connectToParticlev>:
bool connectToParticle() {
   d48b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d48bc:	481d      	ldr	r0, [pc, #116]	; (d4934 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48be:	f8df a080 	ldr.w	sl, [pc, #128]	; d4940 <_Z17connectToParticlev+0x88>
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	2300      	movs	r3, #0
   d48c6:	461a      	mov	r2, r3
   d48c8:	4619      	mov	r1, r3
   d48ca:	f003 ff4b 	bl	d8764 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d48ce:	f003 fed1 	bl	d8674 <spark_cloud_flag_connect>
   d48d2:	f44f 7496 	mov.w	r4, #300	; 0x12c
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48d6:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d48da:	f240 38e7 	movw	r8, #999	; 0x3e7
   d48de:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d48e2:	f7ff fcad 	bl	d4240 <_ZN11SystemClass6millisEv>
   d48e6:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48e8:	f7ff fcaa 	bl	d4240 <_ZN11SystemClass6millisEv>
   d48ec:	1b46      	subs	r6, r0, r5
   d48ee:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d48f2:	45b9      	cmp	r9, r7
   d48f4:	bf08      	it	eq
   d48f6:	45b0      	cmpeq	r8, r6
   d48f8:	d305      	bcc.n	d4906 <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48fa:	f003 fec3 	bl	d8684 <spark_cloud_flag_connected>
   d48fe:	b910      	cbnz	r0, d4906 <_Z17connectToParticlev+0x4e>
            spark_process();
   d4900:	f003 feb0 	bl	d8664 <spark_process>
        while (_while() && !_condition()) {
   d4904:	e7f0      	b.n	d48e8 <_Z17connectToParticlev+0x30>
   d4906:	f003 febd 	bl	d8684 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d490a:	b120      	cbz	r0, d4916 <_Z17connectToParticlev+0x5e>
   d490c:	f003 feba 	bl	d8684 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4910:	b950      	cbnz	r0, d4928 <_Z17connectToParticlev+0x70>
}
   d4912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d4916:	f003 fc51 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d491a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d491e:	f003 fea1 	bl	d8664 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4922:	3c01      	subs	r4, #1
   d4924:	d1dd      	bne.n	d48e2 <_Z17connectToParticlev+0x2a>
   d4926:	e7f1      	b.n	d490c <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
   d4928:	4a03      	ldr	r2, [pc, #12]	; (d4938 <_Z17connectToParticlev+0x80>)
   d492a:	2301      	movs	r3, #1
   d492c:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d492e:	4a03      	ldr	r2, [pc, #12]	; (d493c <_Z17connectToParticlev+0x84>)
   d4930:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4932:	e7ee      	b.n	d4912 <_Z17connectToParticlev+0x5a>
   d4934:	2003e5ec 	.word	0x2003e5ec
   d4938:	2003e58c 	.word	0x2003e58c
   d493c:	2003e5b0 	.word	0x2003e5b0
   d4940:	2003e7d8 	.word	0x2003e7d8

000d4944 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4944:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4946:	f003 fe9d 	bl	d8684 <spark_cloud_flag_connected>
  return !Particle.connected();
   d494a:	f080 0001 	eor.w	r0, r0, #1
}
   d494e:	b2c0      	uxtb	r0, r0
   d4950:	bd08      	pop	{r3, pc}
	...

000d4954 <_Z22disconnectFromParticlev>:
{
   d4954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4958:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d495a:	2600      	movs	r6, #0
  Particle.disconnect();
   d495c:	a801      	add	r0, sp, #4
   d495e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d4962:	f88d 600c 	strb.w	r6, [sp, #12]
   d4966:	f004 f960 	bl	d8c2a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d496a:	f7ff fc69 	bl	d4240 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d496e:	46b1      	mov	r9, r6
        const system_tick_t start = millis();
   d4970:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4972:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4976:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4978:	f7ff fc62 	bl	d4240 <_ZN11SystemClass6millisEv>
   d497c:	ebb0 0408 	subs.w	r4, r0, r8
   d4980:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4984:	42af      	cmp	r7, r5
   d4986:	bf08      	it	eq
   d4988:	42a6      	cmpeq	r6, r4
   d498a:	d305      	bcc.n	d4998 <_Z22disconnectFromParticlev+0x44>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d498c:	f7ff ffda 	bl	d4944 <_Z12notConnectedv>
   d4990:	b910      	cbnz	r0, d4998 <_Z22disconnectFromParticlev+0x44>
            spark_process();
   d4992:	f003 fe67 	bl	d8664 <spark_process>
        while (_while() && !_condition()) {
   d4996:	e7ef      	b.n	d4978 <_Z22disconnectFromParticlev+0x24>
   d4998:	f7ff ffd4 	bl	d4944 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d499c:	480a      	ldr	r0, [pc, #40]	; (d49c8 <_Z22disconnectFromParticlev+0x74>)
   d499e:	2300      	movs	r3, #0
   d49a0:	4619      	mov	r1, r3
   d49a2:	461a      	mov	r2, r3
   d49a4:	6840      	ldr	r0, [r0, #4]
   d49a6:	f003 fee5 	bl	d8774 <network_off>
  sysStatus.connectedStatus = false;
   d49aa:	4b08      	ldr	r3, [pc, #32]	; (d49cc <_Z22disconnectFromParticlev+0x78>)
   d49ac:	2200      	movs	r2, #0
   d49ae:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d49b0:	4b07      	ldr	r3, [pc, #28]	; (d49d0 <_Z22disconnectFromParticlev+0x7c>)
   d49b2:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d49b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d49b8:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d49ba:	f003 ff6b 	bl	d8894 <delay>
}
   d49be:	4620      	mov	r0, r4
   d49c0:	b005      	add	sp, #20
   d49c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d49c6:	bf00      	nop
   d49c8:	2003e5ec 	.word	0x2003e5ec
   d49cc:	2003e58c 	.word	0x2003e58c
   d49d0:	2003e5b0 	.word	0x2003e5b0

000d49d4 <_Z22publishStateTransitionv>:
{
   d49d4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49d6:	4d11      	ldr	r5, [pc, #68]	; (d4a1c <_Z22publishStateTransitionv+0x48>)
   d49d8:	4c11      	ldr	r4, [pc, #68]	; (d4a20 <_Z22publishStateTransitionv+0x4c>)
   d49da:	4912      	ldr	r1, [pc, #72]	; (d4a24 <_Z22publishStateTransitionv+0x50>)
   d49dc:	782a      	ldrb	r2, [r5, #0]
   d49de:	7820      	ldrb	r0, [r4, #0]
{
   d49e0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49e2:	230e      	movs	r3, #14
   d49e4:	fb03 1202 	mla	r2, r3, r2, r1
   d49e8:	9200      	str	r2, [sp, #0]
   d49ea:	fb03 1300 	mla	r3, r3, r0, r1
   d49ee:	4a0e      	ldr	r2, [pc, #56]	; (d4a28 <_Z22publishStateTransitionv+0x54>)
   d49f0:	2128      	movs	r1, #40	; 0x28
   d49f2:	a802      	add	r0, sp, #8
   d49f4:	f003 ff06 	bl	d8804 <snprintf>
  oldState = state;
   d49f8:	782b      	ldrb	r3, [r5, #0]
   d49fa:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49fc:	f003 fe42 	bl	d8684 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4a00:	b148      	cbz	r0, d4a16 <_Z22publishStateTransitionv+0x42>
   d4a02:	2300      	movs	r3, #0
   d4a04:	f88d 3000 	strb.w	r3, [sp]
   d4a08:	4b08      	ldr	r3, [pc, #32]	; (d4a2c <_Z22publishStateTransitionv+0x58>)
   d4a0a:	4909      	ldr	r1, [pc, #36]	; (d4a30 <_Z22publishStateTransitionv+0x5c>)
   d4a0c:	781b      	ldrb	r3, [r3, #0]
   d4a0e:	4809      	ldr	r0, [pc, #36]	; (d4a34 <_Z22publishStateTransitionv+0x60>)
   d4a10:	aa02      	add	r2, sp, #8
   d4a12:	f7ff fc2f 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4a16:	b00d      	add	sp, #52	; 0x34
   d4a18:	bd30      	pop	{r4, r5, pc}
   d4a1a:	bf00      	nop
   d4a1c:	2003e588 	.word	0x2003e588
   d4a20:	2003e548 	.word	0x2003e548
   d4a24:	2003e110 	.word	0x2003e110
   d4a28:	000db2a3 	.word	0x000db2a3
   d4a2c:	2003e260 	.word	0x2003e260
   d4a30:	000db2b1 	.word	0x000db2b1
   d4a34:	2003e54c 	.word	0x2003e54c

000d4a38 <_Z14fullModemResetv>:
void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4a38:	b530      	push	{r4, r5, lr}
   d4a3a:	b085      	sub	sp, #20
        graceful_(graceful) {
   d4a3c:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d4a3e:	a801      	add	r0, sp, #4
   d4a40:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4a44:	f88d 300c 	strb.w	r3, [sp, #12]
   d4a48:	f004 f8ef 	bl	d8c2a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d4a4c:	f003 fbb6 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
	while(Particle.connected() && millis() - startTime < 15000) {
   d4a50:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4a54:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a56:	f003 fe15 	bl	d8684 <spark_cloud_flag_connected>
   d4a5a:	b140      	cbz	r0, d4a6e <_Z14fullModemResetv+0x36>
   d4a5c:	f003 fbae 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d4a60:	1b00      	subs	r0, r0, r4
   d4a62:	42a8      	cmp	r0, r5
   d4a64:	d803      	bhi.n	d4a6e <_Z14fullModemResetv+0x36>
		delay(100);
   d4a66:	2064      	movs	r0, #100	; 0x64
   d4a68:	f003 ff14 	bl	d8894 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
   d4a6c:	e7f3      	b.n	d4a56 <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4a6e:	2100      	movs	r1, #0
   d4a70:	4b09      	ldr	r3, [pc, #36]	; (d4a98 <_Z14fullModemResetv+0x60>)
   d4a72:	f247 5230 	movw	r2, #30000	; 0x7530
   d4a76:	4608      	mov	r0, r1
   d4a78:	f003 fb20 	bl	d80bc <cellular_command>
	delay(1000);
   d4a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a80:	f003 ff08 	bl	d8894 <delay>
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4a84:	4b05      	ldr	r3, [pc, #20]	; (d4a9c <_Z14fullModemResetv+0x64>)
   d4a86:	220a      	movs	r2, #10
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	2101      	movs	r1, #1
   d4a8c:	a801      	add	r0, sp, #4
   d4a8e:	f005 f821 	bl	d9ad4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4a92:	b005      	add	sp, #20
   d4a94:	bd30      	pop	{r4, r5, pc}
   d4a96:	bf00      	nop
   d4a98:	000db2c2 	.word	0x000db2c2
   d4a9c:	2003e25c 	.word	0x2003e25c

000d4aa0 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4aa0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4aa4:	4b17      	ldr	r3, [pc, #92]	; (d4b04 <_Z12dailyCleanupv+0x64>)
  sysStatus.verboseMode = false;
   d4aa6:	4d18      	ldr	r5, [pc, #96]	; (d4b08 <_Z12dailyCleanupv+0x68>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4aa8:	4a18      	ldr	r2, [pc, #96]	; (d4b0c <_Z12dailyCleanupv+0x6c>)
   d4aaa:	4919      	ldr	r1, [pc, #100]	; (d4b10 <_Z12dailyCleanupv+0x70>)
   d4aac:	4819      	ldr	r0, [pc, #100]	; (d4b14 <_Z12dailyCleanupv+0x74>)
   d4aae:	2400      	movs	r4, #0
   d4ab0:	f88d 4000 	strb.w	r4, [sp]
   d4ab4:	781b      	ldrb	r3, [r3, #0]
   d4ab6:	f7ff fbdd 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4aba:	712c      	strb	r4, [r5, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4abc:	f7ff fb5a 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d4ac0:	f7ff fbbe 	bl	d4240 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d4ac4:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d4ac8:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d4aca:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4ace:	f7ff fbb7 	bl	d4240 <_ZN11SystemClass6millisEv>
   d4ad2:	ebb0 060a 	subs.w	r6, r0, sl
   d4ad6:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4ada:	45b9      	cmp	r9, r7
   d4adc:	bf08      	it	eq
   d4ade:	45b0      	cmpeq	r8, r6
   d4ae0:	d305      	bcc.n	d4aee <_Z12dailyCleanupv+0x4e>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4ae2:	f7ff fb51 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4ae6:	b910      	cbnz	r0, d4aee <_Z12dailyCleanupv+0x4e>
            spark_process();
   d4ae8:	f003 fdbc 	bl	d8664 <spark_process>
        while (_while() && !_condition()) {
   d4aec:	e7ef      	b.n	d4ace <_Z12dailyCleanupv+0x2e>
   d4aee:	f7ff fb4b 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  sysStatus.resetCount = 0;
   d4af2:	2300      	movs	r3, #0
   d4af4:	612b      	str	r3, [r5, #16]
  systemStatusWriteNeeded=true;
   d4af6:	4b08      	ldr	r3, [pc, #32]	; (d4b18 <_Z12dailyCleanupv+0x78>)
   d4af8:	2201      	movs	r2, #1
   d4afa:	701a      	strb	r2, [r3, #0]
}
   d4afc:	b002      	add	sp, #8
   d4afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4b02:	bf00      	nop
   d4b04:	2003e260 	.word	0x2003e260
   d4b08:	2003e58c 	.word	0x2003e58c
   d4b0c:	000db2cf 	.word	0x000db2cf
   d4b10:	000db2d7 	.word	0x000db2d7
   d4b14:	2003e54c 	.word	0x2003e54c
   d4b18:	2003e5b0 	.word	0x2003e5b0

000d4b1c <_Z8isDSTusav>:


bool isDSTusa() {
   d4b1c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4b1e:	f005 fa07 	bl	d9f30 <_ZN9TimeClass3dayEv>
   d4b22:	4605      	mov	r5, r0
  int month = Time.month();
   d4b24:	f005 fa18 	bl	d9f58 <_ZN9TimeClass5monthEv>
   d4b28:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4b2a:	f005 fa0d 	bl	d9f48 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4b2e:	1f23      	subs	r3, r4, #4
   d4b30:	2b06      	cmp	r3, #6
   d4b32:	d90e      	bls.n	d4b52 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4b34:	1ee3      	subs	r3, r4, #3
   d4b36:	2b08      	cmp	r3, #8
   d4b38:	d80d      	bhi.n	d4b56 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4b3a:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4b3c:	1a2d      	subs	r5, r5, r0
   d4b3e:	d504      	bpl.n	d4b4a <_Z8isDSTusav+0x2e>
   d4b40:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4b42:	bf14      	ite	ne
   d4b44:	2000      	movne	r0, #0
   d4b46:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4b48:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4b4a:	2d07      	cmp	r5, #7
   d4b4c:	dd03      	ble.n	d4b56 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4b4e:	2c03      	cmp	r4, #3
   d4b50:	e7f7      	b.n	d4b42 <_Z8isDSTusav+0x26>
    return true;
   d4b52:	2001      	movs	r0, #1
   d4b54:	e7f8      	b.n	d4b48 <_Z8isDSTusav+0x2c>
    return false;
   d4b56:	2000      	movs	r0, #0
   d4b58:	e7f6      	b.n	d4b48 <_Z8isDSTusav+0x2c>
   d4b5a:	0000      	movs	r0, r0
   d4b5c:	0000      	movs	r0, r0
	...

000d4b60 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4b60:	b570      	push	{r4, r5, r6, lr}
   d4b62:	ed2d 8b02 	vpush	{d8}
   d4b66:	b0c8      	sub	sp, #288	; 0x120
   d4b68:	4605      	mov	r5, r0
  time_t t = Time.now();
   d4b6a:	f005 f9b8 	bl	d9ede <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b6e:	220a      	movs	r2, #10
  time_t t = Time.now();
   d4b70:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4b72:	a903      	add	r1, sp, #12
   d4b74:	6828      	ldr	r0, [r5, #0]
   d4b76:	f006 fa5d 	bl	db034 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4b7a:	b2c3      	uxtb	r3, r0
   d4b7c:	2b02      	cmp	r3, #2
   d4b7e:	d859      	bhi.n	d4c34 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b80:	b243      	sxtb	r3, r0
   d4b82:	ee08 3a10 	vmov	s16, r3
   d4b86:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4b8a:	eeb0 0a48 	vmov.f32	s0, s16
   d4b8e:	f005 f85d 	bl	d9c4c <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b92:	4b2d      	ldr	r3, [pc, #180]	; (d4c48 <_Z12setDSTOffset6String+0xe8>)
   d4b94:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b98:	4b2c      	ldr	r3, [pc, #176]	; (d4c4c <_Z12setDSTOffset6String+0xec>)
   d4b9a:	2201      	movs	r2, #1
   d4b9c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b9e:	ee18 0a10 	vmov	r0, s16
   d4ba2:	f005 fdd3 	bl	da74c <__aeabi_f2d>
   d4ba6:	4a2a      	ldr	r2, [pc, #168]	; (d4c50 <_Z12setDSTOffset6String+0xf0>)
   d4ba8:	e9cd 0100 	strd	r0, r1, [sp]
   d4bac:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4bb0:	a808      	add	r0, sp, #32
   d4bb2:	f003 fe27 	bl	d8804 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4bb6:	f005 f975 	bl	d9ea4 <_ZN9TimeClass7isValidEv>
   d4bba:	b128      	cbz	r0, d4bc8 <_Z12setDSTOffset6String+0x68>
   d4bbc:	f7ff ffae 	bl	d4b1c <_Z8isDSTusav>
   d4bc0:	2800      	cmp	r0, #0
   d4bc2:	d034      	beq.n	d4c2e <_Z12setDSTOffset6String+0xce>
   d4bc4:	f005 f860 	bl	d9c88 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4bc8:	f005 f9ce 	bl	d9f68 <_ZN9TimeClass5localEv>
   d4bcc:	4605      	mov	r5, r0
   d4bce:	f005 f986 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4bd2:	1a28      	subs	r0, r5, r0
   d4bd4:	f005 fda8 	bl	da728 <__aeabi_i2d>
   d4bd8:	a319      	add	r3, pc, #100	; (adr r3, d4c40 <_Z12setDSTOffset6String+0xe0>)
   d4bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bde:	f005 ff37 	bl	daa50 <__aeabi_ddiv>
   d4be2:	4a1c      	ldr	r2, [pc, #112]	; (d4c54 <_Z12setDSTOffset6String+0xf4>)
   d4be4:	e9cd 0100 	strd	r0, r1, [sp]
   d4be8:	210a      	movs	r1, #10
   d4bea:	481b      	ldr	r0, [pc, #108]	; (d4c58 <_Z12setDSTOffset6String+0xf8>)
   d4bec:	f003 fe0a 	bl	d8804 <snprintf>
   d4bf0:	f003 fd48 	bl	d8684 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4bf4:	b1c8      	cbz	r0, d4c2a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d4bf6:	4d19      	ldr	r5, [pc, #100]	; (d4c5c <_Z12setDSTOffset6String+0xfc>)
   d4bf8:	4919      	ldr	r1, [pc, #100]	; (d4c60 <_Z12setDSTOffset6String+0x100>)
   d4bfa:	481a      	ldr	r0, [pc, #104]	; (d4c64 <_Z12setDSTOffset6String+0x104>)
   d4bfc:	2600      	movs	r6, #0
   d4bfe:	f88d 6000 	strb.w	r6, [sp]
   d4c02:	782b      	ldrb	r3, [r5, #0]
   d4c04:	aa08      	add	r2, sp, #32
   d4c06:	f7ff fb35 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4c0a:	4622      	mov	r2, r4
   d4c0c:	17e3      	asrs	r3, r4, #31
   d4c0e:	a804      	add	r0, sp, #16
   d4c10:	f005 f862 	bl	d9cd8 <_ZN9TimeClass7timeStrEx>
   d4c14:	f88d 6000 	strb.w	r6, [sp]
   d4c18:	782b      	ldrb	r3, [r5, #0]
   d4c1a:	9a04      	ldr	r2, [sp, #16]
   d4c1c:	4910      	ldr	r1, [pc, #64]	; (d4c60 <_Z12setDSTOffset6String+0x100>)
   d4c1e:	4811      	ldr	r0, [pc, #68]	; (d4c64 <_Z12setDSTOffset6String+0x104>)
   d4c20:	f7ff fb28 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c24:	a804      	add	r0, sp, #16
   d4c26:	f004 fdbb 	bl	d97a0 <_ZN6StringD1Ev>
  return 1;
   d4c2a:	2001      	movs	r0, #1
   d4c2c:	e003      	b.n	d4c36 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4c2e:	f005 f837 	bl	d9ca0 <_ZN9TimeClass6endDSTEv>
   d4c32:	e7c9      	b.n	d4bc8 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4c34:	2000      	movs	r0, #0
}
   d4c36:	b048      	add	sp, #288	; 0x120
   d4c38:	ecbd 8b02 	vpop	{d8}
   d4c3c:	bd70      	pop	{r4, r5, r6, pc}
   d4c3e:	bf00      	nop
   d4c40:	00000000 	.word	0x00000000
   d4c44:	40ac2000 	.word	0x40ac2000
   d4c48:	2003e58c 	.word	0x2003e58c
   d4c4c:	2003e5b0 	.word	0x2003e5b0
   d4c50:	000db2e5 	.word	0x000db2e5
   d4c54:	000db14c 	.word	0x000db14c
   d4c58:	2003e2f4 	.word	0x2003e2f4
   d4c5c:	2003e260 	.word	0x2003e260
   d4c60:	000db16a 	.word	0x000db16a
   d4c64:	2003e54c 	.word	0x2003e54c

000d4c68 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4c68:	b530      	push	{r4, r5, lr}
   d4c6a:	b085      	sub	sp, #20
   d4c6c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4c6e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4c70:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4c72:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4c74:	f003 fc5a 	bl	d852c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4c78:	b9b0      	cbnz	r0, d4ca8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4c7a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4c7c:	b10c      	cbz	r4, d4c82 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4c7e:	6923      	ldr	r3, [r4, #16]
   d4c80:	b923      	cbnz	r3, d4c8c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4c82:	4a0a      	ldr	r2, [pc, #40]	; (d4cac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4c84:	2100      	movs	r1, #0
   d4c86:	200a      	movs	r0, #10
   d4c88:	f003 fc38 	bl	d84fc <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4c8c:	2300      	movs	r3, #0
   d4c8e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4c92:	230c      	movs	r3, #12
   d4c94:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4c98:	2304      	movs	r3, #4
   d4c9a:	9303      	str	r3, [sp, #12]
   d4c9c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4c9e:	6923      	ldr	r3, [r4, #16]
   d4ca0:	aa01      	add	r2, sp, #4
   d4ca2:	2101      	movs	r1, #1
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	4798      	blx	r3
}
   d4ca8:	b005      	add	sp, #20
   d4caa:	bd30      	pop	{r4, r5, pc}
   d4cac:	000d81ad 	.word	0x000d81ad

000d4cb0 <_ZNK11SystemClass12batteryStateEv.isra.0>:
            return r;
        }
        return val;
    }

    int batteryState() const {
   d4cb0:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4cb2:	2007      	movs	r0, #7
   d4cb4:	a901      	add	r1, sp, #4
   d4cb6:	f7ff ffd7 	bl	d4c68 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4cba:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4cbc:	bfa8      	it	ge
   d4cbe:	9801      	ldrge	r0, [sp, #4]
    }
   d4cc0:	b003      	add	sp, #12
   d4cc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cc8 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4cc8:	b570      	push	{r4, r5, r6, lr}
   d4cca:	b08c      	sub	sp, #48	; 0x30
   d4ccc:	a905      	add	r1, sp, #20
   d4cce:	2003      	movs	r0, #3
   d4cd0:	f7ff ffca 	bl	d4c68 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4cd4:	2800      	cmp	r0, #0
   d4cd6:	d138      	bne.n	d4d4a <_Z17getBatteryContextv+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4cd8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4cdc:	ee07 3a90 	vmov	s15, r3
   d4ce0:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4ce4:	4d2a      	ldr	r5, [pc, #168]	; (d4d90 <_Z17getBatteryContextv+0xc8>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4ce6:	4e2b      	ldr	r6, [pc, #172]	; (d4d94 <_Z17getBatteryContextv+0xcc>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cea:	ac05      	add	r4, sp, #20
   d4cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4cfa:	edc6 7a02 	vstr	s15, [r6, #8]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4cfe:	f7ff ffd7 	bl	d4cb0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d02:	ab0c      	add	r3, sp, #48	; 0x30
   d4d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4d08:	4d23      	ldr	r5, [pc, #140]	; (d4d98 <_Z17getBatteryContextv+0xd0>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4d0a:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4d0e:	4a23      	ldr	r2, [pc, #140]	; (d4d9c <_Z17getBatteryContextv+0xd4>)
   d4d10:	4823      	ldr	r0, [pc, #140]	; (d4da0 <_Z17getBatteryContextv+0xd8>)
   d4d12:	2110      	movs	r1, #16
   d4d14:	f003 fd76 	bl	d8804 <snprintf>
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4d18:	782b      	ldrb	r3, [r5, #0]
   d4d1a:	4634      	mov	r4, r6
   d4d1c:	462e      	mov	r6, r5
   d4d1e:	b9bb      	cbnz	r3, d4d50 <_Z17getBatteryContextv+0x88>
   d4d20:	f7ff ffc6 	bl	d4cb0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d24:	2804      	cmp	r0, #4
   d4d26:	d113      	bne.n	d4d50 <_Z17getBatteryContextv+0x88>
    alreadyOnBattery = true;
   d4d28:	2301      	movs	r3, #1
   d4d2a:	702b      	strb	r3, [r5, #0]
  if (Time.now() - sysStatus.lastTimePowered > 4 * 60 * 60 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4d2c:	f005 f8d7 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4d30:	6a23      	ldr	r3, [r4, #32]
   d4d32:	1ac0      	subs	r0, r0, r3
   d4d34:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   d4d38:	d828      	bhi.n	d4d8c <_Z17getBatteryContextv+0xc4>
   d4d3a:	68a3      	ldr	r3, [r4, #8]
    sysStatus.lowBatteryMode = true;
   d4d3c:	2b32      	cmp	r3, #50	; 0x32
   d4d3e:	bfcc      	ite	gt
   d4d40:	2300      	movgt	r3, #0
   d4d42:	2301      	movle	r3, #1
   d4d44:	7163      	strb	r3, [r4, #5]
}
   d4d46:	b00c      	add	sp, #48	; 0x30
   d4d48:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   d4d4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4d4e:	e7c9      	b.n	d4ce4 <_Z17getBatteryContextv+0x1c>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4d50:	f7ff ffae 	bl	d4cb0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d54:	2802      	cmp	r0, #2
   d4d56:	d114      	bne.n	d4d82 <_Z17getBatteryContextv+0xba>
    alreadyOnBattery = false;
   d4d58:	2300      	movs	r3, #0
   d4d5a:	7033      	strb	r3, [r6, #0]
    sysStatus.lastTimePowered = Time.now();
   d4d5c:	f005 f8bf 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4d60:	6220      	str	r0, [r4, #32]
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4d62:	f005 f8bc 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4d66:	17c3      	asrs	r3, r0, #31
   d4d68:	4602      	mov	r2, r0
   d4d6a:	a801      	add	r0, sp, #4
   d4d6c:	f004 ffb4 	bl	d9cd8 <_ZN9TimeClass7timeStrEx>
    snprintf(lastPoweredStr, sizeof(lastPoweredStr), Time.timeStr());
   d4d70:	9a01      	ldr	r2, [sp, #4]
   d4d72:	480c      	ldr	r0, [pc, #48]	; (d4da4 <_Z17getBatteryContextv+0xdc>)
   d4d74:	2120      	movs	r1, #32
   d4d76:	f003 fd45 	bl	d8804 <snprintf>
   d4d7a:	a801      	add	r0, sp, #4
   d4d7c:	f004 fd10 	bl	d97a0 <_ZN6StringD1Ev>
   d4d80:	e7d4      	b.n	d4d2c <_Z17getBatteryContextv+0x64>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4d82:	f7ff ff95 	bl	d4cb0 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d86:	2803      	cmp	r0, #3
   d4d88:	d1d0      	bne.n	d4d2c <_Z17getBatteryContextv+0x64>
   d4d8a:	e7e5      	b.n	d4d58 <_Z17getBatteryContextv+0x90>
    sysStatus.lowBatteryMode = true;
   d4d8c:	2301      	movs	r3, #1
   d4d8e:	e7d9      	b.n	d4d44 <_Z17getBatteryContextv+0x7c>
   d4d90:	000db4d8 	.word	0x000db4d8
   d4d94:	2003e58c 	.word	0x2003e58c
   d4d98:	2003e268 	.word	0x2003e268
   d4d9c:	000db62b 	.word	0x000db62b
   d4da0:	2003e290 	.word	0x2003e290
   d4da4:	2003e0d4 	.word	0x2003e0d4

000d4da8 <_Z16takeMeasurementsv>:
{
   d4da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4daa:	f7ff fc2f 	bl	d460c <_Z11displayInfov>
        return network_ready(*this, 0,  NULL);
   d4dae:	4b24      	ldr	r3, [pc, #144]	; (d4e40 <_Z16takeMeasurementsv+0x98>)
   d4db0:	2200      	movs	r2, #0
   d4db2:	6858      	ldr	r0, [r3, #4]
   d4db4:	4611      	mov	r1, r2
   d4db6:	f003 fccd 	bl	d8754 <network_ready>
  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4dba:	b108      	cbz	r0, d4dc0 <_Z16takeMeasurementsv+0x18>
   d4dbc:	f7ff fd12 	bl	d47e4 <_Z17getSignalStrengthv>
   d4dc0:	4d20      	ldr	r5, [pc, #128]	; (d4e44 <_Z16takeMeasurementsv+0x9c>)
    float temp = getTemp(sensorAddresses[i]);
   d4dc2:	4f21      	ldr	r7, [pc, #132]	; (d4e48 <_Z16takeMeasurementsv+0xa0>)
{
   d4dc4:	2400      	movs	r4, #0
   d4dc6:	462e      	mov	r6, r5
    float temp = getTemp(sensorAddresses[i]);
   d4dc8:	1938      	adds	r0, r7, r4
   d4dca:	f7ff fce1 	bl	d4790 <_Z7getTempPh>
   d4dce:	ec51 0b10 	vmov	r0, r1, d0
   d4dd2:	f005 ff45 	bl	dac60 <__aeabi_d2f>
   d4dd6:	ee07 0a90 	vmov	s15, r0
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4dda:	eef4 7a67 	vcmp.f32	s15, s15
   d4dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4de2:	d603      	bvs.n	d4dec <_Z16takeMeasurementsv+0x44>
   d4de4:	f005 fcb2 	bl	da74c <__aeabi_f2d>
   d4de8:	e9c5 0100 	strd	r0, r1, [r5]
  for (int i = 0; i < nSENSORS; i++) {
   d4dec:	3408      	adds	r4, #8
   d4dee:	2c18      	cmp	r4, #24
   d4df0:	f105 0508 	add.w	r5, r5, #8
   d4df4:	d1e8      	bne.n	d4dc8 <_Z16takeMeasurementsv+0x20>
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4df6:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4dfa:	210c      	movs	r1, #12
   d4dfc:	e9cd 2300 	strd	r2, r3, [sp]
   d4e00:	4812      	ldr	r0, [pc, #72]	; (d4e4c <_Z16takeMeasurementsv+0xa4>)
   d4e02:	4a13      	ldr	r2, [pc, #76]	; (d4e50 <_Z16takeMeasurementsv+0xa8>)
   d4e04:	f003 fcfe 	bl	d8804 <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4e08:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   d4e0c:	210c      	movs	r1, #12
   d4e0e:	e9cd 2300 	strd	r2, r3, [sp]
   d4e12:	4810      	ldr	r0, [pc, #64]	; (d4e54 <_Z16takeMeasurementsv+0xac>)
   d4e14:	4a0e      	ldr	r2, [pc, #56]	; (d4e50 <_Z16takeMeasurementsv+0xa8>)
   d4e16:	f003 fcf5 	bl	d8804 <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4e1a:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   d4e1e:	210c      	movs	r1, #12
   d4e20:	e9cd 2300 	strd	r2, r3, [sp]
   d4e24:	480c      	ldr	r0, [pc, #48]	; (d4e58 <_Z16takeMeasurementsv+0xb0>)
   d4e26:	4a0a      	ldr	r2, [pc, #40]	; (d4e50 <_Z16takeMeasurementsv+0xa8>)
   d4e28:	f003 fcec 	bl	d8804 <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4e2c:	f7ff ff4c 	bl	d4cc8 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4e30:	4a0a      	ldr	r2, [pc, #40]	; (d4e5c <_Z16takeMeasurementsv+0xb4>)
   d4e32:	2301      	movs	r3, #1
   d4e34:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4e36:	4a0a      	ldr	r2, [pc, #40]	; (d4e60 <_Z16takeMeasurementsv+0xb8>)
   d4e38:	7013      	strb	r3, [r2, #0]
}
   d4e3a:	b003      	add	sp, #12
   d4e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e3e:	bf00      	nop
   d4e40:	2003e5ec 	.word	0x2003e5ec
   d4e44:	2003e2b8 	.word	0x2003e2b8
   d4e48:	2003f400 	.word	0x2003f400
   d4e4c:	2003e0c0 	.word	0x2003e0c0
   d4e50:	000db2f6 	.word	0x000db2f6
   d4e54:	2003e180 	.word	0x2003e180
   d4e58:	2003e0f8 	.word	0x2003e0f8
   d4e5c:	2003e5b0 	.word	0x2003e5b0
   d4e60:	2003e2e8 	.word	0x2003e2e8

000d4e64 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4e64:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4e66:	4c27      	ldr	r4, [pc, #156]	; (d4f04 <_Z17checkSystemValuesv+0xa0>)
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4e68:	f7ff ff9e 	bl	d4da8 <_Z16takeMeasurementsv>
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4e6c:	78e3      	ldrb	r3, [r4, #3]
   d4e6e:	2b01      	cmp	r3, #1
   d4e70:	d905      	bls.n	d4e7e <_Z17checkSystemValuesv+0x1a>
   d4e72:	f003 fc07 	bl	d8684 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4e76:	2800      	cmp	r0, #0
   d4e78:	d042      	beq.n	d4f00 <_Z17checkSystemValuesv+0x9c>
   d4e7a:	2301      	movs	r3, #1
   d4e7c:	70e3      	strb	r3, [r4, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4e7e:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e80:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4e84:	2b01      	cmp	r3, #1
   d4e86:	bf84      	itt	hi
   d4e88:	2300      	movhi	r3, #0
   d4e8a:	7123      	strbhi	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4e8c:	68a3      	ldr	r3, [r4, #8]
   d4e8e:	2b1d      	cmp	r3, #29
   d4e90:	bfcc      	ite	gt
   d4e92:	2300      	movgt	r3, #0
   d4e94:	2301      	movle	r3, #1
   d4e96:	7163      	strb	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e98:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e9a:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e9e:	2bff      	cmp	r3, #255	; 0xff
   d4ea0:	bf88      	it	hi
   d4ea2:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ea8:	bf88      	it	hi
   d4eaa:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb0:	d406      	bmi.n	d4ec0 <_Z17checkSystemValuesv+0x5c>
   d4eb2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ebe:	dd01      	ble.n	d4ec4 <_Z17checkSystemValuesv+0x60>
   d4ec0:	4b11      	ldr	r3, [pc, #68]	; (d4f08 <_Z17checkSystemValuesv+0xa4>)
   d4ec2:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4ec4:	edd4 7a06 	vldr	s15, [r4, #24]
   d4ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ed0:	d406      	bmi.n	d4ee0 <_Z17checkSystemValuesv+0x7c>
   d4ed2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ede:	dd02      	ble.n	d4ee6 <_Z17checkSystemValuesv+0x82>
   d4ee0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d4ee4:	61a3      	str	r3, [r4, #24]
  if (Time.now() < sysStatus.lastTimePowered) sysStatus.lastTimePowered = 0;          // Can't go back in time
   d4ee6:	f004 fffa 	bl	d9ede <_ZN9TimeClass3nowEv>
   d4eea:	6a23      	ldr	r3, [r4, #32]
   d4eec:	4298      	cmp	r0, r3
   d4eee:	bf3c      	itt	cc
   d4ef0:	2300      	movcc	r3, #0
   d4ef2:	6223      	strcc	r3, [r4, #32]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d4ef4:	230a      	movs	r3, #10
   d4ef6:	71a3      	strb	r3, [r4, #6]
  systemStatusWriteNeeded = true;
   d4ef8:	4b04      	ldr	r3, [pc, #16]	; (d4f0c <_Z17checkSystemValuesv+0xa8>)
   d4efa:	2201      	movs	r2, #1
   d4efc:	701a      	strb	r2, [r3, #0]
}
   d4efe:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4f00:	70e0      	strb	r0, [r4, #3]
   d4f02:	e7bc      	b.n	d4e7e <_Z17checkSystemValuesv+0x1a>
   d4f04:	2003e58c 	.word	0x2003e58c
   d4f08:	c0a00000 	.word	0xc0a00000
   d4f0c:	2003e5b0 	.word	0x2003e5b0

000d4f10 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4f10:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f12:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4f14:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f16:	68dd      	ldr	r5, [r3, #12]
   d4f18:	2324      	movs	r3, #36	; 0x24
   d4f1a:	47a8      	blx	r5
    }
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	bd38      	pop	{r3, r4, r5, pc}

000d4f20 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d4f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d4f22:	f7ff fcc9 	bl	d48b8 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d4f26:	f7ff ff3f 	bl	d4da8 <_Z16takeMeasurementsv>
   d4f2a:	f003 fbab 	bl	d8684 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4f2e:	b148      	cbz	r0, d4f44 <_Z18loadSystemDefaultsv+0x24>
   d4f30:	2300      	movs	r3, #0
   d4f32:	f88d 3000 	strb.w	r3, [sp]
   d4f36:	4b12      	ldr	r3, [pc, #72]	; (d4f80 <_Z18loadSystemDefaultsv+0x60>)
   d4f38:	4a12      	ldr	r2, [pc, #72]	; (d4f84 <_Z18loadSystemDefaultsv+0x64>)
   d4f3a:	781b      	ldrb	r3, [r3, #0]
   d4f3c:	4912      	ldr	r1, [pc, #72]	; (d4f88 <_Z18loadSystemDefaultsv+0x68>)
   d4f3e:	4813      	ldr	r0, [pc, #76]	; (d4f8c <_Z18loadSystemDefaultsv+0x6c>)
   d4f40:	f7ff f998 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d4f44:	4c12      	ldr	r4, [pc, #72]	; (d4f90 <_Z18loadSystemDefaultsv+0x70>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4f46:	68a3      	ldr	r3, [r4, #8]
   d4f48:	2b1d      	cmp	r3, #29
   d4f4a:	bfcc      	ite	gt
   d4f4c:	2300      	movgt	r3, #0
   d4f4e:	2301      	movle	r3, #1
   d4f50:	7163      	strb	r3, [r4, #5]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d4f52:	230a      	movs	r3, #10
   d4f54:	71a3      	strb	r3, [r4, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d4f56:	4b0f      	ldr	r3, [pc, #60]	; (d4f94 <_Z18loadSystemDefaultsv+0x74>)
   d4f58:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d4f5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  sysStatus.structuresVersion = 1;
   d4f5e:	2501      	movs	r5, #1
  sysStatus.dstOffset = 1;
   d4f60:	61a3      	str	r3, [r4, #24]
  sysStatus.lastHookResponse = 0;
   d4f62:	2300      	movs	r3, #0
   d4f64:	61e3      	str	r3, [r4, #28]
  sysStatus.structuresVersion = 1;
   d4f66:	7025      	strb	r5, [r4, #0]
  sysStatus.verboseMode = true;
   d4f68:	7125      	strb	r5, [r4, #4]
  sysStatus.lastTimePowered = Time.now();                           // Make sure we do not go to sleep right away
   d4f6a:	f004 ffb8 	bl	d9ede <_ZN9TimeClass3nowEv>
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d4f6e:	4622      	mov	r2, r4
  sysStatus.lastTimePowered = Time.now();                           // Make sure we do not go to sleep right away
   d4f70:	6220      	str	r0, [r4, #32]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d4f72:	4629      	mov	r1, r5
   d4f74:	4808      	ldr	r0, [pc, #32]	; (d4f98 <_Z18loadSystemDefaultsv+0x78>)
   d4f76:	f7ff ffcb 	bl	d4f10 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d4f7a:	b003      	add	sp, #12
   d4f7c:	bd30      	pop	{r4, r5, pc}
   d4f7e:	bf00      	nop
   d4f80:	2003e260 	.word	0x2003e260
   d4f84:	000db2fe 	.word	0x000db2fe
   d4f88:	000db147 	.word	0x000db147
   d4f8c:	2003e54c 	.word	0x2003e54c
   d4f90:	2003e58c 	.word	0x2003e58c
   d4f94:	c0a00000 	.word	0xc0a00000
   d4f98:	2003e31c 	.word	0x2003e31c
   d4f9c:	00000000 	.word	0x00000000

000d4fa0 <setup>:
{
   d4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d4fa2:	2100      	movs	r1, #0
{
   d4fa4:	b0ad      	sub	sp, #180	; 0xb4
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d4fa6:	2008      	movs	r0, #8
   d4fa8:	f005 f9e0 	bl	da36c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d4fac:	2100      	movs	r1, #0
   d4fae:	2004      	movs	r0, #4
   d4fb0:	f005 f9dc 	bl	da36c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d4fb4:	2101      	movs	r1, #1
   d4fb6:	2007      	movs	r0, #7
   d4fb8:	f005 f9d8 	bl	da36c <pinMode>
  digitalWrite(blueLED,HIGH);
   d4fbc:	2101      	movs	r1, #1
   d4fbe:	2007      	movs	r0, #7
   d4fc0:	f005 f9e5 	bl	da38e <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d4fc4:	a804      	add	r0, sp, #16
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4fc6:	2400      	movs	r4, #0
   d4fc8:	f003 fb64 	bl	d8694 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4fcc:	2300      	movs	r3, #0
   d4fce:	227d      	movs	r2, #125	; 0x7d
   d4fd0:	a90c      	add	r1, sp, #48	; 0x30
   d4fd2:	a804      	add	r0, sp, #16
   d4fd4:	f004 fc6f 	bl	d98b6 <_ZNK6String8getBytesEPhjj>
   d4fd8:	4623      	mov	r3, r4
   d4fda:	4622      	mov	r2, r4
   d4fdc:	49b2      	ldr	r1, [pc, #712]	; (d52a8 <setup+0x308>)
   d4fde:	4db3      	ldr	r5, [pc, #716]	; (d52ac <setup+0x30c>)
   d4fe0:	4fb3      	ldr	r7, [pc, #716]	; (d52b0 <setup+0x310>)
   d4fe2:	e9cd 4400 	strd	r4, r4, [sp]
   d4fe6:	a80c      	add	r0, sp, #48	; 0x30
   d4fe8:	f003 fb64 	bl	d86b4 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d4fec:	49b1      	ldr	r1, [pc, #708]	; (d52b4 <setup+0x314>)
   d4fee:	48b2      	ldr	r0, [pc, #712]	; (d52b8 <setup+0x318>)
   d4ff0:	f7ff f8d7 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4ff4:	49b1      	ldr	r1, [pc, #708]	; (d52bc <setup+0x31c>)
   d4ff6:	48b2      	ldr	r0, [pc, #712]	; (d52c0 <setup+0x320>)
   d4ff8:	f7ff f8d3 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4ffc:	4623      	mov	r3, r4
   d4ffe:	2202      	movs	r2, #2
   d5000:	49b0      	ldr	r1, [pc, #704]	; (d52c4 <setup+0x324>)
   d5002:	48b1      	ldr	r0, [pc, #708]	; (d52c8 <setup+0x328>)
   d5004:	f003 fb1e 	bl	d8644 <spark_variable>
        return _variable(varKey, var, STRING);
   d5008:	49b0      	ldr	r1, [pc, #704]	; (d52cc <setup+0x32c>)
   d500a:	48b1      	ldr	r0, [pc, #708]	; (d52d0 <setup+0x330>)
   d500c:	f7ff f8c9 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5010:	49b0      	ldr	r1, [pc, #704]	; (d52d4 <setup+0x334>)
   d5012:	48b1      	ldr	r0, [pc, #708]	; (d52d8 <setup+0x338>)
   d5014:	f7ff f8c5 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5018:	49b0      	ldr	r1, [pc, #704]	; (d52dc <setup+0x33c>)
   d501a:	48b1      	ldr	r0, [pc, #708]	; (d52e0 <setup+0x340>)
   d501c:	f7ff f8c1 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5020:	49b0      	ldr	r1, [pc, #704]	; (d52e4 <setup+0x344>)
   d5022:	48b1      	ldr	r0, [pc, #708]	; (d52e8 <setup+0x348>)
   d5024:	f7ff f8bd 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5028:	49b0      	ldr	r1, [pc, #704]	; (d52ec <setup+0x34c>)
   d502a:	48b1      	ldr	r0, [pc, #708]	; (d52f0 <setup+0x350>)
   d502c:	4623      	mov	r3, r4
   d502e:	2202      	movs	r2, #2
   d5030:	f003 fb08 	bl	d8644 <spark_variable>
   d5034:	4623      	mov	r3, r4
   d5036:	2202      	movs	r2, #2
   d5038:	49ae      	ldr	r1, [pc, #696]	; (d52f4 <setup+0x354>)
   d503a:	48af      	ldr	r0, [pc, #700]	; (d52f8 <setup+0x358>)
   d503c:	f003 fb02 	bl	d8644 <spark_variable>
        return _variable(varKey, var, STRING);
   d5040:	49ae      	ldr	r1, [pc, #696]	; (d52fc <setup+0x35c>)
   d5042:	48af      	ldr	r0, [pc, #700]	; (d5300 <setup+0x360>)
   d5044:	f7ff f8ad 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5048:	49ae      	ldr	r1, [pc, #696]	; (d5304 <setup+0x364>)
   d504a:	48af      	ldr	r0, [pc, #700]	; (d5308 <setup+0x368>)
   d504c:	f7ff f8a9 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5050:	49ae      	ldr	r1, [pc, #696]	; (d530c <setup+0x36c>)
   d5052:	48af      	ldr	r0, [pc, #700]	; (d5310 <setup+0x370>)
   d5054:	f7ff f8a5 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5058:	4aae      	ldr	r2, [pc, #696]	; (d5314 <setup+0x374>)
   d505a:	49af      	ldr	r1, [pc, #700]	; (d5318 <setup+0x378>)
   d505c:	48af      	ldr	r0, [pc, #700]	; (d531c <setup+0x37c>)
   d505e:	f003 fdd3 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5062:	4aaf      	ldr	r2, [pc, #700]	; (d5320 <setup+0x380>)
   d5064:	49af      	ldr	r1, [pc, #700]	; (d5324 <setup+0x384>)
   d5066:	48ad      	ldr	r0, [pc, #692]	; (d531c <setup+0x37c>)
   d5068:	f003 fdce 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d506c:	4aae      	ldr	r2, [pc, #696]	; (d5328 <setup+0x388>)
   d506e:	49af      	ldr	r1, [pc, #700]	; (d532c <setup+0x38c>)
   d5070:	48aa      	ldr	r0, [pc, #680]	; (d531c <setup+0x37c>)
   d5072:	f003 fdc9 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5076:	4aae      	ldr	r2, [pc, #696]	; (d5330 <setup+0x390>)
   d5078:	49ae      	ldr	r1, [pc, #696]	; (d5334 <setup+0x394>)
   d507a:	48a8      	ldr	r0, [pc, #672]	; (d531c <setup+0x37c>)
   d507c:	f003 fdc4 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5080:	4aad      	ldr	r2, [pc, #692]	; (d5338 <setup+0x398>)
   d5082:	49ae      	ldr	r1, [pc, #696]	; (d533c <setup+0x39c>)
   d5084:	48a5      	ldr	r0, [pc, #660]	; (d531c <setup+0x37c>)
   d5086:	f003 fdbf 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d508a:	49ad      	ldr	r1, [pc, #692]	; (d5340 <setup+0x3a0>)
   d508c:	4a8c      	ldr	r2, [pc, #560]	; (d52c0 <setup+0x320>)
   d508e:	48a3      	ldr	r0, [pc, #652]	; (d531c <setup+0x37c>)
   d5090:	f003 fdba 	bl	d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d5094:	2601      	movs	r6, #1
    return (flags_ & OptionFlag::GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
    flags_ |= OptionFlag::TIMEOUT;
   d5096:	2303      	movs	r3, #3
   d5098:	f241 3288 	movw	r2, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d509c:	a808      	add	r0, sp, #32
   d509e:	e9cd 3208 	strd	r3, r2, [sp, #32]
    graceful_ = enabled;
   d50a2:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
   d50a6:	f003 fdd3 	bl	d8c50 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  connectToParticle();
   d50aa:	f7ff fc05 	bl	d48b8 <_Z17connectToParticlev>
  fram.begin();                                                       // Initialize the FRAM module
   d50ae:	48a5      	ldr	r0, [pc, #660]	; (d5344 <setup+0x3a4>)
   d50b0:	f002 f9a2 	bl	d73f8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d50b4:	4633      	mov	r3, r6
   d50b6:	48a3      	ldr	r0, [pc, #652]	; (d5344 <setup+0x3a4>)
   d50b8:	f10d 020f 	add.w	r2, sp, #15
   d50bc:	4621      	mov	r1, r4
   d50be:	f002 f9dd 	bl	d747c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d50c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d50c6:	2b02      	cmp	r3, #2
   d50c8:	f000 80d1 	beq.w	d526e <setup+0x2ce>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d50cc:	489d      	ldr	r0, [pc, #628]	; (d5344 <setup+0x3a4>)
   d50ce:	f002 f99d 	bl	d740c <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50d2:	4a9d      	ldr	r2, [pc, #628]	; (d5348 <setup+0x3a8>)
   d50d4:	489b      	ldr	r0, [pc, #620]	; (d5344 <setup+0x3a4>)
   d50d6:	4633      	mov	r3, r6
   d50d8:	4621      	mov	r1, r4
   d50da:	f002 fa1a 	bl	d7512 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d50de:	4633      	mov	r3, r6
   d50e0:	4898      	ldr	r0, [pc, #608]	; (d5344 <setup+0x3a4>)
   d50e2:	f10d 020f 	add.w	r2, sp, #15
   d50e6:	4621      	mov	r1, r4
   d50e8:	f002 f9c8 	bl	d747c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d50ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d50f0:	2b02      	cmp	r3, #2
   d50f2:	f000 80b9 	beq.w	d5268 <setup+0x2c8>
   d50f6:	703e      	strb	r6, [r7, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d50f8:	4c94      	ldr	r4, [pc, #592]	; (d534c <setup+0x3ac>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d50fa:	f7ff feb3 	bl	d4e64 <_Z17checkSystemValuesv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d50fe:	4a94      	ldr	r2, [pc, #592]	; (d5350 <setup+0x3b0>)
   d5100:	2300      	movs	r3, #0
   d5102:	2100      	movs	r1, #0
   d5104:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5108:	f003 fa3a 	bl	d8580 <system_subscribe_event>
   d510c:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d510e:	2101      	movs	r1, #1
   d5110:	4620      	mov	r0, r4
   d5112:	8163      	strh	r3, [r4, #10]
   d5114:	f001 f868 	bl	d61e8 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d5118:	2301      	movs	r3, #1
   d511a:	461a      	mov	r2, r3
   d511c:	2110      	movs	r1, #16
   d511e:	4620      	mov	r0, r4
   d5120:	f000 fdcd 	bl	d5cbe <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5124:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet =  ab1805.isRTCSet();
   d5126:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5128:	4620      	mov	r0, r4
   d512a:	f000 fd45 	bl	d5bb8 <_ZN6AB18056setWDTEi>
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d512e:	79ab      	ldrb	r3, [r5, #6]
   d5130:	4a88      	ldr	r2, [pc, #544]	; (d5354 <setup+0x3b4>)
   d5132:	4862      	ldr	r0, [pc, #392]	; (d52bc <setup+0x31c>)
   d5134:	210c      	movs	r1, #12
   d5136:	f003 fb65 	bl	d8804 <snprintf>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d513a:	ed95 0a06 	vldr	s0, [r5, #24]
   d513e:	f004 fd85 	bl	d9c4c <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid() && sysStatus.clockSet) {                         // We need to try to get the time so we can tell if we need DST
   d5142:	f004 feaf 	bl	d9ea4 <_ZN9TimeClass7isValidEv>
   d5146:	2800      	cmp	r0, #0
   d5148:	f040 8098 	bne.w	d527c <setup+0x2dc>
   d514c:	78ab      	ldrb	r3, [r5, #2]
   d514e:	2b00      	cmp	r3, #0
   d5150:	f000 8094 	beq.w	d527c <setup+0x2dc>
    ab1805.getRtcAsTime(RTCTime);
   d5154:	4e80      	ldr	r6, [pc, #512]	; (d5358 <setup+0x3b8>)
   d5156:	4620      	mov	r0, r4
   d5158:	4631      	mov	r1, r6
   d515a:	f001 f835 	bl	d61c8 <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(RTCTime);
   d515e:	e9d6 0100 	ldrd	r0, r1, [r6]
   d5162:	f004 fda5 	bl	d9cb0 <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5166:	f7ff fcd9 	bl	d4b1c <_Z8isDSTusav>
   d516a:	2800      	cmp	r0, #0
   d516c:	f000 808b 	beq.w	d5286 <setup+0x2e6>
   d5170:	f004 fd8a 	bl	d9c88 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d5174:	ed95 0a05 	vldr	s0, [r5, #20]
   d5178:	f004 fd48 	bl	d9c0c <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d517c:	f004 fef4 	bl	d9f68 <_ZN9TimeClass5localEv>
   d5180:	4604      	mov	r4, r0
   d5182:	f004 feac 	bl	d9ede <_ZN9TimeClass3nowEv>
   d5186:	1a20      	subs	r0, r4, r0
   d5188:	f005 face 	bl	da728 <__aeabi_i2d>
   d518c:	a344      	add	r3, pc, #272	; (adr r3, d52a0 <setup+0x300>)
   d518e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5192:	f005 fc5d 	bl	daa50 <__aeabi_ddiv>
   d5196:	4a71      	ldr	r2, [pc, #452]	; (d535c <setup+0x3bc>)
   d5198:	e9cd 0100 	strd	r0, r1, [sp]
   d519c:	210a      	movs	r1, #10
   d519e:	4857      	ldr	r0, [pc, #348]	; (d52fc <setup+0x35c>)
   d51a0:	f003 fb30 	bl	d8804 <snprintf>
        int reason = RESET_REASON_NONE;
   d51a4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d51a6:	4611      	mov	r1, r2
   d51a8:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d51aa:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d51ac:	f002 ffe6 	bl	d817c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d51b0:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d51b2:	2b14      	cmp	r3, #20
   d51b4:	f04f 0200 	mov.w	r2, #0
   d51b8:	d168      	bne.n	d528c <setup+0x2ec>
    sysStatus.resetCount++;
   d51ba:	692b      	ldr	r3, [r5, #16]
   d51bc:	3301      	adds	r3, #1
   d51be:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d51c0:	4b67      	ldr	r3, [pc, #412]	; (d5360 <setup+0x3c0>)
   d51c2:	2201      	movs	r2, #1
   d51c4:	701a      	strb	r2, [r3, #0]
  snprintf(lastPoweredStr, sizeof(lastPoweredStr), Time.timeStr(sysStatus.lastTimePowered));   // Load the last power event
   d51c6:	2300      	movs	r3, #0
   d51c8:	6a2a      	ldr	r2, [r5, #32]
   d51ca:	a808      	add	r0, sp, #32
   d51cc:	f004 fd84 	bl	d9cd8 <_ZN9TimeClass7timeStrEx>
   d51d0:	9a08      	ldr	r2, [sp, #32]
   d51d2:	484e      	ldr	r0, [pc, #312]	; (d530c <setup+0x36c>)
   d51d4:	2120      	movs	r1, #32
   d51d6:	f003 fb15 	bl	d8804 <snprintf>
   d51da:	a808      	add	r0, sp, #32
   d51dc:	f004 fae0 	bl	d97a0 <_ZN6StringD1Ev>
  getBatteryContext();                                                // See if we have enough juice
   d51e0:	f7ff fd72 	bl	d4cc8 <_Z17getBatteryContextv>
   d51e4:	4a5f      	ldr	r2, [pc, #380]	; (d5364 <setup+0x3c4>)
   d51e6:	4857      	ldr	r0, [pc, #348]	; (d5344 <setup+0x3a4>)
   d51e8:	2330      	movs	r3, #48	; 0x30
   d51ea:	2150      	movs	r1, #80	; 0x50
   d51ec:	f002 f946 	bl	d747c <_ZN6MB85RC8readDataEjPhj>
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d51f0:	f004 fe86 	bl	d9f00 <_ZN9TimeClass4hourEv>
   d51f4:	4b5c      	ldr	r3, [pc, #368]	; (d5368 <setup+0x3c8>)
   d51f6:	6018      	str	r0, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d51f8:	f7ff fb30 	bl	d485c <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d51fc:	2004      	movs	r0, #4
   d51fe:	f005 f8df 	bl	da3c0 <digitalRead>
   d5202:	b908      	cbnz	r0, d5208 <setup+0x268>
   d5204:	f7ff fe8c 	bl	d4f20 <_Z18loadSystemDefaultsv>
  ds18b20.resetsearch();                 // initialise for sensor search
   d5208:	4858      	ldr	r0, [pc, #352]	; (d536c <setup+0x3cc>)
   d520a:	f001 ff6c 	bl	d70e6 <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d520e:	4958      	ldr	r1, [pc, #352]	; (d5370 <setup+0x3d0>)
   d5210:	4856      	ldr	r0, [pc, #344]	; (d536c <setup+0x3cc>)
   d5212:	f001 ff4c 	bl	d70ae <_ZN7DS18B206searchEPh>
   d5216:	4957      	ldr	r1, [pc, #348]	; (d5374 <setup+0x3d4>)
   d5218:	4854      	ldr	r0, [pc, #336]	; (d536c <setup+0x3cc>)
   d521a:	f001 ff48 	bl	d70ae <_ZN7DS18B206searchEPh>
   d521e:	4956      	ldr	r1, [pc, #344]	; (d5378 <setup+0x3d8>)
   d5220:	4852      	ldr	r0, [pc, #328]	; (d536c <setup+0x3cc>)
   d5222:	f001 ff44 	bl	d70ae <_ZN7DS18B206searchEPh>
	gps.withI2C();
   d5226:	f005 f8f7 	bl	da418 <_Z19__fetch_global_Wirev>
   d522a:	2242      	movs	r2, #66	; 0x42
   d522c:	4601      	mov	r1, r0
   d522e:	4853      	ldr	r0, [pc, #332]	; (d537c <setup+0x3dc>)
   d5230:	f001 f9da 	bl	d65e8 <_ZN16AssetTrackerBase7withI2CER7TwoWireh>
	gps.startThreadedMode();
   d5234:	4851      	ldr	r0, [pc, #324]	; (d537c <setup+0x3dc>)
   d5236:	f001 f98d 	bl	d6554 <_ZN16AssetTrackerBase17startThreadedModeEv>
   d523a:	2300      	movs	r3, #0
  publishQueue.publish("State","Startup Complete",PRIVATE);
   d523c:	f88d 3000 	strb.w	r3, [sp]
   d5240:	4b4f      	ldr	r3, [pc, #316]	; (d5380 <setup+0x3e0>)
   d5242:	4a50      	ldr	r2, [pc, #320]	; (d5384 <setup+0x3e4>)
   d5244:	781b      	ldrb	r3, [r3, #0]
   d5246:	4950      	ldr	r1, [pc, #320]	; (d5388 <setup+0x3e8>)
   d5248:	4850      	ldr	r0, [pc, #320]	; (d538c <setup+0x3ec>)
   d524a:	f7ff f813 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d524e:	783b      	ldrb	r3, [r7, #0]
   d5250:	b90b      	cbnz	r3, d5256 <setup+0x2b6>
   d5252:	2302      	movs	r3, #2
   d5254:	703b      	strb	r3, [r7, #0]
  digitalWrite(blueLED,LOW);
   d5256:	2100      	movs	r1, #0
   d5258:	2007      	movs	r0, #7
   d525a:	f005 f898 	bl	da38e <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d525e:	a804      	add	r0, sp, #16
   d5260:	f004 fa9e 	bl	d97a0 <_ZN6StringD1Ev>
}
   d5264:	b02d      	add	sp, #180	; 0xb4
   d5266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5268:	f7ff fe5a 	bl	d4f20 <_Z18loadSystemDefaultsv>
   d526c:	e744      	b.n	d50f8 <setup+0x158>
   d526e:	2324      	movs	r3, #36	; 0x24
   d5270:	462a      	mov	r2, r5
   d5272:	4631      	mov	r1, r6
   d5274:	4833      	ldr	r0, [pc, #204]	; (d5344 <setup+0x3a4>)
   d5276:	f002 f901 	bl	d747c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d527a:	e73d      	b.n	d50f8 <setup+0x158>
    connectToParticle();
   d527c:	f7ff fb1c 	bl	d48b8 <_Z17connectToParticlev>
    Particle.syncTime();                                               // Set the system clock here
   d5280:	f7fe ff78 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
   d5284:	e76f      	b.n	d5166 <setup+0x1c6>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5286:	f004 fd0b 	bl	d9ca0 <_ZN9TimeClass6endDSTEv>
   d528a:	e773      	b.n	d5174 <setup+0x1d4>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d528c:	4611      	mov	r1, r2
   d528e:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d5290:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5292:	f002 ff73 	bl	d817c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5296:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5298:	2b8c      	cmp	r3, #140	; 0x8c
   d529a:	d194      	bne.n	d51c6 <setup+0x226>
   d529c:	e78d      	b.n	d51ba <setup+0x21a>
   d529e:	bf00      	nop
   d52a0:	00000000 	.word	0x00000000
   d52a4:	40ac2000 	.word	0x40ac2000
   d52a8:	000d4291 	.word	0x000d4291
   d52ac:	2003e58c 	.word	0x2003e58c
   d52b0:	2003e588 	.word	0x2003e588
   d52b4:	2003e210 	.word	0x2003e210
   d52b8:	000db316 	.word	0x000db316
   d52bc:	2003e104 	.word	0x2003e104
   d52c0:	000db31d 	.word	0x000db31d
   d52c4:	2003e59c 	.word	0x2003e59c
   d52c8:	000db32c 	.word	0x000db32c
   d52cc:	2003e0c0 	.word	0x2003e0c0
   d52d0:	000db337 	.word	0x000db337
   d52d4:	2003e180 	.word	0x2003e180
   d52d8:	000db341 	.word	0x000db341
   d52dc:	2003e0f8 	.word	0x2003e0f8
   d52e0:	000db34a 	.word	0x000db34a
   d52e4:	2003e0cc 	.word	0x2003e0cc
   d52e8:	000db356 	.word	0x000db356
   d52ec:	2003e594 	.word	0x2003e594
   d52f0:	000db35e 	.word	0x000db35e
   d52f4:	2003e2d0 	.word	0x2003e2d0
   d52f8:	000db369 	.word	0x000db369
   d52fc:	2003e2f4 	.word	0x2003e2f4
   d5300:	000db370 	.word	0x000db370
   d5304:	2003e290 	.word	0x2003e290
   d5308:	000db37b 	.word	0x000db37b
   d530c:	2003e0d4 	.word	0x2003e0d4
   d5310:	000db38a 	.word	0x000db38a
   d5314:	000db397 	.word	0x000db397
   d5318:	000d40ed 	.word	0x000d40ed
   d531c:	000d8bdd 	.word	0x000d8bdd
   d5320:	000db3a1 	.word	0x000db3a1
   d5324:	000d4109 	.word	0x000d4109
   d5328:	000db3a9 	.word	0x000db3a9
   d532c:	000d4329 	.word	0x000d4329
   d5330:	000db3b6 	.word	0x000db3b6
   d5334:	000d43b9 	.word	0x000d43b9
   d5338:	000db3c3 	.word	0x000db3c3
   d533c:	000d4b61 	.word	0x000d4b61
   d5340:	000d44d1 	.word	0x000d44d1
   d5344:	2003e31c 	.word	0x2003e31c
   d5348:	000db4f4 	.word	0x000db4f4
   d534c:	2003e270 	.word	0x2003e270
   d5350:	000d40c9 	.word	0x000d40c9
   d5354:	000db186 	.word	0x000db186
   d5358:	2003e208 	.word	0x2003e208
   d535c:	000db14c 	.word	0x000db14c
   d5360:	2003e5b0 	.word	0x2003e5b0
   d5364:	2003e2b8 	.word	0x2003e2b8
   d5368:	2003e2ec 	.word	0x2003e2ec
   d536c:	2003e300 	.word	0x2003e300
   d5370:	2003f400 	.word	0x2003f400
   d5374:	2003f408 	.word	0x2003f408
   d5378:	2003f410 	.word	0x2003f410
   d537c:	2003e32c 	.word	0x2003e32c
   d5380:	2003e260 	.word	0x2003e260
   d5384:	000db3d1 	.word	0x000db3d1
   d5388:	000db3e2 	.word	0x000db3e2
   d538c:	2003e54c 	.word	0x2003e54c

000d5390 <loop>:
{
   d5390:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d5392:	4c93      	ldr	r4, [pc, #588]	; (d55e0 <loop+0x250>)
   d5394:	7823      	ldrb	r3, [r4, #0]
   d5396:	3b01      	subs	r3, #1
{
   d5398:	b093      	sub	sp, #76	; 0x4c
   d539a:	2b05      	cmp	r3, #5
   d539c:	d830      	bhi.n	d5400 <loop+0x70>
   d539e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d53a2:	019d      	.short	0x019d
   d53a4:	01120006 	.word	0x01120006
   d53a8:	01490074 	.word	0x01490074
   d53ac:	016d      	.short	0x016d
      if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d53ae:	4d8d      	ldr	r5, [pc, #564]	; (d55e4 <loop+0x254>)
   d53b0:	792b      	ldrb	r3, [r5, #4]
   d53b2:	b12b      	cbz	r3, d53c0 <loop+0x30>
   d53b4:	4b8c      	ldr	r3, [pc, #560]	; (d55e8 <loop+0x258>)
   d53b6:	781b      	ldrb	r3, [r3, #0]
   d53b8:	2b02      	cmp	r3, #2
   d53ba:	d001      	beq.n	d53c0 <loop+0x30>
   d53bc:	f7ff fb0a 	bl	d49d4 <_Z22publishStateTransitionv>
      if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d53c0:	796b      	ldrb	r3, [r5, #5]
   d53c2:	b10b      	cbz	r3, d53c8 <loop+0x38>
   d53c4:	2304      	movs	r3, #4
   d53c6:	7023      	strb	r3, [r4, #0]
      if (millis() - lastPoll > 1000) {                               // Slow down the polling a bit - less traffic on i2c bus and no need to check the clock more than once a second
   d53c8:	4e88      	ldr	r6, [pc, #544]	; (d55ec <loop+0x25c>)
   d53ca:	f002 fef7 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d53ce:	6832      	ldr	r2, [r6, #0]
   d53d0:	1a80      	subs	r0, r0, r2
   d53d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d53d6:	d913      	bls.n	d5400 <loop+0x70>
        if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d53d8:	f004 fd9e 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d53dc:	79ab      	ldrb	r3, [r5, #6]
   d53de:	fb90 f2f3 	sdiv	r2, r0, r3
   d53e2:	fb02 0313 	mls	r3, r2, r3, r0
   d53e6:	2b00      	cmp	r3, #0
   d53e8:	d144      	bne.n	d5474 <loop+0xe4>
   d53ea:	f004 fd95 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d53ee:	4b80      	ldr	r3, [pc, #512]	; (d55f0 <loop+0x260>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	4298      	cmp	r0, r3
   d53f4:	d03e      	beq.n	d5474 <loop+0xe4>
   d53f6:	2303      	movs	r3, #3
   d53f8:	7023      	strb	r3, [r4, #0]
   d53fa:	f002 fedf 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
        lastPoll = millis();
   d53fe:	6030      	str	r0, [r6, #0]
  if (systemStatusWriteNeeded) {
   d5400:	4c7c      	ldr	r4, [pc, #496]	; (d55f4 <loop+0x264>)
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5402:	487d      	ldr	r0, [pc, #500]	; (d55f8 <loop+0x268>)
   d5404:	f000 ffd0 	bl	d63a8 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5408:	7823      	ldrb	r3, [r4, #0]
   d540a:	b133      	cbz	r3, d541a <loop+0x8a>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d540c:	4a75      	ldr	r2, [pc, #468]	; (d55e4 <loop+0x254>)
   d540e:	487b      	ldr	r0, [pc, #492]	; (d55fc <loop+0x26c>)
   d5410:	2101      	movs	r1, #1
   d5412:	f7ff fd7d 	bl	d4f10 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5416:	2300      	movs	r3, #0
   d5418:	7023      	strb	r3, [r4, #0]
  if (currentCountsWriteNeeded) {
   d541a:	4c79      	ldr	r4, [pc, #484]	; (d5600 <loop+0x270>)
   d541c:	7823      	ldrb	r3, [r4, #0]
   d541e:	b13b      	cbz	r3, d5430 <loop+0xa0>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5420:	2330      	movs	r3, #48	; 0x30
   d5422:	4a78      	ldr	r2, [pc, #480]	; (d5604 <loop+0x274>)
   d5424:	4875      	ldr	r0, [pc, #468]	; (d55fc <loop+0x26c>)
   d5426:	2150      	movs	r1, #80	; 0x50
   d5428:	f002 f873 	bl	d7512 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d542c:	2300      	movs	r3, #0
   d542e:	7023      	strb	r3, [r4, #0]
  if (outOfMemory >= 0) {
   d5430:	4b75      	ldr	r3, [pc, #468]	; (d5608 <loop+0x278>)
   d5432:	681b      	ldr	r3, [r3, #0]
   d5434:	2b00      	cmp	r3, #0
   d5436:	db1b      	blt.n	d5470 <loop+0xe0>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5438:	4a74      	ldr	r2, [pc, #464]	; (d560c <loop+0x27c>)
   d543a:	2140      	movs	r1, #64	; 0x40
   d543c:	a802      	add	r0, sp, #8
   d543e:	f003 f9e1 	bl	d8804 <snprintf>
    Log.info(message);
   d5442:	a902      	add	r1, sp, #8
   d5444:	4872      	ldr	r0, [pc, #456]	; (d5610 <loop+0x280>)
   d5446:	f7fe fefe 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d544a:	2064      	movs	r0, #100	; 0x64
   d544c:	f003 fa22 	bl	d8894 <delay>
   d5450:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);
   d5452:	f88d 3000 	strb.w	r3, [sp]
   d5456:	4b6f      	ldr	r3, [pc, #444]	; (d5614 <loop+0x284>)
   d5458:	496f      	ldr	r1, [pc, #444]	; (d5618 <loop+0x288>)
   d545a:	781b      	ldrb	r3, [r3, #0]
   d545c:	486f      	ldr	r0, [pc, #444]	; (d561c <loop+0x28c>)
   d545e:	aa02      	add	r2, sp, #8
   d5460:	f7fe ff08 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5464:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5468:	f003 fa14 	bl	d8894 <delay>
    System.reset();
   d546c:	f004 faca 	bl	d9a04 <_ZN11SystemClass5resetEv>
}
   d5470:	b013      	add	sp, #76	; 0x4c
   d5472:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d5474:	f004 fd50 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d5478:	2800      	cmp	r0, #0
   d547a:	d1be      	bne.n	d53fa <loop+0x6a>
   d547c:	f004 fd4c 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d5480:	4b5b      	ldr	r3, [pc, #364]	; (d55f0 <loop+0x260>)
   d5482:	681b      	ldr	r3, [r3, #0]
   d5484:	4298      	cmp	r0, r3
   d5486:	d1b6      	bne.n	d53f6 <loop+0x66>
   d5488:	e7b7      	b.n	d53fa <loop+0x6a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d548a:	4d56      	ldr	r5, [pc, #344]	; (d55e4 <loop+0x254>)
   d548c:	792b      	ldrb	r3, [r5, #4]
   d548e:	b12b      	cbz	r3, d549c <loop+0x10c>
   d5490:	4b55      	ldr	r3, [pc, #340]	; (d55e8 <loop+0x258>)
   d5492:	781b      	ldrb	r3, [r3, #0]
   d5494:	2b04      	cmp	r3, #4
   d5496:	d001      	beq.n	d549c <loop+0x10c>
   d5498:	f7ff fa9c 	bl	d49d4 <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d549c:	f7ff fc14 	bl	d4cc8 <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d54a0:	796b      	ldrb	r3, [r5, #5]
   d54a2:	b90b      	cbnz	r3, d54a8 <loop+0x118>
      state = IDLE_STATE;
   d54a4:	2302      	movs	r3, #2
   d54a6:	e025      	b.n	d54f4 <loop+0x164>
    else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       // Troubleshooting code
   d54a8:	f004 fd19 	bl	d9ede <_ZN9TimeClass3nowEv>
   d54ac:	69eb      	ldr	r3, [r5, #28]
   d54ae:	1ac0      	subs	r0, r0, r3
   d54b0:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d54b4:	d920      	bls.n	d54f8 <loop+0x168>
      connectToParticle();
   d54b6:	f7ff f9ff 	bl	d48b8 <_Z17connectToParticlev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d54ba:	4b56      	ldr	r3, [pc, #344]	; (d5614 <loop+0x284>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d54bc:	4a58      	ldr	r2, [pc, #352]	; (d5620 <loop+0x290>)
   d54be:	781b      	ldrb	r3, [r3, #0]
   d54c0:	f88d 3000 	strb.w	r3, [sp]
   d54c4:	4957      	ldr	r1, [pc, #348]	; (d5624 <loop+0x294>)
   d54c6:	233c      	movs	r3, #60	; 0x3c
   d54c8:	a802      	add	r0, sp, #8
   d54ca:	f003 fcb7 	bl	d8e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d54ce:	9d03      	ldr	r5, [sp, #12]
   d54d0:	b17d      	cbz	r5, d54f2 <loop+0x162>
      if (--_M_use_count == 0)
   d54d2:	686b      	ldr	r3, [r5, #4]
   d54d4:	3b01      	subs	r3, #1
   d54d6:	606b      	str	r3, [r5, #4]
   d54d8:	b95b      	cbnz	r3, d54f2 <loop+0x162>
          _M_dispose();
   d54da:	682b      	ldr	r3, [r5, #0]
   d54dc:	4628      	mov	r0, r5
   d54de:	689b      	ldr	r3, [r3, #8]
   d54e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d54e2:	68ab      	ldr	r3, [r5, #8]
   d54e4:	3b01      	subs	r3, #1
   d54e6:	60ab      	str	r3, [r5, #8]
   d54e8:	b91b      	cbnz	r3, d54f2 <loop+0x162>
            _M_destroy();
   d54ea:	682b      	ldr	r3, [r5, #0]
   d54ec:	4628      	mov	r0, r5
   d54ee:	68db      	ldr	r3, [r3, #12]
   d54f0:	4798      	blx	r3
    state = REPORTING_STATE;
   d54f2:	2305      	movs	r3, #5
      state = ERROR_STATE;                                            // Response timed out
   d54f4:	7023      	strb	r3, [r4, #0]
   d54f6:	e783      	b.n	d5400 <loop+0x70>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d54f8:	f004 fd0e 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d54fc:	2801      	cmp	r0, #1
   d54fe:	dd03      	ble.n	d5508 <loop+0x178>
   d5500:	78eb      	ldrb	r3, [r5, #3]
   d5502:	b10b      	cbz	r3, d5508 <loop+0x178>
   d5504:	f7ff fa26 	bl	d4954 <_Z22disconnectFromParticlev>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5508:	2100      	movs	r1, #0
   d550a:	2007      	movs	r0, #7
   d550c:	f004 ff3f 	bl	da38e <digitalWrite>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5510:	2100      	movs	r1, #0
   d5512:	4839      	ldr	r0, [pc, #228]	; (d55f8 <loop+0x268>)
   d5514:	f000 fb50 	bl	d5bb8 <_ZN6AB18056setWDTEi>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5518:	f004 fcfe 	bl	d9f18 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d551c:	4b42      	ldr	r3, [pc, #264]	; (d5628 <loop+0x298>)
   d551e:	7d1a      	ldrb	r2, [r3, #20]
   d5520:	4604      	mov	r4, r0
   d5522:	b10a      	cbz	r2, d5528 <loop+0x198>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5524:	2202      	movs	r2, #2
   d5526:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)
   d5528:	483f      	ldr	r0, [pc, #252]	; (d5628 <loop+0x298>)
   d552a:	2200      	movs	r2, #0
   d552c:	2104      	movs	r1, #4
   d552e:	f7fe fe53 	bl	d41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d5532:	7d03      	ldrb	r3, [r0, #20]
   d5534:	4606      	mov	r6, r0
   d5536:	b35b      	cbz	r3, d5590 <loop+0x200>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5538:	233c      	movs	r3, #60	; 0x3c
   d553a:	f1c4 003c 	rsb	r0, r4, #60	; 0x3c
   d553e:	4358      	muls	r0, r3
        .duration(wakeInSeconds * 1000);
   d5540:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
   d5544:	bfa8      	it	ge
   d5546:	f44f 6061 	movge.w	r0, #3600	; 0xe10
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d554a:	6833      	ldr	r3, [r6, #0]
   d554c:	2801      	cmp	r0, #1
   d554e:	bfb8      	it	lt
   d5550:	2001      	movlt	r0, #1
   d5552:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d5556:	68db      	ldr	r3, [r3, #12]
   d5558:	4347      	muls	r7, r0
        if (!start) {
   d555a:	b12b      	cbz	r3, d5568 <loop+0x1d8>
            if (start->type == type) {
   d555c:	889a      	ldrh	r2, [r3, #4]
   d555e:	2a04      	cmp	r2, #4
   d5560:	f000 8127 	beq.w	d57b2 <loop+0x422>
            start = start->next;
   d5564:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d5566:	e7f8      	b.n	d555a <loop+0x1ca>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d5568:	4930      	ldr	r1, [pc, #192]	; (d562c <loop+0x29c>)
   d556a:	2010      	movs	r0, #16
   d556c:	f004 ff83 	bl	da476 <_ZnwjRKSt9nothrow_t>
   d5570:	4604      	mov	r4, r0
   d5572:	2800      	cmp	r0, #0
   d5574:	f000 811b 	beq.w	d57ae <loop+0x41e>
   d5578:	2210      	movs	r2, #16
   d557a:	2100      	movs	r1, #0
   d557c:	f005 fc6a 	bl	dae54 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d5580:	4b2b      	ldr	r3, [pc, #172]	; (d5630 <loop+0x2a0>)
   d5582:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5584:	2304      	movs	r3, #4
   d5586:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5588:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d558a:	e9c4 3702 	strd	r3, r7, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d558e:	6134      	str	r4, [r6, #16]
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5590:	4925      	ldr	r1, [pc, #148]	; (d5628 <loop+0x298>)
   d5592:	a802      	add	r0, sp, #8
   d5594:	f004 fa3a 	bl	d9a0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5598:	4817      	ldr	r0, [pc, #92]	; (d55f8 <loop+0x268>)
   d559a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d559e:	f000 fb0b 	bl	d5bb8 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d55a2:	9b02      	ldr	r3, [sp, #8]
        if (wakeupSource_) {
   d55a4:	b143      	cbz	r3, d55b8 <loop+0x228>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d55a6:	889a      	ldrh	r2, [r3, #4]
   d55a8:	2a01      	cmp	r2, #1
   d55aa:	d105      	bne.n	d55b8 <loop+0x228>
      if (result.wakeupPin() == userSwitch) sysStatus.lastTimePowered = Time.now(); // Gives you a chance to bring back a device (should reset lowBatteryMode in getBatteryConext() and put system back to IDLE_STATE)
   d55ac:	899b      	ldrh	r3, [r3, #12]
   d55ae:	2b04      	cmp	r3, #4
   d55b0:	d102      	bne.n	d55b8 <loop+0x228>
   d55b2:	f004 fc94 	bl	d9ede <_ZN9TimeClass3nowEv>
   d55b6:	6228      	str	r0, [r5, #32]
        if (wakeupSource_) {
   d55b8:	9802      	ldr	r0, [sp, #8]
   d55ba:	2800      	cmp	r0, #0
   d55bc:	f43f af20 	beq.w	d5400 <loop+0x70>
            free(wakeupSource_);
   d55c0:	f003 f908 	bl	d87d4 <free>
    } break;
   d55c4:	e71c      	b.n	d5400 <loop+0x70>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d55c6:	4b07      	ldr	r3, [pc, #28]	; (d55e4 <loop+0x254>)
   d55c8:	791b      	ldrb	r3, [r3, #4]
   d55ca:	b12b      	cbz	r3, d55d8 <loop+0x248>
   d55cc:	4b06      	ldr	r3, [pc, #24]	; (d55e8 <loop+0x258>)
   d55ce:	781b      	ldrb	r3, [r3, #0]
   d55d0:	2b03      	cmp	r3, #3
   d55d2:	d001      	beq.n	d55d8 <loop+0x248>
   d55d4:	f7ff f9fe 	bl	d49d4 <_Z22publishStateTransitionv>
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d55d8:	f7ff fbe6 	bl	d4da8 <_Z16takeMeasurementsv>
   d55dc:	e789      	b.n	d54f2 <loop+0x162>
   d55de:	bf00      	nop
   d55e0:	2003e588 	.word	0x2003e588
   d55e4:	2003e58c 	.word	0x2003e58c
   d55e8:	2003e548 	.word	0x2003e548
   d55ec:	2003e26c 	.word	0x2003e26c
   d55f0:	2003e2f0 	.word	0x2003e2f0
   d55f4:	2003e5b0 	.word	0x2003e5b0
   d55f8:	2003e270 	.word	0x2003e270
   d55fc:	2003e31c 	.word	0x2003e31c
   d5600:	2003e2e8 	.word	0x2003e2e8
   d5604:	2003e2b8 	.word	0x2003e2b8
   d5608:	2003e0f4 	.word	0x2003e0f4
   d560c:	000db444 	.word	0x000db444
   d5610:	2003e624 	.word	0x2003e624
   d5614:	2003e260 	.word	0x2003e260
   d5618:	000db463 	.word	0x000db463
   d561c:	2003e54c 	.word	0x2003e54c
   d5620:	000db3e8 	.word	0x000db3e8
   d5624:	000db3e2 	.word	0x000db3e2
   d5628:	2003e2a0 	.word	0x2003e2a0
   d562c:	000dbba0 	.word	0x000dbba0
   d5630:	00030010 	.word	0x00030010
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5634:	4d60      	ldr	r5, [pc, #384]	; (d57b8 <loop+0x428>)
   d5636:	792a      	ldrb	r2, [r5, #4]
   d5638:	b12a      	cbz	r2, d5646 <loop+0x2b6>
   d563a:	4b60      	ldr	r3, [pc, #384]	; (d57bc <loop+0x42c>)
   d563c:	781b      	ldrb	r3, [r3, #0]
   d563e:	2b05      	cmp	r3, #5
   d5640:	d001      	beq.n	d5646 <loop+0x2b6>
   d5642:	f7ff f9c7 	bl	d49d4 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d5646:	78eb      	ldrb	r3, [r5, #3]
   d5648:	b90b      	cbnz	r3, d564e <loop+0x2be>
   d564a:	f7ff f935 	bl	d48b8 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d564e:	f003 f819 	bl	d8684 <spark_cloud_flag_connected>
    if (!Particle.connected()) connectToParticle();                   // Just to make sure
   d5652:	b908      	cbnz	r0, d5658 <loop+0x2c8>
   d5654:	f7ff f930 	bl	d48b8 <_Z17connectToParticlev>
   d5658:	f003 f814 	bl	d8684 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d565c:	b140      	cbz	r0, d5670 <loop+0x2e0>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d565e:	f004 fc4f 	bl	d9f00 <_ZN9TimeClass4hourEv>
   d5662:	b908      	cbnz	r0, d5668 <loop+0x2d8>
   d5664:	f7ff fa1c 	bl	d4aa0 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d5668:	f7fe ff70 	bl	d454c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d566c:	2306      	movs	r3, #6
   d566e:	e741      	b.n	d54f4 <loop+0x164>
   d5670:	f002 fda4 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5674:	4b52      	ldr	r3, [pc, #328]	; (d57c0 <loop+0x430>)
   d5676:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d5678:	2301      	movs	r3, #1
   d567a:	e73b      	b.n	d54f4 <loop+0x164>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d567c:	4b4e      	ldr	r3, [pc, #312]	; (d57b8 <loop+0x428>)
   d567e:	791b      	ldrb	r3, [r3, #4]
   d5680:	b12b      	cbz	r3, d568e <loop+0x2fe>
   d5682:	4b4e      	ldr	r3, [pc, #312]	; (d57bc <loop+0x42c>)
   d5684:	781b      	ldrb	r3, [r3, #0]
   d5686:	2b06      	cmp	r3, #6
   d5688:	d001      	beq.n	d568e <loop+0x2fe>
   d568a:	f7ff f9a3 	bl	d49d4 <_Z22publishStateTransitionv>
    if (!dataInFlight && Time.minute() != currentMinutePeriod)  {     // Response received back to IDLE state and wait till the minute has passed to prevent double reporting
   d568e:	4d4d      	ldr	r5, [pc, #308]	; (d57c4 <loop+0x434>)
   d5690:	782b      	ldrb	r3, [r5, #0]
   d5692:	b953      	cbnz	r3, d56aa <loop+0x31a>
   d5694:	f004 fc40 	bl	d9f18 <_ZN9TimeClass6minuteEv>
   d5698:	4b4b      	ldr	r3, [pc, #300]	; (d57c8 <loop+0x438>)
   d569a:	681b      	ldr	r3, [r3, #0]
   d569c:	4298      	cmp	r0, r3
   d569e:	f47f af01 	bne.w	d54a4 <loop+0x114>
    else if (dataInFlight && millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d56a2:	782b      	ldrb	r3, [r5, #0]
   d56a4:	2b00      	cmp	r3, #0
   d56a6:	f43f aeab 	beq.w	d5400 <loop+0x70>
   d56aa:	f002 fd87 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d56ae:	4b47      	ldr	r3, [pc, #284]	; (d57cc <loop+0x43c>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	1ac0      	subs	r0, r0, r3
   d56b4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d56b8:	4298      	cmp	r0, r3
   d56ba:	f67f aea1 	bls.w	d5400 <loop+0x70>
   d56be:	f002 fd7d 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d56c2:	4b3f      	ldr	r3, [pc, #252]	; (d57c0 <loop+0x430>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d56c4:	4a42      	ldr	r2, [pc, #264]	; (d57d0 <loop+0x440>)
      resetTimeStamp = millis();
   d56c6:	6018      	str	r0, [r3, #0]
        val_(0) {
   d56c8:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d56ca:	f88d 3000 	strb.w	r3, [sp]
   d56ce:	4b41      	ldr	r3, [pc, #260]	; (d57d4 <loop+0x444>)
   d56d0:	4941      	ldr	r1, [pc, #260]	; (d57d8 <loop+0x448>)
   d56d2:	781b      	ldrb	r3, [r3, #0]
   d56d4:	4841      	ldr	r0, [pc, #260]	; (d57dc <loop+0x44c>)
   d56d6:	f7fe fdcd 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d56da:	e7cd      	b.n	d5678 <loop+0x2e8>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d56dc:	4c36      	ldr	r4, [pc, #216]	; (d57b8 <loop+0x428>)
   d56de:	7923      	ldrb	r3, [r4, #4]
   d56e0:	b12b      	cbz	r3, d56ee <loop+0x35e>
   d56e2:	4b36      	ldr	r3, [pc, #216]	; (d57bc <loop+0x42c>)
   d56e4:	781b      	ldrb	r3, [r3, #0]
   d56e6:	2b01      	cmp	r3, #1
   d56e8:	d001      	beq.n	d56ee <loop+0x35e>
   d56ea:	f7ff f973 	bl	d49d4 <_Z22publishStateTransitionv>
   d56ee:	f002 fd65 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d56f2:	4b33      	ldr	r3, [pc, #204]	; (d57c0 <loop+0x430>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d56fa:	3330      	adds	r3, #48	; 0x30
   d56fc:	4283      	cmp	r3, r0
   d56fe:	f4bf ae7f 	bcs.w	d5400 <loop+0x70>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5702:	6923      	ldr	r3, [r4, #16]
   d5704:	2b03      	cmp	r3, #3
   d5706:	dc13      	bgt.n	d5730 <loop+0x3a0>
   d5708:	f002 ffbc 	bl	d8684 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d570c:	b148      	cbz	r0, d5722 <loop+0x392>
   d570e:	2300      	movs	r3, #0
   d5710:	f88d 3000 	strb.w	r3, [sp]
   d5714:	4b2f      	ldr	r3, [pc, #188]	; (d57d4 <loop+0x444>)
   d5716:	4a32      	ldr	r2, [pc, #200]	; (d57e0 <loop+0x450>)
   d5718:	781b      	ldrb	r3, [r3, #0]
   d571a:	4932      	ldr	r1, [pc, #200]	; (d57e4 <loop+0x454>)
   d571c:	482f      	ldr	r0, [pc, #188]	; (d57dc <loop+0x44c>)
   d571e:	f7fe fda9 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5726:	f003 f8b5 	bl	d8894 <delay>
        System.reset();
   d572a:	f004 f96b 	bl	d9a04 <_ZN11SystemClass5resetEv>
   d572e:	e667      	b.n	d5400 <loop+0x70>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d5730:	f004 fbd5 	bl	d9ede <_ZN9TimeClass3nowEv>
   d5734:	69e3      	ldr	r3, [r4, #28]
   d5736:	1ac0      	subs	r0, r0, r3
   d5738:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d573c:	d91c      	bls.n	d5778 <loop+0x3e8>
   d573e:	f002 ffa1 	bl	d8684 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d5742:	b148      	cbz	r0, d5758 <loop+0x3c8>
   d5744:	2300      	movs	r3, #0
   d5746:	f88d 3000 	strb.w	r3, [sp]
   d574a:	4b22      	ldr	r3, [pc, #136]	; (d57d4 <loop+0x444>)
   d574c:	4a26      	ldr	r2, [pc, #152]	; (d57e8 <loop+0x458>)
   d574e:	781b      	ldrb	r3, [r3, #0]
   d5750:	4924      	ldr	r1, [pc, #144]	; (d57e4 <loop+0x454>)
   d5752:	4822      	ldr	r0, [pc, #136]	; (d57dc <loop+0x44c>)
   d5754:	f7fe fd8e 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5758:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d575c:	f003 f89a 	bl	d8894 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d5760:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5762:	4a15      	ldr	r2, [pc, #84]	; (d57b8 <loop+0x428>)
   d5764:	4821      	ldr	r0, [pc, #132]	; (d57ec <loop+0x45c>)
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d5766:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5768:	2101      	movs	r1, #1
   d576a:	f7ff fbd1 	bl	d4f10 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown(10);
   d576e:	210a      	movs	r1, #10
   d5770:	481f      	ldr	r0, [pc, #124]	; (d57f0 <loop+0x460>)
   d5772:	f000 fb7b 	bl	d5e6c <_ZN6AB180513deepPowerDownEi>
   d5776:	e643      	b.n	d5400 <loop+0x70>
   d5778:	f002 ff84 	bl	d8684 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);            // Brodcase Reset Action
   d577c:	b148      	cbz	r0, d5792 <loop+0x402>
   d577e:	2300      	movs	r3, #0
   d5780:	f88d 3000 	strb.w	r3, [sp]
   d5784:	4b13      	ldr	r3, [pc, #76]	; (d57d4 <loop+0x444>)
   d5786:	4a18      	ldr	r2, [pc, #96]	; (d57e8 <loop+0x458>)
   d5788:	781b      	ldrb	r3, [r3, #0]
   d578a:	4916      	ldr	r1, [pc, #88]	; (d57e4 <loop+0x454>)
   d578c:	4813      	ldr	r0, [pc, #76]	; (d57dc <loop+0x44c>)
   d578e:	f7fe fd71 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5792:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5796:	f003 f87d 	bl	d8894 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d579a:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d579c:	4a06      	ldr	r2, [pc, #24]	; (d57b8 <loop+0x428>)
   d579e:	4813      	ldr	r0, [pc, #76]	; (d57ec <loop+0x45c>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d57a0:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d57a2:	2101      	movs	r1, #1
   d57a4:	f7ff fbb4 	bl	d4f10 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        fullModemReset();                                             // Full Modem reset and reboots
   d57a8:	f7ff f946 	bl	d4a38 <_Z14fullModemResetv>
   d57ac:	e628      	b.n	d5400 <loop+0x70>
                valid_ = false;
   d57ae:	7530      	strb	r0, [r6, #20]
                return *this;
   d57b0:	e6ee      	b.n	d5590 <loop+0x200>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d57b2:	60df      	str	r7, [r3, #12]
                return *this;
   d57b4:	e6ec      	b.n	d5590 <loop+0x200>
   d57b6:	bf00      	nop
   d57b8:	2003e58c 	.word	0x2003e58c
   d57bc:	2003e548 	.word	0x2003e548
   d57c0:	2003e584 	.word	0x2003e584
   d57c4:	2003e2fe 	.word	0x2003e2fe
   d57c8:	2003e2f0 	.word	0x2003e2f0
   d57cc:	2003e5b4 	.word	0x2003e5b4
   d57d0:	000db2ce 	.word	0x000db2ce
   d57d4:	2003e260 	.word	0x2003e260
   d57d8:	000db3fd 	.word	0x000db3fd
   d57dc:	2003e54c 	.word	0x2003e54c
   d57e0:	000db416 	.word	0x000db416
   d57e4:	000db3e2 	.word	0x000db3e2
   d57e8:	000db42a 	.word	0x000db42a
   d57ec:	2003e31c 	.word	0x2003e31c
   d57f0:	2003e270 	.word	0x2003e270

000d57f4 <_GLOBAL__sub_I___appProductID>:
}
   d57f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d57f6:	4b40      	ldr	r3, [pc, #256]	; (d58f8 <_GLOBAL__sub_I___appProductID+0x104>)
              error_(SYSTEM_ERROR_NONE) {
   d57f8:	4e40      	ldr	r6, [pc, #256]	; (d58fc <_GLOBAL__sub_I___appProductID+0x108>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d57fa:	4d41      	ldr	r5, [pc, #260]	; (d5900 <_GLOBAL__sub_I___appProductID+0x10c>)
   d57fc:	2400      	movs	r4, #0
   d57fe:	601c      	str	r4, [r3, #0]
   d5800:	4b40      	ldr	r3, [pc, #256]	; (d5904 <_GLOBAL__sub_I___appProductID+0x110>)
   d5802:	2701      	movs	r7, #1
   d5804:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5806:	f004 fd5b 	bl	da2c0 <spark_protocol_instance>
   d580a:	4623      	mov	r3, r4
   d580c:	4622      	mov	r2, r4
   d580e:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5812:	f004 fd5d 	bl	da2d0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5816:	f004 fd53 	bl	da2c0 <spark_protocol_instance>
   d581a:	4622      	mov	r2, r4
   d581c:	4623      	mov	r3, r4
   d581e:	210c      	movs	r1, #12
   d5820:	f004 fd5e 	bl	da2e0 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5824:	4b38      	ldr	r3, [pc, #224]	; (d5908 <_GLOBAL__sub_I___appProductID+0x114>)
   d5826:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5828:	6034      	str	r4, [r6, #0]
   d582a:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d582c:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d582e:	2002      	movs	r0, #2
   d5830:	f002 fe8e 	bl	d8550 <set_system_mode>
   d5834:	462a      	mov	r2, r5
   d5836:	4935      	ldr	r1, [pc, #212]	; (d590c <_GLOBAL__sub_I___appProductID+0x118>)
   d5838:	4630      	mov	r0, r6
   d583a:	f004 fe15 	bl	da468 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d583e:	4621      	mov	r1, r4
   d5840:	4638      	mov	r0, r7
   d5842:	f002 fea5 	bl	d8590 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5846:	4639      	mov	r1, r7
   d5848:	2004      	movs	r0, #4
   d584a:	f002 fc8f 	bl	d816c <HAL_Feature_Set>
        : config_(config) {
   d584e:	4830      	ldr	r0, [pc, #192]	; (d5910 <_GLOBAL__sub_I___appProductID+0x11c>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5850:	4930      	ldr	r1, [pc, #192]	; (d5914 <_GLOBAL__sub_I___appProductID+0x120>)
              valid_(true) {
   d5852:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5856:	4603      	mov	r3, r0
   d5858:	1d02      	adds	r2, r0, #4
   d585a:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d585e:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5860:	4b2d      	ldr	r3, [pc, #180]	; (d5918 <_GLOBAL__sub_I___appProductID+0x124>)
   d5862:	6043      	str	r3, [r0, #4]
   d5864:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d5866:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d586a:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d586c:	7204      	strb	r4, [r0, #8]
   d586e:	f004 fdfb 	bl	da468 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5872:	f004 fdd1 	bl	da418 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5876:	4e29      	ldr	r6, [pc, #164]	; (d591c <_GLOBAL__sub_I___appProductID+0x128>)
   d5878:	4601      	mov	r1, r0
   d587a:	4623      	mov	r3, r4
   d587c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5880:	4630      	mov	r0, r6
   d5882:	f001 fdaf 	bl	d73e4 <_ZN6MB85RCC1ER7TwoWireji>
   d5886:	4b26      	ldr	r3, [pc, #152]	; (d5920 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5888:	6033      	str	r3, [r6, #0]
   d588a:	4630      	mov	r0, r6
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d588c:	4e25      	ldr	r6, [pc, #148]	; (d5924 <_GLOBAL__sub_I___appProductID+0x130>)
   d588e:	4926      	ldr	r1, [pc, #152]	; (d5928 <_GLOBAL__sub_I___appProductID+0x134>)
   d5890:	462a      	mov	r2, r5
   d5892:	f004 fde9 	bl	da468 <__aeabi_atexit>
   d5896:	4925      	ldr	r1, [pc, #148]	; (d592c <_GLOBAL__sub_I___appProductID+0x138>)
   d5898:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d589c:	4630      	mov	r0, r6
   d589e:	f002 fae1 	bl	d7e64 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d58a2:	4b23      	ldr	r3, [pc, #140]	; (d5930 <_GLOBAL__sub_I___appProductID+0x13c>)
   d58a4:	6033      	str	r3, [r6, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d58a6:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d58a8:	4e22      	ldr	r6, [pc, #136]	; (d5934 <_GLOBAL__sub_I___appProductID+0x140>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d58aa:	4923      	ldr	r1, [pc, #140]	; (d5938 <_GLOBAL__sub_I___appProductID+0x144>)
   d58ac:	462a      	mov	r2, r5
   d58ae:	f004 fddb 	bl	da468 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d58b2:	4622      	mov	r2, r4
   d58b4:	2110      	movs	r1, #16
AssetTracker gps;
   d58b6:	4c21      	ldr	r4, [pc, #132]	; (d593c <_GLOBAL__sub_I___appProductID+0x148>)
DS18B20 ds18b20(tempSensors);
   d58b8:	4630      	mov	r0, r6
   d58ba:	f001 fbe1 	bl	d7080 <_ZN7DS18B20C1Etb>
   d58be:	462a      	mov	r2, r5
   d58c0:	491f      	ldr	r1, [pc, #124]	; (d5940 <_GLOBAL__sub_I___appProductID+0x14c>)
   d58c2:	4630      	mov	r0, r6
   d58c4:	f004 fdd0 	bl	da468 <__aeabi_atexit>
AssetTracker gps;
   d58c8:	4620      	mov	r0, r4
   d58ca:	f000 ff13 	bl	d66f4 <_ZN12AssetTrackerC1Ev>
   d58ce:	462a      	mov	r2, r5
   d58d0:	491c      	ldr	r1, [pc, #112]	; (d5944 <_GLOBAL__sub_I___appProductID+0x150>)
   d58d2:	4620      	mov	r0, r4
   d58d4:	f004 fdc8 	bl	da468 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d58d8:	f004 fd9e 	bl	da418 <_Z19__fetch_global_Wirev>
   d58dc:	4c1a      	ldr	r4, [pc, #104]	; (d5948 <_GLOBAL__sub_I___appProductID+0x154>)
   d58de:	4601      	mov	r1, r0
   d58e0:	2269      	movs	r2, #105	; 0x69
   d58e2:	4620      	mov	r0, r4
   d58e4:	f000 f86a 	bl	d59bc <_ZN6AB1805C1ER7TwoWireh>
   d58e8:	462a      	mov	r2, r5
   d58ea:	4620      	mov	r0, r4
   d58ec:	4917      	ldr	r1, [pc, #92]	; (d594c <_GLOBAL__sub_I___appProductID+0x158>)
}
   d58ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d58f2:	f004 bdb9 	b.w	da468 <__aeabi_atexit>
   d58f6:	bf00      	nop
   d58f8:	2003e25c 	.word	0x2003e25c
   d58fc:	2003e250 	.word	0x2003e250
   d5900:	2003e200 	.word	0x2003e200
   d5904:	2003e260 	.word	0x2003e260
   d5908:	ffff0000 	.word	0xffff0000
   d590c:	000d41c7 	.word	0x000d41c7
   d5910:	2003e2a0 	.word	0x2003e2a0
   d5914:	000d40d5 	.word	0x000d40d5
   d5918:	00030010 	.word	0x00030010
   d591c:	2003e31c 	.word	0x2003e31c
   d5920:	000db474 	.word	0x000db474
   d5924:	2003e54c 	.word	0x2003e54c
   d5928:	000d414d 	.word	0x000d414d
   d592c:	2003f418 	.word	0x2003f418
   d5930:	000db490 	.word	0x000db490
   d5934:	2003e300 	.word	0x2003e300
   d5938:	000d4125 	.word	0x000d4125
   d593c:	2003e32c 	.word	0x2003e32c
   d5940:	000d70d5 	.word	0x000d70d5
   d5944:	000d6841 	.word	0x000d6841
   d5948:	2003e270 	.word	0x2003e270
   d594c:	000d5951 	.word	0x000d5951

000d5950 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5950:	4770      	bx	lr

000d5952 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5952:	b510      	push	{r4, lr}
}
   d5954:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5956:	4604      	mov	r4, r0
}
   d5958:	f004 fd8b 	bl	da472 <_ZdlPvj>
   d595c:	4620      	mov	r0, r4
   d595e:	bd10      	pop	{r4, pc}

000d5960 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5960:	b40e      	push	{r1, r2, r3}
   d5962:	b510      	push	{r4, lr}
   d5964:	b08d      	sub	sp, #52	; 0x34
   d5966:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5968:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d596a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d596e:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5970:	2300      	movs	r3, #0
   d5972:	2020      	movs	r0, #32
   d5974:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5978:	e9cd 4200 	strd	r4, r2, [sp]
   d597c:	2001      	movs	r0, #1
   d597e:	aa04      	add	r2, sp, #16
   d5980:	f002 fdcc 	bl	d851c <log_message_v>
}
   d5984:	b00d      	add	sp, #52	; 0x34
   d5986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d598a:	b003      	add	sp, #12
   d598c:	4770      	bx	lr

000d598e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d598e:	b40e      	push	{r1, r2, r3}
   d5990:	b510      	push	{r4, lr}
   d5992:	b08d      	sub	sp, #52	; 0x34
   d5994:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5996:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5998:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d599c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d599e:	2300      	movs	r3, #0
   d59a0:	2020      	movs	r0, #32
   d59a2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d59a6:	e9cd 4200 	strd	r4, r2, [sp]
   d59aa:	2032      	movs	r0, #50	; 0x32
   d59ac:	aa04      	add	r2, sp, #16
   d59ae:	f002 fdb5 	bl	d851c <log_message_v>
}
   d59b2:	b00d      	add	sp, #52	; 0x34
   d59b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59b8:	b003      	add	sp, #12
   d59ba:	4770      	bx	lr

000d59bc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59bc:	b510      	push	{r4, lr}
   d59be:	7202      	strb	r2, [r0, #8]
   d59c0:	22ff      	movs	r2, #255	; 0xff
   d59c2:	8142      	strh	r2, [r0, #10]
   d59c4:	2200      	movs	r2, #0
   d59c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d59ca:	6142      	str	r2, [r0, #20]
   d59cc:	7602      	strb	r2, [r0, #24]
   d59ce:	61c2      	str	r2, [r0, #28]
    instance = this;
   d59d0:	4a02      	ldr	r2, [pc, #8]	; (d59dc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59d2:	4c03      	ldr	r4, [pc, #12]	; (d59e0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d59d4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59d6:	e9c0 4100 	strd	r4, r1, [r0]
}
   d59da:	bd10      	pop	{r4, pc}
   d59dc:	2003e5bc 	.word	0x2003e5bc
   d59e0:	000db744 	.word	0x000db744

000d59e4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d59e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59e8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d59ec:	4604      	mov	r4, r0
   d59ee:	4689      	mov	r9, r1
   d59f0:	4616      	mov	r6, r2
   d59f2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d59f4:	f1b8 0f00 	cmp.w	r8, #0
   d59f8:	d002      	beq.n	d5a00 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d59fa:	6840      	ldr	r0, [r0, #4]
   d59fc:	f003 fc4a 	bl	d9294 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5a00:	7a21      	ldrb	r1, [r4, #8]
   d5a02:	6860      	ldr	r0, [r4, #4]
   d5a04:	f003 fc3b 	bl	d927e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5a08:	6860      	ldr	r0, [r4, #4]
   d5a0a:	6803      	ldr	r3, [r0, #0]
   d5a0c:	4649      	mov	r1, r9
   d5a0e:	689b      	ldr	r3, [r3, #8]
   d5a10:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d5a12:	6860      	ldr	r0, [r4, #4]
   d5a14:	2100      	movs	r1, #0
   d5a16:	f003 fc39 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5a1a:	4605      	mov	r5, r0
   d5a1c:	bb00      	cbnz	r0, d5a60 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a1e:	2301      	movs	r3, #1
   d5a20:	7a21      	ldrb	r1, [r4, #8]
   d5a22:	6860      	ldr	r0, [r4, #4]
   d5a24:	463a      	mov	r2, r7
   d5a26:	f003 fc18 	bl	d925a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5a2a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a2c:	4603      	mov	r3, r0
        if (count == num) {
   d5a2e:	d109      	bne.n	d5a44 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d5a30:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d5a32:	42be      	cmp	r6, r7
   d5a34:	d01c      	beq.n	d5a70 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5a36:	6860      	ldr	r0, [r4, #4]
   d5a38:	6803      	ldr	r3, [r0, #0]
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	4798      	blx	r3
   d5a3e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5a42:	e7f6      	b.n	d5a32 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5a44:	490b      	ldr	r1, [pc, #44]	; (d5a74 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5a46:	480c      	ldr	r0, [pc, #48]	; (d5a78 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a48:	464a      	mov	r2, r9
   d5a4a:	f7ff ffa0 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d5a4e:	f1b8 0f00 	cmp.w	r8, #0
   d5a52:	d002      	beq.n	d5a5a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5a54:	6860      	ldr	r0, [r4, #4]
   d5a56:	f003 fc26 	bl	d92a6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d5a5a:	4628      	mov	r0, r5
   d5a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5a60:	4603      	mov	r3, r0
   d5a62:	4906      	ldr	r1, [pc, #24]	; (d5a7c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5a64:	4804      	ldr	r0, [pc, #16]	; (d5a78 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a66:	464a      	mov	r2, r9
   d5a68:	f7ff ff91 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5a6c:	2500      	movs	r5, #0
   d5a6e:	e7ee      	b.n	d5a4e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5a70:	2501      	movs	r5, #1
   d5a72:	e7ec      	b.n	d5a4e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5a74:	000db4f5 	.word	0x000db4f5
   d5a78:	2003e5b8 	.word	0x2003e5b8
   d5a7c:	000db51a 	.word	0x000db51a

000d5a80 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5a80:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5a82:	9300      	str	r3, [sp, #0]
   d5a84:	2301      	movs	r3, #1
   d5a86:	f7ff ffad 	bl	d59e4 <_ZN6AB180513readRegistersEhPhjb>
}
   d5a8a:	b003      	add	sp, #12
   d5a8c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a90 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5a92:	8943      	ldrh	r3, [r0, #10]
   d5a94:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5a96:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5a98:	d010      	beq.n	d5abc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5a9a:	4e19      	ldr	r6, [pc, #100]	; (d5b00 <_ZN6AB180510detectChipEv+0x70>)
   d5a9c:	4d19      	ldr	r5, [pc, #100]	; (d5b04 <_ZN6AB180510detectChipEv+0x74>)
   d5a9e:	f002 fb8d 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5aa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5aa6:	d209      	bcs.n	d5abc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5aa8:	8960      	ldrh	r0, [r4, #10]
   d5aaa:	f004 fc89 	bl	da3c0 <digitalRead>
   d5aae:	2801      	cmp	r0, #1
   d5ab0:	d004      	beq.n	d5abc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5ab2:	4631      	mov	r1, r6
   d5ab4:	4628      	mov	r0, r5
   d5ab6:	f7fe fbc6 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5aba:	e7f0      	b.n	d5a9e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5abc:	2301      	movs	r3, #1
   d5abe:	f10d 0207 	add.w	r2, sp, #7
   d5ac2:	2128      	movs	r1, #40	; 0x28
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f7ff ffdb 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d5aca:	b930      	cbnz	r0, d5ada <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d5acc:	480d      	ldr	r0, [pc, #52]	; (d5b04 <_ZN6AB180510detectChipEv+0x74>)
   d5ace:	490e      	ldr	r1, [pc, #56]	; (d5b08 <_ZN6AB180510detectChipEv+0x78>)
   d5ad0:	f7fe fbb9 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5ad4:	2000      	movs	r0, #0
}
   d5ad6:	b002      	add	sp, #8
   d5ad8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d5ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5ade:	2b18      	cmp	r3, #24
   d5ae0:	d1f4      	bne.n	d5acc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d5ae2:	2301      	movs	r3, #1
   d5ae4:	f10d 0207 	add.w	r2, sp, #7
   d5ae8:	2129      	movs	r1, #41	; 0x29
   d5aea:	4620      	mov	r0, r4
   d5aec:	f7ff ffc8 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d5af0:	2800      	cmp	r0, #0
   d5af2:	d0eb      	beq.n	d5acc <_ZN6AB180510detectChipEv+0x3c>
   d5af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5af8:	2b05      	cmp	r3, #5
   d5afa:	d1e7      	bne.n	d5acc <_ZN6AB180510detectChipEv+0x3c>
   d5afc:	e7eb      	b.n	d5ad6 <_ZN6AB180510detectChipEv+0x46>
   d5afe:	bf00      	nop
   d5b00:	000db53e 	.word	0x000db53e
   d5b04:	2003e5b8 	.word	0x2003e5b8
   d5b08:	000db553 	.word	0x000db553

000d5b0c <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d5b0c:	b507      	push	{r0, r1, r2, lr}
   d5b0e:	4613      	mov	r3, r2
    uint8_t value = 0;
   d5b10:	2200      	movs	r2, #0
   d5b12:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d5b16:	f10d 0207 	add.w	r2, sp, #7
   d5b1a:	f7ff ffb1 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d5b1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5b22:	b003      	add	sp, #12
   d5b24:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b28 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d5b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b2c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5b30:	4604      	mov	r4, r0
   d5b32:	460f      	mov	r7, r1
   d5b34:	4615      	mov	r5, r2
   d5b36:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d5b38:	f1b8 0f00 	cmp.w	r8, #0
   d5b3c:	d002      	beq.n	d5b44 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f003 fba8 	bl	d9294 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5b44:	7a21      	ldrb	r1, [r4, #8]
   d5b46:	6860      	ldr	r0, [r4, #4]
   d5b48:	f003 fb99 	bl	d927e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5b4c:	6860      	ldr	r0, [r4, #4]
   d5b4e:	6803      	ldr	r3, [r0, #0]
   d5b50:	4639      	mov	r1, r7
   d5b52:	689b      	ldr	r3, [r3, #8]
   d5b54:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b56:	442e      	add	r6, r5
   d5b58:	42b5      	cmp	r5, r6
   d5b5a:	6860      	ldr	r0, [r4, #4]
   d5b5c:	d005      	beq.n	d5b6a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5b5e:	6803      	ldr	r3, [r0, #0]
   d5b60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b64:	689b      	ldr	r3, [r3, #8]
   d5b66:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b68:	e7f6      	b.n	d5b58 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d5b6a:	2101      	movs	r1, #1
   d5b6c:	f003 fb8e 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5b70:	4603      	mov	r3, r0
   d5b72:	b170      	cbz	r0, d5b92 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5b74:	4908      	ldr	r1, [pc, #32]	; (d5b98 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d5b76:	4809      	ldr	r0, [pc, #36]	; (d5b9c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d5b78:	463a      	mov	r2, r7
   d5b7a:	f7ff ff08 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5b7e:	2500      	movs	r5, #0
    }

    if (lock) {
   d5b80:	f1b8 0f00 	cmp.w	r8, #0
   d5b84:	d002      	beq.n	d5b8c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d5b86:	6860      	ldr	r0, [r4, #4]
   d5b88:	f003 fb8d 	bl	d92a6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5b8c:	4628      	mov	r0, r5
   d5b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5b92:	2501      	movs	r5, #1
   d5b94:	e7f4      	b.n	d5b80 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d5b96:	bf00      	nop
   d5b98:	000db560 	.word	0x000db560
   d5b9c:	2003e5b8 	.word	0x2003e5b8

000d5ba0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5ba2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d5ba6:	9300      	str	r3, [sp, #0]
   d5ba8:	f10d 020f 	add.w	r2, sp, #15
   d5bac:	2301      	movs	r3, #1
   d5bae:	f7ff ffbb 	bl	d5b28 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5bb2:	b005      	add	sp, #20
   d5bb4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bb8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d5bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d5bba:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5bbc:	460c      	mov	r4, r1
   d5bbe:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5bc0:	491a      	ldr	r1, [pc, #104]	; (d5c2c <_ZN6AB18056setWDTEi+0x74>)
   d5bc2:	481b      	ldr	r0, [pc, #108]	; (d5c30 <_ZN6AB18056setWDTEi+0x78>)
   d5bc4:	f7fe fb3f 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d5bc8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d5bca:	bfb8      	it	lt
   d5bcc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5bce:	b97c      	cbnz	r4, d5bf0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5bd0:	2301      	movs	r3, #1
   d5bd2:	4622      	mov	r2, r4
   d5bd4:	211b      	movs	r1, #27
   d5bd6:	4628      	mov	r0, r5
   d5bd8:	f7ff ffe2 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5bdc:	4915      	ldr	r1, [pc, #84]	; (d5c34 <_ZN6AB18056setWDTEi+0x7c>)
   d5bde:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5be0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5be2:	4813      	ldr	r0, [pc, #76]	; (d5c30 <_ZN6AB18056setWDTEi+0x78>)
   d5be4:	f7ff febc 	bl	d5960 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5be8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5bea:	616c      	str	r4, [r5, #20]
}
   d5bec:	4630      	mov	r0, r6
   d5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5bf0:	2c03      	cmp	r4, #3
   d5bf2:	dd19      	ble.n	d5c28 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5bf4:	10a7      	asrs	r7, r4, #2
   d5bf6:	2f1f      	cmp	r7, #31
   d5bf8:	bfa8      	it	ge
   d5bfa:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5bfc:	00ba      	lsls	r2, r7, #2
   d5bfe:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5c02:	2301      	movs	r3, #1
   d5c04:	b2d2      	uxtb	r2, r2
   d5c06:	211b      	movs	r1, #27
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7ff ffc9 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5c0e:	463a      	mov	r2, r7
   d5c10:	4603      	mov	r3, r0
   d5c12:	4909      	ldr	r1, [pc, #36]	; (d5c38 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5c14:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5c16:	4806      	ldr	r0, [pc, #24]	; (d5c30 <_ZN6AB18056setWDTEi+0x78>)
   d5c18:	f7ff fea2 	bl	d5960 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5c1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5c20:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5c22:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5c24:	616f      	str	r7, [r5, #20]
   d5c26:	e7e1      	b.n	d5bec <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5c28:	2701      	movs	r7, #1
   d5c2a:	e7e7      	b.n	d5bfc <_ZN6AB18056setWDTEi+0x44>
   d5c2c:	000db585 	.word	0x000db585
   d5c30:	2003e5b8 	.word	0x2003e5b8
   d5c34:	000db58f 	.word	0x000db58f
   d5c38:	000db5ab 	.word	0x000db5ab

000d5c3c <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c3c:	460b      	mov	r3, r1
    if (instance) {
   d5c3e:	4907      	ldr	r1, [pc, #28]	; (d5c5c <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c40:	4602      	mov	r2, r0
    if (instance) {
   d5c42:	6808      	ldr	r0, [r1, #0]
   d5c44:	b148      	cbz	r0, d5c5a <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5c46:	2b00      	cmp	r3, #0
   d5c48:	bf08      	it	eq
   d5c4a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d5c4e:	d104      	bne.n	d5c5a <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5c50:	68c3      	ldr	r3, [r0, #12]
   d5c52:	b113      	cbz	r3, d5c5a <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5c54:	2100      	movs	r1, #0
   d5c56:	f7ff bfaf 	b.w	d5bb8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5c5a:	4770      	bx	lr
   d5c5c:	2003e5bc 	.word	0x2003e5bc

000d5c60 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5c64:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5c68:	4605      	mov	r5, r0
   d5c6a:	4616      	mov	r6, r2
   d5c6c:	461f      	mov	r7, r3
    if (lock) {
   d5c6e:	f1b8 0f00 	cmp.w	r8, #0
   d5c72:	d004      	beq.n	d5c7e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5c74:	6840      	ldr	r0, [r0, #4]
   d5c76:	9101      	str	r1, [sp, #4]
   d5c78:	f003 fb0c 	bl	d9294 <_ZN7TwoWire4lockEv>
   d5c7c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5c7e:	9101      	str	r1, [sp, #4]
   d5c80:	2300      	movs	r3, #0
   d5c82:	f10d 020f 	add.w	r2, sp, #15
   d5c86:	4628      	mov	r0, r5
   d5c88:	f7ff fefa 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5c8c:	4604      	mov	r4, r0
   d5c8e:	b160      	cbz	r0, d5caa <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5c90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5c94:	ea03 0206 	and.w	r2, r3, r6
   d5c98:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5c9a:	4293      	cmp	r3, r2
   d5c9c:	d005      	beq.n	d5caa <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5c9e:	9901      	ldr	r1, [sp, #4]
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	4628      	mov	r0, r5
   d5ca4:	f7ff ff7c 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
   d5ca8:	4604      	mov	r4, r0
    if (lock) {
   d5caa:	f1b8 0f00 	cmp.w	r8, #0
   d5cae:	d002      	beq.n	d5cb6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5cb0:	6868      	ldr	r0, [r5, #4]
   d5cb2:	f003 faf8 	bl	d92a6 <_ZN7TwoWire6unlockEv>
}
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	b004      	add	sp, #16
   d5cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cbe <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cbe:	b513      	push	{r0, r1, r4, lr}
   d5cc0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5cc2:	f10d 0207 	add.w	r2, sp, #7
   d5cc6:	f7ff fedb 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5cca:	b128      	cbz	r0, d5cd8 <_ZN6AB180510isBitClearEhhb+0x1a>
   d5ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5cd0:	421c      	tst	r4, r3
   d5cd2:	bf0c      	ite	eq
   d5cd4:	2001      	moveq	r0, #1
   d5cd6:	2000      	movne	r0, #0
}
   d5cd8:	b002      	add	sp, #8
   d5cda:	bd10      	pop	{r4, pc}

000d5cdc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cdc:	b513      	push	{r0, r1, r4, lr}
   d5cde:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5ce0:	f10d 0207 	add.w	r2, sp, #7
   d5ce4:	f7ff fecc 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5ce8:	b128      	cbz	r0, d5cf6 <_ZN6AB18058isBitSetEhhb+0x1a>
   d5cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5cee:	421c      	tst	r4, r3
   d5cf0:	bf14      	ite	ne
   d5cf2:	2001      	movne	r0, #1
   d5cf4:	2000      	moveq	r0, #0
}
   d5cf6:	b002      	add	sp, #8
   d5cf8:	bd10      	pop	{r4, pc}

000d5cfa <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cfa:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5cfc:	43d2      	mvns	r2, r2
   d5cfe:	9300      	str	r3, [sp, #0]
   d5d00:	b2d2      	uxtb	r2, r2
   d5d02:	2300      	movs	r3, #0
   d5d04:	f7ff ffac 	bl	d5c60 <_ZN6AB180512maskRegisterEhhhb>
}
   d5d08:	b003      	add	sp, #12
   d5d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d10 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5d12:	2301      	movs	r3, #1
   d5d14:	f10d 0207 	add.w	r2, sp, #7
   d5d18:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5d1a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5d1c:	f7ff feb0 	bl	d5a80 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5d20:	4605      	mov	r5, r0
   d5d22:	b938      	cbnz	r0, d5d34 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5d24:	491e      	ldr	r1, [pc, #120]	; (d5da0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5d26:	481f      	ldr	r0, [pc, #124]	; (d5da4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5d28:	22ad      	movs	r2, #173	; 0xad
   d5d2a:	f7ff fe30 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
}
   d5d2e:	4628      	mov	r0, r5
   d5d30:	b003      	add	sp, #12
   d5d32:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d38:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d3c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d5d40:	d00b      	beq.n	d5d5a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d42:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d44:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d46:	210f      	movs	r1, #15
   d5d48:	4620      	mov	r0, r4
   d5d4a:	f7ff ffd6 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d5d4e:	4a16      	ldr	r2, [pc, #88]	; (d5da8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5d50:	4916      	ldr	r1, [pc, #88]	; (d5dac <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5d52:	4814      	ldr	r0, [pc, #80]	; (d5da4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5d54:	f7fe fa77 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5d58:	e7e9      	b.n	d5d2e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5d5a:	2208      	movs	r2, #8
   d5d5c:	2117      	movs	r1, #23
   d5d5e:	4620      	mov	r0, r4
   d5d60:	f7ff ffbc 	bl	d5cdc <_ZN6AB18058isBitSetEhhb>
   d5d64:	b118      	cbz	r0, d5d6e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d66:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5d68:	4a11      	ldr	r2, [pc, #68]	; (d5db0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d6a:	61e3      	str	r3, [r4, #28]
   d5d6c:	e7f0      	b.n	d5d50 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d5d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d72:	071a      	lsls	r2, r3, #28
   d5d74:	d509      	bpl.n	d5d8a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5d76:	2303      	movs	r3, #3
   d5d78:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5d7a:	2208      	movs	r2, #8
   d5d7c:	2301      	movs	r3, #1
   d5d7e:	210f      	movs	r1, #15
   d5d80:	4620      	mov	r0, r4
   d5d82:	f7ff ffba 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5d86:	4a0b      	ldr	r2, [pc, #44]	; (d5db4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5d88:	e7e2      	b.n	d5d50 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5d8a:	075b      	lsls	r3, r3, #29
   d5d8c:	d5cf      	bpl.n	d5d2e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d5d8e:	2204      	movs	r2, #4
   d5d90:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5d92:	2301      	movs	r3, #1
   d5d94:	210f      	movs	r1, #15
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff ffaf 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5d9c:	4a06      	ldr	r2, [pc, #24]	; (d5db8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d5d9e:	e7d7      	b.n	d5d50 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5da0:	000db5fe 	.word	0x000db5fe
   d5da4:	2003e5b8 	.word	0x2003e5b8
   d5da8:	000db5cf 	.word	0x000db5cf
   d5dac:	000db61d 	.word	0x000db61d
   d5db0:	000db5d8 	.word	0x000db5d8
   d5db4:	000db5e8 	.word	0x000db5e8
   d5db8:	000db5f8 	.word	0x000db5f8

000d5dbc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5dbc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d5dbe:	9300      	str	r3, [sp, #0]
   d5dc0:	4613      	mov	r3, r2
   d5dc2:	22ff      	movs	r2, #255	; 0xff
   d5dc4:	f7ff ff4c 	bl	d5c60 <_ZN6AB180512maskRegisterEhhhb>
}
   d5dc8:	b003      	add	sp, #12
   d5dca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5dd0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d5dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dd2:	460f      	mov	r7, r1
   d5dd4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d5dd6:	2301      	movs	r3, #1
   d5dd8:	2200      	movs	r2, #0
   d5dda:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d5ddc:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d5dde:	f7ff fedf 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5de2:	4604      	mov	r4, r0
   d5de4:	b938      	cbnz	r0, d5df6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d5de6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d5dea:	491e      	ldr	r1, [pc, #120]	; (d5e64 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d5dec:	481e      	ldr	r0, [pc, #120]	; (d5e68 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d5dee:	f7ff fdce 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
}
   d5df2:	4620      	mov	r0, r4
   d5df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d5df6:	2301      	movs	r3, #1
   d5df8:	2223      	movs	r2, #35	; 0x23
   d5dfa:	2118      	movs	r1, #24
   d5dfc:	4628      	mov	r0, r5
   d5dfe:	f7ff fecf 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5e02:	4604      	mov	r4, r0
   d5e04:	b910      	cbnz	r0, d5e0c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d5e06:	f240 229b 	movw	r2, #667	; 0x29b
   d5e0a:	e7ee      	b.n	d5dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d5e0c:	2fff      	cmp	r7, #255	; 0xff
   d5e0e:	bfa8      	it	ge
   d5e10:	27ff      	movge	r7, #255	; 0xff
   d5e12:	2f01      	cmp	r7, #1
   d5e14:	bfb8      	it	lt
   d5e16:	2701      	movlt	r7, #1
   d5e18:	2301      	movs	r3, #1
   d5e1a:	b2fa      	uxtb	r2, r7
   d5e1c:	2119      	movs	r1, #25
   d5e1e:	4628      	mov	r0, r5
   d5e20:	f7ff febe 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5e24:	4604      	mov	r4, r0
   d5e26:	b910      	cbnz	r0, d5e2e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d5e28:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d5e2c:	e7dd      	b.n	d5dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d5e2e:	2301      	movs	r3, #1
   d5e30:	2208      	movs	r2, #8
   d5e32:	2112      	movs	r1, #18
   d5e34:	4628      	mov	r0, r5
   d5e36:	f7ff ffc1 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5e3a:	4604      	mov	r4, r0
   d5e3c:	b910      	cbnz	r0, d5e44 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d5e3e:	f240 22af 	movw	r2, #687	; 0x2af
   d5e42:	e7d2      	b.n	d5dea <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d5e44:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d5e46:	f04f 0301 	mov.w	r3, #1
   d5e4a:	bf14      	ite	ne
   d5e4c:	2283      	movne	r2, #131	; 0x83
   d5e4e:	2282      	moveq	r2, #130	; 0x82
   d5e50:	2118      	movs	r1, #24
   d5e52:	4628      	mov	r0, r5
   d5e54:	f7ff fea4 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5e58:	4604      	mov	r4, r0
   d5e5a:	2800      	cmp	r0, #0
   d5e5c:	d1c9      	bne.n	d5df2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d5e5e:	f240 22b9 	movw	r2, #697	; 0x2b9
   d5e62:	e7c2      	b.n	d5dea <_ZN6AB180517setCountdownTimerEib+0x1a>
   d5e64:	000db62e 	.word	0x000db62e
   d5e68:	2003e5b8 	.word	0x2003e5b8

000d5e6c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d5e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d5e70:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d5e72:	4605      	mov	r5, r0
   d5e74:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d5e76:	484f      	ldr	r0, [pc, #316]	; (d5fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5e78:	494f      	ldr	r1, [pc, #316]	; (d5fb8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d5e7a:	f7fe f9e4 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d5e7e:	2100      	movs	r1, #0
   d5e80:	4628      	mov	r0, r5
   d5e82:	f7ff fe99 	bl	d5bb8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d5e86:	4604      	mov	r4, r0
   d5e88:	b948      	cbnz	r0, d5e9e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d5e8a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d5e8e:	494b      	ldr	r1, [pc, #300]	; (d5fbc <_ZN6AB180513deepPowerDownEi+0x150>)
   d5e90:	4848      	ldr	r0, [pc, #288]	; (d5fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5e92:	f7ff fd7c 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
}
   d5e96:	4620      	mov	r0, r4
   d5e98:	b003      	add	sp, #12
   d5e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d5e9e:	2301      	movs	r3, #1
   d5ea0:	461a      	mov	r2, r3
   d5ea2:	2130      	movs	r1, #48	; 0x30
   d5ea4:	4628      	mov	r0, r5
   d5ea6:	f7ff ff89 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5eaa:	4604      	mov	r4, r0
   d5eac:	b910      	cbnz	r0, d5eb4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d5eae:	f240 2205 	movw	r2, #517	; 0x205
   d5eb2:	e7ec      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d5eb4:	2210      	movs	r2, #16
   d5eb6:	2301      	movs	r3, #1
   d5eb8:	4611      	mov	r1, r2
   d5eba:	4628      	mov	r0, r5
   d5ebc:	f7ff ff1d 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d5ec0:	4604      	mov	r4, r0
   d5ec2:	b910      	cbnz	r0, d5eca <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d5ec4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d5ec8:	e7e1      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d5eca:	2301      	movs	r3, #1
   d5ecc:	2226      	movs	r2, #38	; 0x26
   d5ece:	2113      	movs	r1, #19
   d5ed0:	4628      	mov	r0, r5
   d5ed2:	f7ff fe65 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5ed6:	4604      	mov	r4, r0
   d5ed8:	b910      	cbnz	r0, d5ee0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d5eda:	f240 2213 	movw	r2, #531	; 0x213
   d5ede:	e7d6      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d5ee0:	2601      	movs	r6, #1
   d5ee2:	9600      	str	r6, [sp, #0]
   d5ee4:	4633      	mov	r3, r6
   d5ee6:	22fc      	movs	r2, #252	; 0xfc
   d5ee8:	2111      	movs	r1, #17
   d5eea:	4628      	mov	r0, r5
   d5eec:	f7ff feb8 	bl	d5c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5ef0:	4604      	mov	r4, r0
   d5ef2:	b910      	cbnz	r0, d5efa <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d5ef4:	f240 221b 	movw	r2, #539	; 0x21b
   d5ef8:	e7c9      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d5efa:	2200      	movs	r2, #0
   d5efc:	4639      	mov	r1, r7
   d5efe:	4628      	mov	r0, r5
   d5f00:	f7ff ff66 	bl	d5dd0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d5f04:	4604      	mov	r4, r0
   d5f06:	b910      	cbnz	r0, d5f0e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d5f08:	f240 2222 	movw	r2, #546	; 0x222
   d5f0c:	e7bf      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d5f0e:	9600      	str	r6, [sp, #0]
   d5f10:	2302      	movs	r3, #2
   d5f12:	2277      	movs	r2, #119	; 0x77
   d5f14:	2110      	movs	r1, #16
   d5f16:	4628      	mov	r0, r5
   d5f18:	f7ff fea2 	bl	d5c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	b910      	cbnz	r0, d5f26 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d5f20:	f240 222b 	movw	r2, #555	; 0x22b
   d5f24:	e7b3      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d5f26:	4633      	mov	r3, r6
   d5f28:	2204      	movs	r2, #4
   d5f2a:	211c      	movs	r1, #28
   d5f2c:	4628      	mov	r0, r5
   d5f2e:	f7ff ff45 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5f32:	4604      	mov	r4, r0
   d5f34:	b910      	cbnz	r0, d5f3c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d5f36:	f240 2232 	movw	r2, #562	; 0x232
   d5f3a:	e7a8      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d5f3c:	9600      	str	r6, [sp, #0]
   d5f3e:	2318      	movs	r3, #24
   d5f40:	22e3      	movs	r2, #227	; 0xe3
   d5f42:	2111      	movs	r1, #17
   d5f44:	4628      	mov	r0, r5
   d5f46:	f7ff fe8b 	bl	d5c60 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	b910      	cbnz	r0, d5f54 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d5f4e:	f240 2239 	movw	r2, #569	; 0x239
   d5f52:	e79c      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d5f54:	4633      	mov	r3, r6
   d5f56:	22c0      	movs	r2, #192	; 0xc0
   d5f58:	2117      	movs	r1, #23
   d5f5a:	4628      	mov	r0, r5
   d5f5c:	f7ff fe20 	bl	d5ba0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5f60:	4604      	mov	r4, r0
   d5f62:	b910      	cbnz	r0, d5f6a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d5f64:	f44f 7210 	mov.w	r2, #576	; 0x240
   d5f68:	e791      	b.n	d5e8e <_ZN6AB180513deepPowerDownEi+0x22>
   d5f6a:	f002 f927 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d5f6e:	f8df 9054 	ldr.w	r9, [pc, #84]	; d5fc4 <_ZN6AB180513deepPowerDownEi+0x158>
   d5f72:	f8df 8040 	ldr.w	r8, [pc, #64]	; d5fb4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d5f76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5f7a:	4606      	mov	r6, r0
   d5f7c:	434f      	muls	r7, r1
   d5f7e:	f002 f91d 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d5f82:	1b80      	subs	r0, r0, r6
   d5f84:	42b8      	cmp	r0, r7
   d5f86:	d20e      	bcs.n	d5fa6 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d5f88:	2201      	movs	r2, #1
   d5f8a:	2117      	movs	r1, #23
   d5f8c:	4628      	mov	r0, r5
   d5f8e:	f7ff fdbd 	bl	d5b0c <_ZN6AB180512readRegisterEhb>
   d5f92:	4649      	mov	r1, r9
   d5f94:	4602      	mov	r2, r0
   d5f96:	4640      	mov	r0, r8
   d5f98:	f7fe f955 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d5f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5fa0:	f002 fc78 	bl	d8894 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d5fa4:	e7eb      	b.n	d5f7e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d5fa6:	4906      	ldr	r1, [pc, #24]	; (d5fc0 <_ZN6AB180513deepPowerDownEi+0x154>)
   d5fa8:	4802      	ldr	r0, [pc, #8]	; (d5fb4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5faa:	f7ff fcf0 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d5fae:	f003 fd29 	bl	d9a04 <_ZN11SystemClass5resetEv>
    return true;
   d5fb2:	e770      	b.n	d5e96 <_ZN6AB180513deepPowerDownEi+0x2a>
   d5fb4:	2003e5b8 	.word	0x2003e5b8
   d5fb8:	000db659 	.word	0x000db659
   d5fbc:	000db64e 	.word	0x000db64e
   d5fc0:	000db67f 	.word	0x000db67f
   d5fc4:	000db66a 	.word	0x000db66a

000d5fc8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d5fc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5fcc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5fd0:	4605      	mov	r5, r0
   d5fd2:	460c      	mov	r4, r1
   d5fd4:	4691      	mov	r9, r2
   d5fd6:	461f      	mov	r7, r3
    if (lock) {
   d5fd8:	f1ba 0f00 	cmp.w	sl, #0
   d5fdc:	d002      	beq.n	d5fe4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5fde:	6840      	ldr	r0, [r0, #4]
   d5fe0:	f003 f958 	bl	d9294 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5fe4:	b307      	cbz	r7, d6028 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5fe6:	2f20      	cmp	r7, #32
   d5fe8:	463e      	mov	r6, r7
   d5fea:	bf28      	it	cs
   d5fec:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5fee:	2c7f      	cmp	r4, #127	; 0x7f
   d5ff0:	d826      	bhi.n	d6040 <_ZN6AB18057readRamEjPhjb+0x78>
   d5ff2:	1933      	adds	r3, r6, r4
   d5ff4:	2b80      	cmp	r3, #128	; 0x80
   d5ff6:	d901      	bls.n	d5ffc <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d5ff8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5ffc:	2301      	movs	r3, #1
   d5ffe:	2204      	movs	r2, #4
   d6000:	213f      	movs	r1, #63	; 0x3f
   d6002:	4628      	mov	r0, r5
   d6004:	f7ff fe79 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6008:	2300      	movs	r3, #0
   d600a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d600e:	9300      	str	r3, [sp, #0]
   d6010:	464a      	mov	r2, r9
   d6012:	4633      	mov	r3, r6
   d6014:	b2c9      	uxtb	r1, r1
   d6016:	4628      	mov	r0, r5
   d6018:	f7ff fce4 	bl	d59e4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d601c:	4680      	mov	r8, r0
   d601e:	b128      	cbz	r0, d602c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6020:	4434      	add	r4, r6
        dataLen -= count;
   d6022:	1bbf      	subs	r7, r7, r6
        data += count;
   d6024:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6026:	e7dd      	b.n	d5fe4 <_ZN6AB18057readRamEjPhjb+0x1c>
   d6028:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d602c:	f1ba 0f00 	cmp.w	sl, #0
   d6030:	d002      	beq.n	d6038 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6032:	6868      	ldr	r0, [r5, #4]
   d6034:	f003 f937 	bl	d92a6 <_ZN7TwoWire6unlockEv>
}
   d6038:	4640      	mov	r0, r8
   d603a:	b002      	add	sp, #8
   d603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6040:	2301      	movs	r3, #1
   d6042:	2204      	movs	r2, #4
   d6044:	213f      	movs	r1, #63	; 0x3f
   d6046:	4628      	mov	r0, r5
   d6048:	f7ff feb8 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
   d604c:	e7dc      	b.n	d6008 <_ZN6AB18057readRamEjPhjb+0x40>

000d604e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d604e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6052:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6056:	4605      	mov	r5, r0
   d6058:	460c      	mov	r4, r1
   d605a:	4691      	mov	r9, r2
   d605c:	461f      	mov	r7, r3
    if (lock) {
   d605e:	f1ba 0f00 	cmp.w	sl, #0
   d6062:	d002      	beq.n	d606a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6064:	6840      	ldr	r0, [r0, #4]
   d6066:	f003 f915 	bl	d9294 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d606a:	b307      	cbz	r7, d60ae <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d606c:	2f1f      	cmp	r7, #31
   d606e:	463e      	mov	r6, r7
   d6070:	bf28      	it	cs
   d6072:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6074:	2c7f      	cmp	r4, #127	; 0x7f
   d6076:	d826      	bhi.n	d60c6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6078:	1933      	adds	r3, r6, r4
   d607a:	2b80      	cmp	r3, #128	; 0x80
   d607c:	d901      	bls.n	d6082 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d607e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6082:	2301      	movs	r3, #1
   d6084:	2204      	movs	r2, #4
   d6086:	213f      	movs	r1, #63	; 0x3f
   d6088:	4628      	mov	r0, r5
   d608a:	f7ff fe36 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d608e:	2300      	movs	r3, #0
   d6090:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6094:	9300      	str	r3, [sp, #0]
   d6096:	464a      	mov	r2, r9
   d6098:	4633      	mov	r3, r6
   d609a:	b2c9      	uxtb	r1, r1
   d609c:	4628      	mov	r0, r5
   d609e:	f7ff fd43 	bl	d5b28 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d60a2:	4680      	mov	r8, r0
   d60a4:	b128      	cbz	r0, d60b2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d60a6:	4434      	add	r4, r6
        dataLen -= count;
   d60a8:	1bbf      	subs	r7, r7, r6
        data += count;
   d60aa:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d60ac:	e7dd      	b.n	d606a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d60ae:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d60b2:	f1ba 0f00 	cmp.w	sl, #0
   d60b6:	d002      	beq.n	d60be <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d60b8:	6868      	ldr	r0, [r5, #4]
   d60ba:	f003 f8f4 	bl	d92a6 <_ZN7TwoWire6unlockEv>
}
   d60be:	4640      	mov	r0, r8
   d60c0:	b002      	add	sp, #8
   d60c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d60c6:	2301      	movs	r3, #1
   d60c8:	2204      	movs	r2, #4
   d60ca:	213f      	movs	r1, #63	; 0x3f
   d60cc:	4628      	mov	r0, r5
   d60ce:	f7ff fe75 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
   d60d2:	e7dc      	b.n	d608e <_ZN6AB18058writeRamEjPKhjb+0x40>

000d60d4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d60d4:	b530      	push	{r4, r5, lr}
   d60d6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d60d8:	680d      	ldr	r5, [r1, #0]
   d60da:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d60de:	9503      	str	r5, [sp, #12]
   d60e0:	684d      	ldr	r5, [r1, #4]
   d60e2:	9502      	str	r5, [sp, #8]
   d60e4:	688d      	ldr	r5, [r1, #8]
   d60e6:	9501      	str	r5, [sp, #4]
   d60e8:	68c9      	ldr	r1, [r1, #12]
   d60ea:	9100      	str	r1, [sp, #0]
   d60ec:	3301      	adds	r3, #1
   d60ee:	4904      	ldr	r1, [pc, #16]	; (d6100 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d60f0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d60f4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d60f6:	f003 fbf7 	bl	d98e8 <_ZN6String6formatEPKcz>
}
   d60fa:	4620      	mov	r0, r4
   d60fc:	b005      	add	sp, #20
   d60fe:	bd30      	pop	{r4, r5, pc}
   d6100:	000db691 	.word	0x000db691

000d6104 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6104:	1103      	asrs	r3, r0, #4
}
   d6106:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6108:	f000 000f 	and.w	r0, r0, #15
}
   d610c:	fb02 0003 	mla	r0, r2, r3, r0
   d6110:	4770      	bx	lr

000d6112 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6112:	b538      	push	{r3, r4, r5, lr}
   d6114:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6116:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6118:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d611a:	f7ff fff3 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d611e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6120:	7860      	ldrb	r0, [r4, #1]
   d6122:	f7ff ffef 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d6126:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6128:	78a0      	ldrb	r0, [r4, #2]
   d612a:	f7ff ffeb 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d612e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6130:	78e0      	ldrb	r0, [r4, #3]
   d6132:	f7ff ffe7 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d6136:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6138:	7920      	ldrb	r0, [r4, #4]
   d613a:	f7ff ffe3 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d613e:	3801      	subs	r0, #1
   d6140:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6142:	b92d      	cbnz	r5, d6150 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6144:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6146:	7828      	ldrb	r0, [r5, #0]
   d6148:	f7ff ffdc 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d614c:	6188      	str	r0, [r1, #24]
}
   d614e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6150:	7960      	ldrb	r0, [r4, #5]
   d6152:	f7ff ffd7 	bl	d6104 <_ZN6AB180510bcdToValueEh>
   d6156:	3064      	adds	r0, #100	; 0x64
   d6158:	1da5      	adds	r5, r4, #6
   d615a:	6148      	str	r0, [r1, #20]
   d615c:	e7f3      	b.n	d6146 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6160 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6160:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6162:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6164:	b088      	sub	sp, #32
   d6166:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6168:	461a      	mov	r2, r3
   d616a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d616c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d616e:	f7ff fda6 	bl	d5cbe <_ZN6AB180510isBitClearEhhb>
   d6172:	b1f0      	cbz	r0, d61b2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6174:	2308      	movs	r3, #8
   d6176:	2601      	movs	r6, #1
   d6178:	4620      	mov	r0, r4
   d617a:	9600      	str	r6, [sp, #0]
   d617c:	eb0d 0203 	add.w	r2, sp, r3
   d6180:	2100      	movs	r1, #0
   d6182:	f7ff fc2f 	bl	d59e4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6186:	4604      	mov	r4, r0
   d6188:	b198      	cbz	r0, d61b2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d618a:	4632      	mov	r2, r6
   d618c:	4629      	mov	r1, r5
   d618e:	f10d 0009 	add.w	r0, sp, #9
   d6192:	f7ff ffbe 	bl	d6112 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6196:	a804      	add	r0, sp, #16
   d6198:	f7ff ff9c 	bl	d60d4 <_ZN6AB180510tmToStringEPK2tm>
   d619c:	4808      	ldr	r0, [pc, #32]	; (d61c0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d619e:	9a04      	ldr	r2, [sp, #16]
   d61a0:	4908      	ldr	r1, [pc, #32]	; (d61c4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d61a2:	f7fe f850 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d61a6:	a804      	add	r0, sp, #16
   d61a8:	f003 fafa 	bl	d97a0 <_ZN6StringD1Ev>
}
   d61ac:	4620      	mov	r0, r4
   d61ae:	b008      	add	sp, #32
   d61b0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d61b2:	2224      	movs	r2, #36	; 0x24
   d61b4:	2100      	movs	r1, #0
   d61b6:	4628      	mov	r0, r5
   d61b8:	f004 fe4c 	bl	dae54 <memset>
   d61bc:	2400      	movs	r4, #0
   d61be:	e7f5      	b.n	d61ac <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d61c0:	2003e5b8 	.word	0x2003e5b8
   d61c4:	000db6af 	.word	0x000db6af

000d61c8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d61c8:	b530      	push	{r4, r5, lr}
   d61ca:	b08b      	sub	sp, #44	; 0x2c
   d61cc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d61ce:	a901      	add	r1, sp, #4
   d61d0:	f7ff ffc6 	bl	d6160 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d61d4:	4604      	mov	r4, r0
   d61d6:	b120      	cbz	r0, d61e2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d61d8:	a801      	add	r0, sp, #4
   d61da:	f002 fb53 	bl	d8884 <mktime>
   d61de:	e9c5 0100 	strd	r0, r1, [r5]
}
   d61e2:	4620      	mov	r0, r4
   d61e4:	b00b      	add	sp, #44	; 0x2c
   d61e6:	bd30      	pop	{r4, r5, pc}

000d61e8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d61e8:	b510      	push	{r4, lr}
   d61ea:	4604      	mov	r4, r0
   d61ec:	b088      	sub	sp, #32
    if (callBegin) {
   d61ee:	b111      	cbz	r1, d61f6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d61f0:	6840      	ldr	r0, [r0, #4]
   d61f2:	f003 f815 	bl	d9220 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d61f6:	4620      	mov	r0, r4
   d61f8:	f7ff fc4a 	bl	d5a90 <_ZN6AB180510detectChipEv>
   d61fc:	b370      	cbz	r0, d625c <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d61fe:	4620      	mov	r0, r4
   d6200:	f7ff fd86 	bl	d5d10 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6204:	2301      	movs	r3, #1
   d6206:	461a      	mov	r2, r3
   d6208:	2110      	movs	r1, #16
   d620a:	4620      	mov	r0, r4
   d620c:	f7ff fd57 	bl	d5cbe <_ZN6AB180510isBitClearEhhb>
   d6210:	b1d8      	cbz	r0, d624a <_ZN6AB18055setupEb+0x62>
   d6212:	f003 fe47 	bl	d9ea4 <_ZN9TimeClass7isValidEv>
   d6216:	b9c0      	cbnz	r0, d624a <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6218:	a902      	add	r1, sp, #8
   d621a:	4620      	mov	r0, r4
   d621c:	f7ff ffd4 	bl	d61c8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6224:	f003 fd44 	bl	d9cb0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6228:	4b0f      	ldr	r3, [pc, #60]	; (d6268 <_ZN6AB18055setupEb+0x80>)
   d622a:	4910      	ldr	r1, [pc, #64]	; (d626c <_ZN6AB18055setupEb+0x84>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	9300      	str	r3, [sp, #0]
   d6230:	a804      	add	r0, sp, #16
   d6232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6236:	f003 fdf3 	bl	d9e20 <_ZN9TimeClass6formatExPKc>
   d623a:	480d      	ldr	r0, [pc, #52]	; (d6270 <_ZN6AB18055setupEb+0x88>)
   d623c:	9a04      	ldr	r2, [sp, #16]
   d623e:	490d      	ldr	r1, [pc, #52]	; (d6274 <_ZN6AB18055setupEb+0x8c>)
   d6240:	f7fe f801 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d6244:	a804      	add	r0, sp, #16
   d6246:	f003 faab 	bl	d97a0 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d624a:	4a0b      	ldr	r2, [pc, #44]	; (d6278 <_ZN6AB18055setupEb+0x90>)
   d624c:	2300      	movs	r3, #0
   d624e:	2100      	movs	r1, #0
   d6250:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6254:	f002 f994 	bl	d8580 <system_subscribe_event>
}
   d6258:	b008      	add	sp, #32
   d625a:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d625c:	4907      	ldr	r1, [pc, #28]	; (d627c <_ZN6AB18055setupEb+0x94>)
   d625e:	4804      	ldr	r0, [pc, #16]	; (d6270 <_ZN6AB18055setupEb+0x88>)
   d6260:	f7ff fb95 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
   d6264:	e7f1      	b.n	d624a <_ZN6AB18055setupEb+0x62>
   d6266:	bf00      	nop
   d6268:	2003e18c 	.word	0x2003e18c
   d626c:	2003e650 	.word	0x2003e650
   d6270:	2003e5b8 	.word	0x2003e5b8
   d6274:	000db6bd 	.word	0x000db6bd
   d6278:	000d5c3d 	.word	0x000d5c3d
   d627c:	000db6da 	.word	0x000db6da

000d6280 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6280:	220a      	movs	r2, #10
   d6282:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6286:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d628a:	fb93 f1f2 	sdiv	r1, r3, r2
   d628e:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6292:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6296:	b2c0      	uxtb	r0, r0
   d6298:	4770      	bx	lr

000d629a <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d629a:	b570      	push	{r4, r5, r6, lr}
   d629c:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d629e:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d62a0:	460c      	mov	r4, r1
   d62a2:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d62a4:	f7ff ffec 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62a8:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d62aa:	6868      	ldr	r0, [r5, #4]
   d62ac:	f7ff ffe8 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62b0:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d62b2:	68a8      	ldr	r0, [r5, #8]
   d62b4:	f7ff ffe4 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62b8:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d62ba:	68e8      	ldr	r0, [r5, #12]
   d62bc:	f7ff ffe0 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62c0:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d62c2:	6928      	ldr	r0, [r5, #16]
   d62c4:	3001      	adds	r0, #1
   d62c6:	f7ff ffdb 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62ca:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d62cc:	b92e      	cbnz	r6, d62da <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d62ce:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d62d0:	69a8      	ldr	r0, [r5, #24]
   d62d2:	f7ff ffd5 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62d6:	7030      	strb	r0, [r6, #0]
}
   d62d8:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d62da:	696a      	ldr	r2, [r5, #20]
   d62dc:	2364      	movs	r3, #100	; 0x64
   d62de:	fb92 f0f3 	sdiv	r0, r2, r3
   d62e2:	fb03 2010 	mls	r0, r3, r0, r2
   d62e6:	f7ff ffcb 	bl	d6280 <_ZN6AB180510valueToBcdEi>
   d62ea:	1da6      	adds	r6, r4, #6
   d62ec:	7160      	strb	r0, [r4, #5]
   d62ee:	e7ef      	b.n	d62d0 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d62f0 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62f2:	b087      	sub	sp, #28
   d62f4:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d62f6:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d62f8:	4616      	mov	r6, r2
   d62fa:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d62fc:	f7ff feea 	bl	d60d4 <_ZN6AB180510tmToStringEPK2tm>
   d6300:	481e      	ldr	r0, [pc, #120]	; (d637c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6302:	9a02      	ldr	r2, [sp, #8]
   d6304:	491e      	ldr	r1, [pc, #120]	; (d6380 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6306:	f7fd ff9e 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d630a:	a802      	add	r0, sp, #8
   d630c:	f003 fa48 	bl	d97a0 <_ZN6StringD1Ev>
    if (lock) {
   d6310:	b116      	cbz	r6, d6318 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6312:	6868      	ldr	r0, [r5, #4]
   d6314:	f002 ffbe 	bl	d9294 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6318:	4620      	mov	r0, r4
   d631a:	2201      	movs	r2, #1
   d631c:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6320:	2700      	movs	r7, #0
   d6322:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6326:	f7ff ffb8 	bl	d629a <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d632a:	2301      	movs	r3, #1
   d632c:	461a      	mov	r2, r3
   d632e:	2110      	movs	r1, #16
   d6330:	4628      	mov	r0, r5
   d6332:	f7ff fd43 	bl	d5dbc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6336:	4604      	mov	r4, r0
   d6338:	b1e8      	cbz	r0, d6376 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d633a:	2308      	movs	r3, #8
   d633c:	9700      	str	r7, [sp, #0]
   d633e:	eb0d 0203 	add.w	r2, sp, r3
   d6342:	4639      	mov	r1, r7
   d6344:	4628      	mov	r0, r5
   d6346:	f7ff fbef 	bl	d5b28 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d634a:	4604      	mov	r4, r0
   d634c:	b160      	cbz	r0, d6368 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d634e:	2301      	movs	r3, #1
   d6350:	461a      	mov	r2, r3
   d6352:	2110      	movs	r1, #16
   d6354:	4628      	mov	r0, r5
   d6356:	f7ff fcd0 	bl	d5cfa <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d635a:	b116      	cbz	r6, d6362 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d635c:	6868      	ldr	r0, [r5, #4]
   d635e:	f002 ffa2 	bl	d92a6 <_ZN7TwoWire6unlockEv>
}
   d6362:	4620      	mov	r0, r4
   d6364:	b007      	add	sp, #28
   d6366:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6368:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d636c:	4905      	ldr	r1, [pc, #20]	; (d6384 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d636e:	4803      	ldr	r0, [pc, #12]	; (d637c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6370:	f7ff fb0d 	bl	d598e <_ZNK5spark6Logger5errorEPKcz>
   d6374:	e7f1      	b.n	d635a <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6376:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d637a:	e7f7      	b.n	d636c <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d637c:	2003e5b8 	.word	0x2003e5b8
   d6380:	000db6f2 	.word	0x000db6f2
   d6384:	000db700 	.word	0x000db700

000d6388 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6388:	b513      	push	{r0, r1, r4, lr}
   d638a:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d638c:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d638e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6392:	f004 fd25 	bl	dade0 <gmtime>
    return setRtcFromTm(tm, lock);
   d6396:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d639a:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d639c:	4620      	mov	r0, r4
   d639e:	f7ff ffa7 	bl	d62f0 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d63a2:	b002      	add	sp, #8
   d63a4:	bd10      	pop	{r4, pc}
	...

000d63a8 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d63a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d63aa:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d63ac:	b089      	sub	sp, #36	; 0x24
   d63ae:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d63b0:	bb75      	cbnz	r5, d6410 <_ZN6AB18054loopEv+0x68>
   d63b2:	f003 fd77 	bl	d9ea4 <_ZN9TimeClass7isValidEv>
   d63b6:	b358      	cbz	r0, d6410 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d63b8:	2600      	movs	r6, #0
   d63ba:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d63bc:	a904      	add	r1, sp, #16
   d63be:	4628      	mov	r0, r5
        tm = 0;
   d63c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d63c4:	f002 f98e 	bl	d86e4 <spark_sync_time_last>
   d63c8:	b310      	cbz	r0, d6410 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d63ca:	2501      	movs	r5, #1
   d63cc:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d63ce:	f003 fd86 	bl	d9ede <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d63d2:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d63d4:	4602      	mov	r2, r0
   d63d6:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d63d8:	4620      	mov	r0, r4
        time_t time = Time.now();
   d63da:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d63de:	f7ff ffd3 	bl	d6388 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d63e2:	a902      	add	r1, sp, #8
   d63e4:	4620      	mov	r0, r4
        time = 0;
   d63e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d63ea:	f7ff feed 	bl	d61c8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d63ee:	4b12      	ldr	r3, [pc, #72]	; (d6438 <_ZN6AB18054loopEv+0x90>)
   d63f0:	4912      	ldr	r1, [pc, #72]	; (d643c <_ZN6AB18054loopEv+0x94>)
   d63f2:	681b      	ldr	r3, [r3, #0]
   d63f4:	9300      	str	r3, [sp, #0]
   d63f6:	a804      	add	r0, sp, #16
   d63f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d63fc:	f003 fd10 	bl	d9e20 <_ZN9TimeClass6formatExPKc>
   d6400:	480f      	ldr	r0, [pc, #60]	; (d6440 <_ZN6AB18054loopEv+0x98>)
   d6402:	9a04      	ldr	r2, [sp, #16]
   d6404:	490f      	ldr	r1, [pc, #60]	; (d6444 <_ZN6AB18054loopEv+0x9c>)
   d6406:	f7fd ff1e 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d640a:	a804      	add	r0, sp, #16
   d640c:	f003 f9c8 	bl	d97a0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6410:	6963      	ldr	r3, [r4, #20]
   d6412:	b173      	cbz	r3, d6432 <_ZN6AB18054loopEv+0x8a>
   d6414:	f001 fed2 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6418:	6923      	ldr	r3, [r4, #16]
   d641a:	1ac0      	subs	r0, r0, r3
   d641c:	6963      	ldr	r3, [r4, #20]
   d641e:	4298      	cmp	r0, r3
   d6420:	d307      	bcc.n	d6432 <_ZN6AB18054loopEv+0x8a>
   d6422:	f001 fecb 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6426:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d642a:	6120      	str	r0, [r4, #16]
            setWDT();
   d642c:	4620      	mov	r0, r4
   d642e:	f7ff fbc3 	bl	d5bb8 <_ZN6AB18056setWDTEi>
}
   d6432:	b009      	add	sp, #36	; 0x24
   d6434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6436:	bf00      	nop
   d6438:	2003e18c 	.word	0x2003e18c
   d643c:	2003e650 	.word	0x2003e650
   d6440:	2003e5b8 	.word	0x2003e5b8
   d6444:	000db71b 	.word	0x000db71b

000d6448 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6448:	4b01      	ldr	r3, [pc, #4]	; (d6450 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d644a:	4a02      	ldr	r2, [pc, #8]	; (d6454 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d644c:	601a      	str	r2, [r3, #0]
}
   d644e:	4770      	bx	lr
   d6450:	2003e5b8 	.word	0x2003e5b8
   d6454:	000db731 	.word	0x000db731

000d6458 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d6458:	4770      	bx	lr

000d645a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d645a:	b510      	push	{r4, lr}
  }
   d645c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d645e:	4604      	mov	r4, r0
  }
   d6460:	f004 f807 	bl	da472 <_ZdlPvj>
   d6464:	4620      	mov	r0, r4
   d6466:	bd10      	pop	{r4, pc}

000d6468 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6468:	b40e      	push	{r1, r2, r3}
   d646a:	b503      	push	{r0, r1, lr}
   d646c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d646e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6470:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d6474:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d6476:	f003 f89e 	bl	d95b6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d647a:	b002      	add	sp, #8
   d647c:	f85d eb04 	ldr.w	lr, [sp], #4
   d6480:	b003      	add	sp, #12
   d6482:	4770      	bx	lr

000d6484 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d6484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6486:	4604      	mov	r4, r0
   d6488:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d648a:	7922      	ldrb	r2, [r4, #4]
   d648c:	68a3      	ldr	r3, [r4, #8]
   d648e:	b132      	cbz	r2, d649e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d6490:	b9a3      	cbnz	r3, d64bc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d6492:	490b      	ldr	r1, [pc, #44]	; (d64c0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d6494:	b002      	add	sp, #8
   d6496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d649a:	f003 b85b 	b.w	d9554 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d649e:	4a09      	ldr	r2, [pc, #36]	; (d64c4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d64a0:	7b26      	ldrb	r6, [r4, #12]
   d64a2:	4d09      	ldr	r5, [pc, #36]	; (d64c8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d64a4:	4909      	ldr	r1, [pc, #36]	; (d64cc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d64a6:	7b64      	ldrb	r4, [r4, #13]
   d64a8:	2e01      	cmp	r6, #1
   d64aa:	bf18      	it	ne
   d64ac:	4629      	movne	r1, r5
   d64ae:	e9cd 1400 	strd	r1, r4, [sp]
   d64b2:	4907      	ldr	r1, [pc, #28]	; (d64d0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d64b4:	f7ff ffd8 	bl	d6468 <_ZN5Print6printfEPKcz>
  }
   d64b8:	b002      	add	sp, #8
   d64ba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d64bc:	4a05      	ldr	r2, [pc, #20]	; (d64d4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d64be:	e7ef      	b.n	d64a0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d64c0:	000db765 	.word	0x000db765
   d64c4:	000db2ce 	.word	0x000db2ce
   d64c8:	000db761 	.word	0x000db761
   d64cc:	000db75d 	.word	0x000db75d
   d64d0:	000db77b 	.word	0x000db77b
   d64d4:	000db754 	.word	0x000db754

000d64d8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d64d8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d64da:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d64dc:	4604      	mov	r4, r0
      if (_M_manager)
   d64de:	b113      	cbz	r3, d64e6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64e0:	2203      	movs	r2, #3
   d64e2:	4601      	mov	r1, r0
   d64e4:	4798      	blx	r3
    }
   d64e6:	4620      	mov	r0, r4
   d64e8:	bd10      	pop	{r4, pc}

000d64ea <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d64ea:	6803      	ldr	r3, [r0, #0]
   d64ec:	b2c9      	uxtb	r1, r1
   d64ee:	689b      	ldr	r3, [r3, #8]
   d64f0:	4718      	bx	r3
	...

000d64f4 <_ZN16AssetTrackerBaseC1Ev>:
}

//
//
//
AssetTrackerBase::AssetTrackerBase() : LegacyAdapter(gps) {
   d64f4:	b538      	push	{r3, r4, r5, lr}
   d64f6:	f100 0508 	add.w	r5, r0, #8
   d64fa:	4604      	mov	r4, r0
   d64fc:	4629      	mov	r1, r5
   d64fe:	f000 fa59 	bl	d69b4 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d6502:	4b12      	ldr	r3, [pc, #72]	; (d654c <_ZN16AssetTrackerBaseC1Ev+0x58>)
   d6504:	6023      	str	r3, [r4, #0]
   d6506:	4628      	mov	r0, r5
   d6508:	2500      	movs	r5, #0
   d650a:	f000 fa96 	bl	d6a3a <_ZN11TinyGPSPlusC1Ev>
   d650e:	f884 51a8 	strb.w	r5, [r4, #424]	; 0x1a8
   d6512:	f003 ff81 	bl	da418 <_Z19__fetch_global_Wirev>
   d6516:	2342      	movs	r3, #66	; 0x42
   d6518:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
   d651c:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   d6520:	f003 fd8e 	bl	da040 <_Z22__fetch_global_Serial1v>
   d6524:	23ff      	movs	r3, #255	; 0xff
   d6526:	f8a4 31e4 	strh.w	r3, [r4, #484]	; 0x1e4
	instance = this;
   d652a:	4b09      	ldr	r3, [pc, #36]	; (d6550 <_ZN16AssetTrackerBaseC1Ev+0x5c>)
    _Function_base() : _M_manager(nullptr) { }
   d652c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   d6530:	601c      	str	r4, [r3, #0]
AssetTrackerBase::AssetTrackerBase() : LegacyAdapter(gps) {
   d6532:	e9c4 056d 	strd	r0, r5, [r4, #436]	; 0x1b4
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6536:	e9c4 5573 	strd	r5, r5, [r4, #460]	; 0x1cc
   d653a:	e9c4 5575 	strd	r5, r5, [r4, #468]	; 0x1d4
   d653e:	e9c4 5577 	strd	r5, r5, [r4, #476]	; 0x1dc
   d6542:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
}
   d6546:	4620      	mov	r0, r4
   d6548:	bd38      	pop	{r3, r4, r5, pc}
   d654a:	bf00      	nop
   d654c:	000db7e4 	.word	0x000db7e4
   d6550:	2003e5cc 	.word	0x2003e5cc

000d6554 <_ZN16AssetTrackerBase17startThreadedModeEv>:
		}
	}

}

void AssetTrackerBase::startThreadedMode() {
   d6554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d6556:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
void AssetTrackerBase::startThreadedMode() {
   d655a:	4607      	mov	r7, r0
	if (thread == NULL) {
   d655c:	2e00      	cmp	r6, #0
   d655e:	d139      	bne.n	d65d4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x80>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6560:	2004      	movs	r0, #4
   d6562:	f7fd fd98 	bl	d4096 <_Znwj>
   d6566:	4605      	mov	r5, r0
   d6568:	b390      	cbz	r0, d65d0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d656a:	491b      	ldr	r1, [pc, #108]	; (d65d8 <_ZN16AssetTrackerBase17startThreadedModeEv+0x84>)
   d656c:	2014      	movs	r0, #20
   d656e:	f003 ff82 	bl	da476 <_ZnwjRKSt9nothrow_t>
   d6572:	b128      	cbz	r0, d6580 <_ZN16AssetTrackerBase17startThreadedModeEv+0x2c>
            exited(false) {
   d6574:	e9c0 6600 	strd	r6, r6, [r0]
   d6578:	e9c0 6602 	strd	r6, r6, [r0, #8]
   d657c:	7406      	strb	r6, [r0, #16]
   d657e:	7446      	strb	r6, [r0, #17]
      static_assert( !is_rvalue_reference<_Dp>::value,
		     "unique_ptr's deleter type must be a function object type"
		     " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6580:	6028      	str	r0, [r5, #0]
    {
        if (!d_) {
   d6582:	b1a0      	cbz	r0, d65ae <_ZN16AssetTrackerBase17startThreadedModeEv+0x5a>
            goto error;
        }
        d_->func = function;
   d6584:	4b15      	ldr	r3, [pc, #84]	; (d65dc <_ZN16AssetTrackerBase17startThreadedModeEv+0x88>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6586:	4916      	ldr	r1, [pc, #88]	; (d65e0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x8c>)
        d_->func_param = function_param;
   d6588:	e9c0 3702 	strd	r3, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d658c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6590:	e9cd 0300 	strd	r0, r3, [sp]
   d6594:	2202      	movs	r2, #2
   d6596:	4b13      	ldr	r3, [pc, #76]	; (d65e4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x90>)
   d6598:	3004      	adds	r0, #4
   d659a:	f001 fd97 	bl	d80cc <os_thread_create>
   d659e:	b930      	cbnz	r0, d65ae <_ZN16AssetTrackerBase17startThreadedModeEv+0x5a>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d65a0:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d65a2:	7c1b      	ldrb	r3, [r3, #16]
   d65a4:	b9a3      	cbnz	r3, d65d0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d65a6:	2001      	movs	r0, #1
   d65a8:	f001 fdf8 	bl	d819c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d65ac:	e7f8      	b.n	d65a0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x4c>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65ae:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d65b0:	2300      	movs	r3, #0
   d65b2:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d65b4:	b164      	cbz	r4, d65d0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
	if (__ptr != nullptr)
   d65b6:	6826      	ldr	r6, [r4, #0]
   d65b8:	b136      	cbz	r6, d65c8 <_ZN16AssetTrackerBase17startThreadedModeEv+0x74>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65ba:	4630      	mov	r0, r6
   d65bc:	f7ff ff8c 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d65c0:	2110      	movs	r1, #16
   d65c2:	4630      	mov	r0, r6
   d65c4:	f003 ff55 	bl	da472 <_ZdlPvj>
   d65c8:	2114      	movs	r1, #20
   d65ca:	4620      	mov	r0, r4
   d65cc:	f003 ff51 	bl	da472 <_ZdlPvj>
   d65d0:	f8c7 51b8 	str.w	r5, [r7, #440]	; 0x1b8
	}
}
   d65d4:	b003      	add	sp, #12
   d65d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65d8:	000dbba0 	.word	0x000dbba0
   d65dc:	000d699f 	.word	0x000d699f
   d65e0:	000db798 	.word	0x000db798
   d65e4:	000d679b 	.word	0x000d679b

000d65e8 <_ZN16AssetTrackerBase7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTrackerBase &AssetTrackerBase::withI2C(TwoWire &wire, uint8_t addr) {
   d65e8:	b510      	push	{r4, lr}
	useWire = true;
   d65ea:	2301      	movs	r3, #1
   d65ec:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	this->wire = wire;
   d65f0:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
AssetTrackerBase &AssetTrackerBase::withI2C(TwoWire &wire, uint8_t addr) {
   d65f4:	4604      	mov	r4, r0
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d65f6:	6848      	ldr	r0, [r1, #4]
class Print
   d65f8:	6058      	str	r0, [r3, #4]
   d65fa:	6888      	ldr	r0, [r1, #8]
   d65fc:	6098      	str	r0, [r3, #8]
   d65fe:	68c8      	ldr	r0, [r1, #12]
   d6600:	60d8      	str	r0, [r3, #12]
class TwoWire : public Stream
   d6602:	7c08      	ldrb	r0, [r1, #16]
   d6604:	7418      	strb	r0, [r3, #16]
	this->wireAddr = addr;

	wire.begin();
   d6606:	4608      	mov	r0, r1
	this->wireAddr = addr;
   d6608:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
	wire.begin();
   d660c:	f002 fe08 	bl	d9220 <_ZN7TwoWire5beginEv>

	return *this;
}
   d6610:	4620      	mov	r0, r4
   d6612:	bd10      	pop	{r4, pc}

000d6614 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv>:


uint16_t AssetTrackerBase::wireReadBytesAvailable() {
   d6614:	b538      	push	{r3, r4, r5, lr}
   d6616:	4604      	mov	r4, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d6618:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   d661c:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
   d6620:	f002 fe2d 	bl	d927e <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d6624:	21fd      	movs	r1, #253	; 0xfd
   d6626:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d662a:	f7ff ff5e 	bl	d64ea <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d662e:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6632:	2100      	movs	r1, #0
   d6634:	f002 fe2a 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d6638:	b108      	cbz	r0, d663e <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x2a>
		// Log.info("wireReadBytesAvailable I2C error %u", res);
		return 0;
   d663a:	2000      	movs	r0, #0

	uint16_t available = wire.read() << 8;
	available |= wire.read();

	return available;
}
   d663c:	bd38      	pop	{r3, r4, r5, pc}
	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d663e:	f894 11b0 	ldrb.w	r1, [r4, #432]	; 0x1b0
   d6642:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6646:	2301      	movs	r3, #1
   d6648:	2202      	movs	r2, #2
   d664a:	f002 fe06 	bl	d925a <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d664e:	b2c0      	uxtb	r0, r0
   d6650:	2802      	cmp	r0, #2
   d6652:	d1f2      	bne.n	d663a <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x26>
	uint16_t available = wire.read() << 8;
   d6654:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6658:	6803      	ldr	r3, [r0, #0]
   d665a:	695b      	ldr	r3, [r3, #20]
   d665c:	4798      	blx	r3
   d665e:	4605      	mov	r5, r0
	available |= wire.read();
   d6660:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6664:	6803      	ldr	r3, [r0, #0]
   d6666:	695b      	ldr	r3, [r3, #20]
   d6668:	4798      	blx	r3
   d666a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d666e:	b280      	uxth	r0, r0
	return available;
   d6670:	e7e4      	b.n	d663c <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x28>

000d6672 <_ZN16AssetTrackerBase13wireReadBytesEPhj>:

int AssetTrackerBase::wireReadBytes(uint8_t *buf, size_t len) {
   d6672:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6676:	4607      	mov	r7, r0
   d6678:	4688      	mov	r8, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d667a:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   d667e:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
int AssetTrackerBase::wireReadBytes(uint8_t *buf, size_t len) {
   d6682:	4615      	mov	r5, r2
	wire.beginTransmission(wireAddr);
   d6684:	f002 fdfb 	bl	d927e <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d6688:	21ff      	movs	r1, #255	; 0xff
   d668a:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d668e:	f7ff ff2c 	bl	d64ea <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d6692:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d6696:	2100      	movs	r1, #0
   d6698:	f002 fdf8 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d669c:	b118      	cbz	r0, d66a6 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x34>
		// Log.info("wireReadBytes I2C error %u", res);
		return -1;
   d669e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
 	}
	return len;
}
   d66a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t offset = 0;
   d66a6:	4604      	mov	r4, r0
	while(offset < len) {
   d66a8:	42a5      	cmp	r5, r4
   d66aa:	d920      	bls.n	d66ee <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x7c>
		size_t reqLen = (len - offset);
   d66ac:	1b2e      	subs	r6, r5, r4
		if (reqLen > 32) {
   d66ae:	2e20      	cmp	r6, #32
   d66b0:	bf28      	it	cs
   d66b2:	2620      	movcs	r6, #32
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d66b4:	eb04 0906 	add.w	r9, r4, r6
   d66b8:	eba5 0209 	sub.w	r2, r5, r9
   d66bc:	4253      	negs	r3, r2
   d66be:	4153      	adcs	r3, r2
   d66c0:	f897 11b0 	ldrb.w	r1, [r7, #432]	; 0x1b0
   d66c4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d66c8:	4632      	mov	r2, r6
   d66ca:	f002 fdc6 	bl	d925a <_ZN7TwoWire11requestFromEhjh>
		if (res != reqLen) {
   d66ce:	b2c0      	uxtb	r0, r0
   d66d0:	4286      	cmp	r6, r0
   d66d2:	d1e4      	bne.n	d669e <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x2c>
   d66d4:	4444      	add	r4, r8
   d66d6:	4426      	add	r6, r4
			buf[offset + ii] = wire.read();
   d66d8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d66dc:	6803      	ldr	r3, [r0, #0]
   d66de:	695b      	ldr	r3, [r3, #20]
   d66e0:	4798      	blx	r3
   d66e2:	f804 0b01 	strb.w	r0, [r4], #1
		for(size_t ii = 0; ii < reqLen; ii++) {
   d66e6:	42a6      	cmp	r6, r4
   d66e8:	d1f6      	bne.n	d66d8 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x66>
		offset += reqLen;
   d66ea:	464c      	mov	r4, r9
   d66ec:	e7dc      	b.n	d66a8 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x36>
	return len;
   d66ee:	4628      	mov	r0, r5
   d66f0:	e7d7      	b.n	d66a2 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x30>
	...

000d66f4 <_ZN12AssetTrackerC1Ev>:


//
//
//
AssetTracker::AssetTracker() : AssetTrackerLIS3DH(&accel), accel(SPI, A2, WKP) {
   d66f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66f6:	4604      	mov	r4, r0
   d66f8:	f7ff fefc 	bl	d64f4 <_ZN16AssetTrackerBaseC1Ev>
   d66fc:	4b1c      	ldr	r3, [pc, #112]	; (d6770 <_ZN12AssetTrackerC1Ev+0x7c>)
   d66fe:	6023      	str	r3, [r4, #0]
   d6700:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
   d6704:	3310      	adds	r3, #16
   d6706:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d670a:	2108      	movs	r1, #8
AssetTrackerLIS3DH::AssetTrackerLIS3DH(LIS3DH *accel) : accel(accel) {
   d670c:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
   d6710:	f000 fe2e 	bl	d7370 <_ZN6LIS3DHC1Ei>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6714:	4d17      	ldr	r5, [pc, #92]	; (d6774 <_ZN12AssetTrackerC1Ev+0x80>)
   d6716:	4b18      	ldr	r3, [pc, #96]	; (d6778 <_ZN12AssetTrackerC1Ev+0x84>)
   d6718:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
   d671c:	7829      	ldrb	r1, [r5, #0]
   d671e:	f3bf 8f5b 	dmb	ish
   d6722:	f011 0101 	ands.w	r1, r1, #1
   d6726:	d10b      	bne.n	d6740 <_ZN12AssetTrackerC1Ev+0x4c>
   d6728:	4628      	mov	r0, r5
   d672a:	9101      	str	r1, [sp, #4]
   d672c:	f7fd fcc4 	bl	d40b8 <__cxa_guard_acquire>
   d6730:	9901      	ldr	r1, [sp, #4]
   d6732:	b128      	cbz	r0, d6740 <_ZN12AssetTrackerC1Ev+0x4c>
   d6734:	4811      	ldr	r0, [pc, #68]	; (d677c <_ZN12AssetTrackerC1Ev+0x88>)
   d6736:	f002 ff89 	bl	d964c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d673a:	4628      	mov	r0, r5
   d673c:	f7fd fcc1 	bl	d40c2 <__cxa_guard_release>
   d6740:	4b0e      	ldr	r3, [pc, #56]	; (d677c <_ZN12AssetTrackerC1Ev+0x88>)
   d6742:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   d6746:	2311      	movs	r3, #17
   d6748:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
   d674c:	2300      	movs	r3, #0
      dataMode_{dataMode}
   d674e:	4a0c      	ldr	r2, [pc, #48]	; (d6780 <_ZN12AssetTrackerC1Ev+0x8c>)
   d6750:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
   d6754:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
   d6758:	4b0a      	ldr	r3, [pc, #40]	; (d6784 <_ZN12AssetTrackerC1Ev+0x90>)
   d675a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
}
   d675e:	4620      	mov	r0, r4
   d6760:	2301      	movs	r3, #1
   d6762:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
   d6766:	f8a4 3218 	strh.w	r3, [r4, #536]	; 0x218
   d676a:	b003      	add	sp, #12
   d676c:	bd30      	pop	{r4, r5, pc}
   d676e:	bf00      	nop
   d6770:	000db7c4 	.word	0x000db7c4
   d6774:	2003e5c0 	.word	0x2003e5c0
   d6778:	000db844 	.word	0x000db844
   d677c:	2003e5c4 	.word	0x2003e5c4
   d6780:	000db7b0 	.word	0x000db7b0
   d6784:	00989680 	.word	0x00989680

000d6788 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6788:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d678a:	b510      	push	{r4, lr}
      if (_M_empty())
   d678c:	b90a      	cbnz	r2, d6792 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d678e:	f003 fe76 	bl	da47e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d6792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6796:	68c3      	ldr	r3, [r0, #12]
   d6798:	4718      	bx	r3

000d679a <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d679a:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d679c:	2301      	movs	r3, #1
   d679e:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d67a0:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d67a2:	4604      	mov	r4, r0
        if (th->func) {
   d67a4:	b143      	cbz	r3, d67b8 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d67a6:	68c0      	ldr	r0, [r0, #12]
   d67a8:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d67aa:	2301      	movs	r3, #1
   d67ac:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d67ae:	2000      	movs	r0, #0
    }
   d67b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d67b4:	f001 bcd2 	b.w	d815c <os_thread_exit>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d67b8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d67ba:	2800      	cmp	r0, #0
   d67bc:	d0f5      	beq.n	d67aa <_ZN6Thread3runEPv+0x10>
            (*(th->wrapper))();
   d67be:	f7ff ffe3 	bl	d6788 <_ZNKSt8functionIFvvEEclEv>
   d67c2:	e7f2      	b.n	d67aa <_ZN6Thread3runEPv+0x10>

000d67c4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d67c4:	b570      	push	{r4, r5, r6, lr}
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d67c6:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d67ca:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d67cc:	42ae      	cmp	r6, r5
   d67ce:	d004      	beq.n	d67da <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d67d0:	4628      	mov	r0, r5
   d67d2:	f7ff fe81 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
   d67d6:	3510      	adds	r5, #16
   d67d8:	e7f8      	b.n	d67cc <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d67da:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d67dc:	b108      	cbz	r0, d67e2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x1e>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d67de:	f7fd fc5e 	bl	d409e <_ZdlPv>
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   d67e2:	4620      	mov	r0, r4
   d67e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67e8 <_ZN16AssetTrackerBaseD1Ev>:
AssetTrackerBase::~AssetTrackerBase() {
   d67e8:	b510      	push	{r4, lr}
   d67ea:	4b0e      	ldr	r3, [pc, #56]	; (d6824 <_ZN16AssetTrackerBaseD1Ev+0x3c>)
   d67ec:	6003      	str	r3, [r0, #0]
   d67ee:	4604      	mov	r4, r0
	if (mutex) {
   d67f0:	f8d0 01e8 	ldr.w	r0, [r0, #488]	; 0x1e8
   d67f4:	b120      	cbz	r0, d6800 <_ZN16AssetTrackerBaseD1Ev+0x18>
		os_mutex_destroy(mutex);
   d67f6:	f001 fc89 	bl	d810c <os_mutex_destroy>
		mutex = 0;
   d67fa:	2300      	movs	r3, #0
   d67fc:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
AssetTrackerBase::~AssetTrackerBase() {
   d6800:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   d6804:	f7ff ffde 	bl	d67c4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
   d6808:	f504 70e6 	add.w	r0, r4, #460	; 0x1cc
   d680c:	f7ff ffda 	bl	d67c4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
   d6810:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
   d6814:	f7ff fe60 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
   d6818:	4620      	mov	r0, r4
   d681a:	f000 f8c3 	bl	d69a4 <_ZN13LegacyAdapterD1Ev>
}
   d681e:	4620      	mov	r0, r4
   d6820:	bd10      	pop	{r4, pc}
   d6822:	bf00      	nop
   d6824:	000db7e4 	.word	0x000db7e4

000d6828 <_ZN16AssetTrackerBaseD0Ev>:
AssetTrackerBase::~AssetTrackerBase() {
   d6828:	b510      	push	{r4, lr}
   d682a:	4604      	mov	r4, r0
}
   d682c:	f7ff ffdc 	bl	d67e8 <_ZN16AssetTrackerBaseD1Ev>
   d6830:	4620      	mov	r0, r4
   d6832:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   d6836:	f003 fe1c 	bl	da472 <_ZdlPvj>
   d683a:	4620      	mov	r0, r4
   d683c:	bd10      	pop	{r4, pc}
	...

000d6840 <_ZN12AssetTrackerD1Ev>:

AssetTracker::~AssetTracker() {
   d6840:	b510      	push	{r4, lr}
   d6842:	4b08      	ldr	r3, [pc, #32]	; (d6864 <_ZN12AssetTrackerD1Ev+0x24>)
   d6844:	f103 0208 	add.w	r2, r3, #8
   d6848:	3318      	adds	r3, #24
   d684a:	4604      	mov	r4, r0
   d684c:	6002      	str	r2, [r0, #0]
   d684e:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
   d6852:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   d6856:	f000 fd2b 	bl	d72b0 <_ZN9LIS3DHSPID1Ev>
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ffc4 	bl	d67e8 <_ZN16AssetTrackerBaseD1Ev>

}
   d6860:	4620      	mov	r0, r4
   d6862:	bd10      	pop	{r4, pc}
   d6864:	000db7bc 	.word	0x000db7bc

000d6868 <_ZThn492_N12AssetTrackerD1Ev>:
	AssetTracker();

	/**
	 * @brief Destructor
	 */
	virtual ~AssetTracker();
   d6868:	f5a0 70f6 	sub.w	r0, r0, #492	; 0x1ec
   d686c:	f7ff bfe8 	b.w	d6840 <_ZN12AssetTrackerD1Ev>

000d6870 <_ZN12AssetTrackerD0Ev>:
AssetTracker::~AssetTracker() {
   d6870:	b510      	push	{r4, lr}
   d6872:	4604      	mov	r4, r0
}
   d6874:	f7ff ffe4 	bl	d6840 <_ZN12AssetTrackerD1Ev>
   d6878:	4620      	mov	r0, r4
   d687a:	f44f 7107 	mov.w	r1, #540	; 0x21c
   d687e:	f003 fdf8 	bl	da472 <_ZdlPvj>
   d6882:	4620      	mov	r0, r4
   d6884:	bd10      	pop	{r4, pc}

000d6886 <_ZThn492_N12AssetTrackerD0Ev>:
   d6886:	f5a0 70f6 	sub.w	r0, r0, #492	; 0x1ec
   d688a:	f7ff bff1 	b.w	d6870 <_ZN12AssetTrackerD0Ev>

000d688e <_ZNKSt8functionIFbcEEclEc>:
    function<_Res(_ArgTypes...)>::
   d688e:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d6890:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6892:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
   d6896:	b90a      	cbnz	r2, d689c <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d6898:	f003 fdf1 	bl	da47e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d689c:	68c3      	ldr	r3, [r0, #12]
   d689e:	f10d 0107 	add.w	r1, sp, #7
   d68a2:	4798      	blx	r3
    }
   d68a4:	b003      	add	sp, #12
   d68a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d68aa <_ZN16AssetTrackerBase9updateGPSEv>:
void AssetTrackerBase::updateGPS(void) {
   d68aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
   d68ae:	f890 71a8 	ldrb.w	r7, [r0, #424]	; 0x1a8
void AssetTrackerBase::updateGPS(void) {
   d68b2:	b08a      	sub	sp, #40	; 0x28
   d68b4:	4604      	mov	r4, r0
	if (!useWire) {
   d68b6:	b9ff      	cbnz	r7, d68f8 <_ZN16AssetTrackerBase9updateGPSEv+0x4e>
			hasSentence |= gps.encode(c);
   d68b8:	f100 0608 	add.w	r6, r0, #8
				externalDecoder(c);
   d68bc:	f500 75de 	add.w	r5, r0, #444	; 0x1bc
		while (serialPort.available() > 0) {
   d68c0:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
   d68c4:	6803      	ldr	r3, [r0, #0]
   d68c6:	691b      	ldr	r3, [r3, #16]
   d68c8:	4798      	blx	r3
   d68ca:	2800      	cmp	r0, #0
   d68cc:	dd45      	ble.n	d695a <_ZN16AssetTrackerBase9updateGPSEv+0xb0>
			char c = (char)serialPort.read();
   d68ce:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
   d68d2:	6803      	ldr	r3, [r0, #0]
   d68d4:	695b      	ldr	r3, [r3, #20]
   d68d6:	4798      	blx	r3
   d68d8:	b2c1      	uxtb	r1, r0
			hasSentence |= gps.encode(c);
   d68da:	4630      	mov	r0, r6
   d68dc:	9101      	str	r1, [sp, #4]
   d68de:	f000 fb45 	bl	d6f6c <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d68e2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			hasSentence |= gps.encode(c);
   d68e6:	4338      	orrs	r0, r7
   d68e8:	b2c7      	uxtb	r7, r0
			if (externalDecoder) {
   d68ea:	2b00      	cmp	r3, #0
   d68ec:	d0e8      	beq.n	d68c0 <_ZN16AssetTrackerBase9updateGPSEv+0x16>
				externalDecoder(c);
   d68ee:	9901      	ldr	r1, [sp, #4]
   d68f0:	4628      	mov	r0, r5
   d68f2:	f7ff ffcc 	bl	d688e <_ZNKSt8functionIFbcEEclEc>
   d68f6:	e7e3      	b.n	d68c0 <_ZN16AssetTrackerBase9updateGPSEv+0x16>
		WITH_LOCK(wire) {
   d68f8:	f8d0 81ac 	ldr.w	r8, [r0, #428]	; 0x1ac
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d68fc:	4640      	mov	r0, r8
   d68fe:	f002 fcc9 	bl	d9294 <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d6902:	4620      	mov	r0, r4
   d6904:	f7ff fe86 	bl	d6614 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv>
			if (available > 32) {
   d6908:	2820      	cmp	r0, #32
			uint16_t available = wireReadBytesAvailable();
   d690a:	4606      	mov	r6, r0
			if (available > 32) {
   d690c:	d802      	bhi.n	d6914 <_ZN16AssetTrackerBase9updateGPSEv+0x6a>
			if (available > 0) {
   d690e:	b910      	cbnz	r0, d6916 <_ZN16AssetTrackerBase9updateGPSEv+0x6c>
	bool hasSentence = false;
   d6910:	2700      	movs	r7, #0
   d6912:	e01f      	b.n	d6954 <_ZN16AssetTrackerBase9updateGPSEv+0xaa>
				available = 32;
   d6914:	2620      	movs	r6, #32
				if (wireReadBytes(buf, available) == available) {
   d6916:	4632      	mov	r2, r6
   d6918:	a902      	add	r1, sp, #8
   d691a:	4620      	mov	r0, r4
   d691c:	f7ff fea9 	bl	d6672 <_ZN16AssetTrackerBase13wireReadBytesEPhj>
   d6920:	42b0      	cmp	r0, r6
   d6922:	d1f5      	bne.n	d6910 <_ZN16AssetTrackerBase9updateGPSEv+0x66>
   d6924:	ad02      	add	r5, sp, #8
   d6926:	442e      	add	r6, r5
	bool hasSentence = false;
   d6928:	2700      	movs	r7, #0
						hasSentence |= gps.encode(buf[ii]);
   d692a:	f104 0908 	add.w	r9, r4, #8
							externalDecoder(buf[ii]);
   d692e:	f504 7ade 	add.w	sl, r4, #444	; 0x1bc
						hasSentence |= gps.encode(buf[ii]);
   d6932:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6936:	4648      	mov	r0, r9
   d6938:	f000 fb18 	bl	d6f6c <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d693c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
						hasSentence |= gps.encode(buf[ii]);
   d6940:	4338      	orrs	r0, r7
   d6942:	b2c7      	uxtb	r7, r0
						if (externalDecoder) {
   d6944:	b123      	cbz	r3, d6950 <_ZN16AssetTrackerBase9updateGPSEv+0xa6>
							externalDecoder(buf[ii]);
   d6946:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   d694a:	4650      	mov	r0, sl
   d694c:	f7ff ff9f 	bl	d688e <_ZNKSt8functionIFbcEEclEc>
					for(uint16_t ii = 0; ii < available; ii++) {
   d6950:	42b5      	cmp	r5, r6
   d6952:	d1ee      	bne.n	d6932 <_ZN16AssetTrackerBase9updateGPSEv+0x88>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6954:	4640      	mov	r0, r8
   d6956:	f002 fca6 	bl	d92a6 <_ZN7TwoWire6unlockEv>
	if (hasSentence) {
   d695a:	b157      	cbz	r7, d6972 <_ZN16AssetTrackerBase9updateGPSEv+0xc8>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d695c:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
		for(auto it = sentenceCallbacks.begin(); it != sentenceCallbacks.end(); it++) {
   d6960:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   d6964:	429d      	cmp	r5, r3
   d6966:	d004      	beq.n	d6972 <_ZN16AssetTrackerBase9updateGPSEv+0xc8>
			(*it)();
   d6968:	4628      	mov	r0, r5
   d696a:	f7ff ff0d 	bl	d6788 <_ZNKSt8functionIFvvEEclEv>
   d696e:	3510      	adds	r5, #16
	return *this;
      }

      __normal_iterator
      operator++(int) _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current++); }
   d6970:	e7f6      	b.n	d6960 <_ZN16AssetTrackerBase9updateGPSEv+0xb6>
}
   d6972:	b00a      	add	sp, #40	; 0x28
   d6974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6978 <_ZN16AssetTrackerBase14threadFunctionEv>:
void AssetTrackerBase::threadFunction() {
   d6978:	b538      	push	{r3, r4, r5, lr}
   d697a:	4604      	mov	r4, r0
		updateGPS();
   d697c:	4620      	mov	r0, r4
   d697e:	f7ff ff94 	bl	d68aa <_ZN16AssetTrackerBase9updateGPSEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d6982:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
		for(auto it = threadCallbacks.begin(); it != threadCallbacks.end(); it++) {
   d6986:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   d698a:	429d      	cmp	r5, r3
   d698c:	d004      	beq.n	d6998 <_ZN16AssetTrackerBase14threadFunctionEv+0x20>
			(*it)();
   d698e:	4628      	mov	r0, r5
   d6990:	f7ff fefa 	bl	d6788 <_ZNKSt8functionIFvvEEclEv>
   d6994:	3510      	adds	r5, #16
      { return __normal_iterator(_M_current++); }
   d6996:	e7f6      	b.n	d6986 <_ZN16AssetTrackerBase14threadFunctionEv+0xe>
		os_thread_yield();
   d6998:	f001 fba0 	bl	d80dc <os_thread_yield>
	}
   d699c:	e7ee      	b.n	d697c <_ZN16AssetTrackerBase14threadFunctionEv+0x4>

000d699e <_ZN16AssetTrackerBase20threadFunctionStaticEPv>:
void AssetTrackerBase::threadFunctionStatic(void *param) {
   d699e:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d69a0:	f7ff ffea 	bl	d6978 <_ZN16AssetTrackerBase14threadFunctionEv>

000d69a4 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d69a4:	4770      	bx	lr

000d69a6 <_ZN13LegacyAdapterD0Ev>:
LegacyAdapter::~LegacyAdapter() {
   d69a6:	b510      	push	{r4, lr}
}
   d69a8:	2108      	movs	r1, #8
LegacyAdapter::~LegacyAdapter() {
   d69aa:	4604      	mov	r4, r0
}
   d69ac:	f003 fd61 	bl	da472 <_ZdlPvj>
   d69b0:	4620      	mov	r0, r4
   d69b2:	bd10      	pop	{r4, pc}

000d69b4 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:
LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d69b4:	4a01      	ldr	r2, [pc, #4]	; (d69bc <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d69b6:	e9c0 2100 	strd	r2, r1, [r0]
}
   d69ba:	4770      	bx	lr
   d69bc:	000db7f4 	.word	0x000db7f4

000d69c0 <_ZN11TinyGPSDataC1Ev>:
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69c0:	2200      	movs	r2, #0
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d69c2:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d69c6:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d69ca:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   d69ce:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69d2:	8002      	strh	r2, [r0, #0]
	RawDegrees() : deg(0), billionths(0), negative(false)
   d69d4:	8082      	strh	r2, [r0, #4]
   d69d6:	6082      	str	r2, [r0, #8]
   d69d8:	7302      	strb	r2, [r0, #12]
   d69da:	8202      	strh	r2, [r0, #16]
   d69dc:	6142      	str	r2, [r0, #20]
   d69de:	7602      	strb	r2, [r0, #24]
   d69e0:	8382      	strh	r2, [r0, #28]
   d69e2:	6202      	str	r2, [r0, #32]
   d69e4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d69e8:	8502      	strh	r2, [r0, #40]	; 0x28
   d69ea:	62c2      	str	r2, [r0, #44]	; 0x2c
   d69ec:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69f0:	6342      	str	r2, [r0, #52]	; 0x34
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d69f2:	8702      	strh	r2, [r0, #56]	; 0x38
   d69f4:	6442      	str	r2, [r0, #68]	; 0x44
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d69f6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d69fa:	6542      	str	r2, [r0, #84]	; 0x54
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d69fc:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d6a00:	6642      	str	r2, [r0, #100]	; 0x64
   d6a02:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d6a06:	6742      	str	r2, [r0, #116]	; 0x74
   d6a08:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d6a0c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   d6a10:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a14:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a18:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   d6a1c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d6a20:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d6a24:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a28:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d6a2c:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a30:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
   d6a34:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
class TinyGPSData {
   d6a38:	4770      	bx	lr

000d6a3a <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d6a3a:	b510      	push	{r4, lr}
   d6a3c:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d6a3e:	f7ff ffbf 	bl	d69c0 <_ZN11TinyGPSDataC1Ev>
   d6a42:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d6a46:	f7ff ffbb 	bl	d69c0 <_ZN11TinyGPSDataC1Ev>
   d6a4a:	2302      	movs	r3, #2
   d6a4c:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
   d6a50:	2300      	movs	r3, #0
   d6a52:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
   d6a56:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
   d6a5a:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
   d6a5e:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
   d6a62:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d6a66:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
{
  term[0] = '\0';
   d6a6a:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d6a6e:	4620      	mov	r0, r4
   d6a70:	bd10      	pop	{r4, pc}

000d6a72 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d6a72:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d6a76:	2b05      	cmp	r3, #5
   d6a78:	d802      	bhi.n	d6a80 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d6a7a:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d6a7e:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d6a80:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d6a84:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d6a86:	bf94      	ite	ls
   d6a88:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d6a8c:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d6a90:	4770      	bx	lr

000d6a92 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d6a92:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d6a94:	7805      	ldrb	r5, [r0, #0]
{
   d6a96:	4604      	mov	r4, r0
  if (negative) ++term;
   d6a98:	2d2d      	cmp	r5, #45	; 0x2d
   d6a9a:	bf08      	it	eq
   d6a9c:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f004 f98c 	bl	dadbc <atol>
   d6aa4:	2364      	movs	r3, #100	; 0x64
   d6aa6:	4358      	muls	r0, r3
   d6aa8:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d6aaa:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6aae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d6ab2:	2909      	cmp	r1, #9
   d6ab4:	d9f8      	bls.n	d6aa8 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d6ab6:	2b2e      	cmp	r3, #46	; 0x2e
   d6ab8:	d10b      	bne.n	d6ad2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d6aba:	7853      	ldrb	r3, [r2, #1]
   d6abc:	3b30      	subs	r3, #48	; 0x30
   d6abe:	2b09      	cmp	r3, #9
   d6ac0:	d807      	bhi.n	d6ad2 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d6ac2:	210a      	movs	r1, #10
   d6ac4:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d6ac8:	7893      	ldrb	r3, [r2, #2]
   d6aca:	3b30      	subs	r3, #48	; 0x30
   d6acc:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d6ace:	bf98      	it	ls
   d6ad0:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d6ad2:	2d2d      	cmp	r5, #45	; 0x2d
   d6ad4:	bf08      	it	eq
   d6ad6:	4240      	negeq	r0, r0
}
   d6ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6adc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d6adc:	b538      	push	{r3, r4, r5, lr}
   d6ade:	460d      	mov	r5, r1
   d6ae0:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d6ae2:	f004 f96b 	bl	dadbc <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d6ae6:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6ae8:	4b13      	ldr	r3, [pc, #76]	; (d6b38 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d6aea:	fbb0 f1f2 	udiv	r1, r0, r2
   d6aee:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6af2:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d6af4:	8029      	strh	r1, [r5, #0]
   d6af6:	4620      	mov	r0, r4

  while (isdigit(*term))
   d6af8:	7802      	ldrb	r2, [r0, #0]
   d6afa:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d6afe:	2c09      	cmp	r4, #9
   d6b00:	4601      	mov	r1, r0
   d6b02:	f100 0001 	add.w	r0, r0, #1
   d6b06:	d9f7      	bls.n	d6af8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d6b08:	2a2e      	cmp	r2, #46	; 0x2e
   d6b0a:	d10b      	bne.n	d6b24 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d6b0c:	480a      	ldr	r0, [pc, #40]	; (d6b38 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d6b0e:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d6b10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6b14:	3a30      	subs	r2, #48	; 0x30
   d6b16:	2a09      	cmp	r2, #9
   d6b18:	d804      	bhi.n	d6b24 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d6b1a:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d6b1e:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d6b22:	e7f5      	b.n	d6b10 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d6b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6b28:	3301      	adds	r3, #1
   d6b2a:	2203      	movs	r2, #3
   d6b2c:	fbb3 f3f2 	udiv	r3, r3, r2
   d6b30:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d6b32:	2300      	movs	r3, #0
   d6b34:	722b      	strb	r3, [r5, #8]
}
   d6b36:	bd38      	pop	{r3, r4, r5, pc}
   d6b38:	00989680 	.word	0x00989680

000d6b3c <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d6b3c:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d6b3e:	4603      	mov	r3, r0
{
   d6b40:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d6b42:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d6b46:	6042      	str	r2, [r0, #4]
   d6b48:	685a      	ldr	r2, [r3, #4]
   d6b4a:	6082      	str	r2, [r0, #8]
   d6b4c:	7a1b      	ldrb	r3, [r3, #8]
   d6b4e:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d6b50:	4603      	mov	r3, r0
   d6b52:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d6b56:	6102      	str	r2, [r0, #16]
   d6b58:	685a      	ldr	r2, [r3, #4]
   d6b5a:	6142      	str	r2, [r0, #20]
   d6b5c:	7a1b      	ldrb	r3, [r3, #8]
   d6b5e:	7603      	strb	r3, [r0, #24]
   d6b60:	f001 fb2c 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6b64:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6b68:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d6b6a:	8023      	strh	r3, [r4, #0]
}
   d6b6c:	bd10      	pop	{r4, pc}
	...

000d6b70 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6b70:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6b72:	2300      	movs	r3, #0
{
   d6b74:	4604      	mov	r4, r0
   updated = false;
   d6b76:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d6b78:	6880      	ldr	r0, [r0, #8]
   d6b7a:	f003 fdc5 	bl	da708 <__aeabi_ui2d>
   d6b7e:	a30c      	add	r3, pc, #48	; (adr r3, d6bb0 <_ZN15TinyGPSLocation3latEv+0x40>)
   d6b80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b84:	f003 ff64 	bl	daa50 <__aeabi_ddiv>
   d6b88:	4606      	mov	r6, r0
   d6b8a:	88a0      	ldrh	r0, [r4, #4]
   d6b8c:	460f      	mov	r7, r1
   d6b8e:	f003 fdcb 	bl	da728 <__aeabi_i2d>
   d6b92:	460b      	mov	r3, r1
   d6b94:	4602      	mov	r2, r0
   d6b96:	4639      	mov	r1, r7
   d6b98:	4630      	mov	r0, r6
   d6b9a:	f003 fc79 	bl	da490 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d6b9e:	7b23      	ldrb	r3, [r4, #12]
   d6ba0:	b113      	cbz	r3, d6ba8 <_ZN15TinyGPSLocation3latEv+0x38>
   d6ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6ba6:	4619      	mov	r1, r3
}
   d6ba8:	ec41 0b10 	vmov	d0, r0, r1
   d6bac:	bdd0      	pop	{r4, r6, r7, pc}
   d6bae:	bf00      	nop
   d6bb0:	00000000 	.word	0x00000000
   d6bb4:	41cdcd65 	.word	0x41cdcd65

000d6bb8 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d6bb8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6bba:	2300      	movs	r3, #0
{
   d6bbc:	4604      	mov	r4, r0
   updated = false;
   d6bbe:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d6bc0:	6940      	ldr	r0, [r0, #20]
   d6bc2:	f003 fda1 	bl	da708 <__aeabi_ui2d>
   d6bc6:	a30c      	add	r3, pc, #48	; (adr r3, d6bf8 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d6bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bcc:	f003 ff40 	bl	daa50 <__aeabi_ddiv>
   d6bd0:	4606      	mov	r6, r0
   d6bd2:	8a20      	ldrh	r0, [r4, #16]
   d6bd4:	460f      	mov	r7, r1
   d6bd6:	f003 fda7 	bl	da728 <__aeabi_i2d>
   d6bda:	460b      	mov	r3, r1
   d6bdc:	4602      	mov	r2, r0
   d6bde:	4639      	mov	r1, r7
   d6be0:	4630      	mov	r0, r6
   d6be2:	f003 fc55 	bl	da490 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d6be6:	7e23      	ldrb	r3, [r4, #24]
   d6be8:	b113      	cbz	r3, d6bf0 <_ZN15TinyGPSLocation3lngEv+0x38>
   d6bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6bee:	4619      	mov	r1, r3
}
   d6bf0:	ec41 0b10 	vmov	d0, r0, r1
   d6bf4:	bdd0      	pop	{r4, r6, r7, pc}
   d6bf6:	bf00      	nop
   d6bf8:	00000000 	.word	0x00000000
   d6bfc:	41cdcd65 	.word	0x41cdcd65

000d6c00 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d6c00:	b510      	push	{r4, lr}
   date = newDate;
   d6c02:	6883      	ldr	r3, [r0, #8]
   d6c04:	6043      	str	r3, [r0, #4]
{
   d6c06:	4604      	mov	r4, r0
   d6c08:	f001 fad8 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c0c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c10:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6c12:	8023      	strh	r3, [r4, #0]
}
   d6c14:	bd10      	pop	{r4, pc}

000d6c16 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d6c16:	b510      	push	{r4, lr}
   time = newTime;
   d6c18:	6883      	ldr	r3, [r0, #8]
   d6c1a:	6043      	str	r3, [r0, #4]
{
   d6c1c:	4604      	mov	r4, r0
   d6c1e:	f001 facd 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c22:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c26:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6c28:	8023      	strh	r3, [r4, #0]
}
   d6c2a:	bd10      	pop	{r4, pc}

000d6c2c <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d6c2c:	b510      	push	{r4, lr}
   d6c2e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6c30:	4608      	mov	r0, r1
   d6c32:	f7ff ff2e 	bl	d6a92 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6c36:	60a0      	str	r0, [r4, #8]
}
   d6c38:	bd10      	pop	{r4, pc}

000d6c3a <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d6c3a:	b510      	push	{r4, lr}
   d6c3c:	4604      	mov	r4, r0
   newDate = atol(term);
   d6c3e:	4608      	mov	r0, r1
   d6c40:	f004 f8bc 	bl	dadbc <atol>
   d6c44:	60a0      	str	r0, [r4, #8]
}
   d6c46:	bd10      	pop	{r4, pc}

000d6c48 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6c48:	b510      	push	{r4, lr}
   val = newval;
   d6c4a:	68c3      	ldr	r3, [r0, #12]
   d6c4c:	6083      	str	r3, [r0, #8]
{
   d6c4e:	4604      	mov	r4, r0
   d6c50:	f001 fab4 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c54:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c58:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6c5a:	8023      	strh	r3, [r4, #0]
}
   d6c5c:	bd10      	pop	{r4, pc}

000d6c5e <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d6c5e:	b510      	push	{r4, lr}
   d6c60:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d6c62:	4608      	mov	r0, r1
   d6c64:	f7ff ff15 	bl	d6a92 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6c68:	60e0      	str	r0, [r4, #12]
}
   d6c6a:	bd10      	pop	{r4, pc}

000d6c6c <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d6c6c:	b510      	push	{r4, lr}
   val = newval;
   d6c6e:	68c3      	ldr	r3, [r0, #12]
   d6c70:	6083      	str	r3, [r0, #8]
{
   d6c72:	4604      	mov	r4, r0
   d6c74:	f001 faa2 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c78:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c7c:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6c7e:	8023      	strh	r3, [r4, #0]
}
   d6c80:	bd10      	pop	{r4, pc}

000d6c82 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d6c82:	b510      	push	{r4, lr}
   d6c84:	4604      	mov	r4, r0
   newval = atol(term);
   d6c86:	4608      	mov	r0, r1
   d6c88:	f004 f898 	bl	dadbc <atol>
   d6c8c:	60e0      	str	r0, [r4, #12]
}
   d6c8e:	bd10      	pop	{r4, pc}

000d6c90 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6c90:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d6c92:	4601      	mov	r1, r0
{
   d6c94:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d6c96:	3010      	adds	r0, #16
   d6c98:	f004 f912 	bl	daec0 <strcpy>
   d6c9c:	f001 fa8e 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6ca0:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6ca4:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6ca6:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d6ca8:	bd10      	pop	{r4, pc}

000d6caa <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6caa:	2210      	movs	r2, #16
   d6cac:	f004 b935 	b.w	daf1a <strncpy>

000d6cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d6cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d6cb2:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
{
   d6cb6:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d6cb8:	2d00      	cmp	r5, #0
   d6cba:	f000 8088 	beq.w	d6dce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6cbe:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d6cc2:	f7ff fed6 	bl	d6a72 <_ZN11TinyGPSPlus7fromHexEc>
   d6cc6:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d6cca:	4602      	mov	r2, r0
   d6ccc:	4620      	mov	r0, r4
   d6cce:	f7ff fed0 	bl	d6a72 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6cd2:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6cd6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d6cda:	b2c0      	uxtb	r0, r0
   d6cdc:	4283      	cmp	r3, r0
   d6cde:	d16e      	bne.n	d6dbe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      passedChecksumCount++;
   d6ce0:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d6ce4:	3301      	adds	r3, #1
   d6ce6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d6cea:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6cee:	b123      	cbz	r3, d6cfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d6cf0:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d6cf4:	3301      	adds	r3, #1
   d6cf6:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
      switch(curSentenceType)
   d6cfa:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d6cfe:	b3e3      	cbz	r3, d6d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xca>
   d6d00:	2b01      	cmp	r3, #1
   d6d02:	d12b      	bne.n	d6d5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
    	tempData.date.commit();
   d6d04:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d6d08:	f7ff ff7a 	bl	d6c00 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d6d0c:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6d10:	f7ff ff81 	bl	d6c16 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6d14:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6d18:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6d1c:	b15b      	cbz	r3, d6d36 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x86>
           tempData.location.commit();
   d6d1e:	4630      	mov	r0, r6
   d6d20:	f7ff ff0c 	bl	d6b3c <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d6d24:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6d28:	f7ff ff8e 	bl	d6c48 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6d2c:	f504 7090 	add.w	r0, r4, #288	; 0x120
        tempData.hdop.commit();
   d6d30:	f7ff ff8a 	bl	d6c48 <_ZN14TinyGPSDecimal6commitEv>
   d6d34:	e005      	b.n	d6d42 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
	void invalidate() { valid = false; }
   d6d36:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6d3a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6d3e:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        os_thread_scheduling(false, NULL);
   d6d42:	2100      	movs	r1, #0
   d6d44:	4608      	mov	r0, r1
   d6d46:	f001 f9d1 	bl	d80ec <os_thread_scheduling>
        	TinyGPSData::operator=(tempData);
   d6d4a:	4631      	mov	r1, r6
   d6d4c:	22b8      	movs	r2, #184	; 0xb8
   d6d4e:	4620      	mov	r0, r4
   d6d50:	f004 f858 	bl	dae04 <memcpy>
        os_thread_scheduling(true, NULL);
   d6d54:	2100      	movs	r1, #0
   d6d56:	2001      	movs	r0, #1
   d6d58:	f001 f9c8 	bl	d80ec <os_thread_scheduling>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6d5c:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d6d60:	b39e      	cbz	r6, d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6d62:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d6d66:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6d68:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6d6a:	f004 f89f 	bl	daeac <strcmp>
   d6d6e:	bb60      	cbnz	r0, d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
         p->commit();
   d6d70:	4630      	mov	r0, r6
   d6d72:	f7ff ff8d 	bl	d6c90 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6d76:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6d78:	e7f2      	b.n	d6d60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        tempData.time.commit();
   d6d7a:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6d7e:	f7ff ff4a 	bl	d6c16 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6d82:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6d86:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6d8a:	b18b      	cbz	r3, d6db0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
          tempData.location.commit();
   d6d8c:	4630      	mov	r0, r6
   d6d8e:	f7ff fed5 	bl	d6b3c <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d6d92:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d6d96:	f7ff ff57 	bl	d6c48 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d6d9a:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d6d9e:	f7ff ff53 	bl	d6c48 <_ZN14TinyGPSDecimal6commitEv>
        tempData.satellites.commit();
   d6da2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d6da6:	f7ff ff61 	bl	d6c6c <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d6daa:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d6dae:	e7bf      	b.n	d6d30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
	void invalidate() { valid = false; }
   d6db0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6db4:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d6db8:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
   d6dbc:	e7f1      	b.n	d6da2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      ++failedChecksumCount;
   d6dbe:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d6dc2:	3301      	adds	r3, #1
   d6dc4:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    return false;
   d6dc8:	2500      	movs	r5, #0
}
   d6dca:	4628      	mov	r0, r5
   d6dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d6dce:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d6dd2:	bb6a      	cbnz	r2, d6e30 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x180>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d6dd4:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d6dd8:	4960      	ldr	r1, [pc, #384]	; (d6f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>)
   d6dda:	4630      	mov	r0, r6
   d6ddc:	f004 f866 	bl	daeac <strcmp>
   d6de0:	b120      	cbz	r0, d6dec <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
   d6de2:	495f      	ldr	r1, [pc, #380]	; (d6f60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d6de4:	4630      	mov	r0, r6
   d6de6:	f004 f861 	bl	daeac <strcmp>
   d6dea:	b998      	cbnz	r0, d6e14 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x164>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d6dec:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d6dee:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d6df2:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d6df6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6dfa:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d6dfe:	2f00      	cmp	r7, #0
   d6e00:	d0e3      	beq.n	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d6e04:	4631      	mov	r1, r6
   d6e06:	f004 f851 	bl	daeac <strcmp>
   d6e0a:	2800      	cmp	r0, #0
   d6e0c:	f280 809f 	bge.w	d6f4e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29e>
   d6e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d6e12:	e7f0      	b.n	d6df6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d6e14:	4953      	ldr	r1, [pc, #332]	; (d6f64 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d6e16:	4630      	mov	r0, r6
   d6e18:	f004 f848 	bl	daeac <strcmp>
   d6e1c:	b120      	cbz	r0, d6e28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x178>
   d6e1e:	4952      	ldr	r1, [pc, #328]	; (d6f68 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d6e20:	4630      	mov	r0, r6
   d6e22:	f004 f843 	bl	daeac <strcmp>
   d6e26:	b908      	cbnz	r0, d6e2c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d6e28:	2300      	movs	r3, #0
   d6e2a:	e7e0      	b.n	d6dee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
      curSentenceType = GPS_SENTENCE_OTHER;
   d6e2c:	2302      	movs	r3, #2
   d6e2e:	e7de      	b.n	d6dee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6e30:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d6e34:	2902      	cmp	r1, #2
   d6e36:	d024      	beq.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6e38:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d6e3c:	b30b      	cbz	r3, d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6e3e:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d6e42:	3a01      	subs	r2, #1
   d6e44:	2a28      	cmp	r2, #40	; 0x28
   d6e46:	d81c      	bhi.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6e48:	e8df f002 	tbb	[pc, r2]
   d6e4c:	4a433c15 	.word	0x4a433c15
   d6e50:	726b664d 	.word	0x726b664d
   d6e54:	1b7c1b77 	.word	0x1b7c1b77
   d6e58:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e5c:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e60:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e64:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e68:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e6c:	433c3515 	.word	0x433c3515
   d6e70:	5b544d4a 	.word	0x5b544d4a
   d6e74:	60          	.byte	0x60
   d6e75:	00          	.byte	0x00
	  tempData.time.setTime(term);
   d6e76:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6e7a:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d6e7e:	f7ff fed5 	bl	d6c2c <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6e82:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
         p->set(term);
   d6e86:	f504 77b9 	add.w	r7, r4, #370	; 0x172
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6e8a:	2e00      	cmp	r6, #0
   d6e8c:	d09d      	beq.n	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6e8e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d6e92:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6e94:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6e96:	f004 f809 	bl	daeac <strcmp>
   d6e9a:	2800      	cmp	r0, #0
   d6e9c:	d195      	bne.n	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6e9e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d6ea0:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6ea4:	429a      	cmp	r2, r3
   d6ea6:	dc90      	bgt.n	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
    if (p->termNumber == curTermNumber)
   d6ea8:	d103      	bne.n	d6eb2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x202>
         p->set(term);
   d6eaa:	4639      	mov	r1, r7
   d6eac:	4630      	mov	r0, r6
   d6eae:	f7ff fefc 	bl	d6caa <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6eb2:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6eb4:	e7e9      	b.n	d6e8a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1da>
      sentenceHasFix = term[0] == 'A';
   d6eb6:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d6eba:	4243      	negs	r3, r0
   d6ebc:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d6ebe:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d6ec2:	e7de      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d6ec4:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6ec8:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d6ecc:	f7ff fe06 	bl	d6adc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d6ed0:	e7d7      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d6ed2:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d6ed6:	424b      	negs	r3, r1
   d6ed8:	414b      	adcs	r3, r1
   d6eda:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d6ede:	e7d0      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6ee0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d6ee4:	e7f0      	b.n	d6ec8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x218>
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d6ee6:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d6eea:	4253      	negs	r3, r2
   d6eec:	4153      	adcs	r3, r2
   d6eee:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d6ef2:	e7c6      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.speed.set(term);
   d6ef4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6ef8:	f500 7088 	add.w	r0, r0, #272	; 0x110
	  tempData.geoidSeparation.set(term);
   d6efc:	f7ff feaf 	bl	d6c5e <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d6f00:	e7bf      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.course.set(term);
   d6f02:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f06:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d6f0a:	e7f7      	b.n	d6efc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.date.setDate(term);
   d6f0c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f10:	30f0      	adds	r0, #240	; 0xf0
   d6f12:	f7ff fe92 	bl	d6c3a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d6f16:	e7b4      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      sentenceHasFix = term[0] > '0';
   d6f18:	2b30      	cmp	r3, #48	; 0x30
   d6f1a:	bf94      	ite	ls
   d6f1c:	2300      	movls	r3, #0
   d6f1e:	2301      	movhi	r3, #1
   d6f20:	e7cd      	b.n	d6ebe <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20e>
	  tempData.satellites.set(term);
   d6f22:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f26:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d6f2a:	f7ff feaa 	bl	d6c82 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6f2e:	e7a8      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.hdop.set(term);
   d6f30:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f34:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d6f38:	e7e0      	b.n	d6efc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.altitude.set(term);
   d6f3a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f3e:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d6f42:	e7db      	b.n	d6efc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.geoidSeparation.set(term);
   d6f44:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f48:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d6f4c:	e7d6      	b.n	d6efc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6f4e:	f43f af3c 	beq.w	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
       customCandidates = NULL;
   d6f52:	2300      	movs	r3, #0
   d6f54:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6f58:	e737      	b.n	d6dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6f5a:	bf00      	nop
   d6f5c:	000db7fc 	.word	0x000db7fc
   d6f60:	000db802 	.word	0x000db802
   d6f64:	000db808 	.word	0x000db808
   d6f68:	000db80e 	.word	0x000db80e

000d6f6c <_ZN11TinyGPSPlus6encodeEc>:
{
   d6f6c:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d6f6e:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6f72:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d6f74:	f103 0301 	add.w	r3, r3, #1
{
   d6f78:	4604      	mov	r4, r0
   d6f7a:	460d      	mov	r5, r1
  ++encodedCharCount;
   d6f7c:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6f80:	d03a      	beq.n	d6ff8 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d6f82:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d6f86:	d814      	bhi.n	d6fb2 <_ZN11TinyGPSPlus6encodeEc+0x46>
   d6f88:	290a      	cmp	r1, #10
   d6f8a:	d01c      	beq.n	d6fc6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6f8c:	290d      	cmp	r1, #13
   d6f8e:	d01a      	beq.n	d6fc6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d6f90:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d6f92:	bf9f      	itttt	ls
   d6f94:	1c5a      	addls	r2, r3, #1
   d6f96:	191b      	addls	r3, r3, r4
   d6f98:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d6f9c:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d6fa0:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d6fa4:	bb98      	cbnz	r0, d700e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d6fa6:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d6faa:	404d      	eors	r5, r1
   d6fac:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d6fb0:	e021      	b.n	d6ff6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d6fb2:	292a      	cmp	r1, #42	; 0x2a
   d6fb4:	d007      	beq.n	d6fc6 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6fb6:	292c      	cmp	r1, #44	; 0x2c
   d6fb8:	d1ea      	bne.n	d6f90 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d6fba:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d6fbe:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d6fc2:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
      if (curTermOffset < sizeof(term))
   d6fc6:	2b0e      	cmp	r3, #14
   d6fc8:	f04f 0000 	mov.w	r0, #0
   d6fcc:	d805      	bhi.n	d6fda <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d6fce:	4423      	add	r3, r4
   d6fd0:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	f7ff fe6b 	bl	d6cb0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d6fda:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6fde:	3301      	adds	r3, #1
   d6fe0:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d6fe4:	2300      	movs	r3, #0
   d6fe6:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d6fea:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d6fee:	425d      	negs	r5, r3
   d6ff0:	415d      	adcs	r5, r3
   d6ff2:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
}
   d6ff6:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d6ff8:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d6ffa:	2302      	movs	r3, #2
    parity = 0;
   d6ffc:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d7000:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    curTermNumber = curTermOffset = 0;
   d7004:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    sentenceHasFix = false;
   d7008:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d700c:	e7f3      	b.n	d6ff6 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d700e:	2000      	movs	r0, #0
   d7010:	e7f1      	b.n	d6ff6 <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7012:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7014:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d7016:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d7018:	b17c      	cbz	r4, d703a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d701a:	6863      	ldr	r3, [r4, #4]
   d701c:	3b01      	subs	r3, #1
   d701e:	6063      	str	r3, [r4, #4]
   d7020:	b95b      	cbnz	r3, d703a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d7022:	6823      	ldr	r3, [r4, #0]
   d7024:	4620      	mov	r0, r4
   d7026:	689b      	ldr	r3, [r3, #8]
   d7028:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d702a:	68a3      	ldr	r3, [r4, #8]
   d702c:	3b01      	subs	r3, #1
   d702e:	60a3      	str	r3, [r4, #8]
   d7030:	b91b      	cbnz	r3, d703a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d7032:	6823      	ldr	r3, [r4, #0]
   d7034:	4620      	mov	r0, r4
   d7036:	68db      	ldr	r3, [r3, #12]
   d7038:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d703a:	4628      	mov	r0, r5
   d703c:	bd38      	pop	{r3, r4, r5, pc}

000d703e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d703e:	b513      	push	{r0, r1, r4, lr}
   d7040:	460b      	mov	r3, r1
   d7042:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7044:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7048:	466c      	mov	r4, sp
   d704a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d704e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7052:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7056:	e894 0003 	ldmia.w	r4, {r0, r1}
   d705a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d705e:	b002      	add	sp, #8
   d7060:	bd10      	pop	{r4, pc}
	...

000d7064 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
   d7064:	4b03      	ldr	r3, [pc, #12]	; (d7074 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x10>)
   d7066:	2201      	movs	r2, #1
   d7068:	701a      	strb	r2, [r3, #0]
   d706a:	4b03      	ldr	r3, [pc, #12]	; (d7078 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d706c:	4a03      	ldr	r2, [pc, #12]	; (d707c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d706e:	601a      	str	r2, [r3, #0]
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d7070:	4770      	bx	lr
   d7072:	bf00      	nop
   d7074:	2003e5d4 	.word	0x2003e5d4
   d7078:	2003e5d0 	.word	0x2003e5d0
   d707c:	000db814 	.word	0x000db814

000d7080 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d7080:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d7082:	2300      	movs	r3, #0
   d7084:	6043      	str	r3, [r0, #4]
   d7086:	6083      	str	r3, [r0, #8]
   d7088:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d708a:	6103      	str	r3, [r0, #16]
   d708c:	6143      	str	r3, [r0, #20]
  _dataCRC    = 0; 
   d708e:	8303      	strh	r3, [r0, #24]
  _readCRC    = 0;
  _singleDrop = singleDrop;
   d7090:	7682      	strb	r2, [r0, #26]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d7092:	4604      	mov	r4, r0
  ds          = new OneWire(pin);
   d7094:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d7096:	9101      	str	r1, [sp, #4]
  ds          = new OneWire(pin);
   d7098:	f7fc fffd 	bl	d4096 <_Znwj>
   d709c:	4605      	mov	r5, r0
   d709e:	b110      	cbz	r0, d70a6 <_ZN7DS18B20C1Etb+0x26>
   d70a0:	9901      	ldr	r1, [sp, #4]
   d70a2:	f000 fba7 	bl	d77f4 <_ZN7OneWireC1Et>
}
   d70a6:	4620      	mov	r0, r4
  ds          = new OneWire(pin);
   d70a8:	6025      	str	r5, [r4, #0]
}
   d70aa:	b003      	add	sp, #12
   d70ac:	bd30      	pop	{r4, r5, pc}

000d70ae <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d70ae:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d70b0:	f100 0510 	add.w	r5, r0, #16
{
   d70b4:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d70b6:	6800      	ldr	r0, [r0, #0]
   d70b8:	4629      	mov	r1, r5
   d70ba:	f000 fc8b 	bl	d79d4 <_ZN7OneWire6searchEPh>
   d70be:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d70c0:	bf1d      	ittte	ne
   d70c2:	682b      	ldrne	r3, [r5, #0]
   d70c4:	6023      	strne	r3, [r4, #0]
   d70c6:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d70c8:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d70ca:	bf14      	ite	ne
   d70cc:	2001      	movne	r0, #1
   d70ce:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d70d0:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d70d2:	bd38      	pop	{r3, r4, r5, pc}

000d70d4 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d70d4:	b510      	push	{r4, lr}
   d70d6:	4604      	mov	r4, r0
{
  delete(ds);
   d70d8:	6800      	ldr	r0, [r0, #0]
   d70da:	b110      	cbz	r0, d70e2 <_ZN7DS18B20D1Ev+0xe>
   d70dc:	210e      	movs	r1, #14
   d70de:	f003 f9c8 	bl	da472 <_ZdlPvj>
}
   d70e2:	4620      	mov	r0, r4
   d70e4:	bd10      	pop	{r4, pc}

000d70e6 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d70e6:	6800      	ldr	r0, [r0, #0]
   d70e8:	f000 bc6c 	b.w	d79c4 <_ZN7OneWire12reset_searchEv>

000d70ec <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d70ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d70f0:	7e83      	ldrb	r3, [r0, #26]
{
   d70f2:	4604      	mov	r4, r0
   d70f4:	460d      	mov	r5, r1
   d70f6:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d70f8:	b92b      	cbnz	r3, d7106 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d70fa:	780b      	ldrb	r3, [r1, #0]
   d70fc:	b91b      	cbnz	r3, d7106 <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d70fe:	ed9f 0a57 	vldr	s0, [pc, #348]	; d725c <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d7102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d7106:	6820      	ldr	r0, [r4, #0]
   d7108:	f000 fb7e 	bl	d7808 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d710c:	7ea3      	ldrb	r3, [r4, #26]
   d710e:	2b00      	cmp	r3, #0
   d7110:	d05d      	beq.n	d71ce <_ZN7DS18B2014getTemperatureEPhb+0xe2>
   d7112:	2e00      	cmp	r6, #0
   d7114:	d15b      	bne.n	d71ce <_ZN7DS18B2014getTemperatureEPhb+0xe2>
    ds->skip();
   d7116:	6820      	ldr	r0, [r4, #0]
   d7118:	f000 fc50 	bl	d79bc <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d711c:	2200      	movs	r2, #0
   d711e:	2144      	movs	r1, #68	; 0x44
   d7120:	6820      	ldr	r0, [r4, #0]
   d7122:	f000 fc06 	bl	d7932 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d7126:	f240 20ee 	movw	r0, #750	; 0x2ee
   d712a:	f001 fbb3 	bl	d8894 <delay>
  ds->reset();
   d712e:	6820      	ldr	r0, [r4, #0]
   d7130:	f000 fb6a 	bl	d7808 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d7134:	7ea3      	ldrb	r3, [r4, #26]
   d7136:	2b00      	cmp	r3, #0
   d7138:	d04e      	beq.n	d71d8 <_ZN7DS18B2014getTemperatureEPhb+0xec>
   d713a:	2e00      	cmp	r6, #0
   d713c:	d14c      	bne.n	d71d8 <_ZN7DS18B2014getTemperatureEPhb+0xec>
    ds->skip();
   d713e:	6820      	ldr	r0, [r4, #0]
   d7140:	f000 fc3c 	bl	d79bc <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d7144:	6820      	ldr	r0, [r4, #0]
   d7146:	2200      	movs	r2, #0
   d7148:	21be      	movs	r1, #190	; 0xbe
   d714a:	f000 fbf2 	bl	d7932 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d714e:	782b      	ldrb	r3, [r5, #0]
   d7150:	2b26      	cmp	r3, #38	; 0x26
   d7152:	d104      	bne.n	d715e <_ZN7DS18B2014getTemperatureEPhb+0x72>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d7154:	2200      	movs	r2, #0
   d7156:	6820      	ldr	r0, [r4, #0]
   d7158:	4611      	mov	r1, r2
   d715a:	f000 fbea 	bl	d7932 <_ZN7OneWire5writeEhh>
   d715e:	1d26      	adds	r6, r4, #4
   d7160:	f104 080d 	add.w	r8, r4, #13
   d7164:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d7166:	6820      	ldr	r0, [r4, #0]
   d7168:	f000 fc06 	bl	d7978 <_ZN7OneWire4readEv>
   d716c:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d7170:	4546      	cmp	r6, r8
   d7172:	d1f8      	bne.n	d7166 <_ZN7DS18B2014getTemperatureEPhb+0x7a>
  _dataCRC = (OneWire::crc8(_data, 8));
   d7174:	2108      	movs	r1, #8
   d7176:	4638      	mov	r0, r7
   d7178:	f000 fca0 	bl	d7abc <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d717c:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d717e:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d7180:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d7182:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d7184:	d1bb      	bne.n	d70fe <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d7186:	782b      	ldrb	r3, [r5, #0]
   d7188:	2b26      	cmp	r3, #38	; 0x26
   d718a:	d047      	beq.n	d721c <_ZN7DS18B2014getTemperatureEPhb+0x130>
   d718c:	d829      	bhi.n	d71e2 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d718e:	2b10      	cmp	r3, #16
   d7190:	d029      	beq.n	d71e6 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
   d7192:	2b22      	cmp	r3, #34	; 0x22
   d7194:	d1b3      	bne.n	d70fe <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d7196:	7a22      	ldrb	r2, [r4, #8]
   d7198:	7923      	ldrb	r3, [r4, #4]
   d719a:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d719e:	2a20      	cmp	r2, #32
   d71a0:	d036      	beq.n	d7210 <_ZN7DS18B2014getTemperatureEPhb+0x124>
   d71a2:	2a40      	cmp	r2, #64	; 0x40
   d71a4:	d037      	beq.n	d7216 <_ZN7DS18B2014getTemperatureEPhb+0x12a>
   d71a6:	b912      	cbnz	r2, d71ae <_ZN7DS18B2014getTemperatureEPhb+0xc2>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d71a8:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d71ac:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d71ae:	7963      	ldrb	r3, [r4, #5]
   d71b0:	7920      	ldrb	r0, [r4, #4]
   d71b2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d71b6:	b200      	sxth	r0, r0
   d71b8:	f003 fab6 	bl	da728 <__aeabi_i2d>
   d71bc:	4b28      	ldr	r3, [pc, #160]	; (d7260 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d71be:	2200      	movs	r2, #0
   d71c0:	f003 fb1c 	bl	da7fc <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d71c4:	f003 fd4c 	bl	dac60 <__aeabi_d2f>
   d71c8:	ee00 0a10 	vmov	s0, r0
      break;
   d71cc:	e799      	b.n	d7102 <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d71ce:	6820      	ldr	r0, [r4, #0]
   d71d0:	4629      	mov	r1, r5
   d71d2:	f000 fbe1 	bl	d7998 <_ZN7OneWire6selectEPKh>
   d71d6:	e7a1      	b.n	d711c <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d71d8:	6820      	ldr	r0, [r4, #0]
   d71da:	4629      	mov	r1, r5
   d71dc:	f000 fbdc 	bl	d7998 <_ZN7OneWire6selectEPKh>
   d71e0:	e7b0      	b.n	d7144 <_ZN7DS18B2014getTemperatureEPhb+0x58>
  switch(addr[0]) 
   d71e2:	2b28      	cmp	r3, #40	; 0x28
   d71e4:	e7d6      	b.n	d7194 <_ZN7DS18B2014getTemperatureEPhb+0xa8>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d71e6:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d71e8:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d71ea:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d71ec:	bf08      	it	eq
   d71ee:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d71f0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d71f4:	bf03      	ittte	eq
   d71f6:	f1c3 030c 	rsbeq	r3, r3, #12
   d71fa:	f022 020f 	biceq.w	r2, r2, #15
   d71fe:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d7200:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d7202:	bf08      	it	eq
   d7204:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d7206:	ee00 3a10 	vmov	s0, r3
   d720a:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d720e:	e778      	b.n	d7102 <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d7210:	f023 0303 	bic.w	r3, r3, #3
   d7214:	e7ca      	b.n	d71ac <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d7216:	f023 0301 	bic.w	r3, r3, #1
   d721a:	e7c7      	b.n	d71ac <_ZN7DS18B2014getTemperatureEPhb+0xc0>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d721c:	79a5      	ldrb	r5, [r4, #6]
   d721e:	4628      	mov	r0, r5
   d7220:	f003 fa82 	bl	da728 <__aeabi_i2d>
   d7224:	4606      	mov	r6, r0
   d7226:	7960      	ldrb	r0, [r4, #5]
   d7228:	10c0      	asrs	r0, r0, #3
   d722a:	ee07 0a90 	vmov	s15, r0
   d722e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7232:	460f      	mov	r7, r1
   d7234:	ee17 0a90 	vmov	r0, s15
   d7238:	f003 fa88 	bl	da74c <__aeabi_f2d>
   d723c:	4b09      	ldr	r3, [pc, #36]	; (d7264 <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d723e:	2200      	movs	r2, #0
   d7240:	f003 fadc 	bl	da7fc <__aeabi_dmul>
   d7244:	062b      	lsls	r3, r5, #24
   d7246:	bf54      	ite	pl
   d7248:	4b07      	ldrpl	r3, [pc, #28]	; (d7268 <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d724a:	4b08      	ldrmi	r3, [pc, #32]	; (d726c <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d724c:	2200      	movs	r2, #0
   d724e:	f003 fad5 	bl	da7fc <__aeabi_dmul>
   d7252:	4632      	mov	r2, r6
   d7254:	463b      	mov	r3, r7
   d7256:	f003 f91b 	bl	da490 <__adddf3>
   d725a:	e7b3      	b.n	d71c4 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d725c:	7fc00000 	.word	0x7fc00000
   d7260:	3fb00000 	.word	0x3fb00000
   d7264:	3fa00000 	.word	0x3fa00000
   d7268:	3ff00000 	.word	0x3ff00000
   d726c:	bff00000 	.word	0xbff00000

000d7270 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d7270:	b508      	push	{r3, lr}
   d7272:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d7276:	f003 fa69 	bl	da74c <__aeabi_f2d>
   d727a:	a308      	add	r3, pc, #32	; (adr r3, d729c <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d727c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7280:	f003 fabc 	bl	da7fc <__aeabi_dmul>
   d7284:	4b04      	ldr	r3, [pc, #16]	; (d7298 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d7286:	2200      	movs	r2, #0
   d7288:	f003 f902 	bl	da490 <__adddf3>
   d728c:	f003 fce8 	bl	dac60 <__aeabi_d2f>
}
   d7290:	ee00 0a10 	vmov	s0, r0
   d7294:	bd08      	pop	{r3, pc}
   d7296:	bf00      	nop
   d7298:	40400000 	.word	0x40400000
   d729c:	cccccccd 	.word	0xcccccccd
   d72a0:	3ffccccc 	.word	0x3ffccccc

000d72a4 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d72a4:	7e02      	ldrb	r2, [r0, #24]
   d72a6:	7e40      	ldrb	r0, [r0, #25]
}
   d72a8:	1a13      	subs	r3, r2, r0
   d72aa:	4258      	negs	r0, r3
   d72ac:	4158      	adcs	r0, r3
   d72ae:	4770      	bx	lr

000d72b0 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d72b0:	4770      	bx	lr

000d72b2 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d72b2:	b510      	push	{r4, lr}
}
   d72b4:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d72b6:	4604      	mov	r4, r0
}
   d72b8:	f003 f8db 	bl	da472 <_ZdlPvj>
   d72bc:	4620      	mov	r0, r4
   d72be:	bd10      	pop	{r4, pc}

000d72c0 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d72c0:	b510      	push	{r4, lr}
   d72c2:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d72c4:	f100 0118 	add.w	r1, r0, #24
   d72c8:	68c0      	ldr	r0, [r0, #12]
   d72ca:	f002 f9f5 	bl	d96b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d72ce:	8a20      	ldrh	r0, [r4, #16]
   d72d0:	2100      	movs	r1, #0
}
   d72d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d72d6:	f003 b85a 	b.w	da38e <digitalWrite>

000d72da <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d72da:	b510      	push	{r4, lr}
   d72dc:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d72de:	2101      	movs	r1, #1
   d72e0:	8a00      	ldrh	r0, [r0, #16]
   d72e2:	f003 f854 	bl	da38e <digitalWrite>

	spi.endTransaction();
   d72e6:	68e0      	ldr	r0, [r4, #12]
}
   d72e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d72ec:	f002 b9cb 	b.w	d9686 <_ZN8SPIClass14endTransactionEv>

000d72f0 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d72f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72f2:	461e      	mov	r6, r3
	beginTransaction();
   d72f4:	6803      	ldr	r3, [r0, #0]
   d72f6:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d72f8:	460f      	mov	r7, r1
   d72fa:	4614      	mov	r4, r2
   d72fc:	4605      	mov	r5, r0
	beginTransaction();
   d72fe:	4798      	blx	r3

	if (numBytes > 1) {
   d7300:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7302:	bf88      	it	hi
   d7304:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d7308:	68e8      	ldr	r0, [r5, #12]
   d730a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d730e:	f002 fa41 	bl	d9794 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d7312:	4426      	add	r6, r4
   d7314:	42b4      	cmp	r4, r6
   d7316:	d006      	beq.n	d7326 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d7318:	68e8      	ldr	r0, [r5, #12]
   d731a:	2100      	movs	r1, #0
   d731c:	f002 fa3a 	bl	d9794 <_ZN8SPIClass8transferEh>
   d7320:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7324:	e7f6      	b.n	d7314 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d7326:	682b      	ldr	r3, [r5, #0]
   d7328:	4628      	mov	r0, r5
   d732a:	699b      	ldr	r3, [r3, #24]
   d732c:	4798      	blx	r3

	return true;
}
   d732e:	2001      	movs	r0, #1
   d7330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7332 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7334:	461e      	mov	r6, r3
	beginTransaction();
   d7336:	6803      	ldr	r3, [r0, #0]
   d7338:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d733a:	460f      	mov	r7, r1
   d733c:	4614      	mov	r4, r2
   d733e:	4605      	mov	r5, r0
	beginTransaction();
   d7340:	4798      	blx	r3

	if (numBytes > 1) {
   d7342:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d7344:	bf88      	it	hi
   d7346:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d734a:	68e8      	ldr	r0, [r5, #12]
   d734c:	4639      	mov	r1, r7
   d734e:	f002 fa21 	bl	d9794 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7352:	4426      	add	r6, r4
   d7354:	42b4      	cmp	r4, r6
   d7356:	d005      	beq.n	d7364 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d7358:	f814 1b01 	ldrb.w	r1, [r4], #1
   d735c:	68e8      	ldr	r0, [r5, #12]
   d735e:	f002 fa19 	bl	d9794 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d7362:	e7f7      	b.n	d7354 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d7364:	682b      	ldr	r3, [r5, #0]
   d7366:	4628      	mov	r0, r5
   d7368:	699b      	ldr	r3, [r3, #24]
   d736a:	4798      	blx	r3

	return true;
}
   d736c:	2001      	movs	r0, #1
   d736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7370 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d7370:	4a02      	ldr	r2, [pc, #8]	; (d737c <_ZN6LIS3DHC1Ei+0xc>)
   d7372:	e9c0 2100 	strd	r2, r1, [r0]
   d7376:	2200      	movs	r2, #0
   d7378:	7202      	strb	r2, [r0, #8]
}
   d737a:	4770      	bx	lr
   d737c:	000db828 	.word	0x000db828

000d7380 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d7380:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d7382:	6803      	ldr	r3, [r0, #0]
   d7384:	aa01      	add	r2, sp, #4
   d7386:	68dc      	ldr	r4, [r3, #12]
   d7388:	2301      	movs	r3, #1
   d738a:	47a0      	blx	r4
}
   d738c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d7390:	b002      	add	sp, #8
   d7392:	bd10      	pop	{r4, pc}

000d7394 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d7394:	b538      	push	{r3, r4, r5, lr}
   d7396:	4605      	mov	r5, r0
   d7398:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d739a:	210f      	movs	r1, #15
   d739c:	4628      	mov	r0, r5
   d739e:	f7ff ffef 	bl	d7380 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d73a2:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d73a4:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d73a8:	d004      	beq.n	d73b4 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d73aa:	f001 fa73 	bl	d8894 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d73ae:	3c01      	subs	r4, #1
   d73b0:	d1f3      	bne.n	d739a <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d73b2:	4620      	mov	r0, r4
}
   d73b4:	bd38      	pop	{r3, r4, r5, pc}

000d73b6 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d73b6:	b510      	push	{r4, lr}
   d73b8:	4604      	mov	r4, r0
	spi.begin(ss);
   d73ba:	8a01      	ldrh	r1, [r0, #16]
   d73bc:	68c0      	ldr	r0, [r0, #12]
   d73be:	f002 f94f 	bl	d9660 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d73c2:	4620      	mov	r0, r4
}
   d73c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d73c8:	f7ff bfe4 	b.w	d7394 <_ZN6LIS3DH9hasDeviceEv>

000d73cc <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d73cc:	4770      	bx	lr

000d73ce <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d73ce:	b510      	push	{r4, lr}
}
   d73d0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d73d2:	4604      	mov	r4, r0
}
   d73d4:	f003 f84d 	bl	da472 <_ZdlPvj>
   d73d8:	4620      	mov	r0, r4
   d73da:	bd10      	pop	{r4, pc}

000d73dc <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d73dc:	6803      	ldr	r3, [r0, #0]
   d73de:	b2c9      	uxtb	r1, r1
   d73e0:	689b      	ldr	r3, [r3, #8]
   d73e2:	4718      	bx	r3

000d73e4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d73e4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d73e6:	4d03      	ldr	r5, [pc, #12]	; (d73f4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d73e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d73ec:	e9c0 5100 	strd	r5, r1, [r0]
}
   d73f0:	bd30      	pop	{r4, r5, pc}
   d73f2:	bf00      	nop
   d73f4:	000db894 	.word	0x000db894

000d73f8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d73f8:	6840      	ldr	r0, [r0, #4]
   d73fa:	f001 bf11 	b.w	d9220 <_ZN7TwoWire5beginEv>

000d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d73fe:	b510      	push	{r4, lr}
   d7400:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7402:	6800      	ldr	r0, [r0, #0]
   d7404:	f001 ff4f 	bl	d92a6 <_ZN7TwoWire6unlockEv>
   d7408:	4620      	mov	r0, r4
   d740a:	bd10      	pop	{r4, pc}

000d740c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7410:	b08a      	sub	sp, #40	; 0x28
   d7412:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7414:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7416:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7418:	f001 ff3c 	bl	d9294 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d741c:	221e      	movs	r2, #30
   d741e:	2100      	movs	r1, #0
   d7420:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7422:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7424:	f003 fd16 	bl	dae54 <memset>
		size_t framAddr = 0;
   d7428:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d742a:	b1ef      	cbz	r7, d7468 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d742c:	6823      	ldr	r3, [r4, #0]
   d742e:	2f1e      	cmp	r7, #30
   d7430:	46b8      	mov	r8, r7
   d7432:	bf28      	it	cs
   d7434:	f04f 081e 	movcs.w	r8, #30
   d7438:	68dd      	ldr	r5, [r3, #12]
   d743a:	aa02      	add	r2, sp, #8
   d743c:	4643      	mov	r3, r8
   d743e:	4631      	mov	r1, r6
   d7440:	4620      	mov	r0, r4
   d7442:	47a8      	blx	r5
			if (!result) {
   d7444:	4605      	mov	r5, r0
   d7446:	b958      	cbnz	r0, d7460 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7448:	480a      	ldr	r0, [pc, #40]	; (d7474 <_ZN6MB85RC5eraseEv+0x68>)
   d744a:	490b      	ldr	r1, [pc, #44]	; (d7478 <_ZN6MB85RC5eraseEv+0x6c>)
   d744c:	4632      	mov	r2, r6
   d744e:	f7fc fefa 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7452:	a801      	add	r0, sp, #4
   d7454:	f7ff ffd3 	bl	d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7458:	4628      	mov	r0, r5
   d745a:	b00a      	add	sp, #40	; 0x28
   d745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7460:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7464:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7466:	e7e0      	b.n	d742a <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7468:	a801      	add	r0, sp, #4
   d746a:	f7ff ffc8 	bl	d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d746e:	2501      	movs	r5, #1
   d7470:	e7f2      	b.n	d7458 <_ZN6MB85RC5eraseEv+0x4c>
   d7472:	bf00      	nop
   d7474:	2003e624 	.word	0x2003e624
   d7478:	000db860 	.word	0x000db860

000d747c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d747c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7480:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7482:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7484:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7486:	460d      	mov	r5, r1
   d7488:	4616      	mov	r6, r2
   d748a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d748c:	f001 ff02 	bl	d9294 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7490:	b1a7      	cbz	r7, d74bc <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7492:	68e1      	ldr	r1, [r4, #12]
   d7494:	6860      	ldr	r0, [r4, #4]
   d7496:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d749a:	f001 fef4 	bl	d9286 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d749e:	0a29      	lsrs	r1, r5, #8
   d74a0:	6860      	ldr	r0, [r4, #4]
   d74a2:	f7ff ff9b 	bl	d73dc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d74a6:	4629      	mov	r1, r5
   d74a8:	6860      	ldr	r0, [r4, #4]
   d74aa:	f7ff ff97 	bl	d73dc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d74ae:	6860      	ldr	r0, [r4, #4]
   d74b0:	2100      	movs	r1, #0
   d74b2:	f001 feeb 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d74b6:	b148      	cbz	r0, d74cc <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d74b8:	2400      	movs	r4, #0
   d74ba:	e000      	b.n	d74be <_ZN6MB85RC8readDataEjPhj+0x42>
   d74bc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d74be:	a801      	add	r0, sp, #4
   d74c0:	f7ff ff9d 	bl	d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d74c4:	4620      	mov	r0, r4
   d74c6:	b003      	add	sp, #12
   d74c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d74cc:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d74ce:	7b21      	ldrb	r1, [r4, #12]
   d74d0:	6860      	ldr	r0, [r4, #4]
   d74d2:	46b8      	mov	r8, r7
   d74d4:	bf28      	it	cs
   d74d6:	f04f 0820 	movcs.w	r8, #32
   d74da:	2301      	movs	r3, #1
   d74dc:	4642      	mov	r2, r8
   d74de:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d74e2:	f001 feba 	bl	d925a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d74e6:	f002 ff97 	bl	da418 <_Z19__fetch_global_Wirev>
   d74ea:	6803      	ldr	r3, [r0, #0]
   d74ec:	691b      	ldr	r3, [r3, #16]
   d74ee:	4798      	blx	r3
   d74f0:	4540      	cmp	r0, r8
   d74f2:	dbe1      	blt.n	d74b8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d74f4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d74f8:	f002 ff8e 	bl	da418 <_Z19__fetch_global_Wirev>
   d74fc:	6803      	ldr	r3, [r0, #0]
   d74fe:	695b      	ldr	r3, [r3, #20]
   d7500:	4798      	blx	r3
   d7502:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7506:	454e      	cmp	r6, r9
   d7508:	d1f6      	bne.n	d74f8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d750a:	4445      	add	r5, r8
   d750c:	eba7 0708 	sub.w	r7, r7, r8
   d7510:	e7be      	b.n	d7490 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7512 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7516:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7518:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d751a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d751c:	460e      	mov	r6, r1
   d751e:	4690      	mov	r8, r2
   d7520:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7522:	f001 feb7 	bl	d9294 <_ZN7TwoWire4lockEv>
   d7526:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d752a:	f1b9 0f00 	cmp.w	r9, #0
   d752e:	d02a      	beq.n	d7586 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7530:	b34d      	cbz	r5, d7586 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7532:	68e1      	ldr	r1, [r4, #12]
   d7534:	6860      	ldr	r0, [r4, #4]
   d7536:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d753a:	f001 fea4 	bl	d9286 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d753e:	0a31      	lsrs	r1, r6, #8
   d7540:	6860      	ldr	r0, [r4, #4]
   d7542:	f7ff ff4b 	bl	d73dc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7546:	6860      	ldr	r0, [r4, #4]
   d7548:	4631      	mov	r1, r6
   d754a:	f7ff ff47 	bl	d73dc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d754e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7552:	4647      	mov	r7, r8
   d7554:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7558:	6860      	ldr	r0, [r4, #4]
   d755a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d755e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7560:	3d01      	subs	r5, #1
				wire.write(*data);
   d7562:	689b      	ldr	r3, [r3, #8]
   d7564:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7566:	4555      	cmp	r5, sl
   d7568:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d756c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d756e:	d001      	beq.n	d7574 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7570:	2d00      	cmp	r5, #0
   d7572:	d1f1      	bne.n	d7558 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7574:	6860      	ldr	r0, [r4, #4]
   d7576:	2101      	movs	r1, #1
   d7578:	f001 fe88 	bl	d928c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d757c:	2800      	cmp	r0, #0
   d757e:	d0d7      	beq.n	d7530 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7580:	f04f 0900 	mov.w	r9, #0
   d7584:	e7d1      	b.n	d752a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7586:	a801      	add	r0, sp, #4
   d7588:	f7ff ff39 	bl	d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d758c:	4648      	mov	r0, r9
   d758e:	b003      	add	sp, #12
   d7590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7594 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7598:	b08b      	sub	sp, #44	; 0x2c
   d759a:	460e      	mov	r6, r1
   d759c:	4615      	mov	r5, r2
   d759e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d75a0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75a2:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75a4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d75a6:	f001 fe75 	bl	d9294 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d75aa:	42ae      	cmp	r6, r5
   d75ac:	d229      	bcs.n	d7602 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d75ae:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d75b0:	4425      	add	r5, r4
			while(numBytes > 0) {
   d75b2:	b18c      	cbz	r4, d75d8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d75b4:	2c1e      	cmp	r4, #30
   d75b6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d75b8:	f8d8 3000 	ldr.w	r3, [r8]
   d75bc:	bf28      	it	cs
   d75be:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d75c0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d75c2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d75c6:	aa02      	add	r2, sp, #8
   d75c8:	463b      	mov	r3, r7
   d75ca:	4631      	mov	r1, r6
   d75cc:	4640      	mov	r0, r8
				framAddrTo -= count;
   d75ce:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d75d0:	47c8      	blx	r9
				if (!result) {
   d75d2:	b948      	cbnz	r0, d75e8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75d4:	2400      	movs	r4, #0
   d75d6:	e000      	b.n	d75da <_ZN6MB85RC8moveDataEjjj+0x46>
   d75d8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d75da:	a801      	add	r0, sp, #4
   d75dc:	f7ff ff0f 	bl	d73fe <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d75e0:	4620      	mov	r0, r4
   d75e2:	b00b      	add	sp, #44	; 0x2c
   d75e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d75e8:	f8d8 3000 	ldr.w	r3, [r8]
   d75ec:	aa02      	add	r2, sp, #8
   d75ee:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d75f2:	4629      	mov	r1, r5
   d75f4:	463b      	mov	r3, r7
   d75f6:	4640      	mov	r0, r8
   d75f8:	47c8      	blx	r9
				if (!result) {
   d75fa:	2800      	cmp	r0, #0
   d75fc:	d0ea      	beq.n	d75d4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d75fe:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7600:	e7d7      	b.n	d75b2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7602:	d9e9      	bls.n	d75d8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7604:	2c00      	cmp	r4, #0
   d7606:	d0e7      	beq.n	d75d8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7608:	f8d8 3000 	ldr.w	r3, [r8]
   d760c:	2c1e      	cmp	r4, #30
   d760e:	4627      	mov	r7, r4
   d7610:	bf28      	it	cs
   d7612:	271e      	movcs	r7, #30
   d7614:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7618:	aa02      	add	r2, sp, #8
   d761a:	463b      	mov	r3, r7
   d761c:	4631      	mov	r1, r6
   d761e:	4640      	mov	r0, r8
   d7620:	47c8      	blx	r9
				if (!result) {
   d7622:	2800      	cmp	r0, #0
   d7624:	d0d6      	beq.n	d75d4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d7626:	f8d8 3000 	ldr.w	r3, [r8]
   d762a:	aa02      	add	r2, sp, #8
   d762c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7630:	4629      	mov	r1, r5
   d7632:	463b      	mov	r3, r7
   d7634:	4640      	mov	r0, r8
   d7636:	47c8      	blx	r9
				if (!result) {
   d7638:	2800      	cmp	r0, #0
   d763a:	d0cb      	beq.n	d75d4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d763c:	443e      	add	r6, r7
				framAddrTo += count;
   d763e:	443d      	add	r5, r7
				numBytes -= count;
   d7640:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7642:	e7df      	b.n	d7604 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7644 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d7644:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d7646:	6803      	ldr	r3, [r0, #0]
   d7648:	2b2f      	cmp	r3, #47	; 0x2f
{
   d764a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d764c:	d904      	bls.n	d7658 <nrf_gpio_pin_port_decode+0x14>
   d764e:	4a07      	ldr	r2, [pc, #28]	; (d766c <nrf_gpio_pin_port_decode+0x28>)
   d7650:	2100      	movs	r1, #0
   d7652:	200a      	movs	r0, #10
   d7654:	f000 ff52 	bl	d84fc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d7658:	6823      	ldr	r3, [r4, #0]
   d765a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d765c:	bf83      	ittte	hi
   d765e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d7662:	4803      	ldrhi	r0, [pc, #12]	; (d7670 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d7664:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d7666:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d766a:	bd10      	pop	{r4, pc}
   d766c:	000d81ad 	.word	0x000d81ad
   d7670:	50000300 	.word	0x50000300

000d7674 <_ZN7OneWire19digitalWriteFastLowEv>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d7674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7676:	4c1b      	ldr	r4, [pc, #108]	; (d76e4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
      pinResetFast(_pin);
   d7678:	8805      	ldrh	r5, [r0, #0]
   d767a:	7823      	ldrb	r3, [r4, #0]
   d767c:	4e1a      	ldr	r6, [pc, #104]	; (d76e8 <_ZN7OneWire19digitalWriteFastLowEv+0x74>)
   d767e:	f3bf 8f5b 	dmb	ish
   d7682:	f013 0f01 	tst.w	r3, #1
   d7686:	d109      	bne.n	d769c <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d7688:	4620      	mov	r0, r4
   d768a:	f7fc fd15 	bl	d40b8 <__cxa_guard_acquire>
   d768e:	b128      	cbz	r0, d769c <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d7690:	f000 fdcc 	bl	d822c <HAL_Pin_Map>
   d7694:	6030      	str	r0, [r6, #0]
   d7696:	4620      	mov	r0, r4
   d7698:	f7fc fd13 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d769c:	6833      	ldr	r3, [r6, #0]
   d769e:	012d      	lsls	r5, r5, #4
   d76a0:	5d5b      	ldrb	r3, [r3, r5]
   d76a2:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d76a4:	7823      	ldrb	r3, [r4, #0]
   d76a6:	f3bf 8f5b 	dmb	ish
   d76aa:	07db      	lsls	r3, r3, #31
   d76ac:	d409      	bmi.n	d76c2 <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d76ae:	480d      	ldr	r0, [pc, #52]	; (d76e4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d76b0:	f7fc fd02 	bl	d40b8 <__cxa_guard_acquire>
   d76b4:	b128      	cbz	r0, d76c2 <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d76b6:	f000 fdb9 	bl	d822c <HAL_Pin_Map>
   d76ba:	6030      	str	r0, [r6, #0]
   d76bc:	4809      	ldr	r0, [pc, #36]	; (d76e4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d76be:	f7fc fd00 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d76c2:	6833      	ldr	r3, [r6, #0]
   d76c4:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d76c6:	a801      	add	r0, sp, #4
   d76c8:	785b      	ldrb	r3, [r3, #1]
   d76ca:	f003 031f 	and.w	r3, r3, #31
   d76ce:	433b      	orrs	r3, r7
   d76d0:	9301      	str	r3, [sp, #4]
   d76d2:	f7ff ffb7 	bl	d7644 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d76d6:	9a01      	ldr	r2, [sp, #4]
   d76d8:	2301      	movs	r3, #1
   d76da:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d76dc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   d76e0:	b003      	add	sp, #12
   d76e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76e4:	2003e5d8 	.word	0x2003e5d8
   d76e8:	2003e5dc 	.word	0x2003e5dc

000d76ec <_ZN7OneWire20digitalWriteFastHighEv>:

    inline void digitalWriteFastHigh() {
   d76ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d76ee:	4c1b      	ldr	r4, [pc, #108]	; (d775c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
      pinSetFast(_pin);
   d76f0:	8805      	ldrh	r5, [r0, #0]
   d76f2:	7823      	ldrb	r3, [r4, #0]
   d76f4:	4e1a      	ldr	r6, [pc, #104]	; (d7760 <_ZN7OneWire20digitalWriteFastHighEv+0x74>)
   d76f6:	f3bf 8f5b 	dmb	ish
   d76fa:	f013 0f01 	tst.w	r3, #1
   d76fe:	d109      	bne.n	d7714 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d7700:	4620      	mov	r0, r4
   d7702:	f7fc fcd9 	bl	d40b8 <__cxa_guard_acquire>
   d7706:	b128      	cbz	r0, d7714 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d7708:	f000 fd90 	bl	d822c <HAL_Pin_Map>
   d770c:	6030      	str	r0, [r6, #0]
   d770e:	4620      	mov	r0, r4
   d7710:	f7fc fcd7 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7714:	6833      	ldr	r3, [r6, #0]
   d7716:	012d      	lsls	r5, r5, #4
   d7718:	5d5b      	ldrb	r3, [r3, r5]
   d771a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d771c:	7823      	ldrb	r3, [r4, #0]
   d771e:	f3bf 8f5b 	dmb	ish
   d7722:	07db      	lsls	r3, r3, #31
   d7724:	d409      	bmi.n	d773a <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d7726:	480d      	ldr	r0, [pc, #52]	; (d775c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d7728:	f7fc fcc6 	bl	d40b8 <__cxa_guard_acquire>
   d772c:	b128      	cbz	r0, d773a <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d772e:	f000 fd7d 	bl	d822c <HAL_Pin_Map>
   d7732:	6030      	str	r0, [r6, #0]
   d7734:	4809      	ldr	r0, [pc, #36]	; (d775c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d7736:	f7fc fcc4 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d773a:	6833      	ldr	r3, [r6, #0]
   d773c:	442b      	add	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d773e:	a801      	add	r0, sp, #4
   d7740:	785b      	ldrb	r3, [r3, #1]
   d7742:	f003 031f 	and.w	r3, r3, #31
   d7746:	433b      	orrs	r3, r7
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	f7ff ff7b 	bl	d7644 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d774e:	9a01      	ldr	r2, [sp, #4]
   d7750:	2301      	movs	r3, #1
   d7752:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d7754:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    }
   d7758:	b003      	add	sp, #12
   d775a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d775c:	2003e5d8 	.word	0x2003e5d8
   d7760:	2003e5dc 	.word	0x2003e5dc

000d7764 <_ZN7OneWire15digitalReadFastEv>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d7764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7768:	4d20      	ldr	r5, [pc, #128]	; (d77ec <_ZN7OneWire15digitalReadFastEv+0x88>)
      return pinReadFast(_pin);
   d776a:	8806      	ldrh	r6, [r0, #0]
   d776c:	782b      	ldrb	r3, [r5, #0]
   d776e:	4f20      	ldr	r7, [pc, #128]	; (d77f0 <_ZN7OneWire15digitalReadFastEv+0x8c>)
   d7770:	f3bf 8f5b 	dmb	ish
   d7774:	f013 0f01 	tst.w	r3, #1
   d7778:	d109      	bne.n	d778e <_ZN7OneWire15digitalReadFastEv+0x2a>
   d777a:	4628      	mov	r0, r5
   d777c:	f7fc fc9c 	bl	d40b8 <__cxa_guard_acquire>
   d7780:	b128      	cbz	r0, d778e <_ZN7OneWire15digitalReadFastEv+0x2a>
   d7782:	f000 fd53 	bl	d822c <HAL_Pin_Map>
   d7786:	6038      	str	r0, [r7, #0]
   d7788:	4628      	mov	r0, r5
   d778a:	f7fc fc9a 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d778e:	683b      	ldr	r3, [r7, #0]
   d7790:	0136      	lsls	r6, r6, #4
   d7792:	5d9c      	ldrb	r4, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7794:	782b      	ldrb	r3, [r5, #0]
   d7796:	f3bf 8f5b 	dmb	ish
   d779a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d779c:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d77a0:	d409      	bmi.n	d77b6 <_ZN7OneWire15digitalReadFastEv+0x52>
   d77a2:	4812      	ldr	r0, [pc, #72]	; (d77ec <_ZN7OneWire15digitalReadFastEv+0x88>)
   d77a4:	f7fc fc88 	bl	d40b8 <__cxa_guard_acquire>
   d77a8:	b128      	cbz	r0, d77b6 <_ZN7OneWire15digitalReadFastEv+0x52>
   d77aa:	f000 fd3f 	bl	d822c <HAL_Pin_Map>
   d77ae:	6038      	str	r0, [r7, #0]
   d77b0:	480e      	ldr	r0, [pc, #56]	; (d77ec <_ZN7OneWire15digitalReadFastEv+0x88>)
   d77b2:	f7fc fc86 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d77b6:	683b      	ldr	r3, [r7, #0]
   d77b8:	4433      	add	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d77ba:	a801      	add	r0, sp, #4
   d77bc:	785c      	ldrb	r4, [r3, #1]
   d77be:	f004 041f 	and.w	r4, r4, #31
   d77c2:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d77c6:	9401      	str	r4, [sp, #4]
   d77c8:	f7ff ff3c 	bl	d7644 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d77cc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   d77d0:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d77d2:	a801      	add	r0, sp, #4
   d77d4:	f7ff ff36 	bl	d7644 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d77d8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d77da:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d77de:	40d8      	lsrs	r0, r3
    }
   d77e0:	f000 0001 	and.w	r0, r0, #1
   d77e4:	b002      	add	sp, #8
   d77e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77ea:	bf00      	nop
   d77ec:	2003e5d8 	.word	0x2003e5d8
   d77f0:	2003e5dc 	.word	0x2003e5dc

000d77f4 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d77f4:	b538      	push	{r3, r4, r5, lr}
   d77f6:	4604      	mov	r4, r0
   d77f8:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d77fa:	4628      	mov	r0, r5
   d77fc:	2100      	movs	r1, #0
   d77fe:	f002 fdb5 	bl	da36c <pinMode>
    _pin = pin;
   d7802:	8025      	strh	r5, [r4, #0]
}
   d7804:	4620      	mov	r0, r4
   d7806:	bd38      	pop	{r3, r4, r5, pc}

000d7808 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d7808:	b570      	push	{r4, r5, r6, lr}
   d780a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d780c:	f001 fd54 	bl	d92b8 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d7810:	8828      	ldrh	r0, [r5, #0]
   d7812:	2100      	movs	r1, #0
   d7814:	f000 fd12 	bl	d823c <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d7818:	f001 fd50 	bl	d92bc <_Z10interruptsv>
   d781c:	247d      	movs	r4, #125	; 0x7d
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d781e:	3c01      	subs	r4, #1
   d7820:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7824:	d02d      	beq.n	d7882 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7826:	2002      	movs	r0, #2
   d7828:	f000 fcc0 	bl	d81ac <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d782c:	4628      	mov	r0, r5
   d782e:	f7ff ff99 	bl	d7764 <_ZN7OneWire15digitalReadFastEv>
   d7832:	2800      	cmp	r0, #0
   d7834:	d0f3      	beq.n	d781e <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
   d7836:	f001 fd3f 	bl	d92b8 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d783a:	4628      	mov	r0, r5
   d783c:	f7ff ff1a 	bl	d7674 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7840:	2101      	movs	r1, #1
   d7842:	8828      	ldrh	r0, [r5, #0]
   d7844:	f000 fcfa 	bl	d823c <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d7848:	f001 fd38 	bl	d92bc <_Z10interruptsv>
   d784c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d7850:	f000 fcac 	bl	d81ac <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d7854:	f000 fcba 	bl	d81cc <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d7858:	2100      	movs	r1, #0
   d785a:	4606      	mov	r6, r0
   d785c:	8828      	ldrh	r0, [r5, #0]
   d785e:	f000 fced 	bl	d823c <HAL_Pin_Mode>
   d7862:	2046      	movs	r0, #70	; 0x46
   d7864:	f000 fca2 	bl	d81ac <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d7868:	4628      	mov	r0, r5
   d786a:	f7ff ff7b 	bl	d7764 <_ZN7OneWire15digitalReadFastEv>
   d786e:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d7872:	4630      	mov	r0, r6
   d7874:	f000 fcb2 	bl	d81dc <HAL_enable_irq>
   d7878:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d787c:	0964      	lsrs	r4, r4, #5
   d787e:	f000 fc95 	bl	d81ac <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d7882:	4620      	mov	r0, r4
   d7884:	bd70      	pop	{r4, r5, r6, pc}

000d7886 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d7886:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d7888:	f011 0501 	ands.w	r5, r1, #1
{
   d788c:	4604      	mov	r4, r0
    if (v & 1)
   d788e:	d018      	beq.n	d78c2 <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d7890:	f000 fc9c 	bl	d81cc <HAL_disable_irq>
   d7894:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d7896:	4620      	mov	r0, r4
   d7898:	f7ff feec 	bl	d7674 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d789c:	2101      	movs	r1, #1
   d789e:	8820      	ldrh	r0, [r4, #0]
   d78a0:	f000 fccc 	bl	d823c <HAL_Pin_Mode>
   d78a4:	2001      	movs	r0, #1
   d78a6:	f000 fc81 	bl	d81ac <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d78aa:	8820      	ldrh	r0, [r4, #0]
   d78ac:	2100      	movs	r1, #0
   d78ae:	f000 fcc5 	bl	d823c <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d78b2:	4628      	mov	r0, r5
   d78b4:	f000 fc92 	bl	d81dc <HAL_enable_irq>
   d78b8:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d78ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d78be:	f000 bc75 	b.w	d81ac <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d78c2:	f000 fc83 	bl	d81cc <HAL_disable_irq>
   d78c6:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d78c8:	4620      	mov	r0, r4
   d78ca:	f7ff fed3 	bl	d7674 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d78ce:	2101      	movs	r1, #1
   d78d0:	8820      	ldrh	r0, [r4, #0]
   d78d2:	f000 fcb3 	bl	d823c <HAL_Pin_Mode>
   d78d6:	2041      	movs	r0, #65	; 0x41
   d78d8:	f000 fc68 	bl	d81ac <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d78dc:	8820      	ldrh	r0, [r4, #0]
   d78de:	4629      	mov	r1, r5
   d78e0:	f000 fcac 	bl	d823c <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d78e4:	4630      	mov	r0, r6
   d78e6:	f000 fc79 	bl	d81dc <HAL_enable_irq>
   d78ea:	2005      	movs	r0, #5
   d78ec:	e7e5      	b.n	d78ba <_ZN7OneWire9write_bitEh+0x34>

000d78ee <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d78ee:	b538      	push	{r3, r4, r5, lr}
   d78f0:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d78f2:	f000 fc6b 	bl	d81cc <HAL_disable_irq>
   d78f6:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d78f8:	4620      	mov	r0, r4
   d78fa:	f7ff febb 	bl	d7674 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d78fe:	8820      	ldrh	r0, [r4, #0]
   d7900:	2101      	movs	r1, #1
   d7902:	f000 fc9b 	bl	d823c <HAL_Pin_Mode>
   d7906:	2001      	movs	r0, #1
   d7908:	f000 fc50 	bl	d81ac <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d790c:	2100      	movs	r1, #0
   d790e:	8820      	ldrh	r0, [r4, #0]
   d7910:	f000 fc94 	bl	d823c <HAL_Pin_Mode>
   d7914:	200d      	movs	r0, #13
   d7916:	f000 fc49 	bl	d81ac <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d791a:	4620      	mov	r0, r4
   d791c:	f7ff ff22 	bl	d7764 <_ZN7OneWire15digitalReadFastEv>
   d7920:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d7922:	4628      	mov	r0, r5
   d7924:	f000 fc5a 	bl	d81dc <HAL_enable_irq>
   d7928:	202e      	movs	r0, #46	; 0x2e
   d792a:	f000 fc3f 	bl	d81ac <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d792e:	4620      	mov	r0, r4
   d7930:	bd38      	pop	{r3, r4, r5, pc}

000d7932 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d7932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7936:	4604      	mov	r4, r0
   d7938:	4688      	mov	r8, r1
   d793a:	4616      	mov	r6, r2
   d793c:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d793e:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d7940:	ea18 0f05 	tst.w	r8, r5
   d7944:	bf14      	ite	ne
   d7946:	2101      	movne	r1, #1
   d7948:	2100      	moveq	r1, #0
   d794a:	4620      	mov	r0, r4
   d794c:	f7ff ff9b 	bl	d7886 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7950:	006d      	lsls	r5, r5, #1
   d7952:	3f01      	subs	r7, #1
   d7954:	b2ed      	uxtb	r5, r5
   d7956:	d1f3      	bne.n	d7940 <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
   d7958:	b166      	cbz	r6, d7974 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d795a:	f001 fcad 	bl	d92b8 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d795e:	4620      	mov	r0, r4
   d7960:	f7ff fec4 	bl	d76ec <_ZN7OneWire20digitalWriteFastHighEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7964:	8820      	ldrh	r0, [r4, #0]
   d7966:	2101      	movs	r1, #1
   d7968:	f000 fc68 	bl	d823c <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d796c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   d7970:	f001 bca4 	b.w	d92bc <_Z10interruptsv>
}
   d7974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7978 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d7978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d797a:	4607      	mov	r7, r0
   d797c:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d797e:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7980:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d7982:	4638      	mov	r0, r7
   d7984:	f7ff ffb3 	bl	d78ee <_ZN7OneWire8read_bitEv>
   d7988:	b100      	cbz	r0, d798c <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d798a:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d798c:	0064      	lsls	r4, r4, #1
   d798e:	3e01      	subs	r6, #1
   d7990:	b2e4      	uxtb	r4, r4
   d7992:	d1f6      	bne.n	d7982 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d7994:	4628      	mov	r0, r5
   d7996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7998 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d7998:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d799a:	2200      	movs	r2, #0
{
   d799c:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d799e:	2155      	movs	r1, #85	; 0x55
{
   d79a0:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d79a2:	f7ff ffc6 	bl	d7932 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d79a6:	1e65      	subs	r5, r4, #1
   d79a8:	3407      	adds	r4, #7
        write(rom[i]);
   d79aa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d79ae:	2200      	movs	r2, #0
   d79b0:	4630      	mov	r0, r6
   d79b2:	f7ff ffbe 	bl	d7932 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d79b6:	42a5      	cmp	r5, r4
   d79b8:	d1f7      	bne.n	d79aa <_ZN7OneWire6selectEPKh+0x12>
}
   d79ba:	bd70      	pop	{r4, r5, r6, pc}

000d79bc <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d79bc:	2200      	movs	r2, #0
   d79be:	21cc      	movs	r1, #204	; 0xcc
   d79c0:	f7ff bfb7 	b.w	d7932 <_ZN7OneWire5writeEhh>

000d79c4 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d79c4:	2300      	movs	r3, #0
   d79c6:	8043      	strh	r3, [r0, #2]
   d79c8:	8083      	strh	r3, [r0, #4]
   d79ca:	80c3      	strh	r3, [r0, #6]
   d79cc:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d79ce:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d79d0:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d79d2:	4770      	bx	lr

000d79d4 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d79d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d79d8:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d79dc:	4604      	mov	r4, r0
   d79de:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d79e0:	f1b9 0f00 	cmp.w	r9, #0
   d79e4:	d00d      	beq.n	d7a02 <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d79e6:	2000      	movs	r0, #0
   d79e8:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d79ea:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d79ec:	1ca3      	adds	r3, r4, #2
   d79ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d79f2:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d79f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d79f8:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d79fc:	42a3      	cmp	r3, r4
   d79fe:	d1f9      	bne.n	d79f4 <_ZN7OneWire6searchEPh+0x20>
   d7a00:	e004      	b.n	d7a0c <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d7a02:	f7ff ff01 	bl	d7808 <_ZN7OneWire5resetEv>
   d7a06:	b918      	cbnz	r0, d7a10 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d7a08:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d7a0a:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d7a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d7a10:	464a      	mov	r2, r9
   d7a12:	21f0      	movs	r1, #240	; 0xf0
   d7a14:	4620      	mov	r0, r4
   d7a16:	f7ff ff8c 	bl	d7932 <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d7a1a:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d7a1c:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d7a1e:	4635      	mov	r5, r6
            id_bit = read_bit();
   d7a20:	4620      	mov	r0, r4
   d7a22:	f7ff ff64 	bl	d78ee <_ZN7OneWire8read_bitEv>
   d7a26:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d7a28:	4620      	mov	r0, r4
   d7a2a:	f7ff ff60 	bl	d78ee <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d7a2e:	2f01      	cmp	r7, #1
   d7a30:	d10f      	bne.n	d7a52 <_ZN7OneWire6searchEPh+0x7e>
   d7a32:	2801      	cmp	r0, #1
   d7a34:	d127      	bne.n	d7a86 <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d7a36:	2d40      	cmp	r5, #64	; 0x40
   d7a38:	d9d5      	bls.n	d79e6 <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d7a3a:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d7a3e:	f1b9 0f00 	cmp.w	r9, #0
   d7a42:	d101      	bne.n	d7a48 <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d7a44:	2301      	movs	r3, #1
   d7a46:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d7a48:	78a3      	ldrb	r3, [r4, #2]
   d7a4a:	2b00      	cmp	r3, #0
   d7a4c:	d0cb      	beq.n	d79e6 <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d7a4e:	2001      	movs	r0, #1
   d7a50:	e7cc      	b.n	d79ec <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d7a52:	4287      	cmp	r7, r0
   d7a54:	eb04 030a 	add.w	r3, r4, sl
   d7a58:	d10c      	bne.n	d7a74 <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d7a5a:	7aa2      	ldrb	r2, [r4, #10]
   d7a5c:	42aa      	cmp	r2, r5
   d7a5e:	d90e      	bls.n	d7a7e <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d7a60:	789a      	ldrb	r2, [r3, #2]
   d7a62:	4216      	tst	r6, r2
   d7a64:	bf14      	ite	ne
   d7a66:	2701      	movne	r7, #1
   d7a68:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d7a6a:	b967      	cbnz	r7, d7a86 <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d7a6c:	2d08      	cmp	r5, #8
   d7a6e:	d800      	bhi.n	d7a72 <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d7a70:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d7a72:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d7a74:	789a      	ldrb	r2, [r3, #2]
   d7a76:	ea22 0206 	bic.w	r2, r2, r6
   d7a7a:	709a      	strb	r2, [r3, #2]
   d7a7c:	e009      	b.n	d7a92 <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d7a7e:	bf0c      	ite	eq
   d7a80:	2701      	moveq	r7, #1
   d7a82:	2700      	movne	r7, #0
   d7a84:	e7f1      	b.n	d7a6a <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d7a86:	eb04 020a 	add.w	r2, r4, sl
   d7a8a:	2701      	movs	r7, #1
   d7a8c:	7893      	ldrb	r3, [r2, #2]
   d7a8e:	4333      	orrs	r3, r6
   d7a90:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d7a92:	4639      	mov	r1, r7
   d7a94:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d7a96:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d7a98:	f7ff fef5 	bl	d7886 <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d7a9c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d7aa0:	bf04      	itt	eq
   d7aa2:	f10a 0a01 	addeq.w	sl, sl, #1
   d7aa6:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d7aaa:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d7aae:	bf08      	it	eq
   d7ab0:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7ab2:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d7ab6:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7ab8:	d9b2      	bls.n	d7a20 <_ZN7OneWire6searchEPh+0x4c>
   d7aba:	e7bc      	b.n	d7a36 <_ZN7OneWire6searchEPh+0x62>

000d7abc <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d7abc:	b530      	push	{r4, r5, lr}
   d7abe:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d7ac0:	4401      	add	r1, r0
   d7ac2:	2000      	movs	r0, #0

    while (len--)
   d7ac4:	428a      	cmp	r2, r1
   d7ac6:	d013      	beq.n	d7af0 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d7ac8:	f812 5b01 	ldrb.w	r5, [r2], #1
   d7acc:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d7ace:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d7ad2:	f013 0f01 	tst.w	r3, #1
   d7ad6:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d7ada:	bf1c      	itt	ne
   d7adc:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d7ae0:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d7ae2:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d7ae4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d7ae8:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d7aec:	d1ef      	bne.n	d7ace <_ZN7OneWire4crc8EPhh+0x12>
   d7aee:	e7e9      	b.n	d7ac4 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d7af0:	bd30      	pop	{r4, r5, pc}

000d7af2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7af2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7af4:	4603      	mov	r3, r0
	switch (__op)
   d7af6:	d102      	bne.n	d7afe <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7af8:	6001      	str	r1, [r0, #0]
      }
   d7afa:	2000      	movs	r0, #0
   d7afc:	4770      	bx	lr
	  switch (__op)
   d7afe:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7b00:	bf04      	itt	eq
   d7b02:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7b06:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7b0a:	e7f6      	b.n	d7afa <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7b0c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7b0c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7b0e:	6842      	ldr	r2, [r0, #4]
   d7b10:	4603      	mov	r3, r0
   d7b12:	1054      	asrs	r4, r2, #1
   d7b14:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7b18:	07d2      	lsls	r2, r2, #31
   d7b1a:	bf48      	it	mi
   d7b1c:	590a      	ldrmi	r2, [r1, r4]
   d7b1e:	681b      	ldr	r3, [r3, #0]
      }
   d7b20:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7b24:	bf48      	it	mi
   d7b26:	58d3      	ldrmi	r3, [r2, r3]
   d7b28:	4718      	bx	r3
	...

000d7b2c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7b2c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7b30:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7b34:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7b36:	3008      	adds	r0, #8
   d7b38:	f000 fae0 	bl	d80fc <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7b3c:	2004      	movs	r0, #4
   d7b3e:	f7fc faaa 	bl	d4096 <_Znwj>
   d7b42:	4605      	mov	r5, r0
   d7b44:	b398      	cbz	r0, d7bae <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7b46:	491b      	ldr	r1, [pc, #108]	; (d7bb4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7b48:	2014      	movs	r0, #20
   d7b4a:	f002 fc94 	bl	da476 <_ZnwjRKSt9nothrow_t>
   d7b4e:	b130      	cbz	r0, d7b5e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7b50:	2300      	movs	r3, #0
            exited(false) {
   d7b52:	e9c0 3300 	strd	r3, r3, [r0]
   d7b56:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7b5a:	7403      	strb	r3, [r0, #16]
   d7b5c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7b5e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7b60:	b1a0      	cbz	r0, d7b8c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7b62:	4b15      	ldr	r3, [pc, #84]	; (d7bb8 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7b64:	4915      	ldr	r1, [pc, #84]	; (d7bbc <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d7b66:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7b6e:	e9cd 0300 	strd	r0, r3, [sp]
   d7b72:	2202      	movs	r2, #2
   d7b74:	4b12      	ldr	r3, [pc, #72]	; (d7bc0 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d7b76:	3004      	adds	r0, #4
   d7b78:	f000 faa8 	bl	d80cc <os_thread_create>
   d7b7c:	b930      	cbnz	r0, d7b8c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7b7e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7b80:	7c1b      	ldrb	r3, [r3, #16]
   d7b82:	b9a3      	cbnz	r3, d7bae <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7b84:	2001      	movs	r0, #1
   d7b86:	f000 fb09 	bl	d819c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d7b8a:	e7f8      	b.n	d7b7e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b8c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b8e:	2300      	movs	r3, #0
   d7b90:	602b      	str	r3, [r5, #0]
	if (__p != pointer())
   d7b92:	b164      	cbz	r4, d7bae <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7b94:	6827      	ldr	r7, [r4, #0]
   d7b96:	b137      	cbz	r7, d7ba6 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7b98:	4638      	mov	r0, r7
   d7b9a:	f7fe fc9d 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7b9e:	2110      	movs	r1, #16
   d7ba0:	4638      	mov	r0, r7
   d7ba2:	f002 fc66 	bl	da472 <_ZdlPvj>
   d7ba6:	2114      	movs	r1, #20
   d7ba8:	4620      	mov	r0, r4
   d7baa:	f002 fc62 	bl	da472 <_ZdlPvj>
   d7bae:	6075      	str	r5, [r6, #4]
}
   d7bb0:	b003      	add	sp, #12
   d7bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bb4:	000dbba0 	.word	0x000dbba0
   d7bb8:	000d7dcb 	.word	0x000d7dcb
   d7bbc:	000db8a8 	.word	0x000db8a8
   d7bc0:	000d679b 	.word	0x000d679b

000d7bc4 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7bc4:	f247 5130 	movw	r1, #30000	; 0x7530
   d7bc8:	4a08      	ldr	r2, [pc, #32]	; (d7bec <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7bca:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7bcc:	4908      	ldr	r1, [pc, #32]	; (d7bf0 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7bce:	6002      	str	r2, [r0, #0]
   d7bd0:	2200      	movs	r2, #0
   d7bd2:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7bd6:	4907      	ldr	r1, [pc, #28]	; (d7bf4 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7bd8:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7bda:	4907      	ldr	r1, [pc, #28]	; (d7bf8 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7bdc:	6042      	str	r2, [r0, #4]
   d7bde:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7be2:	6181      	str	r1, [r0, #24]
   d7be4:	8502      	strh	r2, [r0, #40]	; 0x28
   d7be6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7bea:	4770      	bx	lr
   d7bec:	000db96c 	.word	0x000db96c
   d7bf0:	000d7f35 	.word	0x000d7f35
   d7bf4:	000d7b0d 	.word	0x000d7b0d
   d7bf8:	000d7af3 	.word	0x000d7af3

000d7bfc <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7bfc:	b510      	push	{r4, lr}
   d7bfe:	4b04      	ldr	r3, [pc, #16]	; (d7c10 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7c00:	4604      	mov	r4, r0
   d7c02:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7c06:	f7fe fc67 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
}
   d7c0a:	4620      	mov	r0, r4
   d7c0c:	bd10      	pop	{r4, pc}
   d7c0e:	bf00      	nop
   d7c10:	000db96c 	.word	0x000db96c

000d7c14 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7c14:	b510      	push	{r4, lr}
   d7c16:	4b03      	ldr	r3, [pc, #12]	; (d7c24 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7c18:	6003      	str	r3, [r0, #0]
   d7c1a:	4604      	mov	r4, r0
   d7c1c:	f7ff ffee 	bl	d7bfc <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7c20:	4620      	mov	r0, r4
   d7c22:	bd10      	pop	{r4, pc}
   d7c24:	000db994 	.word	0x000db994

000d7c28 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7c28:	b510      	push	{r4, lr}
   d7c2a:	4604      	mov	r4, r0
}
   d7c2c:	f7ff fff2 	bl	d7c14 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7c30:	4620      	mov	r0, r4
   d7c32:	2138      	movs	r1, #56	; 0x38
   d7c34:	f002 fc1d 	bl	da472 <_ZdlPvj>
   d7c38:	4620      	mov	r0, r4
   d7c3a:	bd10      	pop	{r4, pc}

000d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7c3c:	6880      	ldr	r0, [r0, #8]
   d7c3e:	f000 ba6d 	b.w	d811c <os_mutex_lock>

000d7c42 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7c42:	6880      	ldr	r0, [r0, #8]
   d7c44:	f000 ba72 	b.w	d812c <os_mutex_unlock>

000d7c48 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7c48:	b510      	push	{r4, lr}
   d7c4a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7c4c:	6800      	ldr	r0, [r0, #0]
   d7c4e:	f7ff fff8 	bl	d7c42 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7c52:	4620      	mov	r0, r4
   d7c54:	bd10      	pop	{r4, pc}

000d7c56 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7c56:	b513      	push	{r0, r1, r4, lr}
   d7c58:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7c5a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7c5c:	f7ff ffee 	bl	d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7c60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7c62:	88dc      	ldrh	r4, [r3, #6]
   d7c64:	b2a4      	uxth	r4, r4
   d7c66:	b10c      	cbz	r4, d7c6c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7c68:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7c6c:	a801      	add	r0, sp, #4
   d7c6e:	f7ff ffeb 	bl	d7c48 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7c72:	4620      	mov	r0, r4
   d7c74:	b002      	add	sp, #8
   d7c76:	bd10      	pop	{r4, pc}

000d7c78 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d7c78:	b513      	push	{r0, r1, r4, lr}
   d7c7a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7c7c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7c7e:	f7ff ffdd 	bl	d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7c82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d7c86:	b943      	cbnz	r3, d7c9a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d7c8a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7c8c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7c8e:	a801      	add	r0, sp, #4
   d7c90:	f7ff ffda 	bl	d7c48 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7c94:	4620      	mov	r0, r4
   d7c96:	b002      	add	sp, #8
   d7c98:	bd10      	pop	{r4, pc}
	bool result = false;
   d7c9a:	2400      	movs	r4, #0
   d7c9c:	e7f7      	b.n	d7c8e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7c9e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7c9e:	b513      	push	{r0, r1, r4, lr}
   d7ca0:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7ca2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7ca4:	f7ff ffca 	bl	d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d7ca8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d7caa:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7cac:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7cae:	f7ff ffcb 	bl	d7c48 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	b002      	add	sp, #8
   d7cb6:	bd10      	pop	{r4, pc}

000d7cb8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7cbc:	4699      	mov	r9, r3
   d7cbe:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7cc0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7cc4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7cc8:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7ccc:	4604      	mov	r4, r0
   d7cce:	460f      	mov	r7, r1
   d7cd0:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7cd2:	b913      	cbnz	r3, d7cda <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7cd4:	6803      	ldr	r3, [r0, #0]
   d7cd6:	689b      	ldr	r3, [r3, #8]
   d7cd8:	4798      	blx	r3
		data = "";
   d7cda:	4b31      	ldr	r3, [pc, #196]	; (d7da0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7cdc:	4638      	mov	r0, r7
		data = "";
   d7cde:	2e00      	cmp	r6, #0
   d7ce0:	bf08      	it	eq
   d7ce2:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7ce4:	f003 f911 	bl	daf0a <strlen>
   d7ce8:	4605      	mov	r5, r0
   d7cea:	4630      	mov	r0, r6
   d7cec:	f003 f90d 	bl	daf0a <strlen>
   d7cf0:	4428      	add	r0, r5
   d7cf2:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7cf6:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7cf8:	bf1c      	itt	ne
   d7cfa:	f025 0503 	bicne.w	r5, r5, #3
   d7cfe:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7d00:	4633      	mov	r3, r6
   d7d02:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7d06:	e9cd 9a00 	strd	r9, sl, [sp]
   d7d0a:	4926      	ldr	r1, [pc, #152]	; (d7da4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7d0c:	4826      	ldr	r0, [pc, #152]	; (d7da8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7d0e:	463a      	mov	r2, r7
   d7d10:	f7fc fa99 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7d14:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7d16:	3b08      	subs	r3, #8
   d7d18:	42ab      	cmp	r3, r5
   d7d1a:	d212      	bcs.n	d7d42 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7d1c:	2400      	movs	r4, #0
}
   d7d1e:	4620      	mov	r0, r4
   d7d20:	b006      	add	sp, #24
   d7d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7d26:	88cb      	ldrh	r3, [r1, #6]
   d7d28:	2b01      	cmp	r3, #1
   d7d2a:	d036      	beq.n	d7d9a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7d2c:	a805      	add	r0, sp, #20
   d7d2e:	f7ff ff8b 	bl	d7c48 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7d32:	6823      	ldr	r3, [r4, #0]
   d7d34:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7d38:	699b      	ldr	r3, [r3, #24]
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	4798      	blx	r3
   d7d3e:	2800      	cmp	r0, #0
   d7d40:	d0ec      	beq.n	d7d1c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7d42:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7d44:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7d46:	f7ff ff79 	bl	d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7d4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7d4c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7d50:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7d52:	1ad2      	subs	r2, r2, r3
   d7d54:	42aa      	cmp	r2, r5
   d7d56:	d3e6      	bcc.n	d7d26 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d7d58:	ea48 080a 	orr.w	r8, r8, sl
   d7d5c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7d60:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d7d66:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d7d6a:	4639      	mov	r1, r7
   d7d6c:	4640      	mov	r0, r8
   d7d6e:	f003 f8a7 	bl	daec0 <strcpy>
				cp += strlen(cp) + 1;
   d7d72:	4640      	mov	r0, r8
   d7d74:	f003 f8c9 	bl	daf0a <strlen>
   d7d78:	3001      	adds	r0, #1
				strcpy(cp, data);
   d7d7a:	4631      	mov	r1, r6
   d7d7c:	4440      	add	r0, r8
   d7d7e:	f003 f89f 	bl	daec0 <strcpy>
				nextFree += size;
   d7d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d7d86:	441d      	add	r5, r3
   d7d88:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d7d8a:	88d3      	ldrh	r3, [r2, #6]
   d7d8c:	3301      	adds	r3, #1
   d7d8e:	80d3      	strh	r3, [r2, #6]
				return true;
   d7d90:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7d92:	a805      	add	r0, sp, #20
   d7d94:	f7ff ff58 	bl	d7c48 <_ZN11StMutexLockD1Ev>
   d7d98:	e7c1      	b.n	d7d1e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d7d9a:	2400      	movs	r4, #0
   d7d9c:	e7f9      	b.n	d7d92 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d7d9e:	bf00      	nop
   d7da0:	000db2ce 	.word	0x000db2ce
   d7da4:	000db8ba 	.word	0x000db8ba
   d7da8:	2003e5e0 	.word	0x2003e5e0

000d7dac <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7db0:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7db4:	69a3      	ldr	r3, [r4, #24]
   d7db6:	b90b      	cbnz	r3, d7dbc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7db8:	f002 fb61 	bl	da47e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7dbc:	69e3      	ldr	r3, [r4, #28]
   d7dbe:	4621      	mov	r1, r4
   d7dc0:	4628      	mov	r0, r5
   d7dc2:	4798      	blx	r3
		os_thread_yield();
   d7dc4:	f000 f98a 	bl	d80dc <os_thread_yield>
	while(true) {
   d7dc8:	e7f4      	b.n	d7db4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d7dca <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d7dca:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7dcc:	f7ff ffee 	bl	d7dac <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7dd0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7dd0:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7dd2:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7dd6:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7dd8:	4628      	mov	r0, r5
   d7dda:	f003 f896 	bl	daf0a <strlen>
   d7dde:	3001      	adds	r0, #1
   d7de0:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7de2:	4628      	mov	r0, r5
   d7de4:	f003 f891 	bl	daf0a <strlen>
	size_t offset = start - retainedBuffer;
   d7de8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7dea:	3001      	adds	r0, #1
   d7dec:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d7dee:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7df0:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7df4:	bf1c      	itt	ne
   d7df6:	f1c3 0304 	rsbne	r3, r3, #4
   d7dfa:	18c0      	addne	r0, r0, r3
}
   d7dfc:	bd68      	pop	{r3, r5, r6, pc}

000d7dfe <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7e00:	4604      	mov	r4, r0
   d7e02:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7e04:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7e06:	f7ff ff19 	bl	d7c3c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7e0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7e0c:	88fb      	ldrh	r3, [r7, #6]
   d7e0e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7e12:	b1e6      	cbz	r6, d7e4e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7e14:	2b01      	cmp	r3, #1
   d7e16:	d922      	bls.n	d7e5e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7e18:	4629      	mov	r1, r5
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	f7ff ffd8 	bl	d7dd0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7e20:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7e22:	4629      	mov	r1, r5
   d7e24:	4620      	mov	r0, r4
   d7e26:	f7ff ffd3 	bl	d7dd0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7e2a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7e2c:	443a      	add	r2, r7
	if (after > 0) {
   d7e2e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7e30:	4601      	mov	r1, r0
	size_t len = next - start;
   d7e32:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d7e36:	d002      	beq.n	d7e3e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d7e38:	4628      	mov	r0, r5
   d7e3a:	f002 fff1 	bl	dae20 <memmove>
	nextFree -= len;
   d7e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7e40:	1b9b      	subs	r3, r3, r6
   d7e42:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7e44:	88fb      	ldrh	r3, [r7, #6]
   d7e46:	3b01      	subs	r3, #1
   d7e48:	80fb      	strh	r3, [r7, #6]
	return true;
   d7e4a:	2601      	movs	r6, #1
   d7e4c:	e001      	b.n	d7e52 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7e4e:	2b00      	cmp	r3, #0
   d7e50:	d1e7      	bne.n	d7e22 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7e52:	a801      	add	r0, sp, #4
   d7e54:	f7ff fef8 	bl	d7c48 <_ZN11StMutexLockD1Ev>
}
   d7e58:	4630      	mov	r0, r6
   d7e5a:	b003      	add	sp, #12
   d7e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7e5e:	2600      	movs	r6, #0
   d7e60:	e7f7      	b.n	d7e52 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7e64 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e68:	460d      	mov	r5, r1
   d7e6a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e6c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7e6e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e70:	f7ff fea8 	bl	d7bc4 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7e74:	4b15      	ldr	r3, [pc, #84]	; (d7ecc <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e76:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e7a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e7c:	4b14      	ldr	r3, [pc, #80]	; (d7ed0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e7e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e80:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e82:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e84:	4698      	mov	r8, r3
   d7e86:	d117      	bne.n	d7eb8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7e88:	88ab      	ldrh	r3, [r5, #4]
   d7e8a:	b29b      	uxth	r3, r3
   d7e8c:	42b3      	cmp	r3, r6
   d7e8e:	d113      	bne.n	d7eb8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7e90:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7e94:	6367      	str	r7, [r4, #52]	; 0x34
   d7e96:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7e9a:	88eb      	ldrh	r3, [r5, #6]
   d7e9c:	fa1f f289 	uxth.w	r2, r9
   d7ea0:	b29b      	uxth	r3, r3
   d7ea2:	429a      	cmp	r2, r3
   d7ea4:	d20e      	bcs.n	d7ec4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7ea8:	4620      	mov	r0, r4
   d7eaa:	f7ff ff91 	bl	d7dd0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7eae:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7eb0:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7eb2:	f109 0901 	add.w	r9, r9, #1
   d7eb6:	d9f0      	bls.n	d7e9a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7eb8:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7eba:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7ebe:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7ec0:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7ec2:	80eb      	strh	r3, [r5, #6]
}
   d7ec4:	4620      	mov	r0, r4
   d7ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7eca:	bf00      	nop
   d7ecc:	000db994 	.word	0x000db994
   d7ed0:	d19cab61 	.word	0xd19cab61

000d7ed4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7ed4:	b510      	push	{r4, lr}
   d7ed6:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7eda:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7edc:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7ede:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7ee0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7ee2:	b90a      	cbnz	r2, d7ee8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7ee4:	07d9      	lsls	r1, r3, #31
   d7ee6:	d505      	bpl.n	d7ef4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7eec:	4b0f      	ldr	r3, [pc, #60]	; (d7f2c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7eee:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7ef0:	4b0f      	ldr	r3, [pc, #60]	; (d7f30 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7ef2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ef4:	ab02      	add	r3, sp, #8
   d7ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7efa:	466a      	mov	r2, sp
   d7efc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7f00:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7f04:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7f08:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f0c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f0e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7f12:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f14:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f16:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f18:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7f1a:	4618      	mov	r0, r3
   d7f1c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f1e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7f20:	9105      	str	r1, [sp, #20]
   d7f22:	f7fe fad9 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
	}
   d7f26:	4620      	mov	r0, r4
   d7f28:	b006      	add	sp, #24
   d7f2a:	bd10      	pop	{r4, pc}
   d7f2c:	000d7b0d 	.word	0x000d7b0d
   d7f30:	000d7af3 	.word	0x000d7af3

000d7f34 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7f34:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7f36:	4b05      	ldr	r3, [pc, #20]	; (d7f4c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7f38:	9300      	str	r3, [sp, #0]
   d7f3a:	4669      	mov	r1, sp
   d7f3c:	2300      	movs	r3, #0
   d7f3e:	3010      	adds	r0, #16
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	f7ff ffc7 	bl	d7ed4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7f46:	b003      	add	sp, #12
   d7f48:	f85d fb04 	ldr.w	pc, [sp], #4
   d7f4c:	000d7f7d 	.word	0x000d7f7d

000d7f50 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7f50:	b513      	push	{r0, r1, r4, lr}
   d7f52:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7f54:	f000 f932 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f5a:	1ac0      	subs	r0, r0, r3
   d7f5c:	68e3      	ldr	r3, [r4, #12]
   d7f5e:	4298      	cmp	r0, r3
   d7f60:	d308      	bcc.n	d7f74 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7f62:	4b05      	ldr	r3, [pc, #20]	; (d7f78 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7f64:	9300      	str	r3, [sp, #0]
   d7f66:	4669      	mov	r1, sp
   d7f68:	2300      	movs	r3, #0
   d7f6a:	f104 0010 	add.w	r0, r4, #16
   d7f6e:	9301      	str	r3, [sp, #4]
   d7f70:	f7ff ffb0 	bl	d7ed4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7f74:	b002      	add	sp, #8
   d7f76:	bd10      	pop	{r4, pc}
   d7f78:	000d7f7d 	.word	0x000d7f7d

000d7f7c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7f80:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7f84:	b086      	sub	sp, #24
   d7f86:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7f88:	2b00      	cmp	r3, #0
   d7f8a:	d164      	bne.n	d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f8c:	f000 fb7a 	bl	d8684 <spark_cloud_flag_connected>
   d7f90:	2800      	cmp	r0, #0
   d7f92:	d060      	beq.n	d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7f94:	f000 f912 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
   d7f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f9a:	1ac0      	subs	r0, r0, r3
   d7f9c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7fa0:	4298      	cmp	r0, r3
   d7fa2:	d958      	bls.n	d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7fa4:	6823      	ldr	r3, [r4, #0]
   d7fa6:	4620      	mov	r0, r4
   d7fa8:	695b      	ldr	r3, [r3, #20]
   d7faa:	4798      	blx	r3
		if (data) {
   d7fac:	4605      	mov	r5, r0
   d7fae:	2800      	cmp	r0, #0
   d7fb0:	d051      	beq.n	d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7fb2:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7fb6:	2301      	movs	r3, #1
   d7fb8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7fbc:	4638      	mov	r0, r7
   d7fbe:	f002 ffa4 	bl	daf0a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7fc2:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fc6:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7fca:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fcc:	682b      	ldr	r3, [r5, #0]
   d7fce:	492b      	ldr	r1, [pc, #172]	; (d807c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7fd0:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7fd2:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fd4:	4633      	mov	r3, r6
   d7fd6:	482a      	ldr	r0, [pc, #168]	; (d8080 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7fd8:	463a      	mov	r2, r7
   d7fda:	f7fc f934 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7fde:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7fe0:	f88d 8000 	strb.w	r8, [sp]
   d7fe4:	4632      	mov	r2, r6
   d7fe6:	4639      	mov	r1, r7
   d7fe8:	a802      	add	r0, sp, #8
   d7fea:	f000 ff27 	bl	d8e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7fee:	9d02      	ldr	r5, [sp, #8]
   d7ff0:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7ff2:	b91b      	cbnz	r3, d7ffc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7ff4:	2001      	movs	r0, #1
   d7ff6:	f000 fc4d 	bl	d8894 <delay>
			while(!request.isDone()) {
   d7ffa:	e7f8      	b.n	d7fee <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7ffc:	2000      	movs	r0, #0
   d7ffe:	f000 facf 	bl	d85a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8002:	b120      	cbz	r0, d800e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d8004:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d8006:	b913      	cbnz	r3, d800e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d8008:	f000 fb2c 	bl	d8664 <spark_process>
    }
   d800c:	e7fa      	b.n	d8004 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d800e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d8010:	2b01      	cmp	r3, #1
   d8012:	d123      	bne.n	d805c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d8014:	491b      	ldr	r1, [pc, #108]	; (d8084 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d8016:	481a      	ldr	r0, [pc, #104]	; (d8080 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8018:	f7fc f915 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d801c:	6823      	ldr	r3, [r4, #0]
   d801e:	2100      	movs	r1, #0
   d8020:	699b      	ldr	r3, [r3, #24]
   d8022:	4620      	mov	r0, r4
   d8024:	4798      	blx	r3
			isSending = false;
   d8026:	2300      	movs	r3, #0
   d8028:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d802c:	f000 f8c6 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d8030:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d8032:	9c03      	ldr	r4, [sp, #12]
   d8034:	b17c      	cbz	r4, d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d8036:	6863      	ldr	r3, [r4, #4]
   d8038:	3b01      	subs	r3, #1
   d803a:	6063      	str	r3, [r4, #4]
   d803c:	b95b      	cbnz	r3, d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d803e:	6823      	ldr	r3, [r4, #0]
   d8040:	4620      	mov	r0, r4
   d8042:	689b      	ldr	r3, [r3, #8]
   d8044:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8046:	68a3      	ldr	r3, [r4, #8]
   d8048:	3b01      	subs	r3, #1
   d804a:	60a3      	str	r3, [r4, #8]
   d804c:	b91b      	cbnz	r3, d8056 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d804e:	6823      	ldr	r3, [r4, #0]
   d8050:	4620      	mov	r0, r4
   d8052:	68db      	ldr	r3, [r3, #12]
   d8054:	4798      	blx	r3
}
   d8056:	b006      	add	sp, #24
   d8058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d805c:	68e2      	ldr	r2, [r4, #12]
   d805e:	490a      	ldr	r1, [pc, #40]	; (d8088 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d8060:	4807      	ldr	r0, [pc, #28]	; (d8080 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8062:	f7fc f8f0 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d8066:	4b09      	ldr	r3, [pc, #36]	; (d808c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d8068:	9304      	str	r3, [sp, #16]
   d806a:	a904      	add	r1, sp, #16
   d806c:	2300      	movs	r3, #0
   d806e:	f104 0010 	add.w	r0, r4, #16
   d8072:	9305      	str	r3, [sp, #20]
   d8074:	f7ff ff2e 	bl	d7ed4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8078:	e7d5      	b.n	d8026 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d807a:	bf00      	nop
   d807c:	000db8fb 	.word	0x000db8fb
   d8080:	2003e5e0 	.word	0x2003e5e0
   d8084:	000db91c 	.word	0x000db91c
   d8088:	000db933 	.word	0x000db933
   d808c:	000d7f51 	.word	0x000d7f51

000d8090 <_GLOBAL__sub_I_pubqLogger>:
   d8090:	4b01      	ldr	r3, [pc, #4]	; (d8098 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d8092:	4a02      	ldr	r2, [pc, #8]	; (d809c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d8094:	601a      	str	r2, [r3, #0]
}
   d8096:	4770      	bx	lr
   d8098:	2003e5e0 	.word	0x2003e5e0
   d809c:	000db95a 	.word	0x000db95a

000d80a0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d80a0:	4b01      	ldr	r3, [pc, #4]	; (d80a8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d80a2:	2201      	movs	r2, #1
   d80a4:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d80a6:	4770      	bx	lr
   d80a8:	2003e5e4 	.word	0x2003e5e4

000d80ac <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <cellular_signal+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030274 	.word	0x00030274

000d80bc <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <cellular_command+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030274 	.word	0x00030274

000d80cc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <os_thread_create+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	685b      	ldr	r3, [r3, #4]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030248 	.word	0x00030248

000d80dc <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <os_thread_yield+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	68db      	ldr	r3, [r3, #12]
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030248 	.word	0x00030248

000d80ec <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <os_thread_scheduling+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	69db      	ldr	r3, [r3, #28]
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030248 	.word	0x00030248

000d80fc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <os_mutex_create+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030248 	.word	0x00030248

000d810c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <os_mutex_destroy+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030248 	.word	0x00030248

000d811c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <os_mutex_lock+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	00030248 	.word	0x00030248

000d812c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <os_mutex_unlock+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	00030248 	.word	0x00030248

000d813c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <os_mutex_recursive_create+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	00030248 	.word	0x00030248

000d814c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <os_mutex_recursive_destroy+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	00030248 	.word	0x00030248

000d815c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <os_thread_exit+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	00030248 	.word	0x00030248

000d816c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <HAL_Feature_Set+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	00030234 	.word	0x00030234

000d817c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	00030234 	.word	0x00030234

000d818c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <HAL_RNG_GetRandomNumber+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	685b      	ldr	r3, [r3, #4]
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030218 	.word	0x00030218

000d819c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <HAL_Delay_Milliseconds+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	689b      	ldr	r3, [r3, #8]
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030218 	.word	0x00030218

000d81ac <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <HAL_Delay_Microseconds+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	68db      	ldr	r3, [r3, #12]
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030218 	.word	0x00030218

000d81bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	695b      	ldr	r3, [r3, #20]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030218 	.word	0x00030218

000d81cc <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <HAL_disable_irq+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	00030218 	.word	0x00030218

000d81dc <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <HAL_enable_irq+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030218 	.word	0x00030218

000d81ec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <hal_rtc_time_is_valid+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030218 	.word	0x00030218

000d81fc <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <hal_timer_millis+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030218 	.word	0x00030218

000d820c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <hal_rtc_get_time+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030218 	.word	0x00030218

000d821c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <hal_rtc_set_time+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030218 	.word	0x00030218

000d822c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <HAL_Pin_Map+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	681b      	ldr	r3, [r3, #0]
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	0003022c 	.word	0x0003022c

000d823c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <HAL_Pin_Mode+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	689b      	ldr	r3, [r3, #8]
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	0003022c 	.word	0x0003022c

000d824c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <HAL_Get_Pin_Mode+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	68db      	ldr	r3, [r3, #12]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	0003022c 	.word	0x0003022c

000d825c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <HAL_GPIO_Write+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	691b      	ldr	r3, [r3, #16]
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	0003022c 	.word	0x0003022c

000d826c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <HAL_GPIO_Read+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	695b      	ldr	r3, [r3, #20]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	0003022c 	.word	0x0003022c

000d827c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <HAL_Interrupts_Enable_All+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	6a1b      	ldr	r3, [r3, #32]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	0003022c 	.word	0x0003022c

000d828c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <HAL_Interrupts_Disable_All+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	0003022c 	.word	0x0003022c

000d829c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <hal_i2c_begin+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	68db      	ldr	r3, [r3, #12]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030228 	.word	0x00030228

000d82ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <hal_i2c_begin_transmission+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	699b      	ldr	r3, [r3, #24]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030228 	.word	0x00030228

000d82bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <hal_i2c_end_transmission+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	69db      	ldr	r3, [r3, #28]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030228 	.word	0x00030228

000d82cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <hal_i2c_write+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6a1b      	ldr	r3, [r3, #32]
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030228 	.word	0x00030228

000d82dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <hal_i2c_available+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030228 	.word	0x00030228

000d82ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <hal_i2c_read+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030228 	.word	0x00030228

000d82fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <hal_i2c_peek+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030228 	.word	0x00030228

000d830c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <hal_i2c_flush+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030228 	.word	0x00030228

000d831c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <hal_i2c_is_enabled+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030228 	.word	0x00030228

000d832c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <hal_i2c_init+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030228 	.word	0x00030228

000d833c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <hal_i2c_lock+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	00030228 	.word	0x00030228

000d834c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <hal_i2c_unlock+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	00030228 	.word	0x00030228

000d835c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <hal_i2c_request_ex+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	00030228 	.word	0x00030228

000d836c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <inet_inet_ntop+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	695b      	ldr	r3, [r3, #20]
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	00030264 	.word	0x00030264

000d837c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <netdb_freeaddrinfo+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	689b      	ldr	r3, [r3, #8]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	00030268 	.word	0x00030268

000d838c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <netdb_getaddrinfo+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	68db      	ldr	r3, [r3, #12]
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	00030268 	.word	0x00030268

000d839c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <hal_spi_begin+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	681b      	ldr	r3, [r3, #0]
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	00030230 	.word	0x00030230

000d83ac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <hal_spi_transfer+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	695b      	ldr	r3, [r3, #20]
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	00030230 	.word	0x00030230

000d83bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <hal_spi_init+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	69db      	ldr	r3, [r3, #28]
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	00030230 	.word	0x00030230

000d83cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <hal_spi_is_enabled+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	6a1b      	ldr	r3, [r3, #32]
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	00030230 	.word	0x00030230

000d83dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <hal_spi_info+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	00030230 	.word	0x00030230

000d83ec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <hal_spi_set_settings+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	00030230 	.word	0x00030230

000d83fc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d83fc:	b508      	push	{r3, lr}
   d83fe:	4b02      	ldr	r3, [pc, #8]	; (d8408 <hal_spi_acquire+0xc>)
   d8400:	681b      	ldr	r3, [r3, #0]
   d8402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8404:	9301      	str	r3, [sp, #4]
   d8406:	bd08      	pop	{r3, pc}
   d8408:	00030230 	.word	0x00030230

000d840c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d840c:	b508      	push	{r3, lr}
   d840e:	4b02      	ldr	r3, [pc, #8]	; (d8418 <hal_spi_release+0xc>)
   d8410:	681b      	ldr	r3, [r3, #0]
   d8412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8414:	9301      	str	r3, [sp, #4]
   d8416:	bd08      	pop	{r3, pc}
   d8418:	00030230 	.word	0x00030230

000d841c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d841c:	b508      	push	{r3, lr}
   d841e:	4b02      	ldr	r3, [pc, #8]	; (d8428 <hal_usart_init+0xc>)
   d8420:	681b      	ldr	r3, [r3, #0]
   d8422:	681b      	ldr	r3, [r3, #0]
   d8424:	9301      	str	r3, [sp, #4]
   d8426:	bd08      	pop	{r3, pc}
   d8428:	0003023c 	.word	0x0003023c

000d842c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d842c:	b508      	push	{r3, lr}
   d842e:	4b02      	ldr	r3, [pc, #8]	; (d8438 <hal_usart_write+0xc>)
   d8430:	681b      	ldr	r3, [r3, #0]
   d8432:	68db      	ldr	r3, [r3, #12]
   d8434:	9301      	str	r3, [sp, #4]
   d8436:	bd08      	pop	{r3, pc}
   d8438:	0003023c 	.word	0x0003023c

000d843c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d843c:	b508      	push	{r3, lr}
   d843e:	4b02      	ldr	r3, [pc, #8]	; (d8448 <hal_usart_available+0xc>)
   d8440:	681b      	ldr	r3, [r3, #0]
   d8442:	691b      	ldr	r3, [r3, #16]
   d8444:	9301      	str	r3, [sp, #4]
   d8446:	bd08      	pop	{r3, pc}
   d8448:	0003023c 	.word	0x0003023c

000d844c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d844c:	b508      	push	{r3, lr}
   d844e:	4b02      	ldr	r3, [pc, #8]	; (d8458 <hal_usart_read+0xc>)
   d8450:	681b      	ldr	r3, [r3, #0]
   d8452:	695b      	ldr	r3, [r3, #20]
   d8454:	9301      	str	r3, [sp, #4]
   d8456:	bd08      	pop	{r3, pc}
   d8458:	0003023c 	.word	0x0003023c

000d845c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d845c:	b508      	push	{r3, lr}
   d845e:	4b02      	ldr	r3, [pc, #8]	; (d8468 <hal_usart_peek+0xc>)
   d8460:	681b      	ldr	r3, [r3, #0]
   d8462:	699b      	ldr	r3, [r3, #24]
   d8464:	9301      	str	r3, [sp, #4]
   d8466:	bd08      	pop	{r3, pc}
   d8468:	0003023c 	.word	0x0003023c

000d846c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d846c:	b508      	push	{r3, lr}
   d846e:	4b02      	ldr	r3, [pc, #8]	; (d8478 <hal_usart_flush+0xc>)
   d8470:	681b      	ldr	r3, [r3, #0]
   d8472:	69db      	ldr	r3, [r3, #28]
   d8474:	9301      	str	r3, [sp, #4]
   d8476:	bd08      	pop	{r3, pc}
   d8478:	0003023c 	.word	0x0003023c

000d847c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d847c:	b508      	push	{r3, lr}
   d847e:	4b02      	ldr	r3, [pc, #8]	; (d8488 <hal_usart_is_enabled+0xc>)
   d8480:	681b      	ldr	r3, [r3, #0]
   d8482:	6a1b      	ldr	r3, [r3, #32]
   d8484:	9301      	str	r3, [sp, #4]
   d8486:	bd08      	pop	{r3, pc}
   d8488:	0003023c 	.word	0x0003023c

000d848c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d848c:	b508      	push	{r3, lr}
   d848e:	4b02      	ldr	r3, [pc, #8]	; (d8498 <hal_usart_available_data_for_write+0xc>)
   d8490:	681b      	ldr	r3, [r3, #0]
   d8492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8494:	9301      	str	r3, [sp, #4]
   d8496:	bd08      	pop	{r3, pc}
   d8498:	0003023c 	.word	0x0003023c

000d849c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d849c:	b508      	push	{r3, lr}
   d849e:	4b02      	ldr	r3, [pc, #8]	; (d84a8 <HAL_USB_USART_Init+0xc>)
   d84a0:	681b      	ldr	r3, [r3, #0]
   d84a2:	681b      	ldr	r3, [r3, #0]
   d84a4:	9301      	str	r3, [sp, #4]
   d84a6:	bd08      	pop	{r3, pc}
   d84a8:	0003024c 	.word	0x0003024c

000d84ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d84ac:	b508      	push	{r3, lr}
   d84ae:	4b02      	ldr	r3, [pc, #8]	; (d84b8 <HAL_USB_USART_Available_Data+0xc>)
   d84b0:	681b      	ldr	r3, [r3, #0]
   d84b2:	691b      	ldr	r3, [r3, #16]
   d84b4:	9301      	str	r3, [sp, #4]
   d84b6:	bd08      	pop	{r3, pc}
   d84b8:	0003024c 	.word	0x0003024c

000d84bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d84bc:	b508      	push	{r3, lr}
   d84be:	4b02      	ldr	r3, [pc, #8]	; (d84c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d84c0:	681b      	ldr	r3, [r3, #0]
   d84c2:	695b      	ldr	r3, [r3, #20]
   d84c4:	9301      	str	r3, [sp, #4]
   d84c6:	bd08      	pop	{r3, pc}
   d84c8:	0003024c 	.word	0x0003024c

000d84cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84cc:	b508      	push	{r3, lr}
   d84ce:	4b02      	ldr	r3, [pc, #8]	; (d84d8 <HAL_USB_USART_Receive_Data+0xc>)
   d84d0:	681b      	ldr	r3, [r3, #0]
   d84d2:	699b      	ldr	r3, [r3, #24]
   d84d4:	9301      	str	r3, [sp, #4]
   d84d6:	bd08      	pop	{r3, pc}
   d84d8:	0003024c 	.word	0x0003024c

000d84dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84dc:	b508      	push	{r3, lr}
   d84de:	4b02      	ldr	r3, [pc, #8]	; (d84e8 <HAL_USB_USART_Send_Data+0xc>)
   d84e0:	681b      	ldr	r3, [r3, #0]
   d84e2:	69db      	ldr	r3, [r3, #28]
   d84e4:	9301      	str	r3, [sp, #4]
   d84e6:	bd08      	pop	{r3, pc}
   d84e8:	0003024c 	.word	0x0003024c

000d84ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d84ec:	b508      	push	{r3, lr}
   d84ee:	4b02      	ldr	r3, [pc, #8]	; (d84f8 <HAL_USB_USART_Flush_Data+0xc>)
   d84f0:	681b      	ldr	r3, [r3, #0]
   d84f2:	6a1b      	ldr	r3, [r3, #32]
   d84f4:	9301      	str	r3, [sp, #4]
   d84f6:	bd08      	pop	{r3, pc}
   d84f8:	0003024c 	.word	0x0003024c

000d84fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d84fc:	b508      	push	{r3, lr}
   d84fe:	4b02      	ldr	r3, [pc, #8]	; (d8508 <panic_+0xc>)
   d8500:	681b      	ldr	r3, [r3, #0]
   d8502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8504:	9301      	str	r3, [sp, #4]
   d8506:	bd08      	pop	{r3, pc}
   d8508:	00030260 	.word	0x00030260

000d850c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d850c:	b508      	push	{r3, lr}
   d850e:	4b02      	ldr	r3, [pc, #8]	; (d8518 <log_message+0xc>)
   d8510:	681b      	ldr	r3, [r3, #0]
   d8512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8514:	9301      	str	r3, [sp, #4]
   d8516:	bd08      	pop	{r3, pc}
   d8518:	00030260 	.word	0x00030260

000d851c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d851c:	b508      	push	{r3, lr}
   d851e:	4b02      	ldr	r3, [pc, #8]	; (d8528 <log_message_v+0xc>)
   d8520:	681b      	ldr	r3, [r3, #0]
   d8522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8524:	9301      	str	r3, [sp, #4]
   d8526:	bd08      	pop	{r3, pc}
   d8528:	00030260 	.word	0x00030260

000d852c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d852c:	b508      	push	{r3, lr}
   d852e:	4b03      	ldr	r3, [pc, #12]	; (d853c <diag_get_source+0x10>)
   d8530:	681b      	ldr	r3, [r3, #0]
   d8532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d8536:	9301      	str	r3, [sp, #4]
   d8538:	bd08      	pop	{r3, pc}
   d853a:	0000      	.short	0x0000
   d853c:	00030260 	.word	0x00030260

000d8540 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8540:	b508      	push	{r3, lr}
   d8542:	4b02      	ldr	r3, [pc, #8]	; (d854c <system_mode+0xc>)
   d8544:	681b      	ldr	r3, [r3, #0]
   d8546:	681b      	ldr	r3, [r3, #0]
   d8548:	9301      	str	r3, [sp, #4]
   d854a:	bd08      	pop	{r3, pc}
   d854c:	00030220 	.word	0x00030220

000d8550 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8550:	b508      	push	{r3, lr}
   d8552:	4b02      	ldr	r3, [pc, #8]	; (d855c <set_system_mode+0xc>)
   d8554:	681b      	ldr	r3, [r3, #0]
   d8556:	685b      	ldr	r3, [r3, #4]
   d8558:	9301      	str	r3, [sp, #4]
   d855a:	bd08      	pop	{r3, pc}
   d855c:	00030220 	.word	0x00030220

000d8560 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8560:	b508      	push	{r3, lr}
   d8562:	4b02      	ldr	r3, [pc, #8]	; (d856c <system_delay_ms+0xc>)
   d8564:	681b      	ldr	r3, [r3, #0]
   d8566:	695b      	ldr	r3, [r3, #20]
   d8568:	9301      	str	r3, [sp, #4]
   d856a:	bd08      	pop	{r3, pc}
   d856c:	00030220 	.word	0x00030220

000d8570 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d8570:	b508      	push	{r3, lr}
   d8572:	4b02      	ldr	r3, [pc, #8]	; (d857c <system_sleep+0xc>)
   d8574:	681b      	ldr	r3, [r3, #0]
   d8576:	699b      	ldr	r3, [r3, #24]
   d8578:	9301      	str	r3, [sp, #4]
   d857a:	bd08      	pop	{r3, pc}
   d857c:	00030220 	.word	0x00030220

000d8580 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8580:	b508      	push	{r3, lr}
   d8582:	4b02      	ldr	r3, [pc, #8]	; (d858c <system_subscribe_event+0xc>)
   d8584:	681b      	ldr	r3, [r3, #0]
   d8586:	6a1b      	ldr	r3, [r3, #32]
   d8588:	9301      	str	r3, [sp, #4]
   d858a:	bd08      	pop	{r3, pc}
   d858c:	00030220 	.word	0x00030220

000d8590 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8590:	b508      	push	{r3, lr}
   d8592:	4b02      	ldr	r3, [pc, #8]	; (d859c <system_thread_set_state+0xc>)
   d8594:	681b      	ldr	r3, [r3, #0]
   d8596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8598:	9301      	str	r3, [sp, #4]
   d859a:	bd08      	pop	{r3, pc}
   d859c:	00030220 	.word	0x00030220

000d85a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d85a0:	b508      	push	{r3, lr}
   d85a2:	4b02      	ldr	r3, [pc, #8]	; (d85ac <application_thread_current+0xc>)
   d85a4:	681b      	ldr	r3, [r3, #0]
   d85a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d85a8:	9301      	str	r3, [sp, #4]
   d85aa:	bd08      	pop	{r3, pc}
   d85ac:	00030220 	.word	0x00030220

000d85b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d85b0:	b508      	push	{r3, lr}
   d85b2:	4b02      	ldr	r3, [pc, #8]	; (d85bc <application_thread_invoke+0xc>)
   d85b4:	681b      	ldr	r3, [r3, #0]
   d85b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d85b8:	9301      	str	r3, [sp, #4]
   d85ba:	bd08      	pop	{r3, pc}
   d85bc:	00030220 	.word	0x00030220

000d85c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d85c0:	b508      	push	{r3, lr}
   d85c2:	4b02      	ldr	r3, [pc, #8]	; (d85cc <system_thread_get_state+0xc>)
   d85c4:	681b      	ldr	r3, [r3, #0]
   d85c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d85c8:	9301      	str	r3, [sp, #4]
   d85ca:	bd08      	pop	{r3, pc}
   d85cc:	00030220 	.word	0x00030220

000d85d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d85d0:	b508      	push	{r3, lr}
   d85d2:	4b02      	ldr	r3, [pc, #8]	; (d85dc <system_notify_time_changed+0xc>)
   d85d4:	681b      	ldr	r3, [r3, #0]
   d85d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d85d8:	9301      	str	r3, [sp, #4]
   d85da:	bd08      	pop	{r3, pc}
   d85dc:	00030220 	.word	0x00030220

000d85e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d85e0:	b508      	push	{r3, lr}
   d85e2:	4b03      	ldr	r3, [pc, #12]	; (d85f0 <system_ctrl_set_app_request_handler+0x10>)
   d85e4:	681b      	ldr	r3, [r3, #0]
   d85e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d85ea:	9301      	str	r3, [sp, #4]
   d85ec:	bd08      	pop	{r3, pc}
   d85ee:	0000      	.short	0x0000
   d85f0:	00030220 	.word	0x00030220

000d85f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d85f4:	b508      	push	{r3, lr}
   d85f6:	4b03      	ldr	r3, [pc, #12]	; (d8604 <system_ctrl_set_result+0x10>)
   d85f8:	681b      	ldr	r3, [r3, #0]
   d85fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d85fe:	9301      	str	r3, [sp, #4]
   d8600:	bd08      	pop	{r3, pc}
   d8602:	0000      	.short	0x0000
   d8604:	00030220 	.word	0x00030220

000d8608 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8608:	b508      	push	{r3, lr}
   d860a:	4b03      	ldr	r3, [pc, #12]	; (d8618 <system_power_management_set_config+0x10>)
   d860c:	681b      	ldr	r3, [r3, #0]
   d860e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8612:	9301      	str	r3, [sp, #4]
   d8614:	bd08      	pop	{r3, pc}
   d8616:	0000      	.short	0x0000
   d8618:	00030220 	.word	0x00030220

000d861c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d861c:	b508      	push	{r3, lr}
   d861e:	4b03      	ldr	r3, [pc, #12]	; (d862c <system_sleep_ext+0x10>)
   d8620:	681b      	ldr	r3, [r3, #0]
   d8622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d8626:	9301      	str	r3, [sp, #4]
   d8628:	bd08      	pop	{r3, pc}
   d862a:	0000      	.short	0x0000
   d862c:	00030220 	.word	0x00030220

000d8630 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8630:	b508      	push	{r3, lr}
   d8632:	4b03      	ldr	r3, [pc, #12]	; (d8640 <system_reset+0x10>)
   d8634:	681b      	ldr	r3, [r3, #0]
   d8636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d863a:	9301      	str	r3, [sp, #4]
   d863c:	bd08      	pop	{r3, pc}
   d863e:	0000      	.short	0x0000
   d8640:	00030220 	.word	0x00030220

000d8644 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8644:	b508      	push	{r3, lr}
   d8646:	4b02      	ldr	r3, [pc, #8]	; (d8650 <spark_variable+0xc>)
   d8648:	681b      	ldr	r3, [r3, #0]
   d864a:	681b      	ldr	r3, [r3, #0]
   d864c:	9301      	str	r3, [sp, #4]
   d864e:	bd08      	pop	{r3, pc}
   d8650:	00030244 	.word	0x00030244

000d8654 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8654:	b508      	push	{r3, lr}
   d8656:	4b02      	ldr	r3, [pc, #8]	; (d8660 <spark_function+0xc>)
   d8658:	681b      	ldr	r3, [r3, #0]
   d865a:	685b      	ldr	r3, [r3, #4]
   d865c:	9301      	str	r3, [sp, #4]
   d865e:	bd08      	pop	{r3, pc}
   d8660:	00030244 	.word	0x00030244

000d8664 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8664:	b508      	push	{r3, lr}
   d8666:	4b02      	ldr	r3, [pc, #8]	; (d8670 <spark_process+0xc>)
   d8668:	681b      	ldr	r3, [r3, #0]
   d866a:	689b      	ldr	r3, [r3, #8]
   d866c:	9301      	str	r3, [sp, #4]
   d866e:	bd08      	pop	{r3, pc}
   d8670:	00030244 	.word	0x00030244

000d8674 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8674:	b508      	push	{r3, lr}
   d8676:	4b02      	ldr	r3, [pc, #8]	; (d8680 <spark_cloud_flag_connect+0xc>)
   d8678:	681b      	ldr	r3, [r3, #0]
   d867a:	68db      	ldr	r3, [r3, #12]
   d867c:	9301      	str	r3, [sp, #4]
   d867e:	bd08      	pop	{r3, pc}
   d8680:	00030244 	.word	0x00030244

000d8684 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8684:	b508      	push	{r3, lr}
   d8686:	4b02      	ldr	r3, [pc, #8]	; (d8690 <spark_cloud_flag_connected+0xc>)
   d8688:	681b      	ldr	r3, [r3, #0]
   d868a:	695b      	ldr	r3, [r3, #20]
   d868c:	9301      	str	r3, [sp, #4]
   d868e:	bd08      	pop	{r3, pc}
   d8690:	00030244 	.word	0x00030244

000d8694 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8694:	b508      	push	{r3, lr}
   d8696:	4b02      	ldr	r3, [pc, #8]	; (d86a0 <spark_deviceID+0xc>)
   d8698:	681b      	ldr	r3, [r3, #0]
   d869a:	69db      	ldr	r3, [r3, #28]
   d869c:	9301      	str	r3, [sp, #4]
   d869e:	bd08      	pop	{r3, pc}
   d86a0:	00030244 	.word	0x00030244

000d86a4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d86a4:	b508      	push	{r3, lr}
   d86a6:	4b02      	ldr	r3, [pc, #8]	; (d86b0 <spark_send_event+0xc>)
   d86a8:	681b      	ldr	r3, [r3, #0]
   d86aa:	6a1b      	ldr	r3, [r3, #32]
   d86ac:	9301      	str	r3, [sp, #4]
   d86ae:	bd08      	pop	{r3, pc}
   d86b0:	00030244 	.word	0x00030244

000d86b4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d86b4:	b508      	push	{r3, lr}
   d86b6:	4b02      	ldr	r3, [pc, #8]	; (d86c0 <spark_subscribe+0xc>)
   d86b8:	681b      	ldr	r3, [r3, #0]
   d86ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d86bc:	9301      	str	r3, [sp, #4]
   d86be:	bd08      	pop	{r3, pc}
   d86c0:	00030244 	.word	0x00030244

000d86c4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d86c4:	b508      	push	{r3, lr}
   d86c6:	4b02      	ldr	r3, [pc, #8]	; (d86d0 <spark_sync_time+0xc>)
   d86c8:	681b      	ldr	r3, [r3, #0]
   d86ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d86cc:	9301      	str	r3, [sp, #4]
   d86ce:	bd08      	pop	{r3, pc}
   d86d0:	00030244 	.word	0x00030244

000d86d4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d86d4:	b508      	push	{r3, lr}
   d86d6:	4b02      	ldr	r3, [pc, #8]	; (d86e0 <spark_sync_time_pending+0xc>)
   d86d8:	681b      	ldr	r3, [r3, #0]
   d86da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d86dc:	9301      	str	r3, [sp, #4]
   d86de:	bd08      	pop	{r3, pc}
   d86e0:	00030244 	.word	0x00030244

000d86e4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d86e4:	b508      	push	{r3, lr}
   d86e6:	4b02      	ldr	r3, [pc, #8]	; (d86f0 <spark_sync_time_last+0xc>)
   d86e8:	681b      	ldr	r3, [r3, #0]
   d86ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d86ec:	9301      	str	r3, [sp, #4]
   d86ee:	bd08      	pop	{r3, pc}
   d86f0:	00030244 	.word	0x00030244

000d86f4 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d86f4:	b508      	push	{r3, lr}
   d86f6:	4b02      	ldr	r3, [pc, #8]	; (d8700 <spark_set_connection_property+0xc>)
   d86f8:	681b      	ldr	r3, [r3, #0]
   d86fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d86fc:	9301      	str	r3, [sp, #4]
   d86fe:	bd08      	pop	{r3, pc}
   d8700:	00030244 	.word	0x00030244

000d8704 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8704:	b508      	push	{r3, lr}
   d8706:	4b02      	ldr	r3, [pc, #8]	; (d8710 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8708:	681b      	ldr	r3, [r3, #0]
   d870a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d870c:	9301      	str	r3, [sp, #4]
   d870e:	bd08      	pop	{r3, pc}
   d8710:	00030244 	.word	0x00030244

000d8714 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d8714:	b508      	push	{r3, lr}
   d8716:	4b02      	ldr	r3, [pc, #8]	; (d8720 <spark_cloud_disconnect+0xc>)
   d8718:	681b      	ldr	r3, [r3, #0]
   d871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d871c:	9301      	str	r3, [sp, #4]
   d871e:	bd08      	pop	{r3, pc}
   d8720:	00030244 	.word	0x00030244

000d8724 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8724:	b508      	push	{r3, lr}
   d8726:	4b02      	ldr	r3, [pc, #8]	; (d8730 <network_connect+0xc>)
   d8728:	681b      	ldr	r3, [r3, #0]
   d872a:	685b      	ldr	r3, [r3, #4]
   d872c:	9301      	str	r3, [sp, #4]
   d872e:	bd08      	pop	{r3, pc}
   d8730:	00030240 	.word	0x00030240

000d8734 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8734:	b508      	push	{r3, lr}
   d8736:	4b02      	ldr	r3, [pc, #8]	; (d8740 <network_connecting+0xc>)
   d8738:	681b      	ldr	r3, [r3, #0]
   d873a:	689b      	ldr	r3, [r3, #8]
   d873c:	9301      	str	r3, [sp, #4]
   d873e:	bd08      	pop	{r3, pc}
   d8740:	00030240 	.word	0x00030240

000d8744 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8744:	b508      	push	{r3, lr}
   d8746:	4b02      	ldr	r3, [pc, #8]	; (d8750 <network_disconnect+0xc>)
   d8748:	681b      	ldr	r3, [r3, #0]
   d874a:	68db      	ldr	r3, [r3, #12]
   d874c:	9301      	str	r3, [sp, #4]
   d874e:	bd08      	pop	{r3, pc}
   d8750:	00030240 	.word	0x00030240

000d8754 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8754:	b508      	push	{r3, lr}
   d8756:	4b02      	ldr	r3, [pc, #8]	; (d8760 <network_ready+0xc>)
   d8758:	681b      	ldr	r3, [r3, #0]
   d875a:	691b      	ldr	r3, [r3, #16]
   d875c:	9301      	str	r3, [sp, #4]
   d875e:	bd08      	pop	{r3, pc}
   d8760:	00030240 	.word	0x00030240

000d8764 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8764:	b508      	push	{r3, lr}
   d8766:	4b02      	ldr	r3, [pc, #8]	; (d8770 <network_on+0xc>)
   d8768:	681b      	ldr	r3, [r3, #0]
   d876a:	695b      	ldr	r3, [r3, #20]
   d876c:	9301      	str	r3, [sp, #4]
   d876e:	bd08      	pop	{r3, pc}
   d8770:	00030240 	.word	0x00030240

000d8774 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8774:	b508      	push	{r3, lr}
   d8776:	4b02      	ldr	r3, [pc, #8]	; (d8780 <network_off+0xc>)
   d8778:	681b      	ldr	r3, [r3, #0]
   d877a:	699b      	ldr	r3, [r3, #24]
   d877c:	9301      	str	r3, [sp, #4]
   d877e:	bd08      	pop	{r3, pc}
   d8780:	00030240 	.word	0x00030240

000d8784 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8784:	b508      	push	{r3, lr}
   d8786:	4b02      	ldr	r3, [pc, #8]	; (d8790 <network_listen+0xc>)
   d8788:	681b      	ldr	r3, [r3, #0]
   d878a:	69db      	ldr	r3, [r3, #28]
   d878c:	9301      	str	r3, [sp, #4]
   d878e:	bd08      	pop	{r3, pc}
   d8790:	00030240 	.word	0x00030240

000d8794 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8794:	b508      	push	{r3, lr}
   d8796:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <network_listening+0xc>)
   d8798:	681b      	ldr	r3, [r3, #0]
   d879a:	6a1b      	ldr	r3, [r3, #32]
   d879c:	9301      	str	r3, [sp, #4]
   d879e:	bd08      	pop	{r3, pc}
   d87a0:	00030240 	.word	0x00030240

000d87a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d87a4:	b508      	push	{r3, lr}
   d87a6:	4b02      	ldr	r3, [pc, #8]	; (d87b0 <network_set_listen_timeout+0xc>)
   d87a8:	681b      	ldr	r3, [r3, #0]
   d87aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d87ac:	9301      	str	r3, [sp, #4]
   d87ae:	bd08      	pop	{r3, pc}
   d87b0:	00030240 	.word	0x00030240

000d87b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d87b4:	b508      	push	{r3, lr}
   d87b6:	4b02      	ldr	r3, [pc, #8]	; (d87c0 <network_get_listen_timeout+0xc>)
   d87b8:	681b      	ldr	r3, [r3, #0]
   d87ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d87bc:	9301      	str	r3, [sp, #4]
   d87be:	bd08      	pop	{r3, pc}
   d87c0:	00030240 	.word	0x00030240

000d87c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d87c4:	b508      	push	{r3, lr}
   d87c6:	4b02      	ldr	r3, [pc, #8]	; (d87d0 <malloc+0xc>)
   d87c8:	681b      	ldr	r3, [r3, #0]
   d87ca:	681b      	ldr	r3, [r3, #0]
   d87cc:	9301      	str	r3, [sp, #4]
   d87ce:	bd08      	pop	{r3, pc}
   d87d0:	0003021c 	.word	0x0003021c

000d87d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d87d4:	b508      	push	{r3, lr}
   d87d6:	4b02      	ldr	r3, [pc, #8]	; (d87e0 <free+0xc>)
   d87d8:	681b      	ldr	r3, [r3, #0]
   d87da:	685b      	ldr	r3, [r3, #4]
   d87dc:	9301      	str	r3, [sp, #4]
   d87de:	bd08      	pop	{r3, pc}
   d87e0:	0003021c 	.word	0x0003021c

000d87e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d87e4:	b508      	push	{r3, lr}
   d87e6:	4b02      	ldr	r3, [pc, #8]	; (d87f0 <realloc+0xc>)
   d87e8:	681b      	ldr	r3, [r3, #0]
   d87ea:	689b      	ldr	r3, [r3, #8]
   d87ec:	9301      	str	r3, [sp, #4]
   d87ee:	bd08      	pop	{r3, pc}
   d87f0:	0003021c 	.word	0x0003021c

000d87f4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d87f4:	b508      	push	{r3, lr}
   d87f6:	4b02      	ldr	r3, [pc, #8]	; (d8800 <siprintf+0xc>)
   d87f8:	681b      	ldr	r3, [r3, #0]
   d87fa:	691b      	ldr	r3, [r3, #16]
   d87fc:	9301      	str	r3, [sp, #4]
   d87fe:	bd08      	pop	{r3, pc}
   d8800:	0003021c 	.word	0x0003021c

000d8804 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8804:	b508      	push	{r3, lr}
   d8806:	4b02      	ldr	r3, [pc, #8]	; (d8810 <snprintf+0xc>)
   d8808:	681b      	ldr	r3, [r3, #0]
   d880a:	69db      	ldr	r3, [r3, #28]
   d880c:	9301      	str	r3, [sp, #4]
   d880e:	bd08      	pop	{r3, pc}
   d8810:	0003021c 	.word	0x0003021c

000d8814 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8814:	b508      	push	{r3, lr}
   d8816:	4b02      	ldr	r3, [pc, #8]	; (d8820 <vsnprintf+0xc>)
   d8818:	681b      	ldr	r3, [r3, #0]
   d881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d881c:	9301      	str	r3, [sp, #4]
   d881e:	bd08      	pop	{r3, pc}
   d8820:	0003021c 	.word	0x0003021c

000d8824 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8824:	b508      	push	{r3, lr}
   d8826:	4b02      	ldr	r3, [pc, #8]	; (d8830 <abort+0xc>)
   d8828:	681b      	ldr	r3, [r3, #0]
   d882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d882c:	9301      	str	r3, [sp, #4]
   d882e:	bd08      	pop	{r3, pc}
   d8830:	0003021c 	.word	0x0003021c

000d8834 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8834:	b508      	push	{r3, lr}
   d8836:	4b02      	ldr	r3, [pc, #8]	; (d8840 <_malloc_r+0xc>)
   d8838:	681b      	ldr	r3, [r3, #0]
   d883a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d883c:	9301      	str	r3, [sp, #4]
   d883e:	bd08      	pop	{r3, pc}
   d8840:	0003021c 	.word	0x0003021c

000d8844 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8844:	b508      	push	{r3, lr}
   d8846:	4b02      	ldr	r3, [pc, #8]	; (d8850 <newlib_impure_ptr_callback+0xc>)
   d8848:	681b      	ldr	r3, [r3, #0]
   d884a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d884c:	9301      	str	r3, [sp, #4]
   d884e:	bd08      	pop	{r3, pc}
   d8850:	0003021c 	.word	0x0003021c

000d8854 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8854:	b508      	push	{r3, lr}
   d8856:	4b02      	ldr	r3, [pc, #8]	; (d8860 <strftime+0xc>)
   d8858:	681b      	ldr	r3, [r3, #0]
   d885a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d885c:	9301      	str	r3, [sp, #4]
   d885e:	bd08      	pop	{r3, pc}
   d8860:	0003021c 	.word	0x0003021c

000d8864 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8864:	b508      	push	{r3, lr}
   d8866:	4b02      	ldr	r3, [pc, #8]	; (d8870 <localtime_r+0xc>)
   d8868:	681b      	ldr	r3, [r3, #0]
   d886a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d886c:	9301      	str	r3, [sp, #4]
   d886e:	bd08      	pop	{r3, pc}
   d8870:	0003021c 	.word	0x0003021c

000d8874 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8874:	b508      	push	{r3, lr}
   d8876:	4b02      	ldr	r3, [pc, #8]	; (d8880 <gmtime_r+0xc>)
   d8878:	681b      	ldr	r3, [r3, #0]
   d887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d887c:	9301      	str	r3, [sp, #4]
   d887e:	bd08      	pop	{r3, pc}
   d8880:	0003021c 	.word	0x0003021c

000d8884 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8884:	b508      	push	{r3, lr}
   d8886:	4b02      	ldr	r3, [pc, #8]	; (d8890 <mktime+0xc>)
   d8888:	681b      	ldr	r3, [r3, #0]
   d888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d888c:	9301      	str	r3, [sp, #4]
   d888e:	bd08      	pop	{r3, pc}
   d8890:	0003021c 	.word	0x0003021c

000d8894 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8894:	2100      	movs	r1, #0
   d8896:	f7ff be63 	b.w	d8560 <system_delay_ms>

000d889a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d889a:	b510      	push	{r4, lr}
      if (_M_empty())
   d889c:	6883      	ldr	r3, [r0, #8]
   d889e:	4604      	mov	r4, r0
   d88a0:	b90b      	cbnz	r3, d88a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d88a2:	f001 fdec 	bl	da47e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88a6:	68c3      	ldr	r3, [r0, #12]
   d88a8:	4798      	blx	r3
      if (_M_manager)
   d88aa:	68a3      	ldr	r3, [r4, #8]
   d88ac:	b11b      	cbz	r3, d88b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d88ae:	2203      	movs	r2, #3
   d88b0:	4621      	mov	r1, r4
   d88b2:	4620      	mov	r0, r4
   d88b4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d88b6:	4620      	mov	r0, r4
   d88b8:	2110      	movs	r1, #16
}
   d88ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d88be:	f001 bdd8 	b.w	da472 <_ZdlPvj>

000d88c2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d88c2:	b510      	push	{r4, lr}
   d88c4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d88c6:	6800      	ldr	r0, [r0, #0]
   d88c8:	b108      	cbz	r0, d88ce <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d88ca:	f7ff fc3f 	bl	d814c <os_mutex_recursive_destroy>
    }
   d88ce:	4620      	mov	r0, r4
   d88d0:	bd10      	pop	{r4, pc}

000d88d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d88d2:	680b      	ldr	r3, [r1, #0]
   d88d4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d88d6:	b113      	cbz	r3, d88de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d88d8:	685a      	ldr	r2, [r3, #4]
   d88da:	3201      	adds	r2, #1
   d88dc:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d88de:	4770      	bx	lr

000d88e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d88e0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d88e2:	4c06      	ldr	r4, [pc, #24]	; (d88fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d88e4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d88e6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d88e8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d88ea:	f7ff fc27 	bl	d813c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d88ee:	4620      	mov	r0, r4
   d88f0:	4a03      	ldr	r2, [pc, #12]	; (d8900 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d88f2:	4904      	ldr	r1, [pc, #16]	; (d8904 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d88f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d88f8:	f001 bdb6 	b.w	da468 <__aeabi_atexit>
   d88fc:	2003e5e8 	.word	0x2003e5e8
   d8900:	2003e200 	.word	0x2003e200
   d8904:	000d88c3 	.word	0x000d88c3

000d8908 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8908:	2200      	movs	r2, #0
   d890a:	6840      	ldr	r0, [r0, #4]
   d890c:	4611      	mov	r1, r2
   d890e:	f7ff bf21 	b.w	d8754 <network_ready>

000d8912 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8912:	2200      	movs	r2, #0
   d8914:	6840      	ldr	r0, [r0, #4]
   d8916:	4611      	mov	r1, r2
   d8918:	f7ff bf3c 	b.w	d8794 <network_listening>

000d891c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d891c:	2200      	movs	r2, #0
   d891e:	6840      	ldr	r0, [r0, #4]
   d8920:	4611      	mov	r1, r2
   d8922:	f7ff bf47 	b.w	d87b4 <network_get_listen_timeout>

000d8926 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8926:	6840      	ldr	r0, [r0, #4]
   d8928:	2200      	movs	r2, #0
   d892a:	f7ff bf3b 	b.w	d87a4 <network_set_listen_timeout>

000d892e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d892e:	6840      	ldr	r0, [r0, #4]
   d8930:	2200      	movs	r2, #0
   d8932:	f081 0101 	eor.w	r1, r1, #1
   d8936:	f7ff bf25 	b.w	d8784 <network_listen>

000d893a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d893a:	2300      	movs	r3, #0
   d893c:	6840      	ldr	r0, [r0, #4]
   d893e:	461a      	mov	r2, r3
   d8940:	4619      	mov	r1, r3
   d8942:	f7ff bf17 	b.w	d8774 <network_off>

000d8946 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8946:	2300      	movs	r3, #0
   d8948:	6840      	ldr	r0, [r0, #4]
   d894a:	461a      	mov	r2, r3
   d894c:	4619      	mov	r1, r3
   d894e:	f7ff bf09 	b.w	d8764 <network_on>

000d8952 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8952:	2200      	movs	r2, #0
   d8954:	6840      	ldr	r0, [r0, #4]
   d8956:	4611      	mov	r1, r2
   d8958:	f7ff beec 	b.w	d8734 <network_connecting>

000d895c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d895c:	6840      	ldr	r0, [r0, #4]
   d895e:	2200      	movs	r2, #0
   d8960:	2102      	movs	r1, #2
   d8962:	f7ff beef 	b.w	d8744 <network_disconnect>

000d8966 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8966:	2300      	movs	r3, #0
   d8968:	6840      	ldr	r0, [r0, #4]
   d896a:	461a      	mov	r2, r3
   d896c:	f7ff beda 	b.w	d8724 <network_connect>

000d8970 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8970:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d8972:	4b1b      	ldr	r3, [pc, #108]	; (d89e0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8974:	6003      	str	r3, [r0, #0]
   d8976:	2500      	movs	r5, #0
   d8978:	460f      	mov	r7, r1
   d897a:	3328      	adds	r3, #40	; 0x28
   d897c:	2618      	movs	r6, #24
   d897e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8982:	b089      	sub	sp, #36	; 0x24
   d8984:	6043      	str	r3, [r0, #4]
   d8986:	4632      	mov	r2, r6
   d8988:	4629      	mov	r1, r5
   d898a:	4604      	mov	r4, r0
   d898c:	3010      	adds	r0, #16
   d898e:	f002 fa61 	bl	dae54 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d8992:	6878      	ldr	r0, [r7, #4]
   d8994:	462a      	mov	r2, r5
   d8996:	4629      	mov	r1, r5
   d8998:	f7ff fedc 	bl	d8754 <network_ready>
   d899c:	b918      	cbnz	r0, d89a6 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d899e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d89a0:	4620      	mov	r0, r4
   d89a2:	b009      	add	sp, #36	; 0x24
   d89a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d89a6:	4629      	mov	r1, r5
   d89a8:	4632      	mov	r2, r6
   d89aa:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d89ac:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d89b0:	f002 fa50 	bl	dae54 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d89b4:	a902      	add	r1, sp, #8
   d89b6:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d89b8:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d89bc:	f7ff fb76 	bl	d80ac <cellular_signal>
   d89c0:	b110      	cbz	r0, d89c8 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d89c2:	2301      	movs	r3, #1
   d89c4:	60a3      	str	r3, [r4, #8]
            return sig;
   d89c6:	e7eb      	b.n	d89a0 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d89c8:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d89ca:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d89cc:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d89ce:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d89d0:	b90b      	cbnz	r3, d89d6 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d89d2:	2302      	movs	r3, #2
   d89d4:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d89d6:	a902      	add	r1, sp, #8
   d89d8:	4620      	mov	r0, r4
   d89da:	f000 f8ae 	bl	d8b3a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d89de:	e7df      	b.n	d89a0 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d89e0:	000db9f0 	.word	0x000db9f0

000d89e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d89e4:	4b08      	ldr	r3, [pc, #32]	; (d8a08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d89e6:	b510      	push	{r4, lr}
   d89e8:	2428      	movs	r4, #40	; 0x28
   d89ea:	4622      	mov	r2, r4
   d89ec:	4618      	mov	r0, r3
   d89ee:	2100      	movs	r1, #0
   d89f0:	f002 fa30 	bl	dae54 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d89f4:	4b05      	ldr	r3, [pc, #20]	; (d8a0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d89f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d89f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d89fc:	6042      	str	r2, [r0, #4]
   d89fe:	2204      	movs	r2, #4
   d8a00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8a02:	4a03      	ldr	r2, [pc, #12]	; (d8a10 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8a04:	601a      	str	r2, [r3, #0]
   d8a06:	bd10      	pop	{r4, pc}
   d8a08:	2003e5f4 	.word	0x2003e5f4
   d8a0c:	2003e5ec 	.word	0x2003e5ec
   d8a10:	000db9bc 	.word	0x000db9bc

000d8a14 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8a14:	4770      	bx	lr

000d8a16 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8a16:	7d00      	ldrb	r0, [r0, #20]
   d8a18:	4770      	bx	lr

000d8a1a <_ZN14CellularSignalD0Ev>:
   d8a1a:	b510      	push	{r4, lr}
   d8a1c:	2128      	movs	r1, #40	; 0x28
   d8a1e:	4604      	mov	r4, r0
   d8a20:	f001 fd27 	bl	da472 <_ZdlPvj>
   d8a24:	4620      	mov	r0, r4
   d8a26:	bd10      	pop	{r4, pc}

000d8a28 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8a28:	7d03      	ldrb	r3, [r0, #20]
   d8a2a:	b17b      	cbz	r3, d8a4c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8a2c:	69c3      	ldr	r3, [r0, #28]
   d8a2e:	2b00      	cmp	r3, #0
   d8a30:	db0c      	blt.n	d8a4c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8a32:	ee07 3a90 	vmov	s15, r3
   d8a36:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8a54 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a42:	eddf 7a05 	vldr	s15, [pc, #20]	; d8a58 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8a46:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8a4a:	4770      	bx	lr
    }

    return -1.0f;
   d8a4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8a50:	4770      	bx	lr
   d8a52:	bf00      	nop
   d8a54:	477fff00 	.word	0x477fff00
   d8a58:	42c80000 	.word	0x42c80000

000d8a5c <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8a5c:	7d03      	ldrb	r3, [r0, #20]
   d8a5e:	b163      	cbz	r3, d8a7a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8a60:	6983      	ldr	r3, [r0, #24]
   d8a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8a66:	d008      	beq.n	d8a7a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8a68:	ee07 3a90 	vmov	s15, r3
   d8a6c:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8a80 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a74:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a78:	4770      	bx	lr
    }

    return 0.0f;
   d8a7a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8a84 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d8a7e:	4770      	bx	lr
   d8a80:	42c80000 	.word	0x42c80000
   d8a84:	00000000 	.word	0x00000000

000d8a88 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8a88:	7d03      	ldrb	r3, [r0, #20]
   d8a8a:	b17b      	cbz	r3, d8aac <_ZNK14CellularSignal10getQualityEv+0x24>
   d8a8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8a8e:	2b00      	cmp	r3, #0
   d8a90:	db0c      	blt.n	d8aac <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8a92:	ee07 3a90 	vmov	s15, r3
   d8a96:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8ab4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a9e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8aa2:	eddf 7a05 	vldr	s15, [pc, #20]	; d8ab8 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8aa6:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8aaa:	4770      	bx	lr
    }

    return -1.0f;
   d8aac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8ab0:	4770      	bx	lr
   d8ab2:	bf00      	nop
   d8ab4:	477fff00 	.word	0x477fff00
   d8ab8:	42c80000 	.word	0x42c80000

000d8abc <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8abc:	7d03      	ldrb	r3, [r0, #20]
   d8abe:	b163      	cbz	r3, d8ada <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8ac0:	6a03      	ldr	r3, [r0, #32]
   d8ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8ac6:	d008      	beq.n	d8ada <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8ac8:	ee07 3a90 	vmov	s15, r3
   d8acc:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8ae0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8ad4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8ad8:	4770      	bx	lr
    }

    return 0.0f;
   d8ada:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8ae4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8ade:	4770      	bx	lr
   d8ae0:	42c80000 	.word	0x42c80000
   d8ae4:	00000000 	.word	0x00000000

000d8ae8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8ae8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8aea:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8aec:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8aee:	da0a      	bge.n	d8b06 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8af0:	212d      	movs	r1, #45	; 0x2d
   d8af2:	f000 fd33 	bl	d955c <_ZN5Print5printEc>
            val = -n;
   d8af6:	4261      	negs	r1, r4
            t = print('-');
   d8af8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8afa:	220a      	movs	r2, #10
   d8afc:	4630      	mov	r0, r6
   d8afe:	f000 fd3c 	bl	d957a <_ZN5Print11printNumberEmh>
    }
}
   d8b02:	4428      	add	r0, r5
   d8b04:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8b06:	4621      	mov	r1, r4
        size_t t = 0;
   d8b08:	2500      	movs	r5, #0
   d8b0a:	e7f6      	b.n	d8afa <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8b0c <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8b0c:	b570      	push	{r4, r5, r6, lr}
   d8b0e:	460c      	mov	r4, r1
   d8b10:	4605      	mov	r5, r0
   d8b12:	6881      	ldr	r1, [r0, #8]
   d8b14:	4620      	mov	r0, r4
   d8b16:	f7ff ffe7 	bl	d8ae8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8b1a:	212c      	movs	r1, #44	; 0x2c
   d8b1c:	4606      	mov	r6, r0
   d8b1e:	4620      	mov	r0, r4
   d8b20:	f000 fd1c 	bl	d955c <_ZN5Print5printEc>
   d8b24:	68e9      	ldr	r1, [r5, #12]
   d8b26:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8b28:	4620      	mov	r0, r4
   d8b2a:	f7ff ffdd 	bl	d8ae8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8b2e:	4430      	add	r0, r6
   d8b30:	bd70      	pop	{r4, r5, r6, pc}

000d8b32 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8b32:	f1a0 0004 	sub.w	r0, r0, #4
   d8b36:	f7ff bfe9 	b.w	d8b0c <_ZNK14CellularSignal7printToER5Print>

000d8b3a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8b3a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8b3c:	460d      	mov	r5, r1
   d8b3e:	f100 0410 	add.w	r4, r0, #16
   d8b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b46:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8b4a:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8b4e:	2001      	movs	r0, #1
   d8b50:	bd30      	pop	{r4, r5, pc}

000d8b52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b52:	4770      	bx	lr

000d8b54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8b54:	2000      	movs	r0, #0
   d8b56:	4770      	bx	lr

000d8b58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b58:	b510      	push	{r4, lr}
   d8b5a:	2110      	movs	r1, #16
   d8b5c:	4604      	mov	r4, r0
   d8b5e:	f001 fc88 	bl	da472 <_ZdlPvj>
   d8b62:	4620      	mov	r0, r4
   d8b64:	bd10      	pop	{r4, pc}

000d8b66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8b66:	b508      	push	{r3, lr}
      { delete this; }
   d8b68:	f7ff fff6 	bl	d8b58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8b6c:	bd08      	pop	{r3, pc}

000d8b6e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8b6e:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8b70:	2200      	movs	r2, #0
   d8b72:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8b76:	6002      	str	r2, [r0, #0]
   d8b78:	8084      	strh	r4, [r0, #4]
   d8b7a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b7c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b7e:	680c      	ldr	r4, [r1, #0]
   d8b80:	8085      	strh	r5, [r0, #4]
   d8b82:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b84:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8b86:	bd30      	pop	{r4, r5, pc}

000d8b88 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8b88:	b510      	push	{r4, lr}
   d8b8a:	4604      	mov	r4, r0
    free((void*)msg_);
   d8b8c:	6800      	ldr	r0, [r0, #0]
   d8b8e:	f7ff fe21 	bl	d87d4 <free>
}
   d8b92:	4620      	mov	r0, r4
   d8b94:	bd10      	pop	{r4, pc}

000d8b96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8b96:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8b98:	68c4      	ldr	r4, [r0, #12]
   d8b9a:	b1f4      	cbz	r4, d8bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8b9c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8b9e:	2b02      	cmp	r3, #2
   d8ba0:	d103      	bne.n	d8baa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8ba2:	f104 000c 	add.w	r0, r4, #12
   d8ba6:	f7ff ffef 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8baa:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8bac:	b135      	cbz	r5, d8bbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8bae:	4628      	mov	r0, r5
   d8bb0:	f7fd fc92 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
   d8bb4:	2110      	movs	r1, #16
   d8bb6:	4628      	mov	r0, r5
   d8bb8:	f001 fc5b 	bl	da472 <_ZdlPvj>
   d8bbc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8bbe:	b135      	cbz	r5, d8bce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8bc0:	4628      	mov	r0, r5
   d8bc2:	f7fd fc89 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
   d8bc6:	2110      	movs	r1, #16
   d8bc8:	4628      	mov	r0, r5
   d8bca:	f001 fc52 	bl	da472 <_ZdlPvj>
   d8bce:	4620      	mov	r0, r4
   d8bd0:	2114      	movs	r1, #20
   d8bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8bd6:	f001 bc4c 	b.w	da472 <_ZdlPvj>
   d8bda:	bd38      	pop	{r3, r4, r5, pc}

000d8bdc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8bdc:	b510      	push	{r4, lr}
   d8bde:	b088      	sub	sp, #32
   d8be0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8be2:	4668      	mov	r0, sp
   d8be4:	f000 fe27 	bl	d9836 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8be8:	4669      	mov	r1, sp
   d8bea:	a804      	add	r0, sp, #16
   d8bec:	f000 fe46 	bl	d987c <_ZN6StringC1ERKS_>
   d8bf0:	a804      	add	r0, sp, #16
   d8bf2:	47a0      	blx	r4
   d8bf4:	4604      	mov	r4, r0
   d8bf6:	a804      	add	r0, sp, #16
   d8bf8:	f000 fdd2 	bl	d97a0 <_ZN6StringD1Ev>
    String p(param);
   d8bfc:	4668      	mov	r0, sp
   d8bfe:	f000 fdcf 	bl	d97a0 <_ZN6StringD1Ev>
}
   d8c02:	4620      	mov	r0, r4
   d8c04:	b008      	add	sp, #32
   d8c06:	bd10      	pop	{r4, pc}

000d8c08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8c0a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8c10:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8c12:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8c14:	461a      	mov	r2, r3
   d8c16:	4669      	mov	r1, sp
   d8c18:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8c1a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8c1e:	f8ad 4000 	strh.w	r4, [sp]
   d8c22:	f7ff fd17 	bl	d8654 <spark_function>
}
   d8c26:	b004      	add	sp, #16
   d8c28:	bd10      	pop	{r4, pc}

000d8c2a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8c2a:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8c2c:	2308      	movs	r3, #8
   d8c2e:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8c32:	6803      	ldr	r3, [r0, #0]
   d8c34:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8c38:	7a03      	ldrb	r3, [r0, #8]
   d8c3a:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8c3e:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8c40:	6843      	ldr	r3, [r0, #4]
   d8c42:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8c44:	4668      	mov	r0, sp
   d8c46:	f7ff fd65 	bl	d8714 <spark_cloud_disconnect>
}
   d8c4a:	b003      	add	sp, #12
   d8c4c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c50 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d8c50:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8c52:	2308      	movs	r3, #8
   d8c54:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8c58:	6803      	ldr	r3, [r0, #0]
   d8c5a:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8c5e:	7a03      	ldrb	r3, [r0, #8]
   d8c60:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
   d8c64:	6843      	ldr	r3, [r0, #4]
   d8c66:	9301      	str	r3, [sp, #4]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8c68:	2300      	movs	r3, #0
   d8c6a:	466a      	mov	r2, sp
   d8c6c:	4619      	mov	r1, r3
   d8c6e:	2002      	movs	r0, #2
   d8c70:	f7ff fd40 	bl	d86f4 <spark_set_connection_property>
}
   d8c74:	b003      	add	sp, #12
   d8c76:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c7c:	460e      	mov	r6, r1
   d8c7e:	4604      	mov	r4, r0
   d8c80:	f856 3b04 	ldr.w	r3, [r6], #4
   d8c84:	9300      	str	r3, [sp, #0]
   d8c86:	460d      	mov	r5, r1
   d8c88:	a801      	add	r0, sp, #4
   d8c8a:	4631      	mov	r1, r6
   d8c8c:	f7ff fe21 	bl	d88d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8c90:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c92:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8c94:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c96:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8c98:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8c9a:	2300      	movs	r3, #0
   d8c9c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8c9e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8ca0:	f7fe f9b7 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8ca4:	4630      	mov	r0, r6
   d8ca6:	f7fe f9b4 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8caa:	4628      	mov	r0, r5
   d8cac:	2108      	movs	r1, #8
   d8cae:	f001 fbe0 	bl	da472 <_ZdlPvj>
        return p;
    }
   d8cb2:	4620      	mov	r0, r4
   d8cb4:	b002      	add	sp, #8
   d8cb6:	bd70      	pop	{r4, r5, r6, pc}

000d8cb8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8cb8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8cba:	b510      	push	{r4, lr}
      if (_M_empty())
   d8cbc:	b90a      	cbnz	r2, d8cc2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8cbe:	f001 fbde 	bl	da47e <_ZSt25__throw_bad_function_callv>
    }
   d8cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8cc6:	68c3      	ldr	r3, [r0, #12]
   d8cc8:	4718      	bx	r3

000d8cca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8cca:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8ccc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8cce:	f100 0110 	add.w	r1, r0, #16
   d8cd2:	f7ff fff1 	bl	d8cb8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8cd6:	bd08      	pop	{r3, pc}

000d8cd8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8cd8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8cda:	b510      	push	{r4, lr}
      if (_M_empty())
   d8cdc:	b90a      	cbnz	r2, d8ce2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8cde:	f001 fbce 	bl	da47e <_ZSt25__throw_bad_function_callv>
    }
   d8ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8ce6:	68c3      	ldr	r3, [r0, #12]
   d8ce8:	4718      	bx	r3

000d8cea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8cea:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8cec:	6800      	ldr	r0, [r0, #0]
   d8cee:	f100 0110 	add.w	r1, r0, #16
   d8cf2:	f7ff fff1 	bl	d8cd8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8cf6:	bd08      	pop	{r3, pc}

000d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8cf8:	b538      	push	{r3, r4, r5, lr}
   d8cfa:	2300      	movs	r3, #0
   d8cfc:	4604      	mov	r4, r0
   d8cfe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d00:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8d02:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d04:	f7fb f9c7 	bl	d4096 <_Znwj>
   d8d08:	b128      	cbz	r0, d8d16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8d0a:	2301      	movs	r3, #1
   d8d0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8d10:	4b02      	ldr	r3, [pc, #8]	; (d8d1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8d12:	6003      	str	r3, [r0, #0]
   d8d14:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d16:	6020      	str	r0, [r4, #0]
	}
   d8d18:	4620      	mov	r0, r4
   d8d1a:	bd38      	pop	{r3, r4, r5, pc}
   d8d1c:	000dba24 	.word	0x000dba24

000d8d20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8d20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8d22:	2300      	movs	r3, #0
   d8d24:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8d26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8d28:	4604      	mov	r4, r0
   d8d2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8d2c:	b12b      	cbz	r3, d8d3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8d2e:	2202      	movs	r2, #2
   d8d30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8d32:	68eb      	ldr	r3, [r5, #12]
   d8d34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8d36:	68ab      	ldr	r3, [r5, #8]
   d8d38:	60a3      	str	r3, [r4, #8]
    }
   d8d3a:	4620      	mov	r0, r4
   d8d3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8d42:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8d44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8d46:	4668      	mov	r0, sp
   d8d48:	f7ff ff11 	bl	d8b6e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8d4c:	f04f 0302 	mov.w	r3, #2
   d8d50:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8d54:	2a00      	cmp	r2, #0
   d8d56:	d103      	bne.n	d8d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8d58:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8d5c:	2900      	cmp	r1, #0
   d8d5e:	d1f7      	bne.n	d8d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8d60:	d125      	bne.n	d8dae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8d62:	f104 050c 	add.w	r5, r4, #12
   d8d66:	4669      	mov	r1, sp
   d8d68:	4628      	mov	r0, r5
   d8d6a:	f7ff ff00 	bl	d8b6e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8d6e:	f3bf 8f5b 	dmb	ish
   d8d72:	2301      	movs	r3, #1
   d8d74:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8d76:	2000      	movs	r0, #0
   d8d78:	f104 0308 	add.w	r3, r4, #8
   d8d7c:	f3bf 8f5b 	dmb	ish
   d8d80:	e853 6f00 	ldrex	r6, [r3]
   d8d84:	e843 0200 	strex	r2, r0, [r3]
   d8d88:	2a00      	cmp	r2, #0
   d8d8a:	d1f9      	bne.n	d8d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8d8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8d90:	b16e      	cbz	r6, d8dae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8d92:	f7ff fc05 	bl	d85a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8d96:	b178      	cbz	r0, d8db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8d98:	4629      	mov	r1, r5
   d8d9a:	4630      	mov	r0, r6
   d8d9c:	f7ff ff8c 	bl	d8cb8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8da0:	4630      	mov	r0, r6
   d8da2:	f7fd fb99 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8da6:	2110      	movs	r1, #16
   d8da8:	4630      	mov	r0, r6
   d8daa:	f001 fb62 	bl	da472 <_ZdlPvj>
        p_->setError(std::move(error));
   d8dae:	4668      	mov	r0, sp
   d8db0:	f7ff feea 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
    }
   d8db4:	b009      	add	sp, #36	; 0x24
   d8db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8db8:	4631      	mov	r1, r6
   d8dba:	a802      	add	r0, sp, #8
   d8dbc:	f7ff ffb0 	bl	d8d20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8dc0:	68e0      	ldr	r0, [r4, #12]
   d8dc2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8dc6:	b108      	cbz	r0, d8dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8dc8:	f002 f882 	bl	daed0 <strdup>
        type_(type) {
   d8dcc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8dce:	2010      	movs	r0, #16
   d8dd0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8dd4:	f7fb f95f 	bl	d4096 <_Znwj>
   d8dd8:	4605      	mov	r5, r0
   d8dda:	b1e8      	cbz	r0, d8e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8ddc:	2700      	movs	r7, #0
   d8dde:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8de0:	2018      	movs	r0, #24
   d8de2:	f7fb f958 	bl	d4096 <_Znwj>
   d8de6:	4604      	mov	r4, r0
   d8de8:	b188      	cbz	r0, d8e0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8dea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8dec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8dee:	a802      	add	r0, sp, #8
   d8df0:	f7fe f925 	bl	d703e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8df4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8df6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8df8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8dfa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8dfc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8dfe:	a906      	add	r1, sp, #24
   d8e00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8e02:	60e3      	str	r3, [r4, #12]
   d8e04:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8e08:	9205      	str	r2, [sp, #20]
   d8e0a:	f7ff feb0 	bl	d8b6e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8e0e:	4b08      	ldr	r3, [pc, #32]	; (d8e30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8e10:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8e12:	4b08      	ldr	r3, [pc, #32]	; (d8e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e14:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8e16:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8e18:	a806      	add	r0, sp, #24
   d8e1a:	f7ff feb5 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8e1e:	a802      	add	r0, sp, #8
   d8e20:	f7fd fb5a 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8e24:	2200      	movs	r2, #0
   d8e26:	4629      	mov	r1, r5
   d8e28:	4803      	ldr	r0, [pc, #12]	; (d8e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8e2a:	f7ff fbc1 	bl	d85b0 <application_thread_invoke>
   d8e2e:	e7b7      	b.n	d8da0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8e30:	000d8ccb 	.word	0x000d8ccb
   d8e34:	000d8f61 	.word	0x000d8f61
   d8e38:	000d889b 	.word	0x000d889b

000d8e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e40:	b08a      	sub	sp, #40	; 0x28
   d8e42:	4605      	mov	r5, r0
   d8e44:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8e48:	460c      	mov	r4, r1
   d8e4a:	4617      	mov	r7, r2
   d8e4c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8e4e:	f7ff fc19 	bl	d8684 <spark_cloud_flag_connected>
   d8e52:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8e54:	4682      	mov	sl, r0
   d8e56:	bb38      	cbnz	r0, d8ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8e58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8e5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e5e:	a905      	add	r1, sp, #20
   d8e60:	4630      	mov	r0, r6
   d8e62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8e66:	f7ff fe82 	bl	d8b6e <_ZN8particle5ErrorC1EOS0_>
   d8e6a:	2014      	movs	r0, #20
   d8e6c:	f7fb f913 	bl	d4096 <_Znwj>
   d8e70:	4604      	mov	r4, r0
   d8e72:	b148      	cbz	r0, d8e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8e74:	2302      	movs	r3, #2
   d8e76:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e78:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8e7a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e7e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8e80:	4631      	mov	r1, r6
   d8e82:	300c      	adds	r0, #12
   d8e84:	f7ff fe73 	bl	d8b6e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e88:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8e8a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e8c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8e90:	f7ff ff32 	bl	d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e94:	4630      	mov	r0, r6
   d8e96:	f7ff fe77 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8e9a:	a805      	add	r0, sp, #20
   d8e9c:	f7ff fe74 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
}
   d8ea0:	4628      	mov	r0, r5
   d8ea2:	b00a      	add	sp, #40	; 0x28
   d8ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8ea8:	230c      	movs	r3, #12
   d8eaa:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8eae:	2014      	movs	r0, #20
   d8eb0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8eb4:	9307      	str	r3, [sp, #28]
   d8eb6:	f7fb f8ee 	bl	d4096 <_Znwj>
   d8eba:	4601      	mov	r1, r0
   d8ebc:	b128      	cbz	r0, d8eca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8ebe:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8ec2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ec6:	f880 a001 	strb.w	sl, [r0, #1]
   d8eca:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ecc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8ece:	f7ff ff13 	bl	d8cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8ed2:	4b22      	ldr	r3, [pc, #136]	; (d8f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8ed4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8ed6:	2008      	movs	r0, #8
   d8ed8:	f7fb f8dd 	bl	d4096 <_Znwj>
   d8edc:	4682      	mov	sl, r0
   d8ede:	b128      	cbz	r0, d8eec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8ee0:	9b03      	ldr	r3, [sp, #12]
   d8ee2:	f840 3b04 	str.w	r3, [r0], #4
   d8ee6:	a904      	add	r1, sp, #16
   d8ee8:	f7ff fcf3 	bl	d88d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8eec:	9600      	str	r6, [sp, #0]
   d8eee:	fa5f f389 	uxtb.w	r3, r9
   d8ef2:	4642      	mov	r2, r8
   d8ef4:	4639      	mov	r1, r7
   d8ef6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8ef8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8efc:	f7ff fbd2 	bl	d86a4 <spark_send_event>
   d8f00:	b9b8      	cbnz	r0, d8f32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8f02:	9b03      	ldr	r3, [sp, #12]
   d8f04:	785b      	ldrb	r3, [r3, #1]
   d8f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8f0a:	b993      	cbnz	r3, d8f32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8f0c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8f10:	a905      	add	r1, sp, #20
   d8f12:	a803      	add	r0, sp, #12
   d8f14:	9205      	str	r2, [sp, #20]
   d8f16:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8f1a:	f7ff ff11 	bl	d8d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8f1e:	a805      	add	r0, sp, #20
   d8f20:	f7ff fe32 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8f24:	a805      	add	r0, sp, #20
   d8f26:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f28:	f7ff fea7 	bl	d8c7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8f2c:	a806      	add	r0, sp, #24
   d8f2e:	f7fe f870 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f32:	9b03      	ldr	r3, [sp, #12]
   d8f34:	9305      	str	r3, [sp, #20]
   d8f36:	a904      	add	r1, sp, #16
   d8f38:	a806      	add	r0, sp, #24
   d8f3a:	f7ff fcca 	bl	d88d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f3e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f40:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f42:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8f44:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8f46:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8f48:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8f4a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8f4c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8f4e:	f7fe f860 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f52:	a804      	add	r0, sp, #16
   d8f54:	f7fe f85d 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8f58:	e7a2      	b.n	d8ea0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8f5a:	bf00      	nop
   d8f5c:	000d9025 	.word	0x000d9025

000d8f60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8f60:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f64:	4605      	mov	r5, r0
	  switch (__op)
   d8f66:	d007      	beq.n	d8f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8f68:	2a03      	cmp	r2, #3
   d8f6a:	d018      	beq.n	d8f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8f6c:	2a01      	cmp	r2, #1
   d8f6e:	d101      	bne.n	d8f74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8f70:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8f72:	6003      	str	r3, [r0, #0]
	}
   d8f74:	2000      	movs	r0, #0
   d8f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f78:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8f7a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f7c:	f7fb f88b 	bl	d4096 <_Znwj>
   d8f80:	4604      	mov	r4, r0
   d8f82:	b150      	cbz	r0, d8f9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8f84:	4631      	mov	r1, r6
   d8f86:	f7ff fecb 	bl	d8d20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8f8a:	6930      	ldr	r0, [r6, #16]
   d8f8c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8f90:	b108      	cbz	r0, d8f96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8f92:	f001 ff9d 	bl	daed0 <strdup>
        type_(type) {
   d8f96:	6120      	str	r0, [r4, #16]
   d8f98:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8f9a:	602c      	str	r4, [r5, #0]
	}
   d8f9c:	e7ea      	b.n	d8f74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8f9e:	6804      	ldr	r4, [r0, #0]
   d8fa0:	2c00      	cmp	r4, #0
   d8fa2:	d0e7      	beq.n	d8f74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8fa4:	f104 0010 	add.w	r0, r4, #16
   d8fa8:	f7ff fdee 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8fac:	4620      	mov	r0, r4
   d8fae:	f7fd fa93 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8fb2:	2118      	movs	r1, #24
   d8fb4:	4620      	mov	r0, r4
   d8fb6:	f001 fa5c 	bl	da472 <_ZdlPvj>
   d8fba:	e7db      	b.n	d8f74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8fbc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8fbe:	2300      	movs	r3, #0
   d8fc0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8fc2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8fc4:	4604      	mov	r4, r0
   d8fc6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8fc8:	b12b      	cbz	r3, d8fd6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8fca:	2202      	movs	r2, #2
   d8fcc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8fce:	68eb      	ldr	r3, [r5, #12]
   d8fd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8fd2:	68ab      	ldr	r3, [r5, #8]
   d8fd4:	60a3      	str	r3, [r4, #8]
    }
   d8fd6:	4620      	mov	r0, r4
   d8fd8:	bd38      	pop	{r3, r4, r5, pc}

000d8fda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8fda:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8fdc:	b570      	push	{r4, r5, r6, lr}
   d8fde:	4604      	mov	r4, r0
	  switch (__op)
   d8fe0:	d007      	beq.n	d8ff2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8fe2:	2a03      	cmp	r2, #3
   d8fe4:	d012      	beq.n	d900c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8fe6:	2a01      	cmp	r2, #1
   d8fe8:	d101      	bne.n	d8fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8fea:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8fec:	6003      	str	r3, [r0, #0]
	}
   d8fee:	2000      	movs	r0, #0
   d8ff0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ff2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8ff4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ff6:	f7fb f84e 	bl	d4096 <_Znwj>
   d8ffa:	4605      	mov	r5, r0
   d8ffc:	b120      	cbz	r0, d9008 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8ffe:	4631      	mov	r1, r6
   d9000:	f7ff ffdc 	bl	d8fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9004:	7c33      	ldrb	r3, [r6, #16]
   d9006:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9008:	6025      	str	r5, [r4, #0]
	}
   d900a:	e7f0      	b.n	d8fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d900c:	6804      	ldr	r4, [r0, #0]
   d900e:	2c00      	cmp	r4, #0
   d9010:	d0ed      	beq.n	d8fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d9012:	4620      	mov	r0, r4
   d9014:	f7fd fa60 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9018:	2114      	movs	r1, #20
   d901a:	4620      	mov	r0, r4
   d901c:	f001 fa29 	bl	da472 <_ZdlPvj>
   d9020:	e7e5      	b.n	d8fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d9024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9024:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9026:	b089      	sub	sp, #36	; 0x24
   d9028:	4604      	mov	r4, r0
   d902a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d902c:	a801      	add	r0, sp, #4
   d902e:	4611      	mov	r1, r2
   d9030:	f7ff fe23 	bl	d8c7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9034:	b1a4      	cbz	r4, d9060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9036:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9038:	b11d      	cbz	r5, d9042 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d903a:	4628      	mov	r0, r5
   d903c:	f001 ff48 	bl	daed0 <strdup>
   d9040:	4605      	mov	r5, r0
   d9042:	a801      	add	r0, sp, #4
   d9044:	a903      	add	r1, sp, #12
        type_(type) {
   d9046:	9503      	str	r5, [sp, #12]
   d9048:	f8ad 4010 	strh.w	r4, [sp, #16]
   d904c:	f7ff fe78 	bl	d8d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9050:	a803      	add	r0, sp, #12
   d9052:	f7ff fd99 	bl	d8b88 <_ZN8particle5ErrorD1Ev>
   d9056:	a802      	add	r0, sp, #8
   d9058:	f7fd ffdb 	bl	d7012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d905c:	b009      	add	sp, #36	; 0x24
   d905e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9060:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d9062:	2301      	movs	r3, #1
   d9064:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9068:	2a00      	cmp	r2, #0
   d906a:	d103      	bne.n	d9074 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d906c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9070:	2900      	cmp	r1, #0
   d9072:	d1f7      	bne.n	d9064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9074:	d1ef      	bne.n	d9056 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9076:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9078:	f3bf 8f5b 	dmb	ish
   d907c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d907e:	1d2b      	adds	r3, r5, #4
   d9080:	f3bf 8f5b 	dmb	ish
   d9084:	e853 6f00 	ldrex	r6, [r3]
   d9088:	e843 4200 	strex	r2, r4, [r3]
   d908c:	2a00      	cmp	r2, #0
   d908e:	d1f9      	bne.n	d9084 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9090:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9094:	2e00      	cmp	r6, #0
   d9096:	d0de      	beq.n	d9056 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9098:	4620      	mov	r0, r4
   d909a:	f7ff fa81 	bl	d85a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d909e:	4607      	mov	r7, r0
   d90a0:	b160      	cbz	r0, d90bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d90a2:	f105 010c 	add.w	r1, r5, #12
   d90a6:	4630      	mov	r0, r6
   d90a8:	f7ff fe16 	bl	d8cd8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d90ac:	4630      	mov	r0, r6
   d90ae:	f7fd fa13 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d90b2:	2110      	movs	r1, #16
   d90b4:	4630      	mov	r0, r6
   d90b6:	f001 f9dc 	bl	da472 <_ZdlPvj>
   d90ba:	e7cc      	b.n	d9056 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d90bc:	4631      	mov	r1, r6
   d90be:	a803      	add	r0, sp, #12
   d90c0:	f7ff ff7c 	bl	d8fbc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d90c4:	7b2b      	ldrb	r3, [r5, #12]
   d90c6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d90ca:	2010      	movs	r0, #16
   d90cc:	f7fa ffe3 	bl	d4096 <_Znwj>
   d90d0:	4605      	mov	r5, r0
   d90d2:	b1d0      	cbz	r0, d910a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d90d4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90d6:	2014      	movs	r0, #20
   d90d8:	f7fa ffdd 	bl	d4096 <_Znwj>
   d90dc:	4604      	mov	r4, r0
   d90de:	b178      	cbz	r0, d9100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d90e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d90e2:	4601      	mov	r1, r0
   d90e4:	a803      	add	r0, sp, #12
   d90e6:	f7fd ffaa 	bl	d703e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d90ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90ee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90f0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d90f2:	9205      	str	r2, [sp, #20]
   d90f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90f6:	60e3      	str	r3, [r4, #12]
   d90f8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d90fc:	9206      	str	r2, [sp, #24]
   d90fe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9100:	4b06      	ldr	r3, [pc, #24]	; (d911c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9102:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9104:	4b06      	ldr	r3, [pc, #24]	; (d9120 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9106:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9108:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d910a:	a803      	add	r0, sp, #12
   d910c:	f7fd f9e4 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9110:	2200      	movs	r2, #0
   d9112:	4629      	mov	r1, r5
   d9114:	4803      	ldr	r0, [pc, #12]	; (d9124 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d9116:	f7ff fa4b 	bl	d85b0 <application_thread_invoke>
   d911a:	e7c7      	b.n	d90ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d911c:	000d8ceb 	.word	0x000d8ceb
   d9120:	000d8fdb 	.word	0x000d8fdb
   d9124:	000d889b 	.word	0x000d889b

000d9128 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9128:	2200      	movs	r2, #0
   d912a:	6840      	ldr	r0, [r0, #4]
   d912c:	4611      	mov	r1, r2
   d912e:	f7ff bb31 	b.w	d8794 <network_listening>

000d9132 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d9132:	2200      	movs	r2, #0
   d9134:	6840      	ldr	r0, [r0, #4]
   d9136:	4611      	mov	r1, r2
   d9138:	f7ff bb3c 	b.w	d87b4 <network_get_listen_timeout>

000d913c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d913c:	6840      	ldr	r0, [r0, #4]
   d913e:	2200      	movs	r2, #0
   d9140:	f7ff bb30 	b.w	d87a4 <network_set_listen_timeout>

000d9144 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9144:	6840      	ldr	r0, [r0, #4]
   d9146:	2200      	movs	r2, #0
   d9148:	f081 0101 	eor.w	r1, r1, #1
   d914c:	f7ff bb1a 	b.w	d8784 <network_listen>

000d9150 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9150:	2300      	movs	r3, #0
   d9152:	6840      	ldr	r0, [r0, #4]
   d9154:	461a      	mov	r2, r3
   d9156:	4619      	mov	r1, r3
   d9158:	f7ff bb0c 	b.w	d8774 <network_off>

000d915c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d915c:	2300      	movs	r3, #0
   d915e:	6840      	ldr	r0, [r0, #4]
   d9160:	461a      	mov	r2, r3
   d9162:	4619      	mov	r1, r3
   d9164:	f7ff bafe 	b.w	d8764 <network_on>

000d9168 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9168:	2200      	movs	r2, #0
   d916a:	6840      	ldr	r0, [r0, #4]
   d916c:	4611      	mov	r1, r2
   d916e:	f7ff baf1 	b.w	d8754 <network_ready>

000d9172 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9172:	2200      	movs	r2, #0
   d9174:	6840      	ldr	r0, [r0, #4]
   d9176:	4611      	mov	r1, r2
   d9178:	f7ff badc 	b.w	d8734 <network_connecting>

000d917c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d917c:	6840      	ldr	r0, [r0, #4]
   d917e:	2200      	movs	r2, #0
   d9180:	2102      	movs	r1, #2
   d9182:	f7ff badf 	b.w	d8744 <network_disconnect>

000d9186 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9186:	2300      	movs	r3, #0
   d9188:	6840      	ldr	r0, [r0, #4]
   d918a:	461a      	mov	r2, r3
   d918c:	f7ff baca 	b.w	d8724 <network_connect>

000d9190 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9190:	4b02      	ldr	r3, [pc, #8]	; (d919c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9192:	2203      	movs	r2, #3
   d9194:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9196:	4a02      	ldr	r2, [pc, #8]	; (d91a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9198:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d919a:	4770      	bx	lr
   d919c:	2003e61c 	.word	0x2003e61c
   d91a0:	000dba40 	.word	0x000dba40

000d91a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d91a4:	4770      	bx	lr

000d91a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d91a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91a8:	4606      	mov	r6, r0
   d91aa:	4615      	mov	r5, r2
   d91ac:	460c      	mov	r4, r1
   d91ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d91b0:	42bc      	cmp	r4, r7
   d91b2:	d006      	beq.n	d91c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d91b4:	6833      	ldr	r3, [r6, #0]
   d91b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d91ba:	689b      	ldr	r3, [r3, #8]
   d91bc:	4630      	mov	r0, r6
   d91be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d91c0:	e7f6      	b.n	d91b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d91c2:	4628      	mov	r0, r5
   d91c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d91c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d91c6:	7c00      	ldrb	r0, [r0, #16]
   d91c8:	2200      	movs	r2, #0
   d91ca:	f7ff b87f 	b.w	d82cc <hal_i2c_write>

000d91ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d91ce:	7c00      	ldrb	r0, [r0, #16]
   d91d0:	2100      	movs	r1, #0
   d91d2:	f7ff b883 	b.w	d82dc <hal_i2c_available>

000d91d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d91d6:	7c00      	ldrb	r0, [r0, #16]
   d91d8:	2100      	movs	r1, #0
   d91da:	f7ff b887 	b.w	d82ec <hal_i2c_read>

000d91de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d91de:	7c00      	ldrb	r0, [r0, #16]
   d91e0:	2100      	movs	r1, #0
   d91e2:	f7ff b88b 	b.w	d82fc <hal_i2c_peek>

000d91e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d91e6:	7c00      	ldrb	r0, [r0, #16]
   d91e8:	2100      	movs	r1, #0
   d91ea:	f7ff b88f 	b.w	d830c <hal_i2c_flush>

000d91ee <_ZN7TwoWireD0Ev>:
   d91ee:	b510      	push	{r4, lr}
   d91f0:	2114      	movs	r1, #20
   d91f2:	4604      	mov	r4, r0
   d91f4:	f001 f93d 	bl	da472 <_ZdlPvj>
   d91f8:	4620      	mov	r0, r4
   d91fa:	bd10      	pop	{r4, pc}

000d91fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d91fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d91fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9202:	4604      	mov	r4, r0
   d9204:	4608      	mov	r0, r1
   d9206:	2100      	movs	r1, #0
   d9208:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d920c:	4b03      	ldr	r3, [pc, #12]	; (d921c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d920e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9210:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9212:	4611      	mov	r1, r2
   d9214:	f7ff f88a 	bl	d832c <hal_i2c_init>
}
   d9218:	4620      	mov	r0, r4
   d921a:	bd10      	pop	{r4, pc}
   d921c:	000dba74 	.word	0x000dba74

000d9220 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9220:	2300      	movs	r3, #0
   d9222:	7c00      	ldrb	r0, [r0, #16]
   d9224:	461a      	mov	r2, r3
   d9226:	4619      	mov	r1, r3
   d9228:	f7ff b838 	b.w	d829c <hal_i2c_begin>

000d922c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d922c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d922e:	2200      	movs	r2, #0
   d9230:	2314      	movs	r3, #20
   d9232:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9236:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d923a:	780b      	ldrb	r3, [r1, #0]
   d923c:	f88d 3008 	strb.w	r3, [sp, #8]
   d9240:	684b      	ldr	r3, [r1, #4]
   d9242:	9303      	str	r3, [sp, #12]
   d9244:	68cb      	ldr	r3, [r1, #12]
   d9246:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9248:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d924a:	7a0b      	ldrb	r3, [r1, #8]
   d924c:	9305      	str	r3, [sp, #20]
   d924e:	a901      	add	r1, sp, #4
   d9250:	f7ff f884 	bl	d835c <hal_i2c_request_ex>
}
   d9254:	b007      	add	sp, #28
   d9256:	f85d fb04 	ldr.w	pc, [sp], #4

000d925a <_ZN7TwoWire11requestFromEhjh>:
{
   d925a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d925c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d925e:	f88d 1000 	strb.w	r1, [sp]
   d9262:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9266:	9103      	str	r1, [sp, #12]
   d9268:	bf18      	it	ne
   d926a:	2301      	movne	r3, #1
   d926c:	4669      	mov	r1, sp
    size_ = size;
   d926e:	9201      	str	r2, [sp, #4]
   d9270:	f88d 3008 	strb.w	r3, [sp, #8]
   d9274:	f7ff ffda 	bl	d922c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9278:	b005      	add	sp, #20
   d927a:	f85d fb04 	ldr.w	pc, [sp], #4

000d927e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d927e:	7c00      	ldrb	r0, [r0, #16]
   d9280:	2200      	movs	r2, #0
   d9282:	f7ff b813 	b.w	d82ac <hal_i2c_begin_transmission>

000d9286 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d9286:	b2c9      	uxtb	r1, r1
   d9288:	f7ff bff9 	b.w	d927e <_ZN7TwoWire17beginTransmissionEh>

000d928c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d928c:	7c00      	ldrb	r0, [r0, #16]
   d928e:	2200      	movs	r2, #0
   d9290:	f7ff b814 	b.w	d82bc <hal_i2c_end_transmission>

000d9294 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9294:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9296:	2100      	movs	r1, #0
   d9298:	7c00      	ldrb	r0, [r0, #16]
   d929a:	f7ff f84f 	bl	d833c <hal_i2c_lock>
}
   d929e:	fab0 f080 	clz	r0, r0
   d92a2:	0940      	lsrs	r0, r0, #5
   d92a4:	bd08      	pop	{r3, pc}

000d92a6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d92a6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d92a8:	2100      	movs	r1, #0
   d92aa:	7c00      	ldrb	r0, [r0, #16]
   d92ac:	f7ff f84e 	bl	d834c <hal_i2c_unlock>
}
   d92b0:	fab0 f080 	clz	r0, r0
   d92b4:	0940      	lsrs	r0, r0, #5
   d92b6:	bd08      	pop	{r3, pc}

000d92b8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d92b8:	f7fe bfe8 	b.w	d828c <HAL_Interrupts_Disable_All>

000d92bc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d92bc:	f7fe bfde 	b.w	d827c <HAL_Interrupts_Enable_All>

000d92c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d92c0:	4770      	bx	lr

000d92c2 <_ZN9IPAddressD0Ev>:
   d92c2:	b510      	push	{r4, lr}
   d92c4:	2118      	movs	r1, #24
   d92c6:	4604      	mov	r4, r0
   d92c8:	f001 f8d3 	bl	da472 <_ZdlPvj>
   d92cc:	4620      	mov	r0, r4
   d92ce:	bd10      	pop	{r4, pc}

000d92d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d92d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d92d2:	7d03      	ldrb	r3, [r0, #20]
   d92d4:	2b06      	cmp	r3, #6
{
   d92d6:	b08d      	sub	sp, #52	; 0x34
   d92d8:	460e      	mov	r6, r1
   d92da:	f100 0704 	add.w	r7, r0, #4
   d92de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d92e2:	d012      	beq.n	d930a <_ZNK9IPAddress7printToER5Print+0x3a>
   d92e4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d92e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d92ec:	220a      	movs	r2, #10
   d92ee:	4630      	mov	r0, r6
   d92f0:	f000 f943 	bl	d957a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d92f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d92f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d92f8:	d019      	beq.n	d932e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d92fa:	2c00      	cmp	r4, #0
   d92fc:	d0f4      	beq.n	d92e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d92fe:	212e      	movs	r1, #46	; 0x2e
   d9300:	4630      	mov	r0, r6
   d9302:	f000 f92b 	bl	d955c <_ZN5Print5printEc>
   d9306:	4404      	add	r4, r0
   d9308:	e7ee      	b.n	d92e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d930a:	232f      	movs	r3, #47	; 0x2f
   d930c:	466a      	mov	r2, sp
   d930e:	4639      	mov	r1, r7
   d9310:	200a      	movs	r0, #10
		buf[0] = 0;
   d9312:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9316:	f7ff f829 	bl	d836c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d931a:	4668      	mov	r0, sp
   d931c:	f001 fdf5 	bl	daf0a <strlen>
   d9320:	6833      	ldr	r3, [r6, #0]
   d9322:	4602      	mov	r2, r0
   d9324:	68db      	ldr	r3, [r3, #12]
   d9326:	4669      	mov	r1, sp
   d9328:	4630      	mov	r0, r6
   d932a:	4798      	blx	r3
   d932c:	4604      	mov	r4, r0
    }
    return n;
}
   d932e:	4620      	mov	r0, r4
   d9330:	b00d      	add	sp, #52	; 0x34
   d9332:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9334 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9334:	b510      	push	{r4, lr}
   d9336:	4b05      	ldr	r3, [pc, #20]	; (d934c <_ZN9IPAddressC1Ev+0x18>)
   d9338:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d933a:	2211      	movs	r2, #17
   d933c:	f840 3b04 	str.w	r3, [r0], #4
   d9340:	2100      	movs	r1, #0
   d9342:	f001 fd87 	bl	dae54 <memset>
}
   d9346:	4620      	mov	r0, r4
   d9348:	bd10      	pop	{r4, pc}
   d934a:	bf00      	nop
   d934c:	000dba9c 	.word	0x000dba9c

000d9350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9350:	4603      	mov	r3, r0
   d9352:	4a07      	ldr	r2, [pc, #28]	; (d9370 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9354:	b510      	push	{r4, lr}
   d9356:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d935a:	f101 0210 	add.w	r2, r1, #16
   d935e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9362:	f843 4b04 	str.w	r4, [r3], #4
   d9366:	4291      	cmp	r1, r2
   d9368:	d1f9      	bne.n	d935e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d936a:	780a      	ldrb	r2, [r1, #0]
   d936c:	701a      	strb	r2, [r3, #0]
}
   d936e:	bd10      	pop	{r4, pc}
   d9370:	000dba9c 	.word	0x000dba9c

000d9374 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9374:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9376:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d937a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d937e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9382:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9386:	2304      	movs	r3, #4
   d9388:	6041      	str	r1, [r0, #4]
   d938a:	7503      	strb	r3, [r0, #20]
}
   d938c:	bd10      	pop	{r4, pc}

000d938e <_ZN9IPAddressaSEPKh>:
{
   d938e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9390:	78cb      	ldrb	r3, [r1, #3]
   d9392:	9300      	str	r3, [sp, #0]
   d9394:	788b      	ldrb	r3, [r1, #2]
   d9396:	784a      	ldrb	r2, [r1, #1]
   d9398:	7809      	ldrb	r1, [r1, #0]
   d939a:	f7ff ffeb 	bl	d9374 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d939e:	b002      	add	sp, #8
   d93a0:	bd10      	pop	{r4, pc}
	...

000d93a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d93a4:	4b01      	ldr	r3, [pc, #4]	; (d93ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d93a6:	4a02      	ldr	r2, [pc, #8]	; (d93b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d93a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d93aa:	4770      	bx	lr
   d93ac:	2003e624 	.word	0x2003e624
   d93b0:	000dbaa8 	.word	0x000dbaa8

000d93b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d93b4:	2300      	movs	r3, #0
   d93b6:	6840      	ldr	r0, [r0, #4]
   d93b8:	461a      	mov	r2, r3
   d93ba:	f7ff b9b3 	b.w	d8724 <network_connect>

000d93be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d93be:	6840      	ldr	r0, [r0, #4]
   d93c0:	2200      	movs	r2, #0
   d93c2:	2102      	movs	r1, #2
   d93c4:	f7ff b9be 	b.w	d8744 <network_disconnect>

000d93c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d93c8:	2200      	movs	r2, #0
   d93ca:	6840      	ldr	r0, [r0, #4]
   d93cc:	4611      	mov	r1, r2
   d93ce:	f7ff b9b1 	b.w	d8734 <network_connecting>

000d93d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d93d2:	2200      	movs	r2, #0
   d93d4:	6840      	ldr	r0, [r0, #4]
   d93d6:	4611      	mov	r1, r2
   d93d8:	f7ff b9bc 	b.w	d8754 <network_ready>

000d93dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d93dc:	2300      	movs	r3, #0
   d93de:	6840      	ldr	r0, [r0, #4]
   d93e0:	461a      	mov	r2, r3
   d93e2:	4619      	mov	r1, r3
   d93e4:	f7ff b9be 	b.w	d8764 <network_on>

000d93e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d93e8:	2300      	movs	r3, #0
   d93ea:	6840      	ldr	r0, [r0, #4]
   d93ec:	461a      	mov	r2, r3
   d93ee:	4619      	mov	r1, r3
   d93f0:	f7ff b9c0 	b.w	d8774 <network_off>

000d93f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d93f4:	6840      	ldr	r0, [r0, #4]
   d93f6:	2200      	movs	r2, #0
   d93f8:	f081 0101 	eor.w	r1, r1, #1
   d93fc:	f7ff b9c2 	b.w	d8784 <network_listen>

000d9400 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9400:	6840      	ldr	r0, [r0, #4]
   d9402:	2200      	movs	r2, #0
   d9404:	f7ff b9ce 	b.w	d87a4 <network_set_listen_timeout>

000d9408 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9408:	2200      	movs	r2, #0
   d940a:	6840      	ldr	r0, [r0, #4]
   d940c:	4611      	mov	r1, r2
   d940e:	f7ff b9d1 	b.w	d87b4 <network_get_listen_timeout>

000d9412 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9412:	2200      	movs	r2, #0
   d9414:	6840      	ldr	r0, [r0, #4]
   d9416:	4611      	mov	r1, r2
   d9418:	f7ff b9bc 	b.w	d8794 <network_listening>

000d941c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d941c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9420:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9422:	b095      	sub	sp, #84	; 0x54
   d9424:	4616      	mov	r6, r2
   d9426:	460d      	mov	r5, r1
   d9428:	4607      	mov	r7, r0
    IPAddress addr;
   d942a:	f7ff ff83 	bl	d9334 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d942e:	4621      	mov	r1, r4
   d9430:	2218      	movs	r2, #24
   d9432:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9434:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9436:	f001 fd0d 	bl	dae54 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d943a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d943c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9440:	4621      	mov	r1, r4
   d9442:	466b      	mov	r3, sp
   d9444:	aa0c      	add	r2, sp, #48	; 0x30
   d9446:	4630      	mov	r0, r6
   d9448:	f7fe ffa0 	bl	d838c <netdb_getaddrinfo>
    if (!r) {
   d944c:	4604      	mov	r4, r0
   d944e:	2800      	cmp	r0, #0
   d9450:	d146      	bne.n	d94e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9452:	4602      	mov	r2, r0
   d9454:	2101      	movs	r1, #1
   d9456:	6868      	ldr	r0, [r5, #4]
   d9458:	f7ff f97c 	bl	d8754 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d945c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d945e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9460:	4622      	mov	r2, r4
   d9462:	6868      	ldr	r0, [r5, #4]
   d9464:	f7ff f976 	bl	d8754 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9468:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d946a:	4681      	mov	r9, r0
        bool ok = false;
   d946c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d946e:	2e00      	cmp	r6, #0
   d9470:	d036      	beq.n	d94e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9472:	2900      	cmp	r1, #0
   d9474:	d134      	bne.n	d94e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9476:	6873      	ldr	r3, [r6, #4]
   d9478:	2b02      	cmp	r3, #2
   d947a:	d003      	beq.n	d9484 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d947c:	2b0a      	cmp	r3, #10
   d947e:	d00b      	beq.n	d9498 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9480:	69f6      	ldr	r6, [r6, #28]
   d9482:	e7f4      	b.n	d946e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9484:	f1b8 0f00 	cmp.w	r8, #0
   d9488:	d004      	beq.n	d9494 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d948a:	6971      	ldr	r1, [r6, #20]
   d948c:	4638      	mov	r0, r7
   d948e:	3104      	adds	r1, #4
   d9490:	f7ff ff7d 	bl	d938e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9494:	4641      	mov	r1, r8
   d9496:	e7f3      	b.n	d9480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9498:	f1b9 0f00 	cmp.w	r9, #0
   d949c:	d101      	bne.n	d94a2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d949e:	4649      	mov	r1, r9
   d94a0:	e7ee      	b.n	d9480 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d94a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d94a4:	2210      	movs	r2, #16
   d94a6:	a801      	add	r0, sp, #4
   d94a8:	f001 fcd4 	bl	dae54 <memset>
                    a.v = 6;
   d94ac:	2306      	movs	r3, #6
   d94ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d94b2:	ad01      	add	r5, sp, #4
   d94b4:	f104 0308 	add.w	r3, r4, #8
   d94b8:	3418      	adds	r4, #24
   d94ba:	6818      	ldr	r0, [r3, #0]
   d94bc:	6859      	ldr	r1, [r3, #4]
   d94be:	462a      	mov	r2, r5
   d94c0:	c203      	stmia	r2!, {r0, r1}
   d94c2:	3308      	adds	r3, #8
   d94c4:	42a3      	cmp	r3, r4
   d94c6:	4615      	mov	r5, r2
   d94c8:	d1f7      	bne.n	d94ba <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d94ca:	a901      	add	r1, sp, #4
   d94cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d94ce:	ad07      	add	r5, sp, #28
   d94d0:	f7ff ff3e 	bl	d9350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d94d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d94d6:	1d3c      	adds	r4, r7, #4
   d94d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d94da:	682b      	ldr	r3, [r5, #0]
   d94dc:	7023      	strb	r3, [r4, #0]
   d94de:	e7de      	b.n	d949e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d94e0:	9800      	ldr	r0, [sp, #0]
   d94e2:	f7fe ff4b 	bl	d837c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d94e6:	4638      	mov	r0, r7
   d94e8:	b015      	add	sp, #84	; 0x54
   d94ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d94f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d94f0:	4b02      	ldr	r3, [pc, #8]	; (d94fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d94f2:	4a03      	ldr	r2, [pc, #12]	; (d9500 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d94f4:	601a      	str	r2, [r3, #0]
   d94f6:	2200      	movs	r2, #0
   d94f8:	605a      	str	r2, [r3, #4]

} // spark
   d94fa:	4770      	bx	lr
   d94fc:	2003e628 	.word	0x2003e628
   d9500:	000dbab4 	.word	0x000dbab4

000d9504 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9506:	4606      	mov	r6, r0
   d9508:	460d      	mov	r5, r1
  size_t n = 0;
   d950a:	188f      	adds	r7, r1, r2
   d950c:	2400      	movs	r4, #0
  while (size--) {
   d950e:	42bd      	cmp	r5, r7
   d9510:	d00c      	beq.n	d952c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9512:	6833      	ldr	r3, [r6, #0]
   d9514:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9518:	689b      	ldr	r3, [r3, #8]
   d951a:	4630      	mov	r0, r6
   d951c:	4798      	blx	r3
     if (chunk>=0)
   d951e:	1e03      	subs	r3, r0, #0
   d9520:	db01      	blt.n	d9526 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9522:	441c      	add	r4, r3
  while (size--) {
   d9524:	e7f3      	b.n	d950e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9526:	2c00      	cmp	r4, #0
   d9528:	bf08      	it	eq
   d952a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d952c:	4620      	mov	r0, r4
   d952e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9530 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9530:	b513      	push	{r0, r1, r4, lr}
   d9532:	4604      	mov	r4, r0
    }
   d9534:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9536:	b159      	cbz	r1, d9550 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9538:	9101      	str	r1, [sp, #4]
   d953a:	f001 fce6 	bl	daf0a <strlen>
   d953e:	6823      	ldr	r3, [r4, #0]
   d9540:	9901      	ldr	r1, [sp, #4]
   d9542:	68db      	ldr	r3, [r3, #12]
   d9544:	4602      	mov	r2, r0
   d9546:	4620      	mov	r0, r4
    }
   d9548:	b002      	add	sp, #8
   d954a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d954e:	4718      	bx	r3
    }
   d9550:	b002      	add	sp, #8
   d9552:	bd10      	pop	{r4, pc}

000d9554 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9554:	b508      	push	{r3, lr}
  return write(str);
   d9556:	f7ff ffeb 	bl	d9530 <_ZN5Print5writeEPKc>
}
   d955a:	bd08      	pop	{r3, pc}

000d955c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d955c:	6803      	ldr	r3, [r0, #0]
   d955e:	689b      	ldr	r3, [r3, #8]
   d9560:	4718      	bx	r3

000d9562 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9562:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9564:	210d      	movs	r1, #13
{
   d9566:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9568:	f7ff fff8 	bl	d955c <_ZN5Print5printEc>
  n += print('\n');
   d956c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d956e:	4604      	mov	r4, r0
  n += print('\n');
   d9570:	4628      	mov	r0, r5
   d9572:	f7ff fff3 	bl	d955c <_ZN5Print5printEc>
  return n;
}
   d9576:	4420      	add	r0, r4
   d9578:	bd38      	pop	{r3, r4, r5, pc}

000d957a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d957a:	b530      	push	{r4, r5, lr}
   d957c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d957e:	2300      	movs	r3, #0
   d9580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9584:	2a01      	cmp	r2, #1
   d9586:	bf98      	it	ls
   d9588:	220a      	movls	r2, #10
   d958a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d958c:	460d      	mov	r5, r1
   d958e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9592:	fb01 5312 	mls	r3, r1, r2, r5
   d9596:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d959a:	2b09      	cmp	r3, #9
   d959c:	bf94      	ite	ls
   d959e:	3330      	addls	r3, #48	; 0x30
   d95a0:	3337      	addhi	r3, #55	; 0x37
   d95a2:	b2db      	uxtb	r3, r3
  } while(n);
   d95a4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d95a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d95aa:	d9ef      	bls.n	d958c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d95ac:	4621      	mov	r1, r4
   d95ae:	f7ff ffbf 	bl	d9530 <_ZN5Print5writeEPKc>
}
   d95b2:	b00b      	add	sp, #44	; 0x2c
   d95b4:	bd30      	pop	{r4, r5, pc}

000d95b6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d95b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95ba:	b086      	sub	sp, #24
   d95bc:	af00      	add	r7, sp, #0
   d95be:	4605      	mov	r5, r0
   d95c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d95c2:	1d38      	adds	r0, r7, #4
   d95c4:	2114      	movs	r1, #20
{
   d95c6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d95c8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d95ca:	f7ff f923 	bl	d8814 <vsnprintf>

    if (n<bufsize)
   d95ce:	2813      	cmp	r0, #19
   d95d0:	d80e      	bhi.n	d95f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d95d2:	1d39      	adds	r1, r7, #4
   d95d4:	4628      	mov	r0, r5
   d95d6:	f7ff ffab 	bl	d9530 <_ZN5Print5writeEPKc>
   d95da:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d95dc:	b11e      	cbz	r6, d95e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d95de:	4628      	mov	r0, r5
   d95e0:	f7ff ffbf 	bl	d9562 <_ZN5Print7printlnEv>
   d95e4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d95e6:	4620      	mov	r0, r4
   d95e8:	3718      	adds	r7, #24
   d95ea:	46bd      	mov	sp, r7
   d95ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d95f0:	f100 0308 	add.w	r3, r0, #8
   d95f4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d95f8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d95fa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d95fe:	4622      	mov	r2, r4
   d9600:	1c41      	adds	r1, r0, #1
   d9602:	683b      	ldr	r3, [r7, #0]
   d9604:	4668      	mov	r0, sp
   d9606:	f7ff f905 	bl	d8814 <vsnprintf>
  return write(str);
   d960a:	4669      	mov	r1, sp
   d960c:	4628      	mov	r0, r5
   d960e:	f7ff ff8f 	bl	d9530 <_ZN5Print5writeEPKc>
   d9612:	4604      	mov	r4, r0
   d9614:	46c5      	mov	sp, r8
   d9616:	e7e1      	b.n	d95dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9618 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9618:	b510      	push	{r4, lr}
   d961a:	4604      	mov	r4, r0
   d961c:	f7fc ff5c 	bl	d64d8 <_ZNSt14_Function_baseD1Ev>
   d9620:	4620      	mov	r0, r4
   d9622:	bd10      	pop	{r4, pc}

000d9624 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9624:	4803      	ldr	r0, [pc, #12]	; (d9634 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d9626:	4a04      	ldr	r2, [pc, #16]	; (d9638 <_GLOBAL__sub_I_RGB+0x14>)
   d9628:	4904      	ldr	r1, [pc, #16]	; (d963c <_GLOBAL__sub_I_RGB+0x18>)
   d962a:	2300      	movs	r3, #0
   d962c:	6083      	str	r3, [r0, #8]
   d962e:	f000 bf1b 	b.w	da468 <__aeabi_atexit>
   d9632:	bf00      	nop
   d9634:	2003e630 	.word	0x2003e630
   d9638:	2003e200 	.word	0x2003e200
   d963c:	000d9619 	.word	0x000d9619

000d9640 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9640:	2100      	movs	r1, #0
   d9642:	f7fe bedb 	b.w	d83fc <hal_spi_acquire>

000d9646 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9646:	2100      	movs	r1, #0
   d9648:	f7fe bee0 	b.w	d840c <hal_spi_release>

000d964c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d964c:	b510      	push	{r4, lr}
   d964e:	4604      	mov	r4, r0
   d9650:	4608      	mov	r0, r1
{
    _spi = spi;
   d9652:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9654:	f7fe feb2 	bl	d83bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9658:	2300      	movs	r3, #0
   d965a:	6063      	str	r3, [r4, #4]
}
   d965c:	4620      	mov	r0, r4
   d965e:	bd10      	pop	{r4, pc}

000d9660 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9660:	b513      	push	{r0, r1, r4, lr}
   d9662:	4604      	mov	r4, r0
    if (!lock())
   d9664:	7800      	ldrb	r0, [r0, #0]
{
   d9666:	9101      	str	r1, [sp, #4]
    if (!lock())
   d9668:	f7ff ffea 	bl	d9640 <_ZN8SPIClass4lockEv.isra.0>
   d966c:	9901      	ldr	r1, [sp, #4]
   d966e:	b940      	cbnz	r0, d9682 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d9670:	7820      	ldrb	r0, [r4, #0]
   d9672:	f7fe fe93 	bl	d839c <hal_spi_begin>
        unlock();
   d9676:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9678:	b002      	add	sp, #8
   d967a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d967e:	f7ff bfe2 	b.w	d9646 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9682:	b002      	add	sp, #8
   d9684:	bd10      	pop	{r4, pc}

000d9686 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9686:	7800      	ldrb	r0, [r0, #0]
   d9688:	f7ff bfdd 	b.w	d9646 <_ZN8SPIClass6unlockEv.isra.0>

000d968c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d968c:	0840      	lsrs	r0, r0, #1
{
   d968e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9690:	6018      	str	r0, [r3, #0]
   d9692:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9694:	6818      	ldr	r0, [r3, #0]
   d9696:	4288      	cmp	r0, r1
   d9698:	b2e5      	uxtb	r5, r4
   d969a:	d906      	bls.n	d96aa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d969c:	3401      	adds	r4, #1
   d969e:	2c08      	cmp	r4, #8
   d96a0:	d002      	beq.n	d96a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d96a2:	0840      	lsrs	r0, r0, #1
   d96a4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d96a6:	e7f5      	b.n	d9694 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d96a8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d96aa:	4b02      	ldr	r3, [pc, #8]	; (d96b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d96ac:	5d5b      	ldrb	r3, [r3, r5]
   d96ae:	7013      	strb	r3, [r2, #0]
}
   d96b0:	bd30      	pop	{r4, r5, pc}
   d96b2:	bf00      	nop
   d96b4:	000dbae0 	.word	0x000dbae0

000d96b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d96b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d96bc:	4606      	mov	r6, r0
   d96be:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d96c0:	7800      	ldrb	r0, [r0, #0]
{
   d96c2:	460d      	mov	r5, r1
    CHECK(lock());
   d96c4:	f7ff ffbc 	bl	d9640 <_ZN8SPIClass4lockEv.isra.0>
   d96c8:	2800      	cmp	r0, #0
   d96ca:	db1b      	blt.n	d9704 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d96cc:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d96ce:	2214      	movs	r2, #20
   d96d0:	2100      	movs	r1, #0
   d96d2:	a809      	add	r0, sp, #36	; 0x24
   d96d4:	f001 fbbe 	bl	dae54 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d96d8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d96da:	2200      	movs	r2, #0
   d96dc:	a909      	add	r1, sp, #36	; 0x24
   d96de:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d96e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d96e4:	f7fe fe7a 	bl	d83dc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d96e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d96ec:	b113      	cbz	r3, d96f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d96ee:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d96f2:	b154      	cbz	r4, d970a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d96f4:	2700      	movs	r7, #0
   d96f6:	46b9      	mov	r9, r7
   d96f8:	46b8      	mov	r8, r7
   d96fa:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d96fc:	792b      	ldrb	r3, [r5, #4]
   d96fe:	b15c      	cbz	r4, d9718 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9700:	b1c3      	cbz	r3, d9734 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9702:	2000      	movs	r0, #0
}
   d9704:	b00f      	add	sp, #60	; 0x3c
   d9706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d970a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d970e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9712:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9716:	e7f1      	b.n	d96fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9718:	2b00      	cmp	r3, #0
   d971a:	d135      	bne.n	d9788 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d971c:	68ab      	ldr	r3, [r5, #8]
   d971e:	4543      	cmp	r3, r8
   d9720:	d108      	bne.n	d9734 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9722:	f88d 9020 	strb.w	r9, [sp, #32]
   d9726:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d972a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d972e:	89ab      	ldrh	r3, [r5, #12]
   d9730:	429a      	cmp	r2, r3
   d9732:	d0e6      	beq.n	d9702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9734:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9736:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d9738:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d973c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d973e:	ab04      	add	r3, sp, #16
   d9740:	f10d 020f 	add.w	r2, sp, #15
   d9744:	f7ff ffa2 	bl	d968c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9748:	7929      	ldrb	r1, [r5, #4]
   d974a:	b984      	cbnz	r4, d976e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d974c:	b989      	cbnz	r1, d9772 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d974e:	68ab      	ldr	r3, [r5, #8]
   d9750:	4543      	cmp	r3, r8
   d9752:	d30e      	bcc.n	d9772 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9754:	f88d 9020 	strb.w	r9, [sp, #32]
   d9758:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d975c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9760:	89ab      	ldrh	r3, [r5, #12]
   d9762:	429a      	cmp	r2, r3
   d9764:	d105      	bne.n	d9772 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9766:	9b04      	ldr	r3, [sp, #16]
   d9768:	4543      	cmp	r3, r8
   d976a:	d102      	bne.n	d9772 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d976c:	e7c9      	b.n	d9702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d976e:	2900      	cmp	r1, #0
   d9770:	d1f9      	bne.n	d9766 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9772:	2300      	movs	r3, #0
   d9774:	9301      	str	r3, [sp, #4]
   d9776:	7b6b      	ldrb	r3, [r5, #13]
   d9778:	9300      	str	r3, [sp, #0]
   d977a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d977e:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9780:	7830      	ldrb	r0, [r6, #0]
   d9782:	f7fe fe33 	bl	d83ec <hal_spi_set_settings>
   d9786:	e7bc      	b.n	d9702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9788:	e9cd 4400 	strd	r4, r4, [sp]
   d978c:	4623      	mov	r3, r4
   d978e:	4622      	mov	r2, r4
   d9790:	2101      	movs	r1, #1
   d9792:	e7f5      	b.n	d9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9794 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9794:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9796:	7800      	ldrb	r0, [r0, #0]
   d9798:	f7fe fe08 	bl	d83ac <hal_spi_transfer>
}
   d979c:	b2c0      	uxtb	r0, r0
   d979e:	bd08      	pop	{r3, pc}

000d97a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d97a0:	b510      	push	{r4, lr}
   d97a2:	4604      	mov	r4, r0
{
	free(buffer);
   d97a4:	6800      	ldr	r0, [r0, #0]
   d97a6:	f7ff f815 	bl	d87d4 <free>
}
   d97aa:	4620      	mov	r0, r4
   d97ac:	bd10      	pop	{r4, pc}

000d97ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d97ae:	b510      	push	{r4, lr}
   d97b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d97b2:	6800      	ldr	r0, [r0, #0]
   d97b4:	b108      	cbz	r0, d97ba <_ZN6String10invalidateEv+0xc>
   d97b6:	f7ff f80d 	bl	d87d4 <free>
	buffer = NULL;
   d97ba:	2300      	movs	r3, #0
	capacity = len = 0;
   d97bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d97c0:	6023      	str	r3, [r4, #0]
}
   d97c2:	bd10      	pop	{r4, pc}

000d97c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d97c4:	b538      	push	{r3, r4, r5, lr}
   d97c6:	4604      	mov	r4, r0
   d97c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d97ca:	6800      	ldr	r0, [r0, #0]
   d97cc:	3101      	adds	r1, #1
   d97ce:	f7ff f809 	bl	d87e4 <realloc>
	if (newbuffer) {
   d97d2:	b110      	cbz	r0, d97da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d97d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d97d8:	2001      	movs	r0, #1
	}
	return 0;
}
   d97da:	bd38      	pop	{r3, r4, r5, pc}

000d97dc <_ZN6String7reserveEj>:
{
   d97dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d97de:	6803      	ldr	r3, [r0, #0]
{
   d97e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d97e2:	b123      	cbz	r3, d97ee <_ZN6String7reserveEj+0x12>
   d97e4:	6843      	ldr	r3, [r0, #4]
   d97e6:	428b      	cmp	r3, r1
   d97e8:	d301      	bcc.n	d97ee <_ZN6String7reserveEj+0x12>
   d97ea:	2001      	movs	r0, #1
}
   d97ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d97ee:	4620      	mov	r0, r4
   d97f0:	f7ff ffe8 	bl	d97c4 <_ZN6String12changeBufferEj>
   d97f4:	2800      	cmp	r0, #0
   d97f6:	d0f9      	beq.n	d97ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d97f8:	68a3      	ldr	r3, [r4, #8]
   d97fa:	2b00      	cmp	r3, #0
   d97fc:	d1f5      	bne.n	d97ea <_ZN6String7reserveEj+0xe>
   d97fe:	6822      	ldr	r2, [r4, #0]
   d9800:	7013      	strb	r3, [r2, #0]
   d9802:	e7f2      	b.n	d97ea <_ZN6String7reserveEj+0xe>

000d9804 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9806:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9808:	4611      	mov	r1, r2
   d980a:	9201      	str	r2, [sp, #4]
{
   d980c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d980e:	f7ff ffe5 	bl	d97dc <_ZN6String7reserveEj>
   d9812:	9a01      	ldr	r2, [sp, #4]
   d9814:	b928      	cbnz	r0, d9822 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9816:	4620      	mov	r0, r4
   d9818:	f7ff ffc9 	bl	d97ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d981c:	4620      	mov	r0, r4
   d981e:	b003      	add	sp, #12
   d9820:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9822:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9824:	4629      	mov	r1, r5
   d9826:	6820      	ldr	r0, [r4, #0]
   d9828:	f001 faec 	bl	dae04 <memcpy>
	buffer[len] = 0;
   d982c:	6822      	ldr	r2, [r4, #0]
   d982e:	68a3      	ldr	r3, [r4, #8]
   d9830:	2100      	movs	r1, #0
   d9832:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9834:	e7f2      	b.n	d981c <_ZN6String4copyEPKcj+0x18>

000d9836 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9836:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9838:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d983a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d983e:	4604      	mov	r4, r0
	len = 0;
   d9840:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9842:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9844:	b141      	cbz	r1, d9858 <_ZN6StringC1EPKc+0x22>
   d9846:	4608      	mov	r0, r1
   d9848:	9101      	str	r1, [sp, #4]
   d984a:	f001 fb5e 	bl	daf0a <strlen>
   d984e:	9901      	ldr	r1, [sp, #4]
   d9850:	4602      	mov	r2, r0
   d9852:	4620      	mov	r0, r4
   d9854:	f7ff ffd6 	bl	d9804 <_ZN6String4copyEPKcj>
}
   d9858:	4620      	mov	r0, r4
   d985a:	b002      	add	sp, #8
   d985c:	bd10      	pop	{r4, pc}

000d985e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d985e:	4288      	cmp	r0, r1
{
   d9860:	b510      	push	{r4, lr}
   d9862:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9864:	d005      	beq.n	d9872 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9866:	680b      	ldr	r3, [r1, #0]
   d9868:	b12b      	cbz	r3, d9876 <_ZN6StringaSERKS_+0x18>
   d986a:	688a      	ldr	r2, [r1, #8]
   d986c:	4619      	mov	r1, r3
   d986e:	f7ff ffc9 	bl	d9804 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9872:	4620      	mov	r0, r4
   d9874:	bd10      	pop	{r4, pc}
	else invalidate();
   d9876:	f7ff ff9a 	bl	d97ae <_ZN6String10invalidateEv>
   d987a:	e7fa      	b.n	d9872 <_ZN6StringaSERKS_+0x14>

000d987c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d987c:	b510      	push	{r4, lr}
	buffer = NULL;
   d987e:	2300      	movs	r3, #0
String::String(const String &value)
   d9880:	4604      	mov	r4, r0
	capacity = 0;
   d9882:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9886:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9888:	7303      	strb	r3, [r0, #12]
	*this = value;
   d988a:	f7ff ffe8 	bl	d985e <_ZN6StringaSERKS_>
}
   d988e:	4620      	mov	r0, r4
   d9890:	bd10      	pop	{r4, pc}

000d9892 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9892:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9894:	6882      	ldr	r2, [r0, #8]
   d9896:	b93a      	cbnz	r2, d98a8 <_ZNK6String6equalsEPKc+0x16>
   d9898:	b121      	cbz	r1, d98a4 <_ZNK6String6equalsEPKc+0x12>
   d989a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d989c:	fab0 f080 	clz	r0, r0
   d98a0:	0940      	lsrs	r0, r0, #5
   d98a2:	e000      	b.n	d98a6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d98a4:	2001      	movs	r0, #1
}
   d98a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d98a8:	6800      	ldr	r0, [r0, #0]
   d98aa:	b909      	cbnz	r1, d98b0 <_ZNK6String6equalsEPKc+0x1e>
   d98ac:	7800      	ldrb	r0, [r0, #0]
   d98ae:	e7f5      	b.n	d989c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d98b0:	f001 fafc 	bl	daeac <strcmp>
   d98b4:	e7f2      	b.n	d989c <_ZNK6String6equalsEPKc+0xa>

000d98b6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d98b6:	b558      	push	{r3, r4, r6, lr}
   d98b8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d98ba:	b12a      	cbz	r2, d98c8 <_ZNK6String8getBytesEPhjj+0x12>
   d98bc:	b121      	cbz	r1, d98c8 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d98be:	6884      	ldr	r4, [r0, #8]
   d98c0:	429c      	cmp	r4, r3
   d98c2:	d802      	bhi.n	d98ca <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d98c4:	2300      	movs	r3, #0
   d98c6:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d98c8:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d98ca:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d98cc:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d98ce:	6801      	ldr	r1, [r0, #0]
   d98d0:	4294      	cmp	r4, r2
   d98d2:	bf28      	it	cs
   d98d4:	4614      	movcs	r4, r2
   d98d6:	4419      	add	r1, r3
   d98d8:	4622      	mov	r2, r4
   d98da:	4630      	mov	r0, r6
   d98dc:	f001 fb1d 	bl	daf1a <strncpy>
	buf[n] = 0;
   d98e0:	2300      	movs	r3, #0
   d98e2:	5533      	strb	r3, [r6, r4]
   d98e4:	e7f0      	b.n	d98c8 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d98e8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d98e8:	b40e      	push	{r1, r2, r3}
   d98ea:	b570      	push	{r4, r5, r6, lr}
   d98ec:	b087      	sub	sp, #28
   d98ee:	ad0b      	add	r5, sp, #44	; 0x2c
   d98f0:	4604      	mov	r4, r0
   d98f2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d98f6:	9201      	str	r2, [sp, #4]
   d98f8:	462b      	mov	r3, r5
   d98fa:	2105      	movs	r1, #5
   d98fc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d98fe:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9900:	f7fe ff88 	bl	d8814 <vsnprintf>
    va_end(marker);

    String result;
   d9904:	490b      	ldr	r1, [pc, #44]	; (d9934 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9906:	4606      	mov	r6, r0
    String result;
   d9908:	4620      	mov	r0, r4
   d990a:	f7ff ff94 	bl	d9836 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d990e:	4631      	mov	r1, r6
   d9910:	4620      	mov	r0, r4
   d9912:	f7ff ff63 	bl	d97dc <_ZN6String7reserveEj>
    if (result.buffer) {
   d9916:	6820      	ldr	r0, [r4, #0]
   d9918:	b130      	cbz	r0, d9928 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d991a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d991c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d991e:	462b      	mov	r3, r5
   d9920:	1c71      	adds	r1, r6, #1
   d9922:	f7fe ff77 	bl	d8814 <vsnprintf>
        va_end(marker);
        result.len = n;
   d9926:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d9928:	4620      	mov	r0, r4
   d992a:	b007      	add	sp, #28
   d992c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9930:	b003      	add	sp, #12
   d9932:	4770      	bx	lr
   d9934:	000db2ce 	.word	0x000db2ce

000d9938 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9938:	b510      	push	{r4, lr}
   d993a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d993c:	6800      	ldr	r0, [r0, #0]
   d993e:	b118      	cbz	r0, d9948 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d9940:	f7fe ff48 	bl	d87d4 <free>
            wakeupSource_ = nullptr;
   d9944:	2300      	movs	r3, #0
   d9946:	6023      	str	r3, [r4, #0]
        }
    }
   d9948:	bd10      	pop	{r4, pc}

000d994a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d994a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d994c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9950:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d9952:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9954:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d9956:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d995a:	f8c0 2006 	str.w	r2, [r0, #6]
   d995e:	889b      	ldrh	r3, [r3, #4]
   d9960:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9962:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d9964:	f7ff ffe8 	bl	d9938 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d9968:	682b      	ldr	r3, [r5, #0]
   d996a:	b113      	cbz	r3, d9972 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d996c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d996e:	2300      	movs	r3, #0
   d9970:	602b      	str	r3, [r5, #0]
    }
   d9972:	4620      	mov	r0, r4
   d9974:	bd38      	pop	{r3, r4, r5, pc}

000d9976 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d9976:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d997a:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d997c:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d997e:	b933      	cbnz	r3, d998e <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d9980:	b932      	cbnz	r2, d9990 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d9982:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d9986:	6003      	str	r3, [r0, #0]
   d9988:	888b      	ldrh	r3, [r1, #4]
   d998a:	8083      	strh	r3, [r0, #4]
    }
   d998c:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d998e:	b122      	cbz	r2, d999a <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d9990:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d9992:	2c01      	cmp	r4, #1
   d9994:	d003      	beq.n	d999e <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d9996:	2c04      	cmp	r4, #4
   d9998:	d006      	beq.n	d99a8 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d999a:	2204      	movs	r2, #4
   d999c:	e005      	b.n	d99aa <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d999e:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d99a0:	814a      	strh	r2, [r1, #10]
   d99a2:	718c      	strb	r4, [r1, #6]
   d99a4:	810b      	strh	r3, [r1, #8]
                    break;
   d99a6:	e7ec      	b.n	d9982 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d99a8:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d99aa:	810b      	strh	r3, [r1, #8]
   d99ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d99b0:	718a      	strb	r2, [r1, #6]
   d99b2:	814b      	strh	r3, [r1, #10]
                    break;
   d99b4:	e7e5      	b.n	d9982 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000d99b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d99b8:	b538      	push	{r3, r4, r5, lr}
   d99ba:	460c      	mov	r4, r1
   d99bc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d99be:	f7ff ffbb 	bl	d9938 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d99c2:	b144      	cbz	r4, d99d6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d99c4:	8820      	ldrh	r0, [r4, #0]
   d99c6:	f7fe fefd 	bl	d87c4 <malloc>
   d99ca:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d99cc:	b128      	cbz	r0, d99da <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d99ce:	8822      	ldrh	r2, [r4, #0]
   d99d0:	4621      	mov	r1, r4
   d99d2:	f001 fa17 	bl	dae04 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d99d6:	2000      	movs	r0, #0
    }
   d99d8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d99da:	4801      	ldr	r0, [pc, #4]	; (d99e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d99dc:	e7fc      	b.n	d99d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d99de:	bf00      	nop
   d99e0:	fffffefc 	.word	0xfffffefc

000d99e4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d99e4:	b507      	push	{r0, r1, r2, lr}
   d99e6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d99e8:	2100      	movs	r1, #0
{
   d99ea:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d99ec:	9100      	str	r1, [sp, #0]
   d99ee:	2001      	movs	r0, #1
   d99f0:	218c      	movs	r1, #140	; 0x8c
   d99f2:	f7fe fe1d 	bl	d8630 <system_reset>
}
   d99f6:	b003      	add	sp, #12
   d99f8:	f85d fb04 	ldr.w	pc, [sp], #4

000d99fc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d99fc:	4601      	mov	r1, r0
    reset(0, flags);
   d99fe:	2000      	movs	r0, #0
   d9a00:	f7ff bff0 	b.w	d99e4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d9a04 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d9a04:	2000      	movs	r0, #0
   d9a06:	f7ff bff9 	b.w	d99fc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9a0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d9a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a0e:	4d2d      	ldr	r5, [pc, #180]	; (d9ac4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d9a10:	7d0b      	ldrb	r3, [r1, #20]
   d9a12:	4604      	mov	r4, r0
   d9a14:	b08b      	sub	sp, #44	; 0x2c
   d9a16:	4608      	mov	r0, r1
   d9a18:	1daf      	adds	r7, r5, #6
   d9a1a:	2b00      	cmp	r3, #0
   d9a1c:	d038      	beq.n	d9a90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d9a1e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d9a20:	791b      	ldrb	r3, [r3, #4]
   d9a22:	2b00      	cmp	r3, #0
   d9a24:	d034      	beq.n	d9a90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d9a26:	2200      	movs	r2, #0
    SleepResult() {}
   d9a28:	4b27      	ldr	r3, [pc, #156]	; (d9ac8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9a2a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d9a2c:	a902      	add	r1, sp, #8
   d9a2e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d9a30:	9202      	str	r2, [sp, #8]
   d9a32:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d9a36:	f88d 200e 	strb.w	r2, [sp, #14]
   d9a3a:	f7fe fdef 	bl	d861c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d9a3e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d9a42:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d9a46:	b200      	sxth	r0, r0
   d9a48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d9a4c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d9a50:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a52:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d9a54:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a56:	4628      	mov	r0, r5
   d9a58:	f7ff ffae 	bl	d99b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d9a5c:	a802      	add	r0, sp, #8
   d9a5e:	f7ff ff6b 	bl	d9938 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d9a62:	2300      	movs	r3, #0
   d9a64:	6023      	str	r3, [r4, #0]
   d9a66:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d9a68:	71a3      	strb	r3, [r4, #6]
   d9a6a:	8123      	strh	r3, [r4, #8]
   d9a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9a70:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d9a72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d9a76:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d9a78:	683b      	ldr	r3, [r7, #0]
   d9a7a:	f8c4 3006 	str.w	r3, [r4, #6]
   d9a7e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a80:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d9a82:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d9a84:	4620      	mov	r0, r4
   d9a86:	f7ff ff97 	bl	d99b8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d9a8a:	4620      	mov	r0, r4
   d9a8c:	b00b      	add	sp, #44	; 0x2c
   d9a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d9a90:	2600      	movs	r6, #0
   d9a92:	2320      	movs	r3, #32
   d9a94:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d9a98:	4b0c      	ldr	r3, [pc, #48]	; (d9acc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d9a9a:	9300      	str	r3, [sp, #0]
   d9a9c:	490c      	ldr	r1, [pc, #48]	; (d9ad0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d9a9e:	4633      	mov	r3, r6
   d9aa0:	aa02      	add	r2, sp, #8
   d9aa2:	2032      	movs	r0, #50	; 0x32
   d9aa4:	f7fe fd32 	bl	d850c <log_message>
    SleepResult() {}
   d9aa8:	4b07      	ldr	r3, [pc, #28]	; (d9ac8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9aaa:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d9aac:	a902      	add	r1, sp, #8
        error_ = error;
   d9aae:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d9ab2:	4804      	ldr	r0, [pc, #16]	; (d9ac4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d9ab4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d9ab6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d9aba:	f8ad 300c 	strh.w	r3, [sp, #12]
   d9abe:	f7ff ff44 	bl	d994a <_ZN17SystemSleepResultaSEOS_>
   d9ac2:	e7cb      	b.n	d9a5c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d9ac4:	2003e640 	.word	0x2003e640
   d9ac8:	ffff0000 	.word	0xffff0000
   d9acc:	000dbaef 	.word	0x000dbaef
   d9ad0:	000dbae8 	.word	0x000dbae8

000d9ad4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9ad4:	b530      	push	{r4, r5, lr}
   d9ad6:	4604      	mov	r4, r0
   d9ad8:	b085      	sub	sp, #20
   d9ada:	4608      	mov	r0, r1
   d9adc:	4611      	mov	r1, r2
   d9ade:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9ae0:	2300      	movs	r3, #0
   d9ae2:	f7fe fd45 	bl	d8570 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d9ae6:	4d0d      	ldr	r5, [pc, #52]	; (d9b1c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d9ae8:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   d9aec:	2300      	movs	r3, #0
   d9aee:	a901      	add	r1, sp, #4
   d9af0:	9301      	str	r3, [sp, #4]
   d9af2:	f8ad 3008 	strh.w	r3, [sp, #8]
   d9af6:	f88d 300a 	strb.w	r3, [sp, #10]
   d9afa:	4628      	mov	r0, r5
   d9afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9b00:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9b04:	f7ff ff21 	bl	d994a <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d9b08:	a801      	add	r0, sp, #4
   d9b0a:	f7ff ff15 	bl	d9938 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d9b0e:	4620      	mov	r0, r4
   d9b10:	4629      	mov	r1, r5
   d9b12:	f7ff ff30 	bl	d9976 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d9b16:	4620      	mov	r0, r4
   d9b18:	b005      	add	sp, #20
   d9b1a:	bd30      	pop	{r4, r5, pc}
   d9b1c:	2003e640 	.word	0x2003e640

000d9b20 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9b20:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9b22:	4b09      	ldr	r3, [pc, #36]	; (d9b48 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d9b24:	4c09      	ldr	r4, [pc, #36]	; (d9b4c <_GLOBAL__sub_I_System+0x2c>)
   d9b26:	2202      	movs	r2, #2
   d9b28:	2000      	movs	r0, #0
   d9b2a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9b2c:	4b08      	ldr	r3, [pc, #32]	; (d9b50 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9b2e:	6020      	str	r0, [r4, #0]
   d9b30:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9b32:	71a0      	strb	r0, [r4, #6]
   d9b34:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9b36:	f7fe fd0b 	bl	d8550 <set_system_mode>
SystemClass System;
   d9b3a:	4620      	mov	r0, r4
   d9b3c:	4a05      	ldr	r2, [pc, #20]	; (d9b54 <_GLOBAL__sub_I_System+0x34>)
   d9b3e:	4906      	ldr	r1, [pc, #24]	; (d9b58 <_GLOBAL__sub_I_System+0x38>)
   d9b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9b44:	f000 bc90 	b.w	da468 <__aeabi_atexit>
   d9b48:	2003e64c 	.word	0x2003e64c
   d9b4c:	2003e640 	.word	0x2003e640
   d9b50:	ffff0000 	.word	0xffff0000
   d9b54:	2003e200 	.word	0x2003e200
   d9b58:	000d41c7 	.word	0x000d41c7

000d9b5c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9b60:	4a15      	ldr	r2, [pc, #84]	; (d9bb8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9b62:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9bc4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9b66:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9b6a:	18c0      	adds	r0, r0, r3
   d9b6c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9b70:	4a12      	ldr	r2, [pc, #72]	; (d9bbc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9b72:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9b76:	18c6      	adds	r6, r0, r3
   d9b78:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9b7c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9b80:	42bb      	cmp	r3, r7
   d9b82:	bf08      	it	eq
   d9b84:	42b2      	cmpeq	r2, r6
{
   d9b86:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9b88:	d013      	beq.n	d9bb2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d9b8a:	a903      	add	r1, sp, #12
   d9b8c:	4668      	mov	r0, sp
   d9b8e:	e9cd 6700 	strd	r6, r7, [sp]
   d9b92:	f7fe fe67 	bl	d8864 <localtime_r>
	calendar_time.tm_year += 1900;
   d9b96:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b98:	4d09      	ldr	r5, [pc, #36]	; (d9bc0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d9b9a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b9e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9ba0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9baa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9bae:	6823      	ldr	r3, [r4, #0]
   d9bb0:	602b      	str	r3, [r5, #0]
    }
}
   d9bb2:	b00c      	add	sp, #48	; 0x30
   d9bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9bb8:	2003e688 	.word	0x2003e688
   d9bbc:	2003e680 	.word	0x2003e680
   d9bc0:	2003e658 	.word	0x2003e658
   d9bc4:	2003e690 	.word	0x2003e690

000d9bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9bc8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bca:	2000      	movs	r0, #0
   d9bcc:	f7fe fd82 	bl	d86d4 <spark_sync_time_pending>
   d9bd0:	b128      	cbz	r0, d9bde <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9bd2:	f7fe fd57 	bl	d8684 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bd6:	f080 0001 	eor.w	r0, r0, #1
   d9bda:	b2c0      	uxtb	r0, r0
    }
   d9bdc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bde:	2001      	movs	r0, #1
   d9be0:	e7fc      	b.n	d9bdc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9be4 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d9be4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9be6:	f7ff ffb9 	bl	d9b5c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9bea:	4b02      	ldr	r3, [pc, #8]	; (d9bf4 <_ZN9TimeClass7weekdayEx+0x10>)
   d9bec:	6998      	ldr	r0, [r3, #24]
}
   d9bee:	3001      	adds	r0, #1
   d9bf0:	bd08      	pop	{r3, pc}
   d9bf2:	bf00      	nop
   d9bf4:	2003e658 	.word	0x2003e658

000d9bf8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9bf8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9bfa:	f7ff ffaf 	bl	d9b5c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9bfe:	4b02      	ldr	r3, [pc, #8]	; (d9c08 <_ZN9TimeClass5monthEx+0x10>)
   d9c00:	6918      	ldr	r0, [r3, #16]
}
   d9c02:	3001      	adds	r0, #1
   d9c04:	bd08      	pop	{r3, pc}
   d9c06:	bf00      	nop
   d9c08:	2003e658 	.word	0x2003e658

000d9c0c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9c0c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9c10:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9c18:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9c1a:	d411      	bmi.n	d9c40 <_ZN9TimeClass4zoneEf+0x34>
   d9c1c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9c20:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c28:	dc0a      	bgt.n	d9c40 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9c2a:	eddf 7a06 	vldr	s15, [pc, #24]	; d9c44 <_ZN9TimeClass4zoneEf+0x38>
   d9c2e:	ee60 7a27 	vmul.f32	s15, s0, s15
   d9c32:	ee17 0a90 	vmov	r0, s15
   d9c36:	f001 f863 	bl	dad00 <__aeabi_f2lz>
   d9c3a:	4b03      	ldr	r3, [pc, #12]	; (d9c48 <_ZN9TimeClass4zoneEf+0x3c>)
   d9c3c:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c40:	bd08      	pop	{r3, pc}
   d9c42:	bf00      	nop
   d9c44:	45610000 	.word	0x45610000
   d9c48:	2003e688 	.word	0x2003e688

000d9c4c <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9c4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9c54:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d9c56:	d411      	bmi.n	d9c7c <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d9c58:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9c5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c64:	dc0a      	bgt.n	d9c7c <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9c66:	eddf 7a06 	vldr	s15, [pc, #24]	; d9c80 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d9c6a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d9c6e:	ee17 0a90 	vmov	r0, s15
   d9c72:	f001 f845 	bl	dad00 <__aeabi_f2lz>
   d9c76:	4b03      	ldr	r3, [pc, #12]	; (d9c84 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d9c78:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c7c:	bd08      	pop	{r3, pc}
   d9c7e:	bf00      	nop
   d9c80:	45610000 	.word	0x45610000
   d9c84:	2003e190 	.word	0x2003e190

000d9c88 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9c88:	4b03      	ldr	r3, [pc, #12]	; (d9c98 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
   d9c8e:	4b03      	ldr	r3, [pc, #12]	; (d9c9c <_ZN9TimeClass8beginDSTEv+0x14>)
   d9c90:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c94:	4770      	bx	lr
   d9c96:	bf00      	nop
   d9c98:	2003e190 	.word	0x2003e190
   d9c9c:	2003e680 	.word	0x2003e680

000d9ca0 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9ca0:	4b02      	ldr	r3, [pc, #8]	; (d9cac <_ZN9TimeClass6endDSTEv+0xc>)
   d9ca2:	2000      	movs	r0, #0
   d9ca4:	2100      	movs	r1, #0
   d9ca6:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9caa:	4770      	bx	lr
   d9cac:	2003e680 	.word	0x2003e680

000d9cb0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9cb2:	4602      	mov	r2, r0
   d9cb4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9cb6:	4668      	mov	r0, sp
    struct timeval tv = {
   d9cb8:	2100      	movs	r1, #0
    };
   d9cba:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d9cbe:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9cc2:	f7fe faab 	bl	d821c <hal_rtc_set_time>
   d9cc6:	4602      	mov	r2, r0
   d9cc8:	b910      	cbnz	r0, d9cd0 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9cca:	4601      	mov	r1, r0
   d9ccc:	f7fe fc80 	bl	d85d0 <system_notify_time_changed>
    }
}
   d9cd0:	b005      	add	sp, #20
   d9cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9cd8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9cd8:	b530      	push	{r4, r5, lr}
   d9cda:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9cdc:	4818      	ldr	r0, [pc, #96]	; (d9d40 <_ZN9TimeClass7timeStrEx+0x68>)
   d9cde:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9ce2:	1852      	adds	r2, r2, r1
   d9ce4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9ce8:	4816      	ldr	r0, [pc, #88]	; (d9d44 <_ZN9TimeClass7timeStrEx+0x6c>)
   d9cea:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9cee:	1852      	adds	r2, r2, r1
{
   d9cf0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9cf2:	eb40 0303 	adc.w	r3, r0, r3
   d9cf6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9cfa:	2224      	movs	r2, #36	; 0x24
   d9cfc:	eb0d 0002 	add.w	r0, sp, r2
   d9d00:	2100      	movs	r1, #0
   d9d02:	f001 f8a7 	bl	dae54 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9d06:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9d08:	a909      	add	r1, sp, #36	; 0x24
   d9d0a:	4668      	mov	r0, sp
   d9d0c:	f7fe fdaa 	bl	d8864 <localtime_r>
    char ascstr[26] = {};
   d9d10:	2216      	movs	r2, #22
   d9d12:	4629      	mov	r1, r5
   d9d14:	a803      	add	r0, sp, #12
   d9d16:	9502      	str	r5, [sp, #8]
   d9d18:	f001 f89c 	bl	dae54 <memset>
    asctime_r(&calendar_time, ascstr);
   d9d1c:	a902      	add	r1, sp, #8
   d9d1e:	a809      	add	r0, sp, #36	; 0x24
   d9d20:	f001 f822 	bl	dad68 <asctime_r>
    int len = strlen(ascstr);
   d9d24:	a802      	add	r0, sp, #8
   d9d26:	f001 f8f0 	bl	daf0a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9d2a:	ab12      	add	r3, sp, #72	; 0x48
   d9d2c:	4418      	add	r0, r3
    return String(ascstr);
   d9d2e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9d30:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9d34:	4620      	mov	r0, r4
   d9d36:	f7ff fd7e 	bl	d9836 <_ZN6StringC1EPKc>
}
   d9d3a:	4620      	mov	r0, r4
   d9d3c:	b013      	add	sp, #76	; 0x4c
   d9d3e:	bd30      	pop	{r4, r5, pc}
   d9d40:	2003e688 	.word	0x2003e688
   d9d44:	2003e680 	.word	0x2003e680

000d9d48 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d4c:	b0a5      	sub	sp, #148	; 0x94
   d9d4e:	4607      	mov	r7, r0
   d9d50:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d52:	a814      	add	r0, sp, #80	; 0x50
{
   d9d54:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d56:	223f      	movs	r2, #63	; 0x3f
{
   d9d58:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d5a:	f001 f8de 	bl	daf1a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9d5e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9d60:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9d62:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9d66:	f001 f8d0 	bl	daf0a <strlen>
   d9d6a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9d6c:	bb5d      	cbnz	r5, d9dc6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d9d6e:	492a      	ldr	r1, [pc, #168]	; (d9e18 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d9d70:	a803      	add	r0, sp, #12
   d9d72:	f001 f8a5 	bl	daec0 <strcpy>
   d9d76:	ae14      	add	r6, sp, #80	; 0x50
{
   d9d78:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9d7a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d9d7e:	45ab      	cmp	fp, r5
   d9d80:	d936      	bls.n	d9df0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9d82:	46b1      	mov	r9, r6
   d9d84:	f105 0a01 	add.w	sl, r5, #1
   d9d88:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9d8c:	2b25      	cmp	r3, #37	; 0x25
   d9d8e:	d117      	bne.n	d9dc0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9d90:	7873      	ldrb	r3, [r6, #1]
   d9d92:	2b7a      	cmp	r3, #122	; 0x7a
   d9d94:	d114      	bne.n	d9dc0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9d96:	a803      	add	r0, sp, #12
   d9d98:	f001 f8b7 	bl	daf0a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9d9c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d9d9e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9da0:	1828      	adds	r0, r5, r0
   d9da2:	4418      	add	r0, r3
   d9da4:	ebab 0205 	sub.w	r2, fp, r5
   d9da8:	1cb1      	adds	r1, r6, #2
   d9daa:	f001 f82b 	bl	dae04 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9dae:	4622      	mov	r2, r4
   d9db0:	a903      	add	r1, sp, #12
   d9db2:	4630      	mov	r0, r6
   d9db4:	f001 f826 	bl	dae04 <memcpy>
            len = strlen(format_str);
   d9db8:	a814      	add	r0, sp, #80	; 0x50
   d9dba:	f001 f8a6 	bl	daf0a <strlen>
   d9dbe:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9dc0:	464e      	mov	r6, r9
   d9dc2:	4655      	mov	r5, sl
   d9dc4:	e7d9      	b.n	d9d7a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9dc6:	213c      	movs	r1, #60	; 0x3c
   d9dc8:	fb95 f3f1 	sdiv	r3, r5, r1
   d9dcc:	2b00      	cmp	r3, #0
   d9dce:	bfb8      	it	lt
   d9dd0:	425b      	neglt	r3, r3
   d9dd2:	fbb3 f2f1 	udiv	r2, r3, r1
   d9dd6:	fb01 3312 	mls	r3, r1, r2, r3
   d9dda:	9300      	str	r3, [sp, #0]
   d9ddc:	4a0f      	ldr	r2, [pc, #60]	; (d9e1c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9dde:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9de2:	2110      	movs	r1, #16
   d9de4:	a803      	add	r0, sp, #12
   d9de6:	fb95 f3f3 	sdiv	r3, r5, r3
   d9dea:	f7fe fd0b 	bl	d8804 <snprintf>
   d9dee:	e7c2      	b.n	d9d76 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9df0:	2100      	movs	r1, #0
   d9df2:	222e      	movs	r2, #46	; 0x2e
   d9df4:	a808      	add	r0, sp, #32
   d9df6:	9107      	str	r1, [sp, #28]
   d9df8:	f001 f82c 	bl	dae54 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9dfc:	4643      	mov	r3, r8
   d9dfe:	aa14      	add	r2, sp, #80	; 0x50
   d9e00:	2132      	movs	r1, #50	; 0x32
   d9e02:	a807      	add	r0, sp, #28
   d9e04:	f7fe fd26 	bl	d8854 <strftime>
    return String(buf);
   d9e08:	a907      	add	r1, sp, #28
   d9e0a:	4638      	mov	r0, r7
   d9e0c:	f7ff fd13 	bl	d9836 <_ZN6StringC1EPKc>
}
   d9e10:	4638      	mov	r0, r7
   d9e12:	b025      	add	sp, #148	; 0x94
   d9e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e18:	000dbb16 	.word	0x000dbb16
   d9e1c:	000dbb18 	.word	0x000dbb18

000d9e20 <_ZN9TimeClass6formatExPKc>:
{
   d9e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9e22:	b08d      	sub	sp, #52	; 0x34
   d9e24:	e9cd 2300 	strd	r2, r3, [sp]
   d9e28:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9e2a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9e2c:	b915      	cbnz	r5, d9e34 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9e2e:	4b19      	ldr	r3, [pc, #100]	; (d9e94 <_ZN9TimeClass6formatExPKc+0x74>)
   d9e30:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9e32:	b12d      	cbz	r5, d9e40 <_ZN9TimeClass6formatExPKc+0x20>
   d9e34:	4b18      	ldr	r3, [pc, #96]	; (d9e98 <_ZN9TimeClass6formatExPKc+0x78>)
   d9e36:	4628      	mov	r0, r5
   d9e38:	6819      	ldr	r1, [r3, #0]
   d9e3a:	f001 f837 	bl	daeac <strcmp>
   d9e3e:	b938      	cbnz	r0, d9e50 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9e40:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9e44:	4620      	mov	r0, r4
   d9e46:	f7ff ff47 	bl	d9cd8 <_ZN9TimeClass7timeStrEx>
}
   d9e4a:	4620      	mov	r0, r4
   d9e4c:	b00d      	add	sp, #52	; 0x34
   d9e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9e50:	4e12      	ldr	r6, [pc, #72]	; (d9e9c <_ZN9TimeClass6formatExPKc+0x7c>)
   d9e52:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9e54:	4f12      	ldr	r7, [pc, #72]	; (d9ea0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9e56:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9e5a:	185b      	adds	r3, r3, r1
   d9e5c:	9901      	ldr	r1, [sp, #4]
   d9e5e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9e62:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9e66:	181b      	adds	r3, r3, r0
   d9e68:	eb41 0202 	adc.w	r2, r1, r2
   d9e6c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9e70:	2100      	movs	r1, #0
   d9e72:	2224      	movs	r2, #36	; 0x24
   d9e74:	a803      	add	r0, sp, #12
   d9e76:	f000 ffed 	bl	dae54 <memset>
    localtime_r(&t, &calendar_time);
   d9e7a:	a903      	add	r1, sp, #12
   d9e7c:	4668      	mov	r0, sp
   d9e7e:	f7fe fcf1 	bl	d8864 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9e82:	6832      	ldr	r2, [r6, #0]
   d9e84:	683b      	ldr	r3, [r7, #0]
   d9e86:	a903      	add	r1, sp, #12
   d9e88:	4413      	add	r3, r2
   d9e8a:	4620      	mov	r0, r4
   d9e8c:	462a      	mov	r2, r5
   d9e8e:	f7ff ff5b 	bl	d9d48 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9e92:	e7da      	b.n	d9e4a <_ZN9TimeClass6formatExPKc+0x2a>
   d9e94:	2003e654 	.word	0x2003e654
   d9e98:	2003e18c 	.word	0x2003e18c
   d9e9c:	2003e688 	.word	0x2003e688
   d9ea0:	2003e680 	.word	0x2003e680

000d9ea4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9ea4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9ea6:	2000      	movs	r0, #0
   d9ea8:	f7fe f9a0 	bl	d81ec <hal_rtc_time_is_valid>
    if (rtcstate)
   d9eac:	4604      	mov	r4, r0
   d9eae:	b9a0      	cbnz	r0, d9eda <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9eb0:	f7fe fb46 	bl	d8540 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9eb4:	2801      	cmp	r0, #1
   d9eb6:	d110      	bne.n	d9eda <_ZN9TimeClass7isValidEv+0x36>
   d9eb8:	4620      	mov	r0, r4
   d9eba:	f7fe fb81 	bl	d85c0 <system_thread_get_state>
   d9ebe:	b960      	cbnz	r0, d9eda <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9ec0:	f7ff fe82 	bl	d9bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9ec4:	b910      	cbnz	r0, d9ecc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9ec6:	f7fe fbcd 	bl	d8664 <spark_process>
        while (_while() && !_condition()) {
   d9eca:	e7f9      	b.n	d9ec0 <_ZN9TimeClass7isValidEv+0x1c>
   d9ecc:	f7ff fe7c 	bl	d9bc8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9ed4:	2000      	movs	r0, #0
   d9ed6:	f7fe b989 	b.w	d81ec <hal_rtc_time_is_valid>
}
   d9eda:	4620      	mov	r0, r4
   d9edc:	bd10      	pop	{r4, pc}

000d9ede <_ZN9TimeClass3nowEv>:
{
   d9ede:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9ee0:	f7ff ffe0 	bl	d9ea4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9ee4:	2210      	movs	r2, #16
   d9ee6:	2100      	movs	r1, #0
   d9ee8:	4668      	mov	r0, sp
   d9eea:	f000 ffb3 	bl	dae54 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9eee:	2100      	movs	r1, #0
   d9ef0:	4668      	mov	r0, sp
   d9ef2:	f7fe f98b 	bl	d820c <hal_rtc_get_time>
}
   d9ef6:	9800      	ldr	r0, [sp, #0]
   d9ef8:	b005      	add	sp, #20
   d9efa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f00 <_ZN9TimeClass4hourEv>:
{
   d9f00:	b508      	push	{r3, lr}
	return hour(now());
   d9f02:	f7ff ffec 	bl	d9ede <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9f06:	17c1      	asrs	r1, r0, #31
   d9f08:	f7ff fe28 	bl	d9b5c <_ZL22Refresh_UnixTime_Cachex>
}
   d9f0c:	4b01      	ldr	r3, [pc, #4]	; (d9f14 <_ZN9TimeClass4hourEv+0x14>)
   d9f0e:	6898      	ldr	r0, [r3, #8]
   d9f10:	bd08      	pop	{r3, pc}
   d9f12:	bf00      	nop
   d9f14:	2003e658 	.word	0x2003e658

000d9f18 <_ZN9TimeClass6minuteEv>:
{
   d9f18:	b508      	push	{r3, lr}
	return minute(now());
   d9f1a:	f7ff ffe0 	bl	d9ede <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9f1e:	17c1      	asrs	r1, r0, #31
   d9f20:	f7ff fe1c 	bl	d9b5c <_ZL22Refresh_UnixTime_Cachex>
}
   d9f24:	4b01      	ldr	r3, [pc, #4]	; (d9f2c <_ZN9TimeClass6minuteEv+0x14>)
   d9f26:	6858      	ldr	r0, [r3, #4]
   d9f28:	bd08      	pop	{r3, pc}
   d9f2a:	bf00      	nop
   d9f2c:	2003e658 	.word	0x2003e658

000d9f30 <_ZN9TimeClass3dayEv>:
{
   d9f30:	b508      	push	{r3, lr}
	return day(now());
   d9f32:	f7ff ffd4 	bl	d9ede <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9f36:	17c1      	asrs	r1, r0, #31
   d9f38:	f7ff fe10 	bl	d9b5c <_ZL22Refresh_UnixTime_Cachex>
}
   d9f3c:	4b01      	ldr	r3, [pc, #4]	; (d9f44 <_ZN9TimeClass3dayEv+0x14>)
   d9f3e:	68d8      	ldr	r0, [r3, #12]
   d9f40:	bd08      	pop	{r3, pc}
   d9f42:	bf00      	nop
   d9f44:	2003e658 	.word	0x2003e658

000d9f48 <_ZN9TimeClass7weekdayEv>:
{
   d9f48:	b508      	push	{r3, lr}
	return weekday(now());
   d9f4a:	f7ff ffc8 	bl	d9ede <_ZN9TimeClass3nowEv>
}
   d9f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d9f52:	17c1      	asrs	r1, r0, #31
   d9f54:	f7ff be46 	b.w	d9be4 <_ZN9TimeClass7weekdayEx>

000d9f58 <_ZN9TimeClass5monthEv>:
{
   d9f58:	b508      	push	{r3, lr}
	return month(now());
   d9f5a:	f7ff ffc0 	bl	d9ede <_ZN9TimeClass3nowEv>
}
   d9f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9f62:	17c1      	asrs	r1, r0, #31
   d9f64:	f7ff be48 	b.w	d9bf8 <_ZN9TimeClass5monthEx>

000d9f68 <_ZN9TimeClass5localEv>:
{
   d9f68:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d9f6a:	f7ff ffb8 	bl	d9ede <_ZN9TimeClass3nowEv>
   d9f6e:	4b03      	ldr	r3, [pc, #12]	; (d9f7c <_ZN9TimeClass5localEv+0x14>)
   d9f70:	4a03      	ldr	r2, [pc, #12]	; (d9f80 <_ZN9TimeClass5localEv+0x18>)
   d9f72:	681b      	ldr	r3, [r3, #0]
   d9f74:	6812      	ldr	r2, [r2, #0]
   d9f76:	4413      	add	r3, r2
}
   d9f78:	4418      	add	r0, r3
   d9f7a:	bd08      	pop	{r3, pc}
   d9f7c:	2003e688 	.word	0x2003e688
   d9f80:	2003e680 	.word	0x2003e680

000d9f84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9f84:	4b02      	ldr	r3, [pc, #8]	; (d9f90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9f86:	681a      	ldr	r2, [r3, #0]
   d9f88:	4b02      	ldr	r3, [pc, #8]	; (d9f94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9f8a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9f8c:	4770      	bx	lr
   d9f8e:	bf00      	nop
   d9f90:	2003e18c 	.word	0x2003e18c
   d9f94:	2003e654 	.word	0x2003e654

000d9f98 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9f98:	4770      	bx	lr

000d9f9a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9f9a:	7441      	strb	r1, [r0, #17]
}
   d9f9c:	4770      	bx	lr

000d9f9e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9f9e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9fa0:	7c00      	ldrb	r0, [r0, #16]
   d9fa2:	f7fe fa73 	bl	d848c <hal_usart_available_data_for_write>
}
   d9fa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9faa:	bd08      	pop	{r3, pc}

000d9fac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9fac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9fae:	7c00      	ldrb	r0, [r0, #16]
   d9fb0:	f7fe fa44 	bl	d843c <hal_usart_available>
}
   d9fb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9fb8:	bd08      	pop	{r3, pc}

000d9fba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9fba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9fbc:	7c00      	ldrb	r0, [r0, #16]
   d9fbe:	f7fe fa4d 	bl	d845c <hal_usart_peek>
}
   d9fc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9fc6:	bd08      	pop	{r3, pc}

000d9fc8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9fc8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9fca:	7c00      	ldrb	r0, [r0, #16]
   d9fcc:	f7fe fa3e 	bl	d844c <hal_usart_read>
}
   d9fd0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9fd4:	bd08      	pop	{r3, pc}

000d9fd6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9fd6:	7c00      	ldrb	r0, [r0, #16]
   d9fd8:	f7fe ba48 	b.w	d846c <hal_usart_flush>

000d9fdc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fde:	7c45      	ldrb	r5, [r0, #17]
{
   d9fe0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fe2:	b12d      	cbz	r5, d9ff0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9fe4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9fe6:	b003      	add	sp, #12
   d9fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9fec:	f7fe ba1e 	b.w	d842c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9ff0:	7c00      	ldrb	r0, [r0, #16]
   d9ff2:	9101      	str	r1, [sp, #4]
   d9ff4:	f7fe fa4a 	bl	d848c <hal_usart_available_data_for_write>
   d9ff8:	2800      	cmp	r0, #0
   d9ffa:	9901      	ldr	r1, [sp, #4]
   d9ffc:	dcf2      	bgt.n	d9fe4 <_ZN11USARTSerial5writeEh+0x8>
}
   d9ffe:	4628      	mov	r0, r5
   da000:	b003      	add	sp, #12
   da002:	bd30      	pop	{r4, r5, pc}

000da004 <_ZN11USARTSerialD0Ev>:
   da004:	b510      	push	{r4, lr}
   da006:	2114      	movs	r1, #20
   da008:	4604      	mov	r4, r0
   da00a:	f000 fa32 	bl	da472 <_ZdlPvj>
   da00e:	4620      	mov	r0, r4
   da010:	bd10      	pop	{r4, pc}
	...

000da014 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da014:	b510      	push	{r4, lr}
   da016:	f04f 0c00 	mov.w	ip, #0
   da01a:	4604      	mov	r4, r0
   da01c:	4608      	mov	r0, r1
   da01e:	4611      	mov	r1, r2
   da020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da024:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da028:	4a04      	ldr	r2, [pc, #16]	; (da03c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da02a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da02c:	2201      	movs	r2, #1
  _serial = serial;
   da02e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da030:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da032:	461a      	mov	r2, r3
   da034:	f7fe f9f2 	bl	d841c <hal_usart_init>
}
   da038:	4620      	mov	r0, r4
   da03a:	bd10      	pop	{r4, pc}
   da03c:	000dbb48 	.word	0x000dbb48

000da040 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da040:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da042:	4c0e      	ldr	r4, [pc, #56]	; (da07c <_Z22__fetch_global_Serial1v+0x3c>)
   da044:	7821      	ldrb	r1, [r4, #0]
   da046:	f3bf 8f5b 	dmb	ish
   da04a:	f011 0101 	ands.w	r1, r1, #1
   da04e:	d112      	bne.n	da076 <_Z22__fetch_global_Serial1v+0x36>
   da050:	4620      	mov	r0, r4
   da052:	9101      	str	r1, [sp, #4]
   da054:	f7fa f830 	bl	d40b8 <__cxa_guard_acquire>
   da058:	9901      	ldr	r1, [sp, #4]
   da05a:	b160      	cbz	r0, da076 <_Z22__fetch_global_Serial1v+0x36>
   da05c:	4a08      	ldr	r2, [pc, #32]	; (da080 <_Z22__fetch_global_Serial1v+0x40>)
   da05e:	4b09      	ldr	r3, [pc, #36]	; (da084 <_Z22__fetch_global_Serial1v+0x44>)
   da060:	4809      	ldr	r0, [pc, #36]	; (da088 <_Z22__fetch_global_Serial1v+0x48>)
   da062:	f7ff ffd7 	bl	da014 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da066:	4620      	mov	r0, r4
   da068:	f7fa f82b 	bl	d40c2 <__cxa_guard_release>
   da06c:	4a07      	ldr	r2, [pc, #28]	; (da08c <_Z22__fetch_global_Serial1v+0x4c>)
   da06e:	4908      	ldr	r1, [pc, #32]	; (da090 <_Z22__fetch_global_Serial1v+0x50>)
   da070:	4805      	ldr	r0, [pc, #20]	; (da088 <_Z22__fetch_global_Serial1v+0x48>)
   da072:	f000 f9f9 	bl	da468 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da076:	4804      	ldr	r0, [pc, #16]	; (da088 <_Z22__fetch_global_Serial1v+0x48>)
   da078:	b002      	add	sp, #8
   da07a:	bd10      	pop	{r4, pc}
   da07c:	2003e698 	.word	0x2003e698
   da080:	2003e69c 	.word	0x2003e69c
   da084:	2003e720 	.word	0x2003e720
   da088:	2003e7a4 	.word	0x2003e7a4
   da08c:	2003e200 	.word	0x2003e200
   da090:	000d9f99 	.word	0x000d9f99

000da094 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da094:	7441      	strb	r1, [r0, #17]
}
   da096:	4770      	bx	lr

000da098 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da098:	4770      	bx	lr

000da09a <_ZN9USBSerial4readEv>:
{
   da09a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da09c:	2100      	movs	r1, #0
   da09e:	7c00      	ldrb	r0, [r0, #16]
   da0a0:	f7fe fa14 	bl	d84cc <HAL_USB_USART_Receive_Data>
}
   da0a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da0a8:	bd08      	pop	{r3, pc}

000da0aa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   da0aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da0ac:	2101      	movs	r1, #1
   da0ae:	7c00      	ldrb	r0, [r0, #16]
   da0b0:	f7fe fa0c 	bl	d84cc <HAL_USB_USART_Receive_Data>
}
   da0b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da0b8:	bd08      	pop	{r3, pc}

000da0ba <_ZN9USBSerial17availableForWriteEv>:
{
   da0ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da0bc:	7c00      	ldrb	r0, [r0, #16]
   da0be:	f7fe f9fd 	bl	d84bc <HAL_USB_USART_Available_Data_For_Write>
}
   da0c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da0c6:	bd08      	pop	{r3, pc}

000da0c8 <_ZN9USBSerial9availableEv>:
{
   da0c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da0ca:	7c00      	ldrb	r0, [r0, #16]
   da0cc:	f7fe f9ee 	bl	d84ac <HAL_USB_USART_Available_Data>
}
   da0d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da0d4:	bd08      	pop	{r3, pc}

000da0d6 <_ZN9USBSerial5writeEh>:
{
   da0d6:	b513      	push	{r0, r1, r4, lr}
   da0d8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da0da:	7c00      	ldrb	r0, [r0, #16]
{
   da0dc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da0de:	f7fe f9ed 	bl	d84bc <HAL_USB_USART_Available_Data_For_Write>
   da0e2:	2800      	cmp	r0, #0
   da0e4:	9901      	ldr	r1, [sp, #4]
   da0e6:	dc01      	bgt.n	da0ec <_ZN9USBSerial5writeEh+0x16>
   da0e8:	7c60      	ldrb	r0, [r4, #17]
   da0ea:	b120      	cbz	r0, da0f6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da0ec:	7c20      	ldrb	r0, [r4, #16]
   da0ee:	f7fe f9f5 	bl	d84dc <HAL_USB_USART_Send_Data>
   da0f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da0f6:	b002      	add	sp, #8
   da0f8:	bd10      	pop	{r4, pc}

000da0fa <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da0fa:	7c00      	ldrb	r0, [r0, #16]
   da0fc:	f7fe b9f6 	b.w	d84ec <HAL_USB_USART_Flush_Data>

000da100 <_ZN9USBSerialD0Ev>:
   da100:	b510      	push	{r4, lr}
   da102:	2114      	movs	r1, #20
   da104:	4604      	mov	r4, r0
   da106:	f000 f9b4 	bl	da472 <_ZdlPvj>
   da10a:	4620      	mov	r0, r4
   da10c:	bd10      	pop	{r4, pc}
	...

000da110 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da110:	b510      	push	{r4, lr}
   da112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da116:	4604      	mov	r4, r0
   da118:	4608      	mov	r0, r1
   da11a:	2100      	movs	r1, #0
   da11c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da120:	4b04      	ldr	r3, [pc, #16]	; (da134 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da122:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da124:	2301      	movs	r3, #1
  _serial = serial;
   da126:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da128:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da12a:	4611      	mov	r1, r2
   da12c:	f7fe f9b6 	bl	d849c <HAL_USB_USART_Init>
}
   da130:	4620      	mov	r0, r4
   da132:	bd10      	pop	{r4, pc}
   da134:	000dbb78 	.word	0x000dbb78

000da138 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da138:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da13a:	2214      	movs	r2, #20
{
   da13c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da13e:	2100      	movs	r1, #0
   da140:	f000 fe88 	bl	dae54 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da144:	4620      	mov	r0, r4
   da146:	bd10      	pop	{r4, pc}

000da148 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da148:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da14a:	4c10      	ldr	r4, [pc, #64]	; (da18c <_Z16_fetch_usbserialv+0x44>)
{
   da14c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da14e:	a803      	add	r0, sp, #12
   da150:	f7ff fff2 	bl	da138 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da154:	7821      	ldrb	r1, [r4, #0]
   da156:	f3bf 8f5b 	dmb	ish
   da15a:	f011 0101 	ands.w	r1, r1, #1
   da15e:	d111      	bne.n	da184 <_Z16_fetch_usbserialv+0x3c>
   da160:	4620      	mov	r0, r4
   da162:	9101      	str	r1, [sp, #4]
   da164:	f7f9 ffa8 	bl	d40b8 <__cxa_guard_acquire>
   da168:	9901      	ldr	r1, [sp, #4]
   da16a:	b158      	cbz	r0, da184 <_Z16_fetch_usbserialv+0x3c>
   da16c:	aa03      	add	r2, sp, #12
   da16e:	4808      	ldr	r0, [pc, #32]	; (da190 <_Z16_fetch_usbserialv+0x48>)
   da170:	f7ff ffce 	bl	da110 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da174:	4620      	mov	r0, r4
   da176:	f7f9 ffa4 	bl	d40c2 <__cxa_guard_release>
   da17a:	4a06      	ldr	r2, [pc, #24]	; (da194 <_Z16_fetch_usbserialv+0x4c>)
   da17c:	4906      	ldr	r1, [pc, #24]	; (da198 <_Z16_fetch_usbserialv+0x50>)
   da17e:	4804      	ldr	r0, [pc, #16]	; (da190 <_Z16_fetch_usbserialv+0x48>)
   da180:	f000 f972 	bl	da468 <__aeabi_atexit>
	return _usbserial;
}
   da184:	4802      	ldr	r0, [pc, #8]	; (da190 <_Z16_fetch_usbserialv+0x48>)
   da186:	b008      	add	sp, #32
   da188:	bd10      	pop	{r4, pc}
   da18a:	bf00      	nop
   da18c:	2003e7b8 	.word	0x2003e7b8
   da190:	2003e7bc 	.word	0x2003e7bc
   da194:	2003e200 	.word	0x2003e200
   da198:	000da099 	.word	0x000da099

000da19c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da19c:	4b01      	ldr	r3, [pc, #4]	; (da1a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da19e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da1a0:	4770      	bx	lr
   da1a2:	bf00      	nop
   da1a4:	2003e198 	.word	0x2003e198

000da1a8 <serialEventRun>:
{
   da1a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da1aa:	4b0b      	ldr	r3, [pc, #44]	; (da1d8 <serialEventRun+0x30>)
   da1ac:	b143      	cbz	r3, da1c0 <serialEventRun+0x18>
   da1ae:	f7ff ffcb 	bl	da148 <_Z16_fetch_usbserialv>
   da1b2:	6803      	ldr	r3, [r0, #0]
   da1b4:	691b      	ldr	r3, [r3, #16]
   da1b6:	4798      	blx	r3
   da1b8:	2800      	cmp	r0, #0
   da1ba:	dd01      	ble.n	da1c0 <serialEventRun+0x18>
        serialEvent();
   da1bc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da1c0:	4b06      	ldr	r3, [pc, #24]	; (da1dc <serialEventRun+0x34>)
   da1c2:	b143      	cbz	r3, da1d6 <serialEventRun+0x2e>
   da1c4:	f7ff ff3c 	bl	da040 <_Z22__fetch_global_Serial1v>
   da1c8:	6803      	ldr	r3, [r0, #0]
   da1ca:	691b      	ldr	r3, [r3, #16]
   da1cc:	4798      	blx	r3
   da1ce:	2800      	cmp	r0, #0
   da1d0:	dd01      	ble.n	da1d6 <serialEventRun+0x2e>
        serialEvent1();
   da1d2:	f3af 8000 	nop.w
}
   da1d6:	bd08      	pop	{r3, pc}
	...

000da1e0 <_post_loop>:
{
   da1e0:	b508      	push	{r3, lr}
	serialEventRun();
   da1e2:	f7ff ffe1 	bl	da1a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da1e6:	f7fd ffe9 	bl	d81bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da1ea:	4b01      	ldr	r3, [pc, #4]	; (da1f0 <_post_loop+0x10>)
   da1ec:	6018      	str	r0, [r3, #0]
}
   da1ee:	bd08      	pop	{r3, pc}
   da1f0:	2003e7d8 	.word	0x2003e7d8

000da1f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da1f4:	4802      	ldr	r0, [pc, #8]	; (da200 <_Z33system_initialize_user_backup_ramv+0xc>)
   da1f6:	4a03      	ldr	r2, [pc, #12]	; (da204 <_Z33system_initialize_user_backup_ramv+0x10>)
   da1f8:	4903      	ldr	r1, [pc, #12]	; (da208 <_Z33system_initialize_user_backup_ramv+0x14>)
   da1fa:	1a12      	subs	r2, r2, r0
   da1fc:	f000 be02 	b.w	dae04 <memcpy>
   da200:	2003f400 	.word	0x2003f400
   da204:	2003fc1c 	.word	0x2003fc1c
   da208:	000dbd30 	.word	0x000dbd30

000da20c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da20c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da20e:	2300      	movs	r3, #0
   da210:	9300      	str	r3, [sp, #0]
   da212:	461a      	mov	r2, r3
   da214:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da218:	f7fe f9ec 	bl	d85f4 <system_ctrl_set_result>
}
   da21c:	b003      	add	sp, #12
   da21e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da224 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da224:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da226:	8843      	ldrh	r3, [r0, #2]
   da228:	2b0a      	cmp	r3, #10
   da22a:	d008      	beq.n	da23e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da22c:	2b50      	cmp	r3, #80	; 0x50
   da22e:	d10b      	bne.n	da248 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da230:	4b09      	ldr	r3, [pc, #36]	; (da258 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da232:	681b      	ldr	r3, [r3, #0]
   da234:	b14b      	cbz	r3, da24a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da236:	b003      	add	sp, #12
   da238:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da23c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da23e:	f7ff ffe5 	bl	da20c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da242:	b003      	add	sp, #12
   da244:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da248:	2300      	movs	r3, #0
   da24a:	9300      	str	r3, [sp, #0]
   da24c:	461a      	mov	r2, r3
   da24e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da252:	f7fe f9cf 	bl	d85f4 <system_ctrl_set_result>
}
   da256:	e7f4      	b.n	da242 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da258:	2003e7d4 	.word	0x2003e7d4

000da25c <module_user_init_hook>:
{
   da25c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da25e:	4c12      	ldr	r4, [pc, #72]	; (da2a8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da260:	4812      	ldr	r0, [pc, #72]	; (da2ac <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da262:	4d13      	ldr	r5, [pc, #76]	; (da2b0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da264:	2100      	movs	r1, #0
   da266:	f7fe faed 	bl	d8844 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da26a:	6823      	ldr	r3, [r4, #0]
   da26c:	42ab      	cmp	r3, r5
   da26e:	4b11      	ldr	r3, [pc, #68]	; (da2b4 <module_user_init_hook+0x58>)
   da270:	bf0c      	ite	eq
   da272:	2201      	moveq	r2, #1
   da274:	2200      	movne	r2, #0
   da276:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da278:	d002      	beq.n	da280 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da27a:	f7ff ffbb 	bl	da1f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da27e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da280:	f7fd ff84 	bl	d818c <HAL_RNG_GetRandomNumber>
   da284:	4604      	mov	r4, r0
    srand(seed);
   da286:	f000 fded 	bl	dae64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da28a:	4b0b      	ldr	r3, [pc, #44]	; (da2b8 <module_user_init_hook+0x5c>)
   da28c:	b113      	cbz	r3, da294 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da28e:	4620      	mov	r0, r4
   da290:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da294:	2100      	movs	r1, #0
   da296:	4808      	ldr	r0, [pc, #32]	; (da2b8 <module_user_init_hook+0x5c>)
   da298:	f7fe fa34 	bl	d8704 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da2a0:	4806      	ldr	r0, [pc, #24]	; (da2bc <module_user_init_hook+0x60>)
   da2a2:	2100      	movs	r1, #0
   da2a4:	f7fe b99c 	b.w	d85e0 <system_ctrl_set_app_request_handler>
   da2a8:	2003fc18 	.word	0x2003fc18
   da2ac:	000da19d 	.word	0x000da19d
   da2b0:	9a271c1e 	.word	0x9a271c1e
   da2b4:	2003e7d0 	.word	0x2003e7d0
   da2b8:	00000000 	.word	0x00000000
   da2bc:	000da225 	.word	0x000da225

000da2c0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da2c0:	b508      	push	{r3, lr}
   da2c2:	4b02      	ldr	r3, [pc, #8]	; (da2cc <spark_protocol_instance+0xc>)
   da2c4:	681b      	ldr	r3, [r3, #0]
   da2c6:	681b      	ldr	r3, [r3, #0]
   da2c8:	9301      	str	r3, [sp, #4]
   da2ca:	bd08      	pop	{r3, pc}
   da2cc:	0003025c 	.word	0x0003025c

000da2d0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da2d0:	b508      	push	{r3, lr}
   da2d2:	4b02      	ldr	r3, [pc, #8]	; (da2dc <spark_protocol_set_product_id+0xc>)
   da2d4:	681b      	ldr	r3, [r3, #0]
   da2d6:	685b      	ldr	r3, [r3, #4]
   da2d8:	9301      	str	r3, [sp, #4]
   da2da:	bd08      	pop	{r3, pc}
   da2dc:	0003025c 	.word	0x0003025c

000da2e0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da2e0:	b508      	push	{r3, lr}
   da2e2:	4b02      	ldr	r3, [pc, #8]	; (da2ec <spark_protocol_set_product_firmware_version+0xc>)
   da2e4:	681b      	ldr	r3, [r3, #0]
   da2e6:	689b      	ldr	r3, [r3, #8]
   da2e8:	9301      	str	r3, [sp, #4]
   da2ea:	bd08      	pop	{r3, pc}
   da2ec:	0003025c 	.word	0x0003025c

000da2f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da2f0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da2f2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da2f4:	d902      	bls.n	da2fc <pinAvailable+0xc>
    return false;
   da2f6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da2f8:	b002      	add	sp, #8
   da2fa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da2fc:	f1a0 030b 	sub.w	r3, r0, #11
   da300:	2b02      	cmp	r3, #2
   da302:	d81a      	bhi.n	da33a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da304:	4c17      	ldr	r4, [pc, #92]	; (da364 <pinAvailable+0x74>)
   da306:	7821      	ldrb	r1, [r4, #0]
   da308:	f3bf 8f5b 	dmb	ish
   da30c:	f011 0101 	ands.w	r1, r1, #1
   da310:	d10b      	bne.n	da32a <pinAvailable+0x3a>
   da312:	4620      	mov	r0, r4
   da314:	9101      	str	r1, [sp, #4]
   da316:	f7f9 fecf 	bl	d40b8 <__cxa_guard_acquire>
   da31a:	9901      	ldr	r1, [sp, #4]
   da31c:	b128      	cbz	r0, da32a <pinAvailable+0x3a>
   da31e:	4812      	ldr	r0, [pc, #72]	; (da368 <pinAvailable+0x78>)
   da320:	f7ff f994 	bl	d964c <_ZN8SPIClassC1E19hal_spi_interface_t>
   da324:	4620      	mov	r0, r4
   da326:	f7f9 fecc 	bl	d40c2 <__cxa_guard_release>
   da32a:	4b0f      	ldr	r3, [pc, #60]	; (da368 <pinAvailable+0x78>)
   da32c:	7818      	ldrb	r0, [r3, #0]
   da32e:	f7fe f84d 	bl	d83cc <hal_spi_is_enabled>
   da332:	2800      	cmp	r0, #0
   da334:	d1df      	bne.n	da2f6 <pinAvailable+0x6>
  return true; // 'pin' is available
   da336:	2001      	movs	r0, #1
   da338:	e7de      	b.n	da2f8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da33a:	2801      	cmp	r0, #1
   da33c:	d809      	bhi.n	da352 <pinAvailable+0x62>
   da33e:	f000 f86b 	bl	da418 <_Z19__fetch_global_Wirev>
   da342:	2100      	movs	r1, #0
   da344:	7c00      	ldrb	r0, [r0, #16]
   da346:	f7fd ffe9 	bl	d831c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da34a:	f080 0001 	eor.w	r0, r0, #1
   da34e:	b2c0      	uxtb	r0, r0
   da350:	e7d2      	b.n	da2f8 <pinAvailable+0x8>
   da352:	3809      	subs	r0, #9
   da354:	2801      	cmp	r0, #1
   da356:	d8ee      	bhi.n	da336 <pinAvailable+0x46>
   da358:	f7ff fe72 	bl	da040 <_Z22__fetch_global_Serial1v>
   da35c:	7c00      	ldrb	r0, [r0, #16]
   da35e:	f7fe f88d 	bl	d847c <hal_usart_is_enabled>
   da362:	e7f2      	b.n	da34a <pinAvailable+0x5a>
   da364:	2003e5c0 	.word	0x2003e5c0
   da368:	2003e5c4 	.word	0x2003e5c4

000da36c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da36c:	2823      	cmp	r0, #35	; 0x23
{
   da36e:	b538      	push	{r3, r4, r5, lr}
   da370:	4604      	mov	r4, r0
   da372:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da374:	d80a      	bhi.n	da38c <pinMode+0x20>
   da376:	29ff      	cmp	r1, #255	; 0xff
   da378:	d008      	beq.n	da38c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da37a:	f7ff ffb9 	bl	da2f0 <pinAvailable>
   da37e:	b128      	cbz	r0, da38c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da380:	4629      	mov	r1, r5
   da382:	4620      	mov	r0, r4
}
   da384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da388:	f7fd bf58 	b.w	d823c <HAL_Pin_Mode>
}
   da38c:	bd38      	pop	{r3, r4, r5, pc}

000da38e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da38e:	b538      	push	{r3, r4, r5, lr}
   da390:	4604      	mov	r4, r0
   da392:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da394:	f7fd ff5a 	bl	d824c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da398:	28ff      	cmp	r0, #255	; 0xff
   da39a:	d010      	beq.n	da3be <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da39c:	2806      	cmp	r0, #6
   da39e:	d804      	bhi.n	da3aa <digitalWrite+0x1c>
   da3a0:	234d      	movs	r3, #77	; 0x4d
   da3a2:	fa23 f000 	lsr.w	r0, r3, r0
   da3a6:	07c3      	lsls	r3, r0, #31
   da3a8:	d409      	bmi.n	da3be <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da3aa:	4620      	mov	r0, r4
   da3ac:	f7ff ffa0 	bl	da2f0 <pinAvailable>
   da3b0:	b128      	cbz	r0, da3be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da3b2:	4629      	mov	r1, r5
   da3b4:	4620      	mov	r0, r4
}
   da3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da3ba:	f7fd bf4f 	b.w	d825c <HAL_GPIO_Write>
}
   da3be:	bd38      	pop	{r3, r4, r5, pc}

000da3c0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da3c0:	b510      	push	{r4, lr}
   da3c2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da3c4:	f7fd ff42 	bl	d824c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da3c8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da3ca:	b2db      	uxtb	r3, r3
   da3cc:	2b01      	cmp	r3, #1
   da3ce:	d908      	bls.n	da3e2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da3d0:	4620      	mov	r0, r4
   da3d2:	f7ff ff8d 	bl	da2f0 <pinAvailable>
   da3d6:	b120      	cbz	r0, da3e2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da3d8:	4620      	mov	r0, r4
}
   da3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da3de:	f7fd bf45 	b.w	d826c <HAL_GPIO_Read>
}
   da3e2:	2000      	movs	r0, #0
   da3e4:	bd10      	pop	{r4, pc}
	...

000da3e8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   da3e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da3ea:	2300      	movs	r3, #0
   da3ec:	2520      	movs	r5, #32
   da3ee:	8043      	strh	r3, [r0, #2]
   da3f0:	2314      	movs	r3, #20
{
   da3f2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da3f4:	8003      	strh	r3, [r0, #0]
   da3f6:	6085      	str	r5, [r0, #8]
   da3f8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da3fa:	4906      	ldr	r1, [pc, #24]	; (da414 <_Z17acquireWireBufferv+0x2c>)
   da3fc:	4628      	mov	r0, r5
   da3fe:	f000 f83c 	bl	da47a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da402:	4904      	ldr	r1, [pc, #16]	; (da414 <_Z17acquireWireBufferv+0x2c>)
	};
   da404:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da406:	4628      	mov	r0, r5
   da408:	f000 f837 	bl	da47a <_ZnajRKSt9nothrow_t>
	};
   da40c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   da40e:	4620      	mov	r0, r4
   da410:	bd38      	pop	{r3, r4, r5, pc}
   da412:	bf00      	nop
   da414:	000dbba0 	.word	0x000dbba0

000da418 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da418:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da41a:	4d0f      	ldr	r5, [pc, #60]	; (da458 <_Z19__fetch_global_Wirev+0x40>)
   da41c:	7829      	ldrb	r1, [r5, #0]
   da41e:	f3bf 8f5b 	dmb	ish
   da422:	f011 0401 	ands.w	r4, r1, #1
{
   da426:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da428:	d113      	bne.n	da452 <_Z19__fetch_global_Wirev+0x3a>
   da42a:	4628      	mov	r0, r5
   da42c:	f7f9 fe44 	bl	d40b8 <__cxa_guard_acquire>
   da430:	b178      	cbz	r0, da452 <_Z19__fetch_global_Wirev+0x3a>
   da432:	a801      	add	r0, sp, #4
   da434:	f7ff ffd8 	bl	da3e8 <_Z17acquireWireBufferv>
   da438:	aa01      	add	r2, sp, #4
   da43a:	4621      	mov	r1, r4
   da43c:	4807      	ldr	r0, [pc, #28]	; (da45c <_Z19__fetch_global_Wirev+0x44>)
   da43e:	f7fe fedd 	bl	d91fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da442:	4628      	mov	r0, r5
   da444:	f7f9 fe3d 	bl	d40c2 <__cxa_guard_release>
   da448:	4a05      	ldr	r2, [pc, #20]	; (da460 <_Z19__fetch_global_Wirev+0x48>)
   da44a:	4906      	ldr	r1, [pc, #24]	; (da464 <_Z19__fetch_global_Wirev+0x4c>)
   da44c:	4803      	ldr	r0, [pc, #12]	; (da45c <_Z19__fetch_global_Wirev+0x44>)
   da44e:	f000 f80b 	bl	da468 <__aeabi_atexit>
	return wire;
}
   da452:	4802      	ldr	r0, [pc, #8]	; (da45c <_Z19__fetch_global_Wirev+0x44>)
   da454:	b007      	add	sp, #28
   da456:	bd30      	pop	{r4, r5, pc}
   da458:	2003e7dc 	.word	0x2003e7dc
   da45c:	2003e7e0 	.word	0x2003e7e0
   da460:	2003e200 	.word	0x2003e200
   da464:	000d91a5 	.word	0x000d91a5

000da468 <__aeabi_atexit>:
   da468:	460b      	mov	r3, r1
   da46a:	4601      	mov	r1, r0
   da46c:	4618      	mov	r0, r3
   da46e:	f000 bca9 	b.w	dadc4 <__cxa_atexit>

000da472 <_ZdlPvj>:
   da472:	f7f9 be14 	b.w	d409e <_ZdlPv>

000da476 <_ZnwjRKSt9nothrow_t>:
   da476:	f7f9 be0e 	b.w	d4096 <_Znwj>

000da47a <_ZnajRKSt9nothrow_t>:
   da47a:	f7f9 be0e 	b.w	d409a <_Znaj>

000da47e <_ZSt25__throw_bad_function_callv>:
   da47e:	b508      	push	{r3, lr}
   da480:	f7fe f9d0 	bl	d8824 <abort>

000da484 <__aeabi_drsub>:
   da484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da488:	e002      	b.n	da490 <__adddf3>
   da48a:	bf00      	nop

000da48c <__aeabi_dsub>:
   da48c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da490 <__adddf3>:
   da490:	b530      	push	{r4, r5, lr}
   da492:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da496:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da49a:	ea94 0f05 	teq	r4, r5
   da49e:	bf08      	it	eq
   da4a0:	ea90 0f02 	teqeq	r0, r2
   da4a4:	bf1f      	itttt	ne
   da4a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   da4aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   da4ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da4b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da4b6:	f000 80e2 	beq.w	da67e <__adddf3+0x1ee>
   da4ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da4be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da4c2:	bfb8      	it	lt
   da4c4:	426d      	neglt	r5, r5
   da4c6:	dd0c      	ble.n	da4e2 <__adddf3+0x52>
   da4c8:	442c      	add	r4, r5
   da4ca:	ea80 0202 	eor.w	r2, r0, r2
   da4ce:	ea81 0303 	eor.w	r3, r1, r3
   da4d2:	ea82 0000 	eor.w	r0, r2, r0
   da4d6:	ea83 0101 	eor.w	r1, r3, r1
   da4da:	ea80 0202 	eor.w	r2, r0, r2
   da4de:	ea81 0303 	eor.w	r3, r1, r3
   da4e2:	2d36      	cmp	r5, #54	; 0x36
   da4e4:	bf88      	it	hi
   da4e6:	bd30      	pophi	{r4, r5, pc}
   da4e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da4ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da4f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da4f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da4f8:	d002      	beq.n	da500 <__adddf3+0x70>
   da4fa:	4240      	negs	r0, r0
   da4fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da504:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da50c:	d002      	beq.n	da514 <__adddf3+0x84>
   da50e:	4252      	negs	r2, r2
   da510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da514:	ea94 0f05 	teq	r4, r5
   da518:	f000 80a7 	beq.w	da66a <__adddf3+0x1da>
   da51c:	f1a4 0401 	sub.w	r4, r4, #1
   da520:	f1d5 0e20 	rsbs	lr, r5, #32
   da524:	db0d      	blt.n	da542 <__adddf3+0xb2>
   da526:	fa02 fc0e 	lsl.w	ip, r2, lr
   da52a:	fa22 f205 	lsr.w	r2, r2, r5
   da52e:	1880      	adds	r0, r0, r2
   da530:	f141 0100 	adc.w	r1, r1, #0
   da534:	fa03 f20e 	lsl.w	r2, r3, lr
   da538:	1880      	adds	r0, r0, r2
   da53a:	fa43 f305 	asr.w	r3, r3, r5
   da53e:	4159      	adcs	r1, r3
   da540:	e00e      	b.n	da560 <__adddf3+0xd0>
   da542:	f1a5 0520 	sub.w	r5, r5, #32
   da546:	f10e 0e20 	add.w	lr, lr, #32
   da54a:	2a01      	cmp	r2, #1
   da54c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da550:	bf28      	it	cs
   da552:	f04c 0c02 	orrcs.w	ip, ip, #2
   da556:	fa43 f305 	asr.w	r3, r3, r5
   da55a:	18c0      	adds	r0, r0, r3
   da55c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da564:	d507      	bpl.n	da576 <__adddf3+0xe6>
   da566:	f04f 0e00 	mov.w	lr, #0
   da56a:	f1dc 0c00 	rsbs	ip, ip, #0
   da56e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da572:	eb6e 0101 	sbc.w	r1, lr, r1
   da576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da57a:	d31b      	bcc.n	da5b4 <__adddf3+0x124>
   da57c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da580:	d30c      	bcc.n	da59c <__adddf3+0x10c>
   da582:	0849      	lsrs	r1, r1, #1
   da584:	ea5f 0030 	movs.w	r0, r0, rrx
   da588:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da58c:	f104 0401 	add.w	r4, r4, #1
   da590:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da598:	f080 809a 	bcs.w	da6d0 <__adddf3+0x240>
   da59c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da5a0:	bf08      	it	eq
   da5a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da5a6:	f150 0000 	adcs.w	r0, r0, #0
   da5aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da5ae:	ea41 0105 	orr.w	r1, r1, r5
   da5b2:	bd30      	pop	{r4, r5, pc}
   da5b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da5b8:	4140      	adcs	r0, r0
   da5ba:	eb41 0101 	adc.w	r1, r1, r1
   da5be:	3c01      	subs	r4, #1
   da5c0:	bf28      	it	cs
   da5c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da5c6:	d2e9      	bcs.n	da59c <__adddf3+0x10c>
   da5c8:	f091 0f00 	teq	r1, #0
   da5cc:	bf04      	itt	eq
   da5ce:	4601      	moveq	r1, r0
   da5d0:	2000      	moveq	r0, #0
   da5d2:	fab1 f381 	clz	r3, r1
   da5d6:	bf08      	it	eq
   da5d8:	3320      	addeq	r3, #32
   da5da:	f1a3 030b 	sub.w	r3, r3, #11
   da5de:	f1b3 0220 	subs.w	r2, r3, #32
   da5e2:	da0c      	bge.n	da5fe <__adddf3+0x16e>
   da5e4:	320c      	adds	r2, #12
   da5e6:	dd08      	ble.n	da5fa <__adddf3+0x16a>
   da5e8:	f102 0c14 	add.w	ip, r2, #20
   da5ec:	f1c2 020c 	rsb	r2, r2, #12
   da5f0:	fa01 f00c 	lsl.w	r0, r1, ip
   da5f4:	fa21 f102 	lsr.w	r1, r1, r2
   da5f8:	e00c      	b.n	da614 <__adddf3+0x184>
   da5fa:	f102 0214 	add.w	r2, r2, #20
   da5fe:	bfd8      	it	le
   da600:	f1c2 0c20 	rsble	ip, r2, #32
   da604:	fa01 f102 	lsl.w	r1, r1, r2
   da608:	fa20 fc0c 	lsr.w	ip, r0, ip
   da60c:	bfdc      	itt	le
   da60e:	ea41 010c 	orrle.w	r1, r1, ip
   da612:	4090      	lslle	r0, r2
   da614:	1ae4      	subs	r4, r4, r3
   da616:	bfa2      	ittt	ge
   da618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da61c:	4329      	orrge	r1, r5
   da61e:	bd30      	popge	{r4, r5, pc}
   da620:	ea6f 0404 	mvn.w	r4, r4
   da624:	3c1f      	subs	r4, #31
   da626:	da1c      	bge.n	da662 <__adddf3+0x1d2>
   da628:	340c      	adds	r4, #12
   da62a:	dc0e      	bgt.n	da64a <__adddf3+0x1ba>
   da62c:	f104 0414 	add.w	r4, r4, #20
   da630:	f1c4 0220 	rsb	r2, r4, #32
   da634:	fa20 f004 	lsr.w	r0, r0, r4
   da638:	fa01 f302 	lsl.w	r3, r1, r2
   da63c:	ea40 0003 	orr.w	r0, r0, r3
   da640:	fa21 f304 	lsr.w	r3, r1, r4
   da644:	ea45 0103 	orr.w	r1, r5, r3
   da648:	bd30      	pop	{r4, r5, pc}
   da64a:	f1c4 040c 	rsb	r4, r4, #12
   da64e:	f1c4 0220 	rsb	r2, r4, #32
   da652:	fa20 f002 	lsr.w	r0, r0, r2
   da656:	fa01 f304 	lsl.w	r3, r1, r4
   da65a:	ea40 0003 	orr.w	r0, r0, r3
   da65e:	4629      	mov	r1, r5
   da660:	bd30      	pop	{r4, r5, pc}
   da662:	fa21 f004 	lsr.w	r0, r1, r4
   da666:	4629      	mov	r1, r5
   da668:	bd30      	pop	{r4, r5, pc}
   da66a:	f094 0f00 	teq	r4, #0
   da66e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da672:	bf06      	itte	eq
   da674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da678:	3401      	addeq	r4, #1
   da67a:	3d01      	subne	r5, #1
   da67c:	e74e      	b.n	da51c <__adddf3+0x8c>
   da67e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da682:	bf18      	it	ne
   da684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da688:	d029      	beq.n	da6de <__adddf3+0x24e>
   da68a:	ea94 0f05 	teq	r4, r5
   da68e:	bf08      	it	eq
   da690:	ea90 0f02 	teqeq	r0, r2
   da694:	d005      	beq.n	da6a2 <__adddf3+0x212>
   da696:	ea54 0c00 	orrs.w	ip, r4, r0
   da69a:	bf04      	itt	eq
   da69c:	4619      	moveq	r1, r3
   da69e:	4610      	moveq	r0, r2
   da6a0:	bd30      	pop	{r4, r5, pc}
   da6a2:	ea91 0f03 	teq	r1, r3
   da6a6:	bf1e      	ittt	ne
   da6a8:	2100      	movne	r1, #0
   da6aa:	2000      	movne	r0, #0
   da6ac:	bd30      	popne	{r4, r5, pc}
   da6ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da6b2:	d105      	bne.n	da6c0 <__adddf3+0x230>
   da6b4:	0040      	lsls	r0, r0, #1
   da6b6:	4149      	adcs	r1, r1
   da6b8:	bf28      	it	cs
   da6ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da6be:	bd30      	pop	{r4, r5, pc}
   da6c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da6c4:	bf3c      	itt	cc
   da6c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da6ca:	bd30      	popcc	{r4, r5, pc}
   da6cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da6d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da6d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da6d8:	f04f 0000 	mov.w	r0, #0
   da6dc:	bd30      	pop	{r4, r5, pc}
   da6de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6e2:	bf1a      	itte	ne
   da6e4:	4619      	movne	r1, r3
   da6e6:	4610      	movne	r0, r2
   da6e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da6ec:	bf1c      	itt	ne
   da6ee:	460b      	movne	r3, r1
   da6f0:	4602      	movne	r2, r0
   da6f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da6f6:	bf06      	itte	eq
   da6f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da6fc:	ea91 0f03 	teqeq	r1, r3
   da700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da704:	bd30      	pop	{r4, r5, pc}
   da706:	bf00      	nop

000da708 <__aeabi_ui2d>:
   da708:	f090 0f00 	teq	r0, #0
   da70c:	bf04      	itt	eq
   da70e:	2100      	moveq	r1, #0
   da710:	4770      	bxeq	lr
   da712:	b530      	push	{r4, r5, lr}
   da714:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da718:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da71c:	f04f 0500 	mov.w	r5, #0
   da720:	f04f 0100 	mov.w	r1, #0
   da724:	e750      	b.n	da5c8 <__adddf3+0x138>
   da726:	bf00      	nop

000da728 <__aeabi_i2d>:
   da728:	f090 0f00 	teq	r0, #0
   da72c:	bf04      	itt	eq
   da72e:	2100      	moveq	r1, #0
   da730:	4770      	bxeq	lr
   da732:	b530      	push	{r4, r5, lr}
   da734:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da738:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da73c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da740:	bf48      	it	mi
   da742:	4240      	negmi	r0, r0
   da744:	f04f 0100 	mov.w	r1, #0
   da748:	e73e      	b.n	da5c8 <__adddf3+0x138>
   da74a:	bf00      	nop

000da74c <__aeabi_f2d>:
   da74c:	0042      	lsls	r2, r0, #1
   da74e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da752:	ea4f 0131 	mov.w	r1, r1, rrx
   da756:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da75a:	bf1f      	itttt	ne
   da75c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da768:	4770      	bxne	lr
   da76a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da76e:	bf08      	it	eq
   da770:	4770      	bxeq	lr
   da772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da776:	bf04      	itt	eq
   da778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da77c:	4770      	bxeq	lr
   da77e:	b530      	push	{r4, r5, lr}
   da780:	f44f 7460 	mov.w	r4, #896	; 0x380
   da784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da78c:	e71c      	b.n	da5c8 <__adddf3+0x138>
   da78e:	bf00      	nop

000da790 <__aeabi_ul2d>:
   da790:	ea50 0201 	orrs.w	r2, r0, r1
   da794:	bf08      	it	eq
   da796:	4770      	bxeq	lr
   da798:	b530      	push	{r4, r5, lr}
   da79a:	f04f 0500 	mov.w	r5, #0
   da79e:	e00a      	b.n	da7b6 <__aeabi_l2d+0x16>

000da7a0 <__aeabi_l2d>:
   da7a0:	ea50 0201 	orrs.w	r2, r0, r1
   da7a4:	bf08      	it	eq
   da7a6:	4770      	bxeq	lr
   da7a8:	b530      	push	{r4, r5, lr}
   da7aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da7ae:	d502      	bpl.n	da7b6 <__aeabi_l2d+0x16>
   da7b0:	4240      	negs	r0, r0
   da7b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da7c2:	f43f aed8 	beq.w	da576 <__adddf3+0xe6>
   da7c6:	f04f 0203 	mov.w	r2, #3
   da7ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7ce:	bf18      	it	ne
   da7d0:	3203      	addne	r2, #3
   da7d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7d6:	bf18      	it	ne
   da7d8:	3203      	addne	r2, #3
   da7da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da7de:	f1c2 0320 	rsb	r3, r2, #32
   da7e2:	fa00 fc03 	lsl.w	ip, r0, r3
   da7e6:	fa20 f002 	lsr.w	r0, r0, r2
   da7ea:	fa01 fe03 	lsl.w	lr, r1, r3
   da7ee:	ea40 000e 	orr.w	r0, r0, lr
   da7f2:	fa21 f102 	lsr.w	r1, r1, r2
   da7f6:	4414      	add	r4, r2
   da7f8:	e6bd      	b.n	da576 <__adddf3+0xe6>
   da7fa:	bf00      	nop

000da7fc <__aeabi_dmul>:
   da7fc:	b570      	push	{r4, r5, r6, lr}
   da7fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da80a:	bf1d      	ittte	ne
   da80c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da810:	ea94 0f0c 	teqne	r4, ip
   da814:	ea95 0f0c 	teqne	r5, ip
   da818:	f000 f8de 	bleq	da9d8 <__aeabi_dmul+0x1dc>
   da81c:	442c      	add	r4, r5
   da81e:	ea81 0603 	eor.w	r6, r1, r3
   da822:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da826:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da82a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da82e:	bf18      	it	ne
   da830:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da834:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da83c:	d038      	beq.n	da8b0 <__aeabi_dmul+0xb4>
   da83e:	fba0 ce02 	umull	ip, lr, r0, r2
   da842:	f04f 0500 	mov.w	r5, #0
   da846:	fbe1 e502 	umlal	lr, r5, r1, r2
   da84a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da84e:	fbe0 e503 	umlal	lr, r5, r0, r3
   da852:	f04f 0600 	mov.w	r6, #0
   da856:	fbe1 5603 	umlal	r5, r6, r1, r3
   da85a:	f09c 0f00 	teq	ip, #0
   da85e:	bf18      	it	ne
   da860:	f04e 0e01 	orrne.w	lr, lr, #1
   da864:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da868:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da86c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da870:	d204      	bcs.n	da87c <__aeabi_dmul+0x80>
   da872:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da876:	416d      	adcs	r5, r5
   da878:	eb46 0606 	adc.w	r6, r6, r6
   da87c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da880:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da884:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da888:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da88c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da890:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da894:	bf88      	it	hi
   da896:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da89a:	d81e      	bhi.n	da8da <__aeabi_dmul+0xde>
   da89c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da8a0:	bf08      	it	eq
   da8a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da8a6:	f150 0000 	adcs.w	r0, r0, #0
   da8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da8ae:	bd70      	pop	{r4, r5, r6, pc}
   da8b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da8b4:	ea46 0101 	orr.w	r1, r6, r1
   da8b8:	ea40 0002 	orr.w	r0, r0, r2
   da8bc:	ea81 0103 	eor.w	r1, r1, r3
   da8c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da8c4:	bfc2      	ittt	gt
   da8c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   da8ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da8ce:	bd70      	popgt	{r4, r5, r6, pc}
   da8d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da8d4:	f04f 0e00 	mov.w	lr, #0
   da8d8:	3c01      	subs	r4, #1
   da8da:	f300 80ab 	bgt.w	daa34 <__aeabi_dmul+0x238>
   da8de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da8e2:	bfde      	ittt	le
   da8e4:	2000      	movle	r0, #0
   da8e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da8ea:	bd70      	pople	{r4, r5, r6, pc}
   da8ec:	f1c4 0400 	rsb	r4, r4, #0
   da8f0:	3c20      	subs	r4, #32
   da8f2:	da35      	bge.n	da960 <__aeabi_dmul+0x164>
   da8f4:	340c      	adds	r4, #12
   da8f6:	dc1b      	bgt.n	da930 <__aeabi_dmul+0x134>
   da8f8:	f104 0414 	add.w	r4, r4, #20
   da8fc:	f1c4 0520 	rsb	r5, r4, #32
   da900:	fa00 f305 	lsl.w	r3, r0, r5
   da904:	fa20 f004 	lsr.w	r0, r0, r4
   da908:	fa01 f205 	lsl.w	r2, r1, r5
   da90c:	ea40 0002 	orr.w	r0, r0, r2
   da910:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da914:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da918:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da91c:	fa21 f604 	lsr.w	r6, r1, r4
   da920:	eb42 0106 	adc.w	r1, r2, r6
   da924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da928:	bf08      	it	eq
   da92a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da92e:	bd70      	pop	{r4, r5, r6, pc}
   da930:	f1c4 040c 	rsb	r4, r4, #12
   da934:	f1c4 0520 	rsb	r5, r4, #32
   da938:	fa00 f304 	lsl.w	r3, r0, r4
   da93c:	fa20 f005 	lsr.w	r0, r0, r5
   da940:	fa01 f204 	lsl.w	r2, r1, r4
   da944:	ea40 0002 	orr.w	r0, r0, r2
   da948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da94c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da950:	f141 0100 	adc.w	r1, r1, #0
   da954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da958:	bf08      	it	eq
   da95a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da95e:	bd70      	pop	{r4, r5, r6, pc}
   da960:	f1c4 0520 	rsb	r5, r4, #32
   da964:	fa00 f205 	lsl.w	r2, r0, r5
   da968:	ea4e 0e02 	orr.w	lr, lr, r2
   da96c:	fa20 f304 	lsr.w	r3, r0, r4
   da970:	fa01 f205 	lsl.w	r2, r1, r5
   da974:	ea43 0302 	orr.w	r3, r3, r2
   da978:	fa21 f004 	lsr.w	r0, r1, r4
   da97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da980:	fa21 f204 	lsr.w	r2, r1, r4
   da984:	ea20 0002 	bic.w	r0, r0, r2
   da988:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da98c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da990:	bf08      	it	eq
   da992:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da996:	bd70      	pop	{r4, r5, r6, pc}
   da998:	f094 0f00 	teq	r4, #0
   da99c:	d10f      	bne.n	da9be <__aeabi_dmul+0x1c2>
   da99e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da9a2:	0040      	lsls	r0, r0, #1
   da9a4:	eb41 0101 	adc.w	r1, r1, r1
   da9a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da9ac:	bf08      	it	eq
   da9ae:	3c01      	subeq	r4, #1
   da9b0:	d0f7      	beq.n	da9a2 <__aeabi_dmul+0x1a6>
   da9b2:	ea41 0106 	orr.w	r1, r1, r6
   da9b6:	f095 0f00 	teq	r5, #0
   da9ba:	bf18      	it	ne
   da9bc:	4770      	bxne	lr
   da9be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da9c2:	0052      	lsls	r2, r2, #1
   da9c4:	eb43 0303 	adc.w	r3, r3, r3
   da9c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da9cc:	bf08      	it	eq
   da9ce:	3d01      	subeq	r5, #1
   da9d0:	d0f7      	beq.n	da9c2 <__aeabi_dmul+0x1c6>
   da9d2:	ea43 0306 	orr.w	r3, r3, r6
   da9d6:	4770      	bx	lr
   da9d8:	ea94 0f0c 	teq	r4, ip
   da9dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da9e0:	bf18      	it	ne
   da9e2:	ea95 0f0c 	teqne	r5, ip
   da9e6:	d00c      	beq.n	daa02 <__aeabi_dmul+0x206>
   da9e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9ec:	bf18      	it	ne
   da9ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9f2:	d1d1      	bne.n	da998 <__aeabi_dmul+0x19c>
   da9f4:	ea81 0103 	eor.w	r1, r1, r3
   da9f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9fc:	f04f 0000 	mov.w	r0, #0
   daa00:	bd70      	pop	{r4, r5, r6, pc}
   daa02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   daa06:	bf06      	itte	eq
   daa08:	4610      	moveq	r0, r2
   daa0a:	4619      	moveq	r1, r3
   daa0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa10:	d019      	beq.n	daa46 <__aeabi_dmul+0x24a>
   daa12:	ea94 0f0c 	teq	r4, ip
   daa16:	d102      	bne.n	daa1e <__aeabi_dmul+0x222>
   daa18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa1c:	d113      	bne.n	daa46 <__aeabi_dmul+0x24a>
   daa1e:	ea95 0f0c 	teq	r5, ip
   daa22:	d105      	bne.n	daa30 <__aeabi_dmul+0x234>
   daa24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa28:	bf1c      	itt	ne
   daa2a:	4610      	movne	r0, r2
   daa2c:	4619      	movne	r1, r3
   daa2e:	d10a      	bne.n	daa46 <__aeabi_dmul+0x24a>
   daa30:	ea81 0103 	eor.w	r1, r1, r3
   daa34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa40:	f04f 0000 	mov.w	r0, #0
   daa44:	bd70      	pop	{r4, r5, r6, pc}
   daa46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daa4e:	bd70      	pop	{r4, r5, r6, pc}

000daa50 <__aeabi_ddiv>:
   daa50:	b570      	push	{r4, r5, r6, lr}
   daa52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa5e:	bf1d      	ittte	ne
   daa60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa64:	ea94 0f0c 	teqne	r4, ip
   daa68:	ea95 0f0c 	teqne	r5, ip
   daa6c:	f000 f8a7 	bleq	dabbe <__aeabi_ddiv+0x16e>
   daa70:	eba4 0405 	sub.w	r4, r4, r5
   daa74:	ea81 0e03 	eor.w	lr, r1, r3
   daa78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daa7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daa80:	f000 8088 	beq.w	dab94 <__aeabi_ddiv+0x144>
   daa84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daa88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daa8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daa90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daa94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daa98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daa9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daaa0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daaa4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daaa8:	429d      	cmp	r5, r3
   daaaa:	bf08      	it	eq
   daaac:	4296      	cmpeq	r6, r2
   daaae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daab2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daab6:	d202      	bcs.n	daabe <__aeabi_ddiv+0x6e>
   daab8:	085b      	lsrs	r3, r3, #1
   daaba:	ea4f 0232 	mov.w	r2, r2, rrx
   daabe:	1ab6      	subs	r6, r6, r2
   daac0:	eb65 0503 	sbc.w	r5, r5, r3
   daac4:	085b      	lsrs	r3, r3, #1
   daac6:	ea4f 0232 	mov.w	r2, r2, rrx
   daaca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daace:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daad2:	ebb6 0e02 	subs.w	lr, r6, r2
   daad6:	eb75 0e03 	sbcs.w	lr, r5, r3
   daada:	bf22      	ittt	cs
   daadc:	1ab6      	subcs	r6, r6, r2
   daade:	4675      	movcs	r5, lr
   daae0:	ea40 000c 	orrcs.w	r0, r0, ip
   daae4:	085b      	lsrs	r3, r3, #1
   daae6:	ea4f 0232 	mov.w	r2, r2, rrx
   daaea:	ebb6 0e02 	subs.w	lr, r6, r2
   daaee:	eb75 0e03 	sbcs.w	lr, r5, r3
   daaf2:	bf22      	ittt	cs
   daaf4:	1ab6      	subcs	r6, r6, r2
   daaf6:	4675      	movcs	r5, lr
   daaf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daafc:	085b      	lsrs	r3, r3, #1
   daafe:	ea4f 0232 	mov.w	r2, r2, rrx
   dab02:	ebb6 0e02 	subs.w	lr, r6, r2
   dab06:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab0a:	bf22      	ittt	cs
   dab0c:	1ab6      	subcs	r6, r6, r2
   dab0e:	4675      	movcs	r5, lr
   dab10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab14:	085b      	lsrs	r3, r3, #1
   dab16:	ea4f 0232 	mov.w	r2, r2, rrx
   dab1a:	ebb6 0e02 	subs.w	lr, r6, r2
   dab1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab22:	bf22      	ittt	cs
   dab24:	1ab6      	subcs	r6, r6, r2
   dab26:	4675      	movcs	r5, lr
   dab28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab2c:	ea55 0e06 	orrs.w	lr, r5, r6
   dab30:	d018      	beq.n	dab64 <__aeabi_ddiv+0x114>
   dab32:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dab46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dab4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dab4e:	d1c0      	bne.n	daad2 <__aeabi_ddiv+0x82>
   dab50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab54:	d10b      	bne.n	dab6e <__aeabi_ddiv+0x11e>
   dab56:	ea41 0100 	orr.w	r1, r1, r0
   dab5a:	f04f 0000 	mov.w	r0, #0
   dab5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab62:	e7b6      	b.n	daad2 <__aeabi_ddiv+0x82>
   dab64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab68:	bf04      	itt	eq
   dab6a:	4301      	orreq	r1, r0
   dab6c:	2000      	moveq	r0, #0
   dab6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab72:	bf88      	it	hi
   dab74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab78:	f63f aeaf 	bhi.w	da8da <__aeabi_dmul+0xde>
   dab7c:	ebb5 0c03 	subs.w	ip, r5, r3
   dab80:	bf04      	itt	eq
   dab82:	ebb6 0c02 	subseq.w	ip, r6, r2
   dab86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab8a:	f150 0000 	adcs.w	r0, r0, #0
   dab8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab92:	bd70      	pop	{r4, r5, r6, pc}
   dab94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dab98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dab9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   daba0:	bfc2      	ittt	gt
   daba2:	ebd4 050c 	rsbsgt	r5, r4, ip
   daba6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dabaa:	bd70      	popgt	{r4, r5, r6, pc}
   dabac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabb0:	f04f 0e00 	mov.w	lr, #0
   dabb4:	3c01      	subs	r4, #1
   dabb6:	e690      	b.n	da8da <__aeabi_dmul+0xde>
   dabb8:	ea45 0e06 	orr.w	lr, r5, r6
   dabbc:	e68d      	b.n	da8da <__aeabi_dmul+0xde>
   dabbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dabc2:	ea94 0f0c 	teq	r4, ip
   dabc6:	bf08      	it	eq
   dabc8:	ea95 0f0c 	teqeq	r5, ip
   dabcc:	f43f af3b 	beq.w	daa46 <__aeabi_dmul+0x24a>
   dabd0:	ea94 0f0c 	teq	r4, ip
   dabd4:	d10a      	bne.n	dabec <__aeabi_ddiv+0x19c>
   dabd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dabda:	f47f af34 	bne.w	daa46 <__aeabi_dmul+0x24a>
   dabde:	ea95 0f0c 	teq	r5, ip
   dabe2:	f47f af25 	bne.w	daa30 <__aeabi_dmul+0x234>
   dabe6:	4610      	mov	r0, r2
   dabe8:	4619      	mov	r1, r3
   dabea:	e72c      	b.n	daa46 <__aeabi_dmul+0x24a>
   dabec:	ea95 0f0c 	teq	r5, ip
   dabf0:	d106      	bne.n	dac00 <__aeabi_ddiv+0x1b0>
   dabf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dabf6:	f43f aefd 	beq.w	da9f4 <__aeabi_dmul+0x1f8>
   dabfa:	4610      	mov	r0, r2
   dabfc:	4619      	mov	r1, r3
   dabfe:	e722      	b.n	daa46 <__aeabi_dmul+0x24a>
   dac00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dac04:	bf18      	it	ne
   dac06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac0a:	f47f aec5 	bne.w	da998 <__aeabi_dmul+0x19c>
   dac0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dac12:	f47f af0d 	bne.w	daa30 <__aeabi_dmul+0x234>
   dac16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac1a:	f47f aeeb 	bne.w	da9f4 <__aeabi_dmul+0x1f8>
   dac1e:	e712      	b.n	daa46 <__aeabi_dmul+0x24a>

000dac20 <__aeabi_d2uiz>:
   dac20:	004a      	lsls	r2, r1, #1
   dac22:	d211      	bcs.n	dac48 <__aeabi_d2uiz+0x28>
   dac24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dac28:	d211      	bcs.n	dac4e <__aeabi_d2uiz+0x2e>
   dac2a:	d50d      	bpl.n	dac48 <__aeabi_d2uiz+0x28>
   dac2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dac30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dac34:	d40e      	bmi.n	dac54 <__aeabi_d2uiz+0x34>
   dac36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dac3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dac3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dac42:	fa23 f002 	lsr.w	r0, r3, r2
   dac46:	4770      	bx	lr
   dac48:	f04f 0000 	mov.w	r0, #0
   dac4c:	4770      	bx	lr
   dac4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dac52:	d102      	bne.n	dac5a <__aeabi_d2uiz+0x3a>
   dac54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dac58:	4770      	bx	lr
   dac5a:	f04f 0000 	mov.w	r0, #0
   dac5e:	4770      	bx	lr

000dac60 <__aeabi_d2f>:
   dac60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dac64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dac68:	bf24      	itt	cs
   dac6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dac6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dac72:	d90d      	bls.n	dac90 <__aeabi_d2f+0x30>
   dac74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dac78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dac7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dac80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dac84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dac88:	bf08      	it	eq
   dac8a:	f020 0001 	biceq.w	r0, r0, #1
   dac8e:	4770      	bx	lr
   dac90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dac94:	d121      	bne.n	dacda <__aeabi_d2f+0x7a>
   dac96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dac9a:	bfbc      	itt	lt
   dac9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   daca0:	4770      	bxlt	lr
   daca2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daca6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dacaa:	f1c2 0218 	rsb	r2, r2, #24
   dacae:	f1c2 0c20 	rsb	ip, r2, #32
   dacb2:	fa10 f30c 	lsls.w	r3, r0, ip
   dacb6:	fa20 f002 	lsr.w	r0, r0, r2
   dacba:	bf18      	it	ne
   dacbc:	f040 0001 	orrne.w	r0, r0, #1
   dacc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dacc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dacc8:	fa03 fc0c 	lsl.w	ip, r3, ip
   daccc:	ea40 000c 	orr.w	r0, r0, ip
   dacd0:	fa23 f302 	lsr.w	r3, r3, r2
   dacd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dacd8:	e7cc      	b.n	dac74 <__aeabi_d2f+0x14>
   dacda:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dacde:	d107      	bne.n	dacf0 <__aeabi_d2f+0x90>
   dace0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dace4:	bf1e      	ittt	ne
   dace6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dacea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dacee:	4770      	bxne	lr
   dacf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dacf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dacf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dacfc:	4770      	bx	lr
   dacfe:	bf00      	nop

000dad00 <__aeabi_f2lz>:
   dad00:	ee07 0a90 	vmov	s15, r0
   dad04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dad08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dad0c:	d401      	bmi.n	dad12 <__aeabi_f2lz+0x12>
   dad0e:	f000 b80b 	b.w	dad28 <__aeabi_f2ulz>
   dad12:	eef1 7a67 	vneg.f32	s15, s15
   dad16:	b508      	push	{r3, lr}
   dad18:	ee17 0a90 	vmov	r0, s15
   dad1c:	f000 f804 	bl	dad28 <__aeabi_f2ulz>
   dad20:	4240      	negs	r0, r0
   dad22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dad26:	bd08      	pop	{r3, pc}

000dad28 <__aeabi_f2ulz>:
   dad28:	b5d0      	push	{r4, r6, r7, lr}
   dad2a:	f7ff fd0f 	bl	da74c <__aeabi_f2d>
   dad2e:	4b0c      	ldr	r3, [pc, #48]	; (dad60 <__aeabi_f2ulz+0x38>)
   dad30:	2200      	movs	r2, #0
   dad32:	4606      	mov	r6, r0
   dad34:	460f      	mov	r7, r1
   dad36:	f7ff fd61 	bl	da7fc <__aeabi_dmul>
   dad3a:	f7ff ff71 	bl	dac20 <__aeabi_d2uiz>
   dad3e:	4604      	mov	r4, r0
   dad40:	f7ff fce2 	bl	da708 <__aeabi_ui2d>
   dad44:	4b07      	ldr	r3, [pc, #28]	; (dad64 <__aeabi_f2ulz+0x3c>)
   dad46:	2200      	movs	r2, #0
   dad48:	f7ff fd58 	bl	da7fc <__aeabi_dmul>
   dad4c:	4602      	mov	r2, r0
   dad4e:	460b      	mov	r3, r1
   dad50:	4630      	mov	r0, r6
   dad52:	4639      	mov	r1, r7
   dad54:	f7ff fb9a 	bl	da48c <__aeabi_dsub>
   dad58:	f7ff ff62 	bl	dac20 <__aeabi_d2uiz>
   dad5c:	4621      	mov	r1, r4
   dad5e:	bdd0      	pop	{r4, r6, r7, pc}
   dad60:	3df00000 	.word	0x3df00000
   dad64:	41f00000 	.word	0x41f00000

000dad68 <asctime_r>:
   dad68:	b510      	push	{r4, lr}
   dad6a:	460c      	mov	r4, r1
   dad6c:	6941      	ldr	r1, [r0, #20]
   dad6e:	6903      	ldr	r3, [r0, #16]
   dad70:	6982      	ldr	r2, [r0, #24]
   dad72:	b086      	sub	sp, #24
   dad74:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dad78:	9104      	str	r1, [sp, #16]
   dad7a:	6801      	ldr	r1, [r0, #0]
   dad7c:	9103      	str	r1, [sp, #12]
   dad7e:	6841      	ldr	r1, [r0, #4]
   dad80:	9102      	str	r1, [sp, #8]
   dad82:	6881      	ldr	r1, [r0, #8]
   dad84:	9101      	str	r1, [sp, #4]
   dad86:	68c1      	ldr	r1, [r0, #12]
   dad88:	9100      	str	r1, [sp, #0]
   dad8a:	4907      	ldr	r1, [pc, #28]	; (dada8 <asctime_r+0x40>)
   dad8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dad90:	440b      	add	r3, r1
   dad92:	4906      	ldr	r1, [pc, #24]	; (dadac <asctime_r+0x44>)
   dad94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dad98:	440a      	add	r2, r1
   dad9a:	4620      	mov	r0, r4
   dad9c:	4904      	ldr	r1, [pc, #16]	; (dadb0 <asctime_r+0x48>)
   dad9e:	f7fd fd29 	bl	d87f4 <siprintf>
   dada2:	4620      	mov	r0, r4
   dada4:	b006      	add	sp, #24
   dada6:	bd10      	pop	{r4, pc}
   dada8:	000dbbd6 	.word	0x000dbbd6
   dadac:	000dbbc1 	.word	0x000dbbc1
   dadb0:	000dbba1 	.word	0x000dbba1

000dadb4 <atoi>:
   dadb4:	220a      	movs	r2, #10
   dadb6:	2100      	movs	r1, #0
   dadb8:	f000 b93c 	b.w	db034 <strtol>

000dadbc <atol>:
   dadbc:	220a      	movs	r2, #10
   dadbe:	2100      	movs	r1, #0
   dadc0:	f000 b938 	b.w	db034 <strtol>

000dadc4 <__cxa_atexit>:
   dadc4:	b510      	push	{r4, lr}
   dadc6:	4c05      	ldr	r4, [pc, #20]	; (daddc <__cxa_atexit+0x18>)
   dadc8:	4613      	mov	r3, r2
   dadca:	b12c      	cbz	r4, dadd8 <__cxa_atexit+0x14>
   dadcc:	460a      	mov	r2, r1
   dadce:	4601      	mov	r1, r0
   dadd0:	2002      	movs	r0, #2
   dadd2:	f3af 8000 	nop.w
   dadd6:	bd10      	pop	{r4, pc}
   dadd8:	4620      	mov	r0, r4
   dadda:	e7fc      	b.n	dadd6 <__cxa_atexit+0x12>
   daddc:	00000000 	.word	0x00000000

000dade0 <gmtime>:
   dade0:	b538      	push	{r3, r4, r5, lr}
   dade2:	4b07      	ldr	r3, [pc, #28]	; (dae00 <gmtime+0x20>)
   dade4:	681d      	ldr	r5, [r3, #0]
   dade6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dade8:	4604      	mov	r4, r0
   dadea:	b91b      	cbnz	r3, dadf4 <gmtime+0x14>
   dadec:	2024      	movs	r0, #36	; 0x24
   dadee:	f7fd fce9 	bl	d87c4 <malloc>
   dadf2:	63e8      	str	r0, [r5, #60]	; 0x3c
   dadf4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dadf6:	4620      	mov	r0, r4
   dadf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dadfc:	f7fd bd3a 	b.w	d8874 <gmtime_r>
   dae00:	2003e198 	.word	0x2003e198

000dae04 <memcpy>:
   dae04:	440a      	add	r2, r1
   dae06:	4291      	cmp	r1, r2
   dae08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dae0c:	d100      	bne.n	dae10 <memcpy+0xc>
   dae0e:	4770      	bx	lr
   dae10:	b510      	push	{r4, lr}
   dae12:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae16:	f803 4f01 	strb.w	r4, [r3, #1]!
   dae1a:	4291      	cmp	r1, r2
   dae1c:	d1f9      	bne.n	dae12 <memcpy+0xe>
   dae1e:	bd10      	pop	{r4, pc}

000dae20 <memmove>:
   dae20:	4288      	cmp	r0, r1
   dae22:	b510      	push	{r4, lr}
   dae24:	eb01 0402 	add.w	r4, r1, r2
   dae28:	d902      	bls.n	dae30 <memmove+0x10>
   dae2a:	4284      	cmp	r4, r0
   dae2c:	4623      	mov	r3, r4
   dae2e:	d807      	bhi.n	dae40 <memmove+0x20>
   dae30:	1e43      	subs	r3, r0, #1
   dae32:	42a1      	cmp	r1, r4
   dae34:	d008      	beq.n	dae48 <memmove+0x28>
   dae36:	f811 2b01 	ldrb.w	r2, [r1], #1
   dae3a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dae3e:	e7f8      	b.n	dae32 <memmove+0x12>
   dae40:	4402      	add	r2, r0
   dae42:	4601      	mov	r1, r0
   dae44:	428a      	cmp	r2, r1
   dae46:	d100      	bne.n	dae4a <memmove+0x2a>
   dae48:	bd10      	pop	{r4, pc}
   dae4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dae4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dae52:	e7f7      	b.n	dae44 <memmove+0x24>

000dae54 <memset>:
   dae54:	4402      	add	r2, r0
   dae56:	4603      	mov	r3, r0
   dae58:	4293      	cmp	r3, r2
   dae5a:	d100      	bne.n	dae5e <memset+0xa>
   dae5c:	4770      	bx	lr
   dae5e:	f803 1b01 	strb.w	r1, [r3], #1
   dae62:	e7f9      	b.n	dae58 <memset+0x4>

000dae64 <srand>:
   dae64:	b538      	push	{r3, r4, r5, lr}
   dae66:	4b0d      	ldr	r3, [pc, #52]	; (dae9c <srand+0x38>)
   dae68:	681d      	ldr	r5, [r3, #0]
   dae6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dae6c:	4604      	mov	r4, r0
   dae6e:	b97b      	cbnz	r3, dae90 <srand+0x2c>
   dae70:	2018      	movs	r0, #24
   dae72:	f7fd fca7 	bl	d87c4 <malloc>
   dae76:	4a0a      	ldr	r2, [pc, #40]	; (daea0 <srand+0x3c>)
   dae78:	4b0a      	ldr	r3, [pc, #40]	; (daea4 <srand+0x40>)
   dae7a:	63a8      	str	r0, [r5, #56]	; 0x38
   dae7c:	e9c0 2300 	strd	r2, r3, [r0]
   dae80:	4b09      	ldr	r3, [pc, #36]	; (daea8 <srand+0x44>)
   dae82:	6083      	str	r3, [r0, #8]
   dae84:	230b      	movs	r3, #11
   dae86:	8183      	strh	r3, [r0, #12]
   dae88:	2201      	movs	r2, #1
   dae8a:	2300      	movs	r3, #0
   dae8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dae90:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dae92:	2200      	movs	r2, #0
   dae94:	611c      	str	r4, [r3, #16]
   dae96:	615a      	str	r2, [r3, #20]
   dae98:	bd38      	pop	{r3, r4, r5, pc}
   dae9a:	bf00      	nop
   dae9c:	2003e198 	.word	0x2003e198
   daea0:	abcd330e 	.word	0xabcd330e
   daea4:	e66d1234 	.word	0xe66d1234
   daea8:	0005deec 	.word	0x0005deec

000daeac <strcmp>:
   daeac:	f810 2b01 	ldrb.w	r2, [r0], #1
   daeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
   daeb4:	2a01      	cmp	r2, #1
   daeb6:	bf28      	it	cs
   daeb8:	429a      	cmpcs	r2, r3
   daeba:	d0f7      	beq.n	daeac <strcmp>
   daebc:	1ad0      	subs	r0, r2, r3
   daebe:	4770      	bx	lr

000daec0 <strcpy>:
   daec0:	4603      	mov	r3, r0
   daec2:	f811 2b01 	ldrb.w	r2, [r1], #1
   daec6:	f803 2b01 	strb.w	r2, [r3], #1
   daeca:	2a00      	cmp	r2, #0
   daecc:	d1f9      	bne.n	daec2 <strcpy+0x2>
   daece:	4770      	bx	lr

000daed0 <strdup>:
   daed0:	4b02      	ldr	r3, [pc, #8]	; (daedc <strdup+0xc>)
   daed2:	4601      	mov	r1, r0
   daed4:	6818      	ldr	r0, [r3, #0]
   daed6:	f000 b803 	b.w	daee0 <_strdup_r>
   daeda:	bf00      	nop
   daedc:	2003e198 	.word	0x2003e198

000daee0 <_strdup_r>:
   daee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   daee2:	4604      	mov	r4, r0
   daee4:	4608      	mov	r0, r1
   daee6:	460d      	mov	r5, r1
   daee8:	f000 f80f 	bl	daf0a <strlen>
   daeec:	1c42      	adds	r2, r0, #1
   daeee:	4611      	mov	r1, r2
   daef0:	4620      	mov	r0, r4
   daef2:	9201      	str	r2, [sp, #4]
   daef4:	f7fd fc9e 	bl	d8834 <_malloc_r>
   daef8:	4604      	mov	r4, r0
   daefa:	b118      	cbz	r0, daf04 <_strdup_r+0x24>
   daefc:	9a01      	ldr	r2, [sp, #4]
   daefe:	4629      	mov	r1, r5
   daf00:	f7ff ff80 	bl	dae04 <memcpy>
   daf04:	4620      	mov	r0, r4
   daf06:	b003      	add	sp, #12
   daf08:	bd30      	pop	{r4, r5, pc}

000daf0a <strlen>:
   daf0a:	4603      	mov	r3, r0
   daf0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   daf10:	2a00      	cmp	r2, #0
   daf12:	d1fb      	bne.n	daf0c <strlen+0x2>
   daf14:	1a18      	subs	r0, r3, r0
   daf16:	3801      	subs	r0, #1
   daf18:	4770      	bx	lr

000daf1a <strncpy>:
   daf1a:	b510      	push	{r4, lr}
   daf1c:	3901      	subs	r1, #1
   daf1e:	4603      	mov	r3, r0
   daf20:	b132      	cbz	r2, daf30 <strncpy+0x16>
   daf22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daf26:	f803 4b01 	strb.w	r4, [r3], #1
   daf2a:	3a01      	subs	r2, #1
   daf2c:	2c00      	cmp	r4, #0
   daf2e:	d1f7      	bne.n	daf20 <strncpy+0x6>
   daf30:	441a      	add	r2, r3
   daf32:	2100      	movs	r1, #0
   daf34:	4293      	cmp	r3, r2
   daf36:	d100      	bne.n	daf3a <strncpy+0x20>
   daf38:	bd10      	pop	{r4, pc}
   daf3a:	f803 1b01 	strb.w	r1, [r3], #1
   daf3e:	e7f9      	b.n	daf34 <strncpy+0x1a>

000daf40 <_strtol_l.isra.0>:
   daf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daf44:	4e3a      	ldr	r6, [pc, #232]	; (db030 <_strtol_l.isra.0+0xf0>)
   daf46:	4686      	mov	lr, r0
   daf48:	468c      	mov	ip, r1
   daf4a:	4660      	mov	r0, ip
   daf4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   daf50:	5da5      	ldrb	r5, [r4, r6]
   daf52:	f015 0508 	ands.w	r5, r5, #8
   daf56:	d1f8      	bne.n	daf4a <_strtol_l.isra.0+0xa>
   daf58:	2c2d      	cmp	r4, #45	; 0x2d
   daf5a:	d133      	bne.n	dafc4 <_strtol_l.isra.0+0x84>
   daf5c:	f89c 4000 	ldrb.w	r4, [ip]
   daf60:	f04f 0801 	mov.w	r8, #1
   daf64:	f100 0c02 	add.w	ip, r0, #2
   daf68:	2b00      	cmp	r3, #0
   daf6a:	d05c      	beq.n	db026 <_strtol_l.isra.0+0xe6>
   daf6c:	2b10      	cmp	r3, #16
   daf6e:	d10c      	bne.n	daf8a <_strtol_l.isra.0+0x4a>
   daf70:	2c30      	cmp	r4, #48	; 0x30
   daf72:	d10a      	bne.n	daf8a <_strtol_l.isra.0+0x4a>
   daf74:	f89c 0000 	ldrb.w	r0, [ip]
   daf78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daf7c:	2858      	cmp	r0, #88	; 0x58
   daf7e:	d14d      	bne.n	db01c <_strtol_l.isra.0+0xdc>
   daf80:	f89c 4001 	ldrb.w	r4, [ip, #1]
   daf84:	2310      	movs	r3, #16
   daf86:	f10c 0c02 	add.w	ip, ip, #2
   daf8a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   daf8e:	3f01      	subs	r7, #1
   daf90:	2600      	movs	r6, #0
   daf92:	fbb7 f9f3 	udiv	r9, r7, r3
   daf96:	4630      	mov	r0, r6
   daf98:	fb03 7a19 	mls	sl, r3, r9, r7
   daf9c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dafa0:	2d09      	cmp	r5, #9
   dafa2:	d818      	bhi.n	dafd6 <_strtol_l.isra.0+0x96>
   dafa4:	462c      	mov	r4, r5
   dafa6:	42a3      	cmp	r3, r4
   dafa8:	dd24      	ble.n	daff4 <_strtol_l.isra.0+0xb4>
   dafaa:	1c75      	adds	r5, r6, #1
   dafac:	d007      	beq.n	dafbe <_strtol_l.isra.0+0x7e>
   dafae:	4581      	cmp	r9, r0
   dafb0:	d31d      	bcc.n	dafee <_strtol_l.isra.0+0xae>
   dafb2:	d101      	bne.n	dafb8 <_strtol_l.isra.0+0x78>
   dafb4:	45a2      	cmp	sl, r4
   dafb6:	db1a      	blt.n	dafee <_strtol_l.isra.0+0xae>
   dafb8:	fb00 4003 	mla	r0, r0, r3, r4
   dafbc:	2601      	movs	r6, #1
   dafbe:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dafc2:	e7eb      	b.n	daf9c <_strtol_l.isra.0+0x5c>
   dafc4:	2c2b      	cmp	r4, #43	; 0x2b
   dafc6:	bf08      	it	eq
   dafc8:	f89c 4000 	ldrbeq.w	r4, [ip]
   dafcc:	46a8      	mov	r8, r5
   dafce:	bf08      	it	eq
   dafd0:	f100 0c02 	addeq.w	ip, r0, #2
   dafd4:	e7c8      	b.n	daf68 <_strtol_l.isra.0+0x28>
   dafd6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dafda:	2d19      	cmp	r5, #25
   dafdc:	d801      	bhi.n	dafe2 <_strtol_l.isra.0+0xa2>
   dafde:	3c37      	subs	r4, #55	; 0x37
   dafe0:	e7e1      	b.n	dafa6 <_strtol_l.isra.0+0x66>
   dafe2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dafe6:	2d19      	cmp	r5, #25
   dafe8:	d804      	bhi.n	daff4 <_strtol_l.isra.0+0xb4>
   dafea:	3c57      	subs	r4, #87	; 0x57
   dafec:	e7db      	b.n	dafa6 <_strtol_l.isra.0+0x66>
   dafee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   daff2:	e7e4      	b.n	dafbe <_strtol_l.isra.0+0x7e>
   daff4:	1c73      	adds	r3, r6, #1
   daff6:	d106      	bne.n	db006 <_strtol_l.isra.0+0xc6>
   daff8:	2322      	movs	r3, #34	; 0x22
   daffa:	f8ce 3000 	str.w	r3, [lr]
   daffe:	4638      	mov	r0, r7
   db000:	b942      	cbnz	r2, db014 <_strtol_l.isra.0+0xd4>
   db002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db006:	f1b8 0f00 	cmp.w	r8, #0
   db00a:	d000      	beq.n	db00e <_strtol_l.isra.0+0xce>
   db00c:	4240      	negs	r0, r0
   db00e:	2a00      	cmp	r2, #0
   db010:	d0f7      	beq.n	db002 <_strtol_l.isra.0+0xc2>
   db012:	b10e      	cbz	r6, db018 <_strtol_l.isra.0+0xd8>
   db014:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   db018:	6011      	str	r1, [r2, #0]
   db01a:	e7f2      	b.n	db002 <_strtol_l.isra.0+0xc2>
   db01c:	2430      	movs	r4, #48	; 0x30
   db01e:	2b00      	cmp	r3, #0
   db020:	d1b3      	bne.n	daf8a <_strtol_l.isra.0+0x4a>
   db022:	2308      	movs	r3, #8
   db024:	e7b1      	b.n	daf8a <_strtol_l.isra.0+0x4a>
   db026:	2c30      	cmp	r4, #48	; 0x30
   db028:	d0a4      	beq.n	daf74 <_strtol_l.isra.0+0x34>
   db02a:	230a      	movs	r3, #10
   db02c:	e7ad      	b.n	daf8a <_strtol_l.isra.0+0x4a>
   db02e:	bf00      	nop
   db030:	000dbbfb 	.word	0x000dbbfb

000db034 <strtol>:
   db034:	4613      	mov	r3, r2
   db036:	460a      	mov	r2, r1
   db038:	4601      	mov	r1, r0
   db03a:	4802      	ldr	r0, [pc, #8]	; (db044 <strtol+0x10>)
   db03c:	6800      	ldr	r0, [r0, #0]
   db03e:	f7ff bf7f 	b.w	daf40 <_strtol_l.isra.0>
   db042:	bf00      	nop
   db044:	2003e198 	.word	0x2003e198

000db048 <dynalib_user>:
   db048:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   db058:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   db068:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   db078:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   db088:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   db098:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   db0a8:	69677261 4f00676e 6556206e 6c636968     arging.On Vehicl
   db0b8:	77502065 664f0072 65562066 6c636968     e Pwr.Off Vehicl
   db0c8:	77502065 61460072 00746c75 6f636944     e Pwr.Fault.Dico
   db0d8:	63656e6e 00646574 44206f4e 00617461     nnected.No Data.
   db0e8:	70736552 65736e6f 63655220 65766965     Response Receive
   db0f8:	6e550064 776f6e6b 6572206e 6e6f7073     d.Unknown respon
   db108:	72206573 76656365 20646569 55006925     se recevied %i.U
   db118:	6f646962 48207374 006b6f6f 20746553     bidots Hook.Set 
   db128:	62726556 2065736f 65646f4d 43003000     Verbose Mode.0.C
   db138:	7261656c 56206465 6f627265 4d206573     leared Verbose M
   db148:	0065646f 312e3225 54552066 69540043     ode.%2.1f UTC.Ti
   db158:	7a20656d 20656e6f 7366666f 25207465     me zone offset %
   db168:	69540069 5300656d 6c706d61 6e492065     i.Time.Sample In
   db178:	76726574 69206c61 6f6e2073 69252077     terval is now %i
   db188:	6e696d20 73657475 63227b00 6e696261      minutes.{"cabin
   db198:	253a2254 66322e34 7622202c 54746e65     T":%4.2f, "ventT
   db1a8:	34253a22 2c66322e 756f2220 64697374     ":%4.2f, "outsid
   db1b8:	3a225465 322e3425 22202c66 74746162     eT":%4.2f, "batt
   db1c8:	22797265 2c69253a 6b222020 22317965     ery":%i,  "key1"
   db1d8:	7325223a 22202c22 65736572 3a227374     :"%s", "resets":
   db1e8:	202c6925 656c6122 22737472 2c69253a     %i, "alerts":%i,
   db1f8:	69742220 7473656d 22706d61 756c253a      "timestamp":%lu
   db208:	2c303030 616c2220 253a2274 22202c66     000, "lat":%f, "
   db218:	22676e6c 7d66253a 69625500 73746f64     lng":%f}.Ubidots
   db228:	54424d2d 6f482d41 762d6b6f 61502d32     -MBTA-Hook-v2-Pa
   db238:	00657372 6c206f6e 7461636f 206e6f69     rse.no location 
   db248:	65746173 74696c6c 253a7365 6f6c0064     satellites:%d.lo
   db258:	69746163 203a6e6f 202c6625 61206625     cation: %f, %f a
   db268:	7469746c 3a656475 2e342520 206d6631     ltitude: %4.1fm 
   db278:	73206425 65747461 6574696c 70670073     %d sattelites.gp
   db288:	73250073 253a5320 66302e32 202c2525     s.%s S:%2.0f%%, 
   db298:	32253a51 2566302e 46002025 206d6f72     Q:%2.0f%% .From 
   db2a8:	74207325 7325206f 61745300 54206574     %s to %s.State T
   db2b8:	736e6172 6f697469 5441006e 5546432b     ransition.AT+CFU
   db2c8:	35313d4e 52000a0d 696e6e75 4400676e     N=15...Running.D
   db2d8:	796c6961 656c4320 70756e61 54534400     aily Cleanup.DST
   db2e8:	66666f20 20746573 312e3225 34250066      offset %2.1f.%4
   db2f8:	2066322e 6f4c0046 6e696461 79532067     .2f F.Loading Sy
   db308:	6d657473 66654420 746c7561 69530073     stem Defaults.Si
   db318:	6c616e67 6d615300 49656c70 7265746e     gnal.SampleInter
   db328:	006c6176 65736552 756f4374 4300746e     val.ResetCount.C
   db338:	6e696261 706d6554 6e655600 6d655474     abinTemp.VentTem
   db348:	754f0070 64697374 6d655465 65520070     p.OutsideTemp.Re
   db358:	7361656c 74730065 4f657461 67684366     lease.stateOfChg
   db368:	656c4100 00737472 656d6954 7366664f     .Alerts.TimeOffs
   db378:	42007465 65747461 6f437972 7865746e     et.BatteryContex
   db388:	614c0074 50207473 7265776f 72006465     t.Last Powered.r
   db398:	74657365 4d415246 6e655300 776f4e64     esetFRAM.SendNow
   db3a8:	72655600 65736f62 646f4d2d 65530065     .Verbose-Mode.Se
   db3b8:	69542d74 6f7a656d 5300656e 442d7465     t-Timezone.Set-D
   db3c8:	664f5453 74657366 61745300 70757472     STOffset.Startup
   db3d8:	6d6f4320 74656c70 74530065 00657461      Complete.State.
   db3e8:	63757453 6e69206b 656c7320 73207065     Stuck in sleep s
   db3f8:	65746174 61707300 642f6b72 63697665     tate.spark/devic
   db408:	65732f65 6f697373 6e652f6e 72450064     e/session/end.Er
   db418:	20726f72 74617453 202d2065 65736552     ror State - Rese
   db428:	72450074 20726f72 74617453 202d2065     t.Error State - 
   db438:	65776f50 79432072 00656c63 2074754f     Power Cycle.Out 
   db448:	6d20666f 726f6d65 636f2079 72727563     of memory occurr
   db458:	73206465 3d657a69 4d006425 726f6d65     ed size=%d.Memor
   db468:	00000079                                y...

000db46c <_ZTV8MB85RC64>:
	...
   db474:	000d414d 000d4161 000d747d 000d7513     MA..aA..}t...u..
   db484:	000d7595                                .u..

000db488 <_ZTV17PublishQueueAsync>:
	...
   db490:	000d4125 000d4139 000d7b2d 000d7cb9     %A..9A..-{...|..
   db4a0:	000d7c79 000d7c57 000d7dff 000d7c9f     y|..W|...}...|..
   db4b0:	000db05c 000db064 000db069 000db06e     \...d...i...n...
   db4c0:	000db072 000db077 000db07c 000db080     r...w...|.......
   db4d0:	000db08b 000db096 000db05c 000db0a2     ........\.......
   db4e0:	000db0a6 000db0af 000db0be 000db0ce     ................
   db4f0:	000db0d4                                ....

000db4f4 <_ZL17FRAMversionNumber>:
   db4f4:	69616602 2064656c 72206f74 20646165     .failed to read 
   db504:	41676572 3d726464 78323025 756f6320     regAddr=%02x cou
   db514:	253d746e 61660075 64656c69 206f7420     nt=%u.failed to 
   db524:	64616572 67657220 72646441 3230253d     read regAddr=%02
   db534:	74732078 253d7461 4f460064 64205455     x stat=%d.FOUT d
   db544:	6e206469 6720746f 4948206f 6e004847     id not go HIGH.n
   db554:	6420746f 63657465 00646574 6c696166     ot detected.fail
   db564:	74206465 7277206f 20657469 41676572     ed to write regA
   db574:	3d726464 78323025 61747320 64253d74     ddr=%02x stat=%d
   db584:	74657300 20544457 77006425 68637461     .setWDT %d.watch
   db594:	20676f64 61656c63 20646572 73655262     dog cleared bRes
   db5a4:	3d746c75 77006425 68637461 20676f64     ult=%d.watchdog 
   db5b4:	20746573 72756f66 73636553 2064253d     set fourSecs=%d 
   db5c4:	73655262 3d746c75 57006425 48435441     bResult=%d.WATCH
   db5d4:	00474f44 50454544 574f505f 445f5245     DOG.DEEP_POWER_D
   db5e4:	004e574f 4e554f43 574f4454 49545f4e     OWN.COUNTDOWN_TI
   db5f4:	0052454d 52414c41 6166004d 72756c69     MER.ALARM.failur
   db604:	6e692065 64707520 57657461 52656b61     e in updateWakeR
   db614:	6f736165 6425206e 6b617700 65722065     eason %d.wake re
   db624:	6e6f7361 25203d20 61660073 72756c69     ason = %s.failur
   db634:	6e692065 74657320 6e756f43 776f6474     e in setCountdow
   db644:	6d69546e 25207265 61660064 72756c69     nTimer %d.failur
   db654:	6e692065 65656420 776f5070 6f447265     e in deepPowerDo
   db664:	25206e77 45520064 4c535f47 5f504545     wn %d.REG_SLEEP_
   db674:	4c525443 2578303d 64007832 276e6469     CTRL=0x%2x.didn'
   db684:	6f702074 20726577 6e776f64 34302500     t power down.%04
   db694:	30252d64 252d6432 20643230 64323025     d-%02d-%02d %02d
   db6a4:	3230253a 30253a64 67006432 74527465     :%02d:%02d.getRt
   db6b4:	54734163 7325206d 74657300 73797320     cAsTm %s.set sys
   db6c4:	206d6574 636f6c63 7266206b 52206d6f     tem clock from R
   db6d4:	25204354 61660073 64656c69 206f7420     TC %s.failed to 
   db6e4:	65746564 41207463 30383142 65730035     detect AB1805.se
   db6f4:	63745274 6d547341 00732520 6c696166     tRtcAsTm %s.fail
   db704:	20657275 73206e69 74527465 6f724663     ure in setRtcFro
   db714:	206d546d 73006425 52207465 66204354     mTm %d.set RTC f
   db724:	206d6f72 756f6c63 73252064 70706100     rom cloud %s.app
   db734:	3162612e 00353038                       .ab1805.

000db73c <_ZTV6AB1805>:
	...
   db744:	000d5951 000d5953 000d5fc9 000d604f     QY..SY..._..O`..
   db754:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   db764:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   db774:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   db784:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
   db794:	003e7525 65737341 61725474 72656b63     %u>.AssetTracker
   db7a4:	00000000                                ....

000db7a8 <_ZTVN8particle11SPISettingsE>:
	...
   db7b0:	000d6485 000d6459 000d645b              .d..Yd..[d..

000db7bc <_ZTV12AssetTracker>:
	...
   db7c4:	000d6841 000d6871 fffffe14 00000000     Ah..qh..........
   db7d4:	000d6869 000d6887                       ih...h..

000db7dc <_ZTV16AssetTrackerBase>:
	...
   db7e4:	000d67e9 000d6829                       .g..)h..

000db7ec <_ZTV13LegacyAdapter>:
	...
   db7f4:	000d69a5 000d69a7 4d525047 4e470043     .i...i..GPRMC.GN
   db804:	00434d52 47475047 4e470041 00414747     RMC.GPGGA.GNGGA.
   db814:	2e707061 6f6c6275 00000078              app.ublox...

000db820 <_ZTV6LIS3DH>:
	...
   db830:	000d7395 000d40a5 000d40a5              .s...@...@..

000db83c <_ZTV9LIS3DHSPI>:
	...
   db844:	000d72b1 000d72b3 000d73b7 000d72f1     .r...r...s...r..
   db854:	000d7333 000d72c1 000d72db 74697277     3s...r...r..writ
   db864:	74614465 61662061 64656c69 72756420     eData failed dur
   db874:	20676e69 73617265 72662065 64416d61     ing erase framAd
   db884:	253d7264 00000075                       dr=%u...

000db88c <_ZTV6MB85RC>:
	...
   db894:	000d73cd 000d73cf 000d747d 000d7513     .s...s..}t...u..
   db8a4:	000d7595 6c627550 51687369 65756575     .u..PublishQueue
   db8b4:	6e797341 75710063 69657565 6520676e     Async.queueing e
   db8c4:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   db8d4:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   db8e4:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   db8f4:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   db904:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   db914:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   db924:	75732064 73656363 6c756673 7000796c     d successfully.p
   db934:	696c6275 64656873 69616620 2c64656c     ublished failed,
   db944:	6c697720 6572206c 20797274 25206e69      will retry in %
   db954:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000db964 <_ZTV21PublishQueueAsyncBase>:
	...
   db974:	000d7b2d 000d40a5 000d40a5 000d40a5     -{...@...@...@..
   db984:	000d40a5 000d40a5                       .@...@..

000db98c <_ZTV25PublishQueueAsyncRetained>:
	...
   db994:	000d7c15 000d7c29 000d7b2d 000d7cb9     .|..)|..-{...|..
   db9a4:	000d7c79 000d7c57 000d7dff 000d7c9f     y|..W|...}...|..

000db9b4 <_ZTVN5spark13CellularClassE>:
	...
   db9bc:	000d8967 000d895d 000d8953 000d8909     g...]...S.......
   db9cc:	000d8947 000d893b 000d892f 000d8927     G...;.../...'...
   db9dc:	000d891d 000d8913 000d941d              ............

000db9e8 <_ZTV14CellularSignal>:
	...
   db9f0:	000d8a15 000d8a1b 000d8a17 000d8a29     ............)...
   dba00:	000d8a5d 000d8a89 000d8abd 000d8b0d     ]...............
   dba10:	fffffffc 00000000 000d8b33              ........3...

000dba1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dba24:	000d8b53 000d8b59 000d8b97 000d8b67     S...Y.......g...
   dba34:	000d8b55                                U...

000dba38 <_ZTVN5spark13EthernetClassE>:
	...
   dba40:	000d9187 000d917d 000d9173 000d9169     ....}...s...i...
   dba50:	000d915d 000d9151 000d9145 000d913d     ]...Q...E...=...
   dba60:	000d9133 000d9129 000d941d              3...).......

000dba6c <_ZTV7TwoWire>:
	...
   dba74:	000d91a5 000d91ef 000d91c7 000d91a7     ................
   dba84:	000d91cf 000d91d7 000d91df 000d91e7     ................

000dba94 <_ZTV9IPAddress>:
	...
   dba9c:	000d92d1 000d92c1 000d92c3 00707061     ............app.

000dbaac <_ZTVN5spark12NetworkClassE>:
	...
   dbab4:	000d93b5 000d93bf 000d93c9 000d93d3     ................
   dbac4:	000d93dd 000d93e9 000d93f5 000d9401     ................
   dbad4:	000d9409 000d9413 000d941d              ............

000dbae0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbae0:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   dbaf0:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   dbb00:	72756769 6f697461 7369206e 766e6920     iguration is inv
   dbb10:	64696c61 005a002e 33302b25 30253a64     alid..Z.%+03d:%0
   dbb20:	25007532 6d252d59 5464252d 253a4825     2u.%Y-%m-%dT%H:%
   dbb30:	53253a4d 61007a25 69746373 0000656d     M:%S%z.asctime..

000dbb40 <_ZTV11USARTSerial>:
	...
   dbb48:	000d9f99 000da005 000d9fdd 000d9505     ................
   dbb58:	000d9fad 000d9fc9 000d9fbb 000d9fd7     ................
   dbb68:	000d9f9b 000d9f9f                       ........

000dbb70 <_ZTV9USBSerial>:
	...
   dbb78:	000da099 000da101 000da0d7 000d9505     ................
   dbb88:	000da0c9 000da09b 000da0ab 000da0fb     ................
   dbb98:	000da0bb 000da095                       ........

000dbba0 <_ZSt7nothrow>:
   dbba0:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dbbb0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dbbc1 <day_name.6145>:
   dbbc1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dbbd1:	61536972                                 riSat

000dbbd6 <mon_name.6146>:
   dbbd6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dbbe6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dbbf6:	63654476                                vDec

000dbbfa <_ctype_>:
   dbbfa:	20202000 20202020 28282020 20282828     .         ((((( 
   dbc0a:	20202020 20202020 20202020 20202020                     
   dbc1a:	10108820 10101010 10101010 10101010      ...............
   dbc2a:	04040410 04040404 10040404 10101010     ................
   dbc3a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dbc4a:	01010101 01010101 01010101 10101010     ................
   dbc5a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dbc6a:	02020202 02020202 02020202 10101010     ................
   dbc7a:	00000020 00000000 00000000 00000000      ...............
	...

000dbcfb <link_const_variable_data_end>:
	...

000dbcfc <link_constructors_location>:
   dbcfc:	000d57f5 	.word	0x000d57f5
   dbd00:	000d6449 	.word	0x000d6449
   dbd04:	000d7065 	.word	0x000d7065
   dbd08:	000d8091 	.word	0x000d8091
   dbd0c:	000d80a1 	.word	0x000d80a1
   dbd10:	000d88e1 	.word	0x000d88e1
   dbd14:	000d89e5 	.word	0x000d89e5
   dbd18:	000d9191 	.word	0x000d9191
   dbd1c:	000d93a5 	.word	0x000d93a5
   dbd20:	000d94f1 	.word	0x000d94f1
   dbd24:	000d9625 	.word	0x000d9625
   dbd28:	000d9b21 	.word	0x000d9b21
   dbd2c:	000d9f85 	.word	0x000d9f85
