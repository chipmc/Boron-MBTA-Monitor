
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/2.0.1/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007d10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000dbd30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000013c  2003e0c0  000dc54c  0001e0c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f4  2003e200  2003e200  0002e200  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc688  000dc688  0002c688  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc6b4  000dc6b4  0002c6b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0026059c  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023c68  00000000  00000000  0028cc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00044a8a  00000000  00000000  002b08bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003a38  00000000  00000000  002f5346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000c028  00000000  00000000  002f8d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00047007  00000000  00000000  00304da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005e138  00000000  00000000  0034bdad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00131343  00000000  00000000  003a9ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a4c8  00000000  00000000  004db228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fee3 	bl	dadfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 ff05 	bl	dae4c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0c0 	.word	0x2003e0c0
   d404c:	000dc54c 	.word	0x000dc54c
   d4050:	2003e1fc 	.word	0x2003e1fc
   d4054:	2003e200 	.word	0x2003e200
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 f8f7 	bl	da254 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dbcf4 	.word	0x000dbcf4
   d4080:	000dbd28 	.word	0x000dbd28

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b9b8 	b.w	d53f8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff43 	bl	d4f14 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 b8a1 	b.w	da1d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bb91 	b.w	d87bc <malloc>

000d409a <_Znaj>:
   d409a:	f004 bb8f 	b.w	d87bc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bb95 	b.w	d87cc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fa22 	bl	d84f4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d81a5 	.word	0x000d81a5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z18outOfMemoryHandleryi>:
  return 1;
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
  outOfMemory = param;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z18outOfMemoryHandleryi+0x8>)
   d40ca:	601a      	str	r2, [r3, #0]
}
   d40cc:	4770      	bx	lr
   d40ce:	bf00      	nop
   d40d0:	2003e0f4 	.word	0x2003e0f4

000d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40da:	b128      	cbz	r0, d40e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40de:	210c      	movs	r1, #12
   d40e0:	f006 f9c3 	bl	da46a <_ZdlPvj>
            wakeupSource = next;
   d40e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e6:	e7f8      	b.n	d40da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <_Z9resetFRAM6String>:
{
   d40ec:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40ee:	4904      	ldr	r1, [pc, #16]	; (d4100 <_Z9resetFRAM6String+0x14>)
   d40f0:	f005 fbcb 	bl	d988a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40f4:	b118      	cbz	r0, d40fe <_Z9resetFRAM6String+0x12>
    fram.erase();
   d40f6:	4803      	ldr	r0, [pc, #12]	; (d4104 <_Z9resetFRAM6String+0x18>)
   d40f8:	f003 f984 	bl	d7404 <_ZN6MB85RC5eraseEv>
    return 1;
   d40fc:	2001      	movs	r0, #1
}
   d40fe:	bd08      	pop	{r3, pc}
   d4100:	000db098 	.word	0x000db098
   d4104:	2003e31c 	.word	0x2003e31c

000d4108 <_Z7sendNow6String>:
{
   d4108:	b508      	push	{r3, lr}
   d410a:	4904      	ldr	r1, [pc, #16]	; (d411c <_Z7sendNow6String+0x14>)
   d410c:	f005 fbbd 	bl	d988a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4110:	b118      	cbz	r0, d411a <_Z7sendNow6String+0x12>
    state = MEASURING_STATE;
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_Z7sendNow6String+0x18>)
   d4114:	2203      	movs	r2, #3
   d4116:	701a      	strb	r2, [r3, #0]
    return 1;
   d4118:	2001      	movs	r0, #1
}
   d411a:	bd08      	pop	{r3, pc}
   d411c:	000db098 	.word	0x000db098
   d4120:	2003e588 	.word	0x2003e588

000d4124 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4124:	b510      	push	{r4, lr}
   d4126:	4b03      	ldr	r3, [pc, #12]	; (d4134 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4128:	6003      	str	r3, [r0, #0]
   d412a:	4604      	mov	r4, r0
   d412c:	f003 fd6e 	bl	d7c0c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}
   d4134:	000db488 	.word	0x000db488

000d4138 <_ZN17PublishQueueAsyncD0Ev>:
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	f7ff fff2 	bl	d4124 <_ZN17PublishQueueAsyncD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	2138      	movs	r1, #56	; 0x38
   d4144:	f006 f991 	bl	da46a <_ZdlPvj>
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d414c:	b510      	push	{r4, lr}
   d414e:	4b03      	ldr	r3, [pc, #12]	; (d415c <_ZN8MB85RC64D1Ev+0x10>)
   d4150:	6003      	str	r3, [r0, #0]
   d4152:	4604      	mov	r4, r0
   d4154:	f003 f936 	bl	d73c4 <_ZN6MB85RCD1Ev>
   d4158:	4620      	mov	r0, r4
   d415a:	bd10      	pop	{r4, pc}
   d415c:	000db46c 	.word	0x000db46c

000d4160 <_ZN8MB85RC64D0Ev>:
   d4160:	b510      	push	{r4, lr}
   d4162:	4604      	mov	r4, r0
   d4164:	f7ff fff2 	bl	d414c <_ZN8MB85RC64D1Ev>
   d4168:	4620      	mov	r0, r4
   d416a:	2110      	movs	r1, #16
   d416c:	f006 f97d 	bl	da46a <_ZdlPvj>
   d4170:	4620      	mov	r0, r4
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d4174:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4176:	f004 fa81 	bl	d867c <spark_cloud_flag_connected>
        if (!connected()) {
   d417a:	b120      	cbz	r0, d4186 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d417c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d4180:	2000      	movs	r0, #0
   d4182:	f004 ba9b 	b.w	d86bc <spark_sync_time>
    }
   d4186:	bd08      	pop	{r3, pc}

000d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d4188:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d418a:	2000      	movs	r0, #0
   d418c:	f004 fa9e 	bl	d86cc <spark_sync_time_pending>
   d4190:	b128      	cbz	r0, d419e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4192:	f004 fa73 	bl	d867c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4196:	f080 0001 	eor.w	r0, r0, #1
   d419a:	b2c0      	uxtb	r0, r0
    }
   d419c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d419e:	2001      	movs	r0, #1
   d41a0:	e7fc      	b.n	d419c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41a2:	2300      	movs	r3, #0
   d41a4:	2204      	movs	r2, #4
   d41a6:	f004 ba49 	b.w	d863c <spark_variable>

000d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41aa:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4604      	mov	r4, r0
   d41b0:	4608      	mov	r0, r1
   d41b2:	f003 ff97 	bl	d80e4 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41b6:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ba:	2100      	movs	r1, #0
   d41bc:	2001      	movs	r0, #1
   d41be:	f003 ff91 	bl	d80e4 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d41c2:	b2e0      	uxtb	r0, r4
   d41c4:	bd10      	pop	{r4, pc}

000d41c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41c6:	b510      	push	{r4, lr}
   d41c8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41ca:	6800      	ldr	r0, [r0, #0]
   d41cc:	b108      	cbz	r0, d41d2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41ce:	f004 fafd 	bl	d87cc <free>
class SystemClass {
   d41d2:	4620      	mov	r0, r4
   d41d4:	bd10      	pop	{r4, pc}
	...

000d41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d41da:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d41dc:	4605      	mov	r5, r0
   d41de:	460f      	mov	r7, r1
   d41e0:	4616      	mov	r6, r2
        if (valid_) {
   d41e2:	b18b      	cbz	r3, d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41e4:	6803      	ldr	r3, [r0, #0]
   d41e6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41e8:	b183      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41ea:	889a      	ldrh	r2, [r3, #4]
   d41ec:	2a01      	cmp	r2, #1
   d41ee:	d006      	beq.n	d41fe <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41f0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41f2:	e7f9      	b.n	d41e8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41f4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41f6:	b14b      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41f8:	889a      	ldrh	r2, [r3, #4]
   d41fa:	2a01      	cmp	r2, #1
   d41fc:	d1fa      	bne.n	d41f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41fe:	b12b      	cbz	r3, d420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4200:	899a      	ldrh	r2, [r3, #12]
   d4202:	42ba      	cmp	r2, r7
   d4204:	d1f6      	bne.n	d41f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4206:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4208:	4628      	mov	r0, r5
   d420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d420c:	490a      	ldr	r1, [pc, #40]	; (d4238 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d420e:	2010      	movs	r0, #16
   d4210:	f006 f92d 	bl	da46e <_ZnwjRKSt9nothrow_t>
   d4214:	4604      	mov	r4, r0
   d4216:	b168      	cbz	r0, d4234 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4218:	2210      	movs	r2, #16
   d421a:	2100      	movs	r1, #0
   d421c:	f006 fe16 	bl	dae4c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4220:	4b06      	ldr	r3, [pc, #24]	; (d423c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4222:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4224:	2301      	movs	r3, #1
   d4226:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4228:	692b      	ldr	r3, [r5, #16]
   d422a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d422c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d422e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4230:	612c      	str	r4, [r5, #16]
   d4232:	e7e9      	b.n	d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4234:	7528      	strb	r0, [r5, #20]
                return *this;
   d4236:	e7e7      	b.n	d4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4238:	000dbb98 	.word	0x000dbb98
   d423c:	00030010 	.word	0x00030010

000d4240 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4240:	2000      	movs	r0, #0
   d4242:	f003 bfd7 	b.w	d81f4 <hal_timer_millis>

000d4246 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4246:	b40e      	push	{r1, r2, r3}
   d4248:	b510      	push	{r4, lr}
   d424a:	b08d      	sub	sp, #52	; 0x34
   d424c:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d424e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4250:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4254:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4256:	2300      	movs	r3, #0
   d4258:	2020      	movs	r0, #32
   d425a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d425e:	e9cd 4200 	strd	r4, r2, [sp]
   d4262:	201e      	movs	r0, #30
   d4264:	aa04      	add	r2, sp, #16
   d4266:	f004 f955 	bl	d8514 <log_message_v>
}
   d426a:	b00d      	add	sp, #52	; 0x34
   d426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4270:	b003      	add	sp, #12
   d4272:	4770      	bx	lr

000d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4274:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4276:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4278:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d427c:	f88d 3000 	strb.w	r3, [sp]
   d4280:	f88d 5004 	strb.w	r5, [sp, #4]
   d4284:	68e4      	ldr	r4, [r4, #12]
   d4286:	233c      	movs	r3, #60	; 0x3c
   d4288:	47a0      	blx	r4
	}
   d428a:	b003      	add	sp, #12
   d428c:	bd30      	pop	{r4, r5, pc}
	...

000d4290 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4290:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4292:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4294:	b092      	sub	sp, #72	; 0x48
   d4296:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4298:	b97b      	cbnz	r3, d42ba <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d429a:	4919      	ldr	r1, [pc, #100]	; (d4300 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d429c:	a802      	add	r0, sp, #8
   d429e:	f006 fe0b 	bl	daeb8 <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d42a2:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d42a4:	f88d 3000 	strb.w	r3, [sp]
   d42a8:	4b16      	ldr	r3, [pc, #88]	; (d4304 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d42aa:	4917      	ldr	r1, [pc, #92]	; (d4308 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d42ac:	781b      	ldrb	r3, [r3, #0]
   d42ae:	4817      	ldr	r0, [pc, #92]	; (d430c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d42b0:	aa02      	add	r2, sp, #8
   d42b2:	f7ff ffdf 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d42b6:	b012      	add	sp, #72	; 0x48
   d42b8:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d42ba:	4608      	mov	r0, r1
   d42bc:	f006 fd76 	bl	dadac <atoi>
   d42c0:	28c8      	cmp	r0, #200	; 0xc8
   d42c2:	d10e      	bne.n	d42e2 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d42c4:	4912      	ldr	r1, [pc, #72]	; (d4310 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d42c6:	a802      	add	r0, sp, #8
   d42c8:	f006 fdf6 	bl	daeb8 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d42cc:	f005 fe03 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d42d0:	4b10      	ldr	r3, [pc, #64]	; (d4314 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d42d2:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d42d4:	4b10      	ldr	r3, [pc, #64]	; (d4318 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d42d6:	2201      	movs	r2, #1
   d42d8:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d42da:	4b10      	ldr	r3, [pc, #64]	; (d431c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d42dc:	2200      	movs	r2, #0
   d42de:	701a      	strb	r2, [r3, #0]
   d42e0:	e7df      	b.n	d42a2 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d42e2:	4620      	mov	r0, r4
   d42e4:	f006 fd62 	bl	dadac <atoi>
   d42e8:	28c9      	cmp	r0, #201	; 0xc9
   d42ea:	d0eb      	beq.n	d42c4 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d42ec:	4620      	mov	r0, r4
   d42ee:	f006 fd5d 	bl	dadac <atoi>
   d42f2:	4a0b      	ldr	r2, [pc, #44]	; (d4320 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d42f4:	4603      	mov	r3, r0
   d42f6:	2140      	movs	r1, #64	; 0x40
   d42f8:	a802      	add	r0, sp, #8
   d42fa:	f004 fa7f 	bl	d87fc <snprintf>
   d42fe:	e7d0      	b.n	d42a2 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4300:	000db0d8 	.word	0x000db0d8
   d4304:	2003e260 	.word	0x2003e260
   d4308:	000db10f 	.word	0x000db10f
   d430c:	2003e54c 	.word	0x2003e54c
   d4310:	000db0e0 	.word	0x000db0e0
   d4314:	2003e58c 	.word	0x2003e58c
   d4318:	2003e5b0 	.word	0x2003e5b0
   d431c:	2003e2fe 	.word	0x2003e2fe
   d4320:	000db0f2 	.word	0x000db0f2

000d4324 <_Z14setverboseMode6String>:
{
   d4324:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4326:	4919      	ldr	r1, [pc, #100]	; (d438c <_Z14setverboseMode6String+0x68>)
   d4328:	4604      	mov	r4, r0
   d432a:	f005 faae 	bl	d988a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d432e:	4605      	mov	r5, r0
   d4330:	b1b0      	cbz	r0, d4360 <_Z14setverboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d4332:	4b17      	ldr	r3, [pc, #92]	; (d4390 <_Z14setverboseMode6String+0x6c>)
   d4334:	2401      	movs	r4, #1
   d4336:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4338:	4b16      	ldr	r3, [pc, #88]	; (d4394 <_Z14setverboseMode6String+0x70>)
   d433a:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d433c:	f004 f99e 	bl	d867c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4340:	b910      	cbnz	r0, d4348 <_Z14setverboseMode6String+0x24>
    return 1;
   d4342:	2001      	movs	r0, #1
}
   d4344:	b003      	add	sp, #12
   d4346:	bd30      	pop	{r4, r5, pc}
   d4348:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d434a:	f88d 3000 	strb.w	r3, [sp]
   d434e:	4b12      	ldr	r3, [pc, #72]	; (d4398 <_Z14setverboseMode6String+0x74>)
   d4350:	4a12      	ldr	r2, [pc, #72]	; (d439c <_Z14setverboseMode6String+0x78>)
   d4352:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4354:	4912      	ldr	r1, [pc, #72]	; (d43a0 <_Z14setverboseMode6String+0x7c>)
   d4356:	4813      	ldr	r0, [pc, #76]	; (d43a4 <_Z14setverboseMode6String+0x80>)
   d4358:	f7ff ff8c 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d435c:	4620      	mov	r0, r4
   d435e:	e7f1      	b.n	d4344 <_Z14setverboseMode6String+0x20>
   d4360:	4911      	ldr	r1, [pc, #68]	; (d43a8 <_Z14setverboseMode6String+0x84>)
   d4362:	4620      	mov	r0, r4
   d4364:	f005 fa91 	bl	d988a <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4368:	2800      	cmp	r0, #0
   d436a:	d0eb      	beq.n	d4344 <_Z14setverboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d436c:	4b08      	ldr	r3, [pc, #32]	; (d4390 <_Z14setverboseMode6String+0x6c>)
   d436e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4370:	4b08      	ldr	r3, [pc, #32]	; (d4394 <_Z14setverboseMode6String+0x70>)
   d4372:	2401      	movs	r4, #1
   d4374:	701c      	strb	r4, [r3, #0]
   d4376:	f004 f981 	bl	d867c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d437a:	2800      	cmp	r0, #0
   d437c:	d0e1      	beq.n	d4342 <_Z14setverboseMode6String+0x1e>
   d437e:	4b06      	ldr	r3, [pc, #24]	; (d4398 <_Z14setverboseMode6String+0x74>)
   d4380:	f88d 5000 	strb.w	r5, [sp]
   d4384:	781b      	ldrb	r3, [r3, #0]
   d4386:	4a09      	ldr	r2, [pc, #36]	; (d43ac <_Z14setverboseMode6String+0x88>)
   d4388:	e7e4      	b.n	d4354 <_Z14setverboseMode6String+0x30>
   d438a:	bf00      	nop
   d438c:	000db098 	.word	0x000db098
   d4390:	2003e58c 	.word	0x2003e58c
   d4394:	2003e5b0 	.word	0x2003e5b0
   d4398:	2003e260 	.word	0x2003e260
   d439c:	000db11c 	.word	0x000db11c
   d43a0:	000db13f 	.word	0x000db13f
   d43a4:	2003e54c 	.word	0x2003e54c
   d43a8:	000db12d 	.word	0x000db12d
   d43ac:	000db12f 	.word	0x000db12f

000d43b0 <_Z11setTimeZone6String>:
{
   d43b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d43b4:	b0c8      	sub	sp, #288	; 0x120
   d43b6:	4680      	mov	r8, r0
  Particle.syncTime();                                                        // Set the clock each day
   d43b8:	f7ff fedc 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d43bc:	f7ff ff40 	bl	d4240 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d43c0:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d43c4:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d43c6:	f247 562f 	movw	r6, #29999	; 0x752f
   d43ca:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d43cc:	f7ff ff38 	bl	d4240 <_ZN11SystemClass6millisEv>
   d43d0:	ebb0 0409 	subs.w	r4, r0, r9
   d43d4:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d43d8:	42af      	cmp	r7, r5
   d43da:	bf08      	it	eq
   d43dc:	42a6      	cmpeq	r6, r4
   d43de:	d305      	bcc.n	d43ec <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d43e0:	f7ff fed2 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d43e4:	b910      	cbnz	r0, d43ec <_Z11setTimeZone6String+0x3c>
            spark_process();
   d43e6:	f004 f939 	bl	d865c <spark_process>
        while (_while() && !_condition()) {
   d43ea:	e7ef      	b.n	d43cc <_Z11setTimeZone6String+0x1c>
   d43ec:	f7ff fecc 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d43f0:	f8d8 0000 	ldr.w	r0, [r8]
   d43f4:	220a      	movs	r2, #10
   d43f6:	a903      	add	r1, sp, #12
   d43f8:	f006 fe18 	bl	db02c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d43fc:	f100 030c 	add.w	r3, r0, #12
   d4400:	b2db      	uxtb	r3, r3
   d4402:	2b18      	cmp	r3, #24
   d4404:	d848      	bhi.n	d4498 <_Z11setTimeZone6String+0xe8>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4406:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4408:	ee07 5a90 	vmov	s15, r5
   d440c:	4b26      	ldr	r3, [pc, #152]	; (d44a8 <_Z11setTimeZone6String+0xf8>)
   d440e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d4412:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d4414:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d4418:	f005 fbf4 	bl	d9c04 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d441c:	4b23      	ldr	r3, [pc, #140]	; (d44ac <_Z11setTimeZone6String+0xfc>)
   d441e:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4420:	f005 fd9e 	bl	d9f60 <_ZN9TimeClass5localEv>
   d4424:	4606      	mov	r6, r0
   d4426:	f005 fd56 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d442a:	1a30      	subs	r0, r6, r0
   d442c:	f006 f978 	bl	da720 <__aeabi_i2d>
   d4430:	a31b      	add	r3, pc, #108	; (adr r3, d44a0 <_Z11setTimeZone6String+0xf0>)
   d4432:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4436:	f006 fb07 	bl	daa48 <__aeabi_ddiv>
   d443a:	4a1d      	ldr	r2, [pc, #116]	; (d44b0 <_Z11setTimeZone6String+0x100>)
   d443c:	e9cd 0100 	strd	r0, r1, [sp]
   d4440:	210a      	movs	r1, #10
   d4442:	481c      	ldr	r0, [pc, #112]	; (d44b4 <_Z11setTimeZone6String+0x104>)
   d4444:	f004 f9da 	bl	d87fc <snprintf>
   d4448:	f004 f918 	bl	d867c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d444c:	b310      	cbz	r0, d4494 <_Z11setTimeZone6String+0xe4>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d444e:	462b      	mov	r3, r5
   d4450:	4a19      	ldr	r2, [pc, #100]	; (d44b8 <_Z11setTimeZone6String+0x108>)
   d4452:	4d1a      	ldr	r5, [pc, #104]	; (d44bc <_Z11setTimeZone6String+0x10c>)
   d4454:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4458:	2600      	movs	r6, #0
   d445a:	a808      	add	r0, sp, #32
   d445c:	f004 f9ce 	bl	d87fc <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d4460:	f88d 6000 	strb.w	r6, [sp]
   d4464:	4916      	ldr	r1, [pc, #88]	; (d44c0 <_Z11setTimeZone6String+0x110>)
   d4466:	782b      	ldrb	r3, [r5, #0]
   d4468:	4816      	ldr	r0, [pc, #88]	; (d44c4 <_Z11setTimeZone6String+0x114>)
   d446a:	aa08      	add	r2, sp, #32
   d446c:	f7ff ff02 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4470:	f005 fd31 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4474:	4602      	mov	r2, r0
   d4476:	17c3      	asrs	r3, r0, #31
   d4478:	a804      	add	r0, sp, #16
   d447a:	f005 fc29 	bl	d9cd0 <_ZN9TimeClass7timeStrEx>
   d447e:	f88d 6000 	strb.w	r6, [sp]
   d4482:	782b      	ldrb	r3, [r5, #0]
   d4484:	9a04      	ldr	r2, [sp, #16]
   d4486:	490e      	ldr	r1, [pc, #56]	; (d44c0 <_Z11setTimeZone6String+0x110>)
   d4488:	480e      	ldr	r0, [pc, #56]	; (d44c4 <_Z11setTimeZone6String+0x114>)
   d448a:	f7ff fef3 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d448e:	a804      	add	r0, sp, #16
   d4490:	f005 f982 	bl	d9798 <_ZN6StringD1Ev>
  return 1;
   d4494:	4620      	mov	r0, r4
   d4496:	e000      	b.n	d449a <_Z11setTimeZone6String+0xea>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4498:	2000      	movs	r0, #0
}
   d449a:	b048      	add	sp, #288	; 0x120
   d449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d44a0:	00000000 	.word	0x00000000
   d44a4:	40ac2000 	.word	0x40ac2000
   d44a8:	2003e58c 	.word	0x2003e58c
   d44ac:	2003e5b0 	.word	0x2003e5b0
   d44b0:	000db144 	.word	0x000db144
   d44b4:	2003e2f4 	.word	0x2003e2f4
   d44b8:	000db14e 	.word	0x000db14e
   d44bc:	2003e260 	.word	0x2003e260
   d44c0:	000db162 	.word	0x000db162
   d44c4:	2003e54c 	.word	0x2003e54c

000d44c8 <_Z17setSampleInterval6String>:
int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d44c8:	b530      	push	{r4, r5, lr}
   d44ca:	b0c5      	sub	sp, #276	; 0x114
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d44cc:	220a      	movs	r2, #10
   d44ce:	6800      	ldr	r0, [r0, #0]
   d44d0:	a903      	add	r1, sp, #12
   d44d2:	f006 fdab 	bl	db02c <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d44d6:	b2c3      	uxtb	r3, r0
   d44d8:	1e5a      	subs	r2, r3, #1
   d44da:	2a3b      	cmp	r2, #59	; 0x3b
   d44dc:	d81f      	bhi.n	d451e <_Z17setSampleInterval6String+0x56>
  systemStatusWriteNeeded = true;
   d44de:	4a11      	ldr	r2, [pc, #68]	; (d4524 <_Z17setSampleInterval6String+0x5c>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d44e0:	4d11      	ldr	r5, [pc, #68]	; (d4528 <_Z17setSampleInterval6String+0x60>)
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d44e2:	4812      	ldr	r0, [pc, #72]	; (d452c <_Z17setSampleInterval6String+0x64>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d44e4:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d44e6:	2401      	movs	r4, #1
   d44e8:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d44ea:	210c      	movs	r1, #12
   d44ec:	4a10      	ldr	r2, [pc, #64]	; (d4530 <_Z17setSampleInterval6String+0x68>)
   d44ee:	f004 f985 	bl	d87fc <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d44f2:	79ab      	ldrb	r3, [r5, #6]
   d44f4:	4a0f      	ldr	r2, [pc, #60]	; (d4534 <_Z17setSampleInterval6String+0x6c>)
   d44f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44fa:	a804      	add	r0, sp, #16
   d44fc:	f004 f97e 	bl	d87fc <snprintf>
   d4500:	f004 f8bc 	bl	d867c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4504:	b148      	cbz	r0, d451a <_Z17setSampleInterval6String+0x52>
   d4506:	2300      	movs	r3, #0
    publishQueue.publish("Interval", data, PRIVATE);
   d4508:	f88d 3000 	strb.w	r3, [sp]
   d450c:	4b0a      	ldr	r3, [pc, #40]	; (d4538 <_Z17setSampleInterval6String+0x70>)
   d450e:	490b      	ldr	r1, [pc, #44]	; (d453c <_Z17setSampleInterval6String+0x74>)
   d4510:	781b      	ldrb	r3, [r3, #0]
   d4512:	480b      	ldr	r0, [pc, #44]	; (d4540 <_Z17setSampleInterval6String+0x78>)
   d4514:	aa04      	add	r2, sp, #16
   d4516:	f7ff fead 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d451a:	4620      	mov	r0, r4
   d451c:	e000      	b.n	d4520 <_Z17setSampleInterval6String+0x58>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d451e:	2000      	movs	r0, #0
}
   d4520:	b045      	add	sp, #276	; 0x114
   d4522:	bd30      	pop	{r4, r5, pc}
   d4524:	2003e5b0 	.word	0x2003e5b0
   d4528:	2003e58c 	.word	0x2003e58c
   d452c:	2003e104 	.word	0x2003e104
   d4530:	000db17e 	.word	0x000db17e
   d4534:	000db167 	.word	0x000db167
   d4538:	2003e260 	.word	0x2003e260
   d453c:	000db3a3 	.word	0x000db3a3
   d4540:	2003e54c 	.word	0x2003e54c

000d4544 <_Z9sendEventv>:
void sendEvent() {
   d4544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4548:	4b23      	ldr	r3, [pc, #140]	; (d45d8 <_Z9sendEventv+0x94>)
   d454a:	4c24      	ldr	r4, [pc, #144]	; (d45dc <_Z9sendEventv+0x98>)
   d454c:	689d      	ldr	r5, [r3, #8]
   d454e:	69a2      	ldr	r2, [r4, #24]
   d4550:	691b      	ldr	r3, [r3, #16]
void sendEvent() {
   d4552:	b0d3      	sub	sp, #332	; 0x14c
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4554:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4558:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d455c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4560:	9311      	str	r3, [sp, #68]	; 0x44
   d4562:	9210      	str	r2, [sp, #64]	; 0x40
   d4564:	f005 fcb7 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4568:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d456c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d456e:	9308      	str	r3, [sp, #32]
   d4570:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d4574:	ed94 7b08 	vldr	d7, [r4, #32]
   d4578:	4b19      	ldr	r3, [pc, #100]	; (d45e0 <_Z9sendEventv+0x9c>)
   d457a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d457c:	900a      	str	r0, [sp, #40]	; 0x28
   d457e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d4582:	e9cd 5306 	strd	r5, r3, [sp, #24]
   d4586:	9209      	str	r2, [sp, #36]	; 0x24
   d4588:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d458c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4590:	e9cd 6700 	strd	r6, r7, [sp]
   d4594:	4a13      	ldr	r2, [pc, #76]	; (d45e4 <_Z9sendEventv+0xa0>)
   d4596:	f44f 7180 	mov.w	r1, #256	; 0x100
   d459a:	a812      	add	r0, sp, #72	; 0x48
   d459c:	f004 f92e 	bl	d87fc <snprintf>
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d45a0:	2300      	movs	r3, #0
   d45a2:	f88d 3000 	strb.w	r3, [sp]
   d45a6:	4b10      	ldr	r3, [pc, #64]	; (d45e8 <_Z9sendEventv+0xa4>)
   d45a8:	4910      	ldr	r1, [pc, #64]	; (d45ec <_Z9sendEventv+0xa8>)
   d45aa:	781b      	ldrb	r3, [r3, #0]
   d45ac:	4810      	ldr	r0, [pc, #64]	; (d45f0 <_Z9sendEventv+0xac>)
   d45ae:	aa12      	add	r2, sp, #72	; 0x48
   d45b0:	f7ff fe60 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d45b4:	4b0f      	ldr	r3, [pc, #60]	; (d45f4 <_Z9sendEventv+0xb0>)
   d45b6:	2201      	movs	r2, #1
   d45b8:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d45ba:	f003 fdfb 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d45be:	4b0e      	ldr	r3, [pc, #56]	; (d45f8 <_Z9sendEventv+0xb4>)
   d45c0:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d45c2:	f005 fc99 	bl	d9ef8 <_ZN9TimeClass4hourEv>
   d45c6:	4b0d      	ldr	r3, [pc, #52]	; (d45fc <_Z9sendEventv+0xb8>)
   d45c8:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d45ca:	f005 fca1 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d45ce:	4b0c      	ldr	r3, [pc, #48]	; (d4600 <_Z9sendEventv+0xbc>)
   d45d0:	6018      	str	r0, [r3, #0]
}
   d45d2:	b053      	add	sp, #332	; 0x14c
   d45d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d45d8:	2003e58c 	.word	0x2003e58c
   d45dc:	2003e2b8 	.word	0x2003e2b8
   d45e0:	2003e290 	.word	0x2003e290
   d45e4:	000db189 	.word	0x000db189
   d45e8:	2003e260 	.word	0x2003e260
   d45ec:	000db219 	.word	0x000db219
   d45f0:	2003e54c 	.word	0x2003e54c
   d45f4:	2003e2fe 	.word	0x2003e2fe
   d45f8:	2003e5b4 	.word	0x2003e5b4
   d45fc:	2003e2ec 	.word	0x2003e2ec
   d4600:	2003e2f0 	.word	0x2003e2f0
   d4604:	00000000 	.word	0x00000000

000d4608 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d4608:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d460a:	4605      	mov	r5, r0
  int   i = 0;
   d460c:	2400      	movs	r4, #0
    _temp = ds18b20.getTemperature(addr);
   d460e:	4812      	ldr	r0, [pc, #72]	; (d4658 <_Z7getTempPh+0x50>)
   d4610:	2200      	movs	r2, #0
   d4612:	4629      	mov	r1, r5
   d4614:	f002 fd66 	bl	d70e4 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d4618:	480f      	ldr	r0, [pc, #60]	; (d4658 <_Z7getTempPh+0x50>)
    _temp = ds18b20.getTemperature(addr);
   d461a:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d461e:	f002 fe3d 	bl	d729c <_ZN7DS18B208crcCheckEv>
   d4622:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4626:	b928      	cbnz	r0, d4634 <_Z7getTempPh+0x2c>
   d4628:	3401      	adds	r4, #1
   d462a:	2c04      	cmp	r4, #4
   d462c:	d1ef      	bne.n	d460e <_Z7getTempPh+0x6>
  else _temp = NAN;
   d462e:	ed9f 0b08 	vldr	d0, [pc, #32]	; d4650 <_Z7getTempPh+0x48>
  return _temp;
   d4632:	e00a      	b.n	d464a <_Z7getTempPh+0x42>
  if (i < MAXRETRY) {
   d4634:	2c03      	cmp	r4, #3
   d4636:	d0fa      	beq.n	d462e <_Z7getTempPh+0x26>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d4638:	4807      	ldr	r0, [pc, #28]	; (d4658 <_Z7getTempPh+0x50>)
   d463a:	f002 fe15 	bl	d7268 <_ZN7DS18B2019convertToFahrenheitEf>
   d463e:	ee10 0a10 	vmov	r0, s0
   d4642:	f006 f87f 	bl	da744 <__aeabi_f2d>
   d4646:	ec41 0b10 	vmov	d0, r0, r1
}
   d464a:	b003      	add	sp, #12
   d464c:	bd30      	pop	{r4, r5, pc}
   d464e:	bf00      	nop
   d4650:	00000000 	.word	0x00000000
   d4654:	7ff80000 	.word	0x7ff80000
   d4658:	2003e300 	.word	0x2003e300

000d465c <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d465c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d465e:	4d19      	ldr	r5, [pc, #100]	; (d46c4 <_Z17getSignalStrengthv+0x68>)
   d4660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4662:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4664:	ac04      	add	r4, sp, #16
   d4666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d466a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d466c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4670:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4674:	4914      	ldr	r1, [pc, #80]	; (d46c8 <_Z17getSignalStrengthv+0x6c>)
   d4676:	a80e      	add	r0, sp, #56	; 0x38
   d4678:	f004 f976 	bl	d8968 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d467c:	a80e      	add	r0, sp, #56	; 0x38
   d467e:	f004 f9c6 	bl	d8a0e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4682:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4684:	a80e      	add	r0, sp, #56	; 0x38
   d4686:	f004 f9cb 	bl	d8a20 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d468a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d468c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4690:	f004 f9f6 	bl	d8a80 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4694:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4696:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d469a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d469e:	f006 f851 	bl	da744 <__aeabi_f2d>
   d46a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d46a6:	4628      	mov	r0, r5
   d46a8:	f006 f84c 	bl	da744 <__aeabi_f2d>
   d46ac:	e9cd 0100 	strd	r0, r1, [sp]
   d46b0:	4a06      	ldr	r2, [pc, #24]	; (d46cc <_Z17getSignalStrengthv+0x70>)
   d46b2:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d46b6:	4806      	ldr	r0, [pc, #24]	; (d46d0 <_Z17getSignalStrengthv+0x74>)
   d46b8:	2140      	movs	r1, #64	; 0x40
   d46ba:	f004 f89f 	bl	d87fc <snprintf>
}
   d46be:	b019      	add	sp, #100	; 0x64
   d46c0:	bd30      	pop	{r4, r5, pc}
   d46c2:	bf00      	nop
   d46c4:	000db4a8 	.word	0x000db4a8
   d46c8:	2003e5ec 	.word	0x2003e5ec
   d46cc:	000db234 	.word	0x000db234
   d46d0:	2003e210 	.word	0x2003e210

000d46d4 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d46d4:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d46d6:	2420      	movs	r4, #32
   d46d8:	b090      	sub	sp, #64	; 0x40
   d46da:	4622      	mov	r2, r4
   d46dc:	2100      	movs	r1, #0
   d46de:	4668      	mov	r0, sp
   d46e0:	f006 fbb4 	bl	dae4c <memset>
   d46e4:	4622      	mov	r2, r4
   d46e6:	2100      	movs	r1, #0
   d46e8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d46ec:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d46f0:	f006 fbac 	bl	dae4c <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d46f4:	2100      	movs	r1, #0
   d46f6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d46fa:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d46fe:	f003 ff7f 	bl	d8600 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4702:	f241 0370 	movw	r3, #4208	; 0x1070
   d4706:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d470a:	4b08      	ldr	r3, [pc, #32]	; (d472c <_Z14setPowerConfigv+0x58>)
   d470c:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d470e:	f241 0310 	movw	r3, #4112	; 0x1010
   d4712:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4716:	9b00      	ldr	r3, [sp, #0]
   d4718:	2100      	movs	r1, #0
   d471a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d471e:	4668      	mov	r0, sp
   d4720:	9300      	str	r3, [sp, #0]
   d4722:	f003 ff6d 	bl	d8600 <system_power_management_set_config>
}
   d4726:	b010      	add	sp, #64	; 0x40
   d4728:	bd10      	pop	{r4, pc}
   d472a:	bf00      	nop
   d472c:	03840384 	.word	0x03840384

000d4730 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4734:	481d      	ldr	r0, [pc, #116]	; (d47ac <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4736:	f8df a080 	ldr.w	sl, [pc, #128]	; d47b8 <_Z17connectToParticlev+0x88>
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	2300      	movs	r3, #0
   d473e:	461a      	mov	r2, r3
   d4740:	4619      	mov	r1, r3
   d4742:	f004 f80b 	bl	d875c <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4746:	f003 ff91 	bl	d866c <spark_cloud_flag_connect>
   d474a:	f44f 7496 	mov.w	r4, #300	; 0x12c
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d474e:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4752:	f240 38e7 	movw	r8, #999	; 0x3e7
   d4756:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d475a:	f7ff fd71 	bl	d4240 <_ZN11SystemClass6millisEv>
   d475e:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4760:	f7ff fd6e 	bl	d4240 <_ZN11SystemClass6millisEv>
   d4764:	1b46      	subs	r6, r0, r5
   d4766:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d476a:	45b9      	cmp	r9, r7
   d476c:	bf08      	it	eq
   d476e:	45b0      	cmpeq	r8, r6
   d4770:	d305      	bcc.n	d477e <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4772:	f003 ff83 	bl	d867c <spark_cloud_flag_connected>
   d4776:	b910      	cbnz	r0, d477e <_Z17connectToParticlev+0x4e>
            spark_process();
   d4778:	f003 ff70 	bl	d865c <spark_process>
        while (_while() && !_condition()) {
   d477c:	e7f0      	b.n	d4760 <_Z17connectToParticlev+0x30>
   d477e:	f003 ff7d 	bl	d867c <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4782:	b120      	cbz	r0, d478e <_Z17connectToParticlev+0x5e>
   d4784:	f003 ff7a 	bl	d867c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4788:	b950      	cbnz	r0, d47a0 <_Z17connectToParticlev+0x70>
}
   d478a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d478e:	f003 fd11 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d4792:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4796:	f003 ff61 	bl	d865c <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d479a:	3c01      	subs	r4, #1
   d479c:	d1dd      	bne.n	d475a <_Z17connectToParticlev+0x2a>
   d479e:	e7f1      	b.n	d4784 <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
   d47a0:	4a03      	ldr	r2, [pc, #12]	; (d47b0 <_Z17connectToParticlev+0x80>)
   d47a2:	2301      	movs	r3, #1
   d47a4:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d47a6:	4a03      	ldr	r2, [pc, #12]	; (d47b4 <_Z17connectToParticlev+0x84>)
   d47a8:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d47aa:	e7ee      	b.n	d478a <_Z17connectToParticlev+0x5a>
   d47ac:	2003e5ec 	.word	0x2003e5ec
   d47b0:	2003e58c 	.word	0x2003e58c
   d47b4:	2003e5b0 	.word	0x2003e5b0
   d47b8:	2003e7d8 	.word	0x2003e7d8

000d47bc <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d47bc:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d47be:	f003 ff5d 	bl	d867c <spark_cloud_flag_connected>
  return !Particle.connected();
   d47c2:	f080 0001 	eor.w	r0, r0, #1
}
   d47c6:	b2c0      	uxtb	r0, r0
   d47c8:	bd08      	pop	{r3, pc}
	...

000d47cc <_Z22disconnectFromParticlev>:
{
   d47cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d47d0:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d47d2:	2600      	movs	r6, #0
  Particle.disconnect();
   d47d4:	a801      	add	r0, sp, #4
   d47d6:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d47da:	f88d 600c 	strb.w	r6, [sp, #12]
   d47de:	f004 fa20 	bl	d8c22 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d47e2:	f7ff fd2d 	bl	d4240 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d47e6:	46b1      	mov	r9, r6
        const system_tick_t start = millis();
   d47e8:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d47ea:	f643 2697 	movw	r6, #14999	; 0x3a97
   d47ee:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d47f0:	f7ff fd26 	bl	d4240 <_ZN11SystemClass6millisEv>
   d47f4:	ebb0 0408 	subs.w	r4, r0, r8
   d47f8:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d47fc:	42af      	cmp	r7, r5
   d47fe:	bf08      	it	eq
   d4800:	42a6      	cmpeq	r6, r4
   d4802:	d305      	bcc.n	d4810 <_Z22disconnectFromParticlev+0x44>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d4804:	f7ff ffda 	bl	d47bc <_Z12notConnectedv>
   d4808:	b910      	cbnz	r0, d4810 <_Z22disconnectFromParticlev+0x44>
            spark_process();
   d480a:	f003 ff27 	bl	d865c <spark_process>
        while (_while() && !_condition()) {
   d480e:	e7ef      	b.n	d47f0 <_Z22disconnectFromParticlev+0x24>
   d4810:	f7ff ffd4 	bl	d47bc <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4814:	480a      	ldr	r0, [pc, #40]	; (d4840 <_Z22disconnectFromParticlev+0x74>)
   d4816:	2300      	movs	r3, #0
   d4818:	4619      	mov	r1, r3
   d481a:	461a      	mov	r2, r3
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	f003 ffa5 	bl	d876c <network_off>
  sysStatus.connectedStatus = false;
   d4822:	4b08      	ldr	r3, [pc, #32]	; (d4844 <_Z22disconnectFromParticlev+0x78>)
   d4824:	2200      	movs	r2, #0
   d4826:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4828:	4b07      	ldr	r3, [pc, #28]	; (d4848 <_Z22disconnectFromParticlev+0x7c>)
   d482a:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d482c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d4830:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4832:	f004 f82b 	bl	d888c <delay>
}
   d4836:	4620      	mov	r0, r4
   d4838:	b005      	add	sp, #20
   d483a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d483e:	bf00      	nop
   d4840:	2003e5ec 	.word	0x2003e5ec
   d4844:	2003e58c 	.word	0x2003e58c
   d4848:	2003e5b0 	.word	0x2003e5b0

000d484c <_Z22publishStateTransitionv>:
{
   d484c:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d484e:	4d11      	ldr	r5, [pc, #68]	; (d4894 <_Z22publishStateTransitionv+0x48>)
   d4850:	4c11      	ldr	r4, [pc, #68]	; (d4898 <_Z22publishStateTransitionv+0x4c>)
   d4852:	4912      	ldr	r1, [pc, #72]	; (d489c <_Z22publishStateTransitionv+0x50>)
   d4854:	782a      	ldrb	r2, [r5, #0]
   d4856:	7820      	ldrb	r0, [r4, #0]
{
   d4858:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d485a:	230e      	movs	r3, #14
   d485c:	fb03 1202 	mla	r2, r3, r2, r1
   d4860:	9200      	str	r2, [sp, #0]
   d4862:	fb03 1300 	mla	r3, r3, r0, r1
   d4866:	4a0e      	ldr	r2, [pc, #56]	; (d48a0 <_Z22publishStateTransitionv+0x54>)
   d4868:	2128      	movs	r1, #40	; 0x28
   d486a:	a802      	add	r0, sp, #8
   d486c:	f003 ffc6 	bl	d87fc <snprintf>
  oldState = state;
   d4870:	782b      	ldrb	r3, [r5, #0]
   d4872:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4874:	f003 ff02 	bl	d867c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4878:	b148      	cbz	r0, d488e <_Z22publishStateTransitionv+0x42>
   d487a:	2300      	movs	r3, #0
   d487c:	f88d 3000 	strb.w	r3, [sp]
   d4880:	4b08      	ldr	r3, [pc, #32]	; (d48a4 <_Z22publishStateTransitionv+0x58>)
   d4882:	4909      	ldr	r1, [pc, #36]	; (d48a8 <_Z22publishStateTransitionv+0x5c>)
   d4884:	781b      	ldrb	r3, [r3, #0]
   d4886:	4809      	ldr	r0, [pc, #36]	; (d48ac <_Z22publishStateTransitionv+0x60>)
   d4888:	aa02      	add	r2, sp, #8
   d488a:	f7ff fcf3 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d488e:	b00d      	add	sp, #52	; 0x34
   d4890:	bd30      	pop	{r4, r5, pc}
   d4892:	bf00      	nop
   d4894:	2003e588 	.word	0x2003e588
   d4898:	2003e548 	.word	0x2003e548
   d489c:	2003e110 	.word	0x2003e110
   d48a0:	000db24d 	.word	0x000db24d
   d48a4:	2003e260 	.word	0x2003e260
   d48a8:	000db25b 	.word	0x000db25b
   d48ac:	2003e54c 	.word	0x2003e54c

000d48b0 <_Z14fullModemResetv>:
void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d48b0:	b530      	push	{r4, r5, lr}
   d48b2:	b085      	sub	sp, #20
        graceful_(graceful) {
   d48b4:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d48b6:	a801      	add	r0, sp, #4
   d48b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d48bc:	f88d 300c 	strb.w	r3, [sp, #12]
   d48c0:	f004 f9af 	bl	d8c22 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d48c4:	f003 fc76 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
	while(Particle.connected() && millis() - startTime < 15000) {
   d48c8:	f643 2597 	movw	r5, #14999	; 0x3a97
   d48cc:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48ce:	f003 fed5 	bl	d867c <spark_cloud_flag_connected>
   d48d2:	b140      	cbz	r0, d48e6 <_Z14fullModemResetv+0x36>
   d48d4:	f003 fc6e 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d48d8:	1b00      	subs	r0, r0, r4
   d48da:	42a8      	cmp	r0, r5
   d48dc:	d803      	bhi.n	d48e6 <_Z14fullModemResetv+0x36>
		delay(100);
   d48de:	2064      	movs	r0, #100	; 0x64
   d48e0:	f003 ffd4 	bl	d888c <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
   d48e4:	e7f3      	b.n	d48ce <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d48e6:	2100      	movs	r1, #0
   d48e8:	4b09      	ldr	r3, [pc, #36]	; (d4910 <_Z14fullModemResetv+0x60>)
   d48ea:	f247 5230 	movw	r2, #30000	; 0x7530
   d48ee:	4608      	mov	r0, r1
   d48f0:	f003 fbe0 	bl	d80b4 <cellular_command>
	delay(1000);
   d48f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48f8:	f003 ffc8 	bl	d888c <delay>
	System.sleep(SLEEP_MODE_DEEP, 10);
   d48fc:	4b05      	ldr	r3, [pc, #20]	; (d4914 <_Z14fullModemResetv+0x64>)
   d48fe:	220a      	movs	r2, #10
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	2101      	movs	r1, #1
   d4904:	a801      	add	r0, sp, #4
   d4906:	f005 f8e1 	bl	d9acc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d490a:	b005      	add	sp, #20
   d490c:	bd30      	pop	{r4, r5, pc}
   d490e:	bf00      	nop
   d4910:	000db26c 	.word	0x000db26c
   d4914:	2003e25c 	.word	0x2003e25c

000d4918 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4918:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d491c:	4b17      	ldr	r3, [pc, #92]	; (d497c <_Z12dailyCleanupv+0x64>)
  sysStatus.verboseMode = false;
   d491e:	4d18      	ldr	r5, [pc, #96]	; (d4980 <_Z12dailyCleanupv+0x68>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4920:	4a18      	ldr	r2, [pc, #96]	; (d4984 <_Z12dailyCleanupv+0x6c>)
   d4922:	4919      	ldr	r1, [pc, #100]	; (d4988 <_Z12dailyCleanupv+0x70>)
   d4924:	4819      	ldr	r0, [pc, #100]	; (d498c <_Z12dailyCleanupv+0x74>)
   d4926:	2400      	movs	r4, #0
   d4928:	f88d 4000 	strb.w	r4, [sp]
   d492c:	781b      	ldrb	r3, [r3, #0]
   d492e:	f7ff fca1 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4932:	712c      	strb	r4, [r5, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4934:	f7ff fc1e 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d4938:	f7ff fc82 	bl	d4240 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d493c:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d4940:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d4942:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4946:	f7ff fc7b 	bl	d4240 <_ZN11SystemClass6millisEv>
   d494a:	ebb0 060a 	subs.w	r6, r0, sl
   d494e:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4952:	45b9      	cmp	r9, r7
   d4954:	bf08      	it	eq
   d4956:	45b0      	cmpeq	r8, r6
   d4958:	d305      	bcc.n	d4966 <_Z12dailyCleanupv+0x4e>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d495a:	f7ff fc15 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d495e:	b910      	cbnz	r0, d4966 <_Z12dailyCleanupv+0x4e>
            spark_process();
   d4960:	f003 fe7c 	bl	d865c <spark_process>
        while (_while() && !_condition()) {
   d4964:	e7ef      	b.n	d4946 <_Z12dailyCleanupv+0x2e>
   d4966:	f7ff fc0f 	bl	d4188 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  sysStatus.resetCount = 0;
   d496a:	2300      	movs	r3, #0
   d496c:	612b      	str	r3, [r5, #16]
  systemStatusWriteNeeded=true;
   d496e:	4b08      	ldr	r3, [pc, #32]	; (d4990 <_Z12dailyCleanupv+0x78>)
   d4970:	2201      	movs	r2, #1
   d4972:	701a      	strb	r2, [r3, #0]
}
   d4974:	b002      	add	sp, #8
   d4976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d497a:	bf00      	nop
   d497c:	2003e260 	.word	0x2003e260
   d4980:	2003e58c 	.word	0x2003e58c
   d4984:	000db279 	.word	0x000db279
   d4988:	000db281 	.word	0x000db281
   d498c:	2003e54c 	.word	0x2003e54c
   d4990:	2003e5b0 	.word	0x2003e5b0

000d4994 <_Z8isDSTusav>:


bool isDSTusa() {
   d4994:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4996:	f005 fac7 	bl	d9f28 <_ZN9TimeClass3dayEv>
   d499a:	4605      	mov	r5, r0
  int month = Time.month();
   d499c:	f005 fad8 	bl	d9f50 <_ZN9TimeClass5monthEv>
   d49a0:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d49a2:	f005 facd 	bl	d9f40 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d49a6:	1f23      	subs	r3, r4, #4
   d49a8:	2b06      	cmp	r3, #6
   d49aa:	d90e      	bls.n	d49ca <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d49ac:	1ee3      	subs	r3, r4, #3
   d49ae:	2b08      	cmp	r3, #8
   d49b0:	d80d      	bhi.n	d49ce <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d49b2:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d49b4:	1a2d      	subs	r5, r5, r0
   d49b6:	d504      	bpl.n	d49c2 <_Z8isDSTusav+0x2e>
   d49b8:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d49ba:	bf14      	ite	ne
   d49bc:	2000      	movne	r0, #0
   d49be:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d49c0:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d49c2:	2d07      	cmp	r5, #7
   d49c4:	dd03      	ble.n	d49ce <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d49c6:	2c03      	cmp	r4, #3
   d49c8:	e7f7      	b.n	d49ba <_Z8isDSTusav+0x26>
    return true;
   d49ca:	2001      	movs	r0, #1
   d49cc:	e7f8      	b.n	d49c0 <_Z8isDSTusav+0x2c>
    return false;
   d49ce:	2000      	movs	r0, #0
   d49d0:	e7f6      	b.n	d49c0 <_Z8isDSTusav+0x2c>
   d49d2:	0000      	movs	r0, r0
   d49d4:	0000      	movs	r0, r0
	...

000d49d8 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d49d8:	b570      	push	{r4, r5, r6, lr}
   d49da:	ed2d 8b02 	vpush	{d8}
   d49de:	b0c8      	sub	sp, #288	; 0x120
   d49e0:	4605      	mov	r5, r0
  time_t t = Time.now();
   d49e2:	f005 fa78 	bl	d9ed6 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d49e6:	220a      	movs	r2, #10
  time_t t = Time.now();
   d49e8:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d49ea:	a903      	add	r1, sp, #12
   d49ec:	6828      	ldr	r0, [r5, #0]
   d49ee:	f006 fb1d 	bl	db02c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d49f2:	b2c3      	uxtb	r3, r0
   d49f4:	2b02      	cmp	r3, #2
   d49f6:	d859      	bhi.n	d4aac <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d49f8:	b243      	sxtb	r3, r0
   d49fa:	ee08 3a10 	vmov	s16, r3
   d49fe:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4a02:	eeb0 0a48 	vmov.f32	s0, s16
   d4a06:	f005 f91d 	bl	d9c44 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4a0a:	4b2d      	ldr	r3, [pc, #180]	; (d4ac0 <_Z12setDSTOffset6String+0xe8>)
   d4a0c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4a10:	4b2c      	ldr	r3, [pc, #176]	; (d4ac4 <_Z12setDSTOffset6String+0xec>)
   d4a12:	2201      	movs	r2, #1
   d4a14:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4a16:	ee18 0a10 	vmov	r0, s16
   d4a1a:	f005 fe93 	bl	da744 <__aeabi_f2d>
   d4a1e:	4a2a      	ldr	r2, [pc, #168]	; (d4ac8 <_Z12setDSTOffset6String+0xf0>)
   d4a20:	e9cd 0100 	strd	r0, r1, [sp]
   d4a24:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4a28:	a808      	add	r0, sp, #32
   d4a2a:	f003 fee7 	bl	d87fc <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4a2e:	f005 fa35 	bl	d9e9c <_ZN9TimeClass7isValidEv>
   d4a32:	b128      	cbz	r0, d4a40 <_Z12setDSTOffset6String+0x68>
   d4a34:	f7ff ffae 	bl	d4994 <_Z8isDSTusav>
   d4a38:	2800      	cmp	r0, #0
   d4a3a:	d034      	beq.n	d4aa6 <_Z12setDSTOffset6String+0xce>
   d4a3c:	f005 f920 	bl	d9c80 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4a40:	f005 fa8e 	bl	d9f60 <_ZN9TimeClass5localEv>
   d4a44:	4605      	mov	r5, r0
   d4a46:	f005 fa46 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4a4a:	1a28      	subs	r0, r5, r0
   d4a4c:	f005 fe68 	bl	da720 <__aeabi_i2d>
   d4a50:	a319      	add	r3, pc, #100	; (adr r3, d4ab8 <_Z12setDSTOffset6String+0xe0>)
   d4a52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a56:	f005 fff7 	bl	daa48 <__aeabi_ddiv>
   d4a5a:	4a1c      	ldr	r2, [pc, #112]	; (d4acc <_Z12setDSTOffset6String+0xf4>)
   d4a5c:	e9cd 0100 	strd	r0, r1, [sp]
   d4a60:	210a      	movs	r1, #10
   d4a62:	481b      	ldr	r0, [pc, #108]	; (d4ad0 <_Z12setDSTOffset6String+0xf8>)
   d4a64:	f003 feca 	bl	d87fc <snprintf>
   d4a68:	f003 fe08 	bl	d867c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4a6c:	b1c8      	cbz	r0, d4aa2 <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d4a6e:	4d19      	ldr	r5, [pc, #100]	; (d4ad4 <_Z12setDSTOffset6String+0xfc>)
   d4a70:	4919      	ldr	r1, [pc, #100]	; (d4ad8 <_Z12setDSTOffset6String+0x100>)
   d4a72:	481a      	ldr	r0, [pc, #104]	; (d4adc <_Z12setDSTOffset6String+0x104>)
   d4a74:	2600      	movs	r6, #0
   d4a76:	f88d 6000 	strb.w	r6, [sp]
   d4a7a:	782b      	ldrb	r3, [r5, #0]
   d4a7c:	aa08      	add	r2, sp, #32
   d4a7e:	f7ff fbf9 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4a82:	4622      	mov	r2, r4
   d4a84:	17e3      	asrs	r3, r4, #31
   d4a86:	a804      	add	r0, sp, #16
   d4a88:	f005 f922 	bl	d9cd0 <_ZN9TimeClass7timeStrEx>
   d4a8c:	f88d 6000 	strb.w	r6, [sp]
   d4a90:	782b      	ldrb	r3, [r5, #0]
   d4a92:	9a04      	ldr	r2, [sp, #16]
   d4a94:	4910      	ldr	r1, [pc, #64]	; (d4ad8 <_Z12setDSTOffset6String+0x100>)
   d4a96:	4811      	ldr	r0, [pc, #68]	; (d4adc <_Z12setDSTOffset6String+0x104>)
   d4a98:	f7ff fbec 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a9c:	a804      	add	r0, sp, #16
   d4a9e:	f004 fe7b 	bl	d9798 <_ZN6StringD1Ev>
  return 1;
   d4aa2:	2001      	movs	r0, #1
   d4aa4:	e003      	b.n	d4aae <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4aa6:	f005 f8f7 	bl	d9c98 <_ZN9TimeClass6endDSTEv>
   d4aaa:	e7c9      	b.n	d4a40 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4aac:	2000      	movs	r0, #0
}
   d4aae:	b048      	add	sp, #288	; 0x120
   d4ab0:	ecbd 8b02 	vpop	{d8}
   d4ab4:	bd70      	pop	{r4, r5, r6, pc}
   d4ab6:	bf00      	nop
   d4ab8:	00000000 	.word	0x00000000
   d4abc:	40ac2000 	.word	0x40ac2000
   d4ac0:	2003e58c 	.word	0x2003e58c
   d4ac4:	2003e5b0 	.word	0x2003e5b0
   d4ac8:	000db28f 	.word	0x000db28f
   d4acc:	000db144 	.word	0x000db144
   d4ad0:	2003e2f4 	.word	0x2003e2f4
   d4ad4:	2003e260 	.word	0x2003e260
   d4ad8:	000db162 	.word	0x000db162
   d4adc:	2003e54c 	.word	0x2003e54c

000d4ae0 <_Z11displayInfov>:

void displayInfo()
{
   d4ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  static unsigned long lastSerial = 0;

	if (millis() - lastSerial >= 1000) {                                      // Don't read more than once a second
   d4ae4:	4c53      	ldr	r4, [pc, #332]	; (d4c34 <_Z11displayInfov+0x154>)
{
   d4ae6:	b0a9      	sub	sp, #164	; 0xa4
   d4ae8:	f003 fb64 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= 1000) {                                      // Don't read more than once a second
   d4aec:	6823      	ldr	r3, [r4, #0]
   d4aee:	1ac0      	subs	r0, r0, r3
   d4af0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4af4:	d32a      	bcc.n	d4b4c <_Z11displayInfov+0x6c>
   d4af6:	f003 fb5d 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();

		char buf[128];

		if (gps.gpsFix()) {
   d4afa:	4f4f      	ldr	r7, [pc, #316]	; (d4c38 <_Z11displayInfov+0x158>)
		lastSerial = millis();
   d4afc:	6020      	str	r0, [r4, #0]
        os_thread_scheduling(false, NULL);
   d4afe:	2100      	movs	r1, #0
		if (gps.gpsFix()) {
   d4b00:	687c      	ldr	r4, [r7, #4]
   d4b02:	4608      	mov	r0, r1
   d4b04:	f003 faee 	bl	d80e4 <os_thread_scheduling>
	    	return location;
   d4b08:	7826      	ldrb	r6, [r4, #0]
   d4b0a:	6b64      	ldr	r4, [r4, #52]	; 0x34
        os_thread_scheduling(true, NULL);
   d4b0c:	2100      	movs	r1, #0
   d4b0e:	2001      	movs	r0, #1
   d4b10:	f003 fae8 	bl	d80e4 <os_thread_scheduling>
	bool isValid() const    { return valid; }
   d4b14:	463d      	mov	r5, r7
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4b16:	b9e6      	cbnz	r6, d4b52 <_Z11displayInfov+0x72>
      current.latitude = gps.readLatDeg();
      current.longitude = gps.readLonDeg();
			snprintf(buf, sizeof(buf), "location: %f, %f altitude: %4.1fm %d sattelites", current.latitude, current.longitude, gps.getAltitude(), gps.getSatellites());
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", gps.getSatellites());
   d4b18:	6868      	ldr	r0, [r5, #4]
   d4b1a:	f7ff fb46 	bl	d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4b1e:	4a47      	ldr	r2, [pc, #284]	; (d4c3c <_Z11displayInfov+0x15c>)
   d4b20:	4603      	mov	r3, r0
   d4b22:	2180      	movs	r1, #128	; 0x80
   d4b24:	a808      	add	r0, sp, #32
   d4b26:	f003 fe69 	bl	d87fc <snprintf>
		}

		Log.info(buf);
   d4b2a:	4845      	ldr	r0, [pc, #276]	; (d4c40 <_Z11displayInfov+0x160>)
   d4b2c:	a908      	add	r1, sp, #32
   d4b2e:	f7ff fb8a 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d4b32:	f003 fda3 	bl	d867c <spark_cloud_flag_connected>
		if (Particle.connected()) publishQueue.publish("gps", buf, PRIVATE);
   d4b36:	b148      	cbz	r0, d4b4c <_Z11displayInfov+0x6c>
   d4b38:	2300      	movs	r3, #0
   d4b3a:	f88d 3000 	strb.w	r3, [sp]
   d4b3e:	4b41      	ldr	r3, [pc, #260]	; (d4c44 <_Z11displayInfov+0x164>)
   d4b40:	4941      	ldr	r1, [pc, #260]	; (d4c48 <_Z11displayInfov+0x168>)
   d4b42:	781b      	ldrb	r3, [r3, #0]
   d4b44:	4841      	ldr	r0, [pc, #260]	; (d4c4c <_Z11displayInfov+0x16c>)
   d4b46:	aa08      	add	r2, sp, #32
   d4b48:	f7ff fb94 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
	}
}
   d4b4c:	b029      	add	sp, #164	; 0xa4
   d4b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4b52:	f003 fb2f 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d4b56:	f242 730f 	movw	r3, #9999	; 0x270f
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4b5a:	1b00      	subs	r0, r0, r4
   d4b5c:	4298      	cmp	r0, r3
   d4b5e:	d8db      	bhi.n	d4b18 <_Z11displayInfov+0x38>
      current.latitude = gps.readLatDeg();
   d4b60:	687d      	ldr	r5, [r7, #4]
   d4b62:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d4c58 <_Z11displayInfov+0x178>
        os_thread_scheduling(false, NULL);
   d4b66:	2100      	movs	r1, #0
   d4b68:	4608      	mov	r0, r1
   d4b6a:	f003 fabb 	bl	d80e4 <os_thread_scheduling>
	    	return location;
   d4b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b70:	ac08      	add	r4, sp, #32
   d4b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4b80:	e884 0003 	stmia.w	r4, {r0, r1}
        os_thread_scheduling(true, NULL);
   d4b84:	2100      	movs	r1, #0
   d4b86:	2001      	movs	r0, #1
   d4b88:	f003 faac 	bl	d80e4 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d4b8c:	a808      	add	r0, sp, #32
   d4b8e:	f001 ffeb 	bl	d6b68 <_ZN15TinyGPSLocation3latEv>
   d4b92:	ec51 0b10 	vmov	r0, r1, d0
   d4b96:	f006 f85f 	bl	dac58 <__aeabi_d2f>
   d4b9a:	f005 fdd3 	bl	da744 <__aeabi_f2d>
      current.longitude = gps.readLonDeg();
   d4b9e:	687d      	ldr	r5, [r7, #4]
      current.latitude = gps.readLatDeg();
   d4ba0:	e9c8 0108 	strd	r0, r1, [r8, #32]
        os_thread_scheduling(false, NULL);
   d4ba4:	2100      	movs	r1, #0
   d4ba6:	4608      	mov	r0, r1
   d4ba8:	f003 fa9c 	bl	d80e4 <os_thread_scheduling>
   d4bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bae:	ae08      	add	r6, sp, #32
   d4bb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4bba:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4bbe:	e884 0003 	stmia.w	r4, {r0, r1}
        os_thread_scheduling(true, NULL);
   d4bc2:	2100      	movs	r1, #0
   d4bc4:	2001      	movs	r0, #1
   d4bc6:	f003 fa8d 	bl	d80e4 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4bca:	a808      	add	r0, sp, #32
   d4bcc:	f001 fff0 	bl	d6bb0 <_ZN15TinyGPSLocation3lngEv>
   d4bd0:	ec51 0b10 	vmov	r0, r1, d0
   d4bd4:	f006 f840 	bl	dac58 <__aeabi_d2f>
      current.longitude = gps.readLonDeg();
   d4bd8:	f005 fdb4 	bl	da744 <__aeabi_f2d>
   d4bdc:	460d      	mov	r5, r1
        os_thread_scheduling(false, NULL);
   d4bde:	2100      	movs	r1, #0
   d4be0:	4604      	mov	r4, r0
			snprintf(buf, sizeof(buf), "location: %f, %f altitude: %4.1fm %d sattelites", current.latitude, current.longitude, gps.getAltitude(), gps.getSatellites());
   d4be2:	687e      	ldr	r6, [r7, #4]
   d4be4:	4608      	mov	r0, r1
      current.longitude = gps.readLonDeg();
   d4be6:	e9c8 450a 	strd	r4, r5, [r8, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location: %f, %f altitude: %4.1fm %d sattelites", current.latitude, current.longitude, gps.getAltitude(), gps.getSatellites());
   d4bea:	e9d8 8908 	ldrd	r8, r9, [r8, #32]
   d4bee:	f003 fa79 	bl	d80e4 <os_thread_scheduling>
        os_thread_scheduling(true, NULL);
   d4bf2:	2100      	movs	r1, #0
   d4bf4:	2001      	movs	r0, #1
	    	return altitude;
   d4bf6:	f8d6 6080 	ldr.w	r6, [r6, #128]	; 0x80
   d4bfa:	f003 fa73 	bl	d80e4 <os_thread_scheduling>
   d4bfe:	6878      	ldr	r0, [r7, #4]
   d4c00:	f7ff fad3 	bl	d41aa <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4c04:	9006      	str	r0, [sp, #24]
	double meters()       { return value() / 100.0; }
   d4c06:	4630      	mov	r0, r6
   d4c08:	f005 fd8a 	bl	da720 <__aeabi_i2d>
   d4c0c:	4b10      	ldr	r3, [pc, #64]	; (d4c50 <_Z11displayInfov+0x170>)
   d4c0e:	2200      	movs	r2, #0
   d4c10:	f005 ff1a 	bl	daa48 <__aeabi_ddiv>
		return gpsData.getAltitude().meters();
   d4c14:	f006 f820 	bl	dac58 <__aeabi_d2f>
   d4c18:	f005 fd94 	bl	da744 <__aeabi_f2d>
   d4c1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d4c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4c24:	e9cd 8900 	strd	r8, r9, [sp]
   d4c28:	4a0a      	ldr	r2, [pc, #40]	; (d4c54 <_Z11displayInfov+0x174>)
   d4c2a:	2180      	movs	r1, #128	; 0x80
   d4c2c:	a808      	add	r0, sp, #32
   d4c2e:	f003 fde5 	bl	d87fc <snprintf>
   d4c32:	e77a      	b.n	d4b2a <_Z11displayInfov+0x4a>
   d4c34:	2003e264 	.word	0x2003e264
   d4c38:	2003e32c 	.word	0x2003e32c
   d4c3c:	000db2a0 	.word	0x000db2a0
   d4c40:	2003e624 	.word	0x2003e624
   d4c44:	2003e260 	.word	0x2003e260
   d4c48:	000db2ea 	.word	0x000db2ea
   d4c4c:	2003e54c 	.word	0x2003e54c
   d4c50:	40590000 	.word	0x40590000
   d4c54:	000db2ba 	.word	0x000db2ba
   d4c58:	2003e2b8 	.word	0x2003e2b8

000d4c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4c5c:	b530      	push	{r4, r5, lr}
   d4c5e:	b085      	sub	sp, #20
   d4c60:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4c62:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4c64:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4c66:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4c68:	f003 fc5c 	bl	d8524 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4c6c:	b9b0      	cbnz	r0, d4c9c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4c6e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4c70:	b10c      	cbz	r4, d4c76 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4c72:	6923      	ldr	r3, [r4, #16]
   d4c74:	b923      	cbnz	r3, d4c80 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4c76:	4a0a      	ldr	r2, [pc, #40]	; (d4ca0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4c78:	2100      	movs	r1, #0
   d4c7a:	200a      	movs	r0, #10
   d4c7c:	f003 fc3a 	bl	d84f4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4c80:	2300      	movs	r3, #0
   d4c82:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4c86:	230c      	movs	r3, #12
   d4c88:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4c8c:	2304      	movs	r3, #4
   d4c8e:	9303      	str	r3, [sp, #12]
   d4c90:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4c92:	6923      	ldr	r3, [r4, #16]
   d4c94:	aa01      	add	r2, sp, #4
   d4c96:	2101      	movs	r1, #1
   d4c98:	4620      	mov	r0, r4
   d4c9a:	4798      	blx	r3
}
   d4c9c:	b005      	add	sp, #20
   d4c9e:	bd30      	pop	{r4, r5, pc}
   d4ca0:	000d81a5 	.word	0x000d81a5

000d4ca4 <_ZNK11SystemClass12batteryStateEv.isra.0>:
            return r;
        }
        return val;
    }

    int batteryState() const {
   d4ca4:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4ca6:	2007      	movs	r0, #7
   d4ca8:	a901      	add	r1, sp, #4
   d4caa:	f7ff ffd7 	bl	d4c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4cae:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4cb0:	bfa8      	it	ge
   d4cb2:	9801      	ldrge	r0, [sp, #4]
    }
   d4cb4:	b003      	add	sp, #12
   d4cb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cbc <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4cbc:	b570      	push	{r4, r5, r6, lr}
   d4cbe:	b08c      	sub	sp, #48	; 0x30
   d4cc0:	a905      	add	r1, sp, #20
   d4cc2:	2003      	movs	r0, #3
   d4cc4:	f7ff ffca 	bl	d4c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4cc8:	2800      	cmp	r0, #0
   d4cca:	d138      	bne.n	d4d3e <_Z17getBatteryContextv+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4ccc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4cd0:	ee07 3a90 	vmov	s15, r3
   d4cd4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4cd8:	4d2a      	ldr	r5, [pc, #168]	; (d4d84 <_Z17getBatteryContextv+0xc8>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4cda:	4e2b      	ldr	r6, [pc, #172]	; (d4d88 <_Z17getBatteryContextv+0xcc>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cde:	ac05      	add	r4, sp, #20
   d4ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4cee:	edc6 7a02 	vstr	s15, [r6, #8]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4cf2:	f7ff ffd7 	bl	d4ca4 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4cf6:	ab0c      	add	r3, sp, #48	; 0x30
   d4cf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4cfc:	4d23      	ldr	r5, [pc, #140]	; (d4d8c <_Z17getBatteryContextv+0xd0>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4cfe:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4d02:	4a23      	ldr	r2, [pc, #140]	; (d4d90 <_Z17getBatteryContextv+0xd4>)
   d4d04:	4823      	ldr	r0, [pc, #140]	; (d4d94 <_Z17getBatteryContextv+0xd8>)
   d4d06:	2110      	movs	r1, #16
   d4d08:	f003 fd78 	bl	d87fc <snprintf>
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4d0c:	782b      	ldrb	r3, [r5, #0]
   d4d0e:	4634      	mov	r4, r6
   d4d10:	462e      	mov	r6, r5
   d4d12:	b9bb      	cbnz	r3, d4d44 <_Z17getBatteryContextv+0x88>
   d4d14:	f7ff ffc6 	bl	d4ca4 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d18:	2804      	cmp	r0, #4
   d4d1a:	d113      	bne.n	d4d44 <_Z17getBatteryContextv+0x88>
    alreadyOnBattery = true;
   d4d1c:	2301      	movs	r3, #1
   d4d1e:	702b      	strb	r3, [r5, #0]
  if (Time.now() - sysStatus.lastTimePowered > 4 * 60 * 60 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4d20:	f005 f8d9 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4d24:	6a23      	ldr	r3, [r4, #32]
   d4d26:	1ac0      	subs	r0, r0, r3
   d4d28:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   d4d2c:	d828      	bhi.n	d4d80 <_Z17getBatteryContextv+0xc4>
   d4d2e:	68a3      	ldr	r3, [r4, #8]
    sysStatus.lowBatteryMode = true;
   d4d30:	2b32      	cmp	r3, #50	; 0x32
   d4d32:	bfcc      	ite	gt
   d4d34:	2300      	movgt	r3, #0
   d4d36:	2301      	movle	r3, #1
   d4d38:	7163      	strb	r3, [r4, #5]
}
   d4d3a:	b00c      	add	sp, #48	; 0x30
   d4d3c:	bd70      	pop	{r4, r5, r6, pc}
            return -1.0f;
   d4d3e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4d42:	e7c9      	b.n	d4cd8 <_Z17getBatteryContextv+0x1c>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4d44:	f7ff ffae 	bl	d4ca4 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d48:	2802      	cmp	r0, #2
   d4d4a:	d114      	bne.n	d4d76 <_Z17getBatteryContextv+0xba>
    alreadyOnBattery = false;
   d4d4c:	2300      	movs	r3, #0
   d4d4e:	7033      	strb	r3, [r6, #0]
    sysStatus.lastTimePowered = Time.now();
   d4d50:	f005 f8c1 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4d54:	6220      	str	r0, [r4, #32]
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4d56:	f005 f8be 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4d5a:	17c3      	asrs	r3, r0, #31
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	a801      	add	r0, sp, #4
   d4d60:	f004 ffb6 	bl	d9cd0 <_ZN9TimeClass7timeStrEx>
    snprintf(lastPoweredStr, sizeof(lastPoweredStr), Time.timeStr());
   d4d64:	9a01      	ldr	r2, [sp, #4]
   d4d66:	480c      	ldr	r0, [pc, #48]	; (d4d98 <_Z17getBatteryContextv+0xdc>)
   d4d68:	2120      	movs	r1, #32
   d4d6a:	f003 fd47 	bl	d87fc <snprintf>
   d4d6e:	a801      	add	r0, sp, #4
   d4d70:	f004 fd12 	bl	d9798 <_ZN6StringD1Ev>
   d4d74:	e7d4      	b.n	d4d20 <_Z17getBatteryContextv+0x64>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4d76:	f7ff ff95 	bl	d4ca4 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4d7a:	2803      	cmp	r0, #3
   d4d7c:	d1d0      	bne.n	d4d20 <_Z17getBatteryContextv+0x64>
   d4d7e:	e7e5      	b.n	d4d4c <_Z17getBatteryContextv+0x90>
    sysStatus.lowBatteryMode = true;
   d4d80:	2301      	movs	r3, #1
   d4d82:	e7d9      	b.n	d4d38 <_Z17getBatteryContextv+0x7c>
   d4d84:	000db4d0 	.word	0x000db4d0
   d4d88:	2003e58c 	.word	0x2003e58c
   d4d8c:	2003e268 	.word	0x2003e268
   d4d90:	000db623 	.word	0x000db623
   d4d94:	2003e290 	.word	0x2003e290
   d4d98:	2003e0d4 	.word	0x2003e0d4

000d4d9c <_Z16takeMeasurementsv>:
{
   d4d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4d9e:	f7ff fe9f 	bl	d4ae0 <_Z11displayInfov>
        return network_ready(*this, 0,  NULL);
   d4da2:	4b24      	ldr	r3, [pc, #144]	; (d4e34 <_Z16takeMeasurementsv+0x98>)
   d4da4:	2200      	movs	r2, #0
   d4da6:	6858      	ldr	r0, [r3, #4]
   d4da8:	4611      	mov	r1, r2
   d4daa:	f003 fccf 	bl	d874c <network_ready>
  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4dae:	b108      	cbz	r0, d4db4 <_Z16takeMeasurementsv+0x18>
   d4db0:	f7ff fc54 	bl	d465c <_Z17getSignalStrengthv>
   d4db4:	4d20      	ldr	r5, [pc, #128]	; (d4e38 <_Z16takeMeasurementsv+0x9c>)
    float temp = getTemp(sensorAddresses[i]);
   d4db6:	4f21      	ldr	r7, [pc, #132]	; (d4e3c <_Z16takeMeasurementsv+0xa0>)
{
   d4db8:	2400      	movs	r4, #0
   d4dba:	462e      	mov	r6, r5
    float temp = getTemp(sensorAddresses[i]);
   d4dbc:	1938      	adds	r0, r7, r4
   d4dbe:	f7ff fc23 	bl	d4608 <_Z7getTempPh>
   d4dc2:	ec51 0b10 	vmov	r0, r1, d0
   d4dc6:	f005 ff47 	bl	dac58 <__aeabi_d2f>
   d4dca:	ee07 0a90 	vmov	s15, r0
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4dce:	eef4 7a67 	vcmp.f32	s15, s15
   d4dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4dd6:	d603      	bvs.n	d4de0 <_Z16takeMeasurementsv+0x44>
   d4dd8:	f005 fcb4 	bl	da744 <__aeabi_f2d>
   d4ddc:	e9c5 0100 	strd	r0, r1, [r5]
  for (int i = 0; i < nSENSORS; i++) {
   d4de0:	3408      	adds	r4, #8
   d4de2:	2c18      	cmp	r4, #24
   d4de4:	f105 0508 	add.w	r5, r5, #8
   d4de8:	d1e8      	bne.n	d4dbc <_Z16takeMeasurementsv+0x20>
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4dea:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4dee:	210c      	movs	r1, #12
   d4df0:	e9cd 2300 	strd	r2, r3, [sp]
   d4df4:	4812      	ldr	r0, [pc, #72]	; (d4e40 <_Z16takeMeasurementsv+0xa4>)
   d4df6:	4a13      	ldr	r2, [pc, #76]	; (d4e44 <_Z16takeMeasurementsv+0xa8>)
   d4df8:	f003 fd00 	bl	d87fc <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4dfc:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   d4e00:	210c      	movs	r1, #12
   d4e02:	e9cd 2300 	strd	r2, r3, [sp]
   d4e06:	4810      	ldr	r0, [pc, #64]	; (d4e48 <_Z16takeMeasurementsv+0xac>)
   d4e08:	4a0e      	ldr	r2, [pc, #56]	; (d4e44 <_Z16takeMeasurementsv+0xa8>)
   d4e0a:	f003 fcf7 	bl	d87fc <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4e0e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   d4e12:	210c      	movs	r1, #12
   d4e14:	e9cd 2300 	strd	r2, r3, [sp]
   d4e18:	480c      	ldr	r0, [pc, #48]	; (d4e4c <_Z16takeMeasurementsv+0xb0>)
   d4e1a:	4a0a      	ldr	r2, [pc, #40]	; (d4e44 <_Z16takeMeasurementsv+0xa8>)
   d4e1c:	f003 fcee 	bl	d87fc <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4e20:	f7ff ff4c 	bl	d4cbc <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4e24:	4a0a      	ldr	r2, [pc, #40]	; (d4e50 <_Z16takeMeasurementsv+0xb4>)
   d4e26:	2301      	movs	r3, #1
   d4e28:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4e2a:	4a0a      	ldr	r2, [pc, #40]	; (d4e54 <_Z16takeMeasurementsv+0xb8>)
   d4e2c:	7013      	strb	r3, [r2, #0]
}
   d4e2e:	b003      	add	sp, #12
   d4e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e32:	bf00      	nop
   d4e34:	2003e5ec 	.word	0x2003e5ec
   d4e38:	2003e2b8 	.word	0x2003e2b8
   d4e3c:	2003f400 	.word	0x2003f400
   d4e40:	2003e0c0 	.word	0x2003e0c0
   d4e44:	000db2ee 	.word	0x000db2ee
   d4e48:	2003e180 	.word	0x2003e180
   d4e4c:	2003e0f8 	.word	0x2003e0f8
   d4e50:	2003e5b0 	.word	0x2003e5b0
   d4e54:	2003e2e8 	.word	0x2003e2e8

000d4e58 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4e58:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4e5a:	4c27      	ldr	r4, [pc, #156]	; (d4ef8 <_Z17checkSystemValuesv+0xa0>)
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4e5c:	f7ff ff9e 	bl	d4d9c <_Z16takeMeasurementsv>
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4e60:	78e3      	ldrb	r3, [r4, #3]
   d4e62:	2b01      	cmp	r3, #1
   d4e64:	d905      	bls.n	d4e72 <_Z17checkSystemValuesv+0x1a>
   d4e66:	f003 fc09 	bl	d867c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4e6a:	2800      	cmp	r0, #0
   d4e6c:	d042      	beq.n	d4ef4 <_Z17checkSystemValuesv+0x9c>
   d4e6e:	2301      	movs	r3, #1
   d4e70:	70e3      	strb	r3, [r4, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4e72:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e74:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4e78:	2b01      	cmp	r3, #1
   d4e7a:	bf84      	itt	hi
   d4e7c:	2300      	movhi	r3, #0
   d4e7e:	7123      	strbhi	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4e80:	68a3      	ldr	r3, [r4, #8]
   d4e82:	2b1d      	cmp	r3, #29
   d4e84:	bfcc      	ite	gt
   d4e86:	2300      	movgt	r3, #0
   d4e88:	2301      	movle	r3, #1
   d4e8a:	7163      	strb	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e8c:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e8e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e92:	2bff      	cmp	r3, #255	; 0xff
   d4e94:	bf88      	it	hi
   d4e96:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e98:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e9c:	bf88      	it	hi
   d4e9e:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea4:	d406      	bmi.n	d4eb4 <_Z17checkSystemValuesv+0x5c>
   d4ea6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb2:	dd01      	ble.n	d4eb8 <_Z17checkSystemValuesv+0x60>
   d4eb4:	4b11      	ldr	r3, [pc, #68]	; (d4efc <_Z17checkSystemValuesv+0xa4>)
   d4eb6:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4eb8:	edd4 7a06 	vldr	s15, [r4, #24]
   d4ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ec4:	d406      	bmi.n	d4ed4 <_Z17checkSystemValuesv+0x7c>
   d4ec6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4eca:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ed2:	dd02      	ble.n	d4eda <_Z17checkSystemValuesv+0x82>
   d4ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d4ed8:	61a3      	str	r3, [r4, #24]
  if (Time.now() < sysStatus.lastTimePowered) sysStatus.lastTimePowered = 0;          // Can't go back in time
   d4eda:	f004 fffc 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d4ede:	6a23      	ldr	r3, [r4, #32]
   d4ee0:	4298      	cmp	r0, r3
   d4ee2:	bf3c      	itt	cc
   d4ee4:	2300      	movcc	r3, #0
   d4ee6:	6223      	strcc	r3, [r4, #32]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d4ee8:	230a      	movs	r3, #10
   d4eea:	71a3      	strb	r3, [r4, #6]
  systemStatusWriteNeeded = true;
   d4eec:	4b04      	ldr	r3, [pc, #16]	; (d4f00 <_Z17checkSystemValuesv+0xa8>)
   d4eee:	2201      	movs	r2, #1
   d4ef0:	701a      	strb	r2, [r3, #0]
}
   d4ef2:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4ef4:	70e0      	strb	r0, [r4, #3]
   d4ef6:	e7bc      	b.n	d4e72 <_Z17checkSystemValuesv+0x1a>
   d4ef8:	2003e58c 	.word	0x2003e58c
   d4efc:	c0a00000 	.word	0xc0a00000
   d4f00:	2003e5b0 	.word	0x2003e5b0

000d4f04 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4f04:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f06:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4f08:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f0a:	68dd      	ldr	r5, [r3, #12]
   d4f0c:	2324      	movs	r3, #36	; 0x24
   d4f0e:	47a8      	blx	r5
    }
   d4f10:	4620      	mov	r0, r4
   d4f12:	bd38      	pop	{r3, r4, r5, pc}

000d4f14 <loop>:
{
   d4f14:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d4f16:	4c93      	ldr	r4, [pc, #588]	; (d5164 <loop+0x250>)
   d4f18:	7823      	ldrb	r3, [r4, #0]
   d4f1a:	3b01      	subs	r3, #1
{
   d4f1c:	b093      	sub	sp, #76	; 0x4c
   d4f1e:	2b05      	cmp	r3, #5
   d4f20:	d830      	bhi.n	d4f84 <loop+0x70>
   d4f22:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f26:	019d      	.short	0x019d
   d4f28:	01120006 	.word	0x01120006
   d4f2c:	01490074 	.word	0x01490074
   d4f30:	016d      	.short	0x016d
      if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f32:	4d8d      	ldr	r5, [pc, #564]	; (d5168 <loop+0x254>)
   d4f34:	792b      	ldrb	r3, [r5, #4]
   d4f36:	b12b      	cbz	r3, d4f44 <loop+0x30>
   d4f38:	4b8c      	ldr	r3, [pc, #560]	; (d516c <loop+0x258>)
   d4f3a:	781b      	ldrb	r3, [r3, #0]
   d4f3c:	2b02      	cmp	r3, #2
   d4f3e:	d001      	beq.n	d4f44 <loop+0x30>
   d4f40:	f7ff fc84 	bl	d484c <_Z22publishStateTransitionv>
      if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d4f44:	796b      	ldrb	r3, [r5, #5]
   d4f46:	b10b      	cbz	r3, d4f4c <loop+0x38>
   d4f48:	2304      	movs	r3, #4
   d4f4a:	7023      	strb	r3, [r4, #0]
      if (millis() - lastPoll > 1000) {                               // Slow down the polling a bit - less traffic on i2c bus and no need to check the clock more than once a second
   d4f4c:	4e88      	ldr	r6, [pc, #544]	; (d5170 <loop+0x25c>)
   d4f4e:	f003 f931 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d4f52:	6832      	ldr	r2, [r6, #0]
   d4f54:	1a80      	subs	r0, r0, r2
   d4f56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4f5a:	d913      	bls.n	d4f84 <loop+0x70>
        if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d4f5c:	f004 ffd8 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d4f60:	79ab      	ldrb	r3, [r5, #6]
   d4f62:	fb90 f2f3 	sdiv	r2, r0, r3
   d4f66:	fb02 0313 	mls	r3, r2, r3, r0
   d4f6a:	2b00      	cmp	r3, #0
   d4f6c:	d144      	bne.n	d4ff8 <loop+0xe4>
   d4f6e:	f004 ffcf 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d4f72:	4b80      	ldr	r3, [pc, #512]	; (d5174 <loop+0x260>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	4298      	cmp	r0, r3
   d4f78:	d03e      	beq.n	d4ff8 <loop+0xe4>
   d4f7a:	2303      	movs	r3, #3
   d4f7c:	7023      	strb	r3, [r4, #0]
   d4f7e:	f003 f919 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
        lastPoll = millis();
   d4f82:	6030      	str	r0, [r6, #0]
  if (systemStatusWriteNeeded) {
   d4f84:	4c7c      	ldr	r4, [pc, #496]	; (d5178 <loop+0x264>)
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d4f86:	487d      	ldr	r0, [pc, #500]	; (d517c <loop+0x268>)
   d4f88:	f001 fa08 	bl	d639c <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d4f8c:	7823      	ldrb	r3, [r4, #0]
   d4f8e:	b133      	cbz	r3, d4f9e <loop+0x8a>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d4f90:	4a75      	ldr	r2, [pc, #468]	; (d5168 <loop+0x254>)
   d4f92:	487b      	ldr	r0, [pc, #492]	; (d5180 <loop+0x26c>)
   d4f94:	2101      	movs	r1, #1
   d4f96:	f7ff ffb5 	bl	d4f04 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d4f9a:	2300      	movs	r3, #0
   d4f9c:	7023      	strb	r3, [r4, #0]
  if (currentCountsWriteNeeded) {
   d4f9e:	4c79      	ldr	r4, [pc, #484]	; (d5184 <loop+0x270>)
   d4fa0:	7823      	ldrb	r3, [r4, #0]
   d4fa2:	b13b      	cbz	r3, d4fb4 <loop+0xa0>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4fa4:	2330      	movs	r3, #48	; 0x30
   d4fa6:	4a78      	ldr	r2, [pc, #480]	; (d5188 <loop+0x274>)
   d4fa8:	4875      	ldr	r0, [pc, #468]	; (d5180 <loop+0x26c>)
   d4faa:	2150      	movs	r1, #80	; 0x50
   d4fac:	f002 faad 	bl	d750a <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	7023      	strb	r3, [r4, #0]
  if (outOfMemory >= 0) {
   d4fb4:	4b75      	ldr	r3, [pc, #468]	; (d518c <loop+0x278>)
   d4fb6:	681b      	ldr	r3, [r3, #0]
   d4fb8:	2b00      	cmp	r3, #0
   d4fba:	db1b      	blt.n	d4ff4 <loop+0xe0>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d4fbc:	4a74      	ldr	r2, [pc, #464]	; (d5190 <loop+0x27c>)
   d4fbe:	2140      	movs	r1, #64	; 0x40
   d4fc0:	a802      	add	r0, sp, #8
   d4fc2:	f003 fc1b 	bl	d87fc <snprintf>
    Log.info(message);
   d4fc6:	a902      	add	r1, sp, #8
   d4fc8:	4872      	ldr	r0, [pc, #456]	; (d5194 <loop+0x280>)
   d4fca:	f7ff f93c 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d4fce:	2064      	movs	r0, #100	; 0x64
   d4fd0:	f003 fc5c 	bl	d888c <delay>
   d4fd4:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);
   d4fd6:	f88d 3000 	strb.w	r3, [sp]
   d4fda:	4b6f      	ldr	r3, [pc, #444]	; (d5198 <loop+0x284>)
   d4fdc:	496f      	ldr	r1, [pc, #444]	; (d519c <loop+0x288>)
   d4fde:	781b      	ldrb	r3, [r3, #0]
   d4fe0:	486f      	ldr	r0, [pc, #444]	; (d51a0 <loop+0x28c>)
   d4fe2:	aa02      	add	r2, sp, #8
   d4fe4:	f7ff f946 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d4fe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4fec:	f003 fc4e 	bl	d888c <delay>
    System.reset();
   d4ff0:	f004 fd04 	bl	d99fc <_ZN11SystemClass5resetEv>
}
   d4ff4:	b013      	add	sp, #76	; 0x4c
   d4ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d4ff8:	f004 ff8a 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d4ffc:	2800      	cmp	r0, #0
   d4ffe:	d1be      	bne.n	d4f7e <loop+0x6a>
   d5000:	f004 ff86 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d5004:	4b5b      	ldr	r3, [pc, #364]	; (d5174 <loop+0x260>)
   d5006:	681b      	ldr	r3, [r3, #0]
   d5008:	4298      	cmp	r0, r3
   d500a:	d1b6      	bne.n	d4f7a <loop+0x66>
   d500c:	e7b7      	b.n	d4f7e <loop+0x6a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d500e:	4d56      	ldr	r5, [pc, #344]	; (d5168 <loop+0x254>)
   d5010:	792b      	ldrb	r3, [r5, #4]
   d5012:	b12b      	cbz	r3, d5020 <loop+0x10c>
   d5014:	4b55      	ldr	r3, [pc, #340]	; (d516c <loop+0x258>)
   d5016:	781b      	ldrb	r3, [r3, #0]
   d5018:	2b04      	cmp	r3, #4
   d501a:	d001      	beq.n	d5020 <loop+0x10c>
   d501c:	f7ff fc16 	bl	d484c <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d5020:	f7ff fe4c 	bl	d4cbc <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d5024:	796b      	ldrb	r3, [r5, #5]
   d5026:	b90b      	cbnz	r3, d502c <loop+0x118>
      state = IDLE_STATE;
   d5028:	2302      	movs	r3, #2
   d502a:	e025      	b.n	d5078 <loop+0x164>
    else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       // Troubleshooting code
   d502c:	f004 ff53 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d5030:	69eb      	ldr	r3, [r5, #28]
   d5032:	1ac0      	subs	r0, r0, r3
   d5034:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5038:	d920      	bls.n	d507c <loop+0x168>
      connectToParticle();
   d503a:	f7ff fb79 	bl	d4730 <_Z17connectToParticlev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d503e:	4b56      	ldr	r3, [pc, #344]	; (d5198 <loop+0x284>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5040:	4a58      	ldr	r2, [pc, #352]	; (d51a4 <loop+0x290>)
   d5042:	781b      	ldrb	r3, [r3, #0]
   d5044:	f88d 3000 	strb.w	r3, [sp]
   d5048:	4957      	ldr	r1, [pc, #348]	; (d51a8 <loop+0x294>)
   d504a:	233c      	movs	r3, #60	; 0x3c
   d504c:	a802      	add	r0, sp, #8
   d504e:	f003 fef1 	bl	d8e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5052:	9d03      	ldr	r5, [sp, #12]
   d5054:	b17d      	cbz	r5, d5076 <loop+0x162>
      if (--_M_use_count == 0)
   d5056:	686b      	ldr	r3, [r5, #4]
   d5058:	3b01      	subs	r3, #1
   d505a:	606b      	str	r3, [r5, #4]
   d505c:	b95b      	cbnz	r3, d5076 <loop+0x162>
          _M_dispose();
   d505e:	682b      	ldr	r3, [r5, #0]
   d5060:	4628      	mov	r0, r5
   d5062:	689b      	ldr	r3, [r3, #8]
   d5064:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5066:	68ab      	ldr	r3, [r5, #8]
   d5068:	3b01      	subs	r3, #1
   d506a:	60ab      	str	r3, [r5, #8]
   d506c:	b91b      	cbnz	r3, d5076 <loop+0x162>
            _M_destroy();
   d506e:	682b      	ldr	r3, [r5, #0]
   d5070:	4628      	mov	r0, r5
   d5072:	68db      	ldr	r3, [r3, #12]
   d5074:	4798      	blx	r3
    state = REPORTING_STATE;
   d5076:	2305      	movs	r3, #5
      state = ERROR_STATE;                                            // Response timed out
   d5078:	7023      	strb	r3, [r4, #0]
   d507a:	e783      	b.n	d4f84 <loop+0x70>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d507c:	f004 ff48 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d5080:	2801      	cmp	r0, #1
   d5082:	dd03      	ble.n	d508c <loop+0x178>
   d5084:	78eb      	ldrb	r3, [r5, #3]
   d5086:	b10b      	cbz	r3, d508c <loop+0x178>
   d5088:	f7ff fba0 	bl	d47cc <_Z22disconnectFromParticlev>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d508c:	2100      	movs	r1, #0
   d508e:	2007      	movs	r0, #7
   d5090:	f005 f979 	bl	da386 <digitalWrite>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5094:	2100      	movs	r1, #0
   d5096:	4839      	ldr	r0, [pc, #228]	; (d517c <loop+0x268>)
   d5098:	f000 fd88 	bl	d5bac <_ZN6AB18056setWDTEi>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d509c:	f004 ff38 	bl	d9f10 <_ZN9TimeClass6minuteEv>
        if (valid_) {
   d50a0:	4b42      	ldr	r3, [pc, #264]	; (d51ac <loop+0x298>)
   d50a2:	7d1a      	ldrb	r2, [r3, #20]
   d50a4:	4604      	mov	r4, r0
   d50a6:	b10a      	cbz	r2, d50ac <loop+0x198>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d50a8:	2202      	movs	r2, #2
   d50aa:	721a      	strb	r2, [r3, #8]
        .gpio(userSwitch,CHANGE)
   d50ac:	483f      	ldr	r0, [pc, #252]	; (d51ac <loop+0x298>)
   d50ae:	2200      	movs	r2, #0
   d50b0:	2104      	movs	r1, #4
   d50b2:	f7ff f891 	bl	d41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d50b6:	7d03      	ldrb	r3, [r0, #20]
   d50b8:	4606      	mov	r6, r0
   d50ba:	b35b      	cbz	r3, d5114 <loop+0x200>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d50bc:	233c      	movs	r3, #60	; 0x3c
   d50be:	f1c4 003c 	rsb	r0, r4, #60	; 0x3c
   d50c2:	4358      	muls	r0, r3
        .duration(wakeInSeconds * 1000);
   d50c4:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
   d50c8:	bfa8      	it	ge
   d50ca:	f44f 6061 	movge.w	r0, #3600	; 0xe10
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d50ce:	6833      	ldr	r3, [r6, #0]
   d50d0:	2801      	cmp	r0, #1
   d50d2:	bfb8      	it	lt
   d50d4:	2001      	movlt	r0, #1
   d50d6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   d50da:	68db      	ldr	r3, [r3, #12]
   d50dc:	4347      	muls	r7, r0
        if (!start) {
   d50de:	b12b      	cbz	r3, d50ec <loop+0x1d8>
            if (start->type == type) {
   d50e0:	889a      	ldrh	r2, [r3, #4]
   d50e2:	2a04      	cmp	r2, #4
   d50e4:	f000 8127 	beq.w	d5336 <loop+0x422>
            start = start->next;
   d50e8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d50ea:	e7f8      	b.n	d50de <loop+0x1ca>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d50ec:	4930      	ldr	r1, [pc, #192]	; (d51b0 <loop+0x29c>)
   d50ee:	2010      	movs	r0, #16
   d50f0:	f005 f9bd 	bl	da46e <_ZnwjRKSt9nothrow_t>
   d50f4:	4604      	mov	r4, r0
   d50f6:	2800      	cmp	r0, #0
   d50f8:	f000 811b 	beq.w	d5332 <loop+0x41e>
   d50fc:	2210      	movs	r2, #16
   d50fe:	2100      	movs	r1, #0
   d5100:	f005 fea4 	bl	dae4c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d5104:	4b2b      	ldr	r3, [pc, #172]	; (d51b4 <loop+0x2a0>)
   d5106:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5108:	2304      	movs	r3, #4
   d510a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d510c:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d510e:	e9c4 3702 	strd	r3, r7, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d5112:	6134      	str	r4, [r6, #16]
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5114:	4925      	ldr	r1, [pc, #148]	; (d51ac <loop+0x298>)
   d5116:	a802      	add	r0, sp, #8
   d5118:	f004 fc74 	bl	d9a04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d511c:	4817      	ldr	r0, [pc, #92]	; (d517c <loop+0x268>)
   d511e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5122:	f000 fd43 	bl	d5bac <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5126:	9b02      	ldr	r3, [sp, #8]
        if (wakeupSource_) {
   d5128:	b143      	cbz	r3, d513c <loop+0x228>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d512a:	889a      	ldrh	r2, [r3, #4]
   d512c:	2a01      	cmp	r2, #1
   d512e:	d105      	bne.n	d513c <loop+0x228>
      if (result.wakeupPin() == userSwitch) sysStatus.lastTimePowered = Time.now(); // Gives you a chance to bring back a device (should reset lowBatteryMode in getBatteryConext() and put system back to IDLE_STATE)
   d5130:	899b      	ldrh	r3, [r3, #12]
   d5132:	2b04      	cmp	r3, #4
   d5134:	d102      	bne.n	d513c <loop+0x228>
   d5136:	f004 fece 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d513a:	6228      	str	r0, [r5, #32]
        if (wakeupSource_) {
   d513c:	9802      	ldr	r0, [sp, #8]
   d513e:	2800      	cmp	r0, #0
   d5140:	f43f af20 	beq.w	d4f84 <loop+0x70>
            free(wakeupSource_);
   d5144:	f003 fb42 	bl	d87cc <free>
    } break;
   d5148:	e71c      	b.n	d4f84 <loop+0x70>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d514a:	4b07      	ldr	r3, [pc, #28]	; (d5168 <loop+0x254>)
   d514c:	791b      	ldrb	r3, [r3, #4]
   d514e:	b12b      	cbz	r3, d515c <loop+0x248>
   d5150:	4b06      	ldr	r3, [pc, #24]	; (d516c <loop+0x258>)
   d5152:	781b      	ldrb	r3, [r3, #0]
   d5154:	2b03      	cmp	r3, #3
   d5156:	d001      	beq.n	d515c <loop+0x248>
   d5158:	f7ff fb78 	bl	d484c <_Z22publishStateTransitionv>
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d515c:	f7ff fe1e 	bl	d4d9c <_Z16takeMeasurementsv>
   d5160:	e789      	b.n	d5076 <loop+0x162>
   d5162:	bf00      	nop
   d5164:	2003e588 	.word	0x2003e588
   d5168:	2003e58c 	.word	0x2003e58c
   d516c:	2003e548 	.word	0x2003e548
   d5170:	2003e26c 	.word	0x2003e26c
   d5174:	2003e2f0 	.word	0x2003e2f0
   d5178:	2003e5b0 	.word	0x2003e5b0
   d517c:	2003e270 	.word	0x2003e270
   d5180:	2003e31c 	.word	0x2003e31c
   d5184:	2003e2e8 	.word	0x2003e2e8
   d5188:	2003e2b8 	.word	0x2003e2b8
   d518c:	2003e0f4 	.word	0x2003e0f4
   d5190:	000db358 	.word	0x000db358
   d5194:	2003e624 	.word	0x2003e624
   d5198:	2003e260 	.word	0x2003e260
   d519c:	000db377 	.word	0x000db377
   d51a0:	2003e54c 	.word	0x2003e54c
   d51a4:	000db2f6 	.word	0x000db2f6
   d51a8:	000db30b 	.word	0x000db30b
   d51ac:	2003e2a0 	.word	0x2003e2a0
   d51b0:	000dbb98 	.word	0x000dbb98
   d51b4:	00030010 	.word	0x00030010
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51b8:	4d60      	ldr	r5, [pc, #384]	; (d533c <loop+0x428>)
   d51ba:	792a      	ldrb	r2, [r5, #4]
   d51bc:	b12a      	cbz	r2, d51ca <loop+0x2b6>
   d51be:	4b60      	ldr	r3, [pc, #384]	; (d5340 <loop+0x42c>)
   d51c0:	781b      	ldrb	r3, [r3, #0]
   d51c2:	2b05      	cmp	r3, #5
   d51c4:	d001      	beq.n	d51ca <loop+0x2b6>
   d51c6:	f7ff fb41 	bl	d484c <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d51ca:	78eb      	ldrb	r3, [r5, #3]
   d51cc:	b90b      	cbnz	r3, d51d2 <loop+0x2be>
   d51ce:	f7ff faaf 	bl	d4730 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51d2:	f003 fa53 	bl	d867c <spark_cloud_flag_connected>
    if (!Particle.connected()) connectToParticle();                   // Just to make sure
   d51d6:	b908      	cbnz	r0, d51dc <loop+0x2c8>
   d51d8:	f7ff faaa 	bl	d4730 <_Z17connectToParticlev>
   d51dc:	f003 fa4e 	bl	d867c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d51e0:	b140      	cbz	r0, d51f4 <loop+0x2e0>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d51e2:	f004 fe89 	bl	d9ef8 <_ZN9TimeClass4hourEv>
   d51e6:	b908      	cbnz	r0, d51ec <loop+0x2d8>
   d51e8:	f7ff fb96 	bl	d4918 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d51ec:	f7ff f9aa 	bl	d4544 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d51f0:	2306      	movs	r3, #6
   d51f2:	e741      	b.n	d5078 <loop+0x164>
   d51f4:	f002 ffde 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51f8:	4b52      	ldr	r3, [pc, #328]	; (d5344 <loop+0x430>)
   d51fa:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d51fc:	2301      	movs	r3, #1
   d51fe:	e73b      	b.n	d5078 <loop+0x164>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5200:	4b4e      	ldr	r3, [pc, #312]	; (d533c <loop+0x428>)
   d5202:	791b      	ldrb	r3, [r3, #4]
   d5204:	b12b      	cbz	r3, d5212 <loop+0x2fe>
   d5206:	4b4e      	ldr	r3, [pc, #312]	; (d5340 <loop+0x42c>)
   d5208:	781b      	ldrb	r3, [r3, #0]
   d520a:	2b06      	cmp	r3, #6
   d520c:	d001      	beq.n	d5212 <loop+0x2fe>
   d520e:	f7ff fb1d 	bl	d484c <_Z22publishStateTransitionv>
    if (!dataInFlight && Time.minute() != currentMinutePeriod)  {     // Response received back to IDLE state and wait till the minute has passed to prevent double reporting
   d5212:	4d4d      	ldr	r5, [pc, #308]	; (d5348 <loop+0x434>)
   d5214:	782b      	ldrb	r3, [r5, #0]
   d5216:	b953      	cbnz	r3, d522e <loop+0x31a>
   d5218:	f004 fe7a 	bl	d9f10 <_ZN9TimeClass6minuteEv>
   d521c:	4b4b      	ldr	r3, [pc, #300]	; (d534c <loop+0x438>)
   d521e:	681b      	ldr	r3, [r3, #0]
   d5220:	4298      	cmp	r0, r3
   d5222:	f47f af01 	bne.w	d5028 <loop+0x114>
    else if (dataInFlight && millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5226:	782b      	ldrb	r3, [r5, #0]
   d5228:	2b00      	cmp	r3, #0
   d522a:	f43f aeab 	beq.w	d4f84 <loop+0x70>
   d522e:	f002 ffc1 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d5232:	4b47      	ldr	r3, [pc, #284]	; (d5350 <loop+0x43c>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	1ac0      	subs	r0, r0, r3
   d5238:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d523c:	4298      	cmp	r0, r3
   d523e:	f67f aea1 	bls.w	d4f84 <loop+0x70>
   d5242:	f002 ffb7 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5246:	4b3f      	ldr	r3, [pc, #252]	; (d5344 <loop+0x430>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5248:	4a42      	ldr	r2, [pc, #264]	; (d5354 <loop+0x440>)
      resetTimeStamp = millis();
   d524a:	6018      	str	r0, [r3, #0]
        val_(0) {
   d524c:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d524e:	f88d 3000 	strb.w	r3, [sp]
   d5252:	4b41      	ldr	r3, [pc, #260]	; (d5358 <loop+0x444>)
   d5254:	4941      	ldr	r1, [pc, #260]	; (d535c <loop+0x448>)
   d5256:	781b      	ldrb	r3, [r3, #0]
   d5258:	4841      	ldr	r0, [pc, #260]	; (d5360 <loop+0x44c>)
   d525a:	f7ff f80b 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d525e:	e7cd      	b.n	d51fc <loop+0x2e8>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5260:	4c36      	ldr	r4, [pc, #216]	; (d533c <loop+0x428>)
   d5262:	7923      	ldrb	r3, [r4, #4]
   d5264:	b12b      	cbz	r3, d5272 <loop+0x35e>
   d5266:	4b36      	ldr	r3, [pc, #216]	; (d5340 <loop+0x42c>)
   d5268:	781b      	ldrb	r3, [r3, #0]
   d526a:	2b01      	cmp	r3, #1
   d526c:	d001      	beq.n	d5272 <loop+0x35e>
   d526e:	f7ff faed 	bl	d484c <_Z22publishStateTransitionv>
   d5272:	f002 ff9f 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5276:	4b33      	ldr	r3, [pc, #204]	; (d5344 <loop+0x430>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d527e:	3330      	adds	r3, #48	; 0x30
   d5280:	4283      	cmp	r3, r0
   d5282:	f4bf ae7f 	bcs.w	d4f84 <loop+0x70>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5286:	6923      	ldr	r3, [r4, #16]
   d5288:	2b03      	cmp	r3, #3
   d528a:	dc13      	bgt.n	d52b4 <loop+0x3a0>
   d528c:	f003 f9f6 	bl	d867c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d5290:	b148      	cbz	r0, d52a6 <loop+0x392>
   d5292:	2300      	movs	r3, #0
   d5294:	f88d 3000 	strb.w	r3, [sp]
   d5298:	4b2f      	ldr	r3, [pc, #188]	; (d5358 <loop+0x444>)
   d529a:	4a32      	ldr	r2, [pc, #200]	; (d5364 <loop+0x450>)
   d529c:	781b      	ldrb	r3, [r3, #0]
   d529e:	4932      	ldr	r1, [pc, #200]	; (d5368 <loop+0x454>)
   d52a0:	482f      	ldr	r0, [pc, #188]	; (d5360 <loop+0x44c>)
   d52a2:	f7fe ffe7 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d52a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52aa:	f003 faef 	bl	d888c <delay>
        System.reset();
   d52ae:	f004 fba5 	bl	d99fc <_ZN11SystemClass5resetEv>
   d52b2:	e667      	b.n	d4f84 <loop+0x70>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d52b4:	f004 fe0f 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d52b8:	69e3      	ldr	r3, [r4, #28]
   d52ba:	1ac0      	subs	r0, r0, r3
   d52bc:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d52c0:	d91c      	bls.n	d52fc <loop+0x3e8>
   d52c2:	f003 f9db 	bl	d867c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
   d52c6:	b148      	cbz	r0, d52dc <loop+0x3c8>
   d52c8:	2300      	movs	r3, #0
   d52ca:	f88d 3000 	strb.w	r3, [sp]
   d52ce:	4b22      	ldr	r3, [pc, #136]	; (d5358 <loop+0x444>)
   d52d0:	4a26      	ldr	r2, [pc, #152]	; (d536c <loop+0x458>)
   d52d2:	781b      	ldrb	r3, [r3, #0]
   d52d4:	4924      	ldr	r1, [pc, #144]	; (d5368 <loop+0x454>)
   d52d6:	4822      	ldr	r0, [pc, #136]	; (d5360 <loop+0x44c>)
   d52d8:	f7fe ffcc 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d52dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52e0:	f003 fad4 	bl	d888c <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d52e4:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52e6:	4a15      	ldr	r2, [pc, #84]	; (d533c <loop+0x428>)
   d52e8:	4821      	ldr	r0, [pc, #132]	; (d5370 <loop+0x45c>)
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
   d52ea:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52ec:	2101      	movs	r1, #1
   d52ee:	f7ff fe09 	bl	d4f04 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown(10);
   d52f2:	210a      	movs	r1, #10
   d52f4:	481f      	ldr	r0, [pc, #124]	; (d5374 <loop+0x460>)
   d52f6:	f000 fdb3 	bl	d5e60 <_ZN6AB180513deepPowerDownEi>
   d52fa:	e643      	b.n	d4f84 <loop+0x70>
   d52fc:	f003 f9be 	bl	d867c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);            // Brodcase Reset Action
   d5300:	b148      	cbz	r0, d5316 <loop+0x402>
   d5302:	2300      	movs	r3, #0
   d5304:	f88d 3000 	strb.w	r3, [sp]
   d5308:	4b13      	ldr	r3, [pc, #76]	; (d5358 <loop+0x444>)
   d530a:	4a18      	ldr	r2, [pc, #96]	; (d536c <loop+0x458>)
   d530c:	781b      	ldrb	r3, [r3, #0]
   d530e:	4916      	ldr	r1, [pc, #88]	; (d5368 <loop+0x454>)
   d5310:	4813      	ldr	r0, [pc, #76]	; (d5360 <loop+0x44c>)
   d5312:	f7fe ffaf 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5316:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d531a:	f003 fab7 	bl	d888c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d531e:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5320:	4a06      	ldr	r2, [pc, #24]	; (d533c <loop+0x428>)
   d5322:	4813      	ldr	r0, [pc, #76]	; (d5370 <loop+0x45c>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d5324:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d5326:	2101      	movs	r1, #1
   d5328:	f7ff fdec 	bl	d4f04 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        fullModemReset();                                             // Full Modem reset and reboots
   d532c:	f7ff fac0 	bl	d48b0 <_Z14fullModemResetv>
   d5330:	e628      	b.n	d4f84 <loop+0x70>
                valid_ = false;
   d5332:	7530      	strb	r0, [r6, #20]
                return *this;
   d5334:	e6ee      	b.n	d5114 <loop+0x200>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d5336:	60df      	str	r7, [r3, #12]
                return *this;
   d5338:	e6ec      	b.n	d5114 <loop+0x200>
   d533a:	bf00      	nop
   d533c:	2003e58c 	.word	0x2003e58c
   d5340:	2003e548 	.word	0x2003e548
   d5344:	2003e584 	.word	0x2003e584
   d5348:	2003e2fe 	.word	0x2003e2fe
   d534c:	2003e2f0 	.word	0x2003e2f0
   d5350:	2003e5b4 	.word	0x2003e5b4
   d5354:	000db278 	.word	0x000db278
   d5358:	2003e260 	.word	0x2003e260
   d535c:	000db311 	.word	0x000db311
   d5360:	2003e54c 	.word	0x2003e54c
   d5364:	000db32a 	.word	0x000db32a
   d5368:	000db30b 	.word	0x000db30b
   d536c:	000db33e 	.word	0x000db33e
   d5370:	2003e31c 	.word	0x2003e31c
   d5374:	2003e270 	.word	0x2003e270

000d5378 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5378:	b537      	push	{r0, r1, r2, r4, r5, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d537a:	f7ff f9d9 	bl	d4730 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d537e:	f7ff fd0d 	bl	d4d9c <_Z16takeMeasurementsv>
   d5382:	f003 f97b 	bl	d867c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d5386:	b148      	cbz	r0, d539c <_Z18loadSystemDefaultsv+0x24>
   d5388:	2300      	movs	r3, #0
   d538a:	f88d 3000 	strb.w	r3, [sp]
   d538e:	4b12      	ldr	r3, [pc, #72]	; (d53d8 <_Z18loadSystemDefaultsv+0x60>)
   d5390:	4a12      	ldr	r2, [pc, #72]	; (d53dc <_Z18loadSystemDefaultsv+0x64>)
   d5392:	781b      	ldrb	r3, [r3, #0]
   d5394:	4912      	ldr	r1, [pc, #72]	; (d53e0 <_Z18loadSystemDefaultsv+0x68>)
   d5396:	4813      	ldr	r0, [pc, #76]	; (d53e4 <_Z18loadSystemDefaultsv+0x6c>)
   d5398:	f7fe ff6c 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d539c:	4c12      	ldr	r4, [pc, #72]	; (d53e8 <_Z18loadSystemDefaultsv+0x70>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d539e:	68a3      	ldr	r3, [r4, #8]
   d53a0:	2b1d      	cmp	r3, #29
   d53a2:	bfcc      	ite	gt
   d53a4:	2300      	movgt	r3, #0
   d53a6:	2301      	movle	r3, #1
   d53a8:	7163      	strb	r3, [r4, #5]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d53aa:	230a      	movs	r3, #10
   d53ac:	71a3      	strb	r3, [r4, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d53ae:	4b0f      	ldr	r3, [pc, #60]	; (d53ec <_Z18loadSystemDefaultsv+0x74>)
   d53b0:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d53b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  sysStatus.structuresVersion = 1;
   d53b6:	2501      	movs	r5, #1
  sysStatus.dstOffset = 1;
   d53b8:	61a3      	str	r3, [r4, #24]
  sysStatus.lastHookResponse = 0;
   d53ba:	2300      	movs	r3, #0
   d53bc:	61e3      	str	r3, [r4, #28]
  sysStatus.structuresVersion = 1;
   d53be:	7025      	strb	r5, [r4, #0]
  sysStatus.verboseMode = true;
   d53c0:	7125      	strb	r5, [r4, #4]
  sysStatus.lastTimePowered = Time.now();                           // Make sure we do not go to sleep right away
   d53c2:	f004 fd88 	bl	d9ed6 <_ZN9TimeClass3nowEv>
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d53c6:	4622      	mov	r2, r4
  sysStatus.lastTimePowered = Time.now();                           // Make sure we do not go to sleep right away
   d53c8:	6220      	str	r0, [r4, #32]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d53ca:	4629      	mov	r1, r5
   d53cc:	4808      	ldr	r0, [pc, #32]	; (d53f0 <_Z18loadSystemDefaultsv+0x78>)
   d53ce:	f7ff fd99 	bl	d4f04 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d53d2:	b003      	add	sp, #12
   d53d4:	bd30      	pop	{r4, r5, pc}
   d53d6:	bf00      	nop
   d53d8:	2003e260 	.word	0x2003e260
   d53dc:	000db37e 	.word	0x000db37e
   d53e0:	000db13f 	.word	0x000db13f
   d53e4:	2003e54c 	.word	0x2003e54c
   d53e8:	2003e58c 	.word	0x2003e58c
   d53ec:	c0a00000 	.word	0xc0a00000
   d53f0:	2003e31c 	.word	0x2003e31c
   d53f4:	00000000 	.word	0x00000000

000d53f8 <setup>:
{
   d53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d53fa:	2100      	movs	r1, #0
{
   d53fc:	b0ad      	sub	sp, #180	; 0xb4
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d53fe:	2008      	movs	r0, #8
   d5400:	f004 ffb0 	bl	da364 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5404:	2100      	movs	r1, #0
   d5406:	2004      	movs	r0, #4
   d5408:	f004 ffac 	bl	da364 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d540c:	2101      	movs	r1, #1
   d540e:	2007      	movs	r0, #7
   d5410:	f004 ffa8 	bl	da364 <pinMode>
  digitalWrite(blueLED,HIGH);
   d5414:	2101      	movs	r1, #1
   d5416:	2007      	movs	r0, #7
   d5418:	f004 ffb5 	bl	da386 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d541c:	a804      	add	r0, sp, #16
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d541e:	2400      	movs	r4, #0
   d5420:	f003 f934 	bl	d868c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5424:	2300      	movs	r3, #0
   d5426:	227d      	movs	r2, #125	; 0x7d
   d5428:	a90c      	add	r1, sp, #48	; 0x30
   d542a:	a804      	add	r0, sp, #16
   d542c:	f004 fa3f 	bl	d98ae <_ZNK6String8getBytesEPhjj>
   d5430:	4623      	mov	r3, r4
   d5432:	4622      	mov	r2, r4
   d5434:	49b2      	ldr	r1, [pc, #712]	; (d5700 <setup+0x308>)
   d5436:	4db3      	ldr	r5, [pc, #716]	; (d5704 <setup+0x30c>)
   d5438:	4fb3      	ldr	r7, [pc, #716]	; (d5708 <setup+0x310>)
   d543a:	e9cd 4400 	strd	r4, r4, [sp]
   d543e:	a80c      	add	r0, sp, #48	; 0x30
   d5440:	f003 f934 	bl	d86ac <spark_subscribe>
        return _variable(varKey, var, STRING);
   d5444:	49b1      	ldr	r1, [pc, #708]	; (d570c <setup+0x314>)
   d5446:	48b2      	ldr	r0, [pc, #712]	; (d5710 <setup+0x318>)
   d5448:	f7fe feab 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d544c:	49b1      	ldr	r1, [pc, #708]	; (d5714 <setup+0x31c>)
   d544e:	48b2      	ldr	r0, [pc, #712]	; (d5718 <setup+0x320>)
   d5450:	f7fe fea7 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5454:	4623      	mov	r3, r4
   d5456:	2202      	movs	r2, #2
   d5458:	49b0      	ldr	r1, [pc, #704]	; (d571c <setup+0x324>)
   d545a:	48b1      	ldr	r0, [pc, #708]	; (d5720 <setup+0x328>)
   d545c:	f003 f8ee 	bl	d863c <spark_variable>
        return _variable(varKey, var, STRING);
   d5460:	49b0      	ldr	r1, [pc, #704]	; (d5724 <setup+0x32c>)
   d5462:	48b1      	ldr	r0, [pc, #708]	; (d5728 <setup+0x330>)
   d5464:	f7fe fe9d 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5468:	49b0      	ldr	r1, [pc, #704]	; (d572c <setup+0x334>)
   d546a:	48b1      	ldr	r0, [pc, #708]	; (d5730 <setup+0x338>)
   d546c:	f7fe fe99 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5470:	49b0      	ldr	r1, [pc, #704]	; (d5734 <setup+0x33c>)
   d5472:	48b1      	ldr	r0, [pc, #708]	; (d5738 <setup+0x340>)
   d5474:	f7fe fe95 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5478:	49b0      	ldr	r1, [pc, #704]	; (d573c <setup+0x344>)
   d547a:	48b1      	ldr	r0, [pc, #708]	; (d5740 <setup+0x348>)
   d547c:	f7fe fe91 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5480:	49b0      	ldr	r1, [pc, #704]	; (d5744 <setup+0x34c>)
   d5482:	48b1      	ldr	r0, [pc, #708]	; (d5748 <setup+0x350>)
   d5484:	4623      	mov	r3, r4
   d5486:	2202      	movs	r2, #2
   d5488:	f003 f8d8 	bl	d863c <spark_variable>
   d548c:	4623      	mov	r3, r4
   d548e:	2202      	movs	r2, #2
   d5490:	49ae      	ldr	r1, [pc, #696]	; (d574c <setup+0x354>)
   d5492:	48af      	ldr	r0, [pc, #700]	; (d5750 <setup+0x358>)
   d5494:	f003 f8d2 	bl	d863c <spark_variable>
        return _variable(varKey, var, STRING);
   d5498:	49ae      	ldr	r1, [pc, #696]	; (d5754 <setup+0x35c>)
   d549a:	48af      	ldr	r0, [pc, #700]	; (d5758 <setup+0x360>)
   d549c:	f7fe fe81 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54a0:	49ae      	ldr	r1, [pc, #696]	; (d575c <setup+0x364>)
   d54a2:	48af      	ldr	r0, [pc, #700]	; (d5760 <setup+0x368>)
   d54a4:	f7fe fe7d 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d54a8:	49ae      	ldr	r1, [pc, #696]	; (d5764 <setup+0x36c>)
   d54aa:	48af      	ldr	r0, [pc, #700]	; (d5768 <setup+0x370>)
   d54ac:	f7fe fe79 	bl	d41a2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d54b0:	4aae      	ldr	r2, [pc, #696]	; (d576c <setup+0x374>)
   d54b2:	49af      	ldr	r1, [pc, #700]	; (d5770 <setup+0x378>)
   d54b4:	48af      	ldr	r0, [pc, #700]	; (d5774 <setup+0x37c>)
   d54b6:	f003 fba3 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54ba:	4aaf      	ldr	r2, [pc, #700]	; (d5778 <setup+0x380>)
   d54bc:	49af      	ldr	r1, [pc, #700]	; (d577c <setup+0x384>)
   d54be:	48ad      	ldr	r0, [pc, #692]	; (d5774 <setup+0x37c>)
   d54c0:	f003 fb9e 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54c4:	4aae      	ldr	r2, [pc, #696]	; (d5780 <setup+0x388>)
   d54c6:	49af      	ldr	r1, [pc, #700]	; (d5784 <setup+0x38c>)
   d54c8:	48aa      	ldr	r0, [pc, #680]	; (d5774 <setup+0x37c>)
   d54ca:	f003 fb99 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54ce:	4aae      	ldr	r2, [pc, #696]	; (d5788 <setup+0x390>)
   d54d0:	49ae      	ldr	r1, [pc, #696]	; (d578c <setup+0x394>)
   d54d2:	48a8      	ldr	r0, [pc, #672]	; (d5774 <setup+0x37c>)
   d54d4:	f003 fb94 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54d8:	4aad      	ldr	r2, [pc, #692]	; (d5790 <setup+0x398>)
   d54da:	49ae      	ldr	r1, [pc, #696]	; (d5794 <setup+0x39c>)
   d54dc:	48a5      	ldr	r0, [pc, #660]	; (d5774 <setup+0x37c>)
   d54de:	f003 fb8f 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54e2:	49ad      	ldr	r1, [pc, #692]	; (d5798 <setup+0x3a0>)
   d54e4:	4a8c      	ldr	r2, [pc, #560]	; (d5718 <setup+0x320>)
   d54e6:	48a3      	ldr	r0, [pc, #652]	; (d5774 <setup+0x37c>)
   d54e8:	f003 fb8a 	bl	d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d54ec:	2601      	movs	r6, #1
    return (flags_ & OptionFlag::GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
    flags_ |= OptionFlag::TIMEOUT;
   d54ee:	2303      	movs	r3, #3
   d54f0:	f241 3288 	movw	r2, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d54f4:	a808      	add	r0, sp, #32
   d54f6:	e9cd 3208 	strd	r3, r2, [sp, #32]
    graceful_ = enabled;
   d54fa:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
   d54fe:	f003 fba3 	bl	d8c48 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  connectToParticle();
   d5502:	f7ff f915 	bl	d4730 <_Z17connectToParticlev>
  fram.begin();                                                       // Initialize the FRAM module
   d5506:	48a5      	ldr	r0, [pc, #660]	; (d579c <setup+0x3a4>)
   d5508:	f001 ff72 	bl	d73f0 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d550c:	4633      	mov	r3, r6
   d550e:	48a3      	ldr	r0, [pc, #652]	; (d579c <setup+0x3a4>)
   d5510:	f10d 020f 	add.w	r2, sp, #15
   d5514:	4621      	mov	r1, r4
   d5516:	f001 ffad 	bl	d7474 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d551a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d551e:	2b02      	cmp	r3, #2
   d5520:	f000 80d1 	beq.w	d56c6 <setup+0x2ce>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5524:	489d      	ldr	r0, [pc, #628]	; (d579c <setup+0x3a4>)
   d5526:	f001 ff6d 	bl	d7404 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d552a:	4a9d      	ldr	r2, [pc, #628]	; (d57a0 <setup+0x3a8>)
   d552c:	489b      	ldr	r0, [pc, #620]	; (d579c <setup+0x3a4>)
   d552e:	4633      	mov	r3, r6
   d5530:	4621      	mov	r1, r4
   d5532:	f001 ffea 	bl	d750a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5536:	4633      	mov	r3, r6
   d5538:	4898      	ldr	r0, [pc, #608]	; (d579c <setup+0x3a4>)
   d553a:	f10d 020f 	add.w	r2, sp, #15
   d553e:	4621      	mov	r1, r4
   d5540:	f001 ff98 	bl	d7474 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5544:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5548:	2b02      	cmp	r3, #2
   d554a:	f000 80b9 	beq.w	d56c0 <setup+0x2c8>
   d554e:	703e      	strb	r6, [r7, #0]
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5550:	4c94      	ldr	r4, [pc, #592]	; (d57a4 <setup+0x3ac>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d5552:	f7ff fc81 	bl	d4e58 <_Z17checkSystemValuesv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5556:	4a94      	ldr	r2, [pc, #592]	; (d57a8 <setup+0x3b0>)
   d5558:	2300      	movs	r3, #0
   d555a:	2100      	movs	r1, #0
   d555c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5560:	f003 f80a 	bl	d8578 <system_subscribe_event>
   d5564:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d5566:	2101      	movs	r1, #1
   d5568:	4620      	mov	r0, r4
   d556a:	8163      	strh	r3, [r4, #10]
   d556c:	f000 fe36 	bl	d61dc <_ZN6AB18055setupEb>
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d5570:	2301      	movs	r3, #1
   d5572:	461a      	mov	r2, r3
   d5574:	2110      	movs	r1, #16
   d5576:	4620      	mov	r0, r4
   d5578:	f000 fb9b 	bl	d5cb2 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d557c:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet =  ab1805.isRTCSet();
   d557e:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d5580:	4620      	mov	r0, r4
   d5582:	f000 fb13 	bl	d5bac <_ZN6AB18056setWDTEi>
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d5586:	79ab      	ldrb	r3, [r5, #6]
   d5588:	4a88      	ldr	r2, [pc, #544]	; (d57ac <setup+0x3b4>)
   d558a:	4862      	ldr	r0, [pc, #392]	; (d5714 <setup+0x31c>)
   d558c:	210c      	movs	r1, #12
   d558e:	f003 f935 	bl	d87fc <snprintf>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5592:	ed95 0a06 	vldr	s0, [r5, #24]
   d5596:	f004 fb55 	bl	d9c44 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid() && sysStatus.clockSet) {                         // We need to try to get the time so we can tell if we need DST
   d559a:	f004 fc7f 	bl	d9e9c <_ZN9TimeClass7isValidEv>
   d559e:	2800      	cmp	r0, #0
   d55a0:	f040 8098 	bne.w	d56d4 <setup+0x2dc>
   d55a4:	78ab      	ldrb	r3, [r5, #2]
   d55a6:	2b00      	cmp	r3, #0
   d55a8:	f000 8094 	beq.w	d56d4 <setup+0x2dc>
    ab1805.getRtcAsTime(RTCTime);
   d55ac:	4e80      	ldr	r6, [pc, #512]	; (d57b0 <setup+0x3b8>)
   d55ae:	4620      	mov	r0, r4
   d55b0:	4631      	mov	r1, r6
   d55b2:	f000 fe03 	bl	d61bc <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(RTCTime);
   d55b6:	e9d6 0100 	ldrd	r0, r1, [r6]
   d55ba:	f004 fb75 	bl	d9ca8 <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d55be:	f7ff f9e9 	bl	d4994 <_Z8isDSTusav>
   d55c2:	2800      	cmp	r0, #0
   d55c4:	f000 808b 	beq.w	d56de <setup+0x2e6>
   d55c8:	f004 fb5a 	bl	d9c80 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d55cc:	ed95 0a05 	vldr	s0, [r5, #20]
   d55d0:	f004 fb18 	bl	d9c04 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d55d4:	f004 fcc4 	bl	d9f60 <_ZN9TimeClass5localEv>
   d55d8:	4604      	mov	r4, r0
   d55da:	f004 fc7c 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d55de:	1a20      	subs	r0, r4, r0
   d55e0:	f005 f89e 	bl	da720 <__aeabi_i2d>
   d55e4:	a344      	add	r3, pc, #272	; (adr r3, d56f8 <setup+0x300>)
   d55e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55ea:	f005 fa2d 	bl	daa48 <__aeabi_ddiv>
   d55ee:	4a71      	ldr	r2, [pc, #452]	; (d57b4 <setup+0x3bc>)
   d55f0:	e9cd 0100 	strd	r0, r1, [sp]
   d55f4:	210a      	movs	r1, #10
   d55f6:	4857      	ldr	r0, [pc, #348]	; (d5754 <setup+0x35c>)
   d55f8:	f003 f900 	bl	d87fc <snprintf>
        int reason = RESET_REASON_NONE;
   d55fc:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55fe:	4611      	mov	r1, r2
   d5600:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d5602:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5604:	f002 fdb6 	bl	d8174 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5608:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d560a:	2b14      	cmp	r3, #20
   d560c:	f04f 0200 	mov.w	r2, #0
   d5610:	d168      	bne.n	d56e4 <setup+0x2ec>
    sysStatus.resetCount++;
   d5612:	692b      	ldr	r3, [r5, #16]
   d5614:	3301      	adds	r3, #1
   d5616:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5618:	4b67      	ldr	r3, [pc, #412]	; (d57b8 <setup+0x3c0>)
   d561a:	2201      	movs	r2, #1
   d561c:	701a      	strb	r2, [r3, #0]
  snprintf(lastPoweredStr, sizeof(lastPoweredStr), Time.timeStr(sysStatus.lastTimePowered));   // Load the last power event
   d561e:	2300      	movs	r3, #0
   d5620:	6a2a      	ldr	r2, [r5, #32]
   d5622:	a808      	add	r0, sp, #32
   d5624:	f004 fb54 	bl	d9cd0 <_ZN9TimeClass7timeStrEx>
   d5628:	9a08      	ldr	r2, [sp, #32]
   d562a:	484e      	ldr	r0, [pc, #312]	; (d5764 <setup+0x36c>)
   d562c:	2120      	movs	r1, #32
   d562e:	f003 f8e5 	bl	d87fc <snprintf>
   d5632:	a808      	add	r0, sp, #32
   d5634:	f004 f8b0 	bl	d9798 <_ZN6StringD1Ev>
  getBatteryContext();                                                // See if we have enough juice
   d5638:	f7ff fb40 	bl	d4cbc <_Z17getBatteryContextv>
   d563c:	4a5f      	ldr	r2, [pc, #380]	; (d57bc <setup+0x3c4>)
   d563e:	4857      	ldr	r0, [pc, #348]	; (d579c <setup+0x3a4>)
   d5640:	2330      	movs	r3, #48	; 0x30
   d5642:	2150      	movs	r1, #80	; 0x50
   d5644:	f001 ff16 	bl	d7474 <_ZN6MB85RC8readDataEjPhj>
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d5648:	f004 fc56 	bl	d9ef8 <_ZN9TimeClass4hourEv>
   d564c:	4b5c      	ldr	r3, [pc, #368]	; (d57c0 <setup+0x3c8>)
   d564e:	6018      	str	r0, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d5650:	f7ff f840 	bl	d46d4 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5654:	2004      	movs	r0, #4
   d5656:	f004 feaf 	bl	da3b8 <digitalRead>
   d565a:	b908      	cbnz	r0, d5660 <setup+0x268>
   d565c:	f7ff fe8c 	bl	d5378 <_Z18loadSystemDefaultsv>
  ds18b20.resetsearch();                 // initialise for sensor search
   d5660:	4858      	ldr	r0, [pc, #352]	; (d57c4 <setup+0x3cc>)
   d5662:	f001 fd3c 	bl	d70de <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d5666:	4958      	ldr	r1, [pc, #352]	; (d57c8 <setup+0x3d0>)
   d5668:	4856      	ldr	r0, [pc, #344]	; (d57c4 <setup+0x3cc>)
   d566a:	f001 fd1c 	bl	d70a6 <_ZN7DS18B206searchEPh>
   d566e:	4957      	ldr	r1, [pc, #348]	; (d57cc <setup+0x3d4>)
   d5670:	4854      	ldr	r0, [pc, #336]	; (d57c4 <setup+0x3cc>)
   d5672:	f001 fd18 	bl	d70a6 <_ZN7DS18B206searchEPh>
   d5676:	4956      	ldr	r1, [pc, #344]	; (d57d0 <setup+0x3d8>)
   d5678:	4852      	ldr	r0, [pc, #328]	; (d57c4 <setup+0x3cc>)
   d567a:	f001 fd14 	bl	d70a6 <_ZN7DS18B206searchEPh>
	gps.withI2C();
   d567e:	f004 fec7 	bl	da410 <_Z19__fetch_global_Wirev>
   d5682:	2242      	movs	r2, #66	; 0x42
   d5684:	4601      	mov	r1, r0
   d5686:	4853      	ldr	r0, [pc, #332]	; (d57d4 <setup+0x3dc>)
   d5688:	f000 ffa8 	bl	d65dc <_ZN16AssetTrackerBase7withI2CER7TwoWireh>
	gps.startThreadedMode();
   d568c:	4851      	ldr	r0, [pc, #324]	; (d57d4 <setup+0x3dc>)
   d568e:	f000 ff5b 	bl	d6548 <_ZN16AssetTrackerBase17startThreadedModeEv>
   d5692:	2300      	movs	r3, #0
  publishQueue.publish("State","Startup Complete",PRIVATE);
   d5694:	f88d 3000 	strb.w	r3, [sp]
   d5698:	4b4f      	ldr	r3, [pc, #316]	; (d57d8 <setup+0x3e0>)
   d569a:	4a50      	ldr	r2, [pc, #320]	; (d57dc <setup+0x3e4>)
   d569c:	781b      	ldrb	r3, [r3, #0]
   d569e:	4950      	ldr	r1, [pc, #320]	; (d57e0 <setup+0x3e8>)
   d56a0:	4850      	ldr	r0, [pc, #320]	; (d57e4 <setup+0x3ec>)
   d56a2:	f7fe fde7 	bl	d4274 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d56a6:	783b      	ldrb	r3, [r7, #0]
   d56a8:	b90b      	cbnz	r3, d56ae <setup+0x2b6>
   d56aa:	2302      	movs	r3, #2
   d56ac:	703b      	strb	r3, [r7, #0]
  digitalWrite(blueLED,LOW);
   d56ae:	2100      	movs	r1, #0
   d56b0:	2007      	movs	r0, #7
   d56b2:	f004 fe68 	bl	da386 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d56b6:	a804      	add	r0, sp, #16
   d56b8:	f004 f86e 	bl	d9798 <_ZN6StringD1Ev>
}
   d56bc:	b02d      	add	sp, #180	; 0xb4
   d56be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d56c0:	f7ff fe5a 	bl	d5378 <_Z18loadSystemDefaultsv>
   d56c4:	e744      	b.n	d5550 <setup+0x158>
   d56c6:	2324      	movs	r3, #36	; 0x24
   d56c8:	462a      	mov	r2, r5
   d56ca:	4631      	mov	r1, r6
   d56cc:	4833      	ldr	r0, [pc, #204]	; (d579c <setup+0x3a4>)
   d56ce:	f001 fed1 	bl	d7474 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d56d2:	e73d      	b.n	d5550 <setup+0x158>
    connectToParticle();
   d56d4:	f7ff f82c 	bl	d4730 <_Z17connectToParticlev>
    Particle.syncTime();                                               // Set the system clock here
   d56d8:	f7fe fd4c 	bl	d4174 <_ZN10CloudClass8syncTimeEv.isra.0>
   d56dc:	e76f      	b.n	d55be <setup+0x1c6>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d56de:	f004 fadb 	bl	d9c98 <_ZN9TimeClass6endDSTEv>
   d56e2:	e773      	b.n	d55cc <setup+0x1d4>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56e4:	4611      	mov	r1, r2
   d56e6:	a808      	add	r0, sp, #32
        int reason = RESET_REASON_NONE;
   d56e8:	9208      	str	r2, [sp, #32]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d56ea:	f002 fd43 	bl	d8174 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d56ee:	9b08      	ldr	r3, [sp, #32]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d56f0:	2b8c      	cmp	r3, #140	; 0x8c
   d56f2:	d194      	bne.n	d561e <setup+0x226>
   d56f4:	e78d      	b.n	d5612 <setup+0x21a>
   d56f6:	bf00      	nop
   d56f8:	00000000 	.word	0x00000000
   d56fc:	40ac2000 	.word	0x40ac2000
   d5700:	000d4291 	.word	0x000d4291
   d5704:	2003e58c 	.word	0x2003e58c
   d5708:	2003e588 	.word	0x2003e588
   d570c:	2003e210 	.word	0x2003e210
   d5710:	000db396 	.word	0x000db396
   d5714:	2003e104 	.word	0x2003e104
   d5718:	000db39d 	.word	0x000db39d
   d571c:	2003e59c 	.word	0x2003e59c
   d5720:	000db3ac 	.word	0x000db3ac
   d5724:	2003e0c0 	.word	0x2003e0c0
   d5728:	000db3b7 	.word	0x000db3b7
   d572c:	2003e180 	.word	0x2003e180
   d5730:	000db3c1 	.word	0x000db3c1
   d5734:	2003e0f8 	.word	0x2003e0f8
   d5738:	000db3ca 	.word	0x000db3ca
   d573c:	2003e0cc 	.word	0x2003e0cc
   d5740:	000db3d6 	.word	0x000db3d6
   d5744:	2003e594 	.word	0x2003e594
   d5748:	000db3de 	.word	0x000db3de
   d574c:	2003e2d0 	.word	0x2003e2d0
   d5750:	000db3e9 	.word	0x000db3e9
   d5754:	2003e2f4 	.word	0x2003e2f4
   d5758:	000db3f0 	.word	0x000db3f0
   d575c:	2003e290 	.word	0x2003e290
   d5760:	000db3fb 	.word	0x000db3fb
   d5764:	2003e0d4 	.word	0x2003e0d4
   d5768:	000db40a 	.word	0x000db40a
   d576c:	000db417 	.word	0x000db417
   d5770:	000d40ed 	.word	0x000d40ed
   d5774:	000d8bd5 	.word	0x000d8bd5
   d5778:	000db421 	.word	0x000db421
   d577c:	000d4109 	.word	0x000d4109
   d5780:	000db429 	.word	0x000db429
   d5784:	000d4325 	.word	0x000d4325
   d5788:	000db436 	.word	0x000db436
   d578c:	000d43b1 	.word	0x000d43b1
   d5790:	000db443 	.word	0x000db443
   d5794:	000d49d9 	.word	0x000d49d9
   d5798:	000d44c9 	.word	0x000d44c9
   d579c:	2003e31c 	.word	0x2003e31c
   d57a0:	000db4ec 	.word	0x000db4ec
   d57a4:	2003e270 	.word	0x2003e270
   d57a8:	000d40c9 	.word	0x000d40c9
   d57ac:	000db17e 	.word	0x000db17e
   d57b0:	2003e208 	.word	0x2003e208
   d57b4:	000db144 	.word	0x000db144
   d57b8:	2003e5b0 	.word	0x2003e5b0
   d57bc:	2003e2b8 	.word	0x2003e2b8
   d57c0:	2003e2ec 	.word	0x2003e2ec
   d57c4:	2003e300 	.word	0x2003e300
   d57c8:	2003f400 	.word	0x2003f400
   d57cc:	2003f408 	.word	0x2003f408
   d57d0:	2003f410 	.word	0x2003f410
   d57d4:	2003e32c 	.word	0x2003e32c
   d57d8:	2003e260 	.word	0x2003e260
   d57dc:	000db451 	.word	0x000db451
   d57e0:	000db30b 	.word	0x000db30b
   d57e4:	2003e54c 	.word	0x2003e54c

000d57e8 <_GLOBAL__sub_I___appProductID>:
}
   d57e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d57ea:	4b40      	ldr	r3, [pc, #256]	; (d58ec <_GLOBAL__sub_I___appProductID+0x104>)
              error_(SYSTEM_ERROR_NONE) {
   d57ec:	4e40      	ldr	r6, [pc, #256]	; (d58f0 <_GLOBAL__sub_I___appProductID+0x108>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d57ee:	4d41      	ldr	r5, [pc, #260]	; (d58f4 <_GLOBAL__sub_I___appProductID+0x10c>)
   d57f0:	2400      	movs	r4, #0
   d57f2:	601c      	str	r4, [r3, #0]
   d57f4:	4b40      	ldr	r3, [pc, #256]	; (d58f8 <_GLOBAL__sub_I___appProductID+0x110>)
   d57f6:	2701      	movs	r7, #1
   d57f8:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d57fa:	f004 fd5d 	bl	da2b8 <spark_protocol_instance>
   d57fe:	4623      	mov	r3, r4
   d5800:	4622      	mov	r2, r4
   d5802:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5806:	f004 fd5f 	bl	da2c8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d580a:	f004 fd55 	bl	da2b8 <spark_protocol_instance>
   d580e:	4622      	mov	r2, r4
   d5810:	4623      	mov	r3, r4
   d5812:	210c      	movs	r1, #12
   d5814:	f004 fd60 	bl	da2d8 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5818:	4b38      	ldr	r3, [pc, #224]	; (d58fc <_GLOBAL__sub_I___appProductID+0x114>)
   d581a:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d581c:	6034      	str	r4, [r6, #0]
   d581e:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5820:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d5822:	2002      	movs	r0, #2
   d5824:	f002 fe90 	bl	d8548 <set_system_mode>
   d5828:	462a      	mov	r2, r5
   d582a:	4935      	ldr	r1, [pc, #212]	; (d5900 <_GLOBAL__sub_I___appProductID+0x118>)
   d582c:	4630      	mov	r0, r6
   d582e:	f004 fe17 	bl	da460 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5832:	4621      	mov	r1, r4
   d5834:	4638      	mov	r0, r7
   d5836:	f002 fea7 	bl	d8588 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d583a:	4639      	mov	r1, r7
   d583c:	2004      	movs	r0, #4
   d583e:	f002 fc91 	bl	d8164 <HAL_Feature_Set>
        : config_(config) {
   d5842:	4830      	ldr	r0, [pc, #192]	; (d5904 <_GLOBAL__sub_I___appProductID+0x11c>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5844:	4930      	ldr	r1, [pc, #192]	; (d5908 <_GLOBAL__sub_I___appProductID+0x120>)
              valid_(true) {
   d5846:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d584a:	4603      	mov	r3, r0
   d584c:	1d02      	adds	r2, r0, #4
   d584e:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5852:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5854:	4b2d      	ldr	r3, [pc, #180]	; (d590c <_GLOBAL__sub_I___appProductID+0x124>)
   d5856:	6043      	str	r3, [r0, #4]
   d5858:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d585a:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d585e:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5860:	7204      	strb	r4, [r0, #8]
   d5862:	f004 fdfd 	bl	da460 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5866:	f004 fdd3 	bl	da410 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d586a:	4e29      	ldr	r6, [pc, #164]	; (d5910 <_GLOBAL__sub_I___appProductID+0x128>)
   d586c:	4601      	mov	r1, r0
   d586e:	4623      	mov	r3, r4
   d5870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5874:	4630      	mov	r0, r6
   d5876:	f001 fdb1 	bl	d73dc <_ZN6MB85RCC1ER7TwoWireji>
   d587a:	4b26      	ldr	r3, [pc, #152]	; (d5914 <_GLOBAL__sub_I___appProductID+0x12c>)
   d587c:	6033      	str	r3, [r6, #0]
   d587e:	4630      	mov	r0, r6
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5880:	4e25      	ldr	r6, [pc, #148]	; (d5918 <_GLOBAL__sub_I___appProductID+0x130>)
   d5882:	4926      	ldr	r1, [pc, #152]	; (d591c <_GLOBAL__sub_I___appProductID+0x134>)
   d5884:	462a      	mov	r2, r5
   d5886:	f004 fdeb 	bl	da460 <__aeabi_atexit>
   d588a:	4925      	ldr	r1, [pc, #148]	; (d5920 <_GLOBAL__sub_I___appProductID+0x138>)
   d588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5890:	4630      	mov	r0, r6
   d5892:	f002 fae3 	bl	d7e5c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5896:	4b23      	ldr	r3, [pc, #140]	; (d5924 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5898:	6033      	str	r3, [r6, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d589a:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d589c:	4e22      	ldr	r6, [pc, #136]	; (d5928 <_GLOBAL__sub_I___appProductID+0x140>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d589e:	4923      	ldr	r1, [pc, #140]	; (d592c <_GLOBAL__sub_I___appProductID+0x144>)
   d58a0:	462a      	mov	r2, r5
   d58a2:	f004 fddd 	bl	da460 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d58a6:	4622      	mov	r2, r4
   d58a8:	2110      	movs	r1, #16
AssetTracker gps;
   d58aa:	4c21      	ldr	r4, [pc, #132]	; (d5930 <_GLOBAL__sub_I___appProductID+0x148>)
DS18B20 ds18b20(tempSensors);
   d58ac:	4630      	mov	r0, r6
   d58ae:	f001 fbe3 	bl	d7078 <_ZN7DS18B20C1Etb>
   d58b2:	462a      	mov	r2, r5
   d58b4:	491f      	ldr	r1, [pc, #124]	; (d5934 <_GLOBAL__sub_I___appProductID+0x14c>)
   d58b6:	4630      	mov	r0, r6
   d58b8:	f004 fdd2 	bl	da460 <__aeabi_atexit>
AssetTracker gps;
   d58bc:	4620      	mov	r0, r4
   d58be:	f000 ff13 	bl	d66e8 <_ZN12AssetTrackerC1Ev>
   d58c2:	462a      	mov	r2, r5
   d58c4:	491c      	ldr	r1, [pc, #112]	; (d5938 <_GLOBAL__sub_I___appProductID+0x150>)
   d58c6:	4620      	mov	r0, r4
   d58c8:	f004 fdca 	bl	da460 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d58cc:	f004 fda0 	bl	da410 <_Z19__fetch_global_Wirev>
   d58d0:	4c1a      	ldr	r4, [pc, #104]	; (d593c <_GLOBAL__sub_I___appProductID+0x154>)
   d58d2:	4601      	mov	r1, r0
   d58d4:	2269      	movs	r2, #105	; 0x69
   d58d6:	4620      	mov	r0, r4
   d58d8:	f000 f86a 	bl	d59b0 <_ZN6AB1805C1ER7TwoWireh>
   d58dc:	462a      	mov	r2, r5
   d58de:	4620      	mov	r0, r4
   d58e0:	4917      	ldr	r1, [pc, #92]	; (d5940 <_GLOBAL__sub_I___appProductID+0x158>)
}
   d58e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d58e6:	f004 bdbb 	b.w	da460 <__aeabi_atexit>
   d58ea:	bf00      	nop
   d58ec:	2003e25c 	.word	0x2003e25c
   d58f0:	2003e250 	.word	0x2003e250
   d58f4:	2003e200 	.word	0x2003e200
   d58f8:	2003e260 	.word	0x2003e260
   d58fc:	ffff0000 	.word	0xffff0000
   d5900:	000d41c7 	.word	0x000d41c7
   d5904:	2003e2a0 	.word	0x2003e2a0
   d5908:	000d40d5 	.word	0x000d40d5
   d590c:	00030010 	.word	0x00030010
   d5910:	2003e31c 	.word	0x2003e31c
   d5914:	000db46c 	.word	0x000db46c
   d5918:	2003e54c 	.word	0x2003e54c
   d591c:	000d414d 	.word	0x000d414d
   d5920:	2003f418 	.word	0x2003f418
   d5924:	000db488 	.word	0x000db488
   d5928:	2003e300 	.word	0x2003e300
   d592c:	000d4125 	.word	0x000d4125
   d5930:	2003e32c 	.word	0x2003e32c
   d5934:	000d70cd 	.word	0x000d70cd
   d5938:	000d6835 	.word	0x000d6835
   d593c:	2003e270 	.word	0x2003e270
   d5940:	000d5945 	.word	0x000d5945

000d5944 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5944:	4770      	bx	lr

000d5946 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5946:	b510      	push	{r4, lr}
}
   d5948:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d594a:	4604      	mov	r4, r0
}
   d594c:	f004 fd8d 	bl	da46a <_ZdlPvj>
   d5950:	4620      	mov	r0, r4
   d5952:	bd10      	pop	{r4, pc}

000d5954 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5954:	b40e      	push	{r1, r2, r3}
   d5956:	b510      	push	{r4, lr}
   d5958:	b08d      	sub	sp, #52	; 0x34
   d595a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d595c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d595e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5962:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5964:	2300      	movs	r3, #0
   d5966:	2020      	movs	r0, #32
   d5968:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d596c:	e9cd 4200 	strd	r4, r2, [sp]
   d5970:	2001      	movs	r0, #1
   d5972:	aa04      	add	r2, sp, #16
   d5974:	f002 fdce 	bl	d8514 <log_message_v>
}
   d5978:	b00d      	add	sp, #52	; 0x34
   d597a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d597e:	b003      	add	sp, #12
   d5980:	4770      	bx	lr

000d5982 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d5982:	b40e      	push	{r1, r2, r3}
   d5984:	b510      	push	{r4, lr}
   d5986:	b08d      	sub	sp, #52	; 0x34
   d5988:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d598a:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d598c:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5990:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5992:	2300      	movs	r3, #0
   d5994:	2020      	movs	r0, #32
   d5996:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d599a:	e9cd 4200 	strd	r4, r2, [sp]
   d599e:	2032      	movs	r0, #50	; 0x32
   d59a0:	aa04      	add	r2, sp, #16
   d59a2:	f002 fdb7 	bl	d8514 <log_message_v>
}
   d59a6:	b00d      	add	sp, #52	; 0x34
   d59a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59ac:	b003      	add	sp, #12
   d59ae:	4770      	bx	lr

000d59b0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59b0:	b510      	push	{r4, lr}
   d59b2:	7202      	strb	r2, [r0, #8]
   d59b4:	22ff      	movs	r2, #255	; 0xff
   d59b6:	8142      	strh	r2, [r0, #10]
   d59b8:	2200      	movs	r2, #0
   d59ba:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d59be:	6142      	str	r2, [r0, #20]
   d59c0:	7602      	strb	r2, [r0, #24]
   d59c2:	61c2      	str	r2, [r0, #28]
    instance = this;
   d59c4:	4a02      	ldr	r2, [pc, #8]	; (d59d0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59c6:	4c03      	ldr	r4, [pc, #12]	; (d59d4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d59c8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d59ca:	e9c0 4100 	strd	r4, r1, [r0]
}
   d59ce:	bd10      	pop	{r4, pc}
   d59d0:	2003e5bc 	.word	0x2003e5bc
   d59d4:	000db73c 	.word	0x000db73c

000d59d8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d59d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59dc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d59e0:	4604      	mov	r4, r0
   d59e2:	4689      	mov	r9, r1
   d59e4:	4616      	mov	r6, r2
   d59e6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d59e8:	f1b8 0f00 	cmp.w	r8, #0
   d59ec:	d002      	beq.n	d59f4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d59ee:	6840      	ldr	r0, [r0, #4]
   d59f0:	f003 fc4c 	bl	d928c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d59f4:	7a21      	ldrb	r1, [r4, #8]
   d59f6:	6860      	ldr	r0, [r4, #4]
   d59f8:	f003 fc3d 	bl	d9276 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d59fc:	6860      	ldr	r0, [r4, #4]
   d59fe:	6803      	ldr	r3, [r0, #0]
   d5a00:	4649      	mov	r1, r9
   d5a02:	689b      	ldr	r3, [r3, #8]
   d5a04:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d5a06:	6860      	ldr	r0, [r4, #4]
   d5a08:	2100      	movs	r1, #0
   d5a0a:	f003 fc3b 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5a0e:	4605      	mov	r5, r0
   d5a10:	bb00      	cbnz	r0, d5a54 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a12:	2301      	movs	r3, #1
   d5a14:	7a21      	ldrb	r1, [r4, #8]
   d5a16:	6860      	ldr	r0, [r4, #4]
   d5a18:	463a      	mov	r2, r7
   d5a1a:	f003 fc1a 	bl	d9252 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d5a1e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d5a20:	4603      	mov	r3, r0
        if (count == num) {
   d5a22:	d109      	bne.n	d5a38 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d5a24:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d5a26:	42be      	cmp	r6, r7
   d5a28:	d01c      	beq.n	d5a64 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d5a2a:	6860      	ldr	r0, [r4, #4]
   d5a2c:	6803      	ldr	r3, [r0, #0]
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	4798      	blx	r3
   d5a32:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5a36:	e7f6      	b.n	d5a26 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5a38:	490b      	ldr	r1, [pc, #44]	; (d5a68 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5a3a:	480c      	ldr	r0, [pc, #48]	; (d5a6c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a3c:	464a      	mov	r2, r9
   d5a3e:	f7ff ffa0 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d5a42:	f1b8 0f00 	cmp.w	r8, #0
   d5a46:	d002      	beq.n	d5a4e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5a48:	6860      	ldr	r0, [r4, #4]
   d5a4a:	f003 fc28 	bl	d929e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d5a4e:	4628      	mov	r0, r5
   d5a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5a54:	4603      	mov	r3, r0
   d5a56:	4906      	ldr	r1, [pc, #24]	; (d5a70 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5a58:	4804      	ldr	r0, [pc, #16]	; (d5a6c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5a5a:	464a      	mov	r2, r9
   d5a5c:	f7ff ff91 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5a60:	2500      	movs	r5, #0
   d5a62:	e7ee      	b.n	d5a42 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5a64:	2501      	movs	r5, #1
   d5a66:	e7ec      	b.n	d5a42 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5a68:	000db4ed 	.word	0x000db4ed
   d5a6c:	2003e5b8 	.word	0x2003e5b8
   d5a70:	000db512 	.word	0x000db512

000d5a74 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5a74:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5a76:	9300      	str	r3, [sp, #0]
   d5a78:	2301      	movs	r3, #1
   d5a7a:	f7ff ffad 	bl	d59d8 <_ZN6AB180513readRegistersEhPhjb>
}
   d5a7e:	b003      	add	sp, #12
   d5a80:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a84 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5a86:	8943      	ldrh	r3, [r0, #10]
   d5a88:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5a8a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5a8c:	d010      	beq.n	d5ab0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5a8e:	4e19      	ldr	r6, [pc, #100]	; (d5af4 <_ZN6AB180510detectChipEv+0x70>)
   d5a90:	4d19      	ldr	r5, [pc, #100]	; (d5af8 <_ZN6AB180510detectChipEv+0x74>)
   d5a92:	f002 fb8f 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5a96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5a9a:	d209      	bcs.n	d5ab0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5a9c:	8960      	ldrh	r0, [r4, #10]
   d5a9e:	f004 fc8b 	bl	da3b8 <digitalRead>
   d5aa2:	2801      	cmp	r0, #1
   d5aa4:	d004      	beq.n	d5ab0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5aa6:	4631      	mov	r1, r6
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	f7fe fbcc 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5aae:	e7f0      	b.n	d5a92 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d5ab0:	2301      	movs	r3, #1
   d5ab2:	f10d 0207 	add.w	r2, sp, #7
   d5ab6:	2128      	movs	r1, #40	; 0x28
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f7ff ffdb 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d5abe:	b930      	cbnz	r0, d5ace <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d5ac0:	480d      	ldr	r0, [pc, #52]	; (d5af8 <_ZN6AB180510detectChipEv+0x74>)
   d5ac2:	490e      	ldr	r1, [pc, #56]	; (d5afc <_ZN6AB180510detectChipEv+0x78>)
   d5ac4:	f7fe fbbf 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5ac8:	2000      	movs	r0, #0
}
   d5aca:	b002      	add	sp, #8
   d5acc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d5ace:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5ad2:	2b18      	cmp	r3, #24
   d5ad4:	d1f4      	bne.n	d5ac0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d5ad6:	2301      	movs	r3, #1
   d5ad8:	f10d 0207 	add.w	r2, sp, #7
   d5adc:	2129      	movs	r1, #41	; 0x29
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff ffc8 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d5ae4:	2800      	cmp	r0, #0
   d5ae6:	d0eb      	beq.n	d5ac0 <_ZN6AB180510detectChipEv+0x3c>
   d5ae8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5aec:	2b05      	cmp	r3, #5
   d5aee:	d1e7      	bne.n	d5ac0 <_ZN6AB180510detectChipEv+0x3c>
   d5af0:	e7eb      	b.n	d5aca <_ZN6AB180510detectChipEv+0x46>
   d5af2:	bf00      	nop
   d5af4:	000db536 	.word	0x000db536
   d5af8:	2003e5b8 	.word	0x2003e5b8
   d5afc:	000db54b 	.word	0x000db54b

000d5b00 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d5b00:	b507      	push	{r0, r1, r2, lr}
   d5b02:	4613      	mov	r3, r2
    uint8_t value = 0;
   d5b04:	2200      	movs	r2, #0
   d5b06:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d5b0a:	f10d 0207 	add.w	r2, sp, #7
   d5b0e:	f7ff ffb1 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d5b12:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5b16:	b003      	add	sp, #12
   d5b18:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b1c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d5b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b20:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5b24:	4604      	mov	r4, r0
   d5b26:	460f      	mov	r7, r1
   d5b28:	4615      	mov	r5, r2
   d5b2a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d5b2c:	f1b8 0f00 	cmp.w	r8, #0
   d5b30:	d002      	beq.n	d5b38 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d5b32:	6840      	ldr	r0, [r0, #4]
   d5b34:	f003 fbaa 	bl	d928c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5b38:	7a21      	ldrb	r1, [r4, #8]
   d5b3a:	6860      	ldr	r0, [r4, #4]
   d5b3c:	f003 fb9b 	bl	d9276 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5b40:	6860      	ldr	r0, [r4, #4]
   d5b42:	6803      	ldr	r3, [r0, #0]
   d5b44:	4639      	mov	r1, r7
   d5b46:	689b      	ldr	r3, [r3, #8]
   d5b48:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b4a:	442e      	add	r6, r5
   d5b4c:	42b5      	cmp	r5, r6
   d5b4e:	6860      	ldr	r0, [r4, #4]
   d5b50:	d005      	beq.n	d5b5e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5b52:	6803      	ldr	r3, [r0, #0]
   d5b54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b58:	689b      	ldr	r3, [r3, #8]
   d5b5a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d5b5c:	e7f6      	b.n	d5b4c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d5b5e:	2101      	movs	r1, #1
   d5b60:	f003 fb90 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5b64:	4603      	mov	r3, r0
   d5b66:	b170      	cbz	r0, d5b86 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5b68:	4908      	ldr	r1, [pc, #32]	; (d5b8c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d5b6a:	4809      	ldr	r0, [pc, #36]	; (d5b90 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d5b6c:	463a      	mov	r2, r7
   d5b6e:	f7ff ff08 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5b72:	2500      	movs	r5, #0
    }

    if (lock) {
   d5b74:	f1b8 0f00 	cmp.w	r8, #0
   d5b78:	d002      	beq.n	d5b80 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d5b7a:	6860      	ldr	r0, [r4, #4]
   d5b7c:	f003 fb8f 	bl	d929e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5b80:	4628      	mov	r0, r5
   d5b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5b86:	2501      	movs	r5, #1
   d5b88:	e7f4      	b.n	d5b74 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d5b8a:	bf00      	nop
   d5b8c:	000db558 	.word	0x000db558
   d5b90:	2003e5b8 	.word	0x2003e5b8

000d5b94 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5b96:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d5b9a:	9300      	str	r3, [sp, #0]
   d5b9c:	f10d 020f 	add.w	r2, sp, #15
   d5ba0:	2301      	movs	r3, #1
   d5ba2:	f7ff ffbb 	bl	d5b1c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5ba6:	b005      	add	sp, #20
   d5ba8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bac <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d5bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d5bae:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5bb0:	460c      	mov	r4, r1
   d5bb2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5bb4:	491a      	ldr	r1, [pc, #104]	; (d5c20 <_ZN6AB18056setWDTEi+0x74>)
   d5bb6:	481b      	ldr	r0, [pc, #108]	; (d5c24 <_ZN6AB18056setWDTEi+0x78>)
   d5bb8:	f7fe fb45 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d5bbc:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d5bbe:	bfb8      	it	lt
   d5bc0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5bc2:	b97c      	cbnz	r4, d5be4 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5bc4:	2301      	movs	r3, #1
   d5bc6:	4622      	mov	r2, r4
   d5bc8:	211b      	movs	r1, #27
   d5bca:	4628      	mov	r0, r5
   d5bcc:	f7ff ffe2 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5bd0:	4915      	ldr	r1, [pc, #84]	; (d5c28 <_ZN6AB18056setWDTEi+0x7c>)
   d5bd2:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5bd4:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5bd6:	4813      	ldr	r0, [pc, #76]	; (d5c24 <_ZN6AB18056setWDTEi+0x78>)
   d5bd8:	f7ff febc 	bl	d5954 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5bdc:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5bde:	616c      	str	r4, [r5, #20]
}
   d5be0:	4630      	mov	r0, r6
   d5be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5be4:	2c03      	cmp	r4, #3
   d5be6:	dd19      	ble.n	d5c1c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5be8:	10a7      	asrs	r7, r4, #2
   d5bea:	2f1f      	cmp	r7, #31
   d5bec:	bfa8      	it	ge
   d5bee:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5bf0:	00ba      	lsls	r2, r7, #2
   d5bf2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5bf6:	2301      	movs	r3, #1
   d5bf8:	b2d2      	uxtb	r2, r2
   d5bfa:	211b      	movs	r1, #27
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7ff ffc9 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5c02:	463a      	mov	r2, r7
   d5c04:	4603      	mov	r3, r0
   d5c06:	4909      	ldr	r1, [pc, #36]	; (d5c2c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5c08:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5c0a:	4806      	ldr	r0, [pc, #24]	; (d5c24 <_ZN6AB18056setWDTEi+0x78>)
   d5c0c:	f7ff fea2 	bl	d5954 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5c10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5c14:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5c16:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5c18:	616f      	str	r7, [r5, #20]
   d5c1a:	e7e1      	b.n	d5be0 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5c1c:	2701      	movs	r7, #1
   d5c1e:	e7e7      	b.n	d5bf0 <_ZN6AB18056setWDTEi+0x44>
   d5c20:	000db57d 	.word	0x000db57d
   d5c24:	2003e5b8 	.word	0x2003e5b8
   d5c28:	000db587 	.word	0x000db587
   d5c2c:	000db5a3 	.word	0x000db5a3

000d5c30 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c30:	460b      	mov	r3, r1
    if (instance) {
   d5c32:	4907      	ldr	r1, [pc, #28]	; (d5c50 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5c34:	4602      	mov	r2, r0
    if (instance) {
   d5c36:	6808      	ldr	r0, [r1, #0]
   d5c38:	b148      	cbz	r0, d5c4e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5c3a:	2b00      	cmp	r3, #0
   d5c3c:	bf08      	it	eq
   d5c3e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d5c42:	d104      	bne.n	d5c4e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d5c44:	68c3      	ldr	r3, [r0, #12]
   d5c46:	b113      	cbz	r3, d5c4e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5c48:	2100      	movs	r1, #0
   d5c4a:	f7ff bfaf 	b.w	d5bac <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5c4e:	4770      	bx	lr
   d5c50:	2003e5bc 	.word	0x2003e5bc

000d5c54 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5c54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5c58:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5c5c:	4605      	mov	r5, r0
   d5c5e:	4616      	mov	r6, r2
   d5c60:	461f      	mov	r7, r3
    if (lock) {
   d5c62:	f1b8 0f00 	cmp.w	r8, #0
   d5c66:	d004      	beq.n	d5c72 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5c68:	6840      	ldr	r0, [r0, #4]
   d5c6a:	9101      	str	r1, [sp, #4]
   d5c6c:	f003 fb0e 	bl	d928c <_ZN7TwoWire4lockEv>
   d5c70:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5c72:	9101      	str	r1, [sp, #4]
   d5c74:	2300      	movs	r3, #0
   d5c76:	f10d 020f 	add.w	r2, sp, #15
   d5c7a:	4628      	mov	r0, r5
   d5c7c:	f7ff fefa 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5c80:	4604      	mov	r4, r0
   d5c82:	b160      	cbz	r0, d5c9e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5c84:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5c88:	ea03 0206 	and.w	r2, r3, r6
   d5c8c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d5c8e:	4293      	cmp	r3, r2
   d5c90:	d005      	beq.n	d5c9e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5c92:	9901      	ldr	r1, [sp, #4]
   d5c94:	2300      	movs	r3, #0
   d5c96:	4628      	mov	r0, r5
   d5c98:	f7ff ff7c 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
   d5c9c:	4604      	mov	r4, r0
    if (lock) {
   d5c9e:	f1b8 0f00 	cmp.w	r8, #0
   d5ca2:	d002      	beq.n	d5caa <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5ca4:	6868      	ldr	r0, [r5, #4]
   d5ca6:	f003 fafa 	bl	d929e <_ZN7TwoWire6unlockEv>
}
   d5caa:	4620      	mov	r0, r4
   d5cac:	b004      	add	sp, #16
   d5cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cb2 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cb2:	b513      	push	{r0, r1, r4, lr}
   d5cb4:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5cb6:	f10d 0207 	add.w	r2, sp, #7
   d5cba:	f7ff fedb 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d5cbe:	b128      	cbz	r0, d5ccc <_ZN6AB180510isBitClearEhhb+0x1a>
   d5cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5cc4:	421c      	tst	r4, r3
   d5cc6:	bf0c      	ite	eq
   d5cc8:	2001      	moveq	r0, #1
   d5cca:	2000      	movne	r0, #0
}
   d5ccc:	b002      	add	sp, #8
   d5cce:	bd10      	pop	{r4, pc}

000d5cd0 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cd0:	b513      	push	{r0, r1, r4, lr}
   d5cd2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5cd4:	f10d 0207 	add.w	r2, sp, #7
   d5cd8:	f7ff fecc 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5cdc:	b128      	cbz	r0, d5cea <_ZN6AB18058isBitSetEhhb+0x1a>
   d5cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5ce2:	421c      	tst	r4, r3
   d5ce4:	bf14      	ite	ne
   d5ce6:	2001      	movne	r0, #1
   d5ce8:	2000      	moveq	r0, #0
}
   d5cea:	b002      	add	sp, #8
   d5cec:	bd10      	pop	{r4, pc}

000d5cee <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5cee:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5cf0:	43d2      	mvns	r2, r2
   d5cf2:	9300      	str	r3, [sp, #0]
   d5cf4:	b2d2      	uxtb	r2, r2
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	f7ff ffac 	bl	d5c54 <_ZN6AB180512maskRegisterEhhhb>
}
   d5cfc:	b003      	add	sp, #12
   d5cfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d04 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5d06:	2301      	movs	r3, #1
   d5d08:	f10d 0207 	add.w	r2, sp, #7
   d5d0c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5d0e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5d10:	f7ff feb0 	bl	d5a74 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5d14:	4605      	mov	r5, r0
   d5d16:	b938      	cbnz	r0, d5d28 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5d18:	491e      	ldr	r1, [pc, #120]	; (d5d94 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5d1a:	481f      	ldr	r0, [pc, #124]	; (d5d98 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5d1c:	22ad      	movs	r2, #173	; 0xad
   d5d1e:	f7ff fe30 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
}
   d5d22:	4628      	mov	r0, r5
   d5d24:	b003      	add	sp, #12
   d5d26:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5d28:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d2c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d30:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d5d34:	d00b      	beq.n	d5d4e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d36:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5d38:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5d3a:	210f      	movs	r1, #15
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	f7ff ffd6 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d5d42:	4a16      	ldr	r2, [pc, #88]	; (d5d9c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5d44:	4916      	ldr	r1, [pc, #88]	; (d5da0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5d46:	4814      	ldr	r0, [pc, #80]	; (d5d98 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5d48:	f7fe fa7d 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d5d4c:	e7e9      	b.n	d5d22 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5d4e:	2208      	movs	r2, #8
   d5d50:	2117      	movs	r1, #23
   d5d52:	4620      	mov	r0, r4
   d5d54:	f7ff ffbc 	bl	d5cd0 <_ZN6AB18058isBitSetEhhb>
   d5d58:	b118      	cbz	r0, d5d62 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d5a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5d5c:	4a11      	ldr	r2, [pc, #68]	; (d5da4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5d5e:	61e3      	str	r3, [r4, #28]
   d5d60:	e7f0      	b.n	d5d44 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d5d62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5d66:	071a      	lsls	r2, r3, #28
   d5d68:	d509      	bpl.n	d5d7e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5d6a:	2303      	movs	r3, #3
   d5d6c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5d6e:	2208      	movs	r2, #8
   d5d70:	2301      	movs	r3, #1
   d5d72:	210f      	movs	r1, #15
   d5d74:	4620      	mov	r0, r4
   d5d76:	f7ff ffba 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5d7a:	4a0b      	ldr	r2, [pc, #44]	; (d5da8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5d7c:	e7e2      	b.n	d5d44 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d5d7e:	075b      	lsls	r3, r3, #29
   d5d80:	d5cf      	bpl.n	d5d22 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d5d82:	2204      	movs	r2, #4
   d5d84:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5d86:	2301      	movs	r3, #1
   d5d88:	210f      	movs	r1, #15
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	f7ff ffaf 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d5d90:	4a06      	ldr	r2, [pc, #24]	; (d5dac <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d5d92:	e7d7      	b.n	d5d44 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5d94:	000db5f6 	.word	0x000db5f6
   d5d98:	2003e5b8 	.word	0x2003e5b8
   d5d9c:	000db5c7 	.word	0x000db5c7
   d5da0:	000db615 	.word	0x000db615
   d5da4:	000db5d0 	.word	0x000db5d0
   d5da8:	000db5e0 	.word	0x000db5e0
   d5dac:	000db5f0 	.word	0x000db5f0

000d5db0 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5db0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d5db2:	9300      	str	r3, [sp, #0]
   d5db4:	4613      	mov	r3, r2
   d5db6:	22ff      	movs	r2, #255	; 0xff
   d5db8:	f7ff ff4c 	bl	d5c54 <_ZN6AB180512maskRegisterEhhhb>
}
   d5dbc:	b003      	add	sp, #12
   d5dbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5dc4 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d5dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dc6:	460f      	mov	r7, r1
   d5dc8:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d5dca:	2301      	movs	r3, #1
   d5dcc:	2200      	movs	r2, #0
   d5dce:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d5dd0:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d5dd2:	f7ff fedf 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5dd6:	4604      	mov	r4, r0
   d5dd8:	b938      	cbnz	r0, d5dea <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d5dda:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d5dde:	491e      	ldr	r1, [pc, #120]	; (d5e58 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d5de0:	481e      	ldr	r0, [pc, #120]	; (d5e5c <_ZN6AB180517setCountdownTimerEib+0x98>)
   d5de2:	f7ff fdce 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
}
   d5de6:	4620      	mov	r0, r4
   d5de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d5dea:	2301      	movs	r3, #1
   d5dec:	2223      	movs	r2, #35	; 0x23
   d5dee:	2118      	movs	r1, #24
   d5df0:	4628      	mov	r0, r5
   d5df2:	f7ff fecf 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5df6:	4604      	mov	r4, r0
   d5df8:	b910      	cbnz	r0, d5e00 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d5dfa:	f240 229b 	movw	r2, #667	; 0x29b
   d5dfe:	e7ee      	b.n	d5dde <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d5e00:	2fff      	cmp	r7, #255	; 0xff
   d5e02:	bfa8      	it	ge
   d5e04:	27ff      	movge	r7, #255	; 0xff
   d5e06:	2f01      	cmp	r7, #1
   d5e08:	bfb8      	it	lt
   d5e0a:	2701      	movlt	r7, #1
   d5e0c:	2301      	movs	r3, #1
   d5e0e:	b2fa      	uxtb	r2, r7
   d5e10:	2119      	movs	r1, #25
   d5e12:	4628      	mov	r0, r5
   d5e14:	f7ff febe 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5e18:	4604      	mov	r4, r0
   d5e1a:	b910      	cbnz	r0, d5e22 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d5e1c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d5e20:	e7dd      	b.n	d5dde <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d5e22:	2301      	movs	r3, #1
   d5e24:	2208      	movs	r2, #8
   d5e26:	2112      	movs	r1, #18
   d5e28:	4628      	mov	r0, r5
   d5e2a:	f7ff ffc1 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5e2e:	4604      	mov	r4, r0
   d5e30:	b910      	cbnz	r0, d5e38 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d5e32:	f240 22af 	movw	r2, #687	; 0x2af
   d5e36:	e7d2      	b.n	d5dde <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d5e38:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d5e3a:	f04f 0301 	mov.w	r3, #1
   d5e3e:	bf14      	ite	ne
   d5e40:	2283      	movne	r2, #131	; 0x83
   d5e42:	2282      	moveq	r2, #130	; 0x82
   d5e44:	2118      	movs	r1, #24
   d5e46:	4628      	mov	r0, r5
   d5e48:	f7ff fea4 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5e4c:	4604      	mov	r4, r0
   d5e4e:	2800      	cmp	r0, #0
   d5e50:	d1c9      	bne.n	d5de6 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d5e52:	f240 22b9 	movw	r2, #697	; 0x2b9
   d5e56:	e7c2      	b.n	d5dde <_ZN6AB180517setCountdownTimerEib+0x1a>
   d5e58:	000db626 	.word	0x000db626
   d5e5c:	2003e5b8 	.word	0x2003e5b8

000d5e60 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d5e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d5e64:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d5e66:	4605      	mov	r5, r0
   d5e68:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d5e6a:	484f      	ldr	r0, [pc, #316]	; (d5fa8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5e6c:	494f      	ldr	r1, [pc, #316]	; (d5fac <_ZN6AB180513deepPowerDownEi+0x14c>)
   d5e6e:	f7fe f9ea 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d5e72:	2100      	movs	r1, #0
   d5e74:	4628      	mov	r0, r5
   d5e76:	f7ff fe99 	bl	d5bac <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d5e7a:	4604      	mov	r4, r0
   d5e7c:	b948      	cbnz	r0, d5e92 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d5e7e:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d5e82:	494b      	ldr	r1, [pc, #300]	; (d5fb0 <_ZN6AB180513deepPowerDownEi+0x150>)
   d5e84:	4848      	ldr	r0, [pc, #288]	; (d5fa8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5e86:	f7ff fd7c 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
}
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	b003      	add	sp, #12
   d5e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d5e92:	2301      	movs	r3, #1
   d5e94:	461a      	mov	r2, r3
   d5e96:	2130      	movs	r1, #48	; 0x30
   d5e98:	4628      	mov	r0, r5
   d5e9a:	f7ff ff89 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5e9e:	4604      	mov	r4, r0
   d5ea0:	b910      	cbnz	r0, d5ea8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d5ea2:	f240 2205 	movw	r2, #517	; 0x205
   d5ea6:	e7ec      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d5ea8:	2210      	movs	r2, #16
   d5eaa:	2301      	movs	r3, #1
   d5eac:	4611      	mov	r1, r2
   d5eae:	4628      	mov	r0, r5
   d5eb0:	f7ff ff1d 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d5eb4:	4604      	mov	r4, r0
   d5eb6:	b910      	cbnz	r0, d5ebe <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d5eb8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d5ebc:	e7e1      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d5ebe:	2301      	movs	r3, #1
   d5ec0:	2226      	movs	r2, #38	; 0x26
   d5ec2:	2113      	movs	r1, #19
   d5ec4:	4628      	mov	r0, r5
   d5ec6:	f7ff fe65 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5eca:	4604      	mov	r4, r0
   d5ecc:	b910      	cbnz	r0, d5ed4 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d5ece:	f240 2213 	movw	r2, #531	; 0x213
   d5ed2:	e7d6      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d5ed4:	2601      	movs	r6, #1
   d5ed6:	9600      	str	r6, [sp, #0]
   d5ed8:	4633      	mov	r3, r6
   d5eda:	22fc      	movs	r2, #252	; 0xfc
   d5edc:	2111      	movs	r1, #17
   d5ede:	4628      	mov	r0, r5
   d5ee0:	f7ff feb8 	bl	d5c54 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5ee4:	4604      	mov	r4, r0
   d5ee6:	b910      	cbnz	r0, d5eee <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d5ee8:	f240 221b 	movw	r2, #539	; 0x21b
   d5eec:	e7c9      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d5eee:	2200      	movs	r2, #0
   d5ef0:	4639      	mov	r1, r7
   d5ef2:	4628      	mov	r0, r5
   d5ef4:	f7ff ff66 	bl	d5dc4 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d5ef8:	4604      	mov	r4, r0
   d5efa:	b910      	cbnz	r0, d5f02 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d5efc:	f240 2222 	movw	r2, #546	; 0x222
   d5f00:	e7bf      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d5f02:	9600      	str	r6, [sp, #0]
   d5f04:	2302      	movs	r3, #2
   d5f06:	2277      	movs	r2, #119	; 0x77
   d5f08:	2110      	movs	r1, #16
   d5f0a:	4628      	mov	r0, r5
   d5f0c:	f7ff fea2 	bl	d5c54 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5f10:	4604      	mov	r4, r0
   d5f12:	b910      	cbnz	r0, d5f1a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d5f14:	f240 222b 	movw	r2, #555	; 0x22b
   d5f18:	e7b3      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d5f1a:	4633      	mov	r3, r6
   d5f1c:	2204      	movs	r2, #4
   d5f1e:	211c      	movs	r1, #28
   d5f20:	4628      	mov	r0, r5
   d5f22:	f7ff ff45 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d5f26:	4604      	mov	r4, r0
   d5f28:	b910      	cbnz	r0, d5f30 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d5f2a:	f240 2232 	movw	r2, #562	; 0x232
   d5f2e:	e7a8      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d5f30:	9600      	str	r6, [sp, #0]
   d5f32:	2318      	movs	r3, #24
   d5f34:	22e3      	movs	r2, #227	; 0xe3
   d5f36:	2111      	movs	r1, #17
   d5f38:	4628      	mov	r0, r5
   d5f3a:	f7ff fe8b 	bl	d5c54 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d5f3e:	4604      	mov	r4, r0
   d5f40:	b910      	cbnz	r0, d5f48 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d5f42:	f240 2239 	movw	r2, #569	; 0x239
   d5f46:	e79c      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d5f48:	4633      	mov	r3, r6
   d5f4a:	22c0      	movs	r2, #192	; 0xc0
   d5f4c:	2117      	movs	r1, #23
   d5f4e:	4628      	mov	r0, r5
   d5f50:	f7ff fe20 	bl	d5b94 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d5f54:	4604      	mov	r4, r0
   d5f56:	b910      	cbnz	r0, d5f5e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d5f58:	f44f 7210 	mov.w	r2, #576	; 0x240
   d5f5c:	e791      	b.n	d5e82 <_ZN6AB180513deepPowerDownEi+0x22>
   d5f5e:	f002 f929 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d5f62:	f8df 9054 	ldr.w	r9, [pc, #84]	; d5fb8 <_ZN6AB180513deepPowerDownEi+0x158>
   d5f66:	f8df 8040 	ldr.w	r8, [pc, #64]	; d5fa8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d5f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5f6e:	4606      	mov	r6, r0
   d5f70:	434f      	muls	r7, r1
   d5f72:	f002 f91f 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d5f76:	1b80      	subs	r0, r0, r6
   d5f78:	42b8      	cmp	r0, r7
   d5f7a:	d20e      	bcs.n	d5f9a <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d5f7c:	2201      	movs	r2, #1
   d5f7e:	2117      	movs	r1, #23
   d5f80:	4628      	mov	r0, r5
   d5f82:	f7ff fdbd 	bl	d5b00 <_ZN6AB180512readRegisterEhb>
   d5f86:	4649      	mov	r1, r9
   d5f88:	4602      	mov	r2, r0
   d5f8a:	4640      	mov	r0, r8
   d5f8c:	f7fe f95b 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d5f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5f94:	f002 fc7a 	bl	d888c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d5f98:	e7eb      	b.n	d5f72 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d5f9a:	4906      	ldr	r1, [pc, #24]	; (d5fb4 <_ZN6AB180513deepPowerDownEi+0x154>)
   d5f9c:	4802      	ldr	r0, [pc, #8]	; (d5fa8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d5f9e:	f7ff fcf0 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d5fa2:	f003 fd2b 	bl	d99fc <_ZN11SystemClass5resetEv>
    return true;
   d5fa6:	e770      	b.n	d5e8a <_ZN6AB180513deepPowerDownEi+0x2a>
   d5fa8:	2003e5b8 	.word	0x2003e5b8
   d5fac:	000db651 	.word	0x000db651
   d5fb0:	000db646 	.word	0x000db646
   d5fb4:	000db677 	.word	0x000db677
   d5fb8:	000db662 	.word	0x000db662

000d5fbc <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d5fbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5fc0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5fc4:	4605      	mov	r5, r0
   d5fc6:	460c      	mov	r4, r1
   d5fc8:	4691      	mov	r9, r2
   d5fca:	461f      	mov	r7, r3
    if (lock) {
   d5fcc:	f1ba 0f00 	cmp.w	sl, #0
   d5fd0:	d002      	beq.n	d5fd8 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f003 f95a 	bl	d928c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5fd8:	b307      	cbz	r7, d601c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5fda:	2f20      	cmp	r7, #32
   d5fdc:	463e      	mov	r6, r7
   d5fde:	bf28      	it	cs
   d5fe0:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5fe2:	2c7f      	cmp	r4, #127	; 0x7f
   d5fe4:	d826      	bhi.n	d6034 <_ZN6AB18057readRamEjPhjb+0x78>
   d5fe6:	1933      	adds	r3, r6, r4
   d5fe8:	2b80      	cmp	r3, #128	; 0x80
   d5fea:	d901      	bls.n	d5ff0 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d5fec:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5ff0:	2301      	movs	r3, #1
   d5ff2:	2204      	movs	r2, #4
   d5ff4:	213f      	movs	r1, #63	; 0x3f
   d5ff6:	4628      	mov	r0, r5
   d5ff8:	f7ff fe79 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5ffc:	2300      	movs	r3, #0
   d5ffe:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6002:	9300      	str	r3, [sp, #0]
   d6004:	464a      	mov	r2, r9
   d6006:	4633      	mov	r3, r6
   d6008:	b2c9      	uxtb	r1, r1
   d600a:	4628      	mov	r0, r5
   d600c:	f7ff fce4 	bl	d59d8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6010:	4680      	mov	r8, r0
   d6012:	b128      	cbz	r0, d6020 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6014:	4434      	add	r4, r6
        dataLen -= count;
   d6016:	1bbf      	subs	r7, r7, r6
        data += count;
   d6018:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d601a:	e7dd      	b.n	d5fd8 <_ZN6AB18057readRamEjPhjb+0x1c>
   d601c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6020:	f1ba 0f00 	cmp.w	sl, #0
   d6024:	d002      	beq.n	d602c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6026:	6868      	ldr	r0, [r5, #4]
   d6028:	f003 f939 	bl	d929e <_ZN7TwoWire6unlockEv>
}
   d602c:	4640      	mov	r0, r8
   d602e:	b002      	add	sp, #8
   d6030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6034:	2301      	movs	r3, #1
   d6036:	2204      	movs	r2, #4
   d6038:	213f      	movs	r1, #63	; 0x3f
   d603a:	4628      	mov	r0, r5
   d603c:	f7ff feb8 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
   d6040:	e7dc      	b.n	d5ffc <_ZN6AB18057readRamEjPhjb+0x40>

000d6042 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6042:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6046:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d604a:	4605      	mov	r5, r0
   d604c:	460c      	mov	r4, r1
   d604e:	4691      	mov	r9, r2
   d6050:	461f      	mov	r7, r3
    if (lock) {
   d6052:	f1ba 0f00 	cmp.w	sl, #0
   d6056:	d002      	beq.n	d605e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6058:	6840      	ldr	r0, [r0, #4]
   d605a:	f003 f917 	bl	d928c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d605e:	b307      	cbz	r7, d60a2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6060:	2f1f      	cmp	r7, #31
   d6062:	463e      	mov	r6, r7
   d6064:	bf28      	it	cs
   d6066:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6068:	2c7f      	cmp	r4, #127	; 0x7f
   d606a:	d826      	bhi.n	d60ba <_ZN6AB18058writeRamEjPKhjb+0x78>
   d606c:	1933      	adds	r3, r6, r4
   d606e:	2b80      	cmp	r3, #128	; 0x80
   d6070:	d901      	bls.n	d6076 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6072:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6076:	2301      	movs	r3, #1
   d6078:	2204      	movs	r2, #4
   d607a:	213f      	movs	r1, #63	; 0x3f
   d607c:	4628      	mov	r0, r5
   d607e:	f7ff fe36 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6082:	2300      	movs	r3, #0
   d6084:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6088:	9300      	str	r3, [sp, #0]
   d608a:	464a      	mov	r2, r9
   d608c:	4633      	mov	r3, r6
   d608e:	b2c9      	uxtb	r1, r1
   d6090:	4628      	mov	r0, r5
   d6092:	f7ff fd43 	bl	d5b1c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6096:	4680      	mov	r8, r0
   d6098:	b128      	cbz	r0, d60a6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d609a:	4434      	add	r4, r6
        dataLen -= count;
   d609c:	1bbf      	subs	r7, r7, r6
        data += count;
   d609e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d60a0:	e7dd      	b.n	d605e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d60a2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d60a6:	f1ba 0f00 	cmp.w	sl, #0
   d60aa:	d002      	beq.n	d60b2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d60ac:	6868      	ldr	r0, [r5, #4]
   d60ae:	f003 f8f6 	bl	d929e <_ZN7TwoWire6unlockEv>
}
   d60b2:	4640      	mov	r0, r8
   d60b4:	b002      	add	sp, #8
   d60b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d60ba:	2301      	movs	r3, #1
   d60bc:	2204      	movs	r2, #4
   d60be:	213f      	movs	r1, #63	; 0x3f
   d60c0:	4628      	mov	r0, r5
   d60c2:	f7ff fe75 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
   d60c6:	e7dc      	b.n	d6082 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d60c8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d60c8:	b530      	push	{r4, r5, lr}
   d60ca:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d60cc:	680d      	ldr	r5, [r1, #0]
   d60ce:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d60d2:	9503      	str	r5, [sp, #12]
   d60d4:	684d      	ldr	r5, [r1, #4]
   d60d6:	9502      	str	r5, [sp, #8]
   d60d8:	688d      	ldr	r5, [r1, #8]
   d60da:	9501      	str	r5, [sp, #4]
   d60dc:	68c9      	ldr	r1, [r1, #12]
   d60de:	9100      	str	r1, [sp, #0]
   d60e0:	3301      	adds	r3, #1
   d60e2:	4904      	ldr	r1, [pc, #16]	; (d60f4 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d60e4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d60e8:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d60ea:	f003 fbf9 	bl	d98e0 <_ZN6String6formatEPKcz>
}
   d60ee:	4620      	mov	r0, r4
   d60f0:	b005      	add	sp, #20
   d60f2:	bd30      	pop	{r4, r5, pc}
   d60f4:	000db689 	.word	0x000db689

000d60f8 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d60f8:	1103      	asrs	r3, r0, #4
}
   d60fa:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d60fc:	f000 000f 	and.w	r0, r0, #15
}
   d6100:	fb02 0003 	mla	r0, r2, r3, r0
   d6104:	4770      	bx	lr

000d6106 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6106:	b538      	push	{r3, r4, r5, lr}
   d6108:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d610a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d610c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d610e:	f7ff fff3 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d6112:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6114:	7860      	ldrb	r0, [r4, #1]
   d6116:	f7ff ffef 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d611a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d611c:	78a0      	ldrb	r0, [r4, #2]
   d611e:	f7ff ffeb 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d6122:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6124:	78e0      	ldrb	r0, [r4, #3]
   d6126:	f7ff ffe7 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d612a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d612c:	7920      	ldrb	r0, [r4, #4]
   d612e:	f7ff ffe3 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d6132:	3801      	subs	r0, #1
   d6134:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6136:	b92d      	cbnz	r5, d6144 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6138:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d613a:	7828      	ldrb	r0, [r5, #0]
   d613c:	f7ff ffdc 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d6140:	6188      	str	r0, [r1, #24]
}
   d6142:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6144:	7960      	ldrb	r0, [r4, #5]
   d6146:	f7ff ffd7 	bl	d60f8 <_ZN6AB180510bcdToValueEh>
   d614a:	3064      	adds	r0, #100	; 0x64
   d614c:	1da5      	adds	r5, r4, #6
   d614e:	6148      	str	r0, [r1, #20]
   d6150:	e7f3      	b.n	d613a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6154 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6154:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6156:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6158:	b088      	sub	sp, #32
   d615a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d615c:	461a      	mov	r2, r3
   d615e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6160:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6162:	f7ff fda6 	bl	d5cb2 <_ZN6AB180510isBitClearEhhb>
   d6166:	b1f0      	cbz	r0, d61a6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6168:	2308      	movs	r3, #8
   d616a:	2601      	movs	r6, #1
   d616c:	4620      	mov	r0, r4
   d616e:	9600      	str	r6, [sp, #0]
   d6170:	eb0d 0203 	add.w	r2, sp, r3
   d6174:	2100      	movs	r1, #0
   d6176:	f7ff fc2f 	bl	d59d8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d617a:	4604      	mov	r4, r0
   d617c:	b198      	cbz	r0, d61a6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d617e:	4632      	mov	r2, r6
   d6180:	4629      	mov	r1, r5
   d6182:	f10d 0009 	add.w	r0, sp, #9
   d6186:	f7ff ffbe 	bl	d6106 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d618a:	a804      	add	r0, sp, #16
   d618c:	f7ff ff9c 	bl	d60c8 <_ZN6AB180510tmToStringEPK2tm>
   d6190:	4808      	ldr	r0, [pc, #32]	; (d61b4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6192:	9a04      	ldr	r2, [sp, #16]
   d6194:	4908      	ldr	r1, [pc, #32]	; (d61b8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6196:	f7fe f856 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d619a:	a804      	add	r0, sp, #16
   d619c:	f003 fafc 	bl	d9798 <_ZN6StringD1Ev>
}
   d61a0:	4620      	mov	r0, r4
   d61a2:	b008      	add	sp, #32
   d61a4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d61a6:	2224      	movs	r2, #36	; 0x24
   d61a8:	2100      	movs	r1, #0
   d61aa:	4628      	mov	r0, r5
   d61ac:	f004 fe4e 	bl	dae4c <memset>
   d61b0:	2400      	movs	r4, #0
   d61b2:	e7f5      	b.n	d61a0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d61b4:	2003e5b8 	.word	0x2003e5b8
   d61b8:	000db6a7 	.word	0x000db6a7

000d61bc <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d61bc:	b530      	push	{r4, r5, lr}
   d61be:	b08b      	sub	sp, #44	; 0x2c
   d61c0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d61c2:	a901      	add	r1, sp, #4
   d61c4:	f7ff ffc6 	bl	d6154 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d61c8:	4604      	mov	r4, r0
   d61ca:	b120      	cbz	r0, d61d6 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d61cc:	a801      	add	r0, sp, #4
   d61ce:	f002 fb55 	bl	d887c <mktime>
   d61d2:	e9c5 0100 	strd	r0, r1, [r5]
}
   d61d6:	4620      	mov	r0, r4
   d61d8:	b00b      	add	sp, #44	; 0x2c
   d61da:	bd30      	pop	{r4, r5, pc}

000d61dc <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d61dc:	b510      	push	{r4, lr}
   d61de:	4604      	mov	r4, r0
   d61e0:	b088      	sub	sp, #32
    if (callBegin) {
   d61e2:	b111      	cbz	r1, d61ea <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d61e4:	6840      	ldr	r0, [r0, #4]
   d61e6:	f003 f817 	bl	d9218 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d61ea:	4620      	mov	r0, r4
   d61ec:	f7ff fc4a 	bl	d5a84 <_ZN6AB180510detectChipEv>
   d61f0:	b370      	cbz	r0, d6250 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d61f2:	4620      	mov	r0, r4
   d61f4:	f7ff fd86 	bl	d5d04 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d61f8:	2301      	movs	r3, #1
   d61fa:	461a      	mov	r2, r3
   d61fc:	2110      	movs	r1, #16
   d61fe:	4620      	mov	r0, r4
   d6200:	f7ff fd57 	bl	d5cb2 <_ZN6AB180510isBitClearEhhb>
   d6204:	b1d8      	cbz	r0, d623e <_ZN6AB18055setupEb+0x62>
   d6206:	f003 fe49 	bl	d9e9c <_ZN9TimeClass7isValidEv>
   d620a:	b9c0      	cbnz	r0, d623e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d620c:	a902      	add	r1, sp, #8
   d620e:	4620      	mov	r0, r4
   d6210:	f7ff ffd4 	bl	d61bc <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6218:	f003 fd46 	bl	d9ca8 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d621c:	4b0f      	ldr	r3, [pc, #60]	; (d625c <_ZN6AB18055setupEb+0x80>)
   d621e:	4910      	ldr	r1, [pc, #64]	; (d6260 <_ZN6AB18055setupEb+0x84>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	9300      	str	r3, [sp, #0]
   d6224:	a804      	add	r0, sp, #16
   d6226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d622a:	f003 fdf5 	bl	d9e18 <_ZN9TimeClass6formatExPKc>
   d622e:	480d      	ldr	r0, [pc, #52]	; (d6264 <_ZN6AB18055setupEb+0x88>)
   d6230:	9a04      	ldr	r2, [sp, #16]
   d6232:	490d      	ldr	r1, [pc, #52]	; (d6268 <_ZN6AB18055setupEb+0x8c>)
   d6234:	f7fe f807 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d6238:	a804      	add	r0, sp, #16
   d623a:	f003 faad 	bl	d9798 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d623e:	4a0b      	ldr	r2, [pc, #44]	; (d626c <_ZN6AB18055setupEb+0x90>)
   d6240:	2300      	movs	r3, #0
   d6242:	2100      	movs	r1, #0
   d6244:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6248:	f002 f996 	bl	d8578 <system_subscribe_event>
}
   d624c:	b008      	add	sp, #32
   d624e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6250:	4907      	ldr	r1, [pc, #28]	; (d6270 <_ZN6AB18055setupEb+0x94>)
   d6252:	4804      	ldr	r0, [pc, #16]	; (d6264 <_ZN6AB18055setupEb+0x88>)
   d6254:	f7ff fb95 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
   d6258:	e7f1      	b.n	d623e <_ZN6AB18055setupEb+0x62>
   d625a:	bf00      	nop
   d625c:	2003e18c 	.word	0x2003e18c
   d6260:	2003e650 	.word	0x2003e650
   d6264:	2003e5b8 	.word	0x2003e5b8
   d6268:	000db6b5 	.word	0x000db6b5
   d626c:	000d5c31 	.word	0x000d5c31
   d6270:	000db6d2 	.word	0x000db6d2

000d6274 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6274:	220a      	movs	r2, #10
   d6276:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d627a:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d627e:	fb93 f1f2 	sdiv	r1, r3, r2
   d6282:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6286:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d628a:	b2c0      	uxtb	r0, r0
   d628c:	4770      	bx	lr

000d628e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d628e:	b570      	push	{r4, r5, r6, lr}
   d6290:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6292:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6294:	460c      	mov	r4, r1
   d6296:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6298:	f7ff ffec 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d629c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d629e:	6868      	ldr	r0, [r5, #4]
   d62a0:	f7ff ffe8 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62a4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d62a6:	68a8      	ldr	r0, [r5, #8]
   d62a8:	f7ff ffe4 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62ac:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d62ae:	68e8      	ldr	r0, [r5, #12]
   d62b0:	f7ff ffe0 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62b4:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d62b6:	6928      	ldr	r0, [r5, #16]
   d62b8:	3001      	adds	r0, #1
   d62ba:	f7ff ffdb 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62be:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d62c0:	b92e      	cbnz	r6, d62ce <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d62c2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d62c4:	69a8      	ldr	r0, [r5, #24]
   d62c6:	f7ff ffd5 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62ca:	7030      	strb	r0, [r6, #0]
}
   d62cc:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d62ce:	696a      	ldr	r2, [r5, #20]
   d62d0:	2364      	movs	r3, #100	; 0x64
   d62d2:	fb92 f0f3 	sdiv	r0, r2, r3
   d62d6:	fb03 2010 	mls	r0, r3, r0, r2
   d62da:	f7ff ffcb 	bl	d6274 <_ZN6AB180510valueToBcdEi>
   d62de:	1da6      	adds	r6, r4, #6
   d62e0:	7160      	strb	r0, [r4, #5]
   d62e2:	e7ef      	b.n	d62c4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d62e4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d62e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62e6:	b087      	sub	sp, #28
   d62e8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d62ea:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d62ec:	4616      	mov	r6, r2
   d62ee:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d62f0:	f7ff feea 	bl	d60c8 <_ZN6AB180510tmToStringEPK2tm>
   d62f4:	481e      	ldr	r0, [pc, #120]	; (d6370 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d62f6:	9a02      	ldr	r2, [sp, #8]
   d62f8:	491e      	ldr	r1, [pc, #120]	; (d6374 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d62fa:	f7fd ffa4 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d62fe:	a802      	add	r0, sp, #8
   d6300:	f003 fa4a 	bl	d9798 <_ZN6StringD1Ev>
    if (lock) {
   d6304:	b116      	cbz	r6, d630c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6306:	6868      	ldr	r0, [r5, #4]
   d6308:	f002 ffc0 	bl	d928c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d630c:	4620      	mov	r0, r4
   d630e:	2201      	movs	r2, #1
   d6310:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6314:	2700      	movs	r7, #0
   d6316:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d631a:	f7ff ffb8 	bl	d628e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d631e:	2301      	movs	r3, #1
   d6320:	461a      	mov	r2, r3
   d6322:	2110      	movs	r1, #16
   d6324:	4628      	mov	r0, r5
   d6326:	f7ff fd43 	bl	d5db0 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d632a:	4604      	mov	r4, r0
   d632c:	b1e8      	cbz	r0, d636a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d632e:	2308      	movs	r3, #8
   d6330:	9700      	str	r7, [sp, #0]
   d6332:	eb0d 0203 	add.w	r2, sp, r3
   d6336:	4639      	mov	r1, r7
   d6338:	4628      	mov	r0, r5
   d633a:	f7ff fbef 	bl	d5b1c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d633e:	4604      	mov	r4, r0
   d6340:	b160      	cbz	r0, d635c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6342:	2301      	movs	r3, #1
   d6344:	461a      	mov	r2, r3
   d6346:	2110      	movs	r1, #16
   d6348:	4628      	mov	r0, r5
   d634a:	f7ff fcd0 	bl	d5cee <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d634e:	b116      	cbz	r6, d6356 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6350:	6868      	ldr	r0, [r5, #4]
   d6352:	f002 ffa4 	bl	d929e <_ZN7TwoWire6unlockEv>
}
   d6356:	4620      	mov	r0, r4
   d6358:	b007      	add	sp, #28
   d635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d635c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6360:	4905      	ldr	r1, [pc, #20]	; (d6378 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6362:	4803      	ldr	r0, [pc, #12]	; (d6370 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6364:	f7ff fb0d 	bl	d5982 <_ZNK5spark6Logger5errorEPKcz>
   d6368:	e7f1      	b.n	d634e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d636a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d636e:	e7f7      	b.n	d6360 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6370:	2003e5b8 	.word	0x2003e5b8
   d6374:	000db6ea 	.word	0x000db6ea
   d6378:	000db6f8 	.word	0x000db6f8

000d637c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d637c:	b513      	push	{r0, r1, r4, lr}
   d637e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6380:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6382:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6386:	f004 fd27 	bl	dadd8 <gmtime>
    return setRtcFromTm(tm, lock);
   d638a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d638e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6390:	4620      	mov	r0, r4
   d6392:	f7ff ffa7 	bl	d62e4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6396:	b002      	add	sp, #8
   d6398:	bd10      	pop	{r4, pc}
	...

000d639c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d639c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d639e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d63a0:	b089      	sub	sp, #36	; 0x24
   d63a2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d63a4:	bb75      	cbnz	r5, d6404 <_ZN6AB18054loopEv+0x68>
   d63a6:	f003 fd79 	bl	d9e9c <_ZN9TimeClass7isValidEv>
   d63aa:	b358      	cbz	r0, d6404 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d63ac:	2600      	movs	r6, #0
   d63ae:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d63b0:	a904      	add	r1, sp, #16
   d63b2:	4628      	mov	r0, r5
        tm = 0;
   d63b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d63b8:	f002 f990 	bl	d86dc <spark_sync_time_last>
   d63bc:	b310      	cbz	r0, d6404 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d63be:	2501      	movs	r5, #1
   d63c0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d63c2:	f003 fd88 	bl	d9ed6 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d63c6:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d63c8:	4602      	mov	r2, r0
   d63ca:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d63cc:	4620      	mov	r0, r4
        time_t time = Time.now();
   d63ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d63d2:	f7ff ffd3 	bl	d637c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d63d6:	a902      	add	r1, sp, #8
   d63d8:	4620      	mov	r0, r4
        time = 0;
   d63da:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d63de:	f7ff feed 	bl	d61bc <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d63e2:	4b12      	ldr	r3, [pc, #72]	; (d642c <_ZN6AB18054loopEv+0x90>)
   d63e4:	4912      	ldr	r1, [pc, #72]	; (d6430 <_ZN6AB18054loopEv+0x94>)
   d63e6:	681b      	ldr	r3, [r3, #0]
   d63e8:	9300      	str	r3, [sp, #0]
   d63ea:	a804      	add	r0, sp, #16
   d63ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d63f0:	f003 fd12 	bl	d9e18 <_ZN9TimeClass6formatExPKc>
   d63f4:	480f      	ldr	r0, [pc, #60]	; (d6434 <_ZN6AB18054loopEv+0x98>)
   d63f6:	9a04      	ldr	r2, [sp, #16]
   d63f8:	490f      	ldr	r1, [pc, #60]	; (d6438 <_ZN6AB18054loopEv+0x9c>)
   d63fa:	f7fd ff24 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
   d63fe:	a804      	add	r0, sp, #16
   d6400:	f003 f9ca 	bl	d9798 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6404:	6963      	ldr	r3, [r4, #20]
   d6406:	b173      	cbz	r3, d6426 <_ZN6AB18054loopEv+0x8a>
   d6408:	f001 fed4 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d640c:	6923      	ldr	r3, [r4, #16]
   d640e:	1ac0      	subs	r0, r0, r3
   d6410:	6963      	ldr	r3, [r4, #20]
   d6412:	4298      	cmp	r0, r3
   d6414:	d307      	bcc.n	d6426 <_ZN6AB18054loopEv+0x8a>
   d6416:	f001 fecd 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d641a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d641e:	6120      	str	r0, [r4, #16]
            setWDT();
   d6420:	4620      	mov	r0, r4
   d6422:	f7ff fbc3 	bl	d5bac <_ZN6AB18056setWDTEi>
}
   d6426:	b009      	add	sp, #36	; 0x24
   d6428:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d642a:	bf00      	nop
   d642c:	2003e18c 	.word	0x2003e18c
   d6430:	2003e650 	.word	0x2003e650
   d6434:	2003e5b8 	.word	0x2003e5b8
   d6438:	000db713 	.word	0x000db713

000d643c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d643c:	4b01      	ldr	r3, [pc, #4]	; (d6444 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d643e:	4a02      	ldr	r2, [pc, #8]	; (d6448 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6440:	601a      	str	r2, [r3, #0]
}
   d6442:	4770      	bx	lr
   d6444:	2003e5b8 	.word	0x2003e5b8
   d6448:	000db729 	.word	0x000db729

000d644c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d644c:	4770      	bx	lr

000d644e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d644e:	b510      	push	{r4, lr}
  }
   d6450:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d6452:	4604      	mov	r4, r0
  }
   d6454:	f004 f809 	bl	da46a <_ZdlPvj>
   d6458:	4620      	mov	r0, r4
   d645a:	bd10      	pop	{r4, pc}

000d645c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d645c:	b40e      	push	{r1, r2, r3}
   d645e:	b503      	push	{r0, r1, lr}
   d6460:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d6462:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6464:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d6468:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d646a:	f003 f8a0 	bl	d95ae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d646e:	b002      	add	sp, #8
   d6470:	f85d eb04 	ldr.w	lr, [sp], #4
   d6474:	b003      	add	sp, #12
   d6476:	4770      	bx	lr

000d6478 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d6478:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d647a:	4604      	mov	r4, r0
   d647c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d647e:	7922      	ldrb	r2, [r4, #4]
   d6480:	68a3      	ldr	r3, [r4, #8]
   d6482:	b132      	cbz	r2, d6492 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d6484:	b9a3      	cbnz	r3, d64b0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d6486:	490b      	ldr	r1, [pc, #44]	; (d64b4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d6488:	b002      	add	sp, #8
   d648a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d648e:	f003 b85d 	b.w	d954c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d6492:	4a09      	ldr	r2, [pc, #36]	; (d64b8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d6494:	7b26      	ldrb	r6, [r4, #12]
   d6496:	4d09      	ldr	r5, [pc, #36]	; (d64bc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d6498:	4909      	ldr	r1, [pc, #36]	; (d64c0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d649a:	7b64      	ldrb	r4, [r4, #13]
   d649c:	2e01      	cmp	r6, #1
   d649e:	bf18      	it	ne
   d64a0:	4629      	movne	r1, r5
   d64a2:	e9cd 1400 	strd	r1, r4, [sp]
   d64a6:	4907      	ldr	r1, [pc, #28]	; (d64c4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d64a8:	f7ff ffd8 	bl	d645c <_ZN5Print6printfEPKcz>
  }
   d64ac:	b002      	add	sp, #8
   d64ae:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d64b0:	4a05      	ldr	r2, [pc, #20]	; (d64c8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d64b2:	e7ef      	b.n	d6494 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d64b4:	000db75d 	.word	0x000db75d
   d64b8:	000db278 	.word	0x000db278
   d64bc:	000db759 	.word	0x000db759
   d64c0:	000db755 	.word	0x000db755
   d64c4:	000db773 	.word	0x000db773
   d64c8:	000db74c 	.word	0x000db74c

000d64cc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d64cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d64ce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d64d0:	4604      	mov	r4, r0
      if (_M_manager)
   d64d2:	b113      	cbz	r3, d64da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64d4:	2203      	movs	r2, #3
   d64d6:	4601      	mov	r1, r0
   d64d8:	4798      	blx	r3
    }
   d64da:	4620      	mov	r0, r4
   d64dc:	bd10      	pop	{r4, pc}

000d64de <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d64de:	6803      	ldr	r3, [r0, #0]
   d64e0:	b2c9      	uxtb	r1, r1
   d64e2:	689b      	ldr	r3, [r3, #8]
   d64e4:	4718      	bx	r3
	...

000d64e8 <_ZN16AssetTrackerBaseC1Ev>:
}

//
//
//
AssetTrackerBase::AssetTrackerBase() : LegacyAdapter(gps) {
   d64e8:	b538      	push	{r3, r4, r5, lr}
   d64ea:	f100 0508 	add.w	r5, r0, #8
   d64ee:	4604      	mov	r4, r0
   d64f0:	4629      	mov	r1, r5
   d64f2:	f000 fa59 	bl	d69a8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d64f6:	4b12      	ldr	r3, [pc, #72]	; (d6540 <_ZN16AssetTrackerBaseC1Ev+0x58>)
   d64f8:	6023      	str	r3, [r4, #0]
   d64fa:	4628      	mov	r0, r5
   d64fc:	2500      	movs	r5, #0
   d64fe:	f000 fa96 	bl	d6a2e <_ZN11TinyGPSPlusC1Ev>
   d6502:	f884 51a8 	strb.w	r5, [r4, #424]	; 0x1a8
   d6506:	f003 ff83 	bl	da410 <_Z19__fetch_global_Wirev>
   d650a:	2342      	movs	r3, #66	; 0x42
   d650c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
   d6510:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
   d6514:	f003 fd90 	bl	da038 <_Z22__fetch_global_Serial1v>
   d6518:	23ff      	movs	r3, #255	; 0xff
   d651a:	f8a4 31e4 	strh.w	r3, [r4, #484]	; 0x1e4
	instance = this;
   d651e:	4b09      	ldr	r3, [pc, #36]	; (d6544 <_ZN16AssetTrackerBaseC1Ev+0x5c>)
    _Function_base() : _M_manager(nullptr) { }
   d6520:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   d6524:	601c      	str	r4, [r3, #0]
AssetTrackerBase::AssetTrackerBase() : LegacyAdapter(gps) {
   d6526:	e9c4 056d 	strd	r0, r5, [r4, #436]	; 0x1b4
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d652a:	e9c4 5573 	strd	r5, r5, [r4, #460]	; 0x1cc
   d652e:	e9c4 5575 	strd	r5, r5, [r4, #468]	; 0x1d4
   d6532:	e9c4 5577 	strd	r5, r5, [r4, #476]	; 0x1dc
   d6536:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
}
   d653a:	4620      	mov	r0, r4
   d653c:	bd38      	pop	{r3, r4, r5, pc}
   d653e:	bf00      	nop
   d6540:	000db7dc 	.word	0x000db7dc
   d6544:	2003e5cc 	.word	0x2003e5cc

000d6548 <_ZN16AssetTrackerBase17startThreadedModeEv>:
		}
	}

}

void AssetTrackerBase::startThreadedMode() {
   d6548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d654a:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
void AssetTrackerBase::startThreadedMode() {
   d654e:	4607      	mov	r7, r0
	if (thread == NULL) {
   d6550:	2e00      	cmp	r6, #0
   d6552:	d139      	bne.n	d65c8 <_ZN16AssetTrackerBase17startThreadedModeEv+0x80>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6554:	2004      	movs	r0, #4
   d6556:	f7fd fd9e 	bl	d4096 <_Znwj>
   d655a:	4605      	mov	r5, r0
   d655c:	b390      	cbz	r0, d65c4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d655e:	491b      	ldr	r1, [pc, #108]	; (d65cc <_ZN16AssetTrackerBase17startThreadedModeEv+0x84>)
   d6560:	2014      	movs	r0, #20
   d6562:	f003 ff84 	bl	da46e <_ZnwjRKSt9nothrow_t>
   d6566:	b128      	cbz	r0, d6574 <_ZN16AssetTrackerBase17startThreadedModeEv+0x2c>
            exited(false) {
   d6568:	e9c0 6600 	strd	r6, r6, [r0]
   d656c:	e9c0 6602 	strd	r6, r6, [r0, #8]
   d6570:	7406      	strb	r6, [r0, #16]
   d6572:	7446      	strb	r6, [r0, #17]
      static_assert( !is_rvalue_reference<_Dp>::value,
		     "unique_ptr's deleter type must be a function object type"
		     " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6574:	6028      	str	r0, [r5, #0]
    {
        if (!d_) {
   d6576:	b1a0      	cbz	r0, d65a2 <_ZN16AssetTrackerBase17startThreadedModeEv+0x5a>
            goto error;
        }
        d_->func = function;
   d6578:	4b15      	ldr	r3, [pc, #84]	; (d65d0 <_ZN16AssetTrackerBase17startThreadedModeEv+0x88>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d657a:	4916      	ldr	r1, [pc, #88]	; (d65d4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x8c>)
        d_->func_param = function_param;
   d657c:	e9c0 3702 	strd	r3, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6580:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6584:	e9cd 0300 	strd	r0, r3, [sp]
   d6588:	2202      	movs	r2, #2
   d658a:	4b13      	ldr	r3, [pc, #76]	; (d65d8 <_ZN16AssetTrackerBase17startThreadedModeEv+0x90>)
   d658c:	3004      	adds	r0, #4
   d658e:	f001 fd99 	bl	d80c4 <os_thread_create>
   d6592:	b930      	cbnz	r0, d65a2 <_ZN16AssetTrackerBase17startThreadedModeEv+0x5a>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6594:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d6596:	7c1b      	ldrb	r3, [r3, #16]
   d6598:	b9a3      	cbnz	r3, d65c4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d659a:	2001      	movs	r0, #1
   d659c:	f001 fdfa 	bl	d8194 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d65a0:	e7f8      	b.n	d6594 <_ZN16AssetTrackerBase17startThreadedModeEv+0x4c>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65a2:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d65a4:	2300      	movs	r3, #0
   d65a6:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d65a8:	b164      	cbz	r4, d65c4 <_ZN16AssetTrackerBase17startThreadedModeEv+0x7c>
	if (__ptr != nullptr)
   d65aa:	6826      	ldr	r6, [r4, #0]
   d65ac:	b136      	cbz	r6, d65bc <_ZN16AssetTrackerBase17startThreadedModeEv+0x74>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65ae:	4630      	mov	r0, r6
   d65b0:	f7ff ff8c 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d65b4:	2110      	movs	r1, #16
   d65b6:	4630      	mov	r0, r6
   d65b8:	f003 ff57 	bl	da46a <_ZdlPvj>
   d65bc:	2114      	movs	r1, #20
   d65be:	4620      	mov	r0, r4
   d65c0:	f003 ff53 	bl	da46a <_ZdlPvj>
   d65c4:	f8c7 51b8 	str.w	r5, [r7, #440]	; 0x1b8
	}
}
   d65c8:	b003      	add	sp, #12
   d65ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65cc:	000dbb98 	.word	0x000dbb98
   d65d0:	000d6993 	.word	0x000d6993
   d65d4:	000db790 	.word	0x000db790
   d65d8:	000d678f 	.word	0x000d678f

000d65dc <_ZN16AssetTrackerBase7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTrackerBase &AssetTrackerBase::withI2C(TwoWire &wire, uint8_t addr) {
   d65dc:	b510      	push	{r4, lr}
	useWire = true;
   d65de:	2301      	movs	r3, #1
   d65e0:	f880 31a8 	strb.w	r3, [r0, #424]	; 0x1a8
	this->wire = wire;
   d65e4:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
AssetTrackerBase &AssetTrackerBase::withI2C(TwoWire &wire, uint8_t addr) {
   d65e8:	4604      	mov	r4, r0
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d65ea:	6848      	ldr	r0, [r1, #4]
class Print
   d65ec:	6058      	str	r0, [r3, #4]
   d65ee:	6888      	ldr	r0, [r1, #8]
   d65f0:	6098      	str	r0, [r3, #8]
   d65f2:	68c8      	ldr	r0, [r1, #12]
   d65f4:	60d8      	str	r0, [r3, #12]
class TwoWire : public Stream
   d65f6:	7c08      	ldrb	r0, [r1, #16]
   d65f8:	7418      	strb	r0, [r3, #16]
	this->wireAddr = addr;

	wire.begin();
   d65fa:	4608      	mov	r0, r1
	this->wireAddr = addr;
   d65fc:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
	wire.begin();
   d6600:	f002 fe0a 	bl	d9218 <_ZN7TwoWire5beginEv>

	return *this;
}
   d6604:	4620      	mov	r0, r4
   d6606:	bd10      	pop	{r4, pc}

000d6608 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv>:


uint16_t AssetTrackerBase::wireReadBytesAvailable() {
   d6608:	b538      	push	{r3, r4, r5, lr}
   d660a:	4604      	mov	r4, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d660c:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   d6610:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
   d6614:	f002 fe2f 	bl	d9276 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d6618:	21fd      	movs	r1, #253	; 0xfd
   d661a:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d661e:	f7ff ff5e 	bl	d64de <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d6622:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6626:	2100      	movs	r1, #0
   d6628:	f002 fe2c 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d662c:	b108      	cbz	r0, d6632 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x2a>
		// Log.info("wireReadBytesAvailable I2C error %u", res);
		return 0;
   d662e:	2000      	movs	r0, #0

	uint16_t available = wire.read() << 8;
	available |= wire.read();

	return available;
}
   d6630:	bd38      	pop	{r3, r4, r5, pc}
	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d6632:	f894 11b0 	ldrb.w	r1, [r4, #432]	; 0x1b0
   d6636:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d663a:	2301      	movs	r3, #1
   d663c:	2202      	movs	r2, #2
   d663e:	f002 fe08 	bl	d9252 <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d6642:	b2c0      	uxtb	r0, r0
   d6644:	2802      	cmp	r0, #2
   d6646:	d1f2      	bne.n	d662e <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x26>
	uint16_t available = wire.read() << 8;
   d6648:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d664c:	6803      	ldr	r3, [r0, #0]
   d664e:	695b      	ldr	r3, [r3, #20]
   d6650:	4798      	blx	r3
   d6652:	4605      	mov	r5, r0
	available |= wire.read();
   d6654:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   d6658:	6803      	ldr	r3, [r0, #0]
   d665a:	695b      	ldr	r3, [r3, #20]
   d665c:	4798      	blx	r3
   d665e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d6662:	b280      	uxth	r0, r0
	return available;
   d6664:	e7e4      	b.n	d6630 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv+0x28>

000d6666 <_ZN16AssetTrackerBase13wireReadBytesEPhj>:

int AssetTrackerBase::wireReadBytes(uint8_t *buf, size_t len) {
   d6666:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d666a:	4607      	mov	r7, r0
   d666c:	4688      	mov	r8, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d666e:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
   d6672:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
int AssetTrackerBase::wireReadBytes(uint8_t *buf, size_t len) {
   d6676:	4615      	mov	r5, r2
	wire.beginTransmission(wireAddr);
   d6678:	f002 fdfd 	bl	d9276 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d667c:	21ff      	movs	r1, #255	; 0xff
   d667e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d6682:	f7ff ff2c 	bl	d64de <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d6686:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d668a:	2100      	movs	r1, #0
   d668c:	f002 fdfa 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d6690:	b118      	cbz	r0, d669a <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x34>
		// Log.info("wireReadBytes I2C error %u", res);
		return -1;
   d6692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
 	}
	return len;
}
   d6696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t offset = 0;
   d669a:	4604      	mov	r4, r0
	while(offset < len) {
   d669c:	42a5      	cmp	r5, r4
   d669e:	d920      	bls.n	d66e2 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x7c>
		size_t reqLen = (len - offset);
   d66a0:	1b2e      	subs	r6, r5, r4
		if (reqLen > 32) {
   d66a2:	2e20      	cmp	r6, #32
   d66a4:	bf28      	it	cs
   d66a6:	2620      	movcs	r6, #32
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d66a8:	eb04 0906 	add.w	r9, r4, r6
   d66ac:	eba5 0209 	sub.w	r2, r5, r9
   d66b0:	4253      	negs	r3, r2
   d66b2:	4153      	adcs	r3, r2
   d66b4:	f897 11b0 	ldrb.w	r1, [r7, #432]	; 0x1b0
   d66b8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d66bc:	4632      	mov	r2, r6
   d66be:	f002 fdc8 	bl	d9252 <_ZN7TwoWire11requestFromEhjh>
		if (res != reqLen) {
   d66c2:	b2c0      	uxtb	r0, r0
   d66c4:	4286      	cmp	r6, r0
   d66c6:	d1e4      	bne.n	d6692 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x2c>
   d66c8:	4444      	add	r4, r8
   d66ca:	4426      	add	r6, r4
			buf[offset + ii] = wire.read();
   d66cc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
   d66d0:	6803      	ldr	r3, [r0, #0]
   d66d2:	695b      	ldr	r3, [r3, #20]
   d66d4:	4798      	blx	r3
   d66d6:	f804 0b01 	strb.w	r0, [r4], #1
		for(size_t ii = 0; ii < reqLen; ii++) {
   d66da:	42a6      	cmp	r6, r4
   d66dc:	d1f6      	bne.n	d66cc <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x66>
		offset += reqLen;
   d66de:	464c      	mov	r4, r9
   d66e0:	e7dc      	b.n	d669c <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x36>
	return len;
   d66e2:	4628      	mov	r0, r5
   d66e4:	e7d7      	b.n	d6696 <_ZN16AssetTrackerBase13wireReadBytesEPhj+0x30>
	...

000d66e8 <_ZN12AssetTrackerC1Ev>:


//
//
//
AssetTracker::AssetTracker() : AssetTrackerLIS3DH(&accel), accel(SPI, A2, WKP) {
   d66e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66ea:	4604      	mov	r4, r0
   d66ec:	f7ff fefc 	bl	d64e8 <_ZN16AssetTrackerBaseC1Ev>
   d66f0:	4b1c      	ldr	r3, [pc, #112]	; (d6764 <_ZN12AssetTrackerC1Ev+0x7c>)
   d66f2:	6023      	str	r3, [r4, #0]
   d66f4:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
   d66f8:	3310      	adds	r3, #16
   d66fa:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d66fe:	2108      	movs	r1, #8
AssetTrackerLIS3DH::AssetTrackerLIS3DH(LIS3DH *accel) : accel(accel) {
   d6700:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
   d6704:	f000 fe30 	bl	d7368 <_ZN6LIS3DHC1Ei>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6708:	4d17      	ldr	r5, [pc, #92]	; (d6768 <_ZN12AssetTrackerC1Ev+0x80>)
   d670a:	4b18      	ldr	r3, [pc, #96]	; (d676c <_ZN12AssetTrackerC1Ev+0x84>)
   d670c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
   d6710:	7829      	ldrb	r1, [r5, #0]
   d6712:	f3bf 8f5b 	dmb	ish
   d6716:	f011 0101 	ands.w	r1, r1, #1
   d671a:	d10b      	bne.n	d6734 <_ZN12AssetTrackerC1Ev+0x4c>
   d671c:	4628      	mov	r0, r5
   d671e:	9101      	str	r1, [sp, #4]
   d6720:	f7fd fcca 	bl	d40b8 <__cxa_guard_acquire>
   d6724:	9901      	ldr	r1, [sp, #4]
   d6726:	b128      	cbz	r0, d6734 <_ZN12AssetTrackerC1Ev+0x4c>
   d6728:	4811      	ldr	r0, [pc, #68]	; (d6770 <_ZN12AssetTrackerC1Ev+0x88>)
   d672a:	f002 ff8b 	bl	d9644 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d672e:	4628      	mov	r0, r5
   d6730:	f7fd fcc7 	bl	d40c2 <__cxa_guard_release>
   d6734:	4b0e      	ldr	r3, [pc, #56]	; (d6770 <_ZN12AssetTrackerC1Ev+0x88>)
   d6736:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   d673a:	2311      	movs	r3, #17
   d673c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
   d6740:	2300      	movs	r3, #0
      dataMode_{dataMode}
   d6742:	4a0c      	ldr	r2, [pc, #48]	; (d6774 <_ZN12AssetTrackerC1Ev+0x8c>)
   d6744:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
   d6748:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
   d674c:	4b0a      	ldr	r3, [pc, #40]	; (d6778 <_ZN12AssetTrackerC1Ev+0x90>)
   d674e:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
}
   d6752:	4620      	mov	r0, r4
   d6754:	2301      	movs	r3, #1
   d6756:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
   d675a:	f8a4 3218 	strh.w	r3, [r4, #536]	; 0x218
   d675e:	b003      	add	sp, #12
   d6760:	bd30      	pop	{r4, r5, pc}
   d6762:	bf00      	nop
   d6764:	000db7bc 	.word	0x000db7bc
   d6768:	2003e5c0 	.word	0x2003e5c0
   d676c:	000db83c 	.word	0x000db83c
   d6770:	2003e5c4 	.word	0x2003e5c4
   d6774:	000db7a8 	.word	0x000db7a8
   d6778:	00989680 	.word	0x00989680

000d677c <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d677c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d677e:	b510      	push	{r4, lr}
      if (_M_empty())
   d6780:	b90a      	cbnz	r2, d6786 <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
   d6782:	f003 fe78 	bl	da476 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d6786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d678a:	68c3      	ldr	r3, [r0, #12]
   d678c:	4718      	bx	r3

000d678e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d678e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6790:	2301      	movs	r3, #1
   d6792:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6794:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d6796:	4604      	mov	r4, r0
        if (th->func) {
   d6798:	b143      	cbz	r3, d67ac <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d679a:	68c0      	ldr	r0, [r0, #12]
   d679c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d679e:	2301      	movs	r3, #1
   d67a0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d67a2:	2000      	movs	r0, #0
    }
   d67a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d67a8:	f001 bcd4 	b.w	d8154 <os_thread_exit>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d67ac:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d67ae:	2800      	cmp	r0, #0
   d67b0:	d0f5      	beq.n	d679e <_ZN6Thread3runEPv+0x10>
            (*(th->wrapper))();
   d67b2:	f7ff ffe3 	bl	d677c <_ZNKSt8functionIFvvEEclEv>
   d67b6:	e7f2      	b.n	d679e <_ZN6Thread3runEPv+0x10>

000d67b8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d67b8:	b570      	push	{r4, r5, r6, lr}
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d67ba:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d67be:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d67c0:	42ae      	cmp	r6, r5
   d67c2:	d004      	beq.n	d67ce <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x16>
    class function<_Res(_ArgTypes...)>
   d67c4:	4628      	mov	r0, r5
   d67c6:	f7ff fe81 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
   d67ca:	3510      	adds	r5, #16
   d67cc:	e7f8      	b.n	d67c0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d67ce:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d67d0:	b108      	cbz	r0, d67d6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev+0x1e>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d67d2:	f7fd fc64 	bl	d409e <_ZdlPv>
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   d67d6:	4620      	mov	r0, r4
   d67d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67dc <_ZN16AssetTrackerBaseD1Ev>:
AssetTrackerBase::~AssetTrackerBase() {
   d67dc:	b510      	push	{r4, lr}
   d67de:	4b0e      	ldr	r3, [pc, #56]	; (d6818 <_ZN16AssetTrackerBaseD1Ev+0x3c>)
   d67e0:	6003      	str	r3, [r0, #0]
   d67e2:	4604      	mov	r4, r0
	if (mutex) {
   d67e4:	f8d0 01e8 	ldr.w	r0, [r0, #488]	; 0x1e8
   d67e8:	b120      	cbz	r0, d67f4 <_ZN16AssetTrackerBaseD1Ev+0x18>
		os_mutex_destroy(mutex);
   d67ea:	f001 fc8b 	bl	d8104 <os_mutex_destroy>
		mutex = 0;
   d67ee:	2300      	movs	r3, #0
   d67f0:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
AssetTrackerBase::~AssetTrackerBase() {
   d67f4:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   d67f8:	f7ff ffde 	bl	d67b8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
   d67fc:	f504 70e6 	add.w	r0, r4, #460	; 0x1cc
   d6800:	f7ff ffda 	bl	d67b8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
   d6804:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
   d6808:	f7ff fe60 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
   d680c:	4620      	mov	r0, r4
   d680e:	f000 f8c3 	bl	d6998 <_ZN13LegacyAdapterD1Ev>
}
   d6812:	4620      	mov	r0, r4
   d6814:	bd10      	pop	{r4, pc}
   d6816:	bf00      	nop
   d6818:	000db7dc 	.word	0x000db7dc

000d681c <_ZN16AssetTrackerBaseD0Ev>:
AssetTrackerBase::~AssetTrackerBase() {
   d681c:	b510      	push	{r4, lr}
   d681e:	4604      	mov	r4, r0
}
   d6820:	f7ff ffdc 	bl	d67dc <_ZN16AssetTrackerBaseD1Ev>
   d6824:	4620      	mov	r0, r4
   d6826:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   d682a:	f003 fe1e 	bl	da46a <_ZdlPvj>
   d682e:	4620      	mov	r0, r4
   d6830:	bd10      	pop	{r4, pc}
	...

000d6834 <_ZN12AssetTrackerD1Ev>:

AssetTracker::~AssetTracker() {
   d6834:	b510      	push	{r4, lr}
   d6836:	4b08      	ldr	r3, [pc, #32]	; (d6858 <_ZN12AssetTrackerD1Ev+0x24>)
   d6838:	f103 0208 	add.w	r2, r3, #8
   d683c:	3318      	adds	r3, #24
   d683e:	4604      	mov	r4, r0
   d6840:	6002      	str	r2, [r0, #0]
   d6842:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
   d6846:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   d684a:	f000 fd2d 	bl	d72a8 <_ZN9LIS3DHSPID1Ev>
   d684e:	4620      	mov	r0, r4
   d6850:	f7ff ffc4 	bl	d67dc <_ZN16AssetTrackerBaseD1Ev>

}
   d6854:	4620      	mov	r0, r4
   d6856:	bd10      	pop	{r4, pc}
   d6858:	000db7b4 	.word	0x000db7b4

000d685c <_ZThn492_N12AssetTrackerD1Ev>:
	AssetTracker();

	/**
	 * @brief Destructor
	 */
	virtual ~AssetTracker();
   d685c:	f5a0 70f6 	sub.w	r0, r0, #492	; 0x1ec
   d6860:	f7ff bfe8 	b.w	d6834 <_ZN12AssetTrackerD1Ev>

000d6864 <_ZN12AssetTrackerD0Ev>:
AssetTracker::~AssetTracker() {
   d6864:	b510      	push	{r4, lr}
   d6866:	4604      	mov	r4, r0
}
   d6868:	f7ff ffe4 	bl	d6834 <_ZN12AssetTrackerD1Ev>
   d686c:	4620      	mov	r0, r4
   d686e:	f44f 7107 	mov.w	r1, #540	; 0x21c
   d6872:	f003 fdfa 	bl	da46a <_ZdlPvj>
   d6876:	4620      	mov	r0, r4
   d6878:	bd10      	pop	{r4, pc}

000d687a <_ZThn492_N12AssetTrackerD0Ev>:
   d687a:	f5a0 70f6 	sub.w	r0, r0, #492	; 0x1ec
   d687e:	f7ff bff1 	b.w	d6864 <_ZN12AssetTrackerD0Ev>

000d6882 <_ZNKSt8functionIFbcEEclEc>:
    function<_Res(_ArgTypes...)>::
   d6882:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d6884:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6886:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
   d688a:	b90a      	cbnz	r2, d6890 <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d688c:	f003 fdf3 	bl	da476 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6890:	68c3      	ldr	r3, [r0, #12]
   d6892:	f10d 0107 	add.w	r1, sp, #7
   d6896:	4798      	blx	r3
    }
   d6898:	b003      	add	sp, #12
   d689a:	f85d fb04 	ldr.w	pc, [sp], #4

000d689e <_ZN16AssetTrackerBase9updateGPSEv>:
void AssetTrackerBase::updateGPS(void) {
   d689e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
   d68a2:	f890 71a8 	ldrb.w	r7, [r0, #424]	; 0x1a8
void AssetTrackerBase::updateGPS(void) {
   d68a6:	b08a      	sub	sp, #40	; 0x28
   d68a8:	4604      	mov	r4, r0
	if (!useWire) {
   d68aa:	b9ff      	cbnz	r7, d68ec <_ZN16AssetTrackerBase9updateGPSEv+0x4e>
			hasSentence |= gps.encode(c);
   d68ac:	f100 0608 	add.w	r6, r0, #8
				externalDecoder(c);
   d68b0:	f500 75de 	add.w	r5, r0, #444	; 0x1bc
		while (serialPort.available() > 0) {
   d68b4:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
   d68b8:	6803      	ldr	r3, [r0, #0]
   d68ba:	691b      	ldr	r3, [r3, #16]
   d68bc:	4798      	blx	r3
   d68be:	2800      	cmp	r0, #0
   d68c0:	dd45      	ble.n	d694e <_ZN16AssetTrackerBase9updateGPSEv+0xb0>
			char c = (char)serialPort.read();
   d68c2:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
   d68c6:	6803      	ldr	r3, [r0, #0]
   d68c8:	695b      	ldr	r3, [r3, #20]
   d68ca:	4798      	blx	r3
   d68cc:	b2c1      	uxtb	r1, r0
			hasSentence |= gps.encode(c);
   d68ce:	4630      	mov	r0, r6
   d68d0:	9101      	str	r1, [sp, #4]
   d68d2:	f000 fb47 	bl	d6f64 <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d68d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			hasSentence |= gps.encode(c);
   d68da:	4338      	orrs	r0, r7
   d68dc:	b2c7      	uxtb	r7, r0
			if (externalDecoder) {
   d68de:	2b00      	cmp	r3, #0
   d68e0:	d0e8      	beq.n	d68b4 <_ZN16AssetTrackerBase9updateGPSEv+0x16>
				externalDecoder(c);
   d68e2:	9901      	ldr	r1, [sp, #4]
   d68e4:	4628      	mov	r0, r5
   d68e6:	f7ff ffcc 	bl	d6882 <_ZNKSt8functionIFbcEEclEc>
   d68ea:	e7e3      	b.n	d68b4 <_ZN16AssetTrackerBase9updateGPSEv+0x16>
		WITH_LOCK(wire) {
   d68ec:	f8d0 81ac 	ldr.w	r8, [r0, #428]	; 0x1ac
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d68f0:	4640      	mov	r0, r8
   d68f2:	f002 fccb 	bl	d928c <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d68f6:	4620      	mov	r0, r4
   d68f8:	f7ff fe86 	bl	d6608 <_ZN16AssetTrackerBase22wireReadBytesAvailableEv>
			if (available > 32) {
   d68fc:	2820      	cmp	r0, #32
			uint16_t available = wireReadBytesAvailable();
   d68fe:	4606      	mov	r6, r0
			if (available > 32) {
   d6900:	d802      	bhi.n	d6908 <_ZN16AssetTrackerBase9updateGPSEv+0x6a>
			if (available > 0) {
   d6902:	b910      	cbnz	r0, d690a <_ZN16AssetTrackerBase9updateGPSEv+0x6c>
	bool hasSentence = false;
   d6904:	2700      	movs	r7, #0
   d6906:	e01f      	b.n	d6948 <_ZN16AssetTrackerBase9updateGPSEv+0xaa>
				available = 32;
   d6908:	2620      	movs	r6, #32
				if (wireReadBytes(buf, available) == available) {
   d690a:	4632      	mov	r2, r6
   d690c:	a902      	add	r1, sp, #8
   d690e:	4620      	mov	r0, r4
   d6910:	f7ff fea9 	bl	d6666 <_ZN16AssetTrackerBase13wireReadBytesEPhj>
   d6914:	42b0      	cmp	r0, r6
   d6916:	d1f5      	bne.n	d6904 <_ZN16AssetTrackerBase9updateGPSEv+0x66>
   d6918:	ad02      	add	r5, sp, #8
   d691a:	442e      	add	r6, r5
	bool hasSentence = false;
   d691c:	2700      	movs	r7, #0
						hasSentence |= gps.encode(buf[ii]);
   d691e:	f104 0908 	add.w	r9, r4, #8
							externalDecoder(buf[ii]);
   d6922:	f504 7ade 	add.w	sl, r4, #444	; 0x1bc
						hasSentence |= gps.encode(buf[ii]);
   d6926:	f815 1b01 	ldrb.w	r1, [r5], #1
   d692a:	4648      	mov	r0, r9
   d692c:	f000 fb1a 	bl	d6f64 <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d6930:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
						hasSentence |= gps.encode(buf[ii]);
   d6934:	4338      	orrs	r0, r7
   d6936:	b2c7      	uxtb	r7, r0
						if (externalDecoder) {
   d6938:	b123      	cbz	r3, d6944 <_ZN16AssetTrackerBase9updateGPSEv+0xa6>
							externalDecoder(buf[ii]);
   d693a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   d693e:	4650      	mov	r0, sl
   d6940:	f7ff ff9f 	bl	d6882 <_ZNKSt8functionIFbcEEclEc>
					for(uint16_t ii = 0; ii < available; ii++) {
   d6944:	42b5      	cmp	r5, r6
   d6946:	d1ee      	bne.n	d6926 <_ZN16AssetTrackerBase9updateGPSEv+0x88>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d6948:	4640      	mov	r0, r8
   d694a:	f002 fca8 	bl	d929e <_ZN7TwoWire6unlockEv>
	if (hasSentence) {
   d694e:	b157      	cbz	r7, d6966 <_ZN16AssetTrackerBase9updateGPSEv+0xc8>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d6950:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
		for(auto it = sentenceCallbacks.begin(); it != sentenceCallbacks.end(); it++) {
   d6954:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   d6958:	429d      	cmp	r5, r3
   d695a:	d004      	beq.n	d6966 <_ZN16AssetTrackerBase9updateGPSEv+0xc8>
			(*it)();
   d695c:	4628      	mov	r0, r5
   d695e:	f7ff ff0d 	bl	d677c <_ZNKSt8functionIFvvEEclEv>
   d6962:	3510      	adds	r5, #16
	return *this;
      }

      __normal_iterator
      operator++(int) _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current++); }
   d6964:	e7f6      	b.n	d6954 <_ZN16AssetTrackerBase9updateGPSEv+0xb6>
}
   d6966:	b00a      	add	sp, #40	; 0x28
   d6968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d696c <_ZN16AssetTrackerBase14threadFunctionEv>:
void AssetTrackerBase::threadFunction() {
   d696c:	b538      	push	{r3, r4, r5, lr}
   d696e:	4604      	mov	r4, r0
		updateGPS();
   d6970:	4620      	mov	r0, r4
   d6972:	f7ff ff94 	bl	d689e <_ZN16AssetTrackerBase9updateGPSEv>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d6976:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
		for(auto it = threadCallbacks.begin(); it != threadCallbacks.end(); it++) {
   d697a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   d697e:	429d      	cmp	r5, r3
   d6980:	d004      	beq.n	d698c <_ZN16AssetTrackerBase14threadFunctionEv+0x20>
			(*it)();
   d6982:	4628      	mov	r0, r5
   d6984:	f7ff fefa 	bl	d677c <_ZNKSt8functionIFvvEEclEv>
   d6988:	3510      	adds	r5, #16
      { return __normal_iterator(_M_current++); }
   d698a:	e7f6      	b.n	d697a <_ZN16AssetTrackerBase14threadFunctionEv+0xe>
		os_thread_yield();
   d698c:	f001 fba2 	bl	d80d4 <os_thread_yield>
	}
   d6990:	e7ee      	b.n	d6970 <_ZN16AssetTrackerBase14threadFunctionEv+0x4>

000d6992 <_ZN16AssetTrackerBase20threadFunctionStaticEPv>:
void AssetTrackerBase::threadFunctionStatic(void *param) {
   d6992:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d6994:	f7ff ffea 	bl	d696c <_ZN16AssetTrackerBase14threadFunctionEv>

000d6998 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d6998:	4770      	bx	lr

000d699a <_ZN13LegacyAdapterD0Ev>:
LegacyAdapter::~LegacyAdapter() {
   d699a:	b510      	push	{r4, lr}
}
   d699c:	2108      	movs	r1, #8
LegacyAdapter::~LegacyAdapter() {
   d699e:	4604      	mov	r4, r0
}
   d69a0:	f003 fd63 	bl	da46a <_ZdlPvj>
   d69a4:	4620      	mov	r0, r4
   d69a6:	bd10      	pop	{r4, pc}

000d69a8 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:
LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d69a8:	4a01      	ldr	r2, [pc, #4]	; (d69b0 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d69aa:	e9c0 2100 	strd	r2, r1, [r0]
}
   d69ae:	4770      	bx	lr
   d69b0:	000db7ec 	.word	0x000db7ec

000d69b4 <_ZN11TinyGPSDataC1Ev>:
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69b4:	2200      	movs	r2, #0
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d69b6:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d69ba:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d69be:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   d69c2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69c6:	8002      	strh	r2, [r0, #0]
	RawDegrees() : deg(0), billionths(0), negative(false)
   d69c8:	8082      	strh	r2, [r0, #4]
   d69ca:	6082      	str	r2, [r0, #8]
   d69cc:	7302      	strb	r2, [r0, #12]
   d69ce:	8202      	strh	r2, [r0, #16]
   d69d0:	6142      	str	r2, [r0, #20]
   d69d2:	7602      	strb	r2, [r0, #24]
   d69d4:	8382      	strh	r2, [r0, #28]
   d69d6:	6202      	str	r2, [r0, #32]
   d69d8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d69dc:	8502      	strh	r2, [r0, #40]	; 0x28
   d69de:	62c2      	str	r2, [r0, #44]	; 0x2c
   d69e0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d69e4:	6342      	str	r2, [r0, #52]	; 0x34
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d69e6:	8702      	strh	r2, [r0, #56]	; 0x38
   d69e8:	6442      	str	r2, [r0, #68]	; 0x44
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d69ea:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d69ee:	6542      	str	r2, [r0, #84]	; 0x54
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d69f0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d69f4:	6642      	str	r2, [r0, #100]	; 0x64
   d69f6:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d69fa:	6742      	str	r2, [r0, #116]	; 0x74
   d69fc:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d6a00:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   d6a04:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a08:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a0c:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   d6a10:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d6a14:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d6a18:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a1c:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d6a20:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d6a24:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
   d6a28:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
class TinyGPSData {
   d6a2c:	4770      	bx	lr

000d6a2e <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d6a2e:	b510      	push	{r4, lr}
   d6a30:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d6a32:	f7ff ffbf 	bl	d69b4 <_ZN11TinyGPSDataC1Ev>
   d6a36:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d6a3a:	f7ff ffbb 	bl	d69b4 <_ZN11TinyGPSDataC1Ev>
   d6a3e:	2302      	movs	r3, #2
   d6a40:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
   d6a44:	2300      	movs	r3, #0
   d6a46:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
   d6a4a:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
   d6a4e:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
   d6a52:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
   d6a56:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d6a5a:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
{
  term[0] = '\0';
   d6a5e:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d6a62:	4620      	mov	r0, r4
   d6a64:	bd10      	pop	{r4, pc}

000d6a66 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d6a66:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d6a6a:	2b05      	cmp	r3, #5
   d6a6c:	d802      	bhi.n	d6a74 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d6a6e:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d6a72:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d6a74:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d6a78:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d6a7a:	bf94      	ite	ls
   d6a7c:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d6a80:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d6a84:	4770      	bx	lr

000d6a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d6a86:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d6a88:	7805      	ldrb	r5, [r0, #0]
{
   d6a8a:	4604      	mov	r4, r0
  if (negative) ++term;
   d6a8c:	2d2d      	cmp	r5, #45	; 0x2d
   d6a8e:	bf08      	it	eq
   d6a90:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d6a92:	4620      	mov	r0, r4
   d6a94:	f004 f98e 	bl	dadb4 <atol>
   d6a98:	2364      	movs	r3, #100	; 0x64
   d6a9a:	4358      	muls	r0, r3
   d6a9c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d6a9e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6aa2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d6aa6:	2909      	cmp	r1, #9
   d6aa8:	d9f8      	bls.n	d6a9c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d6aaa:	2b2e      	cmp	r3, #46	; 0x2e
   d6aac:	d10b      	bne.n	d6ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d6aae:	7853      	ldrb	r3, [r2, #1]
   d6ab0:	3b30      	subs	r3, #48	; 0x30
   d6ab2:	2b09      	cmp	r3, #9
   d6ab4:	d807      	bhi.n	d6ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d6ab6:	210a      	movs	r1, #10
   d6ab8:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d6abc:	7893      	ldrb	r3, [r2, #2]
   d6abe:	3b30      	subs	r3, #48	; 0x30
   d6ac0:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d6ac2:	bf98      	it	ls
   d6ac4:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d6ac6:	2d2d      	cmp	r5, #45	; 0x2d
   d6ac8:	bf08      	it	eq
   d6aca:	4240      	negeq	r0, r0
}
   d6acc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d6ad0:	b538      	push	{r3, r4, r5, lr}
   d6ad2:	460d      	mov	r5, r1
   d6ad4:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d6ad6:	f004 f96d 	bl	dadb4 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d6ada:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6adc:	4b13      	ldr	r3, [pc, #76]	; (d6b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d6ade:	fbb0 f1f2 	udiv	r1, r0, r2
   d6ae2:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d6ae6:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d6ae8:	8029      	strh	r1, [r5, #0]
   d6aea:	4620      	mov	r0, r4

  while (isdigit(*term))
   d6aec:	7802      	ldrb	r2, [r0, #0]
   d6aee:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d6af2:	2c09      	cmp	r4, #9
   d6af4:	4601      	mov	r1, r0
   d6af6:	f100 0001 	add.w	r0, r0, #1
   d6afa:	d9f7      	bls.n	d6aec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d6afc:	2a2e      	cmp	r2, #46	; 0x2e
   d6afe:	d10b      	bne.n	d6b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d6b00:	480a      	ldr	r0, [pc, #40]	; (d6b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d6b02:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d6b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6b08:	3a30      	subs	r2, #48	; 0x30
   d6b0a:	2a09      	cmp	r2, #9
   d6b0c:	d804      	bhi.n	d6b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d6b0e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d6b12:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d6b16:	e7f5      	b.n	d6b04 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d6b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6b1c:	3301      	adds	r3, #1
   d6b1e:	2203      	movs	r2, #3
   d6b20:	fbb3 f3f2 	udiv	r3, r3, r2
   d6b24:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d6b26:	2300      	movs	r3, #0
   d6b28:	722b      	strb	r3, [r5, #8]
}
   d6b2a:	bd38      	pop	{r3, r4, r5, pc}
   d6b2c:	00989680 	.word	0x00989680

000d6b30 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d6b30:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d6b32:	4603      	mov	r3, r0
{
   d6b34:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d6b36:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d6b3a:	6042      	str	r2, [r0, #4]
   d6b3c:	685a      	ldr	r2, [r3, #4]
   d6b3e:	6082      	str	r2, [r0, #8]
   d6b40:	7a1b      	ldrb	r3, [r3, #8]
   d6b42:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d6b44:	4603      	mov	r3, r0
   d6b46:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d6b4a:	6102      	str	r2, [r0, #16]
   d6b4c:	685a      	ldr	r2, [r3, #4]
   d6b4e:	6142      	str	r2, [r0, #20]
   d6b50:	7a1b      	ldrb	r3, [r3, #8]
   d6b52:	7603      	strb	r3, [r0, #24]
   d6b54:	f001 fb2e 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6b58:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6b5c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d6b5e:	8023      	strh	r3, [r4, #0]
}
   d6b60:	bd10      	pop	{r4, pc}
   d6b62:	0000      	movs	r0, r0
   d6b64:	0000      	movs	r0, r0
	...

000d6b68 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d6b68:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6b6a:	2300      	movs	r3, #0
{
   d6b6c:	4604      	mov	r4, r0
   updated = false;
   d6b6e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d6b70:	6880      	ldr	r0, [r0, #8]
   d6b72:	f003 fdc5 	bl	da700 <__aeabi_ui2d>
   d6b76:	a30c      	add	r3, pc, #48	; (adr r3, d6ba8 <_ZN15TinyGPSLocation3latEv+0x40>)
   d6b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b7c:	f003 ff64 	bl	daa48 <__aeabi_ddiv>
   d6b80:	4606      	mov	r6, r0
   d6b82:	88a0      	ldrh	r0, [r4, #4]
   d6b84:	460f      	mov	r7, r1
   d6b86:	f003 fdcb 	bl	da720 <__aeabi_i2d>
   d6b8a:	460b      	mov	r3, r1
   d6b8c:	4602      	mov	r2, r0
   d6b8e:	4639      	mov	r1, r7
   d6b90:	4630      	mov	r0, r6
   d6b92:	f003 fc79 	bl	da488 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d6b96:	7b23      	ldrb	r3, [r4, #12]
   d6b98:	b113      	cbz	r3, d6ba0 <_ZN15TinyGPSLocation3latEv+0x38>
   d6b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6b9e:	4619      	mov	r1, r3
}
   d6ba0:	ec41 0b10 	vmov	d0, r0, r1
   d6ba4:	bdd0      	pop	{r4, r6, r7, pc}
   d6ba6:	bf00      	nop
   d6ba8:	00000000 	.word	0x00000000
   d6bac:	41cdcd65 	.word	0x41cdcd65

000d6bb0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d6bb0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d6bb2:	2300      	movs	r3, #0
{
   d6bb4:	4604      	mov	r4, r0
   updated = false;
   d6bb6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d6bb8:	6940      	ldr	r0, [r0, #20]
   d6bba:	f003 fda1 	bl	da700 <__aeabi_ui2d>
   d6bbe:	a30c      	add	r3, pc, #48	; (adr r3, d6bf0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d6bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6bc4:	f003 ff40 	bl	daa48 <__aeabi_ddiv>
   d6bc8:	4606      	mov	r6, r0
   d6bca:	8a20      	ldrh	r0, [r4, #16]
   d6bcc:	460f      	mov	r7, r1
   d6bce:	f003 fda7 	bl	da720 <__aeabi_i2d>
   d6bd2:	460b      	mov	r3, r1
   d6bd4:	4602      	mov	r2, r0
   d6bd6:	4639      	mov	r1, r7
   d6bd8:	4630      	mov	r0, r6
   d6bda:	f003 fc55 	bl	da488 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d6bde:	7e23      	ldrb	r3, [r4, #24]
   d6be0:	b113      	cbz	r3, d6be8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d6be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6be6:	4619      	mov	r1, r3
}
   d6be8:	ec41 0b10 	vmov	d0, r0, r1
   d6bec:	bdd0      	pop	{r4, r6, r7, pc}
   d6bee:	bf00      	nop
   d6bf0:	00000000 	.word	0x00000000
   d6bf4:	41cdcd65 	.word	0x41cdcd65

000d6bf8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d6bf8:	b510      	push	{r4, lr}
   date = newDate;
   d6bfa:	6883      	ldr	r3, [r0, #8]
   d6bfc:	6043      	str	r3, [r0, #4]
{
   d6bfe:	4604      	mov	r4, r0
   d6c00:	f001 fad8 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c04:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c08:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6c0a:	8023      	strh	r3, [r4, #0]
}
   d6c0c:	bd10      	pop	{r4, pc}

000d6c0e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d6c0e:	b510      	push	{r4, lr}
   time = newTime;
   d6c10:	6883      	ldr	r3, [r0, #8]
   d6c12:	6043      	str	r3, [r0, #4]
{
   d6c14:	4604      	mov	r4, r0
   d6c16:	f001 facd 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c1a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c1e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d6c20:	8023      	strh	r3, [r4, #0]
}
   d6c22:	bd10      	pop	{r4, pc}

000d6c24 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d6c24:	b510      	push	{r4, lr}
   d6c26:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d6c28:	4608      	mov	r0, r1
   d6c2a:	f7ff ff2c 	bl	d6a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6c2e:	60a0      	str	r0, [r4, #8]
}
   d6c30:	bd10      	pop	{r4, pc}

000d6c32 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d6c32:	b510      	push	{r4, lr}
   d6c34:	4604      	mov	r4, r0
   newDate = atol(term);
   d6c36:	4608      	mov	r0, r1
   d6c38:	f004 f8bc 	bl	dadb4 <atol>
   d6c3c:	60a0      	str	r0, [r4, #8]
}
   d6c3e:	bd10      	pop	{r4, pc}

000d6c40 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d6c40:	b510      	push	{r4, lr}
   val = newval;
   d6c42:	68c3      	ldr	r3, [r0, #12]
   d6c44:	6083      	str	r3, [r0, #8]
{
   d6c46:	4604      	mov	r4, r0
   d6c48:	f001 fab4 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c4c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c50:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6c52:	8023      	strh	r3, [r4, #0]
}
   d6c54:	bd10      	pop	{r4, pc}

000d6c56 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d6c56:	b510      	push	{r4, lr}
   d6c58:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d6c5a:	4608      	mov	r0, r1
   d6c5c:	f7ff ff13 	bl	d6a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d6c60:	60e0      	str	r0, [r4, #12]
}
   d6c62:	bd10      	pop	{r4, pc}

000d6c64 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d6c64:	b510      	push	{r4, lr}
   val = newval;
   d6c66:	68c3      	ldr	r3, [r0, #12]
   d6c68:	6083      	str	r3, [r0, #8]
{
   d6c6a:	4604      	mov	r4, r0
   d6c6c:	f001 faa2 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c70:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c74:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d6c76:	8023      	strh	r3, [r4, #0]
}
   d6c78:	bd10      	pop	{r4, pc}

000d6c7a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d6c7a:	b510      	push	{r4, lr}
   d6c7c:	4604      	mov	r4, r0
   newval = atol(term);
   d6c7e:	4608      	mov	r0, r1
   d6c80:	f004 f898 	bl	dadb4 <atol>
   d6c84:	60e0      	str	r0, [r4, #12]
}
   d6c86:	bd10      	pop	{r4, pc}

000d6c88 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6c88:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d6c8a:	4601      	mov	r1, r0
{
   d6c8c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d6c8e:	3010      	adds	r0, #16
   d6c90:	f004 f912 	bl	daeb8 <strcpy>
   d6c94:	f001 fa8e 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6c98:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6c9c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6c9e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d6ca0:	bd10      	pop	{r4, pc}

000d6ca2 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d6ca2:	2210      	movs	r2, #16
   d6ca4:	f004 b935 	b.w	daf12 <strncpy>

000d6ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d6ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d6caa:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
{
   d6cae:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d6cb0:	2d00      	cmp	r5, #0
   d6cb2:	f000 8088 	beq.w	d6dc6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6cb6:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d6cba:	f7ff fed4 	bl	d6a66 <_ZN11TinyGPSPlus7fromHexEc>
   d6cbe:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d6cc2:	4602      	mov	r2, r0
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff fece 	bl	d6a66 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6cca:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6cce:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d6cd2:	b2c0      	uxtb	r0, r0
   d6cd4:	4283      	cmp	r3, r0
   d6cd6:	d16e      	bne.n	d6db6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      passedChecksumCount++;
   d6cd8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d6cdc:	3301      	adds	r3, #1
   d6cde:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d6ce2:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6ce6:	b123      	cbz	r3, d6cf2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d6ce8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d6cec:	3301      	adds	r3, #1
   d6cee:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
      switch(curSentenceType)
   d6cf2:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d6cf6:	b3e3      	cbz	r3, d6d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xca>
   d6cf8:	2b01      	cmp	r3, #1
   d6cfa:	d12b      	bne.n	d6d54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
    	tempData.date.commit();
   d6cfc:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d6d00:	f7ff ff7a 	bl	d6bf8 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d6d04:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6d08:	f7ff ff81 	bl	d6c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6d0c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6d10:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6d14:	b15b      	cbz	r3, d6d2e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x86>
           tempData.location.commit();
   d6d16:	4630      	mov	r0, r6
   d6d18:	f7ff ff0a 	bl	d6b30 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d6d1c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d6d20:	f7ff ff8e 	bl	d6c40 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d6d24:	f504 7090 	add.w	r0, r4, #288	; 0x120
        tempData.hdop.commit();
   d6d28:	f7ff ff8a 	bl	d6c40 <_ZN14TinyGPSDecimal6commitEv>
   d6d2c:	e005      	b.n	d6d3a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
	void invalidate() { valid = false; }
   d6d2e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6d32:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d6d36:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        os_thread_scheduling(false, NULL);
   d6d3a:	2100      	movs	r1, #0
   d6d3c:	4608      	mov	r0, r1
   d6d3e:	f001 f9d1 	bl	d80e4 <os_thread_scheduling>
        	TinyGPSData::operator=(tempData);
   d6d42:	4631      	mov	r1, r6
   d6d44:	22b8      	movs	r2, #184	; 0xb8
   d6d46:	4620      	mov	r0, r4
   d6d48:	f004 f858 	bl	dadfc <memcpy>
        os_thread_scheduling(true, NULL);
   d6d4c:	2100      	movs	r1, #0
   d6d4e:	2001      	movs	r0, #1
   d6d50:	f001 f9c8 	bl	d80e4 <os_thread_scheduling>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6d54:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d6d58:	b39e      	cbz	r6, d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6d5a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d6d5e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6d60:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6d62:	f004 f89f 	bl	daea4 <strcmp>
   d6d66:	bb60      	cbnz	r0, d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
         p->commit();
   d6d68:	4630      	mov	r0, r6
   d6d6a:	f7ff ff8d 	bl	d6c88 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d6d6e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6d70:	e7f2      	b.n	d6d58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        tempData.time.commit();
   d6d72:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6d76:	f7ff ff4a 	bl	d6c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6d7a:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6d7e:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d6d82:	b18b      	cbz	r3, d6da8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
          tempData.location.commit();
   d6d84:	4630      	mov	r0, r6
   d6d86:	f7ff fed3 	bl	d6b30 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d6d8a:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d6d8e:	f7ff ff57 	bl	d6c40 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d6d92:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d6d96:	f7ff ff53 	bl	d6c40 <_ZN14TinyGPSDecimal6commitEv>
        tempData.satellites.commit();
   d6d9a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d6d9e:	f7ff ff61 	bl	d6c64 <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d6da2:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d6da6:	e7bf      	b.n	d6d28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
	void invalidate() { valid = false; }
   d6da8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6dac:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d6db0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
   d6db4:	e7f1      	b.n	d6d9a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      ++failedChecksumCount;
   d6db6:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d6dba:	3301      	adds	r3, #1
   d6dbc:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    return false;
   d6dc0:	2500      	movs	r5, #0
}
   d6dc2:	4628      	mov	r0, r5
   d6dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d6dc6:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d6dca:	bb6a      	cbnz	r2, d6e28 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x180>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d6dcc:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d6dd0:	4960      	ldr	r1, [pc, #384]	; (d6f54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>)
   d6dd2:	4630      	mov	r0, r6
   d6dd4:	f004 f866 	bl	daea4 <strcmp>
   d6dd8:	b120      	cbz	r0, d6de4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
   d6dda:	495f      	ldr	r1, [pc, #380]	; (d6f58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d6ddc:	4630      	mov	r0, r6
   d6dde:	f004 f861 	bl	daea4 <strcmp>
   d6de2:	b998      	cbnz	r0, d6e0c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x164>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d6de4:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d6de6:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d6dea:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d6dee:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6df2:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d6df6:	2f00      	cmp	r7, #0
   d6df8:	d0e3      	beq.n	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d6dfc:	4631      	mov	r1, r6
   d6dfe:	f004 f851 	bl	daea4 <strcmp>
   d6e02:	2800      	cmp	r0, #0
   d6e04:	f280 809f 	bge.w	d6f46 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29e>
   d6e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d6e0a:	e7f0      	b.n	d6dee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d6e0c:	4953      	ldr	r1, [pc, #332]	; (d6f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d6e0e:	4630      	mov	r0, r6
   d6e10:	f004 f848 	bl	daea4 <strcmp>
   d6e14:	b120      	cbz	r0, d6e20 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x178>
   d6e16:	4952      	ldr	r1, [pc, #328]	; (d6f60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d6e18:	4630      	mov	r0, r6
   d6e1a:	f004 f843 	bl	daea4 <strcmp>
   d6e1e:	b908      	cbnz	r0, d6e24 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d6e20:	2300      	movs	r3, #0
   d6e22:	e7e0      	b.n	d6de6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
      curSentenceType = GPS_SENTENCE_OTHER;
   d6e24:	2302      	movs	r3, #2
   d6e26:	e7de      	b.n	d6de6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d6e28:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d6e2c:	2902      	cmp	r1, #2
   d6e2e:	d024      	beq.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6e30:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d6e34:	b30b      	cbz	r3, d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
    switch(COMBINE(curSentenceType, curTermNumber))
   d6e36:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d6e3a:	3a01      	subs	r2, #1
   d6e3c:	2a28      	cmp	r2, #40	; 0x28
   d6e3e:	d81c      	bhi.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d6e40:	e8df f002 	tbb	[pc, r2]
   d6e44:	4a433c15 	.word	0x4a433c15
   d6e48:	726b664d 	.word	0x726b664d
   d6e4c:	1b7c1b77 	.word	0x1b7c1b77
   d6e50:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e54:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e58:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e5c:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e60:	1b1b1b1b 	.word	0x1b1b1b1b
   d6e64:	433c3515 	.word	0x433c3515
   d6e68:	5b544d4a 	.word	0x5b544d4a
   d6e6c:	60          	.byte	0x60
   d6e6d:	00          	.byte	0x00
	  tempData.time.setTime(term);
   d6e6e:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6e72:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d6e76:	f7ff fed5 	bl	d6c24 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6e7a:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
         p->set(term);
   d6e7e:	f504 77b9 	add.w	r7, r4, #370	; 0x172
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6e82:	2e00      	cmp	r6, #0
   d6e84:	d09d      	beq.n	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6e86:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d6e8a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6e8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6e8e:	f004 f809 	bl	daea4 <strcmp>
   d6e92:	2800      	cmp	r0, #0
   d6e94:	d195      	bne.n	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6e96:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d6e98:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6e9c:	429a      	cmp	r2, r3
   d6e9e:	dc90      	bgt.n	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
    if (p->termNumber == curTermNumber)
   d6ea0:	d103      	bne.n	d6eaa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x202>
         p->set(term);
   d6ea2:	4639      	mov	r1, r7
   d6ea4:	4630      	mov	r0, r6
   d6ea6:	f7ff fefc 	bl	d6ca2 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6eaa:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6eac:	e7e9      	b.n	d6e82 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1da>
      sentenceHasFix = term[0] == 'A';
   d6eae:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d6eb2:	4243      	negs	r3, r0
   d6eb4:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d6eb6:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d6eba:	e7de      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d6ebc:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6ec0:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d6ec4:	f7ff fe04 	bl	d6ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d6ec8:	e7d7      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d6eca:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d6ece:	424b      	negs	r3, r1
   d6ed0:	414b      	adcs	r3, r1
   d6ed2:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d6ed6:	e7d0      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6ed8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d6edc:	e7f0      	b.n	d6ec0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x218>
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d6ede:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d6ee2:	4253      	negs	r3, r2
   d6ee4:	4153      	adcs	r3, r2
   d6ee6:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d6eea:	e7c6      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.speed.set(term);
   d6eec:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6ef0:	f500 7088 	add.w	r0, r0, #272	; 0x110
	  tempData.geoidSeparation.set(term);
   d6ef4:	f7ff feaf 	bl	d6c56 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d6ef8:	e7bf      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.course.set(term);
   d6efa:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6efe:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d6f02:	e7f7      	b.n	d6ef4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.date.setDate(term);
   d6f04:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f08:	30f0      	adds	r0, #240	; 0xf0
   d6f0a:	f7ff fe92 	bl	d6c32 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d6f0e:	e7b4      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      sentenceHasFix = term[0] > '0';
   d6f10:	2b30      	cmp	r3, #48	; 0x30
   d6f12:	bf94      	ite	ls
   d6f14:	2300      	movls	r3, #0
   d6f16:	2301      	movhi	r3, #1
   d6f18:	e7cd      	b.n	d6eb6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20e>
	  tempData.satellites.set(term);
   d6f1a:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f1e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d6f22:	f7ff feaa 	bl	d6c7a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d6f26:	e7a8      	b.n	d6e7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.hdop.set(term);
   d6f28:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f2c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d6f30:	e7e0      	b.n	d6ef4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.altitude.set(term);
   d6f32:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f36:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d6f3a:	e7db      	b.n	d6ef4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.geoidSeparation.set(term);
   d6f3c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6f40:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d6f44:	e7d6      	b.n	d6ef4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d6f46:	f43f af3c 	beq.w	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
       customCandidates = NULL;
   d6f4a:	2300      	movs	r3, #0
   d6f4c:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d6f50:	e737      	b.n	d6dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6f52:	bf00      	nop
   d6f54:	000db7f4 	.word	0x000db7f4
   d6f58:	000db7fa 	.word	0x000db7fa
   d6f5c:	000db800 	.word	0x000db800
   d6f60:	000db806 	.word	0x000db806

000d6f64 <_ZN11TinyGPSPlus6encodeEc>:
{
   d6f64:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d6f66:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6f6a:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d6f6c:	f103 0301 	add.w	r3, r3, #1
{
   d6f70:	4604      	mov	r4, r0
   d6f72:	460d      	mov	r5, r1
  ++encodedCharCount;
   d6f74:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6f78:	d03a      	beq.n	d6ff0 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d6f7a:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d6f7e:	d814      	bhi.n	d6faa <_ZN11TinyGPSPlus6encodeEc+0x46>
   d6f80:	290a      	cmp	r1, #10
   d6f82:	d01c      	beq.n	d6fbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6f84:	290d      	cmp	r1, #13
   d6f86:	d01a      	beq.n	d6fbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d6f88:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d6f8a:	bf9f      	itttt	ls
   d6f8c:	1c5a      	addls	r2, r3, #1
   d6f8e:	191b      	addls	r3, r3, r4
   d6f90:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d6f94:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d6f98:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d6f9c:	bb98      	cbnz	r0, d7006 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d6f9e:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d6fa2:	404d      	eors	r5, r1
   d6fa4:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d6fa8:	e021      	b.n	d6fee <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d6faa:	292a      	cmp	r1, #42	; 0x2a
   d6fac:	d007      	beq.n	d6fbe <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6fae:	292c      	cmp	r1, #44	; 0x2c
   d6fb0:	d1ea      	bne.n	d6f88 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d6fb2:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d6fb6:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d6fba:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
      if (curTermOffset < sizeof(term))
   d6fbe:	2b0e      	cmp	r3, #14
   d6fc0:	f04f 0000 	mov.w	r0, #0
   d6fc4:	d805      	bhi.n	d6fd2 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d6fc6:	4423      	add	r3, r4
   d6fc8:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d6fcc:	4620      	mov	r0, r4
   d6fce:	f7ff fe6b 	bl	d6ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d6fd2:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6fd6:	3301      	adds	r3, #1
   d6fd8:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d6fdc:	2300      	movs	r3, #0
   d6fde:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d6fe2:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d6fe6:	425d      	negs	r5, r3
   d6fe8:	415d      	adcs	r5, r3
   d6fea:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
}
   d6fee:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d6ff0:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d6ff2:	2302      	movs	r3, #2
    parity = 0;
   d6ff4:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d6ff8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    curTermNumber = curTermOffset = 0;
   d6ffc:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    sentenceHasFix = false;
   d7000:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d7004:	e7f3      	b.n	d6fee <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d7006:	2000      	movs	r0, #0
   d7008:	e7f1      	b.n	d6fee <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d700a:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d700c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d700e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d7010:	b17c      	cbz	r4, d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d7012:	6863      	ldr	r3, [r4, #4]
   d7014:	3b01      	subs	r3, #1
   d7016:	6063      	str	r3, [r4, #4]
   d7018:	b95b      	cbnz	r3, d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d701a:	6823      	ldr	r3, [r4, #0]
   d701c:	4620      	mov	r0, r4
   d701e:	689b      	ldr	r3, [r3, #8]
   d7020:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7022:	68a3      	ldr	r3, [r4, #8]
   d7024:	3b01      	subs	r3, #1
   d7026:	60a3      	str	r3, [r4, #8]
   d7028:	b91b      	cbnz	r3, d7032 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d702a:	6823      	ldr	r3, [r4, #0]
   d702c:	4620      	mov	r0, r4
   d702e:	68db      	ldr	r3, [r3, #12]
   d7030:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d7032:	4628      	mov	r0, r5
   d7034:	bd38      	pop	{r3, r4, r5, pc}

000d7036 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7036:	b513      	push	{r0, r1, r4, lr}
   d7038:	460b      	mov	r3, r1
   d703a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d703c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7040:	466c      	mov	r4, sp
   d7042:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7046:	e893 0003 	ldmia.w	r3, {r0, r1}
   d704a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d704e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7052:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7056:	b002      	add	sp, #8
   d7058:	bd10      	pop	{r4, pc}
	...

000d705c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
   d705c:	4b03      	ldr	r3, [pc, #12]	; (d706c <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x10>)
   d705e:	2201      	movs	r2, #1
   d7060:	701a      	strb	r2, [r3, #0]
   d7062:	4b03      	ldr	r3, [pc, #12]	; (d7070 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d7064:	4a03      	ldr	r2, [pc, #12]	; (d7074 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d7066:	601a      	str	r2, [r3, #0]
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d7068:	4770      	bx	lr
   d706a:	bf00      	nop
   d706c:	2003e5d4 	.word	0x2003e5d4
   d7070:	2003e5d0 	.word	0x2003e5d0
   d7074:	000db80c 	.word	0x000db80c

000d7078 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d7078:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d707a:	2300      	movs	r3, #0
   d707c:	6043      	str	r3, [r0, #4]
   d707e:	6083      	str	r3, [r0, #8]
   d7080:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d7082:	6103      	str	r3, [r0, #16]
   d7084:	6143      	str	r3, [r0, #20]
  _dataCRC    = 0; 
   d7086:	8303      	strh	r3, [r0, #24]
  _readCRC    = 0;
  _singleDrop = singleDrop;
   d7088:	7682      	strb	r2, [r0, #26]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d708a:	4604      	mov	r4, r0
  ds          = new OneWire(pin);
   d708c:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d708e:	9101      	str	r1, [sp, #4]
  ds          = new OneWire(pin);
   d7090:	f7fd f801 	bl	d4096 <_Znwj>
   d7094:	4605      	mov	r5, r0
   d7096:	b110      	cbz	r0, d709e <_ZN7DS18B20C1Etb+0x26>
   d7098:	9901      	ldr	r1, [sp, #4]
   d709a:	f000 fba7 	bl	d77ec <_ZN7OneWireC1Et>
}
   d709e:	4620      	mov	r0, r4
  ds          = new OneWire(pin);
   d70a0:	6025      	str	r5, [r4, #0]
}
   d70a2:	b003      	add	sp, #12
   d70a4:	bd30      	pop	{r4, r5, pc}

000d70a6 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d70a6:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d70a8:	f100 0510 	add.w	r5, r0, #16
{
   d70ac:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d70ae:	6800      	ldr	r0, [r0, #0]
   d70b0:	4629      	mov	r1, r5
   d70b2:	f000 fc8b 	bl	d79cc <_ZN7OneWire6searchEPh>
   d70b6:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d70b8:	bf1d      	ittte	ne
   d70ba:	682b      	ldrne	r3, [r5, #0]
   d70bc:	6023      	strne	r3, [r4, #0]
   d70be:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d70c0:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d70c2:	bf14      	ite	ne
   d70c4:	2001      	movne	r0, #1
   d70c6:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d70c8:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d70ca:	bd38      	pop	{r3, r4, r5, pc}

000d70cc <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d70cc:	b510      	push	{r4, lr}
   d70ce:	4604      	mov	r4, r0
{
  delete(ds);
   d70d0:	6800      	ldr	r0, [r0, #0]
   d70d2:	b110      	cbz	r0, d70da <_ZN7DS18B20D1Ev+0xe>
   d70d4:	210e      	movs	r1, #14
   d70d6:	f003 f9c8 	bl	da46a <_ZdlPvj>
}
   d70da:	4620      	mov	r0, r4
   d70dc:	bd10      	pop	{r4, pc}

000d70de <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d70de:	6800      	ldr	r0, [r0, #0]
   d70e0:	f000 bc6c 	b.w	d79bc <_ZN7OneWire12reset_searchEv>

000d70e4 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d70e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d70e8:	7e83      	ldrb	r3, [r0, #26]
{
   d70ea:	4604      	mov	r4, r0
   d70ec:	460d      	mov	r5, r1
   d70ee:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d70f0:	b92b      	cbnz	r3, d70fe <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d70f2:	780b      	ldrb	r3, [r1, #0]
   d70f4:	b91b      	cbnz	r3, d70fe <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d70f6:	ed9f 0a57 	vldr	s0, [pc, #348]	; d7254 <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d70fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d70fe:	6820      	ldr	r0, [r4, #0]
   d7100:	f000 fb7e 	bl	d7800 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d7104:	7ea3      	ldrb	r3, [r4, #26]
   d7106:	2b00      	cmp	r3, #0
   d7108:	d05d      	beq.n	d71c6 <_ZN7DS18B2014getTemperatureEPhb+0xe2>
   d710a:	2e00      	cmp	r6, #0
   d710c:	d15b      	bne.n	d71c6 <_ZN7DS18B2014getTemperatureEPhb+0xe2>
    ds->skip();
   d710e:	6820      	ldr	r0, [r4, #0]
   d7110:	f000 fc50 	bl	d79b4 <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d7114:	2200      	movs	r2, #0
   d7116:	2144      	movs	r1, #68	; 0x44
   d7118:	6820      	ldr	r0, [r4, #0]
   d711a:	f000 fc06 	bl	d792a <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d711e:	f240 20ee 	movw	r0, #750	; 0x2ee
   d7122:	f001 fbb3 	bl	d888c <delay>
  ds->reset();
   d7126:	6820      	ldr	r0, [r4, #0]
   d7128:	f000 fb6a 	bl	d7800 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d712c:	7ea3      	ldrb	r3, [r4, #26]
   d712e:	2b00      	cmp	r3, #0
   d7130:	d04e      	beq.n	d71d0 <_ZN7DS18B2014getTemperatureEPhb+0xec>
   d7132:	2e00      	cmp	r6, #0
   d7134:	d14c      	bne.n	d71d0 <_ZN7DS18B2014getTemperatureEPhb+0xec>
    ds->skip();
   d7136:	6820      	ldr	r0, [r4, #0]
   d7138:	f000 fc3c 	bl	d79b4 <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d713c:	6820      	ldr	r0, [r4, #0]
   d713e:	2200      	movs	r2, #0
   d7140:	21be      	movs	r1, #190	; 0xbe
   d7142:	f000 fbf2 	bl	d792a <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d7146:	782b      	ldrb	r3, [r5, #0]
   d7148:	2b26      	cmp	r3, #38	; 0x26
   d714a:	d104      	bne.n	d7156 <_ZN7DS18B2014getTemperatureEPhb+0x72>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d714c:	2200      	movs	r2, #0
   d714e:	6820      	ldr	r0, [r4, #0]
   d7150:	4611      	mov	r1, r2
   d7152:	f000 fbea 	bl	d792a <_ZN7OneWire5writeEhh>
   d7156:	1d26      	adds	r6, r4, #4
   d7158:	f104 080d 	add.w	r8, r4, #13
   d715c:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d715e:	6820      	ldr	r0, [r4, #0]
   d7160:	f000 fc06 	bl	d7970 <_ZN7OneWire4readEv>
   d7164:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d7168:	4546      	cmp	r6, r8
   d716a:	d1f8      	bne.n	d715e <_ZN7DS18B2014getTemperatureEPhb+0x7a>
  _dataCRC = (OneWire::crc8(_data, 8));
   d716c:	2108      	movs	r1, #8
   d716e:	4638      	mov	r0, r7
   d7170:	f000 fca0 	bl	d7ab4 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d7174:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d7176:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d7178:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d717a:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d717c:	d1bb      	bne.n	d70f6 <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d717e:	782b      	ldrb	r3, [r5, #0]
   d7180:	2b26      	cmp	r3, #38	; 0x26
   d7182:	d047      	beq.n	d7214 <_ZN7DS18B2014getTemperatureEPhb+0x130>
   d7184:	d829      	bhi.n	d71da <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d7186:	2b10      	cmp	r3, #16
   d7188:	d029      	beq.n	d71de <_ZN7DS18B2014getTemperatureEPhb+0xfa>
   d718a:	2b22      	cmp	r3, #34	; 0x22
   d718c:	d1b3      	bne.n	d70f6 <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d718e:	7a22      	ldrb	r2, [r4, #8]
   d7190:	7923      	ldrb	r3, [r4, #4]
   d7192:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d7196:	2a20      	cmp	r2, #32
   d7198:	d036      	beq.n	d7208 <_ZN7DS18B2014getTemperatureEPhb+0x124>
   d719a:	2a40      	cmp	r2, #64	; 0x40
   d719c:	d037      	beq.n	d720e <_ZN7DS18B2014getTemperatureEPhb+0x12a>
   d719e:	b912      	cbnz	r2, d71a6 <_ZN7DS18B2014getTemperatureEPhb+0xc2>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d71a0:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d71a4:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d71a6:	7963      	ldrb	r3, [r4, #5]
   d71a8:	7920      	ldrb	r0, [r4, #4]
   d71aa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d71ae:	b200      	sxth	r0, r0
   d71b0:	f003 fab6 	bl	da720 <__aeabi_i2d>
   d71b4:	4b28      	ldr	r3, [pc, #160]	; (d7258 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d71b6:	2200      	movs	r2, #0
   d71b8:	f003 fb1c 	bl	da7f4 <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d71bc:	f003 fd4c 	bl	dac58 <__aeabi_d2f>
   d71c0:	ee00 0a10 	vmov	s0, r0
      break;
   d71c4:	e799      	b.n	d70fa <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d71c6:	6820      	ldr	r0, [r4, #0]
   d71c8:	4629      	mov	r1, r5
   d71ca:	f000 fbe1 	bl	d7990 <_ZN7OneWire6selectEPKh>
   d71ce:	e7a1      	b.n	d7114 <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d71d0:	6820      	ldr	r0, [r4, #0]
   d71d2:	4629      	mov	r1, r5
   d71d4:	f000 fbdc 	bl	d7990 <_ZN7OneWire6selectEPKh>
   d71d8:	e7b0      	b.n	d713c <_ZN7DS18B2014getTemperatureEPhb+0x58>
  switch(addr[0]) 
   d71da:	2b28      	cmp	r3, #40	; 0x28
   d71dc:	e7d6      	b.n	d718c <_ZN7DS18B2014getTemperatureEPhb+0xa8>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d71de:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d71e0:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d71e2:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d71e4:	bf08      	it	eq
   d71e6:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d71e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d71ec:	bf03      	ittte	eq
   d71ee:	f1c3 030c 	rsbeq	r3, r3, #12
   d71f2:	f022 020f 	biceq.w	r2, r2, #15
   d71f6:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d71f8:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d71fa:	bf08      	it	eq
   d71fc:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d71fe:	ee00 3a10 	vmov	s0, r3
   d7202:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d7206:	e778      	b.n	d70fa <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d7208:	f023 0303 	bic.w	r3, r3, #3
   d720c:	e7ca      	b.n	d71a4 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d720e:	f023 0301 	bic.w	r3, r3, #1
   d7212:	e7c7      	b.n	d71a4 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d7214:	79a5      	ldrb	r5, [r4, #6]
   d7216:	4628      	mov	r0, r5
   d7218:	f003 fa82 	bl	da720 <__aeabi_i2d>
   d721c:	4606      	mov	r6, r0
   d721e:	7960      	ldrb	r0, [r4, #5]
   d7220:	10c0      	asrs	r0, r0, #3
   d7222:	ee07 0a90 	vmov	s15, r0
   d7226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d722a:	460f      	mov	r7, r1
   d722c:	ee17 0a90 	vmov	r0, s15
   d7230:	f003 fa88 	bl	da744 <__aeabi_f2d>
   d7234:	4b09      	ldr	r3, [pc, #36]	; (d725c <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d7236:	2200      	movs	r2, #0
   d7238:	f003 fadc 	bl	da7f4 <__aeabi_dmul>
   d723c:	062b      	lsls	r3, r5, #24
   d723e:	bf54      	ite	pl
   d7240:	4b07      	ldrpl	r3, [pc, #28]	; (d7260 <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d7242:	4b08      	ldrmi	r3, [pc, #32]	; (d7264 <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d7244:	2200      	movs	r2, #0
   d7246:	f003 fad5 	bl	da7f4 <__aeabi_dmul>
   d724a:	4632      	mov	r2, r6
   d724c:	463b      	mov	r3, r7
   d724e:	f003 f91b 	bl	da488 <__adddf3>
   d7252:	e7b3      	b.n	d71bc <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d7254:	7fc00000 	.word	0x7fc00000
   d7258:	3fb00000 	.word	0x3fb00000
   d725c:	3fa00000 	.word	0x3fa00000
   d7260:	3ff00000 	.word	0x3ff00000
   d7264:	bff00000 	.word	0xbff00000

000d7268 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d7268:	b508      	push	{r3, lr}
   d726a:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d726e:	f003 fa69 	bl	da744 <__aeabi_f2d>
   d7272:	a308      	add	r3, pc, #32	; (adr r3, d7294 <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d7274:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7278:	f003 fabc 	bl	da7f4 <__aeabi_dmul>
   d727c:	4b04      	ldr	r3, [pc, #16]	; (d7290 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d727e:	2200      	movs	r2, #0
   d7280:	f003 f902 	bl	da488 <__adddf3>
   d7284:	f003 fce8 	bl	dac58 <__aeabi_d2f>
}
   d7288:	ee00 0a10 	vmov	s0, r0
   d728c:	bd08      	pop	{r3, pc}
   d728e:	bf00      	nop
   d7290:	40400000 	.word	0x40400000
   d7294:	cccccccd 	.word	0xcccccccd
   d7298:	3ffccccc 	.word	0x3ffccccc

000d729c <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d729c:	7e02      	ldrb	r2, [r0, #24]
   d729e:	7e40      	ldrb	r0, [r0, #25]
}
   d72a0:	1a13      	subs	r3, r2, r0
   d72a2:	4258      	negs	r0, r3
   d72a4:	4158      	adcs	r0, r3
   d72a6:	4770      	bx	lr

000d72a8 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d72a8:	4770      	bx	lr

000d72aa <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d72aa:	b510      	push	{r4, lr}
}
   d72ac:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d72ae:	4604      	mov	r4, r0
}
   d72b0:	f003 f8db 	bl	da46a <_ZdlPvj>
   d72b4:	4620      	mov	r0, r4
   d72b6:	bd10      	pop	{r4, pc}

000d72b8 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d72b8:	b510      	push	{r4, lr}
   d72ba:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d72bc:	f100 0118 	add.w	r1, r0, #24
   d72c0:	68c0      	ldr	r0, [r0, #12]
   d72c2:	f002 f9f5 	bl	d96b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d72c6:	8a20      	ldrh	r0, [r4, #16]
   d72c8:	2100      	movs	r1, #0
}
   d72ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d72ce:	f003 b85a 	b.w	da386 <digitalWrite>

000d72d2 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d72d2:	b510      	push	{r4, lr}
   d72d4:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d72d6:	2101      	movs	r1, #1
   d72d8:	8a00      	ldrh	r0, [r0, #16]
   d72da:	f003 f854 	bl	da386 <digitalWrite>

	spi.endTransaction();
   d72de:	68e0      	ldr	r0, [r4, #12]
}
   d72e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d72e4:	f002 b9cb 	b.w	d967e <_ZN8SPIClass14endTransactionEv>

000d72e8 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d72e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72ea:	461e      	mov	r6, r3
	beginTransaction();
   d72ec:	6803      	ldr	r3, [r0, #0]
   d72ee:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d72f0:	460f      	mov	r7, r1
   d72f2:	4614      	mov	r4, r2
   d72f4:	4605      	mov	r5, r0
	beginTransaction();
   d72f6:	4798      	blx	r3

	if (numBytes > 1) {
   d72f8:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d72fa:	bf88      	it	hi
   d72fc:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d7300:	68e8      	ldr	r0, [r5, #12]
   d7302:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d7306:	f002 fa41 	bl	d978c <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d730a:	4426      	add	r6, r4
   d730c:	42b4      	cmp	r4, r6
   d730e:	d006      	beq.n	d731e <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d7310:	68e8      	ldr	r0, [r5, #12]
   d7312:	2100      	movs	r1, #0
   d7314:	f002 fa3a 	bl	d978c <_ZN8SPIClass8transferEh>
   d7318:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d731c:	e7f6      	b.n	d730c <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d731e:	682b      	ldr	r3, [r5, #0]
   d7320:	4628      	mov	r0, r5
   d7322:	699b      	ldr	r3, [r3, #24]
   d7324:	4798      	blx	r3

	return true;
}
   d7326:	2001      	movs	r0, #1
   d7328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d732a <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d732c:	461e      	mov	r6, r3
	beginTransaction();
   d732e:	6803      	ldr	r3, [r0, #0]
   d7330:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d7332:	460f      	mov	r7, r1
   d7334:	4614      	mov	r4, r2
   d7336:	4605      	mov	r5, r0
	beginTransaction();
   d7338:	4798      	blx	r3

	if (numBytes > 1) {
   d733a:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d733c:	bf88      	it	hi
   d733e:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d7342:	68e8      	ldr	r0, [r5, #12]
   d7344:	4639      	mov	r1, r7
   d7346:	f002 fa21 	bl	d978c <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d734a:	4426      	add	r6, r4
   d734c:	42b4      	cmp	r4, r6
   d734e:	d005      	beq.n	d735c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d7350:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7354:	68e8      	ldr	r0, [r5, #12]
   d7356:	f002 fa19 	bl	d978c <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d735a:	e7f7      	b.n	d734c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d735c:	682b      	ldr	r3, [r5, #0]
   d735e:	4628      	mov	r0, r5
   d7360:	699b      	ldr	r3, [r3, #24]
   d7362:	4798      	blx	r3

	return true;
}
   d7364:	2001      	movs	r0, #1
   d7366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7368 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d7368:	4a02      	ldr	r2, [pc, #8]	; (d7374 <_ZN6LIS3DHC1Ei+0xc>)
   d736a:	e9c0 2100 	strd	r2, r1, [r0]
   d736e:	2200      	movs	r2, #0
   d7370:	7202      	strb	r2, [r0, #8]
}
   d7372:	4770      	bx	lr
   d7374:	000db820 	.word	0x000db820

000d7378 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d7378:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d737a:	6803      	ldr	r3, [r0, #0]
   d737c:	aa01      	add	r2, sp, #4
   d737e:	68dc      	ldr	r4, [r3, #12]
   d7380:	2301      	movs	r3, #1
   d7382:	47a0      	blx	r4
}
   d7384:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d7388:	b002      	add	sp, #8
   d738a:	bd10      	pop	{r4, pc}

000d738c <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d738c:	b538      	push	{r3, r4, r5, lr}
   d738e:	4605      	mov	r5, r0
   d7390:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d7392:	210f      	movs	r1, #15
   d7394:	4628      	mov	r0, r5
   d7396:	f7ff ffef 	bl	d7378 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d739a:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d739c:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d73a0:	d004      	beq.n	d73ac <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d73a2:	f001 fa73 	bl	d888c <delay>
	for(int tries = 0; tries < 10; tries++) {
   d73a6:	3c01      	subs	r4, #1
   d73a8:	d1f3      	bne.n	d7392 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d73aa:	4620      	mov	r0, r4
}
   d73ac:	bd38      	pop	{r3, r4, r5, pc}

000d73ae <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d73ae:	b510      	push	{r4, lr}
   d73b0:	4604      	mov	r4, r0
	spi.begin(ss);
   d73b2:	8a01      	ldrh	r1, [r0, #16]
   d73b4:	68c0      	ldr	r0, [r0, #12]
   d73b6:	f002 f94f 	bl	d9658 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d73ba:	4620      	mov	r0, r4
}
   d73bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d73c0:	f7ff bfe4 	b.w	d738c <_ZN6LIS3DH9hasDeviceEv>

000d73c4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d73c4:	4770      	bx	lr

000d73c6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d73c6:	b510      	push	{r4, lr}
}
   d73c8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d73ca:	4604      	mov	r4, r0
}
   d73cc:	f003 f84d 	bl	da46a <_ZdlPvj>
   d73d0:	4620      	mov	r0, r4
   d73d2:	bd10      	pop	{r4, pc}

000d73d4 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d73d4:	6803      	ldr	r3, [r0, #0]
   d73d6:	b2c9      	uxtb	r1, r1
   d73d8:	689b      	ldr	r3, [r3, #8]
   d73da:	4718      	bx	r3

000d73dc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d73dc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d73de:	4d03      	ldr	r5, [pc, #12]	; (d73ec <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d73e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d73e4:	e9c0 5100 	strd	r5, r1, [r0]
}
   d73e8:	bd30      	pop	{r4, r5, pc}
   d73ea:	bf00      	nop
   d73ec:	000db88c 	.word	0x000db88c

000d73f0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d73f0:	6840      	ldr	r0, [r0, #4]
   d73f2:	f001 bf11 	b.w	d9218 <_ZN7TwoWire5beginEv>

000d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d73f6:	b510      	push	{r4, lr}
   d73f8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d73fa:	6800      	ldr	r0, [r0, #0]
   d73fc:	f001 ff4f 	bl	d929e <_ZN7TwoWire6unlockEv>
   d7400:	4620      	mov	r0, r4
   d7402:	bd10      	pop	{r4, pc}

000d7404 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7408:	b08a      	sub	sp, #40	; 0x28
   d740a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d740c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d740e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7410:	f001 ff3c 	bl	d928c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7414:	221e      	movs	r2, #30
   d7416:	2100      	movs	r1, #0
   d7418:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d741a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d741c:	f003 fd16 	bl	dae4c <memset>
		size_t framAddr = 0;
   d7420:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7422:	b1ef      	cbz	r7, d7460 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7424:	6823      	ldr	r3, [r4, #0]
   d7426:	2f1e      	cmp	r7, #30
   d7428:	46b8      	mov	r8, r7
   d742a:	bf28      	it	cs
   d742c:	f04f 081e 	movcs.w	r8, #30
   d7430:	68dd      	ldr	r5, [r3, #12]
   d7432:	aa02      	add	r2, sp, #8
   d7434:	4643      	mov	r3, r8
   d7436:	4631      	mov	r1, r6
   d7438:	4620      	mov	r0, r4
   d743a:	47a8      	blx	r5
			if (!result) {
   d743c:	4605      	mov	r5, r0
   d743e:	b958      	cbnz	r0, d7458 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7440:	480a      	ldr	r0, [pc, #40]	; (d746c <_ZN6MB85RC5eraseEv+0x68>)
   d7442:	490b      	ldr	r1, [pc, #44]	; (d7470 <_ZN6MB85RC5eraseEv+0x6c>)
   d7444:	4632      	mov	r2, r6
   d7446:	f7fc fefe 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d744a:	a801      	add	r0, sp, #4
   d744c:	f7ff ffd3 	bl	d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7450:	4628      	mov	r0, r5
   d7452:	b00a      	add	sp, #40	; 0x28
   d7454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7458:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d745c:	4446      	add	r6, r8
		while(totalLen > 0) {
   d745e:	e7e0      	b.n	d7422 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7460:	a801      	add	r0, sp, #4
   d7462:	f7ff ffc8 	bl	d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7466:	2501      	movs	r5, #1
   d7468:	e7f2      	b.n	d7450 <_ZN6MB85RC5eraseEv+0x4c>
   d746a:	bf00      	nop
   d746c:	2003e624 	.word	0x2003e624
   d7470:	000db858 	.word	0x000db858

000d7474 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7478:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d747a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d747c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d747e:	460d      	mov	r5, r1
   d7480:	4616      	mov	r6, r2
   d7482:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7484:	f001 ff02 	bl	d928c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7488:	b1a7      	cbz	r7, d74b4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d748a:	68e1      	ldr	r1, [r4, #12]
   d748c:	6860      	ldr	r0, [r4, #4]
   d748e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7492:	f001 fef4 	bl	d927e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7496:	0a29      	lsrs	r1, r5, #8
   d7498:	6860      	ldr	r0, [r4, #4]
   d749a:	f7ff ff9b 	bl	d73d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d749e:	4629      	mov	r1, r5
   d74a0:	6860      	ldr	r0, [r4, #4]
   d74a2:	f7ff ff97 	bl	d73d4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d74a6:	6860      	ldr	r0, [r4, #4]
   d74a8:	2100      	movs	r1, #0
   d74aa:	f001 feeb 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d74ae:	b148      	cbz	r0, d74c4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d74b0:	2400      	movs	r4, #0
   d74b2:	e000      	b.n	d74b6 <_ZN6MB85RC8readDataEjPhj+0x42>
   d74b4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d74b6:	a801      	add	r0, sp, #4
   d74b8:	f7ff ff9d 	bl	d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d74bc:	4620      	mov	r0, r4
   d74be:	b003      	add	sp, #12
   d74c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d74c4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d74c6:	7b21      	ldrb	r1, [r4, #12]
   d74c8:	6860      	ldr	r0, [r4, #4]
   d74ca:	46b8      	mov	r8, r7
   d74cc:	bf28      	it	cs
   d74ce:	f04f 0820 	movcs.w	r8, #32
   d74d2:	2301      	movs	r3, #1
   d74d4:	4642      	mov	r2, r8
   d74d6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d74da:	f001 feba 	bl	d9252 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d74de:	f002 ff97 	bl	da410 <_Z19__fetch_global_Wirev>
   d74e2:	6803      	ldr	r3, [r0, #0]
   d74e4:	691b      	ldr	r3, [r3, #16]
   d74e6:	4798      	blx	r3
   d74e8:	4540      	cmp	r0, r8
   d74ea:	dbe1      	blt.n	d74b0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d74ec:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d74f0:	f002 ff8e 	bl	da410 <_Z19__fetch_global_Wirev>
   d74f4:	6803      	ldr	r3, [r0, #0]
   d74f6:	695b      	ldr	r3, [r3, #20]
   d74f8:	4798      	blx	r3
   d74fa:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d74fe:	454e      	cmp	r6, r9
   d7500:	d1f6      	bne.n	d74f0 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7502:	4445      	add	r5, r8
   d7504:	eba7 0708 	sub.w	r7, r7, r8
   d7508:	e7be      	b.n	d7488 <_ZN6MB85RC8readDataEjPhj+0x14>

000d750a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d750a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d750e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7510:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7512:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7514:	460e      	mov	r6, r1
   d7516:	4690      	mov	r8, r2
   d7518:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d751a:	f001 feb7 	bl	d928c <_ZN7TwoWire4lockEv>
   d751e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7522:	f1b9 0f00 	cmp.w	r9, #0
   d7526:	d02a      	beq.n	d757e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7528:	b34d      	cbz	r5, d757e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d752a:	68e1      	ldr	r1, [r4, #12]
   d752c:	6860      	ldr	r0, [r4, #4]
   d752e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7532:	f001 fea4 	bl	d927e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7536:	0a31      	lsrs	r1, r6, #8
   d7538:	6860      	ldr	r0, [r4, #4]
   d753a:	f7ff ff4b 	bl	d73d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d753e:	6860      	ldr	r0, [r4, #4]
   d7540:	4631      	mov	r1, r6
   d7542:	f7ff ff47 	bl	d73d4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7546:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d754a:	4647      	mov	r7, r8
   d754c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7550:	6860      	ldr	r0, [r4, #4]
   d7552:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7556:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7558:	3d01      	subs	r5, #1
				wire.write(*data);
   d755a:	689b      	ldr	r3, [r3, #8]
   d755c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d755e:	4555      	cmp	r5, sl
   d7560:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7564:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7566:	d001      	beq.n	d756c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7568:	2d00      	cmp	r5, #0
   d756a:	d1f1      	bne.n	d7550 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d756c:	6860      	ldr	r0, [r4, #4]
   d756e:	2101      	movs	r1, #1
   d7570:	f001 fe88 	bl	d9284 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7574:	2800      	cmp	r0, #0
   d7576:	d0d7      	beq.n	d7528 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7578:	f04f 0900 	mov.w	r9, #0
   d757c:	e7d1      	b.n	d7522 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d757e:	a801      	add	r0, sp, #4
   d7580:	f7ff ff39 	bl	d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7584:	4648      	mov	r0, r9
   d7586:	b003      	add	sp, #12
   d7588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d758c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d758c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7590:	b08b      	sub	sp, #44	; 0x2c
   d7592:	460e      	mov	r6, r1
   d7594:	4615      	mov	r5, r2
   d7596:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7598:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d759a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d759c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d759e:	f001 fe75 	bl	d928c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d75a2:	42ae      	cmp	r6, r5
   d75a4:	d229      	bcs.n	d75fa <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d75a6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d75a8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d75aa:	b18c      	cbz	r4, d75d0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d75ac:	2c1e      	cmp	r4, #30
   d75ae:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d75b0:	f8d8 3000 	ldr.w	r3, [r8]
   d75b4:	bf28      	it	cs
   d75b6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d75b8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d75ba:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d75be:	aa02      	add	r2, sp, #8
   d75c0:	463b      	mov	r3, r7
   d75c2:	4631      	mov	r1, r6
   d75c4:	4640      	mov	r0, r8
				framAddrTo -= count;
   d75c6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d75c8:	47c8      	blx	r9
				if (!result) {
   d75ca:	b948      	cbnz	r0, d75e0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d75cc:	2400      	movs	r4, #0
   d75ce:	e000      	b.n	d75d2 <_ZN6MB85RC8moveDataEjjj+0x46>
   d75d0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d75d2:	a801      	add	r0, sp, #4
   d75d4:	f7ff ff0f 	bl	d73f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d75d8:	4620      	mov	r0, r4
   d75da:	b00b      	add	sp, #44	; 0x2c
   d75dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d75e0:	f8d8 3000 	ldr.w	r3, [r8]
   d75e4:	aa02      	add	r2, sp, #8
   d75e6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d75ea:	4629      	mov	r1, r5
   d75ec:	463b      	mov	r3, r7
   d75ee:	4640      	mov	r0, r8
   d75f0:	47c8      	blx	r9
				if (!result) {
   d75f2:	2800      	cmp	r0, #0
   d75f4:	d0ea      	beq.n	d75cc <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d75f6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d75f8:	e7d7      	b.n	d75aa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d75fa:	d9e9      	bls.n	d75d0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d75fc:	2c00      	cmp	r4, #0
   d75fe:	d0e7      	beq.n	d75d0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7600:	f8d8 3000 	ldr.w	r3, [r8]
   d7604:	2c1e      	cmp	r4, #30
   d7606:	4627      	mov	r7, r4
   d7608:	bf28      	it	cs
   d760a:	271e      	movcs	r7, #30
   d760c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7610:	aa02      	add	r2, sp, #8
   d7612:	463b      	mov	r3, r7
   d7614:	4631      	mov	r1, r6
   d7616:	4640      	mov	r0, r8
   d7618:	47c8      	blx	r9
				if (!result) {
   d761a:	2800      	cmp	r0, #0
   d761c:	d0d6      	beq.n	d75cc <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d761e:	f8d8 3000 	ldr.w	r3, [r8]
   d7622:	aa02      	add	r2, sp, #8
   d7624:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7628:	4629      	mov	r1, r5
   d762a:	463b      	mov	r3, r7
   d762c:	4640      	mov	r0, r8
   d762e:	47c8      	blx	r9
				if (!result) {
   d7630:	2800      	cmp	r0, #0
   d7632:	d0cb      	beq.n	d75cc <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7634:	443e      	add	r6, r7
				framAddrTo += count;
   d7636:	443d      	add	r5, r7
				numBytes -= count;
   d7638:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d763a:	e7df      	b.n	d75fc <_ZN6MB85RC8moveDataEjjj+0x70>

000d763c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d763c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d763e:	6803      	ldr	r3, [r0, #0]
   d7640:	2b2f      	cmp	r3, #47	; 0x2f
{
   d7642:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d7644:	d904      	bls.n	d7650 <nrf_gpio_pin_port_decode+0x14>
   d7646:	4a07      	ldr	r2, [pc, #28]	; (d7664 <nrf_gpio_pin_port_decode+0x28>)
   d7648:	2100      	movs	r1, #0
   d764a:	200a      	movs	r0, #10
   d764c:	f000 ff52 	bl	d84f4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d7650:	6823      	ldr	r3, [r4, #0]
   d7652:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d7654:	bf83      	ittte	hi
   d7656:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d765a:	4803      	ldrhi	r0, [pc, #12]	; (d7668 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d765c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d765e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d7662:	bd10      	pop	{r4, pc}
   d7664:	000d81a5 	.word	0x000d81a5
   d7668:	50000300 	.word	0x50000300

000d766c <_ZN7OneWire19digitalWriteFastLowEv>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d766c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d766e:	4c1b      	ldr	r4, [pc, #108]	; (d76dc <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
      pinResetFast(_pin);
   d7670:	8805      	ldrh	r5, [r0, #0]
   d7672:	7823      	ldrb	r3, [r4, #0]
   d7674:	4e1a      	ldr	r6, [pc, #104]	; (d76e0 <_ZN7OneWire19digitalWriteFastLowEv+0x74>)
   d7676:	f3bf 8f5b 	dmb	ish
   d767a:	f013 0f01 	tst.w	r3, #1
   d767e:	d109      	bne.n	d7694 <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d7680:	4620      	mov	r0, r4
   d7682:	f7fc fd19 	bl	d40b8 <__cxa_guard_acquire>
   d7686:	b128      	cbz	r0, d7694 <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d7688:	f000 fdcc 	bl	d8224 <HAL_Pin_Map>
   d768c:	6030      	str	r0, [r6, #0]
   d768e:	4620      	mov	r0, r4
   d7690:	f7fc fd17 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7694:	6833      	ldr	r3, [r6, #0]
   d7696:	012d      	lsls	r5, r5, #4
   d7698:	5d5b      	ldrb	r3, [r3, r5]
   d769a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d769c:	7823      	ldrb	r3, [r4, #0]
   d769e:	f3bf 8f5b 	dmb	ish
   d76a2:	07db      	lsls	r3, r3, #31
   d76a4:	d409      	bmi.n	d76ba <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d76a6:	480d      	ldr	r0, [pc, #52]	; (d76dc <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d76a8:	f7fc fd06 	bl	d40b8 <__cxa_guard_acquire>
   d76ac:	b128      	cbz	r0, d76ba <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d76ae:	f000 fdb9 	bl	d8224 <HAL_Pin_Map>
   d76b2:	6030      	str	r0, [r6, #0]
   d76b4:	4809      	ldr	r0, [pc, #36]	; (d76dc <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d76b6:	f7fc fd04 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d76ba:	6833      	ldr	r3, [r6, #0]
   d76bc:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d76be:	a801      	add	r0, sp, #4
   d76c0:	785b      	ldrb	r3, [r3, #1]
   d76c2:	f003 031f 	and.w	r3, r3, #31
   d76c6:	433b      	orrs	r3, r7
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	f7ff ffb7 	bl	d763c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d76ce:	9a01      	ldr	r2, [sp, #4]
   d76d0:	2301      	movs	r3, #1
   d76d2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d76d4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   d76d8:	b003      	add	sp, #12
   d76da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76dc:	2003e5d8 	.word	0x2003e5d8
   d76e0:	2003e5dc 	.word	0x2003e5dc

000d76e4 <_ZN7OneWire20digitalWriteFastHighEv>:

    inline void digitalWriteFastHigh() {
   d76e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d76e6:	4c1b      	ldr	r4, [pc, #108]	; (d7754 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
      pinSetFast(_pin);
   d76e8:	8805      	ldrh	r5, [r0, #0]
   d76ea:	7823      	ldrb	r3, [r4, #0]
   d76ec:	4e1a      	ldr	r6, [pc, #104]	; (d7758 <_ZN7OneWire20digitalWriteFastHighEv+0x74>)
   d76ee:	f3bf 8f5b 	dmb	ish
   d76f2:	f013 0f01 	tst.w	r3, #1
   d76f6:	d109      	bne.n	d770c <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d76f8:	4620      	mov	r0, r4
   d76fa:	f7fc fcdd 	bl	d40b8 <__cxa_guard_acquire>
   d76fe:	b128      	cbz	r0, d770c <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d7700:	f000 fd90 	bl	d8224 <HAL_Pin_Map>
   d7704:	6030      	str	r0, [r6, #0]
   d7706:	4620      	mov	r0, r4
   d7708:	f7fc fcdb 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d770c:	6833      	ldr	r3, [r6, #0]
   d770e:	012d      	lsls	r5, r5, #4
   d7710:	5d5b      	ldrb	r3, [r3, r5]
   d7712:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7714:	7823      	ldrb	r3, [r4, #0]
   d7716:	f3bf 8f5b 	dmb	ish
   d771a:	07db      	lsls	r3, r3, #31
   d771c:	d409      	bmi.n	d7732 <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d771e:	480d      	ldr	r0, [pc, #52]	; (d7754 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d7720:	f7fc fcca 	bl	d40b8 <__cxa_guard_acquire>
   d7724:	b128      	cbz	r0, d7732 <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d7726:	f000 fd7d 	bl	d8224 <HAL_Pin_Map>
   d772a:	6030      	str	r0, [r6, #0]
   d772c:	4809      	ldr	r0, [pc, #36]	; (d7754 <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d772e:	f7fc fcc8 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7732:	6833      	ldr	r3, [r6, #0]
   d7734:	442b      	add	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d7736:	a801      	add	r0, sp, #4
   d7738:	785b      	ldrb	r3, [r3, #1]
   d773a:	f003 031f 	and.w	r3, r3, #31
   d773e:	433b      	orrs	r3, r7
   d7740:	9301      	str	r3, [sp, #4]
   d7742:	f7ff ff7b 	bl	d763c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d7746:	9a01      	ldr	r2, [sp, #4]
   d7748:	2301      	movs	r3, #1
   d774a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d774c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    }
   d7750:	b003      	add	sp, #12
   d7752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7754:	2003e5d8 	.word	0x2003e5d8
   d7758:	2003e5dc 	.word	0x2003e5dc

000d775c <_ZN7OneWire15digitalReadFastEv>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d775c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7760:	4d20      	ldr	r5, [pc, #128]	; (d77e4 <_ZN7OneWire15digitalReadFastEv+0x88>)
      return pinReadFast(_pin);
   d7762:	8806      	ldrh	r6, [r0, #0]
   d7764:	782b      	ldrb	r3, [r5, #0]
   d7766:	4f20      	ldr	r7, [pc, #128]	; (d77e8 <_ZN7OneWire15digitalReadFastEv+0x8c>)
   d7768:	f3bf 8f5b 	dmb	ish
   d776c:	f013 0f01 	tst.w	r3, #1
   d7770:	d109      	bne.n	d7786 <_ZN7OneWire15digitalReadFastEv+0x2a>
   d7772:	4628      	mov	r0, r5
   d7774:	f7fc fca0 	bl	d40b8 <__cxa_guard_acquire>
   d7778:	b128      	cbz	r0, d7786 <_ZN7OneWire15digitalReadFastEv+0x2a>
   d777a:	f000 fd53 	bl	d8224 <HAL_Pin_Map>
   d777e:	6038      	str	r0, [r7, #0]
   d7780:	4628      	mov	r0, r5
   d7782:	f7fc fc9e 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7786:	683b      	ldr	r3, [r7, #0]
   d7788:	0136      	lsls	r6, r6, #4
   d778a:	5d9c      	ldrb	r4, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d778c:	782b      	ldrb	r3, [r5, #0]
   d778e:	f3bf 8f5b 	dmb	ish
   d7792:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7794:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d7798:	d409      	bmi.n	d77ae <_ZN7OneWire15digitalReadFastEv+0x52>
   d779a:	4812      	ldr	r0, [pc, #72]	; (d77e4 <_ZN7OneWire15digitalReadFastEv+0x88>)
   d779c:	f7fc fc8c 	bl	d40b8 <__cxa_guard_acquire>
   d77a0:	b128      	cbz	r0, d77ae <_ZN7OneWire15digitalReadFastEv+0x52>
   d77a2:	f000 fd3f 	bl	d8224 <HAL_Pin_Map>
   d77a6:	6038      	str	r0, [r7, #0]
   d77a8:	480e      	ldr	r0, [pc, #56]	; (d77e4 <_ZN7OneWire15digitalReadFastEv+0x88>)
   d77aa:	f7fc fc8a 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d77ae:	683b      	ldr	r3, [r7, #0]
   d77b0:	4433      	add	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d77b2:	a801      	add	r0, sp, #4
   d77b4:	785c      	ldrb	r4, [r3, #1]
   d77b6:	f004 041f 	and.w	r4, r4, #31
   d77ba:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d77be:	9401      	str	r4, [sp, #4]
   d77c0:	f7ff ff3c 	bl	d763c <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d77c4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   d77c8:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d77ca:	a801      	add	r0, sp, #4
   d77cc:	f7ff ff36 	bl	d763c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d77d0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d77d2:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d77d6:	40d8      	lsrs	r0, r3
    }
   d77d8:	f000 0001 	and.w	r0, r0, #1
   d77dc:	b002      	add	sp, #8
   d77de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77e2:	bf00      	nop
   d77e4:	2003e5d8 	.word	0x2003e5d8
   d77e8:	2003e5dc 	.word	0x2003e5dc

000d77ec <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d77ec:	b538      	push	{r3, r4, r5, lr}
   d77ee:	4604      	mov	r4, r0
   d77f0:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d77f2:	4628      	mov	r0, r5
   d77f4:	2100      	movs	r1, #0
   d77f6:	f002 fdb5 	bl	da364 <pinMode>
    _pin = pin;
   d77fa:	8025      	strh	r5, [r4, #0]
}
   d77fc:	4620      	mov	r0, r4
   d77fe:	bd38      	pop	{r3, r4, r5, pc}

000d7800 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d7800:	b570      	push	{r4, r5, r6, lr}
   d7802:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d7804:	f001 fd54 	bl	d92b0 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d7808:	8828      	ldrh	r0, [r5, #0]
   d780a:	2100      	movs	r1, #0
   d780c:	f000 fd12 	bl	d8234 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d7810:	f001 fd50 	bl	d92b4 <_Z10interruptsv>
   d7814:	247d      	movs	r4, #125	; 0x7d
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d7816:	3c01      	subs	r4, #1
   d7818:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d781c:	d02d      	beq.n	d787a <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d781e:	2002      	movs	r0, #2
   d7820:	f000 fcc0 	bl	d81a4 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d7824:	4628      	mov	r0, r5
   d7826:	f7ff ff99 	bl	d775c <_ZN7OneWire15digitalReadFastEv>
   d782a:	2800      	cmp	r0, #0
   d782c:	d0f3      	beq.n	d7816 <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
   d782e:	f001 fd3f 	bl	d92b0 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d7832:	4628      	mov	r0, r5
   d7834:	f7ff ff1a 	bl	d766c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7838:	2101      	movs	r1, #1
   d783a:	8828      	ldrh	r0, [r5, #0]
   d783c:	f000 fcfa 	bl	d8234 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d7840:	f001 fd38 	bl	d92b4 <_Z10interruptsv>
   d7844:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d7848:	f000 fcac 	bl	d81a4 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d784c:	f000 fcba 	bl	d81c4 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d7850:	2100      	movs	r1, #0
   d7852:	4606      	mov	r6, r0
   d7854:	8828      	ldrh	r0, [r5, #0]
   d7856:	f000 fced 	bl	d8234 <HAL_Pin_Mode>
   d785a:	2046      	movs	r0, #70	; 0x46
   d785c:	f000 fca2 	bl	d81a4 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d7860:	4628      	mov	r0, r5
   d7862:	f7ff ff7b 	bl	d775c <_ZN7OneWire15digitalReadFastEv>
   d7866:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d786a:	4630      	mov	r0, r6
   d786c:	f000 fcb2 	bl	d81d4 <HAL_enable_irq>
   d7870:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d7874:	0964      	lsrs	r4, r4, #5
   d7876:	f000 fc95 	bl	d81a4 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d787a:	4620      	mov	r0, r4
   d787c:	bd70      	pop	{r4, r5, r6, pc}

000d787e <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d787e:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d7880:	f011 0501 	ands.w	r5, r1, #1
{
   d7884:	4604      	mov	r4, r0
    if (v & 1)
   d7886:	d018      	beq.n	d78ba <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d7888:	f000 fc9c 	bl	d81c4 <HAL_disable_irq>
   d788c:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d788e:	4620      	mov	r0, r4
   d7890:	f7ff feec 	bl	d766c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7894:	2101      	movs	r1, #1
   d7896:	8820      	ldrh	r0, [r4, #0]
   d7898:	f000 fccc 	bl	d8234 <HAL_Pin_Mode>
   d789c:	2001      	movs	r0, #1
   d789e:	f000 fc81 	bl	d81a4 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d78a2:	8820      	ldrh	r0, [r4, #0]
   d78a4:	2100      	movs	r1, #0
   d78a6:	f000 fcc5 	bl	d8234 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d78aa:	4628      	mov	r0, r5
   d78ac:	f000 fc92 	bl	d81d4 <HAL_enable_irq>
   d78b0:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d78b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d78b6:	f000 bc75 	b.w	d81a4 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d78ba:	f000 fc83 	bl	d81c4 <HAL_disable_irq>
   d78be:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d78c0:	4620      	mov	r0, r4
   d78c2:	f7ff fed3 	bl	d766c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d78c6:	2101      	movs	r1, #1
   d78c8:	8820      	ldrh	r0, [r4, #0]
   d78ca:	f000 fcb3 	bl	d8234 <HAL_Pin_Mode>
   d78ce:	2041      	movs	r0, #65	; 0x41
   d78d0:	f000 fc68 	bl	d81a4 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d78d4:	8820      	ldrh	r0, [r4, #0]
   d78d6:	4629      	mov	r1, r5
   d78d8:	f000 fcac 	bl	d8234 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d78dc:	4630      	mov	r0, r6
   d78de:	f000 fc79 	bl	d81d4 <HAL_enable_irq>
   d78e2:	2005      	movs	r0, #5
   d78e4:	e7e5      	b.n	d78b2 <_ZN7OneWire9write_bitEh+0x34>

000d78e6 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d78e6:	b538      	push	{r3, r4, r5, lr}
   d78e8:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d78ea:	f000 fc6b 	bl	d81c4 <HAL_disable_irq>
   d78ee:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d78f0:	4620      	mov	r0, r4
   d78f2:	f7ff febb 	bl	d766c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d78f6:	8820      	ldrh	r0, [r4, #0]
   d78f8:	2101      	movs	r1, #1
   d78fa:	f000 fc9b 	bl	d8234 <HAL_Pin_Mode>
   d78fe:	2001      	movs	r0, #1
   d7900:	f000 fc50 	bl	d81a4 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7904:	2100      	movs	r1, #0
   d7906:	8820      	ldrh	r0, [r4, #0]
   d7908:	f000 fc94 	bl	d8234 <HAL_Pin_Mode>
   d790c:	200d      	movs	r0, #13
   d790e:	f000 fc49 	bl	d81a4 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d7912:	4620      	mov	r0, r4
   d7914:	f7ff ff22 	bl	d775c <_ZN7OneWire15digitalReadFastEv>
   d7918:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d791a:	4628      	mov	r0, r5
   d791c:	f000 fc5a 	bl	d81d4 <HAL_enable_irq>
   d7920:	202e      	movs	r0, #46	; 0x2e
   d7922:	f000 fc3f 	bl	d81a4 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d7926:	4620      	mov	r0, r4
   d7928:	bd38      	pop	{r3, r4, r5, pc}

000d792a <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d792e:	4604      	mov	r4, r0
   d7930:	4688      	mov	r8, r1
   d7932:	4616      	mov	r6, r2
   d7934:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7936:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d7938:	ea18 0f05 	tst.w	r8, r5
   d793c:	bf14      	ite	ne
   d793e:	2101      	movne	r1, #1
   d7940:	2100      	moveq	r1, #0
   d7942:	4620      	mov	r0, r4
   d7944:	f7ff ff9b 	bl	d787e <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7948:	006d      	lsls	r5, r5, #1
   d794a:	3f01      	subs	r7, #1
   d794c:	b2ed      	uxtb	r5, r5
   d794e:	d1f3      	bne.n	d7938 <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
   d7950:	b166      	cbz	r6, d796c <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d7952:	f001 fcad 	bl	d92b0 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d7956:	4620      	mov	r0, r4
   d7958:	f7ff fec4 	bl	d76e4 <_ZN7OneWire20digitalWriteFastHighEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d795c:	8820      	ldrh	r0, [r4, #0]
   d795e:	2101      	movs	r1, #1
   d7960:	f000 fc68 	bl	d8234 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d7964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   d7968:	f001 bca4 	b.w	d92b4 <_Z10interruptsv>
}
   d796c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7970 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d7970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7972:	4607      	mov	r7, r0
   d7974:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d7976:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7978:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d797a:	4638      	mov	r0, r7
   d797c:	f7ff ffb3 	bl	d78e6 <_ZN7OneWire8read_bitEv>
   d7980:	b100      	cbz	r0, d7984 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d7982:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d7984:	0064      	lsls	r4, r4, #1
   d7986:	3e01      	subs	r6, #1
   d7988:	b2e4      	uxtb	r4, r4
   d798a:	d1f6      	bne.n	d797a <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d798c:	4628      	mov	r0, r5
   d798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7990 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d7990:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d7992:	2200      	movs	r2, #0
{
   d7994:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d7996:	2155      	movs	r1, #85	; 0x55
{
   d7998:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d799a:	f7ff ffc6 	bl	d792a <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d799e:	1e65      	subs	r5, r4, #1
   d79a0:	3407      	adds	r4, #7
        write(rom[i]);
   d79a2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d79a6:	2200      	movs	r2, #0
   d79a8:	4630      	mov	r0, r6
   d79aa:	f7ff ffbe 	bl	d792a <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d79ae:	42a5      	cmp	r5, r4
   d79b0:	d1f7      	bne.n	d79a2 <_ZN7OneWire6selectEPKh+0x12>
}
   d79b2:	bd70      	pop	{r4, r5, r6, pc}

000d79b4 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d79b4:	2200      	movs	r2, #0
   d79b6:	21cc      	movs	r1, #204	; 0xcc
   d79b8:	f7ff bfb7 	b.w	d792a <_ZN7OneWire5writeEhh>

000d79bc <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d79bc:	2300      	movs	r3, #0
   d79be:	8043      	strh	r3, [r0, #2]
   d79c0:	8083      	strh	r3, [r0, #4]
   d79c2:	80c3      	strh	r3, [r0, #6]
   d79c4:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d79c6:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d79c8:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d79ca:	4770      	bx	lr

000d79cc <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d79cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d79d0:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d79d4:	4604      	mov	r4, r0
   d79d6:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d79d8:	f1b9 0f00 	cmp.w	r9, #0
   d79dc:	d00d      	beq.n	d79fa <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d79de:	2000      	movs	r0, #0
   d79e0:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d79e2:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d79e4:	1ca3      	adds	r3, r4, #2
   d79e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d79ea:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d79ec:	f813 2b01 	ldrb.w	r2, [r3], #1
   d79f0:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d79f4:	42a3      	cmp	r3, r4
   d79f6:	d1f9      	bne.n	d79ec <_ZN7OneWire6searchEPh+0x20>
   d79f8:	e004      	b.n	d7a04 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d79fa:	f7ff ff01 	bl	d7800 <_ZN7OneWire5resetEv>
   d79fe:	b918      	cbnz	r0, d7a08 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d7a00:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d7a02:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d7a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d7a08:	464a      	mov	r2, r9
   d7a0a:	21f0      	movs	r1, #240	; 0xf0
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	f7ff ff8c 	bl	d792a <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d7a12:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d7a14:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d7a16:	4635      	mov	r5, r6
            id_bit = read_bit();
   d7a18:	4620      	mov	r0, r4
   d7a1a:	f7ff ff64 	bl	d78e6 <_ZN7OneWire8read_bitEv>
   d7a1e:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d7a20:	4620      	mov	r0, r4
   d7a22:	f7ff ff60 	bl	d78e6 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d7a26:	2f01      	cmp	r7, #1
   d7a28:	d10f      	bne.n	d7a4a <_ZN7OneWire6searchEPh+0x7e>
   d7a2a:	2801      	cmp	r0, #1
   d7a2c:	d127      	bne.n	d7a7e <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d7a2e:	2d40      	cmp	r5, #64	; 0x40
   d7a30:	d9d5      	bls.n	d79de <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d7a32:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d7a36:	f1b9 0f00 	cmp.w	r9, #0
   d7a3a:	d101      	bne.n	d7a40 <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d7a3c:	2301      	movs	r3, #1
   d7a3e:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d7a40:	78a3      	ldrb	r3, [r4, #2]
   d7a42:	2b00      	cmp	r3, #0
   d7a44:	d0cb      	beq.n	d79de <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d7a46:	2001      	movs	r0, #1
   d7a48:	e7cc      	b.n	d79e4 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d7a4a:	4287      	cmp	r7, r0
   d7a4c:	eb04 030a 	add.w	r3, r4, sl
   d7a50:	d10c      	bne.n	d7a6c <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d7a52:	7aa2      	ldrb	r2, [r4, #10]
   d7a54:	42aa      	cmp	r2, r5
   d7a56:	d90e      	bls.n	d7a76 <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d7a58:	789a      	ldrb	r2, [r3, #2]
   d7a5a:	4216      	tst	r6, r2
   d7a5c:	bf14      	ite	ne
   d7a5e:	2701      	movne	r7, #1
   d7a60:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d7a62:	b967      	cbnz	r7, d7a7e <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d7a64:	2d08      	cmp	r5, #8
   d7a66:	d800      	bhi.n	d7a6a <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d7a68:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d7a6a:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d7a6c:	789a      	ldrb	r2, [r3, #2]
   d7a6e:	ea22 0206 	bic.w	r2, r2, r6
   d7a72:	709a      	strb	r2, [r3, #2]
   d7a74:	e009      	b.n	d7a8a <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d7a76:	bf0c      	ite	eq
   d7a78:	2701      	moveq	r7, #1
   d7a7a:	2700      	movne	r7, #0
   d7a7c:	e7f1      	b.n	d7a62 <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d7a7e:	eb04 020a 	add.w	r2, r4, sl
   d7a82:	2701      	movs	r7, #1
   d7a84:	7893      	ldrb	r3, [r2, #2]
   d7a86:	4333      	orrs	r3, r6
   d7a88:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d7a8a:	4639      	mov	r1, r7
   d7a8c:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d7a8e:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d7a90:	f7ff fef5 	bl	d787e <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d7a94:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d7a98:	bf04      	itt	eq
   d7a9a:	f10a 0a01 	addeq.w	sl, sl, #1
   d7a9e:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d7aa2:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d7aa6:	bf08      	it	eq
   d7aa8:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7aaa:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d7aae:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7ab0:	d9b2      	bls.n	d7a18 <_ZN7OneWire6searchEPh+0x4c>
   d7ab2:	e7bc      	b.n	d7a2e <_ZN7OneWire6searchEPh+0x62>

000d7ab4 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d7ab4:	b530      	push	{r4, r5, lr}
   d7ab6:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d7ab8:	4401      	add	r1, r0
   d7aba:	2000      	movs	r0, #0

    while (len--)
   d7abc:	428a      	cmp	r2, r1
   d7abe:	d013      	beq.n	d7ae8 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d7ac0:	f812 5b01 	ldrb.w	r5, [r2], #1
   d7ac4:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d7ac6:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d7aca:	f013 0f01 	tst.w	r3, #1
   d7ace:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d7ad2:	bf1c      	itt	ne
   d7ad4:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d7ad8:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d7ada:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d7adc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d7ae0:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d7ae4:	d1ef      	bne.n	d7ac6 <_ZN7OneWire4crc8EPhh+0x12>
   d7ae6:	e7e9      	b.n	d7abc <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d7ae8:	bd30      	pop	{r4, r5, pc}

000d7aea <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7aea:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7aec:	4603      	mov	r3, r0
	switch (__op)
   d7aee:	d102      	bne.n	d7af6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7af0:	6001      	str	r1, [r0, #0]
      }
   d7af2:	2000      	movs	r0, #0
   d7af4:	4770      	bx	lr
	  switch (__op)
   d7af6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7af8:	bf04      	itt	eq
   d7afa:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7afe:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7b02:	e7f6      	b.n	d7af2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7b04 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7b04:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7b06:	6842      	ldr	r2, [r0, #4]
   d7b08:	4603      	mov	r3, r0
   d7b0a:	1054      	asrs	r4, r2, #1
   d7b0c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7b10:	07d2      	lsls	r2, r2, #31
   d7b12:	bf48      	it	mi
   d7b14:	590a      	ldrmi	r2, [r1, r4]
   d7b16:	681b      	ldr	r3, [r3, #0]
      }
   d7b18:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7b1c:	bf48      	it	mi
   d7b1e:	58d3      	ldrmi	r3, [r2, r3]
   d7b20:	4718      	bx	r3
	...

000d7b24 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7b24:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7b28:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7b2c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7b2e:	3008      	adds	r0, #8
   d7b30:	f000 fae0 	bl	d80f4 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7b34:	2004      	movs	r0, #4
   d7b36:	f7fc faae 	bl	d4096 <_Znwj>
   d7b3a:	4605      	mov	r5, r0
   d7b3c:	b398      	cbz	r0, d7ba6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7b3e:	491b      	ldr	r1, [pc, #108]	; (d7bac <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7b40:	2014      	movs	r0, #20
   d7b42:	f002 fc94 	bl	da46e <_ZnwjRKSt9nothrow_t>
   d7b46:	b130      	cbz	r0, d7b56 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7b48:	2300      	movs	r3, #0
            exited(false) {
   d7b4a:	e9c0 3300 	strd	r3, r3, [r0]
   d7b4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7b52:	7403      	strb	r3, [r0, #16]
   d7b54:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7b56:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7b58:	b1a0      	cbz	r0, d7b84 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7b5a:	4b15      	ldr	r3, [pc, #84]	; (d7bb0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7b5c:	4915      	ldr	r1, [pc, #84]	; (d7bb4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d7b5e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7b66:	e9cd 0300 	strd	r0, r3, [sp]
   d7b6a:	2202      	movs	r2, #2
   d7b6c:	4b12      	ldr	r3, [pc, #72]	; (d7bb8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d7b6e:	3004      	adds	r0, #4
   d7b70:	f000 faa8 	bl	d80c4 <os_thread_create>
   d7b74:	b930      	cbnz	r0, d7b84 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7b76:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7b78:	7c1b      	ldrb	r3, [r3, #16]
   d7b7a:	b9a3      	cbnz	r3, d7ba6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7b7c:	2001      	movs	r0, #1
   d7b7e:	f000 fb09 	bl	d8194 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d7b82:	e7f8      	b.n	d7b76 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b84:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b86:	2300      	movs	r3, #0
   d7b88:	602b      	str	r3, [r5, #0]
	if (__p != pointer())
   d7b8a:	b164      	cbz	r4, d7ba6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7b8c:	6827      	ldr	r7, [r4, #0]
   d7b8e:	b137      	cbz	r7, d7b9e <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7b90:	4638      	mov	r0, r7
   d7b92:	f7fe fc9b 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7b96:	2110      	movs	r1, #16
   d7b98:	4638      	mov	r0, r7
   d7b9a:	f002 fc66 	bl	da46a <_ZdlPvj>
   d7b9e:	2114      	movs	r1, #20
   d7ba0:	4620      	mov	r0, r4
   d7ba2:	f002 fc62 	bl	da46a <_ZdlPvj>
   d7ba6:	6075      	str	r5, [r6, #4]
}
   d7ba8:	b003      	add	sp, #12
   d7baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bac:	000dbb98 	.word	0x000dbb98
   d7bb0:	000d7dc3 	.word	0x000d7dc3
   d7bb4:	000db8a0 	.word	0x000db8a0
   d7bb8:	000d678f 	.word	0x000d678f

000d7bbc <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7bbc:	f247 5130 	movw	r1, #30000	; 0x7530
   d7bc0:	4a08      	ldr	r2, [pc, #32]	; (d7be4 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7bc2:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7bc4:	4908      	ldr	r1, [pc, #32]	; (d7be8 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7bc6:	6002      	str	r2, [r0, #0]
   d7bc8:	2200      	movs	r2, #0
   d7bca:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7bce:	4907      	ldr	r1, [pc, #28]	; (d7bec <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7bd0:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7bd2:	4907      	ldr	r1, [pc, #28]	; (d7bf0 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7bd4:	6042      	str	r2, [r0, #4]
   d7bd6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7bda:	6181      	str	r1, [r0, #24]
   d7bdc:	8502      	strh	r2, [r0, #40]	; 0x28
   d7bde:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7be2:	4770      	bx	lr
   d7be4:	000db964 	.word	0x000db964
   d7be8:	000d7f2d 	.word	0x000d7f2d
   d7bec:	000d7b05 	.word	0x000d7b05
   d7bf0:	000d7aeb 	.word	0x000d7aeb

000d7bf4 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7bf4:	b510      	push	{r4, lr}
   d7bf6:	4b04      	ldr	r3, [pc, #16]	; (d7c08 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7bf8:	4604      	mov	r4, r0
   d7bfa:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7bfe:	f7fe fc65 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
}
   d7c02:	4620      	mov	r0, r4
   d7c04:	bd10      	pop	{r4, pc}
   d7c06:	bf00      	nop
   d7c08:	000db964 	.word	0x000db964

000d7c0c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7c0c:	b510      	push	{r4, lr}
   d7c0e:	4b03      	ldr	r3, [pc, #12]	; (d7c1c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7c10:	6003      	str	r3, [r0, #0]
   d7c12:	4604      	mov	r4, r0
   d7c14:	f7ff ffee 	bl	d7bf4 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7c18:	4620      	mov	r0, r4
   d7c1a:	bd10      	pop	{r4, pc}
   d7c1c:	000db98c 	.word	0x000db98c

000d7c20 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7c20:	b510      	push	{r4, lr}
   d7c22:	4604      	mov	r4, r0
}
   d7c24:	f7ff fff2 	bl	d7c0c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7c28:	4620      	mov	r0, r4
   d7c2a:	2138      	movs	r1, #56	; 0x38
   d7c2c:	f002 fc1d 	bl	da46a <_ZdlPvj>
   d7c30:	4620      	mov	r0, r4
   d7c32:	bd10      	pop	{r4, pc}

000d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7c34:	6880      	ldr	r0, [r0, #8]
   d7c36:	f000 ba6d 	b.w	d8114 <os_mutex_lock>

000d7c3a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7c3a:	6880      	ldr	r0, [r0, #8]
   d7c3c:	f000 ba72 	b.w	d8124 <os_mutex_unlock>

000d7c40 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7c40:	b510      	push	{r4, lr}
   d7c42:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7c44:	6800      	ldr	r0, [r0, #0]
   d7c46:	f7ff fff8 	bl	d7c3a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	bd10      	pop	{r4, pc}

000d7c4e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7c4e:	b513      	push	{r0, r1, r4, lr}
   d7c50:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7c52:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7c54:	f7ff ffee 	bl	d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7c5a:	88dc      	ldrh	r4, [r3, #6]
   d7c5c:	b2a4      	uxth	r4, r4
   d7c5e:	b10c      	cbz	r4, d7c64 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7c60:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7c64:	a801      	add	r0, sp, #4
   d7c66:	f7ff ffeb 	bl	d7c40 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7c6a:	4620      	mov	r0, r4
   d7c6c:	b002      	add	sp, #8
   d7c6e:	bd10      	pop	{r4, pc}

000d7c70 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d7c70:	b513      	push	{r0, r1, r4, lr}
   d7c72:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7c74:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7c76:	f7ff ffdd 	bl	d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7c7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d7c7e:	b943      	cbnz	r3, d7c92 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7c80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d7c82:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7c84:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7c86:	a801      	add	r0, sp, #4
   d7c88:	f7ff ffda 	bl	d7c40 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	b002      	add	sp, #8
   d7c90:	bd10      	pop	{r4, pc}
	bool result = false;
   d7c92:	2400      	movs	r4, #0
   d7c94:	e7f7      	b.n	d7c86 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7c96 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7c96:	b513      	push	{r0, r1, r4, lr}
   d7c98:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7c9a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7c9c:	f7ff ffca 	bl	d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d7ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d7ca2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7ca4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7ca6:	f7ff ffcb 	bl	d7c40 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7caa:	4620      	mov	r0, r4
   d7cac:	b002      	add	sp, #8
   d7cae:	bd10      	pop	{r4, pc}

000d7cb0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7cb4:	4699      	mov	r9, r3
   d7cb6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7cb8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7cbc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7cc0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7cc4:	4604      	mov	r4, r0
   d7cc6:	460f      	mov	r7, r1
   d7cc8:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7cca:	b913      	cbnz	r3, d7cd2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7ccc:	6803      	ldr	r3, [r0, #0]
   d7cce:	689b      	ldr	r3, [r3, #8]
   d7cd0:	4798      	blx	r3
		data = "";
   d7cd2:	4b31      	ldr	r3, [pc, #196]	; (d7d98 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7cd4:	4638      	mov	r0, r7
		data = "";
   d7cd6:	2e00      	cmp	r6, #0
   d7cd8:	bf08      	it	eq
   d7cda:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7cdc:	f003 f911 	bl	daf02 <strlen>
   d7ce0:	4605      	mov	r5, r0
   d7ce2:	4630      	mov	r0, r6
   d7ce4:	f003 f90d 	bl	daf02 <strlen>
   d7ce8:	4428      	add	r0, r5
   d7cea:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7cee:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7cf0:	bf1c      	itt	ne
   d7cf2:	f025 0503 	bicne.w	r5, r5, #3
   d7cf6:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7cf8:	4633      	mov	r3, r6
   d7cfa:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7cfe:	e9cd 9a00 	strd	r9, sl, [sp]
   d7d02:	4926      	ldr	r1, [pc, #152]	; (d7d9c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7d04:	4826      	ldr	r0, [pc, #152]	; (d7da0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7d06:	463a      	mov	r2, r7
   d7d08:	f7fc fa9d 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7d0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7d0e:	3b08      	subs	r3, #8
   d7d10:	42ab      	cmp	r3, r5
   d7d12:	d212      	bcs.n	d7d3a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7d14:	2400      	movs	r4, #0
}
   d7d16:	4620      	mov	r0, r4
   d7d18:	b006      	add	sp, #24
   d7d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7d1e:	88cb      	ldrh	r3, [r1, #6]
   d7d20:	2b01      	cmp	r3, #1
   d7d22:	d036      	beq.n	d7d92 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7d24:	a805      	add	r0, sp, #20
   d7d26:	f7ff ff8b 	bl	d7c40 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7d2a:	6823      	ldr	r3, [r4, #0]
   d7d2c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7d30:	699b      	ldr	r3, [r3, #24]
   d7d32:	4620      	mov	r0, r4
   d7d34:	4798      	blx	r3
   d7d36:	2800      	cmp	r0, #0
   d7d38:	d0ec      	beq.n	d7d14 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7d3a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7d3c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7d3e:	f7ff ff79 	bl	d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7d42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7d44:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7d48:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7d4a:	1ad2      	subs	r2, r2, r3
   d7d4c:	42aa      	cmp	r2, r5
   d7d4e:	d3e6      	bcc.n	d7d1e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d7d50:	ea48 080a 	orr.w	r8, r8, sl
   d7d54:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7d58:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d7d5e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d7d62:	4639      	mov	r1, r7
   d7d64:	4640      	mov	r0, r8
   d7d66:	f003 f8a7 	bl	daeb8 <strcpy>
				cp += strlen(cp) + 1;
   d7d6a:	4640      	mov	r0, r8
   d7d6c:	f003 f8c9 	bl	daf02 <strlen>
   d7d70:	3001      	adds	r0, #1
				strcpy(cp, data);
   d7d72:	4631      	mov	r1, r6
   d7d74:	4440      	add	r0, r8
   d7d76:	f003 f89f 	bl	daeb8 <strcpy>
				nextFree += size;
   d7d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d7d7e:	441d      	add	r5, r3
   d7d80:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d7d82:	88d3      	ldrh	r3, [r2, #6]
   d7d84:	3301      	adds	r3, #1
   d7d86:	80d3      	strh	r3, [r2, #6]
				return true;
   d7d88:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7d8a:	a805      	add	r0, sp, #20
   d7d8c:	f7ff ff58 	bl	d7c40 <_ZN11StMutexLockD1Ev>
   d7d90:	e7c1      	b.n	d7d16 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d7d92:	2400      	movs	r4, #0
   d7d94:	e7f9      	b.n	d7d8a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d7d96:	bf00      	nop
   d7d98:	000db278 	.word	0x000db278
   d7d9c:	000db8b2 	.word	0x000db8b2
   d7da0:	2003e5e0 	.word	0x2003e5e0

000d7da4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7da8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7dac:	69a3      	ldr	r3, [r4, #24]
   d7dae:	b90b      	cbnz	r3, d7db4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7db0:	f002 fb61 	bl	da476 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7db4:	69e3      	ldr	r3, [r4, #28]
   d7db6:	4621      	mov	r1, r4
   d7db8:	4628      	mov	r0, r5
   d7dba:	4798      	blx	r3
		os_thread_yield();
   d7dbc:	f000 f98a 	bl	d80d4 <os_thread_yield>
	while(true) {
   d7dc0:	e7f4      	b.n	d7dac <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d7dc2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d7dc2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7dc4:	f7ff ffee 	bl	d7da4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7dc8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7dc8:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7dca:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7dce:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7dd0:	4628      	mov	r0, r5
   d7dd2:	f003 f896 	bl	daf02 <strlen>
   d7dd6:	3001      	adds	r0, #1
   d7dd8:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7dda:	4628      	mov	r0, r5
   d7ddc:	f003 f891 	bl	daf02 <strlen>
	size_t offset = start - retainedBuffer;
   d7de0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7de2:	3001      	adds	r0, #1
   d7de4:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d7de6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7de8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7dec:	bf1c      	itt	ne
   d7dee:	f1c3 0304 	rsbne	r3, r3, #4
   d7df2:	18c0      	addne	r0, r0, r3
}
   d7df4:	bd68      	pop	{r3, r5, r6, pc}

000d7df6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7df8:	4604      	mov	r4, r0
   d7dfa:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7dfc:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7dfe:	f7ff ff19 	bl	d7c34 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7e02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7e04:	88fb      	ldrh	r3, [r7, #6]
   d7e06:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7e0a:	b1e6      	cbz	r6, d7e46 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7e0c:	2b01      	cmp	r3, #1
   d7e0e:	d922      	bls.n	d7e56 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7e10:	4629      	mov	r1, r5
   d7e12:	4620      	mov	r0, r4
   d7e14:	f7ff ffd8 	bl	d7dc8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7e18:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7e1a:	4629      	mov	r1, r5
   d7e1c:	4620      	mov	r0, r4
   d7e1e:	f7ff ffd3 	bl	d7dc8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7e22:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7e24:	443a      	add	r2, r7
	if (after > 0) {
   d7e26:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7e28:	4601      	mov	r1, r0
	size_t len = next - start;
   d7e2a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d7e2e:	d002      	beq.n	d7e36 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d7e30:	4628      	mov	r0, r5
   d7e32:	f002 fff1 	bl	dae18 <memmove>
	nextFree -= len;
   d7e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7e38:	1b9b      	subs	r3, r3, r6
   d7e3a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7e3c:	88fb      	ldrh	r3, [r7, #6]
   d7e3e:	3b01      	subs	r3, #1
   d7e40:	80fb      	strh	r3, [r7, #6]
	return true;
   d7e42:	2601      	movs	r6, #1
   d7e44:	e001      	b.n	d7e4a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7e46:	2b00      	cmp	r3, #0
   d7e48:	d1e7      	bne.n	d7e1a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7e4a:	a801      	add	r0, sp, #4
   d7e4c:	f7ff fef8 	bl	d7c40 <_ZN11StMutexLockD1Ev>
}
   d7e50:	4630      	mov	r0, r6
   d7e52:	b003      	add	sp, #12
   d7e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7e56:	2600      	movs	r6, #0
   d7e58:	e7f7      	b.n	d7e4a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7e5c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e60:	460d      	mov	r5, r1
   d7e62:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e64:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7e66:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e68:	f7ff fea8 	bl	d7bbc <_ZN21PublishQueueAsyncBaseC1Ev>
   d7e6c:	4b15      	ldr	r3, [pc, #84]	; (d7ec4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e6e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e72:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e74:	4b14      	ldr	r3, [pc, #80]	; (d7ec8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e76:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e78:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7e7a:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7e7c:	4698      	mov	r8, r3
   d7e7e:	d117      	bne.n	d7eb0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7e80:	88ab      	ldrh	r3, [r5, #4]
   d7e82:	b29b      	uxth	r3, r3
   d7e84:	42b3      	cmp	r3, r6
   d7e86:	d113      	bne.n	d7eb0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7e88:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7e8c:	6367      	str	r7, [r4, #52]	; 0x34
   d7e8e:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7e92:	88eb      	ldrh	r3, [r5, #6]
   d7e94:	fa1f f289 	uxth.w	r2, r9
   d7e98:	b29b      	uxth	r3, r3
   d7e9a:	429a      	cmp	r2, r3
   d7e9c:	d20e      	bcs.n	d7ebc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	f7ff ff91 	bl	d7dc8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7ea6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7ea8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7eaa:	f109 0901 	add.w	r9, r9, #1
   d7eae:	d9f0      	bls.n	d7e92 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7eb0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7eb2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7eb6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7eb8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7eba:	80eb      	strh	r3, [r5, #6]
}
   d7ebc:	4620      	mov	r0, r4
   d7ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ec2:	bf00      	nop
   d7ec4:	000db98c 	.word	0x000db98c
   d7ec8:	d19cab61 	.word	0xd19cab61

000d7ecc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7ecc:	b510      	push	{r4, lr}
   d7ece:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7ed2:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7ed4:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7ed6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7ed8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7eda:	b90a      	cbnz	r2, d7ee0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7edc:	07d9      	lsls	r1, r3, #31
   d7ede:	d505      	bpl.n	d7eec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7ee4:	4b0f      	ldr	r3, [pc, #60]	; (d7f24 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7ee6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7ee8:	4b0f      	ldr	r3, [pc, #60]	; (d7f28 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7eea:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7eec:	ab02      	add	r3, sp, #8
   d7eee:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7ef2:	466a      	mov	r2, sp
   d7ef4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7efc:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7f00:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f04:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f06:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7f0a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f0c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f0e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f10:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7f12:	4618      	mov	r0, r3
   d7f14:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f16:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7f18:	9105      	str	r1, [sp, #20]
   d7f1a:	f7fe fad7 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
	}
   d7f1e:	4620      	mov	r0, r4
   d7f20:	b006      	add	sp, #24
   d7f22:	bd10      	pop	{r4, pc}
   d7f24:	000d7b05 	.word	0x000d7b05
   d7f28:	000d7aeb 	.word	0x000d7aeb

000d7f2c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7f2c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7f2e:	4b05      	ldr	r3, [pc, #20]	; (d7f44 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7f30:	9300      	str	r3, [sp, #0]
   d7f32:	4669      	mov	r1, sp
   d7f34:	2300      	movs	r3, #0
   d7f36:	3010      	adds	r0, #16
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	f7ff ffc7 	bl	d7ecc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7f3e:	b003      	add	sp, #12
   d7f40:	f85d fb04 	ldr.w	pc, [sp], #4
   d7f44:	000d7f75 	.word	0x000d7f75

000d7f48 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7f48:	b513      	push	{r0, r1, r4, lr}
   d7f4a:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7f4c:	f000 f932 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f52:	1ac0      	subs	r0, r0, r3
   d7f54:	68e3      	ldr	r3, [r4, #12]
   d7f56:	4298      	cmp	r0, r3
   d7f58:	d308      	bcc.n	d7f6c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7f5a:	4b05      	ldr	r3, [pc, #20]	; (d7f70 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7f5c:	9300      	str	r3, [sp, #0]
   d7f5e:	4669      	mov	r1, sp
   d7f60:	2300      	movs	r3, #0
   d7f62:	f104 0010 	add.w	r0, r4, #16
   d7f66:	9301      	str	r3, [sp, #4]
   d7f68:	f7ff ffb0 	bl	d7ecc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7f6c:	b002      	add	sp, #8
   d7f6e:	bd10      	pop	{r4, pc}
   d7f70:	000d7f75 	.word	0x000d7f75

000d7f74 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7f78:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7f7c:	b086      	sub	sp, #24
   d7f7e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7f80:	2b00      	cmp	r3, #0
   d7f82:	d164      	bne.n	d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f84:	f000 fb7a 	bl	d867c <spark_cloud_flag_connected>
   d7f88:	2800      	cmp	r0, #0
   d7f8a:	d060      	beq.n	d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7f8c:	f000 f912 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
   d7f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f92:	1ac0      	subs	r0, r0, r3
   d7f94:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7f98:	4298      	cmp	r0, r3
   d7f9a:	d958      	bls.n	d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7f9c:	6823      	ldr	r3, [r4, #0]
   d7f9e:	4620      	mov	r0, r4
   d7fa0:	695b      	ldr	r3, [r3, #20]
   d7fa2:	4798      	blx	r3
		if (data) {
   d7fa4:	4605      	mov	r5, r0
   d7fa6:	2800      	cmp	r0, #0
   d7fa8:	d051      	beq.n	d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7faa:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7fae:	2301      	movs	r3, #1
   d7fb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7fb4:	4638      	mov	r0, r7
   d7fb6:	f002 ffa4 	bl	daf02 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7fba:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fbe:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7fc2:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fc4:	682b      	ldr	r3, [r5, #0]
   d7fc6:	492b      	ldr	r1, [pc, #172]	; (d8074 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7fc8:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7fca:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7fcc:	4633      	mov	r3, r6
   d7fce:	482a      	ldr	r0, [pc, #168]	; (d8078 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7fd0:	463a      	mov	r2, r7
   d7fd2:	f7fc f938 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7fd6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7fd8:	f88d 8000 	strb.w	r8, [sp]
   d7fdc:	4632      	mov	r2, r6
   d7fde:	4639      	mov	r1, r7
   d7fe0:	a802      	add	r0, sp, #8
   d7fe2:	f000 ff27 	bl	d8e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7fe6:	9d02      	ldr	r5, [sp, #8]
   d7fe8:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7fea:	b91b      	cbnz	r3, d7ff4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7fec:	2001      	movs	r0, #1
   d7fee:	f000 fc4d 	bl	d888c <delay>
			while(!request.isDone()) {
   d7ff2:	e7f8      	b.n	d7fe6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7ff4:	2000      	movs	r0, #0
   d7ff6:	f000 facf 	bl	d8598 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7ffa:	b120      	cbz	r0, d8006 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7ffc:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7ffe:	b913      	cbnz	r3, d8006 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d8000:	f000 fb2c 	bl	d865c <spark_process>
    }
   d8004:	e7fa      	b.n	d7ffc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8006:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d8008:	2b01      	cmp	r3, #1
   d800a:	d123      	bne.n	d8054 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d800c:	491b      	ldr	r1, [pc, #108]	; (d807c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d800e:	481a      	ldr	r0, [pc, #104]	; (d8078 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d8010:	f7fc f919 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d8014:	6823      	ldr	r3, [r4, #0]
   d8016:	2100      	movs	r1, #0
   d8018:	699b      	ldr	r3, [r3, #24]
   d801a:	4620      	mov	r0, r4
   d801c:	4798      	blx	r3
			isSending = false;
   d801e:	2300      	movs	r3, #0
   d8020:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d8024:	f000 f8c6 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d8028:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d802a:	9c03      	ldr	r4, [sp, #12]
   d802c:	b17c      	cbz	r4, d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d802e:	6863      	ldr	r3, [r4, #4]
   d8030:	3b01      	subs	r3, #1
   d8032:	6063      	str	r3, [r4, #4]
   d8034:	b95b      	cbnz	r3, d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d8036:	6823      	ldr	r3, [r4, #0]
   d8038:	4620      	mov	r0, r4
   d803a:	689b      	ldr	r3, [r3, #8]
   d803c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d803e:	68a3      	ldr	r3, [r4, #8]
   d8040:	3b01      	subs	r3, #1
   d8042:	60a3      	str	r3, [r4, #8]
   d8044:	b91b      	cbnz	r3, d804e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d8046:	6823      	ldr	r3, [r4, #0]
   d8048:	4620      	mov	r0, r4
   d804a:	68db      	ldr	r3, [r3, #12]
   d804c:	4798      	blx	r3
}
   d804e:	b006      	add	sp, #24
   d8050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d8054:	68e2      	ldr	r2, [r4, #12]
   d8056:	490a      	ldr	r1, [pc, #40]	; (d8080 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d8058:	4807      	ldr	r0, [pc, #28]	; (d8078 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d805a:	f7fc f8f4 	bl	d4246 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d805e:	4b09      	ldr	r3, [pc, #36]	; (d8084 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d8060:	9304      	str	r3, [sp, #16]
   d8062:	a904      	add	r1, sp, #16
   d8064:	2300      	movs	r3, #0
   d8066:	f104 0010 	add.w	r0, r4, #16
   d806a:	9305      	str	r3, [sp, #20]
   d806c:	f7ff ff2e 	bl	d7ecc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d8070:	e7d5      	b.n	d801e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d8072:	bf00      	nop
   d8074:	000db8f3 	.word	0x000db8f3
   d8078:	2003e5e0 	.word	0x2003e5e0
   d807c:	000db914 	.word	0x000db914
   d8080:	000db92b 	.word	0x000db92b
   d8084:	000d7f49 	.word	0x000d7f49

000d8088 <_GLOBAL__sub_I_pubqLogger>:
   d8088:	4b01      	ldr	r3, [pc, #4]	; (d8090 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d808a:	4a02      	ldr	r2, [pc, #8]	; (d8094 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d808c:	601a      	str	r2, [r3, #0]
}
   d808e:	4770      	bx	lr
   d8090:	2003e5e0 	.word	0x2003e5e0
   d8094:	000db952 	.word	0x000db952

000d8098 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d8098:	4b01      	ldr	r3, [pc, #4]	; (d80a0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d809a:	2201      	movs	r2, #1
   d809c:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d809e:	4770      	bx	lr
   d80a0:	2003e5e4 	.word	0x2003e5e4

000d80a4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d80a4:	b508      	push	{r3, lr}
   d80a6:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <cellular_signal+0xc>)
   d80a8:	681b      	ldr	r3, [r3, #0]
   d80aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80ac:	9301      	str	r3, [sp, #4]
   d80ae:	bd08      	pop	{r3, pc}
   d80b0:	00030274 	.word	0x00030274

000d80b4 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d80b4:	b508      	push	{r3, lr}
   d80b6:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <cellular_command+0xc>)
   d80b8:	681b      	ldr	r3, [r3, #0]
   d80ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d80bc:	9301      	str	r3, [sp, #4]
   d80be:	bd08      	pop	{r3, pc}
   d80c0:	00030274 	.word	0x00030274

000d80c4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <os_thread_create+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	685b      	ldr	r3, [r3, #4]
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	00030248 	.word	0x00030248

000d80d4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <os_thread_yield+0xc>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	68db      	ldr	r3, [r3, #12]
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	bd08      	pop	{r3, pc}
   d80e0:	00030248 	.word	0x00030248

000d80e4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d80e4:	b508      	push	{r3, lr}
   d80e6:	4b02      	ldr	r3, [pc, #8]	; (d80f0 <os_thread_scheduling+0xc>)
   d80e8:	681b      	ldr	r3, [r3, #0]
   d80ea:	69db      	ldr	r3, [r3, #28]
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	bd08      	pop	{r3, pc}
   d80f0:	00030248 	.word	0x00030248

000d80f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d80f4:	b508      	push	{r3, lr}
   d80f6:	4b02      	ldr	r3, [pc, #8]	; (d8100 <os_mutex_create+0xc>)
   d80f8:	681b      	ldr	r3, [r3, #0]
   d80fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	bd08      	pop	{r3, pc}
   d8100:	00030248 	.word	0x00030248

000d8104 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <os_mutex_destroy+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	00030248 	.word	0x00030248

000d8114 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <os_mutex_lock+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	00030248 	.word	0x00030248

000d8124 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <os_mutex_unlock+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	00030248 	.word	0x00030248

000d8134 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b02      	ldr	r3, [pc, #8]	; (d8140 <os_mutex_recursive_create+0xc>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d813c:	9301      	str	r3, [sp, #4]
   d813e:	bd08      	pop	{r3, pc}
   d8140:	00030248 	.word	0x00030248

000d8144 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <os_mutex_recursive_destroy+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030248 	.word	0x00030248

000d8154 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <os_thread_exit+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030248 	.word	0x00030248

000d8164 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <HAL_Feature_Set+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030234 	.word	0x00030234

000d8174 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030234 	.word	0x00030234

000d8184 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <HAL_RNG_GetRandomNumber+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	685b      	ldr	r3, [r3, #4]
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030218 	.word	0x00030218

000d8194 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <HAL_Delay_Milliseconds+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	689b      	ldr	r3, [r3, #8]
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030218 	.word	0x00030218

000d81a4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <HAL_Delay_Microseconds+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	68db      	ldr	r3, [r3, #12]
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030218 	.word	0x00030218

000d81b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	695b      	ldr	r3, [r3, #20]
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	bd08      	pop	{r3, pc}
   d81c0:	00030218 	.word	0x00030218

000d81c4 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d81c4:	b508      	push	{r3, lr}
   d81c6:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <HAL_disable_irq+0xc>)
   d81c8:	681b      	ldr	r3, [r3, #0]
   d81ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d81cc:	9301      	str	r3, [sp, #4]
   d81ce:	bd08      	pop	{r3, pc}
   d81d0:	00030218 	.word	0x00030218

000d81d4 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <HAL_enable_irq+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030218 	.word	0x00030218

000d81e4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <hal_rtc_time_is_valid+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030218 	.word	0x00030218

000d81f4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <hal_timer_millis+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030218 	.word	0x00030218

000d8204 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <hal_rtc_get_time+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030218 	.word	0x00030218

000d8214 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b02      	ldr	r3, [pc, #8]	; (d8220 <hal_rtc_set_time+0xc>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d821c:	9301      	str	r3, [sp, #4]
   d821e:	bd08      	pop	{r3, pc}
   d8220:	00030218 	.word	0x00030218

000d8224 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d8224:	b508      	push	{r3, lr}
   d8226:	4b02      	ldr	r3, [pc, #8]	; (d8230 <HAL_Pin_Map+0xc>)
   d8228:	681b      	ldr	r3, [r3, #0]
   d822a:	681b      	ldr	r3, [r3, #0]
   d822c:	9301      	str	r3, [sp, #4]
   d822e:	bd08      	pop	{r3, pc}
   d8230:	0003022c 	.word	0x0003022c

000d8234 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d8234:	b508      	push	{r3, lr}
   d8236:	4b02      	ldr	r3, [pc, #8]	; (d8240 <HAL_Pin_Mode+0xc>)
   d8238:	681b      	ldr	r3, [r3, #0]
   d823a:	689b      	ldr	r3, [r3, #8]
   d823c:	9301      	str	r3, [sp, #4]
   d823e:	bd08      	pop	{r3, pc}
   d8240:	0003022c 	.word	0x0003022c

000d8244 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d8244:	b508      	push	{r3, lr}
   d8246:	4b02      	ldr	r3, [pc, #8]	; (d8250 <HAL_Get_Pin_Mode+0xc>)
   d8248:	681b      	ldr	r3, [r3, #0]
   d824a:	68db      	ldr	r3, [r3, #12]
   d824c:	9301      	str	r3, [sp, #4]
   d824e:	bd08      	pop	{r3, pc}
   d8250:	0003022c 	.word	0x0003022c

000d8254 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <HAL_GPIO_Write+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	691b      	ldr	r3, [r3, #16]
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	0003022c 	.word	0x0003022c

000d8264 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <HAL_GPIO_Read+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	695b      	ldr	r3, [r3, #20]
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	0003022c 	.word	0x0003022c

000d8274 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <HAL_Interrupts_Enable_All+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	6a1b      	ldr	r3, [r3, #32]
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	0003022c 	.word	0x0003022c

000d8284 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <HAL_Interrupts_Disable_All+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	0003022c 	.word	0x0003022c

000d8294 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <hal_i2c_begin+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	68db      	ldr	r3, [r3, #12]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030228 	.word	0x00030228

000d82a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <hal_i2c_begin_transmission+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	699b      	ldr	r3, [r3, #24]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030228 	.word	0x00030228

000d82b4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <hal_i2c_end_transmission+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	69db      	ldr	r3, [r3, #28]
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030228 	.word	0x00030228

000d82c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <hal_i2c_write+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	6a1b      	ldr	r3, [r3, #32]
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030228 	.word	0x00030228

000d82d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <hal_i2c_available+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030228 	.word	0x00030228

000d82e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <hal_i2c_read+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030228 	.word	0x00030228

000d82f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <hal_i2c_peek+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030228 	.word	0x00030228

000d8304 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <hal_i2c_flush+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030228 	.word	0x00030228

000d8314 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <hal_i2c_is_enabled+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030228 	.word	0x00030228

000d8324 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <hal_i2c_init+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030228 	.word	0x00030228

000d8334 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <hal_i2c_lock+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030228 	.word	0x00030228

000d8344 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <hal_i2c_unlock+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	00030228 	.word	0x00030228

000d8354 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <hal_i2c_request_ex+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	00030228 	.word	0x00030228

000d8364 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <inet_inet_ntop+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	695b      	ldr	r3, [r3, #20]
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	00030264 	.word	0x00030264

000d8374 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <netdb_freeaddrinfo+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	689b      	ldr	r3, [r3, #8]
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	00030268 	.word	0x00030268

000d8384 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <netdb_getaddrinfo+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	68db      	ldr	r3, [r3, #12]
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	00030268 	.word	0x00030268

000d8394 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <hal_spi_begin+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	681b      	ldr	r3, [r3, #0]
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	00030230 	.word	0x00030230

000d83a4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <hal_spi_transfer+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	695b      	ldr	r3, [r3, #20]
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	00030230 	.word	0x00030230

000d83b4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <hal_spi_init+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	69db      	ldr	r3, [r3, #28]
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	00030230 	.word	0x00030230

000d83c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <hal_spi_is_enabled+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	6a1b      	ldr	r3, [r3, #32]
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	00030230 	.word	0x00030230

000d83d4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <hal_spi_info+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	00030230 	.word	0x00030230

000d83e4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <hal_spi_set_settings+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	00030230 	.word	0x00030230

000d83f4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d83f4:	b508      	push	{r3, lr}
   d83f6:	4b02      	ldr	r3, [pc, #8]	; (d8400 <hal_spi_acquire+0xc>)
   d83f8:	681b      	ldr	r3, [r3, #0]
   d83fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d83fc:	9301      	str	r3, [sp, #4]
   d83fe:	bd08      	pop	{r3, pc}
   d8400:	00030230 	.word	0x00030230

000d8404 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8404:	b508      	push	{r3, lr}
   d8406:	4b02      	ldr	r3, [pc, #8]	; (d8410 <hal_spi_release+0xc>)
   d8408:	681b      	ldr	r3, [r3, #0]
   d840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d840c:	9301      	str	r3, [sp, #4]
   d840e:	bd08      	pop	{r3, pc}
   d8410:	00030230 	.word	0x00030230

000d8414 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8414:	b508      	push	{r3, lr}
   d8416:	4b02      	ldr	r3, [pc, #8]	; (d8420 <hal_usart_init+0xc>)
   d8418:	681b      	ldr	r3, [r3, #0]
   d841a:	681b      	ldr	r3, [r3, #0]
   d841c:	9301      	str	r3, [sp, #4]
   d841e:	bd08      	pop	{r3, pc}
   d8420:	0003023c 	.word	0x0003023c

000d8424 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8424:	b508      	push	{r3, lr}
   d8426:	4b02      	ldr	r3, [pc, #8]	; (d8430 <hal_usart_write+0xc>)
   d8428:	681b      	ldr	r3, [r3, #0]
   d842a:	68db      	ldr	r3, [r3, #12]
   d842c:	9301      	str	r3, [sp, #4]
   d842e:	bd08      	pop	{r3, pc}
   d8430:	0003023c 	.word	0x0003023c

000d8434 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8434:	b508      	push	{r3, lr}
   d8436:	4b02      	ldr	r3, [pc, #8]	; (d8440 <hal_usart_available+0xc>)
   d8438:	681b      	ldr	r3, [r3, #0]
   d843a:	691b      	ldr	r3, [r3, #16]
   d843c:	9301      	str	r3, [sp, #4]
   d843e:	bd08      	pop	{r3, pc}
   d8440:	0003023c 	.word	0x0003023c

000d8444 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8444:	b508      	push	{r3, lr}
   d8446:	4b02      	ldr	r3, [pc, #8]	; (d8450 <hal_usart_read+0xc>)
   d8448:	681b      	ldr	r3, [r3, #0]
   d844a:	695b      	ldr	r3, [r3, #20]
   d844c:	9301      	str	r3, [sp, #4]
   d844e:	bd08      	pop	{r3, pc}
   d8450:	0003023c 	.word	0x0003023c

000d8454 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8454:	b508      	push	{r3, lr}
   d8456:	4b02      	ldr	r3, [pc, #8]	; (d8460 <hal_usart_peek+0xc>)
   d8458:	681b      	ldr	r3, [r3, #0]
   d845a:	699b      	ldr	r3, [r3, #24]
   d845c:	9301      	str	r3, [sp, #4]
   d845e:	bd08      	pop	{r3, pc}
   d8460:	0003023c 	.word	0x0003023c

000d8464 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8464:	b508      	push	{r3, lr}
   d8466:	4b02      	ldr	r3, [pc, #8]	; (d8470 <hal_usart_flush+0xc>)
   d8468:	681b      	ldr	r3, [r3, #0]
   d846a:	69db      	ldr	r3, [r3, #28]
   d846c:	9301      	str	r3, [sp, #4]
   d846e:	bd08      	pop	{r3, pc}
   d8470:	0003023c 	.word	0x0003023c

000d8474 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8474:	b508      	push	{r3, lr}
   d8476:	4b02      	ldr	r3, [pc, #8]	; (d8480 <hal_usart_is_enabled+0xc>)
   d8478:	681b      	ldr	r3, [r3, #0]
   d847a:	6a1b      	ldr	r3, [r3, #32]
   d847c:	9301      	str	r3, [sp, #4]
   d847e:	bd08      	pop	{r3, pc}
   d8480:	0003023c 	.word	0x0003023c

000d8484 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8484:	b508      	push	{r3, lr}
   d8486:	4b02      	ldr	r3, [pc, #8]	; (d8490 <hal_usart_available_data_for_write+0xc>)
   d8488:	681b      	ldr	r3, [r3, #0]
   d848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d848c:	9301      	str	r3, [sp, #4]
   d848e:	bd08      	pop	{r3, pc}
   d8490:	0003023c 	.word	0x0003023c

000d8494 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8494:	b508      	push	{r3, lr}
   d8496:	4b02      	ldr	r3, [pc, #8]	; (d84a0 <HAL_USB_USART_Init+0xc>)
   d8498:	681b      	ldr	r3, [r3, #0]
   d849a:	681b      	ldr	r3, [r3, #0]
   d849c:	9301      	str	r3, [sp, #4]
   d849e:	bd08      	pop	{r3, pc}
   d84a0:	0003024c 	.word	0x0003024c

000d84a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d84a4:	b508      	push	{r3, lr}
   d84a6:	4b02      	ldr	r3, [pc, #8]	; (d84b0 <HAL_USB_USART_Available_Data+0xc>)
   d84a8:	681b      	ldr	r3, [r3, #0]
   d84aa:	691b      	ldr	r3, [r3, #16]
   d84ac:	9301      	str	r3, [sp, #4]
   d84ae:	bd08      	pop	{r3, pc}
   d84b0:	0003024c 	.word	0x0003024c

000d84b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d84b4:	b508      	push	{r3, lr}
   d84b6:	4b02      	ldr	r3, [pc, #8]	; (d84c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d84b8:	681b      	ldr	r3, [r3, #0]
   d84ba:	695b      	ldr	r3, [r3, #20]
   d84bc:	9301      	str	r3, [sp, #4]
   d84be:	bd08      	pop	{r3, pc}
   d84c0:	0003024c 	.word	0x0003024c

000d84c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84c4:	b508      	push	{r3, lr}
   d84c6:	4b02      	ldr	r3, [pc, #8]	; (d84d0 <HAL_USB_USART_Receive_Data+0xc>)
   d84c8:	681b      	ldr	r3, [r3, #0]
   d84ca:	699b      	ldr	r3, [r3, #24]
   d84cc:	9301      	str	r3, [sp, #4]
   d84ce:	bd08      	pop	{r3, pc}
   d84d0:	0003024c 	.word	0x0003024c

000d84d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d84d4:	b508      	push	{r3, lr}
   d84d6:	4b02      	ldr	r3, [pc, #8]	; (d84e0 <HAL_USB_USART_Send_Data+0xc>)
   d84d8:	681b      	ldr	r3, [r3, #0]
   d84da:	69db      	ldr	r3, [r3, #28]
   d84dc:	9301      	str	r3, [sp, #4]
   d84de:	bd08      	pop	{r3, pc}
   d84e0:	0003024c 	.word	0x0003024c

000d84e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d84e4:	b508      	push	{r3, lr}
   d84e6:	4b02      	ldr	r3, [pc, #8]	; (d84f0 <HAL_USB_USART_Flush_Data+0xc>)
   d84e8:	681b      	ldr	r3, [r3, #0]
   d84ea:	6a1b      	ldr	r3, [r3, #32]
   d84ec:	9301      	str	r3, [sp, #4]
   d84ee:	bd08      	pop	{r3, pc}
   d84f0:	0003024c 	.word	0x0003024c

000d84f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d84f4:	b508      	push	{r3, lr}
   d84f6:	4b02      	ldr	r3, [pc, #8]	; (d8500 <panic_+0xc>)
   d84f8:	681b      	ldr	r3, [r3, #0]
   d84fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d84fc:	9301      	str	r3, [sp, #4]
   d84fe:	bd08      	pop	{r3, pc}
   d8500:	00030260 	.word	0x00030260

000d8504 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8504:	b508      	push	{r3, lr}
   d8506:	4b02      	ldr	r3, [pc, #8]	; (d8510 <log_message+0xc>)
   d8508:	681b      	ldr	r3, [r3, #0]
   d850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d850c:	9301      	str	r3, [sp, #4]
   d850e:	bd08      	pop	{r3, pc}
   d8510:	00030260 	.word	0x00030260

000d8514 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8514:	b508      	push	{r3, lr}
   d8516:	4b02      	ldr	r3, [pc, #8]	; (d8520 <log_message_v+0xc>)
   d8518:	681b      	ldr	r3, [r3, #0]
   d851a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d851c:	9301      	str	r3, [sp, #4]
   d851e:	bd08      	pop	{r3, pc}
   d8520:	00030260 	.word	0x00030260

000d8524 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8524:	b508      	push	{r3, lr}
   d8526:	4b03      	ldr	r3, [pc, #12]	; (d8534 <diag_get_source+0x10>)
   d8528:	681b      	ldr	r3, [r3, #0]
   d852a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d852e:	9301      	str	r3, [sp, #4]
   d8530:	bd08      	pop	{r3, pc}
   d8532:	0000      	.short	0x0000
   d8534:	00030260 	.word	0x00030260

000d8538 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8538:	b508      	push	{r3, lr}
   d853a:	4b02      	ldr	r3, [pc, #8]	; (d8544 <system_mode+0xc>)
   d853c:	681b      	ldr	r3, [r3, #0]
   d853e:	681b      	ldr	r3, [r3, #0]
   d8540:	9301      	str	r3, [sp, #4]
   d8542:	bd08      	pop	{r3, pc}
   d8544:	00030220 	.word	0x00030220

000d8548 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8548:	b508      	push	{r3, lr}
   d854a:	4b02      	ldr	r3, [pc, #8]	; (d8554 <set_system_mode+0xc>)
   d854c:	681b      	ldr	r3, [r3, #0]
   d854e:	685b      	ldr	r3, [r3, #4]
   d8550:	9301      	str	r3, [sp, #4]
   d8552:	bd08      	pop	{r3, pc}
   d8554:	00030220 	.word	0x00030220

000d8558 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8558:	b508      	push	{r3, lr}
   d855a:	4b02      	ldr	r3, [pc, #8]	; (d8564 <system_delay_ms+0xc>)
   d855c:	681b      	ldr	r3, [r3, #0]
   d855e:	695b      	ldr	r3, [r3, #20]
   d8560:	9301      	str	r3, [sp, #4]
   d8562:	bd08      	pop	{r3, pc}
   d8564:	00030220 	.word	0x00030220

000d8568 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d8568:	b508      	push	{r3, lr}
   d856a:	4b02      	ldr	r3, [pc, #8]	; (d8574 <system_sleep+0xc>)
   d856c:	681b      	ldr	r3, [r3, #0]
   d856e:	699b      	ldr	r3, [r3, #24]
   d8570:	9301      	str	r3, [sp, #4]
   d8572:	bd08      	pop	{r3, pc}
   d8574:	00030220 	.word	0x00030220

000d8578 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8578:	b508      	push	{r3, lr}
   d857a:	4b02      	ldr	r3, [pc, #8]	; (d8584 <system_subscribe_event+0xc>)
   d857c:	681b      	ldr	r3, [r3, #0]
   d857e:	6a1b      	ldr	r3, [r3, #32]
   d8580:	9301      	str	r3, [sp, #4]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	00030220 	.word	0x00030220

000d8588 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8588:	b508      	push	{r3, lr}
   d858a:	4b02      	ldr	r3, [pc, #8]	; (d8594 <system_thread_set_state+0xc>)
   d858c:	681b      	ldr	r3, [r3, #0]
   d858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8590:	9301      	str	r3, [sp, #4]
   d8592:	bd08      	pop	{r3, pc}
   d8594:	00030220 	.word	0x00030220

000d8598 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8598:	b508      	push	{r3, lr}
   d859a:	4b02      	ldr	r3, [pc, #8]	; (d85a4 <application_thread_current+0xc>)
   d859c:	681b      	ldr	r3, [r3, #0]
   d859e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d85a0:	9301      	str	r3, [sp, #4]
   d85a2:	bd08      	pop	{r3, pc}
   d85a4:	00030220 	.word	0x00030220

000d85a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d85a8:	b508      	push	{r3, lr}
   d85aa:	4b02      	ldr	r3, [pc, #8]	; (d85b4 <application_thread_invoke+0xc>)
   d85ac:	681b      	ldr	r3, [r3, #0]
   d85ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d85b0:	9301      	str	r3, [sp, #4]
   d85b2:	bd08      	pop	{r3, pc}
   d85b4:	00030220 	.word	0x00030220

000d85b8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d85b8:	b508      	push	{r3, lr}
   d85ba:	4b02      	ldr	r3, [pc, #8]	; (d85c4 <system_thread_get_state+0xc>)
   d85bc:	681b      	ldr	r3, [r3, #0]
   d85be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d85c0:	9301      	str	r3, [sp, #4]
   d85c2:	bd08      	pop	{r3, pc}
   d85c4:	00030220 	.word	0x00030220

000d85c8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d85c8:	b508      	push	{r3, lr}
   d85ca:	4b02      	ldr	r3, [pc, #8]	; (d85d4 <system_notify_time_changed+0xc>)
   d85cc:	681b      	ldr	r3, [r3, #0]
   d85ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d85d0:	9301      	str	r3, [sp, #4]
   d85d2:	bd08      	pop	{r3, pc}
   d85d4:	00030220 	.word	0x00030220

000d85d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d85d8:	b508      	push	{r3, lr}
   d85da:	4b03      	ldr	r3, [pc, #12]	; (d85e8 <system_ctrl_set_app_request_handler+0x10>)
   d85dc:	681b      	ldr	r3, [r3, #0]
   d85de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d85e2:	9301      	str	r3, [sp, #4]
   d85e4:	bd08      	pop	{r3, pc}
   d85e6:	0000      	.short	0x0000
   d85e8:	00030220 	.word	0x00030220

000d85ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d85ec:	b508      	push	{r3, lr}
   d85ee:	4b03      	ldr	r3, [pc, #12]	; (d85fc <system_ctrl_set_result+0x10>)
   d85f0:	681b      	ldr	r3, [r3, #0]
   d85f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d85f6:	9301      	str	r3, [sp, #4]
   d85f8:	bd08      	pop	{r3, pc}
   d85fa:	0000      	.short	0x0000
   d85fc:	00030220 	.word	0x00030220

000d8600 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8600:	b508      	push	{r3, lr}
   d8602:	4b03      	ldr	r3, [pc, #12]	; (d8610 <system_power_management_set_config+0x10>)
   d8604:	681b      	ldr	r3, [r3, #0]
   d8606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d860a:	9301      	str	r3, [sp, #4]
   d860c:	bd08      	pop	{r3, pc}
   d860e:	0000      	.short	0x0000
   d8610:	00030220 	.word	0x00030220

000d8614 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8614:	b508      	push	{r3, lr}
   d8616:	4b03      	ldr	r3, [pc, #12]	; (d8624 <system_sleep_ext+0x10>)
   d8618:	681b      	ldr	r3, [r3, #0]
   d861a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d861e:	9301      	str	r3, [sp, #4]
   d8620:	bd08      	pop	{r3, pc}
   d8622:	0000      	.short	0x0000
   d8624:	00030220 	.word	0x00030220

000d8628 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8628:	b508      	push	{r3, lr}
   d862a:	4b03      	ldr	r3, [pc, #12]	; (d8638 <system_reset+0x10>)
   d862c:	681b      	ldr	r3, [r3, #0]
   d862e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8632:	9301      	str	r3, [sp, #4]
   d8634:	bd08      	pop	{r3, pc}
   d8636:	0000      	.short	0x0000
   d8638:	00030220 	.word	0x00030220

000d863c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d863c:	b508      	push	{r3, lr}
   d863e:	4b02      	ldr	r3, [pc, #8]	; (d8648 <spark_variable+0xc>)
   d8640:	681b      	ldr	r3, [r3, #0]
   d8642:	681b      	ldr	r3, [r3, #0]
   d8644:	9301      	str	r3, [sp, #4]
   d8646:	bd08      	pop	{r3, pc}
   d8648:	00030244 	.word	0x00030244

000d864c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d864c:	b508      	push	{r3, lr}
   d864e:	4b02      	ldr	r3, [pc, #8]	; (d8658 <spark_function+0xc>)
   d8650:	681b      	ldr	r3, [r3, #0]
   d8652:	685b      	ldr	r3, [r3, #4]
   d8654:	9301      	str	r3, [sp, #4]
   d8656:	bd08      	pop	{r3, pc}
   d8658:	00030244 	.word	0x00030244

000d865c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d865c:	b508      	push	{r3, lr}
   d865e:	4b02      	ldr	r3, [pc, #8]	; (d8668 <spark_process+0xc>)
   d8660:	681b      	ldr	r3, [r3, #0]
   d8662:	689b      	ldr	r3, [r3, #8]
   d8664:	9301      	str	r3, [sp, #4]
   d8666:	bd08      	pop	{r3, pc}
   d8668:	00030244 	.word	0x00030244

000d866c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d866c:	b508      	push	{r3, lr}
   d866e:	4b02      	ldr	r3, [pc, #8]	; (d8678 <spark_cloud_flag_connect+0xc>)
   d8670:	681b      	ldr	r3, [r3, #0]
   d8672:	68db      	ldr	r3, [r3, #12]
   d8674:	9301      	str	r3, [sp, #4]
   d8676:	bd08      	pop	{r3, pc}
   d8678:	00030244 	.word	0x00030244

000d867c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d867c:	b508      	push	{r3, lr}
   d867e:	4b02      	ldr	r3, [pc, #8]	; (d8688 <spark_cloud_flag_connected+0xc>)
   d8680:	681b      	ldr	r3, [r3, #0]
   d8682:	695b      	ldr	r3, [r3, #20]
   d8684:	9301      	str	r3, [sp, #4]
   d8686:	bd08      	pop	{r3, pc}
   d8688:	00030244 	.word	0x00030244

000d868c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d868c:	b508      	push	{r3, lr}
   d868e:	4b02      	ldr	r3, [pc, #8]	; (d8698 <spark_deviceID+0xc>)
   d8690:	681b      	ldr	r3, [r3, #0]
   d8692:	69db      	ldr	r3, [r3, #28]
   d8694:	9301      	str	r3, [sp, #4]
   d8696:	bd08      	pop	{r3, pc}
   d8698:	00030244 	.word	0x00030244

000d869c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d869c:	b508      	push	{r3, lr}
   d869e:	4b02      	ldr	r3, [pc, #8]	; (d86a8 <spark_send_event+0xc>)
   d86a0:	681b      	ldr	r3, [r3, #0]
   d86a2:	6a1b      	ldr	r3, [r3, #32]
   d86a4:	9301      	str	r3, [sp, #4]
   d86a6:	bd08      	pop	{r3, pc}
   d86a8:	00030244 	.word	0x00030244

000d86ac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d86ac:	b508      	push	{r3, lr}
   d86ae:	4b02      	ldr	r3, [pc, #8]	; (d86b8 <spark_subscribe+0xc>)
   d86b0:	681b      	ldr	r3, [r3, #0]
   d86b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d86b4:	9301      	str	r3, [sp, #4]
   d86b6:	bd08      	pop	{r3, pc}
   d86b8:	00030244 	.word	0x00030244

000d86bc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d86bc:	b508      	push	{r3, lr}
   d86be:	4b02      	ldr	r3, [pc, #8]	; (d86c8 <spark_sync_time+0xc>)
   d86c0:	681b      	ldr	r3, [r3, #0]
   d86c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d86c4:	9301      	str	r3, [sp, #4]
   d86c6:	bd08      	pop	{r3, pc}
   d86c8:	00030244 	.word	0x00030244

000d86cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d86cc:	b508      	push	{r3, lr}
   d86ce:	4b02      	ldr	r3, [pc, #8]	; (d86d8 <spark_sync_time_pending+0xc>)
   d86d0:	681b      	ldr	r3, [r3, #0]
   d86d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d86d4:	9301      	str	r3, [sp, #4]
   d86d6:	bd08      	pop	{r3, pc}
   d86d8:	00030244 	.word	0x00030244

000d86dc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d86dc:	b508      	push	{r3, lr}
   d86de:	4b02      	ldr	r3, [pc, #8]	; (d86e8 <spark_sync_time_last+0xc>)
   d86e0:	681b      	ldr	r3, [r3, #0]
   d86e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d86e4:	9301      	str	r3, [sp, #4]
   d86e6:	bd08      	pop	{r3, pc}
   d86e8:	00030244 	.word	0x00030244

000d86ec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d86ec:	b508      	push	{r3, lr}
   d86ee:	4b02      	ldr	r3, [pc, #8]	; (d86f8 <spark_set_connection_property+0xc>)
   d86f0:	681b      	ldr	r3, [r3, #0]
   d86f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d86f4:	9301      	str	r3, [sp, #4]
   d86f6:	bd08      	pop	{r3, pc}
   d86f8:	00030244 	.word	0x00030244

000d86fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d86fc:	b508      	push	{r3, lr}
   d86fe:	4b02      	ldr	r3, [pc, #8]	; (d8708 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8700:	681b      	ldr	r3, [r3, #0]
   d8702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8704:	9301      	str	r3, [sp, #4]
   d8706:	bd08      	pop	{r3, pc}
   d8708:	00030244 	.word	0x00030244

000d870c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d870c:	b508      	push	{r3, lr}
   d870e:	4b02      	ldr	r3, [pc, #8]	; (d8718 <spark_cloud_disconnect+0xc>)
   d8710:	681b      	ldr	r3, [r3, #0]
   d8712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8714:	9301      	str	r3, [sp, #4]
   d8716:	bd08      	pop	{r3, pc}
   d8718:	00030244 	.word	0x00030244

000d871c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d871c:	b508      	push	{r3, lr}
   d871e:	4b02      	ldr	r3, [pc, #8]	; (d8728 <network_connect+0xc>)
   d8720:	681b      	ldr	r3, [r3, #0]
   d8722:	685b      	ldr	r3, [r3, #4]
   d8724:	9301      	str	r3, [sp, #4]
   d8726:	bd08      	pop	{r3, pc}
   d8728:	00030240 	.word	0x00030240

000d872c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d872c:	b508      	push	{r3, lr}
   d872e:	4b02      	ldr	r3, [pc, #8]	; (d8738 <network_connecting+0xc>)
   d8730:	681b      	ldr	r3, [r3, #0]
   d8732:	689b      	ldr	r3, [r3, #8]
   d8734:	9301      	str	r3, [sp, #4]
   d8736:	bd08      	pop	{r3, pc}
   d8738:	00030240 	.word	0x00030240

000d873c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d873c:	b508      	push	{r3, lr}
   d873e:	4b02      	ldr	r3, [pc, #8]	; (d8748 <network_disconnect+0xc>)
   d8740:	681b      	ldr	r3, [r3, #0]
   d8742:	68db      	ldr	r3, [r3, #12]
   d8744:	9301      	str	r3, [sp, #4]
   d8746:	bd08      	pop	{r3, pc}
   d8748:	00030240 	.word	0x00030240

000d874c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d874c:	b508      	push	{r3, lr}
   d874e:	4b02      	ldr	r3, [pc, #8]	; (d8758 <network_ready+0xc>)
   d8750:	681b      	ldr	r3, [r3, #0]
   d8752:	691b      	ldr	r3, [r3, #16]
   d8754:	9301      	str	r3, [sp, #4]
   d8756:	bd08      	pop	{r3, pc}
   d8758:	00030240 	.word	0x00030240

000d875c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d875c:	b508      	push	{r3, lr}
   d875e:	4b02      	ldr	r3, [pc, #8]	; (d8768 <network_on+0xc>)
   d8760:	681b      	ldr	r3, [r3, #0]
   d8762:	695b      	ldr	r3, [r3, #20]
   d8764:	9301      	str	r3, [sp, #4]
   d8766:	bd08      	pop	{r3, pc}
   d8768:	00030240 	.word	0x00030240

000d876c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d876c:	b508      	push	{r3, lr}
   d876e:	4b02      	ldr	r3, [pc, #8]	; (d8778 <network_off+0xc>)
   d8770:	681b      	ldr	r3, [r3, #0]
   d8772:	699b      	ldr	r3, [r3, #24]
   d8774:	9301      	str	r3, [sp, #4]
   d8776:	bd08      	pop	{r3, pc}
   d8778:	00030240 	.word	0x00030240

000d877c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d877c:	b508      	push	{r3, lr}
   d877e:	4b02      	ldr	r3, [pc, #8]	; (d8788 <network_listen+0xc>)
   d8780:	681b      	ldr	r3, [r3, #0]
   d8782:	69db      	ldr	r3, [r3, #28]
   d8784:	9301      	str	r3, [sp, #4]
   d8786:	bd08      	pop	{r3, pc}
   d8788:	00030240 	.word	0x00030240

000d878c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d878c:	b508      	push	{r3, lr}
   d878e:	4b02      	ldr	r3, [pc, #8]	; (d8798 <network_listening+0xc>)
   d8790:	681b      	ldr	r3, [r3, #0]
   d8792:	6a1b      	ldr	r3, [r3, #32]
   d8794:	9301      	str	r3, [sp, #4]
   d8796:	bd08      	pop	{r3, pc}
   d8798:	00030240 	.word	0x00030240

000d879c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d879c:	b508      	push	{r3, lr}
   d879e:	4b02      	ldr	r3, [pc, #8]	; (d87a8 <network_set_listen_timeout+0xc>)
   d87a0:	681b      	ldr	r3, [r3, #0]
   d87a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d87a4:	9301      	str	r3, [sp, #4]
   d87a6:	bd08      	pop	{r3, pc}
   d87a8:	00030240 	.word	0x00030240

000d87ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d87ac:	b508      	push	{r3, lr}
   d87ae:	4b02      	ldr	r3, [pc, #8]	; (d87b8 <network_get_listen_timeout+0xc>)
   d87b0:	681b      	ldr	r3, [r3, #0]
   d87b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d87b4:	9301      	str	r3, [sp, #4]
   d87b6:	bd08      	pop	{r3, pc}
   d87b8:	00030240 	.word	0x00030240

000d87bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d87bc:	b508      	push	{r3, lr}
   d87be:	4b02      	ldr	r3, [pc, #8]	; (d87c8 <malloc+0xc>)
   d87c0:	681b      	ldr	r3, [r3, #0]
   d87c2:	681b      	ldr	r3, [r3, #0]
   d87c4:	9301      	str	r3, [sp, #4]
   d87c6:	bd08      	pop	{r3, pc}
   d87c8:	0003021c 	.word	0x0003021c

000d87cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d87cc:	b508      	push	{r3, lr}
   d87ce:	4b02      	ldr	r3, [pc, #8]	; (d87d8 <free+0xc>)
   d87d0:	681b      	ldr	r3, [r3, #0]
   d87d2:	685b      	ldr	r3, [r3, #4]
   d87d4:	9301      	str	r3, [sp, #4]
   d87d6:	bd08      	pop	{r3, pc}
   d87d8:	0003021c 	.word	0x0003021c

000d87dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d87dc:	b508      	push	{r3, lr}
   d87de:	4b02      	ldr	r3, [pc, #8]	; (d87e8 <realloc+0xc>)
   d87e0:	681b      	ldr	r3, [r3, #0]
   d87e2:	689b      	ldr	r3, [r3, #8]
   d87e4:	9301      	str	r3, [sp, #4]
   d87e6:	bd08      	pop	{r3, pc}
   d87e8:	0003021c 	.word	0x0003021c

000d87ec <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d87ec:	b508      	push	{r3, lr}
   d87ee:	4b02      	ldr	r3, [pc, #8]	; (d87f8 <siprintf+0xc>)
   d87f0:	681b      	ldr	r3, [r3, #0]
   d87f2:	691b      	ldr	r3, [r3, #16]
   d87f4:	9301      	str	r3, [sp, #4]
   d87f6:	bd08      	pop	{r3, pc}
   d87f8:	0003021c 	.word	0x0003021c

000d87fc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d87fc:	b508      	push	{r3, lr}
   d87fe:	4b02      	ldr	r3, [pc, #8]	; (d8808 <snprintf+0xc>)
   d8800:	681b      	ldr	r3, [r3, #0]
   d8802:	69db      	ldr	r3, [r3, #28]
   d8804:	9301      	str	r3, [sp, #4]
   d8806:	bd08      	pop	{r3, pc}
   d8808:	0003021c 	.word	0x0003021c

000d880c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d880c:	b508      	push	{r3, lr}
   d880e:	4b02      	ldr	r3, [pc, #8]	; (d8818 <vsnprintf+0xc>)
   d8810:	681b      	ldr	r3, [r3, #0]
   d8812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8814:	9301      	str	r3, [sp, #4]
   d8816:	bd08      	pop	{r3, pc}
   d8818:	0003021c 	.word	0x0003021c

000d881c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d881c:	b508      	push	{r3, lr}
   d881e:	4b02      	ldr	r3, [pc, #8]	; (d8828 <abort+0xc>)
   d8820:	681b      	ldr	r3, [r3, #0]
   d8822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8824:	9301      	str	r3, [sp, #4]
   d8826:	bd08      	pop	{r3, pc}
   d8828:	0003021c 	.word	0x0003021c

000d882c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d882c:	b508      	push	{r3, lr}
   d882e:	4b02      	ldr	r3, [pc, #8]	; (d8838 <_malloc_r+0xc>)
   d8830:	681b      	ldr	r3, [r3, #0]
   d8832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8834:	9301      	str	r3, [sp, #4]
   d8836:	bd08      	pop	{r3, pc}
   d8838:	0003021c 	.word	0x0003021c

000d883c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d883c:	b508      	push	{r3, lr}
   d883e:	4b02      	ldr	r3, [pc, #8]	; (d8848 <newlib_impure_ptr_callback+0xc>)
   d8840:	681b      	ldr	r3, [r3, #0]
   d8842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8844:	9301      	str	r3, [sp, #4]
   d8846:	bd08      	pop	{r3, pc}
   d8848:	0003021c 	.word	0x0003021c

000d884c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d884c:	b508      	push	{r3, lr}
   d884e:	4b02      	ldr	r3, [pc, #8]	; (d8858 <strftime+0xc>)
   d8850:	681b      	ldr	r3, [r3, #0]
   d8852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8854:	9301      	str	r3, [sp, #4]
   d8856:	bd08      	pop	{r3, pc}
   d8858:	0003021c 	.word	0x0003021c

000d885c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d885c:	b508      	push	{r3, lr}
   d885e:	4b02      	ldr	r3, [pc, #8]	; (d8868 <localtime_r+0xc>)
   d8860:	681b      	ldr	r3, [r3, #0]
   d8862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8864:	9301      	str	r3, [sp, #4]
   d8866:	bd08      	pop	{r3, pc}
   d8868:	0003021c 	.word	0x0003021c

000d886c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d886c:	b508      	push	{r3, lr}
   d886e:	4b02      	ldr	r3, [pc, #8]	; (d8878 <gmtime_r+0xc>)
   d8870:	681b      	ldr	r3, [r3, #0]
   d8872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8874:	9301      	str	r3, [sp, #4]
   d8876:	bd08      	pop	{r3, pc}
   d8878:	0003021c 	.word	0x0003021c

000d887c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d887c:	b508      	push	{r3, lr}
   d887e:	4b02      	ldr	r3, [pc, #8]	; (d8888 <mktime+0xc>)
   d8880:	681b      	ldr	r3, [r3, #0]
   d8882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8884:	9301      	str	r3, [sp, #4]
   d8886:	bd08      	pop	{r3, pc}
   d8888:	0003021c 	.word	0x0003021c

000d888c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d888c:	2100      	movs	r1, #0
   d888e:	f7ff be63 	b.w	d8558 <system_delay_ms>

000d8892 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8892:	b510      	push	{r4, lr}
      if (_M_empty())
   d8894:	6883      	ldr	r3, [r0, #8]
   d8896:	4604      	mov	r4, r0
   d8898:	b90b      	cbnz	r3, d889e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d889a:	f001 fdec 	bl	da476 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d889e:	68c3      	ldr	r3, [r0, #12]
   d88a0:	4798      	blx	r3
      if (_M_manager)
   d88a2:	68a3      	ldr	r3, [r4, #8]
   d88a4:	b11b      	cbz	r3, d88ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d88a6:	2203      	movs	r2, #3
   d88a8:	4621      	mov	r1, r4
   d88aa:	4620      	mov	r0, r4
   d88ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d88ae:	4620      	mov	r0, r4
   d88b0:	2110      	movs	r1, #16
}
   d88b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d88b6:	f001 bdd8 	b.w	da46a <_ZdlPvj>

000d88ba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d88ba:	b510      	push	{r4, lr}
   d88bc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d88be:	6800      	ldr	r0, [r0, #0]
   d88c0:	b108      	cbz	r0, d88c6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d88c2:	f7ff fc3f 	bl	d8144 <os_mutex_recursive_destroy>
    }
   d88c6:	4620      	mov	r0, r4
   d88c8:	bd10      	pop	{r4, pc}

000d88ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d88ca:	680b      	ldr	r3, [r1, #0]
   d88cc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d88ce:	b113      	cbz	r3, d88d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d88d0:	685a      	ldr	r2, [r3, #4]
   d88d2:	3201      	adds	r2, #1
   d88d4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d88d6:	4770      	bx	lr

000d88d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d88d8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d88da:	4c06      	ldr	r4, [pc, #24]	; (d88f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d88dc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d88de:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d88e0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d88e2:	f7ff fc27 	bl	d8134 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d88e6:	4620      	mov	r0, r4
   d88e8:	4a03      	ldr	r2, [pc, #12]	; (d88f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d88ea:	4904      	ldr	r1, [pc, #16]	; (d88fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d88ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d88f0:	f001 bdb6 	b.w	da460 <__aeabi_atexit>
   d88f4:	2003e5e8 	.word	0x2003e5e8
   d88f8:	2003e200 	.word	0x2003e200
   d88fc:	000d88bb 	.word	0x000d88bb

000d8900 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8900:	2200      	movs	r2, #0
   d8902:	6840      	ldr	r0, [r0, #4]
   d8904:	4611      	mov	r1, r2
   d8906:	f7ff bf21 	b.w	d874c <network_ready>

000d890a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d890a:	2200      	movs	r2, #0
   d890c:	6840      	ldr	r0, [r0, #4]
   d890e:	4611      	mov	r1, r2
   d8910:	f7ff bf3c 	b.w	d878c <network_listening>

000d8914 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8914:	2200      	movs	r2, #0
   d8916:	6840      	ldr	r0, [r0, #4]
   d8918:	4611      	mov	r1, r2
   d891a:	f7ff bf47 	b.w	d87ac <network_get_listen_timeout>

000d891e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d891e:	6840      	ldr	r0, [r0, #4]
   d8920:	2200      	movs	r2, #0
   d8922:	f7ff bf3b 	b.w	d879c <network_set_listen_timeout>

000d8926 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8926:	6840      	ldr	r0, [r0, #4]
   d8928:	2200      	movs	r2, #0
   d892a:	f081 0101 	eor.w	r1, r1, #1
   d892e:	f7ff bf25 	b.w	d877c <network_listen>

000d8932 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8932:	2300      	movs	r3, #0
   d8934:	6840      	ldr	r0, [r0, #4]
   d8936:	461a      	mov	r2, r3
   d8938:	4619      	mov	r1, r3
   d893a:	f7ff bf17 	b.w	d876c <network_off>

000d893e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d893e:	2300      	movs	r3, #0
   d8940:	6840      	ldr	r0, [r0, #4]
   d8942:	461a      	mov	r2, r3
   d8944:	4619      	mov	r1, r3
   d8946:	f7ff bf09 	b.w	d875c <network_on>

000d894a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d894a:	2200      	movs	r2, #0
   d894c:	6840      	ldr	r0, [r0, #4]
   d894e:	4611      	mov	r1, r2
   d8950:	f7ff beec 	b.w	d872c <network_connecting>

000d8954 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8954:	6840      	ldr	r0, [r0, #4]
   d8956:	2200      	movs	r2, #0
   d8958:	2102      	movs	r1, #2
   d895a:	f7ff beef 	b.w	d873c <network_disconnect>

000d895e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d895e:	2300      	movs	r3, #0
   d8960:	6840      	ldr	r0, [r0, #4]
   d8962:	461a      	mov	r2, r3
   d8964:	f7ff beda 	b.w	d871c <network_connect>

000d8968 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8968:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d896a:	4b1b      	ldr	r3, [pc, #108]	; (d89d8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d896c:	6003      	str	r3, [r0, #0]
   d896e:	2500      	movs	r5, #0
   d8970:	460f      	mov	r7, r1
   d8972:	3328      	adds	r3, #40	; 0x28
   d8974:	2618      	movs	r6, #24
   d8976:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d897a:	b089      	sub	sp, #36	; 0x24
   d897c:	6043      	str	r3, [r0, #4]
   d897e:	4632      	mov	r2, r6
   d8980:	4629      	mov	r1, r5
   d8982:	4604      	mov	r4, r0
   d8984:	3010      	adds	r0, #16
   d8986:	f002 fa61 	bl	dae4c <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d898a:	6878      	ldr	r0, [r7, #4]
   d898c:	462a      	mov	r2, r5
   d898e:	4629      	mov	r1, r5
   d8990:	f7ff fedc 	bl	d874c <network_ready>
   d8994:	b918      	cbnz	r0, d899e <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d8996:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d8998:	4620      	mov	r0, r4
   d899a:	b009      	add	sp, #36	; 0x24
   d899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d899e:	4629      	mov	r1, r5
   d89a0:	4632      	mov	r2, r6
   d89a2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d89a4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d89a8:	f002 fa50 	bl	dae4c <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d89ac:	a902      	add	r1, sp, #8
   d89ae:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d89b0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d89b4:	f7ff fb76 	bl	d80a4 <cellular_signal>
   d89b8:	b110      	cbz	r0, d89c0 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d89ba:	2301      	movs	r3, #1
   d89bc:	60a3      	str	r3, [r4, #8]
            return sig;
   d89be:	e7eb      	b.n	d8998 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d89c0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d89c2:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d89c4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d89c6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d89c8:	b90b      	cbnz	r3, d89ce <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d89ca:	2302      	movs	r3, #2
   d89cc:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d89ce:	a902      	add	r1, sp, #8
   d89d0:	4620      	mov	r0, r4
   d89d2:	f000 f8ae 	bl	d8b32 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d89d6:	e7df      	b.n	d8998 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d89d8:	000db9e8 	.word	0x000db9e8

000d89dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d89dc:	4b08      	ldr	r3, [pc, #32]	; (d8a00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d89de:	b510      	push	{r4, lr}
   d89e0:	2428      	movs	r4, #40	; 0x28
   d89e2:	4622      	mov	r2, r4
   d89e4:	4618      	mov	r0, r3
   d89e6:	2100      	movs	r1, #0
   d89e8:	f002 fa30 	bl	dae4c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d89ec:	4b05      	ldr	r3, [pc, #20]	; (d8a04 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d89ee:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d89f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d89f4:	6042      	str	r2, [r0, #4]
   d89f6:	2204      	movs	r2, #4
   d89f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d89fa:	4a03      	ldr	r2, [pc, #12]	; (d8a08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d89fc:	601a      	str	r2, [r3, #0]
   d89fe:	bd10      	pop	{r4, pc}
   d8a00:	2003e5f4 	.word	0x2003e5f4
   d8a04:	2003e5ec 	.word	0x2003e5ec
   d8a08:	000db9b4 	.word	0x000db9b4

000d8a0c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8a0c:	4770      	bx	lr

000d8a0e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8a0e:	7d00      	ldrb	r0, [r0, #20]
   d8a10:	4770      	bx	lr

000d8a12 <_ZN14CellularSignalD0Ev>:
   d8a12:	b510      	push	{r4, lr}
   d8a14:	2128      	movs	r1, #40	; 0x28
   d8a16:	4604      	mov	r4, r0
   d8a18:	f001 fd27 	bl	da46a <_ZdlPvj>
   d8a1c:	4620      	mov	r0, r4
   d8a1e:	bd10      	pop	{r4, pc}

000d8a20 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8a20:	7d03      	ldrb	r3, [r0, #20]
   d8a22:	b17b      	cbz	r3, d8a44 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8a24:	69c3      	ldr	r3, [r0, #28]
   d8a26:	2b00      	cmp	r3, #0
   d8a28:	db0c      	blt.n	d8a44 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8a2a:	ee07 3a90 	vmov	s15, r3
   d8a2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8a4c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a36:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a3a:	eddf 7a05 	vldr	s15, [pc, #20]	; d8a50 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8a3e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8a42:	4770      	bx	lr
    }

    return -1.0f;
   d8a44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8a48:	4770      	bx	lr
   d8a4a:	bf00      	nop
   d8a4c:	477fff00 	.word	0x477fff00
   d8a50:	42c80000 	.word	0x42c80000

000d8a54 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8a54:	7d03      	ldrb	r3, [r0, #20]
   d8a56:	b163      	cbz	r3, d8a72 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8a58:	6983      	ldr	r3, [r0, #24]
   d8a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8a5e:	d008      	beq.n	d8a72 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8a60:	ee07 3a90 	vmov	s15, r3
   d8a64:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8a78 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a6c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a70:	4770      	bx	lr
    }

    return 0.0f;
   d8a72:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8a7c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d8a76:	4770      	bx	lr
   d8a78:	42c80000 	.word	0x42c80000
   d8a7c:	00000000 	.word	0x00000000

000d8a80 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8a80:	7d03      	ldrb	r3, [r0, #20]
   d8a82:	b17b      	cbz	r3, d8aa4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8a84:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8a86:	2b00      	cmp	r3, #0
   d8a88:	db0c      	blt.n	d8aa4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8a8a:	ee07 3a90 	vmov	s15, r3
   d8a8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8aac <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8a96:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8a9a:	eddf 7a05 	vldr	s15, [pc, #20]	; d8ab0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8a9e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8aa2:	4770      	bx	lr
    }

    return -1.0f;
   d8aa4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8aa8:	4770      	bx	lr
   d8aaa:	bf00      	nop
   d8aac:	477fff00 	.word	0x477fff00
   d8ab0:	42c80000 	.word	0x42c80000

000d8ab4 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8ab4:	7d03      	ldrb	r3, [r0, #20]
   d8ab6:	b163      	cbz	r3, d8ad2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8ab8:	6a03      	ldr	r3, [r0, #32]
   d8aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8abe:	d008      	beq.n	d8ad2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8ac0:	ee07 3a90 	vmov	s15, r3
   d8ac4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8ad8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8acc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8ad0:	4770      	bx	lr
    }

    return 0.0f;
   d8ad2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8adc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8ad6:	4770      	bx	lr
   d8ad8:	42c80000 	.word	0x42c80000
   d8adc:	00000000 	.word	0x00000000

000d8ae0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8ae0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8ae2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8ae4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8ae6:	da0a      	bge.n	d8afe <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8ae8:	212d      	movs	r1, #45	; 0x2d
   d8aea:	f000 fd33 	bl	d9554 <_ZN5Print5printEc>
            val = -n;
   d8aee:	4261      	negs	r1, r4
            t = print('-');
   d8af0:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8af2:	220a      	movs	r2, #10
   d8af4:	4630      	mov	r0, r6
   d8af6:	f000 fd3c 	bl	d9572 <_ZN5Print11printNumberEmh>
    }
}
   d8afa:	4428      	add	r0, r5
   d8afc:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8afe:	4621      	mov	r1, r4
        size_t t = 0;
   d8b00:	2500      	movs	r5, #0
   d8b02:	e7f6      	b.n	d8af2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8b04 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8b04:	b570      	push	{r4, r5, r6, lr}
   d8b06:	460c      	mov	r4, r1
   d8b08:	4605      	mov	r5, r0
   d8b0a:	6881      	ldr	r1, [r0, #8]
   d8b0c:	4620      	mov	r0, r4
   d8b0e:	f7ff ffe7 	bl	d8ae0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8b12:	212c      	movs	r1, #44	; 0x2c
   d8b14:	4606      	mov	r6, r0
   d8b16:	4620      	mov	r0, r4
   d8b18:	f000 fd1c 	bl	d9554 <_ZN5Print5printEc>
   d8b1c:	68e9      	ldr	r1, [r5, #12]
   d8b1e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8b20:	4620      	mov	r0, r4
   d8b22:	f7ff ffdd 	bl	d8ae0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8b26:	4430      	add	r0, r6
   d8b28:	bd70      	pop	{r4, r5, r6, pc}

000d8b2a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8b2a:	f1a0 0004 	sub.w	r0, r0, #4
   d8b2e:	f7ff bfe9 	b.w	d8b04 <_ZNK14CellularSignal7printToER5Print>

000d8b32 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8b32:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8b34:	460d      	mov	r5, r1
   d8b36:	f100 0410 	add.w	r4, r0, #16
   d8b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b3e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8b42:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8b46:	2001      	movs	r0, #1
   d8b48:	bd30      	pop	{r4, r5, pc}

000d8b4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b4a:	4770      	bx	lr

000d8b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8b4c:	2000      	movs	r0, #0
   d8b4e:	4770      	bx	lr

000d8b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8b50:	b510      	push	{r4, lr}
   d8b52:	2110      	movs	r1, #16
   d8b54:	4604      	mov	r4, r0
   d8b56:	f001 fc88 	bl	da46a <_ZdlPvj>
   d8b5a:	4620      	mov	r0, r4
   d8b5c:	bd10      	pop	{r4, pc}

000d8b5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8b5e:	b508      	push	{r3, lr}
      { delete this; }
   d8b60:	f7ff fff6 	bl	d8b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8b64:	bd08      	pop	{r3, pc}

000d8b66 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8b66:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8b68:	2200      	movs	r2, #0
   d8b6a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8b6e:	6002      	str	r2, [r0, #0]
   d8b70:	8084      	strh	r4, [r0, #4]
   d8b72:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b74:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b76:	680c      	ldr	r4, [r1, #0]
   d8b78:	8085      	strh	r5, [r0, #4]
   d8b7a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b7c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8b7e:	bd30      	pop	{r4, r5, pc}

000d8b80 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8b80:	b510      	push	{r4, lr}
   d8b82:	4604      	mov	r4, r0
    free((void*)msg_);
   d8b84:	6800      	ldr	r0, [r0, #0]
   d8b86:	f7ff fe21 	bl	d87cc <free>
}
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	bd10      	pop	{r4, pc}

000d8b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8b8e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8b90:	68c4      	ldr	r4, [r0, #12]
   d8b92:	b1f4      	cbz	r4, d8bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8b94:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8b96:	2b02      	cmp	r3, #2
   d8b98:	d103      	bne.n	d8ba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8b9a:	f104 000c 	add.w	r0, r4, #12
   d8b9e:	f7ff ffef 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8ba2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8ba4:	b135      	cbz	r5, d8bb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8ba6:	4628      	mov	r0, r5
   d8ba8:	f7fd fc90 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
   d8bac:	2110      	movs	r1, #16
   d8bae:	4628      	mov	r0, r5
   d8bb0:	f001 fc5b 	bl	da46a <_ZdlPvj>
   d8bb4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8bb6:	b135      	cbz	r5, d8bc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8bb8:	4628      	mov	r0, r5
   d8bba:	f7fd fc87 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
   d8bbe:	2110      	movs	r1, #16
   d8bc0:	4628      	mov	r0, r5
   d8bc2:	f001 fc52 	bl	da46a <_ZdlPvj>
   d8bc6:	4620      	mov	r0, r4
   d8bc8:	2114      	movs	r1, #20
   d8bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8bce:	f001 bc4c 	b.w	da46a <_ZdlPvj>
   d8bd2:	bd38      	pop	{r3, r4, r5, pc}

000d8bd4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8bd4:	b510      	push	{r4, lr}
   d8bd6:	b088      	sub	sp, #32
   d8bd8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8bda:	4668      	mov	r0, sp
   d8bdc:	f000 fe27 	bl	d982e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8be0:	4669      	mov	r1, sp
   d8be2:	a804      	add	r0, sp, #16
   d8be4:	f000 fe46 	bl	d9874 <_ZN6StringC1ERKS_>
   d8be8:	a804      	add	r0, sp, #16
   d8bea:	47a0      	blx	r4
   d8bec:	4604      	mov	r4, r0
   d8bee:	a804      	add	r0, sp, #16
   d8bf0:	f000 fdd2 	bl	d9798 <_ZN6StringD1Ev>
    String p(param);
   d8bf4:	4668      	mov	r0, sp
   d8bf6:	f000 fdcf 	bl	d9798 <_ZN6StringD1Ev>
}
   d8bfa:	4620      	mov	r0, r4
   d8bfc:	b008      	add	sp, #32
   d8bfe:	bd10      	pop	{r4, pc}

000d8c00 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8c02:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8c08:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8c0a:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8c0c:	461a      	mov	r2, r3
   d8c0e:	4669      	mov	r1, sp
   d8c10:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8c12:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8c16:	f8ad 4000 	strh.w	r4, [sp]
   d8c1a:	f7ff fd17 	bl	d864c <spark_function>
}
   d8c1e:	b004      	add	sp, #16
   d8c20:	bd10      	pop	{r4, pc}

000d8c22 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8c22:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8c24:	2308      	movs	r3, #8
   d8c26:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8c2a:	6803      	ldr	r3, [r0, #0]
   d8c2c:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8c30:	7a03      	ldrb	r3, [r0, #8]
   d8c32:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8c36:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8c38:	6843      	ldr	r3, [r0, #4]
   d8c3a:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8c3c:	4668      	mov	r0, sp
   d8c3e:	f7ff fd65 	bl	d870c <spark_cloud_disconnect>
}
   d8c42:	b003      	add	sp, #12
   d8c44:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c48 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d8c48:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8c4a:	2308      	movs	r3, #8
   d8c4c:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d8c50:	6803      	ldr	r3, [r0, #0]
   d8c52:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8c56:	7a03      	ldrb	r3, [r0, #8]
   d8c58:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
   d8c5c:	6843      	ldr	r3, [r0, #4]
   d8c5e:	9301      	str	r3, [sp, #4]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8c60:	2300      	movs	r3, #0
   d8c62:	466a      	mov	r2, sp
   d8c64:	4619      	mov	r1, r3
   d8c66:	2002      	movs	r0, #2
   d8c68:	f7ff fd40 	bl	d86ec <spark_set_connection_property>
}
   d8c6c:	b003      	add	sp, #12
   d8c6e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c74:	460e      	mov	r6, r1
   d8c76:	4604      	mov	r4, r0
   d8c78:	f856 3b04 	ldr.w	r3, [r6], #4
   d8c7c:	9300      	str	r3, [sp, #0]
   d8c7e:	460d      	mov	r5, r1
   d8c80:	a801      	add	r0, sp, #4
   d8c82:	4631      	mov	r1, r6
   d8c84:	f7ff fe21 	bl	d88ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8c88:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c8a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8c8c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8c8e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8c90:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8c92:	2300      	movs	r3, #0
   d8c94:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8c96:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8c98:	f7fe f9b7 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c9c:	4630      	mov	r0, r6
   d8c9e:	f7fe f9b4 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8ca2:	4628      	mov	r0, r5
   d8ca4:	2108      	movs	r1, #8
   d8ca6:	f001 fbe0 	bl	da46a <_ZdlPvj>
        return p;
    }
   d8caa:	4620      	mov	r0, r4
   d8cac:	b002      	add	sp, #8
   d8cae:	bd70      	pop	{r4, r5, r6, pc}

000d8cb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8cb0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8cb2:	b510      	push	{r4, lr}
      if (_M_empty())
   d8cb4:	b90a      	cbnz	r2, d8cba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8cb6:	f001 fbde 	bl	da476 <_ZSt25__throw_bad_function_callv>
    }
   d8cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8cbe:	68c3      	ldr	r3, [r0, #12]
   d8cc0:	4718      	bx	r3

000d8cc2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8cc2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8cc4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8cc6:	f100 0110 	add.w	r1, r0, #16
   d8cca:	f7ff fff1 	bl	d8cb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8cce:	bd08      	pop	{r3, pc}

000d8cd0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8cd0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8cd2:	b510      	push	{r4, lr}
      if (_M_empty())
   d8cd4:	b90a      	cbnz	r2, d8cda <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8cd6:	f001 fbce 	bl	da476 <_ZSt25__throw_bad_function_callv>
    }
   d8cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8cde:	68c3      	ldr	r3, [r0, #12]
   d8ce0:	4718      	bx	r3

000d8ce2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8ce2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8ce4:	6800      	ldr	r0, [r0, #0]
   d8ce6:	f100 0110 	add.w	r1, r0, #16
   d8cea:	f7ff fff1 	bl	d8cd0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8cee:	bd08      	pop	{r3, pc}

000d8cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8cf0:	b538      	push	{r3, r4, r5, lr}
   d8cf2:	2300      	movs	r3, #0
   d8cf4:	4604      	mov	r4, r0
   d8cf6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8cf8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8cfa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8cfc:	f7fb f9cb 	bl	d4096 <_Znwj>
   d8d00:	b128      	cbz	r0, d8d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8d02:	2301      	movs	r3, #1
   d8d04:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8d08:	4b02      	ldr	r3, [pc, #8]	; (d8d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8d0a:	6003      	str	r3, [r0, #0]
   d8d0c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8d0e:	6020      	str	r0, [r4, #0]
	}
   d8d10:	4620      	mov	r0, r4
   d8d12:	bd38      	pop	{r3, r4, r5, pc}
   d8d14:	000dba1c 	.word	0x000dba1c

000d8d18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8d18:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8d1a:	2300      	movs	r3, #0
   d8d1c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8d1e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8d20:	4604      	mov	r4, r0
   d8d22:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8d24:	b12b      	cbz	r3, d8d32 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8d26:	2202      	movs	r2, #2
   d8d28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8d2a:	68eb      	ldr	r3, [r5, #12]
   d8d2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8d2e:	68ab      	ldr	r3, [r5, #8]
   d8d30:	60a3      	str	r3, [r4, #8]
    }
   d8d32:	4620      	mov	r0, r4
   d8d34:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8d3a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8d3c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8d3e:	4668      	mov	r0, sp
   d8d40:	f7ff ff11 	bl	d8b66 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8d44:	f04f 0302 	mov.w	r3, #2
   d8d48:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8d4c:	2a00      	cmp	r2, #0
   d8d4e:	d103      	bne.n	d8d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8d50:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8d54:	2900      	cmp	r1, #0
   d8d56:	d1f7      	bne.n	d8d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8d58:	d125      	bne.n	d8da6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8d5a:	f104 050c 	add.w	r5, r4, #12
   d8d5e:	4669      	mov	r1, sp
   d8d60:	4628      	mov	r0, r5
   d8d62:	f7ff ff00 	bl	d8b66 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8d66:	f3bf 8f5b 	dmb	ish
   d8d6a:	2301      	movs	r3, #1
   d8d6c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8d6e:	2000      	movs	r0, #0
   d8d70:	f104 0308 	add.w	r3, r4, #8
   d8d74:	f3bf 8f5b 	dmb	ish
   d8d78:	e853 6f00 	ldrex	r6, [r3]
   d8d7c:	e843 0200 	strex	r2, r0, [r3]
   d8d80:	2a00      	cmp	r2, #0
   d8d82:	d1f9      	bne.n	d8d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8d84:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8d88:	b16e      	cbz	r6, d8da6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8d8a:	f7ff fc05 	bl	d8598 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8d8e:	b178      	cbz	r0, d8db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8d90:	4629      	mov	r1, r5
   d8d92:	4630      	mov	r0, r6
   d8d94:	f7ff ff8c 	bl	d8cb0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8d98:	4630      	mov	r0, r6
   d8d9a:	f7fd fb97 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8d9e:	2110      	movs	r1, #16
   d8da0:	4630      	mov	r0, r6
   d8da2:	f001 fb62 	bl	da46a <_ZdlPvj>
        p_->setError(std::move(error));
   d8da6:	4668      	mov	r0, sp
   d8da8:	f7ff feea 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
    }
   d8dac:	b009      	add	sp, #36	; 0x24
   d8dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8db0:	4631      	mov	r1, r6
   d8db2:	a802      	add	r0, sp, #8
   d8db4:	f7ff ffb0 	bl	d8d18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8db8:	68e0      	ldr	r0, [r4, #12]
   d8dba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8dbe:	b108      	cbz	r0, d8dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8dc0:	f002 f882 	bl	daec8 <strdup>
        type_(type) {
   d8dc4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8dc6:	2010      	movs	r0, #16
   d8dc8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8dcc:	f7fb f963 	bl	d4096 <_Znwj>
   d8dd0:	4605      	mov	r5, r0
   d8dd2:	b1e8      	cbz	r0, d8e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8dd4:	2700      	movs	r7, #0
   d8dd6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8dd8:	2018      	movs	r0, #24
   d8dda:	f7fb f95c 	bl	d4096 <_Znwj>
   d8dde:	4604      	mov	r4, r0
   d8de0:	b188      	cbz	r0, d8e06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8de2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8de4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8de6:	a802      	add	r0, sp, #8
   d8de8:	f7fe f925 	bl	d7036 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8dec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8dee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8df0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8df2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8df4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8df6:	a906      	add	r1, sp, #24
   d8df8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8dfa:	60e3      	str	r3, [r4, #12]
   d8dfc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8e00:	9205      	str	r2, [sp, #20]
   d8e02:	f7ff feb0 	bl	d8b66 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8e06:	4b08      	ldr	r3, [pc, #32]	; (d8e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8e08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8e0a:	4b08      	ldr	r3, [pc, #32]	; (d8e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e0c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8e0e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8e10:	a806      	add	r0, sp, #24
   d8e12:	f7ff feb5 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8e16:	a802      	add	r0, sp, #8
   d8e18:	f7fd fb58 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8e1c:	2200      	movs	r2, #0
   d8e1e:	4629      	mov	r1, r5
   d8e20:	4803      	ldr	r0, [pc, #12]	; (d8e30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8e22:	f7ff fbc1 	bl	d85a8 <application_thread_invoke>
   d8e26:	e7b7      	b.n	d8d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8e28:	000d8cc3 	.word	0x000d8cc3
   d8e2c:	000d8f59 	.word	0x000d8f59
   d8e30:	000d8893 	.word	0x000d8893

000d8e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e38:	b08a      	sub	sp, #40	; 0x28
   d8e3a:	4605      	mov	r5, r0
   d8e3c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8e40:	460c      	mov	r4, r1
   d8e42:	4617      	mov	r7, r2
   d8e44:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8e46:	f7ff fc19 	bl	d867c <spark_cloud_flag_connected>
   d8e4a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8e4c:	4682      	mov	sl, r0
   d8e4e:	bb38      	cbnz	r0, d8ea0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8e50:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8e54:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e56:	a905      	add	r1, sp, #20
   d8e58:	4630      	mov	r0, r6
   d8e5a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8e5e:	f7ff fe82 	bl	d8b66 <_ZN8particle5ErrorC1EOS0_>
   d8e62:	2014      	movs	r0, #20
   d8e64:	f7fb f917 	bl	d4096 <_Znwj>
   d8e68:	4604      	mov	r4, r0
   d8e6a:	b148      	cbz	r0, d8e80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8e6c:	2302      	movs	r3, #2
   d8e6e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e70:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8e72:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e76:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8e78:	4631      	mov	r1, r6
   d8e7a:	300c      	adds	r0, #12
   d8e7c:	f7ff fe73 	bl	d8b66 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e80:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8e82:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8e84:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8e88:	f7ff ff32 	bl	d8cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8e8c:	4630      	mov	r0, r6
   d8e8e:	f7ff fe77 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8e92:	a805      	add	r0, sp, #20
   d8e94:	f7ff fe74 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
}
   d8e98:	4628      	mov	r0, r5
   d8e9a:	b00a      	add	sp, #40	; 0x28
   d8e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8ea0:	230c      	movs	r3, #12
   d8ea2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8ea6:	2014      	movs	r0, #20
   d8ea8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8eac:	9307      	str	r3, [sp, #28]
   d8eae:	f7fb f8f2 	bl	d4096 <_Znwj>
   d8eb2:	4601      	mov	r1, r0
   d8eb4:	b128      	cbz	r0, d8ec2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8eb6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8eba:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ebe:	f880 a001 	strb.w	sl, [r0, #1]
   d8ec2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ec4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8ec6:	f7ff ff13 	bl	d8cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8eca:	4b22      	ldr	r3, [pc, #136]	; (d8f54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8ecc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8ece:	2008      	movs	r0, #8
   d8ed0:	f7fb f8e1 	bl	d4096 <_Znwj>
   d8ed4:	4682      	mov	sl, r0
   d8ed6:	b128      	cbz	r0, d8ee4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8ed8:	9b03      	ldr	r3, [sp, #12]
   d8eda:	f840 3b04 	str.w	r3, [r0], #4
   d8ede:	a904      	add	r1, sp, #16
   d8ee0:	f7ff fcf3 	bl	d88ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8ee4:	9600      	str	r6, [sp, #0]
   d8ee6:	fa5f f389 	uxtb.w	r3, r9
   d8eea:	4642      	mov	r2, r8
   d8eec:	4639      	mov	r1, r7
   d8eee:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8ef0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8ef4:	f7ff fbd2 	bl	d869c <spark_send_event>
   d8ef8:	b9b8      	cbnz	r0, d8f2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8efa:	9b03      	ldr	r3, [sp, #12]
   d8efc:	785b      	ldrb	r3, [r3, #1]
   d8efe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8f02:	b993      	cbnz	r3, d8f2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8f04:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8f08:	a905      	add	r1, sp, #20
   d8f0a:	a803      	add	r0, sp, #12
   d8f0c:	9205      	str	r2, [sp, #20]
   d8f0e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8f12:	f7ff ff11 	bl	d8d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8f16:	a805      	add	r0, sp, #20
   d8f18:	f7ff fe32 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8f1c:	a805      	add	r0, sp, #20
   d8f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8f20:	f7ff fea7 	bl	d8c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8f24:	a806      	add	r0, sp, #24
   d8f26:	f7fe f870 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8f2a:	9b03      	ldr	r3, [sp, #12]
   d8f2c:	9305      	str	r3, [sp, #20]
   d8f2e:	a904      	add	r1, sp, #16
   d8f30:	a806      	add	r0, sp, #24
   d8f32:	f7ff fcca 	bl	d88ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f36:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8f38:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8f3a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8f3c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8f3e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8f40:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8f42:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8f44:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8f46:	f7fe f860 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8f4a:	a804      	add	r0, sp, #16
   d8f4c:	f7fe f85d 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8f50:	e7a2      	b.n	d8e98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8f52:	bf00      	nop
   d8f54:	000d901d 	.word	0x000d901d

000d8f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8f58:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f5c:	4605      	mov	r5, r0
	  switch (__op)
   d8f5e:	d007      	beq.n	d8f70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8f60:	2a03      	cmp	r2, #3
   d8f62:	d018      	beq.n	d8f96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8f64:	2a01      	cmp	r2, #1
   d8f66:	d101      	bne.n	d8f6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8f68:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8f6a:	6003      	str	r3, [r0, #0]
	}
   d8f6c:	2000      	movs	r0, #0
   d8f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f70:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8f72:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8f74:	f7fb f88f 	bl	d4096 <_Znwj>
   d8f78:	4604      	mov	r4, r0
   d8f7a:	b150      	cbz	r0, d8f92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8f7c:	4631      	mov	r1, r6
   d8f7e:	f7ff fecb 	bl	d8d18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8f82:	6930      	ldr	r0, [r6, #16]
   d8f84:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8f88:	b108      	cbz	r0, d8f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8f8a:	f001 ff9d 	bl	daec8 <strdup>
        type_(type) {
   d8f8e:	6120      	str	r0, [r4, #16]
   d8f90:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8f92:	602c      	str	r4, [r5, #0]
	}
   d8f94:	e7ea      	b.n	d8f6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8f96:	6804      	ldr	r4, [r0, #0]
   d8f98:	2c00      	cmp	r4, #0
   d8f9a:	d0e7      	beq.n	d8f6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8f9c:	f104 0010 	add.w	r0, r4, #16
   d8fa0:	f7ff fdee 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	f7fd fa91 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8faa:	2118      	movs	r1, #24
   d8fac:	4620      	mov	r0, r4
   d8fae:	f001 fa5c 	bl	da46a <_ZdlPvj>
   d8fb2:	e7db      	b.n	d8f6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8fb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8fb4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8fb6:	2300      	movs	r3, #0
   d8fb8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8fba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8fbc:	4604      	mov	r4, r0
   d8fbe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8fc0:	b12b      	cbz	r3, d8fce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8fc2:	2202      	movs	r2, #2
   d8fc4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8fc6:	68eb      	ldr	r3, [r5, #12]
   d8fc8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8fca:	68ab      	ldr	r3, [r5, #8]
   d8fcc:	60a3      	str	r3, [r4, #8]
    }
   d8fce:	4620      	mov	r0, r4
   d8fd0:	bd38      	pop	{r3, r4, r5, pc}

000d8fd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8fd2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8fd4:	b570      	push	{r4, r5, r6, lr}
   d8fd6:	4604      	mov	r4, r0
	  switch (__op)
   d8fd8:	d007      	beq.n	d8fea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8fda:	2a03      	cmp	r2, #3
   d8fdc:	d012      	beq.n	d9004 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8fde:	2a01      	cmp	r2, #1
   d8fe0:	d101      	bne.n	d8fe6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8fe2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8fe4:	6003      	str	r3, [r0, #0]
	}
   d8fe6:	2000      	movs	r0, #0
   d8fe8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8fea:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8fec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8fee:	f7fb f852 	bl	d4096 <_Znwj>
   d8ff2:	4605      	mov	r5, r0
   d8ff4:	b120      	cbz	r0, d9000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8ff6:	4631      	mov	r1, r6
   d8ff8:	f7ff ffdc 	bl	d8fb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8ffc:	7c33      	ldrb	r3, [r6, #16]
   d8ffe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9000:	6025      	str	r5, [r4, #0]
	}
   d9002:	e7f0      	b.n	d8fe6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d9004:	6804      	ldr	r4, [r0, #0]
   d9006:	2c00      	cmp	r4, #0
   d9008:	d0ed      	beq.n	d8fe6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d900a:	4620      	mov	r0, r4
   d900c:	f7fd fa5e 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9010:	2114      	movs	r1, #20
   d9012:	4620      	mov	r0, r4
   d9014:	f001 fa29 	bl	da46a <_ZdlPvj>
   d9018:	e7e5      	b.n	d8fe6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d901c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d901c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d901e:	b089      	sub	sp, #36	; 0x24
   d9020:	4604      	mov	r4, r0
   d9022:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9024:	a801      	add	r0, sp, #4
   d9026:	4611      	mov	r1, r2
   d9028:	f7ff fe23 	bl	d8c72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d902c:	b1a4      	cbz	r4, d9058 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d902e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9030:	b11d      	cbz	r5, d903a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d9032:	4628      	mov	r0, r5
   d9034:	f001 ff48 	bl	daec8 <strdup>
   d9038:	4605      	mov	r5, r0
   d903a:	a801      	add	r0, sp, #4
   d903c:	a903      	add	r1, sp, #12
        type_(type) {
   d903e:	9503      	str	r5, [sp, #12]
   d9040:	f8ad 4010 	strh.w	r4, [sp, #16]
   d9044:	f7ff fe78 	bl	d8d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9048:	a803      	add	r0, sp, #12
   d904a:	f7ff fd99 	bl	d8b80 <_ZN8particle5ErrorD1Ev>
   d904e:	a802      	add	r0, sp, #8
   d9050:	f7fd ffdb 	bl	d700a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9054:	b009      	add	sp, #36	; 0x24
   d9056:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d9058:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d905a:	2301      	movs	r3, #1
   d905c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d9060:	2a00      	cmp	r2, #0
   d9062:	d103      	bne.n	d906c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d9064:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9068:	2900      	cmp	r1, #0
   d906a:	d1f7      	bne.n	d905c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d906c:	d1ef      	bne.n	d904e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d906e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9070:	f3bf 8f5b 	dmb	ish
   d9074:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9076:	1d2b      	adds	r3, r5, #4
   d9078:	f3bf 8f5b 	dmb	ish
   d907c:	e853 6f00 	ldrex	r6, [r3]
   d9080:	e843 4200 	strex	r2, r4, [r3]
   d9084:	2a00      	cmp	r2, #0
   d9086:	d1f9      	bne.n	d907c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9088:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d908c:	2e00      	cmp	r6, #0
   d908e:	d0de      	beq.n	d904e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9090:	4620      	mov	r0, r4
   d9092:	f7ff fa81 	bl	d8598 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9096:	4607      	mov	r7, r0
   d9098:	b160      	cbz	r0, d90b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d909a:	f105 010c 	add.w	r1, r5, #12
   d909e:	4630      	mov	r0, r6
   d90a0:	f7ff fe16 	bl	d8cd0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d90a4:	4630      	mov	r0, r6
   d90a6:	f7fd fa11 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d90aa:	2110      	movs	r1, #16
   d90ac:	4630      	mov	r0, r6
   d90ae:	f001 f9dc 	bl	da46a <_ZdlPvj>
   d90b2:	e7cc      	b.n	d904e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d90b4:	4631      	mov	r1, r6
   d90b6:	a803      	add	r0, sp, #12
   d90b8:	f7ff ff7c 	bl	d8fb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d90bc:	7b2b      	ldrb	r3, [r5, #12]
   d90be:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d90c2:	2010      	movs	r0, #16
   d90c4:	f7fa ffe7 	bl	d4096 <_Znwj>
   d90c8:	4605      	mov	r5, r0
   d90ca:	b1d0      	cbz	r0, d9102 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d90cc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90ce:	2014      	movs	r0, #20
   d90d0:	f7fa ffe1 	bl	d4096 <_Znwj>
   d90d4:	4604      	mov	r4, r0
   d90d6:	b178      	cbz	r0, d90f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d90d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d90da:	4601      	mov	r1, r0
   d90dc:	a803      	add	r0, sp, #12
   d90de:	f7fd ffaa 	bl	d7036 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d90e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90e6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90e8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d90ea:	9205      	str	r2, [sp, #20]
   d90ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90ee:	60e3      	str	r3, [r4, #12]
   d90f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d90f4:	9206      	str	r2, [sp, #24]
   d90f6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d90f8:	4b06      	ldr	r3, [pc, #24]	; (d9114 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d90fa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d90fc:	4b06      	ldr	r3, [pc, #24]	; (d9118 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d90fe:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9100:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d9102:	a803      	add	r0, sp, #12
   d9104:	f7fd f9e2 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9108:	2200      	movs	r2, #0
   d910a:	4629      	mov	r1, r5
   d910c:	4803      	ldr	r0, [pc, #12]	; (d911c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d910e:	f7ff fa4b 	bl	d85a8 <application_thread_invoke>
   d9112:	e7c7      	b.n	d90a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d9114:	000d8ce3 	.word	0x000d8ce3
   d9118:	000d8fd3 	.word	0x000d8fd3
   d911c:	000d8893 	.word	0x000d8893

000d9120 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9120:	2200      	movs	r2, #0
   d9122:	6840      	ldr	r0, [r0, #4]
   d9124:	4611      	mov	r1, r2
   d9126:	f7ff bb31 	b.w	d878c <network_listening>

000d912a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d912a:	2200      	movs	r2, #0
   d912c:	6840      	ldr	r0, [r0, #4]
   d912e:	4611      	mov	r1, r2
   d9130:	f7ff bb3c 	b.w	d87ac <network_get_listen_timeout>

000d9134 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d9134:	6840      	ldr	r0, [r0, #4]
   d9136:	2200      	movs	r2, #0
   d9138:	f7ff bb30 	b.w	d879c <network_set_listen_timeout>

000d913c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d913c:	6840      	ldr	r0, [r0, #4]
   d913e:	2200      	movs	r2, #0
   d9140:	f081 0101 	eor.w	r1, r1, #1
   d9144:	f7ff bb1a 	b.w	d877c <network_listen>

000d9148 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d9148:	2300      	movs	r3, #0
   d914a:	6840      	ldr	r0, [r0, #4]
   d914c:	461a      	mov	r2, r3
   d914e:	4619      	mov	r1, r3
   d9150:	f7ff bb0c 	b.w	d876c <network_off>

000d9154 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d9154:	2300      	movs	r3, #0
   d9156:	6840      	ldr	r0, [r0, #4]
   d9158:	461a      	mov	r2, r3
   d915a:	4619      	mov	r1, r3
   d915c:	f7ff bafe 	b.w	d875c <network_on>

000d9160 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9160:	2200      	movs	r2, #0
   d9162:	6840      	ldr	r0, [r0, #4]
   d9164:	4611      	mov	r1, r2
   d9166:	f7ff baf1 	b.w	d874c <network_ready>

000d916a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d916a:	2200      	movs	r2, #0
   d916c:	6840      	ldr	r0, [r0, #4]
   d916e:	4611      	mov	r1, r2
   d9170:	f7ff badc 	b.w	d872c <network_connecting>

000d9174 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9174:	6840      	ldr	r0, [r0, #4]
   d9176:	2200      	movs	r2, #0
   d9178:	2102      	movs	r1, #2
   d917a:	f7ff badf 	b.w	d873c <network_disconnect>

000d917e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d917e:	2300      	movs	r3, #0
   d9180:	6840      	ldr	r0, [r0, #4]
   d9182:	461a      	mov	r2, r3
   d9184:	f7ff baca 	b.w	d871c <network_connect>

000d9188 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9188:	4b02      	ldr	r3, [pc, #8]	; (d9194 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d918a:	2203      	movs	r2, #3
   d918c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d918e:	4a02      	ldr	r2, [pc, #8]	; (d9198 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9190:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d9192:	4770      	bx	lr
   d9194:	2003e61c 	.word	0x2003e61c
   d9198:	000dba38 	.word	0x000dba38

000d919c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d919c:	4770      	bx	lr

000d919e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d919e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91a0:	4606      	mov	r6, r0
   d91a2:	4615      	mov	r5, r2
   d91a4:	460c      	mov	r4, r1
   d91a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d91a8:	42bc      	cmp	r4, r7
   d91aa:	d006      	beq.n	d91ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d91ac:	6833      	ldr	r3, [r6, #0]
   d91ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d91b2:	689b      	ldr	r3, [r3, #8]
   d91b4:	4630      	mov	r0, r6
   d91b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d91b8:	e7f6      	b.n	d91a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d91ba:	4628      	mov	r0, r5
   d91bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d91be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d91be:	7c00      	ldrb	r0, [r0, #16]
   d91c0:	2200      	movs	r2, #0
   d91c2:	f7ff b87f 	b.w	d82c4 <hal_i2c_write>

000d91c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d91c6:	7c00      	ldrb	r0, [r0, #16]
   d91c8:	2100      	movs	r1, #0
   d91ca:	f7ff b883 	b.w	d82d4 <hal_i2c_available>

000d91ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d91ce:	7c00      	ldrb	r0, [r0, #16]
   d91d0:	2100      	movs	r1, #0
   d91d2:	f7ff b887 	b.w	d82e4 <hal_i2c_read>

000d91d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d91d6:	7c00      	ldrb	r0, [r0, #16]
   d91d8:	2100      	movs	r1, #0
   d91da:	f7ff b88b 	b.w	d82f4 <hal_i2c_peek>

000d91de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d91de:	7c00      	ldrb	r0, [r0, #16]
   d91e0:	2100      	movs	r1, #0
   d91e2:	f7ff b88f 	b.w	d8304 <hal_i2c_flush>

000d91e6 <_ZN7TwoWireD0Ev>:
   d91e6:	b510      	push	{r4, lr}
   d91e8:	2114      	movs	r1, #20
   d91ea:	4604      	mov	r4, r0
   d91ec:	f001 f93d 	bl	da46a <_ZdlPvj>
   d91f0:	4620      	mov	r0, r4
   d91f2:	bd10      	pop	{r4, pc}

000d91f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d91f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d91f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d91fa:	4604      	mov	r4, r0
   d91fc:	4608      	mov	r0, r1
   d91fe:	2100      	movs	r1, #0
   d9200:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9204:	4b03      	ldr	r3, [pc, #12]	; (d9214 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9206:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9208:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d920a:	4611      	mov	r1, r2
   d920c:	f7ff f88a 	bl	d8324 <hal_i2c_init>
}
   d9210:	4620      	mov	r0, r4
   d9212:	bd10      	pop	{r4, pc}
   d9214:	000dba6c 	.word	0x000dba6c

000d9218 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9218:	2300      	movs	r3, #0
   d921a:	7c00      	ldrb	r0, [r0, #16]
   d921c:	461a      	mov	r2, r3
   d921e:	4619      	mov	r1, r3
   d9220:	f7ff b838 	b.w	d8294 <hal_i2c_begin>

000d9224 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9226:	2200      	movs	r2, #0
   d9228:	2314      	movs	r3, #20
   d922a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d922e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9232:	780b      	ldrb	r3, [r1, #0]
   d9234:	f88d 3008 	strb.w	r3, [sp, #8]
   d9238:	684b      	ldr	r3, [r1, #4]
   d923a:	9303      	str	r3, [sp, #12]
   d923c:	68cb      	ldr	r3, [r1, #12]
   d923e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9240:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9242:	7a0b      	ldrb	r3, [r1, #8]
   d9244:	9305      	str	r3, [sp, #20]
   d9246:	a901      	add	r1, sp, #4
   d9248:	f7ff f884 	bl	d8354 <hal_i2c_request_ex>
}
   d924c:	b007      	add	sp, #28
   d924e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9252 <_ZN7TwoWire11requestFromEhjh>:
{
   d9252:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9254:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9256:	f88d 1000 	strb.w	r1, [sp]
   d925a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d925e:	9103      	str	r1, [sp, #12]
   d9260:	bf18      	it	ne
   d9262:	2301      	movne	r3, #1
   d9264:	4669      	mov	r1, sp
    size_ = size;
   d9266:	9201      	str	r2, [sp, #4]
   d9268:	f88d 3008 	strb.w	r3, [sp, #8]
   d926c:	f7ff ffda 	bl	d9224 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9270:	b005      	add	sp, #20
   d9272:	f85d fb04 	ldr.w	pc, [sp], #4

000d9276 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9276:	7c00      	ldrb	r0, [r0, #16]
   d9278:	2200      	movs	r2, #0
   d927a:	f7ff b813 	b.w	d82a4 <hal_i2c_begin_transmission>

000d927e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d927e:	b2c9      	uxtb	r1, r1
   d9280:	f7ff bff9 	b.w	d9276 <_ZN7TwoWire17beginTransmissionEh>

000d9284 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9284:	7c00      	ldrb	r0, [r0, #16]
   d9286:	2200      	movs	r2, #0
   d9288:	f7ff b814 	b.w	d82b4 <hal_i2c_end_transmission>

000d928c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d928c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d928e:	2100      	movs	r1, #0
   d9290:	7c00      	ldrb	r0, [r0, #16]
   d9292:	f7ff f84f 	bl	d8334 <hal_i2c_lock>
}
   d9296:	fab0 f080 	clz	r0, r0
   d929a:	0940      	lsrs	r0, r0, #5
   d929c:	bd08      	pop	{r3, pc}

000d929e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d929e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d92a0:	2100      	movs	r1, #0
   d92a2:	7c00      	ldrb	r0, [r0, #16]
   d92a4:	f7ff f84e 	bl	d8344 <hal_i2c_unlock>
}
   d92a8:	fab0 f080 	clz	r0, r0
   d92ac:	0940      	lsrs	r0, r0, #5
   d92ae:	bd08      	pop	{r3, pc}

000d92b0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d92b0:	f7fe bfe8 	b.w	d8284 <HAL_Interrupts_Disable_All>

000d92b4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d92b4:	f7fe bfde 	b.w	d8274 <HAL_Interrupts_Enable_All>

000d92b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d92b8:	4770      	bx	lr

000d92ba <_ZN9IPAddressD0Ev>:
   d92ba:	b510      	push	{r4, lr}
   d92bc:	2118      	movs	r1, #24
   d92be:	4604      	mov	r4, r0
   d92c0:	f001 f8d3 	bl	da46a <_ZdlPvj>
   d92c4:	4620      	mov	r0, r4
   d92c6:	bd10      	pop	{r4, pc}

000d92c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d92c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d92ca:	7d03      	ldrb	r3, [r0, #20]
   d92cc:	2b06      	cmp	r3, #6
{
   d92ce:	b08d      	sub	sp, #52	; 0x34
   d92d0:	460e      	mov	r6, r1
   d92d2:	f100 0704 	add.w	r7, r0, #4
   d92d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d92da:	d012      	beq.n	d9302 <_ZNK9IPAddress7printToER5Print+0x3a>
   d92dc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d92e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d92e4:	220a      	movs	r2, #10
   d92e6:	4630      	mov	r0, r6
   d92e8:	f000 f943 	bl	d9572 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d92ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d92ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d92f0:	d019      	beq.n	d9326 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d92f2:	2c00      	cmp	r4, #0
   d92f4:	d0f4      	beq.n	d92e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d92f6:	212e      	movs	r1, #46	; 0x2e
   d92f8:	4630      	mov	r0, r6
   d92fa:	f000 f92b 	bl	d9554 <_ZN5Print5printEc>
   d92fe:	4404      	add	r4, r0
   d9300:	e7ee      	b.n	d92e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9302:	232f      	movs	r3, #47	; 0x2f
   d9304:	466a      	mov	r2, sp
   d9306:	4639      	mov	r1, r7
   d9308:	200a      	movs	r0, #10
		buf[0] = 0;
   d930a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d930e:	f7ff f829 	bl	d8364 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9312:	4668      	mov	r0, sp
   d9314:	f001 fdf5 	bl	daf02 <strlen>
   d9318:	6833      	ldr	r3, [r6, #0]
   d931a:	4602      	mov	r2, r0
   d931c:	68db      	ldr	r3, [r3, #12]
   d931e:	4669      	mov	r1, sp
   d9320:	4630      	mov	r0, r6
   d9322:	4798      	blx	r3
   d9324:	4604      	mov	r4, r0
    }
    return n;
}
   d9326:	4620      	mov	r0, r4
   d9328:	b00d      	add	sp, #52	; 0x34
   d932a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d932c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d932c:	b510      	push	{r4, lr}
   d932e:	4b05      	ldr	r3, [pc, #20]	; (d9344 <_ZN9IPAddressC1Ev+0x18>)
   d9330:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9332:	2211      	movs	r2, #17
   d9334:	f840 3b04 	str.w	r3, [r0], #4
   d9338:	2100      	movs	r1, #0
   d933a:	f001 fd87 	bl	dae4c <memset>
}
   d933e:	4620      	mov	r0, r4
   d9340:	bd10      	pop	{r4, pc}
   d9342:	bf00      	nop
   d9344:	000dba94 	.word	0x000dba94

000d9348 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9348:	4603      	mov	r3, r0
   d934a:	4a07      	ldr	r2, [pc, #28]	; (d9368 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d934c:	b510      	push	{r4, lr}
   d934e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9352:	f101 0210 	add.w	r2, r1, #16
   d9356:	f851 4b04 	ldr.w	r4, [r1], #4
   d935a:	f843 4b04 	str.w	r4, [r3], #4
   d935e:	4291      	cmp	r1, r2
   d9360:	d1f9      	bne.n	d9356 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9362:	780a      	ldrb	r2, [r1, #0]
   d9364:	701a      	strb	r2, [r3, #0]
}
   d9366:	bd10      	pop	{r4, pc}
   d9368:	000dba94 	.word	0x000dba94

000d936c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d936c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d936e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9372:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9376:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d937a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d937e:	2304      	movs	r3, #4
   d9380:	6041      	str	r1, [r0, #4]
   d9382:	7503      	strb	r3, [r0, #20]
}
   d9384:	bd10      	pop	{r4, pc}

000d9386 <_ZN9IPAddressaSEPKh>:
{
   d9386:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9388:	78cb      	ldrb	r3, [r1, #3]
   d938a:	9300      	str	r3, [sp, #0]
   d938c:	788b      	ldrb	r3, [r1, #2]
   d938e:	784a      	ldrb	r2, [r1, #1]
   d9390:	7809      	ldrb	r1, [r1, #0]
   d9392:	f7ff ffeb 	bl	d936c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9396:	b002      	add	sp, #8
   d9398:	bd10      	pop	{r4, pc}
	...

000d939c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d939c:	4b01      	ldr	r3, [pc, #4]	; (d93a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d939e:	4a02      	ldr	r2, [pc, #8]	; (d93a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d93a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d93a2:	4770      	bx	lr
   d93a4:	2003e624 	.word	0x2003e624
   d93a8:	000dbaa0 	.word	0x000dbaa0

000d93ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d93ac:	2300      	movs	r3, #0
   d93ae:	6840      	ldr	r0, [r0, #4]
   d93b0:	461a      	mov	r2, r3
   d93b2:	f7ff b9b3 	b.w	d871c <network_connect>

000d93b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d93b6:	6840      	ldr	r0, [r0, #4]
   d93b8:	2200      	movs	r2, #0
   d93ba:	2102      	movs	r1, #2
   d93bc:	f7ff b9be 	b.w	d873c <network_disconnect>

000d93c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d93c0:	2200      	movs	r2, #0
   d93c2:	6840      	ldr	r0, [r0, #4]
   d93c4:	4611      	mov	r1, r2
   d93c6:	f7ff b9b1 	b.w	d872c <network_connecting>

000d93ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d93ca:	2200      	movs	r2, #0
   d93cc:	6840      	ldr	r0, [r0, #4]
   d93ce:	4611      	mov	r1, r2
   d93d0:	f7ff b9bc 	b.w	d874c <network_ready>

000d93d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d93d4:	2300      	movs	r3, #0
   d93d6:	6840      	ldr	r0, [r0, #4]
   d93d8:	461a      	mov	r2, r3
   d93da:	4619      	mov	r1, r3
   d93dc:	f7ff b9be 	b.w	d875c <network_on>

000d93e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d93e0:	2300      	movs	r3, #0
   d93e2:	6840      	ldr	r0, [r0, #4]
   d93e4:	461a      	mov	r2, r3
   d93e6:	4619      	mov	r1, r3
   d93e8:	f7ff b9c0 	b.w	d876c <network_off>

000d93ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d93ec:	6840      	ldr	r0, [r0, #4]
   d93ee:	2200      	movs	r2, #0
   d93f0:	f081 0101 	eor.w	r1, r1, #1
   d93f4:	f7ff b9c2 	b.w	d877c <network_listen>

000d93f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d93f8:	6840      	ldr	r0, [r0, #4]
   d93fa:	2200      	movs	r2, #0
   d93fc:	f7ff b9ce 	b.w	d879c <network_set_listen_timeout>

000d9400 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9400:	2200      	movs	r2, #0
   d9402:	6840      	ldr	r0, [r0, #4]
   d9404:	4611      	mov	r1, r2
   d9406:	f7ff b9d1 	b.w	d87ac <network_get_listen_timeout>

000d940a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d940a:	2200      	movs	r2, #0
   d940c:	6840      	ldr	r0, [r0, #4]
   d940e:	4611      	mov	r1, r2
   d9410:	f7ff b9bc 	b.w	d878c <network_listening>

000d9414 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9418:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d941a:	b095      	sub	sp, #84	; 0x54
   d941c:	4616      	mov	r6, r2
   d941e:	460d      	mov	r5, r1
   d9420:	4607      	mov	r7, r0
    IPAddress addr;
   d9422:	f7ff ff83 	bl	d932c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9426:	4621      	mov	r1, r4
   d9428:	2218      	movs	r2, #24
   d942a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d942c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d942e:	f001 fd0d 	bl	dae4c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9432:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9434:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9438:	4621      	mov	r1, r4
   d943a:	466b      	mov	r3, sp
   d943c:	aa0c      	add	r2, sp, #48	; 0x30
   d943e:	4630      	mov	r0, r6
   d9440:	f7fe ffa0 	bl	d8384 <netdb_getaddrinfo>
    if (!r) {
   d9444:	4604      	mov	r4, r0
   d9446:	2800      	cmp	r0, #0
   d9448:	d146      	bne.n	d94d8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d944a:	4602      	mov	r2, r0
   d944c:	2101      	movs	r1, #1
   d944e:	6868      	ldr	r0, [r5, #4]
   d9450:	f7ff f97c 	bl	d874c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9454:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9456:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9458:	4622      	mov	r2, r4
   d945a:	6868      	ldr	r0, [r5, #4]
   d945c:	f7ff f976 	bl	d874c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9460:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9462:	4681      	mov	r9, r0
        bool ok = false;
   d9464:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9466:	2e00      	cmp	r6, #0
   d9468:	d036      	beq.n	d94d8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d946a:	2900      	cmp	r1, #0
   d946c:	d134      	bne.n	d94d8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d946e:	6873      	ldr	r3, [r6, #4]
   d9470:	2b02      	cmp	r3, #2
   d9472:	d003      	beq.n	d947c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9474:	2b0a      	cmp	r3, #10
   d9476:	d00b      	beq.n	d9490 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9478:	69f6      	ldr	r6, [r6, #28]
   d947a:	e7f4      	b.n	d9466 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d947c:	f1b8 0f00 	cmp.w	r8, #0
   d9480:	d004      	beq.n	d948c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9482:	6971      	ldr	r1, [r6, #20]
   d9484:	4638      	mov	r0, r7
   d9486:	3104      	adds	r1, #4
   d9488:	f7ff ff7d 	bl	d9386 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d948c:	4641      	mov	r1, r8
   d948e:	e7f3      	b.n	d9478 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9490:	f1b9 0f00 	cmp.w	r9, #0
   d9494:	d101      	bne.n	d949a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9496:	4649      	mov	r1, r9
   d9498:	e7ee      	b.n	d9478 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d949a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d949c:	2210      	movs	r2, #16
   d949e:	a801      	add	r0, sp, #4
   d94a0:	f001 fcd4 	bl	dae4c <memset>
                    a.v = 6;
   d94a4:	2306      	movs	r3, #6
   d94a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d94aa:	ad01      	add	r5, sp, #4
   d94ac:	f104 0308 	add.w	r3, r4, #8
   d94b0:	3418      	adds	r4, #24
   d94b2:	6818      	ldr	r0, [r3, #0]
   d94b4:	6859      	ldr	r1, [r3, #4]
   d94b6:	462a      	mov	r2, r5
   d94b8:	c203      	stmia	r2!, {r0, r1}
   d94ba:	3308      	adds	r3, #8
   d94bc:	42a3      	cmp	r3, r4
   d94be:	4615      	mov	r5, r2
   d94c0:	d1f7      	bne.n	d94b2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d94c2:	a901      	add	r1, sp, #4
   d94c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d94c6:	ad07      	add	r5, sp, #28
   d94c8:	f7ff ff3e 	bl	d9348 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d94cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d94ce:	1d3c      	adds	r4, r7, #4
   d94d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d94d2:	682b      	ldr	r3, [r5, #0]
   d94d4:	7023      	strb	r3, [r4, #0]
   d94d6:	e7de      	b.n	d9496 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d94d8:	9800      	ldr	r0, [sp, #0]
   d94da:	f7fe ff4b 	bl	d8374 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d94de:	4638      	mov	r0, r7
   d94e0:	b015      	add	sp, #84	; 0x54
   d94e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d94e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d94e8:	4b02      	ldr	r3, [pc, #8]	; (d94f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d94ea:	4a03      	ldr	r2, [pc, #12]	; (d94f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d94ec:	601a      	str	r2, [r3, #0]
   d94ee:	2200      	movs	r2, #0
   d94f0:	605a      	str	r2, [r3, #4]

} // spark
   d94f2:	4770      	bx	lr
   d94f4:	2003e628 	.word	0x2003e628
   d94f8:	000dbaac 	.word	0x000dbaac

000d94fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d94fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d94fe:	4606      	mov	r6, r0
   d9500:	460d      	mov	r5, r1
  size_t n = 0;
   d9502:	188f      	adds	r7, r1, r2
   d9504:	2400      	movs	r4, #0
  while (size--) {
   d9506:	42bd      	cmp	r5, r7
   d9508:	d00c      	beq.n	d9524 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d950a:	6833      	ldr	r3, [r6, #0]
   d950c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9510:	689b      	ldr	r3, [r3, #8]
   d9512:	4630      	mov	r0, r6
   d9514:	4798      	blx	r3
     if (chunk>=0)
   d9516:	1e03      	subs	r3, r0, #0
   d9518:	db01      	blt.n	d951e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d951a:	441c      	add	r4, r3
  while (size--) {
   d951c:	e7f3      	b.n	d9506 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d951e:	2c00      	cmp	r4, #0
   d9520:	bf08      	it	eq
   d9522:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9524:	4620      	mov	r0, r4
   d9526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9528 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9528:	b513      	push	{r0, r1, r4, lr}
   d952a:	4604      	mov	r4, r0
    }
   d952c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d952e:	b159      	cbz	r1, d9548 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9530:	9101      	str	r1, [sp, #4]
   d9532:	f001 fce6 	bl	daf02 <strlen>
   d9536:	6823      	ldr	r3, [r4, #0]
   d9538:	9901      	ldr	r1, [sp, #4]
   d953a:	68db      	ldr	r3, [r3, #12]
   d953c:	4602      	mov	r2, r0
   d953e:	4620      	mov	r0, r4
    }
   d9540:	b002      	add	sp, #8
   d9542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9546:	4718      	bx	r3
    }
   d9548:	b002      	add	sp, #8
   d954a:	bd10      	pop	{r4, pc}

000d954c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d954c:	b508      	push	{r3, lr}
  return write(str);
   d954e:	f7ff ffeb 	bl	d9528 <_ZN5Print5writeEPKc>
}
   d9552:	bd08      	pop	{r3, pc}

000d9554 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9554:	6803      	ldr	r3, [r0, #0]
   d9556:	689b      	ldr	r3, [r3, #8]
   d9558:	4718      	bx	r3

000d955a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d955a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d955c:	210d      	movs	r1, #13
{
   d955e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9560:	f7ff fff8 	bl	d9554 <_ZN5Print5printEc>
  n += print('\n');
   d9564:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9566:	4604      	mov	r4, r0
  n += print('\n');
   d9568:	4628      	mov	r0, r5
   d956a:	f7ff fff3 	bl	d9554 <_ZN5Print5printEc>
  return n;
}
   d956e:	4420      	add	r0, r4
   d9570:	bd38      	pop	{r3, r4, r5, pc}

000d9572 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9572:	b530      	push	{r4, r5, lr}
   d9574:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9576:	2300      	movs	r3, #0
   d9578:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d957c:	2a01      	cmp	r2, #1
   d957e:	bf98      	it	ls
   d9580:	220a      	movls	r2, #10
   d9582:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9584:	460d      	mov	r5, r1
   d9586:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d958a:	fb01 5312 	mls	r3, r1, r2, r5
   d958e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9592:	2b09      	cmp	r3, #9
   d9594:	bf94      	ite	ls
   d9596:	3330      	addls	r3, #48	; 0x30
   d9598:	3337      	addhi	r3, #55	; 0x37
   d959a:	b2db      	uxtb	r3, r3
  } while(n);
   d959c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d959e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d95a2:	d9ef      	bls.n	d9584 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d95a4:	4621      	mov	r1, r4
   d95a6:	f7ff ffbf 	bl	d9528 <_ZN5Print5writeEPKc>
}
   d95aa:	b00b      	add	sp, #44	; 0x2c
   d95ac:	bd30      	pop	{r4, r5, pc}

000d95ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d95ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95b2:	b086      	sub	sp, #24
   d95b4:	af00      	add	r7, sp, #0
   d95b6:	4605      	mov	r5, r0
   d95b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d95ba:	1d38      	adds	r0, r7, #4
   d95bc:	2114      	movs	r1, #20
{
   d95be:	4614      	mov	r4, r2
    va_copy(args2, args);
   d95c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d95c2:	f7ff f923 	bl	d880c <vsnprintf>

    if (n<bufsize)
   d95c6:	2813      	cmp	r0, #19
   d95c8:	d80e      	bhi.n	d95e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d95ca:	1d39      	adds	r1, r7, #4
   d95cc:	4628      	mov	r0, r5
   d95ce:	f7ff ffab 	bl	d9528 <_ZN5Print5writeEPKc>
   d95d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d95d4:	b11e      	cbz	r6, d95de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d95d6:	4628      	mov	r0, r5
   d95d8:	f7ff ffbf 	bl	d955a <_ZN5Print7printlnEv>
   d95dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d95de:	4620      	mov	r0, r4
   d95e0:	3718      	adds	r7, #24
   d95e2:	46bd      	mov	sp, r7
   d95e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d95e8:	f100 0308 	add.w	r3, r0, #8
   d95ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d95f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d95f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d95f6:	4622      	mov	r2, r4
   d95f8:	1c41      	adds	r1, r0, #1
   d95fa:	683b      	ldr	r3, [r7, #0]
   d95fc:	4668      	mov	r0, sp
   d95fe:	f7ff f905 	bl	d880c <vsnprintf>
  return write(str);
   d9602:	4669      	mov	r1, sp
   d9604:	4628      	mov	r0, r5
   d9606:	f7ff ff8f 	bl	d9528 <_ZN5Print5writeEPKc>
   d960a:	4604      	mov	r4, r0
   d960c:	46c5      	mov	sp, r8
   d960e:	e7e1      	b.n	d95d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9610 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d9610:	b510      	push	{r4, lr}
   d9612:	4604      	mov	r4, r0
   d9614:	f7fc ff5a 	bl	d64cc <_ZNSt14_Function_baseD1Ev>
   d9618:	4620      	mov	r0, r4
   d961a:	bd10      	pop	{r4, pc}

000d961c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d961c:	4803      	ldr	r0, [pc, #12]	; (d962c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d961e:	4a04      	ldr	r2, [pc, #16]	; (d9630 <_GLOBAL__sub_I_RGB+0x14>)
   d9620:	4904      	ldr	r1, [pc, #16]	; (d9634 <_GLOBAL__sub_I_RGB+0x18>)
   d9622:	2300      	movs	r3, #0
   d9624:	6083      	str	r3, [r0, #8]
   d9626:	f000 bf1b 	b.w	da460 <__aeabi_atexit>
   d962a:	bf00      	nop
   d962c:	2003e630 	.word	0x2003e630
   d9630:	2003e200 	.word	0x2003e200
   d9634:	000d9611 	.word	0x000d9611

000d9638 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9638:	2100      	movs	r1, #0
   d963a:	f7fe bedb 	b.w	d83f4 <hal_spi_acquire>

000d963e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d963e:	2100      	movs	r1, #0
   d9640:	f7fe bee0 	b.w	d8404 <hal_spi_release>

000d9644 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9644:	b510      	push	{r4, lr}
   d9646:	4604      	mov	r4, r0
   d9648:	4608      	mov	r0, r1
{
    _spi = spi;
   d964a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d964c:	f7fe feb2 	bl	d83b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9650:	2300      	movs	r3, #0
   d9652:	6063      	str	r3, [r4, #4]
}
   d9654:	4620      	mov	r0, r4
   d9656:	bd10      	pop	{r4, pc}

000d9658 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9658:	b513      	push	{r0, r1, r4, lr}
   d965a:	4604      	mov	r4, r0
    if (!lock())
   d965c:	7800      	ldrb	r0, [r0, #0]
{
   d965e:	9101      	str	r1, [sp, #4]
    if (!lock())
   d9660:	f7ff ffea 	bl	d9638 <_ZN8SPIClass4lockEv.isra.0>
   d9664:	9901      	ldr	r1, [sp, #4]
   d9666:	b940      	cbnz	r0, d967a <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d9668:	7820      	ldrb	r0, [r4, #0]
   d966a:	f7fe fe93 	bl	d8394 <hal_spi_begin>
        unlock();
   d966e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9670:	b002      	add	sp, #8
   d9672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9676:	f7ff bfe2 	b.w	d963e <_ZN8SPIClass6unlockEv.isra.0>
}
   d967a:	b002      	add	sp, #8
   d967c:	bd10      	pop	{r4, pc}

000d967e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d967e:	7800      	ldrb	r0, [r0, #0]
   d9680:	f7ff bfdd 	b.w	d963e <_ZN8SPIClass6unlockEv.isra.0>

000d9684 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9684:	0840      	lsrs	r0, r0, #1
{
   d9686:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9688:	6018      	str	r0, [r3, #0]
   d968a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d968c:	6818      	ldr	r0, [r3, #0]
   d968e:	4288      	cmp	r0, r1
   d9690:	b2e5      	uxtb	r5, r4
   d9692:	d906      	bls.n	d96a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9694:	3401      	adds	r4, #1
   d9696:	2c08      	cmp	r4, #8
   d9698:	d002      	beq.n	d96a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d969a:	0840      	lsrs	r0, r0, #1
   d969c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d969e:	e7f5      	b.n	d968c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d96a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d96a2:	4b02      	ldr	r3, [pc, #8]	; (d96ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d96a4:	5d5b      	ldrb	r3, [r3, r5]
   d96a6:	7013      	strb	r3, [r2, #0]
}
   d96a8:	bd30      	pop	{r4, r5, pc}
   d96aa:	bf00      	nop
   d96ac:	000dbad8 	.word	0x000dbad8

000d96b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d96b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d96b4:	4606      	mov	r6, r0
   d96b6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d96b8:	7800      	ldrb	r0, [r0, #0]
{
   d96ba:	460d      	mov	r5, r1
    CHECK(lock());
   d96bc:	f7ff ffbc 	bl	d9638 <_ZN8SPIClass4lockEv.isra.0>
   d96c0:	2800      	cmp	r0, #0
   d96c2:	db1b      	blt.n	d96fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d96c4:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d96c6:	2214      	movs	r2, #20
   d96c8:	2100      	movs	r1, #0
   d96ca:	a809      	add	r0, sp, #36	; 0x24
   d96cc:	f001 fbbe 	bl	dae4c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d96d0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d96d2:	2200      	movs	r2, #0
   d96d4:	a909      	add	r1, sp, #36	; 0x24
   d96d6:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d96d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d96dc:	f7fe fe7a 	bl	d83d4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d96e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d96e4:	b113      	cbz	r3, d96ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d96e6:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d96ea:	b154      	cbz	r4, d9702 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d96ec:	2700      	movs	r7, #0
   d96ee:	46b9      	mov	r9, r7
   d96f0:	46b8      	mov	r8, r7
   d96f2:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d96f4:	792b      	ldrb	r3, [r5, #4]
   d96f6:	b15c      	cbz	r4, d9710 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d96f8:	b1c3      	cbz	r3, d972c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d96fa:	2000      	movs	r0, #0
}
   d96fc:	b00f      	add	sp, #60	; 0x3c
   d96fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9702:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9706:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d970a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d970e:	e7f1      	b.n	d96f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9710:	2b00      	cmp	r3, #0
   d9712:	d135      	bne.n	d9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9714:	68ab      	ldr	r3, [r5, #8]
   d9716:	4543      	cmp	r3, r8
   d9718:	d108      	bne.n	d972c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d971a:	f88d 9020 	strb.w	r9, [sp, #32]
   d971e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9722:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9726:	89ab      	ldrh	r3, [r5, #12]
   d9728:	429a      	cmp	r2, r3
   d972a:	d0e6      	beq.n	d96fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d972c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d972e:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d9730:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9734:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9736:	ab04      	add	r3, sp, #16
   d9738:	f10d 020f 	add.w	r2, sp, #15
   d973c:	f7ff ffa2 	bl	d9684 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9740:	7929      	ldrb	r1, [r5, #4]
   d9742:	b984      	cbnz	r4, d9766 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9744:	b989      	cbnz	r1, d976a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9746:	68ab      	ldr	r3, [r5, #8]
   d9748:	4543      	cmp	r3, r8
   d974a:	d30e      	bcc.n	d976a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d974c:	f88d 9020 	strb.w	r9, [sp, #32]
   d9750:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9754:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9758:	89ab      	ldrh	r3, [r5, #12]
   d975a:	429a      	cmp	r2, r3
   d975c:	d105      	bne.n	d976a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d975e:	9b04      	ldr	r3, [sp, #16]
   d9760:	4543      	cmp	r3, r8
   d9762:	d102      	bne.n	d976a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9764:	e7c9      	b.n	d96fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9766:	2900      	cmp	r1, #0
   d9768:	d1f9      	bne.n	d975e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d976a:	2300      	movs	r3, #0
   d976c:	9301      	str	r3, [sp, #4]
   d976e:	7b6b      	ldrb	r3, [r5, #13]
   d9770:	9300      	str	r3, [sp, #0]
   d9772:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9776:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9778:	7830      	ldrb	r0, [r6, #0]
   d977a:	f7fe fe33 	bl	d83e4 <hal_spi_set_settings>
   d977e:	e7bc      	b.n	d96fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9780:	e9cd 4400 	strd	r4, r4, [sp]
   d9784:	4623      	mov	r3, r4
   d9786:	4622      	mov	r2, r4
   d9788:	2101      	movs	r1, #1
   d978a:	e7f5      	b.n	d9778 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d978c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d978c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d978e:	7800      	ldrb	r0, [r0, #0]
   d9790:	f7fe fe08 	bl	d83a4 <hal_spi_transfer>
}
   d9794:	b2c0      	uxtb	r0, r0
   d9796:	bd08      	pop	{r3, pc}

000d9798 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9798:	b510      	push	{r4, lr}
   d979a:	4604      	mov	r4, r0
{
	free(buffer);
   d979c:	6800      	ldr	r0, [r0, #0]
   d979e:	f7ff f815 	bl	d87cc <free>
}
   d97a2:	4620      	mov	r0, r4
   d97a4:	bd10      	pop	{r4, pc}

000d97a6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d97a6:	b510      	push	{r4, lr}
   d97a8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d97aa:	6800      	ldr	r0, [r0, #0]
   d97ac:	b108      	cbz	r0, d97b2 <_ZN6String10invalidateEv+0xc>
   d97ae:	f7ff f80d 	bl	d87cc <free>
	buffer = NULL;
   d97b2:	2300      	movs	r3, #0
	capacity = len = 0;
   d97b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d97b8:	6023      	str	r3, [r4, #0]
}
   d97ba:	bd10      	pop	{r4, pc}

000d97bc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d97bc:	b538      	push	{r3, r4, r5, lr}
   d97be:	4604      	mov	r4, r0
   d97c0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d97c2:	6800      	ldr	r0, [r0, #0]
   d97c4:	3101      	adds	r1, #1
   d97c6:	f7ff f809 	bl	d87dc <realloc>
	if (newbuffer) {
   d97ca:	b110      	cbz	r0, d97d2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d97cc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d97d0:	2001      	movs	r0, #1
	}
	return 0;
}
   d97d2:	bd38      	pop	{r3, r4, r5, pc}

000d97d4 <_ZN6String7reserveEj>:
{
   d97d4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d97d6:	6803      	ldr	r3, [r0, #0]
{
   d97d8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d97da:	b123      	cbz	r3, d97e6 <_ZN6String7reserveEj+0x12>
   d97dc:	6843      	ldr	r3, [r0, #4]
   d97de:	428b      	cmp	r3, r1
   d97e0:	d301      	bcc.n	d97e6 <_ZN6String7reserveEj+0x12>
   d97e2:	2001      	movs	r0, #1
}
   d97e4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d97e6:	4620      	mov	r0, r4
   d97e8:	f7ff ffe8 	bl	d97bc <_ZN6String12changeBufferEj>
   d97ec:	2800      	cmp	r0, #0
   d97ee:	d0f9      	beq.n	d97e4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d97f0:	68a3      	ldr	r3, [r4, #8]
   d97f2:	2b00      	cmp	r3, #0
   d97f4:	d1f5      	bne.n	d97e2 <_ZN6String7reserveEj+0xe>
   d97f6:	6822      	ldr	r2, [r4, #0]
   d97f8:	7013      	strb	r3, [r2, #0]
   d97fa:	e7f2      	b.n	d97e2 <_ZN6String7reserveEj+0xe>

000d97fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d97fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d97fe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9800:	4611      	mov	r1, r2
   d9802:	9201      	str	r2, [sp, #4]
{
   d9804:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9806:	f7ff ffe5 	bl	d97d4 <_ZN6String7reserveEj>
   d980a:	9a01      	ldr	r2, [sp, #4]
   d980c:	b928      	cbnz	r0, d981a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d980e:	4620      	mov	r0, r4
   d9810:	f7ff ffc9 	bl	d97a6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9814:	4620      	mov	r0, r4
   d9816:	b003      	add	sp, #12
   d9818:	bd30      	pop	{r4, r5, pc}
	len = length;
   d981a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d981c:	4629      	mov	r1, r5
   d981e:	6820      	ldr	r0, [r4, #0]
   d9820:	f001 faec 	bl	dadfc <memcpy>
	buffer[len] = 0;
   d9824:	6822      	ldr	r2, [r4, #0]
   d9826:	68a3      	ldr	r3, [r4, #8]
   d9828:	2100      	movs	r1, #0
   d982a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d982c:	e7f2      	b.n	d9814 <_ZN6String4copyEPKcj+0x18>

000d982e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d982e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9830:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9832:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9836:	4604      	mov	r4, r0
	len = 0;
   d9838:	6083      	str	r3, [r0, #8]
	flags = 0;
   d983a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d983c:	b141      	cbz	r1, d9850 <_ZN6StringC1EPKc+0x22>
   d983e:	4608      	mov	r0, r1
   d9840:	9101      	str	r1, [sp, #4]
   d9842:	f001 fb5e 	bl	daf02 <strlen>
   d9846:	9901      	ldr	r1, [sp, #4]
   d9848:	4602      	mov	r2, r0
   d984a:	4620      	mov	r0, r4
   d984c:	f7ff ffd6 	bl	d97fc <_ZN6String4copyEPKcj>
}
   d9850:	4620      	mov	r0, r4
   d9852:	b002      	add	sp, #8
   d9854:	bd10      	pop	{r4, pc}

000d9856 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9856:	4288      	cmp	r0, r1
{
   d9858:	b510      	push	{r4, lr}
   d985a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d985c:	d005      	beq.n	d986a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d985e:	680b      	ldr	r3, [r1, #0]
   d9860:	b12b      	cbz	r3, d986e <_ZN6StringaSERKS_+0x18>
   d9862:	688a      	ldr	r2, [r1, #8]
   d9864:	4619      	mov	r1, r3
   d9866:	f7ff ffc9 	bl	d97fc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d986a:	4620      	mov	r0, r4
   d986c:	bd10      	pop	{r4, pc}
	else invalidate();
   d986e:	f7ff ff9a 	bl	d97a6 <_ZN6String10invalidateEv>
   d9872:	e7fa      	b.n	d986a <_ZN6StringaSERKS_+0x14>

000d9874 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9874:	b510      	push	{r4, lr}
	buffer = NULL;
   d9876:	2300      	movs	r3, #0
String::String(const String &value)
   d9878:	4604      	mov	r4, r0
	capacity = 0;
   d987a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d987e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9880:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9882:	f7ff ffe8 	bl	d9856 <_ZN6StringaSERKS_>
}
   d9886:	4620      	mov	r0, r4
   d9888:	bd10      	pop	{r4, pc}

000d988a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d988a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d988c:	6882      	ldr	r2, [r0, #8]
   d988e:	b93a      	cbnz	r2, d98a0 <_ZNK6String6equalsEPKc+0x16>
   d9890:	b121      	cbz	r1, d989c <_ZNK6String6equalsEPKc+0x12>
   d9892:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9894:	fab0 f080 	clz	r0, r0
   d9898:	0940      	lsrs	r0, r0, #5
   d989a:	e000      	b.n	d989e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d989c:	2001      	movs	r0, #1
}
   d989e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d98a0:	6800      	ldr	r0, [r0, #0]
   d98a2:	b909      	cbnz	r1, d98a8 <_ZNK6String6equalsEPKc+0x1e>
   d98a4:	7800      	ldrb	r0, [r0, #0]
   d98a6:	e7f5      	b.n	d9894 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d98a8:	f001 fafc 	bl	daea4 <strcmp>
   d98ac:	e7f2      	b.n	d9894 <_ZNK6String6equalsEPKc+0xa>

000d98ae <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d98ae:	b558      	push	{r3, r4, r6, lr}
   d98b0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d98b2:	b12a      	cbz	r2, d98c0 <_ZNK6String8getBytesEPhjj+0x12>
   d98b4:	b121      	cbz	r1, d98c0 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d98b6:	6884      	ldr	r4, [r0, #8]
   d98b8:	429c      	cmp	r4, r3
   d98ba:	d802      	bhi.n	d98c2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d98bc:	2300      	movs	r3, #0
   d98be:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d98c0:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d98c2:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d98c4:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d98c6:	6801      	ldr	r1, [r0, #0]
   d98c8:	4294      	cmp	r4, r2
   d98ca:	bf28      	it	cs
   d98cc:	4614      	movcs	r4, r2
   d98ce:	4419      	add	r1, r3
   d98d0:	4622      	mov	r2, r4
   d98d2:	4630      	mov	r0, r6
   d98d4:	f001 fb1d 	bl	daf12 <strncpy>
	buf[n] = 0;
   d98d8:	2300      	movs	r3, #0
   d98da:	5533      	strb	r3, [r6, r4]
   d98dc:	e7f0      	b.n	d98c0 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d98e0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d98e0:	b40e      	push	{r1, r2, r3}
   d98e2:	b570      	push	{r4, r5, r6, lr}
   d98e4:	b087      	sub	sp, #28
   d98e6:	ad0b      	add	r5, sp, #44	; 0x2c
   d98e8:	4604      	mov	r4, r0
   d98ea:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d98ee:	9201      	str	r2, [sp, #4]
   d98f0:	462b      	mov	r3, r5
   d98f2:	2105      	movs	r1, #5
   d98f4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d98f6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d98f8:	f7fe ff88 	bl	d880c <vsnprintf>
    va_end(marker);

    String result;
   d98fc:	490b      	ldr	r1, [pc, #44]	; (d992c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d98fe:	4606      	mov	r6, r0
    String result;
   d9900:	4620      	mov	r0, r4
   d9902:	f7ff ff94 	bl	d982e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d9906:	4631      	mov	r1, r6
   d9908:	4620      	mov	r0, r4
   d990a:	f7ff ff63 	bl	d97d4 <_ZN6String7reserveEj>
    if (result.buffer) {
   d990e:	6820      	ldr	r0, [r4, #0]
   d9910:	b130      	cbz	r0, d9920 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9912:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d9914:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9916:	462b      	mov	r3, r5
   d9918:	1c71      	adds	r1, r6, #1
   d991a:	f7fe ff77 	bl	d880c <vsnprintf>
        va_end(marker);
        result.len = n;
   d991e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d9920:	4620      	mov	r0, r4
   d9922:	b007      	add	sp, #28
   d9924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9928:	b003      	add	sp, #12
   d992a:	4770      	bx	lr
   d992c:	000db278 	.word	0x000db278

000d9930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9930:	b510      	push	{r4, lr}
   d9932:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9934:	6800      	ldr	r0, [r0, #0]
   d9936:	b118      	cbz	r0, d9940 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d9938:	f7fe ff48 	bl	d87cc <free>
            wakeupSource_ = nullptr;
   d993c:	2300      	movs	r3, #0
   d993e:	6023      	str	r3, [r4, #0]
        }
    }
   d9940:	bd10      	pop	{r4, pc}

000d9942 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9942:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d9944:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9948:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d994a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d994c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d994e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d9952:	f8c0 2006 	str.w	r2, [r0, #6]
   d9956:	889b      	ldrh	r3, [r3, #4]
   d9958:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d995a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d995c:	f7ff ffe8 	bl	d9930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d9960:	682b      	ldr	r3, [r5, #0]
   d9962:	b113      	cbz	r3, d996a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d9964:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d9966:	2300      	movs	r3, #0
   d9968:	602b      	str	r3, [r5, #0]
    }
   d996a:	4620      	mov	r0, r4
   d996c:	bd38      	pop	{r3, r4, r5, pc}

000d996e <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   d996e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9972:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   d9974:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   d9976:	b933      	cbnz	r3, d9986 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   d9978:	b932      	cbnz	r2, d9988 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   d997a:	f851 3f06 	ldr.w	r3, [r1, #6]!
   d997e:	6003      	str	r3, [r0, #0]
   d9980:	888b      	ldrh	r3, [r1, #4]
   d9982:	8083      	strh	r3, [r0, #4]
    }
   d9984:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   d9986:	b122      	cbz	r2, d9992 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   d9988:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   d998a:	2c01      	cmp	r4, #1
   d998c:	d003      	beq.n	d9996 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   d998e:	2c04      	cmp	r4, #4
   d9990:	d006      	beq.n	d99a0 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d9992:	2204      	movs	r2, #4
   d9994:	e005      	b.n	d99a2 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d9996:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   d9998:	814a      	strh	r2, [r1, #10]
   d999a:	718c      	strb	r4, [r1, #6]
   d999c:	810b      	strh	r3, [r1, #8]
                    break;
   d999e:	e7ec      	b.n	d997a <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   d99a0:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   d99a2:	810b      	strh	r3, [r1, #8]
   d99a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d99a8:	718a      	strb	r2, [r1, #6]
   d99aa:	814b      	strh	r3, [r1, #10]
                    break;
   d99ac:	e7e5      	b.n	d997a <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000d99b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d99b0:	b538      	push	{r3, r4, r5, lr}
   d99b2:	460c      	mov	r4, r1
   d99b4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d99b6:	f7ff ffbb 	bl	d9930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d99ba:	b144      	cbz	r4, d99ce <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d99bc:	8820      	ldrh	r0, [r4, #0]
   d99be:	f7fe fefd 	bl	d87bc <malloc>
   d99c2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d99c4:	b128      	cbz	r0, d99d2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d99c6:	8822      	ldrh	r2, [r4, #0]
   d99c8:	4621      	mov	r1, r4
   d99ca:	f001 fa17 	bl	dadfc <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d99ce:	2000      	movs	r0, #0
    }
   d99d0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d99d2:	4801      	ldr	r0, [pc, #4]	; (d99d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d99d4:	e7fc      	b.n	d99d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d99d6:	bf00      	nop
   d99d8:	fffffefc 	.word	0xfffffefc

000d99dc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d99dc:	b507      	push	{r0, r1, r2, lr}
   d99de:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d99e0:	2100      	movs	r1, #0
{
   d99e2:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d99e4:	9100      	str	r1, [sp, #0]
   d99e6:	2001      	movs	r0, #1
   d99e8:	218c      	movs	r1, #140	; 0x8c
   d99ea:	f7fe fe1d 	bl	d8628 <system_reset>
}
   d99ee:	b003      	add	sp, #12
   d99f0:	f85d fb04 	ldr.w	pc, [sp], #4

000d99f4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d99f4:	4601      	mov	r1, r0
    reset(0, flags);
   d99f6:	2000      	movs	r0, #0
   d99f8:	f7ff bff0 	b.w	d99dc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d99fc <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d99fc:	2000      	movs	r0, #0
   d99fe:	f7ff bff9 	b.w	d99f4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d9a04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d9a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a06:	4d2d      	ldr	r5, [pc, #180]	; (d9abc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d9a08:	7d0b      	ldrb	r3, [r1, #20]
   d9a0a:	4604      	mov	r4, r0
   d9a0c:	b08b      	sub	sp, #44	; 0x2c
   d9a0e:	4608      	mov	r0, r1
   d9a10:	1daf      	adds	r7, r5, #6
   d9a12:	2b00      	cmp	r3, #0
   d9a14:	d038      	beq.n	d9a88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d9a16:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d9a18:	791b      	ldrb	r3, [r3, #4]
   d9a1a:	2b00      	cmp	r3, #0
   d9a1c:	d034      	beq.n	d9a88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d9a1e:	2200      	movs	r2, #0
    SleepResult() {}
   d9a20:	4b27      	ldr	r3, [pc, #156]	; (d9ac0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9a22:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d9a24:	a902      	add	r1, sp, #8
   d9a26:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d9a28:	9202      	str	r2, [sp, #8]
   d9a2a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d9a2e:	f88d 200e 	strb.w	r2, [sp, #14]
   d9a32:	f7fe fdef 	bl	d8614 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d9a36:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d9a3a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d9a3e:	b200      	sxth	r0, r0
   d9a40:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d9a44:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d9a48:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a4a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d9a4c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a4e:	4628      	mov	r0, r5
   d9a50:	f7ff ffae 	bl	d99b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d9a54:	a802      	add	r0, sp, #8
   d9a56:	f7ff ff6b 	bl	d9930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d9a5a:	2300      	movs	r3, #0
   d9a5c:	6023      	str	r3, [r4, #0]
   d9a5e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d9a60:	71a3      	strb	r3, [r4, #6]
   d9a62:	8123      	strh	r3, [r4, #8]
   d9a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9a68:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d9a6a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d9a6e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d9a70:	683b      	ldr	r3, [r7, #0]
   d9a72:	f8c4 3006 	str.w	r3, [r4, #6]
   d9a76:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d9a78:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d9a7a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d9a7c:	4620      	mov	r0, r4
   d9a7e:	f7ff ff97 	bl	d99b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d9a82:	4620      	mov	r0, r4
   d9a84:	b00b      	add	sp, #44	; 0x2c
   d9a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d9a88:	2600      	movs	r6, #0
   d9a8a:	2320      	movs	r3, #32
   d9a8c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d9a90:	4b0c      	ldr	r3, [pc, #48]	; (d9ac4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d9a92:	9300      	str	r3, [sp, #0]
   d9a94:	490c      	ldr	r1, [pc, #48]	; (d9ac8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d9a96:	4633      	mov	r3, r6
   d9a98:	aa02      	add	r2, sp, #8
   d9a9a:	2032      	movs	r0, #50	; 0x32
   d9a9c:	f7fe fd32 	bl	d8504 <log_message>
    SleepResult() {}
   d9aa0:	4b07      	ldr	r3, [pc, #28]	; (d9ac0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9aa2:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d9aa4:	a902      	add	r1, sp, #8
        error_ = error;
   d9aa6:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d9aaa:	4804      	ldr	r0, [pc, #16]	; (d9abc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d9aac:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d9aae:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d9ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d9ab6:	f7ff ff44 	bl	d9942 <_ZN17SystemSleepResultaSEOS_>
   d9aba:	e7cb      	b.n	d9a54 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d9abc:	2003e640 	.word	0x2003e640
   d9ac0:	ffff0000 	.word	0xffff0000
   d9ac4:	000dbae7 	.word	0x000dbae7
   d9ac8:	000dbae0 	.word	0x000dbae0

000d9acc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d9acc:	b530      	push	{r4, r5, lr}
   d9ace:	4604      	mov	r4, r0
   d9ad0:	b085      	sub	sp, #20
   d9ad2:	4608      	mov	r0, r1
   d9ad4:	4611      	mov	r1, r2
   d9ad6:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d9ad8:	2300      	movs	r3, #0
   d9ada:	f7fe fd45 	bl	d8568 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   d9ade:	4d0d      	ldr	r5, [pc, #52]	; (d9b14 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d9ae0:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   d9ae4:	2300      	movs	r3, #0
   d9ae6:	a901      	add	r1, sp, #4
   d9ae8:	9301      	str	r3, [sp, #4]
   d9aea:	f8ad 3008 	strh.w	r3, [sp, #8]
   d9aee:	f88d 300a 	strb.w	r3, [sp, #10]
   d9af2:	4628      	mov	r0, r5
   d9af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9af8:	f8ad 300e 	strh.w	r3, [sp, #14]
   d9afc:	f7ff ff21 	bl	d9942 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   d9b00:	a801      	add	r0, sp, #4
   d9b02:	f7ff ff15 	bl	d9930 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   d9b06:	4620      	mov	r0, r4
   d9b08:	4629      	mov	r1, r5
   d9b0a:	f7ff ff30 	bl	d996e <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   d9b0e:	4620      	mov	r0, r4
   d9b10:	b005      	add	sp, #20
   d9b12:	bd30      	pop	{r4, r5, pc}
   d9b14:	2003e640 	.word	0x2003e640

000d9b18 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9b18:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9b1a:	4b09      	ldr	r3, [pc, #36]	; (d9b40 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d9b1c:	4c09      	ldr	r4, [pc, #36]	; (d9b44 <_GLOBAL__sub_I_System+0x2c>)
   d9b1e:	2202      	movs	r2, #2
   d9b20:	2000      	movs	r0, #0
   d9b22:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d9b24:	4b08      	ldr	r3, [pc, #32]	; (d9b48 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d9b26:	6020      	str	r0, [r4, #0]
   d9b28:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9b2a:	71a0      	strb	r0, [r4, #6]
   d9b2c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9b2e:	f7fe fd0b 	bl	d8548 <set_system_mode>
SystemClass System;
   d9b32:	4620      	mov	r0, r4
   d9b34:	4a05      	ldr	r2, [pc, #20]	; (d9b4c <_GLOBAL__sub_I_System+0x34>)
   d9b36:	4906      	ldr	r1, [pc, #24]	; (d9b50 <_GLOBAL__sub_I_System+0x38>)
   d9b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9b3c:	f000 bc90 	b.w	da460 <__aeabi_atexit>
   d9b40:	2003e64c 	.word	0x2003e64c
   d9b44:	2003e640 	.word	0x2003e640
   d9b48:	ffff0000 	.word	0xffff0000
   d9b4c:	2003e200 	.word	0x2003e200
   d9b50:	000d41c7 	.word	0x000d41c7

000d9b54 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9b58:	4a15      	ldr	r2, [pc, #84]	; (d9bb0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9b5a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9bbc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9b5e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9b62:	18c0      	adds	r0, r0, r3
   d9b64:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9b68:	4a12      	ldr	r2, [pc, #72]	; (d9bb4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9b6a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9b6e:	18c6      	adds	r6, r0, r3
   d9b70:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9b74:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9b78:	42bb      	cmp	r3, r7
   d9b7a:	bf08      	it	eq
   d9b7c:	42b2      	cmpeq	r2, r6
{
   d9b7e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9b80:	d013      	beq.n	d9baa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d9b82:	a903      	add	r1, sp, #12
   d9b84:	4668      	mov	r0, sp
   d9b86:	e9cd 6700 	strd	r6, r7, [sp]
   d9b8a:	f7fe fe67 	bl	d885c <localtime_r>
	calendar_time.tm_year += 1900;
   d9b8e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b90:	4d09      	ldr	r5, [pc, #36]	; (d9bb8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d9b92:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b96:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9b98:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d9ba2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9ba6:	6823      	ldr	r3, [r4, #0]
   d9ba8:	602b      	str	r3, [r5, #0]
    }
}
   d9baa:	b00c      	add	sp, #48	; 0x30
   d9bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9bb0:	2003e688 	.word	0x2003e688
   d9bb4:	2003e680 	.word	0x2003e680
   d9bb8:	2003e658 	.word	0x2003e658
   d9bbc:	2003e690 	.word	0x2003e690

000d9bc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9bc0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bc2:	2000      	movs	r0, #0
   d9bc4:	f7fe fd82 	bl	d86cc <spark_sync_time_pending>
   d9bc8:	b128      	cbz	r0, d9bd6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9bca:	f7fe fd57 	bl	d867c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bce:	f080 0001 	eor.w	r0, r0, #1
   d9bd2:	b2c0      	uxtb	r0, r0
    }
   d9bd4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9bd6:	2001      	movs	r0, #1
   d9bd8:	e7fc      	b.n	d9bd4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9bdc <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d9bdc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9bde:	f7ff ffb9 	bl	d9b54 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d9be2:	4b02      	ldr	r3, [pc, #8]	; (d9bec <_ZN9TimeClass7weekdayEx+0x10>)
   d9be4:	6998      	ldr	r0, [r3, #24]
}
   d9be6:	3001      	adds	r0, #1
   d9be8:	bd08      	pop	{r3, pc}
   d9bea:	bf00      	nop
   d9bec:	2003e658 	.word	0x2003e658

000d9bf0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9bf0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9bf2:	f7ff ffaf 	bl	d9b54 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9bf6:	4b02      	ldr	r3, [pc, #8]	; (d9c00 <_ZN9TimeClass5monthEx+0x10>)
   d9bf8:	6918      	ldr	r0, [r3, #16]
}
   d9bfa:	3001      	adds	r0, #1
   d9bfc:	bd08      	pop	{r3, pc}
   d9bfe:	bf00      	nop
   d9c00:	2003e658 	.word	0x2003e658

000d9c04 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9c04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9c08:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9c10:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d9c12:	d411      	bmi.n	d9c38 <_ZN9TimeClass4zoneEf+0x34>
   d9c14:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9c18:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c20:	dc0a      	bgt.n	d9c38 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d9c22:	eddf 7a06 	vldr	s15, [pc, #24]	; d9c3c <_ZN9TimeClass4zoneEf+0x38>
   d9c26:	ee60 7a27 	vmul.f32	s15, s0, s15
   d9c2a:	ee17 0a90 	vmov	r0, s15
   d9c2e:	f001 f863 	bl	dacf8 <__aeabi_f2lz>
   d9c32:	4b03      	ldr	r3, [pc, #12]	; (d9c40 <_ZN9TimeClass4zoneEf+0x3c>)
   d9c34:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c38:	bd08      	pop	{r3, pc}
   d9c3a:	bf00      	nop
   d9c3c:	45610000 	.word	0x45610000
   d9c40:	2003e688 	.word	0x2003e688

000d9c44 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d9c44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9c4c:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d9c4e:	d411      	bmi.n	d9c74 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d9c50:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d9c54:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9c5c:	dc0a      	bgt.n	d9c74 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9c5e:	eddf 7a06 	vldr	s15, [pc, #24]	; d9c78 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d9c62:	ee60 7a27 	vmul.f32	s15, s0, s15
   d9c66:	ee17 0a90 	vmov	r0, s15
   d9c6a:	f001 f845 	bl	dacf8 <__aeabi_f2lz>
   d9c6e:	4b03      	ldr	r3, [pc, #12]	; (d9c7c <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d9c70:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c74:	bd08      	pop	{r3, pc}
   d9c76:	bf00      	nop
   d9c78:	45610000 	.word	0x45610000
   d9c7c:	2003e190 	.word	0x2003e190

000d9c80 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9c80:	4b03      	ldr	r3, [pc, #12]	; (d9c90 <_ZN9TimeClass8beginDSTEv+0x10>)
   d9c82:	e9d3 0100 	ldrd	r0, r1, [r3]
   d9c86:	4b03      	ldr	r3, [pc, #12]	; (d9c94 <_ZN9TimeClass8beginDSTEv+0x14>)
   d9c88:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9c8c:	4770      	bx	lr
   d9c8e:	bf00      	nop
   d9c90:	2003e190 	.word	0x2003e190
   d9c94:	2003e680 	.word	0x2003e680

000d9c98 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d9c98:	4b02      	ldr	r3, [pc, #8]	; (d9ca4 <_ZN9TimeClass6endDSTEv+0xc>)
   d9c9a:	2000      	movs	r0, #0
   d9c9c:	2100      	movs	r1, #0
   d9c9e:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9ca2:	4770      	bx	lr
   d9ca4:	2003e680 	.word	0x2003e680

000d9ca8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d9ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9caa:	4602      	mov	r2, r0
   d9cac:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9cae:	4668      	mov	r0, sp
    struct timeval tv = {
   d9cb0:	2100      	movs	r1, #0
    };
   d9cb2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d9cb6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d9cba:	f7fe faab 	bl	d8214 <hal_rtc_set_time>
   d9cbe:	4602      	mov	r2, r0
   d9cc0:	b910      	cbnz	r0, d9cc8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d9cc2:	4601      	mov	r1, r0
   d9cc4:	f7fe fc80 	bl	d85c8 <system_notify_time_changed>
    }
}
   d9cc8:	b005      	add	sp, #20
   d9cca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9cd0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9cd0:	b530      	push	{r4, r5, lr}
   d9cd2:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9cd4:	4818      	ldr	r0, [pc, #96]	; (d9d38 <_ZN9TimeClass7timeStrEx+0x68>)
   d9cd6:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9cda:	1852      	adds	r2, r2, r1
   d9cdc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9ce0:	4816      	ldr	r0, [pc, #88]	; (d9d3c <_ZN9TimeClass7timeStrEx+0x6c>)
   d9ce2:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9ce6:	1852      	adds	r2, r2, r1
{
   d9ce8:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9cea:	eb40 0303 	adc.w	r3, r0, r3
   d9cee:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9cf2:	2224      	movs	r2, #36	; 0x24
   d9cf4:	eb0d 0002 	add.w	r0, sp, r2
   d9cf8:	2100      	movs	r1, #0
   d9cfa:	f001 f8a7 	bl	dae4c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9cfe:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9d00:	a909      	add	r1, sp, #36	; 0x24
   d9d02:	4668      	mov	r0, sp
   d9d04:	f7fe fdaa 	bl	d885c <localtime_r>
    char ascstr[26] = {};
   d9d08:	2216      	movs	r2, #22
   d9d0a:	4629      	mov	r1, r5
   d9d0c:	a803      	add	r0, sp, #12
   d9d0e:	9502      	str	r5, [sp, #8]
   d9d10:	f001 f89c 	bl	dae4c <memset>
    asctime_r(&calendar_time, ascstr);
   d9d14:	a902      	add	r1, sp, #8
   d9d16:	a809      	add	r0, sp, #36	; 0x24
   d9d18:	f001 f822 	bl	dad60 <asctime_r>
    int len = strlen(ascstr);
   d9d1c:	a802      	add	r0, sp, #8
   d9d1e:	f001 f8f0 	bl	daf02 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9d22:	ab12      	add	r3, sp, #72	; 0x48
   d9d24:	4418      	add	r0, r3
    return String(ascstr);
   d9d26:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9d28:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9d2c:	4620      	mov	r0, r4
   d9d2e:	f7ff fd7e 	bl	d982e <_ZN6StringC1EPKc>
}
   d9d32:	4620      	mov	r0, r4
   d9d34:	b013      	add	sp, #76	; 0x4c
   d9d36:	bd30      	pop	{r4, r5, pc}
   d9d38:	2003e688 	.word	0x2003e688
   d9d3c:	2003e680 	.word	0x2003e680

000d9d40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d44:	b0a5      	sub	sp, #148	; 0x94
   d9d46:	4607      	mov	r7, r0
   d9d48:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d4a:	a814      	add	r0, sp, #80	; 0x50
{
   d9d4c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d4e:	223f      	movs	r2, #63	; 0x3f
{
   d9d50:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9d52:	f001 f8de 	bl	daf12 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9d56:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9d58:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9d5a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9d5e:	f001 f8d0 	bl	daf02 <strlen>
   d9d62:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9d64:	bb5d      	cbnz	r5, d9dbe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d9d66:	492a      	ldr	r1, [pc, #168]	; (d9e10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d9d68:	a803      	add	r0, sp, #12
   d9d6a:	f001 f8a5 	bl	daeb8 <strcpy>
   d9d6e:	ae14      	add	r6, sp, #80	; 0x50
{
   d9d70:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9d72:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d9d76:	45ab      	cmp	fp, r5
   d9d78:	d936      	bls.n	d9de8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9d7a:	46b1      	mov	r9, r6
   d9d7c:	f105 0a01 	add.w	sl, r5, #1
   d9d80:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9d84:	2b25      	cmp	r3, #37	; 0x25
   d9d86:	d117      	bne.n	d9db8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9d88:	7873      	ldrb	r3, [r6, #1]
   d9d8a:	2b7a      	cmp	r3, #122	; 0x7a
   d9d8c:	d114      	bne.n	d9db8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9d8e:	a803      	add	r0, sp, #12
   d9d90:	f001 f8b7 	bl	daf02 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9d94:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d9d96:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9d98:	1828      	adds	r0, r5, r0
   d9d9a:	4418      	add	r0, r3
   d9d9c:	ebab 0205 	sub.w	r2, fp, r5
   d9da0:	1cb1      	adds	r1, r6, #2
   d9da2:	f001 f82b 	bl	dadfc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9da6:	4622      	mov	r2, r4
   d9da8:	a903      	add	r1, sp, #12
   d9daa:	4630      	mov	r0, r6
   d9dac:	f001 f826 	bl	dadfc <memcpy>
            len = strlen(format_str);
   d9db0:	a814      	add	r0, sp, #80	; 0x50
   d9db2:	f001 f8a6 	bl	daf02 <strlen>
   d9db6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9db8:	464e      	mov	r6, r9
   d9dba:	4655      	mov	r5, sl
   d9dbc:	e7d9      	b.n	d9d72 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9dbe:	213c      	movs	r1, #60	; 0x3c
   d9dc0:	fb95 f3f1 	sdiv	r3, r5, r1
   d9dc4:	2b00      	cmp	r3, #0
   d9dc6:	bfb8      	it	lt
   d9dc8:	425b      	neglt	r3, r3
   d9dca:	fbb3 f2f1 	udiv	r2, r3, r1
   d9dce:	fb01 3312 	mls	r3, r1, r2, r3
   d9dd2:	9300      	str	r3, [sp, #0]
   d9dd4:	4a0f      	ldr	r2, [pc, #60]	; (d9e14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9dd6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9dda:	2110      	movs	r1, #16
   d9ddc:	a803      	add	r0, sp, #12
   d9dde:	fb95 f3f3 	sdiv	r3, r5, r3
   d9de2:	f7fe fd0b 	bl	d87fc <snprintf>
   d9de6:	e7c2      	b.n	d9d6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9de8:	2100      	movs	r1, #0
   d9dea:	222e      	movs	r2, #46	; 0x2e
   d9dec:	a808      	add	r0, sp, #32
   d9dee:	9107      	str	r1, [sp, #28]
   d9df0:	f001 f82c 	bl	dae4c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9df4:	4643      	mov	r3, r8
   d9df6:	aa14      	add	r2, sp, #80	; 0x50
   d9df8:	2132      	movs	r1, #50	; 0x32
   d9dfa:	a807      	add	r0, sp, #28
   d9dfc:	f7fe fd26 	bl	d884c <strftime>
    return String(buf);
   d9e00:	a907      	add	r1, sp, #28
   d9e02:	4638      	mov	r0, r7
   d9e04:	f7ff fd13 	bl	d982e <_ZN6StringC1EPKc>
}
   d9e08:	4638      	mov	r0, r7
   d9e0a:	b025      	add	sp, #148	; 0x94
   d9e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e10:	000dbb0e 	.word	0x000dbb0e
   d9e14:	000dbb10 	.word	0x000dbb10

000d9e18 <_ZN9TimeClass6formatExPKc>:
{
   d9e18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9e1a:	b08d      	sub	sp, #52	; 0x34
   d9e1c:	e9cd 2300 	strd	r2, r3, [sp]
   d9e20:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9e22:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9e24:	b915      	cbnz	r5, d9e2c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9e26:	4b19      	ldr	r3, [pc, #100]	; (d9e8c <_ZN9TimeClass6formatExPKc+0x74>)
   d9e28:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9e2a:	b12d      	cbz	r5, d9e38 <_ZN9TimeClass6formatExPKc+0x20>
   d9e2c:	4b18      	ldr	r3, [pc, #96]	; (d9e90 <_ZN9TimeClass6formatExPKc+0x78>)
   d9e2e:	4628      	mov	r0, r5
   d9e30:	6819      	ldr	r1, [r3, #0]
   d9e32:	f001 f837 	bl	daea4 <strcmp>
   d9e36:	b938      	cbnz	r0, d9e48 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9e38:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9e3c:	4620      	mov	r0, r4
   d9e3e:	f7ff ff47 	bl	d9cd0 <_ZN9TimeClass7timeStrEx>
}
   d9e42:	4620      	mov	r0, r4
   d9e44:	b00d      	add	sp, #52	; 0x34
   d9e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9e48:	4e12      	ldr	r6, [pc, #72]	; (d9e94 <_ZN9TimeClass6formatExPKc+0x7c>)
   d9e4a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9e4c:	4f12      	ldr	r7, [pc, #72]	; (d9e98 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9e4e:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9e52:	185b      	adds	r3, r3, r1
   d9e54:	9901      	ldr	r1, [sp, #4]
   d9e56:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9e5e:	181b      	adds	r3, r3, r0
   d9e60:	eb41 0202 	adc.w	r2, r1, r2
   d9e64:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9e68:	2100      	movs	r1, #0
   d9e6a:	2224      	movs	r2, #36	; 0x24
   d9e6c:	a803      	add	r0, sp, #12
   d9e6e:	f000 ffed 	bl	dae4c <memset>
    localtime_r(&t, &calendar_time);
   d9e72:	a903      	add	r1, sp, #12
   d9e74:	4668      	mov	r0, sp
   d9e76:	f7fe fcf1 	bl	d885c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9e7a:	6832      	ldr	r2, [r6, #0]
   d9e7c:	683b      	ldr	r3, [r7, #0]
   d9e7e:	a903      	add	r1, sp, #12
   d9e80:	4413      	add	r3, r2
   d9e82:	4620      	mov	r0, r4
   d9e84:	462a      	mov	r2, r5
   d9e86:	f7ff ff5b 	bl	d9d40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9e8a:	e7da      	b.n	d9e42 <_ZN9TimeClass6formatExPKc+0x2a>
   d9e8c:	2003e654 	.word	0x2003e654
   d9e90:	2003e18c 	.word	0x2003e18c
   d9e94:	2003e688 	.word	0x2003e688
   d9e98:	2003e680 	.word	0x2003e680

000d9e9c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9e9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9e9e:	2000      	movs	r0, #0
   d9ea0:	f7fe f9a0 	bl	d81e4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9ea4:	4604      	mov	r4, r0
   d9ea6:	b9a0      	cbnz	r0, d9ed2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9ea8:	f7fe fb46 	bl	d8538 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9eac:	2801      	cmp	r0, #1
   d9eae:	d110      	bne.n	d9ed2 <_ZN9TimeClass7isValidEv+0x36>
   d9eb0:	4620      	mov	r0, r4
   d9eb2:	f7fe fb81 	bl	d85b8 <system_thread_get_state>
   d9eb6:	b960      	cbnz	r0, d9ed2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9eb8:	f7ff fe82 	bl	d9bc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9ebc:	b910      	cbnz	r0, d9ec4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9ebe:	f7fe fbcd 	bl	d865c <spark_process>
        while (_while() && !_condition()) {
   d9ec2:	e7f9      	b.n	d9eb8 <_ZN9TimeClass7isValidEv+0x1c>
   d9ec4:	f7ff fe7c 	bl	d9bc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9ecc:	2000      	movs	r0, #0
   d9ece:	f7fe b989 	b.w	d81e4 <hal_rtc_time_is_valid>
}
   d9ed2:	4620      	mov	r0, r4
   d9ed4:	bd10      	pop	{r4, pc}

000d9ed6 <_ZN9TimeClass3nowEv>:
{
   d9ed6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9ed8:	f7ff ffe0 	bl	d9e9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9edc:	2210      	movs	r2, #16
   d9ede:	2100      	movs	r1, #0
   d9ee0:	4668      	mov	r0, sp
   d9ee2:	f000 ffb3 	bl	dae4c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9ee6:	2100      	movs	r1, #0
   d9ee8:	4668      	mov	r0, sp
   d9eea:	f7fe f98b 	bl	d8204 <hal_rtc_get_time>
}
   d9eee:	9800      	ldr	r0, [sp, #0]
   d9ef0:	b005      	add	sp, #20
   d9ef2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9ef8 <_ZN9TimeClass4hourEv>:
{
   d9ef8:	b508      	push	{r3, lr}
	return hour(now());
   d9efa:	f7ff ffec 	bl	d9ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9efe:	17c1      	asrs	r1, r0, #31
   d9f00:	f7ff fe28 	bl	d9b54 <_ZL22Refresh_UnixTime_Cachex>
}
   d9f04:	4b01      	ldr	r3, [pc, #4]	; (d9f0c <_ZN9TimeClass4hourEv+0x14>)
   d9f06:	6898      	ldr	r0, [r3, #8]
   d9f08:	bd08      	pop	{r3, pc}
   d9f0a:	bf00      	nop
   d9f0c:	2003e658 	.word	0x2003e658

000d9f10 <_ZN9TimeClass6minuteEv>:
{
   d9f10:	b508      	push	{r3, lr}
	return minute(now());
   d9f12:	f7ff ffe0 	bl	d9ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9f16:	17c1      	asrs	r1, r0, #31
   d9f18:	f7ff fe1c 	bl	d9b54 <_ZL22Refresh_UnixTime_Cachex>
}
   d9f1c:	4b01      	ldr	r3, [pc, #4]	; (d9f24 <_ZN9TimeClass6minuteEv+0x14>)
   d9f1e:	6858      	ldr	r0, [r3, #4]
   d9f20:	bd08      	pop	{r3, pc}
   d9f22:	bf00      	nop
   d9f24:	2003e658 	.word	0x2003e658

000d9f28 <_ZN9TimeClass3dayEv>:
{
   d9f28:	b508      	push	{r3, lr}
	return day(now());
   d9f2a:	f7ff ffd4 	bl	d9ed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9f2e:	17c1      	asrs	r1, r0, #31
   d9f30:	f7ff fe10 	bl	d9b54 <_ZL22Refresh_UnixTime_Cachex>
}
   d9f34:	4b01      	ldr	r3, [pc, #4]	; (d9f3c <_ZN9TimeClass3dayEv+0x14>)
   d9f36:	68d8      	ldr	r0, [r3, #12]
   d9f38:	bd08      	pop	{r3, pc}
   d9f3a:	bf00      	nop
   d9f3c:	2003e658 	.word	0x2003e658

000d9f40 <_ZN9TimeClass7weekdayEv>:
{
   d9f40:	b508      	push	{r3, lr}
	return weekday(now());
   d9f42:	f7ff ffc8 	bl	d9ed6 <_ZN9TimeClass3nowEv>
}
   d9f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d9f4a:	17c1      	asrs	r1, r0, #31
   d9f4c:	f7ff be46 	b.w	d9bdc <_ZN9TimeClass7weekdayEx>

000d9f50 <_ZN9TimeClass5monthEv>:
{
   d9f50:	b508      	push	{r3, lr}
	return month(now());
   d9f52:	f7ff ffc0 	bl	d9ed6 <_ZN9TimeClass3nowEv>
}
   d9f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9f5a:	17c1      	asrs	r1, r0, #31
   d9f5c:	f7ff be48 	b.w	d9bf0 <_ZN9TimeClass5monthEx>

000d9f60 <_ZN9TimeClass5localEv>:
{
   d9f60:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d9f62:	f7ff ffb8 	bl	d9ed6 <_ZN9TimeClass3nowEv>
   d9f66:	4b03      	ldr	r3, [pc, #12]	; (d9f74 <_ZN9TimeClass5localEv+0x14>)
   d9f68:	4a03      	ldr	r2, [pc, #12]	; (d9f78 <_ZN9TimeClass5localEv+0x18>)
   d9f6a:	681b      	ldr	r3, [r3, #0]
   d9f6c:	6812      	ldr	r2, [r2, #0]
   d9f6e:	4413      	add	r3, r2
}
   d9f70:	4418      	add	r0, r3
   d9f72:	bd08      	pop	{r3, pc}
   d9f74:	2003e688 	.word	0x2003e688
   d9f78:	2003e680 	.word	0x2003e680

000d9f7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9f7c:	4b02      	ldr	r3, [pc, #8]	; (d9f88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9f7e:	681a      	ldr	r2, [r3, #0]
   d9f80:	4b02      	ldr	r3, [pc, #8]	; (d9f8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9f82:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9f84:	4770      	bx	lr
   d9f86:	bf00      	nop
   d9f88:	2003e18c 	.word	0x2003e18c
   d9f8c:	2003e654 	.word	0x2003e654

000d9f90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9f90:	4770      	bx	lr

000d9f92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9f92:	7441      	strb	r1, [r0, #17]
}
   d9f94:	4770      	bx	lr

000d9f96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9f96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9f98:	7c00      	ldrb	r0, [r0, #16]
   d9f9a:	f7fe fa73 	bl	d8484 <hal_usart_available_data_for_write>
}
   d9f9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9fa2:	bd08      	pop	{r3, pc}

000d9fa4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9fa4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9fa6:	7c00      	ldrb	r0, [r0, #16]
   d9fa8:	f7fe fa44 	bl	d8434 <hal_usart_available>
}
   d9fac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9fb0:	bd08      	pop	{r3, pc}

000d9fb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9fb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9fb4:	7c00      	ldrb	r0, [r0, #16]
   d9fb6:	f7fe fa4d 	bl	d8454 <hal_usart_peek>
}
   d9fba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9fbe:	bd08      	pop	{r3, pc}

000d9fc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9fc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9fc2:	7c00      	ldrb	r0, [r0, #16]
   d9fc4:	f7fe fa3e 	bl	d8444 <hal_usart_read>
}
   d9fc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9fcc:	bd08      	pop	{r3, pc}

000d9fce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9fce:	7c00      	ldrb	r0, [r0, #16]
   d9fd0:	f7fe ba48 	b.w	d8464 <hal_usart_flush>

000d9fd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fd6:	7c45      	ldrb	r5, [r0, #17]
{
   d9fd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fda:	b12d      	cbz	r5, d9fe8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9fdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9fde:	b003      	add	sp, #12
   d9fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9fe4:	f7fe ba1e 	b.w	d8424 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9fe8:	7c00      	ldrb	r0, [r0, #16]
   d9fea:	9101      	str	r1, [sp, #4]
   d9fec:	f7fe fa4a 	bl	d8484 <hal_usart_available_data_for_write>
   d9ff0:	2800      	cmp	r0, #0
   d9ff2:	9901      	ldr	r1, [sp, #4]
   d9ff4:	dcf2      	bgt.n	d9fdc <_ZN11USARTSerial5writeEh+0x8>
}
   d9ff6:	4628      	mov	r0, r5
   d9ff8:	b003      	add	sp, #12
   d9ffa:	bd30      	pop	{r4, r5, pc}

000d9ffc <_ZN11USARTSerialD0Ev>:
   d9ffc:	b510      	push	{r4, lr}
   d9ffe:	2114      	movs	r1, #20
   da000:	4604      	mov	r4, r0
   da002:	f000 fa32 	bl	da46a <_ZdlPvj>
   da006:	4620      	mov	r0, r4
   da008:	bd10      	pop	{r4, pc}
	...

000da00c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da00c:	b510      	push	{r4, lr}
   da00e:	f04f 0c00 	mov.w	ip, #0
   da012:	4604      	mov	r4, r0
   da014:	4608      	mov	r0, r1
   da016:	4611      	mov	r1, r2
   da018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da01c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da020:	4a04      	ldr	r2, [pc, #16]	; (da034 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da022:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da024:	2201      	movs	r2, #1
  _serial = serial;
   da026:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da028:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da02a:	461a      	mov	r2, r3
   da02c:	f7fe f9f2 	bl	d8414 <hal_usart_init>
}
   da030:	4620      	mov	r0, r4
   da032:	bd10      	pop	{r4, pc}
   da034:	000dbb40 	.word	0x000dbb40

000da038 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   da038:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da03a:	4c0e      	ldr	r4, [pc, #56]	; (da074 <_Z22__fetch_global_Serial1v+0x3c>)
   da03c:	7821      	ldrb	r1, [r4, #0]
   da03e:	f3bf 8f5b 	dmb	ish
   da042:	f011 0101 	ands.w	r1, r1, #1
   da046:	d112      	bne.n	da06e <_Z22__fetch_global_Serial1v+0x36>
   da048:	4620      	mov	r0, r4
   da04a:	9101      	str	r1, [sp, #4]
   da04c:	f7fa f834 	bl	d40b8 <__cxa_guard_acquire>
   da050:	9901      	ldr	r1, [sp, #4]
   da052:	b160      	cbz	r0, da06e <_Z22__fetch_global_Serial1v+0x36>
   da054:	4a08      	ldr	r2, [pc, #32]	; (da078 <_Z22__fetch_global_Serial1v+0x40>)
   da056:	4b09      	ldr	r3, [pc, #36]	; (da07c <_Z22__fetch_global_Serial1v+0x44>)
   da058:	4809      	ldr	r0, [pc, #36]	; (da080 <_Z22__fetch_global_Serial1v+0x48>)
   da05a:	f7ff ffd7 	bl	da00c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da05e:	4620      	mov	r0, r4
   da060:	f7fa f82f 	bl	d40c2 <__cxa_guard_release>
   da064:	4a07      	ldr	r2, [pc, #28]	; (da084 <_Z22__fetch_global_Serial1v+0x4c>)
   da066:	4908      	ldr	r1, [pc, #32]	; (da088 <_Z22__fetch_global_Serial1v+0x50>)
   da068:	4805      	ldr	r0, [pc, #20]	; (da080 <_Z22__fetch_global_Serial1v+0x48>)
   da06a:	f000 f9f9 	bl	da460 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da06e:	4804      	ldr	r0, [pc, #16]	; (da080 <_Z22__fetch_global_Serial1v+0x48>)
   da070:	b002      	add	sp, #8
   da072:	bd10      	pop	{r4, pc}
   da074:	2003e698 	.word	0x2003e698
   da078:	2003e69c 	.word	0x2003e69c
   da07c:	2003e720 	.word	0x2003e720
   da080:	2003e7a4 	.word	0x2003e7a4
   da084:	2003e200 	.word	0x2003e200
   da088:	000d9f91 	.word	0x000d9f91

000da08c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da08c:	7441      	strb	r1, [r0, #17]
}
   da08e:	4770      	bx	lr

000da090 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da090:	4770      	bx	lr

000da092 <_ZN9USBSerial4readEv>:
{
   da092:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da094:	2100      	movs	r1, #0
   da096:	7c00      	ldrb	r0, [r0, #16]
   da098:	f7fe fa14 	bl	d84c4 <HAL_USB_USART_Receive_Data>
}
   da09c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da0a0:	bd08      	pop	{r3, pc}

000da0a2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   da0a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da0a4:	2101      	movs	r1, #1
   da0a6:	7c00      	ldrb	r0, [r0, #16]
   da0a8:	f7fe fa0c 	bl	d84c4 <HAL_USB_USART_Receive_Data>
}
   da0ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da0b0:	bd08      	pop	{r3, pc}

000da0b2 <_ZN9USBSerial17availableForWriteEv>:
{
   da0b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da0b4:	7c00      	ldrb	r0, [r0, #16]
   da0b6:	f7fe f9fd 	bl	d84b4 <HAL_USB_USART_Available_Data_For_Write>
}
   da0ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da0be:	bd08      	pop	{r3, pc}

000da0c0 <_ZN9USBSerial9availableEv>:
{
   da0c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da0c2:	7c00      	ldrb	r0, [r0, #16]
   da0c4:	f7fe f9ee 	bl	d84a4 <HAL_USB_USART_Available_Data>
}
   da0c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da0cc:	bd08      	pop	{r3, pc}

000da0ce <_ZN9USBSerial5writeEh>:
{
   da0ce:	b513      	push	{r0, r1, r4, lr}
   da0d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da0d2:	7c00      	ldrb	r0, [r0, #16]
{
   da0d4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da0d6:	f7fe f9ed 	bl	d84b4 <HAL_USB_USART_Available_Data_For_Write>
   da0da:	2800      	cmp	r0, #0
   da0dc:	9901      	ldr	r1, [sp, #4]
   da0de:	dc01      	bgt.n	da0e4 <_ZN9USBSerial5writeEh+0x16>
   da0e0:	7c60      	ldrb	r0, [r4, #17]
   da0e2:	b120      	cbz	r0, da0ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da0e4:	7c20      	ldrb	r0, [r4, #16]
   da0e6:	f7fe f9f5 	bl	d84d4 <HAL_USB_USART_Send_Data>
   da0ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da0ee:	b002      	add	sp, #8
   da0f0:	bd10      	pop	{r4, pc}

000da0f2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da0f2:	7c00      	ldrb	r0, [r0, #16]
   da0f4:	f7fe b9f6 	b.w	d84e4 <HAL_USB_USART_Flush_Data>

000da0f8 <_ZN9USBSerialD0Ev>:
   da0f8:	b510      	push	{r4, lr}
   da0fa:	2114      	movs	r1, #20
   da0fc:	4604      	mov	r4, r0
   da0fe:	f000 f9b4 	bl	da46a <_ZdlPvj>
   da102:	4620      	mov	r0, r4
   da104:	bd10      	pop	{r4, pc}
	...

000da108 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da108:	b510      	push	{r4, lr}
   da10a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da10e:	4604      	mov	r4, r0
   da110:	4608      	mov	r0, r1
   da112:	2100      	movs	r1, #0
   da114:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da118:	4b04      	ldr	r3, [pc, #16]	; (da12c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da11a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da11c:	2301      	movs	r3, #1
  _serial = serial;
   da11e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da120:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da122:	4611      	mov	r1, r2
   da124:	f7fe f9b6 	bl	d8494 <HAL_USB_USART_Init>
}
   da128:	4620      	mov	r0, r4
   da12a:	bd10      	pop	{r4, pc}
   da12c:	000dbb70 	.word	0x000dbb70

000da130 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   da130:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da132:	2214      	movs	r2, #20
{
   da134:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da136:	2100      	movs	r1, #0
   da138:	f000 fe88 	bl	dae4c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   da13c:	4620      	mov	r0, r4
   da13e:	bd10      	pop	{r4, pc}

000da140 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   da140:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da142:	4c10      	ldr	r4, [pc, #64]	; (da184 <_Z16_fetch_usbserialv+0x44>)
{
   da144:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da146:	a803      	add	r0, sp, #12
   da148:	f7ff fff2 	bl	da130 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da14c:	7821      	ldrb	r1, [r4, #0]
   da14e:	f3bf 8f5b 	dmb	ish
   da152:	f011 0101 	ands.w	r1, r1, #1
   da156:	d111      	bne.n	da17c <_Z16_fetch_usbserialv+0x3c>
   da158:	4620      	mov	r0, r4
   da15a:	9101      	str	r1, [sp, #4]
   da15c:	f7f9 ffac 	bl	d40b8 <__cxa_guard_acquire>
   da160:	9901      	ldr	r1, [sp, #4]
   da162:	b158      	cbz	r0, da17c <_Z16_fetch_usbserialv+0x3c>
   da164:	aa03      	add	r2, sp, #12
   da166:	4808      	ldr	r0, [pc, #32]	; (da188 <_Z16_fetch_usbserialv+0x48>)
   da168:	f7ff ffce 	bl	da108 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da16c:	4620      	mov	r0, r4
   da16e:	f7f9 ffa8 	bl	d40c2 <__cxa_guard_release>
   da172:	4a06      	ldr	r2, [pc, #24]	; (da18c <_Z16_fetch_usbserialv+0x4c>)
   da174:	4906      	ldr	r1, [pc, #24]	; (da190 <_Z16_fetch_usbserialv+0x50>)
   da176:	4804      	ldr	r0, [pc, #16]	; (da188 <_Z16_fetch_usbserialv+0x48>)
   da178:	f000 f972 	bl	da460 <__aeabi_atexit>
	return _usbserial;
}
   da17c:	4802      	ldr	r0, [pc, #8]	; (da188 <_Z16_fetch_usbserialv+0x48>)
   da17e:	b008      	add	sp, #32
   da180:	bd10      	pop	{r4, pc}
   da182:	bf00      	nop
   da184:	2003e7b8 	.word	0x2003e7b8
   da188:	2003e7bc 	.word	0x2003e7bc
   da18c:	2003e200 	.word	0x2003e200
   da190:	000da091 	.word	0x000da091

000da194 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da194:	4b01      	ldr	r3, [pc, #4]	; (da19c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da196:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da198:	4770      	bx	lr
   da19a:	bf00      	nop
   da19c:	2003e198 	.word	0x2003e198

000da1a0 <serialEventRun>:
{
   da1a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da1a2:	4b0b      	ldr	r3, [pc, #44]	; (da1d0 <serialEventRun+0x30>)
   da1a4:	b143      	cbz	r3, da1b8 <serialEventRun+0x18>
   da1a6:	f7ff ffcb 	bl	da140 <_Z16_fetch_usbserialv>
   da1aa:	6803      	ldr	r3, [r0, #0]
   da1ac:	691b      	ldr	r3, [r3, #16]
   da1ae:	4798      	blx	r3
   da1b0:	2800      	cmp	r0, #0
   da1b2:	dd01      	ble.n	da1b8 <serialEventRun+0x18>
        serialEvent();
   da1b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da1b8:	4b06      	ldr	r3, [pc, #24]	; (da1d4 <serialEventRun+0x34>)
   da1ba:	b143      	cbz	r3, da1ce <serialEventRun+0x2e>
   da1bc:	f7ff ff3c 	bl	da038 <_Z22__fetch_global_Serial1v>
   da1c0:	6803      	ldr	r3, [r0, #0]
   da1c2:	691b      	ldr	r3, [r3, #16]
   da1c4:	4798      	blx	r3
   da1c6:	2800      	cmp	r0, #0
   da1c8:	dd01      	ble.n	da1ce <serialEventRun+0x2e>
        serialEvent1();
   da1ca:	f3af 8000 	nop.w
}
   da1ce:	bd08      	pop	{r3, pc}
	...

000da1d8 <_post_loop>:
{
   da1d8:	b508      	push	{r3, lr}
	serialEventRun();
   da1da:	f7ff ffe1 	bl	da1a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da1de:	f7fd ffe9 	bl	d81b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da1e2:	4b01      	ldr	r3, [pc, #4]	; (da1e8 <_post_loop+0x10>)
   da1e4:	6018      	str	r0, [r3, #0]
}
   da1e6:	bd08      	pop	{r3, pc}
   da1e8:	2003e7d8 	.word	0x2003e7d8

000da1ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da1ec:	4802      	ldr	r0, [pc, #8]	; (da1f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   da1ee:	4a03      	ldr	r2, [pc, #12]	; (da1fc <_Z33system_initialize_user_backup_ramv+0x10>)
   da1f0:	4903      	ldr	r1, [pc, #12]	; (da200 <_Z33system_initialize_user_backup_ramv+0x14>)
   da1f2:	1a12      	subs	r2, r2, r0
   da1f4:	f000 be02 	b.w	dadfc <memcpy>
   da1f8:	2003f400 	.word	0x2003f400
   da1fc:	2003fc1c 	.word	0x2003fc1c
   da200:	000dbd30 	.word	0x000dbd30

000da204 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da204:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da206:	2300      	movs	r3, #0
   da208:	9300      	str	r3, [sp, #0]
   da20a:	461a      	mov	r2, r3
   da20c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da210:	f7fe f9ec 	bl	d85ec <system_ctrl_set_result>
}
   da214:	b003      	add	sp, #12
   da216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da21c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da21c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da21e:	8843      	ldrh	r3, [r0, #2]
   da220:	2b0a      	cmp	r3, #10
   da222:	d008      	beq.n	da236 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da224:	2b50      	cmp	r3, #80	; 0x50
   da226:	d10b      	bne.n	da240 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da228:	4b09      	ldr	r3, [pc, #36]	; (da250 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da22a:	681b      	ldr	r3, [r3, #0]
   da22c:	b14b      	cbz	r3, da242 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da22e:	b003      	add	sp, #12
   da230:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da234:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da236:	f7ff ffe5 	bl	da204 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da23a:	b003      	add	sp, #12
   da23c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da240:	2300      	movs	r3, #0
   da242:	9300      	str	r3, [sp, #0]
   da244:	461a      	mov	r2, r3
   da246:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da24a:	f7fe f9cf 	bl	d85ec <system_ctrl_set_result>
}
   da24e:	e7f4      	b.n	da23a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da250:	2003e7d4 	.word	0x2003e7d4

000da254 <module_user_init_hook>:
{
   da254:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da256:	4c12      	ldr	r4, [pc, #72]	; (da2a0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da258:	4812      	ldr	r0, [pc, #72]	; (da2a4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da25a:	4d13      	ldr	r5, [pc, #76]	; (da2a8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da25c:	2100      	movs	r1, #0
   da25e:	f7fe faed 	bl	d883c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   da262:	6823      	ldr	r3, [r4, #0]
   da264:	42ab      	cmp	r3, r5
   da266:	4b11      	ldr	r3, [pc, #68]	; (da2ac <module_user_init_hook+0x58>)
   da268:	bf0c      	ite	eq
   da26a:	2201      	moveq	r2, #1
   da26c:	2200      	movne	r2, #0
   da26e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da270:	d002      	beq.n	da278 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   da272:	f7ff ffbb 	bl	da1ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   da276:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da278:	f7fd ff84 	bl	d8184 <HAL_RNG_GetRandomNumber>
   da27c:	4604      	mov	r4, r0
    srand(seed);
   da27e:	f000 fded 	bl	dae5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da282:	4b0b      	ldr	r3, [pc, #44]	; (da2b0 <module_user_init_hook+0x5c>)
   da284:	b113      	cbz	r3, da28c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   da286:	4620      	mov	r0, r4
   da288:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da28c:	2100      	movs	r1, #0
   da28e:	4808      	ldr	r0, [pc, #32]	; (da2b0 <module_user_init_hook+0x5c>)
   da290:	f7fe fa34 	bl	d86fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da298:	4806      	ldr	r0, [pc, #24]	; (da2b4 <module_user_init_hook+0x60>)
   da29a:	2100      	movs	r1, #0
   da29c:	f7fe b99c 	b.w	d85d8 <system_ctrl_set_app_request_handler>
   da2a0:	2003fc18 	.word	0x2003fc18
   da2a4:	000da195 	.word	0x000da195
   da2a8:	9a271c1e 	.word	0x9a271c1e
   da2ac:	2003e7d0 	.word	0x2003e7d0
   da2b0:	00000000 	.word	0x00000000
   da2b4:	000da21d 	.word	0x000da21d

000da2b8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da2b8:	b508      	push	{r3, lr}
   da2ba:	4b02      	ldr	r3, [pc, #8]	; (da2c4 <spark_protocol_instance+0xc>)
   da2bc:	681b      	ldr	r3, [r3, #0]
   da2be:	681b      	ldr	r3, [r3, #0]
   da2c0:	9301      	str	r3, [sp, #4]
   da2c2:	bd08      	pop	{r3, pc}
   da2c4:	0003025c 	.word	0x0003025c

000da2c8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da2c8:	b508      	push	{r3, lr}
   da2ca:	4b02      	ldr	r3, [pc, #8]	; (da2d4 <spark_protocol_set_product_id+0xc>)
   da2cc:	681b      	ldr	r3, [r3, #0]
   da2ce:	685b      	ldr	r3, [r3, #4]
   da2d0:	9301      	str	r3, [sp, #4]
   da2d2:	bd08      	pop	{r3, pc}
   da2d4:	0003025c 	.word	0x0003025c

000da2d8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da2d8:	b508      	push	{r3, lr}
   da2da:	4b02      	ldr	r3, [pc, #8]	; (da2e4 <spark_protocol_set_product_firmware_version+0xc>)
   da2dc:	681b      	ldr	r3, [r3, #0]
   da2de:	689b      	ldr	r3, [r3, #8]
   da2e0:	9301      	str	r3, [sp, #4]
   da2e2:	bd08      	pop	{r3, pc}
   da2e4:	0003025c 	.word	0x0003025c

000da2e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da2e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da2ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da2ec:	d902      	bls.n	da2f4 <pinAvailable+0xc>
    return false;
   da2ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da2f0:	b002      	add	sp, #8
   da2f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da2f4:	f1a0 030b 	sub.w	r3, r0, #11
   da2f8:	2b02      	cmp	r3, #2
   da2fa:	d81a      	bhi.n	da332 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da2fc:	4c17      	ldr	r4, [pc, #92]	; (da35c <pinAvailable+0x74>)
   da2fe:	7821      	ldrb	r1, [r4, #0]
   da300:	f3bf 8f5b 	dmb	ish
   da304:	f011 0101 	ands.w	r1, r1, #1
   da308:	d10b      	bne.n	da322 <pinAvailable+0x3a>
   da30a:	4620      	mov	r0, r4
   da30c:	9101      	str	r1, [sp, #4]
   da30e:	f7f9 fed3 	bl	d40b8 <__cxa_guard_acquire>
   da312:	9901      	ldr	r1, [sp, #4]
   da314:	b128      	cbz	r0, da322 <pinAvailable+0x3a>
   da316:	4812      	ldr	r0, [pc, #72]	; (da360 <pinAvailable+0x78>)
   da318:	f7ff f994 	bl	d9644 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da31c:	4620      	mov	r0, r4
   da31e:	f7f9 fed0 	bl	d40c2 <__cxa_guard_release>
   da322:	4b0f      	ldr	r3, [pc, #60]	; (da360 <pinAvailable+0x78>)
   da324:	7818      	ldrb	r0, [r3, #0]
   da326:	f7fe f84d 	bl	d83c4 <hal_spi_is_enabled>
   da32a:	2800      	cmp	r0, #0
   da32c:	d1df      	bne.n	da2ee <pinAvailable+0x6>
  return true; // 'pin' is available
   da32e:	2001      	movs	r0, #1
   da330:	e7de      	b.n	da2f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da332:	2801      	cmp	r0, #1
   da334:	d809      	bhi.n	da34a <pinAvailable+0x62>
   da336:	f000 f86b 	bl	da410 <_Z19__fetch_global_Wirev>
   da33a:	2100      	movs	r1, #0
   da33c:	7c00      	ldrb	r0, [r0, #16]
   da33e:	f7fd ffe9 	bl	d8314 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da342:	f080 0001 	eor.w	r0, r0, #1
   da346:	b2c0      	uxtb	r0, r0
   da348:	e7d2      	b.n	da2f0 <pinAvailable+0x8>
   da34a:	3809      	subs	r0, #9
   da34c:	2801      	cmp	r0, #1
   da34e:	d8ee      	bhi.n	da32e <pinAvailable+0x46>
   da350:	f7ff fe72 	bl	da038 <_Z22__fetch_global_Serial1v>
   da354:	7c00      	ldrb	r0, [r0, #16]
   da356:	f7fe f88d 	bl	d8474 <hal_usart_is_enabled>
   da35a:	e7f2      	b.n	da342 <pinAvailable+0x5a>
   da35c:	2003e5c0 	.word	0x2003e5c0
   da360:	2003e5c4 	.word	0x2003e5c4

000da364 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da364:	2823      	cmp	r0, #35	; 0x23
{
   da366:	b538      	push	{r3, r4, r5, lr}
   da368:	4604      	mov	r4, r0
   da36a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da36c:	d80a      	bhi.n	da384 <pinMode+0x20>
   da36e:	29ff      	cmp	r1, #255	; 0xff
   da370:	d008      	beq.n	da384 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da372:	f7ff ffb9 	bl	da2e8 <pinAvailable>
   da376:	b128      	cbz	r0, da384 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da378:	4629      	mov	r1, r5
   da37a:	4620      	mov	r0, r4
}
   da37c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da380:	f7fd bf58 	b.w	d8234 <HAL_Pin_Mode>
}
   da384:	bd38      	pop	{r3, r4, r5, pc}

000da386 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da386:	b538      	push	{r3, r4, r5, lr}
   da388:	4604      	mov	r4, r0
   da38a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da38c:	f7fd ff5a 	bl	d8244 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da390:	28ff      	cmp	r0, #255	; 0xff
   da392:	d010      	beq.n	da3b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da394:	2806      	cmp	r0, #6
   da396:	d804      	bhi.n	da3a2 <digitalWrite+0x1c>
   da398:	234d      	movs	r3, #77	; 0x4d
   da39a:	fa23 f000 	lsr.w	r0, r3, r0
   da39e:	07c3      	lsls	r3, r0, #31
   da3a0:	d409      	bmi.n	da3b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da3a2:	4620      	mov	r0, r4
   da3a4:	f7ff ffa0 	bl	da2e8 <pinAvailable>
   da3a8:	b128      	cbz	r0, da3b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da3aa:	4629      	mov	r1, r5
   da3ac:	4620      	mov	r0, r4
}
   da3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da3b2:	f7fd bf4f 	b.w	d8254 <HAL_GPIO_Write>
}
   da3b6:	bd38      	pop	{r3, r4, r5, pc}

000da3b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da3b8:	b510      	push	{r4, lr}
   da3ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da3bc:	f7fd ff42 	bl	d8244 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da3c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da3c2:	b2db      	uxtb	r3, r3
   da3c4:	2b01      	cmp	r3, #1
   da3c6:	d908      	bls.n	da3da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da3c8:	4620      	mov	r0, r4
   da3ca:	f7ff ff8d 	bl	da2e8 <pinAvailable>
   da3ce:	b120      	cbz	r0, da3da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da3d0:	4620      	mov	r0, r4
}
   da3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da3d6:	f7fd bf45 	b.w	d8264 <HAL_GPIO_Read>
}
   da3da:	2000      	movs	r0, #0
   da3dc:	bd10      	pop	{r4, pc}
	...

000da3e0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   da3e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da3e2:	2300      	movs	r3, #0
   da3e4:	2520      	movs	r5, #32
   da3e6:	8043      	strh	r3, [r0, #2]
   da3e8:	2314      	movs	r3, #20
{
   da3ea:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da3ec:	8003      	strh	r3, [r0, #0]
   da3ee:	6085      	str	r5, [r0, #8]
   da3f0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da3f2:	4906      	ldr	r1, [pc, #24]	; (da40c <_Z17acquireWireBufferv+0x2c>)
   da3f4:	4628      	mov	r0, r5
   da3f6:	f000 f83c 	bl	da472 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da3fa:	4904      	ldr	r1, [pc, #16]	; (da40c <_Z17acquireWireBufferv+0x2c>)
	};
   da3fc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da3fe:	4628      	mov	r0, r5
   da400:	f000 f837 	bl	da472 <_ZnajRKSt9nothrow_t>
	};
   da404:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   da406:	4620      	mov	r0, r4
   da408:	bd38      	pop	{r3, r4, r5, pc}
   da40a:	bf00      	nop
   da40c:	000dbb98 	.word	0x000dbb98

000da410 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   da410:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da412:	4d0f      	ldr	r5, [pc, #60]	; (da450 <_Z19__fetch_global_Wirev+0x40>)
   da414:	7829      	ldrb	r1, [r5, #0]
   da416:	f3bf 8f5b 	dmb	ish
   da41a:	f011 0401 	ands.w	r4, r1, #1
{
   da41e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da420:	d113      	bne.n	da44a <_Z19__fetch_global_Wirev+0x3a>
   da422:	4628      	mov	r0, r5
   da424:	f7f9 fe48 	bl	d40b8 <__cxa_guard_acquire>
   da428:	b178      	cbz	r0, da44a <_Z19__fetch_global_Wirev+0x3a>
   da42a:	a801      	add	r0, sp, #4
   da42c:	f7ff ffd8 	bl	da3e0 <_Z17acquireWireBufferv>
   da430:	aa01      	add	r2, sp, #4
   da432:	4621      	mov	r1, r4
   da434:	4807      	ldr	r0, [pc, #28]	; (da454 <_Z19__fetch_global_Wirev+0x44>)
   da436:	f7fe fedd 	bl	d91f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da43a:	4628      	mov	r0, r5
   da43c:	f7f9 fe41 	bl	d40c2 <__cxa_guard_release>
   da440:	4a05      	ldr	r2, [pc, #20]	; (da458 <_Z19__fetch_global_Wirev+0x48>)
   da442:	4906      	ldr	r1, [pc, #24]	; (da45c <_Z19__fetch_global_Wirev+0x4c>)
   da444:	4803      	ldr	r0, [pc, #12]	; (da454 <_Z19__fetch_global_Wirev+0x44>)
   da446:	f000 f80b 	bl	da460 <__aeabi_atexit>
	return wire;
}
   da44a:	4802      	ldr	r0, [pc, #8]	; (da454 <_Z19__fetch_global_Wirev+0x44>)
   da44c:	b007      	add	sp, #28
   da44e:	bd30      	pop	{r4, r5, pc}
   da450:	2003e7dc 	.word	0x2003e7dc
   da454:	2003e7e0 	.word	0x2003e7e0
   da458:	2003e200 	.word	0x2003e200
   da45c:	000d919d 	.word	0x000d919d

000da460 <__aeabi_atexit>:
   da460:	460b      	mov	r3, r1
   da462:	4601      	mov	r1, r0
   da464:	4618      	mov	r0, r3
   da466:	f000 bca9 	b.w	dadbc <__cxa_atexit>

000da46a <_ZdlPvj>:
   da46a:	f7f9 be18 	b.w	d409e <_ZdlPv>

000da46e <_ZnwjRKSt9nothrow_t>:
   da46e:	f7f9 be12 	b.w	d4096 <_Znwj>

000da472 <_ZnajRKSt9nothrow_t>:
   da472:	f7f9 be12 	b.w	d409a <_Znaj>

000da476 <_ZSt25__throw_bad_function_callv>:
   da476:	b508      	push	{r3, lr}
   da478:	f7fe f9d0 	bl	d881c <abort>

000da47c <__aeabi_drsub>:
   da47c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da480:	e002      	b.n	da488 <__adddf3>
   da482:	bf00      	nop

000da484 <__aeabi_dsub>:
   da484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da488 <__adddf3>:
   da488:	b530      	push	{r4, r5, lr}
   da48a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da48e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da492:	ea94 0f05 	teq	r4, r5
   da496:	bf08      	it	eq
   da498:	ea90 0f02 	teqeq	r0, r2
   da49c:	bf1f      	itttt	ne
   da49e:	ea54 0c00 	orrsne.w	ip, r4, r0
   da4a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   da4a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da4aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da4ae:	f000 80e2 	beq.w	da676 <__adddf3+0x1ee>
   da4b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da4b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da4ba:	bfb8      	it	lt
   da4bc:	426d      	neglt	r5, r5
   da4be:	dd0c      	ble.n	da4da <__adddf3+0x52>
   da4c0:	442c      	add	r4, r5
   da4c2:	ea80 0202 	eor.w	r2, r0, r2
   da4c6:	ea81 0303 	eor.w	r3, r1, r3
   da4ca:	ea82 0000 	eor.w	r0, r2, r0
   da4ce:	ea83 0101 	eor.w	r1, r3, r1
   da4d2:	ea80 0202 	eor.w	r2, r0, r2
   da4d6:	ea81 0303 	eor.w	r3, r1, r3
   da4da:	2d36      	cmp	r5, #54	; 0x36
   da4dc:	bf88      	it	hi
   da4de:	bd30      	pophi	{r4, r5, pc}
   da4e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da4e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da4e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da4ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da4f0:	d002      	beq.n	da4f8 <__adddf3+0x70>
   da4f2:	4240      	negs	r0, r0
   da4f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da4fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da504:	d002      	beq.n	da50c <__adddf3+0x84>
   da506:	4252      	negs	r2, r2
   da508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da50c:	ea94 0f05 	teq	r4, r5
   da510:	f000 80a7 	beq.w	da662 <__adddf3+0x1da>
   da514:	f1a4 0401 	sub.w	r4, r4, #1
   da518:	f1d5 0e20 	rsbs	lr, r5, #32
   da51c:	db0d      	blt.n	da53a <__adddf3+0xb2>
   da51e:	fa02 fc0e 	lsl.w	ip, r2, lr
   da522:	fa22 f205 	lsr.w	r2, r2, r5
   da526:	1880      	adds	r0, r0, r2
   da528:	f141 0100 	adc.w	r1, r1, #0
   da52c:	fa03 f20e 	lsl.w	r2, r3, lr
   da530:	1880      	adds	r0, r0, r2
   da532:	fa43 f305 	asr.w	r3, r3, r5
   da536:	4159      	adcs	r1, r3
   da538:	e00e      	b.n	da558 <__adddf3+0xd0>
   da53a:	f1a5 0520 	sub.w	r5, r5, #32
   da53e:	f10e 0e20 	add.w	lr, lr, #32
   da542:	2a01      	cmp	r2, #1
   da544:	fa03 fc0e 	lsl.w	ip, r3, lr
   da548:	bf28      	it	cs
   da54a:	f04c 0c02 	orrcs.w	ip, ip, #2
   da54e:	fa43 f305 	asr.w	r3, r3, r5
   da552:	18c0      	adds	r0, r0, r3
   da554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da55c:	d507      	bpl.n	da56e <__adddf3+0xe6>
   da55e:	f04f 0e00 	mov.w	lr, #0
   da562:	f1dc 0c00 	rsbs	ip, ip, #0
   da566:	eb7e 0000 	sbcs.w	r0, lr, r0
   da56a:	eb6e 0101 	sbc.w	r1, lr, r1
   da56e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da572:	d31b      	bcc.n	da5ac <__adddf3+0x124>
   da574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da578:	d30c      	bcc.n	da594 <__adddf3+0x10c>
   da57a:	0849      	lsrs	r1, r1, #1
   da57c:	ea5f 0030 	movs.w	r0, r0, rrx
   da580:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da584:	f104 0401 	add.w	r4, r4, #1
   da588:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da58c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da590:	f080 809a 	bcs.w	da6c8 <__adddf3+0x240>
   da594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da598:	bf08      	it	eq
   da59a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da59e:	f150 0000 	adcs.w	r0, r0, #0
   da5a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da5a6:	ea41 0105 	orr.w	r1, r1, r5
   da5aa:	bd30      	pop	{r4, r5, pc}
   da5ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da5b0:	4140      	adcs	r0, r0
   da5b2:	eb41 0101 	adc.w	r1, r1, r1
   da5b6:	3c01      	subs	r4, #1
   da5b8:	bf28      	it	cs
   da5ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da5be:	d2e9      	bcs.n	da594 <__adddf3+0x10c>
   da5c0:	f091 0f00 	teq	r1, #0
   da5c4:	bf04      	itt	eq
   da5c6:	4601      	moveq	r1, r0
   da5c8:	2000      	moveq	r0, #0
   da5ca:	fab1 f381 	clz	r3, r1
   da5ce:	bf08      	it	eq
   da5d0:	3320      	addeq	r3, #32
   da5d2:	f1a3 030b 	sub.w	r3, r3, #11
   da5d6:	f1b3 0220 	subs.w	r2, r3, #32
   da5da:	da0c      	bge.n	da5f6 <__adddf3+0x16e>
   da5dc:	320c      	adds	r2, #12
   da5de:	dd08      	ble.n	da5f2 <__adddf3+0x16a>
   da5e0:	f102 0c14 	add.w	ip, r2, #20
   da5e4:	f1c2 020c 	rsb	r2, r2, #12
   da5e8:	fa01 f00c 	lsl.w	r0, r1, ip
   da5ec:	fa21 f102 	lsr.w	r1, r1, r2
   da5f0:	e00c      	b.n	da60c <__adddf3+0x184>
   da5f2:	f102 0214 	add.w	r2, r2, #20
   da5f6:	bfd8      	it	le
   da5f8:	f1c2 0c20 	rsble	ip, r2, #32
   da5fc:	fa01 f102 	lsl.w	r1, r1, r2
   da600:	fa20 fc0c 	lsr.w	ip, r0, ip
   da604:	bfdc      	itt	le
   da606:	ea41 010c 	orrle.w	r1, r1, ip
   da60a:	4090      	lslle	r0, r2
   da60c:	1ae4      	subs	r4, r4, r3
   da60e:	bfa2      	ittt	ge
   da610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da614:	4329      	orrge	r1, r5
   da616:	bd30      	popge	{r4, r5, pc}
   da618:	ea6f 0404 	mvn.w	r4, r4
   da61c:	3c1f      	subs	r4, #31
   da61e:	da1c      	bge.n	da65a <__adddf3+0x1d2>
   da620:	340c      	adds	r4, #12
   da622:	dc0e      	bgt.n	da642 <__adddf3+0x1ba>
   da624:	f104 0414 	add.w	r4, r4, #20
   da628:	f1c4 0220 	rsb	r2, r4, #32
   da62c:	fa20 f004 	lsr.w	r0, r0, r4
   da630:	fa01 f302 	lsl.w	r3, r1, r2
   da634:	ea40 0003 	orr.w	r0, r0, r3
   da638:	fa21 f304 	lsr.w	r3, r1, r4
   da63c:	ea45 0103 	orr.w	r1, r5, r3
   da640:	bd30      	pop	{r4, r5, pc}
   da642:	f1c4 040c 	rsb	r4, r4, #12
   da646:	f1c4 0220 	rsb	r2, r4, #32
   da64a:	fa20 f002 	lsr.w	r0, r0, r2
   da64e:	fa01 f304 	lsl.w	r3, r1, r4
   da652:	ea40 0003 	orr.w	r0, r0, r3
   da656:	4629      	mov	r1, r5
   da658:	bd30      	pop	{r4, r5, pc}
   da65a:	fa21 f004 	lsr.w	r0, r1, r4
   da65e:	4629      	mov	r1, r5
   da660:	bd30      	pop	{r4, r5, pc}
   da662:	f094 0f00 	teq	r4, #0
   da666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da66a:	bf06      	itte	eq
   da66c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da670:	3401      	addeq	r4, #1
   da672:	3d01      	subne	r5, #1
   da674:	e74e      	b.n	da514 <__adddf3+0x8c>
   da676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da67a:	bf18      	it	ne
   da67c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da680:	d029      	beq.n	da6d6 <__adddf3+0x24e>
   da682:	ea94 0f05 	teq	r4, r5
   da686:	bf08      	it	eq
   da688:	ea90 0f02 	teqeq	r0, r2
   da68c:	d005      	beq.n	da69a <__adddf3+0x212>
   da68e:	ea54 0c00 	orrs.w	ip, r4, r0
   da692:	bf04      	itt	eq
   da694:	4619      	moveq	r1, r3
   da696:	4610      	moveq	r0, r2
   da698:	bd30      	pop	{r4, r5, pc}
   da69a:	ea91 0f03 	teq	r1, r3
   da69e:	bf1e      	ittt	ne
   da6a0:	2100      	movne	r1, #0
   da6a2:	2000      	movne	r0, #0
   da6a4:	bd30      	popne	{r4, r5, pc}
   da6a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da6aa:	d105      	bne.n	da6b8 <__adddf3+0x230>
   da6ac:	0040      	lsls	r0, r0, #1
   da6ae:	4149      	adcs	r1, r1
   da6b0:	bf28      	it	cs
   da6b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da6b6:	bd30      	pop	{r4, r5, pc}
   da6b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da6bc:	bf3c      	itt	cc
   da6be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da6c2:	bd30      	popcc	{r4, r5, pc}
   da6c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da6c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da6cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da6d0:	f04f 0000 	mov.w	r0, #0
   da6d4:	bd30      	pop	{r4, r5, pc}
   da6d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da6da:	bf1a      	itte	ne
   da6dc:	4619      	movne	r1, r3
   da6de:	4610      	movne	r0, r2
   da6e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da6e4:	bf1c      	itt	ne
   da6e6:	460b      	movne	r3, r1
   da6e8:	4602      	movne	r2, r0
   da6ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da6ee:	bf06      	itte	eq
   da6f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da6f4:	ea91 0f03 	teqeq	r1, r3
   da6f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da6fc:	bd30      	pop	{r4, r5, pc}
   da6fe:	bf00      	nop

000da700 <__aeabi_ui2d>:
   da700:	f090 0f00 	teq	r0, #0
   da704:	bf04      	itt	eq
   da706:	2100      	moveq	r1, #0
   da708:	4770      	bxeq	lr
   da70a:	b530      	push	{r4, r5, lr}
   da70c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da710:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da714:	f04f 0500 	mov.w	r5, #0
   da718:	f04f 0100 	mov.w	r1, #0
   da71c:	e750      	b.n	da5c0 <__adddf3+0x138>
   da71e:	bf00      	nop

000da720 <__aeabi_i2d>:
   da720:	f090 0f00 	teq	r0, #0
   da724:	bf04      	itt	eq
   da726:	2100      	moveq	r1, #0
   da728:	4770      	bxeq	lr
   da72a:	b530      	push	{r4, r5, lr}
   da72c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da730:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da738:	bf48      	it	mi
   da73a:	4240      	negmi	r0, r0
   da73c:	f04f 0100 	mov.w	r1, #0
   da740:	e73e      	b.n	da5c0 <__adddf3+0x138>
   da742:	bf00      	nop

000da744 <__aeabi_f2d>:
   da744:	0042      	lsls	r2, r0, #1
   da746:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da74a:	ea4f 0131 	mov.w	r1, r1, rrx
   da74e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da752:	bf1f      	itttt	ne
   da754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da75c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da760:	4770      	bxne	lr
   da762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da766:	bf08      	it	eq
   da768:	4770      	bxeq	lr
   da76a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da76e:	bf04      	itt	eq
   da770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da774:	4770      	bxeq	lr
   da776:	b530      	push	{r4, r5, lr}
   da778:	f44f 7460 	mov.w	r4, #896	; 0x380
   da77c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da784:	e71c      	b.n	da5c0 <__adddf3+0x138>
   da786:	bf00      	nop

000da788 <__aeabi_ul2d>:
   da788:	ea50 0201 	orrs.w	r2, r0, r1
   da78c:	bf08      	it	eq
   da78e:	4770      	bxeq	lr
   da790:	b530      	push	{r4, r5, lr}
   da792:	f04f 0500 	mov.w	r5, #0
   da796:	e00a      	b.n	da7ae <__aeabi_l2d+0x16>

000da798 <__aeabi_l2d>:
   da798:	ea50 0201 	orrs.w	r2, r0, r1
   da79c:	bf08      	it	eq
   da79e:	4770      	bxeq	lr
   da7a0:	b530      	push	{r4, r5, lr}
   da7a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da7a6:	d502      	bpl.n	da7ae <__aeabi_l2d+0x16>
   da7a8:	4240      	negs	r0, r0
   da7aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da7ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da7b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da7b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da7ba:	f43f aed8 	beq.w	da56e <__adddf3+0xe6>
   da7be:	f04f 0203 	mov.w	r2, #3
   da7c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7c6:	bf18      	it	ne
   da7c8:	3203      	addne	r2, #3
   da7ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da7ce:	bf18      	it	ne
   da7d0:	3203      	addne	r2, #3
   da7d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da7d6:	f1c2 0320 	rsb	r3, r2, #32
   da7da:	fa00 fc03 	lsl.w	ip, r0, r3
   da7de:	fa20 f002 	lsr.w	r0, r0, r2
   da7e2:	fa01 fe03 	lsl.w	lr, r1, r3
   da7e6:	ea40 000e 	orr.w	r0, r0, lr
   da7ea:	fa21 f102 	lsr.w	r1, r1, r2
   da7ee:	4414      	add	r4, r2
   da7f0:	e6bd      	b.n	da56e <__adddf3+0xe6>
   da7f2:	bf00      	nop

000da7f4 <__aeabi_dmul>:
   da7f4:	b570      	push	{r4, r5, r6, lr}
   da7f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da7fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da7fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da802:	bf1d      	ittte	ne
   da804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da808:	ea94 0f0c 	teqne	r4, ip
   da80c:	ea95 0f0c 	teqne	r5, ip
   da810:	f000 f8de 	bleq	da9d0 <__aeabi_dmul+0x1dc>
   da814:	442c      	add	r4, r5
   da816:	ea81 0603 	eor.w	r6, r1, r3
   da81a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da81e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da822:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da826:	bf18      	it	ne
   da828:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da82c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da834:	d038      	beq.n	da8a8 <__aeabi_dmul+0xb4>
   da836:	fba0 ce02 	umull	ip, lr, r0, r2
   da83a:	f04f 0500 	mov.w	r5, #0
   da83e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da842:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da846:	fbe0 e503 	umlal	lr, r5, r0, r3
   da84a:	f04f 0600 	mov.w	r6, #0
   da84e:	fbe1 5603 	umlal	r5, r6, r1, r3
   da852:	f09c 0f00 	teq	ip, #0
   da856:	bf18      	it	ne
   da858:	f04e 0e01 	orrne.w	lr, lr, #1
   da85c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da860:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da864:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da868:	d204      	bcs.n	da874 <__aeabi_dmul+0x80>
   da86a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da86e:	416d      	adcs	r5, r5
   da870:	eb46 0606 	adc.w	r6, r6, r6
   da874:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da878:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da87c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da880:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da884:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da888:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da88c:	bf88      	it	hi
   da88e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da892:	d81e      	bhi.n	da8d2 <__aeabi_dmul+0xde>
   da894:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da898:	bf08      	it	eq
   da89a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da89e:	f150 0000 	adcs.w	r0, r0, #0
   da8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da8a6:	bd70      	pop	{r4, r5, r6, pc}
   da8a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da8ac:	ea46 0101 	orr.w	r1, r6, r1
   da8b0:	ea40 0002 	orr.w	r0, r0, r2
   da8b4:	ea81 0103 	eor.w	r1, r1, r3
   da8b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da8bc:	bfc2      	ittt	gt
   da8be:	ebd4 050c 	rsbsgt	r5, r4, ip
   da8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da8c6:	bd70      	popgt	{r4, r5, r6, pc}
   da8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da8cc:	f04f 0e00 	mov.w	lr, #0
   da8d0:	3c01      	subs	r4, #1
   da8d2:	f300 80ab 	bgt.w	daa2c <__aeabi_dmul+0x238>
   da8d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da8da:	bfde      	ittt	le
   da8dc:	2000      	movle	r0, #0
   da8de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da8e2:	bd70      	pople	{r4, r5, r6, pc}
   da8e4:	f1c4 0400 	rsb	r4, r4, #0
   da8e8:	3c20      	subs	r4, #32
   da8ea:	da35      	bge.n	da958 <__aeabi_dmul+0x164>
   da8ec:	340c      	adds	r4, #12
   da8ee:	dc1b      	bgt.n	da928 <__aeabi_dmul+0x134>
   da8f0:	f104 0414 	add.w	r4, r4, #20
   da8f4:	f1c4 0520 	rsb	r5, r4, #32
   da8f8:	fa00 f305 	lsl.w	r3, r0, r5
   da8fc:	fa20 f004 	lsr.w	r0, r0, r4
   da900:	fa01 f205 	lsl.w	r2, r1, r5
   da904:	ea40 0002 	orr.w	r0, r0, r2
   da908:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da90c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da910:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da914:	fa21 f604 	lsr.w	r6, r1, r4
   da918:	eb42 0106 	adc.w	r1, r2, r6
   da91c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da920:	bf08      	it	eq
   da922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da926:	bd70      	pop	{r4, r5, r6, pc}
   da928:	f1c4 040c 	rsb	r4, r4, #12
   da92c:	f1c4 0520 	rsb	r5, r4, #32
   da930:	fa00 f304 	lsl.w	r3, r0, r4
   da934:	fa20 f005 	lsr.w	r0, r0, r5
   da938:	fa01 f204 	lsl.w	r2, r1, r4
   da93c:	ea40 0002 	orr.w	r0, r0, r2
   da940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da944:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da948:	f141 0100 	adc.w	r1, r1, #0
   da94c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da950:	bf08      	it	eq
   da952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da956:	bd70      	pop	{r4, r5, r6, pc}
   da958:	f1c4 0520 	rsb	r5, r4, #32
   da95c:	fa00 f205 	lsl.w	r2, r0, r5
   da960:	ea4e 0e02 	orr.w	lr, lr, r2
   da964:	fa20 f304 	lsr.w	r3, r0, r4
   da968:	fa01 f205 	lsl.w	r2, r1, r5
   da96c:	ea43 0302 	orr.w	r3, r3, r2
   da970:	fa21 f004 	lsr.w	r0, r1, r4
   da974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da978:	fa21 f204 	lsr.w	r2, r1, r4
   da97c:	ea20 0002 	bic.w	r0, r0, r2
   da980:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da988:	bf08      	it	eq
   da98a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da98e:	bd70      	pop	{r4, r5, r6, pc}
   da990:	f094 0f00 	teq	r4, #0
   da994:	d10f      	bne.n	da9b6 <__aeabi_dmul+0x1c2>
   da996:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da99a:	0040      	lsls	r0, r0, #1
   da99c:	eb41 0101 	adc.w	r1, r1, r1
   da9a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da9a4:	bf08      	it	eq
   da9a6:	3c01      	subeq	r4, #1
   da9a8:	d0f7      	beq.n	da99a <__aeabi_dmul+0x1a6>
   da9aa:	ea41 0106 	orr.w	r1, r1, r6
   da9ae:	f095 0f00 	teq	r5, #0
   da9b2:	bf18      	it	ne
   da9b4:	4770      	bxne	lr
   da9b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da9ba:	0052      	lsls	r2, r2, #1
   da9bc:	eb43 0303 	adc.w	r3, r3, r3
   da9c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da9c4:	bf08      	it	eq
   da9c6:	3d01      	subeq	r5, #1
   da9c8:	d0f7      	beq.n	da9ba <__aeabi_dmul+0x1c6>
   da9ca:	ea43 0306 	orr.w	r3, r3, r6
   da9ce:	4770      	bx	lr
   da9d0:	ea94 0f0c 	teq	r4, ip
   da9d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da9d8:	bf18      	it	ne
   da9da:	ea95 0f0c 	teqne	r5, ip
   da9de:	d00c      	beq.n	da9fa <__aeabi_dmul+0x206>
   da9e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9e4:	bf18      	it	ne
   da9e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9ea:	d1d1      	bne.n	da990 <__aeabi_dmul+0x19c>
   da9ec:	ea81 0103 	eor.w	r1, r1, r3
   da9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da9f4:	f04f 0000 	mov.w	r0, #0
   da9f8:	bd70      	pop	{r4, r5, r6, pc}
   da9fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9fe:	bf06      	itte	eq
   daa00:	4610      	moveq	r0, r2
   daa02:	4619      	moveq	r1, r3
   daa04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   daa08:	d019      	beq.n	daa3e <__aeabi_dmul+0x24a>
   daa0a:	ea94 0f0c 	teq	r4, ip
   daa0e:	d102      	bne.n	daa16 <__aeabi_dmul+0x222>
   daa10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   daa14:	d113      	bne.n	daa3e <__aeabi_dmul+0x24a>
   daa16:	ea95 0f0c 	teq	r5, ip
   daa1a:	d105      	bne.n	daa28 <__aeabi_dmul+0x234>
   daa1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   daa20:	bf1c      	itt	ne
   daa22:	4610      	movne	r0, r2
   daa24:	4619      	movne	r1, r3
   daa26:	d10a      	bne.n	daa3e <__aeabi_dmul+0x24a>
   daa28:	ea81 0103 	eor.w	r1, r1, r3
   daa2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   daa30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   daa38:	f04f 0000 	mov.w	r0, #0
   daa3c:	bd70      	pop	{r4, r5, r6, pc}
   daa3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   daa42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   daa46:	bd70      	pop	{r4, r5, r6, pc}

000daa48 <__aeabi_ddiv>:
   daa48:	b570      	push	{r4, r5, r6, lr}
   daa4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   daa4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daa52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daa56:	bf1d      	ittte	ne
   daa58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daa5c:	ea94 0f0c 	teqne	r4, ip
   daa60:	ea95 0f0c 	teqne	r5, ip
   daa64:	f000 f8a7 	bleq	dabb6 <__aeabi_ddiv+0x16e>
   daa68:	eba4 0405 	sub.w	r4, r4, r5
   daa6c:	ea81 0e03 	eor.w	lr, r1, r3
   daa70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daa74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daa78:	f000 8088 	beq.w	dab8c <__aeabi_ddiv+0x144>
   daa7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daa80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daa84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daa88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daa8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daa90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daa94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daa98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daa9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daaa0:	429d      	cmp	r5, r3
   daaa2:	bf08      	it	eq
   daaa4:	4296      	cmpeq	r6, r2
   daaa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daaaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daaae:	d202      	bcs.n	daab6 <__aeabi_ddiv+0x6e>
   daab0:	085b      	lsrs	r3, r3, #1
   daab2:	ea4f 0232 	mov.w	r2, r2, rrx
   daab6:	1ab6      	subs	r6, r6, r2
   daab8:	eb65 0503 	sbc.w	r5, r5, r3
   daabc:	085b      	lsrs	r3, r3, #1
   daabe:	ea4f 0232 	mov.w	r2, r2, rrx
   daac2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daac6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daaca:	ebb6 0e02 	subs.w	lr, r6, r2
   daace:	eb75 0e03 	sbcs.w	lr, r5, r3
   daad2:	bf22      	ittt	cs
   daad4:	1ab6      	subcs	r6, r6, r2
   daad6:	4675      	movcs	r5, lr
   daad8:	ea40 000c 	orrcs.w	r0, r0, ip
   daadc:	085b      	lsrs	r3, r3, #1
   daade:	ea4f 0232 	mov.w	r2, r2, rrx
   daae2:	ebb6 0e02 	subs.w	lr, r6, r2
   daae6:	eb75 0e03 	sbcs.w	lr, r5, r3
   daaea:	bf22      	ittt	cs
   daaec:	1ab6      	subcs	r6, r6, r2
   daaee:	4675      	movcs	r5, lr
   daaf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daaf4:	085b      	lsrs	r3, r3, #1
   daaf6:	ea4f 0232 	mov.w	r2, r2, rrx
   daafa:	ebb6 0e02 	subs.w	lr, r6, r2
   daafe:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab02:	bf22      	ittt	cs
   dab04:	1ab6      	subcs	r6, r6, r2
   dab06:	4675      	movcs	r5, lr
   dab08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dab0c:	085b      	lsrs	r3, r3, #1
   dab0e:	ea4f 0232 	mov.w	r2, r2, rrx
   dab12:	ebb6 0e02 	subs.w	lr, r6, r2
   dab16:	eb75 0e03 	sbcs.w	lr, r5, r3
   dab1a:	bf22      	ittt	cs
   dab1c:	1ab6      	subcs	r6, r6, r2
   dab1e:	4675      	movcs	r5, lr
   dab20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dab24:	ea55 0e06 	orrs.w	lr, r5, r6
   dab28:	d018      	beq.n	dab5c <__aeabi_ddiv+0x114>
   dab2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dab2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dab32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dab36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dab3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dab3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dab42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dab46:	d1c0      	bne.n	daaca <__aeabi_ddiv+0x82>
   dab48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab4c:	d10b      	bne.n	dab66 <__aeabi_ddiv+0x11e>
   dab4e:	ea41 0100 	orr.w	r1, r1, r0
   dab52:	f04f 0000 	mov.w	r0, #0
   dab56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dab5a:	e7b6      	b.n	daaca <__aeabi_ddiv+0x82>
   dab5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dab60:	bf04      	itt	eq
   dab62:	4301      	orreq	r1, r0
   dab64:	2000      	moveq	r0, #0
   dab66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dab6a:	bf88      	it	hi
   dab6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dab70:	f63f aeaf 	bhi.w	da8d2 <__aeabi_dmul+0xde>
   dab74:	ebb5 0c03 	subs.w	ip, r5, r3
   dab78:	bf04      	itt	eq
   dab7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dab7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dab82:	f150 0000 	adcs.w	r0, r0, #0
   dab86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dab8a:	bd70      	pop	{r4, r5, r6, pc}
   dab8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dab90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dab94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dab98:	bfc2      	ittt	gt
   dab9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dab9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daba2:	bd70      	popgt	{r4, r5, r6, pc}
   daba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daba8:	f04f 0e00 	mov.w	lr, #0
   dabac:	3c01      	subs	r4, #1
   dabae:	e690      	b.n	da8d2 <__aeabi_dmul+0xde>
   dabb0:	ea45 0e06 	orr.w	lr, r5, r6
   dabb4:	e68d      	b.n	da8d2 <__aeabi_dmul+0xde>
   dabb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dabba:	ea94 0f0c 	teq	r4, ip
   dabbe:	bf08      	it	eq
   dabc0:	ea95 0f0c 	teqeq	r5, ip
   dabc4:	f43f af3b 	beq.w	daa3e <__aeabi_dmul+0x24a>
   dabc8:	ea94 0f0c 	teq	r4, ip
   dabcc:	d10a      	bne.n	dabe4 <__aeabi_ddiv+0x19c>
   dabce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dabd2:	f47f af34 	bne.w	daa3e <__aeabi_dmul+0x24a>
   dabd6:	ea95 0f0c 	teq	r5, ip
   dabda:	f47f af25 	bne.w	daa28 <__aeabi_dmul+0x234>
   dabde:	4610      	mov	r0, r2
   dabe0:	4619      	mov	r1, r3
   dabe2:	e72c      	b.n	daa3e <__aeabi_dmul+0x24a>
   dabe4:	ea95 0f0c 	teq	r5, ip
   dabe8:	d106      	bne.n	dabf8 <__aeabi_ddiv+0x1b0>
   dabea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dabee:	f43f aefd 	beq.w	da9ec <__aeabi_dmul+0x1f8>
   dabf2:	4610      	mov	r0, r2
   dabf4:	4619      	mov	r1, r3
   dabf6:	e722      	b.n	daa3e <__aeabi_dmul+0x24a>
   dabf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dabfc:	bf18      	it	ne
   dabfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dac02:	f47f aec5 	bne.w	da990 <__aeabi_dmul+0x19c>
   dac06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dac0a:	f47f af0d 	bne.w	daa28 <__aeabi_dmul+0x234>
   dac0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dac12:	f47f aeeb 	bne.w	da9ec <__aeabi_dmul+0x1f8>
   dac16:	e712      	b.n	daa3e <__aeabi_dmul+0x24a>

000dac18 <__aeabi_d2uiz>:
   dac18:	004a      	lsls	r2, r1, #1
   dac1a:	d211      	bcs.n	dac40 <__aeabi_d2uiz+0x28>
   dac1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dac20:	d211      	bcs.n	dac46 <__aeabi_d2uiz+0x2e>
   dac22:	d50d      	bpl.n	dac40 <__aeabi_d2uiz+0x28>
   dac24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dac28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dac2c:	d40e      	bmi.n	dac4c <__aeabi_d2uiz+0x34>
   dac2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dac32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dac36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dac3a:	fa23 f002 	lsr.w	r0, r3, r2
   dac3e:	4770      	bx	lr
   dac40:	f04f 0000 	mov.w	r0, #0
   dac44:	4770      	bx	lr
   dac46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dac4a:	d102      	bne.n	dac52 <__aeabi_d2uiz+0x3a>
   dac4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dac50:	4770      	bx	lr
   dac52:	f04f 0000 	mov.w	r0, #0
   dac56:	4770      	bx	lr

000dac58 <__aeabi_d2f>:
   dac58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dac5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dac60:	bf24      	itt	cs
   dac62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dac66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dac6a:	d90d      	bls.n	dac88 <__aeabi_d2f+0x30>
   dac6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dac70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dac74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dac78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dac7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dac80:	bf08      	it	eq
   dac82:	f020 0001 	biceq.w	r0, r0, #1
   dac86:	4770      	bx	lr
   dac88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dac8c:	d121      	bne.n	dacd2 <__aeabi_d2f+0x7a>
   dac8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dac92:	bfbc      	itt	lt
   dac94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dac98:	4770      	bxlt	lr
   dac9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   daca2:	f1c2 0218 	rsb	r2, r2, #24
   daca6:	f1c2 0c20 	rsb	ip, r2, #32
   dacaa:	fa10 f30c 	lsls.w	r3, r0, ip
   dacae:	fa20 f002 	lsr.w	r0, r0, r2
   dacb2:	bf18      	it	ne
   dacb4:	f040 0001 	orrne.w	r0, r0, #1
   dacb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dacbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dacc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   dacc4:	ea40 000c 	orr.w	r0, r0, ip
   dacc8:	fa23 f302 	lsr.w	r3, r3, r2
   daccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dacd0:	e7cc      	b.n	dac6c <__aeabi_d2f+0x14>
   dacd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dacd6:	d107      	bne.n	dace8 <__aeabi_d2f+0x90>
   dacd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dacdc:	bf1e      	ittt	ne
   dacde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dace2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dace6:	4770      	bxne	lr
   dace8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dacec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dacf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dacf4:	4770      	bx	lr
   dacf6:	bf00      	nop

000dacf8 <__aeabi_f2lz>:
   dacf8:	ee07 0a90 	vmov	s15, r0
   dacfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dad00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dad04:	d401      	bmi.n	dad0a <__aeabi_f2lz+0x12>
   dad06:	f000 b80b 	b.w	dad20 <__aeabi_f2ulz>
   dad0a:	eef1 7a67 	vneg.f32	s15, s15
   dad0e:	b508      	push	{r3, lr}
   dad10:	ee17 0a90 	vmov	r0, s15
   dad14:	f000 f804 	bl	dad20 <__aeabi_f2ulz>
   dad18:	4240      	negs	r0, r0
   dad1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dad1e:	bd08      	pop	{r3, pc}

000dad20 <__aeabi_f2ulz>:
   dad20:	b5d0      	push	{r4, r6, r7, lr}
   dad22:	f7ff fd0f 	bl	da744 <__aeabi_f2d>
   dad26:	4b0c      	ldr	r3, [pc, #48]	; (dad58 <__aeabi_f2ulz+0x38>)
   dad28:	2200      	movs	r2, #0
   dad2a:	4606      	mov	r6, r0
   dad2c:	460f      	mov	r7, r1
   dad2e:	f7ff fd61 	bl	da7f4 <__aeabi_dmul>
   dad32:	f7ff ff71 	bl	dac18 <__aeabi_d2uiz>
   dad36:	4604      	mov	r4, r0
   dad38:	f7ff fce2 	bl	da700 <__aeabi_ui2d>
   dad3c:	4b07      	ldr	r3, [pc, #28]	; (dad5c <__aeabi_f2ulz+0x3c>)
   dad3e:	2200      	movs	r2, #0
   dad40:	f7ff fd58 	bl	da7f4 <__aeabi_dmul>
   dad44:	4602      	mov	r2, r0
   dad46:	460b      	mov	r3, r1
   dad48:	4630      	mov	r0, r6
   dad4a:	4639      	mov	r1, r7
   dad4c:	f7ff fb9a 	bl	da484 <__aeabi_dsub>
   dad50:	f7ff ff62 	bl	dac18 <__aeabi_d2uiz>
   dad54:	4621      	mov	r1, r4
   dad56:	bdd0      	pop	{r4, r6, r7, pc}
   dad58:	3df00000 	.word	0x3df00000
   dad5c:	41f00000 	.word	0x41f00000

000dad60 <asctime_r>:
   dad60:	b510      	push	{r4, lr}
   dad62:	460c      	mov	r4, r1
   dad64:	6941      	ldr	r1, [r0, #20]
   dad66:	6903      	ldr	r3, [r0, #16]
   dad68:	6982      	ldr	r2, [r0, #24]
   dad6a:	b086      	sub	sp, #24
   dad6c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dad70:	9104      	str	r1, [sp, #16]
   dad72:	6801      	ldr	r1, [r0, #0]
   dad74:	9103      	str	r1, [sp, #12]
   dad76:	6841      	ldr	r1, [r0, #4]
   dad78:	9102      	str	r1, [sp, #8]
   dad7a:	6881      	ldr	r1, [r0, #8]
   dad7c:	9101      	str	r1, [sp, #4]
   dad7e:	68c1      	ldr	r1, [r0, #12]
   dad80:	9100      	str	r1, [sp, #0]
   dad82:	4907      	ldr	r1, [pc, #28]	; (dada0 <asctime_r+0x40>)
   dad84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dad88:	440b      	add	r3, r1
   dad8a:	4906      	ldr	r1, [pc, #24]	; (dada4 <asctime_r+0x44>)
   dad8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dad90:	440a      	add	r2, r1
   dad92:	4620      	mov	r0, r4
   dad94:	4904      	ldr	r1, [pc, #16]	; (dada8 <asctime_r+0x48>)
   dad96:	f7fd fd29 	bl	d87ec <siprintf>
   dad9a:	4620      	mov	r0, r4
   dad9c:	b006      	add	sp, #24
   dad9e:	bd10      	pop	{r4, pc}
   dada0:	000dbbce 	.word	0x000dbbce
   dada4:	000dbbb9 	.word	0x000dbbb9
   dada8:	000dbb99 	.word	0x000dbb99

000dadac <atoi>:
   dadac:	220a      	movs	r2, #10
   dadae:	2100      	movs	r1, #0
   dadb0:	f000 b93c 	b.w	db02c <strtol>

000dadb4 <atol>:
   dadb4:	220a      	movs	r2, #10
   dadb6:	2100      	movs	r1, #0
   dadb8:	f000 b938 	b.w	db02c <strtol>

000dadbc <__cxa_atexit>:
   dadbc:	b510      	push	{r4, lr}
   dadbe:	4c05      	ldr	r4, [pc, #20]	; (dadd4 <__cxa_atexit+0x18>)
   dadc0:	4613      	mov	r3, r2
   dadc2:	b12c      	cbz	r4, dadd0 <__cxa_atexit+0x14>
   dadc4:	460a      	mov	r2, r1
   dadc6:	4601      	mov	r1, r0
   dadc8:	2002      	movs	r0, #2
   dadca:	f3af 8000 	nop.w
   dadce:	bd10      	pop	{r4, pc}
   dadd0:	4620      	mov	r0, r4
   dadd2:	e7fc      	b.n	dadce <__cxa_atexit+0x12>
   dadd4:	00000000 	.word	0x00000000

000dadd8 <gmtime>:
   dadd8:	b538      	push	{r3, r4, r5, lr}
   dadda:	4b07      	ldr	r3, [pc, #28]	; (dadf8 <gmtime+0x20>)
   daddc:	681d      	ldr	r5, [r3, #0]
   dadde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dade0:	4604      	mov	r4, r0
   dade2:	b91b      	cbnz	r3, dadec <gmtime+0x14>
   dade4:	2024      	movs	r0, #36	; 0x24
   dade6:	f7fd fce9 	bl	d87bc <malloc>
   dadea:	63e8      	str	r0, [r5, #60]	; 0x3c
   dadec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dadee:	4620      	mov	r0, r4
   dadf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dadf4:	f7fd bd3a 	b.w	d886c <gmtime_r>
   dadf8:	2003e198 	.word	0x2003e198

000dadfc <memcpy>:
   dadfc:	440a      	add	r2, r1
   dadfe:	4291      	cmp	r1, r2
   dae00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dae04:	d100      	bne.n	dae08 <memcpy+0xc>
   dae06:	4770      	bx	lr
   dae08:	b510      	push	{r4, lr}
   dae0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dae0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dae12:	4291      	cmp	r1, r2
   dae14:	d1f9      	bne.n	dae0a <memcpy+0xe>
   dae16:	bd10      	pop	{r4, pc}

000dae18 <memmove>:
   dae18:	4288      	cmp	r0, r1
   dae1a:	b510      	push	{r4, lr}
   dae1c:	eb01 0402 	add.w	r4, r1, r2
   dae20:	d902      	bls.n	dae28 <memmove+0x10>
   dae22:	4284      	cmp	r4, r0
   dae24:	4623      	mov	r3, r4
   dae26:	d807      	bhi.n	dae38 <memmove+0x20>
   dae28:	1e43      	subs	r3, r0, #1
   dae2a:	42a1      	cmp	r1, r4
   dae2c:	d008      	beq.n	dae40 <memmove+0x28>
   dae2e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dae32:	f803 2f01 	strb.w	r2, [r3, #1]!
   dae36:	e7f8      	b.n	dae2a <memmove+0x12>
   dae38:	4402      	add	r2, r0
   dae3a:	4601      	mov	r1, r0
   dae3c:	428a      	cmp	r2, r1
   dae3e:	d100      	bne.n	dae42 <memmove+0x2a>
   dae40:	bd10      	pop	{r4, pc}
   dae42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dae46:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dae4a:	e7f7      	b.n	dae3c <memmove+0x24>

000dae4c <memset>:
   dae4c:	4402      	add	r2, r0
   dae4e:	4603      	mov	r3, r0
   dae50:	4293      	cmp	r3, r2
   dae52:	d100      	bne.n	dae56 <memset+0xa>
   dae54:	4770      	bx	lr
   dae56:	f803 1b01 	strb.w	r1, [r3], #1
   dae5a:	e7f9      	b.n	dae50 <memset+0x4>

000dae5c <srand>:
   dae5c:	b538      	push	{r3, r4, r5, lr}
   dae5e:	4b0d      	ldr	r3, [pc, #52]	; (dae94 <srand+0x38>)
   dae60:	681d      	ldr	r5, [r3, #0]
   dae62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dae64:	4604      	mov	r4, r0
   dae66:	b97b      	cbnz	r3, dae88 <srand+0x2c>
   dae68:	2018      	movs	r0, #24
   dae6a:	f7fd fca7 	bl	d87bc <malloc>
   dae6e:	4a0a      	ldr	r2, [pc, #40]	; (dae98 <srand+0x3c>)
   dae70:	4b0a      	ldr	r3, [pc, #40]	; (dae9c <srand+0x40>)
   dae72:	63a8      	str	r0, [r5, #56]	; 0x38
   dae74:	e9c0 2300 	strd	r2, r3, [r0]
   dae78:	4b09      	ldr	r3, [pc, #36]	; (daea0 <srand+0x44>)
   dae7a:	6083      	str	r3, [r0, #8]
   dae7c:	230b      	movs	r3, #11
   dae7e:	8183      	strh	r3, [r0, #12]
   dae80:	2201      	movs	r2, #1
   dae82:	2300      	movs	r3, #0
   dae84:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dae88:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dae8a:	2200      	movs	r2, #0
   dae8c:	611c      	str	r4, [r3, #16]
   dae8e:	615a      	str	r2, [r3, #20]
   dae90:	bd38      	pop	{r3, r4, r5, pc}
   dae92:	bf00      	nop
   dae94:	2003e198 	.word	0x2003e198
   dae98:	abcd330e 	.word	0xabcd330e
   dae9c:	e66d1234 	.word	0xe66d1234
   daea0:	0005deec 	.word	0x0005deec

000daea4 <strcmp>:
   daea4:	f810 2b01 	ldrb.w	r2, [r0], #1
   daea8:	f811 3b01 	ldrb.w	r3, [r1], #1
   daeac:	2a01      	cmp	r2, #1
   daeae:	bf28      	it	cs
   daeb0:	429a      	cmpcs	r2, r3
   daeb2:	d0f7      	beq.n	daea4 <strcmp>
   daeb4:	1ad0      	subs	r0, r2, r3
   daeb6:	4770      	bx	lr

000daeb8 <strcpy>:
   daeb8:	4603      	mov	r3, r0
   daeba:	f811 2b01 	ldrb.w	r2, [r1], #1
   daebe:	f803 2b01 	strb.w	r2, [r3], #1
   daec2:	2a00      	cmp	r2, #0
   daec4:	d1f9      	bne.n	daeba <strcpy+0x2>
   daec6:	4770      	bx	lr

000daec8 <strdup>:
   daec8:	4b02      	ldr	r3, [pc, #8]	; (daed4 <strdup+0xc>)
   daeca:	4601      	mov	r1, r0
   daecc:	6818      	ldr	r0, [r3, #0]
   daece:	f000 b803 	b.w	daed8 <_strdup_r>
   daed2:	bf00      	nop
   daed4:	2003e198 	.word	0x2003e198

000daed8 <_strdup_r>:
   daed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   daeda:	4604      	mov	r4, r0
   daedc:	4608      	mov	r0, r1
   daede:	460d      	mov	r5, r1
   daee0:	f000 f80f 	bl	daf02 <strlen>
   daee4:	1c42      	adds	r2, r0, #1
   daee6:	4611      	mov	r1, r2
   daee8:	4620      	mov	r0, r4
   daeea:	9201      	str	r2, [sp, #4]
   daeec:	f7fd fc9e 	bl	d882c <_malloc_r>
   daef0:	4604      	mov	r4, r0
   daef2:	b118      	cbz	r0, daefc <_strdup_r+0x24>
   daef4:	9a01      	ldr	r2, [sp, #4]
   daef6:	4629      	mov	r1, r5
   daef8:	f7ff ff80 	bl	dadfc <memcpy>
   daefc:	4620      	mov	r0, r4
   daefe:	b003      	add	sp, #12
   daf00:	bd30      	pop	{r4, r5, pc}

000daf02 <strlen>:
   daf02:	4603      	mov	r3, r0
   daf04:	f813 2b01 	ldrb.w	r2, [r3], #1
   daf08:	2a00      	cmp	r2, #0
   daf0a:	d1fb      	bne.n	daf04 <strlen+0x2>
   daf0c:	1a18      	subs	r0, r3, r0
   daf0e:	3801      	subs	r0, #1
   daf10:	4770      	bx	lr

000daf12 <strncpy>:
   daf12:	b510      	push	{r4, lr}
   daf14:	3901      	subs	r1, #1
   daf16:	4603      	mov	r3, r0
   daf18:	b132      	cbz	r2, daf28 <strncpy+0x16>
   daf1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daf1e:	f803 4b01 	strb.w	r4, [r3], #1
   daf22:	3a01      	subs	r2, #1
   daf24:	2c00      	cmp	r4, #0
   daf26:	d1f7      	bne.n	daf18 <strncpy+0x6>
   daf28:	441a      	add	r2, r3
   daf2a:	2100      	movs	r1, #0
   daf2c:	4293      	cmp	r3, r2
   daf2e:	d100      	bne.n	daf32 <strncpy+0x20>
   daf30:	bd10      	pop	{r4, pc}
   daf32:	f803 1b01 	strb.w	r1, [r3], #1
   daf36:	e7f9      	b.n	daf2c <strncpy+0x1a>

000daf38 <_strtol_l.isra.0>:
   daf38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daf3c:	4e3a      	ldr	r6, [pc, #232]	; (db028 <_strtol_l.isra.0+0xf0>)
   daf3e:	4686      	mov	lr, r0
   daf40:	468c      	mov	ip, r1
   daf42:	4660      	mov	r0, ip
   daf44:	f81c 4b01 	ldrb.w	r4, [ip], #1
   daf48:	5da5      	ldrb	r5, [r4, r6]
   daf4a:	f015 0508 	ands.w	r5, r5, #8
   daf4e:	d1f8      	bne.n	daf42 <_strtol_l.isra.0+0xa>
   daf50:	2c2d      	cmp	r4, #45	; 0x2d
   daf52:	d133      	bne.n	dafbc <_strtol_l.isra.0+0x84>
   daf54:	f89c 4000 	ldrb.w	r4, [ip]
   daf58:	f04f 0801 	mov.w	r8, #1
   daf5c:	f100 0c02 	add.w	ip, r0, #2
   daf60:	2b00      	cmp	r3, #0
   daf62:	d05c      	beq.n	db01e <_strtol_l.isra.0+0xe6>
   daf64:	2b10      	cmp	r3, #16
   daf66:	d10c      	bne.n	daf82 <_strtol_l.isra.0+0x4a>
   daf68:	2c30      	cmp	r4, #48	; 0x30
   daf6a:	d10a      	bne.n	daf82 <_strtol_l.isra.0+0x4a>
   daf6c:	f89c 0000 	ldrb.w	r0, [ip]
   daf70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   daf74:	2858      	cmp	r0, #88	; 0x58
   daf76:	d14d      	bne.n	db014 <_strtol_l.isra.0+0xdc>
   daf78:	f89c 4001 	ldrb.w	r4, [ip, #1]
   daf7c:	2310      	movs	r3, #16
   daf7e:	f10c 0c02 	add.w	ip, ip, #2
   daf82:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   daf86:	3f01      	subs	r7, #1
   daf88:	2600      	movs	r6, #0
   daf8a:	fbb7 f9f3 	udiv	r9, r7, r3
   daf8e:	4630      	mov	r0, r6
   daf90:	fb03 7a19 	mls	sl, r3, r9, r7
   daf94:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   daf98:	2d09      	cmp	r5, #9
   daf9a:	d818      	bhi.n	dafce <_strtol_l.isra.0+0x96>
   daf9c:	462c      	mov	r4, r5
   daf9e:	42a3      	cmp	r3, r4
   dafa0:	dd24      	ble.n	dafec <_strtol_l.isra.0+0xb4>
   dafa2:	1c75      	adds	r5, r6, #1
   dafa4:	d007      	beq.n	dafb6 <_strtol_l.isra.0+0x7e>
   dafa6:	4581      	cmp	r9, r0
   dafa8:	d31d      	bcc.n	dafe6 <_strtol_l.isra.0+0xae>
   dafaa:	d101      	bne.n	dafb0 <_strtol_l.isra.0+0x78>
   dafac:	45a2      	cmp	sl, r4
   dafae:	db1a      	blt.n	dafe6 <_strtol_l.isra.0+0xae>
   dafb0:	fb00 4003 	mla	r0, r0, r3, r4
   dafb4:	2601      	movs	r6, #1
   dafb6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dafba:	e7eb      	b.n	daf94 <_strtol_l.isra.0+0x5c>
   dafbc:	2c2b      	cmp	r4, #43	; 0x2b
   dafbe:	bf08      	it	eq
   dafc0:	f89c 4000 	ldrbeq.w	r4, [ip]
   dafc4:	46a8      	mov	r8, r5
   dafc6:	bf08      	it	eq
   dafc8:	f100 0c02 	addeq.w	ip, r0, #2
   dafcc:	e7c8      	b.n	daf60 <_strtol_l.isra.0+0x28>
   dafce:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dafd2:	2d19      	cmp	r5, #25
   dafd4:	d801      	bhi.n	dafda <_strtol_l.isra.0+0xa2>
   dafd6:	3c37      	subs	r4, #55	; 0x37
   dafd8:	e7e1      	b.n	daf9e <_strtol_l.isra.0+0x66>
   dafda:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dafde:	2d19      	cmp	r5, #25
   dafe0:	d804      	bhi.n	dafec <_strtol_l.isra.0+0xb4>
   dafe2:	3c57      	subs	r4, #87	; 0x57
   dafe4:	e7db      	b.n	daf9e <_strtol_l.isra.0+0x66>
   dafe6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dafea:	e7e4      	b.n	dafb6 <_strtol_l.isra.0+0x7e>
   dafec:	1c73      	adds	r3, r6, #1
   dafee:	d106      	bne.n	daffe <_strtol_l.isra.0+0xc6>
   daff0:	2322      	movs	r3, #34	; 0x22
   daff2:	f8ce 3000 	str.w	r3, [lr]
   daff6:	4638      	mov	r0, r7
   daff8:	b942      	cbnz	r2, db00c <_strtol_l.isra.0+0xd4>
   daffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daffe:	f1b8 0f00 	cmp.w	r8, #0
   db002:	d000      	beq.n	db006 <_strtol_l.isra.0+0xce>
   db004:	4240      	negs	r0, r0
   db006:	2a00      	cmp	r2, #0
   db008:	d0f7      	beq.n	daffa <_strtol_l.isra.0+0xc2>
   db00a:	b10e      	cbz	r6, db010 <_strtol_l.isra.0+0xd8>
   db00c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   db010:	6011      	str	r1, [r2, #0]
   db012:	e7f2      	b.n	daffa <_strtol_l.isra.0+0xc2>
   db014:	2430      	movs	r4, #48	; 0x30
   db016:	2b00      	cmp	r3, #0
   db018:	d1b3      	bne.n	daf82 <_strtol_l.isra.0+0x4a>
   db01a:	2308      	movs	r3, #8
   db01c:	e7b1      	b.n	daf82 <_strtol_l.isra.0+0x4a>
   db01e:	2c30      	cmp	r4, #48	; 0x30
   db020:	d0a4      	beq.n	daf6c <_strtol_l.isra.0+0x34>
   db022:	230a      	movs	r3, #10
   db024:	e7ad      	b.n	daf82 <_strtol_l.isra.0+0x4a>
   db026:	bf00      	nop
   db028:	000dbbf3 	.word	0x000dbbf3

000db02c <strtol>:
   db02c:	4613      	mov	r3, r2
   db02e:	460a      	mov	r2, r1
   db030:	4601      	mov	r1, r0
   db032:	4802      	ldr	r0, [pc, #8]	; (db03c <strtol+0x10>)
   db034:	6800      	ldr	r0, [r0, #0]
   db036:	f7ff bf7f 	b.w	daf38 <_strtol_l.isra.0>
   db03a:	bf00      	nop
   db03c:	2003e198 	.word	0x2003e198

000db040 <dynalib_user>:
   db040:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   db050:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   db060:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   db070:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   db080:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   db090:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   db0a0:	69677261 4f00676e 6556206e 6c636968     arging.On Vehicl
   db0b0:	77502065 664f0072 65562066 6c636968     e Pwr.Off Vehicl
   db0c0:	77502065 61460072 00746c75 6f636944     e Pwr.Fault.Dico
   db0d0:	63656e6e 00646574 44206f4e 00617461     nnected.No Data.
   db0e0:	70736552 65736e6f 63655220 65766965     Response Receive
   db0f0:	6e550064 776f6e6b 6572206e 6e6f7073     d.Unknown respon
   db100:	72206573 76656365 20646569 55006925     se recevied %i.U
   db110:	6f646962 48207374 006b6f6f 20746553     bidots Hook.Set 
   db120:	62726556 2065736f 65646f4d 43003000     Verbose Mode.0.C
   db130:	7261656c 56206465 6f627265 4d206573     leared Verbose M
   db140:	0065646f 312e3225 54552066 69540043     ode.%2.1f UTC.Ti
   db150:	7a20656d 20656e6f 7366666f 25207465     me zone offset %
   db160:	69540069 5300656d 6c706d61 6e492065     i.Time.Sample In
   db170:	76726574 69206c61 6f6e2073 69252077     terval is now %i
   db180:	6e696d20 73657475 63227b00 6e696261      minutes.{"cabin
   db190:	253a2254 66322e34 7622202c 54746e65     T":%4.2f, "ventT
   db1a0:	34253a22 2c66322e 756f2220 64697374     ":%4.2f, "outsid
   db1b0:	3a225465 322e3425 22202c66 74746162     eT":%4.2f, "batt
   db1c0:	22797265 2c69253a 6b222020 22317965     ery":%i,  "key1"
   db1d0:	7325223a 22202c22 65736572 3a227374     :"%s", "resets":
   db1e0:	202c6925 656c6122 22737472 2c69253a     %i, "alerts":%i,
   db1f0:	69742220 7473656d 22706d61 756c253a      "timestamp":%lu
   db200:	2c303030 616c2220 253a2274 22202c66     000, "lat":%f, "
   db210:	22676e6c 7d66253a 69625500 73746f64     lng":%f}.Ubidots
   db220:	54424d2d 6f482d41 762d6b6f 61502d32     -MBTA-Hook-v2-Pa
   db230:	00657372 53207325 2e32253a 25256630     rse.%s S:%2.0f%%
   db240:	3a51202c 302e3225 20252566 6f724600     , Q:%2.0f%% .Fro
   db250:	7325206d 206f7420 53007325 65746174     m %s to %s.State
   db260:	61725420 7469736e 006e6f69 432b5441      Transition.AT+C
   db270:	3d4e5546 0a0d3531 6e755200 676e696e     FUN=15...Running
   db280:	69614400 4320796c 6e61656c 44007075     .Daily Cleanup.D
   db290:	6f205453 65736666 32252074 0066312e     ST offset %2.1f.
   db2a0:	6c206f6e 7461636f 206e6f69 65746173     no location sate
   db2b0:	74696c6c 253a7365 6f6c0064 69746163     llites:%d.locati
   db2c0:	203a6e6f 202c6625 61206625 7469746c     on: %f, %f altit
   db2d0:	3a656475 2e342520 206d6631 73206425     ude: %4.1fm %d s
   db2e0:	65747461 6574696c 70670073 34250073     attelites.gps.%4
   db2f0:	2066322e 74530046 206b6375 73206e69     .2f F.Stuck in s
   db300:	7065656c 61747320 53006574 65746174     leep state.State
   db310:	61707300 642f6b72 63697665 65732f65     .spark/device/se
   db320:	6f697373 6e652f6e 72450064 20726f72     ssion/end.Error 
   db330:	74617453 202d2065 65736552 72450074     State - Reset.Er
   db340:	20726f72 74617453 202d2065 65776f50     ror State - Powe
   db350:	79432072 00656c63 2074754f 6d20666f     r Cycle.Out of m
   db360:	726f6d65 636f2079 72727563 73206465     emory occurred s
   db370:	3d657a69 4d006425 726f6d65 6f4c0079     ize=%d.Memory.Lo
   db380:	6e696461 79532067 6d657473 66654420     ading System Def
   db390:	746c7561 69530073 6c616e67 6d615300     aults.Signal.Sam
   db3a0:	49656c70 7265746e 006c6176 65736552     pleInterval.Rese
   db3b0:	756f4374 4300746e 6e696261 706d6554     tCount.CabinTemp
   db3c0:	6e655600 6d655474 754f0070 64697374     .VentTemp.Outsid
   db3d0:	6d655465 65520070 7361656c 74730065     eTemp.Release.st
   db3e0:	4f657461 67684366 656c4100 00737472     ateOfChg.Alerts.
   db3f0:	656d6954 7366664f 42007465 65747461     TimeOffset.Batte
   db400:	6f437972 7865746e 614c0074 50207473     ryContext.Last P
   db410:	7265776f 72006465 74657365 4d415246     owered.resetFRAM
   db420:	6e655300 776f4e64 72655600 65736f62     .SendNow.Verbose
   db430:	646f4d2d 65530065 69542d74 6f7a656d     -Mode.Set-Timezo
   db440:	5300656e 442d7465 664f5453 74657366     ne.Set-DSTOffset
   db450:	61745300 70757472 6d6f4320 74656c70     .Startup Complet
   db460:	00000065                                e...

000db464 <_ZTV8MB85RC64>:
	...
   db46c:	000d414d 000d4161 000d7475 000d750b     MA..aA..ut...u..
   db47c:	000d758d                                .u..

000db480 <_ZTV17PublishQueueAsync>:
	...
   db488:	000d4125 000d4139 000d7b25 000d7cb1     %A..9A..%{...|..
   db498:	000d7c71 000d7c4f 000d7df7 000d7c97     q|..O|...}...|..
   db4a8:	000db054 000db05c 000db061 000db066     T...\...a...f...
   db4b8:	000db06a 000db06f 000db074 000db078     j...o...t...x...
   db4c8:	000db083 000db08e 000db054 000db09a     ........T.......
   db4d8:	000db09e 000db0a7 000db0b6 000db0c6     ................
   db4e8:	000db0cc                                ....

000db4ec <_ZL17FRAMversionNumber>:
   db4ec:	69616602 2064656c 72206f74 20646165     .failed to read 
   db4fc:	41676572 3d726464 78323025 756f6320     regAddr=%02x cou
   db50c:	253d746e 61660075 64656c69 206f7420     nt=%u.failed to 
   db51c:	64616572 67657220 72646441 3230253d     read regAddr=%02
   db52c:	74732078 253d7461 4f460064 64205455     x stat=%d.FOUT d
   db53c:	6e206469 6720746f 4948206f 6e004847     id not go HIGH.n
   db54c:	6420746f 63657465 00646574 6c696166     ot detected.fail
   db55c:	74206465 7277206f 20657469 41676572     ed to write regA
   db56c:	3d726464 78323025 61747320 64253d74     ddr=%02x stat=%d
   db57c:	74657300 20544457 77006425 68637461     .setWDT %d.watch
   db58c:	20676f64 61656c63 20646572 73655262     dog cleared bRes
   db59c:	3d746c75 77006425 68637461 20676f64     ult=%d.watchdog 
   db5ac:	20746573 72756f66 73636553 2064253d     set fourSecs=%d 
   db5bc:	73655262 3d746c75 57006425 48435441     bResult=%d.WATCH
   db5cc:	00474f44 50454544 574f505f 445f5245     DOG.DEEP_POWER_D
   db5dc:	004e574f 4e554f43 574f4454 49545f4e     OWN.COUNTDOWN_TI
   db5ec:	0052454d 52414c41 6166004d 72756c69     MER.ALARM.failur
   db5fc:	6e692065 64707520 57657461 52656b61     e in updateWakeR
   db60c:	6f736165 6425206e 6b617700 65722065     eason %d.wake re
   db61c:	6e6f7361 25203d20 61660073 72756c69     ason = %s.failur
   db62c:	6e692065 74657320 6e756f43 776f6474     e in setCountdow
   db63c:	6d69546e 25207265 61660064 72756c69     nTimer %d.failur
   db64c:	6e692065 65656420 776f5070 6f447265     e in deepPowerDo
   db65c:	25206e77 45520064 4c535f47 5f504545     wn %d.REG_SLEEP_
   db66c:	4c525443 2578303d 64007832 276e6469     CTRL=0x%2x.didn'
   db67c:	6f702074 20726577 6e776f64 34302500     t power down.%04
   db68c:	30252d64 252d6432 20643230 64323025     d-%02d-%02d %02d
   db69c:	3230253a 30253a64 67006432 74527465     :%02d:%02d.getRt
   db6ac:	54734163 7325206d 74657300 73797320     cAsTm %s.set sys
   db6bc:	206d6574 636f6c63 7266206b 52206d6f     tem clock from R
   db6cc:	25204354 61660073 64656c69 206f7420     TC %s.failed to 
   db6dc:	65746564 41207463 30383142 65730035     detect AB1805.se
   db6ec:	63745274 6d547341 00732520 6c696166     tRtcAsTm %s.fail
   db6fc:	20657275 73206e69 74527465 6f724663     ure in setRtcFro
   db70c:	206d546d 73006425 52207465 66204354     mTm %d.set RTC f
   db71c:	206d6f72 756f6c63 73252064 70706100     rom cloud %s.app
   db72c:	3162612e 00353038                       .ab1805.

000db734 <_ZTV6AB1805>:
	...
   db73c:	000d5945 000d5947 000d5fbd 000d6043     EY..GY..._..C`..
   db74c:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   db75c:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   db76c:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   db77c:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
   db78c:	003e7525 65737341 61725474 72656b63     %u>.AssetTracker
   db79c:	00000000                                ....

000db7a0 <_ZTVN8particle11SPISettingsE>:
	...
   db7a8:	000d6479 000d644d 000d644f              yd..Md..Od..

000db7b4 <_ZTV12AssetTracker>:
	...
   db7bc:	000d6835 000d6865 fffffe14 00000000     5h..eh..........
   db7cc:	000d685d 000d687b                       ]h..{h..

000db7d4 <_ZTV16AssetTrackerBase>:
	...
   db7dc:	000d67dd 000d681d                       .g...h..

000db7e4 <_ZTV13LegacyAdapter>:
	...
   db7ec:	000d6999 000d699b 4d525047 4e470043     .i...i..GPRMC.GN
   db7fc:	00434d52 47475047 4e470041 00414747     RMC.GPGGA.GNGGA.
   db80c:	2e707061 6f6c6275 00000078              app.ublox...

000db818 <_ZTV6LIS3DH>:
	...
   db828:	000d738d 000d40a5 000d40a5              .s...@...@..

000db834 <_ZTV9LIS3DHSPI>:
	...
   db83c:	000d72a9 000d72ab 000d73af 000d72e9     .r...r...s...r..
   db84c:	000d732b 000d72b9 000d72d3 74697277     +s...r...r..writ
   db85c:	74614465 61662061 64656c69 72756420     eData failed dur
   db86c:	20676e69 73617265 72662065 64416d61     ing erase framAd
   db87c:	253d7264 00000075                       dr=%u...

000db884 <_ZTV6MB85RC>:
	...
   db88c:	000d73c5 000d73c7 000d7475 000d750b     .s...s..ut...u..
   db89c:	000d758d 6c627550 51687369 65756575     .u..PublishQueue
   db8ac:	6e797341 75710063 69657565 6520676e     Async.queueing e
   db8bc:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   db8cc:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   db8dc:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   db8ec:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   db8fc:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   db90c:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   db91c:	75732064 73656363 6c756673 7000796c     d successfully.p
   db92c:	696c6275 64656873 69616620 2c64656c     ublished failed,
   db93c:	6c697720 6572206c 20797274 25206e69      will retry in %
   db94c:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000db95c <_ZTV21PublishQueueAsyncBase>:
	...
   db96c:	000d7b25 000d40a5 000d40a5 000d40a5     %{...@...@...@..
   db97c:	000d40a5 000d40a5                       .@...@..

000db984 <_ZTV25PublishQueueAsyncRetained>:
	...
   db98c:	000d7c0d 000d7c21 000d7b25 000d7cb1     .|..!|..%{...|..
   db99c:	000d7c71 000d7c4f 000d7df7 000d7c97     q|..O|...}...|..

000db9ac <_ZTVN5spark13CellularClassE>:
	...
   db9b4:	000d895f 000d8955 000d894b 000d8901     _...U...K.......
   db9c4:	000d893f 000d8933 000d8927 000d891f     ?...3...'.......
   db9d4:	000d8915 000d890b 000d9415              ............

000db9e0 <_ZTV14CellularSignal>:
	...
   db9e8:	000d8a0d 000d8a13 000d8a0f 000d8a21     ............!...
   db9f8:	000d8a55 000d8a81 000d8ab5 000d8b05     U...............
   dba08:	fffffffc 00000000 000d8b2b              ........+...

000dba14 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dba1c:	000d8b4b 000d8b51 000d8b8f 000d8b5f     K...Q......._...
   dba2c:	000d8b4d                                M...

000dba30 <_ZTVN5spark13EthernetClassE>:
	...
   dba38:	000d917f 000d9175 000d916b 000d9161     ....u...k...a...
   dba48:	000d9155 000d9149 000d913d 000d9135     U...I...=...5...
   dba58:	000d912b 000d9121 000d9415              +...!.......

000dba64 <_ZTV7TwoWire>:
	...
   dba6c:	000d919d 000d91e7 000d91bf 000d919f     ................
   dba7c:	000d91c7 000d91cf 000d91d7 000d91df     ................

000dba8c <_ZTV9IPAddress>:
	...
   dba94:	000d92c9 000d92b9 000d92bb 00707061     ............app.

000dbaa4 <_ZTVN5spark12NetworkClassE>:
	...
   dbaac:	000d93ad 000d93b7 000d93c1 000d93cb     ................
   dbabc:	000d93d5 000d93e1 000d93ed 000d93f9     ................
   dbacc:	000d9401 000d940b 000d9415              ............

000dbad8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dbad8:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   dbae8:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   dbaf8:	72756769 6f697461 7369206e 766e6920     iguration is inv
   dbb08:	64696c61 005a002e 33302b25 30253a64     alid..Z.%+03d:%0
   dbb18:	25007532 6d252d59 5464252d 253a4825     2u.%Y-%m-%dT%H:%
   dbb28:	53253a4d 61007a25 69746373 0000656d     M:%S%z.asctime..

000dbb38 <_ZTV11USARTSerial>:
	...
   dbb40:	000d9f91 000d9ffd 000d9fd5 000d94fd     ................
   dbb50:	000d9fa5 000d9fc1 000d9fb3 000d9fcf     ................
   dbb60:	000d9f93 000d9f97                       ........

000dbb68 <_ZTV9USBSerial>:
	...
   dbb70:	000da091 000da0f9 000da0cf 000d94fd     ................
   dbb80:	000da0c1 000da093 000da0a3 000da0f3     ................
   dbb90:	000da0b3 000da08d                       ........

000dbb98 <_ZSt7nothrow>:
   dbb98:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dbba8:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dbbb9 <day_name.6145>:
   dbbb9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dbbc9:	61536972                                 riSat

000dbbce <mon_name.6146>:
   dbbce:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dbbde:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dbbee:	63654476                                vDec

000dbbf2 <_ctype_>:
   dbbf2:	20202000 20202020 28282020 20282828     .         ((((( 
   dbc02:	20202020 20202020 20202020 20202020                     
   dbc12:	10108820 10101010 10101010 10101010      ...............
   dbc22:	04040410 04040404 10040404 10101010     ................
   dbc32:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dbc42:	01010101 01010101 01010101 10101010     ................
   dbc52:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dbc62:	02020202 02020202 02020202 10101010     ................
   dbc72:	00000020 00000000 00000000 00000000      ...............
	...

000dbcf3 <link_const_variable_data_end>:
	...

000dbcf4 <link_constructors_location>:
   dbcf4:	000d57e9 	.word	0x000d57e9
   dbcf8:	000d643d 	.word	0x000d643d
   dbcfc:	000d705d 	.word	0x000d705d
   dbd00:	000d8089 	.word	0x000d8089
   dbd04:	000d8099 	.word	0x000d8099
   dbd08:	000d88d9 	.word	0x000d88d9
   dbd0c:	000d89dd 	.word	0x000d89dd
   dbd10:	000d9189 	.word	0x000d9189
   dbd14:	000d939d 	.word	0x000d939d
   dbd18:	000d94e9 	.word	0x000d94e9
   dbd1c:	000d961d 	.word	0x000d961d
   dbd20:	000d9b19 	.word	0x000d9b19
   dbd24:	000d9f7d 	.word	0x000d9f7d

000dbd28 <link_constructors_end>:
	...
