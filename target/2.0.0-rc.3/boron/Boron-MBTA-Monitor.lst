
/Users/chipmc/Documents/Maker/Particle/Projects/Boron-MBTA-Monitor/target/2.0.0-rc.3/boron/Boron-MBTA-Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000078d0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       0000081c  2003f400  000db8f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000011c  2003e110  000dc10c  0001e110  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005c4  2003e230  2003e230  0002e230  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc228  000dc228  0002c228  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc254  000dc254  0002c254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002517d2  00000000  00000000  0002c258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002392e  00000000  00000000  0027da2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004032a  00000000  00000000  002a1358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000039e0  00000000  00000000  002e1682  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000b2a0  00000000  00000000  002e5062  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00046ec3  00000000  00000000  002f0302  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005bdf5  00000000  00000000  003371c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012789f  00000000  00000000  00392fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a454  00000000  00000000  004ba85c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fd3d 	bl	daab0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fd5f 	bl	dab00 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e110 	.word	0x2003e110
   d404c:	000dc10c 	.word	0x000dc10c
   d4050:	2003e22c 	.word	0x2003e22c
   d4054:	2003e230 	.word	0x2003e230
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fe8b 	bl	d9d7c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db8b0 	.word	0x000db8b0
   d4080:	000db8e8 	.word	0x000db8e8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b998 	b.w	d53b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fff1 	bl	d5070 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 be35 	b.w	d9d00 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b929 	b.w	d82ec <malloc>

000d409a <_Znaj>:
   d409a:	f004 b927 	b.w	d82ec <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b92d 	b.w	d82fc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ffe4 	bl	d8078 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7cf9 	.word	0x000d7cf9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:

}

void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e3f4 	.word	0x2003e3f4

000d40d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40d4:	b538      	push	{r3, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40da:	b128      	cbz	r0, d40e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40de:	210c      	movs	r1, #12
   d40e0:	f005 ff57 	bl	d9f92 <_ZdlPvj>
            wakeupSource = next;
   d40e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d40e6:	e7f8      	b.n	d40da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd38      	pop	{r3, r4, r5, pc}

000d40ec <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40f2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40f4:	d904      	bls.n	d4100 <nrf_gpio_pin_port_decode+0x14>
   d40f6:	4a07      	ldr	r2, [pc, #28]	; (d4114 <nrf_gpio_pin_port_decode+0x28>)
   d40f8:	2100      	movs	r1, #0
   d40fa:	200a      	movs	r0, #10
   d40fc:	f003 ffbc 	bl	d8078 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4104:	bf83      	ittte	hi
   d4106:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d410a:	4803      	ldrhi	r0, [pc, #12]	; (d4118 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d410c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d410e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4112:	bd10      	pop	{r4, pc}
   d4114:	000d7cf9 	.word	0x000d7cf9
   d4118:	50000300 	.word	0x50000300

000d411c <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
   d411c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d411e:	4904      	ldr	r1, [pc, #16]	; (d4130 <_Z9resetFRAM6String+0x14>)
   d4120:	f005 fa41 	bl	d95a6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4124:	b118      	cbz	r0, d412e <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
   d4126:	4803      	ldr	r0, [pc, #12]	; (d4134 <_Z9resetFRAM6String+0x18>)
   d4128:	f002 fb1c 	bl	d6764 <_ZN6MB85RC5eraseEv>
    return 1;
   d412c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d412e:	bd08      	pop	{r3, pc}
   d4130:	000dad4c 	.word	0x000dad4c
   d4134:	2003e31c 	.word	0x2003e31c

000d4138 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
   d4138:	b508      	push	{r3, lr}
   d413a:	4904      	ldr	r1, [pc, #16]	; (d414c <_Z7sendNow6String+0x14>)
   d413c:	f005 fa33 	bl	d95a6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4140:	b118      	cbz	r0, d414a <_Z7sendNow6String+0x12>
  {
    state = MEASURING_STATE;
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_Z7sendNow6String+0x18>)
   d4144:	2203      	movs	r2, #3
   d4146:	701a      	strb	r2, [r3, #0]
    return 1;
   d4148:	2001      	movs	r0, #1
  }
  else return 0;
}
   d414a:	bd08      	pop	{r3, pc}
   d414c:	000dad4c 	.word	0x000dad4c
   d4150:	2003e39c 	.word	0x2003e39c

000d4154 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4154:	b510      	push	{r4, lr}
   d4156:	4b03      	ldr	r3, [pc, #12]	; (d4164 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4158:	6003      	str	r3, [r0, #0]
   d415a:	4604      	mov	r4, r0
   d415c:	f003 fb10 	bl	d7780 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4160:	4620      	mov	r0, r4
   d4162:	bd10      	pop	{r4, pc}
   d4164:	000db150 	.word	0x000db150

000d4168 <_ZN17PublishQueueAsyncD0Ev>:
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
   d416c:	f7ff fff2 	bl	d4154 <_ZN17PublishQueueAsyncD1Ev>
   d4170:	4620      	mov	r0, r4
   d4172:	2138      	movs	r1, #56	; 0x38
   d4174:	f005 ff0d 	bl	d9f92 <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d417c:	b510      	push	{r4, lr}
   d417e:	4b03      	ldr	r3, [pc, #12]	; (d418c <_ZN8MB85RC64D1Ev+0x10>)
   d4180:	6003      	str	r3, [r0, #0]
   d4182:	4604      	mov	r4, r0
   d4184:	f002 face 	bl	d6724 <_ZN6MB85RCD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}
   d418c:	000db134 	.word	0x000db134

000d4190 <_ZN8MB85RC64D0Ev>:
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	f7ff fff2 	bl	d417c <_ZN8MB85RC64D1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2110      	movs	r1, #16
   d419c:	f005 fef9 	bl	d9f92 <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a8:	6800      	ldr	r0, [r0, #0]
   d41aa:	b108      	cbz	r0, d41b0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41ac:	f004 f8a6 	bl	d82fc <free>
class SystemClass {
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d41b4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41b6:	f004 f801 	bl	d81bc <spark_cloud_flag_connected>
        if (!connected()) {
   d41ba:	b120      	cbz	r0, d41c6 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d41bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d41c0:	2000      	movs	r0, #0
   d41c2:	f004 b81b 	b.w	d81fc <spark_sync_time>
    }
   d41c6:	bd08      	pop	{r3, pc}

000d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d41c8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41ca:	2000      	movs	r0, #0
   d41cc:	f004 f81e 	bl	d820c <spark_sync_time_pending>
   d41d0:	b128      	cbz	r0, d41de <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41d2:	f003 fff3 	bl	d81bc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41d6:	f080 0001 	eor.w	r0, r0, #1
   d41da:	b2c0      	uxtb	r0, r0
    }
   d41dc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41de:	2001      	movs	r0, #1
   d41e0:	e7fc      	b.n	d41dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41e2:	2300      	movs	r3, #0
   d41e4:	2204      	movs	r2, #4
   d41e6:	f003 bfc9 	b.w	d817c <spark_variable>

000d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>:
	}

	/**
	 * @brief Gets the number of satellites found
	 */
	uint8_t getSatellites() const {
   d41ea:	b510      	push	{r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ec:	2100      	movs	r1, #0
   d41ee:	4604      	mov	r4, r0
   d41f0:	4608      	mov	r0, r1
   d41f2:	f003 fd29 	bl	d7c48 <os_thread_scheduling>
	/**
	 * @brief Get the number of satellites
	 */
	TinyGPSInteger getSatellites() const {
	    SINGLE_THREADED_BLOCK() {
	    	return satellites;
   d41f6:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41fa:	2100      	movs	r1, #0
   d41fc:	2001      	movs	r0, #1
   d41fe:	f003 fd23 	bl	d7c48 <os_thread_scheduling>
		return (uint8_t) gpsData.getSatellites().value();
	}
   d4202:	b2e0      	uxtb	r0, r4
   d4204:	bd10      	pop	{r4, pc}

000d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>:
	float readLatDeg(void) const {
   d4206:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d4208:	2100      	movs	r1, #0
   d420a:	b08f      	sub	sp, #60	; 0x3c
   d420c:	4604      	mov	r4, r0
   d420e:	4608      	mov	r0, r1
   d4210:	f003 fd1a 	bl	d7c48 <os_thread_scheduling>
	    	return location;
   d4214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4216:	466d      	mov	r5, sp
   d4218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d421c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4222:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4226:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d422a:	2100      	movs	r1, #0
   d422c:	2001      	movs	r0, #1
   d422e:	f003 fd0b 	bl	d7c48 <os_thread_scheduling>
		return (float) gpsData.getLocation().lat();
   d4232:	4668      	mov	r0, sp
   d4234:	f001 fe5c 	bl	d5ef0 <_ZN15TinyGPSLocation3latEv>
   d4238:	ec51 0b10 	vmov	r0, r1, d0
   d423c:	f006 fb66 	bl	da90c <__aeabi_d2f>
	}
   d4240:	ee00 0a10 	vmov	s0, r0
   d4244:	b00f      	add	sp, #60	; 0x3c
   d4246:	bd30      	pop	{r4, r5, pc}

000d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>:
	float readLonDeg(void) const {
   d4248:	b530      	push	{r4, r5, lr}
        os_thread_scheduling(false, NULL);
   d424a:	2100      	movs	r1, #0
   d424c:	b08f      	sub	sp, #60	; 0x3c
   d424e:	4604      	mov	r4, r0
   d4250:	4608      	mov	r0, r1
   d4252:	f003 fcf9 	bl	d7c48 <os_thread_scheduling>
   d4256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4258:	466d      	mov	r5, sp
   d425a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4264:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4268:	e885 0003 	stmia.w	r5, {r0, r1}
        os_thread_scheduling(true, NULL);
   d426c:	2100      	movs	r1, #0
   d426e:	2001      	movs	r0, #1
   d4270:	f003 fcea 	bl	d7c48 <os_thread_scheduling>
		return (float) gpsData.getLocation().lng();
   d4274:	4668      	mov	r0, sp
   d4276:	f001 fe5f 	bl	d5f38 <_ZN15TinyGPSLocation3lngEv>
   d427a:	ec51 0b10 	vmov	r0, r1, d0
   d427e:	f006 fb45 	bl	da90c <__aeabi_d2f>
	}
   d4282:	ee00 0a10 	vmov	s0, r0
   d4286:	b00f      	add	sp, #60	; 0x3c
   d4288:	bd30      	pop	{r4, r5, pc}

000d428a <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d428a:	2000      	movs	r0, #0
   d428c:	f003 bd5c 	b.w	d7d48 <hal_timer_millis>

000d4290 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4290:	b40e      	push	{r1, r2, r3}
   d4292:	b510      	push	{r4, lr}
   d4294:	b08d      	sub	sp, #52	; 0x34
   d4296:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4298:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d429a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d429e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d42a0:	2300      	movs	r3, #0
   d42a2:	2020      	movs	r0, #32
   d42a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d42a8:	e9cd 4200 	strd	r4, r2, [sp]
   d42ac:	201e      	movs	r0, #30
   d42ae:	aa04      	add	r2, sp, #16
   d42b0:	f003 feea 	bl	d8088 <log_message_v>
}
   d42b4:	b00d      	add	sp, #52	; 0x34
   d42b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d42ba:	b003      	add	sp, #12
   d42bc:	4770      	bx	lr
	...

000d42c0 <fastPinGetPinmap>:

/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

inline const Hal_Pin_Info* fastPinGetPinmap() {
   d42c0:	b538      	push	{r3, r4, r5, lr}
    static Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42c2:	4c0a      	ldr	r4, [pc, #40]	; (d42ec <fastPinGetPinmap+0x2c>)
   d42c4:	4d0a      	ldr	r5, [pc, #40]	; (d42f0 <fastPinGetPinmap+0x30>)
   d42c6:	7823      	ldrb	r3, [r4, #0]
   d42c8:	f3bf 8f5b 	dmb	ish
   d42cc:	f013 0f01 	tst.w	r3, #1
   d42d0:	d109      	bne.n	d42e6 <fastPinGetPinmap+0x26>
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fef0 	bl	d40b8 <__cxa_guard_acquire>
   d42d8:	b128      	cbz	r0, d42e6 <fastPinGetPinmap+0x26>
   d42da:	f003 fd4d 	bl	d7d78 <HAL_Pin_Map>
   d42de:	6028      	str	r0, [r5, #0]
   d42e0:	4620      	mov	r0, r4
   d42e2:	f7ff feee 	bl	d40c2 <__cxa_guard_release>
    return pinMap;
}
   d42e6:	6828      	ldr	r0, [r5, #0]
   d42e8:	bd38      	pop	{r3, r4, r5, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e234 	.word	0x2003e234
   d42f0:	2003e238 	.word	0x2003e238

000d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42f6:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42fc:	f88d 3000 	strb.w	r3, [sp]
   d4300:	f88d 5004 	strb.w	r5, [sp, #4]
   d4304:	68e4      	ldr	r4, [r4, #12]
   d4306:	233c      	movs	r3, #60	; 0x3c
   d4308:	47a0      	blx	r4
	}
   d430a:	b003      	add	sp, #12
   d430c:	bd30      	pop	{r4, r5, pc}
	...

000d4310 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4310:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4312:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4314:	b092      	sub	sp, #72	; 0x48
   d4316:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4318:	b97b      	cbnz	r3, d433a <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d431a:	4919      	ldr	r1, [pc, #100]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d431c:	a802      	add	r0, sp, #8
   d431e:	f006 fc25 	bl	dab6c <strcpy>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4322:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4324:	f88d 3000 	strb.w	r3, [sp]
   d4328:	4b16      	ldr	r3, [pc, #88]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d432a:	4917      	ldr	r1, [pc, #92]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432c:	781b      	ldrb	r3, [r3, #0]
   d432e:	4817      	ldr	r0, [pc, #92]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4330:	aa02      	add	r2, sp, #8
   d4332:	f7ff ffdf 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4336:	b012      	add	sp, #72	; 0x48
   d4338:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d433a:	4608      	mov	r0, r1
   d433c:	f006 fb90 	bl	daa60 <atoi>
   d4340:	28c8      	cmp	r0, #200	; 0xc8
   d4342:	d10e      	bne.n	d4362 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4344:	4912      	ldr	r1, [pc, #72]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4346:	a802      	add	r0, sp, #8
   d4348:	f006 fc10 	bl	dab6c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d434c:	f005 fb47 	bl	d99de <_ZN9TimeClass3nowEv>
   d4350:	4b10      	ldr	r3, [pc, #64]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4352:	61d8      	str	r0, [r3, #28]
    systemStatusWriteNeeded = true;
   d4354:	4b10      	ldr	r3, [pc, #64]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4356:	2201      	movs	r2, #1
   d4358:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d435a:	4b10      	ldr	r3, [pc, #64]	; (d439c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d435c:	2200      	movs	r2, #0
   d435e:	701a      	strb	r2, [r3, #0]
   d4360:	e7df      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4362:	4620      	mov	r0, r4
   d4364:	f006 fb7c 	bl	daa60 <atoi>
   d4368:	28c9      	cmp	r0, #201	; 0xc9
   d436a:	d0eb      	beq.n	d4344 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d436c:	4620      	mov	r0, r4
   d436e:	f006 fb77 	bl	daa60 <atoi>
   d4372:	4a0b      	ldr	r2, [pc, #44]	; (d43a0 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4374:	4603      	mov	r3, r0
   d4376:	2140      	movs	r1, #64	; 0x40
   d4378:	a802      	add	r0, sp, #8
   d437a:	f003 ffd7 	bl	d832c <snprintf>
   d437e:	e7d0      	b.n	d4322 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4380:	000dad8c 	.word	0x000dad8c
   d4384:	2003e28c 	.word	0x2003e28c
   d4388:	000dadc3 	.word	0x000dadc3
   d438c:	2003e340 	.word	0x2003e340
   d4390:	000dad94 	.word	0x000dad94
   d4394:	2003e3a0 	.word	0x2003e3a0
   d4398:	2003e3c0 	.word	0x2003e3c0
   d439c:	2003e2fe 	.word	0x2003e2fe
   d43a0:	000dada6 	.word	0x000dada6

000d43a4 <_Z12hardResetNow6String>:
{
   d43a4:	b513      	push	{r0, r1, r4, lr}
   d43a6:	490d      	ldr	r1, [pc, #52]	; (d43dc <_Z12hardResetNow6String+0x38>)
   d43a8:	f005 f8fd 	bl	d95a6 <_ZNK6String6equalsEPKc>
   d43ac:	2400      	movs	r4, #0
  if (command == "1")
   d43ae:	b198      	cbz	r0, d43d8 <_Z12hardResetNow6String+0x34>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d43b0:	4b0b      	ldr	r3, [pc, #44]	; (d43e0 <_Z12hardResetNow6String+0x3c>)
   d43b2:	f88d 4000 	strb.w	r4, [sp]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	4a0a      	ldr	r2, [pc, #40]	; (d43e4 <_Z12hardResetNow6String+0x40>)
   d43ba:	490b      	ldr	r1, [pc, #44]	; (d43e8 <_Z12hardResetNow6String+0x44>)
   d43bc:	480b      	ldr	r0, [pc, #44]	; (d43ec <_Z12hardResetNow6String+0x48>)
   d43be:	f7ff ff99 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d43c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d43c6:	f003 fff9 	bl	d83bc <delay>
    rtc.setAlarm(10);
   d43ca:	4809      	ldr	r0, [pc, #36]	; (d43f0 <_Z12hardResetNow6String+0x4c>)
   d43cc:	4623      	mov	r3, r4
   d43ce:	2201      	movs	r2, #1
   d43d0:	210a      	movs	r1, #10
   d43d2:	f002 fed5 	bl	d7180 <_ZN8MCP794108setAlarmEibi>
   d43d6:	2001      	movs	r0, #1
}
   d43d8:	b002      	add	sp, #8
   d43da:	bd10      	pop	{r4, pc}
   d43dc:	000dad4c 	.word	0x000dad4c
   d43e0:	2003e28c 	.word	0x2003e28c
   d43e4:	000dadd0 	.word	0x000dadd0
   d43e8:	000db028 	.word	0x000db028
   d43ec:	2003e340 	.word	0x2003e340
   d43f0:	2003e37c 	.word	0x2003e37c

000d43f4 <_Z14setverboseMode6String>:
  currentCountsWriteNeeded=true;
  systemStatusWriteNeeded=true;
}

int setverboseMode(String command) // Function to force sending data in current hour
{
   d43f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43f6:	4919      	ldr	r1, [pc, #100]	; (d445c <_Z14setverboseMode6String+0x68>)
   d43f8:	4604      	mov	r4, r0
   d43fa:	f005 f8d4 	bl	d95a6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43fe:	4605      	mov	r5, r0
   d4400:	b1b0      	cbz	r0, d4430 <_Z14setverboseMode6String+0x3c>
  {
    sysStatus.verboseMode = true;
   d4402:	4b17      	ldr	r3, [pc, #92]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d4404:	2401      	movs	r4, #1
   d4406:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d4408:	4b16      	ldr	r3, [pc, #88]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d440a:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d440c:	f003 fed6 	bl	d81bc <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d4410:	b910      	cbnz	r0, d4418 <_Z14setverboseMode6String+0x24>
    return 1;
   d4412:	2001      	movs	r0, #1
    systemStatusWriteNeeded = true;
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
    return 1;
  }
  else return 0;
}
   d4414:	b003      	add	sp, #12
   d4416:	bd30      	pop	{r4, r5, pc}
   d4418:	2300      	movs	r3, #0
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE);
   d441a:	f88d 3000 	strb.w	r3, [sp]
   d441e:	4b12      	ldr	r3, [pc, #72]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4420:	4a12      	ldr	r2, [pc, #72]	; (d446c <_Z14setverboseMode6String+0x78>)
   d4422:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d4424:	4912      	ldr	r1, [pc, #72]	; (d4470 <_Z14setverboseMode6String+0x7c>)
   d4426:	4813      	ldr	r0, [pc, #76]	; (d4474 <_Z14setverboseMode6String+0x80>)
   d4428:	f7ff ff64 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d442c:	4620      	mov	r0, r4
   d442e:	e7f1      	b.n	d4414 <_Z14setverboseMode6String+0x20>
   d4430:	4911      	ldr	r1, [pc, #68]	; (d4478 <_Z14setverboseMode6String+0x84>)
   d4432:	4620      	mov	r0, r4
   d4434:	f005 f8b7 	bl	d95a6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4438:	2800      	cmp	r0, #0
   d443a:	d0eb      	beq.n	d4414 <_Z14setverboseMode6String+0x20>
    sysStatus.verboseMode = false;
   d443c:	4b08      	ldr	r3, [pc, #32]	; (d4460 <_Z14setverboseMode6String+0x6c>)
   d443e:	711d      	strb	r5, [r3, #4]
    systemStatusWriteNeeded = true;
   d4440:	4b08      	ldr	r3, [pc, #32]	; (d4464 <_Z14setverboseMode6String+0x70>)
   d4442:	2401      	movs	r4, #1
   d4444:	701c      	strb	r4, [r3, #0]
   d4446:	f003 feb9 	bl	d81bc <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE);
   d444a:	2800      	cmp	r0, #0
   d444c:	d0e1      	beq.n	d4412 <_Z14setverboseMode6String+0x1e>
   d444e:	4b06      	ldr	r3, [pc, #24]	; (d4468 <_Z14setverboseMode6String+0x74>)
   d4450:	f88d 5000 	strb.w	r5, [sp]
   d4454:	781b      	ldrb	r3, [r3, #0]
   d4456:	4a09      	ldr	r2, [pc, #36]	; (d447c <_Z14setverboseMode6String+0x88>)
   d4458:	e7e4      	b.n	d4424 <_Z14setverboseMode6String+0x30>
   d445a:	bf00      	nop
   d445c:	000dad4c 	.word	0x000dad4c
   d4460:	2003e3a0 	.word	0x2003e3a0
   d4464:	2003e3c0 	.word	0x2003e3c0
   d4468:	2003e28c 	.word	0x2003e28c
   d446c:	000dade8 	.word	0x000dade8
   d4470:	000dae0b 	.word	0x000dae0b
   d4474:	2003e340 	.word	0x2003e340
   d4478:	000dadf9 	.word	0x000dadf9
   d447c:	000dadfb 	.word	0x000dadfb

000d4480 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4484:	b0c8      	sub	sp, #288	; 0x120
   d4486:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
   d4488:	f7ff fe94 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d448c:	f7ff fefd 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4490:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d4494:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d4496:	f247 562f 	movw	r6, #29999	; 0x752f
   d449a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d449c:	f7ff fef5 	bl	d428a <_ZN11SystemClass6millisEv>
   d44a0:	ebb0 0409 	subs.w	r4, r0, r9
   d44a4:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d44a8:	42af      	cmp	r7, r5
   d44aa:	bf08      	it	eq
   d44ac:	42a6      	cmpeq	r6, r4
   d44ae:	d305      	bcc.n	d44bc <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d44b0:	f7ff fe8a 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d44b4:	b910      	cbnz	r0, d44bc <_Z11setTimeZone6String+0x3c>
            spark_process();
   d44b6:	f003 fe71 	bl	d819c <spark_process>
        while (_while() && !_condition()) {
   d44ba:	e7ef      	b.n	d449c <_Z11setTimeZone6String+0x1c>
   d44bc:	f7ff fe84 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44c0:	f8d8 0000 	ldr.w	r0, [r8]
   d44c4:	220a      	movs	r2, #10
   d44c6:	a903      	add	r1, sp, #12
   d44c8:	f006 fc0a 	bl	dace0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d44cc:	f100 030c 	add.w	r3, r0, #12
   d44d0:	b2db      	uxtb	r3, r3
   d44d2:	2b18      	cmp	r3, #24
   d44d4:	d848      	bhi.n	d4568 <_Z11setTimeZone6String+0xe8>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d44d6:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44d8:	ee07 5a90 	vmov	s15, r5
   d44dc:	4b26      	ldr	r3, [pc, #152]	; (d4578 <_Z11setTimeZone6String+0xf8>)
   d44de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44e2:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d44e4:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d44e8:	f005 f910 	bl	d970c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d44ec:	4b23      	ldr	r3, [pc, #140]	; (d457c <_Z11setTimeZone6String+0xfc>)
   d44ee:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d44f0:	f005 fac6 	bl	d9a80 <_ZN9TimeClass5localEv>
   d44f4:	4606      	mov	r6, r0
   d44f6:	f005 fa72 	bl	d99de <_ZN9TimeClass3nowEv>
   d44fa:	1a30      	subs	r0, r6, r0
   d44fc:	f005 fea4 	bl	da248 <__aeabi_i2d>
   d4500:	a31b      	add	r3, pc, #108	; (adr r3, d4570 <_Z11setTimeZone6String+0xf0>)
   d4502:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4506:	f006 f833 	bl	da570 <__aeabi_ddiv>
   d450a:	4a1d      	ldr	r2, [pc, #116]	; (d4580 <_Z11setTimeZone6String+0x100>)
   d450c:	e9cd 0100 	strd	r0, r1, [sp]
   d4510:	210a      	movs	r1, #10
   d4512:	481c      	ldr	r0, [pc, #112]	; (d4584 <_Z11setTimeZone6String+0x104>)
   d4514:	f003 ff0a 	bl	d832c <snprintf>
   d4518:	f003 fe50 	bl	d81bc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d451c:	b310      	cbz	r0, d4564 <_Z11setTimeZone6String+0xe4>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d451e:	462b      	mov	r3, r5
   d4520:	4a19      	ldr	r2, [pc, #100]	; (d4588 <_Z11setTimeZone6String+0x108>)
   d4522:	4d1a      	ldr	r5, [pc, #104]	; (d458c <_Z11setTimeZone6String+0x10c>)
   d4524:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4528:	2600      	movs	r6, #0
   d452a:	a808      	add	r0, sp, #32
   d452c:	f003 fefe 	bl	d832c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d4530:	f88d 6000 	strb.w	r6, [sp]
   d4534:	4916      	ldr	r1, [pc, #88]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4536:	782b      	ldrb	r3, [r5, #0]
   d4538:	4816      	ldr	r0, [pc, #88]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d453a:	aa08      	add	r2, sp, #32
   d453c:	f7ff feda 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d4540:	f005 fa4d 	bl	d99de <_ZN9TimeClass3nowEv>
   d4544:	4602      	mov	r2, r0
   d4546:	17c3      	asrs	r3, r0, #31
   d4548:	a804      	add	r0, sp, #16
   d454a:	f005 f945 	bl	d97d8 <_ZN9TimeClass7timeStrEx>
   d454e:	f88d 6000 	strb.w	r6, [sp]
   d4552:	782b      	ldrb	r3, [r5, #0]
   d4554:	9a04      	ldr	r2, [sp, #16]
   d4556:	490e      	ldr	r1, [pc, #56]	; (d4590 <_Z11setTimeZone6String+0x110>)
   d4558:	480e      	ldr	r0, [pc, #56]	; (d4594 <_Z11setTimeZone6String+0x114>)
   d455a:	f7ff fecb 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d455e:	a804      	add	r0, sp, #16
   d4560:	f004 ffa8 	bl	d94b4 <_ZN6StringD1Ev>
  }

  return 1;
   d4564:	4620      	mov	r0, r4
   d4566:	e000      	b.n	d456a <_Z11setTimeZone6String+0xea>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d4568:	2000      	movs	r0, #0
}
   d456a:	b048      	add	sp, #288	; 0x120
   d456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4570:	00000000 	.word	0x00000000
   d4574:	40ac2000 	.word	0x40ac2000
   d4578:	2003e3a0 	.word	0x2003e3a0
   d457c:	2003e3c0 	.word	0x2003e3c0
   d4580:	000dae10 	.word	0x000dae10
   d4584:	2003e2f4 	.word	0x2003e2f4
   d4588:	000dae1a 	.word	0x000dae1a
   d458c:	2003e28c 	.word	0x2003e28c
   d4590:	000dae2e 	.word	0x000dae2e
   d4594:	2003e340 	.word	0x2003e340

000d4598 <_Z17setSampleInterval6String>:
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

int setSampleInterval(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4598:	b530      	push	{r4, r5, lr}
   d459a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int8_t tempSampleInterval = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d459c:	220a      	movs	r2, #10
   d459e:	6800      	ldr	r0, [r0, #0]
   d45a0:	a903      	add	r1, sp, #12
   d45a2:	f006 fb9d 	bl	dace0 <strtol>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45a6:	b2c3      	uxtb	r3, r0
   d45a8:	1e5a      	subs	r2, r3, #1
   d45aa:	2a3b      	cmp	r2, #59	; 0x3b
   d45ac:	d81f      	bhi.n	d45ee <_Z17setSampleInterval6String+0x56>
  sysStatus.sampleIntervalMin = tempSampleInterval;
  systemStatusWriteNeeded = true;
   d45ae:	4a11      	ldr	r2, [pc, #68]	; (d45f4 <_Z17setSampleInterval6String+0x5c>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b0:	4d11      	ldr	r5, [pc, #68]	; (d45f8 <_Z17setSampleInterval6String+0x60>)
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45b2:	4812      	ldr	r0, [pc, #72]	; (d45fc <_Z17setSampleInterval6String+0x64>)
  sysStatus.sampleIntervalMin = tempSampleInterval;
   d45b4:	71ab      	strb	r3, [r5, #6]
  systemStatusWriteNeeded = true;
   d45b6:	2401      	movs	r4, #1
   d45b8:	7014      	strb	r4, [r2, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d45ba:	210c      	movs	r1, #12
   d45bc:	4a10      	ldr	r2, [pc, #64]	; (d4600 <_Z17setSampleInterval6String+0x68>)
   d45be:	f003 feb5 	bl	d832c <snprintf>
  snprintf(data, sizeof(data), "Sample Interval is now %i minutes",sysStatus.sampleIntervalMin);
   d45c2:	79ab      	ldrb	r3, [r5, #6]
   d45c4:	4a0f      	ldr	r2, [pc, #60]	; (d4604 <_Z17setSampleInterval6String+0x6c>)
   d45c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d45ca:	a804      	add	r0, sp, #16
   d45cc:	f003 feae 	bl	d832c <snprintf>
   d45d0:	f003 fdf4 	bl	d81bc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d45d4:	b148      	cbz	r0, d45ea <_Z17setSampleInterval6String+0x52>
   d45d6:	2300      	movs	r3, #0
    publishQueue.publish("Interval", data, PRIVATE);
   d45d8:	f88d 3000 	strb.w	r3, [sp]
   d45dc:	4b0a      	ldr	r3, [pc, #40]	; (d4608 <_Z17setSampleInterval6String+0x70>)
   d45de:	490b      	ldr	r1, [pc, #44]	; (d460c <_Z17setSampleInterval6String+0x74>)
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	480b      	ldr	r0, [pc, #44]	; (d4610 <_Z17setSampleInterval6String+0x78>)
   d45e4:	aa04      	add	r2, sp, #16
   d45e6:	f7ff fe85 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
   d45ea:	4620      	mov	r0, r4
   d45ec:	e000      	b.n	d45f0 <_Z17setSampleInterval6String+0x58>
  if ((tempSampleInterval <= 0) | (tempSampleInterval > 60)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45ee:	2000      	movs	r0, #0
}
   d45f0:	b045      	add	sp, #276	; 0x114
   d45f2:	bd30      	pop	{r4, r5, pc}
   d45f4:	2003e3c0 	.word	0x2003e3c0
   d45f8:	2003e3a0 	.word	0x2003e3a0
   d45fc:	2003e12d 	.word	0x2003e12d
   d4600:	000dae4a 	.word	0x000dae4a
   d4604:	000dae33 	.word	0x000dae33
   d4608:	2003e28c 	.word	0x2003e28c
   d460c:	000db06d 	.word	0x000db06d
   d4610:	2003e340 	.word	0x2003e340

000d4614 <_Z9sendEventv>:
void sendEvent() {
   d4614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4618:	4b23      	ldr	r3, [pc, #140]	; (d46a8 <_Z9sendEventv+0x94>)
   d461a:	4c24      	ldr	r4, [pc, #144]	; (d46ac <_Z9sendEventv+0x98>)
   d461c:	689d      	ldr	r5, [r3, #8]
   d461e:	69a2      	ldr	r2, [r4, #24]
   d4620:	691b      	ldr	r3, [r3, #16]
void sendEvent() {
   d4622:	b0d3      	sub	sp, #332	; 0x14c
  snprintf(data, sizeof(data), "{\"cabinT\":%4.2f, \"ventT\":%4.2f, \"outsideT\":%4.2f, \"battery\":%i,  \"key1\":\"%s\", \"resets\":%i, \"alerts\":%i, \"timestamp\":%lu000, \"lat\":%f, \"lng\":%f}",current.tempArray[0], current.tempArray[1], current.tempArray[2],sysStatus.stateOfCharge, batteryContextStr, sysStatus.resetCount, current.alertCount, Time.now(), current.latitude, current.longitude);
   d4624:	e9d4 6700 	ldrd	r6, r7, [r4]
   d4628:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   d462c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
   d4630:	9311      	str	r3, [sp, #68]	; 0x44
   d4632:	9210      	str	r2, [sp, #64]	; 0x40
   d4634:	f005 f9d3 	bl	d99de <_ZN9TimeClass3nowEv>
   d4638:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
   d463c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d463e:	9308      	str	r3, [sp, #32]
   d4640:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d4644:	ed94 7b08 	vldr	d7, [r4, #32]
   d4648:	4b19      	ldr	r3, [pc, #100]	; (d46b0 <_Z9sendEventv+0x9c>)
   d464a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d464c:	900a      	str	r0, [sp, #40]	; 0x28
   d464e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
   d4652:	e9cd 5306 	strd	r5, r3, [sp, #24]
   d4656:	9209      	str	r2, [sp, #36]	; 0x24
   d4658:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d465c:	e9cd 8902 	strd	r8, r9, [sp, #8]
   d4660:	e9cd 6700 	strd	r6, r7, [sp]
   d4664:	4a13      	ldr	r2, [pc, #76]	; (d46b4 <_Z9sendEventv+0xa0>)
   d4666:	f44f 7180 	mov.w	r1, #256	; 0x100
   d466a:	a812      	add	r0, sp, #72	; 0x48
   d466c:	f003 fe5e 	bl	d832c <snprintf>
  publishQueue.publish("Ubidots-MBTA-Hook-v2-Parse", data, PRIVATE);
   d4670:	2300      	movs	r3, #0
   d4672:	f88d 3000 	strb.w	r3, [sp]
   d4676:	4b10      	ldr	r3, [pc, #64]	; (d46b8 <_Z9sendEventv+0xa4>)
   d4678:	4910      	ldr	r1, [pc, #64]	; (d46bc <_Z9sendEventv+0xa8>)
   d467a:	781b      	ldrb	r3, [r3, #0]
   d467c:	4810      	ldr	r0, [pc, #64]	; (d46c0 <_Z9sendEventv+0xac>)
   d467e:	aa12      	add	r2, sp, #72	; 0x48
   d4680:	f7ff fe38 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4684:	4b0f      	ldr	r3, [pc, #60]	; (d46c4 <_Z9sendEventv+0xb0>)
   d4686:	2201      	movs	r2, #1
   d4688:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d468a:	f003 fb3d 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d468e:	4b0e      	ldr	r3, [pc, #56]	; (d46c8 <_Z9sendEventv+0xb4>)
   d4690:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();
   d4692:	f005 f9b5 	bl	d9a00 <_ZN9TimeClass4hourEv>
   d4696:	4b0d      	ldr	r3, [pc, #52]	; (d46cc <_Z9sendEventv+0xb8>)
   d4698:	6018      	str	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
   d469a:	f005 f9bd 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d469e:	4b0c      	ldr	r3, [pc, #48]	; (d46d0 <_Z9sendEventv+0xbc>)
   d46a0:	6018      	str	r0, [r3, #0]
}
   d46a2:	b053      	add	sp, #332	; 0x14c
   d46a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d46a8:	2003e3a0 	.word	0x2003e3a0
   d46ac:	2003e2b8 	.word	0x2003e2b8
   d46b0:	2003e28e 	.word	0x2003e28e
   d46b4:	000dae55 	.word	0x000dae55
   d46b8:	2003e28c 	.word	0x2003e28c
   d46bc:	000daee5 	.word	0x000daee5
   d46c0:	2003e340 	.word	0x2003e340
   d46c4:	2003e2fe 	.word	0x2003e2fe
   d46c8:	2003e3f8 	.word	0x2003e3f8
   d46cc:	2003e2ec 	.word	0x2003e2ec
   d46d0:	2003e2f0 	.word	0x2003e2f0
   d46d4:	00000000 	.word	0x00000000

000d46d8 <_Z7getTempPh>:
double getTemp(uint8_t addr[8]) {
   d46d8:	b570      	push	{r4, r5, r6, lr}
   d46da:	ed2d 8b02 	vpush	{d8}
    _temp = ds18b20.getTemperature(addr);
   d46de:	4e1e      	ldr	r6, [pc, #120]	; (d4758 <_Z7getTempPh+0x80>)
double getTemp(uint8_t addr[8]) {
   d46e0:	b082      	sub	sp, #8
   d46e2:	4605      	mov	r5, r0
  int   i = 0;
   d46e4:	2400      	movs	r4, #0
    _temp = ds18b20.getTemperature(addr);
   d46e6:	2200      	movs	r2, #0
   d46e8:	4629      	mov	r1, r5
   d46ea:	4630      	mov	r0, r6
   d46ec:	f001 fea8 	bl	d6440 <_ZN7DS18B2014getTemperatureEPhb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46f0:	4630      	mov	r0, r6
    _temp = ds18b20.getTemperature(addr);
   d46f2:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d46f6:	f001 ff81 	bl	d65fc <_ZN7DS18B208crcCheckEv>
   d46fa:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46fe:	b950      	cbnz	r0, d4716 <_Z7getTempPh+0x3e>
   d4700:	3401      	adds	r4, #1
   d4702:	2c04      	cmp	r4, #4
   d4704:	d1ef      	bne.n	d46e6 <_Z7getTempPh+0xe>
    Serial.println("Invalid reading");
   d4706:	f005 faaf 	bl	d9c68 <_Z16_fetch_usbserialv>
   d470a:	4914      	ldr	r1, [pc, #80]	; (d475c <_Z7getTempPh+0x84>)
   d470c:	f004 fce1 	bl	d90d2 <_ZN5Print7printlnEPKc>
   d4710:	ed9f 8b0f 	vldr	d8, [pc, #60]	; d4750 <_Z7getTempPh+0x78>
  return _temp;
   d4714:	e013      	b.n	d473e <_Z7getTempPh+0x66>
  if (i < MAXRETRY) {
   d4716:	2c03      	cmp	r4, #3
   d4718:	d0f5      	beq.n	d4706 <_Z7getTempPh+0x2e>
    _temp = ds18b20.convertToFahrenheit(_temp);
   d471a:	480f      	ldr	r0, [pc, #60]	; (d4758 <_Z7getTempPh+0x80>)
   d471c:	f001 ff54 	bl	d65c8 <_ZN7DS18B2019convertToFahrenheitEf>
   d4720:	ee10 0a10 	vmov	r0, s0
   d4724:	f005 fda2 	bl	da26c <__aeabi_f2d>
   d4728:	ec41 0b18 	vmov	d8, r0, r1
    Serial.println(_temp);
   d472c:	f005 fa9c 	bl	d9c68 <_Z16_fetch_usbserialv>
   d4730:	eeb0 0a48 	vmov.f32	s0, s16
   d4734:	eef0 0a68 	vmov.f32	s1, s17
   d4738:	2102      	movs	r1, #2
   d473a:	f004 fdbb 	bl	d92b4 <_ZN5Print7printlnEdi>
}
   d473e:	eeb0 0a48 	vmov.f32	s0, s16
   d4742:	eef0 0a68 	vmov.f32	s1, s17
   d4746:	b002      	add	sp, #8
   d4748:	ecbd 8b02 	vpop	{d8}
   d474c:	bd70      	pop	{r4, r5, r6, pc}
   d474e:	bf00      	nop
   d4750:	00000000 	.word	0x00000000
   d4754:	7ff80000 	.word	0x7ff80000
   d4758:	2003e300 	.word	0x2003e300
   d475c:	000daf00 	.word	0x000daf00

000d4760 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4760:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4762:	4d19      	ldr	r5, [pc, #100]	; (d47c8 <_Z17getSignalStrengthv+0x68>)
   d4764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4766:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4768:	ac04      	add	r4, sp, #16
   d476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d476e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4770:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4774:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4778:	4914      	ldr	r1, [pc, #80]	; (d47cc <_Z17getSignalStrengthv+0x6c>)
   d477a:	a80e      	add	r0, sp, #56	; 0x38
   d477c:	f003 fe8c 	bl	d8498 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4780:	a80e      	add	r0, sp, #56	; 0x38
   d4782:	f003 fedc 	bl	d853e <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4786:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4788:	a80e      	add	r0, sp, #56	; 0x38
   d478a:	f003 fee1 	bl	d8550 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d478e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4790:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4794:	f003 ff0c 	bl	d85b0 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4798:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d479a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d479e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d47a2:	f005 fd63 	bl	da26c <__aeabi_f2d>
   d47a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47aa:	4628      	mov	r0, r5
   d47ac:	f005 fd5e 	bl	da26c <__aeabi_f2d>
   d47b0:	e9cd 0100 	strd	r0, r1, [sp]
   d47b4:	4a06      	ldr	r2, [pc, #24]	; (d47d0 <_Z17getSignalStrengthv+0x70>)
   d47b6:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d47ba:	4806      	ldr	r0, [pc, #24]	; (d47d4 <_Z17getSignalStrengthv+0x74>)
   d47bc:	2140      	movs	r1, #64	; 0x40
   d47be:	f003 fdb5 	bl	d832c <snprintf>
}
   d47c2:	b019      	add	sp, #100	; 0x64
   d47c4:	bd30      	pop	{r4, r5, pc}
   d47c6:	bf00      	nop
   d47c8:	000db170 	.word	0x000db170
   d47cc:	2003e5ec 	.word	0x2003e5ec
   d47d0:	000daf10 	.word	0x000daf10
   d47d4:	2003e23c 	.word	0x2003e23c

000d47d8 <_Z11petWatchdogv>:
{
   d47d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47da:	f7ff fd71 	bl	d42c0 <fastPinGetPinmap>
   d47de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d47e2:	015c      	lsls	r4, r3, #5
   d47e4:	f7ff fd6c 	bl	d42c0 <fastPinGetPinmap>
   d47e8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d47ec:	f003 031f 	and.w	r3, r3, #31
   d47f0:	4323      	orrs	r3, r4
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47f2:	a801      	add	r0, sp, #4
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	f7ff fc79 	bl	d40ec <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d47fa:	9b01      	ldr	r3, [sp, #4]
   d47fc:	2401      	movs	r4, #1
   d47fe:	fa04 f303 	lsl.w	r3, r4, r3
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4802:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4806:	f7ff fd5b 	bl	d42c0 <fastPinGetPinmap>
   d480a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   d480e:	015d      	lsls	r5, r3, #5
   d4810:	f7ff fd56 	bl	d42c0 <fastPinGetPinmap>
   d4814:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   d4818:	f003 031f 	and.w	r3, r3, #31
   d481c:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d481e:	a801      	add	r0, sp, #4
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	f7ff fc63 	bl	d40ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4826:	9b01      	ldr	r3, [sp, #4]
   d4828:	409c      	lsls	r4, r3
  watchdogFlag = false;
   d482a:	4b03      	ldr	r3, [pc, #12]	; (d4838 <_Z11petWatchdogv+0x60>)
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d482c:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
   d4830:	2200      	movs	r2, #0
   d4832:	701a      	strb	r2, [r3, #0]
}
   d4834:	b003      	add	sp, #12
   d4836:	bd30      	pop	{r4, r5, pc}
   d4838:	2003e3f4 	.word	0x2003e3f4

000d483c <_Z14setPowerConfigv>:
int setPowerConfig() {
   d483c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d483e:	2420      	movs	r4, #32
   d4840:	b090      	sub	sp, #64	; 0x40
   d4842:	4622      	mov	r2, r4
   d4844:	2100      	movs	r1, #0
   d4846:	4668      	mov	r0, sp
   d4848:	f006 f95a 	bl	dab00 <memset>
   d484c:	4622      	mov	r2, r4
   d484e:	2100      	movs	r1, #0
   d4850:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4854:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4858:	f006 f952 	bl	dab00 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d485c:	2100      	movs	r1, #0
   d485e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4862:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4866:	f003 fc75 	bl	d8154 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d486a:	f241 0370 	movw	r3, #4208	; 0x1070
   d486e:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4872:	4b08      	ldr	r3, [pc, #32]	; (d4894 <_Z14setPowerConfigv+0x58>)
   d4874:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4876:	f241 0310 	movw	r3, #4112	; 0x1010
   d487a:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d487e:	9b00      	ldr	r3, [sp, #0]
   d4880:	2100      	movs	r1, #0
   d4882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4886:	4668      	mov	r0, sp
   d4888:	9300      	str	r3, [sp, #0]
   d488a:	f003 fc63 	bl	d8154 <system_power_management_set_config>
}
   d488e:	b010      	add	sp, #64	; 0x40
   d4890:	bd10      	pop	{r4, pc}
   d4892:	bf00      	nop
   d4894:	03840384 	.word	0x03840384

000d4898 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d489c:	481d      	ldr	r0, [pc, #116]	; (d4914 <_Z17connectToParticlev+0x7c>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d489e:	f8df a080 	ldr.w	sl, [pc, #128]	; d4920 <_Z17connectToParticlev+0x88>
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	2300      	movs	r3, #0
   d48a6:	461a      	mov	r2, r3
   d48a8:	4619      	mov	r1, r3
   d48aa:	f003 fcef 	bl	d828c <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d48ae:	f003 fc7d 	bl	d81ac <spark_cloud_flag_connect>
   d48b2:	f44f 7496 	mov.w	r4, #300	; 0x12c
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48b6:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d48ba:	f240 38e7 	movw	r8, #999	; 0x3e7
   d48be:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d48c2:	f7ff fce2 	bl	d428a <_ZN11SystemClass6millisEv>
   d48c6:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d48c8:	f7ff fcdf 	bl	d428a <_ZN11SystemClass6millisEv>
   d48cc:	1b46      	subs	r6, r0, r5
   d48ce:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d48d2:	45b9      	cmp	r9, r7
   d48d4:	bf08      	it	eq
   d48d6:	45b0      	cmpeq	r8, r6
   d48d8:	d305      	bcc.n	d48e6 <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48da:	f003 fc6f 	bl	d81bc <spark_cloud_flag_connected>
   d48de:	b910      	cbnz	r0, d48e6 <_Z17connectToParticlev+0x4e>
            spark_process();
   d48e0:	f003 fc5c 	bl	d819c <spark_process>
        while (_while() && !_condition()) {
   d48e4:	e7f0      	b.n	d48c8 <_Z17connectToParticlev+0x30>
   d48e6:	f003 fc69 	bl	d81bc <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d48ea:	b120      	cbz	r0, d48f6 <_Z17connectToParticlev+0x5e>
   d48ec:	f003 fc66 	bl	d81bc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d48f0:	b950      	cbnz	r0, d4908 <_Z17connectToParticlev+0x70>
}
   d48f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d48f6:	f003 fa07 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d48fa:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d48fe:	f003 fc4d 	bl	d819c <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4902:	3c01      	subs	r4, #1
   d4904:	d1dd      	bne.n	d48c2 <_Z17connectToParticlev+0x2a>
   d4906:	e7f1      	b.n	d48ec <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
   d4908:	4a03      	ldr	r2, [pc, #12]	; (d4918 <_Z17connectToParticlev+0x80>)
   d490a:	2301      	movs	r3, #1
   d490c:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
   d490e:	4a03      	ldr	r2, [pc, #12]	; (d491c <_Z17connectToParticlev+0x84>)
   d4910:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
   d4912:	e7ee      	b.n	d48f2 <_Z17connectToParticlev+0x5a>
   d4914:	2003e5ec 	.word	0x2003e5ec
   d4918:	2003e3a0 	.word	0x2003e3a0
   d491c:	2003e3c0 	.word	0x2003e3c0
   d4920:	2003e7d8 	.word	0x2003e7d8

000d4924 <_Z12notConnectedv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4924:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4926:	f003 fc49 	bl	d81bc <spark_cloud_flag_connected>
  return !Particle.connected();
   d492a:	f080 0001 	eor.w	r0, r0, #1
}
   d492e:	b2c0      	uxtb	r0, r0
   d4930:	bd08      	pop	{r3, pc}
	...

000d4934 <_Z22disconnectFromParticlev>:
{
   d4934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4938:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d493a:	2600      	movs	r6, #0
  Particle.disconnect();
   d493c:	a801      	add	r0, sp, #4
   d493e:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d4942:	f88d 600c 	strb.w	r6, [sp, #12]
   d4946:	f003 ff04 	bl	d8752 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d494a:	f7ff fc9e 	bl	d428a <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d494e:	46b1      	mov	r9, r6
        const system_tick_t start = millis();
   d4950:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4952:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4956:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4958:	f7ff fc97 	bl	d428a <_ZN11SystemClass6millisEv>
   d495c:	ebb0 0408 	subs.w	r4, r0, r8
   d4960:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d4964:	42af      	cmp	r7, r5
   d4966:	bf08      	it	eq
   d4968:	42a6      	cmpeq	r6, r4
   d496a:	d305      	bcc.n	d4978 <_Z22disconnectFromParticlev+0x44>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d496c:	f7ff ffda 	bl	d4924 <_Z12notConnectedv>
   d4970:	b910      	cbnz	r0, d4978 <_Z22disconnectFromParticlev+0x44>
            spark_process();
   d4972:	f003 fc13 	bl	d819c <spark_process>
        while (_while() && !_condition()) {
   d4976:	e7ef      	b.n	d4958 <_Z22disconnectFromParticlev+0x24>
   d4978:	f7ff ffd4 	bl	d4924 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d497c:	480a      	ldr	r0, [pc, #40]	; (d49a8 <_Z22disconnectFromParticlev+0x74>)
   d497e:	2300      	movs	r3, #0
   d4980:	4619      	mov	r1, r3
   d4982:	461a      	mov	r2, r3
   d4984:	6840      	ldr	r0, [r0, #4]
   d4986:	f003 fc89 	bl	d829c <network_off>
  sysStatus.connectedStatus = false;
   d498a:	4b08      	ldr	r3, [pc, #32]	; (d49ac <_Z22disconnectFromParticlev+0x78>)
   d498c:	2200      	movs	r2, #0
   d498e:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d4990:	4b07      	ldr	r3, [pc, #28]	; (d49b0 <_Z22disconnectFromParticlev+0x7c>)
   d4992:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d4994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  systemStatusWriteNeeded = true;
   d4998:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d499a:	f003 fd0f 	bl	d83bc <delay>
}
   d499e:	4620      	mov	r0, r4
   d49a0:	b005      	add	sp, #20
   d49a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d49a6:	bf00      	nop
   d49a8:	2003e5ec 	.word	0x2003e5ec
   d49ac:	2003e3a0 	.word	0x2003e3a0
   d49b0:	2003e3c0 	.word	0x2003e3c0

000d49b4 <_Z22publishStateTransitionv>:
{
   d49b4:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49b6:	4d13      	ldr	r5, [pc, #76]	; (d4a04 <_Z22publishStateTransitionv+0x50>)
   d49b8:	4c13      	ldr	r4, [pc, #76]	; (d4a08 <_Z22publishStateTransitionv+0x54>)
   d49ba:	4914      	ldr	r1, [pc, #80]	; (d4a0c <_Z22publishStateTransitionv+0x58>)
   d49bc:	782a      	ldrb	r2, [r5, #0]
   d49be:	7820      	ldrb	r0, [r4, #0]
{
   d49c0:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49c2:	230e      	movs	r3, #14
   d49c4:	fb03 1202 	mla	r2, r3, r2, r1
   d49c8:	9200      	str	r2, [sp, #0]
   d49ca:	fb03 1300 	mla	r3, r3, r0, r1
   d49ce:	4a10      	ldr	r2, [pc, #64]	; (d4a10 <_Z22publishStateTransitionv+0x5c>)
   d49d0:	2128      	movs	r1, #40	; 0x28
   d49d2:	a802      	add	r0, sp, #8
   d49d4:	f003 fcaa 	bl	d832c <snprintf>
  oldState = state;
   d49d8:	782b      	ldrb	r3, [r5, #0]
   d49da:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49dc:	f003 fbee 	bl	d81bc <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49e0:	b148      	cbz	r0, d49f6 <_Z22publishStateTransitionv+0x42>
   d49e2:	2300      	movs	r3, #0
   d49e4:	f88d 3000 	strb.w	r3, [sp]
   d49e8:	4b0a      	ldr	r3, [pc, #40]	; (d4a14 <_Z22publishStateTransitionv+0x60>)
   d49ea:	490b      	ldr	r1, [pc, #44]	; (d4a18 <_Z22publishStateTransitionv+0x64>)
   d49ec:	781b      	ldrb	r3, [r3, #0]
   d49ee:	480b      	ldr	r0, [pc, #44]	; (d4a1c <_Z22publishStateTransitionv+0x68>)
   d49f0:	aa02      	add	r2, sp, #8
   d49f2:	f7ff fc7f 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Serial.println(stateTransitionString);
   d49f6:	f005 f937 	bl	d9c68 <_Z16_fetch_usbserialv>
   d49fa:	a902      	add	r1, sp, #8
   d49fc:	f004 fb69 	bl	d90d2 <_ZN5Print7printlnEPKc>
}
   d4a00:	b00d      	add	sp, #52	; 0x34
   d4a02:	bd30      	pop	{r4, r5, pc}
   d4a04:	2003e39c 	.word	0x2003e39c
   d4a08:	2003e33c 	.word	0x2003e33c
   d4a0c:	2003e139 	.word	0x2003e139
   d4a10:	000daf29 	.word	0x000daf29
   d4a14:	2003e28c 	.word	0x2003e28c
   d4a18:	000daf37 	.word	0x000daf37
   d4a1c:	2003e340 	.word	0x2003e340

000d4a20 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
   d4a20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a24:	4b17      	ldr	r3, [pc, #92]	; (d4a84 <_Z12dailyCleanupv+0x64>)
  sysStatus.verboseMode = false;
   d4a26:	4d18      	ldr	r5, [pc, #96]	; (d4a88 <_Z12dailyCleanupv+0x68>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
   d4a28:	4a18      	ldr	r2, [pc, #96]	; (d4a8c <_Z12dailyCleanupv+0x6c>)
   d4a2a:	4919      	ldr	r1, [pc, #100]	; (d4a90 <_Z12dailyCleanupv+0x70>)
   d4a2c:	4819      	ldr	r0, [pc, #100]	; (d4a94 <_Z12dailyCleanupv+0x74>)
   d4a2e:	2400      	movs	r4, #0
   d4a30:	f88d 4000 	strb.w	r4, [sp]
   d4a34:	781b      	ldrb	r3, [r3, #0]
   d4a36:	f7ff fc5d 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4a3a:	712c      	strb	r4, [r5, #4]
  Particle.syncTime();                                                // Set the clock each day
   d4a3c:	f7ff fbba 	bl	d41b4 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d4a40:	f7ff fc23 	bl	d428a <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d4a44:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d4a48:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d4a4a:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4a4e:	f7ff fc1c 	bl	d428a <_ZN11SystemClass6millisEv>
   d4a52:	ebb0 060a 	subs.w	r6, r0, sl
   d4a56:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4a5a:	45b9      	cmp	r9, r7
   d4a5c:	bf08      	it	eq
   d4a5e:	45b0      	cmpeq	r8, r6
   d4a60:	d305      	bcc.n	d4a6e <_Z12dailyCleanupv+0x4e>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
   d4a62:	f7ff fbb1 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4a66:	b910      	cbnz	r0, d4a6e <_Z12dailyCleanupv+0x4e>
            spark_process();
   d4a68:	f003 fb98 	bl	d819c <spark_process>
        while (_while() && !_condition()) {
   d4a6c:	e7ef      	b.n	d4a4e <_Z12dailyCleanupv+0x2e>
   d4a6e:	f7ff fbab 	bl	d41c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  sysStatus.resetCount = 0;
   d4a72:	2300      	movs	r3, #0
   d4a74:	612b      	str	r3, [r5, #16]
  systemStatusWriteNeeded=true;
   d4a76:	4b08      	ldr	r3, [pc, #32]	; (d4a98 <_Z12dailyCleanupv+0x78>)
   d4a78:	2201      	movs	r2, #1
   d4a7a:	701a      	strb	r2, [r3, #0]
}
   d4a7c:	b002      	add	sp, #8
   d4a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a82:	bf00      	nop
   d4a84:	2003e28c 	.word	0x2003e28c
   d4a88:	2003e3a0 	.word	0x2003e3a0
   d4a8c:	000daf48 	.word	0x000daf48
   d4a90:	000daf50 	.word	0x000daf50
   d4a94:	2003e340 	.word	0x2003e340
   d4a98:	2003e3c0 	.word	0x2003e3c0

000d4a9c <_Z8isDSTusav>:

bool isDSTusa() {
   d4a9c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
   d4a9e:	f004 ffc7 	bl	d9a30 <_ZN9TimeClass3dayEv>
   d4aa2:	4605      	mov	r5, r0
  int month = Time.month();
   d4aa4:	f004 ffd8 	bl	d9a58 <_ZN9TimeClass5monthEv>
   d4aa8:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4aaa:	f004 ffcd 	bl	d9a48 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d4aae:	1f23      	subs	r3, r4, #4
   d4ab0:	2b06      	cmp	r3, #6
   d4ab2:	d90e      	bls.n	d4ad2 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d4ab4:	1ee3      	subs	r3, r4, #3
   d4ab6:	2b08      	cmp	r3, #8
   d4ab8:	d80d      	bhi.n	d4ad6 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d4aba:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d4abc:	1a2d      	subs	r5, r5, r0
   d4abe:	d504      	bpl.n	d4aca <_Z8isDSTusav+0x2e>
   d4ac0:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ac2:	bf14      	ite	ne
   d4ac4:	2000      	movne	r0, #0
   d4ac6:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d4ac8:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d4aca:	2d07      	cmp	r5, #7
   d4acc:	dd03      	ble.n	d4ad6 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d4ace:	2c03      	cmp	r4, #3
   d4ad0:	e7f7      	b.n	d4ac2 <_Z8isDSTusav+0x26>
    return true;
   d4ad2:	2001      	movs	r0, #1
   d4ad4:	e7f8      	b.n	d4ac8 <_Z8isDSTusav+0x2c>
    return false;
   d4ad6:	2000      	movs	r0, #0
   d4ad8:	e7f6      	b.n	d4ac8 <_Z8isDSTusav+0x2c>
   d4ada:	0000      	movs	r0, r0
   d4adc:	0000      	movs	r0, r0
	...

000d4ae0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d4ae0:	b570      	push	{r4, r5, r6, lr}
   d4ae2:	ed2d 8b02 	vpush	{d8}
   d4ae6:	b0c8      	sub	sp, #288	; 0x120
   d4ae8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d4aea:	f004 ff78 	bl	d99de <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4aee:	220a      	movs	r2, #10
  time_t t = Time.now();
   d4af0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d4af2:	a903      	add	r1, sp, #12
   d4af4:	6828      	ldr	r0, [r5, #0]
   d4af6:	f006 f8f3 	bl	dace0 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4afa:	b2c3      	uxtb	r3, r0
   d4afc:	2b02      	cmp	r3, #2
   d4afe:	d859      	bhi.n	d4bb4 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d4b00:	b243      	sxtb	r3, r0
   d4b02:	ee08 3a10 	vmov	s16, r3
   d4b06:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4b0a:	eeb0 0a48 	vmov.f32	s0, s16
   d4b0e:	f004 fe1d 	bl	d974c <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d4b12:	4b2d      	ldr	r3, [pc, #180]	; (d4bc8 <_Z12setDSTOffset6String+0xe8>)
   d4b14:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d4b18:	4b2c      	ldr	r3, [pc, #176]	; (d4bcc <_Z12setDSTOffset6String+0xec>)
   d4b1a:	2201      	movs	r2, #1
   d4b1c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d4b1e:	ee18 0a10 	vmov	r0, s16
   d4b22:	f005 fba3 	bl	da26c <__aeabi_f2d>
   d4b26:	4a2a      	ldr	r2, [pc, #168]	; (d4bd0 <_Z12setDSTOffset6String+0xf0>)
   d4b28:	e9cd 0100 	strd	r0, r1, [sp]
   d4b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b30:	a808      	add	r0, sp, #32
   d4b32:	f003 fbfb 	bl	d832c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4b36:	f004 ff35 	bl	d99a4 <_ZN9TimeClass7isValidEv>
   d4b3a:	b128      	cbz	r0, d4b48 <_Z12setDSTOffset6String+0x68>
   d4b3c:	f7ff ffae 	bl	d4a9c <_Z8isDSTusav>
   d4b40:	2800      	cmp	r0, #0
   d4b42:	d034      	beq.n	d4bae <_Z12setDSTOffset6String+0xce>
   d4b44:	f004 fe20 	bl	d9788 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d4b48:	f004 ff9a 	bl	d9a80 <_ZN9TimeClass5localEv>
   d4b4c:	4605      	mov	r5, r0
   d4b4e:	f004 ff46 	bl	d99de <_ZN9TimeClass3nowEv>
   d4b52:	1a28      	subs	r0, r5, r0
   d4b54:	f005 fb78 	bl	da248 <__aeabi_i2d>
   d4b58:	a319      	add	r3, pc, #100	; (adr r3, d4bc0 <_Z12setDSTOffset6String+0xe0>)
   d4b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b5e:	f005 fd07 	bl	da570 <__aeabi_ddiv>
   d4b62:	4a1c      	ldr	r2, [pc, #112]	; (d4bd4 <_Z12setDSTOffset6String+0xf4>)
   d4b64:	e9cd 0100 	strd	r0, r1, [sp]
   d4b68:	210a      	movs	r1, #10
   d4b6a:	481b      	ldr	r0, [pc, #108]	; (d4bd8 <_Z12setDSTOffset6String+0xf8>)
   d4b6c:	f003 fbde 	bl	d832c <snprintf>
   d4b70:	f003 fb24 	bl	d81bc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4b74:	b1c8      	cbz	r0, d4baa <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d4b76:	4d19      	ldr	r5, [pc, #100]	; (d4bdc <_Z12setDSTOffset6String+0xfc>)
   d4b78:	4919      	ldr	r1, [pc, #100]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
   d4b7a:	481a      	ldr	r0, [pc, #104]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
   d4b7c:	2600      	movs	r6, #0
   d4b7e:	f88d 6000 	strb.w	r6, [sp]
   d4b82:	782b      	ldrb	r3, [r5, #0]
   d4b84:	aa08      	add	r2, sp, #32
   d4b86:	f7ff fbb5 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d4b8a:	4622      	mov	r2, r4
   d4b8c:	17e3      	asrs	r3, r4, #31
   d4b8e:	a804      	add	r0, sp, #16
   d4b90:	f004 fe22 	bl	d97d8 <_ZN9TimeClass7timeStrEx>
   d4b94:	f88d 6000 	strb.w	r6, [sp]
   d4b98:	782b      	ldrb	r3, [r5, #0]
   d4b9a:	9a04      	ldr	r2, [sp, #16]
   d4b9c:	4910      	ldr	r1, [pc, #64]	; (d4be0 <_Z12setDSTOffset6String+0x100>)
   d4b9e:	4811      	ldr	r0, [pc, #68]	; (d4be4 <_Z12setDSTOffset6String+0x104>)
   d4ba0:	f7ff fba8 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4ba4:	a804      	add	r0, sp, #16
   d4ba6:	f004 fc85 	bl	d94b4 <_ZN6StringD1Ev>
  return 1;
   d4baa:	2001      	movs	r0, #1
   d4bac:	e003      	b.n	d4bb6 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d4bae:	f004 fdf7 	bl	d97a0 <_ZN9TimeClass6endDSTEv>
   d4bb2:	e7c9      	b.n	d4b48 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4bb4:	2000      	movs	r0, #0
}
   d4bb6:	b048      	add	sp, #288	; 0x120
   d4bb8:	ecbd 8b02 	vpop	{d8}
   d4bbc:	bd70      	pop	{r4, r5, r6, pc}
   d4bbe:	bf00      	nop
   d4bc0:	00000000 	.word	0x00000000
   d4bc4:	40ac2000 	.word	0x40ac2000
   d4bc8:	2003e3a0 	.word	0x2003e3a0
   d4bcc:	2003e3c0 	.word	0x2003e3c0
   d4bd0:	000daf5e 	.word	0x000daf5e
   d4bd4:	000dae10 	.word	0x000dae10
   d4bd8:	2003e2f4 	.word	0x2003e2f4
   d4bdc:	2003e28c 	.word	0x2003e28c
   d4be0:	000dae2e 	.word	0x000dae2e
   d4be4:	2003e340 	.word	0x2003e340

000d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4be8:	b530      	push	{r4, r5, lr}
   d4bea:	b085      	sub	sp, #20
   d4bec:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4bee:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4bf0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4bf2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4bf4:	f003 fa50 	bl	d8098 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4bf8:	b9b0      	cbnz	r0, d4c28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4bfa:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4bfc:	b10c      	cbz	r4, d4c02 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4bfe:	6923      	ldr	r3, [r4, #16]
   d4c00:	b923      	cbnz	r3, d4c0c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4c02:	4a0a      	ldr	r2, [pc, #40]	; (d4c2c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4c04:	2100      	movs	r1, #0
   d4c06:	200a      	movs	r0, #10
   d4c08:	f003 fa36 	bl	d8078 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4c0c:	2300      	movs	r3, #0
   d4c0e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4c12:	230c      	movs	r3, #12
   d4c14:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4c18:	2304      	movs	r3, #4
   d4c1a:	9303      	str	r3, [sp, #12]
   d4c1c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4c1e:	6923      	ldr	r3, [r4, #16]
   d4c20:	aa01      	add	r2, sp, #4
   d4c22:	2101      	movs	r1, #1
   d4c24:	4620      	mov	r0, r4
   d4c26:	4798      	blx	r3
}
   d4c28:	b005      	add	sp, #20
   d4c2a:	bd30      	pop	{r4, r5, pc}
   d4c2c:	000d7cf9 	.word	0x000d7cf9

000d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>:
            return r;
        }
        return val;
    }

    int batteryState() const {
   d4c30:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4c32:	2007      	movs	r0, #7
   d4c34:	a901      	add	r1, sp, #4
   d4c36:	f7ff ffd7 	bl	d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4c3a:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d4c3c:	bfa8      	it	ge
   d4c3e:	9801      	ldrge	r0, [sp, #4]
    }
   d4c40:	b003      	add	sp, #12
   d4c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c48 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c4a:	b089      	sub	sp, #36	; 0x24
   d4c4c:	a901      	add	r1, sp, #4
   d4c4e:	2003      	movs	r0, #3
   d4c50:	f7ff ffca 	bl	d4be8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4c54:	2800      	cmp	r0, #0
   d4c56:	d139      	bne.n	d4ccc <_Z17getBatteryContextv+0x84>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4c58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4c5c:	ee07 3a90 	vmov	s15, r3
   d4c60:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c64:	4d23      	ldr	r5, [pc, #140]	; (d4cf4 <_Z17getBatteryContextv+0xac>)
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c66:	4e24      	ldr	r6, [pc, #144]	; (d4cf8 <_Z17getBatteryContextv+0xb0>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c6a:	ac01      	add	r4, sp, #4
   d4c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","On Vehicle Pwr","Off Vehicle Pwr","Fault","Diconnected"};
   d4c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sysStatus.stateOfCharge = int(System.batteryCharge());                          // Percentage of full charge
   d4c7a:	edc6 7a02 	vstr	s15, [r6, #8]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c7e:	f7ff ffd7 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4c82:	ab08      	add	r3, sp, #32
   d4c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c88:	4d1c      	ldr	r5, [pc, #112]	; (d4cfc <_Z17getBatteryContextv+0xb4>)
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4c8a:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4c8e:	4a1c      	ldr	r2, [pc, #112]	; (d4d00 <_Z17getBatteryContextv+0xb8>)
   d4c90:	481c      	ldr	r0, [pc, #112]	; (d4d04 <_Z17getBatteryContextv+0xbc>)
   d4c92:	2110      	movs	r1, #16
   d4c94:	f003 fb4a 	bl	d832c <snprintf>
  if (!alreadyOnBattery && System.batteryState() == 4) {                          // Keep track how long we are on battery power
   d4c98:	782b      	ldrb	r3, [r5, #0]
   d4c9a:	4634      	mov	r4, r6
   d4c9c:	462f      	mov	r7, r5
   d4c9e:	4e1a      	ldr	r6, [pc, #104]	; (d4d08 <_Z17getBatteryContextv+0xc0>)
   d4ca0:	b9bb      	cbnz	r3, d4cd2 <_Z17getBatteryContextv+0x8a>
   d4ca2:	f7ff ffc5 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4ca6:	2804      	cmp	r0, #4
   d4ca8:	d113      	bne.n	d4cd2 <_Z17getBatteryContextv+0x8a>
    alreadyOnBattery = true;
   d4caa:	2301      	movs	r3, #1
   d4cac:	702b      	strb	r3, [r5, #0]
   d4cae:	f003 f82b 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTimePowered > 14400000 || sysStatus.stateOfCharge <= 50) {    // If we have been on battery for four hours, or the battery is less than 50%
   d4cb2:	6833      	ldr	r3, [r6, #0]
   d4cb4:	1ac0      	subs	r0, r0, r3
   d4cb6:	4b15      	ldr	r3, [pc, #84]	; (d4d0c <_Z17getBatteryContextv+0xc4>)
   d4cb8:	4298      	cmp	r0, r3
   d4cba:	d819      	bhi.n	d4cf0 <_Z17getBatteryContextv+0xa8>
   d4cbc:	68a3      	ldr	r3, [r4, #8]
    sysStatus.lowBatteryMode = true;
   d4cbe:	2b32      	cmp	r3, #50	; 0x32
   d4cc0:	bfcc      	ite	gt
   d4cc2:	2300      	movgt	r3, #0
   d4cc4:	2301      	movle	r3, #1
   d4cc6:	7163      	strb	r3, [r4, #5]
}
   d4cc8:	b009      	add	sp, #36	; 0x24
   d4cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1.0f;
   d4ccc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4cd0:	e7c8      	b.n	d4c64 <_Z17getBatteryContextv+0x1c>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4cd2:	f7ff ffad 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4cd6:	2802      	cmp	r0, #2
   d4cd8:	d105      	bne.n	d4ce6 <_Z17getBatteryContextv+0x9e>
    alreadyOnBattery = false;
   d4cda:	2300      	movs	r3, #0
   d4cdc:	703b      	strb	r3, [r7, #0]
   d4cde:	f003 f813 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    lastTimePowered = millis();
   d4ce2:	6030      	str	r0, [r6, #0]
   d4ce4:	e7e3      	b.n	d4cae <_Z17getBatteryContextv+0x66>
  else if (System.batteryState() == 2 || System.batteryState() == 3) {            // If charged or charging
   d4ce6:	f7ff ffa3 	bl	d4c30 <_ZNK11SystemClass12batteryStateEv.isra.0>
   d4cea:	2803      	cmp	r0, #3
   d4cec:	d1df      	bne.n	d4cae <_Z17getBatteryContextv+0x66>
   d4cee:	e7f4      	b.n	d4cda <_Z17getBatteryContextv+0x92>
    sysStatus.lowBatteryMode = true;
   d4cf0:	2301      	movs	r3, #1
   d4cf2:	e7e8      	b.n	d4cc6 <_Z17getBatteryContextv+0x7e>
   d4cf4:	000db198 	.word	0x000db198
   d4cf8:	2003e3a0 	.word	0x2003e3a0
   d4cfc:	2003e28d 	.word	0x2003e28d
   d4d00:	000db3a0 	.word	0x000db3a0
   d4d04:	2003e28e 	.word	0x2003e28e
   d4d08:	2003e338 	.word	0x2003e338
   d4d0c:	00dbba00 	.word	0x00dbba00

000d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d10:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4d12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4d14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4d16:	b17c      	cbz	r4, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4d18:	6863      	ldr	r3, [r4, #4]
   d4d1a:	3b01      	subs	r3, #1
   d4d1c:	6063      	str	r3, [r4, #4]
   d4d1e:	b95b      	cbnz	r3, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4d20:	6823      	ldr	r3, [r4, #0]
   d4d22:	4620      	mov	r0, r4
   d4d24:	689b      	ldr	r3, [r3, #8]
   d4d26:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d28:	68a3      	ldr	r3, [r4, #8]
   d4d2a:	3b01      	subs	r3, #1
   d4d2c:	60a3      	str	r3, [r4, #8]
   d4d2e:	b91b      	cbnz	r3, d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4d30:	6823      	ldr	r3, [r4, #0]
   d4d32:	4620      	mov	r0, r4
   d4d34:	68db      	ldr	r3, [r3, #12]
   d4d36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4d38:	4628      	mov	r0, r5
   d4d3a:	bd38      	pop	{r3, r4, r5, pc}

000d4d3c <_Z11displayInfov>:

void displayInfo()
{
   d4d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d40:	4c60      	ldr	r4, [pc, #384]	; (d4ec4 <_Z11displayInfov+0x188>)
{
   d4d42:	b0ab      	sub	sp, #172	; 0xac
   d4d44:	f002 ffe0 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastSerial >= SERIAL_PERIOD) {
   d4d48:	6823      	ldr	r3, [r4, #0]
   d4d4a:	1ac0      	subs	r0, r0, r3
   d4d4c:	f241 3387 	movw	r3, #4999	; 0x1387
   d4d50:	4298      	cmp	r0, r3
   d4d52:	f240 80b4 	bls.w	d4ebe <_Z11displayInfov+0x182>
   d4d56:	f002 ffd7 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
		lastSerial = millis();
   d4d5a:	6020      	str	r0, [r4, #0]

		char buf[128];
		if (t.gpsFix()) {
   d4d5c:	4c5a      	ldr	r4, [pc, #360]	; (d4ec8 <_Z11displayInfov+0x18c>)
        os_thread_scheduling(false, NULL);
   d4d5e:	2100      	movs	r1, #0
   d4d60:	6865      	ldr	r5, [r4, #4]
   d4d62:	4608      	mov	r0, r1
   d4d64:	f002 ff70 	bl	d7c48 <os_thread_scheduling>
   d4d68:	f895 8000 	ldrb.w	r8, [r5]
   d4d6c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
        os_thread_scheduling(true, NULL);
   d4d6e:	4d57      	ldr	r5, [pc, #348]	; (d4ecc <_Z11displayInfov+0x190>)
   d4d70:	2100      	movs	r1, #0
   d4d72:	2001      	movs	r0, #1
   d4d74:	f002 ff68 	bl	d7c48 <os_thread_scheduling>
	bool isValid() const    { return valid; }
   d4d78:	4627      	mov	r7, r4
	 * Note: It may take 10 seconds for for this to go to false after losing GPS signal.
	 */
	bool gpsFix(void) const {
		TinyGPSLocation location = gpsData.getLocation();

		return location.isValid() && location.age() < MAX_GPS_AGE_MS;
   d4d7a:	f1b8 0f00 	cmp.w	r8, #0
   d4d7e:	d112      	bne.n	d4da6 <_Z11displayInfov+0x6a>
				unsigned long elapsed = millis() - startFix;
				Log.info("%lu milliseconds to get GPS fix", elapsed);
			}
		}
		else {
			snprintf(buf, sizeof(buf), "no location satellites:%d", t.getSatellites());
   d4d80:	6878      	ldr	r0, [r7, #4]
   d4d82:	f7ff fa32 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4d86:	4a52      	ldr	r2, [pc, #328]	; (d4ed0 <_Z11displayInfov+0x194>)
   d4d88:	4603      	mov	r3, r0
   d4d8a:	2180      	movs	r1, #128	; 0x80
   d4d8c:	a80a      	add	r0, sp, #40	; 0x28
   d4d8e:	f003 facd 	bl	d832c <snprintf>
			if (!gettingFix) {
   d4d92:	782b      	ldrb	r3, [r5, #0]
   d4d94:	2b00      	cmp	r3, #0
   d4d96:	d173      	bne.n	d4e80 <_Z11displayInfov+0x144>
				gettingFix = true;
   d4d98:	2301      	movs	r3, #1
   d4d9a:	702b      	strb	r3, [r5, #0]
   d4d9c:	f002 ffb4 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
				startFix = millis();
   d4da0:	4b4c      	ldr	r3, [pc, #304]	; (d4ed4 <_Z11displayInfov+0x198>)
   d4da2:	6018      	str	r0, [r3, #0]
   d4da4:	e06c      	b.n	d4e80 <_Z11displayInfov+0x144>
   d4da6:	f002 ffaf 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d4daa:	f242 730f 	movw	r3, #9999	; 0x270f
	uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   d4dae:	1b80      	subs	r0, r0, r6
   d4db0:	4298      	cmp	r0, r3
   d4db2:	d8e5      	bhi.n	d4d80 <_Z11displayInfov+0x44>
      current.latitude = t.readLatDeg();
   d4db4:	6860      	ldr	r0, [r4, #4]
   d4db6:	4e48      	ldr	r6, [pc, #288]	; (d4ed8 <_Z11displayInfov+0x19c>)
   d4db8:	f7ff fa25 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4dbc:	ee10 0a10 	vmov	r0, s0
   d4dc0:	f005 fa54 	bl	da26c <__aeabi_f2d>
   d4dc4:	e9c6 0108 	strd	r0, r1, [r6, #32]
      current.longitude = t.readLonDeg();
   d4dc8:	6860      	ldr	r0, [r4, #4]
   d4dca:	f7ff fa3d 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
   d4dce:	ee10 0a10 	vmov	r0, s0
   d4dd2:	f005 fa4b 	bl	da26c <__aeabi_f2d>
   d4dd6:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
			snprintf(buf, sizeof(buf), "location:%f,%f altitude:%f satellites:%d hdop:%l", t.readLatDeg(), t.readLonDeg(), t.getAltitude(), t.getSatellites(), t.getTinyGPSPlus()->getHDOP().value());
   d4dda:	6860      	ldr	r0, [r4, #4]
   d4ddc:	f7ff fa13 	bl	d4206 <_ZNK13LegacyAdapter10readLatDegEv.isra.0>
   d4de0:	6860      	ldr	r0, [r4, #4]
   d4de2:	ee10 6a10 	vmov	r6, s0
   d4de6:	f7ff fa2f 	bl	d4248 <_ZNK13LegacyAdapter10readLonDegEv.isra.0>
        os_thread_scheduling(false, NULL);
   d4dea:	2100      	movs	r1, #0
   d4dec:	f8d4 8004 	ldr.w	r8, [r4, #4]
   d4df0:	4608      	mov	r0, r1
   d4df2:	ee10 7a10 	vmov	r7, s0
   d4df6:	f002 ff27 	bl	d7c48 <os_thread_scheduling>
        os_thread_scheduling(true, NULL);
   d4dfa:	2100      	movs	r1, #0
   d4dfc:	2001      	movs	r0, #1
	    	return altitude;
   d4dfe:	f8d8 9080 	ldr.w	r9, [r8, #128]	; 0x80
   d4e02:	f002 ff21 	bl	d7c48 <os_thread_scheduling>
   d4e06:	6860      	ldr	r0, [r4, #4]
   d4e08:	f7ff f9ef 	bl	d41ea <_ZNK13LegacyAdapter13getSatellitesEv.isra.0>
   d4e0c:	4680      	mov	r8, r0
   d4e0e:	4620      	mov	r0, r4
   d4e10:	f000 fece 	bl	d5bb0 <_ZN12AssetTracker14getTinyGPSPlusEv>
        os_thread_scheduling(false, NULL);
   d4e14:	2100      	movs	r1, #0
   d4e16:	4604      	mov	r4, r0
   d4e18:	4608      	mov	r0, r1
   d4e1a:	f002 ff15 	bl	d7c48 <os_thread_scheduling>
     * configuration in the sky. HDOP is a factor in determining the relative accuracy of a horizontal position.
     * The smaller the DOP number, the better the geometry.
	 */
	TinyGPSDecimal getHDOP() const {
	    SINGLE_THREADED_BLOCK() {
	    	return hdop;
   d4e1e:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
        os_thread_scheduling(true, NULL);
   d4e22:	2100      	movs	r1, #0
   d4e24:	2001      	movs	r0, #1
   d4e26:	f002 ff0f 	bl	d7c48 <os_thread_scheduling>
	double meters()       { return value() / 100.0; }
   d4e2a:	4648      	mov	r0, r9
   d4e2c:	e9cd 8406 	strd	r8, r4, [sp, #24]
   d4e30:	f005 fa0a 	bl	da248 <__aeabi_i2d>
   d4e34:	4b29      	ldr	r3, [pc, #164]	; (d4edc <_Z11displayInfov+0x1a0>)
   d4e36:	2200      	movs	r2, #0
   d4e38:	f005 fb9a 	bl	da570 <__aeabi_ddiv>
		return gpsData.getAltitude().meters();
   d4e3c:	f005 fd66 	bl	da90c <__aeabi_d2f>
   d4e40:	f005 fa14 	bl	da26c <__aeabi_f2d>
   d4e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4e48:	4638      	mov	r0, r7
   d4e4a:	f005 fa0f 	bl	da26c <__aeabi_f2d>
   d4e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4e52:	4630      	mov	r0, r6
   d4e54:	f005 fa0a 	bl	da26c <__aeabi_f2d>
   d4e58:	4a21      	ldr	r2, [pc, #132]	; (d4ee0 <_Z11displayInfov+0x1a4>)
   d4e5a:	e9cd 0100 	strd	r0, r1, [sp]
   d4e5e:	2180      	movs	r1, #128	; 0x80
   d4e60:	a80a      	add	r0, sp, #40	; 0x28
   d4e62:	f003 fa63 	bl	d832c <snprintf>
			if (gettingFix) {
   d4e66:	782b      	ldrb	r3, [r5, #0]
   d4e68:	b153      	cbz	r3, d4e80 <_Z11displayInfov+0x144>
				gettingFix = false;
   d4e6a:	2300      	movs	r3, #0
   d4e6c:	702b      	strb	r3, [r5, #0]
   d4e6e:	f002 ff4b 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
				unsigned long elapsed = millis() - startFix;
   d4e72:	4b18      	ldr	r3, [pc, #96]	; (d4ed4 <_Z11displayInfov+0x198>)
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e74:	491b      	ldr	r1, [pc, #108]	; (d4ee4 <_Z11displayInfov+0x1a8>)
				unsigned long elapsed = millis() - startFix;
   d4e76:	681a      	ldr	r2, [r3, #0]
				Log.info("%lu milliseconds to get GPS fix", elapsed);
   d4e78:	1a82      	subs	r2, r0, r2
   d4e7a:	481b      	ldr	r0, [pc, #108]	; (d4ee8 <_Z11displayInfov+0x1ac>)
   d4e7c:	f7ff fa08 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			}
		}
		Log.info(buf);
   d4e80:	4819      	ldr	r0, [pc, #100]	; (d4ee8 <_Z11displayInfov+0x1ac>)
   d4e82:	a90a      	add	r1, sp, #40	; 0x28
   d4e84:	f7ff fa04 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d4e88:	f003 f998 	bl	d81bc <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d4e8c:	b1b8      	cbz	r0, d4ebe <_Z11displayInfov+0x182>
			if (millis() - lastPublish >= PUBLISH_PERIOD) {
   d4e8e:	4c17      	ldr	r4, [pc, #92]	; (d4eec <_Z11displayInfov+0x1b0>)
   d4e90:	f002 ff3a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d4e94:	6823      	ldr	r3, [r4, #0]
   d4e96:	1ac0      	subs	r0, r0, r3
   d4e98:	4b15      	ldr	r3, [pc, #84]	; (d4ef0 <_Z11displayInfov+0x1b4>)
   d4e9a:	4298      	cmp	r0, r3
   d4e9c:	d90f      	bls.n	d4ebe <_Z11displayInfov+0x182>
   d4e9e:	f002 ff33 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d4ea2:	4b14      	ldr	r3, [pc, #80]	; (d4ef4 <_Z11displayInfov+0x1b8>)
				lastPublish = millis();
   d4ea4:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4ea6:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ea8:	f88d 3000 	strb.w	r3, [sp]
   d4eac:	a808      	add	r0, sp, #32
   d4eae:	4912      	ldr	r1, [pc, #72]	; (d4ef8 <_Z11displayInfov+0x1bc>)
   d4eb0:	233c      	movs	r3, #60	; 0x3c
   d4eb2:	aa0a      	add	r2, sp, #40	; 0x28
   d4eb4:	f003 fd42 	bl	d893c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4eb8:	a809      	add	r0, sp, #36	; 0x24
   d4eba:	f7ff ff29 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
				Particle.publish("gps", buf, PRIVATE);
			}
		}
	}
}
   d4ebe:	b02b      	add	sp, #172	; 0xac
   d4ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4ec4:	2003e334 	.word	0x2003e334
   d4ec8:	2003e3c4 	.word	0x2003e3c4
   d4ecc:	2003e32c 	.word	0x2003e32c
   d4ed0:	000daf6f 	.word	0x000daf6f
   d4ed4:	2003e398 	.word	0x2003e398
   d4ed8:	2003e2b8 	.word	0x2003e2b8
   d4edc:	40590000 	.word	0x40590000
   d4ee0:	000daf89 	.word	0x000daf89
   d4ee4:	000dafba 	.word	0x000dafba
   d4ee8:	2003e624 	.word	0x2003e624
   d4eec:	2003e330 	.word	0x2003e330
   d4ef0:	0001d4bf 	.word	0x0001d4bf
   d4ef4:	2003e28c 	.word	0x2003e28c
   d4ef8:	000dafda 	.word	0x000dafda

000d4efc <_Z16takeMeasurementsv>:
{
   d4efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  displayInfo();
   d4efe:	f7ff ff1d 	bl	d4d3c <_Z11displayInfov>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4f02:	4b24      	ldr	r3, [pc, #144]	; (d4f94 <_Z16takeMeasurementsv+0x98>)
   d4f04:	2200      	movs	r2, #0
   d4f06:	6858      	ldr	r0, [r3, #4]
   d4f08:	4611      	mov	r1, r2
   d4f0a:	f003 f9b7 	bl	d827c <network_ready>
  if (Cellular.ready()) getSignalStrength();                        // Test signal strength if the cellular modem is on and ready
   d4f0e:	b108      	cbz	r0, d4f14 <_Z16takeMeasurementsv+0x18>
   d4f10:	f7ff fc26 	bl	d4760 <_Z17getSignalStrengthv>
   d4f14:	4d20      	ldr	r5, [pc, #128]	; (d4f98 <_Z16takeMeasurementsv+0x9c>)
    float temp = getTemp(sensorAddresses[i]);
   d4f16:	4f21      	ldr	r7, [pc, #132]	; (d4f9c <_Z16takeMeasurementsv+0xa0>)
{
   d4f18:	2400      	movs	r4, #0
   d4f1a:	462e      	mov	r6, r5
    float temp = getTemp(sensorAddresses[i]);
   d4f1c:	1938      	adds	r0, r7, r4
   d4f1e:	f7ff fbdb 	bl	d46d8 <_Z7getTempPh>
   d4f22:	ec51 0b10 	vmov	r0, r1, d0
   d4f26:	f005 fcf1 	bl	da90c <__aeabi_d2f>
   d4f2a:	ee07 0a90 	vmov	s15, r0
    if (!isnan(temp)) current.tempArray[i] = temp;
   d4f2e:	eef4 7a67 	vcmp.f32	s15, s15
   d4f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f36:	d603      	bvs.n	d4f40 <_Z16takeMeasurementsv+0x44>
   d4f38:	f005 f998 	bl	da26c <__aeabi_f2d>
   d4f3c:	e9c5 0100 	strd	r0, r1, [r5]
  for (int i = 0; i < nSENSORS; i++) {
   d4f40:	3408      	adds	r4, #8
   d4f42:	2c18      	cmp	r4, #24
   d4f44:	f105 0508 	add.w	r5, r5, #8
   d4f48:	d1e8      	bne.n	d4f1c <_Z16takeMeasurementsv+0x20>
  snprintf(cabinTempStr, sizeof(cabinTempStr),"%4.2f F", current.tempArray[0]);
   d4f4a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d4f4e:	210c      	movs	r1, #12
   d4f50:	e9cd 2300 	strd	r2, r3, [sp]
   d4f54:	4812      	ldr	r0, [pc, #72]	; (d4fa0 <_Z16takeMeasurementsv+0xa4>)
   d4f56:	4a13      	ldr	r2, [pc, #76]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f58:	f003 f9e8 	bl	d832c <snprintf>
  snprintf(ventTempStr, sizeof(ventTempStr),"%4.2f F", current.tempArray[1]);
   d4f5c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
   d4f60:	210c      	movs	r1, #12
   d4f62:	e9cd 2300 	strd	r2, r3, [sp]
   d4f66:	4810      	ldr	r0, [pc, #64]	; (d4fa8 <_Z16takeMeasurementsv+0xac>)
   d4f68:	4a0e      	ldr	r2, [pc, #56]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f6a:	f003 f9df 	bl	d832c <snprintf>
  snprintf(outsideTempStr, sizeof(outsideTempStr),"%4.2f F", current.tempArray[2]);
   d4f6e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   d4f72:	210c      	movs	r1, #12
   d4f74:	e9cd 2300 	strd	r2, r3, [sp]
   d4f78:	480c      	ldr	r0, [pc, #48]	; (d4fac <_Z16takeMeasurementsv+0xb0>)
   d4f7a:	4a0a      	ldr	r2, [pc, #40]	; (d4fa4 <_Z16takeMeasurementsv+0xa8>)
   d4f7c:	f003 f9d6 	bl	d832c <snprintf>
  getBatteryContext();                                               // What is the battery up to?
   d4f80:	f7ff fe62 	bl	d4c48 <_Z17getBatteryContextv>
  systemStatusWriteNeeded=true;
   d4f84:	4a0a      	ldr	r2, [pc, #40]	; (d4fb0 <_Z16takeMeasurementsv+0xb4>)
   d4f86:	2301      	movs	r3, #1
   d4f88:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded=true;
   d4f8a:	4a0a      	ldr	r2, [pc, #40]	; (d4fb4 <_Z16takeMeasurementsv+0xb8>)
   d4f8c:	7013      	strb	r3, [r2, #0]
}
   d4f8e:	b003      	add	sp, #12
   d4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f92:	bf00      	nop
   d4f94:	2003e5ec 	.word	0x2003e5ec
   d4f98:	2003e2b8 	.word	0x2003e2b8
   d4f9c:	2003f400 	.word	0x2003f400
   d4fa0:	2003e110 	.word	0x2003e110
   d4fa4:	000dafde 	.word	0x000dafde
   d4fa8:	2003e1a9 	.word	0x2003e1a9
   d4fac:	2003e121 	.word	0x2003e121
   d4fb0:	2003e3c0 	.word	0x2003e3c0
   d4fb4:	2003e2e8 	.word	0x2003e2e8

000d4fb8 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
   d4fb8:	b510      	push	{r4, lr}
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fba:	4c26      	ldr	r4, [pc, #152]	; (d5054 <_Z17checkSystemValuesv+0x9c>)
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
   d4fbc:	f7ff ff9e 	bl	d4efc <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
   d4fc0:	78a3      	ldrb	r3, [r4, #2]
   d4fc2:	2b01      	cmp	r3, #1
   d4fc4:	bf84      	itt	hi
   d4fc6:	2300      	movhi	r3, #0
   d4fc8:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4fca:	78e3      	ldrb	r3, [r4, #3]
   d4fcc:	2b01      	cmp	r3, #1
   d4fce:	d905      	bls.n	d4fdc <_Z17checkSystemValuesv+0x24>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4fd0:	f003 f8f4 	bl	d81bc <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	d03b      	beq.n	d5050 <_Z17checkSystemValuesv+0x98>
   d4fd8:	2301      	movs	r3, #1
   d4fda:	70e3      	strb	r3, [r4, #3]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fdc:	7923      	ldrb	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4fde:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4fe2:	2b01      	cmp	r3, #1
   d4fe4:	bf84      	itt	hi
   d4fe6:	2300      	movhi	r3, #0
   d4fe8:	7123      	strbhi	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d4fea:	68a3      	ldr	r3, [r4, #8]
   d4fec:	2b1d      	cmp	r3, #29
   d4fee:	bfcc      	ite	gt
   d4ff0:	2300      	movgt	r3, #0
   d4ff2:	2301      	movle	r3, #1
   d4ff4:	7163      	strb	r3, [r4, #5]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ff6:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ff8:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ffc:	2bff      	cmp	r3, #255	; 0xff
   d4ffe:	bf88      	it	hi
   d5000:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d5002:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d5006:	bf88      	it	hi
   d5008:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d500a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d500e:	d406      	bmi.n	d501e <_Z17checkSystemValuesv+0x66>
   d5010:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d5014:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d501c:	dd01      	ble.n	d5022 <_Z17checkSystemValuesv+0x6a>
   d501e:	4b0e      	ldr	r3, [pc, #56]	; (d5058 <_Z17checkSystemValuesv+0xa0>)
   d5020:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d5022:	edd4 7a06 	vldr	s15, [r4, #24]
   d5026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d502e:	d406      	bmi.n	d503e <_Z17checkSystemValuesv+0x86>
   d5030:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d5034:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d503c:	dd02      	ble.n	d5044 <_Z17checkSystemValuesv+0x8c>
   d503e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5042:	61a3      	str	r3, [r4, #24]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5044:	230a      	movs	r3, #10
   d5046:	71a3      	strb	r3, [r4, #6]
  systemStatusWriteNeeded = true;
   d5048:	4b04      	ldr	r3, [pc, #16]	; (d505c <_Z17checkSystemValuesv+0xa4>)
   d504a:	2201      	movs	r2, #1
   d504c:	701a      	strb	r2, [r3, #0]
}
   d504e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d5050:	70e0      	strb	r0, [r4, #3]
   d5052:	e7c3      	b.n	d4fdc <_Z17checkSystemValuesv+0x24>
   d5054:	2003e3a0 	.word	0x2003e3a0
   d5058:	c0a00000 	.word	0xc0a00000
   d505c:	2003e3c0 	.word	0x2003e3c0

000d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5060:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5062:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d5064:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5066:	68dd      	ldr	r5, [r3, #12]
   d5068:	2320      	movs	r3, #32
   d506a:	47a8      	blx	r5
    }
   d506c:	4620      	mov	r0, r4
   d506e:	bd38      	pop	{r3, r4, r5, pc}

000d5070 <loop>:
{
   d5070:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d5072:	4c9d      	ldr	r4, [pc, #628]	; (d52e8 <loop+0x278>)
   d5074:	7823      	ldrb	r3, [r4, #0]
   d5076:	3b01      	subs	r3, #1
{
   d5078:	b086      	sub	sp, #24
   d507a:	2b05      	cmp	r3, #5
   d507c:	d848      	bhi.n	d5110 <loop+0xa0>
   d507e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5082:	00e4      	.short	0x00e4
   d5084:	00970006 	.word	0x00970006
   d5088:	009a004c 	.word	0x009a004c
   d508c:	00be      	.short	0x00be
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d508e:	4d97      	ldr	r5, [pc, #604]	; (d52ec <loop+0x27c>)
   d5090:	792b      	ldrb	r3, [r5, #4]
   d5092:	b12b      	cbz	r3, d50a0 <loop+0x30>
   d5094:	4b96      	ldr	r3, [pc, #600]	; (d52f0 <loop+0x280>)
   d5096:	781b      	ldrb	r3, [r3, #0]
   d5098:	2b02      	cmp	r3, #2
   d509a:	d001      	beq.n	d50a0 <loop+0x30>
   d509c:	f7ff fc8a 	bl	d49b4 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
   d50a0:	4b94      	ldr	r3, [pc, #592]	; (d52f4 <loop+0x284>)
   d50a2:	781b      	ldrb	r3, [r3, #0]
   d50a4:	b10b      	cbz	r3, d50aa <loop+0x3a>
   d50a6:	f7ff fb97 	bl	d47d8 <_Z11petWatchdogv>
    if (systemStatusWriteNeeded) {
   d50aa:	4e93      	ldr	r6, [pc, #588]	; (d52f8 <loop+0x288>)
   d50ac:	7833      	ldrb	r3, [r6, #0]
   d50ae:	b133      	cbz	r3, d50be <loop+0x4e>
      fram.put(FRAM::systemStatusAddr,sysStatus);
   d50b0:	4a8e      	ldr	r2, [pc, #568]	; (d52ec <loop+0x27c>)
   d50b2:	4892      	ldr	r0, [pc, #584]	; (d52fc <loop+0x28c>)
   d50b4:	2101      	movs	r1, #1
   d50b6:	f7ff ffd3 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
      systemStatusWriteNeeded = false;
   d50ba:	2300      	movs	r3, #0
   d50bc:	7033      	strb	r3, [r6, #0]
    if (currentCountsWriteNeeded) {
   d50be:	4e90      	ldr	r6, [pc, #576]	; (d5300 <loop+0x290>)
   d50c0:	7833      	ldrb	r3, [r6, #0]
   d50c2:	b13b      	cbz	r3, d50d4 <loop+0x64>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50c4:	2330      	movs	r3, #48	; 0x30
   d50c6:	4a8f      	ldr	r2, [pc, #572]	; (d5304 <loop+0x294>)
   d50c8:	488c      	ldr	r0, [pc, #560]	; (d52fc <loop+0x28c>)
   d50ca:	2150      	movs	r1, #80	; 0x50
   d50cc:	f001 fbcd 	bl	d686a <_ZN6MB85RC9writeDataEjPKhj>
      currentCountsWriteNeeded = false;
   d50d0:	2300      	movs	r3, #0
   d50d2:	7033      	strb	r3, [r6, #0]
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;
   d50d4:	796b      	ldrb	r3, [r5, #5]
   d50d6:	b10b      	cbz	r3, d50dc <loop+0x6c>
   d50d8:	2304      	movs	r3, #4
   d50da:	7023      	strb	r3, [r4, #0]
    if ((Time.minute() % sysStatus.sampleIntervalMin == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;   // sub hourly interval
   d50dc:	f004 fc9c 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d50e0:	79ab      	ldrb	r3, [r5, #6]
   d50e2:	fb90 f2f3 	sdiv	r2, r0, r3
   d50e6:	fb02 0313 	mls	r3, r2, r3, r0
   d50ea:	b943      	cbnz	r3, d50fe <loop+0x8e>
   d50ec:	f004 fc94 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d50f0:	4b85      	ldr	r3, [pc, #532]	; (d5308 <loop+0x298>)
   d50f2:	681b      	ldr	r3, [r3, #0]
   d50f4:	4298      	cmp	r0, r3
   d50f6:	d002      	beq.n	d50fe <loop+0x8e>
   d50f8:	2303      	movs	r3, #3
      state = ERROR_STATE;                                            // Response timed out
   d50fa:	7023      	strb	r3, [r4, #0]
   d50fc:	e008      	b.n	d5110 <loop+0xa0>
    else if ((Time.minute() == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;           //  on hourly interval
   d50fe:	f004 fc8b 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d5102:	b928      	cbnz	r0, d5110 <loop+0xa0>
   d5104:	f004 fc88 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d5108:	4b7f      	ldr	r3, [pc, #508]	; (d5308 <loop+0x298>)
   d510a:	681b      	ldr	r3, [r3, #0]
   d510c:	4298      	cmp	r0, r3
   d510e:	d1f3      	bne.n	d50f8 <loop+0x88>
  rtc.loop();                                                         // keeps the clock up to date
   d5110:	487e      	ldr	r0, [pc, #504]	; (d530c <loop+0x29c>)
   d5112:	f001 ff8d 	bl	d7030 <_ZN8MCP794104loopEv>
}
   d5116:	b006      	add	sp, #24
   d5118:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d511a:	4d74      	ldr	r5, [pc, #464]	; (d52ec <loop+0x27c>)
   d511c:	792b      	ldrb	r3, [r5, #4]
   d511e:	b12b      	cbz	r3, d512c <loop+0xbc>
   d5120:	4b73      	ldr	r3, [pc, #460]	; (d52f0 <loop+0x280>)
   d5122:	781b      	ldrb	r3, [r3, #0]
   d5124:	2b04      	cmp	r3, #4
   d5126:	d001      	beq.n	d512c <loop+0xbc>
   d5128:	f7ff fc44 	bl	d49b4 <_Z22publishStateTransitionv>
    getBatteryContext();                                              // Check to make sure we should still be in the low battery state
   d512c:	f7ff fd8c 	bl	d4c48 <_Z17getBatteryContextv>
    if (!sysStatus.lowBatteryMode) {                                  // If not, we need to exit this state and go back to IDLE_STATE
   d5130:	796b      	ldrb	r3, [r5, #5]
   d5132:	b90b      	cbnz	r3, d5138 <loop+0xc8>
      state = IDLE_STATE;
   d5134:	2302      	movs	r3, #2
   d5136:	e7e0      	b.n	d50fa <loop+0x8a>
    else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       // Troubleshooting code
   d5138:	f004 fc51 	bl	d99de <_ZN9TimeClass3nowEv>
   d513c:	69eb      	ldr	r3, [r5, #28]
   d513e:	1ac0      	subs	r0, r0, r3
   d5140:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5144:	d910      	bls.n	d5168 <loop+0xf8>
      connectToParticle();
   d5146:	f7ff fba7 	bl	d4898 <_Z17connectToParticlev>
   d514a:	4b71      	ldr	r3, [pc, #452]	; (d5310 <loop+0x2a0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d514c:	4a71      	ldr	r2, [pc, #452]	; (d5314 <loop+0x2a4>)
   d514e:	781b      	ldrb	r3, [r3, #0]
   d5150:	f88d 3000 	strb.w	r3, [sp]
   d5154:	a802      	add	r0, sp, #8
   d5156:	4970      	ldr	r1, [pc, #448]	; (d5318 <loop+0x2a8>)
   d5158:	233c      	movs	r3, #60	; 0x3c
   d515a:	f003 fbef 	bl	d893c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d515e:	a803      	add	r0, sp, #12
   d5160:	f7ff fdd6 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    state = REPORTING_STATE;
   d5164:	2305      	movs	r3, #5
   d5166:	e7c8      	b.n	d50fa <loop+0x8a>
    if (Time.minute() > 1 && sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle after the first minute
   d5168:	f004 fc56 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d516c:	2801      	cmp	r0, #1
   d516e:	dd03      	ble.n	d5178 <loop+0x108>
   d5170:	78eb      	ldrb	r3, [r5, #3]
   d5172:	b10b      	cbz	r3, d5178 <loop+0x108>
   d5174:	f7ff fbde 	bl	d4934 <_Z22disconnectFromParticlev>
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d5178:	2100      	movs	r1, #0
   d517a:	2007      	movs	r0, #7
   d517c:	f004 fe97 	bl	d9eae <digitalWrite>
      petWatchdog();
   d5180:	f7ff fb2a 	bl	d47d8 <_Z11petWatchdogv>
      int wakeInSeconds = constrain((60 - Time.minute()) * 60, 1, 60 * 60);   // Sleep till the top of the hour
   d5184:	f004 fc48 	bl	d9a18 <_ZN9TimeClass6minuteEv>
   d5188:	213c      	movs	r1, #60	; 0x3c
   d518a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d518e:	4341      	muls	r1, r0
      rtc.setAlarm(wakeInSeconds);                                      // The Real Time Clock will turn the Enable pin back on to wake the device
   d5190:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
   d5194:	f04f 0201 	mov.w	r2, #1
   d5198:	bfa8      	it	ge
   d519a:	f44f 6161 	movge.w	r1, #3600	; 0xe10
   d519e:	4291      	cmp	r1, r2
   d51a0:	f04f 0300 	mov.w	r3, #0
   d51a4:	bfb8      	it	lt
   d51a6:	4611      	movlt	r1, r2
   d51a8:	4858      	ldr	r0, [pc, #352]	; (d530c <loop+0x29c>)
   d51aa:	f001 ffe9 	bl	d7180 <_ZN8MCP794108setAlarmEibi>
    } break;
   d51ae:	e7af      	b.n	d5110 <loop+0xa0>
    takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d51b0:	f7ff fea4 	bl	d4efc <_Z16takeMeasurementsv>
   d51b4:	e7d6      	b.n	d5164 <loop+0xf4>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51b6:	4d4d      	ldr	r5, [pc, #308]	; (d52ec <loop+0x27c>)
   d51b8:	792a      	ldrb	r2, [r5, #4]
   d51ba:	b12a      	cbz	r2, d51c8 <loop+0x158>
   d51bc:	4b4c      	ldr	r3, [pc, #304]	; (d52f0 <loop+0x280>)
   d51be:	781b      	ldrb	r3, [r3, #0]
   d51c0:	2b05      	cmp	r3, #5
   d51c2:	d001      	beq.n	d51c8 <loop+0x158>
   d51c4:	f7ff fbf6 	bl	d49b4 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();              // Only attempt to connect if not already New process to get connected
   d51c8:	78eb      	ldrb	r3, [r5, #3]
   d51ca:	b90b      	cbnz	r3, d51d0 <loop+0x160>
   d51cc:	f7ff fb64 	bl	d4898 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51d0:	f002 fff4 	bl	d81bc <spark_cloud_flag_connected>
    if (!Particle.connected()) connectToParticle();                   // Just to make sure
   d51d4:	b908      	cbnz	r0, d51da <loop+0x16a>
   d51d6:	f7ff fb5f 	bl	d4898 <_Z17connectToParticlev>
   d51da:	f002 ffef 	bl	d81bc <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d51de:	b140      	cbz	r0, d51f2 <loop+0x182>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
   d51e0:	f004 fc0e 	bl	d9a00 <_ZN9TimeClass4hourEv>
   d51e4:	b908      	cbnz	r0, d51ea <loop+0x17a>
   d51e6:	f7ff fc1b 	bl	d4a20 <_Z12dailyCleanupv>
      sendEvent();                                                    // Send data to Ubidots
   d51ea:	f7ff fa13 	bl	d4614 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d51ee:	2306      	movs	r3, #6
   d51f0:	e783      	b.n	d50fa <loop+0x8a>
   d51f2:	f002 fd89 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d51f6:	4b49      	ldr	r3, [pc, #292]	; (d531c <loop+0x2ac>)
   d51f8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d51fa:	2301      	movs	r3, #1
   d51fc:	e77d      	b.n	d50fa <loop+0x8a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d51fe:	4b3b      	ldr	r3, [pc, #236]	; (d52ec <loop+0x27c>)
   d5200:	791b      	ldrb	r3, [r3, #4]
   d5202:	b12b      	cbz	r3, d5210 <loop+0x1a0>
   d5204:	4b3a      	ldr	r3, [pc, #232]	; (d52f0 <loop+0x280>)
   d5206:	781b      	ldrb	r3, [r3, #0]
   d5208:	2b06      	cmp	r3, #6
   d520a:	d001      	beq.n	d5210 <loop+0x1a0>
   d520c:	f7ff fbd2 	bl	d49b4 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received back to IDLE state
   d5210:	4b43      	ldr	r3, [pc, #268]	; (d5320 <loop+0x2b0>)
   d5212:	781b      	ldrb	r3, [r3, #0]
   d5214:	2b00      	cmp	r3, #0
   d5216:	d08d      	beq.n	d5134 <loop+0xc4>
   d5218:	f002 fd76 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d521c:	4b41      	ldr	r3, [pc, #260]	; (d5324 <loop+0x2b4>)
   d521e:	681b      	ldr	r3, [r3, #0]
   d5220:	1ac0      	subs	r0, r0, r3
   d5222:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5226:	4298      	cmp	r0, r3
   d5228:	f67f af72 	bls.w	d5110 <loop+0xa0>
   d522c:	f002 fd6c 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5230:	4b3a      	ldr	r3, [pc, #232]	; (d531c <loop+0x2ac>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5232:	4a3d      	ldr	r2, [pc, #244]	; (d5328 <loop+0x2b8>)
      resetTimeStamp = millis();
   d5234:	6018      	str	r0, [r3, #0]
        val_(0) {
   d5236:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d5238:	f88d 3000 	strb.w	r3, [sp]
   d523c:	4b34      	ldr	r3, [pc, #208]	; (d5310 <loop+0x2a0>)
   d523e:	493b      	ldr	r1, [pc, #236]	; (d532c <loop+0x2bc>)
   d5240:	781b      	ldrb	r3, [r3, #0]
   d5242:	483b      	ldr	r0, [pc, #236]	; (d5330 <loop+0x2c0>)
   d5244:	f7ff f856 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5248:	e7d7      	b.n	d51fa <loop+0x18a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d524a:	4c28      	ldr	r4, [pc, #160]	; (d52ec <loop+0x27c>)
   d524c:	7923      	ldrb	r3, [r4, #4]
   d524e:	b12b      	cbz	r3, d525c <loop+0x1ec>
   d5250:	4b27      	ldr	r3, [pc, #156]	; (d52f0 <loop+0x280>)
   d5252:	781b      	ldrb	r3, [r3, #0]
   d5254:	2b01      	cmp	r3, #1
   d5256:	d001      	beq.n	d525c <loop+0x1ec>
   d5258:	f7ff fbac 	bl	d49b4 <_Z22publishStateTransitionv>
   d525c:	f002 fd54 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d5260:	4b2e      	ldr	r3, [pc, #184]	; (d531c <loop+0x2ac>)
   d5262:	681b      	ldr	r3, [r3, #0]
   d5264:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d5268:	3330      	adds	r3, #48	; 0x30
   d526a:	4283      	cmp	r3, r0
   d526c:	f4bf af50 	bcs.w	d5110 <loop+0xa0>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
   d5270:	6923      	ldr	r3, [r4, #16]
   d5272:	2b03      	cmp	r3, #3
   d5274:	dc13      	bgt.n	d529e <loop+0x22e>
   d5276:	f002 ffa1 	bl	d81bc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d527a:	b148      	cbz	r0, d5290 <loop+0x220>
   d527c:	2300      	movs	r3, #0
   d527e:	f88d 3000 	strb.w	r3, [sp]
   d5282:	4b23      	ldr	r3, [pc, #140]	; (d5310 <loop+0x2a0>)
   d5284:	4a2b      	ldr	r2, [pc, #172]	; (d5334 <loop+0x2c4>)
   d5286:	781b      	ldrb	r3, [r3, #0]
   d5288:	4923      	ldr	r1, [pc, #140]	; (d5318 <loop+0x2a8>)
   d528a:	4829      	ldr	r0, [pc, #164]	; (d5330 <loop+0x2c0>)
   d528c:	f7ff f832 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d5290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5294:	f003 f892 	bl	d83bc <delay>
        System.reset();
   d5298:	f004 f9bf 	bl	d961a <_ZN11SystemClass5resetEv>
   d529c:	e738      	b.n	d5110 <loop+0xa0>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d529e:	f004 fb9e 	bl	d99de <_ZN9TimeClass3nowEv>
   d52a2:	f002 ff8b 	bl	d81bc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);            // Brodcase Reset Action
   d52a6:	b148      	cbz	r0, d52bc <loop+0x24c>
   d52a8:	2300      	movs	r3, #0
   d52aa:	f88d 3000 	strb.w	r3, [sp]
   d52ae:	4b18      	ldr	r3, [pc, #96]	; (d5310 <loop+0x2a0>)
   d52b0:	4a21      	ldr	r2, [pc, #132]	; (d5338 <loop+0x2c8>)
   d52b2:	781b      	ldrb	r3, [r3, #0]
   d52b4:	4918      	ldr	r1, [pc, #96]	; (d5318 <loop+0x2a8>)
   d52b6:	481e      	ldr	r0, [pc, #120]	; (d5330 <loop+0x2c0>)
   d52b8:	f7ff f81c 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d52bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d52c0:	f003 f87c 	bl	d83bc <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d52c4:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52c6:	4a09      	ldr	r2, [pc, #36]	; (d52ec <loop+0x27c>)
   d52c8:	480c      	ldr	r0, [pc, #48]	; (d52fc <loop+0x28c>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d52ca:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d52cc:	2101      	movs	r1, #1
   d52ce:	f7ff fec7 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        hardResetNow("1");
   d52d2:	491a      	ldr	r1, [pc, #104]	; (d533c <loop+0x2cc>)
   d52d4:	a802      	add	r0, sp, #8
   d52d6:	f004 f938 	bl	d954a <_ZN6StringC1EPKc>
   d52da:	a802      	add	r0, sp, #8
   d52dc:	f7ff f862 	bl	d43a4 <_Z12hardResetNow6String>
   d52e0:	a802      	add	r0, sp, #8
   d52e2:	f004 f8e7 	bl	d94b4 <_ZN6StringD1Ev>
   d52e6:	e713      	b.n	d5110 <loop+0xa0>
   d52e8:	2003e39c 	.word	0x2003e39c
   d52ec:	2003e3a0 	.word	0x2003e3a0
   d52f0:	2003e33c 	.word	0x2003e33c
   d52f4:	2003e3f4 	.word	0x2003e3f4
   d52f8:	2003e3c0 	.word	0x2003e3c0
   d52fc:	2003e31c 	.word	0x2003e31c
   d5300:	2003e2e8 	.word	0x2003e2e8
   d5304:	2003e2b8 	.word	0x2003e2b8
   d5308:	2003e2f0 	.word	0x2003e2f0
   d530c:	2003e37c 	.word	0x2003e37c
   d5310:	2003e28c 	.word	0x2003e28c
   d5314:	000dafe6 	.word	0x000dafe6
   d5318:	000daffb 	.word	0x000daffb
   d531c:	2003e378 	.word	0x2003e378
   d5320:	2003e2fe 	.word	0x2003e2fe
   d5324:	2003e3f8 	.word	0x2003e3f8
   d5328:	000db774 	.word	0x000db774
   d532c:	000db001 	.word	0x000db001
   d5330:	2003e340 	.word	0x2003e340
   d5334:	000db01a 	.word	0x000db01a
   d5338:	000db02e 	.word	0x000db02e
   d533c:	000dad4c 	.word	0x000dad4c

000d5340 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5340:	b507      	push	{r0, r1, r2, lr}
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d5342:	f7ff faa9 	bl	d4898 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
   d5346:	f7ff fdd9 	bl	d4efc <_Z16takeMeasurementsv>
   d534a:	f002 ff37 	bl	d81bc <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d534e:	b148      	cbz	r0, d5364 <_Z18loadSystemDefaultsv+0x24>
   d5350:	2300      	movs	r3, #0
   d5352:	f88d 3000 	strb.w	r3, [sp]
   d5356:	4b10      	ldr	r3, [pc, #64]	; (d5398 <_Z18loadSystemDefaultsv+0x58>)
   d5358:	4a10      	ldr	r2, [pc, #64]	; (d539c <_Z18loadSystemDefaultsv+0x5c>)
   d535a:	781b      	ldrb	r3, [r3, #0]
   d535c:	4910      	ldr	r1, [pc, #64]	; (d53a0 <_Z18loadSystemDefaultsv+0x60>)
   d535e:	4811      	ldr	r0, [pc, #68]	; (d53a4 <_Z18loadSystemDefaultsv+0x64>)
   d5360:	f7fe ffc8 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d5364:	4a10      	ldr	r2, [pc, #64]	; (d53a8 <_Z18loadSystemDefaultsv+0x68>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5366:	4811      	ldr	r0, [pc, #68]	; (d53ac <_Z18loadSystemDefaultsv+0x6c>)
  sysStatus.metricUnits = false;
   d5368:	2300      	movs	r3, #0
   d536a:	7093      	strb	r3, [r2, #2]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
   d536c:	6893      	ldr	r3, [r2, #8]
   d536e:	2b1d      	cmp	r3, #29
   d5370:	bfcc      	ite	gt
   d5372:	2300      	movgt	r3, #0
   d5374:	2301      	movle	r3, #1
   d5376:	7153      	strb	r3, [r2, #5]
  sysStatus.sampleIntervalMin = 10;                                 // Default reading every 10 minutes
   d5378:	230a      	movs	r3, #10
   d537a:	7193      	strb	r3, [r2, #6]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d537c:	4b0c      	ldr	r3, [pc, #48]	; (d53b0 <_Z18loadSystemDefaultsv+0x70>)
   d537e:	6153      	str	r3, [r2, #20]
  sysStatus.structuresVersion = 1;
   d5380:	2101      	movs	r1, #1
  sysStatus.dstOffset = 1;
   d5382:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  sysStatus.structuresVersion = 1;
   d5386:	7011      	strb	r1, [r2, #0]
  sysStatus.verboseMode = true;
   d5388:	7111      	strb	r1, [r2, #4]
  sysStatus.dstOffset = 1;
   d538a:	6193      	str	r3, [r2, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d538c:	f7ff fe68 	bl	d5060 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5390:	b003      	add	sp, #12
   d5392:	f85d fb04 	ldr.w	pc, [sp], #4
   d5396:	bf00      	nop
   d5398:	2003e28c 	.word	0x2003e28c
   d539c:	000db048 	.word	0x000db048
   d53a0:	000dae0b 	.word	0x000dae0b
   d53a4:	2003e340 	.word	0x2003e340
   d53a8:	2003e3a0 	.word	0x2003e3a0
   d53ac:	2003e31c 	.word	0x2003e31c
   d53b0:	c0a00000 	.word	0xc0a00000
   d53b4:	00000000 	.word	0x00000000

000d53b8 <setup>:
{
   d53b8:	b570      	push	{r4, r5, r6, lr}
   d53ba:	b0a8      	sub	sp, #160	; 0xa0
  Serial.begin(9600);
   d53bc:	f004 fc54 	bl	d9c68 <_Z16_fetch_usbserialv>
   d53c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d53c4:	f004 fc44 	bl	d9c50 <_ZN9USBSerial5beginEl>
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d53c8:	2100      	movs	r1, #0
   d53ca:	2008      	movs	r0, #8
   d53cc:	f004 fd5e 	bl	d9e8c <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d53d0:	2100      	movs	r1, #0
   d53d2:	2004      	movs	r0, #4
   d53d4:	f004 fd5a 	bl	d9e8c <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d53d8:	2101      	movs	r1, #1
   d53da:	2007      	movs	r0, #7
   d53dc:	f004 fd56 	bl	d9e8c <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d53e0:	2101      	movs	r1, #1
   d53e2:	2005      	movs	r0, #5
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d53e4:	2400      	movs	r4, #0
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
   d53e6:	f004 fd51 	bl	d9e8c <pinMode>
  digitalWrite(blueLED,HIGH);
   d53ea:	2101      	movs	r1, #1
   d53ec:	2007      	movs	r0, #7
   d53ee:	f004 fd5e 	bl	d9eae <digitalWrite>
  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
   d53f2:	f7ff f9f1 	bl	d47d8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
   d53f6:	49a4      	ldr	r1, [pc, #656]	; (d5688 <setup+0x2d0>)
   d53f8:	9400      	str	r4, [sp, #0]
   d53fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d53fe:	2201      	movs	r2, #1
   d5400:	2008      	movs	r0, #8
   d5402:	f003 fcdb 	bl	d8dbc <_Z15attachInterrupttPFvvE13InterruptModeah>
    static String deviceID(void) { return spark_deviceID(); }
   d5406:	a804      	add	r0, sp, #16
   d5408:	f002 fee0 	bl	d81cc <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d540c:	4623      	mov	r3, r4
   d540e:	227d      	movs	r2, #125	; 0x7d
   d5410:	a908      	add	r1, sp, #32
   d5412:	a804      	add	r0, sp, #16
   d5414:	f004 f8d9 	bl	d95ca <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5418:	4623      	mov	r3, r4
   d541a:	4622      	mov	r2, r4
   d541c:	499b      	ldr	r1, [pc, #620]	; (d568c <setup+0x2d4>)
   d541e:	4d9c      	ldr	r5, [pc, #624]	; (d5690 <setup+0x2d8>)
   d5420:	4e9c      	ldr	r6, [pc, #624]	; (d5694 <setup+0x2dc>)
   d5422:	e9cd 4400 	strd	r4, r4, [sp]
   d5426:	a808      	add	r0, sp, #32
   d5428:	f002 fee0 	bl	d81ec <spark_subscribe>
        return _variable(varKey, var, STRING);
   d542c:	499a      	ldr	r1, [pc, #616]	; (d5698 <setup+0x2e0>)
   d542e:	489b      	ldr	r0, [pc, #620]	; (d569c <setup+0x2e4>)
   d5430:	f7fe fed7 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5434:	499a      	ldr	r1, [pc, #616]	; (d56a0 <setup+0x2e8>)
   d5436:	489b      	ldr	r0, [pc, #620]	; (d56a4 <setup+0x2ec>)
   d5438:	f7fe fed3 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d543c:	4623      	mov	r3, r4
   d543e:	2202      	movs	r2, #2
   d5440:	4999      	ldr	r1, [pc, #612]	; (d56a8 <setup+0x2f0>)
   d5442:	489a      	ldr	r0, [pc, #616]	; (d56ac <setup+0x2f4>)
   d5444:	f002 fe9a 	bl	d817c <spark_variable>
        return _variable(varKey, var, STRING);
   d5448:	4999      	ldr	r1, [pc, #612]	; (d56b0 <setup+0x2f8>)
   d544a:	489a      	ldr	r0, [pc, #616]	; (d56b4 <setup+0x2fc>)
   d544c:	f7fe fec9 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5450:	4999      	ldr	r1, [pc, #612]	; (d56b8 <setup+0x300>)
   d5452:	489a      	ldr	r0, [pc, #616]	; (d56bc <setup+0x304>)
   d5454:	f7fe fec5 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5458:	4999      	ldr	r1, [pc, #612]	; (d56c0 <setup+0x308>)
   d545a:	489a      	ldr	r0, [pc, #616]	; (d56c4 <setup+0x30c>)
   d545c:	f7fe fec1 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5460:	4999      	ldr	r1, [pc, #612]	; (d56c8 <setup+0x310>)
   d5462:	489a      	ldr	r0, [pc, #616]	; (d56cc <setup+0x314>)
   d5464:	f7fe febd 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5468:	4999      	ldr	r1, [pc, #612]	; (d56d0 <setup+0x318>)
   d546a:	489a      	ldr	r0, [pc, #616]	; (d56d4 <setup+0x31c>)
   d546c:	4623      	mov	r3, r4
   d546e:	2202      	movs	r2, #2
   d5470:	f002 fe84 	bl	d817c <spark_variable>
   d5474:	4623      	mov	r3, r4
   d5476:	2202      	movs	r2, #2
   d5478:	4997      	ldr	r1, [pc, #604]	; (d56d8 <setup+0x320>)
   d547a:	4898      	ldr	r0, [pc, #608]	; (d56dc <setup+0x324>)
   d547c:	f002 fe7e 	bl	d817c <spark_variable>
        return _variable(varKey, var, STRING);
   d5480:	4997      	ldr	r1, [pc, #604]	; (d56e0 <setup+0x328>)
   d5482:	4898      	ldr	r0, [pc, #608]	; (d56e4 <setup+0x32c>)
   d5484:	f7fe fead 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5488:	4997      	ldr	r1, [pc, #604]	; (d56e8 <setup+0x330>)
   d548a:	4898      	ldr	r0, [pc, #608]	; (d56ec <setup+0x334>)
   d548c:	f7fe fea9 	bl	d41e2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5490:	4a97      	ldr	r2, [pc, #604]	; (d56f0 <setup+0x338>)
   d5492:	4998      	ldr	r1, [pc, #608]	; (d56f4 <setup+0x33c>)
   d5494:	4898      	ldr	r0, [pc, #608]	; (d56f8 <setup+0x340>)
   d5496:	f003 f94b 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d549a:	4a98      	ldr	r2, [pc, #608]	; (d56fc <setup+0x344>)
   d549c:	4998      	ldr	r1, [pc, #608]	; (d5700 <setup+0x348>)
   d549e:	4896      	ldr	r0, [pc, #600]	; (d56f8 <setup+0x340>)
   d54a0:	f003 f946 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54a4:	4a97      	ldr	r2, [pc, #604]	; (d5704 <setup+0x34c>)
   d54a6:	4998      	ldr	r1, [pc, #608]	; (d5708 <setup+0x350>)
   d54a8:	4893      	ldr	r0, [pc, #588]	; (d56f8 <setup+0x340>)
   d54aa:	f003 f941 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54ae:	4a97      	ldr	r2, [pc, #604]	; (d570c <setup+0x354>)
   d54b0:	4997      	ldr	r1, [pc, #604]	; (d5710 <setup+0x358>)
   d54b2:	4891      	ldr	r0, [pc, #580]	; (d56f8 <setup+0x340>)
   d54b4:	f003 f93c 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54b8:	4a96      	ldr	r2, [pc, #600]	; (d5714 <setup+0x35c>)
   d54ba:	4997      	ldr	r1, [pc, #604]	; (d5718 <setup+0x360>)
   d54bc:	488e      	ldr	r0, [pc, #568]	; (d56f8 <setup+0x340>)
   d54be:	f003 f937 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54c2:	4a96      	ldr	r2, [pc, #600]	; (d571c <setup+0x364>)
   d54c4:	4996      	ldr	r1, [pc, #600]	; (d5720 <setup+0x368>)
   d54c6:	488c      	ldr	r0, [pc, #560]	; (d56f8 <setup+0x340>)
   d54c8:	f003 f932 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d54cc:	4a75      	ldr	r2, [pc, #468]	; (d56a4 <setup+0x2ec>)
   d54ce:	4995      	ldr	r1, [pc, #596]	; (d5724 <setup+0x36c>)
   d54d0:	4889      	ldr	r0, [pc, #548]	; (d56f8 <setup+0x340>)
   d54d2:	f003 f92d 	bl	d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  fram.begin();                                                       // Initialize the FRAM module
   d54d6:	4894      	ldr	r0, [pc, #592]	; (d5728 <setup+0x370>)
   d54d8:	f001 f93a 	bl	d6750 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54dc:	4621      	mov	r1, r4
   d54de:	4892      	ldr	r0, [pc, #584]	; (d5728 <setup+0x370>)
   d54e0:	2301      	movs	r3, #1
   d54e2:	f10d 020b 	add.w	r2, sp, #11
   d54e6:	f001 f975 	bl	d67d4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d54ea:	f89d 100b 	ldrb.w	r1, [sp, #11]
   d54ee:	2901      	cmp	r1, #1
   d54f0:	f000 80b2 	beq.w	d5658 <setup+0x2a0>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d54f4:	488c      	ldr	r0, [pc, #560]	; (d5728 <setup+0x370>)
   d54f6:	f001 f935 	bl	d6764 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d54fa:	4a8c      	ldr	r2, [pc, #560]	; (d572c <setup+0x374>)
   d54fc:	488a      	ldr	r0, [pc, #552]	; (d5728 <setup+0x370>)
   d54fe:	2304      	movs	r3, #4
   d5500:	4621      	mov	r1, r4
   d5502:	f001 f9b2 	bl	d686a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5506:	2301      	movs	r3, #1
   d5508:	4887      	ldr	r0, [pc, #540]	; (d5728 <setup+0x370>)
   d550a:	f10d 020b 	add.w	r2, sp, #11
   d550e:	4621      	mov	r1, r4
   d5510:	f001 f960 	bl	d67d4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d5514:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5518:	2b01      	cmp	r3, #1
   d551a:	f000 809a 	beq.w	d5652 <setup+0x29a>
   d551e:	2301      	movs	r3, #1
   d5520:	7033      	strb	r3, [r6, #0]
  checkSystemValues();                                                // Make sure System values are all in valid range
   d5522:	f7ff fd49 	bl	d4fb8 <_Z17checkSystemValuesv>
  getBatteryContext();                                                // See if we have enought juice
   d5526:	f7ff fb8f 	bl	d4c48 <_Z17getBatteryContextv>
        int reason = RESET_REASON_NONE;
   d552a:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d552c:	4611      	mov	r1, r2
   d552e:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5530:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5532:	f002 fbc9 	bl	d7cc8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5536:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5538:	2b14      	cmp	r3, #20
   d553a:	f04f 0200 	mov.w	r2, #0
   d553e:	f040 8091 	bne.w	d5664 <setup+0x2ac>
    sysStatus.resetCount++;
   d5542:	692b      	ldr	r3, [r5, #16]
   d5544:	3301      	adds	r3, #1
   d5546:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d5548:	4b79      	ldr	r3, [pc, #484]	; (d5730 <setup+0x378>)
   d554a:	2201      	movs	r2, #1
   d554c:	701a      	strb	r2, [r3, #0]
  snprintf(sampleIntervalStr, sizeof(sampleIntervalStr),"%i minutes", sysStatus.sampleIntervalMin);
   d554e:	79ab      	ldrb	r3, [r5, #6]
   d5550:	4a78      	ldr	r2, [pc, #480]	; (d5734 <setup+0x37c>)
   d5552:	4853      	ldr	r0, [pc, #332]	; (d56a0 <setup+0x2e8>)
   d5554:	210c      	movs	r1, #12
   d5556:	f002 fee9 	bl	d832c <snprintf>
  rtc.setup();                                                        // Start the real time clock
   d555a:	4877      	ldr	r0, [pc, #476]	; (d5738 <setup+0x380>)
   d555c:	f001 fc62 	bl	d6e24 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5560:	2100      	movs	r1, #0
   d5562:	4875      	ldr	r0, [pc, #468]	; (d5738 <setup+0x380>)
   d5564:	f001 fdad 	bl	d70c2 <_ZN8MCP7941010clearAlarmEi>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d5568:	ed95 0a06 	vldr	s0, [r5, #24]
   d556c:	f004 f8ee 	bl	d974c <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid()) Time.setTime(rtc.getRTCTime());
   d5570:	f004 fa18 	bl	d99a4 <_ZN9TimeClass7isValidEv>
   d5574:	b920      	cbnz	r0, d5580 <setup+0x1c8>
   d5576:	4870      	ldr	r0, [pc, #448]	; (d5738 <setup+0x380>)
   d5578:	f001 fc41 	bl	d6dfe <_ZNK8MCP7941010getRTCTimeEv>
   d557c:	f004 f918 	bl	d97b0 <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5580:	f7ff fa8c 	bl	d4a9c <_Z8isDSTusav>
   d5584:	2800      	cmp	r0, #0
   d5586:	d077      	beq.n	d5678 <setup+0x2c0>
   d5588:	f004 f8fe 	bl	d9788 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d558c:	ed95 0a05 	vldr	s0, [r5, #20]
   d5590:	f004 f8bc 	bl	d970c <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5594:	f004 fa74 	bl	d9a80 <_ZN9TimeClass5localEv>
   d5598:	4604      	mov	r4, r0
   d559a:	f004 fa20 	bl	d99de <_ZN9TimeClass3nowEv>
   d559e:	1a20      	subs	r0, r4, r0
   d55a0:	f004 fe52 	bl	da248 <__aeabi_i2d>
   d55a4:	a336      	add	r3, pc, #216	; (adr r3, d5680 <setup+0x2c8>)
   d55a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55aa:	f004 ffe1 	bl	da570 <__aeabi_ddiv>
   d55ae:	4a63      	ldr	r2, [pc, #396]	; (d573c <setup+0x384>)
   d55b0:	e9cd 0100 	strd	r0, r1, [sp]
   d55b4:	210a      	movs	r1, #10
   d55b6:	484a      	ldr	r0, [pc, #296]	; (d56e0 <setup+0x328>)
   d55b8:	f002 feb8 	bl	d832c <snprintf>
   d55bc:	4a60      	ldr	r2, [pc, #384]	; (d5740 <setup+0x388>)
   d55be:	485a      	ldr	r0, [pc, #360]	; (d5728 <setup+0x370>)
   d55c0:	2330      	movs	r3, #48	; 0x30
   d55c2:	2150      	movs	r1, #80	; 0x50
   d55c4:	f001 f906 	bl	d67d4 <_ZN6MB85RC8readDataEjPhj>
  currentHourlyPeriod = Time.hour();                                   // The local time hourly period for reporting purposes
   d55c8:	f004 fa1a 	bl	d9a00 <_ZN9TimeClass4hourEv>
   d55cc:	4b5d      	ldr	r3, [pc, #372]	; (d5744 <setup+0x38c>)
   d55ce:	6018      	str	r0, [r3, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d55d0:	f7ff f934 	bl	d483c <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d55d4:	2004      	movs	r0, #4
   d55d6:	f004 fc83 	bl	d9ee0 <digitalRead>
   d55da:	b908      	cbnz	r0, d55e0 <setup+0x228>
   d55dc:	f7ff feb0 	bl	d5340 <_Z18loadSystemDefaultsv>
  ds18b20.resetsearch();                 // initialise for sensor search
   d55e0:	4859      	ldr	r0, [pc, #356]	; (d5748 <setup+0x390>)
   d55e2:	f000 ff2a 	bl	d643a <_ZN7DS18B2011resetsearchEv>
    ds18b20.search(sensorAddresses[i]); // and if available store
   d55e6:	4959      	ldr	r1, [pc, #356]	; (d574c <setup+0x394>)
   d55e8:	4857      	ldr	r0, [pc, #348]	; (d5748 <setup+0x390>)
   d55ea:	f000 ff0a 	bl	d6402 <_ZN7DS18B206searchEPh>
   d55ee:	4958      	ldr	r1, [pc, #352]	; (d5750 <setup+0x398>)
   d55f0:	4855      	ldr	r0, [pc, #340]	; (d5748 <setup+0x390>)
   d55f2:	f000 ff06 	bl	d6402 <_ZN7DS18B206searchEPh>
   d55f6:	4957      	ldr	r1, [pc, #348]	; (d5754 <setup+0x39c>)
   d55f8:	4853      	ldr	r0, [pc, #332]	; (d5748 <setup+0x390>)
   d55fa:	f000 ff02 	bl	d6402 <_ZN7DS18B206searchEPh>
  t.withI2C();
   d55fe:	f004 fc9b 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d5602:	2242      	movs	r2, #66	; 0x42
   d5604:	4601      	mov	r1, r0
   d5606:	4854      	ldr	r0, [pc, #336]	; (d5758 <setup+0x3a0>)
   d5608:	f000 fa44 	bl	d5a94 <_ZN12AssetTracker7withI2CER7TwoWireh>
	t.startThreadedMode();
   d560c:	4852      	ldr	r0, [pc, #328]	; (d5758 <setup+0x3a0>)
   d560e:	f000 f9f9 	bl	d5a04 <_ZN12AssetTracker17startThreadedModeEv>
   d5612:	f002 fb79 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
  startFix = millis();
   d5616:	4b51      	ldr	r3, [pc, #324]	; (d575c <setup+0x3a4>)
   d5618:	6018      	str	r0, [r3, #0]
  gettingFix = true;
   d561a:	4b51      	ldr	r3, [pc, #324]	; (d5760 <setup+0x3a8>)
   d561c:	2201      	movs	r2, #1
   d561e:	701a      	strb	r2, [r3, #0]
  connectToParticle();
   d5620:	f7ff f93a 	bl	d4898 <_Z17connectToParticlev>
   d5624:	2300      	movs	r3, #0
  publishQueue.publish("State","Startup Complete",PRIVATE);
   d5626:	f88d 3000 	strb.w	r3, [sp]
   d562a:	4b4e      	ldr	r3, [pc, #312]	; (d5764 <setup+0x3ac>)
   d562c:	4a4e      	ldr	r2, [pc, #312]	; (d5768 <setup+0x3b0>)
   d562e:	781b      	ldrb	r3, [r3, #0]
   d5630:	494e      	ldr	r1, [pc, #312]	; (d576c <setup+0x3b4>)
   d5632:	484f      	ldr	r0, [pc, #316]	; (d5770 <setup+0x3b8>)
   d5634:	f7fe fe5e 	bl	d42f4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5638:	7833      	ldrb	r3, [r6, #0]
   d563a:	b90b      	cbnz	r3, d5640 <setup+0x288>
   d563c:	2302      	movs	r3, #2
   d563e:	7033      	strb	r3, [r6, #0]
  digitalWrite(blueLED,LOW);
   d5640:	2100      	movs	r1, #0
   d5642:	2007      	movs	r0, #7
   d5644:	f004 fc33 	bl	d9eae <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5648:	a804      	add	r0, sp, #16
   d564a:	f003 ff33 	bl	d94b4 <_ZN6StringD1Ev>
}
   d564e:	b028      	add	sp, #160	; 0xa0
   d5650:	bd70      	pop	{r4, r5, r6, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5652:	f7ff fe75 	bl	d5340 <_Z18loadSystemDefaultsv>
   d5656:	e764      	b.n	d5522 <setup+0x16a>
   d5658:	2320      	movs	r3, #32
   d565a:	462a      	mov	r2, r5
   d565c:	4832      	ldr	r0, [pc, #200]	; (d5728 <setup+0x370>)
   d565e:	f001 f8b9 	bl	d67d4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5662:	e75e      	b.n	d5522 <setup+0x16a>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5664:	4611      	mov	r1, r2
   d5666:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5668:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d566a:	f002 fb2d 	bl	d7cc8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d566e:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5670:	2b8c      	cmp	r3, #140	; 0x8c
   d5672:	f47f af6c 	bne.w	d554e <setup+0x196>
   d5676:	e764      	b.n	d5542 <setup+0x18a>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
   d5678:	f004 f892 	bl	d97a0 <_ZN9TimeClass6endDSTEv>
   d567c:	e786      	b.n	d558c <setup+0x1d4>
   d567e:	bf00      	nop
   d5680:	00000000 	.word	0x00000000
   d5684:	40ac2000 	.word	0x40ac2000
   d5688:	000d40c9 	.word	0x000d40c9
   d568c:	000d4311 	.word	0x000d4311
   d5690:	2003e3a0 	.word	0x2003e3a0
   d5694:	2003e39c 	.word	0x2003e39c
   d5698:	2003e23c 	.word	0x2003e23c
   d569c:	000db060 	.word	0x000db060
   d56a0:	2003e12d 	.word	0x2003e12d
   d56a4:	000db067 	.word	0x000db067
   d56a8:	2003e3b0 	.word	0x2003e3b0
   d56ac:	000db076 	.word	0x000db076
   d56b0:	2003e110 	.word	0x2003e110
   d56b4:	000db081 	.word	0x000db081
   d56b8:	2003e1a9 	.word	0x2003e1a9
   d56bc:	000db08b 	.word	0x000db08b
   d56c0:	2003e121 	.word	0x2003e121
   d56c4:	000db094 	.word	0x000db094
   d56c8:	2003e11c 	.word	0x2003e11c
   d56cc:	000db0a0 	.word	0x000db0a0
   d56d0:	2003e3a8 	.word	0x2003e3a8
   d56d4:	000db0a8 	.word	0x000db0a8
   d56d8:	2003e2d0 	.word	0x2003e2d0
   d56dc:	000db0b3 	.word	0x000db0b3
   d56e0:	2003e2f4 	.word	0x2003e2f4
   d56e4:	000db0ba 	.word	0x000db0ba
   d56e8:	2003e28e 	.word	0x2003e28e
   d56ec:	000db0c5 	.word	0x000db0c5
   d56f0:	000db0d4 	.word	0x000db0d4
   d56f4:	000d411d 	.word	0x000d411d
   d56f8:	000d8705 	.word	0x000d8705
   d56fc:	000db0de 	.word	0x000db0de
   d5700:	000d43a5 	.word	0x000d43a5
   d5704:	000db0e8 	.word	0x000db0e8
   d5708:	000d4139 	.word	0x000d4139
   d570c:	000db0f0 	.word	0x000db0f0
   d5710:	000d43f5 	.word	0x000d43f5
   d5714:	000db0fd 	.word	0x000db0fd
   d5718:	000d4481 	.word	0x000d4481
   d571c:	000db10a 	.word	0x000db10a
   d5720:	000d4ae1 	.word	0x000d4ae1
   d5724:	000d4599 	.word	0x000d4599
   d5728:	2003e31c 	.word	0x2003e31c
   d572c:	000db1b4 	.word	0x000db1b4
   d5730:	2003e3c0 	.word	0x2003e3c0
   d5734:	000dae4a 	.word	0x000dae4a
   d5738:	2003e37c 	.word	0x2003e37c
   d573c:	000dae10 	.word	0x000dae10
   d5740:	2003e2b8 	.word	0x2003e2b8
   d5744:	2003e2ec 	.word	0x2003e2ec
   d5748:	2003e300 	.word	0x2003e300
   d574c:	2003f400 	.word	0x2003f400
   d5750:	2003f408 	.word	0x2003f408
   d5754:	2003f410 	.word	0x2003f410
   d5758:	2003e3c4 	.word	0x2003e3c4
   d575c:	2003e398 	.word	0x2003e398
   d5760:	2003e32c 	.word	0x2003e32c
   d5764:	2003e28c 	.word	0x2003e28c
   d5768:	000db118 	.word	0x000db118
   d576c:	000daffb 	.word	0x000daffb
   d5770:	2003e340 	.word	0x2003e340

000d5774 <_GLOBAL__sub_I___appProductID>:
}
   d5774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d5776:	4b3f      	ldr	r3, [pc, #252]	; (d5874 <_GLOBAL__sub_I___appProductID+0x100>)
              error_(SYSTEM_ERROR_NONE) {
   d5778:	4e3f      	ldr	r6, [pc, #252]	; (d5878 <_GLOBAL__sub_I___appProductID+0x104>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d577a:	4d40      	ldr	r5, [pc, #256]	; (d587c <_GLOBAL__sub_I___appProductID+0x108>)
   d577c:	2400      	movs	r4, #0
   d577e:	601c      	str	r4, [r3, #0]
   d5780:	4b3f      	ldr	r3, [pc, #252]	; (d5880 <_GLOBAL__sub_I___appProductID+0x10c>)
   d5782:	2701      	movs	r7, #1
   d5784:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5786:	f004 fb2b 	bl	d9de0 <spark_protocol_instance>
   d578a:	4623      	mov	r3, r4
   d578c:	4622      	mov	r2, r4
   d578e:	f642 51df 	movw	r1, #11743	; 0x2ddf
   d5792:	f004 fb2d 	bl	d9df0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5796:	f004 fb23 	bl	d9de0 <spark_protocol_instance>
   d579a:	4622      	mov	r2, r4
   d579c:	4623      	mov	r3, r4
   d579e:	2108      	movs	r1, #8
   d57a0:	f004 fb2e 	bl	d9e00 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d57a4:	4b37      	ldr	r3, [pc, #220]	; (d5884 <_GLOBAL__sub_I___appProductID+0x110>)
   d57a6:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d57a8:	6034      	str	r4, [r6, #0]
   d57aa:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d57ac:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d57ae:	2002      	movs	r0, #2
   d57b0:	f002 fc84 	bl	d80bc <set_system_mode>
   d57b4:	462a      	mov	r2, r5
   d57b6:	4934      	ldr	r1, [pc, #208]	; (d5888 <_GLOBAL__sub_I___appProductID+0x114>)
   d57b8:	4630      	mov	r0, r6
   d57ba:	f004 fbe5 	bl	d9f88 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d57be:	4621      	mov	r1, r4
   d57c0:	4638      	mov	r0, r7
   d57c2:	f002 fc8b 	bl	d80dc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d57c6:	4639      	mov	r1, r7
   d57c8:	2004      	movs	r0, #4
   d57ca:	f002 fa75 	bl	d7cb8 <HAL_Feature_Set>
        : config_(config) {
   d57ce:	482f      	ldr	r0, [pc, #188]	; (d588c <_GLOBAL__sub_I___appProductID+0x118>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d57d0:	492f      	ldr	r1, [pc, #188]	; (d5890 <_GLOBAL__sub_I___appProductID+0x11c>)
              valid_(true) {
   d57d2:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d57d6:	4603      	mov	r3, r0
   d57d8:	1d02      	adds	r2, r0, #4
   d57da:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d57de:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d57e0:	4b2c      	ldr	r3, [pc, #176]	; (d5894 <_GLOBAL__sub_I___appProductID+0x120>)
   d57e2:	6043      	str	r3, [r0, #4]
   d57e4:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d57e6:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d57ea:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d57ec:	7204      	strb	r4, [r0, #8]
   d57ee:	f004 fbcb 	bl	d9f88 <__aeabi_atexit>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d57f2:	f004 fba1 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d57f6:	4e28      	ldr	r6, [pc, #160]	; (d5898 <_GLOBAL__sub_I___appProductID+0x124>)
   d57f8:	4601      	mov	r1, r0
   d57fa:	4630      	mov	r0, r6
   d57fc:	f001 fa1a 	bl	d6c34 <_ZN8MCP79410C1ER7TwoWire>
   d5800:	462a      	mov	r2, r5
   d5802:	4926      	ldr	r1, [pc, #152]	; (d589c <_GLOBAL__sub_I___appProductID+0x128>)
   d5804:	4630      	mov	r0, r6
   d5806:	f004 fbbf 	bl	d9f88 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d580a:	f004 fb95 	bl	d9f38 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d580e:	4e24      	ldr	r6, [pc, #144]	; (d58a0 <_GLOBAL__sub_I___appProductID+0x12c>)
   d5810:	4601      	mov	r1, r0
   d5812:	4623      	mov	r3, r4
   d5814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5818:	4630      	mov	r0, r6
   d581a:	f000 ff8f 	bl	d673c <_ZN6MB85RCC1ER7TwoWireji>
   d581e:	4b21      	ldr	r3, [pc, #132]	; (d58a4 <_GLOBAL__sub_I___appProductID+0x130>)
   d5820:	6033      	str	r3, [r6, #0]
   d5822:	4630      	mov	r0, r6
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5824:	4e20      	ldr	r6, [pc, #128]	; (d58a8 <_GLOBAL__sub_I___appProductID+0x134>)
   d5826:	4921      	ldr	r1, [pc, #132]	; (d58ac <_GLOBAL__sub_I___appProductID+0x138>)
   d5828:	462a      	mov	r2, r5
   d582a:	f004 fbad 	bl	d9f88 <__aeabi_atexit>
   d582e:	4920      	ldr	r1, [pc, #128]	; (d58b0 <_GLOBAL__sub_I___appProductID+0x13c>)
   d5830:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5834:	4630      	mov	r0, r6
   d5836:	f002 f8cb 	bl	d79d0 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d583a:	4b1e      	ldr	r3, [pc, #120]	; (d58b4 <_GLOBAL__sub_I___appProductID+0x140>)
   d583c:	6033      	str	r3, [r6, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d583e:	4630      	mov	r0, r6
DS18B20 ds18b20(tempSensors);
   d5840:	4e1d      	ldr	r6, [pc, #116]	; (d58b8 <_GLOBAL__sub_I___appProductID+0x144>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5842:	491e      	ldr	r1, [pc, #120]	; (d58bc <_GLOBAL__sub_I___appProductID+0x148>)
   d5844:	462a      	mov	r2, r5
   d5846:	f004 fb9f 	bl	d9f88 <__aeabi_atexit>
DS18B20 ds18b20(tempSensors);
   d584a:	4622      	mov	r2, r4
   d584c:	2110      	movs	r1, #16
AssetTracker t;
   d584e:	4c1c      	ldr	r4, [pc, #112]	; (d58c0 <_GLOBAL__sub_I___appProductID+0x14c>)
DS18B20 ds18b20(tempSensors);
   d5850:	4630      	mov	r0, r6
   d5852:	f000 fdbf 	bl	d63d4 <_ZN7DS18B20C1Etb>
   d5856:	462a      	mov	r2, r5
   d5858:	491a      	ldr	r1, [pc, #104]	; (d58c4 <_GLOBAL__sub_I___appProductID+0x150>)
   d585a:	4630      	mov	r0, r6
   d585c:	f004 fb94 	bl	d9f88 <__aeabi_atexit>
AssetTracker t;
   d5860:	4620      	mov	r0, r4
   d5862:	f000 f8b1 	bl	d59c8 <_ZN12AssetTrackerC1Ev>
   d5866:	462a      	mov	r2, r5
   d5868:	4620      	mov	r0, r4
   d586a:	4917      	ldr	r1, [pc, #92]	; (d58c8 <_GLOBAL__sub_I___appProductID+0x154>)
}
   d586c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
AssetTracker t;
   d5870:	f004 bb8a 	b.w	d9f88 <__aeabi_atexit>
   d5874:	2003e288 	.word	0x2003e288
   d5878:	2003e27c 	.word	0x2003e27c
   d587c:	2003e230 	.word	0x2003e230
   d5880:	2003e28c 	.word	0x2003e28c
   d5884:	ffff0000 	.word	0xffff0000
   d5888:	000d41a5 	.word	0x000d41a5
   d588c:	2003e2a0 	.word	0x2003e2a0
   d5890:	000d40d5 	.word	0x000d40d5
   d5894:	00030010 	.word	0x00030010
   d5898:	2003e37c 	.word	0x2003e37c
   d589c:	000d69b3 	.word	0x000d69b3
   d58a0:	2003e31c 	.word	0x2003e31c
   d58a4:	000db134 	.word	0x000db134
   d58a8:	2003e340 	.word	0x2003e340
   d58ac:	000d417d 	.word	0x000d417d
   d58b0:	2003f418 	.word	0x2003f418
   d58b4:	000db150 	.word	0x000db150
   d58b8:	2003e300 	.word	0x2003e300
   d58bc:	000d4155 	.word	0x000d4155
   d58c0:	2003e3c4 	.word	0x2003e3c4
   d58c4:	000d6429 	.word	0x000d6429
   d58c8:	000d5991 	.word	0x000d5991

000d58cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d58cc:	4770      	bx	lr

000d58ce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d58ce:	b510      	push	{r4, lr}
  }
   d58d0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d58d2:	4604      	mov	r4, r0
  }
   d58d4:	f004 fb5d 	bl	d9f92 <_ZdlPvj>
   d58d8:	4620      	mov	r0, r4
   d58da:	bd10      	pop	{r4, pc}

000d58dc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d58dc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d58de:	2301      	movs	r3, #1
   d58e0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d58e2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d58e4:	4604      	mov	r4, r0
        if (th->func) {
   d58e6:	b143      	cbz	r3, d58fa <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d58e8:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58ea:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d58ec:	2301      	movs	r3, #1
   d58ee:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d58f0:	2000      	movs	r0, #0
    }
   d58f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d58f6:	f002 b9d7 	b.w	d7ca8 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d58fa:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d58fc:	2800      	cmp	r0, #0
   d58fe:	d0f5      	beq.n	d58ec <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5900:	6883      	ldr	r3, [r0, #8]
   d5902:	b90b      	cbnz	r3, d5908 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d5904:	f004 fb4b 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5908:	68c3      	ldr	r3, [r0, #12]
   d590a:	e7ee      	b.n	d58ea <_ZN6Thread3runEPv+0xe>

000d590c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d590c:	b40e      	push	{r1, r2, r3}
   d590e:	b503      	push	{r0, r1, lr}
   d5910:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d5912:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5914:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5918:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d591a:	f003 fcd6 	bl	d92ca <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d591e:	b002      	add	sp, #8
   d5920:	f85d eb04 	ldr.w	lr, [sp], #4
   d5924:	b003      	add	sp, #12
   d5926:	4770      	bx	lr

000d5928 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5928:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d592a:	4604      	mov	r4, r0
   d592c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d592e:	7922      	ldrb	r2, [r4, #4]
   d5930:	68a3      	ldr	r3, [r4, #8]
   d5932:	b132      	cbz	r2, d5942 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5934:	b9a3      	cbnz	r3, d5960 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5936:	490b      	ldr	r1, [pc, #44]	; (d5964 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5938:	b002      	add	sp, #8
   d593a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d593e:	f003 bbb5 	b.w	d90ac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5942:	4a09      	ldr	r2, [pc, #36]	; (d5968 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5944:	7b26      	ldrb	r6, [r4, #12]
   d5946:	4d09      	ldr	r5, [pc, #36]	; (d596c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5948:	4909      	ldr	r1, [pc, #36]	; (d5970 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d594a:	7b64      	ldrb	r4, [r4, #13]
   d594c:	2e01      	cmp	r6, #1
   d594e:	bf18      	it	ne
   d5950:	4629      	movne	r1, r5
   d5952:	e9cd 1400 	strd	r1, r4, [sp]
   d5956:	4907      	ldr	r1, [pc, #28]	; (d5974 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5958:	f7ff ffd8 	bl	d590c <_ZN5Print6printfEPKcz>
  }
   d595c:	b002      	add	sp, #8
   d595e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5960:	4a05      	ldr	r2, [pc, #20]	; (d5978 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5962:	e7ef      	b.n	d5944 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5964:	000db1c9 	.word	0x000db1c9
   d5968:	000db774 	.word	0x000db774
   d596c:	000db1c5 	.word	0x000db1c5
   d5970:	000db1c1 	.word	0x000db1c1
   d5974:	000db1df 	.word	0x000db1df
   d5978:	000db1b8 	.word	0x000db1b8

000d597c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d597c:	b510      	push	{r4, lr}
      if (_M_manager)
   d597e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5980:	4604      	mov	r4, r0
      if (_M_manager)
   d5982:	b113      	cbz	r3, d598a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5984:	2203      	movs	r2, #3
   d5986:	4601      	mov	r1, r0
   d5988:	4798      	blx	r3
    }
   d598a:	4620      	mov	r0, r4
   d598c:	bd10      	pop	{r4, pc}
	...

000d5990 <_ZN12AssetTrackerD1Ev>:

AssetTracker::AssetTracker() : LegacyAdapter(gps) {
	instance = this;
}

AssetTracker::~AssetTracker() {
   d5990:	b510      	push	{r4, lr}
   d5992:	4b05      	ldr	r3, [pc, #20]	; (d59a8 <_ZN12AssetTrackerD1Ev+0x18>)
   d5994:	4604      	mov	r4, r0
   d5996:	f840 3b20 	str.w	r3, [r0], #32
    class function<_Res(_ArgTypes...)>
   d599a:	f7ff ffef 	bl	d597c <_ZNSt14_Function_baseD1Ev>
   d599e:	4620      	mov	r0, r4
   d59a0:	f000 f9be 	bl	d5d20 <_ZN13LegacyAdapterD1Ev>

}
   d59a4:	4620      	mov	r0, r4
   d59a6:	bd10      	pop	{r4, pc}
   d59a8:	000db2b0 	.word	0x000db2b0

000d59ac <_ZN12AssetTrackerD0Ev>:
AssetTracker::~AssetTracker() {
   d59ac:	b510      	push	{r4, lr}
   d59ae:	4604      	mov	r4, r0
}
   d59b0:	f7ff ffee 	bl	d5990 <_ZN12AssetTrackerD1Ev>
   d59b4:	4620      	mov	r0, r4
   d59b6:	2130      	movs	r1, #48	; 0x30
   d59b8:	f004 faeb 	bl	d9f92 <_ZdlPvj>
   d59bc:	4620      	mov	r0, r4
   d59be:	bd10      	pop	{r4, pc}

000d59c0 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	b2c9      	uxtb	r1, r1
   d59c4:	689b      	ldr	r3, [r3, #8]
   d59c6:	4718      	bx	r3

000d59c8 <_ZN12AssetTrackerC1Ev>:
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59c8:	b538      	push	{r3, r4, r5, lr}
   d59ca:	490b      	ldr	r1, [pc, #44]	; (d59f8 <_ZN12AssetTrackerC1Ev+0x30>)
   d59cc:	4604      	mov	r4, r0
   d59ce:	2500      	movs	r5, #0
   d59d0:	f000 f9ae 	bl	d5d30 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>
   d59d4:	4b09      	ldr	r3, [pc, #36]	; (d59fc <_ZN12AssetTrackerC1Ev+0x34>)
   d59d6:	6023      	str	r3, [r4, #0]
   d59d8:	7225      	strb	r5, [r4, #8]
   d59da:	f004 faad 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d59de:	2342      	movs	r3, #66	; 0x42
   d59e0:	7423      	strb	r3, [r4, #16]
   d59e2:	60e0      	str	r0, [r4, #12]
   d59e4:	f004 f8b8 	bl	d9b58 <_Z22__fetch_global_Serial1v>
	instance = this;
   d59e8:	4b05      	ldr	r3, [pc, #20]	; (d5a00 <_ZN12AssetTrackerC1Ev+0x38>)
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59ea:	61e5      	str	r5, [r4, #28]
	instance = this;
   d59ec:	601c      	str	r4, [r3, #0]
AssetTracker::AssetTracker() : LegacyAdapter(gps) {
   d59ee:	e9c4 0505 	strd	r0, r5, [r4, #20]
    _Function_base() : _M_manager(nullptr) { }
   d59f2:	62a5      	str	r5, [r4, #40]	; 0x28
}
   d59f4:	4620      	mov	r0, r4
   d59f6:	bd38      	pop	{r3, r4, r5, pc}
   d59f8:	2003e408 	.word	0x2003e408
   d59fc:	000db2b0 	.word	0x000db2b0
   d5a00:	2003e5d0 	.word	0x2003e5d0

000d5a04 <_ZN12AssetTracker17startThreadedModeEv>:
			}
		}
	}
}

void AssetTracker::startThreadedMode() {
   d5a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (thread == NULL) {
   d5a06:	6986      	ldr	r6, [r0, #24]
void AssetTracker::startThreadedMode() {
   d5a08:	4607      	mov	r7, r0
	if (thread == NULL) {
   d5a0a:	2e00      	cmp	r6, #0
   d5a0c:	d138      	bne.n	d5a80 <_ZN12AssetTracker17startThreadedModeEv+0x7c>
		thread = new Thread("AssetTracker", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5a0e:	2004      	movs	r0, #4
   d5a10:	f7fe fb41 	bl	d4096 <_Znwj>
   d5a14:	4605      	mov	r5, r0
   d5a16:	b390      	cbz	r0, d5a7e <_ZN12AssetTracker17startThreadedModeEv+0x7a>
        : d_(new(std::nothrow) Data)
   d5a18:	491a      	ldr	r1, [pc, #104]	; (d5a84 <_ZN12AssetTracker17startThreadedModeEv+0x80>)
   d5a1a:	2014      	movs	r0, #20
   d5a1c:	f004 fabb 	bl	d9f96 <_ZnwjRKSt9nothrow_t>
   d5a20:	b128      	cbz	r0, d5a2e <_ZN12AssetTracker17startThreadedModeEv+0x2a>
            exited(false) {
   d5a22:	e9c0 6600 	strd	r6, r6, [r0]
   d5a26:	e9c0 6602 	strd	r6, r6, [r0, #8]
   d5a2a:	7406      	strb	r6, [r0, #16]
   d5a2c:	7446      	strb	r6, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5a2e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5a30:	b1a0      	cbz	r0, d5a5c <_ZN12AssetTracker17startThreadedModeEv+0x58>
        d_->func = function;
   d5a32:	4b15      	ldr	r3, [pc, #84]	; (d5a88 <_ZN12AssetTracker17startThreadedModeEv+0x84>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a34:	4915      	ldr	r1, [pc, #84]	; (d5a8c <_ZN12AssetTracker17startThreadedModeEv+0x88>)
        d_->func_param = function_param;
   d5a36:	e9c0 3702 	strd	r3, r7, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5a3e:	e9cd 0300 	strd	r0, r3, [sp]
   d5a42:	2202      	movs	r2, #2
   d5a44:	4b12      	ldr	r3, [pc, #72]	; (d5a90 <_ZN12AssetTracker17startThreadedModeEv+0x8c>)
   d5a46:	3004      	adds	r0, #4
   d5a48:	f002 f8ee 	bl	d7c28 <os_thread_create>
   d5a4c:	b930      	cbnz	r0, d5a5c <_ZN12AssetTracker17startThreadedModeEv+0x58>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5a4e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5a50:	7c1b      	ldrb	r3, [r3, #16]
   d5a52:	b9a3      	cbnz	r3, d5a7e <_ZN12AssetTracker17startThreadedModeEv+0x7a>
            HAL_Delay_Milliseconds(1);
   d5a54:	2001      	movs	r0, #1
   d5a56:	f002 f947 	bl	d7ce8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5a5a:	e7f8      	b.n	d5a4e <_ZN12AssetTracker17startThreadedModeEv+0x4a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a5c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a5e:	2300      	movs	r3, #0
   d5a60:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5a62:	b164      	cbz	r4, d5a7e <_ZN12AssetTracker17startThreadedModeEv+0x7a>
	if (__ptr != nullptr)
   d5a64:	6826      	ldr	r6, [r4, #0]
   d5a66:	b136      	cbz	r6, d5a76 <_ZN12AssetTracker17startThreadedModeEv+0x72>
    class function<_Res(_ArgTypes...)>
   d5a68:	4630      	mov	r0, r6
   d5a6a:	f7ff ff87 	bl	d597c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5a6e:	2110      	movs	r1, #16
   d5a70:	4630      	mov	r0, r6
   d5a72:	f004 fa8e 	bl	d9f92 <_ZdlPvj>
   d5a76:	2114      	movs	r1, #20
   d5a78:	4620      	mov	r0, r4
   d5a7a:	f004 fa8a 	bl	d9f92 <_ZdlPvj>
   d5a7e:	61bd      	str	r5, [r7, #24]
	}
}
   d5a80:	b003      	add	sp, #12
   d5a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a84:	000db754 	.word	0x000db754
   d5a88:	000d5c8d 	.word	0x000d5c8d
   d5a8c:	000db1fc 	.word	0x000db1fc
   d5a90:	000d58dd 	.word	0x000d58dd

000d5a94 <_ZN12AssetTracker7withI2CER7TwoWireh>:
	useWire = false;
	serialPort = port;
	return *this;
}

AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a94:	b510      	push	{r4, lr}
	useWire = true;
   d5a96:	2301      	movs	r3, #1
   d5a98:	7203      	strb	r3, [r0, #8]
	this->wire = wire;
   d5a9a:	68c3      	ldr	r3, [r0, #12]
AssetTracker &AssetTracker::withI2C(TwoWire &wire, uint8_t addr) {
   d5a9c:	4604      	mov	r4, r0
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d5a9e:	6848      	ldr	r0, [r1, #4]
class Print
   d5aa0:	6058      	str	r0, [r3, #4]
   d5aa2:	6888      	ldr	r0, [r1, #8]
   d5aa4:	6098      	str	r0, [r3, #8]
   d5aa6:	68c8      	ldr	r0, [r1, #12]
   d5aa8:	60d8      	str	r0, [r3, #12]
class TwoWire : public Stream
   d5aaa:	7c08      	ldrb	r0, [r1, #16]
   d5aac:	7418      	strb	r0, [r3, #16]
	this->wireAddr = addr;

	wire.begin();
   d5aae:	4608      	mov	r0, r1
	this->wireAddr = addr;
   d5ab0:	7422      	strb	r2, [r4, #16]
	wire.begin();
   d5ab2:	f003 f935 	bl	d8d20 <_ZN7TwoWire5beginEv>

	return *this;
}
   d5ab6:	4620      	mov	r0, r4
   d5ab8:	bd10      	pop	{r4, pc}
	...

000d5abc <_ZN12AssetTracker22wireReadBytesAvailableEv>:

uint16_t AssetTracker::wireReadBytesAvailable() {
   d5abc:	b538      	push	{r3, r4, r5, lr}
   d5abe:	4605      	mov	r5, r0
	uint8_t res;

	wire.beginTransmission(wireAddr);
   d5ac0:	7c01      	ldrb	r1, [r0, #16]
   d5ac2:	68c0      	ldr	r0, [r0, #12]
   d5ac4:	f003 f95b 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xfd);
   d5ac8:	21fd      	movs	r1, #253	; 0xfd
   d5aca:	68e8      	ldr	r0, [r5, #12]
   d5acc:	f7ff ff78 	bl	d59c0 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5ad0:	68e8      	ldr	r0, [r5, #12]
   d5ad2:	2100      	movs	r1, #0
   d5ad4:	f003 f95a 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5ad8:	b130      	cbz	r0, d5ae8 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2c>
		Log.info("wireReadBytesAvailable I2C error %u", res);
   d5ada:	490f      	ldr	r1, [pc, #60]	; (d5b18 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x5c>)
   d5adc:	4602      	mov	r2, r0
   d5ade:	480f      	ldr	r0, [pc, #60]	; (d5b1c <_ZN12AssetTracker22wireReadBytesAvailableEv+0x60>)
   d5ae0:	f7fe fbd6 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
		return 0;
   d5ae4:	2000      	movs	r0, #0

	uint16_t available = wire.read() << 8;
	available |= wire.read();

	return available;
}
   d5ae6:	bd38      	pop	{r3, r4, r5, pc}
	res = wire.requestFrom(wireAddr, (uint8_t) 2, (uint8_t) true);
   d5ae8:	2202      	movs	r2, #2
   d5aea:	7c29      	ldrb	r1, [r5, #16]
   d5aec:	68e8      	ldr	r0, [r5, #12]
   d5aee:	2301      	movs	r3, #1
   d5af0:	f003 f933 	bl	d8d5a <_ZN7TwoWire11requestFromEhjh>
	if (res != 2) {
   d5af4:	b2c2      	uxtb	r2, r0
   d5af6:	2a02      	cmp	r2, #2
   d5af8:	d001      	beq.n	d5afe <_ZN12AssetTracker22wireReadBytesAvailableEv+0x42>
		Log.info("wireReadBytesAvailable incorrect count %u", res);
   d5afa:	4909      	ldr	r1, [pc, #36]	; (d5b20 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x64>)
   d5afc:	e7ef      	b.n	d5ade <_ZN12AssetTracker22wireReadBytesAvailableEv+0x22>
	uint16_t available = wire.read() << 8;
   d5afe:	68e8      	ldr	r0, [r5, #12]
   d5b00:	6803      	ldr	r3, [r0, #0]
   d5b02:	695b      	ldr	r3, [r3, #20]
   d5b04:	4798      	blx	r3
   d5b06:	4604      	mov	r4, r0
	available |= wire.read();
   d5b08:	68e8      	ldr	r0, [r5, #12]
   d5b0a:	6803      	ldr	r3, [r0, #0]
   d5b0c:	695b      	ldr	r3, [r3, #20]
   d5b0e:	4798      	blx	r3
   d5b10:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d5b14:	b280      	uxth	r0, r0
	return available;
   d5b16:	e7e6      	b.n	d5ae6 <_ZN12AssetTracker22wireReadBytesAvailableEv+0x2a>
   d5b18:	000db209 	.word	0x000db209
   d5b1c:	2003e624 	.word	0x2003e624
   d5b20:	000db22d 	.word	0x000db22d

000d5b24 <_ZN12AssetTracker13wireReadBytesEPhj>:

int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b28:	4606      	mov	r6, r0
   d5b2a:	4688      	mov	r8, r1
	uint8_t res;

	// Log.info("wireReadBytes len=%u", len);

	wire.beginTransmission(wireAddr);
   d5b2c:	7c01      	ldrb	r1, [r0, #16]
   d5b2e:	68c0      	ldr	r0, [r0, #12]
int AssetTracker::wireReadBytes(uint8_t *buf, size_t len) {
   d5b30:	4615      	mov	r5, r2
	wire.beginTransmission(wireAddr);
   d5b32:	f003 f924 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
	wire.write(0xff);
   d5b36:	21ff      	movs	r1, #255	; 0xff
   d5b38:	68f0      	ldr	r0, [r6, #12]
   d5b3a:	f7ff ff41 	bl	d59c0 <_ZN7TwoWire5writeEi>
	res = wire.endTransmission(false);
   d5b3e:	68f0      	ldr	r0, [r6, #12]
   d5b40:	2100      	movs	r1, #0
   d5b42:	f003 f923 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
	if (res != 0) {
   d5b46:	4602      	mov	r2, r0
   d5b48:	b138      	cbz	r0, d5b5a <_ZN12AssetTracker13wireReadBytesEPhj+0x36>
		Log.info("wireReadBytes I2C error %u", res);
   d5b4a:	4916      	ldr	r1, [pc, #88]	; (d5ba4 <_ZN12AssetTracker13wireReadBytesEPhj+0x80>)
		if (reqLen > 32) {
			reqLen = 32;
		}
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
		if (res != reqLen) {
			Log.info("wireReadBytes incorrect count %u", res);
   d5b4c:	4816      	ldr	r0, [pc, #88]	; (d5ba8 <_ZN12AssetTracker13wireReadBytesEPhj+0x84>)
   d5b4e:	f7fe fb9f 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			return -1;
   d5b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			buf[offset + ii] = wire.read();
		}
		offset += reqLen;
 	}
	return len;
}
   d5b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t offset = 0;
   d5b5a:	4604      	mov	r4, r0
	while(offset < len) {
   d5b5c:	42a5      	cmp	r5, r4
   d5b5e:	d91f      	bls.n	d5ba0 <_ZN12AssetTracker13wireReadBytesEPhj+0x7c>
		size_t reqLen = (len - offset);
   d5b60:	1b2f      	subs	r7, r5, r4
		if (reqLen > 32) {
   d5b62:	2f20      	cmp	r7, #32
   d5b64:	bf28      	it	cs
   d5b66:	2720      	movcs	r7, #32
		res = wire.requestFrom(wireAddr, (uint8_t) reqLen, (uint8_t) ((offset + reqLen) == len));
   d5b68:	eb04 0907 	add.w	r9, r4, r7
   d5b6c:	eba5 0209 	sub.w	r2, r5, r9
   d5b70:	4253      	negs	r3, r2
   d5b72:	4153      	adcs	r3, r2
   d5b74:	7c31      	ldrb	r1, [r6, #16]
   d5b76:	68f0      	ldr	r0, [r6, #12]
   d5b78:	463a      	mov	r2, r7
   d5b7a:	f003 f8ee 	bl	d8d5a <_ZN7TwoWire11requestFromEhjh>
		if (res != reqLen) {
   d5b7e:	b2c2      	uxtb	r2, r0
   d5b80:	4297      	cmp	r7, r2
   d5b82:	d001      	beq.n	d5b88 <_ZN12AssetTracker13wireReadBytesEPhj+0x64>
			Log.info("wireReadBytes incorrect count %u", res);
   d5b84:	4909      	ldr	r1, [pc, #36]	; (d5bac <_ZN12AssetTracker13wireReadBytesEPhj+0x88>)
   d5b86:	e7e1      	b.n	d5b4c <_ZN12AssetTracker13wireReadBytesEPhj+0x28>
   d5b88:	4444      	add	r4, r8
   d5b8a:	4427      	add	r7, r4
			buf[offset + ii] = wire.read();
   d5b8c:	68f0      	ldr	r0, [r6, #12]
   d5b8e:	6803      	ldr	r3, [r0, #0]
   d5b90:	695b      	ldr	r3, [r3, #20]
   d5b92:	4798      	blx	r3
   d5b94:	f804 0b01 	strb.w	r0, [r4], #1
		for(size_t ii = 0; ii < reqLen; ii++) {
   d5b98:	42bc      	cmp	r4, r7
   d5b9a:	d1f7      	bne.n	d5b8c <_ZN12AssetTracker13wireReadBytesEPhj+0x68>
		offset += reqLen;
   d5b9c:	464c      	mov	r4, r9
   d5b9e:	e7dd      	b.n	d5b5c <_ZN12AssetTracker13wireReadBytesEPhj+0x38>
	return len;
   d5ba0:	4628      	mov	r0, r5
   d5ba2:	e7d8      	b.n	d5b56 <_ZN12AssetTracker13wireReadBytesEPhj+0x32>
   d5ba4:	000db257 	.word	0x000db257
   d5ba8:	2003e624 	.word	0x2003e624
   d5bac:	000db272 	.word	0x000db272

000d5bb0 <_ZN12AssetTracker14getTinyGPSPlusEv>:
	return &accel;
}

TinyGPSPlus *AssetTracker::getTinyGPSPlus() {
	return &gps;
}
   d5bb0:	4800      	ldr	r0, [pc, #0]	; (d5bb4 <_ZN12AssetTracker14getTinyGPSPlusEv+0x4>)
   d5bb2:	4770      	bx	lr
   d5bb4:	2003e408 	.word	0x2003e408

000d5bb8 <_ZNKSt8functionIFbcEEclEc>:
    function<_Res(_ArgTypes...)>::
   d5bb8:	b507      	push	{r0, r1, r2, lr}
      if (_M_empty())
   d5bba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5bbc:	f88d 1007 	strb.w	r1, [sp, #7]
      if (_M_empty())
   d5bc0:	b90a      	cbnz	r2, d5bc6 <_ZNKSt8functionIFbcEEclEc+0xe>
	__throw_bad_function_call();
   d5bc2:	f004 f9ec 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bc6:	68c3      	ldr	r3, [r0, #12]
   d5bc8:	f10d 0107 	add.w	r1, sp, #7
   d5bcc:	4798      	blx	r3
    }
   d5bce:	b003      	add	sp, #12
   d5bd0:	f85d fb04 	ldr.w	pc, [sp], #4

000d5bd4 <_ZN12AssetTracker9updateGPSEv>:
void AssetTracker::updateGPS(void) {
   d5bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!useWire) {
   d5bd8:	7a03      	ldrb	r3, [r0, #8]
void AssetTracker::updateGPS(void) {
   d5bda:	b08a      	sub	sp, #40	; 0x28
   d5bdc:	4604      	mov	r4, r0
	if (!useWire) {
   d5bde:	b9cb      	cbnz	r3, d5c14 <_ZN12AssetTracker9updateGPSEv+0x40>
			gps.encode(c);
   d5be0:	4e25      	ldr	r6, [pc, #148]	; (d5c78 <_ZN12AssetTracker9updateGPSEv+0xa4>)
				externalDecoder(c);
   d5be2:	f100 0520 	add.w	r5, r0, #32
		while (serialPort.available() > 0) {
   d5be6:	6960      	ldr	r0, [r4, #20]
   d5be8:	6803      	ldr	r3, [r0, #0]
   d5bea:	691b      	ldr	r3, [r3, #16]
   d5bec:	4798      	blx	r3
   d5bee:	2800      	cmp	r0, #0
   d5bf0:	dd1f      	ble.n	d5c32 <_ZN12AssetTracker9updateGPSEv+0x5e>
			char c = (char)serialPort.read();
   d5bf2:	6960      	ldr	r0, [r4, #20]
   d5bf4:	6803      	ldr	r3, [r0, #0]
   d5bf6:	695b      	ldr	r3, [r3, #20]
   d5bf8:	4798      	blx	r3
   d5bfa:	b2c1      	uxtb	r1, r0
			gps.encode(c);
   d5bfc:	4630      	mov	r0, r6
   d5bfe:	9101      	str	r1, [sp, #4]
   d5c00:	f000 fb74 	bl	d62ec <_ZN11TinyGPSPlus6encodeEc>
			if (externalDecoder) {
   d5c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c06:	9901      	ldr	r1, [sp, #4]
   d5c08:	2b00      	cmp	r3, #0
   d5c0a:	d0ec      	beq.n	d5be6 <_ZN12AssetTracker9updateGPSEv+0x12>
				externalDecoder(c);
   d5c0c:	4628      	mov	r0, r5
   d5c0e:	f7ff ffd3 	bl	d5bb8 <_ZNKSt8functionIFbcEEclEc>
   d5c12:	e7e8      	b.n	d5be6 <_ZN12AssetTracker9updateGPSEv+0x12>
		WITH_LOCK(wire) {
   d5c14:	f8d0 800c 	ldr.w	r8, [r0, #12]
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5c18:	4640      	mov	r0, r8
   d5c1a:	f003 f8bb 	bl	d8d94 <_ZN7TwoWire4lockEv>
			uint16_t available = wireReadBytesAvailable();
   d5c1e:	4620      	mov	r0, r4
   d5c20:	f7ff ff4c 	bl	d5abc <_ZN12AssetTracker22wireReadBytesAvailableEv>
			if (available > 32) {
   d5c24:	2820      	cmp	r0, #32
			uint16_t available = wireReadBytesAvailable();
   d5c26:	4605      	mov	r5, r0
			if (available > 32) {
   d5c28:	d806      	bhi.n	d5c38 <_ZN12AssetTracker9updateGPSEv+0x64>
			if (available > 0) {
   d5c2a:	b930      	cbnz	r0, d5c3a <_ZN12AssetTracker9updateGPSEv+0x66>

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d5c2c:	4640      	mov	r0, r8
   d5c2e:	f003 f8ba 	bl	d8da6 <_ZN7TwoWire6unlockEv>
}
   d5c32:	b00a      	add	sp, #40	; 0x28
   d5c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				available = 32;
   d5c38:	2520      	movs	r5, #32
				if (wireReadBytes(buf, available) == available) {
   d5c3a:	462a      	mov	r2, r5
   d5c3c:	a902      	add	r1, sp, #8
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7ff ff70 	bl	d5b24 <_ZN12AssetTracker13wireReadBytesEPhj>
   d5c44:	42a8      	cmp	r0, r5
   d5c46:	d1f1      	bne.n	d5c2c <_ZN12AssetTracker9updateGPSEv+0x58>
						gps.encode(buf[ii]);
   d5c48:	f8df 902c 	ldr.w	r9, [pc, #44]	; d5c78 <_ZN12AssetTracker9updateGPSEv+0xa4>
   d5c4c:	ae02      	add	r6, sp, #8
					for(uint16_t ii = 0; ii < available; ii++) {
   d5c4e:	2700      	movs	r7, #0
							externalDecoder(buf[ii]);
   d5c50:	f104 0a20 	add.w	sl, r4, #32
						gps.encode(buf[ii]);
   d5c54:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5c58:	4648      	mov	r0, r9
   d5c5a:	f000 fb47 	bl	d62ec <_ZN11TinyGPSPlus6encodeEc>
						if (externalDecoder) {
   d5c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c60:	b123      	cbz	r3, d5c6c <_ZN12AssetTracker9updateGPSEv+0x98>
							externalDecoder(buf[ii]);
   d5c62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   d5c66:	4650      	mov	r0, sl
   d5c68:	f7ff ffa6 	bl	d5bb8 <_ZNKSt8functionIFbcEEclEc>
					for(uint16_t ii = 0; ii < available; ii++) {
   d5c6c:	3701      	adds	r7, #1
   d5c6e:	b2bf      	uxth	r7, r7
   d5c70:	42bd      	cmp	r5, r7
   d5c72:	d1ef      	bne.n	d5c54 <_ZN12AssetTracker9updateGPSEv+0x80>
   d5c74:	e7da      	b.n	d5c2c <_ZN12AssetTracker9updateGPSEv+0x58>
   d5c76:	bf00      	nop
   d5c78:	2003e408 	.word	0x2003e408

000d5c7c <_ZN12AssetTracker14threadFunctionEv>:
void AssetTracker::threadFunction() {
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4604      	mov	r4, r0
		updateGPS();
   d5c80:	4620      	mov	r0, r4
   d5c82:	f7ff ffa7 	bl	d5bd4 <_ZN12AssetTracker9updateGPSEv>
		os_thread_yield();
   d5c86:	f001 ffd7 	bl	d7c38 <os_thread_yield>
	while(true) {
   d5c8a:	e7f9      	b.n	d5c80 <_ZN12AssetTracker14threadFunctionEv+0x4>

000d5c8c <_ZN12AssetTracker20threadFunctionStaticEPv>:
void AssetTracker::threadFunctionStatic(void *param) {
   d5c8c:	b508      	push	{r3, lr}
	static_cast<AssetTracker *>(param)->threadFunction();
   d5c8e:	f7ff fff5 	bl	d5c7c <_ZN12AssetTracker14threadFunctionEv>
	...

000d5c94 <_GLOBAL__sub_I_emptyResponse>:
}
   d5c94:	b537      	push	{r0, r1, r2, r4, r5, lr}

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d5c96:	4c19      	ldr	r4, [pc, #100]	; (d5cfc <_GLOBAL__sub_I_emptyResponse+0x68>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5c98:	4d19      	ldr	r5, [pc, #100]	; (d5d00 <_GLOBAL__sub_I_emptyResponse+0x6c>)
   d5c9a:	2108      	movs	r1, #8
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	f000 fd13 	bl	d66c8 <_ZN6LIS3DHC1Ei>
   d5ca2:	4b18      	ldr	r3, [pc, #96]	; (d5d04 <_GLOBAL__sub_I_emptyResponse+0x70>)
   d5ca4:	6023      	str	r3, [r4, #0]
   d5ca6:	7829      	ldrb	r1, [r5, #0]
   d5ca8:	f3bf 8f5b 	dmb	ish
   d5cac:	f011 0101 	ands.w	r1, r1, #1
   d5cb0:	d10b      	bne.n	d5cca <_GLOBAL__sub_I_emptyResponse+0x36>
   d5cb2:	4628      	mov	r0, r5
   d5cb4:	9101      	str	r1, [sp, #4]
   d5cb6:	f7fe f9ff 	bl	d40b8 <__cxa_guard_acquire>
   d5cba:	9901      	ldr	r1, [sp, #4]
   d5cbc:	b128      	cbz	r0, d5cca <_GLOBAL__sub_I_emptyResponse+0x36>
   d5cbe:	4812      	ldr	r0, [pc, #72]	; (d5d08 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5cc0:	f003 fb4e 	bl	d9360 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5cc4:	4628      	mov	r0, r5
   d5cc6:	f7fe f9fc 	bl	d40c2 <__cxa_guard_release>
   d5cca:	4b0f      	ldr	r3, [pc, #60]	; (d5d08 <_GLOBAL__sub_I_emptyResponse+0x74>)
   d5ccc:	60e3      	str	r3, [r4, #12]
   d5cce:	2311      	movs	r3, #17
   d5cd0:	6123      	str	r3, [r4, #16]
   d5cd2:	2300      	movs	r3, #0
   d5cd4:	7523      	strb	r3, [r4, #20]
      dataMode_{dataMode}
   d5cd6:	7723      	strb	r3, [r4, #28]
   d5cd8:	4a0c      	ldr	r2, [pc, #48]	; (d5d0c <_GLOBAL__sub_I_emptyResponse+0x78>)
   d5cda:	4b0d      	ldr	r3, [pc, #52]	; (d5d10 <_GLOBAL__sub_I_emptyResponse+0x7c>)
   d5cdc:	61a2      	str	r2, [r4, #24]
   d5cde:	6223      	str	r3, [r4, #32]
static LIS3DHSPI accel(SPI, A2, WKP);
   d5ce0:	4a0c      	ldr	r2, [pc, #48]	; (d5d14 <_GLOBAL__sub_I_emptyResponse+0x80>)
   d5ce2:	490d      	ldr	r1, [pc, #52]	; (d5d18 <_GLOBAL__sub_I_emptyResponse+0x84>)
   d5ce4:	4805      	ldr	r0, [pc, #20]	; (d5cfc <_GLOBAL__sub_I_emptyResponse+0x68>)
   d5ce6:	2301      	movs	r3, #1
   d5ce8:	84a3      	strh	r3, [r4, #36]	; 0x24
   d5cea:	f004 f94d 	bl	d9f88 <__aeabi_atexit>
static TinyGPSPlus gps;
   d5cee:	480b      	ldr	r0, [pc, #44]	; (d5d1c <_GLOBAL__sub_I_emptyResponse+0x88>)
}
   d5cf0:	b003      	add	sp, #12
   d5cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
static TinyGPSPlus gps;
   d5cf6:	f000 b85e 	b.w	d5db6 <_ZN11TinyGPSPlusC1Ev>
   d5cfa:	bf00      	nop
   d5cfc:	2003e5a8 	.word	0x2003e5a8
   d5d00:	2003e3fc 	.word	0x2003e3fc
   d5d04:	000db310 	.word	0x000db310
   d5d08:	2003e400 	.word	0x2003e400
   d5d0c:	000db29c 	.word	0x000db29c
   d5d10:	00989680 	.word	0x00989680
   d5d14:	2003e230 	.word	0x2003e230
   d5d18:	000d6609 	.word	0x000d6609
   d5d1c:	2003e408 	.word	0x2003e408

000d5d20 <_ZN13LegacyAdapterD1Ev>:

}

LegacyAdapter::~LegacyAdapter() {

}
   d5d20:	4770      	bx	lr

000d5d22 <_ZN13LegacyAdapterD0Ev>:
LegacyAdapter::~LegacyAdapter() {
   d5d22:	b510      	push	{r4, lr}
}
   d5d24:	2108      	movs	r1, #8
LegacyAdapter::~LegacyAdapter() {
   d5d26:	4604      	mov	r4, r0
}
   d5d28:	f004 f933 	bl	d9f92 <_ZdlPvj>
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	bd10      	pop	{r4, pc}

000d5d30 <_ZN13LegacyAdapterC1ER11TinyGPSPlus>:
LegacyAdapter::LegacyAdapter(TinyGPSPlus &gpsData) : gpsData(gpsData) {
   d5d30:	4a01      	ldr	r2, [pc, #4]	; (d5d38 <_ZN13LegacyAdapterC1ER11TinyGPSPlus+0x8>)
   d5d32:	e9c0 2100 	strd	r2, r1, [r0]
}
   d5d36:	4770      	bx	lr
   d5d38:	000db2c0 	.word	0x000db2c0

000d5d3c <_ZN11TinyGPSDataC1Ev>:
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d3c:	2200      	movs	r2, #0
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5d3e:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5d42:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d46:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   d5d4a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d4e:	8002      	strh	r2, [r0, #0]
	RawDegrees() : deg(0), billionths(0), negative(false)
   d5d50:	8082      	strh	r2, [r0, #4]
   d5d52:	6082      	str	r2, [r0, #8]
   d5d54:	7302      	strb	r2, [r0, #12]
   d5d56:	8202      	strh	r2, [r0, #16]
   d5d58:	6142      	str	r2, [r0, #20]
   d5d5a:	7602      	strb	r2, [r0, #24]
   d5d5c:	8382      	strh	r2, [r0, #28]
   d5d5e:	6202      	str	r2, [r0, #32]
   d5d60:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5d64:	8502      	strh	r2, [r0, #40]	; 0x28
   d5d66:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5d68:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	TinyGPSLocation() : valid(false), updated(false), lastCommitTime(0)
   d5d6c:	6342      	str	r2, [r0, #52]	; 0x34
	TinyGPSDate() : valid(false), updated(false), date(0), newDate(0), lastCommitTime(0)
   d5d6e:	8702      	strh	r2, [r0, #56]	; 0x38
   d5d70:	6442      	str	r2, [r0, #68]	; 0x44
	TinyGPSTime() : valid(false), updated(false), time(0), newTime(0), lastCommitTime(0)
   d5d72:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d5d76:	6542      	str	r2, [r0, #84]	; 0x54
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d78:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d5d7c:	6642      	str	r2, [r0, #100]	; 0x64
   d5d7e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d5d82:	6742      	str	r2, [r0, #116]	; 0x74
   d5d84:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d5d88:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   d5d8c:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d90:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5d94:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   d5d98:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   d5d9c:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d5da0:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	TinyGPSInteger() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5da4:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d5da8:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	TinyGPSDecimal() : valid(false), updated(false), lastCommitTime(0), val(0), newval(0)
   d5dac:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
   d5db0:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
class TinyGPSData {
   d5db4:	4770      	bx	lr

000d5db6 <_ZN11TinyGPSPlusC1Ev>:
	return value * value;
}
#endif
// End

TinyGPSPlus::TinyGPSPlus()
   d5db6:	b510      	push	{r4, lr}
   d5db8:	4604      	mov	r4, r0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d5dba:	f7ff ffbf 	bl	d5d3c <_ZN11TinyGPSDataC1Ev>
   d5dbe:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d5dc2:	f7ff ffbb 	bl	d5d3c <_ZN11TinyGPSDataC1Ev>
   d5dc6:	2302      	movs	r3, #2
   d5dc8:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
   d5dcc:	2300      	movs	r3, #0
   d5dce:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
   d5dd2:	e9c4 3364 	strd	r3, r3, [r4, #400]	; 0x190
   d5dd6:	e9c4 3366 	strd	r3, r3, [r4, #408]	; 0x198
   d5dda:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
   d5dde:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
   d5de2:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
{
  term[0] = '\0';
   d5de6:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
}
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5dee:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5df2:	2b05      	cmp	r3, #5
   d5df4:	d802      	bhi.n	d5dfc <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5df6:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5dfa:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5dfc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5e00:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5e02:	bf94      	ite	ls
   d5e04:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5e08:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5e0c:	4770      	bx	lr

000d5e0e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5e0e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5e10:	7805      	ldrb	r5, [r0, #0]
{
   d5e12:	4604      	mov	r4, r0
  if (negative) ++term;
   d5e14:	2d2d      	cmp	r5, #45	; 0x2d
   d5e16:	bf08      	it	eq
   d5e18:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f004 fe24 	bl	daa68 <atol>
   d5e20:	2364      	movs	r3, #100	; 0x64
   d5e22:	4358      	muls	r0, r3
   d5e24:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5e26:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5e2a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5e2e:	2909      	cmp	r1, #9
   d5e30:	d9f8      	bls.n	d5e24 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5e32:	2b2e      	cmp	r3, #46	; 0x2e
   d5e34:	d10b      	bne.n	d5e4e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5e36:	7853      	ldrb	r3, [r2, #1]
   d5e38:	3b30      	subs	r3, #48	; 0x30
   d5e3a:	2b09      	cmp	r3, #9
   d5e3c:	d807      	bhi.n	d5e4e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5e3e:	210a      	movs	r1, #10
   d5e40:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5e44:	7893      	ldrb	r3, [r2, #2]
   d5e46:	3b30      	subs	r3, #48	; 0x30
   d5e48:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5e4a:	bf98      	it	ls
   d5e4c:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5e4e:	2d2d      	cmp	r5, #45	; 0x2d
   d5e50:	bf08      	it	eq
   d5e52:	4240      	negeq	r0, r0
}
   d5e54:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5e58:	b538      	push	{r3, r4, r5, lr}
   d5e5a:	460d      	mov	r5, r1
   d5e5c:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5e5e:	f004 fe03 	bl	daa68 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5e62:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5e64:	4b13      	ldr	r3, [pc, #76]	; (d5eb4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5e66:	fbb0 f1f2 	udiv	r1, r0, r2
   d5e6a:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5e6e:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5e70:	8029      	strh	r1, [r5, #0]
   d5e72:	4620      	mov	r0, r4

  while (isdigit(*term))
   d5e74:	7802      	ldrb	r2, [r0, #0]
   d5e76:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d5e7a:	2c09      	cmp	r4, #9
   d5e7c:	4601      	mov	r1, r0
   d5e7e:	f100 0001 	add.w	r0, r0, #1
   d5e82:	d9f7      	bls.n	d5e74 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5e84:	2a2e      	cmp	r2, #46	; 0x2e
   d5e86:	d10b      	bne.n	d5ea0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d5e88:	480a      	ldr	r0, [pc, #40]	; (d5eb4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5e8a:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d5e8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5e90:	3a30      	subs	r2, #48	; 0x30
   d5e92:	2a09      	cmp	r2, #9
   d5e94:	d804      	bhi.n	d5ea0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d5e96:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5e9a:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d5e9e:	e7f5      	b.n	d5e8c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5ea0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5ea4:	3301      	adds	r3, #1
   d5ea6:	2203      	movs	r2, #3
   d5ea8:	fbb3 f3f2 	udiv	r3, r3, r2
   d5eac:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5eae:	2300      	movs	r3, #0
   d5eb0:	722b      	strb	r3, [r5, #8]
}
   d5eb2:	bd38      	pop	{r3, r4, r5, pc}
   d5eb4:	00989680 	.word	0x00989680

000d5eb8 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5eb8:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5eba:	4603      	mov	r3, r0
{
   d5ebc:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5ebe:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5ec2:	6042      	str	r2, [r0, #4]
   d5ec4:	685a      	ldr	r2, [r3, #4]
   d5ec6:	6082      	str	r2, [r0, #8]
   d5ec8:	7a1b      	ldrb	r3, [r3, #8]
   d5eca:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5ecc:	4603      	mov	r3, r0
   d5ece:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5ed2:	6102      	str	r2, [r0, #16]
   d5ed4:	685a      	ldr	r2, [r3, #4]
   d5ed6:	6142      	str	r2, [r0, #20]
   d5ed8:	7a1b      	ldrb	r3, [r3, #8]
   d5eda:	7603      	strb	r3, [r0, #24]
   d5edc:	f001 ff14 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5ee0:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5ee4:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5ee6:	8023      	strh	r3, [r4, #0]
}
   d5ee8:	bd10      	pop	{r4, pc}
   d5eea:	0000      	movs	r0, r0
   d5eec:	0000      	movs	r0, r0
	...

000d5ef0 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5ef0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5ef2:	2300      	movs	r3, #0
{
   d5ef4:	4604      	mov	r4, r0
   updated = false;
   d5ef6:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5ef8:	6880      	ldr	r0, [r0, #8]
   d5efa:	f004 f995 	bl	da228 <__aeabi_ui2d>
   d5efe:	a30c      	add	r3, pc, #48	; (adr r3, d5f30 <_ZN15TinyGPSLocation3latEv+0x40>)
   d5f00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f04:	f004 fb34 	bl	da570 <__aeabi_ddiv>
   d5f08:	4606      	mov	r6, r0
   d5f0a:	88a0      	ldrh	r0, [r4, #4]
   d5f0c:	460f      	mov	r7, r1
   d5f0e:	f004 f99b 	bl	da248 <__aeabi_i2d>
   d5f12:	460b      	mov	r3, r1
   d5f14:	4602      	mov	r2, r0
   d5f16:	4639      	mov	r1, r7
   d5f18:	4630      	mov	r0, r6
   d5f1a:	f004 f849 	bl	d9fb0 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5f1e:	7b23      	ldrb	r3, [r4, #12]
   d5f20:	b113      	cbz	r3, d5f28 <_ZN15TinyGPSLocation3latEv+0x38>
   d5f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5f26:	4619      	mov	r1, r3
}
   d5f28:	ec41 0b10 	vmov	d0, r0, r1
   d5f2c:	bdd0      	pop	{r4, r6, r7, pc}
   d5f2e:	bf00      	nop
   d5f30:	00000000 	.word	0x00000000
   d5f34:	41cdcd65 	.word	0x41cdcd65

000d5f38 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5f38:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5f3a:	2300      	movs	r3, #0
{
   d5f3c:	4604      	mov	r4, r0
   updated = false;
   d5f3e:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5f40:	6940      	ldr	r0, [r0, #20]
   d5f42:	f004 f971 	bl	da228 <__aeabi_ui2d>
   d5f46:	a30c      	add	r3, pc, #48	; (adr r3, d5f78 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d5f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f4c:	f004 fb10 	bl	da570 <__aeabi_ddiv>
   d5f50:	4606      	mov	r6, r0
   d5f52:	8a20      	ldrh	r0, [r4, #16]
   d5f54:	460f      	mov	r7, r1
   d5f56:	f004 f977 	bl	da248 <__aeabi_i2d>
   d5f5a:	460b      	mov	r3, r1
   d5f5c:	4602      	mov	r2, r0
   d5f5e:	4639      	mov	r1, r7
   d5f60:	4630      	mov	r0, r6
   d5f62:	f004 f825 	bl	d9fb0 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5f66:	7e23      	ldrb	r3, [r4, #24]
   d5f68:	b113      	cbz	r3, d5f70 <_ZN15TinyGPSLocation3lngEv+0x38>
   d5f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5f6e:	4619      	mov	r1, r3
}
   d5f70:	ec41 0b10 	vmov	d0, r0, r1
   d5f74:	bdd0      	pop	{r4, r6, r7, pc}
   d5f76:	bf00      	nop
   d5f78:	00000000 	.word	0x00000000
   d5f7c:	41cdcd65 	.word	0x41cdcd65

000d5f80 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5f80:	b510      	push	{r4, lr}
   date = newDate;
   d5f82:	6883      	ldr	r3, [r0, #8]
   d5f84:	6043      	str	r3, [r0, #4]
{
   d5f86:	4604      	mov	r4, r0
   d5f88:	f001 febe 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5f8c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5f90:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5f92:	8023      	strh	r3, [r4, #0]
}
   d5f94:	bd10      	pop	{r4, pc}

000d5f96 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d5f96:	b510      	push	{r4, lr}
   time = newTime;
   d5f98:	6883      	ldr	r3, [r0, #8]
   d5f9a:	6043      	str	r3, [r0, #4]
{
   d5f9c:	4604      	mov	r4, r0
   d5f9e:	f001 feb3 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5fa2:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5fa6:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5fa8:	8023      	strh	r3, [r4, #0]
}
   d5faa:	bd10      	pop	{r4, pc}

000d5fac <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d5fac:	b510      	push	{r4, lr}
   d5fae:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5fb0:	4608      	mov	r0, r1
   d5fb2:	f7ff ff2c 	bl	d5e0e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5fb6:	60a0      	str	r0, [r4, #8]
}
   d5fb8:	bd10      	pop	{r4, pc}

000d5fba <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d5fba:	b510      	push	{r4, lr}
   d5fbc:	4604      	mov	r4, r0
   newDate = atol(term);
   d5fbe:	4608      	mov	r0, r1
   d5fc0:	f004 fd52 	bl	daa68 <atol>
   d5fc4:	60a0      	str	r0, [r4, #8]
}
   d5fc6:	bd10      	pop	{r4, pc}

000d5fc8 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5fc8:	b510      	push	{r4, lr}
   val = newval;
   d5fca:	68c3      	ldr	r3, [r0, #12]
   d5fcc:	6083      	str	r3, [r0, #8]
{
   d5fce:	4604      	mov	r4, r0
   d5fd0:	f001 fe9a 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5fd4:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5fd8:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5fda:	8023      	strh	r3, [r4, #0]
}
   d5fdc:	bd10      	pop	{r4, pc}

000d5fde <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d5fde:	b510      	push	{r4, lr}
   d5fe0:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5fe2:	4608      	mov	r0, r1
   d5fe4:	f7ff ff13 	bl	d5e0e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5fe8:	60e0      	str	r0, [r4, #12]
}
   d5fea:	bd10      	pop	{r4, pc}

000d5fec <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d5fec:	b510      	push	{r4, lr}
   val = newval;
   d5fee:	68c3      	ldr	r3, [r0, #12]
   d5ff0:	6083      	str	r3, [r0, #8]
{
   d5ff2:	4604      	mov	r4, r0
   d5ff4:	f001 fe88 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5ff8:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5ffc:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5ffe:	8023      	strh	r3, [r4, #0]
}
   d6000:	bd10      	pop	{r4, pc}

000d6002 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d6002:	b510      	push	{r4, lr}
   d6004:	4604      	mov	r4, r0
   newval = atol(term);
   d6006:	4608      	mov	r0, r1
   d6008:	f004 fd2e 	bl	daa68 <atol>
   d600c:	60e0      	str	r0, [r4, #12]
}
   d600e:	bd10      	pop	{r4, pc}

000d6010 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d6010:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d6012:	4601      	mov	r1, r0
{
   d6014:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d6016:	3010      	adds	r0, #16
   d6018:	f004 fda8 	bl	dab6c <strcpy>
   d601c:	f001 fe74 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d6020:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d6024:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d6026:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d6028:	bd10      	pop	{r4, pc}

000d602a <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d602a:	2210      	movs	r2, #16
   d602c:	f004 bdcb 	b.w	dabc6 <strncpy>

000d6030 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d6030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d6032:	f890 5171 	ldrb.w	r5, [r0, #369]	; 0x171
{
   d6036:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d6038:	2d00      	cmp	r5, #0
   d603a:	f000 8088 	beq.w	d614e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d603e:	f890 1172 	ldrb.w	r1, [r0, #370]	; 0x172
   d6042:	f7ff fed4 	bl	d5dee <_ZN11TinyGPSPlus7fromHexEc>
   d6046:	f894 1173 	ldrb.w	r1, [r4, #371]	; 0x173
   d604a:	4602      	mov	r2, r0
   d604c:	4620      	mov	r0, r4
   d604e:	f7ff fece 	bl	d5dee <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d6052:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d6056:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d605a:	b2c0      	uxtb	r0, r0
   d605c:	4283      	cmp	r3, r0
   d605e:	d16e      	bne.n	d613e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
      passedChecksumCount++;
   d6060:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   d6064:	3301      	adds	r3, #1
   d6066:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
      if (sentenceHasFix)
   d606a:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d606e:	b123      	cbz	r3, d607a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x4a>
        ++sentencesWithFixCount;
   d6070:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   d6074:	3301      	adds	r3, #1
   d6076:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
      switch(curSentenceType)
   d607a:	f894 3181 	ldrb.w	r3, [r4, #385]	; 0x181
   d607e:	b3e3      	cbz	r3, d60fa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xca>
   d6080:	2b01      	cmp	r3, #1
   d6082:	d12b      	bne.n	d60dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
    	tempData.date.commit();
   d6084:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   d6088:	f7ff ff7a 	bl	d5f80 <_ZN11TinyGPSDate6commitEv>
    	tempData.time.commit();
   d608c:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d6090:	f7ff ff81 	bl	d5f96 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6094:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6098:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d609c:	b15b      	cbz	r3, d60b6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x86>
           tempData.location.commit();
   d609e:	4630      	mov	r0, r6
   d60a0:	f7ff ff0a 	bl	d5eb8 <_ZN15TinyGPSLocation6commitEv>
           tempData.speed.commit();
   d60a4:	f504 7088 	add.w	r0, r4, #272	; 0x110
   d60a8:	f7ff ff8e 	bl	d5fc8 <_ZN14TinyGPSDecimal6commitEv>
           tempData.course.commit();
   d60ac:	f504 7090 	add.w	r0, r4, #288	; 0x120
        tempData.hdop.commit();
   d60b0:	f7ff ff8a 	bl	d5fc8 <_ZN14TinyGPSDecimal6commitEv>
   d60b4:	e005      	b.n	d60c2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x92>
	void invalidate() { valid = false; }
   d60b6:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d60ba:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   d60be:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
        os_thread_scheduling(false, NULL);
   d60c2:	2100      	movs	r1, #0
   d60c4:	4608      	mov	r0, r1
   d60c6:	f001 fdbf 	bl	d7c48 <os_thread_scheduling>
        	TinyGPSData::operator=(tempData);
   d60ca:	4631      	mov	r1, r6
   d60cc:	22b8      	movs	r2, #184	; 0xb8
   d60ce:	4620      	mov	r0, r4
   d60d0:	f004 fcee 	bl	daab0 <memcpy>
        os_thread_scheduling(true, NULL);
   d60d4:	2100      	movs	r1, #0
   d60d6:	2001      	movs	r0, #1
   d60d8:	f001 fdb6 	bl	d7c48 <os_thread_scheduling>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d60dc:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
   d60e0:	b39e      	cbz	r6, d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d60e2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d60e6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d60e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d60ea:	f004 fd35 	bl	dab58 <strcmp>
   d60ee:	bb60      	cbnz	r0, d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
         p->commit();
   d60f0:	4630      	mov	r0, r6
   d60f2:	f7ff ff8d 	bl	d6010 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d60f6:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d60f8:	e7f2      	b.n	d60e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
        tempData.time.commit();
   d60fa:	f504 7080 	add.w	r0, r4, #256	; 0x100
   d60fe:	f7ff ff4a 	bl	d5f96 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d6102:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   d6106:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
   d610a:	b18b      	cbz	r3, d6130 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
          tempData.location.commit();
   d610c:	4630      	mov	r0, r6
   d610e:	f7ff fed3 	bl	d5eb8 <_ZN15TinyGPSLocation6commitEv>
          tempData.altitude.commit();
   d6112:	f504 7098 	add.w	r0, r4, #304	; 0x130
   d6116:	f7ff ff57 	bl	d5fc8 <_ZN14TinyGPSDecimal6commitEv>
          tempData.geoidSeparation.commit();
   d611a:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   d611e:	f7ff ff53 	bl	d5fc8 <_ZN14TinyGPSDecimal6commitEv>
        tempData.satellites.commit();
   d6122:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   d6126:	f7ff ff61 	bl	d5fec <_ZN14TinyGPSInteger6commitEv>
        tempData.hdop.commit();
   d612a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   d612e:	e7bf      	b.n	d60b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
	void invalidate() { valid = false; }
   d6130:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	void invalidate() { valid = false; }
   d6134:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   d6138:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
   d613c:	e7f1      	b.n	d6122 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      ++failedChecksumCount;
   d613e:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
   d6142:	3301      	adds	r3, #1
   d6144:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
    return false;
   d6148:	2500      	movs	r5, #0
}
   d614a:	4628      	mov	r0, r5
   d614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d614e:	f890 2182 	ldrb.w	r2, [r0, #386]	; 0x182
   d6152:	bb6a      	cbnz	r2, d61b0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x180>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, "GNRMC"))
   d6154:	f500 76b9 	add.w	r6, r0, #370	; 0x172
   d6158:	4960      	ldr	r1, [pc, #384]	; (d62dc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2ac>)
   d615a:	4630      	mov	r0, r6
   d615c:	f004 fcfc 	bl	dab58 <strcmp>
   d6160:	b120      	cbz	r0, d616c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13c>
   d6162:	495f      	ldr	r1, [pc, #380]	; (d62e0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b0>)
   d6164:	4630      	mov	r0, r6
   d6166:	f004 fcf7 	bl	dab58 <strcmp>
   d616a:	b998      	cbnz	r0, d6194 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x164>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d616c:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d616e:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d6172:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
   d6176:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d617a:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
   d617e:	2f00      	cmp	r7, #0
   d6180:	d0e3      	beq.n	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d6182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   d6184:	4631      	mov	r1, r6
   d6186:	f004 fce7 	bl	dab58 <strcmp>
   d618a:	2800      	cmp	r0, #0
   d618c:	f280 809f 	bge.w	d62ce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x29e>
   d6190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   d6192:	e7f0      	b.n	d6176 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x146>
    else if (!strcmp(term, _GPGGAterm) ||!strcmp(term, "GNGGA"))
   d6194:	4953      	ldr	r1, [pc, #332]	; (d62e4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b4>)
   d6196:	4630      	mov	r0, r6
   d6198:	f004 fcde 	bl	dab58 <strcmp>
   d619c:	b120      	cbz	r0, d61a8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x178>
   d619e:	4952      	ldr	r1, [pc, #328]	; (d62e8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x2b8>)
   d61a0:	4630      	mov	r0, r6
   d61a2:	f004 fcd9 	bl	dab58 <strcmp>
   d61a6:	b908      	cbnz	r0, d61ac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17c>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d61a8:	2300      	movs	r3, #0
   d61aa:	e7e0      	b.n	d616e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
      curSentenceType = GPS_SENTENCE_OTHER;
   d61ac:	2302      	movs	r3, #2
   d61ae:	e7de      	b.n	d616e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x13e>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d61b0:	f890 1181 	ldrb.w	r1, [r0, #385]	; 0x181
   d61b4:	2902      	cmp	r1, #2
   d61b6:	d024      	beq.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d61b8:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   d61bc:	b30b      	cbz	r3, d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
    switch(COMBINE(curSentenceType, curTermNumber))
   d61be:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d61c2:	3a01      	subs	r2, #1
   d61c4:	2a28      	cmp	r2, #40	; 0x28
   d61c6:	d81c      	bhi.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   d61c8:	e8df f002 	tbb	[pc, r2]
   d61cc:	4a433c15 	.word	0x4a433c15
   d61d0:	726b664d 	.word	0x726b664d
   d61d4:	1b7c1b77 	.word	0x1b7c1b77
   d61d8:	1b1b1b1b 	.word	0x1b1b1b1b
   d61dc:	1b1b1b1b 	.word	0x1b1b1b1b
   d61e0:	1b1b1b1b 	.word	0x1b1b1b1b
   d61e4:	1b1b1b1b 	.word	0x1b1b1b1b
   d61e8:	1b1b1b1b 	.word	0x1b1b1b1b
   d61ec:	433c3515 	.word	0x433c3515
   d61f0:	5b544d4a 	.word	0x5b544d4a
   d61f4:	60          	.byte	0x60
   d61f5:	00          	.byte	0x00
	  tempData.time.setTime(term);
   d61f6:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d61fa:	f500 7080 	add.w	r0, r0, #256	; 0x100
   d61fe:	f7ff fed5 	bl	d5fac <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6202:	f8d4 618c 	ldr.w	r6, [r4, #396]	; 0x18c
         p->set(term);
   d6206:	f504 77b9 	add.w	r7, r4, #370	; 0x172
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d620a:	2e00      	cmp	r6, #0
   d620c:	d09d      	beq.n	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d620e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   d6212:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d6214:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d6216:	f004 fc9f 	bl	dab58 <strcmp>
   d621a:	2800      	cmp	r0, #0
   d621c:	d195      	bne.n	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d621e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d6220:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d6224:	429a      	cmp	r2, r3
   d6226:	dc90      	bgt.n	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
    if (p->termNumber == curTermNumber)
   d6228:	d103      	bne.n	d6232 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x202>
         p->set(term);
   d622a:	4639      	mov	r1, r7
   d622c:	4630      	mov	r0, r6
   d622e:	f7ff fefc 	bl	d602a <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d6232:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d6234:	e7e9      	b.n	d620a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1da>
      sentenceHasFix = term[0] == 'A';
   d6236:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d623a:	4243      	negs	r3, r0
   d623c:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d623e:	f884 3184 	strb.w	r3, [r4, #388]	; 0x184
      break;
   d6242:	e7de      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d6244:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6248:	f504 70b9 	add.w	r0, r4, #370	; 0x172
   d624c:	f7ff fe04 	bl	d5e58 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d6250:	e7d7      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      tempData.location.rawNewLatData.negative = term[0] == 'S';
   d6252:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d6256:	424b      	negs	r3, r1
   d6258:	414b      	adcs	r3, r1
   d625a:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
   d625e:	e7d0      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d6260:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   d6264:	e7f0      	b.n	d6248 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x218>
      tempData.location.rawNewLngData.negative = term[0] == 'W';
   d6266:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d626a:	4253      	negs	r3, r2
   d626c:	4153      	adcs	r3, r2
   d626e:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
      break;
   d6272:	e7c6      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.speed.set(term);
   d6274:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6278:	f500 7088 	add.w	r0, r0, #272	; 0x110
	  tempData.geoidSeparation.set(term);
   d627c:	f7ff feaf 	bl	d5fde <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d6280:	e7bf      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.course.set(term);
   d6282:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6286:	f500 7090 	add.w	r0, r0, #288	; 0x120
   d628a:	e7f7      	b.n	d627c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.date.setDate(term);
   d628c:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d6290:	30f0      	adds	r0, #240	; 0xf0
   d6292:	f7ff fe92 	bl	d5fba <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d6296:	e7b4      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
      sentenceHasFix = term[0] > '0';
   d6298:	2b30      	cmp	r3, #48	; 0x30
   d629a:	bf94      	ite	ls
   d629c:	2300      	movls	r3, #0
   d629e:	2301      	movhi	r3, #1
   d62a0:	e7cd      	b.n	d623e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20e>
	  tempData.satellites.set(term);
   d62a2:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62a6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   d62aa:	f7ff feaa 	bl	d6002 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d62ae:	e7a8      	b.n	d6202 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1d2>
	  tempData.hdop.set(term);
   d62b0:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62b4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   d62b8:	e7e0      	b.n	d627c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.altitude.set(term);
   d62ba:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62be:	f500 7098 	add.w	r0, r0, #304	; 0x130
   d62c2:	e7db      	b.n	d627c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
	  tempData.geoidSeparation.set(term);
   d62c4:	f500 71b9 	add.w	r1, r0, #370	; 0x172
   d62c8:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   d62cc:	e7d6      	b.n	d627c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24c>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d62ce:	f43f af3c 	beq.w	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
       customCandidates = NULL;
   d62d2:	2300      	movs	r3, #0
   d62d4:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   d62d8:	e737      	b.n	d614a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
   d62da:	bf00      	nop
   d62dc:	000db2c8 	.word	0x000db2c8
   d62e0:	000db2ce 	.word	0x000db2ce
   d62e4:	000db2d4 	.word	0x000db2d4
   d62e8:	000db2da 	.word	0x000db2da

000d62ec <_ZN11TinyGPSPlus6encodeEc>:
{
   d62ec:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d62ee:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
  switch(c)
   d62f2:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d62f4:	f103 0301 	add.w	r3, r3, #1
{
   d62f8:	4604      	mov	r4, r0
   d62fa:	460d      	mov	r5, r1
  ++encodedCharCount;
   d62fc:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
  switch(c)
   d6300:	d03a      	beq.n	d6378 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d6302:	f890 3183 	ldrb.w	r3, [r0, #387]	; 0x183
   d6306:	d814      	bhi.n	d6332 <_ZN11TinyGPSPlus6encodeEc+0x46>
   d6308:	290a      	cmp	r1, #10
   d630a:	d01c      	beq.n	d6346 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d630c:	290d      	cmp	r1, #13
   d630e:	d01a      	beq.n	d6346 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d6310:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d6312:	bf9f      	itttt	ls
   d6314:	1c5a      	addls	r2, r3, #1
   d6316:	191b      	addls	r3, r3, r4
   d6318:	f884 2183 	strbls.w	r2, [r4, #387]	; 0x183
   d631c:	f883 5172 	strbls.w	r5, [r3, #370]	; 0x172
    if (!isChecksumTerm)
   d6320:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   d6324:	bb98      	cbnz	r0, d638e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d6326:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   d632a:	404d      	eors	r5, r1
   d632c:	f884 5170 	strb.w	r5, [r4, #368]	; 0x170
   d6330:	e021      	b.n	d6376 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d6332:	292a      	cmp	r1, #42	; 0x2a
   d6334:	d007      	beq.n	d6346 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d6336:	292c      	cmp	r1, #44	; 0x2c
   d6338:	d1ea      	bne.n	d6310 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d633a:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   d633e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d6342:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
      if (curTermOffset < sizeof(term))
   d6346:	2b0e      	cmp	r3, #14
   d6348:	f04f 0000 	mov.w	r0, #0
   d634c:	d805      	bhi.n	d635a <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d634e:	4423      	add	r3, r4
   d6350:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
        isValidSentence = endOfTermHandler();
   d6354:	4620      	mov	r0, r4
   d6356:	f7ff fe6b 	bl	d6030 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d635a:	f894 3182 	ldrb.w	r3, [r4, #386]	; 0x182
   d635e:	3301      	adds	r3, #1
   d6360:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
      curTermOffset = 0;
   d6364:	2300      	movs	r3, #0
   d6366:	f884 3183 	strb.w	r3, [r4, #387]	; 0x183
      isChecksumTerm = c == '*';
   d636a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d636e:	425d      	negs	r5, r3
   d6370:	415d      	adcs	r5, r3
   d6372:	f884 5171 	strb.w	r5, [r4, #369]	; 0x171
}
   d6376:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d6378:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d637a:	2302      	movs	r3, #2
    parity = 0;
   d637c:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    curSentenceType = GPS_SENTENCE_OTHER;
   d6380:	f884 3181 	strb.w	r3, [r4, #385]	; 0x181
    curTermNumber = curTermOffset = 0;
   d6384:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    sentenceHasFix = false;
   d6388:	f884 0184 	strb.w	r0, [r4, #388]	; 0x184
    return false;
   d638c:	e7f3      	b.n	d6376 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d638e:	2000      	movs	r0, #0
   d6390:	e7f1      	b.n	d6376 <_ZN11TinyGPSPlus6encodeEc+0x8a>

000d6392 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6392:	b513      	push	{r0, r1, r4, lr}
   d6394:	460b      	mov	r3, r1
   d6396:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6398:	e9d0 0100 	ldrd	r0, r1, [r0]
   d639c:	466c      	mov	r4, sp
   d639e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d63a2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d63a6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d63aa:	e894 0003 	ldmia.w	r4, {r0, r1}
   d63ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d63b2:	b002      	add	sp, #8
   d63b4:	bd10      	pop	{r4, pc}
	...

000d63b8 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj>:
   d63b8:	4b03      	ldr	r3, [pc, #12]	; (d63c8 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x10>)
   d63ba:	2201      	movs	r2, #1
   d63bc:	701a      	strb	r2, [r3, #0]
        name_(name) {
   d63be:	4b03      	ldr	r3, [pc, #12]	; (d63cc <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x14>)
   d63c0:	4a03      	ldr	r2, [pc, #12]	; (d63d0 <_GLOBAL__sub_I__ZN16UbloxCommandBaseC2EPhj+0x18>)
   d63c2:	601a      	str	r2, [r3, #0]
bool AssistNowDownload::alloc(size_t bufferSize) {
	this->bufferSize = bufferSize;
	this->buffer = new uint8_t[bufferSize];

	return (this->buffer != NULL);
}
   d63c4:	4770      	bx	lr
   d63c6:	bf00      	nop
   d63c8:	2003e5d8 	.word	0x2003e5d8
   d63cc:	2003e5d4 	.word	0x2003e5d4
   d63d0:	000db2e0 	.word	0x000db2e0

000d63d4 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d63d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
  memset(_data, 0, sizeof(_data));
   d63d6:	2300      	movs	r3, #0
   d63d8:	6043      	str	r3, [r0, #4]
   d63da:	6083      	str	r3, [r0, #8]
   d63dc:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
   d63de:	6103      	str	r3, [r0, #16]
   d63e0:	6143      	str	r3, [r0, #20]
  _dataCRC    = 0; 
   d63e2:	8303      	strh	r3, [r0, #24]
  _readCRC    = 0;
  _singleDrop = singleDrop;
   d63e4:	7682      	strb	r2, [r0, #26]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d63e6:	4604      	mov	r4, r0
  ds          = new OneWire(pin);
   d63e8:	200e      	movs	r0, #14
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d63ea:	9101      	str	r1, [sp, #4]
  ds          = new OneWire(pin);
   d63ec:	f7fd fe53 	bl	d4096 <_Znwj>
   d63f0:	4605      	mov	r5, r0
   d63f2:	b110      	cbz	r0, d63fa <_ZN7DS18B20C1Etb+0x26>
   d63f4:	9901      	ldr	r1, [sp, #4]
   d63f6:	f000 ffb3 	bl	d7360 <_ZN7OneWireC1Et>
}
   d63fa:	4620      	mov	r0, r4
  ds          = new OneWire(pin);
   d63fc:	6025      	str	r5, [r4, #0]
}
   d63fe:	b003      	add	sp, #12
   d6400:	bd30      	pop	{r4, r5, pc}

000d6402 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d6402:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d6404:	f100 0510 	add.w	r5, r0, #16
{
   d6408:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d640a:	6800      	ldr	r0, [r0, #0]
   d640c:	4629      	mov	r1, r5
   d640e:	f001 f897 	bl	d7540 <_ZN7OneWire6searchEPh>
   d6412:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d6414:	bf1d      	ittte	ne
   d6416:	682b      	ldrne	r3, [r5, #0]
   d6418:	6023      	strne	r3, [r4, #0]
   d641a:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d641c:	6023      	streq	r3, [r4, #0]
  boolean isSuccess = ds->search(_addr);
   d641e:	bf14      	ite	ne
   d6420:	2001      	movne	r0, #1
   d6422:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
   d6424:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
   d6426:	bd38      	pop	{r3, r4, r5, pc}

000d6428 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
   d6428:	b510      	push	{r4, lr}
   d642a:	4604      	mov	r4, r0
{
  delete(ds);
   d642c:	6800      	ldr	r0, [r0, #0]
   d642e:	b110      	cbz	r0, d6436 <_ZN7DS18B20D1Ev+0xe>
   d6430:	210e      	movs	r1, #14
   d6432:	f003 fdae 	bl	d9f92 <_ZdlPvj>
}
   d6436:	4620      	mov	r0, r4
   d6438:	bd10      	pop	{r4, pc}

000d643a <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d643a:	6800      	ldr	r0, [r0, #0]
   d643c:	f001 b878 	b.w	d7530 <_ZN7OneWire12reset_searchEv>

000d6440 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d6440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d6444:	7e83      	ldrb	r3, [r0, #26]
{
   d6446:	4604      	mov	r4, r0
   d6448:	460d      	mov	r5, r1
   d644a:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d644c:	b92b      	cbnz	r3, d645a <_ZN7DS18B2014getTemperatureEPhb+0x1a>
   d644e:	780b      	ldrb	r3, [r1, #0]
   d6450:	b91b      	cbnz	r3, d645a <_ZN7DS18B2014getTemperatureEPhb+0x1a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d6452:	ed9f 0a57 	vldr	s0, [pc, #348]	; d65b0 <_ZN7DS18B2014getTemperatureEPhb+0x170>
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
   d6456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
   d645a:	6820      	ldr	r0, [r4, #0]
   d645c:	f000 ff8a 	bl	d7374 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d6460:	7ea3      	ldrb	r3, [r4, #26]
   d6462:	2b00      	cmp	r3, #0
   d6464:	d05d      	beq.n	d6522 <_ZN7DS18B2014getTemperatureEPhb+0xe2>
   d6466:	2e00      	cmp	r6, #0
   d6468:	d15b      	bne.n	d6522 <_ZN7DS18B2014getTemperatureEPhb+0xe2>
    ds->skip();
   d646a:	6820      	ldr	r0, [r4, #0]
   d646c:	f001 f85c 	bl	d7528 <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
   d6470:	2200      	movs	r2, #0
   d6472:	2144      	movs	r1, #68	; 0x44
   d6474:	6820      	ldr	r0, [r4, #0]
   d6476:	f001 f812 	bl	d749e <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d647a:	f240 20ee 	movw	r0, #750	; 0x2ee
   d647e:	f001 ff9d 	bl	d83bc <delay>
  ds->reset();
   d6482:	6820      	ldr	r0, [r4, #0]
   d6484:	f000 ff76 	bl	d7374 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d6488:	7ea3      	ldrb	r3, [r4, #26]
   d648a:	2b00      	cmp	r3, #0
   d648c:	d04e      	beq.n	d652c <_ZN7DS18B2014getTemperatureEPhb+0xec>
   d648e:	2e00      	cmp	r6, #0
   d6490:	d14c      	bne.n	d652c <_ZN7DS18B2014getTemperatureEPhb+0xec>
    ds->skip();
   d6492:	6820      	ldr	r0, [r4, #0]
   d6494:	f001 f848 	bl	d7528 <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
   d6498:	6820      	ldr	r0, [r4, #0]
   d649a:	2200      	movs	r2, #0
   d649c:	21be      	movs	r1, #190	; 0xbe
   d649e:	f000 fffe 	bl	d749e <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d64a2:	782b      	ldrb	r3, [r5, #0]
   d64a4:	2b26      	cmp	r3, #38	; 0x26
   d64a6:	d104      	bne.n	d64b2 <_ZN7DS18B2014getTemperatureEPhb+0x72>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d64a8:	2200      	movs	r2, #0
   d64aa:	6820      	ldr	r0, [r4, #0]
   d64ac:	4611      	mov	r1, r2
   d64ae:	f000 fff6 	bl	d749e <_ZN7OneWire5writeEhh>
   d64b2:	1d26      	adds	r6, r4, #4
   d64b4:	f104 080d 	add.w	r8, r4, #13
   d64b8:	4637      	mov	r7, r6
    _data[i] = ds->read();
   d64ba:	6820      	ldr	r0, [r4, #0]
   d64bc:	f001 f812 	bl	d74e4 <_ZN7OneWire4readEv>
   d64c0:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
   d64c4:	4546      	cmp	r6, r8
   d64c6:	d1f8      	bne.n	d64ba <_ZN7DS18B2014getTemperatureEPhb+0x7a>
  _dataCRC = (OneWire::crc8(_data, 8));
   d64c8:	2108      	movs	r1, #8
   d64ca:	4638      	mov	r0, r7
   d64cc:	f001 f8ac 	bl	d7628 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d64d0:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
   d64d2:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
   d64d4:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
   d64d6:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d64d8:	d1bb      	bne.n	d6452 <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
   d64da:	782b      	ldrb	r3, [r5, #0]
   d64dc:	2b26      	cmp	r3, #38	; 0x26
   d64de:	d047      	beq.n	d6570 <_ZN7DS18B2014getTemperatureEPhb+0x130>
   d64e0:	d829      	bhi.n	d6536 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d64e2:	2b10      	cmp	r3, #16
   d64e4:	d029      	beq.n	d653a <_ZN7DS18B2014getTemperatureEPhb+0xfa>
   d64e6:	2b22      	cmp	r3, #34	; 0x22
   d64e8:	d1b3      	bne.n	d6452 <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
   d64ea:	7a22      	ldrb	r2, [r4, #8]
   d64ec:	7923      	ldrb	r3, [r4, #4]
   d64ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d64f2:	2a20      	cmp	r2, #32
   d64f4:	d036      	beq.n	d6564 <_ZN7DS18B2014getTemperatureEPhb+0x124>
   d64f6:	2a40      	cmp	r2, #64	; 0x40
   d64f8:	d037      	beq.n	d656a <_ZN7DS18B2014getTemperatureEPhb+0x12a>
   d64fa:	b912      	cbnz	r2, d6502 <_ZN7DS18B2014getTemperatureEPhb+0xc2>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d64fc:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d6500:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d6502:	7963      	ldrb	r3, [r4, #5]
   d6504:	7920      	ldrb	r0, [r4, #4]
   d6506:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d650a:	b200      	sxth	r0, r0
   d650c:	f003 fe9c 	bl	da248 <__aeabi_i2d>
   d6510:	4b28      	ldr	r3, [pc, #160]	; (d65b4 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d6512:	2200      	movs	r2, #0
   d6514:	f003 ff02 	bl	da31c <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d6518:	f004 f9f8 	bl	da90c <__aeabi_d2f>
   d651c:	ee00 0a10 	vmov	s0, r0
      break;
   d6520:	e799      	b.n	d6456 <_ZN7DS18B2014getTemperatureEPhb+0x16>
    ds->select(addr);
   d6522:	6820      	ldr	r0, [r4, #0]
   d6524:	4629      	mov	r1, r5
   d6526:	f000 ffed 	bl	d7504 <_ZN7OneWire6selectEPKh>
   d652a:	e7a1      	b.n	d6470 <_ZN7DS18B2014getTemperatureEPhb+0x30>
    ds->select(addr);
   d652c:	6820      	ldr	r0, [r4, #0]
   d652e:	4629      	mov	r1, r5
   d6530:	f000 ffe8 	bl	d7504 <_ZN7OneWire6selectEPKh>
   d6534:	e7b0      	b.n	d6498 <_ZN7DS18B2014getTemperatureEPhb+0x58>
  switch(addr[0]) 
   d6536:	2b28      	cmp	r3, #40	; 0x28
   d6538:	e7d6      	b.n	d64e8 <_ZN7DS18B2014getTemperatureEPhb+0xa8>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d653a:	7ae3      	ldrb	r3, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d653c:	88a2      	ldrh	r2, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d653e:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6540:	bf08      	it	eq
   d6542:	7aa3      	ldrbeq	r3, [r4, #10]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d6544:	ea4f 02c2 	mov.w	r2, r2, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6548:	bf03      	ittte	eq
   d654a:	f1c3 030c 	rsbeq	r3, r3, #12
   d654e:	f022 020f 	biceq.w	r2, r2, #15
   d6552:	189b      	addeq	r3, r3, r2
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d6554:	b213      	sxthne	r3, r2
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d6556:	bf08      	it	eq
   d6558:	b21b      	sxtheq	r3, r3
      celsius = (float)raw / 16.0;
   d655a:	ee00 3a10 	vmov	s0, r3
   d655e:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d6562:	e778      	b.n	d6456 <_ZN7DS18B2014getTemperatureEPhb+0x16>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d6564:	f023 0303 	bic.w	r3, r3, #3
   d6568:	e7ca      	b.n	d6500 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d656a:	f023 0301 	bic.w	r3, r3, #1
   d656e:	e7c7      	b.n	d6500 <_ZN7DS18B2014getTemperatureEPhb+0xc0>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d6570:	79a5      	ldrb	r5, [r4, #6]
   d6572:	4628      	mov	r0, r5
   d6574:	f003 fe68 	bl	da248 <__aeabi_i2d>
   d6578:	4606      	mov	r6, r0
   d657a:	7960      	ldrb	r0, [r4, #5]
   d657c:	10c0      	asrs	r0, r0, #3
   d657e:	ee07 0a90 	vmov	s15, r0
   d6582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d6586:	460f      	mov	r7, r1
   d6588:	ee17 0a90 	vmov	r0, s15
   d658c:	f003 fe6e 	bl	da26c <__aeabi_f2d>
   d6590:	4b09      	ldr	r3, [pc, #36]	; (d65b8 <_ZN7DS18B2014getTemperatureEPhb+0x178>)
   d6592:	2200      	movs	r2, #0
   d6594:	f003 fec2 	bl	da31c <__aeabi_dmul>
   d6598:	062b      	lsls	r3, r5, #24
   d659a:	bf54      	ite	pl
   d659c:	4b07      	ldrpl	r3, [pc, #28]	; (d65bc <_ZN7DS18B2014getTemperatureEPhb+0x17c>)
   d659e:	4b08      	ldrmi	r3, [pc, #32]	; (d65c0 <_ZN7DS18B2014getTemperatureEPhb+0x180>)
   d65a0:	2200      	movs	r2, #0
   d65a2:	f003 febb 	bl	da31c <__aeabi_dmul>
   d65a6:	4632      	mov	r2, r6
   d65a8:	463b      	mov	r3, r7
   d65aa:	f003 fd01 	bl	d9fb0 <__adddf3>
   d65ae:	e7b3      	b.n	d6518 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d65b0:	7fc00000 	.word	0x7fc00000
   d65b4:	3fb00000 	.word	0x3fb00000
   d65b8:	3fa00000 	.word	0x3fa00000
   d65bc:	3ff00000 	.word	0x3ff00000
   d65c0:	bff00000 	.word	0xbff00000
   d65c4:	00000000 	.word	0x00000000

000d65c8 <_ZN7DS18B2019convertToFahrenheitEf>:

float DS18B20::convertToFahrenheit(float celsius)
{
   d65c8:	b508      	push	{r3, lr}
   d65ca:	ee10 0a10 	vmov	r0, s0
  return celsius * 1.8 + 32.0;
   d65ce:	f003 fe4d 	bl	da26c <__aeabi_f2d>
   d65d2:	a308      	add	r3, pc, #32	; (adr r3, d65f4 <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d65d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d65d8:	f003 fea0 	bl	da31c <__aeabi_dmul>
   d65dc:	4b04      	ldr	r3, [pc, #16]	; (d65f0 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d65de:	2200      	movs	r2, #0
   d65e0:	f003 fce6 	bl	d9fb0 <__adddf3>
   d65e4:	f004 f992 	bl	da90c <__aeabi_d2f>
}
   d65e8:	ee00 0a10 	vmov	s0, r0
   d65ec:	bd08      	pop	{r3, pc}
   d65ee:	bf00      	nop
   d65f0:	40400000 	.word	0x40400000
   d65f4:	cccccccd 	.word	0xcccccccd
   d65f8:	3ffccccc 	.word	0x3ffccccc

000d65fc <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d65fc:	7e02      	ldrb	r2, [r0, #24]
   d65fe:	7e40      	ldrb	r0, [r0, #25]
}
   d6600:	1a13      	subs	r3, r2, r0
   d6602:	4258      	negs	r0, r3
   d6604:	4158      	adcs	r0, r3
   d6606:	4770      	bx	lr

000d6608 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d6608:	4770      	bx	lr

000d660a <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d660a:	b510      	push	{r4, lr}
}
   d660c:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d660e:	4604      	mov	r4, r0
}
   d6610:	f003 fcbf 	bl	d9f92 <_ZdlPvj>
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d6618:	b510      	push	{r4, lr}
   d661a:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d661c:	f100 0118 	add.w	r1, r0, #24
   d6620:	68c0      	ldr	r0, [r0, #12]
   d6622:	f002 fed3 	bl	d93cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d6626:	8a20      	ldrh	r0, [r4, #16]
   d6628:	2100      	movs	r1, #0
}
   d662a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d662e:	f003 bc3e 	b.w	d9eae <digitalWrite>

000d6632 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d6632:	b510      	push	{r4, lr}
   d6634:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d6636:	2101      	movs	r1, #1
   d6638:	8a00      	ldrh	r0, [r0, #16]
   d663a:	f003 fc38 	bl	d9eae <digitalWrite>

	spi.endTransaction();
   d663e:	68e0      	ldr	r0, [r4, #12]
}
   d6640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d6644:	f002 bea9 	b.w	d939a <_ZN8SPIClass14endTransactionEv>

000d6648 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d6648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d664a:	461e      	mov	r6, r3
	beginTransaction();
   d664c:	6803      	ldr	r3, [r0, #0]
   d664e:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d6650:	460f      	mov	r7, r1
   d6652:	4614      	mov	r4, r2
   d6654:	4605      	mov	r5, r0
	beginTransaction();
   d6656:	4798      	blx	r3

	if (numBytes > 1) {
   d6658:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d665a:	bf88      	it	hi
   d665c:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d6660:	68e8      	ldr	r0, [r5, #12]
   d6662:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d6666:	f002 ff1f 	bl	d94a8 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d666a:	4426      	add	r6, r4
   d666c:	42b4      	cmp	r4, r6
   d666e:	d006      	beq.n	d667e <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d6670:	68e8      	ldr	r0, [r5, #12]
   d6672:	2100      	movs	r1, #0
   d6674:	f002 ff18 	bl	d94a8 <_ZN8SPIClass8transferEh>
   d6678:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d667c:	e7f6      	b.n	d666c <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d667e:	682b      	ldr	r3, [r5, #0]
   d6680:	4628      	mov	r0, r5
   d6682:	699b      	ldr	r3, [r3, #24]
   d6684:	4798      	blx	r3

	return true;
}
   d6686:	2001      	movs	r0, #1
   d6688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d668a <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d668a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d668c:	461e      	mov	r6, r3
	beginTransaction();
   d668e:	6803      	ldr	r3, [r0, #0]
   d6690:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d6692:	460f      	mov	r7, r1
   d6694:	4614      	mov	r4, r2
   d6696:	4605      	mov	r5, r0
	beginTransaction();
   d6698:	4798      	blx	r3

	if (numBytes > 1) {
   d669a:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d669c:	bf88      	it	hi
   d669e:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d66a2:	68e8      	ldr	r0, [r5, #12]
   d66a4:	4639      	mov	r1, r7
   d66a6:	f002 feff 	bl	d94a8 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d66aa:	4426      	add	r6, r4
   d66ac:	42b4      	cmp	r4, r6
   d66ae:	d005      	beq.n	d66bc <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d66b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   d66b4:	68e8      	ldr	r0, [r5, #12]
   d66b6:	f002 fef7 	bl	d94a8 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d66ba:	e7f7      	b.n	d66ac <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d66bc:	682b      	ldr	r3, [r5, #0]
   d66be:	4628      	mov	r0, r5
   d66c0:	699b      	ldr	r3, [r3, #24]
   d66c2:	4798      	blx	r3

	return true;
}
   d66c4:	2001      	movs	r0, #1
   d66c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66c8 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d66c8:	4a02      	ldr	r2, [pc, #8]	; (d66d4 <_ZN6LIS3DHC1Ei+0xc>)
   d66ca:	e9c0 2100 	strd	r2, r1, [r0]
   d66ce:	2200      	movs	r2, #0
   d66d0:	7202      	strb	r2, [r0, #8]
}
   d66d2:	4770      	bx	lr
   d66d4:	000db2f4 	.word	0x000db2f4

000d66d8 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d66d8:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d66da:	6803      	ldr	r3, [r0, #0]
   d66dc:	aa01      	add	r2, sp, #4
   d66de:	68dc      	ldr	r4, [r3, #12]
   d66e0:	2301      	movs	r3, #1
   d66e2:	47a0      	blx	r4
}
   d66e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d66e8:	b002      	add	sp, #8
   d66ea:	bd10      	pop	{r4, pc}

000d66ec <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d66ec:	b538      	push	{r3, r4, r5, lr}
   d66ee:	4605      	mov	r5, r0
   d66f0:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d66f2:	210f      	movs	r1, #15
   d66f4:	4628      	mov	r0, r5
   d66f6:	f7ff ffef 	bl	d66d8 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d66fa:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d66fc:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d6700:	d004      	beq.n	d670c <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d6702:	f001 fe5b 	bl	d83bc <delay>
	for(int tries = 0; tries < 10; tries++) {
   d6706:	3c01      	subs	r4, #1
   d6708:	d1f3      	bne.n	d66f2 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d670a:	4620      	mov	r0, r4
}
   d670c:	bd38      	pop	{r3, r4, r5, pc}

000d670e <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d670e:	b510      	push	{r4, lr}
   d6710:	4604      	mov	r4, r0
	spi.begin(ss);
   d6712:	8a01      	ldrh	r1, [r0, #16]
   d6714:	68c0      	ldr	r0, [r0, #12]
   d6716:	f002 fe2d 	bl	d9374 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d671a:	4620      	mov	r0, r4
}
   d671c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d6720:	f7ff bfe4 	b.w	d66ec <_ZN6LIS3DH9hasDeviceEv>

000d6724 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6724:	4770      	bx	lr

000d6726 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6726:	b510      	push	{r4, lr}
}
   d6728:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d672a:	4604      	mov	r4, r0
}
   d672c:	f003 fc31 	bl	d9f92 <_ZdlPvj>
   d6730:	4620      	mov	r0, r4
   d6732:	bd10      	pop	{r4, pc}

000d6734 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6734:	6803      	ldr	r3, [r0, #0]
   d6736:	b2c9      	uxtb	r1, r1
   d6738:	689b      	ldr	r3, [r3, #8]
   d673a:	4718      	bx	r3

000d673c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d673c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d673e:	4d03      	ldr	r5, [pc, #12]	; (d674c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6740:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6744:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6748:	bd30      	pop	{r4, r5, pc}
   d674a:	bf00      	nop
   d674c:	000db360 	.word	0x000db360

000d6750 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6750:	6840      	ldr	r0, [r0, #4]
   d6752:	f002 bae5 	b.w	d8d20 <_ZN7TwoWire5beginEv>

000d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      ~lock_guard()
   d6756:	b510      	push	{r4, lr}
   d6758:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d675a:	6800      	ldr	r0, [r0, #0]
   d675c:	f002 fb23 	bl	d8da6 <_ZN7TwoWire6unlockEv>
   d6760:	4620      	mov	r0, r4
   d6762:	bd10      	pop	{r4, pc}

000d6764 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d6764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6768:	b08a      	sub	sp, #40	; 0x28
   d676a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d676c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d676e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6770:	f002 fb10 	bl	d8d94 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d6774:	221e      	movs	r2, #30
   d6776:	2100      	movs	r1, #0
   d6778:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d677a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d677c:	f004 f9c0 	bl	dab00 <memset>
		size_t framAddr = 0;
   d6780:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6782:	b1ef      	cbz	r7, d67c0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6784:	6823      	ldr	r3, [r4, #0]
   d6786:	2f1e      	cmp	r7, #30
   d6788:	46b8      	mov	r8, r7
   d678a:	bf28      	it	cs
   d678c:	f04f 081e 	movcs.w	r8, #30
   d6790:	68dd      	ldr	r5, [r3, #12]
   d6792:	aa02      	add	r2, sp, #8
   d6794:	4643      	mov	r3, r8
   d6796:	4631      	mov	r1, r6
   d6798:	4620      	mov	r0, r4
   d679a:	47a8      	blx	r5
			if (!result) {
   d679c:	4605      	mov	r5, r0
   d679e:	b958      	cbnz	r0, d67b8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d67a0:	480a      	ldr	r0, [pc, #40]	; (d67cc <_ZN6MB85RC5eraseEv+0x68>)
   d67a2:	490b      	ldr	r1, [pc, #44]	; (d67d0 <_ZN6MB85RC5eraseEv+0x6c>)
   d67a4:	4632      	mov	r2, r6
   d67a6:	f7fd fd73 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d67aa:	a801      	add	r0, sp, #4
   d67ac:	f7ff ffd3 	bl	d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d67b0:	4628      	mov	r0, r5
   d67b2:	b00a      	add	sp, #40	; 0x28
   d67b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d67b8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d67bc:	4446      	add	r6, r8
		while(totalLen > 0) {
   d67be:	e7e0      	b.n	d6782 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d67c0:	a801      	add	r0, sp, #4
   d67c2:	f7ff ffc8 	bl	d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d67c6:	2501      	movs	r5, #1
   d67c8:	e7f2      	b.n	d67b0 <_ZN6MB85RC5eraseEv+0x4c>
   d67ca:	bf00      	nop
   d67cc:	2003e624 	.word	0x2003e624
   d67d0:	000db32c 	.word	0x000db32c

000d67d4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d67d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d67d8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d67da:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67dc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d67de:	460d      	mov	r5, r1
   d67e0:	4616      	mov	r6, r2
   d67e2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d67e4:	f002 fad6 	bl	d8d94 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d67e8:	b1a7      	cbz	r7, d6814 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d67ea:	68e1      	ldr	r1, [r4, #12]
   d67ec:	6860      	ldr	r0, [r4, #4]
   d67ee:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d67f2:	f002 fac8 	bl	d8d86 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d67f6:	0a29      	lsrs	r1, r5, #8
   d67f8:	6860      	ldr	r0, [r4, #4]
   d67fa:	f7ff ff9b 	bl	d6734 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d67fe:	4629      	mov	r1, r5
   d6800:	6860      	ldr	r0, [r4, #4]
   d6802:	f7ff ff97 	bl	d6734 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6806:	6860      	ldr	r0, [r4, #4]
   d6808:	2100      	movs	r1, #0
   d680a:	f002 fabf 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d680e:	b148      	cbz	r0, d6824 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6810:	2400      	movs	r4, #0
   d6812:	e000      	b.n	d6816 <_ZN6MB85RC8readDataEjPhj+0x42>
   d6814:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6816:	a801      	add	r0, sp, #4
   d6818:	f7ff ff9d 	bl	d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d681c:	4620      	mov	r0, r4
   d681e:	b003      	add	sp, #12
   d6820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d6824:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d6826:	7b21      	ldrb	r1, [r4, #12]
   d6828:	6860      	ldr	r0, [r4, #4]
   d682a:	46b8      	mov	r8, r7
   d682c:	bf28      	it	cs
   d682e:	f04f 0820 	movcs.w	r8, #32
   d6832:	2301      	movs	r3, #1
   d6834:	4642      	mov	r2, r8
   d6836:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d683a:	f002 fa8e 	bl	d8d5a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d683e:	f003 fb7b 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d6842:	6803      	ldr	r3, [r0, #0]
   d6844:	691b      	ldr	r3, [r3, #16]
   d6846:	4798      	blx	r3
   d6848:	4540      	cmp	r0, r8
   d684a:	dbe1      	blt.n	d6810 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d684c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d6850:	f003 fb72 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d6854:	6803      	ldr	r3, [r0, #0]
   d6856:	695b      	ldr	r3, [r3, #20]
   d6858:	4798      	blx	r3
   d685a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d685e:	454e      	cmp	r6, r9
   d6860:	d1f6      	bne.n	d6850 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d6862:	4445      	add	r5, r8
   d6864:	eba7 0708 	sub.w	r7, r7, r8
   d6868:	e7be      	b.n	d67e8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d686a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d686a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d686e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d6870:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6872:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d6874:	460e      	mov	r6, r1
   d6876:	4690      	mov	r8, r2
   d6878:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d687a:	f002 fa8b 	bl	d8d94 <_ZN7TwoWire4lockEv>
   d687e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6882:	f1b9 0f00 	cmp.w	r9, #0
   d6886:	d02a      	beq.n	d68de <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6888:	b34d      	cbz	r5, d68de <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d688a:	68e1      	ldr	r1, [r4, #12]
   d688c:	6860      	ldr	r0, [r4, #4]
   d688e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6892:	f002 fa78 	bl	d8d86 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6896:	0a31      	lsrs	r1, r6, #8
   d6898:	6860      	ldr	r0, [r4, #4]
   d689a:	f7ff ff4b 	bl	d6734 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d689e:	6860      	ldr	r0, [r4, #4]
   d68a0:	4631      	mov	r1, r6
   d68a2:	f7ff ff47 	bl	d6734 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d68a6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d68aa:	4647      	mov	r7, r8
   d68ac:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d68b0:	6860      	ldr	r0, [r4, #4]
   d68b2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d68b6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d68b8:	3d01      	subs	r5, #1
				wire.write(*data);
   d68ba:	689b      	ldr	r3, [r3, #8]
   d68bc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d68be:	4555      	cmp	r5, sl
   d68c0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d68c4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d68c6:	d001      	beq.n	d68cc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d68c8:	2d00      	cmp	r5, #0
   d68ca:	d1f1      	bne.n	d68b0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d68cc:	6860      	ldr	r0, [r4, #4]
   d68ce:	2101      	movs	r1, #1
   d68d0:	f002 fa5c 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d68d4:	2800      	cmp	r0, #0
   d68d6:	d0d7      	beq.n	d6888 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d68d8:	f04f 0900 	mov.w	r9, #0
   d68dc:	e7d1      	b.n	d6882 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d68de:	a801      	add	r0, sp, #4
   d68e0:	f7ff ff39 	bl	d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d68e4:	4648      	mov	r0, r9
   d68e6:	b003      	add	sp, #12
   d68e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d68ec <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68f0:	b08b      	sub	sp, #44	; 0x2c
   d68f2:	460e      	mov	r6, r1
   d68f4:	4615      	mov	r5, r2
   d68f6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d68f8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68fa:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d68fc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d68fe:	f002 fa49 	bl	d8d94 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6902:	42ae      	cmp	r6, r5
   d6904:	d229      	bcs.n	d695a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6906:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6908:	4425      	add	r5, r4
			while(numBytes > 0) {
   d690a:	b18c      	cbz	r4, d6930 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d690c:	2c1e      	cmp	r4, #30
   d690e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6910:	f8d8 3000 	ldr.w	r3, [r8]
   d6914:	bf28      	it	cs
   d6916:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6918:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d691a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d691e:	aa02      	add	r2, sp, #8
   d6920:	463b      	mov	r3, r7
   d6922:	4631      	mov	r1, r6
   d6924:	4640      	mov	r0, r8
				framAddrTo -= count;
   d6926:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d6928:	47c8      	blx	r9
				if (!result) {
   d692a:	b948      	cbnz	r0, d6940 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d692c:	2400      	movs	r4, #0
   d692e:	e000      	b.n	d6932 <_ZN6MB85RC8moveDataEjjj+0x46>
   d6930:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6932:	a801      	add	r0, sp, #4
   d6934:	f7ff ff0f 	bl	d6756 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d6938:	4620      	mov	r0, r4
   d693a:	b00b      	add	sp, #44	; 0x2c
   d693c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d6940:	f8d8 3000 	ldr.w	r3, [r8]
   d6944:	aa02      	add	r2, sp, #8
   d6946:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d694a:	4629      	mov	r1, r5
   d694c:	463b      	mov	r3, r7
   d694e:	4640      	mov	r0, r8
   d6950:	47c8      	blx	r9
				if (!result) {
   d6952:	2800      	cmp	r0, #0
   d6954:	d0ea      	beq.n	d692c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d6956:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6958:	e7d7      	b.n	d690a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d695a:	d9e9      	bls.n	d6930 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d695c:	2c00      	cmp	r4, #0
   d695e:	d0e7      	beq.n	d6930 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d6960:	f8d8 3000 	ldr.w	r3, [r8]
   d6964:	2c1e      	cmp	r4, #30
   d6966:	4627      	mov	r7, r4
   d6968:	bf28      	it	cs
   d696a:	271e      	movcs	r7, #30
   d696c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d6970:	aa02      	add	r2, sp, #8
   d6972:	463b      	mov	r3, r7
   d6974:	4631      	mov	r1, r6
   d6976:	4640      	mov	r0, r8
   d6978:	47c8      	blx	r9
				if (!result) {
   d697a:	2800      	cmp	r0, #0
   d697c:	d0d6      	beq.n	d692c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d697e:	f8d8 3000 	ldr.w	r3, [r8]
   d6982:	aa02      	add	r2, sp, #8
   d6984:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6988:	4629      	mov	r1, r5
   d698a:	463b      	mov	r3, r7
   d698c:	4640      	mov	r0, r8
   d698e:	47c8      	blx	r9
				if (!result) {
   d6990:	2800      	cmp	r0, #0
   d6992:	d0cb      	beq.n	d692c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6994:	443e      	add	r6, r7
				framAddrTo += count;
   d6996:	443d      	add	r5, r7
				numBytes -= count;
   d6998:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d699a:	e7df      	b.n	d695c <_ZN6MB85RC8moveDataEjjj+0x70>

000d699c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d699c:	2040      	movs	r0, #64	; 0x40
   d699e:	4770      	bx	lr

000d69a0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d69a0:	2000      	movs	r0, #0
   d69a2:	4770      	bx	lr

000d69a4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d69a4:	2080      	movs	r0, #128	; 0x80
   d69a6:	4770      	bx	lr

000d69a8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d69a8:	20ff      	movs	r0, #255	; 0xff
   d69aa:	4770      	bx	lr

000d69ac <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d69ac:	4770      	bx	lr

000d69ae <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d69ae:	4770      	bx	lr

000d69b0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d69b0:	4770      	bx	lr

000d69b2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d69b2:	4770      	bx	lr

000d69b4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d69b4:	b510      	push	{r4, lr}
}
   d69b6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d69b8:	4604      	mov	r4, r0
}
   d69ba:	f003 faea 	bl	d9f92 <_ZdlPvj>
   d69be:	4620      	mov	r0, r4
   d69c0:	bd10      	pop	{r4, pc}

000d69c2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d69c2:	b510      	push	{r4, lr}
}
   d69c4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d69c6:	4604      	mov	r4, r0
}
   d69c8:	f003 fae3 	bl	d9f92 <_ZdlPvj>
   d69cc:	4620      	mov	r0, r4
   d69ce:	bd10      	pop	{r4, pc}

000d69d0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d69d0:	b510      	push	{r4, lr}
}
   d69d2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d69d4:	4604      	mov	r4, r0
}
   d69d6:	f003 fadc 	bl	d9f92 <_ZdlPvj>
   d69da:	4620      	mov	r0, r4
   d69dc:	bd10      	pop	{r4, pc}

000d69de <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d69de:	b510      	push	{r4, lr}
}
   d69e0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d69e2:	4604      	mov	r4, r0
}
   d69e4:	f003 fad5 	bl	d9f92 <_ZdlPvj>
   d69e8:	4620      	mov	r0, r4
   d69ea:	bd10      	pop	{r4, pc}

000d69ec <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d69ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d69f0:	6803      	ldr	r3, [r0, #0]
   d69f2:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d69f4:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d69f6:	4798      	blx	r3
   d69f8:	2210      	movs	r2, #16
   d69fa:	4601      	mov	r1, r0
   d69fc:	4668      	mov	r0, sp
   d69fe:	f004 f87f 	bl	dab00 <memset>
	size_t len = length();
   d6a02:	6823      	ldr	r3, [r4, #0]
   d6a04:	4620      	mov	r0, r4
   d6a06:	689b      	ldr	r3, [r3, #8]
   d6a08:	4798      	blx	r3
	size_t offset = 0;
   d6a0a:	2500      	movs	r5, #0
	size_t len = length();
   d6a0c:	4607      	mov	r7, r0
	bool bResult = false;
   d6a0e:	4628      	mov	r0, r5
	while(offset < len) {
   d6a10:	42bd      	cmp	r5, r7
   d6a12:	d20e      	bcs.n	d6a32 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d6a14:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d6a16:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d6a18:	2e10      	cmp	r6, #16
   d6a1a:	bf28      	it	cs
   d6a1c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d6a1e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6a22:	466a      	mov	r2, sp
   d6a24:	4633      	mov	r3, r6
   d6a26:	4629      	mov	r1, r5
   d6a28:	4620      	mov	r0, r4
   d6a2a:	47c0      	blx	r8
		if (!bResult) {
   d6a2c:	b108      	cbz	r0, d6a32 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d6a2e:	4435      	add	r5, r6
	while(offset < len) {
   d6a30:	e7ee      	b.n	d6a10 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d6a32:	b004      	add	sp, #16
   d6a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a38 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d6a38:	f44f 7380 	mov.w	r3, #256	; 0x100
   d6a3c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d6a3e:	f240 1301 	movw	r3, #257	; 0x101
   d6a42:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d6a44:	2300      	movs	r3, #0
   d6a46:	8203      	strh	r3, [r0, #16]
}
   d6a48:	4770      	bx	lr
	...

000d6a4c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b06      	ldr	r3, [pc, #24]	; (d6a68 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6a50:	6003      	str	r3, [r0, #0]
   d6a52:	4b06      	ldr	r3, [pc, #24]	; (d6a6c <_ZN12MCP79410TimeC1Ev+0x20>)
   d6a54:	6043      	str	r3, [r0, #4]
   d6a56:	f240 7304 	movw	r3, #1796	; 0x704
   d6a5a:	8103      	strh	r3, [r0, #8]
   d6a5c:	2300      	movs	r3, #0
   d6a5e:	7443      	strb	r3, [r0, #17]
	clear();
   d6a60:	f7ff ffea 	bl	d6a38 <_ZN12MCP79410Time5clearEv>
}
   d6a64:	bd08      	pop	{r3, pc}
   d6a66:	bf00      	nop
   d6a68:	000db440 	.word	0x000db440
   d6a6c:	03020100 	.word	0x03020100

000d6a70 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a70:	0903      	lsrs	r3, r0, #4
}
   d6a72:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6a74:	f000 000f 	and.w	r0, r0, #15
}
   d6a78:	fb02 0003 	mla	r0, r2, r3, r0
   d6a7c:	4770      	bx	lr

000d6a7e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6a7e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6a80:	7a80      	ldrb	r0, [r0, #10]
   d6a82:	f7ff fff5 	bl	d6a70 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6a86:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6a8a:	bd08      	pop	{r3, pc}

000d6a8c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6a8c:	7ac0      	ldrb	r0, [r0, #11]
   d6a8e:	f000 001f 	and.w	r0, r0, #31
   d6a92:	f7ff bfed 	b.w	d6a70 <_ZN12MCP79410Time8bcdToIntEh>

000d6a96 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6a96:	7b00      	ldrb	r0, [r0, #12]
   d6a98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6a9c:	f7ff bfe8 	b.w	d6a70 <_ZN12MCP79410Time8bcdToIntEh>

000d6aa0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6aa0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6aa2:	7b81      	ldrb	r1, [r0, #14]
   d6aa4:	064a      	lsls	r2, r1, #25
   d6aa6:	d50d      	bpl.n	d6ac4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6aa8:	f001 001f 	and.w	r0, r1, #31
   d6aac:	f7ff ffe0 	bl	d6a70 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6ab0:	068b      	lsls	r3, r1, #26
   d6ab2:	d503      	bpl.n	d6abc <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d6ab4:	280c      	cmp	r0, #12
   d6ab6:	d000      	beq.n	d6aba <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6ab8:	300c      	adds	r0, #12
}
   d6aba:	bd08      	pop	{r3, pc}
				return 0;
   d6abc:	280c      	cmp	r0, #12
   d6abe:	bf08      	it	eq
   d6ac0:	2000      	moveq	r0, #0
   d6ac2:	e7fa      	b.n	d6aba <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d6ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6ac8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6acc:	f7ff bfd0 	b.w	d6a70 <_ZN12MCP79410Time8bcdToIntEh>

000d6ad0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6ad0:	7bc0      	ldrb	r0, [r0, #15]
   d6ad2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6ad6:	f7ff bfcb 	b.w	d6a70 <_ZN12MCP79410Time8bcdToIntEh>

000d6ada <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6ada:	7c00      	ldrb	r0, [r0, #16]
   d6adc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6ae0:	f7ff bfc6 	b.w	d6a70 <_ZN12MCP79410Time8bcdToIntEh>

000d6ae4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d6ae4:	b510      	push	{r4, lr}
   d6ae6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6ae8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6aea:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6aec:	2100      	movs	r1, #0
   d6aee:	a801      	add	r0, sp, #4
   d6af0:	f004 f806 	bl	dab00 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6af4:	4620      	mov	r0, r4
   d6af6:	f7ff ffc2 	bl	d6a7e <_ZNK12MCP79410Time7getYearEv>
   d6afa:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6afe:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6b00:	4620      	mov	r0, r4
   d6b02:	f7ff ffc3 	bl	d6a8c <_ZNK12MCP79410Time8getMonthEv>
   d6b06:	3801      	subs	r0, #1
   d6b08:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	f7ff ffc3 	bl	d6a96 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6b10:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6b12:	4620      	mov	r0, r4
   d6b14:	f7ff ffc4 	bl	d6aa0 <_ZNK12MCP79410Time7getHourEv>
   d6b18:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	f7ff ffd8 	bl	d6ad0 <_ZNK12MCP79410Time9getMinuteEv>
   d6b20:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6b22:	4620      	mov	r0, r4
   d6b24:	f7ff ffd9 	bl	d6ada <_ZNK12MCP79410Time9getSecondEv>
   d6b28:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d6b2a:	a801      	add	r0, sp, #4
   d6b2c:	f001 fc3e 	bl	d83ac <mktime>
}
   d6b30:	b00a      	add	sp, #40	; 0x28
   d6b32:	bd10      	pop	{r4, pc}

000d6b34 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6b34:	210a      	movs	r1, #10
   d6b36:	fb90 f2f1 	sdiv	r2, r0, r1
   d6b3a:	fb92 f3f1 	sdiv	r3, r2, r1
   d6b3e:	fb01 2313 	mls	r3, r1, r3, r2
   d6b42:	011b      	lsls	r3, r3, #4
   d6b44:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6b46:	fb01 0012 	mls	r0, r1, r2, r0
   d6b4a:	4318      	orrs	r0, r3
}
   d6b4c:	b2c0      	uxtb	r0, r0
   d6b4e:	4770      	bx	lr

000d6b50 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6b50:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6b52:	b510      	push	{r4, lr}
   d6b54:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6b56:	fb91 f0f3 	sdiv	r0, r1, r3
   d6b5a:	fb00 1013 	mls	r0, r0, r3, r1
   d6b5e:	f7ff ffe9 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
   d6b62:	72a0      	strb	r0, [r4, #10]
}
   d6b64:	bd10      	pop	{r4, pc}

000d6b66 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6b66:	b510      	push	{r4, lr}
   d6b68:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6b6a:	4608      	mov	r0, r1
   d6b6c:	f7ff ffe2 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
   d6b70:	72e0      	strb	r0, [r4, #11]
}
   d6b72:	bd10      	pop	{r4, pc}

000d6b74 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6b74:	b510      	push	{r4, lr}
   d6b76:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6b78:	4608      	mov	r0, r1
   d6b7a:	f7ff ffdb 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6b7e:	7b23      	ldrb	r3, [r4, #12]
   d6b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6b84:	4318      	orrs	r0, r3
   d6b86:	7320      	strb	r0, [r4, #12]
}
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6b8a:	b510      	push	{r4, lr}
   d6b8c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6b8e:	1c48      	adds	r0, r1, #1
   d6b90:	f7ff ffd0 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6b94:	7b63      	ldrb	r3, [r4, #13]
   d6b96:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6b9a:	4318      	orrs	r0, r3
   d6b9c:	7360      	strb	r0, [r4, #13]
}
   d6b9e:	bd10      	pop	{r4, pc}

000d6ba0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6ba0:	b510      	push	{r4, lr}
   d6ba2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6ba4:	4608      	mov	r0, r1
   d6ba6:	f7ff ffc5 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
   d6baa:	73a0      	strb	r0, [r4, #14]
}
   d6bac:	bd10      	pop	{r4, pc}

000d6bae <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6bae:	b510      	push	{r4, lr}
   d6bb0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6bb2:	4608      	mov	r0, r1
   d6bb4:	f7ff ffbe 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
   d6bb8:	73e0      	strb	r0, [r4, #15]
}
   d6bba:	bd10      	pop	{r4, pc}

000d6bbc <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6bbc:	b510      	push	{r4, lr}
   d6bbe:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6bc0:	4608      	mov	r0, r1
   d6bc2:	f7ff ffb7 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d6bc6:	7c23      	ldrb	r3, [r4, #16]
   d6bc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6bcc:	4318      	orrs	r0, r3
   d6bce:	7420      	strb	r0, [r4, #16]
}
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d6bd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6bd4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d6bd6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6bd8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6bdc:	f003 ff56 	bl	daa8c <gmtime>
   d6be0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d6be2:	6941      	ldr	r1, [r0, #20]
   d6be4:	4620      	mov	r0, r4
   d6be6:	f7ff ffb3 	bl	d6b50 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6bea:	6929      	ldr	r1, [r5, #16]
   d6bec:	4620      	mov	r0, r4
   d6bee:	3101      	adds	r1, #1
   d6bf0:	f7ff ffb9 	bl	d6b66 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d6bf4:	68e9      	ldr	r1, [r5, #12]
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	f7ff ffbc 	bl	d6b74 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6bfc:	69a9      	ldr	r1, [r5, #24]
   d6bfe:	4620      	mov	r0, r4
   d6c00:	f7ff ffc3 	bl	d6b8a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d6c04:	68a9      	ldr	r1, [r5, #8]
   d6c06:	4620      	mov	r0, r4
   d6c08:	f7ff ffca 	bl	d6ba0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6c0c:	6869      	ldr	r1, [r5, #4]
   d6c0e:	4620      	mov	r0, r4
   d6c10:	f7ff ffcd 	bl	d6bae <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6c14:	6829      	ldr	r1, [r5, #0]
   d6c16:	293b      	cmp	r1, #59	; 0x3b
   d6c18:	bfa8      	it	ge
   d6c1a:	213b      	movge	r1, #59	; 0x3b
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	f7ff ffcd 	bl	d6bbc <_ZN12MCP79410Time9setSecondEi>
}
   d6c22:	b003      	add	sp, #12
   d6c24:	bd30      	pop	{r4, r5, pc}

000d6c26 <_ZN12MCP79410Time12setAlarmTimeEx>:
void MCP79410Time::setAlarmTime(time_t unixTime) {
   d6c26:	b510      	push	{r4, lr}
   d6c28:	4604      	mov	r4, r0
	fromUnixTime(unixTime);
   d6c2a:	f7ff ffd2 	bl	d6bd2 <_ZN12MCP79410Time12fromUnixTimeEx>
	alarmMode = ALARM_MONTH_DAY_DOW_HMS;
   d6c2e:	7a63      	ldrb	r3, [r4, #9]
   d6c30:	7463      	strb	r3, [r4, #17]
}
   d6c32:	bd10      	pop	{r4, pc}

000d6c34 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6c34:	4a05      	ldr	r2, [pc, #20]	; (d6c4c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6c36:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6c38:	e9c0 2100 	strd	r2, r1, [r0]
   d6c3c:	4a04      	ldr	r2, [pc, #16]	; (d6c50 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6c3e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c40:	4a04      	ldr	r2, [pc, #16]	; (d6c54 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6c42:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c44:	4a04      	ldr	r2, [pc, #16]	; (d6c58 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6c46:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6c48:	6142      	str	r2, [r0, #20]
}
   d6c4a:	4770      	bx	lr
   d6c4c:	000db474 	.word	0x000db474
   d6c50:	03010000 	.word	0x03010000
   d6c54:	000db41c 	.word	0x000db41c
   d6c58:	000db450 	.word	0x000db450

000d6c5c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c60:	4604      	mov	r4, r0
   d6c62:	460f      	mov	r7, r1
   d6c64:	4690      	mov	r8, r2
   d6c66:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6c68:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d6c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6c6c:	429e      	cmp	r6, r3
   d6c6e:	d231      	bcs.n	d6cd4 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6c70:	6860      	ldr	r0, [r4, #4]
   d6c72:	4639      	mov	r1, r7
   d6c74:	f002 f883 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6c78:	eb08 0106 	add.w	r1, r8, r6
   d6c7c:	6860      	ldr	r0, [r4, #4]
   d6c7e:	f7ff fd59 	bl	d6734 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6c82:	6860      	ldr	r0, [r4, #4]
   d6c84:	2100      	movs	r1, #0
   d6c86:	f002 f881 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6c8a:	4605      	mov	r5, r0
   d6c8c:	b9d0      	cbnz	r0, d6cc4 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6c90:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6c92:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, (uint8_t) count, (uint8_t) true);
   d6c94:	2a20      	cmp	r2, #32
   d6c96:	f04f 0301 	mov.w	r3, #1
   d6c9a:	bf28      	it	cs
   d6c9c:	2220      	movcs	r2, #32
   d6c9e:	4639      	mov	r1, r7
   d6ca0:	f002 f85b 	bl	d8d5a <_ZN7TwoWire11requestFromEhjh>
   d6ca4:	eb09 0b06 	add.w	fp, r9, r6
   d6ca8:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6caa:	eb00 0a0b 	add.w	sl, r0, fp
   d6cae:	45d3      	cmp	fp, sl
   d6cb0:	d006      	beq.n	d6cc0 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6cb2:	6860      	ldr	r0, [r4, #4]
   d6cb4:	6803      	ldr	r3, [r0, #0]
   d6cb6:	695b      	ldr	r3, [r3, #20]
   d6cb8:	4798      	blx	r3
   d6cba:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d6cbe:	e7f6      	b.n	d6cae <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d6cc0:	442e      	add	r6, r5
	while(offset < bufLen) {
   d6cc2:	e7d2      	b.n	d6c6a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6cc4:	4602      	mov	r2, r0
   d6cc6:	4904      	ldr	r1, [pc, #16]	; (d6cd8 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6cc8:	4804      	ldr	r0, [pc, #16]	; (d6cdc <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6cca:	f7fd fae1 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d6cce:	4628      	mov	r0, r5
   d6cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cd4:	2500      	movs	r5, #0
	return stat;
   d6cd6:	e7fa      	b.n	d6cce <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6cd8:	000db374 	.word	0x000db374
   d6cdc:	2003e5dc 	.word	0x2003e5dc

000d6ce0 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6ce4:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6ce8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6cea:	6803      	ldr	r3, [r0, #0]
   d6cec:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6cee:	4605      	mov	r5, r0
   d6cf0:	460c      	mov	r4, r1
   d6cf2:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6cf4:	4798      	blx	r3
   d6cf6:	4580      	cmp	r8, r0
   d6cf8:	d80d      	bhi.n	d6d16 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6cfa:	3420      	adds	r4, #32
   d6cfc:	6868      	ldr	r0, [r5, #4]
   d6cfe:	9600      	str	r6, [sp, #0]
   d6d00:	463b      	mov	r3, r7
   d6d02:	b2e2      	uxtb	r2, r4
   d6d04:	216f      	movs	r1, #111	; 0x6f
   d6d06:	f7ff ffa9 	bl	d6c5c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6d0a:	fab0 f080 	clz	r0, r0
   d6d0e:	0940      	lsrs	r0, r0, #5
}
   d6d10:	b002      	add	sp, #8
   d6d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d16:	2000      	movs	r0, #0
   d6d18:	e7fa      	b.n	d6d10 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6d1a <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6d1e:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d22:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6d24:	6803      	ldr	r3, [r0, #0]
   d6d26:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d28:	4604      	mov	r4, r0
   d6d2a:	460d      	mov	r5, r1
   d6d2c:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6d2e:	4798      	blx	r3
   d6d30:	4580      	cmp	r8, r0
   d6d32:	d80c      	bhi.n	d6d4e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6d34:	6860      	ldr	r0, [r4, #4]
   d6d36:	9600      	str	r6, [sp, #0]
   d6d38:	463b      	mov	r3, r7
   d6d3a:	b2ea      	uxtb	r2, r5
   d6d3c:	2157      	movs	r1, #87	; 0x57
   d6d3e:	f7ff ff8d 	bl	d6c5c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6d42:	fab0 f080 	clz	r0, r0
   d6d46:	0940      	lsrs	r0, r0, #5
}
   d6d48:	b002      	add	sp, #8
   d6d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d4e:	2000      	movs	r0, #0
   d6d50:	e7fa      	b.n	d6d48 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6d52 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6d54:	1e1e      	subs	r6, r3, #0
   d6d56:	bf0c      	ite	eq
   d6d58:	2307      	moveq	r3, #7
   d6d5a:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d5c:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6d5e:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6d60:	ab02      	add	r3, sp, #8
   d6d62:	460a      	mov	r2, r1
   d6d64:	216f      	movs	r1, #111	; 0x6f
   d6d66:	f7ff ff79 	bl	d6c5c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6d6a:	4605      	mov	r5, r0
   d6d6c:	b9a8      	cbnz	r0, d6d9a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6d6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d72:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6d74:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6d78:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6d7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6d7e:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6d80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6d84:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6d86:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6d8a:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6d8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6d90:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6d92:	b92e      	cbnz	r6, d6da0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6d94:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6d98:	72a3      	strb	r3, [r4, #10]
}
   d6d9a:	4628      	mov	r0, r5
   d6d9c:	b004      	add	sp, #16
   d6d9e:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6da0:	f002 fe62 	bl	d9a68 <_ZN9TimeClass4yearEv>
   d6da4:	f7ff fec6 	bl	d6b34 <_ZN12MCP79410Time8intToBcdEi>
   d6da8:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6daa:	e7f6      	b.n	d6d9a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6dac <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6dae:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6db0:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6db2:	9300      	str	r3, [sp, #0]
   d6db4:	216f      	movs	r1, #111	; 0x6f
   d6db6:	ab03      	add	r3, sp, #12
   d6db8:	f7ff ff50 	bl	d6c5c <_ZNK8MCP7941010deviceReadEhhPhj>
   d6dbc:	b920      	cbnz	r0, d6dc8 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6dbe:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6dc2:	b005      	add	sp, #20
   d6dc4:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6dc8:	2000      	movs	r0, #0
   d6dca:	e7fa      	b.n	d6dc2 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6dcc <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6dcc:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6dce:	2103      	movs	r1, #3
   d6dd0:	f7ff ffec 	bl	d6dac <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6dd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6dd8:	bd08      	pop	{r3, pc}

000d6dda <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6dda:	b538      	push	{r3, r4, r5, lr}
   d6ddc:	2300      	movs	r3, #0
   d6dde:	460c      	mov	r4, r1
   d6de0:	460a      	mov	r2, r1
   d6de2:	4619      	mov	r1, r3
   d6de4:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6de6:	f7ff ffb4 	bl	d6d52 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6dea:	b930      	cbnz	r0, d6dfa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6dec:	7aa3      	ldrb	r3, [r4, #10]
   d6dee:	b123      	cbz	r3, d6dfa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6df0:	4628      	mov	r0, r5
}
   d6df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6df6:	f7ff bfe9 	b.w	d6dcc <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6dfa:	2000      	movs	r0, #0
   d6dfc:	bd38      	pop	{r3, r4, r5, pc}

000d6dfe <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6dfe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e00:	4602      	mov	r2, r0
	MCP79410Time time;
   d6e02:	a801      	add	r0, sp, #4
   d6e04:	f7ff fe22 	bl	d6a4c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6e08:	a901      	add	r1, sp, #4
   d6e0a:	4610      	mov	r0, r2
   d6e0c:	f7ff ffe5 	bl	d6dda <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6e10:	b128      	cbz	r0, d6e1e <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6e12:	a801      	add	r0, sp, #4
   d6e14:	f7ff fe66 	bl	d6ae4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6e18:	b007      	add	sp, #28
   d6e1a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6e1e:	2000      	movs	r0, #0
   d6e20:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6e22:	e7f9      	b.n	d6e18 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6e24 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6e24:	b5d0      	push	{r4, r6, r7, lr}
   d6e26:	4604      	mov	r4, r0
   d6e28:	b086      	sub	sp, #24
	wire.begin();
   d6e2a:	6840      	ldr	r0, [r0, #4]
   d6e2c:	f001 ff78 	bl	d8d20 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6e30:	f002 fdb8 	bl	d99a4 <_ZN9TimeClass7isValidEv>
   d6e34:	b9e8      	cbnz	r0, d6e72 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6e36:	7ae3      	ldrb	r3, [r4, #11]
   d6e38:	079b      	lsls	r3, r3, #30
   d6e3a:	d51a      	bpl.n	d6e72 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6e3c:	4620      	mov	r0, r4
   d6e3e:	f7ff ffde 	bl	d6dfe <_ZNK8MCP7941010getRTCTimeEv>
   d6e42:	4606      	mov	r6, r0
   d6e44:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6e46:	ea56 0307 	orrs.w	r3, r6, r7
   d6e4a:	d012      	beq.n	d6e72 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6e4c:	f002 fcb0 	bl	d97b0 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6e50:	4b0a      	ldr	r3, [pc, #40]	; (d6e7c <_ZN8MCP794105setupEv+0x58>)
   d6e52:	490b      	ldr	r1, [pc, #44]	; (d6e80 <_ZN8MCP794105setupEv+0x5c>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	9300      	str	r3, [sp, #0]
   d6e58:	4632      	mov	r2, r6
   d6e5a:	463b      	mov	r3, r7
   d6e5c:	a802      	add	r0, sp, #8
   d6e5e:	f002 fd5f 	bl	d9920 <_ZN9TimeClass6formatExPKc>
   d6e62:	4808      	ldr	r0, [pc, #32]	; (d6e84 <_ZN8MCP794105setupEv+0x60>)
   d6e64:	9a02      	ldr	r2, [sp, #8]
   d6e66:	4908      	ldr	r1, [pc, #32]	; (d6e88 <_ZN8MCP794105setupEv+0x64>)
   d6e68:	f7fd fa12 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d6e6c:	a802      	add	r0, sp, #8
   d6e6e:	f002 fb21 	bl	d94b4 <_ZN6StringD1Ev>
	setupDone = true;
   d6e72:	2301      	movs	r3, #1
   d6e74:	7223      	strb	r3, [r4, #8]
}
   d6e76:	b006      	add	sp, #24
   d6e78:	bdd0      	pop	{r4, r6, r7, pc}
   d6e7a:	bf00      	nop
   d6e7c:	2003e1b8 	.word	0x2003e1b8
   d6e80:	2003e650 	.word	0x2003e650
   d6e84:	2003e5dc 	.word	0x2003e5dc
   d6e88:	000db38e 	.word	0x000db38e

000d6e8c <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e90:	4606      	mov	r6, r0
   d6e92:	4688      	mov	r8, r1
   d6e94:	4691      	mov	r9, r2
   d6e96:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6e98:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6e9c:	429d      	cmp	r5, r3
   d6e9e:	d229      	bcs.n	d6ef4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6ea0:	6870      	ldr	r0, [r6, #4]
   d6ea2:	4641      	mov	r1, r8
   d6ea4:	f001 ff6b 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6ea8:	6870      	ldr	r0, [r6, #4]
   d6eaa:	eb09 0105 	add.w	r1, r9, r5
   d6eae:	f7ff fc41 	bl	d6734 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6eb4:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6eb6:	2f1f      	cmp	r7, #31
   d6eb8:	bf28      	it	cs
   d6eba:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6ebc:	eb0a 0405 	add.w	r4, sl, r5
   d6ec0:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6ec4:	6870      	ldr	r0, [r6, #4]
   d6ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6eca:	6802      	ldr	r2, [r0, #0]
   d6ecc:	6892      	ldr	r2, [r2, #8]
   d6ece:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d6ed0:	45a3      	cmp	fp, r4
   d6ed2:	d1f7      	bne.n	d6ec4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6ed4:	6870      	ldr	r0, [r6, #4]
   d6ed6:	2101      	movs	r1, #1
   d6ed8:	f001 ff58 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6edc:	4604      	mov	r4, r0
   d6ede:	b138      	cbz	r0, d6ef0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6ee0:	4602      	mov	r2, r0
   d6ee2:	4905      	ldr	r1, [pc, #20]	; (d6ef8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6ee4:	4805      	ldr	r0, [pc, #20]	; (d6efc <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6ee6:	f7fd f9d3 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6eea:	4620      	mov	r0, r4
   d6eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6ef0:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6ef2:	e7d2      	b.n	d6e9a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6ef4:	2400      	movs	r4, #0
	return stat;
   d6ef6:	e7f8      	b.n	d6eea <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6ef8:	000db3a3 	.word	0x000db3a3
   d6efc:	2003e5dc 	.word	0x2003e5dc

000d6f00 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6f04:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f08:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6f0a:	6803      	ldr	r3, [r0, #0]
   d6f0c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f0e:	4605      	mov	r5, r0
   d6f10:	460c      	mov	r4, r1
   d6f12:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6f14:	4798      	blx	r3
   d6f16:	4580      	cmp	r8, r0
   d6f18:	d80d      	bhi.n	d6f36 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6f1a:	3420      	adds	r4, #32
   d6f1c:	6868      	ldr	r0, [r5, #4]
   d6f1e:	9600      	str	r6, [sp, #0]
   d6f20:	463b      	mov	r3, r7
   d6f22:	b2e2      	uxtb	r2, r4
   d6f24:	216f      	movs	r1, #111	; 0x6f
   d6f26:	f7ff ffb1 	bl	d6e8c <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6f2a:	fab0 f080 	clz	r0, r0
   d6f2e:	0940      	lsrs	r0, r0, #5
}
   d6f30:	b002      	add	sp, #8
   d6f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6f36:	2000      	movs	r0, #0
   d6f38:	e7fa      	b.n	d6f30 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6f3a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6f3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6f3c:	7c13      	ldrb	r3, [r2, #16]
   d6f3e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6f42:	7bd3      	ldrb	r3, [r2, #15]
   d6f44:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6f48:	7b93      	ldrb	r3, [r2, #14]
   d6f4a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6f4e:	7b53      	ldrb	r3, [r2, #13]
   d6f50:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6f54:	7b13      	ldrb	r3, [r2, #12]
   d6f56:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6f5a:	7ad3      	ldrb	r3, [r2, #11]
   d6f5c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6f60:	7a93      	ldrb	r3, [r2, #10]
   d6f62:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6f66:	2307      	movs	r3, #7
   d6f68:	9300      	str	r3, [sp, #0]
   d6f6a:	460a      	mov	r2, r1
   d6f6c:	ab02      	add	r3, sp, #8
   d6f6e:	216f      	movs	r1, #111	; 0x6f
   d6f70:	f7ff ff8c 	bl	d6e8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6f74:	b005      	add	sp, #20
   d6f76:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f7a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f7a:	b510      	push	{r4, lr}
   d6f7c:	b088      	sub	sp, #32
   d6f7e:	4604      	mov	r4, r0
	MCP79410Time time;
   d6f80:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6f82:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6f84:	f7ff fd62 	bl	d6a4c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6f88:	9b01      	ldr	r3, [sp, #4]
   d6f8a:	a803      	add	r0, sp, #12
   d6f8c:	f7ff fe21 	bl	d6bd2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f90:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f94:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d6f9a:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6f9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d6fa2:	b16a      	cbz	r2, d6fc0 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d6fa4:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d6fa8:	aa03      	add	r2, sp, #12
   d6faa:	2100      	movs	r1, #0
   d6fac:	4620      	mov	r0, r4
   d6fae:	f88d 3019 	strb.w	r3, [sp, #25]
   d6fb2:	f7ff ffc2 	bl	d6f3a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6fb6:	fab0 f080 	clz	r0, r0
   d6fba:	0940      	lsrs	r0, r0, #5
   d6fbc:	b008      	add	sp, #32
   d6fbe:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d6fc0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6fc4:	e7f0      	b.n	d6fa8 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6fc8 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fca:	b087      	sub	sp, #28
   d6fcc:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d6fce:	f002 fce9 	bl	d99a4 <_ZN9TimeClass7isValidEv>
   d6fd2:	4604      	mov	r4, r0
   d6fd4:	b1e8      	cbz	r0, d7012 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d6fd6:	f002 fd02 	bl	d99de <_ZN9TimeClass3nowEv>
   d6fda:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6fdc:	4602      	mov	r2, r0
		time_t now = Time.now();
   d6fde:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d6fe0:	463b      	mov	r3, r7
   d6fe2:	4628      	mov	r0, r5
   d6fe4:	f7ff ffc9 	bl	d6f7a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6fe8:	4b0c      	ldr	r3, [pc, #48]	; (d701c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6fea:	490d      	ldr	r1, [pc, #52]	; (d7020 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6fec:	681b      	ldr	r3, [r3, #0]
   d6fee:	9300      	str	r3, [sp, #0]
   d6ff0:	4632      	mov	r2, r6
   d6ff2:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6ff4:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6ff6:	a802      	add	r0, sp, #8
   d6ff8:	f002 fc92 	bl	d9920 <_ZN9TimeClass6formatExPKc>
   d6ffc:	4809      	ldr	r0, [pc, #36]	; (d7024 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6ffe:	9a02      	ldr	r2, [sp, #8]
   d7000:	4909      	ldr	r1, [pc, #36]	; (d7028 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d7002:	f7fd f945 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d7006:	a802      	add	r0, sp, #8
   d7008:	f002 fa54 	bl	d94b4 <_ZN6StringD1Ev>
}
   d700c:	4620      	mov	r0, r4
   d700e:	b007      	add	sp, #28
   d7010:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d7012:	4906      	ldr	r1, [pc, #24]	; (d702c <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d7014:	4803      	ldr	r0, [pc, #12]	; (d7024 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7016:	f7fd f93b 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
   d701a:	e7f7      	b.n	d700c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d701c:	2003e1b8 	.word	0x2003e1b8
   d7020:	2003e650 	.word	0x2003e650
   d7024:	2003e5dc 	.word	0x2003e5dc
   d7028:	000db3be 	.word	0x000db3be
   d702c:	000db3d4 	.word	0x000db3d4

000d7030 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d7030:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d7032:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d7034:	4604      	mov	r4, r0
	if (!timeSet) {
   d7036:	b99d      	cbnz	r5, d7060 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d7038:	f002 fcb4 	bl	d99a4 <_ZN9TimeClass7isValidEv>
   d703c:	b180      	cbz	r0, d7060 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d703e:	2200      	movs	r2, #0
   d7040:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d7042:	4669      	mov	r1, sp
   d7044:	4628      	mov	r0, r5
        tm = 0;
   d7046:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d704a:	f001 f8e7 	bl	d821c <spark_sync_time_last>
			if (lastSync != 0) {
   d704e:	b138      	cbz	r0, d7060 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d7050:	7ae3      	ldrb	r3, [r4, #11]
   d7052:	07db      	lsls	r3, r3, #31
   d7054:	d502      	bpl.n	d705c <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d7056:	4620      	mov	r0, r4
   d7058:	f7ff ffb6 	bl	d6fc8 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d705c:	2301      	movs	r3, #1
   d705e:	7263      	strb	r3, [r4, #9]
}
   d7060:	b003      	add	sp, #12
   d7062:	bd30      	pop	{r4, r5, pc}

000d7064 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d7064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d7066:	2301      	movs	r3, #1
	buf[0] = value;
   d7068:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d706c:	9300      	str	r3, [sp, #0]
   d706e:	460a      	mov	r2, r1
   d7070:	ab03      	add	r3, sp, #12
   d7072:	216f      	movs	r1, #111	; 0x6f
   d7074:	f7ff ff0a 	bl	d6e8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d7078:	b005      	add	sp, #20
   d707a:	f85d fb04 	ldr.w	pc, [sp], #4

000d707e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7080:	4604      	mov	r4, r0
   d7082:	460d      	mov	r5, r1
   d7084:	4617      	mov	r7, r2
   d7086:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d7088:	f7ff fe90 	bl	d6dac <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d708c:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d7090:	4332      	orrs	r2, r6
   d7092:	4629      	mov	r1, r5
   d7094:	4620      	mov	r0, r4
}
   d7096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d709a:	f7ff bfe3 	b.w	d7064 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d709e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:
	if (set) {
   d709e:	b11b      	cbz	r3, d70a8 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xa>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d70a0:	4613      	mov	r3, r2
   d70a2:	22ff      	movs	r2, #255	; 0xff
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d70a4:	f7ff bfeb 	b.w	d707e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
   d70a8:	43d2      	mvns	r2, r2
   d70aa:	b2d2      	uxtb	r2, r2
   d70ac:	e7fa      	b.n	d70a4 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x6>

000d70ae <_ZN8MCP7941014clearInterruptEi>:
	 *
	 * @param offset 0 to get the base, or a constant like MCP79410::REG_ALARM_WKDAY_OFFSET (3).
	 *
	 * @return Returns either MCP79410::REG_ALARM0 or MCP79410::REG_ALARM1 plus the given offset
	 */
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d70ae:	2900      	cmp	r1, #0
   d70b0:	f04f 0300 	mov.w	r3, #0
   d70b4:	f04f 02f7 	mov.w	r2, #247	; 0xf7
   d70b8:	bf14      	ite	ne
   d70ba:	2114      	movne	r1, #20
   d70bc:	210d      	moveq	r1, #13
   d70be:	f7ff bfde 	b.w	d707e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d70c2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d70c2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d70c4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d70c6:	d80c      	bhi.n	d70e2 <_ZN8MCP7941010clearAlarmEi+0x20>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d70c8:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d70ca:	f04f 0300 	mov.w	r3, #0
   d70ce:	bf14      	ite	ne
   d70d0:	22df      	movne	r2, #223	; 0xdf
   d70d2:	22ef      	moveq	r2, #239	; 0xef
   d70d4:	2107      	movs	r1, #7
   d70d6:	f7ff ffd2 	bl	d707e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d70da:	fab0 f080 	clz	r0, r0
   d70de:	0940      	lsrs	r0, r0, #5
}
   d70e0:	bd08      	pop	{r3, pc}
		return false;
   d70e2:	2000      	movs	r0, #0
   d70e4:	e7fc      	b.n	d70e0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d70e6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>:
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d70e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d70e8:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(const MCP79410Time &time, bool polarity, int alarmNum) {
   d70ea:	b085      	sub	sp, #20
   d70ec:	4606      	mov	r6, r0
   d70ee:	460c      	mov	r4, r1
   d70f0:	4617      	mov	r7, r2
   d70f2:	461d      	mov	r5, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d70f4:	d902      	bls.n	d70fc <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x16>
		return false;
   d70f6:	2000      	movs	r0, #0
}
   d70f8:	b005      	add	sp, #20
   d70fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (getOscillatorRunning()) {
   d70fc:	f7ff fe66 	bl	d6dcc <_ZNK8MCP7941020getOscillatorRunningEv>
   d7100:	2800      	cmp	r0, #0
   d7102:	d0f8      	beq.n	d70f6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x10>
		clearInterrupt(alarmNum);
   d7104:	4629      	mov	r1, r5
   d7106:	4630      	mov	r0, r6
   d7108:	f7ff ffd1 	bl	d70ae <_ZN8MCP7941014clearInterruptEi>
		buf[0] = time.rawSecond;
   d710c:	7c23      	ldrb	r3, [r4, #16]
		buf[4] = time.rawDayOfMonth;
   d710e:	7b22      	ldrb	r2, [r4, #12]
		buf[0] = time.rawSecond;
   d7110:	f88d 3008 	strb.w	r3, [sp, #8]
		buf[1] = time.rawMinute;
   d7114:	7be3      	ldrb	r3, [r4, #15]
   d7116:	f88d 3009 	strb.w	r3, [sp, #9]
		buf[4] = time.rawDayOfMonth;
   d711a:	f88d 200c 	strb.w	r2, [sp, #12]
		buf[2] = time.rawHour;
   d711e:	7ba3      	ldrb	r3, [r4, #14]
		buf[5] = time.rawMonth;
   d7120:	7ae2      	ldrb	r2, [r4, #11]
		buf[2] = time.rawHour;
   d7122:	f88d 300a 	strb.w	r3, [sp, #10]
		buf[5] = time.rawMonth;
   d7126:	f88d 200d 	strb.w	r2, [sp, #13]
		buf[3] = time.rawDayOfWeek;
   d712a:	7b63      	ldrb	r3, [r4, #13]
		if (polarity) {
   d712c:	b32f      	cbz	r7, d717a <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x94>
			buf[3] |= REG_ALARM_WKDAY_ALMPOL;
   d712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d7132:	7c62      	ldrb	r2, [r4, #17]
   d7134:	0112      	lsls	r2, r2, #4
   d7136:	f002 0270 	and.w	r2, r2, #112	; 0x70
   d713a:	431a      	orrs	r2, r3
	uint8_t getAlarmRegister(int alarmNum, int offset = 0) { return ((alarmNum == 0) ? REG_ALARM0 : REG_ALARM1) + offset; };
   d713c:	2d00      	cmp	r5, #0
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d713e:	f04f 0306 	mov.w	r3, #6
		buf[3] |= (time.alarmMode & 0x7) << 4;
   d7142:	f88d 200b 	strb.w	r2, [sp, #11]
		int stat = deviceWrite(REG_I2C_ADDR, reg, buf, sizeof(buf));
   d7146:	9300      	str	r3, [sp, #0]
   d7148:	bf08      	it	eq
   d714a:	220a      	moveq	r2, #10
   d714c:	ab02      	add	r3, sp, #8
   d714e:	bf18      	it	ne
   d7150:	2211      	movne	r2, #17
   d7152:	216f      	movs	r1, #111	; 0x6f
   d7154:	4630      	mov	r0, r6
   d7156:	f7ff fe99 	bl	d6e8c <_ZN8MCP7941011deviceWriteEhhPKhj>
		if (stat == 0) {
   d715a:	4604      	mov	r4, r0
   d715c:	b948      	cbnz	r0, d7172 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x8c>
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d715e:	2d00      	cmp	r5, #0
			deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), true);
   d7160:	f04f 0301 	mov.w	r3, #1
   d7164:	bf0c      	ite	eq
   d7166:	2210      	moveq	r2, #16
   d7168:	2220      	movne	r2, #32
   d716a:	2107      	movs	r1, #7
   d716c:	4630      	mov	r0, r6
   d716e:	f7ff ff96 	bl	d709e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
		return (stat == 0);
   d7172:	fab4 f084 	clz	r0, r4
   d7176:	0940      	lsrs	r0, r0, #5
   d7178:	e7be      	b.n	d70f8 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x12>
			buf[3] &= ~REG_ALARM_WKDAY_ALMPOL;
   d717a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d717e:	e7d8      	b.n	d7132 <_ZN8MCP794108setAlarmERK12MCP79410Timebi+0x4c>

000d7180 <_ZN8MCP794108setAlarmEibi>:
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d7180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d7184:	2b01      	cmp	r3, #1
bool MCP79410::setAlarm(int secondsFromNow, bool polarity, int alarmNum) {
   d7186:	b087      	sub	sp, #28
   d7188:	4607      	mov	r7, r0
   d718a:	4689      	mov	r9, r1
   d718c:	4690      	mov	r8, r2
   d718e:	461e      	mov	r6, r3
	if (alarmNum < 0 || alarmNum > 1) {
   d7190:	d903      	bls.n	d719a <_ZN8MCP794108setAlarmEibi+0x1a>
		return false;
   d7192:	2000      	movs	r0, #0
}
   d7194:	b007      	add	sp, #28
   d7196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	time_t unixTime = getRTCTime();
   d719a:	f7ff fe30 	bl	d6dfe <_ZNK8MCP7941010getRTCTimeEv>
   d719e:	4604      	mov	r4, r0
   d71a0:	460d      	mov	r5, r1
	if (unixTime != 0) {
   d71a2:	ea54 0305 	orrs.w	r3, r4, r5
   d71a6:	d0f4      	beq.n	d7192 <_ZN8MCP794108setAlarmEibi+0x12>
		unixTime += secondsFromNow;
   d71a8:	eb10 0409 	adds.w	r4, r0, r9
   d71ac:	eb41 75e9 	adc.w	r5, r1, r9, asr #31
		MCP79410Time time;
   d71b0:	a801      	add	r0, sp, #4
   d71b2:	f7ff fc4b 	bl	d6a4c <_ZN12MCP79410TimeC1Ev>
		time.setAlarmTime(unixTime);
   d71b6:	4622      	mov	r2, r4
   d71b8:	462b      	mov	r3, r5
   d71ba:	a801      	add	r0, sp, #4
   d71bc:	f7ff fd33 	bl	d6c26 <_ZN12MCP79410Time12setAlarmTimeEx>
		return setAlarm(time, polarity, alarmNum);
   d71c0:	4633      	mov	r3, r6
   d71c2:	4642      	mov	r2, r8
   d71c4:	a901      	add	r1, sp, #4
   d71c6:	4638      	mov	r0, r7
   d71c8:	f7ff ff8d 	bl	d70e6 <_ZN8MCP794108setAlarmERK12MCP79410Timebi>
MCP79410Time::~MCP79410Time() {
   d71cc:	e7e2      	b.n	d7194 <_ZN8MCP794108setAlarmEibi+0x14>

000d71ce <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d71ce:	b538      	push	{r3, r4, r5, lr}
   d71d0:	4604      	mov	r4, r0
   d71d2:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d71d4:	6860      	ldr	r0, [r4, #4]
   d71d6:	2157      	movs	r1, #87	; 0x57
   d71d8:	f001 fdd1 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d71dc:	6860      	ldr	r0, [r4, #4]
   d71de:	2101      	movs	r1, #1
   d71e0:	f001 fdd4 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d71e4:	b108      	cbz	r0, d71ea <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d71e6:	3d01      	subs	r5, #1
   d71e8:	d1f4      	bne.n	d71d4 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d71ea:	bd38      	pop	{r3, r4, r5, pc}

000d71ec <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d71ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71f0:	4604      	mov	r4, r0
   d71f2:	460f      	mov	r7, r1
   d71f4:	4616      	mov	r6, r2
   d71f6:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d71fa:	45b0      	cmp	r8, r6
   d71fc:	d020      	beq.n	d7240 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d71fe:	6860      	ldr	r0, [r4, #4]
   d7200:	2157      	movs	r1, #87	; 0x57
   d7202:	f001 fdbc 	bl	d8d7e <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7206:	4639      	mov	r1, r7
   d7208:	6860      	ldr	r0, [r4, #4]
   d720a:	f7ff fa93 	bl	d6734 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d720e:	6860      	ldr	r0, [r4, #4]
   d7210:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7214:	6803      	ldr	r3, [r0, #0]
   d7216:	689b      	ldr	r3, [r3, #8]
   d7218:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d721a:	6860      	ldr	r0, [r4, #4]
   d721c:	2101      	movs	r1, #1
   d721e:	f001 fdb5 	bl	d8d8c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d7222:	3701      	adds	r7, #1
   d7224:	4605      	mov	r5, r0
   d7226:	b138      	cbz	r0, d7238 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d7228:	4602      	mov	r2, r0
   d722a:	4906      	ldr	r1, [pc, #24]	; (d7244 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d722c:	4806      	ldr	r0, [pc, #24]	; (d7248 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d722e:	f7fd f82f 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
}
   d7232:	4628      	mov	r0, r5
   d7234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d7238:	4620      	mov	r0, r4
   d723a:	f7ff ffc8 	bl	d71ce <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d723e:	e7dc      	b.n	d71fa <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d7240:	2500      	movs	r5, #0
	return stat;
   d7242:	e7f6      	b.n	d7232 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d7244:	000db3e9 	.word	0x000db3e9
   d7248:	2003e5dc 	.word	0x2003e5dc

000d724c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d724c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d724e:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7250:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d7252:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7254:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d7256:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7258:	4604      	mov	r4, r0
   d725a:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d725c:	4798      	blx	r3
   d725e:	4287      	cmp	r7, r0
   d7260:	d80a      	bhi.n	d7278 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d7262:	9a01      	ldr	r2, [sp, #4]
   d7264:	6860      	ldr	r0, [r4, #4]
   d7266:	4633      	mov	r3, r6
   d7268:	b2e9      	uxtb	r1, r5
   d726a:	f7ff ffbf 	bl	d71ec <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d726e:	fab0 f080 	clz	r0, r0
   d7272:	0940      	lsrs	r0, r0, #5
}
   d7274:	b003      	add	sp, #12
   d7276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7278:	2000      	movs	r0, #0
   d727a:	e7fb      	b.n	d7274 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d727c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
   d727c:	4b01      	ldr	r3, [pc, #4]	; (d7284 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d727e:	4a02      	ldr	r2, [pc, #8]	; (d7288 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d7280:	601a      	str	r2, [r3, #0]
}
   d7282:	4770      	bx	lr
   d7284:	2003e5dc 	.word	0x2003e5dc
   d7288:	000db40a 	.word	0x000db40a

000d728c <nrf_gpio_pin_port_decode>:
{
   d728c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d728e:	6803      	ldr	r3, [r0, #0]
   d7290:	2b2f      	cmp	r3, #47	; 0x2f
{
   d7292:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d7294:	d904      	bls.n	d72a0 <nrf_gpio_pin_port_decode+0x14>
   d7296:	4a07      	ldr	r2, [pc, #28]	; (d72b4 <nrf_gpio_pin_port_decode+0x28>)
   d7298:	2100      	movs	r1, #0
   d729a:	200a      	movs	r0, #10
   d729c:	f000 feec 	bl	d8078 <panic_>
    if (*p_pin < P0_PIN_NUM)
   d72a0:	6823      	ldr	r3, [r4, #0]
   d72a2:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d72a4:	bf83      	ittte	hi
   d72a6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d72aa:	4803      	ldrhi	r0, [pc, #12]	; (d72b8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d72ac:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d72ae:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   d72b2:	bd10      	pop	{r4, pc}
   d72b4:	000d7cf9 	.word	0x000d7cf9
   d72b8:	50000300 	.word	0x50000300

000d72bc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d72bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72be:	4604      	mov	r4, r0
   d72c0:	f7fc fffe 	bl	d42c0 <fastPinGetPinmap>
   d72c4:	0124      	lsls	r4, r4, #4
   d72c6:	5d03      	ldrb	r3, [r0, r4]
   d72c8:	015d      	lsls	r5, r3, #5
   d72ca:	f7fc fff9 	bl	d42c0 <fastPinGetPinmap>
   d72ce:	4420      	add	r0, r4
   d72d0:	7843      	ldrb	r3, [r0, #1]
   d72d2:	f003 031f 	and.w	r3, r3, #31
   d72d6:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d72d8:	a801      	add	r0, sp, #4
   d72da:	9301      	str	r3, [sp, #4]
   d72dc:	f7ff ffd6 	bl	d728c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d72e0:	9a01      	ldr	r2, [sp, #4]
   d72e2:	2301      	movs	r3, #1
   d72e4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d72e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d72ea:	b003      	add	sp, #12
   d72ec:	bd30      	pop	{r4, r5, pc}

000d72ee <_ZN7OneWire20digitalWriteFastHighEv.isra.0>:

    inline void digitalWriteFastHigh() {
   d72ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72f0:	4604      	mov	r4, r0
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d72f2:	f7fc ffe5 	bl	d42c0 <fastPinGetPinmap>
   d72f6:	0124      	lsls	r4, r4, #4
   d72f8:	5d03      	ldrb	r3, [r0, r4]
   d72fa:	015d      	lsls	r5, r3, #5
   d72fc:	f7fc ffe0 	bl	d42c0 <fastPinGetPinmap>
   d7300:	4420      	add	r0, r4
   d7302:	7843      	ldrb	r3, [r0, #1]
   d7304:	f003 031f 	and.w	r3, r3, #31
   d7308:	432b      	orrs	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d730a:	a801      	add	r0, sp, #4
   d730c:	9301      	str	r3, [sp, #4]
   d730e:	f7ff ffbd 	bl	d728c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d7312:	9a01      	ldr	r2, [sp, #4]
   d7314:	2301      	movs	r3, #1
   d7316:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d7318:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d731c:	b003      	add	sp, #12
   d731e:	bd30      	pop	{r4, r5, pc}

000d7320 <_ZN7OneWire15digitalReadFastEv.isra.0>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d7320:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7322:	4605      	mov	r5, r0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d7324:	f7fc ffcc 	bl	d42c0 <fastPinGetPinmap>
   d7328:	012d      	lsls	r5, r5, #4
   d732a:	5d44      	ldrb	r4, [r0, r5]
   d732c:	f7fc ffc8 	bl	d42c0 <fastPinGetPinmap>
   d7330:	4428      	add	r0, r5
   d7332:	0166      	lsls	r6, r4, #5
   d7334:	7844      	ldrb	r4, [r0, #1]
   d7336:	f004 041f 	and.w	r4, r4, #31
   d733a:	4334      	orrs	r4, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d733c:	a801      	add	r0, sp, #4
   d733e:	9401      	str	r4, [sp, #4]
   d7340:	f7ff ffa4 	bl	d728c <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d7344:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d7348:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d734a:	a801      	add	r0, sp, #4
   d734c:	f7ff ff9e 	bl	d728c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d7350:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d7352:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d7356:	40d8      	lsrs	r0, r3
      return pinReadFast(_pin);
    }
   d7358:	f000 0001 	and.w	r0, r0, #1
   d735c:	b002      	add	sp, #8
   d735e:	bd70      	pop	{r4, r5, r6, pc}

000d7360 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d7360:	b538      	push	{r3, r4, r5, lr}
   d7362:	4604      	mov	r4, r0
   d7364:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d7366:	4628      	mov	r0, r5
   d7368:	2100      	movs	r1, #0
   d736a:	f002 fd8f 	bl	d9e8c <pinMode>
    _pin = pin;
   d736e:	8025      	strh	r5, [r4, #0]
}
   d7370:	4620      	mov	r0, r4
   d7372:	bd38      	pop	{r3, r4, r5, pc}

000d7374 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d7374:	b570      	push	{r4, r5, r6, lr}
   d7376:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d7378:	f001 fd4a 	bl	d8e10 <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d737c:	8828      	ldrh	r0, [r5, #0]
   d737e:	2100      	movs	r1, #0
   d7380:	f000 fd02 	bl	d7d88 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d7384:	f001 fd46 	bl	d8e14 <_Z10interruptsv>
   d7388:	247d      	movs	r4, #125	; 0x7d
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
   d738a:	3c01      	subs	r4, #1
   d738c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d7390:	d02d      	beq.n	d73ee <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7392:	2002      	movs	r0, #2
   d7394:	f000 fcb0 	bl	d7cf8 <HAL_Delay_Microseconds>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
   d7398:	8828      	ldrh	r0, [r5, #0]
   d739a:	f7ff ffc1 	bl	d7320 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d739e:	2800      	cmp	r0, #0
   d73a0:	d0f3      	beq.n	d738a <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
   d73a2:	f001 fd35 	bl	d8e10 <_Z12noInterruptsv>

    digitalWriteFastLow();
   d73a6:	8828      	ldrh	r0, [r5, #0]
   d73a8:	f7ff ff88 	bl	d72bc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d73ac:	2101      	movs	r1, #1
   d73ae:	8828      	ldrh	r0, [r5, #0]
   d73b0:	f000 fcea 	bl	d7d88 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
   d73b4:	f001 fd2e 	bl	d8e14 <_Z10interruptsv>
   d73b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d73bc:	f000 fc9c 	bl	d7cf8 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d73c0:	f000 fcaa 	bl	d7d18 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d73c4:	2100      	movs	r1, #0
   d73c6:	4606      	mov	r6, r0
   d73c8:	8828      	ldrh	r0, [r5, #0]
   d73ca:	f000 fcdd 	bl	d7d88 <HAL_Pin_Mode>
   d73ce:	2046      	movs	r0, #70	; 0x46
   d73d0:	f000 fc92 	bl	d7cf8 <HAL_Delay_Microseconds>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
   d73d4:	8828      	ldrh	r0, [r5, #0]
   d73d6:	f7ff ffa3 	bl	d7320 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d73da:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d73de:	4630      	mov	r0, r6
   d73e0:	f000 fca2 	bl	d7d28 <HAL_enable_irq>
   d73e4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d73e8:	0964      	lsrs	r4, r4, #5
   d73ea:	f000 fc85 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
   d73ee:	4620      	mov	r0, r4
   d73f0:	bd70      	pop	{r4, r5, r6, pc}

000d73f2 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d73f2:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d73f4:	f011 0501 	ands.w	r5, r1, #1
{
   d73f8:	4604      	mov	r4, r0
    if (v & 1)
   d73fa:	d018      	beq.n	d742e <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d73fc:	f000 fc8c 	bl	d7d18 <HAL_disable_irq>
   d7400:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
   d7402:	8820      	ldrh	r0, [r4, #0]
   d7404:	f7ff ff5a 	bl	d72bc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d7408:	2101      	movs	r1, #1
   d740a:	8820      	ldrh	r0, [r4, #0]
   d740c:	f000 fcbc 	bl	d7d88 <HAL_Pin_Mode>
   d7410:	2001      	movs	r0, #1
   d7412:	f000 fc71 	bl	d7cf8 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7416:	8820      	ldrh	r0, [r4, #0]
   d7418:	2100      	movs	r1, #0
   d741a:	f000 fcb5 	bl	d7d88 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d741e:	4628      	mov	r0, r5
   d7420:	f000 fc82 	bl	d7d28 <HAL_enable_irq>
   d7424:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
   d7426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d742a:	f000 bc65 	b.w	d7cf8 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d742e:	f000 fc73 	bl	d7d18 <HAL_disable_irq>
   d7432:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d7434:	8820      	ldrh	r0, [r4, #0]
   d7436:	f7ff ff41 	bl	d72bc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d743a:	2101      	movs	r1, #1
   d743c:	8820      	ldrh	r0, [r4, #0]
   d743e:	f000 fca3 	bl	d7d88 <HAL_Pin_Mode>
   d7442:	2041      	movs	r0, #65	; 0x41
   d7444:	f000 fc58 	bl	d7cf8 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7448:	8820      	ldrh	r0, [r4, #0]
   d744a:	4629      	mov	r1, r5
   d744c:	f000 fc9c 	bl	d7d88 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d7450:	4630      	mov	r0, r6
   d7452:	f000 fc69 	bl	d7d28 <HAL_enable_irq>
   d7456:	2005      	movs	r0, #5
   d7458:	e7e5      	b.n	d7426 <_ZN7OneWire9write_bitEh+0x34>

000d745a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d745a:	b538      	push	{r3, r4, r5, lr}
   d745c:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d745e:	f000 fc5b 	bl	d7d18 <HAL_disable_irq>
   d7462:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
   d7464:	8820      	ldrh	r0, [r4, #0]
   d7466:	f7ff ff29 	bl	d72bc <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d746a:	8820      	ldrh	r0, [r4, #0]
   d746c:	2101      	movs	r1, #1
   d746e:	f000 fc8b 	bl	d7d88 <HAL_Pin_Mode>
   d7472:	2001      	movs	r0, #1
   d7474:	f000 fc40 	bl	d7cf8 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d7478:	2100      	movs	r1, #0
   d747a:	8820      	ldrh	r0, [r4, #0]
   d747c:	f000 fc84 	bl	d7d88 <HAL_Pin_Mode>
   d7480:	200d      	movs	r0, #13
   d7482:	f000 fc39 	bl	d7cf8 <HAL_Delay_Microseconds>

        pinModeFastInput(); // let pin float, pull up will raise

        delayMicroseconds(13);

        r = digitalReadFast();
   d7486:	8820      	ldrh	r0, [r4, #0]
   d7488:	f7ff ff4a 	bl	d7320 <_ZN7OneWire15digitalReadFastEv.isra.0>
   d748c:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d748e:	4628      	mov	r0, r5
   d7490:	f000 fc4a 	bl	d7d28 <HAL_enable_irq>
   d7494:	202e      	movs	r0, #46	; 0x2e
   d7496:	f000 fc2f 	bl	d7cf8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
   d749a:	4620      	mov	r0, r4
   d749c:	bd38      	pop	{r3, r4, r5, pc}

000d749e <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
   d749e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74a2:	4604      	mov	r4, r0
   d74a4:	4688      	mov	r8, r1
   d74a6:	4616      	mov	r6, r2
   d74a8:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74aa:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d74ac:	ea18 0f05 	tst.w	r8, r5
   d74b0:	bf14      	ite	ne
   d74b2:	2101      	movne	r1, #1
   d74b4:	2100      	moveq	r1, #0
   d74b6:	4620      	mov	r0, r4
   d74b8:	f7ff ff9b 	bl	d73f2 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74bc:	006d      	lsls	r5, r5, #1
   d74be:	3f01      	subs	r7, #1
   d74c0:	b2ed      	uxtb	r5, r5
   d74c2:	d1f3      	bne.n	d74ac <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
   d74c4:	b166      	cbz	r6, d74e0 <_ZN7OneWire5writeEhh+0x42>
    {
        noInterrupts();
   d74c6:	f001 fca3 	bl	d8e10 <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d74ca:	8820      	ldrh	r0, [r4, #0]
   d74cc:	f7ff ff0f 	bl	d72ee <_ZN7OneWire20digitalWriteFastHighEv.isra.0>
      HAL_Pin_Mode(_pin, OUTPUT);
   d74d0:	8820      	ldrh	r0, [r4, #0]
   d74d2:	2101      	movs	r1, #1
   d74d4:	f000 fc58 	bl	d7d88 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d74d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
   d74dc:	f001 bc9a 	b.w	d8e14 <_Z10interruptsv>
}
   d74e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d74e4 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74e6:	4607      	mov	r7, r0
   d74e8:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d74ea:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74ec:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d74ee:	4638      	mov	r0, r7
   d74f0:	f7ff ffb3 	bl	d745a <_ZN7OneWire8read_bitEv>
   d74f4:	b100      	cbz	r0, d74f8 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d74f6:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d74f8:	0064      	lsls	r4, r4, #1
   d74fa:	3e01      	subs	r6, #1
   d74fc:	b2e4      	uxtb	r4, r4
   d74fe:	d1f6      	bne.n	d74ee <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d7500:	4628      	mov	r0, r5
   d7502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7504 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d7504:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d7506:	2200      	movs	r2, #0
{
   d7508:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d750a:	2155      	movs	r1, #85	; 0x55
{
   d750c:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d750e:	f7ff ffc6 	bl	d749e <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d7512:	1e65      	subs	r5, r4, #1
   d7514:	3407      	adds	r4, #7
        write(rom[i]);
   d7516:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d751a:	2200      	movs	r2, #0
   d751c:	4630      	mov	r0, r6
   d751e:	f7ff ffbe 	bl	d749e <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d7522:	42a5      	cmp	r5, r4
   d7524:	d1f7      	bne.n	d7516 <_ZN7OneWire6selectEPKh+0x12>
}
   d7526:	bd70      	pop	{r4, r5, r6, pc}

000d7528 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
   d7528:	2200      	movs	r2, #0
   d752a:	21cc      	movs	r1, #204	; 0xcc
   d752c:	f7ff bfb7 	b.w	d749e <_ZN7OneWire5writeEhh>

000d7530 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d7530:	2300      	movs	r3, #0
   d7532:	8043      	strh	r3, [r0, #2]
   d7534:	8083      	strh	r3, [r0, #4]
   d7536:	80c3      	strh	r3, [r0, #6]
   d7538:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d753a:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d753c:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d753e:	4770      	bx	lr

000d7540 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d7540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d7544:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d7548:	4604      	mov	r4, r0
   d754a:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d754c:	f1b9 0f00 	cmp.w	r9, #0
   d7550:	d00d      	beq.n	d756e <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d7552:	2000      	movs	r0, #0
   d7554:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d7556:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d7558:	1ca3      	adds	r3, r4, #2
   d755a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d755e:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d7560:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7564:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d7568:	42a3      	cmp	r3, r4
   d756a:	d1f9      	bne.n	d7560 <_ZN7OneWire6searchEPh+0x20>
   d756c:	e004      	b.n	d7578 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d756e:	f7ff ff01 	bl	d7374 <_ZN7OneWire5resetEv>
   d7572:	b918      	cbnz	r0, d757c <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d7574:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d7576:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d7578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d757c:	464a      	mov	r2, r9
   d757e:	21f0      	movs	r1, #240	; 0xf0
   d7580:	4620      	mov	r0, r4
   d7582:	f7ff ff8c 	bl	d749e <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d7586:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d7588:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d758a:	4635      	mov	r5, r6
            id_bit = read_bit();
   d758c:	4620      	mov	r0, r4
   d758e:	f7ff ff64 	bl	d745a <_ZN7OneWire8read_bitEv>
   d7592:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d7594:	4620      	mov	r0, r4
   d7596:	f7ff ff60 	bl	d745a <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d759a:	2f01      	cmp	r7, #1
   d759c:	d10f      	bne.n	d75be <_ZN7OneWire6searchEPh+0x7e>
   d759e:	2801      	cmp	r0, #1
   d75a0:	d127      	bne.n	d75f2 <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d75a2:	2d40      	cmp	r5, #64	; 0x40
   d75a4:	d9d5      	bls.n	d7552 <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d75a6:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d75aa:	f1b9 0f00 	cmp.w	r9, #0
   d75ae:	d101      	bne.n	d75b4 <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d75b0:	2301      	movs	r3, #1
   d75b2:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d75b4:	78a3      	ldrb	r3, [r4, #2]
   d75b6:	2b00      	cmp	r3, #0
   d75b8:	d0cb      	beq.n	d7552 <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d75ba:	2001      	movs	r0, #1
   d75bc:	e7cc      	b.n	d7558 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d75be:	4287      	cmp	r7, r0
   d75c0:	eb04 030a 	add.w	r3, r4, sl
   d75c4:	d10c      	bne.n	d75e0 <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d75c6:	7aa2      	ldrb	r2, [r4, #10]
   d75c8:	42aa      	cmp	r2, r5
   d75ca:	d90e      	bls.n	d75ea <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d75cc:	789a      	ldrb	r2, [r3, #2]
   d75ce:	4216      	tst	r6, r2
   d75d0:	bf14      	ite	ne
   d75d2:	2701      	movne	r7, #1
   d75d4:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d75d6:	b967      	cbnz	r7, d75f2 <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d75d8:	2d08      	cmp	r5, #8
   d75da:	d800      	bhi.n	d75de <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d75dc:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d75de:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d75e0:	789a      	ldrb	r2, [r3, #2]
   d75e2:	ea22 0206 	bic.w	r2, r2, r6
   d75e6:	709a      	strb	r2, [r3, #2]
   d75e8:	e009      	b.n	d75fe <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d75ea:	bf0c      	ite	eq
   d75ec:	2701      	moveq	r7, #1
   d75ee:	2700      	movne	r7, #0
   d75f0:	e7f1      	b.n	d75d6 <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d75f2:	eb04 020a 	add.w	r2, r4, sl
   d75f6:	2701      	movs	r7, #1
   d75f8:	7893      	ldrb	r3, [r2, #2]
   d75fa:	4333      	orrs	r3, r6
   d75fc:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d75fe:	4639      	mov	r1, r7
   d7600:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d7602:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d7604:	f7ff fef5 	bl	d73f2 <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d7608:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d760c:	bf04      	itt	eq
   d760e:	f10a 0a01 	addeq.w	sl, sl, #1
   d7612:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d7616:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d761a:	bf08      	it	eq
   d761c:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d761e:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d7622:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d7624:	d9b2      	bls.n	d758c <_ZN7OneWire6searchEPh+0x4c>
   d7626:	e7bc      	b.n	d75a2 <_ZN7OneWire6searchEPh+0x62>

000d7628 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d7628:	b530      	push	{r4, r5, lr}
   d762a:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d762c:	4401      	add	r1, r0
   d762e:	2000      	movs	r0, #0

    while (len--)
   d7630:	428a      	cmp	r2, r1
   d7632:	d013      	beq.n	d765c <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d7634:	f812 5b01 	ldrb.w	r5, [r2], #1
   d7638:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d763a:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d763e:	f013 0f01 	tst.w	r3, #1
   d7642:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d7646:	bf1c      	itt	ne
   d7648:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d764c:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d764e:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d7650:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d7654:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d7658:	d1ef      	bne.n	d763a <_ZN7OneWire4crc8EPhh+0x12>
   d765a:	e7e9      	b.n	d7630 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d765c:	bd30      	pop	{r4, r5, pc}

000d765e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d765e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7660:	4603      	mov	r3, r0
	switch (__op)
   d7662:	d102      	bne.n	d766a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7664:	6001      	str	r1, [r0, #0]
      }
   d7666:	2000      	movs	r0, #0
   d7668:	4770      	bx	lr
	  switch (__op)
   d766a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d766c:	bf04      	itt	eq
   d766e:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7672:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7676:	e7f6      	b.n	d7666 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7678 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7678:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d767a:	6842      	ldr	r2, [r0, #4]
   d767c:	4603      	mov	r3, r0
   d767e:	1054      	asrs	r4, r2, #1
   d7680:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7684:	07d2      	lsls	r2, r2, #31
   d7686:	bf48      	it	mi
   d7688:	590a      	ldrmi	r2, [r1, r4]
   d768a:	681b      	ldr	r3, [r3, #0]
      }
   d768c:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7690:	bf48      	it	mi
   d7692:	58d3      	ldrmi	r3, [r2, r3]
   d7694:	4718      	bx	r3
	...

000d7698 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7698:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d769a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d769c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d76a0:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d76a2:	3008      	adds	r0, #8
   d76a4:	f000 fad8 	bl	d7c58 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d76a8:	2004      	movs	r0, #4
   d76aa:	f7fc fcf4 	bl	d4096 <_Znwj>
   d76ae:	4605      	mov	r5, r0
   d76b0:	b398      	cbz	r0, d771a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d76b2:	491b      	ldr	r1, [pc, #108]	; (d7720 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d76b4:	2014      	movs	r0, #20
   d76b6:	f002 fc6e 	bl	d9f96 <_ZnwjRKSt9nothrow_t>
   d76ba:	b130      	cbz	r0, d76ca <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d76bc:	2300      	movs	r3, #0
            exited(false) {
   d76be:	e9c0 3300 	strd	r3, r3, [r0]
   d76c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d76c6:	7403      	strb	r3, [r0, #16]
   d76c8:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d76ca:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d76cc:	b1a0      	cbz	r0, d76f8 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d76ce:	4b15      	ldr	r3, [pc, #84]	; (d7724 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d76d0:	4915      	ldr	r1, [pc, #84]	; (d7728 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d76d2:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d76d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d76da:	e9cd 0300 	strd	r0, r3, [sp]
   d76de:	2202      	movs	r2, #2
   d76e0:	4b12      	ldr	r3, [pc, #72]	; (d772c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d76e2:	3004      	adds	r0, #4
   d76e4:	f000 faa0 	bl	d7c28 <os_thread_create>
   d76e8:	b930      	cbnz	r0, d76f8 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d76ea:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d76ec:	7c1b      	ldrb	r3, [r3, #16]
   d76ee:	b9a3      	cbnz	r3, d771a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d76f0:	2001      	movs	r0, #1
   d76f2:	f000 faf9 	bl	d7ce8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d76f6:	e7f8      	b.n	d76ea <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76f8:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76fa:	2300      	movs	r3, #0
   d76fc:	602b      	str	r3, [r5, #0]
	if (__p != pointer())
   d76fe:	b164      	cbz	r4, d771a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7700:	6827      	ldr	r7, [r4, #0]
   d7702:	b137      	cbz	r7, d7712 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d7704:	4638      	mov	r0, r7
   d7706:	f7fe f939 	bl	d597c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d770a:	2110      	movs	r1, #16
   d770c:	4638      	mov	r0, r7
   d770e:	f002 fc40 	bl	d9f92 <_ZdlPvj>
   d7712:	2114      	movs	r1, #20
   d7714:	4620      	mov	r0, r4
   d7716:	f002 fc3c 	bl	d9f92 <_ZdlPvj>
   d771a:	6075      	str	r5, [r6, #4]
}
   d771c:	b003      	add	sp, #12
   d771e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7720:	000db754 	.word	0x000db754
   d7724:	000d7937 	.word	0x000d7937
   d7728:	000db47c 	.word	0x000db47c
   d772c:	000d58dd 	.word	0x000d58dd

000d7730 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7730:	f247 5130 	movw	r1, #30000	; 0x7530
   d7734:	4a08      	ldr	r2, [pc, #32]	; (d7758 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7736:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7738:	4908      	ldr	r1, [pc, #32]	; (d775c <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d773a:	6002      	str	r2, [r0, #0]
   d773c:	2200      	movs	r2, #0
   d773e:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7742:	4907      	ldr	r1, [pc, #28]	; (d7760 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7744:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7746:	4907      	ldr	r1, [pc, #28]	; (d7764 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7748:	6042      	str	r2, [r0, #4]
   d774a:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d774e:	6181      	str	r1, [r0, #24]
   d7750:	8502      	strh	r2, [r0, #40]	; 0x28
   d7752:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7756:	4770      	bx	lr
   d7758:	000db540 	.word	0x000db540
   d775c:	000d7aa1 	.word	0x000d7aa1
   d7760:	000d7679 	.word	0x000d7679
   d7764:	000d765f 	.word	0x000d765f

000d7768 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7768:	b510      	push	{r4, lr}
   d776a:	4b04      	ldr	r3, [pc, #16]	; (d777c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d776c:	4604      	mov	r4, r0
   d776e:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7772:	f7fe f903 	bl	d597c <_ZNSt14_Function_baseD1Ev>
}
   d7776:	4620      	mov	r0, r4
   d7778:	bd10      	pop	{r4, pc}
   d777a:	bf00      	nop
   d777c:	000db540 	.word	0x000db540

000d7780 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7780:	b510      	push	{r4, lr}
   d7782:	4b03      	ldr	r3, [pc, #12]	; (d7790 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7784:	6003      	str	r3, [r0, #0]
   d7786:	4604      	mov	r4, r0
   d7788:	f7ff ffee 	bl	d7768 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d778c:	4620      	mov	r0, r4
   d778e:	bd10      	pop	{r4, pc}
   d7790:	000db568 	.word	0x000db568

000d7794 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7794:	b510      	push	{r4, lr}
   d7796:	4604      	mov	r4, r0
}
   d7798:	f7ff fff2 	bl	d7780 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d779c:	4620      	mov	r0, r4
   d779e:	2138      	movs	r1, #56	; 0x38
   d77a0:	f002 fbf7 	bl	d9f92 <_ZdlPvj>
   d77a4:	4620      	mov	r0, r4
   d77a6:	bd10      	pop	{r4, pc}

000d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d77a8:	6880      	ldr	r0, [r0, #8]
   d77aa:	f000 ba5d 	b.w	d7c68 <os_mutex_lock>

000d77ae <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d77ae:	6880      	ldr	r0, [r0, #8]
   d77b0:	f000 ba62 	b.w	d7c78 <os_mutex_unlock>

000d77b4 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d77b4:	b510      	push	{r4, lr}
   d77b6:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d77b8:	6800      	ldr	r0, [r0, #0]
   d77ba:	f7ff fff8 	bl	d77ae <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d77be:	4620      	mov	r0, r4
   d77c0:	bd10      	pop	{r4, pc}

000d77c2 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d77c2:	b513      	push	{r0, r1, r4, lr}
   d77c4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77c6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77c8:	f7ff ffee 	bl	d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d77ce:	88dc      	ldrh	r4, [r3, #6]
   d77d0:	b2a4      	uxth	r4, r4
   d77d2:	b10c      	cbz	r4, d77d8 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d77d4:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d77d8:	a801      	add	r0, sp, #4
   d77da:	f7ff ffeb 	bl	d77b4 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d77de:	4620      	mov	r0, r4
   d77e0:	b002      	add	sp, #8
   d77e2:	bd10      	pop	{r4, pc}

000d77e4 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d77e4:	b513      	push	{r0, r1, r4, lr}
   d77e6:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77e8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77ea:	f7ff ffdd 	bl	d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d77ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d77f2:	b943      	cbnz	r3, d7806 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d77f6:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d77f8:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d77fa:	a801      	add	r0, sp, #4
   d77fc:	f7ff ffda 	bl	d77b4 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7800:	4620      	mov	r0, r4
   d7802:	b002      	add	sp, #8
   d7804:	bd10      	pop	{r4, pc}
	bool result = false;
   d7806:	2400      	movs	r4, #0
   d7808:	e7f7      	b.n	d77fa <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d780a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d780a:	b513      	push	{r0, r1, r4, lr}
   d780c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d780e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7810:	f7ff ffca 	bl	d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d7814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d7816:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7818:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d781a:	f7ff ffcb 	bl	d77b4 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d781e:	4620      	mov	r0, r4
   d7820:	b002      	add	sp, #8
   d7822:	bd10      	pop	{r4, pc}

000d7824 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7828:	4699      	mov	r9, r3
   d782a:	b086      	sub	sp, #24
	if (!haveSetup) {
   d782c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7830:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7834:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7838:	4604      	mov	r4, r0
   d783a:	460f      	mov	r7, r1
   d783c:	4616      	mov	r6, r2
	if (!haveSetup) {
   d783e:	b913      	cbnz	r3, d7846 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7840:	6803      	ldr	r3, [r0, #0]
   d7842:	689b      	ldr	r3, [r3, #8]
   d7844:	4798      	blx	r3
		data = "";
   d7846:	4b31      	ldr	r3, [pc, #196]	; (d790c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7848:	4638      	mov	r0, r7
		data = "";
   d784a:	2e00      	cmp	r6, #0
   d784c:	bf08      	it	eq
   d784e:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7850:	f003 f9b1 	bl	dabb6 <strlen>
   d7854:	4605      	mov	r5, r0
   d7856:	4630      	mov	r0, r6
   d7858:	f003 f9ad 	bl	dabb6 <strlen>
   d785c:	4428      	add	r0, r5
   d785e:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7862:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7864:	bf1c      	itt	ne
   d7866:	f025 0503 	bicne.w	r5, r5, #3
   d786a:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d786c:	4633      	mov	r3, r6
   d786e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7872:	e9cd 9a00 	strd	r9, sl, [sp]
   d7876:	4926      	ldr	r1, [pc, #152]	; (d7910 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7878:	4826      	ldr	r0, [pc, #152]	; (d7914 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d787a:	463a      	mov	r2, r7
   d787c:	f7fc fd08 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7880:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7882:	3b08      	subs	r3, #8
   d7884:	42ab      	cmp	r3, r5
   d7886:	d212      	bcs.n	d78ae <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7888:	2400      	movs	r4, #0
}
   d788a:	4620      	mov	r0, r4
   d788c:	b006      	add	sp, #24
   d788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7892:	88cb      	ldrh	r3, [r1, #6]
   d7894:	2b01      	cmp	r3, #1
   d7896:	d036      	beq.n	d7906 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7898:	a805      	add	r0, sp, #20
   d789a:	f7ff ff8b 	bl	d77b4 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d789e:	6823      	ldr	r3, [r4, #0]
   d78a0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d78a4:	699b      	ldr	r3, [r3, #24]
   d78a6:	4620      	mov	r0, r4
   d78a8:	4798      	blx	r3
   d78aa:	2800      	cmp	r0, #0
   d78ac:	d0ec      	beq.n	d7888 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d78ae:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d78b0:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d78b2:	f7ff ff79 	bl	d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d78b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d78b8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d78ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d78bc:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d78be:	1ad2      	subs	r2, r2, r3
   d78c0:	42aa      	cmp	r2, r5
   d78c2:	d3e6      	bcc.n	d7892 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d78c4:	ea48 080a 	orr.w	r8, r8, sl
   d78c8:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d78cc:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d78d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d78d2:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d78d6:	4639      	mov	r1, r7
   d78d8:	4640      	mov	r0, r8
   d78da:	f003 f947 	bl	dab6c <strcpy>
				cp += strlen(cp) + 1;
   d78de:	4640      	mov	r0, r8
   d78e0:	f003 f969 	bl	dabb6 <strlen>
   d78e4:	3001      	adds	r0, #1
				strcpy(cp, data);
   d78e6:	4631      	mov	r1, r6
   d78e8:	4440      	add	r0, r8
   d78ea:	f003 f93f 	bl	dab6c <strcpy>
				nextFree += size;
   d78ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d78f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d78f2:	441d      	add	r5, r3
   d78f4:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d78f6:	88d3      	ldrh	r3, [r2, #6]
   d78f8:	3301      	adds	r3, #1
   d78fa:	80d3      	strh	r3, [r2, #6]
				return true;
   d78fc:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d78fe:	a805      	add	r0, sp, #20
   d7900:	f7ff ff58 	bl	d77b4 <_ZN11StMutexLockD1Ev>
   d7904:	e7c1      	b.n	d788a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d7906:	2400      	movs	r4, #0
   d7908:	e7f9      	b.n	d78fe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d790a:	bf00      	nop
   d790c:	000db774 	.word	0x000db774
   d7910:	000db48e 	.word	0x000db48e
   d7914:	2003e5e0 	.word	0x2003e5e0

000d7918 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7918:	b508      	push	{r3, lr}
   d791a:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d791c:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7920:	69a3      	ldr	r3, [r4, #24]
   d7922:	b90b      	cbnz	r3, d7928 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7924:	f002 fb3b 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7928:	69e3      	ldr	r3, [r4, #28]
   d792a:	4621      	mov	r1, r4
   d792c:	4628      	mov	r0, r5
   d792e:	4798      	blx	r3
		os_thread_yield();
   d7930:	f000 f982 	bl	d7c38 <os_thread_yield>
	while(true) {
   d7934:	e7f4      	b.n	d7920 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d7936 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d7936:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7938:	f7ff ffee 	bl	d7918 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d793c <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d793c:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d793e:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7942:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7944:	4628      	mov	r0, r5
   d7946:	f003 f936 	bl	dabb6 <strlen>
   d794a:	3001      	adds	r0, #1
   d794c:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d794e:	4628      	mov	r0, r5
   d7950:	f003 f931 	bl	dabb6 <strlen>
	size_t offset = start - retainedBuffer;
   d7954:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7956:	3001      	adds	r0, #1
   d7958:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d795a:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d795c:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7960:	bf1c      	itt	ne
   d7962:	f1c3 0304 	rsbne	r3, r3, #4
   d7966:	18c0      	addne	r0, r0, r3
}
   d7968:	bd68      	pop	{r3, r5, r6, pc}

000d796a <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d796a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d796c:	4604      	mov	r4, r0
   d796e:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7970:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7972:	f7ff ff19 	bl	d77a8 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7976:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7978:	88fb      	ldrh	r3, [r7, #6]
   d797a:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d797e:	b1e6      	cbz	r6, d79ba <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7980:	2b01      	cmp	r3, #1
   d7982:	d922      	bls.n	d79ca <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7984:	4629      	mov	r1, r5
   d7986:	4620      	mov	r0, r4
   d7988:	f7ff ffd8 	bl	d793c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d798c:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d798e:	4629      	mov	r1, r5
   d7990:	4620      	mov	r0, r4
   d7992:	f7ff ffd3 	bl	d793c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7996:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7998:	443a      	add	r2, r7
	if (after > 0) {
   d799a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d799c:	4601      	mov	r1, r0
	size_t len = next - start;
   d799e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d79a2:	d002      	beq.n	d79aa <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d79a4:	4628      	mov	r0, r5
   d79a6:	f003 f891 	bl	daacc <memmove>
	nextFree -= len;
   d79aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d79ac:	1b9b      	subs	r3, r3, r6
   d79ae:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d79b0:	88fb      	ldrh	r3, [r7, #6]
   d79b2:	3b01      	subs	r3, #1
   d79b4:	80fb      	strh	r3, [r7, #6]
	return true;
   d79b6:	2601      	movs	r6, #1
   d79b8:	e001      	b.n	d79be <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d79ba:	2b00      	cmp	r3, #0
   d79bc:	d1e7      	bne.n	d798e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d79be:	a801      	add	r0, sp, #4
   d79c0:	f7ff fef8 	bl	d77b4 <_ZN11StMutexLockD1Ev>
}
   d79c4:	4630      	mov	r0, r6
   d79c6:	b003      	add	sp, #12
   d79c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d79ca:	2600      	movs	r6, #0
   d79cc:	e7f7      	b.n	d79be <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d79d0 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d79d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79d4:	460d      	mov	r5, r1
   d79d6:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79d8:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d79da:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79dc:	f7ff fea8 	bl	d7730 <_ZN21PublishQueueAsyncBaseC1Ev>
   d79e0:	4b15      	ldr	r3, [pc, #84]	; (d7a38 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79e2:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79e6:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79e8:	4b14      	ldr	r3, [pc, #80]	; (d7a3c <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79ea:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79ec:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79ee:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79f0:	4698      	mov	r8, r3
   d79f2:	d117      	bne.n	d7a24 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d79f4:	88ab      	ldrh	r3, [r5, #4]
   d79f6:	b29b      	uxth	r3, r3
   d79f8:	42b3      	cmp	r3, r6
   d79fa:	d113      	bne.n	d7a24 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79fc:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a00:	6367      	str	r7, [r4, #52]	; 0x34
   d7a02:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7a06:	88eb      	ldrh	r3, [r5, #6]
   d7a08:	fa1f f289 	uxth.w	r2, r9
   d7a0c:	b29b      	uxth	r3, r3
   d7a0e:	429a      	cmp	r2, r3
   d7a10:	d20e      	bcs.n	d7a30 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7a14:	4620      	mov	r0, r4
   d7a16:	f7ff ff91 	bl	d793c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7a1a:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7a1c:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7a1e:	f109 0901 	add.w	r9, r9, #1
   d7a22:	d9f0      	bls.n	d7a06 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7a24:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7a26:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a2a:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7a2c:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7a2e:	80eb      	strh	r3, [r5, #6]
}
   d7a30:	4620      	mov	r0, r4
   d7a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a36:	bf00      	nop
   d7a38:	000db568 	.word	0x000db568
   d7a3c:	d19cab61 	.word	0xd19cab61

000d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7a40:	b510      	push	{r4, lr}
   d7a42:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7a46:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7a48:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7a4a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7a4c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7a4e:	b90a      	cbnz	r2, d7a54 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7a50:	07d9      	lsls	r1, r3, #31
   d7a52:	d505      	bpl.n	d7a60 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7a58:	4b0f      	ldr	r3, [pc, #60]	; (d7a98 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7a5a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7a5c:	4b0f      	ldr	r3, [pc, #60]	; (d7a9c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7a5e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a60:	ab02      	add	r3, sp, #8
   d7a62:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a66:	466a      	mov	r2, sp
   d7a68:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7a70:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a74:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a78:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a7a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a7e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a80:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a82:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7a84:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7a86:	4618      	mov	r0, r3
   d7a88:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a8a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a8c:	9105      	str	r1, [sp, #20]
   d7a8e:	f7fd ff75 	bl	d597c <_ZNSt14_Function_baseD1Ev>
	}
   d7a92:	4620      	mov	r0, r4
   d7a94:	b006      	add	sp, #24
   d7a96:	bd10      	pop	{r4, pc}
   d7a98:	000d7679 	.word	0x000d7679
   d7a9c:	000d765f 	.word	0x000d765f

000d7aa0 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7aa0:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7aa2:	4b05      	ldr	r3, [pc, #20]	; (d7ab8 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7aa4:	9300      	str	r3, [sp, #0]
   d7aa6:	4669      	mov	r1, sp
   d7aa8:	2300      	movs	r3, #0
   d7aaa:	3010      	adds	r0, #16
   d7aac:	9301      	str	r3, [sp, #4]
   d7aae:	f7ff ffc7 	bl	d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7ab2:	b003      	add	sp, #12
   d7ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ab8:	000d7ae9 	.word	0x000d7ae9

000d7abc <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7abc:	b513      	push	{r0, r1, r4, lr}
   d7abe:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7ac0:	f000 f922 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7ac6:	1ac0      	subs	r0, r0, r3
   d7ac8:	68e3      	ldr	r3, [r4, #12]
   d7aca:	4298      	cmp	r0, r3
   d7acc:	d308      	bcc.n	d7ae0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7ace:	4b05      	ldr	r3, [pc, #20]	; (d7ae4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7ad0:	9300      	str	r3, [sp, #0]
   d7ad2:	4669      	mov	r1, sp
   d7ad4:	2300      	movs	r3, #0
   d7ad6:	f104 0010 	add.w	r0, r4, #16
   d7ada:	9301      	str	r3, [sp, #4]
   d7adc:	f7ff ffb0 	bl	d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7ae0:	b002      	add	sp, #8
   d7ae2:	bd10      	pop	{r4, pc}
   d7ae4:	000d7ae9 	.word	0x000d7ae9

000d7ae8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7aec:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7af0:	b086      	sub	sp, #24
   d7af2:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7af4:	2b00      	cmp	r3, #0
   d7af6:	d164      	bne.n	d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7af8:	f000 fb60 	bl	d81bc <spark_cloud_flag_connected>
   d7afc:	2800      	cmp	r0, #0
   d7afe:	d060      	beq.n	d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7b00:	f000 f902 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
   d7b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b06:	1ac0      	subs	r0, r0, r3
   d7b08:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7b0c:	4298      	cmp	r0, r3
   d7b0e:	d958      	bls.n	d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7b10:	6823      	ldr	r3, [r4, #0]
   d7b12:	4620      	mov	r0, r4
   d7b14:	695b      	ldr	r3, [r3, #20]
   d7b16:	4798      	blx	r3
		if (data) {
   d7b18:	4605      	mov	r5, r0
   d7b1a:	2800      	cmp	r0, #0
   d7b1c:	d051      	beq.n	d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7b1e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7b22:	2301      	movs	r3, #1
   d7b24:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7b28:	4638      	mov	r0, r7
   d7b2a:	f003 f844 	bl	dabb6 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7b2e:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b32:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7b36:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b38:	682b      	ldr	r3, [r5, #0]
   d7b3a:	492b      	ldr	r1, [pc, #172]	; (d7be8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7b3c:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7b3e:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b40:	4633      	mov	r3, r6
   d7b42:	482a      	ldr	r0, [pc, #168]	; (d7bec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b44:	463a      	mov	r2, r7
   d7b46:	f7fc fba3 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7b4a:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7b4c:	f88d 8000 	strb.w	r8, [sp]
   d7b50:	4632      	mov	r2, r6
   d7b52:	4639      	mov	r1, r7
   d7b54:	a802      	add	r0, sp, #8
   d7b56:	f000 fef1 	bl	d893c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7b5a:	9d02      	ldr	r5, [sp, #8]
   d7b5c:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7b5e:	b91b      	cbnz	r3, d7b68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7b60:	2001      	movs	r0, #1
   d7b62:	f000 fc2b 	bl	d83bc <delay>
			while(!request.isDone()) {
   d7b66:	e7f8      	b.n	d7b5a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7b68:	2000      	movs	r0, #0
   d7b6a:	f000 fabf 	bl	d80ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b6e:	b120      	cbz	r0, d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7b70:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7b72:	b913      	cbnz	r3, d7b7a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7b74:	f000 fb12 	bl	d819c <spark_process>
    }
   d7b78:	e7fa      	b.n	d7b70 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7b7a:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7b7c:	2b01      	cmp	r3, #1
   d7b7e:	d123      	bne.n	d7bc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7b80:	491b      	ldr	r1, [pc, #108]	; (d7bf0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7b82:	481a      	ldr	r0, [pc, #104]	; (d7bec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b84:	f7fc fb84 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7b88:	6823      	ldr	r3, [r4, #0]
   d7b8a:	2100      	movs	r1, #0
   d7b8c:	699b      	ldr	r3, [r3, #24]
   d7b8e:	4620      	mov	r0, r4
   d7b90:	4798      	blx	r3
			isSending = false;
   d7b92:	2300      	movs	r3, #0
   d7b94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7b98:	f000 f8b6 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7b9c:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d7b9e:	9c03      	ldr	r4, [sp, #12]
   d7ba0:	b17c      	cbz	r4, d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7ba2:	6863      	ldr	r3, [r4, #4]
   d7ba4:	3b01      	subs	r3, #1
   d7ba6:	6063      	str	r3, [r4, #4]
   d7ba8:	b95b      	cbnz	r3, d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7baa:	6823      	ldr	r3, [r4, #0]
   d7bac:	4620      	mov	r0, r4
   d7bae:	689b      	ldr	r3, [r3, #8]
   d7bb0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7bb2:	68a3      	ldr	r3, [r4, #8]
   d7bb4:	3b01      	subs	r3, #1
   d7bb6:	60a3      	str	r3, [r4, #8]
   d7bb8:	b91b      	cbnz	r3, d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7bba:	6823      	ldr	r3, [r4, #0]
   d7bbc:	4620      	mov	r0, r4
   d7bbe:	68db      	ldr	r3, [r3, #12]
   d7bc0:	4798      	blx	r3
}
   d7bc2:	b006      	add	sp, #24
   d7bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7bc8:	68e2      	ldr	r2, [r4, #12]
   d7bca:	490a      	ldr	r1, [pc, #40]	; (d7bf4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7bcc:	4807      	ldr	r0, [pc, #28]	; (d7bec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7bce:	f7fc fb5f 	bl	d4290 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7bd2:	4b09      	ldr	r3, [pc, #36]	; (d7bf8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7bd4:	9304      	str	r3, [sp, #16]
   d7bd6:	a904      	add	r1, sp, #16
   d7bd8:	2300      	movs	r3, #0
   d7bda:	f104 0010 	add.w	r0, r4, #16
   d7bde:	9305      	str	r3, [sp, #20]
   d7be0:	f7ff ff2e 	bl	d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7be4:	e7d5      	b.n	d7b92 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7be6:	bf00      	nop
   d7be8:	000db4cf 	.word	0x000db4cf
   d7bec:	2003e5e0 	.word	0x2003e5e0
   d7bf0:	000db4f0 	.word	0x000db4f0
   d7bf4:	000db507 	.word	0x000db507
   d7bf8:	000d7abd 	.word	0x000d7abd

000d7bfc <_GLOBAL__sub_I_pubqLogger>:
   d7bfc:	4b01      	ldr	r3, [pc, #4]	; (d7c04 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7bfe:	4a02      	ldr	r2, [pc, #8]	; (d7c08 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7c00:	601a      	str	r2, [r3, #0]
}
   d7c02:	4770      	bx	lr
   d7c04:	2003e5e0 	.word	0x2003e5e0
   d7c08:	000db52e 	.word	0x000db52e

000d7c0c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7c0c:	4b01      	ldr	r3, [pc, #4]	; (d7c14 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
   d7c0e:	2201      	movs	r2, #1
   d7c10:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d7c12:	4770      	bx	lr
   d7c14:	2003e5e4 	.word	0x2003e5e4

000d7c18 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7c18:	b508      	push	{r3, lr}
   d7c1a:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <cellular_signal+0xc>)
   d7c1c:	681b      	ldr	r3, [r3, #0]
   d7c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c20:	9301      	str	r3, [sp, #4]
   d7c22:	bd08      	pop	{r3, pc}
   d7c24:	00030274 	.word	0x00030274

000d7c28 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7c28:	b508      	push	{r3, lr}
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <os_thread_create+0xc>)
   d7c2c:	681b      	ldr	r3, [r3, #0]
   d7c2e:	685b      	ldr	r3, [r3, #4]
   d7c30:	9301      	str	r3, [sp, #4]
   d7c32:	bd08      	pop	{r3, pc}
   d7c34:	00030248 	.word	0x00030248

000d7c38 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c38:	b508      	push	{r3, lr}
   d7c3a:	4b02      	ldr	r3, [pc, #8]	; (d7c44 <os_thread_yield+0xc>)
   d7c3c:	681b      	ldr	r3, [r3, #0]
   d7c3e:	68db      	ldr	r3, [r3, #12]
   d7c40:	9301      	str	r3, [sp, #4]
   d7c42:	bd08      	pop	{r3, pc}
   d7c44:	00030248 	.word	0x00030248

000d7c48 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7c48:	b508      	push	{r3, lr}
   d7c4a:	4b02      	ldr	r3, [pc, #8]	; (d7c54 <os_thread_scheduling+0xc>)
   d7c4c:	681b      	ldr	r3, [r3, #0]
   d7c4e:	69db      	ldr	r3, [r3, #28]
   d7c50:	9301      	str	r3, [sp, #4]
   d7c52:	bd08      	pop	{r3, pc}
   d7c54:	00030248 	.word	0x00030248

000d7c58 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7c58:	b508      	push	{r3, lr}
   d7c5a:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <os_mutex_create+0xc>)
   d7c5c:	681b      	ldr	r3, [r3, #0]
   d7c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c60:	9301      	str	r3, [sp, #4]
   d7c62:	bd08      	pop	{r3, pc}
   d7c64:	00030248 	.word	0x00030248

000d7c68 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7c68:	b508      	push	{r3, lr}
   d7c6a:	4b02      	ldr	r3, [pc, #8]	; (d7c74 <os_mutex_lock+0xc>)
   d7c6c:	681b      	ldr	r3, [r3, #0]
   d7c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7c70:	9301      	str	r3, [sp, #4]
   d7c72:	bd08      	pop	{r3, pc}
   d7c74:	00030248 	.word	0x00030248

000d7c78 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7c78:	b508      	push	{r3, lr}
   d7c7a:	4b02      	ldr	r3, [pc, #8]	; (d7c84 <os_mutex_unlock+0xc>)
   d7c7c:	681b      	ldr	r3, [r3, #0]
   d7c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c80:	9301      	str	r3, [sp, #4]
   d7c82:	bd08      	pop	{r3, pc}
   d7c84:	00030248 	.word	0x00030248

000d7c88 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c88:	b508      	push	{r3, lr}
   d7c8a:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <os_mutex_recursive_create+0xc>)
   d7c8c:	681b      	ldr	r3, [r3, #0]
   d7c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c90:	9301      	str	r3, [sp, #4]
   d7c92:	bd08      	pop	{r3, pc}
   d7c94:	00030248 	.word	0x00030248

000d7c98 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <os_mutex_recursive_destroy+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030248 	.word	0x00030248

000d7ca8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <os_thread_exit+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030248 	.word	0x00030248

000d7cb8 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <HAL_Feature_Set+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030234 	.word	0x00030234

000d7cc8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030234 	.word	0x00030234

000d7cd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <HAL_RNG_GetRandomNumber+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	685b      	ldr	r3, [r3, #4]
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030218 	.word	0x00030218

000d7ce8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <HAL_Delay_Milliseconds+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	689b      	ldr	r3, [r3, #8]
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030218 	.word	0x00030218

000d7cf8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <HAL_Delay_Microseconds+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	68db      	ldr	r3, [r3, #12]
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030218 	.word	0x00030218

000d7d08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	695b      	ldr	r3, [r3, #20]
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030218 	.word	0x00030218

000d7d18 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <HAL_disable_irq+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030218 	.word	0x00030218

000d7d28 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <HAL_enable_irq+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030218 	.word	0x00030218

000d7d38 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <hal_rtc_time_is_valid+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030218 	.word	0x00030218

000d7d48 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <hal_timer_millis+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030218 	.word	0x00030218

000d7d58 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <hal_rtc_get_time+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030218 	.word	0x00030218

000d7d68 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <hal_rtc_set_time+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030218 	.word	0x00030218

000d7d78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <HAL_Pin_Map+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	681b      	ldr	r3, [r3, #0]
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	0003022c 	.word	0x0003022c

000d7d88 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <HAL_Pin_Mode+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	689b      	ldr	r3, [r3, #8]
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	0003022c 	.word	0x0003022c

000d7d98 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <HAL_Get_Pin_Mode+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	68db      	ldr	r3, [r3, #12]
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	0003022c 	.word	0x0003022c

000d7da8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <HAL_GPIO_Write+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	691b      	ldr	r3, [r3, #16]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003022c 	.word	0x0003022c

000d7db8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <HAL_GPIO_Read+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	695b      	ldr	r3, [r3, #20]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003022c 	.word	0x0003022c

000d7dc8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <HAL_Interrupts_Attach+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	699b      	ldr	r3, [r3, #24]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003022c 	.word	0x0003022c

000d7dd8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <HAL_Interrupts_Detach+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	69db      	ldr	r3, [r3, #28]
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003022c 	.word	0x0003022c

000d7de8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <HAL_Interrupts_Enable_All+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	6a1b      	ldr	r3, [r3, #32]
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003022c 	.word	0x0003022c

000d7df8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <HAL_Interrupts_Disable_All+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003022c 	.word	0x0003022c

000d7e08 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <hal_i2c_begin+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	68db      	ldr	r3, [r3, #12]
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	00030228 	.word	0x00030228

000d7e18 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <hal_i2c_begin_transmission+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	699b      	ldr	r3, [r3, #24]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	00030228 	.word	0x00030228

000d7e28 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <hal_i2c_end_transmission+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	69db      	ldr	r3, [r3, #28]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	00030228 	.word	0x00030228

000d7e38 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <hal_i2c_write+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	6a1b      	ldr	r3, [r3, #32]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	00030228 	.word	0x00030228

000d7e48 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <hal_i2c_available+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	00030228 	.word	0x00030228

000d7e58 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <hal_i2c_read+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	00030228 	.word	0x00030228

000d7e68 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <hal_i2c_peek+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	00030228 	.word	0x00030228

000d7e78 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <hal_i2c_flush+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	00030228 	.word	0x00030228

000d7e88 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <hal_i2c_is_enabled+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	00030228 	.word	0x00030228

000d7e98 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <hal_i2c_init+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030228 	.word	0x00030228

000d7ea8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <hal_i2c_lock+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030228 	.word	0x00030228

000d7eb8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <hal_i2c_unlock+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030228 	.word	0x00030228

000d7ec8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <hal_i2c_request_ex+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030228 	.word	0x00030228

000d7ed8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <inet_inet_ntop+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	695b      	ldr	r3, [r3, #20]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030264 	.word	0x00030264

000d7ee8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <netdb_freeaddrinfo+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	689b      	ldr	r3, [r3, #8]
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030268 	.word	0x00030268

000d7ef8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <netdb_getaddrinfo+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	68db      	ldr	r3, [r3, #12]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030268 	.word	0x00030268

000d7f08 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <hal_spi_begin+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	681b      	ldr	r3, [r3, #0]
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030230 	.word	0x00030230

000d7f18 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <hal_spi_transfer+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	695b      	ldr	r3, [r3, #20]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030230 	.word	0x00030230

000d7f28 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <hal_spi_init+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	69db      	ldr	r3, [r3, #28]
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030230 	.word	0x00030230

000d7f38 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <hal_spi_is_enabled+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	6a1b      	ldr	r3, [r3, #32]
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030230 	.word	0x00030230

000d7f48 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <hal_spi_info+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030230 	.word	0x00030230

000d7f58 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <hal_spi_set_settings+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030230 	.word	0x00030230

000d7f68 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <hal_spi_acquire+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030230 	.word	0x00030230

000d7f78 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <hal_spi_release+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030230 	.word	0x00030230

000d7f88 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <hal_usart_init+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	681b      	ldr	r3, [r3, #0]
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	0003023c 	.word	0x0003023c

000d7f98 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <hal_usart_write+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	68db      	ldr	r3, [r3, #12]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	0003023c 	.word	0x0003023c

000d7fa8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <hal_usart_available+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	691b      	ldr	r3, [r3, #16]
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	0003023c 	.word	0x0003023c

000d7fb8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <hal_usart_read+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	695b      	ldr	r3, [r3, #20]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	0003023c 	.word	0x0003023c

000d7fc8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <hal_usart_peek+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	699b      	ldr	r3, [r3, #24]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	0003023c 	.word	0x0003023c

000d7fd8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <hal_usart_flush+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	69db      	ldr	r3, [r3, #28]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	0003023c 	.word	0x0003023c

000d7fe8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <hal_usart_is_enabled+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	6a1b      	ldr	r3, [r3, #32]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	0003023c 	.word	0x0003023c

000d7ff8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <hal_usart_available_data_for_write+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	0003023c 	.word	0x0003023c

000d8008 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <HAL_USB_USART_Init+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	681b      	ldr	r3, [r3, #0]
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	0003024c 	.word	0x0003024c

000d8018 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <HAL_USB_USART_Begin+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	685b      	ldr	r3, [r3, #4]
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	0003024c 	.word	0x0003024c

000d8028 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <HAL_USB_USART_Available_Data+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	691b      	ldr	r3, [r3, #16]
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	0003024c 	.word	0x0003024c

000d8038 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	695b      	ldr	r3, [r3, #20]
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	0003024c 	.word	0x0003024c

000d8048 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <HAL_USB_USART_Receive_Data+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	699b      	ldr	r3, [r3, #24]
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	0003024c 	.word	0x0003024c

000d8058 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <HAL_USB_USART_Send_Data+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	69db      	ldr	r3, [r3, #28]
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	0003024c 	.word	0x0003024c

000d8068 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <HAL_USB_USART_Flush_Data+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	6a1b      	ldr	r3, [r3, #32]
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	0003024c 	.word	0x0003024c

000d8078 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <panic_+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	00030260 	.word	0x00030260

000d8088 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <log_message_v+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	00030260 	.word	0x00030260

000d8098 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b03      	ldr	r3, [pc, #12]	; (d80a8 <diag_get_source+0x10>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80a2:	9301      	str	r3, [sp, #4]
   d80a4:	bd08      	pop	{r3, pc}
   d80a6:	0000      	.short	0x0000
   d80a8:	00030260 	.word	0x00030260

000d80ac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <system_mode+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	681b      	ldr	r3, [r3, #0]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030220 	.word	0x00030220

000d80bc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <set_system_mode+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	685b      	ldr	r3, [r3, #4]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030220 	.word	0x00030220

000d80cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <system_delay_ms+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	695b      	ldr	r3, [r3, #20]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030220 	.word	0x00030220

000d80dc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <system_thread_set_state+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030220 	.word	0x00030220

000d80ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <application_thread_current+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030220 	.word	0x00030220

000d80fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <application_thread_invoke+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030220 	.word	0x00030220

000d810c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <system_thread_get_state+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030220 	.word	0x00030220

000d811c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <system_notify_time_changed+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	00030220 	.word	0x00030220

000d812c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b03      	ldr	r3, [pc, #12]	; (d813c <system_ctrl_set_app_request_handler+0x10>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8136:	9301      	str	r3, [sp, #4]
   d8138:	bd08      	pop	{r3, pc}
   d813a:	0000      	.short	0x0000
   d813c:	00030220 	.word	0x00030220

000d8140 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b03      	ldr	r3, [pc, #12]	; (d8150 <system_ctrl_set_result+0x10>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d814a:	9301      	str	r3, [sp, #4]
   d814c:	bd08      	pop	{r3, pc}
   d814e:	0000      	.short	0x0000
   d8150:	00030220 	.word	0x00030220

000d8154 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b03      	ldr	r3, [pc, #12]	; (d8164 <system_power_management_set_config+0x10>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d815e:	9301      	str	r3, [sp, #4]
   d8160:	bd08      	pop	{r3, pc}
   d8162:	0000      	.short	0x0000
   d8164:	00030220 	.word	0x00030220

000d8168 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b03      	ldr	r3, [pc, #12]	; (d8178 <system_reset+0x10>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8172:	9301      	str	r3, [sp, #4]
   d8174:	bd08      	pop	{r3, pc}
   d8176:	0000      	.short	0x0000
   d8178:	00030220 	.word	0x00030220

000d817c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <spark_variable+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	681b      	ldr	r3, [r3, #0]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	00030244 	.word	0x00030244

000d818c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <spark_function+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	685b      	ldr	r3, [r3, #4]
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030244 	.word	0x00030244

000d819c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <spark_process+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	689b      	ldr	r3, [r3, #8]
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030244 	.word	0x00030244

000d81ac <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <spark_cloud_flag_connect+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	68db      	ldr	r3, [r3, #12]
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030244 	.word	0x00030244

000d81bc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <spark_cloud_flag_connected+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	695b      	ldr	r3, [r3, #20]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030244 	.word	0x00030244

000d81cc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <spark_deviceID+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	69db      	ldr	r3, [r3, #28]
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	00030244 	.word	0x00030244

000d81dc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <spark_send_event+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	6a1b      	ldr	r3, [r3, #32]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030244 	.word	0x00030244

000d81ec <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <spark_subscribe+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030244 	.word	0x00030244

000d81fc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <spark_sync_time+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030244 	.word	0x00030244

000d820c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <spark_sync_time_pending+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030244 	.word	0x00030244

000d821c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <spark_sync_time_last+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030244 	.word	0x00030244

000d822c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030244 	.word	0x00030244

000d823c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <spark_cloud_disconnect+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030244 	.word	0x00030244

000d824c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <network_connect+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	685b      	ldr	r3, [r3, #4]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030240 	.word	0x00030240

000d825c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <network_connecting+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	689b      	ldr	r3, [r3, #8]
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030240 	.word	0x00030240

000d826c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <network_disconnect+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	68db      	ldr	r3, [r3, #12]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030240 	.word	0x00030240

000d827c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <network_ready+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	691b      	ldr	r3, [r3, #16]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030240 	.word	0x00030240

000d828c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <network_on+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	695b      	ldr	r3, [r3, #20]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030240 	.word	0x00030240

000d829c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <network_off+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	699b      	ldr	r3, [r3, #24]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030240 	.word	0x00030240

000d82ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <network_listen+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	69db      	ldr	r3, [r3, #28]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030240 	.word	0x00030240

000d82bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <network_listening+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	6a1b      	ldr	r3, [r3, #32]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030240 	.word	0x00030240

000d82cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <network_set_listen_timeout+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030240 	.word	0x00030240

000d82dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <network_get_listen_timeout+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030240 	.word	0x00030240

000d82ec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <malloc+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	681b      	ldr	r3, [r3, #0]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	0003021c 	.word	0x0003021c

000d82fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <free+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	685b      	ldr	r3, [r3, #4]
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	0003021c 	.word	0x0003021c

000d830c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <realloc+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	689b      	ldr	r3, [r3, #8]
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	0003021c 	.word	0x0003021c

000d831c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <siprintf+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	691b      	ldr	r3, [r3, #16]
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	0003021c 	.word	0x0003021c

000d832c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <snprintf+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	69db      	ldr	r3, [r3, #28]
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	0003021c 	.word	0x0003021c

000d833c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <vsnprintf+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	0003021c 	.word	0x0003021c

000d834c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <abort+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	0003021c 	.word	0x0003021c

000d835c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <_malloc_r+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	0003021c 	.word	0x0003021c

000d836c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <newlib_impure_ptr_callback+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	0003021c 	.word	0x0003021c

000d837c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <strftime+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	0003021c 	.word	0x0003021c

000d838c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <localtime_r+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	0003021c 	.word	0x0003021c

000d839c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <gmtime_r+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	0003021c 	.word	0x0003021c

000d83ac <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <mktime+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	0003021c 	.word	0x0003021c

000d83bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d83bc:	2100      	movs	r1, #0
   d83be:	f7ff be85 	b.w	d80cc <system_delay_ms>

000d83c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d83c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d83c4:	6883      	ldr	r3, [r0, #8]
   d83c6:	4604      	mov	r4, r0
   d83c8:	b90b      	cbnz	r3, d83ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d83ca:	f001 fde8 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83ce:	68c3      	ldr	r3, [r0, #12]
   d83d0:	4798      	blx	r3
      if (_M_manager)
   d83d2:	68a3      	ldr	r3, [r4, #8]
   d83d4:	b11b      	cbz	r3, d83de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d83d6:	2203      	movs	r2, #3
   d83d8:	4621      	mov	r1, r4
   d83da:	4620      	mov	r0, r4
   d83dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d83de:	4620      	mov	r0, r4
   d83e0:	2110      	movs	r1, #16
}
   d83e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d83e6:	f001 bdd4 	b.w	d9f92 <_ZdlPvj>

000d83ea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d83ea:	b510      	push	{r4, lr}
   d83ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d83ee:	6800      	ldr	r0, [r0, #0]
   d83f0:	b108      	cbz	r0, d83f6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d83f2:	f7ff fc51 	bl	d7c98 <os_mutex_recursive_destroy>
    }
   d83f6:	4620      	mov	r0, r4
   d83f8:	bd10      	pop	{r4, pc}

000d83fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d83fa:	680b      	ldr	r3, [r1, #0]
   d83fc:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d83fe:	b113      	cbz	r3, d8406 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8400:	685a      	ldr	r2, [r3, #4]
   d8402:	3201      	adds	r2, #1
   d8404:	605a      	str	r2, [r3, #4]
      }
   d8406:	4770      	bx	lr

000d8408 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8408:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d840a:	4c06      	ldr	r4, [pc, #24]	; (d8424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d840c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d840e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8410:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8412:	f7ff fc39 	bl	d7c88 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8416:	4620      	mov	r0, r4
   d8418:	4a03      	ldr	r2, [pc, #12]	; (d8428 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d841a:	4904      	ldr	r1, [pc, #16]	; (d842c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8420:	f001 bdb2 	b.w	d9f88 <__aeabi_atexit>
   d8424:	2003e5e8 	.word	0x2003e5e8
   d8428:	2003e230 	.word	0x2003e230
   d842c:	000d83eb 	.word	0x000d83eb

000d8430 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8430:	2200      	movs	r2, #0
   d8432:	6840      	ldr	r0, [r0, #4]
   d8434:	4611      	mov	r1, r2
   d8436:	f7ff bf21 	b.w	d827c <network_ready>

000d843a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d843a:	2200      	movs	r2, #0
   d843c:	6840      	ldr	r0, [r0, #4]
   d843e:	4611      	mov	r1, r2
   d8440:	f7ff bf3c 	b.w	d82bc <network_listening>

000d8444 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8444:	2200      	movs	r2, #0
   d8446:	6840      	ldr	r0, [r0, #4]
   d8448:	4611      	mov	r1, r2
   d844a:	f7ff bf47 	b.w	d82dc <network_get_listen_timeout>

000d844e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d844e:	6840      	ldr	r0, [r0, #4]
   d8450:	2200      	movs	r2, #0
   d8452:	f7ff bf3b 	b.w	d82cc <network_set_listen_timeout>

000d8456 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8456:	6840      	ldr	r0, [r0, #4]
   d8458:	2200      	movs	r2, #0
   d845a:	f081 0101 	eor.w	r1, r1, #1
   d845e:	f7ff bf25 	b.w	d82ac <network_listen>

000d8462 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8462:	2300      	movs	r3, #0
   d8464:	6840      	ldr	r0, [r0, #4]
   d8466:	461a      	mov	r2, r3
   d8468:	4619      	mov	r1, r3
   d846a:	f7ff bf17 	b.w	d829c <network_off>

000d846e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d846e:	2300      	movs	r3, #0
   d8470:	6840      	ldr	r0, [r0, #4]
   d8472:	461a      	mov	r2, r3
   d8474:	4619      	mov	r1, r3
   d8476:	f7ff bf09 	b.w	d828c <network_on>

000d847a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d847a:	2200      	movs	r2, #0
   d847c:	6840      	ldr	r0, [r0, #4]
   d847e:	4611      	mov	r1, r2
   d8480:	f7ff beec 	b.w	d825c <network_connecting>

000d8484 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8484:	6840      	ldr	r0, [r0, #4]
   d8486:	2200      	movs	r2, #0
   d8488:	2102      	movs	r1, #2
   d848a:	f7ff beef 	b.w	d826c <network_disconnect>

000d848e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d848e:	2300      	movs	r3, #0
   d8490:	6840      	ldr	r0, [r0, #4]
   d8492:	461a      	mov	r2, r3
   d8494:	f7ff beda 	b.w	d824c <network_connect>

000d8498 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d8498:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d849a:	4b1b      	ldr	r3, [pc, #108]	; (d8508 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d849c:	6003      	str	r3, [r0, #0]
   d849e:	2500      	movs	r5, #0
   d84a0:	460f      	mov	r7, r1
   d84a2:	3328      	adds	r3, #40	; 0x28
   d84a4:	2618      	movs	r6, #24
   d84a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d84aa:	b089      	sub	sp, #36	; 0x24
   d84ac:	6043      	str	r3, [r0, #4]
   d84ae:	4632      	mov	r2, r6
   d84b0:	4629      	mov	r1, r5
   d84b2:	4604      	mov	r4, r0
   d84b4:	3010      	adds	r0, #16
   d84b6:	f002 fb23 	bl	dab00 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d84ba:	6878      	ldr	r0, [r7, #4]
   d84bc:	462a      	mov	r2, r5
   d84be:	4629      	mov	r1, r5
   d84c0:	f7ff fedc 	bl	d827c <network_ready>
   d84c4:	b918      	cbnz	r0, d84ce <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d84c6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d84c8:	4620      	mov	r0, r4
   d84ca:	b009      	add	sp, #36	; 0x24
   d84cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d84ce:	4629      	mov	r1, r5
   d84d0:	4632      	mov	r2, r6
   d84d2:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d84d4:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d84d8:	f002 fb12 	bl	dab00 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84dc:	a902      	add	r1, sp, #8
   d84de:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d84e0:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84e4:	f7ff fb98 	bl	d7c18 <cellular_signal>
   d84e8:	b110      	cbz	r0, d84f0 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d84ea:	2301      	movs	r3, #1
   d84ec:	60a3      	str	r3, [r4, #8]
            return sig;
   d84ee:	e7eb      	b.n	d84c8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d84f0:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d84f2:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d84f4:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d84f6:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d84f8:	b90b      	cbnz	r3, d84fe <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d84fa:	2302      	movs	r3, #2
   d84fc:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d84fe:	a902      	add	r1, sp, #8
   d8500:	4620      	mov	r0, r4
   d8502:	f000 f8ae 	bl	d8662 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d8506:	e7df      	b.n	d84c8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8508:	000db5c4 	.word	0x000db5c4

000d850c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d850c:	4b08      	ldr	r3, [pc, #32]	; (d8530 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d850e:	b510      	push	{r4, lr}
   d8510:	2428      	movs	r4, #40	; 0x28
   d8512:	4622      	mov	r2, r4
   d8514:	4618      	mov	r0, r3
   d8516:	2100      	movs	r1, #0
   d8518:	f002 faf2 	bl	dab00 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d851c:	4b05      	ldr	r3, [pc, #20]	; (d8534 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d851e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8524:	6042      	str	r2, [r0, #4]
   d8526:	2204      	movs	r2, #4
   d8528:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d852a:	4a03      	ldr	r2, [pc, #12]	; (d8538 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d852c:	601a      	str	r2, [r3, #0]
   d852e:	bd10      	pop	{r4, pc}
   d8530:	2003e5f4 	.word	0x2003e5f4
   d8534:	2003e5ec 	.word	0x2003e5ec
   d8538:	000db590 	.word	0x000db590

000d853c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d853c:	4770      	bx	lr

000d853e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d853e:	7d00      	ldrb	r0, [r0, #20]
   d8540:	4770      	bx	lr

000d8542 <_ZN14CellularSignalD0Ev>:
   d8542:	b510      	push	{r4, lr}
   d8544:	2128      	movs	r1, #40	; 0x28
   d8546:	4604      	mov	r4, r0
   d8548:	f001 fd23 	bl	d9f92 <_ZdlPvj>
   d854c:	4620      	mov	r0, r4
   d854e:	bd10      	pop	{r4, pc}

000d8550 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8550:	7d03      	ldrb	r3, [r0, #20]
   d8552:	b17b      	cbz	r3, d8574 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8554:	69c3      	ldr	r3, [r0, #28]
   d8556:	2b00      	cmp	r3, #0
   d8558:	db0c      	blt.n	d8574 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d855a:	ee07 3a90 	vmov	s15, r3
   d855e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d857c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8566:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d856a:	eddf 7a05 	vldr	s15, [pc, #20]	; d8580 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d856e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8572:	4770      	bx	lr
    }

    return -1.0f;
   d8574:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8578:	4770      	bx	lr
   d857a:	bf00      	nop
   d857c:	477fff00 	.word	0x477fff00
   d8580:	42c80000 	.word	0x42c80000

000d8584 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8584:	7d03      	ldrb	r3, [r0, #20]
   d8586:	b163      	cbz	r3, d85a2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8588:	6983      	ldr	r3, [r0, #24]
   d858a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d858e:	d008      	beq.n	d85a2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8590:	ee07 3a90 	vmov	s15, r3
   d8594:	ed9f 7a04 	vldr	s14, [pc, #16]	; d85a8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d859c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85a0:	4770      	bx	lr
    }

    return 0.0f;
   d85a2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d85ac <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d85a6:	4770      	bx	lr
   d85a8:	42c80000 	.word	0x42c80000
   d85ac:	00000000 	.word	0x00000000

000d85b0 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d85b0:	7d03      	ldrb	r3, [r0, #20]
   d85b2:	b17b      	cbz	r3, d85d4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d85b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d85b6:	2b00      	cmp	r3, #0
   d85b8:	db0c      	blt.n	d85d4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d85ba:	ee07 3a90 	vmov	s15, r3
   d85be:	ed9f 7a07 	vldr	s14, [pc, #28]	; d85dc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d85c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85ca:	eddf 7a05 	vldr	s15, [pc, #20]	; d85e0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d85ce:	ee20 0a27 	vmul.f32	s0, s0, s15
   d85d2:	4770      	bx	lr
    }

    return -1.0f;
   d85d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d85d8:	4770      	bx	lr
   d85da:	bf00      	nop
   d85dc:	477fff00 	.word	0x477fff00
   d85e0:	42c80000 	.word	0x42c80000

000d85e4 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d85e4:	7d03      	ldrb	r3, [r0, #20]
   d85e6:	b163      	cbz	r3, d8602 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d85e8:	6a03      	ldr	r3, [r0, #32]
   d85ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85ee:	d008      	beq.n	d8602 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d85f0:	ee07 3a90 	vmov	s15, r3
   d85f4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8608 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d85f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85fc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8600:	4770      	bx	lr
    }

    return 0.0f;
   d8602:	ed9f 0a02 	vldr	s0, [pc, #8]	; d860c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8606:	4770      	bx	lr
   d8608:	42c80000 	.word	0x42c80000
   d860c:	00000000 	.word	0x00000000

000d8610 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8610:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8612:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8614:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8616:	da0a      	bge.n	d862e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8618:	212d      	movs	r1, #45	; 0x2d
   d861a:	f000 fd4b 	bl	d90b4 <_ZN5Print5printEc>
            val = -n;
   d861e:	4261      	negs	r1, r4
            t = print('-');
   d8620:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8622:	220a      	movs	r2, #10
   d8624:	4630      	mov	r0, r6
   d8626:	f000 fd5e 	bl	d90e6 <_ZN5Print11printNumberEmh>
    }
}
   d862a:	4428      	add	r0, r5
   d862c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d862e:	4621      	mov	r1, r4
        size_t t = 0;
   d8630:	2500      	movs	r5, #0
   d8632:	e7f6      	b.n	d8622 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8634 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8634:	b570      	push	{r4, r5, r6, lr}
   d8636:	460c      	mov	r4, r1
   d8638:	4605      	mov	r5, r0
   d863a:	6881      	ldr	r1, [r0, #8]
   d863c:	4620      	mov	r0, r4
   d863e:	f7ff ffe7 	bl	d8610 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8642:	212c      	movs	r1, #44	; 0x2c
   d8644:	4606      	mov	r6, r0
   d8646:	4620      	mov	r0, r4
   d8648:	f000 fd34 	bl	d90b4 <_ZN5Print5printEc>
   d864c:	68e9      	ldr	r1, [r5, #12]
   d864e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8650:	4620      	mov	r0, r4
   d8652:	f7ff ffdd 	bl	d8610 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8656:	4430      	add	r0, r6
   d8658:	bd70      	pop	{r4, r5, r6, pc}

000d865a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d865a:	f1a0 0004 	sub.w	r0, r0, #4
   d865e:	f7ff bfe9 	b.w	d8634 <_ZNK14CellularSignal7printToER5Print>

000d8662 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8662:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8664:	460d      	mov	r5, r1
   d8666:	f100 0410 	add.w	r4, r0, #16
   d866a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d866c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d866e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8672:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8676:	2001      	movs	r0, #1
   d8678:	bd30      	pop	{r4, r5, pc}

000d867a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d867a:	4770      	bx	lr

000d867c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d867c:	2000      	movs	r0, #0
   d867e:	4770      	bx	lr

000d8680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8680:	b510      	push	{r4, lr}
   d8682:	2110      	movs	r1, #16
   d8684:	4604      	mov	r4, r0
   d8686:	f001 fc84 	bl	d9f92 <_ZdlPvj>
   d868a:	4620      	mov	r0, r4
   d868c:	bd10      	pop	{r4, pc}

000d868e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d868e:	b508      	push	{r3, lr}
      { delete this; }
   d8690:	f7ff fff6 	bl	d8680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8694:	bd08      	pop	{r3, pc}

000d8696 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8696:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8698:	2200      	movs	r2, #0
   d869a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d869e:	6002      	str	r2, [r0, #0]
   d86a0:	8084      	strh	r4, [r0, #4]
   d86a2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d86a4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d86a6:	680c      	ldr	r4, [r1, #0]
   d86a8:	8085      	strh	r5, [r0, #4]
   d86aa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d86ac:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d86ae:	bd30      	pop	{r4, r5, pc}

000d86b0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d86b0:	b510      	push	{r4, lr}
   d86b2:	4604      	mov	r4, r0
    free((void*)msg_);
   d86b4:	6800      	ldr	r0, [r0, #0]
   d86b6:	f7ff fe21 	bl	d82fc <free>
}
   d86ba:	4620      	mov	r0, r4
   d86bc:	bd10      	pop	{r4, pc}

000d86be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d86be:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d86c0:	68c4      	ldr	r4, [r0, #12]
   d86c2:	b1f4      	cbz	r4, d8702 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d86c4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d86c6:	2b02      	cmp	r3, #2
   d86c8:	d103      	bne.n	d86d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d86ca:	f104 000c 	add.w	r0, r4, #12
   d86ce:	f7ff ffef 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d86d2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d86d4:	b135      	cbz	r5, d86e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d86d6:	4628      	mov	r0, r5
   d86d8:	f7fd f950 	bl	d597c <_ZNSt14_Function_baseD1Ev>
   d86dc:	2110      	movs	r1, #16
   d86de:	4628      	mov	r0, r5
   d86e0:	f001 fc57 	bl	d9f92 <_ZdlPvj>
   d86e4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d86e6:	b135      	cbz	r5, d86f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d86e8:	4628      	mov	r0, r5
   d86ea:	f7fd f947 	bl	d597c <_ZNSt14_Function_baseD1Ev>
   d86ee:	2110      	movs	r1, #16
   d86f0:	4628      	mov	r0, r5
   d86f2:	f001 fc4e 	bl	d9f92 <_ZdlPvj>
   d86f6:	4620      	mov	r0, r4
   d86f8:	2114      	movs	r1, #20
   d86fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d86fe:	f001 bc48 	b.w	d9f92 <_ZdlPvj>
   d8702:	bd38      	pop	{r3, r4, r5, pc}

000d8704 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8704:	b510      	push	{r4, lr}
   d8706:	b088      	sub	sp, #32
   d8708:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d870a:	4668      	mov	r0, sp
   d870c:	f000 ff1d 	bl	d954a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8710:	4669      	mov	r1, sp
   d8712:	a804      	add	r0, sp, #16
   d8714:	f000 ff3c 	bl	d9590 <_ZN6StringC1ERKS_>
   d8718:	a804      	add	r0, sp, #16
   d871a:	47a0      	blx	r4
   d871c:	4604      	mov	r4, r0
   d871e:	a804      	add	r0, sp, #16
   d8720:	f000 fec8 	bl	d94b4 <_ZN6StringD1Ev>
    String p(param);
   d8724:	4668      	mov	r0, sp
   d8726:	f000 fec5 	bl	d94b4 <_ZN6StringD1Ev>
}
   d872a:	4620      	mov	r0, r4
   d872c:	b008      	add	sp, #32
   d872e:	bd10      	pop	{r4, pc}

000d8730 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8732:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8734:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8738:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d873a:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d873c:	461a      	mov	r2, r3
   d873e:	4669      	mov	r1, sp
   d8740:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8742:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8746:	f8ad 4000 	strh.w	r4, [sp]
   d874a:	f7ff fd1f 	bl	d818c <spark_function>
}
   d874e:	b004      	add	sp, #16
   d8750:	bd10      	pop	{r4, pc}

000d8752 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8752:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d8754:	2308      	movs	r3, #8
   d8756:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d875a:	6803      	ldr	r3, [r0, #0]
   d875c:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d8760:	7a03      	ldrb	r3, [r0, #8]
   d8762:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8766:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d8768:	6843      	ldr	r3, [r0, #4]
   d876a:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d876c:	4668      	mov	r0, sp
   d876e:	f7ff fd65 	bl	d823c <spark_cloud_disconnect>
}
   d8772:	b003      	add	sp, #12
   d8774:	f85d fb04 	ldr.w	pc, [sp], #4

000d8778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8778:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d877a:	460e      	mov	r6, r1
   d877c:	4604      	mov	r4, r0
   d877e:	f856 3b04 	ldr.w	r3, [r6], #4
   d8782:	9300      	str	r3, [sp, #0]
   d8784:	460d      	mov	r5, r1
   d8786:	a801      	add	r0, sp, #4
   d8788:	4631      	mov	r1, r6
   d878a:	f7ff fe36 	bl	d83fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d878e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8790:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8792:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8794:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8796:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8798:	2300      	movs	r3, #0
   d879a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d879c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d879e:	f7fc fab7 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87a2:	4630      	mov	r0, r6
   d87a4:	f7fc fab4 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d87a8:	4628      	mov	r0, r5
   d87aa:	2108      	movs	r1, #8
   d87ac:	f001 fbf1 	bl	d9f92 <_ZdlPvj>
        return p;
    }
   d87b0:	4620      	mov	r0, r4
   d87b2:	b002      	add	sp, #8
   d87b4:	bd70      	pop	{r4, r5, r6, pc}

000d87b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d87b6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d87b8:	b510      	push	{r4, lr}
      if (_M_empty())
   d87ba:	b90a      	cbnz	r2, d87c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d87bc:	f001 fbef 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
    }
   d87c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87c4:	68c3      	ldr	r3, [r0, #12]
   d87c6:	4718      	bx	r3

000d87c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87c8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d87ca:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d87cc:	f100 0110 	add.w	r1, r0, #16
   d87d0:	f7ff fff1 	bl	d87b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d87d4:	bd08      	pop	{r3, pc}

000d87d6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d87d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d87d8:	b510      	push	{r4, lr}
      if (_M_empty())
   d87da:	b90a      	cbnz	r2, d87e0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d87dc:	f001 fbdf 	bl	d9f9e <_ZSt25__throw_bad_function_callv>
    }
   d87e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87e4:	68c3      	ldr	r3, [r0, #12]
   d87e6:	4718      	bx	r3

000d87e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d87ea:	6800      	ldr	r0, [r0, #0]
   d87ec:	f100 0110 	add.w	r1, r0, #16
   d87f0:	f7ff fff1 	bl	d87d6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d87f4:	bd08      	pop	{r3, pc}
	...

000d87f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d87f8:	b538      	push	{r3, r4, r5, lr}
   d87fa:	2300      	movs	r3, #0
   d87fc:	4604      	mov	r4, r0
   d87fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8800:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8802:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8804:	f7fb fc47 	bl	d4096 <_Znwj>
   d8808:	b128      	cbz	r0, d8816 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d880a:	2301      	movs	r3, #1
   d880c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8810:	4b02      	ldr	r3, [pc, #8]	; (d881c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8812:	6003      	str	r3, [r0, #0]
   d8814:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8816:	6020      	str	r0, [r4, #0]
	}
   d8818:	4620      	mov	r0, r4
   d881a:	bd38      	pop	{r3, r4, r5, pc}
   d881c:	000db5f8 	.word	0x000db5f8

000d8820 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8820:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8822:	2300      	movs	r3, #0
   d8824:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8826:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8828:	4604      	mov	r4, r0
   d882a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d882c:	b12b      	cbz	r3, d883a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d882e:	2202      	movs	r2, #2
   d8830:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8832:	68eb      	ldr	r3, [r5, #12]
   d8834:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8836:	68ab      	ldr	r3, [r5, #8]
   d8838:	60a3      	str	r3, [r4, #8]
    }
   d883a:	4620      	mov	r0, r4
   d883c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8840:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8842:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8844:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8846:	4668      	mov	r0, sp
   d8848:	f7ff ff25 	bl	d8696 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d884c:	f04f 0302 	mov.w	r3, #2
   d8850:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8854:	2a00      	cmp	r2, #0
   d8856:	d103      	bne.n	d8860 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8858:	e8c4 3f41 	strexb	r1, r3, [r4]
   d885c:	2900      	cmp	r1, #0
   d885e:	d1f7      	bne.n	d8850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8860:	d125      	bne.n	d88ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8862:	f104 050c 	add.w	r5, r4, #12
   d8866:	4669      	mov	r1, sp
   d8868:	4628      	mov	r0, r5
   d886a:	f7ff ff14 	bl	d8696 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d886e:	f3bf 8f5b 	dmb	ish
   d8872:	2301      	movs	r3, #1
   d8874:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8876:	2000      	movs	r0, #0
   d8878:	f104 0308 	add.w	r3, r4, #8
   d887c:	f3bf 8f5b 	dmb	ish
   d8880:	e853 6f00 	ldrex	r6, [r3]
   d8884:	e843 0200 	strex	r2, r0, [r3]
   d8888:	2a00      	cmp	r2, #0
   d888a:	d1f9      	bne.n	d8880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d888c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8890:	b16e      	cbz	r6, d88ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8892:	f7ff fc2b 	bl	d80ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8896:	b178      	cbz	r0, d88b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8898:	4629      	mov	r1, r5
   d889a:	4630      	mov	r0, r6
   d889c:	f7ff ff8b 	bl	d87b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d88a0:	4630      	mov	r0, r6
   d88a2:	f7fd f86b 	bl	d597c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d88a6:	2110      	movs	r1, #16
   d88a8:	4630      	mov	r0, r6
   d88aa:	f001 fb72 	bl	d9f92 <_ZdlPvj>
        p_->setError(std::move(error));
   d88ae:	4668      	mov	r0, sp
   d88b0:	f7ff fefe 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
    }
   d88b4:	b009      	add	sp, #36	; 0x24
   d88b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d88b8:	4631      	mov	r1, r6
   d88ba:	a802      	add	r0, sp, #8
   d88bc:	f7ff ffb0 	bl	d8820 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d88c0:	68e0      	ldr	r0, [r4, #12]
   d88c2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d88c6:	b108      	cbz	r0, d88cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d88c8:	f002 f958 	bl	dab7c <strdup>
        type_(type) {
   d88cc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d88ce:	2010      	movs	r0, #16
   d88d0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d88d4:	f7fb fbdf 	bl	d4096 <_Znwj>
   d88d8:	4605      	mov	r5, r0
   d88da:	b1e8      	cbz	r0, d8918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d88dc:	2700      	movs	r7, #0
   d88de:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d88e0:	2018      	movs	r0, #24
   d88e2:	f7fb fbd8 	bl	d4096 <_Znwj>
   d88e6:	4604      	mov	r4, r0
   d88e8:	b188      	cbz	r0, d890e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d88ea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d88ec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d88ee:	a802      	add	r0, sp, #8
   d88f0:	f7fd fd4f 	bl	d6392 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d88f6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d88f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d88fc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d88fe:	a906      	add	r1, sp, #24
   d8900:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8902:	60e3      	str	r3, [r4, #12]
   d8904:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8908:	9205      	str	r2, [sp, #20]
   d890a:	f7ff fec4 	bl	d8696 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d890e:	4b08      	ldr	r3, [pc, #32]	; (d8930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8910:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8912:	4b08      	ldr	r3, [pc, #32]	; (d8934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8914:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8916:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8918:	a806      	add	r0, sp, #24
   d891a:	f7ff fec9 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d891e:	a802      	add	r0, sp, #8
   d8920:	f7fd f82c 	bl	d597c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8924:	2200      	movs	r2, #0
   d8926:	4629      	mov	r1, r5
   d8928:	4803      	ldr	r0, [pc, #12]	; (d8938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d892a:	f7ff fbe7 	bl	d80fc <application_thread_invoke>
   d892e:	e7b7      	b.n	d88a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8930:	000d87c9 	.word	0x000d87c9
   d8934:	000d8a61 	.word	0x000d8a61
   d8938:	000d83c3 	.word	0x000d83c3

000d893c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d893c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8940:	b08a      	sub	sp, #40	; 0x28
   d8942:	4605      	mov	r5, r0
   d8944:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8948:	460c      	mov	r4, r1
   d894a:	4617      	mov	r7, r2
   d894c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d894e:	f7ff fc35 	bl	d81bc <spark_cloud_flag_connected>
   d8952:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8954:	4682      	mov	sl, r0
   d8956:	bb38      	cbnz	r0, d89a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8958:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d895c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d895e:	a905      	add	r1, sp, #20
   d8960:	4630      	mov	r0, r6
   d8962:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8966:	f7ff fe96 	bl	d8696 <_ZN8particle5ErrorC1EOS0_>
   d896a:	2014      	movs	r0, #20
   d896c:	f7fb fb93 	bl	d4096 <_Znwj>
   d8970:	4604      	mov	r4, r0
   d8972:	b148      	cbz	r0, d8988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8974:	2302      	movs	r3, #2
   d8976:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8978:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d897a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d897e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8980:	4631      	mov	r1, r6
   d8982:	300c      	adds	r0, #12
   d8984:	f7ff fe87 	bl	d8696 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8988:	4628      	mov	r0, r5
	: __shared_count(__p)
   d898a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d898c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8990:	f7ff ff32 	bl	d87f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8994:	4630      	mov	r0, r6
   d8996:	f7ff fe8b 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d899a:	a805      	add	r0, sp, #20
   d899c:	f7ff fe88 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
}
   d89a0:	4628      	mov	r0, r5
   d89a2:	b00a      	add	sp, #40	; 0x28
   d89a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d89a8:	230c      	movs	r3, #12
   d89aa:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d89ae:	2014      	movs	r0, #20
   d89b0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d89b4:	9307      	str	r3, [sp, #28]
   d89b6:	f7fb fb6e 	bl	d4096 <_Znwj>
   d89ba:	4601      	mov	r1, r0
   d89bc:	b128      	cbz	r0, d89ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d89c2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89c6:	f880 a001 	strb.w	sl, [r0, #1]
   d89ca:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d89cc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d89ce:	f7ff ff13 	bl	d87f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d89d2:	4b22      	ldr	r3, [pc, #136]	; (d8a5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d89d4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d89d6:	2008      	movs	r0, #8
   d89d8:	f7fb fb5d 	bl	d4096 <_Znwj>
   d89dc:	4682      	mov	sl, r0
   d89de:	b128      	cbz	r0, d89ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d89e0:	9b03      	ldr	r3, [sp, #12]
   d89e2:	f840 3b04 	str.w	r3, [r0], #4
   d89e6:	a904      	add	r1, sp, #16
   d89e8:	f7ff fd07 	bl	d83fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89ec:	9600      	str	r6, [sp, #0]
   d89ee:	fa5f f389 	uxtb.w	r3, r9
   d89f2:	4642      	mov	r2, r8
   d89f4:	4639      	mov	r1, r7
   d89f6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d89f8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89fc:	f7ff fbee 	bl	d81dc <spark_send_event>
   d8a00:	b9b8      	cbnz	r0, d8a32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8a02:	9b03      	ldr	r3, [sp, #12]
   d8a04:	785b      	ldrb	r3, [r3, #1]
   d8a06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8a0a:	b993      	cbnz	r3, d8a32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8a0c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8a10:	a905      	add	r1, sp, #20
   d8a12:	a803      	add	r0, sp, #12
   d8a14:	9205      	str	r2, [sp, #20]
   d8a16:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a1a:	f7ff ff11 	bl	d8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a1e:	a805      	add	r0, sp, #20
   d8a20:	f7ff fe46 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8a24:	a805      	add	r0, sp, #20
   d8a26:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8a28:	f7ff fea6 	bl	d8778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8a2c:	a806      	add	r0, sp, #24
   d8a2e:	f7fc f96f 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a32:	9b03      	ldr	r3, [sp, #12]
   d8a34:	9305      	str	r3, [sp, #20]
   d8a36:	a904      	add	r1, sp, #16
   d8a38:	a806      	add	r0, sp, #24
   d8a3a:	f7ff fcde 	bl	d83fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a3e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8a40:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a42:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8a44:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8a46:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8a48:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8a4a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8a4c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8a4e:	f7fc f95f 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a52:	a804      	add	r0, sp, #16
   d8a54:	f7fc f95c 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8a58:	e7a2      	b.n	d89a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8a5a:	bf00      	nop
   d8a5c:	000d8b25 	.word	0x000d8b25

000d8a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8a60:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a64:	4605      	mov	r5, r0
	  switch (__op)
   d8a66:	d007      	beq.n	d8a78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8a68:	2a03      	cmp	r2, #3
   d8a6a:	d018      	beq.n	d8a9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8a6c:	2a01      	cmp	r2, #1
   d8a6e:	d101      	bne.n	d8a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a70:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a72:	6003      	str	r3, [r0, #0]
	}
   d8a74:	2000      	movs	r0, #0
   d8a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a78:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8a7a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a7c:	f7fb fb0b 	bl	d4096 <_Znwj>
   d8a80:	4604      	mov	r4, r0
   d8a82:	b150      	cbz	r0, d8a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8a84:	4631      	mov	r1, r6
   d8a86:	f7ff fecb 	bl	d8820 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8a8a:	6930      	ldr	r0, [r6, #16]
   d8a8c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a90:	b108      	cbz	r0, d8a96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8a92:	f002 f873 	bl	dab7c <strdup>
        type_(type) {
   d8a96:	6120      	str	r0, [r4, #16]
   d8a98:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8a9a:	602c      	str	r4, [r5, #0]
	}
   d8a9c:	e7ea      	b.n	d8a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a9e:	6804      	ldr	r4, [r0, #0]
   d8aa0:	2c00      	cmp	r4, #0
   d8aa2:	d0e7      	beq.n	d8a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8aa4:	f104 0010 	add.w	r0, r4, #16
   d8aa8:	f7ff fe02 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8aac:	4620      	mov	r0, r4
   d8aae:	f7fc ff65 	bl	d597c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8ab2:	2118      	movs	r1, #24
   d8ab4:	4620      	mov	r0, r4
   d8ab6:	f001 fa6c 	bl	d9f92 <_ZdlPvj>
   d8aba:	e7db      	b.n	d8a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8abc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8abc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8abe:	2300      	movs	r3, #0
   d8ac0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8ac2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ac4:	4604      	mov	r4, r0
   d8ac6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ac8:	b12b      	cbz	r3, d8ad6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8aca:	2202      	movs	r2, #2
   d8acc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8ace:	68eb      	ldr	r3, [r5, #12]
   d8ad0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8ad2:	68ab      	ldr	r3, [r5, #8]
   d8ad4:	60a3      	str	r3, [r4, #8]
    }
   d8ad6:	4620      	mov	r0, r4
   d8ad8:	bd38      	pop	{r3, r4, r5, pc}

000d8ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8ada:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8adc:	b570      	push	{r4, r5, r6, lr}
   d8ade:	4604      	mov	r4, r0
	  switch (__op)
   d8ae0:	d007      	beq.n	d8af2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8ae2:	2a03      	cmp	r2, #3
   d8ae4:	d012      	beq.n	d8b0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8ae6:	2a01      	cmp	r2, #1
   d8ae8:	d101      	bne.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8aea:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8aec:	6003      	str	r3, [r0, #0]
	}
   d8aee:	2000      	movs	r0, #0
   d8af0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8af2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8af4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8af6:	f7fb face 	bl	d4096 <_Znwj>
   d8afa:	4605      	mov	r5, r0
   d8afc:	b120      	cbz	r0, d8b08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8afe:	4631      	mov	r1, r6
   d8b00:	f7ff ffdc 	bl	d8abc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8b04:	7c33      	ldrb	r3, [r6, #16]
   d8b06:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8b08:	6025      	str	r5, [r4, #0]
	}
   d8b0a:	e7f0      	b.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8b0c:	6804      	ldr	r4, [r0, #0]
   d8b0e:	2c00      	cmp	r4, #0
   d8b10:	d0ed      	beq.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8b12:	4620      	mov	r0, r4
   d8b14:	f7fc ff32 	bl	d597c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8b18:	2114      	movs	r1, #20
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	f001 fa39 	bl	d9f92 <_ZdlPvj>
   d8b20:	e7e5      	b.n	d8aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8b24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8b26:	b089      	sub	sp, #36	; 0x24
   d8b28:	4604      	mov	r4, r0
   d8b2a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8b2c:	a801      	add	r0, sp, #4
   d8b2e:	4611      	mov	r1, r2
   d8b30:	f7ff fe22 	bl	d8778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8b34:	b1a4      	cbz	r4, d8b60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8b36:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8b38:	b11d      	cbz	r5, d8b42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8b3a:	4628      	mov	r0, r5
   d8b3c:	f002 f81e 	bl	dab7c <strdup>
   d8b40:	4605      	mov	r5, r0
   d8b42:	a801      	add	r0, sp, #4
   d8b44:	a903      	add	r1, sp, #12
        type_(type) {
   d8b46:	9503      	str	r5, [sp, #12]
   d8b48:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8b4c:	f7ff fe78 	bl	d8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b50:	a803      	add	r0, sp, #12
   d8b52:	f7ff fdad 	bl	d86b0 <_ZN8particle5ErrorD1Ev>
   d8b56:	a802      	add	r0, sp, #8
   d8b58:	f7fc f8da 	bl	d4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8b5c:	b009      	add	sp, #36	; 0x24
   d8b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b60:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8b62:	2301      	movs	r3, #1
   d8b64:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8b68:	2a00      	cmp	r2, #0
   d8b6a:	d103      	bne.n	d8b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8b6c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8b70:	2900      	cmp	r1, #0
   d8b72:	d1f7      	bne.n	d8b64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8b74:	d1ef      	bne.n	d8b56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8b76:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8b78:	f3bf 8f5b 	dmb	ish
   d8b7c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8b7e:	1d2b      	adds	r3, r5, #4
   d8b80:	f3bf 8f5b 	dmb	ish
   d8b84:	e853 6f00 	ldrex	r6, [r3]
   d8b88:	e843 4200 	strex	r2, r4, [r3]
   d8b8c:	2a00      	cmp	r2, #0
   d8b8e:	d1f9      	bne.n	d8b84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8b90:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b94:	2e00      	cmp	r6, #0
   d8b96:	d0de      	beq.n	d8b56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8b98:	4620      	mov	r0, r4
   d8b9a:	f7ff faa7 	bl	d80ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b9e:	4607      	mov	r7, r0
   d8ba0:	b160      	cbz	r0, d8bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8ba2:	f105 010c 	add.w	r1, r5, #12
   d8ba6:	4630      	mov	r0, r6
   d8ba8:	f7ff fe15 	bl	d87d6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8bac:	4630      	mov	r0, r6
   d8bae:	f7fc fee5 	bl	d597c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8bb2:	2110      	movs	r1, #16
   d8bb4:	4630      	mov	r0, r6
   d8bb6:	f001 f9ec 	bl	d9f92 <_ZdlPvj>
   d8bba:	e7cc      	b.n	d8b56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8bbc:	4631      	mov	r1, r6
   d8bbe:	a803      	add	r0, sp, #12
   d8bc0:	f7ff ff7c 	bl	d8abc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8bc4:	7b2b      	ldrb	r3, [r5, #12]
   d8bc6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8bca:	2010      	movs	r0, #16
   d8bcc:	f7fb fa63 	bl	d4096 <_Znwj>
   d8bd0:	4605      	mov	r5, r0
   d8bd2:	b1d0      	cbz	r0, d8c0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8bd4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bd6:	2014      	movs	r0, #20
   d8bd8:	f7fb fa5d 	bl	d4096 <_Znwj>
   d8bdc:	4604      	mov	r4, r0
   d8bde:	b178      	cbz	r0, d8c00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8be0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8be2:	4601      	mov	r1, r0
   d8be4:	a803      	add	r0, sp, #12
   d8be6:	f7fd fbd4 	bl	d6392 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8bec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bee:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bf0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8bf2:	9205      	str	r2, [sp, #20]
   d8bf4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bf6:	60e3      	str	r3, [r4, #12]
   d8bf8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8bfc:	9206      	str	r2, [sp, #24]
   d8bfe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8c00:	4b06      	ldr	r3, [pc, #24]	; (d8c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8c02:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8c04:	4b06      	ldr	r3, [pc, #24]	; (d8c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8c06:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8c08:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8c0a:	a803      	add	r0, sp, #12
   d8c0c:	f7fc feb6 	bl	d597c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8c10:	2200      	movs	r2, #0
   d8c12:	4629      	mov	r1, r5
   d8c14:	4803      	ldr	r0, [pc, #12]	; (d8c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8c16:	f7ff fa71 	bl	d80fc <application_thread_invoke>
   d8c1a:	e7c7      	b.n	d8bac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8c1c:	000d87e9 	.word	0x000d87e9
   d8c20:	000d8adb 	.word	0x000d8adb
   d8c24:	000d83c3 	.word	0x000d83c3

000d8c28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8c28:	2200      	movs	r2, #0
   d8c2a:	6840      	ldr	r0, [r0, #4]
   d8c2c:	4611      	mov	r1, r2
   d8c2e:	f7ff bb45 	b.w	d82bc <network_listening>

000d8c32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8c32:	2200      	movs	r2, #0
   d8c34:	6840      	ldr	r0, [r0, #4]
   d8c36:	4611      	mov	r1, r2
   d8c38:	f7ff bb50 	b.w	d82dc <network_get_listen_timeout>

000d8c3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8c3c:	6840      	ldr	r0, [r0, #4]
   d8c3e:	2200      	movs	r2, #0
   d8c40:	f7ff bb44 	b.w	d82cc <network_set_listen_timeout>

000d8c44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8c44:	6840      	ldr	r0, [r0, #4]
   d8c46:	2200      	movs	r2, #0
   d8c48:	f081 0101 	eor.w	r1, r1, #1
   d8c4c:	f7ff bb2e 	b.w	d82ac <network_listen>

000d8c50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8c50:	2300      	movs	r3, #0
   d8c52:	6840      	ldr	r0, [r0, #4]
   d8c54:	461a      	mov	r2, r3
   d8c56:	4619      	mov	r1, r3
   d8c58:	f7ff bb20 	b.w	d829c <network_off>

000d8c5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8c5c:	2300      	movs	r3, #0
   d8c5e:	6840      	ldr	r0, [r0, #4]
   d8c60:	461a      	mov	r2, r3
   d8c62:	4619      	mov	r1, r3
   d8c64:	f7ff bb12 	b.w	d828c <network_on>

000d8c68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8c68:	2200      	movs	r2, #0
   d8c6a:	6840      	ldr	r0, [r0, #4]
   d8c6c:	4611      	mov	r1, r2
   d8c6e:	f7ff bb05 	b.w	d827c <network_ready>

000d8c72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8c72:	2200      	movs	r2, #0
   d8c74:	6840      	ldr	r0, [r0, #4]
   d8c76:	4611      	mov	r1, r2
   d8c78:	f7ff baf0 	b.w	d825c <network_connecting>

000d8c7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c7c:	6840      	ldr	r0, [r0, #4]
   d8c7e:	2200      	movs	r2, #0
   d8c80:	2102      	movs	r1, #2
   d8c82:	f7ff baf3 	b.w	d826c <network_disconnect>

000d8c86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8c86:	2300      	movs	r3, #0
   d8c88:	6840      	ldr	r0, [r0, #4]
   d8c8a:	461a      	mov	r2, r3
   d8c8c:	f7ff bade 	b.w	d824c <network_connect>

000d8c90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8c90:	4b02      	ldr	r3, [pc, #8]	; (d8c9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8c92:	2203      	movs	r2, #3
   d8c94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8c96:	4a02      	ldr	r2, [pc, #8]	; (d8ca0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8c98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8c9a:	4770      	bx	lr
   d8c9c:	2003e61c 	.word	0x2003e61c
   d8ca0:	000db614 	.word	0x000db614

000d8ca4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8ca4:	4770      	bx	lr

000d8ca6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8ca8:	4606      	mov	r6, r0
   d8caa:	4615      	mov	r5, r2
   d8cac:	460c      	mov	r4, r1
   d8cae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8cb0:	42bc      	cmp	r4, r7
   d8cb2:	d006      	beq.n	d8cc2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8cb4:	6833      	ldr	r3, [r6, #0]
   d8cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8cba:	689b      	ldr	r3, [r3, #8]
   d8cbc:	4630      	mov	r0, r6
   d8cbe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8cc0:	e7f6      	b.n	d8cb0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8cc2:	4628      	mov	r0, r5
   d8cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8cc6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8cc6:	7c00      	ldrb	r0, [r0, #16]
   d8cc8:	2200      	movs	r2, #0
   d8cca:	f7ff b8b5 	b.w	d7e38 <hal_i2c_write>

000d8cce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8cce:	7c00      	ldrb	r0, [r0, #16]
   d8cd0:	2100      	movs	r1, #0
   d8cd2:	f7ff b8b9 	b.w	d7e48 <hal_i2c_available>

000d8cd6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8cd6:	7c00      	ldrb	r0, [r0, #16]
   d8cd8:	2100      	movs	r1, #0
   d8cda:	f7ff b8bd 	b.w	d7e58 <hal_i2c_read>

000d8cde <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8cde:	7c00      	ldrb	r0, [r0, #16]
   d8ce0:	2100      	movs	r1, #0
   d8ce2:	f7ff b8c1 	b.w	d7e68 <hal_i2c_peek>

000d8ce6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8ce6:	7c00      	ldrb	r0, [r0, #16]
   d8ce8:	2100      	movs	r1, #0
   d8cea:	f7ff b8c5 	b.w	d7e78 <hal_i2c_flush>

000d8cee <_ZN7TwoWireD0Ev>:
   d8cee:	b510      	push	{r4, lr}
   d8cf0:	2114      	movs	r1, #20
   d8cf2:	4604      	mov	r4, r0
   d8cf4:	f001 f94d 	bl	d9f92 <_ZdlPvj>
   d8cf8:	4620      	mov	r0, r4
   d8cfa:	bd10      	pop	{r4, pc}

000d8cfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8cfc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8d02:	4604      	mov	r4, r0
   d8d04:	4608      	mov	r0, r1
   d8d06:	2100      	movs	r1, #0
   d8d08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8d0c:	4b03      	ldr	r3, [pc, #12]	; (d8d1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8d0e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8d10:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8d12:	4611      	mov	r1, r2
   d8d14:	f7ff f8c0 	bl	d7e98 <hal_i2c_init>
}
   d8d18:	4620      	mov	r0, r4
   d8d1a:	bd10      	pop	{r4, pc}
   d8d1c:	000db648 	.word	0x000db648

000d8d20 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8d20:	2300      	movs	r3, #0
   d8d22:	7c00      	ldrb	r0, [r0, #16]
   d8d24:	461a      	mov	r2, r3
   d8d26:	4619      	mov	r1, r3
   d8d28:	f7ff b86e 	b.w	d7e08 <hal_i2c_begin>

000d8d2c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8d2e:	2200      	movs	r2, #0
   d8d30:	2314      	movs	r3, #20
   d8d32:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8d36:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8d3a:	780b      	ldrb	r3, [r1, #0]
   d8d3c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d40:	684b      	ldr	r3, [r1, #4]
   d8d42:	9303      	str	r3, [sp, #12]
   d8d44:	68cb      	ldr	r3, [r1, #12]
   d8d46:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8d48:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8d4a:	7a0b      	ldrb	r3, [r1, #8]
   d8d4c:	9305      	str	r3, [sp, #20]
   d8d4e:	a901      	add	r1, sp, #4
   d8d50:	f7ff f8ba 	bl	d7ec8 <hal_i2c_request_ex>
}
   d8d54:	b007      	add	sp, #28
   d8d56:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d5a <_ZN7TwoWire11requestFromEhjh>:
{
   d8d5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8d5c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8d5e:	f88d 1000 	strb.w	r1, [sp]
   d8d62:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8d66:	9103      	str	r1, [sp, #12]
   d8d68:	bf18      	it	ne
   d8d6a:	2301      	movne	r3, #1
   d8d6c:	4669      	mov	r1, sp
    size_ = size;
   d8d6e:	9201      	str	r2, [sp, #4]
   d8d70:	f88d 3008 	strb.w	r3, [sp, #8]
   d8d74:	f7ff ffda 	bl	d8d2c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8d78:	b005      	add	sp, #20
   d8d7a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8d7e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8d7e:	7c00      	ldrb	r0, [r0, #16]
   d8d80:	2200      	movs	r2, #0
   d8d82:	f7ff b849 	b.w	d7e18 <hal_i2c_begin_transmission>

000d8d86 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8d86:	b2c9      	uxtb	r1, r1
   d8d88:	f7ff bff9 	b.w	d8d7e <_ZN7TwoWire17beginTransmissionEh>

000d8d8c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8d8c:	7c00      	ldrb	r0, [r0, #16]
   d8d8e:	2200      	movs	r2, #0
   d8d90:	f7ff b84a 	b.w	d7e28 <hal_i2c_end_transmission>

000d8d94 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8d94:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8d96:	2100      	movs	r1, #0
   d8d98:	7c00      	ldrb	r0, [r0, #16]
   d8d9a:	f7ff f885 	bl	d7ea8 <hal_i2c_lock>
}
   d8d9e:	fab0 f080 	clz	r0, r0
   d8da2:	0940      	lsrs	r0, r0, #5
   d8da4:	bd08      	pop	{r3, pc}

000d8da6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8da6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8da8:	2100      	movs	r1, #0
   d8daa:	7c00      	ldrb	r0, [r0, #16]
   d8dac:	f7ff f884 	bl	d7eb8 <hal_i2c_unlock>
}
   d8db0:	fab0 f080 	clz	r0, r0
   d8db4:	0940      	lsrs	r0, r0, #5
   d8db6:	bd08      	pop	{r3, pc}

000d8db8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8db8:	4700      	bx	r0
	...

000d8dbc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8dc0:	2400      	movs	r4, #0
{
   d8dc2:	461d      	mov	r5, r3
   d8dc4:	460f      	mov	r7, r1
   d8dc6:	4690      	mov	r8, r2
   d8dc8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8dca:	f7ff f805 	bl	d7dd8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8dce:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8dd0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8dd4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8dd8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8ddc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8de0:	bfa2      	ittt	ge
   d8de2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8de6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8dea:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8dec:	4907      	ldr	r1, [pc, #28]	; (d8e0c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8dee:	9400      	str	r4, [sp, #0]
   d8df0:	4643      	mov	r3, r8
   d8df2:	463a      	mov	r2, r7
   d8df4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8df6:	bfa8      	it	ge
   d8df8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8dfc:	f7fe ffe4 	bl	d7dc8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8e00:	fab0 f080 	clz	r0, r0
   d8e04:	0940      	lsrs	r0, r0, #5
   d8e06:	b004      	add	sp, #16
   d8e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e0c:	000d8db9 	.word	0x000d8db9

000d8e10 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d8e10:	f7fe bff2 	b.w	d7df8 <HAL_Interrupts_Disable_All>

000d8e14 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d8e14:	f7fe bfe8 	b.w	d7de8 <HAL_Interrupts_Enable_All>

000d8e18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8e18:	4770      	bx	lr

000d8e1a <_ZN9IPAddressD0Ev>:
   d8e1a:	b510      	push	{r4, lr}
   d8e1c:	2118      	movs	r1, #24
   d8e1e:	4604      	mov	r4, r0
   d8e20:	f001 f8b7 	bl	d9f92 <_ZdlPvj>
   d8e24:	4620      	mov	r0, r4
   d8e26:	bd10      	pop	{r4, pc}

000d8e28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8e28:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8e2a:	7d03      	ldrb	r3, [r0, #20]
   d8e2c:	2b06      	cmp	r3, #6
{
   d8e2e:	b08d      	sub	sp, #52	; 0x34
   d8e30:	460e      	mov	r6, r1
   d8e32:	f100 0704 	add.w	r7, r0, #4
   d8e36:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8e3a:	d012      	beq.n	d8e62 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8e3c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8e40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8e44:	220a      	movs	r2, #10
   d8e46:	4630      	mov	r0, r6
   d8e48:	f000 f94d 	bl	d90e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8e4c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8e4e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8e50:	d019      	beq.n	d8e86 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8e52:	2c00      	cmp	r4, #0
   d8e54:	d0f4      	beq.n	d8e40 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8e56:	212e      	movs	r1, #46	; 0x2e
   d8e58:	4630      	mov	r0, r6
   d8e5a:	f000 f92b 	bl	d90b4 <_ZN5Print5printEc>
   d8e5e:	4404      	add	r4, r0
   d8e60:	e7ee      	b.n	d8e40 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8e62:	232f      	movs	r3, #47	; 0x2f
   d8e64:	466a      	mov	r2, sp
   d8e66:	4639      	mov	r1, r7
   d8e68:	200a      	movs	r0, #10
		buf[0] = 0;
   d8e6a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8e6e:	f7ff f833 	bl	d7ed8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8e72:	4668      	mov	r0, sp
   d8e74:	f001 fe9f 	bl	dabb6 <strlen>
   d8e78:	6833      	ldr	r3, [r6, #0]
   d8e7a:	4602      	mov	r2, r0
   d8e7c:	68db      	ldr	r3, [r3, #12]
   d8e7e:	4669      	mov	r1, sp
   d8e80:	4630      	mov	r0, r6
   d8e82:	4798      	blx	r3
   d8e84:	4604      	mov	r4, r0
    }
    return n;
}
   d8e86:	4620      	mov	r0, r4
   d8e88:	b00d      	add	sp, #52	; 0x34
   d8e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e8c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8e8c:	b510      	push	{r4, lr}
   d8e8e:	4b05      	ldr	r3, [pc, #20]	; (d8ea4 <_ZN9IPAddressC1Ev+0x18>)
   d8e90:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8e92:	2211      	movs	r2, #17
   d8e94:	f840 3b04 	str.w	r3, [r0], #4
   d8e98:	2100      	movs	r1, #0
   d8e9a:	f001 fe31 	bl	dab00 <memset>
}
   d8e9e:	4620      	mov	r0, r4
   d8ea0:	bd10      	pop	{r4, pc}
   d8ea2:	bf00      	nop
   d8ea4:	000db670 	.word	0x000db670

000d8ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8ea8:	4603      	mov	r3, r0
   d8eaa:	4a07      	ldr	r2, [pc, #28]	; (d8ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8eac:	b510      	push	{r4, lr}
   d8eae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8eb2:	f101 0210 	add.w	r2, r1, #16
   d8eb6:	f851 4b04 	ldr.w	r4, [r1], #4
   d8eba:	f843 4b04 	str.w	r4, [r3], #4
   d8ebe:	4291      	cmp	r1, r2
   d8ec0:	d1f9      	bne.n	d8eb6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8ec2:	780a      	ldrb	r2, [r1, #0]
   d8ec4:	701a      	strb	r2, [r3, #0]
}
   d8ec6:	bd10      	pop	{r4, pc}
   d8ec8:	000db670 	.word	0x000db670

000d8ecc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8ecc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8ece:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8ed2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8ed6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8eda:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8ede:	2304      	movs	r3, #4
   d8ee0:	6041      	str	r1, [r0, #4]
   d8ee2:	7503      	strb	r3, [r0, #20]
}
   d8ee4:	bd10      	pop	{r4, pc}

000d8ee6 <_ZN9IPAddressaSEPKh>:
{
   d8ee6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8ee8:	78cb      	ldrb	r3, [r1, #3]
   d8eea:	9300      	str	r3, [sp, #0]
   d8eec:	788b      	ldrb	r3, [r1, #2]
   d8eee:	784a      	ldrb	r2, [r1, #1]
   d8ef0:	7809      	ldrb	r1, [r1, #0]
   d8ef2:	f7ff ffeb 	bl	d8ecc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8ef6:	b002      	add	sp, #8
   d8ef8:	bd10      	pop	{r4, pc}
	...

000d8efc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8efc:	4b01      	ldr	r3, [pc, #4]	; (d8f04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8efe:	4a02      	ldr	r2, [pc, #8]	; (d8f08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8f00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8f02:	4770      	bx	lr
   d8f04:	2003e624 	.word	0x2003e624
   d8f08:	000db67c 	.word	0x000db67c

000d8f0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8f0c:	2300      	movs	r3, #0
   d8f0e:	6840      	ldr	r0, [r0, #4]
   d8f10:	461a      	mov	r2, r3
   d8f12:	f7ff b99b 	b.w	d824c <network_connect>

000d8f16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8f16:	6840      	ldr	r0, [r0, #4]
   d8f18:	2200      	movs	r2, #0
   d8f1a:	2102      	movs	r1, #2
   d8f1c:	f7ff b9a6 	b.w	d826c <network_disconnect>

000d8f20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8f20:	2200      	movs	r2, #0
   d8f22:	6840      	ldr	r0, [r0, #4]
   d8f24:	4611      	mov	r1, r2
   d8f26:	f7ff b999 	b.w	d825c <network_connecting>

000d8f2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8f2a:	2200      	movs	r2, #0
   d8f2c:	6840      	ldr	r0, [r0, #4]
   d8f2e:	4611      	mov	r1, r2
   d8f30:	f7ff b9a4 	b.w	d827c <network_ready>

000d8f34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8f34:	2300      	movs	r3, #0
   d8f36:	6840      	ldr	r0, [r0, #4]
   d8f38:	461a      	mov	r2, r3
   d8f3a:	4619      	mov	r1, r3
   d8f3c:	f7ff b9a6 	b.w	d828c <network_on>

000d8f40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8f40:	2300      	movs	r3, #0
   d8f42:	6840      	ldr	r0, [r0, #4]
   d8f44:	461a      	mov	r2, r3
   d8f46:	4619      	mov	r1, r3
   d8f48:	f7ff b9a8 	b.w	d829c <network_off>

000d8f4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8f4c:	6840      	ldr	r0, [r0, #4]
   d8f4e:	2200      	movs	r2, #0
   d8f50:	f081 0101 	eor.w	r1, r1, #1
   d8f54:	f7ff b9aa 	b.w	d82ac <network_listen>

000d8f58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8f58:	6840      	ldr	r0, [r0, #4]
   d8f5a:	2200      	movs	r2, #0
   d8f5c:	f7ff b9b6 	b.w	d82cc <network_set_listen_timeout>

000d8f60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8f60:	2200      	movs	r2, #0
   d8f62:	6840      	ldr	r0, [r0, #4]
   d8f64:	4611      	mov	r1, r2
   d8f66:	f7ff b9b9 	b.w	d82dc <network_get_listen_timeout>

000d8f6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8f6a:	2200      	movs	r2, #0
   d8f6c:	6840      	ldr	r0, [r0, #4]
   d8f6e:	4611      	mov	r1, r2
   d8f70:	f7ff b9a4 	b.w	d82bc <network_listening>

000d8f74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f78:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8f7a:	b095      	sub	sp, #84	; 0x54
   d8f7c:	4616      	mov	r6, r2
   d8f7e:	460d      	mov	r5, r1
   d8f80:	4607      	mov	r7, r0
    IPAddress addr;
   d8f82:	f7ff ff83 	bl	d8e8c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8f86:	4621      	mov	r1, r4
   d8f88:	2218      	movs	r2, #24
   d8f8a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8f8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8f8e:	f001 fdb7 	bl	dab00 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8f92:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8f94:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8f98:	4621      	mov	r1, r4
   d8f9a:	466b      	mov	r3, sp
   d8f9c:	aa0c      	add	r2, sp, #48	; 0x30
   d8f9e:	4630      	mov	r0, r6
   d8fa0:	f7fe ffaa 	bl	d7ef8 <netdb_getaddrinfo>
    if (!r) {
   d8fa4:	4604      	mov	r4, r0
   d8fa6:	2800      	cmp	r0, #0
   d8fa8:	d146      	bne.n	d9038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8faa:	4602      	mov	r2, r0
   d8fac:	2101      	movs	r1, #1
   d8fae:	6868      	ldr	r0, [r5, #4]
   d8fb0:	f7ff f964 	bl	d827c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8fb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fb8:	4622      	mov	r2, r4
   d8fba:	6868      	ldr	r0, [r5, #4]
   d8fbc:	f7ff f95e 	bl	d827c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8fc0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8fc2:	4681      	mov	r9, r0
        bool ok = false;
   d8fc4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8fc6:	2e00      	cmp	r6, #0
   d8fc8:	d036      	beq.n	d9038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8fca:	2900      	cmp	r1, #0
   d8fcc:	d134      	bne.n	d9038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8fce:	6873      	ldr	r3, [r6, #4]
   d8fd0:	2b02      	cmp	r3, #2
   d8fd2:	d003      	beq.n	d8fdc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8fd4:	2b0a      	cmp	r3, #10
   d8fd6:	d00b      	beq.n	d8ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8fd8:	69f6      	ldr	r6, [r6, #28]
   d8fda:	e7f4      	b.n	d8fc6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8fdc:	f1b8 0f00 	cmp.w	r8, #0
   d8fe0:	d004      	beq.n	d8fec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8fe2:	6971      	ldr	r1, [r6, #20]
   d8fe4:	4638      	mov	r0, r7
   d8fe6:	3104      	adds	r1, #4
   d8fe8:	f7ff ff7d 	bl	d8ee6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8fec:	4641      	mov	r1, r8
   d8fee:	e7f3      	b.n	d8fd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8ff0:	f1b9 0f00 	cmp.w	r9, #0
   d8ff4:	d101      	bne.n	d8ffa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8ff6:	4649      	mov	r1, r9
   d8ff8:	e7ee      	b.n	d8fd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8ffa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8ffc:	2210      	movs	r2, #16
   d8ffe:	a801      	add	r0, sp, #4
   d9000:	f001 fd7e 	bl	dab00 <memset>
                    a.v = 6;
   d9004:	2306      	movs	r3, #6
   d9006:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d900a:	ad01      	add	r5, sp, #4
   d900c:	f104 0308 	add.w	r3, r4, #8
   d9010:	3418      	adds	r4, #24
   d9012:	6818      	ldr	r0, [r3, #0]
   d9014:	6859      	ldr	r1, [r3, #4]
   d9016:	462a      	mov	r2, r5
   d9018:	c203      	stmia	r2!, {r0, r1}
   d901a:	3308      	adds	r3, #8
   d901c:	42a3      	cmp	r3, r4
   d901e:	4615      	mov	r5, r2
   d9020:	d1f7      	bne.n	d9012 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9022:	a901      	add	r1, sp, #4
   d9024:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9026:	ad07      	add	r5, sp, #28
   d9028:	f7ff ff3e 	bl	d8ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d902c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d902e:	1d3c      	adds	r4, r7, #4
   d9030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9032:	682b      	ldr	r3, [r5, #0]
   d9034:	7023      	strb	r3, [r4, #0]
   d9036:	e7de      	b.n	d8ff6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9038:	9800      	ldr	r0, [sp, #0]
   d903a:	f7fe ff55 	bl	d7ee8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d903e:	4638      	mov	r0, r7
   d9040:	b015      	add	sp, #84	; 0x54
   d9042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9048 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9048:	4b02      	ldr	r3, [pc, #8]	; (d9054 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d904a:	4a03      	ldr	r2, [pc, #12]	; (d9058 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d904c:	601a      	str	r2, [r3, #0]
   d904e:	2200      	movs	r2, #0
   d9050:	605a      	str	r2, [r3, #4]

} // spark
   d9052:	4770      	bx	lr
   d9054:	2003e628 	.word	0x2003e628
   d9058:	000db688 	.word	0x000db688

000d905c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d905e:	4606      	mov	r6, r0
   d9060:	460d      	mov	r5, r1
  size_t n = 0;
   d9062:	188f      	adds	r7, r1, r2
   d9064:	2400      	movs	r4, #0
  while (size--) {
   d9066:	42bd      	cmp	r5, r7
   d9068:	d00c      	beq.n	d9084 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d906a:	6833      	ldr	r3, [r6, #0]
   d906c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9070:	689b      	ldr	r3, [r3, #8]
   d9072:	4630      	mov	r0, r6
   d9074:	4798      	blx	r3
     if (chunk>=0)
   d9076:	1e03      	subs	r3, r0, #0
   d9078:	db01      	blt.n	d907e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d907a:	441c      	add	r4, r3
  while (size--) {
   d907c:	e7f3      	b.n	d9066 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d907e:	2c00      	cmp	r4, #0
   d9080:	bf08      	it	eq
   d9082:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9084:	4620      	mov	r0, r4
   d9086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9088 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9088:	b513      	push	{r0, r1, r4, lr}
   d908a:	4604      	mov	r4, r0
    }
   d908c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d908e:	b159      	cbz	r1, d90a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9090:	9101      	str	r1, [sp, #4]
   d9092:	f001 fd90 	bl	dabb6 <strlen>
   d9096:	6823      	ldr	r3, [r4, #0]
   d9098:	9901      	ldr	r1, [sp, #4]
   d909a:	68db      	ldr	r3, [r3, #12]
   d909c:	4602      	mov	r2, r0
   d909e:	4620      	mov	r0, r4
    }
   d90a0:	b002      	add	sp, #8
   d90a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d90a6:	4718      	bx	r3
    }
   d90a8:	b002      	add	sp, #8
   d90aa:	bd10      	pop	{r4, pc}

000d90ac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d90ac:	b508      	push	{r3, lr}
  return write(str);
   d90ae:	f7ff ffeb 	bl	d9088 <_ZN5Print5writeEPKc>
}
   d90b2:	bd08      	pop	{r3, pc}

000d90b4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d90b4:	6803      	ldr	r3, [r0, #0]
   d90b6:	689b      	ldr	r3, [r3, #8]
   d90b8:	4718      	bx	r3

000d90ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d90ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d90bc:	210d      	movs	r1, #13
{
   d90be:	4605      	mov	r5, r0
  size_t n = print('\r');
   d90c0:	f7ff fff8 	bl	d90b4 <_ZN5Print5printEc>
  n += print('\n');
   d90c4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d90c6:	4604      	mov	r4, r0
  n += print('\n');
   d90c8:	4628      	mov	r0, r5
   d90ca:	f7ff fff3 	bl	d90b4 <_ZN5Print5printEc>
  return n;
}
   d90ce:	4420      	add	r0, r4
   d90d0:	bd38      	pop	{r3, r4, r5, pc}

000d90d2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d90d2:	b538      	push	{r3, r4, r5, lr}
   d90d4:	4605      	mov	r5, r0
  return write(str);
   d90d6:	f7ff ffd7 	bl	d9088 <_ZN5Print5writeEPKc>
   d90da:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d90dc:	4628      	mov	r0, r5
   d90de:	f7ff ffec 	bl	d90ba <_ZN5Print7printlnEv>
  return n;
}
   d90e2:	4420      	add	r0, r4
   d90e4:	bd38      	pop	{r3, r4, r5, pc}

000d90e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d90e6:	b530      	push	{r4, r5, lr}
   d90e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d90ea:	2300      	movs	r3, #0
   d90ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d90f0:	2a01      	cmp	r2, #1
   d90f2:	bf98      	it	ls
   d90f4:	220a      	movls	r2, #10
   d90f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d90f8:	460d      	mov	r5, r1
   d90fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d90fe:	fb01 5312 	mls	r3, r1, r2, r5
   d9102:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9106:	2b09      	cmp	r3, #9
   d9108:	bf94      	ite	ls
   d910a:	3330      	addls	r3, #48	; 0x30
   d910c:	3337      	addhi	r3, #55	; 0x37
   d910e:	b2db      	uxtb	r3, r3
  } while(n);
   d9110:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9112:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9116:	d9ef      	bls.n	d90f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9118:	4621      	mov	r1, r4
   d911a:	f7ff ffb5 	bl	d9088 <_ZN5Print5writeEPKc>
}
   d911e:	b00b      	add	sp, #44	; 0x2c
   d9120:	bd30      	pop	{r4, r5, pc}
	...

000d9124 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d9124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9128:	ec55 4b10 	vmov	r4, r5, d0
   d912c:	4606      	mov	r6, r0
   d912e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9130:	ee10 2a10 	vmov	r2, s0
   d9134:	ee10 0a10 	vmov	r0, s0
   d9138:	462b      	mov	r3, r5
   d913a:	4629      	mov	r1, r5
   d913c:	f001 fb88 	bl	da850 <__aeabi_dcmpun>
   d9140:	b140      	cbz	r0, d9154 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d9142:	4953      	ldr	r1, [pc, #332]	; (d9290 <_ZN5Print10printFloatEdh+0x16c>)
   d9144:	4630      	mov	r0, r6
   d9146:	f7ff ff9f 	bl	d9088 <_ZN5Print5writeEPKc>
   d914a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d914c:	4650      	mov	r0, sl
   d914e:	b003      	add	sp, #12
   d9150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d9154:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d9158:	4b4e      	ldr	r3, [pc, #312]	; (d9294 <_ZN5Print10printFloatEdh+0x170>)
   d915a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d915e:	4620      	mov	r0, r4
   d9160:	4649      	mov	r1, r9
   d9162:	f001 fb75 	bl	da850 <__aeabi_dcmpun>
   d9166:	b948      	cbnz	r0, d917c <_ZN5Print10printFloatEdh+0x58>
   d9168:	4b4a      	ldr	r3, [pc, #296]	; (d9294 <_ZN5Print10printFloatEdh+0x170>)
   d916a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d916e:	4620      	mov	r0, r4
   d9170:	4649      	mov	r1, r9
   d9172:	f001 fb4f 	bl	da814 <__aeabi_dcmple>
   d9176:	b908      	cbnz	r0, d917c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d9178:	4947      	ldr	r1, [pc, #284]	; (d9298 <_ZN5Print10printFloatEdh+0x174>)
   d917a:	e7e3      	b.n	d9144 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d917c:	4b47      	ldr	r3, [pc, #284]	; (d929c <_ZN5Print10printFloatEdh+0x178>)
   d917e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9182:	4620      	mov	r0, r4
   d9184:	4629      	mov	r1, r5
   d9186:	f001 fb59 	bl	da83c <__aeabi_dcmpgt>
   d918a:	b108      	cbz	r0, d9190 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d918c:	4944      	ldr	r1, [pc, #272]	; (d92a0 <_ZN5Print10printFloatEdh+0x17c>)
   d918e:	e7d9      	b.n	d9144 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9190:	4b44      	ldr	r3, [pc, #272]	; (d92a4 <_ZN5Print10printFloatEdh+0x180>)
   d9192:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9196:	4620      	mov	r0, r4
   d9198:	4629      	mov	r1, r5
   d919a:	f001 fb31 	bl	da800 <__aeabi_dcmplt>
   d919e:	2800      	cmp	r0, #0
   d91a0:	d1f4      	bne.n	d918c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d91a2:	2200      	movs	r2, #0
   d91a4:	2300      	movs	r3, #0
   d91a6:	4620      	mov	r0, r4
   d91a8:	4629      	mov	r1, r5
   d91aa:	f001 fb29 	bl	da800 <__aeabi_dcmplt>
   d91ae:	b1d0      	cbz	r0, d91e6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d91b0:	212d      	movs	r1, #45	; 0x2d
   d91b2:	4630      	mov	r0, r6
   d91b4:	f7ff ff7e 	bl	d90b4 <_ZN5Print5printEc>
     number = -number;
   d91b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d91bc:	4682      	mov	sl, r0
     number = -number;
   d91be:	461d      	mov	r5, r3
  double rounding = 0.5;
   d91c0:	4939      	ldr	r1, [pc, #228]	; (d92a8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d91c2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d92b0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d91c6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d91ca:	2000      	movs	r0, #0
    rounding /= 10.0;
   d91cc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d91d0:	fa5f f38b 	uxtb.w	r3, fp
   d91d4:	429f      	cmp	r7, r3
   d91d6:	d908      	bls.n	d91ea <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d91d8:	4642      	mov	r2, r8
   d91da:	464b      	mov	r3, r9
   d91dc:	f001 f9c8 	bl	da570 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d91e0:	f10b 0b01 	add.w	fp, fp, #1
   d91e4:	e7f4      	b.n	d91d0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d91e6:	4682      	mov	sl, r0
   d91e8:	e7ea      	b.n	d91c0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d91ea:	4622      	mov	r2, r4
   d91ec:	462b      	mov	r3, r5
   d91ee:	f000 fedf 	bl	d9fb0 <__adddf3>
   d91f2:	460d      	mov	r5, r1
   d91f4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d91f6:	f001 fb69 	bl	da8cc <__aeabi_d2uiz>
   d91fa:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d91fc:	f001 f814 	bl	da228 <__aeabi_ui2d>
   d9200:	4602      	mov	r2, r0
   d9202:	460b      	mov	r3, r1
   d9204:	4620      	mov	r0, r4
   d9206:	4629      	mov	r1, r5
   d9208:	f000 fed0 	bl	d9fac <__aeabi_dsub>
        return printNumber(val, base) + t;
   d920c:	220a      	movs	r2, #10
   d920e:	4604      	mov	r4, r0
   d9210:	460d      	mov	r5, r1
   d9212:	4630      	mov	r0, r6
   d9214:	4641      	mov	r1, r8
   d9216:	f7ff ff66 	bl	d90e6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d921a:	4482      	add	sl, r0
  if (digits > 0) {
   d921c:	b127      	cbz	r7, d9228 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d921e:	4923      	ldr	r1, [pc, #140]	; (d92ac <_ZN5Print10printFloatEdh+0x188>)
   d9220:	4630      	mov	r0, r6
   d9222:	f7ff ff31 	bl	d9088 <_ZN5Print5writeEPKc>
    n += print(".");
   d9226:	4482      	add	sl, r0
    remainder *= 10.0;
   d9228:	f8df 9084 	ldr.w	r9, [pc, #132]	; d92b0 <_ZN5Print10printFloatEdh+0x18c>
   d922c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d9230:	3f01      	subs	r7, #1
   d9232:	b2ff      	uxtb	r7, r7
   d9234:	2fff      	cmp	r7, #255	; 0xff
   d9236:	d089      	beq.n	d914c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d9238:	4642      	mov	r2, r8
   d923a:	464b      	mov	r3, r9
   d923c:	4620      	mov	r0, r4
   d923e:	4629      	mov	r1, r5
   d9240:	f001 f86c 	bl	da31c <__aeabi_dmul>
   d9244:	4604      	mov	r4, r0
   d9246:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d9248:	f001 fb18 	bl	da87c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d924c:	f1b0 0b00 	subs.w	fp, r0, #0
   d9250:	da1a      	bge.n	d9288 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d9252:	212d      	movs	r1, #45	; 0x2d
   d9254:	4630      	mov	r0, r6
   d9256:	f7ff ff2d 	bl	d90b4 <_ZN5Print5printEc>
            val = -n;
   d925a:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d925e:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d9260:	220a      	movs	r2, #10
   d9262:	4630      	mov	r0, r6
   d9264:	9301      	str	r3, [sp, #4]
   d9266:	f7ff ff3e 	bl	d90e6 <_ZN5Print11printNumberEmh>
   d926a:	9b01      	ldr	r3, [sp, #4]
   d926c:	4418      	add	r0, r3
    n += print(toPrint);
   d926e:	4482      	add	sl, r0
    remainder -= toPrint;
   d9270:	4658      	mov	r0, fp
   d9272:	f000 ffe9 	bl	da248 <__aeabi_i2d>
   d9276:	4602      	mov	r2, r0
   d9278:	460b      	mov	r3, r1
   d927a:	4620      	mov	r0, r4
   d927c:	4629      	mov	r1, r5
   d927e:	f000 fe95 	bl	d9fac <__aeabi_dsub>
   d9282:	4604      	mov	r4, r0
   d9284:	460d      	mov	r5, r1
  while (digits-- > 0)
   d9286:	e7d3      	b.n	d9230 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d9288:	4659      	mov	r1, fp
        size_t t = 0;
   d928a:	2300      	movs	r3, #0
   d928c:	e7e8      	b.n	d9260 <_ZN5Print10printFloatEdh+0x13c>
   d928e:	bf00      	nop
   d9290:	000db6b4 	.word	0x000db6b4
   d9294:	7fefffff 	.word	0x7fefffff
   d9298:	000db6b8 	.word	0x000db6b8
   d929c:	41efffff 	.word	0x41efffff
   d92a0:	000db6bc 	.word	0x000db6bc
   d92a4:	c1efffff 	.word	0xc1efffff
   d92a8:	3fe00000 	.word	0x3fe00000
   d92ac:	000db6c0 	.word	0x000db6c0
   d92b0:	40240000 	.word	0x40240000

000d92b4 <_ZN5Print7printlnEdi>:
{
   d92b4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d92b6:	b2c9      	uxtb	r1, r1
{
   d92b8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d92ba:	f7ff ff33 	bl	d9124 <_ZN5Print10printFloatEdh>
   d92be:	4604      	mov	r4, r0
  n += println();
   d92c0:	4628      	mov	r0, r5
   d92c2:	f7ff fefa 	bl	d90ba <_ZN5Print7printlnEv>
}
   d92c6:	4420      	add	r0, r4
   d92c8:	bd38      	pop	{r3, r4, r5, pc}

000d92ca <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d92ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d92ce:	b086      	sub	sp, #24
   d92d0:	af00      	add	r7, sp, #0
   d92d2:	4605      	mov	r5, r0
   d92d4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d92d6:	1d38      	adds	r0, r7, #4
   d92d8:	2114      	movs	r1, #20
{
   d92da:	4614      	mov	r4, r2
    va_copy(args2, args);
   d92dc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d92de:	f7ff f82d 	bl	d833c <vsnprintf>

    if (n<bufsize)
   d92e2:	2813      	cmp	r0, #19
   d92e4:	d80e      	bhi.n	d9304 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d92e6:	1d39      	adds	r1, r7, #4
   d92e8:	4628      	mov	r0, r5
   d92ea:	f7ff fecd 	bl	d9088 <_ZN5Print5writeEPKc>
   d92ee:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d92f0:	b11e      	cbz	r6, d92fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d92f2:	4628      	mov	r0, r5
   d92f4:	f7ff fee1 	bl	d90ba <_ZN5Print7printlnEv>
   d92f8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d92fa:	4620      	mov	r0, r4
   d92fc:	3718      	adds	r7, #24
   d92fe:	46bd      	mov	sp, r7
   d9300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9304:	f100 0308 	add.w	r3, r0, #8
   d9308:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d930c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d930e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9312:	4622      	mov	r2, r4
   d9314:	1c41      	adds	r1, r0, #1
   d9316:	683b      	ldr	r3, [r7, #0]
   d9318:	4668      	mov	r0, sp
   d931a:	f7ff f80f 	bl	d833c <vsnprintf>
  return write(str);
   d931e:	4669      	mov	r1, sp
   d9320:	4628      	mov	r0, r5
   d9322:	f7ff feb1 	bl	d9088 <_ZN5Print5writeEPKc>
   d9326:	4604      	mov	r4, r0
   d9328:	46c5      	mov	sp, r8
   d932a:	e7e1      	b.n	d92f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d932c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d932c:	b510      	push	{r4, lr}
   d932e:	4604      	mov	r4, r0
   d9330:	f7fc fb24 	bl	d597c <_ZNSt14_Function_baseD1Ev>
   d9334:	4620      	mov	r0, r4
   d9336:	bd10      	pop	{r4, pc}

000d9338 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9338:	4803      	ldr	r0, [pc, #12]	; (d9348 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d933a:	4a04      	ldr	r2, [pc, #16]	; (d934c <_GLOBAL__sub_I_RGB+0x14>)
   d933c:	4904      	ldr	r1, [pc, #16]	; (d9350 <_GLOBAL__sub_I_RGB+0x18>)
   d933e:	2300      	movs	r3, #0
   d9340:	6083      	str	r3, [r0, #8]
   d9342:	f000 be21 	b.w	d9f88 <__aeabi_atexit>
   d9346:	bf00      	nop
   d9348:	2003e630 	.word	0x2003e630
   d934c:	2003e230 	.word	0x2003e230
   d9350:	000d932d 	.word	0x000d932d

000d9354 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9354:	2100      	movs	r1, #0
   d9356:	f7fe be07 	b.w	d7f68 <hal_spi_acquire>

000d935a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d935a:	2100      	movs	r1, #0
   d935c:	f7fe be0c 	b.w	d7f78 <hal_spi_release>

000d9360 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9360:	b510      	push	{r4, lr}
   d9362:	4604      	mov	r4, r0
   d9364:	4608      	mov	r0, r1
{
    _spi = spi;
   d9366:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9368:	f7fe fdde 	bl	d7f28 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d936c:	2300      	movs	r3, #0
   d936e:	6063      	str	r3, [r4, #4]
}
   d9370:	4620      	mov	r0, r4
   d9372:	bd10      	pop	{r4, pc}

000d9374 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d9374:	b513      	push	{r0, r1, r4, lr}
   d9376:	4604      	mov	r4, r0
    if (!lock())
   d9378:	7800      	ldrb	r0, [r0, #0]
{
   d937a:	9101      	str	r1, [sp, #4]
    if (!lock())
   d937c:	f7ff ffea 	bl	d9354 <_ZN8SPIClass4lockEv.isra.0>
   d9380:	9901      	ldr	r1, [sp, #4]
   d9382:	b940      	cbnz	r0, d9396 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d9384:	7820      	ldrb	r0, [r4, #0]
   d9386:	f7fe fdbf 	bl	d7f08 <hal_spi_begin>
        unlock();
   d938a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d938c:	b002      	add	sp, #8
   d938e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9392:	f7ff bfe2 	b.w	d935a <_ZN8SPIClass6unlockEv.isra.0>
}
   d9396:	b002      	add	sp, #8
   d9398:	bd10      	pop	{r4, pc}

000d939a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d939a:	7800      	ldrb	r0, [r0, #0]
   d939c:	f7ff bfdd 	b.w	d935a <_ZN8SPIClass6unlockEv.isra.0>

000d93a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d93a0:	0840      	lsrs	r0, r0, #1
{
   d93a2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d93a4:	6018      	str	r0, [r3, #0]
   d93a6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d93a8:	6818      	ldr	r0, [r3, #0]
   d93aa:	4288      	cmp	r0, r1
   d93ac:	b2e5      	uxtb	r5, r4
   d93ae:	d906      	bls.n	d93be <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d93b0:	3401      	adds	r4, #1
   d93b2:	2c08      	cmp	r4, #8
   d93b4:	d002      	beq.n	d93bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d93b6:	0840      	lsrs	r0, r0, #1
   d93b8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d93ba:	e7f5      	b.n	d93a8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d93bc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d93be:	4b02      	ldr	r3, [pc, #8]	; (d93c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d93c0:	5d5b      	ldrb	r3, [r3, r5]
   d93c2:	7013      	strb	r3, [r2, #0]
}
   d93c4:	bd30      	pop	{r4, r5, pc}
   d93c6:	bf00      	nop
   d93c8:	000db6c2 	.word	0x000db6c2

000d93cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d93cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d93d0:	4606      	mov	r6, r0
   d93d2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d93d4:	7800      	ldrb	r0, [r0, #0]
{
   d93d6:	460d      	mov	r5, r1
    CHECK(lock());
   d93d8:	f7ff ffbc 	bl	d9354 <_ZN8SPIClass4lockEv.isra.0>
   d93dc:	2800      	cmp	r0, #0
   d93de:	db1b      	blt.n	d9418 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d93e0:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d93e2:	2214      	movs	r2, #20
   d93e4:	2100      	movs	r1, #0
   d93e6:	a809      	add	r0, sp, #36	; 0x24
   d93e8:	f001 fb8a 	bl	dab00 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d93ec:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d93ee:	2200      	movs	r2, #0
   d93f0:	a909      	add	r1, sp, #36	; 0x24
   d93f2:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d93f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d93f8:	f7fe fda6 	bl	d7f48 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d93fc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9400:	b113      	cbz	r3, d9408 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9402:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d9406:	b154      	cbz	r4, d941e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9408:	2700      	movs	r7, #0
   d940a:	46b9      	mov	r9, r7
   d940c:	46b8      	mov	r8, r7
   d940e:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d9410:	792b      	ldrb	r3, [r5, #4]
   d9412:	b15c      	cbz	r4, d942c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9414:	b1c3      	cbz	r3, d9448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9416:	2000      	movs	r0, #0
}
   d9418:	b00f      	add	sp, #60	; 0x3c
   d941a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d941e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9422:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9426:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d942a:	e7f1      	b.n	d9410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d942c:	2b00      	cmp	r3, #0
   d942e:	d135      	bne.n	d949c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9430:	68ab      	ldr	r3, [r5, #8]
   d9432:	4543      	cmp	r3, r8
   d9434:	d108      	bne.n	d9448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9436:	f88d 9020 	strb.w	r9, [sp, #32]
   d943a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d943e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9442:	89ab      	ldrh	r3, [r5, #12]
   d9444:	429a      	cmp	r2, r3
   d9446:	d0e6      	beq.n	d9416 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9448:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d944a:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d944c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9450:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9452:	ab04      	add	r3, sp, #16
   d9454:	f10d 020f 	add.w	r2, sp, #15
   d9458:	f7ff ffa2 	bl	d93a0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d945c:	7929      	ldrb	r1, [r5, #4]
   d945e:	b984      	cbnz	r4, d9482 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9460:	b989      	cbnz	r1, d9486 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9462:	68ab      	ldr	r3, [r5, #8]
   d9464:	4543      	cmp	r3, r8
   d9466:	d30e      	bcc.n	d9486 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9468:	f88d 9020 	strb.w	r9, [sp, #32]
   d946c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9470:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9474:	89ab      	ldrh	r3, [r5, #12]
   d9476:	429a      	cmp	r2, r3
   d9478:	d105      	bne.n	d9486 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d947a:	9b04      	ldr	r3, [sp, #16]
   d947c:	4543      	cmp	r3, r8
   d947e:	d102      	bne.n	d9486 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9480:	e7c9      	b.n	d9416 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9482:	2900      	cmp	r1, #0
   d9484:	d1f9      	bne.n	d947a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9486:	2300      	movs	r3, #0
   d9488:	9301      	str	r3, [sp, #4]
   d948a:	7b6b      	ldrb	r3, [r5, #13]
   d948c:	9300      	str	r3, [sp, #0]
   d948e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9492:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9494:	7830      	ldrb	r0, [r6, #0]
   d9496:	f7fe fd5f 	bl	d7f58 <hal_spi_set_settings>
   d949a:	e7bc      	b.n	d9416 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d949c:	e9cd 4400 	strd	r4, r4, [sp]
   d94a0:	4623      	mov	r3, r4
   d94a2:	4622      	mov	r2, r4
   d94a4:	2101      	movs	r1, #1
   d94a6:	e7f5      	b.n	d9494 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d94a8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d94a8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d94aa:	7800      	ldrb	r0, [r0, #0]
   d94ac:	f7fe fd34 	bl	d7f18 <hal_spi_transfer>
}
   d94b0:	b2c0      	uxtb	r0, r0
   d94b2:	bd08      	pop	{r3, pc}

000d94b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d94b4:	b510      	push	{r4, lr}
   d94b6:	4604      	mov	r4, r0
{
	free(buffer);
   d94b8:	6800      	ldr	r0, [r0, #0]
   d94ba:	f7fe ff1f 	bl	d82fc <free>
}
   d94be:	4620      	mov	r0, r4
   d94c0:	bd10      	pop	{r4, pc}

000d94c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d94c2:	b510      	push	{r4, lr}
   d94c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d94c6:	6800      	ldr	r0, [r0, #0]
   d94c8:	b108      	cbz	r0, d94ce <_ZN6String10invalidateEv+0xc>
   d94ca:	f7fe ff17 	bl	d82fc <free>
	buffer = NULL;
   d94ce:	2300      	movs	r3, #0
	capacity = len = 0;
   d94d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d94d4:	6023      	str	r3, [r4, #0]
}
   d94d6:	bd10      	pop	{r4, pc}

000d94d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d94d8:	b538      	push	{r3, r4, r5, lr}
   d94da:	4604      	mov	r4, r0
   d94dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d94de:	6800      	ldr	r0, [r0, #0]
   d94e0:	3101      	adds	r1, #1
   d94e2:	f7fe ff13 	bl	d830c <realloc>
	if (newbuffer) {
   d94e6:	b110      	cbz	r0, d94ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d94e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d94ec:	2001      	movs	r0, #1
	}
	return 0;
}
   d94ee:	bd38      	pop	{r3, r4, r5, pc}

000d94f0 <_ZN6String7reserveEj>:
{
   d94f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d94f2:	6803      	ldr	r3, [r0, #0]
{
   d94f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d94f6:	b123      	cbz	r3, d9502 <_ZN6String7reserveEj+0x12>
   d94f8:	6843      	ldr	r3, [r0, #4]
   d94fa:	428b      	cmp	r3, r1
   d94fc:	d301      	bcc.n	d9502 <_ZN6String7reserveEj+0x12>
   d94fe:	2001      	movs	r0, #1
}
   d9500:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9502:	4620      	mov	r0, r4
   d9504:	f7ff ffe8 	bl	d94d8 <_ZN6String12changeBufferEj>
   d9508:	2800      	cmp	r0, #0
   d950a:	d0f9      	beq.n	d9500 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d950c:	68a3      	ldr	r3, [r4, #8]
   d950e:	2b00      	cmp	r3, #0
   d9510:	d1f5      	bne.n	d94fe <_ZN6String7reserveEj+0xe>
   d9512:	6822      	ldr	r2, [r4, #0]
   d9514:	7013      	strb	r3, [r2, #0]
   d9516:	e7f2      	b.n	d94fe <_ZN6String7reserveEj+0xe>

000d9518 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9518:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d951a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d951c:	4611      	mov	r1, r2
   d951e:	9201      	str	r2, [sp, #4]
{
   d9520:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9522:	f7ff ffe5 	bl	d94f0 <_ZN6String7reserveEj>
   d9526:	9a01      	ldr	r2, [sp, #4]
   d9528:	b928      	cbnz	r0, d9536 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d952a:	4620      	mov	r0, r4
   d952c:	f7ff ffc9 	bl	d94c2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9530:	4620      	mov	r0, r4
   d9532:	b003      	add	sp, #12
   d9534:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9536:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9538:	4629      	mov	r1, r5
   d953a:	6820      	ldr	r0, [r4, #0]
   d953c:	f001 fab8 	bl	daab0 <memcpy>
	buffer[len] = 0;
   d9540:	6822      	ldr	r2, [r4, #0]
   d9542:	68a3      	ldr	r3, [r4, #8]
   d9544:	2100      	movs	r1, #0
   d9546:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9548:	e7f2      	b.n	d9530 <_ZN6String4copyEPKcj+0x18>

000d954a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d954a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d954c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d954e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9552:	4604      	mov	r4, r0
	len = 0;
   d9554:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9556:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9558:	b141      	cbz	r1, d956c <_ZN6StringC1EPKc+0x22>
   d955a:	4608      	mov	r0, r1
   d955c:	9101      	str	r1, [sp, #4]
   d955e:	f001 fb2a 	bl	dabb6 <strlen>
   d9562:	9901      	ldr	r1, [sp, #4]
   d9564:	4602      	mov	r2, r0
   d9566:	4620      	mov	r0, r4
   d9568:	f7ff ffd6 	bl	d9518 <_ZN6String4copyEPKcj>
}
   d956c:	4620      	mov	r0, r4
   d956e:	b002      	add	sp, #8
   d9570:	bd10      	pop	{r4, pc}

000d9572 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9572:	4288      	cmp	r0, r1
{
   d9574:	b510      	push	{r4, lr}
   d9576:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9578:	d005      	beq.n	d9586 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d957a:	680b      	ldr	r3, [r1, #0]
   d957c:	b12b      	cbz	r3, d958a <_ZN6StringaSERKS_+0x18>
   d957e:	688a      	ldr	r2, [r1, #8]
   d9580:	4619      	mov	r1, r3
   d9582:	f7ff ffc9 	bl	d9518 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9586:	4620      	mov	r0, r4
   d9588:	bd10      	pop	{r4, pc}
	else invalidate();
   d958a:	f7ff ff9a 	bl	d94c2 <_ZN6String10invalidateEv>
   d958e:	e7fa      	b.n	d9586 <_ZN6StringaSERKS_+0x14>

000d9590 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9590:	b510      	push	{r4, lr}
	buffer = NULL;
   d9592:	2300      	movs	r3, #0
String::String(const String &value)
   d9594:	4604      	mov	r4, r0
	capacity = 0;
   d9596:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d959a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d959c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d959e:	f7ff ffe8 	bl	d9572 <_ZN6StringaSERKS_>
}
   d95a2:	4620      	mov	r0, r4
   d95a4:	bd10      	pop	{r4, pc}

000d95a6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d95a6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d95a8:	6882      	ldr	r2, [r0, #8]
   d95aa:	b93a      	cbnz	r2, d95bc <_ZNK6String6equalsEPKc+0x16>
   d95ac:	b121      	cbz	r1, d95b8 <_ZNK6String6equalsEPKc+0x12>
   d95ae:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d95b0:	fab0 f080 	clz	r0, r0
   d95b4:	0940      	lsrs	r0, r0, #5
   d95b6:	e000      	b.n	d95ba <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d95b8:	2001      	movs	r0, #1
}
   d95ba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d95bc:	6800      	ldr	r0, [r0, #0]
   d95be:	b909      	cbnz	r1, d95c4 <_ZNK6String6equalsEPKc+0x1e>
   d95c0:	7800      	ldrb	r0, [r0, #0]
   d95c2:	e7f5      	b.n	d95b0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d95c4:	f001 fac8 	bl	dab58 <strcmp>
   d95c8:	e7f2      	b.n	d95b0 <_ZNK6String6equalsEPKc+0xa>

000d95ca <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d95ca:	b558      	push	{r3, r4, r6, lr}
   d95cc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d95ce:	b12a      	cbz	r2, d95dc <_ZNK6String8getBytesEPhjj+0x12>
   d95d0:	b121      	cbz	r1, d95dc <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d95d2:	6884      	ldr	r4, [r0, #8]
   d95d4:	429c      	cmp	r4, r3
   d95d6:	d802      	bhi.n	d95de <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d95d8:	2300      	movs	r3, #0
   d95da:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d95dc:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d95de:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d95e0:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d95e2:	6801      	ldr	r1, [r0, #0]
   d95e4:	4294      	cmp	r4, r2
   d95e6:	bf28      	it	cs
   d95e8:	4614      	movcs	r4, r2
   d95ea:	4419      	add	r1, r3
   d95ec:	4622      	mov	r2, r4
   d95ee:	4630      	mov	r0, r6
   d95f0:	f001 fae9 	bl	dabc6 <strncpy>
	buf[n] = 0;
   d95f4:	2300      	movs	r3, #0
   d95f6:	5533      	strb	r3, [r6, r4]
   d95f8:	e7f0      	b.n	d95dc <_ZNK6String8getBytesEPhjj+0x12>

000d95fa <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d95fa:	b507      	push	{r0, r1, r2, lr}
   d95fc:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d95fe:	2100      	movs	r1, #0
{
   d9600:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d9602:	9100      	str	r1, [sp, #0]
   d9604:	2001      	movs	r0, #1
   d9606:	218c      	movs	r1, #140	; 0x8c
   d9608:	f7fe fdae 	bl	d8168 <system_reset>
}
   d960c:	b003      	add	sp, #12
   d960e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9612 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d9612:	4601      	mov	r1, r0
    reset(0, flags);
   d9614:	2000      	movs	r0, #0
   d9616:	f7ff bff0 	b.w	d95fa <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d961a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d961a:	2000      	movs	r0, #0
   d961c:	f7ff bff9 	b.w	d9612 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000d9620 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d9620:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9622:	4b09      	ldr	r3, [pc, #36]	; (d9648 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9624:	4c09      	ldr	r4, [pc, #36]	; (d964c <_GLOBAL__sub_I_System+0x2c>)
   d9626:	2202      	movs	r2, #2
   d9628:	2000      	movs	r0, #0
   d962a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d962c:	4b08      	ldr	r3, [pc, #32]	; (d9650 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d962e:	6020      	str	r0, [r4, #0]
   d9630:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d9632:	71a0      	strb	r0, [r4, #6]
   d9634:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9636:	f7fe fd41 	bl	d80bc <set_system_mode>
SystemClass System;
   d963a:	4620      	mov	r0, r4
   d963c:	4a05      	ldr	r2, [pc, #20]	; (d9654 <_GLOBAL__sub_I_System+0x34>)
   d963e:	4906      	ldr	r1, [pc, #24]	; (d9658 <_GLOBAL__sub_I_System+0x38>)
   d9640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d9644:	f000 bca0 	b.w	d9f88 <__aeabi_atexit>
   d9648:	2003e64c 	.word	0x2003e64c
   d964c:	2003e640 	.word	0x2003e640
   d9650:	ffff0000 	.word	0xffff0000
   d9654:	2003e230 	.word	0x2003e230
   d9658:	000d41a5 	.word	0x000d41a5

000d965c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9660:	4a15      	ldr	r2, [pc, #84]	; (d96b8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9662:	f8df 8060 	ldr.w	r8, [pc, #96]	; d96c4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d9666:	e9d2 3200 	ldrd	r3, r2, [r2]
   d966a:	18c0      	adds	r0, r0, r3
   d966c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9670:	4a12      	ldr	r2, [pc, #72]	; (d96bc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9672:	e9d2 3200 	ldrd	r3, r2, [r2]
   d9676:	18c6      	adds	r6, r0, r3
   d9678:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d967c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9680:	42bb      	cmp	r3, r7
   d9682:	bf08      	it	eq
   d9684:	42b2      	cmpeq	r2, r6
{
   d9686:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d9688:	d013      	beq.n	d96b2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d968a:	a903      	add	r1, sp, #12
   d968c:	4668      	mov	r0, sp
   d968e:	e9cd 6700 	strd	r6, r7, [sp]
   d9692:	f7fe fe7b 	bl	d838c <localtime_r>
	calendar_time.tm_year += 1900;
   d9696:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9698:	4d09      	ldr	r5, [pc, #36]	; (d96c0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d969a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d969e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d96a0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d96a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d96a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d96a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d96aa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96ae:	6823      	ldr	r3, [r4, #0]
   d96b0:	602b      	str	r3, [r5, #0]
    }
}
   d96b2:	b00c      	add	sp, #48	; 0x30
   d96b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d96b8:	2003e688 	.word	0x2003e688
   d96bc:	2003e680 	.word	0x2003e680
   d96c0:	2003e658 	.word	0x2003e658
   d96c4:	2003e690 	.word	0x2003e690

000d96c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d96c8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96ca:	2000      	movs	r0, #0
   d96cc:	f7fe fd9e 	bl	d820c <spark_sync_time_pending>
   d96d0:	b128      	cbz	r0, d96de <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d96d2:	f7fe fd73 	bl	d81bc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96d6:	f080 0001 	eor.w	r0, r0, #1
   d96da:	b2c0      	uxtb	r0, r0
    }
   d96dc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96de:	2001      	movs	r0, #1
   d96e0:	e7fc      	b.n	d96dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d96e4 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   d96e4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d96e6:	f7ff ffb9 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   d96ea:	4b02      	ldr	r3, [pc, #8]	; (d96f4 <_ZN9TimeClass7weekdayEx+0x10>)
   d96ec:	6998      	ldr	r0, [r3, #24]
}
   d96ee:	3001      	adds	r0, #1
   d96f0:	bd08      	pop	{r3, pc}
   d96f2:	bf00      	nop
   d96f4:	2003e658 	.word	0x2003e658

000d96f8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d96f8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d96fa:	f7ff ffaf 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d96fe:	4b02      	ldr	r3, [pc, #8]	; (d9708 <_ZN9TimeClass5monthEx+0x10>)
   d9700:	6918      	ldr	r0, [r3, #16]
}
   d9702:	3001      	adds	r0, #1
   d9704:	bd08      	pop	{r3, pc}
   d9706:	bf00      	nop
   d9708:	2003e658 	.word	0x2003e658

000d970c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d970c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d9710:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9718:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d971a:	d411      	bmi.n	d9740 <_ZN9TimeClass4zoneEf+0x34>
   d971c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d9720:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9728:	dc0a      	bgt.n	d9740 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d972a:	eddf 7a06 	vldr	s15, [pc, #24]	; d9744 <_ZN9TimeClass4zoneEf+0x38>
   d972e:	ee60 7a27 	vmul.f32	s15, s0, s15
   d9732:	ee17 0a90 	vmov	r0, s15
   d9736:	f001 f939 	bl	da9ac <__aeabi_f2lz>
   d973a:	4b03      	ldr	r3, [pc, #12]	; (d9748 <_ZN9TimeClass4zoneEf+0x3c>)
   d973c:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9740:	bd08      	pop	{r3, pc}
   d9742:	bf00      	nop
   d9744:	45610000 	.word	0x45610000
   d9748:	2003e688 	.word	0x2003e688

000d974c <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   d974c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d9750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d9754:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   d9756:	d411      	bmi.n	d977c <_ZN9TimeClass12setDSTOffsetEf+0x30>
   d9758:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d975c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d9760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d9764:	dc0a      	bgt.n	d977c <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   d9766:	eddf 7a06 	vldr	s15, [pc, #24]	; d9780 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   d976a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d976e:	ee17 0a90 	vmov	r0, s15
   d9772:	f001 f91b 	bl	da9ac <__aeabi_f2lz>
   d9776:	4b03      	ldr	r3, [pc, #12]	; (d9784 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   d9778:	e9c3 0100 	strd	r0, r1, [r3]
}
   d977c:	bd08      	pop	{r3, pc}
   d977e:	bf00      	nop
   d9780:	45610000 	.word	0x45610000
   d9784:	2003e1c0 	.word	0x2003e1c0

000d9788 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   d9788:	4b03      	ldr	r3, [pc, #12]	; (d9798 <_ZN9TimeClass8beginDSTEv+0x10>)
   d978a:	e9d3 0100 	ldrd	r0, r1, [r3]
   d978e:	4b03      	ldr	r3, [pc, #12]	; (d979c <_ZN9TimeClass8beginDSTEv+0x14>)
   d9790:	e9c3 0100 	strd	r0, r1, [r3]
}
   d9794:	4770      	bx	lr
   d9796:	bf00      	nop
   d9798:	2003e1c0 	.word	0x2003e1c0
   d979c:	2003e680 	.word	0x2003e680

000d97a0 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   d97a0:	4b02      	ldr	r3, [pc, #8]	; (d97ac <_ZN9TimeClass6endDSTEv+0xc>)
   d97a2:	2000      	movs	r0, #0
   d97a4:	2100      	movs	r1, #0
   d97a6:	e9c3 0100 	strd	r0, r1, [r3]
}
   d97aa:	4770      	bx	lr
   d97ac:	2003e680 	.word	0x2003e680

000d97b0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d97b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d97b2:	4602      	mov	r2, r0
   d97b4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d97b6:	4668      	mov	r0, sp
    struct timeval tv = {
   d97b8:	2100      	movs	r1, #0
    };
   d97ba:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d97be:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d97c2:	f7fe fad1 	bl	d7d68 <hal_rtc_set_time>
   d97c6:	4602      	mov	r2, r0
   d97c8:	b910      	cbnz	r0, d97d0 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d97ca:	4601      	mov	r1, r0
   d97cc:	f7fe fca6 	bl	d811c <system_notify_time_changed>
    }
}
   d97d0:	b005      	add	sp, #20
   d97d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d97d8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d97d8:	b530      	push	{r4, r5, lr}
   d97da:	4604      	mov	r4, r0
    t += time_zone_cache;
   d97dc:	4818      	ldr	r0, [pc, #96]	; (d9840 <_ZN9TimeClass7timeStrEx+0x68>)
   d97de:	e9d0 1000 	ldrd	r1, r0, [r0]
   d97e2:	1852      	adds	r2, r2, r1
   d97e4:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d97e8:	4816      	ldr	r0, [pc, #88]	; (d9844 <_ZN9TimeClass7timeStrEx+0x6c>)
   d97ea:	e9d0 1000 	ldrd	r1, r0, [r0]
   d97ee:	1852      	adds	r2, r2, r1
{
   d97f0:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d97f2:	eb40 0303 	adc.w	r3, r0, r3
   d97f6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d97fa:	2224      	movs	r2, #36	; 0x24
   d97fc:	eb0d 0002 	add.w	r0, sp, r2
   d9800:	2100      	movs	r1, #0
   d9802:	f001 f97d 	bl	dab00 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9806:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9808:	a909      	add	r1, sp, #36	; 0x24
   d980a:	4668      	mov	r0, sp
   d980c:	f7fe fdbe 	bl	d838c <localtime_r>
    char ascstr[26] = {};
   d9810:	2216      	movs	r2, #22
   d9812:	4629      	mov	r1, r5
   d9814:	a803      	add	r0, sp, #12
   d9816:	9502      	str	r5, [sp, #8]
   d9818:	f001 f972 	bl	dab00 <memset>
    asctime_r(&calendar_time, ascstr);
   d981c:	a902      	add	r1, sp, #8
   d981e:	a809      	add	r0, sp, #36	; 0x24
   d9820:	f001 f8f8 	bl	daa14 <asctime_r>
    int len = strlen(ascstr);
   d9824:	a802      	add	r0, sp, #8
   d9826:	f001 f9c6 	bl	dabb6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d982a:	ab12      	add	r3, sp, #72	; 0x48
   d982c:	4418      	add	r0, r3
    return String(ascstr);
   d982e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9830:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9834:	4620      	mov	r0, r4
   d9836:	f7ff fe88 	bl	d954a <_ZN6StringC1EPKc>
}
   d983a:	4620      	mov	r0, r4
   d983c:	b013      	add	sp, #76	; 0x4c
   d983e:	bd30      	pop	{r4, r5, pc}
   d9840:	2003e688 	.word	0x2003e688
   d9844:	2003e680 	.word	0x2003e680

000d9848 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d984c:	b0a5      	sub	sp, #148	; 0x94
   d984e:	4607      	mov	r7, r0
   d9850:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9852:	a814      	add	r0, sp, #80	; 0x50
{
   d9854:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9856:	223f      	movs	r2, #63	; 0x3f
{
   d9858:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d985a:	f001 f9b4 	bl	dabc6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d985e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9860:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9862:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9866:	f001 f9a6 	bl	dabb6 <strlen>
   d986a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d986c:	bb5d      	cbnz	r5, d98c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d986e:	492a      	ldr	r1, [pc, #168]	; (d9918 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d9870:	a803      	add	r0, sp, #12
   d9872:	f001 f97b 	bl	dab6c <strcpy>
   d9876:	ae14      	add	r6, sp, #80	; 0x50
{
   d9878:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d987a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d987e:	45ab      	cmp	fp, r5
   d9880:	d936      	bls.n	d98f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9882:	46b1      	mov	r9, r6
   d9884:	f105 0a01 	add.w	sl, r5, #1
   d9888:	f819 3b01 	ldrb.w	r3, [r9], #1
   d988c:	2b25      	cmp	r3, #37	; 0x25
   d988e:	d117      	bne.n	d98c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9890:	7873      	ldrb	r3, [r6, #1]
   d9892:	2b7a      	cmp	r3, #122	; 0x7a
   d9894:	d114      	bne.n	d98c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9896:	a803      	add	r0, sp, #12
   d9898:	f001 f98d 	bl	dabb6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d989c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d989e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d98a0:	1828      	adds	r0, r5, r0
   d98a2:	4418      	add	r0, r3
   d98a4:	ebab 0205 	sub.w	r2, fp, r5
   d98a8:	1cb1      	adds	r1, r6, #2
   d98aa:	f001 f901 	bl	daab0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d98ae:	4622      	mov	r2, r4
   d98b0:	a903      	add	r1, sp, #12
   d98b2:	4630      	mov	r0, r6
   d98b4:	f001 f8fc 	bl	daab0 <memcpy>
            len = strlen(format_str);
   d98b8:	a814      	add	r0, sp, #80	; 0x50
   d98ba:	f001 f97c 	bl	dabb6 <strlen>
   d98be:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d98c0:	464e      	mov	r6, r9
   d98c2:	4655      	mov	r5, sl
   d98c4:	e7d9      	b.n	d987a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d98c6:	213c      	movs	r1, #60	; 0x3c
   d98c8:	fb95 f3f1 	sdiv	r3, r5, r1
   d98cc:	2b00      	cmp	r3, #0
   d98ce:	bfb8      	it	lt
   d98d0:	425b      	neglt	r3, r3
   d98d2:	fbb3 f2f1 	udiv	r2, r3, r1
   d98d6:	fb01 3312 	mls	r3, r1, r2, r3
   d98da:	9300      	str	r3, [sp, #0]
   d98dc:	4a0f      	ldr	r2, [pc, #60]	; (d991c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d98de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d98e2:	2110      	movs	r1, #16
   d98e4:	a803      	add	r0, sp, #12
   d98e6:	fb95 f3f3 	sdiv	r3, r5, r3
   d98ea:	f7fe fd1f 	bl	d832c <snprintf>
   d98ee:	e7c2      	b.n	d9876 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d98f0:	2100      	movs	r1, #0
   d98f2:	222e      	movs	r2, #46	; 0x2e
   d98f4:	a808      	add	r0, sp, #32
   d98f6:	9107      	str	r1, [sp, #28]
   d98f8:	f001 f902 	bl	dab00 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d98fc:	4643      	mov	r3, r8
   d98fe:	aa14      	add	r2, sp, #80	; 0x50
   d9900:	2132      	movs	r1, #50	; 0x32
   d9902:	a807      	add	r0, sp, #28
   d9904:	f7fe fd3a 	bl	d837c <strftime>
    return String(buf);
   d9908:	a907      	add	r1, sp, #28
   d990a:	4638      	mov	r0, r7
   d990c:	f7ff fe1d 	bl	d954a <_ZN6StringC1EPKc>
}
   d9910:	4638      	mov	r0, r7
   d9912:	b025      	add	sp, #148	; 0x94
   d9914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9918:	000db6ca 	.word	0x000db6ca
   d991c:	000db6cc 	.word	0x000db6cc

000d9920 <_ZN9TimeClass6formatExPKc>:
{
   d9920:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9922:	b08d      	sub	sp, #52	; 0x34
   d9924:	e9cd 2300 	strd	r2, r3, [sp]
   d9928:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d992a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d992c:	b915      	cbnz	r5, d9934 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d992e:	4b19      	ldr	r3, [pc, #100]	; (d9994 <_ZN9TimeClass6formatExPKc+0x74>)
   d9930:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9932:	b12d      	cbz	r5, d9940 <_ZN9TimeClass6formatExPKc+0x20>
   d9934:	4b18      	ldr	r3, [pc, #96]	; (d9998 <_ZN9TimeClass6formatExPKc+0x78>)
   d9936:	4628      	mov	r0, r5
   d9938:	6819      	ldr	r1, [r3, #0]
   d993a:	f001 f90d 	bl	dab58 <strcmp>
   d993e:	b938      	cbnz	r0, d9950 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9940:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9944:	4620      	mov	r0, r4
   d9946:	f7ff ff47 	bl	d97d8 <_ZN9TimeClass7timeStrEx>
}
   d994a:	4620      	mov	r0, r4
   d994c:	b00d      	add	sp, #52	; 0x34
   d994e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9950:	4e12      	ldr	r6, [pc, #72]	; (d999c <_ZN9TimeClass6formatExPKc+0x7c>)
   d9952:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9954:	4f12      	ldr	r7, [pc, #72]	; (d99a0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9956:	e9d6 3200 	ldrd	r3, r2, [r6]
   d995a:	185b      	adds	r3, r3, r1
   d995c:	9901      	ldr	r1, [sp, #4]
   d995e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9962:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9966:	181b      	adds	r3, r3, r0
   d9968:	eb41 0202 	adc.w	r2, r1, r2
   d996c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9970:	2100      	movs	r1, #0
   d9972:	2224      	movs	r2, #36	; 0x24
   d9974:	a803      	add	r0, sp, #12
   d9976:	f001 f8c3 	bl	dab00 <memset>
    localtime_r(&t, &calendar_time);
   d997a:	a903      	add	r1, sp, #12
   d997c:	4668      	mov	r0, sp
   d997e:	f7fe fd05 	bl	d838c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9982:	6832      	ldr	r2, [r6, #0]
   d9984:	683b      	ldr	r3, [r7, #0]
   d9986:	a903      	add	r1, sp, #12
   d9988:	4413      	add	r3, r2
   d998a:	4620      	mov	r0, r4
   d998c:	462a      	mov	r2, r5
   d998e:	f7ff ff5b 	bl	d9848 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9992:	e7da      	b.n	d994a <_ZN9TimeClass6formatExPKc+0x2a>
   d9994:	2003e654 	.word	0x2003e654
   d9998:	2003e1b8 	.word	0x2003e1b8
   d999c:	2003e688 	.word	0x2003e688
   d99a0:	2003e680 	.word	0x2003e680

000d99a4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d99a4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d99a6:	2000      	movs	r0, #0
   d99a8:	f7fe f9c6 	bl	d7d38 <hal_rtc_time_is_valid>
    if (rtcstate)
   d99ac:	4604      	mov	r4, r0
   d99ae:	b9a0      	cbnz	r0, d99da <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d99b0:	f7fe fb7c 	bl	d80ac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d99b4:	2801      	cmp	r0, #1
   d99b6:	d110      	bne.n	d99da <_ZN9TimeClass7isValidEv+0x36>
   d99b8:	4620      	mov	r0, r4
   d99ba:	f7fe fba7 	bl	d810c <system_thread_get_state>
   d99be:	b960      	cbnz	r0, d99da <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d99c0:	f7ff fe82 	bl	d96c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d99c4:	b910      	cbnz	r0, d99cc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d99c6:	f7fe fbe9 	bl	d819c <spark_process>
        while (_while() && !_condition()) {
   d99ca:	e7f9      	b.n	d99c0 <_ZN9TimeClass7isValidEv+0x1c>
   d99cc:	f7ff fe7c 	bl	d96c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d99d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d99d4:	2000      	movs	r0, #0
   d99d6:	f7fe b9af 	b.w	d7d38 <hal_rtc_time_is_valid>
}
   d99da:	4620      	mov	r0, r4
   d99dc:	bd10      	pop	{r4, pc}

000d99de <_ZN9TimeClass3nowEv>:
{
   d99de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d99e0:	f7ff ffe0 	bl	d99a4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d99e4:	2210      	movs	r2, #16
   d99e6:	2100      	movs	r1, #0
   d99e8:	4668      	mov	r0, sp
   d99ea:	f001 f889 	bl	dab00 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d99ee:	2100      	movs	r1, #0
   d99f0:	4668      	mov	r0, sp
   d99f2:	f7fe f9b1 	bl	d7d58 <hal_rtc_get_time>
}
   d99f6:	9800      	ldr	r0, [sp, #0]
   d99f8:	b005      	add	sp, #20
   d99fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9a00 <_ZN9TimeClass4hourEv>:
{
   d9a00:	b508      	push	{r3, lr}
	return hour(now());
   d9a02:	f7ff ffec 	bl	d99de <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a06:	17c1      	asrs	r1, r0, #31
   d9a08:	f7ff fe28 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
}
   d9a0c:	4b01      	ldr	r3, [pc, #4]	; (d9a14 <_ZN9TimeClass4hourEv+0x14>)
   d9a0e:	6898      	ldr	r0, [r3, #8]
   d9a10:	bd08      	pop	{r3, pc}
   d9a12:	bf00      	nop
   d9a14:	2003e658 	.word	0x2003e658

000d9a18 <_ZN9TimeClass6minuteEv>:
{
   d9a18:	b508      	push	{r3, lr}
	return minute(now());
   d9a1a:	f7ff ffe0 	bl	d99de <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a1e:	17c1      	asrs	r1, r0, #31
   d9a20:	f7ff fe1c 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
}
   d9a24:	4b01      	ldr	r3, [pc, #4]	; (d9a2c <_ZN9TimeClass6minuteEv+0x14>)
   d9a26:	6858      	ldr	r0, [r3, #4]
   d9a28:	bd08      	pop	{r3, pc}
   d9a2a:	bf00      	nop
   d9a2c:	2003e658 	.word	0x2003e658

000d9a30 <_ZN9TimeClass3dayEv>:
{
   d9a30:	b508      	push	{r3, lr}
	return day(now());
   d9a32:	f7ff ffd4 	bl	d99de <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a36:	17c1      	asrs	r1, r0, #31
   d9a38:	f7ff fe10 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
}
   d9a3c:	4b01      	ldr	r3, [pc, #4]	; (d9a44 <_ZN9TimeClass3dayEv+0x14>)
   d9a3e:	68d8      	ldr	r0, [r3, #12]
   d9a40:	bd08      	pop	{r3, pc}
   d9a42:	bf00      	nop
   d9a44:	2003e658 	.word	0x2003e658

000d9a48 <_ZN9TimeClass7weekdayEv>:
{
   d9a48:	b508      	push	{r3, lr}
	return weekday(now());
   d9a4a:	f7ff ffc8 	bl	d99de <_ZN9TimeClass3nowEv>
}
   d9a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   d9a52:	17c1      	asrs	r1, r0, #31
   d9a54:	f7ff be46 	b.w	d96e4 <_ZN9TimeClass7weekdayEx>

000d9a58 <_ZN9TimeClass5monthEv>:
{
   d9a58:	b508      	push	{r3, lr}
	return month(now());
   d9a5a:	f7ff ffc0 	bl	d99de <_ZN9TimeClass3nowEv>
}
   d9a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9a62:	17c1      	asrs	r1, r0, #31
   d9a64:	f7ff be48 	b.w	d96f8 <_ZN9TimeClass5monthEx>

000d9a68 <_ZN9TimeClass4yearEv>:
{
   d9a68:	b508      	push	{r3, lr}
	return year(now());
   d9a6a:	f7ff ffb8 	bl	d99de <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9a6e:	17c1      	asrs	r1, r0, #31
   d9a70:	f7ff fdf4 	bl	d965c <_ZL22Refresh_UnixTime_Cachex>
}
   d9a74:	4b01      	ldr	r3, [pc, #4]	; (d9a7c <_ZN9TimeClass4yearEv+0x14>)
   d9a76:	6958      	ldr	r0, [r3, #20]
   d9a78:	bd08      	pop	{r3, pc}
   d9a7a:	bf00      	nop
   d9a7c:	2003e658 	.word	0x2003e658

000d9a80 <_ZN9TimeClass5localEv>:
{
   d9a80:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   d9a82:	f7ff ffac 	bl	d99de <_ZN9TimeClass3nowEv>
   d9a86:	4b03      	ldr	r3, [pc, #12]	; (d9a94 <_ZN9TimeClass5localEv+0x14>)
   d9a88:	4a03      	ldr	r2, [pc, #12]	; (d9a98 <_ZN9TimeClass5localEv+0x18>)
   d9a8a:	681b      	ldr	r3, [r3, #0]
   d9a8c:	6812      	ldr	r2, [r2, #0]
   d9a8e:	4413      	add	r3, r2
}
   d9a90:	4418      	add	r0, r3
   d9a92:	bd08      	pop	{r3, pc}
   d9a94:	2003e688 	.word	0x2003e688
   d9a98:	2003e680 	.word	0x2003e680

000d9a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9a9c:	4b02      	ldr	r3, [pc, #8]	; (d9aa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9a9e:	681a      	ldr	r2, [r3, #0]
   d9aa0:	4b02      	ldr	r3, [pc, #8]	; (d9aac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9aa2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9aa4:	4770      	bx	lr
   d9aa6:	bf00      	nop
   d9aa8:	2003e1b8 	.word	0x2003e1b8
   d9aac:	2003e654 	.word	0x2003e654

000d9ab0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9ab0:	4770      	bx	lr

000d9ab2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ab2:	7441      	strb	r1, [r0, #17]
}
   d9ab4:	4770      	bx	lr

000d9ab6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9ab6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9ab8:	7c00      	ldrb	r0, [r0, #16]
   d9aba:	f7fe fa9d 	bl	d7ff8 <hal_usart_available_data_for_write>
}
   d9abe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ac2:	bd08      	pop	{r3, pc}

000d9ac4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9ac4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9ac6:	7c00      	ldrb	r0, [r0, #16]
   d9ac8:	f7fe fa6e 	bl	d7fa8 <hal_usart_available>
}
   d9acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ad0:	bd08      	pop	{r3, pc}

000d9ad2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9ad2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9ad4:	7c00      	ldrb	r0, [r0, #16]
   d9ad6:	f7fe fa77 	bl	d7fc8 <hal_usart_peek>
}
   d9ada:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ade:	bd08      	pop	{r3, pc}

000d9ae0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9ae0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9ae2:	7c00      	ldrb	r0, [r0, #16]
   d9ae4:	f7fe fa68 	bl	d7fb8 <hal_usart_read>
}
   d9ae8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9aec:	bd08      	pop	{r3, pc}

000d9aee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d9aee:	7c00      	ldrb	r0, [r0, #16]
   d9af0:	f7fe ba72 	b.w	d7fd8 <hal_usart_flush>

000d9af4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9af6:	7c45      	ldrb	r5, [r0, #17]
{
   d9af8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9afa:	b12d      	cbz	r5, d9b08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d9afc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9afe:	b003      	add	sp, #12
   d9b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9b04:	f7fe ba48 	b.w	d7f98 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9b08:	7c00      	ldrb	r0, [r0, #16]
   d9b0a:	9101      	str	r1, [sp, #4]
   d9b0c:	f7fe fa74 	bl	d7ff8 <hal_usart_available_data_for_write>
   d9b10:	2800      	cmp	r0, #0
   d9b12:	9901      	ldr	r1, [sp, #4]
   d9b14:	dcf2      	bgt.n	d9afc <_ZN11USARTSerial5writeEh+0x8>
}
   d9b16:	4628      	mov	r0, r5
   d9b18:	b003      	add	sp, #12
   d9b1a:	bd30      	pop	{r4, r5, pc}

000d9b1c <_ZN11USARTSerialD0Ev>:
   d9b1c:	b510      	push	{r4, lr}
   d9b1e:	2114      	movs	r1, #20
   d9b20:	4604      	mov	r4, r0
   d9b22:	f000 fa36 	bl	d9f92 <_ZdlPvj>
   d9b26:	4620      	mov	r0, r4
   d9b28:	bd10      	pop	{r4, pc}
	...

000d9b2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9b2c:	b510      	push	{r4, lr}
   d9b2e:	f04f 0c00 	mov.w	ip, #0
   d9b32:	4604      	mov	r4, r0
   d9b34:	4608      	mov	r0, r1
   d9b36:	4611      	mov	r1, r2
   d9b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9b3c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9b40:	4a04      	ldr	r2, [pc, #16]	; (d9b54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9b42:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9b44:	2201      	movs	r2, #1
  _serial = serial;
   d9b46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9b48:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9b4a:	461a      	mov	r2, r3
   d9b4c:	f7fe fa1c 	bl	d7f88 <hal_usart_init>
}
   d9b50:	4620      	mov	r0, r4
   d9b52:	bd10      	pop	{r4, pc}
   d9b54:	000db6fc 	.word	0x000db6fc

000d9b58 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9b58:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9b5a:	4c0e      	ldr	r4, [pc, #56]	; (d9b94 <_Z22__fetch_global_Serial1v+0x3c>)
   d9b5c:	7821      	ldrb	r1, [r4, #0]
   d9b5e:	f3bf 8f5b 	dmb	ish
   d9b62:	f011 0101 	ands.w	r1, r1, #1
   d9b66:	d112      	bne.n	d9b8e <_Z22__fetch_global_Serial1v+0x36>
   d9b68:	4620      	mov	r0, r4
   d9b6a:	9101      	str	r1, [sp, #4]
   d9b6c:	f7fa faa4 	bl	d40b8 <__cxa_guard_acquire>
   d9b70:	9901      	ldr	r1, [sp, #4]
   d9b72:	b160      	cbz	r0, d9b8e <_Z22__fetch_global_Serial1v+0x36>
   d9b74:	4a08      	ldr	r2, [pc, #32]	; (d9b98 <_Z22__fetch_global_Serial1v+0x40>)
   d9b76:	4b09      	ldr	r3, [pc, #36]	; (d9b9c <_Z22__fetch_global_Serial1v+0x44>)
   d9b78:	4809      	ldr	r0, [pc, #36]	; (d9ba0 <_Z22__fetch_global_Serial1v+0x48>)
   d9b7a:	f7ff ffd7 	bl	d9b2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9b7e:	4620      	mov	r0, r4
   d9b80:	f7fa fa9f 	bl	d40c2 <__cxa_guard_release>
   d9b84:	4a07      	ldr	r2, [pc, #28]	; (d9ba4 <_Z22__fetch_global_Serial1v+0x4c>)
   d9b86:	4908      	ldr	r1, [pc, #32]	; (d9ba8 <_Z22__fetch_global_Serial1v+0x50>)
   d9b88:	4805      	ldr	r0, [pc, #20]	; (d9ba0 <_Z22__fetch_global_Serial1v+0x48>)
   d9b8a:	f000 f9fd 	bl	d9f88 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9b8e:	4804      	ldr	r0, [pc, #16]	; (d9ba0 <_Z22__fetch_global_Serial1v+0x48>)
   d9b90:	b002      	add	sp, #8
   d9b92:	bd10      	pop	{r4, pc}
   d9b94:	2003e698 	.word	0x2003e698
   d9b98:	2003e69c 	.word	0x2003e69c
   d9b9c:	2003e720 	.word	0x2003e720
   d9ba0:	2003e7a4 	.word	0x2003e7a4
   d9ba4:	2003e230 	.word	0x2003e230
   d9ba8:	000d9ab1 	.word	0x000d9ab1

000d9bac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9bac:	7441      	strb	r1, [r0, #17]
}
   d9bae:	4770      	bx	lr

000d9bb0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9bb0:	4770      	bx	lr

000d9bb2 <_ZN9USBSerial4readEv>:
{
   d9bb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9bb4:	2100      	movs	r1, #0
   d9bb6:	7c00      	ldrb	r0, [r0, #16]
   d9bb8:	f7fe fa46 	bl	d8048 <HAL_USB_USART_Receive_Data>
}
   d9bbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9bc0:	bd08      	pop	{r3, pc}

000d9bc2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9bc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9bc4:	2101      	movs	r1, #1
   d9bc6:	7c00      	ldrb	r0, [r0, #16]
   d9bc8:	f7fe fa3e 	bl	d8048 <HAL_USB_USART_Receive_Data>
}
   d9bcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9bd0:	bd08      	pop	{r3, pc}

000d9bd2 <_ZN9USBSerial17availableForWriteEv>:
{
   d9bd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9bd4:	7c00      	ldrb	r0, [r0, #16]
   d9bd6:	f7fe fa2f 	bl	d8038 <HAL_USB_USART_Available_Data_For_Write>
}
   d9bda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9bde:	bd08      	pop	{r3, pc}

000d9be0 <_ZN9USBSerial9availableEv>:
{
   d9be0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9be2:	7c00      	ldrb	r0, [r0, #16]
   d9be4:	f7fe fa20 	bl	d8028 <HAL_USB_USART_Available_Data>
}
   d9be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9bec:	bd08      	pop	{r3, pc}

000d9bee <_ZN9USBSerial5writeEh>:
{
   d9bee:	b513      	push	{r0, r1, r4, lr}
   d9bf0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9bf2:	7c00      	ldrb	r0, [r0, #16]
{
   d9bf4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9bf6:	f7fe fa1f 	bl	d8038 <HAL_USB_USART_Available_Data_For_Write>
   d9bfa:	2800      	cmp	r0, #0
   d9bfc:	9901      	ldr	r1, [sp, #4]
   d9bfe:	dc01      	bgt.n	d9c04 <_ZN9USBSerial5writeEh+0x16>
   d9c00:	7c60      	ldrb	r0, [r4, #17]
   d9c02:	b120      	cbz	r0, d9c0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9c04:	7c20      	ldrb	r0, [r4, #16]
   d9c06:	f7fe fa27 	bl	d8058 <HAL_USB_USART_Send_Data>
   d9c0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9c0e:	b002      	add	sp, #8
   d9c10:	bd10      	pop	{r4, pc}

000d9c12 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9c12:	7c00      	ldrb	r0, [r0, #16]
   d9c14:	f7fe ba28 	b.w	d8068 <HAL_USB_USART_Flush_Data>

000d9c18 <_ZN9USBSerialD0Ev>:
   d9c18:	b510      	push	{r4, lr}
   d9c1a:	2114      	movs	r1, #20
   d9c1c:	4604      	mov	r4, r0
   d9c1e:	f000 f9b8 	bl	d9f92 <_ZdlPvj>
   d9c22:	4620      	mov	r0, r4
   d9c24:	bd10      	pop	{r4, pc}
	...

000d9c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9c28:	b510      	push	{r4, lr}
   d9c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9c2e:	4604      	mov	r4, r0
   d9c30:	4608      	mov	r0, r1
   d9c32:	2100      	movs	r1, #0
   d9c34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9c38:	4b04      	ldr	r3, [pc, #16]	; (d9c4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9c3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9c3c:	2301      	movs	r3, #1
  _serial = serial;
   d9c3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9c40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9c42:	4611      	mov	r1, r2
   d9c44:	f7fe f9e0 	bl	d8008 <HAL_USB_USART_Init>
}
   d9c48:	4620      	mov	r0, r4
   d9c4a:	bd10      	pop	{r4, pc}
   d9c4c:	000db72c 	.word	0x000db72c

000d9c50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9c50:	7c00      	ldrb	r0, [r0, #16]
   d9c52:	2200      	movs	r2, #0
   d9c54:	f7fe b9e0 	b.w	d8018 <HAL_USB_USART_Begin>

000d9c58 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9c58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9c5a:	2214      	movs	r2, #20
{
   d9c5c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9c5e:	2100      	movs	r1, #0
   d9c60:	f000 ff4e 	bl	dab00 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9c64:	4620      	mov	r0, r4
   d9c66:	bd10      	pop	{r4, pc}

000d9c68 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9c68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9c6a:	4c10      	ldr	r4, [pc, #64]	; (d9cac <_Z16_fetch_usbserialv+0x44>)
{
   d9c6c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9c6e:	a803      	add	r0, sp, #12
   d9c70:	f7ff fff2 	bl	d9c58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9c74:	7821      	ldrb	r1, [r4, #0]
   d9c76:	f3bf 8f5b 	dmb	ish
   d9c7a:	f011 0101 	ands.w	r1, r1, #1
   d9c7e:	d111      	bne.n	d9ca4 <_Z16_fetch_usbserialv+0x3c>
   d9c80:	4620      	mov	r0, r4
   d9c82:	9101      	str	r1, [sp, #4]
   d9c84:	f7fa fa18 	bl	d40b8 <__cxa_guard_acquire>
   d9c88:	9901      	ldr	r1, [sp, #4]
   d9c8a:	b158      	cbz	r0, d9ca4 <_Z16_fetch_usbserialv+0x3c>
   d9c8c:	aa03      	add	r2, sp, #12
   d9c8e:	4808      	ldr	r0, [pc, #32]	; (d9cb0 <_Z16_fetch_usbserialv+0x48>)
   d9c90:	f7ff ffca 	bl	d9c28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9c94:	4620      	mov	r0, r4
   d9c96:	f7fa fa14 	bl	d40c2 <__cxa_guard_release>
   d9c9a:	4a06      	ldr	r2, [pc, #24]	; (d9cb4 <_Z16_fetch_usbserialv+0x4c>)
   d9c9c:	4906      	ldr	r1, [pc, #24]	; (d9cb8 <_Z16_fetch_usbserialv+0x50>)
   d9c9e:	4804      	ldr	r0, [pc, #16]	; (d9cb0 <_Z16_fetch_usbserialv+0x48>)
   d9ca0:	f000 f972 	bl	d9f88 <__aeabi_atexit>
	return _usbserial;
}
   d9ca4:	4802      	ldr	r0, [pc, #8]	; (d9cb0 <_Z16_fetch_usbserialv+0x48>)
   d9ca6:	b008      	add	sp, #32
   d9ca8:	bd10      	pop	{r4, pc}
   d9caa:	bf00      	nop
   d9cac:	2003e7b8 	.word	0x2003e7b8
   d9cb0:	2003e7bc 	.word	0x2003e7bc
   d9cb4:	2003e230 	.word	0x2003e230
   d9cb8:	000d9bb1 	.word	0x000d9bb1

000d9cbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9cbc:	4b01      	ldr	r3, [pc, #4]	; (d9cc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9cbe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9cc0:	4770      	bx	lr
   d9cc2:	bf00      	nop
   d9cc4:	2003e1c8 	.word	0x2003e1c8

000d9cc8 <serialEventRun>:
{
   d9cc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9cca:	4b0b      	ldr	r3, [pc, #44]	; (d9cf8 <serialEventRun+0x30>)
   d9ccc:	b143      	cbz	r3, d9ce0 <serialEventRun+0x18>
   d9cce:	f7ff ffcb 	bl	d9c68 <_Z16_fetch_usbserialv>
   d9cd2:	6803      	ldr	r3, [r0, #0]
   d9cd4:	691b      	ldr	r3, [r3, #16]
   d9cd6:	4798      	blx	r3
   d9cd8:	2800      	cmp	r0, #0
   d9cda:	dd01      	ble.n	d9ce0 <serialEventRun+0x18>
        serialEvent();
   d9cdc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9ce0:	4b06      	ldr	r3, [pc, #24]	; (d9cfc <serialEventRun+0x34>)
   d9ce2:	b143      	cbz	r3, d9cf6 <serialEventRun+0x2e>
   d9ce4:	f7ff ff38 	bl	d9b58 <_Z22__fetch_global_Serial1v>
   d9ce8:	6803      	ldr	r3, [r0, #0]
   d9cea:	691b      	ldr	r3, [r3, #16]
   d9cec:	4798      	blx	r3
   d9cee:	2800      	cmp	r0, #0
   d9cf0:	dd01      	ble.n	d9cf6 <serialEventRun+0x2e>
        serialEvent1();
   d9cf2:	f3af 8000 	nop.w
}
   d9cf6:	bd08      	pop	{r3, pc}
	...

000d9d00 <_post_loop>:
{
   d9d00:	b508      	push	{r3, lr}
	serialEventRun();
   d9d02:	f7ff ffe1 	bl	d9cc8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9d06:	f7fd ffff 	bl	d7d08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9d0a:	4b01      	ldr	r3, [pc, #4]	; (d9d10 <_post_loop+0x10>)
   d9d0c:	6018      	str	r0, [r3, #0]
}
   d9d0e:	bd08      	pop	{r3, pc}
   d9d10:	2003e7d8 	.word	0x2003e7d8

000d9d14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9d14:	4802      	ldr	r0, [pc, #8]	; (d9d20 <_Z33system_initialize_user_backup_ramv+0xc>)
   d9d16:	4a03      	ldr	r2, [pc, #12]	; (d9d24 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9d18:	4903      	ldr	r1, [pc, #12]	; (d9d28 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9d1a:	1a12      	subs	r2, r2, r0
   d9d1c:	f000 bec8 	b.w	daab0 <memcpy>
   d9d20:	2003f400 	.word	0x2003f400
   d9d24:	2003fc1c 	.word	0x2003fc1c
   d9d28:	000db8f0 	.word	0x000db8f0

000d9d2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9d2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9d2e:	2300      	movs	r3, #0
   d9d30:	9300      	str	r3, [sp, #0]
   d9d32:	461a      	mov	r2, r3
   d9d34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9d38:	f7fe fa02 	bl	d8140 <system_ctrl_set_result>
}
   d9d3c:	b003      	add	sp, #12
   d9d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9d44 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9d44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9d46:	8843      	ldrh	r3, [r0, #2]
   d9d48:	2b0a      	cmp	r3, #10
   d9d4a:	d008      	beq.n	d9d5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9d4c:	2b50      	cmp	r3, #80	; 0x50
   d9d4e:	d10b      	bne.n	d9d68 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9d50:	4b09      	ldr	r3, [pc, #36]	; (d9d78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9d52:	681b      	ldr	r3, [r3, #0]
   d9d54:	b14b      	cbz	r3, d9d6a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9d56:	b003      	add	sp, #12
   d9d58:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9d5c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9d5e:	f7ff ffe5 	bl	d9d2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9d62:	b003      	add	sp, #12
   d9d64:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9d68:	2300      	movs	r3, #0
   d9d6a:	9300      	str	r3, [sp, #0]
   d9d6c:	461a      	mov	r2, r3
   d9d6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9d72:	f7fe f9e5 	bl	d8140 <system_ctrl_set_result>
}
   d9d76:	e7f4      	b.n	d9d62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9d78:	2003e7d4 	.word	0x2003e7d4

000d9d7c <module_user_init_hook>:
{
   d9d7c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9d7e:	4c12      	ldr	r4, [pc, #72]	; (d9dc8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9d80:	4812      	ldr	r0, [pc, #72]	; (d9dcc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9d82:	4d13      	ldr	r5, [pc, #76]	; (d9dd0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9d84:	2100      	movs	r1, #0
   d9d86:	f7fe faf1 	bl	d836c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9d8a:	6823      	ldr	r3, [r4, #0]
   d9d8c:	42ab      	cmp	r3, r5
   d9d8e:	4b11      	ldr	r3, [pc, #68]	; (d9dd4 <module_user_init_hook+0x58>)
   d9d90:	bf0c      	ite	eq
   d9d92:	2201      	moveq	r2, #1
   d9d94:	2200      	movne	r2, #0
   d9d96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9d98:	d002      	beq.n	d9da0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d9d9a:	f7ff ffbb 	bl	d9d14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9d9e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9da0:	f7fd ff9a 	bl	d7cd8 <HAL_RNG_GetRandomNumber>
   d9da4:	4604      	mov	r4, r0
    srand(seed);
   d9da6:	f000 feb3 	bl	dab10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9daa:	4b0b      	ldr	r3, [pc, #44]	; (d9dd8 <module_user_init_hook+0x5c>)
   d9dac:	b113      	cbz	r3, d9db4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9dae:	4620      	mov	r0, r4
   d9db0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9db4:	2100      	movs	r1, #0
   d9db6:	4808      	ldr	r0, [pc, #32]	; (d9dd8 <module_user_init_hook+0x5c>)
   d9db8:	f7fe fa38 	bl	d822c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9dc0:	4806      	ldr	r0, [pc, #24]	; (d9ddc <module_user_init_hook+0x60>)
   d9dc2:	2100      	movs	r1, #0
   d9dc4:	f7fe b9b2 	b.w	d812c <system_ctrl_set_app_request_handler>
   d9dc8:	2003fc18 	.word	0x2003fc18
   d9dcc:	000d9cbd 	.word	0x000d9cbd
   d9dd0:	9a271c1e 	.word	0x9a271c1e
   d9dd4:	2003e7d0 	.word	0x2003e7d0
   d9dd8:	00000000 	.word	0x00000000
   d9ddc:	000d9d45 	.word	0x000d9d45

000d9de0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9de0:	b508      	push	{r3, lr}
   d9de2:	4b02      	ldr	r3, [pc, #8]	; (d9dec <spark_protocol_instance+0xc>)
   d9de4:	681b      	ldr	r3, [r3, #0]
   d9de6:	681b      	ldr	r3, [r3, #0]
   d9de8:	9301      	str	r3, [sp, #4]
   d9dea:	bd08      	pop	{r3, pc}
   d9dec:	0003025c 	.word	0x0003025c

000d9df0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d9df0:	b508      	push	{r3, lr}
   d9df2:	4b02      	ldr	r3, [pc, #8]	; (d9dfc <spark_protocol_set_product_id+0xc>)
   d9df4:	681b      	ldr	r3, [r3, #0]
   d9df6:	685b      	ldr	r3, [r3, #4]
   d9df8:	9301      	str	r3, [sp, #4]
   d9dfa:	bd08      	pop	{r3, pc}
   d9dfc:	0003025c 	.word	0x0003025c

000d9e00 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d9e00:	b508      	push	{r3, lr}
   d9e02:	4b02      	ldr	r3, [pc, #8]	; (d9e0c <spark_protocol_set_product_firmware_version+0xc>)
   d9e04:	681b      	ldr	r3, [r3, #0]
   d9e06:	689b      	ldr	r3, [r3, #8]
   d9e08:	9301      	str	r3, [sp, #4]
   d9e0a:	bd08      	pop	{r3, pc}
   d9e0c:	0003025c 	.word	0x0003025c

000d9e10 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9e10:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9e12:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9e14:	d902      	bls.n	d9e1c <pinAvailable+0xc>
    return false;
   d9e16:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9e18:	b002      	add	sp, #8
   d9e1a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9e1c:	f1a0 030b 	sub.w	r3, r0, #11
   d9e20:	2b02      	cmp	r3, #2
   d9e22:	d81a      	bhi.n	d9e5a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9e24:	4c17      	ldr	r4, [pc, #92]	; (d9e84 <pinAvailable+0x74>)
   d9e26:	7821      	ldrb	r1, [r4, #0]
   d9e28:	f3bf 8f5b 	dmb	ish
   d9e2c:	f011 0101 	ands.w	r1, r1, #1
   d9e30:	d10b      	bne.n	d9e4a <pinAvailable+0x3a>
   d9e32:	4620      	mov	r0, r4
   d9e34:	9101      	str	r1, [sp, #4]
   d9e36:	f7fa f93f 	bl	d40b8 <__cxa_guard_acquire>
   d9e3a:	9901      	ldr	r1, [sp, #4]
   d9e3c:	b128      	cbz	r0, d9e4a <pinAvailable+0x3a>
   d9e3e:	4812      	ldr	r0, [pc, #72]	; (d9e88 <pinAvailable+0x78>)
   d9e40:	f7ff fa8e 	bl	d9360 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9e44:	4620      	mov	r0, r4
   d9e46:	f7fa f93c 	bl	d40c2 <__cxa_guard_release>
   d9e4a:	4b0f      	ldr	r3, [pc, #60]	; (d9e88 <pinAvailable+0x78>)
   d9e4c:	7818      	ldrb	r0, [r3, #0]
   d9e4e:	f7fe f873 	bl	d7f38 <hal_spi_is_enabled>
   d9e52:	2800      	cmp	r0, #0
   d9e54:	d1df      	bne.n	d9e16 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9e56:	2001      	movs	r0, #1
   d9e58:	e7de      	b.n	d9e18 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9e5a:	2801      	cmp	r0, #1
   d9e5c:	d809      	bhi.n	d9e72 <pinAvailable+0x62>
   d9e5e:	f000 f86b 	bl	d9f38 <_Z19__fetch_global_Wirev>
   d9e62:	2100      	movs	r1, #0
   d9e64:	7c00      	ldrb	r0, [r0, #16]
   d9e66:	f7fe f80f 	bl	d7e88 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9e6a:	f080 0001 	eor.w	r0, r0, #1
   d9e6e:	b2c0      	uxtb	r0, r0
   d9e70:	e7d2      	b.n	d9e18 <pinAvailable+0x8>
   d9e72:	3809      	subs	r0, #9
   d9e74:	2801      	cmp	r0, #1
   d9e76:	d8ee      	bhi.n	d9e56 <pinAvailable+0x46>
   d9e78:	f7ff fe6e 	bl	d9b58 <_Z22__fetch_global_Serial1v>
   d9e7c:	7c00      	ldrb	r0, [r0, #16]
   d9e7e:	f7fe f8b3 	bl	d7fe8 <hal_usart_is_enabled>
   d9e82:	e7f2      	b.n	d9e6a <pinAvailable+0x5a>
   d9e84:	2003e3fc 	.word	0x2003e3fc
   d9e88:	2003e400 	.word	0x2003e400

000d9e8c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e8c:	2823      	cmp	r0, #35	; 0x23
{
   d9e8e:	b538      	push	{r3, r4, r5, lr}
   d9e90:	4604      	mov	r4, r0
   d9e92:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e94:	d80a      	bhi.n	d9eac <pinMode+0x20>
   d9e96:	29ff      	cmp	r1, #255	; 0xff
   d9e98:	d008      	beq.n	d9eac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9e9a:	f7ff ffb9 	bl	d9e10 <pinAvailable>
   d9e9e:	b128      	cbz	r0, d9eac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9ea0:	4629      	mov	r1, r5
   d9ea2:	4620      	mov	r0, r4
}
   d9ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9ea8:	f7fd bf6e 	b.w	d7d88 <HAL_Pin_Mode>
}
   d9eac:	bd38      	pop	{r3, r4, r5, pc}

000d9eae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9eae:	b538      	push	{r3, r4, r5, lr}
   d9eb0:	4604      	mov	r4, r0
   d9eb2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9eb4:	f7fd ff70 	bl	d7d98 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9eb8:	28ff      	cmp	r0, #255	; 0xff
   d9eba:	d010      	beq.n	d9ede <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9ebc:	2806      	cmp	r0, #6
   d9ebe:	d804      	bhi.n	d9eca <digitalWrite+0x1c>
   d9ec0:	234d      	movs	r3, #77	; 0x4d
   d9ec2:	fa23 f000 	lsr.w	r0, r3, r0
   d9ec6:	07c3      	lsls	r3, r0, #31
   d9ec8:	d409      	bmi.n	d9ede <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9eca:	4620      	mov	r0, r4
   d9ecc:	f7ff ffa0 	bl	d9e10 <pinAvailable>
   d9ed0:	b128      	cbz	r0, d9ede <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9ed2:	4629      	mov	r1, r5
   d9ed4:	4620      	mov	r0, r4
}
   d9ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9eda:	f7fd bf65 	b.w	d7da8 <HAL_GPIO_Write>
}
   d9ede:	bd38      	pop	{r3, r4, r5, pc}

000d9ee0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9ee0:	b510      	push	{r4, lr}
   d9ee2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9ee4:	f7fd ff58 	bl	d7d98 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9ee8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9eea:	b2db      	uxtb	r3, r3
   d9eec:	2b01      	cmp	r3, #1
   d9eee:	d908      	bls.n	d9f02 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9ef0:	4620      	mov	r0, r4
   d9ef2:	f7ff ff8d 	bl	d9e10 <pinAvailable>
   d9ef6:	b120      	cbz	r0, d9f02 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9ef8:	4620      	mov	r0, r4
}
   d9efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9efe:	f7fd bf5b 	b.w	d7db8 <HAL_GPIO_Read>
}
   d9f02:	2000      	movs	r0, #0
   d9f04:	bd10      	pop	{r4, pc}
	...

000d9f08 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9f08:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9f0a:	2300      	movs	r3, #0
   d9f0c:	2520      	movs	r5, #32
   d9f0e:	8043      	strh	r3, [r0, #2]
   d9f10:	2314      	movs	r3, #20
{
   d9f12:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9f14:	8003      	strh	r3, [r0, #0]
   d9f16:	6085      	str	r5, [r0, #8]
   d9f18:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f1a:	4906      	ldr	r1, [pc, #24]	; (d9f34 <_Z17acquireWireBufferv+0x2c>)
   d9f1c:	4628      	mov	r0, r5
   d9f1e:	f000 f83c 	bl	d9f9a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f22:	4904      	ldr	r1, [pc, #16]	; (d9f34 <_Z17acquireWireBufferv+0x2c>)
	};
   d9f24:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9f26:	4628      	mov	r0, r5
   d9f28:	f000 f837 	bl	d9f9a <_ZnajRKSt9nothrow_t>
	};
   d9f2c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d9f2e:	4620      	mov	r0, r4
   d9f30:	bd38      	pop	{r3, r4, r5, pc}
   d9f32:	bf00      	nop
   d9f34:	000db754 	.word	0x000db754

000d9f38 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9f38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f3a:	4d0f      	ldr	r5, [pc, #60]	; (d9f78 <_Z19__fetch_global_Wirev+0x40>)
   d9f3c:	7829      	ldrb	r1, [r5, #0]
   d9f3e:	f3bf 8f5b 	dmb	ish
   d9f42:	f011 0401 	ands.w	r4, r1, #1
{
   d9f46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9f48:	d113      	bne.n	d9f72 <_Z19__fetch_global_Wirev+0x3a>
   d9f4a:	4628      	mov	r0, r5
   d9f4c:	f7fa f8b4 	bl	d40b8 <__cxa_guard_acquire>
   d9f50:	b178      	cbz	r0, d9f72 <_Z19__fetch_global_Wirev+0x3a>
   d9f52:	a801      	add	r0, sp, #4
   d9f54:	f7ff ffd8 	bl	d9f08 <_Z17acquireWireBufferv>
   d9f58:	aa01      	add	r2, sp, #4
   d9f5a:	4621      	mov	r1, r4
   d9f5c:	4807      	ldr	r0, [pc, #28]	; (d9f7c <_Z19__fetch_global_Wirev+0x44>)
   d9f5e:	f7fe fecd 	bl	d8cfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9f62:	4628      	mov	r0, r5
   d9f64:	f7fa f8ad 	bl	d40c2 <__cxa_guard_release>
   d9f68:	4a05      	ldr	r2, [pc, #20]	; (d9f80 <_Z19__fetch_global_Wirev+0x48>)
   d9f6a:	4906      	ldr	r1, [pc, #24]	; (d9f84 <_Z19__fetch_global_Wirev+0x4c>)
   d9f6c:	4803      	ldr	r0, [pc, #12]	; (d9f7c <_Z19__fetch_global_Wirev+0x44>)
   d9f6e:	f000 f80b 	bl	d9f88 <__aeabi_atexit>
	return wire;
}
   d9f72:	4802      	ldr	r0, [pc, #8]	; (d9f7c <_Z19__fetch_global_Wirev+0x44>)
   d9f74:	b007      	add	sp, #28
   d9f76:	bd30      	pop	{r4, r5, pc}
   d9f78:	2003e7dc 	.word	0x2003e7dc
   d9f7c:	2003e7e0 	.word	0x2003e7e0
   d9f80:	2003e230 	.word	0x2003e230
   d9f84:	000d8ca5 	.word	0x000d8ca5

000d9f88 <__aeabi_atexit>:
   d9f88:	460b      	mov	r3, r1
   d9f8a:	4601      	mov	r1, r0
   d9f8c:	4618      	mov	r0, r3
   d9f8e:	f000 bd6f 	b.w	daa70 <__cxa_atexit>

000d9f92 <_ZdlPvj>:
   d9f92:	f7fa b884 	b.w	d409e <_ZdlPv>

000d9f96 <_ZnwjRKSt9nothrow_t>:
   d9f96:	f7fa b87e 	b.w	d4096 <_Znwj>

000d9f9a <_ZnajRKSt9nothrow_t>:
   d9f9a:	f7fa b87e 	b.w	d409a <_Znaj>

000d9f9e <_ZSt25__throw_bad_function_callv>:
   d9f9e:	b508      	push	{r3, lr}
   d9fa0:	f7fe f9d4 	bl	d834c <abort>

000d9fa4 <__aeabi_drsub>:
   d9fa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9fa8:	e002      	b.n	d9fb0 <__adddf3>
   d9faa:	bf00      	nop

000d9fac <__aeabi_dsub>:
   d9fac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9fb0 <__adddf3>:
   d9fb0:	b530      	push	{r4, r5, lr}
   d9fb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9fb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9fba:	ea94 0f05 	teq	r4, r5
   d9fbe:	bf08      	it	eq
   d9fc0:	ea90 0f02 	teqeq	r0, r2
   d9fc4:	bf1f      	itttt	ne
   d9fc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9fca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9fce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9fd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9fd6:	f000 80e2 	beq.w	da19e <__adddf3+0x1ee>
   d9fda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9fde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9fe2:	bfb8      	it	lt
   d9fe4:	426d      	neglt	r5, r5
   d9fe6:	dd0c      	ble.n	da002 <__adddf3+0x52>
   d9fe8:	442c      	add	r4, r5
   d9fea:	ea80 0202 	eor.w	r2, r0, r2
   d9fee:	ea81 0303 	eor.w	r3, r1, r3
   d9ff2:	ea82 0000 	eor.w	r0, r2, r0
   d9ff6:	ea83 0101 	eor.w	r1, r3, r1
   d9ffa:	ea80 0202 	eor.w	r2, r0, r2
   d9ffe:	ea81 0303 	eor.w	r3, r1, r3
   da002:	2d36      	cmp	r5, #54	; 0x36
   da004:	bf88      	it	hi
   da006:	bd30      	pophi	{r4, r5, pc}
   da008:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da00c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da010:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da014:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da018:	d002      	beq.n	da020 <__adddf3+0x70>
   da01a:	4240      	negs	r0, r0
   da01c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da020:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da024:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da028:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da02c:	d002      	beq.n	da034 <__adddf3+0x84>
   da02e:	4252      	negs	r2, r2
   da030:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da034:	ea94 0f05 	teq	r4, r5
   da038:	f000 80a7 	beq.w	da18a <__adddf3+0x1da>
   da03c:	f1a4 0401 	sub.w	r4, r4, #1
   da040:	f1d5 0e20 	rsbs	lr, r5, #32
   da044:	db0d      	blt.n	da062 <__adddf3+0xb2>
   da046:	fa02 fc0e 	lsl.w	ip, r2, lr
   da04a:	fa22 f205 	lsr.w	r2, r2, r5
   da04e:	1880      	adds	r0, r0, r2
   da050:	f141 0100 	adc.w	r1, r1, #0
   da054:	fa03 f20e 	lsl.w	r2, r3, lr
   da058:	1880      	adds	r0, r0, r2
   da05a:	fa43 f305 	asr.w	r3, r3, r5
   da05e:	4159      	adcs	r1, r3
   da060:	e00e      	b.n	da080 <__adddf3+0xd0>
   da062:	f1a5 0520 	sub.w	r5, r5, #32
   da066:	f10e 0e20 	add.w	lr, lr, #32
   da06a:	2a01      	cmp	r2, #1
   da06c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da070:	bf28      	it	cs
   da072:	f04c 0c02 	orrcs.w	ip, ip, #2
   da076:	fa43 f305 	asr.w	r3, r3, r5
   da07a:	18c0      	adds	r0, r0, r3
   da07c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da084:	d507      	bpl.n	da096 <__adddf3+0xe6>
   da086:	f04f 0e00 	mov.w	lr, #0
   da08a:	f1dc 0c00 	rsbs	ip, ip, #0
   da08e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da092:	eb6e 0101 	sbc.w	r1, lr, r1
   da096:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da09a:	d31b      	bcc.n	da0d4 <__adddf3+0x124>
   da09c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da0a0:	d30c      	bcc.n	da0bc <__adddf3+0x10c>
   da0a2:	0849      	lsrs	r1, r1, #1
   da0a4:	ea5f 0030 	movs.w	r0, r0, rrx
   da0a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da0ac:	f104 0401 	add.w	r4, r4, #1
   da0b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da0b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da0b8:	f080 809a 	bcs.w	da1f0 <__adddf3+0x240>
   da0bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da0c0:	bf08      	it	eq
   da0c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da0c6:	f150 0000 	adcs.w	r0, r0, #0
   da0ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da0ce:	ea41 0105 	orr.w	r1, r1, r5
   da0d2:	bd30      	pop	{r4, r5, pc}
   da0d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da0d8:	4140      	adcs	r0, r0
   da0da:	eb41 0101 	adc.w	r1, r1, r1
   da0de:	3c01      	subs	r4, #1
   da0e0:	bf28      	it	cs
   da0e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da0e6:	d2e9      	bcs.n	da0bc <__adddf3+0x10c>
   da0e8:	f091 0f00 	teq	r1, #0
   da0ec:	bf04      	itt	eq
   da0ee:	4601      	moveq	r1, r0
   da0f0:	2000      	moveq	r0, #0
   da0f2:	fab1 f381 	clz	r3, r1
   da0f6:	bf08      	it	eq
   da0f8:	3320      	addeq	r3, #32
   da0fa:	f1a3 030b 	sub.w	r3, r3, #11
   da0fe:	f1b3 0220 	subs.w	r2, r3, #32
   da102:	da0c      	bge.n	da11e <__adddf3+0x16e>
   da104:	320c      	adds	r2, #12
   da106:	dd08      	ble.n	da11a <__adddf3+0x16a>
   da108:	f102 0c14 	add.w	ip, r2, #20
   da10c:	f1c2 020c 	rsb	r2, r2, #12
   da110:	fa01 f00c 	lsl.w	r0, r1, ip
   da114:	fa21 f102 	lsr.w	r1, r1, r2
   da118:	e00c      	b.n	da134 <__adddf3+0x184>
   da11a:	f102 0214 	add.w	r2, r2, #20
   da11e:	bfd8      	it	le
   da120:	f1c2 0c20 	rsble	ip, r2, #32
   da124:	fa01 f102 	lsl.w	r1, r1, r2
   da128:	fa20 fc0c 	lsr.w	ip, r0, ip
   da12c:	bfdc      	itt	le
   da12e:	ea41 010c 	orrle.w	r1, r1, ip
   da132:	4090      	lslle	r0, r2
   da134:	1ae4      	subs	r4, r4, r3
   da136:	bfa2      	ittt	ge
   da138:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da13c:	4329      	orrge	r1, r5
   da13e:	bd30      	popge	{r4, r5, pc}
   da140:	ea6f 0404 	mvn.w	r4, r4
   da144:	3c1f      	subs	r4, #31
   da146:	da1c      	bge.n	da182 <__adddf3+0x1d2>
   da148:	340c      	adds	r4, #12
   da14a:	dc0e      	bgt.n	da16a <__adddf3+0x1ba>
   da14c:	f104 0414 	add.w	r4, r4, #20
   da150:	f1c4 0220 	rsb	r2, r4, #32
   da154:	fa20 f004 	lsr.w	r0, r0, r4
   da158:	fa01 f302 	lsl.w	r3, r1, r2
   da15c:	ea40 0003 	orr.w	r0, r0, r3
   da160:	fa21 f304 	lsr.w	r3, r1, r4
   da164:	ea45 0103 	orr.w	r1, r5, r3
   da168:	bd30      	pop	{r4, r5, pc}
   da16a:	f1c4 040c 	rsb	r4, r4, #12
   da16e:	f1c4 0220 	rsb	r2, r4, #32
   da172:	fa20 f002 	lsr.w	r0, r0, r2
   da176:	fa01 f304 	lsl.w	r3, r1, r4
   da17a:	ea40 0003 	orr.w	r0, r0, r3
   da17e:	4629      	mov	r1, r5
   da180:	bd30      	pop	{r4, r5, pc}
   da182:	fa21 f004 	lsr.w	r0, r1, r4
   da186:	4629      	mov	r1, r5
   da188:	bd30      	pop	{r4, r5, pc}
   da18a:	f094 0f00 	teq	r4, #0
   da18e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da192:	bf06      	itte	eq
   da194:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da198:	3401      	addeq	r4, #1
   da19a:	3d01      	subne	r5, #1
   da19c:	e74e      	b.n	da03c <__adddf3+0x8c>
   da19e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da1a2:	bf18      	it	ne
   da1a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da1a8:	d029      	beq.n	da1fe <__adddf3+0x24e>
   da1aa:	ea94 0f05 	teq	r4, r5
   da1ae:	bf08      	it	eq
   da1b0:	ea90 0f02 	teqeq	r0, r2
   da1b4:	d005      	beq.n	da1c2 <__adddf3+0x212>
   da1b6:	ea54 0c00 	orrs.w	ip, r4, r0
   da1ba:	bf04      	itt	eq
   da1bc:	4619      	moveq	r1, r3
   da1be:	4610      	moveq	r0, r2
   da1c0:	bd30      	pop	{r4, r5, pc}
   da1c2:	ea91 0f03 	teq	r1, r3
   da1c6:	bf1e      	ittt	ne
   da1c8:	2100      	movne	r1, #0
   da1ca:	2000      	movne	r0, #0
   da1cc:	bd30      	popne	{r4, r5, pc}
   da1ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da1d2:	d105      	bne.n	da1e0 <__adddf3+0x230>
   da1d4:	0040      	lsls	r0, r0, #1
   da1d6:	4149      	adcs	r1, r1
   da1d8:	bf28      	it	cs
   da1da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da1de:	bd30      	pop	{r4, r5, pc}
   da1e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da1e4:	bf3c      	itt	cc
   da1e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da1ea:	bd30      	popcc	{r4, r5, pc}
   da1ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da1f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da1f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da1f8:	f04f 0000 	mov.w	r0, #0
   da1fc:	bd30      	pop	{r4, r5, pc}
   da1fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da202:	bf1a      	itte	ne
   da204:	4619      	movne	r1, r3
   da206:	4610      	movne	r0, r2
   da208:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da20c:	bf1c      	itt	ne
   da20e:	460b      	movne	r3, r1
   da210:	4602      	movne	r2, r0
   da212:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da216:	bf06      	itte	eq
   da218:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da21c:	ea91 0f03 	teqeq	r1, r3
   da220:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da224:	bd30      	pop	{r4, r5, pc}
   da226:	bf00      	nop

000da228 <__aeabi_ui2d>:
   da228:	f090 0f00 	teq	r0, #0
   da22c:	bf04      	itt	eq
   da22e:	2100      	moveq	r1, #0
   da230:	4770      	bxeq	lr
   da232:	b530      	push	{r4, r5, lr}
   da234:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da238:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da23c:	f04f 0500 	mov.w	r5, #0
   da240:	f04f 0100 	mov.w	r1, #0
   da244:	e750      	b.n	da0e8 <__adddf3+0x138>
   da246:	bf00      	nop

000da248 <__aeabi_i2d>:
   da248:	f090 0f00 	teq	r0, #0
   da24c:	bf04      	itt	eq
   da24e:	2100      	moveq	r1, #0
   da250:	4770      	bxeq	lr
   da252:	b530      	push	{r4, r5, lr}
   da254:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da258:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da25c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da260:	bf48      	it	mi
   da262:	4240      	negmi	r0, r0
   da264:	f04f 0100 	mov.w	r1, #0
   da268:	e73e      	b.n	da0e8 <__adddf3+0x138>
   da26a:	bf00      	nop

000da26c <__aeabi_f2d>:
   da26c:	0042      	lsls	r2, r0, #1
   da26e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da272:	ea4f 0131 	mov.w	r1, r1, rrx
   da276:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da27a:	bf1f      	itttt	ne
   da27c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da280:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da284:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da288:	4770      	bxne	lr
   da28a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da28e:	bf08      	it	eq
   da290:	4770      	bxeq	lr
   da292:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da296:	bf04      	itt	eq
   da298:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da29c:	4770      	bxeq	lr
   da29e:	b530      	push	{r4, r5, lr}
   da2a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   da2a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da2a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da2ac:	e71c      	b.n	da0e8 <__adddf3+0x138>
   da2ae:	bf00      	nop

000da2b0 <__aeabi_ul2d>:
   da2b0:	ea50 0201 	orrs.w	r2, r0, r1
   da2b4:	bf08      	it	eq
   da2b6:	4770      	bxeq	lr
   da2b8:	b530      	push	{r4, r5, lr}
   da2ba:	f04f 0500 	mov.w	r5, #0
   da2be:	e00a      	b.n	da2d6 <__aeabi_l2d+0x16>

000da2c0 <__aeabi_l2d>:
   da2c0:	ea50 0201 	orrs.w	r2, r0, r1
   da2c4:	bf08      	it	eq
   da2c6:	4770      	bxeq	lr
   da2c8:	b530      	push	{r4, r5, lr}
   da2ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da2ce:	d502      	bpl.n	da2d6 <__aeabi_l2d+0x16>
   da2d0:	4240      	negs	r0, r0
   da2d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da2d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da2da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da2de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da2e2:	f43f aed8 	beq.w	da096 <__adddf3+0xe6>
   da2e6:	f04f 0203 	mov.w	r2, #3
   da2ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da2ee:	bf18      	it	ne
   da2f0:	3203      	addne	r2, #3
   da2f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da2f6:	bf18      	it	ne
   da2f8:	3203      	addne	r2, #3
   da2fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da2fe:	f1c2 0320 	rsb	r3, r2, #32
   da302:	fa00 fc03 	lsl.w	ip, r0, r3
   da306:	fa20 f002 	lsr.w	r0, r0, r2
   da30a:	fa01 fe03 	lsl.w	lr, r1, r3
   da30e:	ea40 000e 	orr.w	r0, r0, lr
   da312:	fa21 f102 	lsr.w	r1, r1, r2
   da316:	4414      	add	r4, r2
   da318:	e6bd      	b.n	da096 <__adddf3+0xe6>
   da31a:	bf00      	nop

000da31c <__aeabi_dmul>:
   da31c:	b570      	push	{r4, r5, r6, lr}
   da31e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da32a:	bf1d      	ittte	ne
   da32c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da330:	ea94 0f0c 	teqne	r4, ip
   da334:	ea95 0f0c 	teqne	r5, ip
   da338:	f000 f8de 	bleq	da4f8 <__aeabi_dmul+0x1dc>
   da33c:	442c      	add	r4, r5
   da33e:	ea81 0603 	eor.w	r6, r1, r3
   da342:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da346:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da34a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da34e:	bf18      	it	ne
   da350:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da35c:	d038      	beq.n	da3d0 <__aeabi_dmul+0xb4>
   da35e:	fba0 ce02 	umull	ip, lr, r0, r2
   da362:	f04f 0500 	mov.w	r5, #0
   da366:	fbe1 e502 	umlal	lr, r5, r1, r2
   da36a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da36e:	fbe0 e503 	umlal	lr, r5, r0, r3
   da372:	f04f 0600 	mov.w	r6, #0
   da376:	fbe1 5603 	umlal	r5, r6, r1, r3
   da37a:	f09c 0f00 	teq	ip, #0
   da37e:	bf18      	it	ne
   da380:	f04e 0e01 	orrne.w	lr, lr, #1
   da384:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da388:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da38c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da390:	d204      	bcs.n	da39c <__aeabi_dmul+0x80>
   da392:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da396:	416d      	adcs	r5, r5
   da398:	eb46 0606 	adc.w	r6, r6, r6
   da39c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da3a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da3a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da3a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da3ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da3b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da3b4:	bf88      	it	hi
   da3b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da3ba:	d81e      	bhi.n	da3fa <__aeabi_dmul+0xde>
   da3bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da3c0:	bf08      	it	eq
   da3c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da3c6:	f150 0000 	adcs.w	r0, r0, #0
   da3ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da3ce:	bd70      	pop	{r4, r5, r6, pc}
   da3d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da3d4:	ea46 0101 	orr.w	r1, r6, r1
   da3d8:	ea40 0002 	orr.w	r0, r0, r2
   da3dc:	ea81 0103 	eor.w	r1, r1, r3
   da3e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da3e4:	bfc2      	ittt	gt
   da3e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   da3ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da3ee:	bd70      	popgt	{r4, r5, r6, pc}
   da3f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da3f4:	f04f 0e00 	mov.w	lr, #0
   da3f8:	3c01      	subs	r4, #1
   da3fa:	f300 80ab 	bgt.w	da554 <__aeabi_dmul+0x238>
   da3fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da402:	bfde      	ittt	le
   da404:	2000      	movle	r0, #0
   da406:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da40a:	bd70      	pople	{r4, r5, r6, pc}
   da40c:	f1c4 0400 	rsb	r4, r4, #0
   da410:	3c20      	subs	r4, #32
   da412:	da35      	bge.n	da480 <__aeabi_dmul+0x164>
   da414:	340c      	adds	r4, #12
   da416:	dc1b      	bgt.n	da450 <__aeabi_dmul+0x134>
   da418:	f104 0414 	add.w	r4, r4, #20
   da41c:	f1c4 0520 	rsb	r5, r4, #32
   da420:	fa00 f305 	lsl.w	r3, r0, r5
   da424:	fa20 f004 	lsr.w	r0, r0, r4
   da428:	fa01 f205 	lsl.w	r2, r1, r5
   da42c:	ea40 0002 	orr.w	r0, r0, r2
   da430:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da434:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da438:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da43c:	fa21 f604 	lsr.w	r6, r1, r4
   da440:	eb42 0106 	adc.w	r1, r2, r6
   da444:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da448:	bf08      	it	eq
   da44a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da44e:	bd70      	pop	{r4, r5, r6, pc}
   da450:	f1c4 040c 	rsb	r4, r4, #12
   da454:	f1c4 0520 	rsb	r5, r4, #32
   da458:	fa00 f304 	lsl.w	r3, r0, r4
   da45c:	fa20 f005 	lsr.w	r0, r0, r5
   da460:	fa01 f204 	lsl.w	r2, r1, r4
   da464:	ea40 0002 	orr.w	r0, r0, r2
   da468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da46c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da470:	f141 0100 	adc.w	r1, r1, #0
   da474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da478:	bf08      	it	eq
   da47a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da47e:	bd70      	pop	{r4, r5, r6, pc}
   da480:	f1c4 0520 	rsb	r5, r4, #32
   da484:	fa00 f205 	lsl.w	r2, r0, r5
   da488:	ea4e 0e02 	orr.w	lr, lr, r2
   da48c:	fa20 f304 	lsr.w	r3, r0, r4
   da490:	fa01 f205 	lsl.w	r2, r1, r5
   da494:	ea43 0302 	orr.w	r3, r3, r2
   da498:	fa21 f004 	lsr.w	r0, r1, r4
   da49c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da4a0:	fa21 f204 	lsr.w	r2, r1, r4
   da4a4:	ea20 0002 	bic.w	r0, r0, r2
   da4a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da4ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da4b0:	bf08      	it	eq
   da4b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da4b6:	bd70      	pop	{r4, r5, r6, pc}
   da4b8:	f094 0f00 	teq	r4, #0
   da4bc:	d10f      	bne.n	da4de <__aeabi_dmul+0x1c2>
   da4be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da4c2:	0040      	lsls	r0, r0, #1
   da4c4:	eb41 0101 	adc.w	r1, r1, r1
   da4c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da4cc:	bf08      	it	eq
   da4ce:	3c01      	subeq	r4, #1
   da4d0:	d0f7      	beq.n	da4c2 <__aeabi_dmul+0x1a6>
   da4d2:	ea41 0106 	orr.w	r1, r1, r6
   da4d6:	f095 0f00 	teq	r5, #0
   da4da:	bf18      	it	ne
   da4dc:	4770      	bxne	lr
   da4de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da4e2:	0052      	lsls	r2, r2, #1
   da4e4:	eb43 0303 	adc.w	r3, r3, r3
   da4e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da4ec:	bf08      	it	eq
   da4ee:	3d01      	subeq	r5, #1
   da4f0:	d0f7      	beq.n	da4e2 <__aeabi_dmul+0x1c6>
   da4f2:	ea43 0306 	orr.w	r3, r3, r6
   da4f6:	4770      	bx	lr
   da4f8:	ea94 0f0c 	teq	r4, ip
   da4fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da500:	bf18      	it	ne
   da502:	ea95 0f0c 	teqne	r5, ip
   da506:	d00c      	beq.n	da522 <__aeabi_dmul+0x206>
   da508:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da50c:	bf18      	it	ne
   da50e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da512:	d1d1      	bne.n	da4b8 <__aeabi_dmul+0x19c>
   da514:	ea81 0103 	eor.w	r1, r1, r3
   da518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da51c:	f04f 0000 	mov.w	r0, #0
   da520:	bd70      	pop	{r4, r5, r6, pc}
   da522:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da526:	bf06      	itte	eq
   da528:	4610      	moveq	r0, r2
   da52a:	4619      	moveq	r1, r3
   da52c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da530:	d019      	beq.n	da566 <__aeabi_dmul+0x24a>
   da532:	ea94 0f0c 	teq	r4, ip
   da536:	d102      	bne.n	da53e <__aeabi_dmul+0x222>
   da538:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da53c:	d113      	bne.n	da566 <__aeabi_dmul+0x24a>
   da53e:	ea95 0f0c 	teq	r5, ip
   da542:	d105      	bne.n	da550 <__aeabi_dmul+0x234>
   da544:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da548:	bf1c      	itt	ne
   da54a:	4610      	movne	r0, r2
   da54c:	4619      	movne	r1, r3
   da54e:	d10a      	bne.n	da566 <__aeabi_dmul+0x24a>
   da550:	ea81 0103 	eor.w	r1, r1, r3
   da554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da558:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da55c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da560:	f04f 0000 	mov.w	r0, #0
   da564:	bd70      	pop	{r4, r5, r6, pc}
   da566:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da56a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da56e:	bd70      	pop	{r4, r5, r6, pc}

000da570 <__aeabi_ddiv>:
   da570:	b570      	push	{r4, r5, r6, lr}
   da572:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da57a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da57e:	bf1d      	ittte	ne
   da580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da584:	ea94 0f0c 	teqne	r4, ip
   da588:	ea95 0f0c 	teqne	r5, ip
   da58c:	f000 f8a7 	bleq	da6de <__aeabi_ddiv+0x16e>
   da590:	eba4 0405 	sub.w	r4, r4, r5
   da594:	ea81 0e03 	eor.w	lr, r1, r3
   da598:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da59c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da5a0:	f000 8088 	beq.w	da6b4 <__aeabi_ddiv+0x144>
   da5a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da5a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da5ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da5b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da5b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da5b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da5bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da5c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da5c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da5c8:	429d      	cmp	r5, r3
   da5ca:	bf08      	it	eq
   da5cc:	4296      	cmpeq	r6, r2
   da5ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da5d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da5d6:	d202      	bcs.n	da5de <__aeabi_ddiv+0x6e>
   da5d8:	085b      	lsrs	r3, r3, #1
   da5da:	ea4f 0232 	mov.w	r2, r2, rrx
   da5de:	1ab6      	subs	r6, r6, r2
   da5e0:	eb65 0503 	sbc.w	r5, r5, r3
   da5e4:	085b      	lsrs	r3, r3, #1
   da5e6:	ea4f 0232 	mov.w	r2, r2, rrx
   da5ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da5ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da5f2:	ebb6 0e02 	subs.w	lr, r6, r2
   da5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5fa:	bf22      	ittt	cs
   da5fc:	1ab6      	subcs	r6, r6, r2
   da5fe:	4675      	movcs	r5, lr
   da600:	ea40 000c 	orrcs.w	r0, r0, ip
   da604:	085b      	lsrs	r3, r3, #1
   da606:	ea4f 0232 	mov.w	r2, r2, rrx
   da60a:	ebb6 0e02 	subs.w	lr, r6, r2
   da60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da612:	bf22      	ittt	cs
   da614:	1ab6      	subcs	r6, r6, r2
   da616:	4675      	movcs	r5, lr
   da618:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da61c:	085b      	lsrs	r3, r3, #1
   da61e:	ea4f 0232 	mov.w	r2, r2, rrx
   da622:	ebb6 0e02 	subs.w	lr, r6, r2
   da626:	eb75 0e03 	sbcs.w	lr, r5, r3
   da62a:	bf22      	ittt	cs
   da62c:	1ab6      	subcs	r6, r6, r2
   da62e:	4675      	movcs	r5, lr
   da630:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da634:	085b      	lsrs	r3, r3, #1
   da636:	ea4f 0232 	mov.w	r2, r2, rrx
   da63a:	ebb6 0e02 	subs.w	lr, r6, r2
   da63e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da642:	bf22      	ittt	cs
   da644:	1ab6      	subcs	r6, r6, r2
   da646:	4675      	movcs	r5, lr
   da648:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da64c:	ea55 0e06 	orrs.w	lr, r5, r6
   da650:	d018      	beq.n	da684 <__aeabi_ddiv+0x114>
   da652:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da656:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da65a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da65e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da662:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da666:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da66a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da66e:	d1c0      	bne.n	da5f2 <__aeabi_ddiv+0x82>
   da670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da674:	d10b      	bne.n	da68e <__aeabi_ddiv+0x11e>
   da676:	ea41 0100 	orr.w	r1, r1, r0
   da67a:	f04f 0000 	mov.w	r0, #0
   da67e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da682:	e7b6      	b.n	da5f2 <__aeabi_ddiv+0x82>
   da684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da688:	bf04      	itt	eq
   da68a:	4301      	orreq	r1, r0
   da68c:	2000      	moveq	r0, #0
   da68e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da692:	bf88      	it	hi
   da694:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da698:	f63f aeaf 	bhi.w	da3fa <__aeabi_dmul+0xde>
   da69c:	ebb5 0c03 	subs.w	ip, r5, r3
   da6a0:	bf04      	itt	eq
   da6a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   da6a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da6aa:	f150 0000 	adcs.w	r0, r0, #0
   da6ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da6b2:	bd70      	pop	{r4, r5, r6, pc}
   da6b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da6b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da6bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da6c0:	bfc2      	ittt	gt
   da6c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   da6c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da6ca:	bd70      	popgt	{r4, r5, r6, pc}
   da6cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da6d0:	f04f 0e00 	mov.w	lr, #0
   da6d4:	3c01      	subs	r4, #1
   da6d6:	e690      	b.n	da3fa <__aeabi_dmul+0xde>
   da6d8:	ea45 0e06 	orr.w	lr, r5, r6
   da6dc:	e68d      	b.n	da3fa <__aeabi_dmul+0xde>
   da6de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da6e2:	ea94 0f0c 	teq	r4, ip
   da6e6:	bf08      	it	eq
   da6e8:	ea95 0f0c 	teqeq	r5, ip
   da6ec:	f43f af3b 	beq.w	da566 <__aeabi_dmul+0x24a>
   da6f0:	ea94 0f0c 	teq	r4, ip
   da6f4:	d10a      	bne.n	da70c <__aeabi_ddiv+0x19c>
   da6f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da6fa:	f47f af34 	bne.w	da566 <__aeabi_dmul+0x24a>
   da6fe:	ea95 0f0c 	teq	r5, ip
   da702:	f47f af25 	bne.w	da550 <__aeabi_dmul+0x234>
   da706:	4610      	mov	r0, r2
   da708:	4619      	mov	r1, r3
   da70a:	e72c      	b.n	da566 <__aeabi_dmul+0x24a>
   da70c:	ea95 0f0c 	teq	r5, ip
   da710:	d106      	bne.n	da720 <__aeabi_ddiv+0x1b0>
   da712:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da716:	f43f aefd 	beq.w	da514 <__aeabi_dmul+0x1f8>
   da71a:	4610      	mov	r0, r2
   da71c:	4619      	mov	r1, r3
   da71e:	e722      	b.n	da566 <__aeabi_dmul+0x24a>
   da720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da724:	bf18      	it	ne
   da726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da72a:	f47f aec5 	bne.w	da4b8 <__aeabi_dmul+0x19c>
   da72e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da732:	f47f af0d 	bne.w	da550 <__aeabi_dmul+0x234>
   da736:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da73a:	f47f aeeb 	bne.w	da514 <__aeabi_dmul+0x1f8>
   da73e:	e712      	b.n	da566 <__aeabi_dmul+0x24a>

000da740 <__gedf2>:
   da740:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da744:	e006      	b.n	da754 <__cmpdf2+0x4>
   da746:	bf00      	nop

000da748 <__ledf2>:
   da748:	f04f 0c01 	mov.w	ip, #1
   da74c:	e002      	b.n	da754 <__cmpdf2+0x4>
   da74e:	bf00      	nop

000da750 <__cmpdf2>:
   da750:	f04f 0c01 	mov.w	ip, #1
   da754:	f84d cd04 	str.w	ip, [sp, #-4]!
   da758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da75c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da760:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da764:	bf18      	it	ne
   da766:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da76a:	d01b      	beq.n	da7a4 <__cmpdf2+0x54>
   da76c:	b001      	add	sp, #4
   da76e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da772:	bf0c      	ite	eq
   da774:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da778:	ea91 0f03 	teqne	r1, r3
   da77c:	bf02      	ittt	eq
   da77e:	ea90 0f02 	teqeq	r0, r2
   da782:	2000      	moveq	r0, #0
   da784:	4770      	bxeq	lr
   da786:	f110 0f00 	cmn.w	r0, #0
   da78a:	ea91 0f03 	teq	r1, r3
   da78e:	bf58      	it	pl
   da790:	4299      	cmppl	r1, r3
   da792:	bf08      	it	eq
   da794:	4290      	cmpeq	r0, r2
   da796:	bf2c      	ite	cs
   da798:	17d8      	asrcs	r0, r3, #31
   da79a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da79e:	f040 0001 	orr.w	r0, r0, #1
   da7a2:	4770      	bx	lr
   da7a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da7a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7ac:	d102      	bne.n	da7b4 <__cmpdf2+0x64>
   da7ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da7b2:	d107      	bne.n	da7c4 <__cmpdf2+0x74>
   da7b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da7b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7bc:	d1d6      	bne.n	da76c <__cmpdf2+0x1c>
   da7be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da7c2:	d0d3      	beq.n	da76c <__cmpdf2+0x1c>
   da7c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   da7c8:	4770      	bx	lr
   da7ca:	bf00      	nop

000da7cc <__aeabi_cdrcmple>:
   da7cc:	4684      	mov	ip, r0
   da7ce:	4610      	mov	r0, r2
   da7d0:	4662      	mov	r2, ip
   da7d2:	468c      	mov	ip, r1
   da7d4:	4619      	mov	r1, r3
   da7d6:	4663      	mov	r3, ip
   da7d8:	e000      	b.n	da7dc <__aeabi_cdcmpeq>
   da7da:	bf00      	nop

000da7dc <__aeabi_cdcmpeq>:
   da7dc:	b501      	push	{r0, lr}
   da7de:	f7ff ffb7 	bl	da750 <__cmpdf2>
   da7e2:	2800      	cmp	r0, #0
   da7e4:	bf48      	it	mi
   da7e6:	f110 0f00 	cmnmi.w	r0, #0
   da7ea:	bd01      	pop	{r0, pc}

000da7ec <__aeabi_dcmpeq>:
   da7ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7f0:	f7ff fff4 	bl	da7dc <__aeabi_cdcmpeq>
   da7f4:	bf0c      	ite	eq
   da7f6:	2001      	moveq	r0, #1
   da7f8:	2000      	movne	r0, #0
   da7fa:	f85d fb08 	ldr.w	pc, [sp], #8
   da7fe:	bf00      	nop

000da800 <__aeabi_dcmplt>:
   da800:	f84d ed08 	str.w	lr, [sp, #-8]!
   da804:	f7ff ffea 	bl	da7dc <__aeabi_cdcmpeq>
   da808:	bf34      	ite	cc
   da80a:	2001      	movcc	r0, #1
   da80c:	2000      	movcs	r0, #0
   da80e:	f85d fb08 	ldr.w	pc, [sp], #8
   da812:	bf00      	nop

000da814 <__aeabi_dcmple>:
   da814:	f84d ed08 	str.w	lr, [sp, #-8]!
   da818:	f7ff ffe0 	bl	da7dc <__aeabi_cdcmpeq>
   da81c:	bf94      	ite	ls
   da81e:	2001      	movls	r0, #1
   da820:	2000      	movhi	r0, #0
   da822:	f85d fb08 	ldr.w	pc, [sp], #8
   da826:	bf00      	nop

000da828 <__aeabi_dcmpge>:
   da828:	f84d ed08 	str.w	lr, [sp, #-8]!
   da82c:	f7ff ffce 	bl	da7cc <__aeabi_cdrcmple>
   da830:	bf94      	ite	ls
   da832:	2001      	movls	r0, #1
   da834:	2000      	movhi	r0, #0
   da836:	f85d fb08 	ldr.w	pc, [sp], #8
   da83a:	bf00      	nop

000da83c <__aeabi_dcmpgt>:
   da83c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da840:	f7ff ffc4 	bl	da7cc <__aeabi_cdrcmple>
   da844:	bf34      	ite	cc
   da846:	2001      	movcc	r0, #1
   da848:	2000      	movcs	r0, #0
   da84a:	f85d fb08 	ldr.w	pc, [sp], #8
   da84e:	bf00      	nop

000da850 <__aeabi_dcmpun>:
   da850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da858:	d102      	bne.n	da860 <__aeabi_dcmpun+0x10>
   da85a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da85e:	d10a      	bne.n	da876 <__aeabi_dcmpun+0x26>
   da860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da868:	d102      	bne.n	da870 <__aeabi_dcmpun+0x20>
   da86a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da86e:	d102      	bne.n	da876 <__aeabi_dcmpun+0x26>
   da870:	f04f 0000 	mov.w	r0, #0
   da874:	4770      	bx	lr
   da876:	f04f 0001 	mov.w	r0, #1
   da87a:	4770      	bx	lr

000da87c <__aeabi_d2iz>:
   da87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da884:	d215      	bcs.n	da8b2 <__aeabi_d2iz+0x36>
   da886:	d511      	bpl.n	da8ac <__aeabi_d2iz+0x30>
   da888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da88c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da890:	d912      	bls.n	da8b8 <__aeabi_d2iz+0x3c>
   da892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da89a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da89e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da8a2:	fa23 f002 	lsr.w	r0, r3, r2
   da8a6:	bf18      	it	ne
   da8a8:	4240      	negne	r0, r0
   da8aa:	4770      	bx	lr
   da8ac:	f04f 0000 	mov.w	r0, #0
   da8b0:	4770      	bx	lr
   da8b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da8b6:	d105      	bne.n	da8c4 <__aeabi_d2iz+0x48>
   da8b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da8bc:	bf08      	it	eq
   da8be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da8c2:	4770      	bx	lr
   da8c4:	f04f 0000 	mov.w	r0, #0
   da8c8:	4770      	bx	lr
   da8ca:	bf00      	nop

000da8cc <__aeabi_d2uiz>:
   da8cc:	004a      	lsls	r2, r1, #1
   da8ce:	d211      	bcs.n	da8f4 <__aeabi_d2uiz+0x28>
   da8d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da8d4:	d211      	bcs.n	da8fa <__aeabi_d2uiz+0x2e>
   da8d6:	d50d      	bpl.n	da8f4 <__aeabi_d2uiz+0x28>
   da8d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da8dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da8e0:	d40e      	bmi.n	da900 <__aeabi_d2uiz+0x34>
   da8e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da8e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da8ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da8ee:	fa23 f002 	lsr.w	r0, r3, r2
   da8f2:	4770      	bx	lr
   da8f4:	f04f 0000 	mov.w	r0, #0
   da8f8:	4770      	bx	lr
   da8fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da8fe:	d102      	bne.n	da906 <__aeabi_d2uiz+0x3a>
   da900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da904:	4770      	bx	lr
   da906:	f04f 0000 	mov.w	r0, #0
   da90a:	4770      	bx	lr

000da90c <__aeabi_d2f>:
   da90c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da914:	bf24      	itt	cs
   da916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da91a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da91e:	d90d      	bls.n	da93c <__aeabi_d2f+0x30>
   da920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da92c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da934:	bf08      	it	eq
   da936:	f020 0001 	biceq.w	r0, r0, #1
   da93a:	4770      	bx	lr
   da93c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da940:	d121      	bne.n	da986 <__aeabi_d2f+0x7a>
   da942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da946:	bfbc      	itt	lt
   da948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da94c:	4770      	bxlt	lr
   da94e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da956:	f1c2 0218 	rsb	r2, r2, #24
   da95a:	f1c2 0c20 	rsb	ip, r2, #32
   da95e:	fa10 f30c 	lsls.w	r3, r0, ip
   da962:	fa20 f002 	lsr.w	r0, r0, r2
   da966:	bf18      	it	ne
   da968:	f040 0001 	orrne.w	r0, r0, #1
   da96c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da974:	fa03 fc0c 	lsl.w	ip, r3, ip
   da978:	ea40 000c 	orr.w	r0, r0, ip
   da97c:	fa23 f302 	lsr.w	r3, r3, r2
   da980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da984:	e7cc      	b.n	da920 <__aeabi_d2f+0x14>
   da986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da98a:	d107      	bne.n	da99c <__aeabi_d2f+0x90>
   da98c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da990:	bf1e      	ittt	ne
   da992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da99a:	4770      	bxne	lr
   da99c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da9a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da9a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da9a8:	4770      	bx	lr
   da9aa:	bf00      	nop

000da9ac <__aeabi_f2lz>:
   da9ac:	ee07 0a90 	vmov	s15, r0
   da9b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da9b8:	d401      	bmi.n	da9be <__aeabi_f2lz+0x12>
   da9ba:	f000 b80b 	b.w	da9d4 <__aeabi_f2ulz>
   da9be:	eef1 7a67 	vneg.f32	s15, s15
   da9c2:	b508      	push	{r3, lr}
   da9c4:	ee17 0a90 	vmov	r0, s15
   da9c8:	f000 f804 	bl	da9d4 <__aeabi_f2ulz>
   da9cc:	4240      	negs	r0, r0
   da9ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da9d2:	bd08      	pop	{r3, pc}

000da9d4 <__aeabi_f2ulz>:
   da9d4:	b5d0      	push	{r4, r6, r7, lr}
   da9d6:	f7ff fc49 	bl	da26c <__aeabi_f2d>
   da9da:	4b0c      	ldr	r3, [pc, #48]	; (daa0c <__aeabi_f2ulz+0x38>)
   da9dc:	2200      	movs	r2, #0
   da9de:	4606      	mov	r6, r0
   da9e0:	460f      	mov	r7, r1
   da9e2:	f7ff fc9b 	bl	da31c <__aeabi_dmul>
   da9e6:	f7ff ff71 	bl	da8cc <__aeabi_d2uiz>
   da9ea:	4604      	mov	r4, r0
   da9ec:	f7ff fc1c 	bl	da228 <__aeabi_ui2d>
   da9f0:	4b07      	ldr	r3, [pc, #28]	; (daa10 <__aeabi_f2ulz+0x3c>)
   da9f2:	2200      	movs	r2, #0
   da9f4:	f7ff fc92 	bl	da31c <__aeabi_dmul>
   da9f8:	4602      	mov	r2, r0
   da9fa:	460b      	mov	r3, r1
   da9fc:	4630      	mov	r0, r6
   da9fe:	4639      	mov	r1, r7
   daa00:	f7ff fad4 	bl	d9fac <__aeabi_dsub>
   daa04:	f7ff ff62 	bl	da8cc <__aeabi_d2uiz>
   daa08:	4621      	mov	r1, r4
   daa0a:	bdd0      	pop	{r4, r6, r7, pc}
   daa0c:	3df00000 	.word	0x3df00000
   daa10:	41f00000 	.word	0x41f00000

000daa14 <asctime_r>:
   daa14:	b510      	push	{r4, lr}
   daa16:	460c      	mov	r4, r1
   daa18:	6941      	ldr	r1, [r0, #20]
   daa1a:	6903      	ldr	r3, [r0, #16]
   daa1c:	6982      	ldr	r2, [r0, #24]
   daa1e:	b086      	sub	sp, #24
   daa20:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daa24:	9104      	str	r1, [sp, #16]
   daa26:	6801      	ldr	r1, [r0, #0]
   daa28:	9103      	str	r1, [sp, #12]
   daa2a:	6841      	ldr	r1, [r0, #4]
   daa2c:	9102      	str	r1, [sp, #8]
   daa2e:	6881      	ldr	r1, [r0, #8]
   daa30:	9101      	str	r1, [sp, #4]
   daa32:	68c1      	ldr	r1, [r0, #12]
   daa34:	9100      	str	r1, [sp, #0]
   daa36:	4907      	ldr	r1, [pc, #28]	; (daa54 <asctime_r+0x40>)
   daa38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daa3c:	440b      	add	r3, r1
   daa3e:	4906      	ldr	r1, [pc, #24]	; (daa58 <asctime_r+0x44>)
   daa40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daa44:	440a      	add	r2, r1
   daa46:	4620      	mov	r0, r4
   daa48:	4904      	ldr	r1, [pc, #16]	; (daa5c <asctime_r+0x48>)
   daa4a:	f7fd fc67 	bl	d831c <siprintf>
   daa4e:	4620      	mov	r0, r4
   daa50:	b006      	add	sp, #24
   daa52:	bd10      	pop	{r4, pc}
   daa54:	000db78a 	.word	0x000db78a
   daa58:	000db775 	.word	0x000db775
   daa5c:	000db755 	.word	0x000db755

000daa60 <atoi>:
   daa60:	220a      	movs	r2, #10
   daa62:	2100      	movs	r1, #0
   daa64:	f000 b93c 	b.w	dace0 <strtol>

000daa68 <atol>:
   daa68:	220a      	movs	r2, #10
   daa6a:	2100      	movs	r1, #0
   daa6c:	f000 b938 	b.w	dace0 <strtol>

000daa70 <__cxa_atexit>:
   daa70:	b510      	push	{r4, lr}
   daa72:	4c05      	ldr	r4, [pc, #20]	; (daa88 <__cxa_atexit+0x18>)
   daa74:	4613      	mov	r3, r2
   daa76:	b12c      	cbz	r4, daa84 <__cxa_atexit+0x14>
   daa78:	460a      	mov	r2, r1
   daa7a:	4601      	mov	r1, r0
   daa7c:	2002      	movs	r0, #2
   daa7e:	f3af 8000 	nop.w
   daa82:	bd10      	pop	{r4, pc}
   daa84:	4620      	mov	r0, r4
   daa86:	e7fc      	b.n	daa82 <__cxa_atexit+0x12>
   daa88:	00000000 	.word	0x00000000

000daa8c <gmtime>:
   daa8c:	b538      	push	{r3, r4, r5, lr}
   daa8e:	4b07      	ldr	r3, [pc, #28]	; (daaac <gmtime+0x20>)
   daa90:	681d      	ldr	r5, [r3, #0]
   daa92:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   daa94:	4604      	mov	r4, r0
   daa96:	b91b      	cbnz	r3, daaa0 <gmtime+0x14>
   daa98:	2024      	movs	r0, #36	; 0x24
   daa9a:	f7fd fc27 	bl	d82ec <malloc>
   daa9e:	63e8      	str	r0, [r5, #60]	; 0x3c
   daaa0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   daaa2:	4620      	mov	r0, r4
   daaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daaa8:	f7fd bc78 	b.w	d839c <gmtime_r>
   daaac:	2003e1c8 	.word	0x2003e1c8

000daab0 <memcpy>:
   daab0:	440a      	add	r2, r1
   daab2:	4291      	cmp	r1, r2
   daab4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   daab8:	d100      	bne.n	daabc <memcpy+0xc>
   daaba:	4770      	bx	lr
   daabc:	b510      	push	{r4, lr}
   daabe:	f811 4b01 	ldrb.w	r4, [r1], #1
   daac2:	f803 4f01 	strb.w	r4, [r3, #1]!
   daac6:	4291      	cmp	r1, r2
   daac8:	d1f9      	bne.n	daabe <memcpy+0xe>
   daaca:	bd10      	pop	{r4, pc}

000daacc <memmove>:
   daacc:	4288      	cmp	r0, r1
   daace:	b510      	push	{r4, lr}
   daad0:	eb01 0402 	add.w	r4, r1, r2
   daad4:	d902      	bls.n	daadc <memmove+0x10>
   daad6:	4284      	cmp	r4, r0
   daad8:	4623      	mov	r3, r4
   daada:	d807      	bhi.n	daaec <memmove+0x20>
   daadc:	1e43      	subs	r3, r0, #1
   daade:	42a1      	cmp	r1, r4
   daae0:	d008      	beq.n	daaf4 <memmove+0x28>
   daae2:	f811 2b01 	ldrb.w	r2, [r1], #1
   daae6:	f803 2f01 	strb.w	r2, [r3, #1]!
   daaea:	e7f8      	b.n	daade <memmove+0x12>
   daaec:	4402      	add	r2, r0
   daaee:	4601      	mov	r1, r0
   daaf0:	428a      	cmp	r2, r1
   daaf2:	d100      	bne.n	daaf6 <memmove+0x2a>
   daaf4:	bd10      	pop	{r4, pc}
   daaf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   daafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   daafe:	e7f7      	b.n	daaf0 <memmove+0x24>

000dab00 <memset>:
   dab00:	4402      	add	r2, r0
   dab02:	4603      	mov	r3, r0
   dab04:	4293      	cmp	r3, r2
   dab06:	d100      	bne.n	dab0a <memset+0xa>
   dab08:	4770      	bx	lr
   dab0a:	f803 1b01 	strb.w	r1, [r3], #1
   dab0e:	e7f9      	b.n	dab04 <memset+0x4>

000dab10 <srand>:
   dab10:	b538      	push	{r3, r4, r5, lr}
   dab12:	4b0d      	ldr	r3, [pc, #52]	; (dab48 <srand+0x38>)
   dab14:	681d      	ldr	r5, [r3, #0]
   dab16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dab18:	4604      	mov	r4, r0
   dab1a:	b97b      	cbnz	r3, dab3c <srand+0x2c>
   dab1c:	2018      	movs	r0, #24
   dab1e:	f7fd fbe5 	bl	d82ec <malloc>
   dab22:	4a0a      	ldr	r2, [pc, #40]	; (dab4c <srand+0x3c>)
   dab24:	4b0a      	ldr	r3, [pc, #40]	; (dab50 <srand+0x40>)
   dab26:	63a8      	str	r0, [r5, #56]	; 0x38
   dab28:	e9c0 2300 	strd	r2, r3, [r0]
   dab2c:	4b09      	ldr	r3, [pc, #36]	; (dab54 <srand+0x44>)
   dab2e:	6083      	str	r3, [r0, #8]
   dab30:	230b      	movs	r3, #11
   dab32:	8183      	strh	r3, [r0, #12]
   dab34:	2201      	movs	r2, #1
   dab36:	2300      	movs	r3, #0
   dab38:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dab3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dab3e:	2200      	movs	r2, #0
   dab40:	611c      	str	r4, [r3, #16]
   dab42:	615a      	str	r2, [r3, #20]
   dab44:	bd38      	pop	{r3, r4, r5, pc}
   dab46:	bf00      	nop
   dab48:	2003e1c8 	.word	0x2003e1c8
   dab4c:	abcd330e 	.word	0xabcd330e
   dab50:	e66d1234 	.word	0xe66d1234
   dab54:	0005deec 	.word	0x0005deec

000dab58 <strcmp>:
   dab58:	f810 2b01 	ldrb.w	r2, [r0], #1
   dab5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   dab60:	2a01      	cmp	r2, #1
   dab62:	bf28      	it	cs
   dab64:	429a      	cmpcs	r2, r3
   dab66:	d0f7      	beq.n	dab58 <strcmp>
   dab68:	1ad0      	subs	r0, r2, r3
   dab6a:	4770      	bx	lr

000dab6c <strcpy>:
   dab6c:	4603      	mov	r3, r0
   dab6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dab72:	f803 2b01 	strb.w	r2, [r3], #1
   dab76:	2a00      	cmp	r2, #0
   dab78:	d1f9      	bne.n	dab6e <strcpy+0x2>
   dab7a:	4770      	bx	lr

000dab7c <strdup>:
   dab7c:	4b02      	ldr	r3, [pc, #8]	; (dab88 <strdup+0xc>)
   dab7e:	4601      	mov	r1, r0
   dab80:	6818      	ldr	r0, [r3, #0]
   dab82:	f000 b803 	b.w	dab8c <_strdup_r>
   dab86:	bf00      	nop
   dab88:	2003e1c8 	.word	0x2003e1c8

000dab8c <_strdup_r>:
   dab8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dab8e:	4604      	mov	r4, r0
   dab90:	4608      	mov	r0, r1
   dab92:	460d      	mov	r5, r1
   dab94:	f000 f80f 	bl	dabb6 <strlen>
   dab98:	1c42      	adds	r2, r0, #1
   dab9a:	4611      	mov	r1, r2
   dab9c:	4620      	mov	r0, r4
   dab9e:	9201      	str	r2, [sp, #4]
   daba0:	f7fd fbdc 	bl	d835c <_malloc_r>
   daba4:	4604      	mov	r4, r0
   daba6:	b118      	cbz	r0, dabb0 <_strdup_r+0x24>
   daba8:	9a01      	ldr	r2, [sp, #4]
   dabaa:	4629      	mov	r1, r5
   dabac:	f7ff ff80 	bl	daab0 <memcpy>
   dabb0:	4620      	mov	r0, r4
   dabb2:	b003      	add	sp, #12
   dabb4:	bd30      	pop	{r4, r5, pc}

000dabb6 <strlen>:
   dabb6:	4603      	mov	r3, r0
   dabb8:	f813 2b01 	ldrb.w	r2, [r3], #1
   dabbc:	2a00      	cmp	r2, #0
   dabbe:	d1fb      	bne.n	dabb8 <strlen+0x2>
   dabc0:	1a18      	subs	r0, r3, r0
   dabc2:	3801      	subs	r0, #1
   dabc4:	4770      	bx	lr

000dabc6 <strncpy>:
   dabc6:	b510      	push	{r4, lr}
   dabc8:	3901      	subs	r1, #1
   dabca:	4603      	mov	r3, r0
   dabcc:	b132      	cbz	r2, dabdc <strncpy+0x16>
   dabce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dabd2:	f803 4b01 	strb.w	r4, [r3], #1
   dabd6:	3a01      	subs	r2, #1
   dabd8:	2c00      	cmp	r4, #0
   dabda:	d1f7      	bne.n	dabcc <strncpy+0x6>
   dabdc:	441a      	add	r2, r3
   dabde:	2100      	movs	r1, #0
   dabe0:	4293      	cmp	r3, r2
   dabe2:	d100      	bne.n	dabe6 <strncpy+0x20>
   dabe4:	bd10      	pop	{r4, pc}
   dabe6:	f803 1b01 	strb.w	r1, [r3], #1
   dabea:	e7f9      	b.n	dabe0 <strncpy+0x1a>

000dabec <_strtol_l.isra.0>:
   dabec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dabf0:	4e3a      	ldr	r6, [pc, #232]	; (dacdc <_strtol_l.isra.0+0xf0>)
   dabf2:	4686      	mov	lr, r0
   dabf4:	468c      	mov	ip, r1
   dabf6:	4660      	mov	r0, ip
   dabf8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dabfc:	5da5      	ldrb	r5, [r4, r6]
   dabfe:	f015 0508 	ands.w	r5, r5, #8
   dac02:	d1f8      	bne.n	dabf6 <_strtol_l.isra.0+0xa>
   dac04:	2c2d      	cmp	r4, #45	; 0x2d
   dac06:	d133      	bne.n	dac70 <_strtol_l.isra.0+0x84>
   dac08:	f89c 4000 	ldrb.w	r4, [ip]
   dac0c:	f04f 0801 	mov.w	r8, #1
   dac10:	f100 0c02 	add.w	ip, r0, #2
   dac14:	2b00      	cmp	r3, #0
   dac16:	d05c      	beq.n	dacd2 <_strtol_l.isra.0+0xe6>
   dac18:	2b10      	cmp	r3, #16
   dac1a:	d10c      	bne.n	dac36 <_strtol_l.isra.0+0x4a>
   dac1c:	2c30      	cmp	r4, #48	; 0x30
   dac1e:	d10a      	bne.n	dac36 <_strtol_l.isra.0+0x4a>
   dac20:	f89c 0000 	ldrb.w	r0, [ip]
   dac24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dac28:	2858      	cmp	r0, #88	; 0x58
   dac2a:	d14d      	bne.n	dacc8 <_strtol_l.isra.0+0xdc>
   dac2c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dac30:	2310      	movs	r3, #16
   dac32:	f10c 0c02 	add.w	ip, ip, #2
   dac36:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dac3a:	3f01      	subs	r7, #1
   dac3c:	2600      	movs	r6, #0
   dac3e:	fbb7 f9f3 	udiv	r9, r7, r3
   dac42:	4630      	mov	r0, r6
   dac44:	fb03 7a19 	mls	sl, r3, r9, r7
   dac48:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dac4c:	2d09      	cmp	r5, #9
   dac4e:	d818      	bhi.n	dac82 <_strtol_l.isra.0+0x96>
   dac50:	462c      	mov	r4, r5
   dac52:	42a3      	cmp	r3, r4
   dac54:	dd24      	ble.n	daca0 <_strtol_l.isra.0+0xb4>
   dac56:	1c75      	adds	r5, r6, #1
   dac58:	d007      	beq.n	dac6a <_strtol_l.isra.0+0x7e>
   dac5a:	4581      	cmp	r9, r0
   dac5c:	d31d      	bcc.n	dac9a <_strtol_l.isra.0+0xae>
   dac5e:	d101      	bne.n	dac64 <_strtol_l.isra.0+0x78>
   dac60:	45a2      	cmp	sl, r4
   dac62:	db1a      	blt.n	dac9a <_strtol_l.isra.0+0xae>
   dac64:	fb00 4003 	mla	r0, r0, r3, r4
   dac68:	2601      	movs	r6, #1
   dac6a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dac6e:	e7eb      	b.n	dac48 <_strtol_l.isra.0+0x5c>
   dac70:	2c2b      	cmp	r4, #43	; 0x2b
   dac72:	bf08      	it	eq
   dac74:	f89c 4000 	ldrbeq.w	r4, [ip]
   dac78:	46a8      	mov	r8, r5
   dac7a:	bf08      	it	eq
   dac7c:	f100 0c02 	addeq.w	ip, r0, #2
   dac80:	e7c8      	b.n	dac14 <_strtol_l.isra.0+0x28>
   dac82:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dac86:	2d19      	cmp	r5, #25
   dac88:	d801      	bhi.n	dac8e <_strtol_l.isra.0+0xa2>
   dac8a:	3c37      	subs	r4, #55	; 0x37
   dac8c:	e7e1      	b.n	dac52 <_strtol_l.isra.0+0x66>
   dac8e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dac92:	2d19      	cmp	r5, #25
   dac94:	d804      	bhi.n	daca0 <_strtol_l.isra.0+0xb4>
   dac96:	3c57      	subs	r4, #87	; 0x57
   dac98:	e7db      	b.n	dac52 <_strtol_l.isra.0+0x66>
   dac9a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dac9e:	e7e4      	b.n	dac6a <_strtol_l.isra.0+0x7e>
   daca0:	1c73      	adds	r3, r6, #1
   daca2:	d106      	bne.n	dacb2 <_strtol_l.isra.0+0xc6>
   daca4:	2322      	movs	r3, #34	; 0x22
   daca6:	f8ce 3000 	str.w	r3, [lr]
   dacaa:	4638      	mov	r0, r7
   dacac:	b942      	cbnz	r2, dacc0 <_strtol_l.isra.0+0xd4>
   dacae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dacb2:	f1b8 0f00 	cmp.w	r8, #0
   dacb6:	d000      	beq.n	dacba <_strtol_l.isra.0+0xce>
   dacb8:	4240      	negs	r0, r0
   dacba:	2a00      	cmp	r2, #0
   dacbc:	d0f7      	beq.n	dacae <_strtol_l.isra.0+0xc2>
   dacbe:	b10e      	cbz	r6, dacc4 <_strtol_l.isra.0+0xd8>
   dacc0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dacc4:	6011      	str	r1, [r2, #0]
   dacc6:	e7f2      	b.n	dacae <_strtol_l.isra.0+0xc2>
   dacc8:	2430      	movs	r4, #48	; 0x30
   dacca:	2b00      	cmp	r3, #0
   daccc:	d1b3      	bne.n	dac36 <_strtol_l.isra.0+0x4a>
   dacce:	2308      	movs	r3, #8
   dacd0:	e7b1      	b.n	dac36 <_strtol_l.isra.0+0x4a>
   dacd2:	2c30      	cmp	r4, #48	; 0x30
   dacd4:	d0a4      	beq.n	dac20 <_strtol_l.isra.0+0x34>
   dacd6:	230a      	movs	r3, #10
   dacd8:	e7ad      	b.n	dac36 <_strtol_l.isra.0+0x4a>
   dacda:	bf00      	nop
   dacdc:	000db7af 	.word	0x000db7af

000dace0 <strtol>:
   dace0:	4613      	mov	r3, r2
   dace2:	460a      	mov	r2, r1
   dace4:	4601      	mov	r1, r0
   dace6:	4802      	ldr	r0, [pc, #8]	; (dacf0 <strtol+0x10>)
   dace8:	6800      	ldr	r0, [r0, #0]
   dacea:	f7ff bf7f 	b.w	dabec <_strtol_l.isra.0>
   dacee:	bf00      	nop
   dacf0:	2003e1c8 	.word	0x2003e1c8

000dacf4 <dynalib_user>:
   dacf4:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dad04:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   dad14:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   dad24:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   dad34:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   dad44:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   dad54:	69677261 4f00676e 6556206e 6c636968     arging.On Vehicl
   dad64:	77502065 664f0072 65562066 6c636968     e Pwr.Off Vehicl
   dad74:	77502065 61460072 00746c75 6f636944     e Pwr.Fault.Dico
   dad84:	63656e6e 00646574 44206f4e 00617461     nnected.No Data.
   dad94:	70736552 65736e6f 63655220 65766965     Response Receive
   dada4:	6e550064 776f6e6b 6572206e 6e6f7073     d.Unknown respon
   dadb4:	72206573 76656365 20646569 55006925     se recevied %i.U
   dadc4:	6f646962 48207374 006b6f6f 64726148     bidots Hook.Hard
   dadd4:	73655220 69207465 2032206e 6f636573      Reset in 2 seco
   dade4:	0073646e 20746553 62726556 2065736f     nds.Set Verbose 
   dadf4:	65646f4d 43003000 7261656c 56206465     Mode.0.Cleared V
   dae04:	6f627265 4d206573 0065646f 312e3225     erbose Mode.%2.1
   dae14:	54552066 69540043 7a20656d 20656e6f     f UTC.Time zone 
   dae24:	7366666f 25207465 69540069 5300656d     offset %i.Time.S
   dae34:	6c706d61 6e492065 76726574 69206c61     ample Interval i
   dae44:	6f6e2073 69252077 6e696d20 73657475     s now %i minutes
   dae54:	63227b00 6e696261 253a2254 66322e34     .{"cabinT":%4.2f
   dae64:	7622202c 54746e65 34253a22 2c66322e     , "ventT":%4.2f,
   dae74:	756f2220 64697374 3a225465 322e3425      "outsideT":%4.2
   dae84:	22202c66 74746162 22797265 2c69253a     f, "battery":%i,
   dae94:	6b222020 22317965 7325223a 22202c22       "key1":"%s", "
   daea4:	65736572 3a227374 202c6925 656c6122     resets":%i, "ale
   daeb4:	22737472 2c69253a 69742220 7473656d     rts":%i, "timest
   daec4:	22706d61 756c253a 2c303030 616c2220     amp":%lu000, "la
   daed4:	253a2274 22202c66 22676e6c 7d66253a     t":%f, "lng":%f}
   daee4:	69625500 73746f64 54424d2d 6f482d41     .Ubidots-MBTA-Ho
   daef4:	762d6b6f 61502d32 00657372 61766e49     ok-v2-Parse.Inva
   daf04:	2064696c 64616572 00676e69 53207325     lid reading.%s S
   daf14:	2e32253a 25256630 3a51202c 302e3225     :%2.0f%%, Q:%2.0
   daf24:	20252566 6f724600 7325206d 206f7420     f%% .From %s to 
   daf34:	53007325 65746174 61725420 7469736e     %s.State Transit
   daf44:	006e6f69 6e6e7552 00676e69 6c696144     ion.Running.Dail
   daf54:	6c432079 756e6165 53440070 666f2054     y Cleanup.DST of
   daf64:	74657366 2e322520 6e006631 6f6c206f     fset %2.1f.no lo
   daf74:	69746163 73206e6f 6c657461 6574696c     cation satellite
   daf84:	64253a73 636f6c00 6f697461 66253a6e     s:%d.location:%f
   daf94:	2066252c 69746c61 65647574 2066253a     ,%f altitude:%f 
   dafa4:	65746173 74696c6c 253a7365 64682064     satellites:%d hd
   dafb4:	253a706f 6c25006c 696d2075 73696c6c     op:%l.%lu millis
   dafc4:	6e6f6365 74207364 6567206f 50472074     econds to get GP
   dafd4:	69662053 70670078 34250073 2066322e     S fix.gps.%4.2f 
   dafe4:	74530046 206b6375 73206e69 7065656c     F.Stuck in sleep
   daff4:	61747320 53006574 65746174 61707300      state.State.spa
   db004:	642f6b72 63697665 65732f65 6f697373     rk/device/sessio
   db014:	6e652f6e 72450064 20726f72 74617453     n/end.Error Stat
   db024:	202d2065 65736552 72450074 20726f72     e - Reset.Error 
   db034:	74617453 202d2065 65776f50 79432072     State - Power Cy
   db044:	00656c63 64616f4c 20676e69 74737953     cle.Loading Syst
   db054:	44206d65 75616665 0073746c 6e676953     em Defaults.Sign
   db064:	53006c61 6c706d61 746e4965 61767265     al.SampleInterva
   db074:	6552006c 43746573 746e756f 62614300     l.ResetCount.Cab
   db084:	65546e69 5600706d 54746e65 00706d65     inTemp.VentTemp.
   db094:	7374754f 54656469 00706d65 656c6552     OutsideTemp.Rele
   db0a4:	00657361 74617473 43664f65 41006768     ase.stateOfChg.A
   db0b4:	7472656c 69540073 664f656d 74657366     lerts.TimeOffset
   db0c4:	74614200 79726574 746e6f43 00747865     .BatteryContext.
   db0d4:	65736572 41524674 6148004d 65526472     resetFRAM.HardRe
   db0e4:	00746573 646e6553 00776f4e 62726556     set.SendNow.Verb
   db0f4:	2d65736f 65646f4d 74655300 6d69542d     ose-Mode.Set-Tim
   db104:	6e6f7a65 65530065 53442d74 66664f54     ezone.Set-DSTOff
   db114:	00746573 72617453 20707574 706d6f43     set.Startup Comp
   db124:	6574656c 00000000                       lete....

000db12c <_ZTV8MB85RC64>:
	...
   db134:	000d417d 000d4191 000d67d5 000d686b     }A...A...g..kh..
   db144:	000d68ed                                .h..

000db148 <_ZTV17PublishQueueAsync>:
	...
   db150:	000d4155 000d4169 000d7699 000d7825     UA..iA...v..%x..
   db160:	000d77e5 000d77c3 000d796b 000d780b     .w...w..ky...x..
   db170:	000dad08 000dad10 000dad15 000dad1a     ................
   db180:	000dad1e 000dad23 000dad28 000dad2c     ....#...(...,...
   db190:	000dad37 000dad42 000dad08 000dad4e     7...B.......N...
   db1a0:	000dad52 000dad5b 000dad6a 000dad7a     R...[...j...z...
   db1b0:	000dad80                                ....

000db1b4 <_ZL17FRAMversionNumber>:
   db1b4:	00000001 61666564 20746c75 42534d00     ....default .MSB
   db1c4:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   db1d4:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   db1e4:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   db1f4:	45444f4d 003e7525 65737341 61725474     MODE%u>.AssetTra
   db204:	72656b63 72697700 61655265 74794264     cker.wireReadByt
   db214:	76417365 616c6961 20656c62 20433249     esAvailable I2C 
   db224:	6f727265 75252072 72697700 61655265     error %u.wireRea
   db234:	74794264 76417365 616c6961 20656c62     dBytesAvailable 
   db244:	6f636e69 63657272 6f632074 20746e75     incorrect count 
   db254:	77007525 52657269 42646165 73657479     %u.wireReadBytes
   db264:	43324920 72726520 2520726f 69770075      I2C error %u.wi
   db274:	65526572 79426461 20736574 6f636e69     reReadBytes inco
   db284:	63657272 6f632074 20746e75 00007525     rrect count %u..

000db294 <_ZTVN8particle11SPISettingsE>:
	...
   db29c:	000d5929 000d58cd 000d58cf              )Y...X...X..

000db2a8 <_ZTV12AssetTracker>:
	...
   db2b0:	000d5991 000d59ad                       .Y...Y..

000db2b8 <_ZTV13LegacyAdapter>:
	...
   db2c0:	000d5d21 000d5d23 4d525047 4e470043     !]..#]..GPRMC.GN
   db2d0:	00434d52 47475047 4e470041 00414747     RMC.GPGGA.GNGGA.
   db2e0:	2e707061 6f6c6275 00000078              app.ublox...

000db2ec <_ZTV6LIS3DH>:
	...
   db2fc:	000d66ed 000d40a5 000d40a5              .f...@...@..

000db308 <_ZTV9LIS3DHSPI>:
	...
   db310:	000d6609 000d660b 000d670f 000d6649     .f...f...g..If..
   db320:	000d668b 000d6619 000d6633 74697277     .f...f..3f..writ
   db330:	74614465 61662061 64656c69 72756420     eData failed dur
   db340:	20676e69 73617265 72662065 64416d61     ing erase framAd
   db350:	253d7264 00000075                       dr=%u...

000db358 <_ZTV6MB85RC>:
	...
   db360:	000d6725 000d6727 000d67d5 000d686b     %g..'g...g..kh..
   db370:	000d68ed 69766564 65526563 66206461     .h..deviceRead f
   db380:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   db390:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   db3a0:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   db3b0:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   db3c0:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   db3d0:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   db3e0:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   db3f0:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   db400:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   db410:	00000063                                c...

000db414 <_ZTV12MCP79410SRAM>:
	...
   db41c:	000d69ad 000d69c3 000d699d 000d69a1     .i...i...i...i..
   db42c:	000d69ed 000d6ce1 000d6f01              .i...l...o..

000db438 <_ZTV12MCP79410Time>:
	...
   db440:	000d69b1 000d69b5                       .i...i..

000db448 <_ZTV14MCP79410EEPROM>:
	...
   db450:	000d69af 000d69d1 000d69a5 000d69a9     .i...i...i...i..
   db460:	000d69ed 000d6d1b 000d724d              .i...m..Mr..

000db46c <_ZTV8MCP79410>:
	...
   db474:	000d69b3 000d69df 6c627550 51687369     .i...i..PublishQ
   db484:	65756575 6e797341 75710063 69657565     ueueAsync.queuei
   db494:	6520676e 746e6576 656d614e 2073253d     ng eventName=%s 
   db4a4:	61746164 2073253d 3d6c7474 66206425     data=%s ttl=%d f
   db4b4:	7367616c 64253d31 616c6620 3d327367     lags1=%d flags2=
   db4c4:	73206425 3d657a69 70006425 696c6275     %d size=%d.publi
   db4d4:	6e696873 73252067 20732520 3d6c7474     shing %s %s ttl=
   db4e4:	66206425 7367616c 0078253d 6c627570     %d flags=%x.publ
   db4f4:	65687369 75732064 73656363 6c756673     ished successful
   db504:	7000796c 696c6275 64656873 69616620     ly.published fai
   db514:	2c64656c 6c697720 6572206c 20797274     led, will retry 
   db524:	25206e69 6d20756c 70610073 75702e70     in %lu ms.app.pu
   db534:	00007162                                bq..

000db538 <_ZTV21PublishQueueAsyncBase>:
	...
   db548:	000d7699 000d40a5 000d40a5 000d40a5     .v...@...@...@..
   db558:	000d40a5 000d40a5                       .@...@..

000db560 <_ZTV25PublishQueueAsyncRetained>:
	...
   db568:	000d7781 000d7795 000d7699 000d7825     .w...w...v..%x..
   db578:	000d77e5 000d77c3 000d796b 000d780b     .w...w..ky...x..

000db588 <_ZTVN5spark13CellularClassE>:
	...
   db590:	000d848f 000d8485 000d847b 000d8431     ........{...1...
   db5a0:	000d846f 000d8463 000d8457 000d844f     o...c...W...O...
   db5b0:	000d8445 000d843b 000d8f75              E...;...u...

000db5bc <_ZTV14CellularSignal>:
	...
   db5c4:	000d853d 000d8543 000d853f 000d8551     =...C...?...Q...
   db5d4:	000d8585 000d85b1 000d85e5 000d8635     ............5...
   db5e4:	fffffffc 00000000 000d865b              ........[...

000db5f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db5f8:	000d867b 000d8681 000d86bf 000d868f     {...............
   db608:	000d867d                                }...

000db60c <_ZTVN5spark13EthernetClassE>:
	...
   db614:	000d8c87 000d8c7d 000d8c73 000d8c69     ....}...s...i...
   db624:	000d8c5d 000d8c51 000d8c45 000d8c3d     ]...Q...E...=...
   db634:	000d8c33 000d8c29 000d8f75              3...)...u...

000db640 <_ZTV7TwoWire>:
	...
   db648:	000d8ca5 000d8cef 000d8cc7 000d8ca7     ................
   db658:	000d8ccf 000d8cd7 000d8cdf 000d8ce7     ................

000db668 <_ZTV9IPAddress>:
	...
   db670:	000d8e29 000d8e19 000d8e1b 00707061     )...........app.

000db680 <_ZTVN5spark12NetworkClassE>:
	...
   db688:	000d8f0d 000d8f17 000d8f21 000d8f2b     ........!...+...
   db698:	000d8f35 000d8f41 000d8f4d 000d8f59     5...A...M...Y...
   db6a8:	000d8f61 000d8f6b 000d8f75 006e616e     a...k...u...nan.
   db6b8:	00666e69 0066766f                        inf.ovf...

000db6c2 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db6c2:	18100800 38302820 2b25005a 3a643330     .... (08Z.%+03d:
   db6d2:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   db6e2:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
	...

000db6f4 <_ZTV11USARTSerial>:
	...
   db6fc:	000d9ab1 000d9b1d 000d9af5 000d905d     ............]...
   db70c:	000d9ac5 000d9ae1 000d9ad3 000d9aef     ................
   db71c:	000d9ab3 000d9ab7                       ........

000db724 <_ZTV9USBSerial>:
	...
   db72c:	000d9bb1 000d9c19 000d9bef 000d905d     ............]...
   db73c:	000d9be1 000d9bb3 000d9bc3 000d9c13     ................
   db74c:	000d9bd3 000d9bad                       ........

000db754 <_ZSt7nothrow>:
   db754:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   db764:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000db775 <day_name.6145>:
   db775:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   db785:	61536972                                 riSat

000db78a <mon_name.6146>:
   db78a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   db79a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   db7aa:	63654476                                vDec

000db7ae <_ctype_>:
   db7ae:	20202000 20202020 28282020 20282828     .         ((((( 
   db7be:	20202020 20202020 20202020 20202020                     
   db7ce:	10108820 10101010 10101010 10101010      ...............
   db7de:	04040410 04040404 10040404 10101010     ................
   db7ee:	41411010 41414141 01010101 01010101     ..AAAAAA........
   db7fe:	01010101 01010101 01010101 10101010     ................
   db80e:	42421010 42424242 02020202 02020202     ..BBBBBB........
   db81e:	02020202 02020202 02020202 10101010     ................
   db82e:	00000020 00000000 00000000 00000000      ...............
	...

000db8af <link_const_variable_data_end>:
	...

000db8b0 <link_constructors_location>:
   db8b0:	000d5775 	.word	0x000d5775
   db8b4:	000d5c95 	.word	0x000d5c95
   db8b8:	000d63b9 	.word	0x000d63b9
   db8bc:	000d727d 	.word	0x000d727d
   db8c0:	000d7bfd 	.word	0x000d7bfd
   db8c4:	000d7c0d 	.word	0x000d7c0d
   db8c8:	000d8409 	.word	0x000d8409
   db8cc:	000d850d 	.word	0x000d850d
   db8d0:	000d8c91 	.word	0x000d8c91
   db8d4:	000d8efd 	.word	0x000d8efd
   db8d8:	000d9049 	.word	0x000d9049
   db8dc:	000d9339 	.word	0x000d9339
   db8e0:	000d9621 	.word	0x000d9621
   db8e4:	000d9a9d 	.word	0x000d9a9d

000db8e8 <link_constructors_end>:
	...
